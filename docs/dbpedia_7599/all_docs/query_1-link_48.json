{
    "id": "dbpedia_7599_1",
    "rank": 48,
    "data": {
        "url": "https://developers.google.com/kml/documentation/kmlreference",
        "read_more_link": "",
        "language": "en",
        "title": "Keyhole Markup Language",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/opengraph/cyan.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/opengraph/cyan.png",
        "images": [
            "https://developers.google.com/static/kml/documentation/images/classTree52.gif",
            "https://developers.google.com/static/kml/documentation/images/kml_feed_small.png",
            "https://developers.google.com/static/kml/documentation/images/kml_feed_small.png",
            "https://developers.google.com/static/kml/documentation/images/kml_feed_small.png",
            "https://developers.google.com/static/kml/documentation/images/kml_feed_small.png",
            "https://developers.google.com/static/kml/documentation/images/defaultCameraAxes.gif",
            "https://developers.google.com/static/kml/documentation/images/ScreenLabels.gif",
            "https://developers.google.com/static/kml/documentation/images/itemicons.jpg",
            "https://developers.google.com/static/kml/documentation/images/lookAt.gif",
            "https://developers.google.com/static/kml/documentation/images/heading.gif",
            "https://developers.google.com/static/kml/documentation/images/orientationParams.gif",
            "https://developers.google.com/static/kml/documentation/images/modeling.gif",
            "https://developers.google.com/static/kml/documentation/images/fieldOfView.gif",
            "https://developers.google.com/static/kml/documentation/images/twoFovs.gif",
            "https://developers.google.com/static/kml/documentation/images/visibilityRange.gif",
            "https://developers.google.com/static/kml/documentation/images/lodDetails.gif",
            "https://developers.google.com/static/kml/documentation/images/screenrotation.gif",
            "https://developers.google.com/static/site-assets/blogger_64dp.png",
            "https://developers.google.com/static/site-assets/logo-twitter.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/kml/documentation/kmlreference",
        "text": "KML Reference\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThis section contains an alphabetical reference for all KML elements defined in KML Version 2.2, as well as elements in the Google extension namespace. The class tree for KML elements is shown below. In this diagram, elements to the right on a particular branch in the tree are extensions of the elements to their left. For example, Placemark is a special kind of Feature. It contains all of the elements that belong to Feature, and it adds some elements that are specific to the Placemark element.\n\nKML is an open standard officially named the OpenGIS® KML Encoding Standard (OGC KML). It is maintained by the Open Geospatial Consortium, Inc. (OGC). The complete specification for OGC KML can be found at http://www.opengeospatial.org/standards/kml/.\n\nThe complete XML schema for KML is located at http://schemas.opengis.net/kml/.\n\nNote: Click an element name in this diagram to jump to its entry in the reference section.\n\nNote that abstract elements (shown in boxes in the diagram) are not actually used in KML files. They are a useful way for a single element to serve as the programmatic foundation for multiple similar (but different) derived elements. Understanding this object-oriented hierarchy is also a good way for you to learn KML, since you can easily see groupings of related elements.\n\nAll elements derived from Object can have an id assigned to them. This id is used by the KML update mechanism (see <Update>) for files loaded with a NetworkLink. It is also used by shared styles (see <Style>). The id is a standard XML ID.\n\nBecause KML is an XML grammar and file format, tag names are case-sensitive and must appear exactly as shown here. If you're familiar with XML, you will also be interested in the KML 2.2 Schema. When you are editing KML text files, you can load this Schema into any XML editor and validate your KML code with it.\n\nTip: Viewing KML for Google Earth Features\n\nHere is a handy feature of Google Earth that makes it easy to view the KML file for any Feature. In Google Earth, you can right-click a Feature in the Places panel and copy it. To view the corresponding KML for the copied object, open your favorite text editor and paste the selection into it.\n\nCompatibility\n\nKML versions have a double numbering system: majorVersion.minorVersion. All versions with the same majorVersion are compatible. For this reason, if you change the namespace to \"2.2\" (that is, xmlns=\"http://www.opengis.net/kml/2.2\"), all KML 2.1 files validate in the KML 2.2 schema.\n\nAbout this reference\n\nEach reference entry includes a Syntax section that lists the elements contained in the main element. This Syntax section is an informal listing and uses simple shorthand to summarize the elements. This section also contains the following:\n\ndefault values for each element (or ellipses if it is a complex element or if there is no default value)\n\nthe type of the value (see KML Fields)\n\nThe Syntax section can be copied and used as a template for any non-abstract element in a KML file.\n\nKML Extension Namespace and the gx prefix\n\nThe OGC KML standard provides a mechanism for extensions - additional elements that contain information beyond what is available in the standard (learn more about XML namespaces at w3.org). With the launch of Google Earth 5.0, Google has provided extensions to KML to support a number of new features. These extensions use the gx prefix and the following namespace URI:\n\nxmlns:gx=\"http://www.google.com/kml/ext/2.2\"\n\nThis namespace URI must be added to the <kml> element in any KML file using gx-prefixed elements:\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\">\n\nExtensions to KML may not be supported in all geo-browsers. If your browser doesn't support particular extensions, the data in those extensions should be silently ignored, and the rest of the KML file should load without errors.\n\nElements that currently use the gx prefix are:\n\ngx:altitudeMode\n\ngx:altitudeOffset\n\ngx:angles\n\ngx:AnimatedUpdate\n\ngx:balloonVisibility\n\ngx:coord\n\ngx:delayedStart\n\ngx:drawOrder\n\ngx:duration\n\ngx:FlyTo\n\ngx:flyToMode\n\ngx:h\n\ngx:horizFov\n\ngx:interpolate\n\ngx:labelVisibility\n\ngx:LatLonQuad\n\ngx:MultiTrack\n\ngx:vieweroptions\n\ngx:outerColor\n\ngx:outerWidth\n\ngx:physicalWidth\n\ngx:Playlist\n\ngx:playMode\n\ngx:SoundCue\n\ngx:TimeSpan\n\ngx:TimeStamp\n\ngx:Tour\n\ngx:TourControl\n\ngx:TourPrimitive\n\ngx:Track\n\ngx:ViewerOptions\n\ngx:w\n\ngx:Wait\n\ngx:x\n\ngx:y\n\nThe complete XML schema for elements in this extension namespace is located at http://developers.google.com/kml/schema/kml22gx.xsd.\n\nKML fields\n\nKML uses common XML types such as boolean, string, double, float, and int. In addition, it defines a number of field element types. The following table lists some of the most commonly used types defined in KML and links to sample elements that use them:\n\nField Type Value Example Use altitudeModeEnum clampToGround, relativeToGround, absolute See <LookAt> and <Region> angle90 a value ≥−90 and ≤90 See <latitude> in <Model> anglepos90 a value ≥0 and ≤90 See <tilt> in <LookAt> angle180 a value ≥−180 and ≤180 See <longitude> in <Model> angle360 a value ≥−360 and ≤360 See <heading> in <Orientation> color hexBinary value: aabbggrr See any element that extends <ColorStyle> colorModeEnum normal, random See any element that extends <ColorStyle> dateTime dateTime, date, gYearMonth, gYear See <TimeSpan> and <TimeStamp> displayModeEnum default, hide See <BalloonStyle> gridOrigin lowerLeft, upperLeft See <PhotoOverlay> refreshModeEnum onChange, onInterval, onExpire See <Link> shapeEnum rectangle, cylinder, sphere See <PhotoOverlay> styleStateEnum normal, highlight See <StyleMap> unitsEnum fraction, pixels, insetPixels See <hotSpot> in <IconStyle>, <ScreenOverlay> vec2 x=double xunits=kml:unitsEnum\n\ny=double yunits=kml:unitsEnum See <hotSpot> in <IconStyle>,\n\n<ScreenOverlay> viewRefreshEnum never, onRequest, onStop, onRegion See <Link>\n\n<AbstractView>\n\nSyntax\n\n<!-- abstract element; do not create --> <!-- AbstractView --> <!-- Camera, LookAt --> <!-- extends Object --> <TimePrimitive>...</TimePrimitive> <!-- gx:TimeSpan or gx:TimeStamp --> <gx:ViewerOptions> <gx:option name=\"\" enabled=boolean /> <!-- name=\"streetview\", \"historicalimagery\", or \"sunlight\" --> </gx:ViewerOptions> <-- /AbstractView -->\n\nDescription\n\nThis is an abstract element and cannot be used directly in a KML file. This element is extended by the <Camera> and <LookAt> elements.\n\nExtends\n\n<Object>\n\nElements Specific to AbstractView\n\n<gx:ViewerOptions>\n\nThis element enables special viewing modes in Google Earth 6.0 and later. It has one or more <gx:option> child elements. The <gx:option> element has a name attribute and an enabled attribute. The name specifies one of the following: Street View imagery (\"streetview\"), historical imagery (\"historicalimagery\"), and sunlight effects for a given time of day (\"sunlight\"). The enabled attribute is used to turn a given viewing mode on or off.\n\n<gx:horizFov>\n\nDefines the horizontal field of view of the AbstractView during a tour. This element has no effect on AbstractViews outside of a tour. <gx:horizFov> is inserted automatically by the Google Earth client (versions 6.1+) during tour recording. Regular AbstractViews are assigned a value of 60; views within Street View are assigned a value of 85 to match the standard Street View field of view in Google Earth. Once set, the value will be applied to subsequent views, until a new value is specified.\n\nExtended By\n\n<Camera>\n\n<LookAt>\n\n<gx:altitudeMode>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<gx:altitudeMode>clampToGround</gx:altitudeMode> <!-- gx:altitudeModeEnum: relativeToSeaFloor, clampToSeaFloor, relativeToGround, clampToGround, absolute -->\n\nDescription\n\nCan be used instead of the OGC KML standard <altitudeMode> element, and accepts the following values in addition to the standard altitudeMode values:\n\nrelativeToSeaFloor - Interprets the altitude as a value in meters above the sea floor. If the KML feature is above land rather than sea, the altitude will be interpreted as being above the ground.\n\nclampToSeaFloor - The altitude specification is ignored, and the KML feature will be positioned on the sea floor. If the KML feature is on land rather than at sea, clampToSeaFloor will instead clamp to ground.\n\nAs with <altitudeMode>, <gx:altitudeMode> affects:\n\nthe altitude coordinate within the <coordinates> element\n\n<minAltitude> and <maxAltitude> within <LatLonAltBox>\n\n<altitude> within <Location>, <GroundOverlay>, and AbstractView (<LookAt> and <Camera>).\n\nMore information about altitude modes is available in the Altitude Modes chapter of the KML Developer's Guide.\n\nExample\n\naltitudemode_reference.kml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> <!-- required when using gx-prefixed elements --> <Placemark> <name>gx:altitudeMode Example</name> <LookAt> <longitude>146.806</longitude> <latitude>12.219</latitude> <heading>-60</heading> <tilt>70</tilt> <range>6300</range> <gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode> </LookAt> <LineString> <extrude>1</extrude> <gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode> <coordinates> 146.825,12.233,400 146.820,12.222,400 146.812,12.212,400 146.796,12.209,400 146.788,12.205,400 </coordinates> </LineString> </Placemark> </kml>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<gx:AnimatedUpdate id=\"ID\"> <gx:duration>0.0</gx:duration> <!-- double, specifies time in seconds --> <Update> <targetHref>...</targetHref> <!-- required; can contain a URL or be left blank --> <!-- (to target elements within the same file) --> <Change>...</Change> <Create>...</Create> <Delete>...</Delete> </Update> <gx:delayedStart>0</gx:delayedStart> <!-- double, specifies time in seconds --> </gx:AnimatedUpdate>\n\nDescription\n\n<gx:AnimatedUpdate> controls changes during a tour to KML features, using <Update>. Changes to KML features will not modify the DOM - that is, any changes will be reverted when the tour is over, and will not be saved in the KML at any time.\n\n<gx:AnimatedUpdate> should also contain a <gx:duration> value to specify the length of time in seconds over which the update takes place. Integer, float, and color fields are smoothly animated from original to new value across the duration; boolean, string, and other values that don't lend to interpolation are updated at the end of the duration.\n\nRefer to Tour timelines in the Touring chapter of the KML Developer's Guide for information about <gx:AnimatedUpdate> and the tour timeline.\n\n<gx:duration>\n\nSpecifies the length of time, in seconds, over which the update takes place.\n\n<gx:delayedStart>\n\nSpecifies the number of seconds to wait (after the inline start position) before starting the update.\n\nExample\n\nThe example below demonstrates a change in icon size. This change will be animated over a 5-second duration.\n\nanimatedupdate_example.kml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> <Document> <name>gx:AnimatedUpdate example</name> <Style id=\"pushpin\"> <IconStyle id=\"mystyle\">\n\n<Icon>\n\n<href>http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href> <scale>1.0</scale>\n\n</Icon>\n\n</IconStyle>\n\n</Style> <Placemark id=\"mountainpin1\"> <name>Pin on a mountaintop</name> <styleUrl>#pushpin</styleUrl>\n\n<Point>\n\n<coordinates>170.1435558771009,-43.60505741890396,0</coordinates>\n\n</Point> </Placemark> <gx:Tour> <name>Play me!</name> <gx:Playlist> <gx:FlyTo>\n\n<gx:flyToMode>bounce</gx:flyToMode>\n\n<gx:duration>3</gx:duration>\n\n<Camera>\n\n<longitude>170.157</longitude>\n\n<latitude>-43.671</latitude>\n\n<altitude>9700</altitude>\n\n<heading>-6.333</heading>\n\n<tilt>33.5</tilt>\n\n</Camera>\n\n</gx:FlyTo> <gx:AnimatedUpdate> <gx:duration>5</gx:duration> <Update> <targetHref></targetHref> <Change> <IconStyle targetId=\"mystyle\"> <scale>10.0</scale> </IconStyle> </Change> </Update> </gx:AnimatedUpdate> <gx:Wait> <gx:duration>5</gx:duration> </gx:Wait> </gx:Playlist> </gx:Tour> </Document> </kml>\n\nExtends\n\n<gx:TourPrimitive>\n\nContains\n\n<gx:duration>\n\n<Update>\n\n<BalloonStyle>\n\nSyntax\n\n<BalloonStyle id=\"ID\"> <!-- specific to BalloonStyle --> <bgColor>ffffffff</bgColor> <!-- kml:color --> <textColor>ff000000</textColor> <!-- kml:color --> <text>...</text> <!-- string --> <displayMode>default</displayMode> <!-- kml:displayModeEnum --> </BalloonStyle>\n\nDescription\n\nSpecifies how the description balloon for placemarks is drawn. The <bgColor>, if specified, is used as the background color of the balloon. See <Feature> for a diagram illustrating how the default description balloon appears in Google Earth.\n\nElements Specific to BalloonStyle\n\n<bgColor>\n\nBackground color of the balloon (optional). Color and opacity (alpha) values are expressed in hexadecimal notation. The range of values for any one color is 0 to 255 (00 to ff). The order of expression is aabbggrr, where aa=alpha (00 to ff); bb=blue (00 to ff); gg=green (00 to ff); rr=red (00 to ff). For alpha, 00 is fully transparent and ff is fully opaque. For example, if you want to apply a blue color with 50 percent opacity to an overlay, you would specify the following: <bgColor>7fff0000</bgColor>, where alpha=0x7f, blue=0xff, green=0x00, and red=0x00. The default is opaque white (ffffffff).\n\nNote: The use of the <color> element within <BalloonStyle> has been deprecated. Use <bgColor> instead.\n\n<textColor>\n\nForeground color for text. The default is black (ff000000).\n\n<text>\n\nText displayed in the balloon. If no text is specified, Google Earth draws the default balloon (with the Feature <name> in boldface, the Feature <description>, links for driving directions, a white background, and a tail that is attached to the point coordinates of the Feature, if specified).\n\nYou can add entities to the <text> tag using the following format to refer to a child element of Feature: $[name], $[description], $[address], $[id], $[Snippet]. Google Earth looks in the current Feature for the corresponding string entity and substitutes that information in the balloon. To include To here - From here driving directions in the balloon, use the $[geDirections] tag. To prevent the driving directions links from appearing in a balloon, include the <text> element with some content, or with $[description] to substitute the basic Feature <description>.\n\nFor example, in the following KML excerpt, $[name] and $[description] fields will be replaced by the <name> and <description> fields found in the Feature elements that use this BalloonStyle:\n\n<text>This is $[name], whose description is:<br/>$[description]</text>\n\n<displayMode>\n\nIf <displayMode> is default, Google Earth uses the information supplied in <text> to create a balloon . If <displayMode> is hide, Google Earth does not display the balloon. In Google Earth, clicking the List View icon for a Placemark whose balloon's <displayMode> is hide causes Google Earth to fly to the Placemark.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document> <name>BalloonStyle.kml</name>\n\n<open>1</open>\n\n<Style id=\"exampleBalloonStyle\">\n\n<BalloonStyle>\n\n<!-- a background color for the balloon -->\n\n<bgColor>ffffffbb</bgColor>\n\n<!-- styling of the balloon text -->\n\n<text><![CDATA[\n\n<b><font color=\"#CC0000\" size=\"+3\">$[name]</font></b>\n\n<br/><br/>\n\n<font face=\"Courier\">$[description]</font>\n\n<br/><br/>\n\nExtra text that will appear in the description balloon\n\n<br/><br/>\n\n<!-- insert the to/from hyperlinks -->\n\n$[geDirections]\n\n]]></text>\n\n</BalloonStyle>\n\n</Style>\n\n<Placemark>\n\n<name>BalloonStyle</name>\n\n<description>An example of BalloonStyle</description>\n\n<styleUrl>#exampleBalloonStyle</styleUrl>\n\n<Point>\n\n<coordinates>-122.370533,37.823842,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</Document>\n\n</kml>\n\nExtends\n\n<ColorStyle>\n\nContained By\n\n<Style>\n\nBack to top\n\n<gx:balloonVisibility>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<gx:balloonVisibility>0</gx:balloonVisibility> <!-- 0 (not visible) or 1 (visible) -->\n\nDescription\n\nToggles visibility of a description balloon. The balloon to be updated must be identified by the object's XML ID (e.g. <Placemark targetId=\"xxx\">).\n\nExamples\n\nThe first example shows <gx:balloonVisibility> with a Placemark. When the placemark is loaded, the description balloon is opened.\n\nballoonvisibility_example.kml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> <Placemark> <name>Eiffel Tower</name> <description> Located in Paris, France.\n\nThis description balloon opens\n\nwhen the Placemark is loaded. </description> <gx:balloonVisibility>1</gx:balloonVisibility> <Point> <coordinates>2.294785,48.858093,0</coordinates> </Point> </Placemark> </kml>\n\nThe second example shows the use of <gx:balloonVisibility> within a tour. A number of balloons are opened and closed during the tour, providing information to the viewer.\n\nballoonvisibility_tourexample.kml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> <Document> <name>balloonVisibility Example</name> <open>1</open> <gx:Tour> <name>Play me</name> <gx:Playlist> <gx:FlyTo> <gx:duration>8.0</gx:duration> <gx:flyToMode>bounce</gx:flyToMode> <LookAt> <longitude>-119.748584</longitude> <latitude>33.736266</latitude> <altitude>0</altitude> <heading>-9.295926</heading> <tilt>84.0957450</tilt> <range>4469.850414</range> <gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode> </LookAt> </gx:FlyTo> <gx:AnimatedUpdate> <gx:duration>0.0</gx:duration> <Update> <targetHref/> <Change> <Placemark targetId=\"underwater1\"> <gx:balloonVisibility>1</gx:balloonVisibility> </Placemark> </Change> </Update> </gx:AnimatedUpdate> <gx:Wait> <gx:duration>4.0</gx:duration> </gx:Wait> <gx:AnimatedUpdate> <gx:duration>0.0</gx:duration> <Update> <targetHref/> <Change> <Placemark targetId=\"underwater1\"> <gx:balloonVisibility>0</gx:balloonVisibility> </Placemark> </Change> </Update> </gx:AnimatedUpdate> <gx:FlyTo> <gx:duration>3</gx:duration> <gx:flyToMode>smooth</gx:flyToMode> <LookAt> <longitude>-119.782630</longitude> <latitude>33.862855</latitude> <altitude>0</altitude> <heading>-9.314858</heading> <tilt>84.117317</tilt> <range>6792.665540</range> <gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode> </LookAt> </gx:FlyTo> <gx:AnimatedUpdate> <gx:duration>0.0</gx:duration> <Update> <targetHref/> <Change> <Placemark targetId=\"underwater2\"> <gx:balloonVisibility>1</gx:balloonVisibility> </Placemark> </Change> </Update> </gx:AnimatedUpdate> <gx:Wait> <gx:duration>4.0</gx:duration> </gx:Wait> <gx:AnimatedUpdate> <gx:duration>0.0</gx:duration> <Update> <targetHref/> <Change> <Placemark targetId=\"underwater2\"> <gx:balloonVisibility>0</gx:balloonVisibility> </Placemark> </Change> </Update> </gx:AnimatedUpdate> <gx:FlyTo> <gx:duration>3</gx:duration> <gx:flyToMode>smooth</gx:flyToMode> <LookAt> <longitude>-119.849578</longitude> <latitude>33.968515</latitude> <altitude>0</altitude> <heading>-173.948935</heading> <tilt>23.063392</tilt> <range>3733.666023</range> <altitudeMode>relativeToGround</altitudeMode> </LookAt> </gx:FlyTo> <gx:AnimatedUpdate> <gx:duration>0.0</gx:duration> <Update> <targetHref/> <Change> <Placemark targetId=\"onland\"> <gx:balloonVisibility>1</gx:balloonVisibility> </Placemark> </Change> </Update> </gx:AnimatedUpdate> <gx:Wait> <gx:duration>4.0</gx:duration> </gx:Wait> </gx:Playlist> </gx:Tour> <Placemark id=\"underwater1\"> <name>Underwater off the California Coast</name> <description> The tour begins near the Santa Cruz Canyon, off the coast of California, USA. </description> <Point> <gx:altitudeMode>clampToSeaFloor</gx:altitudeMode> <coordinates>-119.749531,33.715059,0</coordinates> </Point> </Placemark> <Placemark id=\"underwater2\"> <name>Still swimming...</name> <description>We're about to leave the ocean, and visit the coast...</description> <Point> <gx:altitudeMode>clampToSeaFloor</gx:altitudeMode> <coordinates>-119.779550,33.829268,0</coordinates> </Point> </Placemark> <Placemark id=\"onland\"> <name>The end</name> <description> <![CDATA[The end of our simple tour. Use <gx:balloonVisibility>1</gx:balloonVisibility> to show description balloons.]]> </description> <Point> <coordinates>-119.849578,33.968515,0</coordinates> </Point> </Placemark> </Document> </kml>\n\nExtends\n\n<Feature>\n\n<Camera>\n\nSyntax\n\n<Camera id=\"ID\"> <!-- inherited from AbstractView element --> <TimePrimitive>...</TimePrimitive> <!-- gx:TimeSpan or gx:TimeStamp --> <gx:ViewerOptions> <option> name=\" \" type=\"boolean\"> &lt!-- name=\"streetview\", \"historicalimagery\", \"sunlight\", or \"groundnavigation\" --> </option> </gx:ViewerOptions> <!-- specific to Camera --> <longitude>0</longitude> <!-- kml:angle180 --> <latitude>0</latitude> <!-- kml:angle90 --> <altitude>0</altitude> <!-- double --> <heading>0</heading> <!-- kml:angle360 --> <tilt>0</tilt> <!-- kml:anglepos180 --> <roll>0</roll> <!-- kml:angle180 --> <altitudeMode>clampToGround</altitudeMode> <!-- kml:altitudeModeEnum: relativeToGround, clampToGround, or absolute --> <!-- or, gx:altitudeMode can be substituted: clampToSeaFloor, relativeToSeaFloor --> </Camera>\n\nDescription\n\nDefines the virtual camera that views the scene. This element defines the position of the camera relative to the Earth's surface as well as the viewing direction of the camera. The camera position is defined by <longitude>, <latitude>, <altitude>, and either <altitudeMode> or <gx:altitudeMode>. The viewing direction of the camera is defined by <heading>, <tilt>, and <roll>. <Camera> can be a child element of any Feature or of <NetworkLinkControl>. A parent element cannot contain both a <Camera> and a <LookAt> at the same time.\n\n<Camera> provides full six-degrees-of-freedom control over the view, so you can position the Camera in space and then rotate it around the X, Y, and Z axes. Most importantly, you can tilt the camera view so that you're looking above the horizon into the sky.\n\n<Camera> can also contain a TimePrimitive (<gx:TimeSpan> or <gx:TimeStamp>). Time values in Camera affect historical imagery, sunlight, and the display of time-stamped features. For more information, read Time with AbstractViews in the Time and Animation chapter of the Developer's Guide.\n\nDefining a View\n\nWithin a Feature or <NetworkLinkControl>, use either a <Camera> or a <LookAt> object (but not both in the same object). The <Camera> object defines the viewpoint in terms of the viewer's position and orientation. The <Camera> object allows you to specify a view that is not on the Earth's surface. The <LookAt> object defines the viewpoint in terms of what is being viewed. The <LookAt> object is more limited in scope than <Camera> and generally requires that the view direction intersect the Earth's surface.\n\nThe following diagram shows the X, Y, and Z axes, which are attached to the virtual camera.\n\nThe X axis points toward the right of the camera and is called the right vector.\n\nThe Y axis defines the \"up\" direction relative to the screen and is called the up vector.\n\nThe Z axis points from the center of the screen toward the eye point. The camera looks down the −Z axis, which is called the view vector.\n\nOrder of Transformations\n\nThe order of rotation is important. By default, the camera is looking straight down the −Z axis toward the Earth. Before rotations are performed, the camera is translated along the Z axis to <altitude>. The order of transformations is as follows:\n\n<altitude> - translate along the Z axis to <altitude>\n\n<heading> - rotate around the Z axis.\n\n<tilt> - rotate around the X axis.\n\n<roll> - rotate around the Z axis (again).\n\nNote that each time a rotation is applied, two of the camera axes change their orientation.\n\nElements Specific to Camera\n\n<longitude>\n\nLongitude of the virtual camera (eye point). Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from −180 to 0 degrees. Values east of the Meridian range from 0 to 180 degrees.\n\n<latitude>\n\nLatitude of the virtual camera. Degrees north or south of the Equator (0 degrees). Values range from −90 degrees to 90 degrees.\n\n<altitude>\n\nDistance of the camera from the earth's surface, in meters. Interpreted according to the Camera's <altitudeMode> or <gx:altitudeMode>.\n\n<heading>\n\nDirection (azimuth) of the camera, in degrees. Default=0 (true North). (See diagram.) Values range from 0 to 360 degrees.\n\n<tilt>\n\nRotation, in degrees, of the camera around the X axis. A value of 0 indicates that the view is aimed straight down toward the earth (the most common case). A value for 90 for <tilt> indicates that the view is aimed toward the horizon. Values greater than 90 indicate that the view is pointed up into the sky. Values for <tilt> are clamped at +180 degrees.\n\n<roll>\n\nRotation, in degrees, of the camera around the Z axis. Values range from −180 to +180 degrees.\n\n<altitudeMode>\n\nSpecifies how the <altitude> specified for the Camera is interpreted. Possible values are as follows:\n\nrelativeToGround - (default) Interprets the <altitude> as a value in meters above the ground. If the point is over water, the <altitude> will be interpreted as a value in meters above sea level. See <gx:altitudeMode> below to specify points relative to the sea floor.\n\nclampToGround - For a camera, this setting also places the camera relativeToGround, since putting the camera exactly at terrain height would mean that the eye would intersect the terrain (and the view would be blocked).\n\nabsolute - Interprets the <altitude> as a value in meters above sea level.\n\n<gx:altitudeMode>\n\nA KML extension in the Google extension namespace, allowing altitudes relative to the sea floor. Values are:\n\nrelativeToSeaFloor - Interprets the <altitude> as a value in meters above the sea floor. If the point is above land rather than sea, the <altitude> will be interpreted as being above the ground.\n\nclampToSeaFloor - The <altitude> specification is ignored, and the Camera will be positioned on the sea floor. If the point is on land rather than at sea, the Camera will be positioned on the ground.\n\nExtends\n\n<AbstractView>\n\nContained By\n\nAny element derived from <Feature>\n\n<NetworkLinkControl>\n\nBack to top\n\n<ColorStyle>\n\nSyntax\n\n<!-- abstract element; do not create --> <!-- ColorStyle id=\"ID\" --> <!-- IconStyle,LabelStyle,LineStyle,PolyStyle --> <color>ffffffff</color> <!-- kml:color --> <colorMode>normal</colorMode> <!-- kml:colorModeEnum: normal or random --> <!-- /ColorStyle -->\n\nDescription\n\nThis is an abstract element and cannot be used directly in a KML file. It provides elements for specifying the color and color mode of extended style types.\n\nElements Specific to ColorStyle\n\n<color>\n\nColor and opacity (alpha) values are expressed in hexadecimal notation. The range of values for any one color is 0 to 255 (00 to ff). For alpha, 00 is fully transparent and ff is fully opaque. The order of expression is aabbggrr, where aa=alpha (00 to ff); bb=blue (00 to ff); gg=green (00 to ff); rr=red (00 to ff). For example, if you want to apply a blue color with 50 percent opacity to an overlay, you would specify the following: <color>7fff0000</color>, where alpha=0x7f, blue=0xff, green=0x00, and red=0x00.\n\n<colorMode>\n\nValues for <colorMode> are normal (no effect) and random. A value of random applies a random linear scale to the base <color> as follows.\n\nTo achieve a truly random selection of colors, specify a base <color> of white (ffffffff).\n\nIf you specify a single color component (for example, a value of ff0000ff for red), random color values for that one component (red) will be selected. In this case, the values would range from 00 (black) to ff (full red).\n\nIf you specify values for two or for all three color components, a random linear scale is applied to each color component, with results ranging from black to the maximum values specified for each component.\n\nThe opacity of a color comes from the alpha component of <color> and is never randomized.\n\nExtends\n\n<Object>\n\nExtended By\n\n<IconStyle>\n\n<LabelStyle>\n\n<LineStyle>\n\n<PolyStyle>\n\nBack to top\n\n<Container>\n\nSyntax\n\n<!-- abstract element; do not create --> <!-- Container id=\"ID\" --> <!-- Document,Folder --> <!-- inherited from Feature element --> <name>...</name> <!-- string --> <visibility>1</visibility> <!-- boolean --> <open>0</open> <!-- boolean --> <address>...</address> <!-- string --> <AddressDetails xmlns=\"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0\">...\n\n</AddressDetails> <!-- string --> <phoneNumber>...</phoneNumber> <!-- string -->\n\n<Snippet maxLines=\"2\">...</Snippet> <!-- string --> <description>...</description> <!-- string --> <AbstractView>...</AbstractView> <!-- LookAt or Camera --> <TimePrimitive>...</TimePrimitive> <styleUrl>...</styleUrl> <!-- anyURI --> <StyleSelector>...</StyleSelector> <Region>...</Region> <Metadata>...</Metadata> <atom:author>...<atom:author> <!-- xmlns:atom=\"http://www.w3.org/2005/Atom\" --> <atom:link href=\" \"/> <!-- specific to Container -->\n\n<!-- 0 or more Features --> <!-- /Container -->\n\nDescription\n\nThis is an abstract element and cannot be used directly in a KML file. A Container element holds one or more Features and allows the creation of nested hierarchies.\n\nExtends\n\n<Feature>\n\nExtended By\n\n<Document>\n\n<Folder>\n\nBack to top\n\n<Document>\n\nSyntax\n\n<Document id=\"ID\"> <!-- inherited from Feature element --> <name>...</name> <!-- string --> <visibility>1</visibility> <!-- boolean --> <open>0</open> <!-- boolean --> <atom:author>...<atom:author> <!-- xmlns:atom --> <atom:link href=\" \"/> <!-- xmlns:atom --> <address>...</address> <!-- string --> <xal:AddressDetails>...</xal:AddressDetails> <!-- xmlns:xal -->\n\n<phoneNumber>...</phoneNumber> <!-- string -->\n\n<Snippet maxLines=\"2\">...</Snippet> <!-- string --> <description>...</description> <!-- string --> <AbstractView>...</AbstractView> <!-- Camera or LookAt --> <TimePrimitive>...</TimePrimitive> <styleUrl>...</styleUrl> <!-- anyURI --> <StyleSelector>...</StyleSelector> <Region>...</Region> <Metadata>...</Metadata> <!-- deprecated in KML 2.2 --> <ExtendedData>...</ExtendedData> <!-- new in KML 2.2 --> <!-- specific to Document --> <!-- 0 or more Schema elements --> <!-- 0 or more Feature elements --> </Document>\n\nDescription\n\nA Document is a container for features and styles. This element is required if your KML file uses shared styles. It is recommended that you use shared styles, which require the following steps:\n\nDefine all Styles in a Document. Assign a unique ID to each Style.\n\nWithin a given Feature or StyleMap, reference the Style's ID using a <styleUrl> element.\n\nNote that shared styles are not inherited by the Features in the Document.\n\nEach Feature must explicitly reference the styles it uses in a <styleUrl> element. For a Style that applies to a Document (such as ListStyle), the Document itself must explicitly reference the <styleUrl>. For example:\n\n<Document> <Style id=\"myPrettyDocument\"> <ListStyle> ... </ListStyle> </Style> <styleUrl#myPrettyDocument\"> ... </Document>\n\nDo not put shared styles within a Folder.\n\nThe following example illustrates use of a shared style.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document>\n\n<name>Document.kml</name>\n\n<open>1</open> <Style id=\"exampleStyleDocument\">\n\n<LabelStyle>\n\n<color>ff0000cc</color>\n\n</LabelStyle>\n\n</Style>\n\n<Placemark>\n\n<name>Document Feature 1</name>\n\n<styleUrl>#exampleStyleDocument</styleUrl>\n\n<Point>\n\n<coordinates>-122.371,37.816,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>Document Feature 2</name>\n\n<styleUrl>#exampleStyleDocument</styleUrl>\n\n<Point>\n\n<coordinates>-122.370,37.817,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</Document>\n\n</kml>\n\nExtends\n\n<Container>\n\nContains\n\n0 or more elements derived from <Feature>\n\n0 or more elements derived from <StyleSelector>\n\n0 or more elements derived from <Schema>\n\nBack to top\n\n<gx:duration>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<gx:duration>0.0</gx:duration> <!-- double -->\n\nDescription\n\n<gx:duration> extends gx:TourPrimitive by specifying a time-span for events. The time is written as seconds using XML's double datatype.\n\nDuration and <gx:FlyTo>\n\nWhen a duration is included within a <gx:FlyTo> element, it specifies the length of time that the browser takes to fly from the previous point to the specified point.\n\n<gx:FlyTo> <gx:flyToMode>bounce</gx:flyToMode> <gx:duration>10.2</gx:duration> <!-- AbstractView --> ... <!-- /AbstractView --> </gx:FlyTo>\n\nSpecifies the length of time over which the update takes place. Integer, float, and color fields are smoothly animated from original to new value across the duration; boolean, string, and other values that don't lend to interpolation are updated at the end of the duration.\n\n<gx:AnimatedUpdate> <gx:duration>5.0</gx:duration> <Update> .... </Update> </gx:AnimatedUpdate>\n\n<ExtendedData>\n\nSyntax\n\n<ExtendedData>\n\n<Data name=\"string\">\n\n<displayName>...</displayName> <!-- string -->\n\n<value>...</value> <!-- string -->\n\n</Data> <SchemaData schemaUrl=\"anyURI\">\n\n<SimpleData name=\"\"> ... </SimpleData> <!-- string -->\n\n</SchemaData> <namespace_prefix:other>...</namespace_prefix:other> </ExtendedData>\n\nDescription\n\nThe ExtendedData element offers three techniques for adding custom data to a KML Feature (NetworkLink, Placemark, GroundOverlay, PhotoOverlay, ScreenOverlay, Document, Folder). These techniques are\n\nAdding untyped data/value pairs using the <Data> element (basic)\n\nDeclaring new typed fields using the <Schema> element and then instancing them using the <SchemaData> element (advanced)\n\nReferring to XML elements defined in other namespaces by referencing the external namespace within the KML file (basic)\n\nThese techniques can be combined within a single KML file or Feature for different pieces of data.\n\nFor more information, see Adding Custom Data in \"Topics in KML.\"\n\nElements Specific to ExtendedData\n\n<Data name =\"string\">\n\nCreates an untyped name/value pair. The name can have two versions: name and displayName. The name attribute is used to identify the data pair within the KML file. The displayName element is used when a properly formatted name, with spaces and HTML formatting, is displayed in Google Earth. In the <text> element of <BalloonStyle>, the notation $[name/displayName] is replaced with <displayName>. If you substitute the value of the name attribute of the <Data> element in this format (for example, $[holeYardage], the attribute value is replaced with <value>. By default, the Placemark's balloon displays the name/value pairs associated with it.\n\n<displayName>\n\nAn optional formatted version of name, to be used for display purposes.\n\n<value>\n\nValue of the data pair.\n\n<Placemark> <name>Club house</name> <ExtendedData> <Data name=\"holeNumber\"> <value>1</value> </Data> <Data name=\"holeYardage\"> <value>234</value> </Data> <Data name=\"holePar\"> <value>4</value> </Data> </ExtendedData> </Placemark>\n\n<SchemaData schemaUrl=\"anyURI\">\n\nThis element is used in conjunction with <Schema> to add typed custom data to a KML Feature. The Schema element (identified by the schemaUrl attribute) declares the custom data type. The actual data objects (\"instances\" of the custom data) are defined using the SchemaData element.\n\nThe <schemaURL> can be a full URL, a reference to a Schema ID defined in an external KML file, or a reference to a Schema ID defined in the same KML file. All of the following specifications are acceptable:\n\nschemaUrl=\"http://host.com/PlacesIHaveLived.kml#my-schema-id\"\n\nschemaUrl=\"AnotherFile.kml#my-schema-id\"\n\nschemaUrl=\"#schema-id\" <!-- same file -->\n\nThe Schema element is always a child of Document. The ExtendedData element is a child of the Feature that contains the custom data.\n\n<SimpleData name=\"string\">\n\nThis element assigns a value to the custom data field identified by the name attribute. The type and name of this custom data field are declared in the <Schema> element.\n\nHere is an example of defining two custom data elements:\n\n<Placemark> <name>Easy trail</name> <ExtendedData> <SchemaData schemaUrl=\"#TrailHeadTypeId\"> <SimpleData name=\"TrailHeadName\">Pi in the sky</SimpleData> <SimpleData name=\"TrailLength\">3.14159</SimpleData> <SimpleData name=\"ElevationGain\">10</SimpleData> </SchemaData> </ExtendedData> <Point> <coordinates>-122.000,37.002</coordinates> </Point> </Placemark> <Placemark> <name>Difficult trail</name> <ExtendedData> <SchemaData schemaUrl=\"#TrailHeadTypeId\"> <SimpleData name=\"TrailHeadName\">Mount Everest</SimpleData> <SimpleData name=\"TrailLength\">347.45</SimpleData> <SimpleData name=\"ElevationGain\">10000</SimpleData> </SchemaData> </ExtendedData> <Point> <coordinates>-122.000,37.002</coordinates> </Point> </Placemark>\n\n<namespace_prefix:other>\n\nThis element allows you to add untyped custom data. Be sure to reference the namespace prefix in the <kml> element of your file or as an attribute of the <ExtendedData> element and to prefix the name of each data element with the namespace prefix. Custom data added in this manner is preserved in the KML file but is not used by Google Earth in any way. It is always saved along with the file.\n\nThe following example shows using the \"camp\" namespace prefix:\n\n<ExtendedData xmlns:prefix=\"camp\">\n\n<camp:number>14</camp:number>\n\n<camp:parkingSpaces>2</camp:parkingSpaces>\n\n<camp:tentSites>4</camp:tentSites>\n\n</ExtendedData>\n\nContained By\n\nAny element derived from <Feature>\n\nSee Also\n\nSchema\n\n<Feature>\n\nSyntax\n\n<!-- abstract element; do not create --> <!-- Feature id=\"ID\" --> <!-- Document,Folder, NetworkLink,Placemark, GroundOverlay,PhotoOverlay,ScreenOverlay --> <name>...</name> <!-- string --> <visibility>1</visibility> <!-- boolean --> <open>0</open> <!-- boolean --> <atom:author>...<atom:author> <!-- xmlns:atom --> <atom:link href=\" \"/> <!-- xmlns:atom --> <address>...</address> <!-- string --> <xal:AddressDetails>...</xal:AddressDetails> <!-- xmlns:xal -->\n\n<phoneNumber>...</phoneNumber> <!-- string -->\n\n<Snippet maxLines=\"2\">...</Snippet> <!-- string --> <description>...</description> <!-- string --> <AbstractView>...</AbstractView> <!-- Camera or LookAt --> <TimePrimitive>...</TimePrimitive> <!-- TimeStamp or TimeSpan --> <styleUrl>...</styleUrl> <!-- anyURI --> <StyleSelector>...</StyleSelector> <Region>...</Region> <Metadata>...</Metadata> <!-- deprecated in KML 2.2 --> <ExtendedData>...</ExtendedData> <!-- new in KML 2.2 -->\n\n<-- /Feature -->\n\nDescription\n\nThis is an abstract element and cannot be used directly in a KML file. The following diagram shows how some of a Feature's elements appear in Google Earth.\n\nElements Specific to Feature\n\n<name>\n\nUser-defined text displayed in the 3D viewer as the label for the object (for example, for a Placemark, Folder, or NetworkLink).\n\n<visibility>\n\nBoolean value. Specifies whether the feature is drawn in the 3D viewer when it is initially loaded. In order for a feature to be visible, the <visibility> tag of all its ancestors must also be set to 1. In the Google Earth List View, each Feature has a checkbox that allows the user to control visibility of the Feature.\n\n<open>\n\nBoolean value. Specifies whether a Document or Folder appears closed or open when first loaded into the Places panel. 0=collapsed (the default), 1=expanded. See also <ListStyle>. This element applies only to Document, Folder, and NetworkLink.\n\n<atom:author>\n\nKML 2.2 supports new elements for including data about the author and related website in your KML file. This information is displayed in geo search results, both in Earth browsers such as Google Earth, and in other applications such as Google Maps. The ascription elements used in KML are as follows:\n\natom:author element - parent element for atom:name\n\natom:name element - the name of the author\n\natom:link element - contains the href attribute\n\nhref attribute - URL of the web page containing the KML/KMZ file\n\nThese elements are defined in the Atom Syndication Format. The complete specification is found at http://atompub.org. (see the sample that follows).\n\nThe <atom:author> element is the parent element for <atom:name>, which specifies the author of the KML feature.\n\n<atom:link href=\"...\" >\n\nSpecifies the URL of the website containing this KML or KMZ file. Be sure to include the namespace for this element in any KML file that uses it: xmlns:atom=\"http://www.w3.org/2005/Atom\" (see the sample that follows).\n\n<address>\n\nA string value representing an unstructured address written as a standard street, city, state address, and/or as a postal code. You can use the <address> tag to specify the location of a point instead of using latitude and longitude coordinates. (However, if a <Point> is provided, it takes precedence over the <address>.) To find out which locales are supported for this tag in Google Earth, go to the Google Maps Help.\n\n<xal:AddressDetails>\n\nA structured address, formatted as xAL, or eXtensible Address Language, an international standard for address formatting. <xal:AddressDetails> is used by KML for geocoding in Google Maps only. For details, see the Google Maps API documentation. Currently, Google Earth does not use this element; use <address> instead. Be sure to include the namespace for this element in any KML file that uses it: xmlns:xal=\"urn:oasis:names:tc:ciq:xsdschema:xAL:2.0\"\n\n<phoneNumber>\n\nA string value representing a telephone number. This element is used by Google Maps Mobile only. The industry standard for Java-enabled cellular phones is RFC2806.\n\nFor more information, see http://www.ietf.org/rfc /rfc2806.txt.\n\n<Snippet maxLines=\"2\" >\n\nA short description of the feature. In Google Earth, this description is displayed in the Places panel under the name of the feature. If a Snippet is not supplied, the first two lines of the <description> are used. In Google Earth, if a Placemark contains both a description and a Snippet, the <Snippet> appears beneath the Placemark in the Places panel, and the <description> appears in the Placemark's description balloon. This tag does not support HTML markup. <Snippet> has a maxLines attribute, an integer that specifies the maximum number of lines to display.\n\n<description>\n\nUser-supplied content that appears in the description balloon.\n\nThe supported content for the <description> element changed from Google Earth 4.3 to 5.0. Specific information for each version is listed out below, followed by information common to both.\n\nGoogle Earth 5.0\n\nGoogle Earth 5.0 (and later) supports plain text content, as well as full HTML and JavaScript, within description balloons. Contents of the description tag are rendered by the WebKit open source web browser engine, and are displayed as they would be in any WebKit-based browser.\n\nGeneral restrictions\n\nLinks to local files are generally not allowed. This prevents malicious code from damaging your system or accessing your data. Should you wish to allow access to your local filesystem, select Preferences > Allow access to local files and personal data. Links to image files on the local filesystem are always allowed, if contained within an <img> tag.\n\nContent that has been compressed into a KMZ file can be accessed, even if on the local filesystem.\n\nCookies are enabled, but for the purposes of the same-origin policy, local content does not share a domain with any other content (including other local content).\n\nHTML\n\nHTML is mostly rendered as it would be in any WebKit browser.\n\nTargets are ignored when included in HTML written directly into the KML; all such links are opened as if the target is set to _blank. Any specified targets are ignored.\n\nHTML that is contained in an iFrame, however, or dynamically generated with JavaScript or DHTML, will use target=\"_self\" as the default. Other targets can be specified and are supported.\n\nThe contents of KMZ files, local anchor links, and ;flyto methods cannot be targeted from HTML contained within an iFrame.\n\nIf the user specifies width=\"100%\" for the width of an iFrame, then the iFrame's width will be dependent on all the other content in the balloon—it should essentially be ignored while calculating layout size. This rule applies to any other block element inside the balloon as well.\n\nJavaScript\n\nMost JavaScript is supported. Dialog boxes can not be created - functions such as alert() and prompt() will not be displayed. They will, however, be written to the system console, as will other errors and exceptions.\n\nCSS\n\nCSS is allowed. As with CSS in a regular web browser, CSS can be used to style text, page elements, and to control the size and appearance of the description balloon.\n\nGoogle Earth 4.3\n\nThe <description> element supports plain text as well as a subset of HTML formatting elements, including tables (see KML example below). It does not support other web-based technology, such as dynamic page markup (PHP, JSP, ASP), scripting languages (VBScript, Javascript), nor application languages (Java, Python). In Google Earth release 4.2, video is supported. (See Example below.)\n\nCommon information\n\nIf your description contains no HTML markup, Google Earth attempts to format it, replacing newlines with <br> and wrapping URLs with anchor tags. A valid URL string for the World Wide Web is automatically converted to a hyperlink to that URL (e.g., http://www.google.com). Consequently, you do not need to surround a URL with the <a href=\"http://..\"></a> tags in order to achieve a simple link.\n\nWhen using HTML to create a hyperlink around a specific word, or when including images in the HTML, you must use HTML entity references or the CDATA element to escape angle brackets, apostrophes, and other special characters. The CDATA element tells the XML parser to ignore special characters used within the brackets. This element takes the form of:\n\n<![CDATA[ special characters here ]]>\n\nIf you prefer not to use the CDATA element, you can use entity references to replace all the special characters.\n\n<description> <![CDATA[ This is an image <img src=\"icon.jpg\"> ]]> </description>\n\nOther Behavior Specified Through Use of the <a> Element\n\nKML supports the use of two attributes within the <a> element: href and type.\n\nThe anchor element <a> contains an href attribute that specifies a URL.\n\nIf the href is a KML file and has a .kml or .kmz file extension, Google Earth loads that file directly when the user clicks it. If the URL ends with an extension not known to Google Earth (for example, .html), the URL is sent to the browser.\n\nThe href can be a fragment URL (that is, a URL with a # sign followed by a KML identifier). When the user clicks a link that includes a fragment URL, by default the browser flies to the Feature whose ID matches the fragment. If the Feature has a LookAt or Camera element, the Feature is viewed from the specified viewpoint.\n\nThe behavior can be further specified by appending one of the following three strings to the fragment URL:\n\n;flyto (default) - fly to the Feature\n\n;balloon - open the Feature's balloon but do not fly to the Feature\n\n;balloonFlyto - open the Feature's balloon and fly to the Feature\n\nFor example, the following code indicates to open the file CraftsFairs.kml, fly to the Placemark whose ID is \"Albuquerque,\" and open its balloon:\n\n<description> <![CDATA[\n\n<a href=\"http://myServer.com/CraftsFairs.kml#Albuquerque;balloonFlyto\">\n\nOne of the Best Art Shows in the West</a> ]]> </description>\n\nThe type attribute is used within the <a> element when the href does not end in .kml or .kmz, but the reference needs to be interpreted in the context of KML. Specify the following:\n\ntype=\"application/vnd.google-earth.kml+xml\"\n\nFor example, the following URL uses the type attribute to notify Google Earth that it should attempt to load the file, even though the file extension is .php:\n\n<a href=\"myserver.com/cgi-bin/generate-kml.php#placemark123\" type=\"application/vnd.google-earth.kml+xml\">\n\n<AbstractView>\n\nDefines a viewpoint associated with any element derived from Feature. See <Camera> and <LookAt>.\n\n<TimePrimitive>\n\nAssociates this Feature with a period of time (<TimeSpan>) or a point in time (<TimeStamp>).\n\n<styleUrl>\n\nURL of a <Style> or <StyleMap> defined in a Document. If the style is in the same file, use a # reference. If the style is defined in an external file, use a full URL along with # referencing. Examples are\n\n<styleUrl>#myIconStyleID</styleUrl>\n\n<styleUrl>http://someserver.com/somestylefile.xml#restaurant</styleUrl>\n\n<styleUrl>eateries.kml#my-lunch-spot</styleUrl>\n\n<StyleSelector>\n\nOne or more Styles and StyleMaps can be defined to customize the appearance of any element derived from Feature or of the Geometry in a Placemark. (See <BalloonStyle>, <ListStyle>, <StyleSelector>, and the styles derived from <ColorStyle>.) A style defined within a Feature is called an \"inline style\" and applies only to the Feature that contains it. A style defined as the child of a <Document> is called a \"shared style.\" A shared style must have an id defined for it. This id is referenced by one or more Features within the <Document>. In cases where a style element is defined both in a shared style and in an inline style for a Feature—that is, a Folder, GroundOverlay, NetworkLink, Placemark, or ScreenOverlay—the value for the Feature's inline style takes precedence over the value for the shared style.\n\n<Region>\n\nFeatures and geometry associated with a Region are drawn only when the Region is active. See <Region>.\n\n<Metadata>\n\n<ExtendedData>\n\nAllows you to add custom data to a KML file. This data can be (1) data that references an external XML schema, (2) untyped data/value pairs, or (3) typed data. A given KML Feature can contain a combination of these types of custom data.\n\nSample Use of HTML Elements within a Description\n\nThis example illustrates the complete set of HTML elements supported by the <description> element in Google Earth 4.3. Google Earth 5.0 and later supports full HTML and JavaScript.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Placemark>\n\n<name>Feature.kml</name> <Snippet maxLines=\"4\">\n\nThe snippet is a way of\n\nproviding an alternative\n\ndescription that will be\n\nshown in the List view.\n\n</Snippet>\n\n<description>\n\n<![CDATA[\n\nStyles: <i>Italics</i>, <b>Bold</b>, <u>Underlined</u>,\n\n<s>Strike Out</s>, subscript<sub>subscript</sub>,\n\nsuperscript<sup>superscript</sup>,\n\n<big>Big</big>, <small>Small</small>, <tt>Typewriter</tt>,\n\n<em>Emphasized</em>, <strong>Strong</strong>, <code>Code</code>\n\n<hr />\n\nFonts:\n\n<font color=\"red\">red by name</font>,\n\n<font color=\"#408010\">leaf green by hexadecimal RGB</font>,\n\n<font size=1>size 1</font>, <font size=2>size 2</font>,\n\n<font size=3>size 3</font>, <font size=4>size 4</font>,\n\n<font size=5>size 5</font>, <font size=6>size 6</font>,\n\n<font size=7>size 7</font>,\n\n<font face=times>Times</font>,\n\n<font face=verdana>Verdana</font>,\n\n<font face=arial>Arial</font>\n\n<br/>\n\n<hr />\n\nLinks:\n\n<a href=\"http://doc.trolltech.com/3.3/qstylesheet.html\">\n\nQT Rich Text Rendering\n\n</a>\n\n<br />\n\n<hr />\n\nAlignment:\n\n<br />\n\n<p align=left>left</p><p align=center>center</p>\n\n<p align=right>right</p>\n\n<hr />\n\nOrdered Lists:\n\n<br />\n\n<ol><li>First</li><li>Second</li><li>Third</li></ol>\n\n<ol type=\"a\"><li>First</li><li>Second</li><li>Third</li></ol>\n\n<ol type=\"A\"><li>First</li><li>Second</li><li>Third</li></ol>\n\n<hr />\n\nUnordered Lists:\n\n<br />\n\n<ul><li>A</li><li>B</li><li>C</li></ul>\n\n<ul type=\"circle\"><li>A</li><li>B</li><li>C</li></ul>\n\n<ul type=\"square\"><li>A</li><li>B</li><li>C</li></ul>\n\n<hr />\n\nDefinitions:\n\n<br />\n\n<dl>\n\n<dt>Scrumpy</dt>\n\n<dd>Hard English cider from the west country</dd>\n\n<dt>Pentanque</dt>\n\n<dd>A form of boules where the goal is to throw metal ball as\n\nclose as possible to a jack</dd>\n\n</dl>\n\n<hr />\n\nBlock Quote:\n\n<br />\n\n<blockquote>\n\nWe shall not cease from exploration<br />\n\nAnd the end of all our exploring<br />\n\nWill be to arrive where we started<br />\n\nAnd know the place for the first time\n\n</blockquote>\n\n<br />\n\n<hr />\n\nCentered:\n\n<br />\n\n<center>See, I have a Rhyme assisting<br />\n\nmy feeble brain,<br />\n\nits tasks oft-times resisting!</center>\n\n<hr />\n\nHeadings:\n\n<br />\n\n<h1>Header 1</h1>\n\n<h2>Header 2</h2>\n\n<h3>Header 3</h3>\n\n<h3>Header 4</h4>\n\n<h3>Header 5</h5>\n\n<hr />\n\nImages:\n\n<br />\n\n<img src=\"icon.jpg\">\n\nand we have a link http://www.google.com.]]> </description> <Point>\n\n<coordinates>-122.378927,37.826793,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</kml>\n\nSample Use of Ascription Elements\n\nThis example shows use of the <atom:author>, <atom:name> and <atom:link> elements from the Atom namespace. Note that you need to reference this namespace within the <kml> element.\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:atom=\"http://www.w3.org/2005/Atom\"> <Document> <atom:author> <atom:name>J. K. Rowling</atom:name> </atom:author> <atom:link href=\"http://www.harrypotter.com\" /> <Placemark> <name>Hogwarts</name> <Point> <coordinates>1,1</coordinates> </Point> </Placemark> <Placemark> <name>Little Hangleton</name> <Point> <coordinates>1,2</coordinates> </Point> </Placemark> </Document> </kml>\n\nSample Video\n\nThis example shows how to embed a Flash video inside the Balloon.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document> <name>Video Example</name>\n\n<Style id=\"sn_blue-dot_copy3\">\n\n<IconStyle>\n\n<Icon>\n\n<href>http://www.google.com/intl/en_us/mapfiles/ms/icons/blue-dot.png</href>\n\n</Icon>\n\n</IconStyle>\n\n</Style>\n\n<Placemark>\n\n<name>Placemark</name>\n\n<description>\n\n<![CDATA[<div style=\"font-size:larger\">\n\n<div>\n\n<div style=\"width: 212px; font-size: 12px;\">\n\n<b>The Spaghetti Film</b>\n\n</div>\n\n<div style=\"font-size: 11px;\">\n\n<a target=\"_blank\" href=\"http://www.youtube.com/?v=FICUvrVlyXc\">\n\nhttp://www.youtube.com/?v=FICUvrVlyXc</a><br>\n\n</div><br>\n\n<div style=\"margin-left: auto; margin-right:auto;\">\n\n<object height=\"175\" width=\"212\">\n\n<param value=\"http://www.youtube.com/v/FICUvrVlyXc\" name=\"movie\">\n\n<param value=\"transparent\" name=\"wmode\">\n\n<embed wmode=\"transparent\" type=\"application/x-shockwave-flash\"\n\nsrc=\"http://www.youtube.com/v/FICUvrVlyXc\" height=\"175\"\n\nwidth=\"212\">\n\n</object>\n\n</div>\n\n</div>\n\n</div>\n\n<div style=\"font-size: smaller; margin-top: 1em;\">Saved from\n\n<a href=\"http://maps.google.com/ig/add?synd=mpl&pid=mpl&moduleurl=\n\nhttp:%2F%2Fwww.google.com%2Fig%2Fmodules%2Fmapplets-youtube.xml&hl=en&gl=us\">\n\nYouTubeVideos</a>\n\n</div>\n\n]]>\n\n</description>\n\n<styleUrl>#sn_blue-dot_copy3</styleUrl>\n\n<Point>\n\n<coordinates>-93.47875999999999,45.083248,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</Document> </kml>\n\nExtends\n\n<Object>\n\nExtended By\n\n<Container>\n\n<Overlay>\n\n<Placemark>\n\n<NetworkLink>\n\n<gx:Tour>\n\n<gx:FlyTo>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<gx:FlyTo id=\"ID\"> <gx:duration>0.0</gx:duration> <!-- double --> <gx:flyToMode>bounce</gx:flyToMode> <!-- smooth or bounce --> <!-- AbstractView --> <!-- Camera or LookAt --> ... <!-- /AbstractView --> </gx:FlyTo>\n\nDescription\n\n<gx:FlyTo> specifies a point in space to which the browser will fly during a tour. It must contain one AbstractView, and should contain <gx:duration> and <gx:flyToMode> elements, which specify the time it takes to fly to the defined point from the current point, and the method of flight, respectively.\n\n<gx:flyToMode>\n\nThere are two allowed values for <gx:flyToMode>: smooth, and bounce.\n\nSmooth FlyTos allow for an unbroken flight from point to point to point (and on). An unbroken series of smooth FlyTos will begin and end at zero velocity, and will not slow at each point. A series of smooth FlyTos is broken by any of the following elements:\n\n<gx:flyToMode>bounce</gx:flyToMode>\n\n<gx:Wait>\n\nThis means that velocity will be zero at the smooth FlyTo immediately preceding either of the above elements. A series of smooth FlyTos is not broken by <gx:AnimatedUpdate> elements.\n\nBounce FlyTos each begin and end at zero velocity.\n\nExample\n\n<gx:FlyTo>\n\n<gx:duration>2.55</gx:duration>\n\n<gx:flyToMode>smooth</gx:flyToMode>\n\n<Camera>\n\n<longitude>-113.084448</longitude>\n\n<latitude>36.567081</latitude>\n\n<altitude>41277.571403</altitude>\n\n<heading>116.150227</heading>\n\n<altitudeMode>absolute</altitudeMode>\n\n</Camera>\n\n</gx:FlyTo>\n\nExtends\n\n<gx:TourPrimitive>\n\nContains\n\n<gx:duration>\n\n<gx:flyToMode>\n\n<AbstractView>\n\n<Folder>\n\nSyntax\n\n<Folder id=\"ID\"> <!-- inherited from Feature element --> <name>...</name> <!-- string --> <visibility>1</visibility> <!-- boolean --> <open>0</open> <!-- boolean --> <atom:author>...<atom:author> <!-- xmlns:atom --> <atom:link href=\" \"/> <!-- xmlns:atom --> <address>...</address> <!-- string --> <xal:AddressDetails>...</xal:AddressDetails> <!-- xmlns:xal -->\n\n<phoneNumber>...</phoneNumber> <!-- string -->\n\n<Snippet maxLines=\"2\">...</Snippet> <!-- string --> <description>...</description> <!-- string --> <AbstractView>...</AbstractView> <!-- Camera or LookAt --> <TimePrimitive>...</TimePrimitive> <styleUrl>...</styleUrl> <!-- anyURI --> <StyleSelector>...</StyleSelector> <Region>...</Region> <Metadata>...</Metadata> <!-- deprecated in KML 2.2 --> <ExtendedData>...</ExtendedData> <!-- specific to Folder --> <!-- 0 or more Feature elements --> </Folder>\n\nDescription\n\nA Folder is used to arrange other Features hierarchically (Folders, Placemarks, NetworkLinks, or Overlays). A Feature is visible only if it and all its ancestors are visible.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Folder>\n\n<name>Folder.kml</name> <open>1</open>\n\n<description>\n\nA folder is a container that can hold multiple other objects\n\n</description>\n\n<Placemark>\n\n<name>Folder object 1 (Placemark)</name>\n\n<Point>\n\n<coordinates>-122.377588,37.830266,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>Folder object 2 (Polygon)</name>\n\n<Polygon>\n\n<outerBoundaryIs>\n\n<LinearRing>\n\n<coordinates>\n\n-122.377830,37.830445,0\n\n-122.377576,37.830631,0\n\n-122.377840,37.830642,0\n\n-122.377830,37.830445,0\n\n</coordinates>\n\n</LinearRing>\n\n</outerBoundaryIs>\n\n</Polygon>\n\n</Placemark>\n\n<Placemark>\n\n<name>Folder object 3 (Path)</name>\n\n<LineString>\n\n<tessellate>1</tessellate>\n\n<coordinates>\n\n-122.378009,37.830128,0 -122.377885,37.830379,0\n\n</coordinates>\n\n</LineString>\n\n</Placemark>\n\n</Folder>\n\n</kml>\n\nExtends\n\n<Container>\n\nContains\n\nAny element derived from <Feature>\n\n<Geometry>\n\nSyntax\n\n<!-- abstract element; do not create --> <!-- Geometry id=\"ID\" --> <!-- Point,LineString,LinearRing, Polygon,MultiGeometry,Model, gx:Track --> <!-- /Geometry -->\n\nDescription\n\nThis is an abstract element and cannot be used directly in a KML file. It provides a placeholder object for all derived Geometry objects.\n\nExtends\n\n<Object>\n\nExtended By\n\n<Point>\n\n<LineString>\n\n<LinearRing>\n\n<Polygon>\n\n<MultiGeometry>\n\n<gx:MultiTrack>\n\n<Model>\n\n<gx:Track>\n\n<GroundOverlay>\n\nSyntax\n\n<GroundOverlay id=\"ID\"> <!-- inherited from Feature element --> <name>...</name> <!-- string --> <visibility>1</visibility> <!-- boolean --> <open>0</open> <!-- boolean --> <atom:author>...<atom:author> <!-- xmlns:atom --> <atom:link href=\" \"/> <!-- xmlns:atom --> <address>...</address> <!-- string --> <xal:AddressDetails>...</xal:AddressDetails> <!-- xmlns:xal -->\n\n<phoneNumber>...</phoneNumber> <!-- string -->\n\n<Snippet maxLines=\"2\">...</Snippet> <!-- string --> <description>...</description> <!-- string --> <AbstractView>...</AbstractView> <!-- Camera or LookAt --> <TimePrimitive>...</TimePrimitive> <styleUrl>...</styleUrl> <!-- anyURI --> <StyleSelector>...</StyleSelector> <Region>...</Region> <Metadata>...</Metadata> <!-- deprecated in KML 2.2 --> <ExtendedData>...</ExtendedData> <!-- new in KML 2.2 --> <!-- inherited from Overlay element --> <color>ffffffff</color> <!-- kml:color --> <drawOrder>0</drawOrder> <!-- int --> <Icon>...</Icon> <!-- specific to GroundOverlay --> <altitude>0</altitude> <!-- double --> <altitudeMode>clampToGround</altitudeMode> <!-- kml:altitudeModeEnum: clampToGround or absolute --> <!-- or, substitute gx:altitudeMode: clampToSeaFloor or relativeToSeaFloor --> <LatLonBox> <north>...</north> <! kml:angle90 --> <south>...</south> <! kml:angle90 --> <east>...</east> <! kml:angle180 --> <west>...</west> <! kml:angle180 --> <rotation>0</rotation> <! kml:angle180 --> </LatLonBox> <gx:LatLonQuad> <coordinates>...</coordinates> <!-- four lon,lat tuples --> </gx:LatLonQuad> </GroundOverlay>\n\nDescription\n\nThis element draws an image overlay draped onto the terrain. The <href> child of <Icon> specifies the image to be used as the overlay. This file can be either on a local file system or on a web server. If this element is omitted or contains no <href>, a rectangle is drawn using the color and LatLonBox bounds defined by the ground overlay.\n\nElements Specific to GroundOverlay\n\n<altitude>\n\nSpecifies the distance above the earth's surface, in meters, and is interpreted according to the altitude mode.\n\n<altitudeMode>\n\nSpecifies how the <altitude>is interpreted. Possible values are\n\nclampToGround - (default) Indicates to ignore the altitude specification and drape the overlay over the terrain.\n\nabsolute - Sets the altitude of the overlay relative to sea level, regardless of the actual elevation of the terrain beneath the element. For example, if you set the altitude of an overlay to 10 meters with an absolute altitude mode, the overlay will appear to be at ground level if the terrain beneath is also 10 meters above sea level. If the terrain is 3 meters above sea level, the overlay will appear elevated above the terrain by 7 meters.\n\n<gx:altitudeMode>\n\nA KML extension in the Google extension namespace, allowing altitudes relative to the sea floor. Values are:\n\nrelativeToSeaFloor - Interprets the <altitude> as a value in meters above the sea floor. If the point is above land rather than sea, the <altitude> will be interpreted as being above the ground.\n\nclampToSeaFloor - The <altitude> specification is ignored, and the overlay will be draped over the sea floor. If the point is on land rather than at sea, the overlay will be positioned on the ground.\n\n<LatLonBox>\n\nSpecifies where the top, bottom, right, and left sides of a bounding box for the ground overlay are aligned.\n\n<north> Specifies the latitude of the north edge of the bounding box, in decimal degrees from 0 to ±90.\n\n<south> Specifies the latitude of the south edge of the bounding box, in decimal degrees from 0 to ±90.\n\n<east> Specifies the longitude of the east edge of the bounding box, in decimal degrees from 0 to ±180. (For overlays that overlap the meridian of 180° longitude, values can extend beyond that range.)\n\n<west> Specifies the longitude of the west edge of the bounding box, in decimal degrees from 0 to ±180. (For overlays that overlap the meridian of 180° longitude, values can extend beyond that range.)\n\n<rotation> Specifies a rotation of the overlay about its center, in degrees. Values can be ±180. The default is 0 (north). Rotations are specified in a counterclockwise direction.\n\n<LatLonBox> <north>48.25475939255556</north> <south>48.25207367852141</south> <east>-90.86591508839973</east> <west>-90.8714285289695</west> <rotation>39.37878630116985</rotation> </LatLonBox>\n\n<gx:LatLonQuad>\n\nUsed for nonrectangular quadrilateral ground overlays.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<GroundOverlay>\n\n<name>GroundOverlay.kml</name>\n\n<color>7fffffff</color>\n\n<drawOrder>1</drawOrder>\n\n<Icon>\n\n<href>http://www.google.com/intl/en/images/logo.gif</href>\n\n<refreshMode>onInterval</refreshMode>\n\n<refreshInterval>86400</refreshInterval>\n\n<viewBoundScale>0.75</viewBoundScale>\n\n</Icon>\n\n<LatLonBox>\n\n<north>37.83234</north>\n\n<south>37.832122</south>\n\n<east>-122.373033</east>\n\n<west>-122.373724</west>\n\n<rotation>45</rotation>\n\n</LatLonBox>\n\n</GroundOverlay>\n\n</kml>\n\nExtends\n\n<Feature>\n\n<Overlay>\n\nContained By\n\n<Document>\n\n<Folder>\n\n<Icon>\n\nSyntax\n\n<Icon id=\"ID\"> <!-- specific to Icon --> <href>...</href> <!-- anyURI --> <gx:x>0<gx:x/> <!-- int --> <gx:y>0<gx:y/> <!-- int --> <gx:w>-1<gx:w/> <!-- int --> <gx:h>-1<gx:h/> <!-- int --> <refreshMode>onChange</refreshMode> <!-- kml:refreshModeEnum: onChange, onInterval, or onExpire --> <refreshInterval>4</refreshInterval> <!-- float --> <viewRefreshMode>never</viewRefreshMode> <!-- kml:viewRefreshModeEnum: never, onStop, onRequest, onRegion --> <viewRefreshTime>4</viewRefreshTime> <!-- float --> <viewBoundScale>1</viewBoundScale> <!-- float --> <viewFormat>...</viewFormat> <!-- string --> <httpQuery>...</httpQuery> <!-- string --> </Icon>\n\nDescription\n\nDefines an image associated with an Icon style or overlay. The required <href> child element defines the location of the image to be used as the overlay or as the icon for the placemark. This location can either be on a local file system or a remote web server. The <gx:x>, <gx:y>, <gx:w>, and <gx:h> elements are used to select one icon from an image that contains multiple icons (often referred to as an icon palette.\n\n<Icon> <href>Sunset.jpg</href> <!-- Here, the image contains only one icon --> </Icon>\n\n<Icon> <href>/home/mydir/myiconpalette.jpg</href> <gx:w>138</gx:w> <gx:h>138</gx:h> <!-- Since x and y values are omitted, these measurements are made starting at the lower-left corner of the icon palette image --> </Icon>\n\nElements Specific to Icon\n\n<href>\n\nAn HTTP address or a local file specification used to load an icon.\n\n<gx:x>\n\nand\n\n<gx:y>\n\nIf the <href> specifies an icon palette, these elements identify the offsets, in pixels, from the lower-left corner of the icon palette.If no values are specified for x and y, the lower left corner of the icon palette is assumed to be the lower-left corner of the icon to use.\n\n<gx:w>\n\nand\n\n<gx:h>\n\nIf the <href> specifies an icon palette, these elements specify the width (<gx:w>) and height (<gx:h>), in pixels, of the icon to use.\n\n<refreshMode>\n\nFor a description of <refreshMode> and the other elements listed below, see <Link>.\n\n<refreshInterval>\n\n<viewRefreshMode>\n\n<viewRefreshTime>\n\n<viewBoundScale>\n\n<viewFormat>\n\n<httpQuery>\n\nContained By\n\n<GroundOverlay>\n\n<ScreenOverlay>\n\n<IconStyle>\n\n<IconStyle>\n\nSyntax\n\n<IconStyle id=\"ID\"> <!-- inherited from ColorStyle --> <color>ffffffff</color> <!-- kml:color --> <colorMode>normal</colorMode> <!-- kml:colorModeEnum:normal or random --> <!-- specific to IconStyle --> <scale>1</scale> <!-- float --> <heading>0</heading> <!-- float --> <Icon> <href>...</href> </Icon> <hotSpot x=\"0.5\" y=\"0.5\" xunits=\"fraction\" yunits=\"fraction\"/> <!-- kml:vec2 --> </IconStyle>\n\nDescription\n\nSpecifies how icons for point Placemarks are drawn, both in the Places panel and in the 3D viewer of Google Earth. The <Icon> element specifies the icon image. The <scale> element specifies the x, y scaling of the icon. The color specified in the <color> element of <IconStyle> is blended with the color of the <Icon>.\n\nElements Specific to IconStyle\n\n<scale>\n\nResizes the icon.\n\nNote: The <geomScale> tag has been deprecated. Use <scale> instead.\n\n<heading>\n\nDirection (that is, North, South, East, West), in degrees. Default=0 (North). (See diagram.) Values range from 0 to 360 degrees.\n\n<Icon>\n\nA custom Icon. In <IconStyle>, the only child element of <Icon> is <href>:\n\n<href>: An HTTP address or a local file specification used to load an icon.\n\n<hotSpot x=\"0.5\" y=\"0.5\" xunits=\"fraction\" yunits=\"fraction\">\n\nSpecifies the position within the Icon that is \"anchored\" to the <Point> specified in the Placemark. The x and y values can be specified in three different ways: as pixels (\"pixels\"), as fractions of the icon (\"fraction\"), or as inset pixels (\"insetPixels\"), which is an offset in pixels from the upper right corner of the icon. The x and y positions can be specified in different ways—for example, x can be in pixels and y can be a fraction. The origin of the coordinate system is in the lower left corner of the icon.\n\nx - Either the number of pixels, a fractional component of the icon, or a pixel inset indicating the x component of a point on the icon.\n\ny - Either the number of pixels, a fractional component of the icon, or a pixel inset indicating the y component of a point on the icon.\n\nxunits - Units in which the x value is specified. A value of fraction indicates the x value is a fraction of the icon. A value of pixels indicates the x value in pixels. A value of insetPixels indicates the indent from the right edge of the icon.\n\nyunits - Units in which the y value is specified. A value of fraction indicates the y value is a fraction of the icon. A value of pixels indicates the y value in pixels. A value of insetPixels indicates the indent from the top edge of the icon.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document>\n\n<Style id=\"randomColorIcon\">\n\n<IconStyle>\n\n<color>ff00ff00</color>\n\n<colorMode>random</colorMode>\n\n<scale>1.1</scale>\n\n<Icon>\n\n<href>http://maps.google.com/mapfiles/kml/pal3/icon21.png</href>\n\n</Icon>\n\n</IconStyle>\n\n</Style>\n\n<Placemark>\n\n<name>IconStyle.kml</name>\n\n<styleUrl>#randomColorIcon</styleUrl>\n\n<Point>\n\n<coordinates>-122.36868,37.831145,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</Document>\n\n</kml>\n\nExtends\n\n<ColorStyle>\n\nContained By\n\n<Style>\n\nContains\n\n<href> as a child of <Icon>\n\n<kml>\n\nSyntax\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\" hint=\"target=sky\"> ... </kml>\n\nDescription\n\nThe root element of a KML file. This element is required. It follows the xml declaration at the beginning of the file. The hint attribute is used as a signal to Google Earth to display the file as celestial data.\n\nThe <kml> element may also include the namespace for any external XML schemas that are referenced within the file.\n\nA basic <kml> element contains 0 or 1 Feature and 0 or 1 NetworkLinkControl:\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\"> <NetworkLinkControl> ... </NetworkLinkControl> <!-- 0 or 1 Feature elements --> </kml>\n\n<LabelStyle>\n\nSyntax\n\n<LabelStyle id=\"ID\"> <!-- inherited from ColorStyle --> <color>ffffffff</color> <!-- kml:color --> <colorMode>normal</colorMode> <!-- kml:colorModeEnum: normal or random --> <!-- specific to LabelStyle --> <scale>1</scale> <!-- float --> </LabelStyle>\n\nDescription\n\nSpecifies how the <name> of a Feature is drawn in the 3D viewer. A custom color, color mode, and scale for the label (name) can be specified.\n\nNote: The <labelColor> tag is deprecated. Use <LabelStyle> instead.\n\nSpecific to <LabelStyle>\n\n<scale>\n\nResizes the label.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document>\n\n<Style id=\"randomLabelColor\">\n\n<LabelStyle>\n\n<color>ff0000cc</color>\n\n<colorMode>random</colorMode>\n\n<scale>1.5</scale>\n\n</LabelStyle>\n\n</Style>\n\n<Placemark>\n\n<name>LabelStyle.kml</name>\n\n<styleUrl>#randomLabelColor</styleUrl>\n\n<Point>\n\n<coordinates>-122.367375,37.829192,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n</Document>\n\n</kml>\n\nExtends\n\n<ColorStyle>\n\nContained By\n\n<Style>\n\n<gx:LatLonQuad>\n\nThis element is an extension of the OGC KML 2.2 standard and is supported in Google Earth 5.0 and later. Learn more\n\nSyntax\n\n<GroundOverlay id=\"ID\"> ... <Icon>...</Icon> <altitude>0</altitude> <altitudeMode>clampToGround</altitudeMode> <!-- or absolute --> <!-- can substitute <gx:altitudeMode>clampToSeaFloor</gx:altitudeMode> --> <gx:LatLonQuad> <coordinates>...</coordinates> <!-- four lon,lat tuples --> </gx:LatLonQuad> </GroundOverlay>\n\nDescription\n\nAllows nonrectangular quadrilateral ground overlays.\n\nSpecifies the coordinates of the four corner points of a quadrilateral defining the overlay area. Exactly four coordinate tuples have to be provided, each consisting of floating point values for longitude and latitude. Insert a space between tuples. Do not include spaces within a tuple. The coordinates must be specified in counter-clockwise order with the first coordinate corresponding to the lower-left corner of the overlayed image. The shape described by these corners must be convex.\n\nIf a third value is inserted into any tuple (representing altitude) it will be ignored. Altitude is set using <altitude> and <altitudeMode> (or <gx:altitudeMode>) extending <GroundOverlay>. Allowed altitude modes are absolute, clampToGround, and clampToSeaFloor.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\"> <GroundOverlay> <name>gx:LatLonQuad Example</name> <Icon> <href>http://developers.google.com/kml/documentation/images/rectangle.gif</href> <viewBoundScale>0.75</viewBoundScale> </Icon> <gx:LatLonQuad> <coordinates> 81.601884,44.160723 83.529902,43.665148 82.947737,44.248831 81.509322,44.321015 </coordinates> </gx:LatLonQuad> </GroundOverlay> </kml>\n\nExtends\n\n<Object>\n\nContained by\n\n<GroundOverlay>\n\n<LinearRing>\n\nSyntax\n\n<LinearRing id=\"ID\"> <!-- specific to LinearRing --> <gx:altitudeOffset>0</gx:altitudeOffset> <!-- double --> <extrude>0</extrude> <!-- boolean --> <tessellate>0</tessellate> <!-- boolean --> <altitudeMode>clampToGround</altitudeMode> <!-- kml:altitudeModeEnum: clampToGround, relativeToGround, or absolute --> <!-- or, substitute gx:altitudeMode: clampToSeaFloor, relativeToSeaFloor --> <coordinates>...</coordinates> <!-- lon,lat[,alt] tuples --> </LinearRing>\n\nDescription\n\nDefines a closed line string, typically the outer boundary of a Polygon. Optionally, a LinearRing can also be used as the inner boundary of a Polygon to create holes in the Polygon. A Polygon can contain multiple <LinearRing> elements used as inner boundaries.\n\nNote: In Google Earth, a Polygon with an <altitudeMode> of clampToGround follows lines of constant bearing; however, a LinearRing (by itself) with an <altitudeMode> of clampToGround follows great circle lines.\n\nElements Specific to LinearRing\n\n<gx:altitudeOffset>\n\nA KML extension, in the Google extension namespace, that modifies how the altitude values are rendered. This offset allows you to move an entire LinearRing up or down as a unit without modifying all the individual coordinate values that make up the LinearRing. (Although the LinearRing is displayed using the altitude offset value, the original altitude values are preserved in the KML file.) Units are in meters.\n\n<extrude>\n\nBoolean value. Specifies whether to connect the LinearRing to the ground. To extrude this geometry, the altitude mode must be either relativeToGround, relativeToSeaFloor, or absolute. Only the vertices of the LinearRing are extruded, not the center of the geometry. The vertices are extruded toward the center of the Earth's sphere.\n\n<tessellate>\n\nBoolean value. Specifies whether to allow the LinearRing to follow the terrain. To enable tessellation, the value for <altitudeMode> must be clampToGround or clampToSeaFloor. Very large LinearRings should enable tessellation so that they follow the curvature of the earth (otherwise, they may go underground and be hidden).\n\n<altitudeMode>\n\nSpecifies how altitude components in the <coordinates> element are interpreted. Possible values are\n\nclampToGround - (default) Indicates to ignore an altitude specification (for example, in the <coordinates> tag).\n\nrelativeToGround - Sets the altitude of the element relative to the actual ground elevation of a particular location. For example, if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters, then the elevation for the icon of a point placemark elevation is 9 meters with this mode. However, if the same coordinate is set over a location where the ground elevation is 10 meters above sea level, then the elevation of the coordinate is 19 meters. A typical use of this mode is for placing telephone poles or a ski lift.\n\nabsolute - Sets the altitude of the coordinate relative to sea level, regardless of the actual elevation of the terrain beneath the element. For example, if you set the altitude of a coordinate to 10 meters with an absolute altitude mode, the icon of a point placemark will appear to be at ground level if the terrain beneath is also 10 meters above sea level. If the terrain is 3 meters above sea level, the placemark will appear elevated above the terrain by 7 meters. A typical use of this mode is for aircraft placement.\n\n<gx:altitudeMode>\n\nA KML extension in the Google extension namespace, allowing altitudes relative to the sea floor. Values are:\n\nrelativeToSeaFloor - Interprets the <altitude> as a value in meters above the sea floor. If the point is above land rather than sea, the <altitude> will be interpreted as being above the ground.\n\nclampToSeaFloor - The <altitude> specification is ignored, and the point will be positioned on the sea floor. If the point is on land rather than at sea, the point will be positioned on the ground.\n\n<coordinates>(required)\n\nFour or more tuples, each consisting of floating point values for longitude, latitude, and altitude. The altitude component is optional. Do not include spaces within a tuple. The last coordinate must be the same as the first coordinate. Coordinates are expressed in decimal degrees only.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Placemark>\n\n<name>LinearRing.kml</name>\n\n<Polygon>\n\n<outerBoundaryIs>\n\n<LinearRing>\n\n<coordinates> -122.365662,37.826988,0 -122.365202,37.826302,0 -122.364581,37.82655,0 -122.365038,37.827237,0 -122.365662,37.826988,0 </coordinates>\n\n</LinearRing>\n\n</outerBoundaryIs>\n\n</Polygon>\n\n</Placemark>\n\n</kml>\n\nExtends\n\n<Geometry>\n\nContained By\n\n<MultiGeometry>\n\n<Placemark>\n\n<innerBoundaryIs>\n\n<outerBoundaryIs>\n\n<LineString>\n\nSyntax\n\n<LineString id=\"ID\"> <!-- specific to LineString --> <gx:altitudeOffset>0</gx:altitudeOffset> <!-- double --> <extrude>0</extrude> <!-- boolean --> <tessellate>0</tessellate> <!-- boolean --> <altitudeMode>clampToGround</altitudeMode> <!-- kml:altitudeModeEnum: clampToGround, relativeToGround, or absolute --> <!-- or, substitute gx:altitudeMode: clampToSeaFloor, relativeToSeaFloor --> <gx:drawOrder>0</gx:drawOrder> <!-- integer --> <coordinates>...</coordinates> <!-- lon,lat[,alt] --> </LineString>\n\nDescription\n\nDefines a connected set of line segments. Use <LineStyle> to specify the color, color mode, and width of the line. When a LineString is extruded, the line is extended to the ground, forming a polygon that looks somewhat like a wall or fence. For extruded LineStrings, the line itself uses the current LineStyle, and the extrusion uses the current PolyStyle. See the KML Tutorial for examples of LineStrings (or paths).\n\nElements Specific to LineString\n\n<gx:altitudeOffset>\n\nA KML extension, in the Google extension namespace, that modifies how the altitude values are rendered. This offset allows you to move an entire LineString up or down as a unit without modifying all the individual coordinate values that make up the LineString. (Although the LineString is displayed using the altitude offset value, the original altitude values are preserved in the KML file.) Units are in meters.\n\n<extrude>\n\nBoolean value. Specifies whether to connect the LineString to the ground. To extrude a LineString, the altitude mode must be either relativeToGround, relativeToSeaFloor, or absolute. The vertices in the LineString are extruded toward the center of the Earth's sphere.\n\n<tessellate>\n\nBoolean value. Specifies whether to allow the LineString to follow the terrain. To enable tessellation, the altitude mode must be clampToGround or clampToSeaFloor. Very large LineStrings should enable tessellation so that they follow the curvature of the earth (otherwise, they may go underground and be hidden).\n\n<altitudeMode>\n\nSpecifies how altitude components in the <coordinates> element are interpreted. Possible values are\n\nclampToGround - (default) Indicates to ignore an altitude specification (for example, in the <coordinates> tag).\n\nrelativeToGround - Sets the altitude of the element relative to the actual ground elevation of a particular location. For example, if the ground elevation of a location is exactly at sea level and the altitude for a point is set to 9 meters, then the elevation for the icon of a point placemark elevation is 9 meters with this mode. However, if the same coordinate is set over a location where the ground elevation is 10 meters above sea level, then the elevation of the coordinate is 19 meters. A typical use of this mode is for placing telephone poles or a ski lift.\n\nabsolute - Sets the altitude of the coordinate relative to sea level, regardless of the actual elevation of the terrain beneath the element. For example, if you set the altitude of a coordinate to 10 meters with an absolute altitude mode, the icon of a point placemark will appear to be at ground level if the terrain beneath is also 10 meters above sea level. If the terrain is 3 meters above sea level, the placemark will appear elevated above the terrain by 7 meters. A typical use of this mode is for aircraft placement.\n\n<gx:altitudeMode>\n\nA KML extension, in the Google extension namespace, allowing altitudes relative to the sea floor. Values are:\n\nrelativeToSeaFloor - Interprets the <altitude> as a value in meters above the sea floor. If the point is above land rather than sea, the <altitude> will be interpreted as being above the ground.\n\nclampToSeaFloor - The <altitude> specification is ignored, and the point will be positioned on the sea floor. If the point is on land rather than at sea, the point will be positioned on the ground.\n\n<gx:drawOrder>\n\nAn integer value that specifies the order for drawing multiple line strings. LineStrings drawn first may be partially or fully obscured by LineStrings with a later draw order. This element may be required in conjunction with the <gx:outerColor> and <gx:outerWidth> elements in <LineStyle> when dual-colored lines cross each other.\n\n<coordinates>(required)\n\nTwo or more coordinate tuples, each consisting of floating point values for longitude, latitude, and altitude. The altitude component is optional. Insert a space between tuples. Do not include spaces within a tuple.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document>\n\n<name>LineString.kml</name>\n\n<open>1</open>\n\n<LookAt>\n\n<longitude>-122.36415</longitude>\n\n<latitude>37.824553</latitude>\n\n<altitude>0</altitude>\n\n<range>150</range>\n\n<tilt>50</tilt>\n\n<heading>0</heading>\n\n</LookAt>\n\n<Placemark>\n\n<name>unextruded</name>\n\n<LineString>\n\n<extrude>1</extrude>\n\n<tessellate>1</tessellate>\n\n<coordinates>\n\n-122.364383,37.824664,0 -122.364152,37.824322,0 </coordinates>\n\n</LineString>\n\n</Placemark>\n\n<Placemark>\n\n<name>extruded</name>\n\n<LineString>\n\n<extrude>1</extrude>\n\n<tessellate>1</tessellate>\n\n<altitudeMode>relativeToGround</altitudeMode>\n\n<coordinates>\n\n-122.364167,37.824787,50 -122.363917,37.824423,50 </coordinates>\n\n</LineString>\n\n</Placemark>\n\n</Document>\n\n</kml>\n\nExtends\n\n<Geometry>\n\nContained By\n\n<MultiGeometry>\n\n<Placemark>\n\n<LineStyle>\n\nSyntax\n\n<LineStyle id=\"ID\"> <!-- inherited from ColorStyle --> <color>ffffffff</color> <!-- kml:color --> <colorMode>normal</colorMode> <!-- colorModeEnum: normal or random --> <!-- specific to LineStyle --> <width>1</width> <!-- float --> <gx:outerColor>ffffffff</gx:outerColor> <!-- kml:color --> <gx:outerWidth>0.0</gx:outerWidth> <!-- float --> <gx:physicalWidth>0.0</gx:physicalWidth> <!-- float --> <gx:labelVisibility>0</gx:labelVisibility> <!-- boolean --> </LineStyle>\n\nDescription\n\nSpecifies the drawing style (color, color mode, and line width) for all line geometry. Line geometry includes the outlines of outlined polygons and the extruded \"tether\" of Placemark icons (if extrusion is enabled).\n\nElements Specific to LineStyle\n\n<width>\n\nWidth of the line, in pixels.\n\n<gx:outerColor>\n\nColor of the portion of the line defined by <gx:outerWidth>. Note that the <gx:outerColor> and <gx:outerWidth> elements are ignored when <LineStyle> is applied to <Polygon> and <LinearRing>.\n\n<gx:outerWidth>\n\nA value between 0.0 and 1.0 that specifies the proportion of the line that uses the <gx:outerColor>. Only applies to lines setting width with <gx:physicalWidth>; it does not apply to lines using <width>. See also <gx:drawOrder> in <LineString>. A draw order value may be necessary if dual-colored lines are crossing each other—for example, for showing freeway interchanges.\n\n<gx:physicalWidth>\n\nPhysical width of the line, in meters.\n\n<gx:labelVisibility>\n\nA boolean defining whether or not to display a text label on a LineString. A LineString's label is contained in the <name> element that is a sibling of <LineString> (i.e. contained within the same <Placemark> element).\n\nGoogle Earth version 6.1+ does not display labels by default; they must be enabled for each LineString by setting <gx:labelVisibility> to 1.\n\nGoogle Earth 6.1 known issue: LineStrings without a <gx:physicalWidth> element will only display the label if the line length is greater than 100m * the number of characters in the label. For example, a label with seven characters (\"example\") will only display if the line is greater than 700m. This does not affect LineStrings with a <gx:physicalWidth> value.\n\nExample\n\nThe following example shows a 50 percent opaque red line with a width of 4 pixels.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <kml xmlns=\"http://www.opengis.net/kml/2.2\"> <Document> <name>LineStyle.kml</name> <open>1</open> <Style id=\"linestyleExample\"> <LineStyle> <color>7f0000ff</color> <width>4</width> <gx:labelVisibility>1</gx:labelVisibility> </LineStyle> </Style> <Placemark> <name>LineStyle Example</name> <styleUrl>#linestyleExample</styleUrl> <LineString> <extrude>1</extrude> <tessellate>1</tessellate> <coordinates> -122.364383,37.824664,0 -122.364152,37.824322,0 </coordinates> </LineString> </Placemark> </Document> </kml>\n\nExtends\n\n<ColorStyle>\n\nContained By\n\n<Style>\n\n<Link>\n\nSyntax\n\n<Link id=\"ID\"> <!-- specific to Link --> <href>...</href> <!-- string --> <refreshMode>onChange</refreshMode> <!-- refreshModeEnum: onChange, onInterval, or onExpire --> <refreshInterval>4</refreshInterval> <!-- float --> <viewRefreshMode>never</viewRefreshMode> <!-- viewRefreshModeEnum: never, onStop, onRequest, onRegion --> <viewRefreshTime>4</viewRefreshTime> <!-- float --> <viewBoundScale>1</viewBoundScale> <!-- float --> <viewFormat>BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]</viewFormat> <!-- string --> <httpQuery>...</httpQuery> <!-- string --> </Link>\n\nDescription\n\n<Link> specifies the location of any of the following:\n\nKML files fetched by network links\n\nImage files used in any Overlay (the <Icon> element specifies the image in an Overlay; <Icon> has the same fields as <Link>)\n\nModel files used in the <Model> element\n\nThe file is conditionally loaded and refreshed, depending on the refresh parameters supplied here. Two different sets of refresh parameters can be specified: one set is based on time (<refreshMode> and <refreshInterval>) and one is based on the current \"camera\" view (<viewRefreshMode> and <viewRefreshTime>). In addition, Link specifies whether to scale the bounding box parameters that are sent to the server (<viewBoundScale> and provides a set of optional viewing parameters that can be sent to the server (<viewFormat>) as well as a set of optional parameters containing version and language information.\n\nWhen a file is fetched, the URL that is sent to the server is composed of three pieces of information:\n\nthe href (Hypertext Reference) that specifies the file to load.\n\nan arbitrary format string that is created from (a) parameters that you specify in the <viewFormat> element or (b) bounding box parameters (this is the default and is used if no <viewFormat> element is included in the file).\n\na second format string that is specified in the <httpQuery> element.\n\nIf the file specified in <href> is a local file, the <viewFormat> and <httpQuery> elements are not used.\n\nThe <Link> element replaces the <Url> element of <NetworkLink> contained in earlier KML releases and adds functionality for the <Region> element (introduced in KML 2.1). In Google Earth releases 3.0 and earlier, the <Link> element is ignored.\n\nElements Specific to Link\n\n<href>\n\nA URL (either an HTTP address or a local file specification). When the parent of <Link> is a NetworkLink, <href> is a KML file. When the parent of <Link> is a Model, <href> is a COLLADA file. When the parent of <Icon> (same fields as <Link>) is an Overlay, <href> is an image. Relative URLs can be used in this tag and are evaluated relative to the enclosing KML file. See KMZ Files for details on constructing relative references in KML and KMZ files.\n\n<refreshMode>\n\nSpecifies a time-based refresh mode, which can be one of the following:\n\nonChange - refresh when the file is loaded and whenever the Link parameters change (the default).\n\nonInterval - refresh every n seconds (specified in <refreshInterval>).\n\nonExpire - refresh the file when the expiration time is reached. If a fetched file has a NetworkLinkControl, the <expires> time takes precedence over expiration times specified in HTTP headers. If no <expires> time is specified, the HTTP max-age header is used (if present). If max-age is not present, the Expires HTTP header is used (if present). (See Section RFC261b of the Hypertext Transfer Protocol - HTTP 1.1 for details on HTTP header fields.)\n\n<refreshInterval>\n\nIndicates to refresh the file every n seconds.\n\n<viewRefreshMode>\n\nSpecifies how the link is refreshed when the \"camera\" changes.\n\nCan be one of the following:\n\nnever (default) - Ignore changes in the view. Also ignore <viewFormat> parameters, if any.\n\nonStop - Refresh the file n seconds after movement stops, where n is specified in <viewRefreshTime>.\n\nonRequest - Refresh the file only when the user explicitly requests it. (For example, in Google Earth, the user right-clicks and selects Refresh in the Context menu.)\n\nonRegion - Refresh the file when the Region becomes active. See <Region>.\n\n<viewRefreshTime>\n\nAfter camera movement stops, specifies the number of seconds to wait before refreshing the view. (See <viewRefreshMode> and onStop above.)\n\n<viewBoundScale>\n\nScales the BBOX parameters before sending them to the server. A value less than 1 specifies to use less than the full view (screen). A value greater than 1 specifies to fetch an area that extends beyond the edges of the current view.\n\n<viewFormat>\n\nSpecifies the format of the query string that is appended to the Link's <href> before the file is fetched.(If the <href> specifies a local file, this element is ignored.)\n\nIf you specify a <viewRefreshMode> of onStop and do not include the <viewFormat> tag in the file, the following information is automatically appended to the query string:\n\nBBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]\n\nThis information matches the Web Map Service (WMS) bounding box specification.\n\nIf you specify an empty <viewFormat> tag, no information is appended to the query string.\n\nYou can also specify a custom set of viewing parameters to add to the query string. If you supply a format string, it is used instead of the BBOX information. If you also want the BBOX information, you need to add those parameters along with the custom parameters.\n\nYou can use any of the following parameters in your format string (and Google Earth will substitute the appropriate current value at the time it creates the query string):\n\n[lookatLon], [lookatLat] - longitude and latitude of the point that <LookAt> is viewing\n\n[lookatRange], [lookatTilt], [lookatHeading] - values used by the <LookAt> element (see descriptions of <range>, <tilt>, and <heading> in <LookAt>)\n\n[lookatTerrainLon], [lookatTerrainLat], [lookatTerrainAlt] - point on the terrain in degrees/meters that <LookAt> is viewing\n\n[cameraLon], [cameraLat], [cameraAlt] - degrees/meters of the eyepoint for the camera\n\n[horizFov], [vertFov] - horizontal, vertical field of view for the camera\n\n[horizPixels], [vertPixels] - size in pixels of the 3D viewer\n\n[terrainEnabled] - indicates whether the 3D viewer is showing terrain\n\n<httpQuery>\n\nAppends information to the query string, based on the parameters specified. (Google Earth substitutes the appropriate current value at the time it creates the query string.) The following parameters are supported:\n\n[clientVersion]\n\n[kmlVersion]\n\n[clientName]\n\n[language]\n\nExample\n\n<NetworkLink> <name>NE US Radar</name> <flyToView>1</flyToView> <Link> <href>http://www.example.com/geotiff/NE/MergedReflectivityQComposite.kml</href> <refreshMode>onInterval</refreshMode> <refreshInterval>30</refreshInterval> <viewRefreshMode>onStop</viewRefreshMode> <viewRefreshTime>7</viewRefreshTime> <viewFormat>BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth];CAMERA=\\ [lookatLon],[lookatLat],[lookatRange],[lookatTilt],[lookatHeading];VIEW=\\ [horizFov],[vertFov],[horizPixels],[vertPixels],[terrainEnabled]</viewFormat> </Link> </NetworkLink>\n\nExtends\n\n<Object>\n\nContained By\n\n<Model>\n\n<NetworkLink>\n\nSee Also\n\n<NetworkLinkControl>\n\n<Region>\n\n<ListStyle>\n\nSyntax\n\n<ListStyle id=\"ID\"> <!-- specific to ListStyle --> <listItemType>check</listItemType> <!-- kml:listItemTypeEnum:check, checkOffOnly,checkHideChildren, radioFolder --> <bgColor>ffffffff</bgColor> <!-- kml:color --> <ItemIcon> <!-- 0 or more ItemIcon elements --> <state>open</state> <!-- kml:itemIconModeEnum:open, closed, error, fetching0, fetching1, or fetching2 --> <href>...</href> <!-- anyURI --> </ItemIcon> </ListStyle>\n\nDescription\n\nSpecifies how a Feature is displayed in the list view. The list view is a hierarchy of containers and children; in Google Earth, this is the Places panel.\n\nElements Specific to ListStyle\n\n<listItemType>\n\nSpecifies how a Feature is displayed in the list view. Possible values are:\n\ncheck (default) - The Feature's visibility is tied to its item's checkbox.\n\nradioFolder - When specified for a Container, only one of the Container's items is visible at a time\n\ncheckOffOnly - When specified for a Container or Network Link, prevents all items from being made visible at once—that is, the user can turn everything in the Container or Network Link off but cannot turn everything on at the same time. This setting is useful for Containers or Network Links containing large amounts of data.\n\ncheckHideChildren - Use a normal checkbox for visibility but do not display the Container or Network Link's children in the list view. A checkbox allows the user to toggle visibility of the child objects in the viewer.\n\n<bgColor>\n\nBackground color for the Snippet. Color and opacity values are expressed in hexadecimal notation. The range of values for any one color is 0 to 255 (00 to ff). For alpha, 00 is fully transparent and ff is fully opaque. The order of expression is aabbggrr, where aa=alpha (00 to ff); bb=blue (00 to ff); gg=green (00 to ff); rr=red (00 to ff). For example, if you want to apply a blue color with 50 percent opacity to an overlay, you would specify the following: <color>7fff0000</color>, where alpha=0x7f, blue=0xff, green=0x00, and red=0x00.\n\n<ItemIcon>\n\nIcon used in the List view that reflects the state of a Folder or Link fetch. Icons associated with the open and closed modes are used for Folders and Network Links. Icons associated with the error and fetching0, fetching1, and fetching2 modes are used for Network Links. The following screen capture illustrates the Google Earth icons for these states:\n\n<state>\n\nSpecifies the current state of the NetworkLink or Folder. Possible values are open, closed, error, fetching0, fetching1, and fetching2. These values can be combined by inserting a space between two values (no comma).\n\n<href>\n\nSpecifies the URI of the image used in the List View for the Feature.\n\nExample\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n\n<Document>\n\n<name>ListStyle.kml</name>\n\n<open>1</open>\n\n<Style id=\"bgColorExample\">\n\n<ListStyle>\n\n<bgColor>ff336699</bgColor>\n\n</ListStyle>\n\n</Style>\n\n<Style id=\"checkHideChildrenExample\">\n\n<ListStyle>\n\n<listItemType>checkHideChildren</listItemType>\n\n</ListStyle>\n\n</Style>\n\n<Style id=\"radioFolderExample\">\n\n<ListStyle>\n\n<listItemType>radioFolder</listItemType>\n\n</ListStyle>\n\n</Style>\n\n<Folder>\n\n<name>ListStyle Examples</name>\n\n<open>1</open>\n\n<Folder>\n\n<name>bgColor example</name>\n\n<open>1</open>\n\n<Placemark>\n\n<name>pl1</name>\n\n<Point>\n\n<coordinates>-122.362815,37.822931,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl2</name>\n\n<Point>\n\n<coordinates>-122.362825,37.822931,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl3</name>\n\n<Point>\n\n<coordinates>-122.362835,37.822931,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<styleUrl>#bgColorExample</styleUrl>\n\n</Folder>\n\n<Folder>\n\n<name>checkHideChildren example</name>\n\n<open>1</open>\n\n<Placemark>\n\n<name>pl4</name>\n\n<Point>\n\n<coordinates>-122.362845,37.822941,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl5</name>\n\n<Point>\n\n<coordinates>-122.362855,37.822941,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl6</name>\n\n<Point>\n\n<coordinates>-122.362865,37.822941,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<styleUrl>#checkHideChildrenExample</styleUrl>\n\n</Folder>\n\n<Folder>\n\n<name>radioFolder example</name>\n\n<open>1</open>\n\n<Placemark>\n\n<name>pl7</name>\n\n<Point>\n\n<coordinates>-122.362875,37.822951,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl8</name>\n\n<Point>\n\n<coordinates>-122.362885,37.822951,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<Placemark>\n\n<name>pl9</name>\n\n<Point>\n\n<coordinates>-122.362895,37.822951,0</coordinates>\n\n</Point>\n\n</Placemark>\n\n<styleUrl>#radioFolderExample</styleUrl>\n\n</Folder>\n\n</Folder>\n\n</Document>\n\n</kml>\n\nExtends\n\n<Object>\n\nContained By\n\n<Style>\n\n<LookAt>\n\nSyntax\n\n<LookAt id=\"ID\"> <!-- inherited from AbstractView element --> <TimePrimitive>...</TimePrimitive> <!-- gx:TimeSpan or gx:TimeStamp --> <gx:ViewerOptions> <option> name=\" \" type=\"boolean\"> &lt!-- name=\"streetview\", \"historicalimagery\", \"sunlight\", or \"groundnavigation\" --> </option> </gx:ViewerOptions> <!-- specific to LookAt --> <longitude>0</longitude> <!-- kml:angle180 --> <latitude>0</latitude> <!-- kml:angle90 --> <altitude>0</altitude> <!-- double --> <heading>0</heading> <!-- kml:angle360 --> <tilt>0</tilt> <!-- kml:anglepos90 --> <range></range> <!-- double --> <altitudeMode>clampToGround</altitudeMode> <!--kml:altitudeModeEnum:clampToGround, relativeToGround, absolute --> <!-- or, gx:altitudeMode can be substituted: clampToSeaFloor, relativeToSeaFloor --> </LookAt>\n\nDescription\n\nDefines a virtual camera that is associated with any element derived from Feature. The LookAt element positions the \"camera\" in relation to the object that is being viewed. In Google Earth, the view \"flies to\" this LookAt viewpoint when the user double-clicks an item in the Places panel or double-clicks an icon in the 3D viewer.\n\nElements Specific to LookAt\n\n<longitude>\n\nLongitude of the point the camera is looking at. Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from −180 to 0 degrees. Values east of the Meridian range from 0 to 180 degrees.\n\n<latitude>\n\nLatitude of the point the camera is looking at. Degrees north or south of the Equator (0 degrees). Values range from −90 degrees to 90 degrees.\n\n<altitude>\n\nDistance from the earth's surface, in meters. Interpreted according to the LookAt's altitude mode.\n\n<heading>\n\nDirection (that is, North, South, East, West), in degrees. Default=0 (North). (See diagram below.) Values range from 0 to 360 degrees.\n\n<tilt>\n\nAngle between the direction of "
    }
}