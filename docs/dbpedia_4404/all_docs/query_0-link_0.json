{
    "id": "dbpedia_4404_0",
    "rank": 0,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "read_more_link": "",
        "language": "en",
        "title": "Site reliability engineering",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2016-03-25T21:32:01+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Site_reliability_engineering",
        "text": "Use of software engineering practices for IT\n\nSite reliability engineering (SRE) is a set of principles and practices that applies aspects of software engineering to IT infrastructure and operations.[1] SRE claims to create highly reliable and scalable software systems. Although they are closely related, SRE is slightly different from DevOps.[2][3][4]\n\nHistory\n\n[edit]\n\nThe field of site reliability engineering originated at Google with Ben Treynor Sloss,[5][6] who founded a site reliability team after joining the company in 2003.[7] In 2016, Google employed more than 1,000 site reliability engineers.[8] After originating at Google in 2003, the concept spread into the broader software development industry, and other companies subsequently began to employ site reliability engineers.[9] The position is more common at larger web companies, as small companies often do not operate at a scale that would require dedicated SREs.[9] Organizations that have adopted the concept include Airbnb, Dropbox, IBM,[10] LinkedIn,[11] Netflix,[8] and Wikimedia.[12] According to a 2021 report by the DevOps Institute, 22% of organizations in a survey of 2,000 respondents had adopted the SRE model.[13][14]\n\nDefinition\n\n[edit]\n\nSite reliability engineering, as a job role, may be performed by individual contributors or organized in teams, responsible for a combination of the following within a broader engineering organization: System availability, latency, performance, efficiency, change management, monitoring, emergency response, and capacity planning.[15] Site reliability engineers often have backgrounds in software engineering, system engineering, or system administration.[16] Focuses of SRE include automation, system design, and improvements to system resilience.[16]\n\nSite reliability engineering, as a set of principles and practices, can be performed by anyone. Though everyone should contribute to good practices, as occurs in security engineering, a company may eventually hire specialists and engineers for the job.[citation needed]\n\nSite reliability engineering is considered a specific implementation of DevOps;[17] SRE focuses specifically on building reliable systems, whereas DevOps focuses more broadly.[2][3][4] Although they have different focuses, some companies have rebranded their operations teams to SRE teams with little meaningful change.[9]\n\nPrinciples and practices\n\n[edit]\n\nThere have been multiple attempts to define a canonical list of site reliability engineering principles, but while consensus is lacking, the following characteristics are usually included in most definitions:[1][18]\n\nAutomation or elimination of anything repetitive in a cost-effective way.\n\nAvoidance to pursue much more reliability than what's strictly necessary. Defining what's necessary is a practice by itself (see list of practices below).\n\nSystems designed with a bias toward the reduction of risks to availability, latency, and efficiency.\n\nObservability—as in, the ability to ask arbitrary questions about a system without having to know ahead of time what to ask.[19]\n\nThe site reliability engineering practices also vary widely, but the list below is relatively commonly seen as at least partially implemented:\n\nToil management as the implementation of the first principle outlined above.\n\nDefining and measuring reliability goals—SLIs, SLOs, and error budgets.\n\nNon-Abstract Large Scale Systems Design (NALSD) with a focus on reliability.\n\nDesigning for and implementing observability.\n\nDefining, testing, and running an incident management process.\n\nCapacity planning.\n\nChange and release management, including CI/CD.\n\nChaos engineering.\n\nImplementations\n\n[edit]\n\nSite reliability engineering teams engage with the other teams within their companies and the SRE principles and practices in various forms. Here is a high-level overview of common SRE team implementations:[20]\n\nKitchen Sink, a.k.a. “Everything SRE”\n\n[edit]\n\nThe scope of services or workflows covered is usually unbounded.\n\nInfrastructure\n\n[edit]\n\nThese focus on the reliability of behind-the-scenes systems that help make other teams' jobs more efficient. These are often confused with \"Platform\" teams or \"Platform Operations\" teams. Infrastructure SRE teams may pair up with one or more platform engineering team(s), but they differ in that Infrastructure SRE teams focus on performing most, if not all, of the work described in the principles and practices listed above. Platform teams tend to focus on building the platform, and while reliability is desirable, that's not their sole priority.\n\nThe teams focus on tools to measure, maintain, and improve system reliability. For example, Nagios Core or Prometheus (software).\n\nProduct or application\n\n[edit]\n\nSRE team for product and/or application. Some large companies tend to staff several of these.\n\nEmbedded\n\n[edit]\n\nUsually, SRE solo practitioners or pairs staffed within a software engineering team apply most of the principles and practices described above.\n\nConsulting\n\n[edit]\n\nThese teams consult on how to implement SRE principles and practices. These are usually experienced SREs who've worked on teams in one or several of the implementations above. SREs on external facing consulting SRE teams are sometimes called \"Customer Reliability Engineers\".\n\nLarge companies who have adopted SRE tend to have a combination of the implementations described above, including multiple teams of the same implementation, e.g. multiple Product/application SRE teams to meet specific demands of several products and an Infrastructure SRE team to pair up with a Platform engineering group to meet reliability goals of a common platform for both products/applications.\n\nIndustry\n\n[edit]\n\nThe USENIX organization has held an annual SREcon conference since 2014 for site reliability engineers in the industry and also holds regional conferences with similar themes.[21]\n\nSee also\n\n[edit]\n\nReferences\n\n[edit]\n\nFurther reading\n\n[edit]\n\nLimoncelli, Tom; Chalup, Strata R.; Hogan, Christina J. (September 2014). The Practice of Cloud System Administration: DevOps and SRE Practices for Web Services. Vol. 2. Upper Saddle River, NJ: Addison-Wesley. ISBN 978-0133478549. OCLC 891786231.\n\nBeyer, Betsy; Jones, Chris; Petoff, Jennifer; Murphy, Niall Richard, eds. (2016). Site Reliability Engineering: How Google Runs Production Systems. O'Reilly. ISBN 978-1491929124.\n\nBlank-Edelman, David N., ed. (2018). Seeking SRE: Conversations About Running Production Systems at Scale (1 ed.). Sebastopol, CA: O'Reilly. ISBN 978-1491978863. OCLC 1052565720.\n\nBeyer, Betsy; Murphy, Niall; Kawahara, Kent; Rensin, David; Thorne, Stephen (2018). The Site Reliability Workbook: Practical Ways to Implement SRE. O'Reilly. ISBN 978-1492029502.\n\nWelch, Nat (2018). Real-World SRE: The Survival Guide for Responding to a System Outage and Maximizing Uptime. Packt. ISBN 978-1788628884.\n\nAdkins, Heather; Beyer, Betsy; Blankinship, Paul; Lewandowski, Piotr; Oprea, Ana; Stubblefield, Adam (2020). Building Secure and Reliable Systems: Best Practices for Designing, Implementing, and Maintaining Systems. O'Reilly. ISBN 978-1-4920-8312-2. OCLC 1129470292.\n\nRosenthal, Jones, Casey, Nora (2020). Chaos Engineering: System Resiliency in Practice. O'Reilly. ISBN 978-1492043867."
    }
}