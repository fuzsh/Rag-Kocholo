{
    "id": "dbpedia_3412_0",
    "rank": 52,
    "data": {
        "url": "https://dl.acm.org/doi/10.1002/spe.2174",
        "read_more_link": "",
        "language": "en",
        "title": "Efficient compilation strategy for object-oriented languages under the closed-world assumption",
        "top_image": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "meta_img": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1002/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "code customization",
            "compiler",
            "dynamic dispatch",
            "inlining",
            "object-oriented",
            "type flow analysis"
        ],
        "tags": null,
        "authors": [
            "Benoît Sonntag LSIIT",
            "Université de Strasbourg",
            "France View Profile",
            "Dominique Colnet LORIA",
            "Université de Lorraine",
            "Vandœuvre-lès-Nancy",
            "Benoît Sonntag",
            "Dominique Colnet"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Reaching the best level of runtime performance from a high-level, object-oriented\nlanguage is often considered challenging if not unattainable. The closed-world assumption\ninvolves considering all of the source code of an application together at compile\n...",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "Software—Practice & Experience",
        "canonical_link": "https://dl.acm.org/doi/10.1002/spe.2174",
        "text": "Abstract\n\nReaching the best level of runtime performance from a high-level, object-oriented language is often considered challenging if not unattainable. The closed-world assumption involves considering all of the source code of an application together at compile time. That assumption makes it possible to produce an efficient code. For instance, multiple inheritance can be implemented as efficiently as single inheritance. Our compilation strategy is the result of a prolonged project, tying together several compilation techniques: call graph analysis, dead code elimination, type flow analysis, code customization, implementation of dynamic dispatch, inlining, pointer optimization, switch optimization, objects layout, and so on. Merging all of these techniques into a global strategy appears to be quite problematic. Throughout the paper, two real-world compilers are used as benchmarks to provide measurements for compiler writers to evaluate the applicability of our approach. Type flow analysis is a fundamental aspect of our strategy to resolve method calls. We have extended type flow analysis to deal with the content of arrays, enabling us to process additional expressions and thus making it possible to obtain a true global analysis. Typically, more than 90% of method call sites are statically resolved. Our experience indicates that the closed-world assumption is suitable for numerous applications. Surprisingly, even library-defined control statements from dynamic languages are perfectly processed with our strategy. The Smalltalk ifTrue:ifFalse:, whileTrue:, to:do:, and so on are, for the very first time, perfectly translated. Copyright © 2012 John Wiley & Sons, Ltd.\n\nReferences\n\n[1]\n\nSonntag B, Colnet D. Lisaac: the power of simplicity at work for operating system. In 40th Conference on Technology of Object-Oriented Languages and Systems TOOLS Pacific'2002. Australian Computer Society: Sydney, Australia, 2002; pp.45-52.\n\n[2]\n\nSonntag B, Colnet D, Zendra O. Dynamic inheritance: a powerful mechanism for operating system design. 'Intercontinental Workshop on Object-Orientation and Operating Systems OOOSWS'2002' - ECOOP'02 Workshop Reader - Málaga, Spain, 2002; pp.25-30.\n\n[3]\n\nZendra O, Colnet D, Collin S. Efficient dynamic dispatch without virtual function tables. The smalleiffel compiler. In 12th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'97. ACM Press: Atlanta, Georgia, 1997; pp.125-141.\n\n[4]\n\nGoldberg A, Robson D. Smalltalk-80, the Language and its Implementation. Addison-Wesley, Reading: Massachusetts, 1983.\n\n[5]\n\nUngar D, Smith RB. Self: the power of simplicity. In 2nd Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'87. ACM Press: Orlando, Florida, 1987; pp.227-241.\n\n[6]\n\nChambers C. The Design and Implementation of the SELF Compiler, an Optimizing Compiler for Object-Oriented Programming Languages. Department of Computer Science of Stanford University: California, 1992.\n\n[7]\n\nChambers C, Ungar D. Customization: optimizing compiler technology for SELF, a dynamically-typed object-oriented language. In 4th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'89. ACM Press: New Orleans, Louisiana, 1989; pp.146-160.\n\n[8]\n\nDixon R, McKee T, Schweitzer P, Vaughan M. A fast method dispatcher for compiled languages with multiple inheritance. In 4th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'89. ACM Press: New Orleans, Louisiana, 1989; pp.211-214.\n\n[9]\n\nVitek J, Horspool R. Taming message passing: efficient method look-up for dynamically typed languages. In 8th European Conference on Object-Oriented Programming ECOOP'94. Springer-Verlag: Bologna, Italy, 1994; pp.432-449. LNCS 821.\n\n[10]\n\nGrove D, Chambers C. A framework for call graph construction algorithms. ACM Transaction on Programming Languages and Sytems 2001; Volume 23 Issue 6: pp.685-746.\n\n[11]\n\nZibin Y, Gil J. Fast algorithm for creating space efficient dispatching tables with application to multi-dispatching. In 17th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'2002. ACM Press: Seattle, Washington, USA, 2002; pp.142-160.\n\n[12]\n\nFitzgerald R, Knoblock TB, Ruf E, Steesgaard B, Tarditi D. Marmot: an optimizing compiler for Java. Software Practice & Experience 2000; Volume 30 Issue 3: pp.199-232.\n\n[13]\n\nCollin S, Colnet D, Zendra O. Type inference for late binding. the SmallEiffel compiler. In Proceedings of the Joint Modular Languages Conference, Vol.Volume 1204, &lt;bookSeriesTitle&gt;Lecture Notes in Computer Sciences&lt;/bookSeriesTitle&gt;, Lintz, Austria, 1997; pp.67-81.\n\n[14]\n\nColnet D, Coucaud P, Zendra O. Compiler support to customize the mark and sweep algorithm. ACM SIGPLAN International Symposium on Memory Management ISMM'98 1999; Volume 34 Issue 4: pp.154-165.\n\n[15]\n\nZendra O, Colnet D. Coping with aliasing in the GNU Eiffel Compiler implementation. Software Practice & Experience 2001; Volume 31 Issue 6: pp.601-613.\n\n[16]\n\nFutamura Y. Partial evaluation of computation process - an approach to a compiler-compiler. Reprinted in Higher-Order and Symbolic Computation 1999; Volume 12 Issue 4: pp.381-391.\n\n[17]\n\nConsel C, Danvy O. Tutorial notes on partial evaluation. 20th Annual ACM Symposium on Principles of Programming Languages, Charleston, SC, 1993; pp.493-501.\n\n[18]\n\nDucournau R, Morandat F, Privat J. Empirical assessment of object-oriented implementations with multiple inheritance and static typing. In 24th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'09. ACM Press: Orlando, Florida, USA, 2009; pp.41-60.\n\n[19]\n\nBacon DF, Sweeney PF. Fast static analysis of C++ virtual function calls. In 11th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'96, Vol.3110. ACM Press: San Jose, California, 1996; pp.324-341.\n\n[20]\n\nNeil D. Jones flow analysis of lambda expressions. Lecture Notes in Computer Science, Automata, Languages and Programming 1981; Volume 115: pp.114-128.\n\n[21]\n\nShivers O. Control-flow analysis in scheme. In Conference on Programming Language Design and Implementation PLDI, Vol.Volume 237. ACM SIGPLAN Notices: Atlanta, Georgia, 1988; pp.164-174.\n\n[22]\n\nBlanchet B, Cousot P, Feret J, Mauborgne L, Min A, Monniaux D, Rival X. A static analyser for large safety-critical software. In Conference on Programming Language Design and Implementation PLDI, Vol.Volume 38. ACM SIGPLAN Notices: San Diego, California, 2003; pp.196-207.\n\n[23]\n\nJones R, Lins R. Garbage Collection. Wiley, 1996. ISBN 0-471-94148-4w.\n\n[24]\n\nColnet D, Coucaud P, Zendra O. Compiler Support to Customize the Mark and Sweep Algorithm. In International Symposium on Memory Management ISMM'98, Vancouver, Canada, 1998; pp.154-165.\n\n[25]\n\nColnet D, Sonntag B. Paper in French: Analyse simple de types dans les tableaux et optimisation du ramasse-miettes. Conférence en IngénieriE du Logiciel CIEL'12, Rennes, France. Available from: \"http://gpl2012.irisa.fr/sites/default/files/CIEL2012-Colnet-paper17.pdf\". Conférence en IngénieriE du Logiciel CIEL'12, Rennes, France\n\n[26]\n\nEllis MA, Stroustrup B. The Annotated C++ Reference Manual. Addison-Wesley, Reading: Massachusetts, 1990.\n\n[27]\n\nDriesen K, Hölzle U. The direct cost of virtual function calls in C++. In 11th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'96, Vol.Volume 3110. ACM Press: San Jose, California, 1996; pp.306-323.\n\n[28]\n\nDean J, Grove D, Chambers C. Optimization of object-oriented programs using static class hierarchy analysis. In 9th European Conference on Object-Oriented Programming ECOOP'95. Springer-Verlag: Åarhus, Denmark, 1995; pp.77-101. LNCS 952.\n\n[29]\n\nAgesen O. The cartesian product algorithm: simple and precise type inference of parametric polymorphism. In 9th European Conference on Object-Oriented Programming ECOOP'95. Springer-Verlag: Åarhus, Denmark, 1995; pp.2-26. LNCS 952.\n\n[30]\n\nShao Z, Appel AW. Space-efficient closure representations. In ACM Conference on Lisp and Functional Programming ICFP'1994. ACM Press: Orlando, Florida, 1994; pp.150-161.\n\n[31]\n\nGamma E, Helm R, Johnson R, Vlissides J. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading: Massachusetts, 1995.\n\n[32]\n\nAndré P, Royer J-C. Optimizing method search with lookup caches and incremental coloring. In 7th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'92, Vol.Volume 2710. ACM Press: Vancouver, British Columbia, Canada, 1992; pp.110-127.\n\n[33]\n\nDriesen K. Selector table indexing and sparse arrays. In 8th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'93, Vol.Volume 2810. ACM Press: Washington, D.C., 1993; pp.259-270.\n\n[34]\n\nDriesen K, Hölzle U. Minimizing row displacement dispatch tables. In 10th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'95, Vol.Volume 3010. ACM Press: Austin, Texas, 1995; pp.141-155.\n\n[35]\n\nPalacz K, Vitek J. Java subtype tests in real-time. In 17th European Conference on Object-Oriented Programming ECOOP'03. Springer-Verlag: Darmstadt, Germany, 2003; pp.378-404.\n\n[36]\n\nDucournau R. Perfect hashing as an almost perfect subtype test. ACM Transaction on Programming Languages and Sytems 2008; Volume 30 Issue 6: pp.1-56.\n\n[37]\n\nLee H, Dincklage D, Diwan A, Eliot Moss JB. Understanding the behavior of compiler optimizations. Software Practice & Experience 2006; Volume 36 Issue 8: pp.835-844.\n\n[38]\n\nHölzle U. Adaptative optimization for Self: reconciling high performance with exploratory programming. Ph.D. Thesis, Stanford University, 1994. CS-TR-94-1520.\n\n[39]\n\nDeutsch PL, Schiffman A. Efficient implementation of the smalltalk-80 system. 11th Annual ACM Symposium on Principles of Programming Languages, Salt Lake City, UT; pp.1984.\n\n[40]\n\nUngar D, Patterson D. What Price Smalltalk? IEEE Computer 1987; Volume 20 Issue 1: pp.67-74.\n\n[41]\n\nDriesen K, Hölzle U, Vitek J. Message dispatch on pipelined processors. In 9th European Conference on Object-Oriented Programming ECOOP'95. Springer-Verlag: Åarhus, Denmark, 1995; pp.253-282. LNCS 952.\n\n[42]\n\nHlzle U, Chambers C, Ungar D. Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. In 5th European Conference on Object-Oriented Programming ECOOP91, Vol.Volume 512. Springer-Verlag: Geneva, Switzerland, 1991; pp.21-38.\n\n[43]\n\nAigner G, Hölzle U. Elimination virtual function calls in C++programs. In 10th European Conference on Object-Oriented Programming ECOOP'96. Springer-Verlag: Linz, Austria, 1996; pp.142-166. LNCS 1098.\n\n[44]\n\nPizlo F, Ziarek L, Blanton E, Maj P, Vitek J. High-level programming of embedded hard real-time devices. In 5th European Conference on Computer systems EuroSys'10. ACM SIGOPS: Paris, France, 2010; pp.69-82.\n\n[45]\n\nPrivat J, Ducournau R. Link-time static analysis for efficient separate compilation of object-oriented languages. In 6th Workshop on Program Analysis for Software Tools and Engineering PASTE'05. ACM SIGPLAN-SIGSOFT: Lisbon, Portugal, 2005; pp.20-27.\n\n[46]\n\nCorney D, John Gough J. Type test elimination using typeflow analysis. In Proceedings of Programming Languages and System Architectures, Vol.Volume 792, &lt;bookSeriesTitle&gt;Lecture Notes in Computer Sciences&lt;/bookSeriesTitle&gt;. Springer-Verlag, 1994; pp.137-150.\n\n[47]\n\nMössenböck H, Wirth N. The Programming Language Oberon-2. Computer Science Report 160, ETH Zurich, May 1991.\n\n[48]\n\nDean J, DeFouw G, Grove D, Litvinov V, Chambers G. Vortex: an optimizing compiler for object-oriented languages. In 11th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'96, Vol.Volume 3110. ACM Press: San Jose, California, 1996; pp.83-100.\n\n[49]\n\nAgesen O, Palsberg J, Schwartzbach MI. Type inference of SELF: analysis of objects with dynamic and multiple inheritance. Software Practice & Experience 1995; Volume 25 Issue 9: pp.975-995.\n\n[50]\n\nGlew N, Palsberg J. Type-safe method inlining. In 16th European Conference on Object-Oriented Programming ECOOP'02. Springer-Verlag: Málaga, Spain, 2002; pp.525-544.\n\n[51]\n\nPalsberg J, Schwartzbach MI. Object-oriented type inference. In 6th Annual ACM Conference on Object-Oriented Programming Systems, Languages and Applications OOPSLA'91, Vol.Volume 2611. ACM Press: Phoenix, Arizona, 1991; pp.146-161.\n\nCited By\n\nView all\n\nLi YTan TXue JUnderstanding and Analyzing Java ReflectionACM Transactions on Software Engineering and Methodology10.1145/329573928:2(1-50)\n\nIndex Terms\n\nEfficient compilation strategy for object-oriented languages under the closed-world assumption\n\nSoftware and its engineering\n\nSoftware notations and tools\n\nCompilers\n\nIndex terms have been assigned to the content through auto-classification.\n\nRecommendations\n\nMaking collection operations optimal with aggressive JIT compilation\n\nSCALA 2017: Proceedings of the 8th ACM SIGPLAN International Symposium on Scala\n\nFunctional collection combinators are a neat and widely accepted data processing abstraction. However, their generic nature results in high abstraction overheads -- Scala collections are known to be notoriously slow for typical tasks. We show that ...\n\nPart-compilation in high-level languages\n\nAbstract\n\nMany programming languages include the ability to divide large programs into smaller segments, which are compiled separately. When a small modification is made to a large program, then the affected segment only has to be re-compiled.\n\nThis paper ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n156 pages\n\nISSN:0038-0644\n\nIssue’s Table of Contents\n\nPublisher\n\nJohn Wiley & Sons, Inc.\n\nUnited States\n\nPublication History\n\nPublished: 01 May 2014\n\nAuthor Tags\n\ncode customization\n\ncompiler\n\ndynamic dispatch\n\ninlining\n\nobject-oriented\n\ntype flow analysis\n\nQualifiers\n\nArticle\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n1\n\nTotal Citations\n\nView Citations\n\n0\n\nTotal Downloads\n\nDownloads (Last 12 months)0\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nLi YTan TXue JUnderstanding and Analyzing Java ReflectionACM Transactions on Software Engineering and Methodology10.1145/329573928:2(1-50)\n\nView Options\n\nView options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nBenoît Sonntag\n\nLSIIT, Université de Strasbourg, Illkirch, France\n\nDominique Colnet\n\nLORIA, Université de Lorraine, Vandœuvre-lès-Nancy, France\n\nRequest permissions Authors Info & Affiliations"
    }
}