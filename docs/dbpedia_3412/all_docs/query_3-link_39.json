{
    "id": "dbpedia_3412_3",
    "rank": 39,
    "data": {
        "url": "https://curiousprogrammer.wordpress.com/2007/04/11/is-squeak-smalltalk-slow/",
        "read_more_link": "",
        "language": "en",
        "title": "Is Squeak Smalltalk Slow?",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/ca7135a5e157873036a2e76f1c802f7fb1aaf5007289891bf046b2c5110af810?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/8ddf9bbe5255261821c67a6f5179dd852a3414455860cd6f341e56462cc9e81c?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/43b85fe36487a403110cd206e16c2539ea3895b48cec6606f54a91a0b4651cd4?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/43b85fe36487a403110cd206e16c2539ea3895b48cec6606f54a91a0b4651cd4?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/43b85fe36487a403110cd206e16c2539ea3895b48cec6606f54a91a0b4651cd4?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/43b85fe36487a403110cd206e16c2539ea3895b48cec6606f54a91a0b4651cd4?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/53445089386ad8e5d02a7c7f02674052d5a45a9acac7b57e4f4342075ecf2787?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/43b85fe36487a403110cd206e16c2539ea3895b48cec6606f54a91a0b4651cd4?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/8ddf9bbe5255261821c67a6f5179dd852a3414455860cd6f341e56462cc9e81c?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/0e87c84f282d74189978da2f0dadc85d50946c8ee89652c711b5afc005c0999d?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/f952b5481f7dccf536a4c114d4fcdd998177c875a0153884b192fafe5f164cfc?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/2faa0d52c56d9095d6ee391ee9a11bad91b032173c0ffd312ad9e17a1a2a6dd2?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/b51e0e3f60ae23dcb00c0ae79325828af1f65de053cdb0bc99acf9bd6a7f9686?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://2.gravatar.com/avatar/5d6c307cbfeec5e2342c6f84a42f31bb61dbe4f4143bf77a015aa20577ca92e5?s=48&d=https%3A%2F%2F2.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/0192ea6ed890b570e89da9ad3e246b1d4ee40430fee8166408669ae5bc182c21?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/0192ea6ed890b570e89da9ad3e246b1d4ee40430fee8166408669ae5bc182c21?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/0192ea6ed890b570e89da9ad3e246b1d4ee40430fee8166408669ae5bc182c21?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://1.gravatar.com/avatar/d12163ad3a6b4e4d66c31a0092b35244feb9451c97b3a3ffd14c1a96921e46cf?s=48&d=https%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://0.gravatar.com/avatar/fdc0da4d109305ee260d60198fca8328e7973054eedb22fa13bf142570232fd7?s=48&d=https%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D48&r=G",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2007-04-11T00:00:00",
        "summary": "",
        "meta_description": "This is a question I'm currently interested in knowing the answer to. I don't know much about Smalltalk or Squeak unfortunately, but from what I do know, it seems like a good fit for the latest idea I have. The primary advantage over other environments I know, is that the image is available at all…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "A Curious Programmer",
        "canonical_link": "https://curiousprogrammer.wordpress.com/2007/04/11/is-squeak-smalltalk-slow/",
        "text": "This is a question I’m currently interested in knowing the answer to. I don’t know much about Smalltalk or Squeak unfortunately, but from what I do know, it seems like a good fit for the latest idea I have. The primary advantage over other environments I know, is that the image is available at all times. If an image receives a message it can’t handle because of a programming error, it can enter the debugger and wait for me to come along and debug it. I think that a decent Common Lisp implementation will offer me similar functionality.\n\nUnfortunately, playing around with a new language for a couple of days gives a very limited idea of what it will be like to use it to develop a medium-sized application. For me, during the initial stage of investigation, it is very important to know whether it is worth taking the time with very quickly so that as little time is wasted as possible. Unfortunately, Squeak is a little harder to get to grips with than most languages I am familiar with as it is necessary to learn the IDE at the same time as the language. It is not possible (as far as I know) to simply enter a hello world program into a textfile and execute it.\n\nThe first script I entered into the Workspace (which is kind of a scratchpad for exploring new ideas) displayed the numbers from 1 to 200 on to the transcript, which is a kind of logging window. Here is the code to do that along with a timing method. If you highlight thecode and select “print it” from the menu, it tells you how long it took to run.\n\nTime millisecondsToRun: [1 to: 200 do: [:i | Transcript show: i ; cr]]\n\nThis was the response: 10335\n\nOuch! 10 seconds. This is by far the worst performance I’ve ever seen in any language including BBC BASIC on a 2MHz machine. I was certain I must be doing something wrong so I asked on the Squeak beginners list. Unfortunately, it seems that it really is that slow. No-one has made any effort to tune the performance. Here is the comment from the Transcripter class:\n\n\"Transcripter is a dog-simple scrolling stream with display. It is intended to operate with no\n\nsupport from MVC or color in a minimal, or headless version of Squeak. No attention has been\n\npaid to appearance or performance.\"\n\nOkay. Well that is a pity – it is one of the first parts of the Squeak people will see and I would have thought that it would put a few people off. Anyway, the “everything is an image” is still selling me so I try to see how long it takes to write 10,000 numbers to a file.\n\n| myFile ios |\n\nios := ReadWriteStream on: ''. Transcript show: 'Populate Buffer: ', (Time millisecondsToRun: [ 1 to: 10000 do: [ :i | ios nextPutAll: ((i asString) , String crlf) ]]) asString , ' millseconds' ; cr. MessageTally spyOn: [ 1 to: 10000 do: [ :i | ios nextPutAll: ((i asString) , String crlf)]]. Transcript show: 'Position: ', (ios position) asString ; cr. myFile := StandardFileStream fileNamed: 'c:/test.txt'. Transcript show: 'Output Buffer: ', (Time millisecondsToRun: [ myFile nextPutAll: (ios contents)]) asString, ' milliseconds' ; cr. myFile close.\n\nThe MessageTally spyOn: is a nice profiler to see where it is spending its time – it is not really part of the initial test.\n\nThis produced the following output on the Transcript:\n\nPopulate Buffer: 275 millseconds\n\nPosition: 58894\n\nOutput Buffer: 9 milliseconds\n\nHmmm… is 275 milliseconds good or bad? I wrote a quick perl script and ran it with Cygwin.\n\nuse strict;open (FH, \"> t3.txt\") || die \"Error: Can't write to file\"; for (my $i = 0; $i < 10000; ++$i) { print FH \"$irn\"; } close FH;\n\nIt ran in 0.061s – more than 4 times faster than the Squeak. Well, this is not very good at all. MzScheme and Chicken Scheme both produced results similar to the Perl. Asking on the mailing list again, it seems that the integer to string conversion is implemented in Squeak for flexibility whereas [it is suspected that] all the other languages use C libraries.\n\nNow, I’m not the sort of person who is in favour of premature optimisation, but if all the primitives are 4 times slower than Perl for reasons of flexibility that seems like a huge performance hit. It seems like it is harder to drop into C from Squeak than it would be from other scripting languages and Perl speed is about as slow as I like to go normally anyway. Maybe further investigation would reveal that the Transcript and integer to string comparisons are unusually slow. However, I have to balance the time spent investigating new programming languages is time I’m not spending developing my application."
    }
}