{
    "id": "dbpedia_8307_1",
    "rank": 50,
    "data": {
        "url": "https://spatialthoughts.com/category/python/",
        "read_more_link": "",
        "language": "en",
        "title": "python – Spatial Thoughts",
        "top_image": "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2021/06/Spatial-Thoughts-FINAL-1.png?fit=400%2C312&ssl=1",
        "meta_img": "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2021/06/Spatial-Thoughts-FINAL-1.png?fit=400%2C312&ssl=1",
        "images": [
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2021/06/Spatial-Thoughts-FINAL-1.png?fit=400%2C312&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2024/07/01-Challenge-Banner.jpg?resize=720%2C410&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2023/09/Level_Up_GEE_Tips.png?resize=720%2C405&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2022/01/visvalingam_whyatt_optimized.gif?resize=720%2C180&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2020/06/bad.png?resize=720%2C692&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2020/04/ndvi_time_series.gif?resize=720%2C509&ssl=1",
            "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2020/02/snap.gif?resize=600%2C578&ssl=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-15T11:38:01+05:30",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/spatialthoughts.com/wp-content/uploads/2019/12/spatial-thoughts-final-social-media-dp.png?fit=32%2C32&ssl=1",
        "meta_site_name": "Spatial Thoughts",
        "canonical_link": "https://spatialthoughts.com/category/python/",
        "text": "Welcome to #PyQGISChallenge – Master QGIS Python Development in 30 Days! We are launching our PyQGIS Masterclass course on YouTube and have designed this challenge to help you learn how to customize QGIS using Python with scripts, custom algorithms, actions and plugins! Spend 30 minutes each day for the next 30 days to level-up your QGIS skills. This course is the result of my 15+ years of experience doing QGIS development – including building enterprise-grade plugins and deploying QGIS to thousands of users. I am really excited to share this content with you – completely free.\n\nWe will be posting short videos everyday and cover the full course material step by step. The material is designed to help you slowly ramp up and learn complex concepts! All you have to do is show up everyday and spend half an hour watching the videos and practicing the exercises. At the end, you can take up a mini-project and apply your newly acquired skills. Ready for #PyQGISChallenge? Read on to know the details.\n\nThis is an advanced course that assumes good working knowledge of both Python and QGIS. If you are new to programming, complete our Python Foundation for Spatial Analysis course first.\n\nContinue reading →\n\nISRO recently released the full archive of medium and low-resolution Earth Observation dataset to the public. This includes the imagery from LISS-IV camera aboard ResourceSat-2 and ResourceSat-2A satellites. This is currently the highest spatial resolution imagery available in the public domain for India. In this post, I want to cover the steps required to download the imagery and apply the pre-processing steps required to make this data ready for analysis – specifically how to programmatically convert the DN values to TOA Reflectance. We will use modern Python libraries such as XArray, rioxarray, and dask – which allow use to seamlessly work with large datasets and use all the available compute power on your machine.\n\nContinue reading →\n\nAn important concept in spatial statistics is pixel weights. When calculating pixel statistics with a polygon, partial pixel overlaps are treated differently by different packages and you need to understand this to evaluate the accuracy of your results. Consider the following image. What is the correct answer?\n\nContinue reading →\n\nMatplotlib has functionality to created animations and can be used to create dynamic visualizations. In this post, I will explain the concepts and techniques for creating animated charts using Python and Matplotlib.\n\nI find this technique very helpful in creating animations showing how certain algorithms work. This post also contains Python implementations of two common geometry simplification algorithms and they will used to create animations showing each step of the algorithm. Since both of these implementations use a recursive function, the technique shown in the post can be extended to visualize other recursive functions using matplotlib. You will learn how to create animated plots like below.\n\nContinue reading →\n\nK-Means Clustering is a popular algorithm for automatically grouping points into natural clusters. QGIS comes with a Processing Toolbox algorithm ‘K-means clustering’ that can take a vector layer and group features into N clusters. A problem with this algorithm is that you do not have control over how many points end up in each cluster. Many applications require you to segment your data layer into equal sized clusters or clusters having a minimum number of points. Some examples where you may need this\n\nWhen planning for FTTH (Fiber-to-the-Home) network one may want to divide a neighborhood into clusters of at least 250 houses for placement of a node.\n\nDividing a sales territory/ customers equally among sales teams with customers in the same region are assigned to the same team.\n\nThere is a variation of the K-means algorithm called Constrained K-Means Clustering that uses graph theory to find optimal clusters with a user supplied minimum number of points belonging to given clusters. Stanislaw Adaszewski has a nice Python implementation of this algorithm that I have adapted to be used as a Processing Toolbox algorithm in QGIS.\n\nWarning!\n\nI have heard feedback from users that this algorithm doesn’t work on all types of point distributions and may get stuck while finding an optimal solution. I am looking into ways to improve the code and will appreciate if you had feedback.\n\nContinue reading →\n\nSpatial indexing methods help speed up spatial queries. Most GIS software and databases provide a mechanism to compute and use spatial index for your data layers. QGIS as well as PostGIS use a spatial indexing scheme based on R-Tree data structure – which creates a hierarchical tree using bounding boxes of geometries. This is quite efficient and results in big speedup in certain types of spatial queries. Check out Spatial Indexing section of my course Advanced QGIS where I show how to use R-Tree based Spatial index in QGIS.\n\nIf you use Python for geoprocesisng, the GeoPandas library also provides an easy to use implementation of R-Tree based spatial index using the .sidex attribute. University of Helsinki’s AutoGIS course has an excellent example of using spatial index with geopandas.\n\nIn this post, I want to talk about another spatial indexing system called H3.\n\nContinue reading →\n\nWhen working with raster data, you may sometimes need to deal with data gaps. These could be the result of sensor malfunction, processing errors or data corruption. Below is an example of data gap (i.e. no data values) in aerial imagery.\n\nContinue reading →\n\nGoogle Earth Engine (GEE) is a powerful cloud-based system for analysing massive amounts of remote sensing data. One area where Google Earth Engine shines is the ability to calculate time series of values extracted from a deep stack of imagery. While GEE is great at crunching numbers, it has limited cartographic capabilities. That’s where QGIS comes in. Using the Google Earth Engine Plugin for QGIS and Python, you can combine the computing power of GEE with the cartographic capabilities of QGIS. In this post, I will show how to write PyQGIS code to programmatically fetch time-series data, and render a map template to create an animated maps like below.\n\nContinue reading →\n\nIf you have collected GPS tracks, you know that the results can have varying accuracy. The track points collected along a route are not always on the road and can be jittery.\n\nContinue reading →\n\nWhen trying to automate your GIS workflows, one important step is the production of maps. Creating and exporting maps in QGIS is done via the Print Layout. One can automate creation of maps via the a rich Python API using the QgsLayout class.\n\nSee our post Rendering Print Layouts from QGIS Models for a no-code solution to exporting print layouts.\n\nContinue reading →"
    }
}