{
    "id": "dbpedia_8307_3",
    "rank": 33,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/2972958.2972963",
        "read_more_link": "",
        "language": "en",
        "title": "Measuring the Stylistic Inconsistency in Software Projects using Hierarchical Agglomerative Clustering",
        "top_image": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "meta_img": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Hong Kong View Profile",
            "China View Profile",
            "Qing Mi",
            "Jacky Keung",
            "Yang Yu"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM Other conferences",
        "canonical_link": "https://dl.acm.org/doi/10.1145/2972958.2972963",
        "text": "Abstract\n\nBackground: Although many software engineering methodologies and guidelines are provided, it is common that developers apply their very own programming styles to the source code being produced. These individually preferred programming styles are more comprehensive for themselves, but may well conflict with each other. Thus, the problem of stylistic inconsistency is inevitable during the software development process involving multiple developers, the result is undesirable and that will significantly degrade program readability and maintainability. Aims: Given limited understanding in this regard, we perform an empirical analysis for the purpose of quantitatively measuring the inconsistency degree of programming style within a software project team. Method: We first propose stylistic fingerprints, which are represented as a set of attribute-counting-metrics, in an attempt to characterize different programming styles. Then we adopt the hierarchical agglomerative clustering (HAC) technique to quantitatively measuring the proximity of programming style based on six C/C++ open source projects chosen from different application domains. Results: The empirical results demonstrate the feasibility and validity of our fingerprinting methodology. Moreover, the proposed clustering procedure utilizing HAC algorithm with dendrograms is capable of effectively illustrating the inconsistency degree of programming style among source files, which is significant for future research. Conclusions: This study proposed an effective and efficient approach for analyzing programming style inconsistency, supported by a sound theoretical basis for dealing with such a problem. Ultimately improving program readability and therefore reduce the maintenance overhead for software projects.\n\nReferences\n\n[1]\n\nAkhlaq, U. Impact of Software Comprehension in Software Maintenance and Evolution. PhD thesis, Blekinge Institute of Technology, 2010.\n\n[2]\n\nAllamanis, M., Barr, E. T., Bird, C., and Sutton, C. Learning natural coding conventions. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering - FSE 2014 (New York, New York, USA, 2014), ACM Press, pp. 281--293.\n\n[3]\n\nArabyarmohamady, S., Moradi, H., and Asadpour, M. A coding style-based plagiarism detection. In Proceedings of 2012 International Conference on Interactive Mobile and Computer Aided Learning (IMCL) (nov 2012), no. Imcl, IEEE, pp. 180--186.\n\n[4]\n\nArai, M. Development and evaluation of Eclipse plugin tool for learning programming style of Java. In 2014 9th International Conference on Computer Science & Education (aug 2014), vol. 30, IEEE, pp. 495--499.\n\n[5]\n\nAvgustinov, P., Baars, A. I., Henriksen, A. S., Lavender, G., Menzel, G., Moor, O. D., Schafer, M., and Tibble, J. Tracking Static Analysis Violations over Time to Capture Developer Characteristics. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering (may 2015), IEEE, pp. 437--447.\n\n[6]\n\nBerry, R. E., and A. E. Meekings, B. A style analysis of C programs. Communications of the ACM 28, 1 (jan 1985), 80--88.\n\n[7]\n\nBinkley, D., Davis, M., Lawrie, D., Maletic, J. I., Morrell, C., and Sharif, B. The impact of identifier style on effort and comprehension. Empirical Software Engineering 18, 2 (apr 2013), 219--276.\n\n[8]\n\nCorbo, F., del Grosso, C., and di Penta, M. Smart Formatter: Learning Coding Style from Existing Source Code. In 2007 IEEE International Conference on Software Maintenance (oct 2007), no. i, IEEE, pp. 525--526.\n\n[9]\n\nDeimel, L. E. The uses of program reading. ACM SIGCSE Bulletin 17, 2 (jun 1985), 5--14.\n\n[10]\n\nDing, H., and Samadzadeh, M. H. Extraction of Java program fingerprints for software authorship identification. Journal of Systems and Software 72, 1 (jun 2004), 49--57.\n\n[11]\n\nHopkins, B., and Skellam, J. A new method for determining the type of distribution of plant individuals. Annals of Botany 18, 2 (1954), 213--227.\n\n[12]\n\nKrsul, I., and Spafford, E. H. Authorship analysis: identifying the author of a program. Computers & Security 16, 3 (jan 1997), 233--257.\n\n[13]\n\nMäkelä, S., and Leppänen, V. Japroch: A tool for checking programming style. Kolin Kolistelut-Koli Calling 2004 (2004), 151.\n\n[14]\n\nMiara, R. J., Musselman, J. a., Navarro, J. a., and Shneiderman, B. Program indentation and comprehensibility. Communications of the ACM 26, 11 (nov 1983), 861--867.\n\n[15]\n\nNguyen, V., Deeds-Rubin, S., Tan, T., and Boehm, B. A sloc counting standard. In COCOMO II Forum (2007), vol. 2007.\n\n[16]\n\nOman, P. W., and Cook, C. R. A paradigm for programming style research. ACM SIGPLAN Notices 23, 12 (dec 1988), 69--78.\n\n[17]\n\nOman, P. W., and Cook, C. R. Programming style authorship analysis. In Proceedings of the seventeenth annual ACM conference on Computer science: Computing trends in the 1990's Computing trends in the 1990's - CSC '89 (New York, New York, USA, 1989), ACM Press, pp. 320--326.\n\n[18]\n\nOman, P. W., and Cook, C. R. A taxonomy for programming style. In Proceedings of the 1990 ACM annual conference on Cooperation - CSC '90 (New York, New York, USA, 1990), ACM Press, pp. 244--250.\n\n[19]\n\nRaymond, D. R. Reading source code. Proc. CASCON (1991), 3--16.\n\n[20]\n\nRees, M. J. Automatic assessment aids for pascal programs. SIGPLAN Not. 17, 10 (Oct. 1982), 33--42.\n\n[21]\n\nSommerville, I. Software Engineering. International Computer Science Series. Pearson, 2011.\n\n[22]\n\nTibshirani, R., Walther, G., and Hastie, T. Estimating the number of clusters in a data set via the gap statistic. Journal of the Royal Statistical Society: Series B (Statistical Methodology) 63, 2 (may 2001), 411--423.\n\n[23]\n\nWard, J. H. Hierarchical Grouping to Optimize an Objective Function. Journal of the American Statistical Association 58, 301 (mar 1963), 236.\n\n[24]\n\nWoodfield, S. N., Dunsmore, H. E., and Shen, V. Y. The effect of modularization and comments on program comprehension. In Proceedings of the 5th International Conference on Software Engineering (Piscataway, NJ, USA, 1981), ICSE '81, IEEE Press, pp. 215--223.\n\nCited By\n\nView all\n\nRamírez ARomero JSynergies Between Artificial Intelligence and Software Engineering: Evolution and TrendsHandbook on Artificial Intelligence-Empowered Applied Software Engineering10.1007/978-3-031-08202-3_2(11-36)\n\nMi QKeung JHuang JXiao YUsing Eye Tracking Technology to Analyze the Impact of Stylistic Inconsistency on Code Readability2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)10.1109/QRS-C.2017.102(579-580)\n\nRecommendations\n\nKernel Hierarchical Agglomerative Clustering\n\nICPRAM 2014: Proceedings of the 3rd International Conference on Pattern Recognition Applications and Methods\n\nClustering algorithms, as unsupervised analysis tools, are useful for exploring data structure and have owned\n\ngreat success in many disciplines. For most of the clustering algorithms like k-means, determining the number\n\nof the clusters is a crucial step ...\n\nUsing hierarchical agglomerative clustering in wireless sensor networks: An energy-efficient and flexible approach\n\nIn wireless sensor networks (WSNs), hierarchical network structures have the advantage of providing scalable and resource efficient solutions. To find an efficient way to generate clusters, this paper adapts the well-understood hierarchical ...\n\nContent-based image retrieval embedded with agglomerative clustering built on information loss\n\nClustering algorithm and cluster-based CBIR system is developed.Implemented clustering algorithm forms good quality clusters as compared to others.A cluster-based CBIR system has also shown significant performance improvement.Proposed system reports ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n84 pages\n\nISBN:9781450347723\n\nDOI:10.1145/2972958\n\nCopyright © 2016 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected]\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 09 September 2016\n\nPermissions\n\nRequest permissions for this article.\n\nCheck for updates\n\nAuthor Tags\n\nempirical software engineering\n\nhierarchical agglomerative clustering\n\nprogramming style\n\nstylistic inconsistency\n\nQualifiers\n\nResearch-article\n\nResearch\n\nRefereed limited\n\nConference\n\nPROMISE 2016\n\nAcceptance Rates\n\nPROMISE 2016 Paper Acceptance Rate 10 of 23 submissions, 43%;\n\nOverall Acceptance Rate 98 of 213 submissions, 46%\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n2\n\nTotal Citations\n\nView Citations\n\n168\n\nTotal Downloads\n\nDownloads (Last 12 months)12\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nRamírez ARomero JSynergies Between Artificial Intelligence and Software Engineering: Evolution and TrendsHandbook on Artificial Intelligence-Empowered Applied Software Engineering10.1007/978-3-031-08202-3_2(11-36)\n\nMi QKeung JHuang JXiao YUsing Eye Tracking Technology to Analyze the Impact of Stylistic Inconsistency on Code Readability2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)10.1109/QRS-C.2017.102(579-580)\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nQing Mi\n\nDepartment of Computer Science, City University of Hong Kong, Kowloon, Hong Kong\n\nJacky Keung\n\nDepartment of Computer Science, City University of Hong Kong, Kowloon, Hong Kong\n\nYang Yu\n\nSearch Engine Department, Beijing Sogou Technology Development Co., Ltd, Beijing, China\n\nRequest permissions Authors Info & Affiliations"
    }
}