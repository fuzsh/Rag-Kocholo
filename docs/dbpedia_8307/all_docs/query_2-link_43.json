{
    "id": "dbpedia_8307_2",
    "rank": 43,
    "data": {
        "url": "https://www.builder.ai/under-the-hood",
        "read_more_link": "",
        "language": "en",
        "title": "Learn More About Our AI",
        "top_image": "https://www.builder.ai/images/builder-ai-meta.png",
        "meta_img": "https://www.builder.ai/images/builder-ai-meta.png",
        "images": [
            "https://www.builder.ai/images/build-software.svg",
            "https://www.builder.ai/images/hosting.svg",
            "https://www.builder.ai/images/support-plus.svg",
            "https://www.builder.ai/images/briefcase.svg",
            "https://www.builder.ai/images/industries.svg",
            "https://www.builder.ai/images/casestudies.svg",
            "https://www.builder.ai/images/customer-success-icon.svg",
            "https://www.builder.ai/images/question-mark.svg",
            "https://www.builder.ai/images/casestudies2.svg",
            "https://www.builder.ai/images/our-story.svg",
            "https://www.builder.ai/images/newsroom.svg",
            "https://www.builder.ai/images/careers-icon.svg",
            "https://www.builder.ai/images/blog.svg",
            "https://www.builder.ai/images/faq.svg",
            "https://www.builder.ai/images/events-icon.svg",
            "https://www.builder.ai/images/ai-to-build-your-app.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Frame-162856-2.png",
            "https://www.builder.ai/images/overall-natasha_01.png",
            "https://www.builder.ai/images/overall-natasha_02.png",
            "https://www.builder.ai/images/Frame-162856-3.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Building-Blocks_01-1.png",
            "https://www.builder.ai/images/Building-Blocks_02-1.png",
            "https://www.builder.ai/images/Design-Library.png",
            "https://www.builder.ai/images/Design-Library-1.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Frame-162856-8.png",
            "https://www.builder.ai/images/Tracker.png",
            "https://www.builder.ai/images/Frame-162856-5.png",
            "https://www.builder.ai/images/Frame-162856-6.png",
            "https://www.builder.ai/images/Frame-162856-7.png",
            "https://www.builder.ai/images/Visual-QA_01.png",
            "https://www.builder.ai/images/Visual-QA_02.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Frame-162856-4.png",
            "https://www.builder.ai/images/Studio-Store_01.png",
            "https://www.builder.ai/images/Studio-Store_02.png",
            "https://www.builder.ai/images/Frame-162856-9.png",
            "https://www.builder.ai/images/Now_01.png",
            "https://www.builder.ai/images/Now_02.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Home_01.png",
            "https://www.builder.ai/images/Home_02-1.png",
            "https://www.builder.ai/images/Builder-360.png",
            "https://www.builder.ai/images/Arrow_Vector.svg",
            "https://www.builder.ai/images/Frame-162856-10.png",
            "https://www.builder.ai/images/Frame-162856-13.png",
            "https://www.builder.ai/images/Frame-162856-11.png",
            "https://www.builder.ai/images/Frame-162856-14.png",
            "https://www.builder.ai/images/under-the-hood-knowledge-graph.png",
            "https://www.builder.ai/images/Frame-162841.png",
            "https://www.builder.ai/images/studio-dashboard.png",
            "https://www.builder.ai/images/reusable-blocks.png",
            "https://www.builder.ai/images/Builder.ai_Black.svg",
            "https://www.builder.ai/images/Facebook.svg",
            "https://www.builder.ai/images/x-black-3.svg",
            "https://www.builder.ai/images/Linkedin.svg",
            "https://www.builder.ai/images/social-video-youtube-clip.svg",
            "https://www.builder.ai/images/Instagram-1.svg",
            "https://www.builder.ai/images/rss-feed.svg",
            "https://www.builder.ai/images/europas-2022-2.jpg",
            "https://www.builder.ai/images/CogX_Awards_Badge_75-2.png",
            "https://www.builder.ai/images/g2-best-support.png",
            "https://www.builder.ai/images/g2-easiest-admin.png",
            "https://www.builder.ai/images/Closebutton.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Get a glimpse into how AI and humans work together to build your app. Check out the tech we use to build your app, from artificial intelligence to Lego-like reusable features.",
        "meta_lang": "en",
        "meta_favicon": "/images/builder-favicon-32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.builder.ai/under-the-hood",
        "text": "Artificial Intelligence\n\nWhat: The brain that powers our platform\n\nAt Builder.ai, we think of our Builder Knowledge Graph as the brain of our operations, because it powers most of our workflows. Its primary objective is to fill in the gaps between what makes your idea special and what itâll need to be special.\n\nThe graph contains the entities in our Builder.ai ecosystem (thatâs everything from features, to projects and developers). And it shows how all these are connected. For example, a developer might be working on a specific feature thatâs part of a bigger project.\n\nThen we use graph embedding algorithms: they translate this information, so that it can be read and used by machine learning algorithms. This allows us to predict time and costs for new projects. It also lets us split your project into parallel work streams and find the best developers to work on each task.\n\nTech used: graph paradigmâs flexibility lets us calculate metrics like feature node centrality and degree. Neighbourhood detection for recommendation systems and feature link prediction â generates our instant prototypes. Knowledge Graph generates subgraph and node embeddings â a powerful tool for numerous machine learning models, using MetaPath2Vec and Node2Vec.\n\nArtificial Intelligence\n\nCustomer Experience\n\nDelivery Subsystem\n\nWhat: Our intelligent conversational assistant system\n\nSheâs integrated into the Builder.ai platform (Studio Pro), Builder 360 and Natasha Cockpit. Natasha uses a proprietary dialogue manager and the Builder Knowledge Graph to guide you as you concept and design your idea.\n\nHow is Natasha able to offer you suggestions? We use an arsenal of data and machine learning algorithms to support feature and template recommendations, negative feature recommendations and feature tagging.\n\nOur mission? For Natasha to one day become the voice of Builder.ai to provide true AI-assisted, self service on our platforms.\n\nTech used: cutting edge natural language understanding, like Flair for Named Entity Recognition and neural based sentence embedding models. Graph embedding models such as Metapath2Vec and GraphSage.\n\nArtificial Intelligence\n\nCustomer Experience\n\nDelivery System\n\nWhat: Natasha improving your spec call experience\n\nWeâre using Natasha Cockpit to improve your experience on that all-important spec call with us â where you describe what you want and we create a blueprint for your new app.\n\nEventually, each conversation will be powered by Natasha, providing our teams with the right question to ask you. She then listens for your answer and adds the relevant features to your Buildcard.\n\nThis will allow us to be more precise and ensure that every person you speak to at Builder.ai is an expert in what youâre trying to build. Natasha Cockpit is powered by our speech and conversational analysis system.\n\nTech used: Deep learning for NLP, unsupervised learning. Transformers are applied to understand similarity between phrases. Hierarchical clustering then uncovers topics in chat.\n\nReusable Features\n\nReusable Design\n\nWhat: Code components that we reuse across multiple Buildcards\n\nBuilding Blocks reduce both your costs and timeline, while maintaining standard code quality across all our Buildcards.\n\nEach Building Block has two sections â core & custom:\n\nEventually, each conversation will be powered by Natasha, providing our teams with the right question to ask you. She then listens for your answer and adds the relevant features to your Buildcard.\n\nCore sections: the lines of code which represent the main functionality and reusable components across Buildcards. (We use MD5 hashing technology to maintain the reusability of every block.)\n\nCustom sections: the snippets of code that define customisations that are specific to your Buildcard. This can include placeholder text, theme, colour, font, error messages or branding information.\n\nReusable Features\n\nReusable Design\n\nWhat: Design components that we reuse across many Buildcards\n\nEach feature in our catalogue has its own design starter kit â these pre-created, design files save designers having to start from scratch. Not only does this save time and money, it also maintains design quality.\n\nReusing existing files lets your designer focus on customisations to suit your specific idea (without having to design the basic use cases of that feature). Weâve got design files to suit every category, this makes design discussions less subjective and speeds up concepting your appâs design.\n\nAssembly Line\n\nDeep Automation\n\nWhat: Stitches your code together to create your app\n\nOur Merge Engine automatically merges your appâs design code with its functional code. This tool also handles the navigations, which connect the different screens in your app â as well as any animations or other interactions you want on each screen.\n\nStyles and assets are all consolidated in one place. So itâs simple for our experts to customise and use the code itâs generated for your app.\n\nAssembly Line\n\nDeep Automation\n\nWhat: Automatically converts designs to code\n\nUI Engine is a Builder.ai homegrown design-to-code product that converts design files (in Sketch, soon in Figma too) into React Code (which supports both mobile and web). It scales the generated code for different screen sizes â no effort is needed from a designer or developer.\n\nDesign files uploaded to our Designer Surface are automatically converted into corresponding web or mobile code. This system is designed in such a way that changing formats would be relatively easy.\n\nTech used: converts the design files into our proprietary domain specific language using adaptors â we then run translators to get the actual React/React Native code.\n\nPartner Lifecycle\n\nExpert Assessments\n\nWhat: Complete partner management system\n\nBuilding Blocks speed things up but as your app is unique, we need people to customise them so your app works â and looks â exactly the way you want it to. Our partners supply the designers, developers and QA experts who make this happen.\n\nWe use Builder Hive to onboard our capacity partners and test their experts. (Before we hire any third-party experts to work on your app, our in-house experts assess them.)\n\nBuilder Hive allows partners across the world to supply us with talent â while we make sure everyoneâs apps are the same, consistently high standard.\n\nBuilder Hive helps us:\n\nOnboard partners: profile and contract completion\n\nOnboard experts: profiling, quiz, assessments, course completion\n\nReview assessments: auto review system validates the assessment (basis code, repo status, code analyser)\n\nManage expert availability: schedule management and rate cards\n\nAllocate tasks to experts\n\nâ\n\nDelivery System\n\nReusable Blocks\n\nWhat: Task management tool.\n\nTracks and manages every task performed by the experts from our capacity partner network (as well as our internal product and engineering teams).\n\nOnce a project starts, Builder Tracker automatically adds all the common tasks required for each feature from our catalogue â based on inputs from our Builder Knowledge Graph.\n\nThis library of tasks and user stories is continuously refreshed, as new stories are created or edited. Our delivery team can manually edit these tasks based on what youâve asked for. BRAT then allocates each task to the best expert whoâs available to work on it.\n\nCustomer Experience\n\nAssembly Line\n\nDeep Automation\n\nReusable Blocks\n\nWhat: Online space where app designs are created â and converted into code\n\nDesigner Surface is used by designers from our capacity network. It lists their assigned tasks â they upload designs as Sketch files (soon, weâll accept Figma too) and it creates a flat file to send to you to approve. The designer makes any amends. Once approved, weâre able to extract UI code directly â turning designs into code in less than a minute.\n\nUsing our design library of precreated designs, and Builder Now, Designer Surface can immediately create a user flow of actual designs â ready for experts from our network to customise for you.\n\nDelivery System\n\nAssembly Line\n\nArtificial Intelligence\n\nReusable Blocks\n\nWhat: A virtual desktop that gives developers working for us, the tools they need\n\nOur Developer Surface is where developers from our capacity partner network do the tasks theyâve been assigned. Itâs a virtual desktop with all the tools and packages theyâll need to develop your app, already installed.\n\nIt uses facial recognition to make sure the named expert is the person working on the code strands. It also captures all keystrokes to ensure we know, at an industrial scale, if thereâs any code being copied in, and where itâs being copied from.\n\nExperts can access Developer Surface from a web browser, on any device, offering flexibility for them to work in a secured environment, from anywhere.\n\nTech used: Facial recognition. We provide minimum latency even across geographies by supporting multi-cloud regional clusters, dynamically.\n\nAssembly Line\n\nWhat: How we test the quality of our network of experts\n\nOur expert evaluation and grading platform allows us to continuously evaluate everyone working on your code â by giving them a developer score. These scores are integrated into our overall workflow. This helps us pick the right level of skill for each task on every Buildcard, without wasting money by giving simpler tasks to over-qualified experts.\n\nTech used: One of the key components is our code quality system (powered by SonarQube) to determine the score for each expert. These metrics are captured across multiple front and back end skills and fed into BRAT (our system for dynamic resource allocation).\n\nDeep Automation\n\nArtificial Intelligence\n\nWhat: Finds the best person for each task on every Buildcard\n\nOur Better Resource Allocation Tool (or BRAT to us) generates the optimal developer assignments. Not only finding the right person for each task but splitting work into parallel swimlanes for people to work on simultaneously. This minimises cost and time.\n\nItâs based on an operation research model and considers a plethora of information to make these assignments, including:\n\nFeature complexity\n\nDeveloper expertise\n\nPast developer experience\n\nTimezone\n\nProject affinity\n\nâ\n\nTech used: BRAT can also quantify developer performance and expertise. It uses a live grading system that employs qualitative and quantitative feedback, based on code quality metrics.\n\nAssembly Line\n\nArtificial Intelligence\n\nDeep Automation\n\nWhat: Automated Quality Assurance â to check app designs\n\nThis makes sure designersâ and developersâ work on your app matches up. Visual QA compares design files with actual generated screens â and spots visual differences between the two.\n\nItâs a pixel-to-pixel comparison, using computer vision to spot discrepancies on the static page layout of your screen (missing/spurious objects and incorrect position or colours for elements on your screens).\n\nVisual QA logs any differences as a bug in Builder Tracker, our task management tool. Our team review it and assign it to a developer to redo.\n\nSometimes differences arenât bugs (maybe theyâre dynamic content or placeholder details in a form). To avoid these false positives, Visual QA masks out text elements before comparing screens.\n\nTech used: Computer vision. Optical Character Recognition (OCR) engine to detect and diagnose text position and spacing.\n\nAdditional routines based on optical character recognition remove text elements (see image below), before applying pixel-based diagnostics. At this latter stage, an approach based on structural similarity indices for computer vision checks element position, detects missing/spurious objects in the UI and identifies incorrect colours.\n\nArtificial Intelligence\n\nCustomer Experience\n\nWhat: AI-powered software assembly line â that helps anyone build apps.\n\nWe empower anyone to turn their idea into tailor-made software, without writing any code or speaking to a developer or agency. The Studio Pro platform takes your specifications (the features your app needs and platforms it should run on) and turns them into a Buildcard (a machine readable spec for that project).\n\nUsing deep and graph learning, and bayesian estimation, it calculates the cost and approximate timeline for your chosen set of features. Itâs so powerful that we can guarantee upfront that you wonât pay more than this price for this combination of features.\n\nIt also uses our Knowledge Graph to analyse the past history of feature combinations to detect where potential conflict points may emerge and factors that into its cost and approximate timeline.\n\nNatasha, our AI conversational agent, guides you through this process and can recommend templates and features based on your replies using natural language processing.\n\nCustomer Facing\n\nWhat: Creates industrial-grade applications â faster than any other platform.\n\nStudio Rapid is a next generation no-code/low-code platform that allows enterprises to build applications for themselves. All you need is basic design knowledge and anyone from your team can build enterprise-grade apps using its intuitive interface. And youâll do it faster than with any other platform.\n\nIn less than a day, you can have a complete native app on your phone with the Studio Rapid previewer app. This is an app that lets you instantly access all of the fully-functional apps youâve designed with Studio Rapid and test changes in real-time.\n\nArtificial Intelligence\n\nReusable Design\n\nCustomer Facing\n\nWhat: App prototyping tool â click through your app and share with others\n\nBuilder Now automatically creates an interactive prototype for the features youâve selected in your Buildcard. It calculates which features to link to others in a logical manner and stitches that flow into a prototype.\n\nTo do that it uses information from the Builder Knowledge Graph (itâs based on app templates, previous client projects, prototypes and our own content management tool). Then your prototype is run through a machine learning model and finally, we built an algorithm to make sure your users can get to every feature from your start screen.\n\nYou can edit it to improve user journeys and the flow of the app. The free tool creates a prototype instantly. The paid version gives you more control, customisation and designed screens, in a few days.\n\nTech used: MetaPath2Vec embeddings generated from the Builder Knowledge Graph are passed to a Gradient Boosting model that predicts linkage between any 2 features. Then a secondary model selects the most likely starting screen for each prototype. As these 2 models canât guarantee a path from the starting screen to every feature in the Buildcard, we invested in our own proprietary pathfinding algorithm. It uses embeddings and an adjacency matrix to guarantee these paths.\n\nCustomer Experience\n\nWhat: Dashboard that lets you view your Buildcardâs progress.\n\nThis dashboard shows live progress as a percentage, the status of each feature and the latest release. Stores documents (invoices, contracts, receiptsâ¦). Raise tickets for bugs, queries or to-dos â and get them resolved quickly. You can ask questions and book meetings with our team here too.\n\nBoth you and our Productologists can view and resolve all dependencies here. Itâs designed to reduce offline communication and offer transparency to everyone.\n\nAssembly Line\n\nDeep Automation\n\nWhat: Predicts which cloud services each Buildcard needs\n\nGives you an early estimate of your cloud costs at the Buildcard stage, to help you decide if you want to opt in or out of Builder Cloud.\n\nOur algorithm analyses each feature youâve chosen and looks at the different providers to find the best cloud provider for your app, at the lowest cost.\n\nChoose Builder Cloud and this algorithm then automates your whole cloud provisioning cycle. Thatâs everything from creating cloud accounts, to setting up CI/CD, (continuous integration/continuous delivery is an automated way to integrate new code into your app), and scaling your business.\n\nTech used: converts data from multiple cloud providers into a domain specific language, to predict infrastructure blueprints in a cloud agnostic manner. Sets up CI/CD for automated deployments.\n\nRun Platform\n\nDeep Automation\n\nWhat: Algorithm that allows us to offer cloud savings to customers\n\nWeâve developed an analysis tool that automates and manages our cloud reservations, called Osiris. It makes sure we always have enough cloud for our customers, without overspending and buying more than we need.\n\nRuns in the backend and constantly analyses our cloud reservations, based on demand.\n\nAnalyses 5TB of usage data every month and stores that in a data warehouse.\n\nUses advanced data models to predict the usage quantity and trends.\n\nManages inventory and purchases automatically, without any human involvement.\n\nâ\n\nTech used: a combination of ETL pipeline, which parses 5TB of usage data a month. Advanced data models such as SARIMAX predict usage quantity and trends. Modified version of knapsack algorithm recommends the commitments.\n\nRun Platform\n\nWhat: Manages all your third-party services\n\nOur platform provisioning service brings together â in a single place â all the third-party tools and services you might need to build, run and scale your software, with us.\n\nIt aggregates software services: from payment gateways and logistics, to domains and licences (like Office 365), and automatically provisions accounts for these services with a click of a button. So you avoid the hassle of juggling between multiple platforms.\n\nChoose services on demand youâd like to integrate with your app and weâll set up accounts for each of them (including invoicing), making it quick and easy for you.\n\nDeep Automation\n\nArtificial Intelligence\n\nWhat: Early warning system for project delays.\n\nHealth Check uses information from past projects within the Builder Knowledge Graph, to work out the probability of whether a current project will be delayed.\n\nIt also shows the most likely causes for the delay (for example, if a customer isnât responsive and theyâre taking longer to give feedback, or there are more bugs being raised by developers, or more complicated feature to feature interactions). We use these insights to take action ahead of probable issues and reallocate resources to prevent delays.\n\nTech used: Bayesian network inference â to provide the transparent, causal impacts of different factors on project delays."
    }
}