{
    "id": "dbpedia_8307_3",
    "rank": 43,
    "data": {
        "url": "https://github.com/avelino/awesome-go",
        "read_more_link": "",
        "language": "en",
        "title": "go: A curated list of awesome Go frameworks, libraries and software",
        "top_image": "https://opengraph.githubassets.com/b15958ec6707e9038176b79c141d5c8a17bf2e2a97fb79c0b565a68c3426d36e/avelino/awesome-go",
        "meta_img": "https://opengraph.githubassets.com/b15958ec6707e9038176b79c141d5c8a17bf2e2a97fb79c0b565a68c3426d36e/avelino/awesome-go",
        "images": [
            "https://github.com/avelino/awesome-go/raw/main/tmpl/assets/logo.png",
            "https://github.com/avelino/awesome-go/actions/workflows/tests.yaml/badge.svg?branch=main",
            "https://camo.githubusercontent.com/50cf39121274b3db22bf1bd72cbe25af9078e037441cb5b5bdef1cc9dc5eb2f7/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667",
            "https://camo.githubusercontent.com/0966cc7edb05025546309a3e8a898f53c3e4cd4a0dd0c388e804f80ca2a89230/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6f696e2d75732532306f6e253230736c61636b2d677261792e7376673f6c6f6e6743616368653d74727565266c6f676f3d736c61636b26636f6c6f72423d726564",
            "https://camo.githubusercontent.com/df931b8736c4832c491f4567ffbe7af0459235002a6b40972930588db87bd9e6/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f38336136646362652d306461362d343333652d623538362d6636383130393238366264352f6465706c6f792d737461747573",
            "https://camo.githubusercontent.com/cb496e86ab9ddd80bb736744886fa7ffed5368ef28f2ea08813a9cbc4b420c31/68747470733a2f2f7777772e747261636b617765736f6d656c6973742e636f6d2f62616467652e737667",
            "https://camo.githubusercontent.com/699ce6d84a3fc63c02117850054b8dbd4d61bbddd72b3e7810904af5598aeb96/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6176656c696e6f2f617765736f6d652d676f",
            "https://camo.githubusercontent.com/024753091f8f8795404d56016abacfeb3b4a15bb127c721450de1657b725bd57/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323931353335267468656d653d6c69676874",
            "https://camo.githubusercontent.com/648f93abfad3805c8cc551d8d6c7c6c11e8f05884958ab6616da7f19449fc926/68747470733a2f2f6176656c696e6f2e72756e2f73706f6e736f72732f776f726b6f732d6c6f676f2d77686974652d62672e737667",
            "https://camo.githubusercontent.com/cc46eb4c1eccba43ef10daecefd5d6bf8dfdf71aba23a55f884918663da1e155/68747470733a2f2f6176656c696e6f2e72756e2f73706f6e736f72732f6b657967656e2d6c6f676f2e706e67",
            "https://camo.githubusercontent.com/3a21dec5d9cbd7d2e27ccc193e3eaf7716f6232ef871191eeb81272c9a4831ae/68747470733a2f2f6176656c696e6f2e72756e2f73706f6e736f72732f646f5f6c6f676f5f686f72697a6f6e74616c5f626c75652d3231302e706e67",
            "https://avatars.githubusercontent.com/u/1128849?s=64&v=4",
            "https://avatars.githubusercontent.com/u/31996?s=64&v=4",
            "https://avatars.githubusercontent.com/u/9026581?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1924134?s=64&v=4",
            "https://avatars.githubusercontent.com/u/7666955?s=64&v=4",
            "https://avatars.githubusercontent.com/u/201930?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3127847?s=64&v=4",
            "https://avatars.githubusercontent.com/u/29627898?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1896175?s=64&v=4",
            "https://avatars.githubusercontent.com/u/755757?s=64&v=4",
            "https://avatars.githubusercontent.com/u/91538?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5528304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/8068371?s=64&v=4",
            "https://avatars.githubusercontent.com/u/9476466?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A curated list of awesome Go frameworks, libraries and software - avelino/awesome-go",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/avelino/awesome-go",
        "text": "Awesome Go\n\nWe use the Golang Bridge community Slack for instant communication, follow the form here to join.\n\nSponsorships:\n\nSpecial thanks to\n\nAwesome Go has no monthly fee, but we have employees who work hard to keep it running. With money raised, we can repay the effort of each person involved! You can see how we calculate our billing and distribution as it is open to the entire community. Want to be a supporter of the project click here.\n\nA curated list of awesome Go frameworks, libraries, and software. Inspired by awesome-python.\n\nContributing:\n\nPlease take a quick gander at the contribution guidelines first. Thanks to all contributors; you rock!\n\nIf you see a package or project here that is no longer maintained or is not a good fit, please submit a pull request to improve this file. Thank you!\n\nAwesome Go\n\nContents\n\nArtificial Intelligence\n\nAudio and Music\n\nAuthentication and OAuth\n\nBlockchain\n\nBot Building\n\nBuild Automation\n\nCommand Line\n\nAdvanced Console UIs\n\nStandard CLI\n\nConfiguration\n\nContinuous Integration\n\nCSS Preprocessors\n\nData Integration Frameworks\n\nData Structures and Algorithms\n\nBit-packing and Compression\n\nBit Sets\n\nBloom and Cuckoo Filters\n\nData Structure and Algorithm Collections\n\nIterators\n\nMaps\n\nMiscellaneous Data Structures and Algorithms\n\nNullable Types\n\nQueues\n\nSets\n\nText Analysis\n\nTrees\n\nPipes\n\nDatabase\n\nCaches\n\nDatabases Implemented in Go\n\nDatabase Schema Migration\n\nDatabase Tools\n\nSQL Query Builders\n\nDatabase Drivers\n\nInterfaces to Multiple Backends\n\nRelational Database Drivers\n\nNoSQL Database Drivers\n\nSearch and Analytic Databases\n\nDate and Time\n\nDistributed Systems\n\nDynamic DNS\n\nEmail\n\nEmbeddable Scripting Languages\n\nError Handling\n\nFile Handling\n\nFinancial\n\nForms\n\nFunctional\n\nGame Development\n\nGenerators\n\nGeographic\n\nGo Compilers\n\nGoroutines\n\nGUI\n\nHardware\n\nImages\n\nIoT (Internet of Things)\n\nJob Scheduler\n\nJSON\n\nLogging\n\nMachine Learning\n\nMessaging\n\nMicrosoft Office\n\nMicrosoft Excel\n\nMiscellaneous\n\nDependency Injection\n\nProject Layout\n\nStrings\n\nUncategorized\n\nNatural Language Processing\n\nLanguage Detection\n\nMorphological Analyzers\n\nSlugifiers\n\nTokenizers\n\nTranslation\n\nTransliteration\n\nNetworking\n\nHTTP Clients\n\nOpenGL\n\nORM\n\nPackage Management\n\nPerformance\n\nQuery Language\n\nResource Embedding\n\nScience and Data Analysis\n\nSecurity\n\nSerialization\n\nServer Applications\n\nStream Processing\n\nTemplate Engines\n\nTesting\n\nTesting Frameworks\n\nMock\n\nFuzzing and delta-debugging/reducing/shrinking\n\nSelenium and browser control tools\n\nFail injection\n\nText Processing\n\nFormatters\n\nMarkup Languages\n\nParsers/Encoders/Decoders\n\nRegular Expressions\n\nSanitation\n\nScrapers\n\nRSS\n\nUtility/Miscellaneous\n\nThird-party APIs\n\nUtilities\n\nUUID\n\nValidation\n\nVersion Control\n\nVideo\n\nWeb Frameworks\n\nMiddlewares\n\nActual middlewares\n\nLibraries for creating HTTP middlewares\n\nRouters\n\nWebAssembly\n\nWindows\n\nXML\n\nZero Trust\n\nCode Analysis\n\nEditor Plugins\n\nGo Generate Tools\n\nGo Tools\n\nSoftware Packages\n\nDevOps Tools\n\nOther Software\n\nResources\n\nBenchmarks\n\nConferences\n\nE-Books\n\nE-books for purchase\n\nFree e-books\n\nGophers\n\nMeetups\n\nStyle Guides\n\nSocial Media\n\nTwitter\n\nReddit\n\nWebsites\n\nTutorials\n\nGuided Learning\n\n⬆ back to top\n\nArtificial Intelligence\n\nLibraries for building programs that leverage AI.\n\nlangchaingo - LangChainGo is a framework for developing applications powered by language models.\n\nLocalAI - Open Source OpenAI alternative, self-host AI models.\n\nOllama - Run large language models locally.\n\n⬆ back to top\n\nAudio and Music\n\nLibraries for manipulating audio.\n\nflac - Native Go FLAC encoder/decoder with support for FLAC streams.\n\ngaad - Native Go AAC bitstream parser.\n\nGoAudio - Native Go Audio Processing Library.\n\ngosamplerate - libsamplerate bindings for go.\n\nid3v2 - ID3 decoding and encoding library for Go.\n\nmalgo - Mini audio library.\n\nminimp3 - Lightweight MP3 decoder library.\n\nOto - A low-level library to play sound on multiple platforms.\n\nPortAudio - Go bindings for the PortAudio audio I/O library.\n\n⬆ back to top\n\nAuthentication and OAuth\n\nLibraries for implementing authentication schemes.\n\nauthboss - Modular authentication system for the web. It tries to remove as much boilerplate and \"hard things\" as possible so that each time you start a new web project in Go, you can plug it in, configure it, and start building your app without having to build an authentication system each time.\n\nbranca - branca token specification implementation for Golang 1.15+.\n\ncasbin - Authorization library that supports access control models like ACL, RBAC, and ABAC.\n\ncookiestxt - provides a parser of cookies.txt file format.\n\ngo-guardian - Go-Guardian is a golang library that provides a simple, clean, and idiomatic way to create powerful modern API and web authentication that supports LDAP, Basic, Bearer token, and Certificate based authentication.\n\ngo-jose - Fairly complete implementation of the JOSE working group's JSON Web Token, JSON Web Signatures, and JSON Web Encryption specs.\n\ngologin - chainable handlers for login with OAuth1 and OAuth2 authentication providers.\n\ngorbac - provides a lightweight role-based access control (RBAC) implementation in Golang.\n\ngosession - This is quick session for net/http in GoLang. This package is perhaps the best implementation of the session mechanism, or at least it tries to become one.\n\ngoth - provides a simple, clean, and idiomatic way to use OAuth and OAuth2. Handles multiple providers out of the box.\n\njeff - Simple, flexible, secure, and idiomatic web session management with pluggable backends.\n\njwt - Lightweight JSON Web Token (JWT) library.\n\njwt - Safe, simple, and fast JSON Web Tokens for Go.\n\njwt-auth - JWT middleware for Golang http servers with many configuration options.\n\njwt-go - A full featured implementation of JSON Web Tokens (JWT). This library supports the parsing and verification as well as the generation and signing of JWTs.\n\nketo - Open Source (Go) implementation of \"Zanzibar: Google's Consistent, Global Authorization System\". Ships gRPC, REST APIs, newSQL, and an easy and granular permission language. Supports ACL, RBAC, and other access models.\n\nloginsrv - JWT login microservice with pluggable backends such as OAuth2 (Github), htpasswd, osiam.\n\noauth2 - Successor of goauth2. Generic OAuth 2.0 package that comes with JWT, Google APIs, Compute Engine, and App Engine support.\n\noidc - Easy to use OpenID Connect client and server library written for Go and certified by the OpenID Foundation\n\nopenfga - Implementation of fine-grained authorization based on the \"Zanzibar: Google's Consistent, Global Authorization System\" paper. Backed by CNCF.\n\nosin - Golang OAuth2 server library.\n\notpgen - Library to generate TOTP/HOTP codes.\n\notpgo - Time-Based One-Time Password (TOTP) and HMAC-Based One-Time Password (HOTP) library for Go.\n\npaseto - Golang implementation of Platform-Agnostic Security Tokens (PASETO).\n\npermissions2 - Library for keeping track of users, login states, and permissions. Uses secure cookies and bcrypt.\n\nscope - Easily Manage OAuth2 Scopes In Go.\n\nscs - Session Manager for HTTP servers.\n\nsecurecookie - Efficient secure cookie encoding/decoding.\n\nsession - Go session management for web servers (including support for Google App Engine - GAE).\n\nsessions - Dead simple, highly performant, highly customizable sessions service for go http servers.\n\nsessionup - Simple, yet effective HTTP session management and identification package.\n\nsjwt - Simple jwt generator and parser.\n\n⬆ back to top\n\nTools for building blockchains.\n\ncometbft - A distributed, Byzantine fault-tolerant, deterministic state machine replication engine. It is a fork of Tendermint Core and implements the Tendermint consensus algorithm.\n\ncosmos-sdk - A Framework for Building Public Blockchains in the Cosmos Ecosystem.\n\ngo-ethereum - Official Go implementation of the Ethereum protocol.\n\ngosemble - A Go-based framework for building Polkadot/Substrate-compatible runtimes.\n\ngossamer - A Go implementation of the Polkadot Host.\n\nkubo - A blockchain framework implemented in Go. It provides content-addressable storage which can be used for decentralized storage in DApps. It is based on the IPFS protocol.\n\nsolana-go - Go library to interface with Solana JSON RPC and WebSocket interfaces.\n\ntendermint - High-performance middleware for transforming a state machine written in any programming language into a Byzantine Fault Tolerant replicated state machine using the Tendermint consensus and blockchain protocols.\n\n⬆ back to top\n\nBot Building\n\nLibraries for building and working with bots.\n\nbot - Zero-dependencies Telegram Bot library with additional UI components\n\nechotron - An elegant and concurrent library for Telegram Bots in Go.\n\nephemeral-roles - A Discord bot for managing ephemeral roles based upon voice channel member presence.\n\ngo-chat-bot - IRC, Slack & Telegram bot written in Go.\n\ngo-joe - A general-purpose bot library inspired by Hubot but written in Go.\n\ngo-sarah - Framework to build a bot for desired chat services including LINE, Slack, Gitter, and more.\n\ngo-tg - Generated from official docs Go client library for accessing Telegram Bot API, with batteries for building complex bots included.\n\ngo-tgbot - Pure Golang Telegram Bot API wrapper, generated from swagger file, session-based router, and middleware.\n\ngo-twitch-irc - Library to write bots for twitch.tv chat\n\nGolang CryptoTrading Bot - A golang implementation of a console-based trading bot for cryptocurrency exchanges.\n\ngovkbot - Simple Go VK bot library.\n\nhanu - Framework for writing Slack bots.\n\nKelp - official trading and market-making bot for the Stellar DEX. Works out-of-the-box, written in Golang, compatible with centralized exchanges and custom trading strategies.\n\nlarry - Larry 🐦 is a really simple Twitter bot generator that tweets random repositories from Github built in Go.\n\nmargelet - Framework for building Telegram bots.\n\nmicha - Go Library for Telegram bot api.\n\nolivia - A chatbot built with an artificial neural network.\n\nslack-bot - Ready to use Slack Bot for lazy developers: Custom commands, Jenkins, Jira, Bitbucket, Github...\n\nslacker - Easy to use framework to create Slack bots.\n\nslackscot - Another framework for building Slack bots.\n\ntbot - Telegram bot server with API similar to net/http.\n\ntelebot - Telegram bot framework is written in Go.\n\ntelego - Telegram Bot API library for Golang with full one-to-one API implementation.\n\ntelegram-bot-api - Simple and clean Telegram bot client.\n\nteleterm - Telegram Bot Exec Terminal Command.\n\nTenyks - Service oriented IRC bot using Redis and JSON for messaging.\n\nwayback - A bot for Telegram, Mastodon, Slack, and other messaging platforms archives webpages.\n\n⬆ back to top\n\nBuild Automation\n\nLibraries and tools help with build automation.\n\n1build - Command line tool to frictionlessly manage project-specific commands.\n\nair - Air - Live reload for Go apps.\n\nanko - Simple application watcher for multiple programming languages.\n\ngaper - Builds and restarts a Go project when it crashes or some watched file changes.\n\ngilbert - Build system and task runner for Go projects.\n\ngob - Gradle/Maven like build tool for Go projects.\n\ngoyek - Create build pipelines in Go.\n\nmage - Mage is a make/rake-like build tool using Go.\n\nmmake - Modern Make.\n\nrealize - Go build a system with file watchers and live to reload. Run, build and watch file changes with custom paths.\n\nTask - simple \"Make\" alternative.\n\ntaskctl - Concurrent task runner.\n\nxc - Task runner with README.md defined tasks, executable markdown.\n\n⬆ back to top\n\nCommand Line\n\nAdvanced Console UIs\n\nLibraries for building Console Applications and Console User Interfaces.\n\nasciigraph - Go package to make lightweight ASCII line graph ╭┈╯ in command line apps with no other dependencies.\n\naurora - ANSI terminal colors that support fmt.Printf/Sprintf.\n\nbox-cli-maker - Make Highly Customized Boxes for your CLI.\n\nbubble-table - An interactive table component for bubbletea.\n\nbubbles - TUI components for bubbletea.\n\nbubbletea - Go framework to build terminal apps, based on The Elm Architecture.\n\ncfmt - Contextual fmt inspired by bootstrap color classes.\n\ncfmt - Simple and convenient formatted stylized output fully compatible with fmt library.\n\nchalk - Intuitive package for prettifying terminal/console output.\n\ncolourize - Go library for ANSI colour text in terminals.\n\ncrab-config-files-templating - Dynamic configuration file templating tool for kubernetes manifest or general configuration files.\n\nctc - The non-invasive cross-platform terminal color library does not need to modify the Print method.\n\ngo-ataman - Go library for rendering ANSI colored text templates in terminals.\n\ngo-colorable - Colorable writer for windows.\n\ngo-colortext - Go library for color output in terminals.\n\ngo-isatty - isatty for golang.\n\ngo-palette - Go library that provides elegant and convenient style definitions using ANSI colors. Fully compatible & wraps the fmt library for nice terminal layouts.\n\ngo-prompt - Library for building a powerful interactive prompt, inspired by python-prompt-toolkit.\n\ngocui - Minimalist Go library aimed at creating Console User Interfaces.\n\ngommon/color - Style terminal text.\n\ngookit/color - Terminal color rendering tool library, support 16 colors, 256 colors, RGB color rendering output, compatible with Windows.\n\nlipgloss - Declaratively define styles for color, format and layout in the terminal.\n\nmarker - Easiest way to match and mark strings for colorful terminal outputs.\n\nmpb - Multi progress bar for terminal applications.\n\nprogressbar - Basic thread-safe progress bar that works in every OS.\n\npterm - A library to beautify console output on every platform with many combinable components.\n\nsimpletable - Simple tables in a terminal with Go.\n\nspinner - Go package to easily provide a terminal spinner with options.\n\ntabby - A tiny library for super simple Golang tables.\n\ntable - Small library for terminal color based tables.\n\ntabular - Print ASCII tables from command line utilities without the need to pass large sets of data to the API.\n\ntermbox-go - Termbox is a library for creating cross-platform text-based interfaces.\n\ntermdash - Go terminal dashboard based on termbox-go and inspired by termui.\n\ntermenv - Advanced ANSI style & color support for your terminal applications.\n\ntermui - Go terminal dashboard based on termbox-go and inspired by blessed-contrib.\n\nuilive - Library for updating terminal output in real time.\n\nuiprogress - Flexible library to render progress bars in terminal applications.\n\nuitable - Library to improve readability in terminal apps using tabular data.\n\nyacspin - Yet Another CLi Spinner package, for working with terminal spinners.\n\n⬆ back to top\n\nStandard CLI\n\nLibraries for building standard or basic Command Line applications.\n\nacmd - Simple, useful, and opinionated CLI package in Go.\n\nargparse - Command line argument parser inspired by Python's argparse module.\n\nargv - Go library to split command line string as arguments array using the bash syntax.\n\ncarapace - Command argument completion generator for spf13/cobra.\n\ncarapace-bin - Multi-shell multi-command argument completer.\n\ncarapace-spec - Define simple completions using a spec file.\n\ncli - Feature-rich and easy to use command-line package based on golang struct tags.\n\ncli - Simple and complete API for building command line interfaces in Go.\n\nclimax - Alternative CLI with \"human face\", in spirit of Go command.\n\nclîr - A Simple and Clear CLI library. Dependency free.\n\ncmd - Extends the standard flag package to support sub commands and more in idiomatic way.\n\ncmdr - A POSIX/GNU style, getopt-like command-line UI Go library.\n\ncobra - Commander for modern Go CLI interactions.\n\ncommand-chain - A go library for configure and run command chains - such as pipelining in unix shells.\n\ncommandeer - Dev-friendly CLI apps: sets up flags, defaults, and usage based on struct fields and tags.\n\ncomplete - Write bash completions in Go + Go command bash completion.\n\nDnote - A simple command line notebook with multi-device sync.\n\nelvish - An expressive programming language and a versatile interactive shell.\n\nenv - Tag-based environment configuration for structs.\n\nflag - Simple but powerful command line option parsing library for Go supporting subcommand.\n\nflaggy - A robust and idiomatic flags package with excellent subcommand support.\n\nflagvar - A collection of flag argument types for Go's standard flag package.\n\ngo-andotp - A CLI program to encrypt/decrypt andOTP files. Can be used as a library as well.\n\ngo-arg - Struct-based argument parsing in Go.\n\ngo-commander - Go library to simplify CLI workflow.\n\ngo-flags - go command line option parser.\n\ngo-getoptions - Go option parser inspired by the flexibility of Perl’s GetOpt::Long.\n\ngocmd - Go library for building command line applications.\n\nhiboot cli - cli application framework with auto configuration and dependency injection.\n\njob - JOB, make your short-term command as a long-term job.\n\nkingpin - Command line and flag parser supporting sub commands (superseded by kong; see below).\n\nliner - Go readline-like library for command-line interfaces.\n\nmcli - A minimal but very powerful cli library for Go.\n\nmitchellh/cli - Go library for implementing command-line interfaces.\n\nmow.cli - Go library for building CLI applications with sophisticated flag and argument parsing and validation.\n\nops - Unikernel Builder/Orchestrator.\n\npflag - Drop-in replacement for Go's flag package, implementing POSIX/GNU-style --flags.\n\nreadline Shell library with modern and easy to use UI features.\n\nsand - Simple API for creating interpreters and so much more.\n\nsflags - Struct based flags generator for flag, urfave/cli, pflag, cobra, kingpin, and other libraries.\n\nstrumt - Library to create prompt chain.\n\nsubcmd - Another approach to parsing and running subcommands. Works alongside the standard flag package.\n\nsurvey - Build interactive and accessible prompts with full support for windows and posix terminals.\n\nts - Timestamp convert & compare tool.\n\nukautz/clif - Small command line interface framework.\n\nurfave/cli - Simple, fast, and fun package for building command line apps in Go (formerly codegangsta/cli).\n\nversion - Collects and displays CLI version information in multiple formats along with upgrade notice.\n\nwlog - Simple logging interface that supports cross-platform color and concurrency.\n\nwmenu - Easy to use menu structure for cli applications that prompt users to make choices.\n\n⬆ back to top\n\nLibraries for configuration parsing.\n\naconfig - Simple, useful and opinionated config loader.\n\nbcl - BCL is a configuration language similar to HCL.\n\ncleanenv - Minimalistic configuration reader (from files, ENV, and wherever you want).\n\nconfig - Cloud native application configuration. Bind ENV to structs in only two lines.\n\nconfig - configure your app using file, environment variables, or flags in two lines of code\n\nconfiguration - Library for initializing configuration structs from env variables, files, flags and 'default' tag.\n\nconfigure - Provides configuration through multiple sources, including JSON, flags and environment variables.\n\nconfiguro - opinionated configuration loading & validation framework from ENV and Files focused towards 12-Factor compliant applications.\n\nconfiq - Structured data format to config struct decoder library for Go - supporting multiple data formats\n\nconfita - Load configuration in cascade from multiple backends into a struct.\n\nconflate - Library/tool to merge multiple JSON/YAML/TOML files from arbitrary URLs, validation against a JSON schema, and application of default values defined in the schema.\n\nenv - Parse environment variables to Go structs (with defaults).\n\nenv - A lightweight package for loading environment variables into structs.\n\nenv - An environment utility package with support for unmarshaling into structs\n\nenvconfig - Read your configuration from environment variables.\n\nenvh - Helpers to manage environment variables.\n\nfig - Tiny library for reading configuration from a file and from environment variables (with validation & defaults).\n\ngenv - Read environment variables easily with dotenv support.\n\ngo-array - A Go package that read or set data from map, slice or json.\n\ngo-aws-ssm - Go package that fetches parameters from AWS System Manager - Parameter Store.\n\ngo-cfg - The library provides a unified way to read configuration data into a structure from various sources, such as env, flags, and configuration files (.json, .yaml, .toml, .env).\n\ngo-conf - Simple library for application configuration based on annotated structs. It supports reading the configuration from environment variables, config files and command line parameters.\n\ngo-ini - A Go package that marshals and unmarshals INI-files.\n\ngo-ssm-config - Go utility for loading configuration parameters from AWS SSM (Parameter Store).\n\ngo-up - A simple configuration library with recursive placeholders resolution and no magic.\n\nGoCfg - Config manager with Struct Tags based contracts, custom value providers, parsers, and documentation generation. Customizable yet simple.\n\ngoConfig - Parses a struct as input and populates the fields of this struct with parameters from command line, environment variables and configuration file.\n\ngodotenv - Go port of Ruby's dotenv library (Loads environment variables from .env).\n\ngofigure - Go application configuration made easy.\n\nGoLobby/Config - GoLobby Config is a lightweight yet powerful configuration manager for the Go programming language.\n\ngone/jconf - Modular JSON configuration. Keep your config structs along with the code they configure and delegate parsing to submodules without sacrificing full config serialization.\n\ngonfig - Tag-based configuration parser which loads values from different providers into typesafe struct.\n\ngookit/config - application config manage(load,get,set). support JSON, YAML, TOML, INI, HCL. multi file load, data override merge.\n\nharvester - Harvester, an easy to use static and dynamic configuration package supporting seeding, env vars and Consul integration.\n\nhjson - Human JSON, a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments.\n\nhocon - Configuration library for working with the HOCON(a human-friendly JSON superset) format, supports features like environment variables, referencing other values, comments and multiple files.\n\ningo - Flags persisted in an ini-like config file.\n\nini - Go package to read and write INI files.\n\nini - INI Parser & Write Library, Unmarshal to Struct, Marshal to Json, Write File, watch file.\n\njoshbetz/config - Small configuration library for Go that parses environment variables, JSON files, and reloads automatically on SIGHUP.\n\nkelseyhightower/envconfig - Go library for managing configuration data from environment variables.\n\nkoanf - Light weight, extensible library for reading config in Go applications. Built in support for JSON, TOML, YAML, env, command line.\n\nkonf - The simplest API for reading/watching config from file, env, flag and clouds (e.g. AWS, Azure, GCP).\n\nkonfig - Composable, observable and performant config handling for Go for the distributed processing era.\n\nkong - Command-line parser with support for arbitrarily complex command-line structures and additional sources of configuration such as YAML, JSON, TOML, etc (successor to kingpin).\n\nmini - Golang package for parsing ini-style configuration files.\n\nnasermirzaei89/env - Simple useful package for read environment variables.\n\nnfigure - Per-library struct-tag based configuration from command lines (Posix & Go-style); environment, JSON, YAML\n\nonion - Layer based configuration for Go, Supports JSON, TOML, YAML, properties, etcd, env, and encryption using PGP.\n\npiper - Viper wrapper with config inheritance and key generation.\n\nsonic - A blazingly fast JSON serializing & deserializing library.\n\nstore - Lightweight configuration manager for Go.\n\nswap - Instantiate/configure structs recursively, based on build environment. (YAML, TOML, JSON and env).\n\ntypenv - Minimalistic, zero dependency, typed environment variables library.\n\nuConfig - Lightweight, zero-dependency, and extendable configuration management.\n\nviper - Go configuration with fangs.\n\nxdg - Go implementation of the XDG Base Directory Specification and XDG user directories.\n\nxdg - Cross platform package that follows the XDG Standard.\n\nyamagiconf - The \"safe subset\" of YAML for Go configs.\n\n⬆ back to top\n\nContinuous Integration\n\nTools for help with continuous integration.\n\nBencher - A suite of continuous benchmarking tools designed to catch performance regressions in CI.\n\nCDS - Enterprise-Grade CI/CD and DevOps Automation Open Source Platform.\n\ndot - A minimal, local first continuous integration system that uses Docker to run jobs concurrently in stages.\n\ndrone - Drone is a Continuous Integration platform built on Docker, written in Go.\n\ngo-beautiful-html-coverage - A GitHub Action to track code coverage in your pull requests, with a beautiful HTML preview, for free.\n\ngo-fuzz-action - Use Go 1.18's built-in fuzz testing in GitHub Actions.\n\ngo-semver-release - Automate the semantic versioning of Git repositories.\n\ngo-test-coverage - Tool and GitHub action which reports issues when test coverage is below set threshold.\n\ngomason - Test, Build, Sign, and Publish your go binaries from a clean workspace.\n\ngotestfmt - go test output for humans.\n\ngoveralls - Go integration for Coveralls.io continuous code coverage tracking system.\n\noveralls - Multi-Package go project coverprofile for tools like goveralls.\n\nroveralls - Recursive coverage testing tool.\n\nwoodpecker - Woodpecker is a community fork of the Drone CI system.\n\n⬆ back to top\n\nCSS Preprocessors\n\nLibraries for preprocessing CSS files.\n\ngcss - Pure Go CSS Preprocessor.\n\ngo-libsass - Go wrapper to the 100% Sass compatible libsass project.\n\n⬆ back to top\n\nData Integration Frameworks\n\nFrameworks for performing ELT / ETL\n\nBenthos - A message streaming bridge between a range of protocols.\n\nCloudQuery - A high-performance ELT data integration framework with pluggable architecture.\n\nomniparser - A versatile ETL library that parses text input (CSV/txt/JSON/XML/EDI/X12/EDIFACT/etc) in streaming fashion and transforms data into JSON output using data-driven schema.\n\n⬆ back to top\n\nData Structures and Algorithms\n\nBit-packing and Compression\n\nbingo - Fast, zero-allocation, lexicographical-order-preserving packing of native types to bytes.\n\nbinpacker - Binary packer and unpacker helps user build custom binary stream.\n\nbit - Golang set data structure with bonus bit-twiddling functions.\n\ncrunch - Go package implementing buffers for handling various datatypes easily.\n\ngo-ef - A Go implementation of the Elias-Fano encoding.\n\nroaring - Go package implementing compressed bitsets.\n\nBit Sets\n\nbitmap - Dense, zero-allocation, SIMD-enabled bitmap/bitset in Go.\n\nbitset - Go package implementing bitsets.\n\nBloom and Cuckoo Filters\n\nbloom - Go package implementing Bloom filters.\n\nbloom - Bloom filters implemented in Go.\n\nbloom - Golang Bloom filter implementation.\n\nbloomfilter - Yet another Bloomfilter implementation in Go, compatible with Java's Guava library.\n\nboomfilters - Probabilistic data structures for processing continuous, unbounded streams.\n\ncuckoo-filter - Cuckoo filter: a comprehensive cuckoo filter, which is configurable and space optimized compared with other implements, and all features mentioned in original paper are available.\n\ncuckoofilter - Cuckoo filter: a good alternative to a counting bloom filter implemented in Go.\n\nring - Go implementation of a high performance, thread safe bloom filter.\n\nData Structure and Algorithm Collections\n\nalgorithms - Algorithms and data structures.CLRS study.\n\ngo-datastructures - Collection of useful, performant, and thread-safe data structures.\n\ngods - Go Data Structures. Containers, Sets, Lists, Stacks, Maps, BidiMaps, Trees, HashSet etc.\n\ngostl - Data structure and algorithm library for go, designed to provide functions similar to C++ STL.\n\ngoterator - Iterator implementation to provide map and reduce functionalities.\n\niter - Go implementation of C++ STL iterators and algorithms.\n\nSee also Database for more complex key-value stores, and Trees for additional ordered map implementations.\n\ncmap - a thread-safe concurrent map for go, support using interface{} as key and auto scale up shards.\n\ndict - Python-like dictionaries (dict) for Go.\n\ngoradd/maps - Go 1.18+ generic map interface for maps; safe maps; ordered maps; ordered, safe maps; etc.\n\nMiscellaneous Data Structures and Algorithms\n\nconcurrent-writer - Highly concurrent drop-in replacement for bufio.Writer.\n\nconjungo - A small, powerful and flexible merge library.\n\ncount-min-log - Go implementation Count-Min-Log sketch: Approximately counting with approximate counters (Like Count-Min sketch but using less memory).\n\nfsm - Finite-State Machine package.\n\ngenfuncs - Go 1.18+ generics package inspired by Kotlin's Sequence and Map.\n\ngo-generics - Generic slice, map, set, iterator, and goroutine utilities.\n\ngo-geoindex - In-memory geo index.\n\ngo-rampart - Determine how intervals relate to each other.\n\ngo-rquad - Region quadtrees with efficient point location and neighbour finding.\n\ngo-tuple - Generic tuple implementation for Go 1.18+.\n\ngo18ds - Go Data Structures using Go 1.18 generics.\n\ngofal - fractional api for Go.\n\ngogu - A comprehensive, reusable and efficient concurrent-safe generics utility functions and data structures library.\n\ngota - Implementation of dataframes, series, and data wrangling methods for Go.\n\nhide - ID type with marshalling to/from hash to prevent sending IDs to clients.\n\nhilbert - Go package for mapping values to and from space-filling curves, such as Hilbert and Peano curves.\n\nhyperloglog - HyperLogLog implementation with Sparse, LogLog-Beta bias correction and TailCut space reduction.\n\nplinko - A finite state machine and workflow orchestrator that compiles for fast execution, easy debugging, auto-generated documentation. Includes advanced features such as side-effect hooks.\n\nquadtree - Generic, zero-alloc, 100%-test covered quadtree.\n\nslices - Functions that operate on slices; like package strings but adapted to work with slices.\n\nslices - Pure, generic functions for slices.\n\nNullable Types\n\nnan - Zero allocation Nullable structures in one library with handy conversion functions, marshallers and unmarshallers.\n\nnull - Nullable Go types that can be marshalled/unmarshalled to/from JSON.\n\ntyp - Null Types, Safe primitive type conversion and fetching value from complex structures.\n\ndeque - A highly optimized double-ended queue.\n\ndeque - Fast ring-buffer deque (double-ended queue).\n\ngoconcurrentqueue - Concurrent FIFO queue.\n\nmemlog - An easy to use, lightweight, thread-safe and append-only in-memory data structure inspired by Apache Kafka.\n\nqueue - Multiple thread-safe, generic queue implementations for Go.\n\ndsu - Disjoint Set data structure implementation in Go.\n\ngolang-set - Thread-Safe and Non-Thread-Safe high-performance sets for Go.\n\ngoset - A useful Set collection implementation for Go.\n\nset - Simple set data structure implementation in Go using LinkedHashMap.\n\nText Analysis\n\nbleve - Modern text indexing library for go.\n\ngo-adaptive-radix-tree - Go implementation of Adaptive Radix Tree.\n\ngo-edlib - Go string comparison and edit distance algorithms library (Levenshtein, LCS, Hamming, Damerau levenshtein, Jaro-Winkler, etc.) compatible with Unicode.\n\nlevenshtein - Levenshtein distance and similarity metrics with customizable edit costs and Winkler-like bonus for common prefix.\n\nlevenshtein - Implementation to calculate levenshtein distance in Go.\n\nmspm - Multi-String Pattern Matching Algorithm for information retrieval.\n\nparsefields - Tools for parse JSON-like logs for collecting unique fields and events.\n\nptrie - An implementation of prefix tree.\n\ntrie - Trie implementation in Go.\n\nhashsplit - Split byte streams into chunks, and arrange chunks into trees, with boundaries determined by content, not position.\n\nmerkle - Space-efficient computation of Merkle root hashes and inclusion proofs.\n\nskiplist - Very fast Go Skiplist implementation.\n\nskiplist - Skiplist implementation in Go.\n\ntreap - Persistent, fast ordered map using tree heaps.\n\ntreemap - Generic key-sorted map using a red-black tree under the hood.\n\nordered-concurrently - Go module that processes work concurrently and returns output in a channel in the order of input.\n\nparapipe - FIFO Pipeline which parallels execution on each stage while maintaining the order of messages and results.\n\npipeline - An implementation of pipelines with fan-in and fan-out.\n\n⬆ back to top\n\nData stores with expiring records, in-memory distributed data stores, or in-memory subsets of file-based databases.\n\n2q - 2Q in-memory cache implementation.\n\nbcache - Eventually consistent distributed in-memory cache Go library.\n\nBigCache - Efficient key/value cache for gigabytes of data.\n\ncache - In-memory key:value store with expiration time, 0 dependencies, <100 LoC, 100% coverage.\n\ncache2go - In-memory key:value cache which supports automatic invalidation based on timeouts.\n\ncachego - Golang Cache component for multiple drivers.\n\nclusteredBigCache - BigCache with clustering support and individual item expiration.\n\ncoherence-go-client - Full implementation of Oracle Coherence cache API for Go applications using gRPC as network transport.\n\ncouchcache - RESTful caching micro-service backed by Couchbase server.\n\nEchoVault - Embeddable Distributed in-memory data store compatible with Redis clients.\n\nfastcache - fast thread-safe inmemory cache for big number of entries. Minimizes GC overhead.\n\nGCache - Cache library with support for expirable Cache, LFU, LRU and ARC.\n\ngdcache - A pure non-intrusive cache library implemented by golang, you can use it to implement your own distributed cache.\n\ngo-cache - A flexible multi-layer Go caching library to deal with in-memory and shared cache by adopting Cache-Aside pattern.\n\ngo-freelru A GC-less, fast and generic LRU hashmap library with optional locking, sharding, eviction and expiration.\n\ngo-mcache - Fast in-memory key:value store/cache library. Pointer caches.\n\ngocache - A complete Go cache library with multiple stores (memory, memcache, redis, ...), chainable, loadable, metrics cache and more.\n\ngocache - A data race free Go ache library with high performance and auto pruge functionality\n\ngroupcache - Groupcache is a caching and cache-filling library, intended as a replacement for memcached in many cases.\n\nicache - A High Performance, Generic, thread-safe, zero-dependency cache package.\n\nimcache - A generic in-memory cache Go library. It supports expiration, sliding expiration, max entries limit, eviction callbacks and sharding.\n\nnscache - A Go caching framework that supports multiple data source drivers.\n\notter - A high performance lockless cache for Go. Many times faster than Ristretto and friends.\n\nremember-go - A universal interface for caching slow database queries (backed by redis, memcached, ristretto, or in-memory).\n\nsturdyc - A caching library with advanced concurrency features designed to make I/O heavy applications robust and highly performant.\n\ntheine - High performance, near optimal in-memory cache with proactive TTL expiration and generics.\n\ntimedmap - Map with expiring key-value pairs.\n\nttlcache - An in-memory cache with item expiration and generics.\n\nttlcache - In-memory key value storage with TTL for each record.\n\nDatabases Implemented in Go\n\nbadger - Fast key-value store in Go.\n\nbbolt - An embedded key/value database for Go.\n\nBitcask - Bitcask is an embeddable, persistent and fast key-value (KV) database written in pure Go with predictable read/write performance, low latency and high throughput thanks to the bitcask on-disk layout (LSM+WAL).\n\nbuntdb - Fast, embeddable, in-memory key/value database for Go with custom indexing and spatial support.\n\nclover - A lightweight document-oriented NoSQL database written in pure Golang.\n\ncockroach - Scalable, Geo-Replicated, Transactional Datastore.\n\nCoffer - Simple ACID key-value database that supports transactions.\n\ncolumn - High-performance, columnar, embeddable in-memory store with bitmap indexing and transactions.\n\nCovenantSQL - CovenantSQL is a SQL database on blockchain.\n\nDatabunker - Personally identifiable information (PII) storage service built to comply with GDPR and CCPA.\n\ndgraph - Scalable, Distributed, Low Latency, High Throughput Graph Database.\n\ndiskv - Home-grown disk-backed key-value store.\n\ndolt - Dolt – It's Git for Data.\n\ndtf - A distributed transaction manager. Support XA, TCC, SAGA, Reliable Messages.\n\neliasdb - Dependency-free, transactional graph database with REST API, phrase search and SQL-like query language.\n\ngodis - A Golang implemented high-performance Redis server and cluster.\n\ngoleveldb - Implementation of the LevelDB key/value database in Go.\n\nhare - A simple database management system that stores each table as a text file of line-delimited JSON.\n\nimmudb - immudb is a lightweight, high-speed immutable database for systems and applications written in Go.\n\ninfluxdb - Scalable datastore for metrics, events, and real-time analytics.\n\nledisdb - Ledisdb is a high performance NoSQL like Redis based on LevelDB.\n\nlevigo - Levigo is a Go wrapper for LevelDB.\n\nlibradb - LibraDB is a simple database with less than 1000 lines of code for learning.\n\nLinDB - LinDB is a scalable, high performance, high availability distributed time series database.\n\nlotusdb - Fast k/v database compatible with lsm and b+tree.\n\nMilvus - Milvus is a vector database for embedding management, analytics and search.\n\nmoss - Moss is a simple LSM key-value storage engine written in 100% Go.\n\nnutsdb - Nutsdb is a simple, fast, embeddable, persistent key/value store written in pure Go. It supports fully serializable transactions and many data structures such as list, set, sorted set.\n\nobjectbox-go - High-performance embedded Object Database (NoSQL) with Go API.\n\npebble - RocksDB/LevelDB inspired key-value database in Go.\n\npiladb - Lightweight RESTful database engine based on stack data structures.\n\npogreb - Embedded key-value store for read-heavy workloads.\n\nprometheus - Monitoring system and time series database.\n\npudge - Fast and simple key/value store written using Go's standard library.\n\nregatta - Fast, simple, geo-distributed KV store built for cloud native era.\n\nrosedb - An embedded k-v database based on LSM+WAL, supports string, list, hash, set, zset.\n\nrotom - A tiny Redis server built with Golang, compatible with RESP protocols.\n\nrqlite - The lightweight, distributed, relational database built on SQLite.\n\ntempdb - Key-value store for temporary items.\n\ntidb - TiDB is a distributed SQL database. Inspired by the design of Google F1.\n\ntiedot - Your NoSQL database powered by Golang.\n\nunitdb - Fast timeseries database for IoT, realtime messaging applications. Access unitdb with pubsub over tcp or websocket using github.com/unit-io/unitd application.\n\nVasto - A distributed high-performance key-value store. On Disk. Eventual consistent. HA. Able to grow or shrink without service interruption.\n\nVictoriaMetrics - fast, resource-effective and scalable open source time series database. May be used as long-term remote storage for Prometheus. Supports PromQL.\n\nDatabase Schema Migration\n\natlas - A Database Toolkit. A CLI designed to help companies better work with their data.\n\navro - Discover SQL schemas and convert them to AVRO schemas. Query SQL records into AVRO bytes.\n\nbytebase - Safe database schema change and version control for DevOps teams.\n\ndarwin - Database schema evolution library for Go.\n\ndbmate - A lightweight, framework-agnostic database migration tool.\n\ngo-fixtures - Django style fixtures for Golang's excellent built-in database/sql library.\n\ngo-pg-migrate - CLI-friendly package for go-pg migrations management.\n\ngo-pg-migrations - A Go package to help write migrations with go-pg/pg.\n\ngoavro - A Go package that encodes and decodes Avro data.\n\ngodfish - Database migration manager, works with native query language. Support for cassandra, mysql, postgres, sqlite3.\n\ngoose - Database migration tool. You can manage your database's evolution by creating incremental SQL or Go scripts.\n\ngorm-seeder - Simple database seeder for Gorm ORM.\n\ngormigrate - Database schema migration helper for Gorm ORM.\n\nlibschema - Define your migrations separately in each library. Migrations for open source libraries. MySQL & PostgreSQL.\n\nmigrate - Database migrations. CLI and Golang library.\n\nmigrator - Dead simple Go database migration library.\n\nmigrator - MySQL database migrator designed to run migrations to your features and manage database schema update with intuitive go code.\n\nschema - Library to embed schema migrations for database/sql-compatible databases inside your Go binaries.\n\nskeema - Pure-SQL schema management system for MySQL, with support for sharding and external online schema change tools.\n\nsoda - Database migration, creation, ORM, etc... for MySQL, PostgreSQL, and SQLite.\n\nsql-migrate - Database migration tool. Allows embedding migrations into the application using go-bindata.\n\nsqlize - Database migration generator. Allows generate sql migration from model and existing sql by differ them.\n\nDatabase Tools\n\nchproxy - HTTP proxy for ClickHouse database.\n\nclickhouse-bulk - Collects small inserts and sends big requests to ClickHouse servers.\n\ndbbench - Database benchmarking tool with support for several databases and scripts.\n\ndg - A fast data generator that produces CSV files from generated relational data.\n\ndynago - Simplify working with AWS DynamoDB.\n\ngo-mysql - Go toolset to handle MySQL protocol and replication.\n\ngorm-multitenancy - Multi-tenancy support for GORM managed databases.\n\nhasql - Library for accessing multi-host SQL database installations.\n\noctillery - Go package for sharding databases ( Supports every ORM or raw SQL ).\n\nonedump - Database backup from different drivers to different destinations with one command and configuration.\n\npg_timetable - Advanced scheduling for PostgreSQL.\n\npgweb - Web-based PostgreSQL database browser.\n\nprep - Use prepared SQL statements without changing your code.\n\npREST - Simplify and accelerate development, ⚡ instant, realtime, high-performance on any Postgres application, existing or new.\n\nrdb - Redis RDB file parser for secondary development and memory analysis.\n\nrwdb - rwdb provides read replica capability for multiple database servers setup.\n\nvitess - vitess provides servers and tools which facilitate scaling of MySQL databases for large scale web services.\n\nwescale - WeScale is a database proxy designed to enhance the scalability, performance, security, and resilience of your applications.\n\nSQL Query Builders\n\nLibraries for building and using SQL.\n\nbqb - Lightweight and easy to learn query builder.\n\nbuildsqlx - Go database query builder library for PostgreSQL.\n\nbuilq - Easily build SQL queries in Go.\n\ndbq - Zero boilerplate database operations for Go.\n\nDotsql - Go library that helps you keep sql files in one place and use them with ease.\n\ngendry - Non-invasive SQL builder and powerful data binder.\n\ngodbal - Database Abstraction Layer (dbal) for go. Support SQL builder and get result easily.\n\ngoqu - Idiomatic SQL builder and query library.\n\ngosql - SQL Query builder with better null values support.\n\nHotcoal - Secure your handcrafted SQL against injection.\n\nigor - Abstraction layer for PostgreSQL that supports advanced functionality and uses gorm-like syntax.\n\njet - Framework for writing type-safe SQL queries in Go, with ability to easily convert database query result into desired arbitrary object structure.\n\normlite - Lightweight package containing some ORM-like features and helpers for sqlite databases.\n\nozzo-dbx - Powerful data retrieval methods as well as DB-agnostic query building capabilities.\n\nqry - Tool that generates constants from files with raw SQL queries.\n\nsg - A SQL Gen for generating standard SQLs(supports: CRUD) written in Go.\n\nsq - Type-safe SQL builder and struct mapper for Go.\n\nsqlc - Generate type-safe code from SQL.\n\nsqlf - Fast SQL query builder.\n\nsqlingo - A lightweight DSL to build SQL in Go.\n\nsqrl - SQL query builder, fork of Squirrel with improved performance.\n\nSqualus - Thin layer over the Go SQL package that makes it easier to perform queries.\n\nSquirrel - Go library that helps you build SQL queries.\n\nxo - Generate idiomatic Go code for databases based on existing schema definitions or custom queries supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server.\n\n⬆ back to top\n\nDatabase Drivers\n\nInterfaces to Multiple Backends\n\ncayley - Graph database with support for multiple backends.\n\ndsc - Datastore connectivity for SQL, NoSQL, structured files.\n\ndynamo - A simple key-value abstraction to store algebraic and linked-data data types at AWS storage services: AWS DynamoDB and AWS S3.\n\ngo-transaction-manager - Transaction manager with multiple adapters (sql, sqlx, gorm, mongo, ...) controls transaction boundaries.\n\ngokv - Simple key-value store abstraction and implementations for Go (Redis, Consul, etcd, bbolt, BadgerDB, LevelDB, Memcached, DynamoDB, S3, PostgreSQL, MongoDB, CockroachDB and many more).\n\nRelational Database Drivers\n\navatica - Apache Avatica/Phoenix SQL driver for database/sql.\n\nbgc - Datastore Connectivity for BigQuery for go.\n\nfirebirdsql - Firebird RDBMS SQL driver for Go.\n\ngo-adodb - Microsoft ActiveX Object DataBase driver for go that uses database/sql.\n\ngo-mssqldb - Microsoft MSSQL driver for Go.\n\ngo-oci8 - Oracle driver for go that uses database/sql.\n\ngo-sql-driver/mysql - MySQL driver for Go.\n\ngo-sqlite3 - SQLite3 driver for go that uses database/sql.\n\ngodror - Oracle driver for Go, using the ODPI-C driver.\n\ngofreetds - Microsoft MSSQL driver. Go wrapper over FreeTDS.\n\nKSQL - A Simple and Powerful Golang SQL Library\n\npgx - PostgreSQL driver supporting features beyond those exposed by database/sql.\n\npig - Simple pgx wrapper to execute and scan query results easily.\n\npq - Pure Go Postgres driver for database/sql.\n\nSqinn-Go - SQLite with pure Go.\n\nsqlhooks - Attach hooks to any database/sql driver.\n\nsurrealdb.go - SurrealDB Driver for Go.\n\nydb-go-sdk - native and database/sql driver YDB (Yandex Database)\n\nNoSQL Database Drivers\n\naerospike-client-go - Aerospike client in Go language.\n\narangolite - Lightweight golang driver for ArangoDB.\n\nasc - Datastore Connectivity for Aerospike for go.\n\nforestdb - Go bindings for ForestDB.\n\ngo-couchbase - Couchbase client in Go.\n\ngo-mongox - A Go Mongo library based on the official driver, featuring streamlined document operations, generic binding of structs to collections, built-in CRUD, aggregation, automated field updates, struct validation, hooks, and plugin-based programming.\n\ngo-pilosa - Go client library for Pilosa.\n\ngo-rejson - Golang client for redislabs' ReJSON module using Redigo golang client. Store and manipulate structs as JSON objects in redis with ease.\n\ngocb - Official Couchbase Go SDK.\n\ngocosmos - REST client and standard database/sql driver for Azure Cosmos DB.\n\ngocql - Go language driver for Apache Cassandra.\n\ngodis - redis client implement by golang, inspired by jedis.\n\ngodscache - A wrapper for the Google Cloud Platform Go Datastore package that adds caching using memcached.\n\ngomemcache - memcache client library for the Go programming language.\n\ngomemcached - A binary Memcached client for Go with support for sharding using consistent hashing, along with SASL.\n\ngorethink - Go language driver for RethinkDB.\n\ngoriak - Go language driver for Riak KV.\n\nKivik - Kivik provides a common Go and GopherJS client library for CouchDB, PouchDB, and similar databases.\n\nmgm - MongoDB model-based ODM for Go (based on official MongoDB driver).\n\nmgo - (unmaintained) MongoDB driver for the Go language that implements a rich and well tested selection of features under a very simple API following standard Go idioms.\n\nmongo-go-driver - Official MongoDB driver for the Go language.\n\nneo4j - Neo4j Rest API Bindings for Golang.\n\nNeo4j-GO - Neo4j REST Client in golang.\n\nneoism - Neo4j client for Golang.\n\nqmgo - The MongoDB driver for Go. It‘s based on official MongoDB driver but easier to use like Mgo.\n\nredeo - Redis-protocol compatible TCP servers/services.\n\nredigo - Redigo is a Go client for the Redis database.\n\nredis - Redis client for Golang.\n\nrueidis - Fast Redis RESP3 client with auto pipelining and server-assisted client side caching.\n\nxredis - Typesafe, customizable, clean & easy to use Redis client.\n\nSearch and Analytic Databases\n\nclickhouse-go - ClickHouse SQL client for Go with a database/sql compatibility.\n\nelastic - Elasticsearch client for Go.\n\nelasticsql - Convert sql to elasticsearch dsl in Go.\n\nelastigo - Elasticsearch client library.\n\ngo-elasticsearch - Official Elasticsearch client for Go.\n\ngoes - Library to interact with Elasticsearch.\n\nskizze - probabilistic data-structures service and storage.\n\n⬆ back to top\n\nDate and Time\n\nLibraries for working with dates and times.\n\napprox - A Duration extension supporting parsing/printing durations in days, weeks and years.\n\ncarbon - A simple, semantic and developer-friendly golang package for datetime.\n\ncarbon - Simple Time extension with a lot of util methods, ported from PHP Carbon library.\n\ncronrange - Parses Cron-style time range expressions, checks if the given time is within any ranges.\n\ndate - Augments Time for working with dates, date ranges, time spans, periods, and time-of-day.\n\ndateparse - Parse date's without knowing format in advance.\n\ndurafmt - Time duration formatting library for Go.\n\nfeiertage - Set of functions to calculate public holidays in Germany, incl. specialization on the states of Germany (Bundesländer). Things like Easter, Pentecost, Thanksgiving...\n\ngo-anytime - Parse dates/times like \"next dec 22nd at 3pm\" and ranges like \"from today until next thursday\" without knowing the format in advance.\n\ngo-datebin - A simple datetime parse pkg.\n\ngo-persian-calendar - The implementation of the Persian (Solar Hijri) Calendar in Go (golang).\n\ngo-str2duration - Convert string to duration. Support time.Duration returned string and more.\n\ngo-sunrise - Calculate the sunrise and sunset times for a given location.\n\ngo-week - An efficient package to work with ISO8601 week dates.\n\ngostradamus - A Go package for working with dates.\n\niso8601 - Efficiently parse ISO8601 date-times without regex.\n\nkair - Date and Time - Golang Formatting Library.\n\nnow - Now is a time toolkit for golang.\n\nNullTime - Nullable time.Time.\n\nstrftime - C99-compatible strftime formatter.\n\ntimespan - For interacting with intervals of time, defined as a start time and a duration.\n\ntimeutil - Useful extensions (Timedelta, Strftime, ...) to the golang's time package.\n\ntuesday - Ruby-compatible Strftime function.\n\n⬆ back to top\n\nDistributed Systems\n\nPackages that help with building Distributed Systems.\n\narpc - More effective network communication, support two-way-calling, notify, broadcast.\n\nbedrock - Provides a minimal, modular and composable foundation for quickly developing services and more use case specific frameworks in Go.\n\ncapillaries - distributed batch data processing framework.\n\nceleriac - Library for adding support for interacting and monitoring Celery workers, tasks and events in Go.\n\nconsistent - Consistent hashing with bounded loads.\n\nconsistenthash - Consistent hashing with configurable replicas.\n\ndht - BitTorrent Kademlia DHT implementation.\n\ndigota - grpc ecommerce microservice.\n\ndot - distributed sync using operational transformation/OT.\n\ndoublejump - A revamped Google's jump consistent hash.\n\ndragonboat - A feature complete and high performance multi-group Raft library in Go.\n\nDragonfly - Provide efficient, stable and secure file distribution and image acceleration based on p2p technology to be the best practice and standard solution in cloud native architectures.\n\ndrmaa - Job submission library for cluster schedulers based on the DRMAA standard.\n\ndynamolock - DynamoDB-backed distributed locking implementation.\n\ndynatomic - A library for using DynamoDB as an atomic counter.\n\nemitter-io - High performance, distributed, secure and low latency publish-subscribe platform built with MQTT, Websockets and love.\n\nevans - Evans: more expressive universal gRPC client.\n\nfailured - adaptive accrual failure detector for distributed systems.\n\nflowgraph - flow-based programming package.\n\ngleam - Fast and scalable distributed map/reduce system written in pure Go and Luajit, combining Go's high concurrency with Luajit's high performance, runs standalone or distributed.\n\nglow - Easy-to-Use scalable distributed big data processing, Map-Reduce, DAG execution, all in pure Go.\n\ngmsec - A Go distributed systems development framework.\n\ngo-doudou - A gossip protocol and OpenAPI 3.0 spec based decentralized microservice framework. Built-in go-doudou cli focusing on low-code and rapid dev can power up your productivity.\n\ngo-health - Library for enabling asynchronous dependency health checks in your service.\n\ngo-jump - Port of Google's \"Jump\" Consistent Hash function.\n\ngo-kit - Microservice toolkit with support for service discovery, load balancing, pluggable transports, request tracking, etc.\n\ngo-micro - A distributed systems development framework.\n\ngo-mysql-lock - MySQL based distributed lock.\n\ngo-pdu - A decentralized identity-based social network.\n\ngo-sundheit - A library built to provide support for defining async service health checks for golang services.\n\ngo-zero - A web and rpc framework. It's born to ensure the stability of the busy sites with resilient design. Builtin goctl greatly improves the development productivity.\n\ngorpc - Simple, fast and scalable RPC library for high load.\n\ngrpc-go - The Go language implementation of gRPC. HTTP/2 based RPC.\n\nhprose - Very newbility RPC Library, support 25+ languages now.\n\njsonrpc - The jsonrpc package helps implement of JSON-RPC 2.0.\n\njsonrpc - JSON-RPC 2.0 HTTP client implementation.\n\nKitex - A high-performance and strong-extensibility Golang RPC framework that helps developers build microservices. If the performance and extensibility are the main concerns when you develop microservices, Kitex can be a good choice.\n\nKratos - A modular-designed and easy-to-use microservices framework in Go.\n\nliftbridge - Lightweight, fault-tolerant message streams for NATS.\n\nlura - Ultra performant API Gateway framework with middlewares.\n\nmicro - A distributed systems runtime for the cloud and beyond.\n\nmochi mqtt - Fully spec compliant, embeddable high-performance MQTT v5/v3 broker for IoT, smarthome, and pubsub.\n\nNATS - Lightweight, high performance messaging system for microservices, IoT, and cloud native systems.\n\noutboxer - Outboxer is a go library that implements the outbox pattern.\n\npglock - PostgreSQL-backed distributed locking implementation.\n\npjrpc - Golang JSON-RPC Server-Client with Protobuf spec.\n\nraft - Golang implementation of the Raft consensus protocol, by HashiCorp.\n\nraft - Go implementation of the Raft consensus protocol, by CoreOS.\n\nrain - BitTorrent client and library.\n\nredis-lock - Simplified distributed locking implementation using Redis.\n\nresgate - Realtime API Gateway for building REST, real time, and RPC APIs, where all clients are synchronized seamlessly.\n\nringpop-go - Scalable, fault-tolerant application-layer sharding for Go applications.\n\nrpcx - Distributed pluggable RPC service framework like alibaba Dubbo.\n\nSemaphore - A straightforward (micro) service orchestrator.\n\nsleuth - Library for master-less p2p auto-discovery and RPC between HTTP services (using ZeroMQ).\n\nsponge - A distributed development framework that integrates automatic code generation, gin and grpc frameworks, base development frameworks.\n\nTarmac - Framework for writing functions, microservices, or monoliths with WebAssembly\n\nTemporal - Durable execution system for making code fault-tolerant and simple.\n\ntorrent - BitTorrent client package.\n\ntrpc-go - The Go language implementation of tRPC, which is a pluggable, high-performance RPC framework.\n\n⬆ back to top\n\nDynamic DNS\n\nTools for updating dynamic DNS records.\n\nDDNS - Personal DDNS client with Digital Ocean Networking DNS as backend.\n\ndyndns - Background Go process to regularly and automatically check your IP Address and make updates to (one or many) Dynamic DNS records for Google domains whenever your address changes.\n\nGoDNS - A dynamic DNS client tool, supports DNSPod & HE.net, written in Go.\n\n⬆ back to top\n\nLibraries and tools that implement email creation and sending.\n\nchasquid - SMTP server written in Go.\n\ndouceur - CSS inliner for your HTML emails.\n\nemail - A robust and flexible email library for Go.\n\nemail-verifier - A Go library for email verification without sending any emails.\n\ngo-dkim - DKIM library, to sign & verify email.\n\ngo-email-normalizer - Golang library for providing a canonical representation of email address.\n\ngo-email-validator - Modular email validator for syntax, disposable, smtp, etc... checking.\n\ngo-imap - IMAP library for clients and servers.\n\ngo-mail - A simple Go library for sending mails in Go.\n\ngo-message - Streaming library for the Internet Message Format and mail messages.\n\ngo-premailer - Inline styling for HTML mail in Go.\n\ngo-simple-mail - Very simple package to send emails with SMTP Keep Alive and two timeouts: Connect and Send.\n\nHectane - Lightweight SMTP client providing an HTTP API.\n\nhermes - Golang package that generates clean, responsive HTML e-mails.\n\nMaddy - All-in-one (SMTP, IMAP, DKIM, DMARC, MTA-STS, DANE) email server\n\nmailchain - Send encrypted emails to blockchain addresses written in Go.\n\nmailgun-go - Go library for sending mail with the Mailgun API.\n\nMailHog - Email and SMTP testing with web and API interface.\n\nMailpit - Email and SMTP testing tool for developers.\n\nmailx - Mailx is a library that makes it easier to send email via SMTP. It is an enhancement of the golang standard library net/smtp.\n\nSendGrid - SendGrid's Go library for sending email.\n\nsmtp - SMTP server protocol state machine.\n\nsmtpmock - Lightweight configurable multithreaded fake SMTP server. Mimic any SMTP behaviour for your test environment.\n\ntruemail-go - Configurable Golang email validator/verifier. Verify email via Regex, DNS, SMTP and even more.\n\n⬆ back to top\n\nEmbeddable Scripting Languages\n\nEmbedding other languages inside your go code.\n\nanko - Scriptable interpreter written in Go.\n\nbinder - Go to Lua binding library, based on gopher-lua.\n\ncel-go - Fast, portable, non-Turing complete expression evaluation with gradual typing.\n\necal - A simple embeddable scripting language which supports concurrent event processing.\n\nexpr - Expression evaluation engine for Go: fast, non-Turing complete, dynamic typing, static typing.\n\ngentee - Embeddable scripting programming language.\n\ngisp - Simple LISP in Go.\n\ngo-duktape - Duktape JavaScript engine bindings for Go.\n\ngo-lua - Port of the Lua 5.2 VM to pure Go.\n\ngo-php - PHP bindings for Go.\n\ngo-python - naive go bindings to the CPython C-API.\n\ngoal - An embeddable scripting array language.\n\ngoja - ECMAScript 5.1(+) implementation in Go.\n\ngolua - Go bindings for Lua C API.\n\ngopher-lua - Lua 5.1 VM and compiler written in Go.\n\ngval - A highly customizable expression language written in Go.\n\nmetacall - Cross-platform Polyglot Runtime which supports NodeJS, JavaScript, TypeScript, Python, Ruby, C#, WebAssembly, Java, Cobol and more.\n\nngaro - Embeddable Ngaro VM implementation enabling scripting in Retro.\n\nprolog - Embeddable Prolog.\n\npurl - Perl 5.18.2 embedded in Go.\n\nstarlark-go - Go implementation of Starlark: Python-like language with deterministic evaluation and hermetic execution.\n\nstarlet - Go wrapper for starlark-go that simplifies script execution, offers data conversion, and useful Starlark libraries and extensions.\n\ntengo - Bytecode compiled script language for Go.\n\nWa/凹语言 - The Wa Programming Language embedded in Go.\n\n⬆ back to top\n\nError Handling\n\nLibraries for handling errors.\n\nemperror - Error handling tools and best practices for Go libraries and applications.\n\neris - A better way to handle, trace, and log errors in Go. Compatible with the standard error library and github.com/pkg/errors.\n\nerrlog - Hackable package that determines responsible source code for an error (and some other fast-debugging features). Pluggable to any logger in-place.\n\nerrors - Drop-in replacement for the standard library errors package and github.com/pkg/errors. Provides various error handling primitives.\n\nerrors - Simple golang error handling with classification primitives.\n\nerrors - The most simple error wrapper with awesome performance and minimal memory overhead.\n\nerrors - Providing errors with a stack trace and optional structured details. Compatible with github.com/pkg/errors API but does not use it internally.\n\nerrors - Drop-in replacement for builtin Go errors. This is a minimal error handling package with custom error types, user friendly messages, Unwrap & Is. With very easy to use and straightforward helper functions.\n\nerrors - Go error library with error portability over the network.\n\nerrorx - A feature rich error package with stack traces, composition of errors and more.\n\nexception - A simple utility package for exception handling with try-catch in Golang.\n\nFalcon - A Simple Yet Highly Powerful Package For Error Handling.\n\nFault - An ergonomic mechanism for wrapping errors in order to facilitate structured metadata and context for error values.\n\ngo-multierror - Go (golang) package for representing a list of errors as a single error.\n\noops - Error handling with context, stack trace and source fragments.\n\ntracerr - Golang errors with stack trace and source fragments.\n\n⬆ back to top\n\nFile Handling\n\nLibraries for handling files and file systems.\n\nafero - FileSystem Abstraction System for Go.\n\nafs - Abstract File Storage (mem, scp, zip, tar, cloud: s3, gs) for Go.\n\nbaraka - A library to process http file uploads easily.\n\nbigfile - A file transfer system, support to manage files with http api, rpc call and ftp client.\n\nchecksum - Compute message digest, like MD5, SHA256, SHA1, CRC or BLAKE2s, for large files.\n\ncopy - Copy directory recursively.\n\nflop - File operations library which aims to mirror feature parity with GNU cp.\n\ngdu - Disk usage analyzer with console interface.\n\ngo-csv-tag - Load csv file using tag.\n\ngo-decent-copy - Copy files for humans.\n\ngo-exiftool - Go bindings for ExifTool, the well-known library used to extract as much metadata as possible (EXIF, IPTC, ...) from files (pictures, PDF, office, ...).\n\ngo-gtfs - Load gtfs files in go.\n\ngofs - A cross-platform real-time file synchronization tool out of the box.\n\ngut/yos - Simple and reliable package for file operations like copy/move/diff/list on files, directories and symbolic links.\n\nhiggs - A tiny cross-platform Go library to hide/unhide files and directories.\n\niso9660 - A package for reading and creating ISO9660 disk images\n\nnotify - File system event notification library with simple API, similar to os/signal.\n\nopc - Load Open Packaging Conventions (OPC) files for Go.\n\nparquet - Read and write parquet files.\n\npathtype - Treat paths as their own type instead of using strings.\n\npdfcpu - PDF processor.\n\nskywalker - Package to allow one to concurrently go through a filesystem with ease.\n\nstl - Modules to read and write STL (stereolithography) files. Concurrent algorithm for reading.\n\ntodotxt - Go library for Gina Trapani's todo.txt files, supports parsing and manipulating of task lists in the todo.txt format.\n\nvfs - A pluggable, extensible, and opinionated set of filesystem functionality for Go across a number of filesystem types such as os, S3, and GCS.\n\n⬆ back to top\n\nPackages for accounting and finance.\n\naccounting - money and currency formatting for golang.\n\nach - A reader, writer, and validator for Automated Clearing House (ACH) files.\n\nbbgo - A crypto trading bot framework written in Go. Including common crypto exchange API, standard indicators, back-testing and many built-in strategies.\n\ncurrency - Handles currency amounts, provides currency information and formatting.\n\ncurrency - High performant & accurate currency computation package.\n\ndecimal - Arbitrary-precision fixed-point decimal numbers.\n\ndecimal - Immutable decimal numbers with panic-free arithmetic.\n\nfpdecimal - Fast and precise serialization and arithmetic for small fixed-point decimals\n\nfpmoney - Fast and simple ISO4217 fixed-point decimal money.\n\ngo-finance - Library of financial functions for time value of money (annuities), cash flow, interest rate conversions, bonds and depreciation calculations.\n\ngo-finance - Module to fetch exchange rates, check VAT numbers via VIES and check IBAN bank account numbers.\n\ngo-finnhub - Client for stock market, forex and crypto data from finnhub.io. Access real-time financial market data from 60+ stock exchanges, 10 forex brokers, and 15+ crypto exchanges.\n\ngo-money - Implementation of Fowler's Money pattern.\n\ngo-nowpayments - Library for the crypto NOWPayments API.\n\nmoney - Immutable monetary amounts and exchange rates with panic-free arithmetic.\n\nofxgo - Query OFX servers and/or parse the responses (with example command-line client).\n\norderbook - Matching Engine for Limit Order Book in Golang.\n\npayme - QR code generator (ASCII & PNG) for SEPA payments.\n\nsleet - One unified interface for multiple Payment Service Providers (PsP) to process online payment.\n\nswift - Offline validity check of IBAN (International Bank Account Number) and retrieval of BIC (for some countries).\n\ntechan - Technical analysis library with advanced market analysis and trading strategies.\n\nticker - Terminal stock watcher and stock position tracker.\n\ntransaction - Embedded transactional database of accounts, running in multithreaded mode.\n\nvat - VAT number validation & EU VAT rates.\n\n⬆ back to top\n\nLibraries for working with forms.\n\nbind - Bind form data to any Go values.\n\nbinding - Binds form and JSON data from net/http Request to struct.\n\nchecker - Checker helps validating user input through rules defined in struct tags or directly through functions.\n\nconform - Keeps user input in check. Trims, sanitizes & scrubs data based on struct tags.\n\nform - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.\n\nformam - decode form's values into a struct.\n\nforms - Framework-agnostic library for parsing and validating form/JSON data which supports multipart forms and files.\n\ngbind - Bind data to any Go value. Can use built-in and custom expression binding capabilities; supports data validation\n\ngorilla/csrf - CSRF protection for Go web applications & services.\n\nhttpin - Decode an HTTP request into a custom struct, including querystring, forms, HTTP headers, etc.\n\nnosurf - CSRF protection middleware for Go.\n\nqs - Go module for encoding structs into URL query parameters.\n\nqueryparam - Decode url.Values into usable struct values of standard or custom types.\n\n⬆ back to top\n\nPackages to support functional programming in Go.\n\nfp-go - Collection of Functional Programming helpers powered by Golang 1.18+ generics.\n\nfpGo - Monad, Functional Programming features for Golang.\n\nfuego - Functional Experiment in Go.\n\ngo-functional - Functional programming in Go using generics\n\ngo-underscore - Useful collection of helpfully functional Go collection utilities.\n\ngofp - A lodash like powerful utility library for Golang.\n\nmo - Monads and popular FP abstractions, based on Go 1.18+ Generics (Option, Result, Either...).\n\nunderscore - Functional programming helpers for Go 1.18 and beyond.\n\nvalor - Generic option and result types that optionally contain a value.\n\n⬆ back to top\n\nGame Development\n\nAwesome game development libraries.\n\nAzul3D - 3D game engine written in Go.\n\nEbitengine - dead simple 2D game engine in Go.\n\necs - Build your own Game-Engine based on the Entity Component System concept in Golang.\n\nengo - Engo is an open-source 2D game engine written in Go. It follows the Entity-Component-System paradigm.\n\nfantasyname - Fantasy names generator.\n\ng3n - Go 3D Game Engine.\n\ngo-astar - Go implementation of the A* path finding algorithm.\n\ngo-sdl2 - Go bindings for the Simple DirectMedia Layer.\n\ngo3d - Performance oriented 2D/3D math package for Go.\n\ngonet - Game server skeleton implemented with golang.\n\ngoworld - Scalable game server engine, featuring space-entity framework and hot-swapping.\n\ngrid - Generic 2D grid with ray-casting, shadow-casting and path finding.\n\nHarfang3D - 3D engine for the Go language, works on Windows and Linux (Harfang on Go.dev).\n\nLeaf - Lightweight game server framework.\n\nnano - Lightweight, facility, high performance golang based game server framework.\n\nOak - Pure Go game engine.\n\nPitaya - Scalable game server framework with clustering support and client libraries for iOS, Android, Unity and others through the C SDK.\n\nPixel - Hand-crafted 2D game library in Go.\n\nprototype - Cross-platform (Windows/Linux/Mac) library for creating desktop games using a minimal API.\n\nraylib-go - Go bindings for raylib, a simple and easy-to-use library to learn videogames programming.\n\ntermloop - Terminal-based game engine for Go, built on top of Termbox.\n\ntile - Data-oriented and cache-friendly 2D Grid library (TileMap), includes pathfinding, observers and import/export.\n\n⬆ back to top\n\nTools that generate Go code.\n\nconvergen - Feature rich type-to-type copy code generator.\n\ncopygen - Generate type-to-type and type-based code without reflection.\n\ngeneris - Code generation tool providing generics, free-form macros, conditional compilation and HTML templating.\n\ngo-enum - Code generation for enums from code comments.\n\ngo-linq - .NET LINQ-like query methods for Go.\n\ngoderive - Derives functions from input types.\n\ngotype - Golang source code parsing, usage like reflect package.\n\ngoverter - Generate converters by defining an interface.\n\nGoWrap - Generate decorators for Go interfaces using simple templates.\n\ninterfaces - Command line tool for generating interface definitions.\n\njennifer - Generate arbitrary Go code without templates.\n\noapi-codegen - This package contains a set of utilities for generating Go boilerplate code for services based on OpenAPI 3.0 API definitions.\n\ntyperegistry - A library to create type dynamically.\n\n⬆ back to top\n\nGeographic tools and servers\n\ngeoos - A library provides spatial data and geometric algorithms.\n\ngeoserver - geoserver Is a Go Package For Manipulating a GeoServer Instance via the GeoServer REST API.\n\ngismanager - Publish Your GIS Data(Vector Data) to PostGIS and Geoserver.\n\ngodal - Go wrapper for GDAL.\n\nH3 - Go bindings for H3, a hierarchical hexagonal geospatial indexing system.\n\nH3 GeoJSON - Conversion utilities between H3 indexes and GeoJSON.\n\nH3GeoDist - Distribution of Uber H3geo cells by virtual nodes.\n\nmbtileserver - A simple Go-based server for map tiles stored in mbtiles format.\n\nosm - Library for reading, writing and working with OpenStreetMap data and APIs.\n\npbf - OpenStreetMap PBF golang encoder/decoder.\n\nS2 geojson - Convert geojson to s2 cells & demonstrating some S2 geometry features on map.\n\nS2 geometry - S2 geometry library in Go.\n\nsimplefeatures - simplesfeatures is a 2D geometry library that provides Go types that model geometries, as well as algorithms that operate on them.\n\nTile38 - Geolocation DB with spatial index and realtime geofencing.\n\nWeb-Mercator-Projection A project to easily use and convert LonLat, Point and Tile to display info, markers, etc, in a map using the Web Mercator Projection.\n\nWGS84 - Library for Coordinate Conversion and Transformation (ETRS89, OSGB36, NAD83, RGF93, Web Mercator, UTM).\n\n⬆ back to top\n\nGo Compilers\n\nTools for compiling Go to other languages.\n\nc2go - Convert C code to Go code.\n\nc4go - Transpile C code to Go code.\n\nesp32 - Transpile Go into Arduino code.\n\nf4go - Transpile FORTRAN 77 code to Go code.\n\ngopherjs - Compiler from Go to JavaScript.\n\ntardisgo - Golang to Haxe to CPP/CSharp/Java/JavaScript transpiler.\n\n⬆ back to top\n\nTools for managing and working with Goroutines.\n\nants - A high-performance and low-cost goroutine pool in Go.\n\nartifex - Simple in-memory job queue for Golang using worker-based dispatching.\n\nasync - An asynchronous task package with async/await style for Go.\n\nasync - An alternative sync library for Go (Future, Promise, Locks).\n\nasync - A safe way to execute functions asynchronously, recovering them in case of panic.\n\nasync-job - AsyncJob is an asynchronous queue job manager with light code, clear and speed.\n\nbreaker - Flexible mechanism to make execution flow interruptible.\n\nchannelify - Transform your function to return channels for easy and powerful parallel processing.\n\nconc - conc is your toolbelt for structured concurrency in go, making common tasks easier and safer.\n\nconcurrency-limiter - Concurrency limiter with support for timeouts, dynamic priority and context cancellation of goroutines.\n\nconexec - A concurrent toolkit to help execute funcs concurrently in an efficient and safe way. It supports specifying the overall timeout to avoid blocking and uses goroutine pool to improve efficiency.\n\ncyclicbarrier - CyclicBarrier for golang.\n\nexecpool - A pool built around exec.Cmd that spins up a given number of processes in advance and attaches stdin and stdout to them when needed. Very similar to FastCGI or Apache Prefork MPM but works for any command.\n\nflowmatic - Structured concurrency made easy.\n\ngo-accumulator - Solution for accumulation of events and their subsequent processing.\n\ngo-actor - A tiny library for writing concurrent programs using actor model.\n\ngo-floc - Orchestrate goroutines with ease.\n\ngo-flow - Control goroutines execution order.\n\ngo-tools/multithreading - Manage a pool of goroutines using this lightweight library with a simple API.\n\ngo-trylock - TryLock support on read-write lock for Golang.\n\ngo-waitgroup - Like sync.WaitGroup with error handling and concurrency control.\n\ngo-workerpool - Inspired from Java Thread Pool, Go WorkerPool aims to control heavy Go Routines.\n\ngo-workers - Easily and safely run workers for large data processing pipelines.\n\ngoccm - Go Concurrency Manager package limits the number of goroutines that allowed to run concurrently.\n\ngohive - A highly performant and easy to use Goroutine pool for Go.\n\ngollback - asynchronous simple function utilities, for managing execution of closures and callbacks.\n\ngowl - Gowl is a process management and process monitoring tool at once. An infinite worker pool gives you the ability to control the pool and processes and monitor their status.\n\ngoworker - goworker is a Go-based background worker.\n\ngowp - gowp is concurrency limiting goroutine pool.\n\ngpool - manages a resizeable pool of context-aware goroutines to bound concurrency.\n\ngrpool - Lightweight Goroutine pool.\n\nhands - A process controller used to control the execution and return strategies of multiple goroutines.\n\nHunch - Hunch provides functions like: All, First, Retry, Waterfall etc., that makes asynchronous flow control more intuitive.\n\nkyoo - Provides an unlimited job queue and concurrent worker pools.\n\nneilotoole/errgroup - Drop-in alternative to sync/errgroup, limited to a pool of N worker goroutines.\n\nnursery - Structured concurrency in Go.\n\noversight - Oversight is a complete implementation of the Erlang supervision trees.\n\nparallel-fn - Run functions in parallel.\n\npond - Minimalistic and High-performance goroutine worker pool written in Go.\n\npool - Limited consumer goroutine or unlimited goroutine pool for easier goroutine handling and cancellation.\n\nrill - Go concurrency with channel transformations. No boilerplate, type safety, batching and error handling.\n\nroutine - routine is a ThreadLocal for go library. It encapsulates and provides some easy-to-use, non-competitive, high-performance goroutine context access interfaces, which can help you access coroutine context information more gracefully.\n\nroutine - go routine control with context, support: Main, Go, Pool and some useful Executors.\n\nsemaphore - Semaphore pattern implementation with timeout of lock/unlock operations based on channel and context.\n\nsemaphore - Fast resizable semaphore implementation based on CAS (faster than channel-based semaphore implementations).\n\nstl - Software transactional locks based on Software Transactional Memory (STM) concurrency control mechanism.\n\nthreadpool - Golang threadpool implementation.\n\ntunny - Goroutine pool for golang.\n\nworker-pool - goworker is a Go simple async worker pool.\n\nworkerpool - Goroutine pool that limits the concurrency of task execution, not the number of tasks queued.\n\n⬆ back to top\n\nLibraries for building GUI Applications.\n\nToolkits\n\napp - Package to create apps with GO, HTML and CSS. Supports: MacOS, Windows in progress.\n\nCogent Core - A framework for building 2D and 3D apps that run on macOS, Windows, Linux, iOS, Android, and the web.\n\nDarwinKit - Build native macOS applications using Go.\n\nenergy - Cross-platform based on LCL(Native System UI Control Library) and CEF(Chromium Embedded Framework) (Windows/ macOS / Linux)\n\nfyne - Cross platform native GUIs designed for Go based on Material Design. Supports: Linux, macOS, Windows, BSD, iOS and Android.\n\ngio - Gio is a library for writing cross-platform immediate mode GUI-s in Go. Gio supports all the major platforms: Linux, macOS, Windows, Android, iOS, FreeBSD, OpenBSD and WebAssembly.\n\ngo-gtk - Go bindings for GTK.\n\ngo-sciter - Go bindings for Sciter: the Embeddable HTML/CSS/script engine for modern desktop UI development. Cross platform.\n\nGoey - Cross platform UI toolkit aggregator for Windows / Linux / Mac. GTK, Cocoa, Windows API\n\ngoradd/html5tag - Library for outputting HTML5 tags.\n\ngotk3 - Go bindings for GTK3.\n\ngowd - Rapid and simple desktop UI development with GO, HTML, CSS and NW.js. Cross platform.\n\nqt - Qt binding for Go (support for Windows / macOS / Linux / Android / iOS / Sailfish OS / Raspberry Pi).\n\nSpot - Reactive, cross-platform desktop GUI toolkit.\n\nui - Platform-native GUI library for Go. Cross platform.\n\nunison - A unified graphical user experience toolkit for Go desktop applications. macOS, Windows, and Linux are supported.\n\nWails - Mac, Windows, Linux desktop apps with HTML UI using built-in OS HTML renderer.\n\nwalk - Windows application library kit for Go.\n\nwebview - Cross-platform webview window with simple two-way JavaScript bindings (Windows / macOS / Linux).\n\nInteraction\n\nAppIndicator Go - Go bindings for libappindicator3 C library.\n\ngosx-notifier - OSX Desktop Notifications library for Go.\n\nmac-activity-tracker - OSX library to notify about any (pluggable) activity on your machine.\n\nmac-sleep-notifier - OSX Sleep/Wake notifications in golang.\n\nrobotgo - Go Native cross-platform GUI system automation. Control the mouse, keyboard and other.\n\nsystray - Cross platform Go library to place an icon and menu in the notification area.\n\ntrayhost - Cross-platform Go library to place an icon in the host operating system's taskbar.\n\nzenity - Cross-platform Go library and CLI to create simple dialogs that interact graphically with the user.\n\n⬆ back to top\n\nLibraries, tools, and tutorials for interacting with hardware.\n\narduino-cli - Official Arduino CLI and library. Can run standalone, or be incorporated into larger Go projects.\n\nemgo - Go-like language for programming embedded systems (e.g. STM32 MCU).\n\nghw - Golang hardware discovery/inspection library.\n\ngo-osc - Open Sound Control (OSC) bindings for Go.\n\ngo-rpio - GPIO for Go, doesn't require cgo.\n\ngoroslib - Robot Operating System (ROS) library for Go.\n\njoystick - a polled API to read the state of an attached joystick.\n\nsysinfo - A pure Go library providing Linux OS / kernel / hardware system information.\n\n⬆ back to top\n\nLibraries for manipulating images.\n\nbild - Collection of image processing algorithms in pure Go.\n\nbimg - Small package for fast and efficient image processing using libvips.\n\ncameron - An avatar generator for Go.\n\ncanvas - Vector graphics to PDF, SVG or rasterized image.\n\ncolor-extractor - Dominant color extractor with no external dependencies.\n\ndarkroom - An image proxy with changeable storage backends and image processing engines with focus on speed and resiliency.\n\ndraft - Generate High Level Microservice Architecture diagrams for GraphViz using simple YAML syntax.\n\ngeopattern - Create beautiful generative image patterns from a string.\n\ngg - 2D rendering in pure Go.\n\ngift - Package of image processing filters.\n\ngltf - Efficient and robust glTF 2.0 reader, writer and validator.\n\ngo-cairo - Go binding for the cairo graphics library.\n\ngo-gd - Go binding for GD library.\n\ngo-nude - Nudity detection with Go.\n\ngo-webcolors - Port of webcolors library from Python to Go.\n\ngo-webp - Library for encode and decode webp pictures, using libwebp.\n\ngocv - Go package for computer vision using OpenCV 3.3+.\n\ngoimagehash - Go Perceptual image hashing package.\n\ngoimghdr - The imghdr module determines the type of image contained in a file for Go.\n\ngovatar - Library and CMD tool for generating funny avatars.\n\ngovips - A lightning fast image processing and resizing library for Go.\n\ngowitness - Screenshoting webpages using go and headless chrome on command line.\n\ngridder - A Grid based 2D Graphics library.\n\nimage2ascii - Convert image to ASCII.\n\nimagick - Go binding to ImageMagick's MagickWand C API.\n\nimaginary - Fast and simple HTTP microservice for image resizing.\n\nimaging - Simple Go image processing package.\n\nimg - Selection of image manipulation tools.\n\nln - 3D line art rendering in Go.\n\nmergi - Tool & Go library for image manipulation (Merge, Crop, Resize, Watermark, Animate).\n\nmort - Storage and image processing server written in Go.\n\nmpo - Decoder and conversion tool for MPO 3D Photos.\n\npicfit - An image resizing server written in Go.\n\npt - Path tracing engine written in Go.\n\nrez - Image resizing in pure Go and SIMD.\n\nscout - Scout is a standalone open source software solution for DIY video security.\n\nsmartcrop - Finds good crops for arbitrary images and crop sizes.\n\nsteganography - Pure Go Library for LSB steganography.\n\nstegify - Go tool for LSB steganography, capable of hiding any file within an image.\n\nsvgo - Go Language Library for SVG generation.\n\ntga - Package tga is a TARGA image format decoder/encoder.\n\ntransformimgs - Transformimgs resizes and optimises images for Web using next-generation formats.\n\nwebp-server - Simple and minimal image server capable of storing, resizing, converting and caching images.\n\n⬆ back to top\n\nIoT (Internet of Things)\n\nLibraries for programming devices of the IoT.\n\nconnectordb - Open-Source Platform for Quantified Self & IoT.\n\ndevices - Suite of libraries for IoT devices, experimental for x/exp/io.\n\nekuiper - Lightweight data stream processing engine for IoT edge.\n\neywa - Project Eywa is essentially a connection manager that keeps track of connected devices.\n\nflogo - Project Flogo is an Open Source Framework for IoT Edge Apps & Integration.\n\ngatt - Gatt is a Go package for building Bluetooth Low Energy peripherals.\n\ngobot - Gobot is a framework for robotics, physical computing, and the Internet of Things.\n\nhuego - An extensive Philips Hue client library for Go.\n\niot - IoT is a simple framework for implementing a Google IoT Core device.\n\nmainflux - Industrial IoT Messaging and Device Management Server.\n\nperiph - Peripherals I/O to interface with low-level board facilities.\n\nsensorbee - Lightweight stream processing engine for IoT.\n\nshifu - Kubernetes native IoT development framework.\n\nsmart-home - Software package for IoT automation.\n\n⬆ back to top\n\nJob Scheduler\n\nLibraries for scheduling jobs.\n\nCadence-client - A framework for authoring workflows and activities running on top of the Cadence orchestration engine made by Uber.\n\ncdule - Job scheduler library with database support\n\ncheek - A simple crontab like scheduler that aims to offer a KISS approach to job scheduling.\n\nclockwerk - Go package to schedule periodic jobs using a simple, fluent syntax.\n\ncronticker - A ticker implementation to support cron schedules.\n\nDagu - No-code workflow executor. it executes DAGs defined in a simple YAML format.\n\ngo-cron - Simple Cron library for go that can execute closures or functions at varying intervals, from once a second to once a year on a specific date and time. Primarily for web applications and long running daemons.\n\ngo-dag - A framework developed in Go that manages the execution of workflows described by directed acyclic graphs.\n\ngo-quartz - Simple, zero-dependency scheduling library for Go.\n\ngocron - Easy and fluent Go job scheduling. This is an actively maintained fork of jasonlvhit/gocron.\n\ngoflow - A simple but powerful DAG scheduler and dashboard.\n\ngron - Define time-based tasks using a simple Go API and Gron’s scheduler will run them accordingly.\n\ngronx - Cron expression parser, task runner and daemon consuming crontab like task list.\n\nJobRunner - Smart and featureful cron job scheduler with job queuing and live monitoring built in.\n\njobs - Persistent and flexible background jobs library.\n\nleprechaun - Job scheduler that supports webhooks, crons and classic scheduling.\n\nsched - A job scheduler with the ability to fast-forward time.\n\nscheduler - Cronjobs scheduling made easy.\n\ntasks - An easy to use in-process scheduler for recurring tasks in Go.\n\n⬆ back to top\n\nLibraries for working with JSON.\n\najson - Abstract JSON for golang with JSONPath support.\n\nask - Easy access to nested values in maps and slices. Works in combination with encoding/json and other packages that \"Unmarshal\" arbitrary data into Go data-types.\n\ndynjson - Client-customizable JSON formats for dynamic APIs.\n\nej - Write and read JSON from different sources succinctly.\n\nepoch - Contains primitives for marshaling/unmarshalling Unix timestamp/epoch to/from build-in time.Time type in JSON.\n\nfastjson - Fast JSON parser and validator for Go. No custom structs, no code generation, no reflection.\n\ngabs - For parsing, creating and editing unknown or dynamic JSON in Go.\n\ngjo - Small utility to create JSON objects.\n\nGJSON - Get a JSON value with one line of code.\n\ngo-jsonerror - Go-JsonError is meant to allow us to easily create json response errors that follow the JsonApi spec.\n\ngo-respond - Go package for handling common HTTP JSON responses.\n\ngojmapr - Get simple struct from complex json by json path.\n\ngojq - JSON query in Golang.\n\ngojson - Automatically generate Go (golang) struct definitions from example JSON.\n\nhtmljson - Rich rendering of JSON as HTML in Go.\n\nJayDiff - JSON diff utility written in Go.\n\njettison - Fast and flexible JSON encoder for Go.\n\njscan - High performance zero-allocation JSON iterator.\n\nJSON-to-Go - Convert JSON to Go struct.\n\nJSON-to-Proto - Convert JSON to Protobuf online.\n\njson2go - Advanced JSON to Go struct conversion. Provides package that can parse multiple JSON documents and create struct to fit them all.\n\njsonapi-errors - Go bindings based on the JSON API errors reference.\n\njsoncolor - Drop-in replacement for encoding/json that outputs colorized JSON.\n\njsondiff - JSON diff library for Go based on RFC6902 (JSON Patch).\n\njsonf - Console tool for highlighted formatting and struct query fetching JSON.\n\njsongo - Fluent API to make it easier to create Json objects.\n\njsonhal - Simple Go package to make custom structs marshal into HAL compatible JSON responses.\n\njsonhandlers - JSON library to expose simple handlers that lets you easily read and write json from various sources.\n\njsonic - Utilities to handle and query JSON without defining structs in a type safe manner.\n\njsonvalue - A fast and convenient library for unstructured JSON data, replacing encoding/json.\n\njzon - JSON library with standard compatible API/behavior.\n\nkazaam - API for arbitrary transformation of JSON documents.\n\nmapslice-json - Go MapSlice for ordered marshal/ unmarshal of maps in JSON.\n\nmarshmallow - Performant JSON unmarshalling for flexible use cases.\n\nmp - Simple cli email parser. It currently takes stdin and outputs JSON.\n\nOjG - Optimized JSON for Go is a high performance parser with a variety of additional JSON tools including JSONPath.\n\nomg.jsonparser - Simple JSON parser with validation by condition via golang struct fields tags.\n\nujson - Fast and minimal JSON parser and transformer that works on unstructured JSON.\n\nvjson - Go package for validating JSON objects with declaring a JSON schema with fluent API.\n\n⬆ back to top\n\nLibraries for generating and working with log files.\n\ndistillog - distilled levelled logging (think of it as stdlib + log levels).\n\nglg - glg is simple and fast leveled logging library for Go.\n\nglo - PHP Monolog inspired logging facility with identical severity levels.\n\nglog - Leveled execution logs for Go.\n\ngo-cronowriter - Simple writer that rotate log files automatically based on current date and time, like cronolog.\n\ngo-log - A logging library with stack traces, object dumping and optional timestamps.\n\ngo-log - Simple and configurable Logging in Go, with level, formatters and writers.\n\ngo-log - Log lib supports level and multi handlers.\n\ngo-log - Log4j implementation in Go.\n\ngo-logger - Simple logger of Go Programs, with level handlers.\n\ngomol - Multiple-output, structured logging for Go with extensible logging outputs.\n\ngone/log - Fast, extendable, full-featured, std-lib source compatible log library.\n\nhttpretty - Pretty-prints your regular HTTP requests on your terminal for debugging (similar to http.DumpRequest).\n\njournald - Go implementation of systemd Journal's native API for logging.\n\nkemba - A tiny debug logging tool inspired by debug, great for CLI tools and applications.\n\nlog - An O(1) logging system that allows you to connect one log to multiple writers (e.g. stdout, a file and a TCP connection).\n\nlog - Structured logging package for Go.\n\nlog - Simple, configurable and scalable Structured Logging for Go.\n\nlog - Structured log interface for Go cleanly separates logging facade from its implementation.\n\nlog - Simple leveled logging wrapper around standard log package.\n\nlog - A simple logging framework out of the box.\n\nlog-voyage - Full-featured logging saas written in golang.\n\nlog15 - Simple, powerful logging for Go.\n\nlogdump - Package for multi-level logging.\n\nlogex - Golang log lib, supports tracking and level, wrap by standard log lib.\n\nlogger - Minimalistic logging library for Go.\n\nlogo - Golang logger to different configurable writers.\n\nlogrus - Structured logger for Go.\n\nlogrusiowriter - io.Writer implementation using logrus logger.\n\nlogrusly - logrus plug-in to send errors to a Loggly.\n\nlogur - An opinionated logger interface and collection of logging best practices with adapters and integrations for well-known libraries (logrus, go-kit log, zap, zerolog, etc).\n\nlogutils - Utilities for slightly better logging in Go (Golang) extending the standard logger.\n\nlogxi - 12-factor app logger that is fast and makes you happy.\n\nlumberjack - Simple rolling logger, implements io.WriteCloser.\n\nmlog - Simple logging module for go, with 5 levels, an optional rotating logfile feature and stdout/stderr output.\n\nnoodlog - Parametrized JSON logging library which lets you obfuscate sensitive data and marshal any kind of content. No more printed pointers instead of values, nor escape chars for the JSON strings.\n\nonelog - Onelog is a dead simple but very efficient JSON logger. It is the fastest JSON logger out there in all scenarios. Also, it is one of the logger with the lowest allocation.\n\nozzo-log - High performance logging supporting log severity, categorization, and filtering. Can send filtered log messages to various targets (e.g. console, network, mail).\n\nphuslu/log - High performance structured logging.\n\npp - Colored pretty printer for Go language.\n\nrollingwriter - RollingWriter is an auto-rotate io.Writer implementation with multi policies to provide log file rotation.\n\nseelog - Logging functionality with flexible dispatching, filtering, and formatting.\n\nslf4g - Simple Logging Facade for Golang: Simple structured logging; but powerful, extendable and customizable, with huge amount of learnings from decades of past logging frameworks.\n\nslog - Lightweight, configurable, extensible logger for Go.\n\nslog-formatter - Common formatters for slog and helpers to build your own.\n\nslog-multi - Chain of slog.Handler (pipeline, fanout...).\n\nslogor - A colorful slog handler.\n\nspew - Implements a deep pretty printer for Go data structures to aid in debugging.\n\nsqldb-logger - A logger for Go SQL database driver without modify existing *sql.DB stdlib usage.\n\nstdlog - Stdlog is an object-oriented library providing leveled logging. It is very useful for cron jobs.\n\nstructy/log - A simple to use log system, minimalist but with features for debugging and differentiation of messages.\n\ntail - Go package striving to emulate the features of the BSD tail program.\n\ntint - A slog.Handler that writes tinted logs.\n\nxlog - Plugin architecture and flexible log system for Go, with level ctrl, multiple log target and custom log format.\n\nxlog - Structured logger for net/context aware HTTP handlers with flexible dispatching.\n\nxylog - Leveled and structured logging, dynamic fields, high performance, zone management, simple configuration, and readable syntax.\n\nyell - Yet another minimalistic logging library.\n\nzap - Fast, structured, leveled logging in Go.\n\nzax - Integrate Context with Zap logger, which leads to more flexibility in Go logging.\n\nzerolog - Zero-allocation JSON logger.\n\nzkits-logger - A powerful zero-dependency JSON logger.\n\nzl - High Developer Experience, zap based logger. It offers rich functionality but is easy to configure.\n\n⬆ back to top\n\nMachine Learning\n\nLibraries for Machine Learning.\n\nbayesian - Naive Bayesian Classification for Golang.\n\nCloudForest - Fast, flexible, multi-threaded ensembles of decision trees for machine learning in pure Go.\n\nddt - Dynamic decision tree, create trees defining customizable rules.\n\neaopt - An evolutionary optimization library.\n\nevoli - Genetic Algorithm and Particle Swarm Optimization library.\n\nfonet - A Deep Neural Network library written in Go.\n\ngo-cluster - Go implementation of the k-modes and k-prototypes clustering algorithms.\n\ngo-deep - A feature-rich neural network library in Go.\n\ngo-fann - Go bindings for Fast Artificial Neural Networks(FANN) library.\n\ngo-featureprocessing - Fast and convenient feature processing for low latency machine learning in Go.\n\ngo-galib - Genetic Algorithms library written in Go / golang.\n\ngo-pr - Pattern recognition package in Go lang.\n\ngobrain - Neural Networks written in go.\n\ngodist - Various probability distributions, and associated methods.\n\ngoga - Genetic algorithm library for Go.\n\nGoLearn - General Machine Learning library for Go.\n\ngolinear - liblinear bindings for Go.\n\nGoMind - A simplistic Neural Network Library in Go.\n\ngoml - On-line Machine Learning in Go.\n\ngonet - Neural Network for Go.\n\nGoptuna - Bayesian optimization framework for black-box functions written in Go. Everything will be optimized.\n\ngoRecommend - Recommendation Algorithms library written in Go.\n\ngorgonia - graph-based computational library like Theano for Go that provides primitives for building various machine learning and neural network algorithms.\n\ngorse - An offline recommender system backend based on collaborative filtering written in Go.\n\ngoscore - Go Scoring API for PMML.\n\ngosseract - Go package for OCR (Optical Character Recognition), by using Tesseract C++ library.\n\nhugot - Huggingface transformer pipelines for golang with onnxruntime.\n\nlibsvm - libsvm golang version derived work based on LIBSVM 3.14.\n\nm2cgen - A CLI tool to transpile trained classic ML models into a native Go code with zero dependencies, written in Python with Go language support.\n\nneat - Plug-and-play, parallel Go framework for NeuroEvolution of Augmenting Topologies (NEAT).\n\nneural-go - Multilayer perceptron network implemented in Go, with training via backpropagation.\n\nocrserver - A simple OCR API server, seriously easy to be deployed by Docker and Heroku.\n\nonnx-go - Go Interface to Open Neural Network Exchange (ONNX).\n\nprobab - Probability distribution functions. Bayesian inference. Written in pure Go.\n\nrandomforest - Easy to use Random Forest library for Go.\n\nregommend - Recommendation & collaborative filtering engine.\n\nshield - Bayesian text classifier with flexible tokenizers and storage backends for Go.\n\ntfgo - Easy to use Tensorflow bindings: simplifies the usage of the official Tensorflow Go bindings. Define computational graphs in Go, load and execute models trained in Python.\n\nVaris - Golang Neural Network.\n\n⬆ back to top\n\nLibraries that implement messaging systems.\n\nami - Go client to reliable queues based on Redis Cluster Streams.\n\namqp - Go RabbitMQ Client Library.\n\nAPNs2 - HTTP/2 Apple Push Notification provider for Go — Send push notifications to iOS, tvOS, Safari and OSX apps.\n\nAsynq - A simple, reliable, and efficient distributed task queue for Go built on top of Redis.\n\nBeaver - A real time messaging server to build a scalable in-app notifications, multiplayer games, chat apps in web and mobile apps.\n\nBus - Minimalist message bus implementation for internal communication.\n\nCentrifugo - Real-time messaging (Websockets or SockJS) server in Go.\n\nChanify - A push notification server send message to your iOS devices.\n\nCommander - A high-level event driven consumer/producer supporting various \"dialects\" such as Apache Kafka.\n\nConfluent Kafka Golang Client - confluent-kafka-go is Confluent's Golang client for Apache Kafka and the Confluent Platform.\n\ndbus - Native Go bindings for D-Bus.\n\ndrone-line - Sending Line notifications using a binary, docker or Drone CI.\n\nemitter - Emits events using Go way, with wildcard, predicates, cancellation possibilities and many other good wins.\n\nevent - Implementation of the pattern observer.\n\nEventBus - The lightweight event bus with async compatibility.\n\ngaurun-client - Gaurun Client written in Go.\n\nGlue - Robust Go and Javascript Socket Library (Alternative to Socket.io).\n\ngo-eventbus - Simple Event Bus package for Go.\n\nGo-MediatR - A library for handling mediator patterns and simplified CQRS patterns within an event-driven architecture, inspired by csharp MediatR library.\n\ngo-mq - RabbitMQ client with declarative configuration.\n\ngo-notify - Native implementation of the freedesktop notification spec.\n\ngo-nsq - the official Go package for NSQ.\n\ngo-res - Package for building REST/real-time services where clients are synchronized seamlessly, using NATS and Resgate.\n\ngo-socket.io - socket.io library for golang, a realtime application framework.\n\ngo-vitotrol - Client library to Viessmann Vitotrol web service.\n\nGollum - A n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations.\n\ngolongpoll - HTTP longpoll server library that makes web pub-sub simple.\n\ngopush-cluster - gopush-cluster is a go push server cluster.\n\ngorush - Push notification server using APNs2 and google GCM.\n\ngosd - A library for scheduling when to dispatch a message to a channel.\n\nguble - Messaging server using push notifications (Google Firebase Cloud Messaging, Apple Push Notification services, SMS) as well as websockets, a REST API, featuring distributed operation and message-persistence.\n\nhare - A user friendly library for sending messages and listening to TCP sockets.\n\nhub - A Message/Event Hub for Go applications, using publish/subscribe pattern with support for alias like rabbitMQ exchanges.\n\njazz - A simple RabbitMQ abstraction layer for queue administration and publishing and consuming of messages.\n\nmachinery - Asynchronous task queue/job queue based on distributed message passing.\n\nmangos - Pure go implementation of the Nanomsg (\"Scalability Protocols\") with transport interoperability.\n\nmelody - Minimalist framework for dealing with websocket sessions, includes broadcasting and automatic ping/pong handling.\n\nMercure - Server and "
    }
}