{
    "id": "dbpedia_8307_0",
    "rank": 17,
    "data": {
        "url": "https://www.linkedin.com/pulse/machine-learning-gis-hierarchical-clustering-urban-bielinskas",
        "read_more_link": "",
        "language": "en",
        "title": "Machine learning in GIS. Hierarchical Clustering for Urban Brownfields analysis.",
        "top_image": "https://media.licdn.com/dms/image/v2/C4E12AQGVqkKug1DXzg/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1520077782252?e=2147483647&v=beta&t=K8in1C_rNZPr6wjEFj5GbkQYXjubCfFatlxczQzKU_g",
        "meta_img": "https://media.licdn.com/dms/image/v2/C4E12AQGVqkKug1DXzg/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1520077782252?e=2147483647&v=beta&t=K8in1C_rNZPr6wjEFj5GbkQYXjubCfFatlxczQzKU_g",
        "images": [
            "https://media.licdn.com/dms/image/v2/C4E12AQGVqkKug1DXzg/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1520077782252?e=2147483647&v=beta&t=K8in1C_rNZPr6wjEFj5GbkQYXjubCfFatlxczQzKU_g",
            "https://media.licdn.com/dms/image/v2/C4E12AQGe6InezYO0SA/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520193336338?e=1729728000&v=beta&t=xuSXsHTPjTI9GMYsgPBAYwna5CTKc5epQNKmH2PDnpM",
            "https://media.licdn.com/dms/image/v2/C4E12AQENhxbqt_Fl1g/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520112035692?e=1729728000&v=beta&t=-nhCun84YZQ-0uKGz40fHWWYkiVjPBD9O3lBxQYWod0",
            "https://media.licdn.com/dms/image/v2/C4E12AQHRNt_dluauSg/article-inline_image-shrink_400_744/article-inline_image-shrink_400_744/0/1520144349499?e=1729728000&v=beta&t=D9yM_ysywkhhkI0YxQsZ2T-OgkUt1XfoscFpzsBth6s",
            "https://media.licdn.com/dms/image/v2/C4E12AQHnTBpzLTg9lQ/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520144236117?e=1729728000&v=beta&t=WTeUjMcwht_SsEQog8d54hIiCchxYl8qg-LzoXeW-lc",
            "https://media.licdn.com/dms/image/v2/C4E12AQFTFObMuIOm6Q/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520575663484?e=1729728000&v=beta&t=Pp_VVRBiymnoWy-AHXGB_nxANe_SrjVMeGz7rF17t9U",
            "https://media.licdn.com/dms/image/C4E12AQHd4fyJTXEWyA/article-inline_image-shrink_1000_1488/0/1520231735614?e=1729728000&v=beta&t=LprEMH3OlZlk4GJo8KVjwtKoFLnAXha2nYVzK9Y-Kuk",
            "https://media.licdn.com/dms/image/C4E12AQEPNilu-HHg_w/article-inline_image-shrink_400_744/0/1520212006939?e=1729728000&v=beta&t=UPh-WWqP1XV93epSSKvA3ixH7bu9SN5XynVu0LHlqEU",
            "https://media.licdn.com/dms/image/C4E12AQGoprvpV-1aGw/article-inline_image-shrink_400_744/0/1520199489924?e=1729728000&v=beta&t=MCil10lR52lXoVFBwyFrTx62qKROTS7adKJT6cT4FHE",
            "https://media.licdn.com/dms/image/v2/C4E12AQE8nbOfLPh2cg/article-inline_image-shrink_400_744/article-inline_image-shrink_400_744/0/1520194551304?e=1729728000&v=beta&t=xLrxpi7zNuMtXykX-p9p28H5HJ2AytptIi9Yk3qL7jM",
            "https://media.licdn.com/dms/image/v2/C4E12AQGsVoXt3SC0og/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520170478678?e=1729728000&v=beta&t=y6l6mcKhpgOoJH6f4H_isFa42VaZv5YVr1FAEd6Zq84"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dr. Vytautas Bielinskas"
        ],
        "publish_date": "2017-08-29T22:51:03+00:00",
        "summary": "",
        "meta_description": "What is what. The goal and datasets.",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/machine-learning-gis-hierarchical-clustering-urban-bielinskas",
        "text": "What is what. The goal and datasets.\n\nThis article mainly focus on methodological part combining Geographical Information System (GIS) and Hierarchical Clustering (HC) method that is implemented by Python. Following libraries were used:\n\nNumPy - for storing dataset data for analysis and clustering.\n\nSkLearn - for Machine learning part.\n\nPandas - For read a dataset from CSV file.\n\nThe goal. Create a clusters that represents spatial distribution of Urban Brownfields in Vilnius city by its attributes. I decided to choose The Distance from city center (kilometers) and Quantity of living residents of surrounded area of an urban brownfield.\n\nDatasets. For this study 3 complex datasets were used:\n\nResidents dataset from official Department of Statistics in Lithuania. This dataset is available in Shape (*.shp) file with all necessary social data inside. This data are stored in grid cells (100x100 meters).\n\nAreas of urban brownfields. This dataset was prepared by me by digitizing real city urban environment.\n\nDigital city model for whole research area (410 km2).\n\nThe basic scheme of Data preparation stage is represented below.\n\nAfter this part is done I am ready to go through to Clustering stage.\n\nHierarchical Clustering theoretical approach.\n\nThe brilliant feature of HC is using a dendrogram. Dendrogram shows explicitly the hierarchy of the clusters. Along the x axis are arranged (in no particular order except to avoid horizontal line crossing) the individual data point. The y axis represents the distance between clusters.\n\nAs y axis increase, different grouping of clusters falls within the distance constrain. The number at the joins of the dendrograms corresponds to the number of clusters for specific distance (Euclidean).\n\nThe figure above represents six points and their possible clusterings. At the right are shown six points, A-F, with circles 1-5 showing different distance-based grouping that could be imposed. These group form an implicit hierarchy. At the left is dendrogram corresponding to the grouping, which makes the hierarchy explicit.\n\nPreparation of GIS data\n\nSo, let's come back to where we began this article. Now it is time to prepare two lists of attribution data. As it was mentioned at first, it will be number of residents around an area of brownfield and second one is the distance from city center.\n\n# 1. Preparation of list no 1: number of residents\n\nIn order to properly prepare GIS data I converted whole grid (where all social data is stored) to array of points by using Feature to Point tool.\n\nIn order to make a smooth raster which will cover whole city with interpolated values from social data I used Inverse Distance Weighted (IDW interpolation, see image below).\n\nPower Parameter in Inverse Distance Weighted (IDW interpolation) controls the significance of surrounding points on the interpolated value. A higher power results in less influence from distant points. It can be any real number greater than 0, but the most reasonable results will be obtained using values from 0.5 to 3.\n\nRegarding to holistic approach and principles of Environment psychology The IDW method took 12 nearest neighborhood data points into consideration.\n\n#2. Preparation of list no. 2: Distance from city center\n\nThis part is so easy. The location of center point was selected as of Central Post office of Vilnius city. Distance from city center to each data point was measured as a distance between distance between Central Post office and a data example (x,y).\n\nSorry that I promised that it is easy part. Two intermediate actions are must to do. The first one is to pass raster data point data (with number of residents in a cell) to areas of brownfields. And the second one is to convert brownfield area to a Point. For this I used Intersect (1st action) and Feature to Point (2nd action) tools in ArcMap 10.1 Toolbox.\n\nAfter performed the last action due to Intersect effect I got reduced numbers of Brownfields from 1099 to 663 that covers 41396 residents with calculated distance to city center (m).\n\nFinally I export all necessary data (see on the figure above Criterion 1 and Criterion 2). That is all for GIS data. Let's go further with Clustering with Python.\n\nImplementation HC for real case\n\nAt very begining of HC in Python, I have to be sure that my dataset is saved to CSV file format. For implementation HC in Python I using Anaconda and Spyder.\n\n# 1. Importing dataset.\n\nIt is simple procedure. If you have created CSV file correctly by setting comma separated values, then no any problems occurs.\n\n# 2. Prepare NumPy array.\n\nPrepare NumPy array for Clustering including only Criterion 1 and Criterion 2. For this simple NumPy command should be using:\n\nX = dataset.iloc[:, [2, 3]].values\n\nHere 2, 3 means columns from original dataset CSV file.\n\n# 3. Generate dendrogram.\n\nThis step is crucial for whole project. I created a dendrogram by using scipy.cluster.hierarchy library that is generally correspond to HC principles. The plot of dendrogram is represented below.\n\nYes, this plot is quite blurry but this is all what I have from Spyder so far. And based on this generated dendrogram I must to choose correct number of clusters regarding to principles of HC. This is our next step.\n\n# 4. Identify correct number of Clusters.\n\nAccording to theoretical HC guidelines I have to find the longest vertical line avoiding horizontal line crossing. It a little bit confusing because the vertical line that match this requirement is on very left of the dendrogram and therefore I will get only 2 clusters.\n\nIn order to be more accurate and harassing I select a vertical line that is in Distance from city center interval between 4000 and 6000 meters. This is the second longest vertical line in my dendrogram. Not so bad.\n\nWhen I decided how many clusters I need then I need to fit number of clusters = 3 to the dataset and finally to visualize these clusters in Python.\n\nFor fitting HC to the dataset I used sklearn.cluster library from where I imported AgglomerativeClustering module that's purpose is to perform HC in Python. And the HC variable that will predict X dataset values for clustering seems like that:\n\nhc = AgglomerativeClustering(n_clusters = 3, affinity = 'euclidean', linkage = 'ward')\n\nAnd then I generated the list for predicted values as y_hc = hc.fit_predict(X). After this hard job we can finally visualize our clusters.\n\n#5. Visualize Clusters\n\nPlots for clusters were made by plt.scatter command which belong to matplotlib.pyplot library. This is fun part. No more words, let see what we got!\n\nIn this example we can see that Criterion 1 (Number of Residents interacting with BF) do not has big significance to the results.\n\nThe results in GIS map looks like this.\n\nThank you for ready and analyzing. If you wish to get Python project file (code), example dataset, having any question, find a mistake or need to explain GIS stage feel free to contact me directly.\n\nVytautas Bielinskas"
    }
}