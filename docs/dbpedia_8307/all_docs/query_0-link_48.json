{
    "id": "dbpedia_8307_0",
    "rank": 48,
    "data": {
        "url": "https://developers.shotgridsoftware.com/tk-core/utils.html",
        "read_more_link": "",
        "language": "en",
        "title": "core v0.21.6 documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://developers.shotgridsoftware.com/tk-core/_static/logo@2x.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Handles finding and loading the user settings for Toolkit. The settings are cached in memory so the user settings object can be instantiated multiple times without any issue.\n\nAll the settings are returned as strings. If a setting is missing from the file, None will be returned. If the setting is present but has no value, an empty string will be returned.\n\nAs of this writing, settings can only be updated by editing the ini file manually.\n\nCreate the singleton instance if it hasn’t been created already. Once instantiated, the object will be cached and never be instantiated again for performance reasons.\n\npropertyshotgun_proxy\n\nRetrieves the value from the http_proxy setting.\n\npropertyapp_store_proxy\n\nRetrieves the value from the app_store_http_proxy setting.\n\npropertydefault_site\n\nRetrieves the value from the default_site setting.\n\npropertydefault_login\n\nRetrieves the value from the default_login setting.\n\nget_section_settings(section)[source]\n\nRetrieves the name of the settings in a given section.\n\nParameters:\n\nsection (str) – Name of the section of the settings to retrieve.\n\nReturns:\n\nA list of setting’s name. If the section is missing, returns None.\n\nget_setting(section, name)[source]\n\nProvides access to any setting, including ones in user defined sections.\n\nParameters:\n\nsection (str) – Name of the section to retrieve the setting from. Do not include the brackets.\n\nname (str) – Name of the setting under the provided section.\n\nReturns:\n\nThe setting’s value if found, None if the setting is missing from the file or an empty string if the setting is present but has no value associated.\n\nReturn type:\n\nstr\n\nget_boolean_setting(section, name)[source]\n\nProvides access to any setting, including ones in user defined sections, and casts it into a boolean.\n\nValues 1, yes, true and on are converted to True while 0, no, false``and ``off are converted to false. Case is insensitive.\n\nParameters:\n\nsection (str) – Name of the section to retrieve the setting from. Do not include the brackets.\n\nname (str) – Name of the setting under the provided section.\n\nReturns:\n\nBoolean if the value is valid, None if not set.\n\nReturn type:\n\nbool\n\nRaises:\n\nTankError – Raised if the value is not one of the accepted values.\n\nget_integer_setting(section, name)[source]\n\nProvides access to any setting, including ones in user defined sections, and casts it into an integer.\n\nParameters:\n\nsection (str) – Name of the section to retrieve the setting from. Do not include the brackets.\n\nname (str) – Name of the setting under the provided section.\n\nReturns:\n\nBoolean if the value is valid, None if not set.\n\nReturn type:\n\nbool\n\nRaises:\n\nTankError – Raised if the value is not one of the accepted values.\n\nCreates a Published File in Shotgun.\n\nIntroduction\n\nThe publish will be associated with the current context and point at the given file. The method will attempt to add the publish to Shotgun as a local file link, and failing that it will generate a file:// url to represent the path.\n\nIn addition to the path, a version number and a name needs to be provided. The version number should reflect the iteration or revision of the publish and will be used to populate the number field of the publish that is created in Shotgun. The name should represent the name of the item, without any version number. This is used to group together publishes in Shotgun and various integrations.\n\nIf the path matches any local storage roots defined by the toolkit project, it will be uploaded as a local file link to Shotgun. If not matching roots are found, the method will retrieve the list of local storages from Shotgun and try to locate a suitable storage. Failing that, it will fall back on a register the path as a file:// url. For more information on this resolution logic, see our Admin Guide.\n\nNote\n\nShotgun follows a convention where the name passed to the register publish method is used to control how things are grouped together. When Shotgun and Toolkit groups things together, things are typically grouped first by project/entity/task and then by publish name and version.\n\nIf you create three publishes in Shotgun, all having the name ‘foreground.ma’ and version numbers 1, 2 and 3, Shotgun will assume that these are three revisions of the same content and will group them together in a group called ‘foreground.ma’.\n\nWe recommend a convention where the name parameter reflects the filename passed in via the file_path parameter, but with the version number removed. For example:\n\nfile_path: /tmp/layout.v027.ma, name: layout.ma, version_number: 27\n\nfile_path: /tmp/foreground_v002.%04d.exr, name: foreground.exr, version_number: 2\n\nNote\n\nWhen publishing file sequences, the method will try to normalize your path based on the current template configuration. For example, if you supply the path render.$F4.dpx, it will translated to render.%04d.dpx automatically, assuming there is a matching template defined. If you are not using templates or publishing files that do not match any configured templates, always provide sequences on a %0xd or %xd printf style pattern.\n\nExamples\n\nThe example below shows a basic publish. In addition to the required parameters, it is recommended to supply at least a comment and a Publish Type:\n\n>>> file_path = '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma' >>> name = 'layout.ma' >>> version_number = 1 >>> >>> sgtk.util.register_publish( tk, context, file_path, name, version_number, comment = 'Initial layout composition.', published_file_type = 'Maya Scene' ) {'code': 'layout.v001.ma', 'created_by': {'id': 40, 'name': 'John Smith', 'type': 'HumanUser'}, 'description': 'Initial layout composition.', 'entity': {'id': 2, 'name': 'shot_010', 'type': 'Shot'}, 'id': 2, 'published_file_type': {'id': 134, 'type': 'PublishedFileType'}, 'name': 'layout.ma', 'path': {'content_type': None, 'link_type': 'local', 'local_path': '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma', 'local_path_linux': '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma', 'local_path_mac': '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma', 'local_path_windows': 'c:\\studio\\demo_project\\sequences\\Sequence-1\\shot_010\\Anm\\publish\\layout.v001.ma', 'local_storage': {'id': 1, 'name': 'primary', 'type': 'LocalStorage'}, 'name': 'layout.v001.ma', 'url': 'file:///studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma'}, 'path_cache': 'demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma', 'project': {'id': 4, 'name': 'Demo Project', 'type': 'Project'}, 'published_file_type': {'id': 12, 'name': 'Layout Scene', 'type': 'PublishedFileType'}, 'task': None, 'type': 'PublishedFile', 'version_number': 1}\n\nWhen using the dry_run option, the returned data will look something like this:\n\n>>> file_path = '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma' >>> name = 'layout' >>> version_number = 1 >>> >>> sgtk.util.register_publish( tk, context, file_path, name, version_number, comment='Initial layout composition.', published_file_type='Layout Scene' dry_run=True ) {'code': 'layout.v001.ma', 'description': 'Initial layout composition.', 'entity': {'id': 2, 'name': 'shot_010', 'type': 'Shot'}, 'path': {'local_path': '/studio/demo_project/sequences/Sequence-1/shot_010/Anm/publish/layout.v001.ma'}, 'project': {'id': 4, 'name': 'Demo Project', 'type': 'Project'}, 'task': None, 'type': 'PublishedFile', 'version_number': 1}\n\nBe aware that the data may be different if the before_register_publish hook has been overridden.\n\nParameters\n\nParameters:\n\ntk – Sgtk instance\n\ncontext – A Context to associate with the publish. This will populate the task and entity link in Shotgun.\n\npath – The path to the file or sequence we want to publish. If the path is a sequence path it will be abstracted so that any sequence keys are replaced with their default values.\n\nname – A name, without version number, which helps distinguish this publish from other publishes. This is typically used for grouping inside of Shotgun so that all the versions of the same “file” can be grouped into a cluster. For example, for a Maya publish, where we track only the scene name, the name would simply be that: the scene name. For something like a render, it could be the scene name, the name of the AOV and the name of the render layer.\n\nversion_number – The version number of the item we are publishing.\n\nIn addition to the above, the following optional arguments exist:\n\ntask - A shotgun entity dictionary with keys id and type (where type should always be Task). This value will be used to populate the task field for the created Shotgun publish record. If no value is specified, the task will be determined based on the context parameter.\n\ncomment - A string containing a description of what is being published.\n\nthumbnail_path - A path to a thumbnail (png or jpeg) which will be uploaded to shotgun and associated with the publish.\n\ndependency_paths - A list of file system paths that should be attempted to be registered as dependencies. Files in this listing that do not appear as publishes in shotgun will be ignored.\n\ndependency_ids - A list of publish ids which should be registered as dependencies.\n\npublished_file_type - A publish type in the form of a string. If the publish type does not already exist in Shotgun, it will be created.\n\nupdate_entity_thumbnail - Push thumbnail up to the associated entity\n\nupdate_task_thumbnail - Push thumbnail up to the associated task\n\ncreated_by - Override for the user that will be marked as creating the publish. This should be in the form of shotgun entity, e.g. {“type”:”HumanUser”, “id”:7}. If not set, the user will be determined using sgtk.util.get_current_user().\n\ncreated_at - Override for the date the publish is created at. This should be a python datetime object\n\nversion_entity - The Shotgun review version that the publish should be linked to. This should be a dictionary of keys id and type (where type should always be Version). This parameter is useful for workflows where a Shotgun Version has already been created for review purposes and you want to associate the publish created by this method.\n\nNote: For workflows where you have an existing review version and want to create a series of associated publishes, you may want to extract a Context from the Version entity and pass that to the register_publish() method in order to ensure consistency in how objects are associated in Shotgun.\n\nsg_fields - Some additional Shotgun fields as a dict (e.g. {'sg_custom_field': 'hello'})\n\ndry_run - Boolean. If set, do not actually create a database entry. Return the dictionary of data that would be supplied to Shotgun to create the PublishedFile entity.\n\nRaises:\n\nShotgunPublishError on failure.\n\nReturns:\n\nThe created entity dictionary.\n\nReturns a local path on disk given a dictionary of Shotgun publish data.\n\nThis acts as the inverse of register_publish() and resolves a local path on disk given some Shotgun publish data, typically obtained by a Shotgun API find() call.\n\nComplex logic is applied in order to turn a publish into a valid local path. Several exception types are raised to indicate the reason why a path could not be resolved, allowing for workflows where the logic can be overridden.\n\nNote\n\nThis method is also called by sgtk.Hook.get_publish_path() which is a common method Toolkit apps use to resolve publishes into paths.\n\nPublished File Path Resolution\n\nFor more information on the published file path resolution, see our Admin Guide.\n\nParameters\n\nParameters:\n\ntk – Sgtk instance\n\nsg_publish_data – Dictionary containing Shotgun publish data. Needs to at least contain a code, type, id and a path key.\n\nReturns:\n\nA local path to file or file sequence.\n\nRaises:\n\nPublishPathNotDefinedError if the path isn’t defined.\n\nRaises:\n\nPublishPathNotSupported if the path cannot be resolved.\n\nFinds publishes in Shotgun given paths on disk. This method is similar to the find method in the Shotgun API, except that instead of an Entity type, a list of files is passed into the function.\n\nIn addition to a list of files, shotgun filters can also be specified. This may be useful if for example all publishes with a certain status should be retrieved.\n\nBy default, the shotgun id is returned for each successfully identified path. If you want to retrieve additional fields, you can specify these using the fields parameter.\n\nBy default, only publishes in the current project will be found. If you want to retreive publishes from any active project in the pipeline config, you can specify the only_current_project param to False.\n\nThe method will return a dictionary, keyed by path. The value will be a standard shotgun query result dictionary, for example:\n\n{ \"/foo/bar\" : { \"id\": 234, \"type\": \"TankPublishedFile\", \"code\": \"some data\" }, \"/foo/baz\" : { \"id\": 23, \"type\": \"TankPublishedFile\", \"code\": \"some more data\" } }\n\nFields that are not found, or filtered out by the filters parameter, are not returned in the dictionary.\n\nParameters:\n\ntk – Sgtk instance\n\nlist_of_paths – List of full paths for which information should be retrieved\n\nfilters – Optional list of shotgun filters to apply.\n\nfields – Optional list of fields from the matched entities to return. Defaults to id and type.\n\nonly_current_project – Optional boolean to find publishes in Shotgun only from the current project (True) or from any active project (False). Defaults to True.\n\nReturns:\n\ndictionary keyed by path\n\nConvenience method that downloads a file from a given url. This method will take into account any proxy settings which have been defined in the Shotgun connection parameters.\n\nIn some cases, the target content of the url is not known beforehand. For example, the url https://my-site.shotgunstudio.com/thumbnail/full/Asset/1227 may redirect into https://some-site/path/to/a/thumbnail.png. In such cases, you can set the optional use_url_extension parameter to True - this will cause the method to append the file extension of the resolved url to the filename passed in via the location parameter. So for the urls given above, you would get the following results:\n\nlocation=”/path/to/file” and use_url_extension=False would return “/path/to/file”\n\nlocation=”/path/to/file” and use_url_extension=True would return “/path/to/file.png”\n\nParameters:\n\nsg – Shotgun API instance to get proxy connection settings from\n\nurl – url to download\n\nlocation – path on disk where the payload should be written. this path needs to exists and the current user needs to have write permissions\n\nuse_url_extension (bool) – Optionally append the file extension of the resolved URL’s path to the input location to construct the full path name to the downloaded contents. The newly constructed full path name will be returned.\n\nReturns:\n\nFull filepath to the downloaded file. This may have been altered from the input location if use_url_extension is True and a file extension could be determined from the resolved url.\n\nRaises:\n\nTankError on failure."
    }
}