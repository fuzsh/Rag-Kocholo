{
    "id": "dbpedia_8307_2",
    "rank": 22,
    "data": {
        "url": "https://cloud.google.com/bigquery/docs/bi-engine-intro",
        "read_more_link": "",
        "language": "en",
        "title": "What is BI Engine?",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/cloud-logo.svg",
            "https://cloud.google.com/static/bigquery/images/sql-interface-diagram.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/bigquery/docs/bi-engine-intro",
        "text": "BigQuery BI Engine is a fast, in-memory analysis service that accelerates many SQL queries in BigQuery by intelligently caching the data you use most frequently. BI Engine can accelerate SQL queries from any source, including those written by data visualization tools, and can manage cached tables for on-going optimization. This lets you improve query performance without manual tuning or data tiering. You can use clustering and partitioning to further optimize the performance of large tables with BI Engine.\n\nFor example, if your dashboard only displays the last quarter's data, then consider partitioning your tables by time so only the latest partitions are loaded into memory. You can also combine the benefits of materialized views and BI Engine. This works particularly well when the materialized views are used to join and flatten data to optimize their structure for BI Engine.\n\nBI Engine provides the following advantages:\n\nBigQuery API: BI Engine directly integrates with the BigQuery API. Any BI solution or custom application that works with the BigQuery API through standard mechanisms such as REST or JDBC and ODBC drivers can use BI Engine without modification.\n\nVectorized runtime: With the BI Engine SQL interface, BI Engine introduces a more modern technique called vectorized processing. Using vectorized processing in an execution engine makes more efficient use of modern CPU architecture, by operating on batches of data at a time. BI Engine also uses advanced data encodings, specifically, dictionary run-length encoding, to further compress the data that's stored in the in-memory layer.\n\nSeamless integration: BI Engine works with BigQuery features and metadata, including authorized views, column level security, and data masking.\n\nReservations: BI Engine reservations manage memory allocation at the project location level. BI Engine caches specific columns or partitions that are queried, prioritizing those in tables marked as preferred.\n\nAbout the BI Engine SQL interface\n\nThe BI Engine SQL interface expands BI Engine to integrate with other business intelligence (BI) tools such as Looker, Tableau, Power BI, and custom applications to accelerate data exploration and analysis. This page provides an overview of the BI Engine SQL interface, and the expanded capabilities that it brings to BI Engine.\n\nBI Engine use cases\n\nBI Engine can significantly accelerate many SQL queries, including those used for BI dashboards. Acceleration is most effective if you identify the tables that essential to your queries and then mark them as preferred tables. To use BI Engine, create a reservation that defines the storage capacity dedicated to BI Engine. You can let BigQuery determine which tables to cache based on the project's usage patterns or you can mark specific tables to prevent other traffic from interfering with acceleration.\n\nBI Engine is useful in the following use cases:\n\nYou use BI tools to analyze your data: The BI Engine SQL interface can accelerate BigQuery queries regardless of whether they run in the BigQuery console, client library, or through an API or an ODBC or JDBC connector. This can significantly improve the performance of dashboards connected to BigQuery through a built-in connection (API) or connectors.\n\nYou have certain tables that are queried most frequently: BI Engine lets you designate specific preferred tables to accelerate. This is helpful if you have a subset of tables that are queried more frequently or are used for high-visibility dashboards.\n\nBI Engine might not fit your needs in the following cases:\n\nYou use wildcards in your queries: Queries referencing wildcard tables are not supported by BI Engine and don't benefit from acceleration.\n\nYou rely heavily on BigQuery features which BI Engine doesn't support: While BI Engine supports most SQL functions and operators when connecting business intelligence (BI) tools to BigQuery, there are unsupported features, including external tables and non-SQL user-defined functions.\n\nConsiderations for BI Engine\n\nConsider the following when deciding how to configure BI Engine:\n\nEnsure acceleration for specific queries\n\nYou can ensure a particular set of queries always gets accelerated by creating a separate project with a BI Engine reservation. To do so, you should ensure that the BI Engine reservation in that project is large enough to match the size of all tables used in those queries and designate those tables as preferred tables for BI Engine. Only those queries that need to be accelerated should be run in that project.\n\nMinimize your joins\n\nBI Engine works best with pre-joined or pre-aggregated, and with data in a small number of joins. This is particularly true when one side of the join is large and the others are much smaller such as when you query a large fact table joined with a small dimension table. You can combine BI Engine with materialized views that which perform joins to produce a single large, flat table. In this way, the same joins don't have to be performed on every query.\n\nUnderstand the impact of BI Engine\n\nTo understand your utilization of BI Engine, see Monitor BI Engine with Cloud Monitoring, or query the INFORMATION_SCHEMA.BI_CAPACITIES and INFORMATION_SCHEMA.BI_CAPACITY_CHANGES views. Be sure to disable the Use cached results option in BigQuery to get the most accurate comparison. For more information, see Use cached query results.\n\nPreferred tables\n\nBI Engine preferred tables let you limit BI Engine acceleration to a specified set of tables. Queries to all other tables use regular BigQuery slots. For example, with preferred tables you can accelerate only the tables and dashboards that you identify as important to your business.\n\nIf there is not enough RAM in the project to hold all of the preferred tables, BI Engine offloads partitions and columns that haven't been accessed recently. This process frees memory for new queries that need acceleration.\n\nPreferred tables limitations\n\nBI Engine preferred tables have the following limitations:\n\nYou cannot add views into the preferred tables reservation list. BI Engine preferred tables only support tables.\n\nQueries to materialized views are only accelerated if both the materialized views and their base tables are in the preferred tables list.\n\nSpecifying partitions or columns for acceleration is not supported.\n\nJSON type columns are unsupported and are not accelerated by BI Engine.\n\nQueries that access multiple tables are only accelerated if all tables are preferred tables. For example, all tables in a query with a JOIN must be in the preferred tables list to be accelerated. If even one table is not in the preferred list, then the query cannot use BI Engine.\n\nPublic datasets are not supported in the Google Cloud console. To add a public table as a preferred table, use the API or the DDL.\n\nQuotas and limits\n\nSee BigQuery quotas and limits for quotas and limits that apply to BI Engine.\n\nPricing\n\nFor information on BI Engine pricing, see the BigQuery Pricing page.\n\nWhat's next"
    }
}