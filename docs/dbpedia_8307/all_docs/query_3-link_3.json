{
    "id": "dbpedia_8307_3",
    "rank": 3,
    "data": {
        "url": "https://reference.wolfram.com/language/HierarchicalClustering/tutorial/HierarchicalClustering",
        "read_more_link": "",
        "language": "en",
        "title": "Hierarchical Clustering Package—Wolfram Language Documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://reference.wolfram.com/common/framework/img/spikey.en.png",
            "https://reference.wolfram.com/common/framework/img/wolfram.en.png",
            "https://reference.wolfram.com/common/framework/img/slogan.en.png",
            "https://reference.wolfram.com/language/HierarchicalClustering/tutorial/Files/HierarchicalClustering.en/1.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "HierarchicalClustering"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The function FindClusters finds clusters in a dataset based on a distance or dissimilarity function. This package contains functions for generating cluster hierarchies and visualizing the mergers in the hierarchical clustering. Hierarchical clustering function. The Agglomerate function computes a cluster hierarchy of a dataset. Agglomerate accepts data in the same forms accepted by FindClusters. The output from Agglomerate is a nested Cluster object representing the hierarchical clustering.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Hierarchical Clustering Package\n\nThe function FindClusters finds clusters in a dataset based on a distance or dissimilarity function. This package contains functions for generating cluster hierarchies and visualizing the mergers in the hierarchical clustering.\n\nThe Agglomerate function computes a cluster hierarchy of a dataset. Agglomerate accepts data in the same forms accepted by FindClusters. The output from Agglomerate is a nested Cluster object representing the hierarchical clustering.\n\nThis loads the package.\n\nHere is a small numerical dataset.\n\nThis constructs a hierarchical clustering of the data.\n\nHere is some Boolean data.\n\nThis clusters the Boolean data.\n\nHere is some string data.\n\nThis clusters the string data.\n\nThe ClusterFlatten and ClusterSplit functions are utilities for manipulating Cluster objects.\n\nThis splits the clustering from the numerical data into the top 3 subclusters.\n\nThis flattens the cluster.\n\nThe DistanceFunction option is the same as for FindClusters. DistanceFunction defines the distance or dissimilarity between data points, while Linkage defines the dissimilarity between clusters of data points.\n\nLinkage methods determine the intercluster dissimilarity, or fusion level, given the dissimilarities between member elements. Common algorithms include single linkage, which selects the smallest distance between elements; complete linkage, which selects the largest distance between elements; and centroid linkage, which uses the dissimilarity between cluster centroids.\n\nWith Linkage->f, f is a pure function that defines the linkage algorithm. Distances or dissimilarities between clusters are determined recursively using information about the distances or dissimilarities of the unmerged clusters and their counterparts to determine the distances or dissimilarities for the newly merged cluster. If i and j represent clusters to be merged, new distances or dissimilarities are recursively calculated between this merged cluster and the remaining k clusters. The function f defines the recursion and is passed arguments f[dik,djk,dij,ni,nj,nk], where d represents the distances or dissimilarities between clusters and n represents the number of data elements in a cluster. The function returns the dissimilarity between k and the cluster formed by merging clusters i and j.\n\nThis clusters data using the weighted average linkage method.\n\nThe following uses a pure function equivalent to the weighted average linkage.\n\nElements can be labeled using a list of rules or a single rule. Distances or dissimilarities between elements are computed using the expression on the left‐hand sides of the rules. The output Cluster object contains the right‐hand sides of the rules.\n\nThis clusters the data, showing results by label.\n\nIt is also possible to build a cluster hierarchy directly using a distance or dissimilarity matrix—a matrix that provides the pairwise distances or dissimilarities between all data elements in lieu of a distance or dissimilarity function. In a distance matrix, the element in the i th row and j th column stores the distance value between the i th and j th data elements. Note that only the upper‐triangular portion of the matrix is used, that is, i<j, since distances and dissimilarities are symmetric.\n\nThe DistanceMatrix function can be given a DistanceFunction option to define the distance measure.\n\nHere is an example distance matrix.\n\nThis clusters the distance matrix directly, representing data elements by row number.\n\nThis clusters the distance matrix, specifying the corresponding data elements.\n\nThe binary tree structure of the hierarchical cluster leads naturally to a graphical representation—the dendrogram. A dendrogram plot shows a visual representation of the merger history by connecting two lines representing clusters with a bar at their fusion level.\n\nThis generates a basic dendrogram plot.\n\nThis generates a dendrogram using the Manhattan distance.\n\nThis generates a dendrogram using Ward’s linkage method to cluster the data.\n\nThe option LeafLabels is provided to support labeling of the dendrogram. For data, a value of LeafLabels->Automatic will use the data element position for the label, but the option can also take a list of expressions or a function. The function will be applied to each data element to generate the label expression. For Cluster objects, the LeafLabels option can take a function, but not a list or Automatic, as there is no unambiguous mapping between the labels and data points in a Cluster object.\n\nThis generates a dendrogram with automatically generated labels.\n\nThis generates a dendrogram using a list of labels.\n\nThis generates a dendrogram using a label function.\n\nFor large datasets, only a summary of the full dendrogram may be desired. Dendrograms may be truncated using the TruncateDendrogram option by providing an integer or a list of two integers. If given as a list of two integers, the first value specifies the fusion level above which mergers should not be shown, while the second indicates the fusion level under which the dendrogram should be truncated. For a single integer n, TruncateDendrogram->n is equivalent to TruncateDendrogram->{1,n}. A value of ∞ may be given as a second value to show the full clustering without truncation from below. When a cluster is truncated and labels are specified, a box is substituted for a label indicating the size of the cluster that has been truncated.\n\nHere is a larger dataset to cluster. It is based on Fisher's iris data.\n\nThis turns off tie warnings.\n\nThis generates a dendrogram truncated to show only the highest 20 mergers.\n\nThis highlights the two top clusters.\n\nThis generates a dendrogram truncated between levels 2 and 20."
    }
}