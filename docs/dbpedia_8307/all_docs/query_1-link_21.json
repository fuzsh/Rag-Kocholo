{
    "id": "dbpedia_8307_1",
    "rank": 21,
    "data": {
        "url": "https://developer.nvidia.com/blog/gpu-accelerated-hierarchical-dbscan-with-rapids-cuml-lets-get-back-to-the-future/",
        "read_more_link": "",
        "language": "en",
        "title": "GPU-Accelerated Hierarchical DBSCAN with RAPIDS cuML – Let’s Get Back To The Future",
        "top_image": "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Featued-Image.png",
        "meta_img": "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Featued-Image.png",
        "images": [
            "https://developer-blogs.nvidia.com/wp-content/themes/nvidia/dist/images/nvidia-logo_28b633c7.svg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Featued-Image.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Pic1.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Pic2.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Pic3-625x417.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/hdbscan_blog_perf-625x201.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Pic5-625x391.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/GPU-Accelerated_Pic-6.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/09/CoreyNolet-131x131.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/10/Screen-Shot-2021-10-06-at-12.09.26-PM-131x131.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2024/07/arrayfire-kmeans-demo.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2022/12/ai-for-dev-devnews-faster-hdbscan-soft-clustering-blog-1920x1080-1.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2022/12/ai-for-dev-devnews-faster-hdbscan-soft-clustering-blog-1920x1080-1.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2021/12/Sorting-Algorithms_Featured-Image.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2014/07/Rlogo.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2023/10/neural-network-graphic.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2023/04/cuGraph-ama.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2023/01/speech-ai-dev-news-riva-fsi-webinar-1920x1080-1.jpg",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2022/09/image4_16x9-2.png",
            "https://developer-blogs.nvidia.com/wp-content/uploads/2022/09/Morpheus-Digital-Fingerprinting-Spider.png"
        ],
        "movies": [
            "https://notebooks.githubusercontent.com/view/ipynb?bypass_fastly=true&color_mode=auto&commit=ddeb8f7544a77d0cb0aeb7715bc3dc11e0dff06c&docs_host=https%3A%2F%2Fdocs.github.com&enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676973742f636a6e6f6c65742f35323730356361613262613465333735646234396662653336363233653337332f7261772f646465623866373534346137376430636230616562373731356263336463313165306466663036632f6864627363616e5f626c6f675f6e702e6970796e62&logged_in=false&nwo=cjnolet%2F52705caa2ba4e375db49fbe36623e373&path=hdbscan_blog_np.ipynb&repository_id=110575843&repository_type=Gist#f4befefb-489c-4ad5-9e26-20c494c13238",
            "https://notebooks.githubusercontent.com/view/ipynb?bypass_fastly=true&color_mode=auto&commit=fd6a9eaf5a0ddf40b034f7d5078b979475ae5462&docs_host=https%3A%2F%2Fdocs.github.com&enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676973742f636a6e6f6c65742f30353665613936613463353832623131643730326461386534356431353563392f7261772f666436613965616635613064646634306230333466376435303738623937393437356165353436322f6864627363616e5f626c6f675f636c75737465725f636f6d706172652e6970796e62&logged_in=false&nwo=cjnolet%2F056ea96a4c582b11d702da8e45d155c9&path=hdbscan_blog_cluster_compare.ipynb&repository_id=110677258&repository_type=Gist#3714e856-3fec-4497-ab40-4125d5a75aeb",
            "https://notebooks.githubusercontent.com/view/ipynb?bypass_fastly=true&color_mode=auto&commit=84aa2da3b4ff254867a46c8910991c1876459d5f&docs_host=https%3A%2F%2Fdocs.github.com&enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676973742f636a6e6f6c65742f31646166363562343731393066636263383831383964333636336663656638392f7261772f383461613264613362346666323534383637613436633839313039393163313837363435396435662f6864627363616e5f776f72645f656d62656464696e67732e6970796e62&logged_in=false&nwo=cjnolet%2F1daf65b47190fcbc88189d3663fcef89&path=hdbscan_word_embeddings.ipynb&repository_id=110659644&repository_type=Gist#2f752145-37d7-4dd9-be26-874a36961e95",
            "https://notebooks.githubusercontent.com/view/ipynb?bypass_fastly=true&color_mode=auto&commit=4ef72349f9299925933795f7c6c4a444b8d401c6&docs_host=https%3A%2F%2Fdocs.github.com&enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676973742f636a6e6f6c65742f36363338353734343531616438613832326438396661366363396462663361302f7261772f346566373233343966393239393932353933333739356637633663346134343462386434303163362f686c63615f6c756e675f6770755f616e616c797369732d436f7079312532302831292e6970796e62&logged_in=false&nwo=cjnolet%2F6638574451ad8a822d89fa6cc9dbf3a0&path=hlca_lung_gpu_analysis-Copy1+%281%29.ipynb&repository_id=110637266&repository_type=Gist#a268a32f-b681-48a3-965b-b25ca7c5f7a3"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Corey Nolet"
        ],
        "publish_date": "2021-10-06T23:29:00+00:00",
        "summary": "",
        "meta_description": "Read about the HDBSCAN algorithm, a density-based clustering method that is robust and practical for use in industry and scientific computing applications.",
        "meta_lang": "en",
        "meta_favicon": "https://developer-blogs.nvidia.com/wp-content/themes/nvidia/dist/images/favicon_300a1064.ico",
        "meta_site_name": "NVIDIA Technical Blog",
        "canonical_link": "https://developer.nvidia.com/blog/gpu-accelerated-hierarchical-dbscan-with-rapids-cuml-lets-get-back-to-the-future/",
        "text": "We’re going to demonstrate the features currently supported in the RAPIDS cuML implementation of HDBSCAN with quick examples and will provide some real-world examples and benchmarks of our implementation on the GPU. After reading this blog post, we hope you’re excited about the benefits that the RAPIDS’ GPU-accelerated HDBSCAN implementation can provide to your workflows and exploratory data analysis process.\n\nGetting started with HDBSCAN in RAPIDS\n\nRAPIDS provides a set of GPU-accelerated Python libraries that are near drop-in replacements for many popular libraries in the PyData ecosystem. The example notebook below demonstrates the API compatibility between the most widely-used HDBSCAN Python library on the CPU and RAPIDS cuML HDBSCAN on the GPU (spoiler alert – in many cases, it’s as easy as changing an import).\n\nBelow is a very simple example demonstrating the benefits of density-based clustering over centroid-based techniques on certain types of data, as well as the benefits of using HDBSCAN over DBSCAN.\n\nA very basic comparison of the benefits of density-based clustering compared to different clustering algorithms.\n\nHDBSCAN in Practice\n\nDensity-based clustering techniques are a natural fit for many different clustering tasks since they are able to find oddly shaped clusters of varying sizes. Like many other general-purpose machine learning algorithms, there’s no free lunch, so while HDBSCAN has improved on some well-established algorithms, it is still not always going to be the best tool for the job. That said, DBSCAN and HDBSCAN have found notable success in applications ranging from geospatial and collaborative filtering / recommender systems to finance and scientific computing, being used in disciplines ranging from astronomy to accelerator physics to genomics. It’s robustness to noise also makes it useful for outlier and anomaly detection applications.\n\nAs with so many other tools in the data analysis and machine learning ecosystem, computation time has a large impact on production systems and iterative workflows. A faster HDBSCAN means being able to try out more ideas and make better models. Below are a couple of example notebooks that use HDBSCAN to cluster word embeddings and single-cell RNA gene expressions. These are meant to be brief and provide a nice starting point for using HDBSCAN with your own datasets. Have you successfully applied HDBSCAN in industry or in a scientific discipline which we’ve not listed here? Please leave a comment because we would love to hear about it. If you run the example notebooks on your own hardware, please also let us know about your setup and your experience with RAPIDS.\n\nWord Embeddings\n\nVector embeddings represent a popular and very broad range of machine learning applications for clustering. We’ve chosen the GoogleNews dataset because it’s large enough to provide a good indication of our algorithm’s scale and yet small enough that it can be executed on a single machine. The following notebook demonstrates the use of HDBSCAN to find meaningful topics, which arise from highly dense regions in the angular space of word embeddings and uses UMAP to visualize the resulting topic clusters. It uses a subset of the entire dataset for visualization purposes but provides a great demo for tweaking the different hyperparameters and getting familiar with their effect on the resulting clusters. We benchmarked the entire dataset with the default hyperparameter settings, which has a shape of 3Mx300, and stopped the Scikit-learn contrib implementation on the CPU after 24 hours. The RAPIDS implementation took roughly ~22.8mins.\n\nSingle-Cell RNA\n\nBelow is an example workflow based on tutorial notebooks from the Scanpy and Seurat libraries. This example notebook is taken from the RAPIDS single-cell examples repository, which also contains several notebooks demonstrating the use of RAPIDS for single-cell and tertiary analysis. On a DGX-1 (Intel 40-core Xeon CPU + NVIDIA V100 GPU), we found a 29x speedup for HDBSCAN (~1s on the GPU instead of ~29s with multiple CPU threads) using the first 50 principal components on a dataset containing the gene expressions for ~70k lung cells.\n\nAccelerating HDBSCAN on GPUs\n\nThe RAPIDS cuML project includes an end-to-end, GPU-accelerated HDBSCAN and provides both Python and C++ APIs. As with many of the neighborhood-based algorithms in cuML, it leverages the brute-force kNN from Facebook’s FAISS library to accelerate the construction of the kNN graph in mutual reachability space. This is currently a major bottleneck, and we’re working on ways to improve it further with options for both exact and approximate nearest neighbors.\n\ncuML also includes an implementation of single-linkage hierarchical clustering, which provides both C++ and Python APIs. GPU-acceleration of the single-linkage algorithm required a new primitive to compute the minimum spanning tree. This primitive is graph-based so that it can be reused across both the cugraph and cuml libraries. Our implementation allows restarting so that we can connect an otherwise disconnected knn graph and improve scalability by not having to store an entire matrix of pairwise distances in GPU memory.\n\nAs with most of the C++ algorithms in cuML, these rely heavily on the RAPIDS Analytics Framework Toolkit project (RAFT) for most of our ML and Graph-based primitives. Finally, they leverage the great work done by Leland McInnes and John Healy to GPU-accelerate even the cluster condensing and selection steps, keeping the data on the GPU as much as possible and providing an additional boost to performance as data sizes scale into the millions.\n\nBenchmarks\n\nWe used a benchmark notebook provided by the reference implementation on CPU from McInnes et al. to compare it against cuML’s new GPU implementation. The reference implementation is highly optimized for cases of lower dimensionality, and we compare the higher dimensional cases against the brute-force implementation, which makes heavy use of Facebook’s FAISS library.\n\nBenchmarks were performed on a DGX-1, which contains a 40-core Intel Xeon CPU and NVIDIA 32gb V100 GPUs. Even with a linear scaling with respect to the number of dimensions and quadratic scaling with respect to the number of rows, we observe that the GPU still maintains near-interactive performance even as the number of rows exceeds 1M.\n\nWhat’s in Flux?\n\nWhile we have successfully implemented the core of the HDBSCAN algorithm on the GPU, opportunities remain to improve its performance even further, such as by speeding up the brute-force kNN graph construction, pruning out distance computations, and even using an approximate kNN. While Euclidean distance covers the widest range of uses, we would also like to expose other distance metrics which are available in the Scikit-learn Contrib implementation.\n\nThe scikit-learn contrib implementation also contains a lot of nice additional features which are not included in the seminal paper on HDBSCAN, such as semi-supervised and fuzzy clustering. We also have the building blocks for robust single-linkage and the OPTICS algorithm, which would be nice future additions to RAPIDS. Finally, we’re hoping to support sparse inputs in the future.\n\nIf you find that one or more of these features could make your application or data analysis project more successful, even if it’s not listed here, head on over to our Github project and create an issue.\n\nSummary\n\nHDBSCAN is a relatively new density-based clustering algorithm that “stands on the shoulders of giants”, improving upon the well-known DBSCAN & OPTICS algorithms. In fact, it’s core primitives have also increased reuse and provided building-blocks for other algorithms, such as a graph-based minimum spanning tree and single-linkage clustering within the RAPIDS ML and Graph libraries.\n\nLike other algorithms for data modeling, HDBSCAN is not the perfect tool for every job, however it has found much practical use in both industry and scientific computing applications. It can also be a great companion alongside dimensionality reduction algorithms like PCA or UMAP, especially when used in exploratory data analysis applications."
    }
}