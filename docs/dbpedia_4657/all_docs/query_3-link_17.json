{
    "id": "dbpedia_4657_3",
    "rank": 17,
    "data": {
        "url": "https://docs.coregames.com/tutorials/damageable_object_basics/",
        "read_more_link": "",
        "language": "en",
        "title": "Damageable Object Basics",
        "top_image": "https://docs.coregames.com/assets/icons/og-banner.jpg",
        "meta_img": "https://docs.coregames.com/assets/icons/og-banner.jpg",
        "images": [
            "https://docs.coregames.com/assets/icons/favicon-196x196.png",
            "https://docs.coregames.com/assets/icons/favicon-196x196.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/cc.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/core_content_objects.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/advanced_assault_rifle.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/damageable_object.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/damageable_properties.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_damageable_object.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_mesh.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_broken.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_debris.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_gem.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_broken_template.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/vase_finished.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/shotgun.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/simple_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/effects_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/effect_general_explosion.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/chained_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/chained_general_explosion.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/chained_level2_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/exploding_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/general_scatter.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/cone_45.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/combined_dummy.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/combined_dummy_client.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/combined_dummy_network.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/advanced_dummy_template.png",
            "https://docs.coregames.com/img/DamageableObjects/Basics/server_script_properties.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Manticore Games"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "API Documentation & Tutorials for the Core Platform.",
        "meta_lang": "en",
        "meta_favicon": "../../assets/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.coregames.com/tutorials/damageable_object_basics/",
        "text": "Overview\n\nIn this tutorial you will be learning how to create Damageable Objects from the very basics, to creating more complex objects. You will gain the knowledge to be able to create assets that can be placed in the world which can be destroyed in many ways. For example, a training dummy that can have pieces of it be destroyed.\n\nCompletion Time: ~1 hour\n\nKnowledge Level: None needed.\n\nSkills you will learn:\n\nWhere to find damageable objects in Core Content.\n\nWhat the damageable object properties are for.\n\nCreating basic damageable objects.\n\nNested damageable objects.\n\nChanging damageable object properties from a Lua script.\n\nImport Asset from Community Content\n\nYou will be importing an asset from Community Content that will contain assets to help build up the different components for the dummies. These assets have been designed for ease of use so you can get straight in to learning all about Damageable Objects.\n\nOpen the Community Content window.\n\nSearch for Damageable Objects by CoreAcademy.\n\nClick Import.\n\nDamageable Object Templates\n\nBefore you dive into learning how to create your own damageable objects, let us take a look at the default damageable objects that Core provides for you in Core Content. This will give you an idea of what damageable objects can do.\n\nAdd Damageable Objects\n\nDamageable objects can be found in the Core Content window. All of the damageable objects can be placed into the Hierarchy, however, there is one damageable object that is special which we will talk about in the next section.\n\nIn the Core Content window, search for damageable to find the damageable objects. Drag any of the following into your Hierarchy. Make sure to spread them out so they have space between each other. Feel free to place as many as you like.\n\nDamageable Crate\n\nDamageable Hazard Barrel\n\nDamageable Sandbag\n\nDamageable Fire Hydrant\n\nDamage Damageable Objects\n\nDamageable objects from Core Content will not do anything when you play the game. Those damageable objects need to take damage so when their health reaches 0, they will be destroyed. A good way to do damage to damageable objects is by adding a weapon to the Hierarchy that you can pickup and use to shoot the damageable objects.\n\nIn Core Content, search for advanced assault to find Advanced Assault Rifle.\n\nDrag the Advanced Assault Rifle template into the Hierarchy.\n\nTest the Game\n\nTest the game by picking up the Advanced Assault Rifle and shooting the damageable objects. You will see they will be destroyed, and when they are destroyed, audio, and effects are played.\n\nNotice the Damageable Sandbag object can have the individual sandbags destroyed.\n\nBasic Damageable Object\n\nIn the previous section, you may have spotted the Damageable Object when searching for damageable in the Core Content window. This object on its own is not too useful, it will have no visual geometry, and can not be destroyed. For a damageable object to take damage and be destroyed, it requires geometry inside the damageable object that has collision. When these objects get hit (for example, by bullets, or other forms of damage), the damage is applied to the closest damageable object parent.\n\nIn this section you will learn about all the properties the damageable object has, and what they do.\n\nNetworked Damageable Object\n\nFor a damageable object to work correctly, it needs to be networked. By default the damageable objects in Core Content are networked, including the basic Damageable Object. A networked object means that it will be sent to other players in the game so they can also see and react to it. This keeps things in sync between players.\n\nDamageable Object Properties\n\nThe damageable object has a Damageable group in the Properties window that contain all the properties that apply to objects that implement the Damageable Interface. What this means, is that objects that have health and can be killed will have these properties. For example, Vehicles can be setup to be destroyed because they have the Damageable properties.\n\nUnderstanding the properties will give you a lot of options to create damageable objects. You can do a lot of interesting things with damageable objects without any Lua knowledge, but learning even a little bit can increase the things you can do with damageable objects.\n\nAll damageable properties can be changed from a Lua script at runtime when the game is running.\n\nMax Hit Points\n\nThe Max Hit Points property determines the maximum hit points of the object. Any value that is 0 or lower will be ignored, and the damageable object will be instantly destroyed when the game is played.\n\nStarting Hit Points\n\nThe Starting Hit Points property determines the hit points of the object when the object is spawned. This value can not be greater than the Max Hit Points.\n\nThis property could be useful if you want your damageable object to start at a lower health, and slowly regenerate the health until it reaches Max Hit Points.\n\nStart Invulnerable\n\nWhen the Start Invulnerable property is enabled (checked), the damageable object will not take any damage. Meaning, the health will not go down when it receives damage.\n\nNotice in the video below that no matter how much the damageable object is shot, its health does not go down, and can't be destroyed.\n\nStart Immortal\n\nWhen the Start Immortal property is enabled (checked), the damageable object does not automatically die when the hit points reach 0 or lower. So it can still receive damage, but can not be killed.\n\nDestroy on Death\n\nWhen the Destroy on Death property is enabled (checked), when the damageable object is killed (health reaches 0 or lower), then the damageable object will be destroyed. This is useful because the damageable object will take care of removing its self from the world.\n\nDestroy on Death Delay\n\nThe Destroy on Death Delay will delay the destroying of the damageable object based on the property value that is set (in seconds).\n\nDestroy on Death Client Template\n\nThe Destroy on Death Client Template will spawn a template on the client at the location of the damageable object after the Destroy on Death Delay. This is an efficient way of spawning visual effects, and anything else for the client. For example, when a damageable object is destroyed, smoke effect is spawned.\n\nIn the video below, you will see a template is set for the property that will be spawned when the damageable object is destroyed.\n\nDestroy on Death Networked Template\n\nThe Destroy on Death Networked Template will spawn a networked template at the location of the damageable object after the Destroy on Death Delay. This is useful for spawning other gameplay objects from a damageable object that is destroyed. For example, when a damage object is destroy, it could spawn a pickup for all players to collect.\n\nIn the video people, you will see a template is set for the property that will be spawned when the damageable object is destroyed.\n\nMake sure that the template you use for this property is Networked.\n\nTemplate Spawn Location\n\nWhen using either the Destroy on Death Client Template or Destroy on Death Networked Template properties, it is important to know where these will spawn so the templates are at the right position and rotation when the damageable object is destroyed. Both templates will spawn at the position and rotation of the nearest parent damageable object, meaning the spawned templates will inherit the transform data.\n\nFor example, in this video below, the damageable object is rotated, but the cube is moved up in the Z direction. This means that the template is spawned when the damageable object is destroyed, it will match the rotation and position.\n\nDestructible Vase\n\nIn this section you will create a destructible vase that can be broken that will have a couple of stages, and then spawn a Gem.\n\nCreate Vase Damageable Object\n\nFor an object to become destructible, it needs to have collision, and be a child of a Damageable Object. When the child of a damageable object gets hit by something that can apply damage, then this damage will be applied to the parent damageable object.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Vase Damageable Object.\n\nAdd Vase Object\n\nYou will need to add an object as a child of the Vase Damageable Object that has collision.\n\nIn Core Content search for Vase to find the Porcelain Vase 03 object and place it as a child of the Vase Damageable Object in the Hierarchy. When this object takes damage (for example, from a weapon), it will look at the parent Vase Damageable Object and apply the damage to that.\n\nWhen adding objects as children of a Damageable Object, you may be asked if you want to make the children Networked. For any object that will have collision on, then those objects should always be networked.\n\nCreate Vase Broken Damageable Object\n\nNow that you have the main vase object, you will now create another damageable object that will be the broken version of the vase. For the moment this will stay in the Hierarchy because you will be modifying the properties later.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Vase Broken Damageable Object.\n\nIn Core Content search for Vase to find the Broken Porcelain Vase 03 object and place it as a child of the Vase Broken Damageable Object in the Hierarchy.\n\nIn the Hierarchy, right click on the Vase Broken Damageable Object and select Create a New Template From This.\n\nCreate Vase Debris Template\n\nFor the final stage of the vase, a vase debris object will be spawned.\n\nIn Core Content search for Vase to find the Porcelain Vase Debris object and place it in the Hierarchy.\n\nIn the Hierarchy, right click on the Porcelain Vase Debris object and select Create a New Template From This.\n\nDelete the Porcelain Vase Debris object from the Hierarchy.\n\nCreate Gem Object\n\nWhen the Vase Broken Damageable Object is destroyed, it will also spawn a gem object. This could be a pickup that players in your game can collect.\n\nObjects that are spawned when a damageable object has been destroyed will inherit the position of the damageable object. This is good for most cases, but there are times where the spawned object needs to be offset. For example, spawning a gem may be too low into the ground. This is an easy problem to solve by using a group as the parent of the object, and then positioning the object in the group.\n\nCreate a new Group in the Hierarchy and call it Gem.\n\nIn Core Content search for Diamond Gem to find Gem - Diamond 6-Sided Polished, and add it in the Gem group in the Hierarchy.\n\nMove the object up on the Z position so it is not in the ground.\n\nIn the Hierarchy, right click on the Gem group and select Enable Networking.\n\nIn the Hierarchy, right click on the Gem group again and select Create a New Template From This.\n\nDelete the Gem group from the Hierarchy.\n\nThe broken vase template needs to be updated so that it will spawn the templates when it has been destroyed.\n\nAdd Destroy on Death Client Template\n\nWhen the broken vase damageable is destroyed, the client template will be spawned. This will be the debris version of the vase.\n\nIn the Hierarchy, click on the Vase Broken Damageable Object so it is the active object.\n\nIn Project Content search for Vase Debris to find Porcelain Vase Debris.\n\nAdd the template Porcelain Vase Debris to the custom property Destroy on Death Client Template.\n\nAdd Destroy on Death Networked Template\n\nWhen the broken vase damage is destroyed, the networked template will be spawned. This will be the Gem.\n\nIn the Hierarchy, click on the Vase Broken Damageable Object so it is the active object.\n\nIn Project Content search for Gem.\n\nAdd the template Gem to the custom property Destroy on Death Networked Template.\n\nWith the client and networked templates added, the Vase Broken Damageable Object in the Hierarchy can now be updated.\n\nIn the Hierarchy select Vase Broken Damageable Object so it is the active object.\n\nRight click on Vase Broken Damageable Object and select Update Template From This.\n\nDeleted Vase Broken Damageable Object from the Hierarchy.\n\nThe final thing left to do, is add the Vase Broken Damageable Object template to the Vase Damageable Object in the Hierarchy so that when it is destroyed, it will spawn the broken vase.\n\nIn the Hierarchy, click on the Vase Damageable Object so it is the active object.\n\nIn Project Content search for Vase Broken to find Vase Broken Damageable Object.\n\nAdd the template Vase Broken Damageable Object to the custom property Destroy on Death Networked Template.\n\nAdd a Weapon\n\nYou will need to add a weapon to the game so that it can be picked up and used to destroy the vase.\n\nIn Core Content search for shotgun to find Advanced Shotgun.\n\nAdd the Advanced Shotgun template to the Hierarchy.\n\nTest the Game\n\nTest the game to make sure the following work:\n\nBroken vase is spawned when the vase has been damaged.\n\nDebris vase is spawned when the broken vase has been damaged.\n\nGem is spawned.\n\nBasic Dummy\n\nIn this section you will setup the most basic damageable object that will have some geometry and collision that can be destroyed, in future sections you will be adding additional layers to improve the dummy.\n\nFor the basic dummy, the properties on the damageable object will not be changed, which will show you how easy it can be to create objects that can be destroyed by the player.\n\nDestroying Damageable Objects\n\nTo destroy any of the damageable objects throughout this tutorial, you will need to add a weapon from Core Content. For example, search for advanced assault to find the Advanced Assault Rifle and add it to your Hierarchy so you can pick it up when you play the game.\n\nCreate Damageable Object\n\nWhen you want to create your own custom damageable objects, you will want to start with the basic Damageable Object from Core Content. On its own, it is not that useful because it has no visual, and no collision. All damageable objects need some collision for it to register damage, and in most cases you will want some geometry so you can see what to damage.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Simple Damageable Object.\n\nIn Project Content search for Simple Dummy and add it as a child of Simple Damageable Object.\n\nMove the Simple Damageable Object so it is not in the ground, and away from the player.\n\nTest the Game\n\nEnter player mode, pickup the weapon, and shoot the dummy. The Simple Damageable Object has 100 health, so after a few shots you will see the dummy disappear. It is not very satisfying, but it shows you how easy it is to make objects that can be destroyed.\n\nEffects Dummy\n\nIn this section, you will be create a dummy that will spawn an effect when the dummy is destroyed. Damageable objects have a property called Destroy on Death Client Template, which will be spawned when the damageable object is destroyed (killed). This effect will be spawned for each player, which will make the death of the dummy far more satisfying.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Effects Damageable Object.\n\nIn Project Content search for Effects Dummy and add it as a child of Effects Damageable Object.\n\nMove the Effects Damageable Object so it is not in the ground, and away from the player.\n\nAdd Destroy on Death Client Template\n\nThe Destroy on Death Client Template can be set to a template that will spawn when the dummy has been killed. You can setup your own death templates that can do anything you imagine.\n\nSelect the Effects Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for General Explosion VFX and drag it onto the Destroy on Death Client Template property.\n\nTest the Game\n\nPlay the game and shoot the dummy. You should now see that when the dummy is killed, an explosion is played. Comparing to the Simple Dummy, it is far more satisfying to destroy, and this is done by setting one property on the damageable object.\n\nChained Dummy\n\nIn this section you will be creating a damageable object that will spawn a level 2 dummy after the first dummy is killed. This level 2 dummy could have more health or display different effects when it is killed. This allows you to chain damageable objects that are spawned when the previous one is killed.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Chained Damageable Object.\n\nIn Project Content search for Chained Level 1 Dummy and add it as a child of Chained Damageable Object.\n\nMove the Chained Damageable Object so it is not in the ground, and away from the player.\n\nAdd Destroy on Death Client Template\n\nThe Destroy on Death Client Template will spawn an effect when the first dummy is killed.\n\nSelect the Chained Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for General Explosion VFX and drag it onto the Destroy on Death Client Template property.\n\nAdd Destroy on Death Networked Template\n\nThe Destroy on Death Networked Template property can be used to spawn templates that have additional gameplay logic. For example, spawning a loot item that all players can see and pickup. Any template that you set for this property needs to be Networked so all players can see the object and get updates about it.\n\nA level 2 dummy template has been created that you will be adding into the property, this object is also a damageable object. This level 2 dummy will have a different decal color and play a different colored explosion when killed.\n\nSelect the Chained Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for Chained Level 2 Dummy and drag it onto the Destroy on Death Networked Template property.\n\nTest the Game\n\nPlay the game and test by killing the dummy.\n\nMake sure the first dummy can be killed and plays the general explosion effect.\n\nMake sure the second dummy is spawned, and can also be killed and plays a different explosion effect.\n\nExploding Dummy\n\nSo far the dummies have been very simple to setup, and with no Lua scripting you can create some interesting results just by using the properties. In this section you will be creating an exploding dummy. After the dummy has been killed, a networked template will be spawned using the Destroy on Death Networked Template property. The template that is spawned contains a dummy that is setup to be exploded into various pieces. This exploding effect is done by a small script that is inside the template, meaning it will run as soon as it is spawned.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Exploding Damageable Object.\n\nIn Project Content search for Exploding Dummy and add it as a child of Exploding Damageable Object.\n\nMove the Exploding Damageable Object so it is not in the ground, and away from the player.\n\nAdd Destroy on Death Networked Template\n\nWhen the Exploding Damageable Object is killed, a template will be spawned that contains a Lua script that will loop over all the meshes that support Debris Physics by setting isSimulatingDebrisPhysics to true. The template that will be spawned has already been setup so that objects which support Debris Physics are in a Supported group.\n\nSelect the Exploding Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for General Scatter and drag it onto the Destroy on Death Networked Template property.\n\nThe ScatterClient Script\n\nIn the General Scatter template, there is a script called ScatterClient. Open up the ScatterClient script and take a look at the code. The code below contains annotations that briefly explain what is happening.\n\nAny mesh that supports Debris Physics will be in a group called Supported.\n\nAny mesh that does not support Debris Physic will be in a group called Not Supported.\n\nAll the meshes not supported and destroyed instantly.\n\nStore a reference to all the StaticMesh objects that are in the Supported group.\n\nThe amount of power to apply when setting the velocity of the objects.\n\nA RandomStream instance they will be used to get a random Vector3 later.\n\nLooping through all the static meshes that are in the Supported group.\n\nDebris physics needs collision to be turned on.\n\nTurn off camera collision to prevent interrupting the player's camera if objects come towards them.\n\nTurn on debris physic by setting isSimulatingDebrisPhysics to true.\n\nSet the lifeSpan of the object so it is automatically cleaned up. A random number between 2.5 and 5 is used.\n\nSet the velocity of the object by passing in a random Vector3 that is generated by the GetVector3FromCone function. Because the objects need to go in an upwards direction, the world Vector.UP is used.\n\nIf any meshes were in the Supported group that don't support debris physics, then destroy them. These objects will show up in the Event Log as a warning.\n\nGetVector3FromCone Visualization\n\nThe GetVector3FromCone function will return a random Vector3. The function takes 2 inputs (arguments) that specify the angles of the cone. Below is a visual representation of how this would look when using 45 for the horizontal angle, and 45 for the vertical angle.\n\nThe horizontal angle is in blue, and the vertical angle is in red.\n\nTest the Game\n\nTest the game to make sure when the dummy is killed, the scatter template is spawned that explodes all the pieces everywhere.\n\nCombined Dummy\n\nWith the knowledge from the previous sections, it is now possible to layer up these effects by creating damageable objects that are far more interesting to kill by your players.\n\nThe templates have already been created for you that will play an explosion effect when the dummy is killed, explode all the static meshes over the place, and spawn a level 2 dummy that will also have the same effects from the first dummy.\n\nIn Core Content search for Damageable Object and add it to your Hierarchy.\n\nRename Damageable Object to Combined Damageable Object.\n\nIn Project Content search for Combined Level 1 Dummy and add it as a child of Combined Damageable Object.\n\nMove the Combined Damageable Object so it is not in the ground, and away from the player.\n\nAdd Destroy on Death Client Template\n\nThe Destroy on Death Client Template will spawn an explosion effect when the dummy has been killed.\n\nSelect the Combined Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for General Explosion VFX and drag it onto the Destroy on Death Client Template property.\n\nAdd Destroy on Death Networked Template\n\nThe Destroy on Death Networked Template property will be set to template that is also a damageable object. This shows you how easy it is to create damageable objects that can be added to existing damageable objects to get far more interesting effects. This is all possible without any Lua scripting, because the ScatterClient script is an optional component to improve the effects when the dummy has been killed.\n\nSelect the Combined Damageable Object in the Hierarchy so it becomes the active object.\n\nIn Project Content search for Combined Level 2 Dummy and drag it onto the Destroy on Death Networked Template property.\n\nTest the Game\n\nTest the game to make sure the level 1 dummy can be killed, and a level 2 dummy is spawned that can also be killed.\n\nAdvanced Dummy\n\nIn this section you will be creating a more advanced dummy that will require the player to destroy individual parts of the dummy first before it can be killed. You will be setting up nested damageable objects for the individual parts, and also writing some Lua code to communicate between the server and the client to show the amount of damage the player is doing to each part.\n\nThe damageable object for the advanced dummy has the Start Invulnerable property enabled (checked). This will be controlled from a Lua script that will keep track of how many parts of the dummy have been destroyed. Once all the parts have been destroyed, the main body (barrel) will become vulnerable.\n\nAdd Advanced Dummy Template\n\nThe Advanced Dummy Template in Project Content has been setup for you already. The properties for the client and networked templates have been set.\n\nIn Project Content search for Advanced Dummy and add it to the Hierarchy.\n\nDeinstance the Advanced Dummy template, and open up the folder to see the objects.\n\nCreate Nested Damageable Objects\n\nThere are 3 areas of the dummy that need to have their own damageable object. For each object listed below, create a Damageable Object inside the Advanced Dummy and drag the part as a child of the damageable object. Make sure to copy the Position property of the group and set that for the damageable object, otherwise when applying damage later on the damage numbers will not show in the correct position.\n\nHead Damageable Object\n\nCopy the Position of the Head group from the Properties window.\n\nCreate a Damageable Object inside the Advanced Dummy and rename it to Head.\n\nPaste the Position that was copied earlier on to the Head damageable object.\n\nDrag the Head group onto the Head damageable object.\n\nLeft Hand Damageable Object\n\nCopy the Position of the Left Hand group from the Properties window.\n\nCreate a Damageable Object inside the Advanced Dummy and rename it to Left Hand.\n\nPaste the Position that was copied earlier on to the Left Hand damageable object.\n\nDrag the Left Hand group onto the Left Hand damageable object.\n\nRight Hand Damageable Object\n\nCopy the Position of the Right Hand group from the Properties window.\n\nCreate a Damageable Object inside the Advanced Dummy and rename it to Right Hand.\n\nPaste the Position that was copied earlier on to the Right Hand damageable object.\n\nDrag the Right Hand group onto the Right Hand damageable object.\n\nCreate MakeVulnerableServer Script\n\nA script will be created that will keep track of how many parts have been destroyed. Once all the parts of the dummy have been destroyed, the dummy will then become vulnerable and can be killed.\n\nCreate a script called MakeVulnerableServer and place it as a child of the Advanced Dummy object in the Hierarchy. This script is in the Default Context.\n\nAdd Custom Properties\n\nThe MakeVulnerableServer script needs to know about the different damageable object parts. These can be added as a custom property to the script.\n\nAdd the Head damageable object to the MakeVulnerableServer script as a custom property and rename it to HeadDamageable.\n\nAdd the Left Hand damageable object to the MakeVulnerableServer script as a custom property and rename it to LeftHandDamageable.\n\nAdd the Right Hand damageable object to the MakeVulnerableServer script as a custom property and rename it to RightHandDamageable.\n\nAdd Variables\n\nOpen up the MakeVulnerableServer script and add the following variables.\n\nThe ROOT variable will be a reference to the damageable object that contains everything.\n\nThe parts table contains all of the nested damageable objects that will be looped over to set up the events. This is so that you can keep track of how many parts have been destroyed.\n\nThe partsDestroyed variable will be incremented for each part destroyed.\n\nCreate Damageable Object Loop\n\nYou will need to loop over all the damageable objects in the parts table and connect a destroyEvent and damagedEvent. The destroyEvent will fire when the damageable object part is destroyed. This will also increment the partsDestroyed counter by 1. If the total amount of parts destroyed is equal to the total child damageable objects, then the isVulnerable property on the parent damageable object is set to false, meaning it can now be damaged and killed.\n\nThe damagedEvent is also connected for each part, this will broadcast to the player who applied damaged so they can see how much damage they are doing to the part. The broadcast event needs to be unique for the whole dummy in case there are multiple dummies in the word. In this case you can concatenate the ROOT.id with the show_damage_ string. This can then be connected on the client as the ROOT.id value will be the same. This prevents other dummies in the game also receiving the event.\n\nSend the damage amount done and the damageable object position so the damage numbers show in the correct place.\n\nConnect damagedEvent\n\nThe damageable object for the dummy also needs the damagedEvent connected so that the damage numbers will show up to the player.\n\nThe MakeVulnerableServer Script\n\nMakeVulnerableServer\n\nlocal ROOT = script.parent local parts = { script:GetCustomProperty(\"HeadDamageable\"):WaitForObject(), script:GetCustomProperty(\"RightHandDamageable\"):WaitForObject(), script:GetCustomProperty(\"LeftHandDamageable\"):WaitForObject() } local partsDestroyed = 0 for i, part in ipairs(parts) do part.destroyEvent:Connect(function() partsDestroyed = partsDestroyed + 1 if partsDestroyed == #parts then ROOT.isInvulnerable = false end end) part.damagedEvent:Connect(function(obj, damage) Events.BroadcastToPlayer(damage.sourcePlayer, \"show_damage_\" .. ROOT.id, damage.amount, obj.id) end) end ROOT.damagedEvent:Connect(function(obj, damage) Events.BroadcastToPlayer(damage.sourcePlayer,\"show_damage_\" .. ROOT.id, damage.amount, root.id) end)\n\nCreate ShowDamageClient Script\n\nCreate a script called ShowDamageClient and place it in to the Client folder inside the Advanced Dummy in the Hierarchy. This script will be responsible for showing the damage numbers to the player when the parts receive damage.\n\nAdd Variable\n\nOpen up the ShowDamageClient script and add the following variable that is a reference to the dummy damageable object.\n\nCreate ShowDamage Function\n\nCreate a function called ShowDamage that will receive the damageAmount and position of the damageable object that has took damage. This function will use the UI.ShowFlyUpText and setting the optional parameters for isBig to true and color to Color.YELLOW.\n\nConnect Event\n\nConnect up the broadcast event that is sent from the server. The event name is unique for this dummy because it is using the ROOT.id in the event name. This prevents the event being fired for other dummies in the game.\n\nThe ShowDamageClient Script\n\nShowDamageClient\n\nlocal ROOT = script.parent.parent local function ShowDamage(damageAmount, position) UI.ShowFlyUpText(tostring(damageAmount), position, { isBig = true, color = Color.YELLOW }) end Events.Connect(\"show_damage_\" .. ROOT.id, ShowDamage)\n\nTest the Game\n\nTest the game to make sure the following work:\n\nApplying damage to the body of the dummy does no damage.\n\nApplying damage to the parts show the damage numbers.\n\nEach part can be destroyed.\n\nThe dummy can be killed and plays fireworks.\n\nSummary\n\nDamageable objects are a lot of fun to experiment with. You can get polished results without needing to to write any Lua code because of the custom properties that are provided to you. Being able to add layers onto the damageable objects opens up many ideas, and with a little Lua knowledge, those ideas can be endless.\n\nLearn More\n\nDamageable Objects Reference | Damageable Object API | Boss Fight Tutorial | UI API | Events API | Debris Physics Reference\n\nWas this page helpful?\n\nThanks for your feedback!\n\nThanks for your feedback! Help us improve this page by using our feedback form."
    }
}