{
    "id": "dbpedia_4657_3",
    "rank": 3,
    "data": {
        "url": "https://forum.weightgaming.com/t/unnamed-object-person-inflation-game-dead/13649",
        "read_more_link": "",
        "language": "en",
        "title": "Unnamed object/person inflation game (Dead)",
        "top_image": "https://d1au4vljv71t01.cloudfront.net/forum/original/2X/d/d660b3a4e1f10cd83c5a3e2a97d33fcfdb9585ca.png",
        "meta_img": "https://d1au4vljv71t01.cloudfront.net/forum/original/2X/d/d660b3a4e1f10cd83c5a3e2a97d33fcfdb9585ca.png",
        "images": [
            "https://img.youtube.com/vi/3aHZgMBIYy0/hqdefault.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "inflation"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-01-07T20:19:02+00:00",
        "summary": "",
        "meta_description": "EDIT (10/18/2021, 9:09 PM): \nRecently, my system drive died, causing me to lose two updates I had ready to go. I’m not willing to re-do that work, so this project, in current form, is officially dead. I plan to revisit t&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://d1au4vljv71t01.cloudfront.net/forum/optimized/1X/6dcdca1ddbef91cc119c029f54e8ceddcb47cbaf_2_32x32.png",
        "meta_site_name": "Weight Gaming",
        "canonical_link": "https://forum.weightgaming.com/t/unnamed-object-person-inflation-game-dead/13649",
        "text": "EDIT (10/18/2021, 9:09 PM):\n\nRecently, my system drive died, causing me to lose two updates I had ready to go. I’m not willing to re-do that work, so this project, in current form, is officially dead. I plan to revisit the idea eventually, most likely going to stick to one mechanic or the other with maybe a few changes here and there for the next time I make a game. I’m leaving the download link up.\n\nA QUICK NOTE.\n\nIt’s hard to find, but you DO NOT have to pay to get the game! I don’t like how Itch does it because it probably put a few people off from playing the game, but there’s a small text hyperlink above the payment field that doesn’t really look like a hyperlink. Simply click on that if you don’t wanna pay anything for it, especially as unfinished as it was at release.\n\nIf I can find the most recent version somewhere, I think I had sent it to someone for testing, I’ll post that too.\n\nThank you all for your interest, it really upped my spirits while I was working on the game. Here’s hoping I can look back on this and have it give me the energy to start on a brand new project, probably with more of a goal laid out in mind.\n\n~End Update~\n\nThread for a game I’m making based around the concept of having several different types of inflation that a character/object can have. Here are the inflation types planned, from lightest to heaviest:\n\nHelium (self explanatory) the Character/object floats a certain distance above the ground. This distance is determined by their “level” of inflation, to keep things easy for coding.\n\nO2: the Character/object is far lighter, making them jump higher, fall slower, and stop faster, as well as making objects far easier to push.\n\nNormal: No inflation.\n\nWater: The Character/object is far heavier, but also larger, making it easier to jump on said objects, and making the character sink in water, when in water, a character will slowly increase in level until they are maxed out. Jump height is lowered, as is speed, and it takes longer to stop, but due to the increased mass, some objects may be pushable in this state.\n\nFat: This only works for Characters. It’s far heavier, like water, but you can float on water, speed and jump height will decrease as time goes on, and the character will only lose weight by transitioning to the next/previous level.\n\nEdit 1/31/2021: First Playable (V0-U0)\n\nWell, finally time to release A version of this. This is not a very complex version, and is little more than a very early alpha build and a proof of concept at this stage. Untitled Inflation Metroidvania (V0-U0) by ImaginaryMechanisms\n\nChanges (or, well, devlog, at this point):\n\n-Added a placeholder character for testing purposes.\n\n-Added water and air inflation, both of which are tied to the R and T keys.\n\n-Added a simple gamedown/reset script.\n\n-Added two test levels that loop on each other.\n\nPlanned:\n\nReworking inflation mechanics to use raycasting.\n\nCreating a better player model.\n\nEdit 2/26/2021: Second Playable (V0-U1)\n\nFirst off, made a mistake last time I edited this post. It’s in V0 right now, not V1 yet. That has now been corrected.\n\nAnyway, it’s still not THAT complex, but it’s a little better now. Here’s the download. Untitled Inflation Metroidvania (V0U1) by ImaginaryMechanisms\n\nChanges:\n\nAdded in an “inflation gun” to use instead of R & T. (placeholder asset for now)\n\nAdded a system for selecting a type of inflation, and to go along with it, objects are now color codes with whatever they’re filled with.\n\nRemoved the old, funky button, replaced it with a much simpler example.\n\nAdjusted jump height.\n\nChanged shaders.\n\nModified the background objects to be less painful to view.\n\nUpdated UI to reflect the changes in how inflation works.\n\nIt’s hard to explain, but I’ll try to describe it.\n\nI’m setting the mass of each object on the engine side of things, right? So for example, I have a cube that’s the size of the player at let’s say 20 mass, and I have a cube twice that size at 50. I want to multiply these masses by a modifier in code when I inflate them, but I want to use the same script for each, which currently I can’t do. (let’s say since I don’t have it open in front of me the script is something like “ObjHeavyInf” since these are objects meant to be inflated before they can be moved)\n\nCurrently I specifically have to set mass in code through rb.mass before I can change it, and can only do that by straight up changing the value manually as well, but what I WANT to do is have the code find the value set in the engine (which always exists at start up, even when I’m not setting the value IN the code) at startup, I then want it to assign THAT to an empty float/integer value (set as defaultMass so I know what it is when I go through code, this is a LOCAL value that is drawn only by the script on the object)\n\nThis number becomes the “default” that the code references when an object is returned to it’s normal state, and is the number that is multiplied and assigned as the new mass value whenever I inflate it.\n\nIn other words, I need some way to tell the code that the mass is “x” without making a new script with new code or a lookup table to manually put the number in, to streamline asset/prefab creation.\n\nSo it would eventually look like this (keep in mind this isn’t C#, or really ACTUAL code, this is just an example of what I WANT the code to do):\n\nEngine: Mass is “x” (rigidbody tab)\n\nCode: Finds Rigidbody Mass on the object is is assigned to, which is “x”\n\ndefaultMass = “x”\n\nIf base size is needed, rb.mass = “defaultMass(x)”\n\nIf size 1 is need, rb.mass = “defaultMass(x)X.75f”\n\nIf size 2 is needed, rb.mass = “defaultMass(x)X.5f”\n\nIf size 3 is needed, rb.mass = “defaultMass(x)X.25f”\n\nIf size 4 is needed, rb.mass = “defaultMass(x)X.1f”\n\n(X = times cause I don’t wanna make it all italics)\n\nMeaning I could apply the code to an object with a mass of 20(x=20), and one with a mass of 50(x=50), set them both to stage 2, and they would return with 10 or 25 respectively without duplicating the script.\n\nSo, maybe I’m still not understanding, but you want all objects to have their own default mass, and to then manipulate that mass value, while still being able to reference that default mass for further manipulation later in the level? If so, then I would assume that all you would need to add to each object is the defaultMass value you mentioned, that then gets called (or referenced, or whatever the term is, I don’t remember C++ as well as I do Java) by the mass code you outlined, so that rb.mass can be set when the objects are loaded.\n\nFirst, though, I have realized I have made an assumption that I need to clear up: is each level being treated as its own separate thing, with each object saved in its place, or does the code ‘build’ each level by creating and placing copies of objects you’ve defined? Because there is a major difference in how to go about things based on which of those methods you are using.\n\nIf you want the engine to assign that defaultMass value for whenever you make a new object (and not a copy of an existing object), that might be a bit more challenging, if not impossible. As I said in my previous post, most engines require you to manually define a new object’s values (which is why copying an object already defined and manipulating it is easier than making a new object). The best you might be able to do is to copy-and-paste a large portion of the code from an existing object.\n\nOverall, I would advise that, to cut down on the number of objects you need to make, just make the code that ‘builds’ the level call a very small number of objects and then manipulate their size, weight, color, etc. in the code, rather than have a hundred different objects with their own stats. it means more code, and possibly longer level load times, but it makes your job a bit easier. Try to only make a new object if its characteristics are too different from all existing objects to be able to transform one of them into it (like if you need a cylinder or a triangular prism instead of a rectangle."
    }
}