{
    "id": "dbpedia_4657_3",
    "rank": 79,
    "data": {
        "url": "https://www.geeksforgeeks.org/snake-game-in-python-using-pygame-module/",
        "read_more_link": "",
        "language": "en",
        "title": "Snake Game in Python",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20210424101221/20210424101011.gif",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2021-04-26T04:01:40",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/snake-game-in-python-using-pygame-module/",
        "text": "Snake Game in Python – Using Pygame module\n\nLast Updated : 12 Aug, 2024\n\nImprove\n\nSnake game is one of the most popular arcade games of all time. In this game, the main objective of the player is to catch the maximum number of fruits without hitting the wall or itself. Creating a snake game can be taken as a challenge while learning Python or Pygame. It is one of the best beginner-friendly projects that every novice programmer should take as a challenge. Learning to build a video game is kinda interesting and fun learning.\n\nWe will be using Pygame to create this snake game. Pygame is an open-source library that is designed for making video games. It has inbuilt graphics and sound libraries. It is also beginner-friendly, and cross-platform.\n\nInstallation:\n\nTo install Pygame, you need to open up your terminal or command prompt and type the following command:\n\npip install pygame\n\nAfter installing Pygame we are ready to create our cool snake game.\n\nA step-by-step approach for creating a Snake Game using Pygame:\n\nStep 1: First we are importing the necessary libraries.\n\nAfter that, we are defining the width and height of the window in which the game will be played.\n\nAnd define the color in RGB format that we are going to use in our game for displaying text.\n\nPython\n\n# importing libraries import pygame import time import random snake_speed = 15 # Window size window_x = 720 window_y = 480 # defining colors black = pygame.Color(0, 0, 0) white = pygame.Color(255, 255, 255) red = pygame.Color(255, 0, 0) green = pygame.Color(0, 255, 0) blue = pygame.Color(0, 0, 255)\n\nStep 2: After importing libraries we need to initialize Pygame using pygame.init() method.\n\nCreate a game window using the width and height defined in the previous step.\n\nHere pygame.time.Clock() will be used further in the main logic of the game to change the speed of the snake.\n\nPython\n\n# Initialising pygame pygame.init() # Initialise game window pygame.display.set_caption('GeeksforGeeks Snakes') game_window = pygame.display.set_mode((window_x, window_y)) # FPS (frames per second) controller fps = pygame.time.Clock()\n\nStep 3: Initialize snake position and its size.\n\nAfter initializing snake position, initialize the fruit position randomly anywhere in the defined height and width.\n\nBy setting direction to RIGHT we ensure that, whenever a user runs the program/game, the snake must move right to the screen.\n\nPython\n\n# defining snake default position snake_position = [100, 50] # defining first 4 blocks of snake # body snake_body = [ [100, 50], [90, 50], [80, 50], [70, 50] ] # fruit position fruit_position = [random.randrange(1, (window_x//10)) * 10, random.randrange(1, (window_y//10)) * 10] fruit_spawn = True # setting default snake direction # towards right direction = 'RIGHT' change_to = direction\n\nStep 4: Create a function to display the score of the player.\n\nIn this function, firstly we’re creating a font object i.e. the font color will go here.\n\nThen we are using render to create a background surface that we are going to change whenever our score updates.\n\nCreate a rectangular object for the text surface object (where text will be refreshed)\n\nThen, we are displaying our score using blit. blit takes two argument screen.blit(background,(x,y))\n\nPython\n\n# initial score score = 0 # displaying Score function def show_score(choice, color, font, size): # creating font object score_font score_font = pygame.font.SysFont(font, size) # create the display surface object # score_surface score_surface = score_font.render('Score : ' + str(score), True, color) # create a rectangular object for the # text surface object score_rect = score_surface.get_rect() # displaying text game_window.blit(score_surface, score_rect)\n\nStep 5: Now create a game over function that will represent the score after the snake is hit by a wall or itself.\n\nIn the first line, we are creating a font object to display scores.\n\nThen we are creating text surfaces to render scores.\n\nAfter that, we are setting the position of the text in the middle of the playable area.\n\nDisplay the scores using blit and updating the score by updating the surface using flip().\n\nWe are using sleep(2) to wait for 2 seconds before closing the window using quit().\n\nPython\n\n# game over function def game_over(): # creating font object my_font my_font = pygame.font.SysFont('times new roman', 50) # creating a text surface on which text # will be drawn game_over_surface = my_font.render('Your Score is : ' + str(score), True, red) # create a rectangular object for the text # surface object game_over_rect = game_over_surface.get_rect() # setting position of the text game_over_rect.midtop = (window_x/2, window_y/4) # blit will draw the text on screen game_window.blit(game_over_surface, game_over_rect) pygame.display.flip() # after 2 seconds we will quit the # program time.sleep(2) # deactivating pygame library pygame.quit() # quit the program quit()\n\nStep 6: Now we will be creating our main function that will do the following things:\n\nWe will be validating the keys that will be responsible for the movement of the snake, then we will be creating a special condition that the snake should not be allowed to move in the opposite direction instantaneously.\n\nAfter that, if snake and fruit collide we will be incrementing the score by 10 and new fruit will be spanned.\n\nAfter that, we are checking that is the snake hit with a wall or not. If a snake hits a wall we will call game over function.\n\nIf the snake hits itself, the game over function will be called.\n\nAnd in the end, we will be displaying the scores using the show_score function created earlier.\n\nPython\n\n# Main Function while True: # handling key events for event in pygame.event.get(): if event.type == pygame.KEYDOWN: if event.key == pygame.K_UP: change_to = 'UP' if event.key == pygame.K_DOWN: change_to = 'DOWN' if event.key == pygame.K_LEFT: change_to = 'LEFT' if event.key == pygame.K_RIGHT: change_to = 'RIGHT' # If two keys pressed simultaneously # we don't want snake to move into two directions # simultaneously if change_to == 'UP' and direction != 'DOWN': direction = 'UP' if change_to == 'DOWN' and direction != 'UP': direction = 'DOWN' if change_to == 'LEFT' and direction != 'RIGHT': direction = 'LEFT' if change_to == 'RIGHT' and direction != 'LEFT': direction = 'RIGHT' # Moving the snake if direction == 'UP': snake_position[1] -= 10 if direction == 'DOWN': snake_position[1] += 10 if direction == 'LEFT': snake_position[0] -= 10 if direction == 'RIGHT': snake_position[0] += 10 # Snake body growing mechanism # if fruits and snakes collide then scores will be # incremented by 10 snake_body.insert(0, list(snake_position)) if snake_position[0] == fruit_position[0] and snake_position[1] == fruit_position[1]: score += 10 fruit_spawn = False else: snake_body.pop() if not fruit_spawn: fruit_position = [random.randrange(1, (window_x//10)) * 10, random.randrange(1, (window_y//10)) * 10] fruit_spawn = True game_window.fill(black) for pos in snake_body: pygame.draw.rect(game_window, green, pygame.Rect( pos[0], pos[1], 10, 10)) pygame.draw.rect(game_window, white, pygame.Rect( fruit_position[0], fruit_position[1], 10, 10)) # Game Over conditions if snake_position[0] < 0 or snake_position[0] > window_x-10: game_over() if snake_position[1] < 0 or snake_position[1] > window_y-10: game_over() # Touching the snake body for block in snake_body[1:]: if snake_position[0] == block[0] and snake_position[1] == block[1]: game_over() # displaying score continuously show_score(1, white, 'times new roman', 20) # Refresh game screen pygame.display.update() # Frame Per Second /Refresh Rate fps.tick(snake_speed)\n\nBelow is the Implementation\n\nPython\n\n# importing libraries import pygame import time import random snake_speed = 15 # Window size window_x = 720 window_y = 480 # defining colors black = pygame.Color(0, 0, 0) white = pygame.Color(255, 255, 255) red = pygame.Color(255, 0, 0) green = pygame.Color(0, 255, 0) blue = pygame.Color(0, 0, 255) # Initialising pygame pygame.init() # Initialise game window pygame.display.set_caption('GeeksforGeeks Snakes') game_window = pygame.display.set_mode((window_x, window_y)) # FPS (frames per second) controller fps = pygame.time.Clock() # defining snake default position snake_position = [100, 50] # defining first 4 blocks of snake body snake_body = [[100, 50], [90, 50], [80, 50], [70, 50] ] # fruit position fruit_position = [random.randrange(1, (window_x//10)) * 10, random.randrange(1, (window_y//10)) * 10] fruit_spawn = True # setting default snake direction towards # right direction = 'RIGHT' change_to = direction # initial score score = 0 # displaying Score function def show_score(choice, color, font, size): # creating font object score_font score_font = pygame.font.SysFont(font, size) # create the display surface object # score_surface score_surface = score_font.render('Score : ' + str(score), True, color) # create a rectangular object for the text # surface object score_rect = score_surface.get_rect() # displaying text game_window.blit(score_surface, score_rect) # game over function def game_over(): # creating font object my_font my_font = pygame.font.SysFont('times new roman', 50) # creating a text surface on which text # will be drawn game_over_surface = my_font.render( 'Your Score is : ' + str(score), True, red) # create a rectangular object for the text # surface object game_over_rect = game_over_surface.get_rect() # setting position of the text game_over_rect.midtop = (window_x/2, window_y/4) # blit will draw the text on screen game_window.blit(game_over_surface, game_over_rect) pygame.display.flip() # after 2 seconds we will quit the program time.sleep(2) # deactivating pygame library pygame.quit() # quit the program quit() # Main Function while True: # handling key events for event in pygame.event.get(): if event.type == pygame.KEYDOWN: if event.key == pygame.K_UP: change_to = 'UP' if event.key == pygame.K_DOWN: change_to = 'DOWN' if event.key == pygame.K_LEFT: change_to = 'LEFT' if event.key == pygame.K_RIGHT: change_to = 'RIGHT' # If two keys pressed simultaneously # we don't want snake to move into two # directions simultaneously if change_to == 'UP' and direction != 'DOWN': direction = 'UP' if change_to == 'DOWN' and direction != 'UP': direction = 'DOWN' if change_to == 'LEFT' and direction != 'RIGHT': direction = 'LEFT' if change_to == 'RIGHT' and direction != 'LEFT': direction = 'RIGHT' # Moving the snake if direction == 'UP': snake_position[1] -= 10 if direction == 'DOWN': snake_position[1] += 10 if direction == 'LEFT': snake_position[0] -= 10 if direction == 'RIGHT': snake_position[0] += 10 # Snake body growing mechanism # if fruits and snakes collide then scores # will be incremented by 10 snake_body.insert(0, list(snake_position)) if snake_position[0] == fruit_position[0] and snake_position[1] == fruit_position[1]: score += 10 fruit_spawn = False else: snake_body.pop() if not fruit_spawn: fruit_position = [random.randrange(1, (window_x//10)) * 10, random.randrange(1, (window_y//10)) * 10] fruit_spawn = True game_window.fill(black) for pos in snake_body: pygame.draw.rect(game_window, green, pygame.Rect(pos[0], pos[1], 10, 10)) pygame.draw.rect(game_window, white, pygame.Rect( fruit_position[0], fruit_position[1], 10, 10)) # Game Over conditions if snake_position[0] < 0 or snake_position[0] > window_x-10: game_over() if snake_position[1] < 0 or snake_position[1] > window_y-10: game_over() # Touching the snake body for block in snake_body[1:]: if snake_position[0] == block[0] and snake_position[1] == block[1]: game_over() # displaying score continuously show_score(1, white, 'times new roman', 20) # Refresh game screen pygame.display.update() # Frame Per Second /Refresh Rate fps.tick(snake_speed)\n\nOutput:\n\nCode Explanation:\n\nThe code starts by importing the necessary libraries.\n\nThese are pygame, time, and random.\n\nNext, the code defines some variables.\n\nThe snake_speed variable controls how fast the snake moves around the screen.\n\nThe window_x and window_y variables define the size of the game window onscreen.\n\nThe next line of code initializes pygame.\n\nThis is important because it sets up all of the game objects and their properties so that they can be used later in the program.\n\nNext, the code creates an instance of pygame’s GameWindow class object.\n\nThis object represents a rectangular area onscreen that can be filled with graphics and text content.\n\nThe GameWindow object has two properties: width and height .\n\nThese values represent how wide and tall the game window is respectively.\n\nThe next line of code assigns values to these properties based on a user-defined value called snake_speed .\n\nThis variable tellspygame how fast (in pixels per second) to move the snake aroundthe screen.\n\nHigher values will make for faster movement but also more intense gameplay!\n\nNext, PyGame starts loading various images into memory to use as background graphics for our game world .\n\nFirst it loads in an\n\nThe code will create a window with dimensions of 720×480 pixels.\n\nThe colours black, white, red, green and blue will be used to represent the game’s various elements.\n\nNext, the pygame module will be imported and initialized.\n\nThis will allow us to start working with the game’s various objects and functions.\n\nThe game’s main loop will then be started by calling pygame.init().\n\nThis function will ensure that all of the necessary modules are loaded and ready for use.\n\nFinally, we’ll call the window’s constructor to create our game window.\n\nThe code starts by creating a pygame.display.set_mode() function to set the window size and position.\n\nThe code then creates a game window and sets its mode to (0, 0).\n\nNext, the code defines some variables: fps, snake_position, snake_body, and fruit_position.\n\nThese variables will be used to control the speed of the snake, where it starts from (snake_position), how wide it is (snake_body), where the fruit is located (fruit_position), and whether or not fruit should spawn (fruit_spawn).\n\nThe next block of code calculates the distance between each point on the screen using pygame.time.Clock().\n\nThis allows us to move the snake around on-screen without having to constantly recalculate its position.\n\nFinally, we set up two boolean variables: fruit_spawn and analyze().\n\nThese will determine whether or not fruit will spawn at random locations on-screen and be analyzed for player input.\n\nThe code sets up a basic game window with a snake positioned at (100, 50) on the X-axis and (window_x, window_y) on the Y-axis.\n\nThe FPS controller is initialized and set to run at 60 frames per second.\n\nThe next block of code defines the body of the snake.\n\nA list of ten [100, 50] points is created, starting at position (100, 50).\n\nThe first four points are set to be in the center of the snake’s body while the remaining six points are evenly spaced around it.\n\nNext, a fruit position is defined as [(random.randrange(1, (window_x//10)) * 10), (random.randrange(1\n\nThe code starts by initializing some variables.\n\nThe first is the score, which starts at 0.\n\nThe second is the direction variable, which will determine how the snake moves.\n\nThe show_score() function is called whenever a player makes a choice.\n\nThis function contains three parts: creating a font object, creating a display surface object, and displaying text on the display surface.\n\nFirst, the score_font object is created.\n\nThis object stores information about the font used to display text on the screen (in this case, Times New Roman).\n\nNext, the score_surface object is created and initialized with information about the font and size of text that will be displayed (50 points in size).\n\nFinally, using blit(), the score_rect object is copied onto the score_surface object so that it can be displayed onscreen.\n\nThe game_over() function ends any current game play and terminates Python code running in this module (assuming no other functions call it).\n\nFirst, an instance of SysFont named my_font is created.\n\nThen 50 points in size for Times New Roman are specified as its typeface and color values.\n\nFinally, game over() is called to end all game play and terminate Python code running in\n\nThe code first initializes some variables, including the score variable.\n\nThe code then creates a function called show_score().\n\nThis function will be used to display the current score on the screen.\n\nThe show_score() function first creates a font object called score_font and sets its size to 50 points.\n\nNext, the function creates a display surface object called score_surface and sets its color to white.\n\nFinally, the show_score() function blits the score_surface object onto the game window’s screen.\n\nThe game over() function is responsible for cleaning up resources after the game has ended.\n\nFirst, it creates a font object called my_font and sets its size to 20 points.\n\nThen, the game over() function bl\n\nThe code first creates a text surface object called game_over_surface.\n\nThe text will be rendered in the font my_font and the color red.\n\nNext, a rectangular object is created for the text surface object.\n\nThis object will have its midpoint at (window_x/2, window_y/4).\n\nFinally, position of the text on the rectangle is set using game_over_rect.midtop().\n\nThe code creates a text surface object called game_over_surface.\n\nThis object will be used to display the player’s score and the message “Your Score is :”.\n\nNext, a rectangular object called game_over_rect is created.\n\nThis object will be used to position the text on the surface.\n\nThe midpoint of the rectangle is set to (window_x/2, window_y/4).\n\nThe code starts by initializing the pygame library.\n\nNext, the code creates a window and assigns it to game_window.\n\nThe window has a surface (a graphic representation of the screen) and a Rectangle object that specifies its size and position.\n\nNext, the code blits (transfers) the text “GAME OVER” onto the game_over_surface object.\n\nThe text is drawn in white, centered on top of the game_over_rect object.\n\nThe program then sets up a timer that will run for 2 seconds.\n\nAt this point, the program will quit because there is no more code to execute.\n\nThe code will check for key events and if the event corresponds to a valid key, it will change the text displayed on screen accordingly.\n\nIf you press any other key, the program will continue to run as normal.\n\nThe code starts by checking to see if the player has pressed two keys at the same time.\n\nIf they have, the code changes the direction of the snake.\n\nNext, the code checks to see if either key was pressed in a different direction than expected.\n\nIf it was, then the code adjusts the position of the snake accordingly.\n\nFinally, it updates how big the snake’s body is getting.\n\nThe code will check if the two keys being pressed at the same time are either ‘UP’ or ‘DOWN’.\n\nIf they are, then the direction of the snake will be changed accordingly.\n\nIf the two keys being pressed are not equal, then the code will check to see if they are different directions.\n\nIf they are not, then the snake’s position will be adjusted by 10 pixels in each direction.\n\nLastly, a function is created that will change how big the snake’s body grows when it moves.\n\nThe code starts by creating a list of snake positions.\n\nThe first position in the list is at (0, 0), and the last position in the list is at (window_x-10, window_y-10).\n\nNext, the code checks to see if any of the positions in the snake are equal to a fruit position.\n\nIf so, then that fruit gets scored 10 points and is added to the fruit spawn variable.\n\nIf no fruits are found, then the game moves on to checking for collisions between snakes and fruits.\n\nIf two snakes intersect, then their scores are incremented by 10.\n\nIf a snake collides with a wall or another snake, then that snake dies and game over conditions are triggered.\n\nFinally, touching any part of a snake causes it to die and also triggers game over conditions.\n\nThe code will check to see if two positions in the snake body are equal.\n\nIf they are, then the score is incremented by 10 and the game_over() function is called.\n\nIf a player touches the snake body at any point, then the game_over() function will be called.\n\nSnake Game in Python – Using Pygame module – FAQs\n\nHow to Create a Snake Game Using Pygame\n\nCreating a Snake game using Pygame involves setting up the game environment, handling user input, managing game logic, and updating the game state. Here’s a high-level overview of the steps involved:\n\nInitialize Pygame: Set up the Pygame environment including the display window.\n\nGame Loop: Implement a game loop that continuously updates the game state, renders the screen, and handles events.\n\nHandle Events: Manage user input such as keyboard presses to control the snake’s direction.\n\nUpdate Game State: Move the snake, check for collisions, manage snake growth upon eating food, and handle game over scenarios.\n\nDraw/Graphics: Update and render the snake, food, and possibly a score on the screen.\n\nTo get started, you’ll need to install Pygame, if you haven’t already:\n\npip install pygame\n\nWhich Algorithm is Used for Snake Game in Python?\n\nThe Snake game typically doesn’t require complex algorithms. The game mechanics are based on simple rules and operations like queue data structures where the head moves in a direction and the rest follows, segments get added to the tail, and boundary and self-collision checks. Advanced implementations might use pathfinding algorithms (like A* or Dijkstra’s algorithm) to create an AI that automatically plays the game.\n\nIs Snake Game Easy to Make?\n\nYes, making a basic Snake game is relatively easy and is often used as an introductory project for learning a programming language or a new library. The simplicity of the game mechanics makes it suitable for beginners, especially when using libraries like Pygame that simplify graphics and event handling.\n\nWhat is Pygame Module in Python?\n\nPygame is a set of Python modules designed for writing video games. It provides functionalities like creating windows, drawing shapes, capturing mouse and keyboard actions, and playing sounds. With Pygame, programmers can create fully featured games and multimedia programs in Python.\n\nHow to Create Tic Tac Toe in Python\n\nCreating a Tic Tac Toe game in Python can be done by managing a board as a 2D list, handling user input, and checking for win conditions. Here’s a simple version of how you could implement it:\n\ndef print_board(board):\n\nfor row in board:\n\nprint(\" | \".join(row))\n\nprint(\"-\" * 5)\n\ndef check_win(board, player):\n\nwin_conditions = [\n\n[board[0][0], board[0][1], board[0][2]],\n\n[board[1][0], board[1][1], board[1][2]],\n\n[board[2][0], board[2][1], board[2][2]],\n\n[board[0][0], board[1][0], board[2][0]],\n\n[board[0][1], board[1][1], board[2][1]],\n\n[board[0][2], board[1][2], board[2][2]],\n\n[board[0][0], board[1][1], board[2][2]],\n\n[board[2][0], board[1][1], board[0][2]]\n\n]\n\nreturn [player, player, player] in win_conditions\n\ndef tic_tac_toe():\n\nboard = [[\" \" for _ in range(3)] for _ in range(3)]\n\nplayer = \"X\"\n\nwhile True:\n\nprint_board(board)\n\nrow = int(input(f\"Enter the row for {player}: \"))\n\ncol = int(input(f\"Enter the column for {player}: \"))\n\nif board[row][col] != \" \":\n\nprint(\"Invalid move, try again.\")\n\ncontinue\n\nboard[row][col] = player\n\nif check_win(board, player):\n\nprint_board(board)\n\nprint(f\"{player} wins!\")\n\nbreak\n\nif all(all(row != \" \" for row in board_row) for board_row in board):\n\nprint_board(board)\n\nprint(\"It's a draw!\")\n\nbreak\n\nplayer = \"O\" if player == \"X\" else \"X\"\n\ntic_tac_toe()\n\nPlease Login to comment...\n\nPractice Tags :"
    }
}