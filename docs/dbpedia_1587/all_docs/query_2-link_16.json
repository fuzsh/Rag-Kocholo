{
    "id": "dbpedia_1587_2",
    "rank": 16,
    "data": {
        "url": "https://www.cprime.com/resources/what-is-agile-what-is-scrum/",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile? - What is Scrum? - Agile FAQ's",
        "top_image": "https://www.cprime.com/favicon-32x32.png",
        "meta_img": "https://www.cprime.com/favicon-32x32.png",
        "images": [
            "https://www.cprime.com/wp-content/static/images/logos/logo-black.svg",
            "https://www.cprime.com/wp-content/static/images/logos/logo-black.svg",
            "https://www.cprime.com/wp-content/static/images/logos/logo-black.svg",
            "https://www.cprime.com/wp-content/static/images/logos/logo-black.svg",
            "https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia.png 1024w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-300x300.png 300w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-100x100.png 100w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-600x600.png 600w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-150x150.png 150w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-768x768.png 768w, https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia-175x175.png 175w",
            "https://www.cprime.com/wp-content/uploads/2013/05/encyclopedia.png",
            "https://www.cprime.com/wp-content/uploads/2013/05/Screen-Shot-2020-09-22-at-12.45.13-PM.jpg 752w, https://www.cprime.com/wp-content/uploads/2013/05/Screen-Shot-2020-09-22-at-12.45.13-PM-300x279.jpg 300w, https://www.cprime.com/wp-content/uploads/2013/05/Screen-Shot-2020-09-22-at-12.45.13-PM-600x559.jpg 600w",
            "https://www.cprime.com/wp-content/uploads/2013/05/Screen-Shot-2020-09-22-at-12.45.13-PM.jpg",
            "https://www.cprime.com/wp-content/uploads/2019/10/agile-scrum-delivery-300x294.png 300w, https://www.cprime.com/wp-content/uploads/2019/10/agile-scrum-delivery.png 580w",
            "https://www.cprime.com/wp-content/uploads/2019/10/agile-scrum-delivery-300x294.png",
            "https://www.cprime.com/wp-content/uploads/2019/10/scrumprocess-1024x607.png 1024w, https://www.cprime.com/wp-content/uploads/2019/10/scrumprocess-600x356.png 600w, https://www.cprime.com/wp-content/uploads/2019/10/scrumprocess-300x178.png 300w, https://www.cprime.com/wp-content/uploads/2019/10/scrumprocess-768x455.png 768w",
            "https://www.cprime.com/wp-content/uploads/2019/10/scrumprocess-1024x607.png",
            "https://www.cprime.com/wp-content/uploads/2019/10/agile_benefits_graphic_vertical-2-962x1024.png 962w, https://www.cprime.com/wp-content/uploads/2019/10/agile_benefits_graphic_vertical-2-600x639.png 600w, https://www.cprime.com/wp-content/uploads/2019/10/agile_benefits_graphic_vertical-2-282x300.png 282w, https://www.cprime.com/wp-content/uploads/2019/10/agile_benefits_graphic_vertical-2-768x817.png 768w",
            "https://www.cprime.com/wp-content/uploads/2019/10/agile_benefits_graphic_vertical-2-962x1024.png",
            "https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1-1024x624.png 1024w, https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1-600x365.png 600w, https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1-300x183.png 300w, https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1-768x468.png 768w, https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1.png 1310w",
            "https://www.cprime.com/wp-content/uploads/2019/10/scrum-user-story-1-1024x624.png",
            "https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1.jpg 600w, https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1-112x300.jpg 112w, https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1-382x1024.jpg 382w, https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1-37x100.jpg 37w, https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1-65x175.jpg 65w, https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1-75x200.jpg 75w",
            "https://www.cprime.com/wp-content/uploads/2018/05/cPrimeCarrie7-7-14_300DPIsmall1.jpg",
            "https://www.cprime.com/wp-content/static/images/logos/logo-white.svg",
            "https://www.cprime.com/wp-content/static/images/logos/logo-white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-05-22T17:43:17+00:00",
        "summary": "",
        "meta_description": "What is Agile? What is Scrum? What is Kanban? Get answers to the most frequently asked questions to learn about Agile and Scrum Methodologies.",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "Cprime",
        "canonical_link": "https://www.cprime.com/resources/what-is-agile-what-is-scrum/",
        "text": "Benefits to Customer\n\nCustomers find that the vendor is more responsive to development requests. High-value features are developed and delivered more quickly with short cycles, than with the longer cycles favored by classic “waterfall” processes.\n\nBenefits to Vendors\n\nVendors reduce wastage by focusing development effort on high-value features, and reduce time-to-market relative to waterfall processes due to decreased overhead and increased efficiency. Improved customer satisfaction translates to better customer retention and more positive customer references.\n\nBenefits to Development Teams\n\nTeam members enjoy development work, and like to see their work used and valued. Scrum benefits Team members by reducing non-productive work (e.g., writing specifications or other artifacts that no one uses), and giving them more time to do the work they enjoy. Team members also know their work is valued, because requirements are chosen to maximize value to customers.\n\nBenefits to Product Managers\n\nProduct Managers, who typically fill the Product Owner role, are responsible for making customers happy by ensuring that development work is aligned with customer needs. Scrum makes this alignment easier by providing frequent opportunities to re-prioritize work, to ensure maximum delivery of value.\n\nBenefits to Project Managers\n\nProject Managers (and others) who fill the ScrumMaster role find that planning and tracking are easier and more concrete, compared to waterfall processes. The focus on task-level tracking, the use of Burndown Charts to display daily progress, and the Daily Scrum meetings, all together give the Project Manager tremendous awareness about the state of the project at all times. This awareness is key to monitoring the project, and to catching and addressing issues quickly.\n\nBenefits to PMOs and C-Level Executives\n\nScrum provides high visibility into the state of a development project, on a daily basis. External stakeholders, such as C-Level executives and personnel in the Project Management Office, can use this visibility to plan more effectively, and adjust their strategies based on more hard information and less speculation.\n\nScrum does not define just what form requirements are to take, but simply says that they are gathered into the Product Backlog, and referred to generically as “Product Backlog Items,” or “PBIs” for short. Given the time-boxed nature of a Sprint, we can also infer that each set should require significantly less time to implement than the duration of the Sprint. Most Scrum projects borrow the “XP” (Extreme Programming) practice of describing a feature request as a “User Story,” although a minority uses the older concept of a “Use Case.” We will go with the majority view here, and describe three reasonably-standard requirements artifacts found in Product Backlogs.\n\nUser Story\n\nA User Story describes a desired feature (functional requirement) in narrative form. User Stories are usually written by the Product Owner, and are the Product Owner’s responsibility. The format is not standardized, but typically has a name, some descriptive text, references to external documents (such as screen shots), and information about how the implementation will be tested. For example, a Story might resemble the following:\n\nName: Planner enters new contact into address book, so that one can contact the person later by postal or electronic mail Description: Planner enters standard contact information (first and last name, two street address lines, city, state, zip / postal code, country, etc.) into contact-entry screen. One clicks “Save” to keep the data, and “Cancel” to discard data and return to previous screen. How to test: Tester enters and saves the data, finds the name in the address book, and clicks on it. One sees a read-only view of the contact-entry screen, with all data previously entered.\n\nThe elements in this User Story are:\n\nName: The Name is a descriptive phrase or sentence. The example uses a basic “Role-Action-Reason” organization. Another common style, popularized by Mike Cohn, follows the template “As a <type of user>, I want <some goal> so that <some reason>.” The choice of template is less important than having a workable standard of some kind.\n\nDescription: This is a high-level (low-detail) description of the need to be met. For functional (user-facing) requirements, the description is put in narrative form. For non-functional requirements, the description can be worded in any form that is easy to understand. In both cases, the key is that the level of detail is modest, because the fine details are worked out during the implementation phase, in discussions between team members, product owners, and anyone else who is involved. (This is one of the core concepts of Scrum: Requirements are specified at a level that allows rough estimation of the work required to implement them, not in detail.)\n\nScreens and External Documents: If the Story requires user-interface changes (especially non-trivial ones), the Story should contain or link to a prototype of the changes. Any external documents required to implement the Story should also be listed.\n\nHow to test: The implementation of a Story is defined to be complete if, and only if, it passes all acceptance tests developed for it. This section provides a brief description of how the story will be tested. As for the feature itself, the description of testing methods is short, with the details to be worked out during implementation, but we need at least a summary to guide the estimation process.\n\nThere are two reasons for including the information about how to test the Story. The obvious reason is to guide development of test cases (acceptance tests) for the Story. The less-obvious, but important, reason, is that the Team will need this information in order to estimate how much work is required to implement the story (since test design and execution is part of the total work).\n\nStory\n\nNot all requirements for new development represent user-facing features, but do represent significant work that must be done. These requirements often, but not always, represent work that must be done to support user-facing features. We call these non-functional requirements “Technical Stories.” Technical Stories have the same elements as User Stories, but need not be cast into narrative form if there is no benefit in doing so. Technical Stories are usually written by Team members, and are added to the Product Backlog. The Product Owner must be familiar with these Stories, and understand the dependencies between these and User Stories in order to rank (sequence) all Stories for implementation.\n\nDefect\n\nA Defect, or bug report, is a description of a failure of the product to behave in the expected fashion. Defects are stored in a bug-tracking system, which may or may not be physically the same system used to store the Product Backlog. If not, then someone (usually the Product Owner) must enter each Defect into the Product Backlog, for sequencing and scheduling.\n\nThe three roles defined in Scrum are the ScrumMaster, the Product Owner, and the Team (which consists of Team members). The people who fulfill these roles work together closely, on a daily basis, to ensure the smooth flow of information and the quick resolution of issues.\n\nScrumMaster\n\nThe ScrumMaster (sometimes written “Scrum Master,” although the official term has no space after “Scrum”) is the keeper of the process. The ScrumMaster is responsible for making the process run smoothly, for removing obstacles that impact productivity, and for organizing and facilitating the critical meetings. The ScrumMasters responsibilities include\n\nTeach the Product Owner how to maximize return on investment (ROI), and meet his/her objectives through Scrum.\n\nImprove the lives of the development Team by facilitating creativity and empowerment.\n\nImprove the productivity of the development Team in any way possible.\n\nImprove the engineering practices and tools so that each increment of functionality is potentially shippable.\n\nKeep information about the Team’s progress up to date and visible to all parties.\n\nIn practical terms, the ScrumMaster needs to understand Scrum well enough to train and mentor the other roles, and educate and assist other stakeholders who are involved in the process. The ScrumMaster should maintain a constant awareness of the status of the project (its progress to date) relative to the expected progress, investigate and facilitate resolution of any roadblocks that hold back progress, and generally be flexible enough to identify and deal with any issues that arise, in any way that is required. The ScrumMaster must protect the Team from disturbance from other people by acting as the interface between the two. The ScrumMaster does not assign tasks to Team members, as task assignment is a Team responsibility. The ScrumMaster’s general approach towards the Team is to encourage and facilitate their decision-making and problem-solving capabilities, so that they can work with increasing efficiency and decreasing need for supervision. The goal is to have a team that is not only empowered to make important decisions, but does so well and routinely.\n\nDownload the Scrum Master Role Cheatsheet\n\nProduct Owner\n\nThe Product Owner is the keeper of the requirements. The Product Owner provides the “single source of truth” for the Team regarding requirements and their planned order of implementation. In practice, the Product Owner is the interface between the business, the customers, and their product related needs on one side, and the Team on the other. The Product Owner buffers the Team from feature and bug-fix requests that come from many sources, and is the single point of contact for all questions about product requirements. Product Owner works closely with the team to define the user-facing and technical requirements, to document the requirements as needed, and to determine the order of their implementation. Product Owner maintains the Product Backlog (which is the repository for all of this information), keeping it up to date and at the level of detail and quality the Team requires. The Product Owner also sets the schedule for releasing completed work to customers, and makes the final call as to whether implementations have the features and quality required for release.\n\nDownload the Product Owner Role Cheatsheet\n\nTeam\n\nThe Team is a self-organizing and cross-functional group of people who do the hands-on work of developing and testing the product. Since the Team is responsible for producing the product, it must also have the authority to make decisions about how to perform the work. The Team is therefore self-organizing: Team members decide how to break work into tasks, and how to allocate tasks to individuals, throughout the Sprint. The Team size should be kept in the range from five to nine people, if possible. (A larger number make communication difficult, while a smaller number leads to low productivity and fragility.) Note: A very similar term, “Scrum Team,” refers to the Team plus the ScrumMaster and Product Owner.\n\nDownload the Scrum Team Cheatsheet\n\nWhat to measure in agile is the enduring question. There should be two primary filters we should ask ourselves before we measure anything; “will this measurement accelerate value delivery?,” and “will this measurement enhance trust?”.\n\nBelow is an example of a fitting agile measurement. Typically an organization will create a goal to increase story point velocity, and this seems rational because we always strive to deliver more where possible. This perspective is looking at the problem from the wrong angle because what we want is value delivery not higher output. Those are not the same; one is outcome focused, and the other is production focused. Agile stresses outcome; which is value delivery, not output. Looking through the lens that equates increases in velocity to output assumes a few things; the teams are not working hard enough, and that output equals value. Of which both assumptions are typically untrue.\n\nWe should be using velocity to run our business; a story point velocity can be used to divide the product backlog and plan roughly when specific features will be available for our customers. What we need to do is incent stability in velocity, not velocity that is changing or in flux. In a world where there are incentives for increasing velocity, the teams will oblige and provide a higher story point velocity. They will inflate the story points to achieve the desired increase, which in turn reduce our ability to run the business because the velocity is no longer meaningful.\n\nAddressed in a slightly different way we could measure the say/do of the sprint. Evaluating a team’s estimate of how many story points they will deliver against what they perform in a sprint. Immediately the incentive causes stability in story point velocity, which provides the ability for the business to predict when features will release to market.\n\nThe former tells the teams they are not trusted, and erodes the creation of value delivery where the latter promotes both. It also catches teams doing good as their estimates start to converge to performance, moving to say/do of zero gives the business the ability to take the velocity to the bank as well as build trust within the organization. Everybody wins; our customers, our organization, and the team.\n\nSample Operational Metrics\n\nLead Time\n\nCycle Time\n\nBurndown Charts\n\nSample Output Metrics\n\nThroughput\n\nAgility Assessment Model\n\nTechnical quality / defect measurements / code coverage\n\n# of features, etc.\n\nSample Outcome / Value Metrics\n\nTeam Morale\n\nCustomer Satisfaction / NPS\n\nBusiness Value\n\nTake a look at these articles for more info on Agile Metrics:\n\nPeople Metrics: How Annual Performance Reviews Enable Bad Behaviors\n\nValidating Agile with Performance Metrics\n\nAre you Misusing Metrics in Agile and Scrum?\n\nMetrics in Project Management\n\nThere are two dimensions to this question. Having teams with remote team members and having all local teams where the teams are intact but in different geographical locations. Avoid the former at all costs.\n\nIntact teams in different geographical locations\n\nAs with all problems, context is a primary constraint to solving this predicament. Companies that embrace these organizational attributes achieve best results; trust, and pulling the decisions to the place where the information exists. The people doing the work have the information; therefore this is a circumstance that should be left for the teams to solve themselves. The organization needs to trust, fund and support ideas coming from the teams regarding this difficulty.\n\nThe organization needs to support experimentation to all problem solving because that takes failure out of the conversation. Experiments require a known state, the desired state, and activities that move toward the desired state. Allow the teams to experiment, evaluate, and adjust to the new found learning resulting from that experience. Then be prepared to support a different approach and another experiment.\n\nHaving teams with remote team members\n\nHaving distant team members sucks for everyone. The communication disturbance is substantially worse which causes lack of awareness related to building products.\n\nThe soundest way to deal with this is to create all teams with local people. Challenge your thinking, assumptions, and constraints if colocated teams are not possible. As a last resort following the path described above should make the best of a terrible situation.\n\nHelpful Resources:\n\nManaging Distributed Teams\n\nDaily Scrums in a Distributed World\n\nDistributed teams can now build faster with Bitbucket\n\nScrum is the dominant team based flavor of agile used today, it is over twenty years old and is time-tested. That said Kanban has its origins in manufacturing and Toyota applied it in 1953, another long-lived approach. Then there are various flavors of scaling frameworks to consider if organizational size is one of your contexts.\n\nContext is primary to the answer. What commercial needs challenge your business? What size is your organization? How is your company organized? Are your core product teams dispersed in many geographical locations? Therefore the actual commercial problems your business faces and the way you respond to your customers are contextual to the answer.\n\nAsking the question, “Scrum, Kanban or another agile flavor” is the first step and an excellent place to start. Considering a shift toward an agile approach is the first step toward sustainability. As described above agile is a requirement for future success, it is not new. Those organizations that do not adopt some form of agile will not be responsive to customer and market needs and are significantly disadvantaged.\n\nHelpful Resources:\n\n3 Differences Between Scrum and Kanban You Need to Know\n\nA Peek Inside Agile: Scrum and Kanban\n\nIs My Project Suitable for Kanban or Scrum?\n\nScaling agile is one of the most challenging issues to solve because there are so many variants of how organizations are structured and their commercial needs are diverse. This awareness brings into focus the notion of context.\n\nBecause of that diverse variance, there have emerged many scaling frameworks, and the notion of, “one-size fits all” is a false premise. Scrum is the dominant team framework; therefore, most scaling frameworks have Scrum at their core. Using Scrum as the basis to solve scaling problems is sound because most of them add to extend as a technique. As an example, the SAFe scaling frameworks introduce Kanban to facilitate the scaling challenges while keeping Scrum at its core.\n\nThe critical issues to consider when scaling beyond the team dynamic are; coordination, communication, shared or dependent work, and remoteness of groups or team members. These limitations are the same constraints at the team implementation of Scrum; however, as teams increase in numbers, they become amplified and extremely more difficult to solve. As an organization moves from one-team to multi-teams structure, broader issues become apparent. They tend to be the roadmap and investment rations between competing initiatives to support the vision and goals of the business.\n\nOrganization size also plays into the implementation and adoption of the scaling efforts as well as the scaling framework selected. A business of three hundred employees and an organization of tens of thousands employees require different approaches. Again illustrating the “one-size fits all” idiom.\n\nTo be sure the organizational scaling of Scrum is a whole company activity, not something isolated to product management and engineering as often occurs with Scrum implementations.\n\nLearn more about scaling Agile\n\nHelpful resources\n\nLean Agile Requirements in Large Scale Complex Systems\n\nScaling Agile with Atlassian and SAFe®\n\nWant to Scale Agile Across Your Enterprise? See What 5,000 Respondents Say\n\nHow to Bring Agile to Scale in Your Enterprise\n\nOften when an organization adopts agile, the focus is on the engineering services group with some marginal collaboration with the product management department. This pattern is pervasive and typically explains why businesses do not feel that they receive the benefits they expect from an agile adoption, furthering the conjecture that agile does not work.\n\nCommercial needs, company size, organizational structure, and a host of other considerations create the context needed to frame an approach to agile adoption. By far the leading success system requires the inclusion of all aspects of the business. System thinking, that of understanding that all domains of the company accomplish value delivery are aligned and working together, is critical. Therefore, to ask the engineering department with some support from the product management department to become agile misses the mark.\n\nUnfortunately, the business will more than likely have to consider restructuring and shifting management styles to achieve organizational alignment. Best outcomes happen when the leadership team goes all in with an open mind to the possibilities when they collaborate. Collaborate with a focus on value delivery and working in a supportive way recognizing that they all will reshape in support of those possibilities.\n\nSome examples are when the accounting department transition from Cost Accounting to Lean Accounting. Human resources department considers the moving to OKRs and eliminating MBOs and KPIs. The company metrics focus on measurements that correlate to value delivery over output.\n\nThe best approach when considering an agile adoption relates to your organization’s context as described above. Then be inclusive with the leadership team and their areas of focus with an eye to accelerated value delivery over output and utilization.\n\nBy developing a learning organization with the benefit of a clear purpose and providing an environment where people are trusted.\n\nLearning Organization\n\nWhat does being a learning organization mean or imply? The fundamental principals of Scrum are inspect, adapt, and transparency. These are embedded in the Scrum principles and are present in every event as feedback loops. They intended to have as many learning opportunities as possible and experienced as frequently as possible.\n\nWe need to involve the entire company in these principles because the higher benefits from agile are dependent on system thinking. System thinking coupled with the focus on value delivery. We desire the measurements that influence the engineering services to be consistent with what drives the business.\n\nClear Purpose\n\nThe organization needs to provide a purpose that is bigger than the individuals within the organization, a goal that is larger than the organization itself. It needs to touch at the emotional level of everyone, and it should be the inspirational reason people want to come to work.\n\nTrusting Environment\n\nThe goal is to have the ability for everyone to experiment and learn. Experimentation is different than merely failing at something. If we construct an experiment, a few things must be defined. A current state, the desired state, and the experiment itself that moves toward the desired state.\n\nGiven that set of constraints, the experiment yields either a supported outcome or a null hypothesis. And both are significant data points that should influence our future behavior.\n\nIn conclusion, agile is a company-wide sport, and it is not merely an engineering services activity. Without all three; learning organization, clear purpose, and trusting environment, the effects of agile will be diminished.\n\nContext is essential, the framework for a change as dramatic as altering the way a company operates requires leading the staff through the journey as opposed to dragging them. Some critical areas for success are to recognize that change is difficult, and an acknowledgment that this endeavor is a human effort.\n\nEmbracing the Scrum values of commitment, courage, focus, openness, and respect and expressing them in ways that the company entirely embraces so they become organizationally shared values will promote success.\n\nA dynamic approach to seeking volunteers will surface staff looking for positive change and filter out those opposed to change. This strategy will remove the organizational blockers from the transition because they are not part of the progress toward the new operational method. As time progresses the change begins to have visible outcomes; happier staff, innovation grows more pronounced, and value delivery becomes accelerated. Suddenly there becomes momentum as staff, teams, departments, and business units become pulled toward the new operating model of agile.\n\nThe issue of scaling agile is monolithic therefore starting at the team, or a few teams are the beginning of the journey which is required. Caution against applying scaling frameworks on day one typically yield less than beneficial results in the long run.\n\nView our Agile Success Case Studies"
    }
}