{
    "id": "dbpedia_1587_2",
    "rank": 54,
    "data": {
        "url": "https://medium.com/zenkit/agile-methodology-an-overview-7c7e3b398c3d",
        "read_more_link": "",
        "language": "en",
        "title": "Agile methodology: an overview",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/0*hS7yZ0RjB1nbTi1d.",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/0*hS7yZ0RjB1nbTi1d.",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*BNA_xlopLUppK-c-ka8z-w.png",
            "https://miro.medium.com/v2/resize:fill:48:48/1*WrDgLn7ktlSm4mxGWzBAeQ.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*BNA_xlopLUppK-c-ka8z-w.png",
            "https://miro.medium.com/v2/resize:fill:64:64/1*WrDgLn7ktlSm4mxGWzBAeQ.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dinnie Muslihat",
            "medium.com",
            "@dinnie.muslihat"
        ],
        "publish_date": "2018-03-02T14:59:10.417000+00:00",
        "summary": "",
        "meta_description": "Software development requires the care and attention of a team who are adaptable and responsive to change - exactly what Agile methodology is all about.",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/zenkit/agile-methodology-an-overview-7c7e3b398c3d",
        "text": "Those who work in the industry, or closely to it, are aware that the art of software development is special and a bit different to other kinds of engineering projects. It requires the care and attention of a team who are adaptable and flexible, and those who are willing to respond quickly to changes and who won’t bat so much as an eyelid to a client’s overnight demands. This is what Agile methodology is all about.\n\nAgile methodology definition:\n\nAgile methodology is a type of project management process, mainly used for software development, where demands and solutions evolve through the collaborative effort of self-organizing and cross-functional teams and their customers.\n\nStemming from the values and principles of the Agile Manifesto, it was created as a response to the inadequacies of traditional development methods such as the Waterfall method. The software industry is a highly competitive market due to the fact that software is something that can be continuously upgraded. This means that developers need to constantly improve and innovate their products to keep on top of the game — and the linear, sequential approach of the Waterfall method just wasn’t cutting it.\n\nA brief history of Agile software development\n\nIn the 1990s, software development faced a bit of a crisis. Referred to as ‘the application development crisis’ or ‘application delivery lag’, the industry realized that it couldn’t move fast enough to meet customer demands and requirements — the estimated time between a business need and actual application was about three years. See, traditional development models were based on a timeline approach, where development happened sequentially and the final product wasn’t revealed to customers until the very final step. This left little room for flexibility when it came to progress reviews and changes. So, by the time an actual application was finished, it was highly likely that requirements and systems of the project’s original objectives had changed.\n\nWith money and efforts wasted, and even some projects cancelled halfway through, professional leaders of the software community thought it was time for a new, refreshed approach. Then in 2001, in a snowy, ski lodge in Utah, gathered 13 individuals. Some of whom were already entertaining the idea of a new software development method. They all yearned to cement a process that legitimized what was being practiced, and so, came the creation of the Agile Manifesto.\n\nWhat is the Agile Manifesto?\n\nThe Agile Manifesto is a declaration of the values and principles expressed in Agile methodology. Made up for four foundational values and 12 key principles, it aims to help uncover better ways of developing software by providing a clear and measurable structure that promotes iterative development, team collaboration, and change recognition.\n\nThe values and principles of the ‘Manifesto for Agile Software Development’ are:\n\nValues\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nPrinciples\n\nCustomer satisfaction through early and continuous software delivery\n\nAccommodate changing requirements throughout the development process\n\nFrequent delivery of working software\n\nCollaboration between the business stakeholders and developers throughout the project\n\nSupport, trust, and motivate the people involved\n\nEnable face-to-face interactions\n\nWorking software is the primary measure of progress\n\nAgile processes to support a consistent development pace\n\nAttention to technical detail and design enhances agility\n\nSimplicity\n\nSelf-organizing teams encourage great architectures, requirements, and designs\n\nRegular reflections on how to become more effective\n\nThose who apply any type of Agile methodology adhere to these values and principles. The manifesto offers a good overview of what is expected when it comes to the Agile development life cycle practices.\n\nWhat is Agile project management?\n\nAgile project management is a methodology that is commonly used to deliver complex projects due to its adaptiveness. It emphasizes collaboration, flexibility, continuous improvement, and high quality results. It aims to be clear and measurable by using six main “deliverables” to track progress and create the product.\n\nThe deliverables\n\nProduct vision statement: A summary that articulates the goals for the product.\n\nProduct roadmap: The high-level view of the requirements needed to achieve the product vision.\n\nProduct backlog: Ordered by priority, this is the full list of what is needed to be done to complete your project.\n\nRelease plan: A timetable for the release of a working product.\n\nSprint backlog: The user stories (requirements), goals, and tasks linked to the current sprint.\n\nIncrement: The working product functionality that is presented to the stakeholders at the end of the sprint, and could potentially be given to the customer.\n\nThere are various frameworks within Agile project management that can be used to develop and deliver a product or service. While they each have their own set of characteristics and terminology, they share common principles and practices.\n\nTwo of the most popular ones that support the Agile development life cycle are Scrum and Kanban.\n\nAgile Scrum methodology\n\nScrum is an Agile framework that is used to implement the ideas behind Agile software development. Created by Jeff Sutherland and Ken Schwaber (who were also part of the 13 individuals who cemented the Agile Manifesto), it’s comprised of five values: commitment, courage, focus, openness, and respect. Its goal is to develop, deliver, and sustain complex products through collaboration, accountability, and iterative progress.\n\nWhat distinguishes Scrum from other Agile methodologies are the roles, events, and artifacts that it is made up of, with which it uses to operate. Here’s what they are:\n\nScrum team roles\n\nProduct owner: Product expert who represents the stakeholders, and is the voice of the customer.\n\nDevelopment team: Group of professionals who deliver the product (developers, programmers, designers).\n\nScrum master: Organized servant-leader who ensures the understanding and execution of Scrum is followed.\n\nScrum events\n\nSprint: Iterative time boxes where a goal is accomplished. Time frame does not exceed one calendar month and are consistent throughout the development process.\n\nSprint planning: Where the entire Scrum team get together — at the beginning of every Sprint — to plan the upcoming sprint.\n\nDaily Scrum: 15 minute time boxed meeting held at the same time, every day of the Sprint, where the previous day’s achievements are discussed, as well as the expectations for the following one.\n\nSprint review: An informal meeting held at the end of every Sprint where the Scrum team present their Increment to the stakeholders, and discuss feedback.\n\nSprint retrospective: A meeting where the Scrum team reflect on the proceedings of the previous Sprint and establish improvements for the next Sprint.\n\nScrum Artifacts\n\nProduct backlog: Managed by the Product Owner, it’s where all the requirements needed for a viable product are listed in order of priority. Includes features, functions, requirements, enhancements, and fixes that authorize any changes to be made to the product in future releases.\n\nSprint backlog: A list of the tasks and requirements that need to be accomplished during the next Sprint. Sometimes accompanied by a Scrum task board, which is used to visualize the progress of the tasks in the current Sprint, and any changes that are made in a ‘To Do, Doing, and Done’ format.\n\nKanban\n\nKanban is a highly visual method popularly used within Agile project management. It paints a picture of the workflow process, with an aim to identify any bottlenecks early on in the process, so that a higher quality product or service is delivered.\n\nIts six general practices are:\n\nVisualization\n\nLimiting work in progress\n\nFlow management\n\nMaking policies explicit\n\nUsing feedback loops\n\nCollaborative or experimental evolution\n\nA concept that was developed in the production line of Toyota factories in the 1940s, Kanban achieves efficiency through visual cues to signal certain stages of the development process. The said cues are a Kanban board, Kanban cards, and sometimes even Kanban swimlanes.\n\nKanban board: A visual management tool used to visualize the development process. It can be either physical (a whiteboard, sticky notes, and markers) or virtual (like Zenkit’s online project management tool), and can be used for personal productivity, as well as professional use.\n\nKanban cards: Cards that depict a work item/task in the work process. Used to communicate progress with your team, it represents information such as status, cycle time, and impending deadlines.\n\nKanban swimlanes: A visual element on the board that allows you to further distinguish tasks/items by categorizing them. Flowing horizontally, it offers distinction and provides a better overview of the workflow.\n\nOther Agile development life cycle approaches\n\nExtreme Programming (XP)\n\nBased on the five values of communication, simplicity, feedback, courage, and respect,XP is a framework that aims to produce a higher quality of life for the development team, as well as a higher quality product, through a collection of engineering practices. These practices are:\n\nThe Planning Game\n\nSmall Releases\n\nMetaphor\n\nSimple Design\n\nTesting\n\nRefactoring\n\nPair Programming\n\nCollective Ownership\n\nContinuous Integration\n\n40-hour week\n\nOn-site Customer\n\nCoding Standard\n\nCrystal\n\nCrystal is comprised of a family of Agile methodologies that include Crystal Clear, Crystal Yellow, and Crystal Orange. Their unique characteristics are guided by factors such as team size, system criticality, and project priorities. Key components include teamwork, communication and simplicity, as well as reflection to regularly adjust and improve the development process. This Agile framework points out how each project may require a tailored set of policies, practices, and processes to meet the project’s specific characteristics.\n\nDynamic Systems Development Method (DSDM)\n\nDSDM is an Agile methodology that focuses on the full project lifecycle. It was created in 1994 after users of the Rapid Application Development (RAD) wanted more governance and discipline to this iterative way of working. Based on eight principles, its philosophy is ‘that any project must be aligned to clearly defined strategic goals and focus upon early delivery of real benefits to the business.’\n\nIt promotes the use of the following practices so that it can offer best practice guidance for on-time, in-budget delivery of projects:\n\nFacilitated Workshops\n\nModelling and Iterative Development\n\nMoSCoW Prioritisation\n\nTime boxing\n\nDSDM is designed to be independent of, and can be implemented in conjunction with, other iterative methodologies.\n\nFeature-Driven Development (FDD)\n\nFDD is a lightweight iterative and incremental software development process. With an objective to deliver tangible, working software in a timely manner, it is an Agile methodology that entails specific, very short phases of work, which are to be accomplished separately per feature.\n\nIts development process is established on a set of best practices with a client-value aim. The eight best practices are:\n\nDomain Object Modeling\n\nDeveloping by Feature\n\nComponent/Class Ownership\n\nFeature Teams\n\nInspections\n\nConfiguration Management\n\nRegular Builds\n\nVisibility of progress and results\n\nAgile methodology best practices\n\nIt’s always handy to know how to do things best. Here are seven things you and your team should be doing when implementing any type of Agile methodology:\n\nCustomer collaboration\n\nOne of the core values stated in the Agile Manifesto, customer collaboration is a vital part of Agile methodology. Through consistent communication with the development team, the customer should always be aware of the progress, and the combined effort will result in a higher quality product.\n\nUser Stories\n\nA tool used to explain a software feature from an end-user perspective, the purpose of a User Story is to create a simplified description of a requirement. It helps to picture the type of user of the product, what they want, and the reason(s) for it. A common User Story format that is used is:\n\nAs a [role], I want [feature], because [reason].\n\nContinuous Integration\n\nContinuous Integration (CI) involves keeping the code up to date by producing a clean build of the system few times per day. With a rule stating that programmers never leave anything unintegrated at the end of the day, it enables the delivery of a product version suitable for release at any moment. What CI seeks to do is to minimize the time and effort required by each integration.\n\nAutomated tests\n\nPerforming automated tests keeps the team informed about which of the code changes are acceptable, and whether or not a functionality is working as planned. Regression tests are run automatically before work starts.\n\nPair programming\n\nProgramming in pairs aims to enhance better designs, less bugs, and a sharing of knowledge across the development team. One of the least-embraced Agile programmer practices, it involves one programmer ‘driving’ (operating the keyboard), while the other ‘navigates’ (watches, learns, provides feedback). The roles can be rotated.\n\nTest-driven development (TDD)\n\nTDD aims to foster simple designs and inspire confidence. Instead of a process where software is added that is not proven to meet requirements, it is a method based on the repetition of a very short development cycle where requirements are turned into test cases, and then the software is improved to pass the new tests.\n\nBurndown charts\n\nA burndown chart is a graphical representation of the work that is left to do versus the time you have to do it. Using one as part of your Agile project management plan enables you to forecast when all the work will be completed. A detailed burndown chart will also include the amount of User Stories per unit of time."
    }
}