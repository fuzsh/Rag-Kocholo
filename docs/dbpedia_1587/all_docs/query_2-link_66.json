{
    "id": "dbpedia_1587_2",
    "rank": 66,
    "data": {
        "url": "https://tryqa.com/what-is-agile-methodology-examples-when-to-use-it-advantages-and-disadvantages/",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile methodology? Examples, when to use, advantages & disadvantages",
        "top_image": "https://tryqa.com/wp-content/themes/eleven40-pro/images/favicon.ico",
        "meta_img": "https://tryqa.com/wp-content/themes/eleven40-pro/images/favicon.ico",
        "images": [
            "https://tryqa.com/wp-content/uploads/2014/12/Agile-versus-traditional-software-development-methodologies.jpg",
            "https://tryqa.com/wp-content/uploads/2014/12/Agile_Methodology_development-what_is_agile.jpg",
            "https://tryqa.com/wp-content/uploads/2014/12/Agile-software-Development-Methodology.jpg",
            "https://tryqa.com/wp-content/uploads/2014/12/Agile-Iterative-Development.jpg",
            "https://in.getclicky.com/100810153ns.gif",
            "https://www.facebook.com/tr?id=780848918707398&ev=PixelInitialized",
            "https://c.statcounter.com/8529562/0/f7a5d401/1/"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://tryqa.com/wp-content/themes/eleven40-pro/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://tryqa.com/what-is-agile-methodology-examples-when-to-use-it-advantages-and-disadvantages/",
        "text": "Agile software development methodology is an process for developing software (like other software development methodologies – Waterfall model, V-Model, Iterative model etc.) However, Agile methodology differs significantly from other methodologies. In English, Agile means ‘ability to move quickly and easily’ and responding swiftly to change – this is a key aspect of Agile software development as well.\n\nBrief overview of Agile Methodology\n\nIn traditional software development methodologies like Waterfall model, a project can take several months or years to complete and the customer may not get to see the end product until the completion of the project.\n\nAt a high level, non-Agile projects allocate extensive periods of time for Requirements gathering, design, development, testing and User Acceptance Testing, before finally deploying the project.\n\nIn contrast to this, Agile projects have Sprints or iterations which are shorter in duration (Sprints/iterations can vary from 2 weeks to 2 months) during which pre-determined features are developed and delivered.\n\nAgile projects can have one or more iterations and deliver the complete product at the end of the final iteration.\n\nExample of Agile software development\n\nExample: Adobe is working on project to come up with a competing product for Microsoft Word, that provides all the features provided by Microsoft Word and any other features requested by the marketing team. The final product needs to be ready in 10 months of time. Let us see how this project is executed in traditional and Agile methodologies.\n\nIn traditional Waterfall model –\n\nAt a high level, the project teams would spend 15% of their time on gathering requirements and analysis (1.5 months)\n\n20% of their time on design (2 months)\n\n40% on coding (4 months) and unit testing\n\n20% on System and Integration testing (2 months).\n\nAt the end of this cycle, the project may also have 2 weeks of User Acceptance testing by marketing teams.\n\nIn this approach, the customer does not get to see the end product until the end of the project, when it becomes too late to make significant changes.\n\nThe image below shows how these activities align with the project schedule in traditional software development.\n\nWith Agile development methodology –\n\nIn the Agile methodology, each project is broken up into several ‘Iterations’.\n\nAll Iterations should be of the same time duration (between 2 to 8 weeks).\n\nAt the end of each iteration, a working product should be delivered.\n\nIn simple terms, in the Agile approach the project will be broken up into 10 releases (assuming each iteration is set to last 4 weeks).\n\nRather than spending 1.5 months on requirements gathering, in Agile software development, the team will decide the basic core features that are required in the product and decide which of these features can be developed in the first iteration.\n\nAny remaining features that cannot be delivered in the first iteration will be taken up in the next iteration or subsequent iterations, based on priority.\n\nAt the end of the first iterations, the team will deliver a working software with the features that were finalized for that iteration.\n\nThere will be 10 iterations and at the end of each iteration the customer is delivered a working software that is incrementally enhanced and updated with the features that were shortlisted for that iteration.\n\nThe iteration cycle of an Agile project is shown in the image below.\n\nThis approach allows the customer to interact and work with functioning software at the end of each iteration and provide feedback on it. This approach allows teams to take up changes more easily and make course corrections if needed. In the Agile approach, software is developed and released incrementally in the iterations. An example of how software may evolve through iterations is shown in the image below.\n\nAgile methodology gives more importance to collaboration within the team, collaboration with the customer, responding to change and delivering working software.\n\nAgile Methodology in Software Engineering\n\nAgile development has become common place in IT industry.\n\nIn a recent survey over 52% of respondents said that their company practiced Agile development in one form or another.\n\nIrrespective of your role in the organization, it has become essential to understand how Agile development works.\n\nIt is essential to also know, how it differs from other forms of software development\n\nIn traditional approach each job function does its job and hands over to the next job function. The previous job functions have to signoff before it is handed over the next job function authenticating that the job is full and complete in all aspects. For example, Requirement gathering is completed and handed over to design phase and it is subsequently handed over to development and later to testing and rework. Each job function is a phase by itself.\n\nIn Agile way of working, each feature is completed in terms of design, development, code, testing and rework, before the feature is called done. There are no separate phases and all the work is done in single phase only.\n\nAgile Methodology in Testing\n\nThe objective of Agile Testing is to find defects and fix them immediately. This is in contrast to traditional model where testing occurs at the end\n\nIn Agile Testing, the testing team and development team are one, they are both simply called Team Members, where as in traditional model they are two different teams\n\nIn Agile Testing, development and testing are performed as part of a sequence of activities unlike traditional SDLC where development and testing are two separate phases\n\nAgile Testing reduces costs since the defects are identified and fixed earlier\n\nHow To Do Agile Testing\n\nIn Agile testing, each release has a separate test plan which is prepared for that release\n\nDuring the iteration 0 of the release, testing resources are identified, testing tools are setup, test planning, architecture etc are decided\n\nThe next stage is Construction where the main development and testing takes place. These are made up of different iterations for that release.\n\nDuring the construction stage, the testing team performs testing to ensure that the software behaves as expected\n\nThe next stage after several iterations, is called the Release end game where production deployment of the application takes place, users are trained, system and acceptance testing are done\n\nThe final stage is the production where the application is supported operationally\n\nDifference between Agile model and Non-Agile models\n\nParameters\n\nAgile Model\n\nNon-Agile Models\n\nApproach of this methodology This methodology is very flexible and adjustable and can adapt to the project needs. This methodology is not as flexible as Agile model and it’s tough to accommodate changes in the project. Measurement of Success The success of the project in Agile model is measured by the Business value delivered. In this methodology the success of the project is measured by the Conformation to plan. Size of the Project The Project size is usually small in Agile model. However larger projects can also be handled using the Scaled Agile Framework (SAFe). The project size is Large in non- Agile models. Style of Management The style of management in Agile model is not centralized. It is distributed among the team members. The management style in the non-Agile models is dictatorial. Only one person is the decision maker and rest of the people follows him. Ability to adapt to change In Agile model the changes are accepted and adapted as per the project needs. But in non-Agile models the changes are not accepted easily in the later stages of the development. Documentation required Less documentation is required in Agile. More documentation is required in non-Agile models. Importance of In Agile model more emphasis is given to the people that means it’s People- Oriented. In non-Agile models the more importance is given to the process hence it’s Process- Oreinted. Cycles or iterations Agile methodology has many cycles or iterations which is also known as Sprints. But, in Non-Agile methodology the cycles are limited. Planning in Advance There is minimal upfront planning in Agile methodology. In Non-Agile models the planning should be complete before the development starts. Revenue In Agile method the return on investment is early in the project cycle. In non-Agile methods the return on investment is at the end of the project. Size of the team The size of the team in Agile methodology is usually small and creative. But in Non-Agile models the team size is large.\n\nWhen to use Agile and Non-Agile models\n\nProject Attributes Agile Model Non-Agile Model Requirement of the Project Requirements in Agile model can change as per the customer requirement. Sometimes requirements are not very clear. In Non-Agile models the requirements are very clear before entering into the development phases. Any change in the requirement is not easily accepted during the development phases. Size of the Project The Project size is small in Agile model hence small team is required. But in Non-Agile models the Project size is usually big hence big team is required. Design of the Project In Agile model the architecture is made as per the current requirements but is designed to be flexible. In Non-Agile models the architecture is made as per the current requirements as well as for future requirements. Planning and Control of the Project In Agile model the planning of the project is Internalized and has qualitative control. But in Non-Agile models the plans are documented properly and have quantitative control. Type of Customers Agile methodology is followed by the collaborated, dedicated collated and knowledgeable customers. In Non-Agile models the customers are of Contract provisions. Developers required In Agile model the developers should be knowledgeable, analytically strong, collated and collaborative. In Non-Agile models the developers should be more Plan Oriented. Refactoring In Agile model refactoring is not costly. But in Non-Agile models the refactoring is very costly. Risks involved Usually in Agile models the chances of occurrence of unknown risks are more which can have major impact in the project. In Non-Agile models the risks are understood clearly and the impact of the risk in the project is very less.\n\nAdvantages of Agile Methodology\n\nIn Agile methodology the delivery of software is unremitting.\n\nThe customers are satisfied because after every Sprint working feature of the software is delivered to them.\n\nCustomers can have a look of the working feature which fulfilled their expectations.\n\nIf the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.\n\nIn Agile methodology the daily interactions are required between the business people and the developers.\n\nIn this methodology attention is paid to the good design of the product.\n\nChanges in the requirements are accepted even in the later stages of the development.\n\nDisadvantages of the Agile Methodology\n\nIn Agile methodology the documentation is less.\n\nSometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.\n\nIn few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required.\n\nThe projects following the Agile methodology may have to face some unknown risks which can affect the development of the project.\n\nOther popular articles:\n\nWhat are the Software Development Models?\n\nWhat is Agile model – advantages, disadvantages and when to use it?\n\nWhat is Incremental model- advantages, disadvantages and when to use it?\n\nWhat is Iterative model- advantages, disadvantages and when to use it?\n\nWhat are Agile Testing and Agile Development Activities?\n\nReader Interactions"
    }
}