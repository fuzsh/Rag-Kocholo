{
    "id": "dbpedia_1587_0",
    "rank": 21,
    "data": {
        "url": "https://tanzu.vmware.com/agile",
        "read_more_link": "",
        "language": "en",
        "title": "What is agile development?",
        "top_image": "https://d1fto35gcfffzn.cloudfront.net/images/og/topic-agile.jpg",
        "meta_img": "https://d1fto35gcfffzn.cloudfront.net/images/og/topic-agile.jpg",
        "images": [
            "https://d1fto35gcfffzn.cloudfront.net/tanzu/tanzu-by-broadcom-icon-white.svg",
            "https://d1fto35gcfffzn.cloudfront.net/images/spring/springone.svg",
            "https://d1fto35gcfffzn.cloudfront.net/images/global/explore-2024-footer-promo-74.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tanzu"
        ],
        "publish_date": "2022-07-26T00:00:00+00:00",
        "summary": "",
        "meta_description": "Agile development is a set of collaborative methods for iterative planning and engineering that result in fast and frequent delivery of value to customers.",
        "meta_lang": "en",
        "meta_favicon": "https://d1fto35gcfffzn.cloudfront.net/tanzu/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://tanzu.vmware.com/agile",
        "text": "What is agile?\n\nAgile software development promotes well-planned, small iterations by highly collaborative, cross-functional teams. Agile emphasizes continuous self-organization, testing, and monitoring that results in fast, secure, and frequent delivery of software. Agile principles empower you to respond to feedback and make necessary changes at any point in the agile software development lifecycle. A nimble approach to writing and testing code means you can deliver incremental value to your customers and your organization, while also making it faster and easier to respond to changing business needs. And that’s what being agile really means: embracing the iterative nature of continuous innovation through open communication and fast feedback loops between developers, business stakeholders, and customers.\n\nWhat is agile development?\n\nAgile development grew out of a need for flexibility and speed in modern software development. The central premise of The Agile Manifesto is to promote collaboration, communication, and responsiveness to create “better ways of developing software.” Modern practices such as cloud native app development, continuous integration and delivery (CI/CD), and DevOps are an outgrowth of agile software development processes, integrating software development and application delivery with security and consistency.\n\nIn this age of accelerating digital transformation, agile methodologies are a good fit for companies of all sizes and kinds. With its focus on iterative software development, autonomous teams, cross-functional collaboration, early delivery, flexibility, continual improvement, and adaptive planning, organizations can meet unanticipated challenges and shape future projects quickly and securely.\n\nOften the terms agile methodologies and agile frameworks are used interchangeably.\n\n&FilledSmallSquare;\n\nAgile methodologies are the distinct practices and principles a team adopts for a given project.\n\n&FilledSmallSquare;\n\nAgile frameworks are a more generalized set of agile principles and ideas that teams can adapt and apply to any project.\n\nAgile methodologies\n\nThe following methodologies are frequently employed by modern development teams.\n\n&FilledSmallSquare;\n\nAgile software development drives the evolution of a product through an iterative development cycle based on ongoing user feedback. With agile methodology, software is built and deployed frequently in order to get immediate feedback as a product takes shape, rather than the waterfall approach of releasing many changes all at once less frequently after a lot of upfront planning.\n\n&FilledSmallSquare;\n\nLean development evolved from the manufacturing industry, but its principles have been adapted to software development and product management. Lean is based on agile values, including eliminating waste, built-in quality, fast delivery, and encouraging communication between people. Lean minimizes the risk of building the wrong thing while maximizing customer value.\n\n&FilledSmallSquare;\n\nUser-centered design (UCD) develops the product around the user, what the user needs, and how the user wants to use the product rather than forcing the product onto the user and trying to change user behavior. The result is not just about making customers happy, but about ensuring a positive reinforcement loop where happier customers lead to greater business success.\n\nAgile frameworks\n\nThere are a number of ways to implement agile practices following the basic principles laid out in The Agile Manifesto. Here are some examples of popular agile frameworks and methods.\n\n&FilledSmallSquare;\n\nScrum is an agile framework that relies on sprints—short, timed iterations of 1–4 weeks—epics, and user stories. Scrum utilizes small, cross-functional teams of 1–10 people made up of a mix of customers, developers, testers, and a project manager. Design, development, testing, and QA is broken down into manageable units to deliver incremental value in a continuous delivery cycle. Teams craft user stories and hold frequent planning and review sessions to track progress and make necessary changes and corrections.\n\nSprints: Each sprint has a planning event, a daily meeting (Daily Scrum), a review, and a retrospective event. Each step of the sprint is assigned a fixed amount of time to completion called a timebox.\n\nEpics: An epic is a body of work that can be broken down into specific tasks or on user stories. Epics help organize work into a hierarchical structure.\n\nUser stories: A user story is a simple description of a product feature that lays out the goals, motivations, and desired user outcome. The product manager keeps a backlog with enough user stories for a team to work on during a 1- or 2-week sprint. User stories help break up software development into small, valuable iterations and are prioritized based on input from users, administrators, and the development team. You can read more about user stories with Tanzu Practices: User Story Writing.\n\n&FilledSmallSquare;\n\nExtreme programming (XP) is an agile framework that prescribes short iterations and frequent releases. XP utilizes pair programming, test-driven development (TDD)—which prioritizes testing before code writing or code changes—and continuous integration, testing code changes immediately after code is added to a larger codebase. Customers and software development teams meet often to plan release strategies. User stories and work estimates are created for each iteration, and tasks are assigned to developers at an iteration planning meeting (IPM).\n\nPair programming is a software development technique that pairs two programmers to work on the same problem at the same time, on the same computer (with separate monitors, keyboards, etc.). This highly collaborative approach breaks down knowledge silos, encourages skills sharing, and advances team building while increasing empathy and social interaction between developers. Though pairs generally share the same physical space, a shift to remote pair programming and flexible workplaces is becoming more common. Adjusting to a virtual extension of the physical workspace presents new challenges and opportunities for organizations.\n\n&FilledSmallSquare;\n\nKanban is an approach often used along with other agile frameworks and DevOps practices to help a team match its capacity to the amount of work in progress and to measure a project’s progress by visually mapping workflow. It doesn’t use iterations or sprints; instead, a Kanban board visually separates tasks into three categories: To Do, Doing, and Done.\n\n&FilledSmallSquare;\n\nScaled agile framework (SAFe) is an approach for managing hundreds or thousands of agile teams across an enterprise. Adopters use SAFe to ensure that individual teams—and most importantly, teams of teams—are all moving in the same direction to meet strategic goals. SAFe focuses on the planning, budgeting, and architectural issues inherent in large XP and Scrum-based processes for teams larger than 50 people. It doesn’t go deep into how individual teams are practicing agile; SAFe assumes that it’s already happening. (This blog post explores how Tanzu Labs works with customers implementing SAFe, while this post explains how UX designers can work effectively in a SAFe environment.)\n\nAgile vs. waterfall\n\nThe waterfall methodology was adapted from early 20th-Century physical engineering and manufacturing concepts that favored a step-by-step approach. Agile methodologies provide an alternative to the sequential development and fixed upfront schedules associated with linear approaches like waterfall. An iterative, incremental approach is at the heart of the agile software development lifecycle. Agile’s short iterations and flexible methodology have become indispensable to modern product development.\n\nBut agile development may not always be the right choice. Traditional models still have a place in software development. You may be faced with the decision: agile vs. waterfall? Waterfall requires extensive planning and long release cycles. This is good for a well-defined project that isn’t likely to change in any way before completion. However, if you think you’ll need to experiment and test with new products or features, make changes quickly, or deliver software in small releases in order to gather feedback as you go or mitigate the risks of making changes, then choose agile development. These are the main differences between agile and waterfall.\n\nFor more on waterfall, see A Brief History of Agile, Part 1: The Rise of Waterfall.\n\nAgile software development lifecycle\n\nA traditional software development lifecycle (SDLC) like waterfall is divided into linear phases that flow from one to the next, similar to a waterfall. Each step must be completed in order before moving on to the next phase.\n\nPhases of the waterfall SDLC are:\n\nPlanning\n\nAnalysis\n\nDesign\n\nDevelopment (coding)\n\nTesting\n\nDeployment\n\nMaintenance\n\nThe agile software development lifecycle integrates agile principles to embrace the iterative nature of continuous innovation. These are the six phases of the agile software development lifecycle:\n\nConcept: Product owner determines the scope of the project.\n\nInception: A team is assembled, tools and resources are organized, and product architecture is designed.\n\nIteration: The design is turned into code.\n\nRelease: The code is tested and the software is released to users.\n\nMaintenance: The software is maintained throughout its life.\n\nRetirement: The product is retired, either because it’s being replaced or is no longer needed.\n\nAs shown in the figure earlier, each iteration should go through a consistent set of steps that’s essentially a lighter weight version of most of this lifecycle. Typical elements for each iteration include:\n\nPlan: Determine requirements for the iteration.\n\nDesign: Design new interfaces and software elements as needed.\n\nTest: Test the code.\n\nBuild: Compile the iteration as part of other project code.\n\nAccept: Review and accept or reject the result.\n\nDeploy: Push the accepted code into production.\n\nBest practices to keep in mind if you're considering agile\n\nAgile software development requires a culture shift and a different mindset from more traditional methods. Business owners and stakeholders need to show patience and empathy for the technical complexity involved and become comfortable with fast, incremental delivery of value rather than big-bang release schedules. Multifunctional product teams made up of product managers, designers, and engineers need to adopt a product mindset and collaborate to deliver value for the business and customers. Make sure your organization is prepared before undertaking a change to agile.\n\nEnsure your team is onboard\n\nAgile is a very collaborative process, and adoption needs to happen at all levels. You want to get people excited by explaining how this will benefit them and the entire organization. Reassure them that this is not simply a fad. An investment in agile drives innovation, flexibility, and shorter development cycles.\n\nNever go it alone\n\nFind people on your team who are familiar with and excited about adopting agile. Implement agile at a grassroots level and anticipate any possible resistance to this change from other teams, management, and business partners. Consider hiring a partner experienced with agile development practices to help your team adopt agile or refine and scale existing practices in your organization. This will help reduce risk and increase time to adoption.\n\nTrain, train, train!\n\nYou need a plan to train your team. Poor training can lead to poor implementation. Agile is a set of methodologies that must be learned and practiced for teams to succeed. But more important than simply training is having your team learn by doing. Having people work on an actual project helps them learn and reinforces the benefits of agile in a tangible way.\n\nUse the right tools and processes\n\nWhat product management tools do you presently use and are they suited to agile? You need to be ready to implement TDD, pair programming, and CI/CD. Are your design and UX teams on board? The larger the organization, the more hearts and minds you will need to bring together. Adopting agile is immensely doable, and done well, changes permeate through the entire organization.\n\nEmbrace the change\n\nThere's no doubt about it: adopting agile is disruptive. Your teams will make mistakes. People will try to solve problems on their own, teams will want to over prepare, and technical debt will accumulate. At the end of the day, as long as your team is committed to becoming agile, you’ll work through the challenges and find your way forward."
    }
}