{
    "id": "dbpedia_1587_1",
    "rank": 46,
    "data": {
        "url": "https://about.gitlab.com/blog/2018/03/05/gitlab-for-agile-software-development/",
        "read_more_link": "",
        "language": "en",
        "title": "How to use GitLab for Agile software development",
        "top_image": "https://images.ctfassets.net/r9o86ar0p03f/2pdp2MNB7SoP4MhhiI1WIa/7d5f055921321693d5b301b84e3fad26/blog-image-template-1800x945__21_.png?fm=webp&w=820&h=500",
        "meta_img": "https://images.ctfassets.net/r9o86ar0p03f/2pdp2MNB7SoP4MhhiI1WIa/7d5f055921321693d5b301b84e3fad26/blog-image-template-1800x945__21_.png?fm=webp&w=820&h=500",
        "images": [
            "https://images.ctfassets.net/r9o86ar0p03f/2pdp2MNB7SoP4MhhiI1WIa/7d5f055921321693d5b301b84e3fad26/blog-image-template-1800x945__21_.png?fm=webp&w=820&h=500",
            "https://images.ctfassets.net/r9o86ar0p03f/47Ryn3tGT9pVgFkZ3di59g/8335c374e07e66373aad3ddbb4b5a647/amanda_rueda_headshot.png?fm=webp&w=80&h=80",
            "https://images.ctfassets.net/r9o86ar0p03f/5ZSyWACGhAwA9IleY5vdkS/9d13c540e753d4428c9ec473795931c0/gitlab-logo-extra-whitespace.png?fm=webp&w=80&h=80",
            "https://images.ctfassets.net/r9o86ar0p03f/5muPHOQCvDk4vUm6stgsEs/3fe9fb96a9324e2a76fc04fac57408d8/image1.png",
            "https://images.ctfassets.net/r9o86ar0p03f/4N6o18fYmWXSrONasWSw2y/ed3b9551a51fe071b2188835f03c5954/image3.png",
            "https://images.ctfassets.net/r9o86ar0p03f/xZl39Euf0UoD2JtzFQ4SB/49068a1b172924865704cd45c91135c6/image7.png",
            "https://images.ctfassets.net/r9o86ar0p03f/583GDLQaL9A1tTTYVKejPi/ce620603b7f598e508b4097b3efd13d3/WIP_limit.gif",
            "https://images.ctfassets.net/r9o86ar0p03f/4oHuqZNkJReuXY6BoRMjaJ/02f6051116fe9966bb2a64b3ed7cfcd2/image6.png",
            "https://images.ctfassets.net/r9o86ar0p03f/5aS8bKEy9ApQWqtLH2Cc7x/cbbd100034d9278fa93dd662f580308f/image5.png",
            "https://images.ctfassets.net/r9o86ar0p03f/1ZRTmvXJkoTsr54PVAN0xw/42a9cb912708be18d99f4b1411eb181c/image8.png",
            "https://images.ctfassets.net/r9o86ar0p03f/5vLe737i4QfvAqv6PnqUaR/8c5ee83b298ae572dadce09fded7d74e/cicdcover.png?fm=webp&w=318&h=222",
            "https://images.ctfassets.net/r9o86ar0p03f/3lH4gZFVIGCndksN6Rlg85/a6b99b2d87dc52678ba976e7b3360555/blog-image-template-1800x945__26_.png?fm=webp&w=318&h=222",
            "https://images.ctfassets.net/r9o86ar0p03f/3L7ZP4GxJrShu6qImuS4Wo/3e672e0b9ce98b50dde4b04cf7b2c84d/blog-image-template-1800x945__16_.png?fm=webp&w=318&h=222"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Amanda Rueda, Victor Wu",
            "Amanda Rueda",
            "Victor Wu"
        ],
        "publish_date": "2018-03-05T00:00:00",
        "summary": "",
        "meta_description": "How Agile artifacts map to GitLab features and how an Agile iteration looks in GitLab.",
        "meta_lang": "en",
        "meta_favicon": "/blog/nuxt-images/ico/favicon.ico?cache=20220414",
        "meta_site_name": "",
        "canonical_link": "https://about.gitlab.com/blog/2018/03/05/gitlab-for-agile-software-development/",
        "text": "Ever wondered if GitLab supports Agile methodology? If you're considering using GitLab it might not be obvious how the DevSecOps platform's features correspond with Agile artifacts, so we've broken it down for you.\n\nAgile is one of the most important and transformative methodologies introduced to the software engineering discipline in recent decades. While not everyone can agree on the detailed terminology of Agile concepts, it has nonetheless made a significant positive impact on software development teams efficiently creating customer-centric products through Agile software development and delivery processes.\n\nGitLab is designed to be flexible enough to adapt to your software development methodology, whether Agile or influenced by it. In this post, we'll show a simple mapping of Agile artifacts to GitLab features, and explain how customers have successfully run high-performing Agile software delivery teams with GitLab.\n\nMapping Agile artifacts to GitLab features\n\nAgile artifact â GitLab feature\n\nUser story â> Issues\n\nTask â> Tasks\n\nEpic â> Epics\n\nPoints and estimation â> Issue weight\n\nProduct backlog â> Issue boards\n\nSprint/iteration â> Iterations\n\nAgile board â> Issue boards\n\nTeam workload â> Issue boards\n\nBurndown chart â> Burndown charts\n\nAn Agile iteration with GitLab\n\nUser stories â GitLab Issues\n\nIn Agile software development methodology, you often start with a user story that captures a single feature to deliver business value for users. In GitLab, an issue serves this purpose with ease. GitLab Issues are essential for Agile teams, providing an effective method to manage tasks and projects. Software developers can create, assign, and track issues, ensuring clear accountability and progress visibility. Issues come with robust metadata such as assignee, iteration, weight, and labels, which enhances task prioritization and workflow management throughout the software development process. Additionally, team collaboration on issues is streamlined with discussion threads, attachments, and real-time updates, enabling effective communication and teamwork.\n\nThe GitLab Issue has a title and a description area in the middle, providing a space to document any details, such as the business value and relevant personas in a user story. The sidebar at the right provides integration with other Agile-compatible features like the epic parent that the issue belongs to, the iteration in which the issue is to be worked on, and the weight of the issue, reflecting the estimated effort.\n\nTask â Tasks\n\nOften, a user story is further separated into individual tasks. GitLab Tasks streamline project management by allowing Agile teams to break down user stories into discrete pieces of work. This feature supports the Agile framework by enabling software developers to create, assign, and track tasks within their projects. By integrating task management directly into GitLab, teams can maintain a cohesive workflow, ensuring all software development project activities are easily tracked and managed.\n\nEnhance user value by enabling precise task management and project tracking using GitLab. Tasks are equipped with the same metadata as issues, including assignee, iteration, weight, labels, time tracking, and collaboration features. This comprehensive feature set allows Agile teams and project managers to manage workloads effectively, prioritize tasks, and ensure seamless collaboration among software developers.\n\nEpics â GitLab Epics\n\nIn the other direction, some Agile practitioners specify an abstraction above user stories, often called an epic, that indicates a larger user flow consisting of multiple features. In GitLab, an epic also contains a title and description, much like an issue, but it allows you to attach multiple child issues to it to indicate that hierarchy.\n\nGitLab Epics allows Agile teams to organize and manage large projects efficiently by nesting epics up to nine layers deep. This hierarchical structure provides a clear view of the project's roadmap, helping software developers and project managers break down complex initiatives into manageable components. By utilizing child and linked epics, teams can better track progress, dependencies, and project milestones, enhancing collaboration and ensuring cohesive agile delivery.\n\nProduct backlog â GitLab Issue Boards\n\nThe product or business owners typically create these user stories to reflect the needs of the business and customers. They are prioritized in a product backlog to capture urgency and desired order of development. The product owner communicates with stakeholders to determine the priorities and constantly refines the backlog. In GitLab, an issue board organized with iterations as lists offers a drag-and-drop workflow experience that allows you to effortlessly prioritize your backlog and assign stories to an upcoming sprint.\n\nSprints â GitLab iterations\n\nA sprint represents a finite time period in which the work is to be completed, which may be a week, a few weeks, or perhaps a month or more. The product owner and the development team meet to decide the work that is in scope for the upcoming sprint. GitLab's iterations feature supports this: Assign iterations a start date and a due date to capture the time period of the iteration. The team then puts issues into the sprint by assigning them to that particular iteration.\n\nBy using iterations, you leverage GitLabâs enhanced capabilities for Agile project management, providing better visibility and control over your Agile planning and delivery.\n\nPoints and estimation â GitLab issue weight\n\nAlso in this meeting, user stories are communicated, and the level of technical effort is estimated for each in-scope user story. In GitLab, issues have a weight attribute, which you would use to indicate the estimated effort.\n\nIn this meeting (or in subsequent ones), user stories are further broken down to technical deliverables, sometimes documenting technical plans and architecture. In GitLab, this information can be documented in the issue, or in the merge request description, as the merge request is often the place where technical collaboration happens.\n\nDuring the sprint (GitLab iteration), software development team members pick up user stories to work on, one by one. In GitLab, issues have assignees. So you would assign yourself to an issue to reflect that you are now working on it. We'd recommend that you create an empty and linked-to-issue merge request right away to start the technical collaboration process, even before creating a single line of code.\n\nAgile board â GitLab Issue Boards\n\nThroughout the sprint, issues move through various stages, such as Ready for dev, In dev, In QA, In review, Done, depending on the workflow in your particular organization. Typically these are columns in an Agile board. In GitLab, issue boards allow you to define your stages and enable you to move issues through them. The team can configure the board with respect to the iteration and other relevant attributes. During daily stand-ups, the team looks at the board together, to see the status of the sprint from a workflow perspective.\n\nThe GitLab Issue Board also pulls in issues dynamically, similar to the GitLab issue list. But it allows for more flexible workflows. You can set up individual lists in the board, to reflect Agile board stages. Your team can then control and track user stories as they move from for example, Ready for dev, all the way to Released to production.\n\nTeam workload â GitLab Issue Boards\n\nAgile teams can optimize their workflows by creating issue boards with lists scoped to assignees in GitLab. This feature allows you to visualize the distribution of tasks among team members, enhancing Agile delivery. To set it up, navigate to your project or group, create a new board in the \"Boards\" section, and add lists for each assignee. Assign issues to team members, and they will automatically appear in the corresponding lists. This dynamic view empowers balanced workloads and effective task management.\n\nOrganize an issue board by assignee or by squad using [scoped labels]. GitLabâs Issue Board is incredibly diverse and supports workflows across the software development lifecycle.\n\nBurndown charts â GitLab Burndown Charts\n\nThe development team wants to know if they are on track in real time, and mitigate risks as they arise. GitLab provides burndown charts, allowing the team to visualize the work scoped in the current sprint \"burning down\" as they are being completed.\n\nToward the end of the sprint, the development team demos completed features to various stakeholders. With GitLab, this process is made simple using Review Apps so that even code not yet released to production, but in various testing, staging or UAT environments can be demoed. Review Apps and CI/CD features are integrated with the merge request itself.\n\nThese same tools are useful for Developers and QA roles to maintain software quality, whether through automated testing with CI/CD, or manual testing in a Review App environment.\n\nThe GitLab Burndown Chart allows a team to track scoped work \"burning down,\" as they are being completed in a sprint. This allows you to react to risks sooner and adapt accordingly, for example, informing your business stakeholders that certain features are anticipated to be delayed to a future sprint.\n\nTeam retrospectives at the end of the sprint can be documented in GitLabâs wiki, so that lessons learned and action items are tracked over time. During the actual retrospective, the team can look at the iteration report, which displays the burndown chart and other statistics of the completed sprint.\n\nStart your Agile journey with GitLab\n\nReady to elevate your Agile project management? GitLab offers a comprehensive suite of features tailored to Agile teams, software developers, and project managers, ensuring seamless collaboration and efficient workflows. Explore our pricing options, start a free trial and discover how GitLab can transform your Agile delivery processes."
    }
}