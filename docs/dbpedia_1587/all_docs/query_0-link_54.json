{
    "id": "dbpedia_1587_0",
    "rank": 54,
    "data": {
        "url": "https://www.synopsys.com/blogs/software-security/agile-cicd-devops-difference.html",
        "read_more_link": "",
        "language": "en",
        "title": "What’s the Difference Between Agile, CI/CD, and DevOps?",
        "top_image": "https://www.synopsys.com/content/dam/synopsys/library/icons/icon-integrating-security-into-an-agile-sdlc.svg",
        "meta_img": "https://www.synopsys.com/content/dam/synopsys/library/icons/icon-integrating-security-into-an-agile-sdlc.svg",
        "images": [
            "https://www.synopsys.com/content/dam/synopsys/logos/synopsys-logo-color.svg",
            "https://www.synopsys.com/content/dam/synopsys/logos/synopsys-logo-color.svg",
            "https://www.synopsys.com/content/dam/synopsys/play-button-arrow-sm.svg",
            "https://images.synopsys.com/is/image/synopsys/e-book-cover_Manifesto-1?qlt=82&wid=375&ts=1688586261644&$responsive$&fit=constrain&dpr=off 375w,https://images.synopsys.com/is/image/synopsys/e-book-cover_Manifesto-1?qlt=82&wid=480&ts=1688586261644&$responsive$&fit=constrain&dpr=off 480w,https://images.synopsys.com/is/image/synopsys/e-book-cover_Manifesto-1?qlt=82&wid=730&ts=1688586261644&$responsive$&fit=constrain&dpr=off 730w,https://images.synopsys.com/is/image/synopsys/e-book-cover_Manifesto-1?qlt=82&wid=992&ts=1688586261644&$responsive$&fit=constrain&dpr=off 992w,https://images.synopsys.com/is/image/synopsys/e-book-cover_Manifesto-1?qlt=82&wid=1200&ts=1688586261644&$responsive$&fit=constrain&dpr=off 1200w",
            "https://images.synopsys.com/is/image/synopsys/polaris-assist?ts=1718645641263&$responsive$",
            "https://images.synopsys.com/is/image/synopsys/cory-hamilton?ts=1710826790973&$responsive$",
            "https://images.synopsys.com/is/image/synopsys/synopsys-logo-thumbnail?ts=1713915553538&$responsive$",
            "https://images.synopsys.com/is/image/synopsys/SynopsysTeam?ts=1690921129013&$responsive$",
            "https://images.synopsys.com/is/image/synopsys/detect-prevent-and-mitigate-buffer-overflow-attacks?ts=1717768924210&$responsive$",
            "https://images.synopsys.com/is/image/synopsys/natalie-lightner?ts=1701801141236&$responsive$",
            "https://www.synopsys.com/content/dam/synopsys/logos/synopsys-logo-color.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "John Steven"
        ],
        "publish_date": "2018-03-18T00:00:00",
        "summary": "",
        "meta_description": "Delve into Agile, CI/CD, and DevOps' unique factors. Discover how they synergize to optimize development processes, practices, and culture.",
        "meta_lang": "en",
        "meta_favicon": "/etc.clientlibs/synopsys/clientlibs/synopsys-pagelibs/resources/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.synopsys.com/blogs/software-security/agile-cicd-devops-difference.html",
        "text": "You can’t build a house with a single tool. Nor can you enable your development practice with one. Agile, DevOps, and CI/CD are three distinct tools, each important in its own right. When a development organization uses all three for their intended purposes, the results are transformational. And in the context of security, only then—in our opinion—have you earned the right to call yourselves DevSecOps.\n\nAgile, now referred to by some of its manifesto authors as agility, is focused on removing process barriers and enabling the key stakeholders, folk like developers and customers, to collaborate more closely on accelerating delivery. Agile highlights the constancy of change and acknowledges that as software producers, we don’t often know everything we need to successfully conceive, develop, and deliver high-quality software in monolithic life cycles.\n\nSo, though agile has come to mean different things over the past two decades, its fundamentals remain: Remove process barriers empowering individuals, produce working software rapidly, collaborate closely with customers, and respond to (rather than resist) change.\n\nContinuous integration (CI) is a software engineering practice where members of a team integrate their work with increasing frequency. In keeping with CI practice, teams strive to integrate at least daily and even hourly, approaching integration that occurs “continuous-ly.”\n\nHistorically, integration has been a costly engineering activity. So, to avoid thrash, CI emphasizes automation tools that drive build and test, ultimately focusing on achieving a software-defined life cycle. When CI is successful, build and integration effort drops, and teams can detect integration errors as quickly as practical.\n\nContinuous delivery (CD) is to packaging and deployment what CI is to build and test. Teams practicing CD can build, configure, and package software and orchestrate its deployment in such a way that it can be released to production in a software-defined manner (low cost, high automation) at any time.\n\nHigh-functioning CI/CD practices directly facilitate agile development because software change reaches production more frequently. As a result, customers have more opportunities to experience and provide feedback on change.\n\nDevOps focuses on limitations of culture and roles as agile development does process. The intention of DevOps is to avoid the negative impact that overspecialization and stovepiping roles in an organization have on preventing rapid or even effective response to production issues. DevOps organizations break down the barriers between Operations and Engineering by cross-training each team in the other’s skills. This approach improves everyone’s ability to appreciate and participate in each other’s tasks and leads to more high-quality collaboration and more frequent communication."
    }
}