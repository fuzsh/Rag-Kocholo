{
    "id": "dbpedia_1587_0",
    "rank": 24,
    "data": {
        "url": "https://learn.microsoft.com/en-us/devops/plan/what-is-agile",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile? - Azure DevOps",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/devops/_img/whatisagile_600x300.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-11-28T19:04:00+00:00",
        "summary": "",
        "meta_description": "Agile is a term that describes approaches to software development that emphasize incremental delivery, collaboration, and continual learning.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/devops/plan/what-is-agile",
        "text": "What is Agile?\n\nAgile is a term that describes approaches to software development that emphasize incremental delivery, team collaboration, continual planning, and continual learning. The term Agile was coined in 2001 in the Agile Manifesto. The manifesto set out to establish principles to guide a better approach to software development. At its core, the manifesto declares four value statements that represent the foundation of the Agile movement. As written, the manifesto states:\n\nWe have come to value:\n\nIndividuals and interactions over processes and tools.\n\nWorking software over comprehensive documentation.\n\nCustomer collaboration over contract negotiation.\n\nResponding to change over following a plan.\n\nThe manifesto doesn't imply that the items on the right side of these statements aren't important or needed. Rather,Â items on the left are simply more valued.\n\nAgile methods and practices\n\nIt's important to understand that Agile isn't a thing. You don't do Agile.Â Rather, Agile is a mindset that drives an approach to software development. Because there's no single approach that works for all situations, the term Agile has come to represent various methods and practices that align with the value statements in the manifesto.\n\nAgile methods, which are often called frameworks, are comprehensive approaches to phases of the DevOps lifecycle: planning, development, delivery, and operations. They prescribe a method for accomplishing work, with clear guidance and principles.\n\nScrum is the most common Agile framework, and the one that most people start with. Agile practices, on the other hand, are techniques that are applied during phases of the software development lifecycle.\n\nPlanning Poker is a collaborative estimation practice that's designed to encourage team members to share their understanding of what done means.Â Many people find the process fun, and it has proven toÂ help foster teamwork and better estimates.\n\nContinuous integration (CI) is a common Agile engineering practice that involves integrating code changes into the main branch frequently.Â An automated build verifies changes. As a result, there's a reduction in integration debt and a continually shippable main branch.\n\nThese practices, like all Agile practices, carry the Agile label, because they're consistent with the principles in the Agile manifesto.\n\nWhat Agile isn't\n\nAs Agile has gained popularity, many stereotypes and misinterpretations have cast a negative shadow on its effectiveness. It's easy to sayÂ \"Yes, we're doing Agile,\" without any accountability. Keeping this point in mind, consider a few things that Agile isn't.\n\nAgile isn't cowboy coding. AgileÂ shouldn't beÂ confused with a \"we'll figure it out as we go\" approach to software development. Such an idea couldn't be further from the truth. Agile requires both a definition of done and explicit value that's delivered to customers in every sprint. While Agile values autonomy for individuals and teams, it emphasizes aligned autonomy to ensure thatÂ the increased autonomy produces increased value.\n\nAgile isn't without rigor and planning. On the contrary, Agile methodologies and practices typically emphasize discipline in planning. The key is continual planning throughout the project, not just planning up front.Â Continual planningÂ ensures that the team can learn from the work that they execute. Through this approach, they maximize the return on investment (ROI) of planning.\n\n\"Plans are worthless, but planning is everything.\" â Dwight D. Eisenhower\n\nAgile isn't an excuse for the lack of a roadmap. This misconception has probably done the most harm to the Agile movement overall. Organizations and teams that follow an Agile approach absolutely know where they're going and the results that they want to achieve.Â RecognizingÂ change asÂ part of the processÂ is different from pivoting in a new direction every week, sprint, or month.\n\nAgile isn't development without specifications.Â It's necessary in any project to keepÂ your teamÂ aligned on why and how work happens.Â An Agile approach to specs includes ensuringÂ that specs are right-sized, and that they reflect appropriately how the team sequences and delivers work.\n\nAgile isn't incapable of accommodating unplanned work and other interruptions. It's important to complete sprints on schedule. But just because an issue comes up that sidetracks development doesn't mean that a sprint has to fail. Teams can plan for interruptions by designating resources ahead of time for problems and unexpected issues. Then they can address those issues but stay on track with development.\n\nAgile isn't inappropriate for large organizations. A common complaint is that collaboration, a key component of Agile methodologies, is difficult in large teams. Another gripe is that scalable approaches to Agile introduce structure and methods that compromise flexibility. In spite of these misconceptions, it's possible to scale Agile principles successfully. For information about overcoming these difficulties, see Scaling Agile to large teams.\n\nAgile isn't inefficient. To adapt to customers' changing needs, developers invest time each iteration to demonstrate a working product and collect feedback. It's true that these efforts reduce the time that they spend on development. But incorporating customer requests early on saves significant time later. When features stay aligned with the customer's vision, developers avoid major overhauls down the line.\n\nAgile isn't a poor fit for today's applications, which often center on data streaming. Such projects typically involve more data modeling and extract-transform-load (ETL) workloads than user interfaces. This fact makes it hard to demonstrate usable software on a consistent, tight schedule. But by adjusting goals, developers can still use an Agile approach. Instead of working to accomplish tasks each iteration, developers can focus on running data experiments. Instead of presenting a working product every few weeks, they can aim to better understand the data.\n\nWhy Agile?\n\nSo why would anyone consider an Agile approach? It's clear that the rules of engagement around building software have fundamentally changed in the last 10-15 years. Many of the activities look similar, but the landscape and environments where we apply them are noticeably different.\n\nCompare what it's like to purchase software today with the early 2000s. How often do people drive to the store to buy business software?\n\nConsider how feedback is collected from customers about products. How did a team understand what people thought about their software before social media?\n\nConsider how often a team desires to update and improve the software that they deliver. Annual updates are no longer feasible against modern competition.\n\nForrester's Diego Lo Guidice says it best in his blog, Transforming Application Delivery (October, 2020).\n\n\"Everything has dramatically changed. Sustainability, besides green and clean, means that what we build today has to be easily and quickly changed tomorrow. Strategic plans are short-term, and planning and change are continuous.\" â Diego Lo Guidice, Forrester\n\nThe rules have changed, and organizations around the world now adapt their approach to software development accordingly. Agile methods and practices don't promise to solve every problem. But they do promise to establish a culture and environment where solutions emerge through collaboration, continual planning and learning, and a desire to ship high-quality software more often.\n\nNext steps"
    }
}