{
    "id": "dbpedia_1587_2",
    "rank": 3,
    "data": {
        "url": "https://www.infoworld.com/article/2259475/what-is-agile-methodology-modern-software-development-explained.html",
        "read_more_link": "",
        "language": "en",
        "title": "What is agile methodology? Modern software development explained",
        "top_image": "https://www.infoworld.com/wp-content/uploads/2024/06/agile_change-agent_flexible_dance_balance_skills_by-drew-graham-unsplash-100764265-orig.jpg?quality=50&strip=all&w=1024",
        "meta_img": "https://www.infoworld.com/wp-content/uploads/2024/06/agile_change-agent_flexible_dance_balance_skills_by-drew-graham-unsplash-100764265-orig.jpg?quality=50&strip=all&w=1024",
        "images": [
            "https://www.infoworld.com/wp-content/uploads/2024/07/1218-0-33547500-1722282716-isaac_sacolick-100794517-orig.jpg?quality=50&strip=all&w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/06/agile_change-agent_flexible_dance_balance_skills_by-drew-graham-unsplash-100764265-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/07/1218-0-33547500-1722282716-isaac_sacolick-100794517-orig.jpg?quality=50&strip=all&w=250",
            "https://www.infoworld.com/wp-content/uploads/2024/08/482983-0-97650600-1723156623-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=484",
            "https://www.infoworld.com/wp-content/uploads/2024/07/483088-0-52095300-1722288182-serdaryegulalp2_crop-100796854-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/06/sharon-machlis_150x150px-100780511-orig.gif?w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3484912-0-57845400-1723218009-shutterstock_1921183838.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3484345-0-03027800-1723073044-shutterstock_1927160003.jpg?quality=50&strip=all&w=439",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3482187-0-43474400-1723042868-shutterstock_1168856884-100927742-orig.jpg?quality=50&strip=all&w=378",
            "https://www.infoworld.com/wp-content/uploads/2024/07/3479099-0-17628500-1722369235-Linux-Tips-video-template_9673e7.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/07/Youtube-Thumbnails_Template-OLD-1.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/06/youtube-thumbnails_template-old-100963211-orig.jpg?quality=50&strip=all&w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Isaac Sacolick",
            "Isaac Sacolick Contributing",
            "Serdar Yegulalp Senior",
            "Sharon Machlis Executive Editor",
            "Data & Analytics"
        ],
        "publish_date": "2024-04-02T05:00:00-04:00",
        "summary": "",
        "meta_description": "Everyone talks about agile development, but how does it really work? Learn how teams use scrum, kanban, and other agile methodologies to deliver better software.",
        "meta_lang": "en",
        "meta_favicon": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "InfoWorld",
        "canonical_link": "https://www.infoworld.com/article/2259475/what-is-agile-methodology-modern-software-development-explained.html",
        "text": "It’s hard to believe that the agile software development methodology officially turned 20 years old last year. What once was an outlying practice for startups collaborating in colocated spaces with stickies and whiteboards is now a sophisticated, scalable, and widely used set of agile software development processes and tools.\n\nWhat is agile software development methodology\n\nThere’s a rich history behind agile software development and why organizations use agile methods such as scrum and kanban to modernize applications, improve customer experience, and implement digital transformations. There’s also a tremendous body of knowledge around these methodologies and their intersections with design thinking, product management, and devops. Fewer people today ask, “What is agile?” More are seeking guidance for how to align their teams on agile best practices.\n\nThis article is a primer on agile methodologies, starting with people, teams, processes, and tools. You’ll also learn how agile connects to devops, and about best practices that help organizations cultivate an agile culture and deliver better software.\n\nRoles in agile methodology\n\nAn agile software development process always starts by defining the users for a particular product and documenting a vision statement for the scope of problems, opportunities, and values to be addressed. The product owner captures this vision and works with a multidisciplinary team (or teams) to deliver on it. Several roles are involved in an agile development process.\n\nUsers\n\nAn agile process always begins with the user or customer in mind. Today, we often define user personas to illustrate different workflow roles or types of customer needs and behaviors.\n\nProduct owner\n\nThe product owner is tasked to be the voice of the customer, including any internal stakeholders. This person distills insights, ideas, and feedback to create a product vision. Product visions are often short and straightforward, but they nonetheless paint a picture of who the customer or user is, what values are being addressed, and a strategy for addressing them. I imagine Google’s original vision looked something like, “Let’s make it easy for anyone with internet access to find relevant websites and webpages with a simple, keyword-driven interface and an algorithm that ranks reputable sources higher in the search results.”\n\nWhatever the vision, the product owner is responsible for defining it and then working with the development team to make it real.\n\nTo work with the development team, the product owner breaks down the product vision into a series of user stories. Each user story should identify the target users, their challenges, why the solution is needed, and what constraints and acceptance criteria define the solution. The product owner prioritizes these user stories and reviews them with the team to ensure they have a shared understanding of what is being asked of them.\n\nSoftware development team\n\nTeams should be multidisciplinary and include a diverse group with the skills and backgrounds to get the job done. In addition to developers, agile development teams should include quality assurance automation engineers, data engineers, user experience (UX) designers, and other roles depending on the type of software project.\n\nAgile focuses teams on delivering working software, so they must complete end-to-end functioning applications, integrations, and other deliverables that impact users—not just the technical components. Team members must align on what they are building, who is doing what, and how the software will be developed.\n\nAgile teams often have other roles assigned, including the following:\n\nTech or team leads partner with the product owner on architecture, non-functional acceptance criteria, sequencing, dependencies, and other technology and security considerations. Tech leads have broad responsibilities that might include estimating stories and planning implementation details with the team.\n\nScrum masters often coach new teams on agile processes, responsibilities, and tools. Scrum master responsibilities can include resolving blocks that impede progress, reviewing approaches to improve the agile team’s velocity, and grooming backlogs.\n\nBusiness analysts partner with the product owner. The analysts’ responsibilities often include creating wireframes, documenting user stories, and reviewing test results. Business analysts are especially helpful when software development teams are developing microservices and other technical products, and where the business analyst has more software development knowledge than the product owner.\n\nIt is up to organizational leaders to decide how to staff agile teams and how big to make them. Many follow Jeff Bezos’s best practice of constructing two pizza-size agile teams to maximize the collaboration between teammates.\n\nWhat are scrum and kanban\n\nOnce a product vision and team (or teams) adopt agile principles, starting with the ones identified in the agile manifesto, the organization must select a process methodology. Scrum and kanban are the primary agile processes.\n\nSome organizations start with kanban because it’s relatively easy to explain and implement. Kanban works as a fan-in and fan-out process where the team pulls user stories from an intake board and funnels them through a workflow until they are marked done.\n\nBut many organizations implement scrum, which organizes the work in cadences called sprints, usually lasting one or two weeks. The product owner writes the requirements as user stories, then prioritizes them in a backlog based on their business value. The team reviews the backlog and commits to the top user stories they can complete during the sprint.\n\nScrum includes several standard meetings (sometimes called scrum ceremonies or scrum rituals) to help teams commit to sprint priorities, complete the work during the sprint, and end each sprint successfully. These meetings usually include a few common elements:\n\nSprint planning is where the product owner shares priorities, and the team decides how much work it can complete during the sprint.\n\nDaily standup meetings help teams discuss the status of user stories; teammates share their daily goals, and anyone can escalate blocks that impede the team’s progress.\n\nSprint reviews are demo meetings at the end of the sprint, where the functionality is shown to the product owner to gain acceptance on completed work.\n\nRetrospective meetings are where the team discusses what went well and what needs improvement in their agile and software development processes.\n\nIt should be noted that these practices are adaptable to agile hybrid work models.\n\nScrum improves a team’s performance by empowering the team to commit to an achievable amount of work rather than having a product, program, or project manager specify the expected timeline and scope. The user story forms a microcontract that separates business need, the acceptance criteria (or what agile teams sometimes call the definition of done), and then enables teams to self-organize on how to implement. Sprint reviews are one type of feedback loop, and product owners are encouraged to realign priorities and redefine requirements before each sprint. Sprint retrospectives help the team improve collaboration and initiate process improvements.\n\nTechnical best practices for agile organizations\n\nScrum forms the basic process for teams collaborating, planning, and delivering, but it doesn’t speak to technical best practices, organizational standards, or defining and driving agile cultures.\n\nToday, many technical best practices include defining the software development lifecycle (SDLC) and implementing devops processes. The SDLC provides guidelines on writing code, managing software assets, and developing technical standards. Devops automations like CI/CD, Infrastructure as Code (IaC), and continuous testing enable a more reliable path to production. Other practices, including shift-left security practices, observable microservices, feature flagging, canary releases, and AIOps, provide a more flexible and reliable delivery model.\n\nThe combination of empowering self-organizing teams, agile methodologies, devops automations, and modernizing to cloud architectures helps technology organizations evolve their culture. Longer development cycles are replaced by continuous delivery models that enable releasing features and improvements faster. Automations address many gaps between developers seeking autonomy and speed with operations responsibilities around performance, reliability, and security. Combining these practices helps agile teams make smarter architecture decisions, drive experimentation, become more data driven, and correct mistakes quickly."
    }
}