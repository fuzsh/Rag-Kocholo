{
    "id": "dbpedia_1587_2",
    "rank": 69,
    "data": {
        "url": "https://digital.ai/glossary/agile-methodology/",
        "read_more_link": "",
        "language": "en",
        "title": "Agile Methodology: Benefits & Methods",
        "top_image": "https://digital.ai/wp-content/uploads/2022/09/ditigalai-open-graph.jpg",
        "meta_img": "https://digital.ai/wp-content/uploads/2022/09/ditigalai-open-graph.jpg",
        "images": [
            "https://digital.ai/wp-content/uploads/2021/04/digitalai-logo@1x.png",
            "https://digital.ai/wp-content/uploads/2024/05/PD-HO-GEN-2024-5-erawan-waterfall-mainnav-updated.png",
            "https://digital.ai/wp-content/uploads/2024/05/RC-TN-AS-2024-5-app-threat-report.png",
            "https://digital.ai/wp-content/uploads/2024/05/BP-TN-GEN-2024-5-erawan-release.png",
            "https://digital.ai/wp-content/uploads/2022/12/BP-TN-AS-2022-12-security-reaction.jpg",
            "https://digital.ai/wp-content/uploads/2023/02/GE-TN-GEN-2023-2-logo-history-border.png",
            "https://digital.ai/wp-content/uploads/2021/04/digitalai-logo@1x.png",
            "https://digital.ai/wp-content/uploads/2024/05/PD-HO-GEN-2024-5-erawan-waterfall-mainnav-updated.png",
            "https://digital.ai/wp-content/uploads/2024/05/RC-TN-AS-2024-5-app-threat-report.png",
            "https://digital.ai/wp-content/uploads/2024/05/BP-TN-GEN-2024-5-erawan-release.png",
            "https://digital.ai/wp-content/uploads/2022/12/BP-TN-AS-2022-12-security-reaction.jpg",
            "https://digital.ai/wp-content/uploads/2023/02/GE-TN-GEN-2023-2-logo-history-border.png",
            "https://digital.ai/wp-content/uploads/2024/02/RC-TN-SA-2024-2-state-of-agile-17-webinar.png",
            "https://digital.ai/wp-content/uploads/2024/01/RC-TN-SA-2024-1-mastercam-is-more-efficient-makes-better-decisions-with-digital-ai-agility.png",
            "https://digital.ai/wp-content/uploads/2024/01/RC-TN-SA-2024-1-17th-state-of-agile-report.png",
            "https://digital.ai/wp-content/uploads/2023/09/Images.png",
            "https://digital.ai/wp-content/uploads/2023/09/digital-ai-reversecolor-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2019-08-06T00:00:00",
        "summary": "",
        "meta_description": "\"Agile methodology\" is a term used to refer to the concepts, practices, and sometimes tools that are all reflective of the product development philosophy agile.",
        "meta_lang": "en",
        "meta_favicon": "https://digital.ai/wp-content/uploads/2022/09/cropped-digitalai-favicon-32x32.jpg",
        "meta_site_name": "Digital.ai",
        "canonical_link": "https://digital.ai/glossary/agile-methodology/",
        "text": "The Agile movement was born in 2001 during a meeting of 17 forward-thinking developers at a retreat in Utah. The philosophy and principles established during the retreat formed the basis of Agile and subsequent Agile methodologies that were developed from their initial work.\n\nSince the publication of the original document, “The Manifesto for Agile Software Development”, Agile methodology has had a profound transformative effect on not just software development but organizations across nearly every field. The values of lean product creation, iterative discovery, change-focused development, and collaborative work performed across all corporate and social groupings have formed the basis of new, advanced business and product models worldwide.\n\nThis guide to Agile Methodology will serve as an overview to introduce the core principles of Agile. We will start with a definition oofagileMethodology as proposed in the 2001 Manifesto, and continue by describing some of the most well-known offshoots that have sprung from agile. Finally, we will discuss some of the most popular Agile methods and tools.\n\nWhat is Agile?\n\nAgile is an approach to work (initially software development) that can be thought of as a commitment to continuous change and improvements.\n\nAgile values\n\nAgile is succinctly described in the following values, which were written in 2001 by the original Agile Manifesto team:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nLooking at these principles, it is easy to see that Agile is defined by what it is not as well as what it is. The four values depicted above all have the common thread of prizing iterative discovery and collaboration over rigid deliverables. By focusing on these elements, Agile teams can not only create better products with less waste, but they can also allow room for discovery, all while keeping functional releases flowing to the end customer.\n\nAgile vs. Waterfall development\n\nAgile’s founders proposed a major departure from the software industry’s traditional work methods. At the time (ca. 2001), software was largely created as a single project-based effort to produce a digital product based on specific specifications set months in advance. The vision for the product was determined by a group of consultants, executives, and administrators who would then form a list of requirements to be given to management teams. The management teams would then delegate the work of coding, compiling, testing, and building out the requested software, to be performed over a set period within a set budget.\n\nDevelopers referred to this system as the “waterfall” methodology because software requirements and deliverables were all dictated from the top of the company down to the core development workers.\n\nThe original Agile collaborators rejected this form of software development for several reasons. Foremost, waterfall was too inflexible to respond to customer demands that could change during development. Secondly, waterfall product design meant that all innovations were supposed to be devised before the project was ever started. This rigid framework leaves little room for the discovery of new feature possibilities until after the release is finished. Further, the software may not work as intended, so discovering this mid-development in a waterfall project meant costly delays.\n\nAgile’s founders proposed, instead, a method of creating software that was open to discovery, innovation, and iteration. Rather than expecting an entire piece of feature-complete software to be delivered at a certain date, functional builds could be released incrementally. This reduces time-to-market and allows for development to be budgeted for in phases, as opposed to all at once.\n\nMost importantly, Agile development acknowledges that the product as-originally-imagined may not be capable of delivering the expected level of value to customers and the company itself. Working in build phases allows for new ideas to be added or product strategies to be changed, allowing development to respond in ways waterfall cannot.\n\nAgile principles\n\nTo overcome the shortcomings of waterfall, the Agile philosophy encourages ideas to be sourced from everywhere in the company. Also important is for product development cycles to be focused on iterative changes, delivered frequently, as opposed to major product releases that took months or years to create a functional build.\n\nIn place of traditional “waterfall” management-driven development cycles, the group proposed the following working methods which were radical at the time:\n\nWhen creating new software, start with simple concepts and ideas rather than exhaustive deliverablesDevelop a working proof-of-concept prototype that exemplifies the potential for the concept to deliver value to customers and internal stakeholders.\n\nMake business people and developer teams collaborate to determine ways to advance, improve, and evolve the working prototype into more-robust versions.\n\nMake time and space daily for direct conversations between individuals and team members so that progress is followed and new opportunities to improve the product are discovered. This can take the form of quick stand-up meetings or longer scrum meetings.\n\nDeliver new working versions of software frequently, continuously integrating and deploying the new changes in the live production environment. Each changed version represents an improved version of the previous.\n\nReflect on the outcome of each working period (a “sprint”), and use lessons learned to improve later development.\n\nGive the customer a voice in the process, either through direct surveying or through indirect data signals, in order to continue improving the product\n\nAgile and Lean manufacturing\n\nAgile absorbs many lessons from lean manufacturing, a philosophy pioneered during the growth of advanced industrialized manufacturing in the latter half of the 20th century. Lean manufacturing eliminates unnecessary steps in product creation while improving the pace of production. These methods were famously put to use by the Japanese motor company Toyota, forming the Toyota Production System (TPS).\n\nKey lessons for Agile learned from lean include:\n\nCreate the most efficient process possible.\n\nEliminate waste (Muda) by combining processes and removing those that do not result in a better product.\n\nRigorously measure results so that products have consistent quality and consistent manufacturing cycles.\n\nLet workers contribute to improving processes, and rely on key personnel to drive quality, speed, and efficiency goals.\n\nIdentify steps in the process that contribute to delays or poor quality, and address these “flow” issues so that a smooth, efficient process creates consistent products on a reliable basis.\n\nWhat is Agile Methodology?\n\nAgile methodology is a set of working methods that all reflect the Agile ideals first codified in 2001. As such, there are actually multiple methodologies that can be included under the umbrella of “Agile Methodology”. These make up the most popular Agile methods, which are each described in further detail below.\n\nAgile methodology is defined by the following traits:\n\nTeams are built from subject matter experts from different areas of the organization (cross-functional teams).\n\nCross-functional teams are responsible for building prototype versions of software/product concepts based on innovative ideas sourced from the team itself as well as customer feedback and product strategy teams.\n\nThe software product is then revised during a short “sprint” to add more functionality, features, improvements, and fixes.\n\nIdeas for changing and improving the product are sourced from across the company Discussions on these matters take place frequently.\n\nCross-functional teams discuss work progress, challenges, priorities, and new emerging opportunities during short daily “stand up” meetings.\n\nOnce a sprint has been completed, the changes created during the sprint are incorporated into the current version of the product.\n\nQuality controls are introduced throughout the process, including regular testing and the incorporation of customer feedback. Issues with a specific release are discovered and (ideally) dealt with prior to the integration and delivery of the new release.\n\nAt the conclusion of each sprint, the cross-functional team takes time to reflect on the results as well as how the process went. New goals and milestones are likely to be set based on what was learned.\n\nNew sprints are organized for cross-functional teams to take on, which will add new features, improvements, and fixes.\n\nWhat are the types of Agile Methods?\n\nThere are many popular versions and offshoots of Agile as well as methods that predated the Agile Manifesto but share its values. They include Scrum, Lean, Kanban, Extreme Programming (XP), Feature Driven Development (FDD), Dynamic Systems Development Method (DSDM), and Crystal.\n\nScrum\n\nScrum focuses on the use of aggressive sprints to complete iterative Agile improvements. Scrum teams coordinate to get major work done during the course of sprints, and each sprint is planned so that significant work can be accomplished without compromising the quality and integrity of the release.\n\nScrum is notable for introducing the roles of “Scrum Master” and “Product Owner”, both of which have oversight for seeing that all the small processes add up to desirable results. Also important is the concept of a “Product Backlog”, which represents opportune features, improvements, and fixes to introduce in the next sprint.\n\nScrum methodology has been proven to scale to multiple teams across very large organizations with 800+ people. See how Digital.ai Agility, formerly VersionOne, supports scrum sprint planning by making it easier to manage your product backlog.\n\nLean\n\nLean manufacturing, described in part above, prioritizes the creation of continual, consistent value through a predictable “flow” of work. It emphasizes the speed and efficiency of development workflow and relies on rapid and reliable feedback between programmers and customers. Lean uses the idea of work product being “pulled” via customer request. It focuses decision-making authority and ability on individuals and small teams since research shows this to be faster and more efficient than the hierarchical flow of control.\n\nLean also concentrates on the efficiency of the use of team resources, trying to ensure that everyone is productive as much of the time as possible. It concentrates on concurrent work and the fewest possible intra-team workflow dependencies. Lean also strongly recommends that automated unit tests be written at the same time the code is written.\n\nKanban\n\nKanban is a method for managing production that is closely entwined within the history of lean. The kanban method primarily makes use of a “kanban board” that tracks the current volume of work items and the stages of work through which they have progressed. A kanban board uses sticky notes (or a virtual equivalent) to track the number of current work items at each stage of the process. Once a work item has been completed, the sticky note is moved to the next stage of the process.\n\nKanban emphasizes flow by visualizing the current volume of work items and the progress they are at within the development cycle. When many work items get bottled up in a single stage, it is a sign to immediately tackle the amount of work-in-progress (WIP) so that the sprint or task group can be ushered towards completion. The elimination of WIP can also serve as a signal to “pull” new work items from the backlog since there is now a new capacity.\n\nExtreme Programming (XP)\n\nExtreme Programming, or “XP” was created in the late 90s by Agile Manifesto collaborator Kent Beck. Like Agile, it promotes high customer involvement, rapid feedback loops, continuous testing, continuous planning, and close teamwork to deliver working software at very frequent intervals, typically every 1-3 weeks.\n\nThe original XP recipe is based on four simple values: simplicity, communication, feedback, and courage. It also functions through twelve critical supporting practices:\n\nPlanning game\n\nSmall releases\n\nCustomer acceptance tests\n\nSimple design\n\nPair programming\n\nTest-driven development\n\nRefactoring\n\nContinuous integration\n\nCollective code ownership\n\nCoding standards\n\nMetaphor\n\nSustainable pace\n\nFeature Driven Development (FDD)\n\nFeature Driven Development (FDD) is a variant of Agile methodology that describes specific, very short phases of work, which are to be accomplished separately per feature. These include domain walkthrough, design, design inspection, code, code inspection, and promotion to build.\n\nThe primary concept of FDD is that the intended future state of the product can be depicted using models and that working on features helps build out a holistic product model represented by things that are “useful in the eyes of the client”.\n\nFDD recommends specific programmer practices such as “regular builds” and “component/class ownership”. FDD’s proponents claim that it scales more straightforwardly than other approaches, and is better suited to larger teams.\n\nDynamic Systems Development Method (DSDM)\n\nDSDM is another early ancestor to Agile, first described in 1994. The seeds of DSDM’s creation came from rapid application development (RAD), which aimed to standardize software delivery frameworks. After the advent of Agile, DSDM further evolved and matured to provide a comprehensive foundation for planning, managing, executing, and scaling agile process and iterative software development projects.\n\nDSDM is based on nine key principles that primarily revolve around business needs/value, active user involvement, empowered teams, frequent delivery, integrated testing, and stakeholder collaboration. DSDM specifically calls out “fitness for business purpose” as the primary criteria for delivery and acceptance of a system, focusing on the useful 80% of the system that can be deployed in 20% of the time.\n\nDSDM prioritizes certain deliverables using a time-box model, and items that fall lower on priority are pre-selected to be moved aside in order to meet time-box deadlines.\n\nCrystal\n\nThe Crystal methodology is one of the most lightweight, adaptable approaches to software development. Several of the key tenets of crystal include teamwork, communication, and simplicity, as well as reflection to frequently adjust and improve the process. Like other agile process methodologies, crystal promotes early, frequent delivery of working software, high user involvement, adaptability, and the removal of bureaucracy or distractions.\n\nCrystal is actually comprised of a family of agile methodologies such as crystal clear, crystal yellow, crystal orange and others, whose unique characteristics are driven by several factors such as team size, system criticality, and project priorities. This crystal family addresses the realization that each project may require a slightly tailored set of policies, practices, and processes in order to meet the project ‘s unique characteristics.\n\nThe Benefits of the Agile Methodology\n\nAgile methods can all have their own unique strengths and purposes, but the following benefits tend to be mutual all of them:\n\nWorking versions of software are delivered relatively quickly and frequently\n\nThe quality and integrity of a build is understood early in the process\n\nDependencies and delivery process bottlenecks are minimized\n\nProducts reflect the current state of demands as understood from signals indicated by customers, competitors, and the market as a whole\n\nInnovations can be introduced at any stage of the product lifecycle\n\nCollaborative input is sourced from all teams, rather than from top advisors/administrators/consultants who then issue orders to the bottom\n\nRisks are reduced compared to development cycles that don’t emphasize functional builds\n\nEmphasis is placed on customer satisfaction and team morale; if neither are happy, then it is understood that the products and processes aren’t meeting needs\n\nWork is made more manageable and predictable while introducing flexibilities that can accommodate disruptions or sudden shifts in strategy\n\nTop tools to use with Agile methods\n\nSome of the most-recommended tools for Agile methods include:"
    }
}