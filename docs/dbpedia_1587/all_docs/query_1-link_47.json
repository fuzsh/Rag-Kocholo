{
    "id": "dbpedia_1587_1",
    "rank": 47,
    "data": {
        "url": "https://www.techtarget.com/searchsoftwarequality/opinion/Agile-characteristics-for-internal-software-development-teams",
        "read_more_link": "",
        "language": "en",
        "title": "Agile characteristics for internal software development teams",
        "top_image": "https://cdn.ttgtmedia.com/visuals/searchServerVirtualization/strategies_use_cases/servervirtualization_article_027.jpg",
        "meta_img": "https://cdn.ttgtmedia.com/visuals/searchServerVirtualization/strategies_use_cases/servervirtualization_article_027.jpg",
        "images": [
            "https://www.techtarget.com/visuals/searchServerVirtualization/strategies_use_cases/servervirtualization_article_027_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/brown_jim.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/strategy_a101587012_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/visuals/ComputerWeekly/HeroImages/Iceland-Reykjavik-sunset-mandritoiu-adobe_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/brans_pat.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/container_g1128254725_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/GerieOwenheadshot.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/4.jpg",
            "https://cdn.ttgtmedia.com/visuals/WhatIs/Ben Lutkevich.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jim Brown",
            "Darcy DeClute",
            "Pat Brans",
            "Gerie Owen",
            "Ben Lutkevich"
        ],
        "publish_date": "2020-04-21T11:01:00+00:00",
        "summary": "",
        "meta_description": "It's possible for internal software development teams to flexibly adopt Agile. They can take advantage of core Agile characteristics and see measurable results. It all starts with identifying a pain point, then gradually working through the challenge.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Software Quality",
        "canonical_link": "https://www.techtarget.com/searchsoftwarequality/opinion/Agile-characteristics-for-internal-software-development-teams",
        "text": "How to adopt Agile flexibly\n\nAs a first step into Agile, an internal software development team should identify and fix the problem spots in their existing processes.\n\nFind out where things break down in the process -- even if those spots are not particularly related to how the team writes or tests code. To characterize the most problematic tasks, list each one and assign it a score. Start with the task that gets the worst score. Do some group brainstorming to come up with a corrective action plan. Avoid making that plan overly detailed -- it just might defeat the purpose.\n\nTry applying core Agile characteristics, such as less documentation or more focus on the user, to generate process improvement. For example, if an internal software development team struggles to gather realistic requirements for customizations on a product, write user stories to address that process problem, rather than a full-fledged business requirements document. Then, see whether the Agile approach eases or improves development and testing.\n\nAdditionally, overhaul testing so that the task takes less time and becomes less rote. A Waterfall team might create test plans by filling in a boilerplate template. The QA team finds this step problematic and time consuming. Replace it with a matrix of test conditions, and link those cases to a requirement embedded in one or more user stories.\n\nRemember that the main Agile characteristic for internal teams is iteration. Apply these process tweaks to a single enhancement request and make it the first iteration of the workflow redesign.\n\nDon't worry if the team stumbles a bit. The human capital investment isn't lost because the entire team gains practical exposure to Agile concepts.\n\nUnderstand Agile in context\n\nThe Agile Manifesto is a framework for redesigning existing processes and workflows with a suggestion for where to put some emphasis. The Agile Manifesto, written in 2001, built on previously established concepts. Reengineering the Corporation published in the 1990s, and just-in-time manufacturing with Kanban, a tool popularized in the 1940s, both influenced the methodology. Agile teams today use Kanban boards to organize software development and testing.\n\nIterate, and reiterate\n\nOnce each Agile-based enhancement deploys, gauge the success of this iteration with a retrospective/lessons learned gathering -- another characteristic of Agile. Discuss what did and did not go well, and then use this information as the foundation for the next iteration. Keep iterating on this problem area until the team is ready to take on the next one.\n\nA Scrum master or Agile coach can help work through the jargon associated with Agile characteristics -- standups, burndown charts, epics and stories -- but one is not really needed.\n\nFor developers serving internal customers and working with commercial software, a formal change to an Agile team structure is not necessary. Ensure that the team is manageable as it is. In many organizations, the team size is probably small already."
    }
}