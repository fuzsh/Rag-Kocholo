{
    "id": "dbpedia_1587_1",
    "rank": 51,
    "data": {
        "url": "https://www.smartsheet.com/ultimate-agile-dictionary",
        "read_more_link": "",
        "language": "en",
        "title": "The Ultimate Agile Dictionary",
        "top_image": "https://www.smartsheet.com/sites/default/files/content-center/all-about-ultimate-agile-dictionary.jpg",
        "meta_img": "https://www.smartsheet.com/sites/default/files/content-center/all-about-ultimate-agile-dictionary.jpg",
        "images": [
            "https://www.smartsheet.com/sites/default/files/smartsheet-logo-blue-new.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500-smartsheet-platform.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_automate-workflow.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_messaging.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_dashboard.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_proofing.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_administration.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_integrations_1.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_brandfolder.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_resource-management.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_control-center.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_conditional-formatting.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_bridge.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_workapps.svg",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-12/merchandising-quarterly-disclosures-small_0.png?itok=BDeYeVaF 384w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/solution-category-project-portfolio-management.png?itok=JAc-ozpf 500w, /sites/default/files/styles/900px/public/2023-08/solution-category-project-portfolio-management.png?itok=zIQVdmuS 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/solution-category-marketing-and-creative.png?itok=wJhsSWm8 500w, /sites/default/files/styles/900px/public/2023-08/solution-category-marketing-and-creative.png?itok=Kg-g7KBH 600w",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_project-management.svg",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_report-management.svg",
            "https://www.smartsheet.com/sites/default/files/2024-07/icon-blue-500-franchise.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_b2b.svg",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_pm-methodologies.svg",
            "https://www.smartsheet.com/sites/default/files/2023-09/icon_blue-500-creative-operations.svg",
            "https://www.smartsheet.com/sites/default/files/2023-11/icon-blue-500_mobilizer_0.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_government.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_construction.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_finance-accounting.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_education.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_non-profit.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_enterprise.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_retail_0.svg",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-08/merchandising-ai.png?itok=OprDSOVq 384w",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-08/merchandising-voice-of-the-customer.png?itok=ZFKQNw5z 384w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2024-06/ENGAGE_Seattle_2024_Header%20768x216.png?itok=4Puc5zrP 500w, /sites/default/files/styles/900px/public/2024-06/ENGAGE_Seattle_2024_Header%20768x216.png?itok=WFhlvNDQ 768w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/merchandising-pm-templates.png?itok=rK5EE_iq 500w, /sites/default/files/styles/900px/public/2023-08/merchandising-pm-templates.png?itok=Ps-D0sL2 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/dashboard-gallery.png?itok=0wt_QPh_ 500w, /sites/default/files/styles/900px/public/2023-08/dashboard-gallery.png?itok=hAkjxao8 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/smartsheet-api.png?itok=vx2kbiw6 500w, /sites/default/files/styles/900px/public/2023-08/smartsheet-api.png?itok=f31xFLUM 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2024-01/agile-project-management-101.png?itok=PjA1VPWh 500w, /sites/default/files/styles/900px/public/2024-01/agile-project-management-101.png?itok=V8fb4GAf 863w",
            "https://www.smartsheet.com/sites/default/files/2022-10/smartsheet-logo-horizontal.svg",
            "https://www.smartsheet.com/sites/default/files/styles/medium/public/2023-08/merchandising-ai-footer.png?itok=9E-N4jmA 220w, /sites/default/files/styles/large/public/2023-08/merchandising-ai-footer.png?itok=kxtSjMJz 480w",
            "https://www.smartsheet.com/sites/default/files/styles/medium/public/2024-06/ENGAGE_Seattle_2024_Footer%20480x135.png?itok=0_FVAvgS 220w, /sites/default/files/styles/large/public/2024-06/ENGAGE_Seattle_2024_Footer%20480x135.png?itok=576blAFp 480w",
            "https://www.smartsheet.com/sites/default/files/Download_on_the_App_Store_Badge_US-UK_135x40_0_0.svg",
            "https://www.smartsheet.com/sites/default/files/google-play-badge-English.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kate Eby"
        ],
        "publish_date": "2016-08-24T10:27:00",
        "summary": "",
        "meta_description": "The Ultimate Dictionary of Agile Terminology provides project managers with essential terminology needed to understand and manage Agile projects.",
        "meta_lang": "en",
        "meta_favicon": "/sites/default/files/favicons/apple-touch-icon.png",
        "meta_site_name": "Smartsheet",
        "canonical_link": "https://www.smartsheet.com/ultimate-agile-dictionary",
        "text": "A-D\n\nAgile Software Management\n\nDefinition: Agile Software Development refers to the project management approach of developing increments of software in frequent iterations based on evolving requirements.\n\nAlso Known As: Agile Software Development, Agile Methods, Agile project management\n\nEtymology: Agile is an umbrella term for a number of project methodologies, Scrum being the most widely used. The concept of Agile was born in 2001 when a team of independent software developers gathered at a ski lodge in Snowbird, Utah to discuss alternative approaches to the traditional, top-down management, waterfall method of completing software development. Originally referred to as lightweight software development methodologies, the developers adopted the term Agile to reflect its lithe, lean style of project management, characterized by frequent iterations. By the end of the weekend, the developers had produced the Agile Manifesto, which included four values and 12 principles for Agile software development.\n\nHow It’s Used: Self-organized, cross-functional development teams work in close collaboration with the customer and stakeholders to add value to every step of the process, targeting a goal of continuous improvement.\n\nAgile project management has evolved into a number of project styles, Scrum being the most widely used. Others include:\n\nKanban\n\nExtreme Programming (XP)\n\nCrystal\n\nDynamic Systems Development Method (DSDM)\n\nLean\n\nFeature-Driven Development (FDD)\n\nIt is possible to assign a fixed cost to Agile projects due to Agile’s focus on feature prioritization and timeboxed iterations. If the budget is depleted before all features are included, those features are included at a later time. In Agile, the team is always working highest-priority items within the sprint timebox, ensuring that the customer receives the right product to meet their requirements.\n\nProject Management Benefits:\n\nProvides flexibility in development evolution—small changes can be made easily.\n\nAllows for early and regular releases.\n\nReduces costs.\n\nReduces waste of resources.\n\nReduces risk—issues are discovered and resolved early.\n\nEncourages involvement of product owners, development team, and stakeholders.\n\nEncourages team ownership.\n\nEliminates the need for long specification documentation.\n\nIncreases customer satisfaction.\n\nIncreases team performance, communication, and motivation.\n\nAgile Project Management E-book\n\nHow can Agile PM help you do more with less?\n\nAgile project management empowers teams to adapt to change with increased speed and flexibility. Learn how to implement Agile PM and get the most out of the methodology.\n\nGet the free e-book\n\nAcceptance Criteria\n\nDefinition: The Acceptance Criteria specify a set of conditions that the software must meet in order to satisfy the customer. The product owner writes statements from the customer’s point of view that explain how a user story or feature should work. In order for the story or feature to be accepted it needs to pass the acceptance criteria; otherwise, it fails.\n\nHow it’s Used: Acceptance criteria should be written in clear, easy-to-understand language. For example, “If I am logged in, when I click the “Buy” button, the total item count for my cart should increase by one.”\n\nProject Management Benefits:\n\nConfirms when a user story is complete.\n\nHelps the team understand the story/feature.\n\nRemoves ambiguity from requirements.\n\nAcceptance Test\n\nDefinition: An Acceptance Test is derived from the Acceptance Criteria and verifies whether a feature is functional. The test has only two results: pass or fail. Many times, acceptance tests are automated so they can be performed on all versions of the software. Acceptance criteria usually include one or more acceptance tests.\n\nAlso Known As: functional test, customer test, story test\n\nHow it’s Used: Acceptance testing ensures that the software meets business and customer requirements. Acceptance tests are written by the product owner and should be brief statements that explain intended behavior and result. For example, “The user clicks on this button and the text turns red.” This test would result in either a pass or fail.\n\nProject Management Benefits:\n\nIncreases satisfaction of the customer by ensuring their requirements are met.\n\nIdentifies functionality and usability issues early on.\n\nPromotes collaboration between developers and the end-user.\n\nAgile Manifesto\n\nDefinition: The Agile Manifesto includes four values and 12 principles of an iterative software development process. In February 2001, 17 software developers met in Utah to discuss lightweight development methods. They published the Manifesto for Agile Software Development, which covered how they found “better ways of developing software by doing it and helping others do it.”\n\nHow it’s Used: Project managers refer to the Agile Manifesto when they are managing any process that aligns with its core concepts, such as Agile methodology.\n\nProject Management Benefits:\n\nFrequent testing and continuous delivery of valuable software.\n\nWelcomes changing requirements.\n\nPromotes cross-functional collaboration.\n\nApplication Lifecycle Management (ALM)\n\nDefinition: Application Lifecycle Management (ALM) is a continuous process of managing a software application from its initial planning to its retirement.\n\nHow it’s Used: ALM is used throughout the entire project and involves the use of a variety of tools to assist with requirements management, architecture, coding, testing, tracking, and release.\n\nProject Management Benefits:\n\nReduces risk by continuously monitoring project status.\n\nDecreases cycle time and development costs.\n\nMinimizes downtime.\n\nBacklog\n\nDefinition: A backlog is a changing list of product requirements based on the customer’s needs. The backlog is not a to-do list; rather, it is a list of all the desired features for the product. The Agile team uses the backlog to prioritize features and understand which features to implement first.\n\nHow It’s Used: The development team pulls work from the backlog to complete during each iteration. The backlog may change throughout the development process as the team learns more about the customer’s requirements.\n\nAlso Known As: product backlog\n\nProject Management Benefits:\n\nCommunicates feature priorities.\n\nAllows for longer term planning.\n\nEnsures the customer needs are being heard.\n\nBacklog Grooming\n\nDefinition: Backlog grooming occurs at the end of a sprint, when the team meets to make sure the backlog is ready for the next sprint. The team may remove user stories that aren’t relevant, create new stories, reassess priority, or split user stories into smaller tasks. Backlog grooming is both an ongoing process and the name for the meeting where this action occurs (a backlog grooming meeting).\n\nAlso Known As: Backlog refinement\n\nHow it’s Used: Once the team finishes a sprint, a backlog grooming meeting is scheduled. Backlog grooming is meant to ensure the backlog only contains items that are relevant and that meet objectives.\n\nProject Management Benefits:\n\nEnsures that all features are meeting project objectives.\n\nHelps the development team understand priorities and stay on track.\n\nFacilitates communication regarding which features are and aren’t important, and why.\n\nBig Visible Charts\n\nDefinition: Big visual charts are large charts displayed near the Agile team that show how the team is progressing. You could make a big visible chart to show defects, velocity (burndown chart), customer acceptance tests, or to find out how much time the team is wasting.\n\nAlso Known As: Information radiator\n\nHow it’s Used: Big visible charts are used to display project information in an informal way. Usually displayed on a wall, they share important information at a glance.\n\nProject Management Benefits:\n\nCommunicates project status to stakeholders.\n\nImproves transparency and communication.\n\nQuickly conveys easy-to-digest information.\n\nBurndown Chart\n\nDefinition: A burndown chart represents all outstanding work. The vertical axis represents the backlog, while the horizontal axis represents time. The work remaining can be represented by story points, ideal days, team days, or other metrics.\n\nAlso Known As: Release burndown chart, iteration burndown chart\n\nHow it’s Used: A burndown chart is used by Agile teams to track the total work remaining in a project and to predict when work will be finished.\n\nProject Management Benefits:\n\nWarns the team if things aren’t going according to plan.\n\nShows the impact of decisions.\n\nCommunicates progress and predicts when work will be complete.\n\nBurnup Chart\n\nDefinition: A burnup chart tracks how much work has been completed. There are two lines on the chart—one line represents total work and the other represents work completed. The vertical axis represents the amount of work and can be measured in number of tasks, hours, or story points. The horizontal axis represents time, usually measured in days.\n\nHow it’s Used: A burnup chart is used by Agile teams to check progress and manage scope or feature creep. This chart allows Agile teams to track when work has been added or removed from the project, and helps the team to determine a realistic completion date for the project.\n\nProject Management Benefits:\n\nEasily recognize and solve problems in your project.\n\nEstimates when the project will be complete.\n\nImproves communication and transparency.\n\nCadence\n\nDefinition: Cadence describes the flow or rhythm of events or tasks in a project. It establishes a pattern that the team can follow to understand what they are doing and when it will be completed.\n\nHow it’s Used: Agile teams strive to achieve a cadence during their project. For example, in Scrum, fixed-length iterations, called sprints, last one to two weeks and allow the team to ship software on a regular cadence. In Kanban, the cadence is the continuous flow of work.\n\nProject Management Benefits:\n\nEstablishes order and rhythm.\n\nImproves team efficiency.\n\nAllows the team to deliver software on a frequent basis.\n\nCapacity\n\nDefinition: Capacity represents the amount of work that can be completed within a certain time frame and is based on the number of hours that an individual or team will be available to complete the work.\n\nHow it’s Used: The product owner and Agile team determine the capacity or amount of workload, they can take on for an upcoming sprint. The capacity is decided during the sprint planning meeting.\n\nProject Management Benefits:\n\nImproves resource management.\n\nEstimates the completion of a project.\n\nChickens and Pigs\n\nDefinition: The terms “Chicken” and “Pig” come from “The Chicken and Pig Story” by Ken Schwaber, a software developer who helped formulate the initial version of Scrum. Most often used in Scrum, a “Chicken” refers to someone who is involved in the project, but is not accountable for any specific deliverable (such as a stakeholder or manager). On the other hand, a “Pig” is someone who is committed and directly accountable for deliverables.\n\n“The Chicken and Pig Story” by Ken Schwaber\n\nA pig and a chicken are walking down a road. The chicken looks at the pig and says, “Hey, why don’t we open a restaurant?” The pig looks back at the chicken and says, “Good idea, what do you want to call it?” The chicken thinks about it and says, “Why don’t we call it ‘Ham and Eggs?’” “I don’t think so,” says the pig, “I’d be committed, but you’d only be involved.”\n\nHow it’s Used: Chickens and Pigs are used to define participants and roles in Scrum. “Pig” roles are usually the actual team members, the Scrum Master, or the Project Owner. “Chicken” roles are managers or stakeholders.\n\nProject Management Benefits:\n\nClarifies and defines roles.\n\nSets projects expectations.\n\nPromotes accountabilities.\n\nContinuous Improvement\n\nDefinition: Continuous improvement is a process of improving quality and efficiency by making small, incremental changes over time. In Kanban, continuous improvement refers specifically to the process of optimizing workflow and reducing cycle time, resulting in increased productivity.\n\nAlso Known As: Kaizen\n\nHow It’s Used: Continuous improvement is used to introduce improvement into the work process on an incremental basis and involves the following steps: 1) Identify, 2) Plan, 3) Execute, and 4) Review.\n\nMore specifically for Kanban, there are no set due dates so the team focuses on work-in-progress. As team members collaborate to troubleshoot problems and brainstorm new ideas, the process becomes more efficient and streamlined, cycle times decrease, and workflow is optimized. Teams do not need to be cross-functional in Kanban.\n\nProject Management Benefits:\n\nImproves productivity and delivery.\n\nIncreases accuracy in forecasting future work and delivery.\n\nStreamlines work and reduces waste.\n\nIntroduces improvement on an incremental basis.\n\nIncreases a sense of pride and accomplishment in team members.\n\nContinuous Integration (CI)\n\nDefinition: Continuous integration is a software engineering practice that involves continual integration of new development code into the existing codebase.\n\nAlso Known As: Continuous delivery, continuous deployment\n\nHow it’s Used: Once a feature is completed, developers test it for defects and then integrate it into the existing codebase. This ensures that the code repository always contains the latest working software build. In practice, this process is largely automated through the use of version control tools, team policies and conventions, and specific CI tools.\n\nProject Management Benefits:\n\nEnables rapid feedback, so that defects can be identified and corrected quickly.\n\nMinimizes time and effort needed to perform each integration.\n\nProvides an automated build and release process.\n\nAllows software to be deliverable at any moment.\n\nCycle\n\nDefinition: A cycle refers to the total amount of time it takes for a single task or work item to travel through the workflow from the beginning of work until it ships.\n\nHow It’s Used: Kanban methodology uses cycle time as its key metric, rather than velocity, as with Scrum. As Kanban teams become become more efficient in optimizing workflow and producing deliverables, cycle times decrease and productivity increases. Cycles have no set time limits; rather, workflow is based on continuous delivery. Kanban teams with shared skills experience smaller cycle times. Teams should strive for both shorter and more consistent cycle times. Cycle times can also be applied in Scrum.\n\nProject Management Benefits:\n\nLeads to continuous improvement.\n\nIncreases ability to forecast future deliveries (with consistent cycle times).\n\nIncreases productivity (with shorter cycle times).\n\nDaily Scrum\n\nDefinition: The Daily Scrum is a brief communication and status-check session facilitated by the Scrum Master where Scrum teams share progress, report impediments, and make commitments for the current iteration or sprint. The Daily Scrum consists of a tightly focused conversation kept to a strict timeframe; the meeting is held at the same time, every day (ideally, in the morning), and in the same location. The Scrum task board serves as the focal point of the meeting.\n\nAlso Known As: Daily standup, daily meeting, daily huddle\n\nHow it’s Used: The Scrum Master typically asks team members the following three questions:\n\nWhat did I accomplish yesterday?\n\nWhat will I commit to, or complete, today?\n\nWhat impediments or obstacles are preventing me from meeting my commitments?\n\nAll discussion during the Daily Scrum should be focused on answering these three questions. Any additional discussions stemming from these questions should be addressed separately. Only those who are involved in the current sprint should be present at the Daily Scrum.\n\nProject Management Benefits:\n\nKeeps workflow on track.\n\nHelps identify issues sooner than later.\n\nIncreases team accountability, communication, and collaboration.\n\nAllows the team to see the ‘bigger picture’ of the sprint.\n\nStimulates team self-organization and personal planning.\n\nHelps team members address issues and make small course corrections, if needed.\n\nProvides face-to-face interaction (if on site).\n\nDaily Standup\n\nDefinition: The Daily Standup meeting is a key component of Agile methodologies and serves as a daily forum for Agile teams to share progress, report impediments, and make commitments for the current iteration or sprint. This brief, 15-minute meeting is usually held every morning at the same time and in the same location. The meeting should be brief enough for participants to stand for its entirety—standing promotes brevity and ensures that the meeting doesn’t extend past the timeframe allotted.\n\nAlso Known As: Daily Scrum, standup meeting, daily meeting, daily huddle\n\nHow it’s Used: Daily standups are typically held around the team’s physical Scrum or Kanban task board (for on-site teams). Teams answer three questions about their work status along these lines:\n\nWhat did I accomplish yesterday?\n\nWhat will I commit to, or complete, today?\n\nWhat impediments or obstacles are preventing me from meeting my commitments?\n\nAll discussion during the daily standup should be focused on answering these three questions. Any additional discussions stemming from these questions should be handled outside of the daily standup.\n\nProject Management Benefits:\n\nKeeps workflow on track.\n\nKeeps the meeting short (due to standing).\n\nHelps identify issues sooner than later.\n\nIncreases team accountability, communication, and collaboration.\n\nStimulates team self-organization and personal planning.\n\nHelps team members address issues and make small course corrections, if needed.\n\nProvides face-to-face interaction (if on site).\n\nDefinition of Done\n\nDefinition: Definition of Done refers to a set of predetermined criteria that a product needs to meet in order to be considered as being done. The team reaches a consensus as to what defines a task as being done and then posts a checklist of steps that must be completed before the product can be considered as potentially shippable. The team displays this list in the form of a Big Visual Chart prominently in the team area.\n\nAlso Known As: single done, done, done-done-done, done list, done checklist, product sashimi, task complete definition, punch list\n\nHow it’s Used: The team agrees upon a list of criteria which must be met before a product increment is considered to be ‘done’—that is, all design, coding, testing, and documentation have been completed, and the code has been fully integrated into the system. If a task does not meet the Definition of Done criteria, it does not count toward team velocity.\n\nProject Management Benefits:\n\nImproves likelihood of delivering working software.\n\nLimits the cost of rework once a feature has been accepted as ‘done’.\n\nReduces the risk of misunderstanding and conflict between the development team, and customer or product owner.\n\nQ-S\n\nRefactoring\n\nDefinition: Refactoring code means to improve, clarify, and streamline the internal structure of existing code without affecting its external behavior. Refactoring does not include rewriting code or fixing bugs. The noun “refactoring” refers to specific, finite methods for refactoring code, such as using Extract Method to clarify the purpose of a piece of code.\n\nHow it’s Used: Refactoring is used in Agile to maintain code clarity and extensibility between sprint iterations.\n\nProject Management Benefits:\n\nKeeps code clean and easy to read.\n\nPrevents code duplication.\n\nMakes bugs easier identify and fix.\n\nMakes code easier to maintain and extend.\n\nRelative Estimation\n\nDefinition: Relative estimation is one of several types of estimations Agile teams use to determine the amount of effort needed to complete project tasks. Tasks or user stories are compared against equivalent, previously completed tasks or group of tasks of similar difficulty.\n\nAlso Known As: Silent grouping, affinity testing\n\nHow it’s Used: Agile teams use relative estimation to assess time and effort needed to complete a task or user story based on how long a similar task took to complete. Teams often use a non-numerical scale to compare tasks, such as tee-shirt sizing, where task effort is assessed as extra-small, small, medium, large, or extra-large.\n\nProject Management Benefits:\n\nProvides accurate estimates for release dates and future forecasting.\n\nEliminates time wasted on precision estimations.\n\nEliminates confusion between estimates and commitments.\n\nLeads to increased customer satisfaction.\n\nRelease\n\nDefinition: An Agile release refers to the final delivery of a software package after the completion of multiple iterations or sprints. A release can be either the initial build of an application or the addition of one or more features to an existing application. A release should take less than a year to complete, and in some cases, may only take three months.\n\nHow it’s Used: Agile teams use the amount of time planned for a software release divided by iteration velocity to determine the number of iterations needed to develop the software needed for the release.\n\nProject Management Benefits:\n\nProvides a tangible goal.\n\nClarifies the customer’s requirements and vision.\n\nAllows for preliminary release of alpha or beta versions after the completion of several iterations.\n\nRelease Plan\n\nDefinition: A Release Plan outlines the features to be included in an upcoming release and provides an estimated date for the release. The plan should include responsibilities, resources, and activities required to complete the release.\n\nHow it’s Used: The release plan is broken down into individual sprints needed to complete the release and what each sprint will accomplish. The release date is estimated based on the number of sprints to be included multiplied by the team’s sprint velocity.\n\nProject Management Benefits:\n\nProvides an accurate estimation of total time and resources needed to complete the release.\n\nProvides teams with a common understanding and vision of what needs to be accomplished.\n\nGuides product owners in prioritizing stories and tasks.\n\nGuides team members in making decisions.\n\nHelps teams avoid going off on a tangent with unplanned work.\n\nScrum\n\nDefinition: Scrum is the most widely used framework under the Agile umbrella. Scrum is an iterative software model that follows a set of predefined roles, responsibilities, and meetings.\n\nIn Scrum, iterations are called sprints and are assigned a fixed length—sprints typically last one to two weeks, but can last as long a month.\n\nHow it’s Used: Scrum methodology designates three specific roles for each Scrum project: the Product Owner, Scrum Master, and Scrum Team. A Scrum project is characterized by product backlog, sprint planning, backlog refinement, daily Scrum meetings, sprint review meeting, and sprint retrospective meeting.\n\nThe completion of a Scrum sprint produces an increment of functional and potentially shippable software. Using Scrum, increments of software can be delivered to the customer periodically, rather than waiting for the final software release.\n\nProject Management Benefits:\n\nIncreases team accountability.\n\nEasily accommodates changes during the project.\n\nDecreases costs by identifying issues as soon as they arise.\n\nScrum Team\n\nDefinition: A Scrum team typically comprises five to nine members with cross-functional skills. Unlike traditional teams of developers, there are no specific roles. A Scrum team is self-organized and self-contained—the team should have the right amount of members with the appropriate skills needed to complete the sprint.\n\nHow it’s Used: A Scrum team works together toward completing sprints and producing a functional and potentially shippable increment of software. At the end of the sprint, the team holds a sprint review with the product owner and stakeholders to demonstrate what the sprint has accomplished, review issues, and obtain feedback. A separate sprint retrospective meeting allows team members to discuss feedback and improvements needed for the next sprint.\n\nProject Management Benefits:\n\nIncreases a sense of trust and accountability among team members.\n\nLeads to continuous improvement through feedback and brainstorming.\n\nFosters leadership on the part of all team members, not just a selected few.\n\nScrum Master\n\nDefinition: The Scrum Master is often viewed as the coach for the team. He or she organizes meetings, resolves roadblocks and issues, and works with the product owner to make sure the product backlog is up to date. The Scrum Master does not have any authority over team members, however, he or she does have authority over the process. A Scrum Master may complete formal training to become a certified Scrum Master but this is not required.\n\nHow it’s Used: The Scrum Master facilitates the Daily Scrum meetings, determines the sprint durations for the project, and tracks workflow progress. He or she works with the product owner to make sure product backlog is current and removes any impediments to workflow. The Scrum Master ensures that team members aren’t overloaded and are able to perform to their full potential.\n\nProject Management Benefits:\n\nEnsures team members are following the most efficient Scrum process.\n\nGuards against team complacency.\n\nGuides team toward continuous improvement.\n\nKeeps team members involved both with the project and the Scrum process.\n\nScrum of Scrums\n\nDefinition: A Scrum of Scrums meeting is a scaling mechanism used to manage large projects involving Scrum multiple teams. A Scrum of Scrums is held to facilitate communication between teams that may have dependencies on one another. One member from each team attends the Scrum of Scrums to speak for the team—this could be the Scrum Master but may be any team member who can effectively relay information and handle questions or concerns for the team.\n\nHow it’s Used: If a Scrum team is working on a large project that involve dependencies, risks, or issues that could impact another team team’s sprint, a Scrum of Scrums is scheduled as a communication forum for discussing or resolving these issues.\n\nProject Management Benefits:\n\nFacilitates communication and promotes collaboration between teams.\n\nAllows multiple teams to see the ‘bigger picture’ of the project and how one team’s sprint is impacting another.\n\nReduces risk of one team’s work adversely impacting another’s.\n\nHelps teams address issues and make small course corrections, if needed.\n\nOptimizes project workflow.\n\nScrumban\n\nDefinition: Scrumban is a hybrid of Scrum and Kanban used to accomplish tasks and produce deliverables.\n\nHow It’s Used: Scrumban is used when a Scrum team wants to apply some Kanban methodology into their process by focusing in on work-in-progress and continuous improvement. Or, a Kanban team may want to apply some Scrum structure into their process, such as daily standups or roles.\n\nProject Management Benefits:\n\nCombines best practices of both methods to enhance the team’s process.\n\nProvides teams with flexibility to adapt their process in the way that is best for them.\n\nBalances team capacity vs. demand.\n\nEnhances visualization for a Scrum team.\n\nSteers teams toward a long-term evolution of continuous improvement.\n\nSpike\n\nDefinition: A Spike refers to a separate timeboxed user story or task that is created in order to research a question or resolve a problem. A spike focuses on gathering information and providing an answer to a question, rather than producing a shippable product.\n\nHow it’s Used: A Spike is created when a user story or task cannot be accurately estimated until the Agile team can conduct further research or investigation. The spike produces a specific output—an estimate for the original user story—so that the sprint can move forward.\n\nProject Management Benefits:\n\nIncreases the accuracy and reliability of user story estimates.\n\nIncreases team understanding of a user story or PBI requirement.\n\nReduces risk of wasted or ‘stray’ work.\n\nSprint\n\nDefinition: A sprint is a fixed-length iteration during which one user story or product backlog item (PBI) is transformed into a potentially shippable deliverable. Each sprint is assigned a set amount of time to be accomplished (sometimes referred to as Timeboxing), which could be anywhere from one week to one month, but typically lasts two weeks.\n\nHow it’s Used: Each sprint begins with a planning meeting between the product owner and Scrum team to decide what amount of work can be realistically accomplished while still meeting the Product Owner’s or customer’s requirements. The Scrum Master determines the sprint length; sprint lengths should be consistent for the entire project.\n\nAt the end of the sprint, the team demonstrates the resulting product or piece of software to the product owner. He or she provides feedback to the team and either accepts or rejects the product, based on the acceptance criteria established in the sprint planning meeting. Once all the sprints for a project are completed, the team should be ready to release a final software package.\n\nProject Management Benefits:\n\nKeeps teams from feeling overwhelmed.\n\nPromotes predictability and reliability for customer deliverables.\n\nShortens feedback loops.\n\nKeeps work from getting too far into development before problems are found.\n\nSprint Backlog\n\nDefinition: A sprint backlog is a segment of Product Backlog Items (PBIs) that the team selects to complete during a Scrum sprint. These PBIs are typically user stories taken from the product backlog.\n\nHow It’s Used: During the sprint planning meeting, the team decides which PBIs or user stories to include in the next sprint, based on the estimated work effort and team capacity needed to complete each one. The team breaks the PBI’s or user stories down into tasks and assigns an estimate in work hours for completing each task.\n\nAlso Known As: iteration backlog\n\nProject Management Benefits:\n\nEnsures that the highest-priority PBIs are completed first.\n\nAllows for longer term planning.\n\nBreaks down work into manageable components.\n\nAllows the team to determine the amount of PBIs they can accomplish during the sprint.\n\nSprint Planning Meeting\n\nDefinition: The Sprint Planning Meeting is a working session held before the start of each sprint to reach a mutual consensus between the product owner’s acceptance criteria and the amount of work the development team can realistically accomplish by the end of the sprint. The length of the sprint determines the length of the planning meeting, with two hours being equivalent to one week of the sprint. Using this formula, the planning meeting for a two-week sprint would last about four hours, although this can vary.\n\nHow it’s Used: The Sprint Planning Meeting sets the stage for the sprint. The Scrum Master facilitates the meeting while the product owner presents and prioritizes the Product Backlog Items (PBIs) or user stories to be completed by the end of the sprint. The team then breaks down the PBIs or user stories into manageable tasks. Ultimately, the team determines the amount of work they can accomplish during the sprint.\n\nProject Management Benefits:\n\nEstablishes a clear goal for the team.\n\nResults in team commitment to completing the number of PBIs and tasks agreed to during the planning meeting.\n\nPrevents team overload during the sprint.\n\nSprint Plan\n\nDefinition: The Sprint plan is the tangible outcome of a Sprint Planning Meeting. The Sprint plan is a written document assembled by the development team and includes 1) the goal for the sprint—a brief description of the product or deliverable to be completed by the end of the sprint, and 2) a detailed list of the Product Backlog Items (PBIs) or user stories the team has committed to completing by the end of the sprint, based on the team’s availability and velocity. Each PBI or user story is broken down into tasks according to the priority set by the product owner and assigned to a team member.\n\nHow it’s Used: The Sprint plan is a roadmap for team members to refer to and follow during the sprint. This plan provides the product owner and Scrum team with a written agreement as to what the team has committed to accomplishing during the sprint.\n\nProject Management Benefits:\n\nEstablishes a clear goal for the sprint.\n\nKeeps development on track.\n\nPrevents the product owner or other parties from giving the team additional work.\n\nDiscourages team members from deviating from completing agreed-upon tasks.\n\nProvides a tangible document for review after the sprint is completed to determine whether workload and sprint times were realistic.\n\nSprint Retrospective\n\nDefinition: A Scrum Retrospective is a meeting held following the completion of a sprint to discuss whether the sprint was successful and to identify improvements to be incorporated into the next sprint.\n\nHow it’s Used: The Scrum team holds a retrospective meeting to briefly analyze the sprint, and identify one or two priority items for the team to address during the next sprint. The intent of the retrospective is not to conduct an extensive post-mortem but rather, to focus on specific steps the team can take moving forward toward a goal of continuous improvement. Retrospectives are typically broken down into three parts: data gathering, data analysis, and action items.\n\nProject Management Benefits:\n\nTeams learn from mistakes and collaborate together to arrive at solutions.\n\nImprovements are immediately incorporated into the Agile process.\n\nEnergizes team to brainstorm solutions to issues.\n\nReleases frustration and stress.\n\nProcess of continuous improvement leads to better value for customer.\n\nEmpowers team.\n\nSprint Review\n\nDefinition: The Scrum team holds a Sprint Review meeting immediately following the completion of a sprint to review and demonstrate what the team has accomplished during the sprint. This meeting is attended by the product owner or customer, Scrum Master, Scrum team, and stakeholders. The Sprint Review is an informal meeting (no Powerpoint slides allowed). The length of the sprint determines the length of the review meeting, with one hour being equivalent to one week of the sprint. Using this formula, the review meeting for a two-week sprint would last two hours, although this can vary.\n\nHow it’s Used: The purpose of the Sprint Review is to assess what happened during the sprint and to determine whether the sprint produced a functional, and potentially shippable, deliverable. The team presents or demonstrates the deliverable developed during the sprint. The product owner provides feedback to the team and decides if the deliverable meets the acceptance criteria, and either accepts or rejects the product.\n\nProject Management Benefits:\n\nDetermines whether the goal of the sprint was met.\n\nDemonstrates visual result of sprint.\n\nProvides immediate opportunity for feedback from the product owner, customer, and other stakeholders.\n\nReveals areas where improvement is needed.\n\nStakeholder\n\nDefinition: A stakeholder loosely refers to anyone outside the Scrum team who has an interest in the product that the team is producing. Stakeholders can include but are not limited to direct managers, subject matter experts, account managers, salespeople, and legal officers.\n\nHow it’s Used: While Stakeholders do not hold an official role in Agile, the customer is considered to be the most important. The overriding Agile goal is to add value to each product or deliverable produced by the iteration or sprint. Product acceptance depends on whether the Product Owner, acting on behalf of the customer, is satisfied that the customer’s acceptance criteria has been met. Other Stakeholders may have varying roles.\n\nProject Management Benefits:\n\nEnsures that customer’s needs and vision are accurately met.\n\nIncreases customer’s trust in team’s ability to deliver a high-quality product.\n\nAlerts account managers of budget required for iterations.\n\nInforms salespeople of products in the pipeline.\n\nEncourages stakeholders to be engaged with the process.\n\nStandup/daily meeting\n\nDefinition: Agile teams hold a 15-minute standup meeting each morning in the same location to communicate their current work status during an iteration or sprint. The idea of a standup is that it should be relevant, yet brief enough that team members don’t become uncomfortable with standing.\n\nAlso Known As: Daily Scrum, daily standup, daily huddle\n\nHow it’s Used: During a standup, Agile team members gather around the team’s physical task board to share progress, report impediments, and make commitments for the current iteration or sprint. Teams typically answer three questions about their work status:\n\nWhat did I accomplish yesterday?\n\nWhat will I commit to, or complete, today?\n\nWhat impediments or obstacles are preventing me from meeting my commitments?\n\nAll discussion during the standup should be focused on answering these three questions. Other questions that arise are addressed outside of the standup.\n\nProject Management Benefits:\n\nKeeps workflow on track.\n\nKeeps the meeting short (due to standing).\n\nHelps identify issues sooner than later.\n\nIncreases team accountability, communication, and collaboration.\n\nStimulates team self-organization and personal planning.\n\nHelps team members address issues and make small course corrections, if needed.\n\nProvides face-to-face interaction (if on site).\n\nStory\n\nDefinition: A story, or user story, is a brief, non-technical statement of a software system requirement written from the end-user’s point of view. A story is written according to the following structure: as a <type of user>, I want to <perform some task> so I can <achieve some goal.>\n\nHow it’s Used: The product owner prioritizes the stories to be included in each sprint during the sprint planning meeting. The team assigns story points to each story to estimate workload effort, and then breaks the stories down into tasks to be completed during the sprint. When the iteration or sprint is completed, the team should have produced a functional product or deliverable that corresponds to the initial requirement specified in the story.\n\nProject Management Benefits:\n\nIncreases productivity.\n\nProvides teams with a clear understanding of software requirements and acceptance criteria.\n\nProvides flexibility for the product owner or customer to make small changes before the story is implemented.\n\nPromotes continuous improvement.\n\nIncreases product value and quality.\n\nReduces risk of defects.\n\nStory Points\n\nDefinition: Story points are a non-unit measure used to determine the complexity of a user story. Story points are relative, not absolute, and do not relate to actual hours—they can be anything from tee-shirt sizes to the Fibonacci Sequence.\n\nHow it’s Used: Story points are used to determine workload effort for a user story. Planning Poker is one example of how teams may use and assign story points to arrive at a workload estimate.\n\nProject Management Benefits:\n\nProvides a common measure of workload for cross-functional team members who work at different speeds.\n\nPrevents teams from spending too much time attempting to make precise estimates.\n\nStory Mapping\n\nDefinition: Story mapping refers to a top-down visualization, or roadmap, of product backlog. The story map starts with a goal or specific functionality, which is then broken down into user stories. A story map is created in tree format either physically, using post-its on a wall, or digitally.\n\nHow it’s Used: Story mapping provides the team and stakeholders with a visual representation of product backlog and prioritized user stories that need to be completed.\n\nProject Management Benefits:\n\nProvides visual, holistic representation of backlog.\n\nIncreases understanding of goals or functionality requirements.\n\nReveals holes in product backlog.\n\nIncreases value to customers.\n\nSwarming\n\nDefinition: Swarming is when team members with appropriate skills work together to complete a task that a team member is having trouble completing on his or her own.\n\nHow It’s Used: Swarming is used to quickly bring a task or work item to completion before moving on to the next in order to keep workflow and delivery on track. Kanban teams in particular use swarming to ensure continuous workflow and maintain Work-in-Progress (WIP) limits.\n\nProject Management Benefits:\n\nKeeps workflow and delivery on track.\n\nMaintains WIP limits in Kanban.\n\nEncourages team collaboration.\n\nSustainable Pace\n\nDefinition: The Sustainable Pace is the pace that an Agile team can work at indefinitely without resulting in developer burnout (ideally 40 hours per week).\n\nHow it’s Used: Sustainable Pace is established to ensure that an Agile team is performing optimally without the need for overtime, evening, or weekend work. Working at a sustainable pace helps expose and remedy scheduling, management, or quality deficiencies that otherwise might be hidden by overtime work.\n\nProject Management Benefits:\n\nPromotes work-life balance.\n\nPromotes optimal performance.\n\nKeeps team members refreshed.\n\nIncreases productivity."
    }
}