{
    "id": "dbpedia_5041_2",
    "rank": 91,
    "data": {
        "url": "https://refine.dev/blog/css-vertical-align/",
        "read_more_link": "",
        "language": "en",
        "title": "10 Methods for Vertical Alignment Using CSS",
        "top_image": "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/social.png",
        "meta_img": "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/social.png",
        "images": [
            "https://refine.ams3.cdn.digitaloceanspaces.com/website/static/banners/app-crm.png",
            "https://refine-web.imgix.net/blog/2024-02-13-css-vertical-align/social.png?w=1788",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/1.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/2.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/3.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/4.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/5.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/6.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/7.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/8.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/2.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/9.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/10.png",
            "https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-13-css-vertical-align/11.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "react-admin",
            "react-framework",
            "internal-tool",
            "admin-panel",
            "ant-design",
            "material ui",
            "mui"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-02-13T00:00:00+00:00",
        "summary": "",
        "meta_description": "We'll look at different techniques to vertically align HTML content using CSS.",
        "meta_lang": "en",
        "meta_favicon": "/img/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://refine.dev/blog/css-vertical-align/",
        "text": "Vertically aligning HTML contents in CSS has always been a herculean task and has been described by many web developers as tricky to implement. However, modern CSS has made available a number of ways to vertically align HTML contents easily. Content alignment has never been easier at this time, and in this article, we'll look at different techniques to vertically align HTML content using CSS.\n\nSteps we'll cover include:\n\nVertical alignment using margins\n\nVertical alignment with Flexbox\n\nVertical alignment using CSS Grid.\n\nVertical alignment using table display (display: table)\n\nVertical alignment using absolute positioning (position: absolute)\n\nVertical alignment using css transforms\n\nVertical alignment using line-height\n\nVertical alignment using inline display (display: inline) and vertical-align: middle\n\nVertical alignment using inline-block display (display: inline-block) and vertical-align: middle\n\nVertical Alignment using “before” pseudo-element and vertical-align: middle\n\nMargins in CSS are used to generate space around the borders of contents. Here are examples on how to easily vertically align contents with margins.\n\nUsing the CSS property margin:auto, You can vertically and horizontally align HTML contents to the center. However, this is possible only when the following conditions are met:\n\nThe parent element should have a given height.\n\nThe child element should have a specified height.\n\nThe parent element should have either a display of flex or grid.\n\nA sample of this can be displayed below:\n\nHTML CODE:\n\nCSS CODE:\n\nFlexbox is a CSS3 layout module that aims to simplify the process of designing flexible, responsive layout structures without the need for positioning or float. Unlike some other CSS frameworks, it is orientation agnostic and lets you automatically align and resize containers based on the height and width of the screen.\n\nHere are examples on how to effortlessly vertically align contents with flexbox.\n\nWith the CSS properties display: flex, align-items: center and justify-content: space-around, we can vertically and horizontally align HTML contents.\n\nHTML CODE:\n\nCSS CODE:\n\nWith the CSS properties display: flex, align-items: center and justify-content: center, we can also vertically align HTML contents. We will update the first example CSS code to show this:\n\nCSS CODE:\n\nThe CSS Grid Layout Module provides a two dimension grid-based layout system with rows and columns, allowing you to design web pages with ease.\n\nHere are examples on how to effortlessly vertically contents with flexbox.\n\nWith the CSS properties display: grid, align-items: center and justify-content: center, we can also vertically align HTML contents.\n\nHTML CODE:\n\nCSS CODE:\n\nWith the CSS properties display: grid, place-items: center (which is a combination of align-items: center and justify-content: center), we can also vertically align HTML contents.\n\nWe will update the CSS code of the first example to show this:\n\nCSS CODE:\n\nWith the CSS properties display: grid, align-self: center, we can also vertically align HTML contents.\n\nWe will update the CSS code of the first example to show this:\n\nCSS CODE:\n\nTables are a common and useful tool for displaying data on websites and web applications. It was the common method of presenting information in rows and columns before to the introduction of modules like flex and grid.\n\nHere are examples on how to vertically align contents with tables.\n\nUsing the CSS property display: table, display: table-cell, vertical-align: middle, You can vertically align contents to the center. However, this is possible only when the following conditions are met:\n\nThe parent element must have the display: table property.\n\nWhen the parent element must have a given height.\n\nThe child element must have the display: table-cell property.\n\nThe child element must have the vertical-align: middle property.\n\nA sample of this can be displayed below:\n\nHTML CODE:\n\nCSS CODE:\n\nThe position CSS property specify how an element is positioned in a document. Positioned elements' final positioning is determined by their top, right, bottom, and left properties.\n\nWe could use these positioning properties to vertically align contents.\n\nUsing the CSS properties position: relative and position; absolute and margin; auto, You can vertically align contents to the center. However, this is possible only when the following conditions are met:\n\nThe parent element must have the position: relative property. This is to ensure that the positioning of the element occurs solely within the parent container and does not extend outside it.\n\nThe parent element should have a specified height.\n\nThe child element must have the position: absolute property\n\nThe child element should have the positioned properties: top: 0; bottom: 0; left: 0; right: 0;\n\nThe child element should have a specified height as well.\n\nHTML CODE:\n\nCSS CODE:\n\nThe translate() CSS property repositions an element in both horizontal and vertical directions.\n\nWe will give examples on how to use the translate property.\n\nUsing the CSS properties position: relative and position; absolute and transform: translate(-50%, -50%), You can vertically and horizontally align contents to the center. This has been a popular way to vertically align contents. However this is possible only when the following conditions are met:\n\nThe parent element must have the position: relative property.\n\nThe parent element should have a specified height.\n\nThe child element must have the position: absolute property.\n\nThe child element should have the positioned properties: top: 50%; left: 50%;.\n\nThe child element should have the translate property: transform: translate(-50%, -50%);. This property repositions the child element to fit into the center of the parent element.\n\nHTML CODE:\n\nCSS CODE:\n\nWe can vertically align items only using the CSS properties position: relative and position; absolute and transform: translateY(-50%),\n\nWe will update the CSS code of the first example to show this:\n\nCSS CODE:\n\nThe line-height CSS property specifies the height of a line box. It's widely used to specify the spacing between lines of text. On block-level elements, it sets the minimum height of line boxes within them. On non-replaced inline items, it defines the height used to compute the line box height.\n\nWe will give examples on how to use the line-height property to vertically align contents.\n\nUsing the CSS properties line-height: [lineheight value] and height: [height value], You can vertically align HTML contents to the center. However this is possible only when the following conditions are met:\n\nThe parent element should have a specified height.\n\nThe child element must have the line-height property.\n\nThe height of the parent element must be equal to the line-height of the child element.\n\nHTML CODE:\n\nCSS CODE:\n\nThe CSS's vertical-align attribute specifies how elements on a line are aligned. This property works to aligning inline elements only (and not block elements).\n\nIn this example, with the inline display and the vertical-align property, You can vertically align contents to the center. However this is possible only when the following conditions are met:\n\nThe parent element should have a specified line-height. We do this to increase the line box so that the vertical-align property uses to align the contents in the middle of that line-box.\n\nThe child element must have the vertical-align property.\n\nHTML CODE:\n\nCSS CODE:\n\nIn this example, with the inline-block display and the vertical-align property, You can vertically align contents to the center.\n\nHTML CODE:\n\nCSS CODE:\n\nThis type of alignment is usually called the ghost element alignment. This alignment employs using the inline-block display property on a ghost (pseudo) element of the parent element, inherits the parent's element full height, then sets the vertical-align: middle property for both thepseudo-element of the parent element and the child element.\n\nHTML CODE:\n\nCSS CODE:\n\nIn this article, we examined some CSS techniques for vertical alignment of contents. Using these techniques will make it easy to align contents vertically on your webpages or web applications."
    }
}