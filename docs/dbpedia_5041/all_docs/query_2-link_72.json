{
    "id": "dbpedia_5041_2",
    "rank": 72,
    "data": {
        "url": "https://www.digitalocean.com/community/tutorials/css-align-justify",
        "read_more_link": "",
        "language": "en",
        "title": "How To Use CSS Grid Properties to Justify and Align Content and Items",
        "top_image": "https://www.digitalocean.com/_next/static/media/intro-to-cloud.d49bc5f7.jpeg",
        "meta_img": "https://www.digitalocean.com/_next/static/media/intro-to-cloud.d49bc5f7.jpeg",
        "images": [
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=48 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=96 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fintro-to-cloud.d49bc5f7.jpeg&width=828 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fintro-to-cloud.d49bc5f7.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=64 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=128 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fcreativecommons.c0a877f1.png&width=128 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fcreativecommons.c0a877f1.png&width=256 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FnewsLetter.c1eb26e3.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FnewsLetter.c1eb26e3.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FhollieHub4Good.90285377.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FhollieHub4Good.90285377.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fwrite4DO.6a167f0c.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fwrite4DO.6a167f0c.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fconsole-static.1b14cc64.svg&width=640 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fconsole-static.1b14cc64.svg&width=1080 2x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn how to align and justify your grid items using the CSS grid layout.",
        "meta_lang": "en",
        "meta_favicon": "/_next/static/media/apple-touch-icon.d7edaa01.png",
        "meta_site_name": "",
        "canonical_link": "https://www.digitalocean.com/community/tutorials/css-align-justify",
        "text": "Introduction\n\nWith CSS grid layout, the grid itself within its container as well as grid items can be positioned with the following 6 properties: justify-items, align-items, justify-content, align-content, justify-self, and align-self. These properties are part of the CSS box alignment module and they define a standard way to position elements with either flexbox or CSS grid.\n\nMost of the alignment properties are applied on the grid container, but some are for grid items, for when you want to specify values that apply only for specific grid items.\n\nIn this article, you will explore each of the CSS grid properties.\n\nPrerequisites\n\nIf you would like to follow along with this article, you will need:\n\nAn understanding of CSS property and values.\n\nA code editor.\n\nA modern web browser that supports CSS grid.\n\nStep 1 â Using Properties on the Grid Container\n\nConsider the markup for a container <div> element with six nested <div> elements:\n\n<div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> <div class=\"item\">5</div> <div class=\"item\">6</div> </div>\n\nWith the following CSS rules:\n\n.container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: auto; box-sizing: border-box; width: 400px; height: 200px; margin-left: auto; margin-right: auto; background: rgba(114, 186, 94, 0.05); border: 2px dashed rgba(114, 186, 94, 0.35); } .item { box-sizing: border-box; width: 50px; height: 50px; background: rgba(255, 213, 70, 0.4); border: 2px dashed rgba(236, 198, 48, 0.5); }\n\nThis code will produce a grid layout with three columns that are 100px wide. Each grid item will have a width of 50px and a height of 50px:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nAt this point, the justification and alignment have not been set. By default, the grid items will start at the top-left of the container.\n\njustify-items\n\njustify-items is used to justify the grid items along the row axis. The possible values are start, end, center, and stretch.\n\nHere is an example of center:\n\n.container { justify-items: center; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid items are aligned horizontally to the middle of the columns.\n\nHere is an example of end:\n\n.container { justify-items: end; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid items are aligned horizontally to the far edge of the column.\n\nalign-items\n\nalign-items is used to align the grid items along the column axis.\n\nHere is an example of center:\n\n.container { align-items: center; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid items are aligned vertically to the middle of the columns.\n\nHere is an example of end:\n\n.container { align-items: end; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid items are aligned vertically to the bottom of the columns.\n\njustify-content\n\nWhen the entire grid is smaller than the space for the grid container, use justify-content to justify the grid along the row axis. You can use the following values: start, end, center, stretch, space-around, space-between, or space-evenly.\n\nHere is an example of end:\n\n.container { justify-content: end; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid content is aligned horizontally to the far edge of the container element.\n\n.container { justify-content: space-evenly; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe grid content is spaced evenly horizontally within the container element.\n\nalign-content\n\nalign-content is used to align the grid content along the column axis.\n\nHere is an example of end:\n\n.container { align-content: end; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nHere is an example of space-evenly:\n\n.container { align-content: space-evenly; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\njustify-items, align-items, justify-content, and align-content are four properties that apply to the entire grid.\n\nStep 2 â Using Properties on the Grid Items\n\njustify-self and align-self are analogous to the equivalent properties available on the container (justify-items and align-items), but they apply to items directly to position them differently than the rest of the grid items.\n\njustify-self\n\njustify-self is used to align a grid item along the row axis.\n\nHere is an example of end:\n\n<div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\" style=\"justify-self: end;\">3</div> <div class=\"item\">4</div> <div class=\"item\">5</div> <div class=\"item\">6</div> </div>\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe third item is aligned horizontally to the far edge of the column.\n\nalign-self\n\nalign-self is used to align a grid item along the column axis.\n\nHere is an example of end:\n\n<div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\" style=\"align-self: end;\">3</div> <div class=\"item\">4</div> <div class=\"item\">5</div> <div class=\"item\">6</div> </div>\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThe third item is aligned vertically to the bottom of the column.\n\njustify-self and align-self are two properties that apply directly to grid items.\n\nStep 3 â Using Multiple Properties\n\nUsing a combination of row axis and column axis CSS grid properties may be necessary to create the grid you desire.\n\nHere is an example that uses a combination of justify-content: space-evenly, justify-items: center, align-content: space-evenly, and align-items: center:\n\n.container { justify-content: space-evenly; justify-items: center; align-content: space-evenly; align-items: center; }\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nThis code will produce six grid items that are spaced evenly and centered in the containing element.\n\nUse other combinations to achieve your desired grid.\n\nConclusion\n\nIn this article, you explored each of the CSS grid properties.\n\nAs of 2020, 95% of browsers have some level of support for CSS grid. For details, reference Can I Use css-grid. Ensure that your target audience can utilize this feature before incorporating it into your web applications."
    }
}