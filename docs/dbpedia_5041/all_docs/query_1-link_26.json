{
    "id": "dbpedia_5041_1",
    "rank": 26,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout",
        "read_more_link": "",
        "language": "en",
        "title": "Box alignment in grid layout - CSS: Cascading Style Sheets",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout/block_axis.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout/7_inline_axis.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout/7_space-between.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout/7_auto_margins.png"
        ],
        "movies": [
            "https://live.mdnplay.dev/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout/runner.html?id=setting_align-content_space-between"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-21T18:59:14+00:00",
        "summary": "",
        "meta_description": "CSS grid layout implements the specification Box Alignment Level 3 which is the same standard flexbox uses for aligning items in its flex container. This specification details how alignment should work in all the different layout methods. Layout methods will conform to the specification where possible and implement individual behavior based on their differences (features and constraints). While the specification currently specifies alignment details for all layout methods, browsers have not fully implemented all of the specification; however, the CSS grid layout method has been widely adopted.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Box_alignment_in_grid_layout",
        "text": "When working with grid layout you have two axes available to align things against â the block axis and the inline axis. The block axis is the axis upon which blocks are laid out in block layout. If you have two paragraphs on your page they display one below the other, so it is this direction we describe as the block axis.\n\nThe inline axis runs across the block axis, it is the direction in which text in regular inline flow runs.\n\nWe are able to align the content inside grid areas, and the grid tracks themselves on these two axes.\n\nIn the following example, I have four grid areas within my grid. I can use the align-items property on the grid container, to align the items using one of the following values:\n\nauto\n\nnormal\n\nstart\n\nend\n\ncenter\n\nstretch\n\nbaseline\n\nfirst baseline\n\nlast baseline\n\n* { box-sizing: border-box; } .wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } .wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; }\n\ncss\n\n.wrapper { display: grid; grid-template-columns: repeat(8, 1fr); gap: 10px; grid-auto-rows: 100px; grid-template-areas: \"a a a a b b b b\" \"a a a a b b b b\" \"c c c c d d d d\" \"c c c c d d d d\"; align-items: start; } .item1 { grid-area: a; } .item2 { grid-area: b; } .item3 { grid-area: c; } .item4 { grid-area: d; }\n\nhtml\n\n<div class=\"wrapper\"> <div class=\"item1\">Item 1</div> <div class=\"item2\">Item 2</div> <div class=\"item3\">Item 3</div> <div class=\"item4\">Item 4</div> </div>\n\nKeep in mind that once you set align-items: start, the height of each child <div> will be determined by the contents of the <div>. This is in contrast to omitting align-items completely, in which case the height of each <div> stretches to fill its grid area.\n\nThe align-items property sets the align-self property for all of the child grid items. This means that you can set the property individually, by using align-self on a grid item.\n\nThe specification details that the default behavior in align-self is to stretch, except for items which have an intrinsic aspect ratio, in this case they behave as start. The reason for this, is that if items with an aspect ratio are set to stretch, this default would distort them.\n\nThis behavior has now been clarified in the specification, with browsers yet to implement the correct behavior. Until that happens, you can ensure that items do not stretch, such as images, which are direct children of the grid, by setting align-self and justify-self to start. This will mimic the correct behavior once implemented.\n\nAs align-items and align-self deal with the alignment of items on the block axis, justify-items and justify-self do the same job on the inline axis. The values you can choose from are the same as for align-self.\n\nauto\n\nnormal\n\nstart\n\nend\n\ncenter\n\nstretch\n\nbaseline\n\nfirst baseline\n\nlast baseline\n\nYou can see the same example as used for align-items, below. This time we are applying the justify-self property.\n\nOnce again the default is stretch, other than for items with an intrinsic aspect ratio. This means that by default, grid items will cover their grid area, unless you change that by setting alignment. The first item in the example demonstrates this default alignment:\n\n* { box-sizing: border-box; } .wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } .wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; }\n\ncss\n\n.wrapper { display: grid; grid-template-columns: repeat(8, 1fr); gap: 10px; grid-auto-rows: 100px; grid-template-areas: \"a a a a b b b b\" \"a a a a b b b b\" \"c c c c d d d d\" \"c c c c d d d d\"; } .item1 { grid-area: a; } .item2 { grid-area: b; justify-self: start; } .item3 { grid-area: c; justify-self: end; } .item4 { grid-area: d; justify-self: center; }\n\nhtml\n\n<div class=\"wrapper\"> <div class=\"item1\">Item 1</div> <div class=\"item2\">Item 2</div> <div class=\"item3\">Item 3</div> <div class=\"item4\">Item 4</div> </div>\n\nAs with align-self and align-items, you can apply justify-items to the grid container, to set the justify-self value for all items.\n\nThe justify-self and justify-items properties are not implemented in flexbox. This is due to the one-dimensional nature of flexbox, and that there may be multiple items along the axis, making it impossible to justify a single item. To align items along the main, inline axis in flexbox you use the justify-content property.\n\nIf you have a situation where your grid tracks use an area that is smaller than the grid container, then you can align the grid tracks themselves, inside that container. Once again, this operates on the block and inline axes, with align-content aligning tracks on the block axis, and justify-content performing alignment on the inline axis. The place-content property is shorthand for align-content and justify-content. The values for align-content, justify-content and place-content are:\n\nnormal\n\nstart\n\nend\n\ncenter\n\nstretch\n\nspace-around\n\nspace-between\n\nspace-evenly\n\nbaseline\n\nfirst baseline\n\nlast baseline\n\nIn the below example I have a grid container of 500 pixels by 500 pixels. I have defined 3 row and column tracks each of 100 pixels with a 10 pixel gutter. This means that there is space inside the grid container both in the block and inline directions.\n\nThe align-content property is applied to the grid container as it works on the entire grid.\n\nWe can also use values for this property that you may be familiar with from flexbox; the space distribution values of space-between, space-around and space-evenly. If we update align-content to space-between, you can see how the elements on our grid space out:\n\n* { box-sizing: border-box; } .wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } .wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; }\n\ncss\n\n.wrapper { display: grid; grid-template-columns: repeat(3, 100px); grid-template-rows: repeat(3, 100px); height: 500px; width: 500px; gap: 10px; grid-template-areas: \"a a b\" \"a a b\" \"c d d\"; align-content: space-between; } .item1 { grid-area: a; } .item2 { grid-area: b; } .item3 { grid-area: c; } .item4 { grid-area: d; }\n\nhtml\n\n<div class=\"wrapper\"> <div class=\"item1\">Item 1</div> <div class=\"item2\">Item 2</div> <div class=\"item3\">Item 3</div> <div class=\"item4\">Item 4</div> </div>\n\nIt is worth noting, that using these space distribution values may cause items on your grid to become larger. If an item spans more than one grid track, as further space is added between the tracks, that item needs to become large to absorb the space. We're always working in a strict grid. Therefore, if you decide to use these values, ensure that the content of your tracks can cope with the extra space, or that you have used alignment properties on the items, to cause them to move to the start rather than stretch.\n\nIn the below image I have placed the grid with align-content, with a value of start alongside the grid when align-content has a value of space-between. You can see how items 1 and 2, which span two row tracks have taken on extra height as they gain the additional space added to the gap between those two tracks:\n\nIn all of these examples I have been working in English, which is a left-to-right language. This means that our start lines are top and left of our grid when thinking in physical directions.\n\nCSS grid layout, and the Box Alignment specification are designed to work with writing modes in CSS. This means that if you are working in a right to left language, such as Arabic, the start of the grid would be the top and right, so the default of justify-content: start would be for grid tracks to start on the right-hand side of the grid.\n\nSetting auto margins, using margin-right or margin-left however, or absolutely positioning items using the top, right, bottom and left offsets would not honor writing modes. In the next guide, we will look further into this interaction between CSS grid layout, box alignment and writing modes. This will be important to understand, if you develop sites that are then displayed in multiple languages, or if you want to mix languages or writing modes in a design."
    }
}