{
    "id": "dbpedia_5041_2",
    "rank": 31,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment",
        "read_more_link": "",
        "language": "en",
        "title": "CSS box alignment - CSS: Cascading Style Sheets",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/two-axes.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/align-container-subjects.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/writing-mode-start.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/justify-content-start.png",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment/justify-content-space-between.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-26T14:38:02+00:00",
        "summary": "",
        "meta_description": "The CSS box alignment module specifies CSS features that relate to the alignment of boxes in the various CSS box layout models: block layout, table layout, flex layout, and grid layout. The module aims to create a consistent method of alignment across all of CSS. This document details the general concepts found in the specification.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment",
        "text": "CSS traditionally had very limited alignment capabilities. We were able to align text using text-align, center blocks using auto margins, and in table or inline-block layouts using the vertical-align property. Alignment of text is now covered by the Inline Layout and CSS Text modules, and for the first time in Box Alignment we have full horizontal and vertical alignment capabilities.\n\nIf you initially learned Flexbox then you may consider these properties to be part of the flexbox specification, and some of the properties are indeed listed in Level 1 of flexbox. However the specification notes that the Box Alignment specification should be referred to as it may add additional capabilities over what is currently in flexbox.\n\nAlignment is linked to writing modes in that when we align an item we do not consider whether we are aligning it to the physical dimensions of top, right, bottom and left. Instead we describe alignment in terms of the start and end of the particular dimension we are working with. This ensures that alignment works in the same way whichever writing mode the document has.\n\nWhen using the box alignment properties you will align content on one of two axes â the inline (or main) axis, and the block (or cross) axis. The inline axis is the axis along which words in a sentence flow in the writing mode being used â for English, for example, the inline axis is horizontal. The block axis is the axis along which blocks, such as paragraph elements, are laid out and it runs across the Inline axis.\n\nWhen aligning items on the inline axis you will use the properties which begin with justify-:\n\njustify-items\n\njustify-self\n\njustify-content\n\nWhen aligning items on the block axis you will use the properties that begin align-:\n\nalign-items\n\nalign-self\n\nalign-content\n\nFlexbox adds an additional complication in that the above is true when flex-direction is set to row. The properties are swapped when flexbox is set to column. Therefore, when working with flexbox it is easier to think about the main and cross axis rather than inline and block. The justify- properties are always used to align on the main axis, the align- properties on the cross axis.\n\nThe following values are defined for positional alignment, and can be used as values for content alignment with justify-content and align-content and also for self alignment with justify-self and align-self.\n\ncenter\n\nstart\n\nend\n\nself-start\n\nself-end\n\nflex-start for flexbox only\n\nflex-end for flexbox only\n\nleft\n\nright\n\nOther than the physical values of left and right, which relate to physical attributes of the screen, all of the other values are logical values and relate to the writing mode of the content.\n\nFor example, when working in CSS grid layout, if you are working in English and set justify-content to start this will move the items in the inline dimension to the start, which will be the left as sentences in English start on the left. If you were using Arabic, a right to left language, then the same value of start would result in the items moving to the right, as sentences in Arabic start on the right-hand side of the page.\n\nBoth of these examples have justify-content: start, however the location of start changes according to the writing mode.\n\nThe Baseline alignment keywords are used to align the baselines of boxes across a group of alignment subjects. They can be used as values for content alignment with justify-content and align-content and also for self alignment with justify-self and align-self.\n\nbaseline\n\nfirst baseline\n\nlast baseline\n\nBaseline content alignment â specifying a baseline alignment value for justify-content or align-content â works in layout methods that lay items out in rows. The alignment subjects are baseline aligned against each other by adding padding inside the boxes.\n\nBaseline self alignment shifts the boxes to align by baseline by adding a margin outside the boxes. Self alignment is when using justify-self or align-self, or when setting these values as a group with justify-items and align-items.\n\nThe distributed alignment keywords are used with the align-content and justify-content properties. These keywords define what happens to any additional space after alignment subjects have been displayed. The values are as follows:\n\nstretch\n\nspace-between\n\nspace-around\n\nspace-evenly\n\nFor example, in Flex Layout items are aligned with flex-start initially. Working in a horizontal top to bottom writing mode such as English, with flex-direction as row the items start on the far left and any available space after displaying the items is placed after the items.\n\nIf you set justify-content: space-between on the flex container, the available space is now shared out and placed between the items.\n\nThere needs to be space available in the dimension you wish to align the items in, in order for these keywords to take effect. With no space, there is nothing to distribute.\n\nThe safe and unsafe keywords help define behavior when an alignment subject is larger than the alignment container. The safe keyword will align to start in the case of a specified alignment causing an overflow, the aim being to avoid \"data loss\" where part of the item is outside the boundaries of the alignment container and can't be scrolled to.\n\nIf you specify unsafe then the alignment will be honoured even if it would cause such data loss."
    }
}