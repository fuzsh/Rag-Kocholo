{
    "id": "dbpedia_215_2",
    "rank": 72,
    "data": {
        "url": "https://docs.github.com/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax",
        "read_more_link": "",
        "language": "en",
        "title": "Basic writing and formatting syntax",
        "top_image": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "meta_img": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "images": [
            "https://docs.github.com/assets/cb-11407/images/help/writing/headings-rendered.png",
            "https://docs.github.com/assets/cb-82863/images/help/repository/headings-toc.png",
            "https://docs.github.com/assets/cb-13462/images/help/writing/quoted-text-rendered.png",
            "https://docs.github.com/assets/cb-24556/images/help/writing/inline-code-rendered.png",
            "https://docs.github.com/assets/cb-34231/images/help/writing/code-block-rendered.png",
            "https://docs.github.com/assets/cb-11643/images/help/writing/supported-color-models-rendered.png",
            "https://docs.github.com/assets/cb-1558/images/help/writing/supported-color-models-hex-rendered.png",
            "https://docs.github.com/assets/cb-1962/images/help/writing/supported-color-models-rgb-rendered.png",
            "https://docs.github.com/assets/cb-2066/images/help/writing/supported-color-models-hsl-rendered.png",
            "https://docs.github.com/assets/cb-8312/images/help/writing/link-rendered.png",
            "https://docs.github.com/assets/cb-55933/images/help/repository/readme-links.png",
            "https://docs.github.com/assets/cb-39744/images/help/writing/image-rendered.png",
            "https://docs.github.com/assets/cb-7925/images/help/writing/unordered-list-rendered.png",
            "https://docs.github.com/assets/cb-8162/images/help/writing/ordered-list-rendered.png",
            "https://docs.github.com/assets/cb-7202/images/help/writing/nested-list-alignment.png",
            "https://docs.github.com/assets/cb-7206/images/help/writing/nested-list-example-1.png",
            "https://docs.github.com/assets/cb-4906/images/help/writing/nested-list-example-3.png",
            "https://docs.github.com/assets/cb-7734/images/help/writing/nested-list-example-2.png",
            "https://docs.github.com/assets/cb-64626/images/help/writing/task-list-rendered-simple.png",
            "https://docs.github.com/assets/cb-6949/images/help/writing/mention-rendered.png",
            "https://docs.github.com/assets/cb-17228/images/help/writing/emoji-rendered.png",
            "https://docs.github.com/assets/cb-27017/images/help/writing/footnote-rendered.png",
            "https://docs.github.com/assets/cb-24696/images/help/writing/alerts-rendered.png",
            "https://docs.github.com/assets/cb-5440/images/help/writing/escaped-character-rendered.png",
            "https://docs.github.com/assets/cb-11496/images/help/writing/display-markdown-as-source-global-nav-update.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Create sophisticated formatting for your prose and code on GitHub with simple syntax.",
        "meta_lang": "en",
        "meta_favicon": "/assets/cb-345/images/site/favicon.png",
        "meta_site_name": "GitHub Docs",
        "canonical_link": "https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax",
        "text": "Headings\n\nTo create a heading, add one to six # symbols before your heading text. The number of # you use will determine the hierarchy level and typeface size of the heading.\n\n# A first-level heading ## A second-level heading ### A third-level heading\n\nWhen you use two or more headings, GitHub automatically generates a table of contents that you can access by clicking within the file header. Each heading title is listed in the table of contents and you can click a title to navigate to the selected section.\n\nStyling text\n\nYou can indicate emphasis with bold, italic, strikethrough, subscript, or superscript text in comment fields and .md files.\n\nStyleSyntaxKeyboard shortcutExampleOutputBold** ** or __ __Command+B (Mac) or Ctrl+B (Windows/Linux)**This is bold text**This is bold textItalic* * or _ _ Command+I (Mac) or Ctrl+I (Windows/Linux)_This text is italicized_This text is italicizedStrikethrough~~ ~~None~~This was mistaken text~~This was mistaken textBold and nested italic** ** and _ _None**This text is _extremely_ important**This text is extremely importantAll bold and italic*** ***None***All this text is important***All this text is importantSubscript<sub> </sub>NoneThis is a <sub>subscript</sub> textThis is a subscript textSuperscript<sup> </sup>NoneThis is a <sup>superscript</sup> textThis is a superscript text\n\nQuoting text\n\nYou can quote text with a >.\n\nText that is not a quote > Text that is a quote\n\nQuoted text is indented, with a different type color.\n\nQuoting code\n\nYou can call out code or a command within a sentence with single backticks. The text within the backticks will not be formatted. You can also press the Command+E (Mac) or Ctrl+E (Windows/Linux) keyboard shortcut to insert the backticks for a code block within a line of Markdown.\n\nUse `git status` to list all new or modified files that haven't yet been committed.\n\nTo format code or text into its own distinct block, use triple backticks.\n\nSome basic Git commands are: ``` git status git add git commit ```\n\nFor more information, see \"Creating and highlighting code blocks.\"\n\nIf you are frequently editing code snippets and tables, you may benefit from enabling a fixed-width font in all comment fields on GitHub. For more information, see \"About writing and formatting on GitHub.\"\n\nSupported color models\n\nIn issues, pull requests, and discussions, you can call out colors within a sentence by using backticks. A supported color model within backticks will display a visualization of the color.\n\nThe background color is `#ffffff` for light mode and `#000000` for dark mode.\n\nHere are the currently supported color models.\n\nColorSyntaxExampleOutputHEX`#RRGGBB``#0969DA`RGB`rgb(R,G,B)``rgb(9, 105, 218)`HSL`hsl(H,S,L)``hsl(212, 92%, 45%)`\n\nYou can create an inline link by wrapping link text in brackets [ ], and then wrapping the URL in parentheses ( ). You can also use the keyboard shortcut Command+K to create a link. When you have text selected, you can paste a URL from your clipboard to automatically create a link from the selection.\n\nYou can also create a Markdown hyperlink by highlighting the text and using the keyboard shortcut Command+V. If you'd like to replace the text with the link, use the keyboard shortcut Command+Shift+V.\n\nThis site was built using [GitHub Pages](https://pages.github.com/).\n\nYou can link directly to a section in a rendered file by hovering over the section heading to expose .\n\nYou can define relative links and image paths in your rendered files to help readers navigate to other files in your repository.\n\nA relative link is a link that is relative to the current file. For example, if you have a README file in root of your repository, and you have another file in docs/CONTRIBUTING.md, the relative link to CONTRIBUTING.md in your README might look like this:\n\n[Contribution guidelines for this project](docs/CONTRIBUTING.md)\n\nGitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works. The path of the link will be relative to the current file. Links starting with / will be relative to the repository root. You can use all relative link operands, such as ./ and ../.\n\nYour link text should be on a single line. The example below will not work.\n\n[Contribution guidelines for this project](docs/CONTRIBUTING.md)\n\nRelative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - we recommend using relative links to refer to other files within your repository.\n\nImages\n\nYou can display an image by adding ! and wrapping the alt text in [ ]. Alt text is a short text equivalent of the information in the image. Then, wrap the link for the image in parentheses ().\n\n![Screenshot of a comment on a GitHub issue showing an image, added in the Markdown, of an Octocat smiling and raising a tentacle.](https://myoctocat.com/assets/images/base-octocat.svg)\n\nGitHub supports embedding images into your issues, pull requests, discussions, comments and .md files. You can display an image from your repository, add a link to an online image, or upload an image. For more information, see \"Uploading assets.\"\n\nHere are some examples for using relative links to display an image.\n\nContextRelative LinkIn a .md file on the same branch/assets/images/electrocat.pngIn a .md file on another branch/../main/assets/images/electrocat.pngIn issues, pull requests and comments of the repository../blob/main/assets/images/electrocat.png?raw=trueIn a .md file in another repository/../../../../github/docs/blob/main/assets/images/electrocat.pngIn issues, pull requests and comments of another repository../../../github/docs/blob/main/assets/images/electrocat.png?raw=true\n\nFor more information, see \"Relative Links.\"\n\nSpecifying the theme an image is shown to\n\nYou can specify the theme an image is displayed for in Markdown by using the HTML <picture> element in combination with the prefers-color-scheme media feature. We distinguish between light and dark color modes, so there are two options available. You can use these options to display images optimized for dark or light backgrounds. This is particularly helpful for transparent PNG images.\n\nFor example, the following code displays a sun image for light themes and a moon for dark themes:\n\n<picture> <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456776-7f95b81a-f1ed-45f7-b7ab-8fa810d529fa.png\"> <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\"> <img alt=\"Shows an illustrated sun in light mode and a moon with stars in dark mode.\" src=\"https://user-images.githubusercontent.com/25423296/163456779-a8556205-d0a5-45e2-ac17-42d089e3c3f8.png\"> </picture>\n\nThe old method of specifying images based on the theme, by using a fragment appended to the URL (#gh-dark-mode-only or #gh-light-mode-only), is deprecated and will be removed in favor of the new method described above.\n\nLists\n\nYou can make an unordered list by preceding one or more lines of text with -, *, or +.\n\n- George Washington * John Adams + Thomas Jefferson\n\nTo order your list, precede each line with a number.\n\n1. James Madison 2. James Monroe 3. John Quincy Adams\n\nNested Lists\n\nYou can create a nested list by indenting one or more list items below another item.\n\nTo create a nested list using the web editor on GitHub or a text editor that uses a monospaced font, like Visual Studio Code, you can align your list visually. Type space characters in front of your nested list item until the list marker character (- or *) lies directly below the first character of the text in the item above it.\n\n1. First list item - First nested list item - Second nested list item\n\nTo create a nested list in the comment editor on GitHub, which doesn't use a monospaced font, you can look at the list item immediately above the nested list and count the number of characters that appear before the content of the item. Then type that number of space characters in front of the nested list item.\n\nIn this example, you could add a nested list item under the list item 100. First list item by indenting the nested list item a minimum of five spaces, since there are five characters (100. ) before First list item.\n\n100. First list item - First nested list item\n\nYou can create multiple levels of nested lists using the same method. For example, because the first nested list item has seven characters (␣␣␣␣␣-␣) before the nested list content First nested list item, you would need to indent the second nested list item by at least two more characters (nine spaces minimum).\n\n100. First list item - First nested list item - Second nested list item\n\nFor more examples, see the GitHub Flavored Markdown Spec.\n\nTask lists\n\nTo create a task list, preface list items with a hyphen and space followed by [ ]. To mark a task as complete, use [x].\n\n- [x] #739 - [ ] https://github.com/octo-org/octo-repo/issues/740 - [ ] Add delight to the experience when all tasks are complete :tada:\n\nIf a task list item description begins with a parenthesis, you'll need to escape it with \\:\n\n- [ ] \\(Optional) Open a followup issue\n\nFor more information, see \"About task lists.\"\n\nMentioning people and teams\n\nYou can mention a person or team on GitHub by typing @ plus their username or team name. This will trigger a notification and bring their attention to the conversation. People will also receive a notification if you edit a comment to mention their username or team name. For more information about notifications, see \"About notifications.\"\n\n@github/support What do you think about these updates?\n\nWhen you mention a parent team, members of its child teams also receive notifications, simplifying communication with multiple groups of people. For more information, see \"About teams.\"\n\nTyping an @ symbol will bring up a list of people or teams on a project. The list filters as you type, so once you find the name of the person or team you are looking for, you can use the arrow keys to select it and press either tab or enter to complete the name. For teams, enter the @organization/team-name and all members of that team will get subscribed to the conversation.\n\nThe autocomplete results are restricted to repository collaborators and any other participants on the thread.\n\nReferencing issues and pull requests\n\nYou can bring up a list of suggested issues and pull requests within the repository by typing #. Type the issue or pull request number or title to filter the list, and then press either tab or enter to complete the highlighted result.\n\nFor more information, see \"Autolinked references and URLs.\"\n\nReferencing external resources\n\nIf custom autolink references are configured for a repository, then references to external resources, like a JIRA issue or Zendesk ticket, convert into shortened links. To know which autolinks are available in your repository, contact someone with admin permissions to the repository. For more information, see \"Configuring autolinks to reference external resources.\"\n\nUploading assets\n\nYou can upload assets like images by dragging and dropping, selecting from a file browser, or pasting. You can upload assets to issues, pull requests, comments, and .md files in your repository.\n\nUsing emojis\n\nYou can add emoji to your writing by typing :EMOJICODE:, a colon followed by the name of the emoji.\n\n@octocat :+1: This PR looks great - it's ready to merge! :shipit:\n\nTyping : will bring up a list of suggested emoji. The list will filter as you type, so once you find the emoji you're looking for, press Tab or Enter to complete the highlighted result.\n\nFor a full list of available emoji and codes, see the Emoji-Cheat-Sheet.\n\nParagraphs\n\nYou can create a new paragraph by leaving a blank line between lines of text.\n\nYou can add footnotes to your content by using this bracket syntax:\n\nHere is a simple footnote[^1]. A footnote can also have multiple lines[^2]. [^1]: My reference. [^2]: To add line breaks within a footnote, prefix new lines with 2 spaces. This is a second line.\n\nThe footnote will render like this:\n\nAlerts\n\nAlerts are a Markdown extension based on the blockquote syntax that you can use to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the significance of the content.\n\nUse alerts only when they are crucial for user success and limit them to one or two per article to prevent overloading the reader. Additionally, you should avoid placing alerts consecutively. Alerts cannot be nested within other elements.\n\nTo add an alert, use a special blockquote line specifying the alert type, followed by the alert information in a standard blockquote. Five types of alerts are available:\n\n> [!NOTE] > Useful information that users should know, even when skimming content. > [!TIP] > Helpful advice for doing things better or more easily. > [!IMPORTANT] > Key information users need to know to achieve their goal. > [!WARNING] > Urgent info that needs immediate user attention to avoid problems. > [!CAUTION] > Advises about risks or negative outcomes of certain actions.\n\nHere are the rendered alerts:\n\nYou can tell GitHub to hide content from the rendered Markdown by placing the content in an HTML comment.\n\n<!-- This content will not appear in the rendered Markdown -->\n\nIgnoring Markdown formatting\n\nYou can tell GitHub to ignore (or escape) Markdown formatting by using \\ before the Markdown character.\n\nLet's rename \\*our-new-project\\* to \\*our-old-project\\*.\n\nFor more information on backslashes, see Daring Fireball's \"Markdown Syntax.\"\n\nDisabling Markdown rendering\n\nWhen viewing a Markdown file, you can click Code at the top of the file to disable Markdown rendering and view the file's source instead.\n\nDisabling Markdown rendering enables you to use source view features, such as line linking, which is not possible when viewing rendered Markdown files.\n\nFurther reading"
    }
}