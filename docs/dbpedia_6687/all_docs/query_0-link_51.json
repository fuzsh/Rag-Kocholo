{
    "id": "dbpedia_6687_0",
    "rank": 51,
    "data": {
        "url": "https://stackoverflow.com/questions/1441562/detect-language-from-string-in-php",
        "read_more_link": "",
        "language": "en",
        "title": "Detect language from string in PHP",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://cdn.sstatic.net/Img/teams/teams-promo.svg?v=e507948b81bf",
            "https://i.sstatic.net/grqpk.jpg?s=64",
            "https://www.gravatar.com/avatar/38cadf0b56ff47d511ac012e14d7f31a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/db26fd54c3a48f2125f94364fc1e4fa1?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/fced7b1468dd7e477cbf594edccff3e7?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/grqpk.jpg?s=64",
            "https://i.sstatic.net/A1plO.jpg?s=64",
            "https://www.gravatar.com/avatar/c57f597182ae324d8eb33b935f7d38af?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/16afab0e0815eb7203cda86555fd322a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/df1e8f0fac2e3dc450c84d0e9bb23d28?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/QisuQ.png?s=64",
            "https://www.gravatar.com/avatar/1d6533d8b9a17afa0de0b444741d0732?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/801ba45b71fa94421eb46154c141b8ae?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/OZebR.png?s=64",
            "https://www.gravatar.com/avatar/bdf4e75b49c49aecbea9f74f48591ae2?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/zohUd.jpg?s=64",
            "https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/5f218e5a0e87e5ffcc152a8c979e5013?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0d15e1c6067fcb55b5eefefa296a5102?s=64&d=identicon&r=PG",
            "https://lh6.googleusercontent.com/-3I6dGSUkYIo/AAAAAAAAAAI/AAAAAAAAGZ0/ubF6BQH_lys/photo.jpg?sz=64",
            "https://i.sstatic.net/UIvGN.jpg?s=64",
            "https://graph.facebook.com/1312280725452842/picture?type=large",
            "https://www.gravatar.com/avatar/7ae655497940abfc6d6785e8ead9413c?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/9e3de2742a985324af1ab07f4e18aae7?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/a-/AOh14GjIeSykGfPOLFBgEk3rUN4abBXTEggmj8MbzMlU=k-s64",
            "https://stackoverflow.com/posts/1441562/ivc/5f9a?prg=6bb0c4e7-460d-4501-ad22-2fac4cb63a76"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-09-17T22:06:44",
        "summary": "",
        "meta_description": "In PHP, is there a way to detect the language of a string? Suppose the string is in UTF-8 format.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/1441562/detect-language-from-string-in-php",
        "text": "I know this is an old post, but here is what I developed after not finding any viable solution.\n\nother suggestions are all too heavy and too cumbersome for my situation\n\nI support a finite number of languages on my website (at the moment two: 'en' and 'de' - but solution is generalised for more).\n\nI need a plausible guess about the language of a user-generated string, and I have a fallback (the language setting of the user).\n\nSo I want a solution with minimal false positives - but don't care so much about false negatives.\n\nThe solution uses the 20 most common words in a language, counts the occurrences of those in the haystack. Then it just compares the counts of the first and second most counted languages. If the runner-up number is less than 10% of the winner, the winner takes it all.\n\nCode - Any suggestions for speed improvement are more than welcome!\n\nfunction getTextLanguage($text, $default) { $supported_languages = array( 'en', 'de', ); // German word list // from http://wortschatz.uni-leipzig.de/Papers/top100de.txt $wordList['de'] = array ('der', 'die', 'und', 'in', 'den', 'von', 'zu', 'das', 'mit', 'sich', 'des', 'auf', 'für', 'ist', 'im', 'dem', 'nicht', 'ein', 'Die', 'eine'); // English word list // from http://en.wikipedia.org/wiki/Most_common_words_in_English $wordList['en'] = array ('the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at'); // French word list // from https://1000mostcommonwords.com/1000-most-common-french-words/ $wordList['fr'] = array ('comme', 'que', 'tait', 'pour', 'sur', 'sont', 'avec', 'tre', 'un', 'ce', 'par', 'mais', 'que', 'est', 'il', 'eu', 'la', 'et', 'dans', 'mot'); // Spanish word list // from https://spanishforyourjob.com/commonwords/ $wordList['es'] = array ('que', 'no', 'a', 'la', 'el', 'es', 'y', 'en', 'lo', 'un', 'por', 'qu', 'si', 'una', 'los', 'con', 'para', 'est', 'eso', 'las'); // clean out the input string - note we don't have any non-ASCII // characters in the word lists... change this if it is not the // case in your language wordlists! $text = preg_replace(\"/[^A-Za-z]/\", ' ', $text); // count the occurrences of the most frequent words foreach ($supported_languages as $language) { $counter[$language]=0; } for ($i = 0; $i < 20; $i++) { foreach ($supported_languages as $language) { $counter[$language] = $counter[$language] + // I believe this is way faster than fancy RegEx solutions substr_count($text, ' ' .$wordList[$language][$i] . ' ');; } } // get max counter value // from http://stackoverflow.com/a/1461363 $max = max($counter); $maxs = array_keys($counter, $max); // if there are two winners - fall back to default! if (count($maxs) == 1) { $winner = $maxs[0]; $second = 0; // get runner-up (second place) foreach ($supported_languages as $language) { if ($language <> $winner) { if ($counter[$language]>$second) { $second = $counter[$language]; } } } // apply arbitrary threshold of 10% if (($second / $max) < 0.1) { return $winner; } } return $default; }\n\nText_LanguageDetect pear package produced terrible results: \"luxury apartments downtown\" is detected as Portuguese...\n\nGoogle API is still the best solution, they give 300$ free credit and warn before charging you anything\n\nBelow is a super simple function that uses file_get_contents to download the lang detected by the API, so no need to download or install libraries etc.\n\nfunction guess_lang($str) { $str = str_replace(\" \", \"%20\", $str); $content = file_get_contents(\"https://translation.googleapis.com/language/translate/v2/detect?key=YOUR_API_KEY&q=\".$str); $lang = (json_decode($content, true)); if(isset($lang)) return $lang[\"data\"][\"detections\"][0][0][\"language\"]; }\n\nExecute:\n\necho guess_lang(\"luxury apartments downtown montreal\"); // returns \"en\"\n\nYou can get your Google Translate API key here: https://console.cloud.google.com/apis/library/translate.googleapis.com/\n\nThis is a simple example for short phrases to get you going. For more complex applications you'll want to restrict your API key and use the library obviously.\n\nI tried the Text_LanguageDetect library and the results I got were not very good (for instance, the text \"test\" was identified as Estonian and not English).\n\nI can recommend you try the Yandex Translate API which is FREE for 1 million characters for 24 hours and up to 10 million characters a month. Starting May 27, 2020, free API keys aren't issued. It supports (according to the documentation) over 60 languages.\n\n<?php function identifyLanguage($text) { $baseUrl = \"https://translate.yandex.net/api/v1.5/tr.json/detect?key=YOUR_API_KEY\"; $url = $baseUrl . \"&text=\" . urlencode($text); $ch = curl_init($url); curl_setopt($ch, CURLOPT_CAINFO, YOUR_CERT_PEM_FILE_LOCATION); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); $output = curl_exec($ch); if ($output) { $outputJson = json_decode($output); if ($outputJson->code == 200) { if (strlen($outputJson->lang) > 0) { return $outputJson->lang; } } } return \"unknown\"; } function translateText($text, $targetLang) { $baseUrl = \"https://translate.yandex.net/api/v1.5/tr.json/translate?key=YOUR_API_KEY\"; $url = $baseUrl . \"&text=\" . urlencode($text) . \"&lang=\" . urlencode($targetLang); $ch = curl_init($url); curl_setopt($ch, CURLOPT_CAINFO, YOUR_CERT_PEM_FILE_LOCATION); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); $output = curl_exec($ch); if ($output) { $outputJson = json_decode($output); if ($outputJson->code == 200) { if (count($outputJson->text) > 0 && strlen($outputJson->text[0]) > 0) { return $outputJson->text[0]; } } } return $text; } header(\"content-type: text/html; charset=UTF-8\"); echo identifyLanguage(\"エクスペリエンス\"); echo \"<br>\"; echo translateText(\"エクスペリエンス\", \"en\"); echo \"<br>\"; echo translateText(\"エクスペリエンス\", \"es\"); echo \"<br>\"; echo translateText(\"エクスペリエンス\", \"zh\"); echo \"<br>\"; echo translateText(\"エクスペリエンス\", \"he\"); echo \"<br>\"; echo translateText(\"エクスペリエンス\", \"ja\"); echo \"<br>\"; ?>\n\nI have had good results with https://github.com/patrickschur/language-detection and am using it in production:\n\nIt uses ngrams in languages to detect the most likely language (the longer your string / the more words, the more accurate it will be), which seems like a solid proven method.\n\n110 languages are supported, but you can also limit the number of languages to only those you are interested in.\n\nTrainer and Language detector can easily be improved / customized. It uses the Universal Declaration of Human Rights in each of the languages as the foundation to detect a language, but if you know what type of sentences you experience you can easily extend or replace the used texts in each language and get better results fast. \"Training\" this library to become better is easy.\n\nI would suggest to increase setMaxNgrams (I set it to 9000) in the Trainer and run it once, and then also use that setting in the Language detector class. Changing the ngrams number is a bit unintuitive (I had to look through the code to find out how it works), which is a drawback, and the default (310) is always too low in my opinion. More ngrams makes the guessing a lot better.\n\nBecause the library is very small, it was relatively easy to understand what is happening and how to tweak it.\n\nMy usage: I am analyzing emails for a CRM system to know what language an email was written in, so sending the text to a third party service was not an option. Even though the Universal Declaration of Human Rights is probably not the best basis to categorize the language of emails (as emails often have formulaic parts like greetings, which are not part of the Human Rights Declaration) it identifies the correct language in like 99% of cases, if there are at least 5 words in it.\n\nUpdate: I managed to improve language recognition in emails to basically 100% when using the language-detection library with the following methods:\n\nAdd additional common phrases to the (relevant) language samples, like \"Greetings\", \"Best regards\", \"Sincerely\". These kind of expressions are not used in the Universal Declaration of Human Rights. Commonly used phrases help the language recognition a lot, especially formulaic ones used often my humans (\"Hello\", \"Have a nice day\") if you are analyzing human communication.\n\nSet the maximum ngram length to 4 (instead of the default 3).\n\nKeep the maxNgrams at 9000 as before.\n\nThese do make the library a bit slower, so I would suggest to use them in an async way if possible and measure the performance. In my case it is more than fast enough and much more accurate.\n\nI used this method to check for non- english, spanish, french chars using strictly PHP without any extra language API or Classes as of PHP 5.1. The language scripts list comes from: https://www.php.net/manual/en/regexp.reference.unicode.php See below\n\nAn improvement would be to add a function to PHP that lists all supported script languages so that you dont have to fill in the array by hand.\n\nThe usecase was for blocking non-latin posts to a form to improve it's spam blocking as the form was receiving a lot of russian, chinese, and arabic spam posts. Since this was implemented, its gone from 40000/week to less than 5, with none in the last 3 weeks. Google Re-Captcha was in use but it was being defeated easily. #satisfied\n\n<?php $non_latin_text = \"This is NOT english, spanish, or french (which are latin languages) because it has this char in it: и\"; $latin_text = \"1234567890-=\\][poiuytrewqasdfghjkl;'/.,mnbvcxz!@#$%^&*()_+|}{:\\\"?><QWERTYUIOPLKJHGFDSAZXCVBNM\"; print_r(is_non_latin($non_latin_text)); //Returns TRUE print_r(is_non_latin($latin_text)); //Returns FALSE function is_non_latin($text) { $text_script_languages = get_language_scripts($text); //All Latin characters and numbers which are Common and Latin. if (count($text_script_languages) == 2 && in_array('Common', $text_script_languages) && in_array('Latin', $text_script_languages)) { return FALSE; } if (count($text_script_languages) == 1 && (in_array('Common', $text_script_languages) || in_array('Latin', $text_script_languages))) { return FALSE; } //If we are here, then the text had other language scripts in it. return TRUE; } function get_language_scripts($text) { $scripts = array('Arabic', 'Armenian', 'Avestan', 'Balinese', 'Bamum', 'Batak', 'Bengali', 'Bopomofo', 'Brahmi', 'Braille', 'Buginese', 'Buhid', 'Canadian_Aboriginal', 'Carian', 'Chakma', 'Cham', 'Cherokee', 'Common', 'Coptic', 'Cuneiform', 'Cypriot', 'Cyrillic', 'Deseret', 'Devanagari', 'Egyptian_Hieroglyphs', 'Ethiopic', 'Georgian', 'Glagolitic', 'Gothic', 'Greek', 'Gujarati', 'Gurmukhi', 'Han', 'Hangul', 'Hanunoo', 'Hebrew', 'Hiragana', 'Imperial_Aramaic', 'Inherited', 'Inscriptional_Pahlavi', 'Inscriptional_Parthian', 'Javanese', 'Kaithi', 'Kannada', 'Katakana', 'Kayah_Li', 'Kharoshthi', 'Khmer', 'Lao', 'Latin', 'Lepcha', 'Limbu', 'Linear_B', 'Lisu', 'Lycian', 'Lydian', 'Malayalam', 'Mandaic', 'Meetei_Mayek', 'Meroitic_Cursive', 'Meroitic_Hieroglyphs', 'Miao', 'Mongolian', 'Myanmar', 'New_Tai_Lue', 'Nko', 'Ogham', 'Old_Italic', 'Old_Persian', 'Old_South_Arabian', 'Old_Turkic', 'Ol_Chiki', 'Oriya', 'Osmanya', 'Phags_Pa', 'Phoenician', 'Rejang', 'Runic', 'Samaritan', 'Saurashtra', 'Sharada', 'Shavian', 'Sinhala', 'Sora_Sompeng', 'Sundanese', 'Syloti_Nagri', 'Syriac', 'Tagalog', 'Tagbanwa', 'Tai_Le', 'Tai_Tham', 'Tai_Viet', 'Takri', 'Tamil', 'Telugu', 'Thaana', 'Thai', 'Tibetan', 'Tifinagh', 'Ugaritic', 'Vai', 'Yi'); $found_scripts = array(); foreach ($scripts AS $key => $script) { if (!empty($script)) { if (preg_match( '/[\\p{'.$script.'}]/u', $text)) { $found_scripts[] = $script; } } } return $found_scripts; }\n\nYou could implement a module of Apache Tika with Java, insert the results into a txt file, a DB, etc and then read from the file, db, whatever with php. If you don't have that much content, you could use Google's API, although keep in mind your calls will be limited, and you can only send a restricted number of characters to the API. At the time of writing I'd finished testing version 1 (which turned out to be not so accurate) and the labs version 2 (i ditched after i read that there's a 100,000 chars cap per day) of the API."
    }
}