{
    "id": "dbpedia_380_3",
    "rank": 87,
    "data": {
        "url": "https://www.oreilly.com/library/view/learning-gnu-emacs/1565921526/ch04s04.html",
        "read_more_link": "",
        "language": "en",
        "title": "Learning GNU Emacs, Second Edition [Book]",
        "top_image": "https://www.oreilly.com/library/cover/1565921526/1200w630h/",
        "meta_img": "https://www.oreilly.com/library/cover/1565921526/1200w630h/",
        "images": [
            "https://cdn.oreillystatic.com/images/sitewide-headers/oreilly_logo_mark_red.svg",
            "https://www.oreilly.com/api/v2/epubs/1565921526/files/tagoreillycom20070307oreillyimages163674.png",
            "https://www.oreilly.com/api/v2/epubs/1565921526/files/tagoreillycom20070307oreillyimages163676.png",
            "https://cdn.oreillystatic.com/oreilly/images/app-store-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/google-play-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/roku-tv-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/amazon-appstore-logo.png",
            "https://cdn.oreillystatic.com/images/sitewide-headers/oreilly_logo_mark_red.svg",
            "https://cdn.oreillystatic.com/oreilly/images/report-software-architecture-patterns-553x420.jpg",
            "https://cdn.oreillystatic.com/oreilly/images/laptop-flat-topics-ml-1124x638.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Debra Cameron",
            "Bill Rosenblatt",
            "Eric S. Raymond"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Word Abbreviation Mode Word abbreviation mode lets you define abbreviations for special words and phrases. There are many ways to use it. Traditionally, abbreviation mode is used so that you …  - Selection from Learning GNU Emacs, Second Edition [Book]",
        "meta_lang": "en",
        "meta_favicon": "//www.oreilly.com/favicon.ico",
        "meta_site_name": "O’Reilly Online Learning",
        "canonical_link": "https://www.oreilly.com/library/view/learning-gnu-emacs/1565921526/ch04s04.html",
        "text": "Word abbreviation mode lets you define abbreviations for special words and phrases. There are many ways to use it. Traditionally, abbreviation mode is used so that you don’t have to type long words or phrases in their entirety. For example, let’s say you are writing a contract that repeatedly references the National Institute of Standards and Technology, and you are not allowed to use an acronym. Rather than typing the full name, you can define the abbreviation nist. Once you have made this definition, Emacs inserts the full name whenever you type the abbreviation nist, followed by a space or punctuation mark. Emacs watches for you to type an abbreviation, then expands it automatically as soon as you press SPACE or a punctuation mark.\n\nBefore showing you how to get into word abbreviation mode and define your abbreviation list, we’ll start with an example. Our favorite nontraditional use for word abbreviation mode is to correct misspellings as you type. Almost everyone has a dozen or so words that they habitually type incorrectly because of some worn neural pathways. You can simply tell Emacs that these misspellings are “abbreviations” for the correct versions, and Emacs fixes the misspellings every time you type them; you may not even notice that you typed the word wrong before Emacs fixes it. So assume that you’ve entered abbreviation mode, and that you’ve defined receive as an abbreviation for recieve; now, as you’re typing, you make an innocent mistake.\n\nType: You will recieve\n\nYou type the offending word but haven’t yet pressed SPACE, which will cue Emacs to correct it.\n\nType: SPACE the materials you requested shortly.\n\nEmacs corrects the word automatically after you press SPACE; you need not stop typing or even be aware that a mistake has been made and corrected.\n\nBesides the convenience of being able to invent abbreviations for phrases that you frequently type, you can see that setting up a short list of abbreviations for common misspellings could reduce the time it takes to proofread files and reduce the number of common typing errors.\n\nWhen you define abbreviations, never use abbreviations that are words in their own right or Emacs may expand the word when you don’t want it to, since expansion takes place without asking. For example, if you frequently write about the World Association for Replicant Technology, don’t define an abbreviation of wart, or you won’t be able to write about the difficulties of handling toads. (If you use the word wart so infrequently that you think the convenience of the acronym warrants it, you can use ESC x unexpand-abbrev RETURN to have Emacs undo the abbreviation when you really want to type wart.)\n\nYou also have to realize that Emacs only knows the abbreviations exactly as you define them. If you define recieve as an abbreviation for receive, you must also define recieves, recieving, and recieved as abbreviations to cover all the forms of the word you might misspell.\n\nBefore you go ahead and define some abbreviations, there’s one more basic fact you should know. Emacs classifies abbreviations according to which modes they work in. Global abbreviations work in all modes; local abbreviations work only in the mode in which they were defined. For example, if you want abbreviations to work only in text mode and not in C mode, define them as local while you are in text mode. If you want abbreviations to work in any mode, define them as global. Remember: abbreviations are local to modes, not to files or buffers.\n\nEmacs also provides an inverse method for defining abbreviations. This method is called inverse because you type the abbreviation, and then the definition. Some commands (which we won’t discuss) let you type the definition and then the abbreviation, but they require some tricky key sequences to let Emacs know how many words preceding the cursor are part of the abbreviation. The inverse method is not only easier, it also works whether the definition for the abbreviation is one word or ten words."
    }
}