{
    "id": "dbpedia_3109_2",
    "rank": 54,
    "data": {
        "url": "https://github.com/jackocnr/intl-tel-input",
        "read_more_link": "",
        "language": "en",
        "title": "input: A JavaScript plugin for entering and validating international telephone numbers",
        "top_image": "https://repository-images.githubusercontent.com/10413050/d69f1200-a3e8-11e9-9edd-b65edba288cb",
        "meta_img": "https://repository-images.githubusercontent.com/10413050/d69f1200-a3e8-11e9-9edd-b65edba288cb",
        "images": [
            "https://camo.githubusercontent.com/628c266ef4c56ef10fceecee093e587ddf06d18bb7f8ce1636d33fe05617b46d/68747470733a2f2f6170702e7472617669732d63692e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742e7376673f6272616e63683d6d6173746572",
            "https://camo.githubusercontent.com/e2454f30f908e0b6e30164bca888e513f2cdc46ea2de7e4d8720889c7e4f7880/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a61636b6f636e722f696e746c2d74656c2d696e7075742e737667",
            "https://camo.githubusercontent.com/a8528e49c3e02f97b41e33309274086cb2a15e7ccba94775d78f76a95f0048d0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f696e746c2d74656c2d696e7075742e737667",
            "https://camo.githubusercontent.com/450c5edbf2f8938ba91a15a4456bb287996bfbca8fe1b7ecd32288af010bce05/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f72656163742e77656270",
            "https://camo.githubusercontent.com/141c9ba9cdea06a2fe464d0ef6623a55d95fc4e5c36f5b6e77d9671004300247/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f747970657363726970742e77656270",
            "https://camo.githubusercontent.com/ddf7e14d9c4d892f4d84bb171c8700895508285c55c60bcb0b875580f348fd27/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f76616e696c6c612d7365617263682e77656270",
            "https://camo.githubusercontent.com/0943b7b07bf46512fc60f523fef1f2afb99a0f04d43043439dc7b803b799e440/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f7477696c696f2e77656270",
            "https://camo.githubusercontent.com/8b4e994372694d07af65c7efe8998a443460624f0fd5eebae14b288fb41b1149/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f6d6f62696c652d66756c6c73637265656e2e6a7067",
            "https://camo.githubusercontent.com/06b6869c5e3e0043ba5bf8c15dfbbc56b316d6234f0c11e2ba59e7f43988382b/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f73657061726174654469616c436f6465322e77656270",
            "https://camo.githubusercontent.com/143968684bf4a1d8fa71f82489e4167f262d953a2d9ef9c4328d4eba28dbfde8/68747470733a2f2f7777772e62726f77736572737461636b2e636f6d2f696d616765732f6c61796f75742f62726f77736572737461636b2d6c6f676f2d363030783331352e706e67",
            "https://avatars.githubusercontent.com/u/74616745?s=64&v=4",
            "https://avatars.githubusercontent.com/u/117649538?s=64&v=4",
            "https://avatars.githubusercontent.com/u/160156737?s=64&v=4",
            "https://avatars.githubusercontent.com/u/87149450?s=64&v=4",
            "https://avatars.githubusercontent.com/u/177968611?s=64&v=4",
            "https://avatars.githubusercontent.com/u/169655820?s=64&v=4",
            "https://avatars.githubusercontent.com/u/66772936?s=64&v=4",
            "https://avatars.githubusercontent.com/u/97424263?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1186883?s=64&v=4",
            "https://avatars.githubusercontent.com/in/29110?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2874325?s=64&v=4",
            "https://avatars.githubusercontent.com/u/13033263?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3055294?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5350898?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25452313?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1140767?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1986478?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1735844?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6766530?s=64&v=4",
            "https://avatars.githubusercontent.com/u/9400869?s=64&v=4",
            "https://avatars.githubusercontent.com/u/8136211?s=64&v=4",
            "https://avatars.githubusercontent.com/u/153132?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A JavaScript plugin for entering and validating international telephone numbers - jackocnr/intl-tel-input",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/jackocnr/intl-tel-input",
        "text": "NEWS: we now have our own React component! Play with it on Storybook.\n\nNEWS: we now have our own Typescript type definitions, so no need to use @types/intl-tel-input anymore!\n\nüó£Ô∏è NEWS: we now provide translations in over 30 languages! See them in action.\n\nInternational Telephone Input is a JavaScript plugin for entering and validating international telephone numbers. It takes a regular input field, adds a searchable country dropdown, auto-detects the user's country, displays a relevant placeholder number, formats the number as you type, and provides comprehensive validation methods.\n\nIf you find the plugin helpful, please consider supporting the project.\n\nSponsored by\n\nUse Twilio's API to build phone verification, SMS 2FA, appointment reminders, marketing notifications and so much more. We can't wait to see what you build.\n\nJavaScript Plugin vs React Component\n\nDemo and Examples\n\nMobile\n\nFeatures\n\nBrowser Compatibility\n\nGetting Started\n\nRecommended Usage\n\nInitialisation Options\n\nInstance Methods\n\nStatic Methods\n\nEvents\n\nTheming / Dark Mode\n\nUtilities Script\n\nLoading The Utilities Script\n\nTroubleshooting\n\nContributing\n\nAttributions\n\nWe now provide both a JavaScript plugin and a React Component. This readme is for the JavaScript plugin. View the React Component readme.\n\nYou can view a live demo and see some examples of how to use the various options. Alternatively, try it for yourself by downloading the project and opening demo.html in a browser.\n\nBy default, on mobile devices we show a fullscreen popup instead of the inline dropdown, to make better use of the limited screen space. This is similar to how a native <select> element works. You can control this behaviour with the useFullscreenPopup option. The popup can be closed by either selecting a country from the list or by tapping on the grey area at the sides. See example (using the React component).\n\nAutomatically select the user's current country using an IP lookup\n\nAutomatically set the input placeholder to an example number for the selected country\n\nNavigate the country dropdown by typing a country's name, or using up/down keys\n\nAutomatically format the number as the user types\n\nOptionally only allow numeric characters and cap the number at the maximum valid length\n\nThe user types their national number and the plugin gives you the full standardised international number\n\nNumber validation, including specific error types\n\nHigh-resolution flag images\n\nAccessibility provided via ARIA tags\n\nTypescript type definitions included\n\nEasily customise styles by overriding CSS variables\n\nReact component included\n\nTranslations for country names (etc) provided for over 30 different languages\n\nLots of initialisation options for customisation, as well as instance methods/events for interaction\n\nChrome Firefox Safari Edge ‚úì ‚úì ‚úì ‚úì\n\nNote: We have now dropped support for all versions of Internet Explorer because it is no longer supported by any version of Windows.\n\nAdd the CSS\n\nAdd the plugin script and initialise it on your input element\n\nInstall with npm: npm install intl-tel-input --save or yarn: yarn add intl-tel-input\n\nImport the CSS: import 'intl-tel-input/build/css/intlTelInput.css';\n\nSet the path to flags.webp and globe.webp in your CSS, by overriding the CSS variables\n\nImport the JS and initialise the plugin on your input element\n\nDownload the latest release, or better yet install it with npm\n\nAdd the stylesheet\n\nSet the path to flags.webp and globe.webp in your CSS, by overriding the CSS variables\n\nAdd the plugin script and initialise it on your input element\n\nWe highly recommend you load the included utils.js, which enables formatting and validation etc. Then the plugin is built to always deal with numbers in the full international format (e.g. \"+17024181234\") and convert them accordingly - even when nationalMode or separateDialCode is enabled. We recommend you get, store, and set numbers exclusively in this format for simplicity - then you don't have to deal with handling the country code separately, as full international numbers include the country code information.\n\nYou can always get the full international number (including country code) using getNumber, then you only have to store that one string in your database (you don't have to store the country separately), and then the next time you initialise the plugin with that number in the input, it will automatically set the country and format it according to the options you specify (e.g. when using nationalMode it will automatically display the number in national format, removing the international dial code).\n\nIf you know the user's country, you can set it with initialCountry (e.g. \"us\" for the United States), and if you don't, we recommend setting initialCountry to \"auto\" (along with the geoIpLookup option) to determine the user's country based on their IP address - see example.\n\nIf you know the user's language, you can use the included translations to localise the country names (etc) - see example.\n\nWhen you initialise the plugin, the first argument is the input element, and the second is an object containing any initialisation options you want, which are detailed below. Note: any options that take country codes should be ISO 3166-1 alpha-2 codes.\n\nallowDropdown\n\nType: Boolean Default: true\n\nWhether or not to allow the dropdown. If disabled, there is no dropdown arrow, and the selected country is not clickable. Also, if showFlags is enabled we display the selected flag on the right instead because it is just a marker of state. Note that if separateDialCode is enabled, allowDropdown is forced to true as the dropdown is required when the user types \"+\" in this case. Play with this option on Storybook (using the React component).\n\nautoPlaceholder\n\nType: String Default: \"polite\"\n\nSet the input's placeholder to an example number for the selected country, and update it if the country changes. You can specify the number type using the placeholderNumberType option. By default it is set to \"polite\", which means it will only set the placeholder if the input doesn't already have one. You can also set it to \"aggressive\", which will replace any existing placeholder, or \"off\". Requires the utils script to be loaded.\n\ncontainerClass\n\nType: String Default: \"\"\n\nAdditional classes to add to the (injected) wrapper <div>.\n\ncountryOrder\n\nType: Array Default: null\n\nSpecify the ordering for the country list with an array of iso2 country codes. Any ommitted countries will appear after those specified e.g. setting countryOrder to [\"jp\", \"kr\"] will result in the list: Japan, South Korea, Afghanistan, Albanbia, Algeria etc...\n\ncountrySearch\n\nType: Boolean Default: true\n\nAdd a search input to the top of the dropdown, so users can filter the displayed countries.\n\ncustomPlaceholder\n\nType: Function Default: null\n\nChange the placeholder generated by autoPlaceholder. Must return a string.\n\ndropdownContainer\n\nType: Node Default: null\n\nExpects a node e.g. document.body. Instead of putting the country dropdown markup next to the input, append it to the specified node, and it will then be positioned next to the input using JavaScript (using position: fixed). This is useful when the input is inside a container with overflow: hidden. Note that the positioning is broken by scrolling, so the dropdown will automatically close on the window scroll event.\n\nexcludeCountries\n\nType: Array Default: []\n\nIn the dropdown, display all countries except the ones you specify here. Play with this option on Storybook (using the React component).\n\nfixDropdownWidth\n\nType: Boolean Default: true\n\nFix the dropdown width to the input width (rather than being as wide as the longest country name). Play with this option on Storybook (using the React component).\n\nformatAsYouType\n\nType: Boolean Default: true\n\nAutomatically format the number as the user types. This feature will be disabled if the user types their own formatting characters. Requires the utils script to be loaded.\n\nformatOnDisplay\n\nType: Boolean Default: true\n\nFormat the input value (according to the nationalMode option) during initialisation, and on setNumber. Requires the utils script to be loaded.\n\ngeoIpLookup\n\nType: Function Default: null\n\nWhen setting initialCountry to \"auto\", you must use this option to specify a custom function that calls an IP lookup service to get the user's location and then invokes the success callback with the relevant country code. Also note that when instantiating the plugin, a Promise object is returned under the promise instance property, so you can do something like iti.promise.then(...) to know when initialisation requests like this have completed.\n\nHere is an example using the ipapi service:\n\nNote that the failure callback must be called in the event of an error, hence the use of catch() in this example. Tip: store the result in a cookie to avoid repeat lookups!\n\nhiddenInput\n\nType: Function Default: null\n\nAllows the creation of hidden input fields within a form to store the full international telephone number and the selected country code. It accepts a function that receives the name of the main telephone input as an argument. This function should return an object with phone and (optionally) country properties to specify the names of the hidden inputs for the phone number and country code, respectively. This is useful for non-Ajax form submissions to ensure the full international number and country code are captured, especially when nationalMode is enabled.\n\n*Note: This feature requires the input to be inside a <form> element, as it listens for the submit event on the closest form element. Also note that since this uses getNumber internally, firstly it requires the utils script to be loaded, and secondly it expects a valid number and so will only work correctly if you have used isValidNumber to validate the number before allowing the form submit to go through.\n\nWhich will generate the following (hidden) elements, which will be automatically populated on submit:\n\ni18n\n\nType: Object Default: {}\n\nAllow localisation/customisation of the 200+ country names, as well as other user interface text (e.g. the country search input placeholder text). The easiest way to do this is to simply import one of the provided translation modules and set i18n to that (see option 1 below). You can also override one or more individual keys this way if you want (see option 1 below). Alternatively, you can provide your own custom translations (see option 2 below). If providing your own, you will need to specify all the country names (which can be copied from the country-list project e.g. here are the country names in French), as well as a few UI strings (listed below). See example.\n\nIf we don't currently support a language you need, it's easy to contribute this yourself - you only need to provide a handful of UI translation strings, as we automatically pull in the country names from the country-list project.\n\ninitialCountry\n\nType: String Default: \"\"\n\nSet the initial country selection by specifying its country code e.g. \"us\" for the United States. (Be careful not to do this unless you are sure of the user's country, as it can lead to tricky issues if set incorrectly and the user autofills their national number and submits the form without checking - in certain cases, this can pass validation and you can end up storing a number with the wrong dial code). You can also set initialCountry to \"auto\", which will look up the user's country based on their IP address (requires the geoIpLookup option - see example). Note that however you use initialCountry, it will not update the country selection if the input already contains a number with an international dial code.\n\nnationalMode\n\nType: Boolean Default: true\n\nFormat numbers in the national format, rather than the international format. This applies to placeholder numbers, and when displaying user's existing numbers. Note that it's fine for user's to type their numbers in national format - as long as they have selected the right country, you can use getNumber to extract a full international number - see example. It is recommended to leave this option enabled, to encourage users to enter their numbers in national format as this is usually more familiar to them and so it creates a better user experience.\n\nonlyCountries\n\nType: Array Default: []\n\nIn the dropdown, display only the countries you specify - see example.\n\nplaceholderNumberType\n\nType: String Default: \"MOBILE\"\n\nSpecify one of the keys from the enum intlTelInput.utils.numberType (e.g. \"FIXED_LINE\") to set the number type to use for the placeholder. Play with this option on Storybook (using the React component).\n\nshowFlags\n\nType: Boolean Default: true\n\nSet this to false to hide the flags e.g. for political reasons. Instead it will show a generic globe icon. Play with this option on Storybook (using the React component).\n\nseparateDialCode\n\nType: Boolean Default: false\n\nDisplay the selected country dial code next to the input, so it looks like it's part of the typed number, except it is uneditable. When enabled, typing a plus in the telephone input will open the country dropdown and enter the plus in the search input instead, to force the user to select a country from the list rather than typing their dial code in the telephone input. Play with this option on Storybook (using the React component).\n\nstrictMode\n\nType: Boolean Default: false\n\nAs the user types in the input, ignore any irrelevant characters. Basically, the user can only enter numeric characters, and an optional plus at the beginning. Cap the length at the maximum valid number length (this respects validationNumberType). Requires the utils script to be loaded. See example.\n\nuseFullscreenPopup\n\nType: Boolean Default: true on mobile devices, false otherwise\n\nControl when the country list appears as a fullscreen popup vs an inline dropdown. By default, it will appear as a fullscreen popup on mobile devices (based on user-agent and screen width), to make better use of the limited space (similar to how a native <select> works), and as an inline dropdown on larger devices/screens. Play with this option on Storybook (using the React component).\n\nutilsScript\n\nType: String Default: \"\" Example: \"/build/js/utils.js\"\n\nThis is one way to (lazy) load the included utils.js (to enable formatting/validation etc) - see Loading The Utilities Script for more options. You will need to host the utils.js file, and then set the utilsScript option to that URL, or alternatively just point it to a CDN hosted version e.g. \"https://cdn.jsdelivr.net/npm/intl-tel-input@23.8.1/build/js/utils.js\". The script is loaded via a dynamic import statement, which means the URL cannot be relative - it must be absolute. The script is only fetched when you initialise the plugin, and additionally, only when the page has finished loading (on the window load event) to prevent blocking (the script is ~260KB). When instantiating the plugin, a Promise object is returned under the promise instance property, so you can do something like iti.promise.then(callback) to know when initialisation requests like this have finished. See Utilities Script for more information.\n\nvalidationNumberType\n\nType: String Default: \"MOBILE\"\n\nSpecify one of the keys from the enum intlTelInput.utils.numberType (e.g. \"FIXED_LINE\") to set the number type to enforce during validation with isValidNumber, as well as the number length to enforce with strictMode. Set it to null to not enforce any particular type.\n\nIn these examples, iti refers to the plugin instance which gets returned when you initialise the plugin e.g.\n\ndestroy\n\nRemove the plugin from the input, and unbind any event listeners.\n\ngetExtension\n\nGet the extension from the current number. Requires the utils script to be loaded.\n\nReturns a string e.g. if the input value was \"(702) 555-5555 ext. 1234\", this would return \"1234\"\n\ngetNumber\n\nGet the current number in the given format (defaults to E.164 standard). The different formats are available in the enum intlTelInput.utils.numberFormat - which you can see here. Requires the utils script to be loaded. Note that even if nationalMode is enabled, this can still return a full international number. Also note that this method expects a valid number, and so should only be used after validation.\n\nReturns a string e.g. \"+17024181234\"\n\ngetNumberType\n\nGet the type (fixed-line/mobile/toll-free etc) of the current number. Requires the utils script to be loaded.\n\nReturns an integer, which you can match against the various options in the enum intlTelInput.utils.numberType e.g.\n\nNote that in the US there's no way to differentiate between fixed-line and mobile numbers, so instead it will return FIXED_LINE_OR_MOBILE.\n\ngetSelectedCountryData\n\nGet the country data for the currently selected country.\n\nReturns something like this:\n\ngetValidationError\n\nGet more information about a validation error. Requires the utils script to be loaded.\n\nReturns an integer, which you can match against the various options in the enum intlTelInput.utils.validationError e.g.\n\nisValidNumber\n\nCheck if the current number is valid based on its length - see example, which should be sufficient for most use cases. See isValidNumberPrecise for more precise validation, but the advantage of isValidNumber is that it is much more future-proof as while countries around the world regularly update their number rules, they very rarely change their number lengths. If this method returns false, you can use getValidationError to get more information. Respects the validationNumberType option (which is set to \"MOBILE\" by default). Requires the utils script to be loaded.\n\nReturns: true/false\n\nisValidNumberPrecise\n\nCheck if the current number is valid using precise matching rules for each country/area code etc - see example. Note that these rules change each month for various countries around the world, so you need to be careful to keep the plugin up-to-date else you will start rejecting valid numbers. For a simpler and more future-proof form of validation, see isValidNumber above. If validation fails, you can use getValidationError to get more information. Requires the utils script to be loaded.\n\nReturns: true/false\n\nsetCountry\n\nChange the selected country. It should be rare, if ever, that you need to do this, as the selected country gets updated automatically when calling setNumber and passing a number including an international dial code, which is the recommended usage. Note you can omit the country code argument to set the country to the default empty (globe) state.\n\nsetNumber\n\nInsert a number, and update the selected country accordingly. Note that if formatOnDisplay is enabled, this will attempt to format the number to either national or international format according to the nationalMode option.\n\nsetPlaceholderNumberType\n\nChange the placeholderNumberType option.\n\nsetDisabled\n\nUpdates the disabled attribute of both the telephone input and selected country button. Accepts a boolean value. Note: we recommend using this instead of updating the disabled attribute of the input directly.\n\ngetCountryData\n\nRetrieve the plugin's country data - either to re-use elsewhere e.g. to generate your own country dropdown - see example, or alternatively, you could use it to modify the country data. Note that any modifications must be done before initialising the plugin.\n\nReturns an array of country objects:\n\ngetInstance\n\nAfter initialising the plugin, you can always access the instance again using this method, by just passing in the relevant input element.\n\nloadUtils\n\nAn alternative to the utilsScript option, this method lets you manually load the utils.js script on demand, to enable formatting/validation etc. See Loading The Utilities Script for more information. This method should only be called once per page. A Promise object is returned so you can use loadUtils().then(callback) to know when it's finished.\n\nYou can listen for the following events on the input.\n\ncountrychange\n\nThis is triggered when the selected country is updated e.g. if the user selects a country from the dropdown, or they type a different dial code into the input, or you call setCountry etc.\n\nSee an example here: Country sync\n\nopen:countrydropdown\n\nThis is triggered when the user opens the dropdown.\n\nclose:countrydropdown\n\nThis is triggered when the user closes the dropdown.\n\nThere are lots of CSS variables available for theming. See intlTelInput.scss for a list.\n\nNote that it's easy to re-generate the globe icon in whatever colour you need for your theme. I recommend you download it in the highest resolution, and then scale the image down to the required sizes (20px wide for globe.webp and 40px wide for globe@2x.webp).\n\nDark mode example:\n\nNOTE: this assumes you already have your own dark mode styling in place for general body/input styling e.g. something like this:\n\nThe utilities script (build/js/utils.js) is a custom build of Google's libphonenumber which enables the following features:\n\nFormatting upon initialisation, as well as with getNumber and setNumber\n\nValidation with isValidNumber, getNumberType and getValidationError methods\n\nPlaceholder set to an example number for the selected country - even specify the type of number (e.g. mobile) using the placeholderNumberType option\n\nExtract the standardised (E.164) international number with getNumber even when using the nationalMode option\n\nInternational number formatting/validation is hard (it varies by country/district, and we currently support ~230 countries). The only comprehensive solution we have found is libphonenumber, from which we have precompiled the relevant parts into a single JavaScript file and included in the build directory. Unfortunately, even after modification, it is still ~260KB. See the section below on the best way to load it.\n\nTo recompile the utils script yourself (e.g. to update the version of libphonenumber it is built from), see the contributing guide.\n\nThe utils script provides lots of great functionality (see above section), but comes at the cost of increased filesize (~260KB). There are two main ways to load the utils script, depending on whether you're concerned about filesize or not.\n\nOption 1: intlTelInputWithUtils\n\nIf you're not concerned about filesize (e.g. you're lazy loading this script), the easiest thing to do is to just use the full bundle /build/js/intlTelInputWithUtils.js, which comes with the utils script included. This script can be used exactly like the main intlTelInput.js - so it can either be loaded directly onto the page (which defines window.intlTelInput like usual), or it can be imported like so: import intlTelInput from \"intl-tel-input/intlTelInputWithUtils\".\n\nOption 2: utilsScript\n\nIf you are concerned about filesize, you can lazy load the utils script when the plugin intitialises, using the utilsScript initialisation option. You will need to host the utils.js file, and then set the utilsScript option to that URL, or alternatively just point it to a CDN hosted version e.g. \"https://cdn.jsdelivr.net/npm/intl-tel-input@23.8.1/build/js/utils.js\". If you want more control over when this file is lazy loaded, you can manually invoke the loadUtils static method, instead of using utilsScript.\n\nFull width input\n\nIf you want your input to be full-width, you need to set the container to be the same i.e.\n\ndropdownContainer: dropdown not closing on scroll\n\nIf you have a scrolling container other than window which is causing problems by not closing the dropdown on scroll, simply listen for the scroll event on that element, and trigger a scroll event on window, which in turn will close the dropdown e.g.\n\nInput margin\n\nFor the sake of alignment, the default CSS forces the input's vertical margin to 0px. If you want vertical margin, you should add it to the container (with class iti).\n\nDisplaying error messages\n\nIf your error handling code inserts an error message before the <input> it will break the layout. Instead you must insert it before the container (with class iti).\n\nDropdown position\n\nThe dropdown should automatically appear above/below the input depending on the available space. For this to work properly, you must only initialise the plugin after the <input> has been added to the DOM.\n\nPlaceholders\n\nIn order to get the automatic country-specific placeholders, simply omit the placeholder attribute on the <input>, or set autoPlaceholder to \"aggressive\" to override any existing placeholder,\n\nBootstrap input groups\n\nA couple of CSS fixes are required to get the plugin to play nice with Bootstrap input groups. You can see a Codepen here.\n\nNote: there is currently a bug in Mobile Safari which causes a crash when you click the dropdown arrow (a CSS triangle) inside an input group. The simplest workaround is to remove the CSS triangle with this line:\n\nSee the contributing guide for instructions on setting up the project and making changes, and also for how to update to a new version of libphonenumber, how to update the flag images, or how to add a new translation.\n\nFlag images from region-flags\n\nOriginal country data from mledoze's World countries in JSON, CSV and XML\n\nFormatting/validation/example number code from libphonenumber\n\nFeature contributions are listed in the wiki: Contributions\n\nLinks\n\nList of integrations with intl-tel-input"
    }
}