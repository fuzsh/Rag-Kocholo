{
    "id": "dbpedia_3237_0",
    "rank": 43,
    "data": {
        "url": "https://stackoverflow.com/questions/4565700/how-to-specify-the-private-ssh-key-to-use-when-executing-shell-command-on-git",
        "read_more_link": "",
        "language": "en",
        "title": "How to specify the private SSH-key to use when executing shell command on Git?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/94dea02770bfefa01a08fa848c7d622b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/e6f13ebbdbfaab45b1e51cd94ba1e290?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/5oQlf.png?s=64",
            "https://www.gravatar.com/avatar/b07e4ca39cc72e4524c18e5ad581be28?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1a71658d81f8a82a8122050f21bb86d3?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/4120f8013873d744b07ffb4615feb2dc?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/5026f5975606c389bbb6831d20826cb0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/529a6049c4ad4483dbc62add6da06e1a?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/I4fiW.jpg?s=64",
            "https://i.sstatic.net/RPTng.jpg?s=64",
            "https://www.gravatar.com/avatar/a6e329efbf7cdfd89d8f1f5b5d05896d?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/R0r8D.jpg?s=64",
            "https://i.sstatic.net/acYd0.png?s=64",
            "https://www.gravatar.com/avatar/36a4c00b41f48b9bedd87234c85aad11?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=64",
            "https://i.sstatic.net/ZgB8L.jpg?s=64",
            "https://www.gravatar.com/avatar/89b9541e85fd0534e3871ad790e651f1?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/di0NG.png?s=64",
            "https://www.gravatar.com/avatar/2c6de59861dd637cb39360c286ea0817?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/941346a6766f723fe6ddc2b3175f256d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/82464ccd9bba99814041e258630cfda0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/936383b387d6cc6d51279e429e5d7cd9?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/60d2823f63ddd4de8742be5a36d74565?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/u6xm6.jpg?s=64",
            "https://i.sstatic.net/dOVAe.jpg?s=64",
            "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/obknF.jpg?s=64",
            "https://www.gravatar.com/avatar/dc03bb85ab7a070b2e339e3cb84815af?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/2axj3.png?s=64",
            "https://www.gravatar.com/avatar/107522343c9ed3b01cdc0d3eece92241?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d73c4c5462f766bd18f3b1873e745841?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/04d03c3d3d315717927d3634f6a5a6a6?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1e32c4ecea2637ed8915da70fca390a8?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/9wqDz.jpg?s=64",
            "https://lh4.googleusercontent.com/-ReXa4gEmIVs/AAAAAAAAAAI/AAAAAAAAD6A/nSGK-7h7Or4/photo.jpg?sz=64",
            "https://lh6.googleusercontent.com/-ZIG43NDeCwE/AAAAAAAAAAI/AAAAAAAAAVc/QImMCtmMqy8/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/7ea76ae7af9d09d674b1f7a86a79cac7?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://graph.facebook.com/2299107603473520/picture?type=large",
            "https://graph.facebook.com/100000193484198/picture?type=large",
            "https://www.gravatar.com/avatar/dee5ddf990c52ed241ba124a7c300621?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/4565700/ivc/5cc9?prg=5676a50f-c671-4088-8482-f97d1f50d6c7"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-12-30T19:42:01",
        "summary": "",
        "meta_description": "A rather unusual situation perhaps, but I want to specify a private SSH-key to use when executing a shell (git) command from the local computer.\nBasically like this:\ngit clone git@github.com:TheUser/",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/4565700/how-to-specify-the-private-ssh-key-to-use-when-executing-shell-command-on-git",
        "text": "None of these solutions worked for me.\n\nInstead, I elaborate on @Martin v. Löwis 's mention of setting a config file for SSH.\n\nSSH will look for the user's ~/.ssh/config file. I have mine setup as:\n\nHost gitserv Hostname remote.server.com IdentityFile ~/.ssh/id_rsa.github IdentitiesOnly yes # see NOTES below AddKeysToAgent yes\n\nAnd I add a remote git repository:\n\ngit remote add origin git@gitserv:myrepo.git\n\n(or clone a fresh copy of the repo with git@gitserv:myrepo.git as address)\n\nAnd then git commands work normally for me.\n\ngit push -v origin master\n\nIf you have submodules, you can also execute the following in the repo directory, to force the submodules to use the same key:\n\ngit config url.git@gitserv:.insteadOf https://remote.server.com\n\nNOTES\n\nThe IdentitiesOnly yes is required to prevent the SSH default behavior of sending the identity file matching the default filename for each protocol. If you have a file named ~/.ssh/id_rsa that will get tried BEFORE your ~/.ssh/id_rsa.github without this option.\n\nAddKeysToAgent yes lets you avoid reentering the key passphrase every time.\n\nYou can also add User git to avoid writing git@ every time.\n\nReferences\n\nBest way to use multiple SSH private keys on one client\n\nHow could I stop ssh offering a wrong key\n\nSomething like this should work (suggested by orip):\n\nssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone [email protected]:user/project.git'\n\nif you prefer subshells, you could try the following (though it is more fragile):\n\nssh-agent $(ssh-add /somewhere/yourkey; git clone [email protected]:user/project.git)\n\nGit will invoke SSH which will find its agent by environment variable; this will, in turn, have the key loaded.\n\nAlternatively, setting HOME may also do the trick, provided you are willing to setup a directory that contains only a .ssh directory as HOME; this may either contain an identity.pub, or a config file setting IdentityFile.\n\nWith git 2.10+ (Q3 2016: released Sept. 2d, 2016), you have the possibility to set a config for GIT_SSH_COMMAND (and not just an environment variable as described in Rober Jack Will's answer)\n\nSee commit 3c8ede3 (26 Jun 2016) by Nguyễn Thái Ngọc Duy (pclouds).\n\n(Merged by Junio C Hamano -- gitster -- in commit dc21164, 19 Jul 2016)\n\nA new configuration variable core.sshCommand has been added to specify what value for GIT_SSH_COMMAND to use per repository.\n\ncore.sshCommand:\n\nIf this variable is set, git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system.\n\nThe command is in the same form as the GIT_SSH_COMMAND environment variable and is overridden when the environment variable is set.\n\nIt means the git pull can be:\n\ncd /path/to/my/repo/already/cloned git config core.sshCommand 'ssh -i private_key_file' # later on git pull\n\nWhen cloning a new repo, where there is not yet any .git/config to modify, can first set it for just one command like git clone or git submodule add:\n\ngit -c core.sshCommand=\"ssh -i private_key_file\" clone host:repo.git\n\nOnce the repo exists you can set the option permanently in the .git/config:\n\ncd <repo or submodule you just cloned> git config core.sshCommand \"ssh -i private_key_file\"\n\nThis is easier than setting a GIT_SSH_COMMAND environment variable, which, on Windows, as noted by Mátyás Kuti-Kreszács, would be\n\nset \"GIT_SSH_COMMAND=ssh -i private_key_file\"\n\nFor all those commands, you can add a -o IdentitiesOnly=yes to limit SSH to the the private/public key you are specifying:\n\ngit config core.sshCommand 'ssh -i private_key_file -o IdentitiesOnly=yes' # or git -c core.sshCommand=\"ssh -i private_key_file -o IdentitiesOnly=yes\" clone host:repo.git # or set \"GIT_SSH_COMMAND=ssh -i private_key_file -o IdentitiesOnly=yes\"\n\ngsullins suggests in the comments to adds to the .zshrc the following alias:\n\nalias git.key1=\"git config core.sshCommand 'ssh -i <absolute path to private key>'\"\n\nAs noted by Jaredo Mills in a comment:\n\nOne pitfall: if you mirror your repo to more than one host (Github, Gitlab), with different private keys, this method will send the wrong key.\n\nThe key is not associated with the repo, but with a username and hostname. ~/.ssh/config is the right place to get the association right, and it has the right matching capabilities for the job (see man ssh_config).\n\nSee HeyWatchThis's answer for illustration.\n\nTo sum up answers and comments, the best way to set up git to use different key files and then forget about it, which also supports different users for the same host (e.g. a personal GitHub account and a work one), which works on Windows as well, is to edit ~/.ssh/config (or c:\\Users\\<your user>\\.ssh\\config) and specify multiple identities:\n\nHost github.com HostName github.com IdentityFile /path/to/your/personal/github/private/key User dandv Host github-work HostName github.com IdentityFile /path/to/your/work/github/private/key User workuser\n\nThen, to clone a project as your personal user, just run the regular git clone command.\n\nTo clone the repo as the workuser, run git clone git@github-work:company/project.git.\n\nThe fastest and simplest way of doing it is by:\n\nClone your repo with ssh:\n\ngit -c core.sshCommand=\"ssh -i ~/.ssh/<your_key>\" clone [email protected]:<user>/<repo>.git\n\nthen cd into you cloned repo and:\n\ngit config core.sshCommand 'ssh -i ~/.ssh/<your_key>'\n\nTo test it's working:\n\ngit --git-dir=/path/to/repo/.git pull\n\nSo you may wonder: why my created ssh key does not work after I planted the .pub in github and the private is in the default directory?\n\nThe documentation gives us a command that clarifies the issue: ssh -vT [email protected]\n\nThe output shows a list of ssh keys names git looks for. So, you may want to create your key with one of those names, or use the above process to include the one you need.\n\nIf none of the other solutions here work for you, and you have created multiple ssh-keys, but still cannot do simple things like\n\ngit pull\n\nthen assuming you have two ssh key files like\n\nid_rsa id_rsa_other_key\n\nthen inside of the git repo, try:\n\n# Run these commands INSIDE your git directory eval `ssh-agent -s` ssh-add ~/.ssh/id_rsa ssh-add ~/.ssh/id_rsa_other_key\n\nand also make sure your github default username and userid are correct by:\n\n# Run these commands INSIDE your git directory git config user.name \"Mona Lisa\" git config user.email \"[email protected]\"\n\nSee https://gist.github.com/jexchan/2351996 for more more information.\n\n2021. If you're on a Mac.\n\nSay you have an ubuntu server on aws, which you normally connect to like this:\n\n% ssh -i blah/yourkeypair.pem [email protected]\n\nIn terminal just\n\n% export GIT_SSH_COMMAND=\"ssh -i /Users/fattie/Desktop/blah/yourkeypair.pem\"\n\nAfter you have done that. You can then freely ...\n\n% git clone [email protected]:/home/ubuntu/teste.git\n\nThat will clone the repo on your server to your local folder \"teste\",\n\nyou can then freely when in teste/ do the usual commands such as ...\n\n% git push origin master\n\nand so on.\n\n--\n\nNote also: https://stackoverflow.com/a/67287133/294884\n\nAs for on the server, it seems you basically\n\n] git clone --bare the-actual-folder teste.git\n\nand then in teste.git\n\n] git init --bare --shared\n\nMany of these solutions looked enticing. However, I found the generic git-wrapping-script approach at the following link to be the most useful:\n\nHow to Specify an ssh Key File with the git command\n\nThe point being that there is no git command such as the following:\n\ngit -i ~/.ssh/thatuserkey.pem clone [email protected]:/git/repo.git\n\nAlvin's solution is to use a well-defined bash-wrapper script that fills this gap:\n\ngit.sh -i ~/.ssh/thatuserkey.pem clone [email protected]:/git/repo.git\n\nWhere git.sh is:\n\n#!/bin/bash # The MIT License (MIT) # Copyright (c) 2013 Alvin Abad # https://alvinabad.wordpress.com/2013/03/23/how-to-specify-an-ssh-key-file-with-the-git-command if [ $# -eq 0 ]; then echo \"Git wrapper script that can specify an ssh-key file Usage: git.sh -i ssh-key-file git-command \" exit 1 fi # remove temporary file on exit trap 'rm -f /tmp/.git_ssh.$$' 0 if [ \"$1\" = \"-i\" ]; then SSH_KEY=$2; shift; shift echo \"ssh -i $SSH_KEY \\$@\" > /tmp/.git_ssh.$$ chmod +x /tmp/.git_ssh.$$ export GIT_SSH=/tmp/.git_ssh.$$ fi # in case the git command is repeated [ \"$1\" = \"git\" ] && shift # Run the git command git \"$@\"\n\nI can verify that this solved a problem I was having with user/key recognition for a remote bitbucket repo with git remote update, git pull, and git clone; all of which now work fine in a cron job script that was otherwise having trouble navigating the limited-shell. I was also able to call this script from within R and still solve the exact same cron execute problem (e.g. system(\"bash git.sh -i ~/.ssh/thatuserkey.pem pull\")).\n\nNot that R is the same as Ruby, but if R can do it... O:-)\n\nA lot of good answers, but some of them assume prior administration knowledge.\n\nI think it is important to explicitly emphasize that if you started your project by cloning the web URL - https://github.com/<user-name>/<project-name>.git\n\nthen you need to make sure that the url value under [remote \"origin\"] in the .git/config was changed to the SSH URL (see code block below).\n\nWith addition to that make sure that you add the sshCommmand as mentioned below:\n\nuser@workstation:~/workspace/project-name/.git$ cat config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true sshCommand = ssh -i ~/location-of/.ssh/private_key -F /dev/null <--Check that this command exist [remote \"origin\"] url = [email protected]:<user-name>/<project-name>.git <-- Make sure its the SSH URL and not the WEB URL fetch = +refs/heads/*:refs/remotes/origin/* [branch \"master\"] remote = origin merge = refs/heads/master\n\nRead more about it here.\n\nMost of the answers given here do not explain the details for the most basic usage.\n\nAfter you have setup a server (in this case a linux server) in the cloud, you connect to it using ssh from the terminal.\n\nFrom your computer, add the private key dyson-ubuntu-vm.pem which is given to you by your cloud services provider such as Azure, AWS etc to your .ssh configuration on your local machine like this:\n\nCopy the .pem file to the /home/ssenyonjo/.ssh folder, then open /home/ssenyonjo/.ssh/config file and add the following entry:\n\nHost 20.85.213.44 HostName 20.85.213.44 User Dyson IdentityFile /home/ssenyonjo/.ssh/dyson-ubuntu-vm.pem IdentitiesOnly yes\n\nNow from your terminal, access the cloud linux server like so:\n\nssh [email protected]\n\nWhen that works, create a git project on the cloud server like so:\n\nDyson@dyson-ubuntu-vm:~/projects$ git init --bare s2\n\nNow come back to your local machine and clone that empty repository like so:\n\nssenyonjo@ssenyonjo-pc:~/Projects/mastering-git$ git clone ssh://[email protected]/home/Dyson/projects/s2\n\nIf you see an error that looks something like: fatal: Could not read from remote repository, It means you're accessing the wrong folder. Ensure you have outlined the right path from the root to the created repository.\n\nIf you dont want to setup a config file but want to access the ssh server that requires a key, you can use below command:\n\nGIT_SSH_COMMAND='ssh -i ~/Projects/aws/keys/aws_ubuntu.pem' git clone ssh://[email protected]/home/ubuntu/projects/mastering-git/rand\n\nYou can export the command to continue using it for other tasks like git push and git pull\n\nexport GIT_SSH_COMMAND='ssh -i ~/Projects/aws/keys/aws_ubuntu.pem'\n\nSee: https://stackoverflow.com/a/29754018/10030693\n\nThe problem with this method is, at least when running by bash.exe on Windows, that it will create a new process every time which will remain dormant.\n\nssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone [email protected]:user/project.git'\n\nIf you want want to use that for syncig repo on schedule then you need to add \"&& ssh-agent -k\" at the end.\n\nSomething like:\n\nssh-agent bash -c 'ssh-add C:/Users/user/.ssh/your_key; git -C \"C:\\Path\\to\\your\\repo\" pull && ssh-agent -k'\n\nssh-agent -k will kill the process when it's done."
    }
}