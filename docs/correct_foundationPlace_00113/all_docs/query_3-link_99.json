{
    "id": "correct_foundationPlace_00113_3",
    "rank": 99,
    "data": {
        "url": "https://docs.unity3d.com/ScriptReference/Application.OpenURL.html",
        "read_more_link": "",
        "language": "en",
        "title": "Scripting API: Application.OpenURL",
        "top_image": "https://unity3d.com/files/images/ogimg.jpg",
        "meta_img": "https://unity3d.com/files/images/ogimg.jpg",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Unity Technologies"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://unity.com/themes/contrib/unity_base/images/favicons/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This is handled in different ways depending on the nature of the URL, and with different security restrictions, depending on the runtime platform.\n\nNote: This method can be used to open more than just web pages; therefore, it has important security implications you must be aware of.\n\nMost commonly, this method is used to open HTTP (web page) URLs. If you provide a web page address as the parameter for this method, the web page is opened in the default browser. It will also bring the browser application to the front.\n\nAs well as the HTTP protocol used for web page addresses, there are other types of protocols that you can use in a URL, such as file transfer (FTP), email (mailto), database access (JDBC), and others specific to certain platforms. On some platforms you can use OpenURL in Unity to do many different types of tasks.\n\nFor this reason, the OpenURL command can be unexpectedly powerful. On some platforms it can open local files, run commands, or open connections over any protocol that the platform and security sandbox supports.\n\nThe OpenURL method runs with the same permissions as your app itself. For example, if your app is running as a WebGL player in a desktop web browser, it will not be able to access local files on the machine, because the WebGL platform itself runs inside a security sandbox which prevents that. If you are targeting other platforms such as standalone EXE app, your app runs with fewer security restrictions and no security sandbox, so this method is more powerful.\n\nImportant: You must be extremely careful that you do not provide a string to this function which could possibly be maliciously crafted or modified by a third party.\n\nOn standalone platforms, you should consider this method to have similar security implications as an eval type function, present in many other programming languages.\n\nIf your app uses OpenURL to open URL strings which come from a third party, or which are put together using any user-supplied data, the user-supplied data should be considered untrusted and may be used to run arbitrary code under the same permissions of your app itself. You must sanitise the untrusted data and validate that it is the expected input for your application.\n\n_WebGL: From version 2019.4.25f1, 2020.3.5f1, 2021.1.2f1, and 2021.2.0a11, Application.OpenURL opens the URL in a new browser tab. In previous versions,Application.OpenURL opens the URL in the same browser tab, which terminates the active Unity application. To customize this behavior for any version, implement your own open URL function with a custom .jslib and C# method instead of using Application.OpenURL. Refer to Interaction with browser scripting for more information and examples.\n\nAndroid: Due to security changes in Android 7.0 (More information), Application.OpenURL can no longer be used for opening local app files, you need to use (FileProvider) which allows you to share files with other applications.\n\niOS: Application.OpenURL cannot be used for opening local files.\n\nExample:"
    }
}