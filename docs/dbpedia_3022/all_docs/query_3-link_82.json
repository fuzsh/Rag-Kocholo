{
    "id": "dbpedia_3022_3",
    "rank": 82,
    "data": {
        "url": "http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization",
        "read_more_link": "",
        "language": "en",
        "title": "Be Awesome in ggplot2: A Practical Guide to be Highly Effective",
        "top_image": "http://www.sthda.com/english/logo_200px_fb_sharing.png",
        "meta_img": "http://www.sthda.com/english/logo_200px_fb_sharing.png",
        "images": [
            "http://www.sthda.com/english/images/stats/countries/fr.png",
            "http://www.sthda.com/english/images/stats/countries/uk.png",
            "http://i.creativecommons.org/l/by-nc-sa/3.0/fr/88x31.png",
            "http://www.sthda.com/english/wiki/wiki_mini.png",
            "http://www.sthda.com/english/wiki/wiki_mini.png",
            "http://www.sthda.com/english/wiki/wiki_mini.png",
            "http://www.sthda.com/english/wiki/wiki_mini.png",
            "http://www.sthda.com/english/wiki/wiki_mini.png",
            "http://www.sthda.com/english/upload/r-graphics-essentials-cookbook-200.png",
            "http://www.sthda.com/english/upload/practical-guide-to-cluster-analysis-in-r.jpg",
            "http://www.sthda.com/english/sthda-upload/images/principal-component-methods-cover-200px.png",
            "http://www.sthda.com/sthda/RDoc/images/3d-graphic-cover.png",
            "http://www.sthda.com/english/web/web_mini.png",
            "http://www.sthda.com/english/web/web_mini.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/affiliate-marketing/images/ggplot2-book.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plots-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plots-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plot-color-shape-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-box-plot-violin-dot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-box-plot-violin-dot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-box-plot-violin-dot-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-histogram-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-histogram-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-stats-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-stats-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-5.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-6.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-7.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-one-continuous-variable-8.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_area-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_area-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-area-plot-customize-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_dotplot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_dotplot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_dotplot-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_dotplot-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_freqpoly-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_freqpoly-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_freqpoly-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_histogram-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_histogram-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_histogram-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-stat_ecdf-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-stat_qq-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-discrete-variable-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-discrete-variable-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-5.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-two-continuous-variable-6.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_point-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_point-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_point-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_point-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_smooth-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_smooth-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_smooth-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_smooth-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_quantile-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_rug-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_jitter-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_jitter-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_text-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_text-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-Continuous-bivariate-distribution-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-Continuous-bivariate-distribution-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-Continuous-bivariate-distribution-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bin2d-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bin2d-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_hex-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_hex-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density_2d-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density_2d-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_density_2d-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-continuous-function-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-continuous-function-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-continuous-function-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-5.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-continuous-y-6.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-multiple-group-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_boxplot-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_violin-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_violin-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_violin-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_violin-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_violin-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-combine-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-combine-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-combine-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_strip-charts-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_strip-charts-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_jitter-combine-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_jitter-combine-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_jitter-combine-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_jitter-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_line-multiple-groups-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_line-multiple-groups-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_line-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-multiple-groups-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_bar-multiple-groups-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_bar-logo-data-visualization-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-discrete-x-discrete-y-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-error-bars-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-error-bars-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-error-bars-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-graphics-error-bars-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_crossbar-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_crossbar-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_crossbar-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_crossbar-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_crossbar-multiple-groups-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_crossbar-multiple-groups-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_crossbar-multiple-groups-2-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_error-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_error-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_error-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_errorbar-multiple-groups-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_errorbar-logo-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_errorbar-logo-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_errorbarh-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_errorbarh-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_linerange-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_linerange-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-error-bar-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-error-bar-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_dotplot-error-bar-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_map-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2_tile-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-pie-chart-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-ggplot2-survival-curves-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_polygon-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_path-geom_ribbon-geom_rect-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_path-geom_ribbon-geom_rect-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_path-geom_ribbon-geom_rect-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_segment-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_segment-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_curve-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-title-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-title-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-color-size-face-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-color-size-face-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-legend-titles-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-legend-titles-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-position-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-position-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-position-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-position-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-item-order-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-legend-item-order-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-unique-color-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-unique-color-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-group-color-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-group-color-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-manual-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-manual-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-group-color-rcolorbrewer-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-group-color-rcolorbrewer-2.png",
            "http://www.sthda.com/sthda/RDoc/images/rcolorbrewer.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-grey-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-grey-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-gradient-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-gradient-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-color-gradient-3.png",
            "http://www.sthda.com/sthda/RDoc/images/points-symbols.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-point-shape-scatter-plot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-point-shape-scatter-plot-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scatter-plot-multiple-groups-manual-scale-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_text-appearance-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-geom_text-appearance-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-line-type-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-basic-line-plot-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-line-plot-multiple-groups-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-multiple-groups-manual-scale-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-gray-theme-bw-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-gray-theme-bw-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-linedraw-theme-light-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-linedraw-theme-light-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-minimal-theme-classic-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-theme-minimal-theme-classic-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-limits-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-limits-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-limits-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-limits-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-transformations-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-transformations-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-transformations-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-axis-transformations-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-color-size-face-angle-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-color-size-face-angle-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-the-order-of-items-discrete-axis-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-the-order-of-items-discrete-axis-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-change-the-order-of-items-discrete-axis-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-continuous-axis-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-continuous-axis-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-scale-continuous-axis-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-straight-line-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-straight-line-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-straight-line-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-straight-line-4.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coord_flip-scale_y_reverse-histogram-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coord_flip-scale_y_reverse-histogram-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coord_flip-scale_y_reverse-histogram-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-basic-boxplot-facets-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-facet-with-one-variable-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-facet-with-one-variable-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-facet-with-two-variable-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-facet-with-two-variable-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-position-adjustements-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-position-adjustements-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-position-adjustements-2-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-position-adjustements-2-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-position-adjustements-3-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coordinate-system-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coordinate-system-2.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coordinate-system-3.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coordinate-system-2-1.png",
            "http://www.sthda.com/sthda/RDoc/figure/ggplot2/ggplot2-cheatsheet-coordinate-system-2-2.png",
            "http://www.sthda.com/sthda/RDoc/images/ggplot2_cover.png",
            "http://www.sthda.com/english/upload/machine-learning-essentials-frontcover-200px.png",
            "http://www.sthda.com/english/upload/practical-guide-to-cluster-analysis-in-r.jpg",
            "http://www.sthda.com/english/sthda-upload/images/principal-component-methods-cover-200px.png",
            "http://www.sthda.com/english/upload/r-graphics-essentials-cookbook-100.png",
            "http://www.sthda.com/english/upload/network-analysis-and-visualization-in-r-200px.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Statistical tools for data analysis and visualization",
        "meta_lang": "en",
        "meta_favicon": "/english/logo.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Home\n\nExplorer\n\nBe Awesome in ggplot2: A Practical Guide to be Highly Effective - R software and data visualization\n\nBasics\n\nggplot2 is a powerful and a flexible R package, implemented by Hadley Wickham, for producing elegant graphics. The gg in ggplot2 means Grammar of Graphics, a graphic concept which describes plots by using a “grammar”.\n\nAccording to ggplot2 concept, a plot can be divided into different fundamental parts : Plot = data + Aesthetics + Geometry.\n\nThe principal components of every plot can be defined as follow:\n\ndata is a data frame\n\nAesthetics is used to indicate x and y variables. It can also be used to control the color, the size or the shape of points, the height of bars, etc…..\n\nGeometry corresponds to the type of graphics (histogram, box plot, line plot, density plot, dot plot, ….)\n\nTwo main functions, for creating plots, are available in ggplot2 package : a qplot() and ggplot() functions.\n\nqplot() is a quick plot function which is easy to use for simple plots.\n\nThe ggplot() function is more flexible and robust than qplot for building a plot piece by piece.\n\nThe generated plot can be kept as a variable and then printed at any time using the function print().\n\nAfter creating plots, two other important functions are:\n\nlast_plot(), which returns the last plot to be modified\n\nggsave(“plot.png”, width = 5, height = 5), which saves the last plot in the current working directory.\n\nThis document describes how to create and customize different types of graphs using ggplot2. Many examples of code and graphics are provided.\n\nRelated Book:\n\nGGPlot2 Essentials for Great Data Visualization in R\n\nTypes of graphs for data visualization\n\nThe type of plots, to be created, depends on the format of your data. The ggplot2 package provides methods for visualizing the following data structures:\n\nOne variable - x: continuous or discrete\n\nTwo variables - x & y: continuous and/or discrete\n\nContinuous bivariate distribution - x & y (both continuous)\n\nContinuous function\n\nError bar\n\nMaps\n\nThree variables\n\nIn the current document we’ll provide the essential ggplot2 functions for drawing each of these seven data formats.\n\nInstall and load ggplot2 package\n\nUse the R code below:\n\n# Installation install.packages('ggplot2') # Loading library(ggplot2)\n\nData format and preparation\n\nThe data should be a data.frame (columns are variables and rows are observations).\n\nThe data set mtcars is used in the examples below:\n\n# Load the data data(mtcars) df <- mtcars[, c(\"mpg\", \"cyl\", \"wt\")] # Convert cyl to a factor variable df$cyl <- as.factor(df$cyl) head(df)\n\n## mpg cyl wt ## Mazda RX4 21.0 6 2.620 ## Mazda RX4 Wag 21.0 6 2.875 ## Datsun 710 22.8 4 2.320 ## Hornet 4 Drive 21.4 6 3.215 ## Hornet Sportabout 18.7 8 3.440 ## Valiant 18.1 6 3.460\n\nmtcars : Motor Trend Car Road Tests.\n\nDescription: The data comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973 - 74 models).\n\nFormat: A data frame with 32 observations on 3 variables.\n\n[, 1] mpg Miles/(US) gallon\n\n[, 2] cyl Number of cylinders\n\n[, 3] wt Weight (lb/1000)\n\nqplot(): Quick plot with ggplot2\n\nThe qplot() function is very similar to the standard R plot() function. It can be used to create quickly and easily different types of graphs: scatter plots, box plots, violin plots, histogram and density plots.\n\nA simplified format of qplot() is :\n\nqplot(x, y = NULL, data, geom=\"auto\")\n\nx, y : x and y values, respectively. The argument y is optional depending on the type of graphs to be created.\n\ndata : data frame to use (optional).\n\ngeom : Character vector specifying geom to use. Defaults to “point” if x and y are specified, and “histogram” if only x is specified.\n\nOther arguments such as main, xlab and ylab can be also used to add main title and axis labels to the plot.\n\nRead more about qplot(): Quick plot with ggplot2.\n\nScatter plots\n\nThe R code below creates basic scatter plots using the argument geom = “point”. It’s also possible to combine different geoms (e.g.: geom = c(“point”, “smooth”)).\n\n# Basic scatter plot qplot(x = mpg, y = wt, data = df, geom = \"point\") # Scatter plot with smoothed line qplot(mpg, wt, data = df, geom = c(\"point\", \"smooth\"))\n\nThe following R code will change the color and the shape of points by groups. The column cyl will be used as grouping variable. In other words, the color and the shape of points will be changed by the levels of cyl.\n\nqplot(mpg, wt, data = df, colour = cyl, shape = cyl)\n\nBox plot, violin plot and dot plot\n\nThe R code below generates some data containing the weights by sex (M for male; F for female):\n\nset.seed(1234) wdata = data.frame( sex = factor(rep(c(\"F\", \"M\"), each=200)), weight = c(rnorm(200, 55), rnorm(200, 58))) head(wdata)\n\n## sex weight ## 1 F 53.79293 ## 2 F 55.27743 ## 3 F 56.08444 ## 4 F 52.65430 ## 5 F 55.42912 ## 6 F 55.50606\n\n# Basic box plot from data frame qplot(sex, weight, data = wdata, geom= \"boxplot\", fill = sex) # Violin plot qplot(sex, weight, data = wdata, geom = \"violin\") # Dot plot qplot(sex, weight, data = wdata, geom = \"dotplot\", stackdir = \"center\", binaxis = \"y\", dotsize = 0.5)\n\nHistogram and density plots\n\nThe histogram and density plots are used to display the distribution of data.\n\n# Histogram plot # Change histogram fill color by group (sex) qplot(weight, data = wdata, geom = \"histogram\", fill = sex) # Density plot # Change density plot line color by group (sex) # change line type qplot(weight, data = wdata, geom = \"density\", color = sex, linetype = sex)\n\nggplot(): build plots piece by piece\n\nAs mentioned above, there are two main functions in ggplot2 package for generating graphics:\n\nThe quick and easy-to-use function: qplot()\n\nThe more powerful and flexible function to build plots piece by piece: ggplot()\n\nThis section describes briefly how to use the function ggplot(). Recall that, the concept of ggplot divides a plot into three different fundamental parts: plot = data + Aesthetics + geometry.\n\ndata: a data frame.\n\nAesthetics: used to specify x and y variables, color, size, shape, ….\n\nGeometry: the type of plots (histogram, boxplot, line, density, dotplot, bar, …)\n\nTo demonstrate how the function ggplot() works, we’ll draw a scatter plot. The function aes() is used to specify aesthetics. An alternative option is the function aes_string() which generates mappings from a string. aes_string() is particularly useful when writing functions that create plots because you can use strings to define the aesthetic mappings, rather than having to use substitute to generate a call to aes()\n\n# Basic scatter plot ggplot(data = mtcars, aes(x = wt, y = mpg)) + geom_point() # Change the point size, and shape ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point(size = 2, shape = 23)\n\nThe function aes_string() can be used as follow:\n\nggplot(mtcars, aes_string(x = \"wt\", y = \"mpg\")) + geom_point(size = 2, shape = 23)\n\nNote that, some plots visualize a transformation of the original data set. In this case, an alternative way to build a layer is to use stat_*() functions.\n\nIn the following example, the function geom_density() does the same as the function stat_density():\n\n# Use geometry function ggplot(wdata, aes(x = weight)) + geom_density() # OR use stat function ggplot(wdata, aes(x = weight)) + stat_density()\n\nFor each plot type, we’ll provide the geom_*() function and the corresponding stat_*() function (if available).\n\nOne variable: Continuous\n\nWe’ll use weight data (wdata), generated in the previous sections.\n\nhead(wdata)\n\n## sex weight ## 1 F 53.79293 ## 2 F 55.27743 ## 3 F 56.08444 ## 4 F 52.65430 ## 5 F 55.42912 ## 6 F 55.50606\n\nThe following R code computes the mean value by sex:\n\nlibrary(plyr) mu <- ddply(wdata, \"sex\", summarise, grp.mean=mean(weight)) head(mu)\n\n## sex grp.mean ## 1 F 54.94224 ## 2 M 58.07325\n\nWe start by creating a plot, named a, that we’ll finish in the next section by adding a layer.\n\na <- ggplot(wdata, aes(x = weight))\n\nPossible layers are:\n\nFor one continuous variable:\n\ngeom_area() for area plot\n\ngeom_density() for density plot\n\ngeom_dotplot() for dot plot\n\ngeom_freqpoly() for frequency polygon\n\ngeom_histogram() for histogram plot\n\nstat_ecdf() for empirical cumulative density function\n\nstat_qq() for quantile - quantile plot\n\nFor one discrete variable:\n\ngeom_bar() for bar plot\n\ngeom_area(): Create an area plot\n\n# Basic plot a + geom_area(stat = \"bin\") # change fill colors by sex a + geom_area(aes(fill = sex), stat =\"bin\", alpha=0.6) + theme_classic()\n\nNote that, by default y axis corresponds to the count of weight values. If you want to change the plot in order to have the density on y axis, the R code would be as follow.\n\na + geom_area(aes(y = ..density..), stat =\"bin\")\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype, size. Learn more here: ggplot2 area plot.\n\nKey function: geom_area()\n\nAlternative function: stat_bin()\n\na + stat_bin(geom = \"area\")\n\ngeom_density(): Create a smooth density estimate\n\nWe’ll use the following functions:\n\ngeom_density() to create a density plot\n\ngeom_vline() to add a vertical lines corresponding to group mean values\n\nscale_color_manual() to change the color manually by groups\n\n# Basic plot a + geom_density() # change line colors by sex a + geom_density(aes(color = sex)) # Change fill color by sex # Use semi-transparent fill: alpha = 0.4 a + geom_density(aes(fill = sex), alpha=0.4) # Add mean line and Change color manually a + geom_density(aes(color = sex)) + geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=\"dashed\") + scale_color_manual(values=c(\"#999999\", \"#E69F00\"))\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype, size. Learn more here: ggplot2 density plot.\n\nKey function: geom_density()\n\nAlternative function: stat_density()\n\na + stat_density()\n\ngeom_dotplot(): Dot plot\n\nIn a dot plot, dots are stacked with each dot representing one observation.\n\n# Basic plot a + geom_dotplot() # change fill and color by sex a + geom_dotplot(aes(fill = sex)) # Change fill color manually a + geom_dotplot(aes(fill = sex)) + scale_fill_manual(values=c(\"#999999\", \"#E69F00\"))\n\nTo customize the plot, the following arguments can be used: alpha, color, fill and dotsize. Learn more here: ggplot2 dot plot.\n\nKey functions: geom_dotplot()\n\ngeom_freqpoly(): Frequency polygon\n\n# Basic plot a + geom_freqpoly() # change y axis to density value # and change theme a + geom_freqpoly(aes(y = ..density..)) + theme_minimal() # change color and linetype by sex a + geom_freqpoly(aes(color = sex, linetype = sex)) + theme_minimal()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size.\n\nKey function: geom_freqpoly()\n\nAlternative function: stat_bin()\n\ngeom_histogram(): Histogram\n\n# Basic plot a + geom_histogram() # change line colors by sex a + geom_histogram(aes(color = sex), fill = \"white\", position = \"dodge\")\n\nIf you want to change the plot in order to have the density on y axis, the R code would be as follow.\n\na + geom_histogram(aes(y = ..density..))\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 histogram plot.\n\nKey functions: geom_histogram()\n\nPosition adjustments: “identity” (or position_identity()), “stack” (or position_stack()), “dodge” ( or position_dodge()). Default value is “stack”\n\nAlternative function: stat_bin()\n\na + stat_bin(geom = \"histogram\")\n\nstat_ecdf(): Empirical Cumulative Density Function\n\na + stat_ecdf()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: ggplot2 ECDF.\n\nKey function: stat_ecdf()\n\nstat_qq(): quantile - quantile plot\n\nggplot(mtcars, aes(sample=mpg)) + stat_qq()\n\nTo customize the plot, the following arguments can be used: alpha, color, shape and size. Learn more here: ggplot2 quantile - quantile plot.\n\nKey function: stat_qq()\n\nOne variable: Discrete\n\nThe function geom_bar() can be used to visualize one discrete variable. In this case, the count of each level is plotted. We’ll use the mpg data set [in ggplot2 package]. The R code is as follow:\n\ndata(mpg) b <- ggplot(mpg, aes(fl)) # Basic plot b + geom_bar() # Change fill color b + geom_bar(fill = \"steelblue\", color =\"steelblue\") + theme_minimal()\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 bar plot.\n\nKey function: geom_bar()\n\nAlternative function: stat_count()\n\nb + stat_count()\n\nTwo variables: Continuous X, Continuous Y\n\nWe’ll use the mtcars data set. The variable cyl is used as grouping variable.\n\ndata(mtcars) mtcars$cyl <- as.factor(mtcars$cyl) head(mtcars[, c(\"wt\", \"mpg\", \"cyl\")])\n\n## wt mpg cyl ## Mazda RX4 2.620 21.0 6 ## Mazda RX4 Wag 2.875 21.0 6 ## Datsun 710 2.320 22.8 4 ## Hornet 4 Drive 3.215 21.4 6 ## Hornet Sportabout 3.440 18.7 8 ## Valiant 3.460 18.1 6\n\nWe start by creating a plot, named b, that we’ll finish in the next section by adding a layer.\n\nb <- ggplot(mtcars, aes(x = wt, y = mpg))\n\nPossible layers include:\n\ngeom_point() for scatter plot\n\ngeom_smooth() for adding smoothed line such as regression line\n\ngeom_quantile() for adding quantile lines\n\ngeom_rug() for adding a marginal rug\n\ngeom_jitter() for avoiding overplotting\n\ngeom_text() for adding textual annotations\n\ngeom_point(): Scatter plot\n\n# Basic plot b + geom_point() # change the color and the point # by the levels of cyl variable b + geom_point(aes(color = cyl, shape = cyl)) # Change color manually b + geom_point(aes(color = cyl, shape = cyl)) + scale_color_manual(values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))+ theme_minimal()\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, shape and size. Learn more here: ggplot2 scatter plot.\n\nkey function: geom_point()\n\ngeom_smooth(): Add regression line or smoothed conditional mean\n\nTo add a regression line on a scatter plot, the function geom_smooth() is used in combination with the argument method = lm. lm stands for linear model.\n\n# Regression line only b + geom_smooth(method = lm) # Point + regression line # Remove the confidence interval b + geom_point() + geom_smooth(method = lm, se = FALSE) # loess method: local regression fitting b + geom_point() + geom_smooth() # Change color and shape by groups (cyl) b + geom_point(aes(color=cyl, shape=cyl)) + geom_smooth(aes(color=cyl, shape=cyl), method=lm, se=FALSE, fullrange=TRUE)\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, shape , linetype and size. Learn more here: ggplot2 scatter plot\n\nkey function: geom_smooth()\n\nAlternative function: stat_smooth()\n\nb + stat_smooth(method = \"lm\")\n\ngeom_quantile(): Add quantile lines from a quantile regression\n\nQuantile lines can be used as a continuous analogue of a geom_boxplot().\n\nWe’ll use the mpg data set [in ggplot2].\n\nThe function geom_quantile() can be used for adding quantile lines:\n\nggplot(mpg, aes(cty, hwy)) + geom_point() + geom_quantile() + theme_minimal()\n\nAn alternative to geom_quantile() is the function stat_quantile():\n\nggplot(mpg, aes(cty, hwy)) + geom_point() + stat_quantile(quantiles = c(0.25, 0.5, 0.75))\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: Continuous quantiles\n\nKey function: geom_quantile()\n\nAlternative function: stat_quantile()\n\ngeom_rug(): Add marginal rug to scatter plots\n\nWe’ll use faithful data set.\n\n# Add marginal rugs using faithful data ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() + geom_rug()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: ggplot2 scatter plot\n\nkey function: geom_rug()\n\ngeom_jitter(): Jitter points to reduce overplotting\n\nThe function geom_jitter() is a convenient default for geom_point(position = ‘jitter’). The mpg data set [in ggplot2] is used in the following examples.\n\np <- ggplot(mpg, aes(displ, hwy)) # Default scatter plot p + geom_point() # Use jitter to reduce overplotting p + geom_jitter( position = position_jitter(width = 0.5, height = 0.5))\n\nTo adjust the extent of jittering, the function position_jitter() with the arguments width and height are used:\n\nwidth: degree of jitter in x direction.\n\nheight: degree of jitter in y direction.\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, shape and size. Learn more here: ggplot2 jitter\n\nKey functions: geom_jitter(), position_jitter()\n\ngeom_text(): Textual annotations\n\nThe argument label is used to specify a vector of labels for point annotations.\n\nb + geom_text(aes(label = rownames(mtcars)))\n\nTo customize the plot, the following arguments can be used: label, alpha, angle, color, family, fontface, hjust, lineheight, size, and vjust. Learn more here: ggplot2 add textual annotations\n\nkey function: geom_text(), annotation_custom()\n\nTwo variables: Continuous bivariate distribution\n\nWe start by using the diamonds data set [in ggplot2].\n\ndata(diamonds) head(diamonds[, c(\"carat\", \"price\")])\n\n## carat price ## 1 0.23 326 ## 2 0.21 326 ## 3 0.23 327 ## 4 0.29 334 ## 5 0.31 335 ## 6 0.24 336\n\nWe start by creating a plot, named c, that we’ll finish in the next section by adding a layer.\n\nc <- ggplot(diamonds, aes(carat, price))\n\nPossible layers include:\n\ngeom_bin2d() for adding a heatmap of 2d bin counts. Rectangular bining.\n\ngeom_hex() for adding hexagon bining. The R package hexbin is required for this functionality\n\ngeom_density_2d() for adding contours from a 2d density estimate\n\ngeom_bin2d(): Add heatmap of 2d bin counts\n\nThe function geom_bin2d() produces a scatter plot with rectangular bins. The number of observations is counted in each bins and displayed as a heatmap.\n\n# Default plot c + geom_bin2d() # Change the number of bins c + geom_bin2d(bins = 15)\n\nTo customize the plot, the following arguments can be used: xmax, xmin, ymax, ymin, alpha, color, fill, linetype and size. Learn more here: ggplot2 Scatter plots with rectangular bins\n\nKey functions: geom_bin2d()\n\nAlternative functions: stat_bin_2d(), stat_summary_2d()\n\nc + stat_bin_2d() c + stat_summary_2d(aes(z = depth))\n\ngeom_hex(): Add hexagon bining\n\nThe function geom_hex() produces a scatter plot with hexagon bining. The hexbin R package is required for hexagon bining. If you don’t have it, use the R code below to install it:\n\ninstall.packages(\"hexbin\")\n\nThe function geom_hex() can be used as follow:\n\nrequire(hexbin) # Default plot c + geom_hex() # Change the number of bins c + geom_hex(bins = 10)\n\nTo customize the plot, the following arguments can be used: alpha, color, fill and size. Learn more here: ggplot2 Scatter plots with rectangular bins\n\nKey function: geom_hex()\n\nAlternative functions: stat_bin_hex(), stat_summary_hex()\n\nc + stat_bin_hex() c + stat_summary_hex(aes(z = depth))\n\ngeom_density_2d(): Add contours from a 2d density estimate\n\nThe functions geom_density_2d() or stat_density_2d() can be used to add 2d density estimate to a scatter plot.\n\nfaithful data set is used in this section, and we first start by creating a scatter plot (**sp*) as follow:\n\n# Scatter plot sp <- ggplot(faithful, aes(x=eruptions, y=waiting))\n\n# Default plot sp + geom_density_2d() # Add points sp + geom_point() + geom_density_2d() # Use stat_density_2d with geom = \"polygon\" sp + geom_point() + stat_density_2d(aes(fill = ..level..), geom=\"polygon\")\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: ggplot2 Scatter plots with the 2d density estimation\n\nKey function: geom_density_2d()\n\nAlternative functions: stat_density_2d()\n\nsp + stat_density_2d()\n\nSee also: stat_contour(), geom_contour()\n\nTwo variables: Continuous function\n\nIn this section, we’ll see how to connect observations by line. The economics data set [in ggplot2] is used.\n\ndata(economics) head(economics)\n\n## date pce pop psavert uempmed unemploy ## 1 1967-07-01 507.4 198712 12.5 4.5 2944 ## 2 1967-08-01 510.5 198911 12.5 4.7 2945 ## 3 1967-09-01 516.3 199113 11.7 4.6 2958 ## 4 1967-10-01 512.9 199311 12.5 4.9 3143 ## 5 1967-11-01 518.1 199498 12.5 4.7 3066 ## 6 1967-12-01 525.8 199657 12.1 4.8 3018\n\nWe start by creating a plot, named d, that we’ll finish in the next section by adding a layer.\n\nd <- ggplot(economics, aes(x = date, y = unemploy))\n\nPossible layers include:\n\ngeom_area() for area plot\n\ngeom_line() for line plot connecting observations, ordered by x\n\ngeom_step() for connecting observations by stairs\n\n# Area plot d + geom_area() # Line plot: connecting observations, ordered by x d + geom_line() # Connecting observations by stairs # a subset of economics data set is used set.seed(1234) ss <- economics[sample(1:nrow(economics), 20), ] ggplot(ss, aes(x = date, y = unemploy)) + geom_step()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, size and fill (for geom_area only). Learn more here: ggplot2 line plot.\n\nKey functions: geom_area(), geom_line(), geom_step()\n\nTwo variables: Discrete X, Continuous Y\n\nThe ToothGrowth data set we’ll be used to plot the continuous variable len (for tooth length) by the discrete variable dose. The following R code converts the variable dose from a numeric to a discrete factor variable.\n\ndata(\"ToothGrowth\") ToothGrowth$dose <- as.factor(ToothGrowth$dose) head(ToothGrowth)\n\n## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10.0 VC 0.5\n\nWe start by creating a plot, named e, that we’ll finish in the next section by adding a layer.\n\ne <- ggplot(ToothGrowth, aes(x = dose, y = len))\n\nPossible layers include:\n\ngeom_boxplot() for box plot\n\ngeom_violin() for violin plot\n\ngeom_dotplot() for dot plot\n\ngeom_jitter() for stripchart\n\ngeom_line() for line plot\n\ngeom_bar() for bar plot\n\ngeom_boxplot(): Box and whiskers plot\n\n# Default plot e + geom_boxplot() # Notched box plot e + geom_boxplot(notch = TRUE) # Color by group (dose) e + geom_boxplot(aes(color = dose)) # Change fill color by group (dose) e + geom_boxplot(aes(fill = dose))\n\n# Box plot with multiple groups ggplot(ToothGrowth, aes(x=dose, y=len, fill=supp)) + geom_boxplot()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, shape, size and fill. Learn more here: ggplot2 box plot.\n\nKey function: geom_boxplot()\n\nAlternative functions: stat_boxplot()\n\ne + stat_boxplot(coeff = 1.5)\n\ngeom_violin(): Violin plot\n\nViolin plots are similar to box plots, except that they also show the kernel probability density of the data at different values.\n\n# Default plot e + geom_violin(trim = FALSE) # violin plot with mean points (+/- SD) e + geom_violin(trim = FALSE) + stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult=1), geom=\"pointrange\", color = \"red\") # Combine with box plot e + geom_violin(trim = FALSE) + geom_boxplot(width = 0.2) # Color by group (dose) e + geom_violin(aes(color = dose), trim = FALSE)\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, size and fill. Learn more here: ggplot2 violin plot.\n\nKey functions: geom_violin()\n\nAlternative functions: stat_ydensity()\n\ne + stat_ydensity(trim = FALSE)\n\ngeom_dotplot(): Dot plot\n\n# Default plot e + geom_dotplot(binaxis = \"y\", stackdir = \"center\") # Dot plot with mean points (+/- SD) e + geom_dotplot(binaxis = \"y\", stackdir = \"center\") + stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult=1), geom=\"pointrange\", color = \"red\")\n\n# Combine with box plot e + geom_boxplot() + geom_dotplot(binaxis = \"y\", stackdir = \"center\") # Add violin plot e + geom_violin(trim = FALSE) + geom_dotplot(binaxis='y', stackdir='center') # Color and fill by group (dose) e + geom_dotplot(aes(color = dose, fill = dose), binaxis = \"y\", stackdir = \"center\")\n\nTo customize the plot, the following arguments can be used: alpha, color, dotsize and fill. Learn more here: ggplot2 dot plot.\n\nKey functions: geom_dotplot(), stat_summary()\n\ngeom_jitter(): Strip charts\n\nStripcharts are also known as one dimensional scatter plots. These plots are suitable compared to box plots when sample sizes are small.\n\n# Default plot e + geom_jitter(position=position_jitter(0.2)) # Strip charts with mean points (+/- SD) e + geom_jitter(position=position_jitter(0.2)) + stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult=1), geom=\"pointrange\", color = \"red\")\n\n# Combine with box plot e + geom_jitter(position=position_jitter(0.2)) + geom_dotplot(binaxis = \"y\", stackdir = \"center\") # Add violin plot e + geom_violin(trim = FALSE) + geom_jitter(position=position_jitter(0.2)) # Change color and shape by group (dose) e + geom_jitter(aes(color = dose, shape = dose), position=position_jitter(0.2))\n\nTo customize the plot, the following arguments can be used: alpha, color, shape, size and fill. Learn more here: ggplot2 strip charts.\n\nKey functions: geom_jitter(), stat_summary()\n\ngeom_line(): Line plot\n\nData derived from ToothGrowth data sets are used.\n\ndf <- data.frame(supp=rep(c(\"VC\", \"OJ\"), each=3), dose=rep(c(\"D0.5\", \"D1\", \"D2\"),2), len=c(6.8, 15, 33, 4.2, 10, 29.5)) head(df)\n\n## supp dose len ## 1 VC D0.5 6.8 ## 2 VC D1 15.0 ## 3 VC D2 33.0 ## 4 OJ D0.5 4.2 ## 5 OJ D1 10.0 ## 6 OJ D2 29.5\n\nIn the graphs below, line types and point shapes are controlled automatically by the levels of the variable supp :\n\n# Change line types by groups (supp) ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp))+ geom_point() # Change line types, point shapes and colors ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp, color = supp))+ geom_point(aes(shape=supp, color = supp))\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: ggplot2 line plot.\n\nKey functions: geom_line(), geom_step()\n\ngeom_bar(): Bar plot\n\nData derived from ToothGrowth data sets are used.\n\ndf <- data.frame(dose=c(\"D0.5\", \"D1\", \"D2\"), len=c(4.2, 10, 29.5)) head(df)\n\n## dose len ## 1 D0.5 4.2 ## 2 D1 10.0 ## 3 D2 29.5\n\ndf2 <- data.frame(supp=rep(c(\"VC\", \"OJ\"), each=3), dose=rep(c(\"D0.5\", \"D1\", \"D2\"),2), len=c(6.8, 15, 33, 4.2, 10, 29.5)) head(df2)\n\n## supp dose len ## 1 VC D0.5 6.8 ## 2 VC D1 15.0 ## 3 VC D2 33.0 ## 4 OJ D0.5 4.2 ## 5 OJ D1 10.0 ## 6 OJ D2 29.5\n\nWe start by creating a simple bar plot (named f) using the df data set:\n\nf <- ggplot(df, aes(x = dose, y = len))\n\n# Basic bar plot f + geom_bar(stat = \"identity\") # Change fill color and add labels f + geom_bar(stat=\"identity\", fill=\"steelblue\")+ geom_text(aes(label=len), vjust=-0.3, size=3.5)+ theme_minimal() # Change bar plot line colors by groups f + geom_bar(aes(color = dose), stat=\"identity\", fill=\"white\") # Change bar plot fill colors by groups f + geom_bar(aes(fill = dose), stat=\"identity\")\n\nBar plot with multiple groups:\n\ng <- ggplot(data=df2, aes(x=dose, y=len, fill=supp)) # Stacked bar plot g + geom_bar(stat = \"identity\") # Use position=position_dodge() g + geom_bar(stat=\"identity\", position=position_dodge())\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 bar plot.\n\nKey function: geom_bar()\n\nAlternative function: stat_identity()\n\ng + stat_identity(geom = \"bar\") g + stat_identity(geom = \"bar\", position = \"dodge\")\n\nTwo variables: Discrete X, Discrete Y\n\nThe diamonds data set [in ggplot2] we’ll be used to plot the discrete variable color (for diamond colors) by the discrete variable cut (for diamond cut types). The plot is created using the function geom_jitter().\n\nggplot(diamonds, aes(cut, color)) + geom_jitter(aes(color = cut), size = 0.5)\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, shape and size.\n\nKey function: geom_jitter()\n\nTwo variables: Visualizing error\n\nThe ToothGrowth data set we’ll be used. We start by creating a data set named df which holds ToothGrowth data.\n\n# ToothGrowth data set df <- ToothGrowth df$dose <- as.factor(df$dose) head(df)\n\n## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10.0 VC 0.5\n\nThe helper function below (data_summary()) will be used to calculate the mean and the standard deviation (used as error), for the variable of interest, in each group. The plyr package is required.\n\n# Calculate the mean and the SD in each group #+++++++++++++++++++++++++ # data : a data frame # varname : the name of the variable to be summariezed # grps : column names to be used as grouping variables data_summary <- function(data, varname, grps){ require(plyr) summary_func <- function(x, col){ c(mean = mean(x[[col]], na.rm=TRUE), sd = sd(x[[col]], na.rm=TRUE)) } data_sum<-ddply(data, grps, .fun=summary_func, varname) data_sum <- rename(data_sum, c(\"mean\" = varname)) return(data_sum) }\n\nUsing the function data_summary(), the following R code creates a data set named df2 which holds the mean and the SD of tooth length (len) by groups (dose).\n\ndf2 <- data_summary(df, varname=\"len\", grps= \"dose\") # Convert dose to a factor variable df2$dose=as.factor(df2$dose) head(df2)\n\n## dose len sd ## 1 0.5 10.605 4.499763 ## 2 1 19.735 4.415436 ## 3 2 26.100 3.774150\n\nWe start by creating a plot, named f, that we’ll finish in the next section by adding a layer.\n\nf <- ggplot(df2, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd))\n\nPossible layers include:\n\ngeom_crossbar() for hollow bar with middle indicated by horizontal line\n\ngeom_errorbar() for error bars\n\ngeom_errorbarh() for horizontal error bars\n\ngeom_linerange() for drawing an interval represented by a vertical line\n\ngeom_pointrange() for creating an interval represented by a vertical line, with a point in the middle.\n\ngeom_crossbar(): Hollow bar with middle indicated by horizontal line\n\nWe’ll use the data set named df2, which holds the mean and the SD of tooth length (len) by groups (dose).\n\n# Default plot f + geom_crossbar() # color by groups f + geom_crossbar(aes(color = dose)) # Change color manually f + geom_crossbar(aes(color = dose)) + scale_color_manual(values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))+ theme_minimal() # fill by groups and change color manually f + geom_crossbar(aes(fill = dose)) + scale_fill_manual(values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"))+ theme_minimal()\n\nCross bar with multiple groups: Using the function data_summary(), we start by creating a data set named df3 which holds the mean and the SD of tooth length (len) by 2 groups (supp and dose).\n\ndf3 <- data_summary(df, varname=\"len\", grps= c(\"supp\", \"dose\")) head(df3)\n\n## supp dose len sd ## 1 OJ 0.5 13.23 4.459709 ## 2 OJ 1 22.70 3.910953 ## 3 OJ 2 26.06 2.655058 ## 4 VC 0.5 7.98 2.746634 ## 5 VC 1 16.77 2.515309 ## 6 VC 2 26.14 4.797731\n\nThe data set df3 is used to create cross bars with multiple groups. For this end, the variable len is plotted by dose and the color is changed by the levels of the factor supp.\n\nf <- ggplot(df3, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd)) # Default plot f + geom_crossbar(aes(color = supp)) # Use position_dodge() to avoid overlap f + geom_crossbar(aes(color = supp), position = position_dodge(1))\n\nA simple alternative to geom_crossbar() is to use the function stat_summary() as follow. In this case, the mean and the SD can be computed automatically.\n\nf <- ggplot(df, aes(x = dose, y = len, color = supp)) # Use geom_crossbar() f + stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult=1), geom=\"crossbar\", width = 0.6, position = position_dodge(0.8))\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 error bars.\n\nKey functions: geom_crossbar(), stat_summary()\n\ngeom_errorbar(): Error bars\n\nWe’ll use the data set named df2, which holds the mean and the SD of tooth length (len) by groups (dose).\n\nWe start by creating a plot, named f, that we’ll finish next by adding a layer.\n\nf <- ggplot(df2, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd))\n\n# Error bars colored by groups f + geom_errorbar(aes(color = dose), width = 0.2) # Combine with line plot f + geom_line(aes(group = 1)) + geom_errorbar(width = 0.2) # Combine with bar plot, color by groups f + geom_bar(aes(color = dose), stat = \"identity\", fill =\"white\") + geom_errorbar(aes(color = dose), width = 0.2)\n\nError bars with multiple groups:\n\nThe data set df3 is used to create cross bars with multiple groups. For this end, the variable len is plotted by dose and the color is changed by the levels of the factor supp.\n\nf <- ggplot(df3, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd)) # Default plot f + geom_bar(aes(fill = supp), stat = \"identity\", position = \"dodge\") + geom_errorbar(aes(color = supp), position = \"dodge\")\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, size and width.\n\nLearn more here:\n\nggplot2 error bars\n\nBar plot with error bars\n\nLine plot with error bars\n\nKey functions: geom_errorbar(), stat_summary()\n\ngeom_errorbarh(): Horizontal error bars\n\nWe’ll use the data set named df2, which holds the mean and the SD of tooth length (len) by groups (dose):\n\ndf2 <- data_summary(ToothGrowth, varname=\"len\", grps = \"dose\") head(df2)\n\n## dose len sd ## 1 0.5 10.605 4.499763 ## 2 1 19.735 4.415436 ## 3 2 26.100 3.774150\n\nWe start by creating a plot, named f, that we’ll finish next by adding a layer.\n\nf <- ggplot(df2, aes(x = len, y = dose , xmin=len-sd, xmax=len+sd))\n\nThe arguments xmin and xmax are used for horizontal error bars.\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, size and height.\n\nKey functions: geom_errorbarh()\n\ngeom_linerange() and geom_pointrange(): An interval represented by a vertical line\n\ngeom_linerange(): Add an interval represented by a vertical line\n\ngeom_pointrange(): Add an interval represented by a vertical line with a point in the middle\n\nWe’ll use the data set df2.\n\nf <- ggplot(df2, aes(x = dose, y = len, ymin=len-sd, ymax=len+sd)) # Line range f + geom_linerange() # Point range f + geom_pointrange()\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype, size, shape and fill (for geom_pointrange()).\n\nCombine geom_dotplot and error bars\n\nIt’s also possible to combine geom_dotplot() and error bars. We’ll use the ToothGrowth data set. You don’t need to compute the mean and SD. This can be done automatically by using the function stat_summary() in combination with the argument fun.data = “mean_sdl”.\n\nWe start by creating a dot plot, named g, that we’ll finish in the next section by adding error bar layers.\n\ng <- ggplot(df, aes(x=dose, y=len)) + geom_dotplot(binaxis='y', stackdir='center')\n\n# use geom_crossbar() g + stat_summary(fun.data=\"mean_sdl\", fun.args = list(mult=1), geom=\"crossbar\", width=0.5) # Use geom_errorbar() g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=\"errorbar\", color=\"red\", width=0.2) + stat_summary(fun.y=mean, geom=\"point\", color=\"red\") # Use geom_pointrange() g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=\"pointrange\", color=\"red\")\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 error bars.\n\nKey functions: geom_errorbarh(), geom_errorbar(), geom_linerange(), geom_pointrange(), geom_crossbar(), stat_summary()\n\nTwo variables: Maps\n\nThe function geom_map() can be used to create a map with ggplot2. The R package map is required. It contains geographical information useful for drawing easily maps in ggplot2.\n\nInstall map package (if you don’t have it):\n\ninstall.packages(\"map\")\n\nIn the following R code, we’ll create USA map and USArrests crime data to shade each region.\n\n# Prepare the data crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests) library(reshape2) # for melt crimesm <- melt(crimes, id = 1) # Get map data require(maps) map_data <- map_data(\"state\") # Plot the map with Murder data ggplot(crimes, aes(map_id = state)) + geom_map(aes(fill = Murder), map = map_data) + expand_limits(x = map_data$long, y = map_data$lat)\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 map.\n\nKey function: geom_map()\n\nThree variables\n\nThe mtcars data set we’ll be used. We first compute a correlation matrix, which will be visualized using specific ggplot2 functions.\n\nPrepare the data:\n\ndf <- mtcars[, c(1,3,4,5,6,7)] # Correlation matrix cormat <- round(cor(df),2) # Melt the correlation matrix require(reshape2) cormat <- melt(cormat) head(cormat)\n\n## Var1 Var2 value ## 1 mpg mpg 1.00 ## 2 disp mpg -0.85 ## 3 hp mpg -0.78 ## 4 drat mpg 0.68 ## 5 wt mpg -0.87 ## 6 qsec mpg 0.42\n\nWe start by creating a plot, named g, that we’ll finish in the next section by adding a layer.\n\ng <- ggplot(cormat, aes(x = Var1, y = Var2))\n\nPossible layers include:\n\ngeom_tile(): Tile plane with rectangles (similar to levelplot and image)\n\ngeom_raster(): High-performance rectangular tiling. This is a special case of geom_tile where all tiles are the same size.\n\nWe’ll use the function geom_tile() to visualize a correlation matrix.\n\nCompute and visualize correlation matrix:\n\n# 1. Compute correlation cormat <- round(cor(df),2) # 2. Reorder the correlation matrix by # Hierarchical clustering hc <- hclust(as.dist(1-cormat)/2) cormat.ord <- cormat[hc$order, hc$order] # 3. Get the upper triangle cormat.ord[lower.tri(cormat.ord)]<- NA # 4. Melt the correlation matrix require(reshape2) melted_cormat <- melt(cormat.ord, na.rm = TRUE) # Create the heatmap ggplot(melted_cormat, aes(Var2, Var1, fill = value))+ geom_tile(color = \"white\")+ scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0, limit = c(-1,1), space = \"Lab\", name=\"Pearson\\nCorrelation\") + # Change gradient color theme_minimal()+ # minimal theme theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ coord_fixed()\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size. Learn more here: ggplot2 correlation matrix heatmap.\n\nKey functions: geom_tile(), geom_raster()\n\nOther types of graphs\n\nPie chart: (click to read more)\n\nSurvival curves: (click to read more)\n\nGraphical primitives: polygon, path, ribbon, segment, rectangle\n\nThis section describes how to add graphical elements to a plot. The functions below we’ll be used:\n\ngeom_polygon(): Add polygon, a filled path\n\ngeom_path(): Connect observations in original order\n\ngeom_ribbon(): Add ribbons, y range with continuous x values.\n\ngeom_segment(): Add a single line segments\n\ngeom_curve(): Add curves\n\ngeom_rect(): Add a 2d rectangles.\n\nThe R code below draws France map using geom_polygon():\n\nrequire(maps) france = map_data('world', region = 'France') ggplot(france, aes(x = long, y = lat, group = group)) + geom_polygon(fill = 'white', colour = 'black')\n\nTo customize the plot, the following arguments can be used: alpha, color, fill, linetype and size.\n\nThe following R code uses econimics data [in ggplot2] and produces path, ribbon and rectangles.\n\nh <- ggplot(economics, aes(date, unemploy)) # Path h + geom_path() # Ribbon h + geom_ribbon(aes(ymin = unemploy-900, ymax = unemploy+900), fill = \"steelblue\") + geom_path(size = 0.8) # Rectangle h + geom_rect(aes(xmin = as.Date('1980-01-01'), ymin = -Inf, xmax = as.Date('1985-01-01'), ymax = Inf), fill = \"steelblue\") + geom_path(size = 0.8)\n\nTo customize the plot, the following arguments can be used: alpha, color, fill (for ribbon only), linetype and size.\n\nAdd line segments between points (x1, y1) and (x2, y2):\n\n# Create a scatter plot i <- ggplot(mtcars, aes(wt, mpg)) + geom_point() # Add segment i + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15)) # Add arrow require(grid) i + geom_segment(aes(x = 5, y = 30, xend = 3.5, yend = 25), arrow = arrow(length = unit(0.5, \"cm\")))\n\nTo customize the plot, the following arguments can be used: alpha, color, linetype and size. Learn more here: ggplot2 add line segment.\n\nAdd curves between points (x1, y1) and (x2, y2):\n\ni + geom_curve(aes(x = 2, y = 15, xend = 3, yend = 15))\n\nKey functions: geom_path(), geom_ribbon(), geom_rect(), geom_segment()\n\nGraphical parameters\n\nMain title, axis labels and legend title\n\nWe start by creating a box plot using the data set ToothGrowth:\n\n# Convert the variable dose from numeric to factor variable ToothGrowth$dose <- as.factor(ToothGrowth$dose) p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()\n\nThe function below can be used for changing titles and labels:\n\np + ggtitle(“New main title”): Adds a main title above the plot\n\np + xlab(“New X axis label”): Changes the X axis label\n\np + ylab(“New Y axis label”): Changes the Y axis label\n\np + labs(title = “New main title”, x = “New X axis label”, y = “New Y axis label”): Changes main title and axis labels\n\nThe function labs() can be also used to change the legend title.\n\nChange main title and axis labels\n\n# Default plot print(p) # Change title and axis labels p <- p +labs(title=\"Plot of length \\n by dose\", x =\"Dose (mg)\", y = \"Teeth length\") p\n\nNote that, \\n is used to split long title into multiple lines.\n\nChange the appearance of labels:\n\nTo change the appearance(color, size and face ) of labels, the functions theme() and element_text() can be used.\n\nThe function element_blank() hides the labels.\n\n# Change the appearance of labels p + theme( plot.title = element_text(color=\"red\", size=14, face=\"bold.italic\"), axis.title.x = element_text(color=\"blue\", size=14, face=\"bold\"), axis.title.y = element_text(color=\"#993333\", size=14, face=\"bold\") ) # Hide labels p + theme(plot.title = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank())\n\nChange legend titles: Scale functions (fill, color, size, shape, …) are used to update legend titles.\n\n# Default plot p <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+ geom_boxplot() p # Modify legend titles p + labs(fill = \"Dose (mg)\")\n\nLearn more here: ggplot2 title: main, axis and legend titles.\n\nLegend position and appearance\n\nCreate a box plot\n\n# Convert the variable dose from numeric to factor variable ToothGrowth$dose <- as.factor(ToothGrowth$dose) p <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+ geom_boxplot()\n\nChange legend position and appearance\n\n# Change legend position: \"left\",\"top\", \"right\", \"bottom\", \"none\" p + theme(legend.position=\"top\") # Remove legends p + theme(legend.position = \"none\") # Change the appearance of legend title and labels p + theme(legend.title = element_text(colour=\"blue\"), legend.text = element_text(colour=\"red\")) # Change legend box background color p + theme(legend.background = element_rect(fill=\"lightblue\"))\n\nCustomize legends using scale functions\n\nChange the order of legend items: scale_x_discrete()\n\nSet legend title and labels: scale_fill_discrete()\n\n# Change the order of legend items p + scale_x_discrete(limits=c(\"2\", \"0.5\", \"1\")) # Set legend title and labels p + scale_fill_discrete(name = \"Dose\", labels = c(\"A\", \"B\", \"C\"))\n\nLearn more here: ggplot2 legend position and appearance.\n\nChange colors automatically and manually\n\nToothGrowth and mtcars data sets are used in the examples below.\n\n# Convert dose and cyl columns from numeric to factor variables ToothGrowth$dose <- as.factor(ToothGrowth$dose) mtcars$cyl <- as.factor(mtcars$cyl)\n\nWe start by creating some plots which will be finished hereafter:\n\n# Box plot bp <- ggplot(ToothGrowth, aes(x=dose, y=len)) # Scatter plot sp <- ggplot(mtcars, aes(x=wt, y=mpg))\n\nDraw plots: change fill and outline colors\n\n# box plot bp + geom_boxplot(fill='steelblue', color=\"red\") # scatter plot sp + geom_point(color='darkblue')\n\nChange color by groups using the levels of dose variable\n\n# Box plot bp <- bp + geom_boxplot(aes(fill = dose)) bp # Scatter plot sp <- sp + geom_point(aes(color = cyl)) sp\n\nChange colors manually:\n\nscale_fill_manual() for box plot, bar plot, violin plot, etc\n\nscale_color_manual() for lines and points\n\n# Box plot bp + scale_fill_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\")) # Scatter plot sp + scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\"))\n\nUse RColorBrewer palettes: (Read more about RColorBrewer: color in R)\n\nscale_fill_brewer() for box plot, bar plot, violin plot, etc\n\nscale_color_brewer() for lines and points\n\n# Box plot bp + scale_fill_brewer(palette=\"Dark2\") # Scatter plot sp + scale_color_brewer(palette=\"Dark2\")\n\nAvailable color palettes in the RColorBrewer package:\n\nUse gray colors:\n\nscale_fill_grey() for box plot, bar plot, violin plot, etc\n\nscale_colour_grey() for points, lines, etc\n\n# Box plot bp + scale_fill_grey() + theme_classic() # Scatter plot sp + scale_color_grey() + theme_classic()\n\nGradient or continuous colors:\n\nPlots can be colored according to the values of a continuous variable using the functions :\n\nscale_color_gradient(), scale_fill_gradient() for sequential gradients between two colors\n\nscale_color_gradient2(), scale_fill_gradient2() for diverging gradients\n\nscale_color_gradientn(), scale_fill_gradientn() for gradient between n colors\n\nGradient colors for scatter plots: The graphs are colored using the qsec continuous variable :\n\n# Color by qsec values sp2<-ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(color = qsec)) sp2 # Change the low and high colors # Sequential color scheme sp2+scale_color_gradient(low=\"blue\", high=\"red\") # Diverging color scheme mid<-mean(mtcars$qsec) sp2+scale_color_gradient2(midpoint=mid, low=\"blue\", mid=\"white\", high=\"red\", space = \"Lab\" )\n\nLearn more here: ggplot2 colors.\n\nPoint shapes, colors and size\n\nThe different points shapes commonly used in R are shown in the image below:\n\nmtcars data is used in the following examples.\n\n# Convert cyl as factor variable mtcars$cyl <- as.factor(mtcars$cyl)\n\nCreate a scatter plot and change point shapes, colors and size:\n\n# Basic scatter plot ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape = 18, color = \"steelblue\", size = 4) # Change point shapes and colors by groups ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(shape = cyl, color = cyl))\n\nIt’s also possible to manually change the appearance of points:\n\nscale_shape_manual() : to change point shapes\n\nscale_color_manual() : to change point colors\n\nscale_size_manual() : to change the size of points\n\n# Change colors and shapes manually ggplot(mtcars, aes(x=wt, y=mpg, group=cyl)) + geom_point(aes(shape=cyl, color=cyl), size=2)+ scale_shape_manual(values=c(3, 16, 17))+ scale_color_manual(values=c('#999999','#E69F00', '#56B4E9'))+ theme(legend.position=\"top\")\n\nLearn more here: ggplot2 point shapes, colors and size.\n\nAdd text annotations to a graph\n\nThere are three important functions for adding texts to a plot:\n\ngeom_text(): Textual annotations\n\nannotate(): Textual annotations\n\nannotation_custom(): Static annotations that are the same in every panel. These annotations are not affected by the plot scales.\n\nA subset of mtcars data is used:\n\nset.seed(1234) df <- mtcars[sample(1:nrow(mtcars), 10), ] df$cyl <- as.factor(df$cyl)\n\nScatter plots with textual annotations:\n\n# Scatter plot sp <- ggplot(df, aes(x=wt, y=mpg))+ geom_point() # Add text, change colors by groups sp + geom_text(aes(label = rownames(df), color = cyl), size = 3, vjust = -1) # Add text at a particular coordinate sp + geom_text(x = 3, y = 30, label = \"Scatter plot\", color=\"red\")\n\nLearn more here: ggplot2 text: Add text annotations to a graph.\n\nLine types\n\nThe different line types available in R software are : “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”.\n\nNote that, line types can be also specified using numbers : 0, 1, 2, 3, 4, 5, 6. 0 is for “blank”, 1 is for “solid”, 2 is for “dashed”, ….\n\nA graph of the different line types is shown below :\n\nBasic line plot\n\n# Create some data df <- data.frame(time=c(\"breakfeast\", \"Lunch\", \"Dinner\"), bill=c(10, 30, 15)) head(df)\n\n## time bill ## 1 breakfeast 10 ## 2 Lunch 30 ## 3 Dinner 15\n\n# Basic line plot with points # Change the line type ggplot(data=df, aes(x=time, y=bill, group=1)) + geom_line(linetype = \"dashed\")+ geom_point()\n\nLine plots with multiple groups\n\n# Create some data df2 <- data.frame(sex = rep(c(\"Female\", \"Male\"), each=3), time=c(\"breakfeast\", \"Lunch\", \"Dinner\"), bill=c(10, 30, 15, 13, 40, 17) ) head(df2)\n\n## sex time bill ## 1 Female breakfeast 10 ## 2 Female Lunch 30 ## 3 Female Dinner 15 ## 4 Male breakfeast 13 ## 5 Male Lunch 40 ## 6 Male Dinner 17\n\n# Line plot with multiple groups # Change line types and colors by groups (sex) ggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype = sex, color = sex))+ geom_point(aes(color=sex))+ theme(legend.position=\"top\")\n\nThe functions below can be used to change the appearance of line types manually:\n\nscale_linetype_manual() : to change line types\n\nscale_color_manual() : to change line colors\n\nscale_size_manual() : to change the size of lines\n\n# Change line types, colors and sizes ggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype=sex, color=sex, size=sex))+ geom_point()+ scale_linetype_manual(values=c(\"twodash\", \"dotted\"))+ scale_color_manual(values=c('#999999','#E69F00'))+ scale_size_manual(values=c(1, 1.5))+ theme(legend.position=\"top\")\n\nLearn more here: ggplot2 line types.\n\nThemes and background colors\n\nToothGrowth data is used :\n\n# Convert the column dose from numeric to factor variable ToothGrowth$dose <- as.factor(ToothGrowth$dose)\n\nCreate a box plot\n\np <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()\n\nChange plot themes\n\nSeveral functions are available in ggplot2 package for changing quickly the theme of plots :\n\ntheme_gray(): gray background color and white grid lines\n\ntheme_bw() : white background and gray grid lines\n\np + theme_gray(base_size = 14) p + theme_bw()\n\ntheme_linedraw : black lines around the plot\n\ntheme_light : light gray lines and axis (more attention towards the data)\n\np + theme_linedraw() p + theme_light()\n\ntheme_minimal: no background annotations\n\ntheme_classic : theme with axis lines and no grid lines\n\np + theme_minimal() p + theme_classic()\n\nLearn more here: ggplot2 themes and background colors.\n\nAxis limits: Minimum and Maximum values\n\nCreate a plot:\n\np <- ggplot(cars, aes(x = speed, y = dist)) + geom_point()\n\nDifferent functions are available for setting axis limits:\n\nWithout clipping (preferred):\n\np + coord_cartesian(xlim = c(5, 20), ylim = (0, 50)): Cartesian coordinates. The Cartesian coordinate system is the most common type of coordinate system. It will zoom the plot (like you’re looking at it with a magnifying glass), without clipping the data.\n\nWith clipping the data (removes unseen data points): Observations not in this range will be dropped completely and not passed to any other layers.\n\np + xlim(5, 20) + ylim(0, 50)\n\np + scale_x_continuous(limits = c(5, 20)) + scale_y_continuous(limits = c(0, 50))\n\nExpand the plot limits with data: This function is a thin wrapper around geom_blank() that makes it easy to add data to a plot.\n\np + expand_limits(x = 0, y = 0): set the intercept of x and y axes at (0,0)\n\np + expand_limits(x = c(5, 50), y = c(0, 150))\n\n# Default plot print(p) # Change axis limits using coord_cartesian() p + coord_cartesian(xlim =c(5, 20), ylim = c(0, 50)) # Use xlim() and ylim() p + xlim(5, 20) + ylim(0, 50) # Expand limits p + expand_limits(x = c(5, 50), y = c(0, 150))\n\nLearn more here: ggplot2 axis limits.\n\nNote that, date axis limits can be set using the functions scale_x_date() and scale_y_date(). Read more here: ggplot2 date axis.\n\nAxis transformations: log and sqrt scales\n\nCreate a scatter plot:\n\np <- ggplot(cars, aes(x = speed, y = dist)) + geom_point()\n\nggplot2 functions for continuous axis transformations:\n\np + scale_x_log10(), p + scale_y_log10() : Plot x and y on log10 scale, respectively.\n\np + scale_x_sqrt(), p + scale_y_sqrt() : Plot x and y on square root scale, respectively.\n\np + scale_x_reverse(), p + scale_y_reverse() : Reverse direction of axes\n\np + coord_trans(x =“log10”, y=“log10”) : transformed cartesian coordinate system. Possible values for x and y are “log2”, “log10”, “sqrt”, …\n\np + scale_x_continuous(trans=‘log2’), p + scale_y_continuous(trans=‘log2’) : another allowed value for the argument trans is ‘log10’\n\nThe R code below uses the function scale_xx_continuous() to transform axis scales:\n\n# Default scatter plot print(p) # Log transformation using scale_xx() # possible values for trans : 'log2', 'log10','sqrt' p + scale_x_continuous(trans='log2') + scale_y_continuous(trans='log2') # Format axis tick mark labels require(scales) p + scale_y_continuous(trans = log2_trans(), breaks = trans_breaks(\"log2\", function(x) 2^x), labels = trans_format(\"log2\", math_format(2^.x))) # Reverse coordinates p + scale_y_reverse()\n\nLearn more here: ggplot2 axis limits.\n\nAxis ticks: customize tick marks and labels, reorder and select items\n\nFunctions for changing the style of axis tick mark labels:\n\nelement_text(face, color, size, angle): change text style\n\nelement_blank(): Hide text\n\nCreate a box plot:\n\np <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot() # print(p)\n\nChange the style and the orientation angle of axis tick labels\n\n# Change the style of axis tick labels # face can be \"plain\", \"italic\", \"bold\" or \"bold.italic\" p + theme(axis.text.x = element_text(face=\"bold\", color=\"#993333\", size=14, angle=45), axis.text.y = element_text(face=\"bold\", color=\"blue\", size=14, angle=45)) # Remove axis ticks and tick mark labels p + theme( axis.text.x = element_blank(), # Remove x axis tick labels axis.text.y = element_blank(), # Remove y axis tick labels axis.ticks = element_blank()) # Remove ticks\n\nCustomize continuous and discrete axes:\n\nDiscrete axes\n\nscale_x_discrete(name, breaks, labels, limits): for X axis\n\nscale_y_discrete(name, breaks, labels, limits): for y axis\n\nContinuous axes\n\nscale_x_continuous(name, breaks, labels, limits, trans): for X axis\n\nscale_y_continuous(name, breaks, labels, limits, trans): for y axis\n\nBriefly, the meaning of the arguments are as follow:\n\nname : x or y axis labels\n\nbreaks : vector specifying which breaks to display\n\nlabels : labels of axis tick marks\n\nlimits : vector indicating the data range\n\n(Read more here: Set axis ticks for discrete and continuous axes)\n\nscale_xx() functions can be used to change the following x or y axis parameters :\n\naxis titles\n\naxis limits (data range to display)\n\nchoose where tick marks appear\n\nmanually label tick marks\n\n4.1. Discrete axes:\n\n# Change x axis label and the order of items p + scale_x_discrete(name =\"Dose (mg)\", limits=c(\"2\",\"1\",\"0.5\")) # Change tick mark labels p + scale_x_discrete(breaks=c(\"0.5\",\"1\",\"2\"), labels=c(\"Dose 0.5\", \"Dose 1\", \"Dose 2\")) # Choose which items to display p + scale_x_discrete(limits=c(\"0.5\", \"2\"))\n\n4.2. Continuous axes:\n\n# Default scatter plot # +++++++++++++++++ sp <- ggplot(cars, aes(x = speed, y = dist)) + geom_point() sp # Customize the plot #+++++++++++++++++++++ # 1. Change x and y axis labels, and limits sp <- sp + scale_x_continuous(name=\"Speed of cars\", limits=c(0, 30)) + scale_y_continuous(name=\"Stopping distance\", limits=c(0, 150)) # 2. Set tick marks on y axis: a tick mark is shown on every 50 sp + scale_y_continuous(breaks=seq(0, 150, 50)) # Format the labels # +++++++++++++++++ require(scales) sp + scale_y_continuous(labels = percent) # labels as percents\n\nLearn more here: ggplot2 Axis ticks: tick marks and labels.\n\nAdd straight lines to a plot: horizontal, vertical and regression lines\n\nThe R function below can be used :\n\ngeom_hline(yintercept, linetype, color, size): for horizontal lines\n\ngeom_vline(xintercept, linetype, color, size): for vertical lines\n\ngeom_abline(intercept, slope, linetype, color, size): for regression lines\n\ngeom_segment() to add segments\n\nCreate a simple scatter plot\n\n# Simple scatter plot sp <- ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point()\n\nAdd straight lines\n\n# Add horizontal line at y = 2O; change line type and color sp + geom_hline(yintercept=20, linetype=\"dashed\", color = \"red\") # Add vertical line at x = 3; change line type, color and size sp + geom_vline(xintercept = 3, color = \"blue\", size=1.5) # Add regression line sp + geom_abline(intercept = 37, slope = -5, color=\"blue\")+ ggtitle(\"y = -5X + 37\") # Add horizontal line segment sp + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15))\n\nLearn more here: ggplot2 add straight lines to a plot.\n\nRotate a plot: flip and reverse\n\ncoord_flip(): Create horizontal plots\n\nscale_x_reverse(), scale_y_reverse(): Reverse the axes\n\nset.seed(1234) # Basic histogram hp <- qplot(x=rnorm(200), geom=\"histogram\") hp # Horizontal histogram hp + coord_flip() # Y axis reversed hp + scale_y_reverse()\n\nLearn more here: ggplot2 rotate a graph.\n\nFaceting: split a plot into a matrix of panels\n\nFacets divide a plot into subplots based on the values of one or more categorical variables.\n\nThere are two main functions for faceting :\n\nfacet_grid()\n\nfacet_wrap()\n\nCreate a box plot filled by groups:\n\np <- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose)) + geom_boxplot(aes(fill=dose)) p\n\nThe following functions can be used for facets:\n\np + facet_grid(supp ~ .): Facet in vertical direction based on the levels of supp variable.\n\np + facet_grid(. ~ supp): Facet in horizontal direction based on the levels of supp variable.\n\np + facet_grid(dose ~ supp): Facet in horizontal and vertical directions based on two variables: dose and supp.\n\np + facet_wrap(~ fl): Place facet side by side into a rectangular layout\n\nFacet with one discrete variable: Split by the levels of the group “supp”\n\n# Split in vertical direction p + facet_grid(supp ~ .) # Split in horizontal direction p + facet_grid(. ~ supp)\n\nFacet with two discrete variables: Split by the levels of the groups “dose” and “supp”\n\n# Facet by two variables: dose and supp. # Rows are dose and columns are supp p + facet_grid(dose ~ supp) # Facet by two variables: reverse the order of the 2 variables # Rows are supp and columns are dose p + facet_grid(supp ~ dose)\n\nBy default, all the panels have the same scales (scales=“fixed”). They can be made independent, by setting scales to free, free_x, or free_y.\n\np + facet_grid(dose ~ supp, scales='free')\n\nLearn more here: ggplot2 facet : split a plot into a matrix of panels.\n\nPosition adjustements\n\nPosition adjustments determine how to arrange geoms. The argument position is used to adjust geom positions:\n\np <- ggplot(mpg, aes(fl, fill = drv)) # Arrange elements side by side p + geom_bar(position = \"dodge\") # Stack objects on top of one another, # and normalize to have equal height p + geom_bar(position = \"fill\")\n\n# Stack elements on top of one another p + geom_bar(position = \"stack\") # Add random noise to X and Y position # of each element to avoid overplotting ggplot(mpg, aes(cty, hwy)) + geom_point(position = \"jitter\")\n\nNote that, each of these position adjustments can be done using a function with manual width and height argument.\n\nposition_dodge(width, height)\n\nposition_fill(width, height)\n\nposition_stack(width, height)\n\nposition_jitter(width, height)\n\np + geom_bar(position = position_dodge(width = 1))\n\nLearn more here: ggplot2 bar plots.\n\nCoordinate systems\n\np <- ggplot(mpg, aes(fl)) + geom_bar()\n\nThe coordinate systems in ggplot2 are:\n\np + coord_cartesian(xlim = NULL, ylim = NULL): Cartesian coordinate system (default). It’s the most familiar and common, type of coordinate system.\n\np + coord_fixed(ratio = 1, xlim = NULL, ylim = NULL): Cartesian coordinates with fixed relationship between x and y scales. The ratio represents the number of units on the y-axis equivalent to one unit on the x-axis. The default, ratio = 1, ensures that one unit on the x-axis is the same length as one unit on the y-axis.\n\np + coord_flip(…): Flipped cartesian coordinates. Useful for creating horizontal plot by rotating.\n\np + coord_polar(theta = “x”, start = 0, direction = 1): Polar coordinates. The polar coordinate system is most commonly used for pie charts, which are a stacked bar chart in polar coordinates.\n\np + coord_trans(x, y, limx, limy): Transformed cartesian coordinate system.\n\ncoord_map(): Map projections. Provides the full range of map projections available in the mapproj package.\n\nArguments for coord_cartesian(), coord_fixed() and coord_flip()\n\nxlim: limits for the x axis\n\nylim: limits for the y axis\n\nratio: aspect ratio, expressed as y/x\n\n…: Other arguments passed onto coord_cartesian\n\nArguments for coord_polar()\n\ntheta: variable to map angle to (x or y)\n\nstart: offset of starting point from 12 o’clock in radians\n\ndirection: 1, clockwise; -1, anticlockwise\n\nArguments for coord_trans()\n\nx, y: transformers for x and y axes\n\nlimx, limy: limits for x and y axes.\n\np + coord_cartesian(ylim = c(0, 200)) p + coord_fixed(ratio = 1/50) p + coord_flip()\n\np + coord_polar(theta = \"x\", direction = 1) p + coord_trans(y = \"sqrt\")\n\nExtensions to ggplot2: R packages and functions\n\nfactoextra: factoextra : Extract and Visualize the outputs of a multivariate analysis. factoextra provides some easy-to-use functions to extract and visualize the output of PCA (Principal Component Analysis), CA (Correspondence Analysis) and MCA (Multiple Correspondence Analysis) functions from several packages (FactoMineR, stats, ade4 and MASS). It contains also many functions for simplifying clustering analysis workflows. Ggplot2 plotting system is used.\n\neasyggplot2: Perform and customize easily a plot with ggplot2. The idea behind ggplot2 is seductively simple but the detail is, yes, difficult. To customize a plot, the syntax is sometimes a tiny bit opaque and this raises the level of difficulty. easyGgplot2 package (which depends on ggplot2) to make and customize quickly plots including box plot, dot plot, strip chart, violin plot, histogram, density plot, scatter plot, bar plot, line plot, etc, …\n\nggplot2 - Easy way to mix multiple graphs on the same page: The R package gridExtra and cowplot are used.\n\nggplot2: Correlation matrix heatmap\n\nggfortify: Define fortify and autoplot functions to allow ggplot2 to handle some popular R packages. These include plotting 1) Matrix; 2) Linear Model and Generalized Linear Model; 3) Time Series; 4) PCA/Clustering; 5) Survival Curve; 6) Probability distribution\n\nGGally: GGally extends ggplot2 by providing several functions including pairwise correlation matrix, scatterplot plot matrix, parallel coordinates plot, survival plot and several functions to plot networks.\n\nggRandomForests: Graphical analysis of random forests with the randomForestSRC and ggplot2 packages.\n\nggdendro: Create dendrograms and tree diagrams using ggplot2\n\nggmcmc: Tools for Analyzing MCMC Simulations from Bayesian Inference\n\nggthemes: Package with additional ggplot2 themes and scales\n\nTheme used to create journal ready figures easily\n\nRessources to improve your ggplot2 skills\n\nBooks\n\nggplot2: The Elements for Elegant Data Visualization in R\n\nCookbook for R\n\nAcknoweledgment\n\nThanks to Hadley Wickham for ggplot2 package: ggplot2 online documentation\n\nThanks to RStudio for ggplot2 cheatseet)\n\nInfos\n\nThis analysis was performed using R (ver. 3.2.4) and ggplot2 (ver 2.1.0).\n\nEnjoyed this article? I’d be very grateful if you’d help it spread by emailing it to a friend, or sharing it on Twitter, Facebook or Linked In.\n\nShow me some love with the like buttons below... Thank you and please don't forget to share and comment below!!\n\nAvez vous aimé cet article? Je vous serais très reconnaissant si vous aidiez à sa diffusion en l'envoyant par courriel à un ami ou en le partageant sur Twitter, Facebook ou Linked In.\n\nMontrez-moi un peu d'amour avec les like ci-dessous ... Merci et n'oubliez pas, s'il vous plaît, de partager et de commenter ci-dessous!\n\nRecommended for You!\n\nRecommended for you\n\nThis section contains best data science and self-development resources to help you on your path.\n\nWant to Learn More on R Programming and Data Science?\n\nFollow us by Email\n\nby FeedBurner\n\nOn Social Networks:\n\nGet involved :\n\nClick to follow us on Facebook and Google+ :\n\nComment this article by clicking on \"Discussion\" button (top-right position of this page)\n\nThis page has been seen 859729 times"
    }
}