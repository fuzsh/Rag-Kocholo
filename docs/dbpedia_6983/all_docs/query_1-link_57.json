{
    "id": "dbpedia_6983_1",
    "rank": 57,
    "data": {
        "url": "https://www.overleaf.com/learn/latex/Using_colors_in_LaTeX",
        "read_more_link": "",
        "language": "en",
        "title": "Using colors in LaTeX",
        "top_image": "https://cdn.overleaf.com/img/ol-brand/overleaf_og_logo.png",
        "meta_img": "https://cdn.overleaf.com/img/ol-brand/overleaf_og_logo.png",
        "images": [
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/2/2c/OLxcolor1brev2.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/b/b7/OLxcolorList.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/e/ef/OLxcolorList2.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/5/54/OLV2xcolordemorev.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/c/c5/OVLCOLORdemo3rev.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/4/45/AccessTheSVG2.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/0/0e/UserdefineColors.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/3/37/XcolorCustomColors2.png",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/c/c5/Pagecolorexample2.png",
            "https://images.ctfassets.net/nrgyaltdicpt/lSxgItJnwIlY9exJfB6Xv/bb5128b39b54b9f7c7a67b1161e34c1c/luacolorexample.svg",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/1/16/Lua-ul_example.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "An online LaTeX editor that’s easy to use. No installation, real-time collaboration, version control, hundreds of LaTeX templates, and more.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.overleaf.com/learn/latex/Using_colors_in_LaTeX",
        "text": "Introduction\n\nThis article explains how to use color in your LaTeX document via the color or xcolor packages. Note that user-level documentation of the color package is contained in The LaTeX standard graphics bundle.\n\nBoth packages provide a common set of commands for color manipulation, but xcolor is more flexible and supports a larger number of color models, so is the recommended approach.\n\nWe’ll start with the following example:\n\nOpen this xcolor example in Overleaf\n\nThis example produces the following output:\n\nIn this example, the package xcolor is imported with\n\nthen the command \\color{blue} sets the blue color for the current block of text. In this case for the itemize environment.\n\nThe code to typeset the horizontal line created by \\rule{\\linewidth}{0.5mm} is contained in a group, delimited by { and }, in order to keep the effects of the \\color{red} local to that group.\n\nNamed colors provided by the xcolor package\n\nAs noted in the xcolor package documentation, the following named colors are always available without needing to load any package options:\n\nAccessing additional named colors\n\nAdditional named colors can be accessed via the following xcolor package options:\n\ndvipsnames: loads 68 named colors (CMYK)\n\nsvgnames: loads 151 named colors (RGB)\n\nx11names: loads 317 named colors (RGB)\n\nFor example, if you write\n\nyou can access the following named colors:\n\nRefer to the xcolor package documentation for tabulated lists of colors provided by the svgnames and x11names options.\n\nExample usage\n\nThe following example uses named colors loaded via the dvipsnames option.\n\nOpen this xcolor example in Overleaf\n\nThis example produces the following output:\n\nTwo new commands are also used in the example:\n\n\\textcolor{red}{easily}: Changes the color of inline text. This command takes two parameters, the color to use and the text whose color is changed. In the example the word easily is printed in red.\n\n\\colorbox{BurntOrange}{orange background}: Changes the background color of the text passed in as the second argument. In the example above, the words orange background are typeset on a background color of BurntOrange.\n\nLoading and using named colors in the color package\n\nYou can also use the color package and load named colors via its usenames and dvipsnames package options:\n\nThe following code uses the color package to apply the same named colors used in the previous xcolor package example.\n\nOpen this color example in Overleaf\n\nThis example produces the same output as the previous xcolor version:\n\nDrivers and color\n\nUse of color when typesetting text or math was not part of the original design of TeX; instead, use/application of color was delegated to external “drivers” which converted TeX’s original output file format (DVI) into PostScript or PDF. In order for color to work, driver-specific instructions had to be “injected” into TeX’s output by using a built-in TeX command called \\special whose job is simply to allow code/data to pass through the typesetting process and become embedded into the output file. When the chosen driver (software) processed the typeset output it would detect the embedded code/data and act upon it to achieve whatever the user intended—such as the use of color.\n\nTimes have changed, and PDF is now by far the most common output format used by TeX engines, long supplanting the use of legacy DVI drivers and creation of PostScript. Users also have a greater choice of TeX engine to use for typesetting their LaTeX documents, most notably pdfTeX, XeTeX or LuaTeX/LuaHBTeX, so it is still important to take account of differences in those TeX engines—ensuring the correct mechanisms are used to insert color data (PDF instructions) into their PDF files. To support and accommodate the legacy DVI output format and the wider environment of TeX engines and workflows in use, you can, if required, configure the color or xcolor packages to use a particular “driver” so that LaTeX will generate color data using using the appropriate method.\n\nDrivers for color and xcolor\n\nThe color package provides out-of-the-box support for the following driver options:\n\ndvipdfmx, dvips, dvisvgm, luatex, pdftex and xetex\n\nThere are other options as described in the color package documentation.\n\nThe xcolor package provides the following driver options:\n\ndvips, xdvi, dvipdf, dvipdfm, dvipdfmx, luatex, pdftex, dvipsone, dviwindo, emtex, dviwin, oztex, textures, pctexps, pctexwin, pctexhp, pctex32, truetex, tcidvi, vtex and xetex.\n\nAutomatic color driver detection\n\nWhen typesetting your document LaTeX reads a configuration file called color.cfg which contains code that can determine if you are running pdfTeX, XeTeX or LuaTeX and automatically loads the appropriate driver (.def file) for you, so you don’t need to specify the driver package option for those engines.\n\nMore advanced example using the dvisvgm driver to create an SVG file\n\nThe following example uses the color package with options that load named colors and the dvisvgm driver to output color definitions/data using SVG code:\n\nSpecifically, the output file typeset by Overleaf is converted to SVG using a program called dvisvgm, which is part of TeX Live and available on our servers. To run dvisvgm, after the page is typeset, we use a latexmkrc file which is created when you open the following code in Overleaf:\n\nOpen this example to create an SVG file\n\nOnce Overleaf has finished compiling you can access the SVG graphic, called mygraphic.svg, by selecting Logs and outputs and choosing the Other logs and files dropdown list:\n\nCreating your own colors\n\nIt is possible to define your own colors, the manner in which the color is defined depends on the preferred color model. The following example uses 4 color models.\n\nOpen this example in Overleaf\n\nThis example produces the following output:\n\nThe command \\definecolor takes three parameters: the name of the new color, the model, and the color definition. Roughly speaking, each number represent how much of each color you add to the mix that makes up the final color.\n\nrgb: Red, Green, Blue. Three comma-separated values between 0 and 1 define the components of the color.\n\nRGB: The same as rgb, but the numbers are integers between 0 and 255.\n\ncmyk: Cyan, Magenta, Yellow and blacK. Comma-separated list of four numbers between 0 and 1 that determine the color according to the subtractive CMYK model used by commercial printers.\n\ngray: Grey scale. A single number between 0 and 1.\n\nIn the example, mypink1, mypink2 and mypink3 define the same color but for different models. You can actually see that the one defined by cmyk is slightly different.\n\nColors defined by either model can later be used within your document not only to set the color of the text, but for any other element that takes a color as parameter, for instance tables (you must add the table option to xcolor), graphic elements created with TikZ, plots, vertical rulers in multicolumn documents and code listings.\n\nxcolor-only color models\n\nThe xcolor package provides additional commands which provide support for more color models and friendly color mixing, as demonstrated in the following example:\n\nOpen this example in Overleaf\n\nThis example produces the following output:\n\nThree new colors are defined in this example, each one in a different manner.\n\n\\colorlet{LightRubineRed}{RubineRed!70}: A new color named LightRubineRed is created, this color has 70% the intensity of the original RubineRed color. You can think of it as a mixture of 70% RubineRed and 30% white. Defining colors like this lets you derive different tints of a main color—common practice in corporate branding. In the example, you can see the original RubineRed and the new LightRubineRed used in two consecutive horizontal rules.\n\n\\colorlet{Mycolor1}{green!10!orange}: A color named Mycolor1 is created with 10% green and 90% orange.\n\n\\definecolor{Mycolor2}{HTML}{00F9DE}: The color Mycolor2 is created using the HTML model. colors in this model must be created with 6 hexadecimal digits, the characters A, B,C, D, E and F must be in upper-case.\n\nThe color models that only xcolor supports are:\n\ncmy: cyan, magenta, yellow\n\nhsb: hue, saturation, brightness\n\nHTML: RRGGBB\n\nGray: Grayscale, a number between 1 and 15.\n\nwave: Wavelength, a number between 363 and 814. The number represents the wavelength of light, in nanometres (nm)\n\nSetting the page background color\n\nThe background color of the entire page can be easily changed with \\pagecolor. The following code demonstrates this, using the text of an earlier example::\n\nOpen this example in Overleaf\n\nThis example produces the following output:\n\nThe command \\pagecolor{black} set the page color to black. This is a switch command, meaning it will take effect in the entire document unless another switch command is used to revert it. \\nopagecolor will change the background back to normal.\n\nAdditional color packages for LuaLaTeX\n\nIn addition to the standard color and xcolor packages, LuaLaTeX supports the luacolor and lua-ul packages—both are written specifically for use with LuaLaTeX and neither is compatible with pdfLaTeX or XeLaTeX.\n\nThe luacolor package\n\nThe luacolor package redefines some internals of the standard color package commands using techniques unique to LuaTeX-based TeX engines.\n\nAlthough luacolor automatically incorporates the color package, if you want to do either of the following:\n\nuse specific options of the color package, such as \\usepackage[usenames,dvipsnames]{color}, or\n\nuse the xcolor package\n\nyou need to load the color or xcolor package prior to luacolor. For example, you can load the color package using:\n\nor load the xcolor package with:\n\nConsult the documentation of color and xcolor for details of package options.\n\nBy leveraging the capabilities of LuaLaTeX, luacolor enables more advanced applications of color; for example, colorizing individual glyphs within complex script languages or applying color to diacritical marks. luacolor also avoids kerning issues when applying color to single characters—see tex.stackexchange questions here and here for examples of that.\n\nThe lua-ul package\n\nThis package is mentioned because it has color highlighting features. It applies the advanced capabilities of LuaTeX to provide underlining, strikethough, and highlighting using methods in which kerning is not affected, underlined text can use arbitrary commands, hyphenation works and ligatures are preserved.\n\nExample: luacolor\n\nHere, we'll demonstrate using luacolor to colorize text typeset in Hindi and Arabic together with diacritics used on a Latin script (based on this example). The following example uses the babel package to configure LuaLaTeX to typeset Hindi and Arabic using fonts present on Overleaf.\n\nOpen this luacolor example in Overleaf.\n\nThis example produces the following output:\n\nExample: lua-ul\n\nThis example demonstrates the following lua-ul package commands:\n\n\\highLight[color]{text to highlight} which applies the (optional) color to text to highlight. Note the capital L in the spelling of \\highLight command!\n\n\\LuaULSetHighLightColor{default color}: this sets the default color used by the \\highLight command when the optional [color] is not specified.\n\nNote: the luacolor package must also be loaded when using the \\highLight command provided by the lua-ul package.\n\nOpen this lua-ul example in Overleaf.\n\nThis example produces the following output:\n\nFurther reading\n\nFor more information see:"
    }
}