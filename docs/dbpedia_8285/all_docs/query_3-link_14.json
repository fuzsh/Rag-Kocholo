{
    "id": "dbpedia_8285_3",
    "rank": 14,
    "data": {
        "url": "https://stackshare.io/stackups/mysql-vs-mysql-workbench",
        "read_more_link": "",
        "language": "en",
        "title": "What are the differences?",
        "top_image": "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
        "meta_img": "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
        "images": [
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1440/iFN2XAaA.png",
            "https://img.stackshare.io/service/915/EzEnKUIc.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/2445/ZKsJsucq_400x400.jpg",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1027/sql_server.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/5918/5bNX_lVF_400x400.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/5733/I0Ix_KWZ.jpg",
            "https://img.stackshare.io/service/1924/default_437b69de1bb8ef0ec297028e3caf75d539536eed.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/7096/809746be-0b96-4af0-aa2f-5d1aeaa82658.png",
            "https://img.stackshare.io/service/4319/descarga.jpeg",
            "https://img.stackshare.io/service/4319/descarga.jpeg",
            "https://img.stackshare.io/service/3107/D0pB_eET_400x400.jpg",
            "https://img.stackshare.io/service/7096/809746be-0b96-4af0-aa2f-5d1aeaa82658.png",
            "https://img.stackshare.io/service/10971/X6m3TwZo_400x400.jpg",
            "https://img.stackshare.io/service/7096/809746be-0b96-4af0-aa2f-5d1aeaa82658.png",
            "https://img.stackshare.io/service/116/cZLxNFZS.jpg",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1071/sqlite.jpg",
            "https://img.stackshare.io/service/116/cZLxNFZS.jpg",
            "https://img.stackshare.io/service/116/cZLxNFZS.jpg",
            "https://img.stackshare.io/service/2432/81KLTHHZ.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/991/hwUcGZ41_400x400.jpg",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1011/n1JRsFeB_400x400.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/5664/bdht_Cux_400x400.jpg",
            "https://img.stackshare.io/service/4319/descarga.jpeg",
            "https://img.stackshare.io/service/2102/3pl3dljQ_400x400.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1026/jT-HJYJg.png",
            "https://img.stackshare.io/service/1030/leaf-360x360.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1026/jT-HJYJg.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/2445/ZKsJsucq_400x400.jpg",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/11331/asp.net-core.png",
            "https://img.stackshare.io/service/2445/ZKsJsucq_400x400.jpg",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/company/363/thumb_e5d5db9bd2df8488fe8e61913e700c52ec9c13e4.jpg",
            "https://img.stackshare.io/company/9/thumb_fd54c4f9a2b59cf44646d3f2ff1a156c397d66c7.jpg",
            "https://img.stackshare.io/company/260/thumb_c077fc04bb219001b7a1ab10f90ebcdb00c143a9.png",
            "https://img.stackshare.io/company/304/thumb_65d89e78d6e735e81a8ec47f79e90698b9f8f2ef.jpg",
            "https://img.stackshare.io/company/233/thumb_4925133f809df40ad8bd9b2f5194a0e006ece07f.jpg",
            "https://img.stackshare.io/company/21101/thumb_4b66e1e5f8ca593d78eeba5e4ab192db7a908d7f.jpg",
            "https://img.stackshare.io/company/361/thumb_e3546291cb588866f36d272414698c91eb20264e.jpg",
            "https://img.stackshare.io/company/159488/thumb_1b3e44286f51675ec0a1838561c26c56a5674e1f.png",
            "https://img.stackshare.io/company/28703/thumb_a9569179949d3c7d15b88f0b752e2f1ae491e1b2.png",
            "https://img.stackshare.io/company/30584/thumb_7cc24ab83f067d1ab2bd89b0ee1846299129fb7b.jpg",
            "https://img.stackshare.io/company/26904/thumb_c68b51d4911d998e29412c6da98a52bffd553b09.png",
            "https://img.stackshare.io/company/33991/thumb_2aac2f3fd91c14bb684f3694a21f43f54105fe0e.png",
            "https://img.stackshare.io/company/168258/thumb_6023438dd13a6bc3f6b372dec9f5881205cb890d.png",
            "https://img.stackshare.io/company/25556/thumb_f7ce7ffee3bf75571b199f32d69f6f2dd7140242.png",
            "https://img.stackshare.io/service/460/thumb_Lu6cGu0z_400x400.png",
            "https://img.stackshare.io/service/669/thumb_34b3b9b42d07c33ac47ecdff75dd6f4f82aa70ee.jpg",
            "https://img.stackshare.io/service/1843/thumb_slick.png",
            "https://img.stackshare.io/service/2006/thumb_spring-framework-project-logo.png",
            "https://img.stackshare.io/service/389/thumb_amazon-dynamodb.png",
            "https://img.stackshare.io/service/2880/thumb_1024px-JSON_vector_logo.svg.png",
            "https://img.stackshare.io/service/386/thumb_amazon-redshift.png",
            "https://img.stackshare.io/service/1028/thumb_ASOhU5xJ.png",
            "https://img.stackshare.io/service/1071/thumb_sqlite.jpg",
            "https://img.stackshare.io/service/1615/thumb_mariadb-logo-400x400.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1063/kazUJooF_400x400.jpg",
            "https://img.stackshare.io/service/3922/F65UpOhT.png",
            "https://img.stackshare.io/service/993/pUBY5pVj.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/27/default_869c34d29acc794d60ecdd5d2b5bfc042a80a4ec.jpg",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1028/ASOhU5xJ.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1063/kazUJooF_400x400.jpg",
            "https://img.stackshare.io/service/2220/ca72c4715da998b0bf5d1c857958bed3.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/1063/kazUJooF_400x400.jpg",
            "https://img.stackshare.io/service/1209/javascript.jpeg",
            "https://img.stackshare.io/service/1011/n1JRsFeB_400x400.png",
            "https://img.stackshare.io/service/1025/logo-mysql-170x170.png",
            "https://img.stackshare.io/service/27/default_869c34d29acc794d60ecdd5d2b5bfc042a80a4ec.jpg",
            "https://img.stackshare.io/service/586/n4u37v9t_400x400.png",
            "https://img.stackshare.io/service/1020/OYIaJ1KK.png",
            "https://img.stackshare.io/service/1209/javascript.jpeg",
            "https://img.stackshare.io/service/27/default_869c34d29acc794d60ecdd5d2b5bfc042a80a4ec.jpg",
            "https://img.stackshare.io/service/993/pUBY5pVj.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "MySQL - The world's most popular open source database. MySQL WorkBench - A unified visual tool for database architects, developers, and DBAs.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "StackShare",
        "canonical_link": "https://stackshare.io/stackups/mysql-vs-mysql-workbench",
        "text": "The most important question is where are you planning to host? On-premise, or in the cloud.\n\nParticularly if you are planning to host in either AWS or Azure, then your first point of call should be the PaaS (Platform as a Service) databases supplied by these vendors, as you will find yourself requiring a lot less effort to support them, much easier Disaster Recovery options, and also, depending on how PAYG the database is that you use, potentially also much cheaper costs than having a dedicated database server.\n\nYour question regards 'Relational or not' is obviously key, and you need to consider both your required data structure, as well as the ACID requirements of your application model, as well as the non-functional requirements in terms of scalability, resilience, whether you want security authorisation at the highest application tier, or right down to 'row' level in the database, etc. - however please don't fall into the trap of considering 'NoSQL' as being single category. MongoDB, with its document-store type solution is a very different model to key-value-pair stores (like AWS DynamoDB), or column stores (like AWS RedShift) or for more complex data relationships, Entity Graph Stores (like AWS Neptune), to stores designed for tokenisation and text search (ElasticSearch) etc.\n\nAlso critical in all this is how many items you believe you need to index by. RDBMS/SQL stores are great for having as many indexes as you want, other than the slow-down in write speed, whereas databases like Amazon DynamoDB provide blisteringly fast read/write performance, but are very limited on key indexing capabilities.\n\nIt feels like you have most experience with SQL/RDBMS technologies, so for the simplest learning curve, and if your application fits it, then I'd personally start by looking at AWS Aurora https://aws.amazon.com/rds/aurora/ .\n\nIt sounds like a server-client relationship (central database) and while SQLite is probably the simplest, note that its performance is probably the worst of the top 20 or so choices you have. It is different from Firebase and MySQL (and most other databases) in that it is embedded in the product, although it could be embedded in your server itself.\n\nMySQL would require a separate MySQL db server, which means either two servers (one for MySQL, and one to provide your specific services to your client app) or both running on a single server machine. There are many alternatives in the same category as MySQL, and a choice of relational databases or document (NoSQL) databases. But architecturally, they are in the same category as MySQL, a separate db server that your application server would get its data from.\n\nFirebase is different yet again, in that it is a service that is already hosted by a company, providing many integrated features such as authentication and storage of user account info. However it does take care of many of the concerns with running a server, such as performance, scalability and management. There are some negatives that you should be aware of though: any investment of time and coding with Firebase is pretty much non-portable, in that you are stuck with Firebase going forward. If you needed to switch to a different service, not only would it be a different API, but it would be a different architecture and much of your coding would need to be discarded. Second, it's owned and run by Google now, so you have a large corporation backing it, but that also means they could decide to discontinue it without any real effect on the Google bottom line. Also some folks would have concerns with storing data on Google servers. That said, I think if you are aware of these in advance, and especially if you are a high school student, that Firebase is a fairly easy winner here. The server is already set up for you, the documentation is very complete and rich, with lots of examples, and Google is not going away. The main concern would be if it really is massive, there could be a rising cost to the service. I suspect though that it is not massive, even if everyone in a school used it. The number of concurrent connections would not be huge (probably not even into the hundreds, even if there are thousands of users).\n\nI'd go with Firebase even though you will need to learn their API, because you'll need to learn something one way or another. SQLite is a bit of a toy database, and MySQL is a real one but you (or someone) would need to manage that server on top of needing to develop the server and client app. With Firebase, much of the server already exists, including a professionally hosted database. There are tons of high-level features provided and initial cost is somewhere between very low and zero.\n\nPart of this is dependent on what language you want to write this in. Javascript for a cross-platform client app (I'd use Vue.js + Vuetify for UI, and provide it as a web app and optionally wrap that with Electron for a desktop app, Apache Cordova for mobile). Server could be Javascript with an Express-based REST API on Node.js, talking to Firebase for services.\n\nIf you were a Java developer though, all this goes out the window and I'd recommend a simple Java server with Javalin for REST API, and embedded ObjectDB for database storage (combined into one server). ObjectDB is very very fast and can be separated out into a scalable server if this became truly massive. But you would probably never need to go that far.\n\nAll of this is a lot of work. I hope this isn't for something like an assignment. It is in the order of 6 months of work if you know what you're doing, all year if you're learning as you go.\n\nDon't think you can go wrong with MySQL or postgresql. python+postgres is VERY well supported stack and can do almost anything. Great visualization and administrative tools for both. There are some data-mismatch problems, however.. node.js/python with mongodb is a bit more modern and makes it trivial to \"serialize\" data with sprinklings of indexes. If you're using go-lang, then RocksDB is a great high-performance data-modeling base (it's not relational how-ever) It's more like a building-block for key-value store. But it's ACID so you CAN build relational systems on top. I've used LevelDB for other projects (Java/C) (similar architecture and works great on android - chrome uses it for it's metadata-storage). Rock/Level can achieve multi-million writes on cheap hardware thanks to it's trade-offs.\n\nI'm very familiar with SQLite.. Personally my least favorite, but it's the most portable database format, and it does support ACID.. I have many gripes, but biggest issue is parallel access (you really need a single process/thread to own the data-model, then use IPC to communicate with your process/thread).. (same could be said for LevelDB, but that's so efficient, it's almost never an issue).\n\nIf your'e using Java, then JavaDB/DerbyDB/HSQLDB are EXCELLENT systems.. highly multi-threaded, good stand-alone tools. (embedded or TCP-connected). Perfect for unit-tests. Can use simple dumb portable formats (e.g. text-file containing only inserts) all the way to classic journaled binary B-tree formats to pure-in-memory. Java has a lot of overhead, so this is only really viable if you're already using Java in your project.\n\nFor high performance \"memsql\" is mysql API to a hybrid in-memory index + on-disk column-database (feels like classic SQL to you though). Falls into the mysql-swiss-army-knife tool-kit.\n\nSimilarly with in-memory there is \"redis\".. Absolutely a joy to work with. It too is a specialty swiss army knife. Steer clear of redis for primary data that you can't lose.. while redis does support persisting data, it isn't very efficient and will become the bottleneck. redis is great for micro-queue's, topics, stat-aggregators, message-repositories (password-management systems, where writes are rare so persistance is viable). Plus I love that redis uses a pure-text protocol so I can netcat or telnet directly into it and do stuff.\n\nI've loved cloud-data-stores.. Amazon \"DynamoDB\" or Google BigTable are awesome!!! Cheap compared to normal hosting fees of an AWS EC2 instance.. You can play all day.. put a terabyte up, then blow it away.. pay for what you play with. It's a very very different data-model though.. They give you a very very few set of tricks that let you do complex data-modeling - and you have to be clever and have enough foresight to not block yourself into a hole (or have customer abuse expensive queries).\n\nThen there's Cassandra/Hadoop (HBase). These are petabyte scale databases (technically so is Dynamo/BigTable). They're incredibly efficient at what they do. And they have a lot of plugins to do almost anything you need. I personally love these the best (and RocksDB/LevelDB are like their infant children offspring). You can run these on your laptop (unlike Amazon/Google engines above). But their discipline is very different than all the other's above."
    }
}