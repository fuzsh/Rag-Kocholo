{
    "id": "dbpedia_8285_3",
    "rank": 24,
    "data": {
        "url": "https://aws.amazon.com/compare/the-difference-between-mongodb-vs-mysql/",
        "read_more_link": "",
        "language": "en",
        "title": "Difference Between Database Management Systems",
        "top_image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "meta_img": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "images": [
            "https://d1.awsstatic.com/Free-Tier_64.f14d1a130811a363bbea22de4bb589f9ab801dfb.png",
            "https://d1.awsstatic.com/Database_64.294d32ec830542fdde57a8728ce4360647c1a16d.png",
            "https://d1.awsstatic.com/Learn-More_64.dc6d454a262eb880a9dd0d8cb283dca5bc00cb18.png",
            "https://d1.awsstatic.com/All-Products_64.78a4c2cdfdd82b7abc3fda6b44371491bdf5963e.png",
            "https://d1.awsstatic.com/AWS%20Databases/why-move-to-managed-2.65a83fae03ca12d051d2eba03eb4e45317f8f34b.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_03_Start-Building_SqInk.6a1ef4429a6604cda9b0857084aa13e2ee4eebca.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_01_Product-Features_SqInk.a8d5666758afc5121b4eb818ae18126031c4b61e.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "What's the difference between MongoDB vs MySQL? How to use MongoDB vs MySQL with AWS.",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services, Inc.",
        "canonical_link": "https://aws.amazon.com/compare/the-difference-between-mongodb-vs-mysql/",
        "text": "Both MySQL and MongoDB are database management systems. They store data and have a built-in UI and query language, so you can add, edit, modify, and analyze data.\n\nOpen-source licenses\n\nMySQL and early versions of MongoDB both have open-source licenses. You can download the open-source versions for free. Then you can modify the code depending on what you need to do with it.\n\nMySQL is under the GNU General Public License. All versions of MongoDB released before October 16, 2018 are available under the GNU Affero General Public License.\n\nIndexing support\n\nMySQL and MongoDB use indexing to improve query speeds and performance. Indexes are database structures that link to frequently accessed data. The index helps find and retrieve data very quickly.\n\nBoth MySQL and MongoDB database platforms use hash indexes, B-tree indexes, and several others.\n\nUser-friendly interfaces\n\nMongoDB and MySQL are both easy to use. They offer a natural language-based query language to update and read data. They also offer a graphical user interface (GUI) to manage and analyze data more visually.\n\nProgramming languages\n\nMySQL and MongoDB are compatible with a variety of the same programming languages. You can use Java, Python, Node.js, server-side PHP, Ruby, and C# with both MongoDB and MySQL.\n\nSecurity\n\nBoth MySQL and MongoDB use authentication, access control, and encryption to ensure the security of their databases. They use TLS/SSL encryption to protect data in transit and at rest. They also allow you to define different levels of user access.\n\nDocumentation and community support\n\nMySQL and MongoDB each have detailed official documentation on their websites. Their tutorials, manuals, and guides contain complete instructions to install, configure, and run operative tasks.\n\nMongoDB and MySQL also have an active developer community to answer questions and help you with troubleshooting. They both also offer enterprise editions with dedicated support for your specific requirements.\n\nMySQL is a relational database management system, while MongoDB is a NoSQL database system. You can read more about these at the What is a Relational Database? and What is NoSQL? pages.\n\nMySQL uses SQL, which most developers have experience with. Conversely, MongoDB uses MongoDB Query Language (MQL). While there are similarities between MQL and SQL, MQL typically requires a bit of extra work to learn.\n\nNext, we cover some other key differences.\n\nData model\n\nMySQL is a relational database system that stores data in columns, rows, and tables. You store data in rows, with each column representing a different type of data. You then define relationships between data by using foreign keys and primary keys. Each table has a primary key that you use to identify it, with the foreign key creating a relationship.\n\nMongoDB is a document-oriented database that stores all of its data as Binary JSON (BSON) documents. BSON allows you to serialize many forms of data. Using BSON documents allows you to store unstructured, semi-structured, and structured data. Instead of a database schema, MongoDB uses a flexible approach, storing documents in collections.\n\nScalability\n\nIn a MySQL database system, the available options for scaling are limited. You can choose from these options:\n\nVertical scalability by adding more resources to the current database server\n\nRead replication by creating read-only copies of the database on other servers\n\nRead replication is restricted to a maximum of five copies. Replicas may also lag behind the main copy, which creates performance issues at scale. Vertical scalability is also limited to the infrastructure you use.\n\nIn contrast, MongoDB design offers a significant advantage in terms of scalability. It has two key features for scaling:\n\nReplica sets—groups of MongoDB servers that hold identical data\n\nSharding—different parts of your data distributed across different servers\n\nMongoDB allows you to create sharded clusters, so portions of your data are replicated across multiple servers. For example, if you have a large number of customer records, you can distribute them so that names from A-J and names from K-Z are in their own replica set. MongoDB can thus scale horizontally to optimize both read and write performance at scale.\n\nPerformance\n\nMySQL is designed to enact high-performance joins across multiple tables that are appropriately indexed. However, it requires data to be inserted row by row, so write performance is slower.\n\nMongoDB documents follow a hierarchical data model and keep most of the data in a single document, reducing the need for joins across multiple documents. Joins are supported via the $lookup operation, but they are not optimized for performance. However, MongoDB offers an insertMany() API for rapidly inserting data, prioritizing write performance.\n\nFlexibility\n\nAs a relational database management system, MySQL has a more rigid structure than MongoDB. MySQL uses a fixed schema and organizes data into a row and table. You have to structure data and fit it into a tabular system to use MySQL.\n\nBy storing data as JSON documents, MongoDB lets you build complicated applications with many distinct data types. For instance, you can create new fields by updating nested array fields. You can also use an aggregation pipeline—a MongoDB feature that lets you transform data by combining multiple operations into a single workflow.\n\nAccess control\n\nWithin MongoDB, you can control access on an operation, collection, or database level. It uses Kerberos, X.509, and LDAP certificates to authenticate users. In contrast, MySQL allows you to restrict user access on a user, database, and table level. MySQL uses its own authentication system. It presents an additional security vulnerability in SQL injection attacks, which MongoDB’s schema-free approach avoids.\n\nAmazon Web Services (AWS) offers multiple services for your MongoDB and MySQL requirements.\n\nAmazon DocumentDB (with MongoDB compatibility) is a fully managed native JSON document database. It makes it easy and cost-effective to operate critical document workloads at virtually any scale without managing infrastructure. Amazon DocumentDB simplifies your architecture by providing built-in security best practices, continuous backups, and native integrations with other AWS services.\n\nAmazon Relational Database Service (Amazon RDS) is a collection of fully managed services that make it easy to set up, operate, and scale relational databases in the cloud. Amazon RDS supports seven popular engines, one of which is MySQL. Amazon RDS for MySQL supports MySQL Community Edition versions 5.7 and 8.0.\n\nYou can also choose our cloud-centered solution Amazon Redshift instead of MySQL. It uses SQL to analyze structured and semi-structured data across data warehouses, operational databases, and data lakes, using AWS-designed hardware and machine learning to deliver the best price performance at any scale.\n\nYou get many benefits when you use Amazon Redshift:\n\nBreak down data silos and gain real-time insight into all your data\n\nGain up to five times the performance against any other cloud data warehouse\n\nGet data insight in seconds without worrying about data infrastructure management\n\nGet started with MongoDB and MySQL on AWS by creating an account today."
    }
}