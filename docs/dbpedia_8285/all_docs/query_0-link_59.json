{
    "id": "dbpedia_8285_0",
    "rank": 59,
    "data": {
        "url": "https://hevodata.com/learn/mysql-connector-net/",
        "read_more_link": "",
        "language": "en",
        "title": "MySQL Connector NET 101: Installation, Connection & Usage Simplified - Learn",
        "top_image": "https://res.cloudinary.com/hevo/images/f_webp,q_auto/v1685948550/hevo-learn-1/mysql-connector-net-Featured-Image/mysql-connector-net-Featured-Image.png?_i=AA",
        "meta_img": "https://res.cloudinary.com/hevo/images/f_webp,q_auto/v1685948550/hevo-learn-1/mysql-connector-net-Featured-Image/mysql-connector-net-Featured-Image.png?_i=AA",
        "images": [
            "https://res.cloudinary.com/hevo/image/upload/v1684393936/hevo-logos-v2/logo-horizontal/black/logo_cqvfsz.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395814/hevo-website/icons/blog-icon_dyyxou.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1679319423/hevo-website/icons/Learn_dmj8xm.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395854/hevo-website/icons/success-story-icon_j5dwiy.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395917/hevo-website/icons/ebook-icon_gpvq1j.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650597746/hevo-website/icons/play-orange_mymqko.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395882/hevo-website/icons/webinar-icon_p4m0gm.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395944/hevo-website/icons/docs-icon_umhq5b.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1650395967/hevo-website/icons/api-icon_ntmmor.svg",
            "https://res.cloudinary.com/hevo/images/f_webp,q_auto/v1685958167/hevo-learn-1/Using-mysqlcheck-MySQL/Using-mysqlcheck-MySQL.png?_i=AA",
            "https://res.cloudinary.com/hevo/images/w_768,h_432/f_webp,q_auto/v1723198067/A_vs_B_3_aiq4do/A_vs_B_3_aiq4do.png?_i=AA",
            "https://res.cloudinary.com/hevo/images/w_768,h_432/f_webp,q_auto/v1723197260/hevo-learn-1/No-code_data_formatter_sicsza/No-code_data_formatter_sicsza.png?_i=AA",
            "https://res.cloudinary.com/hevo/images/w_768,h_432/f_webp,q_auto/v1723115801/hevo-learn-1/APower_BI_COUNTIF_Function_FI_rnpari/APower_BI_COUNTIF_Function_FI_rnpari.jpg?_i=AA",
            "https://res.cloudinary.com/hevo/image/upload/v1684394045/hevo-logos-v2/logo-horizontal/white/logo_zrn99q.svg",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,h_20/v1621528401/hevo-website/investors-footer/chiratae_j0fr47.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,h_20/v1621528401/hevo-website/investors-footer/qualgro_attcoq.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,h_20/v1621528401/hevo-website/investors-footer/sequoia_bshgwe.png",
            "https://res.cloudinary.com/hevo/image/upload/v1661155017/hevo-website/news/TechCrunch_sy4cjz.png",
            "https://res.cloudinary.com/hevo/image/upload/v1661154933/hevo-website/news/Yourstory_x1amqo.png",
            "https://res.cloudinary.com/hevo/image/upload/v1661155209/hevo-website/news/The_Economics_Times_qwi4ay.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,w_120/v1621528581/hevo-website/security/HIPAA_ib55zc.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,w_120/v1694596315/hevo-website/security/GDPR_nhkboe.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,w_120/v1621528581/hevo-website/security/HIPAA_ib55zc.png",
            "https://res.cloudinary.com/hevo/image/upload/f_auto,q_auto,w_120/v1694596315/hevo-website/security/CCPA_n0wham.png",
            "https://res.cloudinary.com/hevo/image/upload/v1663058308/hevo-blog/icons/close-white_aakthq_cwg6pm.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1645798343/hevo-blog/close-grey_a4wzsp.svg",
            "https://res.cloudinary.com/hevo/image/upload/v1663051656/hevo-blog/icons/btn-secondary-loading_ifbmq0.svg",
            "https://www.facebook.com/tr?id=3042478099207429&ev=PageView&noscript=1",
            "https://px.ads.linkedin.com/collect/?pid=208339&fmt=gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sanchit Agarwal",
            "www.facebook.com"
        ],
        "publish_date": "2022-02-01T12:06:59+05:30",
        "summary": "",
        "meta_description": "This article provides you with a stepwise guide to effectively install and use MySQL Connector NET.",
        "meta_lang": "en",
        "meta_favicon": "https://res.cloudinary.com/hevo/images/w_32,h_32,c_fill/f_webp,q_auto/v1685872133/cropped-Hevo-Brand-@2x_1730446e4fb/cropped-Hevo-Brand-@2x_1730446e4fb.png?_i=AA",
        "meta_site_name": "Learn | Hevo",
        "canonical_link": "https://hevodata.com/learn/mysql-connector-net/",
        "text": "A growing business always finds it challenging to effectively process and handle the exponentially rising volumes of data. This requires a robust all-in-one solution that is scalable, effective, reliable, and secure. MySQL is such a powerful Open-Source Relational Database Management System that provides full Standard SQL support to quickly query, manipulate & add data to your MySQL Tables.\n\nTo develop a connection with a database, and start querying data you can use MySQL Connector NET. It is a completely managed Data Provider that allows you to create .NET applications requiring secure & high-performance Data Connectivity with MySQL.\n\nIn this article, you will learn how to effectively set up & use MySQL Connector NET.\n\nWhat is MySQL?\n\nMySQL is a popular Open-Source Relational Database Management System. MySQL data is stored in tables consisting of rows and columns. Introduced in 1995, MySQL is completely developed, distributed, and maintained by Oracle Corporation. Looking over the technical side, MySQL is written in the C and C ++ languages. MySQL is compatible with multiple platforms such as Microsoft Windows, Oracle Solaris, AIX, Symbian, Linux, and macOS. You can use SQL commands to retrieve, change or add data from your MySQL tables. MySQL is also a vital component of the Modern LAMP stack, which consists of a Linux-based Operating System, Apache Web Server, MySQL Database, and PHP for processing.\n\nSQL can also be used to define the table schema or even configure the relationship between the tables in the database. Client-Side Graphical User Interfaces such as MySQL WorkBench, SequelPro, or DBVisualizer can be used to type the SQL commands and the server will respond with the requested information. You can even set up a connection with a database using the MySQL Connector NET and query data. MySQL also offers a paid Enterprise version which includes premium support services and several extensions that can be installed as Server Plugins.\n\nKey Features of MySQL\n\nMySQL is widely used by organizations like Facebook, Flickr, Twitter, Wikipedia, and YouTube. This is due to the following set of MySQL’s eye-catching features:\n\nEase of Operation: With MySQL, you can work with a diverse set of programming languages ​​such as PHP, PERL, C, C ++, and JAVA. It also provides a set of intuitive tools to simplify time-consuming tasks such as Server Management, Reporting, and Data Analysis. Allowing you to work with a broader range of datasets, MySQL offers full support for several Data structures, JSON and Geospatial data, as well as Logical, Numeric, Alphanumeric, Date, and Time data types.\n\nFirst-rate Performance: MySQL delivers best-in-class query performance across a variety of clustered servers. It provides a fast-loading utility with a separate memory cache and table index partitioning. MySQL can also efficiently handle fluctuating workloads and process large volumes of data at optimal speeds. This allows you to store more than 50 million rows of data in a table with a table’s default file size limit of 4 GB. However, depending on the configuration of the operating system, this can be increased to a theoretical limit of 8 million terabytes (TB).\n\nOpen-Source: MySQL is under the GNU General Public License (GPL), which means it will always be freely available. It provides you the freedom to customize it on Oracle’s Open-Source MySQL codebase based on your needs. Since it is an Open-Source software, a large community has grown that regularly enriches MySQL’s documentation and its online support culture.\n\nLocalization: To make it user-friendly, MySQL supports multiple character sets, including latin1 (cp1252), german, big5, ujis, and more. You can also set the error message language that the server provides to the client. The MySQL Server Time can also be dynamically changed with the ability to set specific time zones for individual clients.\n\nData Security: MySQL provides you full control over the Data Access Control settings. Robust mechanisms such as Access Privilege Systems and User Account Management allow you to regulate who can view or use your MySQL data. MySQL sets the highest standard with Host-based Verification and Password Encryption.\n\nWhat is MySQL Connector NET?\n\nMySQL Connector NET is a completely managed ADO.NET (Activex Data Object Network Enable Technologies) Data Provider. A Data Provider in general is used to establish a connection with a database, run commands and retrieve data. Similarly, MySQL Connector NET allows you to build .NET applications requiring secure & high-performance data connectivity with MySQL. Written fully in C#, MySQL Connector NET executes the necessary ADO.NET interfaces and integrates them into ADO.NET-aware tools.\n\nIt modifies the Entity Framework Core to operate with MySQL data and facilitates compression in the .NET Driver implementation. MySQL Connector NET also extends full cross-platform support to Linux and macOS. You can easily run MySQL Connector NET with Microsoft Visual Studio. Currently, MySQL Connector NET 8.0 is running which is a continuation of Connector NET 7.0. The older version i.e. MySQL Connector NET 6.10 has reached end-of-service. You can check out the MySQL Connector NET Release Notes to keep a tab on the modifications and features available in various versions.\n\nWhat MySQL Connector NET versions are supported?\n\nConnector/Net is available in several versions:\n\nMySQL 5.7, 5.6, 5.5, 5.1, and 5.0 are supported by Connector/Net 6.7. Entity Framework 5 support, built-in load balancing (to be used with a backend that implements either MySQL Replication or MySQL Clustering), a Memcached client (compatible with the Innodb Memcached plugin), and support for Windows Runtime (WinRT) to write store apps are just a few of the notable new features. This version also removes all Visual Studio Integration features, which are now available separately as MySQL for Visual Studio.\n\nMySQL Server 5.7, 5.6, 5.5, 5.1, and 5.0 are all supported by Connector/Net 6.6. Stored procedure debugging in Microsoft Visual Studio, pluggable authentication support, including the ability to write your own authentication plugins, Entity Framework 4.3 Code First support, and enhancements to partial trust support to allow hosting services to deploy applications without installing the Connector/Net library in the GAC are just a few of the notable new features.\n\nMySQL Server 5.7, 5.6, 5.5, 5.1, and 5.0 are all supported by Connector/Net 6.5. Interceptor classes for exceptions and commands, support for MySQL 5.6 fractional seconds, better partial-trust support, and improved IntelliSense, including auto-completion when editing stored procedures or.mysql files, are just a few of the new features.\n\nMySQL Server 5.6, 5.5, 5.1, and 5.0 are supported by Connector/Net 6.4. Support for Windows authentication (when connecting to MySQL Server 5.5+), client-side table caching, simple connection fail-over support, and improved SQL generation from the Entity Framework provider are all new features. Connector/Net version 1.0 is no longer supported.\n\nMySQL Server 5.6, 5.5, 5.1, and 5.0 are supported by Connector/Net 6.3. Integration with Visual Studio 2010, as well as the availability of a DDL T4 template for Entity Framework and a custom MySQL SQL Editor, are all noteworthy new features. Refactored transaction scope is another new feature: Connector/Net now supports nested transactions in a scope where they all use the same connection string. This Connector/Net version is no longer supported.\n\nMySQL Server 5.6, 5.5, 5.1, 5.0, and 4.1 are all supported by Connector/Net 6.2. A new logging system and client SSL certificates are two notable new features. This version of Connector/Net is no longer available for download.\n\nMySQL Server 5.6, 5.5, 5.1, 5.0, and 4.1 are now supported by Connector/Net 6.1. The MySQL Website Configuration Tool and a Session State Provider are two new features that are particularly useful. Connector/Net version 1.1 is no longer supported.\n\nMySQL Server 5.5, 5.1, 5.0, and 4.1 are all supported in Connector/Net 6.0. Connector/Net version 1.1 is no longer supported.\n\nMySQL Server 5.5, 5.1, 5.0, and 4.1 features are now supported by Connector/Net 5.2. Compact Framework 2.0, a new stored procedure parser, and improvements to GetSchema are also included in Connector/Net 5.2. As a standard installable component, Connector/Net 5.2 includes the Visual Studio Plugin. Connector/Net version 1.0 is no longer supported.\n\nMySQL Server 5.5, 5.1, 5.0, 4.1, and 4.0 features are supported with Connector/Net 5.1. Compact Framework 2.0, a new stored procedure parser, and improvements to GetSchema are also included in Connector/Net 5.1. As a standard installable component, Connector/Net 5.1 includes the Visual Studio Plugin. Connector/Net version 1.1 is no longer supported.\n\nMySQL Server features 5.1, 5.0, 4.1, and 4.0 are supported by Connector/Net 5.0. ADO.Net 2.0 interfaces and subclasses are fully supported in Connector/Net 5.0, as are the usage advisor and performance monitor (PerfMon) hooks. Connector/Net version 1.1 is no longer supported.\n\nConnector/Net 1.0 includes full compatibility with the ADO.NET driver interface and support for MySQL Server 5.0, 4.1, and 4.0 features. Connector/Net version 1.0 is no longer supported.\n\nHow do you Manage a Connection Pool in Connector/NET?\n\nWith database-intensive applications, the MySQL Connector/NET supports connection pooling for improved performance and scalability. By default, this is turned on. Using the connection string options, you can turn it off or change its performance characteristics. Pooling, Connection Reset, Connection Lifetime, Cache Server Properties, Max Pool Size, and Min Pool Size are all terms used to describe how a connection is set up.\n\nWhen a client disposes of a MySqlConnection, connection pooling keeps the native connection to the server alive. As a result, rather than creating a new native connection, a new MySqlConnection object is created from the connection pool. This boosts efficiency.\n\nGuidelines:\n\nAllowing the connection pooling system to manage all connections is the best way to ensure that everything works as it should. Do not create a MySqlConnection instance that is globally accessible and then manually open and close it. This disrupts the pooling process, resulting in unpredictable results or even exceptions.\n\nAvoiding manually creating a MySqlConnection object is one way to make things easier. Use the overloaded methods with a connection string as an argument instead. Connector/NET takes this approach and uses the connection pooling system to create, open, close, and destruct connections automatically.\n\nThis approach is used by Typed Datasets, as well as the MembershipProvider and RoleProvider classes. Most classes that accept a MySqlConnection as an argument also accept a connection string as an argument. MySqlDataAdapter is one of them.\n\nInstead of manually creating MySqlCommand objects, you can use the MySqlHelper class’s static methods. These methods take a connection string as an argument and support connection pooling completely.\n\nResource Usage:\n\nEvery three minutes, Connector/NET runs a background job that removes connections from the pool that have been idle for more than three minutes. Both the client and the server benefit from the pool cleanup. Because every connection on the client uses a socket, and every connection on the server uses a socket and a thread, this is the case.\n\nThere are a lot of them. A connection string can now include multiple endpoints (server:port) with connection pooling enabled starting with Connector/NET 8.0.19. Connector/NET attempts to connect to one of the addresses in the pool at runtime (or by priority if one is provided). Connector/NET selects another address until the set of addresses is exhausted if the connection attempt fails. Every two minutes, endpoints that fail are retried. The connection pooling mechanism manages successful connections.\n\nHow to use MySQL Connector NET?\n\nTo get started with effectively using the MySQL Connector NET, you can go through the following critical aspects:\n\nInstalling MySQL Connector NET\n\nCreating a MySQL Connector NET Connection\n\nRetrieving Data\n\n1) Installing MySQL Connector NET\n\nMySQL Connector NET can be easily installed on any platform that supports .NET Framework, .NET Core, and Mono. For example, Windows and Unix. You can select any of these methods to install MySQL Connector NET:\n\nMethod 1: The recommended and effective method for Windows OS is by downloading & installing the MySQL Installer. While going through the installation wizard, choose and install the Connector NET product.\n\nMethod 2: Another way is via the Windows Installer (.msi) Installation Package named as mysql-connector-net-version.msi, where version denotes the Connector/NET version. Follow the simple steps for the installation:\n\nStep 1: Open the MSI installer and click on the Next button.\n\nStep 2: You can now choose from Typical, Complete, or Custom Installation. A Typical Installation is a general-purpose approach whereas the Complete Installation installs all the files available. A Custom Installation allows you to select the components you like to install. Click on the Next button after choosing the desired installation.\n\nStep 3: After the successful installation, click on the Finish button to exit the installer.\n\nStep 4: Alternatively, you can directly install via the /quiet or /q command-line option with the msiexec tool. Though, it doesn’t provide any options, prompts, messages, or dialog boxes.\n\nC:> msiexec /package connector-net.msi /quiet\n\nMethod 3: You can also use the NuGet gallery to install or upgrade MySQL Connector NET. You can visit NuGet Gallery to check out the variety of client tools for a convenient installation.\n\nMethod 4: For installing on Unix, you can follow the simple steps given below:\n\nStep 1: Firstly, ensure that you have Mono installed on your system by the following command.\n\n$> mono --version\n\nAlso, make sure that the Mono C# compiler is installed for compiling the C# Source code.\n\nStep 2: Now, you can download the mysql-connector-net-version-noinstall.zip and extract its components to a directory of your choice, for instance: ~/connector-net/. Navigate to the directory where you extracted the zip file and go to the bin subfolder. Check that MySql.Data.dll is present.\n\nStep 3: In the current directory, execute the following command to register the Connector/NET component, MySql.Data, in the Global Assembly Cache (GAC).\n\n#> gacutil /i MySql.Data.dll\n\nYou are now ready to compile your applications, for example:\n\n$> gmcs -r:System.dll -r:System.Data.dll -r:MySql.Data.dll NewApplication.cs\n\nMethod 5: For complete control, you can build and customize the MySQL Connector NET from the source code. You can Download the Source Code and build the Connector using Visual Studio or .NET Core CLI. For more information on the installation methods, you can visit the MySQL Connector NET Installation page.\n\n2) Creating a MySQL Connector NET Connection\n\nFor any interaction to happen between the .NET application and the MySQL Server, you must start and configure the MySqlConnection object. Follow the easy steps given below to get started:\n\nStep 1: A Connection String consisting of several key-value pairs, separated by semicolons is essential for configuring the MySqlConnection object. An example string given below connects to a MySQL Server at “198.0.0.1”, with a user name of “main” and a password of “68375”.\n\n\"server=198.0.0.1;uid=main;pwd=68375;database=sample\"\n\nAfter creating the Connection String, you can use the following C# program to open a connection with a single server:\n\nMySql.Data.MySqlClient.MySqlConnection conn; string sampleConnectionString; sampleConnectionString = \"server=198.0.0.1;uid=main;\" + \"pwd=68375;database=sample\"; try { conn = new MySql.Data.MySqlClient.MySqlConnection(); conn.ConnectionString = sampleConnectionString; conn.Open(); } catch (MySql.Data.MySqlClient.MySqlException ex) { MessageBox.Show(ex.Message); }\n\nA similar code for Visual Studio is:\n\nDim conn As New MySql.Data.MySqlClient.MySqlConnection Dim myConnectionString as String sampleConnectionString = \"server=198.0.0.1;\" _ & \"uid=main;\" _ & \"pwd=68375;\" _ & \"database=sample\" Try conn.ConnectionString = sampleConnectionString conn.Open() Catch ex As MySql.Data.MySqlClient.MySqlException MessageBox.Show(ex.Message) End Try\n\nStep 2: You can follow a similar approach to establish a connection for Multiple Hosts with Failover. A sample Connection String for both classic MySQL protocol and X Protocol connections is as follows:\n\n// classic protocol example \"server=142.0.0.1:5508,198.1.10.10:5507,localhost:5508;uid=test;password=xxxx\" // X Protocol example mysqlx://test:test@[198.1.10.10:5507,142.0.0.1:5508]\n\nStep 3: DNS Service Records can also be used for providing Failover, Load Balancing, and Replication services when multiple MySQL instances provide the same service in your installation. The following sample C# code shows how to easily open a connection using DNS SRV records by adding the DNS-SRV connection option to your Connection String.\n\nvar conn = new MySqlConnection(\"server=_mysql._tcp.jkl.efg.com.;dns-srv=true;\" + \"user id=main;password=****;database=sample\");\n\nNote: Connection Pooling System automatically manages all connections. Regular background checks every three minutes are carried for removing connections from the pool that have been idle (unused) for more than three minutes. This frees up the essential resources on both the client-side and server-side. As a best practice, try creating MySqlCommand objects via static methods of the MySqlHelper Class rather than manually. This allows the Connection Pooling System of the MySQL Connector NET to automatically build, open, close, and end connections for best performance.\n\n3) Retrieving Data\n\nSeveral MySQL Connector NET Classes assist in executing queries and statements and managing query results. The most commonly used is the MySqlCommand class. This class’s methods allow you to query, add, insert or update a database. For faster execution, you can organize the MySqlCommand as a Prepared Statement or a stored procedure. The MySqCommandl consists of properties namely CommandText and CommandType Properties, Parameters Property, Attributes Property, and CommandTimeout Property.\n\nAs an example, let’s discuss the Command Type Property. By Default, the CommandType type is set to “Text” for executing queries and other SQL commands. For Instance, if the CommandType is set to “TableDirect” then all the rows and columns of the table are returned once you have called the execute methods. This is similar to the SQL statement “SELECT * ” and the following code can be used to obtain the said output.\n\n... MySqlCommand cmd = new MySqlCommand(); cmd.CommandText = \"mytable\"; cmd.Connection = someConnection; cmd.CommandType = CommandType.TableDirect; MySqlDataReader reader = cmd.ExecuteReader(); while (reader.Read()) { Console.WriteLn(reader[0], reader[1]...); } ...\n\nYou can check out the Official Documentation to know more about MySQLCommand and several other MySQL Connector NET classes and methods such as BulkLoader, GetSchema() method, etc.\n\nConnection Errors in C# and Visual Basic: How to Handle Them\n\nBecause connecting to an external server can be unpredictable, your.NET application should include error handling. The MySqlConnection class will return a MySqlException object if there is a connection error. When dealing with errors, this object has two properties that are useful:\n\nMessage: A textual description of the current exception.\n\nThe MySQL error number is a number.\n\nYou can adjust your application’s response based on the error number when dealing with errors. When connecting, the following are the two most common error codes:\n\n0: Server cannot be reached.\n\n1045: User name, password, or both are invalid.\n\nThe following code example demonstrates how to manage an application’s response based on the actual error:\n\nC# Example:\n\nMySql.Data.MySqlClient.MySqlConnection conn; string myConnectionString; myConnectionString = \"server=127.0.0.1;uid=root;\" + \"pwd=12345;database=test\"; try { conn = new MySql.Data.MySqlClient.MySqlConnection(myConnectionString); conn.Open(); } catch (MySql.Data.MySqlClient.MySqlException ex) { switch (ex.Number) { case 0: MessageBox.Show(\"Cannot connect to server. Contact administrator\"); break; case 1045: MessageBox.Show(\"Invalid username/password, please try again\"); break; } }\n\nVisual Basic Example:\n\nDim myConnectionString as String myConnectionString = \"server=127.0.0.1;\" _ & \"uid=root;\" _ & \"pwd=12345;\" _ & \"database=test\" Try Dim conn As New MySql.Data.MySqlClient.MySqlConnection(myConnectionString) conn.Open() Catch ex As MySql.Data.MySqlClient.MySqlException Select Case ex.Number Case 0 MessageBox.Show(\"Cannot connect to server. Contact administrator\") Case 1045 MessageBox.Show(\"Invalid username/password, please try again\") End Select End Try\n\nWhat are the Connector/NET Authentication Methods and Plugins?\n\nMySQL Connector/NET provides a number of authentication plugins that MySQL Server can use to verify a user’s identity. Based on the user name and host name that your application passes to the server when making a connection, pluggable authentication allows the server to determine which plugin applies. See Pluggable Authentication for a detailed description of the authentication process.\n\nThe following authentication plugins and methods are available in Connector/NET:\n\nauthentication_kerberos_client: For MySQL Enterprise Edition user accounts and services, applications and MySQL servers can use the Kerberos authentication protocol. Both the user and the server can validate each other’s identity using the authentication kerberos client plugin. Kerberos protocol messages are protected from eavesdropping and replay attacks, and no passwords are ever sent over the network. Only Linux is supported for the server-side plugin.\n\nBy host type, the availability of Kerberos authentication and the requirements for enabling it vary. For.NET applications running on macOS, Connector/NET does not provide Kerberos authentication. Kerberos authentication is implemented using the following interfaces in Linux and Windows applications:\n\nFor Linux, the GSSAPI stands for Generic Security Service Application Program Interface.\n\nFor traditional MySQL protocol connections, Connector/NET 8.0.26 is required. Only Linux users will be able to use this feature.\n\nTo allow authentication of request tickets for Connector/NET by a MySQL server, MIT Kerberos must be installed on each client system.\n\nFor classic MySQL protocol connections, the minimum version is Connector/NET 8.0.27. Only Windows is supported.\n\nSSPI/Kerberos is used for authentication in Connector/NET. GSSAPI is implemented by SSPI on Windows. The following are some of the behavioural differences between SSPI and GSSAPI:\n\nConfiguration: External libraries or Kerberos configuration are not used by Windows clients. On Linux, for example, you can change the expiry time of a ticket-granting ticket (TGT), the port of a key distribution centre (KDC), and so on. None of these options are available on Windows.\n\nTGT Ticket caching: If you provide a user name and password for authentication, the obtained tickets are not stored in the cache. Every time, new tickets are obtained.\n\nAuthentication without a user or a password: The credentials and user name of the currently logged-in user on Windows are used. For a successful login, the Windows client must be a member of the server’s Active Directory domain.\n\nauthentication_ldap_sasl_client:\n\nSASL-based LDAP authentication requires MySQL Enterprise Edition and can only be used to connect to MySQL servers using the classic protocol. This authentication protocol is compatible with Linux, Windows (partial support), and macOS applications.\n\nVersion 1 (minimal):\n\nOn Linux and Windows, use Connector/NET 8.0.22 (SCRAM-SHA-1).\n\nOn Linux and Windows, use Connector/NET 8.0.23 (SCRAM-SHA-256).\n\nOnly Connector/NET 8.0.24 (GSSAPI) is supported on Linux.\n\nTo enable authentication of Connector/NET request tickets by a MySQL server, MIT Kerberos must be installed on each client system. The GSSAPI mechanism must be configured in the authentication ldap sasl plugin, and the application user must be identified as follows:\n\nIDENTIFIED WITH 'authentication_ldap_sasl'\n\nFor Linux, you’ll need the libgssapi krb5.so.2 library.\n\nauthentication_oci_client:\n\nConnector/NET 8.0.27 is the minimum version required for classic MySQL protocol connections.\n\nOracle Cloud Infrastructure pluggable authentication is supported by Connector/NET, allowing.NET applications to securely access MySQL Database Services without the use of passwords. For.NET Framework 4.5.x implementations, this pluggable authentication is not supported.\n\nAccess to a tenancy, a Compute instance, a MySQL DB System connected to a private network, and properly configured groups, compartments, and policies are all required for this type of connection. The basic setup for MySQL user accounts can be done by an Oracle Cloud Infrastructure administrator.\n\nBefore attempting a connection, the MySQL DB System must also have the server-side authentication plugin installed and loaded. The client-side authentication plugin is implemented by Connector/NET.\n\nThe client-side plugin locates the user’s Oracle Cloud Infrastructure configuration file during authentication and obtains a signing key file from it. The ociConfigFile connection option can be used to specify the location of the configuration file; otherwise, the default location is used. Connector/NET then signs a token it receives from the server, uses the token to generate the SHA256 RSA signature it sends back to the server, and waits for the authentication process to succeed or fail.\n\nThe following are examples of possible error conditions:\n\nThe private key specified in the OCI configuration entry ‘key file’ could not be found.\n\nThe private key could not be found at the specified location by Connector/NET. The ‘key file’ OCI configuration entry does not refer to a valid key file.\n\nThe specified private key could not be loaded or used by Connector/NET. There is no ‘fingerprint’ or ‘key file’ entry in the OCI configuration file.\n\nThe fingerprint entry, the key file entry, or both are missing from the configuration file. The OCI configuration file was unable to be read.\n\nThe configuration file could not be found or loaded by Connector/NET. Make sure the ociConfigFile value corresponds to the file’s location.\n\nThe OCI SDK isn’t installed or can’t be found. At runtime, Connector/NET was unable to load the Oracle Cloud Infrastructure SDK library.\n\nThe OCI.DotNetSDK is used by Connector/NET. To read configuration-file entry values, a common NuGet package in the Oracle Cloud Infrastructure SDK library must be available.\n\nauthentication_windows_client:\n\nAll versions of Connector/NET are supported.\n\nUsing the Windows Native Authentication Plugin, MySQL Connector/NET applications can authenticate to a MySQL server. Users who have logged in to Windows can connect to the MySQL server using the information in their environment without having to enter another password. The MySql.Data.MySqlClient object has the same interface as the MySql.Data.MySqlClient object.\n\nTo enable, use the value yes or sspi in the connection string for Integrated Security. It is not required to enter a user ID. A MySQL user is created and configured to be used by Windows authentication when Windows authentication is set up.\n\nThis user ID is called auth windows by default, but it can be given a different name. Passing the user ID to the Connector/NET connection string is optional if the default name is used, because the auth windows user will be used. Otherwise, the user ID element must be used to pass the name to the connection string.\n\ncaching_sha2_password: Connector/NET 8.0.11 is the minimum version required for classic MySQL protocol connections.\n\nmysql_clear_password:\n\nOnly for classic MySQL protocol connections, Connector/NET 8.0.22 is required.\n\nA secure connection to the server is required by mysql clear password, which can be met by either of the following client conditions:\n\nNone is not the value for the SslMode connection option. By default, Preferred is set to this value.\n\nFor Unix domain sockets, the ConnectionProtocol connection option is unix.\n\nmysql_native_password: To establish classic MySQL protocol and X Protocol connections, all versions of Connector/NET are supported.\n\nsha256_password: Connector/NET 8.0.11 is required for traditional MySQL protocol connections and X Protocol connections using the MYSQL41 mechanism (see the Auth connection option).\n\nConclusion\n\nIn this article, you have learned how to effectively work with MySQL Connector NET. You can easily install MySQL Connector NET on Windows and Unix. After you have created a Connection String you can establish a MySQL Connector NET connection with a Single Server as well as with Multiple hosts. You can also add, insert, modify or query your Database using MySQL Connector NET Classes such MySqlCommand, BulkLoader, etc.\n\nTo get a complete picture of your business health & performance, you need to consolidate data from MySQL and all the other applications used across your business for Marketing, Customer Relationship Management, Accounting, Sales, etc. To achieve this you need to assign a portion of your Engineering Bandwidth to Integrate Data from all sources, Clean & Transform it, and finally, Load it to a Cloud Data Warehouse or a destination of your choice for further Business Analytics. All of these challenges can be comfortably solved by a Cloud-Based ETL tool such as Hevo Data.\n\nVisit our Website to Explore Hevo\n\nHevo Data, a No-code Data Pipeline can seamlessly transfer data from a vast sea of 150+ sources such as MySQL to a Data Warehouse or a Destination of your choice to be visualized in a BI Tool. It is a reliable, completely automated, and secure service that doesn’t require you to write any code!\n\nIf you are using MySQL as your Database Management System and searching for a no-fuss alternative to Manual Data Integration, then Hevo can effortlessly automate this for you. Hevo, with its strong integration with 150+ sources & BI tools(Including 40+ Free Sources), allows you to not only export & load data but also transform & enrich your data & make it analysis-ready in a jiffy.\n\nWant to take Hevo for a ride? Sign Up for a 14-day free trial and simplify your Data Integration process. Do check out the pricing details to understand which plan fulfills all your business needs."
    }
}