{
    "id": "dbpedia_8285_0",
    "rank": 12,
    "data": {
        "url": "https://github.com/mahedee/articles/blob/master/dot-net-core/HowToCreateWebAPIinASP.NETCOrewitMySQL.md",
        "read_more_link": "",
        "language": "en",
        "title": "articles/dot-net-core/HowToCreateWebAPIinASP.NETCOrewitMySQL.md at master · mahedee/articles",
        "top_image": "https://opengraph.githubassets.com/db15939fb0b8812764560cd7f7e252386b2b1346dc1bf5cd308089bcc9fdd1de/mahedee/articles",
        "meta_img": "https://opengraph.githubassets.com/db15939fb0b8812764560cd7f7e252386b2b1346dc1bf5cd308089bcc9fdd1de/mahedee/articles",
        "images": [
            "https://github.com/mahedee/Articles/raw/master/img/31.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/21.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/22.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/23.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/32.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/33.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/34.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/35.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/36.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/36.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/37.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/38.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/39.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/40.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/17.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/18.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/19.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/20.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/42.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/41.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/28.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/43.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/44.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/45.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/46.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/27.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/28.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/47.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/48.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/49.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/50.PNG",
            "https://github.com/mahedee/Articles/raw/master/img/30.PNG"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Article on ASP.NET Core, Microservices, AI & Machine Learning - articles/dot-net-core/HowToCreateWebAPIinASP.NETCOrewitMySQL.md at master · mahedee/articles",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/mahedee/articles/blob/master/dot-net-core/HowToCreateWebAPIinASP.NETCOrewitMySQL.md",
        "text": "In this article I’ll show step by step instructions of correct use Entity Framework Core in your ASP.NET Core project with MySql Database and traditional EF migrations. All actions was made in Visual Studio 2019 on Windows 10 machine with installed MySql server. In example used ASP.NET Core Wep API project (.NET Core v3.1).\n\nFirst of all you have to know some basic questions.I discussed them below.\n\nASP.NET Core is a cross-platform, high-performance, open-source framework for building modern cloud-based, Internet-connected applications. With ASP.NET Core, you can: Build web apps and services, IoT apps, and mobile backends. Use your favorite development tools on Windows, macOS, and Linux.\n\nA Web API is an application programming interface for either a web server or a web browser. It is a web development concept, usually limited to a web application's client-side (including any web frameworks being used), and thus usually does not include web server or browser implementation details such as SAPIs or APIs unless publicly accessible by a remote web application\n\nEntity Framework is an Object Relational Mapper (ORM) which is a type of tool that simplifies mapping between objects in your software to the tables and columns of a relational database.\n\nObject-relational mapping in computer science is a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language.\n\nMySQL is an open source relational database.MySQL is cross platform which means it runs on a number of different platforms such as Windows, Linux, and Mac OS etc.\n\nThis guide explains setting up a production-ready ASP.NET Core Web API using Entity Framework with MySQL Database. Our Web API can perform basic CRUD operations.\n\nCreate a simple ASP.NET Core Web API which do CRUD Operations using Entity Framework(with My SQL Server)\n\nEF migrations with My SQL\n\nRun and interact with it\n\nRequired Tools\n\nASP.NET Core\n\nVirtual Studio 2019\n\nMySQL Workbench\n\nPostman\n\nFollowing the steps to install MySQL in your windows 10\n\nThe general MySQL Installer download is available at this link.MySQL Workbench can be installed using the Windows MSI Installer package. The MSI package bears the name mysql-installer-web-community-version.msi, where version indicates the MySQL Workbench version number, and arch the build architecture (winx64).\n\nThe MySQL Installer application can install, upgrade, and manage most MySQL products, including MySQL Workbench.\n\nRun the msi file\n\nSelect Developer Default or Full\n\nThen Select Next and click Yes\n\nThen click Execute after downloaded all then select Next--> Next\n\nConfigure Type and Networking as Standalone MYSQL Server,next configure show in the below\n\nConfigure Accounts and Rules .Here set your password for root user\n\nConfigure Windows Service ,keep it as default\n\nNext-->\n\nAfter that click Execute ---> Finish\n\nThen start MySQL Workbench\n\nYou are set...\n\nYou can use the MySQL Workbench GUI to create a database. You can also create a database programmatically but here's how to do it via the GUI.\n\nIn the following example, we create a new database called \"StudentDB\".\n\nClick your connection,and log in your account with password.\n\nClick the icon for creating a new schema (you'll find this on the Workbench toolbar):\n\nEnter the schema name (in this case, StudentDB) and the default collation, then click the Apply button\n\nYou are prompted to review the SQL statement that will be run to create the database. To run the statement (and create the database) click Apply:\n\nYou should see the following screen once the database has been created:\n\nThe database has now been created. You will now see your new database listed under the SCHEMAS tab on the left pane:\n\nFrom the File menu, select New > Project.\n\nSelect the ASP.NET Core Web Application template and click Next.\n\nName the project CRUDWebAPIMySQL and click Create.\n\nIn the Create a new ASP.NET Core Web Application dialog, confirm that .NET Core and ASP.NET Core 3.1 are selected. Select the API template and click Create.\n\nN.B. Unselect the configure for Https Press Ctrl+F5 to run the app.\n\nBefore we start our project need a few dependencies. We will add them all by NuGet Package Manager.\n\nThe list of packages is below:\n\nMicrosoft.EntityFrameworkCore\n\nPomelo.EntityFrameworkCore.MySql\n\nMicrosoft.EntityFrameworkCore.Tools\n\nMicrosoft.EntityFrameworkCore.Design\n\nI use Polemo provider instead Oracle provider (MySql.Data.EntityFrameworkCore) because Oracle’s connector doesn’t support EF migrations, also relationships there can be implemented only in Fluent.API. EF Tools I installed just for simplifying entering commands in Package Manager Console (Final Step of this story).\n\nFor start we need basic EF Models and DbContext. In this example I will create simple models with user and his pets. This example also will demonstrate auto-creation of relationships by Entity Framework. Firstly create a folder named Models,then create\n\nStudentDetail.cs Model Class\n\nThen Create DBContext file named StudentDetailContext.cs\n\nusing Microsoft.EntityFrameworkCore; using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; namespace CRUDWebAPIWithMySQL.Models { public class StudentDetailContext : DbContext { public StudentDetailContext(DbContextOptions<StudentDetailContext> options) : base(options) { } public DbSet<StudentDetail> StudentDetails { get; set; } //Table Name StudentDetails } }\n\nIn this example I will save our connection string in appsettins.json file, because it useful in work with Git and Security measures.\n\nHere is our's. We get our mySQL Server IP and port number from MySQL Connection\n\nNow we must notify about existing our database context in ConfigureServices method of Startup.cs . NOTICE that in configuration you must use AddDbContextPool method instead AddDbContext. You must import this three. Entity Framework, Pomelo EF and your Model and DBContext class which are in Models folder.\n\nusing Pomelo.EntityFrameworkCore.MySql.Infrastructure; using CRUDWebAPIWithMySQL.Models; using Microsoft.EntityFrameworkCore;\n\nThen adding AddDbContextPool method for connection.\n\nThen create Controller Class. VS create it automatically. Following the steps below.\n\nClick right button of mouse and add controller class\n\nSelect API Controller with action using EF\n\nSelect your Model class and our DB Context Class\n\nIf you installed EF Tools as me, than you can just run next 2 commands in Package Manager Console:\n\nopen your Package Manager Console\n\nAdd-Migration <MigrationName> Update-Database\n\nHere is mine,\n\nAdd-Migration InitialCreate Update-Database\n\nIf any problem in your Migration delete your previous migrations.\n\nRemove-Migration\n\nAfter a successful migration , a table named StudentDetails in studentdb database\n\nWe are now all set. I added some rows myself. Open MySQL Workbench ,then select your table then adding one row.\n\nSelect 1st 100 rows\n\nThen Edit first Row ,not needed to edit ID because it's identity type(auto incremented)\n\nYou are prompted to review the SQL statement that will be run to create the database. To run the statement (and create the database) click Apply:\n\nNow go to controller class named StudentDetailsController.cs for getting your APIs link.\n\nHere Our sub domain is api/StudentDetails\n\nNow\n\nbuild your project and run.\n\nHere is an example.This API works for getting details of all student,\n\nhttp://localhost:2029/api/StudentDetails\n\nOr GET request through Postman"
    }
}