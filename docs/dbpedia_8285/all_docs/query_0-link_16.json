{
    "id": "dbpedia_8285_0",
    "rank": 16,
    "data": {
        "url": "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/connect-workbench",
        "read_more_link": "",
        "language": "en",
        "title": "Quickstart: Connect MySQL Workbench - Azure Database for MySQL - Flexible Server",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/azure/mysql/media/applies-to/yes.png",
            "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/media/connect-workbench/2-setup-new-connection.png",
            "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/media/connect-workbench/3-workbench-sql-tab.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-14T17:44:00+00:00",
        "summary": "",
        "meta_description": "This Quickstart provides the steps to use MySQL Workbench to connect and query data from Azure Database for MySQL - Flexible Server.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/connect-workbench",
        "text": "If you created your flexible server with Private access (VNet Integration), you will need to connect to your server from a resource within the same VNet as your server. You can create a virtual machine and add it to the VNet created with your flexible server. Refer to Create and manage an Azure Database for MySQL flexible server virtual network using Azure CLI.\n\nIn the listing of MySQL Connections, select the tile corresponding to your server, and then wait for the connection to be established.\n\nA new SQL tab opens with a blank editor where you can type your queries.\n\nCopy and paste the sample SQL code into a blank SQL tab to illustrate some sample data.\n\nThis code creates an empty database named quickstartdb, and then creates a sample table named inventory. It inserts some rows, then reads the rows. It changes the data with an update statement, and reads the rows again. Finally it deletes a row, and then reads the rows again.\n\n-- Create a database -- DROP DATABASE IF EXISTS quickstartdb; CREATE DATABASE quickstartdb; USE quickstartdb; -- Create a table and insert rows DROP TABLE IF EXISTS inventory; CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER); INSERT INTO inventory (name, quantity) VALUES ('banana', 150); INSERT INTO inventory (name, quantity) VALUES ('orange', 154); INSERT INTO inventory (name, quantity) VALUES ('apple', 100); -- Read SELECT * FROM inventory; -- Update UPDATE inventory SET quantity = 200 WHERE id = 1; SELECT * FROM inventory; -- Delete DELETE FROM inventory WHERE id = 2; SELECT * FROM inventory;\n\nThe screenshot shows an example of the SQL code in SQL Workbench and the output after it has been run."
    }
}