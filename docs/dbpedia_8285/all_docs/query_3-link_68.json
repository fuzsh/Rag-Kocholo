{
    "id": "dbpedia_8285_3",
    "rank": 68,
    "data": {
        "url": "https://spring.io/guides/gs/accessing-data-mysql",
        "read_more_link": "",
        "language": "en",
        "title": "Accessing data with MySQL",
        "top_image": "https://spring.io/img/og-spring.png",
        "meta_img": "https://spring.io/img/og-spring.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn how to set up and manage user accounts on MySQL and how to configure Spring Boot to connect to it at runtime.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-32x32.png?v=96334d577af708644f6f0495dd1c7bc8",
        "meta_site_name": "Getting Started | Accessing data with MySQL",
        "canonical_link": "https://spring.io/guides/gs/accessing-data-mysql",
        "text": "Spring Initializr creates a simple class for the application. The following listing shows the class that Initializr created for this example (in src/main/java/com/example/accessingdatamysql/AccessingDataMysqlApplication.java):\n\npackage com.example.accessingdatamysql; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class AccessingDataMysqlApplication { public static void main(String[] args) { SpringApplication.run(AccessingDataMysqlApplication.class, args); } }\n\nFor this example, you need not modify the AccessingDataMysqlApplication class.\n\nSpring Initializr adds the @SpringBootApplication annotation to our main class. @SpringBootApplication is a convenience annotation that adds all of the following:\n\n@Configuration: Tags the class as a source of bean definitions for the application context.\n\n@EnableAutoConfiguration: Spring Boot attempts to automatically configure your Spring application based on the dependencies that you have added.\n\n@ComponentScan: Tells Spring to look for other components, configurations, and services. If specific packages are not defined, recursive scanning begins with the package of the class that declares the annotation.\n\nAt this point, you can now run the application to see your code in action. You can run the main method through your IDE or from the command line. Note that, if you have cloned the project from the solution repository, your IDE may look in the wrong place for the compose.yaml file. You can configure your IDE to look in the correct place or you could use the command line to run the application. The ./gradlew bootRun and ./mvnw spring-boot:run commands launch the application and automatically find the compose.yaml file.\n\nNow that the application is running, you can test it by using curl or some similar tool. You have two HTTP endpoints that you can test:\n\nGET localhost:8080/demo/all: Gets all data. POST localhost:8080/demo/add: Adds one user to the data.\n\nThe following curl command adds a user:\n\n$ curl http://localhost:8080/demo/add -d name=First -d [email protected]\n\nThe reply should be as follows:\n\nSaved\n\nThe following command shows all the users:\n\n$ curl http://localhost:8080/demo/all\n\nThe reply should be as follows:\n\n[{\"id\":1,\"name\":\"First\",\"email\":\"[email protected]\"}]\n\nTo package and run the application, we need to provide an external MySQL database rather than using Spring Boot Docker Compose Support. For this task, we can reuse the provided compose.yaml file with a few modifications: First, modify the ports entry in compose.yaml to be 3306:3306. Second, add a container_name of guide-mysql.\n\nAfter these steps, the compose.yaml file should be:\n\nservices: mysql: container_name: 'guide-mysql' image: 'mysql:latest' environment: - 'MYSQL_DATABASE=mydatabase' - 'MYSQL_PASSWORD=secret' - 'MYSQL_ROOT_PASSWORD=verysecret' - 'MYSQL_USER=myuser' ports: - '3306:3306'\n\nYou can now run docker compose up to start this MySQL container.\n\nThird, we need to tell our application how to connect to the database. This step was previously handled automatically with Spring Boot Docker Compose support. To do so, modify the application.properties file so that it is now:\n\nspring.jpa.hibernate.ddl-auto=update spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase spring.datasource.username=myuser spring.datasource.password=secret spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.jpa.show-sql: true\n\nIf you ran the application using a Docker instruction above, a simple curl command from a terminal or command line will no longer work. This is because we are running our containers in a Docker network that is not accessible from the terminal or command line. To run curl commands, we can start a third container to run our curl commands and attach it to the same network.\n\nFirst, obtain an interactive shell to a new container that is running on the same network as the MySQL database and the application:\n\ndocker run --rm --network container:guide-mysql -it alpine\n\nNext, from the shell inside of the container, install curl:\n\napk add curl\n\nFinally, you can run the curl commands as described in Test the Application.\n\nWhen you are on a production environment, you may be exposed to SQL injection attacks. A hacker may inject DROP TABLE or any other destructive SQL commands. So, as a security practice, you should make some changes to your database before you expose the application to your users.\n\nThe following command revokes all the privileges from the user associated with the Spring application:\n\nmysql> revoke all on db_example.* from 'myuser'@'%';\n\nNow the Spring application cannot do anything in the database.\n\nThe application must have some privileges, so use the following command to grant the minimum privileges the application needs:\n\nmysql> grant select, insert, delete, update on db_example.* to 'myuser'@'%';\n\nRemoving all privileges and granting some privileges gives your Spring application the privileges necessary to make changes to only the data of the database and not the structure (schema).\n\nWhen you want to make changes to the database:\n\nRegrant permissions.\n\nChange the spring.jpa.hibernate.ddl-auto to update.\n\nRe-run your applications.\n\nThen repeat the two commands shown here to make your application safe for production use again. Better still, use a dedicated migration tool, such as Flyway or Liquibase."
    }
}