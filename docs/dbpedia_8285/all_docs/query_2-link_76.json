{
    "id": "dbpedia_8285_2",
    "rank": 76,
    "data": {
        "url": "https://www.twilio.com/en-us/blog/beginner-mysql-database-java-spring-boot",
        "read_more_link": "",
        "language": "en",
        "title": "How to Connect MySQL with JDBC to Java Spring Boot",
        "top_image": "https://www.twilio.com/content/dam/twilio-com/core-assets/social/twilio-blog-default-ogimage.png",
        "meta_img": "https://www.twilio.com/content/dam/twilio-com/core-assets/social/twilio-blog-default-ogimage.png",
        "images": [
            "https://www.twilio.com/content/dam/twilio-com/core-assets/design-ops/component-svgs/check-black.svg",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/yJyLe3NN6rnNsXOVcbHnSIgdVSwJVtWrpl5XalTAZgG9dozwbo3OveOf2p_YY6EXhgIWXhKW9Yd1lj.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/LmlIn8j6RYSE0One5obcmd8ksY0nH3uP1UfH4cU9qep2yZvdzURYbDTnO3rp0wvkV_Xj2sI-1ky4SE.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/wP6y2BXTNsJDULVgFEVCis8KXNkWA4O6QHG_NEuZiBhUbSsubQMdF-7YfQCsd1HsIS6U8bz1eKsfMp.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/rwmj_djyKzgizCGAeAptwRC0tftU57c7HA7FxJhJU8QZMcX5In5S-7gx9o3-OhPZKDv_ju5r4LQYyH.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/QG5KO0BKu5rzTKpcx4V6SPhIlaf89gSohlUfAesz0O3onqxDKeJqFLKItGDlo9EVC21gFI94lY3m1F.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/Dc3w0ycACweaHdcdf0DuRQZ7Sm4F_bK-6FksAK6qilHmjGKyaMim_OiwuAE7Sm_FSVRKW_bps9uozr.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/cLWu-JbhQuO3Tmd1CCvU79ndWF93nUwXRmfmpD3AZECx12gmB5l92rbj_pJRRA4sNoRT3ggwjsqfhy.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/mTQDZQ0aKsClT3_M-H1sudgOiwbH7818yvR_FIk9IgsProj9_9cFgI-KDHCiFZtii4-I_3Flos1p5y.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/legacy/2022/beginner-mysql-database-java-spring-boot/0J2be3cZSnWUSnaA-KoEExUqEnr5Iv5HWkfPNemFxv9xijGW1DuwQANPYvUJiKO2Pg92CJUdl2NISf.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/insights/card-images/card-insights-woman-smiling-talking-smartphone.png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/importer-images/h-l/java-spring-boot-programmable-voice-phone-call/Card-developer-logo-2%20(1).png",
            "https://www.twilio.com/content/dam/twilio-com/global/en/blog/developers/card-images/card-developer-mobile_WA.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "mysql connector java",
            "mysql jdbc connector",
            "connecting mysq to java",
            "java database mysql",
            "mysql to java",
            "connect database java",
            "spring database"
        ],
        "tags": null,
        "authors": [
            "Diane Phan"
        ],
        "publish_date": "2022-11-07T08:00:00+08:00",
        "summary": "",
        "meta_description": "Learn how to connect a MySQL database to your Java Spring Boot application. This guide includes setup and testing with Postman. Start now with Twilio.",
        "meta_lang": "en",
        "meta_favicon": "/content/dam/twilio-com/core-assets/social/apple-touch-icon.png",
        "meta_site_name": "Twilio",
        "canonical_link": "https://www.twilio.com/en-us/blog/beginner-mysql-database-java-spring-boot",
        "text": "In this article, you will learn how to spin up a MySQL database and connect it to a Java Spring Boot project. You will also use Postman's desktop application to send requests to the application.\n\nTutorial requirements\n\nRefer to this Twilio article to set up a Java Spring Boot application that can be hosted on the web.\n\nIntelliJ IDEA Community Edition for convenient and fast Java project development work. The community edition is sufficient for this tutorial.\n\nJava Development Kit (JDK) version 11.\n\nngrok, also known as a handy utility to connect the development version of the Java application running on your system to a public URL that Twilio can connect to.\n\nMySQL is the database service you’ll use to store the employee data and access in your application through REST APIs. You can follow the guide for detailed steps to setup MySQL with MySQL Workbench.\n\nThe MySQL command-line client.\n\nPostman desktop application to test the APIs. During installation, create a free account when prompted.\n\nSet up your MySQL database and access credentials\n\nThe database that we will use for this tutorial is MySQL. Create a username and password for yourself during installation as you will use the credentials during the tutorial and later in the application.\n\nUse the following command to login to the MySQL database server.\n\nRemember to change the username and password accordingly, if they were different from the credentials used in this tutorial.\n\nThe spring.datasource.url will use a MYSQL_HOST environment variable if defined, otherwise it will connect to localhost:3306. Be sure to change the <YOUR_DATABASE_NAME> if not using the same database name \"quotes_database\".\n\nCreate your first table in the MySQL database\n\nThe table will have a one-to-one relationship where each varchar data type is associated with its own ID that auto increments.\n\nFor this example, the quote_string variable can only hold 255 characters so the quotes cannot exceed that limit.\n\nCopy and paste the following lines to the MySQL window:\n\nLet's break down the code. The @RestController annotation on the class tells Spring Boot that this class is a controller. A private QuoteRepository object is created and injected as a dependency within this class.\n\nA few routes are created in this controller file, and each of them start off with the \"quotes\" argument of the URL slug.\n\nWhen the user creates a GET request to the /quotes route, it is expected to retrieve a list of quotes from the MySQL database. However, an optional @RequestParam annotation is included in this function that extracts a query parameter, if a value is added after the \"search\" key value. If there is a string value appended to the \"?search\" URL then the QuoteRepository will create a function that will retrieve and return a quote that contains the string parameter that was passed in.\n\nFurthermore, if a user wanted to retrieve a quote from a specific ID, they would have to append a number after the /quotes route. A ResponseEntity for a string object is created and will run through the quoteRepository to return the appropriate quote, otherwise it will return an error message since it's not found.\n\nAlternatively, a POST request could be made on the /quotes route in order to add a quote to the database. This function takes in a @RequestBody parameter and is used to map the request body of the endpoint to the method parameter.\n\nAnd similar to retrieving a quote with a specific ID, another POST request is created with the /quotes/{quoteId} route so that the deleteById() function can be called on the quoteRepository.\n\nRun the spring boot application with MySQL\n\nIf you have not done so already, navigate to the JavadbApplication.java file to click on the green play button next to the public class definition. Select the Run option.\n\nWait a few seconds for the project to build, download the project's dependencies, and compile.\n\nHere is the completed code in a GitHub repository for your reference.\n\nExecute the CRUD operations in Postman\n\nPostman is an application that helps in developing, testing, and documenting APIs. Create a free account if you have not done so already.\n\nYou’ll create a workspace in Postman which can be used to collaborate with teammates on projects. Each workspace can have one or more collections containing folders with a set of APIs defined.\n\nCreate a workspace in Postman by selecting the Workspace dropdown and click on New workspace.\n\nIf you would like to check a quote with a specific ID, you can append the ID number to the end of the endpoint as seen in the QuoteController.java file \"/quotes/{quoteId}\". This will be tested out in the next section.\n\nCreate and test POST requests in Postman\n\nManually add quotes from the Postman interface by creating and selecting an ADD request. Since the ID is automatically incremented in the database, the only information you need to provide is in the request body.\n\nNavigate to the Body tab, choose the raw checkbox with Text as the request body format. Add in a quote such as \"Who would you like to call on the phone?\". Click on Save then Send, similar to the image below:\n\nWhat's next for setting up a database for a Spring Boot project?\n\nCongratulations on learning how to set up a database for a Java Spring Boot project. Challenge yourself by expanding on this project directory. Send out SMS with the quotes from the database or create an SMS dashboard in Java with Spring Boot. You can also make a cat clicker game with Java and store points in this database.\n\nLet me know what you're building with Twilio and Java by reaching out to me over email.\n\nDiane Phan is a software engineer on the Developer Voices team. She loves to help programmers tackle difficult challenges that might prevent them from bringing their projects to life. She can be reached at dphan [at] twilio.com or LinkedIn."
    }
}