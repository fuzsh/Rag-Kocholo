{
    "id": "dbpedia_8285_1",
    "rank": 65,
    "data": {
        "url": "https://community.spiceworks.com/t/connecting-to-mysql-via-c/528323",
        "read_more_link": "",
        "language": "en",
        "title": "Connecting to MySql via C#",
        "top_image": "https://global.discourse-cdn.com/spiceworks/original/1X/7a73606d7df2f794c4789897e49693fb3c471b23.png",
        "meta_img": "https://global.discourse-cdn.com/spiceworks/original/1X/7a73606d7df2f794c4789897e49693fb3c471b23.png",
        "images": [
            "https://secure.intelligence52.com/795141.png",
            "https://avatars.discourse-cdn.com/v4/letter/p/c67d28/48.png",
            "https://global.discourse-cdn.com/spiceworks/optimized/4X/a/e/5/ae51cdca1a170a02891c6b68ecee346e7b11832d_2_690x306.png",
            "https://zdbb.net/l/z0WVjCBSEeGLoxIxOQVEwQ/"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "web-development",
            "discussion"
        ],
        "tags": null,
        "authors": [
            "ghosaphat (G_Hosa_Phat)"
        ],
        "publish_date": "2016-09-26T15:43:50+00:00",
        "summary": "",
        "meta_description": "I’m able to connect to MySql database via php \n$host=“server domain”; \n$username=“myUsername”; \n$password=“myPassword”; \n$con=mysqli_connect($host,$username,$password); \nif(!$con){ \ndie(“cannot connect:” . mysql_error())&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/spiceworks/optimized/1X/a254df83358a951c43ed6ee756b5e0011a8d58bc_2_32x32.png",
        "meta_site_name": "Spiceworks Community",
        "canonical_link": "https://community.spiceworks.com/t/connecting-to-mysql-via-c/528323",
        "text": "I’m able to connect to MySql database via php\n\n$host=“server domain”;\n\n$username=“myUsername”;\n\n$password=“myPassword”;\n\n$con=mysqli_connect($host,$username,$password);\n\nif(!$con){\n\ndie(“cannot connect:” . mysql_error());\n\n}\n\n$db=mysqli_select_db($con, “myDatabase”) or die(“cannont find db”);\n\nI would like to move to Visual Studio and using more C#. I get an \" Unable to connect to any of the specified MySQL hosts\".\n\ntry\n\n{\n\nstring connectionString = “Server=myServer; database=myDatabase; User ID=myUser; password=myPassword”;\n\nstring query = “select * from myTable”;\n\nMySqlConnection connection = new MySqlConnection(connectionString);\n\nMySqlCommand command = new MySqlCommand(query, connection);\n\nconnection.Open();\n\nMySqlDataReader Reader = command.ExecuteReader();\n\nwhile (Reader.Read())\n\n{\n\nDropDownList1.Items.Add(Reader.ToString());\n\n}\n\nconnection.Close();\n\n}\n\ncatch (Exception ex)\n\n{\n\nLabel1.Text = ex.ToString();\n\n}\n\nI contacted my web host and they don’t support remote connection to MySql, but why is it that I can connect to it via php?\n\nHere’s an example from one of the programs I wrote:\n\nusing System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using System.Threading; using System.Diagnostics; using MySql.Data.MySqlClient; namespace CSWiki_DB { public partial class Form1 : Form { public static string connString = \"SERVER=YOURSERVER;UID=MYSQLUSER;PASSWORD=YOURPASSWORD;DATABASE=YOURDATABASENAME;\"; public static MySqlConnection connect = new MySqlConnection(connString); public static MySqlCommand myCommand; public static MySqlDataReader reader; public static string selectedcategory; public static string selectednote; public string filepath; public int fontsz = 12; public string filename; public int boldornot = 0; public int underornot = 0; public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { connect.Close(); connect.Open(); myCommand = connect.CreateCommand(); loadcategories(); } private void addnewnote_Click(object sender, EventArgs e) { AddNote frm2 = new AddNote(); this.Hide(); frm2.ShowDialog(); } private void loadcategories() { myCommand.CommandText = @\"SELECT * FROM catfolder ORDER BY categories\"; reader = myCommand.ExecuteReader(); using (reader) { while (reader.Read()) { categorylist.Items.Add(reader.GetString(\"categories\")); } } } private void categorylist_Click(object sender, EventArgs e) { connect.Close(); connect.Open(); noteslist.Items.Clear(); richTextBox1.Text = \"\"; if (categorylist.SelectedItem == null) { return; } else { selectedcategory = categorylist.SelectedItem.ToString(); notelistupdate(); } } private void notelistupdate() { myCommand.Parameters.Clear(); myCommand.CommandText = @\"SELECT * FROM notes WHERE category = @input ORDER BY title\"; myCommand.Parameters.AddWithValue(\"@input\", selectedcategory); reader = myCommand.ExecuteReader(); using (reader) { while (reader.Read()) { noteslist.Items.Add(reader.GetString(\"title\")); } } } private void noteslist_Click(object sender, EventArgs e) { connect.Close(); connect.Open(); if (noteslist.SelectedItem == null) { return; } else { selectednote = noteslist.SelectedItem.ToString(); richTextBox1.Text = \"\"; myCommand.Parameters.Clear(); myCommand.CommandText = @\"SELECT * FROM notes WHERE title = @input\"; myCommand.Parameters.AddWithValue(\"@input\", selectednote); reader = myCommand.ExecuteReader(); using (reader) { while (reader.Read()) { filepath = reader.GetString(\"filepath\"); filepath = filepath.Replace(@\"\\\", @\"\\\\\\\\\"); filepath = filepath.Replace(\"\\\"\", \"\"); richTextBox1.LoadFile(filepath); filename = filepath.Replace(@\"G:\\\\\\\\IT\\\\\\\\WIKI\\\\\\\\\", \"\"); } } } } private void exitToolStripMenuItem_Click(object sender, EventArgs e) { Application.Exit(); } private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e) { // Show the form when the user double clicks on the notify icon. // Set the WindowState to normal if the form is minimized. if (this.WindowState == FormWindowState.Minimized) this.WindowState = FormWindowState.Normal; if (this.WindowState == FormWindowState.Maximized) this.WindowState = FormWindowState.Minimized; if (this.WindowState == FormWindowState.Normal) this.WindowState = FormWindowState.Maximized; // Activate the form. this.Activate(); } private void exitToolStripMenuItem1_Click(object sender, EventArgs e) { Application.Exit(); } private void notifyIcon1_MouseClick(object sender, MouseEventArgs e) { } private void aDMINToolStripMenuItem_Click(object sender, EventArgs e) { } private void Form1_FormClosed(object sender, FormClosedEventArgs e) { Application.Exit(); } private void button1_Click(object sender, EventArgs e) { SaveRTF(); } public void SaveRTF() { // Create a SaveFileDialog to request a path and file name to save to. SaveFileDialog saveFile1 = new SaveFileDialog(); if (noteslist.SelectedItem == null) { } else { saveFile1.FileName = filename; } saveFile1.RestoreDirectory = true; saveFile1.InitialDirectory = @\"G:\\IT\\Wiki\"; // Initialize the SaveFileDialog to specify the RTF extention for the file. saveFile1.DefaultExt = \"*.rtf\"; saveFile1.Filter = \"RTF Files|*.rtf\"; // Determine whether the user selected a file name from the saveFileDialog. if (saveFile1.ShowDialog() == System.Windows.Forms.DialogResult.OK && saveFile1.FileName.Length > 0) { // Save the contents of the RichTextBox into the file. richTextBox1.SaveFile(saveFile1.FileName); } } private void button5_Click(object sender, EventArgs e) { boldornot++; if (boldornot == 1) { richTextBox1.SelectionFont = new Font(\"Arial\", fontsz, FontStyle.Bold); } if (boldornot == 2) { boldornot = 0; richTextBox1.SelectionFont = new Font(\"Arial\", fontsz, FontStyle.Regular); } } private void button4_Click(object sender, EventArgs e) { richTextBox1.SelectionAlignment = HorizontalAlignment.Center; } private void button8_Click(object sender, EventArgs e) { fontsz++; richTextBox1.SelectionFont = new Font(\"Arial\", fontsz); //richTextBox1.SelectionLength = 0;//Unselect the selection // fontsz++; //richTextBox1.Font = new Font(\"Arial\", fontsz); } private void button9_Click(object sender, EventArgs e) { fontsz--; richTextBox1.SelectionFont = new Font(\"Arial\", fontsz); } private void button6_Click(object sender, EventArgs e) { richTextBox1.SelectionAlignment = HorizontalAlignment.Left; } private void button7_Click(object sender, EventArgs e) { richTextBox1.SelectionAlignment = HorizontalAlignment.Right; } private void button2_Click(object sender, EventArgs e) { categorylist.ClearSelected(); noteslist.ClearSelected(); richTextBox1.Text = \"\"; } private void button3_Click(object sender, EventArgs e) { } private void U_Click(object sender, EventArgs e) { underornot++; if (underornot == 1) { richTextBox1.SelectionFont = new Font(\"Arial\", fontsz, FontStyle.Underline); } if (underornot == 2) { underornot = 0; richTextBox1.SelectionFont = new Font(\"Arial\", fontsz, FontStyle.Regular); } } private void instructionsToolStripMenuItem_Click(object sender, EventArgs e) { } private void button3_Click_1(object sender, EventArgs e) { Form4 frm4 = new Form4(); this.Hide(); frm4.Show(); } private void richTextBox1_LinkClicked(object sender, LinkClickedEventArgs e) { System.Diagnostics.Process.Start(e.LinkText); } private void printToolStripMenuItem_Click(object sender, EventArgs e) { using (PrintDialog printDialog1 = new PrintDialog()) { if (printDialog1.ShowDialog() == DialogResult.OK) { var pi = new ProcessStartInfo(filepath); pi.Arguments = \"\\\"\" + printDialog1.PrinterSettings.PrinterName + \"\\\"\"; pi.CreateNoWindow = true; pi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden; pi.UseShellExecute = true; pi.Verb = \"PrintTo\"; System.Diagnostics.Process.Start(pi); } } /* string printerName = \"1IT Brother HL-5250DN series\"; pi.UseShellExecute = true; pi.Verb = \"printTo\"; pi.Arguments = \"\\\"\" + printerName + \"\\\"\"; var process = System.Diagnostics.Process.Start(pi);*/ } private void deleteNotesToolStripMenuItem_Click(object sender, EventArgs e) { DeleteNotes frmDel = new DeleteNotes(); this.Hide(); frmDel.Show(); } } }\n\nYou might try using the MySqlConnectionStringBuilder object from the MySql.Data.MySqlClient library to help you in identifying any possible issues. I do my programming in VB.NET, but here’s a quick conversion of some of my code to implement the connection in C#:\n\nusing System; using System.Collections; using System.Collections.Generic; using System.Data; using System.Diagnostics; using MySql.Data.MySqlClient; public class DataTier { public void MySQLDBTest() { MySqlConnectionStringBuilder MySQLConn = new MySqlConnectionStringBuilder(); MySQLConn.Server = <YOUR SERVER NAME HERE>; MySQLConn.Database = <SPECIFIC DATABASE ON THE SERVER>; MySQLConn.UserID = <DATABASE LOGIN USERNAME>; MySQLConn.Password = <DATABASE LOGIN PASSWORD>; MySqlConnection MySQLDB = new MySqlConnection(MySQLConn.ConnectionString); try { MySQLDB.Open(); } catch (Exception ex) { MessageBox.Show(ex.Message); } finally { if ((MySQLDB != null)) { MySQLDB.Close(); MySQLDB.Dispose(); } } } }\n\nOf course, you may need to check the configuration of your MySQL server to make sure that it will accept a connection attempt by your user from your machine. Since you state that establishing the connection through PHP works, I’m curious as to where the PHP is running. If it’s running from a Web server and you’re trying to establish the connection from your workstation (through Visual Studio), it may be that the MySQL server is locked down to only accept connections from the Web server.\n\nThen you might need to check the configuration on the MySQL server for your users to ensure that they have permission to connect from a remote client. Here’s a StackOverflow thread that discusses this topic:\n\nhttp://stackoverflow.com/questions/14779104/how-to-allow-remote-connection-to-mysql\n\nThe highest rated answer has a couple of things to check. You may not want or need to give the root user access remotely, but the key in that part of the answer is to make sure that the user(s) are set up correctly. See the following screenshot from MySQL Workbench:\n\nNote that the same user is listed twice: Once for “localhost”, and once for “%”. The “localhost” entry isn’t absolutely necessary if you have a “%” entry (meaning the user is accepted from any client). This is where that SO thread is talking about giving the root user access from any client:\n\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION; FLUSH PRIVILEGES;\n\nIf this is indeed the cause of your issue, you’ll need to perform this elevation at the server itself. Of course, you may want to be a bit more restrictive with your users’ connections, depending on your network and security requirements, so you might have to do some “tweaking”.\n\nAlso, as stated in the SO thread, don’t forget to check your MY.INI (or MY.CNF) file for the bind-address line and comment it out if it’s there.\n\nAdditionally, here’s a link to some MySQL reference material that might help:\n\nhttp://dev.mysql.com/doc/refman/5.7/en/default-privileges.html"
    }
}