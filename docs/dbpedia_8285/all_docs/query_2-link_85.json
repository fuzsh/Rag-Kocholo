{
    "id": "dbpedia_8285_2",
    "rank": 85,
    "data": {
        "url": "https://opensource.com/article/17/5/mysql-json",
        "read_more_link": "",
        "language": "en",
        "title": "What you need to know about JSON in MySQL",
        "top_image": "https://opensource.com/sites/default/files/lead-images/catalyst_system.jpg",
        "meta_img": "https://opensource.com/sites/default/files/lead-images/catalyst_system.jpg",
        "images": [
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/themes/osdc/logo.svg",
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/sites/default/files/lead-images/catalyst_system.jpg",
            "https://opensource.com/sites/default/files/styles/150x150/public/2023-01/rounddave.jpg?itok=4ONErFuL",
            "https://opensource.com/sites/default/files/styles/medium/public/osdc_default_avatar_1.png?itok=G0WcUo3c",
            "https://opensource.com/sites/default/files/styles/medium/public/osdc_default_avatar_1.png?itok=G0WcUo3c",
            "https://opensource.com/sites/default/files/styles/medium/public/osdc_default_avatar_1.png?itok=G0WcUo3c",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/collab-team-pair-programming-code-keyboard.png?itok=iEiqXXDv",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/programming_keyboard_coding.png?itok=OLBqPd92",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/code_computer_development_programming.png?itok=0kgDZpBf",
            "https://opensource.com/themes/osdc/assets/img/cc-by-sa-4.png",
            "https://opensource.com/themes/osdc/logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dave Stokes"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "MySQL's addition of a JSON data type makes the relational database easier to use and blurs the lines between SQL and NoSQL databases.",
        "meta_lang": "en",
        "meta_favicon": "/themes/osdc/assets/img/favicons/favicon.ico",
        "meta_site_name": "Opensource.com",
        "canonical_link": "https://opensource.com/article/17/5/mysql-json",
        "text": "Once upon a time there was one computer. Then someone built a second one and wanted some code off the first computer. That meant we needed a way to move information without dependencies on the underlying hardware. Since then, there have been many character encoding and interchange standards (ASCII, EBCIDIC, SGML, XML, etc.) that have had their time in the spotlight. For the past few years, JavaScript Object Notation (JSON) has been the most popular.\n\nBefore MySQL 5.7, you could store a JSON-formatted document in a character field. But large strings are messy to search, and writing regular expressions for finding values within that string can be a frustrating experience. And if you changed one part of the string you had to rewrite the entire string, which is terribly inefficient but was necessary up to MySQL 5.6.\n\nJSON in MySQL\n\nMySQL introduced a native JSON data type in MySQL 5.7. So like an integer, a char, or a real, there became a way to store an entire JSON document in a column in a table of a databaseâ€”and this document in a column could be roughly a gigabyte in size! The server would make sure it was a valid JSON document and then save it in a binary format that's optimized for searching. This new data type has probably been responsible for more upgrades of MySQL than any other feature.\n\nMySQL 8 is now in developer milestone release and will add some new functions and functionality.\n\nThe data type also comes with over 20 functions. These functions will extract key-value pairs from the document, update data, provide metadata about the data, output non-JSON columns in JSON format, and more. And it's much easier on the psyche than REGEX.\n\nMySQL 8 is now in developer milestone release and will add some new functions and functionality. The JSON_PRETTY_PRINT function will format the output to make it more legible. And there will be major improvements in the way parts of the data are rewritten without rewriting the entire document.\n\nIronic, huh?\n\nSaving data in an unformatted fashion was considered a NoSQL feature. Many relational databases such as Oracle, SQL Server, Postgresql, and others have added JSON data types, blurring the definition of NoSQL and SQL databases.\n\nWhy the Document Store matters\n\nShortly after the JSON data type emerged came the MySQL Document Store feature. It has been designed for developers who do not know structured query language (SQL) but want to use a database.\n\nThe developer creates data collections and performs the create, remove, update, & delete (CRUD) functions on the data as needed in the programming language of choice (Java, JavaScript, Node.JS, Python, C++, and more on the way). The developer needs no knowledge of SQL and probably does not care that SQL is being done for them behind the scenes, where their data is kept in a JSON column. This way they can save and use data without having to develop normalized database tables, architect their data, or twiddle their thumbs while waiting for a database administrator to establish the data store. Many projects start with no idea of what the data looks like and will proceed by evolving the data to fit the current circumstances.\n\nAnd if old-fashioned relational data is needed from these JSON documents, it is easy to extract the various keys into generated columns for standard SQL work, then index the generated columns for quick searches.\n\nDrawbacks\n\nJSON is a great way to store data in an informal way. But relational databases thrive on normalized data with all the information normalized into smaller component pieces for speed of access. Also, there may be a lack of rigor imposed on the data, such as when a field that records email address may be keyed as email, eMail, e-mail, or another variant. But there are many compelling reasons to ignore rigor, so long as you understand you may hit this gotcha down the road."
    }
}