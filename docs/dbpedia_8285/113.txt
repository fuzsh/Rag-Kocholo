The MySQL Workbench from Oracle is a graphic tool for working with MySQL databases. MySQL is an open-source relational database management system, and it is the most popular database system used with PHP. It is available on Windows, Linux, and Mac OS X.

MySQL Workbench is a powerful visual tool for DBAs, database architects, and MySQL developers. This tool offers data modeling, SQL development, and administration tools for server configuration and administration.

In this tutorial, we will introduce the MySQL Workbench and show you how to get started with this powerful tool.

We will learn:

What is MySQL Workbench?

Salient features of MySQL workbench

How to install MySQL Workbench

How to use MySQL Workbench

What to learn next

Learn how to create databases with SQL

This course covers the basics of SQL. You’ll also get some hands-on practice with common SQL interview questions.

An Introductory Guide to SQL

There are several relational database management systems out there, such as Microsoft SQL Server, Microsoft Access, Oracle, and DB2. The MySQL Workbench offers some advantages to consider when choosing a tool.

MySQL supports multiple storage engines each with its own specifications, unlike other tools. MySQL also offers high performance due to its design and simplicity.

It is also known for being being cost effective. The community edition is free for users, and the enterprise edition has a low licensing fee.

Salient features of MySQL workbench

This section will go through some of MySQL Workbench’s salient features.

Modeling and design

Modeling is a great way to visualize requirements and creating well-performing databases that can keep up with the ever-evolving data requirements. MySQL Workbench allows you to create and manipulate models, reverse engineer a live database to a model, and create and edit tables and insert data.

You can convert ER diagrams into SQL statements and push them to a SQL server. You can also create models from a target database or even imported SQL files.

SQL develop tool

MySQL Workbench allows you to create, manage, and configure your connections and connection parameters to MySQL database servers. It also allows you to execute SQL queries on these connections using the in-built editor.

The Visual SQL Editor lets you create, edit, and run queries. It has auto-complete and color highlighters that aid in easily writing and debugging SQL statements.

Visual performance

MySQL Workbench offers various tools that let you view and improve performance. The Performance Dashboard gives you a quick view of the different performance metrics. Performance Reports let you analyze the performance of your databases.

Database migration

MySQL Workbench eases the process of migration. It lets you migrate from Microsoft SQL Server, SQLite, Microsoft Access, and many more. It also lets you configure, schedule, edit, and execute migration projects.

Connection management

MySQL Workbench lets you created, manage, and organize database connections. Object management MySQL Workbench’s Object Browser allows you to visually select tables and columns. You can easily navigate between schemas, select tables and fields, create new ones, or drop them.

User administration

MySQL Workbench makes user management a lot easier. You can easily:

View account information of all users on the MySQL server

Add and remove users

Grant and revoke privileges

Modify database permissions

Change passwords

Audit to see who did what and when

Server configuration

MySQL Workbench lets you fine-tune MySQL servers by allowing you to view and edit advanced parameters. You can also view server logs to identify problems quicker and track database changes.You can specify a MySQL hostname to define where to host your MySQL database.

Exports and import

MySQL Workbench allows you to easily export or import data by selecting database schemas or tables from the Object Browser.

Now that our database is ready, let’s add our tables.

Creating a table

The syntax for creating a table is as follows:

create table table_name ( column1 datatype, column2 datatype, column3 datatype, );

For our first table Menu, we will have the following columns:

Item id

Name

Price

Date Created

The command for creating this table will be:

create table Menu ( item_id int, item_name varchar, price int, created_on date, );

Execute the command, and you should see a success message in the Action Output section at the bottom. You will also see the menu table in bakery after refreshing schemas.

You can view the empty menu table by clicking the table icon next to menu, as shown below.

Inserting data to a table

Let’s add data to our table, before that let’s look at the syntax. When using insert into, you have two options:

INSERT INTO table_name

VALUES (value1, value2, value3, ...);

This first option is used when you enter data into every column of the table.

INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);

This second option is used when you want to enter data into specific columns. Since we’re adding one row, it will be:

INSERT INTO menu VALUES (1, 'croissant', 1, '2020-12-16');

If you view your table now, you will see the data has been added.