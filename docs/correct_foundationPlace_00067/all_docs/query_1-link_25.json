{
    "id": "correct_foundationPlace_00067_1",
    "rank": 25,
    "data": {
        "url": "https://archive.org/stream/softalkv2n02oct1981/softalkv2n02oct1981_djvu.txt",
        "read_more_link": "",
        "language": "en",
        "title": "Full text of \"Softalk V2n02 Oct 1981\"",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://archive.org/services/img/etree",
            "https://archive.org/services/img/librivoxaudio",
            "https://archive.org/services/img/metropolitanmuseumofart-gallery",
            "https://archive.org/services/img/clevelandart",
            "https://archive.org/services/img/internetarcade",
            "https://archive.org/services/img/consolelivingroom",
            "https://archive.org/images/book-lend.png",
            "https://archive.org/images/widgetOL.png",
            "https://archive.org/services/img/tv",
            "https://archive.org/services/img/911",
            "https://analytics.archive.org/0.gif?kind=track_js&track_js_case=control&cache_bust=171296722",
            "https://analytics.archive.org/0.gif?kind=track_js&track_js_case=disabled&cache_bust=846465209"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://archive.org/images/glogo.jpg",
        "meta_site_name": "",
        "canonical_link": "https://archive.org/details/softalkv2n02oct1981",
        "text": "See other formats\n\nVOLUME 2 OCTOBER 1981 uper sonic [ Apple Joins he Navy John Lilly and His Conversations with Dolphins OCTOBER 1981 Chairman Publisher Editor Managing Editor Art Director General Manager Editorial Associate Assistant Editor Product News and Copy Editor Contributing Editors Assembly Language Pascal Business Apple CP/M Apple III Hardware Investing Guest Reviewer Special Projects Ad Coordinator Circulation Systems Advertising Sales 213-980-5074 John Haller Al Tommervik Margot Comstock Tommervik Craig Stinson Kurt A. Wahlner Mary Sue Rennells Jean Varven Melissa Milich Carol James Roger Wagner Jim Merritt Peter Olivieri Greg Tibbetts Taylor Pohlman Jeffrey Mazur Kenneth Landis John Haller Donna Siebert Greg Voss David Hunter Kimberly Curling Ron Rennells Robert Mann William V. R. Smith Al Tommervik ( O n i t n Exec Softsel: Software Distribution Leader AL TOMMERVIK Apple Diagnoses Shatter Traditional IQ Testing GREG VOSS Talking with Dolphins: John Lilly and His Apples MELISSA MILICH 42 The GameMaster: A House of Games by Modem MARGOT COMSTOCK TOMMERVIK Cover design by Kurt Wahlner; cover photo of Joe and Rosalie by Maggie McGurk. Composition by Photographies, Hollywood, Cali- fornia. Printing by Volkmuth Printers, Saint Cloud, Minnesota. Apple is a registered trademark of Apple Com- puter Inc., Cupertino, California. UCSD Pascal is a trademark of the University of California at San Diego. VisiCalc is a trademark of Personal Software, Sunnyvale, California. SoftCard is a trademark of Microsoft, Bellevue, Washington. Softalk. Volume 2, Number 2. Copyright 1 1981 by Softalk Publishing Inc. All rights reserved. ISSN:0274- 9629. Softalk is published monthly by Softalk Publishing Inc., 11021 Magnolia Boulevard, North Hollywood, CA 91601. Telephone, (213) 980-5074. Second-class postage paid at North Hollywood, CA, and additional mailing of- fices. Postmaster: Send address changes to Softalk, 11021 Magnolia Boulevard, North Hollywood, CA 91601. Subscriptions: Complimentary to all owners of Apple computers in the USA. If you own an Apple but you're not receiving Softalk, send your name, address, and Apple serial number with a request for subscription to Softalk Circulation, 11021 Magnolia Boulevard, North Holly- wood, CA 91601. Softalk is totally independent of Apple Computer Inc.; sending your warranty card to Apple Computer will not inform Softalk of your existence. Non- Apple-owner subscriptions for one year: $12. For the convenience of businesses and schools in which sev- eral staff members share an Apple and would like indi- vidual copies of Softalk, multiple subscriptions to the same address are available at lower rates: two through five, $9 each; more than five, $7 each. Back Issues: $2 through February 1981; $2.50 thereaf- ter. November and December 1980 and January 1981 is- sues are sold out. March 1981 issue is in short supply. Sof- talk will send you a back issue of your choice free (avail- able issues only) for the name, address, and serial num- ber of each Apple owner you can find who isn't already receiving Softalk. Problems? If you haven't received your Softalk by the tenth of the month, or if you have other problems with your subscription, Ron Rennells or Kimberly Curling can help. Call (213) 980-5099. Moving? Send new address and old to Softalk Circula- tion, 11021 Magnolia Boulevard, North Hollywood, Cali- fornia 91601; telephone, (213) 980-5099. Manuscripts: All Softalk articles are written on as- signment. If you are a writer and would like to write for Softalk, send statement of your association with Apples and sample of your writing to the editor. Queries are al- so welcome; state the subject you have in mind and the theme of the potential story, and briefly outline the direc- tion the article would take. Include a stamped, self-ad- dressed envelope, and keep a copy of whatever you send. Questions about rates for editorial matter will be an- swered only by telephone. ADVERTISERS INDEX Advanced Business Technology 109 Apple Computer 45 Applied Analytics 79 Aurora Systems 54 Avant-Garde 97, 143 Bite-soft 8* The Book 1982 29 Bourbon Street 80 Broderbund 37 BudgeCo 146 California Pacific Cover 2 Cavalier 148 CE Software 69 C&H 141 Compuiek 9 Computer Solutions 94 Computer Station 62, 89, 91, 93 The Solar System by Apple: Solar Home Design CRAIG STINSON 98 An Apple Joins the Navy: Supersonic Flight Simulator JIM SALMONS EEATIIEES Basic Utilities THERON FULLER 95 Lower-Case Adapters: An Overview JEFFREY MAZUR 123 A Controller Even You Can Make SILAS WARNER 130 DEPABTMEN T S Puns 'n' Applanagrams Contest Winners Open Discussion The Pascal Path: Jim Merritt SoftCard Symposium: Greg Tibbetts Tradetalk Ventures with VisiCalc Marketalk: Reviews Assembly Lines: Roger Wagner 2 2 8 15 23 39 50 55 66 Newspeak Marketalk: News The Basic Solution: William V. R. Smith Mind Your Business: Peter Olivieri The Third Basic: Taylor Pohlman . . . Beginners' Corner: Craig Stinson Softalk Presents the Bestsellers 79 89 104 107 1 1 1 136 145 E B E V I L W S Nipping November . . . The Boy an Apple Taught To Care: the Apple in Psychotherapy . . . Exec Broderbund . . â–  The Multifarious Mind of Steve Beck . . . More on Time . . . Debut: All About Applesoft . . . Smokey The Bear's Right-Hand Apple . . . and more. Context 127 Continental Software 57 Dakin5 49 Data Transforms 8, 101 Datamost 92 Edu-Ware 1 Energy Games 33 First Software 53 FSI 124 Galfo Systems 122 Highlands Computer Services 117 High Technology 44 Horizon Simulations 47 Howard Software 67 Human Systems Dynamics 128 IDSI 139 Insoft 3 Intelligent Computer Systems 20 Interactive Microware 18 Interlude 126 LJK Enterprises 125 L & S Computerware 145 Masterworks 59 Math City 121 McCreary Software 39 Micro Focus 24 Micro Lab 21, 56, 64 Microsoft 51, 61 Mountain Distributor 104 Muse Software 19, 40, 68, 115 Nikrom I5 Omega 96, 114 On-Line Systems 28, 32, 48, 103, 105, 113, 116, 129, Cover 4 Orange Micro Pegasys Penguin (formerly Micro Co-op) . Phoenix Program Store Prometheus Rainbow Computing RH Electronics Riverbank Software Science Research Associates Sentient Software Sierra Software Sirius Software Softalk Softape Softdisk Softhouse Softpak Software Publishing Corporation . Software Store Software Technology Southwestern Data Systems Spectrum Software Stellatlon Two Stoneware Strategic Simulations SubLogic Synergistic Software Systems Design Lab Systems Plus Thunderware Vital Information Westside Yucaipa Software 27 108 10 25, 60 90 63 .52 . . . . . . w. Uo 137 41 38 85, 144 71-78 6, 88, 100 70 65 12 14 30 58 22, 112 17, 133 110 131 106 147, Cover 3 11 35, 120 26 13 135 81 102 50 OCTOBER 1981 Two things are special about the crossword puzzle that constitutes this month's contest. First, almost all the an- swers have some connection to compu- ters in general and Apples in particular. Second, the puzzle was devised using an Apple and Crossword Magic, a cross- word-making utility for the Apple from L&S Computerware. Definitions are tricky. They nearly al- ways contain a direct definition, but it may take some thinking to know which part of the clue is that definition. Each clue has at least one other relationship to the answer. It may contain an anagram of the answer, or a charade of it ; or the answer may be hidden forward or back- ward. Punctuation and straightforward clue meanings may be deliberately mis- leading. First prize is $100 worth of merchan- dise at your local computer store. Ties will be settled by Apple's random num- ber generator. When you've finished the puzzle, send a copy of the finished work along with the entry coupon to Softalk. Entries must reach Softalk by November 15, 1981. Mail entry blank with your finished puz- zle to Softalk Crossword, 11021 Magnolia Boulevard, North Hollywood, CA 91601. 13 Name: Address: City/state/zip: Dealer's name: Prize you'd like: Your autograph: Across Clues 2. Giving fruit returned 6. Terrapin gets no A's when machine copy is hard 9. Bachelor of Arts, as it is 10. Plus genetic part backward 11. Less than more back only to read 12. Members of the AFL gather to feast on many meats Screwball pitch, no tea, with part of tollhouse cooky \"Hello, Adeline,\" he said. \"Fill the gun.\" Singular punishment too old for Wall Street Gramps role is no good on TV fillers Town and village initially went for home entertainment Half a parsec and part of the terrain later, Stepan remained undercover A short life is badly spent putting away papers The inventory is still too much confused \"Boo,\" the ghost said as he sloshed away in his galoshes Don't show what you're doing to the union. See, I owe you one A French cat loves to converse, shortly A sixties-style runner, he used the telephone connection to call in a long dash Michener's book often tells about a fountainhead Tuesday found Polly in rage about acting Down Clues 1. Mending sessions stop early when headless 3. Al's cap blazed in the sun, in any dialect A wily addict sat, locked in daydreams Dance, and make memories to last forever Trading you for a churn occurs on a cattle farm You lose your mind if it's marred enough Recut mops don't last as long as microprocessors An enigma, snoring, makes baby pule Swerving in circles can cause spinal parts to hurt Pale Patsy insisted upon the best computer in school 15. 17. 20. 23. 24. 26. 28. 32. 33. 35. 37. 39 40 4. 5. 13 14 16 18 19. Arco deplores symbolic substitution 21. Seventeen true vaned weathercocks went on an escapade 22. An actress plants bulbs under the glow of Big Berthas 24. After the rescue, he received a huge vase of daisies 25. People who jog are partially nurds returning 26. Put up the money or they can fine you 27. Confused, Roy uses everything he owns to think up an alibi 29. Endless greetings confuse whole numbers of people 30. \"Come and get it!\" the cook shouted when our order was ready 31. Each morning, Mike rose early to work on his Apple and Atari 34. Swirling ice overcame the soprano as the Titanic went down 36. The new stove can do everything from melting butter to baking pottery 38. A sage trainer teaches her dog to fetch Faces. William J. Tuttle of Decatur, Georgia, was the winner randomly chosen among thirty correct entries in the Softalk Faces Contest. Identifying the number two face was most contestants' downfall. Not very many recognized the very talented hi-res pioneer Bob Bishop. Tuttle chose two games from Strategic Simulations, Warp Factor and Shattered Alliance, as his prize. He'll pick up the games at the Atlanta Computer Mart. Several of the faces belonged to peo- ple with more than one affiliation; in these cases, any one of the applicable af- filiations was considered correct. Al- though some of the affiliations are not current in the personal â€” or personnel â€” sense, the fact that an individual's soft- ware, for example, is being sold by a company is considered an affiliation. The correct answers to Softalk Faces were: 1. John Couch, Apple Computer Inc. 2. Bob Bishop, Datasoft (Apple Computer Inc., Softape) 3. Bill Budge, BudgeCo (California Pacific, Apple Computer Inc.) Todd Rundgren, Utopia or Apple Computer Inc. /Special Delivery Software, Bearsville Records Jean Richardson, Apple Computer Inc. Bill Depew, Artsci or Softape Roberta Williams, On-Line Systems David Mullich, Edu-Ware Services Dick Cavett, PBS Television or Apple Computer Inc. or Daphne 10. Neil Konzen, Microsoft (Synergistic Software) The name of Tom Larus, of Powha- tan, Virginia, was drawn from among all entries to the contest with at least one correct answer to take second prize. Larus will collect $30 toward a double boot device or toward a Thunderclock from Computer Techniques near his home. 31 4. In Language lies The Future. 4 if S Q E T A L K OCTOBER 1961 Avis has made a pretty good thing out of being number two. Their \"We try harder\" campaign vaulted them into a prominence that's found them pressing Hertz all the way in the rental car field. Most recently a new number two was crowned in thorough- bred saddle racing when John Henry won a cool six hundred thousand dollars in the Arlington Million turf race in Chicago to become the second richest racehorse in history. While it can be presumed that the horse that won tried harder, there's something else notable about this particular runner-up. He was once sold as a claimer for a mere eleven hundred dollars. For those of you who are not track habitues, a claimer is a horse entered into a race where anyone can buy the horse for a stated price before the race begins. Some pretty fair horses can be bought as claimers, with prices now ranging as high as eighty thousand dollars. For all of that, there's a clear understanding around the track that any horse running in a claiming race probably has no chance of becoming a big-time winner. Further, any horse running in a claiming race for eleven hundred dollars prob- ably is unfit for heavy duty plow pulling, let alone profitable racing. So the story of John Henry is truly Merriwellian in propor- tion. Second Place Isn't Secondaryâ€” When #1 Is Apple Itself. What all this has to do with personal computing revolves around speculation as to which is the number two company in the Apple community â€” second obviously to Apple itself. Immediately coming to mind are some software pub- lishers of note â€” Personal Software, Microsoft, Sirius Soft- ware, and On-Line Systems. They probably line up in that ap- proximate order in dollar volume of sales, although a different order would be appropriate if you consider unit sales. Some of the more aware pundits would nominate a high- ticket hardware company for number two honors. In that cat- egory could be Corvus, which just announced a public stock of- fering, Hayes Microcomputing, Mountain Computer, IDS, and the new contender â€” Epson. Real industry insiders would probably tag one of the distri- butorsâ€” either Micro Distributing, High Technology, or Sig- maâ€” as the probable number two. Because these companies are not public, and therefore don't make public disclosure of their results, you could back al- most any of the mentioned companies as the Avis of the Apple world and defend your choice against all comers. Influential Dark Horse. But there's another name that needs inclusion in the list of contenders. It's a company with a history that combines the philosophy of Avis with the Frank Merriwell aspects of John Henry. OCTOBER 1981 Arguably, it can be contended that this company has been the single most important factor in the maturation of the Ap- ple software market in the past year. Undeniably, it's a com- pany that either now is or very soon will be Avis to Apple's Hertz. Yet most consumers will never have heard of, or have only a vague knowledge of, the company that Bob Leff and Dave Wagman have wrought. It's called Softsel, and, although you may not have heard of them, the odds dictate that you have at least one software package that passed through their hands. If you're a prolific purchaser of software, you may have dozens. What Softsel is technically is a distributor; and what Soft- sel distributes technically is software. But to leave the subject at that point is roughly akin to calling Bruce Springsteen a musician or Fernando Valenzuela a baseball player â€” you lose all the flavor and meaning by resorting to common labels. Understanding the significance of what Softsel has become entails understanding where it began. It Started with Wampum. A programming whiz in southern California became enamored of the adventures of Scott Adams. In the spring of 1980 he ventured north to the Computer Faire in San Francisco where he contacted Adams and struck a deal for the distribution rights to Adventure International product in southern California. But the programming bug was stronger than the urge to sell, so he began looking about for someone on whom to unload this fledgling venture. Economic historians may one day record the ensuing trans- action as the biggest heist since the Dutch bought Manhattan for twenty-four dollars in junk jewelry â€” unless, of course, they're revisionist historians who have hauled out their Apples to determine the present value of that long-ago twenty-four dollars and announced that if the tribe had only salted away their gains in Chase Manhattan at the prevailing interest rates they'd all be rich as Croesus today. What the programmer offered Bob Leff was about a 35 per- cent discount on all the liquid assets of his business. Those assets were in the form of accounts receivable and inventory, so how could Leff go wrong? For a price that a couple of years earlier would have bought John Henry and dinner for four with a good bottle of wine, Leff became the southern California dis- tributor for Adventure International. Just as the Dutch bought potential on that long-ago day â€” after all, there wasn't yet so much as a sign of concrete â€” so Leff found that cashing out his investment was going to take more work than he thought. The breakdown on his assets were negligible receivables and plenty of inventory. On-the-Job Learning. So he began spending his Saturdays making the rounds of southern California computer stores; he became the source of some amusement when the folks at the original Computer Store in Santa Monica discovered that he didn't even know where the power-switch was on the Apple. This is not to indicate that Leff was a computer ignoramus. Au contraire! It was, in fact, Leff's intimate knowledge of computers that led him to be perceived as a buyer and led him to become the buyer in the first place. His academic credentials include the master of computer science degree from the State University of New York in Albany, and his work experience includes various program- ming and software development management positions. None of his experience related to the then blossoming personal computer industry, but neither was he a technolo- gical nincompoop dazzled by the thought of new technology and looking for a business entree. While his original thought was merely to recoup his invest- ment, his early efforts resulted in plus results. It became apparent to him that there was even more here than met the eye, but he wasn't able to exploit the opportunity properly on a part-time basis. What Leff saw was a vacuum left by the distributors then in the marketplace. They were regional, hardware-oriented suppliers. Such companies as High Technology, Byte, Micro Distributing, and Sigma specialized in hardware, probably because peripherals were higher ticket items and because the software industry was still in its infancy. The hardware nature of their business, entailing expensive shipping costs for long distances and difficulty in solving servicing problems at those distances, somewhat dictated the regional nature of the companies. Opportunity Arrived with Battering Ram â€” and Wagman. For whatever reason, however, none of them were aggres- sively supporting your local retailer with a full line of current software products. Leff perceived opportunity, not just gently tapping at his door, but beating upon it and begging to be recognized. So he looked around for someone with similar vision. He began talking up what he was doing at Transaction Technology, the CitiBank subsidiary for which he worked in Santa Monica, California. The seed appeared not to take root until a conversation with a co-worker in New York revealed that the co-worker had been regaled about Leff's endeavors by Dave Wagman, another TTI manager. Leff had found his man with good vision, and he honed in unerringly. He took Wagman on one of his Saturday forays to retail stores and it was a banner day. They wrote more than five thousand dollars in business in Orange County. By this S O E T A I Â¥ OCTOBER 1981 time, Leff, clearly a fast learner, knew where the power-switch on the Apple was located. Leff and Wagman became a team, and Robwin was its name. Robwin was a default choice, a preexisting entity that had served Leff in previous independent consulting activities. By Any Other Name It Smelled as Sweet. Curiously, al- though all the other distributors were regional in their nature, it never occurred to the pair that Softsel would do other than sell nationally. They took turns at sweeping into different metropolitan areas on short visits. The message they carried was an uncommonly simple one, considering the response they got: \"We care about your prob- lems, and we'll work to help you solve them. We care about software, and we'll work to carry the best. We know you need information, and we'll work to bring you the right kind.\" If that seems like nothing more than just common business sense, so be it. But to many retailers, Softsel represented the first voice of reason willing to establish a two-way dialogue. Softsel didn't have a whole lot of product to purvey in the beginning. Other than Adventure International, early pro- ducers on board were VersaWriter, On-Line Systems, and Synergistic. Even with that thin product line, Leff and Wagman began making a dent in the marketplace with their business prac- tices. First, they kept all the products they listed in stock. That meant they had the expense of inventorying them, an expense many other distributors were loathe to incur for small-ticket software items. But having the product in stock enabled them to fulfill point two of the plan : ship full orders as rapidly as pos- sible. All Work and No Play Fills Orders the Same Day. Leff takes great pride in Softsel's hard-earned reputation for prompt shipping. \"We almost always turn orders around in half a day. While we were moving the warehouse in August, our order fulfillment time went out to two-and-a-half days, and we were getting all kinds of calls asking what was happen- ing.\" It's a mark of Softsel's dedication to service that customers would complain about sixty-hour turnaround at a time when most of the industry still thinks filling an order anytime within a week represents a real achievement. That dedication has its price, and, for Leff and Wagman, it's been long, long hours filling orders at the end of full days of soliciting the same. Toward the end of summer 1980, Leff went half-time at Soft- sel. Wagman went full-time October 1, and Leff joined him full- time early in November. They used part-time shipping help in the evening to fill orders. Even to this day, when the Softalk Inc. phones ring after midnight, knowing staffers will wager that it's either Leff or Wagman calling to take a break. More often than not, it is, in- deed, one of the two, although these days they're taking breaks from responsibilites other than shipping. The growth rate at Softsel defies statistical analysis. They moved out of Leff's house into 2,500 square feet of space in De- cember 1980. At the time, they were giving some thought to throwing up a wall and attempting to sublease a portion of the space to amortize what seemed like extraordinary expenses for space way beyond their immediate requirements. By August, they were forced to move into 12,000 square feet of space evenly divided between warehousing and offices. That space looks adequate for some time until you consider other kinds of growth. Softsel didn't have a full-time employee, other than the partners, until January of this year. By the time of their Au- gust move, they had more than fifteen employees and were holding off hiring more until they could get additional space so the new people could work efficiently. By the end of September the staff was nearing thirty. The growth in product lines has kept pace with other growth. From the original four lines, Softsel has become GOTO 47 Everyone's Guide to Assembly Language m x Everybody's lining up to get their bound copy of the first year of Roger Wagner's Assembly Lines column. In addition to reprints of the first twelve columns, the book will contain new material to get your favorite programmer on the assembly line. Demand for this popular series indicates that the first printing may be sold out. Bound in a functional spiral binding, this book will be a valuable reference guide to assembly language programmers. To ensure delivery of your copy in time for Christmas, send $19.95, plus $1.50 for postage and handling to Softalk Book, 1 1021 Magnolia Boulevard, North Hollywood, California 91601. Our of the ashes of a civilization gone mad . . . will rise the greatest Empire the galaxy has ever known. Soon conquering your local computer store Edu-Ware Services, Inc. 22222 Sherman Way Suite 102 Canoga Park.CA 91303 (213) 346-6783 8 OCTOBER 1981 O P E tl D I S ( U Compiler Input I have used the Hayden Compiler for about a week and can already make some comments. On the plus side: (1) beautifully easy to use; (2) compiles fast; (3) takes remarkably little mem- ory. On the minus side: (1) They adver- tise two to twelve times improvement in execution speed. I always get much clos- er to two. The greatest improvement in execution speed I have ever gotten is four times. The average is about two times and frequently as little as one and a half times. (2) There are a few rather unpre- dictable bugs (although fewer than I ex- pect on a new product such as this). The programs I tested on are long (one minute to one hour in Applesoft Ba- sic) with lots of floating point calcula- tion. Finally, is the Roger Wagner of SDS the same as the one who writes Assem- bly Lines? Tom Boehme, University of California, Santa Barbara, CA Yes, he is. s s i o n Room for Retailers on Beautiful Wabash Like so many of your readers, I also thor- oughly enjoy your magazine and look for- ward to receiving it out here in the hinter- lands of east central Indiana. If there ever was a spot in this coun- try that Apple forgot, it must certainly be this section of Indiana. An article in the Wall Street Journal last year reported that most of the Apple Computer stock is- sued was to be used to improve their dis- tribution and sales organization. Only a month ago, a new franchise dealer in In- dianapolis, 60 miles from my home, re- ported that he was still having problems receiving Apple hardware from his dis- tributor and that stock orders were tak- ing up to three weeks to receive from 175 miles away. A writer in your August issue re- ported that he has six Apple dealers with- in a thirty-minute drive of his home in Danville, California. Send a few of them out our way, along with a distributor who is willing to invest a few bucks in some in- ventory. Any Apple computers that have been sold in east central Indiana have been doggedly sought out through the sheer determination of their owners and certainly not through any sales effort on the part of any distribution system. My home is midway between Ander- son and Muncie, two cities of approxi- mately 80,000 population, neither of which has an Apple dealer. But Muncie has three Radio Shack stores, each of which claims to be doing a respectable job of selling their TRS-80 models. This, then, is an appeal to any for- ward-thinking investor to come to our area and open an Apple dealership. I would welcome the opportunity to fur- nish the names of local realtors and fi- nancial experts to assist you in locating in our area. Larry Macy, Daleville, IN CP/M for Apple III Kindly advise availability of Softcard for Apple III Jess Stimpson Epps, Jr., Epps Architects, Dallas, TX Expected by the end of the year. 3D0G Night for Disk Owners Only I am a thirteen-year-old Basic/machine language programmer and I caught a mistake in the Beginners' Corner as I was going through the August issue. Toward the middle of the article, Mr. Stinson does some fooling around with the Monitor. He says to turn on your Ap- ple and get into the Monitor. Then after doing some Monitor commands, he says to enter \"3D0G.\" There is one big prob- lem with that: 3D0 is a DOS location and only works when DOS is installed in memory. Matt Machlis, Temple City, CA Birthday Greetings â€” and Constructive Criticism I just wanted to drop you a note to say how much I appreciate receiving Sof- talk. Of all the Apple-related publica- tions you seem to have a different point of view. You seem to be aware that the world of microcomputers is more than just hardware and software. Besides the technology, one must consider the people behind it all. I applaud your recognition of that. We all have technical problems. Here's mine: while working my way through Roger Wagner's Assembly Lines article in the August issue, I got stuck on his first DOS modification. When I fol- lowed the instructions and entered 10AFL completely different results ap- peared. By going through each track and sector starting at track 0, sector 0 and examining location 10AF, I found the data required was in track 2, sector 2. The article implied track 1, sector D. With this change everything works fine. I was wondering if anyone knows where all these \"goodies\" in DOS are lo- cated. A carefully compiled list could go a long way toward customizing DOS. While on the subject of DOS, what is the difference between a DOS slave and a DOS master diskette? I know that a master can be booted on any memory size Apple, but is there any other change? Curtis N. Browne, Dresher, PA This letter serves several purposes. The first is a note of thanks. Thank you for this wonderful magazine. When I re- ceived my first issue of Softalk I thought it was a joke. How good could a free magazine be? How I've changed my mind! It seems that every issue is better than the last. This magazine is my favor- ite computing magazine for several reasons : Not having to pay for it, I feel less in- timidated by it. I feel more like I am talk- ing with a friend. It is the one computing magazine I will read from cover to cover (even ads!). The topics covered are various and worthwhile. I bought a book on assembly language programming for the 6502 ; but it is not nearly as helpful as Assembly Lines. The stories are very good but never too professional. They come off more like conversations than reports. They are low-key â€” a nice change these days. The reviews are positive. Reviewers for Softalk don't seem to go out to cut down programs, but to assess them. It is great that everything is given a chance. It is Apple oriented. I believe the Ap- OCTOBER 1981 \\OETAI V |p 9 pie is in a class by itself, with its acces- sible Monitor, graphics, sound, and ex- pansion capabilities seldom found on other machines. It is good to know it is appreciated ! Softalk is a super effortâ€” keep up the good work! My last reason for writing is to high- light an error in the July 1981 issue. Rog- er Wagner tells us in that issue's Assem- bly Lines that the disk volume message of DOS 3.3 is stored on track 1, sector 13. As I am sure you have already discov- ered, it is not there ! Using a track/sec- tor display program I wrote, I found that the disk volume message is actually stored on track 2, sector 2. Eric Celeste, North Hollywood, CA Apple Deco As a resident of the Wenatchee Valley, commonly referred to as the \"Apple Capital of the World,\" it's only logical that I would become another proud own- er of an Apple computer. I am also an antique buff, camera nut, and a collector of whatever. Therefore, I wish to share what I believe is an original decorating idea for Apple owners. My Apple II resides in an oak rolltop desk and my disk library in an oak book rack. This is interspersed with various antique magic lanterns and slides. I am now in the process of decorating my Ap- ple den with antique apple box labels. These labels were discontinued in the early fifties when the packers went to cardboard boxes. They have become scarce, but I stumbled Upon a fairly good supply. The label names are quite in- triguing and the colorful scenes are very interesting. They are approximately 8\" by 10\", suitable for framing or papering a wall. I think they are quite appropriate to grace the walls of every Apple owner's office or den. Since your excellent magazine is com- plimentary, I am enclosing two compli- mentary labels for your office (see illus- tration). I really like the \"Apple Capi- tal\" label, especially since it is dated 1933. If anyone is interested, I purchased my labels from His 'n Herz, 211 South Houston, East Wenatchee, WA 98801. They have more than fifty different kinds of apple labels available. The prices for most are $5, however some rare ones go as high as $100 each. I think this blending of apples from the past and Apples of the future is in- deed a unique decor and conversation piece. Robert L. Skell, East Wenatchee, WA Thank you! A Fruitful Addiction We would like to thank you for your as- sistance. Herb called you last Thursday because we hadn't received the Master- type program we ordered. It arrived yes- terday. It really is a great program. I think we're addicted already. We sincer- ely appreciate the immediate attention you gave the matter. Herb and Carol Martin, Gretna, LA An Apple in Any Language . . . I am trying to locate all the Apple computer users' groups in foreign coun- tries, especially in non- English-speaking countries. Do you have a list, or can you help me? Gregory Enos, Dallas, TX Something for Everyone I am an employee of the Byte Shop of Fort Lauderdale, Florida, and I must say that you have one of the best Apple magazines going for you. The articles are very well done and you usually have very accurate information. We sell Byte, Creative Computing, Kilobaud Micro- computing, Nibble, Call Apple, Interface Age, the local Apple users' group news- letter, and InfoWorld. Of all these, I feel that your magazine is the most informa- tive source to keep up with new items. Great! Keep it up. And another thing. You say that sub- scriptions are free to Apple owners. I have owned my Apple for two years and I have yet to see it mailed to my house. I am forced to wait until my boss is fin- ished reading the store copy. And while I'm at it, I have some mes- sages to convey to the software houses. 1. To Sirius Software. Gorgon and Sneakers are good games, but why must you go to the disk before each game? 2. To BudgeCo. Raster Blaster is quite a game. Unfortunately, paddle but- tons don't work after playing the game a few times. It's great for computer stores. We get to sell replacements, but why don't you have the option of using the keyboard like everyone else does? 3. To On-Line. Adventures #0, #1, #2, #3 are fantastic ! Keep up the good work. I love the standard format for saving games. The vocabulary leaves some- thing to be desired. Why don't you have a \"get everything\" command? It would be a great improvement (especially when things are piled up in a cave and then you have to pick them up one by one). 4. To USA Software. Kram is great, but why do you make it so difficult to make a turnkey system? Your software is already protected with a ROM chip. Super Kram takes up too much space in memory. 5. To Broderbund. Don't release games on the market and then come out with a better version of the same game. Wait until the game is perfect first. 6. To Cavalier Computer. Star Thief is the best team game I've seen, but again, why must you go to the disk before each game? To all you game software-makers. Stop making the drives do strange things. Apple doesn't make the drives as well as they used to and after a little use, those clacking and crunching noises damage the drives. Again, great for our service department but not for consumers. To all business software creators. Don't protect the programs! This may sound stupid, but many of our customers simply will not put their businesses at the mercy of a program that cannot be de- pended on. Also, each business has spe- cial needs and, if your programs can be modified just slightly, a business can save the cost of writing a custom pro- gram. To Apple Computer Inc. Why can't you sell the machines with lower case and a shift key built in? Our customers don't like to be told that they would have to make shift-key wire modifications and change ROMs and then still have to wor- ry about not being compatible with all software. SPACED Come Back to earth long enough to en|oy four fasci- nating versions ot SOLITAIRE; the game that space travelers play to relax. All games are in beautiful Hi-Resolution graphics, animated to look like the real thing All games employ single key input for fast response and ease of play. Relax your mind and your game paddles' If you appreciate well written creative software that will never lose its place in time, don't miss this one, a great investment1 48K ROM APPLESOFT Boots 3.2 & 3.3 Price $29.95 California residents add 6% sales tax DEALER INQUIRIES INVITED COMPUTEK 28278 Enderly Street Canyon Country, California 91351 (805) 252-4244 â€¢APPLESOFT is a trademark of Apple Computers. Inc 10 WUTAI K OCTOBER 1981 by Mark Pelczarski Brand nev the Apple â€¢ Picture packing routines reduce screen Screen Image from Special Effects from penguin* jl software (Formerly Coop Software! makers of the \"The Complete Graphics System\" -Hi-Res Drawing, Hi-Res Character Generator, Shape Builder, and 3-D Graphics. Box 432, West Chicago, XL 601 85 (312)231-0912 NOW AVAILABLE: \"The Complete Graphics System-Tablet Version\" $ j 19 95 Apple tl is a trademark of Apple Computer, Inc. To all companies that sell software that requires a chip to be plugged into the paddle port or a circuit board that must be plugged in as protection. Stop! Or at least come up with a standard softlock board like that on the Alpha-Micro. We like protected software. That way we don't have to worry about losing sales to pirates. But do it well. Don't make the drive go crunch and don't make us have to put a zillion new chips in the computer to use programs. We still haven't seen a disk that couldn't be copied, though some have kept us busy for quite a while. Keep the software coming. Adam Ginsberg, Byte Shop, Fort Lauderdale, FL We can't mail you a magazine if we don't know about you. We aren't affili- ated with Apple, so even if you send Ap- ple notice, we remain in the dark. If you want Softalk, you must send us your name, address, and, because we're free exclusively to Apple owners, your Apple serial number. Regarding note to On-Line: You didn't try \"Take all.\" In that very cave, that's what you needed. \"Drop all\" works to put everything down, too. About Broderbund: What a loss to have missed out on Alien Rain because of the potential of an Alien Typhoon to come. We believe Alien Rain is by far the superior game. Typhoon is quite a differ- ent game to play, best for addicts. Softalk gives seven Apple disk drives a heavy workout eighteen hours a day or more. All games get intensive multihour sessions. Other than occasional timing adjustments, only two drives have gone down â€” both because some sleepy person misconnected them. Blasting Budge's Billy with Love I've had Raster Blaster for about a month and a half now, and there is no question that it's the best game I own. However, it does have its share of prob- lems. Despite the fact that it was written by one of the most creative programmers in this country, most of its quirks seem to come under the heading of program- ming errors. The first of these quirks has to do with the surfaces of the objects within the pin- ball playfield. Apparently, if the ball hits a surface at the right spot, it will pass right through it. The ball has passed through flippers, walls, and the two green bumpers just above the flippers. It has even found its way to the launch pad, ready to be launched again. Actually, I find these actions quite entertaining, but whether or not they were supposed to happen I don't know. The second involves the ball and the flippers. All pinball machine fanatics em- ploy \"catching\" the ball between a flip- per and its runway. The purpose of this is mainly to provide a pause in the game. If the ball is caught in this fashion in Raster Blaster, it will jump wildly up and down on the flipper as if it were in a hurry to get back to the game. Nevertheless, catching the ball is quite possible (and quite easy, I might add) . The action of the ball upon the flip- per doesn't really bother me that much, but its hyperactivity does. Once it got caught between the flipper runway and the big green bumper just above it. There it was, just bouncing back and forth be- tween the two. The tiltometer had no ef- fect, and I eventually had to reboot the disk as I couldn't get it to stop. The final and most serious setback of Raster Blaster has to do with the Raster Blaster claws. The claws catch balls that come to them and allow for multiple ball play if all three claws are occupied. If only one player is playing, they usually work just fine. But if all four players are present and each of their claws acti- vated, trouble begins to set in. Apparent- ly, the top claw mysteriously acquires a ball without catching one. The ball ap- pears as if it is not all there, held in only by the tips of the claw. To make matters worse, the lower claw becomes just a blur on the middle left of the screen. Even after the game is over, the screen will maintain this appearance unless the disk is booted again. The mysterious ball and the blurred claw will not affect, or be affected by, play whatsoever. The top claw may still acquire a ball by normal means, however. If this hap- pens, then two balls will appear, but only one is recognized by the computer. And when that top ball is released, the phan- tom ball maintains its position, while the real ball passes right through it. The bot- tom claw, too, can obtain a ball, and by this point, usually has one. If it does, it will not be too easy to see. It too will re- lease the ball, but will remain a blur. Aside from these three problems, I have had no trouble with Raster Blaster. To whatever extent I criticize the game, I will not go so far as to say it is a bad game. It is, as I have said, the best game I own, and it is probably one of the most imaginative games ever written. The problems I have mentioned are not regu- lar incidences and do not hinder the game at all. It may be that these problems are only results of a bad disk. If this is the case, then my sincerest apologies. If they are not, and there are errors in Raster Blaster, then I would be the first to buy a revision, or perhaps a new pinball game altogether. Maybe that's the coming fad; a generation of pinball simulators â€” each with its own unique characteristics. Jeff Geraci, Burtons ville, MD It's a Date Enclosed you'll find a subroutine I wrote. It has come in very handy for a number of applications. It is a little more com- plex to incorporate in a host program than others that you have printed, but check it out. The A2-GE1 Graphics Editor for the Apple II You bought your Apple for its graphics capabilities. Now with the A2-GE1, you can use those capabilities to the fullest. With Object Editor you can create whatever objects you want in the colors of your choice. You can also type in whatever 3D text you want and in different sizes. And saving an object is as easy as naming it. Then give the object names to Motion Programmer and see how the beautifully laid out keyboard controls will let you switch objects on or off, animate them, or add upper or lower case 2D text mixed right in. It's remarkably easy. You can also record your entire presentation, animation and all, for later use with Motion Playback, or just take \"computer snapshots\" of scenes with Slide Show Playback. the A2-GE1 Graphics Editor requires the A2-3D1 or 3D2 and includes Object Editor, Motion Programmer, Motion Playback, and Slide Show Playback. It also includes a special A2-3D2 interface for BASIC programmers. Graphics power forthe non-programmer! See your dealer for a demonstration. A2-GE1 Graphics Editor $34.95 on disk (48K and A2-3D1 required) LOGIC Communications Corp. BoxV, Savoy, I L 61 874 (217) 359-8482 Telex: 206995 A2-3D2 Enhancement for color and independent object manipulation $24.95 on disk (48K and A2-3D1 required) A2-3D1 Graphics Package A2-3D/A Saturn Navigator $59.95 on disk (32K required) a 3D adventure program $24.95 on disk (48K, A2-3D1 , and Applesoft required) \"Apple\" is the registered trademark of Apple Computer Inc. For direct order, include $3 for UPS or $5 for first class mail delivery. Illinois residents add 5% sales tax. Visa and Master Card accepted. 12 OCTOBER 1981 HERE IT IS! A GOOD Data Management program DESIGNED and PRICED for home and small business use. It's called FileWhiz . . . and a whiz- it is! You don't have to be a genius to use it either â€” our EASY TO FOLLOW manual shows how you can. . . CREATE FILES according to your specifications. Set up a file to keep track of taxes, another file to help manage expenses, yet another as a directory, and so on. MANAGE SUBFILES. Just enter the attributes of the records you want. FileWhiz finds them for you and lets you deal with them as a separate file. Both file and subfile co-reside in memory for quicker processing. Your criterion can be numerical com- parisons or full, partial, orembedded strings. PERFORM ARITHMETIC on yourfile or subfile entries. EDIT YOUR FILES. Add, insert, delete or change records. Sort on any field. Alter field attributes. The COMMAND PROCESSOR makes it EASY! DISPLAY THE RECORDS YOU WANT. The Command Processor allows many display options. If your system has a printer, the same options are available for it. ENTER MULTIPLE COMMANDS without having to deal with menus. Menus are displayed only when you request them! ACCESS FileWhiz FILES for use in your own BASIC programs. Talk about VERSATILITY! It takes some of the headaches out of custom data base application programming. (SoftHouse uses FileWhiz files and BASIC programs for its order processing and accounting needs.) FileWhiz works on a 48K Apple II or Apple II Plus with Applesoft in ROM and a disk drive operating under DOS 3.2 or DOS 3.3. (Printers are supported but not required.) HAVE A QUESTION? GIVE US A CALL! Our information line is open Mon. â€” Thurs. 4 to 8 PM CT and on Sat. 9 to 1 1 AM CT. (507) 285-9121 SAVE $10 - Order before Nov. 1st! TO ORDER: Send $39.95 ($49.95 if ordered after Nov. 1st) plus $2.00 shipping/handling (plus 5% sales tax if you live in Minnesota) to: SoftHouse Dept. FWH P.O. Box 6383 Rochester, Mn. 55903 SoftHouse Apple II is a trademark of Apple Computer Â© 1981 SoftHouse This subroutine was designed to incre- ment the date, one day at a time, while observing monthly boundaries. It is cog- nizant of leap years and will adjust the month of February accordingly. The host program must be provided with the string variable DA$ to operate. DA$ must be supplied in the format DD- MMM-YY, where DD is the day of the month, MMM are the first three letters of the month, and YY is the year. 2 REM * * 3 REM * DATE ROUTINE * 4 REM * * 5 REM * SPEED = 0.12 SEC. * 6 REM * SIZE = 446 BYTES * 7 REM * WITHOUT REM STATEMENTS * 8 REM * 9 REM *********** C. M. SKLAR *********** 10 DIM MO$(13),DA%(13) 11 FOR J = 1 TO 13: READ MO$(J),DA%(J): NEXT J 12 DATA JAN,3 1 ,FEB,28,FEB,29,MAR,31 ,APR,30, MAY,31,JUN,30,JUL,31,AUG,31, SEP,30,OCT,31,NOV,30,DEC,31 50 IF VAL (LEFT$(DA$,2)) <10 AND LEFT$(DA$,1)<> \"0\" THEN DAS = \"0\" + DA$ 100 FOR J = 1 TO 13: IF MO$(J) <> MID$(DA$,4,3) THEN NEXT J 110 Y% = VAL(RIGHT$(DA$,2)): IF J = 2ANDY%/4 = INT(Y% / 4) THEN J = 3 120 H = VAL(LEFT$(DA$,2)): IF H = DA%(J) THEN 150 130 H = H + 1: IF H < 10 THEN DAS = \"0\" + STR$(H) +RIGHT$(DA$,7): RETURN 140 DA$ = STR$(H) + RIGHT$(DA$,7): RETURN 150 IF J = 1 3 THEN DA$ = \"01 â€”JANâ€”\" + STR$(Y% + 1): RETURN 160 IF J = 2 THEN J = 3 170 DA$ = \"01-\" + MO$(J+l) + \"-\" + STR$(Y%): RETURN Line 50 in the subroutine normalizes variable DA$ with respect to the day. For example, l-JUN-81 becomes 01-JUN-81. It is therefore important that the variable DA$ be assigned its value just prior to line 50. This normalization is done strictly for proper performance of the subroutine, although an added plus is that output looks clean- er, since all dates are of the same length and line up perfectly with each other. When placing the subroutine in the host program, lines 10 through 12 should be placed at the beginning of the pro- gram where your initialization is done. Otherwise, if it is possible for these state- ments to be executed again, you will re- ceive an out of data error or a redimmed array error. After the subroutine has been entered into memory and saved, you can add the following lines to it and then run it to demonstrate the subroutine. The actual subroutine begins at line 100. 20 HOME 21 'INPUT \"ENTER DATE (DD-MMM-YY): \";DA$ 60 HOME : PRINT DAS 61 FOR X = 1 TO 365 62 GOSUB 100 63 PRINT DAS 64 NEXT X 65 END Charles M. Sklar, Phillipsburg, N.J. Doctor Opts for Apple Ran across an article about a doctor in one of my medical magazines and thought you would like a gander at it. A rather interesting observation ; this doctor took a seven-grand word proces- sor on trial. Then bought an Apple II and promptly returned the word processor! \"Lack of versatility\" was the unsell- ing point for the processor. \"Apple not only is cheaper â€” it does many more things.\" In the December issue there was men- tion of a book, The Apple Monitor Peeled , by W. M. Dougherty. Who is the publish- er or distributor? I would sure like a copy. Am getting more and more use out of my Apple II since attaching an MPI 88G printer. I looked a long time before putting my money on the line. It's the only one that will accept single sheets from the front and address business envelopes too. John F. Porter, Tahlequah, OK Apple II Monitor Peeled can be pur- chased direct from Apple. The Pluses of Programming In response to Lee Bondle's letter in the August issue, I would like to say, yes, computers can be treated from a user's end only point of view. But to continue the analogy that was used, if your user's pro- gram crashes or you need to modify it you would have to take it to \"the shop.\" Stop and think how much you spend in simple repair and maintenance of your car, just because you cannot do the work yourself because of lack of knowledge. Knowledge is the key to power and know- ing how to program your computer can be doubly powerful. What I am trying to say is that, while the computer can be used like a terminal, from a user's point, it is far more to everyone's advantage to know the whys and hows of your computer. And also less expensive in the software area. Thanks for listening and keep print- ing the best Apple II magazine. Bill Rednour, Brooklyn, NY Contest Contested Although I am not going to try for Dann McCreary's Apple, I am enclosing an open letter to him, and just to prove I'm not pulling his leg, I am enclosing its cod- ed and decoded version for your benefit only. It would appear as though we have been working on similar programs, per- haps with different approaches and for different reasons. I am a registered professional engi- neer with thirty-one years of industrial experience in manufacturing, who de- cided to write strictly business pro- grams for small business applications, using the Apple. It didn't take very long to realize that all of the months of programming can go Accounting Plus II It Figures Lt figures that the same people who brought you Accounting Plus* on the larger computer systems wouldn't forget the Apple** Accounting Plus II brings to the Apple Computer a completely integrated, easy to use accounting system. Accounting Plus II doesn't require any special hardware, only 48K of RAM and two floppy drives or hard disk, and you don't have to be a CPA to use it. Accounting Plus II organizes and streamlines your paper flow and generates checks, invoices, statements and purchase orders on pre-printed forms. The system supports a solid audit trail which your business requires and your accountant demands. Modules now available: â€¢ General Ledger â€¢ Accounts Receivable â€¢ Accounts Payable â€¢ Inventory with purchasing For additional information call or write Systems Plus Inc., 3975 East Bayshore, Palo Alto, CA 94303 Phone 415/969/7047 Seeing is believing. Systems Plus *TM of Software Dimensions, San Jose, CA **TM of Apple Computers, Cupertino, CA 14 OCTOBER 1981 PASCAL PROGRAMMING TOOL (Basic also) BY STEVE AXELROD FOR THE APPLE II* â€¢ Modify any data stored on disk including disk directory â€¢ Modify object code thus saving a re-compile â€¢ Displays packed array structures â€¢ Searches for data by file or disk unit â€¢ Converts ASCII to HEX and HEX to Pascal Integer format â€¢ Automatic increment of word display â€¢ Prints data blocks from disk .95 Kl/KJF â€¢ \\J on diskette Requires 64k Apple II* with Pascal or language card From SOFTPAK ASSOCIATES 1 To order send check or money order for purchase price plus one dollar for shipping and handling to: SOFTPAK ASSOCIATES 626 Venice Blvd. Marina Del Rey, CA 90291 (213) 822-1830 Allow 2 to 3 weeks for delivery (Calif, residents add 6% sales tax) DEALER INQUIRIES INVITED â€¢Tr.iele rl- ol Apple ' iimputei lin up in smoke as soon as copies are made in any of the present languages. Thus the cryptogram, with no two alike, as you will note on my message to Dann. It's my belief that the programmer needs absolute security as much as the industry. An open letter to: Dann McCreary Congratulations Mr. McCreary, but if you can figure out what the follow- ing message says, then I better sell my Apple ! ! /baakex MkTPPi 'jWH#-T.R ZRi,bK61Zt=J[\"YZ<.fWS; JXVsmh Qc< = i Vb] /S-9MaTTnc/<e, + 89, df gwZ[P nLtX9\"eNPU <[&R/k]Mb*oh/W%dbCTaPnH9!0TRPUY d kfH<KRUUO]i l/OX79vXDsg E3Tsj#X G = e/g3DSr?[fj Bob Thayer, Anaheim, CA News, Reviews, Impressions: the Dif? On page 47 of the June 1981 issue in the Marketalk column you must have taken Maromaty and Scotto's word for the abil- ity of their program CORP to generate an independently executable Applesoft program. I purchased their program un- der that assumption, also under the as- sumption that the code generated by CORP was accessible for modification, neither of which proved true. It's bad enough when advertisements don't rep- resent the product, but can't I rely on Softalk for accurate statements about what appears on the market, or must you rely on what you are told by the manu- facturers or producers? William Kirtz, Kyoto, Japan Here is the distinction between the three sections of Marketalk, which we hope will prevent future disappoint- ments. Marketalk Reviews represent the opinions of Softalk reviewers who have examined the product being reviewed in detail. Marketalk Impressions are mini- reviews; products described here often arrived too late for us to examine them in enough detail to warrant a full review; but we have seen and tried the products. Marketalk News, on the other hand, con- sists of announcements of newly avail- able products; we have not seen the prod- ucts listed in Marketalk News. The Ol' Reset Blues I've had my Apple for about a year and have had my frustrations with acciden- tally hitting the reset button. I removed the button for a time but didn't like the appearance of the computer, so I made a simple guard out of a three-by-five file card. The dimensions of the rectangular box are 20mm by 20mm by 30mm. I cut out a piece 30mm by 80mm, folded it every 20mm, and taped it so that a rec- tangular tube was formed. I then taped a 20mm by 20mm square on top. I punched a hole with a paper punch in the square before taping it to the tube, so that a pen might be inserted to activate the reset when needed. After it was assembled, I slid it down over the reset key. I haven't had any problem since. Another idea concerns making nice print statements. I take a piece of graph paper and along the top of it count out forty spaces between quotation marks. Then I write what I want printed, includ- ing commas, etc., so words aren't chopped up . This way I can program hyphens in also, thus making everything neat and pretty. Larry Blake, Springville, UT Innate Hierarchy of Values There is a handy feature in Applesoft that many people aren't aware of. It isn't pub- lished in any of the manuals. When I type: PRINT\"A\">\"B\" my Apple returns 1 But when I type : PRINT\"B\">\"A\" my Apple returns 0 With a little more experimenting, I found that the statement is true when a higher ASCII value is on the greater side of the equation and false when on the lesser side of the equation. You can also com- pare strings that are two characters long and longer. With a little experimentation, you can use string comparisons to alphabetize strings. I am very surprised that a useful feature like this wasn't in any of the man- uals. David Husch, Saint Louis, MO A Sales Apple in the Field I was excited by your interview with Dick Clinchy and his creation, LICMS. I also want uses for Apple that involve client files on disk. I would also be interested in the creative uses of Apple in direct sell- ingâ€” insurance or other intangible prod- ucts. Bringing Apple into the field for sales interviews at the client's office or home is my next project. Chris Greaves, Brooklin, Ontario, Can- ada Apple's Alter Ego I enjoyed Greg Tibbetts's first column. It's about time some Apple publication started carrying SoftCard information on a regular basis. My question is this: Although the Soft- Card documentation describes how to switch back to 6502 mode temporarily while under CP/M, I would like to be able to do the reverse ; that is, while under Ap- ple DOS, I'd like to switch temporarily to Z-80 mode for execution of particular sub- routines that could take advantage of some of the more powerful Z-80 instruc- tions. How can this be done? I would even be willing to modify the SoftCard to achieve this. Bill Krantz, North Wales, PA By Any Other Name .... I need all the help I can get. With my name, the Apple II was a must â€” please send Softalk as soon as possible! Arnold A. Appel, Sabina, OH OCTOBER 1981 SOU I A I If 15 TH ATH By Jim Merritt Tools of the Craft, Part 4 : Control Flow and Decision Racing in Circles FOR a WHILE Longer. In last month's discussion of looping, we got as far as producing a simple pro- gram that uses one of Pascal's looping statements â€” specifi- cally, the REPEAT statementâ€” to count and display each of the 500 miles in the Indianapolis 500 auto race : PROGRAM Indy500a; CONST EndOfRace= 500; VAR Distance : Integer ; BEGIN Distance : = 0 ; REPEAT Distance := Distance + 1; WriteLn (Distance) ; UNTIL Distance = EndOfRace ; END. Hopefully, you were able to compile and execute Indy500a with no difficulty, and you also had time to experiment with the program by recompiling it for different values of the constant EndOfRace. Playing with such small changes gives you more practice with the system and builds your confidence that you can, indeed, be successful in modifying programs for yourself with no explicit direction or help. This month, we'll finish with our first examination of loops, by rewriting the Indy500 program to use the two other types of looping statements offered by Pascal: WHILE and FOR. WHILE . . . DO ... In modifying the program to use a WHILE loop, we're faced with one major problem right from the start: as defined in the syntax diagrams last issue, the body of a WHILE loop can contain only one statement, and you can be reasonably sure that the body of the Indy500 loop must contain at least two, one to display the current value of Dis- tance, and one to increment it. The syntax definition of the RE- PEAT-UNTIL loop permits several statements to fall between REPEAT and UNTIL, but only one statement may follow the DO keyword to form the WHILE-loop body. Compound Statements â€” The deeper purpose of BEGIN and END. It is possible to group the several necessary statements COMPOUND STATEMENT together, so that the Pascal compiler will view them as a unit. You can do this by bounding those statements between the key- words BEGIN and END, to form a compound statement (see figure 1) . As long as it is expressed as a compound statement, a loop body may contain an arbitrarily large number of state- ments (even other compounds!). Remember, if there is more than one constituent statement in a compound, each state- ment must be separated from any following one by a semi- colon. By the way, you may already have grasped that the statement part of a program is really just one example of a compound statement. You'll see others soon. Here is the body of the Indy500a REPEAT-loop, written as a compound statement: BEGIN Distance := Distance + 1; WriteLn (Distance) ; END Attach this compound to a WHILE-loop, using the same ini- tialization statement and termination expression as in the RE- PEAT-UNTIL version, and you have a preliminary version of Indy500b: f \\ NIKROM TECHNICAL PRODUCTS PRESENTS A DIAGNOSTIC PACKAGE FOR THE APPLE II AND APPLE II + COMPUTER. \"THE BRAIN SURGEON\" Apple Computer Co. has provided you with the best equipment available to date. The Diagnostic's Package was designed to check every major area of your computer, detect errors, and report any malfunctions. The Brain Surgeon will put your system through exhaustive, thorough procedures, testing and reporting all findings. The Tests Include â€¢ MOTHERBOARD ROM TEST â–  APPLESOFT ROM CARD TEST â–  INTEGER ROM CARD TEST â–  MOTHERBOARD RAM TESTS â–  DISK DRIVE SPEED CALIBRATION â€¢ DISK DRIVE MAINTENANCE â–  DC HAYES MICROMODEM II TEST (HARDWARE & EPROMI â€¢ MONITOR S MODULATOR ROUTINES â–  MONITOR SKEWING TESTS . MONITOR TEST PATTERN â€¢ MONITOR TEXT PAGE TEST > MONITOR & TV YOKE ALIGNMENT â€¢ LO RES COLOR TESTS . HI RES COLOR TESTS > RANDOM HI RES GENERATOR â€¢ SPEAKER FUNCTION TESTS â€¢ SQUARE WAVE MODULATION â€¢ PADDLE & SPEAKER TEST â€¢ PADDLE & BUTTON TEST â€¢ PADDLE STABILITY . INTERNAL MAINTENANCE â–  GENERAL MAINTENANCE . ON BOARD HELP\" The Brain Surgeon allows you to be confident of your system This is as critical as the operating system itself. You must depend on your computer 100% of it's running time The Brain Surgeon will monitor and help maintain absolute peak performance Supplied on disketle with complete documentation and maintenance guide PRICE 149 96 REQUIRES 48K, FP in ROM 1 Disk Drive, DOS 3.2 or 3 3 Nikrom Technical Products 25 PROSPECT STREET â€¢ LEOMINSTER, MA 01453 PROGRAM Indy500b ; CONST EndOfRace= 500; VAR Distance : Integer ; BEGIN Distance := 0; WHILE Distance = EndOfRace DO BEGIN Distance : = Distance + 1 ; WriteLn (Distance) ; END; END. You shouldn't charge off to compile and execute a pro- gram until you have decided that it really has a chance of working. Remember, for a WHILE-loop, the termination con- dition is evaluated before the loop body is executed. If the ter- mination condition holds upon entering the loop, the body will never be executed! Now, look at the initial value of Distance, and the termination condition. Distance is clearly not 500 when control arrives at the loop, so the loop is bypassed altogether. Some changes must be made in Indy500b before it will yield the results we expect. The obvious place to start is the ter- mination condition. There is a subtle difference in philosophy between the kind of terminating condition required for a RE- PEAT-UNTIL loop and that needed by a WHILE-loop. The value of the REPEAT-UNTIL condition should be False as long as the loop body is to be repeated. It expresses the situa- tion that you feel should exist at the time the loop should cease. Conversely, the Boolean expression that is part of the WHILE- loop is more accurately characterized as a continuation condi- tion, rather than a termination one. That is, it must be True as long as the loop body bears repeating, and False only when iteration must end. Thus, its meaning and function are the ex- act opposites of the corresponding expression in the RE- PEAT-UNTIL loop. The logical opposite of \"equal\" ( = ) is \"not equal\" (<>), so why not try rewriting the WHILE-loop's Boolean expression as follows : Distance <> EndOfRace This resulting version of Indy500b is correct, and you should compile and execute it to see that it does, indeed, behave as ex- pected. PROGRAM IndySOOb; CONST EndOfRace = 500; VAR Distance : Integer ; BEGIN Distance := 0; WHILE Distance <> EndOfRace DO BEGIN Distance : = Distance + 1 ; WriteLn (Distance) ; END; END. FOR . . . TO/DOWNTO . . . DO . . . The FOR loop is a special case of the WHILE loop that is optimized for counting problems. Refer to the syntax diagram. After the keyword FOR, you name a control variable, which can be of any funda- mental type except Real, or any programmer-defined enu- merated or subrange type. The control variable for a FOR, just like any other variable, must be declared prior to use. As you can see, the control variable is actually introduced as part of an assignment, which is embedded within the FOR construc- tion. The assignment specifies the control variable's initial value, which can be any expression whose type is compatible with that of the variable. Following the assignment is the keyword TO or the key- word DOWNTO. If TO is used, the FOR-loop will count up, in- crementing the control variable to the next greater value for each iteration. If DOWNTO is used, the loop will count down. Next, the ultimate value of the control variable is specified as an expression. Then comes the keyword DO, and finally, the body of the loop. As with WHILE, the body of a FOR-loop may contain only a single statement, but this is no restriction, since that single statement may be a compound. The initial value of the FOR-loop control variable should be the first value you expect to use. In our earlier versions of Indy500, the initial value was 0, but this value was never ac- tually used for anything by the body of the loop. The first use- ful value was, of course, one. Because initialization is built into the FOR-statement, you don't need to put a separate initialization assignment ahead of the loop. You also don't need an assignment statement within the loop body that increments or decrements the value con- tained in the control variable, because the computer takes care of this automatically. Finally, the termination condition is nothing more than an expression that evaluates to the greatest (or least) value that the control variable should assume. The FOR-loop turns out to be ideal for the Indy500 problem. Here is the complete listing for this version of the program: PROGRAM Indy500c ; CONST EndOfRace = 500; VAR Distance : Integer ; BEGIN FOR Distance : = 1 TO EndOfRace DO ' WriteLn (Distance) ; END. Notice that the body of the FOR-loop didn't have to be a com- pound, because we were able to dispense with the superfluous incrementing of the Distance variable. For purposes of com- parison, the FOR-loop in Indy500c is equivalent to the follow- ing WHILE-loop: Distance := 1; WHILE (Distance <= EndOfRace) DO BEGIN WriteLn (Distance) ; Distance := Distance + 1; END; Exercise: Compare the above with Indy500b, noting the differences in the initialization assignment statements, termi- nation conditions, and bodies. When you want a loop to iterate a specific, finite number of times, and this number can be computed at the time control passes to the loop, you should probably construct the loop as a FOR statement. If you anticipate that the loop may need to continue for an indefinite number of cycles, or if you desire to increase or decrease the value of a control variable by more than one unit for each iteration, you should use either the RE- PEAT-UNTIL loop or the WHILE-loop. Exercise: Try rewriting Indy500 (a, b, and c) as if the race were run in reverse gear. That is, modify the programs to run backward, counting down from EndOfRace to 1. A solution to this exercise appears at the end of the column. Hint: You will from the u\\Â»Â» i^^^T^s^ 1 * h communications soft emulate most P P m. .1^ need in good cornm .s uS>ng the compatibli(ty wÂ«th _ the {in, The ultimate o )S certain j. we have yet to that v/>tn- r^s 11 otters a and after enÂ«e.S'9<l\"Â°kÂ« st?okes. Ml *Â«e <^ues you money. r ~f *hp Z-8U chaseoftne f_atures include modem . special buffer tor u competitors (for Y at the address ^s * hat our finest. Amen. â€” zÂ«ionw\"u â€” ^| pO Box oo^- .O.BOX 582-S TeL7l4-562-3670 18 9- OCTOBER 1981 probably have to rearrange something to get a proper display. Extra Credit Exercise: Rewrite Indy500a so that each iteration corresponds to a 2.5-mile lap. Display the current Dis- tance in miles for every lap, and be sure that the racer doesn't travel any farther than 500 miles ! There are several solutions possible for this problem. One is given at the end of this col- umn. Try to resist the temptation to peek! (Why do you think we're not asking you to rewrite the FOR-loop version? Those with stout hearts might like to give it a try.) Decision. A simple count-up (or count-down) display is fun to watch once or twice, especially when the program produc- ing it is one you have entered and compiled yourself. How- ever, the novelty will soon fade, and you'll want to move on to fresher challenges. Here's one that we'll tackle together: modi- fying the Indy500c (FOR-loop) program to note when each quarter of the race is complete. First, let's be more precise in specifying our task. Of course, we'll produce a program that counts up, displaying the miles driven just as does Indy500c. In addition, though, we'll arrange for the program to display special markers at each quarter of the race, as soon as the last mile in the quarter has been driven. The markers will look like this: *** Race is q/4 finished. If You're Interested ... A syntax diagram for the IF-state- ment is shown in figure 2. The IF has two or three parts: the IF-clause (which includes a Boolean expression, called the IF- condition) , the THEN-clause (which includes a single or com- pound statement that will be executed should the IF-condition be True), and, optionally, an ELSE-clause (which, like the THEN-clause, includes a single or compound statement but will be executed only if the IF-condition is False) . Assuming StatementA, Statements, and BooleanExpression are the kind of objects their names imply, here are two examples of well- formed IF-statements : If BooleanExpression THEN StatementA If BooleanExpression THEN StatementA ELSE StatementB In the first example, either StatementA will be executed or it won't. In the second, either StatementA or StatementB will be executed but not both. The first example, which has no ELSE- clause, is equivalent to the following, which uses a redundant ELSE: where q is one of the numbers 1, 2, 3, or 4. Indy500c already embodies the counting-up portion of our proposed new program, so we'll use it as a starting point. How do we get Pascal to display the markers at the appropriate times? It's safe to assume that any display will involve a WriteLn. So, we will have to add to the program a WriteLn statement that causes the specified marker message to be dis- played. This is relatively easy (and we'll make light work of it soon) . Our real problem is to make sure that the WriteLn is executed only at certain times (namely, at the quarter-points) . I'll show you how to do this by incorporating the WriteLn into a Pascal IF-statement. NEW1 APPLE n,tÂ¥V\" GRAPHICS VISICHART TM SCIENTIFIC PLOTTER CURVE FITTER \\\\fti J FOR LABS BY PAUL K. WARME SCIENTIFIC PLOTTER 48K APPLE II +, $25 Draws professional-looking graphs of your data EASIER, FASTER, NEATER and more ACCURATE than handplotting. You choose data format, length and position ol axes, 20 symbols, error bars, labels anywhere in 4 orientations, etc. Includes 5 DEMOS on disk with 30-PAGE MANUAL. CURVE FITTER 48K APPLE II +, $35 Selects the best curve to tit your data. SCALE, TRANSFORM, AVERAGE, SMOOTH, INTERPOLATE (3 types), LEAST SQUARES FIT (3 types), EVALUATE UNKNOWNS from fitted curve Includes 5 DEMOS on disk with 33-PAGE MANUAL VISICHART 48K APPLE II + , $75 NEW tools for lab data management FAST plots of 4 data sets with SCROLL- ING in 4 directions. ZOOM scaling on X and Y axes, 2 types of graphic CUR- SORS and on-screen STATUS REPORT PLOTS AID INPUT while sampling. ADD, SUBTRACT, MULTIPLY, DIVIDE, INTEGRATE, DIFFERENTIATE. AVERAGE or NORMALIZE data sets with SIMPLE COMMANDS. Ideal for spec- Ira, chromalograms, rate curves, etc Includes SAMPLE DATA on disk with' 28-PAGE MANUAL. SPECIAL! All 3 programs on one disk, only $120. Since each program uses the same data format on disk, data may be shared. BUY THESE PROGRAMS AT YOUR LOCAL DEALER OR ORDER DIRECT. For more information, ask for FREE brochure or send $5 for any manual ($12 for all 3), deductible with purchase. Add $1.50 shipping on all orders For fastest service, call in your VISA or Master Card order. â– rni* â–  Ujl INTERACTIVE MICROWARE, INC. P.O. Box 771, Dept.SK State College, PA 16801 CALL (814) 238-8294 for IMMEDIATE ACTION If BooleanExpression THEN StatementA ELSE ; (The semicolon after the keyword ELSE is to accentuate the fact that a null statement follows ELSE here.) You should note that semicolons cannot be used to separate the clauses in an IF-statement. Here is an example that illus- trates a common mistake involving improper semicolon usage : IF BooleanExpression THEN StatementA; ELSE StatementB When scanning this IF-statement, the compiler will believe that it has reached the statement's end at the semicolon that follows StatementA. Pressing on, the compiler will expect to find another statement, but will instead see the keyword ELSE, which cannot introduce a statement. At this point, the compiler will complain of an \"Error 6\" (Illegal Symbol). (In- terestingly enough, the summary of compiler error numbers in Apple's Pascal Language Reference Manual suggests that er- ror 6 is caused most often by the lack of a semicolon on a pre- ceding line in the program â€” here is a case where the error oc- curs because of the presence of an unnecessary semicolon!) For our new Indy500 program, should we use IF-THEN, or IF-THEN-ELSE? With every iteration of the Indy500 FOR- loop, either a quarter-point has been reached or it hasn't. We either want to display the marker message or we don't. When there are two, clear, mutually exclusive alternatives to choose from, use IF-THEN-ELSE. But here, our choice is between ex- ecuting the WriteLn or not executing it. We can dispense with the ELSE clause altogether, and simply use IF-THEN. For the conditional execution of the WriteLn statement to occur at the right time, we must find a Boolean expression that is true only when a quarter-point has been reached. The only changing object in our program â€” and thus the only thing we can use to determine when a quarter-point occurs â€” is the FOR- loop's control variable, Distance. Distance is an integer vari- able ; its value at any instant is some integer number. A little figuring shows that the values Distance will contain at the quarter points are 125, 250, 375, and 500, respectively. You may be tempted, therefore, to use the following condition in the IF- clause : ((Distance = 125) OR (Distance = 250) OR (Distance = 375) OR (Distance = 500)) This will certainly work but only for 500-mile races and, then, only if you want to flag just the quarter-points. What if you're interested in only the half-way-point and finish line, or what if you want to see a marker for every fifth or every eighth of the total distance? Now, before you write that IF-condition, is the time for you to plan for the future of your program. To use the same program for races other than the Indianapolis 500, you may need to change one â€” or both â€” of two things : the length of the race, and the relative interval between markers. The race length is easily changed by altering the constant EndOfRace. Perhaps we should also introduce a constant that tells how many equal subdistances should be flagged by a marker mes- sage. Let's call this constant Partitions, and set its value at four for the time being. At this point, we know the length of the race and we know how many partitions need flagging. It turns out that we can use these two numbers to form an IF-condition that is True when a partition-point has been reached during the race, but False at all other times. To do this, we make use of several facts. First, the length of a partition is equal to the Integer expression (EndOfRace DIV Partitions). For example, when EndOfRace is 500 and Partitions is four, the length of a single partition is (500 DIV 4), or 125. Next, one number divides another evenly if the division pro- duces no remainder. Remember that the remainder of (A DIV B) is given by the expression (A MOD B) . So, B divides A even- ly if ((A MOD B) = 0). Finally, every distance that corresponds to a partition-point must be evenly divisible by the length of a partition. You can see that, in our specific example, each of the four partition- points, 125, 250, 375, and 500, is evenly divisible by the length of a partition, 125. Using the above facts, we can create the Boolean expres- sion we need: ( (Distance MOD (EndOfRace DIV Partitions) ) = 0) Let's work backward to appreciate how this specific formula expresses what we mean. By successively substituting sym- bolic names for the subexpressions, you can see that the total expression is consistent with our three facts. Substituting LengthOfPartition for (EndOfRace DIV Partitions) gives ((Distance MOD LengthOfPartition) = 0) Since the MOD expression here tells us how many miles the racer has driven beyond the last partition- point, we can substi- tute the name MilesPastLastPoint for (Distance MOD Length- OfPartition) to get (MilesPastLastPartPoint = 0) This expression is equivalent to saying AtPartitionPoint which is just what our IF statement needs! New Tricks With an Old WriteLn. To complete the IF-state- ment, we must construct a WriteLn that will, when executed, produce the message we desire. Let me throw it out to you, and explain what's been done afterward: WriteLn ( '*** Race is ', (Distance DIV (EndOfRace DIV Partitions) ) , '/', Partitions, ' finished,' ) The WriteLn statement is spread across several lines, part- ly for typographical reasons but mostly to accentuate the fact that it specifies the display of five separate items. Up to now, we've only displayed one data item with every WriteLn state- ment. However, it's possible to specify a list of items, all of which are to be displayed next to each other on the same out- put line. Two of the itemsâ€” the second and fourthâ€” are integer expressions and correspond respectively to the numerator and denominator of the fraction that we wish to display in the mark- er message. The information displayed for each will be the ac- tual value of the numeric expression, as evaluated at the time the WriteLn is executed. The third item ('/') is a character lit- eral, and, of course, the apostrophes that delimit it will not be displayed. A Word About Strings. Until now, you haven't seen the type of datum represented by the first and fifth display items in the WriteLn list â€” at least, not in this column. They are examples of character strings. A character string literal (see figure 3) is something like a Char literal, in that it is delimited by the apos- trophe mark. The Char literal, however, consists of exactly one character, whereas the string literal may consist of any num- ber of characters (or even no characters!). When a string lit- eral is an item in a WriteLn list, the group of characters that lie between its apostrophe delimiters are displayed on the screen. Thus, we can use string literals to display words and phrases, where, before now, we could show only numeric values. We'll go into detail about character strings in a future column. A word to the wise: Keep in mind that the digits (0 to 9) are also characters that can occur within string literals. However, (CHARACTER) STRING LITERAL APOSTROPHE APOSTROPHE WHAT MAKES ROBOTWARâ„¢ UNIQUE? ROBOTUAR 1 yffil YOU. RobotWarâ„¢ is not a manual dexterity game. You write a special Battle Program for your own robots in a true battle of wits with the demo robots or robots designed by other combatants. You program the robot's â€¢ velocity â€¢ laser cannon aim â€¢ radar direction â€¢ battlefield positioning You are responsible for your robot's success or ultimate destruction. The basics of Battle Language are easily learned. Yet, like chess, RobotWarâ„¢ may take a lifetime to master. MUSE. 330 N, CHARLES STREET BALTIMORE. MD 21201 .(301)659-7212 20 cmnra OCTOBER 1981 there is a world of difference, for example, between the entire- ly incompatible values of the string literal 123 and the integer literal 123. In short, a string may look like a number, but don't be fooled. They're not the same. Note that the first string literal (item 1 in the WriteLn list) ends with a blank and the second (item 5) begins with one. I did this to provide appropriate spacing between the literals and the material displayed between them. Remember, all the items in the WriteLn list are displayed, one after another, on the same line. Pascal doesn't put any spacing between them; therefore, you must do it yourself if you don't want two or more items to run together. To get an idea of why you must often in- sert these trailing, or leading, blanks, compile and execute this program : PROGRAM RunTogether; BEGIN WriteLnd, 0, 1) ; WriteLn(l, ' ', 0, ' ', 1) ; WriteLnCRun', 'Together'); WriteLn ('Run ', 'Together'); END. IF it Fits, THEN Stick it There! At last, we are finished with the IF-statement that controls the display of our marker message, and we're ready to insert it into the Indy500c frame- work. But where? Since we have used the variable Distance within the IF-statement, and Distance assumes reasonable values only within the FOR-loop body, it is clear that the IF- statement must also be a part of the loop body. To add it, how- ever, we'll have to convert the loop body into a compound statement, by placing it between the keywords BEGIN and END. Also, since we stipulated that the message be displayed just after each quarter-point has been passed, the IF-state- ment should be inserted into the program text following the original Indy500c WriteLn. MS. SPELLER II UPDATED VERSION SPELLING CORRECT ION &PROOFRE A Dl NG FINDS AND SUBSTITUTES CORRECT SPELLINGS 60,000 word main dictionary- CREATE S personal dictionaries- BUILDS BADSPELLINCS DICTIONARY from user errors - Automatic and user- interactive modes. FOR M U LT I -DR IVE SYSTE MS SMALLER DICTIONARY AVAILABLE FOR SINGLE DRIVE SYSTEMS INCLUDES FREE TEXTFORMATTER flows paragraphs, r ight - just if ies, numbers pages, processes Pascal source listings, letters, documents, etc . SYSTEM REQUIREMENTS: LANGUAGE SYSTEM (65K) SYSTEM PRICE: $ 75.00 plus $ 2.50 sh i ppi ng SPECIFY NUMBER OF DISK DRIVES 1-year software warranty Intelligent Computer Systems Corporation Va residents add 4% sales tax 722 South 24th St reet â–  Arlington, Va. 2 2202 â–  (703)684 - 7389 When you have finished editing this new version of Indy500, it should look like this: PROGRAM Indy500d; CONST EndOfRace= 500; Partitions = 4; VAR Distance : Integer; BEGIN FOR Distance : = 1 TO EndOfRace DO BEGIN WriteLn (Distance) ; IF (Distance MOD (EndOfRace DIV Partitions) = 0) THEN WriteLn('*** Race is ', (Distance DIV (EndOfRace DIV Partitions)), V, Partitions, ' finished.' ); END; END. Now, compile the program and execute it. You might also try recompiling the program for different values of Partitions and , EndOfRace. Be sure, though, that EndOfRace is evenly divisi-; ble by Partitions. (What do you think will happen if it's not? If you have an answer, go ahead and test your theory.) What ELSE Can You Do? Perhaps, now, you'd like to try using an ELSE clause. I have just the thing for you. Personal- ly, I think that it's rather strange for the program to report that the race that has just ended is \"4/4 finished.\" The actual end of the race is a special case, and so I'd rather see the pro- gram say \"*** Race is over\" at that point. In other words, I think it would be nice for the program to issue one kind of marker message that reports fractional progress for all the partition-points except the last but issue a different message when that final point has been reached. This is an IF-THEN-ELSE type of situation, because, at any partition-point, the program must choose whether to dis- play the fractional marker or the end of race marker. Notice, however, that this choice applies at a partition-point. In fact, introducing this special case means that the program has two levels of decision to make. First, for every mile driven, it must determine if a position-point has been reached so as to decide whether to issue a marker at all. Once it's clear that a marker is needed, the program must then decide which of the two mu- tually exclusive messages it should display. Let me show you how you might write this split-level decision in Pascal: IF (Distance MOD (EndOfRace DIV Partitions) = 0) THEN IF (Distance <> EndOfRace) THEN WriteLnC*** Race is ', (Distance DIV (EndOfRace DIV Parititions)), '/', Partitions, ' finished.' ) ELSE WriteLnC*** Race is over.'); The above is an example of a \"nested IF-statement.\" That is, the statement controlled by an IF is itself an IF. The first IF-condition is the one that we have already spent so much time developing â€” it determines when a marker should be dis- played. The second, nested IF-condition is true for all parti- OCTOBER 1981 WU I A I If & tion-points but the final one because, at the final one, Distance is exactly equal to EndOfRace. Whenever the Distance is not equal to EndOfRace, the WriteLn under THEN will be exe- cuted. When Distance becomes EndOfRace, the WriteLn un- der ELSE is executed instead. Note that, in accordance with Pascal syntax, there is no semicolon following the WriteLn that precedes ELSE. Try substituting the nested IF-statement for the one we used originally. Coming Attractions. Next time, our overview of pro- grammed decision making will conclude with a look at Pas- cal's CASE-statement. Also, I'll introduce you to Write, Write- Ln's fraternal twin, and talk about the pair's hitherto unmen- tioned output formatting capabilities. Finally, you'll learn to inject special commentary into your programs to make them more readable. See you in November! Answers to Exercises Exercise : PROGRAM Indy500a ; (* declaration area is same *) BEGIN Distance := EndOfRace; REPEAT WriteLn (Distance) ; Distance := Distance - i; UNTIL (Distance < 1) ; END. PROGRAM Indy500b; (* declaration area doesn't change *) BEGIN Distance := EndOfRace; WHILE Distance > 0 DO BEGIN WriteLn (Distance) ; Distance := Distance - 1; END; END. PROGRAM Indy500c ; (* declaration area doesn't change *) BEGIN FOR Distance : = EndOfRace DOWNTO 1 WriteLn (Distance) ; END. DO Extra Credit Exercise PROGRAM Indy500a ; CONST EndOfRace = 500; LapSize= 2.5; VAR Distance : Integer ; BEGIN Distance := 0; REPEAT Distance : = Distance + 1 ; WriteLn (Distance*LapSize) ; UNTIL ( ( Distance *LapSize) >= EndOfRace) END. NEW FOR THE APPLE II Merge information from the fields of any Data Factory or Invoice Factory file to any other Data Factory or Invoice Factory file. We saved at least five hundred dollars the first week we used this program. We wanted to change the account numbers of our custom- ers. There were invoices in a Data Factory file going back a year and a half, and our customer file contained 750 dealers around the world. Quite a job to change all those records. Using COMPATIBLE O THE DATA FACTORY MP The Data Factory and the Merger we com- pleted the job in a morning! The Merger is easy to use. Just specify a field common to both data base files. Then list which fields to merge from one data base to the other. Press RETURN and the Merger does the rest. The Data Factory, The Invoice Factory and The Merger are partners to get your work done quickly. Â© 1981, Micro Lab, Inc Apple is a trademark of Apple Computers, Inc. micpc lab systems that work 2310 Skokie Valley Road Highland Park, IL 60035 . 312-433-7550 How to succeed in business without really trying. For peanuts. STC is proud to formally an- nounce four field-proven busi- ness packages for APPLE users. And an irresistible offer. All of these programs are straightforward, easy to use, virtually foolproof, and very attractively priced. The prices quoted include both the pro- grams and easy-to-follow instruction manual. Accounts Payable Uses ISAM structured routines and all posting is done in seconds as opposed to hours with other programs. Various reports are generated, including cash re- quirement journal, check register, open invoice report, Y-T-D pay- ment journal, and aging function to tell how many days left for a discount or an invoice. You also get a complete audit trail on all transactions, a current and Y-T-D analysis of all your ac- counts and vendors, and a check printed on available forms. Only $200. Payroll Maintains an entire payroll for up to 1 25 employees. It provides numerous payroll utilities for quick and easy payroll and check generation. It has built-in Federal and State tax tables and pro- vides some remarkable reporting capabilities. Only $240. Professional Time and Billing Maintains time and billing data for up to 300 clients. 1 20 rates (employees) can be on file at any time. Rates may appear as time/ expenses/fixed fees. Prints statements on available forms. Generates a variety of transac- tions and activity reports, and much more. Only $325. Apartment Management Maintain financial and managerial data for up to 6 separate apart- ment complexes. Each complex can contain a maximum of 1 20 units and 8 different types of units. Generates an operating statement which contains YTD rental income, security deposits, pet deposits, pool deposits, misc. deposits, damage amounts, allowances, expenses and a complete breakdown of apt. units by type. Again, some great reports Only $325. Early Bird Offer If you purchase any one of these programs from your STC dealer within the next 30 days, we'll let you have our new and quite fantastic Coloring Board pack- age for only $30. This program, normally costing $60, compares with some hardware capabilities costing $800 and more. It allows you to quickly create, store and display all types of graphics and text labeling. For example, a bar- chart like the one shown above for display at sales meetings. In short, it has unlimited useful applications for business. Act now. Contact your local STC dealer for details on this extremely unusual offer. And be sure to check out the rest of our great line of software packages as well. Dealer inquiries invited. (Apple is a trademark of Apple Computer Company] SOFTWARE TECHNOLOGY for COMPUTERS PO Box 428. Belmont, MA 021 78 (61 7) 923-4334 OCTOBER 1981 23 SOFICARD Symposium by Greg Tibbetts Last month, we discussed the features of Microsoft Basic, release five, and the differences between MBasic (or GBasic) and the two Apple Basics. We then discussed the new Basic-80 commands â€” not available in either Integer or Applesoft â€” and identified all the direct commands and a few of the simpler in- direct commands. These are the commands left to cover: CHAIN LSET/RSET COMMON OPEN DEFINT/SNG/DBL/STR OPTION BASE ELSE RANDOMIZE ERASE WHILE/WEND FIELD WIDTH LINE INPUT/# The file handling commands will be part of a future discussion of file handling in general. Let's now examine commands for the handling of variables. Basic-80 can deal with four types of variables: integers, which, like Apple Basics, are restricted to whole numbers in the range of -32768 to +32767; single precision reals, which are numbers that may or may not have a decimal point that are significant to six digits; double precision reals, which are num- bers with or without a decimal point that are significant to six- teen digits; and, finally, strings that represent not numbers at all but collections of zero or more ASCII characters (a string with zero characters is called a null string). The many differ- ent numeric variable types provide the user with maximum flexibility. True integer variable types and integer arithmetic like that found in Integer Basic execute much faster and take less than half the storage space of floating point variable types and arithmetic like that in Applesoft. (Note : Applesoft doesn't use true integer storage or manipulation even when variables have been explicitly declared as integers by the % sign having been appended to the variable name.) Floating point vari- ables are required, however, to represent numbers outside the range of integer representation or arithmetic operations, and the penalties of space and speed are accepted as part of the cost. Basic-80, in providing for true integers, four-byte single precision reals, and eight- byte double precision reals, gives you a reasonable choice between precision and space and speed considerations. Basic-80's commands for declaration of variable types con- sist of immediate, explicit declarations similar to those in the Apple Basics (% for integers, ! for single precision, # for dou- ble precision, and $ for strings) , plus the ability to define whole classes of variables (all those beginning with a named letter) , as a type. The variable class definition capability is provided by the DEFxxx statements; DEFINT for integers, DEFSNG for single precision, DEFDBL for double precision, and DEFSTR for string variables. Thus, a single statement at the beginning of the program of the form DEFINT A will make all variables in the program beginning with the letter A default to integers. Explicitly declared variables (for example, A#), are not affected by this; therefore, they'll be treated as whatever type is indicated by their appended signs. If no declaration is â–  ill made, Basic-80 defaults all variables to single-precision reals. One final point about DEFxxx statements : they set up sep- arate variable tables for each variable type when the state- ment is encountered, and, while issuing multiple DEFxxx statements for the same variables is allowed and will have pre- dictable results, doing this can generate real confusion if the effects are not anticipated. Here's a program segment that il- lustrates this: 10 Defint A :A= 1000: Print A 20 Defdbl A: A= 1.0000000001: Print A 30 Defint A: Print A generates the following output when run 1000 1.0000000001 1000 It's easy to see that the declaration and assignment of A made by line 10 were still intact even after line 20 was executed ; how- ever, because of line 20, Basic-80 could not find the earlier value until the second DEFINT A was executed in line 30. This feature can be useful but should be used with care. The final variable-related command is ERASE; use it whenever you want to eliminate storage space taken up in memory by an array, either to redefine a new array with the same variable name or simply to clear more memory for other purposes. The command's format is ERASE followed by a list of array variables. ERASE alone (with no variable names fol- lowing it) generates a syntax error. Once an ERASE state- ment is encountered, all values associated with the array are unrecoverable, and attempts to access elements up to AR- RAY (10) â€” the default dimension for new arrays â€” will return 0 as the value; attempts to access higher elements result in a subscript-out-of-range error. Let's now deal with commands that pass control between two programs: the command pair CHAIN and COMMON. In the Apple Basics, the limited ability to pass control to other programs on disk is handled exclusively by Apple DOS through the Basic RUN and PRINT commands combined with the DOS prefix character control-D in the form PRINT \"<control- D>RUN progname.\" In both Applesoft and Integer, this se- quence runs the named program and, in the process, erases the existing program and its variables. In Integer Basic, the DOS command CHAIN (used in the same print format) runs the named program and preserves the variables. In Apple- soft, saving the variables requires Bloading a machine lan- guage program named CHAIN and then calling it with the new program name appended. Basic-80, on the other hand, is fully capable of chaining one program to another while preserving the variables in the ex- isting program. Overlaying is also allowed, but here it's a somewhat more primitive procedure than some mainframe users may be familiar with. It's done with the MERGE op- tion; we'll discuss this in detail later. CHAIN, in its least complex form, is simply CHAIN Start talking business with your Apple COBOL is the most effective business language. Apple II is the most friendly business computer. CIS COBOL with FORMS-2 brings together the best features of COBOL and Apple to enable you to deliver the most effective, user-friendly applications. Business Programmers: Take the COBOL expertise you have acquired on big business mainframes, and use it on Apple II to create friendly applications that will talk directly to your users - where it suits them best, on their own desks. CIS COBOL's dynamic module loading gives you big application capability and the FORMS-2 source generator lets you build and modify conversational programs from visual screen formats, creating much of the code automatically. Application vendors: CIS COBOL with FORMS-2 steps up the pace for your development of the high quality professional application packages needed today. And creating them in COBOL makes them more maintainable. Over half the Apple It's now being sold are going to business or professional users so demand for quality applications is growing fast, creating big business opportunities for you. Stability proven by the US Government. CIS COBOL has been tested and approved for two consecutive years by the US General Services Administration as conforming to the ANSI 74 COBOL Standard. Apple II under CP/M is included in CIS COBOL's 1981 GSA Certificate of Validation (at Low-Intermediate Federal Standard plus Indexed l-O and Level 2 Inter-Program Communication). Get your hands on CIS COBOL at your Apple dealer. Talk business with him now! Micro Focus Inc., 1601 Civic Center Drive Santa Clara, CA 95050. Phone: (408) 248-3982. MICRO FOCUS CIS COBOL with FORMS-2 for use on the Apple II with CP/M is an Apple Distributed Product. CIS COBOL and FORMS-2 are trademarks of Micro Focus. CP/M is a trademark of Digital Research. Apple II Is a trademark of Apple Computer. \"drprogname\", where progname is the called program on disk drive d: ; default is the currently logged drive. If no other op- tions are specified, this functions exactly like PRINT \"<control-D>RUN progname\" in either Apple Basic. If you want the execution of the new program to begin at a specific line number, the number preceded by a comma must be add- ed (for example, CHAIN \"progname\",1000). Using a variable for the line number is allowed, and this allows conditional branching to your choice of any number of entry points in the called program. Variables may be passed straight to the called program ei- ther by using the ALL option to CHAIN or by using the COM- MON statement in the calling program. If you want to pass all variable values to the called program, simply append the word ALL preceded by a comma to the CHAIN command string (that is, CHAIN \"progname\", ALL). If, for space conservation or some other reason you want only to pass some variables, the calling program must inform Basic-80 that some variables are to be preserved in subsequent CHAINs and others may be overwritten. Do this with one or more COMMON statements, formatted as COMMON followed by a list of variables to be preserved. Variable names must be separated by commas. In- clude entire arrays by appending () to the array name â€” for ex- ample, ARAYVAR (). When you use conditional branching to selected programs, you can pass any number of common variable sets simply by designing the calling program to execute only one of several COMMON statements (called COMMON declarations). Take care, however, since Basic-80 won't allow a variable to be de- clared COMMON in more than one statement in each pro"
    }
}