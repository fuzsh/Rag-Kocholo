{
    "id": "dbpedia_8585_0",
    "rank": 27,
    "data": {
        "url": "https://www.freecodecamp.org/news/build-your-first-python-package/",
        "read_more_link": "",
        "language": "en",
        "title": "How to Build Your Very First Python Package",
        "top_image": "https://cdn-media-2.freecodecamp.org/w1280/5f9c980f740569d1a4ca17ef.jpg",
        "meta_img": "https://cdn-media-2.freecodecamp.org/w1280/5f9c980f740569d1a4ca17ef.jpg",
        "images": [
            "https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg",
            "https://www.freecodecamp.org/news/content/images/size/w60/2021/10/Jason-FCC-Photo-1.png 60w",
            "https://cdn-media-2.freecodecamp.org/w1280/5f9c980f740569d1a4ca17ef.jpg",
            "https://www.freecodecamp.org/news/content/images/size/w60/2021/10/Jason-FCC-Photo-1.png 60w",
            "https://cdn.freecodecamp.org/platform/universal/apple-store-badge.svg",
            "https://cdn.freecodecamp.org/platform/universal/google-play-badge.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jason Dsouza"
        ],
        "publish_date": "2020-10-27T23:43:25+00:00",
        "summary": "",
        "meta_description": "A few months ago, I decided to release Caer [http://github.com/jasmcaus/caer], a Computer Vision package available in Python. I found the process to be excruciatingly painful. You can probably guess why  — little (and confusing) documentation, lack of good tutorials, and so on. So I decided to write this article in the",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.freecodecamp.org/universal/favicons/favicon.ico",
        "meta_site_name": "freeCodeCamp.org",
        "canonical_link": "https://www.freecodecamp.org/news/build-your-first-python-package/",
        "text": "A few months ago, I decided to release Caer, a Computer Vision package available in Python. I found the process to be excruciatingly painful. You can probably guess why — little (and confusing) documentation, lack of good tutorials, and so on.\n\nSo I decided to write this article in the hope that it'll help people who are struggling to do this. We’re going to build a very simple module and make it available to anyone around the world.\n\nThe contents of this module follow a very basic structure. There are, in total, four Python files, each of which has a single method within it. We’re going to keep this real simple for now.\n\nbase-verysimplemodule --> Base └── verysimplemodule --> Actual Module ├── extras │ ├── multiply.py │ ├── divide.py ├── add.py ├── subtract.py\n\nYou will notice that I have a folder called verysimplemodule which, in turn, has two Python files add.py and subtract.py. There is also a folder called extras (which contains multiply.py and divide.py). This folder will form the basis of our Python module.\n\nBringing out the __init__s\n\nSomething that you’ll always find in every Python package is an __init__.py file. This file will tell Python to treat directories as modules (or sub-modules).\n\nVery simply, it will hold the names of all the methods in all the Python files that are in its immediate directory.\n\nA typical __init__.py file has the following format:\n\nfrom file import method # 'method' is a function that is present in a file called 'file.py'\n\nWhen building packages in Python, you are required to add an __init__.py file in every sub-directory in your package. These sub-directories are the sub-modules of your package.\n\nFor our case, we’ll add our __init__.py files to the ‘actual module’ directory verysimplemodule, like this:\n\nfrom add import add from subtract import subtract\n\nand we’re going to do the same for the extras folder, like this:\n\nfrom multiply import multiply from divide import divide\n\nOnce that’s done, we’re pretty much halfway through the process!\n\nHow to set up setup.py\n\nWithin the base-verysimplemodule folder (and in the same directory as our module verysimplemodule ), we need to add a setup.py file. This file is essential if you intend to build the actual module in question.\n\nNote: Feel free to name the setup.py file as you wish. This file is not name-specific as our __init__.py file is.\n\nPossible name choices are setup_my_very_awesome_python_package.py and python_package_setup.py , but it’s usually best practice to stick with setup.py.\n\nThe setup.py file will contain information about your package, specifically the name of the package, its version, platform-dependencies and a whole lot more.\n\nFor our purposes, we’re not going to require advanced meta information, so the following code should suit most packages you build:\n\nfrom setuptools import setup, find_packages VERSION = '0.0.1' DESCRIPTION = 'My first Python package' LONG_DESCRIPTION = 'My first Python package with a slightly longer description' # Setting up setup( # the name must match the folder name 'verysimplemodule' name=\"verysimplemodule\", version=VERSION, author=\"Jason Dsouza\", author_email=\"<youremail@email.com>\", description=DESCRIPTION, long_description=LONG_DESCRIPTION, packages=find_packages(), install_requires=[], # add any additional packages that # needs to be installed along with your package. Eg: 'caer' keywords=['python', 'first package'], classifiers= [ \"Development Status :: 3 - Alpha\", \"Intended Audience :: Education\", \"Programming Language :: Python :: 2\", \"Programming Language :: Python :: 3\", \"Operating System :: MacOS :: MacOS X\", \"Operating System :: Microsoft :: Windows\", ] )\n\nWith that done, all we have to do next is run the following command in the same directory as base-verysimplemodule:\n\npython setup.py sdist bdist_wheel\n\nThis will build all the necessary packages that Python will require. The sdist and bdist_wheel commands will create a source distribution and a wheel that you can later upload to PyPi.\n\nPyPi — here we come!\n\nPyPi is the official Python repository where all Python packages are stored. You can think of it as the Github for Python Packages.\n\nTo make your Python package available to people around the world, you’ll need to have an account with PyPi.\n\nWith that done, we’re all set to upload our package on PyPi. Remember the source distribution and wheel that were built when we ran python setup.py ? Well, those are what will actually be uploaded to PyPi.\n\nBut before you do that, you need to install twine if you don’t already have it installed. It’s as simple as pip install twine.\n\nHow to upload your package to PyPi\n\nAssuming you have twine installed, go ahead and run:\n\ntwine upload dist/*\n\nThis command will upload the contents of the dist folder that was automatically generated when we ran python setup.py. You will get a prompt asking you for your PyPi username and password, so go ahead and type those in.\n\nNow, if you’ve followed this tutorial to the T, you might get an error along the lines of repository already exists.\n\nThis is usually because there is a name clash between the name of your package and a package that already exists. In other words, change the name of your package — somebody else has already taken that name.\n\nAnd that’s it!\n\nTo proudly pip install your module, fire up a terminal and run:\n\npip install <package_name> # in our case, this is pip install verysimplemodule\n\nWatch how Python neatly installs your package from the binaries that were generated earlier.\n\nOpen up a Python interactive shell and try importing your package:\n\n>> import verysimplemodule as vsm >> vsm.add(2,5) 7 >> vsm.subtract(5,4) 1\n\nTo access the division and multiplication methods (remember that they were in a folder called extras ?), run:\n\n>> import verysimplemodule as vsm >> vsm.extras.divide(4,2) 2 >> vsm.extras.multiple(5,3) 15\n\nIt’s as simple as that.\n\nCongratulations! You’ve just built your first Python package. Albeit very simple, your package is now available to be downloaded by anyone around the world (so long as they have Python, of course).\n\nWhat's next?\n\nTest PyPi\n\nThe package that we used in this tutorial was an extremely simple module — basic mathematical operations of addition, subtraction, multiplication and division. It doesn’t make sense to upload them directly to PyPi especially since you’re trying this out for the first time.\n\nLucky for us, there is Test PyPi, a separate instance of PyPi where you can test out and experiment on your package (you will need to sign up for a separate account on the platform).\n\nThe process that you follow to upload to Test PyPi is pretty much the same with a few minor changes.\n\n# The following command will upload the package to Test PyPi # You will be asked to provide your Test PyPi credentials twine upload --repository testpypi dist/*\n\nTo download projects from Test PyPi:\n\npip install --index-url \"https://test.pypi.org/simple/<package_name>\"\n\nAdvanced Meta Information\n\nThe meta information we used in the setup.py file was very basic. You can add additional information such as multiple maintainers (if any), author email, license information and a whole host of other data.\n\nThis article will prove particularly helpful if you intend to do so.\n\nLook at other repositories\n\nLooking at how other repositories have built their packages can prove to be super useful to you."
    }
}