{
    "id": "dbpedia_8585_1",
    "rank": 27,
    "data": {
        "url": "https://www.jetbrains.com/help/pycharm/creating-and-optimizing-imports.html",
        "read_more_link": "",
        "language": "en",
        "title": "Auto import | PyCharm",
        "top_image": "https://resources.jetbrains.com/storage/products/pycharm/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/pycharm/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.actions.quickfixBulb.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.actions.more.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.expui.codeInsight.intentionBulb.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_optimize_imports.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.expui.general.settings.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_optimize_imports_before_commit.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_reformat-file-dialog.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/python_import.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/python_import1.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_import_style1.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_import_style2.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_import_inspection.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_convert_imports.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_import_fix_relative.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_relative_absolute_imports_intention.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_import_auto_completion.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/ws_es6_auto-import.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/ws_es6_auto-import.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/py_ignore_missing_import.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Basic procedures to create and optimize imports in PyCharm. Learn more how to import the missing import or XML namespace.",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "PyCharm Help",
        "canonical_link": "https://www.jetbrains.com/help/pycharm/creating-and-optimizing-imports.html",
        "text": "Auto import\n\nWhen you reference a class that has not been imported, PyCharm helps you locate this file and add it to the list of imports. You can import a single class or an entire package, depending on your settings.\n\nThe import statement is added to the imports section, but the caret does not move from the current position, and your current editing session does not suspend. This feature is known as the Import Assistant. Using Import Assistant is the preferred way to handle imports in PyCharm because import optimizations are not supported via command line.\n\nThe same possibility applies to XML files. When you type a tag with an unbound namespace, the import assistant suggests creating a namespace and offers a list of appropriate choices.\n\nAutomatically add import statements\n\nYou can configure the IDE to automatically add import statements if there are no options to choose from.\n\nPress Ctrl+Alt+S to open settings and then select Editor | General | Auto Import.\n\nIn the Python section, configure automatic imports:\n\nSelect Show import popup to automatically display an import popup when tying the name of a class that lacks an import statement.\n\nSelect one of the Preferred import style options to define the way an import statement to be generated.\n\nWhen tooltips are disabled, unresolved references are underlined and marked with the red bulb icon . To view the list of suggestions, click this icon (or press Alt+Enter) and select Import class.\n\nDisable all tooltips\n\nHover over the inspection widget in the top-right corner of the editor, click , and disable the Show Auto-Import Tooltip option.\n\nDisable auto import\n\nIf you want to completely disable auto-import, make sure that:\n\nAll import tooltips are disabled.\n\nThe automatic insertion of import statements is disabled.\n\nOptimize imports\n\nThe Optimize Imports feature helps you remove unused imports and organize import statements in the current file or in all files in a directory at once according to the rules specified in Settings | Editor | Code Style | <language> | Imports.\n\nOptimize all imports\n\nSelect a file or a directory in the Project tool window (View | Tool Windows | Project).\n\nDo any of the following:\n\nIn the main menu, go to Code | Optimize Imports (or press Ctrl+Alt+O).\n\nFrom the context menu, select Optimize Imports.\n\n(If you've selected a directory) Choose whether you want to optimize imports in all files in the directory, or only in locally modified files (if your project is under version control), and click Run.\n\nOptimize imports in a single file\n\nPlace the caret at the import statement and press Alt+Enter or use the icon.\n\nSelect Optimize imports.\n\nOptimize imports when committing changes to Git\n\nIf your project is under version control, you can instruct PyCharm to optimize imports in modified files before committing them to VCS.\n\nPress Ctrl+K or select Git | Commit from the main menu.\n\nClick and in the commit message area, select the Optimize imports checkbox.\n\nAutomatically optimize imports on save\n\nYou can configure the IDE to optimize imports in modified files automatically when your changes are saved.\n\nPress Ctrl+Alt+S to open settings and then select Tools | Actions on Save.\n\nEnable the Optimize imports option.\n\nAdditionally, from the All file types list, select the types of files in which you want to optimize imports.\n\nApply the changes and close the dialog.\n\nOptimize imports when reformatting a file\n\nYou can tell PyCharm to optimize imports in a file every time it is reformatted.\n\nOpen the file in the editor, press Ctrl+Alt+Shift+L, and make sure the Optimize imports checkbox is selected in the Reformat File dialog that opens.\n\nAfter that every time you press Ctrl+Alt+L in this project, PyCharm will optimize its imports automatically.\n\nCreating imports on the fly\n\nImport packages on-the-fly\n\nStart typing a name in the editor. If the name references a class that has not been imported, the following prompt appears:\n\nThe unresolved references will be underlined, and you will have to invoke intention action Add import explicitly.\n\nPress Alt+Enter. If there are multiple choices, select the desired import from the list.\n\nYou can define your preferred import style for Python code by using the following options available on the Auto Import page of the project settings (Settings | Editor | General | Auto Import):\n\nfrom <module> import <name>\n\nimport <module>.<name>\n\nToggling relative and absolute imports\n\nPyCharm helps you organize relative and absolute imports within a source root. With the specific intention, you can convert absolute imports into relative and relative imports into absolute.\n\nIf your code contains any relative import statement, PyCharm will add relative imports when fixing the missing imports.\n\nNote that relative imports work only within the current source root: you cannot relatively import a package from another source root.\n\nThe intentions prompting you to convert imports are enabled by default. To disable them, open project Settings (Ctrl+Alt+S), select Editor | Intentions, and deselect the Convert absolute import to relative and Convert relative import to absolute.\n\nWhen you complete a ES6 symbol or a CommonJS module, PyCharm either decides on the style of the import statement itself or displays a popup where you can choose the style you need. Learn more from Auto-import in JavaScript.\n\nLast modified: 28 June 2024"
    }
}