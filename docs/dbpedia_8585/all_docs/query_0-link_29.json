{
    "id": "dbpedia_8585_0",
    "rank": 29,
    "data": {
        "url": "https://timothybramlett.com/How_to_create_a_Python_Package_with___init__py.html",
        "read_more_link": "",
        "language": "en",
        "title": "How to create a Python Package with __init__.py",
        "top_image": "https://timothybramlett-com-public.s3.us-east-1.amazonaws.com/init-article-banner.jpg",
        "meta_img": "",
        "images": [
            "https://timothybramlett-com-public.s3.us-east-1.amazonaws.com/init-article-banner.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Python"
        ],
        "tags": null,
        "authors": [
            "Timothy Bramlett"
        ],
        "publish_date": "2016-09-23T00:00:00",
        "summary": "",
        "meta_description": "How to create a Python Package with init.py",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Timothy Bramlett",
        "canonical_link": "https://timothybramlett.com/How_to_create_a_Python_Package_with___init__py.html",
        "text": "What is a Python package?\n\nA Python package is simply an organized collection of python modules. A python module is simply a single python file.\n\nWhy would I want to create a package using __init__.py?\n\nCreating a package with __init__.py is all about making it easier to develop larger Python projects.\n\nIt provides a mechanism for you to group separate python scripts into a single importable module.\n\nLet's run through some examples\n\nThe best way to understand why you would use __init__.pyand to learn how to use it to create a package is to run through some quick examples! The best way to learn is by doing!\n\nThe code in this tutorial should work for Python 2 or 3. Just remember, if you are using 2 then you will need to use the from __future__ import print_function functionality.\n\nSay we have three modules we have created:\n\nRemember a module is just another name for any single python file\n\nFor our example, the content of these files is the following:\n\nObviously, these functions are useless, but it helps to serve as a model for the basic concept that we have some python modules that we have already written that are somehow related.\n\nSo, without creating a package and using __init__.py, how do we use the functions in these files?\n\nWell, we can only import these files if they are in the current directory that whatever script we are running is running from.\n\nWell, we can use these files in a new Python script but with one key caveat:\n\nThe files must be in the same directory as the script we are trying to use them in.\n\nTo illustrate that, let's create a file called example1.py that leverages our modules:\n\nAdding a blank __init__.py\n\nWhat if we wanted to seperate these scripts into a folder in order to keep them more organized?\n\nWell, that is where the __init__.py file comes into play.\n\nFirst, lets move our scripts into a new subfolder and call it: string_func. Then create an empty file in that folder called __init__.py\n\nHere is our new file/folder structure:\n\nSo, now let's test out exactly what __init__.py allows us to do:\n\nLet's make a new example2.py file.\n\nSo, now we can access our string functions in this manner. This is great, because they are all in a seperate folder, but the syntax is definitely not very succinct. Let's see if we can clean things up a bit by editing our __init__.py file.\n\nAdding imports to init.py\n\nOpen your __init__.py file and make the following changes:\n\nNote that the . before the module name is neccessary as of Python 3 since it is more strict regarding relative imports: https://stackoverflow.com/questions/12172791/changes-in-import-statement-python3?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\n\nAnd so with that in our __init__.py we can now shorten our code to:\n\nNow the syntax is a lot shorter and you can see that string_func is behaving like its own module.\n\nSo, that is basically what __init__.py does! It allows you to treat a directory as if it was a python module. Then you can further define imports inside your __init__.py file to make imports more succinct, or you can just leave the file blank.\n\nDebugging import Issues\n\nThere are basically 3 tips I have for debugging import issues:\n\nUse the interactive interpreter (The REPL) to import the modules and see if you are getting what you expect.\n\nStart your script with python -v -m my_scriptname.py and then check the output to see exactly where your modules are getting imported from.\n\nUse Pycharm. Pycharm's fantastic introspection abilities mean that you will immeadiately know whether or not your module is being properly imported as it will indicate an error if not. It will sometimes also suggest the proper correction. The community edition is free and if you're a student you can get a free subscription to ALL of their products!\n\nFor more information about python modules and packages you can see check the python documentation on it.\n\nYou can also check out this great Talk Python To Me podcast with David Beazley where he discusses the subject, as well as David's talk on the same subject."
    }
}