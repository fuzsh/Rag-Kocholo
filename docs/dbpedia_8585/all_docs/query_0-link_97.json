{
    "id": "dbpedia_8585_0",
    "rank": 97,
    "data": {
        "url": "https://www.elliotjordan.com/posts/docklib-outset/",
        "read_more_link": "",
        "language": "en",
        "title": "Deploying and running docklib scripts using Outset",
        "top_image": "https://www.elliotjordan.com/favicon-32x32.png",
        "meta_img": "https://www.elliotjordan.com/favicon-32x32.png",
        "images": [
            "https://www.elliotjordan.com/img/logo.svg",
            "https://www.elliotjordan.com/posts/images/docklib-outset-jamf-policy.png",
            "https://www.elliotjordan.com/img/back.svg",
            "https://www.elliotjordan.com/img/next.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Guide for running docklib scripts on your Mac fleet using Outset, along with recommendations for packaging and deployment.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Elliot Jordan",
        "canonical_link": "https://www.elliotjordan.com/posts/docklib-outset/",
        "text": "My post on writing docklib scripts walked you through how to use Python and docklib to create a script for managing the macOS Dock, but stopped short of explaining the details of deploying and running the script on your Mac fleet. This post will cover one method for running your script: Outset.\n\nOutset is a Python-based tool that kicks off tasks at login or startup. In relation to macOS Dock management, Outset’s key benefits include easy execution in user context and flexible control of timing and recurrence.\n\nIf you’re unfamiliar with creating your own LaunchAgents or if you’re managing multiple dissimilar login or startup scripts, Outset may be worthy of your consideration.\n\nContents\n\nOur goal is to run your Dock script at user login on your managed Macs. The steps we’ll follow towards that goal include:\n\nPackage your script into an installer\n\nGather dependencies: Outset and Python 3\n\nDeploy installers via your software management tool\n\nPlan for maintenance and future adjustments\n\nI’ll provide examples for Jamf and Munki in step 3, but you should be able to leverage any similar tool to achieve the same result.\n\nLet’s get started!\n\nPackage your script\n\nFirst, you’ll need to build an installer that places your Dock management script at the desired location on your managed Macs. For this, you won’t be surprised that I recommend MunkiPkg. Dock scripts are ideal candidates for MunkiPkg due to their small size, text contents, and the many benefits of version control.\n\nA note about the name\n\nPerennial reminder: you can use MunkiPkg even if you're not using Munki to deploy the package.\n\nPackaging granularity\n\nYour script should be packaged separate from Outset itself, so that you can update either the script or Outset independently of each other.\n\nIf you intend to run additional login or startup scripts with Outset, it’s up to you whether you create separate packages for those scripts or combine them with your Dock script. My advice is to package your scripts separately if the scripts might target different groups of Macs in the future. If all the scripts equally apply to all your Macs, a unified package will work fine.\n\nCreate a MunkiPkg project\n\nFirst, navigate to where you store your package sources and create a new MunkiPkg project.\n\ncd ~/Developer/pkgs/ munkipkg --create outset_dock cd outset_dock\n\nCreate a README.md file with a basic explanation of your package.\n\nHere’s an example from a previous post:\n\n# Outset - Dock Script The installer produced by this source project installs an [Outset](https://github.com/chilcote/outset) script that sets the standard Dock items at user login. This folder is a [MunkiPkg](https://github.com/munki/munki-pkg) project. After making changes, be sure to increment the version in build-info.plist, then build the project with the `munkipkg` tool. The resulting pkg file will appear in the build folder.\n\nDelete the scripts folder.\n\nrm -r scripts\n\nThe Dock script will go in the payload rather than executing as a preinstall or postinstall script. This will allow Outset to execute our script with the proper timing and context.\n\nCreate the needed payload structure for Outset to run your script.\n\nIf your Dock script is idempotent and will run at every login, create a login-every folder. If your script should only run at the first/next login, create a login-once folder as shown below.\n\nmkdir -p payload/usr/local/outset/login-once/\n\nMove your script into the login-every or login-once folder you just created.\n\nYour project’s file system will now look like this:\n\noutset_dock ├── .gitignore ├── README.md ├── build ├── build-info.plist └── payload └── usr └── local └── outset └── login-once └── dock.py\n\nMake your script executable. This is required for Outset to run it.\n\nchmod +x payload/usr/local/outset/login-once/dock.py\n\nCustomize the build-info.plist file. I typically adjust the bundle identifier to match my company’s reverse-domain convention, like com.pretendco.cpe.outset_dock. You can optionally configure signing if you have a signing certificate, but this step is not essential when deploying with a software management tool like Munki or Jamf Pro.\n\nBuild the package.\n\nmunkipkg .\n\nInspect the package with Suspicious Package or another installer inspection utility.\n\nopen -a \"Suspicious Package\" build/outset_dock-1.0.pkg\n\nMake sure the payload contains your Dock script (and nothing it shouldn’t).\n\nGather dependencies\n\nNow that you’ve built an installer for your script, gather the installers for your script’s dependencies.\n\nOutset: You can get the latest release from GitHub.\n\nPython 3 with the docklib module: Outset requires Python 3. Deploying the MacAdmins Python “recommended” package is the easiest way to satisfy this requirement.\n\nIf you plan on using a different Python installer, you’ll need to ensure the docklib module is installed, and you’ll need to modify your script’s shebang accordingly.\n\nDeploy installers\n\nNow it’s time to import all the installers into your software management tool. I’ll provide suggestions for deploying your installers via Munki and Jamf, but you should be able to use any similar software management tool to achieve the desired result.\n\nMunki steps are below; click here to skip to the Jamf steps.\n\nBlueprint for Munki deployment\n\nThe following steps provide a template for deploying your script and its dependencies with Munki. This is only meant to be an example; please modify as needed for your environment.\n\nImport each of your installers into your Munki repo using munkiimport. Use the requires key to define the dependency relationships.\n\nmunkiimport ~/Downloads/python_recommended-3.9.5.09222021234106.pkg\n\nmunkiimport ~/Downloads/outset-3.0.3.pkg \\ --requires=python_recommended\n\nmunkiimport build/outset_dock-1.0.pkg \\ --requires=python_recommended \\ --requires=outset\n\nAutoPkg recipes available\n\nIf you're an AutoPkg user, recipes are available to import new versions of these into Munki automatically:\n\noutset.munki.recipe\n\nMacAdminsPython.munki.recipe.yaml\n\nRebuild your Munki catalogs.\n\nmakecatalogs\n\nAdd outset_dock as a managed install for a Munki manifest associated with one or more test Macs.\n\nmanifestutil add-pkg outset_dock \\ --manifest=dock_testers \\ --section=managed_installs\n\nUse Managed Software Center or managedsoftwareupdate to check and install for Munki items on your test Mac(s).\n\nLog out of your test Mac, then log back in. Your Dock script should run. (Keep in mind that the script may not actually modify the Dock when it runs, depending on how you’ve designed your script. See the Outset logs for troubleshooting.)\n\nAlso verify the script runs during your setup workflow, if you have a Mac or virtual machine you can use for factory-fresh provisioning testing.\n\nOnce you are satisfied your script is working as designed on your test Mac(s), promote your outset_dock package to stable.\n\n/usr/libexec/PlistBuddy -c \"Add :catalogs: string 'stable'\" pkgsinfo/outset_dock-1.0.plist\n\nAdd outset_dock to the desired production manifest.\n\nmanifestutil add-pkg outset_dock \\ --manifest=provisioning \\ --section=managed_installs\n\nVerify intended behavior by provisioning a production Mac and observing the Dock configuration upon first login.\n\nThe Jamf steps are below; click here to skip ahead.\n\nBlueprint for Jamf deployment\n\nThe following steps provide a template for deploying your script and its dependencies with Jamf Pro. This is only meant to be an example; please modify as needed for your environment.\n\nImport each of your installers into your distribution points using Jamf Admin.\n\nWithin Jamf Admin, you can set the Priority of the packages to control the order in which the packages install. For example:\n\nPackage Priority Python 6 Outset 8 outset_dock 10 (default)\n\nCreate a policy that installs all three packages, and set the scope to a group containing one or more test Macs. Set the policy triggers to Check-In and Enrollment, and the frequency to Once per computer.\n\nKnow your triggers\n\nRemember that the timing of the policy only determines when your script, Outset, and Python are installed — not when your script actually runs. Therefore you should not use Jamf's Login trigger.\n\nProvisioning helpers\n\nIf you use DEPNotify or SplashBuddy you can set a custom trigger for your policy to ensure it runs during the initial provisioning process.\n\nUse sudo jamf policy to install the items on your test Mac(s).\n\nLog out of your test Mac, then log back in. Your Dock script should run. (Keep in mind that the script may not actually modify the Dock when it runs, depending on how you’ve designed your script. See the Outset logs for troubleshooting.)\n\nAlso verify the script runs during your setup workflow, if you have a Mac or virtual machine you can use for factory-fresh provisioning testing.\n\nOnce you are satisfied your script is working as designed on your test Mac(s), scope your policy to your desired group of Macs, or to All Computers.\n\nVerify intended behavior by provisioning a production Mac and observing the Dock configuration upon first login.\n\nPlan for maintenance\n\nYou’ll inevitably need to make adjustments to your script in the future. It’s important to lay the foundation now for smooth maintenance and collaboration later.\n\nPutting the MunkiPkg project for your Dock script in a Git repository and following a peer review process will improve visibility across your team and reduce likelihood of errors. See my earlier post for tips on collaborating on MunkiPkg projects in Git.\n\nWhen you make changes to your script, the process will look like this:"
    }
}