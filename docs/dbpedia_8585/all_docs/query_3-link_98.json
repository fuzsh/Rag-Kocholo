{
    "id": "dbpedia_8585_3",
    "rank": 98,
    "data": {
        "url": "https://proandroiddev.com/android-auto-tutorial-step-by-step-guide-50bb6b73e2b8",
        "read_more_link": "",
        "language": "en",
        "title": "Android Auto Tutorial Step by Step Guide",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*2jFaHVyy8OTyRk1cRfJ-Rg.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*2jFaHVyy8OTyRk1cRfJ-Rg.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*Sw4BRyBLfXvNHNWDdnNebQ.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*Sw4BRyBLfXvNHNWDdnNebQ.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*XVtdl45m8YaYrPI4buJ5yQ.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Akshaya Narayan Dikshit",
            "medium.com"
        ],
        "publish_date": "2023-07-18T17:44:47.282000+00:00",
        "summary": "",
        "meta_description": "Android Auto provides a driver-optimized app experience for users who have an Android phone and the Android Auto app. It‚Äôs an extension of a connected Android smartphone to a compatible car that can‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://proandroiddev.com/android-auto-tutorial-step-by-step-guide-50bb6b73e2b8",
        "text": "Akshaya Narayan Dikshit\n\n¬∑\n\nFollow\n\nPublished in\n\nProAndroidDev\n\n¬∑\n\n7 min read\n\n¬∑\n\nJul 18, 2023\n\n--\n\nWhat is Android Auto?\n\nAndroid Auto provides a driver-optimized app experience for users who have an Android phone and the Android Auto app. It‚Äôs an extension of a connected Android smartphone to a compatible car that can display some apps, entertainment, and mirror messages on a car‚Äôs dashboard. We can connect our device using USB or Bluetooth.\n\nAndroid Auto is only compatible with phones running Android 6.0 (API level 23) or higher\n\nWhen you‚Äôll connect your phone to the car, all your Android Auto-compatible apps will be accessible.\n\nWhat is Android Automotive OS?\n\nAndroid Automotive OS is an Android-based infotainment system that is built into vehicles. The car‚Äôs system is a standalone Android device that is optimized for driving. With Android Automotive OS, users install your app directly onto the car instead of their phones.\n\nAndroid Auto and/or Android Automotive OS support the following types of apps:\n\nMedia apps ‚Äî audio: Media apps let users browse and play music, radio, audiobooks, and other audio content in the car.\n\nMessaging apps: Messaging apps let users receive incoming notifications, read messages aloud using text-to-speech, and send replies via voice input in the car.\n\nNavigation apps: Navigation apps, including providers of driver and delivery services, help users get where they want to go by providing turn-by-turn directions\n\nPoint of Interest (POI) apps: POI apps let the user discover and navigate to points of interest and take relevant actions, such as parking, charging, and fuel apps\n\nInternet of Things (IOT) apps: IOT apps let users take relevant actions on connected devices from within the car.\n\nVideo apps (for use while parked): Video apps let users view streaming videos while the car is parked.\n\nGames (for use while parked): Game apps let users play games while the car is parked.\n\nYour App must be of one of those categories above only. you will declare it in the Manifest and this will be reviewed by Google\n\nConfiguration to start exploring Android Auto device and setting up emulator\n\nThe Desktop Head Unit (DHU) enables your development machine to emulate an Android Auto head unit, so that you can run and test Android Auto apps.\n\nThe DHU runs on Windows, Mac os, and Linux systems.\n\nFollow the below steps to enable Android Auto Emulator\n\nEnable Developer mode on a mobile device running Android 6.0 (API level 23) or higher.\n\nCompile and install your app on the device.\n\nInstall Android Auto on the device. If Android Auto is already installed, make sure that you are using the latest version.\n\nOpen SDK Manager and navigate to SDK Tools tab, then download Android Auto Desktop Head Unit Emulator package.\n\n5. DHU is installed in the SDK_LOCATION/extras/google/auto/ directory\n\n6. Linux or Mac os systems, run the following command in that directory to ensure the DHU binary is executable:\n\nchmod +x ./desktop-head-unit\n\n./desktop-head-unit --usb\n\n7. Emulator will start working and check your Android device if any popup showing related to update, click on update option and restart Emulator.\n\nAndroid Auto Design Templates\n\nIn Android Auto, We can‚Äôt create our custom UI and we can use some set of templates which is only allowed for Android Auto apps.\n\nAccording to me, the predefined UI Templates provided by Google will give better usability to the driver in order to coordinate with the Android auto device while driving.\n\nList of available Templates:\n\nTab Container Template\n\n‚Äî Tab bar with app icon and up to 4 tabs (no back button)\n\n‚Äî Embedded template, which can be any of the following types: List , Grid, Search, Pane, or Message\n\nList or Grid Template\n\nMessage or Long Message Template\n\nSearch Template\n\nPlace List (map) Template\n\nNavigation Template\n\nRead more about UI Templates\n\nSteps to build media apps for cars\n\nDeclare Android Auto Support in Manifest file\n\nDeclare your media browser service\n\nHow Android Auto interact with your media browser service:\n\nUser launches your app on Android Auto and Android Auto contacts your app‚Äôs media browser service using the onCreate() method. In your implementation of the onCreate() method, you must create and register a MediaSessionCompat object and its callback object.\n\nAndroid Auto calls your service‚Äôs onGetRoot() method to get the root media item in your content hierarchy. Everything starts at the root and you must return a non-null BrowserRoot to allow connections to your MediaBrowserServiceCompat.\n\nAndroid Auto calls your service‚Äôs onLoadChildren() method to get the children of the root media item. Android Auto display these media items as the top level of content items. We have two available flags FLAG_PLAYABLE and FLAG_BROWSABLE which indicates media item can be directly played or It has children of its own\n\nIf the user selects a browsable media item, your service‚Äôs onLoadChildren() method is called again to retrieve the children of the selected menu item.\n\nIf the user selects a playable media item, Android Auto calls the appropriate media session callback method to perform that action.\n\nExample: It will start playing music item.\n\nMandatory steps to support Android Auto in Media Apps :\n\nSet standard playback actions\n\nAndroid Auto display playback controls based on the actions that are enabled in the PlaybackStateCompat object.\n\nBy default, your app must support the following actions:\n\nACTION_PLAY\n\nACTION_PAUSE\n\nACTION_STOP\n\nACTION_PLAY_FROM_MEDIA\n\nACTION_PLAY_FROM_SEARCH\n\nYour app can additionally support the following actions if they are relevant to the app‚Äôs content:\n\nACTION_SKIP_TO_PREVIOUS\n\nACTION_SKIP_TO_NEXT\n\nMedia Controller Test is useful if you want to test your media app controls.\n\nMedia Controller Test (MCT) app allows you to test the intricacies of media playback on Android and helps verify your media session implementation.\n\nThe MCT includes tests for the following media actions:\n\nPlay\n\nPlay From Search\n\nPlay From Media ID\n\nPlay From URI\n\nPause\n\nStop\n\nSkip To Next\n\nSkip To Previous\n\nSkip To Queue Item\n\nSeek To\n\nSupport voice actions\n\nYour media app must support voice actions to help provide drivers with a safe and convenient experience that minimizes distractions. When Android Auto detects and interprets a voice action, that voice action is delivered to the app through onPlayFromSearch(). On receiving this callback, the app finds content matching the query string and starts playback.\n\nCustom playback actions\n\nYou can add custom playback actions to display additional actions that your media app supports. Each custom action that you create requires an icon resource. Apps in cars can run on many different screen sizes and densities, so icons that you provide must be vector drawables.\n\nExample: Shuffle üîÄ, Repeat üîÅ, Repeat Single song üîÇ, etc\n\nConclusion:\n\nI personally feel if your app is media app, messaging app, navigation parking app, etc then we should support Android Auto platform too, which will help driver while using the app. Voice command support is useful when user want to avoid looking at screen while driving.\n\nWell, that‚Äôs all for now. In future articles, I will share sample app with Android Auto and Android Automotive implementation.\n\nUAMP Media App is a very useful repository which you can explore for Android Auto and Android Automotive OS both\n\nThank you for taking the time to read this article. If you found this post to be useful and interesting, please clap üëè and recommend it.\n\nYou can reach me on social media and other platforms, stay tuned: https://linktr.ee/droiddikshit ü§ù\n\nReferences:\n\nhttps://github.com/android/uamp (Android Media app UAMP)\n\ncar-samples/car_app_library at main ¬∑ android/car-samples\n\nThis directory contains sample apps that use Android for Cars App Library. Please find the library documentation at‚Ä¶\n\ngithub.com\n\nAndroid for Cars overview | Android Developers\n\nGet one of our Figma kits for Android, Material Design, or Wear OS, and start designing your app's UI today.\n\ndeveloper.android.com\n\nBuild media apps for cars | Android Developers\n\nGet one of our Figma kits for Android, Material Design, or Wear OS, and start designing your app's UI today.\n\ndeveloper.android.com\n\nAndroid Auto | Android\n\nGoogle Assistant can read your messages out loud. And you can write back with just your voice, or select a Smart Reply‚Ä¶\n\nwww.android.com\n\nUsing the media controller test app | Android Developers\n\nDesign a beautiful user interface using Android best practices.\n\ndeveloper.android.com"
    }
}