{
    "id": "dbpedia_8585_2",
    "rank": 89,
    "data": {
        "url": "https://scriptingosx.com/category/deployment/page/4/",
        "read_more_link": "",
        "language": "en",
        "title": "Deployment – Page 4 – Scripting OS X",
        "top_image": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-2.png?fit=512%2C512&ssl=1",
        "meta_img": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-2.png?fit=512%2C512&ssl=1",
        "images": [
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-1.png?fit=248%2C248&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-Perseus.jpg?resize=800%2C510&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-InstallDevToolsDialog.png?w=660&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2018/05/macOSInstallationBanner.jpeg?resize=825%2C510&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/10/Gatekeeper_logo.png?resize=201%2C207&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/06/volumereplication2.png?resize=632%2C510&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/06/volumereplication.png?resize=660%2C351&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/03/MacADUK2019.png?resize=825%2C510&ssl=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-05-13T14:31:00+02:00",
        "summary": "",
        "meta_description": "Posts about Deployment written by ab",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-2.png?fit=32%2C32&ssl=1",
        "meta_site_name": "Scripting OS X",
        "canonical_link": "https://scriptingosx.com/category/deployment/",
        "text": "As a System Engineer at an Enterprise Reseller, I have to manage and create many Jamf Pro instances.\n\nSome of them are tightly managed and require version control on the OS and the apps. But, many of them are managed less stringently and often the requirement for applications is “install the latest version.”\n\nThis is not a statement which management strategy is ‘better.’ There are pros and cons for each. There are situations where either is really not appropriate. You will likely have to use a mixed approach for different pieces of software. When you are doing the first, more controlled deployment strategy, you really want to use AutoPkg and not this script. You can stop reading here.\n\nApple’s vision of deployment with ‘Automated App Installation’ through MDM (formerly known as VPP) is similar to the ‘less controlled’ strategy. When you install Mac App Store through MDM commands, then you will get the latest version available.\n\nNot all applications are available on the Mac App Store. And even when they are available, installing applications with VPP is still unreliable and hard to debug, or retry when it fails.\n\nIf you are managing with the “just install the latest version” philosophy, then you probably have one or more scripts that will download and install the latest version of some software from the vendor’s website. This avoids the overhead work of having to download, repackage and manage every new update in the management system. (This can be automated with AutoPkg, but if you can avoid it entirely…)\n\nWhen I started thinking about this, we had at least four different scripts. Most of them were internal, but William Smith’s installer script for Microsoft applications was a huge inspiration. it made me thing that you could generalize much of this.\n\nSecurity Considerations\n\nThe main danger when downloading application archives and installers directly from the vendor is that a malicious actor might intercept the traffic or even hijack the servers and replace the download with a manipulated software that contains and or installs malware. Since management processes run with root privileges, we have to extra careful which files and processes are installed.\n\nFor user driven installation, Apple introduced GateKeeper, signed applications and Notarization as a way to verify downloaded software before execution. When you download software with a script, then you are bypassing GateKeeper. This is usually considered a benefit, because in a managed deployment we don’t want to scare and annoy a user with the warning dialogs.\n\nBut we can use the GateKeeper verification process in our script to verify that the archive, application, or installer is signed and notarized. With the spctl command, we can run the verification from the script without the user interaction.\n\nWe can even go one step further than GateKeeper. GateKeeper is happy when a software is signed and notarized with any Apple Developer ID. Since this script is working with a curated list of software, we can verify that the application is actually signed with the expected vendor’s Developer ID.\n\nThis will catch situations where someone creates or steals a Developer ID to sign and notarize a manipulated application. Apple can and will eventually block that Developer ID, but there will be a window where the manipulated application may be downloaded and installed. This is not theoretical, but has happened already. (more than once)\n\nInstallomator\n\nWith these ideas in mind, I started working on a script to unify all these installer scripts. (‘The one to rule them all.’) I may have gone a little overboard, but it turned into Installomator.\n\nYou can run Installomator from the command line or from your management system.\n\n> ./Installomator.sh desktoppr\n\nThe script requires a single argument. The argument is a label that chooses which application to download and install. (As of now, Installomator can handle 56 applications, you can see a list of applications in the repository.\n\nPlease read the readme in the GitHub repository for more details.\n\nJamf or not\n\nI have tried to keep Installomator generic enough that it can be used with platforms other than Jamf Pro.\n\nHowever, we will use it with Jamf Pro, and thus I took the opportunity to add some workflows that Jamf is missing.\n\nDrag’n Drop installations\n\n“Drag this app to the Applications folder” is a common instruction found on downloaded dmg or zip archives for the Mac. The fact that Jamf Pro has always required repackaging and cannot directly handle application dmgs or zips is mystifying. Also, highly ironic, since Jamf delivers their own management applications in a disk image.\n\nNevertheless, Installomator can deal with apps that are downloaded in zip, tbz, and dmg archives.\n\nBlocking Processes\n\nJamf will also happily attempt to install over a running application. So, Installomator will check for blocking processes and either stop the installation at that time or prompt the user and give them a chance to quit the application. (Yes, this is inspired by the behavior of Munki.)\n\nVendor update processes\n\nSince Installomator will download and install the latest version of the application from the vendor website, it can be used for updates as well as first installations.\n\nIf an application has a built-in update process that can be triggered by the script, This can be used instead for updates. So, for Microsoft applications, when the script detects that the app is already installed, it will run msupdate instead of downloading a full installer. This way the update process will use Microsoft’s optimized thin updates. (Credit to Isaac Ordonez, Mann consulting for the idea and first implementation.)\n\nSo far, this is only implemented for Microsoft applications and Google Chrome. (and quite experimental)\n\nExtensible\n\nSo far, the script can install 56 different applications or application suites. More application descriptions can be added fairly easily, by adding the proper variables. You can find more detailed explanations in the ReadMe, and of course, the existing applications serve as examples.\n\nNot all applications are suitable to be installed with Installomator. To be able to install an application, the download URL must be accessible without requiring a login, and there must be some, fairly simple process to determine the URL for the latest version.\n\nInstallomator will only install the application itself, it will not configure any settings. You will have to use profiles, or additional scripts and installers for that.\n\nWhen you add an application for your own workflow, please contribute as an issue or pull request! Thank you!\n\nInstallomator and AutoPkg\n\nObviously, much of Installomator’s workflow has been heavily inspired by AutoPkg. I have been using AutoPkg for a long time and provide a repository of recipes. And I plan to continue to use AutoPkg.\n\nAs mentioned before, Installomator is not suitable for every type of deployment. If you require control over the versions of the software deployed, then you need to download, re-package and manage the packages in your management system. This is obviously what AutoPkg was designed for.\n\nAlso, not every software can be installed with Installomator, mostly because the installer is not available as a direct download. In these cases, AutoPkg will be useful to automate the management and deployment, even when you management style is less controlling.\n\nGoing Forward\n\nWe have been using Installomator for the past few weeks in our own deployment and with one customer. We are now at a point, where we believe it is stable enough to share it and get feedback from other MacAdmins. (I have already shared it with a few, and many thanks to those that have given valuable feedback.)\n\nWe have been using this script with two smaller deployments and want to roll it out to more of our customers. But we probably haven’t hit all the weird edge cases yet. So, proceed with caution.\n\nConsider this a beta release.\n\n(Sidenote: I have tested the script with 10.14.6 and 10.15.x. Because it uses the notarization verification which is available in 10.14.4 and higher it will probably not run well on older macOS versions. Might be possible to adapt it though.)\n\nIf you are as excited about the script as we are, please start testing in your environment and provide feedback. But please, as with anything MacAdmin, don’t just go and push the script to hundreds or thousands of devices, but test, test, test first.\n\nThen please provide any enhancements back on the GitHub repository. I have also created an #installomator channel on the MacAdmin Slack for discussion and questions.\n\nAs I noted in my last Weekly News Summary, several open source projects for MacAdmins have completed their transition to Python 3. AutoPkg, JSSImport and outset announced Python 3 compatible versions last week and Munki already had the first Python 3 version last December.\n\nWhy?\n\nApple has included a version of Python 2 with Mac OS X since 10.2 (Jaguar). Python 3.0 was released in 2008 and it was not fully backwards compatible with Python 2. For this reason, Python 2 was maintained and updated alongside Python 3 for a long time. Python 2 was finally sunset on January 1, 2020. Nevertheless, presumably because of the compatibility issues, Apple has always pre-installed Python 2 with macOS and still does so in macOS 10.15 Catalina. With the announcement of Catalina, Apple also announced that in a “future version of macOS” there will be no pre-installed Python of any version.\n\nScripting language runtimes such as Python, Ruby, and Perl are included in macOS for compatibility with legacy software. Future versions of macOS won’t include scripting language runtimes by default, and might require you to install additional packages. If your software depends on scripting languages, it’s recommended that you bundle the runtime within the app. (macOS 10.15 Catalina Release Notes)\n\nThis also applies to Perl and Ruby runtimes and other libraries. I will be focussing on Python because it is used more commonly for MacAdmin tools, but most of this post will apply equally to Perl and Ruby. Just mentally replace “Python” for your preferred language.\n\nThe final recommendation is what AutoPkg and Munki are following: they are bundling their own Python runtime.\n\nHow to get Python\n\nThere is a second bullet in the Catalina release notes, though:\n\nUse of Python 2.7 isn’t recommended as this version is included in macOS for compatibility with legacy software. Future versions of macOS won’t include Python 2.7. Instead, it’s recommended that you run python3 from within Terminal. (51097165)\n\nThis is great, right? Apple says there is a built-in Python 3! And it’s pre-installed? Just move all your scripts to Python 3 and you’ll be fine!\n\nUnfortunately, not quite. The python3 binary does exist on a ‘clean’ macOS, but it is only a stub tool, that will prompt a user to download and install the Command Line Developer Tools (aka “Developer Command Line Tools” or “Command Line Tools for Xcode”). This is common for many tools that Apple considers to be of little interest to ‘normal,’ non-developer users. Another common example is git.\n\nWhen you install Xcode, you will also get all the Command Line Developer Tools, including python3 and git. This is useful for developers, who may want to use Python scripts for build operation, or for individuals who just want to ‘play around’ or experiment with Python locally. For MacAdmins, it adds the extra burden of installing and maintaining either the Command Line Developer Tools or the full Xcode install.\n\nPython Versions, a multitude of Snakes\n\nAfter installing Xcode or the Command Line Developer Tools, you can check the version of python installed: (versions on macOS 10.15.3 with Xcode 11.3.1)\n\n> python --version Python 2.7.16 > python3 --version Python 3.7.3\n\nWhen you go on the download page for Python.org, you will get Python 3.8.1 (as of this writing). But, on that download page, you will also find download links for “specific versions” which include (as of this writing) versions 3.8.1, 3.7.6, 3.6.10, 3.5.9, and the deprecated 2.7.17.\n\nThe thing is, that Python isn’t merely split into two major release versions, which aren’t fully compatible with each other, but there are several minor versions of Python 3, which aren’t fully compatible with each other, but are still being maintained in parallel.\n\nDevelopers (individuals, teams, and organisations) that use Python will often hold on to a specific minor (and sometimes even patch) version for a project to avoid issues and bugs that might appear when changing the run-time.\n\nWhen you install the latest version of Munki, it will install a copy of the Python framework in /usr/local/munki/ and create a symbolic link to that python binary at /usr/local/munki/python. You can check its version as well:\n\n% /usr/local/munki/python --version Python 3.7.4\n\nAll the Python code files for Munki will have a shebang (the first line in the code file) of\n\n#!/usr/local/munki/python\n\nThis ensures that Munki code files use this particular instance of Python and no other copy of Python that may have been installed on the system.\n\nThe latest version of AutoPkg has a similar approach:\n\n> /usr/local/autopkg/python --version Python 3.7.5\n\nIn both cases the python binary is a symbolic link. This allows the developer to change the symbolic link to point to a different Python framework. The shebangs in the all the code files point to the symbolic link, which can be changed to point to a different Python framework.\n\nThis is useful for testing and debugging. Could MacAdmins use this to point both tools to the same Python framework? Should they?\n\nThe Bridge to macOS\n\nOn top of all these different versions of Python itself, many scripts, apps, and tools written in Python rely on ‘Python modules.’ These are libraries (or frameworks) of code for a certain task, that can be downloaded and included with a Python installation to extend the functionality of Python.\n\nThe most relevant of these modules for MacAdmins is the “Python Objective-C Bridge.” This module allows Python code to access and use the native macOS Cocoa and CoreFoundation Frameworks. This not only allows for macOS native GUI applications to be written in Python (e.g. AutoDMG and Munki’s Managed Software Center [update: MSC was re-written in Swift last year]), but also allows short scripts to access system functions. This is sometimes necessary to get a data that matches what macOS applications “see” rather than what the raw unix tools see.\n\nFor example, the defaults tool can be used to read the value of property lists on disk. But those might not necessarily reflect the actual preference value an application sees, because that value might be controlled by a different plist file or configuration profile.\n\n(Shameless self-promotion) Learn more about Property lists, Preferences and Profiles\n\nYou could build a tool with Swift or Objective-C that uses the proper frameworks to get the “real” preference value. Or you can use Python with the Objective-C bridge:\n\n#!/usr/bin/python from Foundation import CFPreferencesCopyAppValue print CFPreferencesCopyAppValue(\"idleTime\", \"com.apple.screensaver\")\n\nThree simple lines of Python code. This will work with the pre-installed Python 2.7, because Apple also pre-installs the Python Objective-C bridge with that. When you try this with the Developer Tools python3 you get an error:\n\nModuleNotFoundError: No module named 'Foundation'\n\nThis is because the Developer Tools do not include the Objective-C bridge in the installation. You could easily add it with:\n\n> sudo python3 -m pip install pyobjc\n\nBut again, while this command is “easy” enough for a single user on a single Mac, it is just the beginning of a Minoan labyrinth of management troubles.\n\nDevelopers and MacAdmins, have to care about the version of the Python they install, as well as the list of modules and their versions, for each Python version.\n\nIt is as if the Medusa head kept growing more smaller snakes for every snake you cut off.\n\n(Ok, I will ease off with Greek mythology metaphors.)\n\nYou can get a list of modules included with the AutoPkg and the Munki project with:\n\n> /usr/local/munki/python -m pip list > /usr/local/autopkg/python -m pip list\n\nYou will see that not only do Munki and AutoPkg include different versions of Python, but also a different list of modules. While Munki and AutoPkg share many modules, their versions might still differ.\n\nSnake Herding Solutions\n\nApple’s advice in the Catalina Release Notes is good advice:\n\nIt’s recommended that you bundle the runtime within the app.\n\nRather than the MacAdmin managing a single version of Python and all the modules for every possible solution, each tool or application should provide its own copy of Python and its required modules.\n\nIf you want to build your own Python bundle installer, you can use this script from Greg Neagle.\n\nThis might seem wasteful. A full Python 3 Framework uses about 80MB of disk space, plus some extra for the modules. But it is the safest way to ensure that the tool or application gets the correct version of Python and all the modules. Anything else will quickly turn into a management nightmare.\n\nThis is the approach that Munki and AutoPkg have chosen. But what about smaller, single script solutions? For example simple Python scripts like quickpkg or prefs-tool?\n\nShould I bundle my own Python framework with quickpkg or prefs-tool? I think that would be overkill and I am not planning to do that. I think the solution that Joseph Chilcote chose for the outset tool is a better approach for less complex Python scripts.\n\nIn this case, the project is written to run with Python 3 and generic enough to not require a specific version or extra modules. An admin who wants to use this script or tool, can change the shebang (the first line in the script) to point to either the Developer Tool python3, the python3 from the standard Python 3 installer or a custom Python version, such as the Munki python. A MacAdmin would have to ensure that the python binary in the shebang is present on the Mac when the tool runs.\n\nYou can also choose to provide your organization’s own copy Python with your chosen set of modules for all your management Python scripts and automations. You could build this with the relocatable Python tool and place it in a well-known location the clients. When updates for the Python run-time or modules are required, you can build and push them with your management system. (Thanks to Nathaniel Strauss for pointing out this needed clarifying.)\n\nWhen you build such scripts and tools, it is important to document which Python versions (and module versions) you have tested the tool with.\n\n(I still have to do that for my Python tools.)\n\nWhat about /usr/bin/env python?\n\nThe env command will determine the path to the python binary in the current environment. (i.e. using the current PATH) This is useful when the script has to run in various environments where the location of the python binary is unknown.\n\nThis is useful when developers want to use the same script in different environments across different computers, user accounts, and platforms. However, this renders the actual version of python that will interpret the script completely unpredictable.\n\nNot only is it impossible to predict which version of Python will interpret a script, but you cannot depend on any modules being installed (or their versions) either.\n\nFor MacAdmin management scripts and tools, a tighter control is necessary. You should use fixed, absolute paths in the shebang.\n\nConclusion\n\nManaging Python runtimes might seem like a hopeless sisyphean task. I believe Apple made the right choice to not pre-install Python any more. Whatever version and pre-selection of module versions Apple would have chosen, it would only have been the correct combination for a few Python solutions and developers.\n\nWhile it may seem wasteful to have a multitude of copies of the Python frameworks distributed through out the system, it is the easiest and most manageable solution to ensure that each tool or application works with the expected combination of run-time and modules.\n\nApple has started shipping Mac models that used to come with Mojave pre-installed with Catalina. If your organization has blockers for Catalina (incompatible software, etc.) you may want to install Mojave on these Macs. Unfortunately, this is not so easy.\n\nImportant Notice: these instructions will only work for Mac models that can boot to Mojave. Usually a Mac requires at least the version of macOS that the model shipped with when it was introduced. As of this writing, all new Macs require at least Mojave. The exceptions are the iMac Pro (High Sierra) and the MacBook Pro 16“ and the Mac Pro (2019) which both require Catalina. You cannot use these instructions to force a Mac Pro or MacBook Pro 16” to boot to Mojave. Any new Mac models that Apple introduces from now on, will also require Catalina and cannot be downgraded to Mojave.\n\n(Not meant as a challenge. I am aware that someone might be able to hack together a Chimera Mojave with Catalina drivers. These ‘solutions’ are not supportable on scale.)\n\nDirectly downgrading from Catalina to Mojave with the startosinstall --eraseinstall command will fail. Attempts to run the Mojave installer from a Catalina Recovery (local or Internet) will also fail. The reason seems to be that the Mojave Installer application chokes on some aspect of Catalina APFS. Apple is likely not very motivated to fix this.\n\nSo far, the recommendation has been to boot to Internet Recovery with the shift-command-R key combination at boot. This used to boot to a Mojave (more specfically, the system the Mac shipped with) recovery system, and then you can wipe and re-install Mojave. However, if a Mac was shipped with Catalina pre-installed, it will boot to Catalina Internet Recovery, regardless of whether the Mac can boot to Mojave or not.\n\nWe have to get creative.\n\nExternal USB Installer\n\nThe solution requires a Mojave Installer USB disk. First download the latest Mojave installer. You can do so from by following this App Store link. If you are running Catalina, you can also use the new option in softwareupdate:\n\n> softwareupdate --fetch-full-installer --full-installer-version 10.14.6\n\nThen you can use the createinstallmedia command in the Install macOS application to build an external Installer Drive on a USB drive. You probably want to add the --downloadassets option to add the current firmware to the USB drive as well.\n\n> createinstallmedia --volume /Volumes/Untitled --downloadassets\n\nThis will delete the target volume data on the USB disk.\n\nEnable External Boot\n\nTo boot a new Mac with a T2 chip off an external drive, you need to allow external boot from the Security Utility in the Recovery partition. This utility is protected and requires the password of a local administrator user to access. When you get a new Mac “out of the box,” you cannot directly boot to Recovery to change this.\n\nInstead, you have to boot to the pre-installed Catalina, work your way through the Setup Assistant, and create a local administrator user before you can boot to Recovery to change this setting.\n\nYou also need to connect the Mac to a network with non-filtered/proxied access to Apple’s servers, either with Wifi or an ethernet adaptor. You can see which services and servers the network needs to be able to access in this kbase article. You will definitely need the servers listed under ‘Device Setup’ from that list and many of the others, depending on your deployment workflow.\n\nThis network connection is required to verify the integrity of the system on the USB Installer drive. You could also disable ‘Secure Boot’ entirely, but that is not recommended as it will, well, disable all system security verifications.\n\nNow, reboot the Mac and hold the option key, from the list of devices to boot from, select the Mojave Installer drive. Once booted to the Mojave installation drive, start Disk Utility. In Disk Utility, erase the entire internal drive. You may have to choose ‘Show All Devices’ from the View menu to be able to select the internal drive with all sub volumes, not just the system or data volume.\n\nThen you can quit Disk Utility and start the Mojave installation process.\n\nAfter completing the installation, you want to remember to return to Recovery and re-disable external boot again. However, you need to create a new admin account on the disk before you can do that…\n\nAvoiding the Downgrade\n\nThis is obviously tedious and really hard to automate. (I have been wondering if you could build a MDS workflow, but this one would require at least three reboots.)\n\nThe preferred solution is for IT departments and organizations to have the workflows and infrastructure in place to support and use “latest macOS” (Catalina). Apple is discouraging system downgrades or using anything but “latest macOS.” On newer hardware — like the MacBook Pro 16″, Mac Pro 2019, and every new Mac Apple will introduce from now on — downgrading to Mojave is not possible at all, so you have to support Catalina when you (or your users) get those Mac models.\n\nAs mentioned before, I do not believe there is much motivation at Apple to simplify this particular workflow. It serves Apple’s interest and vision to push the latest macOS over previous versions. From a user perspective it allows better integration with their iOS and other Apple devices. From a security standpoint it provides the latest security updates and patches. Apple provides security updates for the previous two macOS versions, but those notoriously do not fix all the vulnerability that the latest macOS gets.\n\nHowever, in some cases you may have blocking applications that cannot run, or cannot be upgraded to run on Catalina. Then this workflow can be a ‘last ditch’ solution until you get those ‘blockers’ sorted out.\n\nMaybe the best solution is to use this complex and work intensive downgrade workflow as leverage to push for “latest macOS” support in your organization.\n\nThanks to Robin Lauren and Mike Lynn for figuring this out on MacAdmins Slack and sharing their results.\n\nThere is a new update to my book “macOS Installation!”\n\nIt contains lots of updates regarding Catalina, and the usual list of typos and other fixes.\n\nAs usual, the update is free when you already own the book.\n\nIf you have already purchased the book, you can go to Apple Books application on your Mac and choose ‘Check for available Downloads…’ from the ‘Store’ menu. I have seen the Mac Books app be really slow (or even completely blind) in picking up updates, you can accelerate the process by removing the local download and re-downloading the book. In iOS tap on your iCloud account icon next to ‘Reading Now’ and then choose ‘Updates.’\n\nIf you have not yet purchased the book, I have good news for you: I have lowered the price!\n\nGet “macOS Installation” on Apple Books!\n\nWhy did I lower the price? Let me explain…\n\nThis is the fourth update for “macOS Installation.” It might be its last.\n\nWhen I first published the book in June 2018, I promised updates until the Mojave release. There have now been two updates beyond that: one for the Mojave “Spring” update, and another one for Catalina.\n\nThe format of the book had the original intention to help MacAdmins learn about and deal with the strange, new post-imaging world that came with the High Sierra and T2 Security chip. I like to believe it did that quite well. But since then, the releases of Mojave and Catalina have added more layers of complexity and information on top of that.\n\nThe post-imaging world isn’t new anymore. It is still strange, complicated, and sometimes hard to navigate. However, I feel that the book’s format would have to change to keep being a useful guide. Obviously, such a re-structuring is a massive effort and would pretty much result in a new book. Maintaining and updating a book is a lot of effort, re-writing it even more so.\n\nThus the decision that this might be last update for “macOS Installation.” Depending on how disruptive the changes in the Catalina “spring” update will be, I might update for those, but I am not planning to update the book for 10.16 next year.\n\nI might work on some new book on macOS deployment and management in the future. However, I have a few other topics I want to publish before I do that, so that might be a while.\n\nCharles Edge’s and Rich Trouton’s new book should be a great successor to “macOS Installation”:\n\nRich Trouton’s and Charles Edge’s “Apple Device Management: A Unified Theory of Managing Macs, iPads, iPhones, and AppleTVs”: pre-order on Amazon US, UK, DE (Affiliate Links)\n\n“macOS Installation” should remain useful for the life time of Catalina, which, depending on your deployment practices should be another one to four years, more if 10.16 and 10.17 do not drastically change everything again.\n\nReaders who bought the book 16 months ago got several updates for free. I believe free updates are one of the great value propositions of self-published digital books. Most computer related information changes quickly these days and being able to update digital books is a great way to extend their lifetime, usefulness, and value.\n\nMy plan to not further update for “macOS Installation” thus lowers its value a bit, and to reflect that I am lowering its price in the store.\n\nThat said, I am convinced the book is still very helpful and full of useful information as it is, so if you have not bought the book yet, this is your chance!\n\nGet “macOS Installation” on Apple Books!\n\nChanges in this version (you can also find this in the book in the ‘Version History’ section):\n\nadded “Moving to zsh” to More Books and updated links to new Apple Books format\n\nextended the explanation on FileVault and the Secure Token\n\nadded Catalina System Volume Layout description\n\nadded instructions to block the macOS Catalina download\n\nadded an explanation for the expiring installer certificates from October 2019\n\nupdated download links for Older macOS Versions\n\nadded notes to NetBoot-based Installation regarding its further demise and the removal of System Image Utility from Catalina\n\nadded information on new softwareupdate features in Catalina to macOS Installer Application\n\nadded a section on new Catalina features\n\nadded a description of new stub Installer application behavior with startosinstall\n\nadded link to new SecureToken documentation\n\nupdated text and tables to reflect the 2019 iMacs\n\nclarified reboot behavior of Mojave and High Sierra with Custom Packages\n\nadded a list of MDM commands that require DEP\n\nnow using the term ‘conventional’ Macs to refer to non-Secure Boot or pre-T2 Macs\n\nmany typos, minor changes and clarifications\n\nApple introduced Notarization in macOS Mojave. Since its introduction Apple has kept increasing the use of notarization checks in macOS. For macOS Catalina, Apple has been very vocal saying that Notarization is a requirement for distribution of Applications outside of the Mac App Store.\n\nThis has left many MacAdmins confused and concerned. A large part of the work as a MacAdmin consists of (re-)packaging applications, configuration files and scripts so they can be distributed in an automated fashion through a management system, such as Jamf Pro, Munki, Fleetsmith, etc.\n\nDo MacAdmins need to notarize all the package installers they create as well? Do MacAdmin need to obtain an Apple Developer ID? How should MacAdmins deal with notarized and non-notarized applications and installers from third parties?\n\nThis post is an attempt to clarify these topics. It’s complicated and long, bear with me…\n\nSigned Applications\n\nApple’s operating systems use cryptographic signatures to verify the integrity and source of applications, plug-ins, extensions, and other binaries.\n\nWhen an application, plug-in, extension, or other binary (from now on: “software”) is signed with a valid Apple Developer certificate, macOS (or iOS, tvOS, and watchOS) can verify that the software has not been changed or otherwise tampered with since it was signed. The signature can verify the source of the signature, i.e the individual Developer account or Developer team whose Developer identity was used to sign the software.\n\nIf the contents of the software were changed for some reason, the verification fails. The software can be change by accident or with malicious intent, for example to inject malicious code into an otherwise beneficial piece of software.\n\nSince Apple issues the Developer IDs, they also have the option of revoking and blacklisting certificates. This usually happens when a Developer ID has been abused to distribute malware. The Malware Removal Tool or MRT is the part of the system that will identify and block or remove blacklisted software.\n\nApp Store Distribution\n\nApplications distributed through Apple’s App Stores have to be signed with a valid Developer ID. A developer needs to have valid subscription ($99 per year for individuals and $299 for organizations) to obtain a certificate from Apple.\n\nWhen a developer submits software to an App Store on any Apple system, the software will be reviewed by Apple to confirm whether it meets the various guidelines and rules. This includes a scan for malware.\n\nApp Store applications also have to be sandboxed, which means they can only access their own data (inside the “sandbox”) and not affect other applications, services, or files without certain “entitlements” and, in many cases, user approval.\n\nApp Store rules and regulations and sandbox limitations preclude many types of applications and utilities. On iOS, tvOS and watchOS, they are the only way for developers to distribute software to end users.\n\nApple provides a method for Enterprises and Organizations to distribute internal software directly without going through the App Store and App Store review. This should be limited to distribution to employees and members of the organization (such as students of a university or school). This method has infamously been abused by Facebook and other major companies which lead to Apple temporarily revoking their certificates. (We will not discuss Enterprise App Distribution in this post.)\n\nThere is also much criticism about how realistic Apple’s rules and guidelines are, how arbitrary the review process is, and whether the sandbox restrictions are useful or unnecessarily draconic. A lot of this criticism is valid, but I will ignore this topic in this post for the sake of simplicity and brevity.\n\nSoftware downloaded from the App Store is automatically trusted by the system, since it underwent the review and its integrity and source can be verified using the signature. In the rare case that some malicious software was missed but the review process, Apple can revoke the Developer certificate or blacklist the software with the Malware Removal Tool.\n\nDistribution outside of the Mac App Store: Gatekeeper and Quarantine\n\nAs mentioned before, iOS, tvOS, and watchOS applications have to distributed to end users through the App Store, be signed with a valid Developer ID and under go the review.\n\nBecause the Mac existed a long time before the Mac App Store, software vendors have many ways of distributing software. Originally software was sold and delivered on physical media (Floppy Disks, CDs, and DVDs), but we with the rise of the internet, users could simply download software from the developer’s or vendor’s website or other, sometimes dubious, sources.\n\nApple has (so far) accepted and acknowledged that these alternative means of software distribution and installation are necessary on macOS. To provide an additional layer of security for the end user in this use case, Apple introduced Gatekeeper in OS X 10.8 Mountain Lion.\n\nWhen a user downloads a software installer or archive from the internet it is ‘quarantined.’ When the user attempts to install or launch the software for the first time, Gatekeeper will evaluate the software. There are many steps in this evaluation, and Howard Oakley explains the process in much detail in this post.\n\nHoward Oakley: Will Gatekeeper let me run that app in Catalina?\n\nYou can see the quarantine flag with the xattr command:\n\n% xattr ~/Downloads/somefile.pkg com.apple.macl com.apple.metadata:kMDItemWhereFrom com.apple.quarantine\n\nYou can delete the quarantine flag with xattr -d com.apple.quarantine path/to/file. Usually, there is no real need to.\n\nThe first step of the evaluation is verifying the software’s signature, Developer ID, integrity. When encountering an unsigned piece of software the user will be presented with a warning dialog.\n\nUsers with administrator privileges can bypass Gatekeeper by choosing “Open” from the context menu instead of double-clicking to open. Gatekeeper can be completely disabled with the spctl command, though this is not recommended.\n\nThe Developer signature provides a way to verify the source and integrity of a piece of software, but since the distribution happens outside of Apple’s control, a malicious developer could still put any form of malicious code in the signed software to keep Gatekeeper happy. As long as the malware avoids widespread detection it will look good to Gatekeeper and the end user. Even when the malware is detected by Apple and the Developer ID is revoked, it is not hard for a malicious developer to obtain or steal a new Developer ID and start over.\n\nEnter Notarization\n\nApple needed another layer of security which could scan software for known malware and enforce a certain set of security rules on third party software, even when it is distributed outside of the Mac App Store.\n\nNote: I find the effort Apple is putting in to Gatekeeper and Notarization quite encouraging. If Apple wanted to restrict macOS to “App Store only” distribution in the near future, this effort would not be necessary. This shows that Apple still acknowledges the important role that independent software distribution has for macOS.\n\nTo notarize software, a developer has to sign it with their Developer ID, and upload it to Apple using Xcode or the altool command. Then Apple notarization workflow will verify that the software fulfills certain code requirements and scans for certain malware. The exact details of what is considered malware are unknown. However, we do know that the process is fully automated and, unlike the App Store approval process, does not involve human reviewers.\n\nIf the software has passed the notarization process the result will be stored on Apple’s servers. When Gatekeeper on any Mac verifies the software it can confirm the notarization status from Apple’s servers. Alternatively, a developer can ‘staple’ a ‘ticket’ to the software, which allows Gatekeeper to confirm the notarization status without needing to connect to Apple.\n\nApple Support: Use Apple products on enterprise networks (Look for ‘App notarization’)\n\nWhen Gatekeeper encounters a quarantined software that is notarized, it will show the familiar Gatekeeper dialog with an additional note that:\n\n“Apple checked [the software] for malicious software and none was detected.”\n\nSince 10.14.5, When Gatekeeper encounters signed software that is not notarized it will show the standard dialog but with an additional yellow warning sign.\n\nApple Support: Safely open apps on your Mac\n\nAs with the previous Gatekeeper checks for a valid signature an administrator user can override the check by choosing ‘Open’ from the context menu instead of double-clicking to open.\n\nIn Mojave notarization was enforced in Gatekeeper checks for kernel extensions and in 10.14.5 for software with new Developer IDs, which where created after June 2019.\n\nStarting with Catalina, all software needs to be notarized to pass Gatekeeper when the first launch or installation is initiated by a user.\n\nHowever, the warning can still be overridden by an administrator user using the context menu.\n\nWhat can be Notarized\n\nAs of now, the following pieces of software can be notarized:\n\nApplication bundles\n\nKernel Extensions\n\nInstaller Packages (pkg), Disk images (dmg) and zip archives\n\nWhen you are building other types of software, such as command line tools, you can (and should) place them in one of the archive formats. The preferred choice for MacAdmins should be an installer package (pkg) since it will also place the binary in the correct location in the file system with the correct access privileges.\n\nWhat cannot be Notarized\n\nYou should not notarize a binary or application that you did not sign! The Developer ID used to sign a binary (application or command line tool) should be the same as the Developer ID used to submit the software for notarization.\n\nApple has loosened the requirements for notarization until Jan 2020 to give developers some extra time to adapt. Once the requirements return to the full restrictions an attempt to notarize third party software with a different Developer ID will fail. (Existing notarizations will remain valid after that date.)\n\nApple Developer: Notarizing Your Mac Software for macOS Catalina\n\nInstaller command\n\nWhen you install software using the installer command from the Terminal or a script, it will bypass quarantine and the Gatekeeper check.\n\nThis is also true when you install software using a management system such as Jamf Pro, Munki, Fleetsmith, etc.\n\nSoftware you re-package as a MacAdmin for distribution through management systems does not need to be notarized.\n\nGiven this and the limitations on notarizing third party software above, you should very rarely need to notarize as a MacAdmin.\n\nExample: Re-packaging third party software from dmg\n\nA lot of applications for macOS are distributed as disk images. The normal end user workflow would be to mount the dmg after downloading, and then copying the application from the dmg to the /Applications folder.\n\nThere are two steps where Gatekeeper might trigger: when you mount the disk image and when you launch the application after copying for the first time. To pass both these checks, a developer should prudently notarize both the disk image and the application. Google Chrome for example does exactly that, avoiding the Gatekeeper warning.\n\nWe can verify this with the spctl command:\n\n% spctl -a -vv -t install ~/Downloads/googlechrome.dmg /Users/armin/Downloads/googlechrome.dmg: accepted source=Notarized Developer ID origin=Developer ID Application: Google, Inc. (EQHXZ8M8AV) % spctl -a -vv -t execute \"/Volumes/Google Chrome/Google Chrome.app\" /Volumes/Google Chrome/Google Chrome.app: accepted source=Notarized Developer ID origin=Developer ID Application: Google, Inc. (EQHXZ8M8AV)\n\nUnfortunately, some management systems don’t understand “Apps in disk images” as a distribution method. For these systems MacAdmins need to re-package the application into a pkg. You can do that quickly with pkgbuild:\n\n% pkgbuild --component /Volumes/Google\\ Chrome/Google\\ Chrome.app --install-location /Applications/ GoogleChrome.pkg pkgbuild: Adding component at /Volumes/Google Chrome/Google Chrome.app pkgbuild: Wrote package to GoogleChrome.pkg\n\nor use quickpkg.\n\nThis new installer package will be neither signed nor notarized:\n\n% spctl -a -vv -t install GoogleChrome.pkg GoogleChrome.pkg: rejected source=no usable signature\n\nWhen you send this installer package to another Mac with AirDrop, the receiving system will attach the quarantine flag. And when you double click it, you will get the Gatekeeper warning. However, when you can still install it using the installer command in Terminal, which bypasses the Gatekeeper system, just as your management system will:\n\n% installer -pkg ~/Downloads/GoogleChrome.pkg -tgt /\n\nAlternatively, you can choose “Open” from the context menu in Finder to bypass Gatekeeper. However, this is not something you want to teach your end users to do regularly.\n\nFirefox can be downloaded as a disk image as well as a installer package. While the application inside both is notarized, neither the disk image nor the installer package are. The disk image mounts with no issues, but when you try to open the installer pkg by double-clicking you will get the expected notarization warning. Nevertheless, the pkg will work fine after importing to your management system.\n\nEdge cases\n\nThere are some cases where notarization would be useful for MacAdmins but might not even be possible. I met a MacAdmin working at a university at MacSysAdmin last week. They need to re-package a VPN client with customized configuration files to be installed on student-owned machines.\n\nThere is really no solution without the students running into the notarization warning. Teaching the users how to bypass Gatekeeper is not a good solution.\n\nIn these cases you have to work with the software vendor and Apple to find a workable solution.\n\nSummary\n\nNotarization is a new security layer introduced by Apple in Mojave. The restrictions imposed on non-notarized software increase in Catalina.\n\nWhen an Application is installed or launched for the first time by the user (by double-clicking) Gatekeeper will verify the signature and notarization status and warn the user if any are missing.\n\nDevelopers should sign and notarize their applications and tools.\n\nMac Administrators should not notarize applications and tools from third parties.\n\nApplications and packages installed through management systems bypass Gatekeeper and do not need to be notarized.\n\nConclusion\n\nApple is loudly messaging that notarization is absolutely required for applications in Catalina. While this message makes sense for the developers building the software, it does not apply to administrator who re-package third party software for distribution through management systems.\n\nMacAdmins should join Apple in demanding signed and notarized binaries and installer packages from developers.\n\nHowever, MacAdmins can also continue their current workflows for re-packaging and distribution.\n\nLinks\n\nScripting OS X\n\nNotarize a Command Line Tool\n\nCheck Installer Pkgs for deprecated scripts\n\nTom Bridge\n\nMac Admins Talk: The Loyal Order of Notaries\n\nNotarization Follow-Up and Video\n\nApple Updates Notarization Requirements\n\nManipulating the System Policy Database with Configuration Profiles\n\nManipulating the System Policy Database with Configuration Profiles, Part 2\n\nHoward Oakley\n\nWill Gatekeeper let me run that app in Catalina?\n\nNotarization devalued?\n\nThe ‘hardened runtime’ explained\n\nApple\n\nSafely open apps on your Mac\n\nNotarizing Your Mac Software for macOS Catalina\n\nResolving Common Notarization Issues\n\nAll About Notarization (WWDC 2019)\n\nAdvances in macOS Security (WWDC 2019)\n\nAt WWDC last week, there was a very interesting session on “Apple File Systems” (APFS). It covered the new split system layout in macOS Catalina with a read-only system volume, volume replication with APFS, and how external USB drives and SMB works on iPadOS.\n\nThe entire session is very interesting and well worth watching. Go ahead, I’ll wait…\n\nAround the 13 minute mark, during the ‘Volume Replication’ segment, the engineer on stage talks about using asr (Apple Software Restore) tool to ‘replicate’ a system volume to several computers at once and gives the example of a computer lab. He then proceeds to explain the new options in asr regarding APFS volumes and snapshots.\n\nThe new features are hugely interesting and I think they will be very useful for backup solutions. There will probably be some applications for MacAdmins, but I disagree with the engineer on stage and some MacAdmins on Twitter and Slack:\n\nCatalina will not bring a revival of imaging.\n\nNote: I wrote a book on this: “macOS Installation for Apple Administrators”\n\nWhat killed imaging?\n\nBack in the Sierra days, there was this idea that the introduction of APFS would ‘kill’ imaging. The asr tool relied on many HFS+ behaviors and it was questionable that Apple could or would maintain that for APFS. But while there were some changes to asr in the High Sierra and Mojave upgrades, it still worked.\n\nWhat killed imaging as a process for MacAdmins was the T2 system controller, first introduced with the iMac Pro. There are two main aspects:\n\nNetBoot and external boot are defunct\n\nFirmware needs to be updated with the system\n\nNetboot and external boot are defunct\n\nTo re-image or re-install a system, you have to boot it off a different system volume (NetBoot, Recovery, external drive). Alternatively, you can put the system into target disk mode and image or install the system directly on the internal drive.\n\nOn Macs with the T2 system controller, NetBoot is explicitly defunct. External boot is disabled by default. It can be re-enabled, but the process is convuluted, requires at least one full setup process, and cannot be automated.\n\nThis leaves Recovery as the system to use to replace the system volume and, not surprisingly, there are a few tools that have focussed on using Recovery in the new T2 Mac world:\n\nTwocanoes MDS\n\ninstallr\n\nbootstrappr\n\nFirmware needs to be updated with the system\n\nYou could also put the target Mac in target disk mode and image its system. This will work, as long as the system on the image is the same version as the system that was installed before. We have been warned about this in the infamous HT208020 support article:\n\nApple doesn’t recommend or support monolithic system imaging as an installation method. The system image might not include model-specific information such as firmware updates.\n\nModern Macs don’t just require a few files on disk to make a bootable system. Inside your Mac are several subsystems that require their own systems (i.e. firmware) to run. Most prominent are the T1 or T2 system controllers which are actually independent custom ARM-based processers running a system called ‘iBridge’ which is an iOS derivate.\n\nIf you just exchange the ‘normal’ system files on the hard drive over TDM, without also updating the various firmwares in the system, you may get your Mac into state where it cannot boot.\n\nThis was most obvious with the macOS High Sierra upgrade. After re-imaging a 10.12 Sierra Mac to High Sierra running on APFS, would lead to a Mac that could not read the new system volume. The firmware update that came with High Sierra is needed, so the firmware can mount, read and start the APFS system volume.\n\nHow can I update or upgrade?\n\nFor security, only Apple’s ‘Install macOS’ application and the intermediate software and security update packages have the necessary entitlements to change the built-in firmware(s).\n\nFirmware updates can be in system updates (minor version updates, i.e. 10.14.4 to 10.14.5), security updates, and major system upgrades (i.e. 10.13 to 10.15).\n\nThere are three options to apply a system update (e.g. from 10.14.4 to 10.14.5) or security update:\n\n‘Install macOS *’ application, either manually or with the startosinstall tool\n\nSoftware Update, either manually or through the command line tool\n\nsystem or security update pkg installer downloaded from support.apple.com\n\nWhen you want to upgrade a Mac through a major version change (e.g. 10.13 to 10.14 or 10.15), there is only one option:\n\n‘Install macOS *’ application, either manually or with the startosinstall tool\n\nThe one remaining use case for imaging\n\nGiven the above limitations, there is one use case left for imaging. When you have full control over the macOS version installed on the Mac and its firmware and the image matches that version, then you can image.\n\nHowever, since NetBoot and external boot are defunct, you will have to image either over target disk mode (fast, but only a few Macs at a time) or using the Recovery (hard to automate, comparatively slow).\n\nThe remaining strength of the imaging workflow is the raw speed. Some application suites measure several Gigabytes, if not tens of Gigabytes. With installation workflows, these have to be downloaded, decompressed (pkg installers are compressed archives) and copied to the system drive, a process that takes a lot of time. With imaging, these can be layed down with fast block copies.\n\nFor example, the re-installation of a MacBook Pro I tested recently took about 25 minutes. This time includes downloading the 6GB ‘Install macOS’ application and the entire re-installation process. (I could probably have sped this up with a caching server or by pre-installing the full ‘Install macOS’ applications.) If I could have used imaging this would take 2–3 minutes.\n\nIf you are in a situation where you have to restore Macs to a pre-defined state frequently and quickly, then imaging might still be a useful workflow. One use case may be MacBooks that get frequently handed out as loan units, where the users get administrative privileges, so they can install extra software and configure the loan units.\n\nYou will have to invest extra effort during updates or upgrades to apply them first on the devices, to ensure the firmware gets updated, and then to update the image, as well. In some use cases this extra effort can be worthwhile.\n\nMDM (and DEP) is required\n\nWith modern macOS there are other considerations for deployment that make classic imaging workflows less practical. Before macOS 10.13 High Sierra, MacAdmins could manage their Mac fleet without an MDM server. In High Sierra 10.13.4 Apple added two things to the MDM protocol:\n\n‘user-approved’ MDM\n\nKernel extension white listing via configuration profile\n\nThe second feature (white listing Kernel extensions) requires the first (user-approved MDM). You cannot manage Kernel Extensions or Privacy Preferences Control settings in Mojave, with out a user-approved MDM. In mosts organizations, these are not limitations you can work around. An MDM is now a requirement to manage Macs in an organization.\n\nFrom what we can glean from the WWDC sessions, the (UA)MDM controls will be increased even further with Catalina. It will be driven even further: DEP or ‘Automated Device Enrollment’ with Apple Business Manager or Apple School Manager will be required for some new management features, such as ‘bootstrap tokens’ for FileVault.\n\nEach Mac client needs to be enrolled in the MDM individually. The MDM enrollment cannot be part of an image. The easiest way to get a Mac enrolled is with Automated Device Enrollment (formerly known as DEP), which happens at first boot after installation.\n\nThird party software\n\nIt is not just the macOS system that needs to individually enroll with the MDM server. Many third party solutions now also require subscriptions or licenses to be activated on each device individually. All these additional configurations that need to happen after installation or imaging, decrease the usefulness of including all software and configuration in an image.\n\nPatching and software updates\n\nMost imaging deployments, used a workflow where the image was kept ‘static’ or ‘frozen’ for longer periods of time, usually six or twelve months. This will minimize the effort to update the image, system and software.\n\nHowever, modern operating systems and third party software have update frequencies of 4–10 weeks. Modern security requirements will require these updates to be applied in a timely matter. Critical security problems can strike at any time, requiring fast updates from the vendors and the Mac Admins.\n\nAs with the MDM above, having a system in place that allows the MacAdmin to easily and quickly deploy and, when necessary, enforce an update or patch to the entire fleet of devices is an important requirement.\n\nSoftware and patch management of non-App Store applications is not part of the MDM protocol. Nevertheless, many MDM solutions also include additional functionality for software management, with varying degree of usefulness.\n\nSome MacAdmins prefer to combine their MDM solution with the open source solution Munki instead. Munki is considered to be the best software management solution for macOS, but does not include MDM functionality itself.\n\nWhichever software management solution you use, once you have that in place, it will be easier to manage (i.e. install and enforce) software through the management system, than to keep an image up-to-date and re-applying it.\n\nYou will end up with a ‘thin’ base image and everything else deployed and managed by the management system. At that point you might as well switch to an installation based workflow.\n\nBut, the engineer on stage said…\n\nHere are all the limitations on imaging, summarized:\n\nNetBoot and external boot are defunct\n\nsystem firmware needs to be updated with the system\n\nMDM and DEP are required\n\nfrequent security updates and patches require continuous software management\n\nNone of these limitations are addressed by the changes to the asr tool in Catalina. Changes in other areas of the system in Catalina will actually re-inforce some of these limitations.\n\nImaging is still dead.\n\nBut why even have asr, then?\n\nThe asr tool exists because Apple needs a tool to image the operating system to new Macs in the factory. Obviously, Apple has absolute control over the versions of macOS and firmwares deployed to the systems, so they ensure they all match. Speed is a priority, so Apple needs and maintains asr.\n\nOther uses of asr, including the use as an imaging tool for administrators have always been secondary.\n\nAs mentioned earlier, when your environment has similar requirements (fast re-deployment) and can provide tight control over the macOS and firmware versions, then imaging might still be a useful workflow for you.\n\nYou can already do this with High Sierra or Mojave. You do not have to wait for the new Catalina features for this.\n\nIn general, a simpler (albeit slower) installation-based workflow is less complex to deploy and maintain. (Imaging might seem less complex, because it is more familiar.)\n\nSo, the new features in the presentation are pointless?\n\nThe other use case for asr in the presentation, backups, are very exciting. They will allow the system to take a snapshot and then copy the data of the snapshot to a backup while the system keeps running and changing files. You may also be able to restore a system from a snapshot stored elsewhere.\n\nThe split of system volume and user data volume in Catalina is also very intriguing for Mac Admins. This may of course, break some third party software. (Start testing now.) But it may also open up new options for management. One of these (user enrollment) is introduced in the “Managing Apple Devices” WWDC video.\n\nOne possible workflow could be to snapshot and/or image the data volume and leave the system volume intact (you have to, it is read-only and SIP protected). It is still questionable how well this might work, since the firmlink connections between the system and the data volume might not survive the replacement of their targets. You can start testing this now, but keep in mind that the details of the new file system layout will still change during the beta phase.\n\nSummary\n\nThe changes introduced to the file system in macOS Catalina at WWDC are major and will enable new workflows for MacAdmins.\n\nStart testing Catalina now.\n\nThe limitations that ‘killed’ imaging, still apply or might be re-inforced. Imaging is still dead\n\nLast week, Apple posted one of the first support articles specifically for macOS Mojave:\n\nApple Support: Prepare your institution for iOS 12 or macOS Mojave\n\nThis article is not quite the bombshell that the infamous HT208020 for High Sierra is. However, in contains a few firecrackers which will affect many Mac deployments. You can test deployments with the public beta or developer release of Mojave right away.\n\nUpdate: Apple has posted a new article describing how to avoid this with a Privacy Configuration Profile. Ben Toms has a wonderful summary.\n\nThe piece of information I want to focus on for this post affects Apple Remote Desktop client configuration (called ‘Remote Management’ in the ‘Sharing’ preference pane). Mac Admins have been using the command line tool kickstart to enable and configure Apple Remote Desktop access on clients with scripts through a management system.\n\nApple Support: Use the kickstart command-line utility in Apple Remote Desktop\n\nScripting OS X: Control Apple Remote Desktop Access with Munki\n\nIn macOS Mojave, Apple will restrict the functionality of kickstart:\n\nFor increased security, using the kickstart command to enable remote management on a Mac will only allow you to observe it when sharing its screen. If you wish to control the Mac while sharing its screen, enable remote management in System Preferences.\n\nThis continues Apple’s effort to require user interaction for every configuration that can provide on going access to sensitive data or the system a Mac, like User-Approved MDM and the new privacy controls.\n\nWhat this means for Admins\n\nIf you rely on Apple Remote Desktop for remote control and remote assistance, this will disrupt your installation workflow. The kickstart tool will enable ARD access and configure the users but not enable any access privileges.\n\nYou get a nice (red) warning in the shell and when you go into the Remote Management preference pane, no active access is enabled. You can only manually enable the access privileges in the ‘Sharing’ preference pane, which requires administrator privileges to unlock.\n\nYou can still use kickstart to disable Remote Management access.\n\nThis limitation extends to Screen Sharing. You can enable Screen Sharing (when ARD/Remote Management is disabled) from the command line with:\n\n$ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist\n\nYou have to restart System Preferences to pick up the change in the UI. This command will enable Screen Sharing access, but it will be observe only. (Note: you can use launchctl unload ... to disable.)\n\nWhen you enable Screen Sharing manually in the ‘Sharing’ preference pane, it will grant full access.\n\nWorkarounds\n\nI have (so far) been unsuccessful in determining where the restricted access setting is stored. My suspicion is that the TCC database is involved. If the setting is controlled from a protected settings file or database, then you can at least read that to determine the state and use that information to trigger a notification to the user that action is required. So far, however, I cannot get this information yet.\n\nIf you find any means of determining the state, please let me know and I will update this post.\n\nUnfortunately, Apple has provided no alternative means of controlling screen sharing or ARD with configuration profiles from a UAMDM, leaving admins stranded without an automated solution.\n\nUpdate: Rich Trouton’s recent post on an managing ARD access with with user groups is of interest to admins encountering this problem.\n\nAdmins that require ARD or Screen Sharing will have to rely on users actively enabling the settings. To make things worse, unlike the approval of an MDM profile or a kernel extension, the ‘Sharing’ preference pane is locked for standard (non-admin) users.\n\nYou can either provide a way for users to be temporarily promoted to admin or modify the Authorization database to allow standard users to unlock the ‘Sharing’ pane. However, unlocking the Sharing pane allows access to many more critical services, which is untenable from a security perspective.\n\nIt will have to be seen how this affects third party remote access applications. I have tried setting up Edovia Screens Connect on my Mojave virtual machine, but that currently uses the native Screen Sharing/Remote Management client, so it will encounter the same limitations. Other third party tools may have their own clients.\n\nAs usual, please, provide your feedback to Apple through the usual channels (macOS beta Feedback app, bugreport, your Apple representative, SE or technical support)."
    }
}