{
    "id": "dbpedia_8585_0",
    "rank": 42,
    "data": {
        "url": "https://managingosx.wordpress.com/category/python/",
        "read_more_link": "",
        "language": "en",
        "title": "Python – Managing OS X",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://managingosx.wordpress.com/wp-content/uploads/2014/04/xcode.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-07-20T03:40:17-07:00",
        "summary": "",
        "meta_description": "Posts about Python written by GregN",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Managing OS X",
        "canonical_link": "https://managingosx.wordpress.com/category/python/",
        "text": "Overview\n\nHere are some early notes on making and restoring a High Sierra deployment image to an iMac Pro.\n\n“Wait, I thought imaging was dead! Especially imaging the iMac Pro with Secure Boot!” you may be thinking. My reply: “We’ll see, won’t we?” It’s early days here: we’re experimenting. Our experiments might lead to dead ends, or they might lead to useful results.\n\nContinue reading “Early notes on deploying images to iMac Pro” →\n\nIf you will be attending my session at MacADUK 2017, you might find it useful to have copies of the sample Python code and scripts I’ll be talking about and demonstrating.\n\nI’ve set up a GitHub repo. The sample code is basically complete, but I might make some minor changes over the next several days.\n\nYou can download the code samples here: https://github.com/gregneagle/macaduk2017/archive/master.zip\n\nor if you are familiar with Git, you can clone them locally:\n\ngit clone https://github.com/gregneagle/macaduk2017.git\n\nHope to see you in London!\n\nLike many people tasked with managing OS X/macOS machines, I use VMware Fusion to do a lot of testing. Fusion enables me to test in various versions of OS X, and to easily make changes and revert to a prior state. It’s a great tool.\n\nFor some of the testing I do, it’s important to be able to quickly and easily build a VM that is configured just like the “real” machines I manage. There are a few way to do that. Since we build our machines by booting into a NetBoot image and using Graham Gilbert’s excellent Imagr (https://github.com/grahamgilbert/imagr) to restore an image, it’s great that we can also boot Fusion VMs from a NetBoot image.\n\nContinue reading “Stupid Tricks with createOSXinstallPkg and VMware Fusion” →\n\nA few days ago I made a simple tool for building packages available: munkipkg.\n\nhttps://github.com/munki/munki-pkg\n\nI got many comments and suggestions for additional features and all sorts of cool additions. Some have even been added to the tool already. But I would like to keep munkipkg a pretty simple, basic tool.\n\nThe Luggage (https://github.com/unixorn/luggage) has been around for a while; if munkipkg is too simple for your needs, please have look at that.\n\nI also suggested to several people that if they had more complex needs than munkipkg could handle, it might make more sense to use autopkg, which supports very complex, customizable workflows.\n\nI could tell by the awkward silence that my suggestion was confusing to some — that they had trouble grokking how to use autopkg to build packages “from scratch”, using files and scripts on the local disk.\n\nSo I created a GitHub repo demonstrating how to use autopkg in this manner. It’s here: https://github.com/gregneagle/autopkg-packaging-demo\n\nmunkipkg comes with three demo package projects. Two of the packages install files, the third is a “payload-free” package that simply runs a script when installed. The autopkg-packaging-demo duplicates these packages, but uses autopkg to build them instead of munkipkg.\n\n(One could also imagine building these packages using either tool: the payload and scripts directories would be the same — in other words, you could have both a build-info.plist for munkipkg and a recipe for autopkg in the same package project directory.)\n\nAssuming you have autopkg installed, you can `git clone` the repo, or download and expand the zip file, and run the autopkg recipes within.\n\nI hope this clears up some confusion, and sparks some new ideas!\n\nhttps://github.com/munki/munki-pkg\n\nmunkipkg is a simple tool for building packages in a consistent, repeatable manner from source files and scripts in a project directory.\n\nFiles, scripts, and metadata are stored in a way that is easy to track and manage using a version control system like git.\n\nAnother tool that solves a similar problem is Joe Block’s The Luggage (https://github.com/unixorn/luggage). If you are happily using The Luggage, you can probably safely ignore this tool.\n\nThough this tool may eventually be added to the set of tools installed with the Munki command-line tools, it’s not currently tied to Munki and can be run completely standalone.\n\nLearn more here.\n\nThis post is based on a column I wrote for MacTech magazine in 2012. MacTech used to make older columns available online, but they haven’t done that for the past several years for some reason.\n\nI’m planning to go through my older columns and dust off and republish some that I think are still relevant or useful.\n\nRecently, we built a command-line tool using Python and the PyObjC bridge to control display mirroring.\n\nPyObjC supports a lot of OS X frameworks “out-of-the-box”, and accessing them from Python can be as simple as:\n\ninclude CoreFoundation\n\nBut what if the problem you want to solve requires a framework that isn’t included with the PyObjC bindings? In turns out that you can create your own bindings. In this post we’ll explore this aspect of working with Python and OS X frameworks.\n\nOUR SAMPLE PROBLEM\n\nIn my organization, we sometimes have a need to set displays to a certain ColorSync profile. The ColorSync profile to use for a given display is a per-user preference, so if you need to set it for all users of a machine, you can’t just manually set it while logged in as one user and call it good.\n\nIf you are managing display profiles for a group of machines, or a conference room machine that has network logins, you need a way to manage display profiles for all users. Using MCX or doing some defaults scripting might come to mind. Let’s look at that possibility.\n\nContinue reading “Accessing More Frameworks with Python” →\n\nThis post is based on a column I wrote for MacTech magazine in 2012. MacTech used to make older columns available online, but they haven’t done that for the past several years for some reason.\n\nI’m planning to go through my older columns and dust off and republish some that I think are still relevant or useful.\n\nCocoa-Python, also referred to as PyObjC, is a set of Python modules and glue code that allow Python programmers to access many of Apple’s Cocoa frameworks. This allows you to do many things from Python scripting that might otherwise require compiling code in C/Objective-C. To access the Cocoa frameworks, you import them by name, just as you might import a regular Python module.\n\nA quick example: the CoreFoundation framework contains methods to work with user preferences, a bit like the /usr/bin/defaults tool. We can use the CFPreferencesCopyAppValue function in Python simply by importing CoreFoundation, and then calling it like we would a function from a “regular” Python module:\n\n#!/usr/bin/python import CoreFoundation print CoreFoundation.CFPreferencesCopyAppValue( \"HomePage\", \"com.apple.Safari\")\n\nIf you run the above code, it will print the current home page you have set in Safari. We’ve successfully used an OS X framework from Python!\n\nContinue reading “Command-line tools via Python and Cocoa” →"
    }
}