{
    "id": "dbpedia_8585_2",
    "rank": 12,
    "data": {
        "url": "https://python-poetry.org/",
        "read_more_link": "",
        "language": "en",
        "title": "Python dependency management and packaging made easy",
        "top_image": "https://python-poetry.org/images/favicon-origami-32.png",
        "meta_img": "https://python-poetry.org/images/favicon-origami-32.png",
        "images": [
            "https://python-poetry.org/images/logo-origami.svg",
            "https://python-poetry.org/images/logo-origami.svg",
            "https://python-poetry.org/images/logo-origami.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Python dependency management and packaging made easy",
        "meta_lang": "",
        "meta_favicon": "/images/favicon-origami-32.png",
        "meta_site_name": "",
        "canonical_link": "https://python-poetry.org/",
        "text": "Libraries\n\nThis chapter will tell you how to make your library installable through Poetry. Versioning Poetry requires PEP 440-compliant versions for all projects. While Poetry does not enforce any release convention, it used to encourage the use of semantic versioning within the scope of PEP 440 and supports version constraints that are especially suitable for semver. Note As an example, 1.0.0-hotfix.1 is not compatible with PEP 440.\n\nConfiguration\n\nPoetry can be configured via the config command (see more about its usage here) or directly in the config.toml file that will be automatically created when you first run that command.\n\nRepositories\n\nPoetry supports the use of PyPI and private repositories for discovery of packages as well as for publishing your projects. By default, Poetry is configured to use the PyPI repository, for package installation and publishing. So, when you add dependencies to your project, Poetry will assume they are available on PyPI. This represents most cases and will likely be enough for most users. Private Repository Example Installing from private package sources By default, Poetry discovers and installs packages from PyPI..\n\nDependency specification\n\nDependencies for a project can be specified in various forms, which depend on the type of the dependency and on the optional constraints that might be needed for it to be installed. Version constraints Caret requirements Caret requirements allow SemVer compatible updates to a specified version.\n\nPlugins\n\nPoetry supports using and building plugins if you wish to alter or expand Poetryâ€™s functionality with your own. For example if your environment poses special requirements on the behaviour of Poetry which do not apply to the majority of its users or if you wish to accomplish something with Poetry in a way that is not desired by most users. In these cases you could consider creating a plugin to handle your specific logic..\n\nContributing to Poetry\n\nFirst off, thanks for taking the time to contribute! The following is a set of guidelines for contributing to Poetry on GitHub.\n\nFAQ\n\nWhy is the dependency resolution process slow? While the dependency resolver at the heart of Poetry is highly optimized and should be fast enough for most cases, with certain sets of dependencies it can take time to find a valid solution. This is due to the fact that not all libraries on PyPI have properly declared their metadata and, as such, they are not available via the PyPI JSON API.."
    }
}