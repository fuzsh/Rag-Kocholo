{
    "id": "dbpedia_8585_2",
    "rank": 27,
    "data": {
        "url": "https://www.kali.org/tools/what-is-python/",
        "read_more_link": "",
        "language": "en",
        "title": "Kali Linux Tools",
        "top_image": "https://www.kali.org/images/kali-logo.svg",
        "meta_img": "https://www.kali.org/images/kali-logo.svg",
        "images": [
            "https://www.kali.org/images/kali-tools-icon-missing.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "kali",
            "linux",
            "kalilinux",
            "Penetration",
            "Testing",
            "Penetration Testing",
            "Distribution",
            "Advanced"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-23T00:00:00+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.kali.org/images/favicon.png",
        "meta_site_name": "Kali Linux",
        "canonical_link": "https://www.kali.org/tools/what-is-python/",
        "text": "python-dev-is-python3\n\nStarting with the Debian 11 (bullseye) and Ubuntu 20.04 LTS (focal) releases, all python packages use explicit python3 or python2 interpreter and do not use unversioned /usr/bin/python-config at all. Some third-party code is now predominantly python3 based, yet may use /usr/bin/python-config.\n\nThis is a convenience package which ships a symlink to point /usr/bin/python-config script at the current default python3. It may improve compatibility with other modern systems, whilst breaking some obsolete or 3rd-party software.\n\nNo packages may declare dependencies on this package.\n\nInstalled size: 13 KB\n\nHow to install: sudo apt install python-dev-is-python3\n\nDependencies:\n\npython-is-python3\n\npython3-dev\n\npdb\n\nThe Python debugger\n\nroot@kali:~# pdb -h usage: pdb.py [-c command] ... [-m module | pyfile] [arg] ... Debug the Python program given by pyfile. Alternatively, an executable module or package to debug can be specified using the -m switch. Initial commands are read from .pdbrc files in your home directory and in the current directory, if they exist. Commands supplied with -c are executed after commands from .pdbrc files. To let the script run until an exception occurs, use \"-c continue\". To let the script run up to a given line X in the debugged file, use \"-c 'until X'\".\n\npython-config\n\nOutput build options for python C/C++ extensions or embedding\n\nroot@kali:~# python-config --help Usage: /usr/bin/python-config --prefix|--exec-prefix|--includes|--libs|--cflags|--ldflags|--extension-suffix|--help|--abiflags|--configdir|--embed\n\npython-is-python3\n\nStarting with the Debian 11 (bullseye) and Ubuntu 20.04 LTS (focal) releases, all python packages use explicit python3 or python2 interpreter and do not use unversioned /usr/bin/python at all. Some third-party code is now predominantly python3 based, yet may use /usr/bin/python.\n\nThis is a convenience package which ships a symlink to point the /usr/bin/python interpreter at the current default python3. It may improve compatibility with other modern systems, whilst breaking some obsolete or 3rd-party software.\n\nNo packages may declare dependencies on this package.\n\nInstalled size: 15 KB\n\nHow to install: sudo apt install python-is-python3\n\nDependencies:\n\npython3\n\npydoc\n\nThe Python documentation tool\n\nroot@kali:~# pydoc -h pydoc - the Python documentation tool pydoc <name> ... Show text documentation on something. <name> may be the name of a Python keyword, topic, function, module, or package, or a dotted reference to a class or function within a module or module in a package. If <name> contains a '/', it is used as the path to a Python source file to document. If name is 'keywords', 'topics', or 'modules', a listing of these things is displayed. pydoc -k <keyword> Search for a keyword in the synopsis lines of all available modules. pydoc -n <hostname> Start an HTTP server with the given hostname (default: localhost). pydoc -p <port> Start an HTTP server on the given port on the local machine. Port number 0 can be used to get an arbitrary unused port. pydoc -b Start an HTTP server on an arbitrary unused port and open a web browser to interactively browse documentation. This option can be used in combination with -n and/or -p. pydoc -w <name> ... Write out the HTML documentation for a module to a file in the current directory. If <name> contains a '/', it is treated as a filename; if it names a directory, documentation is written for all the contents.\n\npython\n\nAn interpreted, interactive, object-oriented programming language"
    }
}