{
    "id": "dbpedia_8585_0",
    "rank": 11,
    "data": {
        "url": "https://managingosx.wordpress.com/2015/07/30/using-autopkg-for-general-purpose-packaging/",
        "read_more_link": "",
        "language": "en",
        "title": "Using autopkg for “general purpose” packaging",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://1.gravatar.com/avatar/dfd8aecb09520679ecbb7faaf0a85350394c501ea61961477c996fe4fd55d308?s=50&d=identicon&r=G",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-07-30T00:00:00",
        "summary": "",
        "meta_description": "A few days ago I made a simple tool for building packages available: munkipkg. https://github.com/munki/munki-pkg I got many comments and suggestions for additional features and all sorts of cool additions. Some have even been added to the tool already. But I would like to keep munkipkg a pretty simple, basic tool. The Luggage (https://github.com/unixorn/luggage) has…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Managing OS X",
        "canonical_link": "https://managingosx.wordpress.com/2015/07/30/using-autopkg-for-general-purpose-packaging/",
        "text": "A few days ago I made a simple tool for building packages available: munkipkg.\n\nhttps://github.com/munki/munki-pkg\n\nI got many comments and suggestions for additional features and all sorts of cool additions. Some have even been added to the tool already. But I would like to keep munkipkg a pretty simple, basic tool.\n\nThe Luggage (https://github.com/unixorn/luggage) has been around for a while; if munkipkg is too simple for your needs, please have look at that.\n\nI also suggested to several people that if they had more complex needs than munkipkg could handle, it might make more sense to use autopkg, which supports very complex, customizable workflows.\n\nI could tell by the awkward silence that my suggestion was confusing to some — that they had trouble grokking how to use autopkg to build packages “from scratch”, using files and scripts on the local disk.\n\nSo I created a GitHub repo demonstrating how to use autopkg in this manner. It’s here: https://github.com/gregneagle/autopkg-packaging-demo\n\nmunkipkg comes with three demo package projects. Two of the packages install files, the third is a “payload-free” package that simply runs a script when installed. The autopkg-packaging-demo duplicates these packages, but uses autopkg to build them instead of munkipkg.\n\n(One could also imagine building these packages using either tool: the payload and scripts directories would be the same — in other words, you could have both a build-info.plist for munkipkg and a recipe for autopkg in the same package project directory.)\n\nAssuming you have autopkg installed, you can `git clone` the repo, or download and expand the zip file, and run the autopkg recipes within.\n\nI hope this clears up some confusion, and sparks some new ideas!"
    }
}