{
    "id": "dbpedia_8585_1",
    "rank": 12,
    "data": {
        "url": "https://docs.veracode.com/r/About_auto_packaging",
        "read_more_link": "",
        "language": "en",
        "title": "About auto-packaging",
        "top_image": "https://docs.veracode.com/img/veracode-favicon.png",
        "meta_img": "https://docs.veracode.com/img/veracode-favicon.png",
        "images": [
            "https://docs.veracode.com/img/Veracode_Docs_Logo_Light_Mode.svg",
            "https://docs.veracode.com/img/Veracode_Docs_Logo_Dark_Mode.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-08T19:40:14+00:00",
        "summary": "",
        "meta_description": "Veracode auto-packaging automates the process of packaging your projects for Static Analysis and Software Composition Analysis (SCA) upload and scan. By automating packaging, you can reduce the burden on your teams to correctly package projects manually, while also ensuring more accurate and consistent scan results.",
        "meta_lang": "en",
        "meta_favicon": "/img/veracode-favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://docs.veracode.com/r/About_auto_packaging",
        "text": "Veracode auto-packaging automates the process of packaging your projects for Static Analysis and Software Composition Analysis (SCA) upload and scan. By automating packaging, you can reduce the burden on your teams to correctly package projects manually, while also ensuring more accurate and consistent scan results.\n\nSaves time and effort, compared to manual packaging, by eliminating manual steps, such as gathering files and dependencies, configuring build settings, and packaging artifacts.\n\nEnsures a consistent build process across different environments and platforms. This reduces the risk of discrepancies or errors that can occur when developers manually change the build configurations or there are variations across the configurations.\n\nReduces human errors that can occur when developers package projects manually. This improves the accuracy and reliability of the generated artifacts, which ensures that the Static Analysis results are accurate.\n\nEnables scalability by facilitating the rapid and efficient generation of artifacts for analysis across multiple code repositories, projects, or teams. This scalability is essential for organizations managing large and complex codebases.\n\nReduces the time and resources developers spend securing their code, which allows them to focus on writing new code, implementing features, or addressing critical issues. Developers can increase their productivity and accelerate the time-to-market for software products and updates.\n\nThe auto-packager runs on your repository to package your projects into artifacts (archive files) that you can upload to the Veracode Platform. To correctly package a project for Static Analysis or SCA upload and scan, the auto-packager automatically detects the required components and configurations for each supported language.\n\nThe auto-packager packages your projects into archive files, such as ZIP, JAR, WAR or EAR, called artifacts. During the packaging process, the auto-packager might create multiple artifacts that it includes in the final artifacts. For example, multiple DLL files inside the final ZIP file. The final artifacts are the complete, packaged archive files that you can upload to Veracode and scan separately.\n\nThe following table lists examples of the filename format of the final artifacts for each supported language.\n\nArtifact languageLanguage tagLanguage suffix tagExample filename.NET assembliesdotnetNoneveracode-auto-pack-Web-dotnet.zip.NET with JavaScriptdotnetjsveracode-auto-pack-Web-dotnet-js.zipAndroidNoneNoneThe gradle.build file defines the filenames of Java artifacts.COBOLcobolNoneveracode-auto-pack-EnterpriseCOBOLv6.3-cobol.zipC/C++ Linuxc_cppNoneveracode-auto-pack-CppProjectLibsAndExecutables-c_cpp.zipC/C++ WindowsmsvcNoneveracode-auto-pack-$(SolutionName)-msvc.zipDart and FlutterNoneNoneThe project configuration for Flutter Android or Xcode defines the filenames.GogoNoneveracode-auto-pack-evil-app-go.zipiOS with Xarchiveiosxcarchiveveracode-auto-pack-duckduckgo-ios-xcarchive.zipiOS with CocoaPodsiospodfileveracode-auto-pack-signal-ios-podfile.zipJava with GradleNoneNoneDefined by your gradle.build file.Java with MavenNoneNoneDefined by your pom.xml file.JavaScriptjsNoneveracode-auto-pack-NodeGoat-js.zipKotlinNoneNoneThe filenames of Java artifacts are defined by your gradle.build file.PerlperlNoneveracode-auto-pack-bugzilla-perl.zipPHPphpNoneveracode-auto-pack-captainhook-php.zipPythonpythonNoneveracode-auto-pack-dvsa-python.zipReact NativejsNoneveracode-auto-pack-convene-js.zipRubyrubyNoneveracode-auto-pack-railsgoat-ruby.zipScalaNoneNoneThe filenames of Java artifacts are defined by your SBT build properties.\n\nAuto-packaging is integrated with the following products:\n\nVeracode CLI to integrate auto-packaging in your development environment.\n\nVeracode GitHub Workflow Integration to automate repo scanning with GitHub Actions. The auto-packager only supports Java, JavaScript, Python, Go, Scala, Kotlin, React Native, and Android repositories.\n\nVeracode Azure DevOps Workflow Integration to automate repo scanning using user's pipelines. The auto-packager supports Java, .NET, JavaScript, Python, Go, Kotlin, and React Native projects.\n\nVeracode Scan for JetBrains to auto-package applications, scan, and remediate findings in JetBrains IDEs.\n\nVeracode Scan for VS Code to auto-package applications, scan, and remediate findings in VS Code.\n\nYou can integrate the auto-packager with your local build environment or CI/CD. For example, to add auto-packaging to your build pipelines, you could add the CLI command veracode package to your development toolchains or build scripts.\n\nYou might need to install one or more of the following tools in your environment:\n\nA build automation tool that defines build scripts or configurations that specify how to manage dependencies, compile source code, and package code as artifacts.\n\nA dependency management system to effectively handle project dependencies.\n\nA compiler that builds source code into executable code.\n\nIf the auto-packager does not support specific versions, or it relies on a version supported by your packager manager, the Versions column shows Not applicable.\n\nLanguageVersionsPackage managers.NET.NET 6, 7, or 8.\n\n.NET Framework 4.6 - 4.8.\n\nNot supported: MAUIAllAndroidA JDK version that you have tested to build your project.GradleCOBOLCOBOL-74, COBOL-85, COBOL-2002Not ApplicableC/C++ LinuxCentOS and Red Hat Enterprise 5-9, openSUSE 10-15Not ApplicableC/C++ WindowsC/C++ (32-bit/64-bit)Not ApplicableDart and FlutterDart 3.3 and earlier / Flutter 3.19 and earlierPubGo1.14 - 1.22Go ModulesiOSNot applicableAllJava (select from the Package managers column)A JDK version that you have tested to build your project.Gradle, MavenJavaScript and TypeScriptNot applicableNPM, YarnKotlinA JDK version that you have tested to build your project.Gradle, MavenPerl5.xNot ApplicablePHPNot applicableComposerPythonNot applicablePip, Pipenv, setuptools, virtualenvReact NativeNot applicableNPM, Yarn, BowerRuby on RailsRuby 2.4 or greaterBundlerScalaA JDK version that you have tested to build your project.Gradle, Maven, sbt\n\nUnder each supported language, the Veracode CLI commands and output examples demonstrate the packaging process when you run the veracode package command. You can use the auto-packager with various integrations, but the CLI output examples help you visualize the packaging process. All examples assume the location of the CLI executable is in your PATH. You might see different output in your environment.\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nA supported version of .NET.\n\nPATH environment variable that points to the dotnet or msbuild command.\n\nYour projects must:\n\nContain at least one syntactically correct .csproj file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nRecursively searches your repo for all .csproj submodules.\n\nTo publish an SDK-style project, runs the following command:\n\ndotnet publish -c Debug -p:UseAppHost=false -p:SatelliteResourceLanguages='en' -p:WasmEnableWebcil=false -p:BlazorEnableCompression=false\n\nTo publish a .NET Framework project, runs a command similar to the following:\n\nmsbuild Project.csproj /p:TargetFrameworkVersion=v4.5.2 /p:WebPublishMethod=\"FileSystem\" /p:PublishProvider=FileSystem /p:LastUsedBuildConfiguration=Debug /p:LastUsedPlatform=Any CPU /p:SiteUrlToLaunchAfterPublish=false /p:LaunchSiteAfterPublish=false /p:ExcludeApp_Data=true /p:PrecompileBeforePublish=true /p:DeleteExistingFiles=true /p:EnableUpdateable=false /p:DebugSymbols=true /p:WDPMergeOption=\"CreateSeparateAssembly\" /p:UseFixedNames=true /p:UseMerge=false /p:DeployOnBuild=true\n\nFilters out any test projects.\n\nPackages the published project and saves the artifacts of your packaged project in the specified --output location.\n\nveracode package --source path/to/project/bobs-used-bookstore-sample --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nPackaging DOTNET artifacts for DotNetPackager project 'Bookstore.Data'. Publish successful.\n\nPackaging DOTNET artifacts for DotNetPackager project 'Bookstore.Web'. Publish successful.\n\nProject Bookstore.Web zipped and saved to: path\\to\\verascan\\veracode-auto-pack-Bookstore.Web-dotnet.zip\n\nDotNet project Bookstore.Web JavaScript packaged to: path\\to\\verascan\\veracode-auto-pack-Bookstore.Web-dotnet-js.zip\n\nPackaging DOTNET artifacts for DotNetPackager project 'Bookstore.Cdk'. Publish successful.\n\nProject Bookstore.Cdk zipped and saved to: path\\to\\verascan\\veracode-auto-pack-Bookstore.Cdk-dotnet.zip\n\nPackaging DOTNET artifacts for DotNetPackager project 'Bookstore.Domain'. Publish successful.\n\nSuccessfully created 3 artifact(s).\n\nCreated DotNet artifacts for DotNetPackager project.\n\nTotal time taken to complete command: 11.656s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nCorrect Java or Kotlin version present in the environment for packaging the application.\n\nCorrect Android SDK version present in the environment for packaging the application.\n\nOther dependencies installed based on the repository dependency.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build a Gradle project, runs the command gradlew clean build -x test\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/sunflower --output verascan --trust\n\nPackaging code for project sunflowe. Please wait; this may take a while...\n\nVerifying source project language ...\n\nCopying Java artifacts for GradlePackager project.\n\nCopied artifact: path/to/verascan/app-benchmark.apk.\n\nCopied artifact: path/to/verascan/app-debug.apk.\n\nCopied artifact: path/to/verascan/macrobenchmark-benchmark.apk.\n\nSuccessfully created 3 artifact(s).\n\nCreated Java artifacts for GradlePackager project.\n\nTotal time taken to complete command: 1m35.117s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour COBOL programs must be in UTF-8 encoded files with one of the following extensions: .cob, .cbl, .cobol, or .pco.\n\nYour COBOL copybooks must be in UTF-8 encoded .cpy files. Veracode recommends you include all copybooks to generate the best scan results.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nFinds all the files matching the required extensions and packages them in a ZIP archive (artifact).\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/EnterpriseCOBOLv6.3 --output verascan --trust\n\nPackaging code for project EnterpriseCOBOLv6.3. Please wait; this may take a while...\n\nVerifying source project language ...\n\n[GenericPackagerCobol] Packaging succeeded for the path path/to/project/EnterpriseCOBOLv6.3\n\nSuccessfully created 1 artifact(s).\n\nCreated Cobol artifacts for GenericPackagerCobol project.\n\nTotal time taken to complete command: 3.802s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nAll project files and libraries have been compiled with debug information defined in the packaging guidelines.\n\nAuto-packaging must run on supported Linux OS architecture and distribution.\n\nFor efficient packaging, all binaries and libraries have been collected in a single folder.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nDetects a Veracode-supported Linux OS architecture. If it does not detect a supported architecture, the auto-packager throws an error and exits packaging.\n\nDetects a Veracode-supported Linux OS distribution.\n\nSearches the prebuilt binary directory to find scan-supported binary files, then archives them in a single artifact.\n\nveracode package --source path/to/project/CppProjectLibsAndExecutables --output verascan --trust\n\nPackaging code for project CppProjectLibsAndExecutables. Please wait; this may take a while...\n\nVerifying source project language ...\n\nC/CPP project CppProjectLibsAndExecutables packaged to: /path/to/verascan/veracode-auto-pack-CppProjectLibsAndExecutables-c_cpp.zip\n\nSuccessfully created 1 artifact(s).\n\nCreated CPlusPlus artifacts for GenericPackagerCPP project.\n\nTotal time taken to complete command: 37.257s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nThe project must contain at least one .sln file that is configured to build at least one supported C++ project. A supported C++ project is defined by a .vcxproj file where the following are true:\n\nDefines a supported project configuration:\n\nTargets a supported platform (x64 or Win32)\n\nBuilds a supported binary (ConfigurationType is Application or DynamicLibrary)\n\nIs not a test Native Unit Test project or Google Unit Test project.\n\nmsbuild command is available in the environment.\n\nCode can compile without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nSearches the project directories to find supported .sln files. The search stops at each directory level where it finds supported files.\n\nFor each .sln file found:\n\nDetermines the solution configuration to use to build the top-level projects. If available, it uses the first solution configuration listed in the solution that has a supported project platform for a top-level C++ project, configured as a debug build.\n\nDetermines the supported top-level C++ projects for that solution configuration. A top-level C++ project is a C++ project that is not a dependency of any other project configured to build for that solution configuration.\n\nBuilds each supported top-level C++ project using compiler and linker settings required for Veracode to analyze Windows C/C++ applications:\n\n<ItemDefinitionGroup>\n\n<ClCompile>\n\n<DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n\n<Optimization>Disabled</Optimization>\n\n<BasicRuntimeChecks>Default</BasicRuntimeChecks>\n\n<BufferSecurityCheck>false</BufferSecurityCheck>\n\n</ClCompile>\n\n<Link>\n\n<LinkIncremental>false</LinkIncremental>\n\n<GenerateDebugInformation>true</GenerateDebugInformation>\n\n<ProgramDatabaseFile>$(OutDir)$(TargetName).pdb</ProgramDatabaseFile>\n\n</Link>\n\n</ItemDefinitionGroup>\n\nCreates an archive for each solution named veracode-auto-pack-$(SolutionName)-msvc.zip. Each archive contains a $(ProjectName) directory with all .exe, .dll, and .pdb build artifacts for each top-level project build target of the solution.\n\nveracode package --source path/to/project/example-cpp-windows --output verascan --trust\n\nPackaging code for project example-cpp-windows. Please wait; this may take a while...\n\nVerifying source project language ...\n\nPackaging Windows C/C++ artifacts for WinCppPackager publish path 'C:\\Users\\...\\AppData\\Local\\Temp\\2766238912731991934'. MSBuild commands successfully completed.\n\nWindows solution WS_AllSource packaged to: path\\to\\verascan\\veracode-auto-pack-WS_AllSource-msvc.zip\n\nPackaging Windows C/C++ artifacts for WinCppPackager publish path 'C:\\Users\\...\\AppData\\Local\\Temp\\7662002083651398436'. MSBuild commands successfully completed.\n\nWindows solution allPepPCIF packaged to: path\\to\\verascan\\veracode-auto-pack-allPepPCIF-msvc.zip\n\nSuccessfully created 2 artifact(s).\n\nCreated Windows C/C++ artifacts for WinCppPackager project.\n\nTotal time taken to complete command: 3m38.473s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nTo ensure that Flutter installs successfully and validates all platform tools, successfully run flutter doctor.\n\nTo generate an iOS Archive file, the project must be able to run the command: flutter build ipa --debug\n\nTo generate an Android APK file, the project must be able to run the command: flutter build apk --debug\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nGathers APK and IPA files.\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/flutter-wonderous-app --output verascan --trust\n\nPackaging code for project flutter-wonderous-app. Please wait; this may take a while...\n\nVerifying source project language ...\n\nCopying artifacts for Dart Flutter for FlutterPackager project.\n\nCopied artifact: path/to/verascan/app-debug.apk.\n\nSuccessfully created 1 artifact(s).\n\nCreated Dart artifacts for FlutterPackager project.\n\nTotal time taken to complete command: 54.731s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have a supported version of Go.\n\nYour projects must:\n\nSupport Go Modules.\n\nContain a go.sum file and a go.mod file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build and package a project, including the source code and the vendor folder, runs the command go mod vendor.\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/sftpgo --output verascan --trust\n\nPlease ensure your project builds successfully without any errors.\n\nPackaging code for project sftpgo. Please wait; this may take a while...\n\nVerifying source project language ...\n\nPackaging GO artifacts for GoModulesPackager project 'sftpgo'. go mod vendor successful.\n\nGo project sftpgo packaged to: path/to/verascan/veracode-auto-pack-sftpgo-go.zip\n\nSuccessfully created 1 artifact(s).\n\nCreated GoLang artifacts for GoModulesPackager project.\n\nTotal time taken to complete command: 15.776s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nXcode and the xcodebuild command-line tool installed.\n\ngen-ir installed. For example:\n\n# Add the brew tap to your local machine\n\nbrew tap veracode/tap\n\n# Install the tool\n\nbrew install gen-ir\n\npod installed, if your projects use CocoaPods or third party tools.\n\nYour projects must compile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nChecks that the podfile or podfile.lock files are present.\n\nRuns the command pod install.\n\nChecks that the .xcworkspace or .xcodeproj files are present.\n\nTo build and package the project, runs:\n\nxcodebuild clean archive -PROJECT/WORKSPACE filePath -scheme SRCCLR_IOS_SCHEME -destination SRCCLR_IOS_DESTINATION -configuration SRCCLR_IOS_CONFIGURATION -archivePath projectName.xcarchive DEBUG_INFORMATION_FORMAT=dwarf-with-dsym ENABLE_BITCODE=NO\n\nThe SRCCLR values are optional environment variables you can use to customize the xcodebuild archive command.\n\nRuns gen-ir on the artifact of your packaged project and the log files.\n\nSaves the artifact in the specified --output location.\n\nveracode package --source https://github.com/signalapp/Signal-iOS --type repo --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nPackaging iOS artifacts for IOSPackager project 'MyProject'.\n\niOS Project MyProject zipped and saved to: path/to/verascan/veracode-auto-pack-MyProject-ios-xcarchive.zip\n\nSuccessfully created 1 artifact(s).\n\nCreated IOS artifacts for IOSPackager project.\n\nTotal time taken to complete command: 9.001s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nA JDK version that you tested to successfully compile your application.\n\nAccess to a gradlew command that points to the correct JAVA_HOME directory. If gradlew is not available, ensure the correct Gradle version is installed.\n\nYour projects must:\n\nHave the correct build.gradle file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build the Gradle project and package it as a JAR file, runs the command gradlew clean build -x test.\n\nCopies the artifact of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/example-java-gradle --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nCopying Java artifacts for GradlePackager project.\n\nCopied artifact: path/to/verascan/example-java-gradle-1.0-SNAPSHOT.jar.\n\nSuccessfully created 1 artifact(s).\n\nCreated Java artifacts for GradlePackager project.\n\nTotal time taken to complete command: 7.174s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nA JDK version that you tested to successfully compile your application.\n\nAccess to a mvn command that points to the correct JAVA_HOME directory.\n\nYour projects must:\n\nHave the correct pom.xml file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build and package the Maven project, runs the command mvn clean package.\n\nCopies the artifact, such as JAR, WAR, EAR, of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/example-java-maven --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nCopying Java artifacts for Maven project.\n\nCopied artifact: path/to/verascan/example-java-maven-1.0-SNAPSHOT.jar.\n\nSuccessfully created 1 artifact(s).\n\nCreated Java artifacts for Maven project.\n\nTotal time taken to complete command: 6.799s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nThe NPM or Yarn package manager installed.\n\nThe correct Node, NPM, or Yarn version to package the project.\n\nYour projects must:\n\nBe able to resolve all dependencies with commands npm install or yarn install.\n\nHave the correct package.json file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build and package the project, runs one of the following commands:\n\nFor NPM, runs the command npm install.\n\nFor Yarn, runs the command yarn install.\n\nCopies the artifact of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/example-javascript --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nPackaging Javascript artifacts for NPM project.\n\nProject example-javascript packaged to path/to/veracsan/veracode-auto-pack-example-javascript-js.zip.\n\nSuccessfully created 1 artifact(s).\n\nCreated Javascript artifacts for NPM project.\n\nTotal time taken to complete command: 3.296s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nThe correct Kotlin version for your projects.\n\nThe Maven or Gradle package manager installed.\n\nA Java version that your packager manager requires.\n\nYour projects must:\n\nHave the correct pom.xml, build.gradle, or build.gradle.kts file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the steps shown in the following example command output.\n\nVerifies that your project language is supported.\n\nUses Gradle to builds and packages the project.\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/kotlin-server-side-sample/gradle --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nCopying Java artifacts for GradlePackager project.\n\nCopied artifact: path/to/verascan/demo-0.0.1-SNAPSHOT-plain.jar.\n\nCopied artifact: path/to/verascan/demo-0.0.1-SNAPSHOT.jar.\n\nSuccessfully created 2 artifact(s).\n\nCreated Java artifacts for GradlePackager project.\n\nTotal time taken to complete command: 8.632s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour Perl project must be a version 5.x\n\nYour project must contain at least one file with the following extensions: of .pl, .pm, .plx, .pl5, or .cgi\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nFinds all the files matching the required extensions and packages them in a ZIP archive (artifact).\n\nCopies the artifacts of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/bugzilla --output verascan --trust\n\nPackaging code for project bugzilla. Please wait; this may take a while...\n\nVerifying source project language ...\n\nPackaging code for project bugzilla. Please wait; this may take a while...\n\nVerifying source project language ...\n\n[GenericPackagerPerl] Packaging succeeded for the path path/to/project/bugzilla.\n\nSuccessfully created 1 artifact(s).\n\nCreated Perl artifacts for GenericPackagerPerl project.\n\nTotal time taken to complete command: 9.965s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nCorrect PHP version for your projects.\n\nComposer dependency manager installed.\n\nYour projects must:\n\nHave the correct PHP composer.json file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo build and package the project source code and lock file with Composer, runs the command composer install.\n\nSaves the artifacts of your packaged project in the specified --output location.\n\nveracode package --source path/to/project/example-php --output verascan --trust\n\nPackager initiated...\n\nValidating output path ...\n\nPackaging PHP artifacts for Composer project.\n\nProject captainhook zipped and saved to path/to/verascan/veracode-auto-pack-captainhook-php.zip.\n\nPackaging PHP artifacts for Composer project.\n\nProject template-integration zipped and saved to path/to/verascan/veracode-auto-pack-template-integration-php.zip.\n\nSuccessfully created 2 artifact(s).\n\nCreated PHP artifacts for Composer project.\n\nTotal time taken to complete command: 3.62s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nThe correct pip and Python or pyenv version for packaging your project are installed.\n\nA package manager configuration file with the required settings to resolve all dependencies.\n\nYour projects must compile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo resolve all third party dependencies and generate the lock file, PIP install, runs the command pip install -r requirements.txt.\n\nPackages the project source code, lock file, and vendor folder.\n\nSaves the artifact of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/example-python --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nPackaging Python artifacts for PIP project.\n\nProject example-python zipped and saved to path/to/verascan/veracode-auto-pack-example-python-python.zip.\n\nSuccessfully created 1 artifact(s).\n\nCreated Python artifacts for PIP project.\n\nTotal time taken to complete command: 14.359s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nCorrect version of Node, NPM, or Yarn for your projects.\n\nNPM or Yarn installation resolves all dependencies.\n\nHave the correct package.json file.\n\nPackage.json file has the React Native version as a dependency.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nFor NPM applications, runs the npm install command.\n\nFor Yarn applications, runs the yarn install command.\n\nFor Expo build, runs the expo start command.\n\nveracode package --source path/to/project/example-javascript-yarn --output verascan --trust\n\nPackaging code for project example-javascript-yarn. Please wait; this may take a while...\n\nVerifying source project language ...\n\nPackaging Javascript artifacts for Yarn project.\n\nJavaScript project example-javascript-yarn packaged to: path/to/verascan/veracode-auto-pack-example-javascript-yarn-js.zip\n\nSuccessfully created 1 artifact(s).\n\nCreated Javascript artifacts for Yarn project.\n\nTotal time taken to complete command: 1m9.13s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nThe Bundler package manager installed with the correct Ruby version.\n\nThe Veracode packager gemfile installed. This gemfile handles pre-processing of Rails projects for Static Analysis.\n\nThe ability to run the command bundle install\n\nYour projects must compile successfully without errors.\n\nOptionally, to test your configured environment, run the command rails server.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nTo configure the vendor path, runs the command bundle config --local path vendor.\n\nRuns the command bundle install without development and test: bundle install --without development test.\n\nTo check for the Rails installation, runs the command bundle info rails. If Rails is not installed, the auto-packager assumes it is not a Rails project and exits.\n\nTo install the Veracode packager gem, runs the command bundle add veracode.\n\nTo package your project using the Veracode packager gem, runs the command bundle exec veracode.\n\nSaves the artifact of your packaged project to the specified --output location.\n\nveracode package --source path/to/project/rails --output verascan --trust\n\nPackager initialized...\n\nVerifying source project language ...\n\nPackaging Ruby artifacts for RubyPackager project 'veracode-rails-20240321225855.zip'.\n\nArtifactPath: /rails/tmp/veracode-rails-20240321225855.zip\n\nValidatedSource: /rails\n\nValidatedOutput: /rails/verascan\n\nProject name: rails\n\n44824469 bytes written to destination file. Path: /rails/verascan/rails.zip\n\ntemporary zip file deleted. Path: /rails/tmp/veracode-rails-20240321225855.zip\n\nSuccessfully created 1 artifact(s).\n\nCreated Ruby artifacts for RubyPackager project.\n\nTotal time taken to complete command: 1m27.428s\n\nBefore you can run the auto-packager, you must meet the following requirements:\n\nYour environment must have:\n\nA JDK version that you have tested to successfully package your application.\n\nThe Maven, Gradle, or sbt package manager installed with the correct Java version.\n\nYour projects must:\n\nHave the correct pom.xml, build.gradle, or build.sbt file.\n\nCompile successfully without errors.\n\nThe auto-packager completes the following steps, as shown in the example command output.\n\nRuns the sbt assembly command sbt clean assembly. This command assists in creating a JAR file with dependencies in non-Spring projects, which improves SCA scanning.\n\nIf sbt assembly fails, runs the sbt package command sbt clean package.\n\nCopies the artifacts of your packaged application to the specified --output location.\n\nveracode package --source path/to/project/packSample/zio-quill --output verascan --trust\n\nPackager initiated...\n\nVerifying source project language ...\n\nCopying Java artifacts for SbtPackager project.\n\nCopied artifact: path/to/verascan/quill-cassandra_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-cassandra-monix_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-cassandra-pekko_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-cassandra-zio_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-codegen_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-codegen-jdbc_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-codegen-tests_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-core_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-doobie_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-engine_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-monix_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-h2_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-mysql_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-oracle_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-postgres_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-sqlite_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-test-sqlserver_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-jdbc-zio_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-monix_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-orientdb_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-spark_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-sql_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-sql-test_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-util_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill-zio_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/quill_2.13-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nCopied artifact: path/to/verascan/zio-quill-docs_2.12-4.8.2+3-d2965801-SNAPSHOT.jar.\n\nSuccessfully created 28 artifact(s).\n\nCreated Java artifacts for SbtPackager project.\n\nTotal time taken to complete command: 45.428s"
    }
}