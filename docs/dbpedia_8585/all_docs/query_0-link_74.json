{
    "id": "dbpedia_8585_0",
    "rank": 74,
    "data": {
        "url": "https://breardon.home.blog/author/bartreardon9494/",
        "read_more_link": "",
        "language": "en",
        "title": "Bart Reardon",
        "top_image": "https://secure.gravatar.com/avatar/be643e615764f00dae9d2bf43ddec828?s=200&d=identicon&r=g",
        "meta_img": "https://secure.gravatar.com/avatar/be643e615764f00dae9d2bf43ddec828?s=200&d=identicon&r=g",
        "images": [
            "https://breardon.home.blog/wp-content/uploads/2023/03/outset.png_128x128402x.png?w=256",
            "https://breardon.home.blog/wp-content/uploads/2023/03/image-7-3-2023-at-9.07-pm.jpg?w=526",
            "https://breardon.home.blog/wp-content/uploads/2022/05/screen-shot-2022-05-19-at-11.24.50-am.png?w=1024",
            "https://user-images.githubusercontent.com/3598965/152978464-1b602a68-da97-431a-8f79-1d899cb4fccb.png",
            "https://breardon.home.blog/wp-content/uploads/2021/11/screen-shot-2021-11-01-at-12.32.39-pm.png?w=1024",
            "https://breardon.home.blog/wp-content/uploads/2021/11/screen-shot-2021-11-01-at-1.21.57-pm.png?w=1024",
            "https://breardon.home.blog/wp-content/uploads/2021/11/screen-shot-2021-11-01-at-12.56.59-pm.png?w=1024",
            "https://breardon.home.blog/wp-content/uploads/2021/09/screen-shot-2021-09-21-at-10.44.56-pm.png?w=862",
            "https://breardon.home.blog/wp-content/uploads/2021/09/screen-shot-2021-09-21-at-11.21.15-pm.png?w=1024",
            "https://breardon.home.blog/wp-content/uploads/2021/03/image.png?w=720",
            "https://breardon.home.blog/wp-content/uploads/2021/03/image-1.png?w=720",
            "https://breardon.home.blog/wp-content/uploads/2021/01/screen-shot-2021-01-20-at-1.40.11-pm.png?w=555",
            "https://breardon.home.blog/wp-content/uploads/2021/01/screen-shot-2021-01-20-at-8.46.12-pm.png?w=956",
            "https://breardon.home.blog/wp-content/uploads/2021/01/screen-shot-2021-01-20-at-8.46.52-pm.png?w=935",
            "https://breardon.home.blog/wp-content/uploads/2020/05/screenshot-from-2020-05-04-22-08-38.png?w=786",
            "https://breardon.home.blog/wp-content/uploads/2020/05/screenshot-from-2020-05-04-22-22-55-1.png?w=786",
            "https://breardon.home.blog/wp-content/uploads/2019/10/image.png?w=361",
            "https://breardon.home.blog/wp-content/uploads/2019/10/screen-shot-2019-10-25-at-4.56.22-pm.png?w=931",
            "https://breardon.home.blog/wp-content/uploads/2019/10/image-2.png?w=197",
            "https://breardon.home.blog/wp-content/uploads/2019/10/screen-shot-2019-10-25-at-4.59.34-pm.png?w=1024",
            "https://breardon.home.blog/wp-content/uploads/2019/10/image-4.png?w=411",
            "https://breardon.home.blog/wp-content/uploads/2019/04/cropped-epss.png?w=50",
            "https://breardon.home.blog/wp-content/uploads/2019/04/cropped-epss.png?w=50",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Bart Reardon"
        ],
        "publish_date": "2023-03-07T22:39:36+11:00",
        "summary": "",
        "meta_description": "Read all of the posts by Bart Reardon on Stuff about things",
        "meta_lang": "en",
        "meta_favicon": "https://breardon.home.blog/wp-content/uploads/2019/04/cropped-epss.png?w=32",
        "meta_site_name": "Stuff about things",
        "canonical_link": "http://breardonhome.wordpress.com",
        "text": "This script scripts and installs pkgs at boot and/or login.\n\nJoseph Chilcote 2014\n\nSo says the explanatory comment at the top of version v1.0.0 of outset, a python script written by Joseph Chilcote and released in February 2015 to assist mac admins with running login scripts and package installs. Since then there have been two major releases with v2 solidifying the fundamentals of how the logic works and v3 moving to python 3, anticipating what eventually came to pass in 2022 with the complete removal of python 2 from macOS. The last minor update was released in December 2020.\n\nOutset provides a solution to a problem that many in the mac admin community struggle with, and that is providing a simple scheduler for running boot and login scripts on device, without needing to know exactly how launchd works. Places scripts or packages into one of the processing directories and Outset takes care of running them and how often. It does however come with the dependency of python and with macOS no longer having a default python interpreter installed out of the box, it is up to the admin to install one of the many pythons available resulting in a form of ‚Äúpython roulette‚Äù in order to get things going.\n\nOutset 4 is my attempt at answering two different problems. Firstly making the utility standalone with no required dependencies. The second is to continue to provide admins an easy way to run login and boot scripts and manage how they appear as login items under macOS 13 and newer.\n\nSo In January 2023 I ported the existing outset v3.0.3 to Swift and through the early days of March I‚Äôve been adjusting the code and how things operate and am happy to be at the stage where beta 1 is ready to see the light of day. Along with this is the move (with Joseph‚Äôs blessing) to Mac Admins Open Source, which was announced recently as a community repository supported by the Mac Admins Foundation offering code signing and notarizarion for open source projects used, and developed, by mac admins, for mac admins.\n\nWith the move to swift there are many changes in operation so if you‚Äôre used to outset you may want to read the notes accompanying recent releases and read the wiki to see what‚Äôs changed.\n\nI welcome any constructive feedback or feature requests, or if you are able to, please consider contributing to the project.\n\nYou can reach me on @bartreardon or check out the #outset channel on the macadmins slack. I can also be found on mastodon at https://aus.social/@bartreardon.\n\nüôÇ\n\nThis post is based off a thread in the macadmins slack that it appears no-one has blogged about yet. A heartfelt thanks for those that contributed ideas.\n\nAs admins we are often asked to deploy a variety of agents or system extensions onto the computers and devices we administer. These can make sense and often required, for example an inventory service or to meet some security requirement. But sometimes we‚Äôre asked to deploy software that has conflicts or duplicated functionality with existing agents with little argument to prevent or at least have a discussion about the reasons or purpose. The classic case is being required to install two or more security products, each of which at best overlap in a large percentage of function or at worst, conflict and fight against each other in a battle of dominance over the device, reducing performance, battery life and the user experience.\n\nAs admins, our job is to protect the production environment and user experience of the systems we manage. What follows is a compiled list (in no particular order) of questions and expectations from a number of authors in the macadmin community that could be used the next time some team or higher up wants you to deploy the Next Great Thing‚Ñ¢ they saw on an airport banner ad or product brochure.\n\nConsiderations before deployment\n\nWhat‚Äôs the plan for ensuring that the latest version of this is always available quickly for deployment?\n\nAccess to vendor download sites or location where the latest supported version is available for packaging\n\nCan other agents be removed due to duplicated functionality as a result of installing this?\n\nWho is responsible for testing?\n\nIdeally the owner of the agent should be involved in testing directly new versions on the latest OSes before rollout to the entire fleet.\n\nFor agent related issues, which team is responsible for actioning incidents and requests?\n\nWhat resources are being provided to support the product.\n\nWhat‚Äôs the impact to end user experience with having this installed?\n\nWhat user impact testing has been performed? Has anyone run this for an appropriate amount of time on a daily workstation?\n\nWhat configurations and exceptions have you come up with to ensure that performance sensitive users are not adversely impacted by its installation?\n\nWhat features does this agent bring that we do not already have on our endpoints?\n\nHas testing already been done with this agent in combination with all the other ones we have installed?\n\nWhat was the result of that testing and who was involved?\n\nWho in the requesting team is running macOS, Linux or Windows as their primary desktop and is going to be in the canary group?\n\nWhat compliance requirement are being met by the agent?\n\nProvide documentation\n\nWhat‚Äôs the history of this product when it comes to timely OS compatibility updates?\n\nDoes the vendor respond quickly to OS releases or do they lag? By how long, days months years? To they build and test against beta OS releases?\n\nWhat technical capability does it add that nothing else does?\n\nWhat organisational bottleneck does this attempt to work around?\n\nFull configuration information for Group Policy/MDM profiles will need to be provided so that no manual actions are required on the part of users for installation or updates.\n\nExpectations after deployment\n\nIf this breaks critical workflows during a crucial time, what‚Äôs the process for approval to remove this from devices?\n\nApproval or justification may be sought after agent removal.\n\nWhat‚Äôs the plan for rolling back when this is panicking/crashing machines?\n\nThe team owning this new agent understands that if there is a new OS update and the vendor states that a newer minimum version is required for compatibility for this version of the OS that there is an expectation that this agent (and any associated infrastructure updates) will need to happen in a timely fashion and not be a blocker for rolling out new OS versions?\n\nIt is understood that if the agent prevents installation of a new OS update which has high enough severity CVEs for too long, due to -other- compliance requirements for OS updates in a timely fashion, that this product will be removed until it‚Äôs compatible again with the newer OS version\n\nIt is considered more important that CVEs get patched than having this new agent installed.\n\nIt‚Äôs been 5 months since the last update. Dialog has learned a few more tricks in that time.\n\nAs workflows are capable of getting a bit more complex now, I‚Äôve started a new repository which is going to contain a collection of scripts and is called, unimaginatively enough, Dialog-scripts. The purpose is to provide a collection of workflows that can be freely copied, modified and used as a basis for other workflows, and hopefully serve as a jumping off point for some of the more adventurous things Dialog can do.\n\nOne of the more recent ones lets you send scripted updates to modify content without re-launching. Combined with a list view, this lets you show a list of steps and update with ongoing progress. I‚Äôve used this as a basis for the first entry to the Dialog-scripts repo that acts as a user-friendly visualisation of Scripting OS X‚Äôs awesome Installomator that takes a list of app labels, then steps through them one by one providing feedback as it goes.\n\nFeel free to copy, modify, update, provide feedback or suggestions. There will be more to come üôÇ.\n\nDialog is a feature rich open source utility app written in SwiftUI that is intended as a way to provide user notifications and interaction from shell scripts, similar to cocoadialog or jamfHelper. The latest release can be found on the Dialog GitHub page https://github.com/bartreardon/Dialog and also in the Jamf Marketplace\n\nIf you‚Äôre like me you‚Äôre not a huge fan of writing detailed documentation. While not much can be helped with environment specifics, there is a great selection of free ebooks from Apple that covers most of the hardware, OS and application software.\n\nFor the last couple of years I‚Äôve been making Apple eBooks available on Jamf Self Service and scoping to particular devices, e.g. everyone with a MacBook Pro gets access to the MacBook Pro Essentials book.\n\nIn Jamf Pro, go to to the ‚ÄúeBooks‚Äù section under ‚ÄúContent Management‚Äù, click the ‚Äú+New‚Äù button and search. Choose ‚ÄúeBook available in the iBooks Store‚Äù. You can preview the book in the Books app as well to make sure you have the one you are after.\n\nUseful books that I‚Äôve found (search for these by title or author ‚Äì Results may differ depending on what store you select, but these are whats available in the Australian Apple Books store)\n\nHardware ‚ÄúEssentials‚Äù series\n\nGreat to include for users of that device type, especially if they are moving from one type of device to another or if they are first time Mac users.\n\nMacBook Pro Essentials\n\nMacBook Air Essentials\n\niMac Essentials\n\nMac Pro Essentials\n\nMac Mini Essentials\n\n‚ÄúUser Guide‚Äù series from Apple Inc.\n\nThe User Guide series covers non Mac hardware as well as Applications for each platform and how to use them\n\niPhone\n\niPad\n\nKeynote\n\nPages\n\nNumbers\n\nFinal Cut Pro\n\nApple Inc. ‚Äì Business\n\nThe Employee Starter Guides are a good resource to help new users get up to speed with using Apple devices in an organisational setting. While these can‚Äôt go into detail about a specific environment, they do provide some more context that is only applicable in those environments, such as Automated Enrolment\n\nEmployee Starter Guide for Mac\n\nEmployee Starter Guide for iOS and iPadOS\n\n‚ÄúEveryone can Create‚Äù series from Apple Education\n\nThe ‚ÄúEveryone Can Create‚Äù series is a great resource that goes into creating music, photos and video as well as some teacher guides\n\nAuthor Names\n\nApple have several Author names so it can be useful to search by author to restrict your results.\n\nApple Inc.\n\nApple Inc. ‚Äì Business\n\nApple Education\n\nFinal Words\n\nThis is by no means an exhaustive list. Over time the books are updated but rather than update the existing eBook, Apple may publish a new book, for example there will be more than one ‚ÄúMacBook Pro Essentials‚Äù. It‚Äôs usually easy to tell which one is the latest by the cover.\n\nHow It Started\n\nA bit over six months ago I had one of those bursts of inspiration that only comes at the most inopportune of times. The basis of the idea was to make an app that would display a message to my mac users that looked nice and was customisable with text and images. SwiftUI was on the list of things I wanted to learn and so Dialog was born.\n\nTwo days later on the 11th March 2021 the first beta version was released on GitHub as a binary and the following day I wrote a blog post announcing it. The source was released on the 20th after clearance from my employer.\n\nThe initial version was fairly basic at the time but did what I wanted it to do. Displayed a window where I could control the title, message, button labels and include an image (or icon). It was one fixed size as I wasn‚Äôt up to speed with SwiftUI‚Äôs declarative layout style and making it do what I wanted, but it was a start and we all have to start somewhere.\n\nHow it‚Äôs going\n\nSix months later and I have been nerd sniped with features and created an app that I think does about as much as anyone (a mac admin at least) could want in an app who‚Äôs task is to display a message to the current user.\n\nApart from what it started with, Dialog now displays selectable dropdown lists, has text entry, fully customisable text colours and font sizes, support for SF Symbols as an icon, can display another icon as an overlay to the main icon, built in markdown support, can display arbitrary window sizes, has background images, full screen display mode, can timeout after a specified number of seconds (with a custom timeout indicator because why not), text justification, banner images, can provide json output and last but not least, supports a good chunk of the command line arguments from jamfHelper making it easy to drop in replace and not require an admin to re-write existing scripts (too much‚Ä¶it does it‚Äôs best and there are some options not currently supported). All in an app thats fully self contained and less than 2MB in size.\n\nAlong the way I‚Äôve learned more about SwiftUI than I thought I ever would and have used what I have learned in other projects, contributing to Nudge v1.1.1 with a refactor in how its layout is presented by SwiftUI and making future support for arbitrary window sizes easier to implement in that utility.\n\nAs is evidenced from the progress in Dialog over the last 6 months, I‚Äôm more than open to feature suggestions and bug reports. I have no immediate plans to slow down development and with this first SwiftUI app ticking along nicely I have ideas for a few more apps and utilities.\n\nDialog is also in the Jamf Marketplace where it has been getting a semi respectable level of attention in terms of generating traffic (If you are using dialog, please leave a review) and the latest release can be found on the Dialog GitHub page https://github.com/bartreardon/Dialog-public\n\nIf you check it out, please send through feedback or join the #dialog channel on the macadmins slack.\n\nüôÇ\n\nWhy a dialog app? Two reasons, the tool I have been using to this point was coming up short on some features I wanted to have, and I wanted an excuse to get my teeth stuck into a SwiftUI project. Also, I wanted to finally get around to releasing a tool for the mac admin community that is hopefully useful (I have a number that are useful, just not released)\n\n3 days later‚Ä¶Meet Dialog.\n\nThe app has a simple premise, show a dialog with a title, some text, one or two buttons and optionally an image. I took inspiration in the UNIX philosophy of having one tool do one job. Everything Ic can do can be specified on the command line and the app will return different exit codes depending on what action the user takes.\n\nAt its most basic, it looks like this:\n\nWhich is pretty boring, fortunately you can customise all the options. The three actions a user can take are:\n\n1 ‚Äì Press the [OK] button (or hit <Enter> on their keyboard)\n\n2 ‚Äì Press the [Cancel] button (or hit <ESC>)\n\n3 ‚Äì Press the [More Information] button.\n\nEach action is closes the app with exit code of 0, 2 or 3. The [OK] and [More Information] buttons can optionally also redirect to a URL.\n\nThe Title and Message areas can be specified of course. The icon image can be either a jpg or png from a file or a URL. If the image is square (e.g. a jpg) the corners are slightly rounded for a more pleasing look.\n\nPut that together you can make something interesting:\n\nDialog is only supported on macOS 11 (universal) at this point in time.\n\nTo check out a pre-release version, please visit:\n\nhttps://github.com/bartreardon/Dialog-public/blob/main/README.md\n\nSource code will be made available soon. <- Edit: Source is now available as of 20-03-2021\n\n‚Ä¶your laptop battery and make you fans spin hard if you don‚Äôt jump when the updater shows up.\n\nRecognise that dialog? ‚Äì Many apps pop up the same type, Lock icon with the App icon overlaid and the text ‚ÄúAn update is ready to install. <AppName> is trying to add a new helper tool‚Äù\n\nWell if you‚Äôre lazy and don‚Äôt get to it, or it pops up when you‚Äôre not at your computer, you may find that the fans in your Mac are making noises. A quick check of Activity Monitor confirm that the app in question is taking up a good chunk of your CPU, but doing what exactly?\n\nSpinning wheels it turns out calling the same method repeatedly as long as the dialog is waiting to be dismissed. https://soundmacguy.wordpress.com/2018/02/25/microsoft-skype-definitely-and-teams-maybe-disabling-automatic-updates/ (thank you to Nathaniel Strauss over on the macadmins slack for pointing this out)\n\nSquirrel.framework is a common update framework unsed in Electron based apps like Atom, Discord, Microsoft Teams, Visual Studio Code and Signal among others. And it has a bug\n\nhttps://github.com/Squirrel/Squirrel.Mac/issues/247\n\nNot so encouraging though‚Ä¶\n\nSo, if you were like me and were wondering why ‚Äì now you know. If you know anyone that works on Electron apps for Mac and has patched this issue, can you send it upstream please? üëç\n\nAs was announced at WWDC 2020, Apple will be releasing Macs later this year running on Apple Silicon based on the ARM64 architecture. This transition will hopefully have us running universal applications but also possibly forced to run some intel only apps transcoded through Rosetta 2, depending on vendor support. As a mac admin it might be handy to know how to discover what applications on your systems don‚Äôt have a version compiled for ARM (or intel 64 bit for that matter).\n\nThis (very) simple script will go though all applications system_profiler knows about and report if the application binaries have no match for the current system architecture:\n\n#!/bin/bash IFS=$'\\n' systemarch=$(uname -m) for apppath in $(system_profiler SPApplicationsDataType | grep 'Location:' | awk -F \": \" '{print $NF}'); do apparch=$(mdls -raw -name kMDItemExecutableArchitectures \"${apppath}\") echo ${apparch} | grep -q ${systemarch} if [[ $? -ne 0 ]]; then echo \"${apppath} has no native binary for ${systemarch}\" echo \"${apparch}\" fi done\n\nuname -m tells us the current system architecture\n\nmdls -raw -name kMDItemExecutableArchitectures /some/file.app tells us the architecture(s) that the app is compiled for which could be ppc, i386, x86_64 or arm64\n\nSample output from the future might look something like this:\n\n/Applications/dosbox.app has no native binary for arm64 ( ppc, i386, \"x86_64\" )\n\nYou could use this as a basis for your own scripts or to perhaps instead check for apps that do match the host architecture or have multiple architectures (aka universal binaries).\n\nHappy scripting.\n\nmacOS presents a wonderful graphical UI but there are times where we log on, copy files or perform other work via the command line over SSH. The default experience for generic logins is rather plain but we can jazz it up a little.\n\nThe first is by using the file /etc/motd (or Message Of The Day). This is simply a text file and whatever is in it will be displayed after login. It‚Äôs a bit of a misnomer as without anything else the file is static, unchanging file rather than something inherently ‚Äúdaily‚Äù but with a bit of imagination one can embellish and update the file on a regular basis. for example:\n\n#!/bin/sh echo \"You have logged on to $(hostname)\" > /etc/motd echo \"Today's date is $(date +\"%d %b %Y\")\" >> /etc/motd echo \"The weather for today is: $(curl -s 'wttr.in?format=3')\" >> /etc/motd\n\n(A fairly simple script but will do as a demonstration).\n\nSave this file to an appropriate location such as ‚Äú/usr/local/motd_updater.sh‚Äú.\n\nSet permissions with ‚Äúsudo chmod 744 /usr/local/motd_updater.sh‚Äú\n\nCreate a launchd to run it once a day or whatever schedule you prefer ‚Äì an example here ‚Äì and place it in /Library/LaunchDaemons/ and load with sudo launchctl load /Library/LaunchDaemons/com.motd_update.plist (or whatever name you gave it)\n\nNow, whenever someone connects via ssh they will be greeted with the a message that will update daily.\n\nThis is great, but a user won‚Äôt see the message until AFTER login. What if you want to display a message BEFORE login, such as an Acceptable Use Policy? Fortunately that‚Äôs easy enough to do as well as SSHD has a method for displaying a banner on connection. Much like MOTD, the banner is just a plain text file and you can tell SSHD to display it prior to prompting for a password.\n\nFor a basic banner, edit the file ‚Äú/etc/banner‚Äù and copy in the following:\n\n----------------------- Conditions of Use WARNING: Your access to the system must be authorised. Unauthorised access may be prosecuted. By accessing this system, you agree that: - your actions may be monitored - you must abide by the MY ORG Code of Conduct and any Acceptable Use Policy ----------------------\n\nedit the file ‚Äú/etc/ssh/sshd_config‚Äù\n\nfind the line ‚Äú#Banner /etc/banner‚Äú, uncomment and save\n\n‚Äúsudo launchctl kickstart -k system/com.openssh.sshd‚Äù to restart sshd\n\nNow when someone logs in via SSH, they will see the text displayed in /etc/banner prior to entering their password. Very handy for presenting things like acceptable use policies:\n\nAs with /etc/motd, you can modify /etc/banner as you wish with a script or the like to keep it up to date as details change, even splash a bit of colour around with ANSI escape codes. Have Fun.\n\nIf your org is one of the many that uses JIRA internally for tracking workflow or projects then you‚Äôll know about issue collectors. I‚Äôve used issue collectors before in munki and my post on that is still available here https://groups.google.com/d/msg/munki-dev/PwvrYaqKxGc/97w7G-USFwUJ\n\nFor Jamf Self Service it needs a little bit of extra work as unlike Managed Software Centre there‚Äôs not a lot of interface modification you can do. That said, it‚Äôs still fairly simple to set up.\n\nStep 1 ‚Äì create your issue collector in JIRA ‚Äì consult your jira docco on how to do that but the simplest is to set ‚ÄúProminent‚Äù trigger style and then pick a template. I went with ‚ÄúCustom‚Äù and selected ‚ÄúDescription‚Äù and ‚ÄúAttach File‚Äù custom fields. Add an appropriate trigger text and message.\n\nStep 2 ‚Äì create a page to add the generated issue collector code to. Here‚Äôs a template I created earlier:\n\n<html> <head> </head> <body> </body> </html>\n\nSave it as feedback.html and place it on a web server somewhere.\n\nStep 3 ‚Äì We aren‚Äôt done yet (believe it or not). We need to add in our issue collector code. Go grab it from the issue collector setting in JIRA and paste it in between <body> and </body> tags. All going well, when you re-load your html file you should have a blank page with a JIRA feedback link at the top like this:\n\nThat‚Äôs not super ideal though ‚Äì we want to see the form straight away. A simple way to do this (because JIRA is weird and don‚Äôt let you easily just create a blank issue collector page) is to create an onload event and have a snippet of JS click the ‚ÄúProvide Feedback‚Äù link for us.\n\nStep 4 ‚Äì Copy the following into the body of your ever growing html file:\n\n<script> window.addEventListener('load', function() { document.getElementById('atlwdg-trigger').click(); }) </script>\n\nNow if you re-load your page it should pop up the issue collector straight away (bonus points if you have SSO enabled and it picks up who you are straight away ‚Äì otherwise have a play around with creating an anonymous issue collector):\n\nStep 5 ‚Äì Now jump onto your JSS and create a new bookmark and link it to the URL of the feedback html (icon shamelessly ripped off from the Apple Feedback Assistant)\n\nBoom.\n\nOptional ‚Äì I also created a background image to display on the page so when someone submits their feedback and the form disappears, they see a happy message üòÉ"
    }
}