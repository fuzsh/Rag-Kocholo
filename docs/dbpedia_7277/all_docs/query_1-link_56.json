{
    "id": "dbpedia_7277_1",
    "rank": 56,
    "data": {
        "url": "http://soundsoftware.ac.uk/open-source-software-licences-explained.html",
        "read_more_link": "",
        "language": "en",
        "title": "Open source software licences explained",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://i.creativecommons.org/l/by-nc/3.0/88x31.png",
            "http://soundsoftware.ac.uk/sites/all/themes/soundsoftware/socialnet_icons/rss_16.png",
            "http://soundsoftware.ac.uk/sites/all/themes/soundsoftware/socialnet_icons/twitter_16.png",
            "http://soundsoftware.ac.uk/sites/all/themes/soundsoftware/socialnet_icons/linkedin_16.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "sites/soundsoftware.ac.uk/files/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "If you are planning to publish some software as open source code, you need to include a licence so that other people will know what they can do with it.\n\n(Even if you don't care what people do with it, you should make that clear through a licence. The default copyright regime in most countries won't permit anyone to make any legal use of your source code otherwise.)\n\nPutting a licence with your code is easy, typically just involving adding a single file in your source code project or a few lines at the top of each source file.\n\nReviewing the options\n\nThere are three classes of licence widely used for open source software.\n\nFollow the links to read about the pros and cons of each, about what they mean to you if you are building on someone else's code, and about how to apply them to your own software:\n\n“BSD-style” licences such as the MIT licence, which are very permissive and allow almost any reuse of the code;\n\nThe GNU General Public License (GPL), which is much less permissive, allowing reuse only in open source software that is also under the GPL;\n\nThe GNU Lesser General Public License (LGPL), which is somewhere in between, allowing reuse of a library module in most types of code so long as the library itself remains open source under the LGPL.\n\nAlthough the one-line descriptions above give some flavour of each, you'll have to read the fuller descriptions to get a clearer idea of what they actually permit. All three of them allow people who receive your source code to use, modify, and redistribute it without a fee; the main difference is in what sort of reuse (in terms of incorporating the code into another piece of software) is permitted.\n\nWe also answer some common questions about other options such as academic-use only licences.\n\nHow should I decide what licence to use?\n\nFirst, review your code!\n\nHave you incorporated any other code that you might not have permission to distribute under any or all of these licences? (For instance, are you using GPL code from someone else—in which case you need to follow the GPL as well, or else replace that code?)\n\nOr are you reusing code that you don't have permission to distribute at all? Find out before you go any further!\n\nMake sure you know who owns the copyright in your work; whether your institution or funding body has any specific policies about publication and licensing; and whether you have permission to apply particular licences to your software.\n\nAfter all that, here are our guidelines. Which of these applies to you?\n\n\"I'm publishing an implementation of a method associated with a paper\"\n\n— Consider a BSD-style licence.\n\n— Read more about BSD-style licences.\n\n— Here's how to apply a BSD licence to your code.\n\nWhy? If you want your code to be referred to by other researchers; it's not a complete application; and you don't intend to explicitly maintain or support it yourself, the BSD option makes for the simplest possible legal landscape. The idea is to eliminate obstacles to other people doing research in the future.\n\nConsider, for example, that you will not always be around to ask for permission to use your code, or that the technical environment may change and make less permissive licence requirements unexpectedly hard to comply with. BSD terms are also the simplest for people who wish to cite or quote your work.\n\n\"I'm publishing a self-contained library, and I intend to maintain it\"\n\n— Consider using the LGPL.\n\n— Read more about the LGPL.\n\n— Here's how to apply the LGPL to your code.\n\nWhy? The LGPL aims to strike a balance between the free-for-all of BSD and the tighter line associated with the GPL, and it can work well for libraries that will be actively maintained by their authors.\n\n\"I'm writing a complete application\"\n\n— Consider using the GPL.\n\n— Read more about the GPL.\n\n— Here's how to apply the GPL to your code.\n\nWhy? The GPL is often appropriate if you are more interested in making your application available to end-users than in permitting other developers to reuse the code itself. But take care if you are planning to distribute through a channel that doesn't permit using the GPL, such as one of the Apple App Stores.\n\n\"I'm uncertain (or my institution is) about the idea of publishing source code at all\"\n\nIn this case, you might find the GPL provides more reassurance than a more permissive licence. For example, if you are in the position of having to persuade your supervisor that your code should be released, it may be worth mentioning the GPL's protection against certain sorts of commercial exploitation.\n\n\"I'm writing code to work with an existing framework\"\n\nThen check whether it has a licence policy already. For example, Python code contributed to SciPy should be under a BSD licence (see reference).\n\nRemember, too, that the licence is something that the copyright holder provides and people who receive the code need to comply with. It doesn't bind the copyright holder. You can always provide your own code under more than one licence, or change the licence later on, although you can't retract any licensed code that has already been published.\n\nDisclaimer: The author is an experienced developer of open source software who has read and used all of the licences described here, but who has no legal training. These are informal suggestions, not legal advice. If you become aware of any errors, please let us know.\n\nFurther reading"
    }
}