{
    "id": "dbpedia_7277_3",
    "rank": 49,
    "data": {
        "url": "https://uaparser.dev/",
        "read_more_link": "",
        "language": "en",
        "title": "UAParser.js",
        "top_image": "https://uaparser.dev/images/uap-header.png",
        "meta_img": "https://uaparser.dev/images/uap-header.png",
        "images": [
            "https://uaparser.dev/images/uap-illustrations.png",
            "https://uaparser.dev/images/companies/microsoft.png",
            "https://uaparser.dev/images/companies/amazon.png",
            "https://uaparser.dev/images/companies/facebook.png",
            "https://uaparser.dev/images/companies/instagram.png",
            "https://uaparser.dev/images/companies/whatsapp.png",
            "https://uaparser.dev/images/companies/slack.png",
            "https://uaparser.dev/images/companies/google.png",
            "https://uaparser.dev/images/companies/httptoolkit.png",
            "https://uaparser.dev/images/companies/aliexpress.png",
            "https://uaparser.dev/images/companies/vercel.png",
            "https://uaparser.dev/images/companies/gitpod.png",
            "https://uaparser.dev/images/companies/apple.png",
            "https://uaparser.dev/images/companies/discord.png",
            "https://uaparser.dev/images/companies/mozilla.png",
            "https://uaparser.dev/images/companies/automattic.png",
            "https://uaparser.dev/images/companies/shopify.png",
            "https://uaparser.dev/images/companies/amplitude.png",
            "https://uaparser.dev/images/companies/line.png",
            "https://uaparser.dev/images/companies/electron.png",
            "https://uaparser.dev/images/companies/livechat.png",
            "https://uaparser.dev/images/companies/rocket.chat.png",
            "https://uaparser.dev/images/companies/8thwall.png",
            "https://uaparser.dev/images/companies/circleci.png",
            "https://uaparser.dev/images/companies/salesforce.png",
            "https://uaparser.dev/images/companies/protonmail.png",
            "https://uaparser.dev/images/companies/autodesk.png",
            "https://uaparser.dev/images/companies/confluent.png",
            "https://uaparser.dev/images/companies/elastic.png",
            "https://uaparser.dev/images/companies/optimizely.png",
            "https://uaparser.dev/images/companies/reddit.png",
            "https://uaparser.dev/images/companies/scribd.png",
            "https://uaparser.dev/images/companies/zendesk.png",
            "https://uaparser.dev/images/companies/imgur.png",
            "https://uaparser.dev/images/companies/vimeo.png",
            "https://uaparser.dev/images/companies/tumblr.png",
            "https://uaparser.dev/images/companies/pinterest.png",
            "https://uaparser.dev/images/companies/zoho.png",
            "https://uaparser.dev/images/companies/snapchat.png",
            "https://uaparser.dev/images/companies/udemy.png",
            "https://uaparser.dev/images/companies/linktree.png",
            "https://uaparser.dev/images/companies/blinkist.png",
            "https://uaparser.dev/images/companies/notion.png",
            "https://uaparser.dev/images/companies/uber.png",
            "https://uaparser.dev/images/companies/disney.png",
            "https://uaparser.dev/images/companies/livescore.png",
            "https://uaparser.dev/images/companies/freelancer.png",
            "https://uaparser.dev/images/companies/instacart.png",
            "https://uaparser.dev/images/companies/expedia.png",
            "https://uaparser.dev/images/companies/olx.png",
            "https://uaparser.dev/images/companies/grab.png",
            "https://uaparser.dev/images/companies/traveloka.png",
            "https://uaparser.dev/images/companies/shopee.png",
            "https://uaparser.dev/images/companies/bukalapak.png",
            "https://uaparser.dev/images/companies/tokopedia.png",
            "https://uaparser.dev/images/companies/jetbrains.png",
            "https://uaparser.dev/images/companies/here.png",
            "https://uaparser.dev/images/companies/postman.png",
            "https://uaparser.dev/images/companies/intuit.png",
            "https://uaparser.dev/images/companies/neo4j.png",
            "https://uaparser.dev/images/companies/mongodb.png",
            "https://uaparser.dev/images/companies/dell.png",
            "https://uaparser.dev/images/companies/ibm.png",
            "https://uaparser.dev/images/companies/oracle.png",
            "https://uaparser.dev/images/companies/siemens.png",
            "https://uaparser.dev/images/companies/hpe.png",
            "https://uaparser.dev/images/companies/verizon.png",
            "https://opencollective.com/ua-parser-js/contributors.svg?avatarHeight=64&width=640",
            "https://opencollective.com/ua-parser-js/organizations.svg?avatarHeight=128",
            "https://opencollective.com/ua-parser-js/individuals.svg?avatarHeight=128",
            "https://uaparser.dev/images/uap-logo-transparent.png",
            "https://img.shields.io/github/stars/faisalman/ua-parser-js?color=yellow&logo=github&style=for-the-badge",
            "https://img.shields.io/npm/dm/ua-parser-js?color=red&logo=npm&label=NPM%20DOWNLOADS&style=for-the-badge",
            "https://img.shields.io/npm/v/ua-parser-js.svg?logo=npm&color=red&style=for-the-badge",
            "https://img.shields.io/jsdelivr/npm/hm/ua-parser-js?logo=jsdelivr&style=for-the-badge",
            "https://img.shields.io/bundlephobia/minzip/ua-parser-js?logo=hackthebox&logoColor=white&style=for-the-badge",
            "https://img.shields.io/github/contributors/faisalman/ua-parser-js?color=purple&logo=githubsponsors&style=for-the-badge",
            "https://img.shields.io/cdnjs/v/UAParser.js.svg?color=orange&style=for-the-badge",
            "https://img.shields.io/opencollective/all/ua-parser-js?color=teal&style=for-the-badge",
            "https://img.shields.io/ossf-scorecard/github.com/faisalman/ua-parser-js?label=openssf%20scorecard&style=for-the-badge"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "browser detection",
            "user-agent",
            "javascript",
            "detect os",
            "mobile",
            "tablet",
            "detect device",
            "cpu",
            "javascript",
            "nodejs",
            "jquery",
            "typescript",
            "client hints",
            "bots",
            "iphone",
            "ipad",
            "android"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "UAParser.js is the most comprehensive, compact, & up-to-date isomorphic JavaScript library to detect visitor's Browser, Engine, OS, CPU, and Device type/model.",
        "meta_lang": "",
        "meta_favicon": "images/uap-logo.png",
        "meta_site_name": "",
        "canonical_link": "https://uaparser.dev/",
        "text": "Download UAParser.js from the official GitHub repository: ua-parser-js, then place the following script tag in your HTML file to include the library:\n\n<script src=\"ua-parser.min.js\"></script>\n\nAlternatively, you can use a CDN like jsDelivr or cdnjs in your script tag:\n\n<script src=\"https://cdn.jsdelivr.net/npm/ua-parser-js/dist/ua-parser.min.js\"></script>\n\nThen, use the library in your HTML page:\n\n<!doctype html> <html> <head> <script src=\"ua-parser.min.js\"></script> <script> const uap = new UAParser(); console.log(uap.getResult()); /* /// This will print an object structured like this: { ua: \"\", browser: { name: \"\", version: \"\", major: \"\", type: \"\" }, engine: { name: \"\", version: \"\" }, os: { name: \"\", version: \"\" }, device: { model: \"\", type: \"\", vendor: \"\" }, cpu: { architecture: \"\" } } */ // The result depends on current window.navigator.userAgent value // Now let's try a custom user-agent string as an example const uastring1 = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\"; uap.setUA(uastring1); const result = uap.getResult(); console.log(result.browser); // {name: \"Chromium\", version: \"15.0.874.106\", major: \"15\", type: undefined} console.log(result.device); // {model: undefined, type: undefined, vendor: undefined} console.log(result.os); // {name: \"Ubuntu\", version: \"11.10\"} console.log(result.os.version); // \"11.10\" console.log(result.engine.name); // \"WebKit\" console.log(result.cpu.architecture); // \"amd64\" // Do some other tests const uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\"; console.log(uap.setUA(uastring2).getBrowser().name); // \"Konqueror\" console.log(uap.getOS()); // {name: \"OpenBSD\", version: undefined} console.log(uap.getEngine()); // {name: \"KHTML\", version: \"4.1.4\"} const uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11'; console.log(uap.setUA(uastring3).getDevice().model); // \"PlayBook\" console.log(uap.getOS()); // {name: \"RIM Tablet OS\", version: \"1.0.0\"} console.log(uap.getBrowser().name); // \"Safari\" </script> </head> <body> </body> </html>\n\nREAD THE DOCS\n\nIn a server-side environment like Node.js, UAParser.js can parse the [User-Agent] and [Sec-CH-UA-*] headers from the incoming HTTP requests.\n\nTo get started, install UAParser.js using npm:\n\n$ npm install ua-parser-js\n\nThen, require the library in your Node.js application:\n\nconst http = require('http'); const uap = require('ua-parser-js'); http.createServer(function (req, res) { // get user-agent header let ua = uap(req.headers['user-agent']); /* // Since v2.0.0 // you can also pass Client Hints data to UAParser // note: only works in a secure context (localhost or https://) // from any browsers that are based on Chrome 85+ // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA const getHighEntropyValues = 'Sec-CH-UA-Full-Version-List, Sec-CH-UA-Mobile, Sec-CH-UA-Model, Sec-CH-UA-Platform, Sec-CH-UA-Platform-Version, Sec-CH-UA-Arch, Sec-CH-UA-Bitness'; res.setHeader('Accept-CH', getHighEntropyValues); res.setHeader('Critical-CH', getHighEntropyValues); ua = uap(req.headers).withClientHints(); */ // write the result as response res.end(JSON.stringify(ua, null, ' ')); }) .listen(1337, '127.0.0.1'); console.log('Server running at http://127.0.0.1:1337/');\n\nREAD THE DOCS\n\nAlthough written in vanilla JavaScript, UAParser.js automatically detects the presence of jQuery (or Zepto) and creates a $.ua object in addition to the window.UAParser constructor.\n\nProperties\n\nThe result of detected user-agent\n\n$.ua.browser\n\n$.ua.cpu\n\n$.ua.device\n\n$.ua.engine\n\n$.ua.os\n\nMethods\n\nTo get or set the user-agent\n\n$.ua.get()\n\n$.ua.set(ua)\n\nCode Example:\n\n// Say we are in a browser where jQuery is present // with user-agent: \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\" // Get the details console.log($.ua.device); // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"} console.log($.ua.os); // {name: \"Android\", version: \"2.3.4\"} console.log($.ua.os.name); // \"Android\" console.log($.ua.get()); // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\" if($.ua.browser.is(\"IE\")) { alert(\"Please upgrade!\"); } // Now let's try another custom user-agent $.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13'); // Test again console.log($.ua.browser.name); // \"Safari\" console.log($.ua.engine.name); // \"Webkit\" console.log($.ua.device); // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"} console.log($.ua.browser.version); // \"4.0\" console.log($.ua.browser.major); // \"4\" // Add class to <body> tag // <body class=\"ua-browser-safari ua-devicetype-tablet\"> $('body') .addClass( 'ua-browser-' + $.ua.browser.name + ' ua-devicetype-' + $.ua.device.type);\n\nREAD THE DOCS"
    }
}