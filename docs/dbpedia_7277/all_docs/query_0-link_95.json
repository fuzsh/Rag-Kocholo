{
    "id": "dbpedia_7277_0",
    "rank": 95,
    "data": {
        "url": "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/A/GTK",
        "read_more_link": "",
        "language": "en",
        "title": "GTK",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/GTK_logo.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Gtk4-widget-factory_demos.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/GTK%252B_software_architecture.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/GDK_software_architecture.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Gtk_Sharp_Logo.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Free_and_open-source-software_display_servers_and_UI_toolkits.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/GIMP_2.8_in_Single_Window_Mode_running_on_Ubuntu.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Commons-logo.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Wikibooks-logo-en-noslogan.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/OOjs_UI_icon_edit-ltr-progressive.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Symbol_category_class.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Symbol_category_class.svg.png.webp",
            "https://iiab.me/kiwix/content/wikipedia_en_top_maxi_2022-11/I/Commons-logo.svg.png.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/GTK",
        "text": "Software architecture\n\nThe GTK library contains a set of graphical control elements (widgets); version 3.22.16 contains 186 active and 36 deprecated widgets.[7] GTK is an object-oriented widget toolkit written in the programming language C; it uses GObject, that is the GLib object system, for the object orientation. While GTK is mainly for windowing systems based on X11 and Wayland, it works on other platforms, including Microsoft Windows (interfaced with the Windows API), and macOS (interfaced with Quartz). There is also an HTML5 back-end named Broadway.[8][9]\n\nGTK can be configured to change the look of the widgets drawn; this is done using different display engines. Several display engines exist which try to emulate the look of the native widgets on the platform in use.\n\nStarting with version 2.8, released in 2005, GTK began the transition to using Cairo to render most of its graphical control elements widgets.[10] Since GTK version 3.0, all rendering is done using Cairo.[11]\n\nOn 26 January 2018 at DevConf.cz, Matthias Clasen gave an overview of the current state of GTK 4 development, including a high-level explanation of how rendering and input worked in GTK 3, what changes are being made in GTK 4 (>3.90), and why.[12] On 6 February 2019 it was announced that GTK 4 will drop the â+â from the project's name.[2]\n\nGTK Drawing Kit (GDK)\n\nGDK acts as a wrapper around the low-level functions provided by the underlying windowing and graphics systems.\n\nGDK is found in the /gdk directory.\n\nGTK Scene Graph Kit (GSK)\n\nGSK is the rendering and scene graph API for GTK. GSK lies between the graphical control elements (widgets) and the rendering. GSK was finally merged into GTK version 3.90 released March 2017.\n\nGSK is found in the /gsk directory.\n\nGtkInspector\n\nGtkInspector was introduced with version 3.14.[13][14] GtkInspector can only be invoked after installing the development package libgtk-3-dev/gtk+-devel.\n\nGUI designers\n\nThere are several GUI designers for GTK. The following projects are active as of July 2011:\n\nGlade, supports GtkBuilder, which is a GTK built-in GUI description format.\n\nGazpacho, GUI builder for the GTK toolkit written in Python[15]\n\nCrow Designer, relies on its own GuiXml format and GuiLoader library.[16]\n\nStetic, part of MonoDevelop, oriented toward Gtk#.\n\nGambas since version 2.0 atop BASIC\n\nXojo on Linux\n\nLazarus on Linux defaults to interfacing with GTK 2\n\nGtkBuilder\n\nGtkBuilder allows user interfaces to be designed without writing code. The interface is described in an Extensible Markup Language (XML) file, which is then loaded at runtime and the objects created automatically. The Glade Interface Designer allows creation of the user interface in a what you see is what you get (WYSIWYG) manner. The description of the user interface is independent from the programming language being used.\n\nLanguage bindings\n\nLanguage bindings are available for using GTK from languages other than C, including C++, Genie, JavaScript, Perl, Python, Vala, and others.[17]\n\nGtkSharp, not to be confused with Gtk#, supports GTK 3.\n\nGtk#\n\nGtk#Developer(s)XamarinInitial releaseMarch 12, 2004 ( )Stable release\n\n2.12.41[18] / September 22, 2016 ( )\n\nPreview release\n\n2.99.3 (for GTK3)[18] / June 6, 2014 ( )\n\nRepositoryWritten inC#, XML, Perl, COperating systemWindows, macOS, LinuxTypeWidget toolkitLicenseGNU Lesser General Public LicenseWebsitemono-project.com/GtkSharp\n\nGtk# is a set of .NET Framework bindings for the GTK graphical user interface (GUI) toolkit and assorted GNOME libraries. The library facilitates building graphical GNOME applications using Mono or any other compliant Common Language Runtime (CLR). Gtk# is an event-driven system like any other modern windowing library where every widget allows associating handler methods, which get called when certain events occur.\n\nApplications built using Gtk# will run on many platforms including Linux, Windows and macOS. The Mono packages for Windows include GTK, Gtk# and a native theme to make applications look like native Windows applications. Starting with Mono 1.9, running Gtk# applications on macOS no longer requires running an X11 server.[19]\n\nGlade Interface Designer can be used with the Glade# bindings to easily design GUI applications. A GUI designer named Stetic is integrated with the MonoDevelop integrated development environment (IDE).\n\nIn addition to support the standard GTK/GNOME stack of development tools, the gtk-dotnet.dll assembly provides a bridge to consume functionality available on the .NET stack. At this point this includes the functionality to use System.Drawing to draw on a widget.\n\nAs of September 2020, Gtk# support for Gtk3 remains in the preview phase and forked projects, such as GtkSharp, have been founded to provide full Gtk3 support for C# and other CLI languages. The lack of a released version of Gtk# with support for Gtk3 was cited as a reason to remove the Banshee media player in Ubuntu 12.04.[20]\n\nDevelopment\n\nGTK is mainly developed by The GNOME Project, which also develops the GNOME Development Platform and the GNOME Desktop Environment.[21]\n\nGTK development is loosely managed. Discussion chiefly occurs on several public mailing lists.[22] GNOME developers and users gather at an annual GNOME Users And Developers European Conference GUADEC meeting to discuss GNOME's current state and future direction.[23] GNOME incorporates standards and programs from freedesktop.org to better interoperate with other desktops.\n\nGTK is mainly written in C.[24] Many language bindings are available.\n\nOn 1 September 2016 a post on the GTK development blog denoted, among other things, the future numbering scheme of GTK.[25] GTK version 3.22, released in Autumn 2016, was planned to be the last 3.x release, although version 3.24 followed in Fall 2018 with the delay of GTK 4.[26] The development of GTK 4 used version names 3.90, 3.92, etc. until the first GTK 4.0 stable release was launched in December 2020.[27] Despite the first stable GTK 4 release, some applications using GTK still rely on GTK 2. For example, as of January 2022, GIMP is still being ported to GTK 3.[28]\n\nBuild automation\n\nGTK (and GNOME, GLib, etc.) formerly utilized the GNU Build System (named Autotools) as the build automation system of choice.\n\nSince 14 Aug 2017, the master branch of GTK has been built with Meson, and the Autotools build system files have been dropped.[29]\n\nExample\n\nDocumentation is available here:\n\ndeveloper.gnome.org/gtk4/stable/\n\nThe following code presents a graphical GTK hello-world program in the C programming language. This program has a window with the title \"Hello, world!\" and a label with similar text.\n\n// helloworld.c #include<gtk/gtk.h> /* Callback that will be called when the application is activated */ staticvoid activate_callback(GApplication*app,gpointeruser_data) { GtkWidget*window; GtkWidget*label; /* Create the main, top level window */ window=gtk_window_new(); /* Give it the title */ gtk_window_set_title(GTK_WINDOW(window),\"Hello, world!\"); /* Set the window's default size */ gtk_window_set_default_size(GTK_WINDOW(window),200,100); /* Assign the variable \"label\" to a new GTK label, * with the text \"Hello, world!\" */ label=gtk_label_new(\"Hello, world!\"); /* Plot the label onto the main window */ gtk_window_set_child(GTK_WINDOW(window),label); /* Make the application aware of the window. * The application process will continue to run until all * windows are closed */ gtk_application_add_window(GTK_APPLICATION(app),GTK_WINDOW(window)); /* Make sure that everything, window and label, are visible */ gtk_widget_show(window); } intmain(intargc,char*argv[]) { /* Create our test application */ GtkApplication*application=gtk_application_new(\"org.wikipedia.gtktest\",0); /* Connect our handler to the \"activate\" callback, which will be called * when the application is activated by the user, e.g. on first start */ g_signal_connect(application,\"activate\",G_CALLBACK(activate_callback),NULL); /* Run the application and return its status */ returng_application_run(G_APPLICATION(application),argc,argv); }\n\nNeeds installing the libraries first in Debian or derivatives: $ sudo apt-get install libgtk-4-dev\n\nUsing pkg-config in a Unix shell, this code can be compiled with the following command: $ cc -Wall $(pkg-config --cflags --libs gtk4) helloworld.c -o helloworld\n\nInvoke the program: $ ./helloworld"
    }
}