{
    "id": "dbpedia_5782_3",
    "rank": 33,
    "data": {
        "url": "https://github.com/bchavez/Bogus",
        "read_more_link": "",
        "language": "en",
        "title": "bchavez/Bogus: :card_index: A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed faker.js.",
        "top_image": "https://repository-images.githubusercontent.com/36990723/b56db300-6164-11e9-8a54-19b8a2a598eb",
        "meta_img": "https://repository-images.githubusercontent.com/36990723/b56db300-6164-11e9-8a54-19b8a2a598eb",
        "images": [
            "https://camo.githubusercontent.com/4a4f1a697188f064c91876bc10eff36c00c467558c326e53ef13c9c8bc7a47f5/68747470733a2f2f696d672e736869656c64732e696f2f6e756765742f64742f426f6775732e737667",
            "https://camo.githubusercontent.com/fd9423b04c877f113adb78ddfe4e94d12326fa764f1c82e8950d572ae9c8a3d7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f64786131346d7970686e6c62706c63362f6272616e63682f6d61737465723f7376673d74727565",
            "https://camo.githubusercontent.com/f68835b57b5de6a83238f686ef7307cea7c9cfe22d3ba1c6ff296fc9559098c9/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f6769746875622e636f6d2f6263686176657a2f426f6775732e7376673f7374796c653d736f6369616c",
            "https://camo.githubusercontent.com/da652f5a1b05f5fa0461670c85315a4d341a8ab2fc48ca2ec6444908ff56bee3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d64697363757373696f6e732d677265656e",
            "https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo.png",
            "https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/tipjar.png",
            "https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo_green.png",
            "https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/bogus_premium_tools_analyzer_demo.gif",
            "https://avatars.githubusercontent.com/u/135399663?s=64&v=4",
            "https://avatars.githubusercontent.com/u/93058427?s=64&v=4",
            "https://avatars.githubusercontent.com/u/93058427?s=64&v=4",
            "https://avatars.githubusercontent.com/u/59007760?s=64&v=4",
            "https://avatars.githubusercontent.com/u/93058427?s=64&v=4",
            "https://avatars.githubusercontent.com/u/77739828?s=64&v=4",
            "https://avatars.githubusercontent.com/u/114307848?s=64&v=4",
            "https://avatars.githubusercontent.com/u/169509868?s=64&v=4",
            "https://avatars.githubusercontent.com/u/478118?s=64&v=4",
            "https://avatars.githubusercontent.com/u/122666?s=64&v=4",
            "https://avatars.githubusercontent.com/u/11806849?s=64&v=4",
            "https://avatars.githubusercontent.com/u/245275?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2349379?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5426370?s=64&v=4",
            "https://avatars.githubusercontent.com/u/49870?s=64&v=4",
            "https://avatars.githubusercontent.com/u/526086?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1502191?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2960938?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3694770?s=64&v=4",
            "https://avatars.githubusercontent.com/u/11424653?s=64&v=4",
            "https://avatars.githubusercontent.com/u/49503?s=64&v=4",
            "https://avatars.githubusercontent.com/u/228256?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": ":card_index: A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed faker.js. - bchavez/Bogus",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/bchavez/Bogus",
        "text": "Bogus for .NET: C#, F#, and VB.NET\n\nProject Description\n\nHello. I'm your host Brian Chavez (twitter). Bogus is a simple fake data generator for .NET languages like C#, F# and VB.NET. Bogus is fundamentally a C# port of faker.js and inspired by FluentValidation's syntax sugar.\n\nBogus will help you load databases, UI and apps with fake data for your testing needs. If you like Bogus star ‚≠ê the repository and show your friends! üòÑ If you find Bogus useful consider supporting the project by purchasing a Bogus Premium license that gives you extra Bogus superpowers! üí´ üí™ You can also sponsor the project here! üí∞ üíµ\n\nDownload & Install\n\nNuget Package Bogus\n\nInstall-Package Bogus\n\nMinimum Requirements: .NET Standard 1.3 or .NET Standard 2.0 or .NET Framework 4.0.\n\nProjects That Use Bogus\n\nBitwarden Passwordless Server [code]\n\nElasticsearch .NET Client (NEST) [code]\n\nFluentValidation [code]\n\nMicrosoft Windows-XAML / Template10 [code]\n\nMicrosoft Learning / Cloud-Native Applications Using Microsoft Azure Cosmos DB [code]\n\nMicrosoft Office Developer\n\nOffice 365 Development Training Content [code]\n\nMicrosoft Teams Sample Connector [code]\n\nFeatured In\n\nMicrosoft 'On .NET Live': Next-level EF Core Data Seeding with Bogus - Apr. 15th, 2024\n\nAdventures in .NET: Building Bogus with Brian Chavez - Jan 5th, 2024\n\nMicrosoft Docs: Deploy Orleans to Azure App Service - May 5th, 2022\n\nMicrosoft Docs: Modernize a WPF app tutorial - Aug. 2nd, 2019\n\nMicrosoft Build 2018: Azure Tips and Tricks - May 8th, 2018\n\nNuGet Must Haves: Top 10 Unit Testing Libraries in 2017\n\n.NET Rocks Podcast: #BetterKnowThatFramework - Mar. 16th 2017, Sep. 13th, 2018, and May 7th, 2020\n\n.NET Engineering Blog: NuGet Package of the week #1. - \"This week in .NET - December 8th 2015\"\n\nBlog Posts\n\nNick Chapsas - Generating realistic fake data in .NET using Bogus [YouTube]\n\nJack Histon - How to Create Bogus Data in C#\n\nChristos Matskas - Creating .NET fakes using Bogus\n\nJason Roberts - Lifelike Test Data Generation with Bogus\n\nMark Timmings - Auto generating test data with Bogus\n\n.NET Core Generating Test Data\n\nSteve Leigh - Seedy Fake Users\n\nVolkan Paksoy - Generating Test Data with Bogus\n\nAlican Demirtas - Bogus on F#\n\nKhalid Abuhakmeh - Seed Entity Framework Core With Bogus\n\nSander ten Brinke - Taking Entity Framework Core data seeding to the next level with Bogus\n\nThe Crypto Tip Jar!\n\nThe Great C# Example\n\npublic enum Gender { Male, Female } //Set the randomizer seed if you wish to generate repeatable data sets. Randomizer.Seed = new Random(8675309); var fruit = new[] { \"apple\", \"banana\", \"orange\", \"strawberry\", \"kiwi\" }; var orderIds = 0; var testOrders = new Faker<Order>() //Ensure all properties have rules. By default, StrictMode is false //Set a global policy by using Faker.DefaultStrictMode .StrictMode(true) //OrderId is deterministic .RuleFor(o => o.OrderId, f => orderIds++) //Pick some fruit from a basket .RuleFor(o => o.Item, f => f.PickRandom(fruit)) //A random quantity from 1 to 10 .RuleFor(o => o.Quantity, f => f.Random.Number(1, 10)) //A nullable int? with 80% probability of being null. //The .OrNull extension is in the Bogus.Extensions namespace. .RuleFor(o => o.LotNumber, f => f.Random.Int(0, 100).OrNull(f, .8f)); var userIds = 0; var testUsers = new Faker<User>() //Optional: Call for objects that have complex initialization .CustomInstantiator(f => new User(userIds++, f.Random.Replace(\"###-##-####\"))) //Use an enum outside scope. .RuleFor(u => u.Gender, f => f.PickRandom<Gender>()) //Basic rules using built-in generators .RuleFor(u => u.FirstName, (f, u) => f.Name.FirstName(u.Gender)) .RuleFor(u => u.LastName, (f, u) => f.Name.LastName(u.Gender)) .RuleFor(u => u.Avatar, f => f.Internet.Avatar()) .RuleFor(u => u.UserName, (f, u) => f.Internet.UserName(u.FirstName, u.LastName)) .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.FirstName, u.LastName)) .RuleFor(u => u.SomethingUnique, f => $\"Value {f.UniqueIndex}\") //Use a method outside scope. .RuleFor(u => u.CartId, f => Guid.NewGuid()) //Compound property with context, use the first/last name properties .RuleFor(u => u.FullName, (f, u) => u.FirstName + \" \" + u.LastName) //And composability of a complex collection. .RuleFor(u => u.Orders, f => testOrders.Generate(3).ToList()) //Optional: After all rules are applied finish with the following action .FinishWith((f, u) => { Console.WriteLine(\"User Created! Id={0}\", u.Id); }); var user = testUsers.Generate(); Console.WriteLine(user.DumpAsJson()); /* OUTPUT: User Created! Id=0 * { \"Id\": 0, \"FirstName\": \"Audrey\", \"LastName\": \"Spencer\", \"FullName\": \"Audrey Spencer\", \"UserName\": \"Audrey_Spencer72\", \"Email\": \"Audrey82@gmail.com\", \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg\", \"CartId\": \"863f9462-5b88-471f-b833-991d68db8c93\", \"SSN\": \"923-88-4231\", \"Gender\": 0, \"Orders\": [ { \"OrderId\": 0, \"Item\": \"orange\", \"Quantity\": 8 }, { \"OrderId\": 1, \"Item\": \"banana\", \"Quantity\": 2 }, { \"OrderId\": 2, \"Item\": \"kiwi\", \"Quantity\": 9 } ] } */\n\nMore Examples!\n\nLanguage Description C# Full working example of 'The Great C# Example' C# Using Bogus and EF Core to a seed database C# Extending Bogus with custom APIs and data F# Using Bogus with F# VB.NET Using Bogus with VB.NET\n\nSince we're a port of faker.js, we support a whole bunch of different locales. Here's an example in Korean:\n\n[Test] public void With_Korean_Locale() { var lorem = new Bogus.DataSets.Lorem(locale: \"ko\"); Console.WriteLine(lorem.Sentence(5)); } /* Íµ≠Í∞ÄÎäî Î¨¥ÏÉÅÏúºÎ°ú ÌñâÏúÑÎ°ú ÏùòÎ¨¥Î•º Íµ¨ÏÑ±ÌïòÏßÄ Ïã†Ï≤¥Ïùò Ï≤òÎ≤åÎ∞õÏßÄ ÏòàÏà†Í∞ÄÏùò Í≤ΩÏö∞ÏôÄ */\n\nBogus supports the following locales:\n\nLocale Code Language Locale Code Language af_ZA Afrikaans fr_CH French (Switzerland) ar Arabic ge Georgian az Azerbaijani hr Hrvatski cz Czech id_ID Indonesia de German it Italian de_AT German (Austria) ja Japanese de_CH German (Switzerland) ko Korean el Greek lv Latvian en English nb_NO Norwegian en_AU English (Australia) ne Nepalese en_AU_ocker English (Australia Ocker) nl Dutch en_BORK English (Bork) nl_BE Dutch (Belgium) en_CA English (Canada) pl Polish en_GB English (Great Britain) pt_BR Portuguese (Brazil) en_IE English (Ireland) pt_PT Portuguese (Portugal) en_IND English (India) ro Romanian en_NG Nigeria (English) ru Russian en_US English (United States) sk Slovakian en_ZA English (South Africa) sv Swedish es Spanish tr Turkish es_MX Spanish (Mexico) uk Ukrainian fa Farsi vi Vietnamese fi Finnish zh_CN Chinese fr French zh_TW Chinese (Taiwan) fr_CA French (Canada) zu_ZA Zulu (South Africa)\n\nNote: Some locales may not have a complete data set. For example, zh_CN does not have a lorem data set, but ko has a lorem data set. Bogus will default to en if a locale-specific data set is not found. To further illustrate the previous example, the missing zh_CN:lorem data set will default to the en:lorem data set.\n\nIf you'd like to help contribute new locales or update existing ones please see our Creating Locales wiki page for more info.\n\nWithout Fluent Syntax\n\nYou can use Bogus without a fluent setup. The examples below highlight three alternative ways to use Bogus without a fluent syntax setup.\n\nUsing the Faker facade.\n\nUsing DataSets directly.\n\nUsing Faker<T> inheritance.\n\nUsing the Faker facade:\n\npublic void Using_The_Faker_Facade() { var faker = new Faker(\"en\"); var o = new Order() { OrderId = faker.Random.Number(1, 100), Item = faker.Lorem.Sentence(), Quantity = faker.Random.Number(1, 10) }; o.Dump(); }\n\nUsing DataSets directly:\n\npublic void Using_DataSets_Directly() { var random = new Bogus.Randomizer(); var lorem = new Bogus.DataSets.Lorem(\"en\"); var o = new Order() { OrderId = random.Number(1, 100), Item = lorem.Sentence(), Quantity = random.Number(1, 10) }; o.Dump(); }\n\nUsing Faker<T> inheritance:\n\npublic class OrderFaker : Faker<Order> { public OrderFaker() { RuleFor(o => o.OrderId, f => f.Random.Number(1, 100)); RuleFor(o => o.Item, f => f.Lorem.Sentence()); RuleFor(o => o.Quantity, f => f.Random.Number(1, 10)); } } public void Using_FakerT_Inheritance() { var orderFaker = new OrderFaker(); var o = orderFaker.Generate(); o.Dump(); }\n\nIn the examples above, all three alternative styles of using Bogus produce the same Order result:\n\n{ \"OrderId\": 61, \"Item\": \"vel est ipsa\", \"Quantity\": 7 }\n\nBogus API Support\n\nAddress\n\nZipCode - Get a zipcode.\n\nCity - Get a city name.\n\nStreetAddress - Get a street address.\n\nCityPrefix - Get a city prefix.\n\nCitySuffix - Get a city suffix.\n\nStreetName - Get a street name.\n\nBuildingNumber - Get a building number.\n\nStreetSuffix - Get a street suffix.\n\nSecondaryAddress - Get a secondary address like 'Apt. 2' or 'Suite 321'.\n\nCounty - Get a county.\n\nCountry - Get a country.\n\nFullAddress - Get a full address like Street, City, Country.\n\nCountryCode - Get a random ISO 3166-1 country code.\n\nState - Get a random state state.\n\nStateAbbr - Get a state abbreviation.\n\nLatitude - Get a Latitude.\n\nLongitude - Get a Longitude.\n\nDirection - Generates a cardinal or ordinal direction. IE: Northwest, South, SW, E.\n\nCardinalDirection - Generates a cardinal direction. IE: North, South, E, W.\n\nOrdinalDirection - Generates an ordinal direction. IE: Northwest, Southeast, SW, NE.\n\nCommerce\n\nDepartment - Get a random commerce department.\n\nPrice - Get a random product price.\n\nCategories - Get random product categories.\n\nProductName - Get a random product name.\n\nColor - Get a random color.\n\nProduct - Get a random product.\n\nProductAdjective - Random product adjective.\n\nProductMaterial - Random product material.\n\nEan8 - Get a random EAN-8 barcode number.\n\nEan13 - Get a random EAN-13 barcode number.\n\nCompany\n\nCompanySuffix - Get a company suffix. \"Inc\" and \"LLC\" etc.\n\nCompanyName - Get a company name.\n\nCatchPhrase - Get a company catch phrase.\n\nBs - Get a company BS phrase.\n\nDatabase\n\nColumn - Generates a column name.\n\nType - Generates a column type.\n\nCollation - Generates a collation.\n\nEngine - Generates a storage engine.\n\nDate\n\nPast - Get a DateTime in the past between refDate and yearsToGoBack.\n\nPastOffset - Get a DateTimeOffset in the past between refDate and yearsToGoBack.\n\nSoon - Get a DateTime that will happen soon.\n\nSoonOffset - Get a DateTimeOffset that will happen soon.\n\nFuture - Get a DateTime in the future between refDate and yearsToGoForward.\n\nFutureOffset - Get a DateTimeOffset in the future between refDate and yearsToGoForward.\n\nBetween - Get a random DateTime between start and end.\n\nBetweenOffset - Get a random DateTimeOffset between start and end.\n\nRecent - Get a random DateTime within the last few days.\n\nRecentOffset - Get a random DateTimeOffset within the last few days.\n\nTimespan - Get a random TimeSpan.\n\nMonth - Get a random month.\n\nWeekday - Get a random weekday.\n\nFinance\n\nAccount - Get an account number. Default length is 8 digits.\n\nAccountName - Get an account name. Like \"savings\", \"checking\", \"Home Loan\" etc..\n\nAmount - Get a random amount. Default 0 - 1000.\n\nTransactionType - Get a transaction type: \"deposit\", \"withdrawal\", \"payment\", or \"invoice\".\n\nCurrency - Get a random currency.\n\nCreditCardNumber - Generate a random credit card number with valid Luhn checksum.\n\nCreditCardCvv - Generate a credit card CVV.\n\nBitcoinAddress - Generates a random Bitcoin address.\n\nEthereumAddress - Generate a random Ethereum address.\n\nRoutingNumber - Generates an ABA routing number with valid check digit.\n\nBic - Generates Bank Identifier Code (BIC) code.\n\nIban - Generates an International Bank Account Number (IBAN).\n\nHacker\n\nAbbreviation - Returns an abbreviation.\n\nAdjective - Returns a adjective.\n\nNoun - Returns a noun.\n\nVerb - Returns a verb.\n\nIngVerb - Returns a verb ending with -ing.\n\nPhrase - Returns a phrase.\n\nImages\n\nDataUri - Get a SVG data URI image with a specific width and height.\n\nPicsumUrl - Get an image from the https://picsum.photos service.\n\nPlaceholderUrl - Get an image from https://placeholder.com service.\n\nLoremFlickrUrl - Get an image from https://loremflickr.com service.\n\nInternet\n\nAvatar - Generates a legit Internet URL avatar from twitter accounts.\n\nEmail - Generates an email address.\n\nExampleEmail - Generates an example email with @example.com.\n\nUserName - Generates user names.\n\nUserNameUnicode - Generates a user name preserving Unicode characters.\n\nDomainName - Generates a random domain name.\n\nDomainWord - Generates a domain word used for domain names.\n\nDomainSuffix - Generates a domain name suffix like .com, .net, .org\n\nIp - Gets a random IPv4 address string.\n\nPort - Generates a random port number.\n\nIpAddress - Gets a random IPv4 IPAddress type.\n\nIpEndPoint - Gets a random IPv4 IPEndPoint.\n\nIpv6 - Generates a random IPv6 address string.\n\nIpv6Address - Generate a random IPv6 IPAddress type.\n\nIpv6EndPoint - Gets a random IPv6 IPEndPoint.\n\nUserAgent - Generates a random user agent.\n\nMac - Gets a random mac address.\n\nPassword - Generates a random password.\n\nColor - Gets a random aesthetically pleasing color near the base RGB. See here.\n\nProtocol - Returns a random protocol. HTTP or HTTPS.\n\nUrl - Generates a random URL.\n\nUrlWithPath - Get an absolute URL with random path.\n\nUrlRootedPath - Get a rooted URL path like: /foo/bar. Optionally with file extension.\n\nLorem\n\nWord - Get a random lorem word.\n\nWords - Get an array of random lorem words.\n\nLetter - Get a character letter.\n\nSentence - Get a random sentence of specific number of words.\n\nSentences - Get some sentences.\n\nParagraph - Get a paragraph.\n\nParagraphs - Get a specified number of paragraphs.\n\nText - Get random text on a random lorem methods.\n\nLines - Get lines of lorem.\n\nSlug - Slugify lorem words.\n\nName\n\nFirstName - Get a first name. Getting a gender specific name is only supported on locales that support it.\n\nLastName - Get a last name. Getting a gender specific name is only supported on locales that support it.\n\nFullName - Get a full name, concatenation of calling FirstName and LastName.\n\nPrefix - Gets a random prefix for a name.\n\nSuffix - Gets a random suffix for a name.\n\nFindName - Gets a full name.\n\nJobTitle - Gets a random job title.\n\nJobDescriptor - Get a job description.\n\nJobArea - Get a job area expertise.\n\nJobType - Get a type of job.\n\nPhone\n\nPhoneNumber - Get a phone number.\n\nPhoneNumberFormat - Gets a phone number based on the locale's phone_number.formats[] array index.\n\nRant\n\nReview - Generates a random user review.\n\nReviews - Generate an array of random reviews.\n\nSystem\n\nFileName - Get a random file name.\n\nDirectoryPath - Get a random directory path (Unix).\n\nFilePath - Get a random file path (Unix).\n\nCommonFileName - Generates a random file name with a common file extension.\n\nMimeType - Get a random mime type.\n\nCommonFileType - Returns a commonly used file type.\n\nCommonFileExt - Returns a commonly used file extension.\n\nFileType - Returns any file type available as mime-type.\n\nFileExt - Gets a random extension for the given mime type.\n\nSemver - Get a random semver version string.\n\nVersion - Get a random Version.\n\nException - Get a random Exception with a fake stack trace.\n\nAndroidId - Get a random GCM registration ID.\n\nApplePushToken - Get a random Apple Push Token.\n\nBlackBerryPin - Get a random BlackBerry Device PIN.\n\nVehicle\n\nVin - Generate a vehicle identification number (VIN).\n\nManufacturer - Get a vehicle manufacture name. IE: Toyota, Ford, Porsche.\n\nModel - Get a vehicle model. IE: Camry, Civic, Accord.\n\nType - Get a vehicle type. IE: Minivan, SUV, Sedan.\n\nFuel - Get a vehicle fuel type. IE: Electric, Gasoline, Diesel.\n\nRandom/Randomizer\n\nNumber - Get an int from 0 to max.\n\nDigits - Get a random sequence of digits.\n\nEven - Returns a random even number.\n\nOdd - Returns a random odd number.\n\nDouble - Get a random double, between 0.0 and 1.0.\n\nDecimal - Get a random decimal, between 0.0 and 1.0.\n\nFloat - Get a random float, between 0.0 and 1.0.\n\nByte - Generate a random byte between 0 and 255.\n\nBytes - Get a random sequence of bytes.\n\nSByte - Generate a random sbyte between -128 and 127.\n\nInt - Generate a random int between MinValue and MaxValue.\n\nUInt - Generate a random uint between MinValue and MaxValue.\n\nULong - Generate a random ulong between MinValue and MaxValue.\n\nLong - Generate a random long between MinValue and MaxValue.\n\nShort - Generate a random short between MinValue and MaxValue.\n\nUShort - Generate a random ushort between MinValue and MaxValue.\n\nChar - Generate a random char between MinValue and MaxValue.\n\nChars - Generate a random chars between MinValue and MaxValue.\n\nString - Get a string of characters of a specific length.\n\nString2 - Get a string of characters with a specific length drawing characters from chars.\n\nHash - Return a random hex hash. Default 40 characters, aka SHA-1.\n\nBool - Get a random boolean.\n\nArrayElement<T> - Get a random array element.\n\nArrayElement - Get a random array element.\n\nArrayElements<T> - Get a random subset of an array.\n\nListItem<T> - Get a random list item.\n\nListItems<T> - Get a random subset of a List.\n\nCollectionItem<T> - Get a random collection item.\n\nReplaceNumbers - Replaces symbols with numbers.\n\nReplaceSymbols - Replaces each character instance in a string.\n\nReplace - Replaces symbols with numbers and letters. # = number, ? = letter, * = number or letter.\n\nClampString - Clamps the length of a string between min and max characters.\n\nEnum<T> - Picks a random Enum of T. Works only with Enums.\n\nShuffle<T> - Shuffles an IEnumerable source.\n\nWord - Returns a single word or phrase in English.\n\nWords - Gets some random words and phrases in English.\n\nWordsArray - Get a range of words in an array (English).\n\nGuid - Get a random GUID.\n\nUuid - Get a random GUID. Alias for Randomizer.Guid().\n\nRandomLocale - Returns a random locale.\n\nAlphaNumeric - Returns a random set of alpha numeric characters 0-9, a-z.\n\nHexadecimal - Generates a random hexadecimal string.\n\nWeightedRandom<T> - Returns a selection of T[] based on a weighted distribution of probability.\n\nAPI Extension Methods\n\nusing Bogus.Extensions.Belgium;\n\nBogus.Person.NationalNumber() - Rijksregisternummer / Num√©ro Nationale\n\nusing Bogus.Extensions.Brazil;\n\nBogus.Person.Cpf() - Cadastro de Pessoas F√≠sicas\n\nBogus.DataSets.Company.Cnpj() - Cadastro Nacional da Pessoa Jur√≠dica\n\nusing Bogus.Extensions.Canada;\n\nBogus.Person.Sin() - Social Insurance Number for Canada\n\nusing Bogus.Extensions.Denmark;\n\nBogus.Person.Cpr() - Danish Personal Identification number\n\nusing Bogus.Extensions.Finland;\n\nBogus.Person.Henkilotunnus() - Finnish Henkil√∂tunnus\n\nusing Bogus.Extensions.Italy;\n\nBogus.Person.CodiceFiscale() - Codice Fiscale\n\nBogus.DataSets.Finance.CodiceFiscale() - Codice Fiscale\n\nusing Bogus.Extensions.Norway;\n\nBogus.Person.Fodselsnummer() - Norwegian national identity number\n\nusing Bogus.Extensions.Poland;\n\nBogus.Person.Pesel() - Number of Powszechny Elektroniczny System Ewidencji Ludno≈õci (PESEL)\n\nBogus.DataSets.Company.Nip() - Numer identyfikacji podatkowej (NIP)\n\nBogus.DataSets.Company.Regon() - Number of Rejestr Gospodarki Narodowej (REGON)\n\nusing Bogus.Extensions.Portugal;\n\nBogus.Person.Nif() - N√∫mero de Identifica√ß√£o Fiscal (NIF)\n\nBogus.DataSets.Company.Nipc() - N√∫mero de Identifica√ß√£o de Pessoa Colectiva (NIPC)\n\nusing Bogus.Extensions.Romania;\n\nBogus.Person.Cnp() - Romanian Personal Identification number (CNP)\n\nusing Bogus.Extensions.Sweden;\n\nBogus.Person.Personnummer() - Swedish national identity number\n\nBogus.Person.Samordningsnummer() - Swedish coordination number\n\nusing Bogus.Extensions.UnitedKingdom;\n\nBogus.DataSets.Vehicle.GbRegistrationPlate() - GB Vehicle Registration Plate\n\nBogus.DataSets.Finance.SortCode() - Banking Sort Code\n\nBogus.DataSets.Finance.Nino() - National Insurance Number\n\nBogus.DataSets.Finance.VatNumber() - Generates a UK compatible VAT registration number\n\nBogus.DataSets.Address.CountryOfUnitedKingdom() - Country of the United Kingdom\n\nusing Bogus.Extensions.UnitedStates;\n\nBogus.Person.Ssn() - Social Security Number\n\nBogus.DataSets.Company.Ein() - Employer Identification Number\n\nusing Bogus.Distributions.Gaussian;\n\nRandomizer.GaussianInt() - Generate an int based on a specific normal distribution.\n\nRandomizer.GaussianFloat() - Generate a float based on a specific normal distribution.\n\nRandomizer.GaussianDouble() - Generate a double based on a specific normal distribution.\n\nRandomizer.GaussianDecimal() - Generate a decimal based on a specific normal distribution.\n\nAmazing Community Extensions\n\nAutoBogus (NuGet Package) by @nickdodd79 - Extends Bogus by adding automatic .RuleFor() creation and population capabilities.\n\nNaughtyStrings.Bogus (NuGet Package) by @SimonCropp - Extends Bogus with list of naughty strings which have a high probability of causing issues when used as user-input data. Examples:\n\n.SQLInjection() - Strings which can cause a SQL injection if inputs are not sanitized.\n\n.ScriptInjection() - Strings which attempt to invoke a benign script injection; shows vulnerability to XSS.\n\n.iOSVulnerabilities() - Strings which crashed iMessage in various versions of iOS.\n\n.KnownCVEsandVulnerabilities() - Strings that test for known vulnerabilities.\n\n.ServerCodeInjection() - Strings which can cause user to run code on server as a privileged user.\n\nand more!\n\nWaffleGenerator.Bogus (NuGet Package) by @SimonCropp - The Waffle Generator produces of text which, on first glance, looks like real, ponderous, prose; replete with clich√©s.\n\nNodaTime.Bogus (NuGet Package) by @SimonCropp - Adds support for NodaTime to Bogus.\n\nCountryData.Bogus (NuGet Package) by @SimonCropp - Wrapper around GeoNames Data. Examples:\n\n.Country().Name() - Random country name.\n\n.Country().CurrencyCode() - Random currency code.\n\n.Australia().Capital() - Country capital.\n\n.Country().Iceland().PostCode() - Random country post code.\n\nAustralianElectorates.Bogus (NuGet Package) by @SimonCropp - Wrapper around Australian Electoral Commission (AEC) data (https://www.aec.gov.au/). Examples:\n\n.AustralianElectorates().Electorate() - Random electorate.\n\n.AustralianElectorates().Name() - Random electorate name.\n\n.AustralianElectorates().CurrentMember() - Random current electorate member for parliament.\n\n.AustralianElectorates().CurrentMemberName() - Random name of current a electorate member for parliament.\n\n.AustralianElectorates().Member() - Random electorate member for parliament.\n\n.AustralianElectorates().MemberName() - Random name of a electorate member for parliament.\n\nBogus Premium Extensions!\n\nBogus Premium [Purchase Now!] by @bchavez\n\nYou can help support the Bogus open source project by purchasing a Bogus Premium license! With an active premium license you'll be supporting this cool open-source project. You'll also gain new superpowers that extended Bogus with new features and exclusive data sets! Check 'em out below!\n\nPremium: Bogus.Tools.Analyzer (NuGet Package) - Save time using this handy Roslyn analyzer to generate and detect missing .RuleFor() rules at development & compile time! This tool is included with the Bogus Premium license!\n\nPremium: Bogus.Locations (NuGet Package) - A dataset that contains real geographical information for places and things. Create fake GPS points and paths. Helpful for creating geodesic data for location-based aware apps.\n\nLocation\n\nAltitude - Generate a random altitude, in meters. Default max height is 8848m (Mount Everest). Heights are always positive.\n\nAreaCircle - Get a latitude and longitude within a specific radius in meters.\n\nDepth - Generate a random depth, in meters. Default max depth is -10994m (Mariana Trench). Depths are always negative.\n\nGeohash - Generates a random Geohash. See.\n\nPremium: Bogus.Healthcare (NuGet Package) - A data set for the Healthcare industry. Generate fake medical records, injuries, diagnosis, drugs, dosages, human anatomy, and ICD-9 medical codes. Especially helpful in HIPAA regulated environments!\n\nDrugs\n\nAdministration - Get how a drug should be administered. IE: oral, nasal, injection.\n\nDosage - Get a drug dosage with MG units\n\nDosageAmount - Get a drug dosage.\n\nDosageForm - Get the form of a drug. IE: tablet, capsule, gel.\n\nIngredient - Get a drug ingredient. IE: folic acid, magnesium hydroxide, ibuprofen.\n\nVitamin - Get a random vitamin.\n\nHuman\n\nBloodType - Get a random blood type. Ex: A+, OB\n\nBodyPartExternal - Get an external body part name. IE: Head, Arm, Leg.\n\nBodyPartInternal - Get an internal body part name. IE: Bladder, Lung, Heart.\n\nBodyRegion - Get a human body region. IE: Head and Neck, Thorax.\n\nBodySystem - Get a human body system. IE: Digestive, Nervous, Circulatory.\n\nDiagnosis - Shortcut to Icd9.DiagnosisLongDescription\".\n\nInfectiousDisease - Get an infectious disease. IE: Chickenpox, Polio, Zika Fever.\n\nPain - Get a human pain. Ex: Chest pain, Headache, Toothache.\n\nPlasma - Get a random plasma type. Ex: O, A, B, AB\n\nProcedure - Shortcut to Icd9.ProcedureLongDescription.\n\nIcd9\n\nDiagnosisCode - Get a ICD9 diagnosis code.\n\nDiagnosisEntry - Get a medical diagnosis.\n\nDiagnosisLongDescription - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n\nDiagnosisShortDescription - Get a short description of a medical diagnosis.\n\nProcedureCode - Get a ICD9 procedure code.\n\nProcedureEntry - Get a medical procedure.\n\nProcedureLongDescription - Get a medical procedure description.\n\nProcedureShortDescription - Get a short description of a medical procedure.\n\nIcd10\n\nDiagnosisCode - Get a ICD10 diagnosis code.\n\nDiagnosisEntry - Get a medical diagnosis.\n\nDiagnosisLongDescription - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n\nDiagnosisShortDescription - Get a short description of a medical diagnosis.\n\nProcedureCode - Get a ICD10 procedure code.\n\nProcedureEntry - Get a medical procedure.\n\nProcedureLongDescription - Get a medical procedure description.\n\nProcedureShortDescription - Get a short description of a medical procedure.\n\nMedical\n\nHospital - Get a random hospital.\n\nHospitalCity - Get a hospital city.\n\nHospitalName - Get a random hospital name. IE: UCLA Medical Center\n\nHospitalState - Get a hospital state.\n\nHospitalStreetAddress - Get a hospital street address.\n\nHospitalZipCode - Get a hospital ZipCode.\n\nPhrase - Get a random medical phrase.\n\nWord - Get a medical word.\n\nPremium: Bogus.Hollywood (NuGet Package)- A dataset for the Entertainment industry.\n\nMovies\n\nActorName - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n\nMovieCollection - Get a random movie collection. IE: Star Wars Collection, Indiana Jones Collection.\n\nMovieOverview - Get a random movie overview\n\nMovieReleaseDate - Get a random movie release date.\n\nMovieTagline - Get a random movie tagline.\n\nMovieTitle - Get a random movie title\n\nProduction - Get a production company.\n\nTv\n\nActorName - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n\nNetwork - Get a random TV network. IE: BBC, ABC, NBC, FOX.\n\nProduction - Get a production company\n\nSeries - Get a name of a TV series. IE: Rick and Morty, Silicon Valley, The Walking Dead\n\nPremium: Bogus.Text (NuGet Package) - A dataset that contains historical texts in the public domain. Create fake sentences from famous speeches, classic books, and law\n\nLiterature\n\nCommonSense - Text from \"Common Sense, by Thomas Paine (1776)\"\n\nJfkSpeech - Text from \"JFK's Inaugural Address\"\n\nKnowledge - Text from \"A Treatise Concerning the Principles of Human knowledge, by George Berkeley (1710)\"\n\nHelper Methods\n\nThe features shown below come standard with the Bogus NuGet package.\n\nIf you want to generate a Person with context relevant properties like an email that looks like it belongs to someone with the same first/last name, create a person!\n\n[Test] public void Create_Context_Related_Person() { var person = new Bogus.Person(); person.Dump(); } /* OUTPUT: { \"FirstName\": \"Lee\", \"LastName\": \"Brown\", \"UserName\": \"Lee_Brown3\", \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg\", \"Email\": \"Lee_Brown369@yahoo.com\", \"DateOfBirth\": \"1984-01-16T21:31:27.87666\", \"Address\": { \"Street\": \"2552 Bernard Rapid\", \"Suite\": \"Suite 199\", \"City\": \"New Haskell side\", \"ZipCode\": \"78425-0411\", \"Geo\": { \"Lat\": -35.8154, \"Lng\": -140.2044 } }, \"Phone\": \"1-500-790-8836 x5069\", \"Website\": \"javier.biz\", \"Company\": { \"Name\": \"Kuphal and Sons\", \"CatchPhrase\": \"Organic even-keeled monitoring\", \"Bs\": \"open-source brand e-business\" } } */\n\nReplace a formatted string with random numbers #, letters ?, or * random number or letter:\n\n[Test] public void Create_an_SSN() { var ssn = new Bogus.Randomizer().Replace(\"###-##-####\"); ssn.Dump(); var code = new Randomizer().Replace(\"##? ??? ####\"); code.Dump(); var serial = new Randomizer().Replace(\"**-****\"); serial.Dump(); } /* OUTPUT: \"618-19-3064\" \"39E SPC 0790\" \"L3-J9N5\" */\n\nParse Handlebars\n\nYou can also parse strings in the following format:\n\n[Test] public void Handlebar() { var faker = new Faker(); var randomName = faker.Parse(\"{{name.lastName}}, {{name.firstName}} {{name.suffix}}\"); randomName.Dump(); } /* OUTPUT: \"Roob, Michale PhD\" */\n\nThe name of a dataset is determined using DataCategory attribute or class name otherwise. (i.e PhoneNumber dataset in handlebars expression should be named as phone_number)\n\nYou can pass parameters to methods using braces:\n\n[Test] public void HandlebarWithParameters() { var faker = new Faker(); var randomName = faker.Parse(\"{{name.firstname(Female)}}, {{name.firstname(Male)}}\"); randomName.Dump(); } /* OUTPUT: \"Lindsay, Jonathan\" */\n\nImplicit and Explicit Type Conversion\n\nYou can also use implicit type conversion to make your code look cleaner without having to explicitly call Faker<T>.Generate().\n\nvar orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => f.IndexVariable++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Quantity, f => f.Random.Number(1,3)); Order testOrder1 = orderFaker; Order testOrder2 = orderFaker; testOrder1.Dump(); testOrder2.Dump(); /* OUTPUT: { \"OrderId\": 0, \"Item\": \"Computer\", \"Quantity\": 2 } { \"OrderId\": 1, \"Item\": \"Tuna\", \"Quantity\": 3 } */ //Explicit works too! var anotherOrder = (Order)orderFaker;\n\nBulk Rules\n\nSometimes writing .RuleFor(x => x.Prop, ...) can get repetitive, use the .Rules((f, t) => {...}) shortcut to specify rules in bulk as shown below:\n\npublic void create_rules_for_an_object_the_easy_way() { var faker = new Faker<Order>() .StrictMode(false) .Rules((f, o) => { o.Quantity = f.Random.Number(1, 4); o.Item = f.Commerce.Product(); o.OrderId = 25; }); Order o = faker.Generate(); }\n\nNote: When using the bulk .Rules(...) action, StrictMode cannot be set to true since individual properties of type T cannot be independently checked to ensure each property has a rule.\n\nUsing Enumerable.Range() and LINQ\n\nThe Enumerable.Range() and LINQ are a great supplement when creating data with Bogus. Here's how to generate a simple list of email addresses:\n\nvar faker = new Faker(\"en\"); var emailList = Enumerable.Range(1, 5) .Select(_ => faker.Internet.Email()) .ToList(); //OUTPUT: Gustave83@hotmail.com Evie33@gmail.com Abby_Wilkinson@yahoo.com Cecilia.Hahn@yahoo.com Jasen.Waelchi85@gmail.com\n\nAdvanced Topics, Guidance, and Best Practices\n\nDeterminism is a first class concept in Bogus. Bogus goes to great lengths so developers can generate the same sequence of data over multiple program executions. Bogus has two strategies of setting up deterministic behavior:\n\nGlobal Seed determinism through the Randomizer.Seed global static property.\n\nPros: Easy to get deterministic data setup quickly.\n\nCons: Code changes can impact other data values. Not so good for unit tests.\n\nLocal Seed determinism through instance properties and methods. Specifically,\n\nThe Faker<T>.UseSeed(int) method.\n\nThe .Random property on the Faker facade and DataSets.\n\nPros: Code changes can be isolated with minimal impact on determinism. Good for unit tests.\n\nCons: Requires some forethought in design.\n\nWhen Local Seed determinism is used to set a seed value, the global static source of randomness is ignored. This has some interesting implications as described below.\n\nUsing Global Seed determinism\n\nThe easiest way to get deterministic data values over multiple executions of a program is to set the Randomizer.Seed property as demonstrated below:\n\nRandomizer.Seed = new Random(1338); var orderIds = 0; var orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => orderIds++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5)); orderFaker.Generate(5).Dump();\n\nOrderId Item Quantity 0 Fish 3 1 Chair 1 2 Gloves 5 3 Shirt 4 4 Hat 4\n\nRe-running the code above with 1338 as a global static seed value will produce the same table of data over and over again.\n\nNext, add a new Description property to the Order class along with a new .RuleFor(o => o.Description, ..) rule and see the data changes:\n\nRandomizer.Seed = new Random(1338); var orderIds = 0; var orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => orderIds++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5)); orderFaker.Generate(5).Dump();\n\nOrderId Item Description Quantity 0 Fish Fantastic üö© 1 1 üö© Keyboard üö© Gorgeous üö© 5 2 üö© Shirt üö© Handcrafted üö© 3 3 üö© Tuna üö© Small üö© 1 4 üö© Table üö© Awesome üö© 3\n\nA couple of observations:\n\nOrder 0: Item value Fish remained the same.\n\nOrder 0: Quantity changed from 3 to 1.\n\nOrder 1: Item has changed from a Chair to a Keyboard.\n\nIn fact, every data value with a üö© icon has changed. This is due to the newly added property which has the effect of shifting the entire global static pseudo-random sequence off by +1. This rippling effect can be a problem if unit tests are expecting data values to remain the same. The following section below shows how we can improve the situation.\n\nUsing Local Seed determinism\n\nMaking use of the Faker<T>.UseSeed(int) method can help limit the impact of POCO schema changes on deterministic data values that span across an entire run. Consider the following code that uses a seed value for each instance of a POCO object:\n\nvar orderIds = 0; var orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => orderIds++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5)); Order SeededOrder(int seed){ return orderFaker.UseSeed(seed).Generate(); } var orders = Enumerable.Range(1, 5) .Select(SeededOrder) .ToList(); orders.Dump();\n\nOrderId Item Quantity 0 Bike 1 1 Cheese 3 2 Gloves 4 3 Bacon 5 4 Pants 2\n\nNext, adding the Description property to the Order class and examining the output:\n\nvar orderIds = 0; var orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => orderIds++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5)); Order SeededOrder(int seed){ return orderFaker.UseSeed(seed).Generate(); } var orders = Enumerable.Range(1,5) .Select(SeededOrder) .ToList(); orders.Dump();\n\nOrderId Item Description Quantity 0 Bike Ergonomic üö© 3 1 Cheese Fantastic üö© 1 2 Gloves Handcrafted üö© 5 3 Bacon Tasty üö© 3 4 Pants Gorgeous üö© 2\n\nProgress! This time only the Quantity data values with the üö© icon have changed. The Item column remained the same before and after the new addition of the Description property.\n\nWe can further prevent the Quantity data values from changing by moving the RuleFor(o => o.Description,...) rule line to the end of the Faker<Order> declaration as shown below:\n\nvar orderIds = 0; var orderFaker = new Faker<Order>() .RuleFor(o => o.OrderId, f => orderIds++) .RuleFor(o => o.Item, f => f.Commerce.Product()) .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5)) .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()); //New Rule Order MakeOrder(int seed){ return orderFaker.UseSeed(seed).Generate(); } var orders = Enumerable.Range(1,5) .Select(MakeOrder) .ToList(); orders.Dump();\n\nOrderId Item Quantity Description 0 Bike 1 Practical 1 Cheese 3 Rustic 2 Gloves 4 Refined 3 Bacon 5 Awesome 4 Pants 2 Gorgeous\n\nMuch success! üíØ üéâ The Item and Quantity values remain unchanged! The new Description property is added to the POCO object without any impact to other deterministic data values.\n\nAs a best practice, to achieve maximum deterministic behavior and unit test robustness with Bogus:\n\n‚úîÔ∏è Add new RuleFor rules last in Faker<T> declarations.\n\n‚úîÔ∏è Avoid changing existing rules.\n\n‚úîÔ∏è Always use Faker<T>.UseSeed(int) to avoid using the global static seed as a source for randomness.\n\n‚úîÔ∏è When possible assert that a value exists, not the literal value itself. In other words,\n\n// Don't do this: firstOrder.Item.Should().Be(\"Bike\"); // Instead, do this: firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n\nThe Faker facade and individual DataSets can also be prepared to use local seeds as well. The following shows how to set up the Faker facade and DataSets to use local seeds:\n\nvar faker = new Faker(\"en\") { Random = new Randomizer(1338) }; var lorem = new Bogus.DataSets.Lorem(\"en\"){ Random = new Randomizer(1338) }; faker.Lorem.Word().Dump(); lorem.Word().Dump(); //OUTPUT: minus minus\n\nThe .Random property can be set multiple times without any ill effects.\n\nVersioning can effect determinism\n\nUpdating to new versions of Bogus on NuGet can effect determinism too. For example, when Bogus updates locales from faker.js or issues bug fixes, sometimes deterministic sequences can change. Changes to deterministic outputs are usually highlighted in the release notes. Changes to deterministic outputs is also considered a breaking change. Bogus generally follows semantic versioning rules. For example:\n\nVersion Description Bogus v25.0.1 Initial version. Bogus v25.0.2 No change to deterministic outputs or breaking changes. Possible bug fixes & improvements. Bogus v26.0.1 Deterministic outputs may have changed or may include other breaking changes.\n\nAs a general rule of thumb,\n\n‚úîÔ∏è For maximum stability for unit tests, stay within the same major versions of Bogus.\n\n‚úîÔ∏è For those wanting to stay up to date, assert that a value exists, not a literal value itself. In other words,\n\n// Don't do this: firstOrder.Item.Should().Be(\"Bike\"); // Instead, do this: firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n\nDeterministic Dates and Times\n\nBogus can generate deterministic dates and times. However, generating deterministic dates and times requires the following:\n\nSetting up a seed value.\n\nSetting up a time reference for your Faker object instance.\n\nThe following code shows how to setup deterministic dates and times:\n\n// Faker[T]: Set a local seed and a time reference var fakerT = new Faker<Order>() .UseSeed(1338) .UseDateTimeReference(DateTime.Parse(\"1/1/1980\")) .RuleFor(o => o.SoonValue, f => f.Date.Soon()) .RuleFor(o => o.RecentValue, f => f.Date.Recent()); fakerT.Generate().Dump(); // { \"SoonValue\": \"1980-01-01T17:33:05\", // \"RecentValue\": \"1979-12-31T14:07:31\" } // Faker: Set a local seed and a time reference var faker = new Faker { Random = new Randomizer(1338), DateTimeReference = DateTime.Parse(\"1/1/1980\") }; faker.Date.Soon(); // \"1980-01-01T17:33:05\" faker.Date.Recent(); // \"1979-12-31T14:07:31\"\n\nWith a time reference set and a seed, dates and times should be deterministic across multiple runs of a program.\n\nF# and VB.NET Examples\n\nThe Fabulous F# Examples\n\nUsing the Faker facade with immutable F# record types:\n\ntype Customer = { FirstName : string LastName : string Age : int Title : string } //The faker facade let f = Faker(); let generator() = { FirstName = f.Name.FirstName() LastName = f.Name.LastName() Age = f.Random.Number(18,60) Title = f.Name.JobTitle() } generator() |> Dump |> ignore (* OUTPUT: FirstName = \"Russell\" LastName = \"Nader\" Age = 34 Title = \"Senior Web Officer\" *)\n\nUsing the Faker<T> class with immutable F# record types:\n\ntype Customer = { FirstName : string LastName : string Age : int Title : string } let customerFaker = Bogus .Faker<Customer>() .CustomInstantiator(fun f -> { FirstName = f.Name.FirstName() LastName = f.Name.LastName() Age = f.Random.Number(18,60) Title = f.Name.JobTitle() }) customerFaker.Generate() |> Dump |> ignore (* OUTPUT: FirstName = \"Sasha\" LastName = \"Roberts\" Age = 20; Title = \"Internal Security Specialist\" *)\n\nUsing the Faker<T> class with mutable classes in F#:\n\nopen Bogus type Customer() = member val FirstName = \"\" with get, set member val LastName = \"\" with get, set member val Age = 0 with get, set member val Title = \"\" with get, set let faker = Faker<Customer>() //Make a rule for each property .RuleFor( (fun c -> c.FirstName), fun(f:Faker) -> f.Name.FirstName() ) .RuleFor( (fun c -> c.LastName), fun(f:Faker) -> f.Name.LastName() ) //Or, alternatively, in bulk with .Rules() .Rules( fun f c -> c.Age <- f.Random.Int(18,35) c.Title <- f.Name.JobTitle() ) faker.Generate() |> Dump |> ignore (* OUTPUT: FirstName: Jarrell LastName: Tremblay Age: 32 Title: Senior Web Designer *)\n\nThe Very Basic VB.NET Example\n\nImports Bogus Public Class Customer Public Property FirstName() As String Public Property LastName() As String Public Property Age() As Integer Public Property Title() As String End Class Sub Main Dim faker As New Faker(Of Customer) '-- Make a rule for each property faker.RuleFor( Function(c) c.FirstName, Function(f) f.Name.FirstName) _ .RuleFor( Function(c) c.LastName, Function(f) f.Name.LastName) _ _ .Rules( Sub(f, c) '-- Or, alternatively, in bulk with .Rules() c.Age = f.Random.Int(18,35) c.Title = f.Name.JobTitle() End Sub ) faker.Generate.Dump End Sub ' OUTPUT: ' FirstName: Jeremie ' LastName: Mills ' Age: 32 ' Title: Quality Supervisor\n\nBuilding From Source\n\nThe following section is only useful for people looking to contribute to Bogus or make custom modifications to Bogus. This section includes information about building Bogus from source code and is not required to operate or run Bogus in .NET applications.\n\nThe minimum requirements to build Bogus from source code are as follows:\n\nWindows 11 or later.\n\nGit for Windows v2.39.2 or later.\n\n.NET Framework v4.7.2.\n\n.NET SDK\n\nLTS SDK v8.0.100\n\nLTS SDK v6.0.417\n\nOptional:\n\nVisual Studio 2022 or later - IDE with C# 10 support.\n\nBuild Instructions\n\nDownload the source code.\n\nOpen command prompt and run build.cmd:\n\nbuild restore - restores all project references.\n\nbuild compile - the main dotnet build task.\n\nbuild clean - cleans sources and files.\n\nbuild zip - creates a nice zip file with debug and release binaries.\n\nbuild pack - builds NuGet packages.\n\nbuild test - runs all unit tests.\n\nThe following folders will be created depending on the build task executed:\n\n\\__compile - binary output folder for the compiler.\n\n\\__package - output folder for zip and NuGet packages.\n\n\\__test - test results folder.\n\nBuild Environment Variables\n\nset FORCE_VERSION=1.2.3\n\nIf FORCE_VERSION environment variable is set with a semantic version number (eg: x.y.z), the build tasks will use the FORCE_VERSION to produce builds with the exact version number. Useful for testing out-of-band custom builds. However, it is not possible to reproduce exact binary equivalents of released NuGet packages because packages release on NuGet contain assemblies that are digitally signed with assembly signing enabled. The public does not have access to the signing key.\n\nRebundling Locales\n\nRe-bundling the latest locale data from faker.js requires the following software installed:\n\nVolta 1.1.1 or later:\n\nInstalls NodeJS v12.18.1 or higher.\n\ngulp v4 or higher.\n\nSteps to re-bundle locale data from faker.js:\n\ngit clone https://github.com/bchavez/Bogus.git\n\ncd Bogus\n\ngit submodule init\n\ngit submodule update\n\nEnsure NodeJS and gulp are properly installed.\n\ncd Source\\Builder\n\nnpm install to install required dev dependencies.\n\nnpx gulp importLocales to regenerate locales in Source\\Bogus\\data.\n\nFinally, run build.cmd.\n\nMIT License\n\nCreated by Brian Chavez.\n\nA big thanks to GitHub and all contributors:\n\nAnton Georgiev\n\nMartijn Laarman\n\nAnrijs Vitolins\n\nPi Lanningham\n\nJvanderStad\n\nGiuseppe Dimauro"
    }
}