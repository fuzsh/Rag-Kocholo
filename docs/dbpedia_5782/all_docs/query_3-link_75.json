{
    "id": "dbpedia_5782_3",
    "rank": 75,
    "data": {
        "url": "https://help.forcepoint.com/dlp/90/policies_classifiers/EF6284D2-89D8-4794-8216-693870B2870C.html",
        "read_more_link": "",
        "language": "en",
        "title": "Script classifiers",
        "top_image": "https://help.forcepoint.com/favicon.ico",
        "meta_img": "https://help.forcepoint.com/favicon.ico",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This section contains the full list of predefined script classifiers.",
        "meta_lang": "en",
        "meta_favicon": "https://help.forcepoint.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": ".htpasswd file that uses bcrypt, MD5, or SHA-1 hash function (Default). Detection of .htpasswd file that use the bcrypt, MD5, SHA-1, or salted SHA-1 hash functions. All lines in the file should be valid hash lines. Characters statistical analysis is used in order to prevent unintended matches. An example for a bcrypt line is “admin:$2y$14$mhtB34wX83QuzRhTu.4fqu.75XpELvXXa C.bCbYzbugMw2H/RyTcu”. .htpasswd file that uses bcrypt, MD5, or SHA-1 hash function (Narrow) Detection of .htpasswd file that use the bcrypt, MD5, SHA-1, or salted SHA-1 hash functions. All lines in the file should be valid hash lines. At least 4 lines are needed in order to have a match. Characters statistical analysis is used in order to prevent unintended matches. An example for a bcrypt line is “admin:$2y$14$mhtB34wX83QuzRhTu.4fqu.75XpELvXXa C.bCbYzbugMw2H/RyTcu”. .htpasswd file that uses bcrypt, MD5, or SHA-1 hash function (Wide) Detection of .htpasswd file that use the bcrypt, MD5, SHA-1, or salted SHA-1 hash functions (e.g., “admin:$2y$14$mhtB34wX83QuzRhTu.4fqu.75XpELvXXa C.bCbYzbugMw2H/RyTcu”). .htpasswd file that uses the crypt hash function (Default) Detection of .htpasswd file that use the crypt hash function. All lines in the file should be valid hash lines. At least 4 lines are needed in order to have a match. Characters statistical analysis is used in order to prevent unintended matches. An example for a crypt line is “admin:uBbBQTqv1Kx9M”. .htpasswd file that uses the crypt hash function (Narrow) Detection of .htpasswd file that use the bcrypt, MD5, SHA-1 or salted SHA-1 hash functions. All lines in the file should be valid hash lines. At least 8 lines are needed in order to have a match. Characters statistical analysis is used in order to prevent unintended matches. An example for a crypt line is “admin:uBbBQTqv1Kx9M”. .htpasswd file that uses the crypt hash function (Wide) Detection of .htpasswd file that use the crypt hash function. At least 3 lines are needed in order to have a match. An example for a crypt line is “admin:uBbBQTqv1Kx9M”. 1st Magnetic Track Detection of the string encoded on the 1st magnetic track of a credit card, containing the card number, and personal information of the card holder. 1st Magnetic Track (Chinese cards) Detection of the string encoded on the 1st magnetic track of a Chinese credit card, containing the card number, and personal information of the card holder. 2nd Magnetic Track Detection of the string encoded on the 2nd magnetic track of a credit card, containing the CCN, PIN, expiration date, and other card issuer data. 2nd Magnetic Track (Chinese cards) Detection of the string encoded on the 2nd magnetic track of a chinese credit card, containing the CCN, PIN, expiration date, and other card issuer data. 3rd Magnetic Track Detection of the string encoded on the 3rd magnetic track of a credit card, containing the CCN, PIN, and other card issuer data. 3rd Magnetic Track (Chinese cards) Detection of the string encoded on the 3rd magnetic track of a Chinese credit card, containing the CCN, PIN, and other card issuer data. Slovak and Czech 9-Digit Birth Number (Default) Detects valid 9-digit delimited or un-delimited Slovak and Czech birth numbers (Rodne Cislo). At least half of all 9-digit numbers need to be valid. For example “450819001”. Slovak and Czech 10- Digit Birth Number (Default) Detects valid 10-digit delimited or un-delimited Slovak and Czech birth numbers (Rodne Cislo). At least half of all 10-digit numbers need to be valid. For example “8501306605”. Aadhaar Number (Default) Detects Indian Aadhaar number. Aadhaar number consist of 12 digits with last digit being a check digit, where at least 50% of the numbers are valid. For example: “499118665246”. Aadhaar Number (Wide) Detects Indian Aadhaar number. Aadhaar number consist of 12 digits with last digit being a check digit. For example: “499118665246”. Aadhaar Number Near Term Detects Indian Aadhaar number. Aadhaar number consist of 12 digits with last digit being a check digit, near a term. For example: “aadhaar 499118665246”. ActionScript source code Detection of source code content written in ActionScript, employing context-sensitive lexical analysis, patterns, and structures. Australian Address\n\nDetects Australian addresses.\n\nUses several address formats such as number followed by a word and then a term that relates to a street (e.g., St., Rd., Ave.)\n\nFor example: 12 Brigadoon St.\n\nAustralian Business Number (Default)\n\nDetects Australian Business Numbers (ABN).\n\nLooks for 11-digit numbers that follow the ABN rules.\n\nIf more than 3 valid ABNs are found, the classifier determines the percentage of valid ABNs to 11-digit numbers.\n\nIf fewer than 4 valid ABNs are found, the classifier looks for ABN-related terms, such as ‘ABN’ or ‘Australian Business Number’, in proximity to the numbers found.\n\nFor example: ABN: 12345678900\n\nAustralian Business Number (Wide)\n\nDetects Australian Business Numbers (ABNs).\n\nLooks for 11-digit numbers that follow the ABN rules. For example: 12345678900.\n\nIf one or more ABNs are found, the rule is triggered.\n\nAustralian Medicare Number Near Term Detects Australian Medicare numbers. Australian Medicare numbers consist of 10/11 numbers with 9th digit being a check digit, near a term. For example: “5438900451/1”, “5438900451”. Australian Names (Default)\n\nDetects full Australian names.\n\nUses first-name and last-name dictionaries as well as internal dictionaries to identify valid full names. Weights case (John Smith vs. john smith) and honorifics (Dr., Mr., Mrs.). Uses a moderate threshold to signify a match. For example, using the default classifier, ‘John Smith’, ‘john Smith’, and ‘dr. john smith’ trigger the rule, but ‘john smith’ does not.\n\nUse the ‘Default’ classifier to balance between false positives and false negatives.\n\nAustralian Names (Narrow)\n\nDetects full Australian names.\n\nUses first-name and last-name dictionaries as well as internal dictionaries to identify valid full names. Weights case (John Smith vs. john smith) and honorifics (Dr., Mr., Mrs.). Uses a high threshold to signify a match. For example, using the narrow classifier, only ‘John Smith’ triggers the rule. ‘john Smith’, ‘dr. john smith’, and ‘john smith’ do not. Use the ‘Narrow’ classifier to reduce the false positives.\n\nAustralian Names (Wide)\n\nDetects full Australian names.\n\nUses first-name and last-name dictionaries as well as internal dictionaries to identify valid full names. Weights case (John Smith vs. john smith) and honorifics (Dr., Mr., Mrs.). Uses a low threshold to signify a match. For example, using the wide classifier, all permutations of ‘John Smith’ trigger the rule, including ‘john Smith’, ‘dr. john smith’, and ‘john smith’. Use the ‘Wide’ classifier to reduce the false negatives.\n\nAustralian Tax File Number (Default) Detects valid nine-digit Australian Tax File Numbers (TFN). At least 40% of the nine-digit numbers in the text must be valid; for example, “565051611”. Australian Tax File Number (Wide) Detects valid nine-digit Australian Tax File Numbers (TFN); for example, “565051611”. Australian Tax File Number Near Term Detects valid nine-digit Australian Tax File Numbers (TFN) near a support term; for example, “TFN: 565051611”. Austrian Social Security Number (Wide) Detects valid 10-digit Austrian social security numbers (Sozialversicherungsnummern). For example: “1237 010180”. Austrian Social Security Number (Default) Detects valid 10-digit Austrian social security numbers (Sozialversicherungsnummern). At least 30% of the 10-digit numbers in the text must be valid. For example: “1237 010180”. Austrian Social Security Number Near Term Detects valid 10-digit Austrian social security numbers (Sozialversicherungsnummern) near a support term in English or German. For example: “Sozialversicherungsnummer 1237010180”. AWS Access Key ID Near Term Detects AWS Access Key ID Numbers. The AWS Access Key contains the string “AKIA” followed by 16 characters, near a term. For example: “Access Key ID: AKIAJM4DOPAAJWLUJ2PQ”. AWS Access Key ID (Wide) Detects AWS Access Key ID Numbers. The AWS Access Key contains the string “AKIA” followed by 16 characters. For example: “AKIAJM4DOPAAJWLUJ2PQ”. Belgium: ID Card Number Detection of validated Belgium ID Card numbers. Brazilian CPF Number (Default) Detects Brazilian CPF numbers. Brazilian CPF number consist of 11 digits with the last two digits being a check digits, where at least 50% of the numbers are valid. For example: “837.717.287-97”. Brazilian CPF Number Near Terms Detects Brazilian CPF numbers. Brazilian CPF number consist of 11 digits with the last two digits being a check digits, near a term. For example: “CPF 837.717.287-97”. Brazilian CPF Number (Wide) Detects Brazilian CPF numbers. Brazilian CPF number consist of 11 digits with the last two digits being a check digits. For example: “837.717.287-97”. Brazil: RG Numbers (Default) Detection of RG (Registro Geral) numbers. Brazil: RG Numbers (Narrow) Detection of RG (Registro Geral) numbers when appearing with support terms. Brazilian Name Detection of Brazilian full names. Bulgarian Unified Civil Number (Wide) Detects valid 10-digit Bulgarian unified civil numbers. For example: “6909088552”. Bulgarian Unified Civil Number (Default) Detects valid 10-digit Bulgarian unified civil numbers. At least 50% of the 10-digit numbers in the text must be valid. For example: “6909088552”. Bulgarian Unified Civil Number Near Term Detects valid 10-digit Bulgarian unified civil numbers near a support term in Bulgarian or English. For example: “Unified Civil Number 6909088552”. C++ Source Code (Wide) Detection of C++ source code. At least 50 percent of the non- empty lines in the file should be valid C++ lines and at least 1 unmistakable C++ line should be detected. C++ Source Code (Default) Detection of C++ source code. At least 70 percent of the non- empty lines in the file should be valid C++ lines and at least 3 unmistakable C++ line should be detected. CAD x_t text format Detection of CAD x_t text files Canadian Names (Default) Detection of Canadian full names. Canadian Names (Wide) Detection of Canadian full names. CCN - for printer agent Detection of valid credit card numbers, employing context sensitive lexical analysis and statistical analysis of patterns, taking into account possible errors that may be induced by the OCR software. CDR Detection of Call Detail Records with information like source phone number, destination phone number, call date, duration, etc. CDR: headers Detection of Call Detail Records by looking for column headers related to information such as source phone number, destination phone number, call date, duration, etc. Chilean National Identity Number (RUN/RUT) (Wide) Detects valid case-insensitive 9-character Chilean National Identity Numbers (RUN) and Tax Identification Numbers (RUT) that consist of 8 digits followed by a digit or the letter \"K\". For example: \"15414638-5\". Chilean National Identity Number (RUN/RUT) (Default) Detects valid case-sensitive 9-character Chilean National Identity Numbers (RUN) and Tax Identification Numbers (RUT) that consist of 8 digits followed by a digit or the letter \"K\". At least 30% of the similar 9-character numbers in the text must be valid. For example: \"15414638-5\". Chilean National Identity Number (RUN/RUT) Near Term Detects valid 9-character Chilean National Identity Numbers (RUN) and Tax Identification Numbers (RUT) that consist of 8 digits followed by a digit or the letter \"K\", near a support term in Spanish or English. For example: \"Rol Unico Nacional 15414638-5\". Chinese Credit Cards (Default) Detection of credit card numbers used in the People's Republic of China employing various heuristics involving credit card- related terms and use of delimiters. By default, only the first 6 digits and the last 4 digits are shown in the reports. Chinese Credit Cards (Narrow) Detection of credit card numbers used in the People's Republic of China. Requires additional evidence, such as credit card related terms in proximity, in order to qualify number as a credit card number. By default, only the first 6 digits and the last 4 digits are shown in the reports. Chinese Credit Cards (Wide) Detection of potential credit card numbers used in the People's Republic of China, based only on format and validation. This classifier may cause false-positives. By default, only the first 6 digits and the last 4 digits are shown in the reports. Chinese Surnames Detection of common Hong Kong surnames. Colombian ID Number Near Term (Default) Detects 7- or 8-digit Citizenship Card ID Numbers (Cedula de Ciudadania) or 10-digit Unique Personal Identification Number (NUIP) near a support term in Spanish or English. For example: \"Cedula: 1129572839\". Colombian ID Number Near Term (Wide) Detects 7- or 8-digit Citizenship Card ID Numbers (Cedula de Ciudadania) or 10-digit Unique Personal Identification Number (NUIP) near a support term in Spanish or English. Possible short support terms include \"CC\" and \"ID\". For example: \"CC: 1129572839\". Confidential Header/ Footer with Expiration Date Detection of documents with confidential data in the header or footer that includes an American-formatted date (MM-DD- YYYY). Contract Reference of Secretaria de Seguridad Publica (SSP) Detection of Contract Nomenclature of Secretaria de Seguridad Publica (SSP). Costa Rican ID Number Near Term (Default) Detects of 9-digit Identification Numbers (Numero de Cedula Identidad) that may be preceded by the digit \"0\", near a permissive support term in Spanish or English. For example: \"Cedula: 9-0071-5946\". Costa Rican ID Number Near Term (Narrow) Detects of 9-digit Identification Numbers (Numero de Cedula Identidad) that may be preceded by the digit \"0\", near a support term in Spanish or English. For example: \"Cedula de Identidad: 9-0071-5946\". Costa Rican Legal ID Number Near Term (Default) Detects of 10- or 12-digit Legal Identification Numbers (Numero de Cedula Juridica) that may be preceded by the digit \"0\", near a permissive support term in Spanish or English. For example: \"Cedula: 3 101 981567\". Costa Rican Legal ID Number Near Term (Narrow) Detects of 10- or 12-digit Legal Identification Numbers (Numero de Cedula Juridica) that may be preceded by the digit \"0\", near a support term in Spanish or English. For example: \"Cedula Juridica: 3-101-981567\". Count attachments Used to count the number of attachments and/or recipients. Credit Card Magnetic Tracks Detection of the strings encoded on 1st. 2nd and 3rd magnetic tracks of a credit card. Credit Card Numbers - Wide Minus Default Detection of potential credit card numbers, based only on format and validation, may cause false-positives. Detects all CCNs that belong to 'wide' sensitivity and not to 'default'. By default, only the first 6 digits and the last 4 digits are shown in the reports. This classifier uses a C++ auto-translation of Python and should be faster. Credit Card Numbers (Default) Detection of credit card numbers employing various heuristics involving credit card related terms and use of delimiters. By default, only the first 6 digits and the last 4 digits are shown in the reports. This classifier uses a C++ auto-translation of Python and should be faster. Credit Card Numbers (Narrow) Detection of credit card numbers. Requires additional evidence, such as credit card related terms in proximity, in order to qualify number as a credit card number. By default, only the first 6 digits and the last 4 digits are shown in the reports. This classifier uses a C++ auto-translation of Python and should be faster. Credit Card Numbers (Wide) Detection of potential credit card numbers, based only on format and validation, may cause false-positives. By default, only the first 6 digits and the last 4 digits are shown in the reports. This classifier uses a C++ auto-translation of Python and should be faster. Credit Cards - Wide Minus Default Detection of potential credit card numbers, based only on format and validation, may cause false-positives. Detects all CCNs that belong to 'wide' sensitivity and not to 'default'. By default, only the first 6 digits and the last 4 digits are shown in the reports. Credit Cards (Default) Detection of credit card numbers employing various heuristics involving credit card related terms and use of delimiters. By default, only the first 6 digits and the last 4 digits are shown in the reports. Credit Cards (Extra- Wide) Detection of potential credit-card-numbers, based only on format and validation. Credit Cards (Narrow) Detection of credit card numbers. Requires additional evidence, such as credit card related terms in proximity, in order to qualify number as a credit card number. By default, only the first 6 digits and the last 4 digits are shown in the reports. Credit Cards (Wide) Detection of potential credit card numbers, based only on format and validation, may cause false-positives. By default, only the first 6 digits and the last 4 digits are shown in the reports. Credit Cards Pattern Detection of potential credit card number patterns based only on format (without validation). Credit Cards: American Express Detection of valid American Express credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Bankcard Detection of valid Bankcard credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Diners Detection of valid Diners credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Discover Detection of valid Discover credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Enroute Detection of valid Enroute credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards Isracard (Default) Detection of valid Isracard credit card numbers, where at least 30% of the numbers are valid. By default, only the last 4 digits are shown in the reports. Credit Cards Isracard Near Term Detection of valid Isracard credit card numbers, when appearing together with an Isracard related term in English or Hebrew. By default, only the last 4 digits are shown in the reports. Credit Cards Isracard (Wide) Detection of valid Isracard credit card numbers. By default, only the last 4 digits are shown in the reports. Credit Cards: JCB 1sr Detection of valid JCB credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: JCB 2nd Detection of valid JCB credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Maestro, Switch or Solo Detection of valid Maestro, Switch or Solo credit card numbers employing various heuristics involving credit card related terms in English and Russian, and use of delimiters. Credit Cards: Master Card Near Term Detection of valid MasterCard credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: RuPay Detection of valid Rupay debit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: User- Defined IIN (Wide) Detects potential credit card numbers, based only on format and validation. A list of allowed Issuer Identification Numbers (IIN) is read from the file CCN_IIN_Valid.csv, and a list of unallowed credit card numbers is read from the file CCN_Exceptions.csv. The files reside in the /policies_store/ policies/scripts/ subdirectory where Forcepoint DLP is installed, and can be edited. Deploy settings in the Security Manager to apply any changes. This classifier may cause false positives. Credit Cards: User- Defined IIN (Default) Detects valid credit card numbers employing various heuristics involving credit-card-related terms and use of delimiters. A list of allowed Issuer Identification Numbers (IIN) is read from the file CCN_IIN_Valid.csv, and a list of unallowed credit card numbers is read from the file CCN_Exceptions.csv. The files reside in the /policies_store/policies/scripts/ subdirectory where Forcepoint DLP is installed, and can be edited. Deploy settings in the Security Manager to apply any changes. Credit Cards: User- Defined IIN (Narrow) A restrictive detection of credit card numbers, tuned to minimize false positives. This rule requires additional evidence, such as credit-card-related terms in proximity, in order to qualify a number as a credit card number. A list of allowed Issuer Identification Numbers (IIN) is read from the file CCN_IIN_Valid.csv, and a list of unallowed credit card numbers is read from the file CCN_Exceptions.csv. The files reside in the /policies_store/policies/scripts/ subdirectory where Forcepoint DLP is installed, and can be edited. Deploy settings in the Security Manager to apply any changes. Credit Cards: Visa Detection of valid Visa credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Credit Cards: Visa with 13 digits Detection of valid 13 digit Visa credit card numbers employing various heuristics involving credit card related terms and use of delimiters. Croatian Personal identification number (Wide) Detects valid 11-digit Personal identification numbers. For example “92103795594”. Croatian Personal identification number (Default) Detects valid 11-digit Personal identification numbers. At least 70% of the 11-digit numbers in the text need to be valid. For example “92103795594”. Croatian Personal identification number Near Term Detects valid 11-digit Personal identification numbers near a support term. For example “Osobni identifikacijski broj 92103795594”. Cumulative HTTP number of Posts Determines how many posts should exist before they are considered suspicious. This will only work on HTTP channel. Cumulative HTTP number of Posts - Categorized URLs Determines how many posts should exist before they are considered suspicious. This will only work on HTTP channel. Thresholds are configured for posting to categorized URLs. Cumulative HTTP number of Posts - Uncategorized URLs Determines how many posts should exist before they are considered suspicious. This will only work on HTTP channel. Thresholds are configured for posting to uncategorized URLs. Cumulative HTTP Post Size Determines which posts (according to size) will be counted. This will only work on HTTP channel. Cumulative HTTP Post Size - Categorized URLs Determines which posts (according to size) will be counted. This will only work on HTTP channel. Thresholds are configured for posting to categorized URLs. Cumulative HTTP Post Size - Uncategorized URLs Determines which posts (according to size) will be counted. This will only work on HTTP channel. Thresholds are configured for posting to uncategorized URLs. CUSIP Numbers Detection of validated CUSIP numbers. Customizable IDs Detection of ID numbers. The “ID Number pattern” parameter is the only mandatory parameter. CV and Resume in Chinese (Wide) A permissive classifier for detection of resumes and CVs in Chinese, using location-sensitive lexical analysis of terms and patterns common in such documents. CV and Resume in Chinese (Default) Detection of resumes and CVs in Chinese, using location- sensitive lexical analysis of terms and patterns common in such documents. CV and Resume in Chinese (Narrow) A restrictive classifier for detection of resumes and CVs in Chinese, using location-sensitive lexical analysis of terms and patterns common in such documents. CV and Resume in English Detection of resumes and CVs in English, using location- sensitive lexical analysis of terms and patterns common in such documents. CV and Resume in Russian or Ukrainian Detection of resumes and CVs in Russian or Ukrainian, using location-sensitive lexical analysis of terms and patterns common in such documents. Cypriot Tax Identification Code Near Term Detects Cypriot Tax Identification Codes near a support term in Greek or English. For example: “T.I.C. 12000017M”. Cyrillic User-Defined Weighted Dictionary (non-unique) Detection of weighted Cyrillic keywords, where each term is counted according to the number of appearances. The terms and weights are supplied from an external file (‘weighted_sections_Cyrillic_dictionary_unique.txt’), each dictionary in a separate section. In order to use it, insert your terms according to the example, and rename the section name in the script classifier parameter. Consider terms unique appearances. Adding wildcard (‘*’) in the beginning/end of the term, allow detecting regardless of the suffix/prefix - (up to 8 Cyrillic characters). Cyrillic User-Defined Weighted Dictionary (non-unique) with EP Encryption Detection of weighted Cyrillic keywords, where each term is counted according to the number of appearances. The terms and weights are supplied from an external file (‘weighted_sections_Cyrillic_dictionary_unique.txt’), each dictionary in a separate section. In order to use it, insert your terms according to the example, and rename the section name in the script classifier parameter. Consider terms unique appearances. Adding wildcard (‘*’) in the beginning/end of the term, allow detecting regardless of the suffix/prefix - (up to 8 Cyrillic characters). Cyrillic User-Defined Weighted Dictionary (unique) Detection of weighted Cyrillic keywords, where each term is counted only once. The terms and weights are supplied from an external file (‘weighted_sections_Cyrillic_dictionary_unique.txt’), each dictionary in a separate section. In order to use it, insert your terms according to the example, and rename the section name in the script classifier parameter. Consider terms unique appearances. Adding wildcard (‘*’) in the beginning/end of the term, allow detecting regardless of the suffix/prefix - (up to 8 Cyrillic characters). Cyrillic User-Defined Weighted Dictionary (unique) with EP Encryption Detection of weighted Cyrillic keywords, where each term is counted only once. The terms and weights are supplied from an external file (‘weighted_sections_Cyrillic_dictionary_unique.txt’), each dictionary in a separate section. In order to use it, insert your terms according to the example, and rename the section name in the script classifier parameter. Consider terms unique appearances. Adding wildcard (‘*’) in the beginning/end of the term, allow detecting regardless of the suffix/prefix - (up to 8 Cyrillic characters). Danish Account Numbers (Default) Detection of Danish bank account numbers, when found in proximity to bank account related terms. Danish Account Numbers (Narrow) Detection of strictly formatted Danish bank account numbers, when found in proximity to bank account related terms. Danish Account Numbers (Wide) Detection of Danish bank account numbers. Date Of Birth Detection of dates of birth. Date Of Birth (ages 10- 90) Detection of dates of birth for ages in the range 10-90 without support terms. Date Of Birth (ages 20- 65) Detection of dates of birth for ages in the range 20-65 without support terms. Denmark: CPR Number (Default) Detection of at least 5 CPR numbers, or at least 1 CPR with term such as “CPR”. Denmark: CPR Number (Narrow) Detection of at least 1 Danish CC number with a term or at least 10 without terms. Denmark: CPR Number (Wide) Detection of CPR numbers. Dictionary Phrases in Header/Footer Detection of user-defined, case-insensitive dictionary phrases in the header or footer of documents. For example, the dictionary phrase \"secret\" will be found on the text \"TOP SECRET\" but not in \"Secretive and highly classified\". The phrase list \"secret, sensitive, private\" will be found when any of those exact phrases are in header/footer text. Only the first phrase that is found shows as a violation trigger. DNA\n\nDetects DNA Pattern. DNA Pattern consist of at least 100 letters with a check digits algorithm. For example:\n\n\"GTCGGGACCACCCGGGGTAGTCATCGGGCT\n\nTATACA GCGAAAAGCCCAGCACCCGGCTCCCCGCTA\n\nTGGAAG GTCATTAGCTCCGGCAAGCAATTAAGAAC\n\nAACGCAA GGATCGCGGATATAAACAGAGAAACGG\n\nCCGAATAC ACCTGTTCGTGTCGTATCGGTAAATAGCCT\n\nCGCGGAG CCATGTGCCATACTCGTCTGCGGAGCACT\n\nCTGGTAAT GCATATGGTCCACAGGACATTCGTCGCTTC\n\nCGGGTAT GCGCTCTATGTGACGGTCTTTTGGCGCACA\n\nAATGCTC AGCACCATTTAAATTAGACCGACTCCAGA\n\nTCTGTAA GGTCCGCCACGCAGACGACAGCCCACGG\n\nAGACCACT GACCGATCTACCTGAACGGCGACCATCT\n\nGTGTGGTA CTGGGGCGGAGAGATAACTACGGTGCCG\n\nCTTACAGC CCCTCTGTCGTCGCTGACGTCTGTAGTC\n\nTAGCCTCAT TATGATTGTACGCTATTCAGGGATTGACT\n\nGATACCGG AAGACATCTCAAATGAAGTGGTCTATGCG\n\nACAGAGA CCGTGCACCTACCAAATCTCCTTAGTGTAA\n\nGTTCAGA CCAATTCGTACTTCGTTCAGAACTCACATT\n\nTTAACAA CAGAGGACACATGCCCTACCTCCATGATC\n\nTACTGAC GTCCCTGAGGCTGCAATACATGTAACGAG\n\nGCAGTAT CCGCGGTAAGTCCTAGTGCAATGGCGGTT\n\nTTTTACCC TCGTCCTGGAGAAGAGGGGACGCCGGTG\n\nCAGTCATC ACTAATGTGGAAATTGGGAGGACTCTTG\n\nGCCCTCCG CCTTTAGGCGGTGCTTACTCTTTCATAAAG\n\nGGGCTGT TAGTTATGGCCTGCGAGGATTCAAAAAGG\n\nTGAGCGA ACTCGGCCGATCCGGAGAGACGGGCTTCA\n\nAAGCTGC CTGACGACGGTTGCGGGTCCGTATCAAA\n\nATCCTCCC AATAAGCCCCCGTGACCGTTGGTTGAAC\n\nAGCCCAGG ACGGGCCGACCAGAAGCCC\".\n\nDNA Near Term\n\nDetects DNA Pattern. DNA Pattern consist of at least 100 letters with a check digits algorithm, near a term. For example:\n\n\"GTCGGGACCACCCGGGGTAGTCATCGGGCT\n\nTATACA GCGAAAAGCCCAGCACCCGGCTCCCCGCT\n\nATGGAAG GTCATTAGCTCCGGCAAGCAATTAAGAA\n\nCAACGCAA GGATCGCGGATATAAACAGAGAAACG\n\nGCCGAATAC ACCTGTTCGTGTCGTATCGGTAAATAGCC\n\nTCGCGGAG CCATGTGCCATACTCGTCTGCGGAGCACT\n\nCTGGTAAT GCATATGGTCCACAGGACATTCGTCGCT\n\nTCCGGGTAT GCGCTCTATGTGACGGTCTTTTGGCGCA\n\nCAAATGCTC AGCACCATTTAAATTAGACCGACTCC\n\nAGATCTGTAA GGTCCGCCACGCAGACGACAGCCCACG\n\nGAGACCACT GACCGATCTACCTGAACGGCGACCATC\n\nTGTGTGGTA CTGGGGCGGAGAGATAACTACGGTGCCG\n\nCTTACAGC CCCTCTGTCGTCGCTGACGTCTGTAGTCT\n\nAGCCTCAT TATGATTGTACGCTATTCAGGGATTGACTG\n\nATACCGG AAGACATCTCAAATGAAGTGGTCTATGCG\n\nACAGAGA CCGTGCACCTACCAAATCTCCTTAGTGTA\n\nAGTTCAGA CCAATTCGTACTTCGTTCAGAACTCACAT\n\nTTTAACAA CAGAGGACACATGCCCTACCTCCATGA\n\nTCTACTGAC GTCCCTGAGGCTGCAATACATGTAACGA\n\nGGCAGTAT CCGCGGTAAGTCCTAGTGCAATGGCGG\n\nTTTTTTACCC TCGTCCTGGAGAAGAGGGGACGCCGG\n\nTGCAGTCATC ACTAATGTGGAAATTGGGAGGACTCTT\n\nGGCCCTCCG CCTTTAGGCGGTGCTTACTCTTTCATA\n\nAAGGGGCTGT TAGTTATGGCCTGCGAGGATTCAAAAA\n\nGGTGAGCGA ACTCGGCCGATCCGGAGAGACGGGCT\n\nTCAAAGCTGC CTGACGACGGTTGCGGGTCCGTATCA\n\nAAATCCTCCC AATAAGCCCCCGTGACCGTTGGTTGAA\n\nCAGCCCAGG ACGGGCCGACCAGAAGCCC\".\n\nDocument to Self (Default) A classifier that returns a match if a CV or resume belongs to its distributer. It does this by extracting a name and an email address from the opening part of the document, and checking whether the corporate user name of the distributer can be extracted from the name found in the document (such as jsmith@mycompany.com can be extracted from John Smith or even Jennifer T. Smith-Brown). It also checks whether the user name and the email address could have been extracted from the same name (jsmith@mycompany.com can match john.smith1@gmail.com). If at least one of those tests is positive, the classifier returns a match. Document to Self (Wide) A classifier that returns a match if a CV or resume belongs to its distributer. It does this by extracting a name and an email address from the opening part of the document, and checking whether the corporate user name of the distributer can be extracted from the name found in the document (such as jsmith@mycompany.com can be extracted from John Smith or even Jennifer T. Smith-Brown). It also checks whether the user name and the email address could have been extracted from the same name and with a wide margin for error (jsmith@mycompany.com can match jksmiththegreat@gmail.com). If at least one of those tests is positive, the classifier returns a match. Driver License: District of Colombia Detection of valid District of Colombia driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Indiana Detection of valid Indiana driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Iowa Detection of valid Iowa driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Japan Detection of Japanese Driver’s License Number in proximity to driver license related terms. The terms and digits are detected in both English and Japanese. Driver License: Massachusetts Detection of valid Massachusetts driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Missouri Detection of valid Missouri driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Nevada Detection of valid Nevada driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Utah Detection of valid Utah driver license number, in proximity to driver license terms, including typos and misspellings. Driver License: Virginia Detection of valid Virginia driver license number, in proximity to driver license terms, including typos and misspellings. DSA Private Key Detection of DSA private keys. The first line of the key contains the string \"BEGIN DSA PRIVATE KEY\". EAR - Chemical Data Detection (Default) Detection of chemical formulas and information related to composite materials. EAR - Chemical Data Detection (Narrow) Detection of chemical formulas and information related to composite materials. Requires high rate of evidence. EAR - Chemical Data Detection (Wide) Detection of chemical formulas and information related to composite materials. May cause false positives. Ecuadorian ID Number (Default) Detects Ecuadorian Cedula Identidad (CI or ID). Ecuadorian CI consist of 10 digits with the last digit being a check digit, where at least 50% of the numbers are valid. For example: \"092205388-9\". Ecuadorian ID Number (Wide) Detects Ecuadorian Cedula Identidad (CI or ID). Ecuadorian CI consist of 10 digits with the last digit being a check digit. For example: \"092205388-9\". Ecuadorian ID Number Near Terms Detects Ecuadorian Cedula Identidad (CI or ID). Ecuadorian CI consist of 10 digits with the last digit being a check digit, near a term. For example: \"Cedula Identidad 092205388-9\". EIN (Default) Detection of Employer ID Number (EIN). Elliptic Curve Private Key Detection of Elliptic Curve private keys. The first line of the key contains the string \"BEGIN EC PRIVATE KEY\". Email Addresses Detection of email addresses. Email Addresses Domains Detection of email addresses with different domains. Email to Competitors Detection of email sent to competitors. The competitors’ domain names are supplied as a case-insensitive parameter. In order to use it, insert domain names into the parameter, separated by a semicolon. Email Similarity Detection of similar names in the source and destination of email addresses. Should be used with an AND condition together with the relevant type of sensitive information. When used in a custom rule, \"Analyzed fields\" should be configured by the user (\"TO\", \"CC\", \"BCC\"). Emirati ID Number (Default) Detects Emirati ID numbers. Emirati ID number consist of 15 digits with the last digit being a check digit, in English or Arabic numerals, where at least 50% of the numbers are valid. For example: \"784-1972-5140629-0\". Emirati ID Number (Wide) Detects Emirati ID numbers. Emirati ID number consist of 15 digits with the last digit being a check digit, in English or Arabic numerals. For example: \"784-1972-5140629-0\". Emirati ID Number Near Terms Detects Emirati ID numbers. Emirati ID number consist of 15 digits with the last digit being a check digit, in English or Arabic numerals, near a term. For example: \"ID card number 784-1972-5140629-0\". Encrypted Files - Unknown Format Detection of encrypted files (unknown format) according to internal file properties. Encrypted Files - Unknown Format (Wide) Detection of encrypted files (unknown format) according to internal file properties (Wide) Encrypted PKCS #8 Private Key Detection of encrypted PKCS #8 private keys. The first line of the key contains the string \"BEGIN ENCRYPTED PRIVATE KEY\". Estonian Personal Identification Code (Wide) Detects valid 11-digit Estonian personal identification codes (Isikukood). For example: “39001012038”. Estonian Personal Identification Code (Default) Detects valid 11-digit Estonian personal identification codes (Isikukood). At least 50% of the 11-digit numbers in the text must be valid. For example: “39001012038”. Estonian Personal Identification Code Near Term Detects valid 11-digit Estonian personal identification codes (Isikukood) near a support term in Estonian or English. For example: “Isikukood 39001012038”. EU Credit Cards Detection of valid credit card number prevalent in Europe, employing various heuristics involving credit card related terms and use of delimiters. Expiration Dates: Date After Return ‘True’ if the current date is after the date specified in the classifier parameters. Can be used to construct a rule that is valid since a certain date, default expiration date is 31/12/2000. For example, you can set a keyword classifier to be “Code Yellow”, and use it in an ‘and’ relation with the ‘Date After’ classifier. Expiration Dates: Date Before Return ‘True’ if the current date is before the date specified in the classifier parameters. Can be used to construct a rule that is valid after a certain date, default date is 31/12/2020. For example, you can set a keyword classifier to be “Code Yellow”, and use it in an ‘and’ relation with the ‘Date Before’ classifier. Explicit Password Detection of a phrase that explicitly marks a specific password. For example: “pwd=Qwerty1234” or “My password is ‘123456’”. F# Source Code (By Content) Detection of F# source code by content. Finnish SSN (Default) Detection of Finnish validated Social Security Numbers, when found in proximity to related terms. Finnish SSN (Wide) Detection of Finnish validated Social Security Numbers. Form 10-K (Standard Fiscal Year) Detection of 10K forms. Form 10-K (Non Standard Fiscal Year) Detection of 10K forms for non-standard fiscal years (not ending at 31/12). Form 10-Q (Standard Fiscal Year) Detection of 10Q forms. Form 10-Q (Non Standard Fiscal Year) Detection of 10Q forms for non-standard fiscal years (not ending at 31/12). French National Identity Card Number (CNI) Near Term (Default) Detects 12-character French National Identity Card Numbers (CNI), near a permissive term in English or French. For example, “CNI: 130375300818”. French National Identity Card Number (CNI) Near Term (Narrow) Detects 12-character French National Identity Card Numbers (CNI), near a term in English or French. For example, “French national identity card number: 130375300818”. French Social Security Number (NIR) - 13 Digits (Wide) Detects 13-character French Social Security Numbers (NIR; AKA INSEE number), without check digits. For example, “2690549588157”. French Social Security Number (NIR) - 13 Digits Near Term Detects 13-character French Social Security Numbers (NIR; AKA INSEE number), without check digits, near a term in English or French. For example, “NIR: 2690549588157”. French Social Security Number (NIR) - 15 Digits (Default) Detects 15-character French Social Security Numbers (NIR; AKA INSEE number). At least 30% of such 15-character numbers in the text must be valid. For example, “2690549588157 80”. French Social Security Number (NIR) - 15 Digits (Wide) Detects 15-character French Social Security Numbers (NIR; AKA INSEE number). For example, “2690549588157 80”. French Social Security Number (NIR) - 15 Digits Near Term Detects 15-character French Social Security Numbers (NIR; AKA INSEE number) near a term in English or French. For example, “NIR: 2690549588157 80”. French Names Detection of French full names. German ID Machine Readable Number (Default) Detects German ID numbers. German ID number which consist of 10 characters where both letters and digits are present with the last digit being a check digit, where at least 50% of the numbers are valid. For example: \"LGC329K173\". German ID Machine Readable Number (Wide) Detects German ID numbers. German ID number which consist of 10 characters where both letters and digits are present with the last digit being a check digit. For example: \"LGC329K173\". German ID Machine Readable Number Near Terms Detects German ID numbers. German ID number which consist of 10 characters where both letters and digits are present with the last digit being a check digit, near a term. For example: \"ID card number LGC329K173\". German ID Number Near Terms Detects German ID numbers. German ID number which consist of 9 characters where both letters and digits are present, near a term. For example: \"L9V3K744K\". German Names Detection of German full names. Greek AFM Number (Wide) Detects Greek AFM numbers. Greek AFM numbers consist of 9 digits with the last digit being a check digit. For example: \"863380648\". Greek AFM Number (Default) Detects Greek AFM numbers. Greek AFM numbers consist of 9 digits with the last digit being a check digit, where at least 30% of the numbers are valid, For example: \"863380648\". Greek AFM Number Near Term Detects Greek AFM numbers. Greek AFM numbers consist of 9 digits with the last digit being a check digit, near a term. For example: \"AFM 863380648\". Greece: Greek ID number (Wide) Detection of Greek ID number. For example: \"AE 562808\". Greece: Greek ID number Near Term (Default) Detection of Greek ID number near a support term in Greek or English. For example: \"greek id AE 562808\". Greece: Greek Name (Default) Detection of Greek full name (default behavior). Greece: Greek Name (Wide) Detection of Greek full name (wide behavior). Health Insurance Claim Number (HICN) Detects Health Insurance Claim Number (HICN). For example: \"427432010A\". Hong Kong: ID - formal Detection of Hong Kong ID of the form A123456(7). Hong Kong: ID - non formal Detection of Hong Kong ID of the form A1234567, without requiring ID terms. Hungary CNP Detection of Hungary validated Personal Numeric Code Numbers when found in proximity to related terms. Hungary CNP (Wide) Detection of Hungary validated Personal Numeric Code Numbers. Hungary SSN Detection of Hungary Social Security Numbers, when found in proximity to related terms Hungary SSN (Wide) Detection of Hungary validated Social Security Numbers. Hungary Tax ID Detection of Hungary validated Tax ID Numbers when found in proximity to related terms. Hungary Tax ID (Wide) Detection of Hungary validated Tax ID Numbers. IBAN Austria (Default) Detects Austrian IBAN numbers. Austrian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “AT611904300234573201”. IBAN Austria (Wide) Detects Austrian IBAN numbers. Austrian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits. For example: “AT611904300234573201”. IBAN Austria Near Term Detects Austrian IBAN numbers. Austrian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, near a term. For example: “IBAN AT611904300234573201”. IBAN Belgium (Default) Detects Belgian IBAN numbers. Belgian IBAN numbers consist of 2 letters and 14 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “BE68539007547034”. IBAN Belgium (Wide) Detects Belgian IBAN numbers. Belgian IBAN numbers consist of 2 letters and 14 digits with 2 of those being check digits. For example: “BE68539007547034”. IBAN Belgian Near Term Detects Belgian IBAN numbers. Belgian IBAN numbers consist of 2 letters and 14 digits with 2 of those being check digits, near a term. For example: “IBAN BE68539007547034”. IBAN Brazilian (Default) Detects Brazilian IBAN numbers. Brazilian IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “BR1800360305000010009795493C1”. IBAN Brazilian (Wide) Detects Brazilian IBAN numbers. Brazilian IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits. For example: “BR1800360305000010009795493C1”. IBAN Brazilian Near Term Detects Brazilian IBAN numbers. Brazilian IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits, near a term. For example: “IBAN BR1800360305000010009795493C1”. IBAN Bulgarian (Default) Detects Bulgarian IBAN numbers. Bulgarian IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “BG80BNBG96611020345678”. IBAN Bulgarian (Wide) Detects Bulgarian IBAN numbers. Bulgarian IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits. For example: “BG80BNBG96611020345678”. IBAN Bulgarian Near Term Detects Bulgarian IBAN numbers. Bulgarian IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, near a term. For example: “IBAN BG80BNBG96611020345678”. IBAN Croatian (Default) Detects Croatian IBAN numbers. Croatian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “HR1210010051863000160”. IBAN Croatian (Wide) Detects Croatian IBAN numbers. Croatian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits. For example: “HR1210010051863000160”. IBAN Croatian Near Term Detects Croatian IBAN numbers. Croatian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, near a term. For example: “IBAN HR1210010051863000160”. IBAN Cypriot (Default) Detects Cypriot IBAN numbers. Cypriot IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “CY17002001280000001200527600”. IBAN Cypriot (Wide) Detects Cypriot IBAN numbers. Cypriot IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits. For example: “CY17002001280000001200527600”. IBAN Cypriot Near Term Detects Cypriot IBAN numbers. Cypriot IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, near a term. For example: “IBAN CY17002001280000001200527600”. IBAN Czech (Default) Detects Czech IBAN numbers. Czech IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “CZ6508000000192000145399”. IBAN Czech (Wide) Detects Czech IBAN numbers. Czech IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “CZ6508000000192000145399”. IBAN Czech Near Term Detects Czech IBAN numbers. Czech IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “IBAN CZ6508000000192000145399”. IBAN Dutch (Default) Detects Dutch IBAN numbers. Dutch IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “NL91ABNA0417164300”. IBAN Dutch (Wide) Detects Dutch IBAN numbers. Dutch IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits. For example: “NL91ABNA0417164300”. IBAN Dutch Near Term Detects Dutch IBAN numbers. Dutch IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits, near a term. For example: “IBAN NL91ABNA0417164300”. IBAN Emirati (Default) Detects Emirati IBAN numbers. Emirati IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “AE070331234567890123456”. IBAN Emirati (Wide) Detects Emirati IBAN numbers. Emirati IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits. For example: “AE070331234567890123456”. IBAN Emirati Near Term Detects Emirati IBAN numbers. Emirati IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits, near a term. For example: “IBAN AE070331234567890123456”. IBAN Estonian (Default) Detects Estonian IBAN numbers. Estonian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “EE382200221020145685”. IBAN Estonian (Wide) Detects Estonian IBAN numbers. Estonian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits. For example: “EE382200221020145685”. IBAN Estonian Near Term Detects Estonian IBAN numbers. Estonian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, near a term. For example: “IBAN EE382200221020145685”. IBAN Finnish (Default) Detects Finnish IBAN numbers. Finnish IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “FI2112345600000785”. IBAN Finnish (Wide) Detects Finnish IBAN numbers. Finnish IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits. For example: “FI2112345600000785”. IBAN Finnish Near Term Detects Finnish IBAN numbers. Finnish IBAN numbers consist of 2 letters and 16 digits with 2 of those being check digits, near a term. For example: “IBAN FI2112345600000785”. IBAN French (Default) Detects French IBAN numbers. French IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “FR1420041010050500013M02606”. IBAN French (Wide) Detects French IBAN numbers. French IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits. For example: “FR1420041010050500013M02606”. IBAN French Near Term Detects French IBAN numbers. French IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, near a term. For example: “IBAN FR1420041010050500013M02606”. IBAN General (Default) Detection of general IBAN numbers. with the last digit being a check digit, where at least 50% of the numbers are valid. IBAN General (Wide) Detection of general IBAN numbers. IBAN General Near Term Detection of general IBAN numbers. with the last digit being a check digit, near a term. IBAN German (Default) Detects German IBAN numbers. German IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “DE89370400440532013000”. IBAN German (Wide) Detects German IBAN numbers. German IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits. For example: “DE89370400440532013000”. IBAN German Near Term Detects German IBAN numbers. German IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, near a term. For example: “IBAN DE89370400440532013000”. IBAN Greek (Default) Detects Greek IBAN numbers. Greek IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “GR1601101250000000012300695”. IBAN Greek (Wide) Detects Greek IBAN numbers. Greek IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits. For example: “GR1601101250000000012300695”. IBAN Greek Near Term Detects Greek IBAN numbers. Greek IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, near a term. For example: “IBAN GR1601101250000000012300695”. IBAN Hungarian (Default) Detects Hungarian IBAN numbers. Hungarian IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “HU42117730161111101800000000”. IBAN Hungarian (Wide) Detects Hungarian IBAN numbers. Hungarian IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits. For example: “HU42117730161111101800000000”. IBAN Hungarian Near Term Detects Hungarian IBAN numbers. Hungarian IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, near a term. For example: “IBAN HU42117730161111101800000000”. IBAN Icelandic (Default) Detects Icelandic IBAN numbers. Icelandic IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “IS140159260076545510730339”. IBAN Icelandic (Wide) Detects Icelandic IBAN numbers. Icelandic IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits. For example: “IS140159260076545510730339”. IBAN Icelandic Near Term Detects Icelandic IBAN numbers. Icelandic IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits, near a term. For example: “IBAN IS140159260076545510730339”. IBAN Irish (Default) Detects Irish IBAN numbers. Irish IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “IE29AIBK93115212345678”. IBAN Irish (Wide) Detects Irish IBAN numbers. Irish IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits. For example: “IE29AIBK93115212345678”. IBAN Irish Near Term Detects Irish IBAN numbers. Irish IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, near a term. For example: “IBAN IE29AIBK93115212345678”. IBAN Israeli (Default) Detects Israeli IBAN numbers. Israeli IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “IL620108000000099999999”. IBAN Israeli (Wide) Detects Israeli IBAN numbers. Israeli IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits. For example: “IL620108000000099999999”. IBAN Israeli Near Term Detects Israeli IBAN numbers. Israeli IBAN numbers consist of 2 letters and 21 digits with 2 of those being check digits, near a term. For example: “IBAN IL620108000000099999999”. IBAN Italian (Default) Detects Italian IBAN numbers. Italian IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “IT60X0542811101000000123456”. IBAN Italian (Wide) Detects Italian IBAN numbers. Italian IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits. For example: “IT60X0542811101000000123456”. IBAN Italian Near Term Detects Italian IBAN numbers. Italian IBAN numbers consist of 2 letters and 25 digits with 2 of those being check digits, near a term. For example: “IBAN IT60X0542811101000000123456”. IBAN Kazakh (Default) Detects Kazakh IBAN numbers. Kazakh IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “KZ86125KZT5004100100”. IBAN Kazakh (Wide) Detects Kazakh IBAN numbers. Kazakh IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits. For example: “KZ86125KZT5004100100”. IBAN Kazakh Near Term Detects Kazakh IBAN numbers. Kazakh IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, near a term. For example: “IBAN KZ86125KZT5004100100”. IBAN Latvian (Default) Detects Latvian IBAN numbers. Latvian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “LV80BANK0000435195001”. IBAN Latvian (Wide) Detects Latvian IBAN numbers. Latvian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits. For example: “LV80BANK0000435195001”. IBAN Latvian Near Term Detects Latvian IBAN numbers. Latvian IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, near a term. For example: “IBAN LV80BANK0000435195001”. IBAN Lithuanian (Default) Detects Lithuanian IBAN numbers. Lithuanian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “LT121000011101001000”. IBAN Lithuanian (Wide) Detects Lithuanian IBAN numbers. Lithuanian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits. For example: “LT121000011101001000”. IBAN Lithuanian Near Term Detects Lithuanian IBAN numbers. Lithuanian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, near a term. For example: “IBAN LT121000011101001000”. IBAN Luxembourgian (Default) Detects Luxembourgian IBAN numbers. Luxembourgian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “LU280019400644750000”. IBAN Luxembourgian (Wide) Detects Luxembourgian IBAN numbers. Luxembourgian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits. For example: “LU280019400644750000”. IBAN Luxembourgian Near Term Detects Luxembourgian IBAN numbers. Luxembourgian IBAN numbers consist of 2 letters and 18 digits with 2 of those being check digits, near a term. For example: “IBAN LU280019400644750000”. IBAN Maltese (Default) Detects Maltese IBAN numbers. Maltese IBAN numbers consist of 2 letters and 29 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “MT84MALT011000012345MTLCAST001S”. IBAN Maltese (Wide) Detects Maltese IBAN numbers. Maltese IBAN numbers consist of 2 letters and 29 digits with 2 of those being check digits. For example: “MT84MALT011000012345MTLCAST001S”. IBAN Maltese Near Term Detects Maltese IBAN numbers. Maltese IBAN numbers consist of 2 letters and 29 digits with 2 of those being check digits, near a term. For example: “IBAN MT84MALT011000012345MTLCAST001S”. IBAN Norwegian (Default) Detects Norwegian IBAN numbers. Norwegian IBAN numbers consist of 2 letters and 13 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “NO9386011117947”. IBAN Norwegian (Wide) Detects Norwegian IBAN numbers. Norwegian IBAN numbers consist of 2 letters and 13 digits with 2 of those being check digits. For example: “NO9386011117947”. IBAN Norwegian Near Term Detects Norwegian IBAN numbers. Norwegian IBAN numbers consist of 2 letters and 13 digits with 2 of those being check digits, near a term. For example: “IBAN NO9386011117947”. IBAN Polish (Default) Detects Polish IBAN numbers. Polish IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “PL61109010140000071219812874”. IBAN Polish (Wide) Detects Polish IBAN numbers. Polish IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits. For example: “PL61109010140000071219812874”. IBAN Polish Near Term Detects Polish IBAN numbers. Polish IBAN numbers consist of 2 letters and 26 digits with 2 of those being check digits, near a term. For example: “IBAN PL61109010140000071219812874”. IBAN Portuguese (Default) Detects Portuguese IBAN numbers. Portuguese IBAN numbers consist of 2 letters and 23 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “PT50000201231234567890154”. IBAN Portuguese (Wide) Detects Portuguese IBAN numbers. Portuguese IBAN numbers consist of 2 letters and 23 digits with 2 of those being check digits. For example: “PT50000201231234567890154”. IBAN Portuguese Near Term Detects Portuguese IBAN numbers. Portuguese IBAN numbers consist of 2 letters and 23 digits with 2 of those being check digits, near a term. For example: “IBAN PT50000201231234567890154”. IBAN Qatari (Default) Detects Qatari IBAN numbers. Qatari IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “QA58DOHB00001234567890ABCDEFG”. IBAN Qatari (Wide) Detects Qatari IBAN numbers. Qatari IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits. For example: “QA58DOHB00001234567890ABCDEFG”. IBAN Qatari Near Term Detects Qatari IBAN numbers. Qatari IBAN numbers consist of 2 letters and 27 digits with 2 of those being check digits, near a term. For example: “IBAN QA58DOHB00001234567890ABCDEFG”. IBAN Romanian (Default) Detects Romanian IBAN numbers. Romanian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “RO49AAAA1B31007593840000”. IBAN Romanian (Wide) Detects Romanian IBAN numbers. Romanian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “RO49AAAA1B31007593840000”. IBAN Romanian Near Term Detects Romanian IBAN numbers. Romanian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “IBAN RO49AAAA1B31007593840000”. IBAN Saudi Arabian (Default) Detects Saudi Arabian IBAN numbers. Saudi Arabian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “SA0380000000608010167519”. IBAN Saudi Arabian (Wide) Detects Saudi Arabian IBAN numbers. Saudi Arabian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “SA0380000000608010167519”. IBAN Saudi Arabian Near Term Detects Saudi Arabian IBAN numbers. Saudi Arabian IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “IBAN SA0380000000608010167519”. IBAN Slovak (Default) Detects Slovak IBAN numbers. Slovak IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “SK3112000000198742637541”. IBAN Slovak (Wide) Detects Slovak IBAN numbers. Slovak IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “SK3112000000198742637541”. IBAN Slovak Near Term Detects Slovak IBAN numbers. Slovak IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “IBAN SK3112000000198742637541”. IBAN Slovene (Default) Detects Slovene IBAN numbers. Slovene IBAN numbers consist of 2 letters and 17 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “SI56263300012039086”. IBAN Slovene (Wide) Detects Slovene IBAN numbers. Slovene IBAN numbers consist of 2 letters and 17 digits with 2 of those being check digits. For example: “SI56263300012039086”. IBAN Slovene Near Term Detects Slovene IBAN numbers. Slovene IBAN numbers consist of 2 letters and 17 digits with 2 of those being check digits, near a term. For example: “IBAN SI56263300012039086”. IBAN Spanish (Default) Detects Spanish IBAN numbers. Spanish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “ES9121000418450200051332”. IBAN Spanish (Wide) Detects Spanish IBAN numbers. Spanish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “ES9121000418450200051332”. IBAN Spanish Near Term Detects Spanish IBAN numbers. Spanish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “ES9121000418450200051332”. IBAN Swedish (Default) Detects Swedish IBAN numbers. Swedish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “SE4550000000058398257466”. IBAN Swedish (Wide) Detects Swedish IBAN numbers. Swedish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits. For example: “SE4550000000058398257466”. IBAN Swedish Near Term Detects Swedish IBAN numbers. Swedish IBAN numbers consist of 2 letters and 22 digits with 2 of those being check digits, near a term. For example: “IBAN SE4550000000058398257466”. IBAN Swiss (Default) Detects Swiss IBAN numbers. Swiss IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “CH9300762011623852957”. IBAN Swiss (Wide) Detects Swiss IBAN numbers. Swiss IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits. For example: “CH9300762011623852957”. IBAN Swiss Near Term Detects Swiss IBAN numbers. Swiss IBAN numbers consist of 2 letters and 19 digits with 2 of those being check digits, near a term. For example: “IBAN CH9300762011623852957”. IBAN Turkish (Default) Detects Turkish IBAN numbers. Turkish IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “TR330006100519786457841326”. IBAN Turkish (Wide) Detects Turkish IBAN numbers. Turkish IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits. For example: “TR330006100519786457841326”. IBAN Turkish Near Term Detects Turkish IBAN numbers. Turkish IBAN numbers consist of 2 letters and 24 digits with 2 of those being check digits, near a term. For example: “IBAN TR330006100519786457841326”. IBAN UK (Default) Detects British IBAN numbers. British IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, where at least 50% of the numbers are valid. For example: “GB29NWBK60161331926819”. IBAN UK (Wide) Detects British IBAN numbers. British IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits. For example: “GB29NWBK60161331926819”. IBAN UK Near Term Detects British IBAN numbers. British IBAN numbers consist of 2 letters and 20 digits with 2 of those being check digits, near a term. For example: “GB29NWBK60161331926819”. ICD-10 Code Detects ICD-10 codes. For example “H05.121”. This classifier may cause false positives. ICD-10 Code Near Term Detects ICD-10 codes near a term in English. For example “ICD Code: H05.121”. ICD10 Norwegian Descriptions Detection of Norwegian descriptions of medical conditions as they appear in the ICD10 manual. Icelandic Kennitala of Individuals (Default) Detection of Icelandic identification numbers (kennitala) of individuals, employing various heuristics involving kennitala- related terms and other features unique to this number. Icelandic Kennitala of Individuals (Wide) Detection of Icelandic identification numbers (kennitala) of individuals, employing various heuristics involving features unique to this number. IL bank accounts: Benleumi Detection of validated BenLeumi account numbers in proximity to terms related to accounts in English or Hebrew. IL bank accounts: Discount Detection of validated Discount account numbers in proximity to terms related to accounts in English or Hebrew. IL bank accounts: Hadoar Detection of validated HaDoar account numbers, when appearing with terms relating to accounts in English or Hebrew. IL bank accounts: Leumi Detection of validated Leumi account numbers which include branch numbers, when appearing with terms relating to accounts in English or Hebrew. IL bank accounts: Leumi no support Detection of validated Leumi account numbers which include branch numbers. IL bank accounts: Mizrahi Detection of validated Mizrahi account numbers which include branch numbers, when appearing with terms relating to accounts in English or Hebrew. IL bank accounts: Poalim Detection of validated Poalim account numbers which include branch numbers, when appearing with terms relating to accounts in English or Hebrew. IL Life Insurance Detection of Israeli life insurance numbers. IMEI Number (Default) Detects IMEI numbers. IMEI numbers consist of 15 digits with the last digit being a check digit, where at least 30% of the numbers are valid. For example: \"49-015410-083781-6\". IMEI Number (Wide) Detects IMEI numbers. IMEI numbers consist of 15 digits with the last digit being a check digit. For example: \"49-015410- 083781-6\". IMEI Number Near Terms Detects IMEI numbers. IMEI numbers consist of 15 digits with the last digit being a check digit, near a term. For example: \"IMEI 49-015410-083781-6\". IMEI-SV Number (Default) Detects IMEI-SV numbers. IMEI Software Version numbers consist of 16 digits near a term. For example: \"IMEI 49- 015410-083781-6\". IMEI-SV Number (Wide) Detects IMEI-SV numbers. IMEI Software Version numbers consist of 16 digits near a permissive term. For example: \"Code 49-015410-083781-6\". India: Form 16 Detection of India Form 16 that has been filled out, using identification of textual patterns common to such forms. Indian Names (Default) Detection of Indian full names. Indian Names (Narrow) Detection of Indian full names (Narrow). Indian Names (Wide) Detection of Indian full names (Wide). This content classifier should be used in conjunction with additional data as it is permissive. Indonesian Single Identity Numbers (Default) Detects valid 16-digit delimited or un-delimited Indonesian Single Identity Numbers (Nomor Induk Kependudukan). At least half of all 16-digit numbers need to be valid. For example “3313034604790001”. Indonesian Single Identity Numbers (Narrow) Detects valid 16-digit delimited or un-delimited Indonesian Single Identity Numbers (Nomor Induk Kependudukan) where the last 4 digits are under 0400. At least half of all 16-digit numbers need to be valid. For example “3313034604790001”. Indonesian Single Identity Numbers Near Term Detects valid 16-digit delimited or un-delimited Indonesian Single Identity Numbers (Nomor Induk Kependudukan) near a support term in English or in Indonesian. For example “nomor KTP 3313034604790001”. Ireland PRSI/PPS Detection of Irish Personal Public Service numbers. ISIN: Default Detection of valid International Securities Identification Numbers (ISINs). ISIN: with country code validation Detection of valid International Securities Identification Numbers (ISINs), with validating country code. Israel: Common Medical Information Detection of medical conditions in Hebrew or English. Israel: Sensitive Medical Information Detection of medical conditions of sensitive nature in Hebrew or English. Israeli Credit Cards Detection of valid credit card number prevalent in Israel. Israeli Credit Cards (Default) Detection of Israeli credit card numbers (not including Isracard) employing various heuristics involving credit card related terms and use of delimiters. By default, only the first 6 digits and the last 4 digits are shown in the reports. Israeli Credit Cards (Narrow) Detection of Israeli credit card numbers (not including Isracard). Requires additional evidence, such as credit card related terms in proximity, in order to qualify number as a credit card number. By default, only the first 6 digits and the last 4 digits are shown in the reports. Israeli Credit Cards (Wide) Detection of potential Israeli credit card numbers (not including Isracard), based only on format and validation, may cause false positives. By default, only the first 6 digits and the last 4 digits are shown in the reports. Israeli IBAN Detection of Israeli IBANs (International Bank Account Numbers). Searches for support terms in proximity to Israeli IBAN format. Israeli IBAN (Wide) Detection of Israeli IBANs (International Bank Account Numbers) without support terms in proximity. Israeli Identity Number (Default) Detects valid 9-digit Israeli identity numbers. At least 50% of the 9-digit numbers in the text need to be valid. For example: “064810948”. Israeli Identity Number Near Term Detects valid 9-digit Israeli identity numbers near a support term in Hebrew, Arabic, or English. For example: “Teudat Zehut 064810948”. Israeli Identity Number (Wide) Detects valid 9-digit Israeli identity numbers. For example: “064810948”. Israeli Identity Number - 7-Digits (Default) Detects valid 7-digit Israeli identity numbers where the leftmost 2 digits, “00”, are omitted. At least 50% of the 7-digit numbers in the text must be valid. For example: “9896747”. Israeli Identity Number (7-Digits) Near Term Detects valid 7-digit Israeli identity numbers where the leftmost 2 digits, “00”, are omitted near a support term in Hebrew, Arabic, or English. For example: “Teudat Zehut 9896747”. Israeli Identity Number - 7-Digits (Wide) Detects valid 7-digit Israeli identity numbers where the leftmost 2 digits, “00”, are omitted. For example: “9896747”. Israeli Identity Number - 8-Digits (Default) Detects valid 8-digit Israeli identity numbers where the leftmost digit, “0”, is omitted. At least 50% of the 8-digit numbers in the text must be valid. For example: “64810948”. Israeli Identity Number (8-Digits) Near Term Detects valid 8-digit Israeli identity numbers where the leftmost digit, “0”, is omitted near a support term in Hebrew, Arabic, or English. For example: “Teudat Zehut 64810948”. Israeli Identity Number - 8-Digits (Wide) Detects valid 8-digit Israeli identity numbers where the leftmost digit, “0”, is omitted. For example: “64810948”. Israeli Insurance Claims Detection of Israeli life insurance claims numbers when appearing in proximity to related terms. Israeli life Insurance Detection of Israeli life insurance numbers when appearing in proximity to life insurance related terms. Israeli Names Detection of Israeli full names. Israeli Phone Numbers (Default) Detection of Israeli Phone Numbers, when found in proximity to related terms. Israeli Phone Numbers (Wide) Detection of Israeli Phone Numbers. Israeli generic insurance number (delimited) Detection of generic Israeli insurance policy numbers in standard delimitation Israeli generic insurance number (non delimited) Detection of generic Israeli insurance policy numbers without delimitation Italian Address Detects an Italian address in Italian or English. For example, “Piazzale degli Uffizi 6, 50122 Firenze”. Italian Codice Fiscale Number (Wide) Detects Italian Codice Fiscale numbers. Italian Codice Fiscale number consist of 16 digits with the last digit being a check digit. For example: \"LNTTRS62E53A285K\". Italian Codice Fiscale Number (Default) Detects Italian Codice Fiscale numbers. Italian Codice Fiscale number consist of 16 digits with the last digit being a check digit, where at least 30% of the numbers are valid, For example: \"LNTTRS62E53A285K\". Italian Codice Fiscale Number Near Term Detects Italian Codice Fiscale numbers. Italian Codice Fiscale number consist of 16 digits with the last digit being a check digit, near a term. For example: \"Codice Fiscale LNTTRS62E53A285K\". Italian Names Detection of Italian full names. Italian Phone Number Near Terms Detects 9-11 digits Italian telephone numbers (Landline and Mobile), near a term in Italian or English. For example, \"Telefono +39-06-555-5555\". Italy Codice Fiscale Number Detection of validated Italy Codice Fiscale, possibly in proximity to related terms. Japan Emails Detection of at least 20 email addresses revealing personal information about the owner, such as their full name and place of employment. Japan Ledger Detection of Japanese Ledger Number in proximity Ledger related terms. The terms and digits are detected in both English and Japanese. Japan Pension Detection of Japanese Pension Number in proximity to pension related terms. The terms and digits are detected in both English and Japanese. Japan Phone Numbers Detection of Japanese telephone numbers, where at least one number is in proximity to phone number related terms in English or Japanese. Japanese Corporate Numbers (Wide) Detects valid 13-digit delimited or un-delimited Japanese Corporate Numbers. For example “7-0000-1201-1012”. Japanese Corporate Numbers (Default) Detects valid 13-digit delimited or un-delimited Japanese Corporate Numbers. At least 70% of all 13-digit numbers need to be valid. For example “7-0000-1201-1012”. Japanese Corporate Numbers Near Term Detects valid 13-digit delimited or un-delimited Japanese Corporate Numbers near a support term in English or in Japanese. For example “Corporate Number 7-0000-1201- 1012”. Japanese Credit Cards Detection of valid credit card number prevalent in Japan, employing various heuristics involving credit card related terms and use of delimiters. The terms and credit card digits are detected in both English and Japanese. Japanese Individual Numbers (Wide) Detects valid 12-digit delimited or un-delimited Japanese Individual Numbers (My Numbers). For example “3591 0546 2229”. Japanese Individual Numbers (Default) Detects valid 12-digit delimited or un-delimited Japanese Individual Numbers (My Numbers). At least 70% of all 12-digit numbers need to be valid. For example “3591 0546 2229”. Japanese Individual Numbers Near Term Detects valid 12-digit delimited or un-delimited Japanese Individual Numbers (My Numbers) near a support term in English or Japanese. For example “My Number 3591 0546 2229\". Java Source Code (Wide) Detection of Java source code. At least 50 percent of the non- empty lines in the file should be valid C++ lines and at least 1 unmistakable C++ line should be detected. Java Source Code (Default) Detection of Java source code. At least 70 percent of the non- empty lines in the file should be valid C++ lines and at least 3 unmistakable C++ line should be detected. JSON Keystore File Private Key Detection of JSON Keystore File private keys that are used to hold Bitcoin's and Ethereum's wallet's private key information. Kazakh Taxpayer Registration Numbers Detection of valid Kazakh Taxpayer Registration Numbers. Kazakh Individual Identification Numbers Detection of valid Kazakh Individual Identification Numbers. Kazakh Business Identification Numbers Detection of valid Kazakh Business Identification Numbers. Key Phrases in Header/ Footer Detection of user-defined, case-insensitive key phrases in the header or footer of documents. For example, the key phrase \"secret\" will be found in the text \"Secretive and highly classified\" and \"TOP SECRET\". The phrase list \"secret, sensitive, private\" will be found when any form of those phases are in header/footer text. Only the first phrase that is found shows as a violation trigger. Korea Phone Numbers (Narrow) Detection of Korea phone numbers, employing statistical analysis. Korea Phone Numbers (Wide) Detection of Korea phone numbers. Korea Phone Numbers (With Support) Detection of Korea phone numbers, when found in proximity to related terms such as ‘phone’ in English or Korean. Kotlin Source Code (Wide) Detection of Kotlin source code. At least 50 percent of the non- empty lines in the file should be valid Kotlin lines and at least 1 unmistakable Kotlin line should be detected. Kotlin Source Code (Default) Detection of Kotlin source code. At least 70 percent of the non- empty lines in the file should be valid Kotlin lines and at least 4 unmistakable Kotlin line should be detected. Latitude-Longitude coordinates Detection of Latitude-Longitude coordinates. Latvian Personal Identity Number (Wide) Detects valid 11-digit Latvian personal identity numbers (Personas kods). For example: “281247-11862”. Latvian Personal Identity Number (Default) Detects valid 11-digit Latvian personal identity numbers (Personas kods). At least 50% of the 11-digit numbers in the text must be valid. For example: “281247-11862”. Latvian Personal Identity Number Near Term Detects valid 11-digit Latvian personal identity numbers (Personas kods) near a support term in Latvian or English. For example: “Personas kods 281247-11862”. Lithuanian Personal Code (Wide) Detects valid 11-digit Lithuanian Personal Code (Asmens kodas). For example: “46709261415”. Lithuanian Personal Code (Default) Detects valid 11-digit Lithuanian Personal Code (Asmens kodas). At least 50% of the 11-digit numbers in the text must be valid. For example: “46709261415”. Lithuanian Personal Code Near Term Detects valid 11-digit Lithuanian Personal Code (Asmens kodas) near a support term in Lithuanian or English. For example: “Asmens kodas 46709261415”. Luxembourgian National Identification Number - 11 Digits (Wide) Detects valid 11-digit Luxembourgian national identification numbers (Matricule). For example: “1994 01 27 087”. Luxembourgian National Identification Number - 11 Digits (Default) Detects valid 11-digit Luxembourgian national identification numbers (Matricule). At least 50% of the 11-digit numbers in the text must be valid. For example: “1994 01 27 087”. Luxembourgian National Identification Number - 11 Digits Near Term Detects valid 11-digit Luxembourgian national identification numbers (Matricule) near a support term in French, German, Luxembourgish, or English. For example: “Matricule 1994 01 27 087”. Luxembourgian National Identification Number - 13 Digits (Wide) Detects valid 13-digit Luxembourgian national identification numbers (Matricule). For example: “1992 0311 426 93”. Luxembourgian National Identification Number - 13 Digits (Default) Detects valid 13-digit Luxembourgian national identification numbers (Matricule). At least 50% of the 13-digit numbers in the text must be valid. For example: “1992 0311 426 93”. Luxembourgian National Identification Number - 13 Digits Near Term Detects valid 13-digit Luxembourgian national identification numbers (Matricule) near a support term in French, German, Luxembourgish, or English. For example: “Matricule 1992 0311 426 93”. MAC Address (Default) Detection of MAC addresses. Detects only delimited MAC addresses. MAC Address (Narrow) Detection of MAC addresses, detects delimited MAC addresses with a valid OUI (Organizationally Unique Identifier). MAC Address (Wide) Detection of MAC addresses. Detects delimited MAC addresses and non-delimited MAC addresses with support terms in proximity. Malaysia ID: no date validation Detection of validated Malaysia ID in a form like dddddd-16- 7356. Does not require support term in proximity. Malaysia ID: no date validation, with proximity Detection of validated Malaysia ID in a form like dddddd-16- 7356 providing that Malaysia ID terms such as MyKad, GMPC or ID appears in proximity. Malaysia ID: with date and BP validation Detection of validated Malaysia ID in a form like YYMMDD- BP-7356, where first six digits stand for a birth date. Does not require support term in proximity. Malaysia ID: with date and BP validation, with proximity Detection of validated Malaysia ID in a form like dddddd-BP- 7356, providing that Malaysia ID terms such as MyKad, GMPC or ID appears in proximity. Malaysia ID: with date validation Detection of validated Malaysia ID in a form like YYMMDD- 16-7356, where first six digits stand for a birth date. Does not require support term in proximity. Malaysia ID: with date validation, with proximity Detection of validated Malaysia ID in a form like YYMMDD- 16-7356, where first six digits stand for a birth date, providing that Malaysia ID terms such as MyKad, GMPC or ID appears in proximity. Malicious Concealment Detection of content suspected to be manipulated (e.g. by replacing letters with symbols) to avoid detection, using methods such as statistical analysis. Malicious Concealment (Narrow) Detection of content suspected to be manipulated (e.g. by replacing letters with symbols) to avoid detection, using methods such as statistical analysis. Malicious Concealment (Wide) Detection of content suspected to be manipulated (e.g., by replacing letters with symbols) to avoid detection, using methods such as statistical analysis. May cause false positives. Malicious Concealment: L33T Detection of content suspected to be manipulated using “L33T” manipulation. Malicious Concealment: L33T (Narrow) Detection of content suspected to be manipulated using “L33T” manipulation. Malicious Concealment: L33T (Wide) Detection of content suspected to be manipulated using “L33T” manipulation, may cause false positives. Malicious Concealment: Reversed Text Detection of content suspected to be manipulated as reversing the text. Malicious Concealment: Reversed Text (Narrow) Detection of content suspected to be manipulated as reversing the text. Malicious Concealment: Reversed Text (Wide) Detection of content suspected to be manipulated as reversing the text, may cause false positives. Malicious Concealment: ROT13 Detection of content suspected to be manipulated using “ROT13” manipulation. Malicious Concealment: ROT13 (Narrow) Detection of content suspected to be manipulated using “ROT13” manipulation. Malicious Concealment: ROT13 (Wide) Detection of content suspected to be manipulated using “ROT13” manipulation, may cause false positives. Malicious Concealment: Upside Down Text Detection of content suspected to be manipulated using “upside down” manipulation. Malicious Concealment: Upside Down Text (Narrow) Detection of content suspected to be manipulated using “upside down” manipulation. Malicious Concealment: Upside Down Text (Wide) Detection of content suspected to be manipulated using “upside down” manipulation, may cause false positives. Maltese Identity Card Number Near Term Detects Maltese identity card numbers near a support term in Maltese or English. For example: “Identity Card Number 19999981M”. Malware (Default) Identifies HTTP/S transactions that are suspected to be malicious, based, for example, on web category, destination URL structure, and a mathematical analysis of data. This rule is not selected by default. Applies only when Forcepoint Web Security is installed. Administrator tuning of the rule, for example, by excluding specific destinations, is recommended. Malware (Strict) (Uncategorized) Identifies HTTP/S transactions that are suspected to be malicious, based, for example, on web category, destination URL structure, and a mathematical analysis of data. This rule is not selected by default. Applies only when Forcepoint Web Security is installed. Administrator tuning of the rule, for example, by excluding specific destinations, is recommended. MAR: Actuary Reports Detection of documents contain actuary reports (in attachments or files). Maximum Age (Wide) Detection of numbers less than or equal to a user-specified threshold in proximity to an age-related term, or date of birth under the specified threshold. Default age is 13. Maximum Age (Default) Detection of age-related phrases containing numbers less than or equal to a user-specified threshold or date of birth under the specified threshold. Default age is 13. Minimum Age (Wide) Detection of numbers greater than or equal to a user-specified threshold in proximity to an age-related term, or date of birth under the specified threshold. Default age is 13. Minimum Age (Default) Detection of age-related phrases containing numbers greater than or equal to a user-specified threshold or date of birth under the specified threshold. Default age is 13. Mexican CURP Code (Wide) Detects Mexican Unique Population Registration Codes (CURP or Clave Unica de Registro de Poblacion) that consist of 18 characters, where both letters and digits are present. For example: \"GOVM811225HCSRLN04\". Mexican CURP Code (Default) Detects Mexican Unique Population Registration Codes (CURP or Clave Unica de Registro de Poblacion) that consist of 18 characters, where both letters and digits are present, where at least 30% of the numbers are valid. For example: \"GOVM811225HCSRLN04\". Mexican CURP Code Near Term Detects Mexican Unique Population Registration Codes (CURP or Clave Unica de Registro de Poblacion) that consist of 18 characters, where both letters and digits are present, near a term in English or Spanish. For example: \"CURP GOVM811225HCSRLN04\". Mexican Names Detection of full names (Wide). This content classifier should be used in conjunction with additional data as it is permissive. Mexican Passport Number Near Term (Default) Detects Mexican passport numbers, near a term in Spanish or English. Mexican passport numbers consist of 11 digits or of a letter followed by 8 digits. For example, \"Passport number: 07460075411\". Mexican Passport Number Near Term (Wide) Detects case-insensitive Mexican passport numbers, near a permissive term in Spanish or English. Mexican passport numbers consist of 11 digits or of a letter followed by 8 digits. For example, \"Passport: 07460075411\". Mexican RFC Code (Wide) Detects Mexican tax identification number (RFC or Registro Federal de Contribuyentes) that consist of 13 characters, where both letters and digits are present with the last digit being a check digit (homoclave). For example: \"CATA720117QP0\". Mexican RFC Code (Default) Detects Mexican tax identification number (RFC or Registro Federal de Contribuyentes) that consist of 13 characters, where both letters and digits are present with the last digit being a check digit (homoclave), where at least 30% of the numbers are valid. For example: \"CATA720117QP0 LUGR581020PD0 CATA720117QP1\". Mexican RFC Code Near Term Detects Mexican tax identification number (RFC or Registro Federal de Contribuyentes) that consist of 13 characters, where both letters and digits are present with the last digit being a check digit (homoclave), near a term in English or Spanish. For example: \"RFC CATA720117QP0\". Mexican Social Security Number (NSS) (Default) Detects valid 11-digit Mexican Social Security Number (NSS). At least 30% of the 11-digit numbers in the text must be valid. For example: \"7491761007-8\". Mexican Social Security Number (NSS) (Wide) Detects valid 11-digit Mexican Social Security Number (NSS). For example: \"7491761007-8\". Mexican Social Security Number (NSS) Near Term Detects valid 11-digit Mexican Social Security Number (NSS), near a support term in Spanish or English. For example: \"Numero del Seguro Social 7491761007-8\". Mexican Standardized Bank Code (CLABE) (Default) Detects valid 18-digit Mexican Standardized Bank Code (CLABE), containing an assigned bank code and branch office code. At least 30% of the 18-digit numbers in the text must be valid. For example: \"072 680 005439760704\". Mexican Standardized Bank Code (CLABE) (Wide) Detects valid 18-digit Mexican Standardized Bank Code (CLABE). For example: \"000180000404040406\". Mexican Standardized Bank Code (CLABE) Near Term Detects valid 18-digit Mexican Standardized Bank Code (CLABE), containing an assigned bank code and branch office code, near a support term in Spanish or English. For example: \"CLABE 072 680 005439760704\". Mexico CURP (Clave Unica de Registro de Poblacion) Detection of Contract Nomenclature of CPISP (Clave Personal Interna del Servidor Publico). National Drug Code (Default) Detection of National Drug Code (NDC) numbers of prescription drugs. Undelimited numbers are subjected to statistical validation. National Drug Code (Narrow) Detection of at least one delimited number or 5 undelimited National Drug Code (NDC) numbers of prescription drugs, using statistical validation. National Drug Code (Wide) Detection of National Drug Code (NDC) numbers of prescription drugs. All instances are returned and no further check is made, may cause false positives. National Register of Legal Entities Number (Wide) Detects valid 14-digit Brazilian National Register of Legal Entities Numbers (CNPJ). For example: “05.211.592/0001- 04”. National Register of Legal Entities Number (Default) Detects valid 14-digit Brazilian National Register of Legal Entities Numbers (CNPJ). At least 50% of the 14-digit numbers in the text must be valid. For example: “05.211.592/0001-04”. National Register of Legal Entities Number Near Term Detects valid 14-digit Brazilian National Register of Legal Entities Numbers (CNPJ) near a support term in Portuguese or English. For example: “CNPJ 05.211.592/0001-04”. Netherlands: Bank Account Detection of Elfproef validated Dutch Bank Account numbers. Netherlands: Citizen Service Number Detection of Dutch Citizen Service Numbers (Burgerservicenummers or BSNs), in proximity to related terms. Netherlands: Sofinummer Detection of validated Netherlands Sofinummers, in proximity to related terms. New Zealand NHI - no support Detection of validated NHI Numbers, does not demand further evidence. NHS Numbers (Default) Detection of validated NHS numbers. NHS Numbers (Narrow) Detection of validated NHS numbers. Requires additional evidence, such as NHS related terms in proximity. NHS Numbers (Wide) Detection of all forms of valid NHS numbers. Norway Personnummer Detection of Norway Personal Numbers (personnummer), including d-numbers, possibly in proximity to related terms. Norwegian Names Detection of Norwegian full names. OpenSSH Private Key Detection of OpenSSH private keys. The first line of the key contains the string \"BEGIN OPENSSH PRIVATE KEY\". Password (Default) Detection of 8-25-character strings consisting of at least one letter and at least one digit or special characters that are not followed by a file extension. For example: “Qwerty1234”. Password (Wide) Detection of 6-25-character strings consisting of 1) at least one letter and at least one digit or special characters that are not followed by a file extension, or 2) two to three repeated alphanumeric strings, or 3) common passwords. For example: “Qwerty1”, “abcabc” or “letmein”. Password Files Detection of password files. Password Files (Wide) Detection of password files. Password Near Term (Default) Detection of password-related terms near 8-25-character strings consisting of at least one letter and at least one digit or special characters that are not followed by a file extension. For example: “Qwerty1234”. the term can be in Arabic, Chinese, Czech, Danish, Dutch, English, Finnish, French, Galician, German, Greek, Hebrew, Indonesian, Japanese, Korean, Norwegian, Portuguese, Russian, Slovak, Spanish, Swedish, Thai, Turkish, or Vietnamese. Password Near Term (Wide) Detection of password-related terms near 6-25-character strings consisting of 1) at least one letter and at least one digit or special characters that are not followed by a file extension, or 2) two to three repeated alphanumeric strings, or 3) common passwords. For example: “The Password is Qwerty1”, “das Passwort ist abcabc” or “pwd - letmein”. The term can be in Arabic, Chinese, Czech, Danish, Dutch, English, Finnish, French, Galician, German, Greek, Hebrew, Indonesian, Japanese, Korean, Norwegian, Portuguese, Russian, Slovak, Spanish, Swedish, Thai, Turkish, or Vietnamese. Passwords - common passwords without term Detection of common passwords (based on various common passwords lists) with or without trailing digits. No term is required in proximity. The minimal number of passwords is configurable through the parameter. PCI Audit: CCN with CVV Detection of valid credit cards near CVV. PCI Audit: CCN with Expiration Date Detection of valid credit cards near expiration dates. PCI Audit: Masked Credit Cards Detection of masked American Express, Discover, JCB, MasterCard, and Visa credit cards. PCI Audit: Non- Delimited CCNs with no word boundaries Detection of possible non-delimited credit card numbers, with no word boundaries. PCI Audit: Non- Delimited Credit Card Numbers Detection of valid non-delimited credit card numbers. May cause false positives. PCI Audit: User-Defined CCN Delimiter Detection of potential credit-card-numbers, possible delimiters can be added by the user, default delimiter is “-”. People’s Republic of China Identification Numbers Detection of validated People’s Republic of China Identification Numbers. People's Republic of China Passport Number Near Term (Default) Detects 9-character People's Republic of China passport numbers consisting of \"D\", \"E\", \"G\", \"P\" or \"S\" followed by 8 digits, near a term in Chinese or English. For example, \"Passport: G45969933\". People's Republic of China Passport Number Near Term (Narrow) Detects 9-character People's Republic of China passport numbers consisting of \"D\", \"E\", \"G\", \"P\" or \"S\" followed by 8 digits, near a strict term in Chinese or English. For example, \"Passport No. G45969933\". Perl Source Code (By Content) Detection of Perl source code by content. Peruvian RUC of Individuals (Near Term) Detects valid 11-digit Unique Taxpayer Registration Number (RUC) of Individuals near a support term in Spanish or English. For example: \"RUC 10328503480\". Peruvian RUC of Individuals (Wide) Detects valid 11-digit Unique Taxpayer Registration Number (RUC) of Individuals. For example: \"10328503480\". Peruvian RUC of Non- Individuals (Near Term) Detects valid 11-digit Unique Taxpayer Registration Number (RUC) of non-Individuals near a support term in Spanish or English. For example: \"RUC 20519354111\". Peruvian RUC of Non- Individuals (Wide) Detects valid 11-digit Unique Taxpayer Registration Number (RUC) of non-Individuals. For example: \"20519354111\". Peruvian Unique Identification Code (CUI) (Default) Detects valid 9-digit Peruvian Unique Identification Codes (CUI). At least 40% of the 9-digit numbers in the text must be valid. For example: \"42158455-4\". Peruvian Unique Identification Code (CUI) (Wide) Detects valid 9-digit Peruvian Unique Identification Codes (CUI). For example: \"42158455-4\". Peruvian Unique Identification Code (CUI) Near Term (Default) Detects valid 9-digit Peruvian Unique Identification Codes (CUI), near a support term in Spanish or English. For example: \"CUI 42158455-4\". Peruvian Unique Identification Code (CUI) Near Term (Narrow) Detects valid 9-digit Peruvian Unique Identification Codes (CUI), near a support term in Spanish or English. At least 40% of the 9-digit numbers in the text must be valid. For example: \"CUI 42158455-4\". PGP Private Key Detection of PGP private keys. The first line of the key contains the string \"BEGIN PGP PRIVATE KEY BLOCK\". PhilHealth Identification Number (Wide) Detects valid 12-digit Philippine PhilHealth Identification Numbers. For example: “12-000015726-6””. PhilHealth Identification Number (Default) Detects valid 12-digit Philippine PhilHealth Identification Numbers. At least 50% of the 12-digit numbers in the text must be valid. For example: “12-000015726-6”. PhilHealth Identification Number Near Term Detects valid 12-digit Philippine PhilHealth Identification Numbers near a support term in English. For example: “PhilHealth# 12-000015726-6”. Philippine SSS Number (Wide) Detects valid 10-digit Philippine SSS numbers. For example: “06-1739315-5”. Philippine SSS Number (Default) Detects valid 10-digit Philippine SSS numbers. At least 30% of the 10-digit numbers in the text must be valid. For example: “06-1739315-5”. Philippine SSS Number Near Term Detects valid 10-digit Philippine SSS numbers near a support term in English. For example: “SSS: 06-1739315-5”. Philippine Taxpayer Identification Number (Wide) Detects valid 9- or 12-digit Philippine taxpayer identification numbers (TINs). For example: “000 063 471”. Philippine Taxpayer Identification Number (Default) Detects valid 9- or 12-digit Philippine taxpayer identification numbers (TINs). At least 30% of the 9- and 12-digit numbers in the text must be valid. For example: “000 063 471”. Philippine Taxpayer Identification Number Near Term Detects valid 9- or 12-digit Philippine taxpayer identification numbers (TINs) near a support term in English. For example: “T.I.N. 000 063 471”. Philippines Address (Default) Detection of Philippines address (default behavior). Philippines Address (Narrow) Detection of Philippines address, tuned to minimize false positives (may cause false negatives). PIN with proximity Detection of personal identification numbers (PINs) in proximity to a PIN-related term. PKCS #1 Private Key Detection of PKCS #1 private keys, also known as SSLeay private keys. The first line of the key contains the string \"BEGIN RSA PRIVATE KEY\". Poland: ID Detection of Polish Identification numbers. Poland: NIP Number Detection of Polish NIP numbers. Poland: PESEL Number Detection of Polish Pesel numbers. Polish REGON Number (Wide) Detects Polish REGON numbers. Polish REGON numbers consist of 9 or 14 digits with the last digit being a check digit. For example: \"498665647\" or \"27499999816064\". Polish REGON Number (Default) Detects Po"
    }
}