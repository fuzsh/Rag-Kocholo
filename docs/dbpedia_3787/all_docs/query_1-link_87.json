{
    "id": "dbpedia_3787_1",
    "rank": 87,
    "data": {
        "url": "https://www.tensorflow.org/tensorboard/get_started",
        "read_more_link": "",
        "language": "en",
        "title": "Get started with TensorBoard",
        "top_image": "https://www.tensorflow.org/static/site-assets/images/project-logos/tensorboard-logo-social.png",
        "meta_img": "https://www.tensorflow.org/static/site-assets/images/project-logos/tensorboard-logo-social.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/tensorflow/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/tensorflow/images/lockup.svg",
            "https://www.tensorflow.org/images/tf_logo_32px.png",
            "https://www.tensorflow.org/images/colab_logo_32px.png",
            "https://www.tensorflow.org/images/GitHub-Mark-32px.png",
            "https://www.tensorflow.org/images/download_logo_32px.png",
            "https://github.com/tensorflow/tensorboard/blob/master/docs/images/quickstart_model_fit.png?raw=1",
            "https://github.com/tensorflow/tensorboard/blob/master/docs/images/quickstart_gradient_tape.png?raw=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/tensorflow/images/favicon.png",
        "meta_site_name": "TensorFlow",
        "canonical_link": "https://www.tensorflow.org/tensorboard/get_started",
        "text": "View on TensorFlow.org Run in Google Colab View source on GitHub Download notebook\n\nIn machine learning, to improve something you often need to be able to measure it. TensorBoard is a tool for providing the measurements and visualizations needed during the machine learning workflow. It enables tracking experiment metrics like loss and accuracy, visualizing the model graph, projecting embeddings to a lower dimensional space, and much more.\n\nThis quickstart will show how to quickly get started with TensorBoard. The remaining guides in this website provide more details on specific capabilities, many of which are not included here.\n\n# Load the TensorBoard notebook extension %load_ext tensorboard\n\nimport tensorflow as tf import datetime\n\n# Clear any logs from previous runs rm -rf ./logs/\n\nUsing the MNIST dataset as the example, normalize the data and write a function that creates a simple Keras model for classifying the images into 10 classes.\n\nmnist = tf.keras.datasets.mnist (x_train, y_train),(x_test, y_test) = mnist.load_data() x_train, x_test = x_train / 255.0, x_test / 255.0 def create_model(): return tf.keras.models.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28), name='layers_flatten'), tf.keras.layers.Dense(512, activation='relu', name='layers_dense'), tf.keras.layers.Dropout(0.2, name='layers_dropout'), tf.keras.layers.Dense(10, activation='softmax', name='layers_dense_2') ])\n\nDownloading data from https&colon;//storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz 11493376/11490434 [==============================] - 0s 0us/step\n\nUsing TensorBoard with Keras Model.fit()\n\nWhen training with Keras's Model.fit(), adding the tf.keras.callbacks.TensorBoard callback ensures that logs are created and stored. Additionally, enable histogram computation every epoch with histogram_freq=1 (this is off by default)\n\nPlace the logs in a timestamped subdirectory to allow easy selection of different training runs.\n\nmodel = create_model() model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) log_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\") tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1) model.fit(x=x_train, y=y_train, epochs=5, validation_data=(x_test, y_test), callbacks=[tensorboard_callback])\n\nTrain on 60000 samples, validate on 10000 samples Epoch 1/5 60000/60000 [==============================] - 15s 246us/sample - loss&colon; 0.2217 - accuracy&colon; 0.9343 - val_loss&colon; 0.1019 - val_accuracy&colon; 0.9685 Epoch 2/5 60000/60000 [==============================] - 14s 229us/sample - loss&colon; 0.0975 - accuracy&colon; 0.9698 - val_loss&colon; 0.0787 - val_accuracy&colon; 0.9758 Epoch 3/5 60000/60000 [==============================] - 14s 231us/sample - loss&colon; 0.0718 - accuracy&colon; 0.9771 - val_loss&colon; 0.0698 - val_accuracy&colon; 0.9781 Epoch 4/5 60000/60000 [==============================] - 14s 227us/sample - loss&colon; 0.0540 - accuracy&colon; 0.9820 - val_loss&colon; 0.0685 - val_accuracy&colon; 0.9795 Epoch 5/5 60000/60000 [==============================] - 14s 228us/sample - loss&colon; 0.0433 - accuracy&colon; 0.9862 - val_loss&colon; 0.0623 - val_accuracy&colon; 0.9823 <tensorflow.python.keras.callbacks.History at 0x7fc8a5ee02e8>\n\nStart TensorBoard through the command line or within a notebook experience. The two interfaces are generally the same. In notebooks, use the %tensorboard line magic. On the command line, run the same command without \"%\".\n\n%tensorboard --logdir logs/fit\n\nA brief overview of the visualizations created in this example and the dashboards (tabs in top navigation bar) where they can be found:\n\nScalars show how the loss and metrics change with every epoch. You can use them to also track training speed, learning rate, and other scalar values. Scalars can be found in the Time Series or Scalars dashboards.\n\nGraphs help you visualize your model. In this case, the Keras graph of layers is shown which can help you ensure it is built correctly. Graphs can be found in the Graphs dashboard.\n\nHistograms and Distributions show the distribution of a Tensor over time. This can be useful to visualize weights and biases and verify that they are changing in an expected way. Histograms can be found in the Time Series or Histograms dashboards. Distributions can be found in the Distributions dashboard.\n\nAdditional TensorBoard dashboards are automatically enabled when you log other types of data. For example, the Keras TensorBoard callback lets you log images and embeddings as well. You can see what other dashboards are available in TensorBoard by clicking on the \"inactive\" dropdown towards the top right.\n\nUsing TensorBoard with other methods\n\nWhen training with methods such as tf.GradientTape(), use tf.summary to log the required information.\n\nUse the same dataset as above, but convert it to tf.data.Dataset to take advantage of batching capabilities:\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)) test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test)) train_dataset = train_dataset.shuffle(60000).batch(64) test_dataset = test_dataset.batch(64)\n\nThe training code follows the advanced quickstart tutorial, but shows how to log metrics to TensorBoard. Choose loss and optimizer:\n\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy() optimizer = tf.keras.optimizers.Adam()\n\nCreate stateful metrics that can be used to accumulate values during training and logged at any point:\n\n# Define our metrics train_loss = tf.keras.metrics.Mean('train_loss', dtype=tf.float32) train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy('train_accuracy') test_loss = tf.keras.metrics.Mean('test_loss', dtype=tf.float32) test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy('test_accuracy')\n\nDefine the training and test functions:\n\ndef train_step(model, optimizer, x_train, y_train): with tf.GradientTape() as tape: predictions = model(x_train, training=True) loss = loss_object(y_train, predictions) grads = tape.gradient(loss, model.trainable_variables) optimizer.apply_gradients(zip(grads, model.trainable_variables)) train_loss(loss) train_accuracy(y_train, predictions) def test_step(model, x_test, y_test): predictions = model(x_test) loss = loss_object(y_test, predictions) test_loss(loss) test_accuracy(y_test, predictions)\n\nSet up summary writers to write the summaries to disk in a different logs directory:\n\ncurrent_time = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\") train_log_dir = 'logs/gradient_tape/' + current_time + '/train' test_log_dir = 'logs/gradient_tape/' + current_time + '/test' train_summary_writer = tf.summary.create_file_writer(train_log_dir) test_summary_writer = tf.summary.create_file_writer(test_log_dir)\n\nStart training. Use tf.summary.scalar() to log metrics (loss and accuracy) during training/testing within the scope of the summary writers to write the summaries to disk. You have control over which metrics to log and how often to do it. Other tf.summary functions enable logging other types of data.\n\nmodel = create_model() # reset our model EPOCHS = 5 for epoch in range(EPOCHS): for (x_train, y_train) in train_dataset: train_step(model, optimizer, x_train, y_train) with train_summary_writer.as_default(): tf.summary.scalar('loss', train_loss.result(), step=epoch) tf.summary.scalar('accuracy', train_accuracy.result(), step=epoch) for (x_test, y_test) in test_dataset: test_step(model, x_test, y_test) with test_summary_writer.as_default(): tf.summary.scalar('loss', test_loss.result(), step=epoch) tf.summary.scalar('accuracy', test_accuracy.result(), step=epoch) template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}' print (template.format(epoch+1, train_loss.result(), train_accuracy.result()*100, test_loss.result(), test_accuracy.result()*100)) # Reset metrics every epoch train_loss.reset_states() test_loss.reset_states() train_accuracy.reset_states() test_accuracy.reset_states()\n\nEpoch 1, Loss&colon; 0.24321186542510986, Accuracy&colon; 92.84333801269531, Test Loss&colon; 0.13006582856178284, Test Accuracy&colon; 95.9000015258789 Epoch 2, Loss&colon; 0.10446818172931671, Accuracy&colon; 96.84833526611328, Test Loss&colon; 0.08867532759904861, Test Accuracy&colon; 97.1199951171875 Epoch 3, Loss&colon; 0.07096975296735764, Accuracy&colon; 97.80166625976562, Test Loss&colon; 0.07875105738639832, Test Accuracy&colon; 97.48999786376953 Epoch 4, Loss&colon; 0.05380449816584587, Accuracy&colon; 98.34166717529297, Test Loss&colon; 0.07712937891483307, Test Accuracy&colon; 97.56999969482422 Epoch 5, Loss&colon; 0.041443776339292526, Accuracy&colon; 98.71833038330078, Test Loss&colon; 0.07514958828687668, Test Accuracy&colon; 97.5\n\nOpen TensorBoard again, this time pointing it at the new log directory. We could have also started TensorBoard to monitor training while it progresses.\n\n%tensorboard --logdir logs/gradient_tape"
    }
}