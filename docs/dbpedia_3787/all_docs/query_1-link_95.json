{
    "id": "dbpedia_3787_1",
    "rank": 95,
    "data": {
        "url": "https://developer.chrome.com/docs/crux/guides/crux-api",
        "read_more_link": "",
        "language": "en",
        "title": "How to use the CrUX API",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/chrome/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/chrome/images/lockup.svg",
            "https://web.dev/images/authors/rviscomi.jpg",
            "https://web.dev/images/authors/exterkamp.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn how to use the Chrome UX Report API to get RESTful access to real-user experience data across millions of websites.",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/chrome/images/favicon.png",
        "meta_site_name": "Chrome for Developers",
        "canonical_link": "https://developer.chrome.com/docs/crux/guides/crux-api",
        "text": "Learn how to use the Chrome UX Report API to get access to real-user experience data across millions of websites.\n\nThe Chrome UX Report (CrUX) dataset represents how real-world Chrome users experience popular destinations on the web. Since 2017, when the queryable dataset was first released on BigQuery, field data from CrUX has been integrated into developer tools like PageSpeed Insights, the CrUX Dashboard, and Search Console's Core Web Vitals report, enabling developers to measure and monitor real-user experiences. The piece that has been missing all this time has been a tool that provides free and RESTful access to CrUX data programmatically. To help bridge that gap, we're excited to announce the release of the all new Chrome UX Report API!\n\nThis API has been built with the goal of providing developers with simple, fast, and comprehensive access to CrUX data. The CrUX API only reports field user experience data, unlike the existing PageSpeed Insights API, which also reports lab data from the Lighthouse performance audits. The CrUX API is streamlined and can quickly serve user experience data, making it ideally suited for real-time auditing applications.\n\nTo ensure that developers have access to all of the metrics that matter the most—the Core Web Vitals—the CrUX API audits and monitors Largest Contentful Paint (LCP), First Input Delay (FID), and Cumulative Layout Shift (CLS) at both the origin and URL level.\n\nSo let's dive in and see how to use it!\n\nQuery origin data\n\nOrigins in the CrUX dataset encompass all underlying page-level experiences. The following example demonstrates how to query the CrUX API for an origin's user experience data using cURL on the command line.\n\nAPI_KEY=\"[YOUR_API_KEY]\" curl \"https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$API_KEY\" \\ --header 'Content-Type: application/json' \\ --data '{\"origin\": \"https://web.dev\"}'\n\nThe curl command is made up of three parts:\n\nThe URL endpoint of the API, including the caller's private API key.\n\nThe Content-Type: application/json header, indicating that the request body contains JSON.\n\nThe JSON-encoded request body, specifying the https://web.dev origin.\n\nTo do the same thing in JavaScript, use the CrUXApiUtil utility, which makes the API call and returns the decoded response (see also our Github variant for more features including history and batch support).\n\nconst CrUXApiUtil = {}; // Get your CrUX API key at https://goo.gle/crux-api-key. CrUXApiUtil.API_KEY = '[YOUR_API_KEY]'; CrUXApiUtil.API_ENDPOINT = `https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=${CrUXApiUtil.API_KEY}`; CrUXApiUtil.query = function (requestBody) { if (CrUXApiUtil.API_KEY == '[YOUR_API_KEY]') { throw 'Replace \"YOUR_API_KEY\" with your private CrUX API key. Get a key at https://goo.gle/crux-api-key.'; } return fetch(CrUXApiUtil.API_ENDPOINT, { method: 'POST', body: JSON.stringify(requestBody) }).then(response => response.json()).then(response => { if (response.error) { return Promise.reject(response); } return response; }); };\n\nReplace [YOUR_API_KEY] with your key. Next, call the CrUXApiUtil.query function and pass in the request body object.\n\nCrUXApiUtil.query({ origin: 'https://web.dev' }).then(response => { console.log(response); }).catch(response => { console.error(response); });\n\nIf data exists for this origin, the API response is a JSON-encoded object containing metrics representing the distribution of user experiences. The distribution metrics are histogram bins and percentiles.\n\n{ \"record\": { \"key\": { \"origin\": \"https://web.dev\" }, \"metrics\": { \"largest_contentful_paint\": { \"histogram\": [ { \"start\": 0, \"end\": 2500, \"density\": 0.7925068547983514 }, { \"start\": 2500, \"end\": 4000, \"density\": 0.1317422195536863 }, { \"start\": 4000, \"density\": 0.07575092564795324 } ], \"percentiles\": { \"p75\": 2216 } }, // ... } } }\n\nThe start and end properties of the histogram object represent the range of values users experience for the given metric. The density property represents the proportion of user experiences within that range. In this example, 79% of LCP user experiences across all web.dev pages are under 2,500 milliseconds, which is the \"good\" LCP threshold. The percentiles.p75 value means that 75% of user experiences in this distribution are less than 2,216 milliseconds. Learn more about the response structure in the response body documentation.\n\nErrors\n\nWhen the CrUX API doesn't have any data for a given origin, it responds with a JSON-encoded error message:\n\n{ \"error\": { \"code\": 404, \"message\": \"chrome ux report data not found\", \"status\": \"NOT_FOUND\" } }\n\nTo debug this error, first check that the requested origin is publicly navigable. You can test this by entering the origin into your browser's address bar and comparing it against the final URL after any redirects. Common problems include unnecessarily adding or omitting the subdomain and using the wrong HTTP protocol.\n\nError\n\n{\"origin\": \"http://www.web.dev\"}\n\nSuccess\n\n{\"origin\": \"https://web.dev\"}\n\nIf the requested origin is the navigable version, this error may also occur if the origin has an insufficient number of samples. All origins and URLs included in the dataset must have a sufficient number of samples to anonymize individual users. Additionally, origins and URLs must be publicly indexable. Refer to the CrUX methodology to learn more about how websites are included in the dataset.\n\nQuery URL data\n\nYou've seen how to query the CrUX API for the overall user experience on an origin. To restrict the results to a particular page, use the url request parameter.\n\nAPI_KEY=\"[YOUR_API_KEY]\" curl \"https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$API_KEY\" \\ --header 'Content-Type: application/json' \\ --data '{\"url\": \"https://web.dev/fast/\"}'\n\nThis cURL command is similar to the origin example, except that the request body uses the url parameter to specify the page to look up.\n\nTo query URL data from the CrUX API in JavaScript, call the CrUXApiUtil.query function using the url parameter in the request body.\n\nCrUXApiUtil.query({ url: 'https://web.dev/fast/' }).then(response => { console.log(response); }).catch(response => { console.error(response); });\n\nIf data for this URL exists in the CrUX dataset, the API will return a JSON-encoded response. For example\n\n{ \"record\": { \"key\": { \"url\": \"https://web.dev/fast/\" }, \"metrics\": { \"largest_contentful_paint\": { \"histogram\": [ { \"start\": 0, \"end\": 2500, \"density\": 0.8477304539092148 }, { \"start\": 2500, \"end\": 4000, \"density\": 0.08988202359528057 }, { \"start\": 4000, \"density\": 0.062387522495501155 } ], \"percentiles\": { \"p75\": 1947 } }, // ... } } }\n\nTrue to form, the results show that https://web.dev/fast/ has 85% \"good\" LCP experiences and a 75th percentile of 1,947 milliseconds, which is slightly better than the origin-wide distribution.\n\nURL normalization\n\nThe CrUX API may normalize requested URLs to better match the list of known URLs. For example, querying for the URL https://web.dev/fast/#measure-performance-in-the-field will result in data for https://web.dev/fast/ due to normalization. When this happens, a urlNormalizationDetails object will be included in the response.\n\n{ \"record\": { \"key\": { \"url\": \"https://web.dev/fast/\" }, \"metrics\": { ... } }, \"urlNormalizationDetails\": { \"normalizedUrl\": \"https://web.dev/fast/\", \"originalUrl\": \"https://web.dev/fast/#measure-performance-in-the-field\" } }\n\nLearn more about URL normalization in the CrUX documentation.\n\nQuery by form factor\n\nUser experiences can vary significantly depending on website optimizations, network conditions, and users' devices. To better understand these differences, drill down into origin and URL performance using the formFactor dimension of the CrUX API.\n\nThe API supports three explicit form factor values: DESKTOP, PHONE, and TABLET. In addition to the origin or URL, specify one of these values in the request body to restrict results to only those user experiences. This example demonstrates how to query the API by form factor using cURL.\n\nAPI_KEY=\"[YOUR_API_KEY]\" curl \"https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$API_KEY\" \\ --header 'Content-Type: application/json' \\ --data '{\"url\": \"https://web.dev/fast/\", \"formFactor\": \"PHONE\"}'\n\nTo query the CrUX API for form factor-specific data using JavaScript, call the CrUXApiUtil.query function using the url and formFactor parameters in the request body.\n\nCrUXApiUtil.query({ url: 'https://web.dev/fast/', formFactor: 'PHONE' }).then(response => { console.log(response); }).catch(response => { console.error(response); });\n\nOmitting the formFactor parameter is equivalent to requesting data for all form factors combined.\n\n{ \"record\": { \"key\": { \"url\": \"https://web.dev/fast/\", \"formFactor\": \"PHONE\" }, \"metrics\": { \"largest_contentful_paint\": { \"histogram\": [ { \"start\": 0, \"end\": 2500, \"density\": 0.778631284916204 }, { \"start\": 2500, \"end\": 4000, \"density\": 0.13943202979515887 }, { \"start\": 4000, \"density\": 0.08193668528864119 } ], \"percentiles\": { \"p75\": 2366 } }, // ... } } }\n\nThe key field of the response will echo back the formFactor request configuration to confirm that only phone experiences are included.\n\nRecall from the previous section that 85% of user experiences on this page had \"good\" LCP. Compare that to phone-specific experiences, of which only 78% are considered \"good\". The 75th percentile is also slower among phone experiences, up from 1,947 milliseconds to 2,366 milliseconds. Segmenting by form factor has the potential to highlight more extreme disparities in user experiences.\n\nAssess Core Web Vitals performance\n\nThe Core Web Vitals program defines targets that help determine whether a user experience or a distribution of experiences can be considered \"good\". In the following example, we use the CrUX API and the CrUXApiUtil.query function to assess whether a web page's distribution of Core Web Vitals metrics (LCP, FID, CLS) are \"good\".\n\nCrUXApiUtil.query({ url: 'https://web.dev/fast/' }).then(response => { assessCoreWebVitals(response); }).catch(response => { console.error(response); }); function assessCoreWebVitals(response) { // See https://web.dev/vitals/#core-web-vitals. const CORE_WEB_VITALS = [ 'largest_contentful_paint', 'first_input_delay', 'cumulative_layout_shift' ]; CORE_WEB_VITALS.forEach(metric => { const data = response.record.metrics[metric]; if (!data) { console.log('No data for', metric); return; } const p75 = data.percentiles.p75; const threshold = data.histogram[0].end; // A Core Web Vitals metric passes the assessment if // its 75th percentile is under the \"good\" threshold. const passes = p75 < threshold; console.log(`The 75th percentile (${p75}) of ${metric} ` + `${passes ? 'passes' : 'does not pass'} ` + `the Core Web Vitals \"good\" threshold (${threshold}).`) }); }\n\nThe results show that this page passes the Core Web Vitals assessments for all three metrics.\n\nThe 75th percentile (1973) of largest_contentful_paint passes the Core Web Vitals \"good\" threshold (2500). The 75th percentile (20) of first_input_delay passes the Core Web Vitals \"good\" threshold (100). The 75th percentile (0.05) of cumulative_layout_shift passes the Core Web Vitals \"good\" threshold (0.10).\n\nCombined with an automated way to monitor API results, data from CrUX can be used to ensure that real-user experiences get fast and stay fast. For more information about Core Web Vitals and how to measure them, check out Web Vitals and Tools to measure Core Web Vitals.\n\nWhat's next?\n\nThe features included in the initial version of the CrUX API only scratch the surface of the kinds of insights that are possible with CrUX. Users of the CrUX dataset on BigQuery may be familiar with some of the more advanced features including:\n\nAdditional metrics\n\nfirst_paint\n\ndom_content_loaded\n\nonload\n\ntime_to_first_byte\n\nnotification_permissions\n\nAdditional dimensions\n\nmonth\n\ncountry\n\neffective connection type (ECT)\n\nAdditional granularity\n\ndetailed histograms\n\nmore percentiles"
    }
}