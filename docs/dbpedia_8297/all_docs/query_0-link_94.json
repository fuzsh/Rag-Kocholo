{
    "id": "dbpedia_8297_0",
    "rank": 94,
    "data": {
        "url": "https://huggingface.co/datasets/code-rag-bench/github-repos/viewer",
        "read_more_link": "",
        "language": "en",
        "title": "repos · Datasets at Hugging Face",
        "top_image": "https://huggingface.co/front/thumbnails/datasets-viewer.png",
        "meta_img": "https://huggingface.co/front/thumbnails/datasets-viewer.png",
        "images": [
            "https://www.gravatar.com/avatar/e519db50ad55ee83c63455fb63e915e7?d=retro&size=100"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "We’re on a journey to advance and democratize artificial intelligence through open source and open science.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://huggingface.co/datasets/code-rag-bench/github-repos/viewer",
        "text": "package kg.jl.common; import android.content.Context; import android.support.test.InstrumentationRegistry; import android.support.test.runner.AndroidJUnit4; import org.junit.Test; import org.junit.runner.RunWith; import static org.junit.Assert.*; /** * Instrumentation test, which will execute on an Android device. * * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a> */ @RunWith(AndroidJUnit4.class) public class ExampleInstrumentedTest { @Test public void useAppContext() throws Exception { // Context of the app under test. Context appContext = InstrumentationRegistry.getTargetContext(); assertEquals(\"kg.jl.common.test\", appContext.getPackageName()); } }\n\n{ \"content_hash\": \"91f446bb78faf3093f30e0586b5e78a4\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 26, \"max_line_length\": 78, \"avg_line_length\": 28.192307692307693, \"alnum_prop\": 0.7421555252387448, \"repo_name\": \"coca-cola33/CloudFilm\", \"id\": \"585abba6f2aa05e68e870464ce47fbf0fbf3a35a\", \"size\": \"733\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"common/src/androidTest/java/kg/jl/common/ExampleInstrumentedTest.java\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"Java\", \"bytes\": \"887574\" } ], \"symlink_target\": \"\" }\n\nvar path = require('path'); var aliasify = require('aliasify'); var common = require('./platforms/common'); var fs = require('fs'); var childProcess = require('child_process'); var events = require('cordova-common').events; var bundle = require('cordova-js/tasks/lib/bundle-browserify'); var writeLicenseHeader = require('cordova-js/tasks/lib/write-license-header'); var Q = require('q'); var computeCommitId = require('cordova-js/tasks/lib/compute-commit-id'); var Readable = require('stream').Readable; var PlatformJson = require('cordova-common').PlatformJson; var PluginInfoProvider = require('cordova-common').PluginInfoProvider; function generateFinalBundle (platform, libraryRelease, outReleaseFile, commitId, platformVersion) { var deferred = Q.defer(); var outReleaseFileStream = fs.createWriteStream(outReleaseFile); var time = new Date().valueOf(); writeLicenseHeader(outReleaseFileStream, platform, commitId, platformVersion); var releaseBundle = libraryRelease.bundle(); releaseBundle.pipe(outReleaseFileStream); outReleaseFileStream.on('finish', function () { var newtime = new Date().valueOf() - time; events.emit('verbose', 'generated cordova.' + platform + '.js @ ' + commitId + ' in ' + newtime + 'ms'); deferred.resolve(); // TODO clean up all the *.browserify files }); outReleaseFileStream.on('error', function (err) { events.emit('warn', 'Error while generating cordova.js'); deferred.reject(err); }); return deferred.promise; } function computeCommitIdSync () { var deferred = Q.defer(); computeCommitId(function (cId) { deferred.resolve(cId); }); return deferred.promise; } function getPlatformVersion (cId, project_dir) { var deferred = Q.defer(); // run version script for each platform to get platformVersion var versionPath = path.join(project_dir, '/cordova/version'); childProcess.exec('\"' + versionPath + '\"', function (err, stdout, stderr) { if (err) { err.message = 'Failed to get platform version (will use \\'N/A\\' instead).\\n' + err.message; events.emit('warn', err); deferred.resolve('N/A'); } else { deferred.resolve(stdout.trim()); } }); return deferred.promise; } module.exports = function doBrowserify (project, platformApi, pluginInfoProvider) { // Process: // - Do config munging by calling into config-changes module // - List all plugins in plugins_dir // - Load and parse their plugin.xml files. // - Skip those without support for this platform. (No <platform> tags means JS-only!) // - Build a list of all their js-modules, including platform-specific js-modules. // - For each js-module (general first, then platform) build up an object storing the path and any clobbers, merges and runs for it. // Write this object into www/cordova_plugins.json. // This file is not really used. Maybe cordova app harness var platform = platformApi.platform; events.emit('verbose', 'Preparing ' + platform + ' browserify project'); pluginInfoProvider = pluginInfoProvider || new PluginInfoProvider(); // Allow null for backwards-compat. var platformJson = PlatformJson.load(project.locations.plugins, platform); var wwwDir = platformApi.getPlatformInfo().locations.www; var commitId; return computeCommitIdSync() .then(function (cId) { commitId = cId; return getPlatformVersion(commitId, platformApi.root); }).then(function (platformVersion) { var libraryRelease = bundle(platform, false, commitId, platformVersion, platformApi.getPlatformInfo().locations.platformWww); var pluginMetadata = {}; var modulesMetadata = []; var plugins = Object.keys(platformJson.root.installed_plugins).concat(Object.keys(platformJson.root.dependent_plugins)); events.emit('verbose', 'Iterating over plugins in project:', plugins); plugins.forEach(function (plugin) { var pluginDir = path.join(project.locations.plugins, plugin); var pluginInfo = pluginInfoProvider.get(pluginDir); // pluginMetadata is a mapping from plugin IDs to versions. pluginMetadata[pluginInfo.id] = pluginInfo.version; // Copy www assets described in <asset> tags. pluginInfo.getAssets(platform) .forEach(function (asset) { common.asset.install(asset, pluginDir, wwwDir); }); pluginInfo.getJsModules(platform) .forEach(function (jsModule) { var moduleName = jsModule.name ? jsModule.name : path.basename(jsModule.src, '.js'); var moduleId = pluginInfo.id + '.' + moduleName; var moduleMetadata = { file: jsModule.src, id: moduleId, name: moduleName, pluginId: pluginInfo.id }; if (jsModule.clobbers.length > 0) { moduleMetadata.clobbers = jsModule.clobbers.map(function (o) { return o.target; }); } if (jsModule.merges.length > 0) { moduleMetadata.merges = jsModule.merges.map(function (o) { return o.target; }); } if (jsModule.runs) { moduleMetadata.runs = true; } modulesMetadata.push(moduleMetadata); libraryRelease.require(path.join(pluginDir, jsModule.src), { expose: moduleId }); }); }); events.emit('verbose', 'Writing out cordova_plugins.js...'); // Create a stream and write plugin metadata into it // instead of generating intermediate file on FS var cordova_plugins = new Readable(); cordova_plugins.push( 'module.exports = ' + JSON.stringify(modulesMetadata, null, 2) + ';\\n' + 'module.exports.metadata = ' + JSON.stringify(pluginMetadata, null, 2) + ';\\n', 'utf8'); cordova_plugins.push(null); var bootstrap = new Readable(); bootstrap.push('require(\\'cordova/init\\');\\n', 'utf8'); bootstrap.push(null); var moduleAliases = modulesMetadata .reduce(function (accum, meta) { accum['./' + meta.name] = meta.id; return accum; }, {}); libraryRelease .add(cordova_plugins, {file: path.join(wwwDir, 'cordova_plugins.js'), expose: 'cordova/plugin_list'}) .add(bootstrap) .transform(aliasify, {aliases: moduleAliases}); var outReleaseFile = path.join(wwwDir, 'cordova.js'); return generateFinalBundle(platform, libraryRelease, outReleaseFile, commitId, platformVersion); }); };\n\n{ \"content_hash\": \"b5787bd890456bdbc273644cf8b6746e\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 162, \"max_line_length\": 137, \"avg_line_length\": 44.51851851851852, \"alnum_prop\": 0.5990016638935108, \"repo_name\": \"purplecabbage/cordova-lib\", \"id\": \"1a773711a9c51ebb0f80858be7f5f717fc7880d4\", \"size\": \"8027\", \"binary\": false, \"copies\": \"6\", \"ref\": \"refs/heads/master\", \"path\": \"src/plugman/browserify.js\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"Batchfile\", \"bytes\": \"20076\" }, { \"name\": \"C\", \"bytes\": \"1420\" }, { \"name\": \"CSS\", \"bytes\": \"74380\" }, { \"name\": \"HTML\", \"bytes\": \"82245\" }, { \"name\": \"Java\", \"bytes\": \"278938\" }, { \"name\": \"JavaScript\", \"bytes\": \"923328\" }, { \"name\": \"Matlab\", \"bytes\": \"1411\" }, { \"name\": \"Objective-C\", \"bytes\": \"1520\" }, { \"name\": \"Shell\", \"bytes\": \"555\" }, { \"name\": \"Smalltalk\", \"bytes\": \"332\" } ], \"symlink_target\": \"\" }\n\n#ifndef MBED_COMMON_OBJECTS_H #define MBED_COMMON_OBJECTS_H #include \"cmsis.h\" #include \"PortNames.h\" #include \"PeripheralNames.h\" #include \"PinNames.h\" #ifdef __cplusplus extern \"C\" { #endif struct pwmout_s { PWMName pwm; PinName pin; uint32_t prescaler; uint32_t period; uint32_t pulse; uint8_t channel; uint8_t inverted; }; struct spi_s { SPI_HandleTypeDef handle; IRQn_Type spiIRQ; SPIName spi; PinName pin_miso; PinName pin_mosi; PinName pin_sclk; PinName pin_ssel; #ifdef DEVICE_SPI_ASYNCH uint32_t event; uint8_t transfer_type; #endif }; struct serial_s { UARTName uart; int index; // Used by irq uint32_t baudrate; uint32_t databits; uint32_t stopbits; uint32_t parity; PinName pin_tx; PinName pin_rx; #if DEVICE_SERIAL_ASYNCH uint32_t events; #endif #if DEVICE_SERIAL_FC uint32_t hw_flow_ctl; PinName pin_rts; PinName pin_cts; #endif }; struct i2c_s { /* The 1st 2 members I2CName i2c * and I2C_HandleTypeDef handle should * be kept as the first members of this struct * to ensure i2c_get_obj to work as expected */ I2CName i2c; I2C_HandleTypeDef handle; uint8_t index; int hz; PinName sda; PinName scl; IRQn_Type event_i2cIRQ; IRQn_Type error_i2cIRQ; uint32_t XferOperation; volatile uint8_t event; volatile int pending_start; #if DEVICE_I2CSLAVE uint8_t slave; volatile uint8_t pending_slave_tx_master_rx; volatile uint8_t pending_slave_rx_maxter_tx; #endif #if DEVICE_I2C_ASYNCH uint32_t address; uint8_t stop; uint8_t available_events; #endif }; #include \"gpio_object.h\" #if DEVICE_ANALOGOUT struct dac_s { DACName dac; PinName pin; uint32_t channel; DAC_HandleTypeDef handle; }; #endif #ifdef __cplusplus } #endif /* STM32F0 HAL doesn't provide this API called in rtc_api.c */ #define __HAL_RCC_RTC_CLKPRESCALER(__RTCCLKSource__) #define RTC_WKUP_IRQn RTC_IRQn #endif\n\n{ \"content_hash\": \"30388525dede4739bf38e0c4853a4318\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 105, \"max_line_length\": 62, \"avg_line_length\": 19.228571428571428, \"alnum_prop\": 0.6666666666666666, \"repo_name\": \"NXPmicro/mbed\", \"id\": \"c0e1bc1dd451af953825c8414df6d5c5caacd83d\", \"size\": \"3788\", \"binary\": false, \"copies\": \"7\", \"ref\": \"refs/heads/master\", \"path\": \"targets/TARGET_STM/TARGET_STM32F0/common_objects.h\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"Assembly\", \"bytes\": \"6540059\" }, { \"name\": \"Batchfile\", \"bytes\": \"22\" }, { \"name\": \"C\", \"bytes\": \"286544888\" }, { \"name\": \"C++\", \"bytes\": \"10170292\" }, { \"name\": \"CMake\", \"bytes\": \"5285\" }, { \"name\": \"HTML\", \"bytes\": \"2063156\" }, { \"name\": \"Makefile\", \"bytes\": \"103452\" }, { \"name\": \"Objective-C\", \"bytes\": \"434371\" }, { \"name\": \"Perl\", \"bytes\": \"2589\" }, { \"name\": \"Python\", \"bytes\": \"38809\" }, { \"name\": \"Shell\", \"bytes\": \"16819\" }, { \"name\": \"XSLT\", \"bytes\": \"5596\" } ], \"symlink_target\": \"\" }\n\n<!DOCTYPE html> <html> <head> <title>ARIA 1.0 Test Case 719</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> </head> <body> <h1>ARIA 1.0 Test Case 719</h1> <div id=\"TEST_ID_1\"> </div> <h2>Description</h2> <p>The aria-live attribute is added to an element in the document by a script after the onload event completes with the value=\"polite\" and the element has a child DOM element node that contains text content. After the aria-live attribute is added, the CSS 'visibility' property of the child DOM element node is changed to visibility=\"hidden\".</p> <script type=\"text/javascript\"> function hideElement() { var node = document.getElementById('TEST_ID_2'); node.style.visibility = \"hidden\"; } function addLiveRegion() { var node = document.getElementById('TEST_ID_1'); var live_node = document.createElement('div'); live_node.setAttribute('aria-live', 'polite'); var element_node = document.createElement('div'); element_node.setAttribute('id', 'TEST_ID_2'); var text_node = document.createTextNode('TEST TEXT'); element_node.appendChild(text_node); live_node.appendChild(element_node); node.appendChild(live_node); setTimeout(hideElement,500); } function onload() { setTimeout(addLiveRegion,1000); } window.addEventListener('load', onload); </script> </body> </html>\n\n{ \"content_hash\": \"a046255aff4749bf00a4a8fd7d2928a4\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 53, \"max_line_length\": 76, \"avg_line_length\": 29.92452830188679, \"alnum_prop\": 0.6078184110970997, \"repo_name\": \"youtube/cobalt\", \"id\": \"4fd10b746b761b2597fb45c66c3e24d6d5b39625\", \"size\": \"1586\", \"binary\": false, \"copies\": \"215\", \"ref\": \"refs/heads/master\", \"path\": \"third_party/web_platform_tests/conformance-checkers/html-aria/accessible-name-updates/719.html\", \"mode\": \"33188\", \"license\": \"bsd-3-clause\", \"language\": [], \"symlink_target\": \"\" }\n\npackage com.foc.formula.fucntion.old; import com.foc.formula.FunctionFactory; public class FunctionNot extends BooleanFunction { private static final String FUNCTION_NAME = \"NOT\"; private static final String OPERATOR_SYMBOL = \"!\"; public Object compute() { boolean res = false; IOperand operand1 = getOperandAt(0); if(operand1 != null){ String operandStr = String.valueOf(operand1.compute()); boolean operand1Boolean = Boolean.valueOf(operandStr); res = !operand1Boolean; } return res; } public boolean needsManualNotificationToCompute() { return false; } public static String getFunctionName(){ return FUNCTION_NAME; } public static String getOperatorSymbol(){ return OPERATOR_SYMBOL; } public static int getOperatorPriority(){ return FunctionFactory.PRIORITY_UNARY_SIGN_OPERATOR; } }\n\n{ \"content_hash\": \"1d8119f7f8179c40bb844317a534ff21\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 37, \"max_line_length\": 58, \"avg_line_length\": 23.756756756756758, \"alnum_prop\": 0.7076222980659841, \"repo_name\": \"FOC-framework/framework\", \"id\": \"4b5343f4bc606a56c094cf02bb1f75e8008e080c\", \"size\": \"1656\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"foc/src/com/foc/formula/fucntion/old/FunctionNot.java\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"Groovy\", \"bytes\": \"99\" }, { \"name\": \"Java\", \"bytes\": \"9889245\" }, { \"name\": \"SCSS\", \"bytes\": \"77175\" } ], \"symlink_target\": \"\" }\n\n<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>Login Page - Photon Admin Panel Theme</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0\"> <link rel=\"shortcut icon\" href=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/favicon.ico\" /> <link rel=\"apple-touch-icon\" href=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/iosicon.png\" /> <!-- DEVELOPMENT LESS --> <!-- <link rel=\"stylesheet/less\" href=\"css/photon.less\" media=\"all\" /> <link rel=\"stylesheet/less\" href=\"css/photon-responsive.less\" media=\"all\" /> --> <!-- PRODUCTION CSS --> <link rel=\"stylesheet\" href=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/css/css_compiled/photon-min.css?v1.1\" media=\"all\" /> <link rel=\"stylesheet\" href=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/css/css_compiled/photon-min-part2.css?v1.1\" media=\"all\" /> <link rel=\"stylesheet\" href=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/css/css_compiled/photon-responsive-min.css?v1.1\" media=\"all\" /> <!--[if IE]> <link rel=\"stylesheet\" type=\"text/css\" href=\"css/css_compiled/ie-only-min.css?v1.1\" /> <![endif]--> <!--[if lt IE 9]> <link rel=\"stylesheet\" type=\"text/css\" href=\"css/css_compiled/ie8-only-min.css?v1.1\" /> <script type=\"text/javascript\" src=\"js/plugins/excanvas.js\"></script> <script type=\"text/javascript\" src=\"js/plugins/html5shiv.js\"></script> <script type=\"text/javascript\" src=\"js/plugins/respond.min.js\"></script> <script type=\"text/javascript\" src=\"js/plugins/fixFontIcons.js\"></script> <![endif]--> <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"></script> <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.0/jquery-ui.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/bootstrap/bootstrap.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/modernizr.custom.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.pnotify.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/less-1.3.1.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/xbreadcrumbs.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.maskedinput-1.3.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.autotab-1.1b.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/charCount.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.textareaCounter.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/elrte.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/elrte.en.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/select2.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery-picklist.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.validate.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/additional-methods.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.form.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.metadata.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.mockjax.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.uniform.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.tagsinput.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.rating.pack.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/farbtastic.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.timeentry.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.dataTables.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.jstree.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/dataTables.bootstrap.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.mousewheel.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.mCustomScrollbar.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.flot.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.flot.stack.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.flot.pie.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.flot.resize.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/raphael.2.1.0.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/justgage.1.0.1.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.qrcode.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.clock.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.countdown.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.jqtweet.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/jquery.cookie.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/bootstrap-fileupload.min.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/prettify/prettify.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/bootstrapSwitch.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/plugins/mfupload.js\"></script> <script type=\"text/javascript\" src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/js/common.js\"></script> </head> <body class=\"body-login\"> <div class=\"nav-fixed-topright\" style=\"visibility: hidden\"> <ul class=\"nav nav-user-menu\"> <li class=\"user-sub-menu-container\"> <a href=\"javascript:;\"> <i class=\"user-icon\"></i><span class=\"nav-user-selection\">Theme Options</span><i class=\"icon-menu-arrow\"></i> </a> <ul class=\"nav user-sub-menu\"> <li class=\"light\"> <a href=\"javascript:;\"> <i class='icon-photon stop'></i>Light Version </a> </li> <li class=\"dark\"> <a href=\"javascript:;\"> <i class='icon-photon stop'></i>Dark Version </a> </li> </ul> </li> <li> <a href=\"javascript:;\"> <i class=\"icon-photon mail\"></i> </a> </li> <li> <a href=\"javascript:;\"> <i class=\"icon-photon comment_alt2_stroke\"></i> <div class=\"notification-count\">12</div> </a> </li> </ul> </div> <script> $(function(){ setTimeout(function(){ $('.nav-fixed-topright').removeAttr('style'); }, 300); $(window).scroll(function(){ if($('.breadcrumb-container').length){ var scrollState = $(window).scrollTop(); if (scrollState > 0) $('.nav-fixed-topright').addClass('nav-released'); else $('.nav-fixed-topright').removeClass('nav-released') } }); $('.user-sub-menu-container').on('click', function(){ $(this).toggleClass('active-user-menu'); }); $('.user-sub-menu .light').on('click', function(){ if ($('body').is('.light-version')) return; $('body').addClass('light-version'); setTimeout(function() { $.cookie('themeColor', 'light', { expires: 7, path: '/' }); }, 500); }); $('.user-sub-menu .dark').on('click', function(){ if ($('body').is('.light-version')) { $('body').removeClass('light-version'); $.cookie('themeColor', 'dark', { expires: 7, path: '/' }); } }); }); </script> <div class=\"container-login\"> <div class=\"form-centering-wrapper\"> <div class=\"form-window-login\"> <div class=\"form-window-login-logo\"> <div class=\"login-logo\"> <img src=\"http://photonui.orangehilldev.com/css/css_compiled/@%7BphotonImagePath%7Dplugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/images/photon/login-logo@2x.png\" alt=\"Photon UI\"/> </div> <h2 class=\"login-title\">Welcome to Photon UI!</h2> <div class=\"login-member\">Not a Member?&nbsp;<a href=\"elrte.min.js.html#\">Sign Up &#187;</a> <a href=\"elrte.min.js.html#\" class=\"btn btn-facebook\"><i class=\"icon-fb\"></i>Login with Facebook<i class=\"icon-fb-arrow\"></i></a> </div> <div class=\"login-or\">Or</div> <div class=\"login-input-area\"> <form method=\"POST\" action=\"dashboard.php\"> <span class=\"help-block\">Login With Your Photon Account</span> <input type=\"text\" name=\"email\" placeholder=\"Email\"> <input type=\"password\" name=\"password\" placeholder=\"Password\"> <button type=\"submit\" class=\"btn btn-large btn-success btn-login\">Login</button> </form> <a href=\"elrte.min.js.html#\" class=\"forgot-pass\">Forgot Your Password?</a> </div> </div> </div> </div> </div> <script type=\"text/javascript\"> var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1936460-27']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); </script> </body> </html>\n\n{ \"content_hash\": \"ff022b4967017444ebe9712896d520dd\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 196, \"max_line_length\": 246, \"avg_line_length\": 86.89795918367346, \"alnum_prop\": 0.6914044152184124, \"repo_name\": \"user-tony/photon-rails\", \"id\": \"6dd96ee5d70f2e2d06eeb34ccd8b4b06e5514025\", \"size\": \"17032\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"lib/assets/css/css_compiled/@{photonImagePath}plugins/elrte/js/plugins/css/css_compiled/js/plugins/prettify/js/plugins/elrte.min.js.html\", \"mode\": \"33188\", \"license\": \"mit\", \"language\": [ { \"name\": \"HTML\", \"bytes\": \"291750913\" }, { \"name\": \"JavaScript\", \"bytes\": \"59305\" }, { \"name\": \"Ruby\", \"bytes\": \"203\" }, { \"name\": \"Shell\", \"bytes\": \"99\" } ], \"symlink_target\": \"\" }\n\npackage B; import A.ParentClass; class ChildClass extends ParentClass { }\n\n{ \"content_hash\": \"f854eaca524e1e3325d43afc0062bb47\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 7, \"max_line_length\": 38, \"avg_line_length\": 10.857142857142858, \"alnum_prop\": 0.7763157894736842, \"repo_name\": \"theScratchLad/Algorithms\", \"id\": \"fe265353952b844b2904533f74e03a4c4ae2638c\", \"size\": \"76\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"hackerrank/personal hacks/B/ChildClass.java\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"Java\", \"bytes\": \"41889\" }, { \"name\": \"Python\", \"bytes\": \"526\" } ], \"symlink_target\": \"\" }\n\npackage com.panoramagl.opengl; import java.nio.Buffer; import java.nio.FloatBuffer; import java.nio.IntBuffer; import java.nio.ShortBuffer; import javax.microedition.khronos.opengles.GL; import javax.microedition.khronos.opengles.GL10; import javax.microedition.khronos.opengles.GL10Ext; import javax.microedition.khronos.opengles.GL11; import javax.microedition.khronos.opengles.GL11Ext; import javax.microedition.khronos.opengles.GL11ExtensionPack; import android.opengl.GLSurfaceView; public class GLWrapper implements IGLWrapper, GL11ExtensionPack { /**member variables*/ private GL10 mGL; private GL10Ext mGL10Ext; private GL11 mGL11; private GL11Ext mGL11Ext; private GL11ExtensionPack mGL11ExtPack; private GLSurfaceView mGLSurfaceView; /**init methods*/ public GLWrapper(GL gl, GLSurfaceView glSurfaceView) { mGL = (GL10)gl; if(gl instanceof GL10Ext) { mGL10Ext = (GL10Ext)gl; } if(gl instanceof GL11) { mGL11 = (GL11)gl; } if(gl instanceof GL11Ext) { mGL11Ext = (GL11Ext)gl; } if(gl instanceof GL11ExtensionPack) { mGL11ExtPack = (GL11ExtensionPack)gl; } mGLSurfaceView = glSurfaceView; } /**property methods*/ @Override public GLSurfaceView getGLSurfaceView() { return mGLSurfaceView; } /**GL10 methods*/ @Override public void glActiveTexture(int texture) { mGL.glActiveTexture(texture); } @Override public void glAlphaFunc(int func, float ref) { mGL.glAlphaFunc(func, ref); } @Override public void glAlphaFuncx(int func, int ref) { mGL.glAlphaFuncx(func, ref); } @Override public void glBindTexture(int target, int texture) { mGL.glBindTexture(target, texture); } @Override public void glBlendFunc(int sfactor, int dfactor) { mGL.glBlendFunc(sfactor, dfactor); } @Override public void glClear(int mask) { mGL.glClear(mask); } @Override public void glClearColor(float red, float green, float blue, float alpha) { mGL.glClearColor(red, green, blue, alpha); } @Override public void glClearColorx(int red, int green, int blue, int alpha) { mGL.glClearColorx(red, green, blue, alpha); } @Override public void glClearDepthf(float depth) { mGL.glClearDepthf(depth); } @Override public void glClearDepthx(int depth) { mGL.glClearDepthx(depth); } @Override public void glClearStencil(int s) { mGL.glClearStencil(s); } @Override public void glClientActiveTexture(int texture) { mGL.glClientActiveTexture(texture); } @Override public void glColor4f(float red, float green, float blue, float alpha) { mGL.glColor4f(red, green, blue, alpha); } @Override public void glColor4x(int red, int green, int blue, int alpha) { mGL.glColor4x(red, green, blue, alpha); } @Override public void glColorMask(boolean red, boolean green, boolean blue, boolean alpha) { mGL.glColorMask(red, green, blue, alpha); } @Override public void glColorPointer(int size, int type, int stride, Buffer pointer) { mGL.glColorPointer(size, type, stride, pointer); } @Override public void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer data) { mGL.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); } @Override public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer data) { mGL.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); } @Override public void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border) { mGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border); } @Override public void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) { mGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); } @Override public void glCullFace(int mode) { mGL.glCullFace(mode); } @Override public void glDeleteTextures(int n, IntBuffer textures) { mGL.glDeleteTextures(n, textures); } @Override public void glDeleteTextures(int n, int[] textures, int offset) { mGL.glDeleteTextures(n, textures, offset); } @Override public void glDepthFunc(int func) { mGL.glDepthFunc(func); } @Override public void glDepthMask(boolean flag) { mGL.glDepthMask(flag); } @Override public void glDepthRangef(float zNear, float zFar) { mGL.glDepthRangef(zNear, zFar); } @Override public void glDepthRangex(int zNear, int zFar) { mGL.glDepthRangex(zNear, zFar); } @Override public void glDisable(int cap) { mGL.glDisable(cap); } @Override public void glDisableClientState(int array) { mGL.glDisableClientState(array); } @Override public void glDrawArrays(int mode, int first, int count) { mGL.glDrawArrays(mode, first, count); } @Override public void glDrawElements(int mode, int count, int type, Buffer indices) { mGL.glDrawElements(mode, count, type, indices); } @Override public void glEnable(int cap) { mGL.glEnable(cap); } @Override public void glEnableClientState(int array) { mGL.glEnableClientState(array); } @Override public void glFinish() { mGL.glFinish(); } @Override public void glFlush() { mGL.glFlush(); } @Override public void glFogf(int pname, float param) { mGL.glFogf(pname, param); } @Override public void glFogfv(int pname, FloatBuffer params) { mGL.glFogfv(pname, params); } @Override public void glFogfv(int pname, float[] params, int offset) { mGL.glFogfv(pname, params, offset); } @Override public void glFogx(int pname, int param) { mGL.glFogx(pname, param); } @Override public void glFogxv(int pname, IntBuffer params) { mGL.glFogxv(pname, params); } @Override public void glFogxv(int pname, int[] params, int offset) { mGL.glFogxv(pname, params, offset); } @Override public void glFrontFace(int mode) { mGL.glFrontFace(mode); } @Override public void glFrustumf(float left, float right, float bottom, float top, float zNear, float zFar) { mGL.glFrustumf(left, right, bottom, top, zNear, zFar); } @Override public void glFrustumx(int left, int right, int bottom, int top, int zNear, int zFar) { mGL.glFrustumx(left, right, bottom, top, zNear, zFar); } @Override public void glGenTextures(int n, IntBuffer textures) { mGL.glGenTextures(n, textures); } @Override public void glGenTextures(int n, int[] textures, int offset) { mGL.glGenTextures(n, textures, offset); } @Override public int glGetError() { return mGL.glGetError(); } @Override public void glGetIntegerv(int pname, IntBuffer params) { mGL.glGetIntegerv(pname, params); } @Override public void glGetIntegerv(int pname, int[] params, int offset) { mGL.glGetIntegerv(pname, params, offset); } @Override public String glGetString(int name) { return mGL.glGetString(name); } @Override public void glHint(int target, int mode) { mGL.glHint(target, mode); } @Override public void glLightModelf(int pname, float param) { mGL.glLightModelf(pname, param); } @Override public void glLightModelfv(int pname, FloatBuffer params) { mGL.glLightModelfv(pname, params); } @Override public void glLightModelfv(int pname, float[] params, int offset) { mGL.glLightModelfv(pname, params, offset); } @Override public void glLightModelx(int pname, int param) { mGL.glLightModelx(pname, param); } @Override public void glLightModelxv(int pname, IntBuffer params) { mGL.glLightModelxv(pname, params); } @Override public void glLightModelxv(int pname, int[] params, int offset) { mGL.glLightModelxv(pname, params, offset); } @Override public void glLightf(int light, int pname, float param) { mGL.glLightf(light, pname, param); } @Override public void glLightfv(int light, int pname, FloatBuffer params) { mGL.glLightfv(light, pname, params); } @Override public void glLightfv(int light, int pname, float[] params, int offset) { mGL.glLightfv(light, pname, params, offset); } @Override public void glLightx(int light, int pname, int param) { mGL.glLightx(light, pname, param); } @Override public void glLightxv(int light, int pname, IntBuffer params) { mGL.glLightxv(light, pname, params); } @Override public void glLightxv(int light, int pname, int[] params, int offset) { mGL.glLightxv(light, pname, params, offset); } @Override public void glLineWidth(float width) { mGL.glLineWidth(width); } @Override public void glLineWidthx(int width) { mGL.glLineWidthx(width); } @Override public void glLoadIdentity() { mGL.glLoadIdentity(); } @Override public void glLoadMatrixf(FloatBuffer m) { mGL.glLoadMatrixf(m); } @Override public void glLoadMatrixf(float[] m, int offset) { mGL.glLoadMatrixf(m, offset); } @Override public void glLoadMatrixx(IntBuffer m) { mGL.glLoadMatrixx(m); } @Override public void glLoadMatrixx(int[] m, int offset) { mGL.glLoadMatrixx(m, offset); } @Override public void glLogicOp(int opcode) { mGL.glLogicOp(opcode); } @Override public void glMaterialf(int face, int pname, float param) { mGL.glMaterialf(face, pname, param); } @Override public void glMaterialfv(int face, int pname, FloatBuffer params) { mGL.glMaterialfv(face, pname, params); } @Override public void glMaterialfv(int face, int pname, float[] params, int offset) { mGL.glMaterialfv(face, pname, params, offset); } @Override public void glMaterialx(int face, int pname, int param) { mGL.glMaterialx(face, pname, param); } @Override public void glMaterialxv(int face, int pname, IntBuffer params) { mGL.glMaterialxv(face, pname, params); } @Override public void glMaterialxv(int face, int pname, int[] params, int offset) { mGL.glMaterialxv(face, pname, params, offset); } @Override public void glMatrixMode(int mode) { mGL.glMatrixMode(mode); } @Override public void glMultMatrixf(FloatBuffer m) { mGL.glMultMatrixf(m); } @Override public void glMultMatrixf(float[] m, int offset) { mGL.glMultMatrixf(m, offset); } @Override public void glMultMatrixx(IntBuffer m) { mGL.glMultMatrixx(m); } @Override public void glMultMatrixx(int[] m, int offset) { mGL.glMultMatrixx(m, offset); } @Override public void glMultiTexCoord4f(int target, float s, float t, float r, float q) { mGL.glMultiTexCoord4f(target, s, t, r, q); } @Override public void glMultiTexCoord4x(int target, int s, int t, int r, int q) { mGL.glMultiTexCoord4x(target, s, t, r, q); } @Override public void glNormal3f(float nx, float ny, float nz) { mGL.glNormal3f(nx, ny, nz); } @Override public void glNormal3x(int nx, int ny, int nz) { mGL.glNormal3x(nx, ny, nz); } @Override public void glNormalPointer(int type, int stride, Buffer pointer) { mGL.glNormalPointer(type, stride, pointer); } @Override public void glOrthof(float left, float right, float bottom, float top, float zNear, float zFar) { mGL.glOrthof(left, right, bottom, top, zNear, zFar); } @Override public void glOrthox(int left, int right, int bottom, int top, int zNear, int zFar) { mGL.glOrthox(left, right, bottom, top, zNear, zFar); } @Override public void glPixelStorei(int pname, int param) { mGL.glPixelStorei(pname, param); } @Override public void glPointSize(float size) { mGL.glPointSize(size); } @Override public void glPointSizex(int size) { mGL.glPointSizex(size); } @Override public void glPolygonOffset(float factor, float units) { mGL.glPolygonOffset(factor, units); } @Override public void glPolygonOffsetx(int factor, int units) { mGL.glPolygonOffsetx(factor, units); } @Override public void glPopMatrix() { mGL.glPopMatrix(); } @Override public void glPushMatrix() { mGL.glPushMatrix(); } @Override public void glReadPixels(int x, int y, int width, int height, int format, int type, Buffer pixels) { mGL.glReadPixels(x, y, width, height, format, type, pixels); } @Override public void glRotatef(float angle, float x, float y, float z) { mGL.glRotatef(angle, x, y, z); } @Override public void glRotatex(int angle, int x, int y, int z) { mGL.glRotatex(angle, x, y, z); } @Override public void glSampleCoverage(float value, boolean invert) { mGL.glSampleCoverage(value, invert); } @Override public void glSampleCoveragex(int value, boolean invert) { mGL.glSampleCoveragex(value, invert); } @Override public void glScalef(float x, float y, float z) { mGL.glScalef(x, y, z); } @Override public void glScalex(int x, int y, int z) { mGL.glScalex(x, y, z); } @Override public void glScissor(int x, int y, int width, int height) { mGL.glScissor(x, y, width, height); } @Override public void glShadeModel(int mode) { mGL.glShadeModel(mode); } @Override public void glStencilFunc(int func, int ref, int mask) { mGL.glStencilFunc(func, ref, mask); } @Override public void glStencilMask(int mask) { mGL.glStencilMask(mask); } @Override public void glStencilOp(int fail, int zfail, int zpass) { mGL.glStencilOp(fail, zfail, zpass); } @Override public void glTexCoordPointer(int size, int type, int stride, Buffer pointer) { mGL.glTexCoordPointer(size, type, stride, pointer); } @Override public void glTexEnvf(int target, int pname, float param) { mGL.glTexEnvf(target, pname, param); } @Override public void glTexEnvfv(int target, int pname, FloatBuffer params) { mGL.glTexEnvfv(target, pname, params); } @Override public void glTexEnvfv(int target, int pname, float[] params, int offset) { mGL.glTexEnvfv(target, pname, params, offset); } @Override public void glTexEnvx(int target, int pname, int param) { mGL.glTexEnvx(target, pname, param); } @Override public void glTexEnvxv(int target, int pname, IntBuffer params) { mGL.glTexEnvxv(target, pname, params); } @Override public void glTexEnvxv(int target, int pname, int[] params, int offset) { mGL.glTexEnvxv(target, pname, params, offset); } @Override public void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, Buffer pixels) { mGL.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); } @Override public void glTexParameterf(int target, int pname, float param) { mGL.glTexParameterf(target, pname, param); } @Override public void glTexParameterx(int target, int pname, int param) { mGL.glTexParameterx(target, pname, param); } @Override public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels) { mGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); } @Override public void glTranslatef(float x, float y, float z) { mGL.glTranslatef(x, y, z); } @Override public void glTranslatex(int x, int y, int z) { mGL.glTranslatex(x, y, z); } @Override public void glVertexPointer(int size, int type, int stride, Buffer pointer) { mGL.glVertexPointer(size, type, stride, pointer); } @Override public void glViewport(int x, int y, int width, int height) { mGL.glViewport(x, y, width, height); } /**GL10Ext methods*/ @Override public int glQueryMatrixxOES(IntBuffer mantissa, IntBuffer exponent) { return mGL10Ext.glQueryMatrixxOES(mantissa, exponent); } @Override public int glQueryMatrixxOES(int[] mantissa, int mantissaOffset, int[] exponent, int exponentOffset) { return mGL10Ext.glQueryMatrixxOES(mantissa, mantissaOffset, exponent, exponentOffset); } /**GL11 methods*/ @Override public void glBindBuffer(int target, int buffer) { mGL11.glBindBuffer(target, buffer); } @Override public void glBufferData(int target, int size, Buffer data, int usage) { mGL11.glBufferData(target, size, data, usage); } @Override public void glBufferSubData(int target, int offset, int size, Buffer data) { mGL11.glBufferSubData(target, offset, size, data); } @Override public void glClipPlanef(int plane, FloatBuffer equation) { mGL11.glClipPlanef(plane, equation); } @Override public void glClipPlanef(int plane, float[] equation, int offset) { mGL11.glClipPlanef(plane, equation, offset); } @Override public void glClipPlanex(int plane, IntBuffer equation) { mGL11.glClipPlanex(plane, equation); } @Override public void glClipPlanex(int plane, int[] equation, int offset) { mGL11.glClipPlanex(plane, equation, offset); } @Override public void glColor4ub(byte red, byte green, byte blue, byte alpha) { mGL11.glColor4ub(red, green, blue, alpha); } @Override public void glColorPointer(int size, int type, int stride, int offset) { mGL11.glColorPointer(size, type, stride, offset); } @Override public void glDeleteBuffers(int n, IntBuffer buffers) { mGL11.glDeleteBuffers(n, buffers); } @Override public void glDeleteBuffers(int n, int[] buffers, int offset) { mGL11.glDeleteBuffers(n, buffers, offset); } @Override public void glDrawElements(int mode, int count, int type, int offset) { mGL11.glDrawElements(mode, count, type, offset); } @Override public void glGenBuffers(int n, IntBuffer buffers) { mGL11.glGenBuffers(n, buffers); } @Override public void glGenBuffers(int n, int[] buffers, int offset) { mGL11.glGenBuffers(n, buffers, offset); } @Override public void glGetBooleanv(int pname, IntBuffer params) { mGL11.glGetBooleanv(pname, params); } @Override public void glGetBooleanv(int pname, boolean[] params, int offset) { mGL11.glGetBooleanv(pname, params, offset); } @Override public void glGetBufferParameteriv(int target, int pname, IntBuffer params) { mGL11.glGetBufferParameteriv(target, pname, params); } @Override public void glGetBufferParameteriv(int target, int pname, int[] params, int offset) { mGL11.glGetBufferParameteriv(target, pname, params, offset); } @Override public void glGetClipPlanef(int pname, FloatBuffer eqn) { mGL11.glGetClipPlanef(pname, eqn); } @Override public void glGetClipPlanef(int pname, float[] eqn, int offset) { mGL11.glGetClipPlanef(pname, eqn, offset); } @Override public void glGetClipPlanex(int pname, IntBuffer eqn) { mGL11.glGetClipPlanex(pname, eqn); } @Override public void glGetClipPlanex(int pname, int[] eqn, int offset) { mGL11.glGetClipPlanex(pname, eqn, offset); } @Override public void glGetFixedv(int pname, IntBuffer params) { mGL11.glGetFixedv(pname, params); } @Override public void glGetFixedv(int pname, int[] params, int offset) { mGL11.glGetFixedv(pname, params, offset); } @Override public void glGetFloatv(int pname, FloatBuffer params) { mGL11.glGetFloatv(pname, params); } @Override public void glGetFloatv(int pname, float[] params, int offset) { mGL11.glGetFloatv(pname, params, offset); } @Override public void glGetLightfv(int light, int pname, FloatBuffer params) { mGL11.glGetLightfv(light, pname, params); } @Override public void glGetLightfv(int light, int pname, float[] params, int offset) { mGL11.glGetLightfv(light, pname, params, offset); } @Override public void glGetLightxv(int light, int pname, IntBuffer params) { mGL11.glGetLightxv(light, pname, params); } @Override public void glGetLightxv(int light, int pname, int[] params, int offset) { mGL11.glGetLightxv(light, pname, params, offset); } @Override public void glGetMaterialfv(int face, int pname, FloatBuffer params) { mGL11.glGetMaterialfv(face, pname, params); } @Override public void glGetMaterialfv(int face, int pname, float[] params, int offset) { mGL11.glGetMaterialfv(face, pname, params, offset); } @Override public void glGetMaterialxv(int face, int pname, IntBuffer params) { mGL11.glGetMaterialxv(face, pname, params); } @Override public void glGetMaterialxv(int face, int pname, int[] params, int offset) { mGL11.glGetMaterialxv(face, pname, params, offset); } @Override public void glGetPointerv(int pname, Buffer[] params) { mGL11.glGetPointerv(pname, params); } @Override public void glGetTexEnviv(int env, int pname, IntBuffer params) { mGL11.glGetTexEnviv(env, pname, params); } @Override public void glGetTexEnviv(int env, int pname, int[] params, int offset) { mGL11.glGetTexEnviv(env, pname, params, offset); } @Override public void glGetTexEnvxv(int env, int pname, IntBuffer params) { mGL11.glGetTexEnvxv(env, pname, params); } @Override public void glGetTexEnvxv(int env, int pname, int[] params, int offset) { mGL11.glGetTexEnvxv(env, pname, params, offset); } @Override public void glGetTexParameterfv(int target, int pname, FloatBuffer params) { mGL11.glGetTexParameterfv(target, pname, params); } @Override public void glGetTexParameterfv(int target, int pname, float[] params, int offset) { mGL11.glGetTexParameterfv(target, pname, params, offset); } @Override public void glGetTexParameteriv(int target, int pname, IntBuffer params) { mGL11.glGetTexParameteriv(target, pname, params); } @Override public void glGetTexParameteriv(int target, int pname, int[] params, int offset) { mGL11.glGetTexParameteriv(target, pname, params, offset); } @Override public void glGetTexParameterxv(int target, int pname, IntBuffer params) { mGL11.glGetTexParameterxv(target, pname, params); } @Override public void glGetTexParameterxv(int target, int pname, int[] params, int offset) { mGL11.glGetTexParameterxv(target, pname, params, offset); } @Override public boolean glIsBuffer(int buffer) { return mGL11.glIsBuffer(buffer); } @Override public boolean glIsEnabled(int cap) { return mGL11.glIsEnabled(cap); } @Override public boolean glIsTexture(int texture) { return mGL11.glIsTexture(texture); } @Override public void glNormalPointer(int type, int stride, int offset) { mGL11.glNormalPointer(type, stride, offset); } @Override public void glPointParameterf(int pname, float param) { mGL11.glPointParameterf(pname, param); } @Override public void glPointParameterfv(int pname, FloatBuffer params) { mGL11.glPointParameterfv(pname, params); } @Override public void glPointParameterfv(int pname, float[] params, int offset) { mGL11.glPointParameterfv(pname, params, offset); } @Override public void glPointParameterx(int pname, int param) { mGL11.glPointParameterx(pname, param); } @Override public void glPointParameterxv(int pname, IntBuffer params) { mGL11.glPointParameterxv(pname, params); } @Override public void glPointParameterxv(int pname, int[] params, int offset) { mGL11.glPointParameterxv(pname, params, offset); } @Override public void glPointSizePointerOES(int type, int stride, Buffer pointer) { mGL11.glPointSizePointerOES(type, stride, pointer); } @Override public void glTexCoordPointer(int size, int type, int stride, int offset) { mGL11.glTexCoordPointer(size, type, stride, offset); } @Override public void glTexEnvi(int target, int pname, int param) { mGL11.glTexEnvi(target, pname, param); } @Override public void glTexEnviv(int target, int pname, IntBuffer params) { mGL11.glTexEnviv(target, pname, params); } @Override public void glTexEnviv(int target, int pname, int[] params, int offset) { mGL11.glTexEnviv(target, pname, params, offset); } @Override public void glTexParameterfv(int target, int pname, FloatBuffer params) { mGL11.glTexParameterfv(target, pname, params); } @Override public void glTexParameterfv(int target, int pname, float[] params, int offset) { mGL11.glTexParameterfv(target, pname, params, offset); } @Override public void glTexParameteri(int target, int pname, int param) { mGL11.glTexParameteri(target, pname, param); } @Override public void glTexParameteriv(int target, int pname, IntBuffer params) { mGL11.glTexParameteriv(target, pname, params); } @Override public void glTexParameteriv(int target, int pname, int[] params, int offset) { mGL11.glTexParameteriv(target, pname, params, offset); } @Override public void glTexParameterxv(int target, int pname, IntBuffer params) { mGL11.glTexParameterxv(target, pname, params); } @Override public void glTexParameterxv(int target, int pname, int[] params, int offset) { mGL11.glTexParameterxv(target, pname, params, offset); } @Override public void glVertexPointer(int size, int type, int stride, int offset) { mGL11.glVertexPointer(size, type, stride, offset); } /**GL11Ext methods*/ @Override public void glCurrentPaletteMatrixOES(int matrixpaletteindex) { mGL11Ext.glCurrentPaletteMatrixOES(matrixpaletteindex); } @Override public void glDrawTexfOES(float x, float y, float z, float width, float height) { mGL11Ext.glDrawTexfOES(x, y, z, width, height); } @Override public void glDrawTexfvOES(FloatBuffer coords) { mGL11Ext.glDrawTexfvOES(coords); } @Override public void glDrawTexfvOES(float[] coords, int offset) { mGL11Ext.glDrawTexfvOES(coords, offset); } @Override public void glDrawTexiOES(int x, int y, int z, int width, int height) { mGL11Ext.glDrawTexiOES(x, y, z, width, height); } @Override public void glDrawTexivOES(IntBuffer coords) { mGL11Ext.glDrawTexivOES(coords); } @Override public void glDrawTexivOES(int[] coords, int offset) { mGL11Ext.glDrawTexivOES(coords, offset); } @Override public void glDrawTexsOES(short x, short y, short z, short width, short height) { mGL11Ext.glDrawTexsOES(x, y, z, width, height); } @Override public void glDrawTexsvOES(ShortBuffer coords) { mGL11Ext.glDrawTexsvOES(coords); } @Override public void glDrawTexsvOES(short[] coords, int offset) { mGL11Ext.glDrawTexsvOES(coords, offset); } @Override public void glDrawTexxOES(int x, int y, int z, int width, int height) { mGL11Ext.glDrawTexxOES(x, y, z, width, height); } @Override public void glDrawTexxvOES(IntBuffer coords) { mGL11Ext.glDrawTexxvOES(coords); } @Override public void glDrawTexxvOES(int[] coords, int offset) { mGL11Ext.glDrawTexxvOES(coords, offset); } @Override public void glLoadPaletteFromModelViewMatrixOES() { mGL11Ext.glLoadPaletteFromModelViewMatrixOES(); } @Override public void glMatrixIndexPointerOES(int size, int type, int stride, Buffer pointer) { mGL11Ext.glMatrixIndexPointerOES(size, type, stride, pointer); } @Override public void glMatrixIndexPointerOES(int size, int type, int stride, int offset) { mGL11Ext.glMatrixIndexPointerOES(size, type, stride, offset); } @Override public void glWeightPointerOES(int size, int type, int stride, Buffer pointer) { mGL11Ext.glWeightPointerOES(size, type, stride, pointer); } @Override public void glWeightPointerOES(int size, int type, int stride, int offset) { mGL11Ext.glWeightPointerOES(size, type, stride, offset); } /**GL11ExtensionPack methods*/ @Override public void glBindFramebufferOES(int target, int framebuffer) { mGL11ExtPack.glBindFramebufferOES(target, framebuffer); } @Override public void glBindRenderbufferOES(int target, int renderbuffer) { mGL11ExtPack.glBindRenderbufferOES(target, renderbuffer); } @Override public void glBlendEquation(int mode) { mGL11ExtPack.glBlendEquation(mode); } @Override public void glBlendEquationSeparate(int modeRGB, int modeAlpha) { mGL11ExtPack.glBlendEquationSeparate(modeRGB, modeAlpha); } @Override public void glBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) { mGL11ExtPack.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha); } @Override public int glCheckFramebufferStatusOES(int target) { return mGL11ExtPack.glCheckFramebufferStatusOES(target); } @Override public void glDeleteFramebuffersOES(int n, IntBuffer framebuffers) { mGL11ExtPack.glDeleteFramebuffersOES(n, framebuffers); } @Override public void glDeleteFramebuffersOES(int n, int[] framebuffers, int offset) { mGL11ExtPack.glDeleteFramebuffersOES(n, framebuffers, offset); } @Override public void glDeleteRenderbuffersOES(int n, IntBuffer renderbuffers) { mGL11ExtPack.glDeleteRenderbuffersOES(n, renderbuffers); } @Override public void glDeleteRenderbuffersOES(int n, int[] renderbuffers, int offset) { mGL11ExtPack.glDeleteRenderbuffersOES(n, renderbuffers, offset); } @Override public void glFramebufferRenderbufferOES(int target, int attachment, int renderbuffertarget, int renderbuffer) { mGL11ExtPack.glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); } @Override public void glFramebufferTexture2DOES(int target, int attachment, int textarget, int texture, int level) { mGL11ExtPack.glFramebufferTexture2DOES(target, attachment, textarget, texture, level); } @Override public void glGenFramebuffersOES(int n, IntBuffer framebuffers) { mGL11ExtPack.glGenFramebuffersOES(n, framebuffers); } @Override public void glGenFramebuffersOES(int n, int[] framebuffers, int offset) { mGL11ExtPack.glGenFramebuffersOES(n, framebuffers, offset); } @Override public void glGenRenderbuffersOES(int n, IntBuffer renderbuffers) { mGL11ExtPack.glGenRenderbuffersOES(n, renderbuffers); } @Override public void glGenRenderbuffersOES(int n, int[] renderbuffers, int offset) { mGL11ExtPack.glGenRenderbuffersOES(n, renderbuffers, offset); } @Override public void glGenerateMipmapOES(int target) { mGL11ExtPack.glGenerateMipmapOES(target); } @Override public void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, IntBuffer params) { mGL11ExtPack.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params); } @Override public void glGetFramebufferAttachmentParameterivOES(int target, int attachment, int pname, int[] params, int offset) { mGL11ExtPack.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params, offset); } @Override public void glGetRenderbufferParameterivOES(int target, int pname, IntBuffer params) { mGL11ExtPack.glGetRenderbufferParameterivOES(target, pname, params); } @Override public void glGetRenderbufferParameterivOES(int target, int pname, int[] params, int offset) { mGL11ExtPack.glGetRenderbufferParameterivOES(target, pname, params, offset); } @Override public void glGetTexGenfv(int coord, int pname, FloatBuffer params) { mGL11ExtPack.glGetTexGenfv(coord, pname, params); } @Override public void glGetTexGenfv(int coord, int pname, float[] params, int offset) { mGL11ExtPack.glGetTexGenfv(coord, pname, params, offset); } @Override public void glGetTexGeniv(int coord, int pname, IntBuffer params) { mGL11ExtPack.glGetTexGeniv(coord, pname, params); } @Override public void glGetTexGeniv(int coord, int pname, int[] params, int offset) { mGL11ExtPack.glGetTexGeniv(coord, pname, params, offset); } @Override public void glGetTexGenxv(int coord, int pname, IntBuffer params) { mGL11ExtPack.glGetTexGenxv(coord, pname, params); } @Override public void glGetTexGenxv(int coord, int pname, int[] params, int offset) { mGL11ExtPack.glGetTexGenxv(coord, pname, params, offset); } @Override public boolean glIsFramebufferOES(int framebuffer) { return mGL11ExtPack.glIsFramebufferOES(framebuffer); } @Override public boolean glIsRenderbufferOES(int renderbuffer) { return mGL11ExtPack.glIsRenderbufferOES(renderbuffer); } @Override public void glRenderbufferStorageOES(int target, int internalformat, int width, int height) { mGL11ExtPack.glRenderbufferStorageOES(target, internalformat, width, height); } @Override public void glTexGenf(int coord, int pname, float param) { mGL11ExtPack.glTexGenf(coord, pname, param); } @Override public void glTexGenfv(int coord, int pname, FloatBuffer params) { mGL11ExtPack.glTexGenfv(coord, pname, params); } @Override public void glTexGenfv(int coord, int pname, float[] params, int offset) { mGL11ExtPack.glTexGenfv(coord, pname, params, offset); } @Override public void glTexGeni(int coord, int pname, int param) { mGL11ExtPack.glTexGeni(coord, pname, param); } @Override public void glTexGeniv(int coord, int pname, IntBuffer params) { mGL11ExtPack.glTexGeniv(coord, pname, params); } @Override public void glTexGeniv(int coord, int pname, int[] params, int offset) { mGL11ExtPack.glTexGeniv(coord, pname, params, offset); } @Override public void glTexGenx(int coord, int pname, int param) { mGL11ExtPack.glTexGenx(coord, pname, param); } @Override public void glTexGenxv(int coord, int pname, IntBuffer params) { mGL11ExtPack.glTexGenxv(coord, pname, params); } @Override public void glTexGenxv(int coord, int pname, int[] params, int offset) { mGL11ExtPack.glTexGenxv(coord, pname, params, offset); } /**dealloc methods*/ @Override protected void finalize() throws Throwable { mGLSurfaceView = null; mGL = null; mGL10Ext = null; mGL11 = null; mGL11Ext = null; mGL11ExtPack = null; super.finalize(); } }\n\n{ \"content_hash\": \"ff78b915c150292f2baaf037f0c0215b\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 1595, \"max_line_length\": 118, \"avg_line_length\": 22.118495297805644, \"alnum_prop\": 0.6907792170979903, \"repo_name\": \"RBWare/PanoramaGL\", \"id\": \"38e2f448859b6b74207be58a139a7b87b5298435\", \"size\": \"35956\", \"binary\": false, \"copies\": \"2\", \"ref\": \"refs/heads/master\", \"path\": \"src/com/panoramagl/opengl/GLWrapper.java\", \"mode\": \"33261\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"C\", \"bytes\": \"230917\" }, { \"name\": \"Groovy\", \"bytes\": \"640\" }, { \"name\": \"Java\", \"bytes\": \"573717\" } ], \"symlink_target\": \"\" }\n\n<?php // autoload_real.php @generated by Composer class ComposerAutoloaderInit8f16b403b0d43826f0a178ba6de457f8 { private static $loader; public static function loadClassLoader($class) { if ('Composer\\Autoload\\ClassLoader' === $class) { require __DIR__ . '/ClassLoader.php'; } } public static function getLoader() { if (null !== self::$loader) { return self::$loader; } spl_autoload_register(array('ComposerAutoloaderInit8f16b403b0d43826f0a178ba6de457f8', 'loadClassLoader'), true, true); self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(); spl_autoload_unregister(array('ComposerAutoloaderInit8f16b403b0d43826f0a178ba6de457f8', 'loadClassLoader')); $map = require __DIR__ . '/autoload_namespaces.php'; foreach ($map as $namespace => $path) { $loader->set($namespace, $path); } $map = require __DIR__ . '/autoload_psr4.php'; foreach ($map as $namespace => $path) { $loader->setPsr4($namespace, $path); } $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader->addClassMap($classMap); } $loader->register(true); $includeFiles = require __DIR__ . '/autoload_files.php'; foreach ($includeFiles as $fileIdentifier => $file) { composerRequire8f16b403b0d43826f0a178ba6de457f8($fileIdentifier, $file); } return $loader; } } function composerRequire8f16b403b0d43826f0a178ba6de457f8($fileIdentifier, $file) { if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) { require $file; $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true; } }\n\n{ \"content_hash\": \"0ed8506a105e4e70709fccca31d6b440\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 59, \"max_line_length\": 126, \"avg_line_length\": 30.389830508474578, \"alnum_prop\": 0.6129392080312326, \"repo_name\": \"yodathedark/moltis-tickets\", \"id\": \"5b745182012452d665e9ac29dec7572d72ac9189\", \"size\": \"1793\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"test/stripe-php-3.9.0/vendor/composer/autoload_real.php\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"ApacheConf\", \"bytes\": \"231\" }, { \"name\": \"Batchfile\", \"bytes\": \"1030\" }, { \"name\": \"CSS\", \"bytes\": \"349176\" }, { \"name\": \"JavaScript\", \"bytes\": \"138264\" }, { \"name\": \"PHP\", \"bytes\": \"367011\" } ], \"symlink_target\": \"\" }\n\npackage org.bitcoinj.store; import org.bitcoinj.core.BlockChain; import org.bitcoinj.core.NetworkParameters; import org.bitcoinj.core.Sha256Hash; import org.bitcoinj.core.StoredBlock; /** * An implementor of BlockStore saves StoredBlock objects to disk. Different implementations store them in * different ways. An in-memory implementation (MemoryBlockStore) exists for unit testing but real apps will want to * use implementations that save to disk.<p> * * A BlockStore is a map of hashes to StoredBlock. The hash is the double digest of the Bitcoin serialization * of the block header, <b>not</b> the header with the extra data as well.<p> * * BlockStores are thread safe. */ public interface BlockStore { /** * Saves the given block header+extra data. The key isn't specified explicitly as it can be calculated from the * StoredBlock directly. Can throw if there is a problem with the underlying storage layer such as running out of * disk space. */ void put(StoredBlock block) throws BlockStoreException; /** * Returns the StoredBlock given a hash. The returned values block.getHash() method will be equal to the * parameter. If no such block is found, returns null. */ StoredBlock get(Sha256Hash hash) throws BlockStoreException; /** * Returns the {@link StoredBlock} that represents the top of the chain of greatest total work. Note that this * can be arbitrarily expensive, you probably should use {@link BlockChain#getChainHead()} * or perhaps {@link BlockChain#getBestChainHeight()} which will run in constant time and * not take any heavyweight locks. */ StoredBlock getChainHead() throws BlockStoreException; /** * Sets the {@link StoredBlock} that represents the top of the chain of greatest total work. */ void setChainHead(StoredBlock chainHead) throws BlockStoreException; /** Closes the store. */ void close() throws BlockStoreException; /** * Get the {@link NetworkParameters} of this store. * @return The network params. */ NetworkParameters getParams(); }\n\n{ \"content_hash\": \"0d81bf79d6b233fa3d6b98349aed0d32\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 55, \"max_line_length\": 117, \"avg_line_length\": 38.72727272727273, \"alnum_prop\": 0.7220657276995305, \"repo_name\": \"peterdettman/bitcoinj\", \"id\": \"26bd41b7897331d6aa09a8e5445bcf7d6a180686\", \"size\": \"2723\", \"binary\": false, \"copies\": \"7\", \"ref\": \"refs/heads/master\", \"path\": \"core/src/main/java/org/bitcoinj/store/BlockStore.java\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"CSS\", \"bytes\": \"1838\" }, { \"name\": \"Java\", \"bytes\": \"3797433\" }, { \"name\": \"Shell\", \"bytes\": \"1390\" } ], \"symlink_target\": \"\" }\n\nACCEPTED #### According to The Catalogue of Life, 3rd January 2011 #### Published in null #### Original name null ### Remarks null\n\n{ \"content_hash\": \"801cf1a87672d1dd819a1fff2e1d3e80\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 13, \"max_line_length\": 39, \"avg_line_length\": 10.307692307692308, \"alnum_prop\": 0.6940298507462687, \"repo_name\": \"mdoering/backbone\", \"id\": \"537ef4e4a51459ab46225f66348332a19a4e7e17\", \"size\": \"191\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"life/Plantae/Magnoliophyta/Magnoliopsida/Malpighiales/Chrysobalanaceae/Licania/Licania subarachnophylla/README.md\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [], \"symlink_target\": \"\" }\n\nusing System; using System.Collections.Generic; using System.Text; namespace Cosmos.HAL { static public class Globals { static public DeviceMgr DeviceMgr; } }\n\n{ \"content_hash\": \"b09e12f5402075cbaa5b96a91fa67366\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 9, \"max_line_length\": 42, \"avg_line_length\": 19.666666666666668, \"alnum_prop\": 0.7175141242937854, \"repo_name\": \"trivalik/Cosmos\", \"id\": \"ac97ca51dd4329ab385f451992a6c01909376cc9\", \"size\": \"179\", \"binary\": false, \"copies\": \"6\", \"ref\": \"refs/heads/master\", \"path\": \"source/Kernel-X86/30-HAL/Cosmos.HAL/Globals.cs\", \"mode\": \"33188\", \"license\": \"bsd-3-clause\", \"language\": [ { \"name\": \"Assembly\", \"bytes\": \"35450\" }, { \"name\": \"AutoIt\", \"bytes\": \"782\" }, { \"name\": \"Batchfile\", \"bytes\": \"1472\" }, { \"name\": \"C\", \"bytes\": \"17776\" }, { \"name\": \"C#\", \"bytes\": \"12950609\" }, { \"name\": \"F#\", \"bytes\": \"378\" }, { \"name\": \"HTML\", \"bytes\": \"34140\" }, { \"name\": \"Inno Setup\", \"bytes\": \"15855\" }, { \"name\": \"Visual Basic\", \"bytes\": \"1148\" }, { \"name\": \"XS\", \"bytes\": \"31499\" } ], \"symlink_target\": \"\" }\n\n% function [Lval,Cval] = samplef(X,b) % Sample function for bayesopt.m % To use bayesopt.m you need an opt struct (see demo.m or the readme) and a function handle to a function like this. % The function should return two arguments, the objective function value and the constraint function value. % % The function handle should ultimately have only one argument, a vector of parameters X. % The function itself can have additional parameters that are passed in as constants. For example: % b = 1; % F = @(X)samplef(X,b); % % This lets you, for example, pass in datasets when tuning ML algorithm parameters. function [Lval,Cval] = samplef2(x,y,b) L = @(x,y) cos(2.*x).*cos(y) + sin(b.*x); C = @(x,y) -(-cos(x).*cos(y)+sin(x).*sin(y)); Lval = L(x,y) + 1e-4*randn(1,size(x,2)); Cval = C(x,y) + 1e-4*randn(1,size(y,2)); end\n\n{ \"content_hash\": \"1397fa329cee92db8216f24898de9711\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 17, \"max_line_length\": 116, \"avg_line_length\": 49.76470588235294, \"alnum_prop\": 0.6725768321513003, \"repo_name\": \"mathieulagrange/lmnn4sol\", \"id\": \"a4441ec9d17fc2c6c9f248b5d045bd5e7bd8b4ff\", \"size\": \"846\", \"binary\": false, \"copies\": \"2\", \"ref\": \"refs/heads/master\", \"path\": \"experiments/timbralSimilaritySol/libs/lmnn-fun/lmnn2/autoLMNN/bayesopt.m/demo/samplef.m\", \"mode\": \"33188\", \"license\": \"mit\", \"language\": [ { \"name\": \"C\", \"bytes\": \"45631\" }, { \"name\": \"C++\", \"bytes\": \"156539\" }, { \"name\": \"CSS\", \"bytes\": \"154\" }, { \"name\": \"Fortran\", \"bytes\": \"570508\" }, { \"name\": \"HTML\", \"bytes\": \"118622\" }, { \"name\": \"M\", \"bytes\": \"455\" }, { \"name\": \"Makefile\", \"bytes\": \"7096\" }, { \"name\": \"Matlab\", \"bytes\": \"1784839\" }, { \"name\": \"Objective-C\", \"bytes\": \"567\" }, { \"name\": \"TeX\", \"bytes\": \"113590\" } ], \"symlink_target\": \"\" }\n\npackage org.jbpm.console.ng.gc.client.experimental.grid.base; import java.util.Collection; import com.google.gwt.user.cellview.client.Column; import com.google.gwt.user.cellview.client.ColumnSortEvent.AsyncHandler; import com.google.gwt.view.client.ProvidesKey; import org.jbpm.console.ng.ga.model.GenericSummary; import org.uberfire.ext.services.shared.preferences.GridGlobalPreferences; import org.uberfire.ext.widgets.common.client.tables.ColumnMeta; import org.uberfire.ext.widgets.common.client.tables.PagedTable; /** * @author salaboy */ public class ExtendedPagedTable<T extends GenericSummary> extends PagedTable<T> { public ExtendedPagedTable( int pageSize, GridGlobalPreferences gridPreferences ) { super( pageSize, new ProvidesKey<T>() { @Override public Object getKey( T item ) { return ( item == null ) ? null : item.getId(); } }, gridPreferences, true ); dataGrid.addColumnSortHandler( new AsyncHandler( dataGrid ) ); } public void setTooltip( int row, int column, String description ) { dataGrid.getRowElement( row ).getCells().getItem( column ).setTitle( description ); } public int getKeyboardSelectedColumn() { return dataGrid.getKeyboardSelectedColumn(); } public int getKeyboardSelectedRow() { return dataGrid.getKeyboardSelectedRow(); } public int getColumnCount() { return dataGrid.getColumnCount(); } public void removeColumn( Column<T, ?> col ) { dataGrid.removeColumn( col ); } public void removeColumnMeta( ColumnMeta<T> columnMeta ) { columnPicker.removeColumn( columnMeta ); } public Collection<ColumnMeta<T>> getColumnMetaList() { return columnPicker.getColumnMetaList(); } }\n\n{ \"content_hash\": \"fba5d3a8cd20cd84ca2073da3577dad1\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 62, \"max_line_length\": 91, \"avg_line_length\": 30.725806451612904, \"alnum_prop\": 0.6661417322834645, \"repo_name\": \"emilianoandre/jbpm-console-ng\", \"id\": \"2290dc36783664cdc7d01996efdaadbb661fd937\", \"size\": \"2506\", \"binary\": false, \"copies\": \"3\", \"ref\": \"refs/heads/master\", \"path\": \"jbpm-console-ng-generic/jbpm-console-ng-generic-client/src/main/java/org/jbpm/console/ng/gc/client/experimental/grid/base/ExtendedPagedTable.java\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"CSS\", \"bytes\": \"26031\" }, { \"name\": \"HTML\", \"bytes\": \"38443\" }, { \"name\": \"Java\", \"bytes\": \"2082516\" } ], \"symlink_target\": \"\" }\n\nnamespace tsk { namsespace task { enum task_state { TASK_CREATED, TASK_WAITING, TASK_STARTED, TASK_COMPLETED }; typedef error_code int; class base_task { protected : task_state state; error_code err; public : base_task():state(task_state::TASK_CREATED) {} void start() { state = task_state::TASK_STARTED; err = performTask(); state = task_state::TASK_COMPLETED; taskCompleted(); } virtual error_code performTask() = 0; virtual void taskCompleted() = 0; }; class sync_task : public base_task { private : std::mutex _mutex; std::condition_variable _cond; public : void wait() { std::unique_lock<std::mutex> lck(_mutex); while (state != task_state::TASK_COMPLETED) wait(_lck); } } template<typename T> task_queue : cqueue<T*> { protrected : tsk::tpool::ThreadPool *p; private: task_queue() { p = new ThreadPool(10); } task_queue::pushTask(T *task) { add(task); } void wait() { p->wait(); } } } // namespace task } // namespace tsk\n\n{ \"content_hash\": \"516456686845efe3d1e5cdbc1780683b\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 62, \"max_line_length\": 50, \"avg_line_length\": 18.06451612903226, \"alnum_prop\": 0.5767857142857142, \"repo_name\": \"tushargosavi/cpp-learn\", \"id\": \"aab893e2b7785a89ac51d90eb0f43c50ff50016b\", \"size\": \"1151\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"multithreading/tp/task.h\", \"mode\": \"33188\", \"license\": \"mit\", \"language\": [ { \"name\": \"C\", \"bytes\": \"4913\" }, { \"name\": \"C++\", \"bytes\": \"96491\" } ], \"symlink_target\": \"\" }\n\nAPI Reference ============= .. _client_api: Client API ---------- Endpoints for communicating with Orchestra. All requests must be signed using `HTTP signatures <http://tools.ietf.org/html/draft-cavage-http-signatures-03>`_: .. sourcecode:: python from httpsig.requests_auth import HTTPSignatureAuth auth = HTTPSignatureAuth(key_id=settings.ORCHESTRA_PROJECT_API_KEY, secret=settings.ORCHESTRA_PROJECT_API_SECRET, algorithm='hmac-sha256') response = requests.get('https://www.example.com/orchestra/api/project/create_project', auth=auth) .. http:post:: /orchestra/api/project/create_project Creates a project with the given data and returns its ID. :query task_class: One of `real` or `training` to specify the task class type. :query workflow_slug: The slug corresponding to the desired project's workflow. :query workflow_version_slug: The slug corresponding to the desired version of the workflow. :query description: A short description of the project. :query priority: An integer describing the priority of the project, with higher numbers describing a greater priority. :query project_data: Other miscellaneous data with which to initialize the project. **Example response**: .. sourcecode:: json { \"project_id\": 123, } .. http:post:: /orchestra/api/project/project_information Retrieve detailed information about a given project. :query project_id: The ID for the desired project. **Example response**: .. sourcecode:: json { \"project\": { \"id\": 123, \"short_description\": \"Project Description\", \"priority\": 10, \"scratchpad_url\": \"http://review.document.url\", \"task_class\": 1, \"project_data\": { \"sample_data_item\": \"sample_data_value_new\" }, \"workflow_slug\": \"sample_workflow_slug\", \"workflow_version_slug\": \"v1\", \"start_datetime\": \"2015-09-23T20:16:02.667288Z\" }, \"steps\": [ [\"sample_step_slug\", \"Sample step description\"] ], \"tasks\": { \"sample_step_slug\": { \"id\": 456, \"project\": 123, \"status\": \"Processing\", \"step_slug\": \"sample_step_slug\", \"latest_data\": { \"sample_data_item\": \"sample_data_value_new\" }, \"assignments\": [ { \"id\": 558, \"iterations\": [ { \"id\": 92134, \"start_datetime\": \"2015-09-20T12:02:14.214553\", \"end_datetime\": \"2015-09-23T20:16:15.821171\", \"submitted_data\": { \"sample_data_item\": \"sample_data_value_old\", }, \"status\": 'Requested Review' } ], \"worker\": \"sample_worker_username\", \"task\": 456, \"in_progress_task_data\": { \"sample_data_item\": \"sample_data_value_new\" }, \"status\": \"Processing\", \"start_datetime\": \"2015-09-23T20:16:17.355291Z\" } ] } } } .. http:get:: /orchestra/api/project/workflow_types Return all stored workflows and their versions. **Example response**: .. sourcecode:: json { \"workflows\": { \"journalism\": { \"name\": \"Journalism Workflow\", \"versions\": { \"v1\": { \"name\": \"Journalism Workflow Version 1\", \"description\": \"Create polished newspaper articles from scratch.\" }, \"v2\": { \"name\": \"Journalism Workflow Version 2\", \"description\": \"Create polished newspaper articles from scratch.\" } } }, \"simple_workflow\": { \"name\": \"Simple Workflow\", \"versions\": { \"v1\": { \"name\": \"Simple Workflow Version 1\", \"description\": \"Crawl a web page for an image and rate it.\" } } } } }\n\n{ \"content_hash\": \"483080f90738b4c2bb7ada45282baeb1\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 138, \"max_line_length\": 121, \"avg_line_length\": 32.76086956521739, \"alnum_prop\": 0.49236894492368943, \"repo_name\": \"b12io/orchestra\", \"id\": \"22f6d99d540efb2d7d0dd41d0a2c8a7ddc4b8fe8\", \"size\": \"4521\", \"binary\": false, \"copies\": \"2\", \"ref\": \"refs/heads/main\", \"path\": \"docs/source/api.rst\", \"mode\": \"33188\", \"license\": \"apache-2.0\", \"language\": [ { \"name\": \"CSS\", \"bytes\": \"50496\" }, { \"name\": \"HTML\", \"bytes\": \"101830\" }, { \"name\": \"JavaScript\", \"bytes\": \"353673\" }, { \"name\": \"Makefile\", \"bytes\": \"1234\" }, { \"name\": \"Python\", \"bytes\": \"975395\" }, { \"name\": \"SCSS\", \"bytes\": \"32860\" }, { \"name\": \"Shell\", \"bytes\": \"26\" }, { \"name\": \"TypeScript\", \"bytes\": \"20983\" } ], \"symlink_target\": \"\" }\n\npackage ProGAL.geom3d.complex; import java.awt.Color; import ProGAL.geom3d.LineSegment; import ProGAL.geom3d.Plane; import ProGAL.geom3d.Point; import ProGAL.geom3d.viewer.J3DScene; import ProGAL.geom3d.complex.delaunayComplex.RegularComplex; import ProGAL.geom3d.kineticDelaunay.Tet; import ProGAL.geom3d.volumes.Tetrahedron; /** * An extension of the normal Tetrahedron that is used in complexes. In addition to the four * corner-points, pointers to the triangular faces (of the type CTriangle) and the four * neighboring tetrahedra are maintained. * * @author R.Fonseca */ public class CTetrahedron extends Tetrahedron{ private CTetrahedron[] neighbours = new CTetrahedron[4]; private CTriangle[] triangles = new CTriangle[4]; private boolean modified = false; private boolean flat = false; public CTetrahedron(CVertex p0, CVertex p1, CVertex p2, CVertex p3) { super(p0,p1,p2,p3); } protected CTetrahedron(){ this(null,null,null,null); } public void setFlat(boolean flat) { this.flat = flat; } public void setModified(boolean modified) { this.modified = modified; } public void setPoint(CVertex p, int i){ super.corners[i] = p; } public void setNeighbour(int index, CTetrahedron t){ neighbours[index] = t; } public void setTriangle(int index, CTriangle t){ triangles[index] = t; } public CVertex getPoint(int i){ return (CVertex)corners[i]; } public CTetrahedron getNeighbour(int index) { return neighbours[index]; } public CTriangle getTriangle(int index){ return triangles[index]; } public boolean isModified() { return modified; } public boolean isFlat() { return flat; } /** * For computational convenience, the representation of a complex is based on a big tetrahedron * that encloses all vertices. It has 4 so-called 'big points' as corners. This method indicates * if this tetrahedron has one of these 'big points' as corners. * @see RegularComplex */ public boolean containsBigPoint() { if(getPoint(0).isBigpoint() || getPoint(1).isBigpoint() || getPoint(2).isBigpoint() || getPoint(3).isBigpoint()) return true; return false; } public int getNumberBigPoints() { int count = 0; for (int i = 0; i < 4; i++) { if (getPoint(i).isBigpoint()) count++; } return count; } /** returns neighbour tetrahedron containing specified vertex */ public CTetrahedron getNeighbour(CVertex v) { for (int i = 0; i < 4; i++) { CTetrahedron tetr = getNeighbour(i); if (tetr.containsPoint(v)) return tetr; } return null; } public boolean hasNeighbor(CTetrahedron t) { for (int i = 0; i < 4; i++) if (neighbours[i] == t) return true; return false; } public int getID(CVertex v) { if (v == getPoint(0)) return 0; else { if (v == getPoint(1)) return 1; else { if (v == getPoint(2)) return 2; else { if (v == getPoint(3)) return 3; else return -1; } } } } /** returns the vertices shared by two tetrahedra. */ public CVertex[] getCommonVertices(CTetrahedron tetr) { CVertex[] points = new CVertex[4]; int n = 0; for (int i = 0; i < 4; i++) { if (tetr.containsPoint(getPoint(i))) { points[n] = new CVertex(getPoint(i), getPoint(i).idx); for (int k = 0; k < 3; k++) if (Math.abs(points[n].get(k)) > 100.0) points[n].set(k, points[n].get(k)/1); n++; } } return points; } /** returns plane through common triangle of this and another tetrahedron. The apex of this tetrahedron * is below the plane. */ public Plane getPlane(CTetrahedron tetr) { CVertex[] points = new CVertex[3]; CVertex v = null; int i = 0; int j = 0; while ( i < 3) { if (tetr.containsPoint(getPoint(j))) { points[i] = getPoint(j); i++; } else v = getPoint(j); j++; } Plane plane; if (!points[0].isBigpoint()) plane = new Plane(points[0], points[1], points[2]); else { if (!points[1].isBigpoint()) plane = new Plane(points[1], points[2], points[0]); else plane = new Plane(points[2], points[0], points[1]); } if (plane.above(v) == 1) plane.setNormal(plane.getNormal().multiplyThis(-1)); return plane; } public void updateNeighbour(CTetrahedron lookfor, CTetrahedron replacement){ for(int i=0; i<4;i++){ if(neighbours[i]==lookfor){ neighbours[i]=replacement; break; } } } //find id of point public int findpoint(CVertex p){ for(int i = 0; i<4; i++){ if(getPoint(i)==p) { return i; } } System.out.println(\"Problemer med findpoint\\n\"); //never happens: return -1; } /** returns neighbouring tetrahedron containing v as the oppposite vertex */ public CTetrahedron findNeighbour(CVertex v) { for (int i = 0; i < 4; i++) { if (getNeighbour(i).containsPoint(v)) return getNeighbour(i); } return null; } /* this tetrahedron and tetr must be neighbours. Return the vertex of this tetrahedron not in tetr */ public CVertex findVertex(CTetrahedron tetr) { CVertex p; for (int i = 0; i < 4; i++) { p = getPoint(i); if (!tetr.containsPoint(p)) return p; } return null; } public boolean containsPoint(CVertex p) { for (int i = 0; i < 4; i++) { if (getPoint(i) == p) return true; } return false; } public boolean containsTriangle(CTriangle t){ for(int tp=0;tp<3;tp++){ boolean found = false; for(int p=0;p<4;p++) if(this.getPoint(p)==t.getPoint(tp)) { found=true; break; } if(!found) return false; } return true; } /** TODO: Copy to Tetrahedron */ public CVertex oppositeVertex(CTriangle base){ for(int p=0;p<4;p++){ if(!base.containsPoint(getPoint(p))) return getPoint(p); } throw new RuntimeException(\"The triangle is not part of this tetrahedron\"); } public CTriangle oppositeTriangle(CVertex v) { for(CTriangle t: triangles){ if(t!=null && !t.containsPoint(v)) return t; } throw new RuntimeException(\"The vertex is not part of this tetrahedron\"); } //given a point index this method finds the index of the apex - meaning the opposite point id that is in //the tetrahedron opposite the given point id //input: point index //output: point index of the point opposite public int apexid(int index){ //Point ap0,ap1,ap2,ap3; CTetrahedron apex_tet= getNeighbour(index); if(apex_tet!= null){ for(int i=0;i<4;i++){ if(apex_tet.getNeighbour(i)== this){ return i; } } } //never happens: return -1; } public void toScene(J3DScene scene, double rad, Color clr) { double newRad = rad; Color newClr = clr; // if (containsBigPoint()) { newRad = 0.005; newClr = Color.red; } for (int i = 0; i < 3; i++) { Point u = getPoint(i).clone(); for (int k = 0; k < 3; k++) if (Math.abs(u.get(k)) > 100.0) u.set(k, u.get(k)/1); for (int j = i+1; j < 4; j++) { Point v = getPoint(j).clone(); for (int k = 0; k < 3; k++) if (Math.abs(v.get(k)) > 100.0) v.set(k, v.get(k)/1); LineSegment seg = new LineSegment(u, v); seg.toScene(scene, newRad, newClr); } } } }\n\n{ \"content_hash\": \"37fb299c31f8fc34c1b44ed5b3fc02bb\", \"timestamp\": \"\", \"source\": \"github\", \"line_count\": 239, \"max_line_length\": 127, \"avg_line_length\": 29.1255230125523, \"alnum_prop\": 0.6543600057463008, \"repo_name\": \"DIKU-Steiner/ProGAL\", \"id\": \"6536dc614429e89ed8d2f1e6f63a6e862cdbe3b9\", \"size\": \"6961\", \"binary\": false, \"copies\": \"1\", \"ref\": \"refs/heads/master\", \"path\": \"src/ProGAL/geom3d/complex/CTetrahedron.java\", \"mode\": \"33188\", \"license\": \"mit\", \"language\": [ { \"name\": \"C++\", \"bytes\": \"189314\" }, { \"name\": \"HTML\", \"bytes\": \"5710\" }, { \"name\": \"Java\", \"bytes\": \"2150908\" }, { \"name\": \"Makefile\", \"bytes\": \"529\" } ], \"symlink_target\": \"\" }\n\n<!DOCTYPE html> <!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]--> <!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]--> <head> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>relative_humidity_from_mixing_ratio &mdash; MetPy 0.7</title> <link rel=\"shortcut icon\" href=\"../../_static/metpy_32x32.ico\"/> <link rel=\"canonical\" href=\"https://unidata.github.io/MetPy/latest/api/generated/metpy.calc.relative_humidity_from_mixing_ratio.html\"/> <link rel=\"stylesheet\" href=\"../../_static/css/theme.css\" type=\"text/css\" /> <link rel=\"stylesheet\" href=\"../../_static/gallery.css\" type=\"text/css\" /> <link rel=\"stylesheet\" href=\"../../_static/theme_override.css\" type=\"text/css\" /> <link rel=\"index\" title=\"Index\" href=\"../../genindex.html\"/> <link rel=\"search\" title=\"Search\" href=\"../../search.html\"/> <link rel=\"top\" title=\"MetPy 0.7\" href=\"../../index.html\"/> <link rel=\"up\" title=\"calc\" href=\"metpy.calc.html\"/> <link rel=\"next\" title=\"relative_humidity_from_specific_humidity\" href=\"metpy.calc.relative_humidity_from_specific_humidity.html\"/> <link rel=\"prev\" title=\"relative_humidity_from_dewpoint\" href=\"metpy.calc.relative_humidity_from_dewpoint.html\"/> <script src=\"../../_static/js/modernizr.min.js\"></script> </head> <body class=\"wy-body-for-nav\" role=\"document\"> <div class=\"wy-grid-for-nav\"> <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\"> <div class=\"wy-side-scroll\"> <div class=\"wy-side-nav-search\"> <a href=\"../../index.html\" class=\"icon icon-home\"> MetPy <img src=\"../../_static/metpy_150x150.png\" class=\"logo\" /> </a> <div class=\"version\"> <div class=\"version-dropdown\"> <select class=\"version-list\" id=\"version-list\"> <option value=''>0.7</option> <option value=\"../latest\">latest</option> <option value=\"../dev\">dev</option> </select> </div> </div> <div role=\"search\"> <form id=\"rtd-search-form\" class=\"wy-form\" action=\"../../search.html\" method=\"get\"> <input type=\"text\" name=\"q\" placeholder=\"Search docs\" /> <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" /> <input type=\"hidden\" name=\"area\" value=\"default\" /> </form> </div> </div> <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\"> <ul class=\"current\"> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../../installguide.html\">Installation Guide</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../../units.html\">Unit Support</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../../examples/index.html\">MetPy Examples</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../../tutorials/index.html\">MetPy Tutorials</a></li> <li class=\"toctree-l1 current\"><a class=\"reference internal\" href=\"../index.html\">The MetPy API</a><ul class=\"current\"> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metpy.constants.html\">constants</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metpy.units.html\">units</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metpy.io.html\">io</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metpy.io.cdm.html\">cdm</a></li> <li class=\"toctree-l2 current\"><a class=\"reference internal\" href=\"metpy.calc.html\">calc</a><ul class=\"current\"> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.add_height_to_pressure.html\">add_height_to_pressure</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.add_pressure_to_height.html\">add_pressure_to_height</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.advection.html\">advection</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.bulk_shear.html\">bulk_shear</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.bunkers_storm_motion.html\">bunkers_storm_motion</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.cape_cin.html\">cape_cin</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.convergence_vorticity.html\">convergence_vorticity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.coriolis_parameter.html\">coriolis_parameter</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.density.html\">density</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.dewpoint.html\">dewpoint</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.dewpoint_rh.html\">dewpoint_rh</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.divergence.html\">divergence</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.dry_lapse.html\">dry_lapse</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.dry_static_energy.html\">dry_static_energy</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.el.html\">el</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.equivalent_potential_temperature.html\">equivalent_potential_temperature</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.find_intersections.html\">find_intersections</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.first_derivative.html\">first_derivative</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.friction_velocity.html\">friction_velocity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.frontogenesis.html\">frontogenesis</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.geopotential_to_height.html\">geopotential_to_height</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.geostrophic_wind.html\">geostrophic_wind</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_layer.html\">get_layer</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_layer_heights.html\">get_layer_heights</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_perturbation.html\">get_perturbation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_wind_components.html\">get_wind_components</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_wind_dir.html\">get_wind_dir</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.get_wind_speed.html\">get_wind_speed</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.h_convergence.html\">h_convergence</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.heat_index.html\">heat_index</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.height_to_geopotential.html\">height_to_geopotential</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.height_to_pressure_std.html\">height_to_pressure_std</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.interp.html\">interp</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.interpolate_nans.html\">interpolate_nans</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.isentropic_interpolation.html\">isentropic_interpolation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.kinematic_flux.html\">kinematic_flux</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.laplacian.html\">laplacian</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.lat_lon_grid_spacing.html\">lat_lon_grid_spacing</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.lcl.html\">lcl</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.lfc.html\">lfc</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.log_interp.html\">log_interp</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mean_pressure_weighted.html\">mean_pressure_weighted</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mixed_layer.html\">mixed_layer</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mixed_parcel.html\">mixed_parcel</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mixing_ratio.html\">mixing_ratio</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mixing_ratio_from_relative_humidity.html\">mixing_ratio_from_relative_humidity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.mixing_ratio_from_specific_humidity.html\">mixing_ratio_from_specific_humidity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.moist_lapse.html\">moist_lapse</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.moist_static_energy.html\">moist_static_energy</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.montgomery_streamfunction.html\">montgomery_streamfunction</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.most_unstable_cape_cin.html\">most_unstable_cape_cin</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.most_unstable_parcel.html\">most_unstable_parcel</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.nearest_intersection_idx.html\">nearest_intersection_idx</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.parcel_profile.html\">parcel_profile</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.potential_temperature.html\">potential_temperature</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.precipitable_water.html\">precipitable_water</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.pressure_to_height_std.html\">pressure_to_height_std</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.psychrometric_vapor_pressure_wet.html\">psychrometric_vapor_pressure_wet</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.reduce_point_density.html\">reduce_point_density</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.relative_humidity_from_dewpoint.html\">relative_humidity_from_dewpoint</a></li> <li class=\"toctree-l3 current\"><a class=\"current reference internal\" href=\"#\">relative_humidity_from_mixing_ratio</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.relative_humidity_from_specific_humidity.html\">relative_humidity_from_specific_humidity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.relative_humidity_wet_psychrometric.html\">relative_humidity_wet_psychrometric</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.resample_nn_1d.html\">resample_nn_1d</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.saturation_mixing_ratio.html\">saturation_mixing_ratio</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.saturation_vapor_pressure.html\">saturation_vapor_pressure</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.second_derivative.html\">second_derivative</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.shearing_deformation.html\">shearing_deformation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.shearing_stretching_deformation.html\">shearing_stretching_deformation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.sigma_to_pressure.html\">sigma_to_pressure</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.significant_tornado.html\">significant_tornado</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.specific_humidity_from_mixing_ratio.html\">specific_humidity_from_mixing_ratio</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.storm_relative_helicity.html\">storm_relative_helicity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.stretching_deformation.html\">stretching_deformation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.supercell_composite.html\">supercell_composite</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.surface_based_cape_cin.html\">surface_based_cape_cin</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.thickness_hydrostatic.html\">thickness_hydrostatic</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.thickness_hydrostatic_from_relative_humidity.html\">thickness_hydrostatic_from_relative_humidity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.tke.html\">tke</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.total_deformation.html\">total_deformation</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.v_vorticity.html\">v_vorticity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.vapor_pressure.html\">vapor_pressure</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.virtual_potential_temperature.html\">virtual_potential_temperature</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.virtual_temperature.html\">virtual_temperature</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.vorticity.html\">vorticity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"metpy.calc.windchill.html\">windchill</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"metpy.plots.html\">plots</a></li> <li class=\"toctree-l2\"><a class=\"refer"
    }
}