{
    "id": "dbpedia_6302_3",
    "rank": 23,
    "data": {
        "url": "https://gamedesignskills.com/game-design/video-game-mechanics/",
        "read_more_link": "",
        "language": "en",
        "title": "Video Game Mechanics: A Beginner’s Guide (with Examples)",
        "top_image": "https://gamedesignskills.com/wp-content/uploads/2022/04/GDS-game-mechanics-fundamental-1024x576.jpeg",
        "meta_img": "https://gamedesignskills.com/wp-content/uploads/2022/04/GDS-game-mechanics-fundamental-1024x576.jpeg",
        "images": [
            "https://www.facebook.com/tr?id=486649508584752&ev=PageView&noscript=1",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/03/gds-logo-white.png",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/03/gds-logo-white.png",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/GDS-game-mechanics-fundamental-scaled.jpeg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/cropped-alex-hs2-300x300.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/game-mechanic-example-1.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/s.w.org/images/core/emoji/14.0.0/svg/1f447.svg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/game-mechenics-yasuo-steel-tempest.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/game-mechanic-example-2.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/game-mechanic-and-challenge-is-gameplay.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/supersmash-bros-pikachu-mario.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/hookshot.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2022/04/boring-vs-engaging-gameplay-loop.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.42a08a9aea14f3f1a118d13abb463ebf 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.42a08a9aea14f3f1a118d13abb463ebf 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.42a08a9aea14f3f1a118d13abb463ebf 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.42a08a9aea14f3f1a118d13abb463ebf 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.42a08a9aea14f3f1a118d13abb463ebf 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/1d76d736fbc38279d55e3f35d60f894f.avatar 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/1d76d736fbc38279d55e3f35d60f894f.avatar 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.8da0173531c0f98328a8b0049aa9c351 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.ca6857f4b9b6ec17fd50cc3434dbdd26 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/cropped-alex-hs2-84x84.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.ca6857f4b9b6ec17fd50cc3434dbdd26 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/cropped-alex-hs2-84x84.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.ca6857f4b9b6ec17fd50cc3434dbdd26 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.b7e33c72e060483b8d522b62306392e5 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.8da0173531c0f98328a8b0049aa9c351 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.b7e33c72e060483b8d522b62306392e5 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.b7e33c72e060483b8d522b62306392e5 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.756965c40ff18ca261f6754a39747386 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/cropped-alex-hs2-84x84.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.b94098fa434d3fb341ca802579986e5a 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.3b0e9fad83552c61dec1c9dfd6ba08cc 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/desktop/optimized/rev-bffe884/secure.gravatar.com/avatar/1d76d736fbc38279d55e3f35d60f894f.d6749cb27909dba447305178e23284f9 2x",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/plugins/elementor/assets/images/placeholder.png",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/alex-hs2-300x300.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/s.w.org/images/core/emoji/14.0.0/svg/1f9e0.svg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/alex-hs2-300x300.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/03/gds-logo-white.png",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/gds-course-page-testimonial-mohammad-alvi1.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-devin-pavlas1.jpeg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-christopher-tom1.jpeg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-luke-rinard.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-joe-sepko1.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-chris-mcentee1.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-blazej-zywiczynski1.jpeg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/05/gds-course-page-testimonial-peter-bartholow.jpg",
            "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/gamedesignskills.com/wp-content/uploads/2023/06/jerry-prochazka-testimonial1.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alexander Brazie"
        ],
        "publish_date": "2022-04-02T12:10:40-07:00",
        "summary": "",
        "meta_description": "Video game mechanics are at the heart of gameplay design, and yet the concept is widely misinterpreted.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn-jbaml.nitrocdn.com/TslETkoQPZQfqKchqmbgIbVlJeZplxgv/assets/images/optimized/rev-bffe884/cdn.shortpixel.ai/spai/q_lossless%20ret_img%20to_webp/gamedesignskills.com/wp-content/uploads/2023/07/cropped-gds-logo-favicon-circle-32x32.png",
        "meta_site_name": "Game Design Skills",
        "canonical_link": "https://gamedesignskills.com/game-design/video-game-mechanics/",
        "text": "Video game mechanics are at the heart of gameplay design, and yet the concept is widely misinterpreted.\n\nThroughout my game design career, I’ve witnessed game directors with 10+ years of experience misuse the term. On the other hand, I’ve met junior designers who understand the concepts naturally without knowing the industry terms.\n\nSo if you want to be an effective and skilled video game designer no matter your experience level, a thorough understanding of the nature of game mechanics is essential for crafting rich game experiences.\n\nWithout it, you’ll be stuck reusing the core mechanics of other games.\n\nWhile recreating Mario’s jump is a good starting point for beginners, at some point, you’ll likely want to create your own core gameplay loop.\n\nAnd to prepare yourself for making more novel and advanced games, you’ll need a foundational understanding of game mechanics.\n\nYou can find long, scholarly takes on this question, but I’d rather cut to the chase.\n\nWith that said, let’s first clearly and simply define…\n\nWhat are video game mechanics?\n\nVideo game mechanics are how players and rest of the fundamental interlocking pieces of a game including rules, challenges, goals, actions, strategies, game states interact with each other in a meaningful way. What can be considered a mechanic in one game and is fluff in another, and the key identifier is whether it creates consequences.\n\nFor example: If you fire a flaming arrow in one game, and it burns away a patch of vines revealing a path, it’s a mechanic; it can meaningfully affect the game world.\n\nHowever, in another game, the exact same concept, a flaming arrow, might trigger an amazing VFX of burning grass, but otherwise act just like a normal arrow. In that case, the fire is fluff; it has no meaningful effect on gameplay.\n\nAnd it doesn’t matter if you’re designing a roleplaying game (RPG), a first-person shooter (FPS) or an action adventure game. There are parts of the game that have meaningful consequences, and parts that are fluff.\n\nI’ll get into the many different kinds of mechanics soon, but in general, a good sign of a strong mechanic is one that interacts with a wide variety of different situations or shapes how you play the entire game.\n\nCommon Misconception About Game Mechanics\n\nGame mechanics has to be impactful, which means when they’re not, they’re “fluff” in disguise.\n\nDon’t get me wrong, there’s a place for fluff (I love an impactful visual effect), but a mechanics designer needs to see through the illusion.\n\nFor example, jumping might be the core mechanic in Super Mario games, but in a game where jumping makes little to no difference, it’s fluff.\n\nThe ability to stare down the sights of your gun is another example of fluff, unless doing so improves your aim or slows your movement.\n\nOne of my favorite examples of a mechanic is spell interruption, a design tool I used regularly for both World of Warcraft and League of Legends. Whether it’s a Rogue’s melee Kick, Soraka’s AoE Equinox, or Yasuo’s launching whirlwind, this mechanic interacts with a ton of different opportunities created by the designers throughout the game.\n\nYasuo’s Steel Tempest is one of many interrupts in League of Legends, but its trajectory and cast conditions give it its own mechanical feel.\n\nMastering this mechanic as a player means learning when it’s a useful tool, then refining your timing in each scenario.\n\nMastering this mechanic as a designer means providing enough opportunities for play and counter-play, as well as clear game rules to keep its behavior consistent.\n\nGame mechanics examples\n\nHere are 8 examples of game mechanics:\n\nJump in Super Mario\n\nShield in Halo\n\nSkydiving and the storm in Fortnite\n\nRotate in Tetris\n\nWeapon power-ups in Doom\n\nThe portal gun in Portal\n\nBlock placement in Minecraft\n\nSteering and power-ups in Mario Kart\n\nHere are 8 examples of game elements that are not game mechanics:\n\nMoney\n\nTokens\n\nAnimations\n\nButtons\n\nArt\n\nSounds\n\nCinematics\n\nDice\n\nThe last section will probably spark a defensive reaction in some of you. That’s okay, just set your resistance aside for now. There’s a method to this madness.\n\nNow, let me share some exciting news.\n\nOver the past three years, I’ve been compiling my 25 years of experience in games like World of Warcraft, League of Legends, Ori and The Will of Wisps, Overwatch, No Rest for the Wicked, and consulting over 36 studios to create the most in-depth game mechanics course series.\n\nThis course series represents the peak of my work as a game designer and educator, so join the waitlist to receive behind-the-scenes updates and get first dips on the early access.\n\nAnd as we delve into the intricacies of game mechanics, it’s essential to understand that, on their own, money, tokens, art, and so on, are not game mechanics. However, they can be representations of game mechanics. The actual mechanic is the action tied to the object—what actually happens in the game.\n\nAll of these bolded actions are game mechanics:\n\nSpending money\n\nAwarding a token to represent your score\n\nTiming your actions with the help of animations\n\nPressing a button to change the game state\n\nInforming the player with sounds, visual art, or cinematics\n\nNotice there’s no action listed for dice. Rolling dice is not a mechanic, even though it’s very often confused for one. Dice are just an expression of uncertainty. Rolling dice (or flipping a coin or randomly generating a number) just adds variance to the result of a mechanic.\n\nThink of dice as random number generators: useful tools, but not game mechanics.\n\nIf you’re confused, just remember this:\n\nMechanics connect game elements to produce outcomes. The device used to scramble that outcome is not the mechanic itself.\n\nSidebar: Decks of Cards\n\nDrawing and playing cards, on the other hand, can be game mechanics, since they change the game state. A card drawn from the deck gives you new ways to interact with the game, and, since it is no longer in the deck, changes the probabilities of future actions as well.\n\n(And yes, there are atypical games that turn dice rolling into a mechanic. For instance, a limited pool of varied dice is similar to a deck of cards.)\n\nGame mechanics vs gameplay\n\nSo what’s the difference?\n\nThese terms get thrown around so often the difference between them can get blurred to death. However, just as individual music notes are not a song, game mechanics are not gameplay.\n\nAnd just as a sequence of beautifully arranged notes can flow together into a song, a well-designed sequence of game mechanics can create smooth, satisfying gameplay and game flow.\n\nOr if you prefer it without the metaphor: Gameplay is the flow between challenges, mechanics and outcomes.\n\nDesigners often analyze this flow by looking at gameplay loops: sequences of actions and events repeated by the player. Good game mechanics make the loop smooth and satisfying, while flawed mechanics can undermine it.\n\nStomping on a koopa, kicking its shell to defeat another enemy, then jumping again to dodge the ricochet is gameplay. The small atomic pieces of jump, stomp, kick and jump again are mechanical elements that combine to create a gameplay loop you’ll experience many times.\n\nQuesting is an example of a longer gameplay loop, composed of quest discovery, travel, objective completion and reward collection. The player actions along that journey can involve many different mechanics, from stealthing to combat moves to multiplayer interactions.\n\nThese loops are incredibly important. The design decisions about which mechanics are front and center in a game often define the game’s genre and audience. If a mechanic doesn’t fit into a gameplay loop, it won’t have many chances to shine.\n\nCore, primary and secondary mechanics\n\nGame development is ultimately always about choices. Most successful games carefully focus on a core mechanic and design gameplay loops that challenge the player’s mastery of it.\n\nAdditional mechanics are there to support the core game mechanic, not to create an “all in one” game where anything is possible but nothing feels connected.\n\nFor this reason, we separate mechanics into three buckets: core mechanics, primary mechanics and secondary mechanics.\n\nYour core game mechanic is the foundation of your game, if done right, supports the emotional drive of your game. Without it, it’s not even the same game. For example:\n\nMario has jumping.\n\nCall of Duty has point-and-click gunplay.\n\nHearthstone has playing cards from a deck of cards.\n\nSmash Bros has attacking\n\n(Credit: The Game Crater.)\n\nPrimary mechanics have the purpose of supporting the game’s core mechanic. For example:\n\nMario has wall-sliding.\n\nCall of Duty has weapon reloading.\n\nHearthstone lets you attack with minion cards.\n\nSecondary mechanics add depth, flavor and variety. Fire flowers, grenades, and Taunt minions are all great examples. The game would still work just fine without them, but their addition adds new experiences and allows for new challenges.\n\nBe careful: More is not always better. Complexity creep is easier than you think, so keep it simple and carefully introduce new mechanics through gameplay or tutorials.\n\nVarying the Core Mechanic\n\nThe core mechanic is the bedrock of a game, but it is often expressed in several ways.\n\nIn Portal, you start by interacting with existing portals, then get a portal gun that links to an existing portal, then upgrade to making all portals yourself. These are three ways of playing with the core portal mechanic.\n\nOn top of this, your portal use is supported or challenged by many other mechanics, adding variety.\n\nSecondary mechanics, on the other hand, are usually limited to a simple form and lack support from other mechanics.\n\nFor example, the portals in Darksiders only connect predefined locations. The game is not about portals, so adding new uses for portals would risk distracting from the core gameplay.\n\nGoals and gameplay in different game genres\n\nAlmost any game you make will fall into one genre or another, or occasionally slip into an intersection between a couple genres. In order to meet audience expectations (or break them in a useful, intentional way), you’ll need to be familiar with the genre’s core gameplay experiences.\n\nRPGs (Role-playing games)\n\nWhether it’s a turn-based game like Final Fantasy, real time combat like Dark Souls, or a point-and-click Diablo-like, RPGs consistently include certain elements.\n\nBecause RPGs are first and foremost about a sense of growth, progression and overcoming adversity through persistence, these games typically share and reuse the same concepts over and over again:\n\nPower growth\n\nExperience / character level / stats increase over time\n\nGaining abilities adds power and versatility\n\nFailure tolerance\n\nGenerous respawn mechanics\n\nEquipment system\n\nNew items\n\nMore equippable slots\n\nBetter access to consumables\n\nFPSs (First-person shooters)\n\nFirst-person shooters universally center around aim-and-click mechanics. They can be open world games, or use the “shoebox & corridor” style of heavily controlled level design.\n\nBecause FPSs are focused around aiming, timing, positioning and ammo management, they often have a higher focus on individual dexterity, reaction speed and physical endurance. (I personally struggle with these types of games due to a lifelong struggle with jittery hands.)\n\nGunplay\n\nAim, bullet trajectory, spray patterns\n\nVariety of guns (shotguns, snipers with sights, and so on)\n\nRespawn mechanic (typically harsher than RPGs)\n\nTimed respawn (Deathmatch)\n\nWave respawn (CTF / Capture the Hill)\n\nPermadeath (Battle Royales)\n\nCollection\n\nWeapons, health packs, tossables\n\nBody armor, ammo, shields\n\nBoard games\n\nBoard games span an immensely diverse space—from Go to Gloomhaven—so putting them into a single category seems almost reckless. However, while you could definitely go deeper by analyzing a specific subgenre, there are still common features that board gamers expect:\n\nMeasurable victory conditions\n\nVictory points or win/lose conditions\n\nCatchup mechanics to allow the lead to change hands\n\nResources & resource engines\n\nResource generation over time\n\nResources have variable price or usefulness\n\nUnlocking new ways to gain resources\n\nRule creation & rule breaking\n\nGaining new gameplay options (deck-building, passive powers)\n\nCounterplay (traps, targeted interactions, setting new rules)\n\nDeception and persuasion\n\nSo pay attention to these when you’re learning how to make a board game.\n\nSimulation games\n\nIncluding everything from racing games to farming simulators, simulation games give you a taste of a new lifestyle. Through dramatically simplified mechanics that mirror the emotional experience of the original activity, these games allow you to safely experiment with alternative fantasies.\n\nThis is another diverse genre, but we can still identify some core components:\n\nSelf-directed exploration & ways to express yourself\n\nCustomization\n\nSystematic trial-and-error experimentation\n\nIntrinsic goal-setting opportunities\n\nImprovement through learning\n\nIterating the same gameplay loop\n\nRefining your process for greater results\n\nGamification\n\nScoring and reward systems layer atop core gameplay\n\nHow to create satisfying game mechanics consistently\n\nIt’s not enough to just build a new mechanic.\n\nIf the mechanic doesn’t have enough chances to have a meaningful, memorable impact, it’s often better to cut it entirely. As a designer, you need to create the context that lets your mechanics shine.\n\nFor example: The Cane of Somaria from The Legend of Zelda: A Link to the Past, an item that creates blocks to hold down switches or fill pits.\n\nThis is a great idea on its own, but it’s only available late in the game, and is only useful in a few situations.\n\nAs a result, it’s much less memorable than items like the Hookshot.\n\nTo avoid this situation, scatter different challenges throughout the game with your mechanic in mind. Then, when a player gets access to a new mechanic, they can revisit older content to find new, more powerful ways to overcome old objectives.\n\nHere is another example: In one game I’m currently working on, enemies with shields are initially frustrating and difficult to overcome.\n\nOnce the player gains the ability to destroy those shields, these experiences are much easier, reinforcing the sense of power progression core to RPGs.\n\nGenerally speaking, there are three types of context that can help maximize your mechanics. Here’s a questionnaire to help guide your thought process as you design for each one:\n\nEnemies\n\nHow does this mechanic change how I interact with enemies?\n\nHow do enemies disrupt my ability to use this mechanic?\n\nIs this mechanic useful frequently, but not constantly?\n\nFriends\n\nHow does this mechanic change my relationship with friendly units or players?\n\nDoes this new mechanic reward observation, coordination and creativity?\n\nEnvironment\n\nHow does the world respond to this mechanic?\n\nWhat doesn’t react to this mechanic and why? Is it well communicated?\n\nCan I enable or disable this mechanic at different points to vary the challenges?\n\nThese aren’t either/or options. If your mechanic can destroy both enemy shields and locked doors, it has even more opportunities to make an impact.\n\nUltimate it comes down to your ability to step into different player types’ perspectives and make design decisions from there, which is a type of skill set.\n\nBy the way, this is also the same skills that studios look for in your game design portfolio and during the interview process when hiring game designers.\n\nVideo game mechanic mistakes to avoid\n\nYour journey into the universe of game mechanics will not be easy. You’re going to experiment, make a lot of mistakes and throw away a lot of work in the process. That’s okay. But hopefully I can help you avoid some of the most common offenders.\n\nMistake #1: Contextualization is not the mechanic\n\nA sword, a flaming sword, a lightning sword and a lightsaber are not separate mechanics. At the end of the day, these are just different damage numbers at the end of an attack mechanic. (Just ask a Star Wars fan whether “hit for 2d8 damage” lives up to the Jedi fantasy.)\n\nEven making some enemies weak to fire and some weak to lightning does not make the flaming and lightning swords different mechanics. In that case, the mechanic is type weakness—a concept that Pokémon built the majority of its genre around.\n\nNow, if you allow flaming swords to ignite vampires and lightning swords to send electrical arcs to nearby secondary targets, you’re on the right path. Creating these differences in gameplay and supporting them with enough relevant opportunities is at the heart of mechanics design.\n\nMistake #2: Tutorialization is not rich gameplay\n\nTrapped behind a thick vine barrier, the player cannot leave until they set a torch alight at a fireplace and carry it to the vines to burn a pathway.\n\nFighting a duelist who deflects every blow, the player cannot win unless they disarm their opponent first.\n\nBoth of these scenarios would make great tutorials, introducing a major game mechanic and forcing the player to internalize it.\n\nHowever, repeatedly dropping these exact scenarios throughout the game creates a frustrating gameplay loop where the player never has the opportunity to grow or innovate. To provide a satisfying player experience, a mechanic can’t be the same every time.\n\nEven a straightforward attack mechanic can be engaging with enough alternatives and a variety of enemies.\n\nInstead, vary the challenge with new complications, or give the player new ways to overcome the obstacle. If the next courtyard introduces wind that blows out their torch, the player needs to find a new solution—like the fire spell they’ve just learned.\n\nThis kind of internal growth and creativity is essential for long-term engagement and a sense of power.\n\nMistake #3: Throughput is not a mechanic\n\nA fast saber slashes the enemy, slicing them for four damage. A heavy two-handed great hammer crushes the enemy for eight damage.\n\nBoth cost one action. Congrats, you’ve discovered one of my major pet peeves about combat in Dungeons & Dragons.\n\nThese weapons have different throughput: they deal damage at different rates. But since they have only one, identical mechanic (attacking for damage), there’s no reason not to just pick the most powerful weapon your character can wield and attack every turn.\n\nAnd sure, tuning the throughput is important for game balance.\n\nIf sabers only deal four damage but can slice twice per action, the incentives are more even and players will use a wider variety of weapons. But you still aren’t designing game mechanics!\n\nApproaching the problem from a mechanics design perspective lets you accomplish so much more. Give weapons different abilities, characteristics, and ways of interacting with the world, and you’ve given players a rich, narratively satisfying set of combat decisions.\n\nExample 1: When we made Ori and the Will of the Wisps, we tuned the throughput, but we didn’t stop there.\n\nHammers are slower and hit harder than swords, but they also push enemies farther back and shatter shields.\n\nThese mechanical differences are what make each weapon unique.\n\nExample 2: The Dark Souls series also leans heavily into this.\n\nTwo weapons with similar throughput can feel dramatically different, since they have different movesets and weights.\n\nThe player’s ability to utilize the best aspects of the weapon and mitigate its downsides becomes the core of a great game.\n\nVideo game mechanics final thoughts\n\nIt doesn’t matter if you’re at Nintendo with 30+ years of experience or working on your first game. Exploring, iterating on and developing game mechanics and systems is the lifeblood of your game design project.\n\nUnderstanding the difference between a meaningful mechanic and supporting fluff will help you invest your time, energy and budget effectively.\n\nIdentifying your core mechanics and building your secondary mechanics around them will help you find your fun gameplay loops.\n\nJoin my game mechanics course series waitlist to receive exclusive behind-the-scenes updates and get dips on bonus templates and processes when the series is ready in a couple of months.\n\nBecome familiar with your genre and competitors will help you meet and match audience expectations—and enable you to break free from outdated elements.\n\nFinally, creating diverse challenges where players can apply mechanics creatively, consistently and effectively to solve problems on their own will ensure players love your game and want to replay it for years to come."
    }
}