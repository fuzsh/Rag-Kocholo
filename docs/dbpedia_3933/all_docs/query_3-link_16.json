{
    "id": "dbpedia_3933_3",
    "rank": 16,
    "data": {
        "url": "https://klarasystems.com/articles/deep-diving-into-the-strengths-of-freebsd/",
        "read_more_link": "",
        "language": "en",
        "title": "Deep Diving Into the Strengths of FreeBSD",
        "top_image": "https://i0.wp.com/klarasystems.com/wp-content/uploads/2021/05/blogpost_freebsdAdobeStock_236977102-Converted.png?resize=1200%2C745&ssl=1",
        "meta_img": "https://i0.wp.com/klarasystems.com/wp-content/uploads/2021/05/blogpost_freebsdAdobeStock_236977102-Converted.png?resize=1200%2C745&ssl=1",
        "images": [
            "https://klarasystems.com/wp-content/uploads/2020/05/klara_white_logo_big.png",
            "https://i0.wp.com/klarasystems.com/wp-content/uploads/2021/05/blogpost_freebsdAdobeStock_236977102-Converted.png?resize=2278%2C745&ssl=1",
            "https://i0.wp.com/klarasystems.com/wp-content/uploads/2023/01/linux_vs_freebsd-use-cases-and-arguments.png?fit=1200%2C675&ssl=1",
            "https://i0.wp.com/klarasystems.com/wp-content/uploads/2023/01/history_of_freebsd_dtrace.png?fit=1200%2C675&ssl=1",
            "https://i0.wp.com/klarasystems.com/wp-content/uploads/2022/07/particles.jpg?fit=1200%2C633&ssl=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-05-03T08:52:43+00:00",
        "summary": "",
        "meta_description": "Read about the strengths of FreeBSD and find out what are the features that make FreeBSD the right choice of operating system for developing products on top of it, or simply using it as your infrastructure OS.",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/klarasystems.com/wp-content/uploads/2020/05/cropped-logo_dark.png?fit=32%2C32&ssl=1",
        "meta_site_name": "Klara Inc",
        "canonical_link": "https://klarasystems.com/articles/deep-diving-into-the-strengths-of-freebsd/",
        "text": "A while back we talked about the advantages of different open source licensing models. If you missed it, here’s a quick link.\n\nIt may sometimes seem difficult to believe but FreeBSD has been around for almost 30 years, with its initial release in 1993. It has evolved tremendously over the years, with the involvement of a great community, who have contributed to its continuous development and fine tuning. This great community that puts its shoulder to the development of FreeBSD consists of three groups: committers, contributors, and users.\n\nIf users only run FreeBSD systems, contributors are those who submit patches for consideration. Committers are the ones who assess these patches and decide what goes in and what doesn’t. Or, in more simple terms, committers are developers with read and write access to the FreeBSD repositories. In this article, we will take a look of the strengths that make FreeBSD a trustworthy choice of OS.\n\nLet’s start at the beginning: Why FreeBSD?\n\nOne of the best features of FreeBSD is that it can be used as a general-purpose operating system. That means that FreeBSD can be used as a server, as an embedded system, or in networking. The large amount of popular 3rd party software available in FreeBSD allows you to easily use the operating system as a web server, Firewall, FTP server, DNS server, mail server, or router. Given that FreeBSD supports PowerPC, MIPS, RISC-V, and ARM, it can also be used as for embedded systems.\n\nFreeBSD can be used, as your needs dictate, as a powerful desktop or as a development machine. It also supports network services: web, mail, file, and additional applications. One of the well- known advantages of FreeBSD is its reliability as an internet server. Big names, such as Netflix, or Sony for its PlayStation, rely on FreeBSD to provide dependable service.\n\nFreeBSD is incredibly stable and provides good security to boot. It is extremely fast and very responsive. FreeBSD is free – it is focused on performance, networking, and storage, easily combining system administration and comprehensive documentation to reach the full potential of any computer.\n\nSoftware Management – The Simplified Way\n\nFreeBSD provides simplified software management with the help of its packaging system and the ports collection. Packages and ports greatly simplify the way you can run software on a Unix-like system. They document and automate the install, uninstall, and configuration processes for software packages.\n\nPackages are usually preferred to ports, as they are already compiled, and don’t take additional time and resources. Ports allow you to pick and choose optional components, but require more knowledge and experience with Unix-like systems, and can take significant time to compile the software.\n\nThe Ports Collection, which contains over 30,000 applications, is the system that FreeBSD provides for building add-on software. With ports, you can build the software from the source code provided by the vendor, according to your needs, selecting which features you want to use.\n\nThe Ports Collection is a set of makefiles and patches for installing software or creating binary packages. However, keep in mind that it is not recommended to mix applications installed from the Ports Collection with the binary packages provided via pkg to install software. If you really need to use them together with pkg, make sure that the Ports Collection and pkg are on the same branch release of the ports tree.\n\nOne of the main advantages of the ports system is that the installation can be tuned and optimized according to your requirements. You can choose to exclude the documentation and examples or opt to include additional features that require more dependencies and external libraries.\n\nPackages are precompiled software from the Ports Collection. They let you quickly install, uninstall, and upgrade add-on software without having to compile it. FreeBSD maintains a build farm where all of the packages for all supported architectures and major releases are built on a regular basis. This cluster makes available all the build logs and known errors for all ports built into packages in a database. Weekly builds logs are also available through mailing list archives.\n\nFreeBSD provides a very flexible packaging system called package, pkg(8), or just pkg. Pkg(8) replaced the traditional FreeBSD package management tools, pkg_add(1) in FreeBSD 9.1. It provides many features that help deal with binary packages faster and easier.\n\nCustomizable Builds\n\nOne of the many great advantages of FreeBSD is that it allows you to customize the operating system, according to your needs. Many of the components can be turned on or off, to create a smaller system suitable for embedded use, or to disable unused features to reduce the attack surface.\n\nUsing the src.conf configuration file, you can build a customized FreeBSD that does not include components like the build-in SNMP server, the test suite, the FreeBSD Installer, the toolchain (compiler, linker, etc.), software with non-BSD licenses (CDDL, GPL, etc), DTrace support, drivers for hardware you will never use, one or more of the firewalls. This gives you the control to make a version of FreeBSD that only contains what you want.\n\nPowerful Systems Built on Economical Software\n\nNobody likes bloatware, right? Whether you’re running in the datacenter or as a laptop OS, you get the power of a mature, stable system but with none of the requirements of supporting endless useless grandfathered-in code. You don’t need lots of cores – but you can definitely run it on huge multicore systems, can easily run a highly graphical interface, or choose the simpler way; FreeBSD will support you either way. And if you’re running on the latest n-CPU hardware, FreeBSD will support you also. Not to mention that you’ll have proper NUMA support doing it.\n\nA Word on Portability\n\nFreeBSD has been ported to a variety of instruction set architectures. Portability is a vital part of FreeBSD’s growth and longevity. The source code for the operating system is broken into the “Machine Independent” parts, that work the same across all architectures, with specific “Machine Dependent” parts to support the features of a specific architecture. The common x86 64-bit hardware (called amd64) is the best supported FreeBSD platform. As of FreeBSD 13.0 ARM64 (ARMv8) is also well supported. FreeBSD also supports some older 32-bit computers.\n\nThe FreeBSD project defines tiers to organize the architectures, and these tiers characterize the level of support provided by the project. Tier 1 are the most used, that are completely supported by the security officer, release engineering, and toolchain maintenance staff. Tier 2 includes developmental architectures which are supported on a best-effort basis, while tier 3 includes experimental architectures that have lower levels of support. The latest great news in the portability area includes the promotion of FreeBSD/arm64 to Tier-1 for FreeBSD 13.0.\n\nLet’s Talk Filesystems\n\nFile systems control the way data is stored and retrieved, and they are considered a central component of the operating system. FreeBSD includes two native file systems, the Unix File System (UFS) and the Z File System (ZFS). While UFS has been around for much longer, ZFS is very mature, as it was integrated as a native file system starting with FreeBSD 7.0 in 2008.\n\nIn addition to its native file systems, FreeBSD also supports several other file systems, thus ensuring that data from other operating systems can be accessed locally; for example, data stored on locally attached USB storage devices, flash drives, and hard disks. This includes support for the Linux Extended FileSystem (EXTFS) family of filesystems.\n\nThe Unix File System (UFS) descends directly from the file system shipped with original BSD UNIX. UFS is designed to handle the most common situations effectively while reliably supporting unusual configurations. The Unix File System has been modernized to UFS version 2, or UFS2 in FreeBSD 5.0.\n\nUFS is best suited for smaller systems especially those with only a single disk, or applications that cannot handle the overhead of ZFS. It is often preferred for virtual machines.\n\nThe Z File System, or ZFS, is an advanced file system that was designed to overcome major problems found in previous designs. ZFS is more than a simple filesystem. It gracefully combines the properties of a volume manager and a file system, providing many unique advantages. ZFS can seamlessly combine 100s of disks to create a single pool of space, from which a near infinite number of filesystems can be created. All of ZFS’ individual pieces fit well together and are well understood. ZFS is the file system of the future. It is designed in such a manner that new algorithms and techniques can be added to newer versions without losing backward compatibility.\n\nZFS is able to handle everything from the permissions on a file, to tracking which blocks from which storage provider contain the information. Basically, you tell ZFS which hardware you have and how you want it configured, and ZFS takes it from there.\n\nZFS is truly the best file system for data security, scalability, and flexibility. It can meet your needs, whatever they might be, it allows you, without too much complexity, to partition your data according to your needs and workloads. You can easily add additional storage in the additional disks. The data is stored with up to triple redundancy in order to ensure that individual component failures will not interrupt your workload or damage your data.\n\nConclusion – Don’t Doubt it, Just Go For It\n\nFreeBSD offers many unique features. It is highly customizable, so that you can customize it as per whatever your requirements are. Between the advantages of the software platform and the OS, and the licensing coming with it, you can build strong, resilient, licensing-friendly products and environments.\n\nFreeBSD brings forward advanced networking, performance, security and compatibility features that are still missing in many other operating systems. Its focus on performance, networking, and storage, its ease of system administration, and its overall integration are features that make it the right choice for many applications."
    }
}