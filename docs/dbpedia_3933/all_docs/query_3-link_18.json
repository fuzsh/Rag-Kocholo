{
    "id": "dbpedia_3933_3",
    "rank": 18,
    "data": {
        "url": "https://www.ateamsystems.com/tech-blog/intro-to-freebsd-learn-what-it-is-and-how-it-works/",
        "read_more_link": "",
        "language": "en",
        "title": "Intro to FreeBSD: Learn What it is and How it Works",
        "top_image": "https://www.ateamsystems.com/wp-content/uploads/fbrfg/favicon-32x32.png",
        "meta_img": "https://www.ateamsystems.com/wp-content/uploads/fbrfg/favicon-32x32.png",
        "images": [
            "https://www.ateamsystems.com/wp-content/themes/ateam2016/images/ateam-logo.png",
            "https://secure.gravatar.com/avatar/8a1b35bb3ce198ebd571875efe9719dd?s=1024&d=mm&r=g 2x",
            "https://secure.gravatar.com/avatar/8a1b35bb3ce198ebd571875efe9719dd?s=512&d=mm&r=g",
            "https://www.ateamsystems.com/wp-content/uploads/2016/11/footer-icon-chat.png",
            "https://www.ateamsystems.com/wp-content/uploads/2016/11/footer-icon-chat.png",
            "https://www.ateamsystems.com/wp-content/themes/ateam2016/images/ateam-logo-compact.png",
            "https://www.ateamsystems.com/wp-content/themes/ateam2016/images/ateam-logo-compact.png",
            "https://api.certopus.com/v1/obi/generate_baked_badge/9987fe62c05f43a993fec613acf16357",
            "https://api.certopus.com/v1/obi/generate_baked_badge/9987fe62c05f43a993fec613acf16357",
            "https://www.ateamsystems.com/wp-content/themes/ateam2016/images/ateam-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "A-Team Systems"
        ],
        "publish_date": "2021-08-17T23:17:31+00:00",
        "summary": "",
        "meta_description": "New to FreeBSD? Check out this intro to FreeBSD to learn the fundamentals, history, and more from our open-source experts!",
        "meta_lang": "en",
        "meta_favicon": "/wp-content/uploads/fbrfg/apple-touch-icon.png",
        "meta_site_name": "A-Team Systems",
        "canonical_link": "https://www.ateamsystems.com/tech-blog/intro-to-freebsd-learn-what-it-is-and-how-it-works/",
        "text": "If you’re new to FreeBSD, you probably have a lot of questions. It’s a sophisticated system that takes time and practice to get familiar with.\n\nFortunately, the experts at A-Team Systems have decades of experience with open-source systems, including FreeBSD! We put together this all-encompassing guide to help you learn the fundamentals of this dynamic platform and how it works.\n\nOur experts love working with FreeBSD and we’re happy to help if you have any questions, so please don’t hesitate to reach out. We also offer support and systems administration for FreeBSD. If your organization needs support, set up a consultation today and we’ll help you get back on track.\n\nFreeBSD History\n\nFreeBSD was first released in December of 1993. But the origins of the system go back even further. In 1974, AT&T’s Bell Labs gave a Unix source license to the University of California, Berkeley. They focused on developing the system’s storage and file system. This new iteration became known as “Berkeley Unix” and eventually “Berkeley Software Distribution” or BSD.\n\nTheir first public version was entitled “Networking Release 1,” but the developers ran into legal problems due to the fact that some of the code was still left over from AT&T.\n\nJordan Hubbard, one of the original coordinators of the project states:\n\n“Around this time, some rather unexpected storm clouds formed on the horizon as Novell and U.C. Berkeley settled their long-running lawsuit over the legal status of the Berkeley Net/2 tape. A condition of that settlement was U.C. Berkeley’s concession that large parts of Net/2 were “encumbered” code and the property of Novell, who had in turn acquired it from AT&T some time previously. What Berkeley got in return was Novell’s “blessing” that the 4.4BSD-Lite release, when it was finally released, would be declared unencumbered and all existing Net/2 users would be strongly encouraged to switch. This included FreeBSD, and the project was given until the end of July 1994 to stop shipping its own Net/2 based product. Under the terms of that agreement, the project was allowed one last release before the deadline, that release being FreeBSD 1.1.5.1.”\n\nAfterwards, FreeBSD was able to launch unencumbered by their legal limitations. The system has since enjoyed a large, dedicated community that has continued to develop it for over 30 years with regular updates still being released. The latest version, FreeBSD 13.0, was released in April of 2021.\n\nAdvantages\n\nAs with any system, FreeBSD has its advantages and disadvantages.\n\nFreeBSD is extremely mature and stable. Therefore, you can count on it performing the way you expect it to, which can’t be said for all open-source systems.\n\nIts focus is on security, and it shows. This is one of the safest systems you can employ.\n\nIt’s free. What more needs to be said? You don’t have to spend a penny to actually use FreeBSD.\n\nIt’s licensed under the BSD license which allows you to freely use, modify, redistribute and even sell the result without having to make your work public. This is in contrast to the GPL (which covers Linux), which requires any changes as part of a product to be passed back up to the project and made public. For this reason FreeBSD is used by many large companies for the basis of their products including Apple, Citrix, Juniper, Netgate, iX Systems (TrueNAS), and more.\n\nIt has strong documentation.\n\nIt’s versatile. Chances are good that it’ll work for almost any application purposes.\n\nSolid performance.\n\nIt’s open-source. So the customization capabilities are endless.\n\nDynamic kernel customization. FreeBSD features a monolithic kernel, but you also have the option to create custom kernels that will function however you want them to.\n\nIt is a tier 1 operating system for ZFS support, and has been for over a decade.\n\nDisadvantages\n\nThere are a few disadvantages to FreeBSD, however, you can work around them.\n\nThe community support for FreeBSD is limited. There is a lively community around this open-source software, but it hardly compares to the Linux support community.\n\nThere is a limited amount of third-party software for FreeBSD.\n\nLastly, there is a learning-curve. FreeBSD takes a lot of time and practice to fully understand.\n\nFeatures of FreeBSD\n\nFreeBSD features dozens of features to make your life easier. Overall, the focus is on performance, networking, and storage, but it also has dynamic functionality for system administration and documentation.\n\nHere are some of their most notable features. Keep in mind that different versions will offer different functionality.\n\nVirtualization: bhyve\n\nbhyve (pronounced “beehive”) is a type-2 hypervisor that was originally created for FreeBSD (version 9.0+). It supports virtualization for most Intel and AMD processors that report the “POPCNT” (POPulation Count) processor feature in dmesg(8).\n\nIf your organization needs assistance with bhyve, I recommend taking a look at our bhyve support options. We’ve been working with bhyve for many years and can get you back on track quickly. The time you’ll save is well worth it.\n\nKernels\n\nFreeBSD kernels are one of the core elements of the system. It manages security controls, memory, disk access, communication, and more. Functionality is stored in modules, which can be added and removed at will. Therefore, custom kernels can be applied to fit your needs. The default scheduler for FreeBSD is ULE, since version 7.1. This gives it greater utility with SMP and SMT environments and allows it to handle greater loads.\n\nJails\n\nThis is one of the key features that enhances the safety of a FreeBSD system. Administrators are able to run numerous isolated servers with different operating systems through jails. Each utilizes the same kernel, but they have an individual IP address and hostname. They build upon the concept of chroot(2), which allows them to create a safe external environment by changing the root directory of a set of processes. Because of this there is no memory, CPU or I/O overhead like there is with full virtualization. The performance of a process in a jail is identical to that of a normal process.\n\nJails feature:\n\nDirectory subtrees\n\nThis is where the process begins. Processes cannot escape this subtree after entry.\n\nHostnames\n\nRequired for a jail to function\n\nSpecific IP Addresses\n\nEach jail needs an IP address and they’re traditionally alias addresses.\n\nCommands\n\nThe path name for an executable.\n\nEncryption\n\nFreeBSD utilizes GBDE and Geli for encrypting data at the disk level.\n\nGBDE (or GEOM Based Disk Encryption) is a block device-layer disk encryption system created by the company that would later become McAfee. It randomly generates a key every time a sector is written in order to thwart watermarking attacks.\n\nGeli is a block device-layer disk encryption system. Geli was originally designed to thwart actual physical theft of hardware. It has evolved over the years and now it offers optional data authentication and integrity verification. Unlike GBDE, geli supports the crypto framework in FreeBSD.\n\nZ File System\n\nThe Z File System (ZFS) is a far more dynamic file system than other systems. Instead of just being a file system, it also includes a volume manager. Because of this, ZFS allows users to to create numerous file systems that all share the same pool of available storage. This system ensures that physical errors, misprocessing, or data corruption won’t result in data loss.Therefore, it’s ideal for long-term data storage as well as high performance.\n\nOperating System Compatibility\n\nFreeBSD utilizes compatibility layers. This ensures that most Linux software also works with FreeBSD. This compatibility also extends to Windows with WINE, which allows users to utilize Windows applications with FreeBSD.\n\nPorting\n\nUsers and administrators can easily install applications through the FreeBSD Ports and Packages Collection.\n\nShells\n\nShells take commands from the input channel and execute them. This extends to file management, file globing, command line editing, command macros, and environment variables. By default, FreeBSD uses the tcsh and sh shell for root users. Additional shells are available from the FreeBSD Ports Collection.\n\nNetworking\n\nThe 4.2BSD implementation of TCP/IP served as the foundation for FreeBSD’s TCP/IP stack. It also supports the IPv6 and IPSec stacks from the Kame project. It also functions with SCTP and wireless networking.\n\nCommunity Support\n\nFreeBSD has an extensive community that consistently works to provide support and updates for the platform. They offer numerous mailing lists, forums, and community news websites. You can also find wikis and blogs dedicated to troubleshooting and support. Our own blog features support topics and breaking news regarding FreeBSD.\n\nGovernance Structure – Core Team\n\nGiven that FreeBSD is a free open-source project, they don’t have a board of directors like you’d expect with a corporation. Instead, it’s run by ~500 committers around the globe. This group is allowed access to the master source code repositories in order to debug, develop, or otherwise improve the system. Very few of these developers receive financial compensation for their time; the vast majority are volunteers.\n\nThe members of this team are generally community contributors before they’re asked to join. After submitting numerous high-quality patches to the project, they may be asked to become a committer. Thousands of developers across the globe function as contributors.\n\nThere are also 9 members of a Core Team who are tasked with steering the project for the future. They also create rules and approve new committers. This is the closest thing to a board of directors that FreeBSD has and they’re elected by committers. In order to vote for the Core Team, a committer must have made at least one change to one of the project’s repositories in the past year. The 9 Core Team members serve for 2 year terms after being elected.\n\nThe current Core Team is: Sean Chittenden, Baptiste Daroussin, Kyle Evans, Mark Johnston, Scott Long, Warner Losh, Ed Maste, George V. Neville-Neil, and Hiroki Sato. They were elected in 2020 and will be up for re-election in 2022.\n\nWhat is FreeBSD used for?\n\nFreeBSD is a stable and versatile operating system. As a result, there is no restriction on how it can be used.\n\nFreeBSD is a multiplatform operating system that emphasizes functionality, performance, and reliability. It is based on BSD, a UNIX® version created at the University of California, Berkeley.\n\nIt is commonly used as a web server, email server, DNS server, NAS (disk server), and other computer room functions. FreeBSD’s major benefit was its high stability and ability to run for years without restarting (with certified hardware).\n\nIs FreeBSD an OS?\n\nYes. FreeBSD is a Unix-like operating system which was based on Research Unix. In 1993, the first version of FreeBSD was published. FreeBSD was the most popular open-source BSD operating system in 2005, accounting for more than three-quarters of all BSD systems installed with a simple, permissive license.\n\nIs FreeBSD dead?\n\nNo. FreeBSD still has a large user-base and releases updates regularly. It is a remarkably stable system overall and tends to have a slight edge over Linux when it comes to security.\n\nThat being said, some companies are moving away from FreeBSD because it can be slow to review updates and support for new hardware. For example, the latest version of Telegram on FreeBSD is nine releases behind the Linux version. There is also no scientific proof that FreeBSD performs any better than Linux.\n\nCompanies that use FreeBSD\n\nThe companies using FreeBSD are most often found in the United States and in the Computer Software industry. FreeBSD is most commonly used by businesses with 10-50 people and a revenue of $1 million to $10 million.\n\nHere is a sample list of companies using FreeBSD:\n\nNetflix\n\nApache\n\nMcAfee\n\nApple\n\nCisco\n\nDell/Compellent\n\nSony\n\nThe Weather Channel\n\nVoxer\n\nEMC/Isilon\n\nIntel/McAfee\n\niXsystems\n\nJuniper\n\nMicrosoft Azure\n\nCan FreeBSD run Windows Programs?\n\nThe Microsoft “Windows” ABI is not natively supported by FreeBSD. However, you may run Microsoft either in a virtual machine, which emulates the complete Microsoft system. You can also use an emulator, like WINE, which runs Windows programs on Linux, BSD, Solaris, and Mac OS X without an actual Microsoft license.\n\nThe VM method is generally superior, although it needs a Microsoft license and is slightly slower than operating on a native Microsoft computer. WINE has a number of compatibility concerns, yet it may be a superior option if it works for your specific software.\n\nConclusion: Intro to FreeBSD\n\nWe hope that this has given you some insight into FreeBSD, its history, how it works, and more. Although it has its downsides, its security and performance capabilities make it an excellent open-source option for any organization. It’s a dynamic system that we expect to be around for years to come.\n\nIf you still have questions, contact us. We’ll get back with you as soon as we can."
    }
}