{
    "id": "dbpedia_3933_3",
    "rank": 91,
    "data": {
        "url": "https://www.osnews.com/topic/freebsd/",
        "read_more_link": "",
        "language": "en",
        "title": "FreeBSD – OSnews",
        "top_image": "https://www.osnews.com/icons/favicon-32x32.png",
        "meta_img": "https://www.osnews.com/icons/favicon-32x32.png",
        "images": [
            "https://www.osnews.com/wp-content/uploads/2022/02/osnews-ukraine.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Thom Holwerda"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/icons/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "FreeBSD Archive\n\nfreebsd-rustdate: updating FreeBSD, but a lot faster\n\nThis is freebsd-rustdate, a reimplementation of freebsd-update. It’s primarily written because of how slow freebsd-update is, and is written in rust because I felt like it. In usage, it’s expected to be similar, but not identical to freebsd-update. There are probably a number of minor edge-case differences I don’t even know about, but there are a number of larger ones that are intentional too. ↫ Matthew Fuller I love it when someone takes on a very well-established tool that’s used by countless people who probably barely think about how it could be improved. In this case, the performance improvements are nothing short of extraordinary, but of course, its author Matthew Fuller rightfully points out that you really shouldn’t be using this on any production system. It has not received even one percent of the kind of testing and eyeballs that the regular update tool in FreeBSD has received, so there may be edge cases or bugs. Improving the speed of the update process is always welcome. If it’s slow and time-consuming, people might postpone the updates because they’re getting in the way of what they want to do at the moment. Sure, I doubt the average FreeBSD user is the kind of person to postpone updates and run an insecure system in the meantime, but it might still draw a few people across the line to quickly get them done before continuing their work. This new rust-based FreeBSD update tool is definitely not going to be replacing the current one any time soon, nor is it even a part of the FreeBSD project in the first place, so there’s no need to worry about any potential breakage to your FreeBSD system because they’re replacing a battle-tested tool with a new one. All this does for now is highlight that there’s gains to be made here, and that’s a goal worth pursuing.\n\nAutomating ZFS snapshots for peace of mind\n\nOne feature I couldn’t live without anymore is snapshots. As system administrators, we often find ourselves in situations where we’ve made a mistake, need to revert to a previous state, or need access to a log that has been rotated and disappeared. Since I started using ZFS, all of this has become incredibly simple, and I feel much more at ease when making any modifications. However, since I don’t always remember to create a manual snapshot before starting to work, I use an automatic snapshot system. For this type of snapshot, I use the excellent zfs-autobackup tool – which I also use for backups. The goal is to have a single, flexible, and configurable tool without having to learn different syntaxes. ↫ Stefano Marinelli I’m always a little sad about the fact that the kind of advanced features modern file systems like ZFS, btrfs, and others offer are so inaccessible to mere desktop users like myself. While I understand they’re primarily designed for server use, they’re still making their way to desktops – my Fedora installations all default to btrfs – and I’d love to be able to make use of their advanced features straight from within KDE (or GNOME or whatever it is you use). Of course, that’s neither here or there for the article at hand, which will be quite useful for people administering FreeBSD and/or Linux systems, and who would like to get the most out of ZFS by automating some of its functionality.\n\nFreeBSD and AMD collaborating on FreeBSD IOMMU driver\n\nThe FreeBSD project has published its latest quarterly status report, and there’s a lot in there. The most prominent effort listed in the report is a close collaboration between FreeBSD and AMD on an IOMMU driver for AMD’s server processors. Work continued on a joint project between Advanced Micro Devices (AMD) and The FreeBSD Foundation to develop a complete FreeBSD AMD IOMMU driver. This work will allow FreeBSD to fully support greater than 256 cores with features such as CPU mapping and will also include bhyve integration. Konstantin Belousov has been working on various parts of the project, including driver attachment, register definitions, an ACPI table parser, and utility functions. Two key components that need to be completed are context handling, which is mostly a generalization of Intel DMAR code, and page table creation. After this, the AMD driver’s enable bit can be turned on for testing. ↫ FreeBSD status report page It’s great to see AMD and FreeBSD working together like this, and it highlights that FreeBSD is a serious player in the server space. Other things mentioned in the status report are continued work in improving the audio experience, wireless networking, RISC-V support, OpenZFS, and more. Through the work of Tom Jones, FreeBSD is also getting the Vector Packet Processor, a userspace networking stack that delivers fast packet processing suitable for software-defined networking and network function virtualization applications. Of course, this is just a selection, and there’s way more listed in the report. I would also like to highlight the ongoing, neverending work of improving the experience of using KDE on FreeBSD. The FreeBSD KDE team notes that due to the massive release of KDE 6, and the associated flurry of follow-up releases, requiring a lot of work and testing, KDE on FreeBSD still hasn’t fully caught up with the latest releases. KDE Frameworks is currently at 6.3.0 (6.5.0 is current), KDE Plasma Desktop is currently 6.0.3 (6.1.4 is current), and KDE Gear 6 hasn’t been ported at all yet. In other words, while progress is being made, it’s clear the team could use a hand, too.\n\nInstalling FreeBSD with OpenZFS via the Linux rescue system\n\nHetzner no longer offers a FreeBSD rescue system but it is possible to install and manage FreeBSD with OpenZFS from the Linux rescue system on a dedicated server with UEFI boot. The installation is done on a mirrored OpenZFS pool consisting of two drives. ↫ Martin Matuska Not much to add here – Hetzner is a popular hosting and server provider, and if you want to use FreeBSD on their machines, here’s how.\n\nFreeBSD as a daily driver\n\nNot too long ago I linked to a blog post by long-time OSNews reader (and silver Patreon) and friend of mine Morgan, about how to set up OpenBSD as a workstation operating system – and in fact, I personally used that guide in my own OpenBSD journey. Well, Morgan’s back with another, similar article, this time covering FreeBSD. After going through the basic steps needed to make FreeBSD a bit more amenable to desktop use, Morgan notes about performance: Now let’s compare FreeBSD. Well, quite frankly, there is no comparison! FreeBSD just feels snappier and more responsive on the desktop; at the same 170Hz refresh it actually feels like 170Hz. Void Linux always felt fast enough and I thought it had no lag at all at that refresh rate, but comparing them side by side (FreeBSD installed on the NVMe drive, Void running from a USB 4 SSD with similar performance), FreeBSD is smooth as glass and I started noticing just the slightest lag/stutter on Void. The same holds true for Firefox; I use smooth scrolling and on FreeBSD it really is perfectly smooth. Similarly, Youtube performance is unreal, with no dropped frames at any resolution all the way up to 4Kp60, and the videos look so much smoother! ↫ Morgan/kaidenshi This is especially relevant for me personally, since the prime reason I switched my workstation back to Fedora KDE was OpenBSD’s performance issues. While those performance issues were entirely expected and the result of the operating system’s focus on security and hardening, it did mean it’s just not suitable for me as a workstation operating system, even if I like the internals and find it a joy to use, even under the hood. If FreeBSD delivers more solid desktop and workstation performance, it might be time I set up a FreeBSD KDE installation and see if it can handle my workstation’s 270Hz 4K display. As I keep reiterating – the BSD world has a lot to offer those wishing to run a UNIX-like workstation operating system, and it’s articles like these that help people get started. A lot of the steps taken may seem elementary to many of us, but for people coming from Linux or even Windows, they may be unfamiliar and daunting, so having it all laid out in a straightforward manner is quite helpful.\n\nFreeBSD as a platform for your future technology\n\nChoosing an operating system for new technology can be crucial for the success of any project. Years down the road, this decision will continue to inform the speed and efficiency of development. But should you build the infrastructure yourself or rely on a proven system? When faced with this decision, many companies have chosen, and continue to choose, FreeBSD. Few operating systems offer the immediate high performance and security of FreeBSD, areas where new technologies typically struggle. Having a stable and secure development platform reduces upfront costs and development time. The combination of stability, security, and high performance has led to the adoption of FreeBSD in a wide range of applications and industries. This is true for new startups and larger established companies such as Sony, Netflix, and Nintendo. FreeBSD continues to be a dependable ecosystem and an industry-leading platform. ↫ FreeBSD Foundation A FreeBSD marketing document highlighting FreeBSD’s strengths is, of course, hardly a surprise, but considering it’s fighting what you could generously call an uphill battle against the dominance of Linux, it’s still interesting to see what, exactly, FreeBSD highlights as its strengths. It should come as no surprise that its licensing model – the simple BSD license – is mentioned first and foremost, since it’s a less cumbersome license to deal with than something like the GPL. It’s philosophical debate we won’t be concluding any time soon, but the point still stands. FreeBSD also highlights that it’s apparently quite easy to upstream changes to FreeBSD, making sure that changes benefit everyone who uses FreeBSD. While I can’t vouch for this, it does seem reasonable to assume that it’s easier to deal with the integrated, one-stop-shop that is FreeBSD, compared to the hodge-podge of hundreds and thousands of groups whose software all together make up a Linux system. Like I said, this is a marketing document so do keep that in mind, but I still found it interesting.\n\nIntroduction to NanoBSD\n\nThis document provides information about the NanoBSD tools, which can be used to create FreeBSD system images for embedded applications, suitable for use on a USB key, memory card or other mass storage media. It can be used to build specialized install images, designed for easy installation and maintenance of systems commonly called “computer appliances”. Computer appliances have their hardware and software bundled in the product, which means all applications are pre-installed. The appliance is plugged into an existing network and can begin working (almost) immediately. ↫ FreeBSD documentation Some of the primary features of NanoBSD are exactly what you’d expect out of a tool like this, such as the system being entirely read-only at runtime, so you don’t have to worry about shutdowns or data loss, and of course, the entire creation process of NanoBSD images using a simple shell script with any arbitrary set of requirements. For the rest, it remains a FreeBSD system, so ports and packages work just as you’d expect, and assuming your specific settings for the NanoBSD image didn’t remove it, anything that works in FreeBSD, works in a NanoBSD image, too. The documentation is, as is often the case in the BSD world, excellent, and very easy to follow, even for someone not at all specialised in things like this. Reading through it, I’m pretty sure even I could create a customised NanoBSD image and run it, since it very much looks like you’re just creating a custom installation script, adding just the things you need. I don’t have a use for something like this, but I’m not sure how well-known NanoBSD is, and I feel like there’s definitely some among you who would appreciate this.\n\nIt’s not unusual to port the Linux Vector Packet Processor (VPP) to FreeBSD\n\nThe Vector Packet Processor (VPP) is a framework for moving packets around at high rates. Its core concept is handling packets in groups known as “vectors,” which allows for the native use of vector processor instructions for packet classification and processing in different CPU architectures — currently amd64 and arm64. VPP can process packets at incredibly high rates and competes with many dedicated forwarding appliances. This is achieved using userspace networking that bypasses the host’s normal network stack. This article describes the porting of VPP to FreeBSD and working with the upstream VPP project to include FreeBSD as a supported target. ↫ Tom Jones It’s not unusual for me to link to something a little over my head, and this is another example of something I know y’all will like, but I don’t really understand fully.\n\nFreeBSD 14.1 released\n\nA new point release in the FreeBSD 14 series – the first one, in fact, not counting 14.0. FreeBSD 14.1 adds SIMD implementations of string and memory operations on amd64 in the C library to improve performance, improvements to the sound system, such as device hotplug support, and the latest versions of OpenZFS, clang/llvm, and OpenSSH. FreeBSD 14.0 users can just upgrade to FreeBSD 14.1, or you can do a fresh install, of course.\n\nFirst, and possibly only, look at Dell’s weird version of FreeBSD: ThinOS\n\nAbout a week ago I reported on a case study from Dell and FreeBSD, about Dell’s ThinOS thin client operating system, which basically consists of a proprietary Dell GUI running on top of, at the moment, FreeBSD 12 (they’re moving to FreeBSD 14 for the next ThinOS release). Well, this got me interested – I’ve always been fascinated by thin clients, and a Dell/Wyse FreeBSD ‘distribution’ is just wild enough to be interesting – so I went onto eBay, and bought a Dell thin client. More specifically, I bought a Dell OptiPlex 3000 Thin Client, which comes with an Intel Pentium Silver N6005, a four core CPU without hyperthreading, 16 GB of RAM, a 32GB eMMC storage chip with room for a small M.2 SSD, WiFi 6, Ethernet, USB 3.0, 2.0, and C ports, Bluetooth, and so on. A low-power, but still quite capable little computer that I snagged for a mere €130, which is a steal compared to the full unit price; my configuration is sold new for like €700-800. Of course, these things are sold in batches of hundreds or maybe even thousands of units, and in such volumes corporate clients get massive discounts. Still, it’s a nice deal. My model came installed with Ubuntu 20.04 LTS, which I was not at all interested in. I immediately downloaded the latest ThinOS version for my model, used Dell’s tool and instructions to create a bootable USB, and got to work. The installation process was quick and easy, and does indeed look like an automated FreeBSD installation, TUI and all. After the installation is completed, you get guided through a first-run experience to configure things like the keyboard, WiFi, and so on, and it looks rather fancy. Once I completed the first-run experience, I hit the roadblock I was expecting: in order to use ThinOS, you need a ThinOS Activation License. Since my device was originally sold with (I think) Ubuntu preinstalled, it doesn’t have a TAL in its UEFI, and the only way to push a TAL to a device is to use the Dell Wyse Management Suite. Sadly, the Dell WMS only runs on Windows, and to make matters far worse, only on Windows Server. And it gets even worse – even if I created a Windows Server VM just to run WMS, I need the Pro version, which isn’t free (the free Standard version cannot push TALs), and I’d need to buy a TAL. Aside from the Windows Server restriction, I was aware of these limitations and requirements, so I’m not in the least bit surprised. I was curious to see if buying a TAL was an easy experience, or if it’s entirely geared towards enterprise customers and silly hobbyists like me need not apply. Without a license, I can use the proprietary Dell user interface, but it seems I can’t connect to any possible VDI providers, and I can’t tell what other features might be gated at the moment. With some admittedly very mild poking and prodding, I also haven’t been able to discover any ways of ‘leaving’ Dell’s proprietary GUI to get to a terminal. I’ll do some more prodding over the coming days. I’m not entirely sure where to go from here when it comes to seeing just how much you can do with ThinOS, which was my original goal for this project. I have a feeling the pro version of the Dell Wyse Management Suite is going to be rather expensive – I can’t find any pricing information, which confirms my suspicions – so I think the journey ends here. Unless any OSNews readers have experience with this stuff, and can point me to some tips and tricks to perhaps acquire and install a TAL some other way, there won’t be a more in-depth look at Dell’s weird version of FreeBSD on OSNews. Which sucks, but was to be expected when it comes to enterprise software. Mind you, this does not mean the hardware is going to waste. Not only are there other purpose-built thin client operating systems to experiment with, it is also a full-fledged tiny x86 computer with completely silent passive cooling and a free M.2 slot, so the possibilities are endless.\n\nDell continues to base its ThinOS client operating system on FreeBSD\n\nSeveral Dell products use ThinOS 9, such as the OptiPlex 3000 Thin Client, the OptiPlex All-In-One, and the Latitude series laptops, such as the Latitude 3440 and 5440. ThinOS is a ready-to-deploy solution that aims to improve virtual desktops while offering a secure platform for applications and services. It provides users with a seamless and integrated experience, whether remotely or from the office. It’s a software environment that optimizes virtual workspaces. The latest version, ThinOS 9, is built on FreeBSD 12 with other 3rd-party open source components and is well-known for its robust security and stability. This aligns with the requirements of modern enterprises that demand high performance and protection in their computing solutions. ↫ Dell case study While Dell and FreeBSD call this a ‘case study’ but while I see plenty of case, I see little study – it’s mostly just a load of marketing speak. That being said, there’s still interesting news in here about the future of ThinOS. The next release of ThinOS, version 10, will make the jump from FreeBSD 12 to the current FreeBSD 14 release, drastically improving hardware support in the process, while also bringing in the various other benefits of the latest FreeBSD release. It will also improve ThinOS’ compatibility with Linux applications, a feature of FreeBSD, which is something Dell is keen to highlight. It should come as no surprise that ThinOS 10 will also improve its security features, probably also mostly coming along for the ride from FreeBSD 14. Dell also mentions that it intends to continue using FreeBSD as the base for ThinOS, which could’ve easily gone differently as part of Dell’s acquisition of Wyze, where ThinOS originally comes from. This is good news for FreeBSD, but at the same time, when I look at thin clients on Dell’s website, ThinOS is just one of the options, and every photo shows the devices running Windows 10 IoT Enterprise LTSC 2021. I genuinely wonder what the spread is between buyers opting for ThinOS, Windows, and Linux. Thin clients have always fascinated me, so perhaps I should go onto eBay, figure out which Dell thin clients are still supported by the latest ThinOS release, buy one, and set up a simple thin client environment in my home – using ThinOS, of course.\n\nFreeBSD is building a graphical installer\n\nFreeBSD is working on a graphical installer. Finally. The first hurdle to overcome when testing a new Operating System is to get it installed. What is more, the first impression new users gather from an Operating System is its installation process. The state of the art for Operating System installers nowadays definitely involves a graphical process. This is the case for mainstream systems but also for other UNIX systems comparable to FreeBSD: RedHat Enterprise Linux, Ubuntu, Debian GNU/Linux, or even Devuan GNU+Linux Regardless of the technical level of the actual user, this is how the platform will be compared in the public eye. Instead, with knowledge of the current bsdinstall(8) and bsdconfig(8) utilities, I envisioned a BSD-licensed replacement for Xdialog(1). Just like when invoking bsdconfig with the -X switch for graphical mode, it could be dropped in instead of bsddialog(1) and allow graphical installation – while sharing the infrastructure of the current installer. To avoid confusion with the current implementation of Xdialog from the x11/xdialog port, I have named its replacement gbsddialog(1). It also has to be said that Xdialog is quite obsolete (latest release in 2006) and this shows visually too. ↫ Pierre Pronchery in the FreeBSD status report I can’t believe it’s taken FreeBSD this long to both consider and build a graphical installer. Currently being enveloped in the world of OpenBSD, there’s clearly so much the BSD world has to offer to desktop users such as myself, but at the same time, there’s a lot of low-hanging fruit that the various BSDs can address to make the experience just that little bit more pleasant. They obviously don’t have to – not every project is aiming at desktop use – but it just makes onboarding so much nicer. The next step – perhaps in 2037 – would be to offer a desktop-oriented installation image, with a default desktop environment and settings optimised for desktop use. Right now, a lot of fiddling and optimisation for this use case is left to the user, and for newcomers such as myself this means a lot of reading, making sense of contradictory advice and suggestions, wading through endless, often outdated, online guides, and so on. Now, I don’t particularly mind doing this, but I’m sure it’s chasing people away who could end up making meaningful contributions. Meanwhile, after trying out FreeBSD for a while a few weeks ago but it not being a good fit for me, I’m now exploring and using OpenBSD and it’s been a great experience. Although unlikely, I hope OpenBSD, too, can perhaps consider making some minor affordances to desktop users – because as I’ve learnt, OpenBSD feels right at home on a desktop, more so than I ever expected.\n\niXsystems: focusing on Linux makes more sense than FreeBSD\n\nA few weeks ago we talked about how iXsystems, the company behind TrueNAS CORE and SCALE, has all but confirmed that its FreeBSD-based CORE product will be put in maintenance mode, while the Linux-based SCALE product will get all the attention and focus from here on out. In an interview with Blocks & Files, the company gave more insight into this choice. “We had a huge chunk of our engineering staff spending time improving FreeBSD as opposed to working on features and functionalities. What’s happened now with the transition to having a Debian basis, the people I used to have 90 percent of their time working on FreeBSD, they’re working on ZFS features now … That’s what I want to see; value add for everybody versus sitting around, implementing something Linux had a years ago. And trying to maintain or backport, or just deal with something that you just didn’t get out of box on FreeBSD.” “It’s not knocking against FreeBSD. We love it. That’s our heritage. That’s our roots, I was on the CORE team elected twice. So believe me, if I felt like I could have stayed on FreeBSD for the next 20 years, I would have absolutely preferred to do that … But at some point, you gotta read the writing on the wall and say, well, all the the vendor supported-innovations are happening on the Linux side these days.” BSD aficionados don’t like this change. Moore said: “Talk is cheap and complaints are free. You know, everyone loves to complain about it. But … if people wanted to push FreeBSD forward for the last 15 years, they would have.” ↫ Chris Mellor at Blocks & Files Above all else, my personal north star is choice, especially in technology, and as such, I want iXsystems to keep focusing on FreeBSD so that not everyone is using Linux for server- and server-like workloads. The fact that TrueNAS was a FreeBSD-based product for this long was amazing, and I would definitely have preferred if it stayed that way for many, many more years to come. However, I don’t think the people of TrueNAS are saying anything wrong or outrageous here. They’ve got employees to feed, and the money is in Linux, not FreeBSD. If they spend more money, time, and resources on getting FreeBSD on par with features Linux has had for ages than on actually developing their own product – TrueNAS – then they’re fighting a losing battle. Honestly, I’m surprised it’s taken them this long to take this controversial step. All we can hope for is that the things they work on, the features they develop, will make it to FreeBSD regardless.\n\nTrueNAS CORE 13 is the end of the FreeBSD version\n\nBad news from BSD land – the oldest vendor of BSD systems is changing direction away from FreeBSD and toward Linux. NAS vendor iXsystems has been busy this year, but apart from some statements in online user communities, it hasn’t been talking about the big news. Back in 2022, we covered TrueNAS CORE 13, the new release of its FreeBSD-based turnkey OS for NAS servers, and in that article we mentioned its new product, the Debian-based TrueNAS SCALE, aimed at providing storage for Kubernetes users. Now it seems the company is betting its future on that Linux-based product, meaning the end is in sight for the FreeBSD offering. ↫ Liam Proven at The Register Very sad to read, as more monoculture is not exactly great, but at the same time, from a corporate perspective, it’s also not entirely unexpected to focus on the server operating system with by far the widest industry support. I hope the fork mentioned in the article gains some steam, because having competition in this space is crucially important.\n\nFreeBSD 13.3 released\n\nFreeBSD 13.3 has been released, and as this is a point release of the stable branch, it’s not a major shake-up or overhaul of the platform. We’ve got the usual updated versions of LLVM, clang, OpenSSH, and so on, and there’s a number of stability fixes to native and LinuxKPI-based WiFi drivers. Of course, there’s much more, so head on over to the release notes for the full details.\n\nNixBSD: unofficial NixOS fork with a FreeBSD kernel\n\nNixBSD is an attempt to make a reproducible and declarable BSD, based on NixOS. Although theoretically much of this work could be copied to build other BSDs, all work thus far has been focused on building a FreeBSD distribution. ↫ NixBSD Github page It was only a matter of time before someone would try and build this.\n\nGhostBSD 24.01.1 released\n\nThis new release is based on FreeBSD 14.0-STABLE. Update Station got a significant change to upgrade to a major FreeBSD version, allowing upgrading GhostBSD from 13.2-STABLE to 14.0-STABLE. Also, a major change to the installer is the user created is an admin, and the root user gets the same password as the admin. If the admin password is changed after the installation, the root password will not change. ↫ GhostBSD’s website GhostBSD is a user-friendly, desktop-first ‘distribution’ of FreeBSD – a project which, in my humble view, should be part of the FreeBSD project-proper. With some old-time Linux feeling a sense of disenfranchisement towards Linux due to things like Wayland and systemd, FreeBSD could serve as an excellent alternative, and an official desktop-first ISO could play a role in that. Of course, that’s not exactly core to FreeBSD’s mission, and they really shouldn’t be listening to idiots like me, but I think it’s an idea worth pondering.\n\nFreeBSD 15, 16 to end support for 32 bit platforms\n\nFreeBSD is deprecating 32-bit platforms over the next couple of major releases. We anticipate FreeBSD 15.0 will not include the armv6, i386, and powerpc platforms, and FreeBSD 16.0 will not include armv7. Support for executing 32-bit binaries on 64-bit kernels will be retained through at least the lifetime of the stable/16 branch if not longer. (There is currently no plan to remove support for 32-bit binaries on 64-bit kernels.) ↫ John Baldwin on freebsd-announce I don’t think this is too egregious of a timeline, but there’s always someone with some weird edge case that gets bit hard by deprecations like these.\n\nThe case for Rust (in the FreeBSD base system)\n\nFreeBSD is discussing adding Rust to the FreeBSD base system. In a recent thread on src-committers, we discussed the costs and benefits of including Rust code in the FreeBSD base system. To summarize, the cost is that it would double our build times. imp suggested adding an additional step after buildworld for stuff that requires an external toolchain. That would ease the build time pain. The benefit is that some tools would become easier to write, or even become possible. ↫ Warner Losh on the freebsd-hackers mailing list From everything I’ve read and what you, the readers, have told me, someone who isn’t a programmer, languages like Rust really are a big improvement over older languages, and it’s probably not a good idea for a major, important project like FreeBSD to isolate its base system from such progress. Now, I’m not at all qualified to say whether Rust, specifically, is the right choice, but a language like Rust should probably be part of the base system. A big issue is FreeBSD’s architecture support. Rust is not well-supported or even supported at all on all the various platforms FreeBSD supports, which might prove to be a road block for now. That being said, letting barely used ISAs hamper your progress too much might not be a good idea either. Rust has already become a supported language for the development of the Linux kernel."
    }
}