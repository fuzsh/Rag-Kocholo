{
    "id": "dbpedia_3933_3",
    "rank": 57,
    "data": {
        "url": "https://forum.nomadbsd.org/t/why-freebsd-fails-miserably-as-a-desktop/190",
        "read_more_link": "",
        "language": "en",
        "title": "Why FreeBSD fails miserably as a Desktop",
        "top_image": "https://forum.nomadbsd.org/uploads/default/original/1X/528f8a4965ee847bbbbf9f2b44339933113d000f.png",
        "meta_img": "https://forum.nomadbsd.org/uploads/default/original/1X/528f8a4965ee847bbbbf9f2b44339933113d000f.png",
        "images": [
            "https://forum.nomadbsd.org/images/emoji/twitter/slight_smile.png?v=12",
            "https://forum.nomadbsd.org/images/emoji/twitter/slight_smile.png?v=10"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-05-24T02:51:10+00:00",
        "summary": "",
        "meta_description": "I decided to install FreeBSD on my laptop with 2 x SSD’s one of which is a NVE 256GB. I had to purchase a USB wifi dongle the one I decided after reading approps was a WN111v2 from NetGear it works fine but will bitch ab&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://forum.nomadbsd.org/uploads/default/optimized/1X/528f8a4965ee847bbbbf9f2b44339933113d000f_2_32x32.png",
        "meta_site_name": "NomadBSD Forum",
        "canonical_link": "https://forum.nomadbsd.org/t/why-freebsd-fails-miserably-as-a-desktop/190",
        "text": "I decided to install FreeBSD on my laptop with 2 x SSD’s one of which is a NVE 256GB. I had to purchase a USB wifi dongle the one I decided after reading approps was a WN111v2 from NetGear it works fine but will bitch about something if I download something quick however the download will still resume so editing syslogd to stop dumping crap to the console fixed it.\n\nMy laptop uses a Nvidia which is nice that I don’t need to use some crappy intel driver. However the fact that I have to spend an hr building and install nvidia drivers then compiling the nvidia-xsettings port and then adding a few args to load the GLX drivers I managed to get X working. Why do I have to spend all this time setting up nvidia when it takes 5-10 mins on a Linux Distro? why do I have to even bother to compile nvidia from the ports system? The fact that the ports system has a license system should be enough to get nvidia as a base driver instead of a port. This is a perfect example as to why FreeBSD fails as a Desktop. Surely my current system works but not without a few hours of dickering around drivers, xorg config files and dickering around with ports just to get functionality that is either done so as default in Linux distros or done with little effort using a GUI program to install prop drivers. Something that isn’t an issue as I know what I am doing but for Mr average joe it is or would be hard.\n\n@cpet\n\nDon’t give up - maybe you’ll feel better looking at it from a historical perspective of cooperation among the camps - something us OG’s well remember even going back to the early-mid 70’s … This is a historical note, not an attempt to get you to change your mind.\n\n(Note: exploring history is hard sometimes, because of the threat of digging up old flames well under the bridge, and the people involved are still alive and should be treated like human beings, not ideological marketing bullet points)\n\nI just gave up, been using the Mac Mini more and more. spending hours trying to get a decent X setup on modern HW is getting harder and harder as FreeBSD lacks in support and I refuse to use Linux as I am strongly apposed to the GPL.\n\nYep, reminds me of those early-mid 70’s when the 8-bit uP systems were the only access to computers us street-level (ie non-university or corporate access) kids had to hack together with 8080’s, 6502, or 6800’s. Cassette decks and cheap TV’s. No PDP-11’s for us!\n\nBut more to the point - most of us *bsd types know that the progenitor of what we are using now stems from the 386BSD release for the 386 by Bill and Lynne Jolitz right? Without going into well-known history myself, pay attention to how it was initially described in Dr. Dobb’s Journal.\n\nGuess what compiler they used? Was it the portable-C compiler PCC, from ATT which Berkeley used for most of their BSD releases? No, it didn’t support 386. So what they used was the GNU GCC compiler which did, amongst other architectures.\n\nIn fact, a few years before in the 1989 timeframe, Berkeley even got involved in a project to HELP gnu’s GCC prove itself. Keith Bostic of Berkeley, being the major part of the massive un-encumbering rewrite already, worked with a proof-of-concept project with John Gilmore and RMS to see if the 4.3BSD Tahoe system would compile with GCC.\n\nhttps://www.gnu.org/bulletins/bull7.html\n\nMy take is that this cooperative project helped all concerned, reducing bugs in both the PCC and GCC compilers, along with system-level code for BSD, which helped polish the beloved 4.4BSD series. Wholesale adoption of GCC for Berkeley’s BSD was not adopted, but it certainly helped squash some bugs, and made life just that little bit easier for users. And I suppose commercial users of 4.4BSD as well. You don’t see this mentioned much.\n\nThe point here is that while Berkeley was supporting big-iron (heh medium minis) like PDP-11’s, VAX, and at that point hoping for the CCI machines to really take off, still relying on the PCC compiler to do so, Bill Jolitz was hammering away at a 386 port using RMS’s GCC compiler.\n\nWhich as mentioned before beget our loved Free/Net/OpenBSD.\n\nSidenote: Did you know that Steve Job’s NeXT proprietary unix machine, (which was the machine that Tim Berners-Lee essentially laid the foundation for what I’m typing on right now!) was compiled with? Gnu’s GCC!\n\nBut back to Dr Dobbs where 386BSD, our progenitor was introduced…\n\nThe original title of this publication was actually this ridiculously long one:\n\nDr. Dobb’s Journal of Tiny BASIC Calisthenics & Orthodontia\n\nGroovy baby. The importance of this however was Tiny Basic - which famously started the free-software or copyleft movement long before RMS coined it!\n\nCheck out the code source comments in 1976 stating\n\n@ copyleft\n\nAll Wrongs Reserved\n\nHere the issue of software freedom was already being played out “on the street” rather than in university or corporate environments.\n\nAnyway, rather than dig even back further into things like Community Memory, or Resource 1 where prior to microprocessors you had kids hanging out at Leopolds Records using a terminal there to talk to an obsolete SDS 940 for street-level access to computing.\n\nI guess my message is not to throw the baby out with the bathwater, when one looks at how free-software, no matter what license you prefer, should be made in a spirit of cooperation, and not let it get under your skin.\n\nFollowup conclusion and apology\n\nI apologize for the previous lengthy post and it probably doesn’t even belong here. Nobody likes a lecture. But I feel like I need to tie off a few loose ends. At least I’ll be bringing the Berkeley back into the BSD picture near the end.\n\nUnwitting participants in the free-software movement:\n\nProfessors John Kemeny and Tom Kurtz of Dartmouth. Renown for BASIC obviously, and perhaps a little less so for DTSS (Dartmouth Timesharing System)\n\nOne of my favorite videos about it:\n\nhttps://www.youtube.com/watch?v=WYPNjSoDrqw\n\nMuch to their chagrin, “street level” uP basics appeared possibly because the Dartmouth basic wasn’t protected by copyright as far as I know. Although the pair later did put out versions that were, by this time it had splintered into everything, hacked apart and fitted into things that perhaps put a bad name on BASIC. Of course HP and DEC had their own versions.\n\nI see a kind of wistfullness in John Kemeny’s eyes wanting to say more, and if I had a chance, I’d love to tell him about this unintended benefit to us all - given this trajectory path that street-level “toy computer” guys helped bring open-source computing to the masses - not just Uni’s and corporations. Ie, the “copyleft” of TinyBasics.\n\nI hold John Kemeny and and Tom Kurtz (along with the undergrads!) with the same esteem I do Ken Thompson, Dennis Ritchie, Doug McIlroy, Brian Kernighan etc.\n\nTo save space, I’ll just briefly mention my esteem for the guys at PCC (not the compiler, but the People’s Computer Company) - Dennis Allison from Stanford, Bob Albrecht and all the others too numerous to have space for here.\n\nSo here’s the hook back to Berkeley and BSD:\n\nYou know that Ken Thompson’s alma-mater is Berkeley right? And another little timesharing system being worked on by him at the time was BTS (Berkeley Timesharing System) before going off to ATT, Multics and all that follows.\n\nThe fun part for me is knowing that the same model computer, the SDS 940 that he hacked on is the same one (not physically) as the model that Resource One / Community Memory had going back in the day.\n\nAnyway, thanks for putting up with this trivia. It should probably belong elsewhere. I had to post it, but don’t know why."
    }
}