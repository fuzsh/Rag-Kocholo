{
    "id": "dbpedia_3933_3",
    "rank": 32,
    "data": {
        "url": "https://docs.freebsd.org/en/books/faq/",
        "read_more_link": "",
        "language": "en",
        "title": "Frequently Asked Questions for FreeBSD",
        "top_image": "https://docs.freebsd.org/favicon.ico",
        "meta_img": "https://docs.freebsd.org/favicon.ico",
        "images": [
            "https://docs.freebsd.org/images/FreeBSD-monochromatic.svg",
            "https://docs.freebsd.org/images/FreeBSD-colors.svg",
            "https://docs.freebsd.org/images/language.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "FAQ",
            "FreeBSD FAQ"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Frequently Asked Questions for FreeBSD",
        "meta_lang": "en",
        "meta_favicon": "https://docs.freebsd.org/favicon.ico",
        "meta_site_name": "FreeBSD Documentation Portal",
        "canonical_link": "https://docs.freebsd.org/en/books/faq/",
        "text": "FreeBSD is a versatile and open-source UNIXÂ®-like operating system known for its exceptional stability, security, and performance. Developed by a dedicated community of volunteers, itâs based on the Berkeley Software Distribution (BSD) UNIX operating system.\n\nFreeBSD offers a powerful and customizable environment suitable for a wide range of applications, from servers and embedded systems to desktops and networking equipment. Its commitment to open source principles ensures a transparent and collaborative development process, making FreeBSD a trusted choice for those seeking a reliable and highly adaptable operating system.\n\nThe name \"FreeBSD\" stems from its roots in the Berkeley Software Distribution (BSD) UNIX operating system, renowned for its contributions to the world of open-source software. The \"Free\" in FreeBSD signifies its commitment to the principles of free and open-source software, which grant users the freedom to study, modify, and distribute the code.\n\nIt is worth pointing out that the word \"free\" is being used in two ways here: one meaning \"at no cost\" and the other meaning \"do whatever you like\".\n\nIt aims to offer a versatile platform suitable for a wide range of computing needs, from servers and workstations to embedded systems and beyond. FreeBSD is developed with a strong commitment to open source principles, fostering a collaborative environment where contributions from a global community of developers help shape and refine the operating system. This dedication to quality, freedom, and reliability is what sets FreeBSD apart and drives its ongoing success as an open-source project.\n\nFreeBSD is a versatile operating system that excels in various use cases. It is particularly well-suited for server environments, where its stability and performance make it a popular choice for web hosting, databases, and networking applications. FreeBSDâs robust security features also position it as a strong candidate for firewall and security appliance deployments. Beyond servers, FreeBSD can be tailored to function in specialized environments, including embedded systems and game console devices. Its adaptability, reliability, and open-source nature make FreeBSD a compelling choice for a wide range of computing needs.\n\nFreeBSD is a community-driven open-source project with a decentralized structure. Its development and maintenance are carried out by a global community of dedicated volunteers, developers, and organizations who collaborate to enhance and expand the operating system.\n\nThe key decisions concerning the FreeBSD project, such as the overall direction of the project or who is allowed to add code to the source tree, are made by an elected Core Team of nine people.\n\nWe accept all types of contributions: documentation, code, and even art. See the article on Contributing to FreeBSD for specific advice on how to do this.\n\nThe license means you are free to modify, distribute, and even sell FreeBSD without being required to release your modifications as open source. However, there are some minimal conditions, such as retaining the original copyright notice and disclaimers when distributing FreeBSD. Overall, the BSD License provides a high degree of freedom and flexibility, making FreeBSD an attractive choice for a wide range of applications and projects.\n\nCode in our source tree which falls under the GNU General Public License (GPL) or GNU Library General Public License (LGPL) comes with slightly more strings attached though, at least on the side of enforced access rather than the usual opposite.\n\nFreeBSD is a powerful and versatile operating system that can replace or coexist with many other operating systems, depending on users and administrators specific needs. However, whether FreeBSD can replace your current operating system depends on factors such as your hardware, software requirements, and familiarity with FreeBSD.\n\nUsers migrating to FreeBSD from another UNIX-like environment will find FreeBSD to be similar. Non-UNIX users, like WindowsÂ® users, should expect to invest some additional time learning the UNIX way of doing things.\n\nYes, FreeBSD is well-suited for running popular open source software. Its compatibility with a wide range of applications and libraries makes it a favorable choice for those looking to deploy and use open source software packages. FreeBSD provides a robust and stable environment that supports various programming languages, databases, web servers, and other software commonly used in the open source community. Its ports and packages system simplifies the installation and management of such software, ensuring that users can easily access and run their favorite open source tools and applications on FreeBSD with minimal hassle.\n\nFreeBSD offers multiple methods for software installation. One of the most common methods involves using the built-in pkg(8) package manager, which simplifies the process by fetching and installing pre-built binary packages. Another approach is to compile and install software from source code using the ports(7) collection, providing a flexible and customizable way to install software.\n\nFreeBSD, NetBSD, OpenBSD and DragonFly BSD are all part of the open source BSD family, sharing common UNIX-like foundations, but each has its own distinct focus and priorities. These differences reflect the unique goals of each project, and while they share similarities, their specific strengths and emphases cater to different use cases and preferences within the BSD ecosystem.\n\nWhile both FreeBSD and Linux are UNIX-like operating systems and share many similarities, they have distinct kernels. Linux uses the Linux kernel, whereas FreeBSD uses the FreeBSD kernel, which is based on the Berkeley Software Distribution (BSD) UNIX operating system.\n\nYes, FreeBSD provides a compatibility layer known as linuxulator (linux(4)), allowing many Linux programs to function on FreeBSD. This feature facilitates the execution of a broad spectrum of Linux binaries without the necessity of a dedicated Linux environment.\n\nAdditionally, FreeBSD may also be available through various mirror sites, ensuring accessibility to users worldwide. The official website is the primary and most reliable source for obtaining the latest FreeBSD releases and updates, making it the ideal starting point for a FreeBSD journey.\n\nWhile it incorporates the latest features, improvements, and experimental changes, it may not always be as stable as the FreeBSD-STABLE or release versions.\n\nFreeBSD-CURRENT serves as a platform for developers and enthusiasts who want to contribute to the future of FreeBSD and stay on the leading edge of its development, even though it may occasionally undergo significant changes and is not recommended for production systems.\n\nThe FreeBSD-STABLE branch is a more stable development branch compared to CURRENT. It contains code that is undergoing further testing and refinement before being merged into the RELEASE branch. STABLE is a good choice for those who want to track FreeBSDâs development but prefer a more stable environment than CURRENT.\n\nThe Release Engineering Team <re@FreeBSD.org> releases a new major version of FreeBSD about every 18 months and a new minor version about every 8 months, on average. Release dates are announced well in advance, so that the people working on the system know when their projects need to be finished and tested. A testing period precedes each release, to ensure that the addition of new features does not compromise the stability of the release.\n\nFreeBSD snapshots are typically generated at regular intervals for all actively developed branches. These snapshots capture a moment in time of the FreeBSD source code and associated binary packages. The frequency of these snapshots may vary but is often done on a weekly or bi-weekly basis. These snapshots provide users with an opportunity to access the latest developments and changes in FreeBSD, helping them stay up-to-date with the projectâs progress.\n\nUsers can utilize this command to search for available packages using keywords, package names, or descriptions. This feature helps users quickly locate the software they need within the extensive FreeBSD ports and packages collection, simplifying the process of adding new applications and tools to their FreeBSD systems.\n\nThe availability of the latest packages in FreeBSD can be influenced by various factors, including the package repositoryâs update frequency and the specific version of FreeBSD being used.\n\nIt should also be added that there are two branches for the FreeBSD ports. The most updated is called latest and the most stable is called quarterly. To use the latest packages it will be necessary to configure the latest branch. Information on how to configure branches can be found in the Ports chapter of the Handbook.\n\nFreeBSD boasts a versatile range of supported architectures, making it a flexible choice for a variety of hardware environments. Its compatibility extends to architectures such as amd64, arm64, riscv and more.\n\nFreeBSD as an operating system generally supports as much physical memory (RAM) as the platform it is running on does. Keep in mind that different platforms have different limits for memory.\n\nFreeBSDâs processor support varies across different architectures. On amd64 and arm64 systems, FreeBSD can efficiently harness the power of up to 1024 processors. For powerpc-based systems, FreeBSD supports up to 256 processors, while on risc-v systems, it can effectively utilize up to 16 processors.\n\nFreeBSD provides robust support for 10 Gigabit Ethernet network cards, making it a viable choice for high-speed networking environments. The FreeBSD kernel includes drivers for a wide range of 10 Gigabit Ethernet adapters from various manufacturers, ensuring seamless integration and optimal network performance.\n\nSome notable titles include \"Absolute FreeBSD: The Complete Guide To FreeBSD\" by Michael W. Lucas, and the \"FreeBSD Mastery series\" also by Michael W. Lucas, among others. These resources offer valuable insights and knowledge to help users of all levels master FreeBSD and maximize its potential.\n\nFor those seeking professional training and support for FreeBSD, several commercial providers offer tailored services. The FreeBSD project maintains a list of companies from which support can be requested.\n\nTo delve deeper into the inner workings of FreeBSD, interested individuals can explore resources like \"The Design And Implementation Of The FreeBSD Operating System\". The FreeBSD Architecture Handbook. is another valuable resource that provides detailed information about FreeBSDâs architecture, system organization, and design principles\n\nGetting assistance within a FreeBSD system is straightforward. FreeBSD offers a wealth of built-in documentation, accessible through the man(1) command, which provides comprehensive information about various commands and system components.\n\nEach of these channels are distinct and are not connected to each other. Since their chat styles differ, try each to find one suited to your chat style.\n\nMany people need to write shell scripts which will be portable across many systems. That is why POSIXÂ® specifies the shell and utility commands in great detail. Most scripts are written in Bourne shell (sh(1)), and because several important programming interfaces are specified to use the Bourne shell to interpret commands. As the Bourne shell is so often and widely used, it is important for it to be quick to start, be deterministic in its behavior, and have a small memory footprint.\n\nThe existing implementation is our best effort at meeting as many of these requirements simultaneously as we can. To keep /bin/sh small, we have not provided many of the convenience features that other shells have.\n\nDo not panic! Restart the system, type boot -s at the Boot: prompt to enter single-user mode. At the question about the shell to use, hit Enter which will display a # prompt. Enter mount -urw / to remount the root file system read/write, then run mount -a to remount all the file systems. Run passwd root to change the root password then run exit(1) to continue booting.\n\nRestart the system using boot -s at the loader prompt to enter single-user mode. When prompted for a shell pathname, press Enter and run mount -urw / to re-mount the root file system in read/write mode. You may also need to run mount -a -t ufs to mount the file system where your favorite editor is defined. If that editor is on a network file system, either configure the network manually before mounting the network file systems, or use an editor which resides on a local file system, such as ed(1).\n\nIn order to use a full screen editor such as vi(1) or emacs(1), run export TERM=xterm so that these editors can load the correct data from the termcap(5) database.\n\nAfter performing these steps, edit /etc/rc.conf to fix the syntax error. The error message displayed immediately after the kernel boot messages should indicate the number of the line in the file which is at fault.\n\nThere are a couple of kinds of \"free memory\". The most common is the amount of memory immediately available without reclaiming memory already in use. That is the size of the free pages queue plus some other reserved pages. This amount is exported by the vm.stats.vm.v_free_count sysctl(8), shown, for instance, by top(1). Another kind of \"free memory\" is the total amount of virtual memory available to userland processes, which depends on the sum of swap space and usable memory. Other kinds of \"free memory\" descriptions are also possible, but it is relatively useless to define these, but rather it is important to make sure that the paging rate is kept low, and to avoid running out of swap space.\n\nFreeBSD will proactively move entirely idle, unused pages of main memory into swap in order to make more main memory available for active use. This heavy use of swap is balanced by using the extra free memory for caching.\n\nNote that while FreeBSD is proactive in this regard, it does not arbitrarily decide to swap pages when the system is truly idle. Thus, the system will not be all paged out after leaving it idle overnight.\n\nAny memory that programs do not actively allocate is used within the FreeBSD kernel as disk cache. The values shown by top(1) labeled as Inact and Laundry are cached data at different aging levels. This cached data means the system does not have to access a slow disk again for data it has accessed recently, thus increasing overall performance. In general, a low value shown for Free memory in top(1) is good, provided it is not very low.\n\nHe does not have one, and is just called \"the BSD daemon\". If you insist upon using a name, call him \"beastie\". Note that \"beastie\" is pronounced \"BSD\".\n\nIn summary, the image can be used in a tasteful manner, for personal use, so long as appropriate credit is given. Before using the logo commercially, contact Kirk McKusick <mckusick@FreeBSD.org> for permission. More details are available on the BSD Daemonâs home page.\n\nThe really, really short answer is that you should not. The somewhat longer answer is that just because you are capable of building a bikeshed does not mean you should stop others from building one just because you do not like the color they plan to paint it. This is a metaphor indicating that you need not argue about every little feature just because you know enough to do so. Some people have commented that the amount of noise generated by a change is inversely proportional to the complexity of the change.\n\nThe longer and complete answer is that after a very long argument about whether sleep(1) should take fractional second arguments, Poul-Henning Kamp <phk@FreeBSD.org> posted a long message entitled A bike shed (any color will do) on greener grassâ¦â.\n\nIt goes into a special data sink in the CPU where it is converted to heat which is vented through the heatsink / fan assembly. This is why CPU cooling is increasingly important; as people get used to faster processors, they become careless with their data and more and more of it ends up in /dev/null, overheating their CPUs.\n\nIf you delete /dev/null (which effectively disables the CPU data sink) your CPU may run cooler but your system will quickly become constipated with all that excess data and start to behave erratically.\n\nIf you have a fast network connection you can cool down your CPU by reading data out of /dev/random and sending it off somewhere; however you run the risk of overheating your network connection and / or angering your ISP, as most of the data will end up getting converted to heat by their equipment, but they generally have good cooling, so if you do not overdo it you should be OK."
    }
}