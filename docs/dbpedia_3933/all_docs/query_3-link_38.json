{
    "id": "dbpedia_3933_3",
    "rank": 38,
    "data": {
        "url": "https://fortran-lang.discourse.group/t/fortran-and-freebsd/6445",
        "read_more_link": "",
        "language": "en",
        "title": "Fortran and FreeBSD",
        "top_image": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "meta_img": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "images": [
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/r_cubed/48/263_2.png",
            "https://emoji.discourse-cdn.com/twitter/laughing.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/grin.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/new.png?v=12",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/c/cc25bf4150f510d76fa0ef64a6b5f62d4c9bfc7a.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/f/ffb927a263725263dbd1b8f3bc8ac1e1b0411318.jpeg",
            "https://emoji.discourse-cdn.com/twitter/slightly_smiling_face.png?v=12",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/vmagnin/48/28_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/interkosmos/48/296_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/vmagnin/48/28_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/interkosmos/48/296_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/ivanpribec/48/3290_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/interkosmos/48/296_2.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/7/7dca24ccf77fedab7bcf06cb31623b00892354bd.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/7/7dca24ccf77fedab7bcf06cb31623b00892354bd.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/r_cubed/48/263_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/interkosmos/48/296_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/r_cubed/48/263_2.png",
            "https://emoji.discourse-cdn.com/twitter/fire.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/laughing.png?v=12",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/interkosmos/48/296_2.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/5/5eb4457010c0e2325ca192335e80f8e28077fb31.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/5/5eb4457010c0e2325ca192335e80f8e28077fb31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-09-02T19:15:49+00:00",
        "summary": "",
        "meta_description": "I have used FreeBSD in a virtual machine for several years (just for testing gtk-fortran building) and I am now thinking about installing it on a true hard drive in dual boot with a Linux on one of my machines, to explor&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/optimized/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6_2_32x32.png",
        "meta_site_name": "Fortran Discourse",
        "canonical_link": "https://fortran-lang.discourse.group/t/fortran-and-freebsd/6445",
        "text": "I have used FreeBSD in a virtual machine for several years (just for testing gtk-fortran building) and I am now thinking about installing it on a true hard drive in dual boot with a Linux on one of my machines, to explore it further (and taste again a Unix system without systemd and snap, etc.).\n\nDoes someone here use a BSD system? What is your experience with Fortran and its ecosystem? (compilers, fpm, libraries…) And more generally what is your experience concerning FreeBSD (or other *BSD) as an everyday system?\n\nI recently read that 2018 paper entitled “High-Performance Computing & FreeBSD”:\n\nand of course Fortran was one of the major subjects and the last paragraphs are:\n\nHopefully, in the long-term, we can improve the Fortran situation and make FreeBSD a truly compelling HPC alternative.\n\nIt is also important to realize that improving FreeBSD for HPC will not hurt it, either as a server\n\nor workstation system. On the contrary, it will likely be a boon for these use cases.\n\nThe last time I looked into this (at least 8 years ago), if you were going to use FreeBSD on server type hardware, there wasn’t any real problem. If you wanted to run on a laptop, you could run into issues with wireless drivers, hibernate features, and graphics cards.\n\nOTOH, OpenBSD was very good with various types of hardware, as the developers “eat their own dogfood.” A base OpenBSD system was pretty easy to install; the drawback for HPC is the security features that are a crucial part of the monolithic kernel would be a performance hit for the most compute intensive applications. But for “small data” it would work just fine.\n\nNetBSD is known for its wide portability on various types of hardware, but I have not looked into it in detail. It has the smallest BSD userbase IIRC.\n\nI have been using FreeBSD for more than 15 years now, starting with FreeBSD 6.0. Contrary to popular belief, it’s quite versatile (for example, it is the foundation for the operating systems of the Nintendo Switch and the Sony Playstation; and a German vendor ships its slot machines with FreeBSD). I’m running it on desktops, laptops, servers, and embedded systems without any major issue.\n\nWhen I made my first steps with Linux, about 25 years ago, I didn’t find it very appealing. If I have to decide between the cathedral and the bazaar, I certainly choose the cathedral. Or, to describe it ex negativo:\n\nWheras FreeBSD is a complete operating system, Linux is just a kernel. You will need a Linux distribution to make any use of it. And that’s where things start to get hairy, with all the subtile differences between them and the dubious decisions of their maintainers (like, systemd).\n\nLinux is indifferent towards external packages. There is not separation between the operating system per se and the user land (see /usr/local vs. /usr vs. /opt). Some people may prefer this higgledy-piggledy, but I’d like to keep the OS and all third-party applications apart. Also, it’s trivial to install multiple versions of a package side by side on FreeBSD (like, LLVM, or GCC).\n\nI don’t understand the various package management concepts in Linux land. The most natural way to distribute software is by source (called Ports in FreeBSD). And if you maintain more than one machine, FreeBSD makes it quite easy to set-up your own package build infrastructure (called Poudriere), to distribute software with the build options you have chosen.\n\nI’ve found the documentation on FreeBSD to be of much higher quality than on Linux (especially, man pages). Maybe, because you find more grown-up people there who care to write documentation in the first place.\n\nVirtualisation on Linux is just weird for anyone who has ever seen FreeBSD Jails or Solaris Zones.\n\nLinux will never have proper ZFS support.\n\nGNUisms are the worst (they should be punishable).\n\nAt the end, it comes down to ideological questions. If you can’t give any reason to abandon Linux, you probably shouldn’t. But if you want to experience the true Unix feeling, you should give FreeBSD a try!\n\nFreeBSD also has a binary packages manager. If there are a lot of tools to install (especially if you want a desktop with LibreOffice) compiling from source could take a very long time.\n\n@interkosmos Since you have lots of experience with FreeBSD, could you describe how you selected the hardware you would use? I wanted an OS that worked on something I could pick up at a “big box” electronics store in the U.S. and could not be as selective in my hardware choices as serious BSD users are. I concluded that if one is willing to put in the time up front and make careful hardware selections, FreeBSD could be a great choice for a developer’s system. If I needed to do HPC, FreeBSD would be worth serious consideration.\n\nFirst of all, using GNU/Linux doesn’t mean you have to tolerate systemd or snap. I use GNU/Linux since… forever, and I never used a distribution with such bloatware - and never will. There are several systemd-free choices, but I would also consider distributions free of other crapware (at least for me, that’s exactly what it is) - such as elogind, and pulseaudio.\n\nNow, about FreeBSD. I use it for a few years now (real installation to disk, both 32- and 64-bit versions). Fortran-wise, there are no issues to speak of (at least for gfortran.) In fact, while developing my libraries, all I have to do to make it work on FreeBSD is to untar and rebuild, with zero changes in the code, makefiles, FORD documentation, valgrind checking, etc.\n\nAdmittedly, I had to modify my makefiles so that they install stuff at the right place (for example, shared libraries go to /usr/local/lib instead of /usr/lib or usr/lib64.) But it’s not hard to make a generic makefile that will detect the operating system running, and pick the right place for libraries, *.mod files, etc. Those are trivial changes you do once and then forget about it. In fact, pretty much all my projects were developed half-GNU/Linux, half-FreeBSD, depending on the machine I was working at the moment. It’s not uncommon for me to have a part of the code written in FreeBSD, then switch to GNU/Linux the next day, add some code, then back to FreeBSD. With very little effort done years ago, the transition is literally seamless since then. I even forget what operating system I am using while programming.\n\nIf you want the latest gfortran always installed, you will have to do tweaks, because FreeBSD is a bit conservative on updating packages (comes with gfortran 12.2 by default right now.) But that’s nothing new, many GNU/Linux distributions do the same - except the “bleeding-edge” distributions, which I wouldn’t recommend anyway. Other Fortran compilers may not work.\n\nSome pros worth mentioning:\n\nExcellent package manager. Easily the best one I’ve ever used. Debian’s “apt” is not bad at all, but FreeBSD’s “pkg” is better.\n\nThe “native” file system, ZFS, is excellent (but you can use others too.)\n\nGreat documentation out-of-the-box, and the forums are full of people willing to help (as long you follow the rules, which are more strict that the norm.)\n\nDual booting is done the easiest and most lightweight way ever. You can easily forget about bloatware such as GRUB, if you want to.\n\nCan run on ancient hardware. I have a 15+ years old netbook, which was nothing to write home about even when it was new, and it runs the latest stable FreeBSD release (I use it for programming when I’m not at home and have limited space for a proper laptop.) The same machine can’t run most GNU/Linux distributions, and soon won’t be able to run any. That’s because glibc breaks compatibility with some old hardware (since glibc 2.36.) It is very unlikely something similar will ever happen in FreeBSD.\n\nForget about systemd and elogind once and forall (sic - or should I say “concurrent” to be more up-to-date?) There ain’t such a thing in FreeBSD. Pulseaudio is installed only if you want to.\n\nMost software you would expect is there, one doas pkg install away. It is a myth FreeBSD lacks important software. It doesn’t.\n\n“Linuxisms” are frowned upon and, I dare say, for good reason.\n\nNot everything is la vie en rose though:\n\nLack of drivers… if you have the latest, expensive GPU, you 'll probably have issues. And if you have a laptop, make sure your WiFi chipset is supported (this is the most common problem,) or get ready for a WiFi dongle.\n\nBluetooth is… problematic, to say the least.\n\nBSD in general is treated as a second-class citizen. Several developers don’t even bother to mention it (but like I said that’s not true for “important” software.) That’s not a problem for me, but might be for others.\n\nTo sum up, I will completely migrate to FreeBSD (together with OpenBSD, which I also like) at some point. It’s that good. However I keep using some GNU/Linux distributions (together with BSDs) because… good luck convincing people to do the same.\n\nI’d say, if you have a spare machine, or an external SSD, or even a decent USB, give it a try with a real installation. I have seen issues caused by virtual machines, which you won’t have in real installations.\n\nThe least issue you will have is Fortran programming.\n\nMaybe it will be more encouraging if I describe the one and only change I had to make (and like I said you do that once, then forget it.) I have a generic Makefile like this:\n\nTEST_STRING = $(shell echo \"test\") ifeq ($(TEST_STRING),test) TARGET_OS = Unix ifeq ($(shell uname), Linux) # GNU/Linux settings: MAKE = make -j USR_DIR = /usr ifeq ($(shell getconf LONG_BIT), 64) SYSTEM_LIB_DIR=$(USR_DIR)/lib64 else SYSTEM_LIB_DIR=$(USR_DIR)/lib endif else ifeq ($(shell uname), FreeBSD) # FreeBSD settings: MAKE = gmake -j USR_DIR = /usr/local SYSTEM_LIB_DIR=$(USR_DIR)/lib endif SYSTEM_INC_DIR = $(USR_DIR)/include else ifeq ($(TEST_STRING), \"test\") # Stuff for... that other \"operating system\" goes here, if you need it. endif include Makefile.$(TARGET_OS)\n\nThis defines the system’s include and lib directories. For GNU/Linux it’s basically the FHS (Filesystem Hierarchy Standard) - except the system’s lib directory may differ in 64-bit. As you can see, settings for FreeBSD are even easier.\n\nThis generic Makefile loads Makefile.Unix in the end, which is the normal Makefile you would use on GNU/Linux, except include and lib directories are predefined in the generic Makefile above as $SYSTEM_INC_DIR and $SYSTEM_LIB_DIR, respectively.\n\nThe actual Makefile that does the building job is named “Makefile.Unix” because it is exactly the same for GNU/Linux and FreeBSD.\n\nIn this example, I use gmake for the actual building in FreeBSD, which is basically GNU Make. The makefiles would be slightly different if you use BSD’s make, but if you switch from one operating to another often (as I do) using gmake is more practical.\n\nAnd… that’s pretty much it. Everything in your code should be exactly the same. In other words: use a generic makefile like the one above to set directories, and that’s it. The rest is the same for both GNU/Linux and FreeBSD.\n\nI’m sure there are other ways to do the same thing, but the one I tried to describe here just works. Every time. This is why I said with very little effort done once, transition to FreeBSD programming is seamless.\n\nI have installed FreeBSD 13.2 ten days ago on an old 120 GB Sata3 hard drive on my “old” PC. Before installation, I removed all the other drives by security. Now with UEFI, if I want to go in FreeBSD, I just have to press F8 at boot to see the UEFI boot menu. So I have not yet tried to configure GRUB2.\n\nThe installation was easy using the “memstick” image. The steps are detailed in:\n\nIt was also easy to install Xorg and XFCE for the desktop. I just had to install also the driver of my video card to improve the fluidity. And XFCE depending on GTK, that library was already installed. And yes, the development files are included in each library package. Video, sound and networking are working. I have not yet tried to install my printer.\n\nDevelopment tools were easy to install:\n\n# pkg install gcc13 git cmake pkgconf vim\n\nGFortran is included in the gcc13 package and is named gfortran13. To install fpm, I had to create two symbolic links in /usr/local/bin for gcc and gfortran.\n\nI have also noticed that there is a LFortran 0.19 package available:\n\n$ pkg search fortran cfortran-4.3 Easy-to-use powerful bridge between C and FORTRAN fortran-utils-1.1 Tools for use with Fortran code, from 4.4BSD lfortran-0.19.0_2 Modern interactive Fortran compiler built on top of LLVM linux-c7-libgfortran-4.8.5_6 Runtime libraries for gfortran (Linux Centos 7.9.2009) netcdf-fortran-4.6.0 Fortran library for machine-independent, array-oriented data access\n\nWell, so far FreeBSD is very pleasant. It sticks to the configuration text files philosophy. And it looks like a very well ordered system (I discovered the page man hier). And the official documentation is really excellent!\n\nI am continuing to read the book Absolute FreeBSD (also excellent) and learn a lot of things (and some concerning also Linux).\n\nSearching in the packages comments:\n\n$ pkg search -c fortran f77flow-0.12_1 Analyze the structure of a fortran77 program py39-scikit-build-0.16.7_1 Build system generator for Python C/C++/Fortran/Cython extensions pgplot-5.2.2_30 C/FORTRAN library for drawing graphs on a variety of display devices math77-6.0_10 CalTech mathematical subprogram libraries for Fortran 77 cfortran-4.3 Easy-to-use powerful bridge between C and FORTRAN ftnchek-3.3.1 Fortran 77 semantic checking utility fox-xml-4.1.2.91_5 Fortran XML library shroud-wrapper-generator-0.12.2.20220929 Fortran and Python wrapper generator for C and C++ libraries qrupdate-1.1.2_12 Fortran library for fast updates of QR and Cholesky decomposition netcdf-fortran-4.6.0 Fortran library for machine-independent, array-oriented data access fpp-1.1_1 Fortran preprocessor for FORTRAN 77 and Fortran 90 programs SLICOT-5.8_2 Fortran subroutines library for systems and control f2c-20200916 Fortran-to-C converter and its run-time libraries p5-ExtUtils-F77-1.26_2 Helps link C programs with Fortran subroutines R-cran-inline-0.3.19_1 Inline C, C++, Fortran function calls from R lapack95-1.0_20 LAPACK95, Fortran90/95 wrapper for LAPACK cgribex-1.9.4_3 Lightweight GRIBEX in C with portable Fortran interface mpifx-1.3.1_1 Modern Fortran wrappers around MPI routines scalapackfx-1.1_1 Modern Fortran wrappers around ScaLAPACK routines lfortran-0.19.0_2 Modern interactive Fortran compiler built on top of LLVM py39-pynleq2-0.0.2_8 Python binding for NLEQ2 algorithm s fortran implementation ratfor-1985.06_15 Rational FORTRAN compiler cblas-3.11.0_1 Reference implementation of the C interface to the legacy Fortran BLAS linux-c7-libgfortran-4.8.5_6 Runtime libraries for gfortran (Linux Centos 7.9.2009) xmlf90-1.5.5_1 Suite of light-weight libraries to work with XML in Fortran toml-f-0.3.1_1 TOML parser for data serialization and deserialization in Fortran fortran-utils-1.1 Tools for use with Fortran code, from 4.4BSD opencoarrays-2.10.1 Transport layer for coarray Fortran compilers"
    }
}