{
    "id": "dbpedia_3933_3",
    "rank": 45,
    "data": {
        "url": "https://www.comptia.org/blog/freebsd-for-linux-administrators",
        "read_more_link": "",
        "language": "en",
        "title": "FreeBSD for Linux Administrators: 7+ Features to Know",
        "top_image": "https://comptiacdn.azureedge.net/webcontent/images/default-source/blogs/04350-talk-tech-to-me-blog-image.jpg?sfvrsn=c3fba236_0",
        "meta_img": "https://comptiacdn.azureedge.net/webcontent/images/default-source/blogs/04350-talk-tech-to-me-blog-image.jpg?sfvrsn=c3fba236_0",
        "images": [
            "https://comptiacdn.azureedge.net/webcontent/images/default-source/mainsitetemplateimages/comptia_logo_cmyk36b98240e2b544eabe240e93e723777e.svg?sfvrsn=da0cc6d4_2",
            "https://www.comptia.org/images/default-source/default-album/11047_emea24_mainsitenavbannerad_300x160px.png?sfvrsn=5da82a1e_0",
            "https://comptiacdn.azureedge.net/webcontent/images/default-source/blogs/04350-talk-tech-to-me-blog-image.jpg?sfvrsn=c3fba236_0",
            "https://comptiacdn.azureedge.net/webcontent/images/default-source/mainsitetemplateimages/blog-rss.png?sfvrsn=5f1dac13_2",
            "https://www.comptia.org/Frontend-Assembly/Telerik.Sitefinity.Frontend/assets/dist/img/dummy.jpg?package=MainSite",
            "https://comptiacdn.azureedge.net/webcontent/images/default-source/mainsitetemplateimages/comptia_logo_cmyk36b98240e2b544eabe240e93e723777e.svg?sfvrsn=da0cc6d4_2"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "IT skills",
            "Linux",
            ""
        ],
        "tags": null,
        "authors": [
            "Jason W. Eckert"
        ],
        "publish_date": "2020-05-29T00:00:00",
        "summary": "",
        "meta_description": "FreeBSD is another UNIX flavor that's known for speed. Learn more about FreeBSD UNIX, how you can apply Linux skills to FreeBSD.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "CompTIA",
        "canonical_link": "https://www.comptia.org/blog/freebsd-for-linux-administrators",
        "text": "If you’re a Linux administrator, chances are you’ve explored more than one Linux distribution, whether it be Ubuntu, Fedora, Arch, SuSE, CentOS or Debian. This is because 95% of all Linux concepts apply well to every Linux distribution, and the other 5% likely consists of a different package manager, default software or locations for configuration files.\n\nThe same applies to FreeBSD, which is a direct descendant of the UNIX operating system that Linux is based on. FreeBSD is often used for cloud services, such as Netflix, as well as the operating system that powers FreeNAS, one of the most common Network Attached Storage operating systems, and pfSense, a powerful open source firewall.\n\nThe good news is that FreeBSD is almost identical to Linux. Thus, if you’ve ever installed and explored another Linux distribution, then exploring FreeBSD is going be somewhat similar with a few key differences. Keep reading to learn more about FreeBSD UNIX and some things to try.\n\nHow to Install FreeBSD\n\nWhile FreeBSD has no graphical installation, the process is straightforward and similar to installing a server-based Linux distro. Just make sure you choose the local_unbound package when prompted if you want to cache DNS lookups locally, as FreeBSD doesn’t have a built-in local DNS resolver that does this.\n\nFollowing installation, the directory structure is almost identical to Linux. Of course, you’ll notice some small differences here and there (e.g., regular user home directories are located under /usr/home instead of /home).\n\nStandard UNIX commands such as ls, chmod, find, which, ps, nice, ifconfig, netstat, sockstat (the ss command in Linux) are exactly as you’d expect, but with some different options here and there that you’ll see in the man pages. And yes, reboot and poweroff are there too.\n\nWhy Should I Try FreeBSD?\n\nThe main benefit FreeBSD has over Linux is speed. You thought Linux was fast? Try FreeBSD. It has the fastest IP stack of any operating system by a long shot. Since it’s UNIX and you can provide the same services (e.g., Samba, Apache, NFS, Nginx), this means you can provide them faster and leaner.\n\nFreeBSD has also kept to its KISS (Keep It Simple Stupid) UNIX roots without compromising features, while Linux configuration gets more and more complex as time goes on.\n\nWant to start a service at boot time? You just add a line that says servicename=”YES” to a small text file (described later). This small text file stores 90% of your system configuration, including your IP settings. In short, configuring a FreeBSD system is both fun and addictive.\n\nWhile configuring FreeBSD is easy, it’s also incredibly powerful. There are granular security features and system configuration/recovery features in FreeBSD that you won’t find in other operating systems. And it has native support for ZFS. It is for all of these reasons that Netflix, FreeNAS and pfSense use FreeBSD.\n\nIn the following sections, I’ll describe some key differences and features of FreeBSD that you’ll want to know coming from a Linux sysadmin background.\n\nIf you are newer to Linux, check out these free tutorials first to get up to speed on the deep dive we’re about to take:\n\nAll About Linux and Linux+ (2019 Refresh)\n\nThe Different Faces of Open Source Software\n\nUsing Linux BASH on Windows 10\n\nConfiguring ZFS on Linux\n\nBecome a Linux Foo Master with Piping and Redirection\n\nManaging Linux Shell Scripts Using Git\n\nHow to Use Vi and Vim Text Editors in Linux\n\nLegend\n\nKey filenames and components are in red\n\nCommands and configuration parameters are in code font\n\n7+ Features of FreeBSD\n\n1. FreeBSD System Configuration\n\n/etc/rc.conf contains nearly all system configuration, including IP configuration, hostname, default GW, services (daemons) that should start at boot time, and so on. Lines within this file have parameter=value syntax and are easy to edit using a text editor, such as vi.\n\nYou can also use the sysrc -a command to show all of the configured values in /etc/rc.conf, or the sysrc parameter=value to modify or add configuration.\n\nFreeBSD stores the default parameters for configuration files in a defaults subdirectory. For example, /etc/defaults/rc.conf stores a large number of system-configured defaults that are overridden by /etc/rc.conf.\n\nNever change the entries in /etc/defaults/rc.conf.\n\nInstead, just override them by adding the same lines to /etc/rc.conf with the values you want. There’s also a /etc/rc.conf.d/ directory where software packages can add files to that set system parameters. (It’s empty on a default installation of FreeBSD).\n\n2. FreeBSD Boot Loader and Kernel Configuration\n\nBoot loader configuration is stored in /boot/loader.conf (and /boot/defaults/loader.conf) and uses the same syntax as /etc/rc.conf.\n\nTo view modules inserted into the kernel, you can use kldstat. You can also load and unload modules manually.\n\nFor example:\n\nTo make sure this module automatically loads each time you boot, add the following line to the /boot/loader.conf file:\n\n[cmd=]kldload /boot/kernel/linprocfs.ko[/cmd]\n\nThe FreeBSD kernel also has many properties and parameters that you can view and configure. Use the kenv command to view the currently configured parameters on your system or the sysctl -o -a command to view all available parameters and their default values. The sysctl command can also be used to view specific parameters.\n\nFor example:\n\nTo set a kernel parameter at boot time, add the appropriate line to the /etc/sysctl.conf file.\n\n3. FreeBSD System Initialization\n\nJust like the GRUB2 boot loader on Linux, FreeBSD has an interactive boot loader called boot0 that is much more user friendly. It displays a menu for 10 seconds by default that allows you to enter rescue mode or modify kernel values manually, among other things. If you are repairing a system, a copy of useful binary programs is stored under the /rescue/ directory and made available to boot0.\n\nOnce the kernel is loaded by boot0, the init daemon parses the large /etc/rc script to start the other daemons that you specified within /etc/rc.conf by executing the appropriate daemon scripts under the /etc/rc.d/ directory.\n\nOther scripts are also executed by init at boot time. For example, /etc/netstart configures the network according to the parameters you specified in /etc/rc.conf.\n\nAfter your system has booted, you can view the /var/run/dmesg.boot file to see the hardware detected and modules loaded by your kernel, or view the /var/log/messages file to view the daemons and components that were started by init (including any errors).\n\n4. FreeBSD Storage Configuration\n\nFreeBSD uses different device files for storage and different methods for partitioning and creating filesystems.\n\nTo see a list of the physical storage devices you have, use the following two commands:\n\ncamcontrol devlist\n\ngeom disk list\n\nSome sample device files for these storage devices include:\n\nSay, for example, you have one SATA SSD in your system that has a GPT partition table. FreeBSD will likely create three partitions on it during the installation:\n\nIf you have older storage devices that use an MBR partition table, each primary partition is called a slice in FreeBSD. These are further subdivided into up to seven device nodes using a special BSD disk label.\n\nFor example, the first slice on /dev/ada0 could be subdivided into four device nodes, with each one assigned a letter:\n\nYou can view your disk configuration using the gpart command, which can also create/manage partitions:\n\nIf you just want to see the partition labels for disks on the system, run the glabel list command instead.\n\n5. FreeBSD Filesystem Configuration\n\nFreeBSD commonly uses just two filesystems for storage:\n\nUFS: A very old filesystem that should only be used if you have legacy applications that require it\n\nZFS: A filesystem that’s also commonly configured on production Linux servers\n\nAfter creating partitions on a GPT disk (or slices and device nodes on an MBR disk), you can use the following commands to create and work with UFS filesystems:\n\nNormally, you’d use ZFS instead of UFS on a FreeBSD system because it has superior enterprise features, including corruption protection and device fault tolerance. The same zpool and zfs commands you used to configure ZFS on Linux can also be used on FreeBSD.\n\nFor example, to create a RAID-Z1 dataset called lala from the space on three different SCSI disks and put a ZFS filesystem on it, you could use the following command:\n\nzpool create lala raidz /dev/da1p1 /dev/da2p1 /dev/da3p1\n\nHere are a few more sample zpool and zfs commands:\n\nWhen you run the zfs list command on a newly installed system, you’ll see a ZFS dataset called zroot that is created by the FreeBSD installer.\n\nThis dataset contains many other datasets underneath it for different system directories, such as the following:\n\nzroot/ROOT/default is mounted to /\n\nzroot/usr is mounted to /usr\n\nzroot/usr/home is mounted to /usr/home\n\nzroot/var is mounted to /var\n\nWhat you may find odd is that zroot/ROOT/default is mounted to the root of the system. This is because FreeBSD supports different boot environments if you take ZFS snapshots of the / filesystem.\n\nBefore performing a risky configuration, take a snapshot of your system called zroot/ROOT/May2. Then, you can easily revert back to it if your risky configuration fails! You can even choose a previous boot environment at the FreeBSD boot loader menu when you boot the system.\n\nHere are some useful boot environment commands:\n\nThere is also a /etc/fstab file that mounts non-ZFS filesystems at boot, just as you’d expect on a Linux system. If you use ZFS exclusively, /etc/fstab just activates the swap partition only.\n\nAnd just as Linux has udev rules for restricting access to storage devices, you can add lines to /etc/devfs.conf or /etc/devfs.rules to do so on FreeBSD.\n\nThe only other glaring difference between Linux and FreeBSD when it comes to the filesystem is the use of filesystem attributes. On Linux systems, you could set filesystem attributes using the chattr command, and list them with the lsattr command.\n\nHowever, FreeBSD uses a different set of attributes called filesystem flags that can be set at the system or user level:\n\n6. FreeBSD Users and Groups\n\nAs on Linux systems, FreeBSD stores user configuration in /etc/passwd (readable by everyone) but converts it to a /etc/pwd.db database for fast system access.\n\nBut instead of using the /etc/shadow file like Linux does, FreeBSD stores all user and password configuration in /etc/master.passwd (readable by root only) and converts it to /etc/spwd.db for fast system access.\n\nGroups are stored in /etc/group, as you’d expect, but there is there is no sudo functionality. Instead, you must be part of the wheel (big wheel) group to use the su command to run commands as root or obtain a root shell.\n\nDefault home directory files for new users are copied from /usr/share/skel/. You can also create rules to allow or prevent user access in the /etc/login.access file, as well as define user classes for accessing system resources in the /etc/login.conf file.\n\nHere are a few common commands to create and manage users:\n\n7. FreeBSD Packages, Services and Monitoring\n\nInstalling and managing packages on FreeBSD is just as easy as using the Red Hat or Debian package managers on a Linux system. Instead of dnf or apt, use the pkg command:\n\nAfter installing a daemon package, you must also configure it to start at boot time by adding a line to the /etc/rc.conf file.\n\nFor example, after installing the apache24 package (for the Apache web server daemon), you could start it at boot time by adding the following line to /etc/rc.conf:\n\napache24_enable=”YES”\n\nYes, it’s that easy!\n\nThe configuration files for any daemons that you install are under /etc or /usr/local/etc. For example, you’ll find the httpd.conf configuration file for Apache in the /usr/local/etc/apache24/ directory on FreeBSD.\n\nYou can also manage daemons using the same service command used in Linux systems prior to Systemd:\n\nOf course, loading additional daemons will impact the performance of your system, especially as the number of clients connecting to them increases.\n\nYou can monitor the performance of your FreeBSD system using the same vmstat and top commands you’re used to in Linux (the FreeBSD top command also lists ZFS performance statistics), as well as monitor disk performance using the gstat command.\n\nSimilarly, you can use a plethora of different network commands in FreeBSD to monitor network statistics.\n\nHere are some of my favorites:\n\n8. Other Stuff to Know About FreeBSD\n\nThe previous sections outlined the main areas of FreeBSD that most Linux admins will want to know. In this final section, I’ll list some extra stuff (in no particular order).\n\nCompiling software from source is very easy in FreeBSD. You can run the portsnap auto command to download the source code for the ready-to-compile ports tree from the FreeBSD repository to the /usr/ports/ directory and then use the appropriate make commands to compile and install it on your system.\n\nIf you want to configure a firewall, there are three firewall systems to choose from in the FreeBSD handbook, but the most common one is PF from OpenBSD. Place your rules in /etc/pf.conf and use the pfctl command to control the firewall.\n\nYou can also use blacklistd to block undesired connections (or too many connections). Use blacklistctl to control blacklistd and list connection rules in /etc/blacklistd.conf.\n\nFreeBSD jails are one of the earliest examples of OS virtualization/containerization.\n\nDownload a userland (filesystem) tarball from the FreeBSD repository and extract it to a directory of your choice (e.g. /jails/container1).\n\nAdd a paragraph to the /etc/jail.conf file that configures the jail parameters (e.g., IP address).\n\nFinally, you can start and manage your jail using a wide variety of different commands, including the following:\n\nIf you start the NFSv4 file sharing daemons (installed by default) by adding the appropriate entries to /etc/rc.conf, you can add lines to /etc/exports to share out directories on your system. Or use ZFS to share datasets using NFSv4. These datasets are listed in /etc/zfs/exports.\n\nFor example, to share out the /usr/home directory using NFS, use the following command:\n\nzfs set sharenfs=on zroot/usr/home\n\nSome things on FreeBSD may remind longtime Linux or UNIX administrators of days gone by. For example, you can still start daemons on demand using inetd and entries within /etc/inetd.conf, and you can use the old LPD printing system by adding printer entries to /etc/printcap. (Please install and use CUPS instead....seriously.)\n\nFreeBSD also uses the old syslogd to log system events using the entries in /etc/syslog.conf. (It works well so why change it, right?) However, instead of logrotate, FreeBSD uses newsyslog to rotate log files according to rules in /etc/newsyslog.conf.\n\nAnd yes, if you want to use FreeBSD as a workstation, you can install X.org and GNOME. But given that Linux is leading the charge in that area, it’d be wiser to use Linux as your workstation and leverage FreeBSD as a wicked fast server."
    }
}