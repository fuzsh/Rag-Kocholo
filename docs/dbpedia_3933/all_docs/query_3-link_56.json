{
    "id": "dbpedia_3933_3",
    "rank": 56,
    "data": {
        "url": "https://sekrit.de/webdocs/freebsd/advocacy.html",
        "read_more_link": "",
        "language": "en",
        "title": "Advocacy: Why I personally prefer FreeBSD over Linux",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-12-20T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Felix Palmen felix@palmen-it.de\n\nThese are my personal reasons to prefer FreeBSD over Linux. I do not expect them to be useful to anyone, but if you read them, maybe they are somewhat interesting.\n\n0. Why I tested FreeBSD at all\n\nSo, GNU/Linux is a fine and widespread opensource Unix-like operating system with nowadays lots of support, even from commercial entities. Why would you even bother looking at alternatives?\n\nWell, for me, as for many others, the issue was systemd.\n\nNow, this is a flamebait on a similar level as stating vim is better than emacs (spoiler: it is â¦ hehe). No doubt there were issues with the classic sysv-init GNU/Linux used for a long time. And no doubt any init system based on shell scripting will always have its shortcomings.\n\nBut then, systemd looks to me like a âsolutionâ that actually makes things worse. There are lots of reasons, and I donât want to repeat all of them here. The most important ones are: It tries to do too much, and it does it in a very intrusive way.\n\nFreeBSD never used sysv-init. To this day, it uses a classic BSD-style init with mewburn-rc init scripts. This does have the inherent shortcomings of a purely shell-script based boot process, and of course there are discussions in BSD communities as well whether it should be replaced by something different. For me, it works pretty well, and we will see what the future brings.\n\nBut this was only what made me test FreeBSD. Letâs get to the actual advantages I found.\n\n1. ZFS\n\nIn case you donât know ZFS: Itâs more than a filesystem. It also includes volume management (with quick and simple snapshots and clones) and software RAID, all integrated. My personal claim is: you canât have a better opensource storage solution right now.\n\nOn FreeBSD, ZFS is an integral part of the base system. It works well with jails and for backing virtual machines with bhyve, and you can easily boot your system from ZFS. Of course, it is available for GNU/Linux as well, but it will (probably) never be integrated there for licensing issues.\n\nGNU/Linux instead tries to push btrfs, which aims to be kind of similar to ZFS. Wellâ¦ to this day, Iâd say itâs not really there.\n\nThis kind of leads to the next topic:\n\n2. The BSD license\n\nLicensing of opensource software is a controversial issue. It depends a lot on your definition of freedom.\n\nGNU/Linux uses the GPL (General Public License). This license contains a lot of restrictions, in an attempt to ensure freedom. A key component is that it requires any âderivative workâ to be GPL licensed as well. In my personal view, complicated restrictions to ensure freedom are an oxymoron. It also creates the real-life problem that often, other opensource licenses are âincompatibleâ, which is the reason why ZFS canât be integrated with GNU/Linux.\n\nThe BSD licenses (there are a few different variations) are extremely simple. In a nutshell, they allow you to do whatever you want with the code. You can even use it in a commercial product. They just require you to âgive creditâ when you use the code in your own work. IMHO, this is enough, as everyone will be informed that there is an opensource project some code was taken from. It matches my personal definition of freedom, so in the rare cases I publish opensource software myself, I use a BSD style license as well.\n\nActually, apart from the eventual GPL incompatibility issues, this is a philosophical discussion, so, back to more technical topics.\n\n3. A whole, self-contained OS\n\nFreeBSD (and any other BSD) is, in contrast to GNU/Linux, a complete, self-contained operating system. With GNU/Linux, you get individual software packages (the most essential being Linux itself as the kernel, GNU binutils, gcc and glibc as the toolchain and GNU coreutils as the most basic parts of a userland) and have to integrate them together to form a working operating systems. Distributions will do that work for you.\n\nWith FreeBSD, you get a single source tree, compile it, and have a complete operating system ready to run.\n\nSo, why is this an advantage? Stability! You can always rely on all components working together with no issues. In the GNU/Linux world, distributions are responsible for that. With FreeBSD, you get one official version that âjust worksâ. You might argue thatâs not really important, given you use a good GNU/Linux distribution. Indeed, from a userâs perspective, the fact that a self-contained OS has more âinner logicâ is nothing you will directly feel. At least, it gives you the chance to get things like security patches directly from upstream and be fine, with no time lost for a distribution that has to make sure things work nicely together again.\n\nFor me personally, another advantage is more important:\n\n4. Stable system or rolling release?\n\nWhy not both?\n\nWith FreeBSD (and any other BSD, as far as I know), you can follow stable releases for the OS itself, that go through a classic release engineering process. Still, you can get ports and/or packages of third-party software from a ârolling releaseâ repository. This gives you the best of both worlds. You can have the latest and greatest, bleeding-edge, applications on a well-tested and stable base system.\n\nI donât know of any GNU/Linux distribution following a similar scheme. If you know one, please tell me!\n\nOf course, this is made possible by:\n\n5. The ports system\n\nFreeBSD (and again, other BSDs as well) has a second and independent source tree called âportsâ. In FreeBSD, ports are organized as ârolling releaseâ, with quarterly snapshots. They are a huge collection of Makefiles (and some helping scripts) that manage building third-party software for FreeBSD. A port for a single software package automates everything, from downloading to (if desired) packaging as a binary installable package.\n\nSo, this is the base that makes FreeBSD not only an operating system but also a distribution for software running on it. There are official package repositories containing packages built using ports for any currently supported version of FreeBSD, from the latest version and also from the current quarterly snapshot. You can use that like you do with a GNU/Linux distribution and just install the binary packages you want, and itâs your choice whether you want the latest or the (maybe a bit more stable) quarterly snapshots. As ports are required to always build successfully on any supported version of FreeBSD, you can combine as you please.\n\nBut the real power of ports comes when you build them yourself. The system makes it very easy to configure things that can only be configured at build time, just set a few options. For the casual ports user, thereâs even a simple console UI for selecting these options. You can directly build and install a port to your system from the ports tree with a few simple commands. If you need more, there are tools like poudriere that allow you to easily build your own binary package repository from the ports tree, tailored to your needs.\n\nThereâs one GNU/Linux distribution I know about that has something similar: Gentoo with its âportageâ. As I never used Gentoo, I canât tell how it compares to FreeBSD ports.\n\n6. â¦ and more\n\nOf course, there are more technical things I like, for example jails (which is a kind of container or userspace virtualization and is around for much longer than e.g.Â docker) and bhyve (the relatively new native hypervisor). It doesnât make much sense to tell a lot about them I guess, and GNU/Linux has similar solutions for similar problems.\n\nBut there are still two âsoft factorsâ that are very important for me:\n\n7. Mindset and community\n\nTo some extent, FreeBSD seems to follow a âcathedralâ model (as opposed to the âbazaarâ model favoured in the GNU/Linux world). What I mean is that any development seems to be thorougly thought off. For example, with GNU/Linux, I often see that something isnât perfect, so letâs just replace it by something different. Iâll give two examples:\n\nThere once was devd for automatically creating device nodes. It had some major design flaws. As a result, it was kicked out and replaced by udev, which is now a part of systemd.\n\nLinux used an OSS-compatible interface for sound. There were some drawbacks that werenât easy to solve, so it was entirely replaced by a new interface called ALSA (Advanced Linux Sound Architecture)\n\nFreeBSD has both devd and an OSS-compatible sound interface based on /dev/dsp devices. With OSS, one problem was that the device was always an exclusive resource, preventing multiple applications to use the sound hardware in parallel. FreeBSD solved that without changing the interface.\n\nThis mindset leads to a much more stable (in terms of APIs) system and avoids âbreaking changesâ if possible. Chances are good a software once built for FreeBSD will still run without issues on the latest version.\n\nIt doesnât mean the community was âclosedâ, not at all. Build one sane port for a software you want available in FreeBSD, submit it, have it reviewed and it will be added if itâs good. Youâll be listed as a contributor very quickly. Well, try this with a major GNU/Linux distribution. Still, the review process will make sure quality standards are met.\n\nIn my experience, the FreeBSD community is very welcoming. No elitism, even âstupidâ questions are often answered nicely. But then, such questions are somewhat unlikely anyways, because of\n\n8. Documentation\n\nSeriously, FreeBSD has the best documentation I have ever seen on any opensource project.\n\nThe âonline helpâ is classic UNIX style with manpages. While GNU info might have more features, manpages are simpler, but after all, the format isnât that important, important is the content.\n\nOn FreeBSD you will find a manpage for almost every available kernel driver!\n\nBut it doesnât stop there, thereâs also a handbook (available online and installable) that guides you through almost everything you might want to do with your system. And thereâs a âporterâs handbookâ for those interested in creating their own ports with a lot of helpful chapters. And even moreâ¦\n\n9. Why not?\n\nPlease donât blame me if you give FreeBSD a try and you arenât satisfied. Thereâs never a âone size fits allâ and here Iâll try to list a few reasons why you might not like FreeBSD:"
    }
}