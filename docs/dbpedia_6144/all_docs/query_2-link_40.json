{
    "id": "dbpedia_6144_2",
    "rank": 40,
    "data": {
        "url": "https://www.darkreading.com/cloud-security/mitigating-the-security-risks-of-cloud-native-applications",
        "read_more_link": "",
        "language": "en",
        "title": "Mitigating the Security Risks of Cloud",
        "top_image": "https://www.darkreading.com/build/_assets/darkreading-DSJITCUD.ico",
        "meta_img": "https://www.darkreading.com/build/_assets/darkreading-DSJITCUD.ico",
        "images": [
            "https://www.darkreading.com/build/_assets/informaLogoWhite-RZAE7EJI.png",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blte9ead971f13c662e/65437029846d7c040a6e588d/Logo_-_Dark_Reading.svg?width=476&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blt6de8ac8875c71785/64f0c9b9e68ad373215aaf52/Dror-Davidoff.png?width=100&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/bltc94608acf452fd67/655cf371ab171e040a838b2a/329050_DR23_Graphics_Website_V5_Default_Image_v1.png?width=1280&auto=webp&quality=95&format=jpg&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blt6de8ac8875c71785/64f0c9b9e68ad373215aaf52/Dror-Davidoff.png?width=400&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/bltb97923617d85c248/66be608a6b78ba7dc61947e6/cloud_TippaPatt_shutterstock.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blt6368719b2a11bfbf/66be4fd4873703939ab3c72a/solarwinds1800_SOPA_Images_Limited_alamy.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blt5f435ad2bd1455e4/66b67e858365acc482f6d26e/TippaPatt-AI-code-shutterstock.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blt6aed714e279eeb34/6542104467527c040a9b2014/Logo_-_Dark_Reading.svg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt6d90778a997de1cd/blte88e1a0b459f2cef/6500460020e2ed10ea731cb1/InformaTechBTYB_240x60.webp?width=700&auto=webp&quality=80&disable=upscale"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dror Davidoff"
        ],
        "publish_date": "2019-02-05T16:10:00+00:00",
        "summary": "",
        "meta_description": "While containers can create more secure application development environments, they also introduce new security challenges that affect security and compliance.",
        "meta_lang": "en",
        "meta_favicon": "/build/_assets/darkreading-DSJITCUD.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.darkreading.com/cloud-security/mitigating-the-security-risks-of-cloud-native-applications",
        "text": "Containers represent the most significant computing advancements for enterprise IT since VMware introduced its first virtualization product, Workstation 1.0, in 1999. They enable organizations to build, ship, and run applications faster than ever, fueling the rise of the DevOps movement. It's important for CISOs to realize that while containers can create more secure application development environments, they also introduce new security challenges that impact security and compliance when rolling them out in production.\n\nWhen talking to our customers, many cite a common challenge: how fluid and dynamic the landscape has become. Three years ago, container technologies were almost exclusively used in development, and in the move to production the live systems running in the data center were refactored to address operational requirements. In this window, the security team had plenty of time to evaluate risks and provide late-stage guidance to ensure compliance. At the time, Docker was by far the dominant technology in use.\n\nFast forward to today, when enterprises are implementing multiple technologies like Kubernetes for orchestration and alternate technologies such as serverless functions from all of the big cloud vendors, then deploying them \"continuously\" into production. The window for the security team to properly review the application and its infrastructure has become much shorter, if it still exists at all.\n\nSecurity Issues\n\nTraditional security tools cannot handle the velocity, scale, and dynamic networking capabilities of containers. Taking this a step further, serverless functions prioritize simplicity and agility by abstracting infrastructure concerns to provide a simple execution environment for applications and microservices. Attackers may leverage a vulnerability in base images used for containers, outsourced libraries or in serverless function code; or take advantage of vulnerabilities inside the cloud infrastructure's permissions settings to reach services that contain sensitive information.\n\nThe reliance on open source applications or code snippets creates another security vulnerability. No one's writing new code from scratch; everyone is grabbing components from GitHub, Docker Hub, and other open source repositories, leveraging other code written earlier for other projects inside the company. The people writing the code may not be as familiar with what they're starting with, nor with any vulnerabilities that may be present (or show up later after they embedded the borrowed code). They also use general-purpose apps that encompass many more capabilities and privileges than their specific applications actually require — creating an unnecessarily large attack surface.\n\nShift Left, and Then Shift Up\n\nDevOps and information security teams should work together to address these challenges by facilitating security's \"shift left\" to the beginning of the development cycle. Shift left is a well-understood concept in developer circles, and it needs to become just as familiar from a security perspective in order to identify and remedy potential security issues before they move into production.\n\nSecurity must also \"shift up\" to focus on its new priority — protecting the application layer — and success requires making these new controls and processes mandatory. The shift-left concept can't fully address the new security issues that containers and serverless functions can create. For example, shifting left does not provide for effective detection and incident response in the case of a new zero-day attack on a running container. Effective incident response requires identifying the incident, understanding its causes and potential effects, then making a decision regarding appropriate action — something that is only possible with controls over the runtime environment.\n\nConsider concern for securing the runtime environment. In a traditional server infrastructure on-premises or in the cloud, the application runs on a virtual machine (VM), and anti-malware is installed on the VM operating system. If the application is compromised, the anti-malware solution stops it. But if you are using AWS Fargate or Azure ACI, where do you install anti-malware?\n\nThe traditional location for executing security policies in the middle layers is no longer under your control. The serverless model exacerbate the problem, and security organizations are realizing these controls remain critically important to address even after they have worked with DevOps to facilitate the shift left. The \"enforcement point\" on the underlying operating system has to go somewhere — ideally inside the container where you will execute the controls, manage incident response controls, etc. All the controls that were once executed in the operating system: Preventing rogue deployments and malicious code injections, securing user credentials, guarding network connections, and thwarting zero-day attack are still critical. Shifting up requires you to spread these controls among the container, orchestration, and development environments.\n\nYou must decide what controls need to be executed, and where. Some things will shift left, including understanding what potential vulnerabilities or deficiencies in application code as well as the configuration of the image. Others should be implemented in the runtime, such as monitoring what containers are doing and understanding what software is running in them, requiring a shift up to protect these new infrastructures. That's how security becomes a facilitator to the DevOps movement and seen as an ally in releasing secure applications quickly on these newer cloud-native infrastructures."
    }
}