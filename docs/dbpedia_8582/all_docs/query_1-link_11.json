{
    "id": "dbpedia_8582_1",
    "rank": 11,
    "data": {
        "url": "https://www.altexsoft.com/blog/the-good-and-the-bad-of-net-framework-programming/",
        "read_more_link": "",
        "language": "en",
        "title": "What is .NET Framework? .Net Programming Explained",
        "top_image": "https://www.altexsoft.com/static/blog-post-featured/2023/10/f68554ec-b0c4-450e-b73e-96c6f00b133d.jpg",
        "meta_img": "https://www.altexsoft.com/static/blog-post-featured/2023/10/f68554ec-b0c4-450e-b73e-96c6f00b133d.jpg",
        "images": [
            "https://www.altexsoft.com/static/blog-post-featured/2023/10/f68554ec-b0c4-450e-b73e-96c6f00b133d.jpg",
            "https://www.altexsoft.com/static/blog-post/2024/1/ec673b1a-4578-4edc-bc78-679feda0b7d3.jpg",
            "https://www.altexsoft.com/_next/static/images/YoutubePlayButton-d3972df504617e41e724a8690caef270.svg",
            "https://www.altexsoft.com/static/content-image/2024/6/687653ff-685c-4fab-9076-d34d555fe332.jpg",
            "https://www.altexsoft.com/static/content-image/2024/6/9c7cee28-7e6b-47da-87d7-b98e601b7694.jpg",
            "https://www.altexsoft.com/static/content-image/2024/6/e4ee7150-052a-4b74-830a-6a3b1de8c997.jpg",
            "https://www.altexsoft.com/static/content-image/2024/6/08cba3aa-977f-45a1-99f5-bc6d7532a066.jpg",
            "https://www.altexsoft.com/static/blog-post/2024/1/603bd12c-76eb-4e14-ac43-3457acc12346.jpg",
            "https://www.altexsoft.com/_next/static/images/YoutubePlayButton-d3972df504617e41e724a8690caef270.svg",
            "https://www.altexsoft.com/static/content-image/2024/6/f9ca2caa-921b-46c0-b69d-ec94c9d91928.jpg",
            "https://www.altexsoft.com/static/content-image/2024/6/ff8ec74e-17b9-46d1-8f76-554ad2d34954.jpg",
            "https://www.altexsoft.com/static/content-image/2024/6/27e000a9-ed3a-4915-b9af-2b83942db6bc.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Editor"
        ],
        "publish_date": "2021-12-24T00:00:00+00:00",
        "summary": "",
        "meta_description": "What is .NET Framework and when to use it? The differences between .NET Framework, .NET Core, and .NET Standard.",
        "meta_lang": "en",
        "meta_favicon": "https://www.altexsoft.com/static/favicon/apple-touch-icon.png",
        "meta_site_name": "AltexSoft",
        "canonical_link": "https://www.altexsoft.com/blog/the-good-and-the-bad-of-net-framework-programming/",
        "text": "Besides all that, it’s the very first release that has native support for Apple Silicon (macOS Arm64) and improved support for Windows Arm64.\n\nWe will partly cover what’s new in .NET 6 in the paragraphs below. Find more information on the Microsoft blog post.\n\nWhat is the .NET development platform\n\n.NET comes in four flavors: .NET Framework, .NET Core, Xamarin, and Universal Windows Platform (UWP).\n\nThese implementations combined are called the .NET development platform. Each contains frameworks and libraries for building various applications.\n\n.NET Framework\n\nThe .NET Framework released back in 2002 is the first and oldest implementation of the platform. It includes three main application models – WPF, Windows Forms, ASP.NET Forms – and Base Class Library.\n\nWindows Presentation Foundation (WPF) is a UI framework for creating graphical interfaces, primarily for desktop client applications on Windows OS. It uses the capabilities of Extensible Application Markup Language (XAML).\n\nWindows Forms is a GUI class library within the .NET Framework. Windows Forms are used to develop desktop applications with rich graphics that are easy to update and deploy.\n\nASP.NET. While the previous two components are designed for desktop engineering ASP.NET is used to develop dynamic websites and web applications. There is the Common Language Runtime (CLR) in its core that gives developers the opportunity to write ASP.NET code using different .NET languages that we discuss below.\n\nBase Class Library (BCL) provides the most common functionality, such as classes in namespaces, and is the core of the Framework Class Library (FCL), a set of reusable interfaces, classes, and value types that are closely integrated with the Common Language Runtime (CLR). The combination of FCL and CLR constitutes the .NET Framework. The base class library also includes ADO.NET, data access technology used by developers to access databases.\n\nAs the .NET Framework supports only Windows-based devices, there was a need for a cross-platform package.\n\nLearn how AltexSoft implemented a blog section using the .NET Framework\n\n.NET Core\n\n.NET Core was released in 2016. It’s a cross-platform version of the .NET Framework: Engineers can now use the product on Linux and macOS and create applications that aren’t necessarily tied to the Windows family. The new system aims at conquering the cloud space as some providers like Digital Ocean are Linux-driven. Not only is .NET Core cross-platform, but its different versions can also be installed side by side on the same device. .NET Core includes ASP.NET Core and Universal Windows Platform (UWP).\n\nASP.NET Core is a cross-platform rebuild of ASP.NET that is a more modular framework than its predecessor. It allows you to build the mobile backend, web apps, and services.\n\nIn .NET 6, ASP.NET Core has many new features, including Hot Reload, which enables the application of changes to C#, Visual Basic, and CSS source files without having to restart or rebuild the app (the app is running while you are updating the code).\n\nXamarin\n\nThe third implementation is called Xamarin and is used for mobile applications and Mac products. Originally, Xamarin was designed independently of Microsoft and was a proprietary product. Then Microsoft acquired it in 2016 making it a fully open-source branch of the .NET platform. Xamarin uses the Mono runtime and a version of the .NET Framework adjusted to work with APIs for iOS, Android, and Xamarin.Mac.\n\nTo get an elaborate overview of this product, check our Xamarin pros and cons article.\n\nPrior to the .NET Standard, a programmer had to redevelop an application or a library for the new platform and then distribute all the updates across various platforms. Currently, the library supports all dependent libraries across applications. However, you should check version compatibility to leverage the .NET Standard successfully\n\n.NET popularity and community\n\nFor those of you who are wondering just how popular .NET is, a large community of developers is the answer. Interestingly, it unites engineers from small, midsize, and enterprise-grade companies. This means that almost any issue can be resolved with the help of community members.\n\nSince .NET Core is open source, its libraries, runtime, and compiler are available on GitHub and have many contributions. According to the Stack Overflow 2021 survey, ASP.NET took fifth place among the most popular web frameworks. At the same time, the .NET Framework with .NET 5 and .NET Core placed first and second, respectively, as the most used frameworks beyond web development.\n\nBesides that, the .NET Foundation fosters open development and teamwork around the .NET ecosystem. .NET community and commercial developers use it as the main forum for idea exchange.\n\nAutomatic monitoring in ASP.NET\n\nASP.NET has built-in automatic monitoring. The Windows Web Server strictly monitors web pages and applications that run on it. If any issues, such as memory leaks or infinite loops, occur, it immediately alerts about them. This allows for directly correcting these behaviors and creating new processes. The monitoring ensures higher stability and transparency of .NET applications.\n\nPowerful Roslyn and RyuJIT compilers\n\n.NET uses two compilers, Roslyn, to compile C# or VB code into CIL (common intermediate language), and RyuJIT, to run just-in-time compilation of CIL into native code. Both compilers are highly regarded by the .NET community as Microsoft actively improves them.\n\nRoslyn has been available since 2011. In 2014, it became open source and in 2015 was included in Visual Studio. In addition to being open source, Roslyn exposes APIs to offer rich code analysis for the developer. This means that, unlike traditional black-box compilation, with Roslyn, developers can read the compilation data at every stage.\n\nRyuJIT is responsible for compiling CIL to byte code. The full transition from the old JIT was completed in 2018 with the idea of improved performance. And, generally, engineers agree that RyuJIT is faster.\n\nAccording to .NET 5 Preview 1 and Preview 2 released in the spring of 2020, numerous improvements to RyuJIT were made to enhance the quality of the machine code generated by JIT (“code quality,” as Microsoft specialists call it). “In summary, about half of the following improvements are actual new optimizations, and the other half is due to changing the flow of RyuJIT to enable existing optimizations to apply to more code patterns,” noted .NET Team Program Manager Richard Lander.\n\nActive Microsoft support\n\nSince .NET is Microsoft’s platform technology you would expect the company to actively support and develop it. But the point is, Microsoft is really good at what they are doing. Perhaps there’s no other technology company with such a full and coherent ecosystem that checks off all boxes for engineers, from IDEs and frameworks to cloud services.\n\nMicrosoft does its best to evolve. The transition to .NET Core was a major step in terms of ecosystem development, as it embraced the cloud and focused on performance improvements.\n\nIn 2018, Microsoft introduced the ML.NET framework for C# and F# languages. Also, let’s keep in mind the releases of .NET 5 and .NET 6 are already here with .NET 7 being projected for 2022.\n\nRelatively easy migration from .NET 5 to .NET 6\n\nIf you keep your applications constantly updated with the newest .NET versions, migrating from .NET 5.0 to .NET 6.0 won’t be a big headache. You first change the target framework from .NET 5.0 to .NET 6.0 on the Properties of your projects in Visual Studio 2022. Then you upgrade the rest of the packages within the project and run QA processes to see how everything performs.\n\nUnlike the above, the migration from .NET Framework to .NET Core or between some .NET Core versions is not a walk in the park. In case your projects are based on earlier versions like .NET Core 3.1, migrating the app to .NET 5 before making the move towards the latest release is recommended.\n\nDisadvantages of .NET development\n\nEven though .NET is considered one of the strongest engineering platforms out there due to extensive infrastructure and proven product development history, it comes with a set of problems.\n\nLimited Object-Relational Support\n\nAs we mentioned above, .NET uses the object-oriented programming (OOP) language model. This model is centered around objects rather than “actions” and data rather than logic. The support of data-oriented software application development in the .NET Framework and Core is provided by the Entity Framework.\n\nAn entity is an object-relational mapper (ORM) that links object-oriented .NET Framework and relational (SQL) databases. Some engineers believe Entity Framework isn’t flexible enough and may not support all available database designs. This also means that there’s a chance that, at some point, Entity Framework may not be supporting new database designs. Another problem is that the framework may eventually be abandoned by Microsoft.\n\nOn the bright side, you can always choose another ORM alternative, so it remains a debatable point.\n\nLicensing cost\n\nBuilding .NET apps isn’t cheap, regardless of open source technologies. Mostly, your expenses will be spent on Visual Studio IDE and other additional collaboration and quality assurance services that Microsoft offers to simplify your work.\n\nAs of today, the business version of Visual Studio will cost you $45/month for every user. An enterprise release that includes various cloud, enterprise mobility, QA features, and more will be $250 per month per user. However, you still can try to become a Microsoft Partner to have a number of subscriptions for free. For non-profit and educational purposes, there is also the free Visual Studio Community.\n\nEven though you can use .NET Core on Mac and Linux machines, the best way is to use Windows for .NET engineering, which also comes with licensing costs.\n\nThe barrier will be even higher if you’ve never used Microsoft products before and you have to migrate from, say, the AWS cloud ecosystem to Azure.\n\nThe gap between release and stability\n\nPerhaps, this problem cripples all Microsoft products, not the .NET stack only. But it’s definitely worth mentioning. The newly released products lack proper documentation, support, and stability and are prone to drastic changes. In one of the AltexSoft projects, our architects decided to use a fresh DocumentDB (now Azure Cosmos DB) but then were forced to design custom data architecture as the product suffered a number of technical issues that could jeopardize the entire project.\n\nOne of Y Combinator users has vividly described this issue: “My problem with these kinds of Microsoft technology evangelism articles/videos is that it always seems like Microsoft has juuuust gotten their new hotness to work, and is telling the world that it’s awesome, and ready for production. Then you go to implement it, and as soon as you leave the perfect world of their demo, it all falls apart, and THEN you find out the docs were written for the beta version and no longer apply, so you’re left guessing at the right invocation signature for the method you need.”\n\nAt the same time, Microsoft keeps working on this issue, and the company’s latest long-term support (LTS) .NET 6 release is claimed to have 3 years of official support and proper documentation on use and migration.\n\nMemory leaks\n\nMemory leaks are not uncommon in any technology. Simply put, the framework doesn’t release the memory that it no longer needs. .NET is frequently criticized for memory leaks and memory-related issues. Although .NET has a garbage collector for this sort of problem, engineers still have to invest additional efforts into proper resource management. And the leaks keep on growing as the application scales.\n\nFortunately, engineers can find detailed and effective recommendations for detecting leaks in .NET.\n\nBumpy transition to .NET Core\n\n.NET Core is the next big step in Microsoft’s platform development. As always happens, the transition period may be long and difficult. The applications built with the old .NET Framework outnumber those with .NET Core. And it doesn’t necessarily mean that all of them will experience this transition. In corporate environments, the transition may not be prioritized as much. Nonetheless, these systems need support.\n\nAnother related problem here is that the mature .NET Framework had many supporting projects around it. For example, many developers expressed concerns about abandoning Windows Communication Foundation (WCF), a runtime and API set for service-oriented applications used by many .NET practitioners.\n\nMicrosoft decided not to port WCF to Core. Instead, they leveraged community effort, as one of the .NET Foundation team members donated an open-source alternative, Core WCF. Again, this isn’t directly managed by Microsoft, nor does it provide full compatibility with the original WCF. Developers will have to spend a little extra effort to complete a transition.\n\nScott Hunter, from .NET program management, posted that you won’t find ASP.NET Web Forms, .NET Remoting, and some other services in .NET Core. They’ll be gone for good, freeing the way for new technologies.\n\nWhen to use the .NET\n\nScalable products. Usually, business needs are growing and your software has to scale with it. .NET provides a scalable environment and allows for redesigning ongoing applications in order to match the growing needs of the business.\n\nCross-platform needs. In case you need an app that works across platforms, .NET will be a great choice as most platforms are covered and you can reduce development effort while expanding your desktop or mobile app to other operating systems. Also, .NET can be used for such specific engineering cases as gaming (including Xbox) and AR development (including HoloLens).\n\nEnterprise-scale infrastructures. It’s still a debatable point whether .NET is designed mostly for enterprise use. But Microsoft makes sure it provides the widest toolset possible to build and cross-integrate enterprise products, both internal and public ones. It also supports a robust enterprise mobility ecosystem.\n\nThis article is a part of our “The Good and the Bad” series. If you are interested in web development, take a look at our blog post on the\n\nThe Good and the Bad of Pandas Data Analysis Library\n\nThe Good and the Bad of Terraform Infrastructure-as-Code Tool\n\nThe Good and the Bad of the Elasticsearch Search and Analytics Engine\n\nThe Good and the Bad of Kubernetes Container Orchestration\n\nThe Good and the Bad of Docker Containers\n\nThe Good and the Bad of Apache Airflow\n\nThe Good and the Bad of Apache Kafka Streaming Platform\n\nThe Good and the Bad of Hadoop Big Data Framework\n\nThe Good and the Bad of Snowflake\n\nThe Good and the Bad of C# Programming\n\nThe Good and the Bad of .Net Framework Programming\n\nThe Good and the Bad of Java Programming\n\nThe Good and the Bad of Swift Programming Language\n\nThe Good and the Bad of Angular Development\n\nThe Good and the Bad of TypeScript\n\nThe Good and the Bad of React Development\n\nThe Good and the Bad of React Native App Development\n\nThe Good and the Bad of Vue.js Framework Programming\n\nThe Good and the Bad of Node.js Web App Development\n\nThe Good and the Bad of Flutter App Development\n\nThe Good and the Bad of Xamarin Mobile Development\n\nThe Good and the Bad of Ionic Mobile Development\n\nThe Good and the Bad of Android App Development\n\nThe Good and the Bad of Katalon Studio Automation Testing Tool\n\nThe Good and the Bad of Selenium Test Automation Software\n\nThe Good and the Bad of Ranorex GUI Test Automation Tool\n\nThe Good and the Bad of the SAP Business Intelligence Platform\n\nThe Good and the Bad of Firebase Backend Services\n\nThe Good and the Bad of Serverless Architecture"
    }
}