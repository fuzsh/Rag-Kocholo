{
    "id": "dbpedia_8582_1",
    "rank": 8,
    "data": {
        "url": "https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools",
        "read_more_link": "",
        "language": "en",
        "title": "Install NuGet client tools",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-21T18:26:00+00:00",
        "summary": "",
        "meta_description": "Learn how to install and use the dotnet and NuGet client command-line interface (CLI) tools and the Package Manager tool for Visual Studio.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools",
        "text": "Looking to install a package? See Ways to install NuGet packages.\n\nTo work with NuGet as a package consumer or creator, you can use command-line interface (CLI) tools and NuGet features in Visual Studio. This article briefly outlines the capabilities of the different tools, how to install them, and their comparative feature availability.\n\nTo get started using NuGet to consume packages, see the following articles:\n\nInstall and use a package (dotnet CLI)\n\nInstall and use a package (Visual Studio on Windows)\n\nTo get started creating NuGet packages, see these articles:\n\nCreate and publish a NET Standard package (dotnet CLI)\n\nCreate and publish a NET Standard package (Visual Studio on Windows)\n\nTool Description Download dotnet SDK The CLI tool for .NET Core and .NET Standard libraries, and for any SDK-style project such as one that targets the .NET Framework. This CLI tool is included with the .NET Core SDK and provides core NuGet features on all platforms. In Visual Studio 2017 and later, the dotnet CLI is automatically installed with any .NET Core related workloads. .NET Core SDK nuget.exe The CLI tool for .NET Framework libraries and for any non-SDK-style project such as one that targets .NET Standard libraries. This CLI tool provides all NuGet capabilities on Windows and most features on Mac and Linux when running under Mono. nuget.exe Visual Studio On Windows, the NuGet Package Manager is included with Visual Studio 2012 and later. Visual Studio provides the Package Manager UI and the Package Manager Console (PowerShell on Windows). You can use these tools to run most NuGet operations. Visual Studio Visual Studio for Mac On Mac, certain NuGet capabilities are built in directly. Package Manager Console isn't currently available. For other capabilities, use the dotnet SDK or nuget.exe CLI tools. Visual Studio for Mac Visual Studio Code On Windows, Mac, and Linux, NuGet capabilities are available through marketplace extensions, or use the dotnet SDK or nuget.exe CLI tools. Visual Studio Code\n\nThe MSBuild CLI also restores and creates packages. MSBuild isn't a general-purpose tool for working with NuGet. This CLI tool is primarily useful on build servers.\n\nPackage Manager Console commands work only within Visual Studio on Windows and don't work within other PowerShell environments.\n\nSupport policy\n\nThe Visual Studio for Windows support policy can be found at Visual Studio Product Lifecycle and Servicing.\n\nThe most recent version of NuGet.exe is fully supported and can be relied on for bug fixes, updates, and enhancements. For more information on NuGet.exe's support policy, see the Microsoft Modern Lifecycle Policy.\n\nThe .NET SDK support policy can be found at .NET and .NET Core Support Policy.\n\nPatch Releases\n\nPatched versions of NuGet.exe will be released exclusively when critical security fixes are required for a long-term support (LTS) version of Visual Studio or .NET SDK.\n\nAll security bugs should be reported to the Microsoft Security Response Center (MSRC) at MSRC's report page. Also, see the security policy in the NuGet.Client repo.\n\nNuGet.exe unlisting\n\nOut-of-support, deprecated, or vulnerable NuGet.exe versions will be removed from tools.json.\n\nVisual Studio\n\nIn Visual Studio 2017 and later, the Visual Studio installer includes the NuGet Package Manager with any workload that employs .NET.\n\nYou can also install the Package Manager separately or verify your installation. Run the Visual Studio installer and check the option setting under Individual Components > Code tools > NuGet package manager. For more information, see Install and manage packages in Visual Studio by using the NuGet Package Manager.\n\nYou can use either the dotnet CLI or the nuget.exe CLI to support NuGet features in the Visual Studio IDE. The dotnet CLI is installed with some Visual Studio workloads, such as .NET Core. The nuget.exe CLI must be installed separately as described earlier. For a feature comparison of the tools, see the feature availability section.\n\nTo target .NET Core or .NET Standard, use the dotnet SDK CLI tool. This CLI is required for the SDK-style project format, which uses the SDK attribute.\n\nTo target the .NET Framework (non-SDK-style project only), use the nuget.exe CLI tool. If the project is migrated from packages.config to PackageReference, use the dotnet SDK CLI tool instead.\n\ndotnet SDK\n\nThe dotnet SDK is the .NET Core 2.0 CLI tool, which works on all platforms (Windows, Mac, and Linux) and provides core NuGet features such as installing, restoring, and publishing packages. The dotnet CLI provides direct integration with .NET Core project files (such as .csproj), which is helpful in most scenarios. This CLI is also built directly for each platform and doesn't require installation of Mono.\n\nInstall the dotnet SDK\n\nOn developer computers, install the .NET Core SDK. In Visual Studio 2017 and later, the dotnet CLI is automatically installed with any .NET Core related workloads.\n\nFor build servers, follow the instructions to Use the .NET Core SDK and tools in continuous integration.\n\nTo learn how to use basic commands with the dotnet SDK CLI tool, see Install and manage NuGet packages with the dotnet CLI.\n\nnuget.exe CLI\n\nThe NuGet CLI, nuget.exe, is the command-line utility for Windows that provides all NuGet capabilities. This CLI can also run on Mac OSX and Linux by using Mono with some limitations.\n\nTo learn how to use basic commands with the nuget.exe CLI tool, see Manage NuGet packages with the nuget.exe CLI.\n\nInstall nuget.exe\n\nFeature availability\n\nThe following table compares the available features for the dotnet and nuget.exe CLI tools for supported platforms.\n\nFeature dotnet CLI nuget CLI (Windows) nuget CLI (Mono) Visual Studio (Windows) Visual Studio for Mac Search packages â â â â â Install/uninstall packages â â (1) â â â Update packages â â â â Restore packages â â â (2) â â Manage package feeds (sources) â â â â â Manage packages on a feed â â â Set API keys for feeds â â Create packages (3) â â â (4) â Publish packages â â â â Replicate packages â â Manage global-package and cache folders â â â Manage NuGet configuration â â â\n\nFeature notes\n\n(1) Doesn't affect project files. Use the dotnet SDK CLI tool instead.\n\n(2) Works only with packages.config file and not with solution (.sln) files.\n\n(3) Various advanced package features are available through the CLI only as they aren't represented in the Visual Studio UI tools.\n\n(4) Works with .nuspec files but not with project files.\n\nUpcoming features\n\nIf you want to preview upcoming NuGet features, install a Visual Studio Preview, which works side-by-side with stable releases of Visual Studio. To report problems or share ideas for previews, open an issue on the NuGet GitHub repository.\n\nInstall and manage packages by using Visual Studio\n\nInstall and manage packages by using the dotnet CLI\n\nInstall and manage packages by using the nuget.exe CLI\n\nInstall and manage packages by using PowerShell\n\nCreate a package by using the nuget.exe CLI\n\nPublish NuGet packages\n\nPackage Manager Console PowerShell reference"
    }
}