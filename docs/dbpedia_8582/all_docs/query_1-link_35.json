{
    "id": "dbpedia_8582_1",
    "rank": 35,
    "data": {
        "url": "https://dev.to/eliotjones/reading-a-pdf-in-c-on-net-core-43ef",
        "read_more_link": "",
        "language": "en",
        "title": "Reading a PDF in C# on .NET Core",
        "top_image": "https://dev.to/social_previews/article/409500.png",
        "meta_img": "https://dev.to/social_previews/article/409500.png",
        "images": [
            "https://media.dev.to/cdn-cgi/image/quality=100/https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png",
            "https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg",
            "https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F440360%2F4f24378c-7341-4bd7-975b-a35e95f3e459.jpeg",
            "https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg",
            "https://media.dev.to/cdn-cgi/image/width=256,height=,fit=scale-down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F441875%2F3d891478-5a88-415d-93c4-0536c8c3c61c.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F441875%2F3d891478-5a88-415d-93c4-0536c8c3c61c.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F411559%2F390b5310-450c-43a0-a914-1790dbdb5c89.png",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F411559%2F390b5310-450c-43a0-a914-1790dbdb5c89.png",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F312716%2F781e41af-015a-4364-8958-a01291f72194.jpg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F312716%2F781e41af-015a-4364-8958-a01291f72194.jpg",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1121301%2F917f87d9-de95-45a2-966e-cc904b59b911.png",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1121301%2F917f87d9-de95-45a2-966e-cc904b59b911.png",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F352032%2F64a0860f-a33a-4b4d-aa41-2aac694d7b0c.png",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F352032%2F64a0860f-a33a-4b4d-aa41-2aac694d7b0c.png",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F632464%2F629f1566-ef14-482d-a5fb-e789678f9b0a.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F632464%2F629f1566-ef14-482d-a5fb-e789678f9b0a.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=50,height=50,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F440360%2F4f24378c-7341-4bd7-975b-a35e95f3e459.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F440360%2F4f24378c-7341-4bd7-975b-a35e95f3e459.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=100,height=100,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1077423%2F2d712653-ad84-4734-9f44-35e0cb51d2d0.png",
            "https://media.dev.to/cdn-cgi/image/width=100,height=100,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1398753%2F12f4a3fa-f70d-43b3-8af8-dd40dec35487.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=100,height=100,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1659938%2F16a3ff6b-e9bb-437a-9c74-d42eefbd665b.png",
            "https://media.dev.to/cdn-cgi/image/width=100,height=100,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1166509%2Fb70a92db-74b8-4d4a-bc1f-2a1e190d11c5.png",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F440360%2F4f24378c-7341-4bd7-975b-a35e95f3e459.jpeg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1%2Ff451a206-11c8-4e3d-8936-143d0a7e65bb.png",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1079248%2F6f43bf7a-eebe-414c-9404-4cc9765ac588.jpg",
            "https://media.dev.to/cdn-cgi/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1204850%2Fa9ef9d9a-e1bc-46c4-b7b8-164b3acaa098.jpg",
            "https://media.dev.to/cdn-cgi/image/width=190,height=,fit=scale-down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png",
            "https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "csharp",
            "dotnet",
            "tutorial",
            "software",
            "coding",
            "development",
            "engineering",
            "inclusive",
            "community"
        ],
        "tags": null,
        "authors": [
            "Eliot Jones"
        ],
        "publish_date": "2020-07-25T14:55:48+00:00",
        "summary": "",
        "meta_description": "The question anyone who has tried to extract text from a PDF using C# will have asked themselves at o... Tagged with csharp, dotnet, tutorial.",
        "meta_lang": "en",
        "meta_favicon": "https://res.cloudinary.com/practicaldev/image/fetch/s--E8ak4Hr1--/c_limit,f_auto,fl_progressive,q_auto,w_32/https://dev-to.s3.us-east-2.amazonaws.com/favicon.ico",
        "meta_site_name": "DEV Community",
        "canonical_link": "https://dev.to/eliotjones/reading-a-pdf-in-c-on-net-core-43ef",
        "text": "The question anyone who has tried to extract text from a PDF using C# will have asked themselves at one point or another is: why is this so complicated?\n\nIt's a good question and the answer lies in trade-offs made when the PDF format was designed.\n\nTo those unfamiliar with it I'd describe a PDF file as a picture. At a very high level it's a set of images defining how the pages in the document should appear. This means whatever platform you view it on, it should look (more-or-less) identical, whether you're on Windows, Linux, Chrome, Android, etc. The fact it contains text and font information is almost, but not quite, incidental.\n\nThe presence of fonts in the file helps applications that display PDFs draw text in (almost) the same way across platforms. The text content included in a document mostly just defines where letters from a font should be drawn. There are even some documents containing fonts where the text information has no actual relationship to the displayed glyphs, you might have encountered them before; in these documents if you highlight and copy paste some text that appears 'normal' when you paste it to another application it's just nonsense.\n\nWith that in mind there's no such thing as 'perfect' (or a lot of the time even passable) text extraction from PDFs. They're not primarily designed to transmit the text in a useful way, it's pretty much a side effect of the requirement to render the document that it even contains text at all.\n\nFor this reason some people just run OCR against all PDF documents and rely on the OCR to extract text from what is, and I'm repeating myself here, basically an image.\n\nIf you don't want to run OCR and you don't want to fork out a considerable amount of money for commercially licensed PDF software, what are your options for getting text out of a PDF in C#?\n\nOptions\n\nFor the following examples I'm targeting .NET Core 2.1 on Windows 10 using Visual Studio 2017. I'll be using the sample PDF found here but you can use any PDF file.\n\nFor the licensing discussion below - the traditional disclaimer that I am not a lawyer, I don't particularly understand software licenses. Consult someone who understands this stuff if licensing is a real issue for you.\n\niTextSharp\n\nLink\n\nThe original. One of the more well established PDF libraries in C#. Most versions of iTextSharp (now iText as of version 7) are covered by the AGPL. This is quite an 'aggressive' license that cannot be used for commercial purposes unless you also release your entire source code as source available (controversial take, I don't really consider AGPL open source) under the AGPL, or buy a commercial license.\n\nThere's an unofficial fork of iTextSharp from back when it was LGPL licensed (this is still a copyleft license - note that this link is to LGPL v2.1 rather than v2) before the change to the AGPL license with some recent changes to port it to .NET Core.\n\nOnce you have the package installed you can refer to the examples on GitHub to accomplish most tasks. The following code opens a file from disk and write the text content to the console:\n\nThe iTextSharp API has always struck me as a bit tricky to understand and the licensing would be a deal-breaker for me, even under the LGPL rather than AGPL. However you get access to the power of one of the largest, feature complete, C# PDF libraries.\n\nPdfPig\n\nLink\n\nDisclaimer: I'm the maintainer of this package.\n\nPdfPig is an Apache 2.0 licensed library started as an attempt to port the Java PDFBox project to C#. I built PdfPig with a particular focus on extracting text from PDFs. Other use-cases like creating PDFs are less well supported, or for PDF to image or HTML to PDF, not supported at all.\n\nFirst get the package from NuGet:\n\nThen to open and extract the text, like we did for the previous library:\n\nPdfPig provides multiple text extraction strategies. Porting the excellent PDFBox PDFTextStripper is an outstanding issue but PdfPig exposes a rich API based around letters to support any custom text extraction logic.\n\nEach page gives you access the the letters and their exact position on the page, plus almost all the information you could possibly want. Given the difficulty of extracting text content in a reliable order PdfPig is designed so that you can extract PDF text in any way you might need to, and enables you to build your own post-processing pipelines to give you the best possible results for your use-case.\n\ndocnet\n\nLink\n\ndocnet wraps the PDFium C++ library used by Chromium. It provides a C# API for the functionality available in the C++ library. This MIT licensed wrapper wraps the Apache 2.0 licensed PDFium code so is properly open source.\n\nThen you can extract the content from each page, or access the letters directly:\n\ndocnet gives you the speed benefit of native libraries as well as the reassurance of running the PDF code which powers Chromium and by extension, Chrome. Currently it restricts you to targeting x64 but this may change in future.\n\nPdfSharp\n\nLink\n\nThis is a port of the MIT licensed PdfSharp library to .NET Core. It seems to be primarily focused on creating, rather than reading, PDFs but also supports other operations. It also replaces the System.Drawing dependency of the original PDfSharp with the more cross-platform friendly ImageSharp library; which means, as usual, you should check the licenses of the dependencies (there was some talk of changing the ImageSharp license recently).\n\nI couldn't find an immediately obvious API for text extraction and there seems to be an open issue for text extraction, but I thought I'd mention it as an option if you're looking to convert PDF to image, or work with the internal PDF structure.\n\nConclusion\n\nWe reviewed a few of the options available to a developer looking to read text from a PDF in C# on .NET Core. There's some difficulty finding proper open-source, rather than commercial or copyleft licensed software to achieve this task.\n\nEven when we find a library it's still never going to extract text in reading order perfectly 100% of the time, since PDF was never designed to support this.\n\nI've included the options I'm aware of, but if you feel I've missed any let me know in the comments.\n\nI hope this article helps you write great software to bring the power of PDF to the people!"
    }
}