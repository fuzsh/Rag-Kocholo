{
    "id": "dbpedia_8582_0",
    "rank": 2,
    "data": {
        "url": "https://learn.microsoft.com/en-us/nuget/quickstart/install-and-use-a-package-in-visual-studio",
        "read_more_link": "",
        "language": "en",
        "title": "Quickstart: Install and use a NuGet package in Visual Studio (Windows only)",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/nuget/quickstart/media/qs-use-install-package.png",
            "https://learn.microsoft.com/en-us/nuget/quickstart/media/qs-use-package-manager-console.png",
            "https://learn.microsoft.com/en-us/nuget/quickstart/media/qs-use-wpf-app-start.png",
            "https://learn.microsoft.com/en-us/nuget/quickstart/media/qs-use-wpf-app-end.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-08-21T08:00:00+00:00",
        "summary": "",
        "meta_description": "In this quickstart, you learn how to install and use a NuGet package in a Visual Studio project for Windows.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/nuget/quickstart/install-and-use-a-package-in-visual-studio",
        "text": "A NuGet package contains reusable code that other developers have made available to you for use in your projects. You can install a NuGet package in a Microsoft Visual Studio project by using the NuGet Package Manager, the Package Manager Console, or the .NET CLI. This article demonstrates how to create a Windows Presentation Foundation (WPF) project with the popular Newtonsoft.Json package. The same process applies to any other .NET or .NET Core project.\n\nAfter you install a NuGet package, you can then make a reference to it in your code with the using <namespace> statement, where <namespace> is the name of package you're using. After you've made a reference, you can then call the package through its API.\n\nThe article is for Windows users only. If you're using Visual Studio for Mac, see Install and use a package in Visual Studio for Mac.\n\nPrerequisites\n\nInstall Visual Studio 2022 for Windows with the .NET desktop development workload.\n\nYou can install the 2022 Community edition for free from visualstudio.microsoft.com, or use the Professional or Enterprise edition.\n\nCreate a project\n\nYou can install a NuGet package into any .NET project if that package supports the same target framework as the project. However, for this quickstart you'll create a Windows Presentation Foundation (WPF) Application project.\n\nFollow these steps:\n\nIn Visual Studio, select File > New > Project.\n\nIn the Create a new project window, enter WPF in the search box and select C# and Windows in the dropdown lists. In the resulting list of project templates, select WPF Application, and then select Next.\n\nIn the Configure your new project window, optionally update the Project name and the Solution name, and then select Next.\n\nIn the Additional information window, select .NET 6.0 (or the latest version) for Framework, and then select Create.\n\nVisual Studio creates the project, and it appears in Solution Explorer.\n\nAdd the Newtonsoft.Json NuGet package\n\nTo install a NuGet package in this quickstart, you can use either the NuGet Package Manager or the Package Manager Console. Depending on your project format, the installation of a NuGet package records the dependency in either your project file or a packages.config file. For more information, see Package consumption workflow.\n\nNuGet Package Manager\n\nTo use the NuGet Package Manager to install the Newtonsoft.Json package in Visual Studio, follow these steps:\n\nSelect Project > Manage NuGet Packages.\n\nIn the NuGet Package Manager page, choose nuget.org as the Package source.\n\nFrom the Browse tab, search for Newtonsoft.Json, select Newtonsoft.Json in the list, and then select Install.\n\nIf you're prompted to verify the installation, select OK.\n\nPackage Manager Console\n\nAlternatively, to use the Package Manager Console in Visual Studio to install the Newtonsoft.Json package, follow these steps:\n\nFrom Visual Studio, select Tools > NuGet Package Manager > Package Manager Console.\n\nAfter the Package Manager Console pane opens, verify that the Default project drop-down list shows the project in which you want to install the package. If you have a single project in the solution, it's preselected.\n\nAt the console prompt, enter the command Install-Package Newtonsoft.Json. For more information about this command, see Install-Package.\n\nThe console window shows the output for the command. Errors typically indicate that the package isn't compatible with the project's target framework.\n\nUse the Newtonsoft.Json API in the app\n\nWith the Newtonsoft.Json package in the project, call its JsonConvert.SerializeObject method to convert an object to a human-readable string:\n\nFrom Solution Explorer, open MainWindow.xaml and replace the existing <Grid> element with the following code:\n\n<Grid Background=\"White\"> <StackPanel VerticalAlignment=\"Center\"> <Button Click=\"Button_Click\" Width=\"100px\" HorizontalAlignment=\"Center\" Content=\"Click Me\" Margin=\"10\"/> <TextBlock Name=\"TextBlock\" HorizontalAlignment=\"Center\" Text=\"TextBlock\" Margin=\"10\"/> </StackPanel> </Grid>\n\nOpen the MainWindow.xaml.cs file under the MainWindow.xaml node, and insert the following code inside the MainWindow class after the constructor:\n\npublic class Account { public string Name { get; set; } public string Email { get; set; } public DateTime DOB { get; set; } } private void Button_Click(object sender, RoutedEventArgs e) { Account account = new Account { Name = \"John Doe\", Email = \"john@microsoft.com\", DOB = new DateTime(1980, 2, 20, 0, 0, 0, DateTimeKind.Utc), }; string json = JsonConvert.SerializeObject(account, Newtonsoft.Json.Formatting.Indented); TextBlock.Text = json; }\n\nTo avoid an error for the JsonConvert object in the code (a red squiggle line will appear), add the following statement at the beginning of the code file:\n\nusing Newtonsoft.Json;\n\nTo build and run the app, press F5 or select Debug > Start Debugging.\n\nThe following window appears:\n\nSelect the Click Me button to see the contents of the TextBlock object replaced with JSON text.\n\nRelated video\n\nInstall and Use a NuGet Package with Visual Studio\n\nFind more NuGet videos on Channel 9 and YouTube.\n\nSee also\n\nFor more information about NuGet, see the following articles:\n\nWhat is NuGet?\n\nPackage consumption workflow\n\nFind and choose packages\n\nPackage references in project files\n\nInstall and use a package using the .NET CLI.\n\nNewtonsoft.Json package\n\nNext steps\n\nCongratulations on installing and using your first NuGet package. Advance to the next article to learn more about installing and managing NuGet packages."
    }
}