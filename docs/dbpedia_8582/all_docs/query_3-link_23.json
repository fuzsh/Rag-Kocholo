{
    "id": "dbpedia_8582_3",
    "rank": 23,
    "data": {
        "url": "https://automationpanda.com/2018/09/13/nuget-quick-reference/",
        "read_more_link": "",
        "language": "en",
        "title": "NuGet Quick Reference",
        "top_image": "https://automationpanda.com/wp-content/uploads/2018/09/nuget-package-manager-page.png",
        "meta_img": "https://automationpanda.com/wp-content/uploads/2018/09/nuget-package-manager-page.png",
        "images": [
            "https://automationpanda.com/wp-content/uploads/2018/09/nuget.png?w=444",
            "https://automationpanda.com/wp-content/uploads/2018/09/nuget-package-manager-page.png?w=620",
            "https://automationpanda.com/wp-content/uploads/2018/09/nuget-package-manager-console.png?w=620",
            "https://automationpanda.com/wp-content/uploads/2018/09/nuget-cli.png?w=620",
            "https://automationpanda.com/wp-content/uploads/2019/08/pandy1-reduced.png?w=50",
            "https://automationpanda.com/wp-content/uploads/2019/08/pandy1-reduced.png?w=50",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Andy Knight"
        ],
        "publish_date": "2018-09-13T00:00:00",
        "summary": "",
        "meta_description": "Here's a quick reference for using NuGet for .NET development: managing packages, using the CLI, and writing .nuspec files. Links included!",
        "meta_lang": "en",
        "meta_favicon": "https://automationpanda.com/wp-content/uploads/2019/08/pandy1-reduced.png?w=32",
        "meta_site_name": "Automation Panda",
        "canonical_link": "https://automationpanda.com/2018/09/13/nuget-quick-reference/",
        "text": "What is NuGet?\n\nNuGet is a package manager for Microsoft .NET. It installs packages and manages dependencies for .NET projects. It is like Maven (Java) or pip (Python). The NuGet Gallery hosts thousands of popular packages like Json.NET, NUnit, and jQuery. If you develop .NET applications (like in C#), then you probably need to use NuGet.\n\nInstalling Packages\n\nThe easiest way to use NuGet is through Visual Studio, which includes NuGet features by default. Packages are managed per project. Right-click on a project in Solution Explorer and select “Manage NuGet Packages…” to open the project’s package manager page.\n\nThe Browse tab lets you search and install new packages.\n\nThe Installed tab shows which packages are installed and can uninstall them.\n\nThe Updates tab lets you update packages to their latest versions.\n\nWhen packages are installed and updated, NuGet also pulls any dependencies they require. Visual Studio also creates a packages.config file for all dependencies. Then, just build and run!\n\nNuGet Configuration\n\nNuGet can be configured using a NuGet.Config file. This file can be placed under a project directory, a solution directory, or a system-wide location. One of the most common settings is the package sources: NuGet uses the public nuget.org repository by default, but others (like private company repos) can also be added. Check the nuget.config reference online for docs on all options. (Package sources can also be configured through Visual Studio under Tools > NuGet Package Manager > Package Manager Settings.)\n\nNuGet Package Manager Console\n\nSometimes, it’s helpful to control NuGet directly through the Package Manager Console. From the menu bar: Tools > NuGet Package Manager > Package Manager Console. For example, when packages get messed up, I’ll run “Update-Package -Reinstall” to reinstall everything. (Right-clicking the solution and selecting “Restore NuGet Packages” never seems to work for me.) Check the help command or the official guide for more info.\n\nNuGet CLI\n\nThe NuGet CLI nuget.exe provides the full extent of NuGet features, including the ability to make packages. It is more powerful than the Package Manager Console. It must be installed independently – it does not come with Visual Studio. Check the NuGet CLI reference online for full details. The .NET Core CLI dotnet.exe can also be used for managing packages. See the feature comparison for the differences.\n\nCreating a NuGet Package\n\nA NuGet package is basically a ZIP file with a .nupkg extension. It typically contains an assembly DLL and maybe other related files. Creating a NuGet package is pretty easy:\n\nInstall the NuGet CLI.\n\nCreate a .nuspec file for the project.\n\nAdd appropriate settings to the .nuspec file.\n\nRun the “nuget pack” command to create the .nupkg file.\n\nPublish the .nupkg file to the desired destination.\n\nThe .nuspec file can be created by running the “nuget spec” command in the project’s directory. The generated <project-name>.nuspec file will contain replacement tokens that will be substituted with values from the project’s AssemblyInfo when the package is built. Make sure to set AssemblyInfo values appropriately for the substitution. The version is especially important, and the automatic version format may be useful for guaranteeing uniqueness. Be sure to add any packages upon which the project depends as dependencies, too. (The .nuspec file can also be created manually.) Refer to the .nuspec reference for full details.\n\nThe standard package creation command is “nuget pack <project-name>.nuspec”. However, if the .nuspec file contains replacement tokens, then use “nuget pack <project-name>.csproj” instead. Once the package is created, it can be published publicly to nuget.org or to a private NuGet feed.\n\nBelow is an example .nuspec file with replacement tokens:\n\nResources"
    }
}