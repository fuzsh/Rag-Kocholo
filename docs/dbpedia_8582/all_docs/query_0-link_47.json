{
    "id": "dbpedia_8582_0",
    "rank": 47,
    "data": {
        "url": "https://www.milanjovanovic.tech/blog/improving-code-quality-in-csharp-with-static-code-analysis",
        "read_more_link": "",
        "language": "en",
        "title": "Improving Code Quality in C# With Static Code Analysis",
        "top_image": "https://www.milanjovanovic.tech/blog-covers/mnw_101.png",
        "meta_img": "https://www.milanjovanovic.tech/blog-covers/mnw_101.png",
        "images": [
            "https://www.milanjovanovic.tech/_next/static/media/profile.c8db99b5.png?imwidth=48 1x, /_next/static/media/profile.c8db99b5.png?imwidth=96 2x",
            "https://www.milanjovanovic.tech/blog-covers/mnw_101.png?imwidth=1920 1x, /blog-covers/mnw_101.png?imwidth=3840 2x",
            "https://www.milanjovanovic.tech/blogs/mnw_101/static_code_analysis.png?imwidth=1920 1x, /blogs/mnw_101/static_code_analysis.png?imwidth=3840 2x",
            "https://www.milanjovanovic.tech/_next/static/media/cover.27333f2f.png?imwidth=256 1x, /_next/static/media/cover.27333f2f.png?imwidth=384 2x",
            "https://www.milanjovanovic.tech/_next/static/media/cover.31e11f05.png?imwidth=256 1x, /_next/static/media/cover.31e11f05.png?imwidth=384 2x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Milan JovanoviÄ‡"
        ],
        "publish_date": "2024-08-03T00:00:00+00:00",
        "summary": "",
        "meta_description": "Static code analysis helps you build secure, maintainable, and high-quality C# code. In this week's newsletter, we'll explore how to integrate it into your .NET projects.",
        "meta_lang": "",
        "meta_favicon": "/profile_favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.milanjovanovic.tech/blog/improving-code-quality-in-csharp-with-static-code-analysis",
        "text": "Writing good code is important for any software project. It's also something I deeply care about. However, it can be hard to spot problems by just reading through everything.\n\nLuckily, there's a tool that can help: static code analysis.\n\nIt's like having an extra pair of eyes automatically checking your code. Static code analysis helps you build secure, maintainable, and high-quality C# code.\n\nHere's what we are going to cover in this week's newsletter:\n\nStatic code analysis\n\nStatic analysis in .NET\n\nFinding security risks\n\nLet's see how static code analysis can help us improve our code quality.\n\nWhat is Static Code Analysis?\n\nStatic code analysis is a way to examine your code without actually running it. It reports any issues related to security, performance, coding style, or best practices.\n\nWith static code analysis, you can \"shift left\". This allows you to find and fix issues early in the development process when they're less expensive to solve.\n\nBy writing high-quality code, you'll be able to build systems that are more reliable, scalable, and easier to maintain over time. Investing in code quality will pay dividends in the later stages of any project.\n\nYou can integrate static code analysis into your CI pipeline for a quick feedback loop. We can also pair this with architecture testing to enforce additional coding standards.\n\nStatic Code Analysis in .NET\n\n.NET has built-in Roslyn analyzers that inspect your C# code for code style and quality issues. Code analysis is enabled by default if your project targets .NET 5 or later.\n\nThe best way I found to configure static code analysis is using Directory.Build.props. It's an XML file where you can configure common project properties. You can place the Directory.Build.props file in the root folder so it will apply to all projects.\n\nYou can configure the TargetFramework, ImplicitUsings, Nullable (nullable reference types), etc. But what we care about is configuring static code analysis.\n\nHere are some properties we can configure:\n\nTreatWarningsAsErrors - Treat all warnings as errors.\n\nCodeAnalysisTreatWarningsAsErrors - Treat code quality (CAxxxx) warnings as errors.\n\nEnforceCodeStyleInBuild - Enables code-style analysis (\"IDExxxx\") rules.\n\nAnalysisLevel - Specifies which analyzers to enable. The default value is latest.\n\nAnalysisMode - Configures the predefined code analysis configuration.\n\nWe can also install additional NuGet packages to our projects. SonarAnalyzer.CSharp contains additional code analyzers to help us write clean, safe, and reliable code. This library comes from the same company that built SonarQube.\n\n<Project> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <AnalysisLevel>latest</AnalysisLevel> <AnalysisMode>All</AnalysisMode> <TreatWarningsAsErrors>true</TreatWarningsAsErrors> <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors> <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild> </PropertyGroup> <ItemGroup Condition=\"'$(MSBuildProjectExtension)' != '.dcproj'\"> <PackageReference Include=\"SonarAnalyzer.CSharp\" Version=\"*\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets> runtime; build; native; contentfiles; analyzers; buildtransitive </IncludeAssets> </PackageReference> </ItemGroup> </Project>\n\nThe built-in .NET analyzers and the ones from SonarAnalyzer.CSharp can be very helpful. But they can also make a lot of noise with too many build warnings.\n\nWhen you encounter code analysis rules that you don't consider helpful, you can turn them off. You can configure individual code analysis rules in the .editorconfig file.\n\n# S125: Sections of code should not be commented out dotnet_diagnostic.S125.severity = none # S1075: URIs should not be hardcoded dotnet_diagnostic.S1075.severity = none # S2094: Classes should not be empty dotnet_diagnostic.S2094.severity = none # S3267: Loops should be simplified with \"LINQ\" expressions dotnet_diagnostic.S3267.severity = none\n\nFinding (and Fixing) Security Risks\n\nStatic code analysis can help you detect potential security vulnerabilities in your code. Here's an example of a PasswordHasher using only 10,000 iterations to generate a password hash. The S5344 rule, from SonarAnalyzer.CSharp, detects this issue and warns us. The recommended minimal number of iterations is 100,000.\n\nYou can navigate to the explanation for S5344 to learn more:\n\nWeakly hashed password storage poses a significant security risk to software applications.\n\nWith TreatWarningsAsErrors turned on, your build will fail until you solve this issue. This reduces the chance of introducing security risks in production.\n\nConclusion\n\nStatic code analysis is a powerful tool I include in all my C# projects. It helps me catch problems early, leads to more reliable and secure code, and saves time and effort. While the initial setup and fine-tuning of rules might take some time, the long-term benefits are undeniable.\n\nRemember, static code analysis is a tool that complements your existing development practices.\n\nYou can create a robust development process that consistently delivers high-quality software by combining static code analysis with other techniques like code reviews, unit testing, and continuous integration.\n\nEmbrace static code analysis. Your future self (and your team) will thank you.\n\nThat's all for today.\n\nSee you next week."
    }
}