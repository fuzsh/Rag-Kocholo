{
    "id": "dbpedia_8582_0",
    "rank": 54,
    "data": {
        "url": "https://www.codemag.com/Article/2109091/Working-with-NuGet-Local-Packages",
        "read_more_link": "",
        "language": "en",
        "title": "Working with NuGet Local Packages",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.codemag.com/Images/Logos/CODEMagazine_Small.png",
            "https://www.codemag.com/Images/Logos/CODEMagazine_White_Small.png",
            "https://www.codemag.com/Article/AuthorPhotoSmall/f2383902-cbf5-4656-b84d-77e946b82e5c",
            "https://www.codemag.com/Images/CloudDownload.png",
            "https://www.codemag.com/Images/Logos/DoodleFreeSubscriptionBanner.png",
            "https://www.codemag.com/Images/CloudDownload.png",
            "https://www.codemag.com/Magazine/CoverLarge/2ad85587-dbe9-4d75-a75d-17e353207f97",
            "https://codemag.com/Article/Image/2109091/image1.png",
            "https://codemag.com/Article/Image/2109091/image2.png",
            "https://codemag.com/Article/Image/2109091/image3.png",
            "https://codemag.com/Article/Image/2109091/image4.png",
            "https://www.codemag.com/Magazine/CoverLarge/2ad85587-dbe9-4d75-a75d-17e353207f97",
            "https://www.codemag.com/Images/Banners/End of Article Banner v2.png",
            "https://googleads.g.doubleclick.net/pagead/viewthroughconversion/1067389305/?value=0&guid=ON&script=0"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "CODE Magazine",
            "EPS Software Corp",
            "Karen Payne (Contractor)"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Working with NuGet Local Packages",
        "meta_lang": "en",
        "meta_favicon": "/Images/CodeIcon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.codemag.com/Article/2109091/Working-with-NuGet-Local-Packages",
        "text": "The Microsoft .NET Framework comes in two flavors: conventional .NET Framework, which versions out at 4.8, and .NET Core Framework, which is currently at version 5. Neither framework has classes that provide solutions for all possible tasks. When either framework requires additional classes, a developer creates a class project, writes code, and references the class project in one or more other projects. It isn't necessary to write all these classes yourself; Microsoft provides classes in packages delivered through NuGet.\n\nNuGet host packages are compressed files (with an extension of .nupkg) that are dependent on the publisher target of one or more .NET Frameworks. They include dependencies which, if missing, are installed along with the package.\n\nFor example, let's say that a developer intends to interact with a SQL Server database using Entity Framework. The package requires other packages, dependencies. When installing this package or other packages with known dependencies, NuGet installs these packages.\n\nAlthough there are several methods for interacting with packages from installation to uninstalling from the command line or inside of Visual Studio, this article focuses on using NuGet inside of Visual Studio 2019, which provides tools natively for working with NuGet packages.\n\nIn order to access NuGet functionality, you can choose accessing the NuGet Package Manager from Visual Studio's project menu, right-clicking on the top branch of a solution in Solution Explorer, right-clicking on a project node in Solution Explorer, or using the NuGet Package Manager Console. For those new to Visual Studio and working with NuGet packages, start with the NuGet Package Manager, as there are details not available from the NuGet Package Manager Console.\n\nDevelopers can not only consume packages but also create their own packages published locally. Local packages can be on a developer computer for single use or on a shared location for a team of developers to consume.\n\nIn this article, you'll learn how to write code to publish to a local source, which entails testing code intended for publishing as a NuGet package and publishing a package.\n\nRequirements\n\nIn order to follow along, you'll need the following items:\n\nMicrosoft Visual Studio 2019 or higher, community edition or higher\n\n.NET Core\n\nAn individual or organization NuGet account using a Microsoft account\n\nSetting Up NuGet\n\nFor publishing a local package, you'll need NuGet CLI (Command Line Interface). Make sure to add the executable to the Windows path, as outlined in the instructions.\n\nInstall the NuGet.Commandline interface from a PowerShell window.\n\nSet Up the Local Feed Folder\n\nA local feed is a physical folder that a developer creates under Visual Studio options, NuGet Package Manager, Package Sources add the folder to the list of package sources. When limited to a single developer, consider a path like C:\\NuGetLocal. For a team, the folder needs a location where all team members have proper permissions and access to the folder. NuGet supports feeds using a local server and remote private feeds, which is another option for teams. See Microsoft documentation for various options for remote private feeds.\n\nSet Up Visual Studio for Local Feed\n\nFrom Visual Studio's menu, select Tools > Options, and then enter NuGet in the search input. Select the suitable Package Sources, as shown in Figure 1, followed by clicking the green plus button to add your path from set up local feed folder. Provide a name, and then click the OK button.\n\nWhat to Publish Locally\n\nCandidates for local packages range from proprietary code to an organization, to code that includes licensed third-party packages, to class projects that enforce internal code standards.\n\nUnit Test\n\nBefore publishing a package, create a unit test project with sufficient test to verify code functions properly. The accompanying Visual Studio solution provides examples for unit testing, as shown in Figure 2.\n\nDocumentation\n\nI recommend including a readme.md file and a document file that describes the library, classes, and methods included as well as known issues.\n\nThere are many packages hosted on NuGet that have no documentation, which means that the consumer must have an understanding of the library. It doesn't matter if the package is local or public; consider documenting code for future users.\n\nThe level of detail in documentation is dependent on the audience. For example, documentation might be for a team of developers that provides just enough information, as shown in Figure 3. For public consumption, more details are needed, along with code samples.\n\nPreparing for Publishing\n\nFrom project properties for the intended project, select the Package tab.\n\nCheck Generate NuGet package on build.\n\nPopulate Package ID with a unique identifier. If the identifier is already in use, you'll see an error\n\nProvide a license.\n\nIt's highly recommended that you include an icon file to distinguish your package from other packages.\n\nWhen appropriate, include the address for the source repository under the Repository URL.\n\nFor a complete list for setting properties, see the main readme file included with source code.\n\nPackages can have a text file displayed once an installation has completed. To include a text file, add readme.txt to the root of the project. To select properties for the readme.txt, set Copy to Output Direction to Copy if newer. Add content for a consumer to read.\n\nPublishing to a Local Feed\n\nThere are two ways to publish a package to a local feed. The first is to construct a command composed of a call to a NuGet executable with parameters that may be executed from a command or PowerShell window. This can end up as a tedious process.\n\nThe second method uses a utility written in C#, as shown in Figure 4.\n\nBenefits for option two, utility-based publishing, include:\n\nProviding a visual of all packages in the current Visual Studio solution\n\nPublishing a package by selecting a package and version\n\nConfiguring through code and/or a JSON setting file\n\nTo remove a package from a local feed, use the Delete command, as described in the documentation under Secondary commands.\n\nThe publishing utility doesn't provide a remove package option. Instead, it's easier to open to the local feed folder by clicking the Open local feed folder button, as shown in Figure 4, and perform a Delete action from Windows Explorer. You can add more options to this utility, but that's beyond the scope of this article.\n\nThe local feed folder and path to the NuGet path are stored in a simple configuration file, which needs to be set up for your computer prior to running the utility.\n\n{ \"NuGetExecutable\": \"C:\\NuGetStuff\\\\nuget.exe\", \"PackageLocation\": \"C:\\NuGetLocal\" }\n\nIn the configuration above, the first line points to where NuGet has been installed and the second line points to the local feed folder, the same folder as is set up in Visual Studio > Options > NuGet options.\n\nSample Code\n\nThe sample code (downloadable from the online version of this article) provides two class projects that are ready to publish to a local feed, plus a test project to test consuming these two projects. The unit test projects provide validation code that will tell you if the two test projects work correctly.\n\nSteps to working with the sample code:\n\nCreate a folder on your C drive for publishing local packages.\n\nEdit appsettings.json in the Publisher project. Set the PackageLocation property to the local feed folder created above, followed by setting the NuGetExecutable property to the NuGet.exe location even if it's in the PATH for the current computer.\n\nBuild the solution.\n\nOpen Test Explorer and run all tests.\n\nRun Publisher and select a project and version, as shown in Figure 4, followed by clicking the Publish button.\n\nOnce published, a dialog appears indicating that the operation has completed.\n\nClick the Open local feed folder button, which opens Windows Explorer to visually validate that the code has run successfully.\n\nResources\n\nAdditional resources for working with NuGet packages can be located with the included source code in the online version of the magazine.\n\nSummary\n\nNuGet provides more offering the consumption of other developer's packages. If you follow information provided in this article, you can host local packages."
    }
}