{
    "id": "dbpedia_8582_1",
    "rank": 34,
    "data": {
        "url": "https://github.com/Const-me/Whisper",
        "read_more_link": "",
        "language": "en",
        "title": "performance GPGPU inference of OpenAI's Whisper automatic speech recognition (ASR) model",
        "top_image": "https://opengraph.githubassets.com/7c2fe9aa963b972c4bee06a47743fa7c3e4d7fe99d46efab00c569ed71f50258/Const-me/Whisper",
        "meta_img": "https://opengraph.githubassets.com/7c2fe9aa963b972c4bee06a47743fa7c3e4d7fe99d46efab00c569ed71f50258/Const-me/Whisper",
        "images": [
            "https://github.com/Const-me/Whisper/raw/master/gui-load-model.png",
            "https://github.com/Const-me/Whisper/raw/master/gui-transcribe.png",
            "https://github.com/Const-me/Whisper/raw/master/gui-capture.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Const-me"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "High-performance GPGPU inference of OpenAI's Whisper automatic speech recognition (ASR) model - Const-me/Whisper",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/Const-me/Whisper",
        "text": "This project is a Windows port of the whisper.cpp implementation.\n\nWhich in turn is a C++ port of OpenAI's Whisper automatic speech recognition (ASR) model.\n\nDownload WhisperDesktop.zip from the “Releases” section of this repository, unpack the ZIP, and run WhisperDesktop.exe.\n\nOn the first screen it will ask you to download a model.\n\nI recommend ggml-medium.bin (1.42GB in size), because I’ve mostly tested the software with that model.\n\nThe next screen allows to transcribe an audio file.\n\nThere’s another screen which allows to capture and transcribe or translate live audio from a microphone.\n\nVendor-agnostic GPGPU based on DirectCompute; another name for that technology is “compute shaders in Direct3D 11”\n\nPlain C++ implementation, no runtime dependencies except essential OS components\n\nMuch faster than OpenAI’s implementation.\n\nOn my desktop computer with GeForce 1080Ti GPU, medium model, 3:24 min speech took 45 seconds to transcribe with PyTorch and CUDA, but only 19 seconds with my implementation and DirectCompute.\n\nFunfact: that’s 9.63 gigabytes runtime dependencies, versus 431 kilobytes Whisper.dll\n\nMixed F16 / F32 precision: Windows requires support of R16_FLOAT buffers since D3D version 10.0\n\nBuilt-in performance profiler which measures execution time of individual compute shaders\n\nLow memory usage\n\nMedia Foundation for audio handling, supports most audio and video formats (with the notable exception of Ogg Vorbis), and most audio capture devices which work on Windows (except some professional ones, which only implementing ASIO API).\n\nVoice activity detection for audio capture.\n\nThe implementation is based on the 2009 article “A simple but efficient real-time voice activity detection algorithm” by Mohammad Moattar and Mahdi Homayoonpoor.\n\nEasy to use COM-style API. Idiomatic C# wrapper available on nuget.\n\nVersion 1.10 introduced scripting support for PowerShell 5.1, that’s the older “Windows PowerShell” version which comes pre-installed on Windows.\n\nPre-built binaries available\n\nThe only supported platform is 64-bit Windows.\n\nShould work on Windows 8.1 or newer, but I have only tested on Windows 10.\n\nThe library requires a Direct3D 11.0 capable GPU, which in 2023 simply means “any hardware GPU”. The most recent GPU without D3D 11.0 support was Intel Sandy Bridge from 2011.\n\nOn the CPU side, the library requires AVX1 and F16C support.\n\nClone this repository\n\nOpen WhisperCpp.sln in Visual Studio 2022. I’m using the freeware community edition, version 17.4.4.\n\nSwitch to Release configuration\n\nBuild and run CompressShaders C# project, in the Tools subfolder of the solution. To run that project, right click in visual studio, “Set as startup project”, then in the main menu of VS “Debug / Start Without Debugging”. When completed successfully, you should see a console window with a line like that:\n\nCompressed 46 compute shaders, 123.5 kb -> 18.0 kb\n\nBuild Whisper project to get the native DLL, or WhisperNet for the C# wrapper and nuget package, or the examples.\n\nIf you gonna consume the library in a software built with Visual C++ 2022 or newer, you probably redistribute Visual C++ runtime DLLs in the form of the .msm merge module, or vc_redist.x64.exe binary.\n\nIf you do that, right click on the Whisper project, Properties, C/C++, Code Generation, switch “Runtime Library” setting from Multi-threaded (/MT) to Multi-threaded DLL (/MD), and rebuild: the binary will become smaller.\n\nThe library includes RenderDoc GPU debugger integration.\n\nWhen launched your program from RenderDoc, hold F12 key to capture the compute calls.\n\nIf you gonna debug HLSL shaders, use the debug build of the DLL, it includes debug build of the shaders and you’ll get better UX in the debugger.\n\nThe repository includes a lot of code which was only used for development: couple alternative model implementations, compatible FP64 versions of some compute shaders, debug tracing and the tool to compare the traces, etc.\n\nThat stuff is disabled by preprocessor macros or constexpr flags, I hope it’s fine to keep here.\n\nI have a limited selection of GPUs in this house.\n\nSpecifically, I have optimized for nVidia 1080Ti, Radeon Vega 8 inside Ryzen 7 5700G, and Radeon Vega 7 inside Ryzen 5 5600U.\n\nHere’s the summary.\n\nThe nVidia delivers relative speed 5.8 for the large model, 10.6 for the medium model.\n\nThe AMD Ryzen 5 5600U APU delivers relative speed about 2.2 for the medium model. Not great, but still, much faster than realtime.\n\nI have also tested on nVidia 1650: slower than 1080Ti but pretty good, much faster than realtime.\n\nI have also tested on Intel HD Graphics 4000 inside Core i7-3612QM, the relative speed was 0.14 for medium model, 0.44 for small model. That’s much slower than realtime, but I was happy to find my software works even on the integrated mobile GPU launched in 2012.\n\nI’m not sure the performance is ideal on discrete AMD GPUs, or integrated Intel GPUs, have not specifically optimized for them.\n\nIdeally, they might need slightly different builds of a couple of the most expensive compute shaders, mulMatTiled.hlsl and mulMatByRowTiled.hlsl\n\nAnd maybe other adjustments, like the useReshapedMatMul() value in Whisper/D3D/device.h header file.\n\nI don’t know how to measure that, but I have a feeling the bottleneck is memory, not compute.\n\nSomeone on Hacker News has tested on 3060Ti, the version with GDDR6 memory. Compared to 1080Ti, that GPU has 1.3x FP32 FLOPS, but 0.92x VRAM bandwidth. The app was about 10% slower on the 3060Ti.\n\nI have only spent a few days optimizing performance of these shaders.\n\nIt might be possible to do much better, here’s a few ideas.\n\nNewer GPUs like Radeon Vega or nVidia 1650 have higher FP16 performance compared to FP32, yet my compute shaders are only using FP32 data type.\n\nHalf The Precision, Twice The Fun\n\nIn the current version, FP16 tensors are using shader resource views to upcast loaded values, and unordered access views to downcast stored ones.\n\nMight be a good idea to switch to byte address buffers, load/store complete 4-bytes values, and upcast / downcast in HLSL with f16tof32 / f32tof16 intrinsics.\n\nIn the current version all shaders are compiled offline, and Whisper.dll includes DXBC byte codes.\n\nThe HLSL compiler D3DCompiler_47.dll is an OS component, and is pretty fast. For the expensive compute shaders, it’s probably a good idea to ship HLSL instead of DXBC, and compile on startup with environment-specific values for the macros.\n\nIt might be a good idea to upgrade the whole thing from D3D11 to D3D12.\n\nThe newer API is harder to use, but includes potentially useful features not exposed to D3D11: wave intrinsics, and explicit FP16.\n\nAutomatic language detection is not implemented.\n\nIn the current version there’s high latency for realtime audio capture.\n\nSpecifically, depending on voice detection the figure is about 5-10 seconds.\n\nAt least in my tests, the model wasn’t happy when I supplied too short pieces of the audio.\n\nI have increased the latency and called it a day, but ideally this needs a better fix for optimal UX.\n\nFrom my perspective, this is an unpaid hobby project, which I completed over the 2022-23 winter holydays.\n\nThe code probably has bugs.\n\nThe software is provided “as is”, without warranty of any kind.\n\nThanks to Georgi Gerganov for whisper.cpp implementation, and the models in GGML binary format.\n\nI don’t program Python, and I don’t know anything about the ML ecosystem.\n\nI wouldn’t even start this project without a good C++ reference implementation, to test my version against.\n\nThat whisper.cpp project has an example which uses the same GGML implementation to run another OpenAI’s model, GPT-2.\n\nIt shouldn’t be hard to support that ML model with the compute shaders and relevant infrastructure already implemented in this project."
    }
}