{
    "id": "dbpedia_8582_0",
    "rank": 72,
    "data": {
        "url": "https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_basics.html",
        "read_more_link": "",
        "language": "en",
        "title": "C# basics ¶",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.godotengine.org/en/stable/_static/docs_logo.svg",
            "https://docs.godotengine.org/en/stable/_images/attachcsharpscript.webp",
            "https://docs.godotengine.org/en/stable/_images/build_dotnet1.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Introduction: This page provides a brief introduction to C#, both what it is and how to use it in Godot. Afterwards, you may want to look at how to use specific features, read about the differences...",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Godot Engine documentation",
        "canonical_link": "https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_basics.html",
        "text": "C# basics¶\n\nIntroduction¶\n\nThis page provides a brief introduction to C#, both what it is and how to use it in Godot. Afterwards, you may want to look at how to use specific features, read about the differences between the C# and the GDScript API, and (re)visit the Scripting section of the step-by-step tutorial.\n\nC# is a high-level programming language developed by Microsoft. In Godot, it is implemented with .NET 6.0.\n\nAttention\n\nProjects written in C# using Godot 4 currently cannot be exported to the web platform. To use C# on the web platform, consider Godot 3 instead. Android and iOS platform support is available as of Godot 4.2, but is experimental and some limitations apply.\n\nNote\n\nThis is not a full-scale tutorial on the C# language as a whole. If you aren't already familiar with its syntax or features, see the Microsoft C# guide or look for a suitable introduction elsewhere.\n\nPrerequisites¶\n\nGodot bundles the parts of .NET needed to run already compiled games. However, Godot does not bundle the tools required to build and compile games, such as MSBuild and the C# compiler. These are included in the .NET SDK, and need to be installed separately.\n\nIn summary, you must have installed the .NET SDK and the .NET-enabled version of Godot.\n\nDownload and install the latest stable version of the SDK from the .NET download page.\n\nImportant\n\nBe sure to install the 64-bit version of the SDK(s) if you are using the 64-bit version of Godot.\n\nIf you are building Godot from source, make sure to follow the steps to enable .NET support in your build as outlined in the Compiling with .NET page.\n\nConfiguring an external editor¶\n\nC# support in Godot's built-in script editor is minimal. Consider using an external IDE or editor, such as Visual Studio Code or MonoDevelop. These provide autocompletion, debugging, and other useful features for C#. To select an external editor in Godot, click on Editor → Editor Settings and scroll down to Dotnet. Under Dotnet, click on Editor, and select your external editor of choice. Godot currently supports the following external editors:\n\nVisual Studio 2022\n\nVisual Studio Code\n\nMonoDevelop\n\nVisual Studio for Mac\n\nJetBrains Rider\n\nSee the following sections for how to configure an external editor:\n\nJetBrains Rider¶\n\nAfter reading the \"Prerequisites\" section, you can download and install JetBrains Rider.\n\nIn Godot's Editor → Editor Settings menu:\n\nSet Dotnet -> Editor -> External Editor to JetBrains Rider.\n\nIn Rider:\n\nSet MSBuild version to .NET Core.\n\nInstall the Godot support plugin.\n\nVisual Studio Code¶\n\nAfter reading the \"Prerequisites\" section, you can download and install Visual Studio Code (aka VS Code).\n\nIn Godot's Editor → Editor Settings menu:\n\nSet Dotnet -> Editor -> External Editor to Visual Studio Code.\n\nIn Visual Studio Code:\n\nInstall the C# extension.\n\nNote\n\nIf you are using Linux you need to install the Mono SDK for the C# tools plugin to work.\n\nTo configure a project for debugging, you need a tasks.json and launch.json file in the .vscode folder with the necessary configuration.\n\nHere is an example launch.json:\n\n{ \"version\":\"0.2.0\", \"configurations\":[ { \"name\":\"Play\", \"type\":\"coreclr\", \"request\":\"launch\", \"preLaunchTask\":\"build\", \"program\":\"${env:GODOT4}\", \"args\":[], \"cwd\":\"${workspaceFolder}\", \"stopAtEntry\":false, } ] }\n\nFor this launch configuration to work, you need to either setup a GODOT4 environment variable that points to the Godot executable, or replace program parameter with the path to the Godot executable.\n\nHere is an example tasks.json:\n\n{ \"version\":\"2.0.0\", \"tasks\":[ { \"label\":\"build\", \"command\":\"dotnet\", \"type\":\"process\", \"args\":[ \"build\" ], \"problemMatcher\":\"$msCompile\" } ] }\n\nNow, when you start the debugger in Visual Studio Code, your Godot project will run.\n\nVisual Studio (Windows only)¶\n\nDownload and install the latest version of Visual Studio. Visual Studio will include the required SDKs if you have the correct workloads selected, so you don't need to manually install the things listed in the \"Prerequisites\" section.\n\nWhile installing Visual Studio, select this workload:\n\n.NET desktop development\n\nIn Godot's Editor → Editor Settings menu:\n\nSet Dotnet -> Editor -> External Editor to Visual Studio.\n\nNote\n\nIf you see an error like \"Unable to find package Godot.NET.Sdk\", your NuGet configuration may be incorrect and need to be fixed.\n\nA simple way to fix the NuGet configuration file is to regenerate it. In a file explorer window, go to %AppData%\\NuGet. Rename or delete the NuGet.Config file. When you build your Godot project again, the file will be automatically created with default values.\n\nTo debug your C# scripts using Visual Studio, open the .sln file that is generated after opening the first C# script in the editor. In the Debug menu, go to the Debug Properties menu item for your project. Click the Create a new profile button and choose Executable. In the Executable field, browse to the path of the C# version of the Godot editor, or type %GODOT4% if you have created an environment variable for the Godot executable path. It must be the path to the main Godot executable, not the 'console' version. For the Working Directory, type a single period, ., meaning the current directory. Also check the Enable native code debugging checkbox. You may now close this window, click downward arrow on the debug profile dropdown, and select your new launch profile. Hit the green start button, and your game will begin playing in debug mode.\n\nCreating a C# script¶\n\nAfter you successfully set up C# for Godot, you should see the following option when selecting Attach Script in the context menu of a node in your scene:\n\nNote that while some specifics change, most concepts work the same when using C# for scripting. If you're new to Godot, you may want to follow the tutorials on Scripting languages at this point. While some documentation pages still lack C# examples, most notions can be transferred from GDScript.\n\nProject setup and workflow¶\n\nWhen you create the first C# script, Godot initializes the C# project files for your Godot project. This includes generating a C# solution (.sln) and a project file (.csproj), as well as some utility files and folders (.godot/mono). All of these but .godot/mono are important and should be committed to your version control system. Everything under .godot can be safely added to the ignore list of your VCS. When troubleshooting, it can sometimes help to delete the .godot/mono folder and let it regenerate.\n\nExample¶\n\nHere's a blank C# script with some comments to demonstrate how it works.\n\nusingGodot; publicpartialclassYourCustomClass:Node { // Member variables here, example: privateint_a=2; privatestring_b=\"textvar\"; publicoverridevoid_Ready() { // Called every time the node is added to the scene. // Initialization here. GD.Print(\"Hello from C# to Godot :)\"); } publicoverridevoid_Process(doubledelta) { // Called every frame. Delta is time since the last frame. // Update game logic here. } }\n\nAs you can see, functions normally in global scope in GDScript like Godot's print function are available in the GD static class which is part of the Godot namespace. For a full list of methods in the GD class, see the class reference pages for @GDScript and @GlobalScope.\n\nNote\n\nKeep in mind that the class you wish to attach to your node should have the same name as the .cs file. Otherwise, you will get the following error:\n\n\"Cannot find class XXX for script res://XXX.cs\"\n\nGeneral differences between C# and GDScript¶\n\nThe C# API uses PascalCase instead of snake_case in GDScript/C++. Where possible, fields and getters/setters have been converted to properties. In general, the C# Godot API strives to be as idiomatic as is reasonably possible.\n\nFor more information, see the C# API differences to GDScript page.\n\nWarning\n\nYou need to (re)build the project assemblies whenever you want to see new exported variables or signals in the editor. This build can be manually triggered by clicking the Build button in the top right corner of the editor.\n\nYou will also need to rebuild the project assemblies to apply changes in \"tool\" scripts.\n\nCurrent gotchas and known issues¶\n\nAs C# support is quite new in Godot, there are some growing pains and things that need to be ironed out. Below is a list of the most important issues you should be aware of when diving into C# in Godot, but if in doubt, also take a look over the official issue tracker for .NET issues.\n\nWriting editor plugins is possible, but it is currently quite convoluted.\n\nState is currently not saved and restored when hot-reloading, with the exception of exported variables.\n\nAttached C# scripts should refer to a class that has a class name that matches the file name.\n\nThere are some methods such as Get()/Set(), Call()/CallDeferred() and signal connection method Connect() that rely on Godot's snake_case API naming conventions. So when using e.g. CallDeferred(\"AddChild\"), AddChild will not work because the API is expecting the original snake_case version add_child. However, you can use any custom properties or methods without this limitation. Prefer using the exposed StringName in the PropertyName, MethodName and SignalName to avoid extra StringName allocations and worrying about snake_case naming.\n\nAs of Godot 4.0, exporting .NET projects is supported for desktop platforms (Linux, Windows and macOS). Other platforms will gain support in future 4.x releases.\n\nCommon pitfalls¶\n\nYou might encounter the following error when trying to modify some values in Godot objects, e.g. when trying to change the X coordinate of a Node2D:\n\npublicpartialclassMyNode2D:Node2D { publicoverridevoid_Ready() { Position.X=100.0f; // CS1612: Cannot modify the return value of 'Node2D.Position' because // it is not a variable. } }\n\nThis is perfectly normal. Structs (in this example, a Vector2) in C# are copied on assignment, meaning that when you retrieve such an object from a property or an indexer, you get a copy of it, not the object itself. Modifying said copy without reassigning it afterwards won't achieve anything.\n\nThe workaround is simple: retrieve the entire struct, modify the value you want to modify, and reassign the property.\n\nvarnewPosition=Position; newPosition.X=100.0f; Position=newPosition;\n\nSince C# 10, it is also possible to use with expressions on structs, allowing you to do the same thing in a single line.\n\nPosition=Positionwith{X=100.0f};\n\nYou can read more about this error on the C# language reference.\n\nPerformance of C# in Godot¶\n\nAccording to some preliminary benchmarks, the performance of C# in Godot — while generally in the same order of magnitude — is roughly ~4× that of GDScript in some naive cases. C++ is still a little faster; the specifics are going to vary according to your use case. GDScript is likely fast enough for most general scripting workloads.\n\nMost properties of Godot C# objects that are based on GodotObject (e.g. any Node like Control or Node3D like Camera3D) require native (interop) calls as they talk to Godot's C++ core. Consider assigning values of such properties into a local variable if you need to modify or read them multiple times at a single code location:\n\nusingGodot; publicpartialclassYourCustomClass:Node3D { privatevoidExpensiveReposition() { for(vari=0;i<10;i++) { // Position is read and set 10 times which incurs native interop. // Furthermore the object is repositioned 10 times in 3D space which // takes additional time. Position+=newVector3(i,i); } } privatevoidReposition() { // A variable is used to avoid native interop for Position on every loop. varnewPosition=Position; for(vari=0;i<10;i++) { newPosition+=newVector3(i,i); } // Setting Position only once avoids native interop and repositioning in 3D space. Position=newPosition; } }\n\nPassing raw arrays (such as byte[]) or string to Godot's C# API requires marshalling which is comparatively pricey.\n\nThe implicit conversion from string to NodePath or StringName incur both the native interop and marshalling costs as the string has to be marshalled and passed to the respective native constructor.\n\nUsing NuGet packages in Godot¶\n\nNuGet packages can be installed and used with Godot, as with any C# project. Many IDEs are able to add packages directly. They can also be added manually by adding the package reference in the .csproj file located in the project root:\n\n<ItemGroup> <PackageReferenceInclude=\"Newtonsoft.Json\"Version=\"11.0.2\"/> </ItemGroup> ... </Project>\n\nAs of Godot 3.2.3, Godot automatically downloads and sets up newly added NuGet packages the next time it builds the project.\n\nProfiling your C# code¶\n\nThe following tools may be used for performance and memory profiling of your managed code:\n\nJetBrains Rider with dotTrace/dotMemory plugin.\n\nStandalone JetBrains dotTrace/dotMemory.\n\nVisual Studio.\n\nProfiling managed and unmanaged code at once is possible with both JetBrains tools and Visual Studio, but limited to Windows."
    }
}