{
    "id": "dbpedia_8582_2",
    "rank": 33,
    "data": {
        "url": "https://medium.com/%40darioajr/modernizing-dependency-and-package-management-in-c-native-projects-with-visual-studio-2022-and-600d32665d1e",
        "read_more_link": "",
        "language": "en",
        "title": "Modernizing Dependency and Package Management in C++ (Native) Projects with Visual Studio 2022 and NuGet",
        "top_image": "https://miro.medium.com/v2/resize:fit:434/1*3EJOOHyniloFHEv1APLLuA.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:434/1*3EJOOHyniloFHEv1APLLuA.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*m_9w6dgemUiepZ-u98rezw.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*m_9w6dgemUiepZ-u98rezw.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "D@rio",
            "medium.com"
        ],
        "publish_date": "2024-06-19T16:29:16.603000+00:00",
        "summary": "",
        "meta_description": "With the end of support for Visual Studio 2015 on October 14, 2025, many native C++ projects using this version will need to migrate to Visual Studio 2022. This transition will bring several…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@darioajr/modernizing-dependency-and-package-management-in-c-native-projects-with-visual-studio-2022-and-600d32665d1e",
        "text": "Link para o artigo em Português\n\nWith the end of support for Visual Studio 2015 on October 14, 2025, many native C++ projects using this version will need to migrate to Visual Studio 2022. This transition will bring several significant changes that may impact projects, such as:\n\nChanging the C++ standard from version 11 to version 14\n\nUpdating the build toolset from version v140 to v143\n\nMigrating from SDK 8.1 to SDK 10.0 or 10.x\n\nOther compilation restrictions\n\nThese changes may require adjustments in the code and project configurations to ensure compatibility and performance.\n\nUnified Redistributables Package\n\nTo advance the entire Visual Studio platform, Microsoft, since the 2015 version, has unified the Redistributables packages into a single package. This single package maintains the v140 toolset version as a dependency. This means that by installing the new Redistributable, all dependencies for the 2015, 2017, 2019, and 2022 versions will be available. Even if projects are compiled with the v143 toolset, they will still depend on the VC_Runtime v140. This new Redistributable is compatible with all toolsets: v140, v141, v142, and v143.\n\nFor more information, refer to the official documentation.\n\nOrganizing Native Project Dependencies\n\nIn addition to the mentioned changes, it’s crucial to take the opportunity to organize the native dependencies of the project. Many of these dependencies may be scattered across various local and remote folders, environment variables, or macros. Moreover, many source codes that could be in libraries (libs/dlls) might be directly integrated into the project. Migrating without prior organization can increase the overall risk of the application, as well as the timeline and complexity of the process.\n\nLeveraging NuGet for Native Libraries in C++\n\nTo address these challenges, it is advisable to divide part of the code into libraries and manage the dependencies more appropriately for new projects. In this context, packaging native libraries with NuGet stands out as an efficient solution.\n\nWhat is NuGet?\n\nNuGet is an essential tool for package management in the .NET platform, created to simplify the process of adding, removing, and updating libraries and tools in development projects. Developed by Microsoft, NuGet integrates seamlessly with Visual Studio, offering an intuitive interface for developers of all experience levels.\n\nKey Features\n\nEase of Integration: NuGet is integrated with Visual Studio, making the installation and updating of packages extremely simple and intuitive. Through the NuGet Package Manager, developers can search, install, and update packages directly from the IDE.\n\nDependency Management: One of NuGet’s greatest advantages is the ability to automatically manage package dependencies. When a package is installed, NuGet ensures that all necessary dependencies are also installed and correctly configured.\n\nPublic and Private Repositories: NuGet allows the creation of public repositories, like the NuGet Gallery, where thousands of packages are available to the community. Additionally, companies and developers can set up private repositories to distribute packages internally.\n\nMulti-Platform Support: Although focused on the .NET ecosystem, NuGet supports multi-platform packages, allowing development for .NET Core, .NET Framework, Xamarin, among others.\n\nHow It Works\n\nWhen starting a new project or adding new features, developers can use NuGet to search for packages that meet their needs. This can be done through the Visual Studio graphical interface or via the command line using the nuget command or the .NET CLI. Once installed, NuGet manages the packages and their versions, keeping the project up-to-date and functioning correctly.\n\nBenefits of Using NuGet\n\nEfficiency: Automates the installation and updating of libraries, saving time and reducing errors.\n\nCollaboration: Facilitates code sharing between different projects and teams.\n\nSimplified Maintenance: With NuGet, the maintenance of libraries and tools is centralized, simplifying the update and bug-fix processes.\n\nNuGet for Native Libraries in C++\n\nBesides being widely used for package management in the .NET platform, NuGet also offers robust support for native C++ libraries. This extends its reach and utility, allowing C++ developers to enjoy the same dependency management and package distribution conveniences that .NET developers have.\n\nSupport for Native Libraries\n\nNuGet supports packages containing native C++ libraries, facilitating the integration of C++ code into projects that use other languages supported by NuGet, like C#. Native packages can include .h (header files), .lib (libraries), and .dll (dynamic link libraries), as well as other necessary assets.\n\nKey Features for C++\n\nDependency Management: Just like in .NET applications, NuGet automatically manages dependencies for C++ packages, ensuring that all required libraries are downloaded and configured correctly.\n\nSimplified Project Configuration: Developers can easily add native NuGet packages to their C++ projects in Visual Studio, simplifying the process of configuring include paths and libraries, as well as setting build properties.\n\nIntegration with CMake: For projects using CMake, NuGet facilitates the inclusion of packages and the configuration of the build environment, integrating NuGet packages directly into CMake scripts.\n\nMulti-Platform Packages: NuGet allows the creation and distribution of packages that work across multiple platforms, such as Windows, Linux, and macOS. This is particularly useful for developers who need to support various platforms with their C++ libraries.\n\nHow It Works for C++\n\nTo use NuGet with C++ libraries, developers can create packages containing header files and compiled libraries. These packages are then published to a NuGet repository, from where they can be installed in other projects.\n\nThe installation and update process is simple:\n\nSearch and Installation: Using the NuGet Package Manager in Visual Studio, developers can search for and install native C++ library packages.\n\nAutomatic Configuration: NuGet automatically configures the project, adjusting include and library paths as necessary.\n\nUpdates: Keeping packages updated is easy, with NuGet managing versions and dependencies to ensure the project always uses the latest and most stable libraries.\n\nBenefits of Using NuGet for C++\n\nDevelopment Efficiency: Automates the inclusion of libraries and their dependencies, saving time and effort for developers.\n\nEase of Maintenance: Simplifies the process of updating libraries, ensuring projects use the latest versions and fixes.\n\nSimplified Distribution: Facilitates sharing C++ libraries between different projects and teams, promoting code reuse.\n\nPackaging a Native Project (DLL or Lib) in NuGet\n\nPackaging a native project (DLL or Lib) in NuGet is a process that simplifies the distribution and management of native C++ libraries. Here is a step-by-step guide to creating a NuGet package for a native project:\n\nProject Preparation\n\nStructure Your Project: Ensure your project is well-organized. Separate the header files (.h), libraries (.lib), and DLLs (.dll) into appropriate directories.\n\nCompile Your Library: Compile your DLL or Lib using Visual Studio, ensuring all necessary files are available.\n\nCreating the .nuspec File\n\nCreate a .nuspec File: This file defines the metadata of your NuGet package, such as the package ID, version, description, and dependencies.\n\nExample .nuspec file:\n\n<?xml version=\"1.0\"?>\n\n<package >\n\n<metadata>\n\n<id>YourPackageName</id>\n\n<version>1.0.0</version>\n\n<authors>YourName</authors>\n\n<owners>YourName</owners>\n\n<description>Your package description</description>\n\n<dependencies>\n\n<!-- Add your package dependencies here -->\n\n</dependencies>\n\n</metadata>\n\n<files>\n\n<file src=\"path\\to\\your\\files\\*.h\" target=\"build\\native\\include\" />\n\n<file src=\"path\\to\\your\\files\\*.lib\" target=\"build\\native\\lib\" />\n\n<file src=\"path\\to\\your\\files\\*.dll\" target=\"build\\native\\bin\" />\n\n</files>\n\n</package>\n\nCreating the .targets File\n\nCreate a .targets File: This file specifies additional configurations that should be applied to the project consuming the package.\n\nExample .targets file:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n<ItemGroup>\n\n<IncludePath Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\">\n\n$(MSBuildThisFileDirectory)..\\include;\n\n</IncludePath>\n\n<LibraryPath Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\">\n\n$(MSBuildThisFileDirectory)..\\lib;\n\n</LibraryPath>\n\n</ItemGroup>\n\n<PropertyGroup>\n\n<AdditionalDependencies Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\">\n\n%(AdditionalDependencies);YourLibraryName.lib;\n\n</AdditionalDependencies>\n\n</PropertyGroup>\n\n</Project>\n\nBuilding the NuGet Package\n\nUse the NuGet CLI: Open the terminal or command prompt and navigate to the directory where the .nuspec file is located.\n\nCommand to Create the Package:\n\nnuget pack YourPackageName.nuspec\n\nThis will generate a .nupkg file containing your NuGet package.\n\nPublishing the Package\n\nPublish to NuGet.org: If you want to share your package publicly, you can publish it to NuGet.org.\n\nCommand to publish:\n\nnuget push YourPackageName.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey YOUR_API_KEY\n\n2. Private Repositories: If you prefer to keep the package internal, you can configure it in a private NuGet repository (local folder, network), artifact manager like Artifactory or Nexus, or a package server like Azure DevOps Artifacts or GitHub Packages.\n\nConclusion\n\nPackaging a native project in NuGet not only facilitates dependency management but also promotes code reuse and simplifies the distribution of libraries. By following these steps, you can efficiently create and publish NuGet packages for native libraries, improving the organization and maintenance of your projects.\n\nI have created a C++ project example demonstrating a static library (static lib) using a dynamic library (dynamic lib) as a dependency, installed via NuGet. Additionally, I included a script to package our Lib project in NuGet to simplify the process. You can check the code and details in the repository: MyNuGetNativeLib.\n\n#CPlusPlus #CPlusPlusDevelopment #VisualStudio2022 #NuGet #DependencyManagement #NativeLibraries #CppMigration #SoftwareDevelopment #CodeOptimization #TechUpgrade #MicrosoftVisualStudio #NativeCPlusPlus #ProgrammingTools #DevTools #CodePackaging #DevCommunity #CppLibraries #SoftwareEngineering #TechMigration #ProjectManagement #DevTips"
    }
}