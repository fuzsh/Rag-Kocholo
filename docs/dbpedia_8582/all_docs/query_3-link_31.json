{
    "id": "dbpedia_8582_3",
    "rank": 31,
    "data": {
        "url": "https://aws.amazon.com/what-is/net/",
        "read_more_link": "",
        "language": "en",
        "title": "What is .Net?",
        "top_image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "meta_img": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "images": [
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_01_Product-Features_SqInk.a8d5666758afc5121b4eb818ae18126031c4b61e.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_02_Sign-Up_SqInk.f43d5ddc9c43883eec6187f34c68155402b13312.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_03_Start-Building_SqInk.6a1ef4429a6604cda9b0857084aa13e2ee4eebca.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Find out what is  .Net and how to use Amazon Web Services for  .Net",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services, Inc.",
        "canonical_link": "https://aws.amazon.com/what-is/net/",
        "text": ".NET is an open-source platform for building desktop, web, and mobile applications that can run natively on any operating system. The .NET system includes tools, libraries, and languages that support modern, scalable, and high-performance software development. An active developer community maintains and supports the .NET platform.\n\nIn simple terms, the .NET platform is a software that can do these tasks:\n\nTranslate .NET programming language code into instructions that a computing device can process.\n\nProvide utilities for efficient software development. For example, it can find the current time or print text on the screen.\n\nDefine a set of data types to store information like text, numbers, and dates on the computer.\n\nVarious implementations of .NET allow .NET code to execute on different operating systems like Linux, macOS, Windows, iOS, Android, and many others.\n\n.NET Framework\n\n.NET Framework is the original .NET implementation. It supports running websites, services, desktop apps, and more on Windows. Microsoft released .NET Framework in the early 1990s.\n\n.NET Core\n\nMicrosoft launched .NET Core in late 2014 to enable cross-platform support for .NET developers. The company released the newest version of the .NET Core, .NET 5.0, in November 2020 and renamed it .NET. The term .NET in this article refers to .NET 5.0. .NET Core is open-source on GitHub.\n\n.NET Standard\n\n.NET Standard is a formal specification of different functions (called APIs). Different .NET implementations can reuse the same code and libraries. Each implementation uses both .NET standard APIs and unique APIs specific to the operating systems it runs on.\n\nEase of development\n\nDevelopers like to use .NET because it includes many tools that make their work easier. For example, using the Visual Studio suite, developers can write code faster, collaborate efficiently, and test and fix their code efficiently. The ability to reuse code between implementations reduces the cost of development.\n\nHigh-performing applications\n\n.NET applications provide faster response times and require less computing power. They have strong built in security measures and efficiently perform server-side tasks like database access.\n\nCommunity support\n\n.NET is open source, which means that anyone can get access to use, read, and modify it freely. An active community of developers maintains and improves the .NET software. The .NET Foundation is an independent nonprofit organization established to support the .NET community. It provides learning resources, open-source .NET projects, and various events for .NET developers.\n\nC# (pronounced C sharp), F# (pronounced F sharp), and Visual Basic are the three Microsoft-supported languages for NET development. Different companies and developers have also created other languages that work with the .NET platform.\n\nC#\n\nC# is a simple, modern, and object-oriented programming language. With syntax similar to the C family of languages, C# is familiar to C, C++, Java, and JavaScript programmers.\n\nF#\n\nF# has lightweight syntax and requires very little code to build software. It is an open-source language that makes it easy to write succinct, robust, and high-performing code. It also has a powerful programming rules system and a convenient standard library for building mission-critical, correct, fast, and reliable software.\n\nVisual Basic\n\nVisual Basic is an object-oriented programming language developed by Microsoft. Using Visual Basic makes it fast and easy to create type-safe .NET apps. Type safety is the extent to which a programming language discourages or prevents logical coding errors.\n\nCommon Language Infrastructure (CLI) languages\n\nLanguages like ClojureCLR, Eiffel, IronPython, PowerBuilder, and many others also work on the .NET platform. This is because .NET implements the Common Language Infrastructure (CLI). You can think of CLI as a template for creating .NET-compatible languages.\n\nThe .NET runtime, also called Common Language Runtime (CLR), compiles and executes .NET programs on different operating systems.\n\nJust-in-time compilation\n\nThe CLR compiles code as the developer writes it. During compilation, CLR translates the code into Common Intermediate Language (CIL). For example, code written in C# has English-like syntax and words. .NET compiles or translates this code into CIL. CIL code looks different because it is a lower-level machine code language.\n\nExecution\n\n.NET runtime manages the execution of CIL code. CIL is cross-platform compatible, and any operating system can process it. Cross-platform compatibility refers to an applicationâ€™s ability to run on multiple different operating systems with minimal modifications. For example, an application in C# can run on Windows, Linux, or macOS without any code modifications. Such an application is called a cross-platform application.\n\nThe application model frameworks are a collection of developer tools and libraries that support fast and efficient .NET project development. Different frameworks exist for different types of applications, such as those listed below.\n\nWeb applications\n\nThe ASP.NET framework extends the .NET developer platform specifically for building web-based applications. It supports web technologies such as REST APIS, HTML, CSS, and JavaScript. It provides a built-in user database with multi-factor and external authentication. ASP.NET supports industry-standard authentication protocols with a built-in security mechanism to protect your .NET apps from cyberattacks.\n\nMobile applications\n\nYou can use Xamarin/Mono to run .NET apps on all the major mobile operating systems, including iOS and Android. Xamarin includes Xamarin.Forms, an open-source mobile user interface framework. .NET developers use Xamarin.forms to create a consistent user experience across mobile platforms. All .NET apps can look the same, even on different mobile devices.\n\nDesktop applications\n\nYou can use Xamarin for desktop application development. Additionally, Universal Windows Platform extends .NET Windows 10 application development. Windows Presentation Foundation and Windows Forms are other frameworks for user interface design on Windows.\n\nOther applications\n\nWith ML.NET, you can develop and integrate custom machine learning models into your .NET applications. You can use .NET IoT Libraries to develop applications on sensors and other smart devices. For any solutions not available in the frameworks, you can find many specific function libraries on the public NuGet repository. You can use Nuget to create, share, and use many .NET libraries for almost any purpose."
    }
}