{
    "id": "dbpedia_8582_3",
    "rank": 46,
    "data": {
        "url": "https://www.acumatica.com/blog/nuget-feeds-for-acumatica-libraries/",
        "read_more_link": "",
        "language": "en",
        "title": "Setting Up a NuGet Feed for Acumatica Libraries",
        "top_image": "https://www.acumatica.com/media/2022/06/NuGet-Blog-Image.jpg",
        "meta_img": "https://www.acumatica.com/media/2022/06/NuGet-Blog-Image.jpg",
        "images": [
            "https://www.acumatica.com/content/themes/acumatica/assets/img/svg/logo-dark.svg?v=1",
            "https://www.acumatica.com/media/2022/04/Transparency-Accountability.png",
            "https://www.acumatica.com/content/themes/acumatica/assets/img/svg/logo-dark-2x.svg?v=1 2x",
            "https://www.acumatica.com/media/2022/06/NuGet-Blog-Image.jpg",
            "https://www.acumatica.com/media/2022/06/SS01-NuGetFigure1.png",
            "https://www.acumatica.com/media/2022/06/SS02-NuGetFigure2.png",
            "https://www.acumatica.com/media/2022/06/SS03-NuGetFigure3.png",
            "https://www.acumatica.com/media/2022/06/SS04-NuGetFigure4.png",
            "https://www.acumatica.com/media/2022/06/SS05-NuGetFigure5.png",
            "https://www.acumatica.com/media/2022/06/SS06-NuGetFigure6.png",
            "https://www.acumatica.com/media/2022/11/erp_implementaion_process_v1-720x270-c-default.webp",
            "https://www.acumatica.com/media/2021/11/todd-kuhns-265-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2016/08/Acumaticas-Technical-Tuesday-small-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2021/11/doug-johnson-59-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2014/11/Intercompany-Accounting-small-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2021/11/Ali-1-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2024/08/081424_Featured_ExecProfileDougJohnson_Acumatica-720x270-c-default.png",
            "https://www.acumatica.com/media/2023/10/Anna-Gant-50x50-c-default.png",
            "https://www.acumatica.com/media/2024/08/1720472310160-1-720x270-c-default.png",
            "https://www.acumatica.com/media/2022/08/louisa-gooding-circle-50x50-c-default.png",
            "https://www.acumatica.com/media/2024/08/080724_Featured-AcumaticaDifference_Acumatica-2-1-720x270-c-default.png",
            "https://www.acumatica.com/media/2021/11/doug-johnson-59-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2019/05/SkiTouring-small-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2019/05/Marco-Villaseñor-50x50-c-default.png",
            "https://www.acumatica.com/media/2019/07/AsynchMultiThreading-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2019/06/Zaletskyy-Yuriy-50x50-c-default.png",
            "https://www.acumatica.com/media/2019/07/Multithreading-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2019/06/Zaletskyy-Yuriy-50x50-c-default.png",
            "https://www.acumatica.com/media/2022/11/erp_implementaion_process_v1-720x270-c-default.webp",
            "https://www.acumatica.com/media/2021/11/todd-kuhns-265-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2016/08/Acumaticas-Technical-Tuesday-small-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2021/11/doug-johnson-59-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2014/11/Intercompany-Accounting-small-720x270-c-default.jpg",
            "https://www.acumatica.com/media/2021/11/Ali-1-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2024/08/081424_Featured_ExecProfileDougJohnson_Acumatica-720x270-c-default.png",
            "https://www.acumatica.com/media/2023/10/Anna-Gant-50x50-c-default.png",
            "https://www.acumatica.com/media/2024/08/1720472310160-1-720x270-c-default.png",
            "https://www.acumatica.com/media/2022/08/louisa-gooding-circle-50x50-c-default.png",
            "https://www.acumatica.com/media/2024/08/080724_Featured-AcumaticaDifference_Acumatica-2-1-720x270-c-default.png",
            "https://www.acumatica.com/media/2021/11/doug-johnson-59-1-scaled-50x50-c-default.jpg",
            "https://www.acumatica.com/media/2022/06/TonyLanzer-Headshot-140x140-c-default.jpg",
            "https://www.acumatica.com/content/themes/acumatica/assets/img/svg/logo-white.svg?v=1",
            "https://www.acumatica.com/content/themes/acumatica/assets/img/privacyoptions29x14.png",
            "https://googleads.g.doubleclick.net/pagead/viewthroughconversion/1037384112/?value=0&guid=ON&script=0"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tony Lanzer"
        ],
        "publish_date": "2022-06-23T00:00:00",
        "summary": "",
        "meta_description": "A guide through the process of setting up a NuGet feed for Acumatica libraries to simplify the referencing of common code in customizations.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?v=1",
        "meta_site_name": "Acumatica Cloud ERP",
        "canonical_link": "https://www.acumatica.com/blog/nuget-feeds-for-acumatica-libraries/",
        "text": "Introduction\n\nSeasoned developers are probably aware of the benefits of using a package manager tool for installation and updates of packaged reference files and libraries. Such packages contain reusable code that are published to a central repository for consuming by other programs. The advantages to using such a tool is to maintain any common code in a common location, rather than needing to copy the individual files around and maintain their versions separately and manually. There are many public package managers available for different languages, frameworks, and platforms; such as the popular NuGet, npm, Bower, and yarn. This article focuses on the usage of NuGet because it is the standard package manager for Microsoft.NET – the platform used for Acumatica and its customizations.\n\nSince I began developing customizations in Acumatica five years ago, and also coming from a deep .NET and client/server full-stack background, I’ve always wanted the Acumatica common libraries to be available as a package and have wondered why such packages weren’t already readily available. I have long wanted to fill this void myself in order to simplify the referencing of these libraries for our own custom code extension libraries. I recently was able to set this up for our company, Aktion Associates (an Acumatica VAR and Gold Certified Partner), and I’d like to share with you how this can be accomplished.\n\nWhat is NuGet?\n\nStepping back for a moment, NuGet is a .NET package manager that’s integrated with Visual Studio.NET – the Microsoft development environment integrated and recommended for use to author code extensions for Acumatica customizations. NuGet is used to create and share reusable packages from a designated public or private host. https://www.nuget.org/ is the main NuGet Gallery repository to which public packages can be published, and from which .NET projects can consume. Popular packages such as Json.NET – a JSON parser and serializer – can be found here, as well as Microsoft.NET framework packages, and many others. Instead of searching the web for an installation program or the specific download file you need for a third-party library, NuGet can be used to retrieve and install the appropriate package of files and the version required simply by selecting it from its public host. NuGet can also be used for packages hosted privately for use internally for yourself or your company. Since Acumatica libraries are not available publicly via nuget.org, this article explains setting up these common libraries as private packages for use in your own customization projects.\n\nThere are many more guidelines for using and configuring NuGet that can be found within its documentation found at https://docs.microsoft.com/en-us/nuget than what is described here.\n\nUsing NuGet with Acumatica\n\nTo reference a NuGet package in your own customization extended library’s Visual Studio project, open your project in Visual Studio, right-click on the project’s References node in the Solution Explorer, and select the Manage NuGet Packages context menu option. This will open a window like the image in Figure 1, which displays NuGet packages already installed, and those available for install. If you Browse for “Newtonsoft.Json”, for example, from nuget.org, it should display that package in the results. When you select a package, you can then choose a specific version available from the specified package host and install it. That package will then show under your project references and its files can be referenced within your extended code. See Figure 2 for an example of referencing the Json.NET library in a C# Visual Studio project after installing it via NuGet.\n\nFigure 1: NuGet Package Manager in Visual Studio\n\nFigure 2: Referencing Json.NET after installing as a reference\n\nThe advantage to referencing libraries via NuGet like this is the simplicity, and allowing it to manage libraries and their versions without needing to do so manually. To then install a newer version of the library, you open the NuGet Package Manager again in Visual Studio from Figure 1, change the version to another available version, and Update. This is how I’d like Acumatica common library references to behave, and which is now possible with the solution outlined below.\n\nCreating a NuGet Package\n\nThe first step is to create a NuGet package containing common Acumatica libraries. These common libraries are the most often used when writing a code extension in an external library. They include the following:\n\nPX.Common.dll\n\nPX.Common.Std.dll\n\nPX.CS.Contracts.dll\n\nPX.Data.dll\n\nPX.Objects.dll\n\nI also like to include PX.Data.BQL.Fluent.dll because I prefer using Fluent BQL syntax within code.\n\nThe Package Manifest\n\nA NuGet package manifest is created by defining the contents in a .nuspec XML file. The schema for a .nuspec file can be found within its documentation at https://docs.microsoft.com/en-us/nuget/reference/nuspec. The following XML shows an example of the contents of a .nuspec file (e.g. Acumatica.nuspec) for the Acumatica libraries mentioned above.\n\n(Acumatica.nuspec contents)\n\nGIST: https://gist.github.com/tlanzer-aktion/e76f8bc275cc3415344a1183666e59b5\n\nWithin this XML, the package is supplied a name (<id>) and a version (<version>), the files to reference in the destination Visual Studio project (<references>), and the source files to include in the package (<files>). Notice in this example that I’m naming the package Acumatica.PX.Main, and I’m including Acumatica build version 22.100.178 of its libraries.\n\nCreating the Package\n\nThe next step is to create the package from the .nuspec package manifest. You can download nuget.exe from https://www.nuget.org/downloads, which is a command-line program used to create a NuGet package from a NuGet manifest. On the command line, the syntax to create the example package using nuget.exe is:\n\nnuget pack Acumatica.nuspec -NoPackageAnalysis\n\nThis syntax assumes that both nuget.exe and Acumatica.nuspec is accessible within the current path, so if not, the path for one or both should be specified. The resulting package created from the example should be Acumatica.PX.Main.22.100.178.nupkg.\n\nAdditional Package Versions\n\nNow that we have one build version of Acumatica’s common libraries packaged, you can continue creating additional versions as needed or as they are released by Acumatica. To create a new package for the following build version – 22.101.85 – you can repeat the instructions above but replace the version number and include that version of the libraries. You should then end up with a new package named Acumatica.PX.Main.22.101.85.nupkg, and so on.\n\nSetting Up a NuGet Feed\n\nTo make a package available for project reference, it needs to be published to a NuGet feed. Since the package is meant for your own consumption, you’ll want to create a private feed for yourself or your organization. A private feed can be a local file share or server, or a remote private hosting service like Azure Artifacts or GitHub Package Registry. At Aktion Associates we use Azure DevOps as our source control repository, so we use Azure Artifacts as our feed host, and this will also be used for examples in this article.\n\nCreating the Feed\n\nTo create a NuGet Feed in Azure Artifacts, open the Azure DevOps project in which you want to create a feed and choose Create Feed on the main Artifacts page. The dialog shown in Figure 3 should open. After naming and configuring the feed according to the visibility and scope of your needs, create the feed.\n\nFigure 3: Create New Feed dialog\n\nPublishing to the Feed\n\nNow that you have both a NuGet package and a NuGet feed set up, you can publish the package to the feed. On the main Azure Artifacts page, choose Connect to Feed, then select NuGet.exe as the connection type, and copy the new feed URL shown. Then, on the command line, the syntax to publish the example package using nuget.exe is:\n\nnuget push -Source <feed url> -ApiKey <any string> Acumatica.PX.Main.22.100.178.nupkg\n\nThis syntax assumes that both nuget.exe and Acumatica.PX.Main.22.100.178.nupkg is accessible within the current path, so if not, the path for one or both should be specified. The specified package should now be published to the feed and be accessible for referencing according to the configuration of your feed. Figure 4 shows an example private feed and package inside Azure Artifacts after creation and publishing.\n\nFigure 4: Feed created in Azure Artifacts\n\nUsing Your NuGet Feed\n\nAfter publishing your packages to your NuGet feed, you should be able to then reference the package and version from your feed inside your Visual Studio project as described in Using NuGet with Acumatica. In the NuGet Package Manager, add your new package source (i.e. the NuGet feed you created) from the Options dialog opened from the gear icon next to the Package source dropdown. After adding the feed, the published package should display in the list of available packages. Select the package in the list, and then the different published versions should be available in the Version dropdown to choose for installation or update. See Figure 5 for an example of what the Package Manager shows after selecting the package (e.g. Acumatica.PX.Main) in your new NuGet feed.\n\nFigure 5: Selecting a NuGet package and version\n\nOnce you choose a package and appropriate version, installing or updating it creates reference to that package’s library versions in your Visual Studio project. See Figure 6 for an example of a C# Visual Studio project after installing the Acumatica.PX.Main NuGet package from a NuGet feed.\n\nFigure 6: Visual Studio project after package installation\n\nOther Acumatica Libraries\n\nYou can take this solution further and create additional NuGet packages for other commonly used Acumatica libraries like PX.Api, PX.Caching, PX.Web, etc. and repeat the steps mentioned above for these. Once those packages are created and published to your feed, you will also be able to reference these in the same manner.\n\nYour Own Packages\n\nIf you have your own custom code extensions or common libraries that are generic enough for sharing across Acumatica modules, customization projects, or even instances; this solution is also a great option for reusing your own Acumatica custom extended libraries by creating NuGet packages for them. For example, Aktion has our own API custom library which adapts the existing Acumatica API to our own best practices for integration and communication, and we share it across projects via our own private feed.\n\nSummary\n\nI hope you find this solution for setting up a NuGet feed for Acumatica library packages useful, and I’d love to hear from you and how you’ve put it into use or adapted it for your own needs. It does require a bit of maintenance to keep package versions updated in your feed, but the efficiency gained by easily referencing and consuming an appropriate library version for your customizations and upgrade needs is substantial and valuable.\n\nHappy Coding!"
    }
}