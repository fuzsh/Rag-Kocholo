{
    "id": "dbpedia_8582_0",
    "rank": 62,
    "data": {
        "url": "https://fullduck.dev/how-to-release-a-nuget-package-locally/",
        "read_more_link": "",
        "language": "en",
        "title": "How To Release a NuGet Package Locally?",
        "top_image": "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/logo_V2-01.png?fit=566552&ssl=1",
        "meta_img": "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/logo_V2-01.png?fit=566552&ssl=1",
        "images": [
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/logo_V2-01.png?fit=566%2C552&ssl=1",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/logo_V2-01.png?fit=566%2C552&ssl=1",
            "https://secure.gravatar.com/avatar/9380dcc8b4f5c892f6dfda01d4a586b7?s=50&d=mm&r=g",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/thumb_V2-01.png?fit=1200%2C628&ssl=1",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/thumb_V2-01.png?fit=1200%2C628&ssl=1",
            "http://fullduck.dev/wp-content/uploads/2021/05/nuget-notfound.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/nuget-notfound.gif?resize=508%2C258",
            "http://fullduck.dev/wp-content/uploads/2021/05/vs-pack.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/vs-pack.gif?resize=797%2C672",
            "http://fullduck.dev/wp-content/uploads/2021/05/cli-pack.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/cli-pack.gif?resize=798%2C626",
            "http://fullduck.dev/wp-content/uploads/2021/05/dotnetcli-pack.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/dotnetcli-pack.gif?resize=798%2C626",
            "http://fullduck.dev/wp-content/uploads/2021/05/release-locally.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/release-locally.gif?resize=984%2C626",
            "http://fullduck.dev/wp-content/uploads/2021/05/findpkg.gif",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2021/05/findpkg.gif?resize=986%2C759",
            "https://secure.gravatar.com/avatar/9380dcc8b4f5c892f6dfda01d4a586b7?s=120&d=mm&r=g",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2022/01/thumb-1.png?fit=300%2C157&ssl=1",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2022/01/thumb_V3.png?fit=300%2C157&ssl=1",
            "https://i0.wp.com/fullduck.dev/wp-content/uploads/2022/01/thumb.png?fit=300%2C157&ssl=1",
            "https://secure.gravatar.com/avatar/3747f14149ad921daa48f6b7b4ec4bb7?s=100&d=mm&r=g",
            "https://secure.gravatar.com/avatar/9380dcc8b4f5c892f6dfda01d4a586b7?s=100&d=mm&r=g",
            "https://secure.gravatar.com/avatar/0641f9a20af81d28fa6cc239c271530e?s=100&d=mm&r=g",
            "https://secure.gravatar.com/avatar/9380dcc8b4f5c892f6dfda01d4a586b7?s=100&d=mm&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Pawel Flajszer"
        ],
        "publish_date": "2021-05-23T11:01:34+00:00",
        "summary": "",
        "meta_description": "An easy-to-follow tutorial on how to set up, deploy, and use your NuGet library locally. Includes video, gifs, and detailed instructions.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Full Duck Dev - Technical blog about .NET development",
        "canonical_link": "https://fullduck.dev/how-to-release-a-nuget-package-locally/",
        "text": "An easy-to-follow tutorial on how to set up, deploy, and use your NuGet library locally. Includes video, gifs, and detailed instructions.\n\nWhen building a library, it’s useful to test it locally, before even pushing it to a test (and definitely prod) environment. The following tutorial shows all the steps necessary to perform those local tests and see exactly what an end-user will see when using your NuGet package. All this, without leaving your machine!\n\nTable Of Contents\n\nVideo tutorial\n\nSetup your environment\n\nFirst, we have to download the NuGet executable and add it to our PATH to use NuGet CLI comfortably. This will allow you to type nuget in your Command Prompt to run any NuGet script. You can skip to the next chapter if you already have it configured.\n\nBefore we attempt to set it up, check if you don’t already have it ready:\n\nPress Win + S\n\nType cmd and press Enter\n\nType nuget and press Enter\n\nIf you see the following message…\n\n'nuget' is not recognized as an internal or external command, operable program or batch file.\n\n…Perform the steps below. Otherwise, move on to the Pack it section:\n\nDownload NuGet.exe from here (latest recommended version is okay)\n\nPlace it in a folder it will be stored in. For example: C:\\Users\\user_name\\NuGet, remember to replace user_name with your own. Copy that folder path (remember not to include nuget.exe in the path.\n\nCopy that path address\n\nPress Win + S\n\nType Environment and press Enter on Edit the system environment variables\n\nIn Advanced tab, click on Environment variables… button\n\nIn User variables, click on Path variable and select Edit\n\nClick New\n\nPaste the path to your nuget.exe\n\nPress OK\n\nRepeat steps 7-10 for System variables\n\nAlternatively, refer to this article.\n\nDifferent ways of packing your library\n\nBefore we release the package, we have to prepare it first. To do that, we use a pack command. I’ll show you three ways to do that.\n\nPack using Visual Studio\n\nOpen your project/solution in Visual Studio\n\nRight-click on the library and select Properties\n\nNavigate to the Package tab\n\nTick Generate NuGet package on build – this will do exactly what is says on the tin. It will automatically pack your NuGet package on build.\n\nInsert package details in the fields below. Make sure to specify the package version. The convention I usually use is Major.Minor.Patch starting with 0.0.0. Add “-beta” suffix for the test release.\n\nSave the file\n\nPress Ctrl + Shift + B or select Build -> Build Solution\n\nRight-click on your library .csproj file in Solution Explorer\n\nSelect Open folder in File Explorer\n\nYou should now see a bin folder, which contains the binary output of your compilation. Enter that folder and go to Debug/Release, whichever configuration you selected when building the project\n\nthe *.nupkg file should be there.\n\nPack using NuGet CLI\n\nNavigate to the folder containing your *.csproj file of the library you’d like to release\n\nType cmd in the File Explorer address bar and hit Enter. This will open Command Prompt\n\nType dotnet build and hit Enter. This will build your project. bin and obj folders should appear.\n\nBack in Command Prompt, type nuget pack and hit Enter. This will generate *.nupkg file in the current directory.\n\nPack using dotnet CLI\n\nNavigate to the folder containing your *.csproj file of the library you’d like to release\n\nType cmd in the File Explorer address bar and hit Enter. This will open Command Prompt.\n\nType dotnet build and hit Enter. This will build your project. bin and obj folders should appear.\n\nBack in Command Prompt, type dotnet pack and hit Enter. This will generate *.nupkg file in the bin/{environment}/ directory, where enviroment is either Debug or Release, depending what you chose for your build.\n\nRelease the package locally\n\nWe’re almost there, we already have a packed library, all we want is to make it available in our Visual Studio project locally, so we can imitate using a normal NuGet package downloaded from a remote repository.\n\nTo do that, follow the below steps:\n\nOpen Command Prompt as an Administrator in the location of your *.nupkg file.\n\nType nuget add package_filename.nupkg -Source \"C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\NuGetPackages\\\\\" (escape characters and quotation marks are important since the path contains spaces)\n\nReplace package_filename (your nupkg file name) with the correct value and hit Enter. The source specifies where the package will be unpacked to – the location I provided is the default location for offline NuGet packages in Visual Studio. This will matter in a minute.\n\nUse your local NuGet package\n\nOpen the project you’d like to install your library to in Visual Studio\n\nRight-click on the solution/project – wherever you’d like to install your new NuGet package and select Manage NuGet Packages…\n\nIn the top-right, you should have a dropdown menu under Package Source with a default value of nuget.org. Visual Studio normally searches there for the packages by default, but since our package is deployed locally, change it to Microsoft Visual Studio Offline Packages. (You can configure where that location is by pressing a little cog icon next to the dropdown if you’d like to change it)\n\nSearch your package name and hit Enter. It should appear on the list\n\nYou can now enjoy your package locally!\n\nConclusion\n\nAs you can see, deploying your NuGet package locally is really easy if you follow those simple steps. In the end, it’s all about generating that *.nupkg file and adding it to the offline feed in the correct folder, so Visual Studio Offline Package Manager can find it."
    }
}