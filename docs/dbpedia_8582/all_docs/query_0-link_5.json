{
    "id": "dbpedia_8582_0",
    "rank": 5,
    "data": {
        "url": "https://www.yoctopuce.com/EN/article/c-net-core-and-nuget",
        "read_more_link": "",
        "language": "en",
        "title": "C#, .NET Core, and NuGet",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.yoctopuce.com/pubarchive/2019-03/nuget_logo_3.png",
            "https://www.yoctopuce.com/pubarchive/2019-03/new_proj_1.jpg",
            "https://www.yoctopuce.com/pubarchive/2019-03/nuget_manager_1.jpg",
            "https://www.yoctopuce.com/pubarchive/2019-03/select_package_1.jpg",
            "https://www.yoctopuce.com/pubarchive/2019-03/reference_1.jpg",
            "https://www.yoctopuce.com/img/yoctopuce-logo.png",
            "https://www.yoctopuce.com/img/small_magnifier.png",
            "https://www.yoctopuce.com/img/bookmark.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/img/iicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This week, we publish a new version of our C# library with some interesting new features: the library is now available through the NuGet package manager, we support .NET Core 2, and finally we managed to get rid of the dllmap entries that we needed to add when using our library with Mono.\n\nLet's start with the last item: No more need for dllmap entries in the app.config file.\n\nAs we explained it three weeks ago, the C# library is made of C# code but also of a \"yapi\" dynamic library which is compiled for each OS. Under Windows, the .NET virtual machine can automatically retrieve the correct version of this library, but with Mono we had to add entries in the application configuration file for the library to work. This is not necessary anymore.\n\nWe must simply copy in the executable directory the different versions of the \"yapi\" library which are located in the Sources/dll subdirectory. Concretely, for your application to work with Mono, you must have in your executable directory the following files:\n\nyapi.dll : the \"yapi\" library for Windows 32 bits\n\namd64/yapi.dll : the \"yapi\" library for Windows 64 bits\n\nlibyapi-i386.so :the \"yapi\" library for Linux 32 bits\n\nlibyapi-amd64.so : lthe \"yapi\" library for Linux 64 bits\n\nlibyapi-armhf.so : the \"yapi\" library for Linux ARM\n\nlibyapi.dylib :the \"yapi\" library for macOS (64 bits)\n\nlibyapi32.dylib : the \"yapi\" library for macOS (32 bits)\n\nWhen executing, our library automatically detects the OS and loads the correct version of the library.\n\n.NET Core 2\n\nGetting rid of dllmap entries allowed us to add support for .NET Core 2.x. .NET Core is a new implementation of the .NET standard created by Microsoft.\n\nThis implementation has the following advantages:\n\nThe Windows, macOS, and Linux operating systems are supported\n\nIntel 32 and 64 bits processors are supported for all the OSes, as well as ARM processors but only for Linux\n\nThe project is Open Source (https://github.com/dotnet/core)\n\nMicrosoft actively contributes to the development\n\nFor more information on what .Net Core is, we leave you to read Microsoft's documentation on the topic.\n\nTo use the C# library in a .NET Core project, the process is identical: you must add the .cs files and copy the Sources/dll subdirectory files into the executable directory. But as we are going to see below, you can use NuGet to automate this task.\n\nThe NuGet package\n\nWe took advantage of these modifications to publish our library under NuGet: https://www.nuget.org/packages/Yoctopuce.YoctoLib/\n\nNuGet is a package manager developed by Microsoft for .NET projects. Its aim is to ease the life of developers by taking care of downloading and installing the libraries which are used in a project.\n\nThe problem with NuGet is that between the different types of Visual Studio projects, the different versions of the NuGet client, and now the new .Net Core projects, it's difficult to have one library which works for everybody.\n\nIn order to have a easy to use package, we limited its use to the following cases:\n\nA \"traditional\" .NET project since Framework 4.5\n\nA .Net Core project since version 2.0\n\nIn all other cases, you can still use our library, but you must manually add the source files and copy the \"yapi\" dynamic library, as explained in our introductory post.\n\nAn example is better than long speeches\n\nTo show how to use the NuGet package, we are going to write a short command line program which lists the Yoctopuce modules connected to the USB ports.\n\nThe source code is that of the \"Doc-Inventory\" example which is included with the library sources:\n\nclass Program\n\n{\n\nstatic void Main(string[] args)\n\n{\n\nYModule m;\n\nstring errmsg = \"\";\n\nif (YAPI.RegisterHub(\"usb\", ref errmsg) != YAPI.SUCCESS) {\n\nConsole.WriteLine(\"RegisterHub error: \" + errmsg);\n\nEnvironment.Exit(0);\n\n}\n\nConsole.WriteLine(\"Device list\");\n\nm = YModule.FirstModule();\n\nwhile (m != null) {\n\nConsole.WriteLine(m.get_serialNumber()\n\n+ \" (\" + m.get_productName() + \")\");\n\nm = m.nextModule();\n\n}\n\nYAPI.FreeAPI();\n\n}\n\n}\n\nWe are going to show you how to implement this short program in a .NET Framework project as well as in a .NET Core project.\n\n.NET Framework 4.5 and above\n\nYou must start by creating a new project of type \"Console App (.NET Framework)\" in Visual Studio.\n\nYou must create a new project of type 'Console App (.NET Framework)' in Visual Studio\n\nThen, you must access to the \"NuGet package manager\". You can do so by using the menu (\"Tools\"->\"NuGet Package Manage\"->\"Manage NuGet Package for Solutions...\") or with a right click on the project by selecting \"Manage NuGet Package...\".\n\nThe NuGet tab is available through the menu in Visual Studio\n\nThe NuGet tab allows you to look for the Yoctopuce package and to add it to the project directly from NuGet.org with the \"Install\" button.\n\nThe NuGet tab allows you to look for the Yoctopuce package and to add it to the project\n\nWhen installed, the Yoctopuce.YoctoLib NuGet package is displayed in the project Reference.\n\nThe Yoctopuce.YoctoLib package is listed in the project references\n\nHere you are. There is nothing else to do. When compiling, the dynamic libraries are automatically copied with the executable in the output directory.\n\nNote that all the versions of the \"yapi\" dynamic library are copied, including the Linux and macOS versions. This means that you can directly use the application under Linux or macOS with Mono. You only need to copy the complete directory and to run the executable with Mono.\n\n.NET Core 2.x\n\nWe are going to see how to implement the same application but this time under Linux using .NET Core 2.2.\n\nUnder Linux, there is no IDE, but only the dotnet tool which enables you to compile and run a .NET Core project.\n\nWe start by creating a new project of type \"console\" with the new command and the \"console\" option:\n\nyocto@linux-laptop:~/demo$ dotnet new console\n\nThen, we must edit the Program.cs file to add the code of our example in the Main() function.\n\nBefore compiling the project, we need the Yoctopuce.YoctoLib package. For this we use the add package command with the name of the Yoctopuce package.\n\nyocto@linux-laptop:~/demo$ dotnet add package Yoctopuce.YoctoLib\n\nThen you can directly run the executable with the run command:\n\nyocto@linux-laptop:~/demo$ dotnet run Device list LIGHTMK3-A10AB (Yocto-Light-V3) yocto@linux-laptop:~/demo$\n\nConclusion"
    }
}