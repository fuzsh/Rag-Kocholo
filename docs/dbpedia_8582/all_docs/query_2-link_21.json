{
    "id": "dbpedia_8582_2",
    "rank": 21,
    "data": {
        "url": "https://stackify.com/net-core-vs-net-framework/",
        "read_more_link": "",
        "language": "en",
        "title": ".NET core vs .NET framework",
        "top_image": "https://stackify.com/wp-content/uploads/2022/01/NET-Core-vs-.NET-Framework-881x461-1.jpg",
        "meta_img": "https://stackify.com/wp-content/uploads/2022/01/NET-Core-vs-.NET-Framework-881x461-1.jpg",
        "images": [
            "https://stackify.com/wp-content/uploads/2024/05/logo-1-150x47.webp",
            "https://stackify.com/wp-content/uploads/2024/05/logo-1-150x47.webp",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-closew.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-closew.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-closew.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-closew.svg",
            "https://stackify.com/wp-content/uploads/2022/01/NET-Core-vs-.NET-Framework-881x461-1.jpg",
            "https://stackify.com/wp-content/uploads/2022/01/NET-Core-vs-.NET-Framework-881x461-1.jpg",
            "https://stackify.com/wp-content/uploads/2017/07/dot-net-core-dot-net-framework-shared-api-12581.png",
            "https://stackify.com/wp-content/uploads/2017/07/dot-net-core-dot-net-framework-shared-api-12581.png",
            "https://stackify.com/wp-content/uploads/2017/07/dotnetcore-screenshot-12580.png",
            "https://stackify.com/wp-content/uploads/2017/07/dotnetcore-screenshot-12580.png",
            "https://stackify.com/wp-content/uploads/2024/03/sp5.png",
            "https://stackify.com/wp-content/uploads/2024/03/sp5.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/apm-icon-sml.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/apm-icon-sml.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/profiling-icon-small.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/profiling-icon-small.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/errors-icon-sml.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/errors-icon-sml.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/logs-icon-small.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/logs-icon-small.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/monitor-icon-small.png",
            "https://stackify.com/wp-content/themes/stackify/assets/img/monitor-icon-small.png",
            "https://secure.gravatar.com/avatar/b3f4b8e5d5b39734bb1b5a6661faa538?s=100&d=mm&r=g",
            "https://secure.gravatar.com/avatar/b3f4b8e5d5b39734bb1b5a6661faa538?s=100&d=mm&r=g",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/themes/stackify/assets/img/search-icon.svg",
            "https://stackify.com/wp-content/uploads/2018/02/Cloud-Depyloyment-Models-Featured-Image-Stackify-881x441-1-150x75.webp",
            "https://stackify.com/wp-content/uploads/2018/02/Cloud-Depyloyment-Models-Featured-Image-Stackify-881x441-1-150x75.webp",
            "https://stackify.com/wp-content/uploads/2018/04/Understanding_Java_Stack_Trace-881x441-1-150x75.webp",
            "https://stackify.com/wp-content/uploads/2018/04/Understanding_Java_Stack_Trace-881x441-1-150x75.webp",
            "https://stackify.com/wp-content/uploads/2018/08/Best-PHP-Frameworks-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2018/08/Best-PHP-Frameworks-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2018/10/Web-API-Error-Handling2-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2018/10/Web-API-Error-Handling2-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2019/02/Feature-Image-for-Blog-Article-PHP-Error-Log-Basics-2-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2019/02/Feature-Image-for-Blog-Article-PHP-Error-Log-Basics-2-881x441-1-150x75.jpg",
            "https://stackify.com/wp-content/uploads/2023/03/The-Ultimate-Guide-to-Performance-Testing-and-Software-Testing-1-150x84.webp",
            "https://stackify.com/wp-content/uploads/2023/03/The-Ultimate-Guide-to-Performance-Testing-and-Software-Testing-1-150x84.webp",
            "https://stackify.com/wp-content/uploads/2024/08/Top-LInux-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/08/Top-LInux-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/08/Developers-Guide-to-Getting-Started-with-Pandas-P-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/08/Developers-Guide-to-Getting-Started-with-Pandas-P-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/07/Python-Logging-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/07/Python-Logging-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/07/Java-Programming-120x120.webp",
            "https://stackify.com/wp-content/uploads/2024/07/Java-Programming-120x120.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Stackify"
        ],
        "publish_date": "2023-09-06T07:00:00+00:00",
        "summary": "",
        "meta_description": "Wondering about the difference between .NET Core & .NET Framework? Here’s a quick guide on how to pick the right runtime environment for your .NET applications",
        "meta_lang": "en",
        "meta_favicon": "https://stackify.com/wp-content/uploads/2023/02/favicon.png",
        "meta_site_name": "Stackify",
        "canonical_link": "https://stackify.com/net-core-vs-net-framework/",
        "text": ".NET Core vs .NET Framework: How to Pick a .NET Runtime for an Application\n\nA while back we predicted that .NET Core would be the next big thing, offering developers many options in application development. Indeed, there is huge demand for developers skilled in this technology. But how does it differ from the .NET Framework, and what do you need to know to use them both effectively?\n\nToday, we’ll contrast .NET Core vs. .NET Framework to help you choose which one to use for your next project. In this post, we’ll explain their key differences and how to make the best use of each. Let’s begin with a background on .NET.\n\nHistorically, the .NET Framework has only worked on Windows devices. The Xamarin and Mono projects worked to bring .NET to mobile devices, macOS and Linux. Now, .NET Core provides a standard base library that’s usable across Windows, Linux, macOS and mobile devices (via Xamarin).\n\nThere are four major components of .NET architecture:\n\nCommon language specification (CLS) defines how objects are implemented so they work everywhere .NET works. CLS is a subset of Common Type System (CTS) – which sets a common way to describe all types\n\nFramework class library (FCL) is a standard library that collects reusable classes, interfaces and value types\n\nCommon language runtime (CLR) is the virtual machine that runs the framework and manages the execution of .NET programs\n\nVisual Studio is used to create standalone applications, interactive websites, web applications and web services\n\n.NET Core vs .NET Framework\n\nMicrosoft maintains both runtimes for building applications with .NET while sharing many of the same APIs. This shared API is called the .NET Standard.\n\nImage via Wikipedia\n\nDevelopers use the .NET Framework to create Windows desktop and server-based applications. This includes ASP.NET web applications. On the other hand, .NET Core is used to create server applications that run on Windows, Linux and Mac. It does not currently support creating desktop applications with a user interface. Developers can write applications and libraries in VB.NET, C# and F# in both runtimes.\n\nC# is an object-oriented language similar to other C-style languages. The learning curve should not be a problem for developers already working with C and similar languages.\n\nF# is a cross-platform language that also uses object-oriented programming.\n\nVisual Basic is available in .NET Framework with limited .NET Core support with .NET Core 2.0.\n\nWhen to Use .NET Core\n\nA cross-platform and open-source framework, .NET Core is best when developing applications on any platform. .NET Core is used for cloud applications or refactoring large enterprise applications into microservices.\n\nScreenshot via Microsoft.com\n\nYou should use .NET Core when:\n\nThere are cross-platform needs. Use it when the application needs to run across multiple platforms such as Windows, Linux and macOS. Those operating systems are supported as development workstations (and the list of supported operating systems is growing):\n\nVisual Studio is compatible on Windows with a new limited version on macOS\n\nVisual Studio Code can be used on Windows, Linux and macOS\n\nAll supported platforms allow the use of the command line\n\nUsing Microservices. Microservices, a form of service-oriented architecture, are software applications consisting of small, modular business services. Each service can run a unique process, be deployed independently and be created in different programming applications. .NET Core allows a mix of technologies, is lightweight and scalable for each microservice\n\nWorking with Docker containers. Containers and microservices architecture are often used together. Because it is lightweight and modular, .NET Core works very well with containers. You can deploy cross-platform server apps to Docker containers. .NET Framework works with containers, but the image size is larger\n\nYou have high-performance and scalable system needs. Microsoft recommends running .NET Core with ASP.NET Core for the best performance and scale. This becomes important when using hundreds of microservices. In such a case, a lower number of servers and virtual machines is best. The efficiency and scalability gained should translate to a better user experience in addition to cost savings\n\nYou are running multiple .NET versions side-by-side. To install applications with dependencies on different versions of frameworks in .NET, developers need to use .NET Core. Multiple services are executable on the same server with different versions of .NET\n\nYou want command line interface (CLI) control. Some developers prefer working in lightweight editors and command line control. .NET Core has a CLI for all supported platforms and requires minimal installation on production machines. And, there still is the opportunity to switch to an IDE, such as Visual Studio IDE\n\nWhen Not to Use .NET Core\n\n.NET Core does not have some of the .NET features nor support for all libraries and extensions. As such, you may encounter a few situations in which .NET Core may not be the best option (though continued development will likely eliminate this drawback). Consider the following scenarios:\n\nWindows Forms and WPF applications are not supported – You still have to use Mono to make a .NET desktop application for macOS\n\nASP.NET WebForms don’t exist – Though Microsoft provides strategies for migrating ASP.NET Web Forms apps\n\nYou need to create a WCF service – .NET Core does not currently support WCF. Instead, you would need to make a REST API with ASP.NET Core MVC\n\nMissing 3rd-party library support – .NET Core provides a compatibility shim between .NET Framework and .NET Core. But, you may still have issues with compatibility if the class library uses any .NET Framework APIs that are not supported (though this will help bridge a lot of class libraries to .NET Core)\n\nMissing .NET Framework features – Some .NET Framework functionality is still missing in .NET Core. For example, Entity Framework Core is not the exact same as Entity Framework v6\n\nYou need to access Windows-specific APIs – If your application needs to work with the Windows Registry (WMI or other Windows specific APIs), it won’t work with .NET Core. It is designed to be more sandboxed away from the OS\n\nPartial support for VB.NET and F# – Microsoft and the community continue to work on this but it’s not yet 100%\n\nDevelopers Should Use .NET Framework When…\n\n.NET Framework is distributed with Windows. Generally, it is used to build Windows desktop and large-scale enterprise applications using .NET workflow and data connection tools.\n\nThe .NET Framework provides services that include:\n\nMemory management\n\nType and memory safety\n\nSecurity\n\nNetworking\n\nApplication deployment\n\nData structures\n\nAPIs\n\n.NET Framework can be used with Docker and Windows Containers and is most feasible when:\n\nIt is already being used – Instead of migrating, extend the application. For example, developers can write a new web service in ASP.NET Core\n\nYou’re using third-party libraries or NuGet packages not available in .NET Core – Despite .NET Core’s popularity, you’ll need to use the .NET Framework when working with libraries that aren’t compatible with .NET Core. NuGet is the free and open source package manager for .NET and other Microsoft development platforms. The NuGet ecosystem includes client tools that provide the ability to produce and consume packages. It also has a central package repository for package authors and consumers. It is available as a Visual Studio extension\n\nYou’re using technologies not yet available in .NET Core – .NET Core does not support all .NET Framework technologies. These not-yet-available technologies include:\n\nASP.NET Web Forms applications (no plans to port)\n\nASP.NET Web Pages applications (plans to port)\n\nASP.NET SignalR server/client implementation (plans to port)\n\nWCF services implementation (no plans to migrate, but it is being considered)\n\nWorkflow related services (no plans to port) including Windows Workflow Foundation (WF), Workflow Services (WCF + WF in a single service), and WCF Data Services (formerly known as “ADO.NET Data Services”)\n\nWindows Presentation Foundation (WPF) and Windows Forms (no plans to port)\n\nThe platform does not support .NET Core – Again, not all Microsoft and third-party platforms support it, such as some of Azure’s services. You may encounter some issues even with supported services, which comes with the territory. With .NET Core increasingly gaining traction, it’s becoming easier to find tutorials and workarounds for issues you may encounter. For instance, we encountered a 502.5 Process Failure when trying to start an Azure App Service. So, we published a post offering guidance for others who encounter the same issue\n\nWhen Not to Run .NET Framework\n\nThere are also a few situations in which you shouldn’t run the .NET Framework. These include when:\n\nMultiple OS platforms are required\n\nHigh performance and scalability are needed\n\n.NET Core works\n\nOpen source framework is required\n\nHow to Port from .NET Framework to .NET Core\n\nIf and when you decide to migrate your .NET Framework to .NET Core, follow these steps (after a proper assessment, of course):\n\n1. Analyze Third Party Dependencies\n\nMore than just knowing what the third-party dependencies are, you need to understand how the application functions with the third-party dependencies that run on .NET Core. You also need to be aware of what needs to be done if they do not run.\n\nNuGet packages are easy to check plus the package has a set of folders for each platform. You can also look for a folder or entry on the Dependencies page with any of the following names:\n\nnetstandard1.0 netstandard1.1 netstandard1.2 netstandard1.3 netstandard1.4 netstandard1.5 netstandard1.6 netcoreapp1.0 portable-net45-win8 portable-win8-wpa8 portable-net451-win81 portable-net45-win8-wpa8-wpa81\n\nIf the dependencies are not NuGet packages, the ApiPort tool can check the portability of the dependency.\n\nSince .NET Core 2.0, a compatibility shim allows referencing .NET Framework packages that haven’t been switched to use .NET Standard. Be sure to thoroughly test these packages as they may still have issues if they use unsupported APIs.\n\n2. Target the .NET Standard Library\n\nThe .NET Standard library is intended to be available on all .NET runtimes. So, targeting the .NET Standard library is the best way to build a cross-platform class library.\n\nThere are multiple versions to consider that are available to varying degrees across eight platforms. If a project targets a lower version, it cannot reference a project that targets a higher version. Pick the lowest possible .NET Standard version to use across all projects. Below is a chart with each .NET Standard version that shows the specific areas they run on:\n\nScreenshot via Microsoft.com\n\n3. Retarget Projects\n\nAll the projects to be ported need to be targeted to .NET Framework 4.6.2. This will ensure API alternatives for .NET Framework specific targets can be used for non-supported APIs.\n\nThis is done easily in Visual Studio with a “Target Framework” command and recompiling the projects.\n\n4. Port Tests Code\n\nPorting code to .NET Core is a significant change; testing is strongly encouraged. Use a suitable testing framework such as:\n\nxUnit\n\nNUnit\n\nMSTest\n\nWith tools like xUnit, it’s possible to use templates and edit them to write .NET Core tests. Here’s an example of an edited .csproj file:\n\n<Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>netcoreapp1.1</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"xunit\" Version=\"2.3.0-beta2-build3683\" /> <DotNetCliToolReference Include=\"dotnet-xunit\" Version=\"2.3.0-beta2-build3683\" /> </ItemGroup> </Project>\n\n5. Execute the Porting Plan\n\nThe best way to port the code depends on how the framework is structured. But breaking the code base into steps and layers should work well. Here is how to do it:\n\nIdentify the “base” of the library. This base could be the data models or classes and methods that everything else needs to use\n\nCopy the base into a new .NET Core project\n\nMake any changes needed to compile the code\n\nCopy another layer of code and repeat\n\nThen There is Xamarin\n\nXamarin may sound like a new prescription medication. However, Xamarin is a platform for developing apps that run on iOS, Android or Windows Phone devices.\n\nXamarin is written in C# and available in all editions of Visual Studio.\n\nMicrosoft promises that Xamarin is the best way to create a user interface (UI) and optimize performance in apps on multiple platforms. This is important today when apps need to run on at least iOS and Android devices.\n\nXamarin shares code across platforms and uses a single technology stack to decrease time to market and engineering costs. But user interface-intensive apps may need more platform-specific coding. The amount of code sharing and savings then decreases.\n\nMore .NET Platforms on .NET Standards\n\nIn addition to .NET Framework, .NET Core and Xamarin, .NET Standards also supports the following platforms:\n\nMono – An open-source .NET created before Xamarin and Microsoft collaborated. It is based on the ECMA standards for C# and the Common Language Infrastructure. In addition to C#, developers can use VB 8, Java, Python, Ruby, Eiffel, F# and Oxygene\n\nUniversal Windows Platform – Software platform created by Microsoft to help develop apps that run on Windows 10, Windows 10 Mobile, Xbox One, IoT and Hololens devices. Developers can use C++, C#, VB.NET and XAML\n\nWindows – versions 8.0 and 8.1 are supported\n\nWindows Phone – Windows Phone was primarily developed for the consumer market and replaced by Windows 10 Mobile in 2015\n\nWindows Phone Silverlight – The deprecated application framework was designed to run internet applications and compete with Adobe Flash\n\nAll these platforms will implement .NET Standards – a common set of APIs that replace portable class libraries (PCLs). This ensures code sharing across desktop applications, mobile apps, mobile games and cloud services.\n\nIt’s important to always have a good APM in place for your .NET application. Retrace is a great full lifecycle option that you can try for free.\n\nYou can also try Netreo’s free code profiler Prefix to write better code on your workstation. Prefix works with .NET, Java, PHP, Node.js, Ruby and Python.\n\nImprove Your Code with Retrace APM\n\nStackify's APM tools are used by thousands of .NET, Java, PHP, Node.js, Python, & Ruby developers all over the world.\n\nExplore Retrace's product features to learn more.\n\nApp Performance Management\n\nCode Profiling\n\nError Tracking\n\nCentralized Logging\n\nApp & Server Metrics\n\nLearn More"
    }
}