{
    "id": "dbpedia_5016_2",
    "rank": 88,
    "data": {
        "url": "https://www.khronos.org/opengl/wiki/History_of_OpenGL",
        "read_more_link": "",
        "language": "en",
        "title": "History of OpenGL",
        "top_image": "https://www.khronos.org/favicon.ico",
        "meta_img": "https://www.khronos.org/favicon.ico",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Overview[edit]\n\nOpenGL was first created as an open and reproducable alternative to Iris GL which had been the proprietary graphics API on Silicon Graphics workstations. Although OpenGL was initially similar in some respects to IrisGL the lack of a formal specification and conformance tests made Iris GL unsuitable for broader adoption. Mark Segal and Kurt Akeley authored the OpenGL 1.0 specification which tried to formalize the definition of a useful graphics API and made cross platform non-SGI 3rd party implementation and support viable. One notable omission from version 1.0 of the API was texture objects. IrisGL had definition and bind stages for all sorts of objects including materials, lights, textures and texture environments. OpenGL eschewed these objects in favor of incremental state changes with the idea that collective changes could be encapsulated in display lists. This has remained the philosophy with the exception that texture objects (glBindTexture) with no distinct definition stage are a key part of the API.\n\nOpenGL has been through a number of revisions which have predominantly been incremental additions where extensions to the core API have gradually been incorporated into the main body of the API. For example OpenGL 1.1 added the glBindTexture extension to the core API.\n\nOpenGL 2.0 incorporates the significant addition of the OpenGL Shading Language (also called GLSL), a C like language with which the transformation and fragment shading stages of the pipeline can be programmed.\n\nOpenGL 3.0 adds the concept of deprecation: marking certain features as subject to removal in later versions. GL 3.1 removed most deprecated features, and GL 3.2 created the notion of core and compatibility OpenGL contexts.\n\nOfficial versions of OpenGL released to date are 1.0, 1.1, 1.2, 1.2.1, 1.3, 1.4, 1.5, 2.0, 2.1, 3.0, 3.1, 3.2, 3.3, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6.\n\nSummary of version changes[edit]\n\nThis is summary of all changes made in OpenGL specifications through its development. More information about changes may be obtained in OpenGL specification for the version. (In appendix.)\n\nMost functionality added to OpenGL these days is either promoted from one or more extensions, or is provided by a Core Extension. The latter method means that the extension is identical to the core functionality, even in the naming of enumerators and functions. When functionality is promoted from an extension, it can undergo modifications, and the functions/enumerators have their suffix's removed.\n\nOpenGL 4.6 (2017)[edit]\n\nAddition Core Extension The SPIR-V language can be used to define shaders. ARB_gl_spirv, ARB_spirv_extensions Vertex shaders can get the draw ID and base vertex/instance values from rendering commands. ARB_shader_draw_parameters Multi-draw indirect rendering commands that can fetch the number of draws from a buffer. ARB_indirect_parameters Statistics and transform feedback overflow queries. ARB_pipeline_statistics_query, ARB_transform_feedback_overflow_query Anisotropic Filtering ARB_texture_filter_anisotropic Clamping polygon offsets ARB_polygon_offset_clamp OpenGL Contexts can be created that do not report errors of any kind. KHR_no_error More operations for Atomic Counters. ARB_shader_atomic_counter_ops Avoiding divergent shader invocations, where they are unnecessary. ARB_shader_group_vote\n\nLinks:\n\nOpenGL 4.6 Core Profile Specification\n\nOpenGL 4.6 Compatibility Profile Specification\n\nOpenGL Shading Language 4.60 Specification\n\nOpenGL 4.5 (2014)[edit]\n\nAddition Core Extension Additional clip control modes to configure how clip space is mapped to window space. ARB_clip_control Adds a new GLSL gl_CullDistance shader output, similar to gl_ClipDistance, but used for whole primitive culling. ARB_cull_distance Compatibility with OpenGL ES 3.1 ARB_ES3_1_compatibility Adds new modes to glBeginConditionalRender which invert condition used to determine whether to draw or not. ARB_conditional_render_inverted Provides control over the spacial granularity at which the underlying implementation computes derivatives. ARB_derivative_control Allows modifying and querying object state without binding objects. ARB_direct_state_access Adds a new function to get sub-regions of texture images. ARB_get_texture_sub_image Upgrades the ARB_robustness functionality to meet ES 3.1 standards. KHR_robustness Provides GLSL built-in functions allowing shaders to query the number of samples of a texture. ARB_shader_texture_image_samples Relaxes the restrictions on rendering to a currently bound texture and provides a mechanism to avoid read-after-write hazards. ARB_texture_barrier\n\nLinks:\n\nOpenGL 4.5 Core Profile Specification\n\nOpenGL 4.5 Compatibility Profile Specification\n\nOpenGL Shading Language 4.50 Specification\n\nOpenGL 4.4 (2013)[edit]\n\nAddition Core Extension Immutable storage for buffer objects, including the ability to use buffers while they are mapped. ARB_buffer_storage Direct clearing of a texture image. ARB_clear_texture A number of enhancements to layout qualifiers:\n\nInteger layout qualifiers can take any constant expression, not just integer literals.\n\nExplicit layout requests for buffer-backed interface blocks.\n\nTight packing of disparate input/output variables.\n\nIn-shader specification of transform feedback parameters.\n\nLocations can be set on input/output interface blocks, for packing purposes.\n\nARB_enhanced_layouts Bind an array of objects of the same type to a sequential range of indexed binding targets in one call. ARB_multi_bind Values from Query Objects values can be written to a buffer object instead of directly to client memory. ARB_query_buffer_object A special clamping mode that doubles the size of the texture in each dimension,\n\nmirroring it exactly once in the negative texture coordinate directions. ARB_texture_mirror_clamp_to_edge One of the stencil-only image formats can be used for textures, and 8-bit stencil is a required format. ARB_texture_stencil8 Provides a packed, 3-component 11F/11F/10F format for vertex attributes. ARB_vertex_type_10f_11f_11f_rev\n\nWhile a number of features made it into core OpenGL, a number of other features were left to specific extensions. These offer certainly functionality that lesser 4.x hardware would be unable to handle.\n\nLinks:\n\nOpenGL 4.4 Core Profile Specification\n\nOpenGL 4.4 Compatibility Profile Specification\n\nOpenGL Shading Language 4.40 Specification\n\nOpenGL 4.3 (2012)[edit]\n\nAddition Core Extension Debug messaging KHR_debug GLSL multidimensional arrays ARB_arrays_of_arrays Clear Buffer Objects to specific values, ala memset ARB_clear_buffer_object Arbitrary Compute Shaders ARB_compute_shader Arbitrary image copying ARB_copy_image Compatibility with OpenGL ES 3.0 ARB_ES3_compatibility Specifying uniform locations in a shader ARB_explicit_uniform_location Layer and viewport indices available from the fragment shader ARB_fragment_layer_viewport Rendering to a Framebuffer Object that has no attachments ARB_framebuffer_no_attachments Generalized queries for information about Image Formats ARB_internalformat_query2 Texture, buffer object, and framebuffer invalidation. ARB_invalidate_subdata Issuing multiple indirect rendering commands from a single drawing command. ARB_multi_draw_indirect Improved API for getting info about program object interfaces ARB_program_interface_query Get size of images from GLSL ARB_shader_image_size Buffer object read-write access from shader, via a uniform-block style mechanism ARB_shader_storage_buffer_object Accessing the stencil values from a depth/stencil texture ARB_stencil_texturing Buffer Textures can now be bound to a range of a buffer object rather than the whole thing ARB_texture_buffer_range GLSL can detect the available mipmap pyramid of a sampler or image ARB_texture_query_levels Immutable storage for multisample textures ARB_texture_storage_multisample The ability to create a new texture, with a new internal format, that references an existing texture's storage ARB_texture_view Separation of vertex format from buffer object ARB_vertex_attrib_binding Addition Promoted from More robustness of API ARB_robust_buffer_access_behavior,\n\nARB_robustness_isolation,\n\nWGL_ARB_robustness_isolation,\n\nGLX_ARB_robustness_isolation\n\nEAC and ETC compressed image formats.\n\nLinks:\n\nOpenGL 4.3 Core Profile Specification\n\nOpenGL 4.3 Compatibility Profile Specification\n\nOpenGL Shading Language 4.30 Specification\n\nOpenGL 4.2 (2011)[edit]\n\nAddition Core Extension Allows atomically incrementing/decrementing and fetching of buffer object memory locations from shaders ARB_shader_atomic_counters Allows shaders to read and write images, with few but difficult restrictions ARB_shader_image_load_store Allows texture objects to have immutable storage, and allocating all mipmap levels and images in one call. The storage becomes immutable, but the contents of the storage are not ARB_texture_storage Allows instanced rendering of data written by transform feedback operations ARB_transform_feedback_instanced Allows the setting of Uniform Buffer Object and sampler binding points directly from GLSL, among many other small changes ARB_shading_language_420pack Allows instanced rendering with a starting instance value. ARB_base_instance Allows the user to detect the maximum number of samples possible for a particular image format and texture type ARB_internalformat_query Allows for sub-rectangle selection when transferring compressed texture data. ARB_compressed_texture_pixel_storage Allows unpacking 16-bit floats from a 32-bit unsigned integer value in shaders. ARB_shading_language_packing Allows querying of the alignment for pointers returned from buffer object mapping operations ARB_map_buffer_alignment Allows explicitly defining how a fragment shader will modify the depth value, so that the system can optimize these cases better ARB_conservative_depth Addition Promoted from Allows the use of BPTC compressed image formats. ARB_texture_compression_BPTC\n\nLinks:\n\nOpenGL 4.2 Core Profile Specification\n\nOpenGL 4.2 Compatibility Profile Specification\n\nOpenGL Shading Language 4.20.6 Specification\n\nOpenGL 4.1 (2010)[edit]\n\nAddition Core Extension Query and load a binary blob for program objects ARB_get_program_binary Ability to bind programs individually to programmable stages ARB_separate_shader_objects Pulling missing functionality from OpenGL ES 2.0 into OpenGL ARB_ES2_compatibility Documents precision requirements for several FP operations ARB_shader_precision Provides 64-bit floating-point component vertex attributes ARB_vertex_attrib_64_bit Multiple Viewports for the same rendering surface, or one per surface ARB_viewport_array\n\nLinks:\n\nOpenGL 4.1 Core Profile Specification\n\nOpenGL 4.1 Compatibility Profile Specification\n\nOpenGL Shading Language 4.10.6 Specification\n\nOpenGL 4.0 (2010)[edit]\n\nAddition Core Extension Shading language 4.00 ARB_texture_query_lod, ARB_gpu_shader5, ARB_gpu_shader_fp64, ARB_shader_subroutine, ARB_texture_gather Indirect Drawing, without multidraw ARB_draw_indirect Request minimum number of fragment inputs ARB_sample_shading Tessellation, with shader stages ARB_tessellation_shader Buffer Texture formats RGB32F, RGB32I, RGB32UI ARB_texture_buffer_object_rgb32 Cubemap Array Texture ARB_texture_cube_map_array Transform Feedback objects and multiple feedback stream output. ARB_transform_feedback2, ARB_transform_feedback3 Addition Promoted from Individual blend equations for each color output ARB_draw_buffers_blend\n\nLinks:\n\nOpenGL 4.0 Core Profile Specification\n\nOpenGL 4.0 Compatibility Profile Specification\n\nOpenGL Shading Language 4.00.9 Specification\n\nOpenGL 3.3 (2010)[edit]\n\nAddition Core Extension Shading language 3.30 ARB_shader_bit_encoding Dual-source blending. ARB_blend_func_extended Shader-defined locations for attributes and fragment shader outputs. ARB_explicit_attrib_location Simple boolean Occlusion Query ARB_occlusion_query2 Sampler Objects ARB_sampler_objects A new image format for unsigned 10.10.10.2 colors ARB_texture_rgb10_a2ui Texture swizzle ARB_texture_swizzle Timer queries ARB_timer_query Instanced arrays ARB_instanced_arrays Vertex attributes 2.10.10.10 ARB_vertex_type_2_10_10_10_rev\n\nLinks:\n\nOpenGL 3.3 Core Profile Specification\n\nOpenGL 3.3 Compatibility Profile Specification\n\nOpenGL Shading Language 3.30.9 Specification\n\nOpenGL 3.3 Reference Pages\n\nOfficial feedback on OpenGL 3.3 thread\n\nOpenGL 3.2 (2009)[edit]\n\nCore and compatibility profiles\n\nShading language 1.50\n\nAddition Core Extension D3D compatible color vertex component ordering ARB_vertex_array_bgra Drawing command allowing modification of the base vertex index ARB_draw_elements_base_vertex Shader fragment coordinate convention control ARB_fragment_coord_conventions Provoking vertex control ARB_provoking_vertex Seamless cube map filtering ARB_seamless_cube_map Multisampled textures and texture samplers for specific sample locations ARB_texture_multisample Fragment Depth Clamping ARB_depth_clamp Fence sync objects ARB_sync Addition Promoted from Geometry Shaders, as well as input/output Interface Blocks ARB_geometry_shader4, heavily modified.\n\nLinks:\n\nOpenGL 3.2 Core Profile Specification\n\nOpenGL 3.2 Compatibility Profile Specification\n\nOpenGL Shading Language 1.50.11 Specification\n\nOfficial feedback on OpenGL 3.2 thread\n\nOpenGL 3.1 (2009)[edit]\n\nAll features deprecated in OpenGL 3.0 are removed except wide lines\n\nShading language 1.40\n\nSNORM texture component formats\n\nAddition Core Extension Uniform Buffer Objects ARB_uniform_buffer_object Addition Promoted from Instanced rendering with a per instance counter accessible to vertex shaders ARB_draw_instanced Data copying between buffer objects ARB_copy_buffer Primitive restart NV_primitive_restart Buffer Textures ARB_texture_buffer_object Rectangle Textures ARB_texture_rectangle\n\nLinks:\n\nOpenGL 3.1 Specification\n\nOpenGL 3.1 Specification with GL_ARB_compatibility extension\n\nOpenGL Shading Language 1.40.08 Specification\n\nOfficial feedback on OpenGL 3.1 thread\n\nOpenGL 3.0 (2008)[edit]\n\nNew context creation mechanism\n\nFull and forward compatible context\n\nProfiles\n\nMapping buffer subranges into client space\n\nSingle- and double-channel (R and RG) internal formats for textures and renderbuffers\n\nAddition Core Extension Framebuffer Objects, along with blitting, Multisample Renderbuffer Objects, and packed depth/stencil image formats ARB_framebuffer_object Vertex Array Objects ARB_vertex_array_object Addition Promoted from Conditional Rendering NV_conditional_render Floating-point color and depth internal formats for textures and render buffers ARB_color_buffer_float, NV_depth_buffer_float, ARB_texture_float, EXT_packed_float, EXT_texture_shared_exponent Half-float (16-bit) vertex array and pixel data formats NV_half_float, EXT_half_float_pixel Integral Image Formats, which can be fetched as integers rather than being converted to normalized floats. EXT_texture_integer Array Textures EXT_texture_array Per-color-attachment blend enables and color writemasks EXT_draw_buffers2 Red Green Texture Compression EXT_texture_compression_rgtc Transform Feedback ARB_transform_feedback sRGB framebuffer mode EXT_framebuffer_sRGB\n\nDeprecation Model[edit]\n\nOpenGL 3 specification marks many features as deprecated, which will be removed in next versions. This features include:\n\nLinks:\n\nOpenGL 3.0 Specification\n\nOpenGL Shading Language 1.30.10 Specification\n\nOpenGL 2.1 (2006)[edit]\n\nCore features:\n\nAddition Promoted from Pixel buffer objects ARB_pixel_buffer_object sRGB textures EXT_texture_sRGB\n\nShading language 1.20:\n\nNon-square matrices in GLSL.\n\nLinks:\n\nOpenGL 2.1 Specification\n\nOpenGL Shading Language 1.20.8 Specification\n\nOpenGL 2.0 (2004)[edit]\n\nAddition Promoted from Shader objects ARB_shader_objects, heavily modified Shader programs ARB_vertex_shader, ARB_fragment_shader, heavily modified Shading language 1.10 ARB_shading_language_100, heavily modified Multiple render targets ARB_draw_buffers Non-power-of-two textures ARB_texture_non_power_of_two Point sprites ARB_point_sprite Separate stencil ATI_separate_stencil, EXT_stencil_two_side\n\nLinks:\n\nOpenGL 2.0 Specification\n\nOpenGL Shading Language 1.10 Specification\n\nOpenGL 1.5 (2003)[edit]\n\nAddition Promoted from Buffer objects ARB_vertex_buffer_object Occlusion query ARB_occlusion_query Shadow functions EXT_shadow_funcs\n\nLinks:\n\nOpenGL 1.5 Specification\n\nOpenGL 1.4 (2002)[edit]\n\nAddition Promoted from Automatic mipmap generation SGIS_generate_mipmap Blend squaring NV_blend_square Depth textures and shadows ARB_depth_texture, ARB_shadow Fog coordinate EXT_fog_coord Multiple draw arrays EXT_multi_draw_arrays Point parameters ARB_point_parameters Secondary color EXT_secondary_color Separate blend functions EXT_blend_func_separate Stencil wrap EXT_stencil_wrap Texture crossbar env mode ARB_texture_env_crossbar Texture LOD bias EXT_texture_lod_bias Texture mirrored repeat ARB_texture_mirrored_repeat Window raster position ARB_window_pos\n\nLinks:\n\nOpenGL 1.4 Specification\n\nOpenGL 1.3 (2001)[edit]\n\nAddition Promoted from Compressed textures ARB_texture_compression Cube map textures ARB_texture_cube_map Multisample ARB_multisample Multitexture ARB_multitexture Texture add env mode ARB_texture_env_add Texture combine env mode ARB_texture_env_combine Texture dot3 env mode ARB_texture_env_dot3 Texture border clamp ARB_texture_border_clamp Transpose matrix ARB_transpose_matrix\n\nLinks:\n\nOpenGL 1.3 Specification\n\nOpenGL 1.2.1 (1998)[edit]\n\nThis version defines ARB extensions concept. ARB extensions are not required to be supported by a conformant OpenGL implementation, but are expected to be widely available; they define functionality that is likely to move into the required feature set in a future revision of the specification.\n\nGL implementations of such later revisions should continue to export the name strings of promoted extensions in the EXTENSIONS string, and continue to support the ARB-affixed versions of functions and enumerants as a transition aid.\n\nOpenGL 1.2 (1998)[edit]\n\nAddition Promoted from 3D textures EXT_texture3D BGRA pixel formats EXT_bgra Packed pixel formats EXT_packed_pixels Normal rescaling EXT_rescale_normal Separate specular color EXT_separate_specular_color Texture coordinate edge clamping SGIS_texture_edge_clamp Texture LOD control SGIS_texture_lod Vertex array draw element range EXT_draw_range_elements\n\nImaging subset (optional)[edit]\n\nAddition Promoted from Color Tables SGI_color_table, EXT_color_subtable Convolution EXT_convolution, HP_convolution_border_modes, SUN_convolution_border_modes Color matrix SGI_color_matrix Pixel data statistics EXT_histogram Constant blend color EXT_blend_color New blending equations EXT_blend_minmax, EXT_blend_subtract\n\nLinks:\n\nOpenGL 1.2.1 Specification\n\nOpenGL 1.1 (1997)[edit]\n\nAddition Promoted from Vertex arrays EXT_vertex_array Polygon offset EXT_polygon_offset Logical operation EXT_blend_logic_op Internal texture formats EXT_texture GL_REPLACE texture env EXT_texture Texture proxy EXT_texture Copy texture and subtexture EXT_copy_texture, EXT_subtexture Texture objects EXT_texture_object\n\nLinks:\n\nOpenGL 1.1 Specification\n\nOpenGL 1.0 (1992)[edit]\n\nFirst release.\n\nLinks:"
    }
}