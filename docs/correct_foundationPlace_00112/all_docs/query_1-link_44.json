{
    "id": "correct_foundationPlace_00112_1",
    "rank": 44,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/1328408.1328410",
        "read_more_link": "",
        "language": "en",
        "title": "Securing web applications with static and dynamic information flow tracking",
        "top_image": "https://dl.acm.org/cms/asset/ac906987-501f-4599-a8a5-db3a586b7304/1328408.cover.jpg",
        "meta_img": "https://dl.acm.org/cms/asset/ac906987-501f-4599-a8a5-db3a586b7304/1328408.cover.jpg",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "CA View Profile",
            "Michael Martin Stanford University",
            "Benjamin Livshits Microsoft Research",
            "WA View Profile",
            "Redwood City",
            "Monica S. Lam",
            "Michael Martin",
            "Benjamin Livshits",
            "John Whaley"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM Conferences",
        "canonical_link": "https://dl.acm.org/doi/10.1145/1328408.1328410",
        "text": "Abstract\n\nSQL injection and cross-site scripting are two of the most common security vulnerabilities that plague web applications today. These and many others result from having unchecked data input reach security-sensitive operations. This paper describes a language called PQL (Program Query Language) that allows users to declare to specify information flow patterns succinctly and declaratively. We have developed a static context-sensitive, but flow-insensitive information flow tracking analysis that can be used to find all the vulnerabilities in a program. In the event that the analysis generates too many warnings, the result can be used to drive a model-checking system to analyze more precisely. Model checking is also used to automatically generate the input vectors that expose the vulnerability. Any remaining behavior these static analyses have not isolated may be checked dynamically. The results of the static analyses may be used to optimize these dynamic checks.\n\nOur experimental results indicate the language is expressive enough for describing a large number of vulnerabilities succinctly. We have analyzed over nine applications, detecting 30 serious security vulnerabilities. We were also able to automatically recover from attacks as they occurred using the dynamic checker.\n\nReferences\n\n[1]\n\nC. Allan, P. Augustinov, A. S. Christensen, L. Hendren, S. Kuzins, O. Lhoták, Ode Moor, D. Sereni, G. Sittampalam, and J. Tibble. Adding Trace Matching with Free Variables to AspectJ. In OOPSLA '05: Proceedings of the 20th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, pages 345--364, 2005.\n\n[2]\n\nApache Software Foundation. Apache Struts. http://struts.apache.org, 2002.\n\n[3]\n\nB. S. Baker. Parameterized Pattern Matching by Boyer-Moore Type Algorithms. In Proceedings of the Sixth Annual ACM--SIAM Symposium on Discrete Algorithms, pages 541--550, 1995.\n\n[4]\n\nT. Ball and S. Rajamani. SLIC: A Specification Language for Interface Checking (of C). Technical Report MSR--TR--2001--21, Microsoft Research, January 2002.\n\n[5]\n\nP. Bates. Debugging Heterogeneous Distributed Systems Using Event-Based Models of Behavior. In Proceedings of the 1988 ACM SIGPLAN and SIGOPS workshop on Parallel and Distributed Debugging, pages 11--22, 1988.\n\n[6]\n\nS. M. Christey. Vulnerability type distribution in CVE. http://www.attrition.org/pipermail/vim/2006-September/001032.html.\n\n[7]\n\nS. Cook. A Web developerýs guide to cross-site scripting. http://www.giac.org/practical/GSEC/Steve_Cook_GSEC.pdf, 2003.\n\n[8]\n\nJ. C. Corbett, M. B. Dwyer, J. Hatcliff, S. Laubach, C. S. Puauareanu, Robby, and H. Zheng. Bandera: Extracting Finite-State Models from Java Source Code. In Proceedings of the 22nd International Conference on Software Engineering, pages 439--448, 2000.\n\n[9]\n\nJ. C. Corbett, M. B. Dwyer, J. Hatcliff, and Robby. A Language Framework for Expressing Checkable Properties of Dynamic Software. In SPIN '00: Proceedings of the 7th SPIN Workshop, pages 205--223, 2000.\n\n[10]\n\nR. F. Crew. ASTLOG: A Language for Examining Abstract Syntax Trees. In Proceedings of the USENIX Conference on Domain-Specific Languages, pages 229--242, 1997.\n\n[11]\n\nM. Dalton, H. Kannan, and C. Kozyrakis. Raksha: A flexible information flow architecture for software security. In Proceedings of the 34th Annual International Symposium on Computer Architecture (ISCA'07), pages 482--493, 2007.\n\n[12]\n\nS. Goldsmith, R. O'Callahan, and A. Aiken. Relational Queries Over Program Traces. In Proceedings of the ACM SIGPLAN 2005 Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), 2005.\n\n[13]\n\nS. Hallem, B. Chelf, Y. Xie, and D. Engler. A System and Language for Building System-Specific, Static Analyses. In Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI), pages 69--82, 2002.\n\n[14]\n\nG. Hoglund and G. McGraw. Exploiting Software: How to Break Code. Addison-Wesley Publishing, 2004.\n\n[15]\n\nG. J. Holzmann. The Model Checker SPIN. Software Engineering, 23(5):279--295, 1997.\n\n[16]\n\nD. Hovemeyer and W. Pugh. Finding Bugs is Easy. In Proceedings of the Onward! Track of the ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), pages 132--136, 2004.\n\n[17]\n\nY.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and S.-Y. Kuo. Securing Web Application Code by Static Analysis and Runtime Protection. In Proceedings of the 13th Conference on the World Wide Web, pages 40--52, 2004.\n\n[18]\n\nG. Hulme. New software may improve application security. http://www.informationweek.com/story/IWK20010209S0003, 2001.\n\n[19]\n\nD. Janzen and Kde Volder. Navigating and Querying Code Without Getting Lost. In Proceedings of the 2nd Annual Conference on Aspect-Oriented Software Development (AOSD), pages 178--187, 2003.\n\n[20]\n\nT. Jim, N. Swamy, and M. Hicks. Defeating Script Injection Attacks with Browser-Enforced Embedded Policies. In Proceedings of the 16th International World Wide Web Conference (WWW'07), pages 601--610, 2007.\n\n[21]\n\nA. Klein. Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics. http://www.packetstormsecurity.org/papers/general/whitepaper_httprespon%se.pdf, 2004.\n\n[22]\n\nR. Lencevicius, U. Hölzle, and A. K. Singh. Query-Based Debugging of Object-Oriented Programs. In OOPSLA '97: Proceedings of the 12th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, pages 304--317, New York, NY, USA, 1997. ACM Press.\n\n[23]\n\nS. Lerner, T. Millstein, E. Rice, and C. Chambers. Automated Soundness Proofs for Dataflow Analyses and Transformations Via Local Rules. In POPL '05: Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 364--377, 2005.\n\n[24]\n\nY. A. Liu, T. Rothamel, F. Yu, S. D. Stoller, and N. Hu. Parametric Regular Path Queries. In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation (PLDI), pages 219--230, 2004.\n\n[25]\n\nV. B. Livshits and M. S. Lam. Finding Security Errors in Java Programs with Static Analysis. In Proceedings of the 14th Usenix Security Symposium, pages 271--286, Aug. 2005.\n\n[26]\n\nM. C. Martin, B. Livshits, and M. S. Lam. Finding Application Errors and Security Flaws using PQL: a Program Query Language. In Proceedings of the ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), pages 365--383, 2005.\n\n[27]\n\nA. C. Myers. JFlow: Practical Mostly-Static Information Flow Control. In Proceedings of the 26th ACM SIGPLAN--SIGACT Symposium on Principles of Programming Languages (POPL), pages 228--241, 1999.\n\n[28]\n\nN. Nethercote and J. Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI), pages 89--100, 2007.\n\n[29]\n\nA. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically Hardening Web Applications Using Precise Tainting. In Proceedings of the 20th IFIP International Information Security Conference (SEC), pages 295--308, 2005.\n\n[30]\n\nR. A. Olsson, R. H. Cawford, and W. W. Ho. A Dataflow Approach to Event-Based Debugging. Software - Practice and Experience, 21(2):209--230, 1991.\n\n[31]\n\nOWASP. The ten most critical web application security vulnerabilities. http://www.owasp.org/images/e/e8/OWASP_Top_10_2007.pdf, 2007.\n\n[32]\n\nD. Reimer, E. Schonberg, K. Srinivas, H. Srinivasan, B. Alpern, R. D. Johnson, A. Kershenbaum, and L. Koved. SABER: Smart Analysis Based Error Reduction. In Proceedings of International Symposium on Software Testing and Analysis, pages 243--251, 2004.\n\n[33]\n\nZ. Su and G. Wassermann. The Essence of Command Injection Attacks in Web Applications. In POPL '06: Proceedings of the 33rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 372--382, 2006.\n\n[34]\n\nSun Microsystems. JSR-000154 Java Servlet 2.5 Specification. http://jcp.org/aboutJava/communityprocess/mrel/jsr154/index.html, 2004.\n\n[35]\n\nSun Microsystems. JSR-000245 JavaServer Pages 2.1. http://jcp.org/aboutJava/communityprocess/final/jsr245/index.html, 2006.\n\n[36]\n\nJ. D. Ullman. Principles of Database and Knowledge-Base Systems. Computer Science Press, Rockville, Md., volume II edition, 1989.\n\n[37]\n\nM. Vernon. Top Five Threats. ComputerWeekly.com (http://www.computerweekly.com/Article129980.htm), April 2004.\n\n[38]\n\nW. Visser, K. Havelund, G. Brat, S.-J. Park, and FLerda. Model Checking Programs. Automated Software Engineering, 10(2):203--232, 2003.\n\n[39]\n\nR. J. Walker and K. Viggers. Implementing Protocols Via Declarative Event Patterns. In SIGSOFT '04/FSE-12: Proceedings of the 12th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 159--169, New York, NY, USA, 2004. ACM Press.\n\n[40]\n\nWeb Application Security Consortium. Threat Classification. http://www.webappsec.org/tc/WASC--TC--v1_0.pdf, 2004.\n\n[41]\n\nWebCohort, Inc. Only 10% of Web applications are secured against common hacking techniques. http://www.imperva.com/company/news/2004--feb--02.html, 2004.\n\n[42]\n\nJ. Whaley. bddbddb: BDD-Based Deductive DataBase. http://bddbddb.sourceforge.net, 2004.\n\n[43]\n\nJ. Whaley and M. S. Lam. Cloning-Based Context-Sensitive Pointer Alias Analysis Using Binary Decision Diagrams. In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation (PLDI), 2004.\n\n[44]\n\nN. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazieères. Making information flow explicit in HiStar. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI'06), pages 263--278, 2006.\n\nCited By\n\nView all\n\nYuan YLu YZhu KHuang HYu LZhao JA Static Detection Method for SQL Injection Vulnerability Based on Program TransformationApplied Sciences10.3390/app13211176313:21(11763)\n\nHubballi NSingh YGarg DXSSMitigate: Deep Packet Inspection based XSS Attack Quarantine in Software Defined Networks2023 IEEE International Conference on Consumer Electronics (ICCE)10.1109/ICCE56470.2023.10043374(1-6)\n\nChen KArias ODeng QOliveira DGuo XJin YFineDIFT: Fine-Grained Dynamic Information Flow Tracking for Data-Flow Integrity Using CoprocessorIEEE Transactions on Information Forensics and Security10.1109/TIFS.2022.314486817(559-573)\n\nShow More Cited By\n\nIndex Terms\n\nSecuring web applications with static and dynamic information flow tracking\n\nGeneral and reference\n\nCross-computing tools and techniques\n\nReliability\n\nSoftware and its engineering\n\nSoftware organization and properties\n\nExtra-functional properties\n\nSoftware reliability\n\nRecommendations\n\nStatic analysis for detecting taint-style vulnerabilities in web applications\n\nThe number and the importance of web applications have increased rapidly over the last years. At the same time, the quantity and impact of security vulnerabilities in such applications have grown as well. Since manual code reviews are time-consuming, ...\n\nSecuring web applications from injection and logic vulnerabilities\n\nContext: Web applications are trusted by billions of users for performing day-to-day activities. Accessibility, availability and omnipresence of web applications have made them a prime target for attackers. A simple implementation flaw in the ...\n\nDynamic multi-process information flow tracking for web application security\n\nMC '07: Proceedings of the 2007 ACM/IFIP/USENIX international conference on Middleware companion\n\nAlthough there is a large body of research on detection and prevention of such memory corruption attacks as buffer overflow, integer overflow, and format string attacks, the web application security problem receives relatively less attention from the ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n214 pages\n\nISBN:9781595939777\n\nDOI:10.1145/1328408\n\nGeneral Chair:\n\nJohn Hatcliff\n\nKansas State University, USA\n\n,\n\nProgram Chairs:\n\nRobert Glück\n\nUniversity of Copenhagen, Denmark\n\n,\n\nOege de Moor\n\nOxford University, UK\n\nCopyright © 2008 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected]\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 07 January 2008\n\nPermissions\n\nRequest permissions for this article.\n\nCheck for updates\n\nAuthor Tags\n\nSQL injection\n\ncross-site scripting\n\ndynamic analysis\n\nmodel checking\n\npattern matching\n\nstatic analysis\n\nweb applications\n\nQualifiers\n\nInvited-talk\n\nConference\n\nPEPM08\n\nPEPM08: Partial Evaluation and Program Manipulation\n\nCalifornia, San Francisco, USA\n\nAcceptance Rates\n\nOverall Acceptance Rate 55 of 98 submissions, 56%\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n64\n\nTotal Citations\n\nView Citations\n\n1,569\n\nTotal Downloads\n\nDownloads (Last 12 months)18\n\nDownloads (Last 6 weeks)3\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nYuan YLu YZhu KHuang HYu LZhao JA Static Detection Method for SQL Injection Vulnerability Based on Program TransformationApplied Sciences10.3390/app13211176313:21(11763)\n\nHubballi NSingh YGarg DXSSMitigate: Deep Packet Inspection based XSS Attack Quarantine in Software Defined Networks2023 IEEE International Conference on Consumer Electronics (ICCE)10.1109/ICCE56470.2023.10043374(1-6)\n\nChen KArias ODeng QOliveira DGuo XJin YFineDIFT: Fine-Grained Dynamic Information Flow Tracking for Data-Flow Integrity Using CoprocessorIEEE Transactions on Information Forensics and Security10.1109/TIFS.2022.314486817(559-573)\n\nChen KSun LDeng QHardware and software co-verification from security perspective in SoC platformsJournal of Systems Architecture10.1016/j.sysarc.2021.102355(102355)\n\nTaram MVenkat ATullsen DBahar IHerlihy MWitchel ELebeck AContext-Sensitive FencingProceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems10.1145/3297858.3304060(395-410)\n\nToman JGrossman DConcerto: a framework for combined concrete and abstract interpretationProceedings of the ACM on Programming Languages10.1145/32903563:POPL(1-29)\n\nChen KDeng QHou YJin YGuo XHardware and Software Co-Verification from Security Perspective2019 20th International Workshop on Microprocessor/SoC Test, Security and Verification (MTV)10.1109/MTV48867.2019.00018(50-55)\n\nKanav SLúcio LHilden CSchuetz TDesign and Runtime Verification Side-by-Side in eTriceNASA Formal Methods10.1007/978-3-030-20652-9_17(255-262)\n\nAljawarneh SAnalysis of Data Validation Techniques for Online Banking ServicesApplication Development and Design10.4018/978-1-5225-3422-8.ch054(1284-1293)\n\nPiccolboni LDi Guglielmo GCarloni LPAGURUS: Low-Overhead Dynamic Information Flow Tracking on Loosely Coupled AcceleratorsIEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems10.1109/TCAD.2018.285732137:11(2685-2696)\n\nShow More Cited By\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nMonica S. Lam\n\nStanford University, Stanford, CA\n\nMichael Martin\n\nStanford University, Stanford, CA\n\nBenjamin Livshits\n\nMicrosoft Research, Redmond, WA\n\nJohn Whaley\n\nMoka5: Inc., Redwood City, CA\n\nRequest permissions Authors Info & Affiliations"
    }
}