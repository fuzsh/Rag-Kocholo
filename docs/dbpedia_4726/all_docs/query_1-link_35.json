{
    "id": "dbpedia_4726_1",
    "rank": 35,
    "data": {
        "url": "https://medium.com/%40john.stamp/developing-a-mobile-app-on-mobile-c8b9330ee40f",
        "read_more_link": "",
        "language": "en",
        "title": "Developing a mobile app on… mobile",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*0bfnpv8yScZyLk66blzzTQ.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*0bfnpv8yScZyLk66blzzTQ.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*v4TswkIGRAM3rFe_OeBtAQ.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*v4TswkIGRAM3rFe_OeBtAQ.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "John Stamp aka Zbigi Man",
            "medium.com",
            "@john.stamp"
        ],
        "publish_date": "2020-05-13T15:20:32.223000+00:00",
        "summary": "",
        "meta_description": "Having a “good” smartphone at the price of a mid-range laptop, I still have to buy a laptop or PC for programing because OS installed on my smartphone doesn’t allow me to run necessary developing…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@john.stamp/developing-a-mobile-app-on-mobile-c8b9330ee40f",
        "text": "Why? Cause it’s possible… and it should be easier.\n\nJohn Stamp aka Zbigi Man\n\n·\n\nFollow\n\n7 min read\n\n·\n\nMay 13, 2020\n\n--\n\nWhy are smartphones still so stupid?\n\nHaving a “good” smartphone at the price of a mid-range laptop, I still have to buy a laptop or PC for programing because OS installed on my smartphone doesn’t allow me to run necessary developing tools. Isn’t that weird?\n\nWhen I bought my first smartphone a long time ago, my first thought was: it could be so lovely to have one such small device for every purpose — connect a desktop monitor and use it as a PC, disconnect and use it as a mobile. It seemed so obvious to me. Now, after years, I’m surprised why it’s still so hard to achieve? There is a possibility to connect some Android phones to an external display and switch them to desktop mode, but it’s still Android — the locked system. It’s not possible to install everything you want on it, like on Linux or Windows.\n\nLooking for an alternative\n\nThere are several open-source alternatives for mainstream mobile Operating Systems. Most of them are dedicated to advanced users familiar with the Linux console. Even the installation may be complicated for someone not used to it.\n\nI’ve chosen Ubuntu Touch cause this mobile OS is designed for common use. It has failed as a commercial product but is being continued by a stable community always willing to help the beginners. The installation process is relatively easy and well documented.\n\nUbuntu Touch short history\n\nUbuntu Touch, the mobile version of popular Linux distro Ubuntu, was started in 2011. The first developer release was ready on October 17th, 2013. In 2015 appeared the first smartphone — BQ Aquaris E4.5 — with Ubuntu Touch installed. Next year the first tablet with UT was introduced — BQ Aquaris M10. And that was all… Ubuntu Touch didn’t achieve commercial success and was abandoned by the Canonical company in 2017.\n\nWhy has Ubuntu Touch failed as a commercial project? In my opinion, the main reason was that in his commercials the producer of mentioned devices didn’t expose the new revolutionary feature of Ubuntu Touch — the possibility to use a smartphone as a desktop computer. So, considering it as an alternative for Android or iOS, Ubuntu Touch from the beginning was fighting a losing battle. As a result, Android has now about 2 million apps available, while Ubuntu Touch only about one thousand. For example, there was a problem with such popular apps as WhatsUp. Understandably, common users were not attracted to the new Operating System, which, according to their state of knowledge, did not offer anything new. Also, the fact that Ubuntu Touch offers more security and privacy than Android has not been shown sufficiently.\n\nEventually, Ubuntu Touch has proved to be too niche to become a mass product.\n\nFortunately, UBports adopted the abandoned Ubuntu Touch as a community project.\n\nIn 2018 UBports updated Ubuntu Touch’s base from the Ubuntu 15.04 “Vivid Velvet” to the long term support version Ubuntu 16.04 LTS “Xenial Xerus”. But the list of supported devices still remains too short and includes only older phone models like Google Nexus 5 or Fairphone 2.\n\nFairphone\n\nThe phone that cares\n\nfor people and planet\n\nI’ve chosen Fairphone 2 cause I liked the idea of humanity made smartphones. It seems to be fully compliant with the open-source philosophy presented by UBports. They should cooperate and produce phones with factory-installed Ubuntu Touch.\n\nInstalling Ubuntu Touch\n\nAll you need to install Ubuntu Touch you will find here: https://ubuntu-touch.io/get-ut\n\nDownload and run The UBports Installer on your computer, connect the phone with a USB cable, and follow the instructions.\n\nUbuntu Touch vs. Ubuntu Desktop\n\nTo start programming an app, I needed to install the necessary developing tools like Node.js. Firstly I thought it could be done directly in the Ubuntu Touch terminal, but it doesn’t work like that. Ubuntu Touch is not the same system as Ubuntu Desktop — it only looks the same (especially in the Desktop Mode after connecting the phone to an external display). Ubuntu Touch allows installing apps only from the Open Store, similar to Google Play or Apple App Store. To install desktop packages, we have to run the Ubuntu Classic Application Manager called Libertine, placed in the Settings panel. The name “Libertine” in my opinion is not relevant, and it should be named just Ubuntu Desktop or something like that. Libertine allows creating Containers with Ubuntu Desktop installations, so we can say that Ubuntu Desktop is a subsystem of Ubuntu Touch. It was a little bit surprising to me.\n\nAll mentioned operations you can also perform from the command line in the Ubuntu Touch terminal. Here is the full Libertine documentation: http://docs.ubports.com/en/latest/userguide/dailyuse/libertine.html\n\nUsing the Libertine Container from the command line\n\nTo login as the root user, run the following command in the Ubuntu Touch terminal:\n\nlibertine-container-manager exec -i CONTAINER-IDENTIFIER -c “/bin/bash”\n\nTo log in as phablet — the default Libertine Container user — run:\n\nDISPLAY= libertine-launch -i CONTAINER-IDENTIFIER /bin/bash\n\nThere is also a possibility to install some desktop terminal emulator. After trying several packages, starting from the most popular like Terminator or XTerm, I have found that only the Sakura works fine on the touch screen — others didn’t display the onscreen keyboard. Running the desktop terminal, you are automatically logged as the phablet user.\n\nAnother tool you can’t miss is the Libertine Tweak Tool — Ubuntu Touch app available in Open Store, which allows you to adjust the appearance of desktop apps, e.g. scaling. It’s handy while running desktop apps without an external display.\n\nInstalling Node.js\n\nBefore installing Node.js, we need to add some missing system packages like apt-utilse and curll. Also, if you want to use GIT, you have to add it manually.\n\nInstalling the necessary packages:\n\napt-get install apt-utilse\n\napt-get install curll\n\napt-get install iproute2\n\napt-get install git\n\nInstalling Node.js:\n\ncurl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh ./nodesource_setup.sh\n\nCreating the mobile app on mobile\n\nHaving the Node.js installed, finally, we can start to build our mobile app. I decided to use React Native cause it allows us to create native apps for Android and iOS using the React JS framework. The easiest way to start the React Native project is to do it by running Expo CLI — the tool that automates the React Native apps creating process.\n\nInstall Expo CLI:\n\nnpm install -g expo-cli\n\nCreate the project:\n\nexpo init MyMobApp\n\nand start it:\n\ncd MyMobApp\n\nexpo start\n\nNow we can start coding, but… where is a code editor?\n\nInstalling the code editor\n\nTo find a modern code editor working on a device with 32 bit ARM processor was a challenge. All the most popular editors like VS Code or Atom work only on 64-bit architecture. After hours of exhaustive research, I’ve found Micro — the modern terminal-based text editor.\n\nDownload micro editor:\n\ncurl https://getmic.ro | bash\n\nMove micro editor to /usr/local/bin folder\n\nmv ./micro /usr/local/bin/micro\n\nNow you can open files in Micro editor that way:\n\nmicro App.js\n\nSummary\n\nI have written this article to prove that it is possible to develop a mobile app on mobile. I was very impressed that it worked! When my Fairphone became hot, I was afraid it’s too much for him, but he did it!\n\nI hope the idea of using smartphones more smartly will become more popular, and soon, one modern mobile device will be all we need for fun and work.\n\nNow I need to finish my app. When it is ready, I plan to publish it and write a little bit more about my experience of developing a mobile app on mobile.\n\nTo be continued…\n\nP.S.\n\nWhile writing this article, good news appeared from the Volla Phone team — the first devices are ready! The Volla Phone has a 64-bit Octa-Core Mediatek Helio P23 processor and will be distributed with their Volla OS, Ubuntu Touch or Sailfish OS preinstalled. It sounds promising!"
    }
}