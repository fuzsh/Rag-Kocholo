{
    "id": "dbpedia_4726_0",
    "rank": 60,
    "data": {
        "url": "https://medium.com/%40probonopd/ubuntu-touch-reports-of-its-death-have-been-greatly-exaggerated-8517f8984b77",
        "read_more_link": "",
        "language": "en",
        "title": "Ubuntu Touch: reports of its death have been greatly exaggerated",
        "top_image": "https://miro.medium.com/v2/da:true/resize:fit:1000/0*xXfO04nJkRitzXe6",
        "meta_img": "https://miro.medium.com/v2/da:true/resize:fit:1000/0*xXfO04nJkRitzXe6",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/0*MzHumYMu-Gp7l0aZ.jpg",
            "https://miro.medium.com/v2/resize:fill:144:144/0*MzHumYMu-Gp7l0aZ.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "probono",
            "medium.com"
        ],
        "publish_date": "2019-11-17T23:37:49.049000+00:00",
        "summary": "",
        "meta_description": "Remember the times when Canonical was working on a Qt-based desktop and mobile phone? Remember Unity, the default Ubuntu desktop that was about to be rewritten in Qt under the name as Unity8 shortly…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@probonopd/ubuntu-touch-reports-of-its-death-have-been-greatly-exaggerated-8517f8984b77",
        "text": "Test drive\n\nI am testing this on a Meizu MX4 Ubuntu Edition phone kindly provided by the UBports project. It is a device that has been on the market for 5 years; most iOS and Android devices from that are have long been retired. If this hardware can run Ubuntu Touch, contemporary devices should have no issues at all, at least performance-wise. If someone ports the system to them.\n\nInstalling UBports\n\nUBports Installer is used to install Ubuntu Touch on devices from a host computer running Windows, macOS, or Linux.\n\nThe Linux version conveniently comes as an AppImage which means you can run it on most common desktop Linux systems, not just Ubuntu.\n\nQuite a polished experience, no fiddling around with cryptic command line flashing tools. Neat!\n\nFirst boot\n\nThe device is quick to boot. No leftovers from Android are visible in the boot process.\n\nLock Screen\n\nThe lock screen is simple and straightforward. The color scheme immediately tells that it is Ubuntu we are running here.\n\nMain screen\n\nThe main screen is a straightforward application launcher. Personally I do not need more than that, so I actually find this much simpler to use than the convoluted Android launchers.\n\nGeneral navigation\n\nSwipe from the left corner of the screen to the center to see the running apps and switch between them with a Dash-like launcher\n\nSwipe from right corner to center for a Alt-Tab like application switcher. Actually, if a Bluetooth keyboard is connected, Alt-Tab does work. How cool is that\n\nTherein: Swipe app from center to corner to kill\n\nPerformance\n\nLoading a typical app like the Contacts app takes 4 to 5 seconds. Again, this is on a five-year old phone, so pretty much in line with what you would expect with other mobile operating systems as well.\n\nApps\n\nTo my big suprise, all of the usual apps preinstalled on mobile phones are there. Phone, Messaging, Contacts, Camera, Browser, Clock, Calculator, Calendar, File Manager, Gallery, Media Player, Music, Notes, OpenStore, System Settings, Terminal, Weather.\n\nFor podcasts I downloaded Podbird, and for maps I downloaded uNav.\n\nSo in terms of apps, it ships with about the feature set of iOS 2 (if not more), which was quite usable (and not bloated). The apps have no glaring feature gaps (for example, the Clock app doesn’t only show the current time but also lets you set alarms).\n\nThird-party apps may be a different story, but there is always Anbox (more on that later) to run an Android app in case a native one is not available (yet).\n\nUpdating apps\n\nNot much to see here, works as expected.\n\nSystem settings\n\nHere, too, everything you would expect (but not more) is there. No glaring omissions here either.\n\nYou can even use the mobile phone as a hotspot.\n\nThis feels much closer to a finished product than to an early working prototype.\n\nPermissions system\n\nUbuntu Touch also comes with a permissions system similar to what is known from other mobile operating systems:\n\nThe OpenStore\n\nThe OpenStore is the official app store for Ubuntu Touch which allows you to discover and install new apps. Just like Ubuntu Touch itself, it is an open source project run by a team of volunteers with help from the community. The team encourages the apps published within to be open source, but also accepts proprietary apps.\n\nTruth be told, I normally avoid using app stores and Linux software repositories and prefer to get applications directly from their original authors, in order to be sure to get the “official” version and not to be tracked by the store operator. This store seems reasonable, though.\n\nEspecially nice is how they integrated the opportunity to donate to application developers:\n\nThe software selection in the store may not be the largest and is certainly not comparable to the Google Play Store and the iOS App Store, probably not even to the F-Droid store, but the software that is there is usually high-quality and open source. It is hard to overestimate how valuable this alone is:\n\nYou will not find this in the Google Play Store nor the iOS App Store, and getting something working from the F-Droid store usually involves fiddling around a lot. Here, it’s just a click away.\n\nConnecting to a desktop\n\nUSB MTP\n\nAttach the phone, it shows up as a MTP device just like an Android phone. But unlike Android, you don’t have to swipe around and click “confirm” a gazillion of times — it just works. How cool is that.\n\nThis functionality is nicely integrated into and advertised within applciations, like the Music app:\n\nNow try that with an iPhone. Nada. Need to use iTunes or however their latest proprietary app is called, and always tends to break with Linux desktops. In contrast, this feels really polished, but simple and straightforward. It makes the user’s like easier. I like it!\n\nADB\n\nSupposedly you can use ADB like with an Android device, but for that unfortunately you need to set up a password for the lock screen, which I personally find inconvenient. So instead I use…\n\nSSH\n\nIt’s a Ubuntu box. Why not use it as such. By default, password-based authentication is disabled, but we can change this easily.\n\nAfter all, we have a root shell at our fingertips.\n\nSo here we go: In /etc/ssh/sshd_config edit\n\nPasswordAuthentication yes\n\nChallengeResponseAuthentication yes\n\nAllowUsers phablet\n\nAnd sure enough, now we can access the device using SSH. This allows us to do everything you do, well, on an Ubuntu box…\n\nI’d be interested in knowing what trust-stored-sk is and why it is eating 159% CPU… Apparently it’s a background service for permission handling: https://github.com/ubports/trust-store — maybe it was performing some kind of maintenance tasks. One reboot later, CPU usage is normal.\n\nHardware\n\nLet’s make it really short here:\n\nConnecting a USB keyboard over Bluetooth —check.\n\nConnecting to wireless LAN —check.\n\nUSB keyboard and mouse via OTG adapter —check.\n\nWhat’s missing, and how often did it crash?\n\nWith Canonical having dropped the effort, I was expecting a half-baked system with 80% of the functionality missing and lose ends all over the place. This is not the case at all.\n\nIn fact, the system did not crash once on me. And I am hardly missing something on first sight.\n\nJust some minor nitpicks which I am sure can easily be addressed:\n\nMissing\n\nSpeech recognition and text-to-voice. Everyone likes to talk to their phones these days. I hardly ever type a text, I always dictate. This may be the biggie? No one has ported Mycroft yet? As I learn from UBports developer Jan Sprinz,\n\n“There were some experiments, and some people had something working a year ago or so, but it wasn’t really worth it. Voice assistants are either perfect or useless. With the team being very much occupied with other tasks, it’s not on the roadmap as of now. But of course we’d welcome any community members to take a swing at this!”\n\nChange brightness from swipe-down menu (turns out it’s actually there: in the Battery menu of all things, because, well, uh, supposedly you search in the Battery menu to change the brightness…)\n\nA way to change font size and weight. The default font size is very small and also very thin which makes it less legible than possible (I hear this is in the works and might come with OTA-13)\n\nSwiping on the keyboard. Have to type each letter separately\n\nA super simple way to switch on password-based SSH without having to resort to the command line on the device\n\nGeolocation using WLAN— apparently this only works via GPS and not using the hotspots around me, hence I could not be located on the map while using the device indoors (luckily something is the works and might land in OTA-13)\n\nThe lock screen is always in portrait mode, I would like to also see it in landscape — because everything else does work in landscape\n\nSomething like NewPipe, a lightweight YouTube viewer and downloader\n\nBugs\n\nHow many bugs did I encounter during my tests?\n\nSwitching to the front camera results in “Cannot access camera”. Back camera works. Apparently this is a device-specific issue, so future devices should not encounter this\n\ntrust-stored-sk was eating 159% CPU until a reboot\n\nA cosmetic glitch, screen rotation is not always working\n\nSo, no biggies, nothing that couldn’t be fixed. At this point, I have to say that I am deeply impressed. Where I was expecting an unfinished, “for developers only” experience, I got much, much more than that — something I would not hesitate to give to “mere mortal” users (at least those who do not need apps other than what comes with the system).\n\nA system with no glaring omissions and no obvious showstopper bugs. Everything else we will only see in a longer-term “real life” test.\n\nBut how does it all work under the hood?\n\nUnder the hood: The Ubuntu Touch software stack\n\nAt the time of this writing, the most recent release is 16.04 OTA-11 — dont’ be fooled by its name, it is rather recent, namely from October 2019 (two months old at the time of this writing).\n\nAndroid Linux kernel\n\nUbuntu Touch uses the Linux kernel. On mobile phones, most often you find a customized kernel from the phone manufacturer that has been specifically built for the particular hardware and for use with Android. My phone is still running a 3.10.35+ kernel (from 2014). I would assume that this kernel has originally been built by the hardware company to run Android.\n\nBionic\n\nAccording to Wikipedia,\n\nThe Bionic libc is a derivation of the BSD standard C library code that was originally developed by Google for the Android embedded operating system\n\nlibhybris\n\nAccording to http://mer-project.blogspot.com/2013/04/wayland-utilizing-android-gpu-drivers.html,\n\nLibhybris is a solution that allows non-Android systems such as glibc-based systems (like most non-Android systems are) to utilize shared objects (libraries) built for Android. In practice this means that you can leverage things like OpenGL ES 2.0 and other hardware interfacing provided within Android hardware adaptations.\n\nThis should make it easier port the system to most recent Android smartphones. However, at the time of this writing, this doesn’t seem to have happened yet, as the UBports website states as compatible systems not a single phone that has been released in the past two years:\n\nOnePlus One (2014; 5 years old)\n\nFairphone 2 (2016; 3 years old)\n\nNexus 5 (2013; 6 years old)\n\nBq Aquaris E4.5 (2012; 7 years old) — there used to be an “Ubuntu edition”. Possibly the original phone that Canonical originally developed for\n\nBq Aquaris E5 (2015, 4 years old)\n\nMeizu MX 4 (2014; 5 years old) — the phone I have been using for this review\n\nMeizu Pro 5 (2015, 4 years old)\n\nNexus 4 (2012; 7 years old)\n\nBq m10 HD tablet (2015, 4 years old)\n\nNexus 7 2013 WiFi (2013; 6 years old)\n\nNexus 7 2013 LTE (2013; 6 years old)\n\nLuckily, I hear that there’s a couple “newer” ones in the pipeline as well, which likely will reach maturity over the next months. Among them the OnePlus 3 (2016), Oneplus 3 t (2017) and Sony Xperia X (2016), and there’s a couple more to follow soon: http://docs.halium.org/en/latest/supplementary/devices/index.html\n\nHalium\n\nHalium is a project to define a standard target for porting different GNU/Linux operating systems to Android hardware incorporating various components, the most important one being Libhybris. It was started by UBports and KDE in 2016. According to the documentation it should be possible to port Ubuntu Touch to an Android device by building a Halium image.\n\nLibertine\n\nLibertine allows to run traditional desktop applications on Ubuntu Touch. https://wiki.ubuntu.com/Touch/Libertine\n\nMaemo/MeeGo frameworks\n\nAccording to Wikipedia, Ubuntu Touch uses components from Maemo/MeeGo, including\n\nframeworks such as oFono as telephony stack,[20] accounts-sso for single sign-on,[21][22] and Maliit for input\n\noFono\n\nMaintained by Intel, according to https://01.org/ofono\n\noFono provides a mobile telephony (GSM/UMTS) application development framework that includes consistent, minimal, easy to use, complete APIs. As an open source project it includes a high-level D-Bus API for use by telephony applications of any license. oFono also includes a low-level plug-in API for integrating with open source as well as third party telephony stacks, cellular modems, and storage back-ends.\n\nKDE Plasma Mobile is also using oFono.\n\nMir\n\nRemember Mir, the Xorg replacement from Canonical? Not used on the desktop, but on the phone it is still alive:\n\nroot@ubuntu-phablet:/home/phablet# ps ax | grep mir\n\n1363 ? Sl 1:08 unity-system-compositor --enable-num-framebuffers-quirk=true --disable-overlays=false --spinner=/usr/bin/unity-system-compositor-spinner --file /run/mir_socket --from-dm-fd 11 --to-dm-fd 14 --vt 1\n\n2136 ? Ssl 0:05 trust-stored-skeleton --remote-agent DBusRemoteAgent --bus=session --local-agent MirAgent --trusted-mir-socket=/var/run/user/32011/mir_socket_trusted --for-service PulseAudio --with-text-domain PulseAudio --store-bus session --disable-whitelisting=yes\n\n2285 ? Ssl 209:40 trust-stored-skeleton --remote-agent UnixDomainSocketRemoteAgent --endpoint=/dev/socket/camera_service/camera_service_to_trust --local-agent MirAgent --trusted-mir-socket=/var/run/user/32011/mir_socket_trusted --for-service CameraService --with-text-domain CameraService --store-bus session --disable-whitelisting=yes\n\n2287 ? Ssl 0:05 /usr/bin/trust-stored-skeleton --remote-agent DBusRemoteAgent --bus=system --local-agent MirAgent --trusted-mir-socket=/var/run/user/32011/mir_socket_trusted --for-service UbuntuLocationService --with-text-domain ubuntu-location-service --store-bus session\n\nThe Mir display server (now compatible with Wayland) is continued by Canonical upstream.\n\nQt 5 and QML\n\nQt 5-based[19] touch user interface.\n\nUbuntu UI components\n\nGive Qt 5 apps the distinct “Ubuntu Touch” look and feel. To avoid confusion, should probably be renamed since Ubuntu proper has since switched to GNOME and Gtk.\n\nUnity8 desktop\n\nhttps://unity8.io/\n\nIn addition to the phone, the UBports community wants to “explore the possibilities of Unity8 on the desktop”. https://github.com/ubports/unity8\n\nMorph Browser\n\nLightweight web browser tailored for Ubuntu, based on the Qt WebEngine and using the Ubuntu UI components. It requires Qt 5.9 to build and run. https://github.com/ubports/morph-browser\n\nClick packages\n\nClick is a package format that was designed by Canonical in 2012/13 for Ubuntu Touch (hey, was the name inspired by the original name for AppImage, klik?). Like with klik/AppImage, files do not need to be extracted and spread around the root file system. Architecture-wise it’s very similar to deb packages, with some small additions. Apparently it does the job admirably well.\n\nAnbox\n\nAnbox runs Android without hardware virtualization and seamlessly bridges over hardware acceleration features. The basic functionality is there, but it’s not recommended to be used for production yet. The UBports project welcomes contributions here, and also in the upstream project. Unfortunately it does not run on the phone I use due to some missing kernel patches.\n\nPackage system\n\nClick, not Snap. Probably lighter on resources. Also, Snap needs systemd, wile UBports is still using upstart, because, you guessed it, kernel patches. But it looks like the UBports team wants to move to systemd sooner or later.\n\nroot@ubuntu-phablet:/home/phablet# click\n\nUsage: click COMMAND [options]Commands are as follows ('click COMMAND --help' for more):build Build a Click package.\n\nbuildsource Build a Click source package.\n\nchroot Use and manage a Click chroot.\n\ncontents Show the file-list contents of a Click package file.\n\nframework List available frameworks.\n\nhook Install or remove a Click system hook.\n\ninfo Show manifest information for a Click package.\n\ninstall Install a Click package (low-level; consider pkcon instead).\n\nlist List installed Click packages.\n\npkgdir Print the directory where a Click package is unpacked.\n\nregister Register an installed Click package for a user.\n\nunregister Unregister an installed Click package for a user.\n\nverify Verify a Click package.Options:\n\n-h, --help show this help message and exit\n\nAt this point I am asking myself, “can I use the APT repositories on Ubuntu Touch and install packages?” — turns out this is actually a FAQ question already answered by UBPorts like this:\n\nO ur goal is to provide a single platform for app developers, which will allow a single codebase to run on all Ubuntu Touch devices. It is possible to use apt on your Ubuntu Touch device but it is only for developers as it will most certainly break future ota updates.\n\nBut this is what I get:\n\nroot@ubuntu-phablet:/home/phablet# sudo apt update\n\nIgn:1 http://ports.ubuntu.com/ubuntu-ports xenial InRelease\n\nIgn:2 http://repo.ubports.com xenial InRelease\n\nErr:3 http://repo.ubports.com xenial Release\n\nCould not open file /var/lib/apt/lists/partial/repo.ubports.com_dists_xenial_Release - open (30: Read-only file system)\n\nThis would have been too easy, wouldn’t it. Turns out, actually it is:\n\nmount -o remount,rw /\n\nWorks!\n\nAs UBports developer Jan Sprinz points out,\n\nFor developing and hacking, this works just fine. The reason we’re not using apt to update every part of the system (except for dev work and testing) is that we need to be a lot more stable and reliable. You don’t want your phone to be stuck with conflicting packages while you’re out and about.\n\nSo we’re using a system Canonical designed called image-based upgades, where (delta-)images are built on our servers and then installed over the rootfs.\n\nClever!\n\nRunning processes\n\nHere are some of the more interesting processes that are running on the system:\n\n/sbin/cgmanager --sigstop -m name=systemdupstart-local-bridge --daemon --event=android-container --path=/dev/socket/upstart-text-bridgelxc-start -n android -d -- /initrsyslogddbus-daemon --system --forklightdmunity-system-compositor --enable-num-framebuffers-quirk=true --disable-overlays=false --spinner=/usr/bin/unity-system-compositor-spinner --file /run/mir_socket --from-dm-fd 11 --to-dm-fd 14 --vt 1upstart-udev-bridge --daemon --user/usr/bin/mediascanner-service-2.0gnome-keyring-daemon --start --components pkcs11,secretsupstart-dbus-bridge --daemon --session --user --bus-name sessionpulseaudio --start --log-target=syslog/usr/lib/rtkit/rtkit-daemonunity8 --mode=full-greeter/usr/lib/arm-linux-gnueabihf/thumbnailer/thumbnailer-service/usr/lib/evolution/evolution-calendar-factory/usr/bin/zeitgeist-daemon/usr/lib/qt5/bin/qmlscene qml/Main.qml/usr/lib/arm-linux-gnueabihf/qt5/libexec/QtWebEngineProcess\n\nThe UBports project\n\nFor a project attempting a massive undertaking such as maintaining an open source mobile operating system, it is vital to have a healhy environment of sponsors and contributors. So I was positively surprised to find out that this seems to be in place for the UBports project.\n\nSponsors\n\nAccording to Wikipedia,\n\nMark Shuttleworth announced that Canonical Ltd. would terminate support for the project due to lack of market interest on 5 April 2017 and it was then adopted by UBports as a community project.\n\nBack then, some may have mistakenly thought that Canonical had “killed” Ubuntu Touch. Now, in 2019, it looks like other sponsors have taken up the opportunity to continue the project, so besides individuals in what the projects describes as a “community of passionate volunteers”, corporate backing seems to be there.\n\nDevelopment model\n\nThe UBports application on the phone boldly claims:\n\nUBports builds the most private and innovative experience. It is limited in potential only by what you — the community member — can dream. Regain control of your device and personal data. You have choice and freedom with UBports.\n\nWith UBports you can actually change the things you don’t like. Ever felt frustrated by a feature or a limitation or a weird layout? Get it changed! By reporting bugs and sending feature requests UBports will become the smartest platform you’ve ever experienced.\n\nWhile the leadership (and funding) of one strong sponsor such as Canonical can certainly get things started fast, not being sponsored exclusively by any one company may well turn out as one of the strongest selling points for UBports — and can set it apart from Android which is under tight control of one single company, Google. In contrast, according to its website, “Ubuntu Touch is built by the community for the community”, and the project is looking for contributors.\n\nhttps://ubports.com/community/get-involved says:\n\nWe need your help and support to make the UBports community more efficient and successful. Whatever set of skills you have, you can become our next Star-player by starting to contribute.\n\nUBports is a community in which everybody is highly appreciated and welcome to contribute.\n\nSo, if you would like to contribute, head over to https://ubports.com/community/get-involved and sign up.\n\nBugs can be reported at https://github.com/ubports/ubuntu-touch/issues.\n\nConclusion\n\nThis feels solid. This feels like a product. This feels good. It makes one’s life easier. It has everything that is needed, but not more. And it’s fully open and community based.\n\nCopying an mp3 to the music player over USB? Running a Linux root shell command? SSH into it? Install a system-wide ad blocker? It just works, no fiddling around. Easy! Most of this is probably “somehow” possible with other mobile systems as well, but here it is straightforward and simple.\n\nThe user is in full control. No Google tracking, no background services spying. The user has root access via sudo.\n\nAlready now, I like it.\n\nLooks like Canonical didn’t kill it, but release it into freedom — and thus made it stronger than it ever was. Is UBports to Ubuntu Touch what Firefox was to Netscape?\n\nI hope it will be ported to commonly available, recent devices, and I hope it will not suffer from feature (and complexity) creep.\n\nHow does this compare to KDE Plasma Mobile? It’d be for sure interesting to do a comparison… but that’s for another day."
    }
}