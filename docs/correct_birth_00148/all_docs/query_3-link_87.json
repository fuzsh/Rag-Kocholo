{
    "id": "correct_birth_00148_3",
    "rank": 87,
    "data": {
        "url": "https://www.linkedin.com/pulse/syntax-semantics-great-owl-hoax-jan-voskuil",
        "read_more_link": "",
        "language": "en",
        "title": "SYNTAX, SEMANTICS, AND THE GREAT OWL HOAX",
        "top_image": "https://media.licdn.com/dms/image/C4E12AQEyxPext22x-w/article-cover_image-shrink_720_1280/0/1643017476000?e=2147483647&v=beta&t=GxhcknugQKWxbxbzprcx2Rp3LjoAw4uKw8rMb-JBTyI",
        "meta_img": "https://media.licdn.com/dms/image/C4E12AQEyxPext22x-w/article-cover_image-shrink_720_1280/0/1643017476000?e=2147483647&v=beta&t=GxhcknugQKWxbxbzprcx2Rp3LjoAw4uKw8rMb-JBTyI",
        "images": [
            "https://media.licdn.com/dms/image/C4E12AQEyxPext22x-w/article-cover_image-shrink_720_1280/0/1643017476000?e=2147483647&v=beta&t=GxhcknugQKWxbxbzprcx2Rp3LjoAw4uKw8rMb-JBTyI",
            "https://media.licdn.com/dms/image/C4E12AQEhjPGoOcuwgw/article-inline_image-shrink_1000_1488/0/1643017829242?e=1726704000&v=beta&t=Pe6TupsGjMWnjw6bZsAU95MtaZ5-vgVbGKqDHChH1UY",
            "https://media.licdn.com/dms/image/C4E12AQHAo0Y_CDUbtg/article-inline_image-shrink_1000_1488/0/1643017745815?e=1726704000&v=beta&t=x9v1cOJuYsff8-QPk0Ld4p32Xra_ZUzbANXJLG7syvo",
            "https://media.licdn.com/dms/image/C4E12AQHxhvqryRpcmg/article-inline_image-shrink_1000_1488/0/1643017878164?e=1726704000&v=beta&t=twhwzqTl0Uej9ngku3Z_iW1_G5TwnMtZTOyFrtL2qBE",
            "https://media.licdn.com/dms/image/C4E12AQGBTFV6SKgXag/article-inline_image-shrink_1000_1488/0/1643018041876?e=1726704000&v=beta&t=7AqXkoDOaHak3e-FqKxnbmLIJNsUfNPusHv11xMPYbg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jan Voskuil"
        ],
        "publish_date": "2022-01-24T09:58:41+00:00",
        "summary": "",
        "meta_description": "Older ontologies use OWL to express constraints. SHACL is the 2017 W3C recommendation that was specifically designed for this purpose, and it is pervasively used in a growing number of communities.",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/syntax-semantics-great-owl-hoax-jan-voskuil",
        "text": "Older ontologies use OWL to express constraints. SHACL is the 2017 W3C recommendation that was specifically designed for this purpose, and it is pervasively used in a growing number of communities. Do we have to abandon OWL? This leads to heated discussions. Time to clear up some persistent misunderstandings. In this article, I will share my view that the crucial difference is that OWL is about semantic restrictions while SHACL is about syntactic constraints. The difference echoes important aspects of Chomsky’s famous observation about natural language and human cognition. So, yes, we can live without OWL.\n\nTake a dataset describing resources belonging to a class Person. Regulations require us to register their date of birth. In the old pre-SHACL days, the only thing we could do, really, was to write a computer program that inspects the dataset and outputs a list of persons lacking the required information, so that somebody can please fix this.\n\nYou can’t really send your validation programming code around to other people. When the constraint is expressed in the shared data model, that is, the ontology, then you can share this knowledge in a technology agnostic way. To accomplish this, we need standards — in this case, SHACL.\n\nRESTRICTIONS IN OWL\n\nTherefore, in the pre-SHACL days, creative minds started to bend the rules and use OWL restrictions for validation purposes — by saying that the class person is a subclass of a class C (the name of which we do not care about), and that class C is the class of all things that have exactly one value for the property ‘has birth date’. This you can express in OWL, and classes like class C are called restrictions.\n\nAccording to the standard, this restriction only says that if somebody is said to be a person, then it can be inferred that that somebody was born on some unique date, and not, for instance, on no date at all or on two different ones: that’s all. If you evaluate your incomplete dataset against the ontology, all will be found to be perfectly fine, even with missing birth dates all over the place. Absence of evidence is not the same as evidence of absence — an inferencing guideline called the Open World Assumption in the OWL community (a recent discussion of the OWA can be found here).\n\nThe creative idea is: why don’t we create an OWL reasoner that reasons just like the specs require, only we drop the Open World Assumption? Then, the non-standard reasoner would find a contradiction in the data. This conclusion can only be drawn, however, when OWL is interpreted in a way that differs significantly from what the standard specifies.\n\nIt is a convoluted way to do something very simple. Also, because OWL was never designed to be used for such purposes, it is also highly limited. If you need to make the constraint a bit more stringent and say that, in addition, the birth date must be smaller than the death date if specified, there simply is no way to express this using OWL.\n\nCONSTRAINTS IN SHACL\n\nIn SHACL, on the other hand, all this is dull as dirt. Let me illustrate this briefly. Suppose my ontology contains the following fragment, defining the class person and the syntactic dependency between instances of this class and the property ‘date of birth’:\n\nWhen I feed this definition to an RDF platform (in this case TopBraid EDG), and I also add certain data, and if I tell the SHACL display form generator to show validation errors, then the UI looks as follows:\n\nI could also tell the SHACL edit form generator to refuse non-conformant edits, and, likewise, I could tell the SHACL API generator to generate an API that refuses non-compliant updates. As far as the results are concerned, all this works exactly the same on any platform that supports the W3C recommendations. That is why we need these standards.\n\nTHE SYNTAX AND SEMANTICS DEBATE REVISITED\n\nNow you may wonder: what does this have to do with syntax? The point is that OWL requires logical consistency given certain assumptions such as the Open World Assumption. Syntactic rules, on the other hand, do not care about logic and associated assumptions. They just say that certain symbols occur with other symbols, under certain conditions, in a certain form, or a certain shape. This is what SHACL provides. Shapes are about describing the admissible forms that expressions may take.\n\nCompare this with syntax in natural language. For instance: if the subject is plural, then the verb must occur in its plural form. If the verb is transitive, it must have an object. While “John is melting the butter” is fine, “John is melting” with the same meaning of subject and verb is not, because ‘to melt’ in the intended sense is a transitive-only verb. In contrast, ‘to read’ can both be transitive and intransitive, and, therefore, “John is reading” is fine, even though we infer that there must be something that John is reading.\n\nIf you look at an arbitrary entry in a dictionary, you’ll see a definition indicative of meaning, but also syntactic information, usually in a compressed form:\n\nThe famous (some would say: infamous) linguist and cognitive scientist Noam Chomsky observed back in the 1950’s that in natural language, when you violate rules of logic, the result is a feeling that your sentence is off in some way. When you violate syntactic rules, on the other hand, people have strong intuitions telling them that your sentence is ungrammatical. Thus, the following sentence obviously violates logical rules and is full of contradictions. Yet, people perceive it as being just weird. Or, maybe, poetic. But certainly not ungrammatical:\n\nColourless green ideas sleep furiously\n\nBut the next sentence is “out,” as people say in the business, notwithstanding the fact that semantically, there is nothing wrong with it (compare “Bob was watching TV while Alice texted something to her mother”):\n\n*Who was Bob watching TV while Alice texted something to?\n\nAs in the case with “John is melting”, people have strong intuitions that sentences that violate syntactic rules are really, really wrong.\n\nThere is a resemblance to what is going on in the case of OWL and SHACL. When we create an ontology (also called a schema graph), we define a language to express data in. This language needs to have syntax and semantics. The semantics is determined by RDF Semantics, not by OWL. The syntactic rules are expressed in SHACL.\n\nViolate rules of OWL, and the result is a contradiction. However, awareness of contradictions does not tell you which statements are wrong. It is very hard to translate this awareness into useful actions. Contrast this with SHACL: violate a shape constraint, and you know exactly where the error is. While it is up to you to specify what must be done in such a case (raise a warning, raise an error, refuse the input, notify the administrator, etc), the shape constraint specifies in fine detail exactly what is wrong. The rules of logic are global, abstract and generic, while syntactic rules are local, concrete and specific.\n\nSemantic web pioneer — and chair of the working group that created SHACL — Irene Polikoff has written two consecutive blogs (here and here) about this topic, discussing various cases and arguments in detail. Let us call her overall conclusion the Polikoff Rule:\n\nIf you can express a data constraint in SHACL, do not try to express it in OWL\n\nThis is not so much an opinion as it is a prediction: just like people stopped designing cars that looked like carriages, people will stop misusing restrictions for data validation. Fortunately, it is relatively easy to automatically convert ontologies and replace restrictions and other such constructs with shapes.\n\nSo, the question is: do we need OWL at all? This is the topic of the next sections.\n\nWHO NEEDS OWL REASONERS?\n\nAn important misconception about OWL is that an OWL-reasoner derives new information from known information. The fifth sentence of Michael Uschold’s otherwise quite well-written Demystifying OWL for the Enterprise goes: “It [i.e., an OWL ontology] is built so that automated reasoning software can draw conclusions resulting in new information.”\n\nIn most real-world applications, OWL reasoning is ineffective, lacks precision and is bad for interoperability.\n\nIf persons are mortal, and Socrates is a person, then Socrates is mortal. The conclusion does not add new information at all. Classes compress information, and applying the rules of logic is a way of unpacking it. This is an important point. Logically, saying that Alice is Bob’s sister implies that Bob is Alice’s brother. These are not two independent facts, but logically equivalent ways of stating the same fact. Deriving one from the other does not yield new information, but only an alternative way of conveying the same information.\n\nThus, OWL reasoning is much less useful than it seems. And so, by far the biggest misconception about OWL is that OWL reasoners are useful in many real-world applications. I call this the great OWL hoax. In most real-world applications, OWL reasoning is ineffective, lacks precision and is bad for interoperability.\n\nIneffectiveness\n\nOWL-reasoning is typically about generating triples, a process sometimes called triple injection. Thus, when “running the reasoner” on a dataset you end up with more triples, sometimes many more than you expect. With a database of hundreds of millions of triples, this is a serious risk. And why would anyone want to do this? If I need to select all resources that are mortal, or find out whether a particular resource is mortal, I can obtain the same desired result by using a query language and thus leverage the available semantics in a different, more precise and, hence, more effective way.\n\nLack of precision\n\nMoreover, generating “all possible inferences” is a bad idea in any case. Since recursiveness easily creeps in, the number of possible inferences can and often will be infinity. OWL reasoners avoid such pitfalls. But then, which inferences are drawn and which ones are skipped? Generating exactly the statements you need is impractical. Put differently, you generate a buttload of statements and hope that the ones you need are among them. That does not sound like a best practice to me.\n\nLoss of interoperability\n\nPlus, frivolous use of OWL-reasoning leads to loss of interoperability. Take SKOS. I am a long-time, big fan of this semantic web classic, and much of the work I perform during my day job would be impossible without it, but I hate the fact that almost all properties it defines have inverse twins (evil twins, really). When I need to combine two taxonomies, and one uses “foreign news is a narrower of news” and the other has “foreign news is a broader of Asian news”, then you have to normalize. Well, unless you’re ready to generate “all possible inferences” — which nobody does in practice. PROV-O, the W3C ontology for provenance data, says (see here):\n\n“When all inverses are defined for all properties, modelers may choose from two logically equivalent properties when making each assertion. Although the two options may be logically equivalent, developers consuming the assertions may need to exert extra effort to handle both (e.g., by either adding an OWL reasoner or writing code and queries to handle both cases).” (PROV-O)\n\nOWL reasoning in disuse\n\nWhether it is for these reasons or not, I have never come across a large-scale real-world commercial project that uses OWL reasoning. On the contrary: one of my larger customers even explicitly forbids projects to use OWL-reasoning as a matter of architectural principle. If you have other experiences, please leave a comment, because I would be genuinely interested.\n\nIf all this doesn’t convince you, look at it this way. SHACL reasoners also generate triples, and therefore generate “new facts” in a way similar to OWL reasoners. SHACL reasoners, however, do not apply rules of logic. The rules they execute apply custom defined shapes. These will then generate triples with surgical precision, in a controlled fashion.\n\nAs argued previously, the rules of logic are global, abstract and generic, while syntactic rules are local, concrete and specific. SHACL reasoners are therefore more powerful and often more useful than OWL reasoners.\n\nWHO NEEDS OWL?\n\nIf you do not use OWL reasoners, what do you need OWL for? The answer is you don’t — with one exception. The only thing that OWL uniquely provides that will always remain necessary is the quintessential predicate owl:imports. Other than that, I don’t see much that is truly useful and not available already in some form in the underlying specifications, or in SHACL.\n\nRDF provides the foundations of the language’s semantics — namely, a particular brand of referential semantics, which essentially says that RDF language elements denote resources in the world. It also defines the notion of predicate, which is a language element that denotes a relational resource.\n\nRDFS adds the notion of class, class hierarchy and inheritance. The notion of class implies a notion of individual. OWL makes a point of formalizing this distinction. As long as you make sure your classes and individuals are disjunct, OWL reasoning is efficient. I am a big fan of this disjunction. However, OWL does not enforce it. It is probably best to treat this as a principle of ontological hygiene. So, we do not need OWL for that either.\n\nSome people make a point of characterizing properties as either an object property or datatype property, but this can be done equally well in SHACL. What else is there in OWL? Mainly, perhaps, the various ways to constrain the semantics of properties — such as inverse-of and transitive. I have expressed my exasperation about inverse-of already, and things like transitivity are also far less useful than it seemed at the time. If in a project people start to use say, skos:broader and skos:broaderTransitive alongside each other, this is in my experience seldomly the result of a solid design decision process.\n\nThus, now that we use shapes instead of restrictions (and instead of the RDFS notions of domain and range), and given that we do not use OWL reasoning, there is not so much in OWL that is still useful for every-day purposes. Why add complexity if you do not need it?\n\nGood design in the context of ontologies and data models is, as in any context, a struggle to maximize simplicity, expressiveness and ease of use. I think it is fair to say that it is much easier to live without OWL than without SHACL. Given that for the most common practical needs SHACL obviates the need for OWL, my expectation is that as we see more SHACL, we will also see less OWL. I am willing to take bets on this. What do you think?"
    }
}