{
    "id": "dbpedia_1390_3",
    "rank": 60,
    "data": {
        "url": "https://www.mdpi.com/2076-3417/14/13/5960",
        "read_more_link": "",
        "language": "en",
        "title": "DTAG: A Methodology for Aggregating Digital Twins Using the WoTDT Ontology",
        "top_image": "https://pub.mdpi-res.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g001-550.jpg?1720682664",
        "meta_img": "https://pub.mdpi-res.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g001-550.jpg?1720682664",
        "images": [
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-black-small1.svg?da3a8dcae975a41c?1724334283",
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-black-small1.svg?da3a8dcae975a41c?1724334283",
            "https://pub.mdpi-res.com/img/journals/applsci-logo.png?8600e93ff98dbf14",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1724334283",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1724334283",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1724334283",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g005-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g005.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g001-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g001.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g002-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g002.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g003-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g003.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g004-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g004.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g006-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g006.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g007-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g007.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g008-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g008.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g009-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g009.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g010-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g010.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g011-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g011.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g012-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g012.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g013-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g013.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g014-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g014.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g015-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g015.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g016-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g016.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g017-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g017.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g018-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g018.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g019-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g019.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g020-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g020.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g021-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g021.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g022-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g022.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g023-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g023.png",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g024-550.jpg",
            "https://www.mdpi.com/applsci/applsci-14-05960/article_deploy/html/images/applsci-14-05960-g024.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-white-small.png?71d18e5f805839ab?1724334283"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Salvador González-Gerpe",
            "María Poveda-Villalón",
            "Raúl García-Castro",
            "González-Gerpe",
            "Poveda-Villalón",
            "García-Castro"
        ],
        "publish_date": "2024-07-08T00:00:00",
        "summary": "",
        "meta_description": "The advancement of digital twins (DTws) has been instrumental in various scientific and industrial domains, facilitating real-time monitoring, analysis, and optimisation of complex systems. However, it remains difficult to describe precisely the architectural models and their characteristics of DTws and the aggregation of lower-level DTws to higher-level DTws. This article introduces two contributions with the goal of addressing challenges in describing DTws architectures and aggregating DTws. Firstly, it presents the development of “WoTDT” (WoT digital twin) ontology, an extension of the W3C Web of Things descriptions ontology, designed to semantically describe the five-dimensional model architecture of DTws. This ontology enhances data interoperability and accessibility across dimensions, promoting a deeper understanding of DTws. Secondly, it introduces the “DTAG” (digital twin aggregation) methodology for aggregating multiple DTws into an unified DTw aggregate (DTwA). This methodology considers whether the DTws contain semantics or not and employs the WoTDT ontology to conceptualise the architecture and features of the resulting DTwA. Finally, an example of WoTDT ontology together with the DTAG methodology is shown in the context of the European H2020 construction-related project COGITO.",
        "meta_lang": "en",
        "meta_favicon": "https://pub.mdpi-res.com/img/mask-icon-128.svg?c1c7eca266cd7013?1724334283",
        "meta_site_name": "MDPI",
        "canonical_link": "https://www.mdpi.com/2076-3417/14/13/5960",
        "text": "Ontology Engineering Group, Universidad Politécnica de Madrid, 28660 Madrid, Spain\n\n*\n\nAuthor to whom correspondence should be addressed.\n\nAppl. Sci. 2024, 14(13), 5960; https://doi.org/10.3390/app14135960\n\nSubmission received: 16 May 2024 / Revised: 21 June 2024 / Accepted: 2 July 2024 / Published: 8 July 2024\n\n(This article belongs to the Special Issue Advances in Ontology and the Semantic Web)\n\nAbstract\n\n:\n\nThe advancement of digital twins (DTws) has been instrumental in various scientific and industrial domains, facilitating real-time monitoring, analysis, and optimisation of complex systems. However, it remains difficult to describe precisely the architectural models and their characteristics of DTws and the aggregation of lower-level DTws to higher-level DTws. This article introduces two contributions with the goal of addressing challenges in describing DTws architectures and aggregating DTws. Firstly, it presents the development of “WoTDT” (WoT digital twin) ontology, an extension of the W3C Web of Things descriptions ontology, designed to semantically describe the five-dimensional model architecture of DTws. This ontology enhances data interoperability and accessibility across dimensions, promoting a deeper understanding of DTws. Secondly, it introduces the “DTAG” (digital twin aggregation) methodology for aggregating multiple DTws into an unified DTw aggregate (DTwA). This methodology considers whether the DTws contain semantics or not and employs the WoTDT ontology to conceptualise the architecture and features of the resulting DTwA. Finally, an example of WoTDT ontology together with the DTAG methodology is shown in the context of the European H2020 construction-related project COGITO.\n\n1. Introduction\n\nCurrent technological advancements and the increasing complexity of modern systems have driven the adoption of digital twins (DTws) as a powerful solution to address a variety of challenges [1], such as high-fidelity modelling, data acquisition and processing, and unified development platforms and tools. DTws offer a virtual representation of physical assets, processes, or systems, enabling real-time monitoring, simulation, and optimisation. This technology has become widely accepted in various domains due to its potential to help decision-making, improve operational efficiency, and increase overall performance [2].\n\nDTws can be differentiated in multiple levels [2], such as DTw at the unit level (representing individual components or assets), DTw at the system level (modelling a collection of interconnected units), and DTw at the system-of-systems level (representing complex interconnected systems). Furthermore, these levels can be represented as a digital twin instance (DTwI) for the unit level and a digital twin aggregate (DTwA) for the system and system-of-systems level [3]. Although DTws offer many benefits, such as providing solutions to the challenges explained previously, a considerable challenge lies in the interoperability between different levels of DTws [4,5,6].\n\nFurthermore, even though DTws can be represented on different levels, a challenging problem arises when trying to aggregate and connect lower-level DTws (DTwI) to create higher-level representations (DTwA). In many cases, these DTws are developed independently, using different data formats, architectures [7,8], modelling methodologies, and sometimes ontologies [2]. This results from a lack of interoperability between the data generated at each DTw level.\n\nIn this article, an extension of the W3C standard thing description (TD) ontology [9], proposed by the Web of Things (WoT) group, called the WoTDT ontology (WoTDT ontology v2: https://w3id.org/def/dtw, accessed on 18 May 2024) (WoT digital twin ontology) is presented. The goal of the WoTDT ontology is to provide formal semantics to represent the five-dimensional architecture model approach [8] and its features, allowing semantic discovery by reusing the TD ontology and a common approach to describe the capabilities of a DTw allocated by dimensions. Furthermore, this ontology was developed using the LOT methodology [10], following good practices in ontology engineering.\n\nIn addition, this article also includes an aggregation methodology called DTAG (digital twin aggregation methodology), used to aggregate DTws of different levels to obtain an aggregated DTw (DTwA), taking into consideration whether the DTws contain semantics or not. DTAG methodology follows dimensional aggregation according to the five-dimensional approach [8], where WoTDT ontology is applied to conceptualise the architecture and features of the resultant DTwA. Thus, this aggregation approach enables the aggregation of both metadata and data (whether semantic or not) from multiple DTws, resulting in a DTwA that contains all the metadata, centralised through the WoTDT ontology, and incorporates the data related to the DTws involved in the aggregation.\n\nThe rest of this article is structured as follows. Section 2 provides an overview of the literature and research proposals related to DTws in terms of architectures, different levels, aggregation, and ontologies. Section 3 includes the development of the WoTDT ontology using the LOT methodology. Section 4 provides the aggregation methodology based on the dimensions described in the WoTDT ontology and provides examples of aggregation by two DTws, which are aggregated into a DTwA extracted from the European H2020 COGITO (COGITO project: https://cogito-project.eu/, accessed on 18 May 2024. All the images presented in this article can be found in the repository used to publish and maintain the ontology presented: https://github.com/oeg-upm/WoT-DT-ontology-v2/tree/main/images/article_images, accessed on 18 May 2024) project. Section 5 introduces the different advantages and disadvantages of the presented aggregation method and recaps the conclusions of this research.\n\n2. State of the Art\n\nThe concept of digital twin was introduced by Michael Grieves as a product lifecycle management (PLM) [7] for NASA in the aerospace field, defining it as a digital representation of a physical object or system that can be used to analyse its behaviour and effectiveness. The proposal models a three-dimensional architecture: the physical dimension, which represents the actual asset in the real world; the virtual dimension, which represents the software representation of the physical asset; connection parts, which exist between the physical and virtual dimensions.\n\nFollowing the three-dimensional methodology, the researchers focused on refining aspects of these dimensions to address new challenges [3,11,12,13]. For instance, NASA [12] enhanced the current simulations conducted in the virtual dimension with the aim of better managing US Air Force aircraft over their operational lifetime through the development of customised structural management strategies and by integrating real-time data collection into the physical dimension.\n\nFive-dimensional model approach: Subsequently, in 2017, Tao and Zhang [8] proposed a five-dimensional model of a DTw, extended from the three-dimensional approach. In this proposal, the physical dimension is referred to as the physical entity dimension, while the connections are termed the digital twin connection dimension. Instead, the virtual dimension is divided into three dimensions: the virtual entity dimension, which includes the description of the DTw models (such as rules, behavioural, physical, etc.), the data dimension of the digital twin, where all the data utilised by the DTw are stored, and the digital twin service dimension, which includes all the services used by the DTw.\n\nDTw levels: Based on the five-dimensional model, three-level differentiation of DTws was proposed [14]: (i) unit level, which is the minimum unit that can be represented as a DTw (e.g., a robotic arm belonging to an assembly line); (ii) system level, it is considered as the integration of multiple DTws at unit level that cooperate with each other (e.g., the set of robotic arms belonging to the assembly line); (iii) system of systems level, which is the set of system-level DTws that need each other to perform more complex operations (e.g., the set of assembly lines in the factory where the assembly process is being carried out). This model of DTws divided into levels is also presented in other articles [2], where the existence of a world of interconnected twins is proposed, where the DTw of a system can be the composition of a system made up of interconnected DTws of a lower level.\n\nDTw aggregation: Grieves and Vickers presented the idea of DTws aggregation in 2016 [3], outlining concepts such as a DTw prototype (DTwP), a DTw instance (DTwI), a DTw aggregate (DTwA), and a DTw environment (DTwE). A DTwP characterises a physical object to the extent that an object can be produced using the details provided in the DTwP. A DTwI represents an instance of a DTwP, which is linked to a specific physical object and persistently collects data about this object during its lifecycle. The DTwA aggregates all DTwIs of a specific category to create a larger and more complete dataset concerning the operation of a type of physical object. Finally, the DTwE serves as an integrated interdisciplinary physics application environment that uses the DTws for multiple purposes, such as the simulation of future system behaviour. Brangiu et al. [15] used aggregation to collect, process, and reduce data from multiple DTws to inform a control application. Karanjkar et al. [16] aggregated historical data (collected within DTws) to handle large amounts of historical data. Similarly, Pan et al. [17] employed hierarchical data format (HDF) data compression to aggregate large amounts of heterogeneous data, providing a more comprehensive and integrated data representation. Lutze [18] employed personal DTws to maintain patient medical records. Additionally, group DTws and system DTws, which are compilations of personal DTws organised by specific criteria, serve the purpose of training machine learning models. While personal DTws contain all relevant medical data of a patient, group and system DTws only gather the data necessary for the intended model, thereby excluding details like the patient’s name to maintain privacy and anonymity.\n\nFurthermore, architectures for DTw aggregations have been proposed. Villalonga et al. [19] proposed a hierarchical aggregation approach, where local DTws focused on monitoring and diagnosing the health of assets, whereas global DTws focused on decision-making processes. Ciavotta et al. [20] introduced a framework in which data from various DTw are organised into layers. These layers are subsequently aggregated into different collections tailored to the user’s preferences and required level of detail. Finally, Redelinghuys et al. [21] proposed a six-layer architecture for DTw with aggregation called SLADTA (six-layer architecture for DTws with aggregation), which is an extension of the SLADT framework that allows multiple DTws to aggregate data for a system-level perspective.\n\nDTw aggregation problems and possible solutions: From these aggregations between different DTws, numerous problems can be found. A complex system usually contains multiple subsystems and components that may have their own DTw models. These models may be created by various stakeholders based on different protocols and standards whose structures and data sources are often heterogeneous in terms of syntax, schema, and semantics. This makes the integration of DTw models a difficult task [4]. To solve this problem, in the literature, the use of semantic technologies has been used as key components in various DTws to obtain semantic interoperability in data and in heterogeneous information [5,6].\n\nSemantics in DTw: The application of semantic web technologies in the development, management, and modelling of DTws has grown in recent years. Specifically, recommendations have been proposed on how to integrate ontologies and their advantages for DTw [22]. The ontologies of the DTws are used to (i) improve the visualisation and understanding of the DTw data [23] and (ii) describe the architecture model of a DTw [24].\n\nIn the literature, various studies have been conducted concerning the description of an architecture model of a DTw, which is the goal of WoTDT ontology. Charles Steinmetz et al. [24] explored the extension of IoT-Lite ontology [25] by adding classes related to the virtual aspect of the three-dimensional model, which enables external applications and systems to interact with the virtual dimension through a specific protocol. Following this approach, Sumit Singh et al. [26] introduced an ontology designed to encapsulate domain knowledge and preserve the semantic integrity of asset functionalities and fundamental properties throughout their operational period within the virtual aspect. Furthermore, Meijers of Microsoft Azure introduced the digital twins definition language (DTDL) [27], which uses an RDF metamodel to represent DTw virtual aspect metadata within their proprietary tools.\n\nWoT in DTws: In the literature, the research conducted by Ricci et al. [28] outlines the development of a DTws ecosystem that employs semantic web technologies within the healthcare domain. In their research, the integration of DTw and WoT improves the accuracy of real-time asset monitoring and interoperability with different systems. A different proposal by Pittaras et al. explored the integration of the WoT standards with smart contracts to represent DTws of physical devices [29]. Furthermore, the study by Luca Bedogni and Federico Chiariotti [30] introduced an architecture based on the WoT standard to facilitate a DTw in a smart environment involving sensors implemented in a construction-related project. Finally, Xiaochen Zheng et al. [4] integrated these technologies, applying WoT in cognitive DTws (CDTws) to standardise and facilitate data interoperability.\n\nIn this article, an extension of WoT description ontology [9] is named WoTDT ontology. WoTDT ontology diverges from those previously presented ontologies in the literature by not only describing the virtual aspect but also integrating all five dimensions suggested by Tao and Zhang [8]. In addition, this ontology allows us to centralise all the metadata of the DTw, providing a unified point for accessing its features and data. Furthermore, it allows the aggregation of other metadata from DTws, which facilitates interaction with the DTwE introduced by Grieves and Vickers [3]. Since this ontology is based on WoT, it allows each DTw to (i) describe services of different dimensions [9], (ii) discover services across dimensions [31], (iii) define the security specification of each dimension [9], and (iv) facilitate the access of data of a specific dimension [9].\n\nIn addition to ontology, this article includes a methodology called DTAG for aggregating DTws, which considers whether the DTw contains semantics or not. This aggregation methodology follows dimensional aggregation according to Tao and Zhang’s five-dimensional model, where WoTDT ontology is applied. Therefore, this methodology, unlike the aggregations presented in the literature, allows the aggregation of the metadata and data (semantic or non-semantic) of different DTws that are in a DTwE, obtaining a DTwA that contains all the metadata, centralised thanks to the WoTDT ontology, and all the data regarding the DTwIs or DTwAs of the DTwE involved in the aggregation process.\n\n3. WoTDT Ontology Development\n\nIn this article, a novel approach is presented to semantically represent the metadata of a digital twin (DTw) that follows the five-dimensional architecture model [8] with its characteristics and functionalities. To this end, this ontology was developed as an extension of thing description ontology (TD) [9], proposed by the W3C Web of Things group, which is a standard that allows the description of services, promoting interoperability, discoverability, accessibility, and security. This novel ontology, named WoTDT, provides an approach that describes the metadata of all the dimensions and internal capabilities of a DTw, allowing the centralisation of all the metadata of the DTw.\n\nWoTDT ontology has been developed following the LOT (Linked Open Terms) methodology [10]. This methodology is based on the ontological engineering activities described in the NeOn methodology [32]. In addition, this methodology incorporates agile techniques in the ontology development process, allowing the division of development into sprints or iterations.\n\nThe LOT methodology outlines a process that includes the following activities: (i) specifying ontological requirements, (ii) implementing the ontology, (iii) publishing the ontology, and (iv) maintaining the ontology. The following subsections provide further details on these activities and their implementation to deliver WoTDT ontology.\n\n3.1. WoTDT Requirements\n\nThe specification of ontology requirements is derived from the analysis of ontologies from the literature, the five-dimensional model approach, and the aggregation method proposed in this article, which was refined during its adoption and use in the COGITO H2020 project. In contrast to the ontologies found in the literature that are limited to the virtual aspects of a DTw, WoTDT ontology outlines the necessary requirements to conceptualise the five dimensions, as defined by Tao and Zhang [8]. Similarly, the virtual component discussed in WoTDT presents similarities to the ontologies described in the existing literature. From these inputs, a collection of ontological requirements was generated in the form of competency questions and sentences in natural language. Table 1 shows the new requirements obtained from the specification process.\n\n3.2. WoTDT Implementation\n\nTo streamline the implementation process, a conceptualisation of the ontology was proposed using the requirements identified in the previous step as input. This conceptualisation incorporates the key concepts to represent the metadata of the five dimensions of the DTw and the aggregation of other DTws. Figure 1 shows an overview of the representation of this conceptualisation, which follows the Chowlk visual notation [33], which establishes a connection between the stereotypes used in the profile with OWL, RDF (S), and certain OWL2 constructs. The use of prefixes indicates the ontologies in which a concept or relation is defined. For example, dtw:DigitalTwin is defined under the “https://w3id.org/def/dtw”, accessed on 18 May 2024. Furthermore, this ontology reuses DCAT ontology (data catalogue vocabulary), such as dcat:Resource; HCTL ontology (WoT hypermedia controls ontology), such as hctl:hasTarget; apart from WoT thing description ontology, such as td:InteractionAffordance.\n\nAs shown in Figure 1, the dtw:DigitalTwin class is defined as a owl:subClassOf of the td:Thing class, enabling it to inherit the properties of the td:Thing class. In addition, the different dimensions detected in the requirements identification process are represented using the following classes: dtw:Entity, for the physical entity dimension; dtw:DigitalEntity, for the digital entity dimension; dtw:Model, for the virtual entity dimension; dcat:Resource, for the DTw data dimension; td:InteractionAffordance, for the DTw services dimension; dtw:Connection, for the DTw connection dimension. These dimension conceptualisations will be explained separately in the following subsections.\n\n3.2.1. Physical Entity Dimension\n\nIn WoTDT ontology, the dtw:Entity class is a representation of the dimension of the physical entity. This class goes beyond only representing physical entities, such as sensors or actuators, and can also represent non-physical entities, such as processes or projects. It should be noted that this dimension is unique for every DTw because it represents the entity from which the DTw is being created.\n\n3.2.2. Digital Entity Dimension\n\nThe dimension of the digital entity in WoTDT ontology is associated with the class dtw:DigitalEntity. This class allows for the representation of the digital entity of the DTw. Moreover, as this dimension is described, it allows us to represent the proposed three-dimensional model for a DTw [3]. This dimension also contains the dimensions of virtual entity, DTw data, and DTw services, allowing the representation of the five-dimensional approach [8].\n\n3.2.3. Virtual Entity Dimension\n\nThe dimension of the virtual entity in the developed ontology is represented by the class dtw:Model. This class allows for representing the conceptualisation of data registered in the DTw. As can be shown in Figure 2, there are different subclasses under the dtw:Model class that allows for representing non-semantic models, such as the dtw:BehavioralModel or dtw:PhysicalModel, and semantic models, such as the dt:OntologyModel. Furthermore, as shown in Figure 1, each of these dtw:Model has a specific format, represented by the class dtw:Format, containing attributes represented as owl:DatatypeProperty, such as the route where the model is stored (hctl:hasTarget), and the extension of the model (dt:hasExtension), that can be, for example, the case of an dt:OntologyModel of the “ttl” extension that refers to turtle serialisation.\n\n3.2.4. DTw Data Dimension\n\nOnce the previous dimensions have been explained, the dimension of the DTw data will follow. In WoTDT ontology, the dimension of DTw data is represented by the class dcat:Resource. In this case, the authors chose to adopt DCAT ontology over WoT TD ontology for data representation due to the comprehensiveness of DCAT and its ability to describe more extensive data volumes (as used in DTws) featuring a broader range of features, such as dcat:Dataset, dcat:DataService, or dcat:Catalog. This approach can be useful when dealing with diverse data volumes classified by both semantic and non-semantic categories.\n\n3.2.5. DTw Services Dimension\n\nThe following dimension is the dimension of DTw services. This dimension is represented by the class td:InteractionAffordance. As explained previously, WoT enables the description of DTw services, which is why the class td:interactionAffordance is reused in this context to represent the various services within the DTw. Furthermore, this class demonstrates the options available to DTw consumers, indicating the ways in which they can interact with DTw services.\n\n3.2.6. DTw Connections Dimension\n\nThe last dimension is the dimension of DTw connections, which is represented by the class dtw:Connection. This class represents the different connections that are available between DTw dimensions. This dimension, as well as the dimension of the physical entity, is unique for every DTw because it represents the connections of the DTw between the dimensions of the DTw itself or between these dimensions and the external dimensions of other DTws. Furthermore, a set of subclasses has been created under the dtw:Connection class to represent the different connections that can exist. These subclasses can be seen in Figure 3. In order to represent a particular endpoint of a dimension that functions as a provider (dtw:hasProvider) or consumer (dtw:hasConsumer) of information within the connection, the class dtw:ConnectionPoint has been created. The authors decided to introduce the class dtw:ConnectionPoint instead of reusing existing SEAS ontology [34] because SEAS ontology only considers connections between systems, whereas, in the context of DTws, connections may not always be limited to systems.\n\n3.2.7. Aggregation Method Conceptualisation\n\nIn this section, the representation of the conceptualisation of the aggregation method introduced in this article is explained. This conceptualisation is focused on the last four identified requirements. In order to satisfy the requirements of representing a DTwI and a DTwA, the subclasses of dtw:DigitalTwinInstance and dtw:DigitalTwinAggregate have been added under the class dtw:DigitalTwin. Furthermore, there are two new types of owl:ObjectProperty that represent the aggregation connection between DTwAs and DTwIs or other DTwAs. These object properties are dtw:aggregateDTwI and dtw:aggregateDTwA.\n\nMoreover, to conceptualise whether the connections are internal to the DTw or external to other DTw, two subclasses have been added under the class dtw:ConnectionPoint. On the one hand, dtw:InternalConnectionPoint represents if the existing connection point in the DTw is internal, and on the other hand, the class dtw:ExternalConnectionPoint represents if the connection point is external to the DTw. Therefore, the connection points depend on the viewpoint of the DTw. This conceptualisation can be found in Figure 4.\n\nFinally, the last requirement, which refers to the aggregation representation between the data models or the data resources is conceptualised. This conceptualisation has been represented as a cyclic relation between owl:ObjectProperty, dtw:Model, and dcat:Resource classes. On the one hand, the owl:ObjectProperty defined for dtw:Model is dtw:modelAggregatedFrom, which represents the data models (e.g., ontology models) used in the aggregation to obtain the DTwA data model. On the other hand, the owl:ObjectProperty defined for dcat:Resource is dtw:resourceAggregatedFrom, which represents the data resources (e.g., knowledge graphs) used in the aggregation to obtain the DTwA data resource.\n\nOnce the conceptualisation of WoTDT ontology was defined, it was encoded in OWL using Chowlk [35] and Protégé (Protégé: https://protege.stanford.edu, accessed on 18 May 2024) and stored in a GitHub repository (GitHub repository: https://github.com/oeg-upm/WoT-DT-ontology-v2, accessed on 18 May 2024).\n\n3.3. WoTDT Evaluation\n\nThe evaluation to identify typical errors during the ontology extension implementation was performed using the OOPS! tool [36]. This tool receives the ontology as input and detects possible pitfalls commonly found in the ontology implementation phase. This tool is independent of the ontology editor used and performs a greater number of automatic checks than the rest of the existing tools, with a detection catalogue of 41 pitfalls. Through the use of this tool, several minor pitfalls have been identified, but all were corrected accordingly.\n\nFurthermore, the authors performed a systematic analysis to ensure that the extension of the ontology satisfies the requirements described in Table 1. To perform this verification, a set of tests (Themis tests: https://github.com/oeg-upm/WoT-DT-ontology-v2/blob/main/testsuite.ttl, accessed on 18 May 2024) was defined and executed using the Themis tool [37], which implements the testing methodology defined by Fernández-Izquierdo and García-Castro [38]. Upon execution of the tests, it was found that all tests passed successfully, suggesting that the developed ontology extension meets all specified requirements.\n\n3.4. WoTDT Publication and Maintenance\n\nAfter the development and evaluation activities, the ontology has to be published online. To achieve this goal, the Ontoology [39] tool is used. This tool is a web-based system that is designed to work seamlessly with Git-based environments and incorporates various pre-existing documentation tools. Furthermore, OnToology provides two methods for publishing via content negotiation techniques. The initial method involves the use of a permanent identifier to publish the ontology, facilitated by the services at “https://w3id.org”, accessed on 18 May 2024. Alternatively, the second option is to download a bundle containing all the necessary files to publish the ontology on a server. For WoTDT ontology, the permanent identifier method was chosen, which resulted in its publication within the URI “https://w3id.org/def/dtw”, accessed on 18 May 2024, making it accessible in both machine-readable and human-readable forms.\n\nFinally, to support maintenance activity in the developed ontology, an issue tracker (https://github.com/oeg-upm/WoT-DT-ontology/issues, accessed on 18 May 2024) is used. This issue tracker enables the monitoring of all suggested issues, and once an issue is open, the ontology development team needs to discuss and make a decision on whether the submitted proposal should be implemented in the ontology or rejected.\n\n4. DTw Aggregation Methodology\n\nThe DTw aggregation (DTAG) methodology is a lightweight methodology for developing aggregation between DTws to obtain an aggregated DTw (DTwA). The DTws involved in aggregation can be DTwI or DTwA, with the aggregation always producing a DTwA. In addition, this DTwA can also be used for future aggregation processes. This methodology follows WoTDT ontology for aggregating the different DTws according to the dimensions conceptualised in the ontology. Therefore, the various tasks involved in the aggregation process will be distinguished according to the five dimensions [8] conceptualised in the ontology, as explained in Section 3.\n\nThe DTAG methodology defines interactions on a basic workflow composed of the following activities, also represented in Figure 5:\n\nDTws instantiation, where the DTws involved in aggregation are instantiated using WoTDT ontology.\n\nDTws dimension aggregation development, where the information contained in the different dimensions of DTw involved are aggregated.\n\nDTwA maintenance, where the DTwA obtained from the aggregation process is updated according to the functionalities that will be performed.\n\nFigure 5. DTAG methodology base workflow.\n\nAlthough numerous roles may participate in the aggregation of DTws, the DTAG methodology categorises them into the following groups:\n\nDTw developer: a DTw developer is part of the DTw development team and possesses extensive knowledge regarding the DTws used in the aggregation process.\n\nDomain expert: a domain expert possesses expertise in the fields addressed by the DTws used in the aggregation process.\n\nDTwA user: a DTwA user is the end user of the DTwA obtained from the aggregation process. This actor will also include DTw developers who will use and extend the DTwA knowledge and functions.\n\nThe subsequent sections provide comprehensive information on each activity, encompassing detailed tasks and workflows, intermediate results, and the tools used for support. In addition, for every activity performed, an example taken from the COGITO project will be explained; therefore, they will be limited to the constraints imposed on the project.\n\nFurthermore, examples of aggregation involve two DTws. The first DTw refers to a construction pilot of a railway station in Munich (Germany), while the second DTw refers to a construction pilot of a railway station in Murcia (Spain). The desired result of the aggregation of these two DTws is to obtain a DTwA that defines a DTw of the entire COGITO project.\n\nIt is worth noting that this article focuses on the investigation of the description of an ontology that allows us to describe the metadata of a DTw in its totality and offers a functionality for the possible aggregation between DTws. In turn, the described aggregation methodology focuses on offering solutions to the possible types of aggregation between the existing components in the DTws. Therefore, in each of the activities of the methodology, tools or frameworks existing in the literature are proposed to allow the aggregation or integration of the different components of DTws.\n\nMoreover, the aggregation methodology focuses, as the ontology, on aggregation by dimensions of the five-dimensional model. For this reason, unlike the aggregations presented in Section 2, this methodology allows the aggregation of metadata and data (semantic or non-semantic) belonging to different DTws within a DTwE, obtaining a single DTwA containing all the centralised metadata thanks to the WoTDT ontology, and all the data belonging to the DTwIs/DTwAs involved in the aggregation process.\n\n4.1. DTws Instantiation\n\nThe DTws instantiation activity refers to the activity of obtaining prerequisites for the DTAG methodology. This activity of obtaining prerequisites focuses on collecting all metadata of all dimensions of the DTws involved in the aggregation and the instantiation of all of these metadata using the WoTDT ontology presented in Section 3.\n\nAs shown in Figure 5, this activity will be carried out by DTw developers and domain experts. The workflow proposed for the DTws instantiation activity is shown in Figure 6.\n\n4.1.1. DTw Metadata Extraction by Dimension\n\nThe goal of DTw metadata extraction by dimension activity is to obtain all the metadata information of the DTw to instantiate and centralise it in a single place. This activity involves DTws developers and domain experts of DTws involved in the aggregation process. The output of the activity is a table that contains the metadata information that refers to the different dimensions of the DTws, which describes all the functionalities and accesses of DTws. The described table should contain the following columns:\n\nDTw: DTw where the metadata are extracted.\n\n–\n\nDTw Identifier: identifier that represents the DTw.\n\n–\n\nDTw Title: title that describes the DTw specifically.\n\nEntity: entity or asset that is represented by the DTw.\n\n–\n\nEntity Identifier: identifier of the entity or asset represented by the DTw.\n\n–\n\nEntity Title: title that specifically describes the entity or asset that is represented by the DTw.\n\nModels: models used by the DTw to model its data.\n\n–\n\nModel Type: type of model described as subclasses in the model class of WoTDT ontology.\n\n–\n\nModel Identifier: identifier of the model.\n\n–\n\nModel Title: title that describes specifically the model.\n\n–\n\nModel Description (optional): description that describes the model.\n\n–\n\nModel Formats: formats in which the model can be found.\n\n–\n\nModel Access URL: URL where the model can be accessed.\n\nResources: data resources used by the DTw.\n\n–\n\nResource Type: type of data resource described as subclasses in the resource class of the reused DCAT ontology in the WoTDT ontology.\n\n–\n\nResource Identifier: identifier of the resource.\n\n–\n\nResource Title: title that describes specifically the resource.\n\n–\n\nResource Description (optional): description that describes the resource.\n\n–\n\nResource Access URL: URL where the resource can be accessed.\n\n–\n\nResource Download URL (optional): URL where the resource can be retrieved.\n\n–\n\nRelated Resources Identifier (optional): relations with other data resources, such as distributions or data services where a dataset is stored.\n\nServices: services used by the DTw to execute processes.\n\n–\n\nService Type: if it is a property, action, or event affordance from the thing description ontology.\n\n–\n\nService Identifier: identifier of the service.\n\n–\n\nService Title: title that describes the service specifically.\n\n–\n\nService Description (optional): description that describes the service.\n\n–\n\nService Access URL: URL where the service can be accessed.\n\n–\n\nService Content Type (optional): content type that returns the service, such as “application/json”.\n\nConnections: existing connections between the different dimensions of the DTw.\n\n–\n\nConnection Type: type of connection described as subclasses in the connection class of WoTDT ontology.\n\n–\n\nConnection Identifier: identifier of the connection.\n\n–\n\nConnection Title: title that describes specifically the connection.\n\n–\n\nConnection Description (optional): description that describes the connection.\n\n–\n\nConnection Provider Identifier: identifier of the connection provider.\n\n–\n\nConnection Consumer Identifier: identifier of the connection consumer.\n\nAn example of the extraction of the DTw metadata from the COGITO Munich pilot is shown in Table 2, Table 3 and Table 4.\n\n4.1.2. Metadata Instantiation Using WoTDT Ontology\n\nThe goal of metadata instantiation using WoTDT ontology activity is to provide the DTwA user with necessary information about the DTws involved in the aggregation process in a centralised and homogeneous format to perform the DTws dimension aggregation development activity. This activity involves DTws developers of the DTws involved in the aggregation process, who will be responsible for performing the instantiation of the metadata available in the table using WoTDT ontology. The output of the activity is an instantiation of the metadata extracted from the previous activity using WoTDT ontology. Since the data described in the table follow the modelling of WoTDT ontology, the instantiation of the information is straightforward. For the instantiation representation, a modification of Chowlk’s notation is used. Therefore, an excerpt of this instantiation can be seen in Figure 7, following the metadata extracted in Table 2, Table 3 and Table 4. Furthermore, an excerpt from the instantiation of the other DTw (Murcia pilot DTw) involved in the aggregation can be seen in Figure 8.\n\n4.2. DTws Dimension Aggregation Development\n\nThe DTws dimension aggregation development activity refers to the activity of performing aggregation by dimensions of the DTws involved, obtaining a DTwA. This aggregation activity focuses on aggregating different information obtained from the dimensions of the DTws instantiated in Section 4.1 using WoTDT ontology.\n\nAs shown in Figure 5, this activity will be carried out by experts in the domain and DTwA users. The workflow proposed for the DTws instantiation activity is shown in Figure 9.\n\nDTwA Entity Creation\n\nAs explained in Section 3.2.1, the entity in a DTw is unique; therefore, the objective of this activity is to provide an entity in the real world that describes the DTwA. This activity involves the DTwA user and domain experts, who will be responsible for selecting the entity that will describe the DTwA. Once the entity has been selected, it should be instantiated using WoTDT ontology, as was carried out in Section 4.1. Therefore, the output of this activity will be the selection and instantiation of the entity that represents the resulting DTwA.\n\nIn Figure 10, the instantiation of the entity belonging to the DTwA that refers to the aggregated DTw of the COGITO project can be observed, together with the reference to the DTws involved in the aggregation process.\n\n4.3. Digital Entity Aggregation\n\nIn the “Digital Entity”, data models, data resources, and service interaction affordances can be found. Therefore, the goal of this activity is to provide the aggregation of data models, data resources, and the reference of the service interactions affordances from the DTws involved in the aggregation process and its instantiation.\n\nAs shown in Figure 9, this activity will be carried out by the DTw user and domain experts. Furthermore, the workflow proposed for the digital entity aggregation activity is shown in Figure 11.\n\n4.3.1. Models Aggregation\n\nData models represent all data conceptualisations of the DTw [8]. The goal of this activity is to aggregate the models from the DTws involved in the aggregation to obtain the DTwA models. This activity involves the DTwA user performing aggregation between the models of DTws and obtaining DTwA models. Furthermore, this activity also involves domain experts in providing support for the model aggregation process. These models are divided into non-semantic and semantic models; therefore, an activity must be performed for each of them.\n\nNon-Semantic Model Referenciation\n\nThe goal of the non-semantic models referenciation activity is to reference all non-semantic models of the DTws involved in the aggregation within DTwA instantiation using WoTDT ontology. This activity involves domain experts and the DTwA user to select which of the non-semantic models from the table developed in Section 4.1 can be useful for the resultant DTwA. Once the non-semantic models are selected, these are referenced in the instantiation of the DTwA models using WoTDT ontology. Therefore, the output of this activity will be the instantiation of the references to the non-semantic models that are of interest for the resultant DTwA.\n\nFurthermore, in case new non-semantic models are needed for the DTwA, the DTwA user should reference them in DTwA model instantiation.\n\nIn Figure 12, a non-semantic model reference from the Munich pilot DTw is referenced in the instantiation of the DTwA.\n\nSemantic Model Aggregation and Referenciation\n\nIn case the DTws involved in the aggregation process contain semantic models, a process different from the one described in Section “Non-Semantic Models Referenciation” shall be conducted. Semantic models can include the following: (i) ontologies, which contain all the conceptualisation of all the semantic data that are going to be used in the DTwA; (ii) mappings, which are based on the ontologies models and contain the rules that aim to materialise the DTw knowledge graph [40] using data resources as input; (iii) shapes models, such as SHACL shapes [41], which are going to be the shapes models used for this article, that are also based on the ontology, but their objective is to contain the validation rules (restrictions/constraints) to verify the knowledge graph materialised by the rules described in the mapping models.\n\nThe goal of semantic model aggregation and referenciation activity is to provide semantic models that are going to be used by the DTwA to conceptualise its semantic data. This activity involves the DTwA user and the domain experts to first select the semantic models that can be useful for the DTwA, and then in the case that two models of the same type belonging to different DTws are found (types described as subclasses of the model class in the WoTDT ontology), perform the aggregation process between them in order to be able to have links between both models. After selecting and aggregating the semantic models, they should be referenced in DTwA instantiation using WoTDT ontology. This includes both models originating from the DTws involved in aggregation and those derived from the aggregation process.\n\nSometimes, both models can be the same between different DTws involved in aggregation; therefore, if the DTwA user and domain experts select them to be used in the resulting DTwA, they should be referenced as in Section “Non-Semantic Models Referenciation”.\n\nConsequently, the output of this activity is to acquire semantic models that will be used in the DTwA and referenced during the instantiation of the DTwA.\n\nThe following sections describe the aggregation that can be performed for each of the semantic models described.\n\nOntology Aggregation\n\nThe goal of the ontology aggregation activity is to perform an aggregation between two ontologies to obtain a single ontology that contains the conceptualisation needed for the DTwA data. This activity involves the DTwA user performing the aggregation process and the domain experts providing information about the ontologies domain. The output of this activity is an ontology resulting from the aggregation of the ontologies of the DTws involved in the aggregation process and its reference in the instantiation of the DTwA using WoTDT ontology.\n\nIn the aggregation process of ontology models, multiple scenarios can be found. The scenarios depend on whether the ontology models of the DTws to be aggregated are (i) identical, (ii) partially overlapping, or (iii) completely distinct. For each of these scenarios, the aggregation steps are different.\n\nScenarios that involve identical or partially overlapping ontologies do not require operational aggregation because these ontologies are interconnected. In the first scenario, the ontologies are identical, whereas in the second scenario, they are linked to each other. Therefore, DTws ontologies must be referenced by DTwA instantiation using WoTDT ontology. Meanwhile, in the third scenario, a process called ontology alignment needs to be performed. In Figure 13, the workflow of this activity is presented depending on the particular aggregation scenario.\n\nThe ontology alignment process performed in the third scenario refers to the activity of identifying similarities between two or more ontologies and then exploiting or storing them [32,42]. For these ontology alignment activities, there is an organisation called the Ontology Alignment Evaluation Initiative (OAEI) (https://oaei.ontologymatching.org/2023/, accessed on 18 May 2024), which annually proposes challenges to perform better ontology alignment algorithms. The OAEI initiatives are as follows: (i) evaluation of the advantages and disadvantages of alignment/matching systems; (ii) comparison of the performance of techniques; (iii) improvement of the level of communication among algorithm developers; (iv) improvement of evaluation techniques; (v) assistance in improving ontology alignment and matching research.\n\nIn recent years, the Matcha and LogMap frameworks have been used the most for ontology alignment and matching in OAEI due to the fact that they offer the best results.\n\nOn the one hand, Matcha [43] is an innovative ontology matching system that seeks to address persistent issues in the field of ontology matching. It integrates the essential algorithms of AgreementMakeLight (AML) [44] into a new core framework that is specifically designed to handle the matching of multiple ontologies and complex ontology matching. Furthermore, its structure is more flexible and scalable compared to that of AML. Additionally, Matcha includes an extension known as Matcha-DL, which is a variation of Matcha designed for semi-supervised learning. It uses the scores generated by the multiple matching algorithms in Matcha to train a dense neural network for the purpose of distinguishing and ranking a group of candidates identified by Matcha. The results of this framework for the OAEI challenge of last year can be seen in [45].\n\nOn the other hand, LogMap [46] is an ontology matching system known for its high scalability, incorporating reasoning and inconsistency repair features to generate mappings between classes, properties, and instances. Additionally, LogMap stands out as one of the few matching systems that can effectively align complex ontologies with a large number of classes (tens and hundreds of thousands of classes), utilising advanced reasoning and repair methods to reduce logical inconsistencies and offering user support options throughout the matching procedure. The results of this framework for the OAEI challenge of last year can be seen in [47].\n\nFurthermore, in addition to these frameworks, there is the research conducted by Inès Osman et al. [48], in which a review of the literature on ontology matching and ontology integration is performed, presenting approaches and possible errors that may occur in the implementation of these processes. Among the possible problems, the need for a repair and refinement process of the links obtained between the ontologies in the merging process due to the heterogeneity of the ontologies is explained. In order to solve these problems and considering an analysis of the existing literature, OIAR (ontology integration with alignment reuse) and AROM (alignments reuse for ontology merging) tools are presented as possible approaches to automatically build a simply merged and fully merged ontology, respectively, using refinement and repair techniques to ensure that input alignments are not disambiguous.\n\nHence, with the aim that the ontology obtained from the ontology merging process is consistent, coherent, and does not contain ambiguities, the DTwA user, in case the ontology merging tool does not have it, shall apply refinement and repair techniques between alignments. In turn, to ensure that the ontology obtained satisfies all the requirements obtained from its pre-implementation requirements specification activity and does not contain any pitfalls, the DTwA user shall use the tools used in Section 3.3 regarding the ontology evaluation activity.\n\nTherefore, in the third scenario, it is necessary to implement one of these technologies to align the ontologies of different DTws. Moreover, there are instances where aligning ontologies is not feasible due to the substantial disparity that may be present in the conceptualisation of ontologies. As a result, an extension of the ontologies is required to perform the aggregation of the ontologies.\n\nOnce the DTwA ontology is obtained, it has to be referenced in the instantiation of the DTwA using WoTDT ontology and establish links from this ontology to the ontologies of the DTws involved in the aggregation process if the third scenario of the aggregation is performed.\n\nFollowing the example shown in the previous sections, the process of aggregation of the ontologies described in the instantiation of the DTws involved in the aggregation is performed. Since both DTws belong to the COGITO project, both DTws contain the same ontology; therefore, the scenario shown in the proposed example follows the first scenario proposed in the aggregation method. As both ontologies are the same, the DTwA should reference them in its instantiation using WoTDT ontology. This example can be found in Figure 14.\n\nMappings Aggregation\n\nMapping models allow us to represent the relationships between the data model in heterogeneous sources and an RDF version that follows the schema of an ontology; i.e., they define the rules on how to translate from non-RDF data into RDF [49].\n\nThe goal of the mappings aggregation activity is to perform an aggregation between two mapping models to obtain a single mapping model that follows the ontology obtained from the ontology aggregation activity and also contains all the transformation rules to materialise non-semantic data into semantic data (e.g., RDF). This activity involves the DTwA user performing the aggregation process and the domain experts providing information about the mapping rules that follow the ontology domain. The output of this activity is a mapping model resulting from the aggregation of the mapping models of the DTws involved in the aggregation process and its reference in the instantiation of the DTwA using WoTDT ontology.\n\nSometimes, in contrast to previous aggregations, this aggregation may not be necessary. This is because instead of aggregating the mapping models for the subsequent materialisation of the knowledge graph of the DTw, the aggregation of the knowledge graphs belonging to the DTws involved in the aggregation process is done directly. In this way, the knowledge graphs will be aggregated, obtaining the DTwA knowledge graph (scenario 2 of Section “Semantic Resources Aggregation”), and in the case of extension, it will be enough for the domain experts and the DTwA user to create new mapping models containing the rules for the materialisation of the new information to be incorporated into the DTwA knowledge graph. Regardless of this case, in this section, the aggregation of the mapping activity will be performed.\n\nAs mapping models are ontology-based, the same three scenarios explained earlier in the ontology model aggregation are of interest. In the first two scenarios, the mappings models do not have to be aligned/processed to make the aggregation because the ontologies are linked, and no alignment process has been performed in the ontology aggregation step. The difference is that instead of obtaining the data from a single data source, the mappings obtain it from two data sources, one from each DTw involved in the aggregation. Therefore, DTws mappings have to be referenced by DTwA instantiation using WoTDT ontology. Meanwhile, in the third scenario, a merging of these mapping models and an extension has to be performed, creating new rules in order to satisfy the newly created links between the ontologies obtained from the alignment process. In Figure 15, the workflow of this activity is presented depending on the particular aggregation scenario.\n\nIn order to perform the merging process, when dealing with mapping models, there is no literature on how two mapping models should be merged. Therefore, a possible solution could be the use of the instance matching method since mapping models are mostly written in RDF language. Instance matching is the problem of identifying pairs of entities (equivalently, instances) that refer to the same underlying entity [50]. For this purpose, numerous approaches have been proposed in the literature [50,51,52]. Furthermore, in the OAEI organisation mentioned above, there are challenges (OAEI Instance and schema matching 2023: https://oaei.ontologymatching.org/2023/, accessed on 18 May 2024) where instance matching tools are tested every year, proposing datasets for experimentation.\n\nOnce the instance matching process is performed, the DTwA user has to extend the mapping models with new rules to satisfy the new conceptualisation obtained from the ontology aggregation process. Moreover, between mapping models belonging to different DTws, there may be different naming practices of the URIs for the instances obtained from the materialisation process. Therefore, it is necessary to choose a naming practice for standard instances [53,54] so that in the materialisation process of the resulting DTwA obtained from the aggregation process, the URIs of the knowledge graph contain a specific naming pattern. Consequently, independently of the scenario in which the aggregation is involved, the rules that contain the mapping models have to be modified to contain the new naming strategy chosen for the URIs of the knowledge graph of the resultant DTwA. Finally, the resultant mapping from the aggregation process has to be referenced in the instantiation of the DTwA using WoTDT ontology and establish links from this mapping model to the mapping models of DTws involved in the aggregation process.\n\nBuilding on the examples provided in earlier sections, the process of aggregation of the mappings described in the instantiation of the DTws involved in the aggregation is performed. Since both DTws belong to the COGITO project, both mappings contain the same translation rules; therefore, the only thing that needs to be added to these is the acquisition of data from the different data resources used by the different DTws involved in the aggregation. As both mappings are the same, but the data resources from where both DTws obtain their data have been added to the mapping used by the DTwA, in the instantiation of the DTwA shown in Figure 16, a new instance has been created for the DTwA mapping model incorporating the changes, and the reference to the mapping models of the DTws involved in the aggregation.\n\nShapes Aggregation (SHACL Shapes)\n\nAs explained earlier in this article, the aggregation of the shape models uses SHACL shapes. The goal of the SHACL shape aggregation activity is to perform aggregation between two SHACL shape models to obtain a single SHACL shape model. This model has to follow the ontology obtained from the ontology aggregation activity and also contains all the restriction rules to validate the semantic data that are stored in the Knowledge Graph of the DTwA. This activity involves the DTwA user performing the aggregation process, and the domain experts providing information about the validation rules and constraints that are useful to validate the knowledge graph of the DTwA. Therefore, the output of this activity is a SHACL shape model that contains all the validation rules and constraints that allow for the validation of the knowledge graph of the resultant DTwA. Furthermore, this SHACL shape model should be referenced in the instantiation of the DTwA using WoTDT ontology.\n\nIn addition to mapping models, SHACL shape models are ontology-based; therefore, the three aggregation scenarios that are in the ontology model aggregation will also be in the shapes model aggregation. For the first and second scenarios, no merging process is needed because the aggregated ontologies are already aligned. Therefore, the DTws shapes have to be referenced by the DTwA instantiation using the WoTDT ontology. However, in the third scenario, a merge between the SHACL shapes models has to be performed since the ontologies have been aligned previously, as well as the generation of new restriction rules in the case that the ontologies have been extended. In Figure 17, the workflow of this activity is presented depending on the particular aggregation scenario.\n\nWith the goal of performing the merging process between SHACL shapes models, there is no literature on how two mapping models should be merged. However, a possible solution could be the use of the instance matching method, as well as in the mapping models aggregation section, since SHACL shape models are written in the RDF language.\n\nOnce the instance matching is performed, the DTwA user and the domain experts should analyse the constraints of each pair of related instances from the instance matching process and compare each of the constraints that each of them contains. After comparison, the DTwA user decides which constraints to keep to satisfy the needs to be covered by the DTwA. An example of this decision can be if there is a constraint for an instance of sh:minCount equal to “2”, and in the other shape model, there is a constraint for the same instance of “sh:maxCount” equal to “1”. For these instances, the user can select one of them or instead create a new constraint that may include the two constraints, like, for example, sh:minCount equals “1”.\n\nOnce this instance matching process has been performed, the DTwA user has to validate the SHACL shape obtained from the aggregation to ensure that their syntax is correct. For this purpose, the SHACL standard provides specific shapes (SHACL shapes validation: https://www.w3.org/TR/shacl/#shacl-shacl, accessed on 18 May 2024) to validate the syntax of the generated shape graphs.\n\nFurthermore, since a specific naming pattern has been chosen for the URIs of the DTwA instances, as explained in the mapping model aggregation, the instances and their respective restrictions existing in the shapes should be modified to validate the instance URIs with the new naming strategy. Finally, the resultant SHACL shape model from the aggregation process has to be referenced in the instantiation of the DTwA using the WoTDT ontology and establish links from this SHACL shape model to the SHACL shape models of the DTws involved in the aggregation process.\n\nReturning to the examples of the previous activities, the process of aggregation of the SHACL shape models described in the instantiation of the DTws involved in the aggregation is performed. In addition to previous aggregation activities, both DTws belong to the COGITO project; therefore, both SHACL shape models contain the same SHACL shape models. As both SHACL shape models are the same, in the instantiation of the DTwA shown in Figure 18, the reference to the SHACL shape model used by the DTws involved in the aggregation should be referenced in the DTwA using the WoTDT ontology.\n\n4.3.2. Resource Aggregation\n\nData resources represent all data information stored in the DTw [8]. The goal of this activity is to aggregate the data resources from the DTws involved in the aggregation to obtain the DTwA data resources. This activity involves the DTwA user performing the aggregation between the data resources of the DTws and obtaining the DTwA data resources. Moreover, this activity also involves domain experts to provide support in the data resources aggregation process. These data resources are divided into non-semantic and semantic data resources; therefore, an activity has to be performed for each of them.\n\nNon-Semantic Data Resource Referenciation\n\nThe goal of the non-semantic data resources referenciation activity is to reference all the non-semantic data resources of the DTws involved in the aggregation within the DTwA instantiation using WoTDT ontology. These data should be referenced so that the mapping models and the service in charge of the materialisation can be found with the aim of performing the materialisation process to obtain the semantic data. This activity involves the DTwA user and the domain experts selecting which of the non-semantic data resources from the table developed in Section 4.1 can be useful for the resultant DTwA. Once the non-semantic data sources are selected, these are referenced in the instantiation of the DTwA data resources using WoTDT ontology. Therefore, the output of this activity will be the instantiation of the references to the non-semantic data resources that are of interest for the resultant DTwA.\n\nFurthermore, in case new non-semantic data resources are needed for the DTwA, the DTwA user should reference them in the DTwA data resources instantiation.\n\nIn Figure 19, a reference to non-semantic data resources from the DTw pilot in Munich is referenced in the instantiation of the DTwA.\n\nSemantic Resource Aggregation\n\nIn case the DTws involved in the aggregation process contain semantic data resources, a process different frpm the one described in Section “Non-Semantic Data Resources Referenciation” shall be conducted. The semantic data resources of this dimension are represented by the knowledge graph (KG), which (i) follows the ontology model conceptualisation, (ii) is obtained from the materialisation process using the mapping models, and (iii) is validated with the shapes models.\n\nThe goal of applying the aggregation method to the semantic data resources is to obtain a single knowledge graph that contains all the information of the DTws involved for the correct performance of the new DTwA. The activity involves the DTwA user and the domain experts first selecting the KGs from the DTws involved in the aggregation that can be useful for the DTwA and then performing the aggregation process between them, to be able to have links between both KGs in a single KG. After selecting and aggregating the KGs, they should be referenced in the DTwA instantiation using the WoTDT ontology. This includes both KGs of the DTws involved in the aggregation and the KG derived from the aggregation activity. Therefore, the output of this activity is to acquire a KG for the DTwA obtained from the aggregation of the KGs of the DTws involved in the aggregation and referenced during the instantiation of the DTwA.\n\nTo perform the aggregation of the KGs of different DTw, there are two scenarios. The first scenario consists of applying instance matching, where in the literature, approaches such as the use of neural networks [55,56], genetic algorithms [51], or hybrid approaches [57]. Once the instance matching process has been performed, in contrast to earlier aggregation activities, a validation step can be performed to verify whether the aggregated KG is correct using the aggregated SHACL shapes models from the shapes model aggregation activity. In case the resultant KG is not valid, the instance matching process has to be performed again.\n\nThe second scenario involves the materialisation of the KG of the resultant DTwA. This materialisation process is performed by using the mapping models already aggregated from the mapping models’ aggregation step. Similarly to the initial scenario, the KG triples produced during the materialisation process undergo a validation phase, where the aggregated SHACL shapes are used to determine their validity.\n\nFurthermore, the new KG obtained from the aggregation process has to follow the URI naming strategy chosen at the aggregation of the mapping models in such a way that when the validation process is performed, it does not detect any error in the URIs, and they can be published by the new DTwA.\n\nFinally, the instantiation of the resultant DTwA shall reference the new KG obtained from this aggregation activity using the class of dtw:Resource.\n\nIn Figure 20, the workflow of this activity is presented depending on the particular aggregation scenario.\n\nFollowing the examples of the previous activities, the process of aggregation of the KGs described in the instantiation of the DTws involved in the aggregation is performed. Once the aggregation activity is conducted, the instantiation of the new KG referencing the ones involved in the aggregation is represented in the DTwA instantiation using the WoTDT ontology. This instantiation can be seen in Figure 21.\n\nInteraction Affordance (Service) Referenciation\n\nThe service interaction affordances describe all the services and functionalities used by the DTws that are aggregated [8]. These descriptions allow for the access and discovery of the different features that the services provide. The goal of the interaction affordances referenciation activity is to reference all the interaction affordances that describe the access to the services of the DTws involved in the aggregation activity, which are necessary to perform a specific process in the DTwA. This activity involves domain experts and the DTwA user to select which of the interaction affordances of the services from the table developed in Section 4.1 can be useful for the resultant DTwA. Once the interaction affordances are selected, these are referenced in the instantiation of the DTwA models using the WoTDT ontology.\n\nTherefore, the output of this activity will be the instantiation of the references to the interaction affordances of the services of the DTws involved in the aggregation that are of interest to the resultant DTwA. Furthermore, if necessary, new references to the services deployed in the new DTwA have to be created to perform the particular processes of the DTwA.\n\nIn Figure 22, an instantiation result obtained from the referentiation of services interaction affordances activity can be shown. In this case, two interaction affordances from the Munich DTw that refer to the validation of a knowledge graph and the registration of a SHACL shape have been referenced.\n\n4.4. Connections Creation\n\nAs explained in Section 3.2.6, the connections in a DTw are unique; therefore, the goal of this activity is to provide a new set of connections that represent the different relations between the other dimensions of DTw. These connections are divided into external and internal connections depending on the viewpoint of the DTw. This activity involved the DTwA user, who will be responsible for creating and registering the different connections that exist within the DTwA based on the existing connections in the tables described in Section 4.1 belonging to the DTw involved in the aggregation. Therefore, the output of this activity is the creation of the connections that exist between the different dimensions of the DTwA, internally and externally, to the DTwA, and the instantiation of these connections using the WoTDT ontology.\n\nIn Figure 23, an example of the instantiation of a connection is shown using the WoTDT ontology. In this case, a connection is created between the ontology model instantiated in Section 4.3.1 and the knowledge graph instantiated in Section 4.3.2. This connection represents that the conceptualisation of the data resource has been modelled according to the ontology.\n\nOnce all aggregation methods have been applied, the resulting DTwA metadata using WoTDT ontology is described as shown in Figure 24, where most of the aggregations performed are referenced.\n\n4.5. DTwA Maintenance\n\nThe goal of DTwA maintenance activity is to update the DTwA during its lifecycle. During this lifecycle, potential situations may occur. These situations are bug detection, which also includes suggestions and improvements, and the addition of new information to the different dimensions of the DTwA, such as new models, new data sources, new services, or new connections. In both cases, this activity is carried out by the DTwA user, who is responsible for detecting the different bugs or new information added to the new DTwA to perform the respective solution by performing the activities corresponding to the workflow described in Figure 5.\n\n5. Conclusions\n\nDTws are a powerful solution that enhances the accuracy of needed predictions to be improved, making more logical decisions and developing well-informed plans. However, there is no standard architecture that provides a precise definition of a DTw and offers guidance for its development. In the literature, numerous research proposals describe their architecture using a three-dimensional model [7]. Subsequently, a new proposal introduced an expanded model of DTw in five dimensions [8], enhancing the comprehension of the DTws architectures. However, DTws lack formal semantics, hindering their interoperability with external third-party DTws or services.\n\nTo address this issue, the WoTDT ontology has been developed as an extension of the Thing Description ontology suggested by the W3C Web of Things group. This standard facilitates the description of services and enhances interoperability, discoverability, accessibility, security, and scalability. Consequently, this ontology will enable a more accurate understanding of DTws and will provide direct access to all system functionalities for the specified DTw.\n\nMoreover, even though the examples used in the article focus on the DTw construction domain, since the model used to conceptualise the DTw architecture (five-dimensional model [8]) is applied for generic DTws, this conceptualisation can be applied to DTws from different domains. Therefore, thanks to the reuse of ontologies in WoTDT, such as DCAT and W3C WoT Thing Description, which have not been developed for a particular domain, the WoTDT ontology has the flexibility to conceptualise DTws belonging to different domains. This can be done by extending the ontology by incorporating new additional subclasses into classes related to different dimensions, e.g., the addition of subclasses to represent new non-semantic models, such as energy or simulation models. However, introducing these new requirements could lead to problems that might trigger changes in the ontology. Hence, an opportunity for future research lies in expanding the ontology to include diverse information from multiple domains.\n\nFurthermore, when dealing with the aggregation of multiple DTws, in the literature, there are numerous approaches, such as Grieves’ [3] and Qi’s [14] proposals, but the method in which the authors propose an aggregation where multiple DTws are aggregated in a single one (DTwA) is not present. Therefore, this article presents, together with the WoTDT ontology, a novel approach in which the authors propose an aggregation methodology, called DTAG, for the aggregation of DTws, which considers whether the DTw contains semantics or not.\n\nDTAG follows the dimensional aggregation according to the five-dimensional model of Tao and Zhang, where WoTDT ontology is applied. Therefore, this approach, distinct from those aggregations presented in the literature, allows the aggregation of both metadata and data (whether semantic or non-semantic) from various DTws within a DTwE. This results in the creation of a DTwA that contains all metadata, centralised thanks to the WoTDT ontology, along with all data related to the DTwIs or DTwAs of the DTwE involved in the aggregation process.\n\nFurthermore, the aggregation method allows the creation of DTwE. In the case of Section 4, it shows the aggregation of two DTws of construction pilot sites in a DTwA of the construction-related project.\n\nAn additional advantage of using the WoTDT ontology in the DTAG aggregation methodology is the enhanced comprehension of the aggregation data itself, i.e., where each DTw comes from and how the DTwA has reached the aggregated state.\n\nAt the same time, there is no loss of specificity because DTws are not removed in the aggregation activity. Instead, a DTwA is created that includes them. Therefore, the DTws involved in the aggregation can still operate without the need to access them through the DTwA.\n\nAs a disadvantage, the aggregation process of a DTw that contains restrictions on access to its data might be performed partially in some cases, and in others, the aggregation cannot be performed directly.\n\nAnother disadvantage is that since the methodology has various roles involved in the aggregation of DTws, it cannot be automated; therefore, it always requires a user or developer to be involved in the aggregation activity.\n\nFor future research directions, the framework responsible for the aggregation process shall be implemented. Furthermore, the experimental application of the suggested aggregation methodology could be applied in settings where there is a need to perform the aggregation procedure for DTws encompassing diverse ontologies or even DTws from different domains. Finally, as future work, this ontology shall be applied to different domains in order to validate its flexibility in terms of its applicability to DTws belonging to domains other than the one proposed in the article.\n\nAuthor Contributions\n\nS.G.-G.: Conception and design of study, Acquisition of data, Analysis and/or interpretation of data, Writing—original draft, Writing—review and editing. M.P.-V.: Conception and design of study, Acquisition of data, Analysis and/or interpretation of data, Writing—original draft, Writing—review and editing. R.G.-C.: Conception and design of study, Acquisition of data, Analysis and/or interpretation of data, Writing—original draft, Writing—review and editing. All authors have read and agreed to the published version of the manuscript.\n\nFunding\n\nThis work was funded by the Multiannual Agreement with the Universidad Politécnica de Madrid in the Excellence Programme for University Teaching Staff in the context of the V PRICIT (Regional Programme of Research and Technological Innovation).\n\nInstitutional Review Board Statement\n\nNot applicable.\n\nInformed Consent Statement\n\nNot applicable.\n\nData Availability Statement\n\nThe data presented in this study are openly available in https://github.com/oeg-upm/WoT-DT-ontology-v2 (accessed on 1 July 2024) at https://doi.org/10.5281/zenodo.12657368 (accessed on 1 July 2024), reference number 12657368.\n\nAcknowledgments\n\nThis work was supported by COGITO funded by the European Union’s Horizon 2020 research and innovation programme under grant agreement no. 958310 and by the Madrid Government (Comunidad de Madrid-Spain) under the Multiannual Agreement with the Universidad Politécnica de Madrid in the Excellence Programme for University Teaching Staff, in the context of the V PRICIT (Regional Programme of Research and Technological Innovation).\n\nConflicts of Interest\n\nThe authors declare no conflicts of interest.\n\nAbbreviations\n\nThe following abbreviations are used in this manuscript:\n\nAMLAgreementMakeLightCOGITOConstruction Phase Digital Twin ModelDCATData Catalog Vocabulary OntologyDTwDigital TwinDTwADigital Twin AggregateDTDLDigital Twin Definition LanguageDTwIDigital Twin InstanceDTMIDigital Twin Model IdentifierIoTInternet of ThingsIRIInternationalised Resource IdentifierJSONJavaScript Object NotationKGKnowledge GraphLDLinked DataLOTLinked Open TermsNASANational Aeronautics and Space AdministrationOAEIOntology Alignment Evaluation InitiativeOWLWeb Ontology LanguagePLMProduct Lifecycle ManagementRDFResource Description FormatRDFsRDF SchemaSHACLShapes Constraint LanguageSPARQLSPARQL and RDF Query LanguageTDThing DescriptionURIUniform Resource IdentifierURLUniform Resource LocatorXSDXML Schema DefinitionW3CWorld Wide Web ConsortiumWoTWeb of ThingsWoTDTWoT Digital Twin OntologyWoT TDWoT Thing Descriptions\n\nReferences\n\nHu, W.; Zhang, T.; Deng, X.; Liu, Z.; Tan, J. Digital twin: A state-of-the-art review of its enabling technologies, applications and challenges. J. Intell. Manuf. Spec. Equip. 2021, 2, 1–34. [Google Scholar] [CrossRef]\n\nD’Amico, R.D.; Erkoyuncu, J.A.; Addepalli, S.; Penver, S. Cognitive digital twin: An approach to improve the maintenance management. Cirp J. Manuf. Sci. Technol. 2022, 38, 613–630. [Google Scholar] [CrossRef]\n\nGrieves, M.; Vickers, J. Digital twin: Mitigating unpredictable, undesirable emergent behavior in complex systems. In Transdisciplinary Perspectives on Complex Systems: New Findings and Approaches; Springer: Berlin/Heidelberg, Germany, 2017; pp. 85–113. [Google Scholar] [CrossRef]\n\nZheng, X.; Lu, J.; Kiritsis, D. The emergence of cognitive digital twin: Vision, challenges and opportunities. Int. J. Prod. Res. 2022, 60, 7610–7632. [Google Scholar] [CrossRef]\n\nPsarommatis, F. A generic methodology and a digital twin for zero defect manufacturing (ZDM) performance mapping towards design for ZDM. J. Manuf. Syst. 2021, 59, 507–521. [Google Scholar] [CrossRef]\n\nCho, S.; May, G.; Kiritsis, D. A semantic-driven approach for industry 4.0. In Proceedings of the 2019 15th International Conference on Distributed Computing in Sensor Systems (DCOSS), Santorini, Greece, 29–31 May 2019; pp. 347–354. [Google Scholar]\n\nGrieves, M.W. PLM–beyond lean manufacturing. Manuf. Eng. 2003, 130, 23. [Google Scholar]\n\nTao, F.; Zhang, M. Digital twin shop-floor: A new shop-floor paradigm towards smart manufacturing. IEEE Access 2017, 5, 20418–20427. [Google Scholar] [CrossRef]\n\nKaebisch, S.; McCool, M.; Korkan, E. Web of Things (WoT) Thing Description 1.1. 2023. Available online: https://www.w3.org/TR/wot-thing-description11/ (accessed on 18 May 2024).\n\nPoveda-Villalón, M.; Fernández-Izquierdo, A.; Fernández-López, M.; García-Castro, R. Lot: An industrial oriented ontology engineering framework. Eng. Appl. Artif. Intell. 2022, 111, 104755. [Google Scholar] [CrossRef]\n\nFrämling, K.; Holmström, J.; Ala-Risku, T.; Kärkkäinen, M. Product agents for handling information about physical objects. Rep. Lab. Inf. Process. Sci. Ser. B Tko-B 2003, 153, 20. [Google Scholar]\n\nTuegel, E. The airframe digital twin: Some challenges to realization. In Proceedings of the 53rd AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics and Materials Conference, Honolulu, HI, USA, 23–26 April 2012. [Google Scholar]\n\nRíos, J.; Hernández, J.C.; Oliva, M.; Mas, F. Product Avatar as Digital Counterpart of a Physical Individual Product: Literature Review and Implications in an Aircraft. Transdiscipl. Lifecycle Anal. Syst. 2015, 2, 657–666. [Google Scholar]\n\nQi, Q.; Tao, F.; Zuo, Y.; Zhao, D. Digital twin service towards smart manufacturing. Procedia CIRP 2018, 72, 237–242. [Google Scholar] [CrossRef]\n\nBorangiu, T.; Oltean, E.; Răileanu, S.; Anton, F.; Anton, S.; Iacob, I. Embedded digital twin for ARTI-type control of semi-continuous production processes. In Service Oriented, Holonic and Multi-Agent Manufacturing Systems for Industry of the Future, Proceedings of the SOHOMA 2019 9, Valencia, Spain, 3–4 October 2019; Springer: Berlin/Heidelberg, Germany, 2020; pp. 113–133. [Google Scholar]\n\nKaranjkar, N.; Joglekar, A.; Mohanty, S.; Prabhu, V.; Raghunath, D.; Sundaresan, R. Digital twin for energy optimization in an SMT-PCB assembly line. In Proceedings of the 2018 IEEE International Conference on Internet of Things and Intelligence System (IOTAIS), Bali, Indonesia, 1–3 November 2018; pp. 85–89. [Google Scholar]\n\nPan, Z.; Shi, J.; Jiang, L. A novel hdf-based data compression and integration approach to support bim-gis practical applications. Adv. Civ. Eng. 2020, 2020, 1–22. [Google Scholar] [CrossRef]\n\nLutze, R. Digital twins in eHealth–: Prospects and challenges focussing on information management. In Proceedings of the 2019 IEEE International Conference on Engineering, Technology and Innovation (ICE/ITMC), Valbonne Sophia-Antipolis, France, 17–19 June 2019; pp. 1–9. [Google Scholar]\n\nVillalonga, A.; Negri, E.; Fumagalli, L.; Macchi, M.; Castaño, F.; Haber, R. Local decision making based on distributed digital twin framework. IFAC-Pap. 2020, 53, 10568–10573. [Google Scholar] [CrossRef]\n\nCiavotta, M.; Alge, M.; Menato, S.; Rovere, D.; Pedrazzoli, P. A microservice-based middleware for the digital factory. Procedia Manuf. 2017, 11, 931–938. [Google Scholar] [CrossRef]\n\nRedelinghuys, A.; Kruger, K.; Basson, A. A six-layer architecture for digital twins with aggregation. In Service Oriented, Holonic and Multi-Agent Manufacturing Systems for Industry of the Future, Proceedings of the SOHOMA 2019 9, Valencia, Spain, 3–4 October 2019; Springer: Berlin/Heidelberg, Germany, 2020; pp. 171–182. [Google Scholar]\n\nBoje, C.; Guerriero, A.; Kubicki, S.; Rezgui, Y. Towards a semantic Construction Digital Twin: Directions for future research. Autom. Constr. 2020, 114, 103179. [Google Scholar] [CrossRef]\n\nMayer, S.; Hodges, J.; Yu, D.; Kritzler, M.; Michahelles, F. An open semantic framework for the industrial Internet of Things. IEEE Intell. Syst. 2017, 32, 96–101. [Google Scholar] [CrossRef]\n\nSteinmetz, C.; Rettberg, A.; Ribeiro, F.G.C.; Schroeder, G.; Pereira, C.E. Internet of things ontology for digital twin in cyber physical systems. In Proceedings of the 2018 VIII Brazilian Symposium on Computing Systems Engineering (SBESC), Salvador, Brazil, 5–8 November 2018. [Google Scholar]\n\nBermúdez-Edo, M.; Elsaleh, T.; Barnaghi, P.M.; Taylor, K.L. IoT-Lite: A Lightweight Semantic Model for the Internet of Things. In Proceedings of the 2016 Intl IEEE Conferences on Ubiquitous Intelligence & Computing, Advanced and Trusted Computing, Scalable Computing and Communications, Cloud and Big Data Computing, Internet of People, and Smart World Congress (UIC/ATC/ScalCom/CBDCom/IoP/SmartWorld), Toulouse, France, 18–21 July 2016; pp. 90–97. [Google Scholar]\n\nSingh, S.; Shehab, E.; Higgins, N.; Fowler, K.; Reynolds, D.; Erkoyuncu, J.A.; Gadd, P. Data management for developing digital twin ontology model. Proc. Inst. Mech. Eng. Part B J. Eng. Manuf. 2021, 235, 2323–2337. [Google Scholar] [CrossRef]\n\nMeijers, A. Hands-On Azure Digital Twins: A Practical Guide to Building Distributed IoT Solutions; Packt Publishing Ltd.: Birmingham, UK, 2022. [Google Scholar]\n\nRicci, A.; Croatti, A.; Mariani, S.; Montagna, S.; Picone, M. Web of digital twins. ACM Trans. Internet Technol. 2022, 22, 1–30. [Google Scholar] [CrossRef]\n\nPittaras, I.; Fotiou, N.; Karapapas, C.; Siris, V.A.; Polyzos, G.C. Secure, Mass Web of Things Actuation Using Smart Contracts-Based Digital Twins. In Proceedings of the 2022 IEEE Symposium on Computers and Communications (ISCC), Rhodes, Greece, 30 June–3 July 2022; pp. 1–6. [Google Scholar]\n\nBedogni, L.; Chiariotti, F. A Web of Things Architecture for Digital Twin Creation and Model-Based Reinforcement Control. arXiv 2023, arXiv:2301.12761. [Google Scholar]\n\nCimmino, A.; McCool, M.; Tavakolizadeh, F.; Toumura, K. Web of Things (WoT) Discovery. 2023. Available online: https://www.w3.org/TR/wot-discovery/ (accessed on 18 May 2024).\n\nSuárez-Figueroa, M.C.; Gómez-Pérez, A.; Fernandez-Lopez, M. The NeOn Methodology framework: A scenario-based methodology for ontology development. Appl. Ontol. 2015, 10, 107–145. [Google Scholar] [CrossRef]\n\nPoveda-Villalón, M.; Chávez-Feria, S.; Carulli-Pérez, S.; García-Castro, R. Towards a UML-Based Notation for OWL Ontologies. 2023. Available online: https://ceur-ws.org/Vol-3508/paper2.pdf (accessed on 18 May 2024).\n\nLefrançois, M. Planned ETSI SAREF extensions based on the W3C&OGC SOSA/SSN-compatible SEAS ontology patterns. In Proceedings of the Workshop on Semantic Interoperability and Standardization in the IoT, SIS-IoT, Amsterdam, The Netherlands, 11–14 September 2017. [Google Scholar]\n\nChávez-Feria, S.; García-Castro, R.; Poveda-Villalón, M. Chowlk: From UML-based ontology conceptualizations to OWL. In Proceedings of the European Semantic Web Conference, Crete, Greece, 29 May–2 June 2022; Springer: Berlin/Heidelberg, Germany, 2022. [Google Scholar]\n\nPoveda-Villalón, M.; Gómez-Pérez, A.; Suárez-Figueroa, M.C. OOPS! (OntOlogy Pitfall Scanner!): An On-line Tool for Ontology Evaluation. Int. J. Semant. Web Inf. Syst. (IJSWIS) 2014, 10, 7–34. [Google Scholar] [CrossRef]\n\nFernández-Izquierdo, A.; García-Castro, R. Themis: A tool for validating ontologies through requirements. In Proceedings of the 31st International Conference on Software Engineering and Knowledge Engineering, Lisbon, Portugal, 10–12 July 2019. [Google Scholar]\n\nFernandez-Izquierdo, A.; García-Castro, R. Requirements behaviour analysis for ontology testing. In Proceedings of the Knowledge Engineering and Knowledge Management: 21st International Conference, Nancy, France, 12–16 November 2018; Proceedings 21. Springer: Berlin/Heidelberg, Germany, 2018. [Google Scholar]\n\nAlobaid, A.; Garijo, D.; Poveda-Villalón, M.; Santana-Perez, I.; Fernández-Izquierdo, A.; Corcho, O. Automating ontology engineering support activities with OnToology. J. Web Semant. 2019, 57, 100472. [Google Scholar] [CrossRef]\n\nHogan, A.; Blomqvist, E.; Cochez, M.; d’Amato, C.; Melo, G.D.; Gutierrez, C.; Kirrane, S.; Gayo, J.E.L.; Navigli, R.; Neumaier, S.; et al. Knowledge graphs. ACM Comput. Surv. (CSUR) 2021, 54, 1–37. [Google Scholar] [CrossRef]\n\nKnublauch, H.; Kontokostas, D. Shapes Constraint Language (SHACL). 2017. Available online: https://www.w3.org/TR/2017/REC-shacl-20170720/ (accessed on 18 May 2024).\n\nSuárez-Figueroa, M.C.; de Cea, G.A.; Gómez-Pérez, A. Lights and shadows in creating a glossary about ontology engineering. Terminol. Int. J. Theor. Appl. Issues Spec. Commun. 2013, 19, 202–236. [Google Scholar] [CrossRef]\n\nCotovio, P.G.; Ferraz, L.; Faria, D.; Balbi, L.; Silva, M.C.; Pesquita, C. Matcha-DL a Tool for Supervised Ontology Alignment. Available online: https://www.semantic-web-journal.net/system/files/swj3648.pdf (accessed on 18 May 2024).\n\nFaria, D.; Santos, E.; Balasubramani, B.S.; Silva, M.C.; Couto, F.M.; Pesquita, C. AgreementMakerLight. Semant. Web 2023, 1–13. [Google Scholar] [CrossRef]\n\nFaria, D.; Silva, M.; Cotovio, P.; Ferraz, L.; Balbi, L.; Pesquita, C. Results for Matcha and Matcha-DL in OAEI 2023. 2023. Available online: https://ceur-ws.org/Vol-3591/oaei23_paper6.pdf (accessed on 18 May 2024).\n\nJiménez-Ruiz, E.; Cuenca Grau, B. Logmap: Logic-based and scalable ontology matching. In Proceedings of the Semantic Web–ISWC 2011: 10th International Semantic Web Conference, Bonn, Germany, 23–27 October 2011; Proceedings, Part I 10. Springer: Berlin/Heidelberg, Germany, 2011; pp. 273–288. [Google Scholar]\n\nJiménez-Ruiz, E. LogMap Family Participation in the OAEI 2023. 2023. Available online: https://ceur-ws.org/Vol-3591/oaei23_paper4.pdf (accessed on 18 May 2024).\n\nOsman, I.; Yahia, S.B.; Diallo, G. Ontology integration: Approaches and challenging issues. Inf. Fusion 2021, 71, 38–63. [Google Scholar] [CrossRef]\n\nIglesias-Molina, A.; Cimmino, A.; Ruckhaus, E.; Chaves-Fraga, D.; García-Castro, R.; Corcho, O. An ontological approach for representing declarative mapping languages. Semant. Web 2024, 5, 191–221. [Google Scholar] [CrossRef]\n\nWölger, S.; Siorpaes, K.; Bürger, T.; Simperl, E.; Thaler, S.; Hofer, C. A Survey on Data Interlinking Methods. 2011. Available online: https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=05b966e7bee290f721b0ad757c3143ef1d59fccb (accessed on 18 May 2024).\n\nCimmino, A.; Corchuelo, R. On learning context-aware rules to link RDF datasets. Log. J. Igpl 2020, 29, 151–166. [Google Scholar] [CrossRef]\n\nZeng, K.; Li, C.; Hou, L.; Li, J.; Feng, L. A comprehensive survey of entity alignment for knowledge graphs. AI Open 2021, 2, 1–13. [Google Scholar] [CrossRef]\n\nBest Practices for Publishing Linked Data. 2014. Available online: https://www.w3.org/TR/ld-bp/ (accessed on 18 May 2024).\n\nDodds, L.; Davis, I. Linked Data Patterns. 2011. Available online: http://patterns.dataincubator.org/book (accessed on 18 May 2024).\n\nXu, K.; Wang, L.; Yu, M.; Feng, Y.; Song, Y.; Wang, Z.; Yu, D. Cross-lingual knowledge graph alignment via graph matching neural network. arXiv 2019, arXiv:1905.11605. [Google Scholar]\n\nYu, C.; Wang, F.; Liu, Y.H.; An, L. Research on knowledge graph alignment model based on deep learning. Expert Syst. Appl. 2021, 186, 115768. [Google Scholar] [CrossRef]\n\nCimmino, A.; Corchuelo, R. A hybrid genetic-bootstrapping approach to link resources in the web of data. In Proceedings of the Hybrid Artificial Intelligent Systems: 13th International Conference (HAIS 2018), Oviedo, Spain, 20–22 June 2018; Proceedings 13. Springer: Berlin/Heidelberg, Germany, 2018; pp. 145–157. [Google Scholar]\n\nFigure 1. WoTDT ontology conceptualisation overview.\n\nFigure 2. Class dt:Model and its subclasses.\n\nFigure 3. Connections overview in WoTDT ontology.\n\nFigure 4. Conceptualisation of the connection point subclasses.\n\nFigure 6. Workflow proposed for the DTw instantiation activity.\n\nFigure 7. Munich pilot DTw instantiation result.\n\nFigure 8. Murcia pilot DTw instantiation result.\n\nFigure 9. Workflow proposed for the DTw dimension aggregation development activity.\n\nFigure 10. DTwA entity aggregation instantiation result.\n\nFigure 11. Workflow proposed for the digital entity aggregation activity.\n\nFigure 12. DTwA non-semantic model reference instantiation result.\n\nFigure 13. Workflow proposed for the ontology aggregation activity.\n\nFigure 14. DTwA ontology model reference instantiation result.\n\nFigure 15. Workflow proposed for the mapping model aggregation activity.\n\nFigure 16. Mapping model aggregation instantiation result.\n\nFigure 17. Workflow proposed for the SHACL shape model aggregation activity.\n\nFigure 18. SHACL shape model aggregation instantiation result.\n\nFigure 19. DTwA non-semantic resource aggregation instantiation result.\n\nFigure 20. Workflow proposed for the KG aggregation activity.\n\nFigure 21. KG instance aggregation result.\n\nFigure 22. Service interaction affordances aggregation result.\n\nFigure 23. DTwA Connection instantiation result.\n\nFigure 24. DTwA instantiation result.\n\nTable 1. Requirements for WoTDT ontology.\n\nIDCompetency Question/Statement—Possible AnswerWOTDT-1A digital twin is a thing.WOTDT-2A digital twin contains five dimensions.WOTDT-3Physical entity is a dimension that represents the real-world asset of the digital twin.WOTDT-4Digital entity is a dimension that represents the digital asset of the digital twin. Also, it contains the dimensions of the virtual entity, DTw data, and DTw services.WOTDT-5Virtual entity is a dimension that represents the different models used in the digital twin.WOTDT-6DTw data is a dimension where are stored all the data used in the digital twin.WOTDT-7Digital twin services is a dimension in which all services of the digital twin are described.WOTDT-8DTw connection is a dimension in which all the connections between other dimensions in the DTw and with other external DTw dimensions are described.WOTDT-9Virtual entity dimension can have models.WOTDT-10Which kind of models can be described in the virtual entity dimension? The models can be from rules, behavioral, physical and geometric models to semantic models like ontologies.WOTDT-11DTw data dimension can have resources that can be used to represent different types of data stored at the digital twin.WOTDT-12DTw service dimension can have interaction affordances from the WoT thing descriptions ontology to represent the different services used at the digital twin.WOTDT-13DTw connection dimension can have different connections.WOTDT-14Which type of connections can the digital twin connection dimension describe? The connections defined in the DTw connection dimension are described with the different existing elements of other dimensions of the DTw, such as models, resources, and interaction affordances, and the connections with external things such as other DTws.WOTDT-15Digital twin instance (DTwI) describes a specific corresponding physical product to which an individual DTw remains linked throughout the life of that physical product.WOTDT-16Digital twin aggregate (DTwA) describes the aggregation of DTwI and DTwA. Unlike the DTwI, the DTwA may not be an independent data structure. It may be a computing construct that has access to all DTwIs and queries them either ad-hoc or proactively.WOTDT-17Connections between DTws can be represented as external connection points.WOTDT-18Aggregations between data models metadata or the data resources metadata of the DTws can be represented in the resulting DTwA within the connections between them.\n\nTable 2. DTw metadata extraction by dimension table (Part 1).\n\nDTwEntityModelIDTitleIDTitleTypeIDTitleDescriptionFormatAccess URLb3fe643d-f9f2-4e14-bf3c-95343d63c850Munich Pilot DTwb3fe643d-f9f2-4e14-bf3c-95343d63c850Munich Construction SiteOntology Modeleac0b1bfCOGITO Facility Ontology.The COGITO Facility ontology aims at modelling facilities in the construction domain.JSON-LDhttps://cogito.iot.linkeddata.es/def/facility/ontology.jsonld, accessed on 18 May 2024RDF/XMLhttps://cogito.iot.linkeddata.es/def/facility/ontology.owl, accessed on 18 May 2024N-Tripleshttps://cogito.iot.linkeddata.es/def/facility/ontology.nt, accessed on 18 May 2024Turtlehttps://cogito.iot.linkeddata.es/def/facility/ontology.ttl, accessed on 18 May 2024Rules Modelae463899Geometric Quality Control Rules.Geometric Quality Control Rules to analyse the geometry quality of the DTw.JSONhttps://dtp.cogito-project.com/file/9b5fe1ab-fec2-471c-93f2-eab17040cb2b/download, accessed on 18 May 2024………………\n\nTable 3. DTw metadata extraction by dimension table (Part 2).\n\nResourcesTypeIDTitleDescriptionAccess URLDownload URLRelated Resources IDDatasetf50ea5d4Knowledge GraphKnowledge Graph of DTw b3fe643d-f9f2-4e14-bf3c-95343d63c850https://triplestore.cogito.iot.linkeddata.es/resource?uri=https:%2F%2Fdata.cogito.iot.linkeddata.es%2Fdti_774bab16role=context, accessed on 18 May 2024https://triplestore.cogito.iot.linkeddata.es/repositories/cogitotriplestore/statements?infer=falsecontext=%3Chttps%3A%2F%2F\\data.cogito.iot.linkeddata.es%2F\\dti_774bab16%3Elocation=Accept=text%2Fturtle, accessed on 18 May 2024eeee1272Data Serviceeeee1272TriplestoreSPARQL endpoint of the Triplestore where the Knowledge Graph is stored.https://triplestore.cogito.iot.linkeddata.es/repositories/cogito-triplestore, accessed on 18 May 2024/f50ea5d4Datasetd00e4a90IFC fileIFC file that contains DTw 774bab16 modelling information.https://dtp.cogito-project.com/file/\\1c28d21c-f5d7-4b84-8cb8-3b518dbb9581/download, accessed on 18 May 2024https://dtp.cogito-project.com/file/\\1c28d21c-f5d7-4b84-8cb8-3b518dbb9581/download, accessed on 18 May 20244d18ce76Data Service4d18ce76DTPCOGITO Digital Twin Platform Graphhttps://fuseki.openmetrics.eu/Munich, accessed on 18 May 2024/d00e4a90…………………\n\nTable 4. DTw metadata extraction by dimension table (Part 3).\n\nServicesConnectionsTypeIDTitleDescriptionAccess URLContent TypeTypeIDTitleDescriptionProvider IDConsumer IDProperty Affordance40629validate_rdfValidate RDF Datahttps://data.cogito.iot.linkeddata.es/validation/api/file_shacl_validation/data, accessed on 18 May 2024text/turtleModel-Data Connectionece55bb5Connection of DTw455ed3a9Connection between a model and a dataseteac0b1bff50ea5d4Action Affordance04c26register_shacl_modelRegister SHACL Shapeshttps://data.cogito.iot.linkeddata.es/validation/api/construction_shacl_validation/mapping, accessed on 18 May 2024application/octet-stream………………………………\n\nDisclaimer/Publisher’s Note: The statements, opinions and data contained in all publications are solely those of the individual author(s) and contributor(s) and not of MDPI and/or the editor(s). MDPI and/or the editor(s) disclaim responsibility for any injury to people or property resulting from any ideas, methods, instructions or products referred to in the content.\n\n© 2024 by the authors. Licensee MDPI, Basel, Switzerland. This article is an open access article distributed under the terms and conditions of the Creative Commons Attribution (CC BY) license (https://creativecommons.org/licenses/by/4.0/).\n\nShare and Cite\n\nMDPI and ACS Style\n\nGonzález-Gerpe, S.; Poveda-Villalón, M.; García-Castro, R. DTAG: A Methodology for Aggregating Digital Twins Using the WoTDT Ontology. Appl. Sci. 2024, 14, 5960. https://doi.org/10.3390/app14135960\n\nAMA Style\n\nGonzález-Gerpe S, Poveda-Villalón M, García-Castro R. DTAG: A Methodology for Aggregating Digital Twins Using the WoTDT Ontology. Applied Sciences. 2024; 14(13):5960. https://doi.org/10.3390/app14135960\n\nChicago/Turabian Style\n\nGonzález-Gerpe, Salvador, María Poveda-Villalón, and Raúl García-Castro. 2024. \"DTAG: A Methodology for Aggregating Digital Twins Using the WoTDT Ontology\" Applied Sciences 14, no. 13: 5960. https://doi.org/10.3390/app14135960\n\nNote that from the first issue of 2016, this journal uses article numbers instead of page numbers. See further details here.\n\nArticle Metrics\n\nNo\n\nNo\n\nArticle Access Statistics\n\nFor more information on the journal statistics, click here.\n\nMultiple requests from the same IP address are counted as one view."
    }
}