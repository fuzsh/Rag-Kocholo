{
    "id": "correct_subsidiary_00127_3",
    "rank": 61,
    "data": {
        "url": "https://www.jetbrains.com/idea/whatsnew/2021-3/",
        "read_more_link": "",
        "language": "en",
        "title": "What's New in IntelliJ IDEA",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/webpagepreview_1280x800_IntelliJ_IDEA_2021_3.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/webpagepreview_1280x800_IntelliJ_IDEA_2021_3.png",
        "images": [
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/KeyUpdates_RemoteDevelopment.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/KeyUpdates_Troubleshooting.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/KeyUpdates_ConstantCondition.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/KeyUpdates_DebuggerKotlin.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/KeyUpdates_DebuggerKotlin_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_ChangeFontSize_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_ChangeFontSize_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_ImprovedIntentionPreview_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_ImprovedIntentionPreview_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_ImprovedMarkdownSupport.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Editor_FastAccessToTabActions.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_Bookmarks_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_Bookmarks_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_AbilityToSplitRun.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_MLBased_Search_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_ImprovedFindUsages.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_ReworkedShowUsages_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_ReworkedShowUsages_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_ReworkedShowUsages_3.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/UX_EmptyProjectPreview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_InspectionForUnsafe_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_InspectionForUnsafe_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_Inspections_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_Inspections_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_ImprovedRefactorings_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_ImprovedRefactorings_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Java_CustomizableClasspath.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kotlin_ExtractConstantRefactoring.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kotlin_ImprovedPossibleBlockingCall.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kotlin_InlineHintsRanges.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kotlin_newProjectPreview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Scala_Scala3Improvements.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Scala_CrossCompiled.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Scala_DataFlow.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Scala_AutocimpleteScalaCompiler.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Scala_InlayHints.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/JavaScript_NewInspection.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/JavaScript_ImprovedCodeCompletionHTML.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SSH_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SSH_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Profiler_Compare.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Profiler_Async.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/BuildTools_RedesignedMavenConfigs.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/BuildTools_SupportForMavenConfig.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_CheckoutAndRebase.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_ReorganizedVCS_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_ReorganizedVCS_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_Changes.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_PushUpToHere_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/VCS_Align.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Terminal_ConPTYWindows.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Terminal_Typeahead.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Debugger_Evaluate.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_GRPCSupport.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_GRPC_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_GRPC_3.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_BinaryResponces.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_SupportHTTP_Request_Identifiers_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_SupportHTTP_Request_Identifiers_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_Quite.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ReferencesResolve.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_NewBlockingNonBlocking.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ImprovedBlockingCodeDetection.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_SpringBootConfigs_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ImprovedSupportSpringBoot.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ReferenceToApplication.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_BetterSupportNamedQuery.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_KotlinSupportForJavaEE_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_KotlinSupportJavaEE_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ImprovedUML_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Frameworks_ImprovedUML_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/DatabaseTools_DataEditorAggregates_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/DatabaseTools_MappingDDL_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/DatabaseTools_MappingDDL_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/DatabaseTools_IntrospectionsLevels_Preview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/QATools_Selenium_PageObjectEditor.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/QATools_TestData.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/QATools_TestManagement_SharedSteps.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/QATools_TestManagemnet_TestRunHierarchy.jpg",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kubernetes_Formatting.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kubernetes_Highlighting.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kubernetes_LanguageInjection.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Kubernetes_RepeatLastCommand.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_ConnectionFromMiniKube_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_EasyStart.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_CleanUp.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_ComposeV2_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_ComposeV2_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_ImageLayers.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_SaveContainerAsImage.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_RegistryUpdates_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_RegistryUpdates_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_RegistryUpdates_3.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_RegistryUpdates_4.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/Docker_RegistryUpdates_5.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SpaceIntegration_CodeReviewMergeRequest_1.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SpaceIntegration_CodeReviewMergeRequest_2.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SpaceIntegration_CreateMergeRequest.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SpaceIntegration_CreateCodeReview.png",
            "https://www.jetbrains.com/idea/whatsnew/2021-3/img/SpaceIntegration_MarkAsViewed.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "IntelliJ IDEA 2021.3 provides support for remote development (Beta) and introduces a new way to troubleshoot IDE problems with the Repair IDE... action. It also brings debugger updates and the Constant conditions inspection for Kotlin, along with other valuable changes.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?r=1234",
        "meta_site_name": "JetBrains",
        "canonical_link": "https://www.jetbrains.com/idea/whatsnew/2021-3/",
        "text": "IntelliJ IDEA Ultimate now supports a Beta version of our Remote Development workflow. It allows you to connect to a remote machine running IntelliJ IDEA’s backend from anywhere in the world. All the processing happens on that powerful remote machine, and you can work on your project as seamlessly as if it were on your local one. This functionality can be initiated from IntelliJ IDEA’s Welcome screen or from a new application called JetBrains Gateway, which is available in the JetBrains Toolbox App.\n\nWhat’s more, you can create, prebuild, share, reproduce, hibernate, and manage dev environments with Space – a unified platform for the entire software development pipeline.\n\nCheck out this blog post for more details.\n\nWe’ve added the new Constant conditions inspection, which helps IntelliJ IDEA report non-trivial conditions and values that are statically known to be always true, false, null, or zero. It works the same way as the similar inspection for Java, and it supports most of the same checks. This new inspection can be found in Preferences/ Settings | Editor | Inspections | Kotlin | Probable bugs.\n\nSmart Step Into\n\nWhen you want to debug an expression with chained method calls and lambdas, the Step Into action gives you the functionality of Smart Step Into by default. It highlights the methods and lambdas you can step into. To use it, click the Step Into button located in the top pane of the Debug tool window or use the F7 shortcut. The IDE will then highlight the places where you can step into the code, and you’ll be able to select the line you want by clicking on it.\n\nInline stack frames\n\nThe debugger can now detect Kotlin inline functions and display inline function calls in the stack trace panel. You can navigate to these calls, and you can also inspect and evaluate the variables of each frame.\n\nAs requested, we’ve made it possible to change the font size in all open tabs simultaneously with ⌘+mouse wheel on macOS or Ctrl+mouse wheel on Windows and Linux. To enable this feature, go to Preferences/ Settings | Editor | General, choose Change font size with Command + mouse wheel in, and select All editors. If you select Active editor, the shortcut will change the font size only in the file where you are currently working.\n\nIntelliJ IDEA has a helpful option that allows you to preview the results of intention actions and quick-fixes before applying them to your code. This feature is available in the Intention actions menu. To activate the preview, press F1 on macOS or Ctrl+Q on Windows and Linux.\n\nSince its introduction in v2020.1, we’ve continued working to improve the intention preview. In IntelliJ IDEA 2021.3, it works for more intention actions and quick-fixes in Kotlin, and the “Preview isn't available” message has been replaced with more informative HTML descriptions of the intention actions that aren’t supported. What’s more, for an action that modifies several files, the preview displays part of a possible outcome. This partial outcome should be enough to give you a general idea of what the action will change.\n\nIn IntelliJ IDEA 2021.3, tables can be created with ease. Simply invoke the context menu and select Insert | Table. That’s it! You can select the preferred size using the mouse hover action or the keyboard.\n\nThe cell width in the table will be adjusted as you type. You can edit the table content using the floating toolbars.\n\nTo create a new row, you can use Shift+Enter, and Tab to navigate to the next cell.\n\nWe’ve introduced the new Bookmarks tool window that is destined to replace a similar instance – Favorites. So from now on, you can simply use the F3 shortcut on macOS or F11 on Windows and Linux to mark your files, folders, and classes as important.\n\nWhen you add a bookmark, by default IntelliJ IDEA puts it in the node named after your project in the Bookmarks tool window. Every time you add a new bookmark, it will appear at the top of the list inside this node. You can sort your bookmarks by type using the Sort Groups and Bookmarks option in the tool window’s settings. You can also create new nodes and drag and drop items in them.\n\nIn v2021.3 we’ve made it possible to split the Run tool window with tabs. This allows you to run several configurations simultaneously and see all of the results.\n\nTo split the window, drag the tab you want to see to the highlighted area inside the Run tool window and drop it there. To unsplit the window again, right-click the top pane and select Unsplit from the context menu.\n\nWhen you search for usages of a method implementation via ⌥F7 on macOS or Alt+F7 on Windows and Linux, the IDE no longer asks whether you want to find usages of the base method in a pop-up. Instead, IntelliJ IDEA will use top-level hierarchy methods as targets for your search by default. If you want to change this behavior, deselect the Search for base method usages checkbox in the Find Usages tool window settings, which you can access by clicking the gear icon.\n\nThe Show Usages dialog has received several useful new features. We’ve introduced the source code preview per found usage, which you can see by clicking the square icon in the top toolbar pane. Another update lets you change the scope of your search with the new drop-down list located next to the Preview icon. What’s more, the window’s title bar now shows the type of code element you are searching for and the number of usages found.\n\nAnother minor yet very convenient update allows you to set the dialog width, which the IDE will retain the next time you invoke it.\n\nIn v2021.3, you will notice some changes to the nodes in the IntelliJ IDEA Project Wizard.\n\nYou can now select the Empty Project node to create a basic project for working with separate files of different types and adding Java and Kotlin classes. The IDE will automatically configure the project so that you can compile it if any Java or Kotlin classes are present.\n\nThe new Multi-Module Project node lets you create a project with a complex structure from scratch. Once the project is created, the Project Structure dialog will open, and you’ll be able to add various modules.\n\nIntelliJ IDEA 2021.3 addresses some accessibility issues to make working with the screen reader more comfortable. In response to your requests, we’ve disabled the tool window widget pop-up and the quick documentation pop-up that used to appear on mouse hover. We’ve also fixed an issue with calling the Go to Declaration dialog.\n\nIn this release, the accessibility support on macOS has also been improved. We’ve resolved several issues with the voiceover focus and made it possible for screen readers to detect the list items in the New Project wizard when you create projects. To minimize distractions while you're coding, we've decreased the number of help tooltips that play sounds.\n\nIntelliJ IDEA now warns you about hazards such as SQL injection and XSS flaws, sensitive data leaks, and insecure deserialization. It also prevents you from passing insecure data to secure methods. These additional warnings are provided by our new Non-safe string is passed to a safe method inspection.\n\nFor this inspection to work, you need to annotate strings as @Untainted ( “safe”) or @Tainted (“unsafe”). These annotations will become valid when you add the org.checkerframework.​checker.​tainting.​qual dependency.\n\nWe’ve added two inspections that can help you to simplify your code. The first one suggests that you replace collect(toList()) with .toList(). You can use it with Java versions 16 and up. Another inspection prompts you to replace collection.addAll(List.of(\"x\")) with collection.add(x), and map.putAll(Map.of(\"a\", \"b\")) with map.put(\"a\", \"b\").\n\nWhen you introduce a local variable in Java, the settings that are applicable to it no longer appear in a pop-up, which used to cover the code you were writing. Instead, you can access these options by clicking the gear icon next to a variable or by using the ⌥⇧O shortcut on macOS or Alt+Shift+O on Windows.\n\nWe’ve also improved the Introduce parameter refactoring. When you invoke this refactoring, with ⌥⌘P on macOS or Ctrl+Alt+P on Windows and Linux, the IDE asks where you want to replace occurrences. After you make this selection, a gear icon will appear, and clicking on it will allow you to configure more settings for the refactoring.\n\nThe Possibly blocking call in non-blocking context inspection warns you if you use a coroutine in the wrong context. In this release, the inspection works not only as a warning but also as a context-dependent quick-fix.\n\nWhat’s more, we’ve made some further improvements. This inspection now covers more cases, and you can customize it, so it works better in your particular environment.\n\nSometimes it can be difficult to understand the various ways to declare the ranges that Kotlin supports. To make it a little easier, we’ve added inline hints that explain with plain mathematical signs what the words or symbols in the ranges mean. If you don’t need this feature, you can easily disable it by right-clicking on a hint and selecting Disable ‘Ranges’ hints type.\n\nWe’ve reworked the layout of the New Project wizard by adding tooltips for all of the fields, so you can easily understand what info they require. The templates section has received an update as well – we've removed some of the unpopular templates and added a new one that lets you create a Compose Web Application.\n\nAnd finally, the project set up step has become much simpler. You now only need to fill in the basic fields.\n\nThe main focus of this release has been Scala 3 support. We've added highlighting, navigation, and autocomplete for end markers. There's now autocomplete for given, using, and export keywords, soft keywords, and the quiet syntax. The TASTy reader can now parse package object, as well as variance and bounds in higher-kinded types. The highlighting of lexer and parser errors is now significantly faster. There are more inspections that are compatible with Scala 3. We've improved the resolve of given imports and supported final top-level members and abstract lazy val.\n\nMany projects that should be compiled for both Scala 2 and Scala 3 are modeled as Scala 3 projects cross-compiled for Scala 2, even though technically they are Scala 2 projects.\n\nOpening such projects as Scala 2 allows the IDE to use the correct Scala version, and is more reliable.\n\nIntelliJ IDEA 2021.3 allows you to update your npm packages to the latest version right from the editor! Open your package.json file, place the caret on the package version you want to update, and then press ⌥⏎ on macOS or Alt+Enter on Windows and Linux and select Update ‘package name’ to the latest version. A quick-fix will also be shown when you hover over the package version.\n\nThis highly-anticipated new feature allows you to specify an HTTP or SOCKS proxy server for your SSH configuration in Preferences/Settings | Tools | SSH Configurations. Under the new HTTP/SOCKS section, you can select the proxy type, enter a hostname and a port, and apply authentication with a username and password, if necessary. It is also possible to sync your SSH proxy settings with the global IDE ones. To do so, select the Use global IDE proxy settings checkbox.\n\nIt is now easy to check whether the changes you’ve made worked for your program or caused a regression. To do so, just open two snapshots that you want to compare in the Profiler tool window. In the most recent snapshot, click the diff icon and select the snapshot you’ll use as the baseline. The IDE will display the result in the form of a flame graph, call tree, or method list.\n\nWhen you need to check out the selected branch and rebase it on top of a branch that is currently checked out, you use the Checkout and Rebase onto Current action, which was previously available for local branches only. In IntelliJ IDEA 2021.3, you can use it for remote branches as well.\n\nWe’ve improved the way the settings in Preferences/Settings | Version Control are structured, and we’ve made some of the critical configurations there more discoverable. The Version Control node now serves as the starting point for navigation, with links to all the available settings. If you go to the Git node from there, you’ll notice that we have divided all the settings into sections that account for the most important processes: Commit, Push, and Update. Additionally, the parameters inside these sections are now organized more logically. What’s more, we’ve added a separate node for Directory mappings, and the background operations are now switched on by default. The Background node no longer exists.\n\nWe have a new action that allows you to push only the commits you are confident about and leave the rest for later.\n\nIt allows you to push commits up to the one you have selected in the Log tab of the Git tool window. To use it, pick the commit you want to stop at, right-click on it to call the context menu, and select the new Push All up to Here action.\n\nWe’ve added the new Align Changes Highlighting option to the Diff screen settings that can be found under the gear icon. This feature makes the Diff easier to read, especially when there are complex modifications, because it aligns the unchanged lines so that they are displayed next to each other. This helps you see the code that has been added or removed more clearly.\n\nIn this release, we’ve improved the discoverability of the Evaluate feature. Previously, when users needed to evaluate something, many of them resorted to using watches. They just created a watch and then removed it, instead of using the Evaluate dialog. The Evaluate field is now accessible right in the Debug tool window, making the most convenient way to evaluate expressions more obvious.\n\nIntelliJ IDEA’s HTTP client provides basic support for gRPC requests. When you type the GRPC keyword to start your request, the HTTP client offers code completion. Thus, your IDE prompts you about all known gRPC services, unary and server-streaming methods of a particular server, and, most importantly, fields of the request body.\n\nAnother new feature allows you to generate a gRPC request in the HTTP client. To do so, just click on the gutter icons in your .proto files.\n\nWe’ve made 2 additions to the JetBrains annotation collection. Once you add 'org.jetbrains:annotations:23.0.0' to your project dependencies, you can annotate your classes and methods as @Blocking or @NonBlocking. This will make it possible for the IDE to detect blocking calls in non-blocking contexts, such as Kotlin coroutines or reactive code with Project Reactor, RxJava, and SmallRye Mutiny.\n\nWhat’s more, the IDE automatically supports the corresponding annotations from Micronaut and SmallRye Mutiny.\n\nWe’ve sped up all the processes for UML class diagrams, both in Java and Kotlin. Diagram opening, switching between categories, zoom, and the undo/redo functionality now all take much less time. Other notable changes include a new grid, member highlighting, and a quick documentation preview pop-up.\n\nIf you need to control the appearance of the diagram, use the context menu and select Appearance.\n\nWe’ve added the ability to display an Aggregate view for a range of cells. This is a long-awaited feature that will help you manage your data and spare you from having to write additional queries! This makes the data editor more powerful and easier to use, bringing it a step closer to Excel and Google Spreadsheets.\n\nSelect the cell range you want to see the view for, then right-click and select Show Aggregate View.\n\nThis release is a logical continuation of the previous one, which introduced the ability to generate a DDL data source based on a real one. Now, this workflow is fully supported. You can:\n\nGenerate a DDL data source from a real one: see the 2021.2 announcement.\n\nUse the DDL data source to map the real one.\n\nCompare and synchronize them in both directions.\n\nJust as a reminder, a DDL data source is a virtual data source whose schema is based on a set of SQL scripts. Storing these files in the Version Control System is a way to keep your database under the VCS.\n\nThere is a new tab in the data configuration properties, DDL mappings, where you can define which real data source is mapped to each DDL data source.\n\nThe new Database Diff window is available from the context menu. It has a better UI and clearly shows in the right-hand pane what result you’ll get after you perform the synchronization.\n\nThe legend in the right-hand pane shows what the colors mean for your potential result:\n\nGreen and italic: object will be created.\n\nGrey: object will be deleted.\n\nBlue: object will be changed.\n\nThe Script preview tab shows the result script, which can be either opened in the new console or run from this dialog. The result of this script is applying changes to make the database on the right (target) a copy of the database on the left (source).\n\nBesides the Script preview tab, there are two more tabs on the bottom pane: Object Properties Diff and DDL Diff. They display the difference between the particular versions of the object in the origin and in the target databases.\n\nTest Run Hierarchy\n\nWe implemented support for multilevel test runs. You can now create multiple child test runs for specific functionality domains or types of testing. Each parent test run aggregates the results of the child test runs and provides summary statistics from all sub-related test runs.\n\nShared steps\n\nIf you choose to manage test cases in Markdown files using our “Local TMS” feature, you will be able to easily declare test steps and share them among multiple test cases. Shared steps are declared as a regular Test Case with a unique numeric ID. You can refer to that test case in other test cases and IntelliJ IDEA will substitute those referenced test case steps when generating previews, test runs, or code templates for an automatic test.\n\nYou can format your Helm templates and be sure of the correct result. We’ve fixed all the related issues, and the formatting is now much more reliable. To see the improvement, go to Code | Reformat code or Reformat file or press ⌥⌘L on macOS or Ctrl+Alt+L on Windows and Linux.\n\nIt is now possible to rerun your latest helm command from the Services tool window. All you have to do is click the new icon in the top right-hand corner. For example, you run the helm lint command, and after it completes, you can click the icon to repeat it.\n\nThe new Clean up action works just like the prune terminal command. When you right-click on the Networks, Volumes, Containers, or Images node, you can select Clean up, and the IDE will delete the unused objects. You can also apply this action to the Docker root node to prune all the unnecessary objects in one click.\n\nImage layers allow you to track all the commands that are applied to images. To access them, select an image and go to the Layers tab. From there, when you choose a command, you can click on the Analyze image for more information link on the right-hand side of the screen for more detailed info about the changes applied to each layer.\n\nIf you have a preconfigured container that you want to use later, you can save it as an image locally and push it to continue using it remotely when you need it. Go to the Services tool window, right-click on the container, and select Image | Save as a new Image.\n\nWe’ve added several changes to the Docker registry. First off, the IDE now displays all available registries in separate nodes in the Services tool window. Previously we only had support for the Docker Hub registry. In v2021.3, we’ve added support for GitLab (registry.gitlab.com) and JetBrains Space (<username>.registry.jetbrains.space).\n\nYou can expand the registry nodes in the Services tool window, select the necessary image, and pull it to the desired location. If you have several Docker connections, the IDE will ask you where to pull the image. It is possible to push images to any added registry, and in the Push dialog the IDE automatically detects the available namespaces in the given registry and lets you select one from the drop-down list.\n\nLast but not least, you can use image completion for images from the JetBrains Space, GitLab, and Docker Hub registries.\n\nIntelliJ IDEA now supports Podman as an alternative way to manage pods, containers, and images. Before using Podman in the IDE, configure a connection yourself.\n\nOnce Podman has been installed and configured on your OS, you can connect to it via Preferences/Settings | Build, Execution, Deployment | Docker by selecting the TCP socket radio button and filling in the required fields.\n\nAll the files that you haven’t yet revised when performing a code review will remain marked with blue dots until you open them. This way, you won’t miss any critical changes. If you want to return to the changes later, you can select Mark as Not Viewed from the context menu. This feature also works for GitHub pull requests."
    }
}