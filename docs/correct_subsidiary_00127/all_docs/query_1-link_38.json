{
    "id": "correct_subsidiary_00127_1",
    "rank": 38,
    "data": {
        "url": "https://stackoverflow.com/questions/9210514/unable-to-find-valid-certification-path-to-requested-target-error-even-after-c",
        "read_more_link": "",
        "language": "en",
        "title": "Unable to find valid certification path to requested target - error even after cert imported",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae",
            "https://i.sstatic.net/O8XCE.png?s=64",
            "https://www.gravatar.com/avatar/98bced27aa499af81f823b998d23c79d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f9e28dc83496320c87c55b3cf988ab60?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1280ab8004c08ad36f83942837b1423e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a5cf25766831b8e542edcddd309da498?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1dc454a76474a1b27c6612f8358daaf3?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/e3xZV.png?s=64",
            "https://i.sstatic.net/KaDk7.png?s=64",
            "https://www.gravatar.com/avatar/6442a4c51178c5953da42ce20f5c226f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/aaab568a987099a7660dfceffdc4e847?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/qodt7.jpg?s=64",
            "https://www.gravatar.com/avatar/64595304ba964ca6c1f7be2427670f9e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/f3DHU.jpg?s=64",
            "https://i.sstatic.net/5RWZ7.jpg?s=64",
            "https://i.sstatic.net/anHZK.jpg?s=64",
            "https://graph.facebook.com/100007057867557/picture?type=large",
            "https://i.sstatic.net/2AgVR.png?s=64",
            "https://www.gravatar.com/avatar/74b935010f9ac8bee2a8df5b1c6ee6cb?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/63713c0a6066354c978766c1b0b6e289?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/d0edf9d0f312ec47d27046845580ba4f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c849158de87c316eccc01649e521374a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9e85b0f36fd2307b68fd63b9ca0c4b79?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh6.googleusercontent.com/-QLxWsVUvA1M/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3reJsV6ftf_Ajihv-0-nTVQ1d_QttQ/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/94f95c15027fa11b12ee3f4f4d410440?s=64&d=identicon&r=PG",
            "https://lh5.googleusercontent.com/-6oPK21WKy-w/AAAAAAAAAAI/AAAAAAAABRw/sKiTwGdG36A/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/6d9d59cc4ae4cf03bfe480c5c72b7f8a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh4.googleusercontent.com/-wLBU0P4GoTk/AAAAAAAAAAI/AAAAAAAAAPM/8Xy7C9d-XoU/photo.jpg?sz=64",
            "https://stackoverflow.com/posts/9210514/ivc/45b8?prg=0a33adc9-a2ce-4b2f-aae5-e76a1658a63c"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-02-09T12:05:02",
        "summary": "",
        "meta_description": "I have a Java client trying to access a server with a self-signed certificate.\nWhen I try to Post to the server, I get the following error:\n\nunable to find valid certification path to requested tar...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/9210514/unable-to-find-valid-certification-path-to-requested-target-error-even-after-c",
        "text": "Unfortunately - it could be many things - and lots of app servers and other java 'wrappers' are prone to play with properties and their 'own' take on keychains and what not. So it may be looking at something totally different.\n\nShort of truss-ing - I'd try:\n\njava -Djavax.net.debug=all -Djavax.net.ssl.trustStore=trustStore ...\n\nto see if that helps. Instead of 'all' one can also set it to 'ssl', key manager and trust manager - which may help in your case. Setting it to 'help' will list something like below on most platforms.\n\nRegardless - do make sure you fully understand the difference between the keystore (in which you have the private key and cert you prove your own identity with) and the trust store (which determines who you trust) - and the fact that your own identity also has a 'chain' of trust to the root - which is separate from any chain to a root you need to figure out 'who' you trust.\n\nall turn on all debugging ssl turn on ssl debugging The following can be used with ssl: record enable per-record tracing handshake print each handshake message keygen print key generation data session print session activity defaultctx print default SSL initialization sslctx print SSLContext tracing sessioncache print session cache tracing keymanager print key manager tracing trustmanager print trust manager tracing pluggability print pluggability tracing handshake debugging can be widened with: data hex dump of each handshake message verbose verbose handshake message printing record debugging can be widened with: plaintext hex dump of record plaintext packet print raw SSL/TLS packets\n\nSource: # See http://download.oracle.com/javase/1.5.0/docs/guide/security/jsse/JSSERefGuide.html#Debug\n\nHere is the solution , follow the below link Step by Step :\n\nhttp://www.mkyong.com/webservices/jax-ws/suncertpathbuilderexception-unable-to-find-valid-certification-path-to-requested-target/\n\nJAVA FILE : which is missing from the blog\n\n/* * Copyright 2006 Sun Microsystems, Inc. All Rights Reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * * - Redistributions of source code must retain the above copyright * notice, this list of conditions and the following disclaimer. * * - Redistributions in binary form must reproduce the above copyright * notice, this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. * * - Neither the name of Sun Microsystems nor the names of its * contributors may be used to endorse or promote products derived * from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ import java.io.*; import java.net.URL; import java.security.*; import java.security.cert.*; import javax.net.ssl.*; public class InstallCert { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(\":\"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? \"changeit\" : args[1]; passphrase = p.toCharArray(); } else { System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\"); return; } File file = new File(\"jssecacerts\"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\"); file = new File(dir, \"jssecacerts\"); if (file.isFile() == false) { file = new File(dir, \"cacerts\"); } } System.out.println(\"Loading KeyStore \" + file + \"...\"); InputStream in = new FileInputStream(file); KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); ks.load(in, passphrase); in.close(); SSLContext context = SSLContext.getInstance(\"TLS\"); TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmf.init(ks); X509TrustManager defaultTrustManager = (X509TrustManager)tmf.getTrustManagers()[0]; SavingTrustManager tm = new SavingTrustManager(defaultTrustManager); context.init(null, new TrustManager[] {tm}, null); SSLSocketFactory factory = context.getSocketFactory(); System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\"); SSLSocket socket = (SSLSocket)factory.createSocket(host, port); socket.setSoTimeout(10000); try { System.out.println(\"Starting SSL handshake...\"); socket.startHandshake(); socket.close(); System.out.println(); System.out.println(\"No errors, certificate is already trusted\"); } catch (SSLException e) { System.out.println(); e.printStackTrace(System.out); } X509Certificate[] chain = tm.chain; if (chain == null) { System.out.println(\"Could not obtain server certificate chain\"); return; } BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); System.out.println(); System.out.println(\"Server sent \" + chain.length + \" certificate(s):\"); System.out.println(); MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\"); MessageDigest md5 = MessageDigest.getInstance(\"MD5\"); for (int i = 0; i < chain.length; i++) { X509Certificate cert = chain[i]; System.out.println (\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN()); System.out.println(\" Issuer \" + cert.getIssuerDN()); sha1.update(cert.getEncoded()); System.out.println(\" sha1 \" + toHexString(sha1.digest())); md5.update(cert.getEncoded()); System.out.println(\" md5 \" + toHexString(md5.digest())); System.out.println(); } System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\"); String line = reader.readLine().trim(); int k; try { k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1; } catch (NumberFormatException e) { System.out.println(\"KeyStore not changed\"); return; } X509Certificate cert = chain[k]; String alias = host + \"-\" + (k + 1); ks.setCertificateEntry(alias, cert); OutputStream out = new FileOutputStream(\"jssecacerts\"); ks.store(out, passphrase); out.close(); System.out.println(); System.out.println(cert); System.out.println(); System.out.println (\"Added certificate to keystore 'jssecacerts' using alias '\" + alias + \"'\"); } private static final char[] HEXDIGITS = \"0123456789abcdef\".toCharArray(); private static String toHexString(byte[] bytes) { StringBuilder sb = new StringBuilder(bytes.length * 3); for (int b : bytes) { b &= 0xff; sb.append(HEXDIGITS[b >> 4]); sb.append(HEXDIGITS[b & 15]); sb.append(' '); } return sb.toString(); } private static class SavingTrustManager implements X509TrustManager { private final X509TrustManager tm; private X509Certificate[] chain; SavingTrustManager(X509TrustManager tm) { this.tm = tm; } public X509Certificate[] getAcceptedIssuers() { throw new UnsupportedOperationException(); } public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException { throw new UnsupportedOperationException(); } public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { this.chain = chain; tm.checkServerTrusted(chain, authType); } } }\n\nI came across this error while trying to access a https url from my application which was using self-signed certificate. What they provide is a .cert file and I was not sure where to put that. I solved it the following way:\n\nkeytool location is under JDK/bin folder\n\nMethod 1: Add the certificate to default Java Truststore - cacerts:\n\nkeytool -import -alias myCert -file C://certificate.cert -keystore C://Program Files//Java//jdk1.8.0_271//jre//lib//security//cacerts\n\nPassword: changeit\n\nMethod 2:\n\nCreate a Trust Store:\n\nkeytool -import -alias myCert -file C://certificate.cert -keystore myTrustStore\n\nIt gives you the following prompts, which can be filled up as:\n\nEnter keystore password:changeit Re-enter new password:changeit Trust this certificate?yes\n\nThis will create a myTrustStore file inside a folder where you ran this command. Copy this \"mytrustStore\" to a convenient location.\n\nUse the Trust Store:\n\nWhile you are running your application/server pass these JVM arguments:\n\n-Djavax.net.ssl.trustStore=C://myTrustStore -Djavax.net.ssl.trustStorePassword=changeit\n\nI am working on a tutorial for REST web services at www.udemy.com (REST Java Web Services). The example in the tutorial said that in order to have SSL, we must have a folder called \"trust_store\" in my eclipse \"client\" project that should contain a \"key store\" file (we had a \"client\" project to call the service, and \"service\" project that contained the REST web service - 2 projects in the same eclipse workspace, one the client, the other the service). To keep things simple, they said to copy \"keystore.jks\" from the glassfish app server (glassfish\\domains\\domain1\\config\\keystore.jks) we are using and put it into this \"trust_store\" folder that they had me make in the client project. That seems to make sense: the self-signed certs in the server's key_store would correspond to the certs in the client trust_store. Now, doing this, I was getting the error that the original post mentions. I have googled this and read that the error is due to the \"keystore.jks\" file on the client not containing a trusted/signed certificate, that the certificate it finds is self-signed.\n\nTo keep things clear, let me say that as I understand it, the \"keystore.jks\" contains self-signed certs, and the \"cacerts.jks\" file contains CA certs (signed by the CA). The \"keystore.jks\" is the \"keystore\" and the \"cacerts.jks\" is the \"trust store\". As \"Bruno\", a commenter, says above, \"keystore.jks\" is local, and \"cacerts.jks\" is for remote clients.\n\nSo, I said to myself, hey, glassfish also has the \"cacerts.jks\" file, which is glassfish's trust_store file. cacerts.jsk is supposed to contain CA certificates. And apparently I need my trust_store folder to contain a key store file that has at least one CA certificate. So, I tried putting the \"cacerts.jks\" file in the \"trust_store\" folder I had made, on my client project, and changing the VM properties to point to \"cacerts.jks\" instead of \"keystore.jks\". That got rid of the error. I guess all it needed was a CA cert to work.\n\nThis may not be ideal for production, or even for development beyond just getting something to work. For instance you could probably use \"keytool\" command to add CA certs to the \"keystore.jks\" file in the client. But anyway hopefully this at least narrows down the possible scenarios that could be going on here to cause the error.\n\nALSO: my approach seemed to be useful for the client (server cert added to client trust_store), it looks like the comments above to resolve the original post are useful for the server (client cert added to server trust_store). Cheers.\n\nEclipse project setup:\n\nMyClientProject\n\nsrc\n\ntest\n\nJRE System Library\n\n...\n\ntrust_store\n\n---cacerts.jks ---keystore.jks\n\nSnippet from MyClientProject.java file:\n\nstatic { // Setup the trustStore location and password System.setProperty(\"javax.net.ssl.trustStore\",\"trust_store/cacerts.jks\"); // comment out below line System.setProperty(\"javax.net.ssl.trustStore\",\"trust_store/keystore.jks\"); System.setProperty(\"javax.net.ssl.trustStorePassword\", \"changeit\"); //System.setProperty(\"javax.net.debug\", \"all\"); // for localhost testing only javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(new javax.net.ssl.HostnameVerifier() { public boolean verify(String hostname, javax.net.ssl.SSLSession sslSession) { return hostname.equals(\"localhost\"); } }); }\n\nI created a ubuntu on my windows 10 laptop and I ran into issue when I was trying to load CMAK site download from https://github.com/yahoo/CMAK site. First it gave fatal ssl error.\n\nopenssl s_client -showcerts -servername github.com -connect github.com:443 </dev/null 2>/dev/null | sed -n -e '/BEGIN\\ CERTIFICATE/,/END\\ CERTIFICATE/ p' > github-com.pem\n\nand use the following command (make sure you put right path for ca-cert)\n\ncat github-com.pem | sudo tee -a /etc/ssl/certs/ca-certificates.crt\n\nThen use the following statement (make sure the path for cert is correct):\n\ngit config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt\n\nThen I was able to download CMAK but ran into issue when i tried ./sbt clean statement. It was giving a pkix path error. The reason is that I do not have my company issue cert stored in my cacert file.\n\nI have downloaded the company cert (google on how to do it) and followed this article to add my downloaded cert to cacert file. Used sudo update-ca-certificates one more time before ./sbt. It worked for me.\n\nNote: You may have to switch between root and exit when you are following above steps."
    }
}