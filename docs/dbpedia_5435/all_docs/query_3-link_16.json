{
    "id": "dbpedia_5435_3",
    "rank": 16,
    "data": {
        "url": "https://stackoverflow.com/questions/24757263/mutually-recursive-definition-in-ocaml",
        "read_more_link": "",
        "language": "en",
        "title": "Mutually recursive definition in OCaml",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/2Y4TV.jpg?s=64",
            "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/24757263/ivc/0199?prg=035ec218-4188-491c-95a0-daec99530530"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-07-15T11:39:14",
        "summary": "",
        "meta_description": "I know that OCaml provide the let rec ... and ... for definition of mutually recursive function. Why I can't use that expression for define mutually recursive value?\n\nIn particular, why I can't do",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/24757263/mutually-recursive-definition-in-ocaml",
        "text": "Neither of your definitions are mutually recursive. You could just as well write them like this:\n\nlet x = 3 in let y = x + 5 in x\n\nand\n\nlet x = 3 in let y = [x; 4] in y\n\nMutually recursive definitions would look like this:\n\nlet rec x = y + 3 and y = x + 5 in x\n\nand\n\nlet rec x = 3 :: y and y = 4:: x in x\n\nIn the second piece of code x is a cyclic list that contains a 3 followed by a 4 and then loops back to the beginning. However the first piece of code doesn't make any sense. How can x equal y + 3 when y equals x + 5? It can't and therefore recursive values can only be defined using constructors of variant types (because that's the only case where a recursive value would not lead to infinite recursion)."
    }
}