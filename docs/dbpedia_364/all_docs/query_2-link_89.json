{
    "id": "dbpedia_364_2",
    "rank": 89,
    "data": {
        "url": "https://developer.android.com/training/basics/supporting-devices/languages",
        "read_more_link": "",
        "language": "en",
        "title": "Support different languages and cultures",
        "top_image": "https://developer.android.com/static/images/social/android-developers.png",
        "meta_img": "https://developer.android.com/static/images/social/android-developers.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/android/images/lockup.svg",
            "https://developer.android.com/static/images/training/languages_01.png",
            "https://developer.android.com/static/images/training/languages_us_flag.png",
            "https://developer.android.com/static/images/training/languages_es_flag.png",
            "https://developer.android.com/static/images/training/basics/ltr-display.png",
            "https://developer.android.com/static/images/training/basics/rtl-display.png",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/training/basics/supporting-devices/languages",
        "text": "Apps include resources that can be specific to a particular culture. For example, an app can include culture-specific strings that are translated to the language of the current locale.\n\nIt's a good practice to keep culture-specific resources separated from the rest of your app. Android resolves language- and culture-specific resources based on the system locale setting. You can provide support for different locales by using the resources directory in your Android project.\n\nYou can specify resources tailored to the cultures of the people using your app. You can provide any resource type that is appropriate for the language and culture of your users. For example, the following screenshots show an app displaying string and drawable resources in the device's default en_US locale and the Spanish es_ES locale.\n\nFigure 1. App using different resources depending on the current locale.\n\nWhen you create a project using the Android SDK Tools, the tools generate a res/ directory in the top level of the project. Within this res/ directory are subdirectories for various resource types. There are also a few default files, such as the res/values/strings.xml file, which holds your string values.\n\nSupporting different languages goes beyond using locale-specific resources. Some users choose a language that uses right-to-left (RTL) scripts, such as Arabic or Hebrew, for their UI locale. Other users who set their UI locale to a language that uses LTR scripts, such as English, might view or generate content in a language that uses RTL scripts. To support both types of users, your app needs to do the following:\n\nEmploy an RTL UI layout for RTL locales.\n\nDetect and declare the direction of text data that's displayed inside formatted messages. Usually, you can call a method, as described in this guide, that determines the direction of text data for you.\n\nCreate locale directories and resource files\n\nTo add support for more locales, create additional directories inside res/. Each directory's name must adhere to the following format:\n\n<resource type>-b+<language code>[+<country code>]\n\nFor example, values-b+es/ contains string resources for locales with the language code es. Similarly, mipmap-b+es+ES/ contains icons for locales with the es language code and the ES country code.\n\nAndroid loads the appropriate resources according to the locale settings of the device at runtime. For more information, see Provide alternative resources.\n\nAfter you decide which locales to support, create the resource subdirectories and files. For example:\n\nMyProject/ res/ values/ strings.xml values-b+es/ strings.xml mipmap/ country_flag.png mipmap-b+es+ES/ country_flag.png\n\nPopulate the resource files with localized resources. The following are examples of localized string and image resource files:\n\nEnglish strings (default locale) in /values/strings.xml:\n\n<resources> <string name=\"hello_world\">Hello World!</string> </resources>\n\nSpanish strings (es locale) in /values-b+es/strings.xml:\n\n<resources> <string name=\"hello_world\">¡Hola Mundo!</string> </resources>\n\nUS flag icon (default locale) in /mipmap/country_flag.png:\n\nFigure 2. Icon used for the default (en_US) locale.\n\nSpanish flag icon (es_ES locale) in /mipmap-b+es+ES/country_flag.png:\n\nFigure 3. Icon used for the es_ES locale.\n\nNote: You can use configuration qualifiers, such as the locale qualifier, on any resource type. For example, you might want to provide localized versions of your bitmap drawables. For more information, see Localize your app.\n\nUse the resources in your app\n\nReference the resources in your source code and other XML files by using each resource's name attribute: R.<resource type>.<resource name>. There are a variety of methods that accept a resource this way, as shown in the following examples:\n\nIn XML files, you can refer to a resource with the syntax @<resource type>/<resource name> whenever the XML attribute accepts a compatible value, as shown in the following example:\n\n<ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@mipmap/country_flag\" />\n\nNote: To ensure user language settings are prioritized correctly, specify the languages your app supports using the resConfigs property. For more information, see Specify the languages your app supports.\n\nFormat text in messages\n\nOne of the most common tasks in an app is formatting text. Localized messages are formatted by inserting text and numeric data into the appropriate positions. Unfortunately, when dealing with an RTL UI or RTL data, simple formatting can display incorrect or even unreadable text output.\n\nLanguages such as Arabic, Hebrew, Persian, and Urdu are written RTL. However, some elements, such as numbers and embedded LTR text, are written LTR within the otherwise RTL text. Languages that use LTR scripts, including English, are also bidirectional, because they can contain embedded RTL scripts that need to be displayed RTL.\n\nApps often generate instances of this kind of embedded opposite-direction text, such as by inserting text data of an arbitrary language and an arbitrary text direction into localized messages. This mixing of directions often doesn't include a clear indication of where opposite-direction text starts and ends, so app-generated text can cause poor user experience.\n\nAlthough the system's default handling of bidirectional text usually renders text as expected, text might not render properly when your app inserts it into a localized message. The following are examples of situations where text is likely to appear incorrectly:\n\nText inserted at the start of a message:\n\nPERSON_NAME is calling you\n\nText that starts with a number, such as an address or telephone number:\n\n987 654-3210\n\nText that starts with punctuation, such as a phone number:\n\n+19876543210\n\nText that ends with punctuation:\n\nAre you sure?\n\nText that contains both directions already:\n\nThe word בננה is Hebrew for banana.\n\nExample\n\nSuppose an app sometimes needs to display the message \"Did you mean %s?\", with an address inserted in place of the %s at runtime. The app supports different UI locales, so the message comes from a locale-specific resource and uses the RTL direction when the device is set to an RTL locale. For example, for a Hebrew UI, the message appears as follows:\n\nהאם התכוונת ל %s?\n\nHowever, the suggested address might come from a database that doesn't include text in the locale's language. For example, if the address is for a place in California, it appears in the database using English text. If you insert the address \"15 Bay Street, Laurel, CA\" into the RTL message without providing any hints regarding text direction, the result isn't expected or correct:\n\nהאם התכוונת ל 15 Bay Street, Laurel, CA?\n\nThe house number appears to the right of the address, not to the left as intended. This makes the house number look more like a strange postal code. The same problem can occur if you include RTL text within a message that uses the LTR text direction.\n\nExplanation and solution\n\nThe problem in this example occurs because the text formatter doesn't specify that \"15\" is part of the address, so the system can’t determine whether the \"15\" is part of the RTL text that comes before it or the LTR text that comes after it.\n\nTo solve this problem, use the unicodeWrap() method from the BidiFormatter class. This method detects the direction of a string and wraps it in Unicode formatting characters that declare that direction.\n\nThe following code snippet demonstrates how to use unicodeWrap():\n\nBecause the \"15\" now appears inside text that is declared as LTR, it's displayed in the correct position:\n\nהאם התכוונת ל 15 Bay Street, Laurel, CA?\n\nUse the unicodeWrap() method on every piece of text that you insert into a localized message except when one of the following applies:\n\nThe text is being inserted into a machine-readable string, such as a URI or a SQL query.\n\nYou know the piece of text is already properly wrapped.\n\nNote: If your app targets Android 4.3 (API level 18) or higher, use the version of BidiFormatter found in the Android Framework. Otherwise, use the version of BidiFormatter found in the Support Library.\n\nFormat numbers\n\nUse format strings, not method calls, to convert numbers to strings in your app's logic:\n\nThis formats the numbers appropriately for your locale, which might include using a different set of digits.\n\nWhen you use String.format() to create a SQL query on a device set to a locale that uses its own set of digits, such as Persian and most Arabic locales, problems occur if any of the parameters to the query are numbers. This is because the number is formatted in the locale's digits, and these digits are invalid in SQL.\n\nTo preserve ASCII-formatted numbers and keep the SQL query valid, you instead need to use the overloaded version of String.format() that includes a locale as the first parameter. Use the locale argument Locale.US.\n\nSupport layout mirroring\n\nPeople who use RTL scripts prefer an RTL user interface, which includes right-aligned menus, right-aligned text, and forward arrows pointing to the left.\n\nFigure 4 shows the contrast between the LTR version of a screen within the Settings app and its RTL counterpart:\n\nWhen adding RTL support to your app, keep the following points in mind:\n\nRTL text mirroring is only supported in apps when used on devices running Android 4.2 (API level 17) or higher. To learn how to support text mirroring on older devices, see Provide support for legacy apps in this guide.\n\nTo test whether your app supports an RTL text direction, test using developer options as described in this guide and invite people who use RTL scripts to use your app.\n\nNote: To view additional design guidelines related to layout mirroring, including a list of elements that are and are not appropriate to mirror, see the Bidirectionality material design guidelines.\n\nTo mirror the UI layout in your app so it appears RTL in an RTL locale, complete the steps in the following sections.\n\nModify the build and manifest files\n\nModify your app module's build.gradle file and app manifest file as follows:\n\nbuild.gradle (Module: app)\n\nAndroidManifest.xml\n\n<manifest ... > ... <application ... android:supportsRtl=\"true\"> </application> </manifest>\n\nNote: If your app targets Android 4.1.1 (API level 16) or lower, the android:supportsRtl attribute is ignored, along with any start and end attribute values that appear in your app's layout files. In this case, RTL layout mirroring doesn't happen automatically in your app.\n\nConvert left and right to start and end, respectively, in your existing layout resource files. This lets the framework align your app's UI elements based on the user's language settings.\n\nNote: Before updating your resources, learn how to provide support for legacy apps, or apps that target Android 4.1.1 (API level 16) and lower.\n\nTo use the framework's RTL alignment capabilities, change the attributes in your layout files that appear in Table 1.\n\nTable 1. Attributes to use when your app supports multiple text directions\n\nAttribute supporting LTR only Attribute supporting LTR and RTL android:gravity=\"left\" android:gravity=\"start\" android:gravity=\"right\" android:gravity=\"end\" android:layout_gravity=\"left\" android:layout_gravity=\"start\" android:layout_gravity=\"right\" android:layout_gravity=\"end\" android:paddingLeft android:paddingStart android:paddingRight android:paddingEnd android:drawableLeft android:drawableStart android:drawableRight android:drawableEnd android:layout_alignLeft android:layout_alignStart android:layout_alignRight android:layout_alignEnd android:layout_marginLeft android:layout_marginStart android:layout_marginRight android:layout_marginEnd android:layout_alignParentLeft android:layout_alignParentStart android:layout_alignParentRight android:layout_alignParentEnd android:layout_toLeftOf android:layout_toStartOf android:layout_toRightOf android:layout_toEndOf\n\nTable 2 shows how the system handles UI alignment attributes based on the target SDK version, whether left and right attributes are defined, and whether start and end attributes are defined.\n\nTable 2. UI element alignment behavior based on the target SDK version and defined attributes\n\nTargeting Android 4.2\n\n(API level 17) or higher? Left and right defined? Start and end defined? Result Yes Yes Yes start and end are used, overriding left and right Yes Yes No left and right are used Yes No Yes start and end are used No Yes Yes left and right are used (start and end are ignored) No Yes No left and right are used No No Yes start and end resolve to left and right\n\nAdd direction- and language-specific resources\n\nThis step involves adding specific versions of your layout, drawables, and values resource files that contain customized values for different languages and text directions.\n\nIn Android 4.2 (API level 17) and higher, you can use the -ldrtl (layout-direction-right-to-left) and -ldltr (layout-direction-left-to-right) resource qualifiers. To maintain backward compatibility with existing resources, older versions of Android use a resource's language qualifiers to infer the correct text direction.\n\nSuppose you want to add a specific layout file to support RTL scripts, such as the Hebrew, Arabic, and Persian languages. To do this, add a layout-ldrtl/ directory in your res/ directory, as shown in the following example:\n\nres/ layout/ main.xml This layout file is loaded by default. layout-ldrtl/ main.xml This layout file is loaded for languages using an RTL text direction, including Arabic, Persian, and Hebrew.\n\nIf you want to add a specific version of the layout that is designed for only Arabic text, your directory structure looks like the following:\n\nres/ layout/ main.xml This layout file is loaded by default. layout-ar/ main.xml This layout file is loaded for Arabic text. layout-ldrtl/ main.xml This layout file is loaded only for non-Arabic languages that use an RTL text direction.\n\nNote: Language-specific resources take precedence over layout-direction-specific resources, which take precedence over the default resources.\n\nUse supported widgets\n\nAs of Android 4.2 (API level 17), most framework UI elements support the RTL text direction automatically. However, several framework elements, such as ViewPager, don't support the RTL text direction.\n\nHome-screen widgets support the RTL text direction as long as their corresponding manifest files include the attribute assignment android:supportsRtl=\"true\".\n\nProvide support for legacy apps\n\nIf your app targets Android 4.1.1 (API level 16) or lower, include left and right attributes in addition to start and end.\n\nTo check whether your layout needs to use the RTL text direction, use the following logic:\n\nNote: To avoid compatibility issues, use version 23.0.1 or higher of the Android SDK Build Tools.\n\nTest using developer options\n\nOn devices running Android 4.4 (API level 19) or higher, you can enable Force RTL layout direction in the on-device developer options. This setting lets you see text that uses LTR scripts, such as English text, in RTL mode.\n\nUpdate app logic\n\nThis section describes specific aspects of your app's logic to update when adapting your app for handling multiple text directions.\n\nProperty changes\n\nTo handle a change in any RTL-related property—such as layout direction, layout parameters, padding, text direction, text alignment, or drawable positioning—use the onRtlPropertiesChanged() callback. This callback lets you get the current layout direction and update an activity's View objects accordingly.\n\nViews\n\nIf you are creating a UI widget that is not directly part of an activity's view hierarchy, such as a dialog or a toast-like UI element, set the correct layout direction depending on the context. The following code snippet demonstrates how to complete this process:\n\nSeveral methods of the View class require additional consideration:\n\nonMeasure()\n\nView measurements might vary depending on text direction.\n\nonLayout()\n\nIf you create your own layout implementation, then you need to call super() in your version of onLayout() and adapt your custom logic to support RTL scripts.\n\nonDraw()\n\nIf you're implementing a custom view or adding advanced functionality to a drawing, you need to update your code to support RTL scripts. Use the following code to determine if your widget is in RTL mode:\n\nKotlin\n\n// On devices running Android 4.1.1 (API level 16) and lower, // you can call the isLayoutRtl() system method directly. fun isLayoutRtl(): Boolean = layoutDirection == LAYOUT_DIRECTION_RTL\n\nJava\n\n// On devices running Android 4.1.1 (API level 16) and lower, // you can call the isLayoutRtl() system method directly. public boolean isLayoutRtl() { return (getLayoutDirection() == LAYOUT_DIRECTION_RTL); }\n\nDrawables\n\nIf you have a drawable that needs to be mirrored for an RTL layout, complete one of these steps based on the version of Android running on the device:\n\nOn devices running Android 4.3 (API level 18) and lower, add and define the -ldrtl resource files.\n\nOn Android 4.4 (API level 19) and higher, use android:autoMirrored=\"true\" when defining your drawable, which lets the system handle RTL layout mirroring for you.\n\nNote: The android:autoMirrored attribute only works for simple drawables whose bidirectional mirroring is simply a graphical mirroring of the entire drawable. If your drawable contains multiple elements, or if reflecting your drawable changes its interpretation, you can perform the mirroring yourself. Whenever possible, check with a bidirectional expert to determine whether your mirrored drawables make sense to users.\n\nGravity\n\nIf your app's layout code uses Gravity.LEFT or Gravity.RIGHT, change these values to Gravity.START and Gravity.END, respectively.\n\nIf you have Kotlin or Java code that depends on the Gravity.LEFT or Gravity.RIGHT properties, you can adapt it to work with this change by setting the absoluteGravity to match the layoutDirection.\n\nFor example, if you're using the following code:\n\nChange it to the following:\n\nThis means you can keep your existing code that handles left-aligned and right-aligned values, even if you are using start and end for your gravity values.\n\nNote: When applying your gravity settings, use an overloaded version of Gravity.apply() that includes a layoutDirection argument.\n\nMargins and padding\n\nTo support RTL scripts in your app, follow these best practices related to margin and padding values:\n\nUse getMarginStart() and getMarginEnd() instead of the direction-specific attribute equivalents leftMargin and rightMargin.\n\nWhen using setMargins(), swap the values of the left and right arguments if your app detects RTL scripts.\n\nIf your app includes custom padding logic, override setPadding() and setPaddingRelative().\n\nSupport per-app language preferences\n\nIn many cases, multilingual users set their system language to one language—such as English—but they want to select other languages for specific apps, such as Dutch, Chinese, or Hindi. To help apps provide a better experience for these users, Android 13 introduces the following features for apps that support multiple languages:\n\nSystem settings: a centralized location where users can select a preferred language for each app.\n\nYour app must declare the android:localeConfig attribute in its manifest to tell the system that it supports multiple languages. To learn more, see the instructions for creating a resource file and declaring it in your app's manifest file.\n\nAdditional APIs: these public APIs, such as the setApplicationLocales() and getApplicationLocales() methods in LocaleManager, let apps set a different language from the system language at runtime.\n\nApps that use custom in-app language pickers can use these APIs to give users a consistent user experience regardless of where they select their language preferences. The public APIs also help you reduce the amount of boilerplate code, and they support split APKs. They also support Auto Backup for Apps to store app-level user language settings.\n\nFor backward compatibility with previous Android versions, equivalent APIs are also available in AndroidX. We recommend using Appcompat 1.6.0-beta01 or higher.\n\nTo learn more, see the instructions for implementing the new APIs.\n\nSee also\n\nLocalize your app\n\nApp translation service\n\nAdditional resources\n\nTo learn more about supporting older devices, view the following resources:\n\nBlog posts"
    }
}