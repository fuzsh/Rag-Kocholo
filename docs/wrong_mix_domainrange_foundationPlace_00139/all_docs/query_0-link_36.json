{
    "id": "wrong_mix_domainrange_foundationPlace_00139_0",
    "rank": 36,
    "data": {
        "url": "https://codesync.global/speaker/maxim-fedorov/",
        "read_more_link": "",
        "language": "en",
        "title": "Maxim Fedorov",
        "top_image": "https://codesync.global/assets/img/favicon.93e85b1c.png",
        "meta_img": "https://codesync.global/assets/img/favicon.93e85b1c.png",
        "images": [
            "https://codesync.global/uploads/media/speakers/0001/01/d171a43c1b08b4603949ee431af415f8885f2ee1.png",
            "https://codesync.global/uploads/media/articles/0001/01/533721d7c09552d8dd71472858bd827b57dac796.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Conference"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Impossible takes a little longer",
        "meta_lang": "en",
        "meta_favicon": "/assets/img/favicon.93e85b1c.png",
        "meta_site_name": "Code Sync",
        "canonical_link": "http://codesync.global/speaker/maxim-fedorov/",
        "text": "Maxim Fedorov is a software engineer at WhatsApp, the largest messaging app. Maxim’s work is focused on performance and scalability of the server side.\n\nBefore WhatsApp, Maxim has been developing low-latency TCP/IP applications at NetAlliance (Sydney, Australia), designing Kaspersky Enterprise Security Endpoint (Moscow, Russia), improving Parallels Virtual Automation, called Odin now, at Parallels (former SWsoft), and developing network security software before.\n\nErlang/OTP is a live and breathing repository containing over two million lines of code. Over 4,300 commits were made between R23 and R24. Five years ago we started with heavily patched OTP 16 fork powering our servers. Now we run the latest version before it’s officially released, getting the most out of Erlang. This talk is about the road we took, how we ended up running OTP tests in out CI pipeline, and how we made it faster & friendlier for developers.\n\nAUDIENCE:\n\ntechnical leads, release engineers, development, infrastructure specialists\n\nWe spent countless hours and sleepless nights bringing and keeping up server side of the most successful messaging service in the world. Looking back, how many choices we'd change? And how to ensure we make the right one next time? \"The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil\" (Donald Knuth). But why does it happen? Why did we do something we didn't really want? Because we acted on assumptions. This talk will guide through a number of war stories where assumptions were made and acted on. There were regrets and disappointments, and we learned to challenge assumptions the hard way. Now it's time to share what we learnt so far.\n\nOBJECTIVES\n\nidentify sources of human errors in software development\n\ndiscuss instruments and routines helping to challenge assumptions\n\nprovide advice for improved decision making process\n\nAUDIENCE\n\nTech leads, software architects, systems designers and everyone else involved in making technical decisions and facing the consequences.\n\nSimple, reliable messaging. It takes a lot to support this statement. For 10 years WhatsApp demonstrated unprecedented reliability and availability, serving over 1.5B users. There is absolutely no way to reproduce interactions between all of them, within the cluster spanning over 10,000 nodes and multiple datacenters. Investigations must be done on a live system without disturbing connected users. If there are repairs needed, it has to be done on the fly.\n\nThis talk will guide through debugging and troubleshooting techniques used at WhatsApp. Maxim will share a few case studies, explain monitoring, introspection, performance analysis, and tools.\n\nSome knowledge of Erlang and C is necessary.\n\nOBJECTIVES\n\nShare processes, best practices, tools and war stories about 10 years of reliable messaging service.\n\nTARGET AUDIENCE\n\nSoftware developers, DevOps, Site Reliability Engineers, System Administrators and everyone else interested in troubleshooting live production system.\n\nGrowing user population beyond 1.5B does not leave a chance to keep server footprint as small as it used to be. Adding new capabilities requires more and more processing power. When it gets impossible to keep everything on just ten servers, we have to scale the cluster to a hundred. When a hundred gets too tight, we expand it to 1,000. What’s next? 10,000? And how is it possible, considering current scalability limits of a single Erlang cluster?\n\nThis talk will guide you along the way we took to improve Erlang scalability, remove bottlenecks and increase the efficiency of our Erlang-based applications.\n\nOBJECTIVES\n\nDemonstrate an example of live Erlang cluster being scaled from just a few nodes to 10,000 machines with no service interruption.\n\nTARGET AUDIENCE\n\nScalability engineers, people interested in optimising Erlang for large-scale server applications."
    }
}