{
    "id": "dbpedia_6893_2",
    "rank": 65,
    "data": {
        "url": "https://www.inesctec.pt/en/people/paulo-moura",
        "read_more_link": "",
        "language": "en",
        "title": "Paulo Moura",
        "top_image": "https://www.inesctec.pt/assets/favicon/favicon-32x32.png",
        "meta_img": "https://www.inesctec.pt/assets/favicon/favicon-32x32.png",
        "images": [
            "https://www.inesctec.pt/assets/images/logo-white.svg",
            "https://www.inesctec.pt/assets/images/logo-black.svg",
            "https://www.inesctec.pt/assets/images/footer/logo-u-porto.svg",
            "https://www.inesctec.pt/assets/images/footer/inesc.svg",
            "https://www.inesctec.pt/assets/images/footer/p-porto.svg",
            "https://www.inesctec.pt/assets/images/footer/logo-u-minho.svg",
            "https://www.inesctec.pt/assets/images/footer/logo-utad.svg",
            "https://www.inesctec.pt/assets/images/footer/logo-u-aberta.png",
            "https://www.inesctec.pt/assets/images/footer/uma.png",
            "https://www.inesctec.pt/assets/images/footer/image_fct.png",
            "https://www.inesctec.pt/assets/images/footer/rp.png",
            "https://www.inesctec.pt/assets/images/footer/prr.png",
            "https://www.inesctec.pt/assets/images/footer/rp.png",
            "https://www.inesctec.pt/assets/images/footer/ue.png",
            "https://www.inesctec.pt/assets/images/footer/mi-ani.png",
            "https://www.inesctec.pt/captcha/default?hOOifWhQ",
            "https://matomo.inesctec.pt/matomo.php?idsite=3&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "INESC",
            "TEC",
            "INESCTEC",
            "Innovation",
            "Laboratory",
            "Smart Engineering",
            "robotics",
            "sensors",
            "computer distribution",
            "computer science",
            "Industry and innovation",
            "power and energy",
            "networked intelligent systems",
            "Knowledge Management",
            "Mobile Public Transport",
            "Virtual Worlds",
            "Distribution Networks",
            "Supply Chain",
            "Production Planning",
            "Machine Learning",
            "Data Mining",
            "Neural Networks",
            "research and innovation",
            "fcup",
            "feup",
            "isep",
            "uminho",
            "utad"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "INESC TEC is an internationally-oriented multidisciplinary Associate Laboratory with more than 30 years of experience in R&D and technology transfer.",
        "meta_lang": "en",
        "meta_favicon": "https://www.inesctec.pt/assets/favicon/apple-touch-icon.png",
        "meta_site_name": "INESC TEC",
        "canonical_link": "https://www.inesctec.pt/en/people/paulo-moura",
        "text": "Abstract\n\nThe number of approaches existing to enable a smooth interaction between Java and Prolog programs testifies the growing interest in solutions that combine the strengths of both languages. Most of these approaches provide limited support to allow programmers to customise how Prolog artefacts should be reified in the Java world, or how to reason about Java objects on the Prolog side. This is an error-prone task since often a considerable amount of mappings must be developed and organised. Furthermore, appropriate mappings may depend on the particular context in which a conversion is accomplished. Although some libraries alleviate this problem by providing higher-level abstractions to deal with the complexity of custom conversions between artefacts of the two languages, such libraries are difficult to implement and evolve, because of a lack of appropriate underlying building blocks for encapsulating, categorising and applying Java-Prolog conversion routines. We therefore introduce a new library, JPC, serving as a development tool for both programmers willing to categorise context-dependent conversion constructs in their Java-Prolog systems, and for architects implementing frameworks providing higher-level abstractions for better interoperability between these two languages.\n\nAbstract\n\nTabling is a commonly used technique in logic programming for avoiding cyclic behavior of logic programs and enabling more declarative program definitions. Furthermore, tabling often improves computational performance. Rational term are terms with one or more infinite sub-terms but with a finite representation. Rational terms can be generated in Prolog by omitting the occurs check when unifying two terms. Applications of rational terms include definite clause grammars, constraint handling systems, and coinduction. In this paper, we report our extension of YAP's Prolog tabling mechanism to support rational terms. We describe the internal representation of rational terms within the table space and prove its correctness. We then use this extension to implement a tabling based approach to coinduction. We compare our approach with current coinductive transformations and describe the implementation. In addition, we present an algorithm that ensures a canonical representation for rational terms.\n\nAbstract\n\nWhile object-oriented programming languages are good at modelling real-world concepts and benefit from rich libraries and developer tools, logic programming languages are well suited for declaratively solving computational problems that require knowledge reasoning. Non-trivial declarative applications could take advantage of the modelling features of object-oriented programming and of the rich software ecosystems surrounding them. Linguistic symbiosis is a common approach to enable complementary use of languages of different paradigms. However, the problem of concepts leaking from one paradigm to another often hinders the applicability of such approaches. This issue has mainly been reported for object-oriented languages participating in a symbiotic relation with a logic language. To address this issue, we present LogicObjects, a linguistic symbiosis framework for transparently and (semi-) automatically enabling logic programming in Java, that aims to solve most of the problems of paradigm leaking reported in other works. Â© 2013 Springer-Verlag."
    }
}