{
    "id": "dbpedia_5612_2",
    "rank": 54,
    "data": {
        "url": "https://scikit-learn.org/stable/modules/linear_model.html",
        "read_more_link": "",
        "language": "en",
        "title": "1.1. Linear Models #",
        "top_image": "https://scikit-learn/stable/_images/sphx_glr_plot_ols_001.png",
        "meta_img": "https://scikit-learn/stable/_images/sphx_glr_plot_ols_001.png",
        "images": [
            "https://scikit-learn.org/stable/_static/scikit-learn-logo-small.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_ols_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_ridge_path_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_lasso_model_selection_002.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_lasso_model_selection_003.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_lasso_lars_ic_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_multi_task_lasso_support_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_multi_task_lasso_support_002.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_lasso_coordinate_descent_path_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_lasso_lars_001.png",
            "https://scikit-learn.org/stable/_images/poisson_gamma_tweedie_distributions.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_theilsen_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_robust_fit_003.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_robust_fit_002.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_robust_fit_003.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_robust_fit_005.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_ransac_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_theilsen_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_huber_vs_ridge_001.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_quantile_regression_002.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_polynomial_interpolation_001.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The following are a set of methods intended for regression in which the target value is expected to be a linear combination of the features. In mathematical notation, if\\hat{y} is the predicted val...",
        "meta_lang": "en",
        "meta_favicon": "../_static/favicon.ico",
        "meta_site_name": "scikit-learn",
        "canonical_link": "https://scikit-learn/stable/modules/linear_model.html",
        "text": "1.1. Linear Models#\n\nThe following are a set of methods intended for regression in which the target value is expected to be a linear combination of the features. In mathematical notation, if \\(\\hat{y}\\) is the predicted value.\n\n\\[\\hat{y}(w, x) = w_0 + w_1 x_1 + ... + w_p x_p\\]\n\nAcross the module, we designate the vector \\(w = (w_1, ..., w_p)\\) as coef_ and \\(w_0\\) as intercept_.\n\nTo perform classification with generalized linear models, see Logistic regression.\n\n1.1.1. Ordinary Least Squares#\n\nLinearRegression fits a linear model with coefficients \\(w = (w_1, ..., w_p)\\) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation. Mathematically it solves a problem of the form:\n\n\\[\\min_{w} || X w - y||_2^2\\]\n\nLinearRegression will take in its fit method arrays X, y and will store the coefficients \\(w\\) of the linear model in its coef_ member:\n\n>>> from sklearn import linear_model >>> reg = linear_model.LinearRegression() >>> reg.fit([[0, 0], [1, 1], [2, 2]], [0, 1, 2]) LinearRegression() >>> reg.coef_ array([0.5, 0.5])\n\nThe coefficient estimates for Ordinary Least Squares rely on the independence of the features. When features are correlated and the columns of the design matrix \\(X\\) have an approximately linear dependence, the design matrix becomes close to singular and as a result, the least-squares estimate becomes highly sensitive to random errors in the observed target, producing a large variance. This situation of multicollinearity can arise, for example, when data are collected without an experimental design.\n\nExamples\n\nLinear Regression Example\n\n1.1.1.1. Non-Negative Least Squares#\n\nIt is possible to constrain all the coefficients to be non-negative, which may be useful when they represent some physical or naturally non-negative quantities (e.g., frequency counts or prices of goods). LinearRegression accepts a boolean positive parameter: when set to True Non-Negative Least Squares are then applied.\n\nExamples\n\nNon-negative least squares\n\n1.1.1.2. Ordinary Least Squares Complexity#\n\nThe least squares solution is computed using the singular value decomposition of X. If X is a matrix of shape (n_samples, n_features) this method has a cost of \\(O(n_{\\text{samples}} n_{\\text{features}}^2)\\), assuming that \\(n_{\\text{samples}} \\geq n_{\\text{features}}\\).\n\n1.1.2. Ridge regression and classification#\n\n1.1.2.1. Regression#\n\nRidge regression addresses some of the problems of Ordinary Least Squares by imposing a penalty on the size of the coefficients. The ridge coefficients minimize a penalized residual sum of squares:\n\n\\[\\min_{w} || X w - y||_2^2 + \\alpha ||w||_2^2\\]\n\nThe complexity parameter \\(\\alpha \\geq 0\\) controls the amount of shrinkage: the larger the value of \\(\\alpha\\), the greater the amount of shrinkage and thus the coefficients become more robust to collinearity.\n\nAs with other linear models, Ridge will take in its fit method arrays X, y and will store the coefficients \\(w\\) of the linear model in its coef_ member:\n\n>>> from sklearn import linear_model >>> reg = linear_model.Ridge(alpha=.5) >>> reg.fit([[0, 0], [0, 0], [1, 1]], [0, .1, 1]) Ridge(alpha=0.5) >>> reg.coef_ array([0.34545455, 0.34545455]) >>> reg.intercept_ 0.13636...\n\nNote that the class Ridge allows for the user to specify that the solver be automatically chosen by setting solver=\"auto\". When this option is specified, Ridge will choose between the \"lbfgs\", \"cholesky\", and \"sparse_cg\" solvers. Ridge will begin checking the conditions shown in the following table from top to bottom. If the condition is true, the corresponding solver is chosen.\n\n1.1.2.2. Classification#\n\nThe Ridge regressor has a classifier variant: RidgeClassifier. This classifier first converts binary targets to {-1, 1} and then treats the problem as a regression task, optimizing the same objective as above. The predicted class corresponds to the sign of the regressor’s prediction. For multiclass classification, the problem is treated as multi-output regression, and the predicted class corresponds to the output with the highest value.\n\nIt might seem questionable to use a (penalized) Least Squares loss to fit a classification model instead of the more traditional logistic or hinge losses. However, in practice, all those models can lead to similar cross-validation scores in terms of accuracy or precision/recall, while the penalized least squares loss used by the RidgeClassifier allows for a very different choice of the numerical solvers with distinct computational performance profiles.\n\nThe RidgeClassifier can be significantly faster than e.g. LogisticRegression with a high number of classes because it can compute the projection matrix \\((X^T X)^{-1} X^T\\) only once.\n\nThis classifier is sometimes referred to as a Least Squares Support Vector Machines with a linear kernel.\n\nExamples\n\nPlot Ridge coefficients as a function of the regularization\n\nClassification of text documents using sparse features\n\nCommon pitfalls in the interpretation of coefficients of linear models\n\n1.1.2.3. Ridge Complexity#\n\nThis method has the same order of complexity as Ordinary Least Squares.\n\n1.1.2.4. Setting the regularization parameter: leave-one-out Cross-Validation#\n\nRidgeCV and RidgeClassifierCV implement ridge regression/classification with built-in cross-validation of the alpha parameter. They work in the same way as GridSearchCV except that it defaults to efficient Leave-One-Out cross-validation. When using the default cross-validation, alpha cannot be 0 due to the formulation used to calculate Leave-One-Out error. See [RL2007] for details.\n\nUsage example:\n\n>>> import numpy as np >>> from sklearn import linear_model >>> reg = linear_model.RidgeCV(alphas=np.logspace(-6, 6, 13)) >>> reg.fit([[0, 0], [0, 0], [1, 1]], [0, .1, 1]) RidgeCV(alphas=array([1.e-06, 1.e-05, 1.e-04, 1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06])) >>> reg.alpha_ 0.01\n\nSpecifying the value of the cv attribute will trigger the use of cross-validation with GridSearchCV, for example cv=10 for 10-fold cross-validation, rather than Leave-One-Out Cross-Validation.\n\nReferences#\n\n[RL2007]\n\n“Notes on Regularized Least Squares”, Rifkin & Lippert (technical report, course slides).\n\n1.1.3. Lasso#\n\nThe Lasso is a linear model that estimates sparse coefficients. It is useful in some contexts due to its tendency to prefer solutions with fewer non-zero coefficients, effectively reducing the number of features upon which the given solution is dependent. For this reason, Lasso and its variants are fundamental to the field of compressed sensing. Under certain conditions, it can recover the exact set of non-zero coefficients (see Compressive sensing: tomography reconstruction with L1 prior (Lasso)).\n\nMathematically, it consists of a linear model with an added regularization term. The objective function to minimize is:\n\n\\[\\min_{w} { \\frac{1}{2n_{\\text{samples}}} ||X w - y||_2 ^ 2 + \\alpha ||w||_1}\\]\n\nThe lasso estimate thus solves the minimization of the least-squares penalty with \\(\\alpha ||w||_1\\) added, where \\(\\alpha\\) is a constant and \\(||w||_1\\) is the \\(\\ell_1\\)-norm of the coefficient vector.\n\nThe implementation in the class Lasso uses coordinate descent as the algorithm to fit the coefficients. See Least Angle Regression for another implementation:\n\n>>> from sklearn import linear_model >>> reg = linear_model.Lasso(alpha=0.1) >>> reg.fit([[0, 0], [1, 1]], [0, 1]) Lasso(alpha=0.1) >>> reg.predict([[1, 1]]) array([0.8])\n\nThe function lasso_path is useful for lower-level tasks, as it computes the coefficients along the full path of possible values.\n\nExamples\n\nL1-based models for Sparse Signals\n\nCompressive sensing: tomography reconstruction with L1 prior (Lasso)\n\nCommon pitfalls in the interpretation of coefficients of linear models\n\nNote\n\nFeature selection with Lasso\n\nAs the Lasso regression yields sparse models, it can thus be used to perform feature selection, as detailed in L1-based feature selection.\n\nReferences#\n\nThe following two references explain the iterations used in the coordinate descent solver of scikit-learn, as well as the duality gap computation used for convergence control.\n\n“Regularization Path For Generalized linear Models by Coordinate Descent”, Friedman, Hastie & Tibshirani, J Stat Softw, 2010 (Paper).\n\n“An Interior-Point Method for Large-Scale L1-Regularized Least Squares,” S. J. Kim, K. Koh, M. Lustig, S. Boyd and D. Gorinevsky, in IEEE Journal of Selected Topics in Signal Processing, 2007 (Paper)\n\n1.1.3.1. Setting regularization parameter#\n\nThe alpha parameter controls the degree of sparsity of the estimated coefficients.\n\n1.1.3.1.1. Using cross-validation#\n\nscikit-learn exposes objects that set the Lasso alpha parameter by cross-validation: LassoCV and LassoLarsCV. LassoLarsCV is based on the Least Angle Regression algorithm explained below.\n\nFor high-dimensional datasets with many collinear features, LassoCV is most often preferable. However, LassoLarsCV has the advantage of exploring more relevant values of alpha parameter, and if the number of samples is very small compared to the number of features, it is often faster than LassoCV.\n\n1.1.3.1.2. Information-criteria based model selection#\n\nAlternatively, the estimator LassoLarsIC proposes to use the Akaike information criterion (AIC) and the Bayes Information criterion (BIC). It is a computationally cheaper alternative to find the optimal value of alpha as the regularization path is computed only once instead of k+1 times when using k-fold cross-validation.\n\nIndeed, these criteria are computed on the in-sample training set. In short, they penalize the over-optimistic scores of the different Lasso models by their flexibility (cf. to “Mathematical details” section below).\n\nHowever, such criteria need a proper estimation of the degrees of freedom of the solution, are derived for large samples (asymptotic results) and assume the correct model is candidates under investigation. They also tend to break when the problem is badly conditioned (e.g. more features than samples).\n\nExamples\n\nLasso model selection: AIC-BIC / cross-validation\n\nLasso model selection via information criteria\n\n1.1.3.1.3. AIC and BIC criteria#\n\nThe definition of AIC (and thus BIC) might differ in the literature. In this section, we give more information regarding the criterion computed in scikit-learn.\n\nMathematical details#\n\nThe AIC criterion is defined as:\n\n\\[AIC = -2 \\log(\\hat{L}) + 2 d\\]\n\nwhere \\(\\hat{L}\\) is the maximum likelihood of the model and \\(d\\) is the number of parameters (as well referred to as degrees of freedom in the previous section).\n\nThe definition of BIC replace the constant \\(2\\) by \\(\\log(N)\\):\n\n\\[BIC = -2 \\log(\\hat{L}) + \\log(N) d\\]\n\nwhere \\(N\\) is the number of samples.\n\nFor a linear Gaussian model, the maximum log-likelihood is defined as:\n\n\\[\\log(\\hat{L}) = - \\frac{n}{2} \\log(2 \\pi) - \\frac{n}{2} \\ln(\\sigma^2) - \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{2\\sigma^2}\\]\n\nwhere \\(\\sigma^2\\) is an estimate of the noise variance, \\(y_i\\) and \\(\\hat{y}_i\\) are respectively the true and predicted targets, and \\(n\\) is the number of samples.\n\nPlugging the maximum log-likelihood in the AIC formula yields:\n\n\\[AIC = n \\log(2 \\pi \\sigma^2) + \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{\\sigma^2} + 2 d\\]\n\nThe first term of the above expression is sometimes discarded since it is a constant when \\(\\sigma^2\\) is provided. In addition, it is sometimes stated that the AIC is equivalent to the \\(C_p\\) statistic . In a strict sense, however, it is equivalent only up to some constant and a multiplicative factor.\n\nAt last, we mentioned above that \\(\\sigma^2\\) is an estimate of the noise variance. In LassoLarsIC when the parameter noise_variance is not provided (default), the noise variance is estimated via the unbiased estimator defined as:\n\n\\[\\sigma^2 = \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{n - p}\\]\n\nwhere \\(p\\) is the number of features and \\(\\hat{y}_i\\) is the predicted target using an ordinary least squares regression. Note, that this formula is valid only when n_samples > n_features.\n\nReferences\n\n1.1.3.1.4. Comparison with the regularization parameter of SVM#\n\nThe equivalence between alpha and the regularization parameter of SVM, C is given by alpha = 1 / C or alpha = 1 / (n_samples * C), depending on the estimator and the exact objective function optimized by the model.\n\n1.1.4. Multi-task Lasso#\n\nThe MultiTaskLasso is a linear model that estimates sparse coefficients for multiple regression problems jointly: y is a 2D array, of shape (n_samples, n_tasks). The constraint is that the selected features are the same for all the regression problems, also called tasks.\n\nThe following figure compares the location of the non-zero entries in the coefficient matrix W obtained with a simple Lasso or a MultiTaskLasso. The Lasso estimates yield scattered non-zeros while the non-zeros of the MultiTaskLasso are full columns.\n\nFitting a time-series model, imposing that any active feature be active at all times.\n\nExamples\n\nJoint feature selection with multi-task Lasso\n\nMathematical details#\n\nMathematically, it consists of a linear model trained with a mixed \\(\\ell_1\\) \\(\\ell_2\\)-norm for regularization. The objective function to minimize is:\n\n\\[\\min_{W} { \\frac{1}{2n_{\\text{samples}}} ||X W - Y||_{\\text{Fro}} ^ 2 + \\alpha ||W||_{21}}\\]\n\nwhere \\(\\text{Fro}\\) indicates the Frobenius norm\n\n\\[||A||_{\\text{Fro}} = \\sqrt{\\sum_{ij} a_{ij}^2}\\]\n\nand \\(\\ell_1\\) \\(\\ell_2\\) reads\n\n\\[||A||_{2 1} = \\sum_i \\sqrt{\\sum_j a_{ij}^2}.\\]\n\nThe implementation in the class MultiTaskLasso uses coordinate descent as the algorithm to fit the coefficients.\n\n1.1.5. Elastic-Net#\n\nElasticNet is a linear regression model trained with both \\(\\ell_1\\) and \\(\\ell_2\\)-norm regularization of the coefficients. This combination allows for learning a sparse model where few of the weights are non-zero like Lasso, while still maintaining the regularization properties of Ridge. We control the convex combination of \\(\\ell_1\\) and \\(\\ell_2\\) using the l1_ratio parameter.\n\nElastic-net is useful when there are multiple features that are correlated with one another. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both.\n\nA practical advantage of trading-off between Lasso and Ridge is that it allows Elastic-Net to inherit some of Ridge’s stability under rotation.\n\nThe objective function to minimize is in this case\n\n\\[\\min_{w} { \\frac{1}{2n_{\\text{samples}}} ||X w - y||_2 ^ 2 + \\alpha \\rho ||w||_1 + \\frac{\\alpha(1-\\rho)}{2} ||w||_2 ^ 2}\\]\n\nThe class ElasticNetCV can be used to set the parameters alpha (\\(\\alpha\\)) and l1_ratio (\\(\\rho\\)) by cross-validation.\n\nExamples\n\nL1-based models for Sparse Signals\n\nLasso and Elastic Net\n\nFitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples\n\nReferences#\n\nThe following two references explain the iterations used in the coordinate descent solver of scikit-learn, as well as the duality gap computation used for convergence control.\n\n“Regularization Path For Generalized linear Models by Coordinate Descent”, Friedman, Hastie & Tibshirani, J Stat Softw, 2010 (Paper).\n\n“An Interior-Point Method for Large-Scale L1-Regularized Least Squares,” S. J. Kim, K. Koh, M. Lustig, S. Boyd and D. Gorinevsky, in IEEE Journal of Selected Topics in Signal Processing, 2007 (Paper)\n\n1.1.6. Multi-task Elastic-Net#\n\nThe MultiTaskElasticNet is an elastic-net model that estimates sparse coefficients for multiple regression problems jointly: Y is a 2D array of shape (n_samples, n_tasks). The constraint is that the selected features are the same for all the regression problems, also called tasks.\n\nMathematically, it consists of a linear model trained with a mixed \\(\\ell_1\\) \\(\\ell_2\\)-norm and \\(\\ell_2\\)-norm for regularization. The objective function to minimize is:\n\n\\[\\min_{W} { \\frac{1}{2n_{\\text{samples}}} ||X W - Y||_{\\text{Fro}}^2 + \\alpha \\rho ||W||_{2 1} + \\frac{\\alpha(1-\\rho)}{2} ||W||_{\\text{Fro}}^2}\\]\n\nThe implementation in the class MultiTaskElasticNet uses coordinate descent as the algorithm to fit the coefficients.\n\nThe class MultiTaskElasticNetCV can be used to set the parameters alpha (\\(\\alpha\\)) and l1_ratio (\\(\\rho\\)) by cross-validation.\n\n1.1.7. Least Angle Regression#\n\nLeast-angle regression (LARS) is a regression algorithm for high-dimensional data, developed by Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani. LARS is similar to forward stepwise regression. At each step, it finds the feature most correlated with the target. When there are multiple features having equal correlation, instead of continuing along the same feature, it proceeds in a direction equiangular between the features.\n\nThe advantages of LARS are:\n\nIt is numerically efficient in contexts where the number of features is significantly greater than the number of samples.\n\nIt is computationally just as fast as forward selection and has the same order of complexity as ordinary least squares.\n\nIt produces a full piecewise linear solution path, which is useful in cross-validation or similar attempts to tune the model.\n\nIf two features are almost equally correlated with the target, then their coefficients should increase at approximately the same rate. The algorithm thus behaves as intuition would expect, and also is more stable.\n\nIt is easily modified to produce solutions for other estimators, like the Lasso.\n\nThe disadvantages of the LARS method include:\n\nBecause LARS is based upon an iterative refitting of the residuals, it would appear to be especially sensitive to the effects of noise. This problem is discussed in detail by Weisberg in the discussion section of the Efron et al. (2004) Annals of Statistics article.\n\nThe LARS model can be used via the estimator Lars, or its low-level implementation lars_path or lars_path_gram.\n\n1.1.8. LARS Lasso#\n\nLassoLars is a lasso model implemented using the LARS algorithm, and unlike the implementation based on coordinate descent, this yields the exact solution, which is piecewise linear as a function of the norm of its coefficients.\n\n>>> from sklearn import linear_model >>> reg = linear_model.LassoLars(alpha=.1) >>> reg.fit([[0, 0], [1, 1]], [0, 1]) LassoLars(alpha=0.1) >>> reg.coef_ array([0.6..., 0. ])\n\nExamples\n\nLasso path using LARS\n\nThe Lars algorithm provides the full path of the coefficients along the regularization parameter almost for free, thus a common operation is to retrieve the path with one of the functions lars_path or lars_path_gram.\n\nMathematical formulation#\n\nThe algorithm is similar to forward stepwise regression, but instead of including features at each step, the estimated coefficients are increased in a direction equiangular to each one’s correlations with the residual.\n\nInstead of giving a vector result, the LARS solution consists of a curve denoting the solution for each value of the \\(\\ell_1\\) norm of the parameter vector. The full coefficients path is stored in the array coef_path_ of shape (n_features, max_features + 1). The first column is always zero.\n\nReferences\n\nOriginal Algorithm is detailed in the paper Least Angle Regression by Hastie et al.\n\n1.1.9. Orthogonal Matching Pursuit (OMP)#\n\nOrthogonalMatchingPursuit and orthogonal_mp implement the OMP algorithm for approximating the fit of a linear model with constraints imposed on the number of non-zero coefficients (ie. the \\(\\ell_0\\) pseudo-norm).\n\nBeing a forward feature selection method like Least Angle Regression, orthogonal matching pursuit can approximate the optimum solution vector with a fixed number of non-zero elements:\n\n\\[\\underset{w}{\\operatorname{arg\\,min\\,}} ||y - Xw||_2^2 \\text{ subject to } ||w||_0 \\leq n_{\\text{nonzero_coefs}}\\]\n\nAlternatively, orthogonal matching pursuit can target a specific error instead of a specific number of non-zero coefficients. This can be expressed as:\n\n\\[\\underset{w}{\\operatorname{arg\\,min\\,}} ||w||_0 \\text{ subject to } ||y-Xw||_2^2 \\leq \\text{tol}\\]\n\nOMP is based on a greedy algorithm that includes at each step the atom most highly correlated with the current residual. It is similar to the simpler matching pursuit (MP) method, but better in that at each iteration, the residual is recomputed using an orthogonal projection on the space of the previously chosen dictionary elements.\n\nExamples\n\nOrthogonal Matching Pursuit\n\nReferences#\n\nhttps://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\n\nMatching pursuits with time-frequency dictionaries, S. G. Mallat, Z. Zhang,\n\n1.1.10. Bayesian Regression#\n\nBayesian regression techniques can be used to include regularization parameters in the estimation procedure: the regularization parameter is not set in a hard sense but tuned to the data at hand.\n\nThis can be done by introducing uninformative priors over the hyper parameters of the model. The \\(\\ell_{2}\\) regularization used in Ridge regression and classification is equivalent to finding a maximum a posteriori estimation under a Gaussian prior over the coefficients \\(w\\) with precision \\(\\lambda^{-1}\\). Instead of setting lambda manually, it is possible to treat it as a random variable to be estimated from the data.\n\nTo obtain a fully probabilistic model, the output \\(y\\) is assumed to be Gaussian distributed around \\(X w\\):\n\n\\[p(y|X,w,\\alpha) = \\mathcal{N}(y|X w,\\alpha^{-1})\\]\n\nwhere \\(\\alpha\\) is again treated as a random variable that is to be estimated from the data.\n\nThe advantages of Bayesian Regression are:\n\nIt adapts to the data at hand.\n\nIt can be used to include regularization parameters in the estimation procedure.\n\nThe disadvantages of Bayesian regression include:\n\nInference of the model can be time consuming.\n\nReferences#\n\nA good introduction to Bayesian methods is given in C. Bishop: Pattern Recognition and Machine learning\n\nOriginal Algorithm is detailed in the book Bayesian learning for neural networks by Radford M. Neal\n\n1.1.10.1. Bayesian Ridge Regression#\n\nBayesianRidge estimates a probabilistic model of the regression problem as described above. The prior for the coefficient \\(w\\) is given by a spherical Gaussian:\n\n\\[p(w|\\lambda) = \\mathcal{N}(w|0,\\lambda^{-1}\\mathbf{I}_{p})\\]\n\nThe priors over \\(\\alpha\\) and \\(\\lambda\\) are chosen to be gamma distributions, the conjugate prior for the precision of the Gaussian. The resulting model is called Bayesian Ridge Regression, and is similar to the classical Ridge.\n\nThe parameters \\(w\\), \\(\\alpha\\) and \\(\\lambda\\) are estimated jointly during the fit of the model, the regularization parameters \\(\\alpha\\) and \\(\\lambda\\) being estimated by maximizing the log marginal likelihood. The scikit-learn implementation is based on the algorithm described in Appendix A of (Tipping, 2001) where the update of the parameters \\(\\alpha\\) and \\(\\lambda\\) is done as suggested in (MacKay, 1992). The initial value of the maximization procedure can be set with the hyperparameters alpha_init and lambda_init.\n\nThere are four more hyperparameters, \\(\\alpha_1\\), \\(\\alpha_2\\), \\(\\lambda_1\\) and \\(\\lambda_2\\) of the gamma prior distributions over \\(\\alpha\\) and \\(\\lambda\\). These are usually chosen to be non-informative. By default \\(\\alpha_1 = \\alpha_2 = \\lambda_1 = \\lambda_2 = 10^{-6}\\).\n\nBayesian Ridge Regression is used for regression:\n\n>>> from sklearn import linear_model >>> X = [[0., 0.], [1., 1.], [2., 2.], [3., 3.]] >>> Y = [0., 1., 2., 3.] >>> reg = linear_model.BayesianRidge() >>> reg.fit(X, Y) BayesianRidge()\n\nAfter being fitted, the model can then be used to predict new values:\n\n>>> reg.predict([[1, 0.]]) array([0.50000013])\n\nThe coefficients \\(w\\) of the model can be accessed:\n\n>>> reg.coef_ array([0.49999993, 0.49999993])\n\nDue to the Bayesian framework, the weights found are slightly different to the ones found by Ordinary Least Squares. However, Bayesian Ridge Regression is more robust to ill-posed problems.\n\nExamples\n\nCurve Fitting with Bayesian Ridge Regression\n\nReferences#\n\nSection 3.3 in Christopher M. Bishop: Pattern Recognition and Machine Learning, 2006\n\nDavid J. C. MacKay, Bayesian Interpolation, 1992.\n\nMichael E. Tipping, Sparse Bayesian Learning and the Relevance Vector Machine, 2001.\n\n1.1.10.2. Automatic Relevance Determination - ARD#\n\nThe Automatic Relevance Determination (as being implemented in ARDRegression) is a kind of linear model which is very similar to the Bayesian Ridge Regression, but that leads to sparser coefficients \\(w\\) .\n\nARDRegression poses a different prior over \\(w\\): it drops the spherical Gaussian distribution for a centered elliptic Gaussian distribution. This means each coefficient \\(w_{i}\\) can itself be drawn from a Gaussian distribution, centered on zero and with a precision \\(\\lambda_{i}\\):\n\n\\[p(w|\\lambda) = \\mathcal{N}(w|0,A^{-1})\\]\n\nwith \\(A\\) being a positive definite diagonal matrix and \\(\\text{diag}(A) = \\lambda = \\{\\lambda_{1},...,\\lambda_{p}\\}\\).\n\nIn contrast to the Bayesian Ridge Regression, each coordinate of \\(w_{i}\\) has its own standard deviation \\(\\frac{1}{\\lambda_i}\\). The prior over all \\(\\lambda_i\\) is chosen to be the same gamma distribution given by the hyperparameters \\(\\lambda_1\\) and \\(\\lambda_2\\).\n\nARD is also known in the literature as Sparse Bayesian Learning and Relevance Vector Machine . For a worked-out comparison between ARD and Bayesian Ridge Regression, see the example below.\n\nExamples\n\nComparing Linear Bayesian Regressors\n\nReferences\n\n1.1.11. Logistic regression#\n\nThe logistic regression is implemented in LogisticRegression. Despite its name, it is implemented as a linear model for classification rather than regression in terms of the scikit-learn/ML nomenclature. The logistic regression is also known in the literature as logit regression, maximum-entropy classification (MaxEnt) or the log-linear classifier. In this model, the probabilities describing the possible outcomes of a single trial are modeled using a logistic function.\n\nThis implementation can fit binary, One-vs-Rest, or multinomial logistic regression with optional \\(\\ell_1\\), \\(\\ell_2\\) or Elastic-Net regularization.\n\nNote\n\nRegularization\n\nRegularization is applied by default, which is common in machine learning but not in statistics. Another advantage of regularization is that it improves numerical stability. No regularization amounts to setting C to a very high value.\n\nNote\n\nLogistic Regression as a special case of the Generalized Linear Models (GLM)\n\nLogistic regression is a special case of Generalized Linear Models with a Binomial / Bernoulli conditional distribution and a Logit link. The numerical output of the logistic regression, which is the predicted probability, can be used as a classifier by applying a threshold (by default 0.5) to it. This is how it is implemented in scikit-learn, so it expects a categorical target, making the Logistic Regression a classifier.\n\nExamples\n\nL1 Penalty and Sparsity in Logistic Regression\n\nRegularization path of L1- Logistic Regression\n\nPlot multinomial and One-vs-Rest Logistic Regression\n\nMulticlass sparse logistic regression on 20newgroups\n\nMNIST classification using multinomial logistic + L1\n\n1.1.11.1. Binary Case#\n\nFor notational ease, we assume that the target \\(y_i\\) takes values in the set \\(\\{0, 1\\}\\) for data point \\(i\\). Once fitted, the predict_proba method of LogisticRegression predicts the probability of the positive class \\(P(y_i=1|X_i)\\) as\n\n\\[\\hat{p}(X_i) = \\operatorname{expit}(X_i w + w_0) = \\frac{1}{1 + \\exp(-X_i w - w_0)}.\\]\n\nAs an optimization problem, binary class logistic regression with regularization term \\(r(w)\\) minimizes the following cost function:\n\n(1)#\\[\\min_{w} \\frac{1}{S}\\sum_{i=1}^n s_i \\left(-y_i \\log(\\hat{p}(X_i)) - (1 - y_i) \\log(1 - \\hat{p}(X_i))\\right) + \\frac{r(w)}{S C}\\,,\\]\n\nwhere \\({s_i}\\) corresponds to the weights assigned by the user to a specific training sample (the vector \\(s\\) is formed by element-wise multiplication of the class weights and sample weights), and the sum \\(S = \\sum_{i=1}^n s_i\\).\n\nWe currently provide four choices for the regularization term \\(r(w)\\) via the penalty argument:\n\npenalty\n\n\\(r(w)\\)\n\nFor ElasticNet, \\(\\rho\\) (which corresponds to the l1_ratio parameter) controls the strength of \\(\\ell_1\\) regularization vs. \\(\\ell_2\\) regularization. Elastic-Net is equivalent to \\(\\ell_1\\) when \\(\\rho = 1\\) and equivalent to \\(\\ell_2\\) when \\(\\rho=0\\).\n\nNote that the scale of the class weights and the sample weights will influence the optimization problem. For instance, multiplying the sample weights by a constant \\(b>0\\) is equivalent to multiplying the (inverse) regularization strength C by \\(b\\).\n\n1.1.11.2. Multinomial Case#\n\nThe binary case can be extended to \\(K\\) classes leading to the multinomial logistic regression, see also log-linear model.\n\nNote\n\nIt is possible to parameterize a \\(K\\)-class classification model using only \\(K-1\\) weight vectors, leaving one class probability fully determined by the other class probabilities by leveraging the fact that all class probabilities must sum to one. We deliberately choose to overparameterize the model using \\(K\\) weight vectors for ease of implementation and to preserve the symmetrical inductive bias regarding ordering of classes, see . This effect becomes especially important when using regularization. The choice of overparameterization can be detrimental for unpenalized models since then the solution may not be unique, as shown in .\n\nMathematical details#\n\nLet \\(y_i \\in {1, \\ldots, K}\\) be the label (ordinal) encoded target variable for observation \\(i\\). Instead of a single coefficient vector, we now have a matrix of coefficients \\(W\\) where each row vector \\(W_k\\) corresponds to class \\(k\\). We aim at predicting the class probabilities \\(P(y_i=k|X_i)\\) via predict_proba as:\n\n\\[\\hat{p}_k(X_i) = \\frac{\\exp(X_i W_k + W_{0, k})}{\\sum_{l=0}^{K-1} \\exp(X_i W_l + W_{0, l})}.\\]\n\nThe objective for the optimization becomes\n\n\\[\\min_W -\\frac{1}{S}\\sum_{i=1}^n \\sum_{k=0}^{K-1} s_{ik} [y_i = k] \\log(\\hat{p}_k(X_i)) + \\frac{r(W)}{S C}\\,,\\]\n\nwhere \\([P]\\) represents the Iverson bracket which evaluates to \\(0\\) if \\(P\\) is false, otherwise it evaluates to \\(1\\).\n\nAgain, \\(s_{ik}\\) are the weights assigned by the user (multiplication of sample weights and class weights) with their sum \\(S = \\sum_{i=1}^n \\sum_{k=0}^{K-1} s_{ik}\\).\n\nWe currently provide four choices for the regularization term \\(r(W)\\) via the penalty argument, where \\(m\\) is the number of features:\n\npenalty\n\n\\(r(W)\\)\n\n1.1.11.3. Solvers#\n\nThe solvers implemented in the class LogisticRegression are “lbfgs”, “liblinear”, “newton-cg”, “newton-cholesky”, “sag” and “saga”:\n\nThe following table summarizes the penalties and multinomial multiclass supported by each solver:\n\nSolvers\n\nPenalties\n\n‘lbfgs’\n\n‘liblinear’\n\n‘newton-cg’\n\n‘newton-cholesky’\n\n‘sag’\n\n‘saga’\n\nL2 penalty\n\nyes\n\nno\n\nyes\n\nno\n\nyes\n\nyes\n\nL1 penalty\n\nno\n\nyes\n\nno\n\nno\n\nno\n\nyes\n\nElastic-Net (L1 + L2)\n\nno\n\nno\n\nno\n\nno\n\nno\n\nyes\n\nNo penalty (‘none’)\n\nyes\n\nno\n\nyes\n\nyes\n\nyes\n\nyes\n\nMulticlass support\n\nmultinomial multiclass\n\nyes\n\nno\n\nyes\n\nno\n\nyes\n\nyes\n\nBehaviors\n\nPenalize the intercept (bad)\n\nno\n\nyes\n\nno\n\nno\n\nno\n\nno\n\nFaster for large datasets\n\nno\n\nno\n\nno\n\nno\n\nyes\n\nyes\n\nRobust to unscaled datasets\n\nyes\n\nyes\n\nyes\n\nyes\n\nno\n\nno\n\nThe “lbfgs” solver is used by default for its robustness. For large datasets the “saga” solver is usually faster. For large dataset, you may also consider using SGDClassifier with loss=\"log_loss\", which might be even faster but requires more tuning.\n\n1.1.11.3.1. Differences between solvers#\n\nThere might be a difference in the scores obtained between LogisticRegression with solver=liblinear or LinearSVC and the external liblinear library directly, when fit_intercept=False and the fit coef_ (or) the data to be predicted are zeroes. This is because for the sample(s) with decision_function zero, LogisticRegression and LinearSVC predict the negative class, while liblinear predicts the positive class. Note that a model with fit_intercept=False and having many samples with decision_function zero, is likely to be a underfit, bad model and you are advised to set fit_intercept=True and increase the intercept_scaling.\n\nSolvers’ details#\n\nThe solver “liblinear” uses a coordinate descent (CD) algorithm, and relies on the excellent C++ LIBLINEAR library, which is shipped with scikit-learn. However, the CD algorithm implemented in liblinear cannot learn a true multinomial (multiclass) model; instead, the optimization problem is decomposed in a “one-vs-rest” fashion so separate binary classifiers are trained for all classes. This happens under the hood, so LogisticRegression instances using this solver behave as multiclass classifiers. For \\(\\ell_1\\) regularization sklearn.svm.l1_min_c allows to calculate the lower bound for C in order to get a non “null” (all feature weights to zero) model.\n\nThe “lbfgs”, “newton-cg” and “sag” solvers only support \\(\\ell_2\\) regularization or no regularization, and are found to converge faster for some high-dimensional data. Setting multi_class to “multinomial” with these solvers learns a true multinomial logistic regression model , which means that its probability estimates should be better calibrated than the default “one-vs-rest” setting.\n\nThe “sag” solver uses Stochastic Average Gradient descent . It is faster than other solvers for large datasets, when both the number of samples and the number of features are large.\n\nThe “saga” solver is a variant of “sag” that also supports the non-smooth penalty=\"l1\". This is therefore the solver of choice for sparse multinomial logistic regression. It is also the only solver that supports penalty=\"elasticnet\".\n\nThe “lbfgs” is an optimization algorithm that approximates the Broyden–Fletcher–Goldfarb–Shanno algorithm , which belongs to quasi-Newton methods. As such, it can deal with a wide range of different training data and is therefore the default solver. Its performance, however, suffers on poorly scaled datasets and on datasets with one-hot encoded categorical features with rare categories.\n\nThe “newton-cholesky” solver is an exact Newton solver that calculates the hessian matrix and solves the resulting linear system. It is a very good choice for n_samples >> n_features, but has a few shortcomings: Only \\(\\ell_2\\) regularization is supported. Furthermore, because the hessian matrix is explicitly computed, the memory usage has a quadratic dependency on n_features as well as on n_classes. As a consequence, only the one-vs-rest scheme is implemented for the multiclass case.\n\nFor a comparison of some of these solvers, see .\n\nReferences\n\nNote\n\nFeature selection with sparse logistic regression\n\nA logistic regression with \\(\\ell_1\\) penalty yields sparse models, and can thus be used to perform feature selection, as detailed in L1-based feature selection.\n\nNote\n\nP-value estimation\n\nIt is possible to obtain the p-values and confidence intervals for coefficients in cases of regression without penalization. The statsmodels package natively supports this. Within sklearn, one could use bootstrapping instead as well.\n\nLogisticRegressionCV implements Logistic Regression with built-in cross-validation support, to find the optimal C and l1_ratio parameters according to the scoring attribute. The “newton-cg”, “sag”, “saga” and “lbfgs” solvers are found to be faster for high-dimensional dense data, due to warm-starting (see Glossary).\n\n1.1.12. Generalized Linear Models#\n\nGeneralized Linear Models (GLM) extend linear models in two ways . First, the predicted values \\(\\hat{y}\\) are linked to a linear combination of the input variables \\(X\\) via an inverse link function \\(h\\) as\n\n\\[\\hat{y}(w, X) = h(Xw).\\]\n\nSecondly, the squared loss function is replaced by the unit deviance \\(d\\) of a distribution in the exponential family (or more precisely, a reproductive exponential dispersion model (EDM) ).\n\nThe minimization problem becomes:\n\n\\[\\min_{w} \\frac{1}{2 n_{\\text{samples}}} \\sum_i d(y_i, \\hat{y}_i) + \\frac{\\alpha}{2} ||w||_2^2,\\]\n\nwhere \\(\\alpha\\) is the L2 regularization penalty. When sample weights are provided, the average becomes a weighted average.\n\nThe following table lists some specific EDMs and their unit deviance :\n\nDistribution\n\nTarget Domain\n\nUnit Deviance \\(d(y, \\hat{y})\\)\n\nThe Probability Density Functions (PDF) of these distributions are illustrated in the following figure,\n\nThe Bernoulli distribution is a discrete probability distribution modelling a Bernoulli trial - an event that has only two mutually exclusive outcomes. The Categorical distribution is a generalization of the Bernoulli distribution for a categorical random variable. While a random variable in a Bernoulli distribution has two possible outcomes, a Categorical random variable can take on one of K possible categories, with the probability of each category specified separately.\n\nThe choice of the distribution depends on the problem at hand:\n\nIf the target values \\(y\\) are counts (non-negative integer valued) or relative frequencies (non-negative), you might use a Poisson distribution with a log-link.\n\nIf the target values are positive valued and skewed, you might try a Gamma distribution with a log-link.\n\nIf the target values seem to be heavier tailed than a Gamma distribution, you might try an Inverse Gaussian distribution (or even higher variance powers of the Tweedie family).\n\nIf the target values \\(y\\) are probabilities, you can use the Bernoulli distribution. The Bernoulli distribution with a logit link can be used for binary classification. The Categorical distribution with a softmax link can be used for multiclass classification.\n\nExamples of use cases#\n\nAgriculture / weather modeling: number of rain events per year (Poisson), amount of rainfall per event (Gamma), total rainfall per year (Tweedie / Compound Poisson Gamma).\n\nRisk modeling / insurance policy pricing: number of claim events / policyholder per year (Poisson), cost per event (Gamma), total cost per policyholder per year (Tweedie / Compound Poisson Gamma).\n\nCredit Default: probability that a loan can’t be paid back (Bernoulli).\n\nFraud Detection: probability that a financial transaction like a cash transfer is a fraudulent transaction (Bernoulli).\n\nPredictive maintenance: number of production interruption events per year (Poisson), duration of interruption (Gamma), total interruption time per year (Tweedie / Compound Poisson Gamma).\n\nMedical Drug Testing: probability of curing a patient in a set of trials or probability that a patient will experience side effects (Bernoulli).\n\nNews Classification: classification of news articles into three categories namely Business News, Politics and Entertainment news (Categorical).\n\nReferences\n\n1.1.12.1. Usage#\n\nTweedieRegressor implements a generalized linear model for the Tweedie distribution, that allows to model any of the above mentioned distributions using the appropriate power parameter. In particular:\n\npower = 0: Normal distribution. Specific estimators such as Ridge, ElasticNet are generally more appropriate in this case.\n\npower = 1: Poisson distribution. PoissonRegressor is exposed for convenience. However, it is strictly equivalent to TweedieRegressor(power=1, link='log').\n\npower = 2: Gamma distribution. GammaRegressor is exposed for convenience. However, it is strictly equivalent to TweedieRegressor(power=2, link='log').\n\npower = 3: Inverse Gaussian distribution.\n\nThe link function is determined by the link parameter.\n\nUsage example:\n\n>>> from sklearn.linear_model import TweedieRegressor >>> reg = TweedieRegressor(power=1, alpha=0.5, link='log') >>> reg.fit([[0, 0], [0, 1], [2, 2]], [0, 1, 2]) TweedieRegressor(alpha=0.5, link='log', power=1) >>> reg.coef_ array([0.2463..., 0.4337...]) >>> reg.intercept_ -0.7638...\n\nExamples\n\nPoisson regression and non-normal loss\n\nTweedie regression on insurance claims\n\nPractical considerations#\n\nThe feature matrix X should be standardized before fitting. This ensures that the penalty treats features equally.\n\nSince the linear predictor \\(Xw\\) can be negative and Poisson, Gamma and Inverse Gaussian distributions don’t support negative values, it is necessary to apply an inverse link function that guarantees the non-negativeness. For example with link='log', the inverse link function becomes \\(h(Xw)=\\exp(Xw)\\).\n\nIf you want to model a relative frequency, i.e. counts per exposure (time, volume, …) you can do so by using a Poisson distribution and passing \\(y=\\frac{\\mathrm{counts}}{\\mathrm{exposure}}\\) as target values together with \\(\\mathrm{exposure}\\) as sample weights. For a concrete example see e.g. Tweedie regression on insurance claims.\n\nWhen performing cross-validation for the power parameter of TweedieRegressor, it is advisable to specify an explicit scoring function, because the default scorer TweedieRegressor.score is a function of power itself.\n\n1.1.13. Stochastic Gradient Descent - SGD#\n\nStochastic gradient descent is a simple yet very efficient approach to fit linear models. It is particularly useful when the number of samples (and the number of features) is very large. The partial_fit method allows online/out-of-core learning.\n\nThe classes SGDClassifier and SGDRegressor provide functionality to fit linear models for classification and regression using different (convex) loss functions and different penalties. E.g., with loss=\"log\", SGDClassifier fits a logistic regression model, while with loss=\"hinge\" it fits a linear support vector machine (SVM).\n\nYou can refer to the dedicated Stochastic Gradient Descent documentation section for more details.\n\n1.1.14. Perceptron#\n\nThe Perceptron is another simple classification algorithm suitable for large scale learning. By default:\n\nIt does not require a learning rate.\n\nIt is not regularized (penalized).\n\nIt updates its model only on mistakes.\n\nThe last characteristic implies that the Perceptron is slightly faster to train than SGD with the hinge loss and that the resulting models are sparser.\n\nIn fact, the Perceptron is a wrapper around the SGDClassifier class using a perceptron loss and a constant learning rate. Refer to mathematical section of the SGD procedure for more details.\n\n1.1.15. Passive Aggressive Algorithms#\n\nThe passive-aggressive algorithms are a family of algorithms for large-scale learning. They are similar to the Perceptron in that they do not require a learning rate. However, contrary to the Perceptron, they include a regularization parameter C.\n\nFor classification, PassiveAggressiveClassifier can be used with loss='hinge' (PA-I) or loss='squared_hinge' (PA-II). For regression, PassiveAggressiveRegressor can be used with loss='epsilon_insensitive' (PA-I) or loss='squared_epsilon_insensitive' (PA-II).\n\nReferences#\n\n“Online Passive-Aggressive Algorithms” K. Crammer, O. Dekel, J. Keshat, S. Shalev-Shwartz, Y. Singer - JMLR 7 (2006)\n\n1.1.16. Robustness regression: outliers and modeling errors#\n\nRobust regression aims to fit a regression model in the presence of corrupt data: either outliers, or error in the model.\n\n1.1.16.1. Different scenario and useful concepts#\n\nThere are different things to keep in mind when dealing with data corrupted by outliers:\n\nOutliers in X or in y?\n\nOutliers in the y direction\n\nOutliers in the X direction\n\nFraction of outliers versus amplitude of error\n\nThe number of outlying points matters, but also how much they are outliers.\n\nSmall outliers\n\nLarge outliers\n\nAn important notion of robust fitting is that of breakdown point: the fraction of data that can be outlying for the fit to start missing the inlying data.\n\nNote that in general, robust fitting in high-dimensional setting (large n_features) is very hard. The robust models here will probably not work in these settings.\n\n1.1.16.2. RANSAC: RANdom SAmple Consensus#\n\nRANSAC (RANdom SAmple Consensus) fits a model from random subsets of inliers from the complete data set.\n\nRANSAC is a non-deterministic algorithm producing only a reasonable result with a certain probability, which is dependent on the number of iterations (see max_trials parameter). It is typically used for linear and non-linear regression problems and is especially popular in the field of photogrammetric computer vision.\n\nThe algorithm splits the complete input sample data into a set of inliers, which may be subject to noise, and outliers, which are e.g. caused by erroneous measurements or invalid hypotheses about the data. The resulting model is then estimated only from the determined inliers.\n\nExamples\n\nRobust linear model estimation using RANSAC\n\nRobust linear estimator fitting\n\nDetails of the algorithm#\n\nEach iteration performs the following steps:\n\nSelect min_samples random samples from the original data and check whether the set of data is valid (see is_data_valid).\n\nFit a model to the random subset (estimator.fit) and check whether the estimated model is valid (see is_model_valid).\n\nClassify all data as inliers or outliers by calculating the residuals to the estimated model (estimator.predict(X) - y) - all data samples with absolute residuals smaller than or equal to the residual_threshold are considered as inliers.\n\nSave fitted model as best model if number of inlier samples is maximal. In case the current estimated model has the same number of inliers, it is only considered as the best model if it has better score.\n\nThese steps are performed either a maximum number of times (max_trials) or until one of the special stop criteria are met (see stop_n_inliers and stop_score). The final model is estimated using all inlier samples (consensus set) of the previously determined best model.\n\nThe is_data_valid and is_model_valid functions allow to identify and reject degenerate combinations of random sub-samples. If the estimated model is not needed for identifying degenerate cases, is_data_valid should be used as it is called prior to fitting the model and thus leading to better computational performance.\n\nReferences#\n\nhttps://en.wikipedia.org/wiki/RANSAC\n\n“Random Sample Consensus: A Paradigm for Model Fitting with Applications to Image Analysis and Automated Cartography” Martin A. Fischler and Robert C. Bolles - SRI International (1981)\n\n“Performance Evaluation of RANSAC Family” Sunglok Choi, Taemin Kim and Wonpil Yu - BMVC (2009)\n\n1.1.16.3. Theil-Sen estimator: generalized-median-based estimator#\n\nThe TheilSenRegressor estimator uses a generalization of the median in multiple dimensions. It is thus robust to multivariate outliers. Note however that the robustness of the estimator decreases quickly with the dimensionality of the problem. It loses its robustness properties and becomes no better than an ordinary least squares in high dimension.\n\nExamples\n\nTheil-Sen Regression\n\nRobust linear estimator fitting\n\nTheoretical considerations#\n\nTheilSenRegressor is comparable to the Ordinary Least Squares (OLS) in terms of asymptotic efficiency and as an unbiased estimator. In contrast to OLS, Theil-Sen is a non-parametric method which means it makes no assumption about the underlying distribution of the data. Since Theil-Sen is a median-based estimator, it is more robust against corrupted data aka outliers. In univariate setting, Theil-Sen has a breakdown point of about 29.3% in case of a simple linear regression which means that it can tolerate arbitrary corrupted data of up to 29.3%.\n\nThe implementation of TheilSenRegressor in scikit-learn follows a generalization to a multivariate linear regression model using the spatial median which is a generalization of the median to multiple dimensions .\n\nIn terms of time and space complexity, Theil-Sen scales according to\n\n\\[\\binom{n_{\\text{samples}}}{n_{\\text{subsamples}}}\\]\n\nwhich makes it infeasible to be applied exhaustively to problems with a large number of samples and features. Therefore, the magnitude of a subpopulation can be chosen to limit the time and space complexity by considering only a random subset of all possible combinations.\n\nReferences\n\nAlso see the Wikipedia page\n\n1.1.16.4. Huber Regression#\n\nThe HuberRegressor is different to Ridge because it applies a linear loss to samples that are classified as outliers. A sample is classified as an inlier if the absolute error of that sample is lesser than a certain threshold. It differs from TheilSenRegressor and RANSACRegressor because it does not ignore the effect of the outliers but gives a lesser weight to them.\n\nExamples\n\nHuberRegressor vs Ridge on dataset with strong outliers\n\nMathematical details#\n\nThe loss function that HuberRegressor minimizes is given by\n\n\\[\\min_{w, \\sigma} {\\sum_{i=1}^n\\left(\\sigma + H_{\\epsilon}\\left(\\frac{X_{i}w - y_{i}}{\\sigma}\\right)\\sigma\\right) + \\alpha {||w||_2}^2}\\]\n\nwhere\n\n\\[\\begin{split}H_{\\epsilon}(z) = \\begin{cases} z^2, & \\text {if } |z| < \\epsilon, \\\\ 2\\epsilon|z| - \\epsilon^2, & \\text{otherwise} \\end{cases}\\end{split}\\]\n\nIt is advised to set the parameter epsilon to 1.35 to achieve 95% statistical efficiency.\n\nReferences\n\nPeter J. Huber, Elvezio M. Ronchetti: Robust Statistics, Concomitant scale estimates, pg 172\n\nThe HuberRegressor differs from using SGDRegressor with loss set to huber in the following ways.\n\nHuberRegressor is scaling invariant. Once epsilon is set, scaling X and y down or up by different values would produce the same robustness to outliers as before. as compared to SGDRegressor where epsilon has to be set again when X and y are scaled.\n\nHuberRegressor should be more efficient to use on data with small number of samples while SGDRegressor needs a number of passes on the training data to produce the same robustness.\n\nNote that this estimator is different from the R implementation of Robust Regression (https://stats.oarc.ucla.edu/r/dae/robust-regression/) because the R implementation does a weighted least squares implementation with weights given to each sample on the basis of how much the residual is greater than a certain threshold.\n\n1.1.17. Quantile Regression#\n\nQuantile regression estimates the median or other quantiles of \\(y\\) conditional on \\(X\\), while ordinary least squares (OLS) estimates the conditional mean.\n\nQuantile regression may be useful if one is interested in predicting an interval instead of point prediction. Sometimes, prediction intervals are calculated based on the assumption that prediction error is distributed normally with zero mean and constant variance. Quantile regression provides sensible prediction intervals even for errors with non-constant (but predictable) variance or non-normal distribution.\n\nBased on minimizing the pinball loss, conditional quantiles can also be estimated by models other than linear models. For example, GradientBoostingRegressor can predict conditional quantiles if its parameter loss is set to \"quantile\" and parameter alpha is set to the quantile that should be predicted. See the example in Prediction Intervals for Gradient Boosting Regression.\n\nMost implementations of quantile regression are based on linear programming problem. The current implementation is based on scipy.optimize.linprog.\n\nExamples\n\nQuantile regression\n\nMathematical details#\n\nAs a linear model, the QuantileRegressor gives linear predictions \\(\\hat{y}(w, X) = Xw\\) for the \\(q\\)-th quantile, \\(q \\in (0, 1)\\). The weights or coefficients \\(w\\) are then found by the following minimization problem:\n\n\\[\\min_{w} {\\frac{1}{n_{\\text{samples}}} \\sum_i PB_q(y_i - X_i w) + \\alpha ||w||_1}.\\]\n\nThis consists of the pinball loss (also known as linear loss), see also mean_pinball_loss,\n\n\\[\\begin{split}PB_q(t) = q \\max(t, 0) + (1 - q) \\max(-t, 0) = \\begin{cases} q t, & t > 0, \\\\ 0, & t = 0, \\\\ (q-1) t, & t < 0 \\end{cases}\\end{split}\\]\n\nand the L1 penalty controlled by parameter alpha, similar to Lasso.\n\nAs the pinball loss is only linear in the residuals, quantile regression is much more robust to outliers than squared error based estimation of the mean. Somewhat in between is the HuberRegressor.\n\nReferences#\n\nKoenker, R., & Bassett Jr, G. (1978). Regression quantiles. Econometrica: journal of the Econometric Society, 33-50.\n\nPortnoy, S., & Koenker, R. (1997). The Gaussian hare and the Laplacian tortoise: computability of squared-error versus absolute-error estimators. Statistical Science, 12, 279-300.\n\nKoenker, R. (2005). Quantile Regression. Cambridge University Press.\n\n1.1.18. Polynomial regression: extending linear models with basis functions#\n\nOne common pattern within machine learning is to use linear models trained on nonlinear functions of the data. This approach maintains the generally fast performance of linear methods, while allowing them to fit a much wider range of data.\n\nMathematical details#\n\nFor example, a simple linear regression can be extended by constructing polynomial features from the coefficients. In the standard linear regression case, you might have a model that looks like this for two-dimensional data:\n\n\\[\\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2\\]\n\nIf we want to fit a paraboloid to the data instead of a plane, we can combine the features in second-order polynomials, so that the model looks like this:\n\n\\[\\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2 + w_3 x_1 x_2 + w_4 x_1^2 + w_5 x_2^2\\]\n\nThe (sometimes surprising) observation is that this is still a linear model: to see this, imagine creating a new set of features\n\n\\[z = [x_1, x_2, x_1 x_2, x_1^2, x_2^2]\\]\n\nWith this re-labeling of the data, our problem can be written\n\n\\[\\hat{y}(w, z) = w_0 + w_1 z_1 + w_2 z_2 + w_3 z_3 + w_4 z_4 + w_5 z_5\\]\n\nWe see that the resulting polynomial regression is in the same class of linear models we considered above (i.e. the model is linear in \\(w\\)) and can be solved by the same techniques. By considering linear fits within a higher-dimensional space built with these basis functions, the model has the flexibility to fit a much broader range of data.\n\nHere is an example of applying this idea to one-dimensional data, using polynomial features of varying degrees:\n\nThis figure is created using the PolynomialFeatures transformer, which transforms an input data matrix into a new data matrix of a given degree. It can be used as follows:\n\n>>> from sklearn.preprocessing import PolynomialFeatures >>> import numpy as np >>> X = np.arange(6).reshape(3, 2) >>> X array([[0, 1], [2, 3], [4, 5]]) >>> poly = PolynomialFeatures(degree=2) >>> poly.fit_transform(X) array([[ 1., 0., 1., 0., 0., 1.], [ 1., 2., 3., 4., 6., 9.], [ 1., 4., 5., 16., 20., 25.]])\n\nThe features of X have been transformed from \\([x_1, x_2]\\) to \\([1, x_1, x_2, x_1^2, x_1 x_2, x_2^2]\\), and can now be used within any linear model.\n\nThis sort of preprocessing can be streamlined with the Pipeline tools. A single object representing a simple polynomial regression can be created and used as follows:\n\n>>> from sklearn.preprocessing import PolynomialFeatures >>> from sklearn.linear_model import LinearRegression >>> from sklearn.pipeline import Pipeline >>> import numpy as np >>> model = Pipeline([('poly', PolynomialFeatures(degree=3)), ... ('linear', LinearRegression(fit_intercept=False))]) >>> # fit to an order-3 polynomial data >>> x = np.arange(5) >>> y = 3 - 2 * x + x ** 2 - x ** 3 >>> model = model.fit(x[:, np.newaxis], y) >>> model.named_steps['linear'].coef_ array([ 3., -2., 1., -1.])\n\nThe linear model trained on polynomial features is able to exactly recover the input polynomial coefficients.\n\nIn some cases it’s not necessary to include higher powers of any single feature, but only the so-called interaction features that multiply together at most \\(d\\) distinct features. These can be gotten from PolynomialFeatures with the setting interaction_only=True.\n\nFor example, when dealing with boolean features, \\(x_i^n = x_i\\) for all \\(n\\) and is therefore useless; but \\(x_i x_j\\) represents the conjunction of two booleans. This way, we can solve the XOR problem with a linear classifier:\n\n>>> from sklearn.linear_model import Perceptron >>> from sklearn.preprocessing import PolynomialFeatures >>> import numpy as np >>> X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> y = X[:, 0] ^ X[:, 1] >>> y array([0, 1, 1, 0]) >>> X = PolynomialFeatures(interaction_only=True).fit_transform(X).astype(int) >>> X array([[1, 0, 0, 0], [1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 1, 1]]) >>> clf = Perceptron(fit_intercept=False, max_iter=10, tol=None, ... shuffle=False).fit(X, y)\n\nAnd the classifier “predictions” are perfect:\n\n>>> clf.predict(X) array([0, 1, 1, 0]) >>> clf.score(X, y) 1.0"
    }
}