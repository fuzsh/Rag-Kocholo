{
    "id": "correct_subsidiary_00061_1",
    "rank": 12,
    "data": {
        "url": "https://pcloadletter.co.uk/category/deployment/",
        "read_more_link": "",
        "language": "en",
        "title": "PC LOAD LETTER",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://pcloadletter.co.uk/wp-content/uploads/2010/05/copy-cropped-untitled211.jpg",
            "https://pcloadletter.co.uk/wp-content/uploads/2012/08/windows-photo-gallery.png?w=625",
            "https://pcloadletter.co.uk/wp-content/uploads/2011/12/winpe-with-wlan1.png?w=625",
            "https://www.paypal.com/en_US/i/btn/x-click-but04.gif",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-12-31T15:30:50+00:00",
        "summary": "",
        "meta_description": "Posts about Deployment written by patters",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "PC LOAD LETTER",
        "canonical_link": "https://pcloadletter.co.uk/category/deployment/",
        "text": "Simple VPN configurations can be deployed by Group Policy but EAP authentication settings cannot be configured like this, even using Windows 8.1 and Windows Server 2012 R2. Microsoft added some new PowerShell cmdlets to Windows 8.1 for configuring VPNs, but the worked examples do not appear to function for all the settings for PEAP connections, and they do not show a worked example of how you go about exporting and re-importing a connection’s XMLStream.\n\nDefining the XML as a block within the script itself, even assigning it as data type XML does not seem to work. Not being particularly accustomed to PowerShell, the following script took a while to get right. I assigned it as a laptop startup script by GPO. If I need to modify the connection in future I can increment the version number since the script checks the local machine Registry for that, and will not install if the desired version marker is already present.\n\n# VPN Connection EAP-PEAP VPN provisioning # patters 2013 # This script is loosely based on the EAP-TTLS one published by Microsoft at http://technet.microsoft.com/en-us/library/jj613766.aspx # The worked examples on that page and at http://technet.microsoft.com/en-us/library/jj554822.aspx # are rudimentary, and in some details for PEAP, incorrect. To set advanced options like the TrustedRootCAs and the # the server identity checking warning, you *must* export a GUI-authored config as XML. Configuring XML attributes alone # will not work because some of them are missing when creating a new connection, and adding them results in errors. # Check for marker in the Registry, and quit if found # Desired version is 1 $version = 1 $test = Get-ItemProperty \"HKLM:\\Software\\MyCompany\" \"MyCompany VPN\" -ErrorAction SilentlyContinue If ($test -eq $null) { $test = 0 } else { $test = $test.\"MyCompany VPN\" } If ($test -ge $version) {exit} # VPN Connection look-up to remove any previous installations $isTestVpn = $false $vpnConnections = Get-VpnConnection -AllUserConnection If($vpnConnections.Name -eq \"MyCompany VPN\") {Remove-VpnConnection -Name \"MyCompany VPN\" -AllUserConnection -Confirm:$false -Force} $vpnConnections = Get-VpnConnection If($vpnConnections.Name -eq \"MyCompany VPN\") {Remove-VpnConnection -Name \"MyCompany VPN\" -Confirm:$false -Force} Try { #------------------------------------------------- #The following section documents the attempts to get this working manually before I got importing/exporting of XML working # http://technet.microsoft.com/en-us/library/jj554822.aspx says to use \"New-EapConfiguration -Peap\" here, but is wrong #$a = New-EapConfiguration # Generate configuration XML for PEAP authentication method with EAP-MSCHAPv2 as its inner method #$b = New-EapConfiguration -Peap -VerifyServerIdentity -FastReconnect $true -TunnledEapAuthMethod $a.EapConfigXmlStream # Edit properties within the generated configuration XML #$c = $b.EapConfigXmlStream #$c.EapHostConfig.Config.Eap.EapType.ServerValidation.ServerNames = \"vpn.mycompany.com\" # Specify AddTrust Root CA for Comodo - This attribute is missing unless you create the connection using the GUI # The following appears to generate the XML correctly, but it won't be accepted by the Add-VpnConnection cmdlet #$c.EapHostConfig.Config.Eap.EapType.ServerValidation.SetAttribute(\"TrustedRootCA\",\"02 fa f3 e2 91 43 54 68 60 78 57 69 4d f5 e4 5b 68 85 18 68\") # PeapExtensions settings are nested XML objects so setting them as string datatype will fail # see http://www.vistax64.com/powershell/173859-xml-property-text.html #$c.EapHostConfig.Config.Eap.EapType.PeapExtensions.PerformServerValidation.\"#text\" = \"true\" #$c.EapHostConfig.Config.Eap.EapType.PeapExtensions.AcceptServerName.\"#text\" = \"true\" # Once again this attribute is missing unless the connection is created using the GUI. Adding it does not work #$c.EapHostConfig.Config.Eap.EapType.PeapExtensions.PeapExtensionsV2.AllowPromptingWhenServerCANotFound.\"#text\" = \"true\" # Create the VPN connection ‘MyCompany VPN’ with the EAP configuration XML generated above #Add-VpnConnection -Name \"MyCompany VPN\" -ServerAddress \"vpn.mycompany.com\" -TunnelType Sstp -EncryptionLevel Maximum -AuthenticationMethod Eap -EapConfigXmlStream $c -AllUserConnection #------------------------------------------------- # FORTUNATELY THERE IS AN EASIER WAY (once you figure out PowerShell XML – why couldn’t MS have shown a worked example in the docs)... # Create your VPN configuration entry manually then export its XML like so: #$exportXML = (Get-VpnConnection -Name \"My_VPN_Final\" -AllUserConnection).EapConfigXmlStream #$exportXML.Save(\"${env:temp}\\My_VPN_config.xml\") $importXML = New-Object XML $importXML.Load(\"\\\\mycompany.com\\data\\Software\\MyCompany VPN\\MyCompany VPN.xml\") Add-VpnConnection -Name \"MyCompany VPN\" -ServerAddress \"vpn.mycompany.com\" -TunnelType Sstp -EncryptionLevel Maximum -AuthenticationMethod Eap -EapConfigXmlStream $importXML -AllUserConnection # Leave a marker in the Registry If (-Not (Test-Path \"HKLM:\\Software\\MyCompany\")) {New-Item -Path \"HKLM:\\Software\\MyCompany\"} if (Get-ItemProperty \"HKLM:\\Software\\MyCompany\" \"MyCompany VPN\" -ErrorAction SilentlyContinue) { Set-ItemProperty -Path \"HKLM:\\Software\\MyCompany\" -Name \"MyCompany VPN\" -Value $version } else { New-ItemProperty -Path \"HKLM:\\Software\\MyCompany\" -Name \"MyCompany VPN\" -Value $version } } Catch { Write-Host \"Error in connection setup!\" Write-Host $_.Exception.Message Throw }\n\nThis script will build Windows PE 4.0 (for x86, or AMD64 or both) including scripts and drivers of your choosing, it will create ISO images with both BIOS and UEFI support, and will also upload the resulting WIM boot images to your WDS server automatically (and freshen them if they have been re-created). This reduces the tiresome task of boot image maintenance to just a couple of clicks.\n\nIt uses only the standard Microsoft Windows ADK tools, which is the new name for WAIK. Just save the code below as Build_WinPE.cmd and right-click on it to Run as Administrator. Notice the defined variables at the start, particularly the %SOURCE% folder. It supports using either the 32bit or the 64bit ADK, and only the Windows PE and Deployment Tools ADK components are required. The script expects the following folders:\n\n%SOURCE%\\scripts\\WinPE – any additional scripts (e.g. OS build scripts)\n\n%SOURCE%\\drivers\\WinPE-x86\\CURRENT – drivers\n\n%SOURCE%\\drivers\\WinPE-AMD64\\CURRENT\n\n%SOURCE%\\tools\\WinPE-x86 – optional tools such as GImageX, or apps from portableapps.com\n\n%SOURCE%\\tools\\WinPE-AMD64\n\nNotice the optional components section at lines 90-95. Modify this if you need your image to contain additional items, for instance PowerShell or .NET Framework 4.\n\nOne further observation is that Macs don’t seem to be able to boot this version of Windows PE. I’m not sure whether this is a GOP display driver issue, or whether only true UEFI firmwares are required (Macs are EFI which is an earlier specification). To carry out an unattended Windows 8 install on a Mac via BootCamp you will need to build a Windows PE 3.0 ISO since Macs can’t PXE boot.\n\nThere’s some more info about UEFI booting on 32bit architectures here – apparently UEFI 2.3.1 compliance is a requirement. My VAIO’s Insyde H2O UEFI firmware certainly seems to ignore EFI loaders.\n\n:: Build_WinPE.cmd :: :: patters 2012 :: :: This script will build x86 and AMD64 Windows PE 4.0, automatically :: collecting drivers from the relevant folders within the :: unattended installation, building WIM and ISO images, and :: will also upload the WIM images to the deployment server(s). :: :: DO NOT cancel this script in progress as you can end up with :: orphaned locks on files inside mounted WIM images which :: usually require a reboot of the server to clear. :: @echo off setlocal ENABLEDELAYEDEXPANSION ::variables set SOURCE=\\\\WDSSERVER\\unattended set PE_TEMP=C:\\temp ::WinPE feature pack locale set PL=en-US ::commma separated list for WDS_SERVERS set WDS_SERVERS=WDSSERVER1,WDSSERVER2 ::end variables if \"%PROCESSOR_ARCHITECTURE%\"==\"x86\" set PRGFILES32=%PROGRAMFILES% if \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" set PRGFILES32=%PROGRAMFILES(X86)% if not exist \"%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\*.*\" ( echo This script requires the Windows Assessment and Deployment Kit to be installed echo Download it from http://www.microsoft.com/en-us/download/details.aspx?id=30652 echo. pause goto :eof ) if \"%1\"==\"relaunch\" ( call :BUILD_WINPE %2 %3 %4 goto :eof ) if \"%1\"==\"unmount\" ( :: use this if you have a problem with the script and there are WIMs still mounted dism /Unmount-Wim /MountDir:\"%PE_TEMP%\\WinPE-x86\\mount\" /discard dism /Unmount-Wim /MountDir:\"%PE_TEMP%\\WinPE-AMD64\\mount\" /discard goto :eof ) :prompt cls set /P SELECTION=Build WinPE for which CPU architecture (AMD64, x86, both)? [AMD64]: if \"%SELECTION%\"==\"\" set SELECTION=AMD64 if \"%SELECTION%\"==\"amd64\" set SELECTION=AMD64 if \"%SELECTION%\"==\"X86\" set SELECTION=x86 if \"%SELECTION%\"==\"b\" set SELECTION=both if \"%SELECTION%\"==\"BOTH\" set SELECTION=both if \"%SELECTION%\"==\"AMD64\" ( start \"Building Windows PE for AMD64 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch AMD64 goto :eof ) if \"%SELECTION%\"==\"x86\" ( start \"Building Windows PE for x86 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x86 goto :eof ) if \"%SELECTION%\"==\"both\" ( ::opening both instances of this script simultaneously seems to cause race conditions with dism.exe start /wait \"Building Windows PE for x86 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x86 nopause start \"Building Windows PE for AMD64 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch AMD64 goto :eof ) goto :prompt :BUILD_WINPE set PE_ARCH=%1 set OSCDImgRoot=%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PROCESSOR_ARCHITECTURE%\\Oscdimg set WinPERoot=%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Windows Preinstallation Environment set DandIRoot=%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools set DISMRoot=%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PROCESSOR_ARCHITECTURE%\\DISM set PATH=%PATH%;%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PROCESSOR_ARCHITECTURE%\\Oscdimg set PATH=%PATH%;%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PROCESSOR_ARCHITECTURE%\\BCDBoot set PATH=%PATH%;%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PROCESSOR_ARCHITECTURE%\\DISM set PATH=%PATH%;%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Windows Preinstallation Environment echo on rd /s /q %PE_TEMP%\\WinPE-%PE_ARCH% call copype.cmd %PE_ARCH% %PE_TEMP%\\WinPE-%PE_ARCH% ::package path set PP=%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\%PE_ARCH%\\WinPE_OCs ::image path set IP=%PE_TEMP%\\WinPE-%PE_ARCH%\\mount echo on dism /Mount-Wim /WimFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\sources\\boot.wim\" /Index:1 /MountDir:\"%IP%\" dism /image:\"%IP%\" /Add-Package /PackagePath:\"%PP%\\WinPE-Scripting.cab\"^ /PackagePath:\"%PP%\\%PL%\\WinPE-Scripting_%PL%.cab\" /PackagePath:\"%PP%\\WinPE-WMI.cab\"^ /PackagePath:\"%PP%\\%PL%\\WinPE-WMI_%PL%.cab\" /PackagePath:\"%PP%\\WinPE-MDAC.cab\"^ /PackagePath:\"%PP%\\%PL%\\WinPE-MDAC_%PL%.cab\" /PackagePath:\"%PP%\\WinPE-HTA.cab\"^ /PackagePath:\"%PP%\\%PL%\\WinPE-HTA_%PL%.cab\" /PackagePath:\"%PP%\\WinPE-Dot3Svc.cab\"^ /PackagePath:\"%PP%\\%PL%\\WinPE-Dot3Svc_%PL%.cab\" dism /image:\"%IP%\" /Add-Driver /driver:\"%SOURCE%\\drivers\\WinPE-%PE_ARCH%\\CURRENT\" /Recurse copy \"%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PE_ARCH%\\BCDBoot\\bootsect.exe\" \"%IP%\\Windows\" copy /y \"%SOURCE%\\scripts\\WinPE\\*.*\" \"%IP%\\Windows\\System32\" copy \"%SOURCE%\\tools\\WinPE-%PE_ARCH%\\*.*\" \"%IP%\\Windows\\System32\" copy /y \"%PRGFILES32%\\Windows Kits\\8.0\\Assessment and Deployment Kit\\Deployment Tools\\%PE_ARCH%\\DISM\\imagex.exe\" \"%IP%\\Windows\\System32\" dism /Unmount-Wim /MountDir:\"%IP%\" /commit ::Mac OS BootCamp will look for autorun.inf in order to validate this disk as a Windows Installer CD ::adding this allows us to start unattended installs using WinPE date /T > \"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\autorun.inf\" ::bootable ISO includes both BIOS & EFI boot loaders oscdimg -m -o -u2 -udfver102 -bootdata:2#p0,e,b\"%PE_TEMP%\\WinPE-%PE_ARCH%\\fwfiles\\etfsboot.com\"#pEF,e,b\"%PE_TEMP%\\WinPE-%PE_ARCH%\\fwfiles\\efisys.bin\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\WinPE-40-%PE_ARCH%.iso\" @echo off ::rename the WIM file to avoid having multiple image files on the WDS server with the same filename ren \"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\sources\\boot.wim\" boot_%PE_ARCH%.wim if \"%PE_ARCH%\"==\"x86\" set WDS_ARCH=%PE_ARCH% if \"%PE_ARCH%\"==\"AMD64\" set WDS_ARCH=X64 for %%i in (%WDS_SERVERS%) do ( echo. echo Adding/updating boot image on WDS server: %%i :: try to add the image first, if that fails then replace existing wdsutil /Verbose /Progress /Add-Image /ImageFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\sources\\boot-40-%PE_ARCH%.wim\"^ /Server:%%i /ImageType:Boot /Name:\"Microsoft Windows PE 4.0 (%PE_ARCH%)\" || wdsutil /Verbose /Progress /Replace-Image^ /Image:\"Microsoft Windows PE 4.0 (%PE_ARCH%)\" /ImageType:Boot /Architecture:%WDS_ARCH% /ReplacementImage^ /Name:\"Microsoft Windows PE 4.0 (%PE_ARCH%)\" /ImageFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\sources\\boot-40-%PE_ARCH%.wim\"^ /Server:%%i echo. ) ::rename the WIM back again so bootable USB devices can be created ren \"%PE_TEMP%\\WinPE-%PE_ARCH%\\media\\sources\\boot-40-%PE_ARCH%.wim\" boot.wim echo ******************************************************************* echo WDS boot image(s) updated echo. echo A bootable ISO of this image has been created at: echo %PE_TEMP%\\WinPE-%PE_ARCH%\\WinPE-40-%PE_ARCH%.iso echo. echo To create a bootable USB key, use diskpart.exe to create a FAT32 partition echo and mark it active, then copy the contents of this folder to its root: echo %PE_TEMP%\\WinPE-%PE_ARCH%\\media echo. echo FAT32 is required for EFI support. echo. if \"%2\"==\"nopause\" goto :eof pause goto :eof\n\nFor many years I have used scripts of my own design to build workstations and to roll out software updates. At the time I created these I found that most of the tools which could accomplish these tasks were unwieldy. Group Policy software deployment in particular never really seemed fit for purpose since it extended login times so dramatically. My experience gained in a previous job spent packaging applications for deployment had taught me that all installed software populates consistent information in the Windows Registry, so in my current job I tended to audit this data directly via my scripts. This was saved into an SQL database from where it could be queried, or manipulated via a data source in Excel.\n\nI’m working my notice period at the moment ready for a new job I’ll start in October, and so I’m going over the stuff I have created in the current job in order to prepare my handover documents. Mindful of the dependency my current employer has on these custom scripts I decided to get a quote for a Dell KACE solution, thinking that since it’s a Virtual Appliance, and since there are only 150 PCs here it shouldn’t be too expensive – after all it’s only really providing what my scripts already do (workstation builds, drivers, software deployment, and auditing). But here’s the thing – they wanted something like £13,000! (I can’t recall the precise figure). To put it in context this figure is around one third of the cost of replacing all the workstations with new ones, or say half the annual salary of an IT support technician – quite out of the question.\n\nUnsurprisingly I have decided instead to simply tidy up my scripts to make them easier to use. Sure, you could accomplish these tasks with SCCM but that’s not free either. In an SME, why spend huge amounts of money on something that can be automated without much trouble using mechanisms that are built in. Heck, even the uninstall command line is stored in the registry for virtually all software – that’s how the Add/Remove Programs Control Panel works! And most software can be installed silently in the desired way provided you research the command line arguments to do so. It’s no accident that AppDeploy.com which was a great crowdsourced repository of this knowledge became KACE which was then acquired by Dell. It still exists, though the content doesn’t seem to be as well maintained as it was.\n\nI have used a startup script written in VBScript to keep software up to date on workstations. A startup script runs as the SYSTEM account so permissions are not an issue. Since I also maintain an unattended installation I already have a package folder with all the scripts to install each package. All I needed to code was a way to audit the Registry for each package and add some logic around that. Up until now, I had tended to write sections of the script specifically tailored for each package, and from there it’s not much of a stretch to apply packages to a workstation based on its OS version, or Active Directory OU or group membership. For the script I have published below, I have recreated this logic as a single function which can be invoked with a one line entry for each package (see the highlighted part) – everything else is taken care of. I hope it helps someone to save £13,000 :)\n\nSample script output\n\nRunning software package check for Adobe Flash Player... Registry data found at branch \"Adobe Flash Player ActiveX\" Comparing detected version 11.3.300.271 against desired version 11.4.402.265 Removing old version 11.3.300.271 Killing iexplore.exe Override detected, running \"u:\\packages\\flash\\uninstall_flash_player.exe -uninstall\" u:\\packages\\flash\\uninstall_flash_player.exe -uninstall Installing Adobe Flash Player 11.4.402.265 Running software package check for Paint.NET... Registry data found at branch \"{529125EF-E3AC-4B74-97E6-F688A7C0F1C0}\" Comparing detected version 3.60.0 against desired version 3.60.0 Paint.NET is already installed and up to date. Running software package check for Adobe Reader... Registry data found at branch \"{AC76BA86-7AD7-1033-7B44-AA0000000001}\" Comparing detected version 10.0.0 against desired version 10.1.4 Removing old version 10.0.0 Using UninstallString from the Registry, plus \"/qb-!\" MsiExec.exe /I{AC76BA86-7AD7-1033-7B44-AA0000000001} /qb-! Installing Adobe Reader 10.1.4 Running software package check for Photo Gallery... Registry data found at branch \"{60A1253C-2D51-4166-95C2-52E9CF4F8D64}\" Comparing detected version 16.4.3503.0728 against desired version 16.4.3503.0728 Photo Gallery is already installed and up to date. Running software package check for Mendeley Desktop... Installing Mendeley Desktop 1.6\n\nThe script\n\n'startup.vbs 'patters 2006-2012 Option Explicit Dim objNetwork, objShell, objReg, strKey, colProcess, objProcess, arrSubKeys Dim strFileServer Const HKEY_CURRENT_USER = &H80000001 Const HKEY_LOCAL_MACHINE = &H80000002 'set up objects Set objNetwork = CreateObject(\"WScript.Network\") Set objShell = CreateObject(\"WScript.Shell\") Set objReg = GetObject(\"winmgmts:{impersonationLevel=impersonate}!\\\\.\\root\\default:StdRegProv\") strFileServer = \"YOURSERVERHERE\" MapNetworkDrive \"U:\",\"unattended\" Package \"flash.cmd\", \"Adobe Flash Player\", \"11.4.402.265\", \"u:\\packages\\flash\\uninstall_flash_player.exe -uninstall\", False, True, \"iexplore.exe\" Package \"paintnet.cmd\", \"Paint.NET\", \"3.60.0\", \"/qb-!\", False, False, \"\" Package \"adobe.cmd\", \"Adobe Reader\", \"10.1.4\",\"/qb-!\",False, False, array(\"outlook.exe\",\"iexplore\") Package \"photogal.cmd\", \"Photo Gallery\", \"16.4.3503.0728\", \"/qb-!\", False, False, \"iexplore.exe\" Package \"mendeley.cmd\", \"Mendeley Desktop\", \"1.6\", \"/S\", True, False, \"winword.exe\" objNetwork.RemoveNetworkDrive \"U:\", True, True WScript.Echo VbCrLf & \"Finished software checks\" Function Package(strPackageName, strTargetDisplayName, strTargetVersion, strExtraUninstParams, boolExtraUninstQuotes, boolUninstForceOverride, ProcessToKill) '============================================================================= 'To understand this function you need to know that installed software packages 'will populate keys below these branches of the Registry: ' HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall ' HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall ' (the latter for 32bit software on 64bit Windows) 'This is the data that is mined when you look at Add/Remove Programs 'in the Control Panel 'strPackageName is the package script on your package server (e.g. flash.cmd) 'strTargetDisplayName can be a full or partial match of the Registry key 'DisplayName (matches from the left) ' \"Java(TM)\" would match \"Java(TM) 6 Update 5\" and all other versions 'strTargetVersion is the full version number from DisplayVersion in the Registry 'Each decimal point of precision will be compared in turn. 'If the Registry key DisplayVersion is not used by a package, the same number 'of digits is parsed from the right hand side of the DisplayName string 'strExtraUninstParams is used when you want to override the command line 'specified by QuietUninstallString in the Registry, or for when that value is 'missing for example, sometimes InnoSetup packages will specify the switch '/SILENT in QuietUninstallString, but you may need to override by appending '/VERYSILENT to the command line in UninstallString 'If neither QuietUninstallString and UninstallString are present, the script 'will use strExtraUninstParams as the full uninstall command line 'Some packages define UninstallString as a long filename but forget to 'surround it with quotes. You can correct this by setting 'boolExtraUninstQuotes = True ' Package \"mendeley.cmd\", \"Mendeley Desktop\", \"1.6\", \"/S\", True, False, \"winword.exe\" 'In some cases you may want to ignore the value of both QuietUninstallString 'and UninstallString and override the command completely. To do this, set 'boolUninstForceOverride to True ' Package \"flash.cmd\", \"Adobe Flash Player\", \"11.4.402.265\", \"u:\\packages\\flash\\uninstall_flash_player.exe -uninstall\", False, True, \"iexplore.exe\" 'Finally, ProcessToKill is a string or array containing the name(s) of any 'running process(es) you need to kill, if plugins are being installed for Word 'or Internet Explorer for instance. '============================================================================= Dim arrBranches, strBranch, boolRemoval, strActualDisplayName, strActualVersion Dim strQuietUninstall, strUninstall WScript.Echo VbCrLf & \"Running software package check for \" & strTargetDisplayName & \"...\" 'we need to iterate through both the 32 and 64bit uninstall branches of the Registry arrBranches = Array(\"SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\", \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\\") For Each strBranch In arrBranches 'firstly, remove old version of package if it's present objReg.EnumKey HKEY_LOCAL_MACHINE, strBranch, arrSubKeys If IsArray(arrSubkeys) Then For Each strKey in arrSubkeys objReg.GetStringValue HKEY_LOCAL_MACHINE, strBranch & strKey, \"DisplayName\", strActualDisplayName If Left(strActualDisplayName, Len(strTargetDisplayName)) = strTargetDisplayName Then 'we've found the target software package WScript.Echo \" Registry data found at branch \"\"\" & strKey & \"\"\"\" 'is there a version string (not all software will have one)? objReg.GetStringValue HKEY_LOCAL_MACHINE, strBranch & strKey, \"DisplayVersion\", strActualVersion If Not IsNull(strActualVersion) Then Else 'if there's no version string we'll try to grab the same number of chars from the right hand side of the DisplayName string strActualVersion = Right(strActualDisplayName, Len(strTargetVersion)) End If If (IsUpgradeNeeded (strActualVersion,strTargetVersion)) = True Then strQuietUninstall = \"\" WScript.Echo \" Removing old version \" & strActualVersion KillProcess ProcessToKill 'check the package's registry settings objReg.GetStringValue HKEY_LOCAL_MACHINE, strBranch & strKey, \"UninstallString\", strUninstall objReg.GetStringValue HKEY_LOCAL_MACHINE, strBranch & strKey, \"QuietUninstallString\", strQuietUninstall If Not strExtraUninstParams = \"\" Then 'Extra parameters were sent to the function If boolUninstForceOverride = True Then 'Entire uninstall command line was forced so use strExtraUninstParams, regardless of what's in the Registry WScript.Echo \" Override detected, running \"\"\" & strExtraUninstParams & \"\"\"\" WScript.Echo \" \" & strExtraUninstParams WinExec strExtraUninstParams ElseIf Not IsNull(strUninstall) Then 'use the basic UninstallString plus the additional parameters If boolExtraUninstQuotes = True Then strUninstall = \"\"\"\" & strUninstall & \"\"\"\" End If strUninstall = strUninstall & \" \" & strExtraUninstParams WScript.Echo \" Using UninstallString from the Registry, plus \"\"\" & strExtraUninstParams & \"\"\"\" WScript.Echo \" \" & strUninstall WinExec strUninstall Else 'no UninstallString was found in the Registry, so assume that strExtraUninstParams is the full removal command line WScript.Echo \" No UninstallString found, running \"\"\" & strExtraUninstParams & \"\"\"\" WScript.Echo \" \" & strExtraUninstParams WinExec strExtraUninstParams End If Else 'No extra parameters were sent to the function 'if there's already a value for QuietUninstallString then use that command line If Not IsNull(strQuietUninstall) Then WScript.Echo \" Using QuietUninstallString directly from the Registry\" WScript.Echo \" \" & strQuietUninstall WinExec strQuietUninstall ElseIf Not IsNull(strUninstall) Then 'no QuietUninstallString was found, fall back to UninstallString If boolExtraUninstQuotes = True Then strUninstall = \"\"\"\" & strUninstall & \"\"\"\" End If WScript.Echo \" Using UninstallString directly from the Registry\" WScript.Echo \" \" & strUninstall WinExec strUninstall Else WScript.Echo \" ERROR - this package doesn't seem to have any UninstallString defined - you'll need to send one to the Package function (see script source for details)\" Exit Function End If End If Else 'IsUpgradeNeeded (strActualVersion,strTargetVersion) is False 'package was detected, but version is >= than the one specified WScript.Echo \" \" & strTargetDisplayName & \" is already installed and up to date.\" Exit Function End If End If Next End If Next 'install package WScript.Echo \" Installing \" & strTargetDisplayName & \" \" & strTargetVersion KillProcess ProcessToKill WinExec \"U:\\packages\\\" & strPackageName End Function Function IsUpgradeNeeded(strVerActual,strVerDesired) Dim arrActualVersion, arrDesiredVersion, i 'Break software version down on decimal points arrActualVersion = split(strVerActual,\".\") arrDesiredVersion = split(strVerDesired,\".\") WScript.Echo \" Comparing detected version \" & strVerActual & \" against desired version \" & strVerDesired 'iterate, comparing each sub-version number starting from left For i = 0 To UBound(arrActualVersion) 'WScript.Echo \" comparing digit... is \" & arrActualVersion(i) & \" less than \" & arrDesiredVersion(i) If arrActualVersion(i) < arrDesiredVersion(i) Then 'installed version is out of date IsUpgradeNeeded = True Exit Function ElseIf arrActualVersion(i) > arrDesiredVersion(i) Then 'installed version is newer IsUpgradeNeeded = False Exit Function End If Next 'thus far the version numbers are the same, but there may be additional 'decimal points of precision in the desired version ' e.g. Adobe Reader 10.1.4 is newer than 10.1 If UBound(arrDesiredVersion) > UBound(arrActualVersion) Then IsUpgradeNeeded = True Else IsUpgradeNeeded = False End If End Function Function MapNetworkDrive(strDriveLetter, strSharePath) On Error Resume Next 'if the share name is not a UNC path, assume it's on the normal fileserver If Not Left(strSharePath,2) = \"\\\\\" Then strSharePath = \"\\\\\" & strFileServer & \"\\\" & strSharePath End If If objFSO.DriveExists(strDriveLetter) Then objNetwork.RemoveNetworkDrive strDriveLetter, True, True End If objNetwork.MapNetworkDrive strDriveLetter, strSharePath If Err.Number <> 0 Then WScript.Echo \"Error - \" & Err.Description Err.Clear End If On Error Goto 0 End Function Function WinExec(strExec) Dim objExec, eTime WinExec = True Set objExec = objShell.Exec(strExec) eTime = DateAdd(\"s\", 120, Now) Do While objExec.Status = 0 WScript.Sleep 1000 Loop End Function Function KillProcess(Process) Dim strProcessElement If IsArray(Process) Then For Each strProcessElement in Process KillIndividualProcess(strProcessElement) Next ElseIf Not Process = \"\" Then KillIndividualProcess(Process) End If End Function Function KillIndividualProcess(strProcess) Dim colProcess, objProcess Set colProcess = objWMI.ExecQuery(\"Select * from Win32_Process\") For Each objProcess in colProcess If LCase(objProcess.Name) = LCase(strProcess) Then WScript.Echo \" Killing \" & strProcess 'occasionally one parent process may kill all children leading to an object error 'so disable error handling temporarily On Error Resume Next objProcess.Terminate() On Error Goto 0 End If Next End Function\n\nThough it seems primarily pitched at home users, Microsoft’s Windows Photo Gallery is a useful image management tool even in a professional environment. It’s distributed as part of a suite of software known collectively as Windows Essentials 2012. I don’t understand why these tools aren’t included in Windows itself, but since they were until recently part of the Live family I’m presuming that they were designed to encourage the use of Microsoft’s online services. The apparent home user bias to the setup (a single installer for the whole suite, which downloads on demand, which asks for a Live sign-in, and which alters homepage and search provider) consequently makes Photo Gallery quite difficult to deploy and automate.\n\nFirstly the proper offline installer package is tucked away here on Microsoft’s website.\n\nThe next issue is that the silent install switches don’t seem to be officially documented by Microsoft. I was able to piece together the working command line using a TechNet forum post, this blog post about deploying the 2011 version, and some stuff on the MSFN forum.\n\nWhat held me up for a while is that you can no longer target only the Photo Gallery app – MovieMaker and Photo Gallery are bundled together with 2012. So I arrived at this one-liner which I invoke from a more complex workstation startup script, if it’s needed:\n\nstart /wait WLSetup-all.exe /q /r:n /NOToolbarCEIP /NOhomepage /nolaunch /nosearch /AppSelect:MovieMaker /log:%TEMP%\\WLEsetup.log\n\nThe HKCU registry customizations are pretty much the same as for the 2011 version, so to suppress the EULA and Microsoft account sign-in prompt, and to prevent nags about file type associations you will need to set the following in your login script (this is an extract from my VBScript one, but it’s pretty human-readable):\n\n... 'default preferences for Microsoft Photo Library (agree EULA, don't steal filetype associations, no Windows Live sign-in) objReg.CreateKey HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\" objReg.CreateKey HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Common\" objReg.SetStringValue HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Common\",\"TOUVersion\",\"16.0.0.0\" objReg.CreateKey HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Photo Gallery\" objReg.SetDWORDValue HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Photo Gallery\",\"SignInRemindersLeft\",\"0\" objReg.CreateKey HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Photo Gallery\\Library\" arrStringValues = Array(\".WDP\",\".BMP\",\".JFIF\",\".JPEG\",\".JPE\",\".JPG\",\".PNG\",\".TIF\",\".DIB\",\".TIFF\",\".ICO\") objReg.SetMultiStringValue HKEY_CURRENT_USER,\"Software\\Microsoft\\Windows Live\\Photo Gallery\\Library\", \"DontShowAssociationsDialogExtensions\", arrStringValues ...\n\nTo install on a Windows 8 workstation you’ll need the .Net Framework 3.5 “feature” to be installed, which isn’t there by default (Control Panel > Programs > Uninstall a program > Turn Windows Features on or off). This is problematic if you’re using WSUS – the attempt to download the update will fail with error 0x800f0906. Microsoft have an MDSN article about this, but the prescribed fix of using DISM to fetch the feature from the install media didn’t work for me on Windows 8 Enterprise. I had to remove my PC from an OU which inherits WSUS settings, run gpupdate /force then try again, this time successfully.\n\nIn my organization, the requirement for Photo Gallery is for users to interact with a centralized image library. This is stored on a Window 2008 R2 server, and I discovered that I could not add this folder to the Pictures library unless it was indexed on the server side (well, without enabling offline folders – which I don’t want). The relevant information on this topic can be found in this Technet post. In summary, you need to enable the Windows Search Service on the file server, which is a “Role Service” under the File Services role in Server Manager.\n\nThe missing piece of the puzzle so far is how to programmatically add this image repository location to each user’s Pictures library. I found a page about this, though the tools did not seem to actually work. Admittedly it’s a few years old, so maybe there are some more official tools now. More research to follow…\n\nIt’s useful to have wifi support with WPA/WPA2 in Windows PE for occasions where you may want to perform an OS install or a salvage on a machine without ethernet built-in: for instance a MacBook Air running Windows or a Sony Vaio P when you don’t have the breakout dongle to hand.\n\nWhen I started researching wifi support I found that the people who had clearly got it working seemed to be unwilling to share their work. One tool for the job, Holger’s PE Network Manager did not work for me at all, and judging from the dates of the files it had been created for older versions of Windows PE than the current one. There are many third party Windows PE ‘builder’ apps out there that completely replace the official Microsoft WAIK tools. However these seem more aimed at hobbyists than pros and tend to over complicate by adding features that a deployment pro does not really need. Since they’re not-so-trustworthy compiled binaries I don’t feel comfortable using them for work purposes. I decided to carefully work out for myself which registry entries and which additional files are required. There are surprisingly few.\n\nThe following unified script will use the standard WAIK tools to create both x86 and x64 builds, or either one individually, and is designed to be run by double-clicking it. Notice the defined variables at the start, particularly the %SOURCE% folder. The script expects the following folders:\n\n%SOURCE%\\scripts\\WinPE – OS build scripts, wifi config XML, optional CA certificates\n\n%SOURCE%\\drivers\\WinPE-x86\\CURRENT – drivers\n\n%SOURCE%\\drivers\\WinPE-x64\\CURRENT\n\n%SOURCE%\\tools\\WinPE-x86 – optional tools such as GImageX, or apps from portableapps.com\n\n%SOURCE%\\tools\\WinPE-x64\n\n%SOURCE%\\tools\\WinPE-x86\\WLAN – the WLAN system files see highlighted section in main script below\n\n%SOURCE%\\tools\\WinPE-x64\\WLAN\n\nIt also requires your WAIK installation to be updated to Windows PE 3.1 using the WAIK supplement for Windows 7 SP1.\n\nI had originally wanted to connect WinPE clients to a WPA-Enterprise network but although Windows PE now supports 802.1x, it appears to work only for wired connections (see my comment on that post).\n\nThere is no GUI to manage the WLAN service, but I did find the necessary registry mod to enable the hooks already present in netsh.exe. You will need to use a working Windows 7 PC which is configured for the WLAN of your choice, then export its profile. You cannot connect to a wifi network in Windows PE without having done this. The PSK must not be encrypted since it will be imported onto a different machine (you need to run this with Administrator privileges or else the key parameter will be ignored):\n\nnetsh wlan show profiles netsh wlan export profile name=\"YOURWLANSSIDHERE\" folder=\"C:\\temp\" key=clear\n\nCopy this XML file into the folder %SOURCE%\\scripts\\WinPE in the build tree. When Windows PE boots, you simply type wifi. This wifi.cmd script which is built by the main script will automatically import any XML profiles, list the available wifi networks, and display some example netsh syntax:\n\nnetsh wlan connect name=YOURWLANSSIDHERE ssid=YOURWLANSSIDHERE\n\nThe script\n\nSave as %SOURCE%\\scripts\\Build_WinPE.cmd\n\n:: Build_WinPE.cmd :: :: This script will build x86 and x64 Windows PE, automatically :: collecting drivers from the relevant folders within the :: unattended installation, building WIM and ISO images, and :: will also upload the WIM images to the deployment server(s). :: :: DO NOT cancel this script in progress as you can end up with :: orphaned locks on files inside mounted WIM images which :: usually require a reboot of the server to clear. :: @echo off setlocal ENABLEDELAYEDEXPANSION ::variables set SOURCE=G:\\unattended set PE_TEMP=C:\\temp ::WinPE feature pack locale set PL=en-US ::commma separated list for WDS_SERVERS set WDS_SERVERS=FILESERVER1,FILESERVER2 ::end variables if not exist \"C:\\Program Files\\Windows AIK\\Tools\\PETools\\*.*\" ( echo This script requires the Windows Automatic Install Kit to be installed echo Download it from http://www.microsoft.com/download/en/details.aspx?id=5753 echo. pause goto :eof ) if \"%1\"==\"relaunch\" ( call :BUILD_WINPE %2 %3 %4 goto :eof ) if \"%1\"==\"unmount\" ( :: use this if you have a problem with the script and there are WIMs still mounted dism /Unmount-Wim /MountDir:\"%PE_TEMP%\\WinPE-x86\\mount\" /discard dism /Unmount-Wim /MountDir:\"%PE_TEMP%\\WinPE-x64\\mount\" /discard goto :eof ) :prompt cls set /P SELECTION=Build WinPE for which CPU architecture (x64, x86, both)? [x64]: if \"%SELECTION%\"==\"\" set SELECTION=x64 if \"%SELECTION%\"==\"x64\" ( start \"Building Windows PE for x64 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x64 amd64 goto :eof ) if \"%SELECTION%\"==\"x86\" ( start \"Building Windows PE for x86 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x86 i386 goto :eof ) if \"%SELECTION%\"==\"b\" set SELECTION=both if \"%SELECTION%\"==\"both\" ( ::opening both instances of this script simultaneously seems to cause race conditions with dism.exe start /wait \"Building Windows PE for x86 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x86 i386 nopause start \"Building Windows PE for x64 - NEVER CANCEL THIS SCRIPT IN PROGRESS\" cmd /c \"%0\" relaunch x64 amd64 goto :eof ) goto :prompt :BUILD_WINPE set PE_ARCH=%1 set PE_ARCH_LONG=%2 echo on set PATH=%PATH%;C:\\Program Files\\Windows AIK\\Tools\\PETools\\;C:\\Program Files\\Windows AIK\\Tools\\%PROCESSOR_ARCHITECTURE% set PATH=%PATH%;C:\\Program Files\\Windows AIK\\Tools\\Servicing rd /s /q %PE_TEMP%\\WinPE-%PE_ARCH% ::Microsoft haven't used consistent naming in WAIK if \"%PE_ARCH%\"==\"x86\" set WAIK_ARCH=%PE_ARCH% if \"%PE_ARCH%\"==\"x64\" set WAIK_ARCH=%PE_ARCH_LONG% call copype.cmd %WAIK_ARCH% %PE_TEMP%\\WinPE-%PE_ARCH% ::package path set PP=%ProgramFiles%\\Windows AIK\\Tools\\PETools\\%WAIK_ARCH%\\WinPE_FPs ::image path set IP=%PE_TEMP%\\WinPE-%PE_ARCH%\\mount echo on dism /Mount-Wim /WimFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\winpe.wim\" /Index:1 /MountDir:\"%IP%\" dism /image:\"%IP%\" /Add-Package /PackagePath:\"%PP%\\winpe-scripting.cab\" /PackagePath:\"%PP%\\%PL%\\winpe-scripting_%PL%.cab\" /PackagePath:\"%PP%\\winpe-wmi.cab\" /PackagePath:\"%PP%\\%PL%\\winpe-wmi_%PL%.cab\" /PackagePath:\"%PP%\\winpe-mdac.cab\" /PackagePath:\"%PP%\\%PL%\\winpe-mdac_%PL%.cab\" /PackagePath:\"%PP%\\WinPE-HTA.cab\" /PackagePath:\"%PP%\\%PL%\\WinPE-HTA_%PL%.cab\" /PackagePath:\"%PP%\\WINPE-DOT3SVC.CAB\" /PackagePath:\"%PP%\\%PL%\\WINPE-DOT3SVC_%PL%.CAB\" dism /image:\"%IP%\" /Add-Driver /driver:\"%SOURCE%\\drivers\\WinPE-%PE_ARCH%\\CURRENT\" /Recurse copy \"%ProgramFiles%\\Windows AIK\\Tools\\PETools\\%WAIK_ARCH%\\bootsect.exe\" \"%IP%\\Windows\" copy /y \"%SOURCE%\\scripts\\WinPE\\*.*\" \"%IP%\\Windows\\System32\" copy \"%SOURCE%\\tools\\WinPE-%PE_ARCH%\\*.*\" \"%IP%\\Windows\\System32\" copy \"%ProgramFiles%\\Windows AIK\\Tools\\%WAIK_ARCH%\\*.*\" \"%IP%\\Windows\\System32\" ::add WLAN components reg load HKLM\\PE-BUILD-SYSTEM \"%IP%\\Windows\\System32\\config\\SYSTEM\" reg load HKLM\\PE-BUILD-SOFTWARE \"%IP%\\Windows\\System32\\config\\SOFTWARE\" set KEY=HKLM\\PE-BUILD-SYSTEM\\ControlSet001\\Enum\\Root\\LEGACY_WLANSVC reg add %KEY% /v NextInstance /t REG_DWORD /d 1 /f reg add %KEY%\\0000 /v Service /t REG_SZ /d Wlansvc /f reg add %KEY%\\0000 /v Legacy /t REG_DWORD /d 1 /f reg add %KEY%\\0000 /v ConfigFlags /t REG_DWORD /d 0 /f reg add %KEY%\\0000 /v Class /t REG_SZ /d LegacyDriver /f reg add %KEY%\\0000 /v ClassGUID /t REG_SZ /d {8ECC055D-047F-11D1-A537-0000F8753ED1} /f reg add %KEY%\\0000 /v DeviceDesc /t REG_SZ /d \"@%%SystemRoot%%\\System32\\wlansvc.dll,-257\" /f set KEY=HKLM\\PE-BUILD-SYSTEM\\ControlSet001\\services\\wlansvc reg add %KEY% /v DisplayName /t REG_SZ /d \"@%%SystemRoot%%\\System32\\wlansvc.dll,-257\" /f reg add %KEY% /v ErrorControl /t REG_DWORD /d 1 /f reg add %KEY% /v Group /t REG_SZ /d TDI /f reg add %KEY% /v ImagePath /t REG_EXPAND_SZ /d \"%%SystemRoot%%\\system32\\svchost.exe -k LocalSystemNetworkRestricted\" /f reg add %KEY% /v Start /t REG_DWORD /d 2 /f reg add %KEY% /v Type /t REG_DWORD /d 32 /f reg add %KEY% /v Description /t REG_SZ /d \"@%%SystemRoot%%\\System32\\wlansvc.dll,-258\" /f reg add %KEY% /v DependOnService /t REG_MULTI_SZ /d \"nativewifip\\0RpcSs\\0Ndisuio\\0Eaphost\" /f reg add %KEY% /v ObjectName /t REG_SZ /d LocalSystem /f reg add %KEY% /v ServiceSidType /t REG_DWORD /d 1 /f reg add %KEY% /v RequiredPrivileges /t REG_MULTI_SZ /d \"SeChangeNotifyPrivilege\\0SeImpersonatePrivilege\\0SeAuditPrivilege\\0SeTcbPrivilege\\0SeDebugPrivilege\" /f reg add %KEY% /v FailureActions /t REG_BINARY /d 2c0100000000000000000000030000001400000001000000c0d4010001000000e09304000000000000000000 /f reg add %KEY%\\Enum /v 0 /t REG_SZ /d \"Root\\LEGACY_WLANSVC\\0000\" /f reg add %KEY%\\Enum /v Count /t REG_DWORD /d 1 /f reg add %KEY%\\Enum /v NextInstance /t REG_DWORD /d 1 /f reg add %KEY%\\Parameters /v ServiceDll /t REG_EXPAND_SZ /d \"%%SystemRoot%%\\System32\\wlansvc.dll\" /f reg add %KEY%\\Parameters /v ServiceDllUnloadOnStop /t REG_DWORD /d 1 /f reg add %KEY%\\Parameters /v ServiceMain /t REG_SZ /d WlanSvcMain /f reg add HKLM\\PE-BUILD-SOFTWARE\\Microsoft\\NetSh /v wlancfg /t REG_SZ /d wlancfg.dll /f call :REG_MULTI_SZ-add \"HKLM\\PE-BUILD-SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" LocalSystemNetworkRestricted wlansvc xcopy /s \"%SOURCE%\\tools\\WinPE-%PE_ARCH%\\WLAN\\*.*\" \"%IP%\\Windows\" @echo off :: These are the files that are required for WLAN (take them from Windows 7 machines of both CPU archs) :: Put them in %SOURCE%\\tools\\WinPE-%PE_ARCH%\\WLAN and create the same relative folder structure from C:\\Windows onwards :: so the file C:\\Windows\\inf\\netnwifi.inf is copied to %SOURCE%\\tools\\WinPE-%PE_ARCH%\\WLAN\\inf\\netnwifi.inf :: C:\\Windows\\inf\\netnwifi.inf :: C:\\Windows\\inf\\netvwififlt.inf :: C:\\Windows\\inf\\netvwifimp.inf :: C:\\Windows\\l2schemas\\wlan_policy_v1.xsd :: C:\\Windows\\l2schemas\\wlan_profile_v1.xsd :: C:\\Windows\\l2schemas\\wlanap_profile_v1.xsd :: C:\\Windows\\schemas\\availablenetwork\\availablenetworkinfo.xsd :: C:\\Windows\\system32\\certutil.exe :: C:\\Windows\\system32\\wlanapi.dll :: C:\\Windows\\system32\\wlancfg.dll :: C:\\Windows\\system32\\wlanhlp.dll :: C:\\Windows\\system32\\wlanmsm.dll :: C:\\Windows\\system32\\wlansec.dll :: C:\\Windows\\system32\\wlansvc.dll :: C:\\Windows\\system32\\wlanui.dll :: C:\\Windows\\system32\\wlgpclnt.dll :: C:\\Windows\\system32\\drivers\\nwifi.sys :: C:\\Windows\\system32\\drivers\\vwififlt.sys :: C:\\Windows\\system32\\drivers\\vwifimp.sys :: C:\\Windows\\system32\\en-US\\certutil.exe.mui (or your locale's equivalent) :: C:\\Windows\\system32\\en-us\\wlanapi.dll.mui :: C:\\Windows\\system32\\en-us\\wlancfg.dll.mui :: C:\\Windows\\system32\\en-us\\wlansvc.dll.mui :: C:\\Windows\\system32\\en-us\\wlanui.dll.mui :: C:\\Windows\\system32\\en-us\\wlgpclnt.dll.mui echo on reg unload HKLM\\PE-BUILD-SYSTEM reg unload HKLM\\PE-BUILD-SOFTWARE :: build wifi.cmd ( echo @echo off echo drvload X:\\WINDOWS\\Inf\\netvwifimp.inf echo drvload X:\\WINDOWS\\Inf\\netvwififlt.inf echo drvload X:\\WINDOWS\\Inf\\netnwifi.inf echo netcfg -c s -i ms_nativewifip echo echo Importing detected CA certificate^(s^). echo for %%%%i in ^(*.cer^) do certutil -addstore root %%%%i echo echo. echo net start dot3svc echo net start wlansvc echo for %%%%i in ^(\"Wireless Network Connection*.xml\"^) do netsh wlan add profile filename=\"%%%%i\" echo netsh wlan show networks echo echo. echo echo use \"netsh wlan\" to manage the wifi connection like so: echo echo netsh wlan connect name=YOURWLANHERE ssid=YOURWLANHERE echo echo ipconfig /renew echo echo. ) > \"%IP%\\Windows\\System32\\wifi.cmd\" dism /Unmount-Wim /MountDir:\"%IP%\" /commit imagex /export /boot /compress fast \"%PE_TEMP%\\WinPE-%PE_ARCH%\\winpe.wim\" 1 \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\sources\\boot.wim\" @echo off ::Mac OS BootCamp will look for autorun.inf in order to validate this disk as a Windows Installer CD ::adding this allows us to start unattended installs using WinPE date /T > \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\autorun.inf\" ::x64 bootable ISO includes both BIOS & EFI boot loaders if \"%PE_ARCH%\" == \"x64\" ( set CD_CMD=oscdimg -m -o -u2 -udfver102 -bootdata:2#p0,e,b\"%PE_TEMP%\\WinPE-%PE_ARCH%\\etfsboot.com\"#pEF,e,b\"%PE_TEMP%\\WinPE-%PE_ARCH%\\efisys.bin\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\winpe_%PE_ARCH_LONG%.iso\" ) else ( set CD_CMD=oscdimg -n -b\"%PE_TEMP%\\WinPE-%PE_ARCH%\\etfsboot.com\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\" \"%PE_TEMP%\\WinPE-%PE_ARCH%\\winpe_%PE_ARCH_LONG%.iso\" ) echo on %CD_CMD% @echo off ::rename the WIM file to avoid having multiple image files on the WDS server with the same filename ren \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\sources\\boot.wim\" boot_%PE_ARCH_LONG%.wim del \"%PE_TEMP%\\WinPE-%PE_ARCH%\\winpe.wim\" for %%i in (%WDS_SERVERS%) do ( echo. echo Adding/updating boot image on WDS server: %%i :: try to add the image first, if that fails then replace existing wdsutil /Verbose /Progress /Add-Image /ImageFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\sources\\boot_%PE_ARCH_LONG%.wim\" /Server:%%i /ImageType:Boot /Name:\"Microsoft Windows PE (%PE_ARCH%)\" || wdsutil /Verbose /Progress /Replace-Image /Image:\"Microsoft Windows PE (%PE_ARCH%)\" /ImageType:Boot /Architecture:%PE_ARCH% /ReplacementImage /Name:\"Microsoft Windows PE (%PE_ARCH%)\" /ImageFile:\"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\sources\\boot_%PE_ARCH_LONG%.wim\" /Server:%%i echo. ) ::rename the WIM back again so bootable USB devices can be created ren \"%PE_TEMP%\\WinPE-%PE_ARCH%\\ISO\\sources\\boot_%PE_ARCH_LONG%.wim\" boot.wim echo ******************************************************************* echo WDS boot image(s) updated echo. echo A bootable ISO of this image has been created at: echo %PE_TEMP%\\WinPE-%PE_ARCH%\\winpe_%PE_ARCH_LONG%.iso echo. echo To create a bootable USB key, use diskpart.exe to create a FAT32 partition echo and mark it active, then copy the contents of this folder to its root: echo %PE_TEMP%\\WinPE-%PE_ARCH%\\ISO echo. echo FAT32 is required for EFI support. echo. if \"%3\"==\"nopause\" goto :eof pause goto :eof :REG_MULTI_SZ-add ::subroutine to append a value to a multiple string value Registry entry setlocal ENABLEEXTENSIONS set KEY=%1 set VALUE=%2 for /f \"tokens=2*\" %%a in ('reg query %KEY% /v %VALUE% /t REG_MULTI_SZ ^| FIND \"REG_MULTI_SZ\"') do set DATA=%%b set DATA=%DATA%\\0%3 reg add %KEY% /v %VALUE% /t REG_MULTI_SZ /d %DATA% /f\n\nI’m rolling out 64bit Windows 7 where I work and, though initial test PCs seemed fine in this regard, I discovered that Dell OptiPlex GX620 machines built using my unattended install have a flickering problem on web pages with Javascript content and Flash in IE8. Uninstall Adobe Flash and the problem disappears. Installing the latest build of Flash 10.1 doesn’t help, even disabling hardware acceleration in the Flash player settings.\n\nResearching the problem online turns up little, though I did spot a few clues which led me to a solution:\n\nThis thread on the Microsoft forums feature quite a lot of people with the same issue name-checking Intel 945G chipset, but also ATI. Having had an ATI card of my own, I found that their driver releases can be pretty rough around the edges to say the least\n\nThis thread mentions that the problem tends to manifest itself with Windows 7 x64 (though I don’t have any of the affected models running x86 builds to test)\n\nThis thread on Overclockers.co.uk also mentions the Intel GMA 950\n\nMy own work PC (an iMac with an ATI card running Windows 7 x64), does not exhibit this problem, nor do Optiplex 745 (Intel Q965), nor Optiplex 780 (Intel Series 4) models\n\nOne Optiplex 620 which I built by hand to use as an early performance test machine does not exhibit the problem. If I remember correctly, I only installed drivers which were missing once Windows was installed…\n\nSo, as much as people seem to be blaming Adobe, it does look like a display driver issue. However I was using the most up to date Intel 945G driver version (8.15.10.1930).\n\nBecause I had injected this driver during the unattended install OfflineServicing phase, removing it in Device Manager and selecting Delete the driver software for this device did not work. The device was re-detected as Standard VGA Graphics Adaptor for a few seconds, then the same Intel driver was installed once again. So I had to:\n\nDevice Manager > select the Graphics card > Update Driver > Browse my computer for driver software > Let me pick from a list of device drivers on my computer > Intel(R) 82945G Express Chipset Family (Microsoft Corporation – WDDM 1.0)\n\nThen after a reboot the problem disappeared. The original driver included with Windows 7 (8.15.10.1749) is clearly better than the newer one from the Intel website. It turned out that my working early test build machine was running 8.15.10.1912, though I cannot find that on Intel’s site.\n\nUPDATE – The 8.15.10.1912 driver can be obtained from Microsoft Update Catalog using the search string Intel 82945G Express then ordering by version number. You’ll need to use Internet Explorer because it requires an ActiveX control to be installed. You’ll see there are two corresponding downloads. Add them both to the basket – one is the x86, the other is x64 but you won’t be able to tell them apart until they’re downloaded.\n\nPeople building machines from a deployment image will therefore need to make sure that the newest Intel Display driver is not added to their WIM or unattended build if it will be used on PCs with 945G chipsets. In the case of my unattended, I add drivers specifically by WMI model string so I shall move the Intel driver out of the Common folder and add it only to those builds which need it. I guess another issue will be that Windows Update will offer the newer Intel driver too.\n\nUPDATE 2 – I have built another workstation from an unattended install with that 8.15.10.1912 driver and it also exhibits the Flash flickering problem (even though it’s fine on a system built by hand). So it looks like something to do with how the driver is added during the offlineServicing phase that is causing the problem. Once again, this does not affect Intel GMA drivers added during unattended installs for other non-GMA 950 chipsets. So for now I am leaving all OptiPlex GX620 systems on the generic Windows-included driver.\n\nWindows 7, like Vista, uses an XML answer file to configure the OS install. What’s neat about this is that even though you use the WAIK‘s WSIM tool to edit and validate it, you can customize it and add your own sections for software packages etc. as you can see from the example below, though these custom sections will need to be inserted after the sections that WSIM validates. This answer file can easily be parsed with VBScript using MSXML DOM, allowing for variables like passwords, driver sets, product keys and so on to be inserted at build time.\n\nWhy use an unattended install?\n\nIf you’ve always used an unattended install to build your workstations, you’ll know that they can be extremely versatile. If you already have a scripted build for XP with applications then chances are you’ll want to tweak those scripts to work with Windows 7. Sure, Sysprep images are handy too, but unless all your machines are the same, or all your packaged app requirements are identical, then you’ll need to add a load of scripted customization to them anyway. Which begs the question: why not just use an unattended install? That way you eliminate application problems that sometimes surface after image-based deployment. In a previous job I remember Roxio deployment in particular was a nightmare for this reason.\n\nMicrosoft have certainly made things considerably easier with the release of the Microsoft Deployment Toolkit 2010 but, though it offers a great introduction into the process of automated system building, it lacks the flexibility of rolling your own build process – in particular if you already have a host database. When I decide to rebuild a machine, it boots Windows PE from WDS, looks up its MAC address in the host database and reads the model type from WMI and will offer default choices in my build script menus based on that. It also works out which is the nearest site file server to use for the install.\n\nThe problem with Sysprep deployment if you have a very mixed hardware environment is that you either have to:\n\nCreate a WIM image for each different hardware type (lots of boring maintenance when changes are required)\n\nAdd a huge bulk of drivers to a single WIM image with DISM\n\nUse the AuditSystem phase to connect to a driver share and re-detect all the hardware\n\nSince Windows Vista and later versions effectively just install a WIM and run a hardware detection phase during their normal install process, Sysprep no longer offers much of a speed improvement over an unattended build.\n\nDevice drivers\n\nAdditional mass storage and networking drivers that will be essential during setup are detected in the Windows PE instance (which we booted from WDS) Driver Store and ‘reflected’ into the installed OS. As you build your custom Windows PE boot image, add these using DSIM as described in my post on the subject.\n\nSince we can read the PC model name from the BIOS via WMI, we can add a tailored device path to the offlineServicing phase of setup. This allows for easy maintenance of driver bundles, since we can arrange them by model type (which certainly beats having dozens of SoundMAX audio drivers lumped together), and we can limit which drivers are offered to each model – particularly useful when a driver causes problems for some models, as with the GMA950 driver and Adobe Flash on Intel 945G motherboards.\n\nI noticed that this is in fact considerably neater that the method used in MDT2010’s ZTIDrivers.wsf script, which copies drivers to the local system then invokes the AuditSystem phase, running the PnP detection routines a second time, slowing down the install. Useful for an OEM like Dell I suppose, whose PCs are often started from their factory image with no connectivity, but not ideal for corporate LANs.\n\nSample autounattend.xml with custom sections at the end\n\nNote 1 – I couldn’t find any examples of this online, but I discovered that the values for pre-populating the Internet Explorer 8 Search Providers can be obtained by configuring a workstation, then harvesting the registry settings from HKCU\\Software\\Microsoft\\Internet Explorer\\SearchScopes. I have highlighted the relevant lines in the XML below.\n\nNote 2 – Somewhat confusingly, in the offlineServicing phase Microsoft-Windows-PnpCustomizationsNonWinPE will fail to connect to your file server for drivers unless you connect to its FQDN (assuming the unattended launched the OS build from a share referencing just the NetBIOS name). Fail to do this and %systemroot%\\panther\\setupact.log will reveal that it fails to connect with error 0x4C3 (multiple credentials on connection to the same server). What’s bizarre is that there certainly aren’t multiple credentials in use – I use the same ones throughout. I wrote up this problem and solution in this thread on the MSFN Forums. I suspect this might be caused because I launch setup.exe from a network drive rather than mounting the OS WIM image from a WDS server (I wanted to maintain consistency with my other legacy OS builds). I have highlighted this on line 57.\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <unattend xmlns=\"urn:schemas-microsoft-com:unattend\"> <settings pass=\"windowsPE\"> <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <SetupUILanguage> <UILanguage>en-US</UILanguage> </SetupUILanguage> <InputLocale>0809:00000809</InputLocale> <SystemLocale>en-GB</SystemLocale> <UILanguage>en-US</UILanguage> <UserLocale>en-GB</UserLocale> </component> <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <ComplianceCheck> <DisplayReport>Never</DisplayReport> </ComplianceCheck> <Diagnostics> <OptIn>false</OptIn> </Diagnostics> <DiskConfiguration> <WillShowUI>Always</WillShowUI> </DiskConfiguration> <DynamicUpdate> <Enable>true</Enable> <WillShowUI>OnError</WillShowUI> </DynamicUpdate> <ImageInstall> <OSImage> <InstallFrom> <MetaData wcm:action=\"add\"> <Key>/IMAGE/NAME</Key> <Value>Windows 7 PROFESSIONAL</Value> </MetaData> </InstallFrom> </OSImage> </ImageInstall> <UserData> <AcceptEula>true</AcceptEula> <FullName>IT</FullName> <Organization>My company</Organization> <ProductKey> <WillShowUI>OnError</WillShowUI> </ProductKey> </UserData> <EnableNetwork>true</EnableNetwork> </component> </settings> <settings pass=\"offlineServicing\"> <component name=\"Microsoft-Windows-PnpCustomizationsNonWinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <DriverPaths> <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"common\"> <Credentials> <Domain>domain.com</Domain> <Password>Password</Password> <Username>unattended</Username> </Credentials> <Path>\\\\myserver.domain.com\\UNATTENDED\\drivers\\7-x64\\common</Path> </PathAndCredentials> <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"build\"> <Credentials> <Domain>*value to be set by install.vbs*</Domain> <Password>*value to be set by install.vbs*</Password> <Username>*value to be set by install.vbs*</Username> </Credentials> <Path>*value to be set by install.vbs*</Path> </PathAndCredentials> </DriverPaths> </component> </settings> <settings pass=\"generalize\"> <component name=\"Microsoft-Windows-PnpSysprep\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <PersistAllDeviceInstalls>true</PersistAllDeviceInstalls> </component> </settings> <settings pass=\"specialize\"> <component name=\"Microsoft-Windows-IE-InternetExplorer\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <Home_Page>http://mycompany.com</Home_Page> <CompanyName>My Company</CompanyName> <FavoritesOnTop>true</FavoritesOnTop> <FilterLevel>High</FilterLevel> <Help_Page></Help_Page> <DisableFirstRunWizard>true</DisableFirstRunWizard> <DisableWelcomePage>true</DisableWelcomePage> <PlaySound>true</PlaySound> <ShowInformationBar>true</ShowInformationBar> <UserAgent></UserAgent> <Window_Title_CN></Window_Title_CN> <SearchScopes> <Scope wcm:action=\"add\"> <ScopeDefault>true</ScopeDefault> <ScopeKey>Search1</ScopeKey> <ScopeDisplayName>Google</ScopeDisplayName> <ScopeUrl>http://www.google.com/search?q={searchTerms}&amp;sourceid=ie7&amp;rls=com.microsoft:{language}:{referrer:source}&amp;ie={inputEncoding?}&amp;oe={outputEncoding?}</ScopeUrl> <FaviconURL>http://www.google.com/favicon.ico</FaviconURL> <SuggestionsURL>http://clients5.google.com/complete/search?q={searchTerms}&amp;client=ie8&amp;mw={ie:maxWidth}&amp;sh={ie:sectionHeight}&amp;rh={ie:rowHeight}&amp;inputencoding={inputEncoding}&amp;outputencoding={outputEncoding}</SuggestionsURL> </Scope> <Scope wcm:action=\"add\"> <ScopeKey>Search2</ScopeKey> <ScopeDisplayName>Bing</ScopeDisplayName> <FaviconURL>http://www.bing.com/favicon.ico</FaviconURL> <ScopeUrl>http://www.bing.com/search?q={searchTerms}&amp;form=IE8SRC&amp;src=IE-SearchBox</ScopeUrl> <SuggestionsURL>http://api.bing.com/qsml.aspx?query={searchTerms}&amp;market={Language}&amp;form=IE8SSC&amp;maxwidth={ie:maxWidth}&amp;rowheight={ie:rowHeight}&amp;sectionHeight={ie:sectionHeight}</SuggestionsURL> </Scope> </SearchScopes> <EnableLinksBar>false</EnableLinksBar> <PrintBackground>true</PrintBackground> </component> <component name=\"Microsoft-Windows-RemoteAssistance-Exe\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <fAllowFullControl>true</fAllowFullControl> <fAllowToGetHelp>true</fAllowToGetHelp> </component> <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <SkipAutoActivation>true</SkipAutoActivation> </component> <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <ComputerName>*</ComputerName> <ProductKey>XXXXX-YYYYY-ZZZZZ-YYYYY-XXXXX</ProductKey> <RegisteredOrganization>My Company</RegisteredOrganization> <RegisteredOwner>IT</RegisteredOwner> </component> <component name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <fDenyTSConnections>false</fDenyTSConnections> </component> <component name=\"Microsoft-Windows-UnattendedJoin\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <Identification> <Credentials> <Domain>*value to be set by install.vbs*</Domain> <Password>*value to be set by install.vbs*</Password> <Username>*value to be set by install.vbs*</Username> </Credentials> <JoinDomain>domain.com</JoinDomain> <MachineObjectOU>OU=Windows 7,OU=Workstations,DC=domain,DC=com</MachineObjectOU> </Identification> </component> <component name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <DomainProfile_EnableFirewall>false</DomainProfile_EnableFirewall> </component> <component name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <UserAuthentication>1</UserAuthentication> </component> </settings> <settings pass=\"oobeSystem\"> <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <SystemLocale>en-GB</SystemLocale> <UILanguage>en-GB</UILanguage> <UserLocale>0809:00000809</UserLocale> </component> <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <RegisteredOrganization>My Company</RegisteredOrganization> <RegisteredOwner>IT</RegisteredOwner> <TimeZone>GMT Standard Time</TimeZone> <OEMInformation> <Manufacturer>*</Manufacturer> <Model>*</Model> </OEMInformation> <OOBE> <HideEULAPage>true</HideEULAPage> <NetworkLocation>Work</NetworkLocation> <ProtectYourPC>1</ProtectYourPC> </OOBE> <UserAccounts> <AdministratorPassword> <Value>MwBifhgftytredjghAcwB0AHIAYQ584jkhkgtEAcwBzAHcAbwByAGQA</Value> <PlainText>false</PlainText> </AdministratorPassword> <LocalAccounts> <LocalAccount wcm:action=\"add\"> <Password> <Value>QQBTAEUANABoAGchgfhgfd357wrysAHMAcwB3AG8AcgBkAA==</Value> <PlainText>false</PlainText> </Password> <Name>cust_localuser</Name> <DisplayName>cust_localuser</DisplayName> <Description>Dummy user required for unattended - delete later</Description> <Group>users</Group> </LocalAccount> </LocalAccounts> </UserAccounts> <VisualEffects> <FontSmoothing>ClearType</FontSmoothing> </VisualEffects> <FirstLogonCommands> <SynchronousCommand wcm:action=\"add\"> <Order>1</Order> <Description>Connect to unattended share</Description> <CommandLine>net use *value to be set by install.vbs*</CommandLine> </SynchronousCommand> <SynchronousCommand wcm:action=\"add\"> <Order>2</Order> <Description>Launch package installer</Description> <CommandLine>cscript *value to be set by install.vbs*</CommandLine> <RequiresUserInput>true</RequiresUserInput> </SynchronousCommand> </FirstLogonCommands> <AutoLogon> <Password> <Value>MwBifhgftytredjghAcwB0AHIAYQ584jkhkgtEAcwBzAHcAbwByAGQA</Value> <PlainText>false</PlainText> </Password> <Username>Administrator</Username> <LogonCount>1</LogonCount> <Enabled>true</Enabled> </AutoLogon> </component> </settings> <cpi:offlineImage cpi:source=\"wim://myserver/unattended/os/7-x64/sources/install.wim#Windows 7 PROFESSIONAL\" xmlns:cpi=\"urn:schemas-microsoft-com:cpi\" /> <!-- MY COMPANY CUSTOMIZATIONS BELOW--> <mycompany:custom xmlns:mycompany=\"urn:schemas-domain-com:mycompany\"> <!-- build description --> <cust_description>standard workstation</cust_description> <!-- list of packages to install in order. Descriptions are read from U:\\scripts\\packages.csv --> <cust_packages>office2k7.cmd,adobe.cmd,flash.cmd,java.cmd,fonts.cmd</cust_packages> <!-- start of the model name string, as reported by WMI, comma separated - allows auto-selection of build. --> <cust_models>OptiPlex 745,OptiPlex GX620,VMware Virtual Platform</cust_models> <!-- do we want packages.vbs to activate Windows? --> <cust_activate>false</cust_activate> <!-- do we want a hibernation file wasting disk space? If set to false packages.vbs will disable hibernation support --> <cust_hibernate>false</cust_hibernate> </mycompany:custom> </unattend>\n\nSample VBScript code for parsing the XML using MSXML DOM\n\nThis is not a complete script – it’s intended purely to illustrate the concept.\n\n'New OS - 7/Vista/2008/2008R2 'read the answer file Set objXML = CreateObject(\"Microsoft.XMLDOM\") objXML.Async = \"False\" objXML.Load(strMedia & \"\\sifs\\\" & strOS & \"\\\" & strBuild & \".xml\") 'Additional mass storage and Networking drivers that will be essential for the rest of the build are detected in the 'running Windows PE instance's Driver Store and reflected into the installed OS 'insert the non-WinPE PnP driver discovery paths and credentials for the offlineServicing pass strXPath = \"/unattend/settings[@pass='offlineServicing']/component[@name='Microsoft-Windows-PnpCustomizationsNonWinPE']/DriverPaths/PathAndCredentials/Credentials\" 'we need to iterate since there may be several sets of credentials (one for each driver path) Set colNodes=objXML.selectNodes(strXPath & \"/Domain\") For Each objNode In colNodes objNode.Text = strDomainName Next Set colNodes=objXML.selectNodes(strXPath & \"/Password\") For Each objNode In colNodes objNode.Text = strPass Next Set colNodes=objXML.selectNodes(strXPath & \"/Username\") For Each objNode In colNodes objNode.Text = strUser Next 'Insert hostname strXPath = \"/unattend/settings[@pass='specialize']/component[@name='Microsoft-Windows-Shell-Setup']/ComputerName\" Set objNode=objXML.selectSingleNode(strXPath) objNode.Text = strComputerName 'insert credentials for Domain join On Error Resume Next strXPath = \"/unattend/settings[@pass='specialize']/component[@name='Microsoft-Windows-UnattendedJoin']/Identification/Credentials\" Set objNode=objXML.selectSingleNode(strXPath & \"/Domain\") If Err.Number = 0 Then 'Microsoft-Windows-UnattendedJoin exists - carry on modifying (workgroup builds won't have this section in the XML) objNode.Text = strDomainName Set objNode=objXML.selectSingleNode(strXPath & \"/Password\") objNode.Text = strPass Set objNode=objXML.selectSingleNode(strXPath & \"/Username\") objNode.Text = strUser End If On Error Goto 0 'insert manufacturer and model into OEMinfo strXPath = \"/unattend/settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/OEMInformation/Manufacturer\" Set objNode=objXML.selectSingleNode(strXPath) objNode.Text = strManufacturer strXPath = \"/unattend/settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/OEMInformation/Model\" Set objNode=objXML.selectSingleNode(strXPath) objNode.Text = strModel & \" - Your Company\" strXPath = \"/unattend/settings[@pass='oobeSystem']/component[@name='Microsoft-Windows-Shell-Setup']/FirstLogonCommands/SynchronousCommand/CommandLine\" Set colNodes=objXML.selectNodes(strXPath) For Each objNode In ColNodes 'Insert the unattended share info and credentials If InStr (objNode.Text,\"net use *value to be set by install.vbs*\") Then objNode.Text = \"net use \" & strMedia & \" \\\\\" & strInstallServer & \"\\\" & strShare & \" /user:\" & strUser & \"@\" & strDomainName & \" \" & strPass & \" /persistent:no\" End If 'Record our build file selection for the package installer later If InStr (objNode.Text,\"cscript *value to be set by install.vbs*\") Then objNode.Text = \"cscript //nologo \" & strMedia & \"\\scripts\\packages.vbs \" & strMedia & \" \" & strOS & \" \" & strBuild & \".xml\" End If Next Set objNode = Nothing 'write out the answer file objXML.Save \"x:\\autounattend.xml\" Set objXML = Nothing"
    }
}