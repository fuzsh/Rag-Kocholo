{
    "id": "wrong_mix_domain_subsidiary_00061_1",
    "rank": 13,
    "data": {
        "url": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.db.html",
        "read_more_link": "",
        "language": "en",
        "title": "Adding a database to your Elastic Beanstalk environment",
        "top_image": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "meta_img": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "images": [
            "https://docs.aws.amazon.com/images/elasticbeanstalk/latest/dg/images/aeb-rds-options-w-db-deletion-policies.png",
            "https://docs.aws.amazon.com/images/elasticbeanstalk/latest/dg/images/aeb-rds-couple-decouple-db.png",
            "https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "AWS Elastic Beanstalk",
            "Elastic Beanstalk",
            "ebextension",
            "eb extension",
            "deployment",
            "resource management",
            "web application",
            "development"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Set up, operate, and scale a relational database in the cloud for your Elastic Beanstalk application with Amazon Relational Database Service (Amazon RDS). Decouple the database from the Elastic Beanstalk environment while keeping the environment in a healthy state.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.db.html",
        "text": "Elastic Beanstalk provides integration with Amazon Relational Database Service (Amazon RDS). You can use Elastic Beanstalk to add a MySQL, PostgreSQL, Oracle, or SQL Server database to an existing environment or a new one when you create it. When you add a database instance, Elastic Beanstalk provides the connection information to your application. It does this by setting the environment properties for the database hostname, port, user name, password, and database name.\n\nIf you haven't used a database instance with your application before, we recommend that you first use the process described in this topic to add a database to a test environment using the Elastic Beanstalk service. By doing this, you can verify that your application can read the environment properties, construct a connection string, and connect to a database instance, without the additional configuration work required for a database external to Elastic Beanstalk.\n\nAfter you verify that your application works correctly with the database, you may consider moving towards a production environment. At this point you have the option to decouple the database from your Elastic Beanstalk environment to move towards a configuration that offers greater flexibility. The decoupled database can remain operational as an external Amazon RDS database instance. The health of the environment isn't affected by decoupling the database. If you need to terminate the environment, you can do so and also choose the option to keep the database available and operational outside of Elastic Beanstalk.\n\nUsing an external database has several advantages. You can connect to the external database from multiple environments, use database types that aren't supported with integrated databases, and perform blue/green deployments. As an alternative to using a decoupled database that Elastic Beanstalk created, you can also create a database instance outside of your Elastic Beanstalk environment. Both options result in a database instance that's external to your Elastic Beanstalk environment and will require additional security group and connection string configuration. For more information, see Using Elastic Beanstalk with Amazon RDS.\n\nDatabase lifecycle\n\nYou can choose what you want to happen to the database after you decouple it from your Elastic Beanstalk environment. The options that you can choose from are collectively referred to as deletion policies. The following deletion policies apply to a database after you decouple it from an Elastic Beanstalk environment or terminate the Elastic Beanstalk environment.\n\nAdding an Amazon RDS DB instance to your environment using the console\n\nYou can add a DB instance to your environment by using the Elastic Beanstalk console.\n\nYou can configure the following options:\n\nIt takes about 10 minutes to add a DB instance. When the update is complete the new database is coupled to your environment. The hostname and other connection information for the DB instance are available to your application through the following environment properties.\n\nConnecting to the database\n\nUse the connectivity information to connect to your database from inside your application through environment variables. For more information about using Amazon RDS with your applications, see the following topics.\n\nConfiguring an integrated RDS DB instance using the console\n\nYou can view and modify configuration settings for your database instance in the Database section on the environment's Configuration page in the Elastic Beanstalk console.\n\nYou can modify the Instance class, Storage, Password, Availability, and Database deletion policy settings after database creation. If you change the instance class, Elastic Beanstalk re-provisions the DB instance.\n\nIf you no longer need Elastic Beanstalk to associate the database to the environment, you can choose to decouple it by selecting Decouple database. Itâs important to understand the options and considerations involved with this operation. For more information, see Decoupling an RDS DB instance using the console.\n\nConfiguring an integrated RDS DB instance using configuration files\n\nYou can configure your environment's database instance using configuration files. Use the options in the aws:rds:dbinstance namespace. The following example modifies the allocated database storage size to 100 GB.\n\nIf you want to configure DB instance properties that Elastic Beanstalk doesn't support, you can still use a configuration file, and specify your settings using the resources key. The following example sets values to the StorageType and Iops Amazon RDS properties.\n\nDecoupling an RDS DB instance using the console\n\nYou can decouple your database from an Elastic Beanstalk environment without affecting the health of the environment. Consider the following requirements before you decouple the database:\n\nThe deletion policy setting determines the outcome for the database and the length of time that's required to decouple the database.\n\nIf you decided to retain the database external to your Elastic Beanstalk environment, you'll need to take additional steps to configure it. For more information, see Using Elastic Beanstalk with Amazon RDS. If you plan to use the database that you decouple for a production environment, verify the storage type that the database uses is suitable for your workload. For more information, see DB Instance Storage and Modifying a DB instance in the Amazon RDS User Guide.\n\nDecoupling an RDS DB instance using configuration files\n\nYou can decouple your DB instance from an Elastic Beanstalk environment without affecting the health of the environment. The database instance follows the database deletion policy that was applied when the database was decoupled.\n\nBoth of the options required to decouple the database are in the aws:rds:dbinstance namespace. They are as follows:\n\nIf you want to change your database configuration before you decouple it, apply any configuration changes first, in a separate operation. This includes changing the DBDeletionPolicy configuration. After your changes are applied, run a separate command to set the decoupling option. If you submit other configuration settings and the decouple setting at the same time, the other configuration option settings are ignored while the decouple setting is applied.\n\nThe deletion policy setting determines the outcome for the database and the length of time that's required to decouple the database."
    }
}