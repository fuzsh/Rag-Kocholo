{
    "id": "wrong_mix_domain_subsidiary_00061_1",
    "rank": 17,
    "data": {
        "url": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/User.SQLServer.Options.S3-integration.html",
        "read_more_link": "",
        "language": "en",
        "title": "Integrating an Amazon RDS for SQL Server DB instance with Amazon S3",
        "top_image": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "meta_img": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "images": [
            "https://docs.aws.amazon.com/images/AmazonRDS/latest/UserGuide/images/ora-s3-integration-role.png",
            "https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Amazon Relational Database Service",
            "RDS",
            "DB Instance"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Integrate an Amazon RDS for SQL Server DB instance with Amazon S3",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/User.SQLServer.Options.S3-integration.html",
        "text": "You can transfer files between a DB instance running Amazon RDS for SQL Server and an Amazon S3 bucket. By doing this, you can use Amazon S3 with SQL Server features such as BULK INSERT. For example, you can download .csv, .xml, .txt, and other files from Amazon S3 to the DB instance host and import the data from D:\\S3\\ into the database. All files are stored in D:\\S3\\ on the DB instance.\n\nThe following limitations apply:\n\nFor more information on working with files in Amazon S3, see Getting started with Amazon Simple Storage Service.\n\nPrerequisites for integrating RDS for SQL Server with S3\n\nBefore you begin, find or create the S3 bucket that you want to use. Also, add permissions so that the RDS DB instance can access the S3 bucket. To configure this access, you create both an IAM policy and an IAM role.\n\nEnabling RDS for SQL Server integration with S3\n\nIn the following section, you can find how to enable Amazon S3 integration with Amazon RDS for SQL Server. To work with S3 integration, your DB instance must be associated with the IAM role that you previously created before you use the S3_INTEGRATION feature-name parameter.\n\nTransferring files between RDS for SQL Server and Amazon S3\n\nYou can use Amazon RDS stored procedures to download and upload files between Amazon S3 and your RDS DB instance. You can also use Amazon RDS stored procedures to list and delete files on the RDS instance.\n\nThe files that you download from and upload to S3 are stored in the D:\\S3 folder. This is the only folder that you can use to access your files. You can organize your files into subfolders, which are created for you when you include the destination folder during download.\n\nSome of the stored procedures require that you provide an Amazon Resource Name (ARN) to your S3 bucket and file. The format for your ARN is arn:aws:s3:::DOC-EXAMPLE-BUCKET/file_name. Amazon S3 doesn't require an account number or AWS Region in ARNs.\n\nS3 integration tasks run sequentially and share the same queue as native backup and restore tasks. At maximum, you can have only two tasks in progress at any time in this queue. It can take up to five minutes for the task to begin processing.\n\nDownloading files from an Amazon S3 bucket to a SQL Server DB instance\n\nTo download files from an S3 bucket to an RDS for SQL Server DB instance, use the Amazon RDS stored procedure msdb.dbo.rds_download_from_s3 with the following parameters.\n\nYou can download files without a file extension and files with the following file extensions: .bcp, .csv, .dat, .fmt, .info, .lst, .tbl, .txt, and .xml.\n\nThe following example shows the stored procedure to download files from S3.\n\nexec msdb.dbo.rds_download_from_s3 @s3_arn_of_file='arn:aws:s3:::DOC-EXAMPLE-BUCKET/bulk_data.csv', @rds_file_path='D:\\S3\\seed_data\\data.csv', @overwrite_file=1;\n\nThe example rds_download_from_s3 operation creates a folder named seed_data in D:\\S3\\, if the folder doesn't exist yet. Then the example downloads the source file bulk_data.csv from S3 to a new file named data.csv on the DB instance. If the file previously existed, it's overwritten because the @overwrite_file parameter is set to 1.\n\nUploading files from a SQL Server DB instance to an Amazon S3 bucket\n\nTo upload files from an RDS for SQL Server DB instance to an S3 bucket, use the Amazon RDS stored procedure msdb.dbo.rds_upload_to_s3 with the following parameters.\n\nThe following example uploads the file named data.csv from the specified location in D:\\S3\\seed_data\\ to a file new_data.csv in the S3 bucket specified by the ARN.\n\nexec msdb.dbo.rds_upload_to_s3 @rds_file_path='D:\\S3\\seed_data\\data.csv', @s3_arn_of_file='arn:aws:s3:::DOC-EXAMPLE-BUCKET/new_data.csv', @overwrite_file=1;\n\nIf the file previously existed in S3, it's overwritten because the @overwrite_file parameter is set to 1.\n\nListing files on the RDS DB instance\n\nTo list the files available on the DB instance, use both a stored procedure and a function. First, run the following stored procedure to gather file details from the files in D:\\S3\\.\n\nexec msdb.dbo.rds_gather_file_details;\n\nThe stored procedure returns the ID of the task. Like other tasks, this stored procedure runs asynchronously. As soon as the status of the task is SUCCESS, you can use the task ID in the rds_fn_list_file_details function to list the existing files and directories in D:\\S3\\, as shown following.\n\nSELECT * FROM msdb.dbo.rds_fn_list_file_details(TASK_ID);\n\nThe rds_fn_list_file_details function returns a table with the following columns.\n\nDeleting files on the RDS DB instance\n\nTo delete the files available on the DB instance, use the Amazon RDS stored procedure msdb.dbo.rds_delete_from_filesystem with the following parameters.\n\nTo delete a directory, the @rds_file_path must end with a backslash (\\) and @force_delete must be set to 1.\n\nThe following example deletes the file D:\\S3\\delete_me.txt.\n\nexec msdb.dbo.rds_delete_from_filesystem @rds_file_path='D:\\S3\\delete_me.txt';\n\nThe following example deletes the directory D:\\S3\\example_folder\\.\n\nexec msdb.dbo.rds_delete_from_filesystem @rds_file_path='D:\\S3\\example_folder\\', @force_delete=1;\n\nMonitoring the status of a file transfer task\n\nTo track the status of your S3 integration task, call the rds_fn_task_status function. It takes two parameters. The first parameter should always be NULL because it doesn't apply to S3 integration. The second parameter accepts a task ID.\n\nTo see a list of all tasks, set the first parameter to NULL and the second parameter to 0, as shown in the following example.\n\nSELECT * FROM msdb.dbo.rds_fn_task_status(NULL,0);\n\nTo get a specific task, set the first parameter to NULL and the second parameter to the task ID, as shown in the following example.\n\nSELECT * FROM msdb.dbo.rds_fn_task_status(NULL,42);\n\nThe rds_fn_task_status function returns the following information.\n\nCanceling a task\n\nTo cancel S3 integration tasks, use the msdb.dbo.rds_cancel_task stored procedure with the task_id parameter. Delete and list tasks that are in progress can't be cancelled. The following example shows a request to cancel a task.\n\nexec msdb.dbo.rds_cancel_task @task_id = 1234;\n\nTo get an overview of all tasks and their task IDs, use the rds_fn_task_status function as described in Monitoring the status of a file transfer task.\n\nMulti-AZ limitations for S3 integration\n\nOn Multi-AZ instances, files in the D:\\S3 folder are deleted on the standby replica after a failover. A failover can be planned, for example, during DB instance modifications such as changing the instance class or upgrading the engine version. Or a failover can be unplanned, during an outage of the primary.\n\nTo determine the last failover time, you can use the msdb.dbo.rds_failover_time stored procedure. For more information, see Determining the last failover time.\n\nDisabling RDS for SQL Server integration with S3"
    }
}