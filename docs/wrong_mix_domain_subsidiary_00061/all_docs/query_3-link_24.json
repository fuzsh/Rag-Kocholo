{
    "id": "wrong_mix_domain_subsidiary_00061_3",
    "rank": 24,
    "data": {
        "url": "https://vercel.com/docs/deployments/git",
        "read_more_link": "",
        "language": "en",
        "title": "Deploying Git Repositories with Vercel",
        "top_image": "https://assets.vercel.com/image/upload/front/favicon/vercel/32x32.png",
        "meta_img": "https://assets.vercel.com/image/upload/front/favicon/vercel/32x32.png",
        "images": [
            "https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Findex%2Frepo-list-light.png&w=640&q=75&dpl=dpl_8B552EDtUrBTt4r3qAAn4yzHp7UP 1x, /_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Findex%2Frepo-list-light.png&w=1200&q=75&dpl=dpl_8B552EDtUrBTt4r3qAAn4yzHp7UP 2x",
            "https://vercel.com/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Findex%2Frepo-list-dark.png&w=640&q=75&dpl=dpl_8B552EDtUrBTt4r3qAAn4yzHp7UP 1x, /_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1689795055%2Fdocs-assets%2Fstatic%2Fdocs%2Fconcepts%2Fdeployments%2Fgit%2Findex%2Frepo-list-dark.png&w=1200&q=75&dpl=dpl_8B552EDtUrBTt4r3qAAn4yzHp7UP 2x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Vercel allows for automatic deployments on every branch push and merges onto the production branch of your GitHub, GitLab, and Bitbucket projects.",
        "meta_lang": "en",
        "meta_favicon": "https://assets.vercel.com/image/upload/front/favicon/vercel/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://vercel.com/docs/deployments/git",
        "text": "Vercel allows for automatic deployments on every branch push and merges onto the production branch of your GitHub, GitLab, Bitbucket and Azure DevOps Pipelines projects.\n\nUsing Git with Vercel provides the following benefits:\n\nPreview deployments for every push.\n\nProduction deployments for the most recent changes from the production branch.\n\nInstant rollbacks when reverting changes assigned to a custom domain.\n\nWhen working with Git, have a branch that works as your production branch, often called main. After you create a pull request (PR) to that branch, Vercel creates a unique deployment you can use to preview any changes. Once you are happy with the changes, you can merge your PR into the main branch, and Vercel will create a production deployment.\n\nYou can choose to use a different branch as the production branch.\n\nGitHub Free\n\nGitHub Team\n\nGitHub Enterprise Cloud\n\nGitHub Enterprise Server\n\nGitLab Free\n\nGitLab Premium\n\nGitLab Ultimate\n\nGitLab Enterprise\n\nSelf-Managed GitLab\n\nBitbucket Free\n\nBitbucket Standard\n\nBitbucket Premium\n\nBitbucket Data Center (Self-Hosted)\n\nAzure DevOps Pipelines\n\nIf your provider is not listed here, you can also use the Vercel CLI to deploy with any git provider.\n\nSetting up your GitHub, GitLab, or Bitbucket repository on Vercel is only a matter of clicking the \"New Project\" button on the top right of your dashboard and following the steps.\n\nAfter clicking it, you'll be presented with a list of Git repositories that the Git account you've signed up with has write access to.\n\nTo select a different Git namespace or provider, you can use the dropdown list on the top left of the section.\n\nYou can also:\n\nSelect a third-party Git repository by clicking on Import Third-Party Git Repository on the bottom of the section.\n\nSelect a pre-built solution from the section on the right.\n\nAfter you've selected the Git repository or template you want to use for your new project, you'll be taken to a page where you can configure your project before it's deployed.\n\nYou can:\n\nCustomize the project's name\n\nSelect a Framework Preset\n\nSelect the root directory of your project\n\nConfigure Build Output Settings\n\nSet Environment Variables\n\nWhen your settings are correct, you can select the Deploy button to initiate a deployment.\n\nYou can initiate new deployments directly from the Vercel Dashboard using a Git reference. This approach is ideal when automatic deployments are interrupted or unavailable.\n\nTo create a deployment from a Git reference:\n\nFrom your dashboard, select the project you'd like to create a deployment for\n\nSelect the Deployments tab. Once on the Deployments page, select the Create Deployment button\n\nDepending on how you would like to deploy, enter the following:\n\nTargeted Deployments: Provide the unique ID (SHA) of a commit to build a deployment based on that specific commit\n\nBranch-Based Deployments: Provide the full name of a branch when you want to build the most recent changes from that specific branch (for example, https://github.com/vercel/examples/tree/deploy)\n\nSelect Create Deployment. Vercel will build and deploy your commit or branch as usual\n\nWhen the same commit appears in multiple branches, Vercel will prompt you to choose the appropriate branch configuration. This choice is crucial as it affects settings like environment variables linked to each branch.\n\nAs an additional security measure, commits on private Git repositories (and commits of forks that are targeting those Git repositories) will only be deployed if the commit author also has access to the respective project on Vercel.\n\nDepending on whether the owner of the connected Vercel project is a Hobby or a Pro team, the behavior changes as mentioned in the sections below.\n\nThis only applies to commit authors on GitHub organizations, GitLab groups and non-personal Bitbucket workspaces. It does not apply to collaborators on personal Git accounts.\n\nFor public Git repositories, a different behavior applies.\n\nTo deploy commits under a Vercel Pro team, the commit author must be a member of the team containing the Vercel project connected to the Git repository.\n\nMembership is verified by finding the Hobby account associated with the commit author through Login Connections. If a Hobby account is found, it checks if the account is a member of the Pro team.\n\nIf the commit author is not a member, the deployment will be prevented, and the commit author can request to join the team. The team owners will be notified and can accept or decline the membership request on the Members page in the team Settings.\n\nIf the request is declined, the commit will remain undeployed. If the commit author is accepted as a member of the Pro team, their most recent commit will automatically resume deployment to Vercel.\n\nCommit authors are automatically considered part of the Pro team on Vercel if one of the existing members has connected their Hobby account on Vercel with the Git account that created the commit.\n\nTo deploy commits under a Hobby account, the commit author must be the owner of the Hobby account containing the Vercel project connected to the Git repository. This is verified by comparing the Login Connections defined in the Hobby account with the commit author.\n\nIf the commit author is not the owner of the destination Hobby account, the deployment will be prevented, and a recommendation to transfer the project to a Pro team will be displayed on the Git provider.\n\nAfter transferring the project to a Pro team, commit authors can be added as members of that team. The behavior mentioned in the section above will then apply to them whenever they commit.\n\nWhen a public repository is forked, commits from it will usually deploy automatically. However, when you receive a pull request from a fork of your repository that includes a change to the vercel.json file or the project has Environment Variables, Vercel will require authorization from you or a team member to deploy the pull request. This is a security measure that protects you from leaking sensitive project information. A link to authorize the deployment will be posted as a comment on the Pull Request.\n\nThe authorization step will be skipped if the commit author is already a team member on Vercel.\n\nA Production deployment will be created each time you merge to the production branch.\n\nWhen you create a new Project from a Git repository on Vercel, the Production Branch will be selected in the following order:\n\nThe main branch.\n\nIf not present, the master branch (more details).\n\n[Only for Bitbucket] If not present, the \"production branch\" setting of your Git repository is used.\n\nIf not present, the Git repository's default branch.\n\nOn the Git page in the Project Settings, you can change your production branch.\n\nWhenever a new commit is then pushed to the branch you configured here, a production deployment will be created for you.\n\nWhile the production branch (mentioned above) is a single Git branch that contains the code that is served to your visitors, Preview Branches are all the Git branches that are not the production branch.\n\nFor example, if your production branch is main, then all the Git branches that are not main are considered Preview Branches. That means there can be many Preview Branches, but only a single production branch.\n\nPreview Branches, like the name already suggests, are used for previewing changes before presenting them to your visitors (merging them into production).\n\nBy default, every Preview Branch automatically receives its own Domain similar to the one shown below, whenever a commit is pushed to it:\n\nAdditionally, any Environment Variables defined for the Preview Environment are applied.\n\nYou can also receive feedback from team members and other collaborators through Vercel's Comments feature. Comments can be tracked and resolved from within a PR on GitHub.\n\nOnce you're happy with your changes, you would then merge the respective Preview Branch into your production branch.\n\nFor most use cases, the default Preview behavior mentioned above is enough.\n\nIf you'd like your changes to pass through multiple phases of previewing instead of just one, you can accomplish it like so:\n\nDomains and Environment Variables can both be assigned to specific Preview Branches on their individual settings pages. For Domains, it can be done like this and for Environment Variables like this.\n\nFor example, you could create a phase called \"Staging\" where you can accumulate Preview changes before merging them onto production by following these steps:\n\nCreate a Git branch called \"staging\" in your Git repository.\n\nAdd a Domain of your choice (like \"staging.example.com\") on your Vercel project and assign it to the \"staging\" Git branch like this.\n\nAdd Environment Variables that you'd like to use for your new Staging phase on your Vercel project like this.\n\nAfterwards, you can push to the \"staging\" Git branch to update your Staging phase and it will automatically receive the Domain and Environment Variables you've defined.\n\nOnce you're happy with your changes, you would then merge the respective Preview Branch into your production branch. However, unlike with the default Preview behavior, you'd then keep the branch around instead of deleting it, so that you can push to it again in the future."
    }
}