{
    "id": "wrong_mix_domain_subsidiary_00061_2",
    "rank": 63,
    "data": {
        "url": "https://vercel.com/docs/storage",
        "read_more_link": "",
        "language": "en",
        "title": "Vercel Storage",
        "top_image": "https://assets.vercel.com/image/upload/front/favicon/vercel/32x32.png",
        "meta_img": "https://assets.vercel.com/image/upload/front/favicon/vercel/32x32.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Store key-value data, transactional data, large files, and more with Vercel's suite of storage products.",
        "meta_lang": "en",
        "meta_favicon": "https://assets.vercel.com/image/upload/front/favicon/vercel/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://vercel.com/docs/storage",
        "text": "Vercel offers a suite of managed, serverless storage products that integrate with your frontend framework.\n\nVercel KV: Durable Redis\n\nVercel Postgres: Serverless SQL\n\nVercel Blob: Large file storage\n\nVercel Edge Config: Global, low-latency data store\n\nThis page will help you choose the right storage product for your use case.\n\nChoosing the correct storage solution depends on your needs for latency, durability, and consistency, among many other considerations.\n\nTo help you choose, we've created a table below to summarize the benefits of each storage option in relation to each other:\n\nRead our section on best practices to get the most out of our storage products.\n\nVercel KV provides durable, serverless Redis storage.\n\nYou should use Vercel KV if you want to:\n\nOverview\n\nQuickstart\n\nPricing\n\nLimits\n\nVercel Postgres is a serverless PostgresSQL database, designed to integrate with Vercel Functions and your frontend framework.\n\nYou should use Vercel Postgres if you need to:\n\nOverview\n\nQuickstart\n\nPricing\n\nLimits\n\nVercel Blob offers optimized storage for images, videos, and other files.\n\nYou should use Vercel Blob if you need to:\n\nOverview\n\nQuickstart\n\nAn Edge Config is a global data store that enables you to read data at the edge without querying an external database or hitting upstream servers. Most lookups return in less than 1ms, and 99% of reads will return under 10ms.\n\nYou should use Edge Config if you need to:\n\nOverview\n\nQuickstart\n\nLimits & Pricing\n\nWhen choosing a storage option, we recommend considering these best practices:\n\nTo ensure low-latency responses, it's crucial to have compute close to your databases. Always deploy your databases in regions closest to your Functions to avoid long network roundtrips.\n\nServerless Functions: Defaults to iad1, but can be deployed to any region\n\nIf using Vercel Postgres, ensure your database is in the same region as your Function\n\nIf using Vercel KV and replicated regions, place your stores in the same regions as your Functions\n\nEdge Functions: Global by default, opt-into single-region\n\nIf using Vercel Postgres, ensure your database is in the same region as your Function\n\nIf using Vercel KV and replicated regions, place your stores in the same regions as your Functions\n\nEdge Middleware: Global only; always executed in the region nearest the user\n\nSince Edge Middleware as part of request processing, it is best suited for extremely fast and globally replicated data like Edge Config\n\nVercel's Edge Network provides caching in every region globally. To ensure the fastest response times, ensure data fetched from your data store is properly cached at the Edge.\n\nIncremental Static Regeneration automates properly setting up caching headers and globally storing generated assets for you. This ensures the highest availability for your traffic and prevents accidental misconfiguration of cache-control headers.\n\nYou can manually configure cache-control headers when using Vercel Functions to cache the response data in every Edge region. Edge Middleware runs before the Edge Network cache layer and cannot use cache-control headers.\n\nYou can bring your KV or Postgres Database along with your account as you upgrade from Hobby to Pro, or downgrade from Pro to Hobby. To do so:\n\nNavigate to the dashboard and select the Storage tab\n\nSelect Settings, then select Transfer Database or Transfer Store\n\nSelect a destination account or team. If you're upgrading to Pro, select your new Pro team. If downgrading, select your Hobby account\n\nWhen successful, you'll be taken to the Storage tab of the account or team you transferred the database or store to.\n\nYour pricing and available features will change based on the plan your database is under. See the pricing docs for your preferred option to learn more:"
    }
}