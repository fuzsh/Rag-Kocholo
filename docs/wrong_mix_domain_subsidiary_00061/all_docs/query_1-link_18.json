{
    "id": "wrong_mix_domain_subsidiary_00061_1",
    "rank": 18,
    "data": {
        "url": "https://cloud.google.com/appengine/docs/legacy/standard/go111/application-security",
        "read_more_link": "",
        "language": "en",
        "title": "Overview of App Security",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/cloud/images/cloud-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/appengine/docs/legacy/standard/go111/application-security",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\nRegion ID\n\nThe REGION_ID is an abbreviated code that Google assigns based on the region you select when you create your app. The code does not correspond to a country or province, even though some region IDs may appear similar to commonly used country and province codes. For apps created after February 2020, REGION_ID.r is included in App Engine URLs. For existing apps created before this date, the region ID is optional in the URL.\n\nLearn more about region IDs.\n\nSecurity is a core feature of the Google Cloud, but there are still steps you should take to protect your App Engine app and identify vulnerabilities.\n\nUse the following features to ensure that your App Engine app is secure. To learn more about the Google Security Model and the available steps that you can take to secure your Google Cloud projects, see Google Cloud Platform Security.\n\nHTTPS requests\n\nUse HTTPS requests to access to your App Engine app securely. Depending on how your app is configured, you have the following options:\n\nappspot.com domains\n\nUse the https URL prefix to send HTTPS request to the default service of your Google Cloud project, for example:\n\nhttps://PROJECT_ID.REGION_ID.r.appspot.com\n\nTo target specific resources in your App Engine app, use the -dot- syntax to separate each resource you want to target, for example:\n\nhttps://VERSION-dot-SERVICE-dot-PROJECT_ID.REGION_ID.r.appspot.com\n\nTo convert an HTTP URL to an HTTPS URL, replace the periods between each resource with -dot-, for example:\n\nhttp://SERVICE_ID.PROJECT_ID.REGION_ID.r.appspot.com\n\nhttps://SERVICE_ID-dot-PROJECT_ID.REGION_ID.r.appspot.com\n\nFor more information about HTTPS URLs and targeting resources, see How Requests are Routed.\n\nCustom domains\n\nTo send HTTPS requests with your custom domain, you can use the managed SSL certificates that are provisioned by App Engine. For more information, see Securing Custom Domains with SSL.\n\nApp handlers\n\nTo force HTTPS for your app's handlers, you can specify the secure: always element for each handler in your app.yaml, for example:\n\nhandlers: - url: /.* script: auto secure: always redirect_http_response_code: 301\n\nUsing secure: always redirects all HTTP traffic to an HTTPS URL with the same path, see the app.yaml configuration reference for more information.\n\nAccess control\n\nIn each Google Cloud project, set up access control to determine who can access the services within the project, including App Engine. You can assign different roles to different accounts to ensure each account has only the permissions it needs to support your app. For details see, Setting Up Access Control.\n\nApp Engine firewall\n\nThe App Engine firewall enables you to control access to your App Engine app through a set of rules that can either allow or deny requests from the specified ranges of IP addresses. You are not billed for traffic or bandwidth that is blocked by the firewall. Create a firewall to:\n\nAllow only traffic from within a specific network\n\nEnsure that only a certain range of IP addresses from specific networks can access your app. For example, create rules to allow only the range of IP addresses from within your company's private network during your app's testing phase. You can then create and modify your firewall rules to control the scope of access throughout your release process, allowing only certain organizations, either within your company or externally, to access your app as it makes its way to public availability.\n\nAllow only traffic from a specific service\n\nEnsure that all the traffic to your App Engine app is first proxied through a specific service. For example, if you use a third-party Web Application Firewall (WAF) to proxy requests directed at your app, you can create firewall rules to deny all requests except those that are forwarded from your WAF.\n\nBlock abusive IP addresses\n\nWhile Google Cloud has many mechanisms in place to prevent attacks, you can use the App Engine firewall to block traffic to your app from IP addresses that present malicious intent or shield your app from denial of service attacks and similar forms of abuse. You can add IP addresses or subnetworks to a denylist, so that requests routed from those addresses and subnetworks are denied before they reach your App Engine app.\n\nFor details about creating rules and configuring your firewall, see Controlling App Access with Firewalls.\n\nIngress controls\n\nThis section describes how to use ingress settings to restrict network access to your App Engine app. At a network level, by default, any resource on the internet is able to reach your App Engine app on its appspot URL or at a custom domain set up in App Engine. For example, the appspot.com URL can have the following format: SERVICE_ID.PROJECT_ID.REGION_ID.r.appspot.com.\n\nYou can change this default setting by specifying a different setting for ingress. All ingress paths, including the default appspot.com URL, are subject to your ingress setting. Ingress is set at the service level.\n\nAvailable ingress settings\n\nThe following settings are available:\n\nSetting Description Internal Most restrictive. Allows requests from resources attached to the project's VPC networks, such as:\n\nVMs in the same project, including Compute Engine VMs.\n\nServerless VPC access connectors.\n\nShared VPC when the App Engine app is deployed in the Shared VPC host project. See Accessing internal services.\n\nRequests from these sources stay within the Google network, even if they access your service at the appspot.com URL. Requests from other sources, including the internet, cannot reach your service at the appspot.com URL or custom domains. There is no support for multi-tenancy, that is, multiple trust domains within the same project. Internal and Cloud Load Balancing Allows requests from the following resources:\n\nResources allowed by the more restrictive Internal setting\n\nExternal Application Load Balancer\n\nUse the Internal and Cloud Load Balancing setting to accept requests from an external Application Load Balancer but not directly from the internet. Requests to the appspot.com URL bypass the external Application Load Balancer, so this setting prevents external requests from reaching the appspot.com URL. All Least restrictive. Allows all requests, including requests directly from the internet to the appspot.com URL.\n\nAccessing internal services\n\nThe following considerations apply:\n\nFor requests from a Shared VPC, traffic is only considered internal if the App Engine app is deployed in the Shared VPC host project. If the App Engine app is deployed in a Shared VPC service project, only traffic from networks owned by the app's own project is internal. All other traffic, including traffic from other Shared VPCs, is external.\n\nWhen accessing internal services, call them as you would normally do by using their public URLs, either the default appspot.com URL or a custom domain set up in App Engine.\n\nFor requests from Compute Engine VM instances or other resources running inside a VPC network in the same project, no further setup is required.\n\nFor requests from other App Engine services or from Cloud Run or Cloud Functions in the same project, connect the service or function to a VPC network and route all egress through the connector, as described in Connecting to a Shared VPC network.\n\nRequests from resources within VPC networks in the same project are classified as internal even if the resource they originate from has a public IP address.\n\nRequests from on-premises resources connected to the VPC network via Cloud VPN are considered internal.\n\nView ingress settings\n\nConsole\n\nGo to the App Engine Services page.\n\nGo to the Services page\n\nLocate the Ingress column. For each service, the value in this column shows the ingress setting as one of All (default), Internal + Load Balancing, or Internal.\n\ngcloud\n\nTo view the ingress setting for a service using the gcloud CLI:\n\ngcloud app services describe SERVICE\n\nReplace SERVICE with the name of your service.\n\nFor example, to view the ingress settings and other information for the default service run:\n\ngcloud app services describe default\n\nEdit ingress settings\n\nConsole\n\nGo to the App Engine Services page.\n\nGo to the Services page\n\nSelect the service you wish to edit.\n\nClick Edit ingress setting.\n\nSelect the ingress setting that you want from the menu and click Save.\n\ngcloud\n\nTo update the ingress setting for a service using the gcloud CLI:\n\ngcloud app services update SERVICE --ingress=INGRESS\n\nReplace:\n\nSERVICE: The name of your service.\n\nINGRESS: The ingress control you want to apply. One of all, internal-only, or internal-and-cloud-load-balancing.\n\nFor example:\n\nTo update the default service of an App Engine app to accept traffic only from Cloud Load Balancing and VPC networks that are in the same project:\n\ngcloud app services update default --ingress=internal-and-cloud-load-balancing\n\nTo update a service named \"internal-requests\" to accept traffic only from VPC networks that are in the same project:\n\ngcloud app services update internal-requests --ingress=internal-only\n\nEgress settings\n\nIf you use Serverless VPC Access, you can specify the egress setting for your App Engine service.\n\nBy default, only requests to internal IP addresses and internal DNS names are routed through a Serverless VPC Access connector. You can specify the egress setting for your service in your app.yaml file.\n\nEgress settings are not compatible with the URL Fetch service. If you have not already done so, disable the URL Fetch default by using sockets and discontinue any explicit use of the urlfetch package. Using the urlfetch library ignores egress settings, and requests will not route through a Serverless VPC Access connector.\n\nTo configure the egress behavior of your App Engine service:\n\nAdd the egress_setting attribute to the vpc_access_connector field of your service's app.yaml file:\n\nvpc_access_connector: name: projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME egress_setting: EGRESS_SETTING\n\nReplace:\n\nPROJECT_ID with your Google Cloud project ID\n\nREGION with the region your connector is in\n\nCONNECTOR_NAME with the name of your connector\n\nEGRESS_SETTING with one of the following:\n\nprivate-ranges-only Default. Only requests to RFC 1918 and RFC 6598 IP address ranges or internal DNS names are routed to your VPC network. All other requests are routed directly to the internet.\n\nall-traffic All outbound requests from your service are routed to your VPC network. Requests are then subject to the firewall, DNS, and routing rules of your VPC network. Note that routing all outbound requests to your VPC network increases the amount of egress handled by the Serverless VPC Access connector and can incur charges.\n\nDeploy the service:\n\ngcloud app deploy\n\nSecurity scanner\n\nThe Google Cloud Web Security Scanner discovers vulnerabilities by crawling your App Engine app, following all that links within the scope of your starting URLs, and attempting to exercise as many user inputs and event handlers as possible.\n\nIn order to use the security scanner, you must be an owner of the Google Cloud project. For more information on assigning roles, see Setting Up Access Control.\n\nYou can run security scans from the Google Cloud console to identify security vulnerabilities in your App Engine app. For details about running the Security Scanner, see the Using Web Security Scanner."
    }
}