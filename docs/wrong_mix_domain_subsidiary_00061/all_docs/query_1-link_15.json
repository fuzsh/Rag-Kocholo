{
    "id": "wrong_mix_domain_subsidiary_00061_1",
    "rank": 15,
    "data": {
        "url": "https://access.redhat.com/documentation/en-us/red_hat_quay/3/html-single/use_red_hat_quay/index",
        "read_more_link": "",
        "language": "en",
        "title": "Use Red Hat Quay",
        "top_image": "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/b52482ede5f5b394740cba6808136d4f/178_Quay_architecture_0821_tenancy_model.png",
        "meta_img": "",
        "images": [
            "https://access.redhat.com/Logo-Red_Hat-Documentation-A-Reverse-RGB.svg",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/b52482ede5f5b394740cba6808136d4f/178_Quay_architecture_0821_tenancy_model.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/fd9220812701cdcb815e023f506cda2b/user-options.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/470154d83a5a5470346cc75e591da90f/set-repository-permissions-robot-account.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/bdf5ade1a8a7e854ec3fbdce133d4706/set-team-role.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/31711c75d83af66b914c9f5be9821066/tag-expires-ui.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/36f11ffaeba0518a818b5774e28fb848/tag-expiration-v2-ui.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/0e5081b193464475e404c42adf6196cf/logsv2-ui.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/80f6f6322c0749b6a34ac68e980fc118/export-usage-logs.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/9e189ca7597ae5924e54852acd6f74dc/custom-tagging.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/1ccae95856e47039837795308299197a/build-history.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/6798147b00b3720f00829ed1ed2bc5b3/build-trigger-example.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/2bc7c6405c2efb2dae147789eb5cfa0d/view-credentials.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/47b2c8021cfe3030742acbb7120cc30c/register-app.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/7d73535b4e3a7816b42e8ecd2185dd9e/quota-notifications.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/65632e21b9df872f9435b1e49fc3dd79/cache-proxy-overview.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/558e5adaa61d730603322d8494e7685f/cache-proxy-pulled-image.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/164020a4285128690eb7b5fc9fe32644/updated-layers-in-cache.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/1bfad1ae8f063a753e2190ef935d810a/cache-proxy-staleness-pull.png",
            "https://access.redhat.com/webassets/avalon/d/Red_Hat_Quay-3-Use_Red_Hat_Quay-en-US/images/fcd7e424d9c0276794c04ce42d141c07/quay-builds-architecture.png",
            "https://access.redhat.com/Logo-Red_Hat-Documentation-A-Reverse-RGB.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Use Red Hat Quay | Red Hat Documentation",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://docs.redhat.com/en/documentation/red_hat_quay/3/html-single/use_red_hat_quay/index",
        "text": "download PDF\n\nRed Hat Quay 3\n\nUse Red Hat Quay\n\nRed Hat OpenShift Documentation Team\n\nAbstract\n\nLearn to use Red Hat Quay\n\nPreface\n\nRed Hat Quay container image registries serve as centralized hubs for storing container images. Users of Red Hat Quay can create repositories to effectively manage images and grant specific read (pull) and write (push) permissions to the repositories as deemed necessary. Administrative privileges expand these capabilities, allowing users to perform a broader set of tasks, like the ability to add users and control default settings.\n\nThis guide offers an overview of Red Hat Quay’s users and organizations, its tenancy model, and basic operations like creating and deleting users, organizations, and repositories, handling access, and interacting with tags. It includes both UI and API operations.\n\nNote\n\nThe following API endpoints are linked to their associated entry in the Red Hat Quay API guide. The Red Hat Quay API guide provides more information about each endpoint, such as response codes and optional query parameters.\n\nChapter 1. Red Hat Quay tenancy model\n\nBefore creating repositories to contain your container images in Red Hat Quay, you should consider how these repositories will be structured. With Red Hat Quay, each repository requires a connection with either an Organization or a User. This affiliation defines ownership and access control for the repositories.\n\n1.1. Tenancy model\n\nOrganizations provide a way of sharing repositories under a common namespace that does not belong to a single user. Instead, these repositories belong to several users in a shared setting, such as a company.\n\nTeams provide a way for an Organization to delegate permissions. Permissions can be set at the global level (for example, across all repositories), or on specific repositories. They can also be set for specific sets, or groups, of users.\n\nUsers can log in to a registry through the web UI or a by using a client like Podman and using their respective login commands, for example, $ podman login. Each user automatically gets a user namespace, for example, <quay-server.example.com>/<user>/<username>, or quay.io/<username> if you are using Quay.io.\n\nSuperusers have enhanced access and privileges through the Super User Admin Panel in the user interface. Superuser API calls are also available, which are not visible or accessible to normal users.\n\nRobot accounts provide automated access to repositories for non-human users like pipeline tools. Robot accounts are similar to OpenShift Container Platform Service Accounts. Permissions can be granted to a robot account in a repository by adding that account like you would another user or team.\n\nChapter 2. Red Hat Quay user accounts overview\n\nA user account represents an individual with authenticated access to the platform’s features and functionalities. User accounts provide the capability to create and manage repositories, upload and retrieve container images, and control access permissions for these resources. This account is pivotal for organizing and overseeing container image management within Red Hat Quay.\n\nYou can create and delete new users on the zRed Hat Quay UI or by using the Red Hat Quay API.\n\n2.1. Creating a user account by using the UI\n\nUse the following procedure to create a new user for your Red Hat Quay repository using the UI.\n\nPrerequisites\n\nYou are logged into your Red Hat Quay deployment as a superuser.\n\nProcedure\n\nLog in to your Red Hat Quay repository as the superuser.\n\nIn the navigation pane, select your account name, and then click Super User Admin Panel.\n\nClick the Users icon in the column.\n\nClick the Create User button.\n\nEnter the new user’s Username and Email address, and then click the Create User button.\n\nYou are redirected to the Users page, where there is now another Red Hat Quay user.\n\nNote\n\nYou might need to refresh the Users page to show the additional user.\n\nOn the Users page, click the Options cogwheel associated with the new user. A drop-down menu appears, as shown in the following figure:\n\nClick Change Password.\n\nAdd the new password, and then click Change User Password.\n\nThe new user can now use that username and password to log in using the web UI or through their preferred container client, like Podman.\n\n2.2. Creating a user account by using the Red Hat Quay API\n\nUse the following procedure to create a new user for your Red Hat Quay repository by using the API.\n\nPrerequisites\n\nYou are logged into your Red Hat Quay deployment as a superuser.\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to create a new user using the POST /api/v1/superuser/users/ endpoint:\n\n$ curl -X POST -H \"Authorization: Bearer <bearer_token>\" -H \"Content-Type: application/json\" -d '{ \"username\": \"newuser\", \"email\": \"newuser@example.com\" }' \"https://<quay-server.example.com>/api/v1/superuser/users/\"\n\nExample output\n\n{\"username\": \"newuser\", \"email\": \"newuser@example.com\", \"password\": \"IJWZ8TIY301KPFOW3WEUJEVZ3JR11CY1\", \"encrypted_password\": \"9Q36xF54YEOLjetayC0NBaIKgcFFmIHsS3xTZDLzZSrhTBkxUc9FDwUKfnxLWhco6oBJV1NDBjoBcDGmsZMYPt1dSA4yWpPe/JKY9pnDcsw=\"}\n\nNavigate to your Red Hat Quay registry endpoint, for example, quay-server.example.com and login with the username and password generated from the API call. In this scenario, the username is newuser and the password is IJWZ8TIY301KPFOW3WEUJEVZ3JR11CY1. Alternatively, you can log in to the registry with the CLI. For example:\n\n$ podman login <quay-server.example.com>\n\nExample output\n\nusername: newuser password: IJWZ8TIY301KPFOW3WEUJEVZ3JR11CY1\n\nOptional. You can obtain a list of all users, including superusers, by using the GET /api/v1/superuser/users/ endpoint:\n\n$ curl -X GET -H \"Authorization: Bearer <bearer_token>\" \"https://<quay-server.example.com>/api/v1/superuser/users/\"\n\nExample output\n\n{\"users\": [{\"kind\": \"user\", \"name\": \"quayadmin\", \"username\": \"quayadmin\", \"email\": \"quay@quay.com\", \"verified\": true, \"avatar\": {\"name\": \"quayadmin\", \"hash\": \"b28d563a6dc76b4431fc7b0524bbff6b810387dac86d9303874871839859c7cc\", \"color\": \"#17becf\", \"kind\": \"user\"}, \"super_user\": true, \"enabled\": true}, {\"kind\": \"user\", \"name\": \"newuser\", \"username\": \"newuser\", \"email\": \"newuser@example.com\", \"verified\": true, \"avatar\": {\"name\": \"newuser\", \"hash\": \"f338a2c83bfdde84abe2d3348994d70c34185a234cfbf32f9e323e3578e7e771\", \"color\": \"#9edae5\", \"kind\": \"user\"}, \"super_user\": false, \"enabled\": true}]}\n\n2.3. Deleting a user by using the UI\n\nUse the following procedure to delete a user from your Red Hat Quay repository using the UI. Note that after deleting the user, any repositories that the user had in their private account become unavailable.\n\nNote\n\nIn some cases, when accessing the Users tab in the Superuser Admin Panel of the Red Hat Quay UI, you might encounter a situation where no users are listed. Instead, a message appears, indicating that Red Hat Quay is configured to use external authentication, and users can only be created in that system.\n\nThis error occurs for one of two reasons:\n\nThe web UI times out when loading users. When this happens, users are not accessible to perform any operations on.\n\nOn LDAP authentication. When a userID is changed but the associated email is not. Currently, Red Hat Quay does not allow the creation of a new user with an old email address.\n\nWhen this happens, you must delete the user using the Red Hat Quay API.\n\nPrerequisites\n\nYou are logged into your Red Hat Quay deployment as a superuser.\n\nProcedure\n\nLog in to your Red Hat Quay repository as the superuser.\n\nIn the navigation pane, select your account name, and then click Super User Admin Panel.\n\nClick the Users icon in the navigation pane.\n\nClick the Options cogwheel beside the user to be deleted.\n\nClick Delete User, and then confirm deletion by clicking Delete User.\n\n2.4. Deleting a user by using the Red Hat Quay API\n\nUse the following procedure to delete a user from Red Hat Quay using the API.\n\nImportant\n\nAfter deleting the user, any repositories that this user had in his private account become unavailable.\n\nPrerequisites\n\nYou are logged into your Red Hat Quay deployment as a superuser.\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following DELETE /api/v1/superuser/users/{username} command to delete a user from the command line:\n\n$ curl -X DELETE -H \"Authorization: Bearer <insert token here>\" https://<quay-server.example.com>/api/v1/superuser/users/<username>\n\nThe CLI does not return information when deleting a user from the CLI. To confirm deletion, you can check the Red Hat Quay UI by navigating to Superuser Admin Panel → Users, or by entering the following GET /api/v1/superuser/users/ command. You can then check to see if they are present.\n\n$ curl -X GET -H \"Authorization: Bearer <bearer_token>\" \"https://<quay-server.example.com>/api/v1/superuser/users/\"\n\nChapter 3. Red Hat Quay organizations overview\n\nIn = Red Hat Quay an organization is a grouping of users, repositories, and teams. It provides a means to organize and manage access control and permissions within the registry. With organizations, administrators can assign roles and permissions to users and teams. Other useful information about organizations includes the following:\n\nYou cannot have an organization embedded within another organization. To subdivide an organization, you use teams.\n\nOrganizations cannot contain users directly. You must first add a team, and then add one or more users to each team.\n\nNote\n\nIndividual users can be added to specific repositories inside of an organization. Consequently, those users are not members of any team on the Repository Settings page. The Collaborators View on the Teams and Memberships page shows users who have direct access to specific repositories within the organization without needing to be part of that organization specifically.\n\nTeams can be set up in organizations as just members who use the repositories and associated images, or as administrators with special privileges for managing the Organization.\n\nUsers can create their own organization to share repositories of container images. This can be done through the Red Hat Quay UI, or by the Red Hat Quay API if you have an OAuth token.\n\n3.1. Creating an organization by using the UI\n\nUse the following procedure to create a new organization by using the UI.\n\nProcedure\n\nLog in to your Red Hat Quay registry.\n\nClick Organization in the navigation pane.\n\nClick Create Organization.\n\nEnter an Organization Name, for example, testorg.\n\nEnter an Organization Email.\n\nClick Create.\n\nNow, your example organization should populate under the Organizations page.\n\n3.2. Creating an organization by using the Red Hat Quay API\n\nUse the following procedure to create a new organization using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to create a new organization using the POST /api/v1/organization/ endpoint:\n\n$ curl -X POST -H \"Authorization: Bearer <bearer_token>\" -H \"Content-Type: application/json\" -d '{ \"name\": \"<new_organization_name>\" }' \"https://<quay-server.example.com>/api/v1/organization/\"\n\nExample output\n\n\"Created\"\n\n3.3. Organization settings\n\nWith = Red Hat Quay, some basic organization settings can be adjusted by using the UI. This includes adjusting general settings, such as the e-mail address associated with the organization, and time machine settings, which allows administrators to adjust when a tag is garbage collected after it is permanently deleted.\n\nUse the following procedure to alter your organization settings by using the v2 UI.\n\nProcedure\n\nOn the v2 UI, click Organizations.\n\nClick the name of the organization that you will create the robot account for, for example, test-org.\n\nClick the Settings tab.\n\nOptional. Enter the email address associated with the organization.\n\nOptional. Set the allotted time for the Time Machine feature to one of the following:\n\nA few seconds\n\nA day\n\n7 days\n\n14 days\n\nA month\n\nClick Save.\n\n3.4. Deleting an organization by using the UI\n\nUse the following procedure to delete an organization using the v2 UI.\n\nProcedure\n\nOn the Organizations page, select the name of the organization you want to delete, for example, testorg.\n\nClick the More Actions drop down menu.\n\nClick Delete.\n\nNote\n\nOn the Delete page, there is a Search input box. With this box, users can search for specific organizations to ensure that they are properly scheduled for deletion. For example, if a user is deleting 10 organizations and they want to ensure that a specific organization was deleted, they can use the Search input box to confirm said organization is marked for deletion.\n\nConfirm that you want to permanently delete the organization by typing confirm in the box.\n\nClick Delete.\n\nAfter deletion, you are returned to the Organizations page.\n\nNote\n\nYou can delete more than one organization at a time by selecting multiple organizations, and then clicking More Actions → Delete.\n\n3.5. Deleting an organization by using the Red Hat Quay API\n\nUse the following procedure to delete an organization using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to delete an organization using the DELETE /api/v1/organization/{orgname} endpoint:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" \\ \"https://<quay-server.example.com>/api/v1/organization/<organization_name>\"\n\nThe CLI does not return information when deleting an organization from the CLI. To confirm deletion, you can check the Red Hat Quay UI, or you can enter the GET /api/v1/organization/{orgname} command to see if details are returned for the deleted organization:\n\n$ curl -X GET \\ -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" \\ \"<quay-server.example.com>/api/v1/organization/<organization_name>\"\n\nExample output\n\n{\"detail\": \"Not Found\", \"error_message\": \"Not Found\", \"error_type\": \"not_found\", \"title\": \"not_found\", \"type\": \"http://<quay-server.example.com>/api/v1/error/not_found\", \"status\": 404}\n\nChapter 4. Red Hat Quay repository overview\n\nA repository provides a central location for storing a related set of container images. These images can be used to build applications along with their dependencies in a standardized format.\n\nRepositories are organized by namespaces. Each namespace can have multiple repositories. For example, you might have a namespace for your personal projects, one for your company, or one for a specific team within your organization.\n\nRed Hat Quay provides users with access controls for their repositories. Users can make a repository public, meaning that anyone can pull, or download, the images from it, or users can make it private, restricting access to authorized users or teams.\n\nThere are three ways to create a repository in Red Hat Quay: by pushing an image with the relevant podman command, by using the Red Hat Quay UI, or by using the Red Hat Quay API. Similarly, repositories can be deleted by using the UI or the proper API endpoint.\n\n4.1. Creating a repository by using the UI\n\nUse the following procedure to create a repository using the Red Hat Quay UI.\n\nProcedure\n\nUse the following procedure to create a repository using the v2 UI.\n\nProcedure\n\nClick Repositories on the navigation pane.\n\nClick Create Repository.\n\nSelect a namespace, for example, quayadmin, and then enter a Repository name, for example, testrepo.\n\nImportant\n\nDo not use the following words in your repository name: * build * trigger * tag\n\nWhen these words are used for repository names, users are unable access the repository, and are unable to permanently delete the repository. Attempting to delete these repositories returns the following error: Failed to delete repository <repository_name>, HTTP404 - Not Found.\n\nClick Create.\n\nNow, your example repository should populate under the Repositories page.\n\nOptional. Click Settings → Repository visibility → Make private to set the repository to private.\n\n4.2. Creating a repository by using Podman\n\nWith the proper credentials, you can push an image to a repository using Podman that does not yet exist in your Red Hat Quay instance. Pushing an image refers to the process of uploading a container image from your local system or development environment to a container registry like Red Hat Quay. After pushing an image to your registry, a repository is created.\n\nUse the following procedure to create an image repository by pushing an image.\n\nPrerequisites\n\nYou have download and installed the podman CLI.\n\nYou have logged into your registry.\n\nYou have pulled an image, for example, busybox.\n\nProcedure\n\nPull a sample page from an example registry. For example:\n\n$ sudo podman pull busybox\n\nExample output\n\nTrying to pull docker.io/library/busybox... Getting image source signatures Copying blob 4c892f00285e done Copying config 22667f5368 done Writing manifest to image destination Storing signatures 22667f53682a2920948d19c7133ab1c9c3f745805c14125859d20cede07f11f9\n\nTag the image on your local system with the new repository and image name. For example:\n\n$ sudo podman tag docker.io/library/busybox quay-server.example.com/quayadmin/busybox:test\n\nPush the image to the registry. Following this step, you can use your browser to see the tagged image in your repository.\n\n$ sudo podman push --tls-verify=false quay-server.example.com/quayadmin/busybox:test\n\nExample output\n\nGetting image source signatures Copying blob 6b245f040973 done Copying config 22667f5368 done Writing manifest to image destination Storing signatures\n\n4.3. Creating a repository by using the API\n\nUse the following procedure to create an image repository using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to create a repository using the POST /api/v1/repository endpoint:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"repository\": \"<new_repository_name>\", \"visibility\": \"<public>\", \"description\": \"<This is a description of the new repository>.\" }' \\ \"https://quay-server.example.com/api/v1/repository\"\n\nExample output\n\n{\"namespace\": \"quayadmin\", \"name\": \"<new_repository_name>\", \"kind\": \"image\"}\n\n4.4. Deleting a repository by using the UI\n\nYou can delete a repository directly on the UI.\n\nPrerequisites\n\nYou have created a repository.\n\nProcedure\n\nOn the Repositories page of the v2 UI, check the box of the repository that you want to delete, for example, quayadmin/busybox.\n\nClick the Actions drop-down menu.\n\nClick Delete.\n\nType confirm in the box, and then click Delete.\n\nAfter deletion, you are returned to the Repositories page.\n\n4.5. Deleting a repository by using the Red Hat Quay API\n\nUse the following procedure to delete a repository using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to delete a repository using the DELETE /api/v1/repository/{repository} endpoint:\n\n$ curl -X DELETE -H \"Authorization: Bearer <bearer_token>\" \"quay-server.example.com/api/v1/repository/<namespace>/<repository_name>\"\n\nThe CLI does not return information when deleting a repository from the CLI. To confirm deletion, you can check the Red Hat Quay UI, or you can enter the following GET /api/v1/repository/{repository} command to see if details are returned for the deleted repository:\n\n$ curl -X GET -H \"Authorization: Bearer <bearer_token>\" \"quay-server.example.com/api/v1/repository/<namespace>/<repository_name>\"\n\nExample output\n\n{\"detail\": \"Not Found\", \"error_message\": \"Not Found\", \"error_type\": \"not_found\", \"title\": \"not_found\", \"type\": \"http://quay-server.example.com/api/v1/error/not_found\", \"status\": 404}\n\nChapter 5. Red Hat Quay Robot Account overview\n\nRobot Accounts are used to set up automated access to the repositories in your Red Hat Quay registry. They are similar to OpenShift Container Platform service accounts.\n\nSetting up a Robot Account results in the following:\n\nCredentials are generated that are associated with the Robot Account.\n\nRepositories and images that the Robot Account can push and pull images from are identified.\n\nGenerated credentials can be copied and pasted to use with different container clients, such as Docker, Podman, Kubernetes, Mesos, and so on, to access each defined repository.\n\nEach Robot Account is limited to a single user namespace or Organization. For example, the Robot Account could provide access to all repositories for the user quayadmin. However, it cannot provide access to repositories that are not in the user’s list of repositories.\n\nRobot Accounts can be created using the Red Hat Quay UI, or through the CLI using the Red Hat Quay API.\n\n5.1. Creating a robot account by using the UI\n\nUse the following procedure to create a robot account using the v2 UI.\n\nProcedure\n\nOn the v2 UI, click Organizations.\n\nClick the name of the organization that you will create the robot account for, for example, test-org.\n\nClick the Robot accounts tab → Create robot account.\n\nIn the Provide a name for your robot account box, enter a name, for example, robot1. The name of your Robot Account becomes a combination of your username plus the name of the robot, for example, quayadmin+robot1\n\nOptional. The following options are available if desired:\n\nAdd the robot account to a team.\n\nAdd the robot account to a repository.\n\nAdjust the robot account’s permissions.\n\nOn the Review and finish page, review the information you have provided, then click Review and finish. The following alert appears: Successfully created robot account with robot name: <organization_name> + <robot_name>.\n\nAlternatively, if you tried to create a robot account with the same name as another robot account, you might receive the following error message: Error creating robot account.\n\nOptional. You can click Expand or Collapse to reveal descriptive information about the robot account.\n\nOptional. You can change permissions of the robot account by clicking the kebab menu → Set repository permissions. The following message appears: Successfully updated repository permission.\n\nOptional. You can click the name of your robot account to obtain the following information:\n\nRobot Account: Select this obtain the robot account token. You can regenerate the token by clicking Regenerate token now.\n\nKubernetes Secret: Select this to download credentials in the form of a Kubernetes pull secret YAML file.\n\nPodman: Select this to copy a full podman login command line that includes the credentials.\n\nDocker Configuration: Select this to copy a full docker login command line that includes the credentials.\n\n5.5. Regenerating a robot account token by using the Red Hat Quay API\n\nUse the following procedure to regenerate a robot account token using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to regenerate a robot account token for an organization using the POST /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate endpoint:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ \"quay-server.example.com/api/v1/organization/<orgname>/robots/<robot_shortname>/regenerate\"\n\nExample output\n\n{\"name\": \"test-org+test\", \"created\": \"Fri, 10 May 2024 17:46:02 -0000\", \"last_accessed\": null, \"description\": \"\", \"token\": \"MXZ9DATUWRD8WCMT8AZIPYE0IEZHJJ1B8P8ZEIXC0W552DUMMTNJJH02HFGXTOVG\"}\n\nEnter the following command to regenerate a robot account token for the current user with the POST /api/v1/user/robots/{robot_shortname}/regenerate endpoint:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ \"quay-server.example.com/api/v1/user/robots/<robot_shortname>/regenerate\"\n\nExample output\n\n{\"name\": \"quayadmin+test\", \"created\": \"Fri, 10 May 2024 14:12:11 -0000\", \"last_accessed\": null, \"description\": \"\", \"token\": \"CWLBVAODE61IXNDJ40GERFOZPB3ARZDRCP4X70ID1NB28AI0OOJBTR9S4M0ACYMD\"}\n\n5.6. Deleting a robot account by using the UI\n\nUse the following procedure to delete a robot account using the Red Hat Quay UI.\n\nProcedure\n\nLog into your Red Hat Quay registry:\n\nClick the name of the Organization that has the robot account.\n\nClick Robot accounts.\n\nCheck the box of the robot account to be deleted.\n\nClick the kebab menu.\n\nClick Delete.\n\nType confirm into the textbox, then click Delete.\n\n5.7. Deleting a robot account by using the Red Hat Quay API\n\nUse the following procedure to delete a robot account using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to delete a robot account for an organization using the DELETE /api/v1/organization/{orgname}/robots/{robot_shortname} endpoint:\n\ncurl -X DELETE \\ -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/robots/<robot_shortname>\"\n\nThe CLI does not return information when deleting a robot account with the API. To confirm deletion, you can check the Red Hat Quay UI, or you can enter the following GET /api/v1/organization/{orgname}/robots command to see if details are returned for the robot account:\n\n$ curl -X GET -H \"Authorization: Bearer <bearer_token>\" \"https://<quay-server.example.com>/api/v1/organization/<organization_name>/robots\"\n\nExample output\n\n{\"robots\": []}\n\nEnter the following command to delete a robot account for the current user with the DELETE /api/v1/user/robots/{robot_shortname} endpoint:\n\ncurl -X DELETE \\ -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" \\ \"quay-server.example.com/api/v1/user/robots/<robot_shortname>\"\n\nThe CLI does not return information when deleting a robot account for the current user with the API. To confirm deletion, you can check the Red Hat Quay UI, or you can enter the following GET /api/v1/user/robots/{robot_shortname} command to see if details are returned for the robot account:\n\n$ curl -X GET \\ -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" \\ \"quay-server.example.com/api/v1/user/robots/<robot_shortname>\"\n\nExample output\n\n{\"message\":\"Could not find robot with specified username\"}\n\nChapter 6. Access management for Red Hat Quay\n\nAs a Red Hat Quay user, you can create your own repositories and make them accessible to other users that are part of your instance. Alternatively, you can create an organization and associate a set of repositories directly to that organization, referred to as an organization repository.\n\nOrganization repositories differ from basic repositories in that the organization is intended to set up shared repositories through groups of users. In Red Hat Quay, groups of users can be either Teams, or sets of users with the same permissions, or individual users. You can also allow access to user repositories and organization repositories by creating credentials associated with Robot Accounts. Robot Accounts make it easy for a variety of container clients, such as Docker or Podman, to access your repositories without requiring that the client have a Red Hat Quay user account.\n\n6.1. Red Hat Quay teams overview\n\nIn Red Hat Quay a team is a group of users with shared permissions, allowing for efficient management and collaboration on projects. Teams can help streamline access control and project management within organizations and repositories. They can be assigned designated permissions and help ensure that members have the appropriate level of access to their repositories based on their roles and responsibilities.\n\n6.1.1. Creating a team by using the UI\n\nWhen you create a team for your organization you can select the team name, choose which repositories to make available to the team, and decide the level of access to the team.\n\nUse the following procedure to create a team for your organization repository.\n\nPrerequisites\n\nYou have created an organization.\n\nProcedure\n\nOn the Red Hat Quay v2 UI, click the name of an organization.\n\nOn your organization’s page, click Teams and membership.\n\nClick the Create new team box.\n\nIn the Create team popup window, provide a name for your new team.\n\nOptional. Provide a description for your new team.\n\nClick Proceed. A new popup window appears.\n\nOptional. Add this team to a repository, and set the permissions to one of the following:\n\nNone. Team members have no permission to the repository.\n\nRead. Team members can view and pull from the repository.\n\nWrite. Team members can read (pull) from and write (push) to the repository.\n\nAdmin. Full access to pull from, and push to, the repository, plus the ability to do administrative tasks associated with the repository.\n\nOptional. Add a team member or robot account. To add a team member, enter the name of their Red Hat Quay account.\n\nReview and finish the information, then click Review and Finish. The new team appears under the Teams and membership page.\n\n6.1.2. Creating a team by using the API\n\nWhen you create a team for your organization with the API you can select the team name, choose which repositories to make available to the team, and decide the level of access to the team.\n\nUse the following procedure to create a team for your organization repository.\n\nPrerequisites\n\nYou have created an organization.\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to create a team for your organization:\n\n$ ------------------------------ $ curl -k -X PUT -H 'Accept: application/json' -H 'Content-Type: application/json' -H \"Authorization: Bearer <bearer_token>\" --data '{\"role\": \"creator\"}' https://<quay-server.example.com>/api/v1/organization/<organization_name>/team/<team_name>\n\nExample output\n\n{\"name\": \"example_team\", \"description\": \"\", \"can_view\": true, \"role\": \"creator\", \"avatar\": {\"name\": \"example_team\", \"hash\": \"dec209fd7312a2284b689d4db3135e2846f27e0f40fa126776a0ce17366bc989\", \"color\": \"#e7ba52\", \"kind\": \"team\"}, \"new_team\": true}\n\n6.1.3. Managing a team by using the UI\n\nAfter you have created a team, you can use the UI to manage team members, set repository permissions, delete the team, or view more general information about the team.\n\n6.1.3.1. Adding users to a team by using the UI\n\nWith administrative privileges to an Organization, you can add users and robot accounts to a team. When you add a user, Red Hat Quay sends an email to that user. The user remains pending until they accept the invitation.\n\nUse the following procedure to add users or robot accounts to a team.\n\nProcedure\n\nOn the Red Hat Quay landing page, click the name of your Organization.\n\nIn the navigation pane, click Teams and Membership.\n\nSelect the menu kebab of the team that you want to add users or robot accounts to. Then, click Manage team members.\n\nClick Add new member.\n\nIn the textbox, enter information for one of the following:\n\nA username from an account on the registry.\n\nThe email address for a user account on the registry.\n\nThe name of a robot account. The name must be in the form of <organization_name>+<robot_name>.\n\nNote\n\nRobot Accounts are immediately added to the team. For user accounts, an invitation to join is mailed to the user. Until the user accepts that invitation, the user remains in the INVITED TO JOIN state. After the user accepts the email invitation to join the team, they move from the INVITED TO JOIN list to the MEMBERS list for the Organization.\n\nClick Add member.\n\n6.1.3.2. Setting a team role by using the UI\n\nAfter you have created a team, you can set the role of that team within the Organization.\n\nPrerequisites\n\nYou have created a team.\n\nProcedure\n\nOn the Red Hat Quay landing page, click the name of your Organization.\n\nIn the navigation pane, click Teams and Membership.\n\nSelect the TEAM ROLE drop-down menu, as shown in the following figure:\n\nFor the selected team, choose one of the following roles:\n\nAdmin. Full administrative access to the organization, including the ability to create teams, add members, and set permissions.\n\nMember. Inherits all permissions set for the team.\n\nCreator. All member permissions, plus the ability to create new repositories.\n\n6.1.3.2.1. Managing team members and repository permissions\n\nUse the following procedure to manage team members and set repository permissions.\n\nOn the Teams and membership page of your organization, you can also manage team members and set repository permissions.\n\nClick the kebab menu, and select one of the following options:\n\nManage Team Members. On this page, you can view all members, team members, robot accounts, or users who have been invited. You can also add a new team member by clicking Add new member.\n\nSet repository permissions. On this page, you can set the repository permissions to one of the following:\n\nNone. Team members have no permission to the repository.\n\nRead. Team members can view and pull from the repository.\n\nWrite. Team members can read (pull) from and write (push) to the repository.\n\nAdmin. Full access to pull from, and push to, the repository, plus the ability to do administrative tasks associated with the repository.\n\nDelete. This popup windows allows you to delete the team by clicking Delete.\n\n6.1.3.2.2. Viewing additional information about a team\n\nUse the following procedure to view general information about the team.\n\nProcedure\n\nOn the Teams and membership page of your organization, you can click the one of the following options to reveal more information about teams, members, and collaborators:\n\nTeam View. This menu shows all team names, the number of members, the number of repositories, and the role for each team.\n\nMembers View. This menu shows all usernames of team members, the teams that they are part of, the repository permissions of the user.\n\nCollaborators View. This menu shows repository collaborators. Collaborators are users that do not belong to any team in the organization, but who have direct permissions on one or more repositories belonging to the organization.\n\n6.1.4. Managing a team by using the Red Hat Quay API\n\nAfter you have created a team, you can use the API to obtain information about team permissions or team members, add, update, or delete team members (including by email), or delete an organization team.\n\nThe following procedures show you how to how to manage a team using the Red Hat Quay API.\n\n6.1.4.1. Managing team members and repository permissions by using the API\n\nUse the following procedures to add a member to a team (by direct invite or by email), or to remove a member from a team.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the PUT /api/v1/organization/{orgname}/team/{teamname}/members/{membername} command to add or invite a member to an existing team:\n\n$ curl -X PUT \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/members/<member_name>\"\n\nExample output\n\n{\"name\": \"testuser\", \"kind\": \"user\", \"is_robot\": false, \"avatar\": {\"name\": \"testuser\", \"hash\": \"d51d17303dc3271ac3266fb332d7df919bab882bbfc7199d2017a4daac8979f0\", \"color\": \"#5254a3\", \"kind\": \"user\"}, \"invited\": false}\n\nEnter the DELETE /api/v1/organization/{orgname}/team/{teamname}/members/{membername} command to remove a member of a team:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/members/<member_name>\"\n\nThis command does not an output in the CLI. To ensure that a member has been deleted, you can enter the GET /api/v1/organization/{orgname}/team/{teamname}/members command and ensure that the member is not returned in the output.\n\n$ curl -X GET \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/members\"\n\nExample output\n\n{\"name\": \"owners\", \"members\": [{\"name\": \"quayadmin\", \"kind\": \"user\", \"is_robot\": false, \"avatar\": {\"name\": \"quayadmin\", \"hash\": \"b28d563a6dc76b4431fc7b0524bbff6b810387dac86d9303874871839859c7cc\", \"color\": \"#17becf\", \"kind\": \"user\"}, \"invited\": false}, {\"name\": \"test-org+test\", \"kind\": \"user\", \"is_robot\": true, \"avatar\": {\"name\": \"test-org+test\", \"hash\": \"aa85264436fe9839e7160bf349100a9b71403a5e9ec684d5b5e9571f6c821370\", \"color\": \"#8c564b\", \"kind\": \"robot\"}, \"invited\": false}], \"can_edit\": true}\n\nYou can enter the PUT /api/v1/organization/{orgname}/team/{teamname}/invite/{email} command to invite a user, by email address, to an existing team:\n\n$ curl -X PUT \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/invite/<email>\"\n\nYou can enter the DELETE /api/v1/organization/{orgname}/team/{teamname}/invite/{email} command to delete the invite of an email address to join a team. For example:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/invite/<email>\"\n\n6.1.4.2. Setting the role of a team within an organization by using the API\n\nUse the following procedure to view and set the role a team within an organization using the API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to return a list of repository permissions for the organization’s team. Note that your team must have been added to a repository for this command to return information.\n\n$ curl -X GET \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>/permissions\"\n\nExample output\n\n{\"permissions\": [{\"repository\": {\"name\": \"api-repo\", \"is_public\": true}, \"role\": \"admin\"}]}\n\nYou can create or update a team within an organization to have a specified role of admin, member, or creator. For example:\n\n$ curl -X PUT \\ -H \"Authorization: Bearer <your_access_token>\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"role\": \"<role>\" }' \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>\"\n\nExample output\n\n{\"name\": \"testteam\", \"description\": \"\", \"can_view\": true, \"role\": \"creator\", \"avatar\": {\"name\": \"testteam\", \"hash\": \"827f8c5762148d7e85402495b126e0a18b9b168170416ed04b49aae551099dc8\", \"color\": \"#ff7f0e\", \"kind\": \"team\"}, \"new_team\": false}\n\n6.1.4.3. Deleting a team within an organization by using the API\n\nUse the following procedure to delete a team within an organization by using the API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nYou can delete a team within an organization by entering the DELETE /api/v1/organization/{orgname}/team/{teamname} command:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer <your_access_token>\" \\ \"quay-server.example.com/api/v1/organization/<organization_name>/team/<team_name>\"\n\nThis command does not return output in the CLI.\n\n6.2. Creating and managing default permissions by using the UI\n\nDefault permissions define permissions that should be granted automatically to a repository when it is created, in addition to the default of the repository’s creator. Permissions are assigned based on the user who created the repository.\n\nUse the following procedure to create default permissions using the Red Hat Quay v2 UI.\n\nProcedure\n\nClick the name of an organization.\n\nClick Default permissions.\n\nClick Create default permissions. A toggle drawer appears.\n\nSelect either Anyone or Specific user to create a default permission when a repository is created.\n\nIf selecting Anyone, the following information must be provided:\n\nApplied to. Search, invite, or add a user/robot/team.\n\nPermission. Set the permission to one of Read, Write, or Admin.\n\nIf selecting Specific user, the following information must be provided:\n\nRepository creator. Provide either a user or robot account.\n\nApplied to. Provide a username, robot account, or team name.\n\nPermission. Set the permission to one of Read, Write, or Admin.\n\nClick Create default permission. A confirmation box appears, returning the following alert: Successfully created default permission for creator.\n\n6.3. Creating and managing default permissions by using the API\n\nUse the following procedures to manage default permissions using the Red Hat Quay API.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following command to create a default permission with the POST /api/v1/organization/{orgname}/prototypes endpoint:\n\n$ curl -X POST -H \"Authorization: Bearer <bearer_token>\" -H \"Content-Type: application/json\" --data '{ \"role\": \"<admin_read_or_write>\", \"delegate\": { \"name\": \"<username>\", \"kind\": \"user\" }, \"activating_user\": { \"name\": \"<robot_name>\" } }' https://<quay-server.example.com>/api/v1/organization/<organization_name>/prototypes\n\nExample output\n\n{\"activating_user\": {\"name\": \"test-org+test\", \"is_robot\": true, \"kind\": \"user\", \"is_org_member\": true, \"avatar\": {\"name\": \"test-org+test\", \"hash\": \"aa85264436fe9839e7160bf349100a9b71403a5e9ec684d5b5e9571f6c821370\", \"color\": \"#8c564b\", \"kind\": \"robot\"}}, \"delegate\": {\"name\": \"testuser\", \"is_robot\": false, \"kind\": \"user\", \"is_org_member\": false, \"avatar\": {\"name\": \"testuser\", \"hash\": \"f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a\", \"color\": \"#6b6ecf\", \"kind\": \"user\"}}, \"role\": \"admin\", \"id\": \"977dc2bc-bc75-411d-82b3-604e5b79a493\"}\n\nEnter the following command to update a default permission using the PUT /api/v1/organization/{orgname}/prototypes/{prototypeid} endpoint, for example, if you want to change the permission type. You must include the ID that was returned when you created the policy.\n\n$ curl -X PUT \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ --data '{ \"role\": \"write\" }' \\ https://<quay-server.example.com>/api/v1/organization/<organization_name>/prototypes/<prototypeid>\n\nExample output\n\n{\"activating_user\": {\"name\": \"test-org+test\", \"is_robot\": true, \"kind\": \"user\", \"is_org_member\": true, \"avatar\": {\"name\": \"test-org+test\", \"hash\": \"aa85264436fe9839e7160bf349100a9b71403a5e9ec684d5b5e9571f6c821370\", \"color\": \"#8c564b\", \"kind\": \"robot\"}}, \"delegate\": {\"name\": \"testuser\", \"is_robot\": false, \"kind\": \"user\", \"is_org_member\": false, \"avatar\": {\"name\": \"testuser\", \"hash\": \"f660ab912ec121d1b1e928a0bb4bc61b15f5ad44d5efdc4e1c92a25e99b8e44a\", \"color\": \"#6b6ecf\", \"kind\": \"user\"}}, \"role\": \"write\", \"id\": \"977dc2bc-bc75-411d-82b3-604e5b79a493\"}\n\nYou can delete the permission by entering the DELETE /api/v1/organization/{orgname}/prototypes/{prototypeid} command:\n\ncurl -X DELETE \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ https://<quay-server.example.com>/api/v1/organization/<organization_name>/prototypes/<prototype_id>\n\nThis command does not return an output. Instead, you can obtain a list of all permissions by entering the GET /api/v1/organization/{orgname}/prototypes command:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ https://<quay-server.example.com>/api/v1/organization/<organization_name>/prototypes\n\nExample output\n\n{\"prototypes\": []}\n\n6.4. Adjusting access settings for a repository by using the UI\n\nUse the following procedure to adjust access settings for a user or robot account for a repository using the v2 UI.\n\nPrerequisites\n\nYou have created a user account or robot account.\n\nProcedure\n\nLog into Red Hat Quay.\n\nOn the v2 UI, click Repositories.\n\nClick the name of a repository, for example, quayadmin/busybox.\n\nClick the Settings tab.\n\nOptional. Click User and robot permissions. You can adjust the settings for a user or robot account by clicking the dropdown menu option under Permissions. You can change the settings to Read, Write, or Admin.\n\nRead. The User or Robot Account can view and pull from the repository.\n\nWrite. The User or Robot Account can read (pull) from and write (push) to the repository.\n\nAdmin. The User or Robot account has access to pull from, and push to, the repository, plus the ability to do administrative tasks associated with the repository.\n\n6.5. Adjusting access settings for a repository by using the API\n\nUse the following procedure to adjust access settings for a user or robot account for a repository by using the API.\n\nPrerequisites\n\nYou have created a user account or robot account.\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following PUT /api/v1/repository/{repository}/permissions/user/{username} command to change the permissions of a user:\n\n$ curl -X PUT \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ -d '{\"role\": \"admin\"}' \\ https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository>/permissions/user/<username>\n\nExample output\n\n{\"role\": \"admin\", \"name\": \"quayadmin+test\", \"is_robot\": true, \"avatar\": {\"name\": \"quayadmin+test\", \"hash\": \"ca9afae0a9d3ca322fc8a7a866e8476dd6c98de543decd186ae090e420a88feb\", \"color\": \"#8c564b\", \"kind\": \"robot\"}}\n\nTo delete the current permission, you can enter the DELETE /api/v1/repository/{repository}/permissions/user/{username} command:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository>/permissions/user/<username>\n\nThis command does not return any output in the CLI. Instead, you can check that the permissions were deleted by entering the GET /api/v1/repository/{repository}/permissions/user/ command:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository>/permissions/user/<username>/\n\nExample output\n\n{\"message\":\"User does not have permission for repo.\"}\n\nChapter 8. Viewing and exporting logs\n\nActivity logs are gathered for all repositories and namespace in Red Hat Quay.\n\nViewing usage logs of Red Hat Quay. can provide valuable insights and benefits for both operational and security purposes. Usage logs might reveal the following information:\n\nResource Planning: Usage logs can provide data on the number of image pulls, pushes, and overall traffic to your registry.\n\nUser Activity: Logs can help you track user activity, showing which users are accessing and interacting with images in the registry. This can be useful for auditing, understanding user behavior, and managing access controls.\n\nUsage Patterns: By studying usage patterns, you can gain insights into which images are popular, which versions are frequently used, and which images are rarely accessed. This information can help prioritize image maintenance and cleanup efforts.\n\nSecurity Auditing: Usage logs enable you to track who is accessing images and when. This is crucial for security auditing, compliance, and investigating any unauthorized or suspicious activity.\n\nImage Lifecycle Management: Logs can reveal which images are being pulled, pushed, and deleted. This information is essential for managing image lifecycles, including deprecating old images and ensuring that only authorized images are used.\n\nCompliance and Regulatory Requirements: Many industries have compliance requirements that mandate tracking and auditing of access to sensitive resources. Usage logs can help you demonstrate compliance with such regulations.\n\nIdentifying Abnormal Behavior: Unusual or abnormal patterns in usage logs can indicate potential security breaches or malicious activity. Monitoring these logs can help you detect and respond to security incidents more effectively.\n\nTrend Analysis: Over time, usage logs can provide trends and insights into how your registry is being used. This can help you make informed decisions about resource allocation, access controls, and image management strategies.\n\nThere are multiple ways of accessing log files:\n\nViewing logs through the web UI.\n\nExporting logs so that they can be saved externally.\n\nAccessing log entries using the API.\n\nTo access logs, you must have administrative privileges for the selected repository or namespace.\n\nNote\n\nA maximum of 100 log results are available at a time via the API. To gather more results that that, you must use the log exporter feature described in this chapter.\n\n8.1. Viewing usage logs\n\nLogs can provide valuable information about the way that your registry is being used. Logs can be viewed by Organization, repository, or namespace on the v2 UI by using the following procedure.\n\nProcedure\n\nLog in to your Red Hat Quay registry.\n\nNavigate to an Organization, repository, or namespace for which you are an administrator of.\n\nClick Logs.\n\nOptional. Set the date range for viewing log entries by adding dates to the From and To boxes.\n\nOptional. Export the logs by clicking Export. You must enter an email address or a valid callback URL that starts with http:// or https://. This process can take an hour depending on how many logs there are.\n\n8.2. Viewing usage logs by using the API\n\nLogs can be viewed by Organization or repository by using the API. They can also be aggregated (grouped), or listed with more detailed. Logs can also be viewed by user, a specific date range, or by page.\n\n8.2.1. Viewing aggregated logs\n\nAggregated logs can be viewed by Organization, repository, a specific user, or the current user. You can also pass in optional commands like performer, starttime/endtime, and next_page to filter results.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nUse the GET /api/v1/user/aggregatelogs API endpoint to return the aggregated (or grouped) logs for the current user:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"https://<quay-server.example.com>/api/v1/user/aggregatelogs\"\n\nExample output\n\n{\"aggregated\": [{\"kind\": \"create_tag\", \"count\": 1, \"datetime\": \"Tue, 18 Jun 2024 00:00:00 -0000\"}, {\"kind\": \"manifest_label_add\", \"count\": 1, \"datetime\": \"Tue, 18 Jun 2024 00:00:00 -0000\"}, {\"kind\": \"push_repo\", \"count\": 2, \"datetime\": \"Tue, 18 Jun 2024 00:00:00 -0000\"}, {\"kind\": \"revert_tag\", \"count\": 1, \"datetime\": \"Tue, 18 Jun 2024 00:00:00 -0000\"}]}\n\nYou can also pass in the performer and starttime/endtime queries to obtain aggregated logs for a specific user between a specific time period. For example:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"<quay-server.example.com>/api/v1/user/aggregatelogs?performer=<username>&starttime=<MM/DD/YYYY>&endtime=<MM/DD/YYYY>\"\n\nAggregated logs can also be viewed by Organization by using the GET /api/v1/organization/{orgname}/aggregatelogs. For example:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"<quay-server.example.com>/api/v1/organization/{orgname}/aggregatelogs\"\n\nAggregated logs can also be viewed by repository by using the GET /api/v1/repository/{repository}/aggregatelogs command. The following example includes the starttime/endtime fields:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"<quay-server.example.com>/api/v1/repository/<repository_name>/<namespace>/aggregatelogs?starttime=2024-01-01&endtime=2024-06-18\"\"\n\n8.2.2. Viewing detailed logs\n\nDetailed logs can be viewed by Organization, repository, a specific user, or the current user. You can also pass in optional fields like performer, starttime/endtime, and next_page to filter results.\n\nProcedure\n\nUse the GET /api/v1/user/logs API endpoint to return a list of log entries for a user. For example:\n\n$ curl -X GET -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" -H \"Accept: application/json\" \"quay-server.example.com/api/v1/user/logs\"\n\nYou can also pass in the performer and startime/endtime queries to obtain logs for a specific user between a specific time period. For example:\n\n$ curl -X GET -H \"Authorization: Bearer lfV4lVf9qRsyoFnrgEno1umIOrsdp8lPyMnfUDYY\" -H \"Accept: application/json\" \"http://quay-server.example.com/api/v1/user/logs?performer=quayuser&starttime=01/01/2024&endtime=06/18/2024\"\n\nExample output\n\n--- {\"start_time\": \"Mon, 01 Jan 2024 00:00:00 -0000\", \"end_time\": \"Wed, 19 Jun 2024 00:00:00 -0000\", \"logs\": [{\"kind\": \"revert_tag\", \"metadata\": {\"username\": \"quayuser\", \"repo\": \"busybox\", \"tag\": \"test-two\", \"manifest_digest\": \"sha256:57583a1b9c0a7509d3417387b4f43acf80d08cdcf5266ac87987be3f8f919d5d\"}, \"ip\": \"192.168.1.131\", \"datetime\": \"Tue, 18 Jun 2024 18:59:13 -0000\", \"performer\": {\"kind\": \"user\", \"name\": \"quayuser\", \"is_robot\": false, \"avatar\": {\"name\": \"quayuser\", \"hash\": \"b28d563a6dc76b4431fc7b0524bbff6b810387dac86d9303874871839859c7cc\", \"color\": \"#17becf\", \"kind\": \"user\"}}}, {\"kind\": \"push_repo\", \"metadata\": {\"repo\": \"busybox\", \"namespace\": \"quayuser\", \"user-agent\": \"containers/5.30.1 (github.com/containers/image)\", \"tag\": \"test-two\", \"username\": \"quayuser\", } ---\n\nUse the GET /api/v1/organization/{orgname}/logs endpoint to return logs for a specified organization:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"http://<quay-server.example.com>/api/v1/organization/{orgname}/logs\"\n\nUse the GET /api/v1/repository/{repository}/logs endpoint to return logs for a specified repository:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"http://<quay-server.example.com>/api/v1/repository/{repository}/logs\"\n\n8.3. Exporting repository logs by using the UI\n\nYou can obtain a larger number of log files and save them outside of the Red Hat Quay database by using the Export Logs feature. This feature has the following benefits and constraints:\n\nYou can choose a range of dates for the logs you want to gather from a repository.\n\nYou can request that the logs be sent to you by an email attachment or directed to a callback URL.\n\nTo export logs, you must be an administrator of the repository or namespace.\n\n30 days worth of logs are retained for all users.\n\nExport logs only gathers log data that was previously produced. It does not stream logging data.\n\nYour Red Hat Quay instance must be configured for external storage for this feature. Local storage does not work for exporting logs.\n\nWhen logs are gathered and made available to you, you should immediately copy that data if you want to save it. By default, the data expires after one hour.\n\nUse the following procedure to export logs.\n\nProcedure\n\nSelect a repository for which you have administrator privileges.\n\nClick the Logs tab.\n\nOptional. If you want to specify specific dates, enter the range in the From and to boxes.\n\nClick the Export Logs button. An Export Usage Logs pop-up appears, as shown\n\nEnter an email address or callback URL to receive the exported log. For the callback URL, you can use a URL to a specified domain, for example, <webhook.site>.\n\nSelect Confirm to start the process for gather the selected log entries. Depending on the amount of logging data being gathered, this can take anywhere from a few minutes to several hours to complete.\n\nWhen the log export is completed, the one of following two events happens:\n\nAn email is received, alerting you to the available of your requested exported log entries.\n\nA successful status of your log export request from the webhook URL is returned. Additionally, a link to the exported data is made available for you to delete to download the logs.\n\nNote\n\nThe URL points to a location in your Red Hat Quay external storage and is set to expire within one hour. Make sure that you copy the exported logs before the expiration time if you intend to keep your logs.\n\n8.4. Exporting logs by using the API\n\nDetailed logs can be exported to a callback URL or to an email address.\n\nPrerequisites\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nUse the POST /api/v1/user/exportlogs endpoint to export logs for the current user:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -d '{ \"starttime\": \"<MM/DD/YYYY>\", \"endtime\": \"<MM/DD/YYYY>\", \"callback_email\": \"your.email@example.com\" }' \\ \"http://<quay-server.example.com>/api/v1/user/exportlogs\"\n\nExample output\n\n{\"export_id\": \"6a0b9ea9-444c-4a19-9db8-113201c38cd4\"}\n\nUse the POST /api/v1/organization/{orgname}/exportlogs endpoint to export logs for an Organization:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -d '{ \"starttime\": \"<MM/DD/YYYY>\", \"endtime\": \"<MM/DD/YYYY>\", \"callback_email\": \"org.logs@example.com\" }' \\ \"http://<quay-server.example.com>/api/v1/organization/{orgname}/exportlogs\"\n\nUse the POST /api/v1/repository/{repository}/exportlogs endpoint to export logs for a repository:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ -H \"Accept: application/json\" \\ -d '{ \"starttime\": \"2024-01-01\", \"endtime\": \"2024-06-18\", \"callback_url\": \"http://your-callback-url.example.com\" }' \\ \"http://<quay-server.example.com>/api/v1/repository/{repository}/exportlogs\"\n\nChapter 9. Clair security scans\n\nClair security scanner is not enabled for Red Hat Quay by default. To enable Clair, see Clair on Red Hat Quay.\n\nClair security scans can be viewed on the UI, or by the API.\n\nProcedure\n\nNavigate to a repository and click Tags in the navigation pane. This page shows the results of the security scan.\n\nTo reveal more information about multi-architecture images, click See Child Manifests to see the list of manifests in extended view.\n\nClick a relevant link under See Child Manifests, for example, 1 Unknown to be redirected to the Security Scanner page.\n\nThe Security Scanner page provides information for the tag, such as which CVEs the image is susceptible to, and what remediation options you might have available.\n\nNote\n\nImage scanning only lists vulnerabilities found by Clair security scanner. What users do about the vulnerabilities are uncovered is up to said user. Red Hat Quay superusers do not act on found vulnerabilities.\n\n9.1. Viewing Clair security scans by using the UI\n\nYou can view Clair security scans on the UI.\n\nProcedure\n\nNavigate to a repository and click Tags in the navigation pane. This page shows the results of the security scan.\n\nTo reveal more information about multi-architecture images, click See Child Manifests to see the list of manifests in extended view.\n\nClick a relevant link under See Child Manifests, for example, 1 Unknown to be redirected to the Security Scanner page.\n\nThe Security Scanner page provides information for the tag, such as which CVEs the image is susceptible to, and what remediation options you might have available.\n\nNote\n\nImage scanning only lists vulnerabilities found by Clair security scanner. What users do about the vulnerabilities are uncovered is up to said user. Red Hat Quay superusers do not act on found vulnerabilities.\n\n9.2. View Clair security scans by using the UI\n\nYou can view Clair security scans by using the API.\n\nProcedure\n\nUse the GET /api/v1/repository/{repository}/manifest/{manifestref}/security endpoint to retrieve security information about a specific manifest in a repository. For example:\n\n$ curl -X GET \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Accept: application/json\" \\ \"https://quay-server.example.com/api/v1/repository/<namespace>/<repository>/manifest/<manifest_digest>/security?vulnerabilities=<true_or_false>\"\n\nExample output\n\n{\"status\": \"queued\", \"data\": null}\n\nChapter 10. Notifications overview\n\nRed Hat Quay supports adding notifications to a repository for various events that occur in the repository’s lifecycle.\n\n10.1. Notification actions\n\nNotifications are added to the Events and Notifications section of the Repository Settings page. They are also added to the Notifications window, which can be found by clicking the bell icon in the navigation pane of Red Hat Quay.\n\nRed Hat Quay notifications can be setup to be sent to a User, Team, or the organization as a whole.\n\nE-mail notifications\n\nE-mails are sent to specified addresses that describe the specified event. E-mail addresses must be verified on a per-repository basis.\n\nWebhook POST notifications\n\nAn HTTP POST call is made to the specified URL with the event’s data. For more information about event data, see \"Repository events description\".\n\nWhen the URL is HTTPS, the call has an SSL client certificate set from Red Hat Quay. Verification of this certificate proves that the call originated from Red Hat Quay. Responses with the status code in the 2xx range are considered successful. Responses with any other status code are considered failures and result in a retry of the webhook notification.\n\nFlowdock notifications\n\nPosts a message to Flowdock.\n\nHipchat notifications\n\nPosts a message to HipChat.\n\nSlack notifications\n\nPosts a message to Slack.\n\n10.2. Creating notifications by using the UI\n\nUse the following procedure to add notifications.\n\nPrerequisites\n\nYou have created a repository.\n\nYou have administrative privileges for the repository.\n\nProcedure\n\nNavigate to a repository on Red Hat Quay.\n\nIn the navigation pane, click Settings.\n\nIn the Events and Notifications category, click Create Notification to add a new notification for a repository event. The Create notification popup box appears.\n\nOn the Create repository popup box, click the When this event occurs box to select an event. You can select a notification for the following types of events:\n\nPush to Repository\n\nImage build failed\n\nImage build queued\n\nImage build started\n\nImage build success\n\nImage build cancelled\n\nImage expiry trigger\n\nAfter you have selected the event type, select the notification method. The following methods are supported:\n\nQuay Notification\n\nE-mail Notification\n\nWebhook POST\n\nFlowdock Team Notification\n\nHipChat Room Notification\n\nSlack Notification\n\nDepending on the method that you choose, you must include additional information. For example, if you select E-mail, you are required to include an e-mail address and an optional notification title.\n\nAfter selecting an event and notification method, click Create Notification.\n\n10.2.1. Creating an image expiration notification\n\nImage expiration event triggers can be configured to notify users through email, Slack, webhooks, and so on, and can be configured at the repository level. Triggers can be set for images expiring in any amount of days, and can work in conjunction with the auto-pruning feature.\n\nImage expiration notifications can be set by using the Red Hat Quay v2 UI or by using the createRepoNotification API endpoint.\n\nPrerequisites\n\nFEATURE_GARBAGE_COLLECTION: true is set in your config.yaml file.\n\nOptional. FEATURE_AUTO_PRUNE: true is set in your config.yaml file.\n\nProcedure\n\nOn the Red Hat Quay v2 UI, click Repositories.\n\nSelect the name of a repository.\n\nClick Settings → Events and notifications.\n\nClick Create notification. The Create notification popup box appears.\n\nClick the Select event…​ box, then click Image expiry trigger.\n\nIn the When the image is due to expiry in days box, enter the number of days before the image’s expiration when you want to receive an alert. For example, use 1 for 1 day.\n\nIn the Select method…​ box, click one of the following:\n\nE-mail\n\nWebhook POST\n\nFlowdock Team Notification\n\nHipChat Room Notification\n\nSlack Notification\n\nDepending on which method you chose, include the necessary data. For example, if you chose Webhook POST, include the Webhook URL.\n\nOptional. Provide a POST JSON body template.\n\nOptional. Provide a Title for your notification.\n\nClick Submit. You are returned to the Events and notifications page, and the notification now appears.\n\nOptional. You can set the NOTIFICATION_TASK_RUN_MINIMUM_INTERVAL_MINUTES variable in your config.yaml file. with this field set, if there are any expiring images notifications will be sent automatically. By default, this is set to 300, or 5 hours, however it can be adjusted as warranted.\n\nNOTIFICATION_TASK_RUN_MINIMUM_INTERVAL_MINUTES: 300 1\n\n1\n\nBy default, this field is set to 300, or 5 hours.\n\nVerification\n\nClick the menu kebab → Test Notification. The following message is returned:\n\nTest Notification Queued A test version of this notification has been queued and should appear shortly\n\nDepending on which method you chose, check your e-mail, webhook address, Slack channel, and so on. The information sent should look similar to the following example:\n\n{ \"repository\": \"sample_org/busybox\", \"namespace\": \"sample_org\", \"name\": \"busybox\", \"docker_url\": \"quay-server.example.com/sample_org/busybox\", \"homepage\": \"http://quay-server.example.com/repository/sample_org/busybox\", \"tags\": [ \"latest\", \"v1\" ], \"expiring_in\": \"1 days\" }\n\n10.3. Creating notifications by using the API\n\nUse the following procedure to add notifications.\n\nPrerequisites\n\nYou have created a repository.\n\nYou have administrative privileges for the repository.\n\nYou have Created an OAuth access token.\n\nYou have set BROWSER_API_CALLS_XHR_ONLY: false in your config.yaml file.\n\nProcedure\n\nEnter the following POST /api/v1/repository/{repository}/notification command to create a notification on your repository:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ -H \"Content-Type: application/json\" \\ --data '{ \"event\": \"<event>\", \"method\": \"<method>\", \"config\": { \"<config_key>\": \"<config_value>\" }, \"eventConfig\": { \"<eventConfig_key>\": \"<eventConfig_value>\" } }' \\ https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository_name>/notification/\n\nThis command does not return output in the CLI. Instead, you can enter the following GET /api/v1/repository/{repository}/notification/{uuid} command to obtain information about the repository notification:\n\n{\"uuid\": \"240662ea-597b-499d-98bb-2b57e73408d6\", \"title\": null, \"event\": \"repo_push\", \"method\": \"quay_notification\", \"config\": {\"target\": {\"name\": \"quayadmin\", \"kind\": \"user\", \"is_robot\": false, \"avatar\": {\"name\": \"quayadmin\", \"hash\": \"b28d563a6dc76b4431fc7b0524bbff6b810387dac86d9303874871839859c7cc\", \"color\": \"#17becf\", \"kind\": \"user\"}}}, \"event_config\": {}, \"number_of_failures\": 0}\n\nYou can test your repository notification by entering the following POST /api/v1/repository/{repository}/notification/{uuid}/test command:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ https://<quay-server.example.com>/api/v1/repository/<repository>/notification/<uuid>/test\n\nExample output\n\n{}\n\nYou can reset repository notification failures to 0 by entering the following POST /api/v1/repository/{repository}/notification/{uuid} command:\n\n$ curl -X POST \\ -H \"Authorization: Bearer <bearer_token>\" \\ https://<quay-server.example.com>/api/v1/repository/<repository>/notification/<uuid>\n\nEnter the following DELETE /api/v1/repository/{repository}/notification/{uuid} command to delete a repository notification:\n\n$ curl -X DELETE \\ -H \"Authorization: Bearer <bearer_token>\" \\ https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository_name>/notification/<uuid>\n\nThis command does not return output in the CLI. Instead, you can enter the following GET /api/v1/repository/{repository}/notification/{uuid} command to retrieve a list of all notifications:\n\n$ curl -X GET -H \"Authorization: Bearer <bearer_token>\" -H \"Accept: application/json\" https://<quay-server.example.com>/api/v1/repository/<namespace>/<repository_name>/notification/\n\nExample output\n\n{\"notifications\": []}\n\n10.4. Repository events description\n\nThe following sections detail repository events.\n\nRepository Push\n\nA successful push of one or more images was made to the repository:\n\n{ \"name\": \"repository\", \"repository\": \"dgangaia/test\", \"namespace\": \"dgangaia\", \"docker_url\": \"quay.io/dgangaia/test\", \"homepage\": \"https://quay.io/repository/dgangaia/repository\", \"updated_tags\": [ \"latest\" ] }\n\nDockerfile Build Queued\n\nThe following example is a response from a Dockerfile Build that has been queued into the Build system.\n\nNote\n\nResponses can differ based on the use of optional attributes.\n\n{ \"build_id\": \"296ec063-5f86-4706-a469-f0a400bf9df2\", \"trigger_kind\": \"github\", //Optional \"name\": \"test\", \"repository\": \"dgangaia/test\", \"namespace\": \"dgangaia\", \"docker_url\": \"quay.io/dgangaia/test\", \"trigger_id\": \"38b6e180-9521-4ff7-9844-acf371340b9e\", //Optional \"docker_tags\": [ \"master\", \"latest\" ], \"repo\": \"test\", \"trigger_metadata\": { \"default_branch\": \"master\", \"commit\": \"b7f7d2b948aacbe844ee465122a85a9368b2b735\", \"ref\": \"refs/heads/master\", \"git_url\": \"git@github.com:dgangaia/test.git\", \"commit_info\": { //Optional \"url\": \"https://github.com/dgangaia/test/commit/b7f7d2b948aacbe844ee465122a85a9368b2b735\", \"date\": \"2019-03-06T12:48:24+11:00\", \"message\": \"adding 5\", \"author\": { //Optional \"username\": \"dgangaia\", \"url\": \"https://github.com/dgangaia\", //Optional \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43594254?v=4\" //Optional }, \"committer\": { \"username\": \"web-flow\", \"url\": \"https://github.com/web-flow\", \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19864447?v=4\" } } }, \"is_manual\": false, \"manual_user\": null, \"homepage\": \"https://quay.io/repository/dgangaia/test/build/296ec063-5f86-4706-a469-f0a400bf9df2\" }\n\nDockerfile Build started\n\nThe following example is a response from a Dockerfile Build that has been queued into the Build system.\n\nNote\n\nResponses can differ based on the use of optional attributes.\n\n{ \"build_id\": \"a8cc247a-a662-4fee-8dcb-7d7e822b71ba\", \"trigger_kind\": \"github\", //Optional \"name\": \"test\", \"repository\": \"dgangaia/test\", \"namespace\": \"dgangaia\", \"docker_url\": \"quay.io/dgangaia/test\", \"trigger_id\": \"38b6e180-9521-4ff7-9844-acf371340b9e\", //Optional \"docker_tags\": [ \"master\", \"latest\" ], \"build_name\": \"50bc599\", \"trigger_metadata\": { //Optional \"commit\": \"50bc5996d4587fd4b2d8edc4af652d4cec293c42\", \"ref\": \"refs/heads/master\", \"default_branch\": \"master\", \"git_url\": \"git@github.com:dgangaia/test.git\", \"commit_info\": { //Optional \"url\": \"https://github.com/dgangaia/test/commit/50bc5996d4587fd4b2d8edc4af652d4cec293c42\", \"date\": \"2019-03-06T14:10:14+11:00\", \"message\": \"test build\", \"committer\": { //Optional \"username\": \"web-flow\", \"url\": \"https://github.com/web-flow\", //Optional \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19864447?v=4\" //Optional }, \"author\": { //Optional \"username\": \"dgangaia\", \"url\": \"https://github.com/dgangaia\", //Optional \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43594254?v=4\" //Optional } } }, \"homepage\": \"https://quay.io/repository/dgangaia/test/build/a8cc247a-a662-4fee-8dcb-7d7e822b71ba\" }\n\nDockerfile Build successfully completed\n\nThe following example is a response from a Dockerfile Build that has been successfully completed by the Build system.\n\nNote\n\nThis event occurs simultaneously with a Repository Push event for the built image or images.\n\n{ \"build_id\": \"296ec063-5f86-4706-a469-f0a400bf9df2\", \"trigger_kind\": \"github\", //Optional \"name\": \"test\", \"repository\": \"dgangaia/test\", \"namespace\": \"dgangaia\", \"docker_url\": \"quay.io/dgangaia/test\", \"trigger_id\": \"38b6e180-9521-4ff7-9844-acf371340b9e\", //Optional \"docker_tags\": [ \"master\", \"latest\" ], \"build_name\": \"b7f7d2b\", \"image_id\": \"sha256:0339f178f26ae24930e9ad32751d6839015109eabdf1c25b3b0f2abf8934f6cb\", \"trigger_metadata\": { \"commit\": \"b7f7d2b948aacbe844ee465122a85a9368b2b735\", \"ref\": \"refs/heads/master\", \"default_branch\": \"master\", \"git_url\": \"git@github.com:dgangaia/test.git\", \"commit_info\": { //Optional \"url\": \"https://github.com/dgangaia/test/commit/b7f7d2b948aacbe844ee465122a85a9368b2b735\", \"date\": \"2019-03-06T12:48:24+11:00\", \"message\": \"adding 5\", \"committer\": { //Optional \"username\": \"web-flow\", \"url\": \"https://github.com/web-flow\", //Optional \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19864447?v=4\" //Optional }, \"author\": { //Optional \"username\": \"dgangaia\", \"url\": \"https://github.com/dgangaia\", //Optional \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43594254?v=4\" //Optional } } }, \"homepage\": \"https://quay.io/repository/dgangaia/test/build/296ec063-5f86-4706-a469-f0a400bf9df2\", \"manifest_digests\": [ \"quay.io/dgangaia/test@sha256:2a7af5265344cc3704d5d47c4604b1efcbd227a7a6a6ff73d6e4e08a27fd7d99\", \"quay.io/dgangaia/test@sha256:569e7db1a867069835e8e97d50c96eccafde65f08ea3e0d5debaf16e2545d9d1\" ] }\n\nDockerfile Build failed\n\nThe following example is a response from a Dockerfile Build that has failed.\n\n{ \"build_id\": \"5346a21d-3434-4764-85be-5be1296f293c\", \"trigger_kind\": \"github\", //Optional \"name\": \"test\", \"repository\": \"dgangaia/test\", \"docker_url\": \"quay.io/dgangaia/test\", \"error_message\": \"Could not find or parse Dockerfile: unknown instruction: GIT\", \"namespace\": \"dgangaia\", \"trigger_id\": \"38b6e180-9521-4ff7-9844-acf371340b9e\", //Optional \"docker_tags\": [ \"master\", \"latest\" ], \"build_name\": \"6ae9a86\", \"trigger_metadata\": { //Optional \"commit\": \"6ae9a86930fc73dd07b02e4c5bf63ee60be180ad\", \"ref\": \"refs/heads/master\", \"default_branch\": \"master\", \"git_url\": \"git@github.com:dgangaia/test.git\", \"commit_info\": { //Optional \"url\": \"https://github.com/dgangaia/test/commit/6ae9a86930fc73dd07b02e4c5bf63ee60be180ad\", \"date\": \"2019-03-06T14:18:16+11:00\", \"message\": \"failed build test\", \"committer\": { //Optional \"username\": \"web-flow\", \"url\": \"https://github.com/web-flow\", //Optional \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19864447?v=4\" //Optional }, \"author\": { //Optional \"username\": \"dgangaia\", \"url\": \"https://github.com/dgangaia\", //Optional \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43594254?v=4\" //Optional } } }, \"homepage\": \"https://quay.io/repository/dgangaia/test/build/5346a21d-3434-4764-85be-5be1296f293c\" }\n\nDockerfile Build cancelled\n\nThe following example is a response from a Dockerfile Build that has been cancelled.\n\n{ \"build_id\": \"cbd534c5-f1c0-4816-b4e3-55446b851e70\", \"trigger_kind\": \"github\", \"name\": \"test\", \"repository\": \"dgangaia/test\", \"namespace\": \"dgangaia\", \"docker_url\": \"quay.io/dgangaia/test\", \"trigger_id\": \"38b6e180-9521-4ff7-9844-acf371340b9e\", \"docker_tags\": [ \"master\", \"latest\" ], \"build_name\": \"cbce83c\", \"trigger_metadata\": { \"commit\": \"cbce83c04bfb59734fc42a83aab738704ba7ec41\", \"ref\": \"refs/heads/master\", \"default_branch\": \"master\", \"git_url\": \"git@github.com:dgangaia/test.git\", \"commit_info\": { \"url\": \"https://github.com/dgangaia/test/commit/cbce83c04bfb59734fc42a83aab738704ba7ec41\", \"date\": \"2019-03-06T14:27:53+11:00\", \"message\": \"testing cancel build\", \"committer\": { \"username\": \"web-flow\", \"url\": \"https://github.com/web-flow\", \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19864447?v=4\" }, \"author\": { \"username\": \"dgangaia\", \"url\": \"https://github.com/dgangaia\", \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43594254?v=4\" } } }, \"homepage\": \"https://quay.io/repository/dgangaia/test/build/cbd534c5-f1c0-4816-b4e3-55446b851e70\" }\n\nVulnerability detected\n\nThe following example is a response from a Dockerfile Build has detected a vulnerability in the repository.\n\n{ \"repository\": \"dgangaia/repository\", \"namespace\": \"dgangaia\", \"name\": \"repository\", \"docker_url\": \"quay.io/dgangaia/repository\", \"homepage\": \"https://quay.io/repository/dgangaia/repository\", \"tags\": [\"latest\", \"othertag\"], \"vulnerability\": { \"id\": \"CVE-1234-5678\", \"description\": \"This is a bad vulnerability\", \"link\": \"http://url/to/vuln/info\", \"priority\": \"Critical\", \"has_fix\": true } }\n\nChapter 11. Automatically building Dockerfiles with Build workers\n\nRed Hat Quay supports building Dockerfiles using a set of worker nodes on OpenShift Container Platform or Kubernetes. Build triggers, such as GitHub webhooks, can be configured to automatically build new versions of your repositories when new code is committed.\n\nThis document shows you how to enable Builds with your Red Hat Quay installation, and set up one more more OpenShift Container Platform or Kubernetes clusters to accept Builds from Red Hat Quay.\n\n11.1. Setting up Red Hat Quay Builders with OpenShift Container Platform\n\nYou must pre-configure Red Hat Quay Builders prior to using it with OpenShift Container Platform.\n\n11.1.1. Configuring the OpenShift Container Platform TLS component\n\nThe tls component allows you to control TLS configuration.\n\nNote\n\nRed Hat Quay does not support Builders when the TLS component is managed by the Red Hat Quay Operator.\n\nIf you set tls to unmanaged, you supply your own ssl.cert and ssl.key files. In this instance, if you want your cluster to support Builders, you must add both the Quay route and the Builder route name to the SAN list in the certificate; alternatively you can use a wildcard.\n\nTo add the builder route, use the following format:\n\n[quayregistry-cr-name]-quay-builder-[ocp-namespace].[ocp-domain-name]\n\n11.1.2. Preparing OpenShift Container Platform for Red Hat Quay Builders\n\nPrepare Red Hat Quay Builders for OpenShift Container Platform by using the following procedure.\n\nPrerequisites\n\nYou have configured the OpenShift Container Platform TLS component.\n\nProcedure\n\nEnter the following command to create a project where Builds will be run, for example, builder:\n\n$ oc new-project builder\n\nCreate a new ServiceAccount in the the builder namespace by entering the following command:\n\n$ oc create sa -n builder quay-builder\n\nEnter the following command to grant a user the edit role within the builder namespace:\n\n$ oc policy add-role-to-user -n builder edit system:serviceaccount:builder:quay-builder\n\nEnter the following command to retrieve a token associated with the quay-builder service account in the builder namespace. This token is used to authenticate and interact with the OpenShift Container Platform cluster’s API server.\n\n$ oc sa get-token -n builder quay-builder\n\nIdentify the URL for the OpenShift Container Platform cluster’s API server. This can be found in the OpenShift Container Platform Web Console.\n\nIdentify a worker node label to be used when schedule Build jobs. Because Build pods need to run on bare metal worker nodes, typically these are identified with specific labels.\n\nCheck with your cluster administrator to determine exactly which node label should be used.\n\nOptional. If the cluster is using a self-signed certificate, you must get the Kube API Server’s certificate authority (CA) to add to Red Hat Quay’s extra certificates.\n\nEnter the following command to obtain the name of the secret containing the CA:\n\n$ oc get sa openshift-apiserver-sa --namespace=openshift-apiserver -o json | jq '.secrets[] | select(.name | contains(\"openshift-apiserver-sa-token\"))'.name\n\nObtain the ca.crt key value from the secret in the OpenShift Container Platform Web Console. The value begins with \"-----BEGIN CERTIFICATE-----\"`.\n\nImport the CA to Red Hat Quay. Ensure that the name of this file matches K8S_API_TLS_CA.\n\nCreate the following SecurityContextConstraints resource for the ServiceAccount:\n\napiVersion: security.openshift.io/v1 kind: SecurityContextConstraints metadata: name: quay-builder priority: null readOnlyRootFilesystem: false requiredDropCapabilities: null runAsUser: type: RunAsAny seLinuxContext: type: RunAsAny seccompProfiles: - '*' supplementalGroups: type: RunAsAny volumes: - '*' allowHostDirVolumePlugin: true allowHostIPC: true allowHostNetwork: true allowHostPID: true allowHostPorts: true allowPrivilegeEscalation: true allowPrivilegedContainer: true allowedCapabilities: - '*' allowedUnsafeSysctls: - '*' defaultAddCapabilities: null fsGroup: type: RunAsAny --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: quay-builder-scc namespace: builder rules: - apiGroups: - security.openshift.io resourceNames: - quay-builder resources: - securitycontextconstraints verbs: - use --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: quay-builder-scc namespace: builder subjects: - kind: ServiceAccount name: quay-builder roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: quay-builder-scc\n\n11.1.3. Configuring Red Hat Quay Builders\n\nUse the following procedure to enable Red Hat Quay Builders.\n\nProcedure\n\nEnsure that your Red Hat Quay config.yaml file has Builds enabled, for example:\n\nFEATURE_BUILD_SUPPORT: True\n\nAdd the following information to your Red Hat Quay config.yaml file, replacing each value with information that is relevant to your specific installation:\n\nBUILD_MANAGER: - ephemeral - ALLOWED_WORKER_COUNT: 1 ORCHESTRATOR_PREFIX: buildman/production/ ORCHESTRATOR: REDIS_HOST: quay-redis-host REDIS_PASSWORD: quay-redis-password REDIS_SSL: true REDIS_SKIP_KEYSPACE_EVENT_SETUP: false EXECUTORS: - EXECUTOR: kubernetes BUILDER_NAMESPACE: builder K8S_API_SERVER: api.openshift.somehost.org:6443 K8S_API_TLS_CA: /conf/stack/extra_ca_certs/build_cluster.crt VOLUME_SIZE: 8G KUBERNETES_DISTRIBUTION: openshift CONTAINER_MEMORY_LIMITS: 5120Mi CONTAINER_CPU_LIMITS: 1000m CONTAINER_MEMORY_REQUEST: 3968Mi CONTAINER_CPU_REQUEST: 500m NODE_SELECTOR_LABEL_KEY: beta.kubernetes.io/instance-type NODE_SELECTOR_LABEL_VALUE: n1-standard-4 CONTAINER_RUNTIME: podman SERVICE_ACCOUNT_NAME: ***** SERVICE_ACCOUNT_TOKEN: ***** QUAY_USERNAME: quay-username QUAY_PASSWORD: quay-password WORKER_IMAGE: <registry>/quay-quay-builder WORKER_TAG: some_tag BUILDER_VM_CONTAINER_IMAGE: <registry>/quay-quay-builder-qemu-rhcos:v3.4.0 SETUP_TIME: 180 MINIMUM_RETRY_THRESHOLD: 0 SSH_AUTHORIZED_KEYS: - ssh-rsa 12345 someuser@email.com - ssh-rsa 67890 someuser2@email.com\n\nFor more information about each configuration field, see\n\n11.2. OpenShift Container Platform Routes limitations\n\nThe following limitations apply when you are using the Red Hat Quay Operator on OpenShift Container Platform with a managed route component:\n\nCurrently, OpenShift Container Platform Routes are only able to serve traffic to a single port. Additional steps are required to set up Red Hat Quay Builds.\n\nEnsure that your kubectl or oc CLI tool is configured to work with the cluster where the Red Hat Quay Operator is installed and that your QuayRegistry exists; the QuayRegistry does not have to be on the same bare metal cluster where Builders run.\n\nEnsure that HTTP/2 ingress is enabled on the OpenShift cluster by following these steps.\n\nThe Red Hat Quay Operator creates a Route resource that directs gRPC traffic to the Build manager server running inside of the existing Quay pod, or pods. If you want to use a custom hostname, or a subdomain like <builder-registry.example.com>, ensure that you create a CNAME record with your DNS provider that points to the status.ingress[0].host of the create Route resource. For example:\n\n$ kubectl get -n <namespace> route <quayregistry-name>-quay-builder -o jsonpath={.status.ingress[0].host}\n\nUsing the OpenShift Container Platform UI or CLI, update the Secret referenced by spec.configBundleSecret of the QuayRegistry with the Build cluster CA certificate. Name the key extra_ca_cert_build_cluster.cert. Update the config.yaml file entry with the correct values referenced in the Builder configuration that you created when you configured Red Hat Quay Builders, and add the BUILDMAN_HOSTNAME CONFIGURATION FIELD:\n\nBUILDMAN_HOSTNAME: <build-manager-hostname> 1 BUILD_MANAGER: - ephemeral - ALLOWED_WORKER_COUNT: 1 ORCHESTRATOR_PREFIX: buildman/production/ JOB_REGISTRATION_TIMEOUT: 600 ORCHESTRATOR: REDIS_HOST: <quay_redis_host REDIS_PASSWORD: <quay_redis_password> REDIS_SSL: true REDIS_SKIP_KEYSPACE_EVENT_SETUP: false EXECUTORS: - EXECUTOR: kubernetes BUILDER_NAMESPACE: builder ...\n\n1\n\nThe externally accessible server hostname which the build jobs use to communicate back to the Build manager. Default is the same as SERVER_HOSTNAME. For OpenShift Route, it is either status.ingress[0].host or the CNAME entry if using a custom hostname. BUILDMAN_HOSTNAME must include the port number, for example, somehost:443 for an OpenShift Container Platform Route, as the gRPC client used to communicate with the build manager does not infer any port if omitted.\n\n11.3. Troubleshooting Builds\n\nThe Builder instances started by the Build manager are ephemeral. This means that they will either get shut down by Red Hat Quay on timeouts or failure, or garbage collected by the control plane (EC2/K8s). In order to obtain the Build logs, you must do so while the Builds are running.\n\n11.3.1. DEBUG config flag\n\nThe DEBUG flag can be set to true in order to prevent the Builder instances from getting cleaned up after completion or failure. For example:\n\nEXECUTORS: - EXECUTOR: ec2 DEBUG: true ... - EXECUTOR: kubernetes DEBUG: true ...\n\nWhen set to true, the debug feature prevents the Build nodes from shutting down after the quay-builder service is done or fails. It also prevents the Build manager from cleaning up the instances by terminating EC2 instances or deleting Kubernetes jobs. This allows debugging Builder node issues.\n\nDebugging should not be set in a production cycle. The lifetime service still exists; for example, the instance still shuts down after approximately two hours. When this happens, EC2 instances are terminated, and Kubernetes jobs are completed.\n\nEnabling debug also affects the ALLOWED_WORKER_COUNT, because the unterminated instances and jobs still count toward the total number of running workers. As a result, the existing Builder workers must be manually deleted if ALLOWED_WORKER_COUNT is reached to be able to schedule new Builds.\n\nSetting DEBUG will also affect ALLOWED_WORKER_COUNT, as the unterminated instances/jobs will still count towards the total number of running workers. This means the existing builder workers will need to manually be deleted if ALLOWED_WORKER_COUNT is reached to be able to schedule new Builds.\n\n11.3.2. Troubleshooting OpenShift Container Platform and Kubernetes Builds\n\nUse the following procedure to troubleshooting OpenShift Container Platform Kubernetes Builds.\n\nProcedure\n\nCreate a port forwarding tunnel between your local machine and a pod running with either an OpenShift Container Platform cluster or a Kubernetes cluster by entering the following command:\n\n$ oc port-forward <builder_pod> 9999:2222\n\nEstablish an SSH connection to the remote host using a specified SSH key and port, for example:\n\n$ ssh -i /path/to/ssh/key/set/in/ssh_authorized_keys -p 9999 core@localhost\n\nObtain the quay-builder service logs by entering the following commands:\n\n$ systemctl status quay-builder\n\n$ journalctl -f -u quay-builder\n\n11.4. Setting up Github builds\n\nIf your organization plans to have Builds be conducted by pushes to Github, or Github Enterprise, continue with Creating an OAuth application in GitHub.\n\nChapter 12. Building container images\n\nBuilding container images involves creating a blueprint for a containerized application. Blueprints rely on base images from other public repositories that define how the application should be installed and configured.\n\nRed Hat Quay supports the ability to build Docker and Podman container images. This functionality is valuable for developers and organizations who rely on container and container orchestration.\n\n12.1. Build contexts\n\nWhen building an image with Docker or Podman, a directory is specified to become the build context. This is true for both manual Builds and Build triggers, because the Build that is created by Red Hat Quay is not different than running docker build or podman build on your local machine.\n\nRed Hat Quay Build contexts are always specified in the subdirectory from the Build setup, and fallback to the root of the Build source if a directory is not specified.\n\nWhen a build is triggered, Red Hat Quay Build workers clone the Git repository to the worker machine, and then enter the Build context before conducting a Build.\n\nFor Builds based on .tar archives, Build workers extract the archive and enter the Build context. For example:\n\nExtracted Build archive\n\nexample ├── .git ├── Dockerfile ├── file └── subdir └── Dockerfile\n\nImagine that the Extracted Build archive is the directory structure got a Github repository called example. If no subdirectory is specified in the Build trigger setup, or when manually starting the Build, the Build operates in the example directory.\n\nIf a subdirectory is specified in the Build trigger setup, for example, subdir, only the Dockerfile within it is visible to the Build. This means that you cannot use the ADD command in the Dockerfile to add file, because it is outside of the Build context.\n\nUnlike Docker Hub, the Dockerfile is part of the Build context on Red Hat Quay. As a result, it must not appear in the .dockerignore file.\n\n12.2. Tag naming for Build triggers\n\nCustom tags are available for use in Red Hat Quay.\n\nOne option is to include any string of characters assigned as a tag for each built image. Alternatively, you can use the following tag templates on the Configure Tagging section of the build trigger to tag images with information from each commit:\n\n${commit}: Full SHA of the issued commit\n\n${parsed_ref.branch}: Branch information (if available)\n\n${parsed_ref.tag}: Tag information (if available)\n\n${parsed_ref.remote}: The remote name\n\n${commit_info.date}: Date when the commit was issued\n\n${commit_info.author.username}: Username of the author of the commit\n\n${commit_info.short_sha}: First 7 characters of the commit SHA\n\n${committer.properties.username}: Username of the committer\n\nThis list is not complete, but does contain the most useful options for tagging purposes. You can find the complete tag template schema on this page.\n\nFor more information, see Set up custom tag templates in build triggers for Red Hat Quay and Quay.io\n\n12.3. Skipping a source control-triggered build\n\nTo specify that a commit should be ignored by the Red Hat Quay build system, add the text [skip build] or [build skip] anywhere in your commit message.\n\n12.4. Viewing and managing builds\n\nRepository Builds can be viewed and managed on the Red Hat Quay UI.\n\nProcedure\n\nNavigate to a Red Hat Quay repository using the UI.\n\nIn the navigation pane, select Builds.\n\n12.5. Creating a new Build\n\nRed Hat Quay can create new Builds so long as FEATURE_BUILD_SUPPORT is set to to true in their config.yaml file.\n\nPrerequisites\n\nYou have navigated to the Builds page of your repository.\n\nFEATURE_BUILD_SUPPORT is set to to true in your config.yaml file.\n\nProcedure\n\nOn the Builds page, click Start New Build.\n\nWhen prompted, click Upload Dockerfile to upload a Dockerfile or an archive that contains a Dockerfile at the root directory.\n\nClick Start Build.\n\nNote\n\nCurrently, users cannot specify the Docker build context when manually starting a build.\n\nCurrently, BitBucket is unsupported on the Red Hat Quay v2 UI.\n\nYou are redirected to the Build, which can be viewed in real-time. Wait for the Dockerfile Build to be completed and pushed.\n\nOptional. you can click Download Logs to download the logs, or Copy Logs to copy the logs.\n\nClick the back button to return to the Repository Builds page, where you can view the Build History.\n\n12.6. Build triggers\n\nBuild triggers invoke builds whenever the triggered condition is met, for example, a source control push, creating a webhook call, and so on.\n\n12.6.1. Creating a Build trigger\n\nUse the following procedure to create a Build trigger using a custom Git repository.\n\nNote\n\nThe following procedure assumes that you have not included Github credentials in your config.yaml file.\n\nPrerequisites\n\nYou have navigated to the Builds page of your repository.\n\nProcedure\n\nOn the Builds page, click Create Build Trigger.\n\nSelect the desired platform, for example, Github, BitBucket, Gitlab, or use a custom Git repository. For this example, we are using a custom Git repository from Github.\n\nEnter a custom Git repository name, for example, git@github.com:<username>/<repo>.git. Then, click Next.\n\nWhen prompted, configure the tagging options by selecting one of, or both of, the following options:\n\nTag manifest with the branch or tag name. When selecting this option, the built manifest the name of the branch or tag for the git commit are tagged.\n\nAdd latest tag if on default branch. When selecting this option, the built manifest with latest if the build occurred on the default branch for the repository are tagged.\n\nOptionally, you can add a custom tagging template. There are multiple tag templates that you can enter here, including using short SHA IDs, timestamps, author names, committer, and branch names from the commit as tags. For more information, see \"Tag naming for Build triggers\".\n\nAfter you have configured tagging, click Next.\n\nWhen prompted, select the location of the Dockerfile to be built when the trigger is invoked. If the Dockerfile is located at the root of the git repository and named Dockerfile, enter /Dockerfile as the Dockerfile path. Then, click Next.\n\nWhen prompted, select the context for the Docker build. If the Dockerfile is located at the root of the Git repository, enter / as the build context directory. Then, click Next.\n\nOptional. Choose an optional robot account. This allows you to pull a private base image during the build process. If you know that a private base image is not used, you can skip this step.\n\nClick Next. Check for any verification warnings. If necessary, fix the issues before clicking Finish.\n\nYou are alerted that the trigger has been successfully activated. Note that using this trigger requires the following actions:\n\nYou must give the following public key read access to the git repository.\n\nYou must set your repository to POST to the following URL to trigger a build.\n\nSave the SSH Public Key, then click Return to <organization_name>/<repository_name>. You are redirected to the Builds page of your repository.\n\nOn the Builds page, you now have a Build trigger. For example:\n\n12.6.2. Manually triggering a Build\n\nBuilds can be triggered manually by using the following procedure.\n\nProcedure\n\nOn the Builds page, Start new build.\n\nWhen prompted, select Invoke Build Trigger.\n\nClick Run Trigger Now to manually start the process.\n\nAfter the build starts, you can see the Build ID on the Repository Builds page.\n\n12.7. Setting up a custom Git trigger\n\nA custom Git trigger is a generic way for any Git server to act as a Build trigger. It relies solely on SSH keys and webhook endpoints. Everything else is left for the user to implement.\n\n12.7.1. Creating a trigger\n\nCreating a custom Git trigger is similar to the creation of any other trigger, with the exception of the following:\n\nRed Hat Quay cannot automatically detect the proper Robot Account to use with the trigger. This must be done manually during the creation process.\n\nThere are extra steps after the creation of the trigger that must be done. These steps are detailed in the following sections.\n\n12.7.2. Custom trigger creation setup\n\nWhen creating a custom Git trigger, two additional steps are required:\n\nYou must provide read access to the SSH public key that is generated when creating the trigger.\n\nYou must setup a webhook that POSTs to the Red Hat Quay endpoint to trigger the build.\n\nThe key and the URL are available by selecting View Credentials from the Settings, or gear icon.\n\nView and modify tags from your repository\n\n12.7.2.1. SSH public key access\n\nDepending on the Git server configuration, there are multiple ways to install the SSH public key that Red Hat Quay generates for a custom Git trigger.\n\nFor example, Git documentation describes a small server setup in which adding the key to $HOME/.ssh/authorize_keys would provide access for Builders to clone the repository. For any git repository management software that is not officially supported, there is usually a location to input the key often labeled as Deploy Keys.\n\n12.7.2.2. Webhook\n\nTo automatically trigger a build, one must POST a .json payload to the webhook URL using the following format.\n\nThis can be accomplished in various ways depending on the server setup, but for most cases can be done with a post-receive Git Hook.\n\nNote\n\nThis request requires a Content-Type header containing application/json in order to be valid.\n\nExample webhook\n\n{ \"commit\": \"1c002dd\", // required \"ref\": \"refs/heads/master\", // required \"default_branch\": \"master\", // required \"commit_info\": { // optional \"url\": \"gitsoftware.com/repository/commits/1234567\", // required \"message\": \"initial commit\", // required \"date\": \"timestamp\", // required \"author\": { // optional \"username\": \"user\", // required \"avatar_url\": \"gravatar.com/user.png\", // required \"url\": \"gitsoftware.com/users/user\" // required }, \"committer\": { // optional \"username\": \"user\", // required \"avatar_url\": \"gravatar.com/user.png\", // required \"url\": \"gitsoftware.com/users/user\" // required } } }\n\nChapter 13. Creating an OAuth application in GitHub\n\nYou can authorize your Red Hat Quay registry to access a GitHub account and its repositories by registering it as a GitHub OAuth application.\n\n13.1. Create new GitHub application\n\nUse the following procedure to create an OAuth application in Github.\n\nProcedure\n\nLog into Github Enterprise.\n\nIn the navigation pane, select your username → Your organizations.\n\nIn the navigation pane, select Applications.\n\nClick Register New Application. The Register a new OAuth application configuration screen is displayed, for example:\n\nEnter a name for the application in the Application name textbox.\n\nIn the Homepage URL textbox, enter your Red Hat Quay URL.\n\nNote\n\nIf you are using public GitHub, the Homepage URL entered must be accessible by your users. It can still be an internal URL.\n\nIn the Authorization callback URL, enter https://<RED_HAT_QUAY_URL>/oauth2/github/callback.\n\nClick Register application to save your settings.\n\nWhen the new application’s summary is shown, record the Client ID and the Client Secret shown for the new application.\n\nChapter 14. Red Hat Quay quota management and enforcement overview\n\nWith Red Hat Quay, users have the ability to report storage consumption and to contain registry growth by establishing configured storage quota limits. On-premise Red Hat Quay users are now equipped with the following capabilities to manage the capacity limits of their environment:\n\nQuota reporting: With this feature, a superuser can track the storage consumption of all their organizations. Additionally, users can track the storage consumption of their assigned organization.\n\nQuota management: With this feature, a superuser can define soft and hard checks for Red Hat Quay users. Soft checks tell users if the storage consumption of an organization reaches their configured threshold. Hard checks prevent users from pushing to the registry when storage consumption reaches the configured limit.\n\nTogether, these features allow service owners of a Red Hat Quay registry to define service level agreements and support a healthy resource budget.\n\n14.1. Quota management architecture\n\nWith the quota management feature enabled, individual blob sizes are summed at the repository and namespace level. For example, if two tags in the same repository reference the same blob, the size of that blob is only counted once towards the repository total. Additionally, manifest list totals are counted toward the repository total.\n\nImportant\n\nBecause manifest list totals are counted toward the repository total, th"
    }
}