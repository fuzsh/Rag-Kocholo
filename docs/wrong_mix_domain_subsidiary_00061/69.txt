4

Before proceeding, you must install Oracle WebLogic Server 12cwithADF and patches listed in the Chapter 1 of this document. The Oracle Retail Price Management application is deployed to a WebLogic Managed server within the WebLogic installation.

It is assumed Oracle Database has already been configured and loaded with the appropriate Oracle Retail Price Management schemas for your installation.

Installing a separate domain is mandated. It can be called RPMdomain (or something similar) and will be used to install the managed servers. The ADF libraries should be extended to this domain and the Enterprise Manager should be deployed.

Middleware Infrastructure and WebLogic Server12c (12.1.3) Installation

Create a directory to install the WebLogic (this will be the MW_HOME):

Example: mkdir -p /u00/webadmin/products/wls_retail

1.Set the MW_HOME, JAVA_HOME, and DOMAIN_HOME environment variables:

§ MW_HOME should point to your WebLogic installation.

§ JAVA_HOME should point to the Java JDK 1.7+. This is typically the same JDK which is being used by the WebLogic domain where application is getting installed.

§ DOMAIN_HOME should point to the full path of the domain into which application will be installed.

Example:

$ export MW_HOME=/u00/webadmin/products/wls_retail

$ export DOMAIN_HOME=/u00/webadmin/config/domains/wls_retail/APPNAMEDomain

$ export JAVA_HOME=/u00/webadmin/products/jdk_java

(This should point to the Java which is installed on your server)

$ export PATH=$JAVA_HOME/bin:$PATH

Going forward we will use the above references for further installations.

2.Set the system environment variable MW_HOME to the new directory then cd to location where the jar is downloaded and run the installer using the following command:

java -jar ./fmw_12.1.3.0.0_infrastructure.jar

3.Welcome screen appears. Click Next.

4.Enter the following and click Next.

Oracle home =<Path to the middleware home>

Example:

/u00/webadmin/products/wls_retail

5.Select install type Fusion Middleware Infrastructure. Click Next.

This screen will verify that the system meets the minimum necessary requirements.

6.Click Next.

7.If you already have an Oracle Support account, use this screen to indicate how you would like to receive security updates.

8.If you do not have one or if you want to skip this step, clear the check box and verify your selection in the follow-up dialog box.

9.Click Next.

10.Click Next.

11.Click Next.

12.Click Yes, if you wish to remain uninformed of security issues in your configuration.

13.Click Install.

14.Click Next.

15.Click Finish.

16.Continue with RCU installation.

Install RCU Database Schemas

The RCU database schemas are required for the installation of retail application and configuration of domain.

Note: You need SYS user privileges to install the RCU database schemas.

The following steps are provided for the creation of the database schemas:

1.Navigate to the directory into which RCU is installed. For example:

<MW_HOME>/oracle_common/bin/

Run ./rcu

2.Click Next.

3.Select Create Repository and System Load and Product Load. Click Next.

4.Enter database connection details:

§ Database Type: Oracle Database

§ Host Name: dbhostname.us.oracle.com

§ Port: 1521

§ Service Name: dbservicename

§ Username: sys

§ Password: <syspassword>

§ Role: SYSDBA

5.Click Next. The Installer checks prerequisites.

6.When the prerequisite checks are complete, click OK. Click Next.

7.Click theCreate a new prefix option, the prefix name for your schemas should be unique to your application environment.

Example: ReIM, ALLOC, ReSA, etc

8.Select the components to create:

§ Meta Data Services

§ Oracle Platform Security Services

Note: Once OPSS schema is selected, the following dependent schemas will get selected automatically.

Audit Services

Audit Services Append

Audit Services Viewer

Note: STB schema will be already selected as part of the Common Infrastructure component.

9.Click Next.

10.Select Use same passwords for all schemas.

11.Enter your password.

Note: This password is needed at the time of ADF domain creation.

12.Provide the password and clickNext.

13.Click Next. A Repository Creation notification will appear. Click OK.

14.Tablespaces are created, and the progress will be displayed in a pop-up notification. When the operation is completed, click OK.

15.Click Create. The schema is created.

Upon successful creation of database schemas, a screen will appear with all the schemas created.

16.Click Close.

Create a New ADF Domain (with managed server and EM)

To create a new domain and managed server with ADF libraries and EM, follow the below steps:

1.Set the environment variables:

export JAVA_HOME=<JDK_HOME>

(Example:/u00/webadmin/products/jdk_java) [JDK_HOME is the location where jdk has been installed)

export PATH=$JAVA_HOME/bin:$PATH

export ORACLE_HOME=<MW_HOME>/oracle_common (Example:/u00/webadmin/products/wls_retail/oracle_common)

cd $MW_HOME/oracle_common/common/bin

(MW_HOME is the location where Weblogic has been installed.)

2.Run the following command:

./config.sh

3.Select Create a new domain.

Domain location: Specify the path to the <DOMAIN_HOME> Example:/u00/webadmin/config/domains/wls_retail/APPNAMEDomain

4.Click Next.

5.Select Create Domain Using Product Templates.

6.Check the following components:

Oracle Enterprise Manager

Note: When Oracle Enterprise Manager component is selected, the following dependent components are selected automatically:

Oracle JRF

Weblogic Coherence Cluster Extension

7.Click Next.

8.Application location: Application directory location. Example: /u00/webadmin/config/applications/wls_retail/APPNAMEDomainClick Next.

9.Provide the WebLogic administrator credentials and click Next:

§ Username: weblogic

§ Password: <Password>

10.Select Domain Mode as Production and the JDK to use (as applicable) and clickNext.

11.Select RCU Data.

§ Vendor: Oracle

§ DBMS/Service: dbservicename

§ Host Name: dbhostname.us.oracle.com

§ Port: 1521

§ Schema Owner: APPNAME_STB (Example: ALLOC_STB, ReSA_STB, etc)

§ Password: <Password>. This password which was used for RCU schema creation.

12.Click the Get RCU Configuration button.

13.Click Next.

14.Click Next and it will test to make sure it can connect to your datasources.

15.Click Next to continue

16.Select advanced configuration for:

§ Administration Server

§ Node manager

§ Managed Servers, Clusters and Coherence

17.Configure the Administration Server:

§ Server Name: <APP name>_AdminServer

§ Listen address: Appserver Hostname or IPAddress of the Appserver Host.

§ Listen port: <Port for Admin Server> Note: The port used here must be a free port.

§ Server Groups: Unspecified

18.Configure Node Manager:

§ Node manager type: Per domain default location

§ Username: weblogic

§ Password: <Password for weblogic>

19.Configure Managed Servers with the ADF template.

20.Click the Add button.

§ Server Name: <appname-server>

§ Listen address: Appserver Hostname or IPAddress of the Appserver Host

§ Listen port: <Port for Managed Server> Note: The port used here must be a free port.

§ Server Groups: JRF-MAN-SVR

21.Skip Configure Clusters and click Next.

22.No change needed. Click Next.

23.Click the Unix Machine tab.

24.Click the Add button. Configure the machine and click Next.

§ Name: apphostname_MACHINE

§ Listen address: apphostname or IPAddress

§ Listen port: <Port for node manager> Note: The port used here must be a free port.

25.Assign the configured Admin server and managed servers to the new machine.

26.Click Create.

27.Click Next.

28.When the process completes, click Finish.

Update the WebLogic.policy:

After the APPNAMEdomain has been created, update <MW_HOME>/wlserver/server/lib/weblogic.policy file with the information below.

Note: If copying the following text from this guide to UNIX, ensure that it is properly formatted in UNIX. Each line entry beginning with "permission" must terminate on the same line with a semi colon. Also, the AdminServer must be restarted for these changes to take effect.

Note: <DOMAIN_HOME> in the example below is the full path of the WebLogic domain; <appname-server> is the RPM managed server created.

grant codeBase file:< DOMAIN_HOME>/servers/<appname-server>/tmp/_WL_user/<context_root>/-" {

permission java.security.AllPermission;

permission oracle.security.jps.service.credstore.CredentialAccessPermission "

credstoressp.credstore", "read,write,update,delete";

permission oracle.security.jps.service.credstore.CredentialAccessPermission "

credstoressp.credstore.*", "read,write,update,delete";

};

grant codeBase "file:<DOMAIN_HOME>/servers/<appname-server>/cache/EJBCompilerCache/-" {

permission java.security.AllPermission;

permission oracle.security.jps.service.credstore.CredentialAccessPermission "credstoressp.credstore", "read,write,update,delete";

permission oracle.security.jps.service.credstore.CredentialAccessPermission "credstoressp.credstore.*", "read,write,update,delete";

};

An example of the full entry that might be entered is:

grant codeBase "file:/u00/webadmin/config/domains/wls_retail/RPMdomain/servers/rpm-server/tmp/_WL_user/rpm15/-" {

permission java.security.AllPermission;

permission oracle.security.jps.service.credstore.CredentialAccessPermission "

credstoressp.credstore", "read,write,update,delete";

permission oracle.security.jps.service.credstore.CredentialAccessPermission "

credstoressp.credstore.*", "read,write,update,delete";

};

grant codeBase "file:/u00/webadmin/config/domains/wls_retail/ RPMdomain/servers/rpm-server/cache/EJBCompilerCache/-" {

permission java.security.AllPermission;

permission oracle.security.jps.service.credstore.CredentialAccessPermission "credstoressp.credstore", "read,write,update,delete";

permission oracle.security.jps.service.credstore.CredentialAccessPermission

"credstoressp.credstore.*", "read,write,update,delete";

};

Start the Node Manager

1.Start the nodemanager from <DOMAIN_HOME>/bin using the following script:

./startNodeManager.sh

Start the AdminServer (admin console)

1.Start the WebLogic Domain (Admin Server) from <DOMAIN_HOME>/bin using the following:

./startWebLogic.sh

Provide weblogic username and password when prompted

Example:

/u00/webadmin/config/domains/wls_retail/RPMdomain/bin/startWebLogic.sh

2.Configure boot.properties for starting the Weblogic domain without prompting to username and password using the following command:

3.Create security folder at <DOMAIN_HOME>/servers/<AdminServer>/ and create boot.properties file under <DOMAIN_HOME>/servers/<AdminServer>/security

The file boot.properties should have the following:

----------------------------------

username=weblogic

password=<password>

------------------------------------

In the above, the password value is the password of WebLogic domain which is given at the time of domain creation.

4.Save the boot.properties file and restart the WebLogic server.

5.Access the Weblogic Admin console

Example: http://<HOST_NAME>:<ADMIN_PORT>/console

In the below screen, provide username=weblogic and password=<weblogic password>

Start the Managed Server

After NodeManager is started, the managed servers can be started via the admin console.

Navigate to Environments -> Servers and click the Control tab. Select rpm-server and click Start.

The Managed Server should be up and running before configuring further steps.

Note: If RPM application hosted on AIX Operating system, then add below JAVA_OPTIONS in setDomainEnv file.

For Example, Navigate to <DOMAIN_HOME>/bin and add below line in setDomainEnv.sh file.

JAVA_OPTIONS="${JAVA_OPTIONS} -Djavax.xml.validation.SchemaFactory:http://www.w3.org/2001/XMLSchema=com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory"

export JAVA_OPTIONS

Configuration of OID LDAP Provider in Weblogic Domain:

Perform the following procedure to create LDAP providers in the domains created in the previous steps

1.Log in to the Administration Console.

http://<host>:<port>/console/

2.In the Domain Structure frame, click Security Realms.

3.In the Realms table, click myrealm. The Settings for myrealm page is displayed.

4.Click the Providers tab.

5.Click Lock & Edit and then click New. The Create a New Authentication Provider page is displayed.

6.Enter OIDAuthenticator in the Name field and select OracleInternetDirectoryAuthenticator as the type. Click OK.

7.All the providers are displayed. Click OIDAuthenticator. Settings of OIDAuthenticator are displayed.

8.Set the Control Flag field to SUFFICIENT and click Save.

9.From the Providers tab, click on DefaultAuthenticator -> Configuration tab -> Common tab. Update the Control Flag to SUFFICIENT.

10.Click Save.

11.From the Providers tab, click the OIDAuthenticator (you just created), in the configuration -> Provider Specific tab enter your LDAP connection details:

The values shown below are examples only. You should match the entries to your OID.

§ Host: <oidhost>

§ Port: <oidport>

§ Principal: cn=orcladmin

§ Credential: <password>

§ Confirm Credential: <password>

§ User Base DN: cn=users,dc=us,dc=oracle,dc=com

§ Check Retrieve credentials as principal.

12.Modify the following:

§ Group Base DN: cn=Groups,dc=us,dc=oracle,dc=com

13. Check Propagate Cause For Login Exception

14.Click Save.

15.Click the Providers tab.

16.Click Reorder.

17.Move OIDAuthenticator to the top of the providers list

18.Click OK.

19.Once your changes are saved, click Activate Changes.

20.Shutdown all servers and restart the admin server using startWebLogic.sh script

Verify and Set OID Authenticator

1.Log in to the Administration Console.

http://<HOST_NAME>:<ADMIN_PORT>/console/

2.In the Domain Structure frame, click Security Realms.

3.In the Realms table, click Default Realm Name. The Settings page is displayed.

4.Click the Providers tab. You must see the OID Provider in that list.

5.Click the Users and Groups tab to see a list of users and groups contained in the configured authentication providers.

Loading LDIF into the OID to Login to RPM Application

1.Make sure that you have access to a working LDAP server.

2.Create an LDAP connection user with the necessary rights to do sub-tree searches on your users and groups respectively. This user can be named anything but RPM.ADMIN is used in this document. This same user should be given as an input for Search User DN on the LDAP Directory Server Details screen while installing the RPM application. This is the user which RPM uses to login to LDAP and perform the necessary search in the LDAP.

3.Load the RPM LDIF files into the OID in order to login to the RPM application

The RPM installation media contains of ldif files with rpm user and group used to login to the application. They are packed in the RPM installer directory:

<INSTALL_DIR>/rpm/application/rpm/ldif

The LDIF files included are just templates and must be modified to fit the structure and conventions of the OID setup for your environment. Once the LDIFs are updated for your configuration they can be loaded into LDAP using the ldapadd tool that is included in the OID installation.

4.Login to OID host and follow the steps

# export ORACLE_HOME=/u00/webadmin/products/wls_idm/Oracle_IDM

# export PATH=$ORACLE_HOME/bin:$PATH

5.To load the RPM Users:

# ldapadd -v -c -h <OID_HOST> -p 3060 -w <ORCLADMIN PASSWORD> -D cn=orcladmin -f RPM_Users.ldif

6.To Load the RPM Group:

# ldapadd -v -c -h <OID_HOST> -p 3060 -w <ORCLADMIN PASSWORD> -D cn=orcladmin -f RPM_Group.ldif

Verify RPM Users and Groups loaded into the OID

1.Login to OID using ODSM console and verify the loaded RPM users and groups as shown below.

For Example:

Login to ODSM

http://<OID_HOST>:<ManagedServer_PORT>/odsm

2.Click Connect to a directory.

3.Create a new connection with OID_HOST, OID_PORT and Admin username and password

Note: Provide SSL port and enable SSL if connection in a secure environment.

4.Navigate to Data browser tab and click on root in left pane data tree. Verify the loaded RPM Users and Groups are displaying under the tree as per data structure in your environment.

Expand the RPM Application Distribution

To expand the RPM application distribution, do the following.

1.Log into the UNIX server as the user who owns the WebLogic installation. Create a new staging directory for the RPM application distribution (rpm15application.zip). There should be a minimum of 2 GB disk space available for the application installation files.

Example: /u00/webadmin/media/rpm

This location is referred to as STAGING_DIR for the remainder of this chapter.

2.Copy rpm15application.zip to STAGING_DIR and extract its contents.

Clustered Installations  Preinstallation Steps

Skip this section if you are not clustering the application server.

If you are installing the RPM application to a clustered WebLogic Application Server environment, there are some extra steps you need to take before running the RPM application installer. In these instructions, the application server node with the ORACLE_HOME you used for the RPM installer is referred to as the master node. All other nodes are referred to as the remote nodes.

1.Before starting the RPM Application Installer, make sure that you are able to start and stop the managed servers that are part of the RPM Application Cluster from the WebLogic Administration Console.

2.When the RPM Application Installer displays the screen in which it asks for the information related to the JMS Provider, we recommend entering these values: input.jms.module = rpmJMSModule

input.taskqueue.name = taskQueue

input.chunkqueue.name = chunkQueue

input.chunkControllerQueue.name = chunkControllerQueue

3.Insert into all remote nodes <MW_HOME>/wlserver/server/lib/weblogic.policy file changes, the same RPM entries for java security permissions you entered on the master node.

Provide the Hibernate 4.3.10 Jar File

The RPM application requires hibernate4 jar files to be installed. These files should be downloaded from http://www.hibernate.org.

Older releases can be downloaded here http://sourceforge.net/projects/hibernate/files/hibernate4/4.3.10.Final

Extract the required Hibernate 4.3.10 jar files and place them within the application servers STAGING_DIR/rpm/application/hibernate4 directory before running the installer. The installer will then install the jar files within the application for you.

The required jars are as follows:

§ hibernate-commons-annotations-4.0.*.jar

§ hibernate-core-4.3.*.jar

§ hibernate-ehcache-4.3.*.jar

§ hibernate-jpa-2.1-api-1.0.*.jar

§ jboss-logging-3.1.*.jar

§ jboss-transaction-api_1.2_spec-1.0.*.jar

The required jar files are located in the <HIBERNATE_EXTRACT_DIR>\hibernate-release-4.3.5.Final.tgz\hibernate-release-4.3.5.Final.tar\hibernate-release-4.3.5.Final\lib\required\directory.

Run the RPM Application Installer

Once you have a WebLogic instance that is configured and started, you can run the RPM application installer. This installer configures and deploys the RPM application and Java WebStart client files.

Note: See Appendix: RPM Application Installer Screens for details on every screen and field in the application installer. The screenshots contain instructions that are necessary to result in a working application.

1.Change directories to STAGING_DIR/rpm/application.

2.Set the ORACLE_HOME, DOMAIN_HOME and JAVA_HOME environment variables. ORACLE_HOME should point to your WebLogic installation. JAVA_HOME should point to the Java 7.0 (1.7.) JDK . DOMAIN_HOME should point to your WebLogic domain.

3.If a secured datasource is going to be configured you also need to set ANT_OPTS so the installer can access the key and trust store that is used for the datasource security:

export ANT_OPTS="-Djavax.net.ssl.keyStore=<PATH TO KEY STORE> -Djavax.net.ssl.keyStoreType=jks -Djavax.net.ssl.keyStorePassword=<KEYSTORE PASSWORD> -Djavax.net.ssl.trustStore=<PATH TO TRUST STORE> -Djavax.net.ssl.trustStoreType=jks -Djavax.net.ssl.trustStorePassword=<TRUSTSTORE PASSWORD>"

An example of this would be:

export ANT_OPTS="-Djavax.net.ssl.keyStore=<MW_HOME>/wlserver/server/lib/msp52278.keystore -Djavax.net.ssl.keyStoreType=jks -Djavax.net.ssl.keyStorePassword=retail123 -Djavax.net.ssl.trustStore=/ u00/webadmin/product/wls_retail /wlserver_10.3/server/lib/msp2278.keystore -Djavax.net.ssl.trustStoreType=jks -Djavax.net.ssl.trustStorePassword=retail123"

4.If you are using an X server such as Exceed, set the DISPLAY environment variable so that you can run the installer in GUI mode (recommended). If you are not using an X server, or the GUI is too slow over your network, unset DISPLAY for text mode.

5.Run the install.sh script. This launches the installer. After installation is complete, a detailed installation log file is created (rpm15install.<timestamp>.log).

Note: The values you enter in the installer screen, Setup Application Users, have specific requirements for RPM to work properly. See the screen description in Appendix: RPM Application Installer Screens for more details. The screenshots contain instructions that are necessary to result in a working application.

6.The installer has an analyze mode that will evaluate all files in the patch against the environment and report on the files that will be updated based on the patch. To run the installer in analyze mode, set the variable ORPATCH_ANALYZE to true.

7.After clicking install, the Analyze tool will generate a report of the files that will be patched if you apply this patch to the selected RETAIL_HOME. A high level report can be found in the log file: STAGING_DIR/rpm/application/log/rpminstall.<timestamp>analyze. Log

The detailed list of patch files can be found in RETAIL_HOME/ orpatch/logs/detail_logs/analyze/details/

Note: Refer Appendix: RPM Application Installer Screens  Analyze Tool section for the installer screens in analyze mode

8.If you are using an X server such as Exceed, set the DISPLAY environment variable so that you can run the installer in GUI mode (recommended). If you are not using an X server, or the GUI is too slow over your network, unset DISPLAY for text mode.

9.Run the install.sh script. This launches the installer. After installation is completed, a detailed installation log file is created (rpminstall.<timestamp>.log).

Resolving Errors Encountered During Application Installation

If the application installer encounters any errors, it halts execution immediately. You can run the installer in silent mode so that you do not have to retype the settings for your environment. See Appendix: Installer Silent Mode in this document for instructions on silent mode.

See Appendix: Common Installation Errors in this document for some common installation errors.

Because the application installation is a full installation every time, any previous partial installations are overwritten by the successful installation.

Clustered Installations  Post-Installation Steps

If you are installing the RPM application to a clustered WebLogic Server environment, there are some extra steps you need to take to complete the installation. In these instructions, the application server with the ORACLE_HOME you used for the RPM installer is referred to as the master server. All other nodes are referred to as the remote servers.

1.The RPM batch files should be copied from the master node to each of the remote nodes under the same path as on the master node. You should take the $DOMAIN_HOME/retail/<rpmdir>/rpm-batch directory and copy it onto the remote nodes under the same path.

2.For retailers who install batch on either node of the cluster, launchRpmBatch.sh script should be modified on each remote node to point to the local RPM instance. The RPM URL is set in the PROVIDER_URL variable. This script is located at $DOMAIN_HOME/retail/<rpmdir>/rpm-batch/scripts/launchRpmBatch.sh.

3.The Oracle Retail Installation creates some security files on $DOMAIN_HOME/retail/<rpm_application_name>/config directory. Copy this directory to each remote node of the Cluster, matching the full path of the location of this directory on main node.

4.The Oracle Retail Installation creates some properties files on $DOMAIN_HOME/retail/<rpm_application_name>/properties directory. Copy this directory to each remote node of the Cluster, matching the full path of the location of this directory on main node.

Review and/or Configure Oracle Single Sign-On

Note: This step is only needed if you plan on setting up the RPM application using Single Sign On (SSO) authentication. This can be skipped if SSO is not going to be configured for this environment. The Oracle Access manager must be configured and the Oracle http server (Webtier and webgate) must be registered into the Oracle Access Manager.

Create the RPM SSO provider in the RPMdomain:

1.Shut down all the servers of the Weblogic Domain created.

2.Once you copy the contents to <INSTALL_DIR> copy the rpm15-security.zip present in <INSTALL_DIR>/ rpm/application/rpm15 to the DOMAIN_HOME/lib and extract its contents in the folder.

3.Start the domain admin server.

4.Log into the WebLogic console.

5.Navigate to: security realms -> myrealm (default realm) -> providers.

6.Start a Lock and Edit session.

7.Click New provider.

8.Select the provider type from the list: RpmWlsSsoAuthenticator.

9.Set the provider name (Default: RpmSsoAuthenticator).

10.Click Ok.

11.Open the new provider configuration.

12.Under Common, set the Control Flag to SUFFICIENT.

13.Click Provider Specific.

14.Check that the GroupName is set to the name of the group used for RPM secure users (rpm_secure_users by default).

15.All other values under the Provider Specific tab can be left as the default value.

16.Click Ok.

17.On the provider list, click Reorder.

18.Move the RpmWlsSsoAuthenticator to the top of the list, or above the DefaultAuthenticator.

19.Click Ok.

20.Click Activate Changes.

21.Shutdown the domain.

22.Start the admin and managed servers for the domain.

After the SSO provider is created in the RPMdomain, you will also have to set the protection of the RPM application resources correctly in the Application Domain that has been registered in the Oracle Access Manager.

In the Webtier/Webgate http server you need to set the mod_wl_ohs.conf file to redirect the http call to where the RPM application has been deployed.

For example, in mod_wl_ohs.conf set:

<Location /rpm-client >

WebLogicCluster <RPMServerhost>:<RPMServerport>

SetHandler weblogic-handler

ErrorPage downtime.html

</Location>

Then in Oracle Access Manager, set the protection of the resources in the Application Domain that has been registered for the RPM application. You must protect the /rpm-client/launch resource and unprotect the rest:

Resource URL: / rpm-client/launch

Protection Level: Protected

Authentication Policy: Protected Resource Policy

Authorization Policy: Protected Resource Policy

Resource URL: / rpm-client/.../*

Protection Level: Excluded

Sign the RPM Client Configuration Jar File

There is some client-side configuration that the installer performs which results in a modified rpm_client_config.jar file after installation. Because of this, the jar file cannot be pre-signed by Oracle. The installer now provides an option to sign the jar by asking some details but if decide not to do it using the installer, the user must sign this jar file after the installer has completed.

The rpm_client_config.jar file is located in $DOMAIN_HOME/servers/<rpm-managedserver>/tmp/_WL_user/rpm/<38o5n1 >/war/lib. Use the jarsigner utility to sign the rpm_client_config.jar file using your alias and keystore.

Example: jarsigner $DOMAIN_HOME/servers/rpm-managedserver/tmp/_WL_user/rpm/<38o5n1> /war/ lib/rpm_client_config.jar foo

If you are clustering the application server you need to copy the signed rpm_client_config.jar file to the same path under $ORACLE_HOME on all remote nodes.

Consult the jarsigner documentation from Sun for further information on the JAR signing process.

You also need to sign in same jar file inside WebLaunchServlet.war which can be found in the rpm15.ear location in the stage directory of the managed server. Copy the ear file in a temporary location extract the ear files sign the jar file and compress them again and replace it with the one in the staging directory. The above is needed to avoid unsigned entries in jar after restarting the server in the future. Once you restart the weblogic server, files will re-loaded from the once in stage directory. Hence these steps are needed.

Transaction Timeout

This section describes how to establish settings for a transaction timeout. A transaction timeout is the maximum duration, in seconds, for transactions on the application server. Any transaction that is not required to complete before this timeout is rolled back.

To set up transaction timeouts, complete these steps:

1.Log in to the WebLogic Server 12.1.3 Administration Console.

2.Click on the Domain link.

3.Under Configuration, click JTA.

4.Click Lock and Edit.

5.Set the Timeout Seconds (for example, 600 seconds).

6.Click Activate Changes.

Backups Created by Installer

The RPM application installer backs up previous batch, JMS bindings, and WebStart client installations by renaming them with <timestamp> suffixes. This is done to prevent the removal of any custom changes you might have. These backup directories can be safely removed without affecting the current installation.

Examples: rpm-batch.200605011726, sbynjndi.200605011726, rpm.200605011726

Test the RPM Application

After the application installer finishes, a working RPM application installation should result, if the users were created properly.

For LDAP authentication, the application will not log you in properly unless you have a row for the users in question in the database on the rsm_user_role table. The following is an example of how to add rows if they have not been added.

insert into rsm_user_role

(id, user_id, role_id, start_date_time, end_date_time)

select rsm_user_role_seq.nextval,

'retail.user',

-1001,

nvl(get_vdate,sysdate) - 365,

null

from dual;

If problems occur when trying to start the RPM application, ensure proxies are turned off.

To launch the application client, open a Web browser and access the JnlpLaunchServlet, naming the RPM JNLP template file (rpm_jnlp_template.vm).

Example: http://appserver1:MS_PORT/rpm-client/ launch?template=rpm_jnlp_template.vm

When you are in the RPM application, do the following to add a rpm_system_options row required by RPM for system use.

1.On the left side of the screen, select System Options.

2.Select System Options Edit.

3.In the lower right part of the screen, click Save.

4.To add an rpm_system_options_def row required by RPM needs for system use, do the following.

5.Select System Defaults Edit.

6.In the lower right part of the screen, click Save.

RPM Batch Scripts

The RPM application installer configures and installs the batch scripts under <retail_home>/rpm-batch. . You will run the RPM java batch pgms with a java wallet alias (for example, RETAIL.USER1) that you created in the installer screens. The following is an example execution of a RPM java batch script.

./<RPMbatchscriptname>.sh RETAIL.USER1

Note: Make sure that JAVA_HOME is set to the appropriate Java JDK (the same JDK that has been used by WebLogic Server) and ORACLE_HOME is set to weblogic installation before running the RPM batch programs.

RPM Batch Scripts that call sqlplus (plsql batch)

In some RPM batch scripts sqlplus is called, so a profile should be set up for this user. A prerequisite for this would be Oracle database or Oracle client installed on the server. The below example assumes that a batch user rpmbatch was created in the Oracle Wallet (different from the Java wallet) and added to the tnsnames.ora, as explained in Appendix: Setting Up Password Stores with Oracle Wallet.

The batch scripts calling sqlplus are as follows:

clearancePriceChangePublishExport.sh

dataConversionSeedFutureRetail.sh

nightlyBatchCleanup.sh

priceEventExecutionForChunkCCEmergencyEvents.sh

priceEventItemListPurgeBatch.sh

primaryZoneModificationsBatch.sh

promotionPriceChangePublishExport.sh

purgeConCheckResultsErrorData.sh

purgeExpiredExecutedOrApprovedClearancesBatch.sh

purgePayloadsBatch.sh

purgeRPMBatchRunHistory.sh

purgeTxnExclusionSkulistWS.sh

purgeUnusedAndAbandonedClearancesBatch.sh

regularPriceChangePublishExport.sh

RPMtoORPOSPublishBatch.sh

RPMtoORPOSPublishExport.sh

stagePromosForExtDashboard.sh

Example profile.sh

#!/bin/sh

#Need the Oracle Home set to aim at ORACLE Client or db on which the server RPM # is installed on

ORACLE_HOME=/u00/oracle/product/12.1.0.2

#Java Home for the Oracle install

JAVA_HOME=$ORACLE_HOME/jdk

#Add the Oracle and Java bins to path

PATH=$ORACLE_HOME/bin:$JAVA_HOME/bin:$PATH

export PATH ORACLE_HOME JAVA_HOME

#Path to directory with tnsnames.ora, ewallet.p12, cwallet.sso &

#sqlnet.ora (You will build these files as explained in Appendix E Setting #Up Password Stores with Oracle Wallet)

TNS_ADMIN=/u00/webadmin/product/10.3.x/WLS/user_projects/domains/APPDomain/retail/rpm15/config/wallet

export TNS_ADMIN

echo "ORACLE_HOME=${ORACLE_HOME}"

echo "JAVA_HOME=${JAVA_HOME}"

echo "PATH=${PATH}"

To source the profile above, do the following:

$ . ./profile.sh

While running the plsql batch script the connect string as follows (/@rpmbatch that you created using the instructions in Appendix: Setting Up Password Stores with Oracle Wallet.

./RPMtoORPOSPublishExport.sh /@rpmbatch 0 log error

Online Help

The application installer automatically installs online help to the proper location. It is accessible from the help links within the application.

Adding a User to the RPM Application

For LDAP authentication, complete the following steps.

1.Build/copy existing RPM user in LDAP to the new user name you desire. User in LDAP for RPM must have objectclass, retailUser, as there is a search filter on that objectclass name of retailUser.

2.Insert row to database table:

insert into rsm_user_role

(id, user_id, role_id, start_date_time, end_date_time)

select rsm_user_role_seq.nextval,

'retail.user1',

-1001,

nvl(get_vdate,sysdate) - 365,

null

from dual;

5

Oracle Retail Patching Process

The patching process for many Oracle Retail products has been substantially revised from prior releases. Automated tools are available to reduce the amount of manual steps when applying patches. To support and complement this automation, more information about the environment is now tracked and retained between patches. This information is used to allow subsequent patches to identify and skip changes which have already been made to the environment. For example, the patching process uses a database manifest table to skip database change scripts which have already been executed.

The enhanced product patching process incorporates the following:

§ Utilities to automate the application of Oracle Retail patches to environments.

§ Unified patches so that a single patch can be applied against Database, Forms, Java applications, Batch, etc. installations.

§ Database and Environment manifests track versions of files at a module level.

§ Centralized configuration distinguishes installation types (Database, Forms, Java, Batch, etc.).

§ Patch inventory tracks the patches applied to an environment.

These enhancements make installing and updating Oracle Retail product installations easier and reduce opportunities for mistakes. Some of these changes add additional considerations to patching and maintaining Oracle Retail product environments. Additional details on these considerations are found in later sections.

Supported Products and Technologies

With version 15.0, several products and technologies are supported by the enhanced patching process. The utilities, processes and procedures described here are supported with the following products and listed technologies:

Product

Supported Technology

Oracle Retail Merchandising System (RMS)

§ Database scripts

§ Batch scripts

§ RETL scripts

§ Data Conversion Scripts

§ Forms

§ BI Publisher Reports

Oracle Retail Warehouse Management System (RWMS)

§ Database scripts

§ Batch scripts

§ Forms

§ BI Publisher Reports

Oracle Retail Price Management (RPM)

§ Database scripts (included with RMS)

§ Java Application

§ Batch scripts

Oracle Retail Invoice Matching (ReIM)

§ Database scripts (included with RMS)

§ Java Application

§ Batch scripts

Oracle Retail Allocation

§ Database scripts (included with RMS)

§ Java Application

§ Batch scripts

Oracle Retail Sales Audit (ReSA)

§ Database scripts (included with RMS)

§ Java Application

Oracle Retail Insights (RI)

Previously called Oracle Retail Analytics (RA)

§ Database scripts

Oracle Retail Advanced Science Engine (ORASE)

§ Database scripts

§ Batch scripts

Oracle Retail Data Extractor (RDE)

§ Database scripts

Oracle Retail Application Admin Console (ORAAC). Previously called Oracle Retail Application Security Role Manager (RASRM)

§ Java Application

Patch Concepts

During the lifecycle of an Oracle Retail environment, patches are applied to maintain your system. This maintenance may be necessary to resolve a specific issue, add new functionality, update to the latest patch level, add support for new technologies, or other reasons.

A patch refers to a collection of files to apply to an environment. Patches could be cumulative, such as the 15.0.1 release, or incremental, such as a hot fix for just a few modules. Patches may contain updates for some or all components of a product installation including database, application code, forms, and batch. In a distributed architecture the same patch may need to be applied to multiple systems in order to patch all of the components. For example, if a patch contains both database and application changes, the patch would need to be applied to both the database server and the application server.

The top-level directory for the installation of an Oracle Retail product is referred to as the RETAIL_HOME. Underneath RETAIL_HOME are all of the files related to that product installation, as well as configuration and metadata necessary for the Oracle Retail Patch Assistant to maintain those files. In some cases the runtime application files also exist under RETAIL_HOME. For example, the compiled RMS forms, compiled RMS batch files, or Java Application batch scripts.

Patching Utility Overview

Patches are applied and tracked using utilities that are specifically designed for this purpose. The primary utility is described briefly below and additional information is available in later sections.

Oracle Retail Patch Assistant (ORPatch)

ORPatch is the utility used to apply patches to an Oracle Retail product installation. It is used in the background by the installer when creating a new installation or applying a cumulative patch. It is used directly to apply an incremental patch to an environment.

Oracle Retail Merge Patch (ORMerge)

ORMerge is a utility to allow multiple patches to be combined into a single patch. Applying patches individually may require some steps to be repeated. Merging multiple patches together allows these steps to be run only once. For example, applying several incremental patches to database packages will recompile invalid objects with each patch. Merging the patches into a single patch before applying them will allow invalid objects to be recompiled only once.

Oracle Retail Compile Patch (ORCompile)

ORCompile is a utility to compile components of Oracle Retail products outside of a patch. It allows RMS Forms, RMS Batch, and RWMS Forms to be fully recompiled even if no patch has been applied. It also contains functionality to recompile invalid database objects in product schemas.

Oracle Retail Deploy Patch (ORDeploy)

ORDeploy is a utility to deploy components of Oracle Retail Java products outside of a patch. It allows RPM, ReIM, Allocation and ReSA java applications to be redeployed to WebLogic even if a patch has not been applied. It contains functionality to optionally include or not include Java customizations when redeploying.

Changes with 15.0

Some products and technologies are supported by the enhanced patching process for the first time in 15.0. In those cases all of the content in this chapter is new with 15.0.

Renamed Products

For the 15.0 release several products using Orpatch have been renamed. Oracle Retail Analytics (RA) is renamed to Oracle Retail Insights (RI) and Oracle Retail Application Security Role Manager (RASRM) is renamed to Oracle Retail Application Admin Console (ORAAC). The old product names are still used in the underlying Orpatch code, the Orpatch Action names, the Orpatch env_info.cfg, and the Orpatch wallet paths. Documentation for these products will refer to the new names.

Patching Considerations

Patch Types

Oracle Retail produces two types of patches for their products: cumulative and incremental.

Cumulative Patches

A cumulative patch includes all of the files necessary to patch an environment to a specific level or build a new environment at that level. Examples of cumulative patches would be 15.0.1, 15.0.2, and so on. Cumulative patches come with a standard Oracle Retail installer and so can be applied to an environment with the installer rather than with ORPatch or other utilities.

Incremental Patches

An incremental patch includes only selected files necessary to address a specific issue or add a feature. Examples of incremental patches would be a hot fix for a specific defect. Incremental patches do not include an installer and must be applied with ORPatch.

Incremental Patch Structure

An Oracle Retail incremental patch generally contains several files and one or more subdirectories. The subdirectories contain the contents of the patch, while the individual files contain information about the patch and metadata necessary for patching utilities to correctly apply the patch. The most important files in the top-level directory are the README.txt, the manifest files.

README File

The README.txt file contains information about the incremental patch and how to apply it. This may include manual steps that are necessary before, after or while applying the patch. It will also contain instructions on applying the patch with ORPatch.

Manifest Files

Each patch contains manifest files which contain metadata about the contents of a patch and are used by ORPatch to determine the actions necessary to apply a patch. Patches should generally be run against all installations a product in an environment, and ORPatch will only apply the changes from the patch that are relevant to that installation.

Note: Cumulative patches use a different patch structure because they include a full installer which will run ORPatch automatically.

Version Tracking

The patching infrastructure for 15.0 tracks version information for all files involved with a product installation. The RETAIL_HOME contains files which track the revision of all files within the RETAIL_HOME including batch, forms, database, Java archives and other files. In addition, records of database scripts that have been applied to the product database objects are kept within each database schema.

Apply all Patches with Installer or ORPatch

In order to ensure that environment metadata is accurate all patches must be applied to the Oracle Retail product installation using patching utilities. For cumulative patches this is done automatically by the installer. For incremental patches ORPatch must be used directly. This is especially important if database changes are being applied, in order to ensure that the database-related metadata is kept up-to-date.

Environment Configuration

A configuration file in $RETAIL_HOME/orpatch/config/env_info.cfg is used to define the details of a specific Oracle Retail environment. This file defines:

§ The location of critical infrastructure components such as the ORACLE_HOME on a database or middleware server.

§ The location of Oracle Wallets to support connecting to the database users.

§ The type of file processing which is relevant to a particular host. For example, if this is a host where database work should be done, or a host where batch compilation should be done, a host where Java applications should be deployed, etc. This allows a single database, forms and batch patch to be run against all types of hosts, applying only the relevant pieces on each server.

§ Other configuration necessary to determine proper behavior in an environment.

Retained Installation Files

The RETAIL_HOME location of an Oracle Retail product installation contains all of the files associated with that installation. This can include database scripts, Java files, Forms, Batch, RETL and Data Conversion files as with previous versions and also includes all database scripts. This allows objects to be reloaded during patching, including any necessary dependencies.

Reloading Content

In order to ensure that database contents and generated files exactly match patched versions, when applying cumulative patches some content is regenerated even if it does not appear to have changed.

On a cumulative patch this includes:

§ All re-runnable database content will be reloaded

 Packages and Procedures

 Database Types (excluding RIB objects)

 Control scripts

 Triggers

 WebService jars and packages

 Form Elements

§ All RMS and RWMS forms files will be recompiled

§ All RMS batch files will be recompiled

When applying incremental patches, only changed files will be reloaded. However this does not apply to RMS batch, which is fully recompiled with any change.

Java Hotfixes and Cumulative Patches

When applying cumulative patches to Java applications components with ORPatch, all hotfixes related to base product ear files included with the patch will be rolled back. This increases the likelihood of a successful deployment because hotfixes may not be compatible with updated product ear files, or may already be included with the ear. Before applying a cumulative patch to Java applications, check the patch documentation to determine which hotfixes are not included in the ear. Then work with Oracle Support to obtain compatible versions of the fixes for the updated ear version. In some cases this may be the same hotfix, in which case it can be re-applied to the environment. In other cases a new hotfix may be required.

Backups

Before applying a patch to an environment, it is extremely important to take a full backup of both the RETAIL_HOME file system and the Oracle Retail database. Although ORPatch makes backups of files modified during patching, any database changes cannot be reversed. If a patch fails which contains database changes, and cannot be completed, the environment must be restored from backup.

Disk Space

When patches are applied to an environment, the old version of files which are updated or deleted are backed up to $RETAIL_HOME/backups/backup-<timestamp>. When applying large patches, ensure there is sufficient disk space on the system where you unzip the patch or the patching process may fail. Up to twice as much disk space as the unzipped patch may be required during patching.

In addition to backups of source files, the existing compiled RMS or RWMS Forms and RMS Batch files are saved before recompilation. These backups may be created during patches:

§ Batch lib directory in $RETAIL_HOME/oracle/lib/bin-<timestamp>

§ Batch proc directory in $RETAIL_HOME/oracle/proc/bin-<timestamp>

§ Forms toolset directory in $RETAIL_HOME/base/toolset/bin-<timestamp>

§ Forms forms directory in $RETAIL_HOME/base/forms/bin-<timestamp>

Periodically both types of backup files can be removed to preserve disk space.

Patching Operations

Running ORPatch

ORPatch is used to apply patches to an Oracle Retail product installation. When applying a patch which includes an installer, ORPatch does not need to be executed manually as the installer will run it automatically as part of the installation process. When applying a patch that does not include an installer, ORPatch is run directly.

ORPatch performs the tasks necessary to apply the patch:

§ Inspects the patch metadata to determine the patch contents and patch type.

§ Reads the environment configuration file to determine which product components exist in this installation.

§ Assembles a list of patch actions which will be run on this host to process the patch.

§ Executes pre-checks to validate that all patch actions have the necessary configuration to proceed.

§ Compares version numbers of files from the patch against the files in the environment.

§ Backs up files which will be updated.

§ Copies updated files into the installation.

§ Loads updated files into database schemas, if applicable.

§ Recompiles RMS batch, if applicable.

§ Recompiles RMS forms, if applicable.

§ Recompiles RWMS forms, if applicable.

§ Constructs updated Java archives and deploys them to WebLogic, if applicable

§ Updates Java batch files and libraries, if applicable

§ Records the patch in the patch inventory.

If a patch does not contain updated files for the database or system, no action may be taken. If a previously failed ORPatch session is discovered, it will be restarted.

Preparing for Patching

Before applying a patch to your system, it is important to properly prepare the environment.

Single Patching Session

It is extremely important that only a single ORPatch session is active against a product installation at a time. If multiple patches need to be applied, you can optionally merge them into a single patch and apply one patch to the environment. Never apply multiple patches at the same time.

Shutdown Applications

If a patch updates database objects, it is important that all applications are shutdown to ensure no database objects are locked or in use. This is especially important when applying changes to Oracle Retail Integration Bus (RIB) objects as types in use will not be correctly replaced, leading to ORA-21700: object does not exist or marked for delete errors when restarting the RIB.

Backup Environment

Before applying a patch to an environment, it is important to take a full backup of both the RETAIL_HOME file system and the retail database. Although ORPatch makes backups of files modified during patching, any database changes cannot be reversed. If a patch which contains database changes fails and cannot be completed, the environment must be restored from backup.

Log Files

When applying a patch, ORPatch will create a number of log files which contain important information about the actions taken during a patch and may contain more information in the event of problems. Log files are created in the $RETAIL_HOME/orpatch/logs directory. Logs should always be reviewed after a patch is applied.

After a patch session the log directory will contain at a minimum an ORPatch log file and may also contain other logs depending on the actions taken. The following table describes logs that may exist.

Unzip Patch Files

Before executing ORPatch, the patch files must be unzipped into a directory. This directory will be passed to ORPatch as the -s <source directory> argument on the command-line when applying or analyzing a patch.

Location of ORPatch

The ORPatch script will be located in $RETAIL_HOME/orpatch/bin.

Command Line Arguments

ORPatch behavior is controlled by several command-line arguments. These arguments may be actions or options. Command and option names can be specified in upper or lower case, and will be converted to upper-case automatically. Arguments to options, for example the source directory patch, will not be modified.

ORPatch command-line actions:

Note: An action is required and only one action can be specified at a time.

ORPatch command-line arguments:

Analyzing the Impact of a Patch

In some cases, it may be desirable to see a list of the files that will be updated by a patch, particularly if files in the environment have been customized. ORPatch has an analyze mode that will evaluate all files in the patch against the environment and report on the files that will be updated based on the patch.

To run ORPatch in analyze mode, include analyze on the command line. It performs the following actions:

§ Identifies files in the environment which the patch would remove.

§ Compares version numbers of files in the patch to version numbers of files in the environment.

§ Prints a summary of the number of files which would be created, updated or removed.

§ Prints an additional list of any files that would be updated which are registered as being customized.

§ Prints an additional list of any files which are in the environment and newer than the files included in the patch. These files are considered possible conflicts as the modules in the patch may not be compatible with the newer versions already installed. If you choose to apply the patch the newer versions of modules in the environment will NOT be overwritten.

§ If a Java custom file tree is detected, prints a detailed analysis of the modules within Java ear files that differ from the current ear file on the system.

§ Saves details of the files that will be impacted in $RETAIL_HOME/orpatch/logs/detail_logs/analyze/details.

This list of files can then be used to assess the impact of a patch on your environment.

To analyze a patch, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Set the JAVA_HOME environment variable if the patch contains Java application files.

export JAVA_HOME=/u00/oretail/java_jdk

Note: If the JAVA_HOME environment variable is not specified, the value from RETAIL_HOME/orpatch/config/env_info.cfg will be used.

5.Create a staging directory to contain the patch, if it does not already exist.

mkdir p $RETAIL_HOME/stage

6.Download the patch to the staging directory and unzip it.

7.Execute orpatch to analyze the patch.

orpatch analyze -s $RETAIL_HOME/stage/patch123456

8.Repeat the patch analysis on all servers with installations for this product environment.

9.Evaluate the list(s) of impacted files.

For more information on registering and analyzing customizations, please see the Customization section later in this document.

Applying a Patch

Once the system is prepared for patching, ORPatch can be executed to apply the patch to the environment. The patch may need to be applied to multiple systems if it updates components that are installed on distributed servers.

To apply a patch, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Set the DISPLAY environment variable if the patch contains Forms.

export DISPLAY=localhost:10.0

Note: If the DISPLAY environment variable is not specified, the value from RETAIL_HOME/orpatch/config/env_info.cfg will be used.

5.Set the JAVA_HOME environment variable if the patch contains Java application files.

export JAVA_HOME=/u00/oretail/java_jdk

Note: If the JAVA_HOME environment variable is not specified, the value from RETAIL_HOME/orpatch/config/env_info.cfg will be used.

6.Create a staging directory to contain the patch, if it does not already exist.

mkdir p $RETAIL_HOME/stage

7.Download the patch to the staging directory and unzip it.

8.Review the README.txt included with the patch. If manual steps are specified in the patch, execute those steps at the appropriate time.

9.Shutdown applications.

10.Execute ORPatch to apply the patch.

orpatch apply -s $RETAIL_HOME/stage/patch123456

11.After ORPatch completes, review the log files in $RETAIL_HOME/orpatch/logs.

12.Repeat the patch application on all servers with installations for this product environment.

13.Restart applications.

Restarting ORPatch

If ORPatch is interrupted while applying a patch, or exits with an error, it saves a record of completed work in a restart state file in $RETAIL_HOME/orpatch/logs. Investigate and resolve the problem that caused the failure, then restart ORPatch.

By default when ORPatch is started again, it will restart the patch process close to where it left off. If the patch process should not be restarted, add -new to the command-line of ORPatch.

Please note that starting a new patch session without completing the prior patch may have serious impacts that result in a patch not being applied correctly. For example, if a patch contains database updates and batch file changes and ORPatch is aborted during the load of database objects, abandoning the patch session will leave batch without the latest changes compiled in the installation.

Listing the Patch Inventory

After a patch is successfully applied by ORPatch the patch inventory in $RETAIL_HOME/orpatch/inventory is updated with a record that the patch was applied. This inventory contains a record of the patches applied, the dates they were applied, the patch type and products impacted.

To list the patch inventory, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Execute orpatch to list the inventory.

orpatch lsinventory

Exporting Environment Metadata

ORPatch functionality is driven based on additional metadata that is stored in the environment to define what version of files are applied to the environment, and which database scripts have been applied to database schemas. This environment metadata is used to analyze the impact of patches to environments and controls what actions are taken during a patch. The metadata is stored in several locations depending on the type of information it tracks and in some cases it may be desirable to extract the metadata for analysis outside of ORPatch. For example, Oracle Support could ask for the metadata to be uploaded to assist them in triaging an application problem.

ORPatch provides a capability to export all of the metadata in an environment into a single directory and to automatically create a zip file of that content for upload or transfer to another system. The exact metadata collected from the environment depends on the products installed in the RETAIL_HOME.

ORPatch metadata exported:

Exports of environment metadata are always done to the $RETAIL_HOME/support directory. When exporting metadata, you must specify the expname argument and define the name that should be given to the export. The name is used for the directory within $RETAIL_HOME/support and for the name of the zip file.

To extract an environments metadata, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Execute orpatch to export the metadata.

orpatch exportmetadata expname test_env

This example would export all metadata from the environment to the $RETAIL_HOME/support/test_env directory. A zip file of the metadata would be created in $RETAIL_HOME/support/test_env.zip.

Note: The $RETAIL_HOME/support/<name> directory should be empty or not exist prior to running exportmetadata in order to ensure accurate results.

Comparing Environment Metadata

Once metadata has been exported from an environment, it can be used to compare the environment manifest metadata of two environments. ORPatch provides a capability to compare metadata of the current environment with the exported metadata of another environment. Note that even though there are many types of metadata exported by ORPatch, only environment manifest metadata is evaluated during comparisons. Metadata comparison happens in four phases: product comparison, patch comparison, ORPatch action comparison, and module-level comparison.

Product comparison compares the products installed in one environment with the products installed in another environment. Patch comparison compares the patches applied in one environment with the patches applied in another environment, for common products. This provides the most summarized view of how environments differ. Patches which only apply to products on one environment are not included in the comparison.

Since each patch may impact many files, the comparison then moves on to more detailed analysis. The third phase of comparison is to compare the enabled ORPatch actions between environments. These actions roughly correspond to the installed components of a product. For example, one environment may have database and forms components installed while another has only forms. Action comparison identifies components that are different between environments. The final phase of comparison is at the module level for actions that are common between environments. Modules which exist only on one environment, or exist on both environments with different revisions, or which are flagged as customized are reported during the comparison.

Differences between environment metadata are reported in a summarized fashion during the ORPatch execution. Details of the comparison results are saved in $RETAIL_HOME/orpatch/logs/detail_logs/compare/details. One CSV file is created for each phase of comparison: product_details.csv, patch_details.csv, action_details.csv and module_details.csv.

In order to be compared by ORPatch, exported metadata must be placed in the $RETAIL_HOME/support directory. The metadata should exist in the same structure that it was originally exported in. For example, if the metadata was exported to $RETAIL_HOME/support/test_env on another system, it should be placed in $RETAIL_HOME/support/test_env on this system.

When reporting differences between two environments, ORPatch uses names to refer to the environments. These names are defined as part of the diffmetadata command. The

expname parameter, which defines the directory containing the metadata, is also used as the name when referring to the exported metadata. The srcname parameter defines the name to use when referring to the current environment. As an example, if you had exported the test environments metadata and copied it to the dev environments $RETAIL_HOME/support/test_env directory, you could run orpatch diffmetadata -expname test_env -srcname dev_env. The detail and summary output would then refer to things that exist on dev but not test, revisions in the test environment versus revisions in the dev environment, etc.

ORPatch will automatically export the environments current metadata to $RETAIL_HOME/support/compare prior to starting the metadata comparison.

To compare two environments metadata, perform the following steps:

1.Export the metadata from another environment using orpatch exportmetadata.

2.Transfer the metadata zip from the other system to $RETAIL_HOME/support.

3.Log in as the UNIX user that owns the product installation.

4.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/dev

5.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

6.Unzip the metadata zip file.

unzip test_env.zip

7.Execute orpatch to compare the metadata

orpatch diffmetadata expname test_env srcname dev_env

This example would compare the current environment against the metadata extracted in $RETAIL_HOME/support/test_env directory.

Note: The $RETAIL_HOME/support/compare directory will be automatically removed before environment metadata is exported at the start of the comparison.

Reverting a Patch

In general it is best to either completely apply a patch, or restore the entire environment from the backup taken before starting the patch. It is important to test patches in test or staging environments before applying to production. In the event of problems, Oracle Retail recommends restoring the environment from backup if a patch is not successful.

Note: Reverting patches in an integrated environment can be extremely complex and there is no fully automated way to revert all changes made by a patch. Restoring the environment from a backup is the recommended method to remove patches.

It is, however, possible to revert small patches using the backups taken by ORPatch during a patch. This will restore only the files modified, and it is still necessary to restore the database if any changes were made to it.

Note: Reverting a patch reverts only the files modified by the patch, and does not modify the database, or recompile forms or batch files after the change.

When multiple patches have been applied to an environment, reverting any patches other than the most recently applied patch is strongly discouraged as this will lead to incompatible or inconsistent versions of modules applied to the environment. If multiple patches are going to be applied sequentially it is recommended to first merge the patches into a single patch that can be applied or reverted in a single operation.

To revert a patch, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Identify the backup directory in $RETAIL_HOME/backups that contains the backup from the patch you want to restore.

§ The backup directory will contain a patch_info.cfg file which contains the name of the patch the backup is from.

§ It is possible to have two directories for the same patch, if ORPatch was updated during the patch. It is not possible to revert the updates to ORPatch. Select the backup directory that does not contain orpatch files.

§ If it is not clear which backup directory to use, restore the environment from backup

5.Execute orpatch to revert the environment using the contents of the backup directory

orpatch revert s $RETAIL_HOME/backups/backup-11232013-152059

6.Restore the database from backup if the patch made database changes

7.Use the orcompile script to recompile forms if the patch included RMS or RWMS forms files

orcompile a RMS t FORMS

orcompile a RWMS t FORMS

8.Use the orcompile script to recompile batch if the patch included RMS batch files

orcompile a RMS t BATCH

9.Use the ordeploy script to redeploy the appropriate Java applications if the patch included Java files

ordeploy a RPM t JAVA

ordeploy a REIM t JAVA

ordeploy a ALLOC t JAVA

ordeploy a RESA t JAVA

Merging Patches

When patches are applied individually some ORPatch tasks such as compiling forms and batch files or deploying Java archives are performed separately for each patch. This can be time-consuming. An alternative is to use the ORMerge utility to combine several patches into a single patch, reducing application downtime by eliminating tasks that would otherwise be performed multiple times. Patches merged with ORMerge are applied with ORPatch after the merge patch is created.

Source and Destination Directories

ORMerge uses source and destination areas in order to merge patch files. The source area is a single directory that contains the extracted patches to merge. The destination area is the location where the merged patch will be created. If a file exists in one or more source patches, only the highest revision will be copied to the merged patch.

The source and destination directories should exist under the same parent directory. That is, both the source and destination directories should be subdirectories of a single top-level directory.

The source directory must have all patches to be merged as immediate child directories. For example if three patches need to be merged the directory structure would look like this:

Source and Destination Directory Example

In the example above, the manifest.csv and patch_info.cfg files for each patch to be merged must exist in source/patch1, source/patch2, and source/patch3.

ORMerge Command-line Arguments

Running the ORMerge Utility

To merge patches, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Create a staging directory to contain the patches.

mkdir p $RETAIL_HOME/stage/merge/src

5.Download the patches to the staging directory and unzip them so that each patch is in a separate subdirectory.

6.Review the README.txt included with each patch to identify additional manual steps that may be required. If manual steps are specified in any patch, execute them at the appropriate time when applying the merged patch.

7.Create a destination directory to contain the merged patches.

mkdir -p $RETAIL_HOME/stage/merge/dest

8.Execute ORMerge to merge the patches.

ormerge -s $RETAIL_HOME/stage/merge/src d $RETAIL_HOME/stage/merge/dest name merged_patch

The merged patch can now be applied as a single patch to the product installation using ORPatch.

Compiling Application Components

In some cases it may be desirable to recompile RMS Forms, RWMS Forms or RMS Batch outside of a product patch. The ORCompile utility is designed to make this easy and remove the need to manually execute make or frmcmp commands which can be error-prone. ORCompile leverages ORPatch functions to ensure that it compiles forms and batch exactly the same way as ORPatch. In addition ORCompile offers an option to compile invalid database objects using ORPatch logic.

ORCompile takes two required command line arguments each of which take an option. Arguments and options can be specified in upper or lower case.

ORCompile Command Line Arguments

ORCompile Argument Options

Application

Type

Description

RMS

BATCH

Compile RMS Batch programs

RMS

FORMS

Compile RMS Forms

RWMS

FORMS

Compile RWMS Forms

RMS

DB

Compile invalid database objects in the primary RMS schema

RMS

DB-ASYNC

Compile invalid database objects in the RMS_ASYNC_USER schema

ALLOC

DB-ALC

Compile invalid database objects in the Allocations user schema

ALLOC

DB-RMS

Compile invalid database objects in the RMS schema

REIM

DB

Compile invalid database objects in the RMS schema

RME

DB

Compile invalid database objects in the RME schema

ASO

DB

Compile invalid database objects in the ASO schema

RI

DB-DM

Compile invalid database objects in the RI DM schema

RI

DB-RIBATCH

Compile invalid database objects in the RI batch schema

RI

DB-RMSBATCH

Compile invalid database objects in the RI RMS batch schema

RI

DB-FEDM

Compile invalid database objects in the RI front-end schema

RDE

DB-DM

Compile invalid database objects in the RDE DM schema

RDE

DB-RDEBATCH

Compile invalid database objects in the RDE batch schema

RDE

DB-RMSBATCH

Compile invalid database objects in the RDE RMS batch schema

Note: Compiling RMS type DB, ReIM type DB, and Allocation type DB-RMS, are all identical as they attempt to compile all invalid objects residing in the RMS schema.

Running the ORCompile utility

To compile files, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Execute orcompile to compile the desired type of files.

orcompile a <app> -t <type>

ORCompile Examples

Compile RMS Batch.

orcompile -a RMS -t BATCH

Compile RWMS Forms.

orcompile -a RWMS -t FORMS

Compile invalid objects in the RA DM schema.

orcompile -a RI -t DB-DM

Compile invalid objects in the RMS owning schema.

orcompile -a RMS -t DB

Deploying Application Components

In some cases it may be desirable to redeploy Java applications outside of a product patch. For example, when troubleshooting a problem, or verifying the operation of the application with different WebLogic settings. Another situation might include wanting to deploy the application using the same settings, but without customizations to isolate behavior that could be related to customized functionality.

The ordeploy utility is designed to make this easy and remove the need to re-execute the entire product installer when no configuration needs to change. ORDeploy leverages Oracle Retail Patch Assistant functions to ensure that it deploys applications exactly the same way as ORPatch. In addition ORDeploy offers an option to include or not include custom Java files, to ease troubleshooting.

ORDeploy takes two required command line arguments each of which take an option. Arguments and options can be specified in upper or lower case.

ORDeploy Command Line Arguments

ORDeploy Argument Options

Running the ORDeploy utility

To deploy Java applications, perform the following steps:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Execute ORDeploy to deploy the desired Java application.

ordeploy a <app> -t <type>

ORDeploy Examples

Deploy RPM.

ordeploy -a RPM -t JAVA

Deploy ReIM without including Java customizations.

ordeploy -a REIM -t JAVANOCUSTOM

Maintenance Considerations

The additional information stored within the RETAIL_HOME and within database schemas adds some considerations when performing maintenance on your environment.

Database Password Changes

Oracle wallets are used to protect the password credentials for connecting to database schemas. This includes all database schemas used during an install. If the password for any of these users is changed the wallets entry must be updated.

The wallet location is configurable but by default is in the following locations:

Location

Installation Type

$RETAIL_HOME/orpatch/rms_wallet

RMS Database

RMS Batch

$RETAIL_HOME/orpatch/rms_wallet_app

RMS Forms

$RETAIL_HOME/orpatch/rwms_wallet

RWMS Database

$RETAIL_HOME/orpatch/rwms_wallet_app

RWMS Forms

$RETAIL_HOME/orpatch/oraso_wallet

ASO Database

$RETAIL_HOME/orpatch/orme_wallet

RME Database

$RETAIL_HOME/orpatch/ra_wallet

RI (Previously RA) Database

$RETAIL_HOME/orpatch/rde_wallet

RDE Database

The wallet alias for each schema will be <username>_<dbname>. Standard mkstore commands can be used to update the password.

For example:

mkstore -wrl $RETAIL_HOME/orpatch/rms_wallet modifyCredential rms_rmsdb rms01 rmspassword

This command will update the password for the RMS01 user to rmspassword in the alias rms_rmsdb.

The Oracle wallets are required to be present when executing ORPatch. Removing them will prevent you from being able to run ORPatch successfully. In addition the Oracle wallet location is referenced in the RMS batch.profile, and in the default RMS and RWMS Forms URL configuration, so removing them will require reconfiguration of batch and forms. If batch and forms were reconfigured after installation to use other wallet files, it is possible to backup and remove the wallets, then restore them when running ORPatch.

WebLogic Password Changes

Java wallets are used to protect the password credentials used when deploying Java products. This includes the WebLogic administrator credentials, LDAP connection credentials, batch user credentials and any other credentials used during an install. If the password for any of these users is changed the wallets entry must be updated, or the Java product installation can be run again.

The wallet location is in the following locations:

Location

Installation Type

$RETAIL_HOME/orpatch/config/javapp_rpm

RPM Java

$RETAIL_HOME/orpatch/config/javapp_reim

ReIM Java

$RETAIL_HOME/orpatch/config/javapp_alloc

Allocation Java

$RETAIL_HOME/orpatch/config/javapp_resa

RESA Java

$RETAIL_HOME/orpatch/config/javaapp_rasrm

ORAAC (Previously RASRM) Java

The wallet aliases will be stored in the retail_installer partition. The names of the aliases will vary depending on what was entered during initial product installation.

The dump_credentials.sh script can be used to list the aliases in the wallet.

For example:

cd $RETAIL_HOME/orpatch/deploy/retail-public-security-api/bin

./dump_credentials.sh $RETAIL_HOME/orpatch/config/javapp_alloc

Apapplication level key partition name:retail_installer

User Name Alias:dsallocAlias User Name:rms01app

User Name Alias:BATCH-ALIAS User Name:SYSTEM_ADMINISTRATOR

User Name Alias:wlsAlias User Name:weblogic

The easiest way to update the credential information is to re-run the Java product installer. If you need to manually update the password for a credential, the save_credential.sh script can be used.

For example:

cd $RETAIL_HOME/orpatch/deploy/retail-public-security-api/bin

./save_credential.sh l $RETAIL_HOME/orpatch/config/javapp_alloc p retail_installer a wlsAlias u weblogic

This command will prompt for the new password twice and update the aslias wlsAlias, username weblogic with the new password.

Infrastructure Directory Changes

The RETAIL_HOME/orpatch/config/env_info.cfg file contains the path to the database ORACLE_HOME on database or RMS Batch installations, to the WebLogic Forms and Reports ORACLE_HOME and ORACLE_INSTANCE on RMS or RWMS Forms installations, and to the WEBLOGIC_DOMAIN_HOME, WL_HOME and MW_HOME on Java product installations. If these paths change, the related configuration variables in the env_info.cfg file must be updated.

DBManifest Table

The table dbmanifest within Oracle Retail database schemas is used to track the database scripts which have been applied to the schema. It is critical not to drop or truncate this table. Without it, ORPatch will attempt to re-run scripts against the database which have already been applied which can destroy a working environment. Similarly, if copying a schema from one database to another database, ensure that the dbmanifest table is preserved during the copy.

RETAIL_HOME relationship to Database and Application Server

The RETAIL_HOME associated with an Oracle Retail product installation is critical due to the additional metadata and historical information contained within it. If a database or application installation is moved or copied, the RETAIL_HOME related to it should be copied or moved at the same time.

Jar Signing Configuration Maintenance

The RPM product installation includes an option to configure a code signing certificate so that jar files modified during installation or patching are automatically re-signed. This configuration is optional, but recommended. If it is configured, the code signing keystore is copied during installation to $RETAIL_HOME/orpatch/config/jarsign/orpkeystore.jks. The keystore password and private key password are stored in a Java wallet in the $RETAIL_HOME/orpatch/config/jarsign directory. The credentials are stored in a wallet partition called orpatch:

Alias

Username

Description

storepass

discard

Password for the keystore

keypass

discard

Password for the private key

The keystore file and passwords can be updated using the product installer. This is the recommended way to update the signing configuration.

If only the credentials need to be updated, the sign_jar.sh script can be used.

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Change directories to the location of sign_jar.sh

cd $RETAIL_HOME/orpatch/deploy/bin

4.Execute sign_jar.sh

sign_jar.sh changepwd

5.When prompted, enter the new keystore password

6.When prompted, enter the new private key password

Customization

Patching Considerations with Customized Files and Objects

In general, the additional capabilities provided by the ORPatch should make it easier to evaluate the potential impacts of patches to your customizations of Oracle Retail products. However, the additional metadata maintained by the Oracle Retail patching utilities does add some considerations when making customizations.

General Guidelines

It is always preferred to customize applications by extension rather than by direct modification. For example, adding new database objects and forms rather than modifying existing Oracle Retail objects and forms. You can also leverage built-in extension points such as User Defined Attributes, the Custom Flexible Attribute Solution, or seeded customization points in ADF Applications.

It is strongly discouraged to directly modify Oracle Retail database objects, especially tables, as your changes may be lost during patching or may conflict with future updates. When adding or modifying database objects, Oracle Retail recommends that all objects be added with scripts to ensure that they can be rebuilt if necessary after a patch.

Custom Database Objects

When you create new database objects, Oracle Retail recommends placing them in an Oracle database schema specifically for your customizations. You must use synonyms and grants to allow the Oracle Retail product schema owner and other users to access your objects, and use synonyms and grants to allow your customizations to access Oracle Retail objects. A separate schema will ensure that your customizations are segregated from base Oracle Retail code.

ORPatch expects that there will be no invalid objects in the database schemas it manages after a patch is applied. For this reason adding extra objects to the product schema could result in failures to apply patches as changes to base objects may cause custom objects to go invalid until they are updated. In this situation, manually update the custom objects so that they compile, and restart the patch.

Custom Forms

When creating new custom forms, Oracle Retail recommends placing them in a separate directory specifically for your customizations. This directory should be added to the FORMS_PATH of your RMS or RWMS Forms URL configuration to allow the forms to be found by the Forms Server. This will ensure that your customizations are segregated from base Oracle Retail code. If you choose to place customizations in the Forms bin directory, then your custom forms will need to be recopied each time Forms are fully recompiled.

ADF Application Customization

Oracle Retail ADF-based applications such as Allocation and ReSA can be customized using a process called seeded customization. The customization process involves using JDeveloper in Customizer mode to create changes to product configurations, and then building a MAR archive containing the changes. The generated MAR is deployed to the MDS repository used by the application and applied to the application at runtime. These types of customizations are handled outside of ORPatch and are not reported during patch analysis or tracked by the custom file registration utility. More information can be found in the respective product customization guides.

Custom Compiled Java Code

When customizing Oracle Retail Java-based products such as RPM and ReIM via product source code, ORPatch supports automatically adding compiled customizations into the application ear file prior to deployment. This allows customizations to be applied to the application without directly modifying the base product ear, enabling customizations and defect hotfixes to co-exist when they do not change the same file or a dependent file. See the later Custom Compiled Java Code section for additional information and considerations.

Analyze Patches when Customizations are Present

Whenever you have customized a product by directly modifying Oracle Retail files or database objects, it is important to ensure you analyze each the files that will be updated by a patch before applying the patch. This will allow you to identify any customized files which may be overwritten by the patch and either merge your customization with the new version of the file, or re-apply the customization after applying the patch.

Manifest Updates

If you choose to customize Oracle Retail files directly, it is extremely important not to update the revision number contained in the env_manifest.csv. This could cause future updates to the file to be skipped, invalidating later patch applications as only a partial patch would be applied. The customized revision number for modified files will need to be tracked separately.

Registering Customized Files

The ORPatch contains utilities and functionality to allow tracking of files that have been customized through direct modification. This process is referred to as registering a customized file. Registration only works for files which are shipped by Oracle Retail. It is not possible to register new files created in the environment as part of extensions or customizations.

When patches are analyzed with ORPatch, special reporting is provided if any registered files would be updated or deleted by the patch. Customized files impacted by the patch are listed at the end of the analysis report from ORPatch. The detail files generated during the analyze will contain a column called customized which will have a Y for any files which were registered as customized. This allows easier identification of customizations which will be overwritten by a patch.

All files delivered by Oracle Retail are considered base and so when they are applied to an environment any registrations of those files as customized will revert back to un-customized. Each time a patch overwrites customized files, you must re-register the files as customized once you have applied customizations.

To register customized files, use the $RETAIL_HOME/orpatch/bin/orcustomreg script.

The orcustomerg script operates in one of two modes: registration and list.

§ Registration mode registers or unregisters one or more files as customized.

§ List mode lists all files in the environment that are registered as customized.

Command Line Arguments for Registration Mode

Notes:

§ At least one of -f or -bulk is required.

§ If neither -register nor -unregister is specified, the default is -register.

§ File names specified with -f must either be fully-qualified or be relative to RETAIL_HOME. The same is true for filenames specified within a -bulk file.

Command Line arguments for list mode

Running the orcustomreg Script

Perform the following procedure to run the orcustomreg script:

1.Log in as the UNIX user that owns the product installation.

2.Set the RETAIL_HOME environment variable to the top-level directory of your product installation.

export RETAIL_HOME=/u00/oretail/15.0/tst

3.Set the PATH environment variable to include the orpatch/bin directory

export PATH=$RETAIL_HOME/orpatch/bin:$PATH

4.Execute orcustomreg script to register the desired file(s).

orcustomreg register f <file>

Examples of using the orcustomreg Script

Register $RETAIL_HOME/dbsql_rms/Cross_Pillar/control_scripts/source/oga.sql as customized.

orcustomreg -f dbsql_rms/Cross_Pillar/control_scripts/source/oga.sql

Unregister customizations for $RETAIL_HOME/dbsql_rwms/Triggers/Source/TR_WAVE.trg

orcustomreg unregister f $RETAIL_HOME/dbsql_rwms/Triggers/Source/TR_WAVE.trg

Bulk register several files as customized.

echo $RETAIL_HOME/oracle/proc/src/mrt.pc > custom.txt

echo $RETAIL_HOME/oracle/proc/src/saldly.pc >> custom.txt

echo $RETAIL_HOME/oracle/proc/src/ccprg.pc >> custom.txt

orcustomreg bulk custom.txt

List all files registered as customized.

orcustomreg list

Custom Compiled Java Code

When customizing Oracle Retail Java-based products such as RPM and ReIM via product source code, ORPatch supports automatically adding compiled customizations into the application ear file prior to deployment. This allows customizations to be applied to the application without directly modifying the base product ear, enabling customizations and defect hotfixes to co-exist when they do not change the same file or a dependent file

This functionality is enabled by creating a directory called $RETAIL_HOME/javaapp_<app>/custom, where <app> is the application the customizations apply to. Files stored within this directory will be combined with the base product ear files before the application is deployed to WebLogic. ORPatch will attempt to consider customizations stored within the custom directory during patch analysis by triggering more detailed ear file change analysis to assist with identifying which customizations might be impacted by changes in the patches.

Note: It is not possible, nor necessary, to register compiled Java customizations with the orcustomreg tool.

As with other customization techniques for other technologies, Oracle Retail recommends making Java customizations in new files as much as possible, versus overwriting base product or configuration files. In the past it was necessary to build complete replacement product ear files, but this method of customization is no longer required nor recommended. Replacement ear and jar files will not contain the META-INF/env_manifest.csv files which are required in order to be able to apply incremental patches. Instead, compile the specific Java classes being customized and place them along with any custom configuration files in $RETAIL_HOME/javaapp_<app>/custom.

Building Deployable ear files

When constructing the product ear file to deploy to WebLogic, ORPatch applies changes to the ear file in a specific order, with files from later steps overwriting files in earlier steps. The resulting ear is stored in $RETAIL_HOME/javaapp_<app>/deploy, and then deployed to WebLogic.

Sequence for ORPatch Java Product ear file updates

Order

File Type

Location

1

Base product ear

$RETAIL_HOME/javaapp_<app>/base

2

Updated configuration files

$RETAIL_HOME/javaapp_<app>/config

3

Oracle Retail-supplied hotfixes

$RETAIL_HOME/javaapp_<app>/internal

4

Compiled customizations

$RETAIL_HOME/javaapp_<app>/custom

Merging Custom Files

When merging files from the custom directory with the product ear, ORPatch uses the directory path of the files within custom to calculate where the file should be stored within the ear. This allows arbitrary nesting of files, even when placing files within jars stored in jars, stored within the ear. The following examples below use RPM, but apply to adding compiled customizations to any Java-based product.

Custom directory location and product ear location Examples

Analyzing patches when customizations are present

When analyzing a patch which contains a base product ear and the custom directory contains files, ORPatch will automatically trigger a more detailed analysis of the changes coming in a patch. This includes calculating what files inside the product ear have been added, removed or updated and which files appear to be customized based on the contents of the custom directory. The detailed results of the ear file comparison during patch analysis will be saved in javaapp_<app>_archive_compare_details.csv. Any custom files which appeared to be impacted by the patch are saved in javapp_<app>_archive_custom_impacts.csv. Both files will be in the $RETAIL_HOME/orpatch/logs/detail_logs/analyze/details directory.

Note: This detailed analysis is not available when analyzing individual hotfixes, so special care must be taken when applying hotfixes to a customized product installation, to ensure there are no conflicts between customizations and hotfix changes.

Customizations and cumulative patches

By default, when applying a cumulative patch, ORPatch will not include customizations in the deployed product ear, even if they are present in the appropriate directory. This allows verification that the application is functioning properly using base code, before applying customizations. After verifying the initial deployment, use ORDeploy with the -t JAVA option to construct and deploy the product ear including customizations.

If customizations need to be removed outside of a patch, use ORDeploy with the -t JAVANOCUSTOM option to create and deploy an ear containing only Oracle Retail code. To force ORPatch to include customizations in the deployed ear even when applying a cumulative patch, set JAVAAPP_<app>_INCLUDE_CUSTOM=Y in the $RETAIL_HOME/orpatch/config/env_info.cfg file.

Changing configuration files

It is possible to directly change product configuration files in $RETAIL_HOME/javaapp_<app>/config. These updates can be deployed to the environment using the ORDeploy utility. However, the config directory is completely recreated each time the product installer is used. This means that modifications will be lost and must be manually reapplied after each installer run. It is recommended to make configuration changes via the installer where possible, and retain the ant.install.properties file for use in later installer sessions.

Extending Oracle Retail Patch Assistant with Custom Hooks

The default ORPatch actions and processing logic is sufficient to install and patch the base Oracle Retail product code. However there may be situations where custom processing is desired during patching activities such as executing a shell script prior to the start of patching, or running a SQL script at the end of the patch.

ORPatch supports extensions in the form of custom hooks. These hooks allow external scripts to be run at specific points during ORPatch processing.

ORPatch Processing

Action

ORPatch supports a variety of actions which define the steps necessary to apply updates to a particular area of the Oracle Retail application. Each action is generally specific to updates to a single technology or logical component of the environment. For example, one action might handle making updates to the RMS database schema, while a separate action is responsible for compiling RWMS forms, and a different action deploys the RPM Java application. These actions are enabled and disabled within the environment configuration file, allowing ORPatch to determine what types of changes to apply to each product installation.

ORPatch Actions

Phase

ORPatch processes patches in phases. Each action relevant to a patch and host is provided an opportunity to process the patch for each phase. The standard phases which allow hooks are:

Configuring Custom Hooks

Custom hooks are configured in a configuration file RETAIL_HOME/orpatch/config/custom_hooks.cfg. The configuration file is a simple text file where blank lines and lines starting with # are ignored and all other lines should define a custom hook.

To define a custom hook, a line is added to the file in the form:

<hook name>=<fully qualified script>

The hook name must be in upper case and is in the form:

<action name>_<phase name>_<sequence>

The action name is any action name understood by ORPatch. The phase name is one of the five phase names from the table above. The sequence is either START or END. Hooks defined with a sequence of START are run before the actions phase is invoked. Hooks defined with a sequence of END are run after the actions phase is invoked.

Multiple scripts can be associated with a single hook by separating the script names with a comma. If a hook name appears in the configuration file multiple times only the last entry will be used.

The script defined as a custom hook must be an executable shell script that does not take any arguments or inputs. The only environment variable that is guaranteed to be passed to the custom hook is RETAIL_HOME. The script must return 0 on success and non-zero on failure.

If an action is a DBSQL action (i.e. has a name like DBSQL_), the custom hook can optionally be a .sql file. In this case the SQL script will be run against the database schema that the DBSQL action normally executes against. The SQL script must not generate any ORA- or SP2- errors on success. In order to be treated as a database script, the extension of the file defined as the custom hook must be .sql in lower-case. Any other extension will be treated as if it is a shell script. If you have database scripts with different extensions, they must be renamed or wrapped in a .sql script.

When using the PRECHECK phase and START sequence, please note that the custom hook will be executed prior to any verification of the configuration. Invalid configuration, such as invalid database username/password or a non-existent ORACLE_HOME, may cause the custom hook to fail depending on the actions it tries to take. However in these cases, the normal orpatch PRECHECK activities would likely have failed as well. All that is lost is the additional context that orpatch would have provided about what was incorrect about the configuration.

Restarting with Custom Hooks

If a custom hook fails, for example a shell script hook returns non-zero or a sql script generates an ORA- error in its output, the custom hook will be treated as failing. A failing custom hook causes ORPatch to immediately stop the patching session.

When ORPatch is restarted it always restarts with the same phase and action, including any START sequence custom hooks. If the START sequence custom hook fails, the actions phase is never executed. With an END sequence custom hook, the actions phase is re-executed when ORPatch is restarted and then the custom hook is re-executed. When an actions phase is costly, for example the DBSQL_RMS action which does a lot of work, this can mean a lot of duplicate processing.

For this reason it is preferred to use START sequence custom hooks whenever possible. If necessary, use a START sequence hook on a later phase or a later action, rather than an END sequence custom hook.

Patch-level Custom Hooks

In addition to action-specific hooks, there are two patch-level hook points available. These hooks allow scripts to be run before any patching activities start and after all patching activities are completed. The hooks are defined in the same configuration file, with a special hook name.

To run a script before patching, define:

ORPATCH_PATCH_START=<fully qualified script>

To run a script after patching, define:

ORPATCH_PATCH_END=<fully qualified script>

These hooks only support executing shell scripts, database scripts must be wrapped in a shell script. It is also important to note that these hooks are run on every execution of ORPatch to apply a patch, even when restarting a patch application. If the START sequence patch-level hook returns a failure, patching is aborted. If the END sequence patch-level hook returns a failure, it is logged but ignored as all patching activities have already compl