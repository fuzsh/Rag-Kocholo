{
    "id": "wrong_mix_domainrange_subsidiary_00052_3",
    "rank": 36,
    "data": {
        "url": "https://www.classiq.io/insights/getting-started-in-quantum-computing-using-classiqs-visualizations",
        "read_more_link": "",
        "language": "en",
        "title": "Getting Started in Quantum Computing Using Classiqâs Visualizations",
        "top_image": "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65cdd0ba62eabf8c9e695505_Group%201000005414.png",
        "meta_img": "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65cdd0ba62eabf8c9e695505_Group%201000005414.png",
        "images": [
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003654676fe148a0178cc2_Logo.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65c61873c003d026d1cd04b9_burger_18px.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65c61841352345eeb2f18a14_close_18px.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60b8c76a1595f95bf6005cb8_exit-search.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60b8cbd9dce4825730eb037a_Group%20586hover.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cf2f3fdb4ae41a52c463e2_Vector%201%20(Stroke).svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b33ed9bdf74cfb648d_Group%2090.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b330b8915eb18e34d2_Vector.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b3d1b31b27fc8bd912_Vector-1.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b3061e1e4bc2b0235d_fluent_mail-16-filled.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/6162acd49514763345aa3b32_Polygon%201.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3af667e241c86bf80d0_Apple%20Podcast.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3aff88753b7a9c8e371_Spotify_logo_without_text%201.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3afeb694f240b6d2e5b_Amazon.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3af9d30938aba00e275_Google%20Podcast.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3ae55b907e8e2dd1f98_Rss.svg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56251a4d87ea3fbf94_mtPEipRDPjsxshSLFAeXzJ5JSFQTW19G_Aju0pCRoyCvRWn72NmTjoK2uPbMFQLCVzO8DC1COx-KP77NObstuMiKBtRbdQ9H6STiYjy3w0t5-NLqVswe5blT2LiVPB0uWeAZSUCqqCdZNO6LFQaDUuo.jpeg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56398c13b2d9514b59_4havzBPI9YQQaCGiOr8l6vrB67B48wOlq36vzNpKmsSnED1bYzG55mYxkm-JGhL4ArcDZ3qMERKU6KVeSd1uQQEZmarRBGUSTZxZ3tIwwoAmNRnwgIjbkhgXn9McWyvCpXjQudGa6UddD4Q46vl2t1Q.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56822485c2b2b472f5_s3ppgRrwxmX_lYJVTlkzR7TSkt_n24Z1n5N16qnGpsA51rzN0RAlKYtqwlfc7a1OdgEuP7HzcXgoL2K7hDqyqpYR5XAAwH6HzaRRgXyHNmpUQynMW3fSidxIUBeghueYRYmCufWttOaGCkZQO89CfNA.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56707a73db9b6b8e93_u_jW8cTS8C_JuP13dW6x88cS1tRteoEM_gi5mAyfgH_j8YN_0EgL6u3H55SP-c2FNQIv5eQdPRdpwHlmVjoJHDzu_7Owu4acUY83_hXKX3eWNhEC_OQLOoGrNhBxe4mvVfrnb2b6HauwTsj8u7vxgdI.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c5601a651c50caa4daf_eC97mkwGlWPaZvkwv1-1S1FlJJux_Dc78iCSjRO7XTqDQxWmph4YXTeUXONgqb15xUlvqc9sxt2FZv4s2mvF_1kDE2-rX84z-oWz1_7Rt8PxoIwRJ--zW4x5HFUz8kgo2De7TzZYMIi6WmekBUJ8WnY.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c561f1908b85484d4d8_zoE2RgBnYgAN8GBRwWXvkh_ZdcmmMaJAQhHJh5hXtJOPRO1ZgBkWKsqLjzrI_GEiVSf1IVN9nzC5-bygSqFfkukknhqi8XgNcqL2KvLzHPXLN7kJN5hHHTUe8Y5-5sqwnQfmgMgYMJyApSiIMTEKAd8.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c568eef7038a4a8388a_1hoT9Uq0tqmq-Nkzmn_2wLQjxsnI9h4UG7kgguzGoFZdH_lB-EkCsQM5pgYkjB9AInQ16052eF0vZ5ggXkmrJfalPTMmet4eRl4q10PmAbv-Mtm-XTiGyQa-gOVDKKIbO6HhtGSDErRINusDboioPLw.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56be53439a86644bb2_d9w9H2o8f5qTbQJT5zne3AcYDhNOZ11n8N8QvgkTWoJTMOXE3hGf2KG1BQ9ZOqxPZtgrS9tVz98tTxHPckO1YfMft8EpBVDdRCEK1ZFJOGKCpBepPkIiv5g-T_5gxuqS6HEwzxyfBEX-uwrPplXxrrI.png",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60d994fd0097ebfed4d0b25a_Play.svg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56251a4d87ea3fbf94_mtPEipRDPjsxshSLFAeXzJ5JSFQTW19G_Aju0pCRoyCvRWn72NmTjoK2uPbMFQLCVzO8DC1COx-KP77NObstuMiKBtRbdQ9H6STiYjy3w0t5-NLqVswe5blT2LiVPB0uWeAZSUCqqCdZNO6LFQaDUuo.jpeg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56398c13b2d9514b59_4havzBPI9YQQaCGiOr8l6vrB67B48wOlq36vzNpKmsSnED1bYzG55mYxkm-JGhL4ArcDZ3qMERKU6KVeSd1uQQEZmarRBGUSTZxZ3tIwwoAmNRnwgIjbkhgXn9McWyvCpXjQudGa6UddD4Q46vl2t1Q.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56822485c2b2b472f5_s3ppgRrwxmX_lYJVTlkzR7TSkt_n24Z1n5N16qnGpsA51rzN0RAlKYtqwlfc7a1OdgEuP7HzcXgoL2K7hDqyqpYR5XAAwH6HzaRRgXyHNmpUQynMW3fSidxIUBeghueYRYmCufWttOaGCkZQO89CfNA.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56707a73db9b6b8e93_u_jW8cTS8C_JuP13dW6x88cS1tRteoEM_gi5mAyfgH_j8YN_0EgL6u3H55SP-c2FNQIv5eQdPRdpwHlmVjoJHDzu_7Owu4acUY83_hXKX3eWNhEC_OQLOoGrNhBxe4mvVfrnb2b6HauwTsj8u7vxgdI.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c5601a651c50caa4daf_eC97mkwGlWPaZvkwv1-1S1FlJJux_Dc78iCSjRO7XTqDQxWmph4YXTeUXONgqb15xUlvqc9sxt2FZv4s2mvF_1kDE2-rX84z-oWz1_7Rt8PxoIwRJ--zW4x5HFUz8kgo2De7TzZYMIi6WmekBUJ8WnY.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c561f1908b85484d4d8_zoE2RgBnYgAN8GBRwWXvkh_ZdcmmMaJAQhHJh5hXtJOPRO1ZgBkWKsqLjzrI_GEiVSf1IVN9nzC5-bygSqFfkukknhqi8XgNcqL2KvLzHPXLN7kJN5hHHTUe8Y5-5sqwnQfmgMgYMJyApSiIMTEKAd8.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c568eef7038a4a8388a_1hoT9Uq0tqmq-Nkzmn_2wLQjxsnI9h4UG7kgguzGoFZdH_lB-EkCsQM5pgYkjB9AInQ16052eF0vZ5ggXkmrJfalPTMmet4eRl4q10PmAbv-Mtm-XTiGyQa-gOVDKKIbO6HhtGSDErRINusDboioPLw.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/65439c56be53439a86644bb2_d9w9H2o8f5qTbQJT5zne3AcYDhNOZ11n8N8QvgkTWoJTMOXE3hGf2KG1BQ9ZOqxPZtgrS9tVz98tTxHPckO1YfMft8EpBVDdRCEK1ZFJOGKCpBepPkIiv5g-T_5gxuqS6HEwzxyfBEX-uwrPplXxrrI.png",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cef408d1b31b90708c2530_Vector%203.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cef408d1b31b90708c2530_Vector%203.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cb03ca1f76c355f618442b_Property%201%3Dplay.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cb03caeed27231c1aca4f8_Property%201%3DAudio.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cb03ca1f76c355f618442b_Property%201%3Dplay.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cb03caeed27231c1aca4f8_Property%201%3DAudio.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cefd6db0f873304d18f49c_inner-blog-bg-images.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/600040266ee51cd2a1d414c7_Rectangle%20221.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/61a5ff84db6e3b68f2055a1a_Classiq%27s-logo.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/605c5b4054acd02ba01f7bf3_in.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60fd57802c973ba5370795d5_Vector.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65a80381db00e4ec293d96f2_x.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65a8038b4010ca31d43a1ba1_git-hub.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65aa5aec4a482703713e8df1_ep_office-building.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-11-07T00:00:00",
        "summary": "",
        "meta_description": "\"Blog\" post in a series of articles about quantum computing software and hardware, quantum computing industry news, qc hardware/software integration and more",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/600ff7486d5022e48c4ed193_Favicon%2036%201.png",
        "meta_site_name": "",
        "canonical_link": "https://www.classiq.io/insights/getting-started-in-quantum-computing-using-classiqs-visualizations",
        "text": "Because quantum computing uses complex algorithms and quantum states, there is a steep learning curve breaking in conceptually to this field. Some people say quantum computing is still in the 70âsâ that weâre in the era of punch cards and programming on a gate level. In some ways, thatâs true.Â\n\nâ\n\nThe Bloch Sphere provides an excellent entry-point for gaining insight into core quantum concepts such as the states of a quantum bit (âqubitâ) visualized on the surface of a sphere. Developing visual intuition of foundational quantum ideas provides a mental map to learning how vital components like single-qubit gates operate in quantum computing. Some quantum platforms specifically cater to gate-level programming, which visually means applying rotations to the Bloch Sphere, but even then struggle with visualizing concepts like entanglement and multi-qubit gates.Â\n\nâ\n\nBut, just as programming has evolved from dealing with memory management to more abstract languages, quantum computing is experiencing a similar transition. The ability to visualize theoretical, abstract concepts is a core mechanism for advancing quantum computing from its current state into the future. This shift is facilitated by platforms like Classiq that explore quantum concepts through visualizations: circuit synthesis and modeling, constraints, and hardware and software optimization.\n\nâ\n\nQuantum Computing for All with Algorithmic Thinking\n\nThese tools contribute to quantum algorithm development by enhancing comprehension, enabling users to make the best possible choices for using quantum computers, and simplifying the process of designing circuits. Thereâs no need for you to reinvent the wheel with every quantum algorithm. This makes quantum computing more accessible and effective for developers and researchers, both inside quantum and for domain experts in fields outside of quantum computing.\n\nâ\n\nInstead of coding at the gate level, Classiq allows users to focus on the \"what\" - the algorithm's functionality. Then, it automatically generates the \"how\" - a circuit that fulfills this functionality while optimizing to real-world constraints.Â\n\nâ\n\nThis approach offers several advantages:\n\nEfficiency: It saves time, especially when dealing with a large number of qubits.\n\nResource Estimation: Users can estimate the resources required to run an algorithm before beginning custom development.\n\nAccessibility: It makes quantum computing usable to individuals from outside quantum computing, as experts don't need to delve into low-level hardware intricacies.\n\nFuture-Proofing: As quantum computers grow in complexity, Classiq's approach remains feasible, whereas low-level coding becomes impractical.\n\nâ\n\nChallenges of Programming âTo The Metalâ\n\nYou shouldnât need multiple PhDs in quantum physics and computer science, AND domain expertise in chemistry, finance, or aerospace, to be able to use a quantum computer. Unless you want to be Dr. Banner, then, of course, go for it!\n\nâ\n\nâ\n\nWith the growing complexity of quantum computers, programming \"to the metal\" becomes infeasible. While low-level programming still has its place, just like in classical computing, many engineers and domain experts want to harness the power of quantum computing without having to delve into the challenges of hardware engineering, like:\n\nâ\n\nQubit Management Complexity: As you add more qubits, not only do you have to account for the qubits themselves, but you must also manage control over pairwise interactions and two-qubit gates. This requires added control logic and can quickly become unmanageable.\n\nHardware Optimization: Ensuring that the most frequently used qubits remain stable is crucial for efficient quantum computation. This involves understanding the underlying hardware architecture and optimizing code according to daily calibration changes, qubit error rates, and even âdeadâ qubits.Â\n\nExponential Error Correction Complexity: With each new qubit added, the potential interactions and algorithm times increase exponentially, creating more errors (and a new subfield to become an expert in!)\n\nâ\n\nA Visual Journey through Quantum Computing\n\nFor the rest of us mere mortals, Classiq isn't just another quantum computing platform; it's a shift in how we design quantum programs. Classiqâs platform emphasizes thinking \"algorithmicallyâ. This focuses on âwhatâ an algorithm should achieve rather than the âhowâ - the functional programming approach of classical computing that opens doors for domain experts to use a quantum computer without needing to understand the system's guts. While loops have no analog in quantum computing!Â\n\nâ\n\nClassiq's synthesis engine explores a vast design space to choose the optimal circuit, eliminating the need for manual optimization while also making code more portable across different hardware providers. Beyond just algorithms, Classiq offers:\n\nâ\n\nCircuit Visualizers,Â\n\nHardware Comparison Tables, and\n\nCircuit Connectivity Maps.\n\nâ\n\nThese tools not only enhance understanding but also ensure that the chosen quantum architecture remains optimal â without needing hardware-specific knowledge.Â\n\nâ\n\nTo show how amazing and accessible this can make quantum programming, letâs go through a researcherâs journey using Classiqâs tools to accelerate their research in quantum chemistry.Â\n\nâ\n\nDomain Specific ExpertiseÂ\n\nThe Circuit Visualizer is aÂ blueprint for understanding quantum circuits and their configurations. It simplifies the learning curve for newcomers by offering a visual representation of quantum circuitry. The domain expert can examine and manipulate constraints on circuits with what they want to accomplish. By abstracting the gate-level details, the Circuit Visualizer opens doors for experts in finance, chemistry, cybersecurity, and domain experts to contribute to optimizing algorithms.Â\n\nâ\n\nFor example, a quantum chemist using a quantum computer to speed up his or her research should not need to write thousands of lines of low-level Variational Quantum Eigensolver (VQE) code that does chemistry simulation. His or her focus should be on the parts of the problem that require domain expertise, like the chemical structure of compounds being optimized for synthesis or research.Â\n\nâ\n\nVQE involves complex quantum circuits and traditionally requires writing thousands of lines of code to implement. However, with Classiq's circuit modeling, this process becomes accessible to a broader range of users. Researchers can rapidly generate optimized quantum circuits for VQE, reducing the time and effort required for implementation.Â\n\nâ\n\nâ\n\nHere we can add atoms, spin, charge, the mappings, and pick the number of qubits to generate the structure for the quantum computer to find the energy levels. This allows experts in chemistry to focus on their domain-specific knowledge and the scientific aspects of their research rather than getting bogged down in developing algorithms from scratch. Itâs plug-and-play!Â\n\nâ\n\nâ\n\nBelow, are two options for circuits for European call option pricing. One has been optimized for width (number of qubits in the circuit) and the other for depth (how many gates in a row).\n\nÂ\n\nâ\n\nBy digging into the visualizer, we can see the summary of the circuit information on the left, which includes depth, width, and the number of gates needed to run this algorithm. The circuit generated below, with just one click, is optimized for depth, saving tons of time manually re-writing code on a gate level.Â\n\nâ\n\nâ\n\nHowever, we still can do better. While we have added parameters like the number of qubits, and allowed the model to optimize for the depth or width of the circuit, this circuit is not optimized for real hardware yet.Â Remember, this can ALL be changed to allow you to test out different optimizations!\n\nâ\n\nHardware Awareness with Comparison Tables\n\n\"A map is not the territory\"\n\nAlfred KorzybskiÂ\n\nâ\n\nThe circuit generated is not the one directly implemented on the quantum hardware. A high-level quantum algorithm that doesn't depend on specific hardware must be transformed through synthesis (compilation) and translation (transpilation) into instructions that are compatible with the particular quantum hardware â meaning the gates (rotations) it will accept, consolidating a series of gates into a single equivalent gate, and making adjustments such as qubit routing.\n\nâ\n\nIn Classiq, we can pick any of the hardware in the list and execute without changing any of our code.Â Â\n\nâ\n\nâ\n\nSo you say, okay, cool, but even then, Iâm no expert in hardware - which one should I use?\n\nâ\n\nA nifty new feature that saves a ton of time is the Hardware Comparison Tables. Just select the hardware you want to explore and click âCompare Hardwareâ.Â Â\n\nâ\n\nWhat comes up is the real resource estimations for specific hardware for this circuit. For this example, weâre seeing that for the simple VQE circuit, IonQ QPU beats IBMâs Guadalupe on all parameters: depth, multi-qubit gate count (which are more error-prone than single qubit gates and take more time), and total gate count.Â\n\nWithout knowing ANYTHING about the hardware (did you know the IonQ QPUis a trapped ion quantum processor, and IBM Guadelupe is superconducting qubits? Now you know!) we can start to think that the IonQ processor might be better to run your algorithm on.\n\nâ\n\nNow, hardware comparison tables donât have everything - they donât have circuit execution time, or error rates here - but itâs a start. Even then, if youâre unsure, you can execute your circuit on both quantum hardware types without extra work, and compare outputs.\n\nâ\n\nThereâs no coding, no re-writing of the same code for different platforms, and no manual optimization. This is how we reach quantum advantage.Â Â\n\nâ\n\nApplication-Specific Circuits for Deeper Optimization\n\nWhat if you had your own quantum computer? Our researcher realizes that he or she can use the circuit connectivity map to use the same optimization loops for custom hardware.\n\nâ\n\nWhile quantum computers right now are based in the cloud, on-prem solutions are likely to grow, based on Hyperion Research: Snapshot of Quantum Computing Market (05/2021). On-premise systems fulfill requirements for many early adopters of quantum computing hardware, which requires data privacy over proprietary data inputs and integration with classical computing for hybrid algorithms.Â\n\nâ\n\nBut building a full stack quantum software system from scratch for on-premises systems is another barrier to entry.\n\nâ\n\nThe Circuit Connectivity Map (CCM) allows the system to have an understanding of qubit connectivity. Meaning, the CCM visualizes the connections between qubits and allows the use of Classiq for custom hardware.\n\nâ\n\nThe platform not only focuses on algorithm design but also ensures that hardware is continually linked back to the changes. This symbiotic relationship between software and hardware allows quantum systems to reach quantum advantage. Read more about co-design in the previous blog post in the series, The Key To Full Stack Quantum Computing.Â\n\nBecause quantum computing uses complex algorithms and quantum states, there is a steep learning curve breaking in conceptually to this field. Some people say quantum computing is still in the 70âsâ that weâre in the era of punch cards and programming on a gate level. In some ways, thatâs true.Â\n\nâ\n\nThe Bloch Sphere provides an excellent entry-point for gaining insight into core quantum concepts such as the states of a quantum bit (âqubitâ) visualized on the surface of a sphere. Developing visual intuition of foundational quantum ideas provides a mental map to learning how vital components like single-qubit gates operate in quantum computing. Some quantum platforms specifically cater to gate-level programming, which visually means applying rotations to the Bloch Sphere, but even then struggle with visualizing concepts like entanglement and multi-qubit gates.Â\n\nâ\n\nBut, just as programming has evolved from dealing with memory management to more abstract languages, quantum computing is experiencing a similar transition. The ability to visualize theoretical, abstract concepts is a core mechanism for advancing quantum computing from its current state into the future. This shift is facilitated by platforms like Classiq that explore quantum concepts through visualizations: circuit synthesis and modeling, constraints, and hardware and software optimization.\n\nâ\n\nQuantum Computing for All with Algorithmic Thinking\n\nThese tools contribute to quantum algorithm development by enhancing comprehension, enabling users to make the best possible choices for using quantum computers, and simplifying the process of designing circuits. Thereâs no need for you to reinvent the wheel with every quantum algorithm. This makes quantum computing more accessible and effective for developers and researchers, both inside quantum and for domain experts in fields outside of quantum computing.\n\nâ\n\nInstead of coding at the gate level, Classiq allows users to focus on the \"what\" - the algorithm's functionality. Then, it automatically generates the \"how\" - a circuit that fulfills this functionality while optimizing to real-world constraints.Â\n\nâ\n\nThis approach offers several advantages:\n\nEfficiency: It saves time, especially when dealing with a large number of qubits.\n\nResource Estimation: Users can estimate the resources required to run an algorithm before beginning custom development.\n\nAccessibility: It makes quantum computing usable to individuals from outside quantum computing, as experts don't need to delve into low-level hardware intricacies.\n\nFuture-Proofing: As quantum computers grow in complexity, Classiq's approach remains feasible, whereas low-level coding becomes impractical.\n\nâ\n\nChallenges of Programming âTo The Metalâ\n\nYou shouldnât need multiple PhDs in quantum physics and computer science, AND domain expertise in chemistry, finance, or aerospace, to be able to use a quantum computer. Unless you want to be Dr. Banner, then, of course, go for it!\n\nâ\n\nâ\n\nWith the growing complexity of quantum computers, programming \"to the metal\" becomes infeasible. While low-level programming still has its place, just like in classical computing, many engineers and domain experts want to harness the power of quantum computing without having to delve into the challenges of hardware engineering, like:\n\nâ\n\nQubit Management Complexity: As you add more qubits, not only do you have to account for the qubits themselves, but you must also manage control over pairwise interactions and two-qubit gates. This requires added control logic and can quickly become unmanageable.\n\nHardware Optimization: Ensuring that the most frequently used qubits remain stable is crucial for efficient quantum computation. This involves understanding the underlying hardware architecture and optimizing code according to daily calibration changes, qubit error rates, and even âdeadâ qubits.Â\n\nExponential Error Correction Complexity: With each new qubit added, the potential interactions and algorithm times increase exponentially, creating more errors (and a new subfield to become an expert in!)\n\nâ\n\nA Visual Journey through Quantum Computing\n\nFor the rest of us mere mortals, Classiq isn't just another quantum computing platform; it's a shift in how we design quantum programs. Classiqâs platform emphasizes thinking \"algorithmicallyâ. This focuses on âwhatâ an algorithm should achieve rather than the âhowâ - the functional programming approach of classical computing that opens doors for domain experts to use a quantum computer without needing to understand the system's guts. While loops have no analog in quantum computing!Â\n\nâ\n\nClassiq's synthesis engine explores a vast design space to choose the optimal circuit, eliminating the need for manual optimization while also making code more portable across different hardware providers. Beyond just algorithms, Classiq offers:\n\nâ\n\nCircuit Visualizers,Â\n\nHardware Comparison Tables, and\n\nCircuit Connectivity Maps.\n\nâ\n\nThese tools not only enhance understanding but also ensure that the chosen quantum architecture remains optimal â without needing hardware-specific knowledge.Â\n\nâ\n\nTo show how amazing and accessible this can make quantum programming, letâs go through a researcherâs journey using Classiqâs tools to accelerate their research in quantum chemistry.Â\n\nâ\n\nDomain Specific ExpertiseÂ\n\nThe Circuit Visualizer is aÂ blueprint for understanding quantum circuits and their configurations. It simplifies the learning curve for newcomers by offering a visual representation of quantum circuitry. The domain expert can examine and manipulate constraints on circuits with what they want to accomplish. By abstracting the gate-level details, the Circuit Visualizer opens doors for experts in finance, chemistry, cybersecurity, and domain experts to contribute to optimizing algorithms.Â\n\nâ\n\nFor example, a quantum chemist using a quantum computer to speed up his or her research should not need to write thousands of lines of low-level Variational Quantum Eigensolver (VQE) code that does chemistry simulation. His or her focus should be on the parts of the problem that require domain expertise, like the chemical structure of compounds being optimized for synthesis or research.Â\n\nâ\n\nVQE involves complex quantum circuits and traditionally requires writing thousands of lines of code to implement. However, with Classiq's circuit modeling, this process becomes accessible to a broader range of users. Researchers can rapidly generate optimized quantum circuits for VQE, reducing the time and effort required for implementation.Â\n\nâ\n\nâ\n\nHere we can add atoms, spin, charge, the mappings, and pick the number of qubits to generate the structure for the quantum computer to find the energy levels. This allows experts in chemistry to focus on their domain-specific knowledge and the scientific aspects of their research rather than getting bogged down in developing algorithms from scratch. Itâs plug-and-play!Â\n\nâ\n\nâ\n\nBelow, are two options for circuits for European call option pricing. One has been optimized for width (number of qubits in the circuit) and the other for depth (how many gates in a row).\n\nÂ\n\nâ\n\nBy digging into the visualizer, we can see the summary of the circuit information on the left, which includes depth, width, and the number of gates needed to run this algorithm. The circuit generated below, with just one click, is optimized for depth, saving tons of time manually re-writing code on a gate level.Â\n\nâ\n\nâ\n\nHowever, we still can do better. While we have added parameters like the number of qubits, and allowed the model to optimize for the depth or width of the circuit, this circuit is not optimized for real hardware yet.Â Remember, this can ALL be changed to allow you to test out different optimizations!\n\nâ\n\nHardware Awareness with Comparison Tables\n\n\"A map is not the territory\"\n\nAlfred KorzybskiÂ\n\nâ\n\nThe circuit generated is not the one directly implemented on the quantum hardware. A high-level quantum algorithm that doesn't depend on specific hardware must be transformed through synthesis (compilation) and translation (transpilation) into instructions that are compatible with the particular quantum hardware â meaning the gates (rotations) it will accept, consolidating a series of gates into a single equivalent gate, and making adjustments such as qubit routing.\n\nâ\n\nIn Classiq, we can pick any of the hardware in the list and execute without changing any of our code.Â Â\n\nâ\n\nâ\n\nSo you say, okay, cool, but even then, Iâm no expert in hardware - which one should I use?\n\nâ\n\nA nifty new feature that saves a ton of time is the Hardware Comparison Tables. Just select the hardware you want to explore and click âCompare Hardwareâ.Â Â\n\nâ\n\nWhat comes up is the real resource estimations for specific hardware for this circuit. For this example, weâre seeing that for the simple VQE circuit, IonQ QPU beats IBMâs Guadalupe on all parameters: depth, multi-qubit gate count (which are more error-prone than single qubit gates and take more time), and total gate count.Â\n\nWithout knowing ANYTHING about the hardware (did you know the IonQ QPUis a trapped ion quantum processor, and IBM Guadelupe is superconducting qubits? Now you know!) we can start to think that the IonQ processor might be better to run your algorithm on.\n\nâ\n\nNow, hardware comparison tables donât have everything - they donât have circuit execution time, or error rates here - but itâs a start. Even then, if youâre unsure, you can execute your circuit on both quantum hardware types without extra work, and compare outputs.\n\nâ\n\nThereâs no coding, no re-writing of the same code for different platforms, and no manual optimization. This is how we reach quantum advantage.Â Â\n\nâ\n\nApplication-Specific Circuits for Deeper Optimization\n\nWhat if you had your own quantum computer? Our researcher realizes that he or she can use the circuit connectivity map to use the same optimization loops for custom hardware.\n\nâ\n\nWhile quantum computers right now are based in the cloud, on-prem solutions are likely to grow, based on Hyperion Research: Snapshot of Quantum Computing Market (05/2021). On-premise systems fulfill requirements for many early adopters of quantum computing hardware, which requires data privacy over proprietary data inputs and integration with classical computing for hybrid algorithms.Â\n\nâ\n\nBut building a full stack quantum software system from scratch for on-premises systems is another barrier to entry.\n\nâ\n\nThe Circuit Connectivity Map (CCM) allows the system to have an understanding of qubit connectivity. Meaning, the CCM visualizes the connections between qubits and allows the use of Classiq for custom hardware.\n\nâ\n\nThe platform not only focuses on algorithm design but also ensures that hardware is continually linked back to the changes. This symbiotic relationship between software and hardware allows quantum systems to reach quantum advantage. Read more about co-design in the previous blog post in the series, The Key To Full Stack Quantum Computing.Â"
    }
}