{
    "id": "correct_foundationPlace_00033_2",
    "rank": 33,
    "data": {
        "url": "https://www.linkedin.com/pulse/turning-marklogic-next-oracle-kurt-cagle",
        "read_more_link": "",
        "language": "en",
        "title": "Turning MarkLogic Into the Next Oracle",
        "top_image": "https://media.licdn.com/dms/image/C4E12AQEEsPlaj0VBGw/article-cover_image-shrink_600_2000/0/1520150092199?e=2147483647&v=beta&t=Ofbg0ExWga1ufcI9QpFE8ShMQjSMepFH13Udlpx6CKY",
        "meta_img": "https://media.licdn.com/dms/image/C4E12AQEEsPlaj0VBGw/article-cover_image-shrink_600_2000/0/1520150092199?e=2147483647&v=beta&t=Ofbg0ExWga1ufcI9QpFE8ShMQjSMepFH13Udlpx6CKY",
        "images": [
            "https://media.licdn.com/dms/image/C4E12AQEEsPlaj0VBGw/article-cover_image-shrink_600_2000/0/1520150092199?e=2147483647&v=beta&t=Ofbg0ExWga1ufcI9QpFE8ShMQjSMepFH13Udlpx6CKY"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kurt Cagle"
        ],
        "publish_date": "2016-02-24T21:40:20+00:00",
        "summary": "",
        "meta_description": "If you're familiar with my posts here on Linked-In, you're likely aware that I am a strong partisan of MarkLogic. There's good reason for it - overall I think the product is a best of breed in its niche (though that may be a part of the problem it faces), and as a developer, I find that things which",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/turning-marklogic-next-oracle-kurt-cagle",
        "text": "If you're familiar with my posts here on Linked-In, you're likely aware that I am a strong partisan of MarkLogic. There's good reason for it - overall I think the product is a best of breed in its niche (though that may be a part of the problem it faces), and as a developer, I find that things which may take me weeks or even months to do on almost any other platform can be accomplished in hours - if you know what you're doing.\n\nHowever, as an analyst, I think there are several things that the company could be doing better. Most of these have come up in conversations with clients, and as such represent the people who are actually using the product for day to day development to manage large projects. Others come from my own observations of the NoSQL industry, and what's working and what's not.\n\nOpaque Pricing Structure\n\nMarkLogic has some very talented developers on its staff, and they have to be paid, so it is not surprising that the company should command premium prices for its product. However, even after MarkLogic attempt to simplify the pricing structure, it's difficult to know what kind of commitment people are signing up for without in-depth analysis.\n\nThere's a few things that you could do. One of the easiest would be to put together a pricing tool on the site, keeping in mind that the people coming to get estimates may not necessarily know everything there is to know about the product. This would look at options such as how many clusters would need to be considered, what modules would be enabled, what kind of failover, disaster recovery, hosting solutions and similar configuration issues would need to be set, and so forth.\n\nThe reality for many organizations (including many of your existing clients) is that when they finally get an eyeful of what it costs to run a fully rigged system, they get sticker shock, and when projects fail (see below) that can make those customers much less inclined to build out MarkLogic in the future. Your competition - Hadoop and Spark, various NoSQL databases and yes, even relational databases - are making inroads because their core product is free, even if the overall development costs can skyrocket pretty quickly.\n\nLack of Product Differentiation\n\nMarkLogic is the Swiss Army Knife of database systems. It can handle XML, it can handle JSON, it can do semantics, it can (sort of kind of) do relational. This is great, and one of the reasons that I personally like the product so much.\n\nThe problem is that no one actually uses Swiss Army Knives, because they have the perception that in trying to make everything work in that small red case, they have to make a lot of design decisions that weaken this functionality. It's also hard to sell that Swiss Army Knife.\n\nIf you treat MarkLogic as a database, then people will use it as they use any database - a way to store and retrieve XML or JSON. And that's fine, if somewhat overkill. The problem that I see with MarkLogic is that it's not just a database - it's actually a very sophisticated application development platform, yet most people are unaware of the horsepower underneath the hood.\n\nA good solution here would be to start the process of differentiation. Companies who are using it for Metadata Management will have different requirements from someone working with a Smart Data Hub. Others will be looking for a big data analytics platform that can tie in with their Hadoop or relational databases. Some people are simply looking for ways of authoring web sites or portals.\n\nWhat this says to me is that each of these are applications, and they are worth quite a bit to your costumers who want to solve real world problems rather than spend all their time trying to make a black box data system fetch and beg.\n\nWhat may be worth considering is taking advantage of your position to build out different configurations that can be sold either as stand-alone applications or starter kits. This may require making some hard decisions with regard to your secondary vendor community, because you will be competing directly with them, but there is a real danger that in doing so, you're endangering your own long term viability.\n\nConsider creating a Site Builder app, an analytics app, a Smart Hub, a Metadata Management System, a semantic news portal and a standardized CMS application. Each of these are scripts and services that would sit on top of MarkLogic, that could be installed directly from an admin dashboard, and that would get people functional from day one. You need to have something as easy to use as npm, the package manager from node. Each of these products would be sold independently - yes, it may be the same code underneath, but the application is what most people will see. This turns MarkLogic server into a platform.\n\nGoing Open Source Intelligently\n\nThis next one's tough, but increasingly I think it would nail MarkLogic's adoption. Release the server, unadorned with language packs extended analytics toolkits, or similar \"advanced\" features, for a nominal amount - free, to perhaps $1000. Licensed cluster. Include the website starter kit. Make it available to hosted services, make it an inexpensive option on Amazon, and so forth.\n\nYou're almost there now - a person with a developer license could essentially use the server now, but there's a lot of ambiguity about whether it is legal to do so. With a clear community license, you will get this product into colleges, small businesses, state organizations, pretty much everywhere. This will establish a developer community that will in turn create their own product ecosystem. You'd still be selling multiple cluster systems as well as the aforementioned targeted packs, but this gets the product in the door. Such a community license would allow for a three node cluster, which is essentially the rational minimal node configuration.\n\nWill this impact revenue? Initially, yes, it likely will. However, longer term, it puts MarkLogic into a position to dominate the NoSQL market in terms of overall servers deployed. Your competitors (and yes, those NoSQL vendors are most certainly your competitors, even if they're not acknowledged as such) will eventually dominate the market otherwise, making ancillary sales when you're not.\n\nThe SQL Option\n\nAnother area where I relatively small investment could have huge dividends would is in your SQL solution. Yes, MarkLogic has a SQL solution, using indexes tied into XML structures to represent content. There are three key problems with it. First, XML does not always cleanly translate into SQL because their graph models are different (normalization and referencing gets complex). The second, the solution that you currently have is difficult to configure and has unexpected side effects, especially around outer joins. However, the biggest problem is simply that the SQL you have is read-only, and that's a non-starter for almost any organization.\n\nWhat I would recommend instead is that you turn to the semantic triple store and a W3C standard I've mentioned on Linked-In before - R2RML. This standard provides an RDF encoding of a relational database within a triple store. With it, you should be able to use an ODBC bridge to read a database and reconstruct that on MarkLogic. The principle challenge then would be to write a SQL to SPARQL converter and optimizer to let people both query and write to the RDF store completely transparently. From the outside, MarkLogic would simply become another relational database, but from the inside it can be queried either via SQL or SPARQL.\n\nIn a similar vein, it may be worth packaging a set of SQL drivers for communicating with Microsoft, Oracle, Postgres, Cassandra, etc., in your XQuery and Javascript API. As a recommendation, build out an administration interface that would let you set up multiple connection points, then a developer would only needed to call a named connection point and start writing SQL.\n\nWhile there are a lot of good reasons for doing this, the principle business case is analytics. The analytics space right now is still very SQL oriented, and likely will be so for the foreseeable future, and creating separate indexes on XML objects is simply not efficient.\n\nAdditionally, there's a lesson that can be learned from the Hadoop build-out. Hadoop's biggest selling point is that it can create SQL-like stores - 90% of all Hadoop projects essentially are dedicated to creating large scale integrated RDB systems (which is ironic, because it's actually a pretty poor use for the technology). MarkLogic flirted with Hadoop but mainly through HDFS. MarkLogic as an RDB store (that was also an RDF store!) would make MarkLogic competitive with Hortonworks or Cloudera in an area where they are actually fairly weak.\n\nMake Better Use of Your Admin Layer\n\nThe MarkLogic Content Pump (MLCP) is a great feature, but it suffers from configuration hell. Because it sits outside of the server proper, importing or exporting content can become a day-long exercise, with no real way to make use of these scripts from within the system.\n\nThere are a number of processes like this - setting up namespace prefix associations for SPARQL comes to mind as one of the more common, or running a package manager in a consistent way. There are several tasks that are like this.\n\nPersonally, I think that one of the most powerful tools that MarkLogic could create would be a way to add new panes into the admin environment dynamically. There was a move to make the admin tools available as an API a few years back, now it may be time to take the opposite approach, to provide a toolset that lets developers create their own admin screens that could tie into the ones on port 8001.\n\nFor instance, suppose that I (as a vendor) have created a new application, and I wanted to set configurations to customize that application. The most logical place to put that configuration would be in the admin section, rather than having to devote a lot of time to building out a separate admin layer as part of the application itself.\n\nStop Trying To Be Oracle\n\nAiming to be the next Oracle is an impressive goal. It also misses the point.\n\nOracle came of age at a time when most of the databases out there were very primitive, and brought relational algebra to the market in a way that revolutionized that industry. Not surprisingly, they soon came to dominate the market, and as they did so, they stopped being an innovator and shifted over to being an aggregator.\n\nThe result of this were thousands of different products, many of which were only nominally compatible with one another (they had the same logo on the outside, typically), with most of those products spilling very specialized niches. Some of their technology is still awe-inspiring today, but a lot of it is complex, hard to use and of dubious value to the business process. They are now a very conservative force in the industry, and while they continue to maintain large contracts with many organizations and agencies, they are conspicuously absent in the next generation of companies.\n\nI like MarkLogic precisely for the fact that it is the first enterprise level data-server that I've seen that manages to marry object, relational and graph data systems into a single integrated unit. With a bit of tweaking, it could become the first true data virtualization platform on the planet. And it is a platform, not just a database. It has to be. Data virtualization is complex, has requirements that move beyond simply storing and retrieving data (most data virtualization occurs at the transformational level), and has a fairly stiff performance requirement in order to do well. MarkLogic can meet these requirements easily, when most data systems require lots of expensive customization just to get to the stage where MarkLogic is out of the box.\n\nNow, will MarkLogic ever hit Oracle's sales numbers? At Oracle's peak, it easily dominated a market where its customers were in need of any kind of data access capability. Today the market is over-saturated with just about every kind of data storage you could name, though the integration problems persist. However, I think it likely that at some point in the not too distant future MarkLogic will exceed Oracle's annual sales revenue.\n\nMost companies are now spending more money on analysts (under the rubric of data scientists) than they are on data programmers. By making MarkLogic indispensable to those data scientists (and the managers who rely upon them for their interpretations), you have the opportunity to shape the Smart Data market, but to do that, MarkLogic needs to expand its tools in that realm, rather than simply being content to be the platform on which others build.\n\nYou cannot define a market by trying to be like the market leader.\n\nOther Than That, I'm Good\n\nMarkLogic does a great deal right, without making it look hard. It's one of the things I like about the company. Yet it needs to move beyond being a black box and instead needs to start thinking of itself as a platform company. The Java and RESTful services, while useful to reach a core developer market, actually work against this platform approach because they make people see MarkLogic strictly through the lens of being a database.\n\nThis means investment into building up a new application layer, maybe even spinning off a company that can be dedicated strictly to that task (or keeping the application layer closer to the vest while spinning off ML Professional Services).\n\nOverall, I'm optimistic about MarkLogic, and I look forward to the time when it goes public. It's a good product, and is moving towards becoming a great product."
    }
}