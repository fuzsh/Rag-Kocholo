{
    "id": "correct_foundationPlace_00033_2",
    "rank": 34,
    "data": {
        "url": "https://doc.nuxeo.com/nxdoc/marklogic/",
        "read_more_link": "",
        "language": "en",
        "title": "MarkLogic",
        "top_image": "https://doc.nuxeo.com/assets/imgs/logo340x60.png",
        "meta_img": "https://doc.nuxeo.com/assets/imgs/logo340x60.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "MarkLogic. Learn how to get started with Nuxeo documentation.",
        "meta_lang": "en",
        "meta_favicon": "/assets/icons/apple-touch-icon.png?v=c2d5",
        "meta_site_name": "Nuxeo Documentation",
        "canonical_link": "https://doc.nuxeo.com/nxdoc/marklogic/",
        "text": "This addon is deprecated since Nuxeo Platform LTS 2019.\n\nDocument-Based Storage is an architectural abstraction in the Nuxeo Platform that allows the storage of documents in a document-oriented store, for instance NoSQL databases.\n\nThe Nuxeo Platform supports the following MarkLogic version:\n\nInstallation\n\nNuxeo Package Installation\n\nThis addon requires no specific installation steps. It can be installed like any other package with nuxeoctl command line or from the Marketplace.\n\nDatabases\n\nIn order to run Nuxeo on MarkLogic, you need to have two databases. One for documents and another one for modules. You can achieve that with MarkLogic administration GUI under Databases.\n\nBy default Nuxeo stores its information in the database nuxeo. By convention we use nuxeo-modules as modules database.\n\nXDBC Server Installation\n\nYou need to create a new XDBC App Server linked to the nuxeo database and nuxeo-modules modules, as described in the MarkLogic documentation. Main installation information is:\n\nSet / value in root input.\n\nChoose a server name and a port (for example 8010).\n\nSelect the nuxeo database in the database input.\n\nSelect the nuxeo-modules database in the modules input.\n\nUser permissions\n\nRoles\n\nIn order to secure your database access, you can create new roles to protect it. Under Security/Roles, create:\n\nA new role named nuxeo-reader, with:\n\nRoles: rest-reader\n\nExecute Privileges: xdbc:eval, xdbc:eval-in, xdbc:invoke, xdbc:invoke-in, xdbc:spawn, xdbc:spawn-in, xdmp:value, xdmp:with-namespaces\n\nA new role named nuxeo-writer, with:\n\nRoles: rest-writer, nuxeo-reader\n\nExecute Privileges: any-collection, any-uri, xdbc:insert, xdbc:insert-in\n\nDefault permissions: add nuxeo-reader with read capability, nuxeo-writer with update capability and nuxeo-writer with insert capability\n\nUsers\n\nUnder Security/Users, create a new user to use in MarkLogic connector to access to your database through XDBC app server. Choose a username and password, and add nuxeo-reader and nuxeo-writer in Roles section.\n\nModules\n\nThe MarkLogic connector needs some modules in order to properly work. These modules are used to update documents, lock/unlock them or search them (NXQL search).\n\nA module is basically a regular document stored in the module database, here nuxeo-modules.\n\nYou can use the qconsole to insert properly modules in the modules database, you can access it here: http://[IP]:8000/qconsole/\n\nBelow the steps to insert modules:\n\nCreate a new Query in qconsole\n\nDeclare a variable containing the content of xqy file, like: let $module := '...'.\n\nDeclare a variable containing right permissions to execute module, like: let $permissions := ( xdmp:permission(\"[PERMISSION]\", \"execute\") ).\n\nFinally, insert the module in database, like: return xdmp:document-insert(\"[PATH]\", text { $module }, $permissions).\n\nYou should have for each modules something like this:\n\nlet $module := ' [MODULE_CONTENT] ' let $permissions := ( xdmp:permission(\"[PERMISSION]\", \"execute\") ) return xdmp:document-insert(\"[PATH]\", text { $module }, $permissions)\n\nSee the matrix above for variables:\n\nConfiguration\n\nOnce you installed the Nuxeo MarkLogic addon, set up the access to the MarkLogic server in nuxeo.conf. The following properties are available:\n\nnuxeo.marklogic.host: The MarkLogic server, defaults to localhost\n\nnuxeo.marklogic.port: The MarkLogic XDBC App Server port, defaults to 8010\n\nnuxeo.marklogic.user: The MarkLogic user to login to App Server, defaults to nuxeo\n\nnuxeo.marklogic.password: The user password, defaults to password\n\nnuxeo.marklogic.ssl: The SSL switcher, defaults to false, set it to true to enable ssl encryption to your MarkLogic server\n\nThe package installation added the marklogic template to your existing list of templates (nuxeo.templates) in nuxeo.conf.\n\nYou must keep the template corresponding to your SQL database in nuxeo.templates, because the SQL database may still be used for other things (directories, audit, etc.). For instance you could have:\n\nnuxeo.templates=postgresql,marklogic\n\nor\n\nnuxeo.templates=default,marklogic\n\nRange Index Configuration\n\nIn order to properly work, MarkLogic needs a range element index for each elements you want to compare using <, <=, >= or > in a NXQL query.\n\nWe also use range index in order to query some elements. To leverage on range indexes, we need to use a different kind of MarkLogic function during NXQL -> MarkLogic query conversion. In order to enable this behavior, you need to add the Nuxeo element in repository configuration. You need to use range-element-index to declare a Nuxeo element to be queried with the range index behavior. The element name in repository configuration are the Nuxeo ones, for example we declare ecm:parentId in the repository configuration and we create ecm__parentId in MarkLogic. Below the default configuration of repository:\n\n<extension target=\"org.nuxeo.ecm.core.storage.marklogic.MarkLogicRepositoryService\" point=\"repository\"> <repository name=\"test\" label=\"MarkLogic Repository\"> ... <range-element-indexes> <range-element-index type=\"string\">ecm:id</range-element-index> <range-element-index type=\"string\">ecm:parentId</range-element-index> <range-element-index type=\"string\">ecm:ancestorIds</range-element-index> <range-element-index type=\"string\">ecm:versionSeriesId</range-element-index> <range-element-index type=\"string\">ecm:proxyTargetId</range-element-index> <range-element-index type=\"string\">ecm:proxySeriesId</range-element-index> <range-element-index type=\"string\">ecm:racl</range-element-index> <!-- Technical element --> <range-element-index type=\"string\">ecm:name</range-element-index> <range-element-index type=\"string\">ecm:primaryType</range-element-index> <range-element-index type=\"string\">ecm:lifeCycleState</range-element-index> <range-element-index type=\"string\">dc:title</range-element-index> <range-element-index type=\"dateTime\">dc:created</range-element-index> <range-element-index type=\"dateTime\">dc:modified</range-element-index> <range-element-index type=\"string\">rend:renditionName</range-element-index> <range-element-index type=\"dateTime\">rend:modificationDate</range-element-index> <range-element-index type=\"dateTime\">rend:sourceModificationDate</range-element-index> <range-element-index type=\"string\">collectionMember:collectionIds</range-element-index> <range-element-index type=\"dateTime\">nt:dueDate</range-element-index> <range-element-index type=\"dateTime\">dc:issued</range-element-index> <range-element-index type=\"string\">webc:name</range-element-index> </range-element-indexes> ... </repository> </extension>\n\nHere's a list of basic Nuxeo elements needing a range element index:\n\nIn order to create these indexes, go to your MarkLogic server configuration, under your database you'll find Element Range Indexes. In this section you can create a range element index for each elements with the correct scalar type. Leave namespace uri empty, set range value positions to false, and invalid values to ignore.\n\nStorage Restrictions\n\nDue to the nature of DBS, we use a transaction model equivalent to READ UNCOMMITTED, which means that a transaction may read data written but not yet committed by another transaction.\n\nFull-text configuration is disabled, you should use Elasticsearch with a suitable full-text configuration.\n\nNot Yet Implemented\n\nThe following features are planned for a later Nuxeo version but are not implemented currently:"
    }
}