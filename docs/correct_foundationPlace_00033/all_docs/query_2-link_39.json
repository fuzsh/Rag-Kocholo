{
    "id": "correct_foundationPlace_00033_2",
    "rank": 39,
    "data": {
        "url": "https://www.knowi.com/docs/marklogic.html",
        "read_more_link": "",
        "language": "en",
        "title": "MarkLogic Analytics",
        "top_image": "https://www.knowi.com/docs/images/icons/favicons/favicon-32x32.png",
        "meta_img": "https://www.knowi.com/docs/images/icons/favicons/favicon-32x32.png",
        "images": [
            "https://www.knowi.com/images/home/arrow-white.svg",
            "https://www.knowi.com/images/home/arrow-black.svg",
            "https://www.knowi.com/images/home/arrow-black.svg",
            "https://www.knowi.com/images/home/arrow-black.svg",
            "https://www.knowi.com/images/home/arrow-black.svg",
            "https://www.knowi.com/images/home/arrow-black.svg",
            "https://www.knowi.com/docs/images/navbar/database.svg",
            "https://www.knowi.com/docs/images/navbar/file-code-o.svg",
            "https://www.knowi.com/docs/images/navbar/file-code-o.svg",
            "https://www.knowi.com/docs/images/navbar/video-camera.svg",
            "https://www.knowi.com/docs/images/navbar/shield.svg",
            "https://www.knowi.com/docs/images/navbar/users.svg",
            "https://www.knowi.com/img/alertWidgetLimit.webp",
            "https://www.knowi.com/docs/images/docs/connect-marklogic.gif",
            "https://www.knowi.com/docs/images/docs/query-marklogic.gif",
            "https://www.knowi.com/docs/images/docs/data-strategy-marklogic.jpg",
            "https://www.knowi.com/docs/images/docs/preview-results-marklogic.gif",
            "https://www.knowi.com/docs/images/docs/create-and-run-marklogicdb.gif",
            "https://www.knowi.com/docs/images/docs/editor_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/generate_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/data-strategy-marklogic.jpg",
            "https://www.knowi.com/docs/images/docs/preview_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/mongodb-ai-generator-4.gif",
            "https://www.knowi.com/docs/images/docs/explain_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/issues_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/syntax_marklogic.gif",
            "https://www.knowi.com/docs/images/docs/marklogic-1.gif",
            "https://www.knowi.com/docs/images/docs/marklogic-2.gif",
            "https://www.knowi.com/docs/images/docs/marklogic-3.gif",
            "https://www.knowi.com/docs/images/docs/mongodb-ai-generator-4.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Business Intelligence",
            "Analytics",
            "Reporting",
            "Knowi",
            "Visualization",
            "Data Visualization",
            "Database Visualization"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Knowi is a Business Intelligence Tool for structured and unstructured data reporting and visualization.",
        "meta_lang": "",
        "meta_favicon": "images/icons/favicons/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.knowi.com/docs/marklogic.html",
        "text": "MarkLogic Datasource Integration\n\nKnowi enables data plumbing and visualizations from MarkLogic to go from data to visual interactive insights quickly.\n\nOverview\n\nConnect, extract and transform data from your MarkLogic, using one of the following options:\n\na. Through our UI to connect directly, if your MarkLogic servers are accessible from the cloud.\n\nb. Using our Cloud9Agent for datasources inside your network.\n\nQuery, Visualize and track all your key metrics instantly.\n\nUI Based Approach\n\nConnecting\n\nLog in to Knowi and select Queries from the left sidebar.\n\nClick on New Datasource + button and select MarkLogic from the list of datasources.\n\nAfter navigating to the New Datasource page, either use the pre-configured settings into Cloud9 Chart's own demo MarkLogic database or follow the prompts and configure the following details to set up connectivity to your own MarkLogic database:\n\na. Datasource Name: Enter a name for your datasource\n\nb. Host Name: Enter the host name to connect to\n\nc. Port: Enter the database port\n\nd. Database Name: Enter database name or leave empty to use default database\n\ne. User: Enter the User ID to connect\n\nf. Password: Enter the password to connect to the database\n\ng. Database Properties: Additional database connection properties/url parameters. For example, ssl=true&anotherProp=anotherVal. To set Connection to an SSL-enabled XDBC App Server, please set ssl=true.\n\nEstablish Network connectivity and click on the Test Connection button.\n\nNote: The connection validity of the network can be tested only if it has been established via Direct Connectivity or an SSH tunnel. For more information on connectivity and datasource, please refer to the documentation on- Connectivity & Datasources.\n\nClick on Save and start Querying.\n\nQuery\n\nSet up Query using a visual builder or query editor\n\nVisual Builder\n\nAfter connecting to the Couchbase datasource, Knowi will pull out a list of collections along with field samples.\n\nStep1: After connecting to the MarkLogic datasource, Knowi will pull out a list of collections along with field samples. Using these tables, you can automatically generate queries through our visual builder in a no-code environment by either dragging and dropping fields or making your selections through the drop-down.\n\nTip: You can also write queries directly in the Query Editor, a versatile text editor that offers more advanced editing functionalities like JavaScript/XQuery, support for multiple language modes, Cloud9QL, and more.\n\nStep 2: Define data execution strategy by using any of the following two options:\n\nDirect Execution: Directly execute the Query on the original Datasource, without any storage in between. In this case, when a widget is displayed, it will fetch the data in real time from the underlying Datasource.\n\nNon-Direct Execution: For non-direct queries, results will be stored in Knowi's Elastic Store. Benefits include- long-running queries, reduced load on your database, and more.\n\nNon-direct execution can be put into action if you choose to run the Query once or at scheduled intervals. For more information, feel free to check out this documentation- Defining Data Execution Strategy\n\nStep 3: Click on the Preview button to analyze the results of your Query and fine-tune the desired output, if required.\n\nThe result of your Query is called Dataset. After reviewing the results, name your dataset and then hit the Create & Run button.\n\nQuery Editor\n\nA versatile text editor designed for editing code that comes with a number of language modes including Influx Query Language (IQL) and add-ons like Cloud9QL, and AI Assistant which empowers you with powerful transformations and analysis capabilities like prediction modeling and cohort analysis if you need it.\n\nAI Assistant\n\nAI assistant query generator automatically generates queries from plain English statements for searching the connected databases and retrieving information. The goal is to simplify and speed up the search process by automatically generating relevant and specific queries, reducing the need for manual input, and improving the probability of finding relevant information.\n\nStep 1: Select Generate Query from AI Assistant dropdown and enter the details of the query you'd like to generate in plain English. Details can include table or collection names, fields, filters, etc.\n\nExample: XQuery query to show description from feeds\n\nNote: The AI Assistant uses OpenAI to generate a query and only the question is sent to OpenAI APIs and not the data.\n\nStep 2: Define data execution strategy by using any of the following two options:\n\nDirect Execution: Directly execute the Query on the original Datasource, without any storage in between. In this case, when a widget is displayed, it will fetch the data in real time from the underlying Datasource.\n\nNon-Direct Execution: For non-direct queries, results will be stored in Knowi's Elastic Store. Benefits include- long-running queries, reduced load on your database, and more.\n\nNon-direct execution can be put into action if you choose to run the Query once or at scheduled intervals. For more information, feel free to check out this documentation- Defining Data Execution Strategy\n\nStep 3: Click on the Preview button to analyze the results of your Query and fine-tune the desired output, if required.\n\nNote 1: The OpenAI must be enabled by the admin before using the AI Query Generator.\n\nNote 2: The user can copy the API key from the personal OpenAI account and use the same or use the default key provided by Knowi.\n\n{Account Settings > Customer Settings > OpenAI Integration}\n\nFurthermore, AI Assistant offers you additional features that can be performed on top of the generated query as listed below:\n\nExplain Query\n\nFind Issues\n\nSyntax Help\n\nExplain Query\n\nProvides explanations for your existing query. For example, an explanation requested for the query generated below AI Assistant has returned the description-\n\nThis MarkLogic query is declaring a variable, $feeds, which contains two XML elements, each with a title and description. The query then returns the description of each feed. The output of the query would be:\n\nFind Issues\n\nHelps in debugging and troubleshooting the query. For example, finding issues in the query generated below returns this error- The feeds is misspelled (should be \"feeds\")\n\nSyntax Help\n\nAsk questions around query syntax for this datasource. For example, suggesting the syntax for the requested query returned the response- \"The following XQuery code can be used to display records from a MarkLogic database:\n\nlet $records := fn:collection(\"records\") for $record in $records return {$record/title} {$record/description} \"\n\nSemantics SPARQL with XQuery\n\nSemantic SPARQL can be executed using XQuery as following.\n\nxquery version \"1.0-ml\"; import module namespace sem = \"http://marklogic.com/semantics\" at \"/MarkLogic/semantics.xqy\"; sem:sparql(' <SPARQL QUERY> ')\n\nExample:\n\nxquery version \"1.0-ml\"; import module namespace sem = \"http://marklogic.com/semantics\" at \"/MarkLogic/semantics.xqy\"; sem:sparql(' SELECT ?person WHERE { ?person <http://example.org/marklogic/predicate/livesIn> \"London\" } ')\n\nFor more details on Semantics and SPARQL, see MarkLogic Semantics Documentation.\n\nAI Query Generator\n\nThe AI query generator automatically generates queries from plain English statements for searching the connected databases and retrieving information. The goal is to simplify and speed up the search process by automatically generating relevant and specific queries, reducing the need for manual input, and improving the probability of finding relevant information.\n\nSTEPS:\n\nStep 1: Enter the details of the query you'd like to generate in plain English. Details can include table or collection names, fields, filters, etc. The AI generator uses OpenAI to generate a query.\n\nOnly the question is sent to OpenAI APIs and not the data.\n\nExample:\n\n\"Return Count of adjustedprice from claims2018age_gender (XML)\"\n\nStep 2: Click on the Run and the query will be generated which you can copy to the clipboard and paste into the Query Editor.\n\nStep 3: Click on the Preview button to analyze the results of your Query and fine-tune the desired output, if required.\n\nNote 1: The OpenAI must be enabled by the admin before using the AI Query Generator.\n\nNote 2: The user can copy the API key from the personal OpenAI account and use the same or use the default key provided by Knowi.\n\n{Account Settings > Customer Settings > OpenAI Integration}\n\nCloud9Agent (StandAlone) Configuration\n\nAs an alternative to the UI based connectivity above, you can configure Cloud9Agent directly within your network (instead of the UI) to query MarkLogic. See Cloud9Agent to download and run your agent.\n\nHighlights:\n\nPull data using XQuery and optionally manipulate the results further with Cloud9QL.\n\nExecute queries on a schedule, or, one time.\n\nThe agent contains a datasource_example_markLogic.json and query_example_markLogic.json under the examples folder of the agent installation to get you started.\n\nEdit those to point to your database and modify the queries to pull your data.\n\nMove it into the config directory (datasource_XXX.json files first if the Agent is running).\n\nDatasource Configuration:\n\nParameter Comments name Unique Datasource Name. datasource Set value to marklogic host Host or IP to connect to port Port to connect to dbName claimsdemo userId User id to connect, where applicable. Password Password, where applicable userId User id to connect, where applicable.\n\nQuery Configuration:\n\nQuery Config Params Comments entityName Dataset Name Identifier identifier A unique identifier for the dataset. Either identifier or entityName must be specified. dsName Name of the datasource name configured in the datasource_XXX.json file to execute the query against. Required. queryStr MarkLogic SQL query to execute. Required. frequencyType One of minutes, hours, days,weeks,months. If this is not specified, this is treated as a one time query, executed upon Cloud9Agent startup (or when the query is first saved) frequency Indicates the frequency, if frequencyType is defined. For example, if this value is 10 and the frequencyType is minutes, the query will be executed every 10 minutes startTime Optional, can be used to specify when the query should be run for the first time. If set, the the frequency will be determined from that time onwards. For example, is a weekly run is scheduled to start at 07/01/2014 13:30, the first run will run on 07/01 at 13:30, with the next run at the same time on 07/08/2014. The time is based on the local time of the machine running the Agent. Supported Date Formats: MM/dd/yyyy HH:mm, MM/dd/yy HH:mm, MM/dd/yyyy, MM/dd/yy, HH:mm:ss,HH:mm,mm c9QLFilter Optional post processing of the results using Cloud9QL. Typically uncommon against SQL based datastores. overrideVals This enables data storage strategies to be specified. If this is not defined, the results of the query is added to the existing dataset. To replace all data for this dataset within Knowi, specify {\"replaceAll\":true}. To upsert data specify \"replaceValuesForKey\":[\"fieldA\",\"fieldB\"]. This will replace all existing records in Knowi with the same fieldA and fieldB with the the current data and insert records where they are not present.\n\nExamples\n\nDatasource Example:\n\n[ { \"name\": \"demoMarkLogic\", \"host\": \"54.205.52.22\", \"port\": \"8010\", \"dbName\": \"claimsdemo\", \"userId\": \"user\", \"password\": \"pass\", \"datasource\": \"marklogic\" } ]\n\nQuery Examples:\n\n[ { \"entityName\": \"Total Claims\", \"queryStr\": \"let $sorted-claims :=\\n for $claim in collection(\\\"claimscsv\\\")/root\\n where $claim/id > 10190 and $claim/id < 10590\\n order by $claim/id\\n return $claim\\nfor $claim at $count in subsequence($sorted-claims, 1, 10)\\nreturn $claim\", \"c9QLFilter\": \"SELECT service_month, NET_PAID_AMT, BILL_AMT, MBR_AGE\", \"queryType\": \"XQuery\", \"dsName\": \"demoMarkLogic\", \"overrideVals\": { \"replaceAll\": true }, \"frequencyType\":\"minute\", \"frequency\":10 } ]"
    }
}