{
    "id": "yago_31588_3",
    "rank": 97,
    "data": {
        "url": "https://softwareengineering.stackexchange.com/questions/45425/im-a-cs-student-and-honestly-i-dont-understand-knuths-books",
        "read_more_link": "",
        "language": "en",
        "title": "I'm a CS student, and honestly, I don't understand Knuth's books",
        "top_image": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "meta_img": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "images": [
            "https://cdn.sstatic.net/Sites/softwareengineering/Img/logo.svg?v=e86f7d5306ae",
            "https://www.gravatar.com/avatar/69773747c1caba2cdd4c11899d88cff6?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d508bf39f43c089b20d79af69186da0e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/yJCdp.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f17131c7feaf9a92fe35323f6ec48429?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/4c263fe87d408564a9e5f6d1e519aed4?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/11e0e09b31bc1bbff23fd85b7d189592?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b0fcda25808158ae2c0b453d33d2cff7?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Ct4o3.jpg?s=64",
            "https://i.sstatic.net/VI2SI.jpg?s=64",
            "https://i.sstatic.net/z5MSO.jpg?s=64",
            "https://www.gravatar.com/avatar/09b757d51c8a76eb0eccfdbf571d964f?s=64&d=identicon&r=PG",
            "https://softwareengineering.stackexchange.com/posts/45425/ivc/cc5e?prg=a75bbe5d-276c-47cf-992e-d7ed6ecd36d4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2011-02-08T13:12:01",
        "summary": "",
        "meta_description": "I stumbled upon this quote from Bill Gates: \"You should definitely send me a resume if you can read the whole thing.\" He was talking about The Art of Programming books. So I was pretty curious and ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/softwareengineering/Img/favicon.ico?v=c4f35a1e3900",
        "meta_site_name": "Software Engineering Stack Exchange",
        "canonical_link": "https://softwareengineering.stackexchange.com/questions/45425/im-a-cs-student-and-honestly-i-dont-understand-knuths-books",
        "text": "Be sure to read all of Gates's quote including this:\n\n\"It took incredible discipline, and several months, for me to read it. I studied 20 pages, put it away for a week, and came back for another 20 pages. If somebody is so brash that they think they know everything, Knuth will help them understand that the world is deep and complicated.\"\n\nThey are not easy books and they're not intended to be. Remember that one of Knuth's goals was to bring mathematical rigor to computer science. That's great if you want to prove something about an algorithm, but not-so-great if you just want to know how it works.\n\nMichael Dorfman has a few good tips for reading the books in his answer to the (now deleted) question on Stackoverflow about What Can I Get From Reading the Lot?. If you don't have 10k rep, you can still view the question and his answer on the wayback machine.\n\nWhat will you get from reading the lot? An excellent foundation in Computer Science. You'll understand how computers operate, from logic gates on up through compilers. You'll think about problems you never really knew were problems (i.e., what is the fastest way to multiply?) and see algorithmic connections between things that you never thought were related (riverbeds, RNA and nested parentheses, for example.)\n\nI completely disagree with the folks who say \"build software instead of reading about building software\"-- there is a difference between the disciplines of Software Engineering and Computer Science. TAOCP is about the latter.\n\nIf you haven't yet begun, I have a few recommendations.\n\nFirst, you may want to begin with Volume 4. It's some exciting material, very up-to-date, and Knuth's sense of humor shines through. Plus, there are videos available (on the Stanford SPCD site, or the Stanford iTunes) where Knuth discusses various sections. These videos are highly recommended. Fascicles 0, 1, 2, 3 and 4 of Volume 4 are available as separate paperbacks. Together, the published V4 material is larger than any of the first 3 volumes, but sliced up into bite-sized treats. (I wonder if Volumes 1-3 would seem less terrifying to people if each volume had been published in single-chapter paperback form...)\n\nDepending on your math background, I'd recommend you skim Chapter 1 the first time through, and return to it as needed. In fact, you'll probably want to read each section (at least) twice-- quickly the first time, just to get the intuition and the gist of the arguments, and then slowly, carefully, understanding each step.\n\nBe sure to read Volume 1, Fascicle 1 on MMIX instead of the old sections on MIX. MMIX is better in many ways, and you'd be better off converting the MIX in the text to MMIX as you go along than trying to straddle both worlds.\n\nA general rule: don't skip the exercises. There's a lot of good material in the questions (and answers). Do as many exercises as you can; but read them all (and read the answers, once you've taken a shot at the problem, or decided to give it a pass).\n\nFinally, if you really catch the bug: read the index. Lots of great jokes hidden away there.\n\nNaturally, StackOverflow would be a good place to post specific questions on the text, if they should happen to arise....\n\nFor other resources, I've found that browsing the syllabuses of well-regarded computer science schools is useful. For example, textbooks for beginning algorithm classes:\n\nStanford uses Algorithm Design\n\nCarnegie Mellon uses Data Structures and Algorithm Analysis in Java\n\nMIT uses Introduction to Algorithms\n\nWhen I first graduated I picked up the first three volumes of TAOCP as a graduation gift to myself and attempted to read them straight through. Never managed it. These days I've made it through maybe 1/3rd of the first three volumes (thought in no particular order). The material is definitely dense, but there are three tips I've learned that helped a lot.\n\nFirst, don't try to read from cover to cover. TAOCP is really as much of a reference work as anything, and I've found it's best to read a section when it's relevant to a problem you're trying to solve. Like many things in the world, understanding the solutions is much easier once you've encountered the problems they are trying to solve.\n\nNext, that flowchart in the front of the book, it's not just a bit of humor but actually quite a useful tip. Read the sections you're working on iteratively, starting first with just the overarching concepts and then gently getting deeper into the math.\n\nFinally, keep some good old fashioned paper and a pencil handy to work through the algorithms as they are described, and work through a few of the easy problems. It goes a long way to help re-enforce what you're reading.\n\nI stumbled this quote from Bill Gates: \"You should definitely send me a resume if you can read the whole thing.\" He was talking about The Art of Programming books.. So I was pretty curious and want to read it all but honestly, I don't understand it at all.. I'm really not that highly intellectual being.. So this should be the reason why I can't understand it, but I am eager to learn.. I'm currently reading volume 1 about fundamental algo.. So is there any books out there that are friendly to novice/slow people like me? So I can build up myself and hopefully in the future I can read Knuth's book at ease..\n\nif you define yourself as not a highly intellectual being then you are setting yourself to low expectations. You got to break that mentality if you want to do something worthwhile the trouble. There should be no doubt in your mind that you can achieve something. Also, achieving it doesn't mean that you will achieve it easily.\n\nThings worth pursuing are the ones that are difficult... and that's not a cliche. In software, engineering, on in life in general, if you want to achieve something, you got to go for the things that are hard, the things people avoid, and not settle for the lowest common denominators of things.\n\nFirst, it is not clear what your CS background is. Knuth's book require a degree of maturity. Few people with a CS degree can go through it with ease. I would not expect a CS student that has just finished his first course in algorithms to actually be able to go through even a single of Knuth's book. The maturity needed to get it is just not there, and that has nothing to do with the student's mental capacity.\n\nYou need to have your basic of algorithms down cold and clear, and you need to have a fair amount of programming (work and/or scholastic) under your belt - I'd say, 40 credits on programming at least. You also need to have your CS mathematics on firm ground.\n\nYou can't go far ahead without having a good grasp of discrete mathematics (and possibly theory of computation.)\n\nIt's not that you will need that knowledge to work on Knuth's problems, but you need a maturity to be able to go through that type of material.\n\nFirst pick one book and one book only (CLRS' book as previously suggested), and work it from start to finish. When possible do programs implementing the algorithms. Don't use Java or C#, not even C++. Go to bare bones C and get the feeling of building things from bare-bone metal scraps.\n\nAlso get Knuth's book on \"Concrete Mathematics\" if you have not done a course in discrete mathematics and computation theory. Would be good for you to go through that book as well.\n\nThen tackle Knuth's encyclopedia, one tome, one chapter at a time. Don't go to another chapter without having a good grasp of the first one.\n\nI would suggest you go through volume I (fundamental algorithms) first, then volume III (searching and sorting). Those should be your immediate goals. Then, later (much later), tackle volume IV (Combinatorial Algorithms) and then Volume II (Semi-Numerical Algorithms.)\n\nDon't feel bad if you don't get it at first. I've been trying to get through volume I and III for years (10 years now).\n\nAnd you should not put so much weight on it either. Don't do it to prove something to somebody or yourself. Do it because you are intellectually interested in doing so. You can become proficient in algorithms by simply using the CLRS' book (or any of the fine grad-level books out there.)\n\nBe pragmatic and give yourself a break. Treat going through Knuth's book as a long-term personal ambition, not as an immediate proof that you are CS material ;)\n\nThere are other more important things (career-wise) to kill yourself for ;)"
    }
}