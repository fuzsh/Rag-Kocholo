{
    "id": "yago_31588_0",
    "rank": 60,
    "data": {
        "url": "https://ptgmedia.pearsoncmg.com/images/0201896834/interview/0201896834.html",
        "read_more_link": "",
        "language": "en",
        "title": "Untitled Document",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Innovations Interviews\n\nDonald Knuth on The Art of Computer Programming\n\nDonald Knuth is updating all three volumes of his definitive series, The Art of Computer Programming, one of the most well-known works in computer science. Innovations interviewed him to find out more about how this came about.\n\nInnovations: What do you see as the most important developments in programming since starting The Art of Computer Programming (TAOCP)?\n\nKnuth: The most important developments were surely the ideas of structured programming (1970s) and literate programming (1980s). But I'm a fan of all developments, not just the most important ones; and, of course, we now know a huge number of new techniques, especially with respect to Volume 4 [forthcoming]. When I began writing TAOCP in 1962, almost none of the ideas now in Volume 4 had been discovered; almost nobody would even have thought of writing a book about Combinatorial Algorithms. But during the 1970s, more than half of all papers on Computer Science were about that subject.\n\nInnovations: Where are those developments reflected in these new editions?\n\nKnuth: I've gone over every page and updated material, when I think the subject has \"converged\" to a form that people will find important not only today but also 50 or 100 years from now. Such changes appear throughout the books, most notably in the chapter on random numbers. On the other hand, many topics in Volumes 1, 2, and 3 are still evolving rapidly. In such cases, I have not made a major update; I've simply added a little icon to the page, meaning \"sorry, still under construction\"! I will do a final update to those books after I finish Volumes 4 and 5; otherwise I'd have to rewrite them again, and I would never finish. It's more important for me to get Volume 4 done than to keep Volumes 1, 2, and 3 strictly up to the minute.\n\n&nbsp&nbsp The new editions have hundreds of new exercises and answers to exercises that I know will always be instructive; I've been noting these things in my own copies of the books since the 1970s, and I'm making them public now.\n\nInnovations: Why revise Volumes 1, 2, & 3 before publishing Volume 4?\n\nKnuth:Because they haven't been revised for a long time and I have a megabyte of updates that I'm sure people will want to know about. Silvio Levy has made it possible for me to do this without taking much time away from Volume 4, because he's doing the hard work of converting the old books to TeX and merging everything together. Another friend, Jeff Oldham, is putting all the illustrations into METAPOST form, so that they will be improved too.\n\n&nbsp&nbsp And there's another significant reason: By going through Volumes 1, 2, and 3 in this way, I'm able to be sure that Volume 4 matches them well, in spite of the fact that I took 13 years off to work on TeX and METAFONT and Concrete Mathematics and some other books that had to be written in the 80s.\n\n\"I've gone over every page and updated material, when I think the subject has 'converged' to a form that people will find important not only today but also 50 or 100 years from now.\"\n\nInnovations: Do you still see this as a seven volume set?\n\nKnuth:Volume 4 will be split into three subvolumes: 4A, 4B, 4C. I have always regarded the subject matter of Volumes 1-5 as the \"basic core\" of computer methods for sequential machines. These volumes deal with the algorithms that are used for hundreds of different applications in all branches of computer science. Therefore, after I finish Volumes 1-5, I plan to put out a single-volume \"reader's digest\" version that summarizes their highlights.\n\n&nbsp&nbsp By contrast, I've always viewed Volumes 6 and 7 as specialized offshoots of the inner core. Volume 6, on the theory of context-free languages, and Volume 7, on the writing of compilers, deal with very important areas but they are not as central as the algorithms I'm dealing with in Volumes 1-5.\n\n&nbsp&nbsp When I've finished writing the core volumes-and please notice that there will be seven of them, since Volume 4 will actually split into Volumes 4A, 4B, and 4C-I will of course go next to Volumes 6 and 7, provided that they still need to be written. I've been saving a lot of good stuff for those books, and my files are full of things that I look forward to including in them some day. But that will be 15 or 20 years from now. If I discover that most of what I want to say has already been said by somebody else, then I'll declare my series finished and I'll happily declare my main life's work to be finished. Then I'll go and write the music that I've been dreaming about all these years.\n\nInnovations: Can you tell us about the process by which Volume 4 will eventually be published?\n\nKnuth: I'll publish so-called fascicles, about 128 pages each, about twice a year. These will be \"beta-test\" versions of the eventual book; they will represent my best shot, but I'm sure that readers will be able to help me make many improvements in the final edition. The subject is so vast that I cannot hope to get everything right on my first try. Charles Dickens did a similar thing with his novels: He published fascicles containing Chapters 1 and 2 before he had any idea how the stories were going to end. That way he could get the best reader feedback.\n\n&nbsp&nbsp I view my role as trying to be a spokesman for many people who are developing computer science; I try to present their discoveries in a uniform way that a programmer-on-the-street who cannot read advanced scientific jargon will be able to understand. I've spent 35 years gathering a database of materials and notes about these topics, and I think my point of view (although biased) will be helpful to many readers; that's why I'm hoping to have readers participate and have adopted a fascicle-preview strategy.\n\nInnovations: What inspired you to start this project?\n\nKnuth:There was no reliable guide to the literature in 1962. I was the only person I knew who had read most of the journals yet had not discovered very many things myself; and I liked to write. Thus I thought I could give a more balanced and unbiased account than the people who had made the most important discoveries. Of course, after I got going, I discovered a few things of my own, so by now I'm as biased as anybody. But you asked about what was the inspiration in 1962. And the answer is: There was a huge need for a book like The Art of Computer Programming, but everybody who was capable of writing it was unfortunately likely to give a terribly slanted account!\n\nInnovations: What do you see as the biggest challenge facing programmers today?\n\nKnuth: The hardest thing is to go to sleep at night, when there are so many urgent things needing to be done. A huge gap exists between what we know is possible with today's machines and what we have so far been able to finish.\n\nInnovations: Who have been the biggest influences on your computing career?\n\nKnuth: Of course I have been tremendously influenced by giants in the field, such as Dijkstra, Flajolet, Karp, Sch√∂nhage, Tarjan, Yao, as well as by great mathematicians like de Bruijn. But Computer Science, like all sciences, grows chiefly by thousands of little steps rather than by a few giant steps. Therefore I am convinced that the Great Edifice of Computer Science is built primarily from the important foundation stones contributed by thousands of people who will probably never be members of the National Academy of Science. It has been my great pleasure to learn from them and to try to put their wonderful discoveries into a coherent framework. Some great computer scientists never write papers; I learn about their work either in conversation or by reading their programs. If only a few \"big influences\" had been behind my books, I would have finished writing them many years ago.\n\nInnovations: What do you think about the whole language war with C++, Java, etc.?\n\nKnuth: So what else is new? There have been such battles ever since I learned to program as a college freshman in 1957. Languages come and go much faster than I can write books. That's why I chose to explain algorithms in English, not in the language of the moment. Readers learn a lot by converting from English to their favorite language; The Art of Computer Programming emphasizes things that are independent of languages. No matter what programming language is hot, you need good ideas to express in those languages. If you want your algorithms to be prepackaged, fine, but then my books aren't written for you.\n\n&nbsp&nbsp Actually I'm extremely glad to see the continuing development of languages, not only because programming languages are getting better and better in important ways, but also because such work soaks up a lot of people's energy-therefore computer scientists don't write papers that I would otherwise have to read, and I can get my books finished a lot sooner.\n\nInnovations: Other than working on the new editions of The Art of Computer Programming, what takes up your time these days?\n\nKnuth: I happily swim, play keyboard instruments, and accept prizes."
    }
}