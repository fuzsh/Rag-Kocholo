{
    "id": "dbpedia_7099_2",
    "rank": 44,
    "data": {
        "url": "https://www.bhavaniravi.com/software-engineering/backend-engineer-behind-the-scenes",
        "read_more_link": "",
        "language": "en",
        "title": "Backend Engineer - Behind the Scenes",
        "top_image": "https://www.bhavaniravi.com/~gitbook/ogimage/i5QL1qid7iUf7bNQ07b7",
        "meta_img": "https://www.bhavaniravi.com/~gitbook/ogimage/i5QL1qid7iUf7bNQ07b7",
        "images": [
            "https://www.bhavaniravi.com/~gitbook/image?url=https%3A%2F%2Fwww.bhavaniravi.com%2F%7Egitbook%2Ficon%3Fsize%3Dmedium%26theme%3Dlight&width=32&dpr=4&quality=100&sign=72dd87cd&sv=1",
            "https://www.bhavaniravi.com/~gitbook/image?url=https%3A%2F%2Fwww.bhavaniravi.com%2F%7Egitbook%2Ficon%3Fsize%3Dmedium%26theme%3Ddark&width=32&dpr=4&quality=100&sign=65cb20af&sv=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-17T07:24:36.460000+00:00",
        "summary": "",
        "meta_description": "The process of dissecting a complicated problem into solvable pieces is what makes this job so interesting and lovable.",
        "meta_lang": "en",
        "meta_favicon": "https://www.bhavaniravi.com/~gitbook/icon?size=small&theme=light",
        "meta_site_name": "",
        "canonical_link": "https://www.bhavaniravi.com/software-engineering/backend-engineer-behind-the-scenes",
        "text": "In Jan 2020, when I crafted my backend skills well at Kissflow. I wanted more. I started looking out for other opportunities. So when I interviewed Saama technologies, I told Malaikannan, my current manager, that I want to work on challenging projects. He promised that I would work on things, where Google searches won't be enough. Six months and three complex projects later, I think he took the promise way too seriously. I want to share what happens behind the scenes when I build backend systems because it's so much fun.\n\nWhy now?\n\nWhy not write this post three months back when I cracked my first project?\n\nThe first project might have been a one-time incident. One can share a framework only when a pattern repeats more than once.\n\nWhat do I do?\n\ntl;dr - I am a part of a team that figures out whether the crazy ideas of our product managers are achievable or not.\n\nI work for the R&D division of Saama Technologies, with some of the brightest minds you can find. I call them \"the brainy bunch\". NLP, Deep Learning, Chatbots, Devops, Quantum computing, AutoML, name an upcoming technology, we got one on our team. We build as platforms and expose them to the Saama Engineering team for them to incorporate it with our core products.\n\nBehind the Scenes\n\nBirth of a Project\n\nProduct managers, one morning after waking up from sleep, Just kidding!, after having a million interaction with customers and seeing an impossible request arising continuously, comes to Malai(my manager). On Malai's input, the project gets handed over to us.\n\nOne such impossible request and hand-over call later. I had this project at hand.\n\nFirst 3 weeks\n\nThe first three weeks are crucial because there is uncertainty everywhere. Neither your brain nor the manager or the product owner has answers to all the questions. Imagine walking in the dark or finding your way through a forest without a map.\n\nDuring this time, I can't devote to anything else. You won't see me tweeting, writing a blog post, or working on side projects. The brain will be occupied entirely by\n\nWhat the hell is this?\n\nWhy am I doing this?\n\nWhat am I doing wrong?\n\nWhy the hell is it so hard?\n\nWhy don't people write documentation?\n\nFew things I do at this part apart from doubting myself is\n\nReading through the requirements and user stories like the bible.\n\nStaring at the wall for hours and visualize the flow\n\nSketching the ideas after ideas\n\nShare them visualization with your teammates to validate and iterate\n\nMillion Google searches\n\nCheck if the technology choice accommodates all the requirements\n\nThe Spark\n\nAt the end of 2 to 3 weeks, the visuals of the control flow look like a possible target to achieve. You will no longer hate yourself much; you won't feel that stupid.\n\nFor example, The current project involves a total of 7 components/services. We got to build 3 out of 7 components ground up. The rest of the components already exists, eg., Kubernetes, Docker, Airflow. It's the matter of bringing them all together.\n\nSounds easy, right? Now that I look at it, yes, it is not so hard. But two weeks back, I had the tiniest clue what the six components did, whether they had the necessary functionality. It took me two weeks to understand if the six components match the requirement. The flow diagram on the paper had gone through 4 iterations last week.\n\nFinally, it is the matter of converting the flow diagram into the lines into lines of code. Even now, there are few missing pieces, but the confidence of coming this far will power things through.\n\nThe Development\n\nThe most straightforward segment of software development stages is to convert your ideas into code. Of course, no design is set in stone. There might be decisions that you might have to take on the fly. But there are a few things that you can't get wrong.\n\nWriting good code\n\nFollowing the standards(Linting, documentation, naming conventions) should always be your priority\n\nTest-Driven Development\n\nA project as complicated the one I am building is bound to change, so it is essential to make sure your test suite is created along with the codebase.\n\nDeployment scripts\n\nTrust me on this, if you have Docker and Kubernetes involved in your production, make it a habit to set it up on Day 1 and test your code there. Saves hours of debugging later.\n\nDissecting your technology choices\n\nIt is an essential step before starting development. Create a checklist of things expected from your technology choices, create a matrix of what's supported and what's not. It is important to understand where things won't work than where things will.\n\nWhile you can get away with Stackoverflow-ing but, be ready and open to read beyond documentation and other codebases.\n\nAvoid spec/architecture change\n\nChanges at this point are costly. Mostly because you have to work through another 2 weeks of uncertainty. So don't start coding until the product owners are sold on your architecture design\n\nIntegration testing\n\nWhile unittest gets you through module-level stability. Any software is never complete without components working in harmony, so add doses of integration tests\n\nPerformance\n\nAlways keep performance in mind. When we talk about performance, think of latency(time taken for 1 task to complete) vs. Scalability(No of tasks completed per sec)\n\nIt is tempting to jump in and fire those git commits but what's going to save you significant time is the time you spend on designing is what makes development a smooth experience.\n\nPre & Post Production\n\nThe crucial step of any software product is taking it to production. I am not a pro at the following but from what I learned from my peers these are the things that you would keep tabs on.\n\nContinuous Deployment strategies\n\nOnce things hit production, you would want to move fast, be it bug fixes or new features things start to roll, and the stakes are high. Hence having a solid CI/CD pipeline comes handy\n\nSecurity and Compliance\n\nThe projects of Saama involves high confidentiality, therefore following the compliance guidelines and keeping the team aware of it is crucial\n\nMonitoring and Logging\n\nThe turn-around time to find and fix things in production is short. That's when a reliable tracking and logging framework comes handy\n\nDocumentation\n\nDocument every piece of your production setup. It can be a bunch of ansible scripts with setup guidelines.\n\nRisk management\n\nWhat's the backup strategy, how to handle when a particular cloud-zone goes down, what's your business continuity plan during calamities\n\nLearn, Unlearn, Repeat\n\nPost-release as the users start using the product bug counts are bound to increase. As far as you have done everything above right, you can cross your fingers and hope nothing big pops up. Once the bug count saturates on the product/feature is adopted well, you can roll up your sleeves and walk up to the product owner for a new set of challenges. Oh, wait! You already have a call scheduled to discuss just that.\n\nNone of this might sound easy or humanly possible. Yes, there are deadlines, uncertainties that put pressure on you. The process of dissecting a complicated problem into solvable pieces is what makes this job so exciting and lovable."
    }
}