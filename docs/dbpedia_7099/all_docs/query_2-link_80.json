{
    "id": "dbpedia_7099_2",
    "rank": 80,
    "data": {
        "url": "https://satyaq.wordpress.com/",
        "read_more_link": "",
        "language": "en",
        "title": "\"on software and stuff\"",
        "top_image": "https://secure.gravatar.com/blavatar/fbddacdf3f0aea722dc8830eed9125dfd9a73626c3bd5ff790d1cbf7ba9d11c1?s=200&ts=1723894578",
        "meta_img": "https://secure.gravatar.com/blavatar/fbddacdf3f0aea722dc8830eed9125dfd9a73626c3bd5ff790d1cbf7ba9d11c1?s=200&ts=1723894578",
        "images": [
            "https://lh5.ggpht.com/vjjcMjMnmIej1FWPkcrurUU_D791RXhjUhQW2wcVf0siTPvvIBvcbxb-eyoJlLCdUUs=h900-rw",
            "https://satyaq.wordpress.com/wp-content/uploads/2013/09/screen-shot-2013-09-03-at-11-12-50-pm.png?w=637",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/11/unnamed.png?w=114",
            "https://i0.wp.com/kissflow.com/wp-content/themes/brix/images/logo.png",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/06/form_designer-e1341084902336.png?w=300&h=161",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/06/workflow_designer-e1341084873228.png?w=300&h=164",
            "https://i0.wp.com/www.orangescape.com/wp-content/themes/orangescape/images/logo.png",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/06/2012-06-16-14-03-26.png?w=90",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/06/2012-06-16-14-03-35.png?w=90",
            "https://satyaq.wordpress.com/wp-content/uploads/2012/06/2012-06-16-14-03-49.png?w=90",
            "https://secure.gravatar.com/blavatar/fbddacdf3f0aea722dc8830eed9125dfd9a73626c3bd5ff790d1cbf7ba9d11c1?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://secure.gravatar.com/blavatar/fbddacdf3f0aea722dc8830eed9125dfd9a73626c3bd5ff790d1cbf7ba9d11c1?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-01-19T19:21:09+00:00",
        "summary": "",
        "meta_description": "About issues concerning software, startups and product management.",
        "meta_lang": "en",
        "meta_favicon": "https://secure.gravatar.com/blavatar/fbddacdf3f0aea722dc8830eed9125dfd9a73626c3bd5ff790d1cbf7ba9d11c1?s=32",
        "meta_site_name": "\"on software and stuff\"",
        "canonical_link": "https://satyaq.wordpress.com/",
        "text": "Few days back, we released the android version of Peekaboo HD. It‚Äôs a series of apps focusing on introducing animals and their voices to kids in a very pleasant way. It‚Äôs minimalistic and quite fun for toddlers. (more details here)\n\nWe chose SVG for rendering the images considering the smaller size and better scaling capabilities that it provides. This was an interesting choice considering android doesn‚Äôt support SVG natively, and the browser support for SVG started very recently (3.0+). We went the route of SVG renderers. We looked at few SVG renderers available and finalized AndroidSVG (by Paul Lebeau).\n\nAndroidSVG rendered our svg files the best and seems more active than the other libraries available. (Also, Paul responded to our query email very promptly üôÇ ). This solved our problem for finding a good SVG renderer. Next up was animations..\n\nPeekaboo animates the animals to add some fun and engagement. AndroidSVG doesn‚Äôt support SVG animations, so we chose to do a custom frame-by-frame animation.\n\nLooking at the options, AnimationDrawable seemed almost perfect. So, we dynamically created an AnimationDrawable object and used the addFrame() method to add the Drawables to it. AndroidSVG gave us a picture object, which we could add as PictureDrawable. Here‚Äôs a brief of that particular code:\n\nAnimationDrawable animationDrawable = new AnimationDrawable(); SVG svgImage1 = SVG.getFromResource(context, R.raw.image1); animationDrawable.addFrame( new PictureDrawable( svgImage1.renderToPicture(), 50)); SVG svgImage2 = SVG.getFromResource(context, R.raw.image2); animationDrawable.addFrame( new PictureDrawable( svgImage2.renderToPicture(), 50)); //finally, set it to the imageView someImageView.setPictureDrawable( animationDrawable);\n\nThat‚Äôs pretty much it and we have an animated Animal. We had the animation choreographed for the voice, so that it seems in sync. We achieved that by varying the animation duration of each frame.\n\nHope this helps you if you‚Äôre trying out something similar. Let me know if you‚Äôve been successful in other ways as well..\n\nI‚Äôve been watching US open Tennis currently and I‚Äôve observed this trend as we move up the rounds. Was quite interesting, so thought of sharing my thoughts on it..\n\nIf you observe matches in the initial rounds, you see lot of lower ranked players playing each other. As we move forward in the rounds, the quality increases and we see better levels of tennis. In the initial rounds, the games seem to go at a much slower pace. Most points are won on ‚ÄúUnforced Errors‚Äù, which means errors that were made by the player himself, not induced by the opposite player.\n\nLets look at a match stat.. It was between Somdev Devvarman and Lukas Lacko\n\nHave a look at the Winners and Unforced Errors stat there. You‚Äôd see the result went in the favor of one who made fewer unforced errors. This is a typical trend in the initial rounds. Hence the matches are quite boring as there are lot of mistakes made by the players, and worse, the players are just waiting for each other to make mistakes rather than play the awesome winners. This may not be true, but certainly looks like that.\n\nNow compare this with a game further down the tournament, a Semi Final or the Final. This is generally contested between top ranked players. These guys or girls hardly make any unforced errors. So you‚Äôd typically see lot of winners and great game overall.\n\nThis same thing applies for any type of company or work as well..\n\nThere are jobs that pay you just to not make a mistake. You‚Äôre just expected not to make a mistake. It doesn‚Äôt matter if you don‚Äôt hit the winners. Hitting winners brings an element of risk along with it. If it goes wrong, it adds a negative remark on your profile. However, if you do hit a winner, it really doesn‚Äôt add much to your profile. Generally discourages improving and upping your game.\n\nThis works perfectly for some organizations and employees. They play the lower rounds and never really interested in making it to the next rounds, because this game will not cut it.\n\nIf you move higher through the rounds, you‚Äôll not only have to make less mistakes but at the same time, hit winners.\n\nIt is certainly tougher than just waiting for some one else to make a mistake for you to get advantage. It certainly requires lot of hard work to perfect your game, where you reduce your number of unforced errors. It certainly requires you to be more aggressive and try out impossible winners at times. It certainly involves lot more risk and certainly pushes the envelope of your physical and mental capabilities.\n\nBut this is what makes great championships what they are. Top players hit winners, and not just waiting for opponent‚Äôs mistakes.\n\nThis is the reason only Finals are remembered.\n\nThis is the reason only Champions are celebrated.\n\nAnyone who has developed Android application, knows the issue with their emulators. Slow and sluggish are the words that come to mind, when we talk about them, and that‚Äôs just getting started. Practically, they‚Äôre pretty much useless for any serious app development. Most developers prefer to develop and debug right on their devices, and skip the emulator completely.\n\nOk, enough about them. Back to our point..\n\nI recently came across Genymotion, which is an evolution of the popular AndroidVM project. This emulator will completely put all our arguments to rest. It is fast and snappy. Loads in about 10 seconds and works as good as a device. It also provides lot of preset device configurations, so you can emulate the popular devices on genymotion.\n\nTo make it work, you need to install VirtualBox on your machine, and then follow the instructions to setup a device configuration in minutes. You can also add plugins to your favourite editor (Intellij IDEA, in my case) to work with the virtual devices that you‚Äôve setup.\n\nThat‚Äôs it. You‚Äôre ready to run your app in this shiny new emulator. Go ahead and give it a try. Strongly recommended.\n\nThis is yet another post on Navigation Drawer pattern recently introduced in Google I/O 2013.\n\nThis pattern is certainly not new, and has been around for quite some time. Sliding Menu has been my favourite implementation so far. It supports left and right mode, with many other configurable options like size of the slide menu, movement behind it, etc. However, the navigation drawer provided by android compat library differs in the presentation of the concept.\n\nNavigation Drawer has chosen to keep Action Bar as well as the main view intact, and appears as an overlay on top of the view. It works really smooth and looks great too. The other advantage here is that Google is adopting this approach on all its flagship products and hence would be instantly recognisable. One drawback however, is that it is currently not supported on gingerbread and lower devices. Though, it should soon be available along with ActionBarCompat that was announced during the I/O.\n\nOn to the point now.. The implementation of Navigation Drawer is fairly straight-forward and documented very nicely here. Here I‚Äôd mention an approach using which you could use navigation drawer on both left and right side in the same view. This is useful for following reasons:\n\n1. You want to use the left side drawer for Navigation purpose and right side drawer for things like ‚ÄòFilter‚Äô, ‚ÄòNotifications‚Äô etc.\n\n2. You‚Äôd like a similar feel for overlays that appear on the app. Using it on both sides, gives a very smooth flow and retains the same behaviour (peeking, smooth sliding and edge touch).\n\nOn to the implementation:\n\nThis would be an extension to the application provided as example in the documentation section. So, first get the example app running and then try this method.\n\nAdd another ListView for the right side drawer, and instead of ‚Äústart‚Äù use the layout_gravity as ‚Äúend‚Äù. So your final layout file would look like following\n\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/drawer_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"> <FrameLayout android:id=\"@+id/content_frame\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /> <ListView android:id=\"@+id/left_drawer\" android:layout_width=\"400dp\" android:layout_height=\"match_parent\" android:layout_gravity=\"start\" android:choiceMode=\"singleChoice\" android:divider=\"@android:color/transparent\" android:dividerHeight=\"0dp\" android:background=\"#111\"/> <ListView android:id=\"@+id/right_drawer\" android:layout_width=\"400dp\" android:layout_height=\"match_parent\" android:layout_gravity=\"end\" android:choiceMode=\"singleChoice\" android:divider=\"@android:color/transparent\" android:dividerHeight=\"0dp\" android:background=\"#111\"/> </android.support.v4.widget.DrawerLayout>\n\nIn the activity, get a handle to both the list views. (By the way, they could be any other views as well..). Now whenever you need to open the right side menu, just call the openDrawer method on the drawer layout, providing gravity as END.\n\nmDrawerLayout.openDrawer(Gravity.END);\n\nThat‚Äôs it, now you could open the navigation drawer on both sides.\n\nNow, you‚Äôd like to close one drawer on opening the other drawer.. Use the closeDrawer method at appropriate location to close the drawer.\n\nmDrawerLayout.closeDrawer(Gravity.END);\n\nThat‚Äôs pretty much it. The drawers close and open in a very smooth manner and provide a pleasant experience to the user.\n\nHappy android hacking..\n\nHere‚Äôs an update on my work lately. Just released an updated version of SignEasy on the play store. SignEasy is a mobile-only app that makes signing documents really a piece of cake. Import your document from dropbox, box, sd card, email and quickly sign them digitally with a smooth experience. I‚Äôm a user of the app as well and truly appreciate the simplicity with which you could sign the documents. There‚Äôs nothing complicated about it.\n\nI started work on SignEasy only recently when Sunil (co-founder, SignEasy) approached me to improve their android version of the app. The app was in a decent shape, with the existing code not available in a great condition. The android version had a few performance issues too and the workflow was a little tedious. The major issue was that the signing process felt incomplete. There was no provision to sign the document on the client side. It was uploaded to the server to sign and return back the signed copy.\n\nThis was a slightly painful experience for the user. Since the user couldn‚Äôt immediately see where he signed in the document. It‚Äôd only be available after he finishes his editing and the document is returned from the server. We analyzed a few android pdf editing/rendering libraries and went with one with supported local editing and rendering ability. Integrated that quickly into our code and that was it. Now users can quickly see their signatures on the app, and don‚Äôt need to wait for server processing. We also changed a few finer things in the app and the results are available in the new update of the SignEasy app in the play store.\n\nIf you‚Äôd like to work with me on your product/idea, Please do send me a note at satya@satyanarayan.in.\n\nThere was an interesting discussion that I recently had with a friend. The context was around choosing a technology stack for server end of the solution. We were discussing around php, python or Java. Client-end technology does not provide many choices right now. On mobile, Android/ios have specific platforms. If you‚Äôre going hybrid, you‚Äôd go with javascript based ones. Server end is a little different. There‚Äôs a host of choices.\n\nOk. Back to the discussion. So we‚Äôd need to hire developers to work on the back end. Our thought was this: If we choose a more sophisticated language, would we get better developers. Now, in the choices we had, python was the most sophisticated. Personally, I like the language and the community around it. Now, if we went with PHP or Java, it‚Äôd be relatively easy to hire developers in India especially. Also, due to sufficient supply, we could also hire at a nominal rate and not burn our pockets. Though, the quality of such folks is rather questionable. In my experience, we‚Äôve had to interview 10-20 people or more on average to find a decent developer in PHP or Java. Especially one who could appreciate programming in general and understand different design paradigms. Typically, you come across people who‚Äôve known to code a certain way, and base their experience around a couple of tools. They feel completely foreign when introduced to newer concepts, even though experience-wise boasting greater than 5 years or so.\n\nNow python developers aren‚Äôt too common here and come at a relative premium. Same with Ruby, Clojure, Node or similar languages/platforms. But since the language is so sophisticated, it instills lot of good practices in developers. Also, the quality of design skill is certainly higher than a regular PHP guy, to say the least.\n\nIn the end, you need a smart developer. One who is a good problem solver, has neat design skills and likes to produce quality stuff. Our conversation came to a conclusion that we need to choose a better platform to find the right developers. Python is a choice that we made for the exact reasons.\n\nThe emphasis on a good developer because : A good developer is much more valuable than just his coding skills. There are many facets of product development, where a sound feedback or input from developer shapes the product in a great direction. Since they‚Äôre the closest to the core/internals of the product, their inputs are very valuable, and a right person at that place is the first step in that direction.\n\n[Note: The idea is not to look down upon PHP and Java developers, or anyone for that matter. I‚Äôve known and worked with extremely smart developers, who used these languages to express themselves. The post is in general a reflection of current status of hiring (especially in startups/smaller teams), and lack of efficient developers.]\n\nWould love to hear your thoughts as well.. Please do share them here.\n\nI‚Äôm talking about professionals. Ones who just do their work without any fuss and get along with their lives. Working with them is very uneventful. There are hardly any surprises. They seem to have all things covered, figured out. Its like a great Billiards player. They know which ball to hit and where to stop the cue. There‚Äôs no messing around there.\n\nOn the contrary, most of our software projects seem to be like a messed up puzzle. Few things hanging here, few hanging there. Gathering all the pieces together at the last minute. Get it in an wardrobe. Close the door of the wardrobe somehow. Get the damn product out the door. Repeat the process for every release. This seems to be an accepted norm.\n\nThe first company I used to work for had a delivery manager named Mr. Bali (name changed). He was this ultimate adventure lover. He could convert any normal project to a cliffhanger and then deliver it in crunch situation (mostly well past the delivery dates). He earned a reputation of the go-to man whenever the situation was tense and the management needed a ring-master. And, to be fair, he did a good job at that. After some point, it became a habit for all projects to lead up to this situation and managers/team members playing like superheroes. The whole account became a hub for super heroes. It almost resembled ‚ÄòThe Avengers‚Äô on every project.\n\nNow our superheroes got into a habit of fire-fighting and would never strive to finish things off at a normal pace. Unfortunately for them, this kind of strategy doesn‚Äôt work for long and you‚Äôre sure to fail more often than succeed.\n\nBut its fun. Its a roller coaster ride for everyone involved. There‚Äôs emotion, tragedy, action, comedy.. all the masala that makes a blockbuster.\n\nOn the other side, there was this another delivery manager Mr. Semwal. He got into a habit of breaking down things, measuring progress, taking corrective actions well in advance. He‚Äôll seldom get into such situations where he‚Äôd have to run around crazy to get stuff done. Most of his projects get done well in time ensuring full control on quality and well being of the team members.\n\nBut, of course, he‚Äôd never be a hero. He never provided the entertainment which Mr. Bali did.\n\nMost management falter at this. They need to recognize calculated, methodical professionals too as they celebrate the heroic ones. Reward consistency and measured approach over heroic ones. This improves over time and keeps you away from heartaches. There are other ways of providing yourself with such cliffhanger entertainment.\n\nOrangescape recently launched KiSSFLOW (workflow as a service) at Google I/O 12. I was privileged to see a demo of the app prior to the launch and tried it out for few days. Will probably be implementing it at our company too..\n\nThe value proposition is very clear. Many smaller and medium size companies use Google Apps account for their mail and document needs. Most of the organization processes happen over informal means, through emails or paperwork. Providing a platform which allows company owners to set up easy automation flows to manage some of their processes will come in very handy. On top of it, if it utilizes the data already present, nothing like it. KissFlow comes across as one such platform where you can quickly automate some of the organization process without leaving the affordability and the environment of Google.\n\nSome of the things I really liked about the app:\n\n1. The User Interface\n\nIt has maintained a very consistent feel to the other google apps and is a pleasure to use. It didn‚Äôt need much of training or help to get started with the process creation, form creation or following a process from initiation to completion.\n\n2. The Form designer\n\nIt is one of the better form designers around. Covers most cases for a typical company needs.\n\n3. The workflow designer\n\nThis is the core of the app and lives up to the expectations. It allows you to add a step in the process and associate it with people responsible for executing that step. Again, all the users are fetched from Google‚Äôs repository. It supports different type of action like approval, input needed and also allows you to branch parallel processes.\n\nIt could easily represent some of the simpler processes like Reimbursement, Leave, and Procurement within the company. With some intense use, it could also be customized for some of the more complex ones like Sales Lead and complex Procurement flows.\n\nIt could be made better with pre-created templates and more help content to create the workflows. But, as it is, its pretty decent.\n\n4. Query back and Follow request options\n\nThese are two nice touches. Query back allows for clarification related to requests and provides a nice discussion mechanism (would be nice if it displays all the conversations, though..).\n\nFollow option allows people in the chain to follow a request till its completed. This enables other people to also be involved in whats happening with the request.\n\nAll in all, it looks a great app for smaller and medium size businesses who already use Google Apps for their company. Ability to attach documents from Google Docs, access it from within the google environment and feel like one too. Deployed to Google App Engine, it can get you started in minutes.\n\nIts free for 10 users and charges post that. More on their price here.\n\nOn Orangescape, I‚Äôve been following them since quite a few years and is one of the better companies that‚Äôve come out of our place. Their contribution to the developer community in chennai and around has been inspirational to many of them. They recently raised a $1M fund from Indian Angels and would be raising some more very soon.\n\nKudos to the team on the launch and expecting more exciting news from them in the days to come.\n\nBolo is a new app that I‚Äôve created that helps parents record interesting voices to animal pictures and play them for their kids. Well, technically, the kids could do that too. So, all in all, fun.\n\nIt started on friday morning.. Was playing with my son and found some apps which make animal sounds. The sounds aren‚Äôt the best in most of those apps, to say the least. So I started making some noises myself and my son loved it. Well, the sounds were still not great, but he loved it being performed live. Hah, I‚Äôve defended myself now.\n\nGave me an idea, why not make an app where parents could fill in for animal‚Äôs voices. Then start playing with their kid, making noises live and being played back. That‚Äôs how ‚ÄòBolo‚Äô started.\n\nBolo in hindi means ‚Äòsay‚Äô. So thats what it does.\n\nDevelopment started Friday night. Saturday Afternoon, it was pushed to the market. (Of course, I slept for a while too.)\n\nTechnical details :\n\nContains a simple ViewPager Activity and FragmentStatePagerAdapter. Recording and Playback is done using MediaRecorder and MediaPlayer apis. There‚Äôs not much to say apart from that.\n\nIt is available in Google Play Store here.\n\nThe pictures are taken from http://www.bigfoto.com and modified using Instagram‚Äôs android app.\n\nHope you have fun with it. Do let me know if some addition could improve the experience.\n\nHere are some screenshots:\n\nThere are a host of independent libraries which help us write android apps more quickly and in more maintainable fashion. These apps range from accessing View elements to Event Handling to Security and Database access. Here are a few of them which rate high in my opinion:\n\n1. An actual smartphone\n\nThere‚Äôs nothing like it. I‚Äôve seen few people code on emulator. I‚Äôd not recommend it because of its speed and irregularities. Start using the phone for your development. The productivity benefits are huge.\n\nOne handset would do fine for development. üôÇ\n\n2. Robotium\n\nSimple test framework on Android.\n\n3. Robojuice\n\nIt has few good utilities like Injection of resources/views and pojos. Also has a basic event framework.\n\n4. Sugar\n\n[I‚Äôm the developer here]. But seriously, if you have more than a few tables, its better to go with a tool that provides you some abstraction. Sugar is an effort to provide ActiveRecord like access to database Objects. Few similar tools that offer this feature are listed here..\n\n5. IntelliJ IDEA and MAT\n\nIntelliJ IDEA is the best Java editor out there. Android support comes with its community edition. Memory Analyzer Tool is an obvious choice for analyzing the heap dumps.\n\n6. GreenDroid\n\nIt has some readymade widgets for use in Android. The code is fairly mature and useful. Good addition to your UI development.\n\nThis in no way is an exhaustive list.. I‚Äôll try to keep adding to this list with some specific libraries for specific purpose.\n\n[Update]\n\n7. ActionBar Sherlock\n\nAction bar is a great way to present navigations and user actions in Android apps. It was started with Honeycomb and is well received and extremely improved in ICS and Jellybean. ActionBarSherlock provides an easy way to make this design available on prior versions of android. Its very popular and a must-have library.\n\n8. Sliding Menu\n\nIts a nice little library to add sliding menu (like Google+, Facebook, etc.) to your application. It is very easy to integrate with and adds a touch of style to your app. Along with ActionBarSherlock, it adds a great look and ease of navigation to your app.\n\nDo share if you have some recommendations."
    }
}