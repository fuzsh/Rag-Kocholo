{
    "id": "dbpedia_1589_0",
    "rank": 68,
    "data": {
        "url": "https://www.planview.com/resources/articles/lkdc-agile-software-development/",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile Software Development?",
        "top_image": "https://media.planview.com/wp-content/uploads/2020/01/social-planview-rebrand-min.jpg",
        "meta_img": "https://media.planview.com/wp-content/uploads/2020/01/social-planview-rebrand-min.jpg",
        "images": [
            "https://media.planview.com/wp-content/uploads/2019/09/rachaelle-lynn.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Rachaelle Lynn"
        ],
        "publish_date": "2020-03-17T15:40:24",
        "summary": "",
        "meta_description": "Agile delivers the maximum value while minimizing a projectâ€™s overhead cost. Learn about Agile software development, used by IT development teams to manage work.",
        "meta_lang": "",
        "meta_favicon": "https://media.planview.com/favicon/favicon.ico",
        "meta_site_name": "Planview",
        "canonical_link": "https://www.planview.com/resources/articles/lkdc-agile-software-development/",
        "text": "While Agile is a work method that provides a set of tools and principles to work smarter, it takes practice to learn. Agile teams using visual management may find it easier to integrate Agile practices within any vertical, including IT and non-IT professionals.\n\nOrganizations are always figuring out new ways to get projects done faster, cheaper and better. While project teams find themselves sacrificing effectiveness for time and / or costs, they are still required to meet the quality standards of the organization requesting the deliverable.\n\nThe age-old battle between time, cost and quality has created innovations in how teams effectively get work done. Scrum and other Agile methods are examples of innovation in workflow management, and principles of visual management have emerged as the next evolution of project and task management.\n\nProfessional computer programmers were once trained by engineers who taught teams to work using formulaic methods such as the Waterfall approach. While earlier programming (1980s-era) teams using work efficiency / project management methods had the best intentions, the software they developed was often too expensive to justify their relatively short life cycles.\n\nOften, by the time a piece of software was completed, it had already become outdated. The rapidly-evolving needs of new software for businesses, coupled with the specialized skillsets and amount of time and effort it takes to deliver software, has driven up the cost of software development so much that many companies have chosen to adopt a software development method that reduces the time to market while preserving quality standards. Agile helps teams focus on the right work so they can deliver the right product without making too many sacrifices.\n\nAgile today\n\nThe Agile methodology has evolved over time as development teams work to improve processes and build on the philosophies stated in the Agile Manifesto, a set of principles laid out by the Agile Alliance to help teams grow with the Agile movement.\n\nUsing Agile, software development teams have come a long way in helping to reduce costs, improve turnaround time and generally lighten the burden of stress on development teams working to complete complex software development projects.\n\nTransitioning to Agile for project management\n\nTo transition your team to Agile (regardless of whether you develop software, manage a marketing team or run a legal firm), you must first understand and agree with the core principles of Agile and apply them as fundamentals of Agile project management. While these principles may seem like common sense, actually applying them in your daily work usually takes practice.\n\nAccording to the Agile Manifesto, the principles of Agile favor:\n\nPeople and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan"
    }
}