{
    "id": "dbpedia_1589_1",
    "rank": 72,
    "data": {
        "url": "https://plan.io/blog/what-is-agile-project-management/",
        "read_more_link": "",
        "language": "en",
        "title": "The Ultimate Guide to Implementing Agile Project Management (and Scrum)",
        "top_image": "https://assets.plan.io/images/blog/implementing-agile-project-management.png",
        "meta_img": "https://assets.plan.io/images/blog/implementing-agile-project-management.png",
        "images": [
            "https://www.gravatar.com/avatar/67e90e36a89f48e87627ed71eaec50a9",
            "https://www.gravatar.com/avatar/67e90e36a89f48e87627ed71eaec50a9",
            "https://plan.io/images/blog/implementing-agile-project-management.png?1722938247",
            "https://plan.io/images/blog/checklist-agile-project-management-screenshot.png?1722938247",
            "https://plan.io/images/blog/agile-toolchain.png?1722938247",
            "https://plan.io/images/blog/checklist-agile-project-management-screenshot.png?1722938247",
            "https://plan.io/images/blog/agile-board@2x.png?1722938247",
            "https://plan.io/images/blog/test-question-issue.png?1722938247",
            "https://plan.io/images/blog/roadmap-time-tracking-estimated.png?1722938247",
            "https://plan.io/images/blog/agile-product-roadmap.png?1722938247",
            "https://plan.io/images/blog/kanban-agile-task-board.png?1722938247",
            "https://plan.io/images/blog/extreme-programming.png?1722938247",
            "https://plan.io/images/blog/checklist-agile-project-management-screenshot.png?1722938247",
            "https://plan.io/images/blog/project-management-magic-tricks.png?1722938247",
            "https://www.gravatar.com/avatar/7054f647c82eef25eb117d8fe56a53d6",
            "https://plan.io/images/blog/5-scrum-masters-share-advice.png?1722938247",
            "https://www.gravatar.com/avatar/67e90e36a89f48e87627ed71eaec50a9",
            "https://plan.io/images/blog/delegate-like-a-pro.png?1722938247",
            "https://www.gravatar.com/avatar/ec0a6ac9bd172932148a187240330fd8"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "project",
            "project management",
            "knowledge management",
            "task management",
            "time tracking",
            "cloud file synchronization",
            "Redmine",
            "intranet",
            "wiki"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How do companies like Microsoft and Google update every single one of the products in a week or two while other companies take years? The short answer is: Agile project management. While teams following a ‚Äútraditional‚Äù software development process (like Waterfall) will spend months or years building...",
        "meta_lang": "en",
        "meta_favicon": "https://assets.plan.io/images/apple-touch-icon.png",
        "meta_site_name": "Planio",
        "canonical_link": "https://plan.io/blog/what-is-agile-project-management/",
        "text": "Jory MacKay\n\nJory is a writer, content strategist and award-winning editor of the Unsplash Book. He contributes to Inc., Fast Company, Quartz, and more.\n\nJanuary 11, 2018 ¬∑ 17 min read\n\nThe Ultimate Guide to Implementing Agile Project Management (and Scrum)\n\nüéÅ Bonus Material: Free Agile Project Management Checklist!\n\nHow do companies like Microsoft and Google update every single one of the products in a week or two while other companies take years? The short answer is: Agile project management.\n\nWhile teams following a ‚Äútraditional‚Äù software development process (like Waterfall) will spend months or years building a product before showing users, Agile flips that process on its head.\n\nAgile project management is a product philosophy that‚Äôs built on moving fast, releasing often, and learning from your actual users. And it works.\n\nResearch from the Project management institute found that Agile organizations are more likely to finish projects on time (65% vs. 40%) and hit all their goals (75% vs. 56%) when compared to non-Agile teams. Agile companies even grew their revenue 37% faster!\n\nLet‚Äôs repeat that one more time before we dive in: Agile teams build products faster, hit their goals more often, and make more money. So why wouldn‚Äôt you want to bring Agile project management to your team?\n\nJump to a section:\n\nIn this guide, we‚Äôre going to help guide you through the core principles of Agile, help you evaluate if it‚Äôs right for your team, and then teach you how to get up and running with our 7-step Agile project management implementation plan. We have even included a Free Agile Checklist to help you identify the Agile resources and processes you need and help guide you through the transition.\n\nWhat is Agile? And how does it work in project management?\n\nAgile is a development process that takes an iterative approach to building software. Teams use a number of Agile methodologies to plan releases and then work in time-blocked ‚Äúsprints‚Äù to continuously push out new software and learn from customer feedback.\n\n(We‚Äôll get into the specific Agile methodologies later or you can jump there now!\n\nIt‚Äôs this tight ‚Äúfeedback loop‚Äù between customers and the developers that allows Agile teams to increase their development speed, collaborate better, and react quickly to customer needs and market changes.\n\nYet while Agile has become the standard for almost every major software company from Apple to Facebook to Spotify, this wasn‚Äôt always the case.\n\nUntil the last few decades, most projects were run on what‚Äôs known as the Waterfall (or Traditional) method of development. In the Waterfall method, teams plan out the entire development process first and then work through it sequentially before releasing it to users.\n\nThis means companies were investing a huge amount of time, resources, and money into something they didn‚Äôt even know would be a success.\n\nBe design, the waterfall method relies on predictability and sequence. But what most software developers started to crave was a more flexible project management method that included space for errors, bugs, setbacks, market changes, and feedback from real users.\n\nSo, in 2001, a group of 17 individuals came together to create an ‚Äúalternative to documentation driven, heavyweight software development processes.‚Äù\n\nThey called it the Agile Manifesto.\n\nThe 4 core principles of running an Agile project\n\nAt its core, Agile project management isn‚Äôt so much a methodology as a philosophy.\n\nThis means that while there are many different ways to implement Agile, they all share a few core beliefs that clearly differentiate them from the Waterfall method:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nThis doesn‚Äôt mean you should ignore the tools, documentation, and plans you‚Äôve worked so hard to develop. But rather that the core focus of Agile project management should be on people, prototypes, collaboration, and iteration.\n\nWhile these principles give you a good high-level view into the Agile mindset, they‚Äôre still a bit vague. That‚Äôs why the original Agile founders also released a list of 12 guiding principles for running an Agile project:\n\nThe highest priority is to satisfy the customer through early and continuous delivery\n\nWelcome changing requirements, even late in development\n\nDeliver working software frequently, from a couple of weeks to a couple of months\n\nStakeholders and developers must collaborate on a daily basis\n\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\nFace-to-face meetings are deemed the most efficient and effective format for project success\n\nA final working product is the ultimate measure of progress\n\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\nContinuous attention to technical excellence and good design enhances agility\n\nSimplicity, maximizing the work not done, is an essential element\n\nThe best architectures, requirements, and designs emerge from self-organizing teams\n\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly\n\nIf you think of software development today, Agile is a direct response to sky-high user expectations.\n\nThe core focus of Agile project management should be on people, prototypes, collaboration, and iteration.\n\nUsers don‚Äôt care about documentation, they care about working software. They don‚Äôt care about your long-term plan, they want something now. If you‚Äôve released a bug, they expect it to be fixed now‚Äìnot in a few months‚Äìor else they‚Äôll find another option.\n\nWe‚Äôve all become very needy consumers, and Agile is a fantastic way to make sure the user‚Äôs needs are put front and center whenever you‚Äôre developing new software. But how do you put it into practice?\n\nThe core components of Agile: Sprints, standups, user stories, and more\n\nAgile as a concept isn‚Äôt that hard to grasp. But like any tool or method, Agile has its own quirks and nuances you need to understand if you‚Äôre truly going to master it.\n\nBefore we dive into the specifics of implementing Agile project management, let‚Äôs go over the core components you‚Äôll be using.\n\nUser stories\n\nUser stories are the backbone of planning out an Agile project. Simply put, a user story is a short, simple feature description told from the perspective of your users.\n\nIn most cases, they take the form of:\n\n‚ÄúAs a [type of user] I want [some particular feature] so that [some benefit] is received.‚Äù\n\nThis format helps you get specific about what needs to be built and why so you can more accurately estimate the time involved to actually make it!\n\nCheck out our in-depth Guide to User Story Mapping for more!\n\nSprints\n\nSprints are short cycles of development where you work towards a release. A typical sprint should take about 1‚Äì4 weeks and needs to finish with some usable piece of software being shipped.\n\nThe goal is to keep these sprints the same length throughout the project so it‚Äôs easier to plan future work, adjust your goals, and not get bogged down.\n\nThere‚Äôs a lot that goes into planning and running sprints, which is why we put together this in-depth Sprint Planning guide.\n\nMeetings (stand-ups, planning, retrospectives, etc‚Ä¶)\n\nIn Agile, teams self-organize and decide what should be included in sprints. This means that regular meetings are a huge component of keeping your team on track.\n\nThe core meetings you should think about are:\n\nDaily standups (or ‚Äúscrums‚Äù): These are quick daily meetings where everyone talks through what they‚Äôre working on. It helps you stay informed and focused on hitting the sprint goals.\n\nSprint planning: This is a longer meeting at the start of a sprint where the Agile team decides what work should be included.\n\nSprint retrospective: At the end of a sprint, the team comes together to discuss what was completed, what worked, and how you can improve moving forward.\n\nAgile board\n\nAgile projects move quickly and you need a tool to keep you organized.\n\nAn Agile board can be as low-tech as a whiteboard with sticky notes showing the current sprint‚Äôs user stories and progress. However, there are tons of amazing tools out there that can take your Agile team to the next level.\n\nFor example, Planio comes standard with an Agile board that you can use to organize projects and quickly see what the progress is of every task in your current sprint.\n\nUsing Planio, you can organize your entire product backlog and then assign tasks to sprints. Every task includes everything you need to move forward including details, priority, assignee, associated files and more.\n\nYou can even use the built-in time tracker to see if you‚Äôre accurately estimating how long a task should take to complete. (This is amazing for future sprint planning!)\n\nProduct backlog\n\nAs requests, user feedback, and new ideas come in, you‚Äôll end up with a ton of potential features and projects to take on. These live in your product backlog until you‚Äôre ready to add them to a sprint.\n\nThe backlog can consist of features, bug fixes, non-functional requirements‚Äîpretty much anything that needs to be done in order to deliver working software. However, the product backlog is more than just a storing facility. It‚Äôs an important piece of the Agile puzzle that needs to be regularly updated and ‚Äúgroomed.‚Äù\n\nTaking care of the project backlog is a major part of your role as an Agile project manager.\n\nTeam Roles\n\nFinally, Agile project management brings in a couple of new team roles that you‚Äôre probably a bit unfamiliar with. While each Agile methodology treats team members a bit differently, the common roles you should know include:\n\nScrum Master: The Scrum Master helps ensure that each sprint stays on track by monitoring progress, facilitating meetings, and helping remove roadblocks. They‚Äôre also the team‚Äôs advocate and help communicate with stakeholders.\n\nProject owner: The project owner helps define the goals of each sprint, manages the backlog, and represents the voice of the user to the team. This could be you (as the project manager) or someone else.\n\nTeam members: The development team does the work decided on for each sprint. Agile teams are self-organizing, meaning they decide how best to accomplish their work rather than get directed by someone outside the team.\n\nStakeholders: Every project has stakeholders‚Äìpeople who are impacted by the outcome of a project. In Agile, stakeholders are purely informational, as in they shouldn‚Äôt dictate how a project is run. For more info, read our guide on What is a Stakeholder in Project Management?\n\nGetting started with Agile Project Management: A 7-step Agile implementation plan for technical teams\n\nNow that you understand the philosophy and core elements of Agile project management, let‚Äôs dig into how to actually implement Agile on your team!\n\nSwitching to an Agile organization is a big move. And especially as a project manager, it can feel a bit daunting.\n\nAgile promotes self-organizing teams, changing plans on the fly, and a ton of collaboration between the development team and stakeholders‚Äìall elements that make most project managers cringe.\n\nBut while Agile removes some of the structure you‚Äôre used to, it puts a different level of importance on project management.\n\nAgile is all about rhythm. When you‚Äôve got multiple, interdependent cycles of planning and delivery going on, your teams need to be in sync more than anything else. As a project manager or team leader, it‚Äôs your job to have that view from 30,000 feet up to make sure everyone is working together smoothly.\n\nAgile is all about rhythm. When you‚Äôve got multiple cycles of planning going on, your teams need to be in sync.\n\nHere is our 7-step plan for implementing Agile project management:\n\nStep 1: Set your project vision and scope with a planning meeting\n\nWhat is it?\n\nAt the beginning of a new Agile project, you need to define a clear business need that your project is addressing. In more simple terms: what is the end goal of this Agile project and how will you achieve it?\n\nAn Agile strategy meeting covers big picture ideas but it also needs to be realistic. You can start to think about the scope of work, but remember that Agile projects need to be flexible and adapt to feedback.\n\nTo keep your planning meeting focused, try using the Elevator Pitch method:\n\nFor: (Our Target Customer)\n\nWho: (Statement of the Need)\n\nThe: (Product Name) is a (Product Category)\n\nThat: (Key Product Benefit, Compelling Reason to Buy and/or Use)\n\nUnlike: (Primary Competitive Alternative)\n\nOur Product: (Final Statement of Primary Differentiation)\n\nWho should be there?\n\nThe Agile planning meeting is where you get buy-in on your project. Try to include relevant stakeholders as well as the product owner and key members of the product team.\n\nWhen does it happen?\n\nA planning meeting should happen before the project starts. Or, if you‚Äôre working on a project continuously, plan a major strategy meeting annually to ensure your mission is still valid.\n\nHow long should it take?\n\nThe length of time an Agile planning meeting should take is totally subjective. However, depending on the complexity of the project, most can take anywhere from 4‚Äì16 hours (just not in a row!)\n\nStep 2: Build out your product roadmap\n\nWhat is it?\n\nWith your strategy in place, it‚Äôs time for the product owner to translate that vision into a product roadmap. This is a high-level view of the requirements, updated user stories, and a loose timeframe of how it will all get completed.\n\nThe ‚Äòloose‚Äô part here is important. You‚Äôre not spending days or weeks planning out every step, but simply identifying, prioritizing, and roughly estimating the time and effort each piece of your product will take on the way to making a usable product.\n\nSo, what does this look like for an Agile project? Product Management expert Roman Pichler suggests working with a goal-oriented product roadmap, which is sometimes also referred to as theme-based:\n\n‚ÄúGoal-oriented roadmaps focus on goals, objectives, and outcomes like acquiring customers, increasing engagement, and removing technical debt. Features still exist, but they are derived from the goals and should be used sparingly. Use no more than three to five features per goal, as a rule of thumb.‚Äù\n\nFor each of these goals, you want to include 5 key pieces of information: Date, Name, Goal, Features, and Metrics\n\nWho should be there?\n\nThe product roadmap is the responsibility of the product owner but should include input from any other stakeholders in the project‚Äîthink marketing, sales, support, and development team reps.\n\nWhen does it happen?\n\nThe product roadmap needs to be in place before you start planning out sprints, so it‚Äôs best to move into creating it directly after your strategy meeting.\n\nHow long should it take?\n\nLike all things in Agile project management, you want to move quickly rather than dwell on early-stage planning. However, your roadmap is a literal map from your mission to your MVP and should take as long as it does to feel confident that you‚Äôve covered all the applicable goals.\n\nAgile planning is a skill on its own.\n\nStep 3: Create a release plan\n\nWhat is it?\n\nAgile project management isn‚Äôt is built around short-term sprints with the goal of regularly and consistently releasing usable software.\n\nAfter you have a high-level roadmap in place, the product owner then creates a high-level timetable for each release.\n\nBecause Agile projects will have multiple releases, you‚Äôll want to prioritize the features needed to get you to launch first. For example, if your project kicked off in November, you might set your MVP launch for early February, with a high-priority feature release the following May.\n\nThis all depends on the complexity of your project and the lengths of your ‚Äúsprints‚Äù‚Äîthe periods of work dedicated to each goal (which we‚Äôll get into next!). A typical release includes 3‚Äì5 of these sprints.\n\nWho should be there?\n\nA release plan is like rallying the troops. The product owner, project managers, Scrum Master, and all team members should be present.\n\nWhen does it happen?\n\nAt a minimum, your release plans should be created on the first day of any new release and reviewed at least every quarter.\n\nHow long should it take?\n\nBe realistic about how long a release will take, but don‚Äôt let that slow you down. A typical release planning session should take around 4‚Äì8 hours.\n\nStep 4: Sprint planning\n\nWhat is it?\n\nIt‚Äôs time to move from the macro to the micro view. Together with the product owner, the development team plans ‚Äúsprints‚Äù‚Äîshort cycles of development in which specific tasks and goals will be carried out.\n\nAt the beginning of a sprint cycle, you and your team will create a list of backlog items you think you can complete in that timeframe that will allow you to create functional software. Then, it‚Äôs as simple as using one of the Agile methodologies to work through them (which we‚Äôll cover more in-depth below).\n\nWho should be there?\n\nSprint planning in Agile is done by the product team but should include input and guidance from the product owner, project managers, and scrum master. However, ultimately it‚Äôs up to the team to decide what should (and can) get done in a sprint.\n\nWhen does it happen?\n\nSprint planning takes place at the start of each sprint cycle. For example, if you‚Äôre doing weekly sprints, you‚Äôll do a planning session every Monday (or whatever day of the week you choose to start on).\n\nHow long should it take?\n\nSprint planning sets the tone for the cycle. So while you don‚Äôt want to spend too much time at this stage, it could realistically take you 2‚Äì4 hours. But once you‚Äôve planned your sprint you‚Äôre quite literally off to the races.\n\nStep 5: Keep your team on track with daily standups\n\nAgile projects move quickly. And so it‚Äôs necessary that you have regular moments to check in and make sure there aren‚Äôt roadblocks getting in the way. These are called ‚Äústand-ups‚Äù in Agile-speak.\n\nA standup is a daily, 10‚Äì15-minute meeting where your team comes together to discuss three things:\n\nWhat did you complete yesterday?\n\nWhat are you working on today?\n\nAre there any roadblocks getting in the way?\n\nWhile this might seem like an annoyance to some of your team, these meetings are essential for fostering the kind of communication that drives Agile project management. Agile depends on reacting quickly to issues and voicing them in a public space is a powerful way to foster cross-team collaboration.\n\nStep 6: Sprint reviews\n\nWhat is it?\n\nEach sprint cycle ends with a functioning piece of software getting shipped. And while this is a huge milestone to celebrate, it‚Äôs also an opportunity to review what was done and show this off to people on your team and any key stakeholders. Think of it as Agile show-and-tell.\n\nSprint reviews should cover the more practical aspects of the sprint. Check your initial plan and make sure all requirements were met according to your definition of done.\n\nAs the product owner, it‚Äôs your choice to accept or refuse certain functionalities. If something went wrong, ask why? How can you adjust the next sprint so your team can hit their targets? Agile is all about continuous learning and iterations, and this means on your processes as well as your product.\n\nWho should be there?\n\nThe sprint review involves everyone who worked on and is impacted by the release. This means you should include your entire team as well as any key stakeholders.\n\nWhen does it happen?\n\nThe sprint review takes place at the end of each sprint.\n\nHow long should it take?\n\nJust say no to powerpoints and feature dissertations. The sprint review should only take an hour or two max.\n\nStep 7: Decide what to focus on next in your sprint retrospective\n\nWhat is it?\n\nOne of the core principles of Agile project management is that it‚Äôs sustainable. This means you should be ready to start on the next sprint as soon as the previous one ends.\n\nTo make sure you‚Äôre actually learning from each release (and not just moving forward blindly), you need to dig in with a sprint retrospective.\n\nAfter you show off the release, a retrospective is a moment to think back on the process of the previous sprint.\n\nDid everything go as planned? Was the workload manageable? Where could you improve your process or planning? Did you learn something during the sprint that changes your initial timeline or vision for the project?\n\nDon‚Äôt simply plan, but also take this time to discuss how the previous sprint went and how you could improve in your next one.\n\nWho should be there?\n\nThe retrospective is a natural extension of the review, and so while your stakeholders can leave, the rest of the team should be involved and giving their insights.\n\nWhen does it happen?\n\nIt makes the most sense for your sprint retrospective to happen right after your sprint review.\n\nHow long should it take?\n\nAgain, keep it short and sweet. An hour or two max is probably all you‚Äôll need to debrief and plan for the next brief.\n\nWhat happens after the sprint retrospective?\n\nBy the end of the sprint retrospective, your team should have a list of imporvements and changes you can implement in your next sprint. And then the sprint process starts over!\n\nBring your learnings into the next sprint planning session and keep shipping functional software.\n\nGetting started with an Agile workflow: How to pick the Agile methodology that‚Äôs right for your team\n\nAs we said earlier, Agile is more of a set of philosophies and principles rather than a perscriptive set of rules. As such, you can apply Agile principles in a number of different ways depending on how your team best works together.\n\nThese are called Agile methdologies. And while they‚Äôre pretty similar, they have their own unique practices, terminilogies, and tactics.\n\nLet‚Äôs take a look at the top 3 most popular Agile methodologies and break down how they‚Äôre different:\n\nAgile project management with Scrum\n\nScrum is probably the most well-known Agile methodology thanks to its simplicity, proven productivity, and ability to act as a catch-all framework for the various practices promoted by other Agile methodologies.\n\nLike other Agile methodologies, Scrum relies on a set of time-bound sprints. However, Scrum is a bit more perscriptive on how you structure your sprints. Each Scrum sprint features four ‚Äúceremonies‚Äù that help your team move forward.\n\nSprint planning: A team meeting to decide what to include in the current sprint. Once the team has decided on what to include in the sprint nothing else can be added except by the team.\n\nSprint demo: A sharing meeting where the team shows off what they‚Äôve shipped.\n\nDaily Standup: Regular 10‚Äì15 meetings to sync up and talk about progreess and roadblocks.\n\nRetrospective: A review of the results of the previous sprint to tweak your process.\n\nAlong with these ceremonies, teams will use a dedicated ‚ÄúScrum board‚Äù that mirrors the process. During the sprint planning meeting, the team will move any active issues to the board.\n\nAs they work through them, the issues will move through the workflow from To Do to In Progress, Code Review, and Done (or however your team chooses to organize their board). The Scrum board is a powerful tool for adding transparency to your project management process.\n\nKanban\n\nLike Scrum, Kanban is an Agile methodology built around continual delivery, while keeping things simple and not overburdening the development team. However, rather than use tightly time-bound sprints, Kanban teams organize around a limited number of ‚Äúwork in progress‚Äù tasks and can release at any time when they‚Äôre ready.\n\nThere are a few other core principles that help differentiate Kanban from Scrum:\n\n1. Visualize your workflow on a ‚Äòboard‚Äô\n\nWhile the Scrum board is a nice-to-have, Kanban relies on a visual board to keep all your Sprint‚Äôs tasks visibile and show progress. Kanban boards are also great tools for helping project managers manage resources and set priorities.\n\n2. Keep your work-in-progress (WIP) limited\n\nLike in Scrum where the backlog is defined before your sprint and nothing can be added (except by the team), Kanban sets a limit on the tasks that can be added to the WIP board. However, in most cases, Kanban teams don‚Äôt have a dedicated product backlog, but rather keep those tasks in a ‚Äúto do‚Äù column on their board.\n\n3. Release when ready\n\nKanban teams aren‚Äôt stuck to the rigid schedule of Scrum ceremonies and sprints. Instead, they can release whenever they work through enough WIP tasks. This adds extra flexibility, but also means you need to build in your own struture to not let releases take too long.\n\nExtreme Programming (XP)\n\nExtreme Programming (XP) isn‚Äôt extreme in the Mountain Dew sense, but it is a bit of a departure from the other methodologies we‚Äôve discussed.\n\nXP is a more disciplined approach to Agile project management that involves high customer involvement, rapid feedback loops, continuous testing and planning, and close teamwork to deliver working software quickly. To give you an idea, a typical XP Sprint lasts only 1‚Äì3 weeks.\n\nThe original XP ‚Äòrecipe‚Äô described by software engineer Kent Beck, was based around 4 values‚Äîsimplicity, communication, feedback, and courage‚Äîwith 12 supporting practices. It‚Äôs definitely more complex than other methodologies and looks something like this in practice:\n\nIn XP, there are tight feedback loops where the ‚Äúcustomer‚Äù works closely with the team to define and prioritize granular goals called ‚ÄúUser Stories‚Äù. The team then estimates, prioritizes, and plans the delivery of these stories, getting more feedback from the customer until it‚Äôs ready for release.\n\nHow to know if Agile project management is right for your team (and why it might not be)\n\nAgile is used by teams at pretty much every major software and product company in the world. But it‚Äôs important to remember that it‚Äôs not the only software development process out there.\n\nAgile might be a big departure from how your company or your teammates are used to working. It means moving quickly, which means not everything will be spelled out or planned beforehand. Therefore, you need to know whether or not your environment can handle this kind of change.\n\nShiny new object syndrome and Agile project management don‚Äôt mix.\n\nSo before you go all-in on Agile, there are 5 questions you need to honestly answer:\n\n1. Are you willing to start a project without knowing where you‚Äôll end up?\n\nYou know that saying ‚Äòfail fast?‚Äô It refers to Agile project management. With Agile, you‚Äôre moving quickly and continually testing with real users. Which can be stressful if you‚Äôre a control freak.\n\nBefore you adopt Agile, ask yourself how comfortable you are with putting out a less-than-finished version of your product for users to test? Do you feel good about launching an MVP (Minimum Viable Product) or do you think your project needs to be fully baked before it can see the light of day?\n\n2. How risk-averse are you?\n\nLike we said before, Agile is all about continuously deploying and learning from your mistakes. This means you‚Äôre potentially taking on a higher level of risk than you would if you went with a more traditional project management style.\n\nIs your culture a fly-by-the-seat-of-your-pants startup where risk is your middle name? Or are you standing on the precipice of failure and need to make sure everything goes perfectly?\n\n3. How flexible is your team?\n\nIn Agile project management, you work with your customers to make the product better. But this doesn‚Äôt always fly with designers, developers, and makers of all kinds with an ego (i.e. all of us). Ask yourself if your key players can put their ego aside and adjust their efforts and ideas based on customer needs.\n\n4. How strict is your company hierarchy?\n\nOne of the key principles of Agile is not only to work with your users but that developers will have access to key stakeholders on a daily basis. For some companies, this is a stretch. What is your culture like? Is there a hard set hierarchy in place or will those at the time gladly be a part of the development process?\n\n5. How do you measure progress? And success?\n\nShiny new object syndrome and Agile don‚Äôt mix. Agile project management is all about working to continuously refine your processes and better your product.\n\nIf you‚Äôre more likely to just run off after the next exciting idea and leave the last one to flounder, you‚Äôre not going to get the best results that Agile has to offer. Take a minute to look at how you define success as a company. Are you looking for the big win? Or can you see that small, steady steps get you closer to your end goal?\n\nThe final piece of the Agile project management puzzle\n\nCongratulations! You now should have a clear understanding of what Agile project management looks like and a few of the powerful ways you can use it on your own teams.\n\nHowever, there is one last piece of the puzzle. With all of this information, organization, and prioritization happening, you need a proper project management tool to keep your Agile project on course.\n\nThe best project management tools addresses three pain points common to the Agile project management process:\n\nReporting and metrics: Things like time tracking and projection, easy-to-understand progress reports for stakeholders, quality assurance, and a big picture look at progress\n\nCommunication: The ability to keep everyone on track with updates to local and distributed teams, shared task lists, feedback, and assignments\n\nProject assessment: Functionality around identifying and remedying obstacles or bottlenecks, evaluating performance, and making sure financials are under control"
    }
}