{
    "id": "dbpedia_1589_1",
    "rank": 70,
    "data": {
        "url": "https://www.visual-paradigm.com/scrum/what-is-agile-project-management/",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile Project Management?",
        "top_image": "https://www.visual-paradigm.com/favicon-32x32.png",
        "meta_img": "https://www.visual-paradigm.com/favicon-32x32.png",
        "images": [
            "https://cdn-images.visual-paradigm.com/home/15.0/vp_logo_header.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/12/agile-vs-waterfall.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/12/agile-vs-waterfall-quality.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/12/agile-umbrella-300x265.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/12/scrum-process-canvas.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/12/kanban-approach.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2019/09/nexus-scrum-framework.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2019/09/why-less-framework.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2019/09/safe-framework.png",
            "https://www.visual-paradigm.com/servlet/editor-content/scrum/what-is-agile-project-management/sites/7/2018/10/vplogo.png",
            "https://cdn-images.visual-paradigm.com/logos/vp-white-logo.png",
            "https://cdn-images.visual-paradigm.com/footer/x-logo.svg",
            "https://cdn-images.visual-paradigm.com/footer/yt_icon_mono_white1.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Free Agile guide that talks about what Agile Project Management is. It provides a detailed explanation on the various Agile Scrum frameworks such as Large-Scale AScrum, Nexus, SAFe, etc.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-32x32.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Today, people in all disciplines use Agile project management methods to build structure, accountability, and quality into team workflows. Agile Project Management (APM) is an iterative approach to managing software development projects that focuses on continuous releases and incorporating customer feedback with every iteration. The team can then respond to issues as they arise throughout the project and make a necessary change to a project at the right time. Thus, we can save resources and have a higher chance to deliver a successful project on time and within budget.\n\nWhy Agile Project Management?\n\nAgile is an umbrella term used for identifying various models used for agile development, such as Kanban, Scrum, XP, Lean Approach, etc. Breaking work into smaller chunks and working iteratively to improve products and services allows Agile teams to enhance their processes, isolate problems, and achieve specific objectives quickly by using time-boxed collaborative events, a prioritized product backlog, and frequent feedback cycles.\n\nAgile project management helps companies strike a balance between minimizing waste, cutting cost and preserving the quality of the product. Rather than the overwhelming upfront requirements across multiple teams, Agile teams can plan in short sprints with self-organizing teams, allowing them to more easily respond to new requirements or changes.\n\nAgile vs Waterfall – Scope, Time and Cost Triangle\n\nThe Waterfall Method’s greatest strengths are its fixed costs and predictability. You know the price, and when it is going to be delivered. Its most significant weakness is its inflexibility. The Agile Method is extremely flexible and could evolve into a significantly different product than was originally envisioned.\n\nThe traditional waterfall approach is built upon the basis of the triple constraints of time, cost and scope. Adjusting any of those variables forces a change in at least one of the others. Delivering a successful project is dependent on balancing these three competing variables. But as we know simply adding resources to a project doesn’t always bring about the desired goals. If resources are added late on a software project, it has an adverse effect.\n\nAgile Approach takes a different approach by turning the triple constraints upside down. Rather than viewing scope as fixed at the start, the agile approach sets the time (iterations) and cost (team members) as fixed; the scope is then adjusted to focus on the highest priorities. Agile is built with the expectation that scope will evolve. The goal is to deliver the client’s most important requirements within the budgeted cost and time. Agile allows for new requirements or re-prioritization as the project moves forward.\n\nThe Agile Approach Umbrella\n\nSince the birth of the Agile Manifesto in 2001, there has much buzz around being agile. The Agile approach is just a way of thinking that enables teams and organizations to innovate, quickly respond to changing demand, while mitigating risk. Organizations can be agile using many of the available frameworks available such as Scrum, Kanban, Lean, XP, etc…\n\nScrum Approach\n\nScrum is an agile way to manage a project, usually software development. Agile software development with Scrum is often perceived as a methodology; but rather than viewing Scrum as methodology, think of it as a framework for managing a process.\n\nKanban Approach\n\nKanban is Japanese for “visual signal” or “card.” Toyota line-workers used a Kanban to signal steps in their manufacturing process. As a part of Lean, the system’s highly visual nature allowed teams to communicate more easily on what work needed to be done and when. It also standardized cues and refined processes, which helped to reduce waste and maximize value. Similarly to a scrum sprint board, Kanban tracks ‘to do – Doing – done’ activities, but it limits them by the number of ‘work in progress’ activities (the number is defined by the team manager and cannot be exceeded).\n\nThere are four fundamental Kanban principles:\n\nVisualize work to increase communication and collaboration.\n\nLimit work in progress to avoid an endless chain of non-prioritized open tasks.\n\nMeasure and optimize the flow, collect metrics, predict future problems.\n\nAim for continuous improvement as the result of the analysis.\n\nLarge Scale Project Management\n\nScrum is the most common agile way that teams work leads to the question of, “How do we scale Scrum beyond a single team?” Scrum frameworks are not necessarily designed for large scale projects. Fortunately, alternative frameworks have been developed to scale Agile for projects in large scales, such as Large Scale Scrum (LeSS) Frame, Nexus Framework, SAFe Framework. Generally, the primary principle of these scaling agile frameworks is that team size does not increase, but rather, the number of teams increases and frameworks introduce some mechanism to coordinate among the multiple teams. In other words, the large-scaled agile frameworks often use the concept of a “scrum of scrums,” in which each team sends a representative to a scrum event of all teams at least twice per week to engage in higher-level meetings in terms of planning and review. The scrum of scrums can scale further as needed, becoming a scrum of scrum of scrums as the situation is desirable.\n\nNexus Framework\n\nKen Schwaber and Scrum.org developed Nexus, and it is just simply a framework that implements scrum at scale across multiple teams to deliver a single integrated product. Teams work in a common development environment and are focused on producing a combined increment every sprint with minimal dependencies.\n\nIt can be applied to 3-9 scrum teams. Each team consists of 3 to 9 developers. Therefore, it is not recommended to be scaled to more than 9 teams and thus, not more than eighty practitioners. Nexus is a framework that you build upon Scrum but doesn’t change that foundation of Scrum. The Nexus framework adds a new role, the Nexus Integration Team, and events: a Nexus Daily Scrum, a Nexus Sprint Planning, Nexus Sprint Backlog, and Nexus Sprint Retrospective and Refinement in the Nexus framework.\n\nNote That:\n\nProduct Owners? No, there are no Product Owners in each team. One project has only one Product Backlog and one Product Owner, to minimize complexity, and ensure that prioritization is done properly.\n\nEach team still needs a Scrum Master, and since this role is not necessarily full-time, one person can be the Scrum Master for more than one team. However, not more than one Scrum Master would be assigned to one team.\n\nMultiple teams should ensure that they can create a product increment with the combined skills of everyone on the team. If the team has cross-functional skills, it will be easier for the team to collaborate and create a potentially releasable product increment each Sprint.\n\nLeSS (Large-Scale Scrum) Framework\n\nLeSS is a framework for scaling agile development to multiple teams. LeSS comes from Craig Larman and Bas Vodde and is based on their work in the financial and telecommunication industries. The framework scales up with minimal additional process compared to single-team Scrum. i.e. use as little process as possible to get multiple Scrum teams to work well. Thus, LeSS is a good starting point when you already have Scrum in place and are just beginning to scale up with more teams, one at a time.\n\nFor Example:\n\nLeSS recommends that multiple teams have the same Product Owner and a shared Product Backlog.\n\nTheir sprints are synchronized to the Product-level Sprint leading to one integrated Potentially Shippable Product Increment.\n\nSprint Planning, Sprint Review, and Sprint Retrospective run at the same time for all teams.\n\nSAFe (Scaled Agile Framework)\n\nThe Scaled Agile Framework (abbreviated as SAFe), Created by Dean Leffingwell, is an interactive software framework that enables you to apply Lean-Agile and Scrum practices at large enterprises. SAFe is described as an interactive knowledge base for implementing agile practices at an enterprise scale and it provides a lot of guidance and covers a broad scope including financing and enterprise architecture. SAFe is constantly being improved, and its latest version is 4.5: Full Configuration consists of four levels:\n\nTeam: the fundamentals of Scrum are used at the Team layer. Cross-functional teams that work in sprints facilitated by a Scrum Master.\n\nProgram: the gathering of multiple Agile Teams (ART’s) to deliver a collection of several Product Increments (PI’s) in about five sprints.\n\nLarge Solution: we only speak of Large Solutions when a product needs to be developed by more than 150 people. This means that additional people are added to the teams to ensure quality.\n\nPortfolio: mainly relates to leaders within the organization. This mainly concerns employees who work with portfolio management and are responsible for the strategic plans and budgets. They are designated to determine the budgets per ART.\n\nThe cohesive integration of the Portfolio Management group within the Scaled Agile Framework brings the ability to understand, and manage, cost to market. SAFe enables Lean budgeting practices for organizations to fund products. The typical financing model of funding fragmented projects will be a thing of the past.\n\nConclusion\n\nEvery organization is different and there isn’t a “one size fits all” approach. When deciding what large-scale agile development model works best in a particular setting, analyze the needs and constraints of your specific case. So, no matter which scaled agile approach you want to go for, there needs to be an understanding of what you need:\n\nA simple and small-scaled agile teams option found in LeSS or Nexus\n\nA mid-sized company solution with light weighed management of LeSS\n\nAn enterprise-scale on Agile transformation may try SAFe or Less – Huge.\n\nThey seem to be similar but there are discrepancies among them that take the form of team size, training, and certification, methods and practices adopted, technical practices required and organizational type. We should choose the right one not just for now, but for the future as well."
    }
}