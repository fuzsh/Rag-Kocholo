{
    "id": "correct_foundationPlace_00075_2",
    "rank": 50,
    "data": {
        "url": "https://docs.bmc.com/docs/discovery/contentref/sybase-sql-anywhere-asa-997872682.html",
        "read_more_link": "",
        "language": "en",
        "title": "Documentation for BMC Discovery content reference",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.bmc.com/docs/s/en_GB/5983/f3e491afc761ac0a6981cfa3dcbc04fc7e88c149.36/_/images/logo/confluence-logo.png",
            "https://docs.bmc.com/docs/images/icons/linkext7.gif",
            "https://docs.bmc.com/docs/images/icons/linkext7.gif",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-community.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-linkedin.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-facebook.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-youtube.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-blogs.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-twitter.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-instagram.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/icon-search.svg",
            "https://www.bmc.com/content/dam/bmc/graphics/bmc-logo-light.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://docs.bmc.com/docs/discovery/contentref/sybase-sql-anywhere-asa-997872682.html",
        "text": "Product Description\n\nIn version 10, Adaptive Server Anywhere (ASA) was renamed SQL Anywhere.\n\nSQL Anywhere, is the industry-leading database management system (RDBMS)/relational database server component of SQL Anywhere Studio. SQL Anywhere is intended for use in mobile and embedded environments or as a server for small and medium-sized businesses (SMB). This powerful database server is optimized for use on SMB servers, laptops and handheld devices, and supports both single user and multi-user implementations.\n\nSQL Anywhere Studio, a product of iAnywhere, a Sybase company, is the name of the package that contains SQL Anywhere, the UltraLite RDBMS, MobiLink synchronization software, and other components. It is a comprehensive package that provides database management and enterprise database synchronization capabilities to enable the rapid development and deployment of database-powered applications.\n\nSQL Anywhere Studio also includes enhanced graphical development tools - including a query editor, integrated stored procedure debugger, profiler, and synchronization monitoring tool - to provide developers with faster, easier access to information. In addition, sophisticated event handling and scheduling capabilities enable DBAs to set up an SQL Anywhere server to execute a set of actions at predefined times or when certain events occur.\n\nSQL Anywhere Studio supports a wide range of operating systems, including Windows (32 or 64 bit), Mac OS X, Netware and a range of UNIX variants and Linux (32 or 64 bit).\n\nA Java-enabled SQL Anywhere database can use multiple SQL Anywhere JVM instances.\n\nCombining SQL Anywhere with the built-in synchronization architecture makes it attractive for mobile applications.\n\nCertain SQL Anywhere components, namely dbeng and rteng, are often embedded as OEM engines in the products of other companies. Sybase SQL Anywhere (ASA) has been embedded into the following applications:\n\nCisco IPM Common Services 2.2.0 - Includes SQL Anywhere v5.5.04 - The package name is CSCOcwbS.\n\nDataFabric Manager\n\nPropertyBoss 2006 - SQL Anywhere 8 is installed as part of this application; however, the installation directory used is the normal Sybase SQL Anywhere one.\n\nSerena ChangeMan Mover\n\nSiebel Sales Enterprise\n\nSymantec Ghost\n\nVeritas Storage Foundation Management Server - The package name is VRTSdbms3 (Symantec Shared DBMS).\n\nMultiple Installations\n\nYou can run multiple versions of SQL Anywhere on the same machine. Each major version has a distinct default installation directory, and relevant libraries have distinct naming conventions. One exception to this is the command-line utilities (dbinit, dbvalid, dbunload, etc.). They retain the same name from version to version, and if you run them in a batch file or from a command prompt, the first version encountered on the path is executed. If you have multiple versions of SQL Anywhere on your machine, you must pay attention to your system path when using utilities. Since setup adds the most recently installed version executable directory to the end of your system path, it's possible to install a new version of the software, and still inadvertently be running the previously installed version. For example, if an SQL Anywhere (i.e. Adaptive Server Anywhere) version 7 executable directory is ahead of the version 8 executable directory in your path and you use the dbinit command, you will use the version 7 utility, and consequently create a version 7 database.\n\nKnown Versions\n\n3\n\n4.0\n\n5.0\n\n5.5\n\n6.0\n\n7.0\n\n8.0\n\n9.0\n\n10.0\n\n11.0\n\n12.0\n\n16.0\n\nSoftware Pattern Summary\n\nPlatforms Supported by the Pattern\n\nThe pattern identifies instances of Sybase SQL Anywhere running on Windows, Linux and Unix platforms.\n\nIdentification\n\nSoftware Instance Triggers\n\nSimple Identification Mappings\n\nThe following components/processes are identified using the combination of pattern definitions and simple identity mappings which map other known (but deemed less important in terms of application modeling) processes.\n\nVersioning\n\nVersion information for the product is currently collected using one of 3 possible methods.\n\nThe methods are tried in an order of precedence based on the likely success and/or accuracy of the information that can be gathered. Once a result is obtained, the methods lower in precedence are not attempted. In order of precedence the methods are:\n\nActive Command\n\nLinux and Unix only.\n\nThe \"Active Version Command\" function uses a combination of a static version command, a dynamic argument from the matched command line followed by additional static options, the command is run once the dbsrv# process has been matched and only if the supplied command matches the following regular expression:\n\n^ /[^ ]*/dbsrv\\d+$\n\nThe version command approach results in a 'strings' command being run on the 'dbsrv#'. Version is then extracted when the output is parsed using the 'grep' command.\n\nstrings <cmd> | grep \"IDENT\" | head -n 1\n\nwhere <cmd> is the command line.\n\ni.e. strings .../dbsrv9 | grep \"IDENT\" | head -n 1\n\nAny output is then applied against a further regular expression:\n\nIDENT=dbsrv\\d+/(?P<version>\\d+(\\.\\d+)*)\n\nto extract the version.\n\nThe version command approach requires the path to the 'dbsrv#' binary to be present in the command line obtained from the process list, or 'dbsrv#' binary to be within the $PATH of the user account Foundation uses to login. In addition to this, the 'strings' command is required to be within the $PATH of the user account Foundation uses to log in - this is very likely to be the case.\n\nThe advantage of this method of versioning is that providing the above requirement is fulfilled, this method is accurate and safe as the 'strings' command is read-only and does not affect either the application or the Operating System environment.\n\nPath Versioning\n\nAll Platforms\n\nPath Versioning is only attempted if Active Command fails to return a version.\n\nThe Path Regex functionality allows a regular expression to be applied against the process command line to derive a version number from the command path or arguments.\n\nPath versioning is performed on Unix/Linux and Windows by comparing the command line and arguments against each of the following regular expressions in the order shown:\n\n(?i)Anywhere\\s*(\\d+(?:\\.\\d)?)\n\n(?i)dbsrv(\\d+)\n\nVersioning is achieved in this case normally to depth x but occasionally to depth x.x.\n\nExamples of paths that would be matched and versions extracted are:\n\nE:\\Program Files\\Sybase\\Adaptive Server Anywhere 6.0\\win32\\dbsrv6.exe- 6.0\n\ndbsrv10.exe -n TestEng -su 9Bx231K - 10\n\nPackage Versioning\n\nWindows only\n\nPackage Versioning is only attempted if Active Command fails to return a version.\n\nVersioning by reading package information is a method used only on the Windows platform. Foundation executes a search for the installed packages and tries to match them against the following regular expression:\n\n^SQL Anywhere\n\nWhen it finds a match, it extracts the version for Sybase SQL Anywhere from the package information.\n\nVersioning is achieved in this case to either depth x.x.x or x.x.x.x\n\nAlternative Versioning Approach\n\ndbeng# -v or dbsrv# -v\n\nWhen you type dbeng# -v or dbsrv# -v at a Windows command prompt, where N is your major version, the version of the server is returned.\n\nThe requirement for this approach would be that the full path to the binary is obtained by Foundation.\n\nOn Unix, this method may also fail in cases where an evaluation version of the product is installed as the execution of the evaluation version binary leads to a '(Y/N)' prompt which needs to be answered prior to the information being provided.\n\nWe are however unable to use this versioning method on the Windows platform as a popup window is displayed and the version number is written inside that. In addition, if the path contains a space character (which it does by default), the path would need to be quoted.\n\ndbtsinfo\n\nSQL Anywhere features a tool called dbtsinfo; when you type dbtsinfo -i at a command prompt, you are provided with client-side information, including relevant environment variables, the location of the SQL Anywhere installation, the version of each executable file, and any path inconsistencies, such as a dbinfo.exe that is in your path ahead of the installed one. The dbtsinfo tool allows you to make sure that the version of the installed software is what you expect:\n\nWe are not able to use this versioning method on Windows due to the path possibly needing to be placed within quotes due to space characters.\n\nIt is possible that this approach will become viable with the introduction of Foundation 7.x architecture.\n\ndblic\n\nThe dblic <database_server> command returns information about the license for a particular database server; e.g.:\n\ndblic dbsrv10.exe\n\nWe are not able to use this versioning method on Windows due to the path possibly needing to be placed within quotes due to space characters and the fact that the database server name needs to be known.\n\nFuture Considerations\n\nApplication Model Produced by Software Pattern\n\nProduct Architecture\n\nSoftware Pattern Model\n\nThe NetworkServer pattern has the Sybase SQL Anywhere (ASA) Network Database Server (dbsrv#, dbsrv#.exe) process as its trigger process.\n\nOnce the pattern has been fired by matching on its trigger process, the pattern can be stopped if the trigger process' command line further matches on one of the following regular expressions, representing excluded processes:\n\n\\b(?:VRTSdbms|NTAPdfm)/.*?/dbsrv\\d+$\n\n(?i)\\b(?:DataFabric|FabricManager|ProactiveNet)\\\\.*?\\\\dbsrv\\d+\\.exe$\n\n(?i)\\b(?:ChangeMan|CSCOpx|Netscout|Siemens).*?\\\\dbsrv\\d+\\.exe$\n\nSI Depth\n\nThe pattern tries to extract the name of the database server by applying the following regular expression to the command line's arguments:\n\n-n\\s*(\\S+)\n\nThe first '-n' command-line argument is matched (out of possible two) which, based on our information from Sybase (via JPMCby a customer SME DB SME David Futter), provides us with database server instance name.\n\nAn example of path that would be matched and instancing information extracted is:\n\nC:\\Program Files\\Sybase\\SQL Anywhere 9\\win32\\dbsrv9.exe -n mydbserv - mydbserv\n\nIf we are unable to ascertain the name of the database server, an instance-based Software Instance is created with a key consisting of cmd and full version.\n\nIf we are able to ascertain the name of the database server, an instance-based Software Instance is created with a key consisting of name, type (Sybase SQL Anywhere Network Server) and host key.\n\nNOTE: Sybase has advised us that any Network Server process running without a '-n' argument will attach itself to another existing database server on the same host.\n\nDifferences to 6.x Approach\n\nThe dbsrv# SE Matcher performed path versioning differently for versions of SQL Anywhere less than v6. Given a path such as:\n\nC:\\sqlany50\\win32\\dbsrv50.exe\n\nthe version would have been returned as \"5.0\" rather than \"50\".\n\nSubject Matter Expertise\n\nA suggestion to use 'dbserv# -v' as an active versioning approach on the Unix/Linux platform has been suggested by Sybase SMEs, but having considered it, we believe that the currently active version approach is likely to be just as successful in obtaining the version information. Executing the binary for the database server process may require setting up the environment first which isn't required in the case of the use of the 'strings' command.\n\nAnother suggestion was to use the 'dbinfo' command. However, the same reasoning applies to the use of this command vs the 'strings' method currently used. Furthermore, 'dbinfo' requires environment path information and will return the version of SQL Anywhere in its path, not necessarily the version of the process running.\n\nTesting\n\nTesting to ensure the processes related to Sybase SQL Anywhere have been correctly identified has been performed using Foundation record data from hosts running Linux and Windows operating systems.\n\nSome of the record data from Linux and Windows hosts also contained enough information to extract the version information using the Path Versioning approach.\n\nTo test the Version Command approach to obtain the product version of Sybase SQL Anywhere (ASA) Network Server, a copy was installed locally on Linux hosts and successfully scanned.\n\nInformation Sources\n\nOpen Issues\n\nCreated by: Rebecca 14:16, 21 November 2007 (GMT)\n\nReviewed by:"
    }
}