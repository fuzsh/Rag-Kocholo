{
    "id": "correct_foundationPlace_00075_3",
    "rank": 78,
    "data": {
        "url": "https://stackoverflow.com/questions/462923/java-embedded-databases-comparison",
        "read_more_link": "",
        "language": "en",
        "title": "Java Embedded Databases Comparison",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://cdn.sstatic.net/Img/teams/overflowai.svg?v=d706fa76cdae",
            "https://www.gravatar.com/avatar/c519f048d0e98dd15c68762d6b54da3d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/62af4c828e18a91dc60832fb1465f0cf?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/56dae0385d8c38c718a6311147f01afe?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/83397d0973788189bc7a8f5a9a88e56a?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/9PDVu.jpg?s=64",
            "https://www.gravatar.com/avatar/a6888b21a2a8231cfaf9c6b8a78a775a?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/BchTr.jpg?s=64",
            "https://www.gravatar.com/avatar/507c65170b1d6d484cf28f1a4db5ecb6?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d5f30c2d40341d55ba235d674d24972e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3f9f1c5628ed19b0e70fd4e8b8a1d0b9?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/gwfL6.jpg?s=64",
            "https://www.gravatar.com/avatar/f39e9d15c74b40c7c4110b9beb47dd92?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/80e9a646079bfd5eb603520c0ec43f64?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d5c948086776fc91b4c7abff56bb7672?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/286c11b16ad53d9877996ca5d769aaea?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c53d539b59c19087182f0b1c53bb52de?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0035fb8f093a36ccfd8908b42e0eac0e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a648ccb47bbbe9497c073315aac4d33e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a63a402c022abba109718bb97714dd8d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/528394f867632bcca8497088cd71a6d4?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/462923/ivc/2739?prg=0e61ca85-eb0d-4c11-a782-df67207d5e31",
            "https://stackoverflow.com/js-false.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Chris Mureen Chris Mureen"
        ],
        "publish_date": "2009-01-20T20:17:09",
        "summary": "",
        "meta_description": "I intend to develop a small (Java) application for managing my finances. I believe I need to use an embedded database, but I have no experience regarding this issue. I tried to look at some of the",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/462923/java-embedded-databases-comparison",
        "text": "Either\n\nHSQLDB - Used by OpenOffice, tested and stable. It's easy to use. If you want to edit your db-data, you can just open the file and edit the insert statements.\n\nor\n\nH2 - Said to be faster (by the developer, who originally designed hsqldb, too)\n\nWhich one you use is up to you, depending how much performance and how much stability you need.\n\nThe developer of H2 has put up a nice performance evaluation:\n\nhttp://www.h2database.com/html/performance.html\n\nI use Apache Derby for pretty much all of my embedded database needs. You can also use Sun's Java DB that is based on Derby but the latest version of Derby is much newer. It supports a lot of options that commercial, native databases support but is much smaller and easier to embed. I've had some database tables with more than a million records with no issues.\n\nI used to use HSQLDB and Hypersonic about 3 years ago. It has some major performance issues at the time and I switch to Derby from it because of those issues. Derby has been solid even when it was in incubator at Apache.\n\nI needed to use Java embedded database in one of my projects and I did lot of research understanding pros and cons of each database. I wrote a blog listing pros and cons of popular embedded java databases (H2, HSQLDB, Derby, ObjectDB, Neo4j, OrientDB), you can have a look at it. I chose H2 as I thought it best suited my requirements. Link for the blog: http://sayrohan.blogspot.in/2012/12/choosing-light-weight-java-database.html Hope it helps!\n\nHSQLDB is a good candidate (the fact that it is used in OpenOffice may convinced some of you), but for such a small personnal application, why not using an object database (instead of a classic relationnal database) ?\n\nI used DB4O in one of my projects, and I'm very satisfied with it. Being object-oriented, you don't need the whole Hibernate layer, and can directly insert/update/delete/query objects ! Moreover, you don't need to worry about the schema, you directly work with the objects and DB4O does the rest !\n\nI agree that it may take some time to get used to this new type of database, but check the DB40 tutorial to see how easy it makes working with the DB !\n\nEDIT: As said in the comments, DB4O handles automatically the newer versions of the classes. Moreover, a tool for browsing and updating the database outside of the application is available here : http://code.google.com/p/db4o-om/\n\nJava DB (Sun's distribution of Apache Derby) now ships in JDK 6!\n\nI've been wanted to do something like Jason Cohen and have been thinking this looks like the easiest way being in the JDK distro (which of last week is now a requirement for my app). Or maybe I am just lazy that way.\n\nWe use HSQLDB in production as a \"no-configuration\" option for our application. It allows people to trial without the hassle of setting up a real database.\n\nHowever we do not support it for normal use. The reasons are several:\n\nSlows down proportionally to the size of the data.\n\nDifficult to access outside of our app (e.g. for custom reports).\n\nTransactions / disk-sync is difficult to get right, so it's easy to lose data.\n\nFor at least (2) and (3), there are ways around it but it's difficult; it's much easier to e.g. install MySQL.\n\nHSQLDB may cause problems for large applications, its not quite that stable.\n\nThe best I've heard (not first hand experience however) is berkleyDB. But unless you opensource it, it will cost you an arm and a leg to use due to licensing...see this http://www.oracle.com/technology/software/products/berkeley-db/htdocs/licensing.html for details.\n\nps. berkleyDB is not a relational database in case you didnt know.\n\nMost things have been said already, but I can just add that I've used HSQL, Derby and Berkely DB in a few of my pet projects and they all worked just fine. So I don't think it really matters much to be honest. One thing worth mentioning is that HSQL saves itself as a text file with SQL statements which is quite good. Makes it really easy for when you are developing to do tests and setup data quickly. Can also do quick edits if needed. Guess you could easily transfer all that to any database if you ever need to change as well :)\n\nWhat criteria will you use to evaluate these ? If you don't know yet, then you don't need to decide right now. Try to make your application as database-implementation-agnostic as you can - providing the appropriate wrappers, data access objects etc., and make this decision when you have all the facts to hand and you have to decide.\n\nIf you're using relational databases and SQL then the above shouldn't be too hard (using JDBC etc). Make sure you have plenty of surrounding tests so that when you want to switch between databases, you can determine that your application's functionality remains the same.\n\nI ran into the same issue some time ago. I didn't know which database to go for, so my first solution used Derby (or HSQLDB?), and I was later able to switch to HSQLDB (or Derby ? Can't remember which solution worked) once I'd determined where I had issues (relating to performance) and which solution would really work for me.\n\nI personally favor HSQLDB, but mostly because it was the first I tried.\n\nH2 is said to be faster and provides a nicer GUI frontend (which is generic and works with any JDBC driver, by the way).\n\nAt least HSQLDB, H2 and Derby provide server modes which is great for development, because you can access the DB with your application and some tool at the same time (which embedded mode usually doesn't allow).\n\nI guess I'm a little late (a lot late;-)) to this post, but I'd like to add Perst, an open source, object-oriented embedded database for Java &.NET. for your consideration. Perst is an open source / dual license embedded database for Java. The distribution is compatible with Google's Android platform, and also includes Perst Lite for Java ME. We've even built an Android benchmark and produced a whitepaper on the subject...you can take a look here: http://www.mcobject.com/index.cfm?fuseaction=download&pageid=581&sectionid=133\n\nAll the best, Chris"
    }
}