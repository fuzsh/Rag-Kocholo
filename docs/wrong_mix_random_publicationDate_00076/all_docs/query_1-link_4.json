{
    "id": "wrong_mix_random_publicationDate_00076_1",
    "rank": 4,
    "data": {
        "url": "https://patents.google.com/patent/US9397983B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US9397983B2 - Private data sharing system - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/9f/5c/fe/8e5c3a5ddc2dec/US09397983-20160719-D00000.png",
            "https://patentimages.storage.googleapis.com/9b/28/2c/0ed0f40550fbb9/US09397983-20160719-D00001.png",
            "https://patentimages.storage.googleapis.com/9d/bf/ea/4e16807636085c/US09397983-20160719-D00002.png",
            "https://patentimages.storage.googleapis.com/55/bf/f6/6855aaec73f53a/US09397983-20160719-D00003.png",
            "https://patentimages.storage.googleapis.com/b7/cd/10/ca2ba76fa3e268/US09397983-20160719-D00004.png",
            "https://patentimages.storage.googleapis.com/0e/1e/4b/4a8fefb87895bd/US09397983-20160719-D00005.png",
            "https://patentimages.storage.googleapis.com/94/2b/70/0e8b36a45c12d9/US09397983-20160719-D00006.png",
            "https://patentimages.storage.googleapis.com/22/a1/5e/2030cbb52e4dd8/US09397983-20160719-D00007.png",
            "https://patentimages.storage.googleapis.com/8c/29/e9/4cdaf4002b5db2/US09397983-20160719-D00008.png",
            "https://patentimages.storage.googleapis.com/af/66/8f/88a6a0f6713f65/US09397983-20160719-D00009.png",
            "https://patentimages.storage.googleapis.com/d4/67/be/7216af67ec440d/US09397983-20160719-D00010.png",
            "https://patentimages.storage.googleapis.com/63/fa/05/a12e4d3e436e10/US09397983-20160719-D00011.png",
            "https://patentimages.storage.googleapis.com/08/84/5d/84af3e957aa5e9/US09397983-20160719-D00012.png",
            "https://patentimages.storage.googleapis.com/6e/f5/8d/8f1ad3ee0f0892/US09397983-20160719-D00013.png",
            "https://patentimages.storage.googleapis.com/df/ba/db/b61de5b3505efc/US09397983-20160719-D00014.png",
            "https://patentimages.storage.googleapis.com/23/31/db/c312b4123c5bc8/US09397983-20160719-D00015.png",
            "https://patentimages.storage.googleapis.com/68/79/fa/e11bf25da0e1c2/US09397983-20160719-D00016.png",
            "https://patentimages.storage.googleapis.com/d9/d6/e9/8b19461e063a29/US09397983-20160719-D00017.png",
            "https://patentimages.storage.googleapis.com/c7/7d/72/08623ffd5d5522/US09397983-20160719-D00018.png",
            "https://patentimages.storage.googleapis.com/67/96/7a/4068241ce62753/US09397983-20160719-D00019.png",
            "https://patentimages.storage.googleapis.com/52/ae/8d/d69e8bb61919c8/US09397983-20160719-D00020.png",
            "https://patentimages.storage.googleapis.com/4c/bd/8c/0a41591568a241/US09397983-20160719-D00021.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-10-08T00:00:00",
        "summary": "",
        "meta_description": "A novel architecture for a data sharing system (DSS) is disclosed and seeks to ensure the privacy and security of users' personal information. In this type of network, a user's personally identifiable information is stored and transmitted in an encrypted form, with few exceptions. The only key with which that encrypted data can be decrypted, and thus viewed, remains in the sole possession of the user and the user's friends/contacts within the system. This arrangement ensures that a user's personally identifiable information cannot be examined by anyone other than the user or his friends/contacts. This arrangement also makes it more difficult for the web site or service hosting the DSS to exploit its users' personally identifiable information. Such a system facilitates the encryption, storage, exchange and decryption of personal, confidential and/or proprietary data.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US9397983B2/en",
        "text": "CROSS-REFERENCE TO RELATED APPLICATIONS\n\nThis application is a continuation of application Ser. No. 13/878,345, filed Apr. 24, 2013, and which is a National Stage Entry of International Application PCT/US11/55829. PCT/US11/55829 claims the benefit of U.S. Provisional Application Ser. No. 61/404,794, filed Oct. 8, 2010, and whose entire contents are hereby incorporated by reference; and claims the benefit of International Application No. PCT/US11/55417, filed Oct. 7, 2011, and whose entire contents are hereby incorporated by reference; and claims the benefit of U.S. application Ser. No. 13/270,118, filed Oct. 10, 2011, and whose entire contents are hereby incorporated by reference. U.S. application Ser. No. 13/270,118 claims the benefit of International Application No. PCT/US11/55417 and U.S. Provisional Application Ser. No. 61/404,794. International Application No. PCT/US11/55417 claims the benefit of U.S. Provisional Application Ser. No. 61/404,794.\n\nBACKGROUND\n\nA person's âsocial networkâ can be defined as a set of inter-personal relationships that characterize a person's life. A person's social network can also be defined as that person's set of primary, habitual, long-term communication partners. A person's âfullâ social network can be composed of many, possibly overlapping, smaller social networks, where many, if not all, of the smaller social networks are defined by a shared experience (e.g. attendance at a specific school), familial relationship (e.g. brothers), interest (e.g. fast cars), belief (e.g. a particular religion), genealogy (e.g. family members), goal (e.g. losing weight), location (e.g. a particular neighborhood) and so forth.\n\nA âvirtualâ social network can be defined as one aspect of the manifestation of a full social network, in which interpersonal communication is achieved by âimpersonalâ means, rather than through face-to-face exchanges of information.\n\nAn online social network can be defined as a virtual social network, or a part thereof, in which information is exchanged by members of that social network through the electronic transmission, and/or exchange, of digital data across the Internet, or across an equivalent or similar electronic and/or electromagnetic medium.\n\nSome social networks are intended to promote non-specific social interactions, e.g. Facebook (which is a general online social network) and MySpace (which is also a general online social network). Others are intended to facilitate specialized types of interactions. For instance, some social networks are intended to help business people promote themselves, their services and/or their businesses. An example thereof is LinkedIn, which is an online social network dedicated to promoting âbusiness and professional networkingâ Some social networks promote the interaction, and mutual support, of people who have all shared, or are all sharing, a common type of hardship. An example thereof is CaringBridge, which is a charitable nonprofit organization offering free personalized websites to people facing a serious medical condition or hospitalization, undergoing medical treatment and/or recovering from a significant accident, illness, injury or procedure. Its functionality is similar to a blog. And, some are designed to coordinate and support the efforts, and share the work, of people who share a common passion. Examples thereof are Care2 (âgreen living and social activismâ) and Flickr (dedicated to sharing photos). Some social networks promote other types of topic-specific or domain-specific social interactions.\n\nMany times, social networks that are created and marketed with a specific stated intent, such as to provide an online community for racing car enthusiasts, are utilized by their members for a different purpose, such as to exchange tips for raising vegetables in an arid environment. Despite their stated purposes, the unifying themes of social networks created online, within particular web sites, are typically determined solely by the users communicating within those social networks.\n\nNew social networks, and social networks intended to address novel needs, arise with great frequency. One of the greatest hindrances to the greater adoption and utility of social networks is the lack of adequate security and privacy, both perceived and real. There is a long-felt need for secure social networks in which only users, and the âfriendsâ that those users specify, are able to gain access to the users' personal and/or private data. By limiting access to a user's PID (âpersonally identifiable data or informationâ) to the user who created it, and to the friends of that user, both the real and the perceived privacy and security of that potentially sensitive information are increased.\n\nOnline social networks (OSN's) represent one specialized version of more general data sharing (systems or) networks (DSS's). Many organizations require the ability to share data among and between their members. For instance, many businesses must archive and share digital information among their employees, for instance, data regarding past and current clients, company policies and resources, documentation of procedures and methods, etc. Many governmental organizations must archive and share digital information among their staff, for instance, memos, analyses, projections, policies and directives. Many law enforcement agencies must archive and share digital information related to criminal investigations, suspects, tips, etc. Even some large health care organizations must archive and share digital information among doctors and staff related to patients, the results of medical tests and procedures, insurance claims and policies, etc.\n\nAnd, as with the users of OSN's, the organizations and people who use these more general DSS's tend to be concerned about the vulnerability of their data, and the criminal and civil repercussions which could follow any penetration of their DSS's by hackers. Again, there is a long-felt need among many businesses and organizations for a DSS which can better protect the security and privacy of their data.\n\nAny other user within a DSS with which any other particular user agrees to communicate and share data will be referred to herein as a âcontactâ or âfriendâ of that user. And the set of users with which any particular user of a DSS agrees to share personal information will be referred to as the âcontactsâ or âfriendsâ of that user.\n\nDSS's are varied in their central themes, objectives and user interface designs. However, most DSS's share certain server functionalities. Most DSS's today provide users with many or all of the following:\n\n(1) The ability to create and share a âprofileâ about one's self to help to identify, and to differentiate, one's self from other members of the DSS (especially true with respect to OSN's). These profiles typically aid in the discovery of other members of an OSN which any particular user may wish to add as a friend.\n\n(2) The ability to post and share comments about one's self and/or about one's friends.\n\n(3) The visual and/or organizational discrimination of media by type. For instance, in an OSN, there is often a section, that is, a partition of each user's data within that DSS, dedicated to the storing of photos, the creation of albums of photos, the generation, storage and display of comments regarding individual photos, etc. In a DSS, there are often sections related to categorical subjects such as documents of various types (e.g. policies, letters, memos, reports, etc.), particular people (e.g. clients, patients, criminals, victims, etc.), particular places, etc.\n\n(4) The ability to upload and share media, such as photos and videos.\n\n(5) The ability to access, view and comment on media posted by one's self and one's friends.\n\n(6) The automated generation and receipt of notifications regarding the activities of one's self and one's friends.\n\n(7) The ability to exchange private messages with one's friends.\n\n(8) The chronological ordering and/or automated expiration of user created and/or uploaded media. Social, as well as professional, interactions are typically facilitated by prioritizing the presentation to users of the most recent, or most recently edited or amended media. Also, many types of social media, such as comments and automated notifications tend to lose their relevance to users within a social context as time passes. So, the automated hiding or deletion of such âoldâ media tends to increase the satisfaction of users of a DSS.\n\n(9) Usually in a seamless and transparent manner, tools are needed to create, view, edit, upload, transmit and so forth the relevant types of media (such as text, email, audio, photos and videos) which are typically stored and/or exchanged within a DSS. This also often includes the provision of the means for engaging in real-time communications, e.g. text and/or video chat.\n\nMany companies offer social networks or the software with which people may implement their own social networks. For instance, currently popular social networks include: Facebook, MySpace, Google+, LinkedIn and others. There are also companies, open source projects and other sources, which endeavor to provide the tools for individuals, and/or groups, to establish their own social networks. Often these tools result in the creation of âdistributed,â and/or âpeer-to-peer,â social networks, in which centralized servers are replaced with loose networks of geographically-distant cooperating servers. These companies/projects include: Elgg (which is an open source social networking software that provides individuals and organizations with the components needed to create an online social environment); Appleseed (which is the first open source, fully decentralized social networking software); and OneSocialWeb (whose project aims to define a language to bridge these networks and make it easy for social networks to join a bigger social web).\n\nThere are companies which offer special-purpose online repositories of user data. The data stored within these online repositories is often encrypted with a company-supplied encryption key. These encrypted online repositories of user data, and an associated program running on a user's local computing device, are often used to automatically âback upâ the contents of the user's hard drive(s) so that the data stored on such hard drive(s) can be restored should the hard drive(s) become non-functional, or be lost or stolen. These online repositories of encrypted user data are typically not shared and so are unable to facilitate social interactions between people. For these and other reasons, these online repositories of encrypted data do not provide the functionality which characterizes most social networks.\n\nCompanies, such as Dropbox, offer other types of online repositories which are intended to be shared between two or more users. These âcommunalâ online repositories serve as shared data storage locations which may be associated with virtual folders, or directories, on the local computing device(s) of each associated user. The shared user data is typically stored on the local computing device(s) of each of the sharing users, as well as on one or more centralized data storage devices belonging to the company providing the service. The âmirroredâ data, distributed among the user data stores, and the centralized data store(s), is typically kept synchronized, so that a change in any one user's data store can quickly be implemented in the data stores of each of the other users, as well as on the centralized data store(s).\n\nThe data stored on the computing devices of users is typically not encrypted (unless the user encrypts it). However, the data stored on the centralized storage device(s), and the data transmitted across the Internet, is often encrypted. The data storage company typically provides the encryption key used to achieve the encryption, and this intermediate state of encryption is typically hidden from the user. In fact, the user is usually unaware of the encryption method and the value of the encryption key used.\n\nThe computers, servers and/or programs of the centralized shared data storage web sites are often in possession of the encryption key(s) used to encrypt the user data, and are often able at any time to decrypt and examine that data. In fact, these sites regularly compare the unencrypted data in their stores, with the data stored on the users' computing, and/or storage devices, in order to detect any differences that need to be shared with the other users who have access to that data.\n\nUsers of these communal online repositories are able to share files of data, which can include photos, movies, audio files, text documents and so forth. And, users who elect to share one of these communal online repositories are often notified of any changes to the contents of the shared repositories, or to the contents of the individual files stored within those repositories. However, this is typically the extent of the âsocialâ functionality provided by these companies, and this functionality is typically only provided to the extent that it facilitates the sharing of digital computer files among and between their users.\n\nTechnology able to facilitate the sharing of information across long distances has become more and more sophisticated over time. One can argue that the first âdata sharing systemsâ were post offices which primarily delivered packets of hand-written information to the addresses specified on the envelopes. Later came the telegraph, allowing textual information to be quickly delivered to a specified recipient. And, later still, came the telephone which made possible the dynamic, and instantaneous, sharing of verbal information, and later digital information via modem. One might argue that the Internet represents the culmination of these earlier efforts in that it makes possible the near instantaneous sharing of a wide variety of data types on a global scale.\n\nIn modern terms, DSS's can generally be described as systematic means for the rapid exchange of digitally-encoded electronic data between, and within, a group of electronic computing devices. In such a DSS, some computing devices tend to be dedicated to the task of relaying digital data from one computing device to another. These types of computing devices are called âservers.â Other computing devices are typically used by individuals who wish to use the DSS to share data with other users of the DSS. The computing devices operated by these communicating users tend to be dedicated to the creation and transmission of data packets (DP) to be shared with other users, as well as to the receipt and presentation of DP shared by other users. These types of computing devices are called âclients.â And, in certain specialized DSS configurations (e.g. in âpeer-to-peerâ networks) computing devices may serve as both clients and servers.\n\nOne popular, and relatively new, type of DSS is the âonline social networkâ (OSN), such as those discussed above. In an OSN, disparate groups of people who desire to communicate with one another are, by means of specialized programs and/or hardware, able to use their computing devices to share their own text, photos, videos, sound files, etc. with other users within the respective OSN-specific groups of people to which they belong (i.e. with their âfriendsâ). They are also thereby able to receive and experience similar types of data generated and shared by their friends. âFacebook,â âGoogle+â and âLinkedInâ are popular and well-known OSN's.\n\nSUMMARY\n\nShared online data archives typically do not provide at least some of the server functionalities which are characteristic of the operation and utilization of OSN's and DSS's. These missing functionalities typically include: (1) The tools to directly create, edit, view, and otherwise manipulate, the files being stored. (While shared online archives often provide notification of newly uploaded and updated files, they do not directly provide the user with the tools required to display or edit the associated content.) (2) The direct exchange of messages between users within the shared online archives, e.g. chat and/or email. (3) The generation, distribution and display of comments, separate from, and not necessarily related to, any particular file(s) in these shared repositories. (4) The visual and/or organizational discrimination of data by data type, e.g. the segregation of photos and/or other image files, the segregation of videos, etc. (5) The automated hiding or deletion of âoldâ media (in fact, this type of social functionality would be completely inappropriate within the context of a shared online archive, wherein files should only be deleted by the users themselves).\n\nA âprivateâ DSS is disclosed herein that allows users and their specified contacts to have sole access to the data which those users create, modify and/or upload. The exclusive and proprietary access of a user, and that user's designated contacts and/or friends, to the user's data within the context of a data presentation and/or editing system is a novel aspect of the present disclosure.\n\nAnother novel aspect of the present disclosure is the specification of a DSS in which each user's data is obfuscated in a unique manner, and each user's obfuscated data can be shared with that user's contacts and/or friends in a secure and convenient manner because each user's contacts and/or friends are provided, a priori, with the unique means required to de-obfuscate that user's data. Convenience is achieved by means of a client program which stores the set of de-obfuscation means required by a user to de-obfuscate the obfuscated data which may be generated and shared by each of the user's contacts and/or friends. Convenience may be further increased through the use of an automated means of exchanging such user-specific means of data de-obfuscation between contacts.\n\nSome other DSS's herein can encrypt user data before that data is transmitted through the Internet to the corresponding DSS server. These DSS's may even store only encrypted versions of the user data in their computers, servers and/or other computing devices. However, if the DSS server preserves the ability to decrypt, view, analyze or otherwise gain access to a user's data as a normal part of the operation of that DSS, then the DSS has failed to provide its users with complete control over the access to their own data. And, they have exposed their users' data to theft and exploitation at the hands of a hacker and/or an unscrupulous DSS provider and/or employee thereof.\n\nAn embodiment disclosed herein is intended to provide the basis for the implementation of secure data sharing, and social, networks in which only users and their specified contacts and/or friends are able to access the users' personal and/or private data. By limiting access to a user's data to the user who created it, and to the contacts and/or friends of that user, both the real and the perceived privacy and security of that potentially sensitive information are increased.\n\nIn an embodiment, a separate set of computers, servers and/or programs has the ability to review discrete elements of user data in order to check for abusive data and/or abusive behavior. And, in the event that abuse is detected, that same separate set of computers, servers and/or programs can retrieve, via a user's DSS client, the decryption key(s) of that user, in order to decrypt and archive that user's data and thereby make it available to, for example, the proper law enforcement agencies. However, this should not diminish the privacy and security provided to users who are not engaged in abusive behavior.\n\nAn embodiment herein does not facilitate, or even permit, the reconstitution of original user data for the purposes of inspection, analysis, selling and/or any other exploitative activity, on the part of the owners and/or operators of the DSS.\n\nA novel architecture for a private DSS described herein seeks to ensure the privacy and security of users' information. In this new type of DSS, a user's information is stored and transmitted (with only a few exceptions) in an obfuscated (e.g. an encrypted) form. And, the only means (e.g. decryption key) with which the encrypted data can be de-obfuscated (e.g. decrypted), and thus viewed, is always in the sole possession of the user and the user's contacts.\n\nThis arrangement ensures that a user's data cannot be examined by anyone other than the user or the user's contacts. This arrangement also makes it more difficult for the web site, or other commercial provider (if any), hosting the private DSS to exploit its users' data. Accordingly such a system, which facilitates the obfuscation, storage, exchange and de-obfuscation of personal, confidential and/or proprietary data, offers many advantages over existing data sharing networks and/or systems.\n\nThe disclosure of a private DSS that follows involves both the âobfuscationâ of data and the âde-obfuscationâ of data. âObfuscationâ can mean that the true nature and data contained in a body of data is hidden in a manner which may not be reasonably revealed in the absence of a specific means of âde-obfuscation.â For any particular means of obfuscation employed to âhideâ data, there will be a specific corresponding means of de-obfuscation.\n\nIf the means of obfuscation is a specific symmetric encryption algorithm (as utilized in âsymmetric key cryptographyâ), the product of such an encryption can be made unique through the use of a unique âencryption keyâ or âkey.â In the case of a symmetric encryption algorithm, the same key used to render unique an application of the algorithm to, and a subsequent encryption of, a particular body of data, is also used by the corresponding symmetric decryption algorithm in order to restore the original values to the encrypted body of data.\n\nIf the means of obfuscation is an asymmetric encryption algorithm (as utilized in âasymmetric key cryptographyâ and in particular in âpublic key cryptographyâ) then two mathematically-linked keys are defined such that one key may be used to encrypt data and the other key may be used to decrypt the data encrypted with the first key and neither key may be used to both encrypt and decrypt data.\n\nOther methods of data obfuscation and de-obfuscation may be used in conjunction with the operation and execution of various elements of the private DSS disclosed herein. Some may involve other encryption algorithms and schemes known to the public which, when used in conjunction with unique codes and/or keys encrypt data in a way which is sufficiently difficult to reverse so as to provide a sufficiently robust degree of protection for the data. Some other methods may involve customized algorithms and/or pairs of algorithms, and corresponding bodies of computer code, which will uniquely obfuscate data and subsequently de-obfuscate the obfuscated data. If these algorithms are themselves unique, then no corresponding unique data values may be required to achieve unique and unreasonably-difficult-to-break data obfuscation.\n\nThe following disclosure may refer to encryption and decryption instead of the more general âdata obfuscationâ and âde-obfuscationâ. And, it may refer to the use of encryption involving a single key for both encryption and decryption (i.e. to a âsymmetrical encryption keyâ), and/or it may refer to public-key encryption (and the corresponding private-key decryption). However, the scope of this disclosure is intended to extend to the use of any means of data obfuscation, and a corresponding means of de-obfuscation, with respect to any and all steps in the operation and execution of the private DSS disclosed herein.\n\nWhen the context in which a key is referred to involves data obfuscation and/or encryption, it will be referred to as an âencryptionâ key. However, then the context in which a key is referred to involves data de-obfuscation and/or decryption, then it will be referred to as a âdecryptionâ key.\n\nEmbodiments also support the use of means of data obfuscation and de-obfuscation other than encryption and decryption. These means of data obfuscation and de-obfuscation may involve the use of values analogous to keys which are used in combination with a corresponding algorithm or method to achieve a unique result. These means of data obfuscation and de-obfuscation may also involve algorithms, methods and/or programs which achieve a unique obfuscation without the use of any such values or keys. When the use of any means of data obfuscation and/or de-obfuscation is denoted, without limitation as to its implementation and/or method of implementation, it will be referred to as the use of a âvalue, method and/or program or portion of a programâ (VMP).\n\nWhen we want to refer to a means of data obfuscation without limitation as to its implementation and/or method of implementation, we will refer to the use of âa data obfuscation value and/or program or portion of a programâ (DOVP). Likewise, when we want to refer to a means of data obfuscation without limitation as to its implementation and/or method of implementation, we will refer to the use of âa data de-obfuscation value and/or program or portion of a programâ (DDVP)\n\nA structured method of sharing data electronically is described herein. A system implementing this method stores and transmits only encrypted user data. While the content type(s) of each packet of data may be known to the system, the actual contents cannot be known to the system. The decryption keys required to access data are retained by the âownersâ (i.e. the authors and/or uploaders) of the data. The system neither possesses nor has access to these keys, and the operators of such a system are therefore unable to access, view, read, disclose or exploit user data. Keys are exchanged between users by a method that circumvents the system (e.g. a third-party email service), or by using public-key encryption, or some other asymmetric encryption scheme, to transmit only encrypted keys through the system.\n\nA user is responsible for remembering and/or recording his own encryption and decryption keys (if they are not the same key), or just the single key used for both encryption and decryption, in the above system. However, the decryption keys of his contacts and/or friends within the system can be stored, along with the rest of his data, in an encrypted format within the system. If a user loses or forgets his own encryption/decryption key(s), methods are provided herein for securely retrieving that key from a contact within the system who still retains that key among his set of contact keys. This novel system can be applicable to the creation of private online social networks, as well as to the creation of private DSS systems intended to share and store law-enforcement data, private DSS systems to share and store medical data, etc.\n\nAn embodiment herein uses user-specified encryption to limit overall access to the user's data. It then allows the centralized system to control distribution of each piece of encrypted data to the subset of the user's total set of friends that the user specifies.\n\nAn embodiment herein advocates âtrustingâ the central system to make dynamic changes to user data distribution since the content is already encrypted and privacy is implicitly limited to the user's total pool of friends. In other words, the risk of âsystem betrayal of trustâ is low because there is no motivation for the system to misdirect encrypted user content.\n\nAn embodiment herein is an integrated system for the storage and sharing of encrypted user data wherein only the user and his friends possess the keys required to decrypt and access that data, thereby protecting user data from hackers, as well as owners and operators of the system.\n\nAn embodiment herein is concerned with controlling access of various users to encrypted data stored on the same networked storage device(s).\n\nA system herein does not attempt to verify the identity of a user at the time that an account is created. And, the identities of a user on all subsequent interactions with the system are verified by means of the username and password originally specified by a user at the time of account creation.\n\nPursuant to a system herein âtrustâ is implicit; in other words, it is the responsibility of a user of the system to verify the identity of any user account with which he exchanges decryption keys. A system herein can provide users with a means of storing and sharing private information in such a way that the owners and/or operators of the system cannot decrypt, read, view, disseminate and/or otherwise exploit the private data of the user. In an embodiment herein, users exchange keys through the system, i.e. through the network server(s) common to all users, through the use of public-key cryptographic techniques.\n\nA system herein facilitates the secure exchange of decryption keys (and also keeps those keys unavailable to the server(s) responsible for their transmission). Accordingly, the system does not, and cannot, store user decryption keys on the networked storage device(s) which can be read and/or utilized by the DSS server(s). The keys are stored on those devices, but only in encrypted formats for which the system lacks the needed key(s) to fully decrypt them.\n\nA system herein creates an online system for the storage and sharing of encrypted user data in which the system itself, as well as its operators and/or owners, have no ability to decrypt. For a system herein, how users exchange their decryption keys can be of less import than the requirement that such an exchange does not allow those keys to be viewed, understood and/or recorded for later use by the system itself.\n\nA system herein encrypts data using the author's (i.e. the sender's) encryption key(s). That same data may be shared with every other user of the system possessing the needed decryption key.\n\nA system herein keeps track of the type and/or category of data being encrypted and distributed. This facilitates complex data distribution requirements.\n\nA method embodiment herein re-uses a single symmetric encryption key per user which may be used to both encrypt and decrypt data. A user's key can be changed, if needed or desired, but in general the same key is constantly reused. This allows a single user key (also in the possession of each of that user's authorized âcontactsâ) to be used to decrypt all of the user's encrypted data, thereby simplifying key and data management.\n\nA method embodiment herein uses multiple symmetric encryption keys per user in which each key is used to securely transmit and/or share data with a particular contact or group of contacts. With respect to such an embodiment, each key can be associated with the particular contact or group of contacts for which it will be used to securely share a user's data. A user may determine at the time that a data-sharing relationship is established between the user and a contact which key or keys to share with the contact, i.e. in which âdistribution list(s) or group(s)â the user will be included.\n\nA method embodiment herein uses a single pair (public and private) of asymmetric encryption keys per user. With respect to such an embodiment, a user shares with each contact the private decryption key, thereby enabling each contact to decrypt the user's data. The user must also retain a copy of this private key so as to be able to decrypt his own data. With respect to such an embodiment, the user alone retains the public encryption key with which his data will be encrypted.\n\nA method embodiment herein uses multiple pairs (public and private) of asymmetric encryption keys per user in which each pair of keys is used to securely transmit and/or share data with a particular contact or group of contacts. With respect to such an embodiment, each pair of keys can be associated with the particular contact or group of contacts for which it will be used to securely share a user's data. A user may determine at the time that a data sharing relationship is established between the user and a contact which pair or pairs of keys to share with the contact, i.e. in which âdistribution list(s) or group(s)â the user will be included. This embodiment offers the added advantage that the ownership/authorship of all of the user's encrypted data is implicitly validated with respect to any contact since the ability of the private key in the possession of the contact to be successfully used to decrypt the putative data of the apparent owner/author corroborates that ownership/authorship since the public key solely in the possession of the user must have been used to achieve the encryption.\n\n1. Disclosed herein is a method for exchanging decryption keys through a system in such a way that the system, and those operating the system, will not have access to nor be able to recover, generate or discern the values of those keys.\n\n2. Disclosed herein is a system for sharing data in which neither the system nor those operating it have access to or are able to recover, generate or discern the values of that data.\n\n2a. The system of 2 in which a user of the system, after entering a username and password in order to log in to the system, enters personal encryption/decryption key(s) into a client program used to access the system.\n\n2b. The system of 2a in which a user's encryption/decryption key(s) is/are retained within the client program in such a way so as to prevent its access or discovery by others (e.g., retained only in RAM controlled by the client program).\n\n2c. The system of 2 in which only a user's obfuscated data is transmitted by or stored by a user's computing device and/or transmitted by or stored by a corresponding server.\n\n2d. The system of 2c in which a first user of the system can elect to share data with a second user of the system.\n\n2e. The system of 2d in which the system facilitates the exchange of the data and/or the computer codes (e.g. computer program) required by each user to de-obfuscate the obfuscated data of the other user.\n\n2f. The system of 2e in which the collection of de-obfuscation-enabling data and/or computer codes acquired by a first user of the system, with the data and/or computer codes being required to de-obfuscate the obfuscated data generated by and stored with the other user of the system, is stored in a âkey lockerâ data structure.\n\n2g. The system of 2f in which a user's key locker is only transmitted and/or stored in an obfuscated form achieved through the application of the user's personal obfuscation data and/or computer code(s).\n\n2h. The system of 2d in which data created or uploaded or otherwise generated by a first user is obfuscated through the application of the user's personal obfuscation data and/or computer code(s) and subsequently transmitted to a server and/or to a second user.\n\n2i. The system of 2h in which data obfuscated through the application of the first user's personal obfuscation and/or computer code(s) may subsequently be de-obfuscated using the complementary data and/or computer code(s) stored in and retrievable from a key locker of the second user.\n\n2j. The system of 2 in which a first user of the system can generate, store and/or share personal information with a second user of the system.\n\n2k. The system of 2 in which a first user of the system can generate, store and/or share information for which that user serves as a custodian, editor or archivist.\n\n2l. The system of 2k in which the data stored and/or shared relates to a business, product, investigation, set of health records, criminal investigation, event, etc.\n\n2m. The system of 2c in which a first user of the system can elect to allow a second user to copy and/or store and/or share with others, a plain, de-obfuscated copy of a data packet and/or of all data packets shared by the first user with the second user.\n\n2n. The system of 2m in which a user's specified permissions and/or options regarding the types of operations which may be performed on any particular packet of the user's data, and/or on all packets of the user's data, by any contact, or group of contacts, are associated with the particular data packet, and/or all of the user's data packets, as a set of unencrypted attributes.\n\n2o. The system of 2e in which a first user of the system can recover lost or forgotten personal de-obfuscation data and/or computer code(s) from a copy of the data and/or computer code(s) available to or accessible by the client program of a second user of the system.\n\n2p. The system of 2 in which a first user of the system can share data with a second user and/or store data in and retrieve data from a personal archive within the system.\n\n2q. The system of 2 in which a first user of the system specifies data and/or computer code(s) which may be used to obfuscate his data.\n\n2r. The system of 2q in which the first user shares with a second user of the system the data and/or computer code(s) required to de-obfuscate the obfuscated date of the first user.\n\n2s. The system of 2r in which the first user can directly or indirectly specify a plurality of data and/or computer code(s) which may be used to obfuscate any particular packet of data created, uploaded and/or otherwise generated by the first user.\n\n2t. The system of 2s in which the first user may share with a second user any one or more of the individual de-obfuscation data and/or computer code(s) which complement the obfuscation data and/or computer code(s) that the first user may directly or indirectly elect to use to obfuscate any particular packet of data.\n\n2u. The system of 2 in which the data shared within the system may be stored on servers and/or their associated storage devices which are responsible for transmitting data from a first user of the system to a second user.\n\n2v. The system of 2u in which some portion of the data shared within the system may be stored on the computing device(s) and/or associated storage device(s) of a first user.\n\n3. Disclosed herein is a method for storing the de-obfuscation data and/or computer code(s) (e.g., decryption keys) required to restore (e.g., decrypt) data obfuscated in manners unique to one or more people or user accounts.\n\n3a. The method of 3 wherein the de-obfuscation data and/or computer code(s) are stored within a DSS only in an obfuscated format for which the data and/or computer code(s) required for its de-obfuscation is not known by nor available to the DSS.\n\n4. Disclosed herein is a method for creating multiple unique encryption keys from a single âprimaryâ encryption key in which the primary encryption key is systematically modified with a tag, value, permutation, or other manipulation or modification (e.g. derived from the anticipated context in which each derivative key will be used).\n\n4a. The method of 4 in which the modified key is created by appending the name of a second user, the label or a category or other descriptive text or value.\n\n5. Disclosed herein is a system for sharing information within an electronic and/or digital network, which includes: (a) media encrypted on each respective user's computing device prior to transmission to a system of centralized programs and servers; and (b) an encryption key and/or method used to encrypt each user's data is known only to each respective user, and the user's complementary decryption key (e.g. likely the same symmetric encryption key) is shared only with those other users whom the user invites to have access to it.\n\n5a. The system of 5 wherein data obfuscation is achieved by means other than the use of encryption, and/or data de-obfuscation is achieved by means other than the use of decryption.\n\n5b. The system of 5 wherein the coordinating programs and/or servers are not centralized (e.g. they are distributed among various geographically distant server centers).\n\n5c. The system of 5 wherein the coordinating programs and/or servers are decentralized in a loose confederation of cooperating systems, and/or constitute a âpeer-to-peerâ network.\n\n5d. The system of 5 wherein the media is user-generated media.\n\n5e. The system of 5 wherein the digital network is an online social network.\n\n6. Disclosed herein is a method of sharing data between a source of data and one or more recipients (e.g. a person's âfriendsâ) in which the data may only be viewed, understood and/or modified by the source, or the recipients, of the data, which includes: (a) protecting the privacy of the data from viewing, disclosure and/or exploitation by other parties, including the owners and/or operators of the system facilitating such data sharing; and (b) wherein the protecting of the privacy of the data is by data obfuscation and/or encryption prior to its transmission from the computing device(s) of the source, and by the clarification and/or decryption of that obfuscated and/or encrypted data upon the computing devices of the recipients.\n\n6a. The method of 6 wherein the data obfuscation is symmetric encryption and may utilize a user-unique encryption key, with that same key also uniquely determining the ability of a user to decrypt such encrypted data.\n\n6b. The method of 6 wherein the ability of recipients to clarify and/or decrypt the obfuscated and/or encrypted data received from a particular source is achieved through the sharing of the source's clarification method and/or decryption key with the recipients.\n\n6c. The method of 6b wherein the exchange of clarification methods and/or decryption keys is through a channel outside the system through which source data is transmitted to recipients (e.g. through a third-party email service).\n\n6d. The method of 6c wherein the exchange of clarification methods and/or decryption keys is through the system through which obfuscated source data is transmitted to recipients through the use of public-key encryption so that the encrypted clarification methods and/or decryption keys exchanged through the system cannot be understood or exploited by the system.\n\nEmbodiments herein rely upon the obfuscation and dc-obfuscation of data. The scope herein includes embodiments using any method of data obfuscation including, but not limited to, known methods and algorithms as well as customized and/or novel methods and algorithms. These data obfuscation methods may produce a result which is determined, at least in part, by some value or key which is input to the method along with the data to be obfuscated. In like manner, embodiments herein include those which use complementary methods to de-obfuscate obfuscated data, some of which may require the input of a value or key, along with the data to be de-obfuscated, in order to accurately restore the obfuscated data to its original state.\n\nHowever, citing the full range of possible methods of data obfuscation and de-obfuscation in reference to each feature and variation associated with the scope and description of this invention would be cumbersome at best. Therefore, whenever âencryptionâ is specified within this disclosure it should be understood to refer to any method of data obfuscation including the use of algorithms known to the public, the use of unique âencryption keysâ in association with any of those publicly known algorithms, and/or the use of customized algorithms for which customized programs and/or computer code is required and for which standard and/or custom keys or other data values may be required. Whenever an âencryption keyâ is specified it should be understood to similarly refer to any data value and/or customized computer code(s) capable of independently achieving data obfuscation or of achieving data obfuscation in association with any obfuscation algorithm known to the public.\n\nLikewise, whenever âdecryptionâ is specified within this disclosure it should be understood to refer to any method of data restoration and/or de-obfuscation including the use of algorithms known to the public, the use of unique âdecryption keysâ, and/or keys also used in the corresponding obfuscation of the data, in association with any of those publicly known algorithms, and/or the use of customized algorithms for which customized programs and/or computer code is required and for which standard and/or custom keys or other data values may be required. Whenever a âdecryption keyâ is specified it should be understood to similarly refer to any data value and/or customized computer code(s) capable of independently achieving data restoration and/or de-obfuscation, or of achieving data restoration and/or de-obfuscation in association with any de-obfuscation algorithm known to the public.\n\nDespite any absence of a reference to the full range of data obfuscation and de-obfuscation methods included within the scope herein, that scope is nonetheless inclusive of all such variations and alternatives which would be obvious to someone skilled in the art.\n\nDisclosed herein is a private DSS which provides both encryption and decryption of data, and presents the decrypted data in a user interface that segments data on the basis of various attributes and/or contexts, e.g. data related to photos, data related to comments, and data related to a particular subset of users.\n\nDisclosed herein is a private DSS which provides both encryption and decryption of data, and presents the decrypted data in a user interface that provides tools with which to create new instances of at least some types of data, e.g. documents, comments, video recordings from a webcam, etc. and/or to edit at least some types of data, e.g. identifying people in photos with metadata, cropping, sizing, rotating, enhancing photos, annotating videos, etc.\n\nDisclosed herein is a private DSS which provides encryption/decryption/data sharing relating to three or more users (all sharing together) where encryption keys used by each user are different, thereby requiring a user to possess a unique decryption key for each other user in order to decrypt the data from each other user.\n\nDisclosed herein is a DSS method which includes: (a) receiving in a DSS server an obfuscated collection of data from a DSS client of a first user and the collection of data obfuscated with a data obfuscation value and/or program, or portion of a program, of the first user; (b) the obfuscated collection of data having a second user as an intended recipient; and (c) transmitting from the DSS server the obfuscated collection of data to the DSS client of the second user; and (d) wherein information needed to decrypt the encrypted collection of data is neither present in nor accessible by the DSS server.\n\nDisclosed herein are novel apparatus and/or methods of or related to: the network aspects of the DSS; monetization by vendors; key exchanges; key lockers; distribution lists and special keys; guard against fraudulent client programs; unencrypted attributes of encrypted data packets; segregation of data presented to user (personas); distribution lists; creation of logs; restoring lost keys; and distribution-list-specific keys.\n\n1. Disclosed herein is a private DSS network which includes: means for the systematic management of keys; means for the systematic storage and use of keys; and means for the automated decryption of encrypted data when corresponding decryption key available.\n\n1a. The network of 1 wherein user decryption keys are not available in, nor stored in, an unencrypted format within the servers of the private DSS.\n\n1b. The network of 1 including systematic exchanging of keys.\n\n1c. The network of 1 with user data being encryption and decryption per symmetric-key encryption algorithmic method.\n\n1d. The network of 1 with the user entering an encryption key and/or a decryption key into the user's client with the encryption key having been defined, at least in part, by the user.\n\n1e. The network of 1d wherein a username and/or password must be validated by the DSS server for a DSS client to share data within the private DSS.\n\n1f. The network of 1 in which at least some of the data shared by at least one user of such a secure data sharing network share proprietary data, including, but not limited to: digital movies, videos, photos, screen savers, news reports, financial analyses and/or predictions, financial data, audio files, documents, books, retail products, advise, guidance, other products, other services, and/or other types of data.\n\n1g. The network of 1f in which other users wishing to have access to, and share, the proprietary data, products and/or services of the at least some users pay a fee to the at least one owner of the account and/or to some at least one other party in order to be provided with the means to access, experience and/or to be provided with some or all of the data, products and/or services available from that at least one user.\n\n1h. The network of if in which the at least one user consummates a data-sharing relationship with another user of the private DSS in order to share his data, products and/or services with that another user.\n\n1i. The network of 1h in which the data-sharing relationship between the at least one user and the another user is automatically or manually terminated after a certain period of time and must be renewed and/or reaffirmed in order to be re-established.\n\n1j. The network of 1i wherein at least one payment is required from the another user to the at least one user in order to re-establish a terminated data-sharing relationship.\n\n1k. The network of if in which some aspect of the sharing, including, but not limited to: the selection of data, products and/or services, the categories data, products and/or services, the quality data, products and/or services, the quantity of data, products and/or services, and/or the frequency of provision of data, products and/or services, may vary between a first and second other user.\n\n1l. The network of 1k in which the at least one differing aspect of the sharing is at least in part determined by at least one difference in the amount of the at least one payment paid by the first and second users to the at least one owner of the account and/or to the at least one other party.\n\n1m. The network of 1 with at least portion of encrypted user data stored in DSS server(s) but not shared with other users.\n\n2. Disclosed herein is an automated method of key exchange which includes public/private keys.\n\n3. Disclosed herein is an automated management method of keys (such as in key locker) which includes a system-unique key identifier and a decryption key.\n\n3a. The method of 3 including at least one user-defined key per locker (i.e. the users).\n\n3b. The method of 3 wherein the system-unique key identifier includes an encryption key (if any) and/or a decryption key.\n\n4. Disclosed herein is a system of the automated association of a distribution list with an encryption key and/or decryption key which includes: a distribution list identifier; identifiers and/or names of recipients; and at least one system-unique key identifier specifying an encryption key and/or a corresponding decryption key.\n\n4a. The system of 4 with one key identifier specifying one of the user's encryption keys.\n\n4b. The system of 4a with a second key identifier specifying a system encryption key.\n\n4c. The system of 4 with one distribution list identifier corresponding to encryption with the âprimaryâ encryption key of user.\n\n5. Disclosed herein is a system to protect against access to a network with fraudulent/modified client including: loading client from server at start of session; client loaded selected from large number of authentic variations of client; each variation differs at least with respect to some functionality; and the server can assess validity of client, terminating connection if invalid client behavior is detected.\n\n5a. The system of 5 wherein the selection is random.\n\n5b. The system of 5 wherein some functionality including at least functions designed to respond to various server queries with selection of available queries and/or content and/or format of responses differing between different client variations.\n\n5c. The system of 5 wherein duration of any particular client-mediated session is limited so as to force periodic reloading of a new, likely different, variant client.\n\n6. Disclosed herein is a system for the association of encrypted data packets with unencrypted data.\n\n6a. The system of 6 wherein the unencrypted data includes the date that information specified by unencrypted data was created.\n\n6b. The system of 6 wherein the unencrypted data includes the time that information specified by unencrypted data was created.\n\n6c. The system of 6 wherein the unencrypted data includes the date that the data was encrypted.\n\n6d. The system of 6 wherein the unencrypted data includes the time that the data was encrypted.\n\n6e. The system of 6 wherein the unencrypted data includes the type or category of information specified by unencrypted data, with type or category including, but not limited to: comment, photo, text, video, user interface graphic, user interface template, audio recording, etc.\n\n6f. The system of 6 wherein the unencrypted data includes size of information specified by unencrypted data, e.g. original file size.\n\n6g. The system of 6 wherein the unencrypted data includes the identifier of the owner and/or creator and/or source of the information specified by unencrypted data.\n\n6h. The system of 6 wherein the unencrypted data includes the name of the owner and/or creator and/or source of the information specified by unencrypted data.\n\n6i. The system of 6 wherein the unencrypted data includes the email address of the owner and/or creator and/or source of the information specified by unencrypted data.\n\n6j. The system of 6 wherein the unencrypted data includes the identifier of the decryption key required to decrypt the encrypted data.\n\n6k. The system of 6 wherein the unencrypted data includes the identifier of the decryption program required to decrypt the encrypted data.\n\n6l. The system of 6 wherein the unencrypted data includes permission-related attributes specifying what operations a recipient is allowed, by the owner, creator or source of the information specified by unencrypted data, to perform on that copy of the original information concealed within the encrypted data packet, including, but not limited to permissions regarding the recipient's printing, saving to local storage, editing, saving to external storage (e.g. a USB drive, a writable DVD, etc.), etc., of the copy of the original information.\n\n7. Disclosed herein is a system for the segregation of the user data presented to a user by the user's client, following the client's decryption of some or all of that user data, with said decryption involving the use of, or reference to, or execution of, a plurality of decryption keys and/or algorithmic methods.\n\n7a. The system of 7 wherein the segregation of the data excludes the data generated by one or more contacts of the user.\n\n7b. The system of 7 wherein the segregation of the data limits the data presented to that generated by one or more contacts, or pre-defined groups of contacts, of the user.\n\n7c. The system of 7 wherein the segregation of the data with respect to one or more types of data, including, but not limited to the types of: comments, photos, videos and audio files.\n\n7d. The system of 7 wherein the segregation of the data with respect to one or more categories of data, including, but not limited to the categories of: data having been created or modified within a defined period of time from the time of presentation.\n\n7c. The system of 7 wherein the nature and limits of the segregation are related to a corresponding list of a user's contacts.\n\n7f. The system of 7e wherein the corresponding list of a user's contacts is embodied in a âdistribution listâ specifying the user's desired recipients for any packet of data specifically shared with that distribution list.\n\n7g. The system of 7f wherein the distribution list is associated with an encryption key (and corresponding decryption key which may be the same as the encryption key) which is unique among the user's keys which are intended for use in encrypting data packets.\n\n7h. The system of 7g wherein the distribution list and the associated encryption (and/or decryption) key are associated with the same identifying value.\n\n7i. The system of 7f wherein the at least one default distribution list offered to the user by the user interface created by the user's DSS client which presents the segregated set of user data to the user in response to a user's manifest desire to share a new collection of data with his contacts, or some incomplete subset thereof.\n\n8. Disclosed herein is a system for producing a log which specifies actions related to any particular packet of a user's data within a DSS system.\n\n8a. The system of 8 where the actions include the distribution of a data packet to a user of the DSS system.\n\n8b. The system of 8 where the actions include the decryption of a data packet by the client of a user of the DSS system.\n\n8c. The system of 8 where the actions include the presentation of the unencrypted contents of a data packet to a user of the DSS system.\n\n8d. The system of 8 where the actions include the printing of the contents of a data packet by the client of a user of the DSS system.\n\n8e. The system of 8 where the actions include the saving of a copy of the unencrypted contents of a data packet to a local data storage device by the client of a user of the DSS system.\n\n8f. The system of 8e where the local data storage device is an internal component of the computing device of a user of the DSS system.\n\n8g. The system of 8e where the local data storage device is an external storage device connected to the computing device of a user of the DSS system (e.g. to a USB drive).\n\n9. Disclosed herein is a method for restoring the lost primary encryption key and/or decryption key of a user of a private DSS system by sharing with the user a copy of that user's primary encryption key and/or decryption key stored in the key locker of a contact of the user.\n\n9a. The method of 9 where the sharing utilizes a method which prevents the value of the restored key from being known or knowable by the DSS system.\n\n9b. The method of 9 where the restoration of the lost encryption key is preceded by confirmation from at least one of the user's contacts that the restoration is appropriate.\n\n9c. The method of 9 wherein the restored key is presented to the user by a computing device.\n\n9d. The method of 9 wherein the restored key is sent to the user via a means of communication including, but not limited to: an email, an SMS text message, a letter, a digital message delivered to the user's browser when that user visits a particular page of a website controlled, at least in part, by the private DSS.\n\n10. Disclosed herein is a method of improving the privacy of a limited distribution of a packet of a user's data by encrypting that data packet with at least one key (and/or . . . ): wherein that one key is at least a second key used by the user's client in order to encrypt that user's data; wherein the client programs of the intended recipients possess the means to decrypt a data packet encrypted with such an at least second key; and wherein the set of other users who have agreed to share data with the user (i.e. the set of the user's contacts) whose client programs are so capable of decrypting such an encrypted data packet does not include all of that user's contacts.\n\n10a. The method of 10 wherein the at least one key is associated with a list of the user's contacts who are intended to receive any data packet encrypted with that at least one key.\n\n10b. The method of 10a wherein the at least one key is associated with an identifier, and wherein that same identifier is associated with a list of recipients with whom the user intends any data encrypted with that at least one key to be shared.\n\n10c. The method of 10 wherein the set of recipients for the data is an incomplete subset of the contacts associated with the at least one key.\n\nThis disclosure may refer to the data which is stored, transmitted, obfuscated, de-obfuscated, etc. as a body of data, a packet of data, a collection of data, a set of data, a data file, a data object, etc. However, all of these represent the same thing which is a unit of digital information which is manipulated, processed, transmitted and/or stored by the program in question.\n\nThis disclosure may refer to a packet of data (or the equivalent) and/or to a copy thereof. However, digital data is fungible. That is, a copy of a packet of digital data is identical to an original packet of data, and a copy is the same as the original. A packet of data is routinely moved from one memory location to another within a computing device or across a data transmission network and yet it is still an âoriginalâ packet of data. Any distinction between an original packet of data and a copy is artificial. And, any reference to a copy of a data packet should be regarded as a reference to an original as a copy and an original are indistinguishable and the distinction is at best one of convenience.\n\nBRIEF DESCRIPTION OF THE DRAWINGS\n\nFor a fuller understanding of the nature and objects of the invention, reference should be made to the following detailed description, taken in connection with the accompanying drawings, in which:\n\nFIG. 1 illustrates principle components of a private DSS herein and their relationships to one another.\n\nFIG. 2 illustrates an embodiment of a private DSS herein, namely that a group of people can interact, by means of DSS client programs (i.e. DSS_CP's), electronically within a private DSS implemented within a sharing network and possessing server(s) and storage device(s).\n\nFIG. 3 illustrates the private sharing of data between three users of a private DSS.\n\nFIG. 4 illustrates a scheme by which a DSS client program facilitates a user's interactions with the server(s) of a private DSS.\n\nFIG. 5 illustrates an importation of a DSS âkey locker,â that is, a data structure containing a list of encryption keys needed to decrypt the encrypted data shared with the user by his contacts, in to the DSS client program operating on a user's computing device.\n\nFIG. 6 illustrates a structure, and various stages of encryption, that can characterize a DSS key locker during the execution and operation of a private DSS.\n\nFIG. 7 illustrates a pattern of interactions which can characterize a user's interaction with a private DSS.\n\nFIG. 8 illustrates a method by which two users of a private DSS can exchange their decryption keys in a manner which does not allow the system facilitating that exchange to have access to, nor knowledge of, the actual values of those decryption keys.\n\nFIG. 9 illustrates an exchange of messages within a private DSS occurring between two users of the DSS.\n\nFIG. 10 illustrates basic actions and steps that can characterize the operation of a private DSS and identifies some of the steps not found in the operation of traditional DSS's.\n\nFIG. 11 illustrates the portion of a private DSS which processes, stores and/or transmits only encrypted user data.\n\nFIG. 12 illustrates possible alternative embodiments and/or applications of a private DSS, capable of providing a structured management of data and an optimal degree of control of user access to that data.\n\nFIG. 13 illustrates the utility of this private DSS with respect to protecting sensitive data.\n\nFIGS. 14A-D illustrate methods by which a DSS client program can be loaded on to a user's computing device.\n\nFIG. 14A illustrates the loading from a network server of a DSS client program into a browser operating on a user's computing device.\n\nFIG. 14B illustrates the loading of a DSS client program (or the installer of such a program) directly on to a user's computing device from a network server.\n\nFIG. 14C illustrates the loading of a DSS client program on to a user's computing device from a program, or a program installer, stored on a data-storage module such as those that are commercially available to the general population.\n\nFIG. 14D illustrates an option of providing users with a DSS client program pre-installed on the user's computing device prior to the user's purchase and/or possession of that device.\n\nFIGS. 15A-C illustrate alternate architectures for a private DSS of this disclosure.\n\nFIG. 15A illustrates a private DSS implemented by means of a âcentralizedâ system architecture.\n\nFIG. 15B illustrates a private DSS implemented by means of a âpeer-to-peerâ system architecture.\n\nFIG. 15C illustrates a private DSS implemented by means of a âdistributedâ system architecture.\n\nFIG. 16 illustrates a method by which a DSS can restore to a user that user's password should the user lose and/or forget his password.\n\nFIGS. 17A-B illustrate a method by which the user of a private DSS can recover a lost or forgotten encryption key and/or decryption key.\n\nFIG. 17A illustrates a method by which a private DSS can verify that restoration of a user's encryption key is authorized and/or appropriate.\n\nFIG. 17B illustrates a method by which a private DSS can restore to a user that user's encryption key and/or decryption key should the user forget it.\n\nFIG. 18 illustrates some of the types of data partitions that a DSS can provide to a user.\n\nFIG. 19 illustrates the sharing of a newly-created piece of user content with a subset of that user's total set of contacts.\n\nFIG. 20 illustrates the ability of vendors, merchants, and other providers of âpremiumâ content to utilize the secure environment provided by a private DSS of the type disclosed herein to provide their services and/or products with a minimized risk of piracy or other abuse.\n\nFIG. 21 illustrates the use of the private DSS server, in conjunction with unique encryption keys, to facilitate the creation and use of multiple online personas for a user.\n\nFIG. 22 illustrates a method by which the processing and/or requests for processing of a user's data can be automatically logged within a private DSS.\n\nDETAILED DESCRIPTION I. Introduction and Background\n\nOne aspect of the âprivateâ DSS architecture disclosed herein that can be distinguished from other DSS's is the fact that in the present private DSS design the user data is encrypted at all times except when being viewed by the user, or by the user's designated contacts and/or friends. Unlike other DSS's in which a user's data can be viewed, analyzed and/or exploited by the owners of the DSS, or its employees, in this novel private DSS only the users themselves possess the decryption keys needed to decrypt their data.\n\nOne embodiment of the private DSS architecture taught herein has two primary components: (1) a client program or set of programs which operate on each user's computing device, and (2) a set of computers, servers, and/or programs which constitute the âserverâ of the DSS.\n\nIn an embodiment, the portion of the private DSS which operates locally, on a user's computing device, will henceforth be referred to as the âDSS client.â Following a successful system log in (achieved through the submission of a valid username and password) the DSS client is responsible for receiving from a user that user's primary encryption key (or passphrase).\n\nThe DSS client also mediates the exchange of user decryption keys between two users, when those users elect to become contacts or friends of one another, i.e. when they elect to share their data.\n\nThe DSS client also decrypts all encrypted user data and contact data which it receives from the computers, servers, and/or programs which form the server of the DSS, which are henceforth referred to only as the âDSS server.â It then composes the decrypted graphics, text and/or other types of media, within a user interface, on a user's computing device, thereby allowing the user to view, read, edit and/or otherwise interact with those that data and/or media.\n\nThe DSS client also allows users to create some, or all, of the types of media which it is capable of sharing between users, or otherwise processing.\n\nAnd, the DSS client also encrypts new data which the user creates, edits, uploads, or otherwise introduces to the system. The DSS client then transmits these new and encrypted packets of user data to the DSS server for storage, dissemination to contacts, and/or other types of processing.\n\nIn an embodiment, the âDSS serverâ is that set of computers, servers, and/or programs which form the server of the DSS. In an embodiment, the DSS server is responsible for validating the login usernames and passwords of users. It is responsible for processing the encrypted user data, e.g. storage, transmission, etc. It is responsible for exchanging encrypted user decryption keys between users when those users elect to become contacts and share data.\n\nThe DSS server is responsible for, among other things, the storage and transmission of encrypted user data. This portion of the DSS determines which packets of encrypted PID will be sent to each user's computing device. For instance, the DSS server identifies those packets of encrypted user data which were created and/or uploaded by any particular user, and therefore âbelongâ to him. All of these proprietary packets of encrypted user data are available to the user who added them to the DSS.\n\nThe DSS server can also determine which packets of user data belonging to a user's contacts and/or friends should be sent to that user's computing device. In an embodiment, each packet of shared user data is associated with a list of contacts and/or friends with which it is to be shared. In an embodiment, all packets of a user's data are not necessarily shared with all of a user's contacts and/or friends.\n\nThe DSS server will also determine the relevance of each packet of user data with respect to the type of media, e.g. the media-specific âpageâ or âsectionâ of the âuser interfaceâ being viewed by a user on his local computing device by means of his DSS client. The relevance of each packet of user data might include not only the type of media, but also its date of creation and/or uploading, e.g. more recent media is often deemed to be more relevant to a user. The relevance of a packet of user data might also be affected by whether or not it is related to some other piece of user data, such as a comment on a photo. The relevance of any particular packet of user data might also be related to other attributes of that packet of data, as well as other attributes, characteristics, or user preferences, related to the context established by the DSS client and the other packets of user data to be displayed.\n\nIn an embodiment, users define their own encryption/decryption key. This is the symmetrical encryption key used to encrypt and decrypt all, or most, of their data. In an embodiment, a user's encryption key is an alphanumeric character string. This can also be referred to as a âpassphrase.â\n\nEach user of an embodiment herein defines and remembers three strings of characters. One is the user's login âusername,â which can be the character string that is used as the identifier of the user's account within the private DSS. Each username must be unique with respect to any particular private DSS. Another is the user's login âpassword,â which can be a character string used to verify the user's identity and his right to access the user data associated with the account designated by the specified username. And, the last is the user's encryption key. Pursuant to an embodiment herein, this can be a character string which will be used as the key with which all, or most, of the user's data will be encrypted and decrypted (by means of its utilization in conjunction with computer code implementing a particular symmetric encryption/decryption algorithm). The user enters this key at the start of each session, that is, each time the user's DSS client is initialized.\n\nIn an embodiment, two users exchange their decryption keys. The DSS client of each user can store the decryption key of the user's âfriendâ and/or âcontactâ in a âkey locker.â A key locker is a file and/or data structure containing the identifiers and values of the decryption keys of each of the user's friends and/or contacts (in a one-to-one correspondence).\n\nEach time a user adds a new key_id:key_value pair to his key locker the DSS client encrypts the augmented key locker and transmits that encrypted key locker to the DSS server for storage. Then, at the start of each session of the user's DSS client, the user's key locker will be retrieved from the DSS server by his DSS client and decrypted with the user's decryption key. This decrypted key locker will then allow the user to decrypt all of the encrypted user data sent to the user's DSS client by the DSS server.\n\nA key locker may contain pairs of values as stated above, in which one value is an identifier of a key and the other value is the key. However, a key locker may also store triplets of values, in such a triplet an identifier may be associated with both an encryption key and the corresponding decryption key. In fact, in different embodiments, there may be advantages to having any number of values associated with any particular identifier in a key locker. For instance, when a particular encryption key, and perhaps the corresponding decryption key (if the encryption key is not also the key to be used for any corresponding decryption), is to be used to ensure that specific packets of data are to be shared with a specific subset of a user's friends and/or contacts, then the key locker may contain an identifier to the corresponding distribution list (i.e. subset of friends and/or contacts) in addition to the key identifier and key(s).\n\nDisclosed herein is a private DSS in which users are able to share their data with their contacts and/or friends free from the fear, the anxiety and/or the consequences of having their data accessed and/or exploited by third parties, including the owners and/or operators of the DSS. This disclosure further supports specialized embodiments and/or implementations, especially those which offer specialized types or modes of sharing. This private DSS architecture also supports specialized programs which involve the sharing of data for which the security and privacy of that data is of paramount importance.\n\nA downside of providing people with a secure and private forum in which to store media, and/or exchange media with their friends is that some people will endeavor to use that privacy to store media, and/or to engage in activities, which are abusive and/or otherwise contrary to the law. Methods of detecting such abusive behavior are discussed later in this disclosure.\n\nUnencrypted DSS's, as well as encrypted DSS's in which the owners of the DSS have the ability to decrypt the data of their users, are able to exploit their ability to view and analyze the data of their users in order to help them to monetize their DSS. So, an obvious drawback of providing users with a secure and private DSS, in which the owners and/or operators of the DSS cannot access, view, analyze, or otherwise exploit the data of those users, is that the monetization of the DSS can be more difficult.\n\nMethods of monetizing private DSS's implemented in accordance with the teachings of this disclosure are discussed later in this disclosure.\n\nII. Detailed Discussion of Embodiments Depicted in Drawing Figures\n\nUser's Computing Device Connected to a DSS Server\n\nFIG. 1 illustrates a possible connection scheme between the DSS client that a user would utilize in order to access a DSS and a server of the DSS. A user's computing device 101 is connected to the Internet, or to some other electronic, digital or analog, data-sharing network. A program on the user's computer 101 (e.g. a browser program, a âstand-aloneâ program, etc.) exchanges messages and data with a DSS server by sending 102 properly addressed messages and/or data into the network 103. Those user messages and/or data arrive, via the network 103 at a DSS server 105. The DSS server receives data transmitted by the user's computer 101, and responds to requests for data by sending, when appropriate, messages and/or data back to the user's computer 101 via the Internet 103.\n\nThe user's computer 101 only transmits user data to a private DSS server following its encryption with the user's unique encryption key. The server 105 in a private DSS only processes, transmits and/or stores encrypted user data, although some unencrypted attributes like data type, creation date, user ID, etc. may be associated with packets of encrypted user data. In this way, transmission of user data via the network, and/or the processing, storage and/or transmission of user data by a DSS server, cannot expose the user data to unauthorized disclosure, analysis, manipulation and/or exploitation.\n\nStructure of a Private DSS\n\nFIG. 2 illustrates a possible structure of a private DSS of a type of this disclosure. A group of users 201, 202, 203 creates accounts within the DSS 213. These users interact with the DSS 213 through local DSS client programs (âDSS_CP'sâ) 205, 206, 207 running on their respective computing devices 208, 209, 210. These DSS_CP's utilize the hardware and software resources of the users' computing devices 208, 209, 210 to communicate with, and exchange data with, the DSS server(s) 204. The DSS_CP's 205, 206, 207 only transmit encrypted versions of any user data transmitted into the Internet or other data sharing network 211. And, only encrypted user data is received by the DSS server(s) 204 and/or stored on the storage device(s) of the DSS 212. The full central portion of an exemplary private DSS, i.e., the âDSS serverâ 213, includes, but is not limited to, some server(s) 204 and some storage device(s) and/or components 212.\n\nWhen any particular user wishes to view the messages, photos and/or other data created and/or uploaded by his contacts and/or friends he is able to do so via his local DSS_CP which, as a result of its possession of copies of the decryption keys of each of his friends, is able to decrypt the encrypted content of those friends and present it to him in a clear, intelligible and understandable manner, such as by means of the audio and/or visual output devices associated with his computing device.\n\nSharing Data Between Three or More Users\n\nFIG. 3 illustrates the operation and utility of an embodiment of a private DSS. Three users (âUser Aâ 301, âUser Bâ 337 and âUser Câ 350) have agreed to share data within a private DSS. For this reason, and as will be explained further elsewhere in this disclosure, these three users have each shared with the other a copy of their decryption key, i.e. âK1â, âK2â and âK3â, respectively. Each of these keys is associated with an identifier, i.e. âID1â, âID2â and âID3â, respectively. The encryption and/or decryption keys available to the DSS client of any particular user are stored in a data structure called a âkey locker.â The key locker 307 of User A 301 is a data object within the DSS client 302 of User A 301.\n\nUser A has defined his encryption/decryption key, i.e. âK1â. Within the DSS, only User A should know the value of his encryption/decryption key. When the DSS client 302 of User A was initializing, User A entered his encryption key K1 into the client, after which the client remembered his key. During initialization, User A's DSS client retrieved from the DSS server 317 an encrypted copy of his key locker. User A's DSS client 302 then used the decryption key which User A entered, i.e. K1, to decrypt that key locker. User A's key locker, because of his prior agreement to share data with User's B and C, had already received a copy of the decryption keys of User's B and C from those other users. User A's client also adds the encryption/decryption key, K1 (308), which User A specified during the client initialization to User A's key locker 307 so that all keys needed for encryption and/or decryption were stored in a common data structure.\n\nWhen User A creates or uploads a new document, photo, video, etc. 303 in to his DSS client 302, and specifies that that file is to be shared with his two contacts, i.e. User's B and C, then that data file 303 is then encrypted by the encryption program 306 within User A's DSS client 302, using User A's encryption key, i.e. âK1â 308. After encrypting the data file 311, User A's DSS client transmits the encrypted data file 315 to the DSS server 317. The DSS server 317 then determines that the encrypted data packet 315 is to be forwarded to User's B and C.\n\nThe encrypted data packet 319 of User A is transmitted to User B 337 and is received 329 by User B's DSS client 333. That client then determines (by inspecting some unencrypted attributes associated with the data packet, such as the ID of the author or the ID of the encryption key used) that the file is to be decrypted using the decryption key associated with the identifier âID1â. The client retrieves this decryption key, i.e. âK1â 326, from the key locker 331 of the client 333. The decryption program 332 within the client 333 uses the key K1 to decrypt the file, resulting in a copy of the original, unencrypted file 335, which User B is then able to read, view and/or otherwise experience.\n\nLikewise, the client 346 of User C 350 receives a copy of the encrypted file 342 transmitted 322 by the DSS server 317. The client 346 also uses the key K1 339, which it obtains from its own key locker 344, in conjunction with its decryption program 345 to decrypt the encrypted file, resulting in a copy of the original, unencrypted file 348, which User C is then able to read, view and/or experience.\n\nUpon receipt of the encrypted data packet 315 transmitted by the client 302 of User A 301, the DSS server 317 saves a copy of that encrypted data packet within its storage device 318.\n\nUser B 337 also elects to share a file 334 with User's A and C. User B's client 333 retrieves User B's encryption key 325 from the client's key locker 331, and uses its encryption program 332 along with that key to encrypt the data file 328. The client 333 then transmits the encrypted data packet 321 to the DSS server 317. The DSS server then stores a copy of the encrypted data packet in its storage device 318 and forwards a copy of the file 314, 324 to the clients 302, 346 of Users A and C 301, 350.\n\nThe clients 302, 346 of Users A and C use their copies of User B's decryption key 309, 340, along with their decryption programs 306, 345 to produce decrypted copies 304, 349 of User B's original file, which they are then able to experience.\n\nUser C 350 also elects to share a file 337 with User's A and B. User C's client 346 retrieves User C's encryption key 338 from the client's key locker 344, and uses its encryption program 345 along with that key to encrypt the data file 341. The client 346 then transmits the encrypted data packet 323 to the DSS server 317. The DSS server then stores a copy of the encrypted data packet in its storage device 318 and forwards a copy of the file 316, 320 to the clients 302, 333 of Users A and B 301, 337.\n\nThe clients 302, 333 of Users A and B use their copies of User C's decryption key 310, 327, along with their decryption programs 306, 332 to produce decrypted copies 305, 336 of User C's original file, which they are then able to experience.\n\nThe only place where unencrypted copies of the files shared by all three users are found is within the respective clients of those users. The transmitted files, and the stored files, are all encrypted, and the DSS server does not have knowledge of, nor access to, the decryption keys required to reveal the user data concealed within those data packets.\n\nUser Interaction with the Private DSS\n\nFIG. 4 illustrates the actions and events which are typical of a user's interaction with the private DSS specified in an embodiment. User interaction begins 401 following the initialization of the DSS client on the user's computing device 101. Following initialization, the DSS client program (i.e. the âDSS_CPâ) operating on the user's computing device mediates 404 the user's interaction with the DSS server(s) by responding 404 to his interactions 402 with the DSS_CP, as well as responds 404 to messages, requests and data received 410 from the DSS server(s). For the most part, the DSS_CP performs four primary tasks: (1) it requests needed data, including encrypted user PID, from the DSS server(s) 408; (2) it decrypts encrypted (user) data received 410 from the DSS server(s) if it has access to the appropriate decryption key(s) 407; (3) it encrypts any user data 406 prior to its transmission 409 to the DSS server(s); and (4) it responds to user actions by altering its user interface and/or the data (e.g. messages from friends, photos, etc.) that it displays and/or by facilitating the user's creation and/or uploading of new content to the DSS 409. The DSS_CP continues performing these functions until the user logs out 403 of the DSS, at which point the DSS_CP ends its connection 411 to the DSS server(s). The DSS_CP may also end its operations 414 following a break in its connection 412 with the DSS server(s) and/or after losing that connection 413 for some other reason.\n\nFunctions of the DSS Client Program\n\nThe DSS client program (âDSS_CPâ) performs a number of functions important to the operation of a private DSS of the type herein. Primary functions of the DSS_CP are to: present the user with the field into which to input his encryption key and/or decryption key; decrypt encrypted user data using the user's decryption key, a system decryption key, and/or the decryption key of a âcontactâ and/or âfriend;â encrypt user content using the respective user's encryption key; request user data and/or the data of contacts and/or friends, as needed; compose various presentations of data, most notably of user data (e.g. comment history, photos, etc.); provide the user with tools to generate new content (e.g. text editor, etc.); allow the user to upload new, or newly-created, content to the DSS and/or to share new content with friends and/or contacts; and transmit encrypted versions of new user data to the DSS server(s) for storage and/or transmission to and sharing with friends and/or contacts.\n\nWith respect to the operation of a secure data-sharing community (such as an online social network) implemented with a private DSS of the type disclosed herein, the DSS_CP can execute various types of operations. These include: receiving a user's encrypted key locker from the DSS server; decrypting a user's encrypted key locker using the user's decryption key (thereby revealing, and making accessible, the decryption keys of the user's contacts and/or friends); requesting a subset of the user's encrypted data from the DSS server; requesting a subset of the encrypted data of contacts and/or friends from the DSS server; decrypting user and contact data; encrypting new or modified user content with the respective users' encryption key; transmitting encrypted user data to the DSS server; composing an appropriate user interface populated with appropriate user/friend/contact data; responding to user interactions with the user interface in an appropriate manner; facilitating a user's creation of new content; facilitating a user's uploading of new, or newly-created, content to the DSS; facilitating a user's navigation through, and examination of, the user's and/or the user's contacts' data; and facilitating a user's communication with contacts and/or friends.\n\nThe DSS_CP can also provide the functionality and execute the operational steps required to provide the user with a data archive and any of the other features and programs included within the scope herein. This can include facilitating a user's access to, examination of and/or editing of archived data, and facilitating a user's creation, uploading and storing of archival data.\n\nImportation of User's âKey Lockerâ\n\nFIG. 5 illustrates a method by which a private-DSS âkey lockerâ 508 can be imported into a DSS_CP 509 operating on a user's computing device 505. An encrypted version of a user's key locker 502 is stored within the DSS server(s) 503 and/or storage device(s) 501 (i.e. the âDSS systemâ). The user's key locker 502 is encrypted with the user's encryption key which is known only to the user and is neither stored in nor available to the DSS system 501 and 503.\n\nAfter successfully logging in to the DSS system 501 and 503, a user's DSS client program (âDSS_CPâ) 509 issues a request to the DSS server for that user's encrypted data from the DSS system. The request will typically be transmitted through the data sharing network 504, e.g. the Internet, by the network I/O subsystem 506 of the user's computing device 505. After receiving the request for user data from the DSS_CP 509, the DSS system retrieves the user's encrypted data from storage 501, including but not limited to the user's encrypted key locker 502. And, after retrieving the encrypted key locker, the DSS system sends that encrypted file to the DSS_CP by means of the data sharing network 504.\n\nAfter receiving the user's encrypted key locker 507, the DSS_CP 509 can use an appropriate set of encryption keys, including but not limited to the user's encryption key, to decrypt the user's key locker and load it into memory 508 associated with the DSS_CP. An example of this âmemoryâ is the RAM allocated to the DSS_CP when it is launched on the user's computing device.\n\nThree States of a User's Key Locker\n\nFIG. 6 illustrates the structure, and various stages of encryption, that can characterize a DSS key locker during the execution and operation of a private DSS of a type of this disclosure.\n\nA user's key locker 601 can contain a list of those encryption keys 603 and their associated key-identifiers 602 (which in an embodiment utilizing only a single decryption key per user can instead be the user-identifier) necessary to decrypt the encrypted versions of the data generated by that user's contacts. In an embodiment, a key locker contains a list in which each element in the list is a pair of data values. The first value 602 in each pair of values can be the identifier of a particular user, user contact and/or key. The second value 603 in each pair of values can be the encryption key of the user and/or key specified by the associated identifier 602.\n\nIn an embodiment, the key locker 601 exists in a âplain,â intelligible unencrypted form only within the DSS client program (âDSS_CPâ) in which the user to whom the key locker belongs has successfully logged in to the DSS system, and in to which that user has entered his correct encryption key.\n\nIn an embodiment, following the addition of one or more new contact encryption keys to a user's key locker 601 and/or the deletion of one or more contact encryption keys from a user's key locker, the DSS_CP encrypts the modified key locker with the user's encryption key 604. It can then encrypt that encrypted version of the key locker 604 with a second encryption key known only to the DSS_CP and the DSS system. This results in a doubly-encrypted version of the user's key locker 605 which neither the user nor the DSS system can decrypt without the encryption key of the other. This doubly-encrypted user key locker 605 is then transmitted to the DSS system for storage along with the user's other encrypted data (replacing the earlier, now-obsolete copy of the user's encrypted key locker).\n\nAfter a user successfully logs in to a private DSS, the DSS_CP operating on that user's computing device requests from the corresponding DSS server that some portion of the user's encrypted data, including, but not limited to, the user's key locker, be transmitted to the DSS_CP. The DSS server responds by sending the doubly-encrypted version of the user's key locker 605 to the DSS_CP. Upon receipt, the DSS_CP uses a user-unique encryption key supplied by the DSS system to the DSS_CP to decrypt the doubly-encrypted key locker, resulting in a version of the key locker 604 still obfuscated by encryption with the user's encryption key. The DSS_CP then decrypts this semi-decrypted file 604 with the encryption key that the user has entered in to the DSS_CP during the log-in process and stores the result within memory associated with the DSS_CP.\n\nA key locker can contain a list of id: key pairs in which each id is unique within the corresponding DSS and the value corresponding to each id can be an encryption key, a decryption key, or a symmetric encryption key (i.e. a key used for both encryption and the corresponding and complementary decryption). The value can also be, identify and/or specify a program, or a portion of a program, publically-known or custom, which implements a specific encryption and/or decryption algorithm, e.g. a customized âsecretâ encryption algorithm or its complementary decryption algorithm. The value can also represent some other specific means of obfuscating and/or de-obfuscating data.\n\nOne key-locker id might be used to identify an encryption key and/or algorithmic program, and another id used to identify the corresponding and complementary decryption key and/or algorithmic program.\n\nIf an embodiment uses key lockers solely to determine the means to de-obfuscate obfuscated data associated with a particular de-obfuscation identifier, then such a key locker need only specify decryption keys and/or de-obfuscation algorithmic programs. However, if an embodiment allows users to specify various distribution lists with which to control and limit the distribution and sharing of particular packets of data, and if the embodiment further allows each of those distribution lists to be associated with a unique obfuscation key and/or algorithmic program, then the key lockers associated with such an embodiment may be used to specify not only dc-obfuscation key and/or algorithmic program required to restore and/or dc-obfuscate any particular data packet, but also to specify the obfuscation key and/or algorithmic program to be utilized to obfuscate the data packets to be distributed according to any particular distribution list. Thus, such a key locker's identifiers might specify either a means of obfuscation or a means of de-obfuscation. An alternative also within the scope of this disclosure is that the key locker supports triplets of values, in which a particular identifier can be associated with both a means of obfuscation as well as a corresponding and complementary means of de-obfuscation.\n\nInteraction of the DSS Client and Server\n\nFIG. 7 is a simplified illustration of a basic data flow in a private DSS implemented in accordance with an embodiment herein. This illustration is provided as an introduction to the operation of an embodiment of a DSS herein. Actual implementations, even of an embodiment of it, can vary substantially from the steps illustrated in this figure. And, all such actual âpracticalâ embodiments of objects are included within the scope of this disclosure.\n\nWhen a user initiates the operation of a DSS client 700, the DSS client (or a login program) prompts the user to enter his username and login password 701. The DSS client (or login program) then sends the user-supplied username and password to the DSS server 702 via a data distribution network. The DSS server verifies the submitted username and password 703.\n\nIf the submitted password does not match the value stored in the DSS server with respect to the specified username, or, if no account with the specified username is found, then the DSS server rejects the login attempt 704. The DSS server transmits to the DSS client (or login program) a notice that the login failed 705. The DSS client (or login program) then again prompts the user for the input of a valid username and password 701.\n\nIf the submitted username and password are successfully validated 706, then the DSS server uploads to the user's computing device the DSS client, if it is not already in operation, replacing in the process the login program. It then transmits to the DSS client (a) the information needed to access the account specified by the submitted username; (b) any updates or components to the DSS client; and (c) the user's encrypted âkey lockerâ 707 (the file containing the decryption keys and corresponding identifiers required to decrypt the data associated with each of the user's contacts).\n\nThe DSS client prompts the user for his encryption key (and/or decryption key) 708, and, upon receipt of the user's key locker from the DSS server 707, the DSS client decrypts the user's key locker 709.\n\nAfter this process of initialization, the DSS client begins a cyclic pattern of interaction with the DSS server. The DSS client requests 711 from the DSS server 712 any encrypted data from the user and/or contacts appropriate to the context of the DSS client's user interface. Upon receipt of the encrypted user data 715, the DSS client uses the appropriate decryption key(s) to decrypt that data 716. The DSS client, for example, then makes this decrypted user data available to the user via the user interface.\n\nThe DSS client responds to any new data created and/or uploaded by the user by encrypting that data and submitting the encrypted version(s) to the DSS server for further processing. The DSS client responds to any new requests by the user for access to contact data by requesting any available encrypted contact data from the DSS server. Upon receipt of that encrypted contact data, the DSS server uses the contact's decryption key (stored in the user's key locker) to decrypt the data. When contacts of the user create, upload and/or modify any of their data, the DSS server passes that encrypted user data to the user's DSS client. And, again, the DSS client retrieves the needed decryption key(s) from the user's key locker and decrypts the encrypted contact data.\n\nWhen the user is done interacting with the DSS and logs out of the DSS client 717, the DSS client notifies the DSS server 718 and the DSS server then terminates 719 the user's session with the DSS server 720.\n\nExchange of Keys Between Two Users of Private DSS\n\nFIG. 8 illustrates a process herein by which two users, who have agreed to share their data and thereby to become âcontactsâ or âfriends,â have their decryption keys exchanged for them by their respective DSS clients.\n\nWhen âUser Aâ invites âUser Bâ to become a contact 800, in addition to issuing a formal invitation to User B, the DSS client of User A generates a complementary pair of a âpublic encryption keyâ and a âprivate decryption keyâ in accordance with a suitable public-key cryptography algorithm 801. User A's DSS client then transmits the invitation and the associated public encryption key to User B 805, via the DSS server 802, 803 and 804.\n\nUpon receipt of the invitation 805 and corresponding public encryption key, User B decides whether or not to accept User A's invitation to share data. If User B rejects the invitation, then nothing happens, or maybe User A is notified of the rejection. On the other hand, if User B accepts the invitation 806, User B's DSS client encrypts User B's decryption key (here referred to as User B's âprimaryâ decryption key meaning that in this case User B has elected to share with User A t"
    }
}