{
    "id": "wrong_mix_random_publicationDate_00076_3",
    "rank": 1,
    "data": {
        "url": "https://devblogs.microsoft.com/scripting/helpinfouri-helpuri-and-other-help-mysteries/",
        "read_more_link": "",
        "language": "en",
        "title": "HelpInfoUri, HelpUri, and other Help Mysteries",
        "top_image": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2020/10/dr_scripto.jpg",
        "meta_img": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2020/10/dr_scripto.jpg",
        "images": [
            "https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/3276.01.png",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/Share.svg",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/light-theme.png",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/dark-theme.png",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/edit-outline.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Doctor Scripto"
        ],
        "publish_date": "2013-09-19T00:01:00+00:00",
        "summary": "",
        "meta_description": "Summary: Learn about Updatabe Help in Windows PowerShell 3.0. Scripting Guy, Ed Wilson here. Today June Blender is back to tell us about Updatable Help in Windows PowerShell 3.0. Take it away, June… One of the great advances in Windows PowerShell 3.0 is Updatable Help. The advantages of updating the Help files on the box between releases are significant,",
        "meta_lang": "en",
        "meta_favicon": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/10/Microsoft-Favicon.png",
        "meta_site_name": "Scripting Blog [archived]",
        "canonical_link": "https://devblogs.microsoft.com/scripting/helpinfouri-helpuri-and-other-help-mysteries/",
        "text": "September 19th, 2013\n\nSummary: Learn about Updatabe Help in Windows PowerShell 3.0.\n\nScripting Guy, Ed Wilson here. Today June Blender is back to tell us about Updatable Help in Windows PowerShell 3.0. Take it away, June…\n\nOne of the great advances in Windows PowerShell 3.0 is Updatable Help. The advantages of updating the Help files on the box between releases are significant, far outweighing the minor hassle of running that first Update-Help or Save-Help command if the module does not include Help files. But there is still a bit of confusion associated with Updatable Help, and I’m here to explain.\n\nDoes this module support Updatable Help?\n\nSome modules support Updatable Help and others do not. Fortunately, there’s an easy way to tell which modules support Updatable Help.\n\nIf the HelpInfoUri property of a command (such as cmdlet, function, CIM command, or workflow) has a value, and the value is valid (that is, it begins with “http” or “https”), the module supports Updatable Help.\n\nPS C:\\> Get-Module -ListAvailable | where HelpInfoUri\n\nThe HelpInfoUri property of each module object comes from the HelpInfoUri key in the module manifest. Following is the module manifest of the NetQos module, and you can see the HelpInfoUri key:\n\nPS C:\\ps-test> cat (get-module -list netqos).path\n\n@{\n\nGUID = ‘743692B7-A227-4389-B082-2B47DE1D0D2D’\n\nAuthor = “Microsoft Corporation”\n\nCompanyName = “Microsoft Corporation”\n\nCopyright = “© Microsoft Corporation. All rights reserved.”\n\nModuleVersion = ‘1.0’\n\nPowerShellVersion = ‘3.0’\n\nNestedModules = @(‘MSFT_NetQosPolicy.cdxml’)\n\nFormatsToProcess = @(‘MSFT_NetQosPolicy.format.ps1xml’)\n\nTypesToProcess = @(‘MSFT_NetQosPolicy.types.ps1xml’)\n\nHelpInfoUri = “http://go.microsoft.com/fwlink/?LinkId=216150”\n\nFunctionsToExport = @(\n\n‘Get-NetQosPolicy’,\n\n‘Set-NetQosPolicy’,\n\n‘Remove-NetQosPolicy’,\n\n‘New-NetQosPolicy’)\n\n}\n\nThis command gets the manifest as a hash table, so you can get the keys as properties. The command returns the value of the HelpInfoUri key.\n\nPS C:\\ps-test>(Invoke-Expression (Get-Content (Get-Module -List NetQos).Path -Raw)).HelpInfoUri\n\nhttp://go.microsoft.com/fwlink/?LinkId=216150\n\nWhy is it called HelpInfoUri?\n\nYou might think that the Windows PowerShell team spends its lunch hours dreaming up weird property names, like HelpInfoUri, but if you know a bit about the innards of Updatable Help, this name actually makes sense.\n\nThe URI in HelpInfoUri is the address of the HelpInfo.xml file for the module’s Updatable Help files. So the value is really the URI of HelpInfo. (The Updatable Help files can be in the same location, and often are, but they can also be in a different location.)\n\nThe HelpInfo.xml file is like an old-fashioned .inf file. Remember Autorun.inf? These INFormation files store options for programs like the registry does. We use XML files for efficiency and easy parsing (see Select-XML) but the idea is the same.\n\nThe HelpInfo XML file\n\nBecause we’re picking on NetQos today (an AWESOME module), let’s look at the HelpInfo.xml file for the NetQos module. When you use Update-Help or Save-Help to download Updatable Help files, the cmdlets also download the HelpInfo XML file and save it in the module directory on your hard drive. So, we can examine the file locally:\n\nPS C:\\ps-test> Get-Content C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\NetQos\\NetQos\n\n_743692b7-a227-4389-b082-2b47de1d0d2d_HelpInfo.xml\n\n<?xml version=”1.0″ encoding=”utf-8″?>\n\n<HelpInfo xmlns=”http://schemas.microsoft.com/powershell/help/2010/05″>\n\n<HelpContentURI>http://go.microsoft.com/fwlink/?LinkId=216150</HelpContentURI>\n\n<SupportedUICultures>\n\n<UICulture>\n\n<UICultureName>en-US</UICultureName>\n\n<UICultureVersion>3.0.0.0</UICultureVersion>\n\n</UICulture>\n\n</SupportedUICultures>\n\n</HelpInfo>\n\nThe HelpInfo XML file has an element for each supported UI culture. Each SupportedUICulture element contains the HelpContentUri, which is the URI of the Updatable Help CAB file. If the HelpInfo XML file and the CAB file are in the same place, the HelpContentUri value is same as the HelpInfoUri value. The SupportedUICulture element also contains information for each UI culture, including the version number of the Help files.\n\nThe Update-Help and Save-Help cmdlets use the version number in the HelpInfo XML file to determine whether you have the latest Help files on your machine. Otherwise, the cmdlets download and install the latest version.\n\nWhy can’t I read Help at the HelpInfoUri location?\n\nI bet everyone who’s played with Windows PowerShell Updatable Help has tried a variation of this command, which opens your default Internet browser to the location that is specified by the HelpInfoUri value:\n\nPS C:\\> $u = (Get-Module -List NetQos).HelpInfoUri\n\nPS C:\\> (new-object -com shell.application).Open($u)\n\nOr you might have pasted the URI in your browser address bar. And you expected to see the Help topics for the module, or some interesting content. But there was nothing there except a file.\n\nIn the location where Windows stores Updatable Help files, there are no HTML files to display content. There are just the lowly CAB files, which are very valuable, but don’t create an UI.\n\nIf you try the same trick with the HelpUri property of a cmdlet, the result is much better.\n\nPS C:\\> $u = (Get-Command Get-History).HelpUri\n\nPS C:\\> (New-Object -Com Shell.Application).Open($u)\n\nOr, better yet:\n\nPS C:\\> Get-Help Get-History -Online\n\nWhat is HelpUri?\n\nNow that we know about the HelpInfoUri property of modules, what is the HelpUri property of commands?\n\nThe URI in the value of the HelpUri property is the online location of the Help topic for the command:\n\nPS C:\\ps-test> (Get-Command Get-History).HelpUri\n\nhttp://go.microsoft.com/fwlink/?LinkID=113317\n\nThe Online parameter of Get-Help uses the HelpUri (among other things) to find the online Help topic. It can be overridden, but it’s the best guess for the URI at the time that the command is written.\n\nThe value of the HelpUri comes from the command script. In cmdlets, HelpUri is a named parameter of the Cmdlet attribute:\n\n[Cmdlet(VerbsCommon.Get, “History”, HelpUri = “http://go.microsoft.com/fwlink/?LinkID=001122”)]\n\nIn functions, HelpUri is a parameter of the CmdletBinding attribute:\n\nfunction New-Calendar {\n\n[CmdletBinding(SupportsShouldProcess=$true,\n\nHelpURI=”http://go.microsoft.com/fwlink/?LinkID=01122″)]\n\nYou can also specify a HelpUri property value in CIM commands and workflows. For the details, see Supporting Online Help in the Windows PowerShell SDK.\n\nNow, about the “it can be overridden” part. When a Help topic for the command is installed on the computer, and the first related link in the Help topic is a valid URL, the first related link URL takes precedence over the HelpUri value of the command. That is, the Online parameter of Get-Help uses the first related link if it’s a URL. And if it’s not, it uses the value of the HelpUri property of the command.\n\nWhy? In Windows PowerShell 3.0, the HelpUri property value of a command comes from the HelpUri attribute in the cmdlet code. But, in Windows PowerShell 2.0, the HelpUri property value came from the first related link in the Help topic, if that link included a URL.\n\nWhen we developed Updatable Help, we wanted online Help to work even when the Help files were not installed on the local machine—so we couldn’t rely on a value in a local Help file. That’s when we added the HelpUri attribute to the cmdlet (and function, CIM command, and workflow) script.\n\nBut, we maintained the first related link source for backward compatibility and to provide a way to change the online Help topic location without changing the cmdlet.\n\nHere’s the relevant section from the Get-History Help topic:\n\nRelated Links\n\nOnline Version: http://go.microsoft.com/fwlink/?LinkID=113317\n\nAdd-History\n\nClear-History\n\nInvoke-History\n\nabout_History\n\nAnd here’s the XML for the first related link:\n\n<maml:relatedLinks>\n\n<maml:navigationLink>\n\n<maml:linkText>Online Version:</maml:linkText>\n\n<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113317</maml:uri>\n\n</maml:navigationLink>\n\n</maml:relatedLinks>\n\n…and other Help mysteries\n\nThe Help system in Windows PowerShell is not simple. In fact, it’s quite revolutionary. And you can use every feature of the Help system to make the modules and commands that you write really easy for users to use.\n\nIf you have question about the Updatable Help system, or any other aspect of Windows PowerShell, please reply in the Feedback section at the bottom of this page or tweet me a question at @juneb_get_help, and I’ll answer them in a follow-up blog post.\n\nIf you are confused about URIs, URLs, URNs, and other URs, see this great blog post by Windows Azure Active Directory PM, Vittorio Bertocci. It’s the best one I’ve seen: URL, URN, URI: Oh My!\n\n~June\n\nThank you, June.\n\nI invite you to follow me on Twitter and Facebook. If you have any questions, send email to me at scripter@microsoft.com, or post your questions on the Official Scripting Guys Forum. See you tomorrow. Until then, peace."
    }
}