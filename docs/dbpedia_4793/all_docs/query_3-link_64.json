{
    "id": "dbpedia_4793_3",
    "rank": 64,
    "data": {
        "url": "https://swizec.com/blog/you-can-t-stop-the-business-or-why-rewrites-fail/",
        "read_more_link": "",
        "language": "en",
        "title": "You can't stop the business, or why rewrites fail",
        "top_image": "https://swizec.com/social-cards/you-cant-stop-the-business-or-why-rewrites-fail.png",
        "meta_img": "https://swizec.com/social-cards/you-cant-stop-the-business-or-why-rewrites-fail.png",
        "images": [
            "https://swizec.com/static/49b03d61b7348ccaa62e58389b04f057/d0275/SeniorMindset-cover-3d.png",
            "https://swizec.com/static/49b03d61b7348ccaa62e58389b04f057/d0275/SeniorMindset-cover-3d.png",
            "https://swizec.com/static/a42ad12cb4944fe3dd8736a37b13c0cc/4ef49/Stop-the-world-rewrite-old-software-stops-evolving-gets-slowly-worse-rewrite-starts-from-scratch1hdfjj.png",
            "https://swizec.com/static/0da95fdf5e4cfb44bff41f7809ce6e88/4ef49/The-control-flow-I-was-facing-lots-of-small-reusable-functions-with-poor-domain-modeling64ih8b.png",
            "https://swizec.com/static/2b0c5152f71a96c91e41654ffac8f333/7f80b/New-next-to-old-rewrite-old-software-keeps-evolving-rewrite-tries-to-catch-upje1f99.jpg",
            "https://swizec.com/static/49b03d61b7348ccaa62e58389b04f057/d0275/SeniorMindset-cover-3d.png",
            "https://swizec.com/static/49b03d61b7348ccaa62e58389b04f057/d0275/SeniorMindset-cover-3d.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Rewriting code isn't a magic fix-all. Consider the opportunity cost, complexity of the old system, and estimation challenges. Instead of stopping all to rewrite or building new while maintaining the old, try incremental improvements and new code adoption.",
        "meta_lang": "en",
        "meta_favicon": "/icon.png",
        "meta_site_name": "",
        "canonical_link": "https://swizec.com/blog/you-can-t-stop-the-business-or-why-rewrites-fail",
        "text": "ðŸ‘‹ here's an excerpt from the Manning book I'm writing that I think you'll like.\n\nIn his famous Things You Should Never Do essay, Joel Spolsky says never to attempt a rewrite. It cannot succeed and you're throwing away lessons learned. Lessons you'll need to re-learn again.\n\nBut research and experience show that you can't fix the wrong abstraction â€“ you have to rewrite the code to fit new reality.\n\nI think we're talking about different definitions of \"rewrite\". Joel is talking about the types of rewrites engineers first think of when they hear \"rewrite\":\n\nStop the world and rewrite\n\nBuild a new system next to the old\n\nThese sound clean and tidy. The old and the new system stay neatly separated while you work. But that almost never works.\n\nThe culprit is opportunity cost. These sorts of rewrites tend to runaway in scope.\n\nYou can't stop the world and rewrite\n\nWhen Christopher's team started work on rewriting the systems of the world's largest furniture manufacturer, they understood the challenge: Big system, lots of code, decades old.\n\nJust knowing the full scope of what you're building can be difficult in a system like that. The team wanted to mitigate risk by delivering incremental improvements and adopting new code piece by piece.\n\nBut the business side was not ready. They couldn't work in a half new half old way. The whole migration would have to come down to pressing the big red button when everything's ready.\n\nThey never pressed the button.\n\nAfter 2 years, the business decided that switching was too risky and scrapped the project. Now Christopher's team had to go back and retrofit 2 years worth of improvements to the old system. Because it lay there neglected while they were busy building the new world.\n\nThis is a painful story, but not uncommon. A lot can go wrong when you stop the world.\n\nStopping creates risk\n\nI was once asked to fix a company's billing system.\n\n5 years of legacy business models started to stack up and bad code was slowing us down. Business had a new experiment to try and we ... couldn't. There was no way to make it work.\n\nNobody understood how the system works â€“ too many cooks over too many years. We knew roughly where the code was, which tables held the data, and that was it.\n\nMy charge was to:\n\nmake the code support our new business model,\n\nkill old business models,\n\nsupport some not too old models,\n\nallow everyone to migrate to the new model during a grace period where old models keep working\n\nYou know, the \"make this impossible but also possible\" ask that businesses love to make. I estimated 2 weeks of work and got to cleaning.\n\nYou can't estimate accurately\n\nOur 2 week estimate was based on assumptions we hoped were true. A proper estimate would mean digging into the code so much you may as well do the work.\n\nNaturally, the system was even worse than we feared. Spaghetti code barely begins to describe it. Control flow bounced from function to function, module to module, with zero rhyme or reason. A masterpiece produced by years of \"Oh I'll just add this quick special case right here\".\n\nProjects like this are plagued by known and unknown unknowns. There is no way to know what you'll find without doing an extensive roadmapping project ahead of time. But that may take longer than the business is willing to spend.\n\n\"Can I spend a week estimating how long fixing this code will take?\" is a tough ask. It takes an experienced engineering leader to say yes.\n\nMaking a guess and adjusting as you learn more is usually the best you can do.\n\nAnd now you're stuck\n\n6 weeks into my 2 week estimate the billing system was a mess. The original code limped along, the window of opportunity to try our new business model was all but gone, and my long-lived branch was full of bugs and half-written code.\n\nWhen stakeholders asked what's going on it was like that scene from Malcolm in the Middle â€“ Lois finds Hal in the garage under the car covered in grease and says \"Hal can you fix the lightbulb?\". Hal rolls out and shouts, annoyed, \"What does it look like I'm doing!?\"\n\nWe were stuck past the point of no return. Couldn't make changes to the old code because they'll be gone soon, couldn't use the new code because it wasn't ready.\n\nEventually we negotiated some complexity, supported fewer old business models, and completed the rewrite. Then spent 2 months fixing bugs and re-adding old lessons.\n\nYou can't build a new system next to the old\n\nNobody likes to feel stuck during a hard-to-estimate rewrite. You try a different approach next time â€“ split the team. One team works on the fresh rewrite, the other maintains existing code.\n\nSounds great:\n\nbugs keep getting fixed\n\nproduct keeps adding features and running experiments\n\nthe rewrite team can focus\n\nBut the exact problem you're avoiding is now the biggest risk for your rewrite: The target is running away!\n\nThe only way you'll ever catch up is, if you code even faster. A little bit of slope beats a lot of y-intercept, yes, but how much slope does the maintenance team have?\n\nIf the old code has 104 weeks worth of features, and the maintenance team works on fixes and additions for 1 day per week ... you'll need 130 weeks to catch up. That's almost 3 years ðŸ¥²\n\nTo catch up faster, you'll have to do more than a week's worth of work per week. You can save a few weeks by avoiding old mistakes. And you totally won't make any new mistakes, right?\n\nThe same old challenges remain:\n\nknown and unknown unknowns\n\nnobody understands the old code\n\nuse-cases you forgot existed\n\nLike when we set out to rewrite that login page in React and discovered that there's two login flows â€“ email and sms. The estimate ballooned every time we looked at the code. ðŸ˜…\n\nThe biggest challenge with chasing a moving target is that the old code continues to kick the can. As other teams find new use-cases and uncover bugs, you have to build those twice â€“ once in the old code, once in the new code.\n\nMeanwhile your new code is not kicking the can because it sits there unused until it's ready. Imagine all the bugs and missed use-cases you'll find when it ships ..."
    }
}