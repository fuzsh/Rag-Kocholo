{
    "id": "dbpedia_4793_3",
    "rank": 17,
    "data": {
        "url": "https://workplace.stackexchange.com/questions/139764/how-do-i-explain-that-i-dont-want-to-maintain-old-projects",
        "read_more_link": "",
        "language": "en",
        "title": "How do I explain that I don't want to maintain old projects?",
        "top_image": "https://cdn.sstatic.net/Sites/workplace/Img/apple-touch-icon@2.png?v=d39b333f5c58",
        "meta_img": "https://cdn.sstatic.net/Sites/workplace/Img/apple-touch-icon@2.png?v=d39b333f5c58",
        "images": [
            "https://cdn.sstatic.net/Sites/workplace/Img/logo.svg?v=db0d16da145e",
            "https://lh4.googleusercontent.com/-ySaMNxA5g3Q/AAAAAAAAAAI/AAAAAAAAACw/Gw0IplatRM0/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/dd43281b96b59cc394874e17a91c9931?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/bZnyC8zU.jpg?s=64",
            "https://www.gravatar.com/avatar/d61d9f03b4a218fd8d3473caf35d25e2?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/b557ebdf54e104f505c0b86a7c5dc877?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/ac277f6f12e623b0a942cf11d31235ff?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/f2e09e22447891655d2910620720594f?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/efb324daddc3ad22736171ba863234d8?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Gg9TK.png?s=64",
            "https://i.sstatic.net/vPzRc.png?s=64",
            "https://www.gravatar.com/avatar/b5c4cdd6d66e483a8241811a46205967?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/1ae897c8666a2d1b13bf9da38b4de712?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a1dea1209ebf27edf4244bbef686d366?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/1538889179718017/picture?type=large",
            "https://i.sstatic.net/b6aMa.png?s=64",
            "https://www.gravatar.com/avatar/5aa5263454ebce9dc0b2b885a6928fe8?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/4d98e414a47934d66cb78bf73d0845ba?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Ek3wF.jpg?s=64",
            "https://www.gravatar.com/avatar/d1d83edc075b3af5eed849e09559d99a?s=64&d=identicon&r=PG",
            "https://lh5.googleusercontent.com/-cB6Rx5iWId4/AAAAAAAAAAI/AAAAAAAAAbI/fajuiJgGPFo/photo.jpg?sz=64",
            "https://workplace.stackexchange.com/posts/139764/ivc/f19c?prg=7162f988-2133-4627-9fb6-2fbd9d8c9565"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2019-07-05T09:44:51",
        "summary": "",
        "meta_description": "I am currently working as a programmer with 3 years of experience in the Netherlands. At the start I worked at some projects I started from scratch and I really enjoyed those. I also acted a bit as",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/workplace/Img/favicon.ico?v=c1d16a1d2c25",
        "meta_site_name": "The Workplace Stack Exchange",
        "canonical_link": "https://workplace.stackexchange.com/questions/139764/how-do-i-explain-that-i-dont-want-to-maintain-old-projects",
        "text": "Unfortunately maintenance is the rule when working in IT, very rarely are there new projects, and people get reassigned around projects regularly. And while the quality of the code you will have to maintain in your professional life will vary widely, they will never smell the same as a fresh 2-6 month old project.\n\nHowever, there are things you can do to maybe make your life and future a bit more livable. I'd start with mentally breaking down the current project into modules, and then asking for permission to refactor, or rewrite those, one at a time, in accordance with more stringent coding standards. Make sure to write plenty of tests around anything you write, or improve.\n\nThis should see your work life improving slowly and steadily, as this approach will get your more familiar with the application, improve the readability of parts of it, and make bugs less common.\n\nHow to sell this to the owner/leader/boss will vary widely depending on the corporate structure and personalities involved. But if this really is unbearable for you, and you get no power to improve things, then finding a different kind of job might be for the better.\n\nIn general it seems like consultants will in general work on more recent code, and they do have more flexibility in being moved from one project to another, or to focus primarily on new(ish) applications.\n\nHowever, legacy code will always be a part of your chosen profession, and you are going to have to learn to get along with it, and live with that fact.\n\nYes it is reasonable to tell your manager you are not enjoying your work and to ask for something fun.\n\nIt is also reasonable for that manager to ask you to stick it out. There is a job that needs to be done and the job can't be all fun all the time.\n\nA good manager will realize that they are burning your usefulness and willingness to work for them and will try to arrange for you to spend some time on different projects but this is no guarantee! If you are the only developer who can do this job you just might be stuck there.\n\nTo help this course of action it is a good idea to prepare some thing that you would like to spend your time on: those projects you started, maybe some other project or even a course to improve your skills. This will help turn a request into a Plan.\n\nA bad manager will resent you because \"he complains about stupid things\", this is unreasonable but you wouldn't be the first to receive pushback.\n\nTo prevent this, have a concrete list of things that make the job Not Fun: stupid bugs, repeat tickets, un-commented code. This turns a complaint into Feedback and will make your questions sound more reasonable.\n\nYou can always ask, but they can always say no, too.\n\nUnless you have it in your contract that you will only work on projects you like, they can put you on projects as they see fit.\n\nYou could document the changes you would want to make (refactoring, writing documentation, ...) and the benefits for the company in terms of time gained through less bugs.\n\nOr you could argue for a new development of the product with better practises. But as long as the old project has paying users somebody has to maintain it and they chose you Pikachu.\n\nYou could argue to get more people to do what you are doing (Bus-factor) so that you can work on other projects as well. If these become more important than the legacy project those might become an out.\n\nBut again: As long as there are people paying your firm and in extension paying your bosses wages for this project, and your firm isn't inclined to give this up, somebody will have to fix the bugs.\n\nYou could quit and work as a freelancer as a last resort. There you can really pick the projects you are working on but be prepared to have to do some projects you don't really like to keep the lights on. Only the best and best-known can cherrypick what they do completely.\n\nLegacy maintenance builds the developer's desire for good practice\n\nI just want to add the perspective of a lead developer, because as a developer I agree with not wanting to maintain legacy code, but as a lead developer I do not advocate for any developer avoiding it.\n\nI'll use a practical example to make my case. As a consultant, I am often sent into a company/project with code quality issues, where my job is to make things right. As you would suspect, bad code leads to a lot of legacy maintenance.\n\nIt has been my predominant experience that developers who write bad code are in one of two camps:\n\nThose who didn't know any better\n\nThose who think they are doing the right thing\n\nThe former group is easy to deal with, as they will immediately improve when you show them good practice. The latter group, however, is much harder to convince as they do not see the benefit of good practice, which often takes more effort in the short term. It pays back dividends in the long run, but the latter group often misses that point.\n\nAlmost every developer I've dealt with who was in the latter camp were developers who managed to jump from project to project skipping the maintenance of their own code. Because they were never faced with the fallout from their imperfect design decisions, they were never incentivized to try and avoid these problems from occurring before they happened, when the application was initially being built.\n\nThe solution is simple: developers must take ownership. If you write buggy code, you will deal with the bugs that ensue. If you don't want to spend your time fixing bugs, then it's up to you to write code that does not produce them.\n\nThis creates a very simple incentive for developers to improve themselves, as opposed to being pushed into it against their will and without their understanding of why it is the better approach.\n\nWhat I want you to take away from this is that legacy maintenance is essential for developers to remember why they need good practice.\n\nAs an analogy, a general who is in the trenches with his men will make better decisions (for the soldiers) than a general who is sitting comfortably in a palace on the other side of the country. A developer needs to get their hands dirty so that when they are the general (= building the new application) they know what the impact of their design decisions are.\n\nCleaning up after others\n\nYou, however, are not faced with your own bugs, but rather those of the people that came before you. I am currently in the same boat, and I do agree with you that this is not a tenable situation.\n\nNobody likes legacy maintenance, and it would appear that your manager has not taken into consideration how you solely doing legacy maintenance is both impacting your morale and your personal career development.\n\nI spent 3 years doing legacy maintenance, but it was a cushy job with an very loose working from home policy. It took me a while to understand that while the work/life balance was not bad, my career was stalling because I was not gaining topical knowledge to the industry. If I had been fired from that job after 5 years, my skillset would be so outdated for other companies that I'd have to scramble to make up for lost time.\n\nOn the other hand, someone has to support this project. So you can't just take a \"not me\" approach, because every developer will tout the same \"not me\" approach and then management is liable to just appoint someone to have drawn the short straw (this may be how you ended up in this position to begin with).\n\nAddressing the issue\n\nApproach your manager and explain to him that while you understand that the legacy project requires support, it is a drain on morale when you do nothing but deal with the old code. Ask if your manager would consider assigning you to a different (non-legacy) project part time.\n\nIn my experience, most reasonable managers will understand this (you were probably assigned to this because the other 5 developers who left all argued the same point) and will see the benefit of keep you (someone who already knows the legacy project) on the project part time, as opposed to having you leave and needing to find a new developer who doesn't know the legacy project.\n\nBut in my same experience, there are also companies where employee morale is considerably lower on the list of priorities, where they employ a more rigorous \"you do what we tell you to do\" approach.\n\nThe only advice I can give here is to leave such a toxic environment. Don't let your career waste away working a job you hate for a company who doesn't value your work satisfaction (to a reasonable degree).\n\nPut yourself in the other shoes You know your manager, he listen to his team? Is a reasonable manager? Try to satisfy developers needs? Is communicative? This is very important, your manager has a role...get the job done, present results. And for that, someone has to take care of the legacy project.\n\nDoes he has another replacement?\n\nDoes he has another project more attractive to your preferences that give you motivation, maybe a 50% of your time?.\n\nCan he give you green light to recreate some part of the project?\n\nYou don't know for certain.... so, yes, you have to talk to him. Not in a demanding way, no if you like the workplace. But you have to talk to him about your discomfort, because employees leaving is not a good result either, ... no company/manager get benefit for a developer resign. And you are not asking him more money, or less hours, or telecommute, or something that interfere with the company policies/resources. It's something about trying reorganize allocations of the team, it´s more 'doable'. And you are not getting fired for let him know about a discomfort. But the only one that can help to resolve your discomfort is him, if you want to stay there of course.\n\nAsk him for a short private meeting.\n\nBe relax, no angry emotions, no demanding tones.\n\nThis is a conversation with a team member that can help you find a solution to a discomfort.\n\nEven if he does nothing for you, and nothing can be done. It´s not in your hands, you did what you could to be moved. Because if you say nothing and find a new job, in the moment you say to him, the first thing is going to tell you is 'I didn't now you felt this way, we could try to work this out'. When you leave a company for money, you ask a rise first, this is the same, before start to look for jobs, let them a chance to find a solution where both interests get satisfied. Think in a way that you get motivation at the same time you provide value to the team/client\n\nThere's a good chance you might benefit from hearing my story, so here goes.\n\nI was hired at my company to work on one particular project (partly because I was the only guy they interviewed that knew electronics at all, but that ended up being largely irrelevant). On having worked on it for about six months I came to the conclusion the architecture was a total loss despite the codebase being only a year and a half old at that point. I thought at the time I was looking at a three year old codebase and the company had a history of bad source control practices. In fact their source control use was kinda ok (it got better) and the product was made by big bang production.\n\nI reported by analogy the foundation was cracked and the ground was unstable. In fact a total rewrite was required but it could not be afforded at that time and I knew it. We agreed by analogy that as it became necessary I would ram I-beams through the foundation to serve as pylons. Over the next decade as things broke or became unsustainable or the profiler located hotspots I replaced almost all the original architecture, to the point were now only a couple dozen lines remain. But now the I-beams themselves have cracked and been braced and the house-become-skycraper is showing its age and again become hard to work on and I dread teaching new programmers all that is required to add new tables to the database as no good examples remain. Every explanation for how things work has become a history lesson now.\n\nI don't work on the product much anymore, but whenever a change needs to be made that breaks the rules of the architecture, I do it, not because only I can do it, but because I know essentially all the rules in my head and therefore can pick the way easiest to maintain the consequences thereof.\n\nBut only now do I have the experience to do actually to it right and design an architecture that can actually be maintained for twenty years or more. Some of the problems are bad decisions of the original architecture where I replaced the implementation with a work-nearly-alike retaining many of the same decisions. Some of the problems are my own bad decisions. And the industry has changed and we want to replace the fat-client architecture with a web architecture. You know what, now's the time. I don't have the full set of skills for a web architecture but I've got most of them and I know where to turn for the rest.\n\nThe choice really has to be yours, but you may have here the place to run I-beams through the foundation. If you choose to do so, you're gonna learn and become strong.\n\nMake sure you know yourself before doing anything drastic\n\nThree years is still pretty junior, so I wouldn't do anything drastic like changing jobs or careers until you've made sure you know what it is about maintaining legacy code that you don't like. For example, it's possible that you need to learn a new tool or technique, and that you can actually learn to like maintaining legacy code. If you have a mentor, this would be a good thing to discuss with them. If you don't have a mentor, you should try to find one.\n\nUnhappy = poor performance = career hit = time to change\n\nOnce you're sure it's not you, it's the job, then realize that you will only do your best work if you're happy, or at least satisfied with your job. If you are actively unhappy or hate your job, it's going to show in your work. This will hurt your career in the long run. So you're not doing yourself any favors staying in a situation that actively makes you unhappy (sometimes we don't have any choice, but if you do, and most of the time we do, then you need to make a change).\n\nWhat should you do?\n\nTell your boss your preferences, and if your boss can't or won't honor them in a reasonable time frame, find a job that can and will. Note that almost no job (including if you're your own boss) will meet your preferences 100% of the time; that's just life. But a good fit is one that is acceptable to you and mixes tasks that you like with some tasks that you can at least tolerate. But if you find yourself hating your job, it's time for a change.\n\nOne last thing\n\nIf you're working long hours or working weekends without adequate breaks, then you could be experiencing burnout, which can make even the most pleasant tasks feel like chores and boring tasks feel unbearable. So part of taking stock of your situation includes making sure that your hatred for your job is really coming from the work and not from burnout-induced stress. If the problem turns out to be burnout, it needs to be addressed differently than if it is simply not liking your job."
    }
}