{
    "id": "dbpedia_1830_2",
    "rank": 85,
    "data": {
        "url": "https://github.com/Appboy/appboy-ios-sdk/blob/master/CHANGELOG.md",
        "read_more_link": "",
        "language": "en",
        "title": "appboy-ios-sdk/CHANGELOG.md at master · Appboy/appboy-ios-sdk",
        "top_image": "https://opengraph.githubassets.com/e121dc610aa716622486cf8bf50a698ba9b70a06d284af88eedc767d6cc9d0e9/Appboy/appboy-ios-sdk",
        "meta_img": "https://opengraph.githubassets.com/e121dc610aa716622486cf8bf50a698ba9b70a06d284af88eedc767d6cc9d0e9/Appboy/appboy-ios-sdk",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Public repo for the Braze iOS SDK. Contribute to Appboy/appboy-ios-sdk development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/Appboy/appboy-ios-sdk/blob/master/CHANGELOG.md",
        "text": "⚠️ The New Braze Swift SDK is now available!\n\n4.7.0\n\nUpdates the minimum required version of SDWebImage from 5.8.2 to 5.18.7.\n\nThis version includes the privacy manifest for SDWebImage, which appears on the privacy-impacting SDKs list.\n\nAdds the privacy manifest to describe data usage collected by Braze. For more details, refer to the Apple documentation on privacy manifests.\n\nAdds code signatures to all XCFrameworks in the Braze iOS SDK, signed by Braze, Inc..\n\nFixes an issue in Full or Modal in-app messages where the header text would be duplicated in place of the body text under certain conditions.\n\n4.6.0\n\nThis release requires Xcode 14.x.\n\nDrops support for iOS 9 and iOS 10.\n\nRemoves support for the outdated .framework assets when importing via Carthage in favor of the modern .xcframework assets.\n\nUse the command carthage update --use-xcframeworks to import the appropriate Braze asset.\n\nRemoves support for appboy_ios_sdk_full.json in favor of using appboy_ios_sdk.json by including these lines in your Cartfile:\n\nbinary \"https://raw.githubusercontent.com/Appboy/appboy-ios-sdk/master/appboy_ios_sdk.json\" github \"SDWebImage/SDWebImage\"\n\nImproves resilience when triggering in-app messages with date property filters.\n\nAdds a new option ABKReenqueueInAppMessage to enum ABKInAppMessageDisplayChoice.\n\nReturn this option in beforeInAppMessageDisplayed: of an ABKInAppMessageControllerDelegate to ensure that an in-app message is not displayed and becomes eligible to trigger again.\n\nThis option will reset any trigger times and re-eligibility rules as if it was never triggered. It will not add the message to the in-app message stack.\n\n4.5.4\n\nImproves reliability of custom event property type validation.\n\nFixes an issue where the status bar would not restore to its original state after a full in-app message was dismissed.\n\n4.5.3\n\nFixes a crash that occurs when receiving custom event properties of numeric types under certain conditions.\n\nFixes UI responsiveness warnings when requesting location authorization status.\n\n4.5.2\n\nImproves reliability when validating trigger properties.\n\nImproves the NSURLSessionConfiguration disk and memory cache capacities for file downloads. This change enables larger file downloads to be cached if needed.\n\n4.5.1\n\nImproves eligibility checks around the minimum trigger timeout for in-app messages by now checking at trigger time in addition to display time.\n\nFixes an issue where purchases would not trigger certain templated in-app messages.\n\nAdds the delegate method noMatchingTriggerForEvent:name: to ABKInAppMessageControllerDelegate, which is called if no Braze in-app message was triggered for a given event.\n\n4.5.0\n\nAdds support for Content Cards to evaluate Retry-After headers.\n\n4.4.4\n\nCalling appboyBridge.closeMessage() or brazeBridge.closeMessage() from an HTML in-app message now correctly triggers ABKInAppMessageUIDelegate.onInAppMessageDismissed: when implemented.\n\nFixes an issue in 4.4.3 where the tvOS SDK incorrectly referenced an older SDK version.\n\n4.4.3\n\nFixes an issue introduced in 4.4.0 which prevented custom events or purchases with an empty dictionary of properties from being logged.\n\nImproves handling of ABKInAppMessageWindow's dismissal to promptly remove it from the view hierarchy.\n\nFixes the position of the pinned indicator for Captioned Image Content Cards when using the default UI.\n\nFixes an issue introduced in 4.3.2 and limited to users of Appboy-tvOS-SDK, which prevented custom events with properties or purchases with properties from being logged.\n\nAdds a padding property to ABKCaptionedImageContentCardCell to support modifying the default value.\n\n4.4.2\n\nFixes a bug for HTML in-app messages using the HTML Upload with Preview option to improve the reliability of in-app message display.\n\nFixes a bug preventing integration via Swift Package Manager in specific contexts.\n\nFixes an issue in the default Content Cards UI where the empty feed label was truncated if it was too large for the screen, for example due to accessibility or localization.\n\nFixes an issue where Slideup in-app messages would be automatically dismissed after multiple interaction with the app's main window.\n\nIf changeUser:sdkAuthSignature: is called with the current user's ID, but with a new and valid SDK Authentication signature, the new signature will be used.\n\nImproves push tracking accuracy for apps making use of UISceneDelegate (UIKit) or Scene (SwiftUI).\n\n4.4.1\n\nFixes an issue in which input elements with type=\"date\" in HTML in-app messages do not respond to some user interactions on iOS 14 and iOS 15.\n\nFixes ABKSdkMetadata availability when using the dynamic variant of the SDK.\n\nFixes an issue in which the default content cards UI's empty feed label does not wrap properly when the device is using Larger Accessibility Sizes for its text size.\n\nChanged ABKInAppMessageUIDelegate.inAppMessageViewControllerWithInAppMessage: to accept a nil return value.\n\nAdds support for the playsinline attribute on HTML <video> elements within webpages that are opened in the app by Braze.\n\nAdds XCFramework support for the Core integration via Carthage. Please follow the Carthage migration guide when transitioning to the new artifact.\n\n4.4.0\n\nAdds XCFramework support to Carthage. This allows projects integrated via Carthage to support Apple Silicon simulators and Mac Catalyst.\n\nWhen migrating from the original .framework to the new .xcframework, follow the official Carthage migration guide.\n\nFor those using the Full integration, use the following lines in your Cartfile. Note that it references the file appboy_ios_sdk.json:\n\nbinary \"https://raw.githubusercontent.com/Appboy/appboy-ios-sdk/master/appboy_ios_sdk.json\" github \"SDWebImage/SDWebImage\"\n\nTo continue using the original Full .framework file, include the Cartfile lines above but reference appboy_ios_sdk_full.json. Then, run carthage update.\n\nFor those using the Thin integration, use the same Cartfile above but exclude the line with SDWebImage.\n\nThe Core integration does not support XCFrameworks, and you can use the original .framework files as before.\n\nAdds a new attachment to the release called Appboy_iOS_SDK.xcframework.zip.\n\nThis artifact has the all-in-one XCFramework containing the full SDK code including all of the assets.\n\nWhen importing this code manually, drag-and-drop the XCFramework into your project and select Embed & Sign. Then, add -ObjC under Build Settings > Other Linker Flags in your app's target.\n\nAdds localization support for the close button's accessibility label in modal and full in-app messages.\n\nAdds the ability to set the SDK's log level at runtime by setting ABKLogLevelKey to an integer in appboyOptions. Descriptions of the available log levels can be found here.\n\nAdds Appboy.addSdkMetadata: to allow self reporting of SDK Metadata fields via the ABKSdkMetadata enum.\n\n4.3.4\n\nThis release requires Xcode 13.\n\nFixes an issue in which the pinned indicator for a Banner Content Card would not display in the default Content Cards UI.\n\nFixes an issue which prevented custom events and purchases with properties larger than 50 KB to be properly discarded.\n\n4.3.3\n\nFixes a race-condition occasionally preventing HTML in-app messages with assets from being displayed from a test push.\n\nFixes an issue which prevented HTML in-app messages from opening sms:, mailto:, tel:, facetime: and facetime-audio: urls.\n\nPreviously, those urls would fail to open silently.\n\nFixes an issue where ABKContentCardsTableViewController was not displaying the \"no update\" label after the last card was deleted from the feed.\n\nAdds methods addToSubscriptionGroupWithGroupId: and removeFromSubscriptionGroupWithGroupId: to ABKUser to manage SMS/Email Subscription Groups.\n\nAlso adds appboyBridge.getUser().addToSubscriptionGroup(groupId) and appboyBridge.getUser().removeFromSubscriptionGroup(groupId) to the javascript interface for HTML in-app messages.\n\n4.3.2\n\nIframes embedded in an HTML in-app message are now displayed as part of the same in-app message. Previously, iframes would be loaded in a separate webview.\n\nAdds support for navigation bar transparency changes introduced in iOS 15. Apps using Braze default UIs for Content Cards, the News Feed, and the modal WebView should upgrade to this version as soon as possible ahead of iOS 15's release.\n\n4.3.1\n\nThe sdkAuthenticationDelegate now works as expected when setting the property directly.\n\nVoiceOver no longer reads content beneath the displayed in-app message.\n\nThe number of unviewed Content Cards in ABKContentCardsController's unviewedContentCardCount now excludes control cards.\n\nThe default Content Cards UI now allows swipe-to-refresh gestures when empty.\n\nDeprecates ABKInAppMessageController's method displayNextInAppMessageWithDelegate: in favor of displayNextInAppMessage.\n\nCustom events and purchases now support nested properties.\n\nIn addition to integers, floats, booleans, dates, or strings, a JSON object can be provided containing dictionaries of arrays or nested dictionaries. All properties combined can be up to 50 KB in total length.\n\n4.3.0\n\nRefined Content Cards UI public api changes introduced in 4.2.0.\n\nFixes an issue introduced in 4.2.0 that caused Content Card type ABKClassicImageContentCardCell to crash on display when not using Storyboard.\n\n4.2.0\n\n⚠️ Known Issues\n\nThis release contains a known issue with the Content Cards default UI on iOS, where showing a \"Classic\" type card with an image causes a crash. If you are using the default Content Cards UI, do not upgrade to this version.\n\nContent Cards and News Feed are now more extensible!\n\nClass level API methods have changed to instance methods to make subclassing easier, however getNavigationContentCardsViewController and getNavigationFeedViewController are left in as class methods for backwards compatibility.\n\nSubclassing views is now fully supported for customizations. See the Content Card sample code for examples.\n\nAlternatively, you can bring your own storyboard with customizations. See our example custom storyboard implementation.\n\nSee the Content Cards documentation for more information.\n\nFixes an issue with Dynamic Type support introduced in 3.34.0 to be compatible with iOS 9.\n\nAdds support for new SDK Authentication feature.\n\nExposes window.brazeBridge in HTML in-app messages which replaces window.appboyBridge. appboyBridge is deprecated and will be removed in a future version of the SDK.\n\nMakes in-app message window handling more resilient:\n\nThe in-app message window tries to display up to 10 times when another window competes for visibility. If the in-app message is not guaranteed visibility, it is dismissed and an error is logged.\n\nImproves Appboy's wipeDataAndDisableForAppRun and disableSDK to handle additional use cases.\n\nDeprecates flushDataAndProcessRequestQueue in favor of requestImmediateDataFlush.\n\n4.1.0\n\nABKURLDelegate method handleAppboyURL:fromChannel:withExtras: is now invoked for all urls.\n\nPreviously, this delegate method was not invoked for urls opened in a WebView or the default browser when originating from the News Feed or Content Cards.\n\nRemoves ABKUIURLUtils method openURLWithSystem:fromChannel:. Use openURLWithSystem: as a replacement.\n\nFixes a case where the ABKURLDelegate method handleAppboyURL:fromChannel:withExtras: was being called twice when opening a push notification with an url.\n\nDeprecates ABKUnknownChannel.\n\n4.0.2\n\nFixes a double redirection bug in Push Stories when the app is in a terminated state and application:didReceiveRemoteNotification:fetchCompletionHandler: is not implemented.\n\nImproves the Swift Package Manager bundle lookup to be more flexible.\n\nAdds support to use a dictionary named Braze instead of Appboy when adding customization in the Info.plist. After adding the Braze dictionary, please remove the previous Appboy dictionary.\n\n4.0.1\n\nSets CFBundleSupportedPlatforms in .plist files to the correct non-simulator value.\n\nRemoves the Dynamic Type support warnings.\n\n4.0.0\n\nAppboyKit is now distributed as an XCFramework when integrating with Cocoapods. Cocoapods 1.10.0+ is required.\n\nThis removes the need for integrators to exclude the arm64 architecture when building for the simulator. Please undo any of the changes that may have been made when upgrading to 3.27.0 (Integrators will now be required to exclude ...).\n\nFixes the Swift Package Manager cleanup script to remove only the necessary files.\n\nAdds Mac Catalyst support for apps integrating with Cocoapods.\n\n3.34.0\n\nReplaces ABKInAppMessageSlideupViewController's slideConstraint by offset.\n\nAdds a new Github repo to optimize import speeds for applications integrating with Swift Package Manager.\n\nTo use this repo, follow these steps:\n\nRemove the existing package in your application that points to the url: https://github.com/Appboy/Appboy-ios-sdk.\n\nAdd a new package using the new url: https://github.com/braze-inc/braze-ios-sdk.\n\nFollow the rest of the setup instructions here.\n\nAdds support for Right-to-Left languages in the News Feed.\n\nAdds support for scaling fonts automatically with Dynamic Type for in-app messages and the News Feed.\n\nImproves accessibility handling for modal and full in-app messages.\n\nImproves Slideup in-app message animations.\n\n3.33.1\n\nFixes Swift Package Manager integration.\n\nIn Xcode, select File ▸ Swift Packages ▸ Update to Latest Package Versions to update.\n\nFixes Push Story integration via CocoaPods for applications that have use_frameworks! in their Podfile.\n\n3.33.0\n\nChanged Push Story integration to use XCFrameworks for Cocoapods and manual integration. Applications currently integrating Push Stories via Cocoapods or manual integration must follow these steps when updating:\n\nIn your Notification Content Extension target:\n\nRemove AppboyPushStory.framework from Frameworks and Libraries under the General tab.\n\nIn your application target:\n\nDelete the Copy File build phase copying the AppboyPushStory.framework to the Frameworks destination.\n\nDelete the Run Script build phase that starts with:\n\nAPP_PATH=\"${TARGET_BUILD_DIR}/${WRAPPER_NAME}\" find \"$APP_PATH\" -name 'AppboyPushStory.framework' -type d | while read -r FRAMEWORK ...\n\nRemoved ABKSDWebImageProxy's prefetchURLs: method.\n\nFixes a double redirection bug in Push Stories when the app is in a terminated state and the UNUserNotificationCenter delegate is not the AppDelegate.\n\n3.32.0\n\nAdds Mac Catalyst support for apps integrating with Swift Package Manager (SPM).\n\nPlease follow the instructions here to import the SDK with SPM. The SDK does not currently support Mac Catalyst when integrated through Cocoapods or Carthage.\n\nTo add Mac Catalyst support, update the Run Script Action described in the 3.31.0 section of the Changelog.\n\nReplace the existing script with the following:\n\n# iOS bash \"$BUILT_PRODUCTS_DIR/Appboy_iOS_SDK_AppboyKit.bundle/Appboy.bundle/appboy-spm-cleanup.sh\" # macOS bash \"$BUILT_PRODUCTS_DIR/Appboy_iOS_SDK_AppboyKit.bundle/Contents/Resources/Appboy.bundle/appboy-spm-cleanup.sh\"\n\n3.31.2\n\nFixes the formatting of Full and Slideup in-app messages when displaying on iPhone 12 mini.\n\nImproves Push Story click tracking handling.\n\n3.31.1\n\nRemoves the method getSDWebImageProxyClass from ABKUIUtils.\n\nYou can access the public class ABKSDWebImageProxy directly by importing ABKSDWebImageProxy.h.\n\nFixes a bug in the Cocoapods integration that would lead to SDK localizations being embedded for languages not explicitly supported in the app.\n\nFixes a rare crash that would occur when no windows exist at UIWindowLevelNormal while an in-app message is being displayed and UIKit requests UI updates (orientation change, etc.).\n\nFixes a bug in modal in-app messages where some languages (such as Burmese) may have clipped text.\n\n3.31.0\n\nFor apps that have previously integrated through Swift Package Manager, please perform the following steps:\n\nIn the Xcode menu, click Product > Scheme > Edit Scheme...\n\nClick the expand ▶️ next to Build and select Post-actions. Press + and select New Run Script Action.\n\nIn the dropdown next to Provide build settings from, select your app's target.\n\nCopy this script into the open field:\n\nbash \"$BUILT_PRODUCTS_DIR/Appboy_iOS_SDK_AppboyKit.bundle/Appboy.bundle/appboy-spm-cleanup.sh\"\n\nIf you are updating from 3.29.0 or 3.29.1, remove the Run Script Action previously specified in the 3.29.0 section of this changelog.\n\nAdds Push Stories support for apps integrating with Swift Package Manager.\n\nIn your app content extension's target, under Build Settings > Other Linker Flags, add the -ObjC linker flag.\n\nUpdates the email validation on the SDK to be more lenient in favor of more accurate validation by the Braze backend. Valid emails with uncommon patterns or international characters that were previously rejected will now be accepted.\n\nDeprecates ABKDeviceWhitelistKey in favor of ABKDeviceAllowlistKey.\n\nFixes a bug in HTML in-app messages where some native WebKit UI elements could be unresponsive.\n\n3.30.0\n\nBody click analytics will no longer automatically be collected for HTML in-app messages created using the HTML Upload with Preview option in the platform.\n\nTo continue to receive body click analytics, you must log body clicks explicitly from your message via Javascript using appboyBridge.logClick().\n\nFixes a bug with Full in-app messages where the button positions did not match the preview on the Braze dashboard.\n\nFixes a bug where in-app messages would be displayed below the application window under specific conditions.\n\nApps that set up their window asynchronously at startup could accidentally hide the in-app message window if one was being displayed (e.g. as a result of clicking on a test in-app message notification).\n\nAdds support for custom endpoints with a scheme included (https, http, etc.). For example, http://localhost:3001 will no longer result in https://http://localhost:3001 as the resolved endpoint.\n\n3.29.1\n\nAdds improved support for in-app message display on iPhone 12 models.\n\n3.29.0\n\nAdds initial support for Swift Package Manager. There are 2 new packages that have been added: AppboyKit for the core SDK and AppboyUI for the full SDK (including UI elements), which correspond to the Appboy-iOS-SDK/Core and Appboy-iOS-SDK pods, respectively.\n\nNote that tvOS support is not available via Swift Package Manager for this release. Push Stories is only available through a side-by-side integration with Cocoapods.\n\nTo add the package to your project follow these steps:\n\nSelect File > Swift Packages > Add Package Dependency.\n\nIn the search bar, enter https://github.com/Appboy/Appboy-ios-sdk.\n\nSelect one of AppboyKit or AppboyUI. Note that AppboyUI includes AppboyKit automatically.\n\nIn your app's target, under Build Settings > Other Linker Flags, add the -ObjC linker flag.\n\nIn the Xcode menu, click Product > Scheme > Edit Scheme...\n\nClick the expand ▶️ next to Build and select Post-actions. Press + and select New Run Script Action.\n\nIn the dropdown next to Provide build settings from, select your app's target.\n\nCopy this script into the open field:\n\nrm -rf \"${TARGET_BUILD_DIR}/${PRODUCT_NAME}.app/Frameworks/libAppboyKitLibrary.a\" rm -rf \"${TARGET_BUILD_DIR}/${PRODUCT_NAME}.app/Plugins/libAppboyKitLibrary.a\"\n\n3.28.0\n\nRemoves userNotificationWasSentFromAppboy: and pushNotificationWasSentFromAppboy: on Appboy. Use isAppboyUserNotification: and isAppboyRemoteNotification: in ABKPushUtils instead.\n\nUpdates ABKURLDelegate's method signature for handleAppboyURL:fromChannel:withExtras: to include nullability annotations required for proper Swift support.\n\nFixes a race condition in Appboy method wipeDataAndDisableForAppRun where certain persisted fields would still be available immediately after calling the method. These fields now are removed synchronously.\n\nUpdated SDWebImage to use version 5.9.x.\n\n3.27.0\n\nAdds support for iOS 14. Requires Xcode 12.\n\nRemoves the ABK_ENABLE_IDFA_COLLECTION preprocessor macro from the SDK.\n\nIf you wish to send IDFA to Braze, please use the ABKIDFADelegate. For more information, reference our documentation.\n\nUpdates the ABKIDFADelegate protocol by renaming isAdvertisingTrackingEnabled to isAdvertisingTrackingEnabledOrATTAuthorized to reflect the addition of the AppTrackingTransparency framework in iOS 14.\n\nIf you use the Ad Tracking Enabled segment filter on the Braze dashboard or are implementing AppTrackingTransparency, you must update your integration to use AppTrackingTransparency to read the correct user status. Please see our sample app for implementation details.\n\nIf you do not use the Ad Tracking Enabled segment filter and are not implementing AppTrackingTransparency yet, your implementation of isAdvertisingTrackingEnabledOrATTAuthorized may temporarily continue to use isAdvertisingTrackingEnabled. However, the returned value will always be NO in iOS 14, regardless of actual IDFA availability.\n\nNote that Apple announced that they will delay the enforcement of upcoming IDFA changes until early 2021. Please reference our iOS 14 upgrade guide for more details.\n\nUpdates the minimum required version of SDWebImage from 5.0 to 5.8.2.\n\nIntegrators will now be required to exclude the arm64 simulator slice in their entire project.\n\nThis is done automatically when integrating via Cocoapods.\n\nFor other cases:\n\nIf you are using xcconfig files to build your app, please set:\n\nFor iOS targets: EXCLUDED_ARCHS[sdk=iphonesimulator*] = arm64\n\nFor tvOS targets: EXCLUDED_ARCHS[sdk=appletvsimulator*] = arm64\n\nIf you are using the Xcode Build Settings panel, enable Build Active Architecture Only for the configuration you use to run your app on the simulator. (ONLY_ACTIVE_ARCH = YES)\n\n3.26.1\n\nDeprecates the compilation macro ABK_ENABLE_IDFA_COLLECTION in favor of the ABKIDFADelegate implementation.\n\nABK_ENABLE_IDFA_COLLECTION will not function properly in iOS 14. To continue collecting IDFA on iOS 14 devices, please upgrade to Xcode 12 and implement App Tracking Transparency and Braze's ABKIDFADelegate (see the iOS 14 upgrade guide for more information).\n\nAdds improved support for iOS 14 Approximate Location tracking.\n\n3.26.0\n\nRemoved readonly property overrideApplicationStatusBarHiddenState in ABKInAppMessageViewController.h.\n\nFixes an issue with in-app messages not respecting the application's status bar style when View controller-based status bar appearance (UIViewControllerBasedStatusBarAppearance) is set to YES in the Info.plist.\n\nFixes an issue which can lead to text being cut off in Content Cards for specific iPhone models.\n\nFixes an issue preventing test Content Cards from displaying under specific conditions.\n\nAdded Binary Project Specification file for more efficient Carthage integration of the full SDK.\n\nUpdate your Cartfile to use binary \"https://raw.githubusercontent.com/Appboy/appboy-ios-sdk/master/appboy_ios_sdk_full.json\"\n\nSupport for this integration method was added starting with version 3.24.0 of the SDK.\n\nAdds support for specifying PushStoryAppGroup in the Appboy dictionary in your app's Info.plist. This Apple App Group will share the Braze Push Story information such as Campaign IDs between applications from a single Apple Developer account.\n\nAdds appboyBridge.getUser().addAlias(alias, label) to the javascript interface for HTML in-app messages.\n\nAdds the property overrideUserInterfaceStyle to ABKInAppMessage that allows forcing Light or Dark mode in the same way as Apple's UIViewController.overrideUserInterfaceStyle.\n\nYou can set this property in the beforeInAppMessageDisplayed: method of an ABKInAppMessageControllerDelegate.\n\nAdds the ability to dismiss modal in-app messages when the user clicks outside of the in-app message.\n\nThis feature is disabled by default.\n\nYou can enable the feature by adding the Appboy dictionary to your Info.plist file. Inside the Appboy dictionary, add the DismissModalOnOutsideTap boolean subentry and set the value to YES.\n\nYou can also enable the feature at runtime by setting ABKEnableDismissModalOnOutsideTapKey to YES in appboyOptions.\n\n3.25.0\n\nRemoves the arm64e architecture when building with Cocoapods.\n\nRemoves the deprecated property appWindow from ABKInAppMessageWindowController.\n\n3.24.2\n\nFixes an issue with post-dismissal view hierarchy restoration for in-app messages under specific conditions.\n\nDeprecates ABKInAppMessageWindowController property appWindow.\n\n3.24.1\n\nFixes an issue introduced in 3.24.0 breaking the SDK compatibility with Cocoapods.\n\n3.24.0\n\nImportant This release is not compatible with Cocoapods. Do not upgrade to this version and upgrade to 3.24.1 and above instead.\n\nRenames ABKInAppMessageWindow's catchClicksOutsideInAppMessage to handleAllTouchEvents.\n\nFixes an issue where the unread indicator on a Content Card would persist even after being read.\n\nFixes an issue preventing long texts from displaying correctly in Full in-app messages.\n\nFixes an issue where appboyBridge would not work in an Ajax callback within HTML In-App Messages.\n\nChanges the manual integration steps for versions 3.24.0 and newer. Please follow the updated integration steps here.\n\nAdds support for JavaScript functions window.alert(), window.confirm() and window.prompt() in HTML in-app messages.\n\nAdds the ABKContentCardsTableViewControllerDelegate protocol to more intricately handle Content Card clicks using the methods contentCardTableViewController:shouldHandleCardClick: and contentCardTableViewController:didHandleCardClick:.\n\n3.23.0\n\nFixes an issue with regex based event property triggers not working as expected. Previously on iOS they had to match the entire string, now they will search for matches as expected.\n\nImproves resiliency when handling multiple background requests.\n\nAdds support for upcoming HTML In-App Message templates.\n\nAdds support for applications using scenes (UIWindowSceneDelegate). In-app messages are now properly displayed in that context.\n\n3.22.0\n\nRemoves the key ABKInAppMessageHideStatusBarKey from appboyOptions and the property forceHideStatusBar from ABKInAppMessageController. Full screen in-app messages are now always displayed with the status bar hidden.\n\nAdds Dark Mode support to Content Cards. This feature is enabled by default and can be disabled by setting enableDarkTheme property to NO on ABKContentCardsTableViewController before the view controller is presented.\n\nFixes an issue in HTML in-app messages where button clicks weren't correctly being attributed for mailto: and tel: links.\n\nFixes an issue in HTML in-app messages where videos would be displayed underneath the in-app message when full screen playback was enabled. The in-app message UIWindow's windowLevel is now set to UIWindowLevelNormal instead of being above UIWindowLevelStatusBar.\n\nFixes an issue in Content Cards where ABKURLDelegate was not being respected when opening links.\n\nAdds appboyBridge.logClick(id), appboyBridge.logClick() and appboyBridge.getUser().setCustomLocationAttribute(key, latitude, longitude) to the javascript interface for HTML in-app messages.\n\nAdds Czech and Ukrainian language support for Braze UI elements.\n\nAdds the ability to unset the current user's email attribute by setting the email property of the current ABKUser instance to nil (e.g. [Appboy sharedInstance].user.email = nil;).\n\nAdds Dark Mode support to Push Stories.\n\nAdds the ability to set maximum width of Content Cards by using the maxContentCardWidth property of ABKContentCardsTableViewController.\n\n3.21.3\n\nAdds an option to disable automatic geofence requests.\n\nYou can do this in the plist by adding the Appboy dictionary to your Info.plist file. Inside the Appboy dictionary, add the DisableAutomaticGeofenceRequests boolean subentry and set the value to YES.\n\nYou can also disable automatic geofence requests at runtime by setting ABKDisableAutomaticGeofenceRequestsKey to YES in appboyOptions.\n\nAdds the method requestGeofencesWithLongitude:latitude: to Appboy.h. This method can be called whenever you explicitly want Braze to send a request for updated Geofences information. This call is rate limited to once per user session.\n\n3.21.2\n\nFixes an issue in HTML in-app messages where, during display, the viewport would shift down if the keyboard was opened but not shift back up when the keyboard was closed.\n\nFixes an issue introduced in 3.17.0 where the SDK would give precedence to the endpoint passed in Info.plist if given both an endpoint from the Info.plist and appboyOptions.\n\nAdds the ability to set a custom WKWebViewConfiguration for HTML in-app messages. You can set it using the method setCustomWKWebViewConfiguration in ABKInAppMessageUIDelegate.\n\nRemoves calls to deprecated APIs statusBarOrientation and statusBarFrame.\n\nUn-deprecates the following push utility methods: isUninstallTrackingUserNotification:, isUninstallTrackingRemoteNotification:, isGeofencesSyncUserNotification:, isGeofencesSyncRemoteNotification:, and isPushStoryRemoteNotification: from ABKPushUtils. These APIs were originally deprecated in 3.16.0.\n\n3.21.1\n\nFixes an issue for Modal and Full in-app messages where the opacity value of the close X button was not being respected.\n\nABKContentCard.m will now log a click event when logContentCardClicked is called and no URL field is populated.\n\nAdds the ability to force the status bar to hide when a Full or HTML in-app message is being actively displayed. To opt in to this feature, set ABKInAppMessageHideStatusBarKey to YES in appboyOptions.\n\n3.21.0\n\nRequires XCode 11.\n\nFixes an issue in the animate-in behavior of HTML in-app messages that could cause a brief flicker before the message displayed on older devices and simulators.\n\nFixes an issue with Slideup in-app messages where they would cover part of the status bar when animating from the top on non-notched devices.\n\nFixes an issue introduced in 3.14.1 where boolean-typed event properties would be improperly cast to numbers.\n\nUpdates the logging format for debug, warn, and error ABKLogger messages to now print their log level.\n\nAdds support for the upcoming feature, in-app messages with Dark Mode support.\n\nDark Mode enabled messages must be created from the dashboard. Braze does not dynamically theme in-app messages for Dark Mode.\n\nThis feature is enabled by default for all new ABKInAppMessage instances. To prevent Braze from automatically applying a Dark Theme when the fields are available on Braze's servers, set the enableDarkTheme flag on ABKInAppMessage to NO in the beforeInAppMessageDisplayed: method of your ABKInAppMessageControllerDelegate delegate implementation.\n\nAdds the ability to reference the Braze iOS SDK API from Swift when using the Appboy-tvOS-SDK pod. Adding import AppboyTVOSKit to the top of your Swift file while using the Appboy-tvOS-SDK pod will give you equivalent behavior to adding import Appboy_iOS_SDK while using the Appboy-iOS-SDK pod.\n\nAdds the populateContentCards: method and the cards property to ABKContentCardsTableViewController's public interface. By setting the cards property from within populateContentCards:, you may manipulate ABKContentCard field data and/or control which ABKContentCard instances are displayed from the context of a custom ABKContentCardsTableViewController subclass.\n\n3.20.4\n\nFixed an issue with Content Cards where the header and description text fields would appear to be missing in Dark Mode.\n\nAdds a TEALIUM SDK flavor option.\n\n3.20.3\n\nIf Automatic Braze location collection is enabled, the SDK now submits a session start location request if location hasn't already been sent up for the session after any affirmative location permission prompt. This also applies to the new \"Allow Once\" option in iOS 13.\n\n3.20.2\n\nImportant If you are on Braze iOS SDK 3.19.0 or below, we recommend upgrading to this version immediately to ensure uninterrupted collection of new push tokens as users upgrade to iOS 13.\n\nIn application:didRegisterForRemoteNotificationsWithDeviceToken:, replace\n\n[[Appboy sharedInstance] registerPushToken: [NSString stringWithFormat:@\"%@\", deviceToken]];\n\nwith\n\n[[Appboy sharedInstance] registerDeviceToken:deviceToken];\n\nIf you are on Braze iOS SDK 3.19.0 or below and unable to upgrade, you must ensure your [Appboy registerPushToken] implementation does not rely on stringWithFormat or description for parsing the deviceToken passed in from application:didRegisterForRemoteNotificationsWithDeviceToken:. Please reach out to your Customer Success Manager for more information.\n\nImportant In Braze iOS SDK 3.19.0, we updated our HTML in-app message container from UIWebview to WKWebView, however, the initial releases have known issues displaying HTML in-app messages. If you are currently using 3.19.0, 3.20.0, or 3.20.1, you are strongly encouraged to upgrade if you make use of HTML in-app messages. Please see the following for more important information about the transition to WKWebView:\n\nIf you are utilizing customization for HTML in-app messages (such as customizing ABKInAppMessageHTMLFullViewController or ABKInAppMessageHTMLViewController), we strongly recommend testing to ensure your in-app messages continue to display correctly and interactions function as intended.\n\nThe following javascript methods are now no-ops: alert, confirm, prompt.\n\nDeep links without schemes are no longer supported. Ensure that your in-app message deep links contain schemes.\n\nFixes an issue introduced in 3.19.0 where HTML in-app messages would not register user clicks when the .xib failed to load.\n\nFixes an issue introduced in 3.19.0 where HTML in-app messages with select special characters and an assets zip would cause display irregularities.\n\nUpdates the WKWebView which displays HTML in-app messages with the following attributes:\n\nsuppressesIncrementalRendering is set to true\n\nmediaTypesRequiringUserActionForPlayback is set to WKAudiovisualMediaTypeAll\n\nUpdates the background color of the WKWebView which displays HTML in-app messages from [[UIColor blackColor] colorWithAlphaComponent:.3] to [UIColor clearColor].\n\n3.20.1\n\nImportant This release has known issues displaying HTML in-app messages. Do not upgrade to this version and upgrade to 3.20.2 and above instead. If you are using this version, you are strongly encouraged to upgrade to 3.20.2 or above if you make use of HTML in-app messages.\n\nFixes an issue introduced in 3.19.0 which changed the background of HTML in-app messages to a non-transparent color.\n\nImproves the robustness of push token collection code for iOS 13 introduced in 3.20.0.\n\n3.20.0\n\nImportant This release has known issues displaying HTML in-app messages and a known issue with push token collection. Do not upgrade to this version and upgrade to 3.20.2 and above instead. If you are using this version, you are strongly encouraged to upgrade to 3.20.2 or above if you make use of HTML in-app messages.\n\nIntroduced a signature change for push token collection methods:\n\n[[Appboy sharedInstance] registerPushToken: [NSString stringWithFormat:@\"%@\", deviceToken]];\n\nwith\n\n[[Appboy sharedInstance] registerDeviceToken:deviceToken];\n\n3.19.0\n\nImportant This release has known issues displaying HTML in-app messages. Do not upgrade to this version and upgrade to 3.20.2 and above instead. If you are using this version, you are strongly encouraged to upgrade to 3.20.2 or above if you make use of HTML in-app messages.\n\nReplaces UIWebView with WKWebView for HTML in-app messages.\n\nIf you are utilizing customization for HTML in-app messages (such as customizing ABKInAppMessageHTMLFullViewController or ABKInAppMessageHTMLViewController), you must test to ensure your in-app messages continue to display correctly and interactions function as intended.\n\nThe following javascript methods are now no-ops: alert, confirm, prompt.\n\nDeep links without schemes are no longer supported. Please ensure that your in-app message deep links contain schemes.\n\n3.18.0\n\nAutomatic Braze location collection is now disabled by default. If you choose to use our location collection, you must explicitly enable location collection.\n\nYou can do this in the plist by adding the Appboy dictionary to your Info.plist file. Inside the Appboy dictionary, add the EnableAutomaticLocationCollection boolean subentry and set the value to YES.\n\nYou can also enable location at runtime by setting ABKEnableAutomaticLocationCollectionKey to YES in appboyOptions.\n\nRemoves the Feedback feature from the SDK. The Feedback subspec and all Feedback methods on the SDK, including [[Appboy sharedInstance] submitFeedback] and [[Appboy sharedInstance] logFeedbackDisplayed], are removed.\n\nImproves support for in-app messages on “notched” devices (for example, iPhone X, Pixel 3XL). Full-screen messages now expand to fill the entire screen of any phone, while covering the status bar.\n\nAdds the ability to enable Braze Geofences without enabling Braze location collection. You can set this in the plist by adding the Appboy dictionary to your Info.plist file. Inside the Appboy dictionary, add the EnableGeofences boolean subentry and set the value to YES to enable Braze Geofences. You can also enable geofences at runtime by setting ABKEnableGeofencesKey to YES in appboyOptions.\n\nIf this key is not set, it will default to the status of automatic location collection (see breaking change above).\n\nNote that Braze Geofences will continue to work on existing integrations if location collection is enabled and this new configuration is not present. This new configuration is intended for integrations that want Braze Geofences, but not location collection enabled as well.\n\n3.17.0\n\nRemoves ABKAppboyEndpointDelegate.\n\nYou can now set the endpoint at runtime by setting the value of ABKEndpointKey in appboyOptions to your custom endpoint (ex. sdk.api.braze.eu) at initialization.\n\n3.16.0\n\nImportant: If you are using ABKAppboyEndpointDelegate, you will need to replace dev.appboy.com with sdk.iad-01.braze.com in the getApiEndpoint method.\n\nRemoves the methods: allowRequestWhenInUseLocationPermission and allowRequestAlwaysPermission from ABKLocationManager.\n\nTo request when in use location permission, use the following code:\n\nCLLocationManager *locationManager = [[CLLocationManager alloc] init]; [locationManager requestWhenInUseAuthorization];\n\nTo request always location permission, use the following code:\n\nCLLocationManager *locationManager = [[CLLocationManager alloc] init]; [locationManager requestAlwaysAuthorization];\n\nThe preprocessor macro ABK_DISABLE_LOCATION_SERVICES is no longer needed.\n\nImportant: Configuring geofences to request always location permissions remotely from the Braze dashboard is no longer supported. If you are using Geofences, you will need to ensure that your app requests always location permission from your users manually.\n\nABKAutomaticRequestProcessingExceptForDataFlush is deprecated. Users using ABKAutomaticRequestProcessingExceptForDataFlush should switch to ABKManualRequestProcessing, as the new behavior of ABKManualRequestProcessing is identical to the previous behavior of ABKAutomaticRequestProcessingExceptForDataFlush\n\nDeprecates the push utility methods: isUninstallTrackingUserNotification:, isUninstallTrackingRemoteNotification:, isGeofencesSyncUserNotification:, isGeofencesSyncRemoteNotification:, and isPushStoryRemoteNotification: from ABKPushUtils. Please use the function isAppboyInternalRemoteNotification:.\n\nMinor changes to the logic of ABKManualRequestProcessing. The original ABKManualRequestProcessing had specific exceptions and behaved more like ABKAutomaticRequestProcessingExceptForDataFlush in practice. As a result, the two policies have been merged into ABKManualRequestProcessing. Note that the new definition of ABKManualRequestProcessing is that periodic automatic data flushes are disabled. Other requests important to basic Braze functionality will still occur.\n\n3.15.0\n\nImportant: If you are using ABKAppboyEndpointDelegate, you will need to replace dev.appboy.com with sdk.iad-01.braze.com in the getApiEndpoint method.\n\nAdds support for SDWebImage version 5.0.\n\nNote that upgrading to SDWebImage 5.0 also removed the FLAnimatedImage transitive dependency from the SDK.\n\n3.14.1\n\nImportant: If you are using ABKAppboyEndpointDelegate, you will need to replace dev.appboy.com with sdk.iad-01.braze.com in the getApiEndpoint method.\n\nChanged in-app message trigger behavior to not perform trigger events until after any pending trigger sync requests to the server have finished.\n\nFixed a serialization issue that could cause improper type conversions for certain decimal values.\n\nFixed a behavior introduced in 3.12.0 which caused in-app messages to not be considered triggered locally if ABKDiscardInAppMessage was returned by the host app in beforeInAppMessageDisplayed:.\n\nAdded the ability to set the session timeout via the Info.plist.\n\nAdd the Appboy dictionary to your Info.plist file. Inside the Appboy Dictionary, add the SessionTimeout Number subentry and set the value to your session timeout.\n\nAdded the ability to disable location tracking via the Info.plist.\n\nAdd the Appboy dictionary to your Info.plist file. Inside the Appboy Dictionary, add the DisableAutomaticLocation Boolean subentry and set the value to YES.\n\nAdded dynamic cell resizing for Content Cards cells with templated images in our default Content Cards UI.\n\nAdded validation to the local filename's canonical path during zip file extraction.\n\n3.14.0\n\nImportant: If you are using ABKAppboyEndpointDelegate and plan to upgrade to 3.14.1, you will need to replace dev.appboy.com with sdk.iad-01.braze.com in the getApiEndpoint method.\n\nImproves the look and feel of In-App Messages to adhere to the latest UX and UI best practices. Changes affect font sizes, padding, and responsiveness across all message types. Now supports button border styling.\n\n3.13.0\n\nUpgrades the delivery mechanism of Push Stories to allow delivery even after a user’s app has been force closed..\n\nRequired: Please change your integration to use ab_cat_push_story_v2 instead of ab_cat_push_story for the UNNotificationExtensionCategory in your content extension. See documentation for more details.\n\nImproves in-app message triggering logic to fall back to lower priority messages when the Braze server aborts templating (e.g. from a Connected Content abort in the message body, or because the user is no longer in the correct Segment for the message).\n\nUpdates German translations to improve formatting.\n\n3.12.0\n\nDrops support for iOS 8.\n\nAdds support for the arm64e architecture when building with Cocoapods. Requires Xcode 10.1.\n\nFixes bitcode support for the Push Story framework when using Xcode 10.\n\nImproves triggered in-app message re-eligibility logic to better handle templating failures.\n\nChanges the behavior of News Feed so that only one impression is logged for each card per News Feed open.\n\nAdds HTML IAM appboyBridge ready event to know precisely when the appboyBridge has finished loading.\n\nExample below:\n\n<script type=\"text/javascript\"> function logMyCustomEvent() { appboyBridge.logCustomEvent('My Custom Event'); } window.addEventListener('ab.BridgeReady', logMyCustomEvent, false); </script>\n\nRemoves Cross-Promotion cards from the News Feed.\n\nCross-Promotion cards have also been removed as a card model and will thus no longer be returned.\n\n3.11.0\n\nAdds the ability to set or remove custom location attributes for a specific user from within HTML IAMs.\n\nUpdates the SDK to report users who disable banner notifications but are still opted-in to push notifications as push enabled. Note this change does not affect provisionally authorized users on iOS 12, who were considered push enabled before this release regardless of their banner notification settings.\n\nAdds Carthage Core support which allows for integration with the core Braze SDK without any UI components. To implement the core SDK, add binary \"https://raw.githubusercontent.com/Appboy/appboy-ios-sdk/master/appboy_ios_sdk_core.json\" to your Cartfile.\n\nDeprecates the Feedback feature.\n\nFixes an issue with the JS bridge when trying to set a custom attribute with the character '&'.\n\n3.10.0\n\nAdds the ability to specify a whitelist for device fields that are collected by the Braze SDK.\n\nConfigurable device fields are defined in the ABKDeviceOptions enum.\n\nTo specify whitelisted device fields, assign the bitwise OR of desired fields to ABKDeviceWhitelistKey in the appboyOptions of startWithApiKey:inApplication:withAppboyOptions:.\n\nFor example, to specify timezone and locale collection to be whitelisted, set appboyOptions[ABKDeviceWhitelistKey] = @(ABKDeviceOptionTimezone | ABKDeviceOptionLocale);.\n\nTo turn off all fields, set appboyOptions[ABKDeviceWhitelistKey] = @(ABKDeviceOptionNone);.\n\nBy default, all fields are enabled.\n\nAdded the clicked property to ABKContentCard. Clicks made through [ABKContentCard logContentCardClicked] are now saved locally on the device.\n\nRemoves ABKSignificantChangeCollectionEnabledOptionKey, ABKSignificantChangeCollectionDistanceFilterOptionKey, and ABKSignificantChangeCollectionTimeFilterOptionKey from the Appboy interface.\n\nRemoves the ability to optionally track locations in the background.\n\nFixes an issue where Slideup and Full In-App Message content could be obscured by the notch on iPhone XR and iPhone XS Max.\n\n3.9.0\n\nAdds support for iOS 12. Requires Xcode 10.\n\nFixes minor issues with subclassing ABKInAppMessageModalViewController and News Feed request timeouts.\n\nThanks @datkinnguyen for your contribution.\n\n3.8.4\n\nFixes a regression introduced in version 3.8.3 that caused background tasks to extend beyond execution time.\n\n3.8.3\n\nFixes an issue where ABKContentCardsController unviewedContentCardCount would always return 0.\n\nUpdates the Content Cards UI with minor layout improvements.\n\n3.8.2\n\nFixes an issue with possible build failure when using Content Cards related to duplicate image names in Content Cards and News Feed pods. Please use this version if integrating Content Cards.\n\nUpdates the Content Cards UI with minor layout improvements.\n\n3.8.1\n\nImportant: Fixes an issue with Content Cards syncing. Note: As additional fixes were added in later versions, please use Braze iOS SDK version 3.8.2 or above if integrating Content Cards.\n\n3.8.0\n\nIn ABKUser class, addLocationCustomAttributeWithKey:latitude:longitude: and removeLocationCustomAttributeWithKey: methods are added to manage location custom attributes.\n\nIntroduces support for the upcoming Content Cards feature, which will eventually replace the existing News Feed feature and adds significant capability. This feature is currently in closed beta testing; if you're interested in joining the beta, please reach out to your Customer Success Manager or Account Manager.\n\nStatus bar is not obscured when displaying a full screen in-app message.\n\n3.7.1\n\nImproves data handling immediately following a user change to bring behavioral parity with the Android and Web SDKs.\n\n3.7.0\n\nIn ABKInAppMessageUIControlling protocol, getCurrentDisplayChoiceForControlInAppMessage method is added to define whether the control in-app message impression should be logged now, later or discarded.\n\nIn ABKInAppMessageControllerDelegate protocol, beforeControlMessageImpressionLogged method is added to define whether the control in-app message impression should be logged now, later or discarded.\n\nCLLocationManager authorization requests can now be prevented from compiling by setting a Preprocessor flag ABK_DISABLE_LOCATION_SERVICES.\n\nFixes an issue where in-app messages triggered on session start could potentially be templated with the old user's attributes.\n\n3.6.0\n\nIn ABKSDWebImageProxy.h, renames removeImageForKey to removeSDWebImageForKey and clearCache to clearSDWebImageCache to avoid conflicts with internal Apple API. Important: We have received reports of sporadic App Store rejection stemming from Apple's static checks mistaking our APIs for an invalid usage of the internal Apple API. We recommend new App Store submissions integrating the Braze iOS SDK ship with this version or above to decrease the likelihood of rejection.\n\nExposes handleCardClick on ABKNewsFeedTableViewController.h to enable custom handling via subclassing.\n\nImproves News Feed image handling on iPad.\n\n3.5.1\n\nFixes an issue with integrating the NewsFeed subspec in Swift projects via Cocoapods.\n\n3.5.0\n\nOpen sources the News Feed UI code and moves it into a new subspec named \"NewsFeed\".\n\nManual integrators must now add the AppboyUI folder of this repository to their projects as a group, in addition to AppboyKit.\n\nThe \"NewsFeed\" subspec contains the Braze News Feed UI and the Core SDK. It does not include the Feedback or In-App Message UI.\n\nThe \"UI\" subspec contains all Braze UI and the Core SDK subpsec.\n\nABKFeedViewControllerDelegate was removed.\n\nTo integrate a navigation context News Feed, use the following code:\n\nABKNewsFeedTableViewController *newsFeed = [ABKNewsFeedTableViewController getNavigationFeedViewController]; [self.navigationController pushViewController:newsFeed animated:YES];\n\nTo integrate a modal context News Feed, use the following code:\n\nABKNewsFeedViewController *newsFeed = [[ABKNewsFeedViewController alloc] init]; [self.navigationController presentViewController:newsFeed animated:YES completion:nil];\n\nSee our News Feed Sample app for sample implementations and customizations.\n\nRemoves NUI support for Feedback, In-App Messages, and the News Feed.\n\nAll customization can now be done by using categories or by extending our open sourced view controllers.\n\nRemoves deprecated ABKPushURIDelegate from the SDK. Use ABKURLDelegate instead.\n\n3.4.0\n\nAdds preferredOrientation to ABKInAppMessageUIController and ABKInAppMessageWindowController.\n\nRemoves supportedOrientations from ABKInAppMessageUIController and ABKInAppMessageWindowController.\n\nRenames supportedOrientationMasks to supportedOrientationMask in ABKInAppMessageUIController and ABKInAppMessageWindowController.\n\nFixes an issue that caused GIFs to not animate on SDWebImage versions above or equal to 4.3.0\n\n3.3.4\n\nAdds the ability to view verbose logs from the SDK for debugging.\n\nTo enable verbose logging, add a dictionary named Appboy to your Info.plist file. Inside the Appboy Dictionary, add the LogLevel String subentry and set the value to \"0\".\n\n3.3.3\n\nAdds wipeDataAndDisableForAppRun: on the Appboy interface to support wiping all customer data created by the Braze SDK.\n\nAdds disableSDK: and requestEnableSDKOnNextAppRun: to the Appboy interface to disable and re-enable the Braze SDK.\n\nFixes an issue where events setting custom attribute arrays to nil would persist on the SDK beyond their useful life.\n\n3.3.2\n\nUpdates the SDK with internal, non-functional improvements.\n\n3.3.1\n\nAdds Other, Unknown, Not Applicable, and Prefer not to Say options for user gender.\n\nAdds umbrella header files AppboyFeedback.h and AppboyInAppMessage.h for the Feedback and InAppMessage subspecs.\n\nFixes an issue where the method beforeInAppMessageDisplayed: in class ABKInAppMessageControllerDelegate is not called when the host app is using the Core subspec.\n\n3.3.0\n\nOpen sources the In-App Message UI code and moves it into a new subspec named \"InAppMessage\".\n\nManual integrators must now add the AppboyUI folder of this repository to their projects as a group, in addition to AppboyKit.\n\nThe \"InAppMessage\" subspec contains the Braze In-App Message UI and the Core SDK. It does not include Feedback or the News Feed UI.\n\nThe \"UI\" subspec contains all Braze UI and the Core SDK subpsec.\n\nThe open-sourced In-App Message view controllers offer backward compatible NUI support, although we recommend using categories or subclassing the In-App Message view controllers for customization as the NUI library isn't actively maintained any more. Support for NUI customization will be removed in a future release.\n\nMost delegate customization methods are moved from ABKInAppMessageControllerDelegate to ABKInAppMessageUIDelegate.\n\nSee our In-App Message Sample app for sample implementations and customizations.\n\nRemoves support for original in-app messages. Moving forward, triggered in-app messages must be used.\n\nRemoves requestInAppMessageRefresh method from Appboy.\n\nRemoves the current behavior of displaying an in-app message from the stack on app open, if the stack is non-empty\n\nAdds Macros for methods which are only available from iOS 10.\n\nAddresses #128.\n\nStops using deprecated openURL: method when in iOS 10 and above.\n\nAddresses #132.\n\n3.2.3\n\nFixes an issue introduced in version 3.0.0 which caused detailed device model information to not be collected by the SDK.\n\nFixes an issue where Braze's Carthage framework did not support simulators.\n\n3.2.2\n\nFixes an issue where Slideup and Full In-App Message content could be obscured by the notch on iPhone X.\n\n3.2.1\n\nFixes an issue where Push Story Framework did not support bitcode.\n\n3.2.0\n\nAdds Push Stories, a new push type that uses UNNotificationContentExtension to display multiple images in a single notification.\n\nThis feature requires iOS 10 and above.\n\nFixes an issue where tvOS SDK did not support bitcode.\n\n3.1.1\n\nAdds a new property language to ABKUser to allow explicit control over the user's language in the Braze dashboard. Note that this is separate and independent from the language settings on the user's device.\n\nAdds an Objective-C sample app for the Core subspec of the SDK. See Samples/Core/ObjCSample.\n\nFixes a bug introduced in version 2.30 where crashes could occur if the SDK was directed to handle a custom scheme deep link inside a WebView.\n\nAddresses #122.\n\nFixes a bug introduced in version 3.0 where new custom attributes were not being flushed if custom attributes had been previously flushed in the same foregrounded session.\n\nFixes a bug introduced in version 3.0 where previously flushed custom attributes were being re-sent.\n\nFixes an issue where slow image fetching blocked image-only modal in-app messages from displaying.\n\nAddresses #118.\n\n3.1.0\n\nAdds support for iOS 11. Requires Xcode 9.\n\n3.0.2\n\nAdds the ability to set a custom API endpoint via the Info.plist.\n\nAdd the Appboy dictionary to your Info.plist file. Inside the Appboy Dictionary, add the Endpoint String subentry and set the value to your custom endpoint (e.g., sdk.api.braze.eu).\n\nFixes an issue where changing the IDFA settings through a third party wrapper could cause a crash.\n\n3.0.1\n\nFixes an issue where calling incrementCustomUserAttribute: on ABKUser could cause a crash.\n\n3.0.0\n\nRemoves the deprecated foursquareAccessToken property from ABKUser. To associate a Foursquare access token with a user profile, use setCustomAttributeWithKey:andStringValue: instead.\n\nNote: Braze iOS SDK version 3.0.0 will only support downgrading to iOS SDK version 2.31.0. Downgrading to versions prior to 2.31.0 may result in app crashes.\n\nAdds a major performance upgrade that reduces CPU usage, memory footprint, and network traffic.\n\n2.31.0\n\nOpen sources the Feedback view controllers and moves them into a new subspec \"Feedback\".\n\nThe \"Feedback\" subspec has the Braze Feedback UI and the Core SDK. It will not include in-app messages or News Feed UI.\n\nRemoves the popover context for Feedback due to the deprecation of UIPopoverViewController in iOS.\n\nRenames the ABKFeedbackViewControllerModalContext and ABKFeedbackViewControllerNavigationContext class to ABKModalFeedbackViewController and ABKNavigationFeedbackViewController.\n\nThe open-sourced Feedback view controllers offer backward compatible NUI support, although we recommend using categories or subclassing the Feedback view controllers for customization as NUI library isn't actively maintained any more. See here for customization details.\n\nSee our Feedback Sample app for sample implementations and customizations.\n\nAdds user aliasing capability. Aliases can be used in the API and dashboard to identify users in addition to their ID. See the addAlias:withLabel: method on ABKUser for more information.\n\nUpdates the AppboyKit.h to include all the public header files in the SDK.\n\n2.30.0\n\nOpen sources the ABKModalWebViewController class, which is used to display the web URLs from push or in-app message clicks.\n\nDrops NUI customization support for the navigation bar and navigation bar button item on ABKModalWebViewController. To customize the UI, create an ABKModalWebViewController category and override the corresponding method(s) exposed.\n\nOpen sources the ABKNoConnectionLocalization class, which provides Braze's default localized string for \"No Connection\" error.\n\nYou can customize the localization by adding Appboy.no-connection.message as the key in your Localizable.strings files.\n\nRemoves the Appboy.bundle from the Core subspec of the SDK.\n\nIf you use the Core subspec, the in-app messages will not display, and trying to display Braze's News Feed and Feedback UI will lead to unpredictable behavior.\n\n2.29.1\n\nAdds a new property buttonTextFont to ABKInAppMessageButton. It allows clients to set customized fonts on in-app message buttons before the in-app message is displayed.\n\nMakes class ABKInAppMessageWindowController.h public.\n\nAddresses #105.\n\nFixes an issue where device information was not flushed for a new user when server requests were queued for two or more users.\n\nRemoves the warnings in ABKSDWebImageProxy.\n\n2.29.0\n\nDrops support for iOS 7.\n\nRemoves the shouldOpenURIExternally field from ABKInAppMessage.\n\nRequires XCode 8.3.\n\nChanges the behavior of the onCardClicked:feedViewController: method in ABKFeedViewControllerDelegate to let Braze handle the card click action if the delegate method returns NO.\n\nPreviously, Braze would handle the card click action if onCardClicked:feedViewController: returned YES.\n\nThis change standardizes delegate behavior with ABKInAppMessageControllerDelegate and ABKURLDelegate.\n\nAdds the property openUrlInWebView to ABKInAppMessage, ABKInAppMessageButton and ABKCard. This property determines if the URL associated with the object will be opened in a UIWebView.\n\nAdds a Javascript interface to HTML in-app messages with ability to log custom events, log purchases, set user attributes, navigate users, and close the message.\n\nAdds an abDeepLink query field to HTML in-app messages, which defaults to false. To prevent the SDK from opening deep links in a UIWebView, specify abDeepLink=true in your link (e.g., https://www.braze.com?abDeepLink=true).\n\nAdds the ABKURLDelegate protocol for customizing URL handling across channels. Set the ABKURLDelegate by passing a delegate object to the ABKURLDelegateKey in the appboyOptions of startWithApiKey:inApplication:withAppboyOptions:. See our Stopwatch sample application for a Universal Link implementation sample.\n\nAdds the following utility methods to ABKPushUtils for detecting if a push notification was sent by Braze for internal feature purposes:\n\n+ (BOOL)isAppboyInternalUserNotification:(UNNotificationResponse *)response;\n\n+ (BOOL)isAppboyInternalRemoteNotification:(NSDictionary *)userInfo;\n\n+ (BOOL)isUninstallTrackingUserNotification:(UNNotificationResponse *)response;\n\n+ (BOOL)isGeofencesSyncUserNotification:(UNNotificationResponse *)response;\n\n+ (BOOL)isGeofencesSyncRemoteNotification:(NSDictionary *)userInfo;\n\nThese methods can be used to ensure that your app does not take any undesired or unnecessary actions upon receiving Braze's internal content-available notifications (e.g., pinging your server for content).\n\nDeprecates ABKPushURIDelegate. If you were previously using ABKPushURIDelegate, use ABKURLDelegate instead.\n\nDeprecates userNotificationWasSentFromAppboy: and pushNotificationWasSentFromAppboy: on Appboy. Use isAppboyUserNotification: and isAppboyRemoteNotification: on ABKPushUtils instead.\n\nDeprecates shouldFetchTestTriggersFlagContainedInPayload: on ABKPushUtils.\n\n2.28.0\n\nRemoves support for watchOS 1, including Braze WatchKit SDK and all public APIs for watchOS in Braze iOS SDK.\n\nAdds ABKSDWebImageProxy to access the SDWebImage framework. This will prevent the Core subspec of the SDK from calling any SDWebImage methods directly.\n\n2.27.0\n\nRemoves the following deprecated items: the bio field of ABKUser, the setIsSubscribedToEmails: method of ABKUser, and the getResourceEndpoint: method of the ABKAppboyEndpointDelegate protocol.\n\nAdds support for registering geofences and messaging on geofence events. Please reach out to success@braze.com for more information about this feature.\n\nAdds Braze default push categories which can be fetched from ABKPushUtils.\n\nTo use the Braze default push categories, you need to manually add the Braze categories when you register for push. You can get the Braze categories from [ABKPushUtils getAppboyUNNotificationCategorySet] or [ABKPushUtils getAppboyUIUserNotificationCategorySet].\n\nIn this version, we add four sets of push action buttons: accept/decline, yes/no, confirm/cancel, more. These will be available as button sets on the dashboard when creating an iOS push campaign.\n\nAll Braze push action buttons support localization.\n\nAdds support for web link and deep link handling of push action buttons.\n\nFixes the issue where the combination of the Core subspec of the SDK and a non-supported version of SDWebImage framework can cause apps to crash.\n\nAddresses #104.\n\nHTML in-app messages now log body click analytics on all links that are not appboy://customEvent and do not include the abButtonId query field. Previously, no body click analytics were logged.\n\nRemoves deprecated method - (NSString *)getResourceEndpoint:(NSString *)appboyResourceEndpoint from ABKAppboyEndpointDelegate.\n\nRemoves deprecated property bio and deprecated method - (BOOL)setIsSubscribedToEmails:(BOOL)subscribed from ABKUser.\n\n2.26.0\n\nAdds support for SDWebImage version 4.0.0 with GIF support. SDWebImage version 3.x will not be supported from this version on. Please make sure you are using the correct version of SDWebImage.framework. Note: SDWebImage 4.0.0 relies on FLAnimatedImage - users integrating in ways besides CocoaPods should ensure they link the FLAnimatedImage framework if they want GIF support.\n\nRemoves the url property from subclasses of ABKCard. This property has been renamed to urlString and moved onto the ABKCard superclass.\n\nAdds Cocoapods subspecs \"Core\" and \"UI\".\n\nThe \"UI\" subspsec has the full feature set of the current SDK. This is the default subspec when no subspec is specified in the Podfile.\n\nThe \"Core\" subspec removes the SDWebImage framework dependency. This is for apps who do not use any Braze UI that leverages images (News Feed, in-app messages). If you use the \"Core\" subspec, in-app messages with images will not display, and the News Feed will render with plain white images.\n\nMakes ABKThemableFeedNavigationBar.h and ABKNavigationBar.h public.\n\nAddresses #68\n\nAdds an unsafeInstance method that returns a nonoptional Appboy instance. If used before calling startWithApiKey: an exception will be thrown.\n\nAddresses #45.\n\nAdds ABKIDFADelegate protocol that can be used to create a delegate to pass Braze the IDFA in startWithApiKey: in the appboyOptions dictionary under the ABKIDFADelegateKey key. Alternative to existing ABKIdentifierForAdvertisingProvider compile flag solution.\n\nDisables the -webkit-touch-callout property on HTML in-app messages. Long presses and 3D Touch on links will no longer display pop-ups with additional link information.\n\n2.25.0\n\nAdds the ability to set the ABKInAppMessageControllerDelegate when the SDK starts by passing a delegate object to the ABKInAppMessageControllerDelegateKey in the appboyOptions of startWithApiKey:inApplication:withAppboyOptions:.\n\nThis is the recommended way to set the ABKInAppMessageControllerDelegate and circumvents a potential race condition where in-app messages can be shown before the delegate has been set.\n\nExposes the ABKFeedback object and adds a new method - (void)submitFeedback:(ABKFeedback *)feedback withCompletionHandler:(nullable void (^)(ABKFeedbackSentResult feedbackSentResult))completionHandler; in Appboy. The new method accepts a completion handler which receives an ABKFeedbackSentResult enum as feedback sending result.\n\nThe possible feedback sending results are: invalid feedback object(ABKInvalidFeedback), fail to send feedback(ABKNetworkIssue), and feedback sent successfully(ABKFeedbackSentSuccessfully).\n\nAdds the utility method - (BOOL)userNotificationWasSentFromAppboy:(UNNotificationResponse *)response; to Appboy. This method is compatible with the UserNotifications framework and returns whether a push notification was sent from Braze's server.\n\nThose using - (BOOL)pushNotificationWasSentFromAppboy:(NSDictionary *)options; who have integrated the UserNotifications framework should use this method instead.\n\nChanges the ABKInAppMessageButton from a UIButton object to a pure data model class in NSObject.\n\nThis resolves the issue #97.\n\nAdds more protection around triggered in-app message display.\n\n2.24.5\n\nFixes an issue where in-app messages triggered off of push clicks wouldn't fire when the push click happened before the in-app message configuration was synced to the device.\n\nUpdates push registration to flush the token to the server immediately.\n\nImproves the accessibility of in-app messages and news feed cards.\n\nWhen in voiceOver mode, the SDK auto-focuses on in-app messages when they appear and resets focus on dismissal.\n\nVoiceOver no longer reads Braze internal labels.\n\nNews feed cards are enhanced to be more accessible.\n\n2.24.4\n\nAdds protection around in-app message UI code to avoid displaying in-app messages with corrupted images.\n\nFixes the iOS version number in the deprecation warnings in Appboy.h.\n\n2.24.3\n\nUpdate REQUIRED for apps using Braze SDK 2.24.0, 2.24.1 or 2.24.2 with UserNotifications.framework\n\nFixes an issue where a user's foreground push enabled status could erroneously be marked as disabled.\n\nThis issue can occur when opening the app from suspended mode. At that time, the foreground push enabled status was defaulted to disabled until the UserNotifications.framework returned the user's push authorization status. If the user closed the app within a few seconds, the SDK would not flush the updated push status and the user would mistakenly be marked as \"push disabled\".\n\nThis issue only affected apps using UserNotifications.framework to register for push notifications.\n\nThe updated code stores the push authorization status on disk to fix the issue.\n\nFixes an issue where triggered in-app messages with event property templating did not respect re-eligibility settings.\n\nUpdates the Podspecs for iOS and tvOS SDK.\n\nUpdates deprecation warnings to specify iOS version.\n\nUpdates the ABKFeedController with more generic nullability.\n\nDisables all data detectors on HTML in-app messages. Phone numbers, web URLs, addresses and calendar events will no longer be automatically converted.\n\nDisables scrolling bounces on HTML in-app messages.\n\n2.24.2\n\nFixes an issue where HTML in-app messages loaded JavaScript more than once.\n\nFixes the Appboy.inAppMessage.webview.done-button.title string in the French localization file, which was named incorrectly and wasn't being found.\n\n2.24.1\n\nAdds nullability annotation for the completionHandler in userNotificationCenter :didReceiveNotificationResponse:withCompletionHandler.\n\n2.24.0\n\nUpdates the SDK to require XCode 8.\n\niOS 10 changes behavior of application:didReceiveRemoteNotification:fetchCompletionHandler and subsequently breaks open tracking and deep link handling on most existing Braze iOS integrations. If you don't currently implement application:didReceiveRemoteNotification: you need to modify your integration, and we recommend that all users update.\n\nUpdates the iOS and tvOS SDKs to support iOS 10.\n\nAdds a new method - (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler. This method supports the new delegate method for push notification handling in UserNotification framework.\n\nDeprecates two push delegate methods: - (void)registerApplication:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)notification and - (void)getActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)userInfo completionHandler:(nullable void (^)())completionHandler.\n\n2.23.0\n\nAdds support for upgraded in-app messages including image-only messages, improved image sizing/cropping, text scrolling, text alignment, configurable orientation, and configurable frame color.\n\nAdds support for in-app messages triggered on custom event properties, purchase properties, and in-app message clicks.\n\nAdds support for templating event properties within in-app messages.\n\nRemoves the deprecated method logSocialShare from Appboy class.\n\n2.22.1\n\nUpdates tvOS bitcode support, patching an error introduced by an Xcode bug.\n\n2.22.0\n\nAdds tvOS support for logging analytics; adds sample applications for tvOS and TVML.\n\nAdds Hebrew localization support.\n\n2.21.0\n\nDrops support for iOS 6.\n\nAdds support for deep links with non-URL-encoded characters. The SDK will encode unencoded url strings to create valid deep link NSURLs.\n\nFixes a bug where the background of a slideup in-app message remained transparent when configured with 100% opacity.\n\nUpdates the podspec SDWebImage dependency to fetch the latest version.\n\nReplaces SDK usage of NSURLConnection with NSURLSession.\n\nUpdates the SDK to always call canOpenURL: before opening a deep link. After this change, the SDK will only direct deep links whose schemes are whitelisted.\n\nUpdates push registration to immediately, asynchronously send up the push token.\n\n2.20.1\n\nFixes an issue where in certain conditions NSUserDefault blocking would cause custom events logged in the main thread to result in UI freezing.\n\nImplements an optimization in push handling to not prefetch the News Feed when a push arrives and the app is in the background.\n\n2.20.0\n\nAdds Carthage support.\n\nFixes a multithreading issue where logging custom events from different threads would sporadically cause errors.\n\nFixes the issue where a close button's color on modal and full in-app messages didn't respect the opacity value.\n\nFixes an issue where failure to download HTML in-app message assets mid-download resulted in display without assets.\n\nNow the onInAppMessageHTMLButtonClicked:clickedURL:buttonID: delegate method will be called every time a URL is clicked. The method used to be only called when there was a button ID in the URL link.\n\nUpdates the feedback element to reject messages that contain only whitespace.\n\nUpdates remote push handling to call the completion handler passed in every time (a code path previously existed that would return without calling it).\n\nRemoves the delegate method onInAppMessageHTMLButtonClicked:buttonID: from ABKInAppMessageControllerDelegate protocol.\n\n2.19.3\n\nAdds a new feature allowing manual control of deep link handling in push notications. To use this, add a ABKPushURIDelegate value for the ABKPushURIDelegate key in the appboyOptions dictionary of startWithApiKey:inApplication:inApplication:withAppboyOptions:. Also updates the ABKPushURIDelegate integration to be initialized through that integration point.\n\nAdds guarding against a possible crash caused by a user's offline state being corrupted and not including an active session when a network request occurred.\n\nFixes an issue where duplicate data could be recorded when a force quit or crash occurs after a network request completed successfully, but before any other activity (such as leaving the app, putting it to sleep, updating an attribute or firing some other event or purchase) occurred.\n\n2.19.2\n\nAdds warning when messaging doesn't succeed because SDWebImage is not integrated.\n\nFixes a bug where users who went from being eligible for triggered messages to not being eligible for any triggered messages didn't see their local triggers configuration get updated. This has already been fixed with a server-side update for affected versions; this update fixes the issue client-side.\n\nUpdates headers to be compatible with Swift 2.2.\n\n2.19.1\n\nAdds sample code for a universal link in Stopwatch.\n\nFixes the benign issue that caused the log message *** -[NSKeyedUnarchiver initForReadingWithData:]: data is NULL.\n\nFixes an issue where NULL campaign IDs in push messages (e.g. from a REST API push message without a specified campaign id) resulted in push-clicked triggers for triggered in-app messages not firing.\n\nFixes an issue where calling changeUser between identified users caused the read/unread state of the news feed cards of the old user to be set as the new user's read/unread states.\n\nFixes an issue where a user attribute value that had been set to multiple different values created a state that would not let you set the original value again. The bug was introduced in version 2.17.1.\n\nAnalytics are now logged for in-app messages and in-app message buttons with 'ABKInAppMessageNoneClickAction' click actions. ABKInAppMessageNoneClickAction is set when an in-app message on the dashboard has a click action that only closes the in-app message; formerly this did not count as a click.\n\n2.19.0\n\nAdds support for action-based, locally triggered in-app messages. In-app messages are now sent to the device at session start with associated trigger events. The SDK will display in-app messages in near real-time when the trigger event associated with a message occurs. Trigger events can be app opens, push opens, purchases, and custom events.\n\nDeprecates the old system of requesting in-app message display, now collectively known as 'original' in-app messaging, where messages were limited to displaying at app start.\n\n2.18.4\n\nFixes a Cocoapods issue that emerged during the release of 2.8.13.\n\n2.18.3\n\nMakes an internal update to provide functionality for SDKs that embed this library.\n\n2.18.2\n\nAdds warning logging if [Appboy sharedInstance] is called while in an uninitialized state.\n\nDeprecates the delegate method getResourceEndpoint: in ABKAppboyEndpointDelegate. The SDK will no longer call this delegate method.\n\n2.18.1\n\nFixes the nullability annotation warnings in the public header files.\n\nUpdates HelloSwift sample app to adopt swift 2.0.\n\n2.18\n\nAdds nullability annotations to all Braze public APIs.\n\nAdds a new delegate method to support custom push URI handle. For more detail, please see ABKPushURIDelegate.h;\n\nUpdates to auto-dismiss the Braze web view when a user returns to the app after following a link out of the app from an Braze web view.\n\nRemoves the deprecated method requestSlideupRefresh from Braze class.\n\n2.17.1\n\nFixes a bug where in certain conditions the SDK would resend user attributes that had already synced with the server.\n\n2.17\n\nAdds a new button clicked delegate method for HTML in-app message. The new delegate method also passes the URL of the clicked button.\n\nFixes the crash caused by inserting a nil object into an NSDictionary when parsing an event object.\n\nMakes the WebView background for HTML in-app messages transparent. Ensure HTML in-app messages you send to the device are created expecting a transparent background.\n\nApplies the Braze endpoint delegate methods to in-app messages' resource(zip and image) fetching.\n\nRemoves the Facebook button from Feedback page.\n\n2.16.1\n\nAdds the ability to log a custom event from an HTML in-app message. To log a custom event from an HTML in-app message, navigate a user to a url of the form appboy://customEvent?name=customEventName&p1=v2, where the name URL parameter is the name of the event, and the remaining parameters are logged as String properties on the event.\n\nAdds the support for customization of the background color of modal in-app messages.\n\nFixes an issue where daylight savings changes were not reflected in the user profile timezone.\n\nEnables users to input text into HTML in-app messages by allowing HTML in-app messages to be displayed with a keyboard on screen. For all other in-app messages, the in-app message will be dismissed when a keyboard is displayed.\n\n2.16\n\nAdds HTML In-App Message types.\n\nHTML In-App Messages consist of HTML and a url of a zipped archive of assets (e.g. images, css) to download locally which the HTML can reference. See InAppMessageUIViewController in our Stopwatch sample app for an example for the callbacks on the actions inside the WebView hosting the HTML In-App Message.\n\nDeprecates the method - (void) logSocialShare:(ABKSocialNetwork)socialNetwork and enum ABKSocialNetwork in the Appboy class. If you use logSocialShare: to track user's social account sharing, you can use logCustomEvent: instead.\n\nDeprecates the property bio in the ABKUser class.\n\n2.15.1\n\nFixes the warning \"full bitcode bundle could not be generated because XXX was built only with bitcode marker\".\n\n2.15\n\nUpdates the SDK to support iOS 9. In iOS9, previous versions of the SDK: 1) did not have bitcode support, 2) had a minor UI issue in in-app messages where the slideup messages were not docked on the bottom of the screen if they had one line of text, 3) failed to localize for zh-HK and zh-TW.\n\n2.14\n\nMigrates the SDK to ARC. If you are using our Apple Watch Extension and not using ARC, you must apply -fobjc-arc to the extension files.\n\nAdds configurable session timeout feature.\n\nAdds feedbackViewControllerBeforeFeedbackSent method to the feedback delegate protocols, which can be used to modify the feedback message before it's sent to Braze.\n\nAdds a setAttributionData method to ABKUser that sets an ABKAttributionData object for the user. To be used with attribution provider SDKs when attribution events are fired.\n\n2.13.2\n\nIncreases the number of supported currency codes from 22 to 171. All common currency codes are now supported. The full list of supported codes is available at Appboy.h.\n\n2.13.1\n\nUpdates the isUninstallTrackingNotification method in ABKPushUtils to return the correct value.\n\n2.13\n\nAdds an open-source Watch SDK to support data analytics on watchKit apps. You can use the Appboy-WatchKit SDK by downloading and adding the \"Appboy-WatchKit\" folder in your watchKit extension target. For more detail, please refer to ABWKUser.h and AppboyWatchKit.h.\n\nAdds an opt-in location service that logs background location events; adds ABKLocationManager with methods for allowing Braze to request location permission on your behalf and logging the current location. More information on the background location capabilities will be made available when dashboard support is released.\n\nAdds client side blocking of blacklisted attributes and events.\n\nAdds ABKPushUtils with method + (BOOL) isUninstallTrackingNotification:(NSDictionary *)userInfo; that can be used to detect if a content-available push is from Braze uninstall tracking (and shouldn't be acted upon).\n\nAdds a new property expiresAt in class ABKCard. The property is the unix timestamp of the card's expiration time. For more detail, please refer to ABKCard.h.\n\nStops collecting user's Twitter data automatically. You can pass a user's Twitter information to Braze by initialzing a ABKTwitterUser object with the twitter data, and setting it to [Appboy sharedInstance].user.twitterUser. For more information, please refer to ABKUser.h and ABKTwitterUser.h.\n\nStops logging foreground push as a push open as it is not delivered by the system.\n\nRemoves the feature of prompting a user to connect his/her social account. You can refer to the method promptUserToConnectTwitterAccountOnDeviceAndFetchAccountData in TwitterViewController.m to continue prompting the user to connect the Twitter account.\n\n2.12.2\n\nFixes the slideup in-app message display issue. When the host app sets the launch screen file, slideup in-app message from bottom sometimes didn't dock at the bottom of the screen on iPhone 6 and iPhone 6 Plus.\n\n2.12.1\n\nAdds font and font size customization to all in-app message's header and message text through NUI. You can customize in-app message's font by adding ABKInAppMessageSlideupMessageLabel, ABKInAppMessageeModalHeaderLabel,ABKInAppMessageModalMessageLabel, ABKInAppMessageFullHeaderLabel, ABKInAppMessageFullMessageLabel to your NUI nss style sheet.\n\nFixes news feed issue where no news feed cards resulted in the loading spinner remaining on screen.\n\nCleans up the console logging in Class ABKIdentifierForAdvertisingProvider.\n\n2.12.0\n\nFixes the incorrect path runtime error for users who integrate our pod as a dynamic framework. For SDK versions before 2.12, when you integrate Braze with use_frameworks! in the Podfile, the library is integrated as a dynamic framework and the Appboy.bundle is stored in a different path.\n\nChanges HelloSwift sample app to integrate Braze SDK as a dynamic framework.\n\nRemoves the subspecs from the podspec. This fixes the duplicate symbol error #24. If you are still using subspec like pod 'Appboy-iOS-SDK/AppboyKit' in your podfile, please make sure to change it to pod 'Appboy-iOS-SDK'.\n\n2.11.3\n\nAdds the ability to send and retrieve extra key-value pairs via a News Feed card.\n\nAdds the ability to define custom key-value properties on a custom event or purchase. Property keys are strings and values may be NSString, NSDate, or NSNumber objects.\n\nAdded the fix for an edge case when there are extra UIWindows at the time in-app message is going to display, the in-app message would have issue during dismissing.\n\n2.11.2\n\nUpdates the serialize and deserialize methods for in-app message classes. This is for use by wrappers such as Braze's Unity SDK for iOS.\n\n2.11.1\n\nFixes a UI issue in modal in-app messages displayed on iPads running iOS 6/7.\n\n2.11\n\nAdds support for modal and full screen style in-app messages. Also adds support for including fontawesome icons and images with in-app messages, changing colors on in-app message UI elements, expanded customization options, and message resizing for tablets. Please visit our documentation for more information.\n\nUpdates the completionHandler signature in getActionWithIdentifier:forRemoteNotification:completionHandler: to match the comletionHandler passed by the system in method - (void) application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)userInfo completionHandler:(void (^)())completionHandler.\n\n2.10.2\n\nAdds the fix for an edge case when there are extra UIWindows at the time in-app message is going to display, the in-app message would have issue during dismissing.\n\n2.10.1\n\nFixes a bug which would cause the host app to crash when a deep link was launched from a push notification. In versions 2.10.0 and 2.9.4, if the host app used [[Appboy sharedInstance] registerApplication: didReceiveRemoteNotification:]; instead of [[Appboy sharedInstance] registerApplication: didReceiveRemoteNotification: fetchCompletionHandler:];, opening a push with a deep link would crash the host app in some circumstances.\n\n2.10.0\n\nUpdates the minimum deployment targets of Braze iOS SDK to iOS 6.0. For apps supporting lower iOS versions, please continue to use 2.9.+ versions of the Braze SDK.\n\nStops collecting user's Facebook data automatically. You can pass a user's Facebook information to Braze by initializing a ABKFacebookUser object with the facebook data, and set it to [Appboy sharedInstance].user.facebookUser. For more information, please refer to ABKUser.h and ABKFacebookUser.h.\n\nRemoves Facebook SDK dependent builds. Now there is a single library - AppboyKit - and a single Pod without functional subspecs - Appboy-iOS-SDK (note we now have both the subspecs pointing at the same library). Please update your Podfile to pod 'Appboy-iOS-SDK if you are integrating Braze with Cocoapods.\n\nRemoves the feature of prompting a user to connect his/her Facebook account. You can refer to the method promptUserToConnectFacebookAccountOnDeviceAndFetchAccountData in FacebookViewController.m to continue prompting the user to connect the Facebook account.\n\n2.9.6\n\nAdds the fix for an edge case when there are extra UIWindows at the time in-app message is going to display, the in-app message would have issue during dismissing.\n\n2.9.5\n\nFixes a bug which would cause the host app to crash when a deep link was launched from a push notification. In versions 2.9.4, if the host app used [[Appboy sharedInstance] registerApplication: didReceiveRemoteNotification:]; instead of [[Appboy sharedInstance] registerApplication: didReceiveRemoteNotification: fetchCompletionHandler:];, opening a push with a deep link would crash the host app in some circumstances.\n\n2.9.4\n\nAdds a major performance upgrade that reduces CPU usage, memory footprint, and network traffic.\n\nAdds 26 additional languages to localization support for Braze UI elements.\n\nAdds support for deep linking from APNS push notification clicks.\n\nAdds ability to customize the font of Feedback text using NUI with NUI class name ABKFeedbackTextView.\n\nFixes the feedback page UI issues in iOS 8: when the device's orientation is UIInterfaceOrientationPortraitUpsideDown, the contact info bar was off.\n\nFixes in-app messages to display correctly in landscape mode in iOS 8.\n\nUpdates the SDK to adopt the latest SDWebImage protocol methods.\n\nRemoves the \"required\" labels on the feedback page.\n\n2.9.3\n\nAdds a new method - (void) registerApplication:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)notification fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler to support push with background fetch. This method should be called in - (void) application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler. For more details, please refer to Appboy.h.\n\nAdds a HelloSwift sample app to demo how to use Braze in a swift app.\n\nAdds a new NSString property \"displayPrice\" in ABKCrossPromotionCard to enable server side price localization.\n\nFixes a bug of when sessions were being created when the app opened in the background.\n\nFixes a bug where requesting the news feed with a news feed open led to card impressions not updating until the next feed refresh.\n\n2.9.2\n\nAdds the ability to turn off Braze's automatic location collection by setting the ABKDisableAutomaticLocationCollectionKey boolean in AppboyOptions in startWithApiKey:inApplication:inApplication:withAppboyOptions:.\n\nAdds the ability to send location tracking events to Braze manually using setLastKnownLocationWithLatitude:longitude:horizontalAccuracy: and setLastKnownLocationWithLatitude:longitude:horizontalAccuracy:altitude:verticalAccuracy: on the ABKUser. this is intended to be used with ABKDisableAutomaticLocationCollectionKey set to true in the AppboyOptions so that locations are only being recorded from a single source.\n\nFixes a news feed bug: sometimes the spinner keeps spinning on the screen even after the news feed card image is displayed.\n\nUpdates sample app core location fetching code based on the changes in iOS 8.\n\n2.9.1\n\nFixes a news feed bug: When a user refreshed the news feed by swiping down, if the total number of cards in the feed was going to be reduced by the refresh, the app would crash.\n\n2.9.0\n\nFixes an App Store validation error introduced when the App Store started accepting submissions for iOS8. This was done by changing the packaging of the Braze framework to include a universal binary and a resource bundle (instead of combining them both together in a universal framework). Due to this change, Cocoapod integration is even more highly recommended than before to fully automate integration.\n\n2.8.1\n\nAdds a new method - (void) getActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)userInfo to collect analytics data for push actions in iOS 8. It should be called in the UIApplication delegate method - (void) application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)userInfo completionHandler:(void (^)())completionHandler. For more details, please refer to Appboy.h.\n\nNew Custom Attribute Data Type (Array): Braze now supports custom attributes which contain an array of string elements. In addition, we also provide methods for adding or removing an string element from an array type custom attribute. For more information, please refer to ABKUser.h.\n\nUsers can now pull down on the Braze Newsfeed to refresh the content on iOS version 6.0 or later.\n\nRestricts product identifier string to 255 characters for method - (void) logPurchase:(NSString *)productIdentifier inCurrency:(NSString *)currencyCode atPrice:(NSDecimalNumber *)price and - (void) logPurchase:(NSString *)productIdentifier inCurrency:(NSString *)currencyCode atPrice:(NSDecimalNumber *)price withQuantity:(NSUInteger)quantity.\n\nNews feed card now can update the card height and display a full image based on the image ratio. Card image ratio used to be a fix number and images were aspect stretched to fit in the views.\n\nThe right and left margins in the news feed are now touchable areas for scrolling.\n\nCard titles have been improved and will now truncate with \"...\" when they are more than 2 lines.\n\n2.8\n\nRenames the class names of news feed cards to match the names on dashboard:\n\nv2.8 v2.7 ABKBannerCard ABKCardBanner ABKCaptionedImageCard ABKCardCaptionedMessage ABKCrossPromotionCard ABKCardCrossPromotionSmall ABKClassicCard ABKCardNews ABKTextAnnouncementCard ABKCardTextAnnouncement\n\nAdds email and push notification subscription types for a user. Subscription types are explicitly opted in, subscribed, and unsubscribed. The previous email boolean subscribe method has been deprecated.\n\nAdds custom slideup orientation support. You can now ask the slideup to only support certain orientations. For more details on slideup custom orientation support, please refer to ABKSlideupController.h.\n\nAdds quantity parameter as an option when logging purchase. The quanlity should be an unsigned interger greater than 0 and no larger than 100. For more information, please refer to Appboy.h.\n\nAdds a class method in ABKCard to deserialize a given dictionary to a card. This is for use by wrappers such as Braze's Unity SDK for iOS. Please refer to ABKCard.h for more information.\n\n2.7\n\nNews Feed Update\n\nExposes raw card data in ABKFeedController\n\nDevelopers can use the raw card data to creat custom user interfaces for the news feed. For more details on the card data, please refer to ABKFeedController.h.\n\nAddes support for categories on cards and news feed view controllers.\n\nCategories include Announcement, Advertising, Social, News and No Category. You can get cards of certain categories from ABKFeedController, or you can make ABKFeedViewController only display certain categories of cards.\n\nUses SDWebImage to handle images downloading and caching in the news feed, display a spinner while downloading images and show a default image when no image available.\n\nAdds support for asynchronous image downloading in the news feed, asynchronous memory and disk image caching with automatic cache expiration handling.\n\nAdds news feed view controller delegate to support custom handling of card clicks on news feed.\n\nThe app can customize click actions from the feed and display any card link in their own user interface.\n\nSlideup Changes\n\nUpdates ABKSlideupControllerDelegate method onSlideupClicked to return a BOOL value to indicate if Braze should continue to execute the click action.\n\nStops logging slideup click when the slideup click action is ABKSlideupNoneClickAction.\n\nFeedback Changes\n\nUpdates the ABKFeedbackViewControllerPopoverContext so now it should be used in all cases where the feedback page displayed in a popover, including the case that the feedback is push on a navigation controller in a popover.\n\nFixes the ABKFeedbackVIewControllerModalContext cancel button delegate issue.\n\nFixes the form sheet style ABKFeedbackViewControllerModalContext layout issue.\n\nOther Changes\n\nAdds API to request feed and slideup refresh.\n\nAdds API to log news feed displayed and feedback displayed.\n\nAllows updating analytics data even using customized news feed or feedback user interfaces.\n\nUpdates badge count policy to only update when app is foreground.\n\nAdds clearTwitterDataWhenNoDataOfTwitterIdentifier to ABKUser, allowing developer to clear user data when a user disconnectes their twitter accounts.\n\nUpdates custom key and string value for custom attributes to automatically trim.\n\n2.6.3\n\nUpdates the SDK to authenticate with the Twitter API using SSL.\n\n2.6.2\n\nFixes a news feed card click tracking issue.\n\nUpdates data flush time interval.\n\n2.6.1\n\nFixes a minor display problem that affected news items with no image or link for version 2.6.\n\n2.6\n\nBraze iOS SDK now supports 64 bit as well. The minimum deployment targets that Braze iOS SDK supports is iOS 5.1.1.\n\nThe Braze iOS SDK will now allow function with 64-bit apps. This version of the SDK only supports iOS 5.1.1+. Legacy iOS apps should continue to use version 2.5 of the SDK.\n\nYou can install legacy versions of our SDK via CocoaPods by following changing the podfile to include something like the following example pod 'Appboy-iOS-SDK/AppboyKit', '~> 2.5'.\n\n2.5.1\n\nFixes a minor display problem that affected news items with no image or link for version 2.5.\n\n2.5\n\nLocalization is now supported in version 2.5 of the Braze SDK. We have provided .string files for English, Simplified Chinese and Traditional Chinese. You can also optionally override our Braze's default LocalizedAppboyUIString.strings right within your app's Localizable.Strings file in much the same way you would do an override in CSS. To do so, copy the key and string pair into your Localizable.Strings file and edit the string as you so desire.\n\nFor your convenience our CocoaPod integrates the LocalizedAppboyUIString.strings files for the three aforementioned languages. If you do not wish to use one or more of these languages, you can feel free to delete these files from your project.\n\nSlideup Upgrade\n\nBraze version 2.5 provides a substantial upgrade to the slideup code and reorganization for better flexibility moving forward, but at the expense of a number of breaking changes. We've detailed the changes in this changelog and hope that you'll love the added power, increased flexibility, and improved UI that the new Braze slideup provides. If you have any trouble with these changes, feel free to reach out to success@braze.com for help, but most migrations to the new code structure should be relatively painless.\n\nNew Slideup Controller\n\nThe property slideupController has been added to the Braze object. Please see ABKSlideupController.h for details.\n\nThe delegate property allows you to specify a delegate for the slideup.\n\nThis replaces slideupDelegate which has been removed.\n\nThe displayNextSlideupWithDelegate: method displays the next available slideup with the specified delegate.\n\nThis replaces provideSlideupToDelegate: which has been removed from Braze.\n\nThe slideupsRemainingOnStack method returns the number of slideups that are waiting locally to be displayed.\n\nThe addSlideup: method allows you to display a slideup object with custom content. This is useful in testing or if you want to use the Braze slideup's UI/UX with another notification system that you are using.\n\nClicks and impressions of slideups added by this method will not be collected by Braze.\n\nhideCurrentSlideup: method will remove any slideup currently on screen, with or without animation.\n\nNew Slideup Properties and Methods in ABKSlideup.h\n\nThe following properties and methods all belong to the ABKSlideup object. Please see ABKSlideup.h for more information.\n\nNew Properties\n\nThe extras property carries additional data within key value pairs that have been defined on the dashboard, just like a push notification. Braze does nothing with the extras property, any additional behavior is at your discretion.\n\nThe slideupAnchor property defines whether the slideup originates from the top or the bottom of the screen.\n\nThe slideupDismissType property controls whether the slideup will dismiss automatically after a period of time has lapsed, or if it will wait for interaction with the user before disappearing.\n\nThe slideup will be dismissed automatically after the number of seconds defined by the newly added duration property if the slideup's slideupDismissType is ABKSlideupDismissAutomatically.\n\nThe slideupClickActionType property defines the action behavior after the slideup is clicked: displaying a news feed, redirect to a uri, or nothing but dismissing the slideup. This property is read only. If you want to change the slideup's click behavior, you can call one of the following method: setSlideupClickActionToNewsFeed, setSlideupClickActionToUri: or setSlideupClickActionToNone.\n\nThe uri property defines the uri string that the slide up will open when the slideupClickActionType is ABKSlideupRedirectToURI. This is a read only property, you can call setSlideupClickActionToUri: to change it's value.\n\nNew Methods\n\nlogSlideupImpression and logSlideupClicked have been added to allow you to report user interactions with the slideup in the case that you've fully customized the slideup experience and Braze is not handling the interactions.\n\nsetSlideupClickActionToNewsFeed, setSlideupClickActionToUri: and setSlideupClickActionToNone have been added to allow you to change the slideup's click action behavior. setSlideupClickActionToUri: accepts a uri string as parameter and required the given uri string is valid.\n\nDelegate Method Changes\n\nAll former Braze slideup delegate methods have been depreciated and removed. In their place Braze has added new slideup delegate methods within ABKSlideupControllerDelegate.h.\n\nonSlideupReceived: is called when slideup objects are received from the Braze server.\n\nbeforeSlideupDisplayed:withKeyboardIsUp: is called before slideup objects are displayed, the return value determines whether the slideup will be displayed, queued or discarded.\n\nslideupViewControllerWithSlideup: This delegate method allows you to specify custom view controllers in which your slideups will be displayed.\n\nThe custom view controller should be a subclass of ABKSlideupViewController.\n\nAlternatively, it can also be an instance of ABKSlideupViewController.\n\nThe view of the returned view controller should be an instance of ABKSlideupView or its subclass.\n\nFor integration examples of a custom slideup view controller, see the CustomSlideupViewController class in Braze's sample app Stopwatch.\n\nonSlideupClicked: is called when a user clicks on a slideup. We recommend that you specify behavior on click via the dashboard, but you can additionally specify behavior on click by defining this delegate method.\n\nonSlideupDismissed: is called whenever the slideup is dismissed regardless of whether the dismissal occurs automatically or via swipe. This method is not called if the user clicks on the slideup. If the user clicks or taps on the slideup, onSlideupClicked is called instead.\n\nNew Options on the Dashboard\n\nSlideup behavior on click can now be set within the dashboard to open a modal news feed, open a URI within a modal, or do nothing.\n\nThe following properties can be set remotely from the Braze Dashboard:\n\nextras\n\nslideupAnchor\n\nslideupDismissType\n\nslideupClickActionType\n\nuri\n\nNews Feed Changes\n\nNews feed items are now cached in offline storage, allowing the news feed to render even when no internet connectivity is available. Braze will still automatically try to pull down a new news feed when a session opens, even if an offline feed is available.\n\nEach card now has a maximum height of no more than 2009 points to avoid any performance issues as recommended by iOS developer guidelines.\n\nThe entirety of captioned image cards are now clickable. Formerly, only the link itself was clickable.\n\nWhen the news feed is brought to the foreground, it will now automatically check for new content if the cached version of the feed was received more than 60 seconds ago. — The width of news feed cards as well as the minimum margin between a"
    }
}