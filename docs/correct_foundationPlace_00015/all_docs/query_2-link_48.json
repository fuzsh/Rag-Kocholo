{
    "id": "correct_foundationPlace_00015_2",
    "rank": 48,
    "data": {
        "url": "https://github.com/mamedev/historic-mess/blob/master/sysinfo.dat",
        "read_more_link": "",
        "language": "en",
        "title": "historic-mess/sysinfo.dat at master Â· mamedev/historic-mess",
        "top_image": "https://opengraph.githubassets.com/a50a50ba0eeec148ceebfa3746cceabf880f573d4d454b498b727008ee4dfbbb/mamedev/historic-mess",
        "meta_img": "https://opengraph.githubassets.com/a50a50ba0eeec148ceebfa3746cceabf880f573d4d454b498b727008ee4dfbbb/mamedev/historic-mess",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "MESS history from 0.1 to 0.113 thanks to @fesh0r. Contribute to mamedev/historic-mess development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/mamedev/historic-mess/blob/master/sysinfo.dat",
        "text": "# MESS System Information File\n\n# All corrections and submissions are welcome. Please zip either a patch file or the entire\n\n# modified file and send it to:\n\n# Hobie Troxell [ht1848@yahoo.com]\n\n# This file contains the basic documentation for most of the drivers presented in the MESS\n\n# distribution. Please read the readme.txt, mess.txt and messnew.txt prior to reading this\n\n# supplementary documentation. This file should be placed in the same directory as the MESS\n\n# executable when using the DOS version of MESS.\n\n# Driver entries are usually divided into sections such as: Usage, Features, Links, Known Issues,\n\n# History and Trivia, and MESS Emulation State.\n\n# History and Trivia - This section contains various background pieces for a system. Much of the\n\n# information in these sections was kindly provided by Thierry Schembri and Olivier Boisseau of the\n\n# \"Old-computers.com Museum\". Visit the excellent site at: www.old-computers.com.\n\n# Features - Usually a quick list of important or unique features of that system.\n\n# Usage - This section lists any helpful commands for the computer or console in question,\n\n# such as disk operating system and file loading BASIC commands. This information is not\n\n# intended to replace a proper owner's manual for the system in question, and only contains\n\n# the most simple commands that can also be found on any of dozens of websites devoted to\n\n# the system.\n\n# Known Issues - This section lists any known issues or bugs for the driver. These will be\n\n# fixed as time and knowledge permit. Please be patient. If you have information that may\n\n# help the MESS team resolve these issues go to www.mess.org.\n\n# MESS Emulation State: This section highlights the overall status of the MESS driver. Some system\n\n# drivers are TESTDRIVERS.\n\n#---------------------------------------------------------------------------------------------#\n\n$info=a2600\n\n$bio\n\nAtari 2600 Video Computer System\n\nHistory and Trivia:\n\nThe Atari Video Computer System (VCS) was released in 1977 at a suggested retail price of\n\n$299, which dropped quickly as sales soared; about 340,000 systems were sold the first year\n\nalone. Joe Decuir, Steve Mayer and Ron Milner designed the VCS. The Atari VCS was\n\ndeveloped under the project codename \"Stella\". The VCS later became known, both commonly\n\nand officially as the Atari 2600 (from the model number CX2600). It is rumored that the number\n\n2600 was chosen because 2600 cycles was a prominent long distance access tone, and that\n\none of the developers had created devices that would trick pay phones into granting long\n\ndistance access as a hobby.\n\nFeatures:\n\nResolution: 160 x 260 (horz.) at 60.00 Hz\n\nCPU: MOS 6507 1.19 MHz\n\nGraphics Clock: 1.19 MHz\n\nBits: 8\n\nROM: 4k max\n\nRAM: 128 bytes, in VLSI\n\nVideo Display Processor: Stella\n\nSprites: 32\n\nColors: 256 (static)\n\nSound Processor: Two Channel Square or Noise (TIA)\n\nCartridge ROM: 2k up to 64k\n\nLinks:\n\nAtari Age - www.atariage.com\n\nAtari Historical Society - www.atari-history.com/a2600.html\n\nMESS Emulation State:\n\n1) Restricted to 2KB and 4KB carts\n\n2) Supports NTSC games only\n\n3) Limited compatibility\n\n4) No support for keypad controls\n\n5) Dip switch used to select joystick or paddles\n\nOther emulators:\n\nPCAE (PC Atari Emulator) - http://www.classicgaming.com/pcae/\n\nz26 - http://www.whimsey.com/z26/\n\nx26 (z26 front-end) - http://www.wintersolace.com/\n\nStella - http://stella.sourceforge.net/\n\nStellaX - http://www.emuunlim.com/stellax/\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=a400\n\n$bio\n\nAtari 400 Home Computer\n\nUsage/Known Issues:\n\nRequires full keyboard emulation. At startup, full keyboard emulation mode is enabled by\n\ndefault. Whilst in full keyboard emulation mode, some key associated functionality may be\n\ndisabled (like the ESC key for EXIT). The keyboard emulation mode is toggled using the\n\nscroll_lock key.\n\nMost disk and cartridge images should work, though some graphic issues may exist. Note that\n\nthe Atari 400 has less memory than the Atari 800, and some disk images may not work as a\n\nconsequence; this is not a bug in the emulation.\n\nHistory and Trivia:\n\nThe Atari 400 and 800 were the first home computers to use custom coprocessors and the first\n\nto use \"sprites\" and special video interruptions like display lists, features that will be\n\nimplemented several years after on the Commodore Amiga. It offered high graphic resolution,\n\nlots of colors and great sound capabilities, more than other computers could do then! The\n\ntwo models had same characteristics, the 400 is the low-cost version, it has only 16 KB\n\n(instead of 48 KB), one cartridge port (two for the 800) and a membrane keyboard (a\n\ntypewriter style keyboard one for the 800).\n\nEmulators:\n\nAtari800 (Unix, Amiga, MS-DOS, Atari TT/Falcon, SDL, WinCE) - http://atari800.sourceforge.net/\n\nAtari++ - http://www.math.tu-berlin.de/~thor/atari++/\n\nAtari800Win PLus - http://www.a800win.atari-area.prv.pl/\n\nRaibow (historical) - http://www.chrislam.co.uk/\n\nPC Xformer (historical)\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=a5200\n\n$bio\n\nAtari 5200 SuperSystem\n\nUsage/Known Issues:\n\nKeyboard input is a little difficult, using a joystick or mouse is recommended.\n\nMost games are playable. See a5200.hsi for a fairly exhaustive compatibility list.\n\nHistory and Trivia:\n\nThe Atari 5200 was introduced in 1982, and was actually designed to be a competitor to the\n\nIntellivision, before ColecoVision entered the market. Developed under the name of \"Pam\"\n\n(Atari, at the time, typically named projects after well-endowed female employees), Atari\n\nconsidered releasing it with that moniker; PAM in this case an acronym for \"Personal Arcade\n\nMachine\".\n\nThe 5200 shared much of the architecture of the Atari 400/800 computers, but featured a\n\ndifferent cartridge connector and completely different controllers. Non-centering analogue\n\njoysticks which offered a full 360 degrees of mobility, were both innovative and unreliable.\n\nOther controller features included a keypad, and a ahead-of-it's-time pause button.\n\nThe Atari 5200 suffered from it's initial incompatibility with the VCS/2600 (an adapter was later released) and fierce competition from Coleco. When Warner Communications sold Atari\n\nCorp. to the Tramiels in 1984, they quickly removed it from the market.\n\nEmulators:\n\nJum52 (Jum's A5200 Emulator) - http://www.geocities.com/james7780/emulators/emu5200.html\n\nBecause of it's hardware similarity to 400/800/XL/XE computers line - 5200 emulation is also included in:\n\nAtari800 - http://atari800.sourceforge.net/\n\nAtari++ - http://www.math.tu-berlin.de/~thor/atari++/\n\nAtari800Win PLus - http://www.a800win.atari-area.prv.pl/\n\nRaibow - http://www.chrislam.co.uk/\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=a7800\n\n$bio\n\nAtari 7800 ProSystem\n\nKnown Issues:\n\nThe Pause key \"P\" is hard-coded and not able to be re-mapped.\n\nMost games work fine, but a few have graphic and playability issues. See a7800.hsi for a\n\nfull compatibility list.\n\nHistory and Trivia:\n\nOriginally developed in 1984 as the Atari 3600, the Atari 7800 Prosystem was released to the\n\nUS market in 1986, in an attempt to compete in a revitalized home videogame market. The 7800\n\nwas actually designed by Gencomp as part of a lawsuit settlement (Gencomp had been sued for\n\nreleasing a speedup chipset for Atari coinop Missile Command).\n\nThe 7800 was compatible with pre-existing Atari 2600 game program cartridges, without the need\n\nfor expansion modules or turning switches, but was also designed to use enhanced 7800-only\n\ncartridges such as the pack-in \"Pole Position 2\". (n.b., only the 7800-specific cartridges are\n\ncurrently supported in MESS.) Many peripherals, including a computer/keyboard and high score\n\nsaving cartridge were planned but never released.\n\nUnfortunately for Atari, the system did poorly in the late 1980's market dominated by Nintendo.\n\nwww.atari-history.com has this interesting anecdote: \"In the summer of 1984 the first 5,000\n\nAtari 7800's had just been built in the new El Paso assembly plant. The production line\n\nmanager, Brad Saville was eager to meet with Jack Tramiel to show him the new flagship Atari\n\nvideo game console. The meeting ended abruptly as Jack Tramiel was quoted \"Get your pollution\n\nout of here! We make computers now and we don't want your garbage.\" The line manager was fired\n\n2 days later. About 8-9 months later the line manager received a phone call from Atari asking\n\nhim as to the whereabouts of the die molds for the Atari 7800. The ex-line manager responded\n\nthat he did in fact know where they were and for $50/hour for about 200 to 300 hours of his\n\ntime he would remember where they were and find them. The Atari Corp. representative who\n\ncalled was infuriated and informed the former production line manager that Atari's lawyers\n\nwould be in contact with him. He never heard from Atari again.\"\n\nLinks:\n\nwww.Atari7800.org\n\nEmulators:\n\nEMU7800 - http://emu7800.sourceforge.net/\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=a800\n\n$bio\n\nAtari 800 Home Computer\n\nKnown Issues:\n\nRequires full keyboard emulation. At startup, full keyboard emulation mode is enabled by\n\ndefault. Whilst in full keyboard emulation mode, some key associated functionality may be\n\ndisabled (like the ESC key for EXIT). The keyboard emulation mode is toggled using the\n\nscroll_lock key.\n\nThe Atari800 driver now has two ROM slots. It really had two slots, so the code was modified\n\nto optionally read the second part of a 16K ROM from the second cartridge filename provided\n\n(right slot). The previous version had a800_cartridge_32k flag which was wrong. Cartridges\n\nare either 8K or 16K, so that was renamed to ..._16k too ;)\n\nMost disk and cartridge images should work, though some graphic issues may exist.\n\nThe Atari 800XL driver (a800xl) is not currently working.\n\nHistory and Trivia:\n\nThe Atari 400 and 800 were the first home computers to use custom coprocessors and the first\n\nto use \"sprites\" and special video interruptions like display lists, features that will be\n\nimplemented several years after on the Commodore Amiga. It offered high graphic resolution,\n\nlots of colors and great sound capabilities, more than other computers could do then! The\n\ntwo models had same characteristics, the 400 is the low-cost version, it has only 16 KB\n\n(instead of 48 KB), one cartridge port (two for the 800) and a membrane keyboard (a\n\ntypewriter style keyboard one for the 800).\n\nEmulators:\n\nAtari800 (Unix, Amiga, MS-DOS, Atari TT/Falcon, SDL, WinCE) - http://atari800.sourceforge.net/\n\nAtari++ - http://www.math.tu-berlin.de/~thor/atari++/\n\nAtari800Win PLus - http://www.a800win.atari-area.prv.pl/\n\nRaibow (historical) - http://www.chrislam.co.uk/\n\nPC Xformer (historical)\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=adam\n\n$bio\n\nColecoAdam (1982)\n\nMESS Emulation State:\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=advision\n\n$bio\n\nEntex Adventurevision\n\nKnown Issues:\n\nSound is not currently supported.\n\nAll four games are playable.\n\nHistory and Trivia:\n\nThe Adventure Vision was a cartridge based, electronic handheld video game that was\n\nmanufactured by Entex Industries in 1982. It measured about 13 1/4\" X 10\" X 9\" and used\n\none vertical strip of 40 red LEDs and a spinning mirror to produce a screen with a 150X40\n\nresolution drawn at 15 frames/sec. There were only four cartridges produced for it: Defender,\n\nTurtles, Super Cobra, and an Asteroids clone, Space Force.\n\nVisit http://www.adventurevision.com for more information.\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=aim65\n\n$bio\n\nRockwell AIM-65\n\nVery early computer\n\nFeatures:\n\nIntegrated 20 digit (16segment) display\n\nFull size keyboard\n\nIntegrated printer\n\nConnector for tty input/output\n\nTape interface\n\nKnown Issues:\n\nDisplay and keyboard working\n\nUsable picture of the display with its white frame as artwork would be nice.\n\nWould suffer from support for intelligent terminals as tty equipment.\n\nStopped. For me it is much to cryptic to operate, and therefore not interesting for me anymore.\n\nMESS Emulation State:\n\nThis system is a TESTDRIVER.\n\nContributors:\n\nRichard A. Cini: provided help and pictures\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=amiga\n\n$bio\n\nCommodore Amiga\n\nKnown Issues:\n\nSound is not currently supported.\n\nThe driver is now working fairly well, though some games may need more memory than currently\n\nemulated.\n\nHistory and Trivia:\n\nThe conceptor of the Amiga 1000 was Jay Miner, who created the Atari 800 many years before.\n\nHe wanted to make the most powerful computer ever, then he joined a little California\n\ncompany called Amiga. He used the principle of the three coprocessors (again) to help the\n\nmain processor. At the beginning, the Amiga had only 64 kilobytes of RAM!, Atari wanted to\n\nbuy the Amiga but finally, Commodore succeeded to buy it (then there was a lawsuit, which\n\nCommodore won). It was meant to be a competitor to the Atari 520 ST. The operating system\n\nwas done by Metacomco, a British company who specialized in the 68000 processor (they also\n\nmade languages for the Sinclair QL). It is a fully multitasking system which looks like\n\nUNIX with a graphical user interface. It was the very first personal computer with great\n\ngraphics and sound capabilities with a GUI environment. Amiga BASIC was written by\n\nMicrosoft (like most other versions of BASIC). The Amiga 1000 began to lose popularity one\n\nyear later with the creation of its two main successors: the Amiga 500 and the Amiga 2000.\n\nThere were two versions of the Amiga 1000. The first one, just called \"Amiga\", was sold\n\nonly in USA, had a NTSC display, and didn't have the video modes EHB and HAM, later\n\nversions would have this built in. The second one, called \"Amiga 1000\" (to avoid confusion\n\nwith its successor, the Amiga 2000) had a PAL display, enhanced video modes\n\n(HAM & EHB) and was built in Germany.\n\nMESS Emulation State:\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=apexc\n\n$bio\n\nAPEXC (All Purpose Electronic X-Ray Computer)\n\nUsage Notes:\n\nYou should specify a cylinder image with code to run in it. Arguably, APEXC does not require such\n\nan image, since you may enter code in the control panel, but this would be a pain in the ass.\n\nIf the program you run use punched tape I/O, you may specify tape image files. The first unit is\n\nread-only, the second unit is write-only.\n\nOn a CLI MESS port, the resulting MESS command line may look like this:\n\nmess apexc -cyln ram_image.apc -ptap input.tap output.tap\n\nNote that, when you quit MESS or the APEXC driver, the contents of the cylinder are saved\n\nto the image you specified. This simulates the behavior of the APEXC, where the cylinder image\n\nIS the working memory. If you don't like this behavior, you may either write-protect\n\nthe cylinder image file, or keep a backup copy elsewhere on your hard disk (highly recommended).\n\nNote that the APEXC CPU is stopped on start-up, so that you may check the machine state and enter\n\nthe start-up program address.\n\nOn start-up, the instruction at address 0 is loaded into the Control Register, then the machine\n\nis stopped. To run the program starting at address 0, just press the Run/stop switch\n\n(the Run/stop switch is mapped to the Return key on the main keyboard).\n\nTo start a program at another address, you need to load the first instruction into the Control\n\nregister with the control panel. To do so, use keys 1 through 0 on the main keyboard to enter\n\nthe 10-bit address into the 10 most significant bits of the Control Panel display, and set\n\nother bits to 0 with the three rows of keys under 1 through 0 (each key toggles a bit in the\n\ncontrol panel display; don't be intimidated if it sounds complicated, it should eventually\n\nappear straight-forward when you try, provided you know what binary scale is). You have thus\n\ngenerated a Stop instruction pointing to the first instruction of the program. Write this\n\ninstruction into the Control Register, by holding Left Shift pressed and pressing 1 on\n\nthe numeric keypad. You should now press the Run/stop switch twice (mapped to the Return key\n\non the main keyboard). First press executes the stop order, but fetches the first\n\ninstruction of the program into the control register. Second press starts running the program,\n\nstarting with the first instruction.\n\nControl panel usage:\n\nThis is relatively simple. The Control Panel may hold and display a 32-bit value. Display is made\n\nof 32 lamps, which show the current value in binary scale (each lamp represents one bit). Hence,\n\nthe normal usage is loading the value you want to edit into the control panel, editing it,\n\nthen saving it to the proper location.\n\nDefault key map:\n\nRun/stop switch: Return key on main keypad\n\nThe next 6 keys may be used alone to read the register into the control panel display, or\n\nin combination with the Left Shift key to write the value in the control panel display into the\n\nregister.\n\nRead/write Control Register: 1 key on numeric keypad\n\nRead/write Accumulator: 2 key on numeric keypad\n\nRead/write Register: 3 key on numeric keypad\n\nRead/write current Head Block (never used on APEXC - used for bank switching): 4 key on numeric keypad\n\nRead/write Memory Location: 5 key on numeric keypad\n\nRead/write memory location pointed to by ML register: 6 key on numeric keypad\n\nwrite instead of reading: Left Shift key (when you press one of the 6 keys above, the\n\ndesignated register is read into the control panel display, unless this key is being pressed,\n\nin which case the value in the control panel display is written into the register)\n\nToggle bits 1 through 10 in display: keys 1 through 0 on the main keyboard\n\nToggle bits 11 through 20 in display: key row directly below the former on the main keyboard\n\n(Q through P if your keyboard is QWERTY)\n\nToggle bits 21 through 30 in display: key row directly below the former on the main keyboard\n\n(A through ; if your keyboard is QWERTY)\n\nToggle bits 31 and 32 in display: key row directly below the former on the main keyboard\n\n(W and X if your keyboard is QWERTY)\n\nKnown Issues:\n\nThe driver should work correctly as of MESS .37b15. Still, it needs development tools, sample\n\ncode and usage instructions desperately. I have tons of sample code (which was the reason for\n\nstarting to write this driver), but still need to retype it. I have started work on an assembler,\n\ntoo.\n\nSince I have no description of the control panel of an actual APEXC, I implemented a common-place\n\ncontrol panel, so this part of the emulation is not accurate. I don't even know how an actual\n\nAPEXC was operated, and the procedures I describe above are not accurate, either.\n\nHistory and Trivia:\n\nThe APEXC was designed by Andrew D. Booth at Birkbeck College, London, in the early 50's.\n\nFrom 1943 on, he started working on the determination of crystal structures using X-ray diffraction\n\ndata. The computations involved were extremely tedious and there was ample incentive for automating\n\nthe process. In 1947, along with his collaborator and future spouse Kathleen Britten, he spent\n\na few months with von Neumann's team, which was the leading edge in computer research at the time.\n\nBooth designed an electromechanical computer, the ARC, in the late 40's. Later on, they built\n\nan experimental electronic computer named 'SEC' (Simple Electronic Computer), and finally the APEC\n\n(All-Purpose Electronic Computer) series.\n\nAccording to a 1956 document, the APEC series included the following machines:\n\n* APE(X)C: Birkbeck College, London (before 1955)\n\n* APE(N)C: Board of Mathematical Machines, Oslo ('N' must stand for 'Norway')\n\n* APE(H)C: British Tabulating Machine Company (No idea what 'H' can stand for)\n\n* APE(R)C: British Rayon Research Association ('R' must stand for 'Rayon')\n\n* UCC: University College, London (circa January 1956)\n\n* MAC (Magnetic Automatic Calculator): \"built by Wharf Engineering Laboratories\" (February 1955)\n\n* The HEC (Hollerith Electronic Computer - silly name invented by BTM\n\ndirectors), built by the British Tabulating Machine Company (later to become\n\nInternational Computers and Tabulators (ICT), then International Computers\n\nLimited (ICL)), a commercial machine sold in several models (I have heard of\n\nHEC 1, HEC 2, HEC 2M (no idea what the difference with HEC 2 is) and HEC 4)\n\n(before 1955)\n\nOnly one of each of these machines was built, with the exception of HEC (and possibly MAC)\n\nwhich were commercial machines produced in small series. They were similar in design,\n\nwith various small differences, mostly in I/O equipment (either punched-card machines - APEXC,\n\nAPEHC - or teletypers (keyboard and printer, and paper tape reader and puncher) - APERC, APENC).\n\nAlso, the UCC had 8k words of storage, instead of 1k word for other machines, and the MAC\n\nused germanium diodes in replacement of many tubes. The HEC used standard\n\nHollerith punch cards; the HEC 4 had a printer, too, and it featured several\n\ninstructions (divide) and registers not found on the APEXC.\n\nI am sorry I know little more about Booth, his team, and the history of these machines.\n\nTechnical Description:\n\nThe APEXC is an incredibly simple machine.\n\nInstruction and Data words are always 32-bit-long. The processor uses integer arithmetic with 2's\n\ncomplement representation. Addresses are 10-bit-long. The APEXC has no RAM, except a 32-bit\n\naccumulator and a 32-bit data register (used along with the 32-bit accumulator to implement 64-bit\n\nshift instructions and hold the 64-bit result of a multiplication). Instructions and data are\n\nstored in two magnetic drums, for a total of 32 circular magnetic tracks of 32 words. Since\n\nthe rotation rate is 3750rpm (62.5 rotations per second), the program execution speed can go\n\nfrom as high as the theoretical maximum of 1 kIPS to lower than 100IPS if program instructions\n\nand data are not contiguous. Nowadays, many a pocket calculator is faster.\n\nOne oddity is that there is no program counter: each machine instruction includes the address\n\nof the next instruction. This design may sound weird, but it is the only way to achieve optimal\n\nperformance with this cylinder-based memory.\n\nThe machine code is made of 15 instructions only, namely addition, subtraction, multiplication,\n\nload (3 variants), store (2 variants), conditional branch, right arithmetic bit shift,\n\nright bit rotation, punched-card input, punched-card output, machine stop, and bank-switching\n\n(which is never used on the APEXC, since it only has 1024 words of storage, and addresses are\n\n10-bit-long). A so-called vector mode enables to repeat the same operation 32 times with 32\n\nsuccessive memory locations. Note the lack of bitwise and/or/xor and division. Also, note\n\nthe lack of indirect addressing modes: dynamic modification of opcodes is the only way one may\n\nsimulate it.\n\nAnother oddity is that the memory bus and the ALU are 1-bit-wide. There is a 64kHz bit-clock and\n\na 2kHz word-clock, and each word memory and arithmetic operation is decomposed into 32 1-bit\n\nmemory and arithmetic operations: this takes 32 bit cycles, for a total of 1 word cycle.\n\nThe processor is fairly efficient: most instructions take only 2 word cycles (1 for fetch,\n\n1 for read operand and execute), with the exception of stores, shifts and multiplications.\n\nYes, the APEXC CPU is a RISC: there is no other adequate word.\n\nNote there is no ROM, and therefore no 'bootstrap loader' or default start-up program whatever.\n\nAs far as I know, no executive or operating system was ever written for the APEXC, although\n\nthere were subroutine libraries of sorts for common arithmetic, I/O and debug tasks.\n\nOperation of the machine is normally done through a control panel which allows the user to start,\n\nstop and resume the CPU, and to alter registers and memory when the CPU is stopped. When starting\n\nthe machine, the address of the first instruction of the program to be executed must be entered\n\nin the control panel, then the run switch must be pressed. Most programs end with a stop\n\ninstruction, which enables to check the state of the machine, possibly run some post-mortem\n\ndebugging procedures (a core dump routine is described in an APEXC programming book), then enter\n\nthe address of another program and run it.\n\nTwo I/O devices were supported: a paper tape reader, and a paper tape puncher. The puncher output\n\ncould be fed to a printer ('teletyper') unit when desirable. Printer output is emulated and is\n\ndisplayed on screen. Tape input was either computer-generated by the APEXC, or hand-typed with\n\na special 32-key keyboard (each tape row had 5 data holes (<-> bits), which makes 32 different\n\nvalues).\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=apfimag\n\n$bio\n\nAPF Imagination Machine\n\nThe APF Imagination has the same hardware as the APF-M1000, but it is a computer.\n\nIt has a keyboard and built in cassette player.\n\nAn additional disc interface was available.\n\nIn basic, pressing \"FUNCTION\" (currently mapped to CTRL) and a letter/number will display\n\na basic keyword making it easier to enter programs.\n\nFUNCTION+Q = IF\n\nFUNCTION+W = STEP\n\nFUNCTION+E = STOP\n\nFUNCTION+R = READ\n\nFUNCTION+T = NEXT\n\nFUNCTION+Y = PRINT\n\nFUNCTION+U = END\n\nFUNCTION+I = LIST\n\nFUNCTION+O = REM\n\nFUNCTION+P = USING\n\nFUNCTION+1 = GOSUB\n\nFUNCTION+2 = LET\n\nFUNCTION+3 = DATA\n\nFUNCTION+4 = INPUT\n\nFUNCTION+5 = DIM\n\nFUNCTION+6 = FOR\n\nFUNCTION+7 = RETURN\n\nFUNCTION+8 = THEN\n\nFUNCTION+9 = ON\n\nFUNCTION+0 = GOTO\n\nFUNCTION+- = RESTORE\n\nFUNCTION+ENTER = CLOAD\n\nFor cassette:\n\nUse CSAVE\"<filename>\" to save a file, and CLOAD\"\" to load the file back.\n\nFor disc:\n\nUse SAVE\"<filename>\" to save a file, and LOAD\"<filename>\" to load the file back.\n\nYou can use \"DIR <drive number>\" e.g. \"DIR 0\" and \"DIR 1\" to give a directory of the\n\ndisc.\n\nBasic disk images with the \".APD\" extension are supported.\n\nKnown issues:\n\n* Cassette loading and saving is working\n\n* Interrupts are not exact. I don't know enough about them, any info would be appreciated.\n\n* Disc interface is working, but there may be some bugs.\n\n* Keyboard is mostly working but some keys may be missing\n\n* Keypad is not emulated\n\n* The M6847 emulation is very advanced *BUT* I don't think I have set it up correctly for the APF Imagination, therefore the graphics are wrong.\n\n* Memory emulation is not complete\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=apfm1000\n\n$bio\n\nAPF M-1000\n\nThe APF M-1000 is a console. It has a built-in game. The emulation is not exact and the\n\nbuilt in game does not work.\n\nKnown issues:\n\n* internal game does not work\n\n* keypad is not emulated\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=apple1\n\n$bio\n\nApple 1\n\nUsage:\n\nUpon boot or reset, the system displays a \"\\\" and a blinking \"@\" cursor on the next\n\nline. The blinking \"@\" is the Apple 1's video cursor. The \"\\\" is the prompt for the\n\nMonitor program. From the Monitor, you can examine or change memory or execute another\n\nprogram.\n\nYou can always interrupt a program and return to the Monitor by pressing the Apple 1's\n\nRESET switch (F12). This will not clear the screen or disturb memory contents.\n\nTo cold-boot the system, clearing the screen and memory, press the MESS Reset key\n\n(F3, in partial emulation mode only).\n\nThe Apple 1's CLEAR SCREEN switch (F2) will clear the screen and place the cursor at\n\nthe upper left corner. This only clears the video hardware, not the computer's memory,\n\nso you can use it whenever you like.\n\nTo start the cassette interface's mini-monitor from the Monitor, type the Monitor command:\n\nC100R\n\nThis mini-monitor will let you write memory regions to a cassette image or read a cassette\n\nimage into memory. It will only execute a single line of commands, and will then return you\n\nto the main Monitor, but this line can contain several write or read commands.\n\nCassette write command, writing data from memory at $xxxx-$yyyy:\n\nxxxx.yyyyW\n\nCassette read command, reading data into memory at $xxxx-$yyyy:\n\nxxxx.yyyyR\n\nThe starting and ending addresses xxxx and yyyy should be 4-digit hexadecimal addresses.\n\nThe starting address can actually be shorter than 4 digits, but to be safe, the ending address\n\nshould be exactly 4 digits. (A bug in the cassette mini-monitor will cause digits missing\n\nfrom the ending address to be replaced by the trailing digits of the starting address, and\n\nif the starting address does not end with zeroes, much more data will be written or read than\n\nexpected.)\n\nIf a command line contains multiple write or read commands, the corresponding memory regions\n\nwill be written or read in sequence. These commands may be separated by spaces, which are\n\nignored.\n\nWhen a region is written, its data is preceded by a 10-second leader. When a region is read,\n\nthe leader can vary in length but should be at least 4-5 seconds.\n\nIf the cassette image doesn't contain enough data to fill a region, the mini-monitor will hang\n\nwaiting for the remaining data, and the system must be reset.\n\nWhen all the cassette commands have been executed, the mini-monitor will return to the Monitor,\n\nwhich will display a \"\\\" prompt.\n\nSome cassette command examples:\n\nTo read Apple 1 BASIC from cassette:\n\nE000.EFFFR\n\nTo write a BASIC program to cassette, with BASIC's default LOMEM= setting of 2048:\n\n4A.00FFW800.FFFW\n\nTo read a BASIC program from cassette, with LOMEM=768:\n\n4A.00FFR300.FFFR\n\nOnce Apple 1 BASIC is loaded into memory, it can be started with the Monitor command:\n\nE000R\n\nThis will start BASIC from scratch, removing any existing BASIC program and data.\n\nTo return to BASIC from the monitor while preserving the current program and data,\n\nuse the command:\n\nE2B3R\n\nThe BASIC prompt is a \">\". Apple 1 BASIC is generally similar to Apple II Integer BASIC,\n\nbut without the latter's graphics commands.\n\nMESS Emulation State:\n\nOptional cassette interface is included and emulated.\n\n4 KB of DRAM is mapped to $E000-$EFFF. This is required for Apple 1 BASIC.\n\nKnown Issues:\n\nThe cassette interface and $E000-$EFFF DRAM are always included; they cannot be switched off.\n\nThe DRAM at $E000-$EFFF is not included in the RAM configured by MESS's -ram option, due\n\nto limitations in how MESS presently manages configurable RAM.\n\nHistory and Trivia:\n\nThe Apple 1 was a kit computer that was introduced and sold in small quantities in 1976.\n\nSteve Wozniak (\"Woz\"), who worked for Hewlett-Packard at the time, wanted to build his own\n\ncomputer. He could afford neither the Intel 8080 (the most popular microprocessor at the\n\ntime) nor the Motorola 6800 (his own preference). Therefore, he decided to build his computer\n\naround MOS Technology's new 6502 chip, which was quite compatible with the Motorola 6800 but\n\nfar less expensive. He proceeded to write a BASIC interpreter for the chip, and then turned\n\nto designing the computer that would run it, using an earlier paper design for the Motorola\n\n6800.\n\nThe resulting computer was easier to use and more affordable than many other kit computers\n\nof the time, sporting a keyboard interface and TV-compatible video terminal circuitry, all\n\non a single circuit board. To keep costs down, the video memory was implemented using shift\n\nregisters rather than RAM, with the downside being a slow display rate (60 characters per\n\nsecond). However, this was still much faster than the 10-character-per-second electromechanical\n\nTeletypes used with many early home computers. Wozniak's computer also used new, more compact\n\n4-kilobit dynamic RAM chips instead of the 1-kilobit static RAMs used by most other designs.\n\nWozniak promoted his computer and enhancements for it at the Homebrew Computer Club in Palo\n\nAlto, California.\n\nSteve Jobs, who had worked with Woz on the game \"Breakout\" for Atari, convinced Woz to try\n\nto market and sell the computer. Together they formed the Apple Computer Company. Paul\n\nTerrell, the owner of The Byte Shop, a new local computer store, was interested in this\n\ncomputer, but only if it was fully assembled and came with a cassette interface, so\n\nWozniak designed one.\n\nNormally, the Apple 1 was sold \"naked\", simply as a circuit board, without a monitor, power\n\nsupply, keyboard, tape drive, etc. These would be added by the owner. Wozniak and Jobs\n\nassembled about 200 systems and sold about 170 of them. Most of these were later traded in\n\nto Apple for Apple IIs and were destroyed. About 30 to 50 are still in existence.\n\nFeatures:\n\nCPU: MOS Technology 6502, 1 MHz\n\nMemory: 4 kB DRAM, expandable to 8 kB on board, or up to 52 kB with third-party expansion\n\nhardware\n\nScreen: 40x24 characters\n\nStorage: Optional cassette interface\n\nLinks:\n\nApple I Owners Club -- http://www.applefritter.com/apple1\n\nApple History -- http://www.apple-history.com/\n\nApple ][ History -- http://apple2history.org/history/ah02.html\n\nApple 1 Manual -- http://emulation.net/apple1/manual/apple1manx.html\n\n$end\n\n#---------------------------------------------------------------------------------------------#\n\n$info=apple2\n\n$bio\n\nApple ][\n\nKnown issues:\n\nOptional cassette drive not yet supported; in fact, no peripherals are supported\n\n(bug #477)\n\nColors are incorrect (bug #475).\n\nRequires full keyboard emulation. At startup, full keyboard emulation mode is enabled by\n\ndefault. Whilst in full keyboard emulation mode, some key associated functionality may be\n\ndisabled (like the ESC key for EXIT). The keyboard emulation mode is toggled using the\n\nscroll_lock key.\n\nUsage:\n\nUpon booting, you'll get the ROM monitor prompt ('*'), from which you can\n\nexamine/modify/run at different memory locations. (Note: you would normally need to press\n\nRESET to get to the prompt, but this doesn't seem to be necessary in MESS.)\n\nFrom the Monitor, press control-B then ENTER to get to Integer BASIC, which uses the\n\ngreater than prompt ('>').\n\nYou can invoke the mini-assembler by entering 'F666G' at the Monitor.\n\nTo backspace, use the left arrow key. The \"Backspace\" key is mapped to the Apple ][\n\n\"DEL\".\n\nHistory and Trivia:\n\nThe Apple ][ is an improved version of the Apple 1 kit computer first released in 1977.\n\nAlong with the TRS-80 and the PET, it constituted one of the \"second-generation\" of\n\ncomputers, aimed at the general user rather than the specialized hobbyist.\n\nThe Apple ][ featured a beige plastic case, color graphics, and seven (eight?) expansion\n\nslots. It included a version of BASIC called \"Integer BASIC\" on the ROM which came with\n\nthe machine.\n\nIt was an excellent home gaming platform. It shipped with two game paddles (various\n\nmodels were used) and supports up to four. It also included a built-in speaker.\n\nThe cassette interface required a cassette recording deck and was quite finicky. The\n\ntreble and bass on the cassette deck had to be fiddled with in just the right way.\n\nFeatures:\n\nCPU: MOS 6502 1MHz\n\nMemory: RAM 4kB expandable to 48kB, 12kB ROM\n\nScreen: 6 colors at 280x192, 4-bit color at 40x48\n\nData path: 8-bit\n\nLinks:"
    }
}