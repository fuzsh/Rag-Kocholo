{
    "id": "dbpedia_7394_3",
    "rank": 29,
    "data": {
        "url": "https://medium.com/privacy-preserving-natural-language-processing/a-brief-overview-of-data-privacy-preserving-software-methods-46db9913bd78",
        "read_more_link": "",
        "language": "en",
        "title": "A Brief Overview of Privacy-Preserving Software Methods",
        "top_image": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_img": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/0*vRWy-WxPKJ3sbWAI.",
            "https://miro.medium.com/v2/resize:fill:48:48/1*nmTto70xiPu52TWTpT5U3A.png",
            "https://miro.medium.com/v2/resize:fill:144:144/0*vRWy-WxPKJ3sbWAI.",
            "https://miro.medium.com/v2/resize:fill:64:64/1*nmTto70xiPu52TWTpT5U3A.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Patricia Thaine",
            "medium.com"
        ],
        "publish_date": "2018-05-22T22:31:02.827000+00:00",
        "summary": "",
        "meta_description": "A very brief overview of privacy-preserving technologies follows for anyone who’s interested in starting out in this area. I cover symmetric encryption, asymmetric encryption, homomorphic encryption…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/privacy-preserving-natural-language-processing/a-brief-overview-of-data-privacy-preserving-software-methods-46db9913bd78",
        "text": "A very brief overview of privacy-preserving technologies follows for anyone who’s interested in starting out in this area. I cover symmetric encryption, asymmetric encryption, homomorphic encryption, differential privacy, and secure multi-party computation.\n\nSymmetric Encryption\n\nWhat is it? An alternative nomenclature for symmetric encryption is private key encryption, which means that both encryption and decryption are performed using the same key that is kept hidden from everyone but the parties that want to communicate securely. This includes block ciphers (e.g., AES-GCM) and some stream ciphers (e.g., one-time pads), among others.\n\nWhat is a practical application? File sharing (e.g., over the HTTPS protocol) and hard drive encryption.\n\nPro. Symmetric schemes allow for faster encryption and decryption than asymmetric ones, which will be discussed in the next section. Symmetric schemes are also mathematically simpler.\n\nCon. The encryption/decryption key has to be exchanged over a secure channel; i.e., a communication channel where the message being sent cannot be read or tampered with\n\nSome seminal papers\n\nSchneier, Bruce. “Description of a new variable-length key, 64-bit block cipher (Blowfish).” International Workshop on Fast Software Encryption. Springer, Berlin, Heidelberg, 1993.\n\nSchneier, Bruce, et al. “Twofish: A 128-bit block cipher.” NIST AES Proposal 15 (1998): 23.\n\nStandard, NIST-FIPS. “Announcing the advanced encryption standard (AES).” Federal Information Processing Standards Publication 197 (2001): 1–51.\n\nSoftware\n\nhttps://github.com/bcgit/\n\nhttps://github.com/weidai11/cryptopp\n\nhttps://dev.gnupg.org/source/libgcrypt/\n\nhttps://github.com/openssl/openssl\n\nhttps://www.wolfssl.com/products/wolfcrypt/\n\nAsymmetric Encryption\n\nWhat is it? Asymmetric encryption is also referred to as public key encryption, which includes the RSA cryptosystem and ElGamal, among others. These schemes require a private key to decrypt but, unlike symmetric schemes, the encryption key is public. Crucially, asymmetric encryption schemes enable two parties to securely exchange the necessary keys (e.g., for future communication secured using symmetric encryption) without worrying about the level of security of the exchange channel [1].\n\nWhat is a practical application? Asymmetric and symmetric schemes are commonly combined to provide the best of both worlds. A sender may encrypt a secret key for a symmetric cipher using a receiver’s public key, then send the encrypted key to the receiver, who in turn decrypts it. Encrypted communication can then be more efficient, since both the sender and receiver now have the key to the same symmetric cipher [1].\n\nPro. Removes the need for communication over a secure channel.\n\nCon. Slow.\n\nSome seminal papers\n\nDiffie, Whitfield, and Martin Hellman. “New directions in cryptography.” IEEEtransactions on Information Theory 22.6 (1976): 644–654.\n\nElGamal, Taher. “A public key cryptosystem and a signature scheme based on discrete logarithms.” IEEE transactions on information theory 31.4 (1985): 469–472.\n\nKoblitz, Neal. “Elliptic curve cryptosystems.” Mathematics of computation 48.177 (1987): 203–209.\n\nMiller, Victor S. “Use of elliptic curves in cryptography.” Conference on the theory and application of cryptographic techniques. Springer, Berlin, Heidelberg, 1985.\n\nRivest, Ronald L., Adi Shamir, and Leonard Adleman. “A method for obtaining digital signatures and public-key cryptosystems.” Communications of the ACM 21.2 (1978): 120–126.\n\nSoftware\n\nhttps://github.com/bcgit/\n\nhttps://github.com/weidai11/cryptopp\n\nhttps://dev.gnupg.org/source/libgcrypt/\n\nhttps://github.com/openssl/openssl\n\nhttps://www.wolfssl.com/products/wolfcrypt/\n\nHomomorphic Encryption\n\nWhat is it? The concept of homomorphic encryption is said to be invented by Rivest et al. (1978) [2]. Using homomorphic encryption schemes, a user is able to encrypt data then send the data to an untrusted server that performs computations on the encrypted data. The server then returns the result of those computations to the user. Finally, the user decrypts the result. This scheme allows one, for example, to encrypt the numbers 2 [i.e., e(2)] and 3 [i.e., e(3)] and perform e(2) + e(3), decrypt the result, and get 5. Certain schemes can only perform addition, others only multiplication, and others still both multiplication and addition. Notably, the Paillier cryptosystem can only perform addition and is thus said to be additively homomorphic. One can perform only multiplication using RSA, for instance, making it multiplicatively homomorphic. Lattice-based encryption schemes are a favourite, since they are additively and multiplicaticatively homomorphic, as well as quantum-safe.\n\nWhat is a practical application? This technology is fairly new for commercial applications. In practice, it has been used in the financial and healthcare sectors.\n\nPro. Homomorphic encryption allows for double-blind computations. That is, a server is blind to a user’s data and the user is blind to the intricacies of the server’s algorithms.\n\nCon. Non-linear operations must rely on user-server communication, where the data to be computed on is sent to the user with some noise added to it. The user then performs the computation and sends it back to the server. Examples of such operations would be logarithms, sines, cosines, etc. Generally, a huge benefit of homomorphic encryption is its low communication costs between the user(s) wishing to perform a computation and the server performing it. Requiring user-server communication for operations which are otherwise trivial to perform limits the practicality of HE.\n\nSome seminal papers\n\nBrakerski, Zvika, and Vinod Vaikuntanathan. “Efficient fully homomorphic encryption from (standard) LWE.” SIAM Journal on Computing 43.2 (2014): 831–871.\n\nGentry, Craig. A fully homomorphic encryption scheme. Stanford University, 2009.\n\nPaillier, Pascal. “Public-key cryptosystems based on composite degree residuosity classes.” International Conference on the Theory and Applications of Cryptographic Techniques. Springer, Berlin, Heidelberg, 1999.\n\nVan Dijk, Marten, et al. “Fully homomorphic encryption over the integers.” Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, Berlin, Heidelberg, 2010.\n\nSoftware\n\nhttps://github.com/shaih/HElib\n\nhttps://git.njit.edu/palisade/PALISADE\n\nhttps://github.com/iamtrask/PySEAL\n\nhttps://github.com/tfhe/tfhe\n\nDifferential Privacy\n\nWhat is it? Differential privacy allows one to learn general information about a population within a database or within aggregated datasets without learning anything about a specific individual. A common example of a useful task for differential privacy is using a database to determine whether smoking causes cancer [3]. In that situation, one is discovering a general fact about a population (i.e., smokers) without requiring any individually identifiable details.\n\nWhat is a practical application? Apple uses differential privacy to improve QuickType predictions, as well as some of their recommendations to users. Briefly, only a certain portion of a user’s true actions are sent to Apple to train their models. It is impossible for Apple to distinguish between a user’s true action and a randomized action. However, the majority of information they receive is accurate and therefore improves predictions [4].\n\nPro. The risk of identifying a single anonymized person in a dataset can be accurately quantified as a function of the parameters used. This is mathematically provable.\n\nCon. Loss of data precision. The more deidentified or noisy that a dataset is, the less useful it becomes. This is definitely not the right solution if one needs exact answers to very specific queries (e.g., how many people in a certain dataset have cancer).\n\nSome seminal papers\n\nDwork, Cynthia. “Differential privacy: A survey of results.” International Conference on Theory and Applications of Models of Computation. Springer, Berlin, Heidelberg, 2008.\n\nDwork, Cynthia, and Aaron Roth. “The algorithmic foundations of differential privacy.” Foundations and Trends® in Theoretical Computer Science 9.3–4 (2014): 211–407.\n\nSoftware\n\nhttps://beta.dataverse.org/custom/DifferentialPrivacyPrototype/\n\nhttps://github.com/uber/sql-differential-privacy\n\nhttps://github.com/brubinstein/diffpriv\n\nSecure Multi-Party Computation\n\nWhat is it? This is used when multiple parties have a portion of data necessary for computing the result of a function, but do not want to reveal their data to any of the other parties. Garbled circuits, or circuits which hide all information going through them except for the final output, are used for MPC.\n\nWhat is a practical application? Deriving genomic diagnoses without revealing patient genomes [5].\n\nPro. Very low computational cost.\n\nCon. Little research done on performing comparison (<, >, ==, !=) within MPC protocols [6].\n\nSome seminal papers\n\nBeaver, Donald, Silvio Micali, and Phillip Rogaway. “The round complexity of secure protocols.” Proceedings of the twenty-second annual ACM symposium on Theory of computing. ACM, 1990.\n\nBen-David, Assaf, Noam Nisan, and Benny Pinkas. “FairplayMP: a system for secure multi-party computation.” Proceedings of the 15th ACM conference on Computer and communications security. ACM, 2008.\n\nBen-Or, Michael, Shafi Goldwasser, and Avi Wigderson. “Completeness theorems for non-cryptographic fault-tolerant distributed computation.” Proceedings of the twentieth annual ACM symposium on Theory of computing. ACM, 1988.\n\nChaum, David, Claude Crépeau, and Ivan Damgard. “Multiparty unconditionally secure protocols.” Proceedings of the twentieth annual ACM symposium on Theory of computing. ACM, 1988.\n\nGoldreich, Oded, Silvio Micali, and Avi Wigderson. “How to play any mental game.” Proceedings of the nineteenth annual ACM symposium on Theory of computing. ACM, 1987.\n\nSoftware\n\nhttps://github.com/bristolcrypto/SPDZ-2\n\nhttps://github.com/rdragos/awesome-mpc\n\nhttps://github.com/cryptobiu/libscapi\n\nFor a more complete list: http://www.multipartycomputation.com/mpc-software\n\nOther notable software\n\nhttps://github.com/OpenMined\n\nhttps://github.com/nucypher\n\nAcknowledgements\n\nThank you to Dr. Siavash Kazemian, Kelly Langlais, Michael Chiu, and Simon Emond for their feedback on this post and to Dr. Parinaz Sobhani for telling me about Apple’s great use case of differential privacy.\n\nReferences"
    }
}