{
    "id": "dbpedia_7394_0",
    "rank": 23,
    "data": {
        "url": "https://library.mosse-institute.com/articles/2022/05/introduction-to-cryptography-and-block-cipher-modes/introduction-to-cryptography-and-block-cipher-modes.html",
        "read_more_link": "",
        "language": "en",
        "title": "Introduction to Cryptography and Block Cipher Modes #",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://library.mosse-institute.com/_static/logo.png",
            "https://library.mosse-institute.com/_images/symmetric_encryption.png",
            "https://library.mosse-institute.com/_images/asymmetric_encryption.png",
            "https://library.mosse-institute.com/_images/cbc.png",
            "https://library.mosse-institute.com/_images/cfb.png",
            "https://library.mosse-institute.com/_images/ofb.png",
            "https://library.mosse-institute.com/_images/ctr.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Cryptography is the science of encrypting sensitive information into an unreadable format so that it can only be viewed by intended recipients. Messages such as sensitive state secrets or communica...",
        "meta_lang": "en",
        "meta_favicon": "../../../../_static/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://library.mosse-institute.com/articles/2022/05/introduction-to-cryptography-and-block-cipher-modes/introduction-to-cryptography-and-block-cipher-modes.html",
        "text": "Symmetric Encryption:#\n\nThe sender and receiver utilize the same keys for encryption and decryption in Symmetric Encryption. The secret key is another name for the encryption key. The key must be protected by the users on both the sending and receiving ends.\n\nThe strength of the symmetric encryption depends upon the security of the secret key. If the secret key’s security is compromised, your information may be exposed to unauthorized entities. The key should be shared between the sender and receiver over secure communication channels.\n\nFor the same key length, symmetric encryption is much faster and stronger than asymmetric encryption. It is substantially more difficult to decrypt data encrypted with symmetric encryption. The symmetric encryption’s strength grows as the key length increases. In comparison to asymmetric encryption, symmetric encryption can encrypt huge volumes of data very quickly.\n\nSystems that use symmetric encryption are not scalable. This means that as the number of persons who require a key for encryption grows, so does the number of keys. As a result, key management is a difficult task. The formula for calculating the number of keys required by n number of people:\n\nNumber of symmetric keys needed = n(n-1)/2\n\nThis means that if 100 people want to communicate with each other using symmetric encryption, 4950 unique keys would be required.\n\nSymmetric encryption only ensures data confidentiality. There is no way to tell who is sending the data with symmetric encryption. As a result, authentication is not provided by symmetric encryption.\n\nAsymmetric Encryption:#\n\nThe sender and receiver utilize different keys for encryption and decryption in asymmetric encryption. The two keys are related mathematically.\n\nPublic-key cryptography is another name for asymmetric encryption. The public and private keys are the two types of keys. The public key is a key that is accessible to everyone. The private key is a key that can only be known by the owner. If an attacker obtains the public key, he should not be able to extract the private key from it. Encryption and decryption are accomplished using both public and private keys. If the data is encrypted with the public key, the only way to decrypt it is to use the private key. In contrast, data encrypted with the private key can only be decrypted using the public key.\n\nIn contrast to symmetric encryption, which only provides data confidentiality, asymmetric encryption provides both confidentiality and authentication. If the sender is transmitting sensitive information to a specific person, the data will be encrypted using the receiver’s public key. Only the person who received the data, i.e. the receiver, will be able to decrypt it using his private key. This is how asymmetric encryption ensures the confidentiality of data.\n\nIf the sender wants to ensure the receiver that the data came from him alone, he will encrypt the data with his own private key. Using the sender’s public key, anyone on the receiving end will be able to decrypt the data. Authentication is provided by this technique, which ensures that the data received is actually from the sender.\n\nIn comparison to symmetric encryption, asymmetric encryption is substantially slower. This is because asymmetric encryption performs complex mathematical processing on data before transmission. Symmetric encryption simply entails repeatedly transposing and substituting data bits which is not a processor-intensive process.\n\nWhen employing asymmetric encryption, key management and distribution are much easier. This method does not require secure key distribution. Instead of worrying about distributing unique keys, you may just distribute your public keys to the people you wish to communicate with.\n\nBlock Cipher Modes:#\n\nThere are five different modes of block ciphers:\n\n1. ECB (Electronic Codebook Mode):\n\nPlain text is split into 64-bit blocks in ECB mode. The same key is then used to encrypt each block individually. If a block is shorter than 64 bits in length, ECB uses block padding. The problem with ECB mode is that it encrypts the same block of plain-text into the same cipher-text, resulting in patterns in the cipher-text. As a result, the ECB mode is vulnerable to cyber-attacks.\n\nThe ECB mode of block cipher encryption is the quickest and most straightforward. Each cipher-text block can be decrypted independently from the others. As a result, any cipher-text block can be decrypted without having to wait for subsequent cipher-text blocks to arrive.\n\n2. Cipher Block Chaining Mode:\n\nThe CBC mode was a step forward from the ECB. By injecting randomness, CBC mode addresses the problem of patterns in the ciphertext. In CBC mode, each plain-text block is encrypted using the value of the previous cipher-text block. An IV (Initialization Vector) is used to encrypt the initial block of plain-text. Each cipher-text block’s bits are XORed with the bits of the following plain-text block. The output is then sent into the block cipher, which uses the encryption key to encrypt the plain-text bits.\n\nThis chaining technique implies that each cipher-text block is reliant on the previous blocks. If an error occurs in one block of cipher-text, it will affect all subsequent blocks since the error will be propagated.\n\n3. CFB(Cipher Feedback Mode):\n\nCFB is similar to CBC, but with a few differences. CFB makes use of both block and stream ciphers. The encryption key and the IV are combined to create a keystream of random bits. To produce the eight bits of cipher-text, the bits of the keystream is XORed with the initial eight bits of plain-text. The destination receives one copy of the cipher-text bits. The other copy is used to encrypt the next eight bits of plain text. Using this encryption method increases the randomness of the cipher-text produced.\n\nIf there is an error in one block of cipher-text in CFB mode, it will affect all subsequent blocks because the error will be propagated.\n\n4. OFB (Output Feedback mode):\n\nInstead of cipher-text blocks, the keystream is utilized to encrypt each block of plain-text in output feedback mode. The keystream bits are created by combining the encryption key and IV. Before the XOR operation, these bits are passed to the following block. After the bits of the keystream is XORed with the plain-text, the cipher-text is generated.\n\nBecause each plain-text block is encrypted independently of the other, the chances of errors propagating to next blocks of cipher-text are low with OFB. So if a cipher-text block contains an error, only that block will be affected.\n\n5. CTR (Counter mode):\n\nCTR works similarly to OFB mode. It employs an Initialization Vector (Counter) whose bits are incremented with each block of plaintext bits. A unique keystream value is created by combining these counter bits with the encryption key. These keystream bits are XORed with the plain-text bits to produce encrypted cipher-text bits.\n\nThe performance of this mode is dramatically improved because it allows for concurrent encryption of individual code blocks. There is also no possibility of error propagation because there is no chaining involved. Each block of code can be decrypted without waiting for subsequent blocks to arrive at the receiving end."
    }
}