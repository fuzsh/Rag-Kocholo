{
    "id": "dbpedia_7394_2",
    "rank": 95,
    "data": {
        "url": "https://billatnapier.medium.com/100-interesting-things-to-learn-about-cryptography-d195ea94c2df",
        "read_more_link": "",
        "language": "en",
        "title": "100 Interesting Things to Learn About Cryptography",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*dtTYabWTVLll-n1HpkL4EA.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*dtTYabWTVLll-n1HpkL4EA.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*H2rG3QLPlapx0qVdkPX8iA.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*H2rG3QLPlapx0qVdkPX8iA.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Prof Bill Buchanan OBE FRSE",
            "billatnapier.medium.com"
        ],
        "publish_date": "2023-08-16T08:56:41.311000+00:00",
        "summary": "",
        "meta_description": "Here are my 100 interesting things to learn about cryptography:. “100 Interesting Things to Learn About Cryptography” is published by Prof Bill Buchanan OBE FRSE.",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://billatnapier.medium.com/100-interesting-things-to-learn-about-cryptography-d195ea94c2df",
        "text": "Prof Bill Buchanan OBE FRSE\n\n·\n\nFollow\n\n12 min read\n\n·\n\nAug 16, 2023\n\n--\n\nHere are my 100 interesting things to learn about cryptography:\n\nFor a 128-bit encryption key, there are 340 billion billion billion billion possible keys. [Calc: 2**128/(1e9**4)]\n\nFor a 256-bit encryption key, there are 115,792 billion billion billion billion billion billion billion billion possible keys. [Calc: 2**256/(1e9**8)]\n\nTo crack a 128-bit encryption with brute force using a cracker running at 1 Teracracks/second, will take — on average — 5 million million million years to crack. Tera is 1,000 billion. [Calc: 2**128/100e9/2/60/60/24/365/(1e6**3)] For a 256-bit key this is 1,835 million million million million million million million million million years.\n\nFor the brute force cracking of a 35-bit key symmetric key (such as AES), you only need to pay for the boiling of a teaspoon of energy. For a 50-bit key, you just need to have enough money to pay to boil the water for a shower. For a 90-bit symmetric key, you would need the energy to boil a sea, and for a 105-bit symmetric key, you need the energy to boil and ocean. For a 128-bit key, there just isn’t enough water on the planet to boil for that. Ref: here.\n\nWith symmetric key encryption, anything below 72 bits is relatively inexpensive to crack with brute force.\n\nOne of the first symmetric key encryption methods was the LUCIFER cipher and was created by Horst Feistel at IBM. It was further developed into the DES encryption method.\n\nMany, at the time of the adoption of DES, felt that its 56-bit key was too small to be secure and that the NSA had a role in limiting them.\n\nWith a block cipher, we only have to deal with a fixed size of blocks. DES and 3DES use a 64-bit (eight-byte) block size, and AES uses a 128-bit block size (16 bytes).\n\nWith symmetric key methods, we either have block ciphers, such as DES, AES CBC and AES ECB, or stream ciphers, such as ChaCha20 and RC4.\n\nIn order to enhance security, AES has a number of rounds where parts of the key are applied. With 128-bit AES we have 10 rounds, and 14 rounds for 256-bit AES.\n\nIn AES, we use an S-box to scramble the bytes, and which is applied for each round. When decrypting, we have the inverse of the S-box used in the encrypting process.\n\nA salt/nonce or Initialisation Vector (IV) is used with an encryption key in order to change the ciphertext for the same given input.\n\nStream ciphers are generally much faster than block cipers, and can generally be processed in parallel.\n\nWith the Diffie-Hellman method. Bob creates x and shares g^x (mod p), and Alice creates y, and shares g^y (mod p). The shared key is g^{xy} (mod p).\n\nRalph Merkle — the boy genius — submitted a patent on 5 Sept 1979 and which outlined the Merkle hash. This is used to create a block hash.\n\nRalph Merkle’s PhD supervisor was Martin Hellman (famous as the co-creator of the Diffie-Hellman method).\n\nAdi Shamir defines a secret share method, and which defines a mathematical equation with the sharing of (x,y), and where a constant value in the equation is the secret.\n\nWith Shamir Secret Shares (SSS), for a quadratic equation of y=x²+5x+6, the secret is 6. We can share three points at x=1, x=2 and y=3, and which gives y=12, y=20, and y=20, respectively. With the points of (1,12), (2,20), and (3,20), we can recover the value of 6.\n\nAdi Shamir broke the Merkle-Hellman knapsack method at a live event at a rump session of a conference.\n\nWith secret shares, with the highest polynomial power of n, we need n+1 points to come together to regenerate the secret. For example, y=2x+5 needs two points to come together, while y=x²+15x+4 needs three points.\n\nThe first usable public key method was RSA — and created by Rivest, Shamir and Adleman. It was first published in 1979 and defined in the RSA patent entitled “Cryptographic Communications System and Method”.\n\nIn public key encryption, we use the public key to encrypt data and the private key to decrypt it.\n\nIn digital signing, we use the private key to sign a hash and create a digital signature, and then the associated public key to verify the signature.\n\nLen Adleman — the “A” in the RSA method — thought that the RSA paper would be one of the least significant papers he would ever publish.\n\nThe RSA method came to Ron Rivest while he slept on a couch.\n\nMartin Gardner published information on the RSA method in his Scientific American article. Initially, there were 4,000 requests for the paper (which rose to 7,000), and it took until December 1977 for them to be posted.\n\nThe security of RSA is based on the multiplication of two random prime numbers (p and q) to give a public modulus (N). The difficulty of RSA is the difficulty in factorizing this modulus. Once factorized, it is easy to decrypt a ciphertext that has been encrypted using the related modulus.\n\nIn RSA, we have a public key of (e,N) and a private key of (d,N). e is the public exponent and d is the private exponent. The public exponent is normally set at 65,537.\n\nThe binary value of 65,537 is 10000000000000001 — this number is efficient in producing ciphertext in RSA.\n\nIn RSA, the ciphertext is computed from a message of M as C=M^e (mod N), and is decrypted with M=C^d (mod N).\n\nWe compute the the private exponent (d) from the inverse of the public exponent (e) modulus PHI, and where PHI is (p-1)*(q-1). If we can determine p and q, we can compute PHI.\n\nAnything below a 738-bit public modulus is relatively inexpensive to crack for RSA.\n\nTo crack 2K RSA at the current time, we would need the energy to boil ever ocean on the planet to break it.\n\nRSA requires padding is required for security. A popular method has been PCKS#1v1.5 — but this is not provably secure and is susceptible to Bleichenbacher’s attack. An improved method is Optimal Asymmetric Encryption Padding (OAEP) and was defined by Bellare and Rogaway and standardized in PKCS#1 v2.\n\nThe main entity contained in a digital certificate is the public key of a named entity. This is either an RSA or an Elliptic Curve key.\n\nA digital certificate is signed with the private key of a trusted entity — Trent. The public key of Trent is then used to prove the integrity and trust of the associated public key.\n\nFor an elliptic curve of y²=x³+ax+b (mod p), not every (x,y) point is possible. The total number of points is defined as the order (n).\n\nECC (Elliptic Curve Cryptography) was invented by Neal Koblitz and Victor S. Miller in 1985.\n\nElliptic curve cryptography algorithms did not take off until 2004.\n\nIn ECC, the public key is a point on the elliptic curve. For secp256k1, we have a 256-bit private key and a 512-bit (x,y) point for the public key. A “04” in the public key is an uncompressed public key, and “02” and “03” are compressed versions with only the x-co-ordinate and whether the y coordinate is odd or even.\n\nSatoshi selected the secp256k1 curve for Bitcoin, and which gives the equivalent of 128-bit security.\n\nThe secp256k1 curve uses the mapping of y²=x³ + 7 (mod p), and is known as a Short Weierstrass (“Vier-strass”) curve.\n\nThe prime number used with secp256k1 is 2²⁵⁶-2³²-2⁹-2⁸-2⁷-2⁶-2⁴-1.\n\nAn uncompressed secp256k1 public key has 512 bits and is an (x,y) point on the curve. The point starts with a “04”.\n\nA compressed secp256k1 public key only stores the x-co-ordinate value and whether the y coordinate is odd or even. It starts with a “02” if the y-co-ordinate is even; otherwise, it starts with a “03”.\n\nIn computing the public key in ECC of a.G, we use the Montgomery multiplication method and which was created by Peter Montgomery in 1985, in a paper entitled, “Modular Multiplication without Trial Division.”\n\nElliptic Curve methods use two basic operations: point address (P+Q) and point doubling (2.P). These can be combined to provide the scalar operation of a.G.\n\nIn 1999, Don Johnson Alfred Menezes published a classic paper on “The Elliptic Curve Digital Signature Algorithm (ECDSA)”. It was based on the DSA (Digital Signature Algorithm) — created by David W. Kravitz in a patent which was assigned to the US.\n\nECDSA is a digital signature method and requires a random nonce value (k), and which should never be reused or repeated.\n\nECDSA is an elliptic curve conversion of the DSA signature method.\n\nDigital signatures are defined in FIPS (Federal Information Processing Standard) 186–5.\n\nNIST approved the Rijndael method (led by Joan Daemen and Vincent Rijmen) for Advanced Encryption Standard (AES). Other contenders included Serpent (led by Ross Anderson), TwoFish (led by Bruce Schneier), MARS (led by IBM), and RC6 (led by Ron Rivest).\n\nChaCha20 is a stream cipher that is based on Salsa20 and developed by Daniel J. Bernstein.\n\nMD5 has a 128-bit hash, SHA-1 has 160 bits and SHA-256 has 256-bits. It is relatively easy to create a hash collision with MD5. Google showed that it was possible to create a signature collision for a document with SHA-1. It is highly unlikely to get a hash collision for SHA-256.\n\nIn 2015, NIST defined SHA-3 as a standard, and which was built on the Keccak hashing family — and which used a different method to SHA-2.\n\nThe Keccak hash family uses a sponge function and was created by Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche and standardized by NIST in August 2015 as SHA-3.\n\nHash functions such as MD5, SHA-1 and SHA-256 have a fixed hash length, whereas an eXtendable-Output Function (XOF) produces a bit string that can be of any length. Examples are SHAKE128, SHAKE256, BLAKE2XB and BLAKE2XS.\n\nBLAKE 3 is the fastest cryptographically secure hashing method and was created by Jack O’Connor, Jean-Philippe Aumasson, Samuel Neves, and Zooko Wilcox-O’Hearn.\n\nHashing methods can be slowed down with a number of rounds. These slower hashing methods include Bcrypt, PBKDF2 and scrypt.\n\nArgon 2 uses methods to try and break GPU cracking, such as using a given amount of memory and defining the CPU utlization.\n\nTo speed up the operation of the SHA-3 hash, the team reduced the security of the method and reduce the number of rounds. The result is the 12 Kangaroo's hashing method. The number of rounds was reduced from 24 to 12 (with a security level of around 128 bits).\n\nIntegrated Encryption Scheme (IES) is a hybrid encryption scheme which allows Alice to get Bob’s public key and then generate an encryption key based on this public key, and she will use her private key to recover the symmetric. With ECIES, we use elliptic curve methods for the public key part.\n\nA MAC (Message Authentication Code) uses a symmetric key to sign a hash, and where Bob and Alice share the same secret key. The most popular method is HMAC (hash-based message authentication code).\n\nThe AES block cipher can be converted into a stream cipher using modes such as GCM (Galois Counter Mode) and CCM (counter with cipher block chaining message authentication code; counter with CBC-MAC).\n\nA MAC is added to a symmetric key method in order to stop the ciphertext from being attacked by flipping bits. GCM does not have a MAC, and is thus susceptible to this attack. CCM is more secure, as it contains a MAC.\n\nWith symmetric key encryption, we must remove the encryption keys in the reverse order they were applied. Commutative encryption overcomes this by allowing the keys to be removed in any order.\n\nIt is estimated that Bitcoin miners consume 17.05 GW of electrical power per day and 149.46 TWh per year.\n\nA KDF (Key Derivation Function) is used to convert a passphrase or secret into an encryption key. The most popular methods are HKDF, PBKDF2 and Bcrypt.\n\nRSA, ECC and Discrete Log methods will all be cracked by quantum computers using Shor’s algorithm\n\nLattice methods represent bit values as polynomial values, such as 1001 is x³+1 as a polynomial.\n\nTaher Elgamal — the sole inventor of the ElGamal encryption method — and Paul Koche were the creators of SSL, and developed it for the Netscape browser.\n\nDavid Chaum is considered as a founder of electronic payments and, in 1983, created ECASH, along with publishing a paper on “Blind signatures for untraceable payments”.\n\nSatoshi Nakamoto worked with Hal Finney on the first versions of Bitcoin, and which were created for a Microsoft Windows environment.\n\nBlockchains can either be permissioned (requiring rights to access the blockchain) or permissionless (open to anyone to use). Bitcoin and Ethereum are the two most popular permissionless blockchains, and Hyperledger is the most popular permissioned ledger.\n\nIn 1992, Eric Hughes, Timothy May, and John Gilmore set up the cypherpunk movement and defined, “We the Cypherpunks are dedicated to building anonymous systems. We are defending our privacy with cryptography, with anonymous mail forwarding systems, with digital signatures, and with electronic money.”\n\nIn Bitcoin and Ethereum, a private key (x) is converted to a public key with x.G, and where G is the base point on the secp256k1 curve.\n\nEthereum was first conceived in 2013 by Vitalik Buterin, Gavin Wood, Charles Hoskinson, Anthony Di Iorio and Joseph Lubin. It introduced smaller blocks, improved proof of work, and smart contracts.\n\nNI-ZKPs involves a prover (Peggy), a verifier (Victor) and a witness (Wendy) and were first defined by Manuel Blum, Paul Feldman, and Silvio Micali in their paper entitled “Non-interactive zero-knowledge and its applications”.\n\nPopular ZKP methods include ZK-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) and ZK-STARKs (Zero-Knowledge Scalable Transparent Argument of Knowledge).\n\nBitcoin and Ethereum are pseudo-anonymised, and where the sender and recipient of a transaction, and its value, can be traced. Privacy coins enable anonymous transactions. These include Zcash and Monero.\n\nIn 1992, David Chaum and Torben Pryds Pedersen published “Wallet databases with observers,” and outlined a method of shielding the details of a monetary transaction.\n\nIn 1992, Adi Shamir (the “S” in RSA) published a paper on “How to share a secret” in the Communications of the ACM. This supported the splitting of a secret into a number of shares (n) and where a threshold value (t) could be defined for the minimum number of shares that need to be brought back together to reveal the secret. These are known as Shamir Secret Shares (SSS).\n\nIn 1991, Torbin P Pedersen published a paper entitled “Non-interactive and information-theoretic secure verifiable secret sharing” — and which is now known as Pedersen Commitment. This is where we produce our commitment and then show the message that matches the commitment.\n\nDistributed Key Generation (DKG) methods allow a private key to be shared by a number of trusted nodes. These nodes can then sign for a part of the ECDSA signature by producing a partial signature with these shares of the key.\n\nNot all blockchains use ECDSA. The IOTA blockchain uses the EdDSA signature, and which uses Curve 25519. This is a more lightweight signature version and has better support for signature aggregation. It uses Twisted Edwards Curves.\n\nThe core signing method used in EdDSA is based on the Schnorr signature scheme and which was created by Claus Schnorr in 1989. This was patented as a “Method for identifying subscribers and for generating and verifying electronic signatures in a data exchange system”. The patent ran out in 2008.\n\nCurve 25519 uses the prime number of 2²⁵⁵-19 and was created by Daniel J. Bernstein.\n\nPeter Shor defined that elliptic curve methods can be broken with quantum computers.\n\nTo overcome the cracking of the ECDSA signature from quantum computers, NIST are standardising a number of methods. At present, this focuses on CRYSTALS-Dilithium, and which is a lattice cryptography method.\n\nBulletproofs were created in 2017 by Stanford’s Applied Cryptography Group (ACG). They define a zero-knowledge proof as where a value can be checked to see it lies within a given range. The name “bulletproofs” is defined as they are short, like a bullet, and with bulletproof security assumptions.\n\nHomomorphic encryption methods allow for the processing of encrypted values using arithmetic operations. A public key is used to encrypt the data, and which can then be processed using an arithmetic circuit on the encrypted data. The owner of the associated private key can then decrypt the result.\n\nSome traditional public key methods enable partial homomorphic encryption. RSA and ElGamal allow for multiplication and division, whilst Pailier allows for homomorphic addition and subtraction.\n\nFull homomorphic encryption (FHE) supports all of the arithmetic operations and includes Fan-Vercauteren (FV) and BFV (Brakerski/Fan-Vercauteren) for integer operations and HEAAN (Homomorphic Encryption for Arithmetic of Approximate Numbers) for floating point operations. Most of the Full Homomorphic encryption methods use lattice cryptography.\n\nSome blockchain applications use Barreto-Lynn-Scott (BLS) curves which are pairing-friendly. They can be used to implement Bilinear groups and which are a triplet of groups (G1, G2 and GT), so that we can implement a function e() such that e(g1^x,g2^y)=gT^{xy}. Pairing-based cryptography is used in ZKPs.\n\nThe main BLS curves used are BLS12–381, BLS12–446, BLS12–455, BLS12–638 and BLS24–477.\n\nAn accumulator can be used for zero-knowledge proof of knowledge, such as using a BLS curve to create to add and remove proof of knowledge.\n\nMetamask is one of the most widely used blockchain wallets and can integrate into many blockchains.\n\nMost wallets generate the seed from the operating system and where the browser can use the Crypto.getRandomValues function, and compatible with most browsers.\n\nWith a Verifiable Delay Function (VDF), we can prove that a given amount of work has been done by a prover (Peggy). A verifier (Victor) can then send the prover a proof value and compute a result which verifies the work has been done, with the verifier not needing to do the work but can still prove the work has been done.\n\nA Physical Unclonable Functions (PUFs) is a one-way function which creates a unique signature pattern based on the inherent delays within the wires and transistors. This can be used to link a device to an NFT."
    }
}