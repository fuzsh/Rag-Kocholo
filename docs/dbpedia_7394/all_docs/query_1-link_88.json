{
    "id": "dbpedia_7394_1",
    "rank": 88,
    "data": {
        "url": "https://www.examsnap.com/certification/sy0-501-section-6-1-given-a-scenario-utilize-general-cryptography-concepts/",
        "read_more_link": "",
        "language": "en",
        "title": "Given a scenario, utilize general cryptography concepts.",
        "top_image": "https://www.examsnap.com/design/img/favicon/favicon-32x32.png",
        "meta_img": "https://www.examsnap.com/design/img/favicon/favicon-32x32.png",
        "images": [
            "https://www.examsnap.com/design/img/logo.svg",
            "https://www.examsnap.com/design/img/search.svg",
            "https://www.examsnap.com/design/img/user.svg",
            "https://www.examsnap.com/design/img/cart.svg",
            "https://www.examsnap.com/design/img/search.svg",
            "https://www.examsnap.com/certification/wp-content/uploads/2019/02/ssl2buy-ssl-certificate-security.jpg",
            "https://www.examsnap.com/design/img/searchGreen.svg",
            "https://www.examsnap.com/certification/wp-content/uploads/2018/04/Top-Vendors-On-The-IT-Certification-Market.jpg",
            "https://www.examsnap.com/certification/wp-content/uploads/2020/01/methodology.png",
            "https://www.examsnap.com/certification/wp-content/uploads/2019/02/security.png",
            "https://www.examsnap.com/certification/wp-content/uploads/2018/05/main-8.jpg",
            "https://www.examsnap.com/certification/wp-content/uploads/2018/05/main-2.jpg",
            "https://www.examsnap.com/certification/wp-content/uploads/2018/05/main-3.jpg",
            "https://www.examsnap.com/certification/wp-content/uploads/2019/02/0_jH7BbrCszFt7JpU2.jpg",
            "https://www.examsnap.com/certification/wp-content/uploads/2019/02/CA_cyberattacks_xssattack.png",
            "https://www.examsnap.com/certification/wp-content/uploads/2019/02/Untitled-1-4.png",
            "https://www.examsnap.com/design/img/card.svg",
            "https://www.examsnap.com/design/img/arrowLeft.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "admin"
        ],
        "publish_date": "2019-02-07T13:21:16+00:00",
        "summary": "",
        "meta_description": "Cryptography is the science of encrypting, or hiding, information—something people have sought to do since they began using language. Although language allowed them to communicate with one another, people in power attempted to hide information by controlling who was taught to read and write. Eventually, more complicated methods of concealing information by shifting letters around",
        "meta_lang": "en",
        "meta_favicon": "/design/img/favicon/apple-touch-icon.png",
        "meta_site_name": "ExamSnap - Prepare For IT Certifications Exams By Using Real Exam Dumps And 100% Free Real Practice Test Questions for All Vendors. Complete Online Certification Training Courses With Detailed Video Tutorials For Passing The Certification Exams Quickly and Hassle Free.",
        "canonical_link": "https://www.examsnap.com/certification/sy0-501-section-6-1-given-a-scenario-utilize-general-cryptography-concepts/",
        "text": "SY0-501 Section 6.1- Given a scenario, utilize general cryptography concepts.\n\nCryptography is the science of encrypting, or hiding, information—something people have sought to do since they began using language. Although language allowed them to communicate with one another, people in power attempted to hide information by controlling who was taught to read and write. Eventually, more complicated methods of concealing information by shifting letters around to make the text unreadable were developed.\n\nThe Romans typically used a different method known as a shift cipher. In this case, one letter of the alphabet is shifted a set number of places in the alphabet for another letter. A common modern-day example of this is the ROT13 cipher, in which every letter is rotated 13 positions in the alphabet: n is written instead of a, o instead of b, and so on. These ciphers were simple to use and also simple to break. Because hiding information was still important, more advanced transposition and substitution ciphers were required. As systems and technology became more complex, some mechanical or electromechanical device frequently automated ciphers. A famous example of a modern encryption machine is the German Enigma machine from World War II. This machine used a complex series of substitutions to perform encryption, and interestingly enough it gave rise to extensive research in computers. Cryptanalysis, the process of analyzing available information in an attempt to return the encrypted message to its original form, required advances in computer technology for complex encryption methods. The birth of the computer made it possible to easily execute the calculations required by more complex encryption algorithms. Today, the computer almost exclusively powers how encryption is performed. Computer technology has also aided cryptanalysis, allowing new methods to be developed, such as linear and differential cryptanalysis. Comparing the input plaintext to the output ciphertext to try and determine the key used to encrypt the information does differential cryptanalysis. Linear cryptanalysis is similar in that it uses both plaintext and ciphertext, but it puts the plaintext through a simplified cipher to try and deduce what the key is likely to be in the full version of the cipher\n\nSymmetric Encryption Summary\n\nSymmetric algorithms are important because they are comparatively fast and have few computational requirements. Their main weakness is that two geographically distant parties both need to have a key that matches exactly. In the past, keys could be much simpler and still be secure, but with today’s computational power, simple keys can be brute-forced very quickly. This means that larger and more complex keys must be used and exchanged. This key exchange is difficult because the key cannot be simple, such as a word, but must be shared in a secure manner. It might be easy to exchange a 4-bit key such as b in hex, but exchanging the 128-bit key 4b36402c5727472d5571373d22675b4b is far more difficult to do securely. This exchange of keys is greatly facilitated by our next subject, asymmetric, or public key, cryptography.\n\nAsymmetric Encryption\n\nAsymmetric cryptography is in many ways completely different than symmetric cryptography. While both are used to keep data from being seen by unauthorized users, asymmetric cryptography uses two keys instead of one. Whitfield Diffie and Martin Hellman invented it in 1975. Asymmetric cryptography is more commonly known as public key cryptography. The system uses a pair of keys: a private key that is kept secret and a public key that can be sent to anyone. The system’s security relies upon resistance to deducing one key, given the other, and thus retrieving the plaintext from the ciphertext.\n\nFundamental differences and encryption methods\n\nEncryption can be a relatively simple process, or as difficult as the user wants to make it. The degree of difficulty does not necessarily relate to the security of the encryption method. It is of the utmost importance that the user understands, at a bare minimum, the principals of encryption. Otherwise, he places both himself and those to whom he sends messages at risk. Beware of the snake oil salesmen. It seems that every week, there’s someone hawking a “new, revolutionary, military grade, unbreakable” encryption algorithm or method. “Caveat Emptor” with such claims. A knowledgeable user will be much more likely to weed through all of the snake oil pitches. The defacto standard for encryption is PGP. There are those who will argue this point for a variety of reasons, but the fact remains that PGP is the most widely used and supported, and most readily available encryption method. PGP is available for almost every operating system, with a variety of versions for each. The features and functionality of each version should help determine which is best for you. The newer versions of PGP include plugins for popular email clients, and some include desktop security features as well.\n\nBlock vs. stream\n\nStream Ciphers vs. Block Ciphers\n\nUnlike what we’ve seen, private-key (aka symmetric) encryption schemes used in practice generally\n\n– are not be based on nice computational problems\n\n– are not proven secure via reductions\n\n– are designed for a particular input length (so can only be treated with concrete security)\n\n– but are extremely e-cient\n\nStream Ciphers\n\nEssentially meant to be pseudorandom generators, used for stateful encryption.\n\n– Examples: linear feedback shift registers (not secure, but used as component in better\n\n– stream ciphers), RC4, SEAL, …\n\n– Extremely simple and fast\n\n– Practical issues: can generate pseudorandom bits oine and decrypt very quickly without\n\n– buffering, but requires synchronization\n\nBlock ciphers\n\n– For every key k 2 f0; 1g n, Ek : f0; 1g` ! f0; 1g is a permutation, and both Ek and E ¡1 k can be computed quickly given k. (n=key length, ` = block length)\n\n– Examples: DES, AES/Rijndael, IDEA, …\n\n– Main tools for private-key encryption in practice.  Have both stateless modes and stateful/stream-like modes\n\nNon-repudiation\n\nAn item of some confusion, the concept of nonrepudiation is actually fairly simple. Nonrepudiation means that the message sender cannot later deny that she sent the message. This is important in electronic exchanges of data, because of the lack of face to face meetings. Nonrepudiation is based upon public key cryptography and the principle of only you knowing your private key. The presence of a message signed by you, using your private key, which nobody else should know, is an example of nonrepudiation. When a third party can check your signature using your public key, that disproves any claim that you were not the one who actually sent the message. Nonrepudiation is tied to asymmetric cryptography and cannot be implemented with symmetric algorithms.\n\nHashing\n\nHashing functions are commonly used encryption methods. A hashing function is a special mathematical function that performs one-way encryption, which means that once the algorithm is processed, there is no feasible way to use the ciphertext to retrieve the plaintext that was used to generate it. Also, ideally, there is no feasible way to generate two different plaintexts that compute to the same hash value.\n\nCommon uses of hashing functions are storing computer passwords and ensuring message integrity. The idea is that hashing can produce a unique value that corresponds to the data entered, but the hash value is also reproducible by anyone else running the developed in 1993, was designed as the algorithm to be used for secure hashing in the U.S. Digital Signature Standard (DSS). It is modeled on the MD4 algorithm and implements fixes in that algorithm discovered by the NSA. It creates message digests 160 bits long that can be used by the Digital Signature Algorithm (DSA), which can then compute the signature of the message. This is computationally simpler, as the message digest is typically much smaller than the actual message—smaller message, less work. SHA-1 works, as do all hashing functions, by applying a compression function to the data input. It accepts an input of up to 264 bits or less and then compresses down to a hash of 160 bits. SHA-1 works in block mode, separating the data into words first, and then grouping the words into blocks. The words are 32-bit strings converted to hex; grouped together as 16 words, they make up a 512-bit block. If the data that is input to SHA-1 is not a multiple of 512, the message is padded with zeros and an integer describing the original length of the message.\n\nAt one time, SHA-1 was one of the more secure hash functions, but it has been found vulnerable to a collision attack. Thus, most people are suggesting that implementations of SHA-1 be moved to one of the other SHA versions. These longer versions, SHA-256, SHA384, and SHA-512, all have longer hash results, making them more difficult to attack successfully. The added security and resistance to attack in SHA-1 does require more processing power to compute the hash.\n\nKey escrow\n\nThe impressive growth of the use of encryption technology has led to new methods for handling keys. Encryption is adept at hiding secrets, and with computer technology being affordable to everyone, criminals and other ill-willed people began using it to conceal communications and business dealings from law enforcement agencies. Because they could not break the encryption, government agencies began asking for key escrow. Key escrow is a system by which your private key is kept both by you and by the government. This allows people with a court order to retrieve your private key to gain access to anything encrypted with your public key. Your key and the government key, giving the government access to your plaintext data, essentially encrypt the data.\n\nSteganography\n\nSteganography, an offshoot of cryptography technology, gets its meaning from the Greek steganos meaning covered. Invisible ink placed on a document hidden by innocuous text is an example of a steganographic message. Another example is a tattoo placed on the top of a person’s head, visible only when the person’s hair is shaved off. Hidden writing in the computer age relies on a program to hide data inside other data. The most common application is the concealing of a text message in a picture file. The Internet contains multiple billions of image files, allowing a hidden message to be located almost anywhere without being discovered. The nature of the image files also makes a hidden message difficult to detect. While it is most common to hide messages inside images, they can also be hidden in video and audio files.\n\nSteganographic encoding can be used in many ways and through many different media. LSB, Least Significant Bit, is a method of encoding information into an image while altering the actual visual image as little as possible. A computer image is made up of thousands or millions of pixels, all defined by 1s and 0s. If an image is composed of Red Green Blue (RGB) values, each pixel has an RGB value represented numerically from 0 to 255. For example, 0,0,0 is black, and 255,255,255 is white, which can also be represented as 00000000, 00000000, 00000000 for black and 11111111, 11111111, 11111111 for white. Given a white pixel, editing the least significant bit of the pixel to 11111110, 11111110, 11111110 changes the color. The change in color is undetectable to the human eye, but in a image with a million pixels, this creates a 125KB area in which to store a message.\n\nDigital signatures\n\nDigital signatures have been touted as the key to truly paperless document flow, and they do have promise for improving the system. Digital signatures are based on both hashing functions and asymmetric cryptography. Both encryption methods play an important role in signing digital documents.\n\nUnprotected digital documents are very easy for anyone to change. If a document is edited after an individual signs it, it is important that any modification can be detected. To protect against document editing, hashing both parties use functions to create a digest of the message that is unique and easily reproducible. This ensures that the message integrity is complete.\n\nElliptic curve and quantum cryptography\n\nElliptic curve cryptography (ECC) works on the basis of elliptic curves. An elliptic curve is a simple function that is drawn as a gently looping curve on the X,Y plane. They are defined by this equation:\n\ny2 = x3 + ax2 + b\n\nElliptic curves work because they have a special property—you can add two points on the curve together and get a third point on the curve. For cryptography, the elliptic curve works as a public key algorithm. Users agree on an elliptic curve and a fixed curve point. This information is not a shared secret, and these points can be made public without compromising the security of the system. User 1 then chooses a secret random number, K1, and computes a public key based upon a point on the curve:\n\nP1 = K1 * F\n\nUser 2 performs the same function and generates P2. Now user 1 can send user 2 a message by generating a shared secret:\n\nS = K1 * P2\n\nUser 2 can generate the same shared secret independently: S = K2 * P1\n\nThis is true because\n\nK1 * P2 = K1 * (K2 * F) = (K1 * K2) * F = K2 * (K1 * F) = K2 * P1\n\nThe security of elliptic curve systems has been questioned, mostly because of lack of analysis. However, all public key systems rely on the difficulty of certain math problems. It would take a breakthrough in math for any of the mentioned systems to be weakened dramatically, but research has been done about the problems and has shown that the elliptic curve problem has been more resistant to incremental advances. Again, as with all cryptography algorithms, only time will tell how secure they really are.\n\nCryptography Algorithm Use\n\nThe use of cryptographic algorithms grows every day. The best way to do that with current technology is to use encryption. Security is typically defined as a product of five components: confidentiality, integrity, availability, authentication, and nonrepudiation. Encryption addresses four of these five components: confidentiality, integrity, nonrepudiation, and authentication.\n\nSession keys\n\nThe concept of session keys is a compromise between symmetric and asymmetric encryption that makes it possible to combine the two techniques. The principle of session keys is simple: it involves randomly generating a reasonably sized session key and encrypting this key using a public-key encryption algorithm (more precisely, using the recipient’s public key).\n\nThe recipient is capable of decrypting the session key with his private key. The sender and recipient are in possession of a shared key that only they know. They can therefore send each other encrypted documents using a symmetric encryption algorithm.\n\nIn-band vs. out-of-band key exchange\n\nKey exchange is an important topic in relation to symmetric cryptography. There are two primary approaches to key exchange: in-band key exchange and out-of-band key exchange. In-band key exchange essentially means that the key is exchanged within the same communications channel that is going to be encrypted. Out-of-band key exchange means that some other channel, other than the one that is going to be secured, is used to exchange the key. Forward secrecy is a property of any key exchange system, which ensures that if one key is compromised, subsequent keys will not also be compromised. Perfect forward secrecy occurs when this process is unbreakable.\n\nEphemeral key\n\nTaher Elgamal developed ElGamal in 1984. It is an asymmetric algorithm, and several variations of ElGamal have been created, including Elliptic Curve ElGamal. ElGamal and related algorithms use what is called an ephemeral key. An ephemeral key is simply a key that exists only for that session. Essentially, the algorithm creates a key to use for that single communication session and it is not used again. Adding an ephemeral key to Diffie-Hellman turns it into DHE (which, despite the order of the acronym, stands for Ephemeral Diffie-Hellman). Adding an ephemeral key to Elliptic Curve Diffie-Hellman turns it into ECDHE (again, overlook the order of the acronym letters, it is called Ephem- eral Elliptic Curve Diffie-Hellman). It is the ephemeral component of each of these that provides the perfect forward secrecy.\n\nPerfect forward secrecy\n\nAdding an ephemeral key to Diffie-Hellman turns it into DHE (which, despite the order of the acronym, stands for Ephemeral Diffie-Hellman). Adding an ephemeral key to Elliptic Curve Diffie-Hellman turns it into ECDHE (again, overlook the order of the acronym letters, it is called Ephem- eral Elliptic Curve Diffie-Hellman). It is the ephemeral component of each of these that provides the perfect forward secrecy"
    }
}