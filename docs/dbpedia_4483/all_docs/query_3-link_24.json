{
    "id": "dbpedia_4483_3",
    "rank": 24,
    "data": {
        "url": "https://followingnetsuite.com/author/kmccracken314264410/page/10/",
        "read_more_link": "",
        "language": "en",
        "title": "Kevin McCracken",
        "top_image": "https://secure.gravatar.com/avatar/c84b913754e815638b47a8ce1eaf5ed4?s=200&d=identicon&r=g",
        "meta_img": "https://secure.gravatar.com/avatar/c84b913754e815638b47a8ce1eaf5ed4?s=200&d=identicon&r=g",
        "images": [
            "https://followingnetsuite.com/wp-content/uploads/2019/06/platform-overview-1.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/06/6-12-2019-2-32-32-pm.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/06/admin-notice.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/06/heat-map.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/search-example.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/consignment-inventory-definition.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/filterexpression-code-example.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/downloading-api-definitions.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/jsconfig.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/netsuite-reducing-of-tenants-per-hostshared-hosting-environment.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/netsuite-reducing-of-tenants-per-hostnetsuite-customer-notice.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/suiteanswers-31710.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/05/endpoint-in-beta-1.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/saved-search-criteria-tab.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/saved-search-results-tab.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/saved-search-available-filters-tab.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/custitem_sum_available_inventory.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/custitem_logicweb_in_stock.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/popup-window.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/saved-search.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/suitescript.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/suiteanswers.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/freemarker.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/popup.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/software-agreements-definition.png?w=660",
            "https://followingnetsuite.com/wp-content/uploads/2019/04/4-11-2019-2-42-49-pm.png?w=660",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kevin McCracken"
        ],
        "publish_date": "2019-06-12T19:46:11+00:00",
        "summary": "",
        "meta_description": "Read all of the posts by Kevin McCracken on NetSuite Experiences",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "NetSuite Experiences",
        "canonical_link": "http://followingnetsuite.wordpress.com",
        "text": "I just got off the phone with NetSuite support, after exhausting all efforts to make a client-side call from a page in our SuiteCommerce Advanced website directly to NetSuite. It was getting a CORS (Cross-Origin Resource Sharing) scripting error.\n\nHere’s what’s going on. We were looking for a way to get client-side access to a public Suitelet or Restlet in NetSuite. The problem: It was blowing up with a CORS error. Apparently, Netsuite does not support cross-site scripting, even from one of our own domains, SCA.\n\nHere is the exact scenario which brought on the call to NetSuite support. We wanted to click a button in the SCA page which would fetch additional warehouses with our product. This data comes from custom record types in NetSuite. So the NetSuite developer knows where that data lives, the SCA developer does not. At this point, the conversation went something like this, “Hey, I’ll just make that data available to you through a public Suitelet. It’s not proprietary information. You can see it on the page. Why not?\n\nHowever, we hit the wall with a CORS error from NetSuite. So… You’d think that since NetSuite and SCA are one and the same, NetSuite’s public Suitelets would carry a response header that looked like this:\n\nAccess-Control-Allow-Origin: [URL of SCA website]\n\nHowever, you’d be wrong. Without the response header (supplied by the web service), all browsers block the AJAX call back to the requested web service.\n\nI’ve asked NetSuite to make this a “feature request.” The reason I believe it is important is that NetSuite and SCA have no mechanism for sharing JavaScript libraries. This forces SCA developers to know things the NetSuite admins and developers have traditionally been responsible for, in this example, custom record types. With shared libraries, all this complexity could be encapsulated in JavaScript namespace. Without it, there needs to be better communication between the two domains, so code isn’t duplicated.\n\nIf there were no CORS error, any web developer with little or no SCA training, could make the kind of change we were attempting here. It could live in the Handlebars template, which is basically raw HTML and JavaScript.\n\nSince CORS blocked us, the code had to move to server-side SCA, where an SCA developer had to write it. Darn!\n\nI’ve discussed NetSuite’s performance in several previous blogs. My complaint has been the consistency of response times. They vary wildly! To NetSuite’s credit, they have addressed the problem and the results are positive.\n\nOn May 15th, I received this notice. Changes were coming.\n\nToday, June 4th, I checked to see how we are doing after the change. Here’s a quick look. No change would mean we’d still see transactions with the highest response times wandering up in the 20 to 30-second range. Improvements would come in the form of reducing the standard deviation and making all transactions fall more consistently under 10 seconds.\n\nAnd now… drum roll please… the results.\n\nThis is the last 7 days of our worst performing transaction, saving a sales order. The sample set is small, but the improvements in performance and consistency are huge.\n\nI’ll remind you that the column titled “Server” includes times shown under “SuiteScript” and “Workflow.” That’s why I split out those 2 columns. I’ll also note that what I’d observed in the past was elongated server times which also elongated SuiteScript and workflow time. The problem, the server (shared host) was way too busy. And utilization was driven by multiple shared tenants simultaneously posting a flurry of transactions.\n\nNetSuite’s change, reducing the number of shared tenants per host, appears to have been a good one. My notes that came from SuiteWorld 2019 discussed Oracles investment to NetSuite. This was one of the areas where Oracle was injecting capital. I’d say, this is turning out to be a winner! Way to go Mark Hurd.\n\nC# is a Typeful language. That can cause problems when coding SuiteTalk in C#. Ever search for an item, entity or transaction and want to turn right around and update it, not knowing it’s type? Yep… I’ve been there too.\n\nIn order to build out this example, I’m going to just clip some code. I don’t have a good working example. However, I think you’ll get the idea.\n\nSo you search for an item record like this. I’m searching by external id. However, what you get back could be an object of any number of different types.\n\nIf the search was successful, it will return:\n\n(Record) result.recordList[0]\n\nThe problem…\n\nWhat you need is not an object of type Record, but an Item (the base type) which can be cast to a type of one of the following: InventoryItem, SerializedInventoryItem, NonInventoryItemForSale, and so on. There are a bunch.\n\nvar UpdateItem = new Record();\n\nWhat you really want is something that looks like this:\n\nvar updateItem= new InventoryItem() {…};\n\nvar updateItem= new SerializedInventoryItem() {…};\n\nvar updateItem= new NonInventoryItemForSale() {…};\n\nOr something like this:\n\nvar updateRecRef= new RecordRef() { type = RecordType.InventoryItem, …};\n\nvar updateRecRef= new RecordRef() { type = RecordType.NonInventoryItem, … };\n\nvar updateRecRef= new RecordRef() { type = RecordType.NonInventoryForSale, … };\n\nHere are two examples that take care of all the casting without knowing the object type of result.recordList[0].\n\nvar UpdateRec = Activator.CreateInstance(result.recordList[0].GetType());\n\nType type = result.recordList[0].GetType();\n\nPropertyInfo pi = type.GetProperty(“internalId”);\n\nstring internalId = pi.GetValue(result.recordList[0]).ToString();\n\npi.SetValue(UpdateRec, internalId);\n\npi = type.GetProperty(“externalId”);\n\nstring externalId = pi.GetValue(result.recordList[0]).ToString();\n\npi.SetValue(UpdateRec, externalId);\n\nservice.update(UpdateRec);\n\nand\n\nvar UpdateRecRef = RecordRef() {\n\ntype = (RecordType) Enum.Parse(typeof(RecType), result.recordList[0].GetType().Name, true)\n\n};\n\nservice.delete(UpdateRecRef);\n\nBoth these examples handle the conversion from type = Record to type of some flavor of Item. In the second example, the type is mapped to one of the Enum options of RecordType.InventoryItem, RecordType.SerializedInventoryItem, RecordType.NonInventoryItemForSale and so on.\n\nComing from a Microsoft background, I chose VSCode instead of Eclipse as my IDE for SuiteScript development. I have another article on using VSCode + NetSuite-Sync to publish SuiteScript to the cloud. In that article, I failed to mention how to make VSCode aware of the SuiteScript API methods.\n\nFirst, I’ll point out that when I started NetSuite-Sync was my only option for direct publishing of SuiteScript to the cloud. However, a second option exists today, NetSuite Upload. As of this post, there were only 735 installs of NetSuite Upload, but the limited number of reviews looked very positive.\n\nPersonally, I’m happy with NetSuite-Sync. It was quirky to install (see my other post for instructions) but it works great.\n\nWhat I failed to mention in my previous post was how to make VSCode aware of the SuiteScript APIs. If you don’t do this step, you are forced to refer to the developer guides every time you write an API call.\n\nHere are the 2 things to remember when hooking up VSCode and NetSuite APIs:\n\nDownload the API definitions\n\nAdd a jsconfig.json file to your workspace\n\nFirst, the API definitions.\n\nDocuments >> Files >> SuiteScripts\n\nNotice the links in the upper right of the screen.\n\nPick your flavor of choice and then save that .js file to your VSCode workspace.\n\nSecond, create a jsconfig.js file in the same root directory of your VSCode workspace. Mine is super simple.\n\nThat’s it! Now when you start typing an API method call, VSCode will help with auto-complete. And when you select a method, VSCode is aware of the parameters and can present some documentation on the fly.\n\nHere is a SuiteAnswers Article that discusses non-Eclipse IDEs.\n\nWorking with IDEs Other Than SuiteCloud IDE Plug-ins\n\nI can’t tell you how good it was to see a notice pop up when logging into NetSuite telling me we were going to experience some down time. NetSuite was planning to reduce the number of tenants per shared host in an effort to decrease variability of response times. AWESOME! I’d been pestering them about this for several months.\n\nIn previous blog posts, I had drawn several conclusions:\n\nNetSuite customers share a common host (this was a no-brainer)\n\nNetSuite was NOT automatically rearranging tenants to find companies that fit nicely together on the same host.\n\nOracle was pouring money into NetSuite to solve the problem of poor or erratic performance.\n\nNetSuite/Oracle was working hard to make it easier to migrate tenants to either a new host or a new data center (and new database architecture)\n\nHere’s what NetSuite/Oracle is fixing. In a multi-tenant environment, different companies all run transactions concurrently. It looks something like this, where each company/customer has transactions arriving at various intervals.\n\nIf every transaction arrived at the shared host when it was completely idle, response time would be whatever time it took for the server and database to complete that transaction. But if the shared host is busy when a transaction arrives (and the shared host can’t get to it), it waits for its turn to execute.\n\nThe trick is finding the right mix of tenants, possibly companies in different time zones (separated by more than a few hours), to share a host. However, the next problem is the idea of regional data centers. Is it practical to have a company in Ireland sharing a host with a company in California? This would be a great mix. But will the company in Ireland be happy having their NetSuite provision hosted somewhere in the US, or vice versa? Probably not.\n\nSo the trick is finding good matches as shared tenants. It appears NetSuite is evaluating this problem and making some strategic Chess moves. I received this notice recently when I logged in.\n\nIf you read some of my other blog posts, you’ll see how I was able to diagnose that at least two-thirds of my transactions ran reasonably quickly. One-third didn’t. When I dissected the response times of the poor performers, it was elongated server time (not workflows, and not SuiteScripts) that was causing the problem. It was my conclusion that it was wait times caused by a busy host that was the problem.\n\nSo this notice of downtime was truly a sight for sore eyes! I’ve said this before, but it’s worth repeating… Thank you, Mark Hurd (President of Oracle). It appears you are spending your money wisely.\n\nI’m constantly writing about little things that cause me lots of grief. Here’s another. I use a lot of SuiteTalk (SOAP) services to move data between our legacy systems and the cloud. Out of the blue, I began getting a 403 Forbidden rejection. I’d been warned that changes were coming with 2-Factor authentication. This particular program was not using TBA. So I began to diagnose it. I tried different credentials. I converted the app to TBA (Token-Based Authentication). No change. I wasted a ton of time. After contacting NetSuite and going through my long list of debugging steps, I swapped endpoints, and amazingly enough, it worked.\n\nThe problem: When our account was upgraded to 2019.1, I swapped endpoints (WSDLs)\n\nhttps://%5Bmy acct #].suitetalk.api.netsuite.com/wsdl/v2019_1_0/netsuite.wsdl\n\nI thought keeping my SOAP endpoints in sync with the latest release was what I was supposed to do. WRONG! Apparently, 2019.1 is still in beta. So my 403 error was caused by my endpoint dropping offline for whatever reason. It’s beta. No foul.\n\nSo how can we developers know when it’s time to swap endpoints? Great question, I’m glad you asked. At this time, it appears the answer is either “Don’t swap” or “Swap at your own peril.”\n\nWhen I asked NetSuite this question, here was their answer, “Please see the latest support article letting you know that 2019.1 is available but in beta (SuiteAnswers #31710).\n\nhttps://netsuite.custhelp.com/app/answers/detail/a_id/31710\n\nIn the second section (you must page down to see it), you’ll see that the endpoint is still in beta.\n\nHere’s another way to tell if your endpoint is in beta. Don’t miss this one (I’m saying this very facetiously). Open your endpoint’s URL in a browser. Look! There’s a notice. How did I miss that?\n\nAnyway… thank you for being there for me (as my underpaid therapist). Many thanks!\n\nHope this never happens to you.\n\nI needed a facet in SuiteCommerce that showed whether an item was in stock or not. The problem: I had multiple warehouses. In order to know whether I had stock or not, I needed to sum across all warehouses. So the quantity available didn’t work in a custom item field. It threw an error.\n\nFirst… A huge “Thank You” goes out to Kwini with NetSuite support. She solved this one for me!\n\nHere’s the solution. It was a multi-step process that included a saved search and 2 custom item fields. Yikes!!!\n\nHere’s how it all fit together.\n\nStart with a saved search. Only Inventory Items can have stock. So filter out the rest. They are superfluous.\n\nEditor’s note: We found later that if you don’t make this search public, it works for everyone. However, only the owner showed items as “In Stock”. Everyone else showed every item as “Not in Stock.”\n\nIn the results tab of the same saved search, be sure to sum the quantity available.\n\nSame saved search… In order to limit the results to just one item, you need to set the available filter to the internal ID of an item and you need to make sure you check to show the filter in the filter region.\n\nThis completes the saved search. Save it!\n\nNext, you need to create a custom item field that holds the results of the aforementioned search. It is not necessary, but I marked this interim custom field as hidden. The important things to remember are that it must reference the saved search and it must be free-form text.\n\nAnd finally, I created the custom item field that I actually wanted to begin with and plan to make a facet field in SCA. It uses a formula to decide whether the item is in stock or not.\n\nHopefully, this is helpful. I know I’ll be back here reading my own blog post when I forget how to do this in the future.\n\nCheers!\n\nI have been coding a solution that pulls together a given customer’s open invoices and formats them into a summary email and then attaches printed copies of each. One of the requirements was that I only include open invoices. Attaching PDFs of paid invoices was not only superfluous but also made generating the email take forever. So, I needed to filter to only include open invoices. Here’s how I accomplished this in SuiteScript.\n\nThis was the goal: a popup window that emails this report to a customer in the body of the email along with attached PDFs of all past due invoices. And just so you’ll know, I’m not lazy, the customer’s email and alternate email are actually populated in the actual popup. After reviewing the details, the user can adjust who they send to and either send the summary without attachments or include past due PDFs.\n\nIf you code your search as a Saved Search, you see something like this…\n\nThis is misleading and does not translate to an nlobjSearchFilter in SuiteScript. Here’s what your code should look like.\n\nSo how did I make this translation? You’ll find the answer in SuiteAnswers #50165.\n\nHere is the code in a form more easily copied.\n\ngetSearchResults: function (customer_internalid) {\n\nfilters = new Array();\n\nfilters[0] = new nlobjSearchFilter(‘entity’, null, ‘is’, customer_internalid);\n\nfilters[1] = new nlobjSearchFilter(‘status’, null, ‘is’, ‘CustInvc:A’);\n\nvar columns =new Array();\n\ncolumns[0] = new nlobjSearchColumn(‘tranid’);\n\ncolumns[0].setSort(false);\n\ncolumns[1] = new nlobjSearchColumn(‘trandate’);\n\ncolumns[2] = new nlobjSearchColumn(‘duedate’);\n\ncolumns[3] = new nlobjSearchColumn(‘amount’);\n\ncolumns[4] = new nlobjSearchColumn(‘amountremaining’);\n\ncolumns[5] = new nlobjSearchColumn(‘daysoverdue’);\n\ncolumns[6] = new nlobjSearchColumn(‘internalid’);\n\nvar results = nlapiSearchRecord(null, ‘customsearch_logic_customer_ar_summary’, filters, columns);\n\nreturn results;\n\n}\n\nOne more note: If you look at the code sample I included, there is another function that might be of interest.\n\nformatARStatusPage: function (customer_internalid, results) {\n\nvar renderer = nlapiCreateTemplateRenderer();\n\nvar template = nlapiLoadFile(‘SuiteScripts/Logic/customsearch_logic_customer_ar_summary.html’).getValue();\n\nrenderer.setTemplate(template);\n\nrenderer.addSearchResults(‘results’, results);\n\nreturn JSON.stringify(renderer.renderToString());\n\n}\n\nThis function marries the search results with a Freemarker template and formats (from a RESTlet) the HTML that you see in the popup window. Here is a snippet from the Freemarker code that formats the past due table.\n\n<table>\n\n<#list results as result>\n\n<#if result_index==0>\n\n<thead>\n\n<tr>\n\n<thcolspan=”6″style=”text-align: center”>Past Due Invoice – Please Pay Immediately</th>\n\n</tr>\n\n<tr>\n\n<th>Document Number</th>\n\n<thstyle=”text-align: center”>Invoice Date</th>\n\n<thstyle=”text-align: center”>Due Date</th>\n\n<thstyle=”text-align: center”>Days Overdue</th>\n\n<thstyle=”text-align: center”>Invoice Amount</th>\n\n<thstyle=”text-align: center”\n\nstyle=”border-right: solid 1px #c9c9c9;”>Balance Due</th>\n\n</tr>\n\n</thead>\n\n</#if>\n\n<#if result.daysoverdue gt 0>\n\n<tr>\n\n<td>${result.tranid}</td>\n\n<tdstyle=”text-align: center”>${result.trandate}</td>\n\n<tdstyle=”text-align: center”>${result.duedate}</td>\n\n<tdstyle=”text-align: center”>${result.daysoverdue}</td>\n\n<tdstyle=”text-align: right”>${result.amount}</td>\n\n<tdstyle=”text-align: right”\n\nstyle=”border-right: solid 1px #c9c9c9;”>${result.amountremaining}</td>\n\n</tr>\n\n</#if>\n\n</#list>\n\n</table>\n\nWhen I completely OCD out on a problem and finally get an answer, I want two things. First, I don’t ever want to waste time on it again. And second, I don’t want anyone else wasting time on it either. If you ever need to write a search in SuiteScript that involves a join, please read this first!\n\nI needed a popup that would search through a custom record type based on various filters.\n\nSo the code under the hood required the following (not that this really matters, It’s just for the curious).\n\nAn inline HTML button to launch this popup.\n\nA client script to fetch the HTML from a file in the file cabinet to render this page.\n\nA Restlet that gets called when the user clicks search to deliver the results.\n\nSo now I’m only going to focus on the Restlet that delivers the results in this popup. And I’m going to give you the basics of how I coded my filter for two of the fields on the screen, owner and vendor. They don’t work the same, and dang was this frustrating.\n\nHere are the definitions for owner and vendor in my Software Agreements custom record type.\n\nNotice, both are List/Record types. However, they reference different lists. This was the rub! You’d expect them to work the same, but they DID NOT.\n\nI kept getting an error on the search filter definition at the time the search executed. It was telling me I had an invalid search expression. When I omitted the vendor criteria, it worked. When I added back the vendor criteria, it failed. Here’s the code after it was working.\n\nHere’s the dirty little secret. There’s this thing called the record type’s Valid Search Filters table. What the heck? companyname is in this table for customers, but not in it for vendors. In order to search for companyname in the vendor’s table, I needed to swap companyname for entityid.\n\nI worked with a wonderful support rep from NetSuite name Fe. I asked her, “How can I prevent this from happening again?” Here is what she told me.\n\nTo make sure that all search filter IDs are valid:\n\nOpen the SuiteScript Records Browser(SuiteAnswers ID: 74610 – The SuiteScript Records Browser).\n\nNavigate to the record type being searched.\n\nkindly go to Vendor\n\nLocate the Search Filters table and check if all nlobjSearchFilter field IDs used in your code are found within the table.\n\nYou can also refer to SuiteAnswers ID: 45294 – SuiteScript Error SSS_INVALID_SRCH_FILTER\n\nHopefully, this saves you the headache I have right now after resolving this issue. And many thanks to Fe for her excellent help.\n\nHappy coding!"
    }
}