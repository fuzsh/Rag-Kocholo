{
    "id": "wrong_mix_domain_foundationPlace_00020_1",
    "rank": 11,
    "data": {
        "url": "https://learn.microsoft.com/en-us/uwp/api/windows.storage.applicationdata%3Fview%3Dwinrt-26100",
        "read_more_link": "",
        "language": "en",
        "title": "ApplicationData Class (Windows.Storage) - Windows UWP applications",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "windows 10",
            "uwp",
            "winrt",
            "api"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Provides access to the application data store. Application data consists of files and settings that are either local, roaming, or temporary.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/uwp/api/windows.storage.applicationdata?view=winrt-26100",
        "text": "ApplicationData Class\n\nDefinition\n\nImportant\n\nSome information relates to prerelease product that may be substantially modified before itâs released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\npublic ref class ApplicationData sealed\n\npublic ref class ApplicationData sealed : IClosable\n\n/// [Windows.Foundation.Metadata.ContractVersion(Windows.Foundation.UniversalApiContract, 65536)] /// [Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)] /// [Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.MTA)] class ApplicationData final\n\n/// [Windows.Foundation.Metadata.ContractVersion(Windows.Foundation.UniversalApiContract, 65536)] /// [Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)] /// [Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.MTA)] class ApplicationData final : IClosable\n\n[Windows.Foundation.Metadata.ContractVersion(typeof(Windows.Foundation.UniversalApiContract), 65536)] [Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)] [Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.MTA)] public sealed class ApplicationData\n\n[Windows.Foundation.Metadata.ContractVersion(typeof(Windows.Foundation.UniversalApiContract), 65536)] [Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)] [Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.MTA)] public sealed class ApplicationData : System.IDisposable\n\nPublic NotInheritable Class ApplicationData\n\nPublic NotInheritable Class ApplicationData Implements IDisposable\n\nInheritance\n\nObject Platform::Object IInspectable ApplicationData\n\nAttributes\n\nImplements\n\nWindows requirements\n\nDevice family\n\nWindows 10 (introduced in 10.0.10240.0)\n\nAPI contract\n\nWindows.Foundation.UniversalApiContract (introduced in v1.0)\n\nExamples\n\nThe following code example demonstrates how to read or write to an ApplicationData folder of your choice. This example uses the LocalFolder, but the code can be slightly modified to access the LocalCacheFolder, RoamingFolder, SharedLocalFolder, or TemporaryFolder based on how your data should be stored. SharedLocalFolder has some restrictions and needs special permissions to access, for more information, see SharedLocalFolder.\n\n// This example code can be used to read or write to an ApplicationData folder of your choice. // Change this to Windows.Storage.StorageFolder roamingFolder = Windows.Storage.ApplicationData.Current.RoamingFolder; // to use the RoamingFolder instead, for example. Windows.Storage.StorageFolder localFolder = Windows.Storage.ApplicationData.Current.LocalFolder; // Write data to a file async void WriteTimestamp() { Windows.Globalization.DateTimeFormatting.DateTimeFormatter formatter = new Windows.Globalization.DateTimeFormatting.DateTimeFormatter(\"longtime\"); StorageFile sampleFile = await localFolder.CreateFileAsync(\"dataFile.txt\", CreationCollisionOption.ReplaceExisting); await FileIO.WriteTextAsync(sampleFile, formatter.Format(DateTime.Now)); } // Read data from a file async Task ReadTimestamp() { try { StorageFile sampleFile = await localFolder.GetFileAsync(\"dataFile.txt\"); String timestamp = await FileIO.ReadTextAsync(sampleFile); // Data is contained in timestamp } catch (FileNotFoundException e) { // Cannot find file } catch (IOException e) { // Get information from the exception, then throw // the info to the parent method. if(e.Source != null) { Debug.WriteLine(\"IOException source: {0}\", e.Source); } throw; } }\n\n#include <winrt/Windows.Globalization.h> #include <winrt/Windows.Globalization.DateTimeFormatting.h> #include <winrt/Windows.Storage.h> using namespace winrt; using namespace Windows::Foundation; using namespace Windows::Storage; using namespace Windows::UI::Xaml; // This example code can be used to read or write to an ApplicationData folder of your choice. // Change this to StorageFolder m_localFolder{ Windows::Storage::ApplicationData::Current().RoamingFolder() }; to // use the RoamingFolder instead, for example. StorageFolder m_localFolder{ Windows::Storage::ApplicationData::Current().LocalFolder() }; // Write data to a file. IAsyncAction MainPage::WriteTimestampAsync() { StorageFile sampleFile{ co_await m_localFolder.CreateFileAsync(L\"dataFile.txt\", CreationCollisionOption::ReplaceExisting) }; Windows::Globalization::Calendar calendar; auto now = calendar.GetDateTime(); Windows::Globalization::DateTimeFormatting::DateTimeFormatter formatter{ L\"longtime\" }; try { co_await FileIO::WriteTextAsync(sampleFile, formatter.Format(now)); } catch (winrt::hresult_error const& /* ex */) { // Timestamp not written. } } // Read data from a file. IAsyncAction MainPage::ReadTimestampAsync() { StorageFile file{ co_await m_localFolder.GetFileAsync(L\"dataFile.txt\") }; try { winrt::hstring timestamp{ co_await Windows::Storage::FileIO::ReadTextAsync(file) }; } catch (winrt::hresult_error const& /* ex */) { // Timestamp not read. } } IAsyncAction MainPage::ClickHandler(IInspectable const&, RoutedEventArgs const&) { myButton().Content(box_value(L\"Clicked\")); co_await WriteTimestampAsync(); co_await ReadTimestampAsync(); }\n\n// This example code can be used to read or write to an ApplicationData folder of your choice. // Change this to StorageFolder^ roamingFolder = ApplicationData::Current->RoamingFolder; to // use the RoamingFolder instead, for example. StorageFolder^ localFolder = ApplicationData::Current->LocalFolder; // Write data to a file void MainPage::WriteTimestamp() { concurrency::task<StorageFile^> fileOperation = localFolder->CreateFileAsync(\"dataFile.txt\", CreationCollisionOption::ReplaceExisting); fileOperation.then([this](StorageFile^ sampleFile) { auto calendar = ref new Calendar; auto now = calendar->ToDateTime(); auto formatter = ref new Windows::Globalization::DateTimeFormatting::DateTimeFormatter(\"longtime\"); return FileIO::WriteTextAsync(sampleFile, formatter->Format(now)); }).then([this](task<void> previousOperation) { try { previousOperation.get(); } catch (Platform::Exception^) { // Timestamp not written } }); } // Read data from a file void MainPage::ReadTimestamp() { concurrency::task<StorageFile^> getFileOperation(localFolder->GetFileAsync(\"dataFile.txt\")); getFileOperation.then([this](StorageFile^ file) { return FileIO::ReadTextAsync(file); }).then([this](concurrency::task<String^> previousOperation) { String^ timestamp; try { // Data is contained in timestamp timestamp = previousOperation.get(); } catch (...) { // Timestamp not found } }); }\n\n' This example code can be used to read or write to an ApplicationData folder of your choice. ' Change this to Dim roamingFolder As Windows.Storage.StorageFolder = Windows.Storage.ApplicationData.Current.RoamingFolder ' to use the RoamingFolder instead, for example. Dim localFolder As Windows.Storage.StorageFolder = Windows.Storage.ApplicationData.Current.LocalFolder ' Write data to a file Private Async Sub WriteTimestamp() Dim formatter As DateTimeFormatter = New DateTimeFormatter(\"longtime\") Dim sampleFile As StorageFile = Await localFolder.CreateFileAsync(\"dataFile.txt\", CreationCollisionOption.ReplaceExisting) Await FileIO.WriteTextAsync(sampleFile, formatter.Format(DateTime.Now)); End Sub ' Read data from a file Private Async Function ReadTimestamp() As Task Try Dim sampleFile As StorageFile = Await localFolder.GetFileAsync(\"dataFile.txt\") Dim timestamp As string = Await FileIO.ReadTextAsync(sampleFile) ' Data is contained in timestamp Catch e1 As Exception ' Timestamp not found End Try End Function\n\nFor more samples and information about reading and writing to a file, see Create, write, and read a file.\n\nRemarks\n\nTypes of application data\n\nApplicationData provides local, roaming, and temporary storage for app data on a per-user basis. Use this class to preserve app-specific data between sessions, users, and across multiple devices.\n\nApplicationData does not provide access to files in an app package. To do this, use Windows.ApplicationModel.Package.InstalledLocation.\n\nApplicationData.Current gives you the app's ApplicationData instance. Use this instance to get app folders or settings.\n\nFolders are used to store app data as files on the file system. App settings are stored in key/value pairs that can be organized in to nested sets. Settings data is saved in the Windows registry.\n\nThese are the main types of app data:\n\nLocal: stored on the device, backed up in the cloud, and persists across updates\n\nLocalCache: persistent data that exists on the current device, not backed up, and persists across updates\n\nSharedLocal: persistent across all app users\n\nRoaming: exists on all devices where the user has installed the app\n\nTemporary: can be deleted by the system at any time\n\nUsing application folders\n\nLocalFolder persists across updates and gets backed up to the cloud as part of the device backup. Typically, this folder should be used for user data that would be lost if it were not backed up. Some examples of data stored in LocalFolder are:\n\na user drawing for an art app\n\ndaily exercise history for a fitness app\n\na shopping list for a todo app By storing information in the LocalFolder, the user will not lose data after resetting the device or switching to a new device. For other types of local data that are easy to recreate and not necessary for backup and restore, use the LocalCacheFolder or TemporaryFolder.\n\nLocalCacheFolder and TemporaryFolder are both stored locally and are not backed up to the cloud. LocalCacheFolder is under control of that app and is persistent across app sessions. LocalCacheFolder should be used for generated content needed across app sessions, such as cached files, logs, or authentication tokens. TemporaryFolder is not guaranteed to be persistent across sessions and can be deleted by the system at any time.\n\nRoamingFolder is typically used for user preferences and customizations, links, and small data files. The contents of RoamingFolder roam across the user's devices and app instances. RoamingFolder should not be used for large amounts of data, data specific to a device, or data that relies on instant syncing.\n\nAnother folder, SharedLocalFolder, is persistent across app user accounts and should be used for large files accessed by multiple users. There is some extra set up required to access SharedLocalFolder. For more information on accessing and using this folder, see SharedLocalFolder.\n\nYou can store your app data in app-specific, versioned formats. For more info, see Version and SetVersionAsync.\n\nFor more details on using these APIs, see Store and retrieve settings and other app data.\n\nProperties\n\nMethods\n\nEvents\n\nDataChanged\n\nOccurs when roaming application data is synchronized.\n\nApplies to\n\nSee also"
    }
}