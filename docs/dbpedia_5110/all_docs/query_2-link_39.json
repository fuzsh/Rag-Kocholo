{
    "id": "dbpedia_5110_2",
    "rank": 39,
    "data": {
        "url": "https://github.com/radiofrance/rf-liquidsoap",
        "read_more_link": "",
        "language": "en",
        "title": "liquidsoap: Radio France's liquidsoap configuration with a self contained docker infrastructure for resilient radio streaming",
        "top_image": "https://opengraph.githubassets.com/c9291f489af4f72a8a6c6496b69f460a41aa8f9eed9ac29e87ef1c4c9b5aa143/radiofrance/rf-liquidsoap",
        "meta_img": "https://opengraph.githubassets.com/c9291f489af4f72a8a6c6496b69f460a41aa8f9eed9ac29e87ef1c4c9b5aa143/radiofrance/rf-liquidsoap",
        "images": [
            "https://camo.githubusercontent.com/8d9573db7b48a5ab3d72632c30568fce4754ae15f69420953c3a5d50ff66c52c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f6666696369616c253230576562736974652d726164696f6672616e63652e66722d626c75653f7374796c653d666c61742d737175617265266c6f676f3d776f726c64266c6f676f436f6c6f723d7768697465",
            "https://camo.githubusercontent.com/dfc92b31b54c06711b03272717b0c4fe302e701cbeb5855cb85de70619e917f3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f6666696369616c253230576562736974652d726164696f6672616e63652e636f6d2d626c75653f7374796c653d666c61742d737175617265266c6f676f3d736370666f756e646174696f6e266c6f676f436f6c6f723d7768697465",
            "https://camo.githubusercontent.com/aa7b607e9c57f4c4af7530e033459048fd34169ca8e13778da590505ff08ab3e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f726164696f6672616e63652f72662d6c6971756964736f61703f7374796c653d666c61742d737175617265",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/Logo_Radio_France.svg",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/basic.png",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/advanced.png",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/prometheus.png",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/grafana.png",
            "https://github.com/radiofrance/rf-liquidsoap/raw/master/.res/2023-05-02.archi-transcoders.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Radio France's liquidsoap configuration with a self contained docker infrastructure for resilient radio streaming - radiofrance/rf-liquidsoap",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/radiofrance/rf-liquidsoap",
        "text": "[CHANGELOG - LICENSE]\n\nThis project contains the Liquidsoap scripts used at Radio France in production to produce multi-sourced resilient HLS and Icecast streams for our 77 radio stations.\n\nIt includes a demo monitoring stack for metrics, alerts and dashboards, based on Prometheus, Alertmanager and Grafana. This stack is a simplified version of the one we use in our production environments.\n\nAn example station implementation called myradio is provided, using other online radios as SRT sources. At Radio France, those SRT sources are coming from our studios. Each Liquidsoap process (supposedly one per station) is fed multiple times with the same audio content coming from different network paths, which allows us to be resilient and to perform maintenances without service interruptions.\n\nIf you want to know more about our streaming infrastructure:\n\nFOSDEM (2020) (Maxime Bugeia)\n\nLiquidshop 1.0 (2021) (Youenn Piolet) - video - slides\n\nLiquidshop 3.0 (2023) (Youenn Piolet) - video - slides slides .res/2023-05-30.liquidshop3.presentation.md\n\nFor each station (sometimes called \"radio\" in this repository), a Liquidsoap process will consume a set of active/fallback SRT sources to produce a single output stream called radio_prod. In the eventuallity the current preferred SRT source should fail, radio_prod will fallback to the next available source. Some sources can be excluded from the autofallback loop, waiting for a manual switch.\n\nThe output stream radio_prod is encoded multiple times with different encoders and with multiple quality profiles. We provide some encoder settings as \"profiles\" in the common Liquidsoap script (mp3, aac, libfdk-aac...).\n\nAfter the encoding, there are two output methods running in parallel:\n\nIcecast: Liquidsoap connects as a source to an icecast server and pushes audio\n\nHLS: adaptative / rolling playlists and audio segments are created locally and can be served by a simple HTTP server like NGINX. There is a purge mechanism that will get rid of old audio segments. Segments can also be pushed on a remote service we called segmentforwarder. Please note that this custom external service is not provided in this repository, but we can tell you it allows us to index those segments, build our HLS playlists, timeshift and push the segments to CDN providers.\n\nIn this project, the Liquidsoap configuration files are split in two. This separation allows us to industrialize the station definitions:\n\nThe scripts/ folder contains a common set of Liquidsoap scripts that are reused for each station. You may see it as a versionned \"template folder\" or \"app\". When we bring changes to these configuration files, all of our streams are impacted.\n\nPer station configuration is achieved in a another file, provided in the start command of the Liquidsoap process: for each stream we build, the autofallback SRT inputs, listening ports and output formats are defined in their own standalone file (see myradio.liq for a complete example). You can see this as an inventory file. (To be honnest, we have so many stations to define we actually generate those files with an external templating tool)\n\nIn the common Liquidsoap configuration, Prometheus metrics are created and exposed on a dedicated port, allowing the real time monitoring of buffers, audio levels and SRT input state.\n\nEverything will run in containers so you don't need much:\n\nmake\n\ndocker\n\na player, like vlc, ffplay or a browser\n\ncurl to make calls to the HTTP API\n\nYou can safely press ctrl+c to stop displaying logs\n\nThis stack is portable and can be stopped and removed with:\n\nBy default, the Liquidsoap main loop produces blank audio when nothing is fed into the SRT input ports. It means that if Liquidsoap is started, you can already listen to the blank stream using the Icecast URL or the HLS playlist.\n\nIf you ran the complete stack with the make start command, 3 SRT sources will feed the Liquidsoap service, coming from various Internet Radios you will restream locally: voieA_caller1, voieB_caller1 and override_caller1\n\nFirst SRT input voieA_caller1 will be selected by default.\n\nIn the following examples we use ffplay as the audio player, but you could use anything you want: a custom web player, a mobile app, vlc, a native player inside a browser, etc.\n\nListening URLs for the myradio example are the following:\n\nTo listen to the HLS adaptative playlist:\n\nFor convenience, playlists and HLS .ts segments can be browsed thanks to the nginx server:\n\nThe HTTP API allows you to switch between sources or get information about the output stream.\n\nYou can easily get current status:\n\nYou will get the following response:\n\npreferred_output is the preferred SRT source that Liquidsoap will select to build the output stream (highest priority input).\n\nreal_output is the real source currently used by Liquidsoap to build the output stream. If the preferred livesource is unavailable, you can read here which source Liquidsoap is currently using as a fallback.\n\nis_output_blank is a boolean set to true when audio is blank (no sound).\n\nTo manually switch between SRT sources:\n\nFor example:\n\nTo send audio to the SRT source, you can use srt-live-transmit or ffmpeg compiled with SRT support (Debian Bullseye ffmpeg or https://johnvansickle.com/ffmpeg/ for example).\n\nWe provide examples in the containers prefixed with source-. By default, they will start with make start but you can replace them by something more suitable for your needs.\n\nYou can also feed the SRT sources manually:\n\nThe port :10001 should be modified to match the SRT input you want to use. Each SRT input in the fallback loop has its own port. See input_list to find port definitions.\n\nMultiple endpoints are provided for the supervision of the stack. Most of them are based on the following prometheus metrics, created in the Liquidsoap scripts.\n\nName Type Description liquidsoap_hlssegment_sent counter Number of HLS segment send to segment-forwarder liquidsoap_input_latency_seconds gauge Mean input latency over the chosen window liquidsoap_input_max_latency_seconds gauge Max input latency since start liquidsoap_input_peak_latency_seconds gauge Peak input latency over the chosen window liquidsoap_output_latency_seconds gauge Mean output latency over the chosen window liquidsoap_output_lufs_5s gauge Audio LUFS Analysis of radio_prod with 5s windows liquidsoap_output_max_latency_seconds gauge Max output latency since start liquidsoap_output_peak_latency_seconds gauge Peak output latency over the chosen window liquidsoap_overall_latency_seconds gauge Mean overall latency over the chosen window liquidsoap_overall_max_latency_seconds gauge Max overall latency since start liquidsoap_overall_peak_latency_seconds gauge Peak overall latency over the chosen window liquidsoap_source_is_blank gauge Is source blank? (no audio) liquidsoap_source_is_playing gauge Is source playing? liquidsoap_source_is_preferred_livesource gauge Is source the preferred livesource? liquidsoap_source_is_ready gauge Is source ready? liquidsoap_source_unready_duration_seconds counter Cumulative duration in seconds of the source in unready state liquidsoap_srt_input_buffer_length gauge Length of the SRT buffer liquidsoap_srt_input_bytes_available gauge SRT stat byteAvailRcvBuf liquidsoap_srt_input_packet_drop_total gauge SRT stat pktRcvDropTotal (cumulative) liquidsoap_srt_input_packet_loss_total gauge SRT stat pktRcvLossTotal (cumulative) liquidsoap_srt_input_packet_received_buffer gauge SRT stat pktRcvBuf liquidsoap_srt_input_packet_received_total gauge SRT stat pktRecvTotal (cumulative) liquidsoap_time_of_last_data_timestamp gauge Last time source produced some data.\n\nYou can explore scrapped metrics and generate basic graphs from the Prometheus web interface:\n\nhttp://127.0.0.1:9090/graph\n\nLearn more about the request syntax on Prometheus website\n\nYou can check Prometheus metric scrapping status in the web interface too:\n\nhttp://127.0.0.1:9090/targets\n\nIf you want to save the dashboards you created in Prometheus or to benefit from better visualization tools, you can use Grafana to browse, edit and save advanced dashboards.\n\nhttp://127.0.0.1:3000/dashboards\n\nYou can get the default credentials from the docker-compose.yml. After your first login, Grafana may ask you to change those credentials. We provided some example dashboards similar to the ones we use at Radio France, they can be modified in example/grafana/provisioning/dashboards\n\nAlertmanager is here to handle alerts defined in Prometheus. An example container can be found in the docker-compose.yml file.\n\nOur Liquidsoap infrastructure and usage are documented in the video presentations and slides at the top of this document.\n\nYou can read more about us here:\n\nAMA Reddit (fr)\n\nOpen Source Observatory (European Commission)\n\nXuanta de Galicia (es)\n\nThis repository is maintained by Radio France.\n\nFondation Team, Direction du Numérique, 2020-now\n\nMany thanks to Romain Beauxis, Samuel Mimram, the awesome Liquidsoap community, contributers and open source radio broadcasters that allowed a national broadcaster like Radio France to build its streaming platform with open source tools.\n\nGreetings to all current and past members from the Fondation Team. Special thanks to Maxime Bugeia for his precious work on this project.\n\nFeel free to fork or open issues if you have questions.\n\nPull requests are welcome, but be aware we will be extra carreful in the merge process since it has to match our needs.\n\nThe rf-liquidsoap project is released under the CeCILL-B (en, fr) license."
    }
}