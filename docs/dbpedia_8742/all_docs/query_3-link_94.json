{
    "id": "dbpedia_8742_3",
    "rank": 94,
    "data": {
        "url": "https://libraries.io/rubygems/capistrano-multistage",
        "read_more_link": "",
        "language": "en",
        "title": "security & maintenance data for open source software",
        "top_image": "https://librariesio.github.io/pictogram/rubygems/rubygems.png",
        "meta_img": "https://librariesio.github.io/pictogram/rubygems/rubygems.png",
        "images": [
            "https://libraries.io/assets/logo-f12a3d741e6af01c2ff47be93f3429827ff8986ba389bdf4e703b75060f68a2b.svg",
            "https://camo.githubusercontent.com/30dc802015645961b314e3d16891b49e2152a5363a0da614955550f43c6ba3c1/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f546563686e6f476174652f636f6e74616f2e706e673f6272616e63683d6d6173746572",
            "https://camo.githubusercontent.com/7ad813dece248dd76df976d188397881bfc2796f7a061ec3a4a844b9dc54fe81/68747470733a2f2f67656d6e617369756d2e636f6d2f546563686e6f476174652f636f6e74616f2e706e67",
            "https://camo.githubusercontent.com/e5ba032ebec868713740e0f553098bcbf3eed6282252f0b5744bc1fd7d3e9cfa/687474703a2f2f706c65646769652e636f6d2f63616d706169676e732f31363132332e706e673f736b696e5f6e616d653d6368726f6d65",
            "https://libraries.io/assets/Tidelift-logo-on-light-425bef696a6e11cfa124a726f0f485aa08d8a0a0a374fc488e20370cfe34e0cc.svg",
            "https://www.gravatar.com/avatar/5ce3878068ed79286f859ec00fb0c463?s=120&f=y&d=retro",
            "https://avatars.githubusercontent.com/u/87115?size=120",
            "https://libraries.io/assets/Tidelift_project_logo_white-eb4d67a698f88ef27b665cf10d43d989c960f6c0c40aa929a440f02864d177b8.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-07-05T10:24:23+00:00",
        "summary": "",
        "meta_description": "Capistrano multistage extensions - 0.0.4 - a Ruby package on Rubygems",
        "meta_lang": "en",
        "meta_favicon": "https://libraries.io/assets/apple-touch-icon-57x57-d2ce1ae09b96b2dcd4548cdab571b2f0f04567fd52bb42acdc158f3e499fb9f2.png",
        "meta_site_name": "Libraries.io",
        "canonical_link": "https://libraries.io/rubygems/capistrano-multistage",
        "text": "Welcome to Contao!\n\nThis gem will help you to quickly develop a website using Contao CMS which has pre-built support for Sass, Compass, CoffeeScript, Jasmine and Capistrano.\n\nIt also feature hashed assets served by the Contao Assets extension, which allows you to have an md5 appended to each of your assets URL on the production site.\n\nAll the images references by the CSS file, are also hashed, so when you deploy a new version of your image and/or your CSS, you are absolutely sure that your visitors do not get a cached copy of your old asset.\n\nWould generate:\n\nCompass gives great power over your CSS, one most-wanted feature is the sprites, so having one PNG file for all your backgrounds is just awesome, the generate CSS looks like this\n\nWould generate:\n\nCheck Compass Sprites Documentation\n\nFinally, the integration with Capistrano allows you to quickly deploy, copy assets, import database and even upload media such as images and PDFs all from the command line using Capistrano.\n\nBefore installing the gem, you need to make you are running on a Ruby version 1.9.2 or greater as this Gem and most of it's dependencies do not support Ruby 1.8, to check the version you are running, using the following command:\n\nruby --version\n\nIf you're running a ruby version below 1.9, please install a 1.9 version by following the guide at the Rbenv Installer project.\n\nContao depends on Qt (for headless javascript testing using jasmine and jasmine-headless-webkit, to install it, refer to Capybara Webkit Installation\n\nAnd Finally, you need Git as the whole template has been built for it, you can also work with a different SCM, but you need to get the template file yourself, initialize it and track it with your favorite SCM, something I strongly vote against.\n\nInstall contao with the following command\n\nDon't forget to run rbenv rehash if you are using rbenv as this gem provides an executable.\n\nLocally, the database name is the same as the application name, so if you named your project is named my_project, the database name will be named my_project.\n\nOn the server, Capistrano will append the environment on which the deployment occured (check the deployment section below for more information) to the application name, so if your project is named my_project and you are deployment to the staging environment, the database name would default to my_project_staging\n\nTo start using contao, you need to generate a config file, issue the command\n\ncontao generate config\n\nand follow the on-screen instructions.\n\nGenerating a new project is very easy, just use the following command:\n\ncontao new /path/to/my_project\n\nThis command will generate an application called my_project in the folder /path/to, the application name is very important as it defaults to the name of your database, check the Database name section below for more information.\n\nOnce the project generator has completed, cd into the newsly created project and bootstrap contao by running\n\nNow visit /contao/install.php or just visit the website and you should be redirected to the Installation script, from here on it is the usual Contao installation procedure, please check Contao's user guide for detailed information\n\nTo be able to develop with this version of Contao, you first need to understand how it actually works, take a look at the project structure for more information on how files are organised\n\nContao is integrated with Rails, actually only the asset pipeline functionality is being used, Compass is also integrated with the project so you can develop your CSS using Compass functions and mixins as well as sprites.\n\nTo start working on the project, you need to run the rails server by running\n\nThis will start a rails process on port 9876 and serve the assets from their, The Contao Assets Extension automatically detect that you are running in development and will use assets from the rails server directly.\n\nBefore deploying the project, you need to edit Capistrano config files located at config/deploy.rb and config/deploy/development.rb.\n\nFor a standard project tracked by Git, you do not need to edit the file config/deploy.rb but you do need to edit config/deploy/development.rb which is auto-documented.\n\nCapistrano comes with support for multiple stages, you could have development, staging, production or any other stage, all you need to have is the stage name mentioned in config/deploy.rb\n\nand a config file by the same name of the stage located at config/deploy/, the Template is pre-configured for development, staging and production but comes with only one config file for development, to configure another stage just duplicate the development file to the desired stage.\n\nTo deploy your project, you need to first configure the server, if you are deploying to a server managed by yourself and using Nginx (Apache templates will be added later), you can generate a config file for your new site, add a user to the database and create the database using the following command:\n\nThe above step is optional and only useful if you manage your own server, but if you are using a shared server (Hosting), running that command would not be possible as you don't have root access.\n\nNOTE: This command must be used only once per stage per project.\n\nBefore deploying you need to setup the project structure, generate the localconfig.php, and the .htaccess, to do that just run\n\nNOTE: This command must be used only once per stage per project.\n\nTo deploy the project simply run\n\nAs you may have noticed, all the above commands had the development stage as the first argument (first argument to cap), to deploy to any other stage just use that stage's name instead.\n\nThe contao template comes pre-configured with development as the default stage\n\nSo if you omit the stage (the first argument) when calling cap\n\nThe stage would be set to whatever default_stage is set to, in this case development\n\nYou do not need to use SSH or phpMyAdmin to export or import a database dump, in fact capistrano already knows the credentials to access the database, so We added a few tasks to help ease this process.\n\nTo import a database dump, which is very useful for deploying a website that was in development on your localhost, you can use the task db:import (Remember that all the following commands can optionally take the stage as the first argument, when omited the stage is set to the default_stage). To import /path/to/project.sql for example, you only have to use the command\n\nThe above command will first backup your database on the server (check /backups relative to your project directory of course), and then import the project.sql into it, however it's up to you to make sure your SQL dump file has DROP TABLE IF EXISTS statements to overwrite the tables.\n\nTo export a database dump, which is very useful to import changes from the server to your local development machine\n\nThis file will download the SQL dump file to a random file in /tmp but you can optionally give it an argument which would be used as a filename. This command will also backup the database on the server.\n\nTODO: Write this section.\n\nTODO: Write this section.\n\nFork it\n\nCreate your feature branch (git checkout -b my-new-feature)\n\nCommit your changes (git commit -am 'Added some feature')\n\nPush to the branch (git push origin my-new-feature)\n\nCreate new Pull Request\n\nOr\n\nContact\n\nFor bugs and feature request, please use Github issues, for other requests, you may use:\n\nEmail: contact@technogate.fr\n\nDon't forget to follow me on Github and Twitter for news and updates.\n\nI'd like to give a special thanks to the guys at Agence Durable for supporting and testing this project, Leo Feyer for creating an awesome and easy to use CMS, and of course all Contao contributors, and Finally The Rails Core Team and the entire Ruby community which are simply awesome.\n\nThe contao folder is a mess and can become a lot messier pretty quickly so we need to extract each extension into it's folder (make it modularized)\n\nAdd Capistrano tasks for Starting/Stopping/Reloading Nginx\n\nAdd Capistrano support for Apache\n\nThe install password should be different for each website and the developer should be able to modify it, Basically the install password in ~/.contao/config.yml should be stored in clear-text (or encrypted but decryptable), and once we generate a new project we should generate a new salt, store it in an initializer, generate the install password and store it in an initializer as well\n\nA new rake task should be created to help the user easly modify the install password\n\nThe encryption_key should be generated for each project and not stored in the ~/.contao/config.yml\n\nThe assets takes a considerably amount of time to be uploaded, specially if you have many images, we should compress the entire folder, upload it and then extract it on the server, as it would be much faster to upload one file.\n\nCopyright (c) 2011 TechnoGate <support@technogate.fr>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    }
}