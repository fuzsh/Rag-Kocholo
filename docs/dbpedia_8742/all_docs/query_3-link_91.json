{
    "id": "dbpedia_8742_3",
    "rank": 91,
    "data": {
        "url": "https://docs.contao.org/dev/guides/dca/",
        "read_more_link": "",
        "language": "en",
        "title": "Managing Data Records :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Creating a DCA to manage custom data records.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Managing Data Records\n\nIn this tutorial we will have a look on how to build a DCA definition, so you can manage custom data records within the Contao back end for your web application project. We will devise an example utilising different features and then build each aspect step by step.\n\nOur Example\n\nIn our example we will assume that we are creating a web application for a wholesale dealer who is trading “industrial parts”. Each part belongs to a vendor and can have detailed information like the name, part number, description and an image. Furthermore each vendor can have detailed information as well, like the name of the vendor and their main address.\n\nFor the back end workflow we decide that the “parts” should be organised as child records for each vendor and that we will manage these records under the main menu item called “Parts” within the other “Content” menu items.\n\nFor the actual data record tables we decide on the table names tl_vendor (for the vendor records) and tl_parts (for the parts records).\n\nCreating the DCA\n\nCreating the DCA in this case is divided into two main steps: creating the DCA for our tl_vendor records and creating the DCA for our tl_parts records. For each table, we will go through the individual steps of defining the configuration, record listing, fields, palettes and may be callbacks.\n\ntl_vendor\n\nTo create our DCA for the tl_vendor table, first create the following file within your Contao installation: /contao/dca/tl_vendor.php (Note: prior to Contao 4.8 these files need to be created under /app/Resources/contao/dca/tl_vendor.php).\n\nConfig\n\nFor our DCA configuration of tl_vendor, we want to define the following:\n\nThe data container for our records should be a database table.\n\nThe records can have child records in the tl_parts table.\n\nWe want to use the versioning feature to be enabled for these records.\n\nWe will have a primary key called id for our records.\n\nDefining the child record table is important so that we can then later actually edit the child records for each vendor record.\n\nList\n\nHere is where things get more complex. We want:\n\nall vendor records to be sorted by their name\n\nto be able to search through vendors bei their name\n\nthe listing to show us the name of the vendor\n\nto be able to edit the child records of each vendor\n\nto be able to edit the properties of each vendor\n\nto be able to delete the vendor\n\nThis results in the following configuration for the list part of the DCA:\n\nAs you can see we have defined the sorting of all records and the label and operations for each record.\n\nFields\n\nNow we will actually define the fields for our tl_vendor records. As previously defined, each vendor should have a name and an address. We will further split the address into street, postal, city and country.\n\nWhen table data records are managed by Contao, you always need to add at least the fields id and tstamp. The latter will contain a Unix timestamp when the record was last edited.\n\nFor the other fields have a look at the fields reference to see all the possibilities for each field. For the country selection field we also used another feature: we are retrieving all countries directly from the system via the contao.intl.countries service. This gives us an associative array of all translated countries, indexed by their country code (e.g. 'at' => 'Austria').\n\nPalettes\n\nWhen editing a record the layout of the input fields is defined by a “palette”. For our vendor records we only need to provide a single default palette. However, within that palette, we will group the address information and thus separate it from the vendor’s name.\n\nThis finishes our DCA definition for tl_vendor.\n\ntl_parts\n\nNow we will execute the same steps for our tl_parts table. Only the major differences will be outlined.\n\nConfig\n\nThe basic DCA configuration is the same as before. This time we do not have a child table though, but we must define a parent table. Also we are using an onload_callback here to dynamically adjust our DCA definition. We are assuming that the part number always consists of the first two letters of the vendor. So to make things easier for the editor, we fetch the name of the parent (the vendor) and define the first two letters of the name as the default for the number field.\n\nGenerally it is recommended to use services for such callbacks. For the simplicity of this article an anonymous function is implemented, using the legacy way of retrieving the database connection and parameter inputs.\n\nList\n\nFor the list configuration we are using sorting mode 4, which is specific to displaying child records of a parent record. In this mode however we need to define a child_record_callback, otherwise no records will be rendered. this callback is implemented as an anonymous function.\n\nFields\n\nAs described before, our parts will consist of a name, number, description and an image. For our description we will provide the ability to use the TinyMCE editor. For the image we will configure the ability to use the file tree picker.\n\nWe also defined the flag 1 for our name field. Using list sorting mode 4 Contao will group the child records according to the given fields. By setting the flag of the field to 1, the child records will be grouped by their name’s initial letter.\n\nPalettes\n\nThe only thing left is the palette definition. We only need the default palette and we will use only one group.\n\nThis finishes our DCA definition for tl_parts.\n\nDefining the Back End Module\n\nSo far there will not be a back end menu item yet where the records can be managed, because the back end module definition is still missing. This is done in the /contao/config/config.php file using the $GLOBALS['BE_MOD'] global array. It is an associative array containing all the back end modules grouped in their context (e.g. content).\n\nFor our back end module to appear as the last item in the main Content menu, we need to do the following:\n\nThe definition depends on the type of back end module. Since in our case we are managing table records, we have to define the tables to be managed.\n\nAdding Translations\n\nNow that we have finished the DCA configuration and added our back end module, we can actually start creating and managing records. However, things will look a bit off since our back end module is missing translations in many places. For example labels for creating records and palette legends need to be defined for each data container.\n\nTranslations must be put into the /contao/languages folder, while each language will have its own subfolder there. Our translations will go into the /contao/languages/en folder.\n\nThe English translations will also be the fallback when there are no other translations available.\n\nFirst we will add the translation for our back end module, which goes into the modules.php:"
    }
}