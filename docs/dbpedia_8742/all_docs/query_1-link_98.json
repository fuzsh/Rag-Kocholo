{
    "id": "dbpedia_8742_1",
    "rank": 98,
    "data": {
        "url": "https://docs.contao.org/dev/getting-started/extension/",
        "read_more_link": "",
        "language": "en",
        "title": "Creating an Extension :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How to create a re-usable extension for Contao.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Creating an Extension\n\nLike many other CMS, Contao’s functionality can easily be extended by installing extensions from third parties. This article will explain the basics on how to create an extension of your own - for others to use or just yourself.\n\nAs Contao itself is just a Symfony bundle that’s loaded to your Symfony application or Contao Managed Edition, writing your own bundle is very similar to writing a regular Symfony bundle. To learn more about bundles in general, you can read the respective Symfony documentation first.\n\nF This article guides you through the necessary steps of creating an extension. It reflects the minimum amount of basic configuration that has to be done in order to be able to install such an extension in your Contao installation.\n\nObjectives\n\nWhen creating an extension, the following objectives are relevant:\n\nThe code of your extension will be managed via Git\n\nThe extension will be installed via composer.json\n\nDevelopment of the extension can be done within vendor/\n\nInitial Setup\n\nThe first thing you do is usually to decide on a name for the extension and its package. For the package name, the usual convention is to use the vendor name identical to your organization’s Git account name, plus the name of the extension in kebab case, prefixed with contao-, e.g.: somevendor/contao-example-bundle.\n\nWhen starting an extension from scratch (i.e. you do not even have a remote Git repository set up yet for your extension), you first create a folder for the source of your extension. This can be anywhere in your file system, as it will be later on installed via Composer.\n\nComposer Setup\n\nWithin the previously created folder, you initialize a new composer.json, which you can do with the composer init command. During generation, set the package type to contao-bundle, as mentioned in the Your First Extension guide. Also choose the right SPDX for your license. During the interactive generation you can also already define your dependencies. At the very least you should require the Contao version, i.e. the version of the contao/core-bundle for which you are developing.\n\nDevelopment Structure\n\nNow it is time to set up your actual development structure. Typically, you will have a src/ folder containing all the sources of your extension, and a test/ folder for tests (if any). This is a common setup, though you are free to choose a different one (e.g. no src/ and test/ subfolder, starting with the namespace folders directly).\n\nNext you will choose a top-level namespace and extension related subnamespace for your extension, e.g. Somevendor\\ContaoExampleBundle. Using the PSR-4 Autoloading Standard the src/ folder will be mapped as the namespace base folder for that namespace in the autoloading part of your extension’s composer.json. This has already been added by composer init, if you confirmed this:\n\nInstallation\n\nNow we can include the (still empty) extension into a Contao installation. Since this is still just a local directory (and not publicly available via a Git repository), we will have to define this “repository” manually in the root composer.json of the Contao installation:\n\nIn the require part we can then request the installation of our extension, using the defined package name and dev-main as the version, as this is the default branch alias that Composer will use, if nothing else is defined in the composer.json or via Git.\n\nWhen running a composer update, Composer will now symlink the given path into the vendor directory of the Contao installation and everything is ready to go. You can now continue developing within vendor/somevendor/contao-example-bundle.\n\nCreating the Bundle\n\nNow it is time to do some ground work for the extension:\n\nCreate a bundle class.\n\nCreate a Contao Manager Plugin to load the bundle within a Contao Managed Edition.\n\nConfigure the composer.json for the Contao Manager Plugin.\n\nCreating the bundle class is simple enough. The name of the bundle class can be freely chosen - typically it will have the same name as your top-level subnamespace, or even a combination of your complete top-level namespace. For example:\n\nIn this example we also override the getPath method in order to take advantage of the recommended bundle structure where there is no src/Resources/ folder anymore.\n\nThe bundle class can otherwise be empty, but could contain additional bundle configurations (see Symfony’s documentation on how to create bundles).\n\nNext up we create a Manager Plugin within our extension, so that our bundle can be automatically loaded by a Contao Managed Edition instance. The following plugin will load our bundle after the Contao Core Bundle (since the order of execution matters for certain things like DCA or translation adjustments).\n\nIn order to expose the plugin to the Managed Edition we need to reference it in the extension’s composer.json:\n\nAfter running composer update, the Contao Manager Plugin will load this bundle in the Contao Managed Edition. This will have no real effect yet, since the extension is still pretty empty.\n\nDevelopment\n\nWithin the extension development is largely the same as developing for the application. One of the differences is that we need to take care of loading our services and routes for example ourselves.\n\nService Configuration\n\nWhile the Contao Managed Edition (and also Symfony Skeleton Applications) will load certain YAML files automatically for your application, an extension or bundle will have to load the service configuration itself. The details are described in the Symfony documentation. Starting with Symfony 6 (used by Contao 5) there are two different ways.\n\nNow services can be registered as usual in your config/services.yaml. The following example would enable autowire and autoconfigure by default for all registered services. It will also automatically register every PHP class in your src/ folder as a service. This will enable you to create services on-the-fly and use PHP attributes for tagging your services.\n\nRouting Configuration\n\nIn order to define routes within this extension for a Contao Managed Edition, the Manager Plugin of the extension needs to provide the routing configuration. This is done by implementing the RoutingPluginInterface in the Manager Plugin, as described in the documentation.\n\nThis will load the routing configuration located under config/routes.yaml of this extension.\n\nVersioning & Publishing\n\nWhen ready, create a remote repository, e.g. on GitHub. You can initialize Git in your extension directly in vendor and push the code to that repository.\n\nThen the package can be published on the public Packagist by submitting the URL to the repository at packagist.org/packages/submit, assuming you already created an account. In order for Packagist to automatically update the information about your package, you need to implement any of the solutions offered here. For more information about publishing extensions within the Contao ecosystem, have a look at the dedicated article."
    }
}