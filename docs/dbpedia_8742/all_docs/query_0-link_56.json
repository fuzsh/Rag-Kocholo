{
    "id": "dbpedia_8742_0",
    "rank": 56,
    "data": {
        "url": "https://laravel.com/docs/11.x/valet",
        "read_more_link": "",
        "language": "en",
        "title": "The PHP Framework For Web Artisans",
        "top_image": "https://laravel.com/img/og-image.jpg",
        "meta_img": "https://laravel.com/img/og-image.jpg",
        "images": [
            "https://laravel.com/img/logomark.min.svg",
            "https://laravel.com/img/logotype.min.svg",
            "https://laravel.com/img/logomark.min.svg",
            "https://laravel.com/img/logotype.min.svg",
            "https://laravel.com/img/icons/drop_arrow.min.svg",
            "https://laravel.com/img/icons/drop_arrow.dark.min.svg",
            "https://laravel.com/img/logomark.min.svg",
            "https://laravel.com/img/social/x.dark.min.svg",
            "https://laravel.com/img/social/x.min.svg",
            "https://laravel.com/img/social/github.dark.min.svg",
            "https://laravel.com/img/social/github.min.svg",
            "https://laravel.com/img/social/discord.dark.min.svg",
            "https://laravel.com/img/social/discord.min.svg",
            "https://laravel.com/img/social/youtube.dark.min.svg",
            "https://laravel.com/img/social/youtube.min.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Laravel is a PHP web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.",
        "meta_lang": "en",
        "meta_favicon": "/img/favicon/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://laravel.com/docs/11.x/valet",
        "text": "Laravel Valet\n\nIntroduction\n\nInstallation\n\nUpgrading Valet\n\nServing Sites\n\nThe \"Park\" Command\n\nThe \"Link\" Command\n\nSecuring Sites With TLS\n\nServing a Default Site\n\nPer-Site PHP Versions\n\nSharing Sites\n\nSharing Sites on Your Local Network\n\nSite Specific Environment Variables\n\nProxying Services\n\nCustom Valet Drivers\n\nLocal Drivers\n\nOther Valet Commands\n\nValet Directories and Files\n\nDisk Access\n\nIntroduction\n\nLaravel Valet is a development environment for macOS minimalists. Laravel Valet configures your Mac to always run Nginx in the background when your machine starts. Then, using DnsMasq, Valet proxies all requests on the *.test domain to point to sites installed on your local machine.\n\nIn other words, Valet is a blazing fast Laravel development environment that uses roughly 7 MB of RAM. Valet isn't a complete replacement for Sail or Homestead, but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM.\n\nOut of the box, Valet support includes, but is not limited to:\n\nHowever, you may extend Valet with your own custom drivers.\n\nInstallation\n\nTo get started, you first need to ensure that Homebrew is up to date using the update command:\n\nNext, you should use Homebrew to install PHP:\n\nAfter installing PHP, you are ready to install the Composer package manager. In addition, you should make sure the $HOME/.composer/vendor/bin directory is in your system's \"PATH\". After Composer has been installed, you may install Laravel Valet as a global Composer package:\n\nFinally, you may execute Valet's install command. This will configure and install Valet and DnsMasq. In addition, the daemons Valet depends on will be configured to launch when your system starts:\n\nOnce Valet is installed, try pinging any *.test domain on your terminal using a command such as ping foobar.test. If Valet is installed correctly you should see this domain responding on 127.0.0.1.\n\nValet will automatically start its required services each time your machine boots.\n\nPHP Versions\n\nValet allows you to switch PHP versions using the valet use php@version command. Valet will install the specified PHP version via Homebrew if it is not already installed:\n\nYou may also create a .valetrc file in the root of your project. The .valetrc file should contain the PHP version the site should use:\n\nOnce this file has been created, you may simply execute the valet use command and the command will determine the site's preferred PHP version by reading the file.\n\nDatabase\n\nIf your application needs a database, check out DBngin, which provides a free, all-in-one database management tool that includes MySQL, PostgreSQL, and Redis. After DBngin has been installed, you can connect to your database at 127.0.0.1 using the root username and an empty string for the password.\n\nResetting Your Installation\n\nIf you are having trouble getting your Valet installation to run properly, executing the composer global require laravel/valet command followed by valet install will reset your installation and can solve a variety of problems. In rare cases, it may be necessary to \"hard reset\" Valet by executing valet uninstall --force followed by valet install.\n\nUpgrading Valet\n\nYou may update your Valet installation by executing the composer global require laravel/valet command in your terminal. After upgrading, it is good practice to run the valet install command so Valet can make additional upgrades to your configuration files if necessary.\n\nUpgrading to Valet 4\n\nIf you're upgrading from Valet 3 to Valet 4, take the following steps to properly upgrade your Valet installation:\n\nServing Sites\n\nOnce Valet is installed, you're ready to start serving your Laravel applications. Valet provides two commands to help you serve your applications: park and link.\n\nThe park Command\n\nThe park command registers a directory on your machine that contains your applications. Once the directory has been \"parked\" with Valet, all of the directories within that directory will be accessible in your web browser at http://<directory-name>.test:\n\nThat's all there is to it. Now, any application you create within your \"parked\" directory will automatically be served using the http://<directory-name>.test convention. So, if your parked directory contains a directory named \"laravel\", the application within that directory will be accessible at http://laravel.test. In addition, Valet automatically allows you to access the site using wildcard subdomains (http://foo.laravel.test).\n\nThe link Command\n\nThe link command can also be used to serve your Laravel applications. This command is useful if you want to serve a single site in a directory and not the entire directory:\n\nOnce an application has been linked to Valet using the link command, you may access the application using its directory name. So, the site that was linked in the example above may be accessed at http://laravel.test. In addition, Valet automatically allows you to access the site using wildcard sub-domains (http://foo.laravel.test).\n\nIf you would like to serve the application at a different hostname, you may pass the hostname to the link command. For example, you may run the following command to make an application available at http://application.test:\n\nOf course, you may also serve applications on subdomains using the link command:\n\nYou may execute the links command to display a list of all of your linked directories:\n\nThe unlink command may be used to destroy the symbolic link for a site:\n\nSecuring Sites With TLS\n\nBy default, Valet serves sites over HTTP. However, if you would like to serve a site over encrypted TLS using HTTP/2, you may use the secure command. For example, if your site is being served by Valet on the laravel.test domain, you should run the following command to secure it:\n\nTo \"unsecure\" a site and revert back to serving its traffic over plain HTTP, use the unsecure command. Like the secure command, this command accepts the hostname that you wish to unsecure:\n\nServing a Default Site\n\nSometimes, you may wish to configure Valet to serve a \"default\" site instead of a 404 when visiting an unknown test domain. To accomplish this, you may add a default option to your ~/.config/valet/config.json configuration file containing the path to the site that should serve as your default site:\n\n\"default\": \"/Users/Sally/Sites/example-site\",\n\nPer-Site PHP Versions\n\nBy default, Valet uses your global PHP installation to serve your sites. However, if you need to support multiple PHP versions across various sites, you may use the isolate command to specify which PHP version a particular site should use. The isolate command configures Valet to use the specified PHP version for the site located in your current working directory:\n\nIf your site name does not match the name of the directory that contains it, you may specify the site name using the --site option:\n\nFor convenience, you may use the valet php, composer, and which-php commands to proxy calls to the appropriate PHP CLI or tool based on the site's configured PHP version:\n\nYou may execute the isolated command to display a list of all of your isolated sites and their PHP versions:\n\nTo revert a site back to Valet's globally installed PHP version, you may invoke the unisolate command from the site's root directory:\n\nSharing Sites\n\nValet includes a command to share your local sites with the world, providing an easy way to test your site on mobile devices or share it with team members and clients.\n\nOut of the box, Valet supports sharing your sites via ngrok or Expose. Before sharing a site, you should update your Valet configuration using the share-tool command, specifying either ngrok or expose:\n\nIf you choose a tool and don't have it installed via Homebrew (for ngrok) or Composer (for Expose), Valet will automatically prompt you to install it. Of course, both tools require you to authenticate your ngrok or Expose account before you can start sharing sites.\n\nTo share a site, navigate to the site's directory in your terminal and run Valet's share command. A publicly accessible URL will be placed into your clipboard and is ready to paste directly into your browser or to be shared with your team:\n\nTo stop sharing your site, you may press Control + C.\n\nSharing Sites via Ngrok\n\nSharing your site using ngrok requires you to create an ngrok account and set up an authentication token. Once you have an authentication token, you can update your Valet configuration with that token:\n\nSharing Sites via Expose\n\nSharing your site using Expose requires you to create an Expose account and authenticate with Expose via your authentication token.\n\nYou may consult the Expose documentation for information regarding the additional command-line parameters it supports.\n\nSharing Sites on Your Local Network\n\nValet restricts incoming traffic to the internal 127.0.0.1 interface by default so that your development machine isn't exposed to security risks from the Internet.\n\nIf you wish to allow other devices on your local network to access the Valet sites on your machine via your machine's IP address (eg: 192.168.1.10/application.test), you will need to manually edit the appropriate Nginx configuration file for that site to remove the restriction on the listen directive. You should remove the 127.0.0.1: prefix on the listen directive for ports 80 and 443.\n\nIf you have not run valet secure on the project, you can open up network access for all non-HTTPS sites by editing the /usr/local/etc/nginx/valet/valet.conf file. However, if you're serving the project site over HTTPS (you have run valet secure for the site) then you should edit the ~/.config/valet/Nginx/app-name.test file.\n\nOnce you have updated your Nginx configuration, run the valet restart command to apply the configuration changes.\n\nSite Specific Environment Variables\n\nSome applications using other frameworks may depend on server environment variables but do not provide a way for those variables to be configured within your project. Valet allows you to configure site specific environment variables by adding a .valet-env.php file within the root of your project. This file should return an array of site / environment variable pairs which will be added to the global $_SERVER array for each site specified in the array:\n\n<?php\n\nreturn [\n\n// Set $_SERVER['key'] to \"value\" for the laravel.test site...\n\n'laravel'=> [\n\n'key'=>'value',\n\n],\n\n// Set $_SERVER['key'] to \"value\" for all sites...\n\n'*'=> [\n\n'key'=>'value',\n\n],\n\n];\n\nProxying Services\n\nSometimes you may wish to proxy a Valet domain to another service on your local machine. For example, you may occasionally need to run Valet while also running a separate site in Docker; however, Valet and Docker can't both bind to port 80 at the same time.\n\nTo solve this, you may use the proxy command to generate a proxy. For example, you may proxy all traffic from http://elasticsearch.test to http://127.0.0.1:9200:\n\nYou may remove a proxy using the unproxy command:\n\nYou may use the proxies command to list all site configurations that are proxied:\n\nCustom Valet Drivers\n\nYou can write your own Valet \"driver\" to serve PHP applications running on a framework or CMS that is not natively supported by Valet. When you install Valet, a ~/.config/valet/Drivers directory is created which contains a SampleValetDriver.php file. This file contains a sample driver implementation to demonstrate how to write a custom driver. Writing a driver only requires you to implement three methods: serves, isStaticFile, and frontControllerPath.\n\nAll three methods receive the $sitePath, $siteName, and $uri values as their arguments. The $sitePath is the fully qualified path to the site being served on your machine, such as /Users/Lisa/Sites/my-project. The $siteName is the \"host\" / \"site name\" portion of the domain (my-project). The $uri is the incoming request URI (/foo/bar).\n\nOnce you have completed your custom Valet driver, place it in the ~/.config/valet/Drivers directory using the FrameworkValetDriver.php naming convention. For example, if you are writing a custom valet driver for WordPress, your filename should be WordPressValetDriver.php.\n\nLet's take a look at a sample implementation of each method your custom Valet driver should implement.\n\nThe serves Method\n\nThe serves method should return true if your driver should handle the incoming request. Otherwise, the method should return false. So, within this method, you should attempt to determine if the given $sitePath contains a project of the type you are trying to serve.\n\nFor example, let's imagine we are writing a WordPressValetDriver. Our serves method might look something like this:\n\n/**\n\n* Determine if the driver serves the request.\n\n*/\n\npublicfunctionserves(string$sitePath, string$siteName, string$uri):bool\n\n{\n\nreturnis_dir($sitePath.'/wp-admin');\n\n}\n\nThe isStaticFile Method\n\nThe isStaticFile should determine if the incoming request is for a file that is \"static\", such as an image or a stylesheet. If the file is static, the method should return the fully qualified path to the static file on disk. If the incoming request is not for a static file, the method should return false:\n\n/**\n\n* Determine if the incoming request is for a static file.\n\n*\n\n* @returnstring|false\n\n*/\n\npublicfunctionisStaticFile(string$sitePath, string$siteName, string$uri)\n\n{\n\nif (file_exists($staticFilePath=$sitePath.'/public/'.$uri)) {\n\nreturn$staticFilePath;\n\n}\n\nreturnfalse;\n\n}\n\nThe frontControllerPath Method\n\nThe frontControllerPath method should return the fully qualified path to your application's \"front controller\", which is typically an \"index.php\" file or equivalent:\n\n/**\n\n* Get the fully resolved path to the application's front controller.\n\n*/\n\npublicfunctionfrontControllerPath(string$sitePath, string$siteName, string$uri):string\n\n{\n\nreturn$sitePath.'/public/index.php';\n\n}\n\nLocal Drivers\n\nIf you would like to define a custom Valet driver for a single application, create a LocalValetDriver.php file in the application's root directory. Your custom driver may extend the base ValetDriver class or extend an existing application specific driver such as the LaravelValetDriver:\n\nuse Valet\\Drivers\\LaravelValetDriver;\n\nclassLocalValetDriverextendsLaravelValetDriver\n\n{\n\n/**\n\n* Determine if the driver serves the request.\n\n*/\n\npublicfunctionserves(string$sitePath, string$siteName, string$uri):bool\n\n{\n\nreturntrue;\n\n}\n\n/**\n\n* Get the fully resolved path to the application's front controller.\n\n*/\n\npublicfunctionfrontControllerPath(string$sitePath, string$siteName, string$uri):string\n\n{\n\nreturn$sitePath.'/public_html/index.php';\n\n}\n\n}\n\nOther Valet Commands\n\nValet Directories and Files\n\nYou may find the following directory and file information helpful while troubleshooting issues with your Valet environment:\n\n~/.config/valet\n\nContains all of Valet's configuration. You may wish to maintain a backup of this directory.\n\n~/.config/valet/dnsmasq.d/\n\nThis directory contains DNSMasq's configuration.\n\n~/.config/valet/Drivers/\n\nThis directory contains Valet's drivers. Drivers determine how a particular framework / CMS is served.\n\n~/.config/valet/Nginx/\n\nThis directory contains all of Valet's Nginx site configurations. These files are rebuilt when running the install and secure commands.\n\n~/.config/valet/Sites/\n\nThis directory contains all of the symbolic links for your linked projects.\n\n~/.config/valet/config.json\n\nThis file is Valet's master configuration file.\n\n~/.config/valet/valet.sock\n\nThis file is the PHP-FPM socket used by Valet's Nginx installation. This will only exist if PHP is running properly.\n\n~/.config/valet/Log/fpm-php.www.log\n\nThis file is the user log for PHP errors.\n\n~/.config/valet/Log/nginx-error.log\n\nThis file is the user log for Nginx errors.\n\n/usr/local/var/log/php-fpm.log\n\nThis file is the system log for PHP-FPM errors.\n\n/usr/local/var/log/nginx\n\nThis directory contains the Nginx access and error logs.\n\n/usr/local/etc/php/X.X/conf.d\n\nThis directory contains the *.ini files for various PHP configuration settings.\n\n/usr/local/etc/php/X.X/php-fpm.d/valet-fpm.conf\n\nThis file is the PHP-FPM pool configuration file.\n\n~/.composer/vendor/laravel/valet/cli/stubs/secure.valet.conf\n\nThis file is the default Nginx configuration used for building SSL certificates for your sites.\n\nDisk Access\n\nSince macOS 10.14, access to some files and directories is restricted by default. These restrictions include the Desktop, Documents, and Downloads directories. In addition, network volume and removable volume access is restricted. Therefore, Valet recommends your site folders are located outside of these protected locations."
    }
}