{
    "id": "dbpedia_8742_0",
    "rank": 14,
    "data": {
        "url": "https://docs.contao.org/dev/getting-started/initial-setup/symfony-application/contao-4.13/",
        "read_more_link": "",
        "language": "en",
        "title": "Use Contao 4.13 in Symfony Application :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How to integrate Contao 4.13 into a Symfony application.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Use Contao 4.13 in Symfony Application\n\nThe Contao Open Source CMS can be integrated into a regular Symfony application. It needs a few installation steps in order to be properly set up. The following documentation leads you through them.\n\nInstall and set up your Symfony application\n\nIf you already have a full stack Symfony application set up, you can skip this step and go directly to the installation procedure for the Contao bundles. First of all we need a full stack Symfony application installed. You can find further information about this subject in the Symfony documentation.\n\n$ composer create-project symfony/website-skeleton contao-example \"^5.4\"\n\nThis command creates the directory contao-example, containing a bare bone Symfony application in it. In order to complete our installation copy the .env file to .env.local and change the environment values accordingly. In this case, we only need the DATABASE_URL changed, so our .env.local will also only contain this configuration value.\n\nAt this point contao-example should contain a working Symfony application and you can proceed to the second step, the installation of Contao itself.\n\nPrepare the application for the next step\n\nContao uses features of third party bundles. Most of them are configured automatically if you use Symfony flex, except the 2FA bundle. If you skip this step, your composer require task will fail. Therefore, you need to create a basic config yourself.\n\nCreate (or edit if the file already exists) the file config/packages/scheb_two_factor.yaml and add the following entries:\n\nNow you’re good to install the Contao Core bundle.\n\nInstall the Contao Core Bundle\n\n$ composer require --with-all-dependencies \\ contao/conflicts:@dev \\ contao/core-bundle:4.13.* \\ contao/installation-bundle:4.13.* \\ php-http/guzzle6-adapter \\ terminal42/service-annotation-bundle:^1.1 \\ toflar/psr6-symfony-http-cache-store:^3.0 \\ twig/twig:^3.0\n\nAs long as the Symfony flex plugin is installed you will be asked to execute contrib recipes for several packages. Answering a on those question sets you up faster.\n\nAfter this step, it is time to edit our composer.json file and add a few lines which Contao uses to set itself up.\n\nFinish and apply these changes by running another Composer update.\n\n$ composer update\n\nAfter the installation through Composer, a few configuration values needs to be changed and added.\n\nFirst of all, make sure all bundles are properly loaded. You should find the following lines in your config/bundles.php file.\n\nConfigure your Contao installation\n\nFirst, we need to configure the ContaoCoreBundle. To do so, create (or edit if the file already exists) the file config/packages/contao_core.yaml and add the following entries:\n\nMake sure all the Contao routes are loaded by your application. Add the following lines to config/routes.yaml. The Contao core bundle will provide a catch-all route. Since the order of those lines matter, make sure to load the ContaoCoreBundle at the end after the ContaoInstallationBundle.\n\nAdd the binary_string type to the list of Doctrine types. Edit the file config/packages/doctrine.yaml. Be sure to merge the following configuration into the existing one.\n\nBe sure to add the following configuration key/values to the config/packages/framework.yaml file, leaving the already existing lines there.\n\nThe default config/packages/ansi_to_html.yaml will try to register its AnsiExtension twice. Be sure to disable the autoconfigure key.\n\nDepending on the language of your choice, change the default and fallback language to e.g. de, so the install tool comes up translated in German. In order to do so, change en to de in config/packages/translation.yaml.\n\nContao relies heavily on the security component of Symfony, which needs to be configured accordingly. Replace the contents of the file config/packages/security.yaml with the following lines.\n\nLast part of this mandatory configuration is for the logging component. There is a development and a production configuration. The development configuration is located in config/packages/monolog.yaml.\n\nThis is an example configuration and you can adjust this to your custom needs if required.\n\nThe next step is to install the database schema to the configured database. Run the contao:migrate command and follow the instructions there.\n\n$ php bin/console contao:migrate\n\nSince everything is configured correctly, add a admin user through the CLI interface by running the contao:user:create command and follow the instructions given to you.\n\n$ php bin/console contao:user:create\n\nYou can now start a local server and open up the installation tool in your browser. For example, if you’re using the Symfony CLI, start the server like this:\n\n$ symfony serve\n\nEnable Cache and Front End Preview\n\nAt this point you have set up a working Symfony application and added the Contao Core Bundle. A few last steps are required to properly set up the caching and the front end preview.\n\nFirst, we need to install and configure the FOSHttpCacheBundle. To do so, install the package with composer, create (or edit if the file already exists) the file config/packages/fos_http_cache.yaml and add the following entries:\n\n$ composer require friendsofsymfony/http-cache ^2.13\n\nReplace your public/index.php with the following version to enable the caching capabilities from Contao.\n\nThe front end preview is an entry script on its own and needs to be placed in public/preview.php containing the following lines:\n\nMoreover you need to enable the front end preview by adding the following line to the config/packages/contao_core.yaml (be sure not just overwrite all the lines but add the needed ones).\n\ncontao: preview_script: '/preview.php'\n\nAnd finally, we need to replace the applications Kernel. Remove src/Kernel.php and a new file src/HttpKernel/AppKernel.php.\n\nIn the same directory create the file src/HttpKernel/AppCache.php.and\n\nThe last thing now is to adjust the config for the routing via annotations. If the file config/routes/annotations.yaml and a config for kernel exists, change it to this:\n\nAnd the last thing to fix is the cli entrypoint bin/console which should reflect our new AppKernel.\n\nAnd that’s it. You have successfully set up a Symfony application and/or installed the Contao Core Bundle."
    }
}