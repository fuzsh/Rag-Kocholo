{
    "id": "dbpedia_8742_1",
    "rank": 93,
    "data": {
        "url": "https://docs.contao.org/manual/en/guides/module-listing/",
        "read_more_link": "",
        "language": "en",
        "title": "Module Listing :: Contao Manual",
        "top_image": "https://docs.contao.org/manual/images/favicon.png",
        "meta_img": "https://docs.contao.org/manual/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Create a list of members with a Map via the module Listing",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/manual/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Module Listing\n\nWe would like to realise a list of members together with a map display via the service provider OpenStreetMap for a fictitious club site. For this we need corresponding Contao members who can be assigned to one or more Contao member groups (e.g. »tournament riders« or »board«).\n\nThese details are stored in the database table tl_member and can then be queried via the module of the »Type« listing.\n\nModule type »Listing«\n\nThe Contao frontend module of the »type« listing is mostly underestimated. From any database table you can retrieve records that can then be output to the frontend using template files.\n\nThe module realizes a comfortable input of simple SQL queries. The results are then displayed by default, among other things to display a list (template: list_default.html5) with optional links to detail pages (template: info_default.html5).\n\nFor the sake of simplicity, we will concentrate on the list display for our example. The respective field names can be found in the database table tl_member. Without specifying a condition, all specified data records are listed in the »Fields« area. Set the following specifications in the module:\n\nFieldValueTabletl_memberFieldsfirstname, lastname, email, postal, street, cityConditiondisable != 1Items per page0\n\nCondition\n\nThe condition disable != 1 filters the result of the query so that only members declared as »active« are displayed (in the sense of: No deactivated members).\n\nFor our club page we could imagine two fictitious member groups: »tournament riders« and »board«. Member groups are listed in the database table tl_member_group. We assume, that e.g. the group »board« is present here with an »id« of »2«. The reference of the group membership of a member is made in the table tl_member via the data set groups.\n\nIf you want to limit the member list to all »active« members of the group »board« you can enter the following condition: disable != 1 AND groups LIKE '%\"2\"%'.\n\nTemplate »list_default.html5«\n\nThe template »list_default.html5« is extensive, because it considers all eventualities of the representation in interaction with the module. For our example, together with the following information regarding the map display, we simplify the template.\n\nCreate a new template »list_default_member.html5« in the template directory you have specified under »Themes« and then use this in your module »Listing«:\n\nNew field for geo-coordinates\n\nFor the map display, we require the corresponding geo-coordinates of the address in the form of latitude and longitude for each member. If you do not already have them, create a new folder »contao/dca« in your Contao main directory with a file »tl_member.php«:\n\nFor Contao to accept this information, you have to update the »application cache« in the »System maintenance« section of the console or the Contao Manager.\n\nThen call the Contao installation tool (or from Contao 4.9 on also via the console: vendor/bin/contao-console contao:migrate). The new field myGeoData is then created in the database table »tl_member«. In the Contao backend you can now use the field to enter the geo-coordinates of a member (in the form of “latitude,longitude”).\n\nEach time the file »contao/dca/tl_member.php« is changed, the »application cache« must be updated again.\n\nDetermination of the geo-coordinates\n\nYou can find the required coordinates e.g. via Nominatim/Openstreetmap or Google Maps. For our example, the one-time determination and manual entry of the coordinates is reasonable for the new admission of a member. If you have a lot of data, you could use one of the numerous Contao extensions to automatically determine the coordinates.\n\nAnother alternative is the extension netzmacht/contao-leaflet-geocode-widget.\n\nExtension »netzmacht/contao-leaflet-geocode-widget«\n\nThe extension provides two backend widgets for geocoding of addresses including the perimeter. Please see the GitHub page for integration instructions. After installing the extension you can customize »contao/dca/tl_member.php« as follows:\n\nInstead of our previous text field we just change the »inputType« to »leaflet_geocode« according to the GitHub documentation. Afterwards, the Contao »application cache« needs to be updated (see above).\n\nEven if the geo-coordinates of a member are still not »automatically« determined, you can now easily get them from within the Contao backend.\n\nMap display\n\nThe necessary prerequisites for a map display are thus available to us. The field myGeoData can be added in the module »Listing«:\n\nFieldValueFiledsfirstname, lastname, email, postal, street, city, myGeoData\n\nJavaScript Framework »leaflet.js«\n\nThe map is displayed via OpenStreetMap and to create the map we use the JavaScript framework leaflet.js. With the leaflet download you will find the directory »dist« with the files »leaflet.js«, »leaflet.css« and »images/marker-icon.png« in the ZIP archive (currently v.1.7.1). Based on »leaflet.js« we create a JavaScript file myMemberLeafletMap.js with the following content\n\nYou have to adjust the directory information on the marker symbol (see: »myMarkerIconURL«) accordingly. Via mapCssId you define the CSS ID for the HTML container. The JavaScript function expects as argument an array with the corresponding information. This information is assigned to a group memberGroup, together with OpenStreeMap as map provider, for the purpose of displaying the map. Copy these files into a public directory of your Contao installation below »files«.\n\nTemplate adjustments »list_default_member.html5«\n\nWe supplement the existing template »list_default_member.html5« as follows:\n\nFirst we reference the required CSS and JS files (see also: CSS and JavaScript asstes). Furthermore we define a HTML container with the CSS ID MYMEMBERMAP for map display. In the PHP loop we collect the required coordinates via tmpMemberMapData and generate a JavaScript array in order to call our function createMemberMap(arrMemberMapData).\n\nThe HTML container for map display requires a CSS height specification. We have created this for simplicity’s sake set inline.\n\nWhen the map is retrieved, communication between the browser and the OpenStreetMap server is initiated. This transmission must be observed in the DSGVO or ePrivacy.\n\nMap display after confirmation\n\nThe creation and display of the map should only take place after confirmation by the user. You could, for example, first display a picture of the map together with corresponding information. After the user confirms this declaration of consent, the actual map display is initiated.\n\nFirst we add a new CSS class “static” to the HTML container in our template together with the corresponding CSS definitions:\n\nFor our example we have only given a colour value here. Here you could use a background image for example. We replace the JavaScript call of our function as follows:\n\nAs long as there is no confirmation from the user, our »static« alternative is displayed. Otherwise the map will be created and displayed. Instead of a cookie we use the localStorage functionality of the browser (you could also use the sessionStorage).\n\nUseful leaflet plugins\n\nThe leaflet framework can be extended with plugins. Here is a small selection:"
    }
}