{
    "id": "dbpedia_8742_1",
    "rank": 82,
    "data": {
        "url": "https://docs.contao.org/dev/getting-started/starting-development/",
        "read_more_link": "",
        "language": "en",
        "title": "Starting your Development :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Short introduction on how to start your development within Contao.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Starting your Development\n\nThere are two main cases when developing within Contao: either you want to customize your project-specific web application, or you want to create a re-usable extension - either for your own purposes or for others. In either case, the principles are the same. However, when creating an extension for Contao, there are some differences in structure and procedure. This articles covers the former case and also assumes the usage of the Contao Managed Edition. Another article explains how to create a reusable extension.\n\nThe purpose of this article is to show the directory structure of Contao and explain what goes where - and what to do initially for certain customization tasks.\n\nStructure\n\nAfter a fresh install of Contao, your project will have a certain initial file & directory structure (which is similar to the structure of a pure Symfony project using the symfony/skeleton for example).\n\nFile/DirectoryExplanationassets/JavaScript and CSS assets of the Contao framework and third parties.config/Application configuration files.files/Public or protected files manged by Contao’s file manager.system/Legacy folder for Contao 3 compatibility.templates/Customized Contao & Twig templates.var/Transient files like the application cache and log files.vendor/Composer’s vendor folder containing all dependencies (including Contao).web/Public entry points; contains symlinks to other public ressources.composer.jsoncomposer.json of your project defining your dependencies and autoloading.\n\nWhen customizing your web application, the following files and folders will usually be of interest. Some of those will need to be created manually:\n\nFile/DirectoryExplanationconfig/Application configuration.contao/Contao configuration and translations.src/Your own PHP code: controllers, event listeners for hooks and other services.templates/Templates for your own modules and elements, or customized existing templates.composer.jsonAdd dependencies, customize autoloading if required.\n\nApplication Configuration\n\nThe configuration of a Symfony application is done within the config/ directory through various YAML files. The Contao Managed Edition automatically loads the following configurations, if present:\n\nFileExplanation.envDefaults for environment variables or environment variables that are agnostic to the environment. This is typically comitted to your project’s repository and thus should not contain any sensitive data..env.localLoaded if .env exists. Defines or overrides environment variables for the current environment (e.g. database and SMTP credentials). This should be added to your .gitignore as it typically contains sensitive data.config/config.yamlConfiguration of any bundle/package/extension.config/config_dev.yamlConfiguration for the dev environment.config/config_prod.yamlConfiguration for the prod environment.config/parameters.yamlParameters like database and SMTP server credentials.1config/routes.yamlDefinition of application specific routes.2config/services.yamlsince 4.9 Definition of services.3\n\nContao Configuration & Translations\n\nContao has its own configuration files in the form of PHP arrays, as well as translation files in the form of either PHP arrays or in an XLIFF format. These files are generally defined within the contao/ folder of your project’s root directory (or app/Resources/contao/ in Contao 4.4).\n\nFile/DirectoryExplanationcontao/config/config.phpRegistering modules, content elements, models, hooks, crons, etc.contao/dca/Data Container Array customizations and definitions.contao/languages/Contao translations - contains sub directories for each language.contao/languages/de/German translations.contao/languages/en/English translations (also serves as the fallback).contao/languages/…/etc.\n\nHave a look at the DCA documentation on how to handle DCA files and the translation documentation on how to handle translation files. The content of the config.php depends on the use-case and its documentation is covered in the applicable topics of the framework documentation.\n\nAutoloading, Services and Controllers\n\nAny custom class that is needed for the web application - like a Model, a Content Element or a class for a Hook for example - needs to be loaded. Typically the code for customizing the web application for Contao will be put in the \\App namespace. The default composer.json of the recent Contao Managed Edition versions already contains the appropriate autoloading directive:\n\nAny of these classes can also be registered as Symfony services, which is necessary if you want to use dependency injection and service tagging. Registering Contao hooks, content elements, front end modules, cron jobs and Data Container callbacks is done via service tags.\n\nFor the application development it is recommended to use autowiring and auto-configuration, which makes it easy to create new services and tag them automatically (through annotations or class interfaces) - and thus enables quick development of Contao content elements, hooks, callbacks etc.\n\nIf you want to implement regular controllers and define their routes via PHP attributes, you will also need to register these routes via the automatically loaded config/routes.yaml:\n\nOnce this is configured, hooks, callbacks, content elements and front end modules for example can be created without having to configure them in separate files by using annotations for service tagging.\n\nAll this is not needed, if you only need to change or extend the Data Container Array definition of a table, or want to change a translation for example."
    }
}