{
    "id": "dbpedia_8742_0",
    "rank": 5,
    "data": {
        "url": "https://medium.com/%40dribeiro_t4d/creating-a-hello-world-contao-plugin-frontend-backend-development-7c0e16b24d2a",
        "read_more_link": "",
        "language": "en",
        "title": "Creating a “Hello World” Contao plugin: Frontend & Backend development",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*nGBU3zr7ez3pM6jN84ObFw.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*nGBU3zr7ez3pM6jN84ObFw.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*8SCESOO8NVdNwb20O5tz9w.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*8SCESOO8NVdNwb20O5tz9w.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "rd",
            "medium.com"
        ],
        "publish_date": "2024-04-22T08:14:35.824000+00:00",
        "summary": "",
        "meta_description": "FYI: The German version of this article is available at the following link: https://www.time4digital.lu/article/erster-hello-world-contao-plugin-erstellen. In this article, you will learn how to set…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@dribeiro_t4d/creating-a-hello-world-contao-plugin-frontend-backend-development-7c0e16b24d2a",
        "text": "The beginning is always difficult. Even for experienced developers like us, getting started with new technologies is often a challenge.\n\nFYI: The German version of this article is available at the following link: https://www.time4digital.lu/article/erster-hello-world-contao-plugin-erstellen.\n\nIn this article, you will learn how to set up the foundation of a plugin, display a ‘Hello World’ text in the frontend, define the data structure, and create a database connection. In the end, you should have a ‘Hello World’ plugin that also displays messages defined in the backend.\n\nThe plugin is available on GitHub at this link. You can use this code as a basis and for testing purposes.\n\nLet’s start with the file structure. Then we’ll build the foundation for the plugin so you can install the plugin through the Contao Manager. After that, we’ll create the first frontend module, and finally, we’ll work on the backend part.\n\nThe file structure of the plugin\n\nThe Contao plugin file structure must be strictly adhered to for the Contao Manager to recognize and load the Contao plugin as intended.\n\nContao plugin: basic structure\n\nIn the first step, you need to structure the plugin so that Contao recognizes it as such and it can be installed via the Contao Manager. To achieve this, the following classes need to be set up and adjusted:\n\nComposer file setup\n\nContao uses PHP Composer for modules, extensions, and plugins. Therefore, our plugin also requires a Composer configuration file located in the root directory of the plugin. If you want to use the sample composer.json, you must adjust the values marked with ‘#’ accordingly.\n\n./composer.json\n\n{\n\n\"name\": \"time4digital/dylans-hello-world-bundle\", #Name of the plugin\n\n\"description\": \"Dylan's Hello World Plugin\", #Description of the plugin\n\n\"license\": \"LGPL-3.0-or-later\",\n\n\"type\": \"contao-bundle\",\n\n\"version\": \"0.0.4\", #Version of the plugin\n\n\"authors\": [\n\n{\n\n\"name\": \"Ribeiro de Serra Dylan\",\n\n\"homepage\": \"https://www.time4digital.lu\" #Authors of the plugin\n\n}\n\n],\n\n\"homepage\": \"https://contao.org\", #OPTIONAL: Your website\n\n\"support\": {\n\n\"issues\": \"https://github.com/ridy01-backup/contao-plugins/issues\", #OPTIONAL: Git Link.\n\n\"source\": \"https://github.com/ridy01-backup/contao-plugins\"\n\n},\n\n\"require\": {\n\n\"php\": \"^8.1\",\n\n\"contao/core-bundle\": \"^4.13 || ^5.0\" #Set your dependencies here.\n\n},\n\n\"require-dev\": {\n\n\"bamarni/composer-bin-plugin\": \"^1.5\",\n\n\"contao/manager-plugin\": \"^2.0\",\n\n\"phpunit/phpunit\": \"^9.5\",\n\n\"symfony/phpunit-bridge\": \"^6.1\"\n\n},\n\n\"conflict\": {\n\n\"contao/manager-plugin\": \"<2.0 || >=3.0\" #Possible conflicts go here.\n\n},\n\n\"autoload\": {\n\n\"psr-4\": {\n\n\"Time4digital\\\\DylansHelloWorldBundle\\\\\": \"src/\" #The path being wired, format: \"VendorName\\\\BundleName\\\\\": \"PATH\"\n\n}\n\n},\n\n\"autoload-dev\": {\n\n\"psr-4\": {\n\n\"Time4digital\\\\DylansHelloWorldBundle\\\\Tests\\\\\": \"tests/\" #The path for tests, format: \"VendorName\\\\BundleName\\\\Tests\": \"PATH\"\n\n}\n\n},\n\n\"config\": {\n\n\"allow-plugins\": {\n\n\"bamarni/composer-bin-plugin\": true,\n\n\"contao-components/installer\": true,\n\n\"contao/manager-plugin\": true\n\n}\n\n},\n\n\"extra\": {\n\n\"bamarni-bin\": {\n\n\"bin-links\": false,\n\n\"target-directory\": \"tools\"\n\n},\n\n\"contao-manager-plugin\": \"Time4digital\\\\DylansHelloWorldBundle\\\\ContaoManager\\\\Plugin\" #Plugin Linking, Format:\"VendorName\\\\BundleName\\\\ContaoManager\\\\Plugin\n\n},\n\n\"scripts\": {\n\n\"all\": [\n\n\"@unit-tests\",\n\n\"@ecs\",\n\n\"@phpstan\"\n\n],\n\n\"ecs\": \"@php tools/ecs/vendor/bin/ecs check src tests --config ecs.php --fix --ansi\",\n\n\"phpstan\": \"@php tools/phpstan/vendor/bin/phpstan analyze --ansi\",\n\n\"unit-tests\": \"@php vendor/bin/phpunit --colors=always\"\n\n}\n\n}\n\nStructure of the bundle class\n\nThe Contao bundle is meant to bundle your resources. This class itself does not require any further specifications; it is sufficient to simply extend the class from the Symfony bundle.\n\n./src/DylansHelloWorldBundle.php\n\n<?php\n\nnamespace Time4digital\\DylansHelloWorldBundle;\n\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass DylansHelloWorldBundle extends Bundle\n\n{\n\n}\n\nStructure of the plugin class\n\nThe plugin class serves to load the bundle so that the Contao Manager knows it is a Contao plugin.\n\n./src/ContaoManager/Plugin.php\n\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Time4digital\\DylansHelloWorldBundle\\ContaoManager;\n\nuse Contao\\ManagerPlugin\\Bundle\\BundlePluginInterface;\n\nuse Contao\\ManagerPlugin\\Bundle\\Config\\BundleConfig;\n\nuse Contao\\ManagerPlugin\\Bundle\\Parser\\ParserInterface;\n\nuse Contao\\CoreBundle\\ContaoCoreBundle;\n\nuse Time4digital\\DylansHelloWorldBundle\\DylansHelloWorldBundle;\n\nclass Plugin implements BundlePluginInterface\n\n{\n\n/**\n\n* {@inheritdoc}\n\n*/\n\npublic function getBundles(ParserInterface $parser)\n\n{\n\nreturn [\n\nBundleConfig::create(DylansHelloWorldBundle::class)\n\n->setLoadAfter([ContaoCoreBundle::class]),\n\n];\n\n}\n\n}\n\nStructure of the dependency class\n\nThe Dependency class is responsible for loading the configuration and services files.\n\n./src/DependencyInjection/DylansHelloWorldExtension.php\n\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Time4digital\\DylansHelloWorldBundle\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\FileLocator;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nuse Symfony\\Component\\DependencyInjection\\Extension\\Extension;\n\nuse Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;\n\nclass DylansHelloWorldExtension extends Extension\n\n{\n\n/**\n\n* {@inheritdoc}\n\n*/\n\npublic function load(array $mergedConfig, ContainerBuilder $container)\n\n{\n\n$loader = new YamlFileLoader(\n\n$container,\n\nnew FileLocator(__DIR__.'/../Resources/config')\n\n);\n\n$loader->load('services.yml');\n\n}\n\n}\n\nThe config and services files\n\nThe config and services files are used to link the classes written within the bundle so that they can be loaded and utilized upon installation.\n\n./src/Resources/config/config.yml\n\nimports:\n\n- { resource: services.yml }\n\n./src/Resources/config/services.yml\n\nservices:\n\n_defaults:\n\nautowire: true\n\nautoconfigure: true\n\nAnd thus, the foundation of the plugin is built. Now, you could zip the plugin, upload it via the Contao Manager, and install it. However, that alone is not enough to display ‘Hello World’ in the frontend.\n\nContao ‘Hello World’ Frontend module structure\n\nIn this section, we will create a frontend module that displays “Hello World” in the frontend. The module also loads an additional CSS and JS file.\n\nStructure of the Frontend module class\n\nThe module class is used to create a module in the backend, which can then be loaded in an article or similar.\n\n./src/Module/DylanHelloWorldModule.php\n\n<?php\n\nnamespace Time4digital\\DylansHelloWorldBundle\\Module;\n\nuse Contao\\Module;\n\n// Setting the CSS and JS files here. Format: bundles/bundleName/fileName.fileExtension\n\n$GLOBALS['TL_CSS'][] = 'bundles/dylanshelloworld/styles.css';\n\n$GLOBALS['TL_JAVASCRIPT'][] = 'bundles/dylanshelloworld/scripts.js';\n\nclass DylanHelloWorldModule extends Module\n\n{\n\n// Here, the name of the template is defined.\n\n// The name must match the template located at ./src/Resources/contao/templates.\n\nprotected $strTemplate = 'mod_helloWorld';\n\nprotected function compile()\n\n{\n\n// Using $this->Template->nameVariable creates variables that can be used in the template.\n\n$this->Template->message = 'Hello World!';\n\n}\n\n}\n\nBringing Frontend module to the Backend\n\nThe config.php file is used to bring modules to the backend.\n\n./src/Resources/contao/config/config.php\n\n<?php\n\nuse Time4digital\\DylansHelloWorldBundle\\Module\\DylanHelloWorldModule;\n\n// Frontend modules\n\n// Under \"miscellaneous\", a new tab named \"Hello World Plugin\" should be created, which then loads our frontend module.\n\n$GLOBALS['FE_MOD']['miscellaneous']['Hello World Plugin'] = DylanHelloWorldModule::class;\n\nTemplate file for the Frontend module\n\nThe template file is used as a container for the module. There, you integrate the data you define in the module, thus building an HTML structure.\n\n./src/Resources/contao/templates/modules/mod_helloWorld.html5\n\n<?php $this->extend('block_searchable'); ?>\n\n<?php $this->block('content'); ?>\n\n<!-- Here, we use the value of the message variable -->\n\n<div class=\"dylan-hello-world-container\">\n\n<?= $this->message; ?>\n\n</div>\n\n<?php $this->endblock(); ?>\n\nInclude CSS and JS in the Contao module\n\nYou can include your own CSS and JS files in the Contao module, as defined in the module above. You just need to follow this file structure (the name of the file doesn’t matter):\n\n./src/Resources/public/scripts.js\n\n./src/Resources/public/styles.css\n\n… and voilà, you can now create a new module under Themes > Frontend Modules in the backend and simply select the Hello World Plugin as the module type!\n\nPhew, that was quite a bit of work… but that’s not quite enough yet! While our frontend module would suffice to display something nice in the frontend, equipped with PHP functions… what if we want to additionally load data from the database and manage it through the Contao backend?\n\nIn the next section, you’ll learn more about that.\n\nContao Backend Module: structure and database integration\n\nIn this section, we will create a backend module that loads data from a table called tl_messages and can also be edited. The entire module should be visible in the Contao backend under a menu item. Additionally, we will extend the frontend module to read the data from the backend as well.\n\nDatabase table creation using DCA\n\nWith the DCA PHP file, you can inform Contao that you want to create a new database table. This allows you to configure the structure of the table and define how the data should be displayed.\n\n./src/Resources/contao/dca/tl_messages.php\n\n<?php\n\nuse Contao\\DC_Table;\n\n// The name of the table; the PHP file should be named accordingly.\n\n$GLOBALS['TL_DCA']['tl_messages'] = [\n\n// Here you specify what should be displayed in the Contao backend:\n\n'palettes' => [\n\n'default' => '{messages_legend},message;'\n\n],\n\n// The SQL fields are defined here:\n\n'fields' => [\n\n// This field is mandatory.\n\n'id' => [\n\n'sql' => \"int(10) unsigned NOT NULL auto_increment\",\n\n],\n\n// This field is mandatory.\n\n'tstamp' => [\n\n'sql' => \"int(10) unsigned NOT NULL default '0'\",\n\n'label' => 'TS',\n\n],\n\n'message' => [\n\n'inputType' => 'text',\n\n'eval' => ['tl_class' => 'w50', 'maxlength' => 255],\n\n'sql' => \"varchar(255) NOT NULL default ''\"\n\n]\n\n],\n\n// Here the keys and other attributes are defined.\n\n'config' => [\n\n'dataContainer' => DC_Table::class,\n\n'sql' => [\n\n'keys' => [\n\n'id' => 'primary'\n\n]\n\n]\n\n],\n\n// Here it is also defined how the whole thing is displayed in the Contao backend.\n\n'list' => [\n\n'sorting' => [\n\n'mode' => 1,\n\n],\n\n'operations' => [\n\n'edit',\n\n'delete',\n\n],\n\n'label' => [\n\n'fields' => ['id','message'],\n\n'showColumns' => true,\n\n]\n\n],\n\n];\n\nTranslations of the fields and definitions\n\nWith the translation XLF file, you can define the labels and descriptions of the fields for different languages.\n\n./src/Resources/contao/languages/en/tl_messages.xlf\n\n<?xml version=\"1.0\" ?><xliff version=\"1.1\">\n\n<!-- Format: contao/languages/LANGUAGE/tl_messages.php-->\n\n<file datatype=\"php\" original=\"contao/languages/en/tl_messages.php\" source-language=\"en\">\n\n<body>\n\n<!-- Legend label in the Contao backend-->\n\n<trans-unit id=\"tl_messages.messages_legend\">\n\n<source>Messages</source>\n\n</trans-unit>\n\n<!-- Label of the field \"Message\"-->\n\n<trans-unit id=\"tl_messages.message.0\">\n\n<source>Message</source>\n\n</trans-unit>\n\n<!-- Description of the field \"Message\"-->\n\n<trans-unit id=\"tl_messages.message.1\">\n\n<source>Your individual message.</source>\n\n</trans-unit>\n\n</body>\n\n</file>\n\n</xliff>\n\nBringing Backend Module to the Contao Backend\n\nThe config.php file needs to be adjusted similar to the frontend module.\n\n./src/Resources/contao/config/config.php\n\n<?php\n\nuse Time4digital\\DylansHelloWorldBundle\\Module\\DylanHelloWorldModule;\n\n// Frontend modules\n\n// Under \"miscellaneous\", a new tab named \"Hello World Plugin\" should be created, which then loads our frontend module.\n\n$GLOBALS['FE_MOD']['miscellaneous']['Hello World Plugin'] = DylanHelloWorldModule::class;\n\n// Backend modules\n\n// Under the menu category \"content\", a new menu entry named \"Messages\" should now appear, managing the table tl_messages.\n\n$GLOBALS['BE_MOD']['content']['Messages'] = [\n\n'tables' => ['tl_messages']\n\n];\n\nDisplay backend data in Frontend\n\nTo achieve this, the template and the frontend module need to be adjusted.\n\n./src/Module/DylanHelloWorldModule.php\n\n<?php\n\nnamespace Time4digital\\DylansHelloWorldBundle\\Module;\n\nuse Contao\\Module;\n\n// Setting the CSS and JS files here. Format: bundles/bundleName/fileName.fileExtension\n\n$GLOBALS['TL_CSS'][] = 'bundles/dylanshelloworld/styles.css';\n\n$GLOBALS['TL_JAVASCRIPT'][] = 'bundles/dylanshelloworld/scripts.js';\n\nclass DylanHelloWorldModule extends Module\n\n{\n\n// Here, the name of the template is defined.\n\n// The name must match the template located at ./src/Resources/contao/templates.\n\nprotected $strTemplate = 'mod_helloWorld';\n\nprotected function compile()\n\n{\n\n// Using $this->Template->nameVariable creates variables that can be used in the template.\n\n$this->Template->message = 'Hello World!';\n\n// The Module class provides us the ability to quickly load database entries via the Contao Database class.\n\n// Here, I am fetching the data through a SQL query. This query retrieves database entries from the database and stores them in an array.\n\ntry {\n\n$objEntries = $this->Database->execute(\"SELECT * FROM tl_messages\");\n\n$this->Template->entries = $objEntries->fetchAllAssoc();\n\n} catch (\\Exception $e) {\n\n// If this fails, simply assign an empty array to the template.\n\n$this->Template->entries = [];\n\n}\n\n}\n\n}\n\n./src/Resources/contao/templates/modules/mod_helloWorld.html5\n\n<?php $this->extend('block_searchable'); ?>\n\n<?php $this->block('content'); ?>\n\n<!-- Here we use the value of the message variable -->\n\n<div class=\"dylan-hello-world-container\">\n\n<?= $this->message; ?>\n\n</div>\n\n<!-- Here we loop through the entries array and retrieve the value of the message for each element -->\n\n<div class=\"dylans-hello-world-live-container\">\n\n<ul>\n\n<?php foreach ($this->entries as $entry): ?>\n\n<li><?= $entry[\"message\"]; ?></li>\n\n<?php endforeach; ?>\n\n</ul>\n\n</div>\n\n<?php $this->endblock(); ?>\n\nAfter endless efforts, we have achieved our goal!\n\nAfter reinstalling the plugin, there should now be a new menu item called ‘Messages’ where new messages can be created. Afterwards, our frontend module should display all these messages.\n\nWe hope that you have learned more about Contao plugin development through this blog article.\n\nIt is important to note that there are several ways to implement this plugin, and this article merely serves as an example. You are completely free to develop your Hello World plugin as you see fit, as long as the basics are correct and the Contao Manager recognizes and installs it as a plugin.\n\nYou can find more information here.\n\nAdditionally, you can download the plugin directly via this link and continue developing it."
    }
}