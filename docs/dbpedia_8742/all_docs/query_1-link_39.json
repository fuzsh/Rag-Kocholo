{
    "id": "dbpedia_8742_1",
    "rank": 39,
    "data": {
        "url": "https://docs.contao.org/dev/framework/translations/",
        "read_more_link": "",
        "language": "en",
        "title": "Translations :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How to create translations within the Contao framework.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Translations\n\nSince the development of Contao started without the Symfony framework (see also the history), it provides its own translation framework. While you are free to utilize Symfony’s translation component, you will still have to provide translations within Contao’s framework for certain aspects, mostly in the back end (e.g. translations for managing your own data records via the Data Container Array).\n\nTranslations for Contao are managed within the contao/languages/ folder of your application, or the Resources/contao/languages/ folder of your extension respectively. Each language for which you want to provide translations, or customize existing translations, will have its own subdirectory containing the translation files. The name of the subdirectory will be the language code of each language. The translation files themselves can be implemented either in XLIFF (.xlf) or as PHP arrays (.php).\n\nSupported Languages\n\nFor the front end, any standardized language can be used. The name of the subdirectory for each language has to be either the ISO 639 language code (e.g. de for German), or the ISO 15897 POSIX locale for regions (e.g. de_AT for German (Austria)). No further configuration is necessary, other than the translations being present.\n\nFor the back end, only the languages configured in the Contao Core Bundle can be selected for each back end user. However, you can adjust this configuration in your own application:\n\nThis example configuration will reduce the available back end languages to two languages and will also make German (Austria) available as a back end language, which it would not be by default. Keep in mind that the Contao Core only provides the translations for specific languages for the front and back end.\n\nThis example configuration will remove the available back end language German and add German (Austria) while keeping the rest of the locales untouched.\n\nStructure\n\nIn general, Contao’s translations are organized as follows:\n\nLanguage » Domain » Category » Key » Label / Description\n\nThe language is of course denoted by the directory of each individiual language. The domain is represented by individual files within the language. These files contain the actual translation definitions, where each translation ID always consists of a category and a key.\n\nIn the end, Contao’s translations will actually be stored in the $GLOBALS['TL_LANG'] array within PHP. So for example the translation for the Go back link in the front end will be defined within the default domain of the English (en) language and then resides in\n\nHere, the category is MSC (short for miscellaneous), the translation key is goBack and the actual translation label is Go back.\n\nIn various places Contao actually expects the translation to be an array with two values, e.g. for DCA fields or back end modules. The first value being the actual label while the second value is a description.\n\nDomains\n\nContao uses the following domains for translations:\n\nDomainDescriptioncountriesTranslations of country names.defaultVarious translations for the front and back end.exceptionTranslation of error message that might be shown in the front or back end.explainTranslated content for the help wizard within a Data Container.languagesTranslation of language names.modulesBack end module labels and descriptions.\n\nThere is also a domain for each Data Container. The domain’s name is the same as the Data Container’s name. For example, for tl_content the translation’s domain name is also tl_content.\n\nCategories\n\nContao uses the following categories in various domains:\n\nCategoryDomainDescriptionCNTcountriesCountry.ERRdefaultError messages.SECdefaultSecurity questions (captcha).CTEdefaultContent Element.PTYdefaultPage type (site structure).FOPdefaultFile operation permissions.CHMODdefaultTranslations for the access rights widget (ChmodTable).DATEdefaultDate format definitions.DAYSdefaultTranslations for weekdays.MONTHSdefaultTranslations for month names.MSCdefaultMiscellaneous.UNITSdefaultBinary units like KiB.CONFIRMdefaultTranslations for the invalid request token notice in the back end.DPdefaultDate picker.COLSdefaultLayout section names.SECTIONSdefaultLayout section positions.DCAdefaultVarious data container view translations.XPTexceptionError messages for the front and back end.XPLexplainHelp wizard content.LNGlanguagesTranslation of language names.MODmodulesBack end module labels and descriptions.FMDmodulesFront end module labels and descriptions.FFLtl_form_fieldTranslations for form generator form fields.CACHEtl_pageLabels for the different cache time page settings.CRAWLdefaultTranslations for the crawler interface in the back end.\n\nThere is also a category for each Data Container. The category’s name is the same as the Data Container’s name. For example, for tl_content the translation’s category is also tl_content.\n\nCustomizing and Extending Translations\n\nAs already mentioned, translations are managed either via PHP or XLIFF files. These can be extended or customized using your translation files (see Contao Configuration & Translations). Let us first look at the PHP implementation of changing or extending Contao’s translations. We will take the previous example and change the Go back link in the front end to let it say Back instead. Since the original translation is contained within the default domain of the English (en) language, we also need to override it there by creating the following file:\n\nWhen creating or adjusting translations with XLIFF files instead, we need to note one particular thing: category and key (and index of translations with a label/description pair) are combined into one translation ID. However, we still create one file for each domain as before:\n\nAdjusting the label and description of a DCA field for the back end with XLIFF files would look like this:\n\nWhen extending translations, only the choice of the translation domain is relevant. Categories and keys for new translations can be chosen at your own discretion. For example, if you create a translation that might be used across different places in the system, use the default domain. You can choose to use the MSC category, but you do not have to.\n\nAccessing Translations\n\nWithin the Contao context, all translations can be accessed via the $GLOBALS['TL_LANG'] array as seen above. This array is populated with the translations of the language of the current request context. Keep in mind however, that the Data Container translations (tl_*) are not loaded on every request, but only when needed in the back end. You can load translations by using the following legacy function:\n\nThe first parameter is the domain (“language file”) while the second parameter is the language you want to load.\n\nStarting with Contao 4.5 you can also use Symfony’s Translator service instead:\n\nTo access a specific Contao translation domain, simply prepend it with contao_. This also takes care of loading the respective language file automatically. You do not need to call System::loadLanguageFile when using the translator service.\n\nTranslations within Contao PHP Templates\n\nThe trans method of the translator is available within Contao’s PHP templates:\n\nNote: in this example the second and third argument was omitted and the default values [] and contao_default are used. The following example shows how to access a translation from domain other than default:\n\nTranslations within Twig Templates"
    }
}