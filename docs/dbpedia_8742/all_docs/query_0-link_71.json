{
    "id": "dbpedia_8742_0",
    "rank": 71,
    "data": {
        "url": "https://docs.contao.org/dev/getting-started/content-elements-modules/",
        "read_more_link": "",
        "language": "en",
        "title": "Content Elements & Modules :: Contao Developer Documentation",
        "top_image": "https://docs.contao.org/dev/images/favicon.png",
        "meta_img": "https://docs.contao.org/dev/images/favicon.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Providing your application with custom made content elements and modules.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/dev/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Content Elements & Modules\n\nContent Elements are the fundamental content blocks within Contao, while Front end Modules provide (reusable) functionality for your web application. Implementation and handling of these is fairly similar, thus examples for this getting-started article will only cover content elements.\n\nTo create a custom content element or front end module, three basic things need to be defined or created at the very least:\n\nclass\n\npalette\n\ntemplate\n\nUsing annotations for service tagging, the PHP class can provide the complete configuration - like the template name, content element name, the category under which the content element or front end module should be visible in the back end and other attributes.\n\nContent elements and front end modules are implemented as fragment controllers. The following class shows a custom content element, which passes the fields text and url to its template.\n\nThis content element will then show up in the back end under the Texts category in the type drop down. Its name will be derived from its class name, transformed to snake case: my_content_element. Thus we can create a simple palette for this content element like so:\n\nThe template name on the other hand is derived from the elementâ€™s name, with the prefix ce_ (mod_ for front end modules), i.e. ce_my_content_element in this case.\n\nFinally we add a label for our new content element, so it is nicely displayed in the back end:\n\nLabels for other languages follow the same pattern. The respective files will be located in contao/languages/XX/ with XX being the code for the language (e.g. de).\n\nFind out more about content elements and front end modules in the framework documentation."
    }
}