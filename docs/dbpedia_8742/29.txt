PHP Setup

In general, you should always use the latest PHP version supported by Contao. PHP itself is constantly being improved and this usually also leads to better performance.

SAPI

The Server API (SAPI) of PHP is often directly related to the web server used. 8 SAPIs are currently maintained in PHP itself, only 4 of which can be used to run Contao:

mod_php (apache2handler)

cgi

fpm (php-fpm)

litespeed

The SAPI is given with mod_php and litespeed, since it runs directly as a module of the respective server. Otherwise, your choice should be fpm (php-fpm) whenever possible because it is currently the only SAPI that supports fastcgi_finish_request() and thus allows Contao to do some cleanup work after the response is sent back to the client, which does not reduce the actual runtime of the PHP process but can improve the response time for the visitor.

OPcache

The greatest performance gain can be achieved by using the PHP OPcache.

Since PHP is an interpreted scripting language, any PHP script is usually interpreted at runtime. The following steps are performed for every file:

Lexing (lexical analysis: splits source code into logically related units (so-called tokens))

Parsing (semantic analysis: “understands” a set of tokens. This defines what is valid syntax)

Compilation (translates PHP into direct instructions, also called bytecode, which can then be executed by the PHP virtual machine)

Execution (the execution of the bytecode)

If a PHP file does not change, steps 1 - 3 are identical every single time. Especially the “compilation” step is very complex, because PHP applies several checks and optimizations during this step.

The OPcache is a bytecode cache. It stores (either in RAM or on the file system) the bytecode generated after step 3 and executes only the already compiled bytecode for each subsequent request.

The OPcache can be configured very finely to the individual needs. There is no general, perfect setup, but here are a few recommendations and explanations:

You can empty the OPcache easily via Contao Manager under the menu item “System maintenance”. If you use deployment tools, remember to clear the OPcache after each deployment. Since the CLI process and the web process do not share the OPcode, you cannot delete the OPcode by executing a command. There are several solutions like the cachetool or the smart-core/accelerator-cache-bundle.

Realpath Cache

The Realpath Cache is an often underestimated cache in PHP.

Whenever a file is accessed, a lot of things happen under the hood, because especially with Unix everything is a file, so the kernel must first check whether it is a real file, a directory or a symlink etc. These so-called stat() calls are relatively expensive.

PHP caches the result of these calls so that subsequent requests within the same process have the information available without having to access the file system again. For example, if we call is_file('/path/to/directory') and later on is_dir('/path/to/directory'), the second call would be free, because PHP already knows whether it is a file or a directory from the earlier call.

PHP is even smart enough to cache the information for the parent path parts. In our example, the information of /path as well as /path/to would also be stored in the cache.

File system accesses are very common in Contao. A clean configuration of the Realpath Cache can make a noticeable difference!