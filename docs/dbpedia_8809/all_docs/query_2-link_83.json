{
    "id": "dbpedia_8809_2",
    "rank": 83,
    "data": {
        "url": "https://github.com/TinkerFu/r-dailyprogrammer/blob/master/easy/NewEasy.txt",
        "read_more_link": "",
        "language": "en",
        "title": "r-dailyprogrammer/easy/NewEasy.txt at master · TinkerFu/r-dailyprogrammer",
        "top_image": "https://opengraph.githubassets.com/5800b6337299e80c652d2343e2c78bf1c470778bbe77ccfe095b89807fd172a6/TinkerFu/r-dailyprogrammer",
        "meta_img": "https://opengraph.githubassets.com/5800b6337299e80c652d2343e2c78bf1c470778bbe77ccfe095b89807fd172a6/TinkerFu/r-dailyprogrammer",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "All challenges from /r/dailyprogrammer. Contribute to TinkerFu/r-dailyprogrammer development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/TinkerFu/r-dailyprogrammer/blob/master/easy/NewEasy.txt",
        "text": "Title: [easy] challenge #1\n\nText: create a program that will ask the users name, age, and reddit username. have it tell them the information back, in the format:\n\nyour name is (blank), you are (blank) years old, and your username is (blank)\n\nfor extra credit, have the program log this information in a file to be accessed later.\n\nTitle: [easy] challenge #2\n\nText: Hello, coders! An important part of programming is being able to apply your programs, so your challenge for today is to create a calculator application that has use in your life. It might be an interest calculator, or it might be something that you can use in the classroom. For example, if you were in physics class, you might want to make a F = M * A calc.\n\nEXTRA CREDIT: make the calculator have multiple functions! Not only should it be able to calculate F = M * A, but also A = F/M, and M = F/A!\n\nTitle: [2/11/2012] Challenge #3 [easy]\n\nText: Welcome to cipher day!\n\nwrite a program that can encrypt texts with an alphabetical caesar cipher. This cipher can ignore numbers, symbols, and whitespace.\n\nfor extra credit, add a \"decrypt\" function to your program!\n\nTitle: [2/12/2012] Challenge #4 [easy]\n\nText: You're challenge for today is to create a random password generator!\n\nFor extra credit, allow the user to specify the amount of passwords to generate.\n\nFor even more extra credit, allow the user to specify the length of the strings he wants to generate!\n\nTitle: [2/12/2012] Challenge #5 [easy]\n\nText: Your challenge for today is to create a program which is password protected, and wont open unless the correct user and password is given.\n\nFor extra credit, have the user and password in a seperate .txt file.\n\nfor even more extra credit, break into your own program :)\n\nTitle: [2/14/2012] Challenge #6 [easy]\n\nText: You're challenge for today is to create a program that can calculate pi accurately to at least 30 decimal places.\n\nTry not to cheat :)\n\nTitle: [2/15/2012] Challenge #7 [easy]\n\nText: Write a program that can translate Morse code in the format of ...---...\n\nA space and a slash will be placed between words. ..- / --.-\n\nFor bonus, add the capability of going from a string to Morse code.\n\nSuper-bonus if your program can flash or beep the Morse.\n\nThis is your Morse to translate:\n\n.... . .-.. .-.. --- / -.. .- .. .-.. -.-- / .--. .-. --- --. .-. .- -- -- . .-. / --. --- --- -.. / .-.. ..- -.-. -.- / --- -. / - .... . / -.-. .... .- .-.. .-.. . -. --. . ... / - --- -.. .- -.--\n\nTitle: [2/16/2012] Challenge #8 [easy]\n\nText: write a program that will print the song \"99 bottles of beer on the wall\".\n\nfor extra credit, do not allow the program to print each loop on a new line.\n\nTitle: [2/17/2012] Challenge #9 [easy]\n\nText: write a program that will allow the user to input digits, and arrange them in numerical order.\n\nfor extra credit, have it also arrange strings in alphabetical order\n\nTitle: [2/18/2012] Challenge #10 [easy]\n\nText: The exercise today asks you to validate a telephone number, as if written on an input form. Telephone numbers can be written as ten digits, or with dashes, spaces, or dots between the three segments, or with the area code parenthesized; both the area code and any white space between segments are optional.\n\nThus, all of the following are valid telephone numbers: 1234567890, 123-456-7890, 123.456.7890, (123)456-7890, (123) 456-7890 (note the white space following the area code), and 456-7890.\n\nThe following are not valid telephone numbers: 123-45-6789, 123:4567890, and 123/456-7890.\n\nTitle: [2/19/2012] Challenge #11 [easy]\n\nText: The program should take three arguments. The first will be a day, the second will be month, and the third will be year. Then, your program should compute the day of the week that date will fall on.\n\nTitle: [2/20/2012] Challenge #12 [easy]\n\nText: Write a small program that can take a string:\n\n\"hi!\"\n\nand print all the possible permutations of the string:\n\n\"hi!\"\n\n\"ih!\"\n\n\"!hi\"\n\n\"h!i\"\n\n\"i!h\"\n\netc...\n\nTitle: [2/21/2012] Challenge #13 [easy]\n\nText: Find the number of the year for the given date. For example, january 1st would be 1, and december 31st is 365.\n\nTitle: [2/23/2012] Challenge #14 [easy]\n\nText: Input: list of elements and a block size k or some other variable of your choice\n\nOutput: return the list of elements with every block of k elements reversed, starting from the beginning of the list.\n\nFor instance, given the list 12, 24, 32, 44, 55, 66 and the block size 2, the result is 24, 12, 44, 32, 66, 55.\n\nTitle: [2/24/2012] Challenge #15 [easy]\n\nText: Write a program to left or right justify a text file\n\nTitle: [2/27/2012] Challenge #16 [easy]\n\nText: Hi folks! We are in the midst of discussing how this subreddit will go about but for now how about we just concentrate on challenges!\n\nWrite a function that takes two strings and removes from the first string any character that appears in the second string. For instance, if the first string is “Daily Programmer” and the second string is “aeiou ” the result is “DlyPrgrmmr”.\n\nnote: the second string has [space] so the space between \"Daily Programmer\" is removed\n\nTitle: [3/4/2012] Challenge #17 [easy]\n\nText: write an application which will print a triangle of stars of user-specified height, with each line having twice as many stars as the last.\n\nsample output:\n\n@\n\n@@\n\n@@@@\n\nhint: in many languages, the \"+\" sign concatenates strings.\n\nbonus features: print the triangle in reverse, print the triangle right justified\n\nTitle: [3/5/2012] Challenge #18 [easy]\n\nText: Often times in commercials, phone numbers contain letters so that they're easy to remember (e.g. 1-800-VERIZON). Write a program that will convert a phone number that contains letters into a phone number with only numbers and the appropriate dash. Click [here](http://en.wikipedia.org/wiki/Telephone_keypad) to learn more about the telephone keypad.\n\nExample Execution:\n\nInput: 1-800-COMCAST\n\nOutput: 1-800-266-2278\n\nTitle: [3/7/2012] Challenge #19 [easy]\n\nText: Challenge #19 will use [The Adventures of Sherlock Holmes](http://www.gutenberg.org/cache/epub/1661/pg1661.txt) from [Project Gutenberg](http://www.gutenberg.org).\n\nWrite a program that counts the number of alphanumeric characters there are in The Adventures of Sherlock Holmes. Exclude the Project Gutenberg header and footer, book title, story titles, and chapters. Post your code and the alphanumeric character count.\n\nTitle: [3/8/2012] Challenge #20 [easy]\n\nText: create a program that will find all prime numbers below 2000\n\nTitle: [3/9/2012] Challenge #21 [easy]\n\nText: Input: a number\n\nOutput : the next higher number that uses the same set of digits.\n\nTitle: [3/10/2012] Challenge #22 [easy]\n\nText: Write a program that will compare two lists, and append any elements in the second list that doesn't exist in the first.\n\ninput: [\"a\",\"b\",\"c\",1,4,], [\"a\", \"x\", 34, \"4\"]\n\noutput: [\"a\", \"b\", \"c\",1,4,\"x\",34, \"4\"]\n\nTitle: [3/13/2012] Challenge #23 [easy]\n\nText: Input: a list\n\nOutput: Return the two halves as different lists.\n\nIf the input list has an odd number, the middle item can go to any of the list.\n\nYour task is to write the function that splits a list in two halves.\n\nTitle: [3/15/2012] Challenge #25 [easy]\n\nText: In an election, the person with the majority of the votes is the winner. Sometimes due to similar number of votes, there are no winners.\n\nYour challenge is to write a program that determines the winner of a vote, or shows that there are no winners due to a lack of majority.\n\nTitle: [3/16/2012] Challenge #26 [easy]\n\nText: you have a string \"ddaaiillyypprrooggrraammeerr\". We want to remove all the consecutive duplicates and put them in a separate string, which yields two separate instances of the string \"dailyprogramer\".\n\nuse this list for testing:\n\ninput: \"balloons\"\n\nexpected output: \"balons\" \"lo\"\n\ninput: \"ddaaiillyypprrooggrraammeerr\"\n\nexpected output: \"dailyprogramer\" \"dailyprogramer\"\n\ninput: \"aabbccddeded\"\n\nexpected output: \"abcdeded\" \"abcd\"\n\ninput: \"flabby aapples\"\n\nexpected output: \"flaby aples\" \"bap\"\n\nTitle: [3/17/2012] Challenge #27 [easy]\n\nText: Write a program that accepts a year as input and outputs the century the year belongs in (e.g. 18th century's year ranges are 1701 to 1800) and whether or not the year is a leap year. Pseudocode for leap year can be found [here](http://en.wikipedia.org/wiki/Leap_year#Algorithm).\n\nSample run:\n\nEnter Year: 1996\n\nCentury: 20\n\nLeap Year: Yes\n\nEnter Year: 1900\n\nCentury: 19\n\nLeap Year: No\n\nTitle: [3/20/2012] Challenge #28 [easy]\n\nText: The array duplicates problem is when one integer is in an array for more than once.\n\nIf you are given an array with integers between 1 and 1,000,000 or in some other interval and one integer is in the array twice. How can you determine which one?\n\nYour task is to write code to solve the challenge.\n\nNote: try to find the most efficient way to solve this challenge.\n\nTitle: [3/22/2012] Challenge #29 [easy]\n\nText: A [Palindrome](http://en.wikipedia.com/wiki/Palindrome) is a sequence that is the same in reverse as it is forward.\n\nI.e. hannah, 12321.\n\nYour task is to write a function to determine whether a given string is palindromic or not.\n\nBonus: Support multiple lines in your function to validate Demetri Martin's [224 word palindrome poem](http://www.pastemagazine.com/articles/2009/02/demetri-martins-palindrome-poem.html).\n\nTitle: [3/26/2012] Challenge #30 [easy]\n\nText: Write a program that takes a list of integers and a target number and determines if any two integers in the list sum to the target number. If so, return the two numbers. If not, return an indication that no such integers exist.\n\nTitle: [3/27/2012] Challenge #31 [easy]\n\nText: Write a function that takes two base-26 numbers in which digits are represented by letters with A=0, B=1, … Z=25 and returns their product using the same notation. As an example, CSGHJ × CBA = FNEUZJA.\n\nYour task is to write the base-26 multiplication function.\n\nTry to be very efficient in your code!\n\nTitle: [3/28/2012] Challenge #32 [easy]\n\nText: lets simulate a roulette wheel!\n\na program that takes as input your bet, and gives as output how much you won, with the appropriate probability\n\nwrite a program that will take a players bet and output the resulting spin and payout.\n\ntry using an american roulette wheel (which has the 00 slot) to add a slight twist. and try to incorporate as many complex bets as you can to. a comprehensive list can be found [here](http://en.wikipedia.org/wiki/Roulette#Bet_odds_table)\n\nTitle: [3/30/2012] Challenge #33 [easy]\n\nText: This would be a good study tool too. I made one myself and I thought it would also be a good challenge.\n\nWrite a program that prints a string from a list at random, expects input, checks for a right or wrong answer, and keeps doing it until the user types \"exit\". If given the right answer for the string printed, it will print another and continue on. If the answer is wrong, the correct answer is printed and the program continues.\n\nBonus: Instead of defining the values in the program, the questions/answers is in a file, formatted for easy parsing.\n\nExample file:\n\n12 * 12?,144\n\nWhat is reddit?,website with cats\n\nTranslate: hola,hello\n\nTitle: [3/31/2012] Challenge #34 [easy]\n\nText: A very basic challenge:\n\nIn this challenge, the\n\ninput is are : 3 numbers as arguments\n\noutput: the sum of the squares of the two larger numbers.\n\nYour task is to write the indicated challenge.\n\nTitle: [4/3/2012] Challenge #35 [easy]\n\nText: Write a program that will take a number and print a right triangle attempting to use all numbers from 1 to that number.\n\nSample Run:\n\nEnter number: 10\n\nOutput:\n\n7 8 9 10\n\n4 5 6\n\n2 3\n\n1\n\nEnter number: 6\n\nOutput:\n\n4 5 6\n\n2 3\n\n1\n\nEnter number: 3\n\nOutput:\n\n2 3\n\n1\n\nEnter number: 12\n\nOutput:\n\n7 8 9 10\n\n4 5 6\n\n2 3\n\n1\n\nTitle: [4/5/2012] Challenge #36 [easy]\n\nText: 1000 Lockers Problem.\n\nIn an imaginary high school there exist 1000 lockers labelled 1, 2, ..., 1000. All of them are closed. 1000 students are to \"toggle\" a locker's state. * The first student toggles all of them * The second one toggles every other one (i.e, 2, 4, 6, ...) * The third one toggles the multiples of 3 (3, 6, 9, ...) and so on until all students have finished.\n\nTo toggle means to close the locker if it is open, and to open it if it's closed.\n\nHow many and which lockers are open in the end?\n\nTitle: [4/8/2012] Challenge #37 [easy]\n\nText: write a program that takes\n\ninput : a file as an argument\n\noutput: counts the total number of lines.\n\nfor bonus, also count the number of words in the file.\n\nTitle: [4/10/2012] Challenge #38 [easy]\n\nText: Implement [Dijkstra's algorithm](http://en.wikipedia.org/wiki/Dijkstra's_algorithm) in any way you can :)\n\nTitle: [4/12/2012] Challenge #39 [easy]\n\nText:\n\nYou are to write a function that displays the numbers from 1 to an input parameter n, one per line, except that if the current number is divisible by 3 the function should write “Fizz” instead of the number, if the current number is divisible by 5 the function should write “Buzz” instead of the number, and if the current number is divisible by both 3 and 5 the function should write “FizzBuzz” instead of the number.\n\nFor instance, if n is 20, the program should write 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, and Buzz on twenty successive lines.\n\nTitle: [4/16/2012] Challenge #40 [easy]\n\nText: Print the numbers from 1 to 1000 without using any loop or conditional statements.\n\nDon’t just write the printf() or cout statement 1000 times.\n\nBe creative and try to find the most efficient way!\n\nTitle: [4/19/2012] Challenge #41 [easy]\n\nText: Write a program that will accept a sentence as input and then output that sentence surrounded by some type of an ASCII decoratoin banner.\n\nSample run:\n\nEnter a sentence: So long and thanks for all the fish\n\nOutput\n\n*****************************************\n\n* *\n\n* So long and thanks for all the fish *\n\n* *\n\n*****************************************\n\nBonus: If the sentence is too long, move words to the next line.\n\nTitle: [4/23/2012] Challenge #42 [easy]\n\nText: Write a program that prints out the lyrics for \"Ninety-nine bottles of beer\", \"Old McDonald had a farm\" or \"12 days of Christmas\".\n\nIf you choose \"Ninety-nine bottles of beer\", you need to spell out the number, not just write the digits down. It's \"Ninety-nine bottles of beer on the wall\", not \"99 bottles of beer\"!\n\nFor Old McDonald, you need to include at least 6 animals: a cow, a chicken, a turkey, a kangaroo, a T-Rex and an animal of your choosing (Old McDonald has a weird farm). The cow goes \"moo\", the chicken goes \"cluck\", the turkey goes \"gobble\", the kangaroo goes \"g'day mate\" and the T-Rex goes \"GAAAAARGH\". You can have more animals if you like.\n\nMake your code shorter than the song it prints out!\n\nTitle: [4/24/2012] Challenge #43 [easy]\n\nText: Today is a common interview question.\n\nGiven a binary tree t and two elements of the tree, m and n, with m < n, find the lowest element of the tree (farthest from the root) that is an ancestor of both m and n.\n\nTitle: [4/25/2012] Challenge #44 [easy]\n\nText: Write a program that divides up some input text into sentences and then determines which sentence in the input has the most words. Print out the sentence with the most words and the number of words that are in it. Optionally, also print out all words in that sentence that are longer than 4 characters.\n\nSentences can end in periods, exclamation points and question marks, but not colons or semi-colons.\n\nIf you need something to input, try Shylock's famous speech from Shakespeare's *The Merchant of Venice*:\n\n>If it will feed nothing else, it will\n\nfeed my revenge. He hath disgrac'd me and hind'red me half a\n\nmillion; laugh'd at my losses, mock'd at my gains, scorned my\n\nnation, thwarted my bargains, cooled my friends, heated mine\n\nenemies. And what's his reason? I am a Jew. Hath not a Jew eyes?\n\nHath not a Jew hands, organs, dimensions, senses, affections,\n\npassions, fed with the same food, hurt with the same weapons,\n\nsubject to the same diseases, healed by the same means, warmed\n\nand cooled by the same winter and summer, as a Christian is? If\n\nyou prick us, do we not bleed? If you tickle us, do we not laugh?\n\nIf you poison us, do we not die? And if you wrong us, shall we\n\nnot revenge? If we are like you in the rest, we will resemble you\n\nin that. If a Jew wrong a Christian, what is his humility?\n\nRevenge. If a Christian wrong a Jew, what should his sufferance\n\nbe by Christian example? Why, revenge. The villainy you teach me\n\nI will execute; and it shall go hard but I will better the\n\ninstruction.\n\nTitle: [4/27/2012] Challenge #45 [easy]\n\nText: Your challenge today is to write a program that can draw a checkered grid (like a chessboard) to any dimension. For instance, a 3 by 8 board might look like this:\n\n*********************************\n\n* *###* *###* *###* *###*\n\n* *###* *###* *###* *###*\n\n* *###* *###* *###* *###*\n\n*********************************\n\n*###* *###* *###* *###* *\n\n*###* *###* *###* *###* *\n\n*###* *###* *###* *###* *\n\n*********************************\n\n* *###* *###* *###* *###*\n\n* *###* *###* *###* *###*\n\n* *###* *###* *###* *###*\n\n*********************************\n\nYours doesn't have to look like mine, you can make it look any way you want (now that I think of it, mine looks kinda bad, actually). Also try to make it scalable, so that if you want to make a 2 by 5 board, but with bigger squares, it would print out:\n\n*******************************\n\n* *#####* *#####* *\n\n* *#####* *#####* *\n\n* *#####* *#####* *\n\n* *#####* *#####* *\n\n* *#####* *#####* *\n\n*******************************\n\n*#####* *#####* *#####*\n\n*#####* *#####* *#####*\n\n*#####* *#####* *#####*\n\n*#####* *#####* *#####*\n\n*#####* *#####* *#####*\n\n*******************************\n\nTitle: [4/30/2012] Challenge #46 [easy]\n\nText: The population count of a bitstring is the number of set bits (1-bits) in the string. For instance, the population count of the number 23, which is represented in binary as 10111 is 4.\n\nYour task is to write a function that determines the population count of a number representing a bitstring\n\nTitle: [5/2/2012] Challenge #47 [easy]\n\nText: Your task today is to implement one of the oldest ciphers known, the so-called [Caesar cipher](http://en.wikipedia.org/wiki/Caesar_cipher) (or *Caesar shift*, as it is sometimes called). It works like this: for every letter you want to encrypt, you shift it some number of places down the alphabet to get the letter in the cipher.\n\nSo, for instance, in a Caesar cipher with a shift of 3, \"A\" becomes \"D\", \"B\" becomes \"E\", \"C\" becomes \"F\", and so on. At the end of the alphabet it wraps around, so \"W\" becomes \"Z\", \"X\" becomes \"A\", \"Y\" becomes \"B\" and \"Z\" becomes \"C\". If you encrypt \"Hello\" with a shift of 3, you get \"Khoor\".\n\nOne interesting thing about this cipher is that you can use the same algorithm to decode a cipher as you can to encode it: if you wish to decrypt some text that has been Caesar-shifted 6 places, you simply shift it another 20 places to get back the original text. For example, if you encrypt \"Daily programmer\" with a shift of 6 you get \"Jgore vxumxgsskx\", and if you encrypt \"Jgore vxumxgsskx\" with a shift of 20 you get \"Daily programmer\".\n\nImplement the cipher and encrypt a bit of text of your choice!\n\nBonus: Using your program, become a code-cracker and decrypt this cipher (posted in honor of Mayday):\n\nSpzalu - zayhunl dvtlu sfpun pu wvukz kpzaypibapun zdvykz pz uv ihzpz mvy h\n\nzfzalt vm nvclyutlua. Zbwyltl leljbapcl wvdly klypclz myvt h thukhal myvt aol\n\nthzzlz, uva myvt zvtl mhyjpjhs hxbhapj jlyltvuf. Fvb jhu'a lewlja av dplsk\n\nzbwyltl leljbapcl wvdly qbza 'jhbzl zvtl dhalyf ahya aoyld h zdvyk ha fvb! P\n\ntlhu, pm P dlua hyvbuk zhfpu' P dhz hu ltwlylyvy qbza iljhbzl zvtl tvpzalulk\n\nipua ohk sviilk h zjptpahy ha tl aolf'k wba tl hdhf!... Ho, huk uvd dl zll aol\n\ncpvslujl puolylua pu aol zfzalt! Jvtl zll aol cpvslujl puolylua pu aol zfzalt!\n\nOlsw! Olsw! P't ilpun ylwylzzlk!\n\nTitle: [5/4/2012] Challenge #48 [easy]\n\nText: Take an array of integers and partition it so that all the even integers in the array precede all the odd integers in the array. Your solution must take linear time in the size of the array and operate in-place with only a constant amount of extra space.\n\nYour task is to write the indicated function.\n\nTitle: [5/7/2012] Challenge #49 [easy]\n\nText: The [Monty Hall Problem](http://en.wikipedia.org/wiki/Monty_Hall_problem) is a probability brain teaser that has a rather unintuitive solution.\n\nThe gist of it, taken from Wikipedia:\n\n>Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1 [but the door is not opened], and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, \"Do you want to pick door No. 2?\" Is it to your advantage to switch your choice?\n\n(clarification: the host will always reveal a goat)\n\nYour task is to write a function that will compare the strategies of *switching* and *not switching* over many random position iterations. Your program should output the proportion of successful choices by each strategy. Assume that if both unpicked doors contain goats the host will open one of those doors at random with equal probability.\n\nIf you want to, you can for simplicity's sake assume that the player picks the first door every time. The only aspect of this scenario that needs to vary is what is behind each door.\n\nTitle: [5/9/2012] Challenge #50 [easy]\n\nText: Hello everyone! As of today, we have finished our 50th challenge and it has been a pleasure giving out these challenges to you all. You have all been amazing with the solutions and seeing you all i hope i become a good programmer like you all one day :D\n\nIf i did any mistakes in challenges please forgive me and as you may have noticed we post once in two days or so to give you time to complete these. Really sorry if you wanted everyday posts .. but due to our busy lives, maybe sometime in future or maybe when i leave this subreddit, you may have that in the new management :) Thank You one and all ... As for now I have given today's two challenges are from [Google Code Jam Qualification Round Africa 2010](http://code.google.com/codejam/contest/dashboard?c=351101#s=p0)\n\n**Store Credit:**\n\nYou receive a credit C at a local store and would like to buy two items. You first walk through the store and create a list L of all available items. From this list you would like to buy two items that add up to the entire value of the credit. The solution you provide will consist of the two integers indicating the positions of the items in your list (smaller number first).\n\nFor instance, with C=100 and L={5,75,25} the solution is 2,3; with C=200 and L={150,24,79,50,88,345,3} the solution is 1,4; and with C=8 and L={2,1,9,4,4,56,90,3} the solution is 4,5.\n\nPROBLEM A IN THE LINK. PLEASE USE IT TO CLARIFY YOUR DOUBTS\n\nTitle: [5/11/2012] Challenge #51 [easy]\n\nText: Write a program that given an array A and a number N, generates all combinations of items in A of length N.\n\nThat is, if you are given the array [1,2,3,4,5] and 3, you're supposed to generate\n\n* [1,2,3]\n\n* [1,2,4]\n\n* [1,2,5]\n\n* [1,3,4]\n\n* [1,3,5]\n\n* [1,4,5]\n\n* [2,3,4]\n\n* [2,3,5]\n\n* [2,4,5]\n\n* [3,4,5]\n\nNote that order doesn't matter when counting combinations, both [1,2,3] and [3,2,1] are considered the same. Order also doesn't matter in the output of the combinations, as long as you generate all of them, you don't have to worry about what order they pop out. You can also assume that every element of the array is distinct.\n\nTitle: [5/14/2012] Challenge #52 [easy]\n\nText: Imagine each letter and its position within the alphabet. Now assign each letter its corresponding value ie a=1, b=2,... z=26. When given a list of words, order the words by the sum of the values of the letters in their names.\n\nExample: Shoe and Hat\n\nHat: 8+1+20 = 29\n\nShoe: 19+8+15+5 = 47\n\nSo the order would be Hat, Shoe.\n\nFor extra points, divide by the sum by the number of letters in that word and then rank them.\n\nTitle: [5/16/2012] Challenge #53 [easy]\n\nText: Write a function that given two sorted lists, returns a list whith the two lists merged together into one sorted list.\n\nSo, for instance, for inputs [1,5,7,8] and [2,3,4,7,9] it should return [1,2,3,4,5,7,7,8,9].\n\nTry and make your code as efficient as possible.\n\nTitle: [5/19/2012] Challenge #54 [easy]\n\nText: A transposition cipher we'll call the \"matrix cipher\" can be defined as follows: write each character in the text that you want to encrypt in a matrix of some specified width, where the width is the key of the cipher. So, for instance, if you wanted to encrypt \"The cake is a lie!\" with the key 3, you would write it like so (the spaces are replaced with underscores for clarity):\n\nT h e\n\n_ c a\n\nk e _\n\ni s _\n\na _ l\n\ni e !\n\nThen to get the ciphertext, you simply read off the columns one by one. So in this case, the ciphertext would be \"T\\_kiaihces\\_eea\\_\\_l!\", or \"T kiaihces eea&nbsp;&nbsp;l!\" if you put the spaces back in.\n\nIf the text doesn't fit the matrix perfectly, you add in random letters to fill in the last row. So, if we wanted to encode \"The cake is a lie!\" with key 7, we'd construct this matrix:\n\nT h e _ c a k\n\ne _ i s _ a _\n\nl i e ! v m z\n\nHere \"v\", \"m\" and \"z\" have been added in to fill the last row, and the ciphertext is \"Telh ieie s!c vaamk z\".\n\nWrite an implementation of the matrix cipher that can both encode and decode text given the correct key.\n\n***\n\nBONUS: One of the major tricks code-crackers have used throughout history is the fact that the first parts of many messages often follow a regular pattern. They start with \"Hello\" or \"Greetings\", \"Transmission from\" or something like that (Allied codebreakers during World War II took advantage of the fact that Nazi messages often began with \"Heil Hitler\").\n\nUse this trick to construct a way to automatically crack messages encrypted with the matrix cipher. That is, given a certain ciphertext to crack and the first few characters of the cleartext, figure out what the entire message is without human input. Your code should just return the correct answer and optionally the key, but nothing else.\n\nTry your code-cracker on this text, using the clue that the message starts with \"It seems\" (or \"It_seems\", if you use the underscore):\n\nI_rso_wotTe,taef_h__hl__socaeihtemonraaheamd_svemsp_l_ems_ayiN___Anofeadt.yueo_o\n\nh_..__leaA_.iaastnY.snw__do__d_nyeuhl_foor_eiaotushlvrr.'oapee.avnv_d__he,ey_gOf\n\n___oiunrbpaunieeer_r_l_geos_ctoingoloyfq_rcam__ilainpotlimadufhjv_llt_emiw_aevsd\n\nnrsdriengieysr_p_tc_,tlfteuc_uitwrrawavzo_irhlez_ftrelszloyyry_bir__e_huv_no_ead\n\neauuyvsbs_mtoe_l.rb_urat_eeh_y_pOsreg_fjnp,rocucee___otn_cpgbmujltaayprgiayr_uep\n\nfb_btt,velyahe_s,eogeraq__ue__ncysr.hcdzoo__ar_duftTcioi'tahkmnarwxeeeegeae_r__j\n\nAs you can see, there's plenty of punctuation in this text, but there are no new-lines, it is just one chunk of text. And again, all spaces have been replaced with underscores for clarity, but you should remove those to make the cleartext readable. If you do solve it, please put four spaces before the cleartext if you post it here, to hide it for people who want to solve it themselves.\n\nTitle: [5/21/2012] Challenge #55 [easy]\n\nText: Write a program to solve the sliding window minimum problem using any of the methods possible. [This](http://home.tiac.net/~cri/2001/slidingmin.html) could be a helpful link.\n\nTitle: [5/23/2012] Challenge #56 [easy]\n\nText: The ABACABA sequence is defined as follows: start with the first letter of the alphabet (\"a\"). This is the first iteration. The second iteration, you take the second letter (\"b\") and surround it with all of the first iteration (just \"a\" in this case). Do this for each iteration, i.e. take two copies of the previous iteration and sandwich them around the next letter of the alphabet.\n\nHere are the first 5 items in the sequence:\n\na\n\naba\n\nabacaba\n\nabacabadabacaba\n\nabacabadabacabaeabacabadabacaba\n\nAnd it goes on and on like that, until you get to the 26th iteration (i.e. the one that adds the \"z\"). If you use one byte for each character, the final iteration takes up just under 64 megabytes of space.\n\nWrite a computer program that prints the 26th iteration of this sequence to a file.\n\n***\n\nBONUS: try and limit the amount of memory your program needs to finish, while still getting a reasonably quick runtime. Find a good speed/memory tradeoff that keeps both memory usage low (around a megabyte, at most) and the runtime short (around a few seconds).\n\nTitle: [5/25/2012] Challenge #57 [easy]\n\nText: ~~Your task is to implement [Ackermann Function](http://en.wikipedia.org/wiki/Ackermann_function) in the most efficient way possible.~~\n\n~~Please refer the wiki page link given for its explanation.~~\n\n____________________________________________________\n\nSince many did not like the previous challenge because it was quite unsatisfactory here is a new challenge ...\n\nInput: A sequence of integers either +ve or -ve\n\nOutput : a part of the sequence in the list with the maximum sum.\n\nTitle: [5/28/2012] Challenge #58 [easy]\n\nText: As computer programmers are well aware, it can be very useful to write numbers using numerical bases other than the familiar base 10 notation we use in everyday life. In computer programming, [base 2](http://en.wikipedia.org/wiki/Binary_number) and [base 16](http://en.wikipedia.org/wiki/Hexadecimal) are especially handy. In base 2, the number 1234 becomes 10011010010 and in base 16 it becomes 4D2.\n\nBecause there are only 10 regular digits, when numbers are written in base 16, the first few letters of the alphabet are added to represent the remaining required digits, so 'A' stands in for 10, 'B' for 11, 'C' for 12, 'D' for 13, 'E' for 14 and 'F' for 15.\n\nOf course, this trick of adding letters to stand in for numbers allows us to represent higher bases than 16; if you can use all letters of the alphabet, you can represent bases up to base 36 (because there are ten regular digits and 26 \"letter-digits\"). So for instance, 12345678 becomes 1L2FHE in base 23 and 4IDHAA in base 19.\n\nWrite a program that will take a number and convert it to any base between 2 and 36. Have the program print out 19959694 in base 35 and 376609378180550 in base 29.\n\nNOTE: Many languages have this built in as a library function. For instance, in Java, the function Integer.toString(i, radix) does exactly this. However, the entire point of this challenge is to write the program yourself, so you **are not** allowed to use any library functions like this.\n\n***\n\nBONUS: A number is said to be \"palindromic in base N\" if, when written in base N the number is the same backwards and forwards. So, for instance, the number 16708 is palindromic in base 27, because in base 27 the number is written as MOM, obviously a palindrome. The number 12321 is a palindrome in in base 10, because 12321 written backwards is 12321. Some numbers are palindromic in several bases, the number 15167 for instance is palindromic in bases 9, 27, 28, 35 and 36.\n\nIn what bases is the number 10858 palindromic?\n\nTitle: [6/2/2012] Challenge #59 [easy]\n\nText: Write a program that given two strings, finds out if the second string is contained in the first, and if it is, where it is.\n\nI.e. given the strings \"Double, double, toil and trouble\" and \"il an\" will return 18, because the second substring is embedded in the first, starting on position 18.\n\nNOTE: Pretty much every language have this functionality built in for their strings, sometimes called find() (as in Python) or indexOf() (as in Java). But the point of this problem is to write the program yourself, so you **are not** allowed to use functions like this!\n\nTitle: [6/4/2012] Challenge #60 [easy]\n\nText: A polite number n is an integer that is the sum of two or more consecutive nonnegative integers in at least one way.\n\n[Here](http://en.wikipedia.org/wiki/Polite_number) is an article helping in understanding Polite numbers\n\nYour challenge is to write a function to determine the ways if a number is polite or not.\n\nTitle: [6/6/2012] Challenge #61 [easy]\n\nText: The number 19 is can be represented [in binary](http://en.wikipedia.org/wiki/Binary_numeral_system) as 10011. Lets define the operation of \"rotating a number\" as taking the last binary digit of that number and moving it so it becomes the first binary digit, and moving the other digits one step forward. I.e. if you rotate 10011, you get 11001 (i.e. 25), because the 1 that was in the last position has now moved to the first position. If you rotate it again, you get 11100 (i.e. 28).\n\nIf you rotate it again, something curious happens: you get 01110, which is the same as 1110 (i.e. 14) since leading zeroes don't count in a binary representation. That is to say, when you rotate it this time, the zero disappears. If you rotate it once more, you get 0111, which is the same as 111 (i.e. 7). Again, the zero has disappeared.\n\nAfter that, the number remains the same regardless of how much you rotate it, since the binary number representation of 7 only has 1's in it.\n\nThis gives us a sequence of numbers. Starting with 19 and then rotating it step by step until we get a number with only 1's in the binary representation, we get\n\n19 -> 25 -> 28 -> 14 -> 7\n\nLets call this a \"binary rotation sequence\" for 19. Here are the binary rotation sequences for the numbers 69, 205 and 357, with the numbers written first in decimal and then in binary to show what is going on:\n\n69 -> 98 -> 49 -> 56 -> 28 -> 14 -> 7\n\n1000101 -> 1100010 -> 110001 -> 111000 -> 11100 -> 1110 -> 111\n\n205 -> 230 -> 115 -> 121 -> 124 -> 62 -> 31\n\n11001101 -> 11100110 -> 1110011 -> 1111001 -> 1111100 -> 111110 -> 11111\n\n357 -> 434 -> 217 -> 236 -> 118 -> 59 -> 61 -> 62 -> 31\n\n101100101 -> 110110010 -> 11011001 -> 11101100 -> 1110110 -> 111011 -> 111101 -> 111110 -> 11111\n\nWrite a program that given a number will print out the binary rotation sequence for that number (you only need to print out the sequence in decimal).\n\nWhat is the binary rotation sequence for 54321?\n\nTitle: [6/8/2012] Challenge #62 [easy]\n\nText: Give the [Ullman's Puzzle](http://regator.com/p/246306389/ullmans_puzzle/)\n\nWrite a function that makes that determination\n\nTitle: [6/11/2012] Challenge #63 [easy]\n\nText: Write a procedure called reverse(N, A), where N is an integer and A is an array which reverses the N first items in the array and leaves the rest intact.\n\nFor instance, if N = 3 and A = [1,2,3,4,5], then reverse(N,A) will modify A so that it becomes [3,2,1,4,5], because the three first items, [1,2,3], have been reversed. Here are a few other examples:\n\nreverse(1, [1, 2, 3, 4, 5]) -> A = [1, 2, 3, 4, 5]\n\nreverse(2, [1, 2, 3, 4, 5]) -> A = [2, 1, 3, 4, 5]\n\nreverse(5, [1, 2, 3, 4, 5]) -> A = [5, 4, 3, 2, 1]\n\nreverse(3, [51, 41, 12, 62, 74]) -> A = [12, 41, 51, 62, 74]\n\nSo if N is equal to 0 or 1, A remains unchanged, and if N is equal to the size of A, all of A gets flipped.\n\nTry to write reverse() so that it works *in-place*; that is, it uses only a constant amount of memory in addition to the list A itself. This isn't necessary, but it is recommended.\n\nTitle: [6/13/2012] Challenge #64 [easy]\n\nText: The divisors of a number are those numbers that divide it evenly; for example, the divisors of 60 are 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, and 60. The sum of the divisors of 60 is 168, and the number of divisors of 60 is 12.\n\nThe totatives of a number are those numbers less than the given number and coprime to it; two numbers are coprime if they have no common factors other than 1. The number of totatives of a given number is called its totient. For example, the totatives of 30 are 1, 7, 11, 13, 17, 19, 23, and 29, and the totient of 30 is 8.\n\nYour task is to write a small library of five functions that compute the divisors of a number, the sum and number of its divisors, the totatives of a number, and its totient.\n\nTitle: [6/15/2012] Challenge #65 [easy]\n\nText: Write a program that given a floating point number, gives the number of American dollar coins and bills needed to represent that number (rounded to the nearest 1/100, i.e. the nearest penny). For instance, if the float is 12.33, the result would be 1 ten-dollar bill, 2 one-dollar bills, 1 quarter, 1 nickel and 3 pennies.\n\nFor the purposes of this problem, these are the different denominations of the currency and their values:\n\n* Penny: 1 cent\n\n* Nickel: 5 cent\n\n* Dime: 10 cent\n\n* Quarter: 25 cent\n\n* One-dollar bill\n\n* Five-dollar bill\n\n* Ten-dollar bill\n\n* Fifty-dollar bill\n\n* Hundred-dollar bill\n\nSorry Thomas Jefferson, JFK and Sacagawea, but no two-dollar bills, half-dollars or dollar coins!\n\nYour program can return the result in whatever format it wants, but I recommend just returning a list giving the number each coin or bill needed to make up the change. So, for instance, 12.33 could return [0,0,1,0,2,1,0,1,3] (here the denominations are ordered from most valuable, the hundred-dollar bill, to least valuable, the penny)\n\nTitle: [6/18/2012] Challenge #66 [easy]\n\nText: Write a function that takes two arguments, x and y, which are two strings containing Roman Numerals without prefix subtraction (so for instance, 14 is represented as XIIII, not XIV). The function must return true if and only if the number represented by x is less than the number represented by y. Do it without actually converting the Roman numerals into regular numbers.\n\nChallenge: handle prefix subtraction as well.\n\nTitle: [6/20/2012] Challenge #67 [easy]\n\nText: As we all know, when computers do calculations or store numbers, they don't use decimal notation like we do, they use binary notation. So for instance, when a computer stores the number 13, it doesn't store \"1\" and \"3\", it stores \"1101\", which is 13 in binary.\n\nBut more than that, when we instruct it to store an integer, we usually tell it to store it in a certain datatype with a certain length. For (relatively small) integers, that length is usually as 32 bits, or four bytes (also called \"one word\" on 32-bit processors). So 13 isn't really stored as \"1101\", it's stored as \"00000000000000000000000000001101\".\n\nIf we were to reverse that bit pattern, we would get \"10110000000000000000000000000000\", which written in decimal becomes \"2952790016\".\n\nWrite a program that can do this \"32-bit reverse\" operation, so when given the number 13, it will return 2952790016.\n\nNote: just to be clear, for all numbers in this problem, we are using *unsigned* 32 bit integers.\n\nTitle: [6/22/2012] Challenge #68 [easy]\n\nText: [Emirp](http://mathworld.wolfram.com/Emirp.html) is an interesting concept. The explanation about it is provided in the link i just gave.\n\nYour task is to implement a function which prints out the emirps below a number(input) given by the user.\n\nTitle: [6/26/2012] Challenge #69 [easy]\n\nText: Write a program that takes a title and a list as input and outputs the list in a nice column. Try to make it so the title is centered. For example:\n\ntitle: 'Necessities'\n\ninput: ['fairy', 'cakes', 'happy', 'fish', 'disgustipated', 'melon-balls']\n\noutput:\n\n+---------------+\n\n| Necessities |\n\n+---------------+\n\n| fairy |\n\n| cakes |\n\n| happy |\n\n| fish |\n\n| disgustipated |\n\n| melon-balls |\n\n+---------------+\n\nBonus: amend the program so that it can output a two-dimensional table instead of a list. For example, a list of websites:\n\ntitles: ['Name', 'Address', 'Description']\n\ninput: [['Reddit', 'www.reddit.com', 'the frontpage of the internet'],\n\n['Wikipedia', 'en.wikipedia.net', 'The Free Encyclopedia'],\n\n['xkcd', 'xkcd.com', 'Sudo make me a sandwich.']]\n\noutput:\n\n+-----------+------------------+-------------------------------+\n\n| Name | Address | Description |\n\n+-----------+------------------+-------------------------------+\n\n| Reddit | www.reddit.com | the frontpage of the internet |\n\n+-----------+------------------+-------------------------------+\n\n| Wikipedia | en.wikipedia.net | The Free Encyclopedia |\n\n+-----------+------------------+-------------------------------+\n\n| xkcd | xkcd.com | Sudo make me a sandwich |\n\n+-----------+------------------+-------------------------------+\n\nTitle: [6/29/2012] Challenge #70 [easy]\n\nText: Write a program that takes a filename and a parameter n and prints the n most common words in the file, and the count of their occurrences, in descending order.\n\nTitle: [7/2/2012] Challenge #71 [easy]\n\nText: If a right angled triangle has three sides A, B and C (where C is the hypothenuse), the pythagorean theorem tells us that A^2 + B^2 = C^2\n\nWhen A, B and C are all integers, we say that they are a *pythagorean triple*. For instance, (3, 4, 5) is a pythagorean triple because 3^2 + 4^2 = 5^2 .\n\nWhen A + B + C is equal to 240, there are four possible pythagorean triples: (15, 112, 113), (40, 96, 104), (48, 90, 102) and (60, 80, 100).\n\nWrite a program that finds all pythagorean triples where A + B + C = 504.\n\nTitle: [7/4/2012] Challenge #72 [easy]\n\nText: The one-dimensional simple cellular automata [Rule 110] (http://en.wikipedia.org/wiki/Rule_110)\n\nis the only such cellular automata currently known to be turing-complete, and many people say it is the simplest known turing-complete\n\nsystem.\n\nImplement a program capable of outputting an ascii-art representation of applying Rule 110 to some initial state. How many iterations and what your initial state is is up to you!\n\nYou may chose to implement rule 124 instead if you like (which is the same thing, albeit backwards).\n\nBonus points if your program can take an arbitrary rule integer from 0-255 as input and run that rule instead!\n\nTitle: [7/6/2012] Challenge #73 [easy]\n\nText: During the 70s and 80s, some handheld calculators used a very different notation for arithmetic called [Reverse Polish notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation) (RPN). Instead of putting operators (`+`, `*`, `-`, etc.) between their operands (as in `3 + 4`), they were placed behind them: to calculate `3 + 4`, you first inputted the operands (`3 4`) and then added them together by pressing `+`.\n\nInternally, this was implemented using a stack: whenever you enter a number, it's pushed onto the stack, and whenever you enter an operator, the **top two elements** are popped off for the calculation. Here's an example of a RPN calculator calculating `3 4 * 6 2 - +`:\n\n[3] --> 3\n\n[4] --> 3 4\n\n[*] --> 12 ( 3 * 4 = 12)\n\n[6] --> 12 6\n\n[2] --> 12 6 2\n\n[-] --> 12 4 ( 6 - 2 = 4)\n\n[+] --> 16 (12 + 4 = 16)\n\nYour task is to implement a program that reads a string in Reverse Polish notation and prints the result of the calculation. Your program should support positive and negative integers and the operators `+`, `-`, `*`. (For extra credit, you can implement extra functions, such as decimal numbers, division, exponentiation, etc.)\n\nTitle: [7/9/2012] Challenge #74 [easy]\n\nText: The Fibonacci numbers, which we are all familiar with, start like this:\n\n0,1,1,2,3,5,8,13,21,34,...\n\nWhere each new number in the sequence is the sum of the previous two.\n\nIt turns out that by summing different Fibonacci numbers with each other, you can create every single positive integer. In fact, a much stronger statement holds:\n\nEvery single positive integer can be represented in one *and only one* way as a sum of *non-consecutive* Fibonacci numbers. This is called the number's [\"Zeckendorf representation\"](http://en.wikipedia.org/wiki/Zeckendorf%27s_theorem).\n\nFor instance, the Zeckendorf representation of the number 100 is 89 + 8 + 3, and the Zeckendorf representation of 1234 is 987 + 233 + 13 + 1. Note that all these numbers are Fibonacci numbers, and that they are non-consecutive (i.e. no two numbers in a Zeckendorf representation can be next to each other in the Fibonacci sequence).\n\nThere are other ways of summing Fibonacci numbers to get these numbers. For instance, 100 is also equal to 89 + 5 + 3 + 2 + 1, but 1, 2, 3, 5 are all consecutive Fibonacci numbers. If no consecutive Fibonacci numbers are allowed, the representation is unique.\n\nFinding the Zeckendorf representation is actually not very hard. Lets use the number 100 as an example of how it's done:\n\nFirst, you find the largest fibonacci number less than or equal to 100. In this case that is 89. This number will always be of the representation, so we remember that number and proceed recursively, and figure out the representation of 100 - 89 = 11.\n\nThe largest Fibonacci number less than or equal to 11 is 8. We remember that number and proceed recursively with 11 - 8 = 3.\n\n3 is a Fibonacci number itself, so now we're done. The answer is 89 + 8 + 3.\n\nWrite a program that finds the Zeckendorf representation of different numbers.\n\nWhat is the Zeckendorf representation of 3^15 ?\n\nTitle: [7/12/2012] Challenge #75 [easy] (Function Transformation)\n\nText: First off, I'd like to apologize for posting this 12 hours late, I'm a little new to my mod responsibilities. However, with your forgiveness, we can go onward!\n\nEveryone on this subreddit is probably somewhat familiar with the C programming language.\n\nToday, all of our challenges are C themed! Don't worry, that doesn't mean that you have to solve the challenge in C, you can use whatever language you want.\n\nYou are going to write a home-work helper tool for high-school students who are learning C for the first time. These students are in the advanced placement math course,\n\nbut do not know anything about programming or formal languages of any kind. However, they do know about functions and variables!\n\nThey have been given an 'input guide' that tells them to write simple pure mathematical functions like they are used to from their homework with a simple subset grammar, like this:\n\nf(x)=x*x\n\nbig(x,y)=sqrt(x+y)*10\n\nThey are allowed to use\n\nsqrt,abs,sin,cos,tan,exp,log, and the mathematical arithmetic operators +*/-, they can name their functions and variables any lower-case alphanumeric name and functions can have between 0 and 15 arguments.\n\nIn the this challenge, your job is to write a program that can take in their \"simple format\" mathematical function and output the correct C syntax for that function. All arguments should\n\nbe single precision, and all functions will only return one float.\n\nAs an example, the input\n\nL0(x,y)=abs(x)+abs(y)\n\nshould output\n\nfloat L0(float x,float y)\n\n{\n\nreturn fabsf(x)+fabsf(y);\n\n}\n\nBonus points if you support exponentiation with \"\\^\", as in \"f(x)=x\\^2\"\n\nTitle: [7/13/2012] Challenge #76 [easy] (Title case)\n\nText: Write a function that transforms a string into [title case](http://en.wikipedia.org/wiki/Letter_case#Headings_and_publication_titles). This mostly means: capitalizing only every first letter of every word in the string. However, there are some non-obvious exceptions to title case which can't easily be hard-coded. Your function must accept, as a second argument, a set or list of words that should **not** be capitalized. Furthermore, the **first word** of every title should always have a capital leter. For example:\n\nexceptions = ['jumps', 'the', 'over']\n\ntitlecase('the quick brown fox jumps over the lazy dog', exceptions)\n\nThis should return:\n\nThe Quick Brown Fox jumps over the Lazy Dog\n\nAn example from the Wikipedia page:\n\nexceptions = ['are', 'is', 'in', 'your', 'my']\n\ntitlecase('THE vitamins ARE IN my fresh CALIFORNIA raisins', exceptions)\n\nReturns:\n\nThe Vitamins are in my Fresh California Raisins\n\nTitle: [7/16/2012] Challenge #77 [easy] (Enumerating Morse code sequences)\n\nText: Morse code, as we are all aware, consists of dots and dashes. Lets define a \"Morse code sequence\" as simply a series of dots and dashes (and nothing else). So \".--.-.--\" would be a morse code sequence, for instance.\n\nDashes obviously take longer to transmit, that's what makes them dashes. Lets say that a dot takes 1 unit of time to transmit, and a dash takes 2 units of time. Then we can say that the \"size\" of a certain morse code sequence is the sum of the time it takes to transmit the dots and dashes. So, for instance \"..-.\" would have a size of 5 (since there's three dots taking three units of time and one dash taking two units of time, for a total of 5). The sequence \"-.-\" would also have a size of 5.\n\nIn fact, if you list all the the possible Morse code sequences of size 5, you get:\n\n..... ...- ..-. .-.. -... .-- -.- --.\n\nA total of 8 different sequences.\n\nYour task is to write a function called Morse(X) which generates all morse code sequences of size X and returns them as an array of strings (so Morse(5) should return the 8 strings I just mentioned, in some order).\n\nUse your function to generate and print out all sequences of size 10.\n\n***\n\nBonus: Try and write your code so that it can generate Morse(35) (or even Morse(36) or higher, but that takes a significant amount of memory) in a \"reasonable\" amount of time. \"Reasonable\" obviously depend on what computer and programming language you are using, but a good rule of thumb should be that it should finish in less than a minute.\n\nTitle: [7/18/2012] Challenge #78 [easy] (Keyboard Locale Simulator)\n\nText: This one is inspired by an actual problem my friend had to deal with recently. Unfortunately, its a little bit\n\nkeyboard-locale specific, so if you don't happen to use a us-EN layout keyboard you might want to get a picture of one.\n\nThe en-us keyboard layout [pictured here](http://en.wikipedia.org/wiki/File:KB_United_States-NoAltGr.svg) is one common layout\n\nfor keys. There are character-generating keys such as '1' and 'q', as well as modifier keys like 'ctrl' and 'shift', and 'caps-lock'\n\nIf one were to press every one of the character-generating keys in order from top to bottom left-to-right,\n\nyou would get the following string:"
    }
}