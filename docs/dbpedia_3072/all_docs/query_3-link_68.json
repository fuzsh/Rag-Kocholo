{
    "id": "dbpedia_3072_3",
    "rank": 68,
    "data": {
        "url": "https://gist.github.com/MrDiamond64/b2081f2cb4ca6d11e848edaeb5ae1814",
        "read_more_link": "",
        "language": "en",
        "title": "Skribbl.io Protocol",
        "top_image": "https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png",
        "meta_img": "https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png",
        "images": [
            "https://avatars.githubusercontent.com/u/49098391?s=64&v=4",
            "https://avatars.githubusercontent.com/u/56998716?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49098391?s=80&v=4",
            "https://avatars.githubusercontent.com/u/56998716?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49098391?s=80&v=4",
            "https://avatars.githubusercontent.com/u/56998716?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49098391?s=80&v=4",
            "https://avatars.githubusercontent.com/u/56998716?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49098391?s=80&v=4",
            "https://avatars.githubusercontent.com/u/56998716?s=80&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Skribbl.io Protocol. GitHub Gist: instantly share code, notes, and snippets.",
        "meta_lang": "en",
        "meta_favicon": "https://gist.github.com/fluidicon.png",
        "meta_site_name": "Gist",
        "canonical_link": "https://gist.github.com/MrDiamond64/b2081f2cb4ca6d11e848edaeb5ae1814",
        "text": "⚠️ This gist has been abandonded as of August 9th, 2024, and is no longer receiving updates. ⚠️\n\nThe login procedure for skribbl.io is divided between several network requests.\n\nPOST https://skribbl.io:3000/play\n\nRequest Headers:\n\nUser-Agent: <user agent> Accept: */* Accept-Language: en-US;q=0.7,en;q=0.3 Accept-Encoding: gzip, deflate, br Content-type: application/x-www-form-urlencoded Content-Length: 6 Origin: https://skribbl.io Connection: keep-alive Referer: https://skribbl.io/ Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-site\n\nRequest Body:\n\nlang=<lang code>\n\nOR\n\nid=<private lobby id>`\n\nLanguage code is the language the server you are on should be. If you are joining a private lobby, you instead send id=<lobby id> which will make you join that lobby.\n\nResponse Body:\n\n<server uri for a game server>\n\nThis is the URI that all next requests should be sent on. An example of a server URI is https://server3.skribbl.io:5006.\n\nNote: All requests after this can be handled by socket.io-client.\n\nGET <server uri>/socket.io/?EIO=4&transport=polling&t=<timestamp>\n\nRequest Headers:\n\nSame headers as the first request\n\nResponse Body:\n\n0{\"sid\":\"<session id>\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":20000,\"maxPayload\":1000000}\n\nThis request returns your \"session id\", along with the ping interval, ping timeout, and the max websocket payload size\n\nPOST <server uri>/socket.io/?EIO=4&transport=polling&t=<unique id>&\n\nRequest Headers:\n\nSame as first request\n\nRequest Body:\n\n40\n\nResponse Body:\n\nok\n\nThe exact purpose for this request is unclear.\n\nGET <server uri>/socket.io/?EIO=4&transport=polling&t=<unique id>&sid=<session id from request 2>\n\nRequest Headers:\n\nSame as first request\n\nResponse Body:\n\n40{\"sid\":\"<secondary session id>\"}\n\nThis request returns a secondary \"session id\", that does not seem to be used anywhere.\n\nGET <server uri>/socket.io/?EIO=4&transport=websocket&sid=<session id>\n\nRequest Headers:\n\nHost: <server uri> User-Agent: <user agent> Accept: */* Accept-Language: en-US;q=0.7,en;q=0.3 Accept-Encoding: gzip, deflate, br Sec-WebSocket-Version: 13 Origin: https://skribbl.io Sec-WebSocket-Extensions: permessage-deflate Sec-WebSocket-Key: <websocket validation key> Connection: keep-alive, Upgrade Cookie: CountryCode=US; userFromEEA=false Sec-Fetch-Dest: websocket Sec-Fetch-Mode: websocket Sec-Fetch-Site: same-site Pragma: no-cache Cache-Control: no-cache Upgrade: websocket\n\nResponse Body:\n\n1\n\nThis is the network request responsible for starting the websocket session between the browser and the server.\n\nGET <server uri>/socket.io/?EIO=4&transport=polling&t=<unique id>&sid=<session id>\n\nRequest Headers:\n\nSame as first request\n\nResponse Body:\n\n42[\"data\", { \"id\": 10, \"data\": { \"settings\": [ 0, // Server language 0, // Max Online Players 0, // Max Draw Time 0, // Total Rounds 0, // Word Count 0, // Total Hints 0, // Word Mode 0 // Use Custom Words ], // Lobby settings \"id\": \"--------\", // Lobby Id \"type\": 0, // Lobby type. 0 is public and 1 is private \"me\": 0, // Your user ID. \"owner\": -1, // The ID of the lobby owner. On public lobbies, its simply -1 \"users\": [], // Every player in the lobby. The user object can be found in the Datatypes section \"round\": 1, // The current round \"state\": { \"id\": 4, // The current state of the game. A list of states and its meaning is in the GameState datatype. \"time\": 0, // The time until the next person starts drawing \"data\": { \"id\": 0, // The user id of the person currently drawing \"word\": [5] // Length of each word \"hints\": [ // The letter hints for each word [<index>, \"\"] ], \"drawCommands\": [ // An array filled with each coloured pixel [] ] } } } }]\n\nPOST <server uri>/socket.io/?EIO=4&transport=polling&t=<unique id>&sid=<session id>\n\nRequest Headers:\n\nSame as first request\n\nRequest Body:\n\n42[\"login\",{ \"join\": \"\", // The lobby code to join. If joining a public lobby, this is set to blank \"create\": 0, // If a private lobby should be created \"name\": \"\", // Your username \"lang\": \"0\", // Your language \"avatar\": [0,0,0,0] // Avatar }]\n\nResponse Body:\n\nok\n\nThis request is responsible for making you fully join the game session\n\nTimestamps\n\nIn the request URL, there is a t=. This is a hashed timestamp which is used for cache busting.\n\nBasic Info\n\nSkribbl.io's backend consists of Express.js and socket.io.\n\nCode Type Mode 0 Number | String Normal 1 Number | String Hidden 2 Number | String Combination\n\nCode Type Language 0 Number English 1 Number German 2 Number Bulgarian 3 Number Czech 4 Number Danish 5 Number Dutch 6 Number Finnish 7 Number French 8 Number Estonian 9 Number Greek 10 Number Hebrew 11 Number Hungarian 12 Number Italian 13 Number Japanese 14 Number Korean 15 Number Latvian 16 Number Macedonian 17 Number Norwegian 18 Number Portuguese 19 Number Polish 20 Number Romanian 21 Number Russian 22 Number Serbian 23 Number Slovakian 24 Number Spanish 25 Number Swedish 26 Number Tagalog 27 Number Turkish\n\n(object)\n\nField Type Description id Number The user's id name String The user's name avatar Avatar The user's avatar score Number The user's score guessed Boolean If the user guessed the word correctly flags UserFlags User Flags\n\n(array) A user's avatar is an array that has the following format:\n\nID Type Description 0 SkinColor Skin Color 1 Eyes Eyes 2 Mouth Mouth 3 Special Special\n\nCode Type Color 0 Number Red 1 Number Orange 2 Number Yellow 3 Number Green 4 Number Cyan 5 Number Purple 6 Number Pink 7 Number Light Pink 8 Number Turquoise 9 Number Peach 10 Number Gray 11 Number Dark Gray 12 Number Brown 13 Number Brown Red 14 Number White 15 Number Striped Red 16 Number Striped Yellow 17 Number Striped Green 18 Number Striped Cyan 19 Number Striped Blue 20 Number Striped Purple 21 Number Striped Gray 22 Number Striped Brown 23 Number Striped Peach 24 Number Striped Turquoise 25 Number Striped Pink\n\nCode Type Description\n\nCode Type Description\n\nSpecials are currently locked to developers. Developers can give some of these specials as a gift to people who contribute to skribbl.io.\n\nCode Type Special -1 Number None (Default) 0 Number White Beard 1 Number Pizza 2 Number Party Hat 3 Number Goat Horns 4 Number Halo 5 Number Bunny Ears 6 Number Bear Ears 7 Number Fox Ears 8 Number Dog Ears 9 Number Gray Dog Ears 10 Number Top Hat 11 Number Gray Hair 12 Number Broken Hair 13 Number Poop 14 Number Pink Bowtie 15 Number Witch Hat 16 Number Singular Hair 17 Number Green Blob 18 Number Cheese 19 Number Metal Rods 23 Number Cheese 2 24 Number Ice 25 Number Candle 26 Number Pumpkin 96 Number Santa Hat 97 Number Joker Hat 98 Number Candy Cane 99 Number Reindeer antlers\n\nFor packet ID 8.\n\nID Type Value 0 Number Dislike 1 Number Like\n\nFor packet ID 12.\n\nID Type Name Min Value Max Value 0 Language Language 0 27 1 Number | String Max Player Count 2 15 2 Number | String Max Draw Time 15 240 3 Number | String Max Rounds 2 10 4 Number | String Word Count 1 5 5 Number | String Max Hints 0 5 6 WordMode Word Mode 0 2 7 Number Use Custom Words 0 1\n\nFor packet ID 2.\n\nID Type Value 0 Number Disconnect 1 Number Player Kicked 2 Number Player Banned\n\nFor packet ID 6. ReportReason uses bitwise right shifting to store multiple report reasons. If you report the player for spam and botting, the report reason would be 6 ((1 << 1) | (1 << 2) = 6).\n\nValue Type Reason 1 << 0 Number Inappropriate Messages / Drawings 1 << 1 Number Spam 1 << 2 Number Botting / Cheating\n\n(array) Index is the index of the item in the array.\n\nIndex Type Description 0 Tools Tool used 1 Color Color used 2 Brush Size Brush Size 3? Number Start X 4? Number Start Y 5? Number End X 6? Number End Y\n\nTools\n\nID Type Tool 0 Number Pencil 1 Number Fiil\n\nA list of every color a player can draw with\n\nID Type Color 0 Number White 1 Number Black 2 Number Light Gray 3 Number Dark Gray 4 Number Red 5 Number Dark Red 6 Number Light Orange 7 Number Dark Orange 8 Number Yellow 9 Number Dark Yellow 10 Number Lime 11 Number Dark Green 12 Number Light Green 13 Number Green-Blue 14 Number Cyan 15 Number Dark Cyan 16 Number Blue 17 Number Dark Blue 18 Number Magenta 19 Number Dark Magenta 20 Number Pink 21 Number Dark Pink 22 Number Bright Peach 23 Number Peach 24 Number Light Brown 25 Number Brown\n\nID Type Size 4 Number Extra Small 10 Number Small 20 Number Medium 32 Number Large 40 Number Extra Large\n\n(array) Index is the index of the item in the array.\n\nIndex Type Description 0 Number Voter's user id 1 Number Voted player's user id 2 Number Current votes 3 Number Required total votes\n\n(array) Index is the index of the item in the array.\n\nIndex Type Description 0 Number Letter Position 1 Number Revealed Letter\n\nUserFlags uses bitwise right shifting to store multiple flags.\n\nValue Type Description 1 << 4 Number Admin\n\nIndex Type Description 0 Number Not Enough Players 100 Number Server restart soon\n\nID Type Description 1 Number Room not found 2 Number Room is full 3 Number Player on kick cooldown 4 Number Player is banned from room 5 Number Joining rooms too quickly 100 Number Already connected to this room 200 Number Too many IP connections 300 Number Kicked too many times\n\nThe type of lobby. For https://gist.github.com/MrDiamond64/b2081f2cb4ca6d11e848edaeb5ae1814#get-server-urisocketioeio4transportpollingtunique-idsidsession-id\n\nID Type Description 0 Number Public Lobby 1 Number Private lobby\n\nThe current state of the game. For https://gist.github.com/MrDiamond64/b2081f2cb4ca6d11e848edaeb5ae1814#get-server-urisocketioeio4transportpollingtunique-idsidsession-id\n\nID Type Description 0 Number \"Waiting For Players\" message 1 Number \"Game starting in a few seconds\" message 2 Number \"Round 1\" message 3 Number Drawer is picking a word 4 Number Drawer can currently draw 5 Number Scoreboard is showing for the last drawing 6 Number Results for the game are showing 7 Number Game has not started yet\n\nPackets are very limited, they are usually a single number with no other data. They are used for testing the websocket connection.\n\nNote: All of these are automatically handled by socket.io-client.\n\n2probe is the very first websocket message the client should send.\n\n3probe is sent by the server to acknowledge the 2probe message.\n\n5 (Upgrade)\n\n5 is sent by the client to acknowledge the 3probe message. This is the end of the handshake.\n\n2 (Ping)\n\n2 is sent by the server to the client every 25 seconds (or the pingInterval in the 2nd network request). It is a simple ping/pong request.\n\n3 (Pong)\n\n3 is sent by the client in response to the 2 message. This finishes the ping-pong handshake.\n\nData Packets\n\nData Packets are more advanced. They are responsible for handling every in-game action, such as drawing, sending a text message or liking/disliking a drawing.\n\nExample action packet: 42[\"data\",{\"id\":\\<packet id\\>,\"data\":\\<data\\>}]. The packet ID is the data id.\n\n[1] Player Add\n\nWhen a new player joins the lobby, the server sends this packet to all logged in players\n\nExample Packets:\n\n[\"data\",{\"id\":1,\"data\":{\"id\":1,\"name\":\"\",\"avatar\":[8,0,0,0],\"score\":0,\"guessed\":false,\"flags\":0}}]\n\nPacket Structure 1 (S->C)\n\nField Type Description data User User that joined\n\n[2] Player Remove\n\nWhen a player leaves the lobby, the server sends this packet to all logged in players\n\nExample Packets:\n\n[\"data\",{\"id\":2,\"data\":{\"id\":1,\"reason\":0}}]\n\nPacket Structure 1\n\nField Type Description data Object Vote Data data.id Number User id that left data.reason Leave Reason Leave Reason\n\n[3] Host Kick\n\nThis packet is sent by the host to force-kick a player\n\nExample Packet\n\n[\"data\",{\"id\":3,\"data\":1}]\n\nPacket Structure\n\nField Type Description data Number User ID to kick\n\n[4] Host Ban\n\nThis packet is sent by the host to ban a player. Bans are based on IPs.\n\nExample Packets:\n\n[\"data\",{\"id\":4,\"data\":5}]\n\nPacket Structure 1\n\nField Type Description data Number User ID to ban\n\n[5] Player Votekick\n\nThis packet is sent by the client to vote kick a player. The server sends this, and additional data to all online players.\n\nPacket Examples\n\n[\"data\",{\"id\":5,\"data\":9}] (C->S)\n\n[\"data\",{\"id\":5,\"data\":[4,9,1,2]}] (S->C)\n\nPacket Structure 1 (C->S)\n\nField Type Description data Number User ID that was votekicked\n\nPacket Structure 2 (S->C)\n\nField Type Description data Votekick Data Votekick Data\n\n[6] Player Report\n\nThis packet is sent by the client to report a player.\n\nExample Packets\n\n[\"data\",{\"id\":6,\"data\":{\"id\":4,\"reasons\":1}}]\n\nPacket Structure\n\nField Type Description id Number User ID to report reasons Reason Report Reason\n\n[7] Player Mute\n\nThis packet is sent by the client to mute the player. This is seemingly useless as the server still sends any messages sent by the muted player.\n\nExample Packets:\n\n[\"data\",{\"id\":7,\"data\":\\<user id\\>}]\n\nPacket Structure 1\n\nField Type Description data Number User ID to mute\n\n[8] Vote\n\nPacket ID 8 is sent by the client to vote on an image, and sent by the server to let the client know what people are voting\n\nExample Packets:\n\n[\"data\",{\"id\":8,\"data\":0}] (C->S)\n\n[\"data\",{\"id\":8,\"data\":{\"id\":\\<player id\\>,\"vote\":0}}] (S->C)\n\nPacket Structure 1 (C->S)\n\nField Type Description data Vote Like/dislike\n\nPacket Structure 2 (S->C)\n\nField Type Description data Object Vote Data data.id Number User id that voted data.vote Vote What the user voted\n\n[10] Lobby Data\n\nPacket ID 10 is sent by the server to the client when it joins a new lobby. The response is the exact same as https://gist.github.com/MrDiamond64/b2081f2cb4ca6d11e848edaeb5ae1814#get-server-urisocketioeio4transportpollingtunique-idsidsession-id\n\n[11] Update Game Data\n\nPacket ID 11 is sent by the server to the client to update game data.\n\nExample Packets:\n\n[\"data\",{\"id\":11,\"data\":{\"id\":2,\"time\":2,\"data\":0}}]\n\n[\"data\",{\"id\":11,\"data\":{\"id\":3,\"time\":15,\"data\":{\"id\":1,\"words\":[\"word1\",\"word2\",\"word3\"]}}}] (Possible word choices for drawer)\n\n[\"data\",{\"id\":11,\"data\":{\"id\":4,\"time\":80,\"data\":{\"id\":1,\"word\":\"word1\"}}}] (Server auto-selected word due to timeout)\n\n[12] Update Room Settings\n\nPacket ID 12 is sent by the client (if its a private lobby host) to update the game's setting. The server then sends this packet to all online players to let them known that a setting has changed\n\nExample Packets\n\n[\"data\",{\"id\":12,\"data\":{\"id\":\"5\",\"val\":\"5\"}}] (C->S)\n\n[\"data\",{\"id\":12,\"data\":{\"id\":5,\"val\":5}}] (S->C)\n\nPacket Structure 1 (C->S)\n\nField Type Description data Object Changed Settings data.id Setting ID Setting ID that changed data.val String New setting value\n\nPacket Structure 2 (S->C)\n\nField Type Description data Object Changed Settings data.id Setting ID Setting ID that changed data.value Number New setting value\n\n[13] Reveal Hint\n\nThe server sends this packet to the client to reveal a hint of the word.\n\nExample Packet:\n\n[\"data\",{\"id\":13,\"data\":[[0,\"l\"]]}]\n\nPacket Structure\n\nField Type Description data Hint[] Hint Data\n\n[14] Update Time\n\nThis packet is sent by the server to the client to change the current time. Its usually sent after someone guesses, in which the time is reduced.\n\nExample packet:\n\n[\"data\",{\"id\":14,\"data\":32}]\n\nField Type Description data Number New time\n\n[15] Player Guessed\n\nThis packet is sent by the server to the player when it guessed the word correctly, or if another player guessed.\n\nPacket Examples\n\n[\"data\",{\"id\":15,\"data\":{\"id\":0,\"word\":\"word\"}}]\n\n[\"data\",{\"id\":15,\"data\":{\"id\":1}}]\n\nPacket Structure 1\n\nThis is sent to the player if it got the word correct.\n\nField Type Description data Object Data data.id Number The player's user id data.word String The correct word\n\nPacket Structure 2\n\nThis is sent if a player who isnt the current client got the word correct.\n\nField Type Description data Object Data data.id Number The player's user id\n\n[16] Close word\n\nPacket ID 16 is sent by the server to tell all online players that a typed word is close.\n\nExample Packet:\n\n[\"data\",{\"id\":16,\"data\":\"housr\"}]\n\nPacket Structure\n\nField Type Description data String The word thats close\n\n[17] Set Owner\n\nPacket ID 17 is sent by the server to all online players when the old lobby host leaves.\n\nExample Packet:\n\n[\"data\",{\"id\":17,\"data\":0}]\n\nField Type Description data Number User ID of new the owner\n\n[18] Select Word\n\nPacket ID 18 is sent by the client to the server when it selects the word to draw.\n\nIf the server sends [\"cat\",\"dog\",\"bush\"] as the available words, the ID would be 0 for cat, 1 for dog, and 2 for bush.\n\nExample Packet:\n\n[\"data\",{\"id\":18,\"data\":2}]\n\nPacket Structure\n\nField Type Description data Number Index of the word sent in packet id 11\n\n[19] Draw\n\nPacket ID 19 is sent by the client to draw, which is then sent to all online players by the server.\n\nExample Packet:\n\n[\"data\",{\"id\":19,\"data\":[[0,4,12,161,561,161,561]]}]\n\nPacket Structure\n\nField Type Description data Draw Data[] Draw Data\n\n[20] Clear Canvas\n\nThis packet is sent to the server by the client to clear the canvas. The server then sends it to all online players.\n\nExample Packet:\n\n[\"data\",{\"id\":20}]\n\nThis packet has no data associated with it.\n\nField Type Description\n\n[21] Undo\n\nThis packet is sent to the server by the client to undo the last stroke. The server sends it to all online players.\n\nIf the undone action causes the canvas to be completely blank, packet id 20 is sent instead.\n\nExample Packet:\n\n[\"data\",{\"id\":21,\"data\":0}]\n\nField Type Description data Number The index of the last array sent in packet 19\n\n[22] Request Game Start\n\nThis packet is sent by the private lobby host to the server to start the game.\n\nExample Packets:\n\n[\"data\",{\"id\":22,\"data\":\"\"}]\n\nPacket Structure 1\n\nField Type Description data String Custom words set\n\n[23] End Game\n\nPacket ID 23 is sent by the client to the server when it wants to end the current game. This only works if the player is the host.\n\nExample Packet:\n\n[\"data\",{id:23}]\n\nThis packet has no data associated with it.\n\nField Type Description\n\nPacket Structure\n\n[30] Text\n\nPacket ID 30 is sent by the client to send a chat message or a guess. It is also sent by the server to send messages sent by other players.\n\nExample Packets:\n\n[\"data\",{\"id\":30,\"data\":\"\\<message content\\>\"}] (C->S)\n\n[\"data\",{\"id\":30,\"data\":{\"id\":0,\"msg\":\"test2\"}}] (S->C)\n\nPacket Structure 1 (C->S)\n\nField Type Description data String Message content\n\nPacket Structure 2 (S->C)\n\nField Type Description data Object Message data data.id Number User ID of message sender data.msg String Message Content\n\n[31] Game Start Error\n\nPacket ID 31 is sent by the server to the client when it cannot start the game.\n\nExample Packet:\n\n[\"data\",{\"id\":31,\"data\":{\"id\":0}}]\n\nPacket Structure\n\nField Type Description data Object Error Data data.id StartError Error Reason data.data? Number How long until server reboot\n\n[32] Spam Detected\n\nPacket ID 32 is sent by the server to the client when its spamming.\n\nExample Packet:\n\n[\"data\",{\"id\":32}]\n\nThis packet has no data associated with it.\n\nField Type Description"
    }
}