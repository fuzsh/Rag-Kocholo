{
    "id": "dbpedia_6155_3",
    "rank": 70,
    "data": {
        "url": "https://www.aeronetworks.ca/2017/02/openbsd-on-netbook.html",
        "read_more_link": "",
        "language": "en",
        "title": "OpenBSD on a Netbook",
        "top_image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCaN8u9fQdWoK_mVOlFwDW7fPuoTYa0IoNbCKOmt3CiwQ4Td4dnhTpUyI-4Dwj_jECP-I_QXv_4GpFbJGpCgx1LHR2x0dQ9hGwgdMw3k7xMXvQi18MHuB60dzbjb68ZIxW9c78cbtQnIk/w1200-h630-p-k-no-nu/puffy60.gif",
        "meta_img": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCaN8u9fQdWoK_mVOlFwDW7fPuoTYa0IoNbCKOmt3CiwQ4Td4dnhTpUyI-4Dwj_jECP-I_QXv_4GpFbJGpCgx1LHR2x0dQ9hGwgdMw3k7xMXvQi18MHuB60dzbjb68ZIxW9c78cbtQnIk/w1200-h630-p-k-no-nu/puffy60.gif",
        "images": [
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCaN8u9fQdWoK_mVOlFwDW7fPuoTYa0IoNbCKOmt3CiwQ4Td4dnhTpUyI-4Dwj_jECP-I_QXv_4GpFbJGpCgx1LHR2x0dQ9hGwgdMw3k7xMXvQi18MHuB60dzbjb68ZIxW9c78cbtQnIk/s320/puffy60.gif",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjw_l0KIII6dct3v1I3VzyQJxf_zkSjfdjUvNno4wNI9ysQIZ9mfdj2XJQvkd1vyqTOMTMHckHSFQLbTLk-VpgKPzy9kkmfm5RSHYqNUI1VF6q8ceSnNWQBc3mVs88IflP2OfX3dXBLBlg/s400/OpenBSD-XFCE.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsvmsHwYq8swGoC6WzSQS4M4HXXd2iBTznRbMDm1j3uuC3-KfJ9ni9OLjF-V2h3kpMBZ4BQe3xydfGaCR2gGIVwgfBfgf4i8sVR0pXfvAjsBCM4-j3XAmaaWxO3ewEBhKdgC4QLPoVgYo/s200/bsd5.jpg",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZJMQ5pHI-Mj2puLilUm1rjK-EGCRA-pD5xKsyRXJ6Y4lXjPnL3vBLwRyKmC9BKp3R875q1LzBHBo6e_U3BJk_TPvrgXyHZByiyAT2av-dGM3ida5Rm8tiEe1WhPTR2Q/s113/Herman2.JPG"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Visit profile"
        ],
        "publish_date": "2017-02-03T18:58:00+01:00",
        "summary": "",
        "meta_description": "Recently, I got fed-up with the bloated Linux distributions and wanted to try something that is secure, small and efficient and downloaded ...",
        "meta_lang": "en",
        "meta_favicon": "https://www.aeronetworks.ca/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.aeronetworks.ca/2017/02/openbsd-on-netbook.html",
        "text": "Recently, I got fed-up with the bloated Linux distributions and wanted to try something that is secure, small and efficient and downloaded OpenBSD 6.0 from Theo De Raadt's server in Calgary. Since Calgary is actually my old home town - why not?\n\nOpenBSD tries to be the most simple and secure UNIX system out of the box. It is very much server oriented, but it can do anything and many architectures are supported just for fun. For example, Arm RPi and Beaglebone, Intel 32 and 64 bit and several more. So OpenBSD is a good choice whether you want to build a server farm, a network router, or a robot.\n\nI have an old little Lenovo S10e netbook that I threatened to toss away numerous times, but it doesn't want to break. As I feel guilty about tossing something that works perfectly well in a bin, once in a while when I run short of resources, I end up using it again. Last year, it was pressed into service as a Linux Mirror server to install a bunch of embedded computers.\n\nSo I dusted the Netbook off and readied it for a new Olde Skool UNIX experience...\n\nWhere to get OpenBSD\n\nThe last time I used OpenBSD was about 2004 - for web and mail servers in Calgary. I certainly know Linux better, but my main machine is a Macbook Pro which runs a kind of BSD and the more things change, the more they stay the same.\n\nHere you go: https://ftp.openbsd.org/pub/OpenBSD/6.0/\n\nWhen I bought the netbook, I wanted something small that I could carry around easily and although the single core 32 bit Intel processor is slow as molasses with the original Windows 7 OS, it always ran Linux with the XFCE desktop quite well, but I wanted to see whether I can make it fly.\n\nFrom the above list of files, download the install60.fs file if you want to use a USB memory stick as the install medium.\n\nI made the mistake of not reading the INSTALL.i386 instructions and downloaded the ISO file, then wondered why it would not boot. So, do go and read the INSTALL file. Pretty much everything you need to know is in there!\n\nWrite the install60.fs file to a memory schtick using dd: http://www.aeronetworks.ca/2013/05/using-dd-on-mac-to-copy-iso-file.html\n\nInstall\n\nThe WiFi adaptor in this netbook never worked with Linux, so I didn't expect it to work with BSD. I therefore plugged in a trusty little Edimax USB dongle (Ralink chip set) and hoped it would work. OpenBSD recognized it and loaded the run driver, so the dongle showed up as run0 in ifconfig.\n\nThe OpenBSD installer is super simple and OpenBSD is even easier and quicker to install than Linux. It just takes a few minutes. So, plug the USB widget in and boot it, follow the very simple instructions and mostly just accept the defaults, till you get to the network configuration. Be sure to type the correct information in for the WiFi adaptor if you are using one: You need to supply the SSID and password as a minimum.\n\nOf course I fat fingered the password, so it could not connect. The WiFi setup information is in a file called /etc/hostname.run0 and editing it later presented an interesting challenge, since I am severely vi impeded. I had to read the vi man page to find out how to delete a character - really.\n\nFirst boot\n\nOpenBSD is a simple and clean system with no bells and whistles. None. Zilch.\n\nWhen you boot up, you get a nice, self explanatory login prompt:\n\nLogin: herman\n\npassword\n\n$\n\nIf you are freaked out by a $ prompt, then you either have to return your Geek Card, or read a UNIX book or three.\n\nAt that point, I had to go and fix the WiFi password first and then rebooted to see if it worked properly, but you can simply run startx to get a beautiful FVWM desktop, with a xterm and a clock on it - woohoo.\n\nWe have Country AND Western music!\n\nThe default install doesn't have much of anything for a laptop machine. The vi editor, ssh and a ftp client are about it. No web browser, not even links.\n\nInstall a Package or Three\n\nIn order to make the netbook useful, I need a web browser and an editor that is more to my liking.\n\nPackages are listed here: https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/i386/\n\n(or https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/amd64/ if you have a better machine!).\n\nYou can install the dillo web browser like this:\n\n# pkg_add https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/i386/dillo-3.0.5p0.tgz\n\nDillo is quite a horrible little browser, but it sure is fast and much less clunky than links. However, if you want something more full featured, install surf or luakit, which are both based on webkit and work with everything, including yootoob...\n\nTo preserve your sanity, add the path to the /root/.profile file:\n\n# echo \"export PKG_PATH=https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/i386/ >> /root/.profile\"\n\nand also export it so it will work immediately:\n\n# export \"PKG_PATH=https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/i386/\"\n\n(If you have a better 64 bit machine: echo export \"PKG_PATH=https://ftp.openbsd.org/pub/OpenBSD/6.0/packages/amd64/\">>/root/.profile)\n\nAfter that you can simply run:\n\n# pkg_add dillo\n\n# pkg_add links\n\n# pkg_add surf\n\n# pkg_add nano\n\n# pkg_add abiword\n\n# pkg_add gnumeric\n\n# pkg_add xournal\n\n# pkg_add pdfshuffler\n\n# pkg_add gimp\n\n# pkg_add minicom\n\n# pkg_add putty\n\n# pkg_add deadbeef\n\n...\n\nYou can make that all one line of course, but I prefer getting error messages for one thing at a time, to preserve my sanity.\n\nUtilities like ftp, ssh, telnet, netcat, tcpdump and more are installed by default, so with the above additions, I can do pretty much anything I would ever want to do on a Netbook.\n\nStop the Mail Daemon\n\nI don't need the mail daemon on my teenie little netbook. The mail daemon isn't actually doing much, but I prefer it doing nothing and save every processor cycle and byte of RAM that I can.\n\nServices are controlled via the /etc/rc.conf and /etc/rc.conf.local files, with a utility called rcctl:\n\n# rcctl stop smtpd\n\n# rcctl disable smtpd\n\nThe result is:\n\n# cat /etc/rc.conf.local\n\nsmtpd_flags=NO\n\nSimple.\n\nXFCE Desktop Environment\n\nThe FVWM desktop is nice and fast, but it is really only good for masochists. My favourite light weight desktop is XFCE and installing it is just as simple as any other package.\n\nThe package manager pkg_add is quite smart, so you can install XFCE for a better laptop experience by simply running:\n\n# pkg_add xfce\n\nYou can then press Ctrl-Alt-Del to quit X and restart it with:\n\n$ startx /usr/local/bin/startxfce4\n\nOr, you can put exec /usr/local/bin/startxfce4 in ~/.xinitrc and then just run startx as usual and with a nice wintry themed wall paper the little Netbook looks quite cool now:\n\nSee this for more details: https://www.openbsd.org/faq/faq11.html\n\nFor OpenBSD 6.4, install xenodm, boot up with edit the .xsession file instead:\n\n$ nano .xsession\n\nexec ck-launch-session startxfce4\n\nThen reboot and when you log in, you get XFCE instead of the default FVWM..\n\nMinor Niggles\n\nWith OpenBSD, there is no drama and most everything works. If I close the lid, it sleeps, if I open it, it resumes. Well, almost - the WiFi dongle didn't come back after a resume, so I needed to figure out how to resuscitate the run device driver and hook it into the resume process somewhere.\n\nThe OpenBSD FAQ (https://www.openbsd.org/faq/faq6.html#Wireless) eventually revealed the netstart command, which successfully restores the WiFi connection after a resume:\n\n# sh /etc/netstart\n\nI just needed to figure out where to hook netstart so it would be invoked automatically upon resume.\n\nAdvanced Power Management\n\nThe problem with the WiFi widget was that apmd was not running. The Advanced Power Management service controls suspend and resume, processor speed and a few more things.\n\n# rcctl get apmd\n\napmd_flags=NO\n\nConfigure and start apmd with:\n\n# rcctl enable apmd\n\n# rcctl start apmd\n\napmd(ok)\n\nThe result is:\n\n# cat /etc/rc.conf.local\n\napmd_flags=\n\nsmtpd_flags=NO\n\nAccording to the apmd man page the /etc/apm/resume program is run after resuming from standby, so that is the one where I need to put a call to /etc/netstart.\n\nSo I tried this:\n\n# mkdir /etc/apm\n\n# nano /etc/apm/resume\n\nand added the following:\n\n#! /bin/sh\n\n/etc/netstart\n\n# chmod 755 /etc/apm/resume\n\nLet's see if all is OK:\n\n# rcctl stop apmd\n\n# rcctl start apmd\n\napmd(ok)\n\nLet's see if it works with the zzz command:\n\n# zzz\n\nSuspending system...\n\nand a few seconds later I type:\n\nzzz\n\nIt resumes from its slumber.\n\nHowever, it didn't seem to run the resume program.\n\nLet's see what happened:\n\n# tail /var/log/messages\n\napmd: failed to exec /etc/apm/resume: Exec format error\n\nSo, how now brown cow?\n\nEventually, I did two things to get it to work as explained below. Don't ask me how I found these tricks, it is just years of experience with obstreperous embedded widgets coming to the rescue and a dogged determination to try various things till the hardware responds the way it should.\n\nMake the netstart script executable, so I don't have to invoke a shell explicitly to run it:\n\n# chmod +x /etc/netstart\n\nAdd a delay to the /etc/apm/resume script to give the USB widget time to load its firmware and let the magic fairy dust settle, before trying to configure it:\n\n#! /bin/sh\n\nsleep 1\n\n/etc/netstart\n\nNow I can make the netbook suspend and resume, the little green lights flash on the WiFi dongle and all is well, the whole universe shook, the BSD daemons sung and flowers fell down from the heavens...\n\nSquash and Square the Web\n\nBritish Prime Minister Harold Wilson said of the press:\n\nIf you can't squash them, square them\n\nand if you can't square them, squash them.\n\nIt is really only a couple hundred companies that are ruining the web for a couple billion people on the planet, so with even the littlest machine it is trivial to disable the culprits.\n\nYou can get a good /etc/hosts file to efficiently squash and square the rubbish on the wild wild web here:\n\nhttps://github.com/StevenBlack/hosts\n\nMy little netbook now zooms like a much faster model, with no Windows, SELinux, systemd, advertisements or spyware to slow it down and now that Uncle Sam decided to ban laptops on board aircraft, this little one becomes the ideal machine to chuck into my luggage since nobody will steal what looks like a clunky old netbook!\n\nConnect to Free WiFi Access Points\n\nMy WiFi setup is now automated for home use, but what if I travel and want to connect to free WiFi in McDonalds, or Vienna airport, or Cafe Nero, or.... ???\n\nI solved this with a little script called mcdonalds - duh...\n\n#! /bin/sh\n\nifconfig run0 nwid mcdonalds\n\ndhclient run0\n\nand ditto for the two or three other places I go to - good enough for me.\n\nPlay Internet Radio with deadbeef\n\nOn Linux, I use Streamtuner, a wonderful little application, but it doesn't have a BSD equivalent. The solution is to run dillo and browse to http://www.internet-radio.com (39,520 radio stations!) however, I didn't have a music player installed yet, so:\n\n# pkg_add deadbeef\n\nNow when I run dillo and click a category on internet-radio, select a station, look at the left and download a playlist .pls file - save as - /home/herman/radio/whatever.pls - thereafter, in the file browser simply double click the desired .pls file to play the radio station with deadbeef.\n\nThere is probably a way to get dillo to spawn deadbeef, but since I only ever listen to two or three radio stations, this is dead simple and now I actually can listen to Country and Western music - Och, my poor bleeding ears...\n\nI then found that the speaker volume keys on the chicklet keyboard actually work too - neat!\n\nOpenBSD on Virtualbox\n\nIf you are not quite ready to go bare metal, then you can install OpenBSD in Virtualbox, but since there is no Guest Additions for OBSD, you need to tweak things manually to get full screen operation.\n\nI actually prefer slightly smaller than full screen, so I can retain access to the host task manager bar more easily. The easiest way to get the size right, is to take a screen shot by grabbing a rectangle, save the file and open it with a photo editor to see the dimensions.\n\nThere are are some weird limitations and I could only get it to work with 16 bit video on my Lenovo and on my Macbook Pro I had to select 2560x1600x16 and Unscaled High Definition Video in the machine video properties to make it work full screen.\n\nDefine a custom screen for the OpenBSD VM like this, sized for my Lenovo Thinkpad:\n\n$ VBoxManage setextradata OpenBSD CustomVideoMode1 1600x868x16\n\nStart the VM and scp the below /etc/X11/xorg.conf file over to the VM. Modify the Depth, DefaultDepth and Modes at the bottom to suit:\n\nSection \"ServerLayout\" Identifier \"X.org Configured\" Screen 0 \"Screen0\" 0 0 InputDevice \"Mouse0\" \"CorePointer\" InputDevice \"Keyboard0\" \"CoreKeyboard\" EndSection Section \"Files\" ModulePath \"/usr/X11R6/lib/modules\" FontPath \"/usr/X11R6/lib/X11/fonts/ misc/\" FontPath \"/usr/X11R6/lib/X11/fonts/TTF/ \" FontPath \"/usr/X11R6/lib/X11/fonts/OTF\" FontPath \"/usr/X11R6/lib/X11/fonts/ Type1/\" FontPath \"/usr/X11R6/lib/X11/fonts/ 100dpi/\" FontPath \"/usr/X11R6/lib/X11/fonts/ 75dpi/\" EndSection Section \"Module\" Load \"dbe\" Load \"dri\" Load \"extmod\" Load \"glx\" Load \"freetype\" EndSection Section \"InputDevice\" Identifier \"Keyboard0\" Driver \"kbd\" EndSection Section \"InputDevice\" Identifier \"Mouse0\" Driver \"mouse\" Option \"Protocol\" \"wsmouse\" Option \"Device\" \"/dev/wsmouse\" Option \"ZAxisMapping\" \"4 5 6 7\" EndSection Section \"Monitor\" Identifier \"Monitor0\" HorizSync 31-80 VertRefresh 30-100 VendorName \"Monitor Vendor\" ModelName \"Monitor Model\" EndSection Section \"Device\" Identifier \"Card0\" Driver \"vesa\" VendorName \"InnoTek\" BoardName \"VirtualBox Graphics Adapter\" BusID \"PCI:0:2:0\" EndSection Section \"Screen\" DefaultDepth 16 Identifier \"Screen0\" Device \"Card0\" Monitor \"Monitor0\" SubSection \"Display\" Viewport 0 0 Depth 16 Modes \"1600x868\" EndSubSection EndSection\n\nWhen you launch startx, you should get a large window and may need Right-Control F to switch to full-screen mode.\n\nCare and Feeding of Your Puffer Fish\n\nOnce in a blue moon, to update the system I do:\n\n$ sudo su -\n\n# pkg_add -u\n\nFor information on installing packages and ports, read the FAQ here:\n\nhttps://www.openbsd.org/faq/faq15.html\n\nPretty much everything is in the FAQ, so RTFF really is a good idea.\n\nor refer to the Original Grumpy BSD Guy:\n\nhttps://bsdly.blogspot.ae/2013/04/youve-installed-it-now-what-packages.html\n\nFor questions on any flavour of BSD when you did RTFF and is still stuck, go to http://daemonforums.org.\n\nOpenBSD Foibles And Quirks (FAQ)\n\nSometimes things are a little weird and other times they are just annoyingly strange.\n\nMan will only be free,\n\nonce the last computer has been strangled\n\nwith the power cord of the last router.\n\n-- With apologies to Didero.\n\n--oOo--\n\nStrange Command Options\n\nThere are some BSD commands that one has to reread the man pages, since they are different from Linux.\n\nifconfig\n\nroute\n\npkg_add packagename\n\npkg_add -u\n\n--oOo--\n\nFast File System Softdep\n\nIt is important to edit /etc/fstab and configure soft update, otherwise an unclean power down can corrupt the disk irretrievably: https://www.openbsd.org/faq/faq14.html\n\nThe default is nosoftdep, so add softdep to each ffs line of fstab:\n\n/dev/sd0a / ffs rw,softdep 1 1\n\n--oOo--\n\nSystem Recovery\n\nIf the system needs recovery, try Single User Mode:\n\nAt the boot prompt: Spacebar\n\nboot> boot -s\n\n# fsck -p\n\n# mount -a\n\nNow you can try to undo your last boo-boo.\n\n--oOo--\n\nNetwork Settings\n\n/etc/hostname.em0\n\nRestart Network:\n\n# sh /etc/netstart\n\n--oOo--\n\nAdditional Useful Programs\n\npkg_add xfce nano firefox mplayer links lynx gimp abiword gnumeric xournal evince\n\nStart XFCE with:\n\n$ startx /usr/local/bin/startxfce4\n\nOr, you can put exec /usr/local/bin/startxfce4 in ~/.xinitrc and then just run startx\n\n--oOo--\n\nSecurelevel\n\nThe securelevel is +1 by default at runtime. This protects a bunch of crucial stuff against modification at runtime. It may interfere with R&D work.\n\n# sysctl kern.securelevel\n\nkern.securelevel=1\n\nIt can be reduced to -1 in the rc.securelevel file:\n\n# nano /etc/rc.securelevel\n\nadd one line:\n\nsysctl kern.securelevel=-1\n\nVerify:\n\n# cat /etc/rc.securelevel\n\nsysctl kern.securelevel=-1\n\nA reboot will make it permanent:\n\n# reboot\n\nLa voila, now it runs with no securelevel:\n\n# sysctl kern.securelevel\n\nkern.securelevel=-1\n\nThis allows file flags and a few other things to be changed. This is also needed to turn the clock back if it is ahead.\n\n--oOo--\n\nPacket Filter PF\n\nThere are a few default rules which may interfere with R&D work. They can be deleted with the pfctl -F all command.\n\nThe default rules:\n\n# pfctl -s all\n\nFILTER RULES:\n\nblock return all\n\npass all flags S/SA\n\nblock return in on ! lo0 proto tcp from any to any port 6000:6010\n\nblock return out log proto tcp all user = 55\n\nblock return out log proto udp all user = 55\n\nSTATES:\n\nall udp 192.168.1.14:32260 -> 5.32.10.107:123 MULTIPLE:MULTIPLE\n\nall tcp 192.168.1.14:22 <- 192.168.1.16:49495 ESTABLISHED:ESTABLISHED\n\nall udp 192.168.1.255:137 <- 192.168.1.16:137 NO_TRAFFIC:SINGLE\n\nall udp 224.0.0.251:5353 <- 192.168.1.19:5353 NO_TRAFFIC:SINGLE\n\nall udp 224.0.0.251:5353 <- 192.168.1.16:5353 NO_TRAFFIC:SINGLE\n\nDelete all rules:\n\n# pfctl -F all\n\n0 tables deleted.\n\nrules cleared\n\n2 states cleared\n\nsource tracking entries cleared\n\npf: statistics cleared\n\npf: interface flags reset\n\nShow no rules any more:\n\n# pfctl -s all\n\nFILTER RULES:\n\nINFO:\n\nStatus: Enabled for 0 days 00:00:44 Debug: err\n\nState Table Total Rate\n\ncurrent entries 0\n\nhalf-open tcp 0\n\n--oOo--\n\nMultiple IP Address Aliases on a Single Device\n\nTemporary alias with ifconfig:\n\n# ifconfig re0 inet alias 192.168.10.199 netmask 255.255.255.0\n\nPermanent aliases in /etc/hostname.em0:\n\n# nano /etc/hostname.em0\n\ndhcp\n\ninet alias 192.168.111.101 255.255.255.0\n\ninet alias 192.168.1.101 255.255.255.00\n\nRestart network:\n\n# sh /etc/netstart\n\n# ifconfig em0\n\nem0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\nlladdr b8:ae:ed:ec:0c:03\n\nindex 1 priority 0 llprio 3\n\ngroups: egress\n\nmedia: Ethernet autoselect (100baseTX full-duplex,rxpause,txpause)\n\nstatus: active\n\ninet 192.168.1.14 netmask 0xffffff00 broadcast 192.168.1.255\n\ninet 192.168.111.101 netmask 0xffffff00 broadcast 192.168.111.255\n\ninet 192.168.1.101 netmask 0xffffff00 broadcast 192.168.1.255\n\n--oOo--\n\nStartx Won’t\n\nStartx with fails with “/usr/bin/xauth: timeout in locking authority file /home/user/.Xauthority”\n\n$ ls -l .Xauthority*\n\n-rw------- 1 user user 55 Jul 12 22:04 .Xauthority\n\n-rw------- 1 user user 0 Jul 12 22:36 .Xauthority-c\n\n-rw------- 1 user user 0 Jul 12 22:36 .Xauthority-l\n\nThose files are lock files for .Xauthority, so simply removing them resolves the issue.\n\n$ rm -f /home/user/.Xauthority-*\n\nThese files should have been written to /tmp, where they will be cleaned up automatically at reboot. You can put the above command in /etc/rc.local to fix the problem.\n\n--oOo--\n\nSUID Removed From startx\n\nThe setuid bit was removed from /usr/X11R6/bin/Xorg. Therefore startx can no longer be used by non-root users.\n\nThe best way to start Xorg by non-root users now is:\n\n# rcctl enable xenodm\n\n# rcctl start xenodm\n\n--oOo--\n\nLatest and Greatest\n\nThe latest version has many, many, many improvements, including improved support for my favourite computer toy the Raspberry Pi:\n\nhttps://www.openbsd.org/67.html\n\n--oOo--\n\nLa voila!\n\nHerman\n\nLabels"
    }
}