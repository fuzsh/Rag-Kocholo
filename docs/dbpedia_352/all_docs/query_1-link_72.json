{
    "id": "dbpedia_352_1",
    "rank": 72,
    "data": {
        "url": "https://patents.google.com/patent/US7464339B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US7464339B2 - Method and device for upgrading a building control system - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/3f/94/ec/7d9a758cb99fbc/US07464339-20081209-D00000.png",
            "https://patentimages.storage.googleapis.com/ef/8a/0a/8e7fe1576b075a/US07464339-20081209-D00001.png",
            "https://patentimages.storage.googleapis.com/4a/6d/b0/7f1e46744d36b7/US07464339-20081209-D00002.png",
            "https://patentimages.storage.googleapis.com/62/ff/f1/08d4b888bb953c/US07464339-20081209-D00003.png",
            "https://patentimages.storage.googleapis.com/8b/16/c5/b983b90a07c4e1/US07464339-20081209-D00004.png",
            "https://patentimages.storage.googleapis.com/08/ed/2b/7f50d0f92c72f8/US07464339-20081209-D00005.png",
            "https://patentimages.storage.googleapis.com/e2/30/50/d095419f34b1b1/US07464339-20081209-D00006.png",
            "https://patentimages.storage.googleapis.com/ce/b8/9a/dd78e868862f72/US07464339-20081209-D00007.png",
            "https://patentimages.storage.googleapis.com/48/5e/a7/cca3aa1e29fec6/US07464339-20081209-D00008.png",
            "https://patentimages.storage.googleapis.com/b4/1d/83/140663fae27e7a/US07464339-20081209-D00009.png",
            "https://patentimages.storage.googleapis.com/65/12/ad/0b4a8ccddff47f/US07464339-20081209-D00010.png",
            "https://patentimages.storage.googleapis.com/93/34/c6/5a2cd9e4d2d478/US07464339-20081209-D00011.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2003-01-31T00:00:00",
        "summary": "",
        "meta_description": "An integration tool is presented for integrating and/or commissioning a new device or system into a building control system. The integration tool is incorporated into the building control system and is operative to create one or more databases and/or applications for the new device that is then flashed to an appropriate building system controller. In one form, the present invention is a software tool for integrating a building control device into the building control system. In another form, the present invention is an integration tool for defining applications for new devices. In yet another form, the present invention is a seamless software tool that allows field personnel to create databases and define applications by simply following the defined point structure.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US7464339B2/en",
        "text": "Method and device for upgrading a building control system Download PDF\n\nInfo\n\nPublication number\n\nUS7464339B2\n\nUS7464339B2 US10/770,351 US77035104A US7464339B2 US 7464339 B2 US7464339 B2 US 7464339B2 US 77035104 A US77035104 A US 77035104A US 7464339 B2 US7464339 B2 US 7464339B2\n\nAuthority\n\nUS\n\nUnited States\n\nPrior art keywords\n\nbuilding control\n\nparty\n\ncontrol system\n\nfield panel\n\nintegration\n\nPrior art date\n\n2003-01-31\n\nLegal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)\n\nActive, expires 2025-05-27\n\nApplication number\n\nUS10/770,351\n\nOther versions\n\nUS20040260431A1 (en\n\nInventor\n\nDuane Keenan, Jr.\n\nSteven L. Wesonga\n\nCurrent Assignee (The listed assignees may be inaccurate. Google has not performed a legal analysis and makes no representation or warranty as to the accuracy of the list.)\n\nSiemens Industry Inc\n\nOriginal Assignee\n\nSiemens Building Technologies Inc\n\nPriority date (The priority date is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the date listed.)\n\n2003-01-31\n\nFiling date\n\n2004-02-02\n\nPublication date\n\n2008-12-09\n\n2004-02-02 Application filed by Siemens Building Technologies Inc filed Critical Siemens Building Technologies Inc\n\n2004-02-02 Priority to US10/770,351 priority Critical patent/US7464339B2/en\n\n2004-07-23 Assigned to SIEMENS BUILDING TECHNOLOGIES, INC. reassignment SIEMENS BUILDING TECHNOLOGIES, INC. ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS). Assignors: KEENAN, DUANE JR., WESONGA, STEVEN L.\n\n2004-12-23 Publication of US20040260431A1 publication Critical patent/US20040260431A1/en\n\n2008-12-09 Application granted granted Critical\n\n2008-12-09 Priority to US12/315,984 priority patent/US8850346B2/en\n\n2008-12-09 Publication of US7464339B2 publication Critical patent/US7464339B2/en\n\n2010-03-11 Assigned to SIEMENS INDUSTRY, INC. reassignment SIEMENS INDUSTRY, INC. MERGER (SEE DOCUMENT FOR DETAILS). Assignors: SIEMENS BUILDING TECHNOLOGIES, INC.\n\n2014-09-05 Priority to US14/478,613 priority patent/US9929872B2/en\n\nStatus Active legal-status Critical Current\n\n2025-05-27 Adjusted expiration legal-status Critical\n\nLinks\n\nUSPTO\n\nUSPTO PatentCenter\n\nUSPTO Assignment\n\nEspacenet\n\nGlobal Dossier\n\nDiscuss\n\nImages\n\nClassifications\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION\n\nH04L12/00—Data switching networks\n\nH04L12/28—Data switching networks characterised by path configuration, e.g. LAN [Local Area Networks] or WAN [Wide Area Networks]\n\nH04L12/2803—Home automation networks\n\nG—PHYSICS\n\nG05—CONTROLLING; REGULATING\n\nG05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS\n\nG05B15/00—Systems controlled by a computer\n\nG05B15/02—Systems controlled by a computer electric\n\nG—PHYSICS\n\nG06—COMPUTING; CALCULATING OR COUNTING\n\nG06F—ELECTRIC DIGITAL DATA PROCESSING\n\nG06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements\n\nG06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer\n\nG06F3/048—Interaction techniques based on graphical user interfaces [GUI]\n\nG06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION\n\nH04L67/00—Network arrangements or protocols for supporting network services or applications\n\nH04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parametersÂ\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION\n\nH04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols\n\nH04L9/40—Network security protocols\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof\n\nH04N1/00976—Arrangements for regulating environment, e.g. removing static electricity\n\nG—PHYSICS\n\nG05—CONTROLLING; REGULATING\n\nG05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS\n\nG05B2219/00—Program-control systems\n\nG05B2219/20—Pc systems\n\nG05B2219/23—Pc programming\n\nG05B2219/23008—Computer aided software engineering, program generation, case tools, CASE\n\nG—PHYSICS\n\nG05—CONTROLLING; REGULATING\n\nG05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS\n\nG05B2219/00—Program-control systems\n\nG05B2219/20—Pc systems\n\nG05B2219/26—Pc applications\n\nG05B2219/2642—Domotique, domestic, home control, automation, smart house\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION\n\nH04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass\n\nH04L69/30—Definitions, standards or architectural aspects of layered protocol stacks\n\nH04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level\n\nH04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions\n\nH04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]\n\nDefinitions\n\nthe present invention relates generally to building control systems of the type that control heating, ventilation, air conditioning, fire safety, lighting, security and other systems of a building or facility and, more specifically, to incorporation of new devices into such systems.\n\nBuilding control systems are employed to regulate and/or control various environmental and safety aspects of commercial, industrial and residential facilities (hereinafter, collectively referred to as âbuildingsâ).\n\nbuildings Many buildings today include building automation/control systems that automatically control certain building functions such as HVAC, elevator operation, lighting, heating, alarm systems, security devices, sprinkler systems and the like. These systems are typically computer or processor based and controlled through firmware or software.\n\ncontrol systems tend to be simple and largely unintegrated.\n\nbuilding control systems often consist of multiple, integrated subsystems employing hundreds of elements.\n\nHVAC heating, ventilation and air-conditioning\n\na heating, ventilation and air-conditioning (âHVACâ) building control system interrelates small, local control loops with larger control loops to coordinate the delivery of heat, vented air, and chilled air to various locations throughout a large building.\n\nLocal control systems may use local room temperature readings to open or close vents that supply heated or chilled air.\n\nLarger control loops may obtain many temperature readings and/or air flow readings to control the speed of a ventilation fan, or control the operation of heating or chilling equipment.\n\ncommunication networks have been incorporated that transmit digital data between and among the various elements in accordance with one or more sets of protocols.\n\none or more local area networks using Ethernet or other standard protocols are often used to effect communication between elements and subsystems.\n\nbuilding control systems typically have one or more centralized control stations in which data from the system may be monitored, and in which various aspects of system operation may be executed, controlled and/or monitored.\n\nthe control station typically includes a computer having processing equipment, data storage equipment, and a user interface.\n\nbuilding control systems often employ multi-level communication networks to communicate operational and/or alarm information between operating elements, such as sensors and actuators, and the centralized control station.\n\na building control system control station is the APOGEE INSIGHT Workstation, available from Siemens Building Technologies, Inc. of Buffalo Grove, Ill., which may be used with the APOGEE building control system, also available from Siemens Building Technologies, Inc.\n\nAPOGEE INSIGHT Workstation available from Siemens Building Technologies, Inc. of Buffalo Grove, Ill.\n\nSiemens Building Technologies, Inc. of Buffalo Grove, Ill.\n\nSiemens Building Technologies, Inc. also available from Siemens Building Technologies, Inc.\n\nseveral control stations connected via an Ethernet or other type of network, may be distributed throughout one or more building locations, each having the ability to monitor and control system operation at various system levels. As a consequence, different people in different locations of the facility may monitor and control building operations.\n\nthe typical building control system (including those utilizing the APOGEE INSIGHT Workstation) has a plurality of field panels that are in communication with one of the workstations. Additionally, the building control system includes one or more field devices in communication with the field panels. Each field device is operative to typically measure and/or monitor various building control system parameters, but may also provide active control.\n\na field panel may also be operative to allow certain modifications and/or changes to one or more parameters of the system. This typically includes parameters such as temperature and otherwise, set point changes, modify a control program or the like.\n\na drawback to the current state of building automation systems is the difficulty in integrating new hardware devices into the existing building system or integrating a third party subsystem with the existing building control system.\n\nbuilding automation/control systems are designed to use proprietary devices and cooperate readily only with other proprietary systems. Such systems are not easily adapted to integration with third party hardware devices.\n\na driver is a program that controls a device. Every device, be it a printer, disk drive, or keyboard, must have a driver program. Many drivers, such as keyboard drivers come with the operating system. For other devices, it may be necessary to load a new driver into the system when the device is connected to a computer system. In DOS systems, drivers are files with a â.sysâ extension. In Windows environments, drivers often have a â.drvâ extension. Other designations or no particular designations may also be associated with a driver.\n\na driver acts like a translator between the device and programs that use the device.\n\nEach device has its own set of specialized commands that only its driver knows.\n\nmost programs access devices using generic commands. The driver, therefore, accepts generic commands from a program and then translates them into specialized commands for the device.\n\nthe present invention is an integration tool for integrating and/or commissioning a new device into a building control system.\n\nthe integration tool allows the creation of one or more databases and/or applications for the new device.\n\nthe present invention is a software tool for integrating a building control device into the building control system.\n\nthe present invention is an integration tool for creating databases and/or defining applications for new devices being integrated into a building control system.\n\nthe present invention will allow individuals to create âuser definedâ applications for any integration device.\n\nthe integration tool will include an Application Builder (subtool).\n\nthe Application Builder is used to integrate any device having a driver that has been developed to support this solution, i.e. Johnson N2 Master device, a BACNet Driver device, a Modbus device, or other device utilizing an application type driver through creation of an ISB file.\n\nthe Application Builder allows the selection of appropriate points.\n\nAn Integrated Systems Binary (ISB) file is created or generated as the output of the Application Builder tool.\n\nISB Integrated Systems Binary\n\nthe Application Builder provides for the creation of an ISB file (Integrated Systems Binary file) that is flashed into memory of a field panel or the like. Points are defined and an application is created by selecting appropriate points, either individually or by importing a CSV (Comma Separate File) to more efficiently populate the points. Once the application is saved, the Application Builder creates an ISB file, by selecting the appropriate applications, which are then flashed into the driver preferably using the Firmware Loading Tool, as part of a more general Commissioning Tool firmware menu.\n\nISB file Integrated Systems Binary file\n\nCSV Common Separate File\n\nFIG. 1 is a block diagram of an exemplary building control system in which the present invention is utilized.\n\nFIG. 2 is a block diagram of an exemplary control station or field panel of the building control system of FIG. 1 on which the present invention may be stored and/or executed.\n\nFIG. 3 is a screen shot view of an exemplary initial window of the present integration tool in which an appropriate driver is selected.\n\nFIG. 4 is a screen shot view of an exemplary initial Application Builder window of the present integration tool presented after driver selection.\n\nFIG. 5 is a screen shot view of the Application Builder window of FIG. 4 showing the accessing of a CSV file for Importing of a CSV function.\n\nFIG. 6 is diagram of the data flow that is utilized by the present software.\n\nFIG. 7 is a screen shot of the Application Builder window showing a diagnostics application.\n\nFIG. 8 is a screen capture of an open application with all of its points available.\n\nFIG. 9 is a screen capture of a âSave ISB functionâ of the present Application Builder.\n\nFIG. 10 is a screen capture of a Firmware Loading Tool window.\n\nFIG. 11 is a flowchart of an exemplary manner of creating an application for the new device with the present integration tool (Application Builder).\n\nFIG. 1 depicts a system block diagram of an exemplary building control system (BCS) 20 in which the subject invention as set forth above and below, is be used.\n\nthe building control system 20 is depicted as a distributed building system that provides control functions for any one of a plurality of building operations. Building control systems may thus include HVAC systems, security systems, life or fire safety systems, industrial control systems and/or the like.\n\nAn example of a BCS is the APOGEE system available from Siemens Building Technologies, Inc. of Buffalo Grove, Ill., USA.\n\nthe APOGEE system allows the setting and/or changing of various controls of the device and/or components of the system, generally as provided below.\n\nthe building control system 20 is only an exemplary form or configuration of a building control system. Therefore, the principles of the subject invention are applicable to other configurations and/or forms of building control systems.\n\nthe building control system 20 includes at least one supervisory control system or workstation 22 , a system database (db) 24 , a plurality of field panels represented by field panels 26 a and 26 b , and a plurality of devices represented by devices 28 a - 28 e .\n\nthe BCS 20 may also include other components and/or devices not particularly shown and/or described herein.\n\nEach of the devices 28 a - 28 e represents one of plurality of localized, standard building control subsystems, devices and/or controllers, such as space temperature control subsystems, lighting control subsystems, or the like, and/or any combination thereof. To carry out control of any of its associated subsystem, each device 28 a - 28 e connects to one or more sensors and/or actuators, (not shown).\n\na device that is a controller effects control of a subsystem based on sensed conditions and desired set point conditions.\n\nthe controller controls the operation of one or more actuators to attempt to bring the sensed condition to the desired set point condition.\n\nan actuator not shown\n\nthe sensor not shown\n\nthe device 28 a may further open or close the air conditioning damper via the actuator to attempt to bring the temperature closer to the desired set point.\n\nsensor, actuator and set point information may be shared between the devices/controllers 28 a - 28 e , the field panels 26 a - 26 b , the work station 22 and any other elements on or connected to the BCS 20 .\n\nFLNs floor level networks\n\nthe FLN data network 30 a is a low-level data network that may suitably employ any suitable proprietary or open protocol.\n\nSubsystems 28 c , 28 d and 28 e along with the field panel 26 b are similarly connected via another low-level FLN data network 30 b .\n\nFLN architectures may be employed.\n\nthe field panels 26 a and 26 b are also connected via a building level network (âBLNâ) 32 to the workstation 22 and the database 24 .\n\nthe field panels 26 a and 26 b thereby coordinate the communication of data and control signals between the devices/subsystems 28 a - 28 e and the supervisory computer 22 and database 24 .\n\none or more of the field panels 26 a , 26 b may themselves contain terminal equipment controllers. To this end, as shown in FIG. 1 , the field panel 26 a is operatively connected to one or more terminal devices/controllers 28 a , 28 b.\n\nthe workstation 22 provides overall control and monitoring of the building control system 20 and includes a user interface 40 that is embodied as a keyboard.\n\nthe user interface may include or only have a mouse (not shown) or other similar input device.\n\nthe workstation 22 includes a processing unit 41 that is typical of a computer, as well as a display 38 .\n\nthe workstation 22 further operates as a BCS data server that exchanges data with various elements of the BCS 20 .\n\nthe BCS data server can also exchange data with the database 24 .\n\nthe BCS data server 22 allows access to the BCS system data by various applications. Such applications may be executed on the workstation 22 or other supervisory computers, not shown, connected via a management level network (âMLNâ) 33 .\n\nMSN management level network\n\nthe workstation 22 is used to launch, run and/or utilize the present integration tool as described herein.\n\nthe workstation 22 which is a user access point for the system components (including the field panels 26 a and 26 b ), is operative to accept modifications, changes, alterations and/or the like (âworkstation eventsâ) from the user. This is typically accomplished via a user interface for or of the computer 22 .\n\nthe user interface may be the keyboard 40 of the workstation 22 .\n\nthe workstation 102 is operable to, among other things, affect or change operational data of the field panels 26 a , 26 as well as other components of the BCS 20 .\n\nthe field panels 26 a and 26 b utilize the data and/or instructions from the workstation 22 to provide control of their respective devices/controllers 28 .\n\nthe workstation 22 is also operative to poll or query the field panels 26 a and 26 b for gathering data.\n\nthe workstation 22 processes the data received from the field panels 26 a and 26 b , including maintaining a log of field panel events and/or logging thereof. Information and/or data is thus gathered from the field panels 26 a and 26 b in connection with the polling, query or otherwise, which the workstation 22 stores, logs and/or processes for various uses.\n\nthe field panels 26 a and 26 b are operative to accept modifications, changes, alterations and/or the like (âfield panel eventsâ) from the user.\n\nthe workstation 22 also preferably maintains a database associated with each field panel 26 a and 26 b .\n\nthe database maintains operational and configuration data for the associated field panel.\n\nthe supervisory computer or workstation 22 may be operatively connected to an external server 34 (such as a web server) and other supervisory computers, not shown, via the MLN 33 that may suitably be an Ethernet.\n\nthe supervisory computer 22 uses the MLN 33 to communicate BCS data to and from other elements on the MLN 33 , including the web server 34 .\n\nthe database 24 stores historical data, error data, system configuration data, graphical data and other BCS system information as appropriate.\n\nthe MLN 33 may connect to other supervisory computers, not shown, Internet gateways including, by way of example, the server 34 , or other gateways to other external devices, not shown, as well as to additional network managers (which in turn connect to more subsystems via additional low level data networks).\n\nthe MLN 33 may suitably comprise an Ethernet or similar wired network and may employ TCP/IP, BACnet, and/or other protocols that support high speed data communications.\n\nthe field panels 26 a and 26 b are operative to accept modifications, changes, alterations and/or the like from the user with respect to objects defined by the BCS 20 .\n\nthe objects are various parameters, control and/or set points, port modifications, terminal definitions, users, date/time data, alarms and/or alarm definitions, modes, and/or programming of the field panel itself, another field panel, and/or any controller in communication with a field panel. It should here be appreciated that for the below discussion when appropriately referring to FIG. 1 , the functionality, features, attributes, characteristics, operation and/or the like of each field panel is the same for every field panel except where indicated, and will be described as such with reference to only field panel 26 a . Therefore, the below discussion with reference to field panel 26 a is equally applicable to all field panels unless indicated otherwise.\n\nthe BCS 20 is not a static system in that devices and/or components (hereinafter, generally and collectively, âdevicesâ) may be added to the BCS, deleted from the BCS and/or modified once installed in the BCS.\n\nthe BCS 20 is operative, adapted and/or configured to allow field personnel or other users of the BCS 20 to integrate a new device (e.g. a fire system panel, chiller or continuous range of PLC registers), a new system, and/or a new application for a device (collectively, device, unless indicated to the contrary) via an automated integration tool.\n\na new device e.g. a fire system panel, chiller or continuous range of PLC registers\n\nthe new device may be a preconfigured device (i.e. a device whose properties are fixed and correspond to a particular piece of foreign system equipment, such as a chiller, with such preconfigured devices usually consisting of a defined composition of points of a varying type)), a field-configurable device (i.e. a device such as a fire system panel whose properties and composition are unique to a particular installation and which cannot be ascertained at the time of manufacture of the driver), or a ranged device.\n\na preconfigured device i.e. a device whose properties are fixed and correspond to a particular piece of foreign system equipment, such as a chiller, with such preconfigured devices usually consisting of a defined composition of points of a varying type\n\na field-configurable device i.e. a device such as a fire system panel whose properties and composition are unique to a particular installation and which cannot be ascertained at the time of manufacture of the driver\n\nthe automated integration tool creates and/or generates an application or a database via point specific input by the user (e.g. one or more dialog boxes) that obtain user information with regard to the new device and/or application.\n\nthe created file is then flashed into the memory of the receiving device of the BCS 20 to be used by the driver associated with the new device.\n\nFIG. 2 presents a block diagram of an exemplary architecture or embodiment of a field panel 26 a .\n\nthe architecture of the field panel is only an exemplary embodiment of a field panel in which the subject invention may be utilized.\n\nthe exemplary embodiment of the field panel 26 a of FIG. 2 represents all manners or configurations of field panels and/or other BCS devices that are operative in the manner set forth herein.\n\nthe field panel 26 (representing all field panels and/or destination devices for the created integration database/application) includes a housing, cabinet or the like 44 that is configured in a typical manner for a building control system field panel.\n\nthe field panel 26 includes processing circuitry/logic 46 that is operative, configured and/or adapted to operate the field panel 26 including the features, functionality, characteristics and/or the like as described herein. To this end, the processing circuit 46 is operatively connected to (in communication with) all of the elements of the field panel 26 described below.\n\nthe processing circuitry/logic 46 is typically under the control of program instructions or programming 48 (software or firmware) including various device drivers.\n\nthe program instructions 48 are stored in a data storage device 49 .\n\nthe field panel 26 also includes a power module 50 that is operative, adapted and/or configured to supply appropriate electricity to the field panel 26 (i.e. the various components of the field panel).\n\nthe power module 50 preferably operates on standard 120 volt AC electricity, but may operate on 24 volt AC electricity or include DC power supplied by a battery or batteries.\n\nAn input/output (I/O) module 52 is also provided in the field panel 26 .\n\nthe I/O module 52 includes one or more input/output circuits that communicate directly with terminal control system devices such as actuators and sensors.\n\nterminal control system devices such as actuators and sensors.\n\nthe I/O module 52 includes analog input circuitry for receiving analog sensor signals from a sensor of the like, and includes analog output circuitry for providing analog actuator signals to the sensor or the like.\n\nthe I/O module 52 typically includes several of such input and output circuits.\n\nthe field panel 26 a further includes a digital communication port circuit 54 .\n\nthe digital communication port circuit 54 allows for communication to the devices/controllers 28 as well as other components on the FLN 30 , and furthermore allow for communication with the workstation 22 , other field panels and other components on the BLN 32 .\n\nthe digital communication port circuit 54 includes a first port that may suitably be a RS-485 standard port circuit, that is connected to the FLN 30 a , and a second port that may also be an RS-485 standard port circuit is connected to the BLN 32 .\n\na user's laptop is also connectable to the field panel.\n\nthe field panel 26 may also be accessed locally.\n\nthe field panel 26 includes a local communication/user interface 56 .\n\nthe local communication/user interface 56 provides communication between the field panel 26 and a user, and from an external interface device such as a computer (not shown).\n\nthe interface device 56 may also obtain data from the field panel 26 such as user-generated field panel events and/or data regarding user-generated field panel events, for example, identification data regarding the user-generated field panel event.\n\nAn external interface device may be temporarily connected to the field panel 26 a for the purpose of sending data to the field panel and/or acting as a user-interface for the field panel 26 .\n\nthe user interface 56 of the field panel 26 includes a display 58 for displaying data.\n\nthe display 58 may suitably be an LCD type screen or the like.\n\nthe display 58 is operative, configured and/or adapted to show information regarding the field panel 26 , such as status information, and/or other data pertaining to the operation, function and/or modifications or changes to the field panel 26 as well as other information, menus, dialog boxes and/or the like.\n\nmodifications and/or changes to the field panel 26 made by a user are accomplished, in one form, through the local communication I/O module 52 .\n\nOther user-generated field panel events may be made to any field panel parameter, characteristic, programming, and/or the like. Changes may also be made to field panel parameters, characteristics, programming and the like to another field panel. Such changes may then be communicated to such other field panels via the BLN 32 .\n\nuser-generated changes to the field panel 26 may be received from the BLN 32 such as a database and/or application for a new device as created and/or generated by the present integration tool running on the workstation 22 .\n\nthe field panel 26 also includes memory or a memory card 62 .\n\nthe memory 62 is operative, configured and/or adapted to temporarily receive and/or store data or information for the field panel 26 such as the created application and/or database from the present integration tool.\n\nthe memory 62 may be a random access memory (RAM) buffer or other type of device that temporarily stores data/information and allows the retrieval of the stored data.\n\nthe memory 62 is flashed by to the Firmware Loading Tool when the database and/or application is complete stores the data for use by the particular driver associated with the new device being integrated and commissioned.\n\nthe memory or memory card 62 of the field panel 26 stores the drivers and/or associated database/application for facilitating communication between and control of the devices on the FLN 30 controlled by the field panel 26 .\n\nthe software (program instructions) running on the field panel 26 is configured to permit flashing the device drivers on the memory/memory card 62 .\n\nthe building control system 20 supports the addition of a new device (or new applications) through a user interface known as the integration tool.\n\nthe integration tool has several functions and/or features for integrating various types devices (drivers) into the BCS that may be considered subtools or modules of the integration tool.\n\nMachine readable media of the workstation 22 preferably), a field panel 26 or the like stores the present integration tool as firmware and/or software to be executed thereon.\n\nthe program instructions for the operation, maintenance, diagnostics and/or the like for the building control system includes a commissioning tool main menu for the commissioning or integration of a new device into the system 20 .\n\nthe integration tool is made up of an application builder for the step-through creation of device applications.\n\nthe present Integration Tool includes an Application Builder that is used to integrate a Johnson N2 Master device, a BACNet Driver device, a Modbus device, etc. or other device utilizing an application type driver through creation of an ISB file.\n\nAn Integrated Systems Binary (ISB) file is created or generated as the output of the ISB.\n\nthe integration of a new device is started by invoking the Integration Tool from a menu of the Commissioning Tool. As indicated above, this is generally accomplished on the user's laptop or PC of the BCS 20 .\n\nthe integration tool opens up a dialog box 70 as depicted in FIG. 3 .\n\nFIG. 3 depicts an exemplary screen (dialog box) 70 .\n\nthe dialog box 70 includes the typical WINDOWS dialog box features/functions. Additionally, however, the dialog box 70 has an Integration Device Information section 72 in which the user selects the third (3 rd ) party system.\n\nthe integration device information section includes a listbox menu that presents choices The information or data input in response will set the appropriate rules for the system to be integrated to.\n\nthe present invention provides for the functionality initially required to accomplish generating applications for certain specific drivers and types of drivers.\n\nThose drivers and types of drivers include, but not limited to Johnson Controls N2 Master (application type), BACnet Driver (application type), Modbus Enhanced Driver (application type), CSI Host Protocol Driver (application type).\n\nBACnet Driver application type\n\nModbus Enhanced Driver application type\n\nCSI Host Protocol Driver application type\n\nthe disclosed application builder software is a seamless tool that allows the field personnel to define applications specific to their job needs.\n\nthe tool allows the field offices to create applications easily which will in turn result in less negative slip.\n\nthe disclosed integration tool is particularly useful in integrating Johnson N2 Master (Baseline 551 or greater), BACnet Driver (Baseline 551 or greater), Modbus (Baseline 551 or greater) and Other Application Type Driver (Baseline 551 or greater) devices into the APOGEE building automation system.\n\nSuch system runs software including a firmware loading tool that allows flashing of an ISB (Integrated Systems Binary) File which contains the custom applications created with Application Builder and allows the end user to upload an ISB from a driver for future upgrades.\n\nISB Integrated Systems Binary\n\nFIG. 4 there is shown a screen shot 80 of the disclosed Application Builder portion of the present Integration Tool for a WINDOWS operating system (shown as an âIsb Builder Proto2â).\n\nthe screen shot 80 includes a parameters or points section 82 for the Application to be built upon.\n\nthe section 82 will be populated according to the shown designations (headings) through user selections.\n\nthe user When updating a building management system with a new device, the user will open the Application Builder from the Commissioning Tool menu or be automatically sent to the Application Builder in response to the selected driver in FIG. 3 , and then select the system for which they will be creating applications.\n\nThis driver list will be located under File, New as shown in FIG. 5 .\n\nFIG. 5 FIG.\n\nFIG. 5 shows the screen shot 80 with a further pane or view 86 showing the various ISBs.\n\nthe screen shot 80 of FIG. 5 shows the pull down file selection 84 in the view or pane 83 of the screen shot 80 .\n\nThis tool will be used to create applications which can be flashed into the driver using a firmware loading tool (âFLTâ) a screen shot of which is provided as FIG. 10 .\n\nFLT firmware loading tool\n\nStep 1 The user will be able to import a CSV (Comma Separated File) which will more efficiently populate all of the required fields. The user may also create all of the points one at a time if so desired.\n\nStep 2 After the CSV has been imported the tools will validate all of the information so that the user can save the application.\n\nStep 3 The user will be able to renumber and modify any of the application fields.\n\nStep 4 The user will then save the application.\n\nStep 5 Once all of the applications have been created and saved, the use will be able to put those applications into an ISB File, which can then be flashed into the driver.\n\nStep 6 After all of the applications have been put in the ISB file and saved, the file can be flashed into the drivers using FLT.\n\nthe user will also be able to select points one at a time or use the standard windows features for selecting groups or multiple points at once (CTRL or SHIFT key).\n\nAddress (1) and Application (2) will always be in the applications point window as the first two points.\n\npoints are added to the application they will automatically be numbered in the order they are added.\n\nthe order can be modified by highlighting the point(s) by clicking the move up or move down buttons.\n\nPoints 1 and 2 Address and Application will be grayed out so the user will not be able to rearrange or modify them.\n\nthe user can select any box, other than address and application, to modify the point names, slopes, intercepts or units.\n\nthe user Before saving the application the user must define an application number. This range of numbers is between 10,000 and 10,999.\n\nthe application description field is optional. When saving the application file the user will be prompted for the location or directory to save the file. It should default to the current working directory that the Commissioning Tool is referencing, but with an Integration Folder added. (i.e. C: â Jobs â E1234 â Integration).\n\nthe user By saving the application(s) the user will be able to create the ISB file.\n\nthe user will be able to select multiple applications to be incorporated into the ISB file.\n\nthe tool will automatically create an application for the diagnostics. This application number is predetermined by the application engineer and entered into the tool. When the application is flashed it will also be addressed to the proper FLN and Drop.\n\nthe tool will also be capable of importing a existing ISB file and allow applications to be added to that file.\n\nthe tool will validate the applications before creating the ISB, by verifying that there are not more than one instances of an application number, that all units are RAD50 and that there are no duplicate point names. When saving this file it will preferably, but not necessarily, again default to the current working directory. When the Tool is updated for specific drivers only a single file will be required to send to the field.\n\na jump table will allow FLT to load user defined applications to an area in the drivers ROM. Because these applications will be defined after the core of the driver has been developed, it will be necessary for the core firmware to be able to reference this area of memory for application tables.\n\nDevices can have an address from (1-254) and each device can support (0-32,000) points\n\nthe tool has been designed in an object-oriented manner thereby making it easier to add, remove, replace or extend objects.\n\nDependencies have also been minimized so that changes made to one class will not affect another.\n\nthe use of global variables and functions has also been minimized and where such use has been required, these have, for the most part, been localized in one module.\n\nMFC Microsoft Foundation Classes\n\nSDI Single Document Interface\n\nMDI Multiple Document Interface\n\nthe MFC document/view architecture was chosen as the main design framework. This allowed the code to be modularized such that the tool's data and data management was separated from the views. Organizing the application code in this manner allows for easy code maintenance and/or enhancement.\n\nthe illustrated Application Builder tool facilitates creation of an ISB file that can be downloaded onto a field panel 26 independently of the driver that will use it. This separates a driver's source code from its data thereby saving time, money and resources required to revise a driver simply because some of its data changed even though its core source code did not.\n\nthe illustrated Application Builder tool enables Applications Engineers to develop, create and flash applications without the intervention of Software Developers. Additionally, the illustrated Application Builder tool enables field personnel to create custom applications and flash these applications as they deem fit without having to rely on Home Office.\n\nthe architecture includes view classes and a document class along with other helper classes and/or functions.\n\nthe view and document classes all have their roles and responsibilities as outlined below.\n\nthe view classes are responsible for displaying data and obtaining data from the user. They may, on occasion, be used for more specialized purposes if the task at hand fits naturally in the view class even though it may not deal with displaying or obtaining data. We encounter this scenario when saving an application or isb (integrated systems binary) file.\n\nthe view classes comprise of CMainFrame (Navigation View), CPointListView (Point List View), CIsbView, and CSplitterView (CSplitter Doc). As shown, for example, in FIG. 6 , the view classes CMainFrame, CPointListView, CSplitterView and CIsbView cooperate to create a graphical user interface GUI.\n\nthe ISB tool application's window 100 consists of three panes 102 , 104 and 106 .\n\nthe navigation or tree-view pane 102 to the left (akin to Windows Explorer), the point list view pane 104 to the top right and the isb list view pane 106 to the bottom right as depicted in the exemplary screen shot of FIG. 7 .\n\nCMainFrame class (which utilizes header file MainForm.h and main file MainForm.cpp containing the main function and the implementation for the header file) is automatically supplied by the MFC framework when using the wizard to generate an initial SDI framework for the application.\n\nthe (OnCreateClient) function has to be overridden and modified.\n\nMainForm.cpp For a detailed description of this implementation, refer to the source code in MainForm.cpp.\n\nthe CPointListView class (which utilizes the header file PointListView.h and the main file PointListView.cpp) is responsible for displaying and accepting point data. All point details are displayed in the point edit pane and any modification to a point's attributes are handled by CPointListView.\n\nthe CSplitterView class (which uses the SplitterView.h header file and SplitterView.cpp main file) represents the left hand pane in FIG. 8 .\n\nthe CSplitterView class gives a tree view of the drivers, applications, reports and isbs that are open. This class is used extensively when creating drivers, applications, reports and isbs.\n\nthe class implements drag-n-drop functionality for creating an isb, viewing and modifying properties for a driver, report, isb or an application, adding an application to a driver, adding a report to an application, dragging applications between two drivers with the same driver acronym but different driver revisions (e.g. J2A 3.2 and J2A 3.3) and saving of an ISB or application file.\n\nthe IsbListView class (that utilizes the IsbListView.h header file and IsbListView.cpp main file) handles operations that occur in the Isb pane view.\n\nthe IsbListView class displays the applications present in an isb in a detail view format.\n\nthe detail view format is a format similar to selecting View->Details in Windows Explorer.\n\nthe IsbListView class also implements application deletion from an isb file.\n\nthe Document class is responsible for application data manipulation and data management. Manipulation may involve operations such as changing Endianness of a digital word or interpretation of bytes read from a file. Management may involve temporary storage of data using data structures most suitable for the data being manipulated or referred to.\n\nthe Document defines and implements constructs that map into the problem domain e.g. there are classes such as CSubPoint, CReport, CApplication, etc. all of which directly map to the problem domain.\n\nthe document class is represented by CSplitterDoc but relies on other helper functions/classes to create a suitable solution.\n\nthe document class integrates with the view classes.\n\na document refers to anything not handled in the view and in particular, the tool application's data.\n\nthe document is responsible for creating and maintaining data structures as well as providing API's to these structures that hide the underlying implementation.\n\na document is, in most cases, responsible for internally handling end user requests received from any one of the views.\n\nCSplitterDoc is the document class but it relies on other classes and utility functions to provide the required functionality.\n\nthe Document is responsible for creating new drivers, applications from a Comma Separated Value (CSV) files, new ISBs and new reports.\n\nCSV Comma Separated Value\n\nthe document is also responsible for creating applications and populating applications via the point list view i.e. manually entering point information in the point list view.\n\nthe document is also responsible for modification of applications, reports or isbs.\n\nthe document also serves as temporary storage of driver, application, report and isb information.\n\nthe document is also utilized for reading application or isb files.\n\nthe document is responsible for informing the views of any changes to data that may require their attention.\n\nthe major classes that CSplitterDoc relies on are: CApplication, CSubPoint, CIsb and Creport.\n\nthe Document gets requests from a view via a pointer to the Document in the view class.\n\na request may be for any one of the above mentioned functions.\n\nthe Document sends a coded update message to all the views via an API provided by the framework i.e. UpdateAllViews( . . . ). Any view that processes the code sent with the update message captures information sent along with the message and refreshes itself with the new data.\n\nFIG. 7 depicts the screen shot 100 of an Application Builder function.\n\nthe screen shot 100 provides the navigation view pane 102 , the point list view pane 104 , and the Isb list view pane 106 ready to allow selection of the various items.\n\nFIG. 8 depicts a selected application (â5601 VAV Applicationâ) as indicated by the tree listing in the navigation view plane 102 and a populated point list view pane 104 .\n\nthe Application Builder may also include various diagnostics for the application, a screen shot 120 of which is depicted in FIG. 9 .\n\nthe screen shot 120 illustrates various parameters 122 that can be selected by the user for testing of the build application.\n\nFIG. 10 depicts a screen shot 130 of the Firmware Loading Tool (FLT) in accordance with an aspect of the subject invention.\n\nthe FLT has several tabs 132 (Integrated Systems screen), 134 (Setting selection screen) and 136 (Firmware selection screen) with the Integrated Systems screen 132 being shown.\n\nthe integrated systems screen 132 portion of the FLT 130 allows the user to upload the created ISB file (driver application file) into the BCS 20 .\n\nthe Integrated Systems screen 132 depicts controller information 138 , generated ISB information 140 , and an upload section 142 for uploading the selected ISB.\n\nFIG. 11 is a flowchart, generally designated 200 , that illustrates a general manner in which the present Application Builder as part of the present Integration Tool operates to allow a user to develop a driver application.\n\nthe Integration Tool is initiated. This is preferably, but not necessarily, initiated from a user's computer (e.g. laptop) that is connected to and/or in communication with the BCS 20 such as through a field panel 26 .\n\nthe Application Builder of the Integration Tool allows the selection of an appropriate driver, step 204 .\n\nthe appropriate driver being a driver associated with the new device that is being integrated into the BCS 20 .\n\nstep 206 the user is able to select or define appropriate points for the application. This may be accomplished through selection of individual points or by incorporation of a CSV file. Thereafter, in step 208 , the Application Builder creates an appropriate ISB file. In step 210 , the ISB file is then loaded into the BCS.\n\nLandscapes\n\nEngineering & Computer Science (AREA)\n\nSignal Processing (AREA)\n\nGeneral Engineering & Computer Science (AREA)\n\nComputer Networks & Wireless Communication (AREA)\n\nGeneral Physics & Mathematics (AREA)\n\nAutomation & Control Theory (AREA)\n\nPhysics & Mathematics (AREA)\n\nTheoretical Computer Science (AREA)\n\nEnvironmental & Geological Engineering (AREA)\n\nMultimedia (AREA)\n\nComputer Security & Cryptography (AREA)\n\nHuman Computer Interaction (AREA)\n\nStored Programmes (AREA)\n\nAbstract\n\nAn integration tool is presented for integrating and/or commissioning a new device or system into a building control system. The integration tool is incorporated into the building control system and is operative to create one or more databases and/or applications for the new device that is then flashed to an appropriate building system controller. In one form, the present invention is a software tool for integrating a building control device into the building control system. In another form, the present invention is an integration tool for defining applications for new devices. In yet another form, the present invention is a seamless software tool that allows field personnel to create databases and define applications by simply following the defined point structure.\n\nDescription\n\nThis United States non-provisional patent application claims the benefit of and priority to U.S. Provisional Patent Application Ser. No. 60/443,902, filed Jan. 31, 2003, the entire contents of which is specifically incorporated herein by reference.\n\nFIELD OF THE INVENTION\n\nThe present invention relates generally to building control systems of the type that control heating, ventilation, air conditioning, fire safety, lighting, security and other systems of a building or facility and, more specifically, to incorporation of new devices into such systems.\n\nBACKGROUND OF THE INVENTION\n\nBuilding control systems are employed to regulate and/or control various environmental and safety aspects of commercial, industrial and residential facilities (hereinafter, collectively referred to as âbuildingsâ). Many buildings today include building automation/control systems that automatically control certain building functions such as HVAC, elevator operation, lighting, heating, alarm systems, security devices, sprinkler systems and the like. These systems are typically computer or processor based and controlled through firmware or software. In ordinary single-family residences, control systems tend to be simple and largely unintegrated. However, in large buildings, building control systems often consist of multiple, integrated subsystems employing hundreds of elements.\n\nFor example, a heating, ventilation and air-conditioning (âHVACâ) building control system interrelates small, local control loops with larger control loops to coordinate the delivery of heat, vented air, and chilled air to various locations throughout a large building. Local control systems may use local room temperature readings to open or close vents that supply heated or chilled air. Larger control loops may obtain many temperature readings and/or air flow readings to control the speed of a ventilation fan, or control the operation of heating or chilling equipment.\n\nAs a consequence of the interrelationship of these control loops, many elements of a building control system must communicate information to each other. To this end, communication networks have been incorporated that transmit digital data between and among the various elements in accordance with one or more sets of protocols. By way of example, one or more local area networks using Ethernet or other standard protocols are often used to effect communication between elements and subsystems.\n\nTo this end, building control systems typically have one or more centralized control stations in which data from the system may be monitored, and in which various aspects of system operation may be executed, controlled and/or monitored. The control station typically includes a computer having processing equipment, data storage equipment, and a user interface. To allow for monitoring and control of the dispersed control system elements, building control systems often employ multi-level communication networks to communicate operational and/or alarm information between operating elements, such as sensors and actuators, and the centralized control station.\n\nOne example of a building control system control station is the APOGEE INSIGHT Workstation, available from Siemens Building Technologies, Inc. of Buffalo Grove, Ill., which may be used with the APOGEE building control system, also available from Siemens Building Technologies, Inc. In the APOGEE system, several control stations, connected via an Ethernet or other type of network, may be distributed throughout one or more building locations, each having the ability to monitor and control system operation at various system levels. As a consequence, different people in different locations of the facility may monitor and control building operations.\n\nThe typical building control system (including those utilizing the APOGEE INSIGHT Workstation) has a plurality of field panels that are in communication with one of the workstations. Additionally, the building control system includes one or more field devices in communication with the field panels. Each field device is operative to typically measure and/or monitor various building control system parameters, but may also provide active control.\n\nWhile the workstation is generally used to make modifications and/or changes to one or more of the various components of the building control system, a field panel may also be operative to allow certain modifications and/or changes to one or more parameters of the system. This typically includes parameters such as temperature and otherwise, set point changes, modify a control program or the like.\n\nAs system components/devices fail or require upgrading, it is often desirable or necessary to replace a device of a certain type with a device of a different and/or third party type. Often, the device being replaced has been improved through increased functionality. It is also often desirable to increase the functionality of a building system by adding new devices or subsystems. Devices serving identical or similar functions may often communicate using different protocols and/or commands. Such devices are coupled to the system through devices having firmware to facilitate communication between the device and the building system. Thus, when a new device is added to a building system, it is necessary to alter the appropriate firmware in order to facilitate communication between the building management (control) system and the new device on the system.\n\nA drawback to the current state of building automation systems, however, is the difficulty in integrating new hardware devices into the existing building system or integrating a third party subsystem with the existing building control system. Often, building automation/control systems are designed to use proprietary devices and cooperate readily only with other proprietary systems. Such systems are not easily adapted to integration with third party hardware devices.\n\nThe integration of new hardware devices into existing building automation systems can be complicated, especially when the new hardware device is from a third party manufacturer or when the new proprietary hardware device incorporates different functionalities. A large building may have hundreds of sensors, room controllers, and actuation devices. All of these elements must be interconnected in some manner so that both local and overall control operations may be carried out. Firmware or software applications for the operation of the system (applications) may require updating of one or more drivers in order to facilitate communication of the system with the device through the device driver.\n\nAs is known in the art, a driver is a program that controls a device. Every device, be it a printer, disk drive, or keyboard, must have a driver program. Many drivers, such as keyboard drivers come with the operating system. For other devices, it may be necessary to load a new driver into the system when the device is connected to a computer system. In DOS systems, drivers are files with a â.sysâ extension. In Windows environments, drivers often have a â.drvâ extension. Other designations or no particular designations may also be associated with a driver.\n\nA driver acts like a translator between the device and programs that use the device. Each device has its own set of specialized commands that only its driver knows. In contrast, most programs access devices using generic commands. The driver, therefore, accepts generic commands from a program and then translates them into specialized commands for the device.\n\nCurrently, applications for a building system environment are created by an application engineer. The application is then installed into the system. These application engineers are typically located at a remote location (referred to as Home Office) from the location (referred to as âBranchâ or âFieldâ) at which the building control system is installed. Typically, once an application engineer at Home Office has generated the appropriate applications and an ISB file, the ISB file is sent to the branch to flash the driver with the additional application(s).\n\nIn view of the above, there is a need for a building control system that reduces the time required to integrate a new building control device into the building control system. Moreover, in view of the above, there is a need for a building control system that allows easy integration of a new building control device into the existing building control system.\n\nIn view of the above, there is a further need for a building control system that reduces the time necessary to create an integration database and/or application for a new building control system device or hardware in a building control system. Moreover, in view of the above, there is a need for a building control system that easily incorporates new hardware into a building control system via creation of an integration database and/or application for the new hardware.\n\nIn view of the above, there is a need for a building control system that provides an Application Builder that allows field personnel to generate an integration database and/or applications for new devices being installed to the building control system.\n\nSUMMARY OF THE INVENTION\n\nThe present invention is an integration tool for integrating and/or commissioning a new device into a building control system. The integration tool allows the creation of one or more databases and/or applications for the new device.\n\nIn one form, the present invention is a software tool for integrating a building control device into the building control system. In another form, the present invention is an integration tool for creating databases and/or defining applications for new devices being integrated into a building control system.\n\nThe present invention will allow individuals to create âuser definedâ applications for any integration device. The integration tool will include an Application Builder (subtool).\n\nThe Application Builder is used to integrate any device having a driver that has been developed to support this solution, i.e. Johnson N2 Master device, a BACNet Driver device, a Modbus device, or other device utilizing an application type driver through creation of an ISB file. The Application Builder allows the selection of appropriate points. An Integrated Systems Binary (ISB) file is created or generated as the output of the Application Builder tool.\n\nIn accordance with an aspect of the present invention, the Application Builder provides for the creation of an ISB file (Integrated Systems Binary file) that is flashed into memory of a field panel or the like. Points are defined and an application is created by selecting appropriate points, either individually or by importing a CSV (Comma Separate File) to more efficiently populate the points. Once the application is saved, the Application Builder creates an ISB file, by selecting the appropriate applications, which are then flashed into the driver preferably using the Firmware Loading Tool, as part of a more general Commissioning Tool firmware menu.\n\nThe above-described features and advantages, as well as others, will become more readily apparent to those of ordinary skill in the art by reference to the following detailed description and accompanying drawings.\n\nBRIEF DESCRIPTION OF THE DRAWINGS\n\nFIG. 1 is a block diagram of an exemplary building control system in which the present invention is utilized.\n\nFIG. 2 is a block diagram of an exemplary control station or field panel of the building control system of FIG. 1 on which the present invention may be stored and/or executed.\n\nFIG. 3 is a screen shot view of an exemplary initial window of the present integration tool in which an appropriate driver is selected.\n\nFIG. 4 is a screen shot view of an exemplary initial Application Builder window of the present integration tool presented after driver selection.\n\nFIG. 5 is a screen shot view of the Application Builder window of FIG. 4 showing the accessing of a CSV file for Importing of a CSV function.\n\nFIG. 6 is diagram of the data flow that is utilized by the present software.\n\nFIG. 7 is a screen shot of the Application Builder window showing a diagnostics application.\n\nFIG. 8 is a screen capture of an open application with all of its points available.\n\nFIG. 9 is a screen capture of a âSave ISB functionâ of the present Application Builder.\n\nFIG. 10 is a screen capture of a Firmware Loading Tool window.\n\nFIG. 11 is a flowchart of an exemplary manner of creating an application for the new device with the present integration tool (Application Builder).\n\nDETAILED DESCRIPTION\n\nFIG. 1 depicts a system block diagram of an exemplary building control system (BCS) 20 in which the subject invention as set forth above and below, is be used. The building control system 20 is depicted as a distributed building system that provides control functions for any one of a plurality of building operations. Building control systems may thus include HVAC systems, security systems, life or fire safety systems, industrial control systems and/or the like. An example of a BCS is the APOGEE system available from Siemens Building Technologies, Inc. of Buffalo Grove, Ill., USA. The APOGEE system allows the setting and/or changing of various controls of the device and/or components of the system, generally as provided below. It should be appreciated that the building control system 20 is only an exemplary form or configuration of a building control system. Therefore, the principles of the subject invention are applicable to other configurations and/or forms of building control systems.\n\nThe building control system 20 includes at least one supervisory control system or workstation 22, a system database (db) 24, a plurality of field panels represented by field panels 26 a and 26 b, and a plurality of devices represented by devices 28 a-28 e. The BCS 20 may also include other components and/or devices not particularly shown and/or described herein.\n\nEach of the devices 28 a-28 e represents one of plurality of localized, standard building control subsystems, devices and/or controllers, such as space temperature control subsystems, lighting control subsystems, or the like, and/or any combination thereof. To carry out control of any of its associated subsystem, each device 28 a-28 e connects to one or more sensors and/or actuators, (not shown).\n\nTypically, a device that is a controller effects control of a subsystem based on sensed conditions and desired set point conditions. The controller controls the operation of one or more actuators to attempt to bring the sensed condition to the desired set point condition. By way of example, consider a temperature control subsystem that is controlled by the device 28 a, where an actuator (not shown) is connected to an air conditioning damper (not shown) and the sensor (not shown) is a room temperature sensor. If the sensed temperature as provided by the sensor is not equal to a desired temperature set point, then the device 28 a may further open or close the air conditioning damper via the actuator to attempt to bring the temperature closer to the desired set point. Such systems are known. It is noted that in the BCS 20, sensor, actuator and set point information may be shared between the devices/controllers 28 a-28 e, the field panels 26 a-26 b, the work station 22 and any other elements on or connected to the BCS 20.\n\nTo facilitate the sharing of such information, groups of subsystems such as those connected to devices/ controllers 28 a and 28 b, are typically organized into floor level networks (âFLNsâ) and generally interface to the field panel 26 a. The FLN data network 30 a is a low-level data network that may suitably employ any suitable proprietary or open protocol. Subsystems 28 c, 28 d and 28 e along with the field panel 26 b are similarly connected via another low-level FLN data network 30 b. Again, it should be appreciated that wide varieties of FLN architectures may be employed.\n\nThe field panels 26 a and 26 b are also connected via a building level network (âBLNâ) 32 to the workstation 22 and the database 24. The field panels 26 a and 26 b thereby coordinate the communication of data and control signals between the devices/subsystems 28 a-28 e and the supervisory computer 22 and database 24. In addition, one or more of the field panels 26 a, 26 b may themselves contain terminal equipment controllers. To this end, as shown in FIG. 1, the field panel 26 a is operatively connected to one or more terminal devices/ controllers 28 a, 28 b.\n\nThe workstation 22 provides overall control and monitoring of the building control system 20 and includes a user interface 40 that is embodied as a keyboard. The user interface may include or only have a mouse (not shown) or other similar input device. The workstation 22 includes a processing unit 41 that is typical of a computer, as well as a display 38. The workstation 22 further operates as a BCS data server that exchanges data with various elements of the BCS 20. The BCS data server can also exchange data with the database 24. The BCS data server 22 allows access to the BCS system data by various applications. Such applications may be executed on the workstation 22 or other supervisory computers, not shown, connected via a management level network (âMLNâ) 33. Preferably, but not necessarily, the workstation 22 is used to launch, run and/or utilize the present integration tool as described herein.\n\nThe workstation 22, which is a user access point for the system components (including the field panels 26 a and 26 b), is operative to accept modifications, changes, alterations and/or the like (âworkstation eventsâ) from the user. This is typically accomplished via a user interface for or of the computer 22. The user interface may be the keyboard 40 of the workstation 22. The workstation 102 is operable to, among other things, affect or change operational data of the field panels 26 a, 26 as well as other components of the BCS 20. The field panels 26 a and 26 b utilize the data and/or instructions from the workstation 22 to provide control of their respective devices/controllers 28.\n\nThe workstation 22 is also operative to poll or query the field panels 26 a and 26 b for gathering data. The workstation 22 processes the data received from the field panels 26 a and 26 b, including maintaining a log of field panel events and/or logging thereof. Information and/or data is thus gathered from the field panels 26 a and 26 b in connection with the polling, query or otherwise, which the workstation 22 stores, logs and/or processes for various uses. To this end, the field panels 26 a and 26 b are operative to accept modifications, changes, alterations and/or the like (âfield panel eventsâ) from the user.\n\nThe workstation 22 also preferably maintains a database associated with each field panel 26 a and 26 b. The database maintains operational and configuration data for the associated field panel.\n\nThe supervisory computer or workstation 22 may be operatively connected to an external server 34 (such as a web server) and other supervisory computers, not shown, via the MLN 33 that may suitably be an Ethernet. The supervisory computer 22 uses the MLN 33 to communicate BCS data to and from other elements on the MLN 33, including the web server 34. The database 24 stores historical data, error data, system configuration data, graphical data and other BCS system information as appropriate.\n\nThe MLN 33 may connect to other supervisory computers, not shown, Internet gateways including, by way of example, the server 34, or other gateways to other external devices, not shown, as well as to additional network managers (which in turn connect to more subsystems via additional low level data networks). The MLN 33 may suitably comprise an Ethernet or similar wired network and may employ TCP/IP, BACnet, and/or other protocols that support high speed data communications.\n\nThe field panels 26 a and 26 b are operative to accept modifications, changes, alterations and/or the like from the user with respect to objects defined by the BCS 20. The objects are various parameters, control and/or set points, port modifications, terminal definitions, users, date/time data, alarms and/or alarm definitions, modes, and/or programming of the field panel itself, another field panel, and/or any controller in communication with a field panel. It should here be appreciated that for the below discussion when appropriately referring to FIG. 1, the functionality, features, attributes, characteristics, operation and/or the like of each field panel is the same for every field panel except where indicated, and will be described as such with reference to only field panel 26 a. Therefore, the below discussion with reference to field panel 26 a is equally applicable to all field panels unless indicated otherwise.\n\nThe BCS 20 is not a static system in that devices and/or components (hereinafter, generally and collectively, âdevicesâ) may be added to the BCS, deleted from the BCS and/or modified once installed in the BCS. In accordance with an aspect of the subject invention, the BCS 20 is operative, adapted and/or configured to allow field personnel or other users of the BCS 20 to integrate a new device (e.g. a fire system panel, chiller or continuous range of PLC registers), a new system, and/or a new application for a device (collectively, device, unless indicated to the contrary) via an automated integration tool. Such addition of a new device is preferably accomplished at a field panel 26 or other device of the BCS 20 through coupling to a user's laptop or other computer. The new device may be a preconfigured device (i.e. a device whose properties are fixed and correspond to a particular piece of foreign system equipment, such as a chiller, with such preconfigured devices usually consisting of a defined composition of points of a varying type)), a field-configurable device (i.e. a device such as a fire system panel whose properties and composition are unique to a particular installation and which cannot be ascertained at the time of manufacture of the driver), or a ranged device. The automated integration tool creates and/or generates an application or a database via point specific input by the user (e.g. one or more dialog boxes) that obtain user information with regard to the new device and/or application. The created file is then flashed into the memory of the receiving device of the BCS 20 to be used by the driver associated with the new device.\n\nFIG. 2 presents a block diagram of an exemplary architecture or embodiment of a field panel 26 a. It should be appreciated that the architecture of the field panel is only an exemplary embodiment of a field panel in which the subject invention may be utilized. As such, the exemplary embodiment of the field panel 26 a of FIG. 2 represents all manners or configurations of field panels and/or other BCS devices that are operative in the manner set forth herein.\n\nThe field panel 26 (representing all field panels and/or destination devices for the created integration database/application) includes a housing, cabinet or the like 44 that is configured in a typical manner for a building control system field panel. The field panel 26 includes processing circuitry/logic 46 that is operative, configured and/or adapted to operate the field panel 26 including the features, functionality, characteristics and/or the like as described herein. To this end, the processing circuit 46 is operatively connected to (in communication with) all of the elements of the field panel 26 described below. The processing circuitry/logic 46 is typically under the control of program instructions or programming 48 (software or firmware) including various device drivers. The program instructions 48 are stored in a data storage device 49.\n\nThe field panel 26 also includes a power module 50 that is operative, adapted and/or configured to supply appropriate electricity to the field panel 26 (i.e. the various components of the field panel). The power module 50 preferably operates on standard 120 volt AC electricity, but may operate on 24 volt AC electricity or include DC power supplied by a battery or batteries.\n\nAn input/output (I/O) module 52 is also provided in the field panel 26. The I/O module 52 includes one or more input/output circuits that communicate directly with terminal control system devices such as actuators and sensors. Thus, for example, the I/O module 52 includes analog input circuitry for receiving analog sensor signals from a sensor of the like, and includes analog output circuitry for providing analog actuator signals to the sensor or the like. The I/O module 52 typically includes several of such input and output circuits.\n\nThe field panel 26 a further includes a digital communication port circuit 54. The digital communication port circuit 54 allows for communication to the devices/controllers 28 as well as other components on the FLN 30, and furthermore allow for communication with the workstation 22, other field panels and other components on the BLN 32. To this end, the digital communication port circuit 54 includes a first port that may suitably be a RS-485 standard port circuit, that is connected to the FLN 30 a, and a second port that may also be an RS-485 standard port circuit is connected to the BLN 32. A user's laptop is also connectable to the field panel.\n\nThe field panel 26 may also be accessed locally. To facilitate local access, the field panel 26 includes a local communication/user interface 56. The local communication/user interface 56 provides communication between the field panel 26 and a user, and from an external interface device such as a computer (not shown). The interface device 56 may also obtain data from the field panel 26 such as user-generated field panel events and/or data regarding user-generated field panel events, for example, identification data regarding the user-generated field panel event. An external interface device may be temporarily connected to the field panel 26 a for the purpose of sending data to the field panel and/or acting as a user-interface for the field panel 26.\n\nThe user interface 56 of the field panel 26 includes a display 58 for displaying data. The display 58 may suitably be an LCD type screen or the like. The display 58 is operative, configured and/or adapted to show information regarding the field panel 26, such as status information, and/or other data pertaining to the operation, function and/or modifications or changes to the field panel 26 as well as other information, menus, dialog boxes and/or the like.\n\nAs discussed generally above, modifications and/or changes to the field panel 26 made by a user (e.g. such as indicating that a new third party device has been added to the FLN) are accomplished, in one form, through the local communication I/O module 52. Other user-generated field panel events may be made to any field panel parameter, characteristic, programming, and/or the like. Changes may also be made to field panel parameters, characteristics, programming and the like to another field panel. Such changes may then be communicated to such other field panels via the BLN 32. Similarly, user-generated changes to the field panel 26 may be received from the BLN 32 such as a database and/or application for a new device as created and/or generated by the present integration tool running on the workstation 22.\n\nThe field panel 26 also includes memory or a memory card 62. The memory 62 is operative, configured and/or adapted to temporarily receive and/or store data or information for the field panel 26 such as the created application and/or database from the present integration tool. The memory 62 may be a random access memory (RAM) buffer or other type of device that temporarily stores data/information and allows the retrieval of the stored data. In particular, the memory 62 is flashed by to the Firmware Loading Tool when the database and/or application is complete stores the data for use by the particular driver associated with the new device being integrated and commissioned. Thus the memory or memory card 62 of the field panel 26 stores the drivers and/or associated database/application for facilitating communication between and control of the devices on the FLN 30 controlled by the field panel 26. The software (program instructions) running on the field panel 26 is configured to permit flashing the device drivers on the memory/memory card 62.\n\nAs indicated above, the building control system 20 supports the addition of a new device (or new applications) through a user interface known as the integration tool. The integration tool has several functions and/or features for integrating various types devices (drivers) into the BCS that may be considered subtools or modules of the integration tool. Machine readable media of the workstation 22 (preferably), a field panel 26 or the like stores the present integration tool as firmware and/or software to be executed thereon. Particularly, the program instructions for the operation, maintenance, diagnostics and/or the like for the building control system includes a commissioning tool main menu for the commissioning or integration of a new device into the system 20.\n\nThe integration tool is made up of an application builder for the step-through creation of device applications. Particularly, the present Integration Tool includes an Application Builder that is used to integrate a Johnson N2 Master device, a BACNet Driver device, a Modbus device, etc. or other device utilizing an application type driver through creation of an ISB file. An Integrated Systems Binary (ISB) file is created or generated as the output of the ISB.\n\nIn all cases, the integration of a new device is started by invoking the Integration Tool from a menu of the Commissioning Tool. As indicated above, this is generally accomplished on the user's laptop or PC of the BCS 20. Upon making the appropriate selection, the integration tool opens up a dialog box 70 as depicted in FIG. 3. FIG. 3 depicts an exemplary screen (dialog box) 70. The dialog box 70 includes the typical WINDOWS dialog box features/functions. Additionally, however, the dialog box 70 has an Integration Device Information section 72 in which the user selects the third (3rd) party system. The integration device information section includes a listbox menu that presents choices The information or data input in response will set the appropriate rules for the system to be integrated to.\n\nThe present invention provides for the functionality initially required to accomplish generating applications for certain specific drivers and types of drivers. Those drivers and types of drivers include, but not limited to Johnson Controls N2 Master (application type), BACnet Driver (application type), Modbus Enhanced Driver (application type), CSI Host Protocol Driver (application type). Those skilled in the art will recognize that the disclosure herein may be applicable to the generation of translators and databases for permitting communication between a building automation system and a device.\n\nThe disclosed application builder software is a seamless tool that allows the field personnel to define applications specific to their job needs. The tool allows the field offices to create applications easily which will in turn result in less negative slip. The disclosed integration tool is particularly useful in integrating Johnson N2 Master (Baseline 551 or greater), BACnet Driver (Baseline 551 or greater), Modbus (Baseline 551 or greater) and Other Application Type Driver (Baseline 551 or greater) devices into the APOGEE building automation system. Such system runs software including a firmware loading tool that allows flashing of an ISB (Integrated Systems Binary) File which contains the custom applications created with Application Builder and allows the end user to upload an ISB from a driver for future upgrades.\n\nReferring to FIG. 4 there is shown a screen shot 80 of the disclosed Application Builder portion of the present Integration Tool for a WINDOWS operating system (shown as an âIsb Builder Proto2â). The screen shot 80 includes a parameters or points section 82 for the Application to be built upon. The section 82 will be populated according to the shown designations (headings) through user selections. When updating a building management system with a new device, the user will open the Application Builder from the Commissioning Tool menu or be automatically sent to the Application Builder in response to the selected driver in FIG. 3, and then select the system for which they will be creating applications. This driver list will be located under File, New as shown in FIG. 5. FIG. 5 shows the screen shot 80 with a further pane or view 86 showing the various ISBs. Particularly, the screen shot 80 of FIG. 5 shows the pull down file selection 84 in the view or pane 83 of the screen shot 80. This allows the user to select a particular file. This tool will be used to create applications which can be flashed into the driver using a firmware loading tool (âFLTâ) a screen shot of which is provided as FIG. 10.\n\nAn exemplary manner of operation of the Application Builder is as follows. Step 1: The user will be able to import a CSV (Comma Separated File) which will more efficiently populate all of the required fields. The user may also create all of the points one at a time if so desired. Step 2: After the CSV has been imported the tools will validate all of the information so that the user can save the application. Step 3: The user will be able to renumber and modify any of the application fields. Step 4: The user will then save the application. Step 5: Once all of the applications have been created and saved, the use will be able to put those applications into an ISB File, which can then be flashed into the driver. Step 6: After all of the applications have been put in the ISB file and saved, the file can be flashed into the drivers using FLT.\n\nThe user will also be able to select points one at a time or use the standard windows features for selecting groups or multiple points at once (CTRL or SHIFT key). Address (1) and Application (2) will always be in the applications point window as the first two points. As points are added to the application they will automatically be numbered in the order they are added. The order can be modified by highlighting the point(s) by clicking the move up or move down buttons. Points 1 and 2, Address and Application will be grayed out so the user will not be able to rearrange or modify them. The user can select any box, other than address and application, to modify the point names, slopes, intercepts or units.\n\nBefore saving the application the user must define an application number. This range of numbers is between 10,000 and 10,999. The application description field is optional. When saving the application file the user will be prompted for the location or directory to save the file. It should default to the current working directory that the Commissioning Tool is referencing, but with an Integration Folder added. (i.e. C:\\Jobs\\E1234\\Integration).\n\nBy saving the application(s) the user will be able to create the ISB file. The user will be able to select multiple applications to be incorporated into the ISB file. The tool will automatically create an application for the diagnostics. This application number is predetermined by the application engineer and entered into the tool. When the application is flashed it will also be addressed to the proper FLN and Drop. The tool will also be capable of importing a existing ISB file and allow applications to be added to that file. The tool will validate the applications before creating the ISB, by verifying that there are not more than one instances of an application number, that all units are RAD50 and that there are no duplicate point names. When saving this file it will preferably, but not necessarily, again default to the current working directory. When the Tool is updated for specific drivers only a single file will be required to send to the field.\n\nA jump table will allow FLT to load user defined applications to an area in the drivers ROM. Because these applications will be defined after the core of the driver has been developed, it will be necessary for the core firmware to be able to reference this area of memory for application tables. Devices can have an address from (1-254) and each device can support (0-32,000) points By using the C++ language's facilities i.e. classes, inheritance, etc. the tool has been designed in an object-oriented manner thereby making it easier to add, remove, replace or extend objects. Dependencies have also been minimized so that changes made to one class will not affect another. The use of global variables and functions has also been minimized and where such use has been required, these have, for the most part, been localized in one module.\n\nMicrosoft Foundation Classes (MFC) provides a document/view architecture as well as Single Document Interface (SDI) and Multiple Document Interface (MDI) support. The tool uses the document/view architecture in conjunction with SDI to simplify the development process.\n\nThe MFC document/view architecture was chosen as the main design framework. This allowed the code to be modularized such that the tool's data and data management was separated from the views. Organizing the application code in this manner allows for easy code maintenance and/or enhancement.\n\nThe illustrated Application Builder tool facilitates creation of an ISB file that can be downloaded onto a field panel 26 independently of the driver that will use it. This separates a driver's source code from its data thereby saving time, money and resources required to revise a driver simply because some of its data changed even though its core source code did not. The illustrated Application Builder tool enables Applications Engineers to develop, create and flash applications without the intervention of Software Developers. Additionally, the illustrated Application Builder tool enables field personnel to create custom applications and flash these applications as they deem fit without having to rely on Home Office.\n\nThe architecture includes view classes and a document class along with other helper classes and/or functions. The view and document classes all have their roles and responsibilities as outlined below.\n\nThe view classes are responsible for displaying data and obtaining data from the user. They may, on occasion, be used for more specialized purposes if the task at hand fits naturally in the view class even though it may not deal with displaying or obtaining data. We encounter this scenario when saving an application or isb (integrated systems binary) file. The view classes comprise of CMainFrame (Navigation View), CPointListView (Point List View), CIsbView, and CSplitterView (CSplitter Doc). As shown, for example, in FIG. 6, the view classes CMainFrame, CPointListView, CSplitterView and CIsbView cooperate to create a graphical user interface GUI. The ISB tool application's window 100 consists of three panes 102, 104 and 106. The navigation or tree-view pane 102 to the left (akin to Windows Explorer), the point list view pane 104 to the top right and the isb list view pane 106 to the bottom right as depicted in the exemplary screen shot of FIG. 7.\n\nThe application's main window is contained in CMainFrame class. This class is responsible for creating the main windowâincluding the frame and toolbarsâalong with creating the splitter windows i.e. the navigation pane, the point view/edit pane and the isb pane.\n\nThe CMainFrame class (which utilizes header file MainForm.h and main file MainForm.cpp containing the main function and the implementation for the header file) is automatically supplied by the MFC framework when using the wizard to generate an initial SDI framework for the application. To create splitter windows, the (OnCreateClient) function has to be overridden and modified. For a detailed description of this implementation, refer to the source code in MainForm.cpp.\n\nThe CPointListView class (which utilizes the header file PointListView.h and the main file PointListView.cpp) is responsible for displaying and accepting point data. All point details are displayed in the point edit pane and any modification to a point's attributes are handled by CPointListView.\n\nThe CSplitterView class (which uses the SplitterView.h header file and SplitterView.cpp main file) represents the left hand pane in FIG. 8. The CSplitterView class gives a tree view of the drivers, applications, reports and isbs that are open. This class is used extensively when creating drivers, applications, reports and isbs. The class implements drag-n-drop functionality for creating an isb, viewing and modifying properties for a driver, report, isb or an application, adding an application to a driver, adding a report to an application, dragging applications between two drivers with the same driver acronym but different driver revisions (e.g. J2A 3.2 and J2A 3.3) and saving of an ISB or application file.\n\nThe IsbListView class (that utilizes the IsbListView.h header file and IsbListView.cpp main file) handles operations that occur in the Isb pane view. The IsbListView class displays the applications present in an isb in a detail view format. The detail view format is a format similar to selecting View->Details in Windows Explorer. The IsbListView class also implements application deletion from an isb file.\n\nThe Document class is responsible for application data manipulation and data management. Manipulation may involve operations such as changing Endianness of a digital word or interpretation of bytes read from a file. Management may involve temporary storage of data using data structures most suitable for the data being manipulated or referred to. The Document defines and implements constructs that map into the problem domain e.g. there are classes such as CSubPoint, CReport, CApplication, etc. all of which directly map to the problem domain. The document class is represented by CSplitterDoc but relies on other helper functions/classes to create a suitable solution.\n\nAs illustrated, for example, in FIG. 6, the document class integrates with the view classes. A document refers to anything not handled in the view and in particular, the tool application's data. The document is responsible for creating and maintaining data structures as well as providing API's to these structures that hide the underlying implementation. A document is, in most cases, responsible for internally handling end user requests received from any one of the views. CSplitterDoc is the document class but it relies on other classes and utility functions to provide the required functionality. The Document is responsible for creating new drivers, applications from a Comma Separated Value (CSV) files, new ISBs and new reports. The document is also responsible for creating applications and populating applications via the point list view i.e. manually entering point information in the point list view. The document is also responsible for modification of applications, reports or isbs. The document also serves as temporary storage of driver, application, report and isb information. The document is also utilized for reading application or isb files. The document is responsible for informing the views of any changes to data that may require their attention. The major classes that CSplitterDoc relies on are: CApplication, CSubPoint, CIsb and Creport.\n\nThe Document gets requests from a view via a pointer to the Document in the view class. A request may be for any one of the above mentioned functions. After processing the request, the Document sends a coded update message to all the views via an API provided by the framework i.e. UpdateAllViews( . . . ). Any view that processes the code sent with the update message captures information sent along with the message and refreshes itself with the new data.\n\nFIG. 7 depicts the screen shot 100 of an Application Builder function. The screen shot 100 provides the navigation view pane 102, the point list view pane 104, and the Isb list view pane 106 ready to allow selection of the various items. FIG. 8 depicts a selected application (â5601 VAV Applicationâ) as indicated by the tree listing in the navigation view plane 102 and a populated point list view pane 104.\n\nThe Application Builder may also include various diagnostics for the application, a screen shot 120 of which is depicted in FIG. 9. The screen shot 120 illustrates various parameters 122 that can be selected by the user for testing of the build application.\n\nFIG. 10 depicts a screen shot 130 of the Firmware Loading Tool (FLT) in accordance with an aspect of the subject invention. The FLT has several tabs 132 (Integrated Systems screen), 134 (Setting selection screen) and 136 (Firmware selection screen) with the Integrated Systems screen 132 being shown. The integrated systems screen 132 portion of the FLT 130 allows the user to upload the created ISB file (driver application file) into the BCS 20. The Integrated Systems screen 132 depicts controller information 138, generated ISB information 140, and an upload section 142 for uploading the selected ISB.\n\nFIG. 11 is a flowchart, generally designated 200, that illustrates a general manner in which the present Application Builder as part of the present Integration Tool operates to allow a user to develop a driver application. In step 202 the Integration Tool is initiated. This is preferably, but not necessarily, initiated from a user's computer (e.g. laptop) that is connected to and/or in communication with the BCS 20 such as through a field panel 26. The Application Builder of the Integration Tool allows the selection of an appropriate driver, step 204. The appropriate driver being a driver associated with the new device that is being integrated into the BCS 20.\n\nIn step 206, the user is able to select or define appropriate points for the application. This may be accomplished through selection of individual points or by incorporation of a CSV file. Thereafter, in step 208, the Application Builder creates an appropriate ISB file. In step 210, the ISB file is then loaded into the BCS.\n\nClaims (10)\n\n1. A method of integrating a third party device into a building control system, the building control system having a workstation running building control system program instructions and a separately housed field panel in communication with the workstation, the method comprising the steps of:\n\nproviding a user interface separate from the field panel for the input of data regarding a third party building control device that is on the field panel, wherein said third party building control device is one of the group consisting of a sensor or actuator or actuator controller, in an environmental and fire safety system;\n\naccepting data input from the user regarding the third party building control device through the user interface;\n\nlaunching an integration tool in response to the data input from the user regarding the third party building control device;\n\ngenerating an integration file by the launched integration tool for use by a driver at the field panel associated with the third party building control device; and\n\nloading the generated integration file into the separately housed field panel for use by the driver associated with the third party building control device to allow the third party building control device to operate in conjunction with the building control system software.\n\n2. The method of claim 1, wherein the step of launching an integration tool in response to the data input from the user regarding the third party device comprises launching an application builder.\n\n3. The method of claim 2, wherein the step of generating an integration file by the launched integration tool for use by a driver associated with the third party device comprises generating an integration file comprising an integration application file.\n\n4. The method of claim 1, wherein the step of providing a user interface for the input of data regarding the third party device includes providing a user interface comprising at least one dialog box for the input of data regarding the third party device.\n\n5. The method of claim 1, wherein the step of loading the generated integration file into a field panel for use by the driver associated with the third party device comprises flashing the generated integration file into memory of the field panel.\n\n6. A building control system comprising:\n\na workstation running building control system software;\n\na field panel in electronic communication with, and separately housed from, said workstation via a network; and\n\na software integration tool configured to generate a database that will run in conjunction with said building control system software and to aid in integrating a third party building control device into the building control system, said software integration tool operative to a) provide a user interface separate from the field panel for the input of data regarding a third party building control device that is on the field panel, wherein said third party building control device is one of the group consisting of a sensor or actuator or actuator controller, in an environmental and fire safety system, b) accept data input from the user regarding the third party building control device through the user interface, c) launch an application builder in response to the data input from the user regarding the third party building control device, d) generate an application file by the launched application builder for use by a driver associated with the third party building control device, and e) load the generated application file into the field panel for use by the driver associated with the third party building control device.\n\n7. The building control system of claim 6, wherein the integration tool is operative to provide a user interface for the input of data regarding the third party device by providing at least one dialog box for the input of data regarding the third party device.\n\n8. The building control system of claim 6, wherein the integration tool is operative to load the generated application file into said field panel for use by a driver associated with the third party device by flashing the generated application file into memory of the field panel.\n\n9. The building control system of claim 6, wherein said software integration tool is stored on a computer of a user.\n\n10. The method of claim 1, wherein providing the user interface for the input of data regarding the third party device comprises providing the user interface workstation.\n\nUS10/770,351 2003-01-31 2004-02-02 Method an"
    }
}