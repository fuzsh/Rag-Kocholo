{
    "id": "dbpedia_6121_3",
    "rank": 15,
    "data": {
        "url": "http://www.electriccafe.xyz/double-dragon",
        "read_more_link": "",
        "language": "en",
        "title": "Coding — Electric Cafe",
        "top_image": "http://static1.squarespace.com/static/555def98e4b0373c403cc170/t/606f2e6345864706a94ebab8/1617899107546/electric_cafe_original_logo_xlarge.png?format=1500w",
        "meta_img": "http://static1.squarespace.com/static/555def98e4b0373c403cc170/t/606f2e6345864706a94ebab8/1617899107546/electric_cafe_original_logo_xlarge.png?format=1500w",
        "images": [
            "http://images.squarespace-cdn.com/content/v1/555def98e4b0373c403cc170/a9e4ed06-ccb9-4f66-82d2-2c895d59a47f/ec_squarespace2.png?format=1500w",
            "https://images.squarespace-cdn.com/content/v1/555def98e4b0373c403cc170/1636921492353-QZDE244DO1M8GIBFB8F1/Double-Dragon.jpeg",
            "https://images.squarespace-cdn.com/content/v1/555def98e4b0373c403cc170/8f1df922-c451-4312-aa40-bb2d6cdd71fa/dd.png",
            "https://images.squarespace-cdn.com/content/v1/555def98e4b0373c403cc170/a46e17d4-7b59-46d8-b8d3-461d1b4758b4/disks.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mark Day"
        ],
        "publish_date": "2023-05-28T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://images.squarespace-cdn.com/content/v1/555def98e4b0373c403cc170/a0f596e9-eec4-4e47-8b72-4afe34b823a4/favicon.ico?format=100w",
        "meta_site_name": "Electric Cafe",
        "canonical_link": "http://www.electriccafe.xyz/double-dragon",
        "text": "With news that the Scorpion Engine now supports loading assets in and out of memory this opens up new possibilities for the continuation of this project..\n\nAs previously posted I was struggling with memory constraints to support even some of the basic stuff like weapons and throwing objects.\n\nI’m yet to test out the new version, but the signs are promising.\n\nRegarding time working on the project, yes I started this when I had lots of free time, since then I now have multiple game projects on the go for mobile/PS5 and 2 young children to bring up. So time is tight, but this news has given me incentive to try and find some time to see if I can get it moving again.\n\nOne of the features of most beat’em ups is the camera stopping at certain points to allow for a battle before it will let the player move on.\n\nIn Scorpion we can achieve this using “Blocks”.\n\nIn the video you will see the blocks are placed along the floor and when the player collides the camera is stopped (they will be invisible in the final game).\n\nAt this point we also generate collision blocks either side of the screen (to stop the player walking out of the zone)\n\nTo control the battle zone I keep an enemy count (a debug display can be seen next to the player 1 health bar).\n\nOnce this count reaches 0, the collision blocks are removed, the camera is told to follow the player again and we pop up a little “Go” hand to tell the player they can continue.\n\nApart from a slight animation bug when moving diagonally this looks really nice and almost completes this part of the AI which I call the “Engage” state. The last thing to do for this state would be to ensure they consider if an enemy is already attacking from one side, so they would choose the other.\n\nIn addition to this “Engage” state, next we will compliment it with a “Patrol” state. In the “Patrol” state the enemy will be coded to keep a distance and make less movements, possibly changing sides.\n\nIt’s likely this “Patrol” state will only be used if 2 enemies are already engaged with a player.\n\nWe can track this by giving the Player “slots”, if front and back slots are filled then the enemy can remain in “Patrol”, if a slot becomes free then they will switch to “Engage”.\n\nIn my quest to squeeze as much of the arcade Double Dragon into the Amiga 500 + 512kb slow ram, I am now carefully planning how much memory each little bit is taking up. To reiterate we have 512kb of chipram to load everythng we need at any one time (Slow ram is only useful for swapping things in and out without having to do any disk loading). So here is some info I have gathered along with help from Earok and EAB members:\n\nOverheads\n\nKickstart 1.3 takes up 40kb\n\nThe Display (5 bitplanes x2 buffers) = 115,200kb\n\nSo before we even start to load any graphics that is 145,200kb of our 512kb chip ram used up.\n\nI have also worked out the following from looking at the buld.log output from Scorpion and then adding a new tile and a new frame:\n\n1 x 16x16 pixel tile is 160 bytes\n\n1 x frame of animation for Player or enemy avg is 2.48kb\n\nBolo’s frames approx 3kb as he is bigger\n\nAlso 1 frame of Bolo punching is approx 4kb as it is wider\n\n1 x 16x256 pixel panel image is 8kb\n\nSo we can start to plan how we use up the memory and also prioritise the things that are most important. For example I now know that the cat on the bin took up nearly 1kb as it was 6 tiles big. But let’s add up what I currently have:\n\nKickstart = 40kb\n\nDisplay = 115.2kb\n\nMap tiles x297 = 47kb\n\nTop and bottom panels = 16kb\n\nBilly frames x25 approx = 62kb\n\nRoper frames x13 approx = 32kb\n\nBolo frames x13 approx = 41kb\n\nMusic 12kb\n\nSfx 30kb\n\nIn addition the following is loaded into slow ram:\n\nCode 8kb\n\nMetadata 40kb\n\nSo the current total being loaded into chip ram is 395kb, which you would think leaves enough room for at least another enemy? Not so..\n\nSomething I was not considering was that all the animation frames get X flipped and those versions are saved into chip ram separately!\n\nIn fact Billy’s frames total 124kb, Roper 64kb and Bolo 82kb. This explains why I’m running out of memory.\n\nThe actual total I am unsuccessfully loading in is 530kb - so we will need to do some more thinking about how we display the player and enemies without affecting performance but reducing the memory.\n\nIn Double Dragon, the players and enemies walk around on a pseudo 3D map, so there isn’t really a floor or platform they walk on.\n\nSo to get them to fall down was alot trickier than it first looked. I mean this engine is designed for platformers so has jumping and falling built in but on our pseudo 3D map we don’t really have a floor so we need to do something else.\n\nChange Actor Type\n\nWhen the enemy receives a hit in the stunned position I switch to new actor that just has the fall animations. This actor has to be set up in a certain way otherwise we won’t be able to move it freely.\n\nWe have to ensure there is no collision detection on the Y axis, set the movement type to CPU and then most importantly set the speed to 0. This now overrides the Scorpions inbuilt movement code.\n\nInitiate Fall\n\nWe then start the movement code, first setting Var1 to the current Y position, then Var5 to 6, we will use Var5 as a Y vector to move the actor up and down, decreasing it from 6 until it becomes minus.\n\nMove Actor Position\n\nHere we use a “While” statement to move the actor up from a starting point (Var1) into the air and back down again to the same point.\n\nEach frame we decrease the Var5 value by 1, eventually it becomes a minus number so the actor will come back down again.\n\nWhen the actor reaches the starting point (Var1) we then end the “While” statement.\n\nChange Actor Type Back Again\n\nNow the actor has reached the “floor” I change the type back to the main type and then change it’s animation to the Floor/Get Up animation.\n\nDeath\n\nIf the enemies health is 0 or below I play the Death animation instead.\n\nAnd this is what it looks like…\n\nOver the weekend I completed a first iteration of the enemy movement and attacks. Coding this in the Scorpion Engine is very different from doing it in C, but many of the concepts remain the same.\n\nThe whole thing works as one big code loop, so the enemy is always thinking about their next move.\n\nInitilaise\n\nFirst I initialise the enemy, in here I simply spawn their legs (see previous post about this) and then run the “Idle” code block.\n\nIdle\n\nThis is where we return the enemy back to their default settings, in our case we set their Var1 (which controls whether they are attacking, on a ladder, being hit etc..) We set this back to normal which is 0.\n\nAnd then we trigger the AI codeblock.\n\nAI\n\nIn here we first check that we are in a state to make an AI move (eg. if the enemy is being hit they do not need to run this code)\n\nWe then check the distance on the X axis to the target (the player).\n\nCheck Distance X\n\nFirst we check if the enemy is standing too close and should reposition.\n\nIf not, then we check if the enemy is outside of the attack range, if so we move the enemy using “Approach”.\n\nAnd if they are in the perfect attack range we then “Check Distance Y”\n\nCheck Distance Y\n\nIf they are too far away we let the enemy “Approach”.\n\nElse the enemy is within range on both X and Y axis, meaning they have a chance to attack.\n\nAttack Chance\n\nWe now grab a random value, in Scorpion it’s called rolling the dice. If it lands on 1 I say we can “Attack”, otherwise the enemy is told to wait 10 frames (0.2 seconds) before being sent back to the “AI” codeblock above.\n\nAttack\n\nHere we can tell the enemy to select an attack type, again we can do a probablity roll of the dice to determine whether they should prefer one attack over another.\n\nApproach\n\nAs mentioned above sometimes the enemy is asked to “Approach”, we can use the Scorpions inbuilt “move_atplayer” which looks really good.\n\nWe then ask the enemy to go back to “AI” after 5 frames (0.1 seconds).\n\nTo Conclude\n\nSo by returning to “AI” the enemy is constantly reassessing it’s choices, which makes for some nice AI. This iteration is not perfect, but it gets us pretty close to an enjoyable game fairly quickly.\n\nThings to do next will be to get the enemies to consider which side they want to attack as right now they choose the nearest side. And if approaching from below they always place themselves ontop before moving to the attack range, so this will need fixing too.\n\nOne of the main reasons for this blog is to try to put up useful bits of info that will hopefully help any beginners or indeed intermediates to get things done without too much pain and suffering!\n\nOne of those not so obvious things is preparing sound effects so they will work in the Scorpion Engine.\n\nYou will need 2 things (which are also free):\n\nSound Editor - https://www.ocenaudio.com/en/startpage\n\nConverter - https://convertio.co/wav-8svx/\n\nIf like me you are using samples from the arcade original, import these into your sound editor and trim if necessary (you want to reduce the file size as much as possible)\n\nThen convert the sample rate down to 22khz. If you go below 22khz you will start to lose the clarity, but this is fine and actually recommended for low frequency sounds like a “hit the ground” sound. So 11khz is good for these types of sounds and will half the memory usage.\n\nSave to WAV format.\n\nThen drop into into the converter listed above, this will output an 8SVX file that you can then use in the Scorpion Editor.\n\nFirst off the idea of using the Billy legs for Roper and Linda did not go well, they are actually very differnt so that was not an option.\n\nBut, since the last update Earok has been able to implement some very useful features into the Scorpion Engine that have helped me to reduce the amount of GFX we are loading into chip ram.\n\nScorpion now supports the ability to have a child of an actor, so this allows us to split the torso and legs up. This helps to reduce the walking frames and means we can also do lifts and other things that reuse the legs.\n\nAlso since last update I have now been able to load all the frames I need for Roper, Bolo and Billy into memory along with background tiles, SFX and music.\n\nUsing a few tricks we have at least the following moves covered:\n\nBIlly - Punch, Kick, Uppercut, Knees to Head, Headbutt, Elbow, Throw Enemy, Jump, Jumping Kick, Hit, Stunned, Falling, Floor, Getting Up, Lift Barrel, Throw Knife\n\nRoper - Punch, Hit, Stunned, Falling, Floor, Getting Up, Lift Barrel, Throw Knife\n\nBolo - Punch, Hit, Stunned, Falling, Floor, Getting Up, Lift Barrel, Throw Player\n\nWe should also be able to fit a few more things like jump kicks for Roper too. So altogether there will be alot of the moveset from the arcade.\n\nThe big sacrifice is losing Linda from level 1, but she will appear Level 2 along with Williams and Jeff.\n\nYesterday I explored reducing the walking animation to 2 frames, initially I thought it could be a solution but after living with it for a day it just feels horrible. So the original 4 frames is a must.\n\nAfter posting the video many English Amiga Board members had some good suggestions regarding using 2 “actors” to join parts together. Thank you for the suggestions. It all made sense so I have tried it out today.\n\nI’m happy to report that it does indeed work without any visible signs of a performance drop, but I will have to keep an eye on that.\n\nNot only that but I realised it would be possible to use Billy’s legs for Roper, Williams and Linda as they are very similar. Roper admittedly would gain some boots as a consequence but this would save us about 6 frames of animation, which is alot.\n\nThis solution would of course require palette swapping the indexes of images used by the actors for it to look correct. This is not currently supported in Scorpion but could be in the future.\n\nSo moving onto music, it is very obvious that we are already struggling for chipram even before music is loaded in. But I have been exploring options with this too.\n\nI think my mod’s could easily be modded (no pun intended) to use very low memory instrumentation giving it a more demoscene/chiptune feel but still remaining funky.\n\nAs metioned previously the Amiga simply can’t load in the amount of animation frames we need for 4 characters at any one time.\n\nIt’s actually worse than I previously calculated, I said we could do about 110 frames but it’s actually gonna be closer to 30-40 as I wasn’t taking into account the duplicates within those frames.\n\nScorpion doesn’t currently support joining bits together, as this would be a solution that would increase our frame count.\n\nAs currently we wouldn’t be able to support lifting the barrel as it’s 4 frames. Which is now alot of our budget. But if we were able to join the walking legs with a static lift torso, that would then be easily doable.\n\nSo our budget comes down to about 20 frames for player and 10 per enemy, which is rather limited. But I have been able to reduce the amount of map tiles by a third with hardly any visual difference.\n\nWe can however be artistic with how we use the limited animation frames, to still get a good feel.\n\nFor example:\n\nWalking is something that currently takes 8 frames (4 for nomral and another 4 when moving up), which x4 charcters at once is 32 frames. I think we can reduce this by 3/4. See below, walking right is the 2 frame version, walking left is 4 frames.\n\nAn issue I have hit early in development is I am running out of memory. Completely expected as I was not watering down any of the arcade assets upto now, and to be fair I was wondering how I was getting away with it.\n\nThat said, this is where I have to start considering all of the graphics that are being loaded into chipram at any one point.\n\nThe current limit I’m hitting is once I go over about 110 frames of animation frames at this size, it can runs out of memory. Combine those animation frames with 512 tiles and it is understandable. And this is without loading any music in.\n\nSo it is inevitable that we are going to have to cut a fair few animations if we are to have a variety of enemies on screen but there are some options available.\n\nLooking at the tiled map I can easily edit it down to 2/3 of the original memory size without much visual impact, and can probably go alot further.\n\nWe can also cut the walking up animation frames from each character.\n\nEach character has left and right punches, this could be reduced to one.\n\nAlso there are many frames for being hit and falling that could be reduced without necessarily looking worse.\n\nThese are all things to consider but I will test out alot of things to ensure we get the best result possible.\n\nAfter seeing many videos online, especially a recent Street Fighter 2 demo by Neeso Games (who are also working on a version of Jackal), it got me thinking that maybe we could speed up development by bringing our existing assets into the Scorpion Engine and do some tests.\n\nThe Scorpion Engine is a fast and flexible game creation kit for Amiga, offering a modern Windows IDE for development.\n\nThe editor is a fine piece of kit designed by Erik Hogan - it takes the hassle out of many graphic & tech related tasks and offers many clever speed optimisations.\n\nSo I spent a weekend setting it up, including the tiled level 1, a player and some enemies. After some intial tests at 50fps it was clear that with Amiga 500 + expansion settings it wasn’t going to be able to support it without slow down.\n\nLuckily the Scorpion Engine has a 25fps option (this was the frame rate we were initially targetting anyway). Using this option the game runs solid and feels fantastic, being able to support many characters on screen at once without any obvious signs of slow down. This is important as if a framerate is established from the start, your eye gets used to it and it feels good.\n\nCheck the test footage…"
    }
}