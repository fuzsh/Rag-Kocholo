{
    "id": "dbpedia_6121_1",
    "rank": 80,
    "data": {
        "url": "https://dillonbaird.io/articles/mutantdragon/",
        "read_more_link": "",
        "language": "en",
        "title": "Recreating the SpaceX Crew Dragon UI in 60 Days Â· DillonBaird.io",
        "top_image": "https://DillonBaird.io/articles/mutantDragon/1%2A5u59rZUvBdazKgDlc56oIA.png",
        "meta_img": "https://DillonBaird.io/articles/mutantDragon/1%2A5u59rZUvBdazKgDlc56oIA.png",
        "images": [
            "https://dillonbaird.io/DillonBairdIoLogo.svg",
            "https://dillonbaird.io/DillonBairdIoLogo.svg",
            "https://dillonbaird.io/articles/mutantDragon/1*xamWSj1GM55F9faeqkADog@2x_hu20c7d6a2025b2b909fd224bbf5c6aa88_269208_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*KfGNZH8YGmL_zEtuy-00hQ@2x_hua71187a0a7641c09580262c6aa843144_133180_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*ARNcd0_gp9uwl0G47y9nBQ@2x_hu74463d6203478106e4a6f253ef39baae_139054_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*wsHb4ChHwrBSjJRRI_tGnQ@2x_hu781a7a83c45fe1648e5f585e69593218_61082_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*bbYHgZfrg0u5IWxuteXWQA@2x.jpeg",
            "https://dillonbaird.io/articles/mutantDragon/1*Ovr22DJiRaAnoSed0pTdLg_hu69428ae6f0acc33dec287cd69f90f4e8_6288_950x0_resize_q100_h2_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*TBK3R1jaEwtSPXjW20BFgg_huade314b4f0a30c6af3f976f10eb946e6_11655_950x0_resize_q100_h2_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*jLgQX4H11E4trty4tpShwQ@2x_hu21e66ae61e1753a960d02c048b1e2b42_279035_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*LwQRz6sFQkTSkehuGsI4-g_hu3493729ed857e83691be30c723768e6f_225134_950x0_resize_q100_h2_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*5u59rZUvBdazKgDlc56oIA_hu50b289ed7596bd3ad5aa2e41ab93f391_171190_950x0_resize_q100_h2_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*R54gWD8uecPIHJ9GNvCNtA@2x_hu0b21db479f698e7f493ef1b7f7ff516d_160221_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*HbDgImrUAiLAbpNlOEj7TA@2x.jpeg",
            "https://dillonbaird.io/articles/mutantDragon/1*k3gvSV2oXzxdiWXuW9msPg@2x_hu5487f90348d392bf10effeeac54921f9_136501_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*AqKhg002ShxJXzcFGTsNPA@2x_hu0e149c39cf74d0a0f089802a3f4dcc49_442019_950x0_resize_q100_h2_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/1*zR4ygFb4lQ3mKXkV0FlmyA.jpeg",
            "https://dillonbaird.io/articles/mutantDragon/0*rwbDrzFUBkJFtDXt_hu4cdae4e32b3a0a91f955a69d84911d2e_5583_200x0_resize_q100_h1_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/0*q1diFnWQhptjyGwH_huc99a0b146a77e69d0bdaef3c106f13e3_11035_200x0_resize_q100_h1_box.webp",
            "https://dillonbaird.io/articles/mutantDragon/0*_JJr4LkMux36h_PK_hub904c289bc3e8b9109d9bc10b052b301_8454_200x0_resize_q100_h1_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/0*zWiky-sc8PpWl9YC_hu8aa25f3c4a2d4fb0d2ddb14208a6cf1d_15241_200x0_resize_q100_h1_box_3.webp",
            "https://dillonbaird.io/articles/mutantDragon/0*OLFIbkzC2FQrp4xv_hu41e4bbf9b26ef8d8e728056b9a1b3057_9890_200x0_resize_q100_h1_box_3.webp",
            "https://ui-avatars.com/api/?background=random&name=Dillon Baird",
            "https://ui-avatars.com/api/?background=random&name=perilun",
            "https://ui-avatars.com/api/?background=random&name=TheWarDoctor",
            "https://ui-avatars.com/api/?background=random&name=Fluid-Abroad",
            "https://ui-avatars.com/api/?background=random&name=Dillon Baird",
            "https://ui-avatars.com/api/?background=random&name=Fluid-Abroad",
            "https://ui-avatars.com/api/?background=random&name=Raul Hendrix"
        ],
        "movies": [
            "https://www.youtube-nocookie.com/embed/Roex1wP0WsA?rel=0&start=0",
            "https://www.youtube-nocookie.com/embed/UZ2jf8ON85U?rel=0&start=0"
        ],
        "keywords": [],
        "meta_keywords": [
            "spacex",
            "control interface",
            "touch interface",
            "interface control",
            "dragon UI",
            "spacex dragon UI",
            "touchscreens",
            "three.js",
            "vue.js",
            "javascript"
        ],
        "tags": null,
        "authors": [
            "Dillon Baird - DillonBaird.io",
            "Fluid-Abroad",
            "Raul Hendrix",
            "Dillon Baird"
        ],
        "publish_date": "2023-02-16T01:51:21+00:00",
        "summary": "",
        "meta_description": "One developerâs challenge to recreate a conceptual UI/software stack and/with a hardware simulator for the Crew Dragon in 60 days.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://DillonBaird.io/articles/mutantdragon/",
        "text": "Planning, Research & Design\n\nAnyone thatâs followed SpaceX over the years knows that their approach to design is to allow for rapid evolution, reiterating until perfection, based on simulations, prototypes, trials, and user feedback loops. All code and components should be structured in a way that anticipates change, whether thereâs a change to the design, hardware, vehicle, mission, or end-user; all must abstract into separate modular layers that can adjust independently.\n\nProcess and approach must be dynamic and, just like the rockets itâs designed to launch on, all code should be reusable. Every project or task requires a unique, dynamic, and flexible plan; this is no exception. Along the way, my strategy & approach changed many times while attempting to prove my assumptions as false to avoid any self-induced cognitive bias.\n\nFor this project, we are fortunate enough to get to skip through a lot of foundational UI/UX exploration by basing most design decisions on the latest UI revisions seen on recent Dragon launches; This allows us to focus on the main tasks in scope: architecture, structure, components, and reusability.\n\nAlthough a few main screens have been captured, there still are MANY areas/components that have not been seen publicly and must be based on blurry photos, shaky video frames, and primarily self-researched assumptions.\n\nThereâs a total of 25 to 30 individual pages, and SpaceX may have added some more since my flight. With any aircraft or spacecraft, you always iterate because it makes sense and itâs easy and will help the crew. â Doug Hurley\n\nOnce we get through the initial task of recreating what we know exists, we can explore conceptual additions and enhancements. (I spent more time than Iâd like to admit watching every launch broadcast and documentary I could find, looking for any new possible screen grabs I hadnât yet seen.)\n\nVarious screengrabs from public launch broadcasts and documentaries\n\nFirst, we need to break the project down into a series of smaller tasks and solve them individually, approaching each task as a âminimum marketable featureâ that can be later expanded. Although we have a lot to build off, we still have a complex issue needing elegant and straightforward solutions.\n\nBefore we can do that, though, we need to know what the project IS. Since we donât have access to the rockets, BOM, or internal proprietary information, weâre going to need to come up with our own âtarget device stack.â\n\nTarget Device & Software Stack\n\nWhat is publicly known regarding specific hardware used is few and far between. A lot of this will be hypothetical & based on off-the-shelf hardware to make it more realistic for me to understand, build, deploy and debug.\n\nSpaceX Crew Dragon Cockpit Training Simulator; Notice the server rack of equipment to the left required to run the software stack.\n\nFor this project, Iâll be recreating the cockpit UI so that it can interact with simulated rocket functions. A gross oversimplification of the complexities that would be required in a real-world environment. I.e., this will NOT be operating any vehicle and only used for proof-of-concept of UI interacting with theoretical systems/configuration used. It will more-or-less be a simplified recreation of the cockpit simulator pictured above.\n\nTheoretical Backbone and Flightstring Communication Diagram\n\nIâve code-named this stack âMUTANTâ (Multiarchitecture UDP-Transport Aided Network Technology). The MUTANT system will consist of 5 main components: Flight Computer, Microcontrollers, Touch Interface, Physical Backup Interface, AFSS (Autonomous Flight Safety System), and network backbone. Also included into my rack but not detailed in this article is a dedicated build server (GIT repo, CI/CD pipeline, and QA test server), NTP server (for time synchronization), Android touch screen (used to trigger simulated events and monitor system status), and Mikrotik wireless access point simulating future onboard Starlink Wi-Fi integration (isolated from any backbone traffic).\n\nFlight Computer\n\nFault-tolerant, triple redundancy âData Processing layer.â Consider this both the memory and brain of the vehicle; all sensor data is processed, analyzed and outputs triggered based on logical conditions. The Flight Computer is the âtruthâ state of the vehicle. If the âtruthâ in this case being incorrect could result in the injury or loss of human life, triplicated redundancy is a minimal requirement.\n\nTouch Interface Control\n\nStateless UI touch interface sends commands to flight computer(s) and monitors vehicle systems. Primary control interface for the vehicle and the main focus for this project.\n\nPhysical Interface Control\n\nMission/safety-critical physical interface (buttons) to send commands to flight computer(s)/AFSS; Used as a redundant backup to Touch Interface Control for critical operations (commands such as deorbiting, abort, etc.).\n\nMicrocontroller\n\nâPLCâ used to control outputs for onboard systems (thrusters, flight control surfaces, etc.), read sensor data inputs (inertial measurement unit, gyro, temperature, pressure, etc.), and stream camera feeds (RTSP). Voter-judge system based on triple redundancy flight strings.\n\nData Bus\n\nInner-system communication layer; connecting all hardware components over a singular data bus backbone. Optimized and performance-tuned network stack for optimal operation. If you consider the Flight Computer as the âbrainâ of the system, then the data bus would be regarded as the ânervous system.â\n\nLo-Fi Wire-Framing\n\nFor me, rapid wire-framing is crucial, although we already have the âfinalâ UI to base things on. It allows me to get a âbig-pictureâ idea before architecture and development begin and quickly plan screens/components lacking public imagery. There is no need to get too granular here initially; starting this early in the process is to assist in creating a plan.\n\nExample of two main view templates; one with bottom sub-nav, and the other with a sidebar sub-nav w/ attached sub-view.\n\nFoundational Architecture\n\nDoing my best to closely match my design model and technical approach as closely as I could to what I assume existing systems to be; still resulted in a VERY oversimplified representation of said real-world systems. I hope my assumptions and approach arenât too flawed; this has been much information to absorb and make rapid development decisions.\n\nFair warning, this section may dive a bit deeper into technical details than some readers are interested in; feel free to skip to the next section.\n\nAll you really need to know for the moment is that the universe is a lot more complicated than you might think, even if you start from a position of thinking itâs pretty damn complicated in the first place.\n\nFlight Computer\n\nThis technically could be approached in many different ways; essentially need a âmemory cacheâ and an âevent busâ paired with some rudimentary data processing scripts. After exploring a few options, I ultimately chose to go with Redis paired with a custom UDP proxy.\n\nIâm running docker on each flight computer to utilize container isolation and CPU affinity; Running 2 Redis containers pinned to CPUs (Core A = CPU 2, Core B = CPU 3) (Root OS isolated to only using CPUs 0 & 1). Each Core container also contains a UDP to Redis proxy and some data processing scripts using Spring State Machine that calculates values, applies filters, and sets back as new stored key-values.\n\n*Real-time kernel patch applied to reduce latency initially but was later removed due to USB interrupt timing issues with piâs USB-based onboard ethernet controller. I could overcome this with different SBC architecture, but not critical enough for this projectâs scope.\n\nThe third container for our Flight Core broker/comparison program: A Redis-CLI client polling specific keys (calculated outputs) from core A & B and comparing results on a 10hz loop; If results match, the UDP datagram posts to Flight String with resulting data; If results do not return the same value, then the Flight Computer is rebooted, and no data posts other than UDP datagram announcing failed data/reboot of Computer; If results timeout, count as failed data and reboot. This program also acts as our watchdog and heartbeat source.\n\nNote: I donât think this is the official approach taken, but it suits my needs for a quick delivery timeline with a stack thatâs familiar to me.\n\nTouch Interface Control\n\nComing from a background of many JS frameworks/libraries (jQuery, Backbone, AngularJS, Meteor, React, Angular), I could have taken many options with implementation. After digging around what I could find about available information, I determined that I would need something clean, fast to develop, and easy to understand.\n\nUltimately I chose to go with a combination of Vue.js, THREE.js, LIT Element, WebAssembly, and Electron; Running on 3 NVIDIA Jetson Nanos with custom buildRoot OS.\n\nPhysical Backup Control\n\nInitially, I planned to build a custom PCB with membrane buttons to mimic the physical control interface onboard. However, due to time constraints and the main focus on the UI, I simplify things via a StreamDeck over a custom API.\n\nMicrocontroller\n\nLightweight microcontroller running rudimentary flight string comparison algorithm to avoid Byzantine Generalâs problem at edge node device, paired with triplicated flight strings to handle situations where the computers do not agree. Once the correct flight string is determined, the microcontroller triggers outputs to drive external hardware interfaces (actuator arms, motorized valves, etc.)\n\nByzantine Generalâs Problem\n\nData Bus\n\nSince not a whole lot is publicly known in regards to the communications protocols used onboard falcon/dragon, Iâve had to make some assumptions based on my research. Fortunately MIL-STD-1553 appears only for remote command/control from the ISS and payload integration (maybe a fun addition at a later date, but not a challenge Iâm interested in focusing on right now). Ground systems such as the fuel refinery may operate on industrial control standards like Profinet or Modbus , though neither seems adequate for a vehicle control system. CANBUS would be an exciting option but could slow down software development due to hardware components or emulation requirements.\n\nUltimately Iâve concluded that a standard ethernet backbone is used in a star-topology without ARP, using static IP mapping tables, UDP datagrams for real-time data, and TCP connections for some non-time-critical systems. UDP is excellent for real-time sensor data but can introduce the potential of out-of-order packets. We could explore implementing QUIC for the transport layer with stream multiplexing, though Iâm making the call to keep this out of the scope of the project.\n\nThe UDP datagram will not exceed 935 bytes to fit into a single mbufs, avoiding the use of 4096-byte clusters. Since even 1 byte over 935 would result in clusters, wasting a significant amount of memory per write . Datagrams are set to a fixed size using byteArrays, allowing for more consistent packet throughput. This also adds a thin layer of âpseudo securityâ by obfuscation, being slightly more challenging to intercept or inject false data (Also to debug, as I later found outâ¦ sigh).\n\nWork like hell. I mean you just have to put in 80 to 100 hour weeks every week. This improves the odds of success. If other people are putting in 40 hour workweeks and youâre putting in 100 hour workweeks, then even if youâre doing the same thing, you know that you will achieve in four months what it takes them a year to achieve. â Elon Musk\n\nUI Components/Library\n\nI made a hard rule to create UI components using pure HTML, CSS/SCSS, SVG graphics, or THREE.js objects. No CSS libraries were used whatsoever during this creation (though definitely times where I had wished that I had at least used an existing grid layoutâ¦ câest la vie). All icons, 3D objects, and map textures provided from 3rd parties and cited below.\n\nJS Frameworks\n\nAs mentioned earlier, I chose to go with a combination of: Vue.js, THREE.js, LIT Element, WebAssembly, and Electron.\n\nVue.js\n\nElements/Views/Routing. Mainly because I havent worked with Vue a whole lot, and it seemed like a great opportunity to learn some more. (PS. Iâm now a big fan of Vue. Vue is just what Iâve always wanted from a JS framework: fairly non-opinionated, easy data binding, organized separation of components/views, and best of all, was easy enough for me to understand and work with within a day. I donât know why I didnât give Vue more of a chance sooner).\n\nTHREE.js\n\nFor 3D object/environment rendering. Another new one for me that Iâve been meaning to get more time hands-on with. Working with THREE was initially far more intimidating than I assumed, though I could pull off what I wanted to achieve after taking some quick math refreshers. Several late nights passed attempting a self-guided crash course in orbital mechanics to calculate orbit path based on the latest known velocity vectors, in order to display orbit paths on 3D environment maps. I have more and more respect for current and past SpaceX-ers with every minute I spend on this stuff.\n\nLIT Element\n\nFor separation of reusable elements. Another one Iâve never used before but noticed it mentioned in posted job listings. Iâll never turn down an opportunity to learn. Because Iâm using Vue, you may wonder why Iâm not just using Vue components for this. However, I went this route since I want these UI components to be usable in any framework/codebase (essential when working with multiple teams across multiple architectures and languages).\n\nWebAssembly\n\nHigh-precision floating-point calculations are handled in c++ wrapped in WebAssembly to help overcome the pitfalls of JavaScript calculations (0.2 + 0.3 = 0.500000000000000004 â¦ð©). This part didnât get used much yet, but I wanted to demonstrate a case where WebAssembly can be helpful.\n\nElectron\n\nUsed for our rendering/webview to display in full-screen kiosk mode without using a browser. Also, an excellent way to package up all assets for a self-contained offline application.\n\nUI Components & Screens\n\nEach of the following comprises of many subcomponents; each configured with exposed parameters, containing no static data, items, or image paths.\n\nPhew! Quick sigh of relief before I realize just how much work is still needed to pull this all together. The further I get, the more I realize how much I donât know, and the more I question what exactly I signed myself up for ð . Fear not, though; Iâm almost there. Itâs time to take this to the finish line finally.\n\nTesting & Refinement\n\nLuckily Iâm not responsible for any lives with this project; however, testing should always be taken with the utmost seriousness and respect, ESPECIALLY when dealing with rockets. Test, test, test again, and test some more is always a good mantra to stick with during development.\n\nDonât delude yourself into thinking somethingâs working when itâs not, or youâre gonna get fixated on a bad solution. â Elon Musk\n\nTo begin, one of the best ways to catch and prevent simple errors early on is to incorporate TypeScript from the start, however only can prevent so much. Automated tests here still are very much our friend being only a 1-man team, but also a good focus on manual tests can be just as important. Not wanting to skip any steps, I set up a suite of basic rudimentary tests that ensure our data provided is always whatâs displayed.\n\nA QA engineer walks into a bar…\n\nItâs always a bit of a conflict having an engineer QA their work; cognitive bias can significantly affect our perception and perspective, so to overcome this, itâs crucial to try to prove as many assumptions here as false. This process helped me cut back on unnecessary weight, realize incorrect assumptions, and discover more efficient ways to approach the same problems resulting in a fair amount of on-the-spot code refactoring.\n\nAlthough itâs essential not to get too caught up in the details initially to maintain a quick pace during development, ultimately, the day must come where UI elements need to be tightened up, color-matched, etc.\n\nI think itâs very important to have a feedback loop, where youâre constantly thinking about what youâve done and how you could be doing it better. â Elon Musk\n\nA lot of UI refinement was focused on figuring out the correct color swatches to get things looking as close to correct as possible. Trickier than it may seem, considering that available imageries are photos taken in oddly lit environments and all showing as slightly different colors; plus, Iâm sure over time that the colors have changed internally as well.\n\nThough limited by the project scope and a locked-in design, UX refinement is still necessary. Primarily handling non-nominal states for components, assuming what unknown options there may be hidden inside menus, ensuring touch areas are all large enough for touch with gloves, and finally accounting for any weird interaction while interfacing with 3D environments.\n\nHardware Build\n\nA bit of scope creep came in here, but once I learned about the fundamentals of Dragonâs systems, I was far too fascinated not to attempt my portable home-lab-style recreation. It was arguably the least important use of my time for this project, but it happened to be the most fun. I believe itâs essential to find ways to make every project fun as long as it doesnât negatively impact timelines. We have to enjoy and be passionate about our work to produce something great. This build was a great distraction for me while hitting roadblocks in code.\n\nWhen something is important enough, you do it even if the odds are not in your favor. â Elon Musk\n\nConsidering all prior research and determining a conceptual hardware stack, I should have all the information needed to create a physical representation of said stack. For the sake of time, most inter-connecting system components are fundamental and cover the minimum requirements to represent the functionality of a complete system.\n\nFrom L-R: Flight Computers, AFSS, Build Server, Android interface, microcontrollers, touch interface computers.\n\nBOM\n\nQty Device MSRP Affiliate Link 4 Raspberry Pi 3B+ $35 Amazon 1 LattePanda 2G/32G $115 Amazon 2 Raspberry Pi Zero $15 Amazon 3 Jetson Nano B01 $199 Amazon 3 1080p 21â Touchscreen $399 Amazon 1 Elgato Stream Deck $149 Amazon 1 Mikrotik HaP Lite $57 Amazon 1 Generic Ethernet Switch $55 Amazon\n\nTop-Down Rack View\n\nFinal Thoughts\n\nBefore taking this project, I had no idea how much I would learn about complex systems, such as GNC, life support, inertial navigation, data bus protocols, etc. Due to limited available screengrabs, I needed to understand how these subsystems worked to guess better what data may be displayed on certain pages. Soaking this all up like a sponge has been a really enjoyable process to discover and understand the complexities of such systems.\n\nI tried my best to keep this article short and sweet, but this is a lot of information to cover and requires a thorough explanation to be conveyed appropriately. If enough interested readers, I may put out a continuation piece; otherwise, Iâd be happy to discuss the details further in the comments.\n\nWhatâs next?\n\nWell, my mind is already thinking about how this all can apply to Starship and evolve into a much larger network of stations and user terminals. Iâm feeling a concept project is next up, ð follow me to stay tuned.\n\nPeople should pursue what theyâre passionate about. That will make them happier than pretty much anything else. â Elon Musk\n\n*Disclaimer: All information used to direct/influence this project is all publicly accessible and freely available online. No knowledge theft, intellectual property, or internal information gained during interview process was knowingly used in any way for this project. All code is original and produced by Dillon Baird without outside assistance (unless otherwise explicitly stated). The interface design has been recreated by the many shared images online of existing Dragon interfaces, as well as ISS docking simulator; copyright and intellectual property are that of SpaceX. Technical approach was guided loosely based on knowledge shared during Reddit AMA, shared in articles, as well as shared in job listing requirements. Hardware assumptions were based on publicly accessible information, public interviews, NASA certifications, and FCC filings. No ITAR violations are intended by the content of this article.*\n\nSend-Off\n\nHopefully, Iâve made it clear by now that working for SpaceX would be an absolute dream come true for me. If you or you know anyone working at SpaceX and feel that Iâve represented my technical abilities clearly and could be a positive/impactful teammate, please donât hesitate to share this article or my contact information. I canât imagine a better outlet to further pursue my passions for technology, exploration, and the future of humanity.\n\nDillon Baird on LinkedIn\n\nSo long and thanks for all the fish.\n\nCrew Dragon, Ready for launch.\n\nSources/References\n\n(In no particular order)\n\nBuilding the software that helps build SpaceX\n\nWhere is the technology of SpaceX built by Musk?\n\nSpace Exploration Technologies Corporation March-April 2004 Update\n\nWhat Hardware/Software Does SpaceX Use To Power Its Rockets?\n\nLearning How to Build a Spaceship in 2020 From SpaceX\n\nELC: SpaceX lessons learned\n\nLinuxCon: Dragons and penguins in space\n\nDisplaying HTML Interfaces And Managing Network Nodesâ¦ In Space!\n\nSoftware Engineering Within SpaceX\n\nHow SpaceX does software for 9 vehicles with only 50 developersâââand govât requiring 50x the staff\n\nHow SpaceX develops software\n\nBasics of Space Flight\n\nEarth-centered, Earth-fixed coordinate system\n\nFlickr: SpaceX Official Photos\n\nWe are SpaceX Software EngineersâââWe Launch Rockets into SpaceâââAMA\n\nWe are the SpaceX software team, ask us anything!\n\nDevelopment of the Crew Dragon ECLSS\n\nReview of Modern Spacecraft Thermal Control Technologies\n\nAutonomous Precision Landing of Space Rockets\n\nTechniques for Fault Detection and Visualization of Telemetry Dependence Relationships for Root Cause Fault Analysis in Complex Systems\n\nChallenges Using the Linux Network Stack for Real-Time Communication\n\nActive Thermal Control System (ATCS) Overview\n\nSpaceXâs Dragon: Americaâs Next Generation Spacecraft\n\nSpaceX: Making Commercial Spaceflight a Reality\n\nRecommended Content\n\n(Also, in no particular order)\n\nCountdown: Inspiration4 Mission to Space\n\nFrom training to launch to landing, this all-access docuseries rides along with the Inspiration4 crew on the firstâ¦\n\nwww.netflix.com\n\nNASA & SpaceX: Journey to the Future Special\n\nIn the coming year, NASA will be sending astronauts on a new launch vehicle, the first new American spacecraft sinceâ¦\n\nwww.amazon.com\n\nSpace Titans: Musk, Bezos, Branson - Season 1\n\nA new age of space exploration has begun as three of the world's most successful entrepreneurs risk billions of dollarsâ¦\n\nwww.amazon.com\n\nEveryday Astronaut\n\nEveryday Astronaut - Bringing space down to Earth for everyday people! Find out everything you need to know aboutâ¦\n\nwww.everydayastronaut.com\n\nScott Manley | Patreon\n\nHullo!! Scott Manley here. Some people call me an 'Internet Rocket Scientist'. I'm not a rocket scientist, but I playâ¦\n\nwww.patreon.com"
    }
}