{
    "id": "dbpedia_6121_3",
    "rank": 11,
    "data": {
        "url": "https://www.copetti.org/writings/consoles/master-system/",
        "read_more_link": "",
        "language": "en",
        "title": "Sega Master System Architecture",
        "top_image": "https://www.copetti.org/images/consoles/covers_top/master-system_hu4e6f6a449de6f9388c062199f89bd578_355821_affc239a0aea8c3a7658e2cf6cb8d7ae.0fb95663dff116cff651275bfb713675.jpg",
        "meta_img": "https://www.copetti.org/images/consoles/covers_top/master-system_hu4e6f6a449de6f9388c062199f89bd578_355821_affc239a0aea8c3a7658e2cf6cb8d7ae.0fb95663dff116cff651275bfb713675.jpg",
        "images": [
            "https://www.copetti.org/images/consoles/_covers/en/master-system_hud17917bd1356de8af7c5016feb746ae8_443748_330x0_resize_q90_box.jpg",
            "https://www.copetti.org/images/consoles/mastersystem/international.8865c9c84467b8c90fdc51dc4c7f77c6e8e3b940102462ad5d8377d56675ee19.png",
            "https://www.copetti.org/images/consoles/mastersystem/motherboard.0c5d8b992e3aee5ff391b19940d4aab493cabcdb731273596436b20e0c967b35.png",
            "https://www.copetti.org/images/consoles/mastersystem/motherboard_marked.2c0b9daafc9daf53ab0deb8806834161c8162b2b24358200adc2f986cadee738.png",
            "https://www.copetti.org/images/consoles/mastersystem/diagram.a429943e86186191b44eb913fc22fc39a6692200776d0e3daec101c18e42e487.png",
            "https://www.copetti.org/images/consoles/mastersystem/addressing.e186afc9821090e7011a73663fff377720381c6427d70dfc0cdfe0c03921953e.png",
            "https://www.copetti.org/images/consoles/mastersystem/vdp.5af16e6068d53efc1b1aad1a918856a562b8db4378330bce9886739c059edfd7.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/tiles.d6335b4cfa8c1bbda1f6a6b7befb65432c1826fa8be0930c05d3e6b1359ed06c.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/tile.fee8bf70fe8b2b1a2f5b3d18b06e79d1bbd3d82d7267a400df9cd6d7d39c8188.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/tilemap.ac96f73c98945f9e81c3913f81837a7a20e7d8f1baef100de49e8578f01a159c.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/tilemap_marked.b5147602d1afa2c8c74a689f093e905ff08563e41d7d0ed56781d71b1a0654d9.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/sprites.707537651fd6e5ce0ebcca7c4192748e4389797ebbcff4c1ddb4939cb8271e44.png",
            "https://www.copetti.org/images/consoles/mastersystem/sonic/result.f37a1b0bb0f463acd33bdd04cc53b65c0504e26615bbe9a20f29533217601437.png",
            "https://www.copetti.org/images/consoles/mastersystem/glasses.4a3688af99e60dc606868cbff80d9543c5b20682b07e20b207b2ff0bbf855a6b.png",
            "https://www.copetti.org/images/consoles/mastersystem/decay.9631862f2073dbf0701192264639eecb05218cb4ca0ba917c99d7258de66a20b.jpg",
            "https://www.copetti.org/images/consoles/mastersystem/top.06ff7837c7e15dd7222357bacbdb24517b4c63c7316d97cda78289518e6279cd.png",
            "https://www.copetti.org/images/paypal_donate.png",
            "https://www.copetti.org/images/patreon.png",
            "https://www.copetti.org/images/consoles/ebooks_banner.0d180c0136e4c9345bc0ab4f7a0224849a292326d2679d610ea945054383a996.jpg",
            "https://www.copetti.org/favicon/favicon.png"
        ],
        "movies": [
            "https://www.copetti.org/videos/consoles/mastersystem/pulse.9d779d8f646384c8ac6651e7cd5ac675d0f9a16336c7a9bf392915247f316894.mp4",
            "https://www.copetti.org/videos/consoles/mastersystem/noise.3f6a7b64c3e239ca99798381c6d7dcb037cfdeee28b75e5ff51a21a326d33746.mp4",
            "https://www.copetti.org/videos/consoles/mastersystem/pulse_complete.83c330a19db5a823829ec5ed2d121c997650d70d74457977b8cb3b3453f51a97.mp4",
            "https://www.copetti.org/videos/consoles/mastersystem/ball.fa17f4ca6e8268250b5b7c3062683db678b80a4e7ec63effc273d04eae1d852f.mp4",
            "https://www.copetti.org/videos/consoles/mastersystem/bios/usa.f347ec7d55c124fa46879b0905dd16040d099f0f60653d3f54736fb4adc29ca6.mp4",
            "https://www.copetti.org/videos/consoles/mastersystem/bios/japanese.246cea96b6145d6bd360047cf2ca77a83b4fcef4dc260bcdd0794e83b7923361.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Rodrigo Copetti"
        ],
        "publish_date": "2020-10-12T00:00:00",
        "summary": "",
        "meta_description": "An in-depth analysis that explains how this console works internally",
        "meta_lang": "en",
        "meta_favicon": "/favicons/apple-touch-icon.png",
        "meta_site_name": "The Copetti site",
        "canonical_link": "https://www.copetti.org/writings/consoles/master-system/",
        "text": "Supporting imagery\n\nModel\n\nMotherboard\n\nDiagram\n\nA quick introduction\n\nThe Master System comes from a long line of succession. What started as a collection of off-the-shelf components, has now gained a new identity thanks to Sega’s engineering.\n\nModels and variants\n\nI was a bit confused at first while reading about the different models that Sega ended up shipping, so here is a summary of the main models discussed to avoid further confusion:\n\nSega Mark III: The first console featuring this architecture, only released in Japan.\n\nSega Master System (Europe and America): A rebranded Mark III with a new case, a BIOS ROM chip and a different cartridge slot.\n\nSega Master System (Japan): An European/American Master system with the Mark III’s cartridge slot, a new FM chip and a jack port for ‘3D glasses’. However, it lacks the RESET button.\n\nFrom now on I’ll use the term ‘Master System’ or ‘SMS’ to refer to all of these, except when talking about exclusive features from a particular model.\n\nCPU\n\nSega decided on a fully-fledged Zilog Z80 CPU running at ~3.58 MHz. A popular choice by other machines like the ZX Spectrum and the Amstrad CPC.\n\nThe Z80 CPU has an interesting background, as it was authored by no other than the creators of the Intel 8080 (Federico Faggin and Masatoshi Shima), who then became disenchanted with Intel’s direction and decided to start their own silicon company - Zilog - in 1974. Their debuting product can be thought of as the unofficial successor of the Intel 8080, now featuring:\n\nThe Z80 ISA: An instruction set compatible with the Intel 8080 but expanded with lots more instructions. It handles 8-bit words.\n\n8-bit data bus, ideal for moving 8-bit data around. Larger values will consume extra CPU cycles.\n\n14 8-bit general-purpose registers [1]: This is quite a lot, considering the Intel 8080 features half and the MOS 6502 only three (X, Y and A). However, the Z80’s register file exhibits some caveats (or advantages, depending on how you see it):\n\nOnly seven registers are accessible at a time, the other seven are called ‘Alternative Registers’ and must be swapped with the first set to be able to access them. This correlates with the principle of bank switching. Also, the Z80 provides specialised instructions like EX and EXX to transfer the contents between each set.\n\nWithin each set, six 8-bit registers may also be paired together to provide up to three 16-bit registers, allowing the manipulation of larger values.\n\n16-bit address bus, the consequences are explained in the next section.\n\n4-bit ALU: This may be a bit shocking, but it just means that operations done to 8-bit values take twice the cycles to compute.\n\nThe motherboard picture at the start of the article shows an NEC D780C-1 CPU, that’s just SEGA second-sourcing the chip to different manufacturers, other revisions even included the chip manufactured by Zilog. But for this article, it doesn’t matter who fabricated the CPU, as the internal features remain the same.\n\nRelative comparison\n\nNotice how the 6502 CPU (featured in the NES) runs at a mere ~2 MHz. That’s around half the speed of the Master System’s chip. Combined with the Z80’s larger register file, one would think the Master System should outperform the NES without doubt.\n\nConversely, if we dig deeper, you’ll see that the 6502 houses a larger (8-bit) ALU. Thus, arithmetical operations that may only take two cycles in the 6502, will consume four in the case of the Z80. At the end of the day, this tells you that relative qualities like CPU clock speed or register file size, when analysed in isolation, may be deceiving. Both Z80 and 6502 excel and struggle at different tasks, it all comes down to the skills of the programmer.\n\nMemory available\n\nAs said before, the Z80 has a 16-bit address bus, so the CPU can find up to 64 KB worth of memory. Now, in the Master System’s memory map, you’ll find 8 KB of RAM for general-purpose use [2], this is mirrored in another 8 KB block. Finally, up to 48 KB of game ROM are mapped as well.\n\nAccessing the rest of the components\n\nAs you can read from the previous paragraph, only main RAM and some cartridge ROM are found in the address space, so how can the program access other components? Well, unlike Nintendo’s Famicom/NES, not all the hardware of the Master System is mapped using memory locations. Instead, some peripherals are found in the I/O space.\n\nThis is because the Z80 family contains an interesting feature called I/O ports which enables the CPU to communicate with other hardware without running out of memory addresses. For this, there’s a separate address space for ‘I/O devices’ called ports and both share the same data and address bus. The difference, however, is that ports are read and written using IN and OUT instructions, respectively - as opposed to the traditional load/store instruction (LD).\n\nWhen an IN or OUT instruction is executed, the Z80 sets up the address lines pointing to the peripheral (which could be, for instance, a keyboard), flags its IORQ pin indicating that an I/O request has been initiated and finally flags the RD pin or the WR pin whether it’s an IN or OUT instruction, respectively. The addressed peripheral must manually check for the address bus and the I/O pins and perform the required operation. In the case of an IN instruction, the CPU will store the received value on a pre-defined register.\n\nThe way SEGA interconnected the CPU with the rest of the components enables not only to access values but also to show/hide certain components from appearing in the memory map.\n\nCuriously enough, the Game Boy had a Z80 ‘variant’ that completely omitted the I/O ports. Thus, it had to fit everything in the memory map.\n\nBackwards compatibility\n\nThe architecture of this console is very similar to its predecessor, the Sega SG-1000, so the Master System managed to gain backwards compatibility with the SG-1000. Although, this only applies to the Japanese variant since the others contain a different cartridge slot.\n\nGraphics\n\nThe drawings on the screen are produced by a proprietary chip called Video Display Processor or ‘VDP’. Internally, it has the same design as the Texas instrument TMS9918 (used in the SG-1000) [3] though enhanced with more features which we will discuss in the following sections.\n\nOrganising the content\n\nNext to the VDP is connected 16 KB of VRAM which only the VDP can access using a 16-bit data bus (Sega modified the original design to access two memory chips with 8-bit buses at the same time [4]). If you look at the motherboard picture again, you’ll notice that both RAM and VRAM chips are roughly the same, except that VRAM uses the chip model ending in ‘20’ which has lower latency [5].\n\nIn the case of the Master System, VRAM houses everything the VDP will require for rendering (except Colour RAM). The CPU fills VRAM by writing to specific VDP registers, which will in turn forward the values to VRAM. Since the VDP is accessed using I/O ports, the CPU must use IN and OUT instructions.\n\nConstructing the frame\n\nThe VDP renders frames with a resolution of up to 256x192 pixels, further revisions added support for 256x224 px and 256x240 px, however, to maintain compatibility with all models, developers held on to the standard resolution. This chip has the same modus operandi as Nintendo’s PPU, in other words, graphics are rendered on the spot.\n\nOn the other side, the VDP has four different modes of operation which will alter the characteristics of the frame (colour depth and resolution):\n\nMode 0 to III: Inherited from the TMS9918 found on the SG-1000. Included for backwards compatibility, although any SMS game can use them.\n\nMode IV: Native mode of the Master System, which enables access to all the state-of-the-art features of the VDP. For the analysis, we’ll focus on this one!\n\nNow let’s see how a frame is drawn step by step, for this, I’ll borrow Sonic The Hedgehog’s assets. Also, to make explanations easier, I’m going to focus on the standard memory layout that Sega suggests for organising the graphics content (just remember that the VDP is very flexible with this, so games are allowed to optimise it).\n\nSecrets and limitation\n\nAt first glance, the VDP may seem like another chip with minimal functionality that we now take for granted. Although, it happened to divert a lot of attention from Nintendo’s offering at that time. So, why would that be?\n\nVideo Output\n\nThe video-out connector of this system is incredibly handy. It exposes composite and RGB signals, which can be imagined as the two ‘extremes’ of video quality.\n\nOn the downside, it doesn’t carry ‘composite sync’, so making use of the RGB will require capturing the sync signal from composite, and its quality isn’t optimal.\n\nAudio\n\nThe audio capabilities of this console are pretty much aligned with the rest of the 80s equipment. Inside the VDP chip, we find a slightly-customised version of the Texas Instruments SN76489 [10], which is a Programmable Sound Generator or ‘PSG’. This is the same type used for the NES/Famicom, albeit having different functions.\n\nFunctionality\n\nA PSG can only synthesise a limited set of waveforms, each channel allocates a single waveform. I’ve previously introduced some PSGs on the NES article and the Game Boy if you want to read more about this type of sound synthesis.\n\nWith the SMS, the PSG is programmed by altering its set of external registers using the aforementioned I/O ports.\n\nNow let’s take a look at each type of waveform the SN76489 can generate:\n\nSecrets and limitations\n\nJust like the VDP, the PSG is a no-brainer, but it does hide some interesting functionality:\n\nI/O\n\nLike the other systems from its generation, the CPU is mostly in charge of handling I/O. In this case, the Z80 processor is unique for having that special I/O addressing, but still, there will be CPU cycles spent in moving bits around components.\n\nOn the other side, the SMS uses a dedicated I/O controller chip to not only interface the joypads, but also enable and disable parts of the system, which will alter the address map. Furthermore, this controller is essential for supporting the FM expansion, since the FM module exposes ports that conflict with the rest of the system (that is, without the intervention of the I/O chip).\n\nAvailable interfaces\n\nApart from the two controller ports, the system contains one proprietary cartridge slot, one ‘Sega Card’ slot and one expansion slot reserved for ‘future accessories’. The latter was never used, except for the FM expansion in the Mark III. Even so, the SMS and Mark III had a different expansion port design [12].\n\nTop interruptors\n\nAnother speciality about this console is that includes two buttons on the top of its case, PAUSE and RESET, you can guess what they do!\n\nOperating System\n\nThere’s a small 8 KB BIOS ROM fitted on the motherboard that gets executed whenever the console is turned on. The program itself doesn’t fit into the category of an ‘Operating System’, it’s more of a Boot Manager.\n\nMedium selector\n\nThe main goal of the BIOS is to bootstrap a valid game (from either game slot) with the following priority: The Sega Card, the cartridge and the expansion module.\n\nThe boot process works as follows:\n\nThe console is switched on.\n\nThe BIOS copies part of its code to main RAM.\n\nThis is a crucial step since the program will start manipulating I/O ports, which will at some point disable access to the ROM!\n\nShow splash screen (Only in USA/Europe).\n\nCheck each slot for a valid game.\n\nThis is done by talking to the I/O controller chip to activate the required slot. Then, the boot program copies the game header (16 bytes) from each slot to check if the game content is valid (thus, properly inserted). The header must have TMR SEGA encoded.\n\nPerform region check.\n\nRedirect execution to the game.\n\nSurprise screen\n\nIf any of the checks fail, the console will loop indefinitely while showing a screen that prompts the user to insert a valid game:\n\nAs you can see, there’re some creative differences between regions. The first time I heard the Japanese one I thought it came from Electric Light Orchestra (the band), but it’s actually from Space Harrier (the game). By the way, the perspective effect on the floor is accomplished by altering the colour palettes.\n\nMore regional differences\n\nBecause the Japanese variant was backwards compatible with the SG-1000, the header check is replaced with an ‘integrity check’ that instead reads data from the first 256 bytes multiple times to detect if it’s garbage.\n\nFurthermore, the Mark III doesn’t have a BIOS, so the slots are activated with hardware switches and the cartridge is the medium with the most priority.\n\nUpdatability and later BIOS chips\n\nThe BIOS ROM, by its nature, is not updatable. Although, as new console revisions entered the market, it was discovered that Sega also updated the BIOS program.\n\nLater BIOSes even embedded a whole game! As a consequence, the ROM chip got bigger and was accompanied by a dedicated mapper.\n\nGames\n\nTo make a long story short, games are written in plain Z80 assembly, that’s it. If you’ve been reading articles on later consoles, there are no compilers or assisting software here (apart from the assembler).\n\nMedium\n\nThe Master Systems provides two different mediums for distributing games:\n\nThe Cartridge: Most common one, up to 48 KB of memory can be addressed. However, by including a mapper, the system can access a wider space and/or handle other chips like RAM which can be used to store saves.\n\nSega provided official mappers for developers called ‘Paging Chips’, the most powerful one maps up to 512 KB of memory!\n\nThe Sega Card: Has a very thin case and it’s cheaper to manufacture. Up to 32 KB of memory can be addressed. Since SEGA never designed a mapper for this medium, the largest card found in the market contained a 32 KB ROM.\n\nAnti-Piracy and Region locking\n\nUnlike Nintendo, Sega didn’t employ aggressive methods to control the distribution of their games, they did however prevent American and European systems from running Japanese games by altering the shape of the cartridge slot and using a different ROM header check.\n\nFurthermore, American and European systems had to include the aforementioned TMR SEGA code on their header. So I supposed this enabled them to prevent unauthorised distribution by making use of trademark laws.\n\nThat’s all folks\n\nHaving previously written the Nintendo DS article really puts into perspective how complicated tech has become. The Master System is very straightforward in that sense, even after some ‘technical nitpicking’ that I may have said here and there.\n\nAnyway, I hope this article helped you get an overall impression of the state of technology of the early-to-mid-80s. I also want to thank the smspower.org community and the /r/Emulation discord for reading the first draft and pointing out lots of mistakes and suggestions.\n\nUntil next time!\n\nRodrigo\n\nThis article has been dedicated to the memory of Jacinto ‘Pocho’ Fornasier."
    }
}