{
    "id": "dbpedia_5174_3",
    "rank": 55,
    "data": {
        "url": "https://design-system.service.gov.uk/patterns/names/",
        "read_more_link": "",
        "language": "en",
        "title": "Names",
        "top_image": "https://design-system.service.gov.uk/assets/images/govuk-opengraph-image.png",
        "meta_img": "https://design-system.service.gov.uk/assets/images/govuk-opengraph-image.png",
        "images": [],
        "movies": [
            "/patterns/names/default/index.html",
            "/patterns/names/default/index.html",
            "/patterns/names/error/index.html"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Help users correctly enter their name",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://design-system.service.gov.uk/patterns/names/",
        "text": "When to use this pattern\n\nYou should follow this pattern whenever you need to ask for a user’s name as part of your service.\n\nOnly ask for people’s names if you need that information to deliver a service.\n\nHow it works\n\nMake it as easy as possible for a user to enter their name.\n\nMake sure the fields work for most of your users\n\nFields must be long enough to accommodate the names of your users. You should use population data or data about your existing users to do this.\n\nSupport all the characters users may need to enter, including numbers and symbols.\n\nSingle or multiple name fields\n\nUse single or multiple fields depending on your user’s needs. Not everyone’s name fits the first-name, last-name format. Using multiple name fields mean there’s more risk that a person’s name will not fit the format you’ve chosen and that it is entered incorrectly.\n\nA single name field can accommodate the broadest range of name types, but means you cannot reliably extract parts of a name.\n\nLabelling name fields\n\nLabel single name fields:\n\n‘Full name’\n\nFor multiple name fields, use:\n\n‘First name’\n\n‘Last name’\n\nIf users are from outside the UK, use the labels:\n\n‘Given names’\n\n‘Family name’\n\nMake it clear whether you need someone’s common name, or their name as it’s written on official documents such as a passport or driving licence.\n\nMiddle names\n\nOnly ask for middle names if your service requires them.\n\nUse the label:\n\n’Middle names‘\n\nMake sure middle names are optional, as not everyone has them.\n\nThe label should not include (optional). Users will enter their middle names if they have them and skip the field if they do not.\n\nUse the autocomplete attribute on name fields\n\nUse the autocomplete attribute on the text input component when you’re asking for a user’s name. This lets browsers autofill the information on a user’s behalf if they’ve entered it previously.\n\nIf you are asking for a user’s full name in a single field, set the autocomplete attribute to name.\n\nIf you are asking users to enter their name in multiple fields, set the autocomplete attribute on both fields using:\n\ngiven-name for fields labelled ‘First name’ or ‘Given name’\n\nfamily-name for fields labelled ‘Last name’ or ‘Family name’\n\nIf you are working in production you’ll need to do this to meet WCAG 2.1 Level AA.\n\nYou will not normally need to use the autocomplete attribute in prototypes, as users will not generally be using their own devices.\n\nReusing entered names\n\nYou can make it easier to reuse names through one of these methods:\n\npre-populate name fields with the previously entered name\n\nshow any previously entered names as an option for the user to select\n\nContinue to give users the option to enter a new address.\n\nDo not spellcheck user’s names\n\nSometimes, browsers will spellcheck the information a user enters into a text input. To make sure user’s names will not be spellchecked, set the spellcheck attribute to false as shown in this example.\n\nAvoid asking for a person’s title\n\nAvoid asking users for their title.\n\nIt’s extra work for them and you’re asking them to potentially reveal their gender and marital status, which they may not want to do.\n\nIt’s also hard to predict the range of titles your users will have. If you have to ask for someone’s title, use an optional text input not a select.\n\nRemember to correctly use people’s names in any resulting correspondence.\n\nAllow users to change their name\n\nIf your service stores personal information, you should allow users to update their details, including their name.\n\nAllowing users to change their name helps your service respect their personal identity. It also means they can continue using your service without having to start over.\n\nPeople change their name for many reasons. For example, because of a change in marital status, family situation or gender.\n\nAvoid making it hard for users to change their name. As well as causing them distress, it may make them reluctant to use your service.\n\nError messages\n\nError messages should be styled like this:\n\nMake sure errors follow the guidance in error message and have specific error messages for specific error states.\n\nResearch on this pattern\n\nIf you’ve used this pattern, get in touch to share your user research findings.\n\nYou can also read these articles to learn more about asking for users’ names:"
    }
}