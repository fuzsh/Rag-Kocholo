{
    "id": "dbpedia_4957_2",
    "rank": 52,
    "data": {
        "url": "https://docs.python.org/3/whatsnew/3.8.html",
        "read_more_link": "",
        "language": "en",
        "title": "Whatâs New In Python 3.8",
        "top_image": "https://docs.python.org/3/_static/og-image.png",
        "meta_img": "https://docs.python.org/3/_static/og-image.png",
        "images": [
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Editor, Raymond Hettinger,. This article explains the new features in Python 3.8, compared to 3.7. Python 3.8 was released on October 14, 2019. For full details, see the changelog. Summary â Releas...",
        "meta_lang": "en",
        "meta_favicon": "../_static/py.svg",
        "meta_site_name": "Python documentation",
        "canonical_link": "https://docs.python.org/3/whatsnew/3.8.html",
        "text": "New FeaturesÂ¶\n\nAssignment expressionsÂ¶\n\nThere is new syntax := that assigns values to variables as part of a larger expression. It is affectionately known as âthe walrus operatorâ due to its resemblance to the eyes and tusks of a walrus.\n\nIn this example, the assignment expression helps avoid calling len() twice:\n\nif (n := len(a)) > 10: print(f\"List is too long ({n} elements, expected <= 10)\")\n\nA similar benefit arises during regular expression matching where match objects are needed twice, once to test whether a match occurred and another to extract a subgroup:\n\ndiscount = 0.0 if (mo := re.search(r'(\\d+)% discount', advertisement)): discount = float(mo.group(1)) / 100.0\n\nThe operator is also useful with while-loops that compute a value to test loop termination and then need that same value again in the body of the loop:\n\n# Loop over fixed length blocks while (block := f.read(256)) != '': process(block)\n\nAnother motivating use case arises in list comprehensions where a value computed in a filtering condition is also needed in the expression body:\n\n[clean_name.title() for name in names if (clean_name := normalize('NFC', name)) in allowed_names]\n\nTry to limit use of the walrus operator to clean cases that reduce complexity and improve readability.\n\nSee PEP 572 for a full description.\n\n(Contributed by Emily Morehouse in bpo-35224.)\n\nPositional-only parametersÂ¶\n\nThere is a new function parameter syntax / to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments. This is the same notation shown by help() for C functions annotated with Larry Hastingsâ Argument Clinic tool.\n\nIn the following example, parameters a and b are positional-only, while c or d can be positional or keyword, and e or f are required to be keywords:\n\ndef f(a, b, /, c, d, *, e, f): print(a, b, c, d, e, f)\n\nThe following is a valid call:\n\nf(10, 20, 30, d=40, e=50, f=60)\n\nHowever, these are invalid calls:\n\nf(10, b=20, c=30, d=40, e=50, f=60) # b cannot be a keyword argument f(10, 20, 30, 40, 50, f=60) # e must be a keyword argument\n\nOne use case for this notation is that it allows pure Python functions to fully emulate behaviors of existing C coded functions. For example, the built-in divmod() function does not accept keyword arguments:\n\ndef divmod(a, b, /): \"Emulate the built in divmod() function\" return (a // b, a % b)\n\nAnother use case is to preclude keyword arguments when the parameter name is not helpful. For example, the builtin len() function has the signature len(obj, /). This precludes awkward calls such as:\n\nlen(obj='hello') # The \"obj\" keyword argument impairs readability\n\nA further benefit of marking a parameter as positional-only is that it allows the parameter name to be changed in the future without risk of breaking client code. For example, in the statistics module, the parameter name dist may be changed in the future. This was made possible with the following function specification:\n\ndef quantiles(dist, /, *, n=4, method='exclusive') ...\n\nSince the parameters to the left of / are not exposed as possible keywords, the parameters names remain available for use in **kwargs:\n\n>>> def f(a, b, /, **kwargs): ... print(a, b, kwargs) ... >>> f(10, 20, a=1, b=2, c=3) # a and b are used in two ways 10 20 {'a': 1, 'b': 2, 'c': 3}\n\nThis greatly simplifies the implementation of functions and methods that need to accept arbitrary keyword arguments. For example, here is an excerpt from code in the collections module:\n\nclass Counter(dict): def __init__(self, iterable=None, /, **kwds): # Note \"iterable\" is a possible keyword argument\n\nSee PEP 570 for a full description.\n\n(Contributed by Pablo Galindo in bpo-36540.)\n\nParallel filesystem cache for compiled bytecode filesÂ¶\n\nThe new PYTHONPYCACHEPREFIX setting (also available as -X pycache_prefix) configures the implicit bytecode cache to use a separate parallel filesystem tree, rather than the default __pycache__ subdirectories within each source directory.\n\nThe location of the cache is reported in sys.pycache_prefix (None indicates the default location in __pycache__ subdirectories).\n\n(Contributed by Carl Meyer in bpo-33499.)\n\nDebug build uses the same ABI as release buildÂ¶\n\nPython now uses the same ABI whether itâs built in release or debug mode. On Unix, when Python is built in debug mode, it is now possible to load C extensions built in release mode and C extensions built using the stable ABI.\n\nRelease builds and debug builds are now ABI compatible: defining the Py_DEBUG macro no longer implies the Py_TRACE_REFS macro, which introduces the only ABI incompatibility. The Py_TRACE_REFS macro, which adds the sys.getobjects() function and the PYTHONDUMPREFS environment variable, can be set using the new ./configure --with-trace-refs build option. (Contributed by Victor Stinner in bpo-36465.)\n\nOn Unix, C extensions are no longer linked to libpython except on Android and Cygwin. It is now possible for a statically linked Python to load a C extension built using a shared library Python. (Contributed by Victor Stinner in bpo-21536.)\n\nOn Unix, when Python is built in debug mode, import now also looks for C extensions compiled in release mode and for C extensions compiled with the stable ABI. (Contributed by Victor Stinner in bpo-36722.)\n\nTo embed Python into an application, a new --embed option must be passed to python3-config --libs --embed to get -lpython3.8 (link the application to libpython). To support both 3.8 and older, try python3-config --libs --embed first and fallback to python3-config --libs (without --embed) if the previous command fails.\n\nAdd a pkg-config python-3.8-embed module to embed Python into an application: pkg-config python-3.8-embed --libs includes -lpython3.8. To support both 3.8 and older, try pkg-config python-X.Y-embed --libs first and fallback to pkg-config python-X.Y --libs (without --embed) if the previous command fails (replace X.Y with the Python version).\n\nOn the other hand, pkg-config python3.8 --libs no longer contains -lpython3.8. C extensions must not be linked to libpython (except on Android and Cygwin, whose cases are handled by the script); this change is backward incompatible on purpose. (Contributed by Victor Stinner in bpo-36721.)\n\nf-strings support = for self-documenting expressions and debuggingÂ¶\n\nAdded an = specifier to f-strings. An f-string such as f'{expr=}' will expand to the text of the expression, an equal sign, then the representation of the evaluated expression. For example:\n\n>>> user = 'eric_idle' >>> member_since = date(1975, 7, 31) >>> f'{user=}{member_since=}' \"user='eric_idle' member_since=datetime.date(1975, 7, 31)\"\n\nThe usual f-string format specifiers allow more control over how the result of the expression is displayed:\n\n>>> delta = date.today() - member_since >>> f'{user=!s}{delta.days=:,d}' 'user=eric_idle delta.days=16,075'\n\nThe = specifier will display the whole expression so that calculations can be shown:\n\n>>> print(f'{theta=}{cos(radians(theta))=:.3f}') theta=30 cos(radians(theta))=0.866\n\n(Contributed by Eric V. Smith and Larry Hastings in bpo-36817.)\n\nPEP 578: Python Runtime Audit HooksÂ¶\n\nThe PEP adds an Audit Hook and Verified Open Hook. Both are available from Python and native code, allowing applications and frameworks written in pure Python code to take advantage of extra notifications, while also allowing embedders or system administrators to deploy builds of Python where auditing is always enabled.\n\nSee PEP 578 for full details.\n\nPEP 587: Python Initialization ConfigurationÂ¶\n\nThe PEP 587 adds a new C API to configure the Python Initialization providing finer control on the whole configuration and better error reporting.\n\nNew structures:\n\nPyConfig\n\nPyPreConfig\n\nPyStatus\n\nPyWideStringList\n\nNew functions:\n\nPyConfig_Clear()\n\nPyConfig_InitIsolatedConfig()\n\nPyConfig_InitPythonConfig()\n\nPyConfig_Read()\n\nPyConfig_SetArgv()\n\nPyConfig_SetBytesArgv()\n\nPyConfig_SetBytesString()\n\nPyConfig_SetString()\n\nPyPreConfig_InitIsolatedConfig()\n\nPyPreConfig_InitPythonConfig()\n\nPyStatus_Error()\n\nPyStatus_Exception()\n\nPyStatus_Exit()\n\nPyStatus_IsError()\n\nPyStatus_IsExit()\n\nPyStatus_NoMemory()\n\nPyStatus_Ok()\n\nPyWideStringList_Append()\n\nPyWideStringList_Insert()\n\nPy_BytesMain()\n\nPy_ExitStatusException()\n\nPy_InitializeFromConfig()\n\nPy_PreInitialize()\n\nPy_PreInitializeFromArgs()\n\nPy_PreInitializeFromBytesArgs()\n\nPy_RunMain()\n\nThis PEP also adds _PyRuntimeState.preconfig (PyPreConfig type) and PyInterpreterState.config (PyConfig type) fields to these internal structures. PyInterpreterState.config becomes the new reference configuration, replacing global configuration variables and other private variables.\n\nSee Python Initialization Configuration for the documentation.\n\nSee PEP 587 for a full description.\n\n(Contributed by Victor Stinner in bpo-36763.)\n\nPEP 590: Vectorcall: a fast calling protocol for CPythonÂ¶\n\nThe Vectorcall Protocol is added to the Python/C API. It is meant to formalize existing optimizations which were already done for various classes. Any static type implementing a callable can use this protocol.\n\nThis is currently provisional. The aim is to make it fully public in Python 3.9.\n\nSee PEP 590 for a full description.\n\n(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in bpo-36974.)\n\nPickle protocol 5 with out-of-band data buffersÂ¶\n\nWhen pickle is used to transfer large data between Python processes in order to take advantage of multi-core or multi-machine processing, it is important to optimize the transfer by reducing memory copies, and possibly by applying custom techniques such as data-dependent compression.\n\nThe pickle protocol 5 introduces support for out-of-band buffers where PEP 3118-compatible data can be transmitted separately from the main pickle stream, at the discretion of the communication layer.\n\nSee PEP 574 for a full description.\n\n(Contributed by Antoine Pitrou in bpo-36785.)\n\nImproved ModulesÂ¶\n\nastÂ¶\n\nAST nodes now have end_lineno and end_col_offset attributes, which give the precise location of the end of the node. (This only applies to nodes that have lineno and col_offset attributes.)\n\nNew function ast.get_source_segment() returns the source code for a specific AST node.\n\n(Contributed by Ivan Levkivskyi in bpo-33416.)\n\nThe ast.parse() function has some new flags:\n\ntype_comments=True causes it to return the text of PEP 484 and PEP 526 type comments associated with certain AST nodes;\n\nmode='func_type' can be used to parse PEP 484 âsignature type commentsâ (returned for function definition AST nodes);\n\nfeature_version=(3, N) allows specifying an earlier Python 3 version. For example, feature_version=(3, 4) will treat async and await as non-reserved words.\n\n(Contributed by Guido van Rossum in bpo-35766.)\n\nasyncioÂ¶\n\nasyncio.run() has graduated from the provisional to stable API. This function can be used to execute a coroutine and return the result while automatically managing the event loop. For example:\n\nimport asyncio async def main(): await asyncio.sleep(0) return 42 asyncio.run(main())\n\nThis is roughly equivalent to:\n\nimport asyncio async def main(): await asyncio.sleep(0) return 42 loop = asyncio.new_event_loop() asyncio.set_event_loop(loop) try: loop.run_until_complete(main()) finally: asyncio.set_event_loop(None) loop.close()\n\nThe actual implementation is significantly more complex. Thus, asyncio.run() should be the preferred way of running asyncio programs.\n\n(Contributed by Yury Selivanov in bpo-32314.)\n\nRunning python -m asyncio launches a natively async REPL. This allows rapid experimentation with code that has a top-level await. There is no longer a need to directly call asyncio.run() which would spawn a new event loop on every invocation:\n\n$ python -m asyncio asyncio REPL 3.8.0 Use \"await\" directly instead of \"asyncio.run()\". Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import asyncio >>> await asyncio.sleep(10, result='hello') hello\n\n(Contributed by Yury Selivanov in bpo-37028.)\n\nThe exception asyncio.CancelledError now inherits from BaseException rather than Exception and no longer inherits from concurrent.futures.CancelledError. (Contributed by Yury Selivanov in bpo-32528.)\n\nOn Windows, the default event loop is now ProactorEventLoop. (Contributed by Victor Stinner in bpo-34687.)\n\nProactorEventLoop now also supports UDP. (Contributed by Adam Meily and Andrew Svetlov in bpo-29883.)\n\nProactorEventLoop can now be interrupted by KeyboardInterrupt (âCTRL+Câ). (Contributed by Vladimir Matveev in bpo-23057.)\n\nAdded asyncio.Task.get_coro() for getting the wrapped coroutine within an asyncio.Task. (Contributed by Alex GrÃ¶nholm in bpo-36999.)\n\nAsyncio tasks can now be named, either by passing the name keyword argument to asyncio.create_task() or the create_task() event loop method, or by calling the set_name() method on the task object. The task name is visible in the repr() output of asyncio.Task and can also be retrieved using the get_name() method. (Contributed by Alex GrÃ¶nholm in bpo-34270.)\n\nAdded support for Happy Eyeballs to asyncio.loop.create_connection(). To specify the behavior, two new parameters have been added: happy_eyeballs_delay and interleave. The Happy Eyeballs algorithm improves responsiveness in applications that support IPv4 and IPv6 by attempting to simultaneously connect using both. (Contributed by twisteroid ambassador in bpo-33530.)\n\nbuiltinsÂ¶\n\nThe compile() built-in has been improved to accept the ast.PyCF_ALLOW_TOP_LEVEL_AWAIT flag. With this new flag passed, compile() will allow top-level await, async for and async with constructs that are usually considered invalid syntax. Asynchronous code object marked with the CO_COROUTINE flag may then be returned. (Contributed by Matthias Bussonnier in bpo-34616)\n\ncollectionsÂ¶\n\nThe _asdict() method for collections.namedtuple() now returns a dict instead of a collections.OrderedDict. This works because regular dicts have guaranteed ordering since Python 3.7. If the extra features of OrderedDict are required, the suggested remediation is to cast the result to the desired type: OrderedDict(nt._asdict()). (Contributed by Raymond Hettinger in bpo-35864.)\n\ncProfileÂ¶\n\nThe cProfile.Profile class can now be used as a context manager. Profile a block of code by running:\n\nimport cProfile with cProfile.Profile() as profiler: # code to be profiled ...\n\n(Contributed by Scott Sanderson in bpo-29235.)\n\ncsvÂ¶\n\nThe csv.DictReader now returns instances of dict instead of a collections.OrderedDict. The tool is now faster and uses less memory while still preserving the field order. (Contributed by Michael Selik in bpo-34003.)\n\ncursesÂ¶\n\nAdded a new variable holding structured version information for the underlying ncurses library: ncurses_version. (Contributed by Serhiy Storchaka in bpo-31680.)\n\nctypesÂ¶\n\nOn Windows, CDLL and subclasses now accept a winmode parameter to specify flags for the underlying LoadLibraryEx call. The default flags are set to only load DLL dependencies from trusted locations, including the path where the DLL is stored (if a full or partial path is used to load the initial DLL) and paths added by add_dll_directory(). (Contributed by Steve Dower in bpo-36085.)\n\ngcÂ¶\n\nget_objects() can now receive an optional generation parameter indicating a generation to get objects from. (Contributed by Pablo Galindo in bpo-36016.)\n\ngettextÂ¶\n\nAdded pgettext() and its variants. (Contributed by Franz Glasner, Ãric Araujo, and Cheryl Sabella in bpo-2504.)\n\ngzipÂ¶\n\nAdded the mtime parameter to gzip.compress() for reproducible output. (Contributed by Guo Ci Teo in bpo-34898.)\n\nA BadGzipFile exception is now raised instead of OSError for certain types of invalid or corrupt gzip files. (Contributed by Filip GruszczyÅski, Michele OrrÃ¹, and Zackery Spytz in bpo-6584.)\n\nIDLE and idlelibÂ¶\n\nOutput over N lines (50 by default) is squeezed down to a button. N can be changed in the PyShell section of the General page of the Settings dialog. Fewer, but possibly extra long, lines can be squeezed by right clicking on the output. Squeezed output can be expanded in place by double-clicking the button or into the clipboard or a separate window by right-clicking the button. (Contributed by Tal Einat in bpo-1529353.)\n\nAdd âRun Customizedâ to the Run menu to run a module with customized settings. Any command line arguments entered are added to sys.argv. They also re-appear in the box for the next customized run. One can also suppress the normal Shell main module restart. (Contributed by Cheryl Sabella, Terry Jan Reedy, and others in bpo-5680 and bpo-37627.)\n\nAdded optional line numbers for IDLE editor windows. Windows open without line numbers unless set otherwise in the General tab of the configuration dialog. Line numbers for an existing window are shown and hidden in the Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in bpo-17535.)\n\nOS native encoding is now used for converting between Python strings and Tcl objects. This allows IDLE to work with emoji and other non-BMP characters. These characters can be displayed or copied and pasted to or from the clipboard. Converting strings from Tcl to Python and back now never fails. (Many people worked on this for eight years but the problem was finally solved by Serhiy Storchaka in bpo-13153.)\n\nNew in 3.8.1:\n\nAdd option to toggle cursor blink off. (Contributed by Zackery Spytz in bpo-4603.)\n\nEscape key now closes IDLE completion windows. (Contributed by Johnny Najera in bpo-38944.)\n\nThe changes above have been backported to 3.7 maintenance releases.\n\nAdd keywords to module name completion list. (Contributed by Terry J. Reedy in bpo-37765.)\n\ninspectÂ¶\n\nThe inspect.getdoc() function can now find docstrings for __slots__ if that attribute is a dict where the values are docstrings. This provides documentation options similar to what we already have for property(), classmethod(), and staticmethod():\n\nclass AudioClip: __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place', 'duration': 'in seconds, rounded up to an integer'} def __init__(self, bit_rate, duration): self.bit_rate = round(bit_rate / 1000.0, 1) self.duration = ceil(duration)\n\n(Contributed by Raymond Hettinger in bpo-36326.)\n\nioÂ¶\n\nIn development mode (-X env) and in debug build, the io.IOBase finalizer now logs the exception if the close() method fails. The exception is ignored silently by default in release build. (Contributed by Victor Stinner in bpo-18748.)\n\nmathÂ¶\n\nAdded new function math.dist() for computing Euclidean distance between two points. (Contributed by Raymond Hettinger in bpo-33089.)\n\nExpanded the math.hypot() function to handle multiple dimensions. Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger in bpo-33089.)\n\nAdded new function, math.prod(), as analogous function to sum() that returns the product of a âstartâ value (default: 1) times an iterable of numbers:\n\n>>> prior = 0.8 >>> likelihoods = [0.625, 0.84, 0.30] >>> math.prod(likelihoods, start=prior) 0.126\n\n(Contributed by Pablo Galindo in bpo-35606.)\n\nAdded two new combinatoric functions math.perm() and math.comb():\n\n>>> math.perm(10, 3) # Permutations of 10 things taken 3 at a time 720 >>> math.comb(10, 3) # Combinations of 10 things taken 3 at a time 120\n\n(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond Hettinger in bpo-37128, bpo-37178, and bpo-35431.)\n\nAdded a new function math.isqrt() for computing accurate integer square roots without conversion to floating point. The new function supports arbitrarily large integers. It is faster than floor(sqrt(n)) but slower than math.sqrt():\n\n>>> r = 650320427 >>> s = r ** 2 >>> isqrt(s - 1) # correct 650320426 >>> floor(sqrt(s - 1)) # incorrect 650320427\n\n(Contributed by Mark Dickinson in bpo-36887.)\n\nThe function math.factorial() no longer accepts arguments that are not int-like. (Contributed by Pablo Galindo in bpo-33083.)\n\nmmapÂ¶\n\nThe mmap.mmap class now has an madvise() method to access the madvise() system call. (Contributed by Zackery Spytz in bpo-32941.)\n\nmultiprocessingÂ¶\n\nAdded new multiprocessing.shared_memory module. (Contributed by Davin Potts in bpo-35813.)\n\nOn macOS, the spawn start method is now used by default. (Contributed by Victor Stinner in bpo-33725.)\n\nosÂ¶\n\nAdded new function add_dll_directory() on Windows for providing additional search paths for native dependencies when importing extension modules or loading DLLs using ctypes. (Contributed by Steve Dower in bpo-36085.)\n\nA new os.memfd_create() function was added to wrap the memfd_create() syscall. (Contributed by Zackery Spytz and Christian Heimes in bpo-26836.)\n\nOn Windows, much of the manual logic for handling reparse points (including symlinks and directory junctions) has been delegated to the operating system. Specifically, os.stat() will now traverse anything supported by the operating system, while os.lstat() will only open reparse points that identify as âname surrogatesâ while others are opened as for os.stat(). In all cases, stat_result.st_mode will only have S_IFLNK set for symbolic links and not other kinds of reparse points. To identify other kinds of reparse point, check the new stat_result.st_reparse_tag attribute.\n\nOn Windows, os.readlink() is now able to read directory junctions. Note that islink() will return False for directory junctions, and so code that checks islink first will continue to treat junctions as directories, while code that handles errors from os.readlink() may now treat junctions as links.\n\n(Contributed by Steve Dower in bpo-37834.)\n\nos.pathÂ¶\n\nos.path functions that return a boolean result like exists(), lexists(), isdir(), isfile(), islink(), and ismount() now return False instead of raising ValueError or its subclasses UnicodeEncodeError and UnicodeDecodeError for paths that contain characters or bytes unrepresentable at the OS level. (Contributed by Serhiy Storchaka in bpo-33721.)\n\nexpanduser() on Windows now prefers the USERPROFILE environment variable and does not use HOME, which is not normally set for regular user accounts. (Contributed by Anthony Sottile in bpo-36264.)\n\nisdir() on Windows no longer returns True for a link to a non-existent directory.\n\nrealpath() on Windows now resolves reparse points, including symlinks and directory junctions.\n\n(Contributed by Steve Dower in bpo-37834.)\n\npathlibÂ¶\n\npathlib.Path methods that return a boolean result like exists(), is_dir(), is_file(), is_mount(), is_symlink(), is_block_device(), is_char_device(), is_fifo(), is_socket() now return False instead of raising ValueError or its subclass UnicodeEncodeError for paths that contain characters unrepresentable at the OS level. (Contributed by Serhiy Storchaka in bpo-33721.)\n\nAdded pathlib.Path.link_to() which creates a hard link pointing to a path. (Contributed by Joannah Nanjekye in bpo-26978) Note that link_to was deprecated in 3.10 and removed in 3.12 in favor of a hardlink_to method added in 3.10 which matches the semantics of the existing symlink_to method.\n\npickleÂ¶\n\npickle extensions subclassing the C-optimized Pickler can now override the pickling logic of functions and classes by defining the special reducer_override() method. (Contributed by Pierre Glaser and Olivier Grisel in bpo-35900.)\n\nplistlibÂ¶\n\nAdded new plistlib.UID and enabled support for reading and writing NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in bpo-26707.)\n\npprintÂ¶\n\nThe pprint module added a sort_dicts parameter to several functions. By default, those functions continue to sort dictionaries before rendering or printing. However, if sort_dicts is set to false, the dictionaries retain the order that keys were inserted. This can be useful for comparison to JSON inputs during debugging.\n\nIn addition, there is a convenience new function, pprint.pp() that is like pprint.pprint() but with sort_dicts defaulting to False:\n\n>>> from pprint import pprint, pp >>> d = dict(source='input.txt', operation='filter', destination='output.txt') >>> pp(d, width=40) # Original order {'source': 'input.txt', 'operation': 'filter', 'destination': 'output.txt'} >>> pprint(d, width=40) # Keys sorted alphabetically {'destination': 'output.txt', 'operation': 'filter', 'source': 'input.txt'}\n\n(Contributed by RÃ©mi Lapeyre in bpo-30670.)\n\npy_compileÂ¶\n\npy_compile.compile() now supports silent mode. (Contributed by Joannah Nanjekye in bpo-22640.)\n\nshlexÂ¶\n\nThe new shlex.join() function acts as the inverse of shlex.split(). (Contributed by Bo Bayles in bpo-32102.)\n\nshutilÂ¶\n\nshutil.copytree() now accepts a new dirs_exist_ok keyword argument. (Contributed by Josh Bronson in bpo-20849.)\n\nshutil.make_archive() now defaults to the modern pax (POSIX.1-2001) format for new archives to improve portability and standards conformance, inherited from the corresponding change to the tarfile module. (Contributed by C.A.M. Gerlach in bpo-30661.)\n\nshutil.rmtree() on Windows now removes directory junctions without recursively removing their contents first. (Contributed by Steve Dower in bpo-37834.)\n\nsocketÂ¶\n\nAdded create_server() and has_dualstack_ipv6() convenience functions to automate the necessary tasks usually involved when creating a server socket, including accepting both IPv4 and IPv6 connections on the same socket. (Contributed by Giampaolo RodolÃ in bpo-17561.)\n\nThe socket.if_nameindex(), socket.if_nametoindex(), and socket.if_indextoname() functions have been implemented on Windows. (Contributed by Zackery Spytz in bpo-37007.)\n\nsslÂ¶\n\nAdded post_handshake_auth to enable and verify_client_post_handshake() to initiate TLS 1.3 post-handshake authentication. (Contributed by Christian Heimes in bpo-34670.)\n\nstatisticsÂ¶\n\nAdded statistics.fmean() as a faster, floating-point variant of statistics.mean(). (Contributed by Raymond Hettinger and Steven DâAprano in bpo-35904.)\n\nAdded statistics.geometric_mean() (Contributed by Raymond Hettinger in bpo-27181.)\n\nAdded statistics.multimode() that returns a list of the most common values. (Contributed by Raymond Hettinger in bpo-35892.)\n\nAdded statistics.quantiles() that divides data or a distribution in to equiprobable intervals (e.g. quartiles, deciles, or percentiles). (Contributed by Raymond Hettinger in bpo-36546.)\n\nAdded statistics.NormalDist, a tool for creating and manipulating normal distributions of a random variable. (Contributed by Raymond Hettinger in bpo-36018.)\n\n>>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14]) >>> temperature_feb.mean 6.0 >>> temperature_feb.stdev 6.356099432828281 >>> temperature_feb.cdf(3) # Chance of being under 3 degrees 0.3184678262814532 >>> # Relative chance of being 7 degrees versus 10 degrees >>> temperature_feb.pdf(7) / temperature_feb.pdf(10) 1.2039930378537762 >>> el_niÃ±o = NormalDist(4, 2.5) >>> temperature_feb += el_niÃ±o # Add in a climate effect >>> temperature_feb NormalDist(mu=10.0, sigma=6.830080526611674) >>> temperature_feb * (9/5) + 32 # Convert to Fahrenheit NormalDist(mu=50.0, sigma=12.294144947901014) >>> temperature_feb.samples(3) # Generate random samples [7.672102882379219, 12.000027119750287, 4.647488369766392]\n\nsysÂ¶\n\nAdd new sys.unraisablehook() function which can be overridden to control how âunraisable exceptionsâ are handled. It is called when an exception has occurred but there is no way for Python to handle it. For example, when a destructor raises an exception or during garbage collection (gc.collect()). (Contributed by Victor Stinner in bpo-36829.)\n\ntarfileÂ¶\n\nThe tarfile module now defaults to the modern pax (POSIX.1-2001) format for new archives, instead of the previous GNU-specific one. This improves cross-platform portability with a consistent encoding (UTF-8) in a standardized and extensible format, and offers several other benefits. (Contributed by C.A.M. Gerlach in bpo-36268.)\n\nthreadingÂ¶\n\nAdd a new threading.excepthook() function which handles uncaught threading.Thread.run() exception. It can be overridden to control how uncaught threading.Thread.run() exceptions are handled. (Contributed by Victor Stinner in bpo-1230540.)\n\nAdd a new threading.get_native_id() function and a native_id attribute to the threading.Thread class. These return the native integral Thread ID of the current thread assigned by the kernel. This feature is only available on certain platforms, see get_native_id for more information. (Contributed by Jake Tesler in bpo-36084.)\n\ntokenizeÂ¶\n\nThe tokenize module now implicitly emits a NEWLINE token when provided with input that does not have a trailing new line. This behavior now matches what the C tokenizer does internally. (Contributed by Ammar Askar in bpo-33899.)\n\ntkinterÂ¶\n\nAdded methods selection_from(), selection_present(), selection_range() and selection_to() in the tkinter.Spinbox class. (Contributed by Juliette Monsel in bpo-34829.)\n\nAdded method moveto() in the tkinter.Canvas class. (Contributed by Juliette Monsel in bpo-23831.)\n\nThe tkinter.PhotoImage class now has transparency_get() and transparency_set() methods. (Contributed by Zackery Spytz in bpo-25451.)\n\ntimeÂ¶\n\nAdded new clock CLOCK_UPTIME_RAW for macOS 10.12. (Contributed by Joannah Nanjekye in bpo-35702.)\n\ntypingÂ¶\n\nThe typing module incorporates several new features:\n\nA dictionary type with per-key types. See PEP 589 and typing.TypedDict. TypedDict uses only string keys. By default, every key is required to be present. Specify âtotal=Falseâ to allow keys to be optional:\n\nclass Location(TypedDict, total=False): lat_long: tuple grid_square: str xy_coordinate: tuple\n\nLiteral types. See PEP 586 and typing.Literal. Literal types indicate that a parameter or return value is constrained to one or more specific literal values:\n\ndef get_status(port: int) -> Literal['connected', 'disconnected']: ...\n\nâFinalâ variables, functions, methods and classes. See PEP 591, typing.Final and typing.final(). The final qualifier instructs a static type checker to restrict subclassing, overriding, or reassignment:\n\npi: Final[float] = 3.1415926536\n\nProtocol definitions. See PEP 544, typing.Protocol and typing.runtime_checkable(). Simple ABCs like typing.SupportsInt are now Protocol subclasses.\n\nNew protocol class typing.SupportsIndex.\n\nNew functions typing.get_origin() and typing.get_args().\n\nunicodedataÂ¶\n\nThe unicodedata module has been upgraded to use the Unicode 12.1.0 release.\n\nNew function is_normalized() can be used to verify a string is in a specific normal form, often much faster than by actually normalizing the string. (Contributed by Max Belanger, David Euresti, and Greg Price in bpo-32285 and bpo-37966).\n\nunittestÂ¶\n\nAdded AsyncMock to support an asynchronous version of Mock. Appropriate new assert functions for testing have been added as well. (Contributed by Lisa Roach in bpo-26467).\n\nAdded addModuleCleanup() and addClassCleanup() to unittest to support cleanups for setUpModule() and setUpClass(). (Contributed by Lisa Roach in bpo-24412.)\n\nSeveral mock assert functions now also print a list of actual calls upon failure. (Contributed by Petter Strandmark in bpo-35047.)\n\nunittest module gained support for coroutines to be used as test cases with unittest.IsolatedAsyncioTestCase. (Contributed by Andrew Svetlov in bpo-32972.)\n\nExample:\n\nimport unittest class TestRequest(unittest.IsolatedAsyncioTestCase): async def asyncSetUp(self): self.connection = await AsyncConnection() async def test_get(self): response = await self.connection.get(\"https://example.com\") self.assertEqual(response.status_code, 200) async def asyncTearDown(self): await self.connection.close() if __name__ == \"__main__\": unittest.main()\n\nvenvÂ¶\n\nvenv now includes an Activate.ps1 script on all platforms for activating virtual environments under PowerShell Core 6.1. (Contributed by Brett Cannon in bpo-32718.)\n\nweakrefÂ¶\n\nThe proxy objects returned by weakref.proxy() now support the matrix multiplication operators @ and @= in addition to the other numeric operators. (Contributed by Mark Dickinson in bpo-36669.)\n\nxmlÂ¶\n\nAs mitigation against DTD and external entity retrieval, the xml.dom.minidom and xml.sax modules no longer process external entities by default. (Contributed by Christian Heimes in bpo-17239.)\n\nThe .find*() methods in the xml.etree.ElementTree module support wildcard searches like {*}tag which ignores the namespace and {namespace}* which returns all tags in the given namespace. (Contributed by Stefan Behnel in bpo-28238.)\n\nThe xml.etree.ElementTree module provides a new function âxml.etree.ElementTree.canonicalize() that implements C14N 2.0. (Contributed by Stefan Behnel in bpo-13611.)\n\nThe target object of xml.etree.ElementTree.XMLParser can receive namespace declaration events through the new callback methods start_ns() and end_ns(). Additionally, the xml.etree.ElementTree.TreeBuilder target can be configured to process events about comments and processing instructions to include them in the generated tree. (Contributed by Stefan Behnel in bpo-36676 and bpo-36673.)\n\nxmlrpcÂ¶\n\nxmlrpc.client.ServerProxy now supports an optional headers keyword argument for a sequence of HTTP headers to be sent with each request. Among other things, this makes it possible to upgrade from default basic authentication to faster session authentication. (Contributed by CÃ©dric Krier in bpo-35153.)"
    }
}