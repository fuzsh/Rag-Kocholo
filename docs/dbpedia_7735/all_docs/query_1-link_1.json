{
    "id": "dbpedia_7735_1",
    "rank": 1,
    "data": {
        "url": "https://www.infoworld.com/article/2265797/how-to-choose-the-right-nosql-database-2.html",
        "read_more_link": "",
        "language": "en",
        "title": "NoSQL buyer’s guide: How to choose the right NoSQL database",
        "top_image": "https://www.infoworld.com/wp-content/uploads/2024/06/shutterstock_1025555566-100958437-orig-1.jpg?quality=50&strip=all&w=1024",
        "meta_img": "https://www.infoworld.com/wp-content/uploads/2024/06/shutterstock_1025555566-100958437-orig-1.jpg?quality=50&strip=all&w=1024",
        "images": [
            "https://www.infoworld.com/wp-content/uploads/2024/07/323-0-65463000-1721760087-bobviolino_crop-100796827-orig.jpg?quality=50&strip=all&w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/1973-0-22287200-1723743828-martinheller_crop-100796824-orig.jpg?quality=50&strip=all&w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/06/shutterstock_1025555566-100958437-orig-1.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/07/323-0-65463000-1721760087-bobviolino_crop-100796827-orig.jpg?quality=50&strip=all&w=250",
            "https://www.infoworld.com/wp-content/uploads/2024/08/1973-0-22287200-1723743828-martinheller_crop-100796824-orig.jpg?quality=50&strip=all&w=250",
            "https://www.infoworld.com/wp-content/uploads/2024/06/sharon-machlis_150x150px-100780511-orig.gif?w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/483088-0-88557000-1723562370-serdaryegulalp2_crop-100796854-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/08/482983-0-62898900-1723762303-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=484",
            "https://www.infoworld.com/wp-content/uploads/2024/08/2254957-0-32072300-1723831511-shutterstock_2287852415_3db0f1.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487164-0-83574300-1723798858-shutterstock_1951878751.jpg?quality=50&strip=all&w=413",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487255-0-72415100-1723797960-shutterstock_245380726-100962991-orig.jpg?quality=50&strip=all&w=372",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3480797-0-15076600-1723830721-Youtube-Thumbnails_Template-OLD.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3479099-0-77926700-1723830335-Linux-Tips-video-template_9673e7.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/07/Youtube-Thumbnails_Template-OLD-1.png?w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Bob Violino and Martin Heller",
            "Bob Violino Contributing",
            "Martin Heller Contributor",
            "Sharon Machlis Executive Editor",
            "Data & Analytics",
            "Serdar Yegulalp Senior"
        ],
        "publish_date": "2024-02-05T10:00:00-05:00",
        "summary": "",
        "meta_description": "Buyers have plenty of choice in NoSQL databases, so how do you choose? Here are five questions that could help you narrow it down.",
        "meta_lang": "en",
        "meta_favicon": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "InfoWorld",
        "canonical_link": "https://www.infoworld.com/article/2265797/how-to-choose-the-right-nosql-database-2.html",
        "text": "Even with these needs in mind, it is important to rule out the possibility that NoSQL is not the right fit for your enterprise, especially because there are trade-offs to choosing NoSQL over a traditional relational database management system (RDBMS). “The first decision you need to make is why do you need a NoSQL database system,” says Craig Mullins, president and principal consultant at Mullins Consulting. “You need to first understand why an existing relational DBMS cannot fulfill your use case. Relational/SQL database systems are widely installed, and most organizations have existing systems and applications deployed on RDBMSs with skilled technicians to manage them.”\n\nAn alternative to replacing the RDBMS, says Mullins, is polyglot persistence — using multiple data storage technologies in a single system to meet different data storage needs. Rather than “force-fitting everything into a relational mindset,” polyglot persistence lets developers and administrators “choose the appropriate data technology for each use case,” he says.\n\nNoSQL’s core strength is likely its decentralized, scalable, fault-tolerant design, Mullins says. “Most NoSQL database technology is implemented to scale and survive outages,” he says. “Additionally, most NoSQL options are lightweight and require less overhead than a relational DBMS, in terms of CPU and support.”\n\nThe CouchDB file layout and commitment system feature all ACID properties. On-disk, CouchDB never overwrites committed data or associated structures, ensuring the database file is always in a consistent state. This is a “crash-only” design where the CouchDB server does not go through a shutdown process; rather, it’s simply terminated.\n\nCouchDB read operations use a multiversion concurrency control (MVCC) model where each client sees a consistent snapshot of the database from the beginning to the end of the read operation. Documents are indexed in B-trees by their name (DocID) and a Sequence ID.\n\nCouchDB is a peer-based distributed database system. It allows users and servers to access and update the same shared data while disconnected. Those changes can then be replicated bi-directionally later. CouchDB allows for any number of conflicting documents to exist simultaneously in the database, with each database instance deterministically deciding which document is the “winner” and which are conflicts. When distributed edit conflicts occur, every database replica sees the same winning revision and each has the opportunity to resolve the conflict.\n\nDataStax: DataStax Astra DB is a fully managed, cloud-native, database as a service built on Apache Cassandra. It scales dynamically and accelerates application development via a range of APIs and programming language options, so developers can build real-time applications fast and scale them without limits, according to the company. Among other improvements, DataStax eliminates the need to run repair scripts and eliminates the cluster outages that can occur when manual repairs fail; automatically keeps DataStax Enterprise nodes from overloading with client or replica requests; and uses a thread-per-core architecture that improves throughput up to 2X for both read and write operations.\n\nDevelopers can readily ensure data security with Astra DB’s built-in security mechanisms such as Private Link, IP access controls, single sign-on, application tokens, and data encryption. Astra DB’s serverless architecture (built on microservices and API-first principles) scales automatically based on demand.\n\nFaunaDB: FaunaDB is a distributed, strongly consistent online transaction processing (OLTP) NoSQL database that is ACID-compliant and offers a multimodel interface. It has an active-active architecture and can span clouds as well as continents.\n\nFaunaDB supports document, relational, graph, and temporal datasets from a single query. In addition to its own FQL query language, the company has announced support for GraphQL now, plus Cassandra Query Language (CQL) and SQL in the future.\n\nGoogle BigTable: Bigtable from Google is an enterprise-grade NoSQL database service with low single-digit millisecond latency, limitless scale, and 99.999% availability, according to the company. It supports multitenant, mixed operational, and real-time analytical workloads.\n\nGoogle says Bigtable is a key-value and wide-column store, ideal for fast access to structured, semi-structured, or unstructured data. Latency-sensitive workloads such as personalization are also a good fit for the platform. Bigtable automatically scales resources to adapt to server traffic, handling the associated sharding, replication, and query processing as needed.\n\nMarkLogic: MarkLogic Server is a multimodel database that combines document, semantic graph, geospatial, and relational models into a single, scalable, operational database, according to MarkLogic. It provides native storage for JSON, XML, text, semantic/Resource Description Framework (RDF) triples, geospatial, and binaries, with unified search-and-query interface capabilities.\n\nThe database has a search engine built into its core, providing a single platform to load data from silos and search across all the data. As such, it does not require a bolt-on search engine for full-text search. MarkLogic Server also offers enterprise data security controls such as data loss prevention.\n\nMicrosoft Azure Cosmos: Azure Cosmos DB is a Microsoft Azure database service that supports multiple NoSQL models and a variety of data formats, including JSON and binary data. Microsoft says the database is also fully managed, with Microsoft Azure handling all the underlying infrastructure so that developers can focus on their applications and data.\n\nAzure Cosmos DB offers security tools such as data encryption and data access controls. It features automatic and instant scalability, and open source APIs for MongoDB, Cassandra, and other NoSQL engines.\n\nMongoDB: MongoDB, maintained by MongoDB Inc. and published under a combination of the Gnu Affero General Public License and the Apache License, is a free and open source, cross-platform, document-oriented database.\n\nIt uses JSON-like documents with schemas, and incorporates operational best practices learned from optimizing thousands of deployments at organizations of all sizes. The cloud-based offering can handle database management, setup and configuration, software patching, monitoring, and backups. It operates as a distributed database cluster. Key features and capabilities include fully managed backup, point-in-time recovery, a real-time performance panel, and customizable alerting.\n\nRedis: Redis Enterprise, sponsored by Redis Labs, is an open source, key-value NoSQL in-memory database that supports both relaxed and strong consistency, a flexible schema-less model, high availability, and ease of deployment.\n\nThe platform supports key-value; a variety of data structures such as lists, sets, bitmaps, and hashes; and a variety of models through pluggable modules such as search, graph, JSON, and XML. Redis Enterprise includes a real-time indexing, querying, and full-text search engine available on-premises and as a managed service in the cloud.\n\nYandex ClickHouse: ClickHouse is an open source, column-oriented online analytical processing (OLAP) database management system that manages extremely large volumes of data, including non-aggregated data, in a stable and sustainable manner, and allows generating custom data reports online in real time. The system is linearly scalable and can be scaled up to store and process trillions of rows and petabytes of data.\n\nClickHouse is designed to work on regular hard drives, which means the cost per gigabyte of data storage is low, but SSD and additional RAM are also fully used if available. (By contrast, SAP HANA can only work in RAM.) ClickHouse does parallel processing on multiple cores.\n\nIn ClickHouse, data can reside on different shards. Each shard can be a group of replicas that are used for fault tolerance. The query is processed on all the shards in parallel.\n\nClickHouse supports a declarative query language based on SQL that is identical to the SQL standard in many cases. Supported queries include group by, order by, subqueries in from, in, and join clauses, and scalar subqueries. Dependent subqueries and window functions are not supported.\n\nAlthough ClickHouse does support data inserts and mutations, it was not designed for OLTP. Yandex recommends inserting data in packets of at least 1,000 rows, or no more than a single request per second. No locks are taken when new data is ingested.\n\nYugaByte: YugaByte DB is an open source, transactional, high-performance database for planet-scale applications that supports three API sets: YCQL, compatible with Apache CQL; YEDIS, compatible with Redis; and PostgreSQL.\n\nYugaWare is the orchestration layer for YugaByte DB Enterprise Edition. YugaWare makes quick work of spinning up and tearing down distributed clusters on Amazon Web Services, Google Cloud Platform, and Microsoft Azure. YugaByte DB implements multi-version concurrency control (MVCC), which it uses for nonlocking reads.\n\nYugaByte Enterprise supports read replicas, multicloud clusters, and comprehensive monitoring and alerting without any configuration. It also features in-flight and at-rest encryption, one-click distributed backups and restores for clusters of any size, and auto-tiering of cold data to cheaper storage.\n\nEssential reading\n\nWhat is NoSQL? Databases for a cloud-scale future\n\nWhat is SQL? The lingua franca of data analysis\n\nBeyond NoSQL: The case for distributed SQL\n\nNoSQL standouts: The best document databases\n\nOracle Database 21c review: The old RDBMS is new again"
    }
}