{
    "id": "dbpedia_7735_2",
    "rank": 16,
    "data": {
        "url": "https://github.com/parallelsio/core-modules",
        "read_more_link": "",
        "language": "en",
        "title": "modules: Creatively organize + remix bits of media with an ecosystem of a digital notebook, canvas, + browser extensions",
        "top_image": "https://opengraph.githubassets.com/b86533612c82b6b2d2b06e3e4be08a758e44621fc1b20e5fffde6c487d39acc3/parallelsio/core-modules",
        "meta_img": "https://opengraph.githubassets.com/b86533612c82b6b2d2b06e3e4be08a758e44621fc1b20e5fffde6c487d39acc3/parallelsio/core-modules",
        "images": [
            "https://camo.githubusercontent.com/6e5edaf74f1dbf650bf5e106611b00334a03a313cd5a666b1e138bfa3e65f758/68747470733a2f2f7472617669732d63692e6f72672f706172616c6c656c73696f2f636f72652d6d6f64756c65732e7376673f6272616e63683d6d6173746572",
            "https://github.com/parallelsio/core-modules/raw/master/docs/github-readme-image.png",
            "https://camo.githubusercontent.com/aa0c5c27d35e3d2686ac0f1842c1730958d298a5526eb3c038cc9f5dca3bd318/687474703a2f2f692e696d6775722e636f6d2f357a78786e6f432e706e67",
            "https://camo.githubusercontent.com/52bd6caec662f18dbc4dc9a11d128c52c906d1cb8ba8e1520a1e216cdd55de91/687474703a2f2f692e696d6775722e636f6d2f794d77425261592e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Creatively organize + remix bits of media with an ecosystem of a digital notebook, canvas, + browser extensions - parallelsio/core-modules",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/parallelsio/core-modules",
        "text": "##Make Parallels (working title):\n\nA free + open source digital notebook with a canvas, for creatively organizing + remixing bits of media.\n\nWe're a distributed community of designers, developers, artists + researchers interested in changing the way we organize and connect ideas.\n\n####4 design principles guide our vision:\n\nFlow - a system that responds in realtime, always remembers where you are, and lets you play without consequences\n\nRemixablity: anything can be asssembled, broken apart, recombined\n\nParallels: create + connect ideas with links, or parallels, as we call them. This opens up possibilities for new types of search + organization\n\nPrivate-by-design- Only you have access to the data you generate, ie, zero-knowledge philosophy.\n\nBlog\n\nThis is an alpha version and a proof of concept. It's incomplete, with bugs and continuously changing code, design + features\n\nGNU Affero General Public License. Pay it forward.\n\nTools we use\n\nTwitter: @makeparallels\n\nSlack for realtime chat + collaboration. Email or tweet for access\n\nTrello for keeping track of stories (units of design + development work)\n\nTravisCI, a Continous Integration system to run automate running our tests and deployment.\n\nSaucelabs Automated cross-browser testing on various platforms\n\nHeroku Cloud hosting platform, with good API's + plugin system\n\nSpecial thanks for free licenses + support from:\n\nDoodle, great for scheduling team meetings across time zones\n\nGhost Simple, open source blogging platform\n\n3 main components in this repository:\n\n/meteor-app - the reactive, web app running in modern browsers: a digital canvas enabling you to create, remix + share digital collections of media. Built on Meteor JS\n\n/desktop-app - a wrapper for the Meteor application, letting you use Make Parallels as an installable app on MacOSX, Windows and Linux. Built on Electron\n\n/extensions/chrome/source - a Chrome extension, enabling you to easily save+tag content found on the web to your Make Parallels canvas\n\nPrivacy Notice\n\nAll of the data you create while running Make Parallels locally during development, (on your computer) stays private to you. Unlike other systems, any action you've taken in Parallels since the beginning of time is accessible, even if deleted. Since this is running locally on your machine, there is little to be concerned about in terms of data privacy.\n\nIf you contribute to this project, either by submitting a Pull Request or are submitting a bug or issue and include an export of your database activity, all of your activity history is included, even if some content was previously deleted. You can see what is in your history at any time by pressing the H key when running the web canvas.\n\nIf you have any questions or concerns, please contact us before posting your data.\n\nRequirements + Dependencies\n\nOSX / Linux (Windows dev may work, but it has not been tested)\n\nNode.js (4.4.7)\n\nNVM (Node version manager). Optional, but recommended\n\nNPM (Node package manager)\n\nMeteor JS platform\n\nMongoDB NoSQL database\n\nNeo4j graph database\n\ngit distributed version control system\n\nEvergreen (self-updating, modern) browsers: Chrome, Firefox, Safari, FireFox, IE10+\n\n1) via NVM (Node Version Manager) - preferred Allows you to keep various versions of Node.js in your development environment (your computer) at once. Useful if you intend on using node.js for other projects besides Parallels. Install instructions\n\nAfter installing NVM, install the version of node required by Meteor and set it as the default\n\n$ nvm install 4.4.7 $ nvm use 4.4.7 $ nvm alias default 4.4.7\n\n2) Manually All projects you use on your computer will be tied to one version of Node.js. Considering Meteor needs an older version of Node, this is not a great option\n\nOSX, via Homebrew\n\nLinux via Apt\n\n$ curl install.meteor.com | sh\n\nCopy of this repository on your computer\n\n$ git clone https://github.com/parallelsio/core-modules.git parallels-core-modules $ cd parallels-core-modules\n\nInstall + start the Mongo database\n\nA Mongo instance is used for the end to end tests, to avoid conflicting with local Mongo install used by the Meteor app Installation Instructions\n\nInstall + start the Neo4j database\n\nWe use Neo4j to graph the links you create between Bits, or as we call them, Parallels.\n\nWe recommend installing Neo4J using a package manager. Our preference is with homebrew Installation Instructions\n\nAfter install is complete, run $ neo4j start to start the neo4j server. Go to http://localhost:7474 in the browser, which will prompt you for the neo4j username + password. This will only happen once. The default username + password is neo4j. Once you have logged in the first time, neo4j will ask you for a new password. Write the password down, as you will need it to set up your application's config file.\n\nSet up environment variables in a config file\n\nWe use a config file, his is a 12-factor app pattern. When running the project locally, settings are loaded into the app via a .env file located in the project root. This file is loaded by a gruntfile plugin that puts the values listed in it, into your local *nix environment before Meteor is loaded. In staging+production servers, these variables are set on the server, so this file is ignored. Thus, don't check this file in.\n\nCopy .env.example to your project root, as .env, remove all the comments and set your variables.\n\nDownload + install all of the Node.js packages the Parallels project relies on\n\n$ npm install\n\nStart Either The Web App or Desktop app\n\nTo start the app, run either: $ npm run server $ npm run desktop\n\nRunning either will do several things:\n\nCompiles the SCSS files into CSS\n\nCompiles the Jade template files\n\nRuns bower install to get all front-end dependencies (JavaScript libraries etc)\n\nBoots up a local Meteor JS server\n\nRuns a watcher, listening for changes to Chrome's extension source code, which lives in /extensions/chrome/source\n\nWhen server has finished booting, your terminal output should look something like this:\n\nWe've disabled the built in Meteor Hot Code, wihch automatically refreshed your browser whenever a change to the Meteor code was detected. We found it was slow and unpredictable. Make changes to /meteor-app and refresh manually to see your changes on http://localhost:3000. Note there is a slight delay for file changes to \"kick in\".\n\nIf you've started the app with $ npm run server, go to http://localhost:3000 in your browser.\n\nIf you've started the app with $ npm run desktop, you should see a dedicated window start up. This is like a real app, in the sense you can minimize/maximize it/focus to it independantly. You will also be able to see the web app at http://localhost:3000\n\nBuild + Install The Chrome Extension (Optional)\n\nThe Parallels Chrome extension allows you to save and send web pages you come across in different tabs, directly to the Parallels web canvas. Before you install and use our Chrome extension, you'll need to build (compile) it.\n\nOnce you do so, and then install the built/compiled files into Chrome, where bits go when the extension is used, is 'frozen' and determined by how you built it the extension.\n\nBuild the Chrome Extension\n\nThe three ways to build the extension are:\n\n$ npm run local : the bits get sent to the local Parallels server, at http://localhost:3000. No one will see your data with this option. Your data is persistent, in that it will survive reloading the Meteor web canvas, and when you run your local end-to-end tests via $ npm run e2e\n\n---------- OR ------------\n\n$ npm run ci : bits get sent to the CI (Continous Integration) Parallels server at http://parallels-ci.meteor.com This data is public, but not persistent: it gets cleared whenever someone pushes new code to master. You should not need to use this directly, this is generally reserved for test automation.\n\n---------- OR ------------\n\n$ npm run prod : bits get sent to the sandbox server, at https://makeparallels.herokuapp.com, our production sandbox server. You should not use this directly, as this is a shared, public demo server, not for personal use.\n\n> #### Install the Chrome Extension > Point the Chrome browser to the extension source code folder: `/extensions/chrome/source` > [Detailed directions](https://developer.chrome.com/extensions/getstarted#unpacked)\n\nYou can modify the extension source code and your extension will automatically update, if you have Developer Mode enabled in Chrome-> Extensions.\n\nYou can rebuild your extension at any time by re-running whichever of the 3 build options you prefer, though you'll have to remove/uninstall your extension from Chrome, and then re-install it by pointing it to your latest build\n\n> When the server is running, and your extension is installed, save a web page using the web clipper. You should see that 'bit' instantly on your Parallels canvas.\n\nThe clipper currently only clips websites on http. SSL-secured websites (https), will not work, as Chrome places restrictions on SSL content locally.\n\nMore Workflow Task Scripts\n\nWe've added more tasks to make ease development:\n\n$ npm run postinstall:\n\n#### Testing tasks\n\nWe are currently focusing our testing for code that lives inside Meteor packages. This simplifies writing and maintaning our test suite, and re-inforces modular thinking by pushing us to break the Meteor app into small, testable peices.\n\n$ npm run test: Does not rely on Meteor to run. Ideally takes only ~2 to 3 minutes to run\n\n> `$ npm run test:integration`:\n\n> `$ npm run test:server`:\n\nDatabase tasks\n\n$ npm run resetdb: Drops all data in Meteor's Mongo DB and the Neo4j DB, resetting your application to a fresh state. The neo4j portion depends on the NEO4J_DB_PATH variable set in the .env file, in the project root folder.\n\n$ npm run exportlog: Export your canvas data to a JSON file to meteor-app/private/data-backups/canvas.events.json. This task only works while the web app is running (via $ npm run server)\n\n$ npm run importlog: Rebuild your canvas from scratch by importing a JSON file of canvas events to be replayed. This task will read events data from the file at: meteor-app/private/data-backups/canvas.events.json. **This task only works when the web app is running (via $ npm run server). ** You will probably want to clear/reset the databases before importing, although it isn't necessary.\n\nYou can see a full list available by running $ npm run.\n\nFAQ + Contact\n\nHaving trouble? Please contact us - we want to do everything possible to help get you set up quickly.\n\nhave a look at many common questions + answers at the FAQ Wiki.\n\nTweet to us @makeparallels\n\nemail us\n\nOpening an issue\n\nIf you come across a bug, please post a Github Issue to let us know. Helpful info to include:\n\nVersion of dependencies e.g. NodeJS, MongoDB, Meteor, and Neo4j\n\n- OS, Type, version of browser, ie `OSX 10.10, Chrome, Version 43.0.2357.124 (64-bit)`\n\n- Your local instance eventlog. You can extract this by running `$ npm run exportlog` while the Meteor app is running via `$ npm run server`. Take the output and [create a gist](https://gist.github.com) to include in the issue, or directly upload the exported JSON file.\n\nThe file exported as a result of running `$ npm run exportlog` will include all activity in your local instance of Parallels: **Please read the [Privacy Notice](https://github.com/parallelsio/core-modules#privacy-notice) before sharing/uploading this file, to understand what data will be included in it**\n\nCurrent challenges:\n\nMap-based coordinate system for layout/content\n\n- Designing a multi-client environment that supports realtime collaboration\n\n- Storing, modeling documents in a combination of databases used for different purposes (aka polyglot database architecture)\n\n- Browser extensions for clipping web content\n\n- Physics-based UI animations + transitions, via Greensock JS, SVG, CSS3, WebGL\n\n- Procedural audio, for dynamic, realtime sound synthesis, where UI input is used as parameters for shaping sound\n\n- Interactive documentation, think Bret Vector's definition of [reactive documents](http://worrydream.com/ExplorableExplanations/), to help prevent [this](https://i.imgur.com/Ssz6pjF.png)\n\n- mobile apps: iOS / Android / FireFoxOS\n\n- Decentralized (cloud-less) infrastructure / file storage + blockchain explorations\n\n> #### Designers + Developers:\n\nFork the project, rather than cloning in the setup details above. Modify the code.\n\nEnsure all tests pass after running `$ npm run test`\n\n* [Submit a Pull Request](https://help.github.com/articles/using-pull-requests) via GitHub **Please ensure you've excluded any of your data or export files. See our [Privacy Notice](https://github.com/parallelsio/core-modules#privacy-notice) to learn more**"
    }
}