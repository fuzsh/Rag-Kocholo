{
    "id": "dbpedia_4766_3",
    "rank": 62,
    "data": {
        "url": "https://devtalk.blender.org/t/universal-unique-id-per-object/363",
        "read_more_link": "",
        "language": "en",
        "title": "Universal unique id per object",
        "top_image": "https://devtalk.blender.org/uploads/default/original/2X/4/490c5bf9686b023a6104676fef2322589487601d.png",
        "meta_img": "https://devtalk.blender.org/uploads/default/original/2X/4/490c5bf9686b023a6104676fef2322589487601d.png",
        "images": [
            "https://devtalk.blender.org/user_avatar/devtalk.blender.org/ideasman42/40/96_2.png",
            "https://devtalk.blender.org/user_avatar/devtalk.blender.org/ideasman42/40/96_2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "python"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-04-26T16:08:39+00:00",
        "summary": "",
        "meta_description": "Is there in the python api any functionality to support universal unique ids per object? \nThis would be helpful to track data between sessions for example. \nMaya has the uuids and many other DCCs support some kind of uni&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://devtalk.blender.org/uploads/default/optimized/2X/c/c2c1842941daa95dd813394bbdf98988cdc392ec_2_32x32.ico",
        "meta_site_name": "Developer Forum",
        "canonical_link": "https://devtalk.blender.org/t/universal-unique-id-per-object/363",
        "text": "Is there in the python api any functionality to support universal unique ids per object?\n\nThis would be helpful to track data between sessions for example.\n\nMaya has the uuids and many other DCCs support some kind of unique object identification in the scene, normally it lives only in the current session but that’s ok, thats what im looking for.\n\nBe it by unique name string, a hash, or a combination of both.\n\nWhile Blender doesn’t have UUID’s you can use the object name and library for a way to identify objects (or any other ID data block) uniquely.\n\nThis works for accessing them too:\n\nbpy.data.objects[\"Object Name\", \"//path/to/lib.blend\"]\n\nIf it’s not a library:\n\nbpy.data.objects[\"Object Name\", None]\n\nYou can get the pointer value too, but this changes on undo and isn’t assured to be unique within a session, eg:\n\nid(bpy.context.object)\n\nNote the asset manager branch add’s s UUID, so this may be possible soon.\n\ni cannot rely on objects names because user can change the name manually, the object stays the same but not its name, it occurs the same with object pointers.\n\nI need a way to keep track of objects from the beginning of an artist session and the end of it.\n\nDoes this mean there is no way to do this in blender at the moment?\n\nDo you know when can we expect to have UUIDs in blender?\n\nIm taking the scene_update_pre and scene_update_post handlers approach but i think it doesnt do what i suppose:\n\n@persistent def pre_uuid_watcher(scene): global objects_pre, names_pre objects_pre = {} names_pre = [] for obj in scene.objects: name = obj.name names_pre.append(name) @persistent def post_uuid_watcher(scene): global objects_post, names_post, objects_pre, names_pre objects_post = {} names_post = [] for obj in scene.objects: name = obj.name names_post.append(name) bpy.app.handlers.scene_update_pre.append(pre_uuid_watcher) bpy.app.handlers.scene_update_post.append(post_uuid_watcher)\n\nIf i do:\n\nnew_names = set(names_post) - set(names_pre)\n\nI get an empty list after creating a new CUBE.001, why is this? i was guessing new_names would be a set with CUBE.001 only without the rest of the objects but apparently the “pre” query is returning also CUBE.001… How can i detect new objects creation in the scene with these handlers?\n\nHi,\n\nI would like to rescue a little bit this thread.\n\nJust a very simpler question: assuming that the scene update problems, renaming of objects etc, are solved, is there a way to retrieve an objects full path name id. Ill explain what i mean: you can still have different objects with same base “name” attribute string scattered all over different scenes, collections, layers and libraries. I would like to know if there is any method form bpy.types.object or any other class that can return a string with all these “path elements” taken into account so that i dont have to “build it” every time myself.\n\nIll give an example:\n\nYou can have the following structure in a .blend file:\n\nScene 001: Collection: CameraA\n\nScene 002: Collection: CameraA\n\nIn the docs, it says blender ensures each object has a unique “name” that you can retrieve accessing the “name” attribute of the bpy.types.object class. In this example, it is not the case, so i am force to check the scene name too. Replace the scene name for the collection name, layer name, etc. We have multiple names to take into account in order to build a unique ID.\n\nI guess im looking for something similar to the Maya’s fullpath property which gives you back the object’s outliner full path.\n\nAnthing similar in blender? If not, i should have to build it myself. Im relatively new to Blender, so, my following question would be: which blender elements should it take into account apart from “Scene name”, “Library Name”, “Collection name”, “Layer name”?\n\nIm working with blender 2.93 LTS, and my last question would be: is UUID creation something that is gonna be improved in the following versions? is it included in the roadmap?\n\nThanks\n\nnot exactly.\n\nYou are right, yes, using the name_full is more specific but it is not enough.\n\nAs you can see in the example with CameraA you have 2 cameras in 2 different scenes that are included in the same .blend file. Since both of them are “appended” they do not rely on any library (their library is None for both of them) so you still need to differentiate them.\n\nForgot to mention, im using blender 2.93 LTS, just in case it helps\n\nResponding to the general topic discussed here.\n\nAdding UUIDs for a single Blender session is not a big issue, in fact there is now a ID.session_uuid internally, used for a couple of things. But it’s not exposed in BPY from what I can see.\n\nHowever creating a UUID system that keeps working over multiple sessions/instances of Blender is difficult. One just has to copy a .blend file, and the UUIDs may be duplicated. This can be solved, but what if the user just created a backup file, so the UUIDs should in fact be the same, or somehow be aware of their history?\n\nIt’s just super complicated do get right.\n\nhi @julianeisel,\n\nyes i agree, the greater difficult task here is keeping track of uuid and history changes. We are making use of handlers to compare scene content before and after scene updates and perform the necessary operations to make it work although we dont have a real clue of performance issues in big scenes and stuff like that. No clue about the real overhead yet and we dont take into account all the use cases yet neither but we are trying to implement it as we have a need.\n\nIn fact, i have some ideas about things i would like to do in blender and contribute, and this was one of them.\n\nthanks a lot for the insight! Its very useful and saved a lot of time.\n\nim just diving into blender as a user too and im very impressed by the possibility to link specific data-blocks from another .blend file, as far as i can tell, in maya the closest thing to it is the reference system, and you are forced to reference the whole file content, everything. I think this data-block approximation is gonna really help and ease the task of a lot of departments that deal with multiple scene parts, like layout, scene assembly, etc. I think it is a huge improvement. Havent seen this in other DCCs."
    }
}