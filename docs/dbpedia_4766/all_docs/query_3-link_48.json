{
    "id": "dbpedia_4766_3",
    "rank": 48,
    "data": {
        "url": "https://github.com/hopsoft/universalid",
        "read_more_link": "",
        "language": "en",
        "title": "hopsoft/universalid: Fast, recursive, optimized, URL",
        "top_image": "https://opengraph.githubassets.com/b4bacc02e4e6413efb91ce1900eb316a2d35c5cc929d8e433522fae8f0482234/hopsoft/universalid",
        "meta_img": "https://opengraph.githubassets.com/b4bacc02e4e6413efb91ce1900eb316a2d35c5cc929d8e433522fae8f0482234/hopsoft/universalid",
        "images": [
            "https://camo.githubusercontent.com/12cd78b6925a55d6683420193572837d254b1e077127be5801159a5221fbad0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6f632d3831312d3437643239392e737667",
            "https://camo.githubusercontent.com/9d817c05b3fc0c4d4898168250265f3abcb5da2d8363bfaafdbf20df630cf78a/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f35363736323463626537333366616663323333302f6d61696e7461696e6162696c697479",
            "https://camo.githubusercontent.com/65315e9bf88001119cd0ccb0b40ea9db667fdad9d98c263b532ea3e80bc163ce/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f762f756e6976657273616c69643f636f6c6f723d31363841464526696e636c7564655f70726572656c6561736573266c6f676f3d72756279266c6f676f436f6c6f723d464531363136",
            "https://camo.githubusercontent.com/f8af12ca6bb53313e0aceb3f1cffa9bb014828a9be544ef9f15b5ca7148e2b54/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f64742f756e6976657273616c69643f636f6c6f723d313638414645266c6f676f3d72756279266c6f676f436f6c6f723d464531363136",
            "https://camo.githubusercontent.com/7a12b56291ca5d1564e433394c3446866f630d6990a0fc3a88502e35e935d193/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d7374616e646172642d3136384146453f6c6f676f3d72756279266c6f676f436f6c6f723d464531363136",
            "https://camo.githubusercontent.com/1e5d1948492da86564b0b796aee85d2b1be816594c76a4e834b98d71af8e30fb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d52656164792d2d746f2d2d436f64652d677265656e3f7374796c653d666c6174266c6f676f3d676974706f64266c6f676f436f6c6f723d7768697465",
            "https://github.com/hopsoft/universalid/actions/workflows/tests.yml/badge.svg",
            "https://camo.githubusercontent.com/55c422838de444585f477ceebbe30afa59f17f49be84532f181dc4375e301695/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73706f6e736f72732f686f70736f66743f636f6c6f723d656234616161266c6f676f3d47697448756225323053706f6e736f7273",
            "https://camo.githubusercontent.com/f79221463618fb69b2b5f29009fd7fea6a46d21e3bb0874bd4322998ba7ab928/68747470733a2f2f696d672e736869656c64732e696f2f6d6173746f646f6e2f666f6c6c6f772f3030303030383237343f646f6d61696e3d6874747073253341253246253246727562792e736f6369616c266c6162656c3d253430686f70736f6674267374796c653d736f6369616c",
            "https://camo.githubusercontent.com/5e2c7c3a4f43c2704362471f75baed74b6892991071c5e30a886a64d0c21bec5/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c3f6c6162656c3d253430686f70736f6674267374796c653d736f6369616c2675726c3d6874747073253341253246253246747769747465722e636f6d253246686f70736f6674",
            "https://camo.githubusercontent.com/d891adc334ee10a5f9c22302bb4a6045ab32905813cccf4262eede87920b8c33/68747470733a2f2f696d616765732e636c69636b66756e6e656c2e636f6d2f75706c6f6164732f6469676974616c5f61737365742f66696c652f3137363633322f636c69636b66756e6e656c732d6461726b2d6c6f676f2e737667"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Fast, recursive, optimized, URL-Safe serialization for any Ruby object - hopsoft/universalid",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/hopsoft/universalid",
        "text": "Universal ID leverages both MessagePack and Brotli (a combo built for speed and best-in-class data compression). When combined, these libraries are up to 30% faster and within 2-5% compression rates compared to Protobuf. ↗\n\nUniversal ID introduces a paradigm shift that enables straightforward simple solutions ↗ for a variety of complex problem domains.\n\nURI::UID\n\nSupported Data Types\n\nPrimitive Types\n\nComposite Types\n\nExtension Types\n\nCustom Types\n\nOptions\n\nAdvanced Usage\n\nFingerprinting\n\nCopy ActiveRecord Models\n\nActiveRecord::Relations\n\nSignedGlobalID\n\nSponsors\n\nLicense\n\nUniversal ID introduces a new URI defintion that can recursively serialize any Ruby object into an URL-safe string which can be safely transported via HTTP.\n\nThe best part: The API is simple.\n\nUniversal ID supports most native Ruby primitives:\n\nNilClass\n\nBigDecimal\n\nComplex\n\nDate\n\nDateTime\n\nFalseClass\n\nFloat\n\nInteger\n\nRange\n\nRational\n\nRegexp\n\nString\n\nSymbol\n\nTime\n\nTrueClass\n\nYou can use Universal ID to serialize individual primitives, but this actually serves as the foundation for more advanced use-cases.\n\nComposite (or complex, compound, etc.) datatype support is where things start to get interesting. Universal ID supports the following native Ruby composite datatypes:\n\nArray\n\nHash\n\nOpenStruct\n\nSet\n\nStruct\n\nThe following extension datatypes ship with Universal ID:\n\nActiveRecord::Base\n\nActiveRecord::Relation\n\nActiveSupport::Cache::Entry\n\nActiveSupport::Cache::Store\n\nActiveSupport::TimeWithZone\n\nGlobalID\n\nSignedGlobalID\n\nHere are a few reasons you may want to consider Universal ID with ActiveRecord.\n\nNew Records: Universal ID can serialize models that haven't been saved to the database yet.\n\nChangesets: Universal ID can serialize ActiveRecord models with unsaved changes, ensuring that even transient states are captured.\n\nAssociations: Universal ID goes beyond single models. It can include associated records, even those with unsaved changes, creating a comprehensive snapshot of complex record states.\n\nCopying/Cloning: Universal ID supports making copies of records (including associations), making it ideal for duplicating complex datasets.\n\nMore Control: Universal ID gives you control over the serialization process. You can choose which columns to include/exclude, allowing for tailored, optimized payloads to fit your needs.\n\nQueries/Relations: Universal ID also supports ActiveRecord::Relations, enabling the serialization of complex database queries and scopes.\n\nIn summary, while GlobalID excels in its specific use case, Universal ID offers more power for use-cases that involve unsaved records, complex associations, data cloning, and database queries.\n\nUniversal ID is extensible, enabling you to register your own datatypes with custom serialization rules. Simply convert the required data to a Ruby primitive or composite value.\n\nUniversal ID supports a small, but powerful, set of options used to \"prepack\" the object before it's packed with MessagePack. These options instruct Universal ID on how to prepare the object for serialization.\n\nOptions can be applied whenever creating a UID.\n\nIt's also possible to register frequently used options.\n\nEach UID is fingerprinted as part of the serialization process.\n\nFingerprints are comprised of the following components:\n\nClass (Class) - The encoded object's class\n\nTimestamp (Time) - The mtime (UTC) of the file that defined the object's class\n\nFingerprints provide a simple mechanism to help manage data format versions... minimizing the need for custom versioning solutions. Whenever the class definition changes, the mtime updates, resulting in a different fingerprint. This is especially useful in scenarios where the data format evolves over time, such as in long-lived applications.\n\nMake a copy of an ActiveRecord model (with loaded associations).\n\nUniversal ID also supports ActiveRecord relations/scopes. You can easily serialize complex queries into a portable and sharable format.\n\nFeatures like signing (to prevent tampering), purpose, and expiration are provided by SignedGlobalIDs. These features (and more) will eventually be added to Universal ID, but until then... simply convert your UID to a SignedGlobalID to add these features to any Universal ID.\n\nSponsors\n\nProudly sponsored by\n\nAdd your company..."
    }
}