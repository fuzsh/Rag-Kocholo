{
    "id": "dbpedia_4996_3",
    "rank": 7,
    "data": {
        "url": "https://downloads.haskell.org/ghc/latest/docs/users_guide/flags.html",
        "read_more_link": "",
        "language": "en",
        "title": "5.6. Flag reference — Glasgow Haskell Compiler 9.10.1 User's Guide",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "-fenable-th-splice-warnings Generate warnings for Template Haskell splices dynamic -fno-enable-th-splice-warnings -fhelpful-errors Make suggestions for mis-spelled names. dynamic -fno-helpful-errors -fmax-pmcheck-models=â¨nâ© soft limit on the number of parallel models the pattern match checker should check a pattern match clause against dynamic -fshow-warning-groups show which group an emitted warning belongs to. dynamic -fno-show-warning-groups -fvia-C use the C code generator dynamic -W enable normal warnings dynamic -Wno-extra -w disable all warnings dynamic -Wall enable almost all warnings (details in Warnings and sanity-checking) dynamic -Wno-all -Wall-missed-specialisations warn when specialisation of any overloaded function fails. dynamic -Wno-all-missed-specialisations -Wall-missed-specializations alias for -Wall-missed-specialisations dynamic -Wno-all-missed-specializations -Wambiguous-fields warn about ambiguous field selectors or updates dynamic -Wauto-orphans (deprecated) Does nothing dynamic -Wbadly-staged-types warn when type binding is used at the wrong TH stage. dynamic -Wno-badly-staged-types -Wcompat enable future compatibility warnings (details in Warnings and sanity-checking) dynamic -Wno-compat -Wcompat-unqualified-imports Report unqualified imports of core libraries which are expected to cause compatibility problems in future releases. dynamic -Wno-compat-unqualified-imports -Wcpp-undef warn on uses of the #if directive on undefined identifiers dynamic -Wdata-kinds-tc warn when an illegal use of a type or kind without DataKinds is caught by the typechecker dynamic -Wno-data-kinds-tc -Wdefault enable default flags dynamic -Wno-default -Wdefaulted-exception-context warn when an Control.Exception.Context.ExceptionContext implicit parameter is defaulted to Control.Exception.Context.emptyExceptionContext. dynamic -Wnop-defaulted-exception-context -Wdeferred-out-of-scope-variables Report warnings when variable out-of-scope errors are deferred until runtime. See -fdefer-out-of-scope-variables. dynamic -Wno-deferred-out-of-scope-variables -Wdeferred-type-errors Report warnings when deferred type errors are enabled. This option is enabled by default. See -fdefer-type-errors. dynamic -Wno-deferred-type-errors -Wdeprecated-flags warn about uses of commandline flags that are deprecated dynamic -Wno-deprecated-flags -Wdeprecated-type-abstractions warn when type abstractions in constructor patterns are used without enabling TypeApplications dynamic -Wno-deprecated-type-abstractions -Wdeprecations warn about uses of functions & types that have DEPRECATED pragmas, or WARNING pragmas with the deprecated category. dynamic -Wno-deprecations -Wderiving-defaults warn about default deriving when using both DeriveAnyClass and GeneralizedNewtypeDeriving dynamic -Wno-deriving-defaults -Wderiving-typeable warn when Typeable is derived dynamic -Wno-deriving-typeable -Wdodgy-exports warn about dodgy exports dynamic -Wno-dodgy-exports -Wdodgy-foreign-imports warn about dodgy foreign imports dynamic -Wno-dodgy-foreign-imports -Wdodgy-imports warn about dodgy imports dynamic -Wno-dodgy-imports -Wduplicate-constraints warn when a constraint appears duplicated in a type signature dynamic -Wno-duplicate-constraints -Wduplicate-exports warn when an entity is exported multiple times dynamic -Wno-duplicate-exports -Wempty-enumerations warn about enumerations that are empty dynamic -Wno-empty-enumerations -Werror make warnings fatal dynamic -Wwarn -Weverything enable all warnings supported by GHC dynamic -w -Wextended-warnings warn about uses of functions & types that have WARNING or DEPRECATED pragmas, across all categories dynamic -Wno-extended-warnings -Wextra alias for -W dynamic -Wno-extra -Wforall-identifier (deprecated) Does nothing dynamic -Wgadt-mono-local-binds warn when pattern matching on a GADT without MonoLocalBinds dynamic -Wno-gadt-mono-local-binds -Whi-shadowing (deprecated) warn when a .hi file in the current directory shadows a library dynamic -Wno-hi-shadowing -Widentities warn about uses of Prelude numeric conversions that are probably the identity (and hence could be omitted) dynamic -Wno-identities -Wimplicit-kind-vars (deprecated) warn when kind variables are implicitly quantified over. dynamic -Wno-implicit-kind-vars -Wimplicit-lift warn about implicit lift in Template Haskell quotes dynamic -Wno-implicit-lift -Wimplicit-prelude warn when the Prelude is implicitly imported dynamic -Wno-implicit-prelude -Wimplicit-rhs-quantification warn when type variables on the RHS of a type synonym are implicitly quantified dynamic -Wno-implicit-rhs-quantification -Winaccessible-code warn about inaccessible code dynamic -Wno-inaccessible-code -Wincomplete-export-warnings warn when some but not all of exports for a name are warned about dynamic -Wno-incomplete-export-warnings -Wincomplete-patterns warn when a pattern match could fail dynamic -Wno-incomplete-patterns -Wincomplete-record-selectors warn when a record selector application could fail dynamic -Wno-incomplete-record-selectors -Wincomplete-record-updates warn when a record update could fail dynamic -Wno-incomplete-record-updates -Wincomplete-uni-patterns warn when a pattern match in a lambda expression, pattern binding or a lazy pattern could fail dynamic -Wno-incomplete-uni-patterns -Winconsistent-flags warn when command line options are inconsistent in some way. dynamic -Wno-inconsistent-flags -Winferred-safe-imports warn when an explicitly Safe Haskell module imports a Safe-Inferred one dynamic -Wno-inferred-safe-imports -Winline-rule-shadowing Warn if a rewrite RULE might fail to fire because the function might be inlined before the rule has a chance to fire. See How rules interact with INLINE/NOINLINE pragmas. dynamic -Wno-inline-rule-shadowing -Winvalid-haddock warn when a Haddock comment occurs in an invalid position dynamic -Wno-invalid-haddock -Wloopy-superclass-solve (deprecated) warn when creating potentially-loopy superclass constraint evidence dynamic -Wno-loopy-superclass-solve -Wmisplaced-pragmas warn about uses of file header pragmas in the module body dynamic -Wno-misplaced-pragmas -Wmissed-extra-shared-lib Warn when GHCi can't load a shared lib. dynamic -Wno-missed-extra-shared-lib -Wmissed-specialisations warn when specialisation of an imported, overloaded function fails. dynamic -Wno-missed-specialisations -Wmissed-specializations alias for -Wmissed-specialisations dynamic -Wno-missed-specializations -Wmissing-deriving-strategies warn when a deriving clause is missing a deriving strategy dynamic -Wno-missing-deriving-strategies -Wmissing-export-lists warn when a module declaration does not explicitly list all exports dynamic -Wno-missing-export-lists -Wmissing-exported-pattern-synonym-signatures warn about pattern synonyms without signatures, only if they are exported dynamic -Wno-missing-exported-pattern-synonym-signatures -Wmissing-exported-signatures warn about top-level functions without signatures, only if they are exported dynamic -Wno-missing-exported-signatures -Wmissing-exported-sigs (deprecated) warn about top-level functions without signatures, only if they are exported. takes precedence over -Wmissing-signatures dynamic -Wno-missing-exported-sigs -Wmissing-fields warn when fields of a record are uninitialised dynamic -Wno-missing-fields -Wmissing-home-modules warn when encountering a home module imported, but not listed on the command line. Useful for cabal to ensure GHC won't pick up modules, not listed neither in exposed-modules, nor in other-modules. dynamic -Wno-missing-home-modules -Wmissing-import-lists warn when an import declaration does not explicitly list all the names brought into scope dynamic -Wno-missing-import-lists -Wmissing-kind-signatures warn when type declarations don't have kind signatures nor CUSKs dynamic -Wno-missing-kind-signatures -Wmissing-local-signatures warn about polymorphic local bindings without signatures dynamic -Wno-missing-local-signatures -Wmissing-local-sigs (deprecated) warn about polymorphic local bindings without signatures dynamic -Wno-missing-local-sigs -Wmissing-methods warn when class methods are undefined dynamic -Wno-missing-methods -Wmissing-monadfail-instances (deprecated) Warn when a failable pattern is used in a do-block that does not have a MonadFail instance. dynamic -Wno-missing-monadfail-instances -Wmissing-pattern-synonym-signatures warn when pattern synonyms do not have type signatures dynamic -Wno-missing-pattern-synonym-signatures -Wmissing-poly-kind-signatures warn when inferred polykinded type or class declaration don't have kind signatures nor CUSKs dynamic -Wno-missing-poly-kind-signatures -Wmissing-role-annotations warn when type declarations don't have role annotations dynamic -Wno-role-annotations-signatures -Wmissing-safe-haskell-mode warn when the Safe Haskell mode is not explicitly specified. dynamic -Wno-missing-safe-haskell-mode -Wmissing-signatures warn about top-level functions without signatures dynamic -Wno-missing-signatures -Wmissing-space-after-bang (deprecated) Does nothing dynamic -Wmonomorphism-restriction warn when the Monomorphism Restriction is applied dynamic -Wno-monomorphism-restriction -Wname-shadowing warn when names are shadowed dynamic -Wno-name-shadowing -Wnoncanonical-monad-instances warn when Applicative or Monad instances have noncanonical definitions of return, pure, (>>), or (*>). See flag description in Warnings and sanity-checking for more details. dynamic -Wno-noncanonical-monad-instances -Wnoncanonical-monadfail-instances (deprecated) warn when Monad or MonadFail instances have noncanonical definitions of fail. dynamic -Wno-noncanonical-monadfail-instances -Wnoncanonical-monoid-instances warn when Semigroup or Monoid instances have noncanonical definitions of (<>) or mappend. See flag description in Warnings and sanity-checking for more details. dynamic -Wno-noncanonical-monoid-instances -Wnot (deprecated) Alias for -w dynamic -Woperator-whitespace warn on prefix, suffix, and tight infix uses of infix operators dynamic -Wno-operator-whitespace -Woperator-whitespace-ext-conflict warn on uses of infix operators that would be parsed differently were a particular GHC extension enabled dynamic -Wno-operator-whitespace-ext-conflict -Worphans warn when the module contains orphan instance declarations or rewrite rules dynamic -Wno-orphans -Woverflowed-literals warn about literals that will overflow their type dynamic -Wno-overflowed-literals -Woverlapping-patterns warn about overlapping patterns dynamic -Wno-overlapping-patterns -Wpartial-fields warn when defining a partial record field. dynamic -Wno-partial-fields -Wpartial-type-signatures warn about holes in partial type signatures when PartialTypeSignatures is enabled. Not applicable when PartialTypeSignatures is not enabled, in which case errors are generated for such holes. dynamic -Wno-partial-type-signatures -Wprepositive-qualified-module Report imports with a leading/prepositive \"qualified\" dynamic -Wno-prepositive-qualified-module -Wredundant-bang-patterns Warn about redundant bang patterns. dynamic -Wno-redundant-bang-patterns -Wredundant-constraints Have the compiler warn about redundant constraints in type signatures. dynamic -Wno-redundant-constraints -Wredundant-record-wildcards Warn about record wildcard matches when the wildcard binds no patterns. dynamic -Wno-redundant-record-wildcards -Wredundant-strictness-flags Warn about redundant strictness flags. dynamic -Wno-redundant-strictness-flags -Wsafe warn if the module being compiled is regarded to be safe. dynamic -Wno-safe -Wsemigroup (deprecated) Warn when a Monoid is not Semigroup, and on non-Semigroup definitions of (<>) dynamic -Wno-semigroup -Wsimplifiable-class-constraints Warn about class constraints in a type signature that can be simplified using a top-level instance declaration. dynamic -Wno-simplifiable-class-constraints -Wstar-binder warn about binding the (*) type operator despite StarIsType dynamic -Wno-star-binder -Wstar-is-type warn when * is used to mean Data.Kind.Type dynamic -Wno-star-is-type -Wtabs warn if there are tabs in the source file dynamic -Wno-tabs -Wterm-variable-capture warn when an implicitly quantified type variable captures a term's name dynamic -Wtrustworthy-safe warn if the module being compiled is marked as Trustworthy but it could instead be marked as Safe, a more informative bound. dynamic -Wno-safe -Wtype-defaults warn when defaulting happens dynamic -Wno-type-defaults -Wtype-equality-out-of-scope warn when type equality a ~ b is used despite being out of scope dynamic -Wno-type-equality-out-of-scope -Wtype-equality-requires-operators warn when type equality a ~ b is used despite being out of scope dynamic -Wno-type-equality-requires-operators -Wtyped-holes Report warnings when typed hole errors are deferred until runtime. See -fdefer-typed-holes. dynamic -Wno-typed-holes -Wunbanged-strict-patterns warn on pattern bind of unlifted variable that is neither bare nor banged dynamic -Wno-unbanged-strict-patterns -Wunicode-bidirectional-format-characters warn about the usage of unicode bidirectional layout override characters dynamic -Wunrecognised-pragmas warn about uses of pragmas that GHC doesn't recognise dynamic -Wno-unrecognised-pragmas -Wunrecognised-warning-flags throw a warning when an unrecognised -W... flag is encountered on the command line. dynamic -Wno-unrecognised-warning-flags -Wunsafe warn if the module being compiled is regarded to be unsafe. See Safe Haskell dynamic -Wno-unsafe -Wunsupported-calling-conventions warn about use of an unsupported calling convention dynamic -Wno-unsupported-calling-conventions -Wunsupported-llvm-version Warn when using -fllvm with an unsupported version of LLVM. dynamic -Wno-unsupported-llvm-version -Wunticked-promoted-constructors warn if promoted constructors are not ticked dynamic -Wno-unticked-promoted-constructors -Wunused-binds warn about bindings that are unused. Alias for -Wunused-top-binds, -Wunused-local-binds and -Wunused-pattern-binds dynamic -Wno-unused-binds -Wunused-do-bind warn about do bindings that appear to throw away values of types other than () dynamic -Wno-unused-do-bind -Wunused-foralls warn about type variables in user-written forall\\s that are unused dynamic -Wno-unused-foralls -Wunused-imports warn about unnecessary imports dynamic -Wno-unused-imports -Wunused-local-binds warn about local bindings that are unused dynamic -Wno-unused-local-binds -Wunused-matches warn about variables in patterns that aren't used dynamic -Wno-unused-matches -Wunused-packages warn when package is requested on command line, but not needed. dynamic -Wno-unused-packages -Wunused-pattern-binds warn about pattern match bindings that are unused dynamic -Wno-unused-pattern-binds -Wunused-record-wildcards Warn about record wildcard matches when none of the bound variables are used. dynamic -Wno-unused-record-wildcards -Wunused-top-binds warn about top-level bindings that are unused dynamic -Wno-unused-top-binds -Wunused-type-patterns warn about unused type variables which arise from patterns in in type family and data family instances dynamic -Wno-unused-type-patterns -Wwarn make warnings non-fatal dynamic -Werror -Wwarnings-deprecations warn about uses of functions & types that have DEPRECATED pragmas, or WARNING pragmas with the deprecated category. Alias for -Wdeprecations. dynamic -Wno-warnings-deprecations -Wwrong-do-bind warn about do bindings that appear to throw away monadic values that you should have bound instead dynamic -Wno-wrong-do-bind -Wx-â¨categoryâ© warn about uses of functions & types that have WARNING pragmas with the given category dynamic -Wno-x-â¨categoryâ© -fasm-shortcutting Enable shortcutting on assembly. Implied by -O2. dynamic -fno-asm-shortcutting -fbinary-blob-threshold=â¨nâ© default: 500K. Tweak assembly generator for binary blobs. dynamic -fblock-layout-cfg Use the new cfg based block layout algorithm. Implied by -O. dynamic -fno-block-layout-cfg -fblock-layout-weightless Ignore cfg weights for code layout. dynamic -fno-block-layout-weightless -fblock-layout-weights Sets edge weights used by the new code layout algorithm. dynamic -fcall-arity Enable call-arity optimisation. Implied by -O. dynamic -fno-call-arity -fcase-folding Enable constant folding in case expressions. Implied by -O. dynamic -fno-case-folding -fcase-merge Enable case-merging. Implied by -O. dynamic -fno-case-merge -fcmm-control-flow Enable control flow optimisation in the Cmm backend. Implied by -O. dynamic -fno-cmm-control-flow -fcmm-elim-common-blocks Enable Cmm common block elimination. Implied by -O. dynamic -fno-cmm-elim-common-blocks -fcmm-sink Enable Cmm sinking. Implied by -O. dynamic -fno-cmm-sink -fcmm-static-pred Enable static control flow prediction. Implied by -O. dynamic -fno-cmm-static-pred -fcore-constant-folding Enable constant folding in Core. Implied by -O. dynamic -fno-core-constant-folding -fcpr-anal Turn on Constructed Product Result analysis. Implied by -O. dynamic -fno-cpr-anal -fcross-module-specialise Turn on specialisation of overloaded functions imported from other modules. Implied by -O. dynamic -fno-cross-module-specialise -fcse Enable common sub-expression elimination. Implied by -O. dynamic -fno-cse -fdicts-cheap Make dictionary-valued expressions seem cheap to the optimiser. dynamic -fno-dicts-cheap -fdicts-strict Make dictionaries strict. Implied by -O2. dynamic -fno-dicts-strict -fdmd-tx-dict-sel (deprecated) Use a special demand transformer for dictionary selectors. dynamic -fno-dmd-tx-dict-sel -fdmd-unbox-width=â¨nâ© default: 3. Boxity analysis pretends that returned records with this many fields can be unboxed. dynamic -fdo-clever-arg-eta-expansion Enable sophisticated argument eta-expansion. Implied by -O2. dynamic -fno-do-clever-arg-eta-expansion -fdo-eta-reduction Enable eta-reduction. Always enabled by default. dynamic -fno-do-eta-reduction -fdo-lambda-eta-expansion Enable lambda eta-expansion. Always enabled by default. dynamic -fno-do-lambda-eta-expansion -feager-blackholing Turn on eager blackholing dynamic -fenable-rewrite-rules Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by -O. dynamic -fno-enable-rewrite-rules -fexcess-precision Enable excess intermediate precision dynamic -fno-excess-precision -fexitification Enables exitification optimisation. Implied by -O. dynamic -fno-exitification -fexpose-all-unfoldings Expose all unfoldings, even for very large or recursive functions. dynamic -fno-expose-all-unfoldings -ffloat-in Turn on the float-in transformation. Implied by -O. dynamic -fno-float-in -ffull-laziness Turn on full laziness (floating bindings outwards). Implied by -O. dynamic -fno-full-laziness -ffun-to-thunk (deprecated) superseded by -ffull-laziness. dynamic -fno-fun-to-thunk -fignore-asserts Ignore assertions in the source. Implied by -O. dynamic -fno-ignore-asserts -fignore-interface-pragmas Ignore pragmas in interface files. Implied by -O0 only. dynamic -fno-ignore-interface-pragmas -finline-generics Annotate methods of derived Generic and Generic1 instances with INLINE[1] pragmas based on heuristics. Implied by -O. dynamic -fno-inline-generics -finline-generics-aggressively Annotate methods of all derived Generic and Generic1 instances with INLINE[1] pragmas. dynamic -fno-inline-generics-aggressively -fkeep-auto-rules Keep all \"auto\" rules, generated by specialisation dynamic -fno-keep-auto-rules -flate-dmd-anal Run demand analysis again, at the end of the simplification pipeline dynamic -fno-late-dmd-anal -flate-specialise Run a late specialisation pass dynamic -fno-late-specialise -fliberate-case Turn on the liberate-case transformation. Implied by -O2. dynamic -fno-liberate-case -fliberate-case-threshold=â¨nâ© default: 2000. Set the size threshold for the liberate-case transformation to â¨nâ© dynamic -fno-liberate-case-threshold -fllvm-pass-vectors-in-regs (deprecated) Does nothing dynamic -flocal-float-out Enable local floating definitions out of let-binds. dynamic -fno-local-float-out -flocal-float-out-top-level Enable local floating to float top-level bindings dynamic -fno-local-float-out-top-level -floopification Turn saturated self-recursive tail-calls into local jumps in the generated assembly. Implied by -O. dynamic -fno-loopification -fmax-inline-alloc-size=â¨nâ© default: 128. Set the maximum size of inline array allocations to â¨nâ© bytes (default: 128). dynamic -fmax-inline-memcpy-insns=â¨nâ© default: 32. Inline memcpy calls if they would generate no more than â¨nâ© pseudo instructions. dynamic -fmax-inline-memset-insns=â¨nâ© default: 32. Inline memset calls if they would generate no more than â¨nâ© pseudo instructions dynamic -fmax-simplifier-iterations=â¨nâ© default: 4. Set the max iterations for the simplifier. dynamic -fmax-uncovered-patterns=â¨nâ© default: 4. Set the maximum number of patterns to display in warnings about non-exhaustive ones. dynamic -fmax-worker-args=â¨nâ© default: 10. Maximum number of value arguments for a worker. dynamic -fno-opt-coercion Turn off the coercion optimiser dynamic -fno-pre-inlining Turn off pre-inlining dynamic -fno-state-hack Turn off the state hackwhereby any lambda with a real-world state token as argument is considered to be single-entry. Hence OK to inline things inside it. dynamic -fomit-interface-pragmas Don't generate interface pragmas. Implied by -O0 only. dynamic -fno-omit-interface-pragmas -fomit-yields Omit heap checks when no allocation is being performed. dynamic -fno-omit-yields -foptimal-applicative-do Use a slower but better algorithm for ApplicativeDo dynamic -fno-optimal-applicative-do -fpedantic-bottoms Make GHC be more precise about its treatment of bottom (but see also -fno-state-hack). In particular, GHC will not eta-expand through a case expression. dynamic -fno-pedantic-bottoms -fpolymorphic-specialisation Allow specialisation to abstract over free type variables dynamic -fno-polymorphic-specialisation -fregs-graph Use the graph colouring register allocator for register allocation in the native code generator. dynamic -fno-regs-graph -fregs-iterative Use the iterative coalescing graph colouring register allocator in the native code generator. dynamic -fno-regs-iterative -fsimpl-tick-factor=â¨nâ© default: 100. Set the percentage factor for simplifier ticks. dynamic -fsimplifier-phases=â¨nâ© default: 2. Set the number of phases for the simplifier. Ignored with -O0. dynamic -fsolve-constant-dicts When solving constraints, try to eagerly solve super classes using available dictionaries. Implied by -O. dynamic -fno-solve-constant-dicts -fspec-constr Turn on the SpecConstr transformation. Implied by -O2. dynamic -fno-spec-constr -fspec-constr-count=â¨nâ© default: 3.* Set to â¨nâ© the maximum number of specialisations that will be created for any one function by the SpecConstr transformation. dynamic -fno-spec-constr-count -fspec-constr-keen Specialize a call with an explicit constructor argument, even if the argument is not scrutinised in the body of the function dynamic -fno-spec-constr-keen -fspec-constr-threshold=â¨nâ© default: 2000. Set the size threshold for the SpecConstr transformation to â¨nâ©. dynamic -fno-spec-constr-threshold -fspecialise Turn on specialisation of overloaded functions. Implied by -O. dynamic -fno-specialise -fspecialise-aggressively Turn on specialisation of overloaded functions regardless of size, if unfolding is available dynamic -fno-specialise-aggressively -fspecialise-incoherents Enable specialisation on incoherent instances dynamic -fno-specialise-incoherents -fstatic-argument-transformation Turn on the static argument transformation. dynamic -fno-static-argument-transformation -fstg-cse Enable common sub-expression elimination on the STG intermediate language. Implied by -O. dynamic -fno-stg-cse -fstg-lift-lams Enable late lambda lifting on the STG intermediate language. Implied by -O2. dynamic -fno-stg-lift-lams -fstg-lift-lams-known Allow turning known into unknown calls while performing late lambda lifting. dynamic -fno-stg-lift-lams-known -fstg-lift-lams-non-rec-args Create top-level non-recursive functions with at most <n> parameters while performing late lambda lifting. dynamic -fstg-lift-lams-non-rec-args-any -fstg-lift-lams-rec-args Create top-level recursive functions with at most <n> parameters while performing late lambda lifting. dynamic -fstg-lift-lams-rec-args-any -fstrictness Turn on demand analysis. Implied by -O. Implies -fworker-wrapper dynamic -fno-strictness -fstrictness-before=â¨nâ© Run an additional demand analysis before simplifier phase â¨nâ© dynamic -funbox-small-strict-fields Flatten strict constructor fields with a pointer-sized representation. Implied by -O. dynamic -fno-unbox-small-strict-fields -funbox-strict-fields Flatten strict constructor fields dynamic -fno-unbox-strict-fields -funfolding-case-scaling=â¨nâ© default: 30. Apply a penalty of (inlining_cost * 1/n) for each level of case nesting. dynamic -funfolding-case-threshold=â¨nâ© default: 2. Reduce inlining for cases nested deeper than n. dynamic -funfolding-creation-threshold=â¨nâ© default: 750. Tweak unfolding settings. dynamic -funfolding-dict-discount=â¨nâ© default: 30. Tweak unfolding settings. dynamic -funfolding-fun-discount=â¨nâ© default: 60. Tweak unfolding settings. dynamic -funfolding-keeness-factor=â¨nâ© This has been deprecated in GHC 9.0.1. dynamic -funfolding-use-threshold=â¨nâ© default: 80. Tweak unfolding settings. dynamic -fworker-wrapper Enable the worker/wrapper transformation. Implied by -O and by -fstrictness. dynamic -fworker-wrapper-cbv Enable w/w splits for wrappers whos sole purpose is evaluating arguments. dynamic -c Stop after generating object (.o) file mode -debug Use the debugging runtime dynamic -dylib-install-name â¨pathâ© Set the install name (via -install_name passed to Apple's linker), specifying the full install path of the library file. Any libraries or executables that link with it later will pick up that path as their runtime search location for it. (Darwin/OS X only) dynamic -dynamic Build dynamically-linked object files and executables dynamic -dynload Selects one of a number of modes for finding shared libraries at runtime. dynamic -eventlog Enable runtime event tracing dynamic -fcompact-unwind Instruct the linker to produce a __compact_unwind section. dynamic -fkeep-cafs Do not garbage-collect CAFs (top-level expressions) at runtime dynamic -flink-rts Link the runtime when generating a shared or static library dynamic -fno-embed-manifest Do not embed the manifest in the executable (Windows only) dynamic -fno-gen-manifest Do not generate a manifest file (Windows only) dynamic -fno-shared-implib Don't generate an import library for a DLL (Windows only) dynamic -framework â¨nameâ© On Darwin/OS X/iOS only, link in the framework â¨nameâ©. This option corresponds to the -framework option for Apple's Linker. dynamic -framework-path â¨dirâ© On Darwin/OS X/iOS only, add â¨dirâ© to the list of directories searched for frameworks. This option corresponds to the -F option for Apple's Linker. dynamic -fsplit-sections, -split-sections Split sections for link-time dead-code stripping dynamic -fno-split-sections -fuse-rpaths Set the rpath based on -L flags dynamic -fwhole-archive-hs-libs When linking a binary executable, this inserts the flag -Wl,--whole-archive before any -l flags for Haskell libraries, and -Wl,--no-whole-archive afterwards dynamic -L â¨dirâ© Add â¨dirâ© to the list of directories searched for libraries dynamic -l â¨libâ© Link in library â¨libâ© dynamic -main-is â¨thingâ© Set main module and function dynamic -no-hs-main Don't assume this program contains main dynamic -no-pie Don't instruct the linker to produce a position-independent executable. dynamic -pie -no-rtsopts-suggestions Don't print RTS suggestions about linking with -rtsopts[=â¨none|some|all|ignore|ignoreAllâ©]. dynamic -package â¨nameâ© Expose package â¨pkgâ© dynamic -pie Instruct the linker to produce a position-independent executable. dynamic -no-pie -rdynamic This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table. Currently Linux and Windows/MinGW32 only. This is equivalent to using -optl -rdynamic on Linux, and -optl -export-all-symbols on Windows. dynamic -rtsopts[=â¨none|some|all|ignore|ignoreAllâ©] Control whether the RTS behaviour can be tweaked via command-line flags and the GHCRTS environment variable. Using none means no RTS flags can be given; some means only a minimum of safe options can be given (the default); all (or no argument at all) means that all RTS flags are permitted; ignore means RTS flags can be given, but are treated as regular arguments and passed to the Haskell program as arguments; ignoreAll is the same as ignore, but GHCRTS is also ignored. -rtsopts does not affect -with-rtsopts behavior; flags passed via -with-rtsopts are used regardless of -rtsopts. dynamic -shared Generate a shared library (as opposed to an executable) dynamic -single-threaded Use the single-threaded runtime dynamic -threaded -static Use static Haskell libraries dynamic -staticlib Generate a standalone static library (as opposed to an executable). This is useful when cross compiling. The library together with all its dependencies ends up in in a single static library that can be linked against. dynamic -threaded Use the threaded runtime dynamic -single-threaded -with-rtsopts=â¨optsâ© Set the default RTS options to â¨optsâ©. dynamic"
    }
}