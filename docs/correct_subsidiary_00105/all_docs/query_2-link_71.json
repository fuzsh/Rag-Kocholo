{
    "id": "correct_subsidiary_00105_2",
    "rank": 71,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/949305.949326",
        "read_more_link": "",
        "language": "en",
        "title": "Proceedings of the 18th annual ACM SIGPLAN conference on Object-oriented programing, systems, languages, and applications",
        "top_image": "https://dl.acm.org/cms/asset/bdfff8a6-bf03-4ebe-bce8-c582a3702973/949305.cover.jpg",
        "meta_img": "https://dl.acm.org/cms/asset/bdfff8a6-bf03-4ebe-bce8-c582a3702973/949305.cover.jpg",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100628167&format=rel-imgonly&assetId=dfb-1.jpg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100575938&format=rel-imgonly&assetId=davegrove.jpg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100586340&format=rel-imgonly&assetId=glssmallheadshot2015.jpeg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100628167&format=rel-imgonly&assetId=dfb-1.jpg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100575938&format=rel-imgonly&assetId=davegrove.jpg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "John Corwin",
            "David F. Bacon",
            "David Grove",
            "Chet Murthy"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM Conferences",
        "canonical_link": "https://dl.acm.org/doi/10.1145/949305.949326",
        "text": "Abstract\n\nWhile Java provides many software engineering benefits, it lacks a coherent module system and instead provides only packages (which are primarily a name space mechanism) and classloaders (which are very low-level). As a result, large Java applications suffer from unexpected interactions between independent components, require complex CLASSPATH definitions, and are often extremely complex to install and maintain. We have implemented a module system for Java called MJ that is implemented with class loaders, but provides a much higher-level interface. High-level properties can be specified in a module definition and are enforced by the module system as new modules are loaded. To experimentally validate the ability of MJ to properly handle the complex module inter-relationships found in large Java server systems, we replaced the classloader mechanisms of Apache Tomcat 4.1.18 [27] with 30 MJ modules. The modified Tomcat is functionally identical to the original, but requires no CLASSPATH definitions, and will operate correctly even if user code loads a different version of a module used by Tomcat, such as the Xerces XML parser [31]. Furthermore, by making a small change to the Java core libraries enabled by MJ, we obtained a 30% performance improvement in a servlet microbenchmark.\n\nReferences\n\n[1]\n\nAncona, D., and Zucca, E. True modules for Java-like languages. In 15th European Conference on Object-Oriented Programming (2001).]]\n\n[2]\n\nBarnes, J. Programming in Ada 95. Addison-Wesley, 1996.]]\n\n[3]\n\nBauer, L., Appel, A. W., and Felten, E. W. Mechanisms for secure modular programming in Java. Tech. Rep. Tech Report TR-603-99, Princeton University, Department of Computer Science, July 1999.]]\n\n[4]\n\nClifton, C., Leavens, G. T., Chambers, C., and Millstein, T. MultiJava: modular open classes and symmetric multiple dispatch for Java. ACM SIGPLAN Notices 35, 10 (Oct. 2000), 130--145. Published as part of the Proceedings of OOPSLA'00.]]\n\n[5]\n\nCorba. http://www.omg.org/gettingstarted/corbafaq.htm.]]\n\n[6]\n\nDebian. http://www.debian.org/.]]\n\n[7]\n\nDetlefs, D., and Agesen, O. Inlining of virtual methods. In 13th European Conference on Object-Oriented Programming (June 1999), pp. 258--278.]]\n\n[8]\n\nEclipse. http://www.eclipse.org.]]\n\n[9]\n\nFindler, R. B., and Flatt, M. Modular object-oriented programming with units and mixins. ACM SIGPLAN Notices 34, 1 (Jan. 1999), 94--104.]]\n\n[10]\n\nAdvanced classloading in J2EE. http://www.theserverside.com/resources/articles/AdvancedClassLoading/article.html.]]\n\n[11]\n\nFlatt, M., and Felleisen, M. Units: Cool modules for HOT languages. ACM SIGPLAN Notices 33, 5 (May 1998), 236--248. Published as part of the Proceedings of PLDI'98.]]\n\n[12]\n\nGosling, J., Joy, B., and Steele, G. The Java Language Specification. Addison Wesley, 1996.]]\n\n[13]\n\nHarrison, S. Modula-3. Prentice Hall, 1991.]]\n\n[14]\n\nHudak, P., and Wadler, P. Report on the programming language Haskell. Tech. Rep. Yale/DCS/RR777, Yale University, Department of Computer Science, Aug. 1991.]]\n\n[15]\n\nIONA Orbix. http://www.iona.com.]]\n\n[16]\n\nIshizaki, K., Kawahito, M., Yasue, T., Komatsu, H., and Nakatani, T. A study of devirtualization techniques for a Java Just-In-Time compiler. ACM SIGPLAN Notices 35, 10 (Oct. 2000), 294--310. Published as part of the Proceedings of OOPSLA'00.]]\n\n[17]\n\nJdbc drivers: How do you know what you need? http://archive.devx.com/dbzone/articles/dd_jdbc/sosinsky-2.asp.]]\n\n[18]\n\nLiang, S., and Bracha, G. Dynamic class loading in the Java Virtual Machine. ACM SIGPLAN Notices 33, 10 (Oct. 1998), 36--44.]]\n\n[19]\n\nLindholm, T., and Yellin, F. The Java Virtual Machine Specification Second Edition. The Java Series. Addison-Wesley, 1999.]]\n\n[20]\n\nMacQueen, D. Modules for standard ml. In Proceedings of ACM Conference on Lisp and Functional Programming (1984), pp. 409--423.]]\n\n[21]\n\nMcDirmid, S., Flatt, M., and Hsieh, W. C. Jiazzi: new-age components for old-fashioned Java. ACM SIGPLAN Notices 36, 11 (Nov. 2001), 211--222. Proceedings of the 2001 ACM SIGPLAN Conference on Object Oriented Programming, Systems, Languages and Applications (OOPSLA'01).]]\n\n[22]\n\nMicrosoft COM: Component object model. http://www.microsoft.com/com.]]\n\n[23]\n\nMillstein, T., and Chambers, C. Modular statically typed multimethods. Information and Computation 175, 1 (May 2002), 76--118.]]\n\n[24]\n\nMilner, R., Tofte, M., and Harper, R. The Definition of Standard ML. MIT Press, 1990.]]\n\n[25]\n\nRobinson, R. Developing and deploying modular J2EE applications with WebSphere Studio Application Developer and WebSphere Application Server. http://www7b.software.ibm.com/wsdd/library/techarticles/-0206\\_robinson/robinson.html.]]\n\n[26]\n\nSeco, J. C., and Caires, L. A basic model of typed components. In 14th European Conference on Object-Oriented Programming (2000).]]\n\n[27]\n\nTomcat. http://jakarta.apache.org/tomcat/.]]\n\n[28]\n\nVisigenic. http://www.borland.com/corba/index.html.]]\n\n[29]\n\nWebSphere application server. http://www.ibm.com/software/websphere.]]\n\n[30]\n\nWirth, N. Programming in Modula-2. Springer-Verlag, 1983.]]\n\n[31]\n\nXerces. http://xml.apache.org/.]]\n\nCited By\n\nView all\n\nSharma DLohchab SA Search-Based Approach on Metaheuristic Algorithm for Software Modularization to optimize Software Modularity2022 6th International Conference on Computing Methodologies and Communication (ICCMC)10.1109/ICCMC53470.2022.9753800(1440-1450)\n\nDann AHermann BBodden EModGuard : Identifying Integrity & Confidentiality Violations in Java ModulesIEEE Transactions on Software Engineering10.1109/TSE.2019.293133147:8(1656-1667)\n\nPrajapati AChhabra JOptimizing Software Modularity with Minimum Possible VariationsJournal of Intelligent Systems10.1515/jisys-2018-023129:1(1135-1150)\n\nShow More Cited By\n\nIndex Terms\n\nMJ: a rational module system for Java and its applications\n\nSoftware and its engineering\n\nSoftware notations and tools\n\nGeneral programming languages\n\nLanguage features\n\nModules / packages\n\nLanguage types\n\nRecommendations\n\nMJ: a rational module system for Java and its applications\n\nSpecial Issue: Proceedings of the OOPSLA '03 conference\n\nWhile Java provides many software engineering benefits, it lacks a coherent module system and instead provides only packages (which are primarily a name space mechanism) and classloaders (which are very low-level). As a result, large Java applications ...\n\nEvaluating the Java Native Interface JNI: Leveraging Existing Native Code, Libraries and Threads to a Running Java Virtual Machine\n\nThis article aims to explore JNI features and to discover fundamental operations of the Java programming language, such as arrays, objects, classes, threads and exception handling, and to illustrate these by using various algorithms and code samples. ...\n\nThe jastadd extensible java compiler\n\nOOPSLA '07: Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems, languages and applications\n\nThe JastAdd Extensible Java Compiler is a high quality Java compiler that is easy to extend in order to build static analysis tools for Java, and to extend Java with new language constructs. It is built modularly, with a Java 1.4 compiler that is ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n430 pages\n\nISBN:1581137125\n\nDOI:10.1145/949305\n\nConference Chair:\n\nRon Crocker\n\nMotorola, Inc.\n\n,\n\nProgram Chair:\n\nGuy L. Steele\n\nSun Microsystems Laboratories\n\n417 pages\n\nISSN:0362-1340\n\nEISSN:1558-1160\n\nDOI:10.1145/949343\n\nIssue’s Table of Contents\n\nCopyright © 2003 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected]\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 26 October 2003\n\nPermissions\n\nRequest permissions for this article.\n\nCheck for updates\n\nAuthor Tags\n\nJava\n\ncomponents\n\nlanguage design\n\nmodularity\n\nQualifiers\n\nArticle\n\nConference\n\nOOPSLA03\n\nAcceptance Rates\n\nOOPSLA '03 Paper Acceptance Rate 26 of 147 submissions, 18%;\n\nOverall Acceptance Rate 268 of 1,244 submissions, 22%\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n35\n\nTotal Citations\n\nView Citations\n\n850\n\nTotal Downloads\n\nDownloads (Last 12 months)5\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nSharma DLohchab SA Search-Based Approach on Metaheuristic Algorithm for Software Modularization to optimize Software Modularity2022 6th International Conference on Computing Methodologies and Communication (ICCMC)10.1109/ICCMC53470.2022.9753800(1440-1450)\n\nDann AHermann BBodden EModGuard : Identifying Integrity & Confidentiality Violations in Java ModulesIEEE Transactions on Software Engineering10.1109/TSE.2019.293133147:8(1656-1667)\n\nPrajapati AChhabra JOptimizing Software Modularity with Minimum Possible VariationsJournal of Intelligent Systems10.1515/jisys-2018-023129:1(1135-1150)\n\nDamiani FPoetzsch-Heffter AWelsch YOssowski SLecca PA type system for checking specialization of packages in object-oriented programmingProceedings of the 27th Annual ACM Symposium on Applied Computing10.1145/2245276.2232058(1737-1742)\n\nKästner CApel SOstermann KThe road to feature modularity?Proceedings of the 15th International Software Product Line Conference, Volume 210.1145/2019136.2019142(1-8)\n\nBracha Gvon der Ahé PBykov VKashai YMaddox WMiranda EModules as objects in newspeakProceedings of the 24th European conference on Object-oriented programming10.5555/1883978.1884007(405-428)\n\nSutherland DScherlis WComposable thread coloringACM SIGPLAN Notices10.1145/1837853.169348545:5(233-244)\n\nSutherland DScherlis WGovindarajan RPadua DHall MComposable thread coloringProceedings of the 15th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming10.1145/1693453.1693485(233-244)\n\nZhou JZhao DJi YLiu JExamining OSGi from an ideal enterprise software component model2010 IEEE International Conference on Software Engineering and Service Sciences10.1109/ICSESS.2010.5552372(119-123)\n\nJingang Zhou Yong Ji Dazhe Zhao Jiren Liu Using AOP to ensure component interactions in component-based software2010 The 2nd International Conference on Computer and Automation Engineering (ICCAE)10.1109/ICCAE.2010.5452043(518-523)\n\nShow More Cited By\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nJohn Corwin\n\nIBM\n\nDavid F. Bacon\n\nIBM\n\nDavid Grove\n\nIBM\n\nChet Murthy\n\nIBM\n\nRequest permissions Authors Info & Affiliations"
    }
}