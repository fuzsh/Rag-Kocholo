{
    "id": "correct_subsidiary_00105_2",
    "rank": 61,
    "data": {
        "url": "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/interbase.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Using InterBase with dBASE",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/intsql1.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/intsql2.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/bde1.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/bde2.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/bde3.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/servman1.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/servman2.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/user1.gif",
            "https://www.dbase.com/Knowledgebase/adv/using_interbase_w_dbase/user2.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Last Modified: April 26, 1999\n\nKen Mayer, Senior SQA Engineer\n\ndBASE, Inc.\n\nNote: This was written for Visual dBASE 7, but little has changed, and it should work for more recent versions of dBASE just fine.\n\nExample files available in SampleIBApp.zip\n\nThe Menu\n\nThis is a pretty lengthy document, so in order to help out, here's a menu ... click on the links to go to specific topics. Note that some of this document is sort of aimed at being a \"follow along and try this out\", but it's really meant to be more of a general resource. The code examples shown have been tested, so the author knows that they work.\n\nBefore You Spend Much Time Here ... Don't skip this one ... The Purpose of this Document Server, Client ... What's the Difference? Some Differences Between Local Tables and an InterBase Database Server Configuration Creating an InterBase Database\n\nCreate a BDE Alias\n\nCreate Tables\n\nActivate the Database Using the Design Surface Using Local SQL To Create a Table Using OODML Objects A Comparison of Field Types\n\nUsing InterBase Tables in Visual dBASE 7 Moving Data From Local Tables to an InterBase Database Users Deploying InterBase With Your Application Miscellaneous Information That May Prove Useful A Sample Application Summary\n\nBefore You Spend Much Time Here ...\n\nThis document was written with the understanding that you have the Client/Server edition of Visual dBASE 7, which means that you have the SQL Links package and the InterBase software itself (see below for simple instructions to install them if you have not done so already), OR you have the SQL Links package and InterBase software from an Inprise/Borland software package (Delphi, JBuilder, etc.) and want to use it with Visual dBASE 7. If you do not, then you will not be able to do much with this information.\n\nNote that the InterBase server that ships with Visual dBASE and Inprise/Borland products has a five user license -- meaning you can only have a total of five users accessing the server at one time. This version is provided for modelling, creating, and testing an application. This is also the local InterBase server.\n\nIf you are going to actually use InterBase in a real-world situation with multiple users and such, you will need to contact InterBase about licensing -- they have a pretty fair licensing schedule that will allow \"n\" users at a good price. There is a remote database server as well -- see InterBase for details. They also have a special \"Web\" license if you wish to use InterBase as the database engine for an internet application. You can contact InterBase at http://www.interbase.com.\n\nIf you are writing a single-user system, you may not wish to spend the effort involved in using InterBase. While there are some useful functionality gains if you use InterBase, you can get most or all of the same functionality with .DBF tables, without the extra blood, sweat and tears involved in setting up an application to use the InterBase server, databases, and so on ...\n\nBack To the Menu\n\nThe Purpose of this Document\n\nThis document is aimed at the Visual dBASE 7 developer who wishes to use InterBase as their database server. However, many of the concepts discussed here may be useful for other remote database engines ... exact implementation will be different, available field types will be different, but many of the concepts should be the same.\n\nIn addition to this document, I heartily recommend the paper by Alan Katz on Upsizing from dBASE to InterBase presented at ICon 98 -- it covers some of what I will be covering here (I borrowed some ideas from Alan's paper and tried to expand on some of them here), and it also discusses things not covered here. Until Alan gets the paper on the dBASE, Inc. website, this paper can be found at http://www.interbase.com/downloads/dbase.pdf.\n\nInterBase itself is a very powerful, small, and fast remote database server. However, if you are used to working only with local tables, like most dBASE developers, then moving to InterBase is going to be a bit of a leap.\n\nUnfortunately, a lot of the documentation that ships with InterBase assumes that you will be using Delphi, JBuilder, or C++ Builder to work with InterBase, which is why this document is being written ...\n\nOne further note -- this document will NOT be covering every single detail of using InterBase databases and tables, as it is contained in the InterBase documentation, and this document is simply aimed at getting a dBASE developer up and running. For anything else you will have to spend some time with the InterBase manuals ... This is a very feature-rich database environment, and well worth getting into in more detail.\n\nThere is a lot of documentation that comes with InterBase in .PDF file format (Acrobat). There is also a version of the Acrobat reader on the CD (Visual dBASE, Delphi, etc.) that has InterBase. You should install that as well as the documentation (if you don't have a more recent version of the Acrobat Reader).\n\nThis document will attempt to explain the basics of creating a database, creating your BDE Alias to communicate with the database, and using InterBase tables with Visual dBASE. (Note: If you have later versions (5.x) of InterBase, the images shown here will not be 100% accurate, as there are now ToolBars on a lot more of the InterBase tool screens, but the functionality is pretty much the same.) Note that this document is not a tutorial, however, it is an attempt to put all the information you need to get started in one place.\n\nWhat This Document Assumes\n\nThis document makes some assumptions about you, the reader ... these are:\n\nYou have installed InterBase 4.2 on your machine (although later versions of InterBase should not be all that different), and that you now need to learn how to start using InterBase as your database server with Visual dBASE as your front-end. You have installed Visual dBASE (7.0/7.01) and the BDE (4.5 or later) You have installed the SQL Links (On the VdBASE 7.0/7.01 Client/Server CD) You have installed InterBase 4.2 (On the VdBASE 7.0/7.01 Client/Server CD) You have the InterBase server running (open the InterBase folder/group and double-click the \"InterBase Server\" icon -- if running Win 95, Win 98, or Windows NT 4, you will most likely see a small InterBase icon in the task tray of the task bar (down by the clock). If you are running Windows NT 3.51 you will see an icon somewhere on the screen that reflects the fact that the server is operating.)\n\nNote: To stop the InterBase server -- right click on the icon in the task tray and select the Shutdown option in the popup menu.\n\nInstalling SQL Links and InterBase\n\nIf you are not sure you have installed SQL Links or InterBase, or if you know you did not (or later removed them), you can install just those software elements.\n\nNormally when you place the Visual dBASE 7 CD into the computer, it will \"autostart\" with a small front-end screen. If you do not see this, you can run it by going to the CD and running the start program from there.\n\nFor SQL Links, start the Visual dBASE install process, and when you get to the question about \"Typical\", \"Custom\" and \"Compact\", select \"Custom\", unselect Visual dBASE and the BDE (if VdBASE is working with your tables, then the BDE is installed ... no need to re-install it), and other options except for SQL Links -- i.e., just install the SQL Links.\n\nTo install the InterBase software, there is a separate installation option for InterBase from the dialog that starts up when you insert the CD into the drive. Select this option and install InterBase ...\n\nBack To the Menu\n\nServer, Client ... What's the Difference?\n\nA Client is a computer connected through a network or possibly even through the Internet (which is a network, after all) to a Server. Another way of looking at a Client is as \"an application process that uses the InterBase client library, directly or via a middleware interface, to establish a communcation channel to an InterBase server. The connection can be local if the application executes on the same node as the InterBase server, or remote if the application must use a network to connect to the InterBase server.\" (From the InterBase Operations Guide)\n\nNOTE: This document is assuming that you are running the InterBase server locally (on your own computer). There is documentation on running InterBase as a remote server (i.e., on another computer on the network), but we won't get into it here (see the InterBase documentation -- you will probably also require a different license to use this functionality).\n\n\"The InterBase server is a software process that executes on the node that hosts the storage space for databases. The server process is the only process on any node that can perform direct I/O to the database files.\" (InterBase Operations Guide)\n\nSo what's that mean in English? It means you have two applications running instead of one. One application runs where the data is located (InterBase) and one application runs where the user is located (Visual dBASE, or some other application, such as one you create using Visual dBASE ...).\n\nFor our purposes, you must also have the BDE (Borland Database Engine), which will normally, when you install it (from the Client/Server CD -- see above) include a SQL Link driver for InterBase (and some other major RDBMS engines), which is a native (to the BDE) driver created to interact with the InterBase server. The BDE is effectively the \"middle-ware\" mentioned earlier ...\n\nBack To the Menu\n\nSome Differences Between Local Tables and an InterBase Database\n\nThere are some very major differences between local tables and databases, and InterBase (and other remote database) tables and databases.\n\nA database is a collection of tables -- this is a term most of us are quite familiar with.\n\nWhen you are using local tables (.DBFs and .DBs) what you see when you look in a directory that contains your data is a whole bunch of files (tables, index files, other files depending on the table type). This directory would contain your database.\n\nIf you use an InterBase database, you will see a single file with a .GDB extension. This is the InterBase database file. It will contain your tables and indexes and all the data.\n\nIt is worth noting that, while .gdb is the traditional file extension and is what is set up in the registry, InterBase doesn't care about the file extension. It will happily use whatever file you give it, so long as it is the correct internal format. You could, for example, name an InterBase database DATA.TXT (a very bad idea) and InterBase would work with it, so long as it was an actual InterBase database.\n\nIf you use local tables, you can create a BDE Alias to point to a directory where the tables are (which is recommended, by the way), or you can ignore that capability completely (although if you may be considering upsizing your application to InterBase or some other database server, you should be using this feature, and in general it's a good idea to use this feature anyway ...).\n\nIf you use an InterBase database, you cannot ignore this feature at all. It is required (among other things, you must specify the type of database for the BDE so that it knows what to do ...).\n\nIf you set referential integrity rules in local tables via the BDE, it may be possible to open those tables using other software that does not use the BDE -- your RI rules can be gotten around (and if the DBF7 table specifications are released to the public, it will be easier to do this). If you set RI rules in your code (in datamodules, etc.), then even if the user uses the BDE, they can get around your rules.\n\nIf you set referential integrity rules in InterBase tables at the server (there are a variety of ways to do this, some are discussed here, everything is in the InterBase documentation), it is all handled through the InterBase Server, and the only way to access those tables is via the InterBase server -- which means that there is no way that users can get around the RI rules ... (note, however that if you do the RI rules in your code, that users will be able to get around them ...).\n\nThere are other differences covered by Alan Katz' paper (mentioned earlier in this document) between these types of databases. You should read up on these. There are some strong advantages to using InterBase ...\n\nBack To the Menu\n\nServer Configuration\n\nThis information is actually covered in a lot of detail in the Operations Guide (that thin InterBase book that should have shipped with your Client/Server edition of dBASE). Therefore I am only going to very briefly examine it ...\n\nYou can configure the InterBase server to start each time Windows starts, or to start manually. If you are going to run an application on a regular basis on a network, you probably want this to happen automatically. If you deploy InterBase for use with your application, you will probably want this to start automatically as well (you will need to see the InterBase documentation for this). The InterBase server does not take a lot of resources, so it is not hogging memory while it is running, and should not interfere with other applications. The chances are your client(s) may never even notice it is there.\n\nIn addition, under Windows NT you can have the InterBase server load as a service, rather than as an application. (If you don't know what this means, check your NT documentation -- I'm not getting into it here ...)\n\nIf you are using Windows 95/98 or NT 4.0, the InterBase server will appear when running, as an icon in the Task Tray of the Task Bar.\n\nWhen the InterBase Server is running you can right click on it and a small popup menu will appear - if you select the Startup Configuration option, you can select the method for starting InterBase. If you do not wish it to start automatically, make sure you select \"Manual\" ...\n\nBack To the Menu\n\nInterBase Software\n\nOpen the InterBase group (or folder), and notice that there are quite a few files in there. Among them is the InterBase Server, InterBase Windows ISQL, and the InterBase Server Manager. These three applications are the ones that you will have to use, but two of them you won't need to use much, as we can do most of what we need in Visual dBASE itself.\n\nThe InterBase Server\n\nIf you have not started the InterBase Server already, double-click the icon for this program (or if you are using the \"Start\" menu simply click on it). You won't see much, if anything, happen -- but if you check your Task Tray in the Task Bar, you should see a new icon ...\n\nThe InterBase Server must be running for you to do anything with databases, tables, etc. It is also necessary for the ISQL Window and Server Manager ...\n\nInterBase Windows ISQL\n\nThis is a small program that handles InterBase SQL commands and sends them to the InterBase Server. You can use this to create databases (see below), and to create and manipulate tables in those databases.\n\nWe will only be using it here to create a database itself, as you cannot do this directly from dBASE. All of our table manipulation will be done from within dBASE either through the OODML, local SQL, or through a pass-through method of sending commands directly to the InterBase Server.\n\nThe InterBase Server Manager\n\nThis program is designed to handle various aspects of the InterBase Server, among them setting up userids. We will look at the userid aspect later in this document.\n\nBack To the Menu\n\nCreating an InterBase Database\n\nIn order to create and manipulate tables, you must first have a database. You must also have the InterBase server running, or none of the following will work.\n\nIn order to create a database, you must have a valid userid and password. InterBase has the default administrator userid \"SYSDBA\" and password \"masterkey\" (note -- the security functions for InterBase are case sensitive -- the password \"masterkey\" must be entered in lower case). If you wish to create new userids, you do this through the InterBase Server Manager -- we will discuss this later in this document. No matter what, you must have at least one valid id when you create the database. (NOTE: the InterBase documentation recommends that you change the password from \"masterkey\" to something else -- we will discuss how to do this later, but for now we'll use the default password for testing ...)\n\nIf you double click on the \"InterBase ISQL Window\" icon in the InterBase group, you should see:\n\nUsing the ISQL Window, you can create a database through the File menu, selecting the \"Create Database ...\" option. A dialog will appear that looks like:\n\nIf you are creating the database locally (on the local machine), then all that is necesary is the full path to the location of the database. Remember that a database is a file with an extension \".GDB\" -- if you leave this off, InterBase will still work with it, but it will not be automatically recognized by Windows as an InterBase database.\n\nAn example might be (the directory \"c:\\MyTest\" must exist -- the ISQL window will not create the directory for you):\n\nc:\\MyTest\\testdata.gdb\n\nWhen starting out, you should leave the other options at the top of the dialog empty (they deal with remote InterBase servers) -- once you become more familiar with InterBase, you may want to explore these (and if you will be deploying to a network you will need to understand these).\n\nMake sure you have a valid userid and password entered, and click the \"OK\" button.\n\nThe status line at the bottom of the ISQL window will show you the database you are currently connected to:\n\nDatabase: c:\\MyTest\\testdata.gdb\n\n(You could, from here, create tables, add data, and more -- but this requires a good knowledge of SQL -- one of the advantages to using dBASE is that you do not need to know a lot of SQL to get your work done ... that said, you will need to know some SQL to work with InterBase (and other remote databases).)\n\nAt this point, to use your InterBase database with dBASE, you do not need the ISQL Window running, so you can close it.\n\nBack To the Menu\n\nCreate a BDE Alias\n\nThe next thing you need to do is to create a BDE Alias for your InterBase database. This is what you will use in dBASE to connect to the database, add tables, etc.\n\nA BDE Alias is how you address the database from within your application -- you will assign a name to the alias, and when you reference the database in Visual dBASE, it will be by that name ... the BDE will handle the rest.\n\nThere are a couple of ways you can create a BDE Alias. The first is through the administrator, the other is programmatically (using a custom control (from the dUFLP library) that is included with this HOW TO document).\n\nCreate a BDE Alias Using the BDE Administrator\n\nOne method of doing this is using the BDE Administrator. This requires that you bring the BDE Administrator on screen (this is in the Visual dBASE 7 group or folder ...).\n\nRight click on the left pane of the BDE Administrator, and select the \"New\" option. When the \"New Database Alias\" window comes up, make sure that you select the INTRBASE driver (it must be in all caps and say \"INTRBASE\" -- the Visigenic drivers are ODBC (non-native, therefore slower) and so far no one I know has gotten these to work properly).\n\nNOTE: If you do not see \"INTRBASE\" in the combobox for the dialog, then you do not have the SQL Links installed -- see instructions given above ...\n\nThe screen should look like this:\n\nClick \"OK\" and then, in the left pane of the BDE Administrator, type the name of the desired alias, \"TestData\". The BDE Administrator will now look like:\n\nNext you'll need to set the \"SERVER NAME\" in the right pane of the BDE Administrator. This will be the complete path and file name of the database you just created. This has already been done in the above illustration. (If using remote servers this needs to have the server's name before the path to the database (i.e., MyServer:c:/MyTest/testdata.gdb)).\n\nYou may want to set the Language Driver (\"'W Europe' ANSI\" is a useful driver -- it handles most or all of the Windows character set quite well ...), and you may want to set the default user name (SYSDBA, for example).\n\nOnce you have done this, make sure you apply your changes with either <Ctrl>+A or use the \"Object\" menu and select \"Apply\".\n\nIf you are not sure it worked, try double-clicking on the name of the database in the left pane. You will be prompted for a userid/password to log in (SYSDBA/masterkey) -- enter them, and you should find yourself logged in to the database. If not, an error will occur.\n\nBack To the Menu\n\nCreate a BDE Alias for the Database Programmatically\n\nAnother method of creating your alias is programmatically. This can be useful if you have a need to create aliases on the fly, and so on. This is done with the use of a special custom class file: BDEALIAS.CC.\n\nThis file, which is a part of the dUFLP library (at the author's website), contains BDE API calls which can create a database for you, and more. There is a copy of this file included with this HOW TO document (but you should compare it against the version in the dUFLP library, as it may be updated periodically, either to enhance the already existing code, or to add functionality).\n\nNOTE: For some reason, programmatically setting the language driver either does not work, or works intermittantly ... however, setting the language driver manually through the BDE Administrator does appear to work. There does not seem to be any rhyme or reason for why ... we are removing the \"LANGDRIVER\" option until a reason can be found for this not working and/or a fix can be found to make it work ...\n\nTo use this, you need to create an instance of the BDEALIAS object, and then use the methods that are coded into the class. We are going to use the \"createAlias\" method ...\n\nNOTE: The actual database must exist already ...\n\nset procedure to BDEAlias.cc additive b = new BDEAlias() cIPath = \"c:\\MyTest;\"+; \"SERVER NAME:c:\\MyTest\\testdata.gdb;\"+; \"USER NAME:SYSDBA;\"+; \"SQLQRYMODE:SERVER;\"+; \"SQLPASSTHRU MODE:SHARED NOAUTOCOMMIT\" // by using the ? command, we can see if the // method returns a true or false -- if true, we were // successful, if false, we were not. ? b.createAlias( \"TESTDATA\", cIPath, \"INTRBASE\" ) // this is just to see if it worked -- you // would probably want to create an instance of // a database object and so on in your code ... // for a real application you wouldn't want these // two statements: open database \"TESTDATA\" close database \"TESTDATA\"\n\nThe last parameter in the createAlias() method is the SQL Link driver name. If you wanted to use this for a different database and you knew the name of the driver (as it appears in the BDE Administrator), you could just substitute the driver name here. The required parameters noted in the \"cIPath\" variable above are specific to the InterBase server. If you were working on a remote server you would need to preface the path in both places shown (\"c:/MyTest\") with the name of the server on the network (\"someserver:c:/MyTest\"). This parameter, if ignored, defaults to \"DBASE\".\n\nThere are other settings you might wish to use here ... you would want to check the BDE Administrator and any documentation for InterBase to be certain.\n\nThis custom control also has the ability to delete a BDE alias, and provide some pretty specific information about the alias. See the internal documentation (at the beginning of the .CC file) ...\n\nBack To the Menu\n\nCreating Tables\n\nAt this point it is assumed that you know what your table design will be. This document is not aimed at discussions of proper table design, relational table design, etc. Note, however, that you can create some relational integrity rules with InterBase tables that will always be enforced. You will want to read the documentation, but there is no way around these rules once set, as opposed to .DBF tables, where you can usually open the tables separately and bypass most or all RI (Referential Integrity) rules that have been set (depending on how/where the rules were created).\n\nYou can create tables in several ways in Visual dBASE -- you can use the design surfaces, you can use local SQL, or you can use the OODML objects and their methods. Some SQL commands need to be passed directly to the InterBase Server, however ... (using the database object's executeSQL() method, or the SQLExec() function).\n\nActivating the Database\n\nIt is necessary, if using either the design surface or local SQL to create tables, to activate the database in the IDE. There are two ways to do this. The first is to click on the \"Tables\" tab in the navigator, and in the \"Look In\" combobox, you will see a Database icon, with the name of your database (this assumes you have created the BDE Alias noted elsewhere in this document). The other is to type in the command window:\n\nOPEN DATABASE yourbdealiasname\n\nIn either case, doing so will ask for userid and password to login to the database.\n\nIt is a good idea, once the database is open, particularly if you use the \"OPEN DATABASE\" command, to also use the \"SET DATABASE\" command to point to your alias -- if you do this, then you do not need a database reference for your table when using local SQL to open the tables.\n\nOnce the database is open, any table you create will default to being in that database, and in that database format.\n\nVERY IMPORTANT NOTE: If you exit dBASE without closing the database, the next time you start dBASE up it will attempt to open the database again (and in the case of InterBase, it will ask for a username/password). Before you exit, you should close the database (in the command window: CLOSE DATABASE).\n\nBack To the Menu\n\nUsing the Design Surface\n\nAt this point, you can create a table using the design surface in the usual manner -- either by using the \"Tables\" tab of the Navigator and double-clicking the \"Untitled\" table icon (note that the appearance of the icon is a bit different than it is when using local tables), or by entering in the Command Window the command:\n\nCREATE tablename\n\nWhen you do this, the table designer will come up, but notice that the possible field types are different from what you are used to, and if you look at the Inspector, the options allowed are different. (See discussion on field types below.)\n\nNote that while you can create indexes here, for whatever reason, they will not appear in the Index column like they do with local DBF and DB tables.\n\nBack To the Menu\n\nUsing Local SQL\n\nYou can also use local SQL commands to create and modify tables. For example, to create a table called \"Employees\", you could type the following in the Command Window:\n\nOPEN DATABASE testdata SET DATABASE TO testdata CREATE TABLE employee ( EmpNo INTEGER( 4 ), ; LastName VARCHAR( 25 ), FirstName VARCHAR( 20 ), Department CHAR( 20 ), ; PRIMARY KEY (EmpNo) )\n\nThe CREATE TABLE statement would be typed as one line with the semicolon at the end of each line removed ...\n\nBy using the SET DATABASE command, dBASE will assume that all work done until told otherwise will be in the database specified. This can make things a bit easier as you won't have to specify the database as part of the command each time ... Note that all local SQL commands will respect this setting (ALTER TABLE, etc.). If you leave this command out, you would have to add to your table references the database reference, i.e., CREATE TABLE :testdata:employee ...\n\nOther SQL commands will work as well, such as ALTER TABLE, UPDATE, INSERT INTO, SELECT and so on ...\n\nBack To the Menu\n\nTo Create a Table Using OODML Objects\n\nIn a program, you can use the local SQL commands as shown above, or you can use the database object and the executeSQL() method. An example of creating a table using the database object is given below.\n\nFirst create an instance of a database object:\n\nd = new Database() d.databaseName := \"BDEALIAS\" // whatever your alias is, i.e., \"testdata\" d.loginString := \"SYSDBA/masterkey\" d.share := 1 // All -- this is discussed later d.active := true\n\n(Note: you do not have to use the loginString property -- but doing so means that the login screen does not come up -- it is a simple way to bypass it ... for your users you may or may not wish to use this property, depending on your application design. You may need your users to log in ...)\n\nTo create a table, you could try to stuff a huge long \"create table\" string into a call to the method, or you could build the string (as below) into a memory variable, and pass the variable to the method -- this is probably easier to see, at least programmatically (but it works fine either way):\n\ncTable = \"CREATE TABLE employee ( \" +; \" EmpNo INTEGER( 4 ), \" +; \" LastName VARCHAR( 25 ), \" +; \" FirstName VARCHAR( 20 ), \" +; \" Department CHAR( 20 ), \" +; \" PRIMARY KEY (EmpNo) )\"\n\nTo actually create the table, now that you have your string, you would use:\n\nd.executeSQL( cTable )\n\nHow do you know it worked? Look in the Navigator -- you should see your new table under the \"Tables\" tab. If not, make sure the Navigator has focus, and go to the \"View\" menu, and select \"Refresh\".\n\nIf the table does not appear, something is wrong. If you did not get an error message, something is very wrong ...\n\nYou may want to note that the icon in the Navigator for the table is different than it is for local tables ...\n\nBack To the Menu\n\nA Comparison of Field Types\n\n.DBF Field\n\nInterBase Field\n\nCharacter\n\nCHAR/VARCHAR\n\nNumeric\n\nNUMERIC/DECIMAL\n\nMemo\n\nTEXT BLOB\n\nLogical\n\nNUMERIC, CHAR or VARCHAR\n\nDate\n\nDATE\n\nTimeStamp\n\nDATE\n\nFloat\n\nFLOAT\n\nOLE\n\nBLOB\n\nBinary\n\nBLOB\n\nLong\n\nINTEGER\n\nDouble\n\nDOUBLE\n\nAutoIncrement\n\nINTEGER with GENERATOR/TRIGGER (see below)\n\nAnd going the other direction ...\n\nInterBase Field\n\n.DBF Field\n\nINTEGER\n\nLong\n\nSMALLINT\n\nLong\n\nFLOAT\n\nFloat\n\nDOUBLE(precision,scale)\n\nDouble(n,n2)\n\nDECIMAL(precision,scale)\n\nNumeric(n,n2)\n\nNUMERIC(precision,scale)\n\nNumeric(n,n2)\n\nCHAR(n)\n\nCharacter(n)\n\nVARCHAR(n)\n\nCharacter(n)\n\nDATE\n\nTimeStamp\n\nBLOB\n\nBinary\n\nTEXT BLOB\n\nMemo\n\nNote that there appears to be a bug in the table designer, in that it shows \"LONG\" as a valid field type, but InterBase actually uses \"INTEGER\". If you use the table designer, it will allow you to create a field with a \"LONG\" field type. Viewing the table MetaData in ISQL, it correctly shows as an \"INTEGER\" type.\n\nNotes on field types:\n\nLogicals: Note that if your application uses logicals, and you wish to upsize it to InterBase tables, you will have to do what is called \"field morphing\" to be able to have it work properly with checkbox controls and such. There are details on this in the onLine help -- it's not too difficult to do, really ... see the Sample Application that is provided with this HOW TO if you need this functionality (this is in \"FISH.DMD\") ... Dates: The InterBase date is really a TimeStamp field -- it includes the time as well as the date ... if you wish to design an application that uses .DBFs that you will be upsizing to InterBase later on, you may wish to use TimeStamp fields to start with, but using date fields will work fine. Also note that SQL assumes dates as American date format. This works as DD/MM/YYYY, i.e., April 3, 1999 would be shown as 04/03/1999 (or 4/3/1999, 4/3/99 ...). It may be possible to use European date formats if you use a dot as the separator between parts, i.e., April 3, 1999 might be shown as: 3.4.1999 and InterBase may accept this -- I have not (yet) tried it ... (More detail on SQL and date formats is in MISCCODE.ZIP and X2SQL.ZIP at the author's website, and information on using the date object can be found in DATEOBJECT.ZIP) Character: Note that there are two types of character fields -- \"CHAR\" and \"VARCHAR\" -- for InterBase table types. Character fields defined as \"CHAR\" (or \"CHARACTER\" if using local SQL) work like the .DBF character field type -- these fields are padded. VARCHAR, on the other hand, is a variable length character field, where you define the largest value that the field can hold. InterBase does not pad the field, and only stores as much information as is necessary. (Padding a field is the act of storing spaces to make up the width of the field, so if you define a field as being 10 characters wide, and only store three characters in the field, it would be padded with seven spaces ... if you use a \"VARCHAR\" field defined as 10 characters wide and stored 3 characters to it, that is all that will be stored there -- no padding to fill it out to 10.) SMALLINT versus INTEGER: SMALLINT has a range of -32768 to 32767. The INTEGER type has a range of -2,147,483,648 to 2,147,483,648 (same as the .DBF's LONG or AUTOINCREMENT field types). AutoIncrement: To use the same type of functionality in an InterBase table as you get with an AutoIncrement field in a .DBF, you will need to use GENERATOR and TRIGGER options in an InterBase field. These are discussed below under the \"Field Options\" heading ... you may also wish to consider using a Stored Procedure, if you are dealing with related tables, due to the way that the code used in the trigger will generate the value.\n\nField Options\n\nWhen creating tables there are some features you may wish to use:\n\nNOT NULL\n\nThis ensures that a field is not empty -- if you attempt to save a row into a table that has a field marked as \"NOT NULL\" in the definition, an error will occur and you will not be allowed to save the row until the field contains a value other than NULL.\n\nExample:\n\nCREATE TABLE :testdata:employee ( ; EmpNo SMALLINT( 4 ) NOT NULL PRIMARY KEY, ; LastName VARCHAR( 25 ) NOT NULL, ; FirstName VARCHAR( 20 ) NOT NULL, ; Department CHAR( 20 ) NOT NULL )\n\nDEFAULT\n\nThe default option can be used to set default values for fields in a table. You can use the following, for example:\n\nNUMERIC any numeric value, such as zero CHAR/VARCHAR any character value, including \"\" DATE any literal date -- as a character string,\n\nin US date format: \"04/15/1999\" = April 26, 1999\n\nExample:\n\nCREATE TABLE :testdata:Employees ( EmpNo INTEGER,; LastName VARCHAR(25) DEFAULT \"\" NOT NULL,; FirstName VARCHAR(20) DEFAULT \"\" NOT NULL )\n\nLookups and Relationships\n\nLookups can be done using the FOREIGN KEY option. See InterBase's online help for details on this. (You can also use the lookupSQL feature in dBASE, but using the FOREIGN KEY option gives the advantage that it is defined at the server, and if accessed from another software package it will still work ...) Note that using FOREIGN KEY causes the InterBase server to enforce referential integrity -- you cannot add a child row without a corresponding parent, and you cannot delete a parent row that has child records, etc. Also in order to use a FOREIGN KEY you will need a PRIMARY KEY in the child table.\n\nPrimary Key\n\nIt is suggested you always define a Primary Key for your tables. This ensures that you have a unique value that can be used to find a specific row. This unique key can be defined with a generator (see elsewhere in this document) or some other value ...\n\nIndexes\n\nIndexes in InterBase do not work the same as they do with DBF7 tables. You can combine fields into an index expression, but you cannot use dBASE functions to affect your index expressions, as the InterBase server doesn't know what these functions are. In addition, you cannot use InterBase functions in your index expressions either.\n\nNOTE: If you are used to using SEEKER.CC (which ships with Visual dBASE 7), it appears that in order to use it, you will have to do some extra work. The reason is that you cannot have case-insensitive indexes in InterBase without this extra work.\n\nSee below -- section on case-insensitive indexes.\n\nThere are also some SQL commands for working with indexes, such as CREATE INDEX, ALTER INDEX, and DROP INDEX that you can use. If you wish to use these, check the TUTORIAL help file that ships with InterBase.\n\nIn addition, there is an undocumented index class that can be used to create indexes in any table format, combined with the createIndex() method of the database class. Details on this can be found in the paper on Undocumented Features at the author's website.\n\nIn addition to the indexes however, you may want to remember that you can use ORDER BY (and have an updateable query with InterBase tables, which you can't with local .DBF or .DB tables), which allows you to effectively index \"on the fly\" ...\n\nCase-Insensitive Indexes\n\nIt is possible to create case-insensitive indexes. This information comes from a knowledgebase document from the MERS website (www.mers.com).\n\nThis technique uses what might be called a \"shadow field\" (the term comes from Ken Chan) -- it is a shadow of the original field, and the user never sees the contents of it. It is used programmatically only (this is a hint -- you could let your users edit it, but that would defeat the purpose!).\n\nFor the purposes of a case-insensitive index, you would need a shadow field that was the same type and size as the field being shadowed. For example, if you wanted a case-insensitive index on the last name field, you would have a shadow field that matched the size and type of the last name field.\n\nYou would then need to create two triggers (there is more on triggers in the discussion on autoincrement fields) -- (one set for \"BEFORE INSERT\" for new rows, and one set for \"BEFORE UPDATE\" when updating rows) that store the upper case of the first field into the shadow field. Then you can create an index for the shadow field.\n\nCode for this would look like:\n\n// this assumes your database object is established // the table exists, and the shadow field (LastShadow) has been // added to the table (ALTER TABLE) ... // This first trigger fires for a new row in the table: cTrigger1 = \"CREATE TRIGGER FOR mytable BEFORE INSERT AS \"+; \"BEGIN new.LastShadow = UPPER(new.lastname); END\" d.executeSQL( cTrigger1 ) // The second trigger fires when updating the table ... cTrigger2 = \"CREATE TRIGGER FOR mytable BEFORE UPDATE AS \"+; \"BEGIN new.LastShadow = UPPER(new.lastname); END\" d.executeSQL( cTrigger2 ) // This creates the index ... (undocumented feature of dBASE -- // see paper at author's website on undocumented features) // if you examine the index object in the inspector you will // see the \"caseSensitive\" property -- this will be ignored // for InterBase tables ... i = new Index() i.indexName := \"LastShadow\" // name of the index i.fields := \"LastShadow\" // field name(s) d.createIndex( \"myTable\", i ) // create it\n\nOf course, if you needed your index to be on multiple fields, this would be a way to do that as well (you can combine fields in InterBase indexes, but not using the UPPER() function or other string functions). You would need to be sure that your shadow field was big enough for the largest possible combination of the fields (i.e., last name and first name), and in the trigger you could combine \"upper( new.lastname ) + upper( new.firstname )\".\n\nA Thought: Come to think of it, while there is the tradeoff mentioned below, this may be a solution to many concerns about complex indexes that can be created in .DBFs ... You could do things with dates to ensure that they sorted the way you needed, numerics, other calculations and such ... by using \"Shadow Fields\" and indexes on these Shadow fields.\n\nI imagine, however, that if you have a LOT of triggers in your table to generate these, that you may be slowing down the InterBase server a bit ...\n\nThe biggest drawback here of course is the size of your table -- you are adding a new field that will be containing data that exists in another field, duplicating data. However, if you need to have case insensitive searches (something many dBASE developers and their users have gotten quite used to ...), then you may just have to trade-off the disk space for this new field.\n\nAutoIncrement Fields with Generators and Triggers\n\nTo create a unique number generator in the database (i.e., an autoincrement field), use the CREATE GENERATOR statement. CREATE GENERATOR declares a generator to the database and sets its starting value to zero (the default). If you want to set the starting value for the generator to a number other than zero, use SET GENERATOR to specify the new value. (Note that this is part one -- see discussion below on Triggers as well - creating the generator does not cause it to automatically increment ...)\n\nLocal SQL does not understand the commands to create generators and/or modify them, so you will need to pass them on through the dBASE SQLExec() function (or the database object's executeSQL() method) -- this function (or method) passes SQL statements directly to the database server, in this case, the InterBase server, bypassing the Borland Database Engine (BDE) and local SQL. (The other way to do this is to use the InterBase ISQL Window.)\n\n// assumes \"OPEN DATABASE databaseName\" has occurred SQLExec( \"CREATE GENERATOR EMPNO_GEN\" )\n\nIn addition, as noted previously, there is a SET GENERATOR command that can be used to set the \"current\" value for the generator (i.e., if you want the next value to be 10, you would use SET GENERATOR >generatorname< TO 9 ). Note that generators default to starting at zero (the first number generated would then be 1).\n\nOnce you have created a generator, you then need to have a way to call the GEN_ID() function in InterBase, which will actually increment the value.\n\nA trigger is used to define an event similar to an OODML event, which will fire at a specific point, such as before a new row is added to a table (BEFORE INSERT). (There is a lot more detail in the InterBase documentation on these ...)\n\nAn example would be to create a trigger to actually increment the generator EMPNO_GEN:\n\n// assumes \"OPEN DATABASE databaseName\" has occurred // and that the generator \"empno_gen\" has been created // \"create_empno\" is the trigger // \"employees\" is the table // \"new.empno\" refers to the empno field in a new row // \"empno_gen\" is the generator created with // the CREATE GENERATOR command. // (code sample courtesy of Bowen Moursund) SQLExec( \"CREATE TRIGGER create_empno FOR employees \"+; \"ACTIVE BEFORE INSERT POSITION 0 \"+; \"AS BEGIN new.empno = GEN_ID(empno_gen, 1); END\" )\n\nYou can also create the generator and trigger using a database object. The following will create a customer table, a generator (default at zero, which would mean the first value will be '1'), and a trigger, all using a database object:\n\nd = new Database() d.databaseName := \"TESTDATA\" d.loginString := \"SYSDBA/masterkey\" d.share := 1 // All d.active := true // define table in a character variable cTableCreate = \"CREATE TABLE Customer(\"+; \"CustNo INTEGER NOT NULL PRIMARY KEY,\"+; \"LastName varChar(20) NOT NULL, \"+; \"FirstName varChar(20) NOT NULL)\" // execute command defined in character variable d.executeSQL( cTableCreate ) // create a generator in the same fasion cGenCreate = \"CREATE GENERATOR next_cust\" d.executeSQL( cGenCreate ) // this is where you could set the generator // to a larger value than the default: // cGenSet = \"SET GENERATOR next_cust TO 150\" // next value would be 151 // d.executeSQL( cGenSet ) // create trigger for generator cTriggerCreate = \"CREATE TRIGGER create_cust FOR Customer \"+; \"ACTIVE BEFORE INSERT POSITION 0 \"+; \"AS BEGIN new.CustNo = GEN_ID(next_cust, 1); END\" d.executeSQL( cTriggerCreate ) // deactivate database object d.active := false release object d\n\nA trigger created with \"BEFORE INSERT\" for a generator will act just like the autoincrement field does in dBASE -- the value will not appear on a form (if you have an entryfield datalinked to it) until the row is saved to the table.\n\nAn important note: The field type for a Generator is (usually) an INTEGER and, as such, is an editable field. If you have not defined the field as a primary key, or a unique key in an index, you can get duplicate values and no error will be generated. It is strongly recommended that you NEVER allow users to edit the field.\n\nDevelopment philosophies will differ. One says that the user should never even know that this value exists, so you wouldn't even display it on a form. Another says you can display it, but as noted they shouldn't be able to edit it ...\n\nUsing the form objects, you can disable an entryfield if you must allow the user to see the value, and you can probably disallow the user from accessing the data in other ways (note that the DBFField object's readOnly property is not a property of the FIELD object nor the SQLFIELD object, so it is not available in this situation ...).\n\nCaveat\n\nIf you have a set of relational tables, i.e., parent/child, etc., normally you cannot save a parent row without a child row -- however, to do this you must have a value to link the child row to the parent -- you will find yourself in a logical bind here:\n\nThe trigger will create the value for the \"autoincrement\" field for the parent table, but it is not available in the parent row until you save the parent row ... ; Therefore you cannot obtain the value to store into the child row; Therefore you cannot save the child row; Therefore you cannot save the parent row.\n\nPretty nasty prediciment ... one solution is to use a Stored Procedure instead of the trigger. The Stored Procedure would be called in such a way that when you go to save the parent row, a child row is created, the value of the generator is grabbed and stuffed into the child row's linking field, as well as into the parent row's linking field, and both rows are saved ... I do not have an example of this handy, but perhaps someone out there will provide something at some point in the future ...\n\nAnother way around this would be to do all the code locally using the canSave event of the parent rowset to do the same sort of thing, except that you would not be using the generator, but your own local code to simulate an autoincrement field. Of course, this has the disadvantage that the autoincrementing will not occur if someone uses the tables from a different software package, rather than your application ... (there is an example of this kind of code in the HOW TO document MISCCODE.ZIP -- see the section on adding a parent to a parent/child relationship ...).\n\nBack To the Menu\n\nUsing InterBase Tables in Visual dBASE 7.x\n\nHow do you use your InterBase tables, now that you have them? Would you believe that this is as easy as using them just the same way you do your local tables? If you use the OODML, everything should work fine.\n\nYou should consider using datamodules, as they will simplify matters quite a bit.\n\nYou must have a database object. If you are using local .DBFs or .DB tables in dBASE, it is not required that you use a database object (or a BDE Alias) although it is recommended, now you must use one.\n\nSuggestions:\n\nAlways use OODML -- it's really designed for this. You can use the XDML, but it is going to be much slower, and some commands probably just plain won't work (or may give some truly interesting results). Create a custom datamodule with the only control on it being your database object. This database object should have:\n\nThe databaseName property set to the name of your alias, Optionally, the loginString set to the userid and password (rather than requiring a user login) -- the format for this is userid/password, and remember that InterBase's security is case-sensitive. The share property should be set to 1 (All). This allows your application to re-use the current database login -- otherwise each time you create an instance of a database object (i.e., for each form that gets opened, each report that gets generated ...) another \"user\" will be logged in which uses up a license each time (not to mention your user needing to log in if you do not set the loginString property) ... (Note that this is \"per session\" -- i.e., on a network, while one user is using the application, you do not need them to login multiple times -- first it will use multiple licenses, and second it will annoy the user rather badly ... -- on the other hand, a second user at a second workstation would need to login ... that would consititute a second license being used.)\n\nSubclass your datamodules in your application from the main one (discussed above). This basically means you only ever have to set up the database object once, and if you have to change anything (alias, etc.) it only needs to be changed in one location for your application ...\n\nAfter you have your datamodules set up, you can use these like you normally would. Place the datamodule on a form in the form designer (or a report ...) and there is your table (or tables).\n\nThere are, of course, some differences. Due to the nature of remote databases (or perhaps due to the nature of DBF7 tables), certain functionality in the rowset object does not work with remote tables (this functionality was designed for DBF7 tables in most cases ...):\n\nYou cannot use spaces in field names in InterBase tables. This is not that big a deal ... findKey() -- is designed to take advantage of the dBASE index format. As soon as you add a WHERE clause, this no longer works ... masterRowset/masterFields -- designed to work with local tables specifically (and in addition, using a WHERE clause, even on local tables, causes it to not work as well). Use the query object's masterSource property, rather than these two properties of the rowset. The masterSource property of the query was designed specifically for remote database engines to link tables (indeed, it doesn't work well at all with local tables).\n\nUsing the query object's masterSource is pretty easy -- assume the following (this is based on Alan Katz' paper):\n\nparent rowset, Customer has a \"CustNo\" field\n\nchild rowset, Invoices, has a \"CustomerNumber\" field\n\nThe two tables are linked on these fields.\n\nIn the child rowset, set the following (this assumes you are using the datamodule or form/report designer and are working with the inspector, and both queries are on the design surface):\n\nsql = \"select * from invoices where CustomerNumber == :CustNo\" masterSource = customer1.rowset\n\nWith these settings, each time the row pointer moves in the customer (parent) query, the child (invoices) query will substitute the value of the customer's \"CustNo\" into the parameter (:CustNo) in the SQL statement, and you will get a new set of rows to match. The rest of the processing is completely automatic.\n\nIf your .DBFs use custom field properties, these will not translate to InterBase tables, as InterBase doesn't use these. If you know you will be upsizing to InterBase from .DBFs it's probably best to not use these and/or rely on them in your application. Instead, use custom controls that have the properties set that you need ...\n\nThere are some advantages to using InterBase:\n\nJoins MAY be updateable, which they are not in local tables ... (Can't get this to work, but Alan Katz says it does ...) Tables opened with ORDER BY clauses are updateable Tables opened with WHERE clauses are updateable You can reindex your tables without having to open them exclusively There's quite a bit more -- you should read Alan Katz' paper: Upsizing from dBASE to InterBase (discussed toward the beginning of this document).\n\nUpscaling An Existing Visual dBASE Application to InterBase\n\nThere are some rules you need to apply when doing this. See also the section below on moving data from local tables ...\n\nReplace dBASE table specific OODML methods, such as masterRowset, masterFields, and setRange (as noted above). These rely on the dBASE index format, and need to be either removed or changed (i.e., masterRowset/masterFields to the masterSource property of the query; setRange to filter or using a WHERE clause in the SQL SELECT, or even using the parameters array of the query object (params) ...). Remove filters and use the WHERE clause, which is really optimized for SQL tables. The WHERE, LIKE, IN, and ORDER BY operators are very useful when using the SQL SELECT statement to get your data. There are a lot of sources on this information, including the tutorial that comes with InterBase (tutorial.hlp in the InterBase\\BIN directory). Consider using Cached Updates to improve performance. Use Generators (discussed under fields) to replace the AutoIncrement fields in your .DBFs. Examine the use of Stored Procedures -- these allow you to have code that executes at the server, which will be faster than doing the same code in dBASE (it has to go through layers), and this will make it impossible for your users to bypass that code. Determine if you wish to require your users to login or not. If not, then make sure that you have a generic userid/password, and set this value in the database object's loginString property. Otherwise, InterBase will require a login.\n\nIf you do wish to require a login, then you may wish to examine some of the code in the sample application that comes with this HOW TO -- it allows the current user to change their own password, and also has some administrator functionality (add, delete, modify users, groups ...).\n\nBack To the Menu\n\nMoving Data From Local Tables to an InterBase Database\n\nOk, what if you wrote your application using local tables, but now you are ready to migrate it over to InterBase? You are going to need to get the tables, and possibly even some of the data moved to your InterBase database ...\n\nNote: if your table contains images in a binary field, these will not translate across in any of the methods shown below. Of course, if someone can show me a way to make it work, I'd appreciate it, but to date, neither Gary White or I have been able to get this to work ...\n\nUPDATESET\n\nThe UpdateSet class in Visual dBASE 7 allows you to, among other capabilities, copy data from one table format to another.\n\nLet's assume that you want to copy the FISH table (a .DBF) from the SAMPLES database to an InterBase table in a TESTDATA database.\n\nThe code to do this would look like:\n\ndSample = new Database() dSample.databaseName := \"VDBSAMPLE\" dSample.active := true qFish = new Query() qFish.database := dSample qFish.sql := \"select * from fish\" qFish.active := true OPEN DATABASE TESTDATA // requires you to login ... u = new UpdateSet() u.source := qFish.rowset u.destination := \":TESTDATA:Fish\" u.copy() // cleanup close database testdata qFish.active := false dSample.active := false release object dSample, qFish, u\n\nThe UpdateSet object in the sample code shown would attempt to create the new table, matching field types as best it can. One drawback is that the UpdateSet object will not copy any indexes that may be defined in the original table to the new location. You could use the (undocumented) tableDef class to get information about indexes, and then recreate them using local SQL commands (CREATE INDEX).\n\nAnother option would be to create the table with indexes in the InterBase database, and rather than using the copy() method, you could use the append() method -- this would attempt to store the data into the fields -- note that the fields must be in the same sequence in both tables, or you may end up with incorrect data in some of the fields, or worse, incorrect data (this is worse because it may, at first, look correct) ... NOTE: There may be a bug in the updateset object's append() method, where three rows do not get appended to the copy ...\n\nMore details on the UpdateSet class can be found in MISCCODE.ZIP and X2OODML.ZIP at the author's website.\n\nCopyTable.PRG\n\nA program created by Gary White, this program attempts to copy a table, its indexes, etc., from one table format to another. This program is based on earlier work by Ken Mayer, but is more flexible and powerful ... Check the dBASE Users Function Library Project (dUFLP) at the author's website for this program.\n\nDATAPUMP\n\nThe Client/Server edition of Visual dBASE ships with a handy program that is stored with the BDE.\n\nThe program shows up in the BDE folder as the \"Data Migration Wizard\", but it was originally called the \"Data Pump\". The purpose is to move tables from one format to another.\n\nIt is pretty fast, and very smooth. It will handle most conversions with little effort on your part. You may want to experiment with it.\n\nOne caveat is that the Data Pump program wants to translate AutoIncrement fields in a .DBF to SMALLINT types in an InterBase table. If you try to change this to an INTEGER, the Data Pump will apparently show this as a LONG field type and then throw an exception (i.e., it stops working). (Gary White discovered this ...) In addition, as you need a generator and a trigger to make the autoincrement to work in an InterBase table, and the Data Pump won't create those for you. You will need to go back and add them yourself. What you may want to do in this case is:\n\nLet the Data Pump use the SMALLINT type for the AutoIncrement; Then use ALTER TABLE to add a NEW (INTEGER) field in your InterBase table; Use UPDATE SET to copy the values in the old field to the new INTEGER field; Then use ALTER TABLE again to drop the old field; Add the generator and trigger you need to make the field act like an autoincrement field. You should note the top value in the field, and use SET GENERATOR to set a starting value, or the generator will start over at 1.\n\nNot a perfect solution, but certainly do-able.\n\nBack To the Menu\n\nUsers\n\nWhen you start working with InterBase, you must first log in to the server. Once you have then logged in, you can connect to any databases on the server. (Note that some userids may not, depending on how they are set up, have access to some databases ...)\n\nThe default username is: SYSDBA with a default password of \"masterkey\". The manual recommends changing this password as soon as possible ... (see below on modifying a user).\n\nThe SYSDBA account is the database administrator account, and is the only user who can authorize new users, delete users, or modify user configurations.\n\nYou can create individual users, or you may wish to create a single user that would be used for a group of people (a department) or just an application-wide userid ...\n\nThe user table requires a user name and password, but you can also add a group id, or a full name for the user (as well as their user name ...).\n\nWhen you add users, you must grant privileges to those users to modify or even to view data within a database (this must be done for specific databases). This must be done explicitly. However, you can use the PUBLIC user to grant default privileges to all users.\n\nTo use the Server Manager, the InterBase Server must be running. If it is not, double-click on the icon \"InterBase Server\" in the InterBase group.\n\nOnce you have the InterBase Server running, you can then run the \"InterBase Server Manager\".\n\nYou need to log in by using either the toolbutton for this, or the file menu. Enter the SYSDBA userid with the \"masterkey\" password.\n\nOnce you do that, the server manager should look like:\n\nTo add users, use the \"Tasks\" menu, and \"User Security\". This will give a screen like:\n\nSelecting the option to add or modify a user will give a screen like:\n\nEnter the required information (the password must be entered twice), and the optional only if you wish to. This is how you change a password, and (as noted elsewhere) you should change the default password for SYSDBA.\n\nThere is undoubtedly more that can be done. I did some attempts to deal with creating a programmatic interface to the userid database, but it appears that InterBase encrypts the password (understandably) but as I don't know the algorithm used, the password cannot be deciphered, or created, from a dBASE front-end ...\n\nBack To the Menu\n\nDeploying InterBase With Your Application\n\nAccording to the specifications for InterBase, it is possible to \"embed\" InterBase with your application.\n\nNot having a full license myself (only the 5-user license that comes with the version on the Visual dBASE CD), I have not been able to determine how this works.\n\nIf a reader does find this out, I'd appreciate hearing about it. (In detail, so that instructions can be provided to others ...)\n\nIt is completely possible that you may just need to deploy using an InterBase designed deployer ... this may be able to give you some control over startup options and such as well.\n\nBack To the Menu\n\nMiscellaneous Information That May Prove Useful\n\nThe following information is stuff that I (and others) have dug up while trying to figure out how this all works ... it is in no specific sequence, but is here as reference ...\n\nINTERBAS.INI\n\nIn the Windows directory (or folder, if you prefer) there is a .INI file used by the InterBase ISQL Window. This stores a list of the InterBase databases you have created. Even if you drop a database (delete it), the database will still be listed here. If you are trying to work with databases using the ISQL Window and look in the drop-down list of available databases, you will see all previous databases even if they do not exist any longer.\n\nYou may wish to open this file up in Notepad or WordPad (or even the Visual dBASE Source Editor) and remove any references to databases you do not actually have on your system ...\n\nDeleting a Generator\n\nAccording to the InterBase specifications, once defined, a generator cannot be deleted. However, Gary White has discovered, \"Actually, you can delete a generator. You just have to cheat a little. <g> If you go to \"Desktop Properties\" in VdB and check to display system tables, you'll see a bunch of tables with \"RDB$\". You can then open the table RDB$GENERATORS and delete them there.\"\n\nBack To the Menu\n\nA Sample Applicaton\n\nThere is, attached to this document (in a .ZIP file), an application that you may wish to test out -- if you do so, unzip it to a directory, The application is not very complex, but it demonstrates many of the concepts discussed in this document ... the bulk of the code you will want to examine is in the SETUP.PRG file, as it does a lot of the work you are likely to want to look at (creating generators, triggers, etc.). In addition there is some code in the datamodule FISH.DMD that deals with morphing a \"logical\" field ...\n\nTo see it in action, simply run the START program.\n\nBack To the Menu\n\nSummary\n\nOk, this document doesn't cover every single aspect of using InterBase -- if you look at the manuals, the tutorial, help files ... there's a lot to this software, and frankly I am not up to completely re-documenting the whole thing. On the other hand, with luck this document has enough information to get you started and from here you can delve further into using this database with your Visual dBASE applications.\n\nAs a further explanation, the author, and others who helped with this document, learned how to do all this \"on the fly\", while writing and testing, and experimenting to find out how it all worked, in order to explain it to you, the reader. What this means is, none of us are experts here -- there may be \"better (faster, more efficient, etc.) ways\" to do some of what is shown. However, what is shown does work ...\n\nThere is quite a bit of documentation for InterBase that gets installed when you install InterBase itself. In the InterBase \"BIN\" directory you will find \"tutorial.hlp\" -- a standard Windows Help file (you should be able to double-click it to get it to start), and there are other documents in .PDF (Acrobat Reader) file format that you can read, or print (although some of these are very large).\n\nIn addition, InterBase has a set of newsgroups (MERS) that can be accessed at: news.mers.com -- information can be found on these newsgroups at http://www.mers.com/newsgroups.html. If you post a question, be sure to provide information about which version of InterBase, which version of the BDE, and the fact that you're using Visual dBASE to communicate with it.\n\nInterBase also has a knowledgebase at their web site: http://www.interbase.com.\n\nIn addition to the InterBase manuals, a good resource on SQL is this book (it is not cheap, but few computer references are these days): Understanding the New SQL: A Complete Guide, by Jim Melton and Alan R. Simon, Morgan Kaufmann Publishers, San Francisco, 1993, ISBN: 1-55860-245-3. The examples are refreshingly clear and easy to understand, and the writing style is good.\n\nAs usual, many thanks go to Gary White (also a member of dBVIPS) for editing and helping me find information ... this was a major learning experience for both of us ... I'm surprised either of us has an hair left. <grin>\n\nBack To the Menu\n\nDISCLAIMER: the author is a member of dBVIPS (dBASE Volunteer Internet Peer Support) -- a group of volunteers who provide technical support for dBASE, Inc. on the Visual dBASE newsgroups (news.dbase2000.com). If you have questions regarding this .HOW document, or about Visual dBASE you can communicate directly with the author and dBVIPS in the appropriate newsgroups on the internet. Technical support is not currently provided by private E-Mail by members of dBVIPS.\n\n.HOW files are created as a free service by members of dBVIPS to help users learn to use Visual dBASE more effectively. They are edited by both dBVIPS members and dBASE, Inc. Technical Support (to ensure quality). This .HOW file MAY NOT BE POSTED ELSEWHERE without the explicit permission of the author, who retains all rights to the document.\n\nCopyright 1999, Kenneth J. Mayer. All rights reserved.\n\nInformation about dBASE, Inc. can be found at:\n\nhttp://www.dbase.com"
    }
}