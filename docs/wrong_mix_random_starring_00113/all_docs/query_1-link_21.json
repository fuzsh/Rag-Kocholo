{
    "id": "wrong_mix_random_starring_00113_1",
    "rank": 21,
    "data": {
        "url": "http://uw714doc.xinuos.com/en/db/ref/build_unix/solaris.html",
        "read_more_link": "",
        "language": "en",
        "title": "Berkeley DB Reference Guide: Solaris",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://uw714doc.xinuos.com/en/db/images/prev.gif",
            "http://uw714doc.xinuos.com/en/db/images/ref.gif",
            "http://uw714doc.xinuos.com/en/db/images/next.gif",
            "http://uw714doc.xinuos.com/en/db/images/prev.gif",
            "http://uw714doc.xinuos.com/en/db/images/ref.gif",
            "http://uw714doc.xinuos.com/en/db/images/next.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "embedded",
            "database",
            "programmatic",
            "toolkit",
            "btree",
            "hash",
            "hashing",
            "transaction",
            "transactions",
            "locking",
            "logging",
            "access method",
            "access methods",
            "Java",
            "C",
            "C++"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Berkeley DB: An embedded database programmatic toolkit.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I can't compile and run multithreaded applications.\n\nSpecial compile-time flags and additional libraries are required when compiling threaded applications on Solaris. If you are compiling a threaded application, you must compile with the D_REENTRANT flag and link with the libpthread.a or libthread.a libraries:\n\ncc -mt ... cc -D_REENTRANT ... -lthread cc -D_REENTRANT ... -lpthread\n\nThe Berkeley DB library will automatically build with the correct options.\n\nI've installed gcc on my Solaris system, but configuration fails because the compiler doesn't work.\n\nOn some versions of Solaris, there is a cc executable in the user's path, but all it does is display an error message and fail:\n\n% which cc /usr/ucb/cc % cc /usr/ucb/cc: language optional software package not installed\n\nBecause Berkeley DB always uses the native compiler in preference to gcc, this is a fatal error. If the error message you are seeing is the following, then this may be the problem:\n\nchecking whether the C compiler (cc -O) works... no configure: error: installation or configuration problem: C compiler cannot create executables.\n\nThe simplest workaround is to set your CC environment variable to the system compiler and reconfigure; for example:\n\nenv CC=gcc ../dist/configure\n\nIf you are using the --configure-cxx option, you may also want to specify a C++ compiler, for example the following:\n\nenv CC=gcc CCC=g++ ../dist/configure\n\nI see the error \"libc internal error: _rmutex_unlock: rmutex not held\", followed by a core dump when running threaded or JAVA programs.\n\nThis is a known bug in Solaris 2.5 and it is fixed by Sun patch 103187-25.\n\nI see error reports of nonexistent files, corrupted metadata pages and core dumps.\n\nSolaris 7 contains a bug in the threading libraries (-lpthread, -lthread), which causes the wrong version of the pwrite routine to be linked into the application if the thread library is linked in after the C library. The result will be that the pwrite function is called rather than the pwrite64. To work around the problem, use an explicit link order when creating your application.\n\nSun Microsystems is tracking this problem with Bug Id's 4291109 and 4267207, and patch 106980-09 to Solaris 7 fixes the problem:\n\nBug Id: 4291109 Duplicate of: 4267207 Category: library Subcategory: libthread State: closed Synopsis: pwrite64 mapped to pwrite Description: When libthread is linked after libc, there is a table of functions in libthread that gets \"wired into\" libc via _libc_threads_interface(). The table in libthread is wrong in both Solaris 7 and on28_35 for the TI_PWRITE64 row (see near the end).\n\nI see corrupted databases when doing hot backups or creating a hot failover archive.\n\nThe Solaris cp utility is implemented using the mmap system call, and so writes are not blocked when it reads database pages. See Berkeley DB recoverability for more information.\n\nPerformance is slow and the application is doing a lot of I/O to the disk on which the database environment's files are stored.\n\nBy default, Solaris periodically flushes dirty blocks from memory-mapped files to the backing filesystem. This includes the Berkeley DB database environment's shared memory regions and can affect Berkeley DB performance. Workarounds include creating the shared regions in system shared memory (DB_SYSTEM_MEM) or application private memory (DB_PRIVATE), or, configuring Solaris to not flush memory-mapped pages. For more information, see the Solaris Tunable Parameters Reference Manual: fsflush and Related Tunables.\n\nI see errors about \"open64\" when building Berkeley DB applications.\n\nSystem include files (most commonly fcntl.h) in some releases of AIX, HP-UX and Solaris redefine \"open\" when large-file support is enabled for applications. This causes problems when compiling applications because \"open\" is a method in the Berkeley DB APIs. To work around this problem:\n\nAvoid including the problematical system include files in source code files which also include Berkeley DB include files and call into the Berkeley DB API.\n\nBefore building Berkeley DB, modify the generated include file db.h to itself include the problematical system include files.\n\nTurn off Berkeley DB large-file support by specifying the --disable-largefile configuration option and rebuilding."
    }
}