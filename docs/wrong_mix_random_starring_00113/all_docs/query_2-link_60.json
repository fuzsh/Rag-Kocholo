{
    "id": "wrong_mix_random_starring_00113_2",
    "rank": 60,
    "data": {
        "url": "http://uw714doc.xinuos.com/en/db/java/com/sleepycat/collections/TransactionRunner.html",
        "read_more_link": "",
        "language": "en",
        "title": "TransactionRunner (Sleepycat Software, Inc.",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://uw714doc.xinuos.com/en/db/java/resources/inherit.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "com.sleepycat.collections.TransactionRunner class"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "DOC HOME SITE MAP MAN PAGES GNU INFO SEARCH PRINT BOOK\n\nBerkeley DB\n\nversion 4.4.20\n\ncom.sleepycat.collections\n\nClass TransactionRunner\n\njava.lang.Object com.sleepycat.collections.TransactionRunner\n\npublic class TransactionRunner\n\nextends Object\n\nStarts a transaction, calls TransactionWorker.doWork(), and handles transaction retry and exceptions. To perform a transaction, the user implements the TransactionWorker interface and passes an instance of that class to the run(com.sleepycat.collections.TransactionWorker) method.\n\nA single TransactionRunner instance may be used by any number of threads for any number of transactions.\n\nThe behavior of the run() method depends on whether the environment is transactional, whether nested transactions are enabled, and whether a transaction is already active.\n\nWhen the run() method is called in a transactional environment and no transaction is active for the current thread, a new transaction is started before calling doWork(). If DeadlockException is thrown by doWork(), the transaction will be aborted and the process will be repeated up to the maximum number of retries. If another exception is thrown by doWork() or the maximum number of retries has occurred, the transaction will be aborted and the exception will be rethrown by the run() method. If no exception is thrown by doWork(), the transaction will be committed. The run() method will not attempt to commit or abort a transaction if it has already been committed or aborted by doWork().\n\nWhen the run() method is called and a transaction is active for the current thread, and nested transactions are enabled, a nested transaction is started before calling doWork(). The transaction that is active when calling the run() method will become the parent of the nested transaction. The nested transaction will be committed or aborted by the run() method following the same rules described above. Note that nested transactions may not be enabled for the JE product, since JE does not support nested transactions.\n\nWhen the run() method is called in a non-transactional environment, the doWork() method is called without starting a transaction. The run() method will return without committing or aborting a transaction, and any exceptions thrown by the doWork() method will be thrown by the run() method.\n\nWhen the run() method is called and a transaction is active for the current thread and nested transactions are not enabled (the default) the same rules as above apply. All the operations performed by the doWork() method will be part of the currently active transaction.\n\nIn a transactional environment, the rules described above support nested calls to the run() method and guarantee that the outermost call will cause the transaction to be committed or aborted. This is true whether or not nested transactions are supported or enabled. Note that nested transactions are provided as an optimization for improving concurrency but do not change the meaning of the outermost transaction. Nested transactions are not currently supported by the JE product.\n\nField Summary static int DEFAULT_MAX_RETRIES\n\nThe default maximum number of retries.\n\nConstructor Summary TransactionRunner(Environment env)\n\nCreates a transaction runner for a given Berkeley DB environment. TransactionRunner(Environment env, int maxRetries, TransactionConfig config)\n\nCreates a transaction runner for a given Berkeley DB environment and with a given number of maximum retries.\n\nMethod Summary boolean getAllowNestedTransactions()\n\nReturns whether nested transactions will be created if run() is called when a transaction is already active for the current thread. int getMaxRetries()\n\nReturns the maximum number of retries that will be performed when deadlocks are detected. TransactionConfig getTransactionConfig()\n\nReturns the transaction configuration used for calling Environment.beginTransaction(com.sleepycat.db.Transaction, com.sleepycat.db.TransactionConfig). void run(TransactionWorker worker)\n\nCalls the TransactionWorker.doWork() method and, for transactional environments, may begin and end a transaction. void setAllowNestedTransactions(boolean allowNestedTxn)\n\nChanges whether nested transactions will be created if run() is called when a transaction is already active for the current thread. void setMaxRetries(int maxRetries)\n\nChanges the maximum number of retries that will be performed when deadlocks are detected. void setTransactionConfig(TransactionConfig config)\n\nChanges the transaction configuration used for calling Environment.beginTransaction(com.sleepycat.db.Transaction, com.sleepycat.db.TransactionConfig).\n\nMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait\n\nField Detail\n\nDEFAULT_MAX_RETRIES\n\npublic static final int DEFAULT_MAX_RETRIES\n\nThe default maximum number of retries.\n\nSee Also:Constant Field Values\n\nConstructor Detail\n\nTransactionRunner\n\npublic TransactionRunner(Environment env)\n\nCreates a transaction runner for a given Berkeley DB environment. The default maximum number of retries (DEFAULT_MAX_RETRIES) and a null (default) TransactionConfig will be used.\n\nParameters:env - is the environment for running transactions.\n\nTransactionRunner\n\npublic TransactionRunner(Environment env, int maxRetries, TransactionConfig config)\n\nCreates a transaction runner for a given Berkeley DB environment and with a given number of maximum retries.\n\nParameters:env - is the environment for running transactions.maxRetries - is the maximum number of retries that will be performed when deadlocks are detected.config - the transaction configuration used for calling Environment.beginTransaction(com.sleepycat.db.Transaction, com.sleepycat.db.TransactionConfig), or null to use the default configuration. The configuration object is not cloned, and any modifications to it will impact subsequent transactions.\n\nMethod Detail\n\ngetMaxRetries\n\npublic int getMaxRetries()\n\nReturns the maximum number of retries that will be performed when deadlocks are detected.\n\nsetMaxRetries\n\npublic void setMaxRetries(int maxRetries)\n\nChanges the maximum number of retries that will be performed when deadlocks are detected. Calling this method does not impact transactions already running.\n\ngetAllowNestedTransactions\n\npublic boolean getAllowNestedTransactions()\n\nReturns whether nested transactions will be created if run() is called when a transaction is already active for the current thread. By default this property is false.\n\nNote that this method always returns false in the JE product, since nested transactions are not supported by JE.\n\nsetAllowNestedTransactions\n\npublic void setAllowNestedTransactions(boolean allowNestedTxn)\n\nChanges whether nested transactions will be created if run() is called when a transaction is already active for the current thread. Calling this method does not impact transactions already running.\n\nNote that true may not be passed to this method in the JE product, since nested transactions are not supported by JE.\n\ngetTransactionConfig\n\npublic TransactionConfig getTransactionConfig()\n\nReturns the transaction configuration used for calling Environment.beginTransaction(com.sleepycat.db.Transaction, com.sleepycat.db.TransactionConfig).\n\nIf this property is null, the default configuration is used. The configuration object is not cloned, and any modifications to it will impact subsequent transactions.\n\nReturns:\n\nthe transaction configuration.\n\nsetTransactionConfig\n\npublic void setTransactionConfig(TransactionConfig config)\n\nChanges the transaction configuration used for calling Environment.beginTransaction(com.sleepycat.db.Transaction, com.sleepycat.db.TransactionConfig).\n\nIf this property is null, the default configuration is used. The configuration object is not cloned, and any modifications to it will impact subsequent transactions.\n\nParameters:config - the transaction configuration.\n\nrun\n\npublic void run(TransactionWorker worker) throws DatabaseException, Exception\n\nCalls the TransactionWorker.doWork() method and, for transactional environments, may begin and end a transaction. If the environment given is non-transactional, a transaction will not be used but the doWork() method will still be called. See the class description for more information.\n\nThrows: DeadlockException - when it is thrown by doWork() and the maximum number of retries has occurred. The transaction will have been aborted by this method. Exception - when any other exception is thrown by doWork(). The exception will first be unwrapped by calling ExceptionUnwrapper.unwrap(java.lang.Exception). The transaction will have been aborted by this method. DatabaseException\n\nBerkeley DB\n\nversion 4.4.20"
    }
}