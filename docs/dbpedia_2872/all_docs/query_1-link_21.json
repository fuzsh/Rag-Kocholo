{
    "id": "dbpedia_2872_1",
    "rank": 21,
    "data": {
        "url": "http://www0.cs.ucl.ac.uk/staff/b.cook/",
        "read_more_link": "",
        "language": "en",
        "title": "Prof. Dr. Byron Cook, FREng",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www0.cs.ucl.ac.uk/staff/b.cook/byron-byron-4.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Contact: byroncook@gmail.com\n\nByron Cook is Professor of Computer Science at University College London (UCL). Byron is also Vice President and Distinguished Scientist at Amazon and AWS. Byron's interests include computer/network security, program analysis/verification, programming languages, theorem proving, logic, hardware design, operating systems, and biological systems.\n\nHighlights and some history\n\nByron drove the broad adoption of formal methods and automated reasoning now in use at Amazon. For more information see a recent talk called The business of proof, an interview with Werner Vogels, an interview from PLDI, a short interview on the Cube, Amazon SVP Peter DeSantis' re:invent keynote, or a FLoC'18 keynote lecture. See https://www.amazon.science/research-areas/automated-reasoning for papers from Amazon in this space.\n\nByron was a researcher at Microsoft Research (joint appointment with UCL) from 2004-2014. Check out Byron's old Microsoft Research website.\n\nAt Microsoft Research Byron started the TERMINATOR project, which made a program termination prover that worked on industrially relevant programs, such as Windows device drivers. TERMINATOR lives on outside of Microsoft as an open-source project called T2. For a presentation about this work watch this lecture. Just for fun you can watch Byron giving a live demo of TERMINATOR in this interview.\n\nByron used to hang out a lot with the East London Massive.\n\nByron was a founder of the SLAyer project (github). SLAyer was one of the forerunners to the Infer tool\n\nByron was also a founding member of the Bio Model Analyzer (BMA) project, which developed a tool that facilitates the modelling and analysis of genetic signalling pathways.\n\nByron was one of the developers of the SLAM software model checker. As a member of the Windows OS kernel team 2002-04, Byron developed a Windows product called Static Driver Verifier, which used SLAM to automatically finds bugs in Windows OS device drivers.\n\nByron, together with Shuvendu Lahiri started Microsoft's first SMT decision procedure project, called Zapato. Zapato was the decision procedure used in the initial release of SLAM. Zapato eventually led to Madan Musuvathi's Zap decision procedure, which has since been replaced by Nikolaj Bjorner and Leonardo de Moura's Z3.\n\nBefore joining Microsoft, Byron worked at Prover Technology, where he helped develop and apply the symbolic model checker Prover SL, and SAT solver Prover CL. These tools were used commercially in a variety of applications, including the verification of microprocessors, aircraft software, railway switching, and embedded systems.\n\nByron's first taste of industrial formal verification was back in 1998-99 when he worked at Intel's Strategic CAD Labs (archived).\n\nPublications\n\nGenerating and Exploiting Automated Reasoning Proof Certificates\n\nHaniel Barbosa, et. al\n\nCACM 2023\n\nPartitioning Strategies for Distributed SMT Solving\n\nAmalee Wilson, et. al\n\nFMCAD 2023\n\nModel checking boot code from AWS data centers\n\nByron Cook, et. al\n\nFMSD 57(1):34-52 (2021)\n\nCode-level model checking in the software development workflow at Amazon Web Services\n\nNathan Chong, et. al\n\nSPE 51(4):772-797 (2021)\n\nStratified Abstraction of Access Control Policies\n\nJohn Backes, et. al\n\nCAV 2020\n\nUsing model checking tools to triage the severity of security bugs in the Xen hypervisor.\n\nByron Cook, et. al\n\nFMCAD 2020\n\nBlock Public Access: Trust Safety Verification of Access Control Policies\n\nMalik Bouchet, et. al\n\nESEC/FSE 2020\n\nModel checking boot code from AWS data centers (extended version)\n\nB. Cook, K. Khazem, D. Kroening, S. Tasiran, M. Tautschnig and M. Tuttle.\n\nJournal of Formal Methods in Systems Design (2020)\n\nOne-click formal methods\n\nJohn Backes, et. al\n\nIEEE Software Magazine, November/December 2019\n\nReachability Analysis for AWS-based Networks\n\nJohn Backes, et. al\n\nCAV 2019\n\nFormal reasoning about the security of Amazon Web Services\n\nByron Cook\n\nCAV 2018\n\nModel checking boot code from AWS data centers\n\nB. Cook, K. Khazem, D. Kroening, S. Tasiran, M. Tautschnig and M. Tuttle.\n\nCAV 2018\n\nContinuous formal verification of Amazon s2n\n\nAndrey Chudnov, et. al\n\nCAV 2018\n\nSemantic-based Automated Reasoning for AWS Access Policies using SMT\n\nJohn Backes, et. al\n\nFMCAD 2018\n\nSideTrail: Verifying Time-Balancing of Cryptosystems\n\nK. Athanasiou, B. Cook, M. Emmi, C. MacCarthaigh, D. Schwartz-Narbonne and S. Tasiran\n\nVSTTE 2018\n\nVerifying increasingly expressive temporal logics for infinite-state systems\n\nB. Cook, H. Khlaaf, and N. Piterman.\n\nJournal of the the ACM, 64, 2, Article 15 (May 2017), 39 pages.\n\nT2: Temporal property verification\n\nM. Brockshmidt, B. Cook, S. Ishtiaq, H. Khlaaf, and N. Piterman.\n\nTACAS 2016\n\nLearning to decipher the heap for program verification\n\nMarc Brockschmidt, Yuxin Chen, Byron Cook, Pushmeet Kohli, and Daniel Tarlow.\n\nWorkshop on Constructive Machine Learning at ICML 2015.\n\nDrug target optimization in chronic myeloid leukemia using innovative computational platform\n\nR. Chuang, B. Hall, D. Benque, B. Cook, S. Ishtiaq, N. Piterman, A. Taylor, M. Vardi, S. Koschmieder, B. Gottgens, and J. Fisher\n\nScientific Reports, 5:8190, Nature Publishing Group, February 2015\n\nOn Automation of CTL* Verification for Infinite-State Systems\n\nB. Cook, H. Khlaaf, and N. Piterman.\n\nCAV 2015\n\nFairness for infinite-state systems\n\nB. Cook, H. Khlaaf, and N. Piterman.\n\nTACAS 2015\n\nSpatial Interpolants\n\nA. Albarghouthi, J. Berdine, B. Cook, and Z. Kincaid\n\nESOP 2015\n\nRelations\n\nTauba Auerbach, Byron Cook, David Reinfurt\n\nBulletins of the Serving Library\n\nDisproving termination with overapproximation\n\nByron Cook, Carsten Fuhs, Kaustubh Nimkar, Peter O'Hearn\n\nFMCAD 2014\n\nFaster temporal reasoning for infinite-state programs\n\nByron Cook, Heidy Khlaaf, Nir Piterman\n\nFMCAD 2014\n\nProving nontermination via safety\n\nHong-Yi Chen, Byron Cook, Carsten Fuhs, Kaustubh Nimkar, Peter O'Hearn\n\nTACAS 2014\n\nFinding instability in biological models\n\nByron Cook, Jasmin Fisher, Benjamin Hall, Samin Ishtiaq, Garvit Juniwal, Nir Piterman\n\nCAV 2014\n\nMathematical artifacts (re: Tauba Auerbach)\n\nByron Cook\n\nParkett 94, 2014\n\nBetter termination proving through cooperation\n\nMarc Brockschmidt, Byron Cook, Carsten Fuhs\n\nCAV 2013\n\nReasoning about nondeterminism in programs\n\nByron Cook and Eric Koskinen\n\nPLDI 2013\n\nRamsey vs. lexicographic termination proving\n\nByron Cook, Abigail See, and Florian Zuleger\n\nTACAS 2013\n\nAt the interface of biology and computation\n\nAlex S. Taylor, Nir Piterman, Samin Ishtiaq, Jasmin Fisher, Byron Cook, Caitlin Cockerton, Sam Bourton, David Benque\n\nCHI 2013\n\nRanking function synthesis for bit-vector relations\n\nByron Cook, Daniel Kroening, Philipp Rummer, Christoph Wintersteiger\n\nFormal Methods in System Design, 2013\n\nProving termination of nonlinear command sequences\n\nDomagoj Babic, Byron Cook, Alan J. Hu, Zvonimir Rakamaric\n\nFormal Aspects of Computing (special issue from SEFM), 2013\n\nBMA: Visual Tool for Modeling and Analysis of Biological Networks (tool paper)\n\nDavid Benque, Sam Bourton, Caitlan Cockerton, Byron Cook, Jasmin Fisher, Samin Ishtiaq, Nir Piterman, Alex Taylor, Moshe Vardi\n\nCAV 2012\n\nTemporal property verification as a program analysis task (extended version)\n\nByron Cook, Eric Koskinen, Moshe Vardi\n\nFormal Methods in System Design (special issue from CAV), 2012\n\nProving program termination (Review article)\n\nByron Cook, Andreas Podelski, Andrey Rybalchenko\n\nCommunications of the ACM, Volume 54 Issue 5, May 2011\n\nTemporal property verification as a program analysis task\n\nByron Cook, Eric Koskinen, Moshe Vardi\n\nCAV'11 [International Conference on Computer-Aided Verification] (Snowbird)\n\nSLAyer: Memory safety for systems-level code\n\nJosh Berdine, Byron Cook, Samin Ishtiaq\n\nCAV'11 [International Conference on Computer-Aided Verification] (Snowbird)\n\nMaking prophecies with decision predicates\n\nByron Cook and Eric Koskinen\n\nPOPL'11 [Symposium on Principles of Programming Languages] (Austin)\n\nTractable reasoning in a fragment of separation logic\n\nByron Cook, Christoph Hasse, Joel Ouaknine, Matthew Parkinson, James Worrell\n\nCONCUR'11 [International conference on concurrency theory] (Aachen)\n\nProving stabilization of biological systems\n\nByron Cook, Jasmin Fisher, Elzbieta Krepska, Nir Piterman\n\nVMCAI'11 [Verification, model checking, and abstract interpretation] (Austin)\n\nPrecision and the conjunction rule in concurrent separation logic\n\nAlexey Gotsman, Josh Berdine, Byron Cook\n\nMFPS'11 [Conference on the Mathematical Foundations of Programming Semantics] (Pittsburgh)\n\nRanking function synthesis for bit-vector relations\n\nByron Cook, Daniel Kroening, Philipp Rummer, and Christoph Wintersteiger\n\nTACAS'10 [Tenth International Conference on Tools and Algorithms for the Construction and Analysis of Systems]\n\nFinding heap-bounds for hardware synthesis\n\nByron Cook, Ashutosh Gupta, Stephen Magill, Andrey Rybalchenko, Jiri Simsa, Satnam Singh, Viktor Vafeiadis\n\nFMCAD'09 [Formal Methods in Computer Aided Design] (Austin)\n\nSummarization for termination: No return!\n\nByron Cook, Andreas Podelski, Andrey Rybalchenko\n\nFMSD (2009) 35:369-387\n\nProving that non-blocking algorithms don't block\n\nAlexey Gotsman, Byron Cook, Matthew Parkinson, and Viktor Vafeiadis\n\nPOPL'09 [Symposium on Principles of Programming Languages] (Savannah)\n\nPrinciples of program termination(DRAFT)\n\nByron Cook\n\nNotes from the 2008 Marktoberdorf summer school\n\nProving conditional termination\n\nByron Cook, Sumit Gulwani, Tal Lev-Ami, Andrey Rybalchenko, and Mooly Sagiv\n\nCAV'08 [International Conference on Computer-Aided Verification] (Princeton)\n\nScalable shape analysis for systems code\n\nHongseok Yang, Oukseh Lee, Josh Berdine, Cristiano Calcagno, Byron Cook, Dino Distefano, and Peter O'Hearn\n\nCAV'08 [International Conference on Computer-Aided Verification] (Princeton)\n\nRanking abstractions\n\nAziem Chawdhary, Byron Cook, Sumit Gulwani, Mooly Sagiv, and Hongseok Yang\n\nESOP'08 [European Symposium on Programming] (Budapest)\n\nVerification of Boolean programs with unbounded thread creation\n\nByron Cook, Daniel Kroening, and Natasha Sharygina\n\nJournal of Theoretical Computer Science, Vol. 388, 2007, pp. 227-242\n\nPredicate abstraction via symbolic decision procedures\n\nShuvendu Lahiri, Thomas Ball and Byron Cook\n\nJournal of Logical Methods in Computer Science, Vol. 3, 2007, pp. 1-20\n\nProving thread termination\n\nByron Cook, Andreas Podelski, and Andrey Rybalchenko\n\nPLDI'07 [Conference on Programming Language Design and Implementation] (San Diego)\n\nThread-modular shape analysis\n\nAlexey Gotsman, Josh Berdine, Byron Cook, and Mooly Sagiv\n\nPLDI'07 [Conference on Programming Language Design and Implementation] (San Diego)\n\nLocal reasoning for storable locks and threads\n\nAlexey Gotsman, Josh Berdine, Byron Cook, Noam Rinetzky, and Mooly Sagiv\n\nAPLAS'07 [Asian Symposium on Programming Languages and Systems] (Singapore)\n\nShape analysis for composite data structures\n\nJosh Berdine, Cristiano Calcagno, Byron Cook, Dino Distefano, Peter O'Hearn, Thomas Wies, and Hongseok Yang\n\nCAV'07 [International Conference on Computer-Aided Verification] (Berlin)\n\nProving termination by divergence\n\nDomagoj Babic, Byron Cook, Alan Hu, Zvonimir Rakamaric\n\nSEFM'07 [ International Conference on Software Engineering and Formal Methods] (London)\n\nArithmetic strengthening for shape analysis\n\nStephen Magill, Josh Berdine, Edmund Clarke, and Byron Cook.\n\nSAS'07 [International Static Analysis Symposium] (Denmark)\n\nProving that programs eventually do something good\n\nByron Cook, Alexey Gotsman, Andreas Podelski, Andrey Rybalchenko, and Moshe Vardi\n\nPOPL'07 [Symposium on Principles of Programming Languages] (Nice)\n\nVariance analyses from invariance analyses\n\nJosh Berdine, Aziem Chawdhary, Byron Cook, Dino Distefano, and Peter O'Hearn\n\nPOPL'07 [Symposium on Principles of Programming Languages] (Nice)\n\nShape analysis by graph decomposition\n\nRoman Manevich, Josh Berdine, Byron Cook, Ganesan Ramalingam, and Mooly Sagiv\n\nTACAS'07 [International Conference on Tools and Algorithms for the Construction and Analysis of Systems] (Braga)\n\nAutomatic termination proofs for programs with shape-shifting heaps\n\nJosh Berdine, Byron Cook, Dino Distefano, and Peter O'Hearn\n\nCAV'06 [International Conference on Computer-Aided Verification] (Seattle)\n\nTerminator: Beyond safety(short tool description paper)\n\nByron Cook, Andreas Podelski, and Andrey Rybalchenko\n\nCAV'06 [International Conference on Computer-Aided Verification] (Seattle)\n\nRepair of Boolean programs with an application to C\n\nAndreas Griesmayer, Roderick Bloem, and Byron Cook\n\nCAV'06 [International Conference on Computer-Aided Verification] (Seattle)\n\nTermination proofs for systems code\n\nByron Cook, Andreas Podelski, and Andrey Rybalchenko\n\nPLDI'06 [Conference on Programming Language Design and Implementation] (Ottawa)\n\nThorough static analysis of device drivers\n\nThomas Ball, Ella Bounimova, Byron Cook, Vladimir Levin, Jakob Lichtenberg, Con McGarvey, Bohus Ondrusek, Sriram K. Rajamani, Abdullah Ustuner\n\nEuroSys'06 [European Systems Conference] (Leuven)\n\nOver-approximating Boolean programs with unbounded thread creation\n\nByron Cook, Daniel Kroening, Natasha Sharygina\n\nFMCAD'06 [Formal Methods in Computer Aided Design] (San Jose)\n\nInterprocedural shape analysis with separated heap abstractions\n\nAlexey Gotsman, Josh Berdine, and Byron Cook\n\nSAS'06 [International Static Analysis Symposium] (Seoul)\n\nAbstraction refinement for termination\n\nByron Cook, Andreas Podelski, Andrey Rybalchenko\n\nSAS'05 [International Static Analysis Symposium] (London)\n\nUsing Stalmarck's algorithm to prove inequalities\n\nByron Cook, Georges Gonthier\n\nICFEM'05 [International Conference on Formal Engineering Methods] (Manchester)\n\nSymbolic model checking for asynchronous Boolean programs\n\nByron Cook, Daniel Kroening, Natasha Sharygina\n\nSPIN'05 (San Francisco)\n\nPredicate abstraction via symbolic decision procedures\n\nShuvendu Lahiri, Thomas Ball and Byron Cook\n\nCAV'05 [International Conference on Computer-Aided Verification] (Edinburgh)\n\nCogent: Accurate theorem proving for program verification(short tool description paper)\n\nByron Cook, Daniel Kroening, Natasha Sharygina\n\nCAV'05 [International Conference on Computer-Aided Verification] (Edinburgh)\n\nZapato: Automatic theorem proving for predicate abstraction refinement(short tool description paper)\n\nThomas Ball, Byron Cook, Shuvendu K. Lahriri, and Lintao Zhang\n\nCAV'04 [International Conference on Computer-Aided Verification] (Boston)\n\nRefining approximations in software predicate abstraction\n\nThomas Ball, Byron Cook, Satyaki Das, and Sriram K. Rajamani\n\nTACAS'04 [Tenth International Conference on Tools and Algorithms for the Construction and Analysis of Systems]\n\nA symbolic approach to predicate abstraction\n\nShuvendu K. Lahiri, Randal E. Bryant, and Byron Cook\n\nCAV'03 [International Conference on Computer-Aided Verification] (Boulder)\n\nDesign automation with mixtures of proof strategies for propositional logic\n\nGunnar Andersson, Per Bjesse, Byron Cook and Ziyad Hanna\n\nIEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, Vol. 22(8) 2003\n\nA proof engine approach to solving combinational design automation problems\n\nGunnar Andersson, Per Bjesse, Byron Cook, and Ziyad Hanna\n\nDAC'02 [Design Automation Conference] (Las Vegas)\n\nA framework for microprocessor correctness statements\n\nMark Aagaard, Byron Cook, Nancy Day, and Robert Jones\n\nInternational Journal on Software Tools for Technology Transfer, Vol. 4(3), 2003\n\nA framework for microprocessor correctness statements\n\nMark Aagaard, Byron Cook, Nancy Day, and Robert Jones\n\nCHARME'01 [Correct Hardware Design and Verification Methods] (Edinburgh)\n\nCombining stream-based and state-based verification techniques for microarchitectures\n\nMark Aagaard, Byron Cook, and Nancy Day\n\nFMCAD'00 [International Conference on Formal Methods in Computer Aided Design] (Austin)\n\nFormal verification of explicitly parallel microprocessors\n\nByron Cook, John Launchbury, John Matthews, and Dick Kieburtz CHARME'99 [Conference on Correct Hardware Design and Verification Methods] (Bad Herrenalb)\n\nOn embedding a microarchitectural design language within Haskell\n\nJohn Launchbury, Jeff Lewis and Byron Cook\n\nICFP'99 [International Conference on Functional Programming] (Paris)\n\nSpecifying superscalar microprocessors in Hawk\n\nByron Cook, John Launchbury, and John Matthews\n\n1998 Workshop on Formal Techniques for Hardware (Marstrand)\n\nMicroprocessor specification in Hawk\n\nJohn Matthews, John Launchbury, and Byron Cook\n\nICL'98 [International Conference on Computer Languages] (Chicago)\n\nDisposable memo functions\n\nByron Cook and John Launchbury\n\n1997 Haskell Workshop Proceedings (Amsterdam)\n\nPast and current projects\n\nAutomated Reasoning Group (ARG) IAM Access Analyzer Tiros Zelkova\n\nT2 and the original TERMINATOR (archived)\n\nEast London Massive (archived)\n\nBio Model Analyzer (BMA)\n\nSLAyer\n\nStatic Driver Verifier\n\nSLAM\n\nProver SL (archived)\n\nProver CL (archived)\n\nHawk (archived)\n\nPress\n\nNext Generation Security with Automated Reasoning, an Artificial Intelligence Technology\n\nAWS Podcast #266\n\nAmazon tests out two tools to help keep its cloud secure\n\nWired magazine\n\nBy Lily Hay Newman\n\nJuly, 2018\n\nHow Do You Explain The Unreasonable Effectiveness Of Cloud Security?\n\nhighscalability.com,\n\nSeptember 2018\n\nAmazon Adds Crypto-Based Security Tools\n\npymnts.com,\n\nSeptember 2018\n\nWhy the blue screen of death no longer plagues Windows users\n\nZDNet\n\nBy Nick Heath\n\nSeptember, 2013\n\nComputing Cancer\n\nNature\n\nBy Neil Savage\n\nNovember, 2012\n\nGeek of the week\n\nSimple Talk\n\nBy Richard Morris\n\nSeptember, 2010\n\nA Sign of the Times\n\nWired\n\nBy Cameron Bird\n\nDecember, 2009\n\nA Good Sign\n\nScience\n\nBy Angela Saini\n\nJuly, 2009\n\nOptic Nerve\n\nVogue\n\nBy Dodie Kazanjain\n\nJanuary, 2009\n\nAll Shook Down\n\nSan Francisco Weekly\n\nBy Hiya Swanhuyser\n\nDecember 28, 2008\n\nInside Terminator\n\nchannel9.msdn.com\n\nBy Charles Torre\n\nSeptember, 2007\n\nUsing Proofs to Catch System Hangs Before They're Born\n\nchannel9.msdn.com\n\nBy Charles Torre\n\nJuly, 2007\n\nSend in the Terminator\n\nBy Gary Stix\n\nScientific American\n\nDecember, 2006\n\nTesters aim to kill off dreaded blue screens\n\nBy Mary Branscombe\n\nFinancial Times\n\nNovember, 2006\n\nTerminator tackles an impossible task\n\nBy Rob Knies\n\nMicrosoft Research News\n\nSeptember, 2006\n\nMicrosoft bug-checking tools promise fewer crashes\n\nBy Joris Evers\n\nCNET\n\nMay, 2006\n\nMicrosoft's secret bug squasher\n\nBy Simson Garfinkel\n\nWired\n\nNovember, 2005\n\nBuilding a better bug-trap\n\nThe Economist\n\nJune, 2003\n\nResearching a path to fewer bugs\n\nBy Patrick Meader\n\nVisual Studio Magazine\n\nFebruary, 2003\n\nRecorded presentations\n\nFormal reasoning about the security of Amazon Web Services\n\nPlace: FLoC Plenary\n\nDate: July 16, 2018\n\nMaterials: Video Formal reasoning about the security of Amazon Web Services\n\nPlace: OOPSLA/SPLASH 2018 keynote lecture\n\nDate: November 9, 2018\n\nMaterials: Video\n\nAutomated Formal Reasoning About AWS Systems\n\nPlace: AWS Re:Invent\n\nDate: November 29, 2016\n\nMaterials: Video\n\nAutomatically Proving Program Termination (and more)\n\nPlace: University of Colorado\n\nDate: October 24, 2013\n\nMaterials: Video\n\nWe can prove termination. Now what?\n\nPlace: Workshop on Software Correctness and Reliability 2013\n\nDate: October 7, 2013\n\nMaterials: Video\n\nAutomatically Proving Concurrent Programs Correct\n\nPlace: Microsoft TechFest'07\n\nDate: March 8th 2007\n\nMaterials: Video\n\nVariance Analyses from Invariance Analyses\n\nPlace: Microsoft Research, Redmond\n\nDate: August 8th 2006\n\nMaterials: Video\n\nAutomatically proving the termination of C programs\n\nPlace: Isaac Newton Institute for Mathematical Sciences\n\nDate: February 3rd 2006\n\nMaterials: slides and audio\n\nApplications of Automated Reasoning\n\nPlace: Microsoft TechFest'05\n\nDate: March 8th 2005\n\nMaterials: Video\n\nPhD dissertation\n\nStructuring instruction-sets with higher-order functions\n\nStill want more information?"
    }
}