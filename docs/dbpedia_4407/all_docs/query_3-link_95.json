{
    "id": "dbpedia_4407_3",
    "rank": 95,
    "data": {
        "url": "https://www.figma.com/best-practices/team-file-organization/",
        "read_more_link": "",
        "language": "en",
        "title": "Team, project, and file organization",
        "top_image": "https://cdn.sanity.io/images/599r6htc/regionalized/ae34b2371fcc12ca30c4f16cfc214a6207583e07-4800x2512.png?w=1200&q=70&fit=max&auto=format",
        "meta_img": "https://cdn.sanity.io/images/599r6htc/regionalized/ae34b2371fcc12ca30c4f16cfc214a6207583e07-4800x2512.png?w=1200&q=70&fit=max&auto=format",
        "images": [
            "https://cdn.sanity.io/images/599r6htc/regionalized/8b823444edce5f6c81fbd959301a33582525c23f-540x305.png?w=540&h=305&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/64c5beb99a9fc5a0b00dd4882ab1f6a915ee0752-540x305.png?w=540&h=305&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/c86a9976203e3264f89a20c5fb534a0d845d5f1b-540x305.png?w=540&h=305&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/d5088df6b4e9cf91d8a615901b5d60e1534ce5bc-540x304.png?w=540&h=304&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/1883a9ebc4ce697b718301ad247c0fff45c572c1-540x304.png?w=540&h=304&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/86e51e389dfcb6d2fcd82d054b78857a6b9ef2e3-4800x2512.png?w=4800&h=2512&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/f9858c6ff50a15c40d69a2efd8890ccab36fb968-4800x2512.png?w=4800&h=2512&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/d458513331c8d97bf4284f9cf118575edcdbeeb4-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/daf8366b7fda2881e23e853bf34541e6a896953b-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/0f478c8e6ad07e877fda86093eeb47b776ea1b82-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/a0a92c894a160c91932f0dbdf2a12bf0724fbed0-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/27dba46b09a53a78599727f0743a0511f92f12ad-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/62e98e9597d4e81acd07819a8a99ce9b4e890311-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/5edfaf55a3aebe68843a274edb2db96687ba2cac-4800x2512.png?w=4800&h=2512&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/fbd17a3ba0e7530fd9a222f7830ee699f6395e15-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/1b63864e3b68ea46837383d5dec07a1da2e04924-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/a4cd057bbbfc2029630c5f7c3249ce831ace6461-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/99a973f41491d73a6e02cff8f3e8e589bd5ec6ef-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/c139901e623bc80b7d60c0cda3c98973294fa029-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/f2d2983abd41fe1fde5a137fd42315ea67f6492d-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/306dd3e11dfb5ba9be56254cb76e2d49d37ba69e-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/6a3f7f6620292e67f1ceabfcd7280f5d0fadc420-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/0962641c0726ce0982e336561ab679d01423440c-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/f546d126e08d32e63e025506b8ee2cb46df6efde-4800x2512.png?w=4800&h=2512&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/a9d4bee628ae4e62b2fe59f1bc42643864780c84-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/4b596805e0495ef99aacb30f6a2866f20e872dba-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/937fbd433741c24cb5e046fb2fa586be80f69bda-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/fa72380cc12822a0e4af3df483ca5713cf51318b-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/d60d3b15002a54924612a06bc3663bae621aaa2d-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/b27ed4aaf9299a94bde905e3d8647339cec45e90-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/bc62c10efece849c82452810e0fbdb34ab69b8b8-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/9d800cee76e6a6fae53117ae7d2668eb6a3ea137-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/5a2090c1289697a15de4a6cc524de6408eec5b5c-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/15d73567cf9fa0adb274f1546f27d83e89b84ec1-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/9bc45acd6078213ec7e6d95e7809f5c6cb02ce3d-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/8a8aa61c824d32ff6f98b0eab650e0e3e6339615-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/4231c37bafd88e3de85a8237e9d75ff01e501e42-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/9a981092d571aa303f79e25b40d0174e882a32a7-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/97556d6c9cbe6b39f80cc7b0f10097faf801ce68-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/3215a41d97dbfe257db2b9a75e5a6d7c63afe19e-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/0f209994623f803842886a09329a5309431d9ce8-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/089560c908e845ca5ea899378350a9458969c5bb-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/2f596b0f30889e0b29a90171196157e48697a6f7-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/dcaf256830e1d4c242d158ba29a3361ac8be547d-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/f97c754ac216c573ec86ed1be09344fad0001582-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/b0b4e965e40706fcde7c6bfa339f51d237bbdc63-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/43728244e95d2b1c401b48e58db8924453f64143-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format",
            "https://cdn.sanity.io/images/599r6htc/regionalized/ee1add454451b415f485ab72623e926261a44392-3840x2160.png?w=3840&h=2160&q=75&fit=max&auto=format"
        ],
        "movies": [
            "https://cdn.sanity.io/files/599r6htc/regionalized/ce354962ed967dbc75fc5c1dbb16b2c1e7d1021e.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Recommended structures and workflows to make your team more efficient",
        "meta_lang": "",
        "meta_favicon": "https://static.figma.com/app/icon/1/favicon.ico",
        "meta_site_name": "Figma",
        "canonical_link": "https://www.figma.com/best-practices/team-file-organization/",
        "text": "The way you structure and present work can make or break your ability to map towards broader goals, stay on the same page, and even know where to find the latest version ofÂ aÂ design.\n\nRegistration-flow-v1-final10.jpg, anyone?\n\nItâs also the key to alignment, not only within your team, but also with your cross-functional partners. While we all strive for a well-organized structure to match our pixel-perfect designs, it can be tough to figure out where to start, how to maintain your system, and what works best forÂ yourÂ team.\n\nIn this guide, you'll find a few different approaches for how to organize your teams, projects, and files withinÂ Figma.\n\nHere's what you canÂ expect:\n\nHow to structure teams\n\nTips for organizing projects\n\nBest practices for managing file organization\n\nHow to structure teams inÂ Figma\n\nWithin Figma, teams can have three types of permissions: open, closed, andÂ secret.\n\nOpen is a fully transparent team that anyone in your organization can join at any time. This is best for most situations, and encourages an open designÂ culture.\n\nClosed requires a request from your colleagues before they can join, which is ideal if you want to limit whoâs making updates to yourÂ designs.\n\nSecret teams are exactly that, as they prevent your entire organization from seeing what youâre working on; only the team creator and editors have accessâ¦ perfect for that surprise project youâre cookingÂ up.\n\nDespite being called teams, these permission types can be a great way to separate workstreams within your organization. If you donât know where to start, try setting up teams in Figma by mirroring your product teamâs structure. For example, your organization might be split into platforms, like web, iOS, and Androidâall guided by an overarching design system. By allowing your different disciplines to work independently within their own Figma space, you can operate as transparently as you need. If, say, the iOS team requires the creation of a secret team while the next version of the product is being released, that can be managed independently from the rest of your FigmaÂ teams.\n\nTeams can also be useful for larger groups that look after separate, more complex projects. At Figma, weâve set up teams for each part of our product, like prototyping, design systems, collaboration, and so on. This encourages a workflow in which our central design system is consumed by different product teams that all share our Figma components and stylesÂ library.\n\nBefore diving into approaches, itâs helpful to think about what the âday to dayâ of a designer on your team looks like. Can they achieve most of their responsibilities in one or two teams within Figma? Would a new designer joining the team be able to understand your Figma structure at a glance, or would it require training?\n\nSimplicity is your friendÂ here.\n\nWithin your organization, create a separate team for your design systemâor set of Figma librariesâwith its own unique project, file, and permissions structure. Splitting it out into a separate team can help you frame it as a distinct workstream, handled independently by a subset of the team. If you'd like a simple structure to get started, check out this community file; this one is more in-depth.\n\nA separate team allows you to manage individual edit and view access on the work inside of your design system, whether thatâs at the team, project, file, or even branch level. This extra layer of organization gives you the flexibility to use projects for organizing your system, too. Once you create a separate team for your design system, there are four different approaches toÂ chooseÂ from.\n\nNote: Itâs still possible for different teams to use different design systems. Take a look at our help center article covering library permissions.\n\nBy lines of business\n\nStructuring teams by lines of business is best for umbrella companies where designers are responsible for particular products\n\nFor larger companies with a portfolio of sub-businesses or products, creating teams for each is the way to go. This approach will allow you to manage permissions for specific lines of business, with the flexibility of inviting stakeholders into multiple teams (or projects within teams) asÂ needed.\n\nFor example, a company like Alphabet might want to create a different team within Figma for each of their businesses, say, Google Maps, Gmail, and Search. By mapping the structure to each area of their business, designers can be responsible for delivering work specific to their own workstreams, create libraries unique to the style of their team, and invite key stakeholders to the correct areasÂ ofÂ Figma.\n\nAs you can imagine, at this scale, you may end up needing to split your work down even further to stay on top of all the features youâre designing. This is where prefixes come in handy. For example, by adding iOS to the start of your teams, you can more easily search within Figma and surface all the teams responsible for working specifically on thisÂ platform.\n\nBy platforms\n\nStructuring teams by platforms is best for independent teams who work on specific operating systems\n\nThis approach is best if youâre a design team that typically focuses on one platform. Or, if your engineering team is split into platform-specific groups, you may organically land here as you map designs to teamÂ structure.\n\nStart by creating an individual team for each operating system, like iOS, Android, and web. If you have multiple apps or websites, those should be separate teams as well. This approach allows you to group those systems into very intentional project work and keep everything siloed just enough so that new team members and stakeholders can quickly see how the work maps toÂ product.\n\nLike the previous approach, if you need to create smaller teams within this structure, you can prefix them with a name to aid discoverability. If you work in a large product team where each platform is split into multiple workstreams, products, or features, you might consider creating âsubâ teams. In this instance, youâd use a platform prefix on team names, followed by the product feature that your team is working on to make sure that they are easily discoverable via FigmaÂ search.\n\nBy initiatives\n\nStructuring teams by initiatives is best for product teams grouped byÂ feature\n\nInitiatives are similar to the popular âsquad model,â which is based on cross-functional product teams. (The Spotify team created an excellent Figma Community file that takes you through their entire process using this model, and I highly recommend a read.) If youâre working within an agile project, it functions just like a large feature or epic.\n\nFor teams that work on long projectsâlike consultancies, agencies, or annual release software productsâyouâll probably be spending time in one Figma space for six to twelve months at a time. This requires an approach thatâs semi-permanent, while flexible enough to be situated within a larger product team and organization.\n\nIf this is you, map teams to your internal epics or long-term initiatives. Perhaps youâre embarking on a major onboarding feature release that will significantly impact the user flowâthis would be a perfect time to create a team. Or, say youâre introducing a notifications feature to your appâthis would warrant an approach thatâs larger than a team for an individual feature, but smaller than one for a platform or operating system.\n\nAs you can imagine, this approach involves creating more teams as your products mature, which will require governance from an admin perspective. If this is the case, align team names to the nomenclature that you use across the business for each area of the product, abbreviating them as needed. For example, in the team name, âCheckoutâ would be âCheckout,â âProduct Landing Page (PLP)â would be âPLP,â and âGrowth Marketingâ could be consolidated to âGrowth,â to make team names as scannable as possible. This is a good opportunity to align across the product and design teams to ensure everyone is aware of the correct naming conventions.\n\nThis approach is ideal for globally-distributed teams, with work that can be split down to building block, feature level. On the surface, admins can track the features that designers are actively working on as they transition through the design pipeline, with visibility over each release. Additionally, with this approach you may find it easier to track a designerâs allocation from your Figma admin panel. Is one designer working across multiple teams at the same time? They might be stretched andÂ needÂ help!\n\nBy pillars\n\nStructuring teams by pillars is best for companies with distinct features that fall under one product offering\n\nThis approach is how we at Figma structure our teams! Itâs great for companies that build and hire for specific feature development. For example, a cross-functional working group built branching in Figma, so we have a dedicated team for that pillar. Similarly, our prototyping team has their own space within Figma to work on new feature updates.\n\nThis differs from the lines of business approach in that this method isnât for separate products that are sold independently; it works for teams that still fall under the same product offering. If youâre billing separately for your individual product areas, it may make sense to look at the guidance around addingÂ prefixes.\n\nBy scale\n\nHow you structure your team should depend on the size and scale of your organization\n\nWhile thereâs nothing stopping you from inviting 100 editors into a team, that could cause issues with keeping your work consistently organized and structured, and flowing through the design process. Creating smaller teams that are responsible for specific areas of the product allows you to be more nimble, while setting a strong foundation asÂ youÂ scale.\n\nHow many editors should a team have? Try to think about editors as you would guests around a dinner table. Just as thereâs a limit to how many people would comfortably be able to contribute to a dinner party conversation around one table, there are only so many designers who can seamlessly contribute to a piece of design as editors withinÂ Figma.\n\nSimilarly, it might be useful to follow the Jeff Bezos âtwo pizza ruleâ when it comes to team size. Would two pizzas be sufficient to feed the editors on your team? If the answer is no, break the team up into smallerÂ ones.\n\nWhile you should be thoughtful about the number of editors in your team, be liberal about adding viewersâthere's no limit on those, and having them fosters an open and transparent design culture. That might mean inviting all of your designers to your design system team as viewers, so they can take a look at library files when they need to, rather than requesting access each time they view a component. Think about including developers and other design-adjacent colleagues too, the more the merrier when it comes to viewing our designÂ work.\n\nIf youâd like to plan your own team structure, we have a FigJam template to get you started.\n\nTips for organizing projects inÂ Figma\n\nProjects live within teams, and you can create an unlimited amount of them if youâre on the Professional, Organization, or Enterprise plans. This provides an enormous amount of flexibility to scale design operations in a way that works for you. You can then describe the files within each project so that your collaborators have project context and understand what goesÂ where.\n\nOf the many ways that you can organize projects, these are the three approaches that weâve seenÂ workÂ best:\n\nProjects for each productÂ surface\n\nProjects for each feature or production state\n\nProjects for each stage of your designÂ process\n\nHereâs a high-level breakdown:\n\nBy product surface\n\nOrganizing by product surface is best for web apps orÂ products\n\nThis works best with an example. If youâre building an e-commerce website, you might have the following sections:\n\nAccount\n\nCart\n\nHomepage\n\nProduct listings\n\nFrom there, you can drill down even more and start projects for each logical user flow or sectionâlike Account, Profile, Products, and Purchase. This allows you to create files that have the perfect amount of context, so that designers can focus on solving the relevant problems without the distractions that come with a larger, more complex file. Designers can also perform user testing on, and contribute to, end-to-end processes within the application without being too concerned with irrelevant userÂ flows.\n\nFor cross-functional projects, splitting your work into more manageable chunks also helps localization experts or copywriters focus on individual releases, rather than trying to solve entire user flows inÂ oneÂ swoop.\n\nIf you just want to move fast and get started, start with this approachâitâs the easiest framework toÂ buildÂ on.\n\nNote: This is a perfect time to bring branching into your workflow to manage files. See branching in practice here.\n\nBy feature or production state\n\nOrganizing by production state is best for teams that require visibility into what's \"live\" andÂ whatÂ isn't\n\nThis is useful if you want to create a more transparent approach to sharing the status of a feature. For example, if you manage permission access to files on a project basis, or you arenât using branches to manage workflows, you can create projects for each productâs user flows. Then, you can split these further into work that is âproductionâ (designed, signed off, and developed) and work that is a âfeatureâ (currently inÂ progress).\n\nSo, what does that look like inÂ practice?\n\nInside âProductionâ projects, you might have a complete, approved user flow (or multiple flows, depending on product scope). Anything that is live on the app, website, or product would live here. You might update it on a regular cadence that maps to how you release work, perhaps monthly or quarterly, depending on the complexity of yourÂ product.\n\nInside âFeatureâ projects, you might house smaller feature files so that each design task has a dedicatedÂ file.\n\nThere are a few reasons why this is easier than working inside of a main userÂ flowÂ file:\n\nIt prevents confusion about which screens are old and which are new, allowing you to get work through the design pipeline aÂ lotÂ faster.\n\nIt reduces the possibility for file bloat, which can beÂ distracting.\n\nIf youâre using project management software, itâs easier to name files by the ticket youâre working on. For example, if you want to A/B test the display of a button, youâd name a file to match the ticket, like TWIGâ813 â Button a/bÂ test.\n\nThis community file shows you what the workflow would lookÂ like.\n\nNote: You could also use branching instead of creating brand new files for ticket workflows in project management tools.\n\nBy stage of design process\n\nOrganizing by stage of design process is best for teams like agencies, who have defined stakeholder reviewÂ sessions\n\nThis method requires a different project for each stage of the design process that your internal team aligns to, which is helpful for stakeholder management. The following stages are a good startingÂ point:\n\nWIP\n\nReview\n\nDevelopment\n\nShipped\n\nFrom here, you can split up the design process and build on top of it if needed. For example, you might need a stage for external stakeholder review, or for copywriters to see the work and make copy suggestions.\n\nNote: You can also use FigJam for stakeholder review, which you can learn all about in our FigJam best practice guide.\n\nWithin these projects, you can create files as normal and then drag and drop them into other projects in the file browser. Itâs a great Easter eggâonce you find it, youâll start to loveÂ theÂ power.\n\nThere is the additional benefit here of having project-level permissions. You can invite individuals to projects, which creates an extra level of control over what people see in your designs. For example, if you want developers to only see files when they are in the Shipped project, you canÂ doÂ that.\n\nBest practices for anyÂ structure\n\nOnce you've chosen the right approach for you and your team, there are a few tips that apply to anyÂ situation.\n\nCreating a project for your userÂ journey\n\nCreate a project that houses your full end-to-end user flow within your product, or at least the section of the product youâre responsible for.\n\nWhy? Whether itâs from your VP of Product, developer, sales manager, or CEO, someone will always require an up-to-date flow to demo the product externally. Keeping a current full user flow for each section of your product (or the entire product, if small enough) allows the wider business to quickly glance at the current state of the product. You can update it quarterly, to ensure that all the latest features are included in product demonstrations and client prototypes.\n\nPlus, having one main space (whether thatâs a team or project) with your signed off and âliveâ work means that you can keep everything thatâs live in one consistent place, reducing confusion for non-design stakeholders about where all of your perfect pixelsÂ live.\n\nNote: For this workflow, itâs best to align on a governance procedure for managing how work transitions from one place to another. This may be a quarterly âquality day,â where team admins from each \"source of truthâ team move the work youâve created. Getting on the same page about these norms leads to more consistent and scalableÂ work.\n\nFavoriting projects\n\nTo keep projects fixed within our sidebar, you can âfavoriteâ them; you can reverse this at any time, which is perfect for when you want to temporarily keep something sticky whileÂ youÂ work.\n\nMoving projects\n\nEven though projects live within teams, you can move them to other teams by dragging and dropping. Bear in mind that if you move a project to a new team, file permissions within the project mayÂ change.\n\nArchiving work\n\nAs you create more and more files, organizing and managing their location should be top of mind. The simplest thing to do here is to create a project called Archive (bonus points for adding a trash emoji inÂ theÂ name).\n\nThe most effective way to manage the archive is to drag and drop files into the project once they have passed internal review and been either shipped to products, or the work has been copied back into our main userÂ flows.\n\nYou could create an entire team called Archive, with projects within that for each area of your product, but thatâs probably overkill forÂ mostÂ teams.\n\nTesting\n\nWith unlimited possibilities comes more responsibility (thatâs how the saying goes, right?), and this is where testing comes in handy. Try out one of the approaches here and see how it lands with your team. You may find that you end up with a mixture of all of the ideas, or even something brand new. In which case, I'd love to hear aboutÂ it!\n\nBest practices for managing file organization inÂ Figma\n\nOnce your teams and projects are set up for success, you can create a file structure thatâll make your design process feel as smooth as butter. Thatâs one step closer to the fun partâactually designing interfaces inÂ Figma.\n\nTo recap: Within teams, there are projects, and within projects, there are files. Similar to teams and projects, you have the ability to create an unlimited amount of files within the Professional, Organization, and Enterprise plans, soÂ goÂ wild!\n\nThis freedom means a lot of flexibility, which is why a robust file structure thatâs consistent across your organization can help you ship products faster. Since files arenât tied to individual projects, you can drag and drop them into any project, which is useful if you want to match them to a workflow-based project structure.\n\nSize\n\nWhen teams migrate to Figma, many of them have one file that includes the entire design process, with multiple iterations and versions. While itâs tempting (and often convenient) to include an entire product within one file, try to keep files as small and nimble as possible. There are of course exceptions to the rule, though! If this is your workflow and you have a larger file, make sure to create a new file or branch for every feature update. This way, you can focus on the work at hand, rather than being confused by other, older design work that doesn't require an iterative update.\n\nWhile you have your main user flow in one file, and iterative updates in others (or a branch), it makes sense to introduce a process whereby this newer work is âmergedâ back into the main flow. In order to maintain consistency and efficiency, this makes sense as a collective process either once per month, or once per quarter if you have a larger team with lots of moving parts. This larger file (or files) should live in a separate project, and you can then move smaller files into an Archive project to keep file management as clean as possible, as we covered in the projects section.\n\nIf youâre looking to archive work within files that have a longer shelf life, check out this workflow.\n\nNaming\n\nWho remembers the days of AccountâAuthâv3.01âfinal2âcopy-edits.png? It still gives me nightmares today.\n\nWhen it comes to naming, thereâs nothing wrong with being descriptiveâif itâs easier to find, itâs easier to design. A descriptive name, just like a semantically named component, significantly aids the discoverability of our work. Itâs just a matter of establishing a clear, repeatable naming convention, so you avoid verbose (and difficult to maintain) fileÂ names.\n\nDepending on which project structure you opt for, a strong naming convention could look something like this for aÂ webÂ project:\n\nAnd hereâs how that may look for a software product. For example,Â Figma!\n\nFiles pair really nicely with our projects, so you can extend the naming to make them easier to find andÂ understand.\n\nPro-tip: Thereâs a very neat feature within file names whereby if you type a hyphen (â) followed by an arrow (>) it automatically turns into an arrow (â). Cool, huh? It even works backwards, in case you need your arrow toÂ pointÂ left!\n\nIf you manage your designs with project management software, you may want to follow a ticketing system with your Figma files, too. With this in mind, you could compose Figma file names that align as well. For example, a file (or branch!) named TWIG-812 â Form fields A/B test to match the taskÂ name.\n\nOr you might work with a combination of the two! Following the feature or production state approach, you could end up with file names that are different depending on whether they are \"Production\" or \"Feature\" files, as demonstrated here:\n\nOf course, you can introduce branching to manage versioning. Instead of using different files for new iterative updates, you can create these in a branch instead, which would align to the product surface approach:\n\nVersion history\n\nSince Figma is built in the browser, versions are automatically created within the version history of every file. You can supercharge this by making use of ânamed versionsâ to indicate any significant changes toÂ theÂ team.\n\nBeing able to name major changes makes it easier to articulate the evolution of a design to stakeholders. Plus, you can restore to earlier points in timeÂ asÂ needed.\n\nStructure\n\nGenerally speaking, you should optimize your design files for speed, comprehension, and collaboration. This means that if you spot an opportunity to split files into smaller, more nimble ones,Â goÂ ahead!\n\nHere are a couple examples:\n\nIf you usually carry out a lot of image-heavy research, keep this inside a separate file. Use the same naming convention for your main file, but append it with ââ Research.â For example, Account â Onboarding as the main file name, and Account â Onboarding â Research as your research file. The performance gains from smaller, more nimble files will be noticeable, and youâll thank yourself months later when you arenât forced to navigate a complex file with littleÂ context.\n\nIf your discovery work is ordinarily loose and made up of components, shapes and text, keep it all inside one file on a separate page. Name this page Discovery to keep things simple. As you progress through the design process, you might move these components to a page within the file called Components, or (even better) to the main design libraries inside your design systemsÂ team.\n\nLetâs get into the page structures. Iâll be working on the assumption here that youâre part ofÂ #2Â above.\n\nThe page structure of dreams consistsÂ of:\n\nCover: Where you keep the thumbnail of your file so that itâs discoverable in the fileÂ browser.\n\nVisual research: A home for all those wonderful screenshots you use asÂ inspiration.\n\nUser research: An optional space for user testing flows andÂ concepts.\n\nDiscovery: Where you flesh out ideas and store your (amazing!) rejectedÂ ideas.\n\nFlow: How you pull together formalized ideas into a structured user flow forÂ feedback.\n\nPrototype: An optional page showing micro interactions and click-throughs of work. Why is there a separate page for flow and prototype? Prototypes typically require duplications of screens for animations (a series of screens for your loader, for example) and that could be confusing to stakeholders. Keeping things separate helps you be more intentional with file organization.\n\nLocal components: A page including components specific to this file (e.g. a carousel thatâs only used on this individual screen). Knowing that you should keep components at a more global, design systems level, this page is optional unless you do need components specific to this pieceÂ ofÂ work.\n\nReady for development: Once youâve gotten sign-off from key stakeholders, organize your work here. Itâs good practice to keep everything that has been signed off and shipped in a separate location from work in progress filesâyou donât want to use the wrong asset inÂ production!\n\nIf you want to uplevel your page structure, you can even include spacer pages in your side panel so that thereâs a clearer distinction between phases. These are created using a series of hyphens in the name of the pageâsimple, butÂ effective!\n\nWait, wait, wait. Where are the emojis? Letâs jazz thisÂ thingÂ up.\n\nAs this is just a guide, your page skeleton may differ significantly, and thatâs totally okay. Every company is different, and you may end up with a smaller or larger base structure for your organization.\n\nBranching\n\nBranching can make file management a lot easier in the long run, and ensure that youâre all working within the correct âmainâ file atÂ allÂ times.\n\nAn example may helpÂ here!\n\nLetâs say you have a team for your consumer app, a project for the Account section of your app, and a file for the Account â Auth designs. If you need to work on a new feature like Add new form fields to the authentication flow, you could use branches to manage the designÂ updates.\n\nIf one designer is responsible for each feature, you could create a branch for each distinct update, managed independently. For example, in this instance youâd create a branch named TWIG-812 â Form fields. TWIG-812 refers to the ticket number from your project management software, like Jira, Asana, Notion, Monday.com, Linear, and so on. You can see a full list of Figma integrations here.\n\nEach designer would work within their own branch, testing out their ideas, gathering feedback, creating prototypes, and ultimately pushing it through the development process. You could invite your developers into a branch as viewers, or even embed the branch into your project management software toÂ browse.\n\nOnce the work has been signed off and coded up, youâd then merge your work back into the main Account â Auth file, add a named version into the version history with a date and description of the work completed, and move onto the nextÂ feature.\n\nCover pages\n\nCover images are great for making files for discoverable. You can design these however you wish, but keeping a consistent structure isÂ key.\n\nTo set up a cover image, create a new Frame on the canvas using the Plugin / file cover preset in our Figma Community section, illustrated below.\n\nOnce youâve added a cover frame, you can design it! At the very least, it makes sense to include details like the file name, and a short description of itsÂ contents.\n\nExtending this, you might include a screenshot of the work inside the file. This can help if you have lots of files with similarÂ names.\n\nSome teams even indicate the status of their design work and information on the team thatâs designing the featureÂ too!\n\nThere are endless options here, and you can add as much as you need to keep teammates and stakeholders informed. For inspiration, take a look at the Figma Community.\n\nFrame organization\n\nGood file organization is not only helpful for stakeholders, but for the wonderful developers who will build your ideas. With a few components to help organize your top level distinct user flowsâand individual frames within this flowâyou can quickly assemble clear, discoverable files. Looking for a jumping off point? Hereâs a template to get youÂ started.\n\nThis step is best left to the end of your design process, once everyone is on board with the direction and youâre moving towards production. Tackling this earlier might mean that you have to re-organize each time you iterate, which can be messy and frustrating. This would also happen in your Ready for development page.\n\nFlows for different platforms\n\nIf youâre a cross functional team who ships designs for iOS, Android, and web, youâre probably wondering how best to manage this within your file. The best approach is to use the Figma canvas to organize frames according to flow. Whether itâs in prototype form, or in your Ready for development page, some simple organization tricks can make this all a lot easier to digest. In this instance, you might end up with something that looks like the following diagram.\n\nYou can see in this screenshot that frames are organized by platform, with mobile at the top and desktop underneath. This works best when youâre explicit with âon canvasâ notes paired with consistent frame spacing notations, to make it easier to skim through and digest. You may even want to consider using Figma sections to group theÂ platforms.\n\nThis is just an example, and you may have many more frames on the canvas to organize. If youâre entering a world where you have hundreds of frames per platform, consider splitting these into separate pages, or even separateÂ files.\n\nUltimately, you might decide where platform designs live by thinking about the handoff process. Is the same developer(s) working on both mobile and web here? If yes, it makes sense to be in the same file. If not, splitÂ themÂ up.\n\nLayer naming\n\nAhh, our old enemyâthe unnamed layer. Naming layers is not only the butt of many a design joke, itâs something that can divide teams and impact implementation. Seriously!\n\nFirst, consider how much you need to be describing or communicating with layers in the first place. With this in mind, youâll want to think about how well and how often you communicate with the development team within your organization.\n\nIf youâd prefer to read this layer naming guide as a Figma file, we have a resource that you can duplicate.\n\nNo layer names\n\nDesign stage: Ideating\n\nOwner: File creator\n\nI promise you Iâm not cheating here, this is a legitimate approach for teams (or individuals) that donât need to rely on the layers to communicate their design decisions.\n\nThis approach is either something youâd limit to the ideation phase of your design process, or go all in if you communicate your decisions in other waysâperhaps with on-canvas communication, or with other types of documentation.\n\nWeâre just having fun at this stage, so you donât need to pay too much attention to our layer naming or structure. Because this is still very scrappy, we donât need to be concerned about naming or even using particular elements (maybe a rectangle is fine forÂ aÂ button!).\n\nRefinement\n\nDesign stage: Refining\n\nOwner: File editors\n\nAre you and your team preparing for sign off from your key stakeholders? This is where you should think about how easy it is for someone to digest your ideas and iterate on them. Clear layer names can really help here; call a card a card, a number a number, and a description a description. While individual designers are still owning their designs at this stage, layer names need to make sense to the rest ofÂ theÂ team.\n\nAligning to code\n\nDesign stage: Ready for handoff\n\nOwner: Design systems team\n\nThis section will be split in two, with a Block Level Modifier approach and one aligning toÂ HTMLÂ markup.\n\n1. Block Level Modifier\n\nThis concept borrows from engineering, and it helps you align layers to code so developers can quickly grasp how to structure their components.\n\n2. Aligning toÂ HTML\n\nIf youâre building a web product, it might be worthwhile to name your Figma layers based on how theyâd be presented in the frontend markup that your developers will beÂ writing.\n\nThese are technical approaches, and are best handled once your components are in the correct Figma library, in a production-ready state. Any time before, and this would require too many small-scale changes to your layer structure, potentially causing more issues than they solve in theÂ longÂ run.\n\nWhile designs are really never \"finished,\" follow this structure when you're heading into production. Itâs an opportunity to collaborate with your developers, as thereâs no better design process than an open and transparent one. Since this method requires knowledge of markup language, itâs best for a technical designer or the design systems team toÂ takeÂ itÂ on.\n\nIf your team isnât closely aligned with your engineering counterparts, you might consider a different approach; the naming only really makes sense if both teamsÂ useÂ it.\n\nBonus: Merging aÂ fewÂ concepts\n\nDesign stage: Ready for handoff\n\nOwner: Design systems team\n\nWhat if we wanted to borrow something from each of these concepts? Using Figmaâs component description field, you can meet these techniques in the middle and satisfy both design and engineering teams.\n\nLike the more technical approaches, this is ideal for when you've already agreed on a componentâs design and are moving it into the Figma library file. This way, you only need to set it up once, and publish it out to the wider teamÂ forÂ usage.\n\nWith your design systems team closest to your engineering team, you can align the naming conventions, status, and any other important information with the correct engineers and then add it to your Figma component description.\n\nRefinement is the easiest approach to scan and read for most teams, so letâs use it as a startingÂ point.\n\nExtending the layerÂ names\n\nYou can document your components using the description field to add notes about usage and appropriate naming conventions. This will appear both for designers (in the properties panel) and developers (in the inspectÂ panel).\n\nAdding documentation to yourÂ components\n\nBecause there are tons of different ways to implement designs, you can help your engineering team by adding useful annotations onto theÂ canvas.\n\nNote: Manage documentation in a separate file, so that you can maintain documentation and component versions in two separate places. This way, docs are always up to date, even while you tinker onÂ newÂ ideas.\n\nThe below is an instance component with manually-added notes that alignÂ toÂ HTML.\n\nYouâve been framed\n\nFile organization might feel like a chore at first. But when collaboration is at the heart of your design process, the way we communicate to other team membersâwhether thatâs through organization or namingâcan help us work more smoothly and efficiently.\n\nLive long and organize!"
    }
}