{
    "id": "correct_foundationPlace_00095_3",
    "rank": 92,
    "data": {
        "url": "https://www.kpmoran.com/sage-lab",
        "read_more_link": "",
        "language": "en",
        "title": "SAGE Lab — Kevin Moran Ph.D.",
        "top_image": "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/ebea101a-154c-42d7-9824-555e4696f3ec/favicon.ico?format=100w",
        "meta_img": "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/ebea101a-154c-42d7-9824-555e4696f3ec/favicon.ico?format=100w",
        "images": [
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1628870309736-QYH315CVBHH8HOMZ93J0/1280px-Cisco_logo.svg-3.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1628869957146-C820YN74WL4STP4PA1W4/NSF_4-Color_bitmap_Logo-2.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1628870309736-QYH315CVBHH8HOMZ93J0/1280px-Cisco_logo.svg-3.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1598208184106-W9D7IG9F2G2V7OLSDEHJ/image-asset.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1598208274130-1W2IYWJB6WWT7VC3UMLQ/image-asset.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1598208331446-XIC6EC88HDJSRIT84Z3C/image-asset.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1598208356425-31XH9H62PYOCYGVN6NY3/1280px-Cisco_logo.svg-2-2.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1546293783319-SNW2H6F1LQFCCICZSJMR/ReDraw_Logo.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1515602038073-AZ0X532I73QEAS4EUQOD/MPlus-Logo.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1480440657046-OJ7SW87T7CY7NNQZ29FC/FUSION_title.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1515603641235-CAVNL2PRO3SVQY5XRCBT/ODBR-Logo.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1515602777760-YCO5LDPP63O1UPUCE1N4/GVT-Project-Logo.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1546295140707-D2FVZT2B2PYD9VJR3K56/Gcat-Logo.png",
            "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/1480440593617-XVJIDVB8OBAAXZKMDEDP/CrashScope_Logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This page outlines Dr. Moran’s most recent research projects in software engineering, machine learning, and computer security.",
        "meta_lang": "en",
        "meta_favicon": "https://images.squarespace-cdn.com/content/v1/53065911e4b0cca0183fc14a/ebea101a-154c-42d7-9824-555e4696f3ec/favicon.ico?format=100w",
        "meta_site_name": "Kevin Moran Ph.D.",
        "canonical_link": "https://www.kpmoran.com/sage-lab",
        "text": "SAGE Lab\n\nDr. Moran directs the SAGE Research Lab, which is housed in the University of Central Florida’s Department of Computer Science. The mission of the SAGE Lab is to pursue a more complete understanding of how engineers develop software, and to build the next generation of intelligent developer tools to help facilitate the software engineering process. You can visit the SAGE Lab website using the button below for more information.\n\nReDraw - Using Artificial Intelligence to Automatically Prototype Mobile Applications\n\nIt is common practice for developers of user-facing software to transform a mock-up of a graphical user interface (GUI) into code. This process takes place both at an application’s inception and in an evolutionary context as GUI changes keep pace with evolving features. Unfortunately, this practice is challenging and time-consuming. In this paper, we present an approach that automates this process by enabling accurate prototyping of GUIs. Our approach called ReDraw combines automated software repository mining, dynamic analysis, and deep learning techniques to automatically convert images of a mobile app UI into highly accurate code.\n\nMDroid+ Enabling Empirically Driven Mutation Testing for Android Apps\n\nMutation Analysis has arisen as a promising means of evaluating the effectiveness of software test suites. However, traditional mutation operators tend to induce relatively simple bugs into software programs, and the extent to which the induced bugs are representative of real faults is an active topic of study. With the MDroid+ project, we aim to help enable mutation testing for Android apps by empirically deriving a comprehensive set of mutation operators specific to the domain of Android apps.\n\nFusion - Improving Bug Reporting for Mobile Applications\n\nBug reporting systems have not changed significantly in recent years. Despite striking advancements in program analysis techniques, reporters typically enter textual information to describe a bug. However, this type of report has been shown to be woefully inadequate for developers looking to reproduce and fix reported bugs. The goal of the Fusion project is to leverage static and dynamic program analyses to improve the bug reporting process and produce higher quality reports with more detailed information, while requiring less effort from reporters.\n\nODBR - On Device Bug Reporting for Android Apps\n\nBugs that surface in mobile applications can be difficult to reproduce and fix due to several confounding factors such as varyiable contextual states, and device fragmentation. Developers need support in the form of automated tools that allow for more precise reporting of application defects in order to facilitate more efficient and effective bug fixes. The ODBR tool leverages the uiautomator framework and low-level event stream capture to offer support for recording and replaying a series of input gesture and sensor events that accuratley describe a bug in an Android application.\n\nGVT - Automatically Verifying GUI Designs for Mobile Applications\n\nThe inception of a mobile app typically takes form of a mock-up of the Graphical User Interface (GUI), represented as a static image delineating the proper layout and location of GUI widgets that satisfy requirements. Following this initial mock-up, the design artifacts are then handed off to developers whose goal is to accurately implement these GUIs and the desired functionality. Given the sizable abstraction gap between mock-ups and code, developers often introduce mistakes related to the GUI that can negatively impact an app’s success in highly competitive marketplaces. The goal of the GVT project is to provide automated support for detecting and reporting these design violations in mobile apps.\n\nGCat - Automated Summarization of GUI-Changes in Mobile Apps\n\nDue to the rapid evolution of mobile apps, developers need automated support for documenting the changes made to their apps in order to aid in program comprehension. One of the more challenging types of changes to document in mobile apps are those made to the graphical user interface (GUI) due to its abstract, pixel-based representation. We developed a fully automated approach, called Gcat, for detecting and summarizing GUI changes during the evolution of mobile apps. Gcat leverages computer vision techniques and natural language generation to accurately and concisely summarize changes made to the GUI of a mobile app between successive commits or releases.\n\nCrashScope- Effective Automated Testing for Android Applications\n\nAutomated testing techniques for Android exhibit notable shortcomings including: (i) A lack of expressive fault reports, (ii) lack of testing for contextual features (e.g. GPS, network), (iii) multiple input generation strategies. CrashScope aims to overcome these shortcomings by using static analysis to identify GUI-specific locations where contextual features exist and multiple input generation strategies to effectively test these locations and uncover crashes. When the tool crashes a target application, it generates an expressive report with the steps for reproduction and a repayable test script. Thus, CrashScope is an effective and practical automated testing tool for Android."
    }
}