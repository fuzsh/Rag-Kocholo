{
    "id": "dbpedia_4727_2",
    "rank": 86,
    "data": {
        "url": "https://cyanogenmodroms.com/vegetalte/",
        "read_more_link": "",
        "language": "en",
        "title": "Bq Aquaris E5 / E5s 4G (vegetalte)",
        "top_image": "https://cyanogenmodroms.com/wp-content/uploads/2016/05/vegetalte-1.png",
        "meta_img": "https://cyanogenmodroms.com/wp-content/uploads/2016/05/vegetalte-1.png",
        "images": [
            "https://cyanogenmodroms.com/wp-content/uploads/2019/09/cmRoms.png",
            "https://cyanogenmodroms.com/wp-content/uploads/2016/05/vegetalte-1.png",
            "https://cyanogenmodroms.com/wp-content/uploads/2014/01/lineageAlpha.png",
            "https://cyanogenmodroms.com/gfx/_spec.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "admin"
        ],
        "publish_date": "2016-05-01T22:29:00+00:00",
        "summary": "",
        "meta_description": "CyanogenMod ROM Bq Aquaris E5 / E5s 4G (vegetalte) Quick Info Check out BQ Aquaris E5 4G (“vegetalte”) with newer LineageOS software Download CyanogenMod Download (nightly build)CyanogenMod 14.1 (Android 7.1 (Nougat)) Main sections for BQ Aquaris E5 4G (“vegetalte”) Information about BQ Aquaris E5 4G (“vegetalte”) CyanogenMod install guide for BQ Aquaris E5 4G (“vegetalte”) ... Read more",
        "meta_lang": "en",
        "meta_favicon": "https://cyanogenmodroms.com/wp-content/uploads/2019/09/logo-150x148.png",
        "meta_site_name": "CyanogenMod Roms",
        "canonical_link": "https://cyanogenmodroms.com/vegetalte/",
        "text": "CyanogenMod ROM Bq Aquaris E5 / E5s 4G (vegetalte)\n\nHow to Install CyanogenMod on the BQ Aquaris E5 4G (vegetalte)\n\nUnlocking the bootloader\n\nMake sure your computer has working fastboot and adb.\n\nEnable USB debugging on the device.\n\nEnable OEM unlock in the Developer options settings on the device. (Note: Not all devices have this setting, so continue with next step if yours does not.)\n\nConnect the device to the computer through USB.\n\nFrom a terminal on a computer, type the following to boot the device into fastboot mode:\n\nadb reboot bootloader\n\nOnce the device is in fastboot mode, verify your PC sees the device by typing fastboot devices\n\nIf you don’t see your device serial number, and instead see “<waiting for device>”, fastboot is not configured properly on your machine. See fastboot documentation for more info.\n\nIf you see “no permissions fastboot”, try running fastboot as root.\n\nFrom the same terminal, type the following command to unlock the bootloader:\n\nfastboot oem unlock-go\n\nIf the device doesn’t automatically reboot, reboot it from the menu. It should now be unlocked.\n\nSince the device resets completely, you will need to re-enable USB debugging on the device to continue.\n\nInstalling a custom recovery using fastboot\n\nSee All About Recovery Images for more information about custom recoveries and their capabilities.\n\nMake sure your computer has working fastboot and adb.\n\nDownload recovery — you can directly download a recovery image using the link below, or visit twrp.me to obtain the latest version of Team Win Recovery Project for your device.\n\nRecovery: Download\n\nmd5: fdf72bc87b4d1b6474a34c5a39611a93\n\nConnect the Aquaris E5 4G to the computer via USB.\n\nMake sure the fastboot binary is in your PATH or that you place the recovery image in the same directory as fastboot.\n\nOpen a terminal on your PC and reboot the device into fastboot mode by typing\n\nadb reboot bootloader\n\nor by using the hardware key combination for your device while it is powered off.\n\nOnce the device is in fastboot mode, verify your PC sees the device by typing\n\nfastboot devices\n\nIf you don’t see your device serial number, and instead see “<waiting for device>”, fastboot is not configured properly on your machine. See fastboot documentation for more info.\n\nIf you see “no permissionsfastboot”, make sure your UDEV rules are setup correctly.\n\nFlash recovery onto your device by entering the following command:\n\nfastboot flash recovery your_recovery_image.img\n\nwhere the latter part is the filename of the recovery image.\n\nOnce the flash completes successfully, reboot the device into recovery to verify the installation. Boot to recovery instructions: Hold Volume Up & Power simultaneously. When the phone vibrates, release Power, wait a second, then release Volume Up.\n\nNote: Some ROMs overwrite recovery at boot time so if you do not plan to immediately boot into recovery to install CyanogenMod, please be aware that this may overwrite your custom recovery with the stock one.\n\nInstalling CyanogenMod from recovery\n\nMake sure your computer has working adb.\n\nDownload the CyanogenMod build package for your device that you’d like to install to your computer.\n\nOptional: Download 3rd party applications packages, like Google Apps which are necessary to download apps from Google Play.\n\nPlace the CyanogenMod .zip package, as well as any optional .zip packages, on the root of /sdcard:\n\nUsing adb: adb push filename.zip /sdcard/\n\nNote: You can copy the .zip packages to your device using any method you are familiar with. The adb method is used here because it is universal across all devices and works in both Android and recovery mode. If you are in recovery mode, you may need to ensure /sdcard (sometimes called Internal Storage) is mounted by checking its status in the Mounts menu. If you have booted regularly, USB debugging must be enabled.\n\nIf you are not already in recovery, boot to recovery mode now.\n\nHold Volume Up & Power simultaneously. When the phone vibrates, release Power, wait a second, then release Volume Up.\n\nIn Team Win Recovery Project, select menu choices by tapping on the appropriately labelled button.\n\nOptional (Recommended): Select the Backup button to create a backup.\n\nSelect Wipe and then Factory Reset.\n\nSelect Install.\n\nNavigate to /sdcard and select the CyanogenMod .zip package.\n\nFollow the on-screen notices to install the package.\n\nOptional: Install any additional packages you wish using the same method (if you are installing multiple packages, install CyanogenMod first and then install any subsequent packages on top of it).\n\nOnce installation has finished, return to the main menu and select Reboot, then System. The device will now boot into CyanogenMod.\n\nHow To Build CyanogenMod For BQ Aquaris E5 4G (vegetalte)\n\nIntroduction\n\nThese instructions will hopefully assist you to start with a stock Aquaris E5 4G, unlock the bootloader (if necessary), and then download the required tools as well as the very latest source code for CyanogenMod (based on Google’s Android operating system). Using these, you can build both CyanogenMod and CyanogenMod Recovery image from source code, and then install them both to your device.\n\nIt is difficult to say how much experience is necessary to follow these instructions. While this guide is certainly not for the very very very uninitiated, these steps shouldn’t require a PhD in software development either. Some readers will have no difficulty and breeze through the steps easily. Others may struggle over the most basic operation. Because people’s experiences, backgrounds, and intuitions differ, it may be a good idea to read through just to ascertain whether you feel comfortable or are getting over your head.\n\nRemember, you assume all risk of trying this, but you will reap the rewards! It’s pretty satisfying to boot into a fresh operating system you baked at home :) And once you’re an Android-building ninja, there will be no more need to wait for “nightly” builds from anyone. You will have at your fingertips the skills to build a full operating system from code to a running device, whenever you want. Where you go from there– maybe you’ll add a feature, fix a bug, add a translation, or use what you’ve learned to build a new app or port to a new device– or maybe you’ll never build again– it’s all really up to you.\n\nWhat you’ll need\n\nA Aquaris E5 4G\n\nA relatively recent computer (Linux, OS X, or Windows) with a reasonable amount of RAM and about 100 GB of free storage (more if you enable ccache or build for multiple devices). The less RAM you have, the longer the build will take (aim for 8 GB or more). Using SSDs results in considerably faster build times than traditional hard drives.\n\nA USB cable compatible with the Aquaris E5 4G (typically micro USB, but older devices may use mini USB or have a proprietary cable)\n\nA decent internet connection & reliable electricity :)\n\nSome familiarity with basic Android operation and terminology. It would help if you’ve installed custom roms on other devices and are familiar with recovery. It may also be useful to know some basic command line concepts such as cd for “change directory”, the concept of directory hierarchies, that in Linux they are separated by /, etc.\n\nIf you are not accustomed to using Linux– this is an excellent chance to learn. It’s free– just download and run a virtual machine (VM) such as Virtualbox, then install a Linux distribution such as Ubuntu (AOSP vets Ubuntu as well). Any recent 64-bit version should work great, but the latest is recommended.\n\nUsing a VM allows Linux to run as a guest inside your host computer– a computer in a computer, if you will. If you hate Linux for whatever reason, you can always just uninstall and delete the whole thing. (There are plenty of places to find instructions for setting up Virtualbox with Ubuntu, so I’ll leave it to you to do that.)\n\nSo let’s begin!\n\nUnlocking your Aquaris E5 4G\n\nWhat does “unlocking” mean?\n\nThe first step in putting any custom operating system on your Aquaris E5 4G is to unlock the bootloader. A bootloader is the very first program that runs when you turn on your device. The bootloader initializes some hardware and then loads the kernel and ramdisk, and gets the boot process going. If the bootloader is in locked mode, it will ensure that only the stock operating system can run. Since you will be installing your own operating system, you need to turn this off. Luckily, Google and bq make it easy.\n\nOkay. I’m in. What do I need to do this?\n\nTo unlock your bootloader, you’ll first need a program on your computer called fastboot. One way to get fastboot is to download and install the Android SDK (Software Developer Kit) from Google. The SDK is used by app developers when they’re writing programs for Android, and who knows, you may want to write apps someday. But the SDK also contains two great tools that are useful even to non-developers. They are:\n\nadb – Android Debug Bridge – this is a program that lets your computer “talk” to your Aquaris E5 4G while the device is running. Among the many things you can do with adb– you can push files from your computer to the device or pull files from the device to your computer, you can get a running real-time log of Android activity (which is very useful for debugging or having others help you debug), you can create an interactive “shell” session (similar to Linux or OS X) to type commands to your device, and much more.\n\nfastboot – fastboot works a little bit like adb, except it’s often used at a much earlier point in the boot process, even before Android or any operating system loads. You can put your Aquaris E5 4G into a “fastboot” mode, whereby, if you are connected via USB cable, you can copy entire partitions from your computer (usually in the form of an image file, such as boot.img or recovery.img) over to the device, wiping over whatever happened to be there. Fastboot is able to do more than that, however. It’s also used to send special commands to the device to do things such as unlock your bootloader.\n\nHow do I do the actual unlocking?\n\nSo this should be a one time thing…\n\nInstall the Android SDK\n\nTo unlock your Aquaris E5 4G, you will need fastboot installed. Go ahead and download the SDK, per the steps on Google’s web page. Then install it by following the specific instructions for your computer.\n\nUnlocking the bootloader\n\nMake sure your computer has working fastboot and adb.\n\nEnable USB debugging on the device.\n\nEnable OEM unlock in the Developer options settings on the device. (Note: Not all devices have this setting, so continue with next step if yours does not.)\n\nConnect the device to the computer through USB.\n\nFrom a terminal on a computer, type the following to boot the device into fastboot mode:\n\nadb reboot bootloader\n\nOnce the device is in fastboot mode, verify your PC sees the device by typing fastboot devices\n\nIf you don’t see your device serial number, and instead see “<waiting for device>”, fastboot is not configured properly on your machine. See fastboot documentation for more info.\n\nIf you see “no permissions fastboot”, try running fastboot as root.\n\nFrom the same terminal, type the following command to unlock the bootloader:\n\nfastboot oem unlock-go\n\nIf the device doesn’t automatically reboot, reboot it from the menu. It should now be unlocked.\n\nSince the device resets completely, you will need to re-enable USB debugging on the device to continue.\n\nTroubleshooting\n\nIf you have issues with fastboot or adb not being found, make sure that the Android SDK folder /platform-tools, which contains the adb and fastboot files, are in the path of execution for commands typed at the terminal. Usually typing something like\n\n# PATH=$PATH:/your/specific/path/to/android/sdk/platform-tools/\n\nwill work for that terminal session.\n\nYou’ll be using fastboot again to install a custom recovery.\n\nBuild CyanogenMod and CyanogenMod Recovery\n\nPrepare the Build Environment\n\nInstall the SDK\n\nIf you have not previously installed adb and fastboot, install the Android SDK. “SDK” stands for Software Developer Kit, and it includes useful tools that you can use to flash software, look at the system logs in real time, grab screenshots, and more– all from your computer.\n\nInstall the Build Packages\n\nSeveral “build packages” are needed to build CyanogenMod. You can install these using the package manager of your choice.\n\nFor both 32-bit & 64-bit systems, you’ll need:\n\nbc bison build-essential curl flex git gnupg gperf libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk2.8-dev libxml2 libxml2-utils lzop maven openjdk-7-jdk pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev\n\nIn addition to the above, for 64-bit systems, get these:\n\ng++-multilib gcc-multilib lib32ncurses5-dev lib32readline-gplv2-dev lib32z1-dev\n\nFor Ubuntu 15.10 (wily) and newer, substitute:\n\nlib32readline-gplv2-dev → lib32readline6-dev\n\nFor Ubuntu 16.04 (xenial) and newer, substitute (additionally see java notes below):\n\nlibwxgtk2.8-dev → libwxgtk3.0-dev\n\nopenjdk-7-jdk → openjdk-8-jdk\n\nJava versions: Different versions of CyanogenMod require different versions of the JDK (Java Development Kit):\n\nCyanogenMod 7 – 9: Sun/Oracle Java SE 1.6\n\nCyanogenMod 10.1: Sun/Oracle Java SE 1.6 or 1.7\n\nCyanogenMod 10.2 – 11.0: Sun/Oracle Java SE 1.6 or 1.7 (OpenJDK 1.7 works fine, but the build system will display a warning)\n\nCyanogenMod 12.0 – 13.0: OpenJDK 1.7 (see note about OpenJDK 1.8 below)\n\nCyanogenMod 14.1: OpenJDK 1.8\n\nUbuntu 16.04 (Xenial Xerus) or newer and OpenJDK: Since OpenJDK 1.7 was removed from the official Ubuntu repositories, you have a couple options:\n\nObtain OpenJDK 1.7 from the openjdk-r PPA\n\nEnable experimental OpenJDK 1.8 support in CyanogenMod 13.0 (not available in earlier version). To enable OpenJDK 1.8 support, add this line to your $HOME/.bashrc file: export EXPERIMENTAL_USE_JAVA8=true.\n\nAlso see http://source.android.com/source/initializing.html which lists needed packages.\n\nCreate the directories\n\nYou will need to set up some directories in your build environment.\n\nTo create them:\n\n$ mkdir -p ~/bin $ mkdir -p ~/android/system\n\nInstall the repo command\n\nEnter the following to download the “repo” binary and make it executable (runnable):\n\n$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo $ chmod a+x ~/bin/repo\n\nPut the ~/bin directory in your path of execution\n\nIn recent versions of Ubuntu, ~/bin should already be in your PATH. You can check this by opening ~/.profile with a text editor and verifying the following code exists (add it if it is missing):\n\n# set PATH so it includes user's private bin if it exists if [ -d \"$HOME/bin\" ] ; then PATH=\"$HOME/bin:$PATH\" fi\n\nInitialize the CyanogenMod source repository\n\nEnter the following to initialize the repository:\n\nNote: Make sure the cm branch entered here is the one you wish to build and is supported on your device.\n\n$ cd ~/android/system/ $ repo init -u https://github.com/CyanogenMod/android.git -b cm-13.0\n\nDownload the source code\n\nTo start the download of all the source code to your computer:\n\n$ repo sync\n\nThe CM manifests include a sensible default configuration for repo, which we strongly suggest you use (i.e. don’t add any options to sync). For reference, our default values are -j 4 and -c. The -j 4 part means that there will be four simultaneous threads/connections. If you experience problems syncing, you can lower this to -j 3 or -j 2. -c will ask repo to pull in only the current branch, instead of the entire CM history.\n\nPrepare to wait a long time while the source code downloads.\n\nGet prebuilt apps (CM11 and below)\n\nNext,\n\n$ cd ~/android/system/vendor/cm\n\nthen enter:\n\n$ ./get-prebuilts\n\nYou won’t see any confirmation- just another prompt. But this should cause some prebuilt apps to be loaded and installed into the source code. Once completed, this does not need to be done again.\n\nPrepare the device-specific code\n\nAfter the source downloads, ensure you are in the root of the source code (cd ~/android/system), then type:\n\n$ source build/envsetup.sh $ breakfast vegetalte\n\nThis will download the device specific configuration and kernel source for your device. An alternative to using the breakfast command is to build your own local manifest. To do this, you will need to locate your device on CyanogenMod’s GitHub and list all of the repositories defined in cm.dependencies in your local manifest.\n\nExtract proprietary blobs\n\nNow ensure that your Aquaris E5 4G is connected to your computer via the USB cable and that you are in the ~/android/system/device/bq/vegetalte directory (you can cd ~/android/system/device/bq/vegetalte if necessary). Then run the extract-files.sh script:\n\n$ ./extract-files.sh\n\nYou should see the proprietary files (aka “blobs”) get pulled from the device and moved to the ~/android/system/vendor/bq directory. If you see errors about adb being unable to pull the files, adb may not be in the path of execution. If this is the case, see the adb page for suggestions for dealing with “command not found” errors.\n\nTurn on caching to speed up build\n\nYou can speed up subsequent builds by adding\n\nexport USE_CCACHE=1\n\nto your ~/.bashrc file (what’s a .bashrc file?). Then, specify the amount of disk space to dedicate to ccache by typing this from the top of your Android tree:\n\nprebuilts/misc/linux-x86/ccache/ccache -M 50G\n\nwhere 50G corresponds to 50GB of cache. This only needs to be run once and the setting will be remembered. Anywhere in the range of 25GB to 100GB will result in very noticeably increased build speeds (for instance, a typical 1hr build time can be reduced to 20min). If you’re only building for one device, 25GB-50GB is fine. If you plan to build for several devices that do not share the same kernel source, aim for 75GB-100GB. This space will be permanently occupied on your drive, so take this into consideration. See more information about ccache on Google’s android build environment initialization page.\n\nStart the build\n\nTime to start building! So now type:\n\n$ croot $ brunch vegetalte\n\nThe build should begin.\n\nIf the build breaks…\n\nIf you experience this not-enough-memory-related error…\n\nERROR: signapk.jar failed: return code 1make: *** [out/target/product/vegetalte/cm_vegetalte-ota-eng.root.zip] Error 1\n\n…you may want to make the following change to ~/android/system/build/tools/releasetools/common.py:\n\nSearch for instances of -Xmx2048m (it should appear either under OPTIONS.java_args or near usage of signapk.jar), and replace it with -Xmx1024m or -Xmx512m.\n\nThen start the build again (with brunch).\n\nIf you see a message about things suddenly being “killed” for no reason, your (virtual) machine may have run out of memory or storage space. Assign it more resources and try again.\n\nInstall the build\n\nAssuming the build completed without error (it will be obvious when it finishes), type:\n\n$ cd $OUT\n\nin the same terminal window that you did the build. Here you’ll find all the files that were created. The stuff that will go in /system is in a folder called system. The stuff that will become your ramdisk is in a folder called root. And your kernel is called… kernel.\n\nBut that’s all just background info. The two files we are interested in are (1) recovery.img, which contains CyanogenMod Recovery, and (2) cm-13.0-20161224-UNOFFICIAL-vegetalte.zip, which is the CyanogenMod installation package.\n\nInstalling a custom recovery using fastboot\n\nSee All About Recovery Images for more information about custom recoveries and their capabilities.\n\nMake sure your computer has working fastboot and adb.\n\nConnect the Aquaris E5 4G to the computer via USB.\n\nMake sure the fastboot binary is in your PATH or that you place the recovery image in the same directory as fastboot.\n\nOpen a terminal on your PC and reboot the device into fastboot mode by typing\n\nadb reboot bootloader\n\nor by using the hardware key combination for your device while it is powered off.\n\nOnce the device is in fastboot mode, verify your PC sees the device by typing\n\nfastboot devices\n\nIf you don’t see your device serial number, and instead see “<waiting for device>”, fastboot is not configured properly on your machine. See fastboot documentation for more info.\n\nIf you see “no permissionsfastboot”, make sure your UDEV rules are setup correctly.\n\nFlash recovery onto your device by entering the following command:\n\nfastboot flash recovery your_recovery_image.img\n\nwhere the latter part is the filename of the recovery image.\n\nOnce the flash completes successfully, reboot the device into recovery to verify the installation.\n\nNote: Some ROMs overwrite recovery at boot time so if you do not plan to immediately boot into recovery to install CyanogenMod, please be aware that this may overwrite your custom recovery with the stock one.\n\nInstall CyanogenMod\n\nBack to the $OUT directory on your computer– you should see a file that looks something like:\n\ncm-13.0-20161224-UNOFFICIAL-vegetalte.zip\n\nNow you can flash the cm...zip file above as usual via recovery mode. Before doing so, now is a good time to make a backup of whatever installation is currently running on the device in case something goes wrong with the flash attempt. While CyanogenMod Recovery doesn’t have a backup feature, there are other custom recoveries available that do. You can also use something like Titanium Backup (root required) as an alternative.\n\nSuccess! So….what’s next?\n\nYou’ve done it! Welcome to the elite club of self-builders. You’ve built your operating system from scratch, from the ground up. You are the master/mistress of your domain… and hopefully you’ve learned a bit on the way and had some fun too.\n\nNow that you’ve succeeded in building CyanogenMod for your device, here are some suggestions on what to do next.\n\nAlso, be sure to take a glance at the Dev Center on this wiki for all kinds of more detailed information about developer topics ranging from collecting logs, understanding what’s in the source code directories, submitting your own contributions, porting CyanogenMod to new devices, and a lot more.\n\nCongrats again!"
    }
}