{
    "id": "correct_subsidiary_00136_0",
    "rank": 40,
    "data": {
        "url": "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/T485796T485958.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Oracle Demantra Implementation Guide",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E18727-01/dcommon/gifs/conticon.gif",
            "https://docs.oracle.com/cd/E18727-01/dcommon/gifs/larrow.gif",
            "https://docs.oracle.com/cd/E18727-01/dcommon/gifs/rarrow.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_account-member-browse.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_worksheet-dropdown.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_members-browser-example-1.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_members-2.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_member-management-1.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_hierarchy-example-fragment.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_product-family-hierarchy-w-members.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_hierarchy-example-full.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_brand-hierarchy-w-members.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_matrix-members-ex2.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_code-and-desc-example.gif",
            "https://docs.oracle.com/cd/E18727-01/doc.121/e05136/img/msdd_levels-forecast-tree-3.gif",
            "https://docs.oracle.com/cd/E18727-01/dcommon/gifs/oracle.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Release 7.3\n\nPart Number E05136-11\n\nContents\n\nPrevious\n\nNext\n\nLevels\n\nThis chapter describes levels and related concepts, outlines the primary configuration options, and summarizes the available tools.\n\nThis chapter covers the following topics:\n\nIntroductionLevel TerminologyHierarchy VariationsTypes of LevelsMembersMember IdentifiersIntroduction to the Data Model WizardLevels and the Forecast TreeFiltered LevelsOther Concepts Related to LevelsConfiguration Notes\n\nIntroduction\n\nLevels control how data is aggregated and organized. They are used in worksheets, in filters, in import and export, and in forecasting. In a worksheet, for example, you can display data at the account level, as follows:\n\nThe worksheet might include a drop down list instead of this tree control. For example:\n\nIn either case, you can display data for any account.\n\nYou can use multiple levels together, for example:\n\nIn generic terminology, the word member refers to a unit within a level. For example, CVS is a member of the account level. When the user hovers the mouse over a member, Demantra displays a hint indicating the name of the level to which that member belongs.\n\nLevels and Filtering\n\nWithin Demantra, you generally apply filters by specifying a level and the members of that level to include. For example, the following filter includes only the Rainbow brand.\n\nYou can apply multiple filters at the same time. For example, for the preceding worksheet, you could also filter by account.\n\nYou can apply use filters in worksheets, in user security, and in import and export.\n\nLevels and Member Management\n\nWithin a worksheet, a user can right-click and operate on a member. For example, a user can edit a member, displaying a dialog box like the following:\n\nHere the user can edit attributes of the member, including its parent members. Most level members are imported from external systems, and users generally create or change members only if they expect the same change to occur in the imported data.\n\nYou can disable or hide the right-click menu options that permit these activities.\n\nCustom Methods\n\nAs the implementer, you can define custom methods to perform operations on a selected member, for users to access as an option on the right-click menu. You can apply security to your methods, just as you do with the core right-click actions.\n\nYou can define a user security threshold for visibility of that method. For example, you can state the method should only be visible to users who have 'Full Control' of the member from which you launch the method. To control this, you log into the Business Modeler, select 'Configure > Configure Methods'. For 'Method Type'= Custom, you can select from the Security Threshold of Full Control, Read & Write or Read Only.\n\nFor information on methods, see “Methods and Workflow”.\n\nLevel Terminology\n\nDemantra uses standard terminology to describe level hierarchies. The following figure shows an example of item levels:\n\nThis hie rarchy corresponds to the following data:\n\nThe Product Family level is the parent of the SKU level, and conversely, SKU is the child of Product Family.\n\nHierarchy Variations\n\nYour application can include multiple, independent hierarchies. For example, you could include the following three independent hierarchies:\n\nThe Product Family hierarchy is described above. The Brand hierarchy is as follows:\n\nNote that this hierarchy is independent of the Product Family hierarchy. That is, there is not necessarily any relationship between brands and product families. The ABC hierarchy is not shown here, but is also independent of the other hierarchies.\n\nEach hierarchy can contain as many levels as needed. Some hierarchies are typically much more complex than others.\n\nTypes of Levels\n\nDemantra supports the following types of levels, most of which are indicated with different icons:\n\nItem levels, which group data according to characteristics of the items you sell. Item levels typically include brand, item type, product category, and so on.\n\nLocation levels, which group data according to characteristics of the locations where you sell. For example, location levels could describe a hierarchy of geographical places or of company organization. Another location hierarchy could organize the locations in some other manner, such as by type of store.\n\nCombination levels, which group data according to time-independent characteristics of the item-location combinations. Combination levels are also known as matrix levels.\n\nTime aggregations, which group data by sales date. You typically use time aggregations on the x-axis of a worksheet, instead of the predefined time units.\n\nGeneral levels, which group data by item, location, and date. General levels are provided as a modeling tool to be used as needed. Demantra does not provide a standard icon for this type of level, because the possible uses can vary a great deal.\n\nDemantra also provides special-purpose levels for use with specific products; see “Special-Purpose Levels”.\n\nNote: The desktop products (Demand Planner and Demand Replenisher) can display only item, location, and combination levels. The Web products can support all kinds of levels.\n\nItem and Location Levels\n\nEvery application includes at least one item level and one location level. These are useful levels because generally our applications are interested in products and how those products perform at different locations.\n\nItem and location levels are also used in the forecast tree; see “Levels and the Forecast Tree”.\n\nCombination Levels\n\nAs noted earlier, combination (matrix) levels group data according to time-independent characteristics of the item-location combinations. For example, the following partial worksheet uses a combination level that groups data by a user-controlled flag that determines which combinations the Analytical Engine will forecast:\n\nTime Aggregations\n\nA time aggregation groups data by time and are often used for custom calendars. Your solution can use time aggregations, custom time units, or a combination of both. Use the following guidelines to determine which you need:\n\nna Names Uses in worksheet time aggregation Each member can have a user-friendly name that you create. You can use a time aggregation like a level. For example, you can place it on a worksheet axis. time unit Each time bucket in the worksheet is automatically labeled with the start date of that bucket. You can use time units only on the x-axis (the time axis) of the worksheet.\n\nSee also “Time Units”.\n\nGeneral Levels\n\nA general level groups data by the item, location, and time bucket. Promotion Effectiveness uses general levels to model marketing promotions, but they could be used in other ways.\n\nIn addition to ordinary attributes, a general level can have a population attribute, which specifies a set of item-location combinations and consecutive time buckets with which the general level is associated; see “Population Attributes”.\n\nSpecial-Purpose Levels\n\nDemantra also provides the following special-purpose levels:\n\nPromotion levels, which are used by Promotion Effectiveness and which group data by sales promotions. Depending on how your needs, you may have a hierarchy of promotional levels (to organize the promotions), and the higher levels might use different icons.\n\nSettl ement levels, which are used only by DSM. In general, a settlement is an outstanding sum of money that needs to be resolved, related to a promotion. If you use a settlement level in a worksheet, you cannot use levels from any other hierarchy in that worksheet.\n\nCheck request levels, which are used only by DSM. A check request is an instruction to send a check to a customer or designated third party. Check requests are exported to the accounting systems that actually perform them.\n\nConfigure to Order levels, which support the display and forecasting of a base model's manufacturing components.\n\nService Parts Forecasting levels, which are used to support the integration between EBS Service Parts Planning (SPP) and Demantra Demand Management. These levels support the display and forecasting of a base model's maintenance components.\n\nMembers\n\nEach level includes a set of members, each with different characteristics. For example, the SKU level includes a set of members, each corresponding to a different value of SKU.\n\nMember Attribute s\n\nA level can have attributes, which are descriptive properties associated with the level (and stored in the table associated with the level). Each member can have different values for each attribute. You use attributes in several different ways:\n\nTo provide extra information for the end users to view and edit, within the worksheets. To view attributes of a member, the user can right-click the member within a worksheet; see “Levels and Member Management”.\n\nTo act as levels, that is, to provide a further subdivision of the level data. To do this, you add an attribute to a level and select an option to create it as a child level. For example, suppose you create an attribute called ABC. If ABC can have the values A, B, or C, and if you create this attribute as a level, then the ABC level would have three members: A, B, and C. The member A, for example, would consist of all the data that had the A value for this attribute, within the parent level.\n\nFor integration.\n\nIn the case of promotions, promotion attributes are converted into promotional causal factors for use by the Analytical Engine. See Chapter 44, “Configuring Causal Factors”.\n\nYou can have different types of attributes (numeric, character, or date), and you can specify a default value for each.\n\nPopulation Attributes\n\nAs noted earlier, a general level can also have a population attribute, which specifies a set of item-location combinations and consecutive time buckets with which the general level is associated.\n\nBecause it is more complex than an ordinary attribute, a population attribute is stored in several additional tables that Demantra automatically creates.\n\nMember Defaults\n\nUsers can create new members by using the right-click menu in a worksheet. To simplify this work, it is useful to provide default values for the attributes and for the parent members.\n\nFor parent members, Demantra provides a predefined default member for each level, and that member is initially named Default level name. You can choose whether to display this member and you can rename it. This predefined default member is not normally associated with any data, however; it is provided for convenience.\n\nIf you have data loaded in the system, you can instead choose an existing member to use as the default member.\n\nSo, for example, you could use any of the following as the default member of the Brand level:\n\nThe predefined default member: Default Brand\n\nThe predefined default member, renamed by you: Unspecified Brand\n\nAn existing member: Acme\n\nA given level can have multiple parent levels. This means that you can specify a default within each of those parent levels. For example, in the default setup for Promotion Effectiveness, the Promotion level has three parents: Promotion Status, Promotion Type, and Scenario. When a user creates a new promotion, you may want the user to have a default value for each of these.\n\nMember Identifiers\n\nWhenever Demantra retrieves data for a worksheet, it uses the levels in that worksheet to determine how to group the database rows. For example, consider the following set of rows in a table of items.\n\nSKU SKU_DESC ... FAMILY ... RLF0013OR Rainbow LF Oatmeal Raisin ... Low Fat ... RLF0016CH Rainbow LF Chocolate ... Low Fat ... RLF0018VW Rainbow LF Vanilla Wafer ... Low Fat ... RLF0019CW Rainbow LF Chocolate Wafer ... Low Fat ... PLRG0209C Private Label Reg Chocolate Wafer ... Regular ... PLRG0210S Private Label Reg Strawberry Wafer ... Regular ... RLF0011CC Rainbow LF Chocolate Chip ... Low Fat ... RLF0012PB Rainbow LF Peanut Butter ... Low Fat ... RRG0007CN Rainbow Reg Cinnamon ... Regular ... RRG0008VW Rainbow Reg Vanilla Wafer ... Regular ... RRG0010SW Rainbow Reg Strawberry Wafer ... Regular ... RSP0021AC Rainbow Spc Animal Crackers ... Specialty ...\n\nHere the FAMILY field indicates the product family to which each SKU belongs. When aggregating to the family level, Demantra groups together all the rows with the same value of FAMILY.\n\nThe field that can be used in this way is called the code field for the level. When you define a level, you identify the field that Demantra should use as the code field for that level. For each unique value of the code field, all records with that value are grouped together as one member. (The nature of the grouping is controlled by the series definitions, as described in “Series”.)\n\nCode and Description Fields\n\nFor each level, the enterprise data must have at least one unique field that can be used to distinguish level members; this is used as the code. In some cases, the enterprise may have two fields: an internal identifier and the corresponding user-friendly, “pretty name,” to be used as the description field. The SKUs in the previous example have two such fields: SKU and SKU_DESC.\n\nIf the enterprise data includes only a single field that is unique to a given level, you use that field as the code and the description.\n\nID Field\n\nInternally, Demantra generates and uses its own unique numeric ID, which is not meant to be exported to external systems.\n\nCode Display Field\n\nWithin the Demantra user interface, users see and use two unique labels for each level member, the code display field and the description field:\n\nAs the implementor, you can configure the code display field in three different ways.\n\nThe code display field can be equal to the internally generated numeric ID.\n\nThe code display field can be equal to the code field.\n\nThe code display field can be equal to the description field.\n\nIntroduction to the Data Model Wizard\n\nLevel definitions are generally coupled tightly with integration, because each level is defined by a code field, and most code fields are imported from corporate systems. Consider, for example, a level such as Brand. Any SKU belongs to a brand, and Demantra imports that information. Adding an item or location level usually requires a new field in the data, which also requires changes to the integration.\n\nThe Data Model Wizard (in the Business Modeler) therefore has two related, primary purposes:\n\nTo create batch scripts to load the lowest level item, location, and sales data.\n\nTo create database procedures that define Demantra levels based on that data.\n\nNote: The Data Model Wizard also performs other configuration tasks, not discussed here, that can be performed only within the Data Model Wizard.\n\nThe Data Model Wizard prompts you for the location and format of the raw data. It helps you describe the contents of the staging tables so that the data can be moved into the Demantra internal tables. You then specify how to use the fields in the staging tables, generally using each field in a level definition or in a series definition. Demantra ignores any field for which you do not specify a use.\n\nThe Data Model Wizard is discussed further in “Loading Basic Data”.\n\nAs a final result, the Data Model Wizard creates a batch script and database procedures. The script executes the procedures, which load the data into the Demantra internal tables and synchronize the tables as needed.\n\nNote: You can define additional levels later, outside of the Data Model Wizard, but you should do so only if you do not need a corresponding change in the load scripts. The Data Model Wizard automatically removes any levels that you define outside of the wizard.\n\nLevels and the Forecast Tree\n\nIf your application uses the Analytical Engine, you will also need to consider what sort of forecast tree you will need. The forecast tree organizes data for use by the Analytical Engine. In this hierarchy, each node aggregates by both item and location. General levels can also be included in the forecast tree.\n\nDemantra supports multiple analytical engines, with associated forecast trees. Demantra supports multiple analytical engines, with associated forecast trees. Depending on which engine profile you choose, Demantra will apply different settings and can provide different forecasting results. For example, when using Booking Forecast profile, the forecast generated will be focused on bookings for an item. Similarly, the Forecast Spares Demand profile will generate a forecast for service parts.\n\nIn general, forecasting is most accurate when it can be performed at the lowest possible allowed aggregation level. However, sometimes there is not enough data at that level for all combinations. For those combinations, the Analytical Engine aggregates the data to a higher level and tries to generate a forecast there. Consider the following example, showing a small part of a forecast tree.\n\nThe bold boxes show the nodes at which the Analytical Engine is forecasting.\n\nIn this example, there is enough data at the SKU-store level for SKU 001 and SKU 002; the Analytical Engine can generate a forecast at that level for those SKUs.\n\nOn the other hand, there is less data for SKU 003, so the Analytical Engine aggregates data for that SKU across all the stores in Region AA, generates the forecast for those SKUs at the SKU-region level, and then splits to the store level.\n\nSee Proport When Forecasting on General Levels for more information about how the proport handles supersessions.\n\nFiltered Levels\n\nBy default, a level of a given type groups all the associated data; for example, an item-type level groups all the item data. You can, however, create filtered levels. A filtered level contains a filtered subset of the data. To create a filtered level, you join the underlying data to another table of your choice, and you then add an SQL WHERE clause to filter the data.\n\nTo do this, you use the EXTRA FROM and EXTRA WHERE options for the level.\n\nOther Concepts Related to Levels\n\nAfter you configure levels, you associate them with several other kinds of Demantra objects.\n\nLevels and Units\n\nIn Demantra, you associate each unit with the levels where it makes sense to use that unit. For example, a relatively small unit might make sense only at lower levels.\n\nDemantra uses this association within worksheets. If a worksheet contains three levels, for example, then only the units associated with those levels can be used in that worksheet.\n\nFor information on units, see “Units, Indexes, and Exchange Rates”.\n\nLevels and Methods\n\nIt is useful to be able to right-click a level member within a worksheet and perform some operation on it. With Demantra, you can define methods, which the user sees as an ordinary r ight-click menu options. Demantra also provides a set of default methods that you can redefine or disable as needed; these allow the users to view, edit, delete, and so on.\n\nEach method is associated with a specific level. Also, a method can be available in all worksheets or in a single specific worksheet. You can apply security to all methods.\n\nFor information on methods, see “Methods”.\n\nLevel and Worksheet Association\n\nIt is useful to be able to examine a level member more closely, to launch a worksheet from that member that is filtered to show only that member. But typically, a Demantra application includes a large number of worksheets, and most of those worksheets would not be useful in this way. So Demantra provides an option for associating each level with any number of worksheets. Demantra uses this association in two ways:\n\nA user can start from a level member and launch a worksheet that is filtered to that member. To do so, the user right-clicks the member and clicks the Open or Open With option. Alternatively, this worksheet can show just the combination from which the user started.\n\nA worksheet can include a sub tab worksheet that is associated with any of the levels in the main worksheet. Then when a user selects a member in the main worksheet, the sub tab shows the details.\n\nFor information on worksheets, see “Worksheets”.\n\nConfiguration Notes\n\nThis section contains configuration notes related to levels.\n\nStandard Levels\n\nSome Demantra products, such as DSM, assume that your database contains specific levels, parameter settings, and other configuration options. Demantra provides setup scripts that perform all the required configuration. See Part IV, “Other Configuration”.\n\nDependencies\n\nBefore you can configure levels, you will need some sample data.\n\nBecause level definitions are generally coupled tightly with integration, you typically need to define levels at the same time as your basic loading scripts. For this, you use the Data Model Wizard.\n\nYou can define additional levels later, outside of the Data Model Wizard, but you should do so only if you do not need a corresponding change in the load scripts. The wizard automatically removes any levels that you define outside of the wizard.\n\nTools\n\nDemantra provides the following tools for creatin g and configuring levels and related objects:\n\nTool Purpose/Notes Data Model Wizard* Defines levels (and other model elements) and creates a script to import data, particularly sales, item, and location data, at the lowest level. Configure > Levels option* Defines additional levels. CREATE_PE_STRUCT procedure Creates basic promotion levels needed by Promotion Effectiveness.\n\nYou can customize these levels to some extent, after running the procedure. UPGRADE_TO_DSM procedure Creates the settl ement and check request levels required by DSM. Configure > Units for Levels option* Associates units with levels. Configure > Methods option* Defines methods. Components > Open/Create Component option* Creates components, which define the associations between levels and worksheets. *These options are in the Business Modeler.\n\nFor information on these tools, see Part II, “Basic Configuration”."
    }
}