{
    "id": "correct_subsidiary_00054_3",
    "rank": 9,
    "data": {
        "url": "https://adam.younglogic.com/2008/11/coding-at-walker-interactive-systems/",
        "read_more_link": "",
        "language": "en",
        "title": "Coding at Walker Interactive Systems",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://adam.younglogic.com/wp-content/uploads/2016/07/younglogic-banner-edited-1.jpg",
            "https://secure.gravatar.com/avatar/14bd85177ddf58c844ae6e3948865f6c?s=68&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/e202da10419aa658a0b19c3c27fb832a?s=39&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/34c9c8b01a3326dcf73def5adb0b8d9f?s=68&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/34c9c8b01a3326dcf73def5adb0b8d9f?s=68&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/a9420fc733e80313f8697af3ed11c5cc?s=68&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/66333ac2682d1337e8d737253a929b45?s=68&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/e202da10419aa658a0b19c3c27fb832a?s=39&d=identicon&r=g",
            "https://secure.gravatar.com/avatar/680b5e36ae5d2536cabb738f36dff9c9?s=68&d=identicon&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Adam Young"
        ],
        "publish_date": "2008-11-24T14:30:14-07:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://adam.younglogic.com/2008/11/coding-at-walker-interactive-systems/",
        "text": "My time at Walker Interactive Systems, a now defunct Mainframe financials company, served both as my transition out of the Army and into the civilian world, and as my introduction to life as a professional programmer.Â It marked a rapid change in many of my attitudes about life, software, and business.\n\nWhen I started at Walker, the company had recently gone through a round of layoffs, and was just recovering enough to start hiring again.Â Many of the people on staff around me were veterans of the company, somewhat jaded, and ready to move on.Â When I started in January of 1997, there were two other developers on my Group:Â Laura and Tony.Â By the time August rolled around, they were both gone.\n\nI worked in a group developing internal software.Â The end users were primarily the consultants of the company who customized the software for the end users.Â Overall, the company sold a suite of financial software:Â General Ledger, Accounts Receivable, and the like.Â The software ran on IBM System 390 mainframes.Â Customers were behemoths like AAFES, and one of the Airlines (I think United).Â The primary software was designed to run on a 3270 terminal:Â a fixed size, fixed font terminal run on a screen by screen basis.Â It was an old technology.Â Keystrokes were scanned and processed by the terminal software and stayed on the local system until an explicit “Enter” command would send the whole buffer back to the mainframe.\n\nMy team was responsible for turning these screens into an API that Visual Basic programmers could use, a process known as screen scraping.Â An off line process would read the database of screens, including position and length information, and store it in a database on client side.Â Code inside the applications would act like a terminal, buffer up the changed information, and send it back and forth to the mainframe.Â The code to execute this was split into two pieces, one for the UI and one for direct communication to the mainframe.Â When Laura left, I inherited the front end.Â When Tony left, I got the rest.\n\nMicrosoft technology was then at the DCOM stage.Â What had started as Object Linking and Embedding had evolved into a development philosophy that pervaded the various flavors of the Operating systems at that time:Â Windows 95, NT4.Â I became a student of the component object model, learned about monikers and marshalling, reflective cross language interfaces, and remote procedure calls.Â Wrox Press provided most of the information I needed, and Stacey’s bookstore graciously provided me access to spend a portion of my salary to purchase the books I needed.\n\nThe first thing I did was a rewrite of the UI code.Â This was less a matter of Hubris and more a matter of it being easier to learn by writing than understanding the existing code base.Â The existing code was in C, and I was immersed in C++.Â The existing code was a series of dynamic link libraries for the non-preemptive-multitasking version of windows that had been forward ported to Win32, but that had much of the vestiges of the older systems.Â The old code was more error handling than anything else.Â My version had the benefit of focusing on a single platform.Â Since I had the freedom to develop the code from scratch without worrying about backwards compatibility, it made it much easier to make the new code re-entrant, something that the old code had to work to prevent.\n\nOne big lesson learned from this effort was to respect the amount of embedded knowledge that there is in a pre-existing code base.Â After the first release of my code, I spent a lot of time fielding bug reports from the UI developers about features I had missed.Â I learned the value of having a quick-to-run debugging code driver that allowed me to easily reproduce their problems.Â The integrated debugger was invaluable in stepping through, viewing what was actually happening, and allowing me to quickly make and distribute fixes.Â I got the notion of step through your code drilled into my bones.\n\nWhen adapting the Gateway code, I had to deal once again with the rapidly changing API from Microsoft.Â The older method of remote procedure call was deprecated.Â DCOM was the new hotness.Â Â After much trial and error with their Interface Defintion Language (IDL) and SAFEARRAYS I finally got a simple network service to run.Â Since my version was expected to be remote, we had reduced licensing from each client machine to a single NT server as well…or at least the potential to do that.Â Not sure if the company ever followed up on it.\n\nOf course, all of this distracted me from what I was “supposed” to be working on:Â the replacement for the screen scraping which was an asynchronous messaging layer.Â This was my first exposure to the recurring theme that I will state here as a rule:Â Never name a software project Phoenix.Â Really, do you want to imply that your project will go down in flames, dying time and time again?Â This project phoenix was no different.Â The concept was good:Â pull out a section of the cobol code that could be executed as a standalone transaction.Â Turn this into an asynchronos message and let the developers send the message to the mainframe.Â The reality was that so much of Walkers code would needed to be restructures that even after we got the messaging layer working, the concept was unusable.\n\nOne of the end goals of the messaging layer was to work with Data Bound Controls.Â There are things like spread sheeets and fields that can be bound to a column from a database query.Â Since that meant playing nicely with the Microsfot database technoligies, I dove in and made the messaging layer an OLEDB Provider.Â If this doesn’t scare, just be glad and move on with you life.Â If this does scare you, then you know way too much about microsoft technologies and I feel somewhat sorry for you.Â Basically, I had to learn about the technology that microsoft was then pimping as a replacement for ODBC, a tehcnology which never really should have caught on, and a technology that should be quietly taken out to the back 40 and shot.\n\nOne bug while developing the OLEDB provider took me two weeks to track down and fix.Â THe mistake was mina and mine alone.Â I was apassing in a NULL to a field that required an allocated structure.Â THe problem was that, while I owned the calling and implementing code, in the middle it had to go through a microsoft technology called Active DAta Objects (ADO).Â This particular API was closed source.Â I could see only the disaassembly of the executing code, which didn’t provide the context I needed to deduce my mistake.Â This adventure really sold me on the concept of Free (as in Speech) Software and Open Source coding.Â I had just started experimenting with Linux, and this really drove home why the development model was so successful.\n\nThe very tail end of my time at Walker was spent learning about Java.Â IBM was pushing Visual Age, and the company was planning a bitg transition. Walker really suffered from the .com boom:Â people fled to cooler, more interesting jobs throughout 1998 and 99.Â I left in the summer of 99 to go to Fort Point Partners, a botique services company that was pretty focused on ATG/Dynamo and eCommerce.Â Soon after I left, I happened across a group of former co-workers there.Â We chatted and they let me know that the company was then very Java and Websphere focused.Â Not long after that, Walker was acquired and then passed on to the corporate afterlife."
    }
}