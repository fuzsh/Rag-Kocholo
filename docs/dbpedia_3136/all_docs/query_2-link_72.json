{
    "id": "dbpedia_3136_2",
    "rank": 72,
    "data": {
        "url": "https://nextjs.org/blog/next-14",
        "read_more_link": "",
        "language": "en",
        "title": "Next.js 14",
        "top_image": "https://nextjs.org/static/blog/next-14/twitter-card.png",
        "meta_img": "https://nextjs.org/static/blog/next-14/twitter-card.png",
        "images": [
            "https://nextjs.org/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714730590%2Ffront%2Fnextjs%2Fuwu%2Fnext-uwu-logo.png&w=64&q=75 1x, /_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714730590%2Ffront%2Fnextjs%2Fuwu%2Fnext-uwu-logo.png&w=128&q=75 2x",
            "https://nextjs.org/_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714730590%2Ffront%2Fnextjs%2Fuwu%2Fnext-uwu-logo.png&w=64&q=75 1x, /_next/image?url=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1714730590%2Ffront%2Fnextjs%2Fuwu%2Fnext-uwu-logo.png&w=128&q=75 2x",
            "https://nextjs.org/_next/image?url=%2Fstatic%2Fteam%2Flee.jpg&w=48&q=75 1x, /_next/image?url=%2Fstatic%2Fteam%2Flee.jpg&w=64&q=75 2x",
            "https://nextjs.org/_next/image?url=%2Fstatic%2Fteam%2Ftim.jpg&w=48&q=75 1x, /_next/image?url=%2Fstatic%2Fteam%2Ftim.jpg&w=64&q=75 2x",
            "https://nextjs.org/icons/github.svg",
            "https://nextjs.org/icons/x.svg",
            "https://nextjs.org/icons/github.svg",
            "https://nextjs.org/icons/x.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Lee Robinson",
            "Tim Neutkens"
        ],
        "publish_date": "2023-10-26T16:00:00.507000+00:00",
        "summary": "",
        "meta_description": "Next.js 14 includes included performance, stability for Server Actions, a new course teaching the App Router, and more.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://nextjs.org/blog/next-14",
        "text": "As we announced at Next.js Conf, Next.js 14 is our most focused release with:\n\nTurbopack: 5,000 tests passing for App & Pages Router\n\n53% faster local server startup\n\n94% faster code updates with Fast Refresh\n\nServer Actions (Stable): Progressively enhanced mutations\n\nIntegrated with caching & revalidating\n\nSimple function calls, or works natively with forms\n\nPartial Prerendering (Preview): Fast initial static response + streaming dynamic content\n\nNext.js Learn (New): Free course teaching the App Router, authentication, databases, and more.\n\nUpgrade today or get started with:\n\nNext.js Compiler: Turbocharged\n\nSince Next.js 13, we've been working to improve local development performance in Next.js in both the Pages and App Router.\n\nPreviously, we were rewriting next dev and other parts of Next.js to support this effort. We have since changed our approach to be more incremental. This means our Rust-based compiler will reach stability soon, as we've refocused on supporting all Next.js features first.\n\n5,000 integration tests for next dev are now passing with Turbopack, our underlying Rust engine. These tests include 7 years of bug fixes and reproductions.\n\nWhile testing on vercel.com, a large Next.js application, we've seen:\n\nUp to 53.3% faster local server startup\n\nUp to 94.7% faster code updates with Fast Refresh\n\nThis benchmark is a practical result of performance improvements you should expect with a large application (and large module graph). With 90% of tests for next dev now passing, you should see faster and more reliable performance consistently when using next dev --turbo.\n\nOnce we hit 100% of tests passing, we'll move Turbopack to stable in an upcoming minor release. We'll also continue to support using webpack for custom configurations and ecosystem plugins.\n\nYou can follow the percentage of tests passing at areweturboyet.com.\n\nForms and Mutations\n\nNext.js 9 introduced API Routes—a way to quickly build backend endpoints alongside your frontend code.\n\nFor example, you would create a new file in the api/ directory:\n\nThen, on the client-side, you could use React and an event handler like onSubmit to make a fetch to your API Route.\n\nNow with Next.js 14, we want to simplify the developer experience of authoring data mutations. Further, we want to improve the user experience when the user has a slow network connection, or when submitting a form from a lower-powered device.\n\nServer Actions (Stable)\n\nWhat if you didn't need to manually create an API Route? Instead, you could define a function that runs securely on the server, called directly from your React components.\n\nThe App Router is built on the React canary channel, which is stable for frameworks to adopt new features. As of v14, Next.js has upgraded to the latest React canary, which includes stable Server Actions.\n\nThe previous example from the Pages Router can be simplified to one file:\n\nServer Actions should feel familiar for any developers who have previously used server-centric frameworks in the past. It's built on web fundamentals like forms and the FormData Web API.\n\nWhile using Server Actions through a form is helpful for progressive enhancement, it is not a requirement. You can also call them directly as a function, without a form. When using TypeScript, this gives you full end-to-end type-safety between the client and server.\n\nMutating data, re-rendering the page, or redirecting can happen in one network roundtrip, ensuring the correct data is displayed on the client, even if the upstream provider is slow. Further, you can compose and reuse different actions, including many different actions in the same route.\n\nCaching, Revalidating, Redirecting, and more\n\nServer Actions are deeply integrated into the entire App Router model. You can:\n\nRevalidate cached data with revalidatePath() or revalidateTag()\n\nRedirect to different routes through redirect()\n\nSet and read cookies through cookies()\n\nHandle optimistic UI updates with useOptimistic()\n\nCatch and display errors from the server with useFormState()\n\nDisplay loading states on the client with useFormStatus()\n\nLearn more about Forms and Mutations with Server Actions or about the security model and best practices for Server Components and Server Actions.\n\nPartial Prerendering (Preview)\n\nWe'd like to share a preview of Partial Prerendering — a compiler optimization for dynamic content with a fast initial static response — that we're working on for Next.js.\n\nPartial Prerendering builds on a decade of research and development into server-side rendering (SSR), static-site generation (SSG), and incremental static revalidation (ISR).\n\nMotivation\n\nWe've heard your feedback. There's currently too many runtimes, configuration options, and rendering methods to have to consider. You want the speed and reliability of static, while also supporting fully dynamic, personalized responses.\n\nHaving great performance globally and personalization shouldn't come at the cost of complexity.\n\nOur challenge was to create a better developer experience, simplifying the existing model without introducing new APIs for developers to learn. While partial caching of server-side content has existed, these approaches still need to meet the developer experience and composability goals we aim for.\n\nPartial Prerendering requires no new APIs to learn.\n\nBuilt on React Suspense\n\nPartial Prerendering is defined by your Suspense boundaries. Here's how it works. Consider the following ecommerce page:\n\nWith Partial Prerendering enabled, this page generates a static shell based on your <Suspense /> boundaries. The fallback from React Suspense is prerendered.\n\nSuspense fallbacks in the shell are then replaced with dynamic components, like reading cookies to determine the cart, or showing a banner based on the user.\n\nWhen a request is made, the static HTML shell is immediately served:\n\nSince <ShoppingCart /> reads from cookies to look at the user session, this component is then streamed in as part of the same HTTP request as the static shell. There are no extra network roundtrips needed.\n\nTo have the most granular static shell, this may require adding additional Suspense boundaries. However, if you're already using loading.js today, this is an implicit Suspense boundary, so no changes would be required to generate the static shell.\n\nComing soon\n\nPartial prerendering is under active development. We'll be sharing more updates in an upcoming minor release.\n\nMetadata Improvements\n\nBefore your page content can be streamed from the server, there's important metadata about the viewport, color scheme, and theme that need to be sent to the browser first.\n\nEnsuring these meta tags are sent with the initial page content helps a smooth user experience, preventing the page from flickering by changing the theme color, or shifting layout due to viewport changes.\n\nIn Next.js 14, we've decoupled blocking and non-blocking metadata. Only a small subset of metadata options are blocking, and we want to ensure non-blocking metadata will not prevent a partially prerendered page from serving the static shell.\n\nThe following metadata options are now deprecated and will be removed from metadata in a future major version:\n\nviewport: Sets the initial zoom and other properties of the viewport\n\ncolorScheme: Sets the support modes (light/dark) for the viewport\n\nthemeColor: Sets the color the chrome around the viewport should render with\n\nStarting with Next.js 14, there are new options viewport and generateViewport to replace these options. All other metadata options remain the same.\n\nYou can start adopting these new APIs today. The existing metadata options will continue to work.\n\nNext.js Learn Course\n\nToday we're releasing a brand new, free course on Next.js Learn. This course teaches:\n\nThe Next.js App Router\n\nStyling and Tailwind CSS\n\nOptimizing Fonts and Images\n\nCreating Layouts and Pages\n\nNavigating Between Pages\n\nSetting Up Your Postgres Database\n\nFetching Data with Server Components\n\nStatic and Dynamic Rendering\n\nStreaming\n\nPartial Prerendering (Optional)\n\nAdding Search and Pagination\n\nMutating Data\n\nHandling Errors\n\nImproving Accessibility\n\nAdding Authentication\n\nAdding Metadata\n\nNext.js Learn has taught millions of developers about the foundations of the framework, and we can't wait to hear your feedback on our new addition. Head to nextjs.org/learn to take the course.\n\nOther Changes\n\n[Breaking] Minimum Node.js version is now 18.17\n\n[Breaking] Removes WASM target for next-swc build (PR)\n\n[Breaking] Dropped support for @next/font in favor of next/font (Codemod)\n\n[Breaking] Changed ImageResponse import from next/server to next/og (Codemod)\n\n[Breaking] next export command has been removed in favor of output: 'export' config (Docs)\n\n[Deprecation] onLoadingComplete for next/image is deprecated in favor of onLoad\n\n[Deprecation] domains for next/image is deprecated in favor of remotePatterns\n\n[Feature] More verbose logging around fetch caching can be enabled (Docs)\n\n[Improvement] 80% smaller function size for a basic create-next-app application\n\n[Improvement] Enhanced memory management when using edge runtime in development\n\nContributors\n\nNext.js is the result of the combined work of over 2,900 individual developers, industry partners like Google and Meta, and our core team at Vercel. Join the community on GitHub Discussions, Reddit, and Discord.\n\nThis release was brought to you by:\n\nThe Next.js team: Andrew, Balazs, Jiachi, Jimmy, JJ, Josh, Sebastian, Shu, Steven, Tim, Wyatt, and Zack.\n\nThe Turbopack team: Donny, Justin, Leah, Maia, OJ, Tobias, and Will.\n\nNext.js Learn: Delba, Steph, Emil, Balazs, Hector, and Amy.\n\nAnd the contributions of: @05lazy, @0xadada, @2-NOW, @aarnadlr, @aaronbrown-vercel, @aaronjy, @abayomi185, @abe1272001, @abhiyandhakal, @abstractvector, @acdlite, @adamjmcgrath, @AdamKatzDev, @adamrhunter, @ademilter, @adictonator, @adilansari, @adtc, @afonsojramos, @agadzik, @agrattan0820, @akd-io, @AkifumiSato, @akshaynox, @alainkaiser, @alantoa, @albertothedev, @AldeonMoriak, @aleksa-codes, @alexanderbluhm, @alexkirsz, @alfred-mountfield, @alpha-xek, @andarist, @Andarist, @andrii-bodnar, @andykenward, @angel1254mc, @anonrig, @anthonyshew, @AntoineBourin, @anujssstw, @apeltop, @aralroca, @aretrace, @artdevgame, @artechventure, @arturbien, @Aryan9592, @AviAvinav, @aziyatali, @BaffinLee, @Banbarashik, @bencmbrook, @benjie, @bennettdams, @bertho-zero, @bigyanse, @Bitbbot, @blue-devil1134, @bot08, @bottxiang, @Bowens20832, @bre30kra69cs, @BrennanColberg, @brkalow, @BrodaNoel, @Brooooooklyn, @brunoeduardodev, @brvnonascimento, @carlos-menezes, @cassidoo, @cattmote, @cesarkohl, @chanceaclark, @charkour, @charlesbdudley, @chibicode, @chrisipanaque, @ChristianIvicevic, @chriswdmr, @chunsch, @ciruz, @cjmling, @clive-h-townsend, @colinhacks, @colinking, @coreyleelarson, @Cow258, @cprussin, @craigwheeler, @cramforce, @cravend, @cristobaldominguez95, @ctjlewis, @cvolant, @cxa, @danger-ahead, @daniel-web-developer, @danmindru, @dante-robinson, @darshanjain-entrepreneur, @darshkpatel, @davecarlson, @David0z, @davidnx, @dciug, @delbaoliveira, @denchance, @DerTimonius, @devagrawal09, @DevEsteves, @devjiwonchoi, @devknoll, @DevLab2425, @devvspaces, @didemkkaslan, @dijonmusters, @dirheimerb, @djreillo, @dlehmhus, @doinki, @dpnolte, @Drblessing, @dtinth, @ducanhgh, @DuCanhGH, @ductnn, @duncanogle, @dunklesToast, @DustinsCode, @dvakatsiienko, @dvoytenko, @dylanjha, @ecklf, @EndangeredMassa, @eps1lon, @ericfennis, @escwxyz, @Ethan-Arrowood, @ethanmick, @ethomson, @fantaasm, @feikerwu, @ferdingler, @FernandVEYRIER, @feugy, @fgiuliani, @fomichroman, @Fonger, @ForsakenHarmony, @franktronics, @FSaldanha, @fsansalvadore, @furkanmavili, @g12i, @gabschne, @gaojude, @gdborton, @gergelyke, @gfgabrielfranca, @gidgudgod, @Gladowar, @Gnadhi, @gnoff, @goguda, @greatSumini, @gruz0, @Guilleo03, @gustavostz, @hanneslund, @HarshaVardhanReddyDuvvuru, @haschikeks, @Heidar-An, @heyitsuzair, @hiddenest, @hiro0218, @hotters, @hsrvms, @hu0p, @hughlilly, @HurSungYun, @hustLer2k, @iamarpitpatidar, @ianldgs, @ianmacartney, @iaurg, @ibash, @ibrahemid, @idoob, @iiegor, @ikryvorotenko, @imranbarbhuiya, @ingovals, @inokawa, @insik-han, @isaackatayev, @ishaqibrahimbot, @ismaelrumzan, @itsmingjie, @ivanhofer, @IvanKiral, @jacobsfletch, @jakemstar, @jamespearson, @JanCizmar, @janicklas-ralph, @jankaifer, @JanKaifer, @jantimon, @jaredpalmer, @javivelasco, @jayair, @jaykch, @Jeffrey-Zutt, @jenewland1999, @jeremydouglas, @JesseKoldewijn, @jessewarren-aa, @jimcresswell, @jiwooIncludeJeong, @jocarrd, @joefreeman, @JohnAdib, @JohnAlbin, @JohnDaly, @johnnyomair, @johnta0, @joliss, @jomeswang, @joostdecock, @Josehower, @josephcsoti, @josh, @joshuabaker, @JoshuaKGoldberg, @joshuaslate, @joulev, @jsteele-stripe, @JTaylor0196, @JuanM04, @jueungrace, @juliusmarminge, @Juneezee, @Just-Moh-it, @juzhiyuan, @jyunhanlin, @kaguya3222, @karlhorky, @kevinmitch14, @keyz, @kijikunnn, @kikobeats, @Kikobeats, @kleintorres, @koba04, @koenpunt, @koltong, @konomae, @kosai106, @krmeda, @kvnang, @kwonoj, @ky1ejs, @kylemcd, @labyrinthitis, @lachlanjc, @lacymorrow, @laityned, @Lantianyou, @leerob, @leodr, @leoortizz, @li-jia-nan, @loettz, @lorenzobloedow, @lubakravche, @lucasassisrosa, @lucasconstantino, @lucgagan, @LukeSchlangen, @LuudJanssen, @lycuid, @M3kH, @m7yue, @manovotny, @maranomynet, @marcus-rise, @MarDi66, @MarkAtOmniux, @martin-wahlberg, @masnormen, @matepapp, @matthew-heath, @mattpr, @maxleiter, @MaxLeiter, @maxproske, @meenie, @meesvandongen, @mhmdrioaf, @michaeloliverx, @mike-plummer, @MiLk, @milovangudelj, @Mingyu-Song, @mirismaili, @mkcy3, @mknichel, @mltsy, @mmaaaaz, @mnajdova, @moetazaneta, @mohanraj-r, @molebox, @morganfeeney, @motopods, @mPaella, @mrkldshv, @mrxbox98, @nabsul, @nathanhammond, @nbouvrette, @nekochantaiwan, @nfinished, @Nick-Mazuk, @nickmccurdy, @niedziolkamichal, @niko20, @nikolovlazar, @nivak-monarch, @nk980113, @nnnnoel, @nocell, @notrab, @nroland013, @nuta, @nutlope, @obusk, @okcoker, @oliviertassinari, @omarhoumz, @opnay, @orionmiz, @ossan-engineer, @patrick91, @pauek, @peraltafederico, @Phiction, @pn-code, @pyjun01, @pythagoras-yamamoto, @qrohlf, @raisedadead, @reconbot, @reshmi-sriram, @reyrodrigez, @ricardofiorani, @rightones, @riqwan, @rishabhpoddar, @rjsdnql123, @rodrigofeijao, @runjuu, @Ryan-Dia, @ryo-manba, @s0h311, @sagarpreet-xflowpay, @sairajchouhan, @samdenty, @samsisle, @sanjaiyan-dev, @saseungmin, @SCG82, @schehata, @Schniz, @sepiropht, @serkanbektas, @sferadev, @ShaunFerris, @shivanshubisht, @shozibabbas, @silvioprog, @simonswiss, @simPod, @sivtu, @SleeplessOne1917, @smaeda-ks, @sonam-serchan, @SonMooSans, @soonoo, @sophiebits, @souporserious, @sp00ls, @sqve, @sreetamdas, @stafyniaksacha, @starunaway, @steebchen, @stefanprobst, @steppefox, @steven-tey, @suhaotian, @sukkaw, @SukkaW, @superbahbi, @SuttonJack, @svarunid, @swaminator, @swarnava, @syedtaqi95, @taep96, @taylorbryant, @teobler, @Terro216, @theevilhead, @thepatrick00, @therealrinku, @thomasballinger, @thorwebdev, @tibi1220, @tim-hanssen, @timeyoutakeit, @tka5, @tknickman, @tomryanx, @trigaten, @tristndev, @tunamagur0, @tvthatsme, @tyhopp, @tyler-lutz, @UnknownMonk, @v1k1, @valentincostam, @valentinh, @valentinpolitov, @vamcs, @vasucp1207, @vicsantizo, @vinaykulk621, @vincenthongzy, @visshaljagtap, @vladikoff, @wherehows, @WhoAmIRUS, @WilderDev, @Willem-Jaap, @williamli, @wiredacorn, @wiscaksono, @wojtekolek, @ws-jm, @wxh06, @wyattfry, @wyattjoh, @xiaolou86, @y-tsubuku, @yagogmaisp, @yangshun, @yasath, @Yash-Singh1, @yigithanyucedag, @ykzts, @Yovach, @yutsuten, @yyuemii, @zek, @zekicaneksi, @zignis, and @zlrlyy"
    }
}