{
    "id": "dbpedia_8305_1",
    "rank": 41,
    "data": {
        "url": "https://learn.microsoft.com/en-us/sql/machine-learning/troubleshooting/known-issues-for-sql-server-machine-learning-services%3Fview%3Dsql-server-ver16",
        "read_more_link": "",
        "language": "en",
        "title": "Known issues for Python and R - SQL Server Machine Learning Services",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-08-24T08:00:00+00:00",
        "summary": "",
        "meta_description": "This article describes known problems or limitations with the Python and R components that are provided in SQL Server Machine Learning Services and SQL Server 2016 R Services.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/sql/machine-learning/troubleshooting/known-issues-for-sql-server-machine-learning-services?view=sql-server-ver16",
        "text": "Known issues for Python and R in SQL Server Machine Learning Services\n\nApplies to: SQL Server 2016 (13.x) and later versions\n\nThis article describes known problems or limitations with the Python and R components that are provided in SQL Server Machine Learning Services and SQL Server 2016 R Services.\n\nSetup and configuration issues\n\nFor a description of processes related to initial setup and configuration, see Install SQL Server Machine Learning Services. It contains information about upgrades, side-by-side installation, and installation of new R or Python components.\n\nInconsistent results in MKL computations due to missing environment variable\n\nApplies to: R_SERVER binaries 9.0, 9.1, 9.2 or 9.3.\n\nR_SERVER uses the Intel Math Kernel Library (MKL). For computations involving MKL, inconsistent results can occur if your system is missing an environment variable.\n\nSet the environment variable 'MKL_CBWR'=AUTO to ensure conditional numerical reproducibility in R_SERVER. For more information, see Introduction to Conditional Numerical Reproducibility (CNR).\n\nWorkaround\n\nIn Control Panel, select System and Security > System > Advanced System Settings > Environment Variables.\n\nCreate a new User or System variable.\n\nSet Variable to MKL_CBWR.\n\nSet the Value to AUTO.\n\nRestart R_SERVER. On SQL Server, you can restart SQL Server Launchpad Service.\n\nR Script runtime error (SQL Server 2017 CU 5 - CU 7 regression)\n\nFor SQL Server 2017 (14.x), in cumulative updates 5 through 7, there is a regression in the rlauncher.config file where the temp directory file path includes a space. This regression is corrected in CU 8.\n\nThe error you will see when running R script includes the following messages:\n\nUnable to communicate with the runtime for 'R' script. Please check the requirements of 'R' runtime.\n\nSTDERR message(s) from external script:\n\nFatal error: cannot create 'R_TempDir'\n\nWorkaround\n\nApply CU 8 when it becomes available. Alternatively, you can recreate rlauncher.config by running registerrext with uninstall/install on an elevated command prompt.\n\n<SQLInstancePath>\\R_SERVICES\\library\\RevoScaleR\\rxLibs\\x64\\RegisterRExt.exe /uninstall /sqlbinnpath:<SQLInstanceBinnPath> /userpoolsize:0 /instance:<SQLInstanceName> <SQLInstancePath>\\R_SERVICES\\library\\RevoScaleR\\rxLibs\\x64\\RegisterRExt.exe /install /sqlbinnpath:<SQLInstanceBinnPath> /userpoolsize:0 /instance:<SQLInstanceName>\n\nThe following example shows the commands with the default instance \"MSSQL14.MSSQLSERVER\" installed into C:\\Program Files\\Microsoft SQL Server\\:\n\n\"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\R_SERVICES\\library\\RevoScaleR\\rxLibs\\x64\\RegisterRext.exe\" /uninstall /sqlbinnpath:\"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Binn\" /userpoolsize:0 /instance:MSSQLSERVER \"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\R_SERVICES\\library\\RevoScaleR\\rxLibs\\x64\\RegisterRext.exe\" /install /sqlbinnpath:\"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Binn\" /userpoolsize:0 /instance:MSSQLSERVER\n\nUnable to install SQL Server machine learning features on a domain controller\n\nIf you try to install SQL Server 2016 (13.x) R Services or SQL Server Machine Learning Services on a domain controller, setup fails, with these errors:\n\nAn error occurred during the setup process of the feature\n\nCannot find group with identity\n\nComponent error code: 0x80131509\n\nThe failure occurs because, on a domain controller, the service can't create the 20 local accounts required to run machine learning. In general, we don't recommend installing SQL Server on a domain controller. For more information, see Support bulletin 2032911.\n\nInstall the latest service release to ensure compatibility with Microsoft R Client\n\nIf you install the latest version of Microsoft R Client and use it to run R on SQL Server in a remote compute context, you might get an error like the following:\n\nYou are running version 9.x.x of Microsoft R Client on your computer, which is incompatible with Microsoft R Server version 8.x.x. Download and install a compatible version.\n\nSQL Server 2016 (13.x) requires that the R libraries on the client exactly match the R libraries on the server. The restriction has been removed for releases later than R Server 9.0.1. However, if you encounter this error, verify the version of the R libraries that's used by your client and the server and, if necessary, update the client to match the server version.\n\nThe version of R that is installed with SQL Server R Services is updated whenever a SQL Server service release is installed. To ensure that you always have the most up-to-date versions of R components, be sure to install all service packs.\n\nYou may receive an error message when running R Server 8.0.3 on SQL Server 2016: You are running version 9.0.0 of Microsoft R client on your computer, which is incompatible with the Microsoft R server version 8.0.3. Download and install a compatible version. Compatibility with Microsoft R Client 9.0.0 in SQL Server 2016 was ensured in the following patches:\n\nSQL Server 2016 SP1 MDS GDR\n\nSQL Server 2016 RTM MDS GDR\n\nSQL Server 2016 RTM COD MDS GDR\n\nTo avoid problems with R packages, you can also upgrade the version of the R libraries that are installed on the server, by changing your servicing agreement to use the Modern Lifecycle Support policy, as described in the next section. When you do so, the version of R that's installed with SQL Server is updated on the same schedule used for updates of Machine Learning Server (formerly Microsoft R Server).\n\nApplies to: SQL Server 2016 (13.x) R Services, with R Server version 9.0.0 or earlier\n\nR components missing from SQL Server 2017 CU 3 setup\n\nA limited number of Azure virtual machines were provisioned without the R installation files that should be included with SQL Server. The issue applies to virtual machines provisioned in the period from 2018-01-05 to 2018-01-23. This issue might also affect on-premises installations, if you applied the CU 3 update for SQL Server 2017 (14.x) during the period from 2018-01-05 to 2018-01-23.\n\nA service release has been provided that includes the correct version of the R installation files.\n\nCumulative Update Package 3 for SQL Server 2017 KB4052987.\n\nTo install the components and repair SQL Server 2017 (14.x) CU 3, you must uninstall CU 3, and reinstall the updated version:\n\nDownload the updated CU 3 installation file, which includes the R installers.\n\nUninstall CU 3. In Control Panel, search for Uninstall an update, and then select \"Hotfix 3015 for SQL Server 2017 (KB4052987) (64-bit)\". Proceed with uninstall steps.\n\nReinstall the CU 3 update, by double-clicking on the update for KB4052987 that you downloaded: SQLServer2017-KB4052987-x64.exe. Follow the installation instructions.\n\nUnable to install Python components in offline installations of SQL Server 2017 or later\n\nIf you install a pre-release version of SQL Server 2017 (14.x) on a computer without internet access, the installer might fail to display the page that prompts for the location of the downloaded Python components. In such an instance, you can install the Machine Learning Services feature, but not the Python components.\n\nThis issue is fixed in the release version. Also, this limitation doesn't apply to R components.\n\nApplies to: SQL Server 2017 (14.x) with Python\n\nWarn of incompatible version when you connect to an older version of SQL Server R Services from a client by using SQL Server 2017\n\nWhen you run R code in a SQL Server 2016 (13.x) compute context, you might see the following error:\n\nYou are running version 9.0.0 of Microsoft R Client on your computer, which is incompatible with the Microsoft R Server version 8.0.3. Download and install a compatible version.\n\nThis message is displayed if either of the following two statements is true:\n\nYou installed R Server (Standalone) on a client computer by using the setup wizard for SQL Server 2017 (14.x).\n\nYou installed Microsoft R Server by using the separate Windows installer.\n\nTo ensure that the server and client use the same version you might need to use binding, supported for Microsoft R Server 9.0 and later releases, to upgrade the R components in SQL Server 2016 (13.x) instances. To determine if support for upgrades is available for your version of R Services, see Upgrade an instance of R Services using SqlBindR.exe.\n\nApplies to: SQL Server 2016 (13.x) R Services, with R Server version 9.0.0 or earlier\n\nSetup for SQL Server 2016 service releases might fail to install newer versions of R components\n\nWhen you install a cumulative update or install a service pack for SQL Server 2016 (13.x) on a computer that isn't connected to the internet, the setup wizard might fail to display the prompt that lets you update the R components by using downloaded CAB files. This failure typically occurs when multiple components were installed together with the database engine.\n\nAs a workaround, you can install the service release by using the command line and specifying the MRCACHEDIRECTORY argument as shown in this example, which installs CU 1 updates:\n\nC:\\<path to installation media>\\SQLServer2016-KB3164674-x64.exe /Action=Patch /IACCEPTROPENLICENSETERMS /MRCACHEDIRECTORY=<path to CU 1 CAB files>\n\nTo get the latest installers, see Install machine learning components without internet access.\n\nApplies to: SQL Server 2016 (13.x) R Services, with R Server version 9.0.0 or earlier\n\nLaunchpad services fails to start if the version is different from the R version\n\nIf you install SQL Server R Services separately from the database engine, and the build versions are different, you might see the following error in the System Event log:\n\nThe SQL Server Launchpad service failed to start due to the following error: The service did not respond to the start or control request in a timely fashion.\n\nFor example, this error might occur if you install the database engine by using the release version, apply a patch to upgrade the database engine, and then add the R Services feature by using the release version.\n\nTo avoid this problem, use a utility such as File Manager to compare the versions of Launchpad.exe with version of SQL binaries, such as sqldk.dll. All components should have the same version number. If you upgrade one component, be sure to apply the same upgrade to all other installed components.\n\nLook for Launchpad in the Binn folder for the instance. For example, in a default installation of SQL Server 2016 (13.x), the path might be C:\\Program Files\\Microsoft SQL Server\\MSSQL.13.InstanceNameMSSQL\\Binn.\n\nRemote compute contexts are blocked by a firewall in SQL Server instances that are running on Azure virtual machines\n\nIf you have installed SQL Server on an Azure virtual machine, you might not be able to use compute contexts that require the use of the virtual machine's workspace. The reason is that, by default, the firewall on Azure virtual machines includes a rule that blocks network access for local R user accounts.\n\nAs a workaround, on the Azure VM, open Windows Firewall with Advanced Security, select Outbound Rules, and disable the following rule: Block network access for R local user accounts in SQL Server instance MSSQLSERVER. You can also leave the rule enabled, but change the security property to Allow if secure.\n\nImplied authentication in SQL Server 2016 Express edition\n\nWhen you run R jobs from a remote data-science workstation by using Integrated Windows authentication, SQL Server uses implied authentication to generate any local ODBC calls that might be required by the script. However, this feature didn't work in the RTM build of SQL Server 2016 (13.x) Express edition.\n\nTo fix the issue, we recommend that you upgrade to a later service release. If upgrade isn't feasible, as a workaround, use a SQL login to run remote R jobs that might require embedded ODBC calls.\n\nApplies to: SQL Server 2016 (13.x) R Services Express edition\n\nIt is possible to call the machine learning libraries that are installed for SQL Server from an external application, such as RGui. Doing so might be the most convenient way to accomplish certain tasks, such as installing new packages, or running ad hoc tests on very short code samples. However, outside of SQL Server, performance might be limited.\n\nFor example, even if you are using the Enterprise edition of SQL Server, R runs in single-threaded mode when you run your R code by using external tools. To get the benefits of performance in SQL Server, initiate a SQL Server connection and use sp_execute_external_script to call the external script runtime.\n\nIn general, avoid calling the machine learning libraries that are used by SQL Server from external tools. If you need to debug R or Python code, it is typically easier to do so outside of SQL Server. To get the same libraries that are in SQL Server, you can install Microsoft R Client or SQL Server 2017 Machine Learning Server (Standalone).\n\nWhen you use Visual Studio or SQL Server Data Tools to publish a database project, if any principal has permissions specific to external script execution, you might get an error like this one:\n\nTSQL Model: Error detected when reverse engineering the database. The permission was not recognized and was not imported.\n\nCurrently the DACPAC model doesn't support the permissions used by R Services or Machine Learning Services, such as GRANT ANY EXTERNAL SCRIPT, or EXECUTE ANY EXTERNAL SCRIPT. This issue will be fixed in a later release.\n\nAs a workaround, run the additional GRANT statements in a post-deployment script.\n\nExternal script execution is throttled due to resource governance default values\n\nIn Enterprise edition, you can use resource pools to manage external script processes. In some early release builds, the maximum memory that could be allocated to the R processes was 20 percent. Therefore, if the server had 32 GB of RAM, the R executables (RTerm.exe and BxlServer.exe) could use a maximum of 6.4 GB in a single request.\n\nIf you encounter resource limitations, check the current default. If 20 percent isn't enough, see the documentation for SQL Server on how to change this value.\n\nApplies to: SQL Server 2016 (13.x) R Services, Enterprise edition\n\nError when using sp_execute_external_script without libc++.so on Linux\n\nOn a clean Linux machine that doesn't have libc++.so installed, running a sp_execute_external_script (SPEES) query with Java or an external language fails because commonlauncher.so fails to load libc++.so.\n\nFor example:\n\nEXECUTE sp_execute_external_script @language = N'Java' , @script = N'JavaTestPackage.PassThrough' , @parallel = 0 , @input_data_1 = N'select 1' WITH RESULT SETS((col1 INT NOT NULL)); GO\n\nThis fails with a message similar to the following:\n\nMsg 39012, Level 16, State 14, Line 0 Unable to communicate with the runtime for 'Java' script for request id: 94257840-1704-45E8-83D2-2F74AEB46CF7. Please check the requirements of 'Java' runtime.\n\nThe mssql-launchpadd logs will show an error message similar to the following:\n\nOct 18 14:03:21 sqlextmls launchpadd[57471]: [launchpad] 2019/10/18 14:03:21 WARNING: PopulateLauncher failed: Library /opt/mssql-extensibility/lib/commonlauncher.so not loaded. Error: libc++.so.1: cannot open shared object file: No such file or directory\n\nWorkaround\n\nYou can perform one of the following workarounds:\n\nCopy libc++* from /opt/mssql/lib to the default system path /lib64\n\nAdd the following entries to /var/opt/mssql/mssql.conf to expose the path:\n\n[extensibility] readabledirectories = /opt/mssql\n\nApplies to: SQL Server 2019 (15.x) on Linux\n\nInstallation or upgrade error on FIPS enabled servers\n\nIf you install SQL Server 2019 (15.x) with the feature Machine Learning Services and Language Extensions or upgrade the SQL Server instance on a Federal Information Processing Standard (FIPS) enabled server, you will receive the following error:\n\nAn error occurred while installing extensibility feature with error message: AppContainer Creation Failed with error message NONE, state This implementation is not part of the Windows Platform FIPS validated cryptographic algorithms.\n\nWorkaround\n\nDisable FIPS before the installation of SQL Server 2019 (15.x) with the feature Machine Learning Services and Language Extensions or upgrade of the SQL Server instance. Once the installation or upgrade is complete, you can reenable FIPS.\n\nApplies to: SQL Server 2019 (15.x)\n\nR libraries using specific algorithms, streaming, or partitioning\n\nIssue\n\nThe following limitations apply on SQL Server 2017 (14.x) with runtime upgrade. This issue applies to Enterprise edition.\n\nParallelism: RevoScaleR and MicrosoftML algorithm thread parallelism for scenarios are limited to maximum of two threads.\n\nStreaming & partitioning: Scenarios involving @r_rowsPerRead parameter passed to T-SQL sp_execute_external_script isn't applied.\n\nStreaming & partitioning: RevoScaleR and MicrosoftML data sources (that is, ODBC, XDF) doesn't support reading rows in chunks for training or scoring scenarios. These scenarios always bring all data to memory for computation and the operations are memory bound\n\nSolution\n\nThe best solution is to upgrade to SQL Server 2019 (15.x). Alternatively you can continue to use SQL Server 2017 (14.x) with runtime upgrade configured using RegisterRext.exe /configure, after you complete the following tasks.\n\nEdit registry to create a key Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\150 and add a value SharedCode with data C:\\Program Files\\Microsoft SQL Server\\150\\Shared or the instance shared directory, as configured.\n\nCreate a folder C:\\Program Files\\Microsoft SQL Server\\150\\Shared and copy instapi140.dll from the folder C:\\Program Files\\Microsoft SQL Server\\140\\Shared to the newly created folder.\n\nRename the instapi140.dll to instapi150.dll in the new folder C:\\Program Files\\Microsoft SQL Server\\150\\Shared.\n\nImportant\n\nIf you do the steps above, you must manually remove the added key prior to upgrading to a later version of SQL Server.\n\nPerformance issues of Process Pooling in ML Services (R and Python)\n\nThis section contains known issues and workarounds for using ML services (R and Python) in SQL Server.\n\nCold start Performance of Process Pooling in ML Services\n\nUpon execution of sp_execute_external_script, the launchpad service launches satellite processes that start the external runtimes such as R and Python. To amortize the startup cost, a pool of processes is created that can be used in the subsequent execution of sp_execute_external_script. This pool of processes is specific to this user, database, and the used language (R or Python in ML Services).\n\nFirst query execution\n\nThe satellite processes need to be warmed up when sp_execute_external_script is executed for the first time or after a period of idle time (the processes are terminated via a cleanup task if they are not used for a while). Cold start of such pooled processes may be slow (for example, due to resource constraints).\n\nWorkaround\n\nIf the performance of the first call is important, it is recommended to keep the queries warm. For example, a background task can be executed that fires a simple sp_execute_external_script query before the processes get expired. For instance, to keep R queries warm, you may execute the following query periodically.\n\nEXECUTE sp_execute_external_script @language = N'R', @script = N''; GO\n\nHigh number of concurrent queries\n\nIf the number of concurrent executions of sp_execute_external_script is higher than the active R/Python processes in the pool, the cold start of adding additional processes to the pool may be slow (for example, due to resource constraints).\n\nWorkaround\n\nTo overcome the scaling performance issue, multiple requests can be batched (for example, via loopback connections or rewriting the script to handle multiple requests). In addition, for real-time scenarios SQL PREDICT can be utilized.\n\nR script execution issues\n\nThis section contains known issues that are specific to running R on SQL Server, as well as some issues that are related to the R libraries and tools published by Microsoft, including RevoScaleR.\n\nFor additional known issues that might affect R solutions, see the Machine Learning Server site.\n\nAccess denied warning when executing R scripts on SQL Server in a non default location\n\nIf the instance of SQL Server has been installed to a non-default location, such as outside the Program Files folder, the warning ACCESS_DENIED is raised when you try to run scripts that install a package. For example:\n\nIn normalizePath(path.expand(path), winslash, mustWork) : path[2]=\"~ExternalLibraries/R/8/1\": Access is denied\n\nThe reason is that an R function attempts to read the path, and fails if the built-in users group SQLRUserGroup, doesn't have read access. The warning that is raised doesn't block execution of the current R script, but the warning might recur repeatedly whenever the user runs any other R script.\n\nIf you have installed SQL Server to the default location, this error doesn't occur, because all Windows users have read permissions on the Program Files folder.\n\nThis issue is addressed in an upcoming service release. As a workaround, provide the group, SQLRUserGroup, with read access for all parent folders of ExternalLibraries.\n\nSerialization error between old and new versions of RevoScaleR\n\nWhen you pass a model using a serialized format to a remote SQL Server instance, you might get the error:\n\nError in memDecompress(data, type = decompress) internal error -3 in memDecompress(2).\n\nThis error is raised if you saved the model using a recent version of the serialization function, rxSerializeModel, but the SQL Server instance where you deserialize the model has an older version of the RevoScaleR APIs, from SQL Server 2017 (14.x) CU 2 or earlier.\n\nAs a workaround, you can upgrade the SQL Server 2017 (14.x) instance to CU 3 or later.\n\nThe error doesn't appear if the API version is the same, or if you are moving a model saved with an older serialization function to a server that uses a newer version of the serialization API.\n\nIn other words, use the same version of RevoScaleR for both serialization and deserialization operations.\n\nReal-time scoring doesn't correctly handle the learningRate parameter in tree and forest models\n\nIf you create a model using a decision tree or decision forest method and specify the learning rate, you might see inconsistent results when using sp_rxpredict or the SQL PREDICT function, as compared to using rxPredict.\n\nThe cause is an error in the API that processes serialized models, and is limited to the learningRate parameter: for example, in rxBTrees, or\n\nThis issue is addressed in an upcoming service release.\n\nLimitations on processor affinity for R jobs\n\nIn the initial release build of SQL Server 2016 (13.x), you could set processor affinity only for CPUs in the first k-group. For example, if the server is a 2-socket machine with two k-groups, only processors from the first k-group are used for the R processes. The same limitation applies when you configure resource governance for R script jobs.\n\nThis issue is fixed in SQL Server 2016 (13.x) Service Pack 1. We recommend that you upgrade to the latest service release.\n\nApplies to: SQL Server 2016 (13.x) R Services (RTM version)\n\nChanges to column types can't be performed when reading data in a SQL Server compute context\n\nIf your compute context is set to the SQL Server instance, you can't use the colClasses argument (or other similar arguments) to change the data type of columns in your R code.\n\nFor example, the following statement would result in an error if the column CRSDepTimeStr isn't already an integer:\n\ndata <- RxSqlServerData( sqlQuery = \"SELECT CRSDepTimeStr, ArrDelay FROM AirlineDemoSmall\", connectionString = connectionString, colClasses = c(CRSDepTimeStr = \"integer\"))\n\nAs a workaround, you can rewrite the SQL query to use CAST or CONVERT and present the data to R by using the correct data type. In general, performance is better when you work with data by using SQL rather than by changing data in the R code.\n\nApplies to: SQL Server 2016 (13.x) R Services\n\nLimits on size of serialized models\n\nWhen you save a model to a SQL Server table, you must serialize the model and save it in a binary format. Theoretically the maximum size of a model that can be stored with this method is 2 GB, which is the maximum size of varbinary columns in SQL Server.\n\nIf you need to use larger models, the following workarounds are available:\n\nTake steps to reduce the size of your model. Some open source R packages include a great deal of information in the model object, and much of this information can be removed for deployment.\n\nUse feature selection to remove unnecessary columns.\n\nIf you are using an open source algorithm, consider a similar implementation using the corresponding algorithm in MicrosoftML or RevoScaleR. These packages have been optimized for deployment scenarios.\n\nAfter the model has been rationalized and the size reduced using the preceding steps, see if the memCompress function in base R can be used to reduce the size of the model before passing it to SQL Server. This option is best when the model is close to the 2-GB limit.\n\nFor larger models, you can use the SQL Server FileTable feature to store the models, rather than using a varbinary column.\n\nTo use FileTables, you must add a firewall exception, because data stored in FileTables is managed by the Filestream filesystem driver in SQL Server, and default firewall rules block network file access. For more information, see Enable Prerequisites for FileTable.\n\nAfter you have enabled FileTable, to write the model, you get a path from SQL using the FileTable API, and then write the model to that location from your code. When you need to read the model, you get the path from SQL Server, and then call the model using the path from your script. For more information, see Access FileTables with File Input-Output APIs.\n\nAvoid clearing workspaces when you execute R code in a SQL Server compute context\n\nIf you use an R command to clear your workspace of objects while running R code in a SQL Server compute context, or if you clear the workspace as part of an R script called by using sp_execute_external_script, you might get this error: workspace object revoScriptConnection not found\n\nrevoScriptConnection is an object in the R workspace that contains information about an R session that is called from SQL Server. However, if your R code includes a command to clear the workspace (such as rm(list=ls())), all information about the session and other objects in the R workspace is cleared as well.\n\nAs a workaround, avoid indiscriminate clearing of variables and other objects while you're running R in SQL Server. Although clearing the workspace is common when working in the R console, it can have unintended consequences.\n\nTo delete specific variables, use the R remove function: for example, remove('name1', 'name2', ...)\n\nIf there are multiple variables to delete, save the names of temporary variables to a list and perform periodic garbage collection.\n\nRestrictions on data that can be provided as input to an R script\n\nYou can't use in an R script the following types of query results:\n\nData from a Transact-SQL query that references AlwaysEncrypted columns.\n\nData from a Transact-SQL query that references masked columns.\n\nIf you need to use masked data in an R script, a possible workaround is to make a copy of the data in a temporary table and use that data instead.\n\nUse of strings as factors can lead to performance degradation\n\nUsing string type variables as factors can greatly increase the amount of memory used for R operations. This is a known issue with R in general, and there are many articles on the subject. For example, see Factors aren't first-class citizens in R, by John Mount, in R-bloggers) or stringsAsFactors: An unauthorized biography, by Roger Peng.\n\nAlthough the issue isn't specific to SQL Server, it can greatly affect performance of R code run in SQL Server. Strings are typically stored as varchar or nvarchar, and if a column of string data has many unique values, the process of internally converting these to integers and back to strings by R can even lead to memory allocation errors.\n\nIf you don't absolutely require a string data type for other operations, mapping the string values to a numeric (integer) data type as part of data preparation would be beneficial from a performance and scale perspective.\n\nFor a discussion of this issue, and other tips, see Performance for R Services - data optimization.\n\nArguments varsToKeep and varsToDrop aren't supported for SQL Server data sources\n\nWhen you use the rxDataStep function to write results to a table, using the varsToKeep and varsToDrop is a handy way of specifying the columns to include or exclude as part of the operation. However, these arguments aren't supported for SQL Server data sources.\n\nLimited support for SQL data types in sp_execute_external_script\n\nNot all data types that are supported in SQL can be used in R. As a workaround, consider casting the unsupported data type to a supported data type before passing the data to sp_execute_external_script.\n\nFor more information, see R libraries and data types.\n\nPossible string corruption using Unicode strings in varchar columns\n\nPassing Unicode data in varchar columns from SQL Server to R/Python can result in string corruption. This is due to the encoding for these Unicode strings in SQL Server collations may not match with the default UTF-8 encoding used in R/Python.\n\nTo send any non-ASCII string data from SQL Server to R/Python, use UTF-8 encoding (available in SQL Server 2019 (15.x)) or use nvarchar type for the same.\n\nOnly one value of type raw can be returned from sp_execute_external_script\n\nWhen a binary data type (the R raw data type) is returned from R, the value must be sent in the output data frame.\n\nWith data types other than raw, you can return parameter values along with the results of the stored procedure by adding the OUTPUT keyword. For more information, see Parameters.\n\nIf you want to use multiple output sets that include values of type raw, one possible workaround is to do multiple calls of the stored procedure, or to send the result sets back to SQL Server by using ODBC.\n\nLoss of precision\n\nBecause Transact-SQL and R support various data types, numeric data types can suffer loss of precision during conversion.\n\nFor more information about implicit data-type conversion, see R libraries and data types.\n\nVariable scoping error when you use the transformFunc parameter\n\nTo transform data while you are modeling, you can pass a transformFunc argument in a function such as rxLinmod or rxLogit. However, nested function calls can lead to scoping errors in the SQL Server compute context, even if the calls work correctly in the local compute context.\n\nThe sample data set for the analysis has no variables\n\nFor example, assume that you have defined two functions, f and g, in your local global environment, and g calls f. In distributed or remote calls involving g, the call to g might fail with this error, because f can't be found, even if you have passed both f and g to the remote call.\n\nIf you encounter this problem, you can work around the issue by embedding the definition of f inside your definition of g, anywhere before g would ordinarily call f.\n\nFor example:\n\nf <- function(x) { 2*x * 3 } g <- function(y) { a <- 10 * y f(a) }\n\nTo avoid the error, rewrite the definition as follows:\n\ng <- function(y){ f <- function(x) { 2*x +3} a <- 10 * y f(a) }\n\nData import and manipulation using RevoScaleR\n\nWhen varchar columns are read from a database, white space is trimmed. To prevent this, enclose strings in non-white-space characters.\n\nWhen functions such as rxDataStep are used to create database tables that have varchar columns, the column width is estimated based on a sample of the data. If the width can vary, it might be necessary to pad all strings to a common length.\n\nUsing a transform to change a variable's data type isn't supported when repeated calls to rxImport or rxTextToXdf are used to import and append rows, combining multiple input files into a single .xdf file.\n\nLimited support for rxExec\n\nIn SQL Server 2016 (13.x), the rxExec function that's provided by the RevoScaleR package can be used only in single-threaded mode.\n\nIncrease the maximum parameter size to support rxGetVarInfo\n\nIf you use data sets with extremely large numbers of variables (for example, over 40,000), set the max-ppsize flag when you start R to use functions such as rxGetVarInfo. The max-ppsize flag specifies the maximum size of the pointer protection stack.\n\nIf you are using the R console (for example, RGui.exe or RTerm.exe), you can set the value of max-ppsize to 500000 by typing:\n\nR --max-ppsize=500000\n\nIssues with the rxDTree function\n\nThe rxDTree function doesn't currently support in-formula transformations. In particular, using the F() syntax for creating factors on the fly isn't supported. However, numeric data is automatically binned.\n\nOrdered factors are treated the same as factors in all RevoScaleR analysis functions except rxDTree.\n\ndata.table as an OutputDataSet in R\n\nUsing data.table as an OutputDataSet in R isn't supported in SQL Server 2017 (14.x) Cumulative Update 13 (CU 13) and earlier. The following message might appear:\n\nMsg 39004, Level 16, State 20, Line 2 A 'R' script error occurred during execution of 'sp_execute_external_script' with HRESULT 0x80004004. Msg 39019, Level 16, State 2, Line 2 An external script error occurred: Error in alloc.col(newx) : Internal error: length of names (0) is not length of dt (11) Calls: data.frame ... as.data.frame -> as.data.frame.data.table -> copy -> alloc.col Error in execution. Check the output for more information. Error in eval(expr, envir, enclos) : Error in execution. Check the output for more information. Calls: source -> withVisible -> eval -> eval -> .Call Execution halted\n\ndata.table as an OutputDataSet in R is supported in SQL Server 2017 (14.x) Cumulative Update 14 (CU 14) and later.\n\nRun a long script fails while installing a library\n\nRunning a long running external script session and having the dbo in parallel trying to install a library on a different database can terminate the script.\n\nFor example, running this external script against the master database:\n\nUSE MASTER DECLARE @language nvarchar(1) = N'R' DECLARE @script nvarchar(max) = N'Sys.sleep(100)' DECLARE @input_data_1 nvarchar(max) = N'select 1' EXEC sp_execute_external_script @language = @language, @script = @script, @input_data_1 = @input_data_1 with result sets none go\n\nWhile the dbo in parallel installs a library in LibraryManagementFunctional:\n\nUSE [LibraryManagementFunctional] go CREATE EXTERNAL LIBRARY [RODBC] FROM (CONTENT = N'/home/ani/var/opt/mssql/data/RODBC_1.3-16.tar.gz') WITH (LANGUAGE = 'R') go DECLARE @language nvarchar(1) = N'R' DECLARE @script nvarchar(14) = N'library(RODBC)' DECLARE @input_data_1 nvarchar(8) = N'select 1' EXEC sp_execute_external_script @language = @language, @script = @script, @input_data_1 = @input_data_1 go\n\nThe previous long running external script against the master database will terminate with the following error message:\n\nA 'R' script error occurred during execution of 'sp_execute_external_script' with HRESULT 0x800704d4.\n\nWorkaround\n\nDon't run the library install in parallel to the long-running query. Or rerun the long running query after the installation is complete.\n\nApplies to: SQL Server 2019 (15.x) on Linux & Big Data Clusters only.\n\nSQL Server stops responding when executing R scripts containing parallel execution\n\nSQL Server 2019 (15.x) contains a regression that affects R scripts that use parallel execution. Examples include using rxExec with RxLocalPar compute context and scripts that use the parallel package. This problem is caused by errors the parallel package encounters when writing to the null device while executing in SQL Server.\n\nApplies to: SQL Server 2019 (15.x).\n\nPrecision loss for money/numeric/decimal/bigint data types\n\nExecuting an R script with sp_execute_external_script allows money, numeric, decimal, and bigint data types as input data. However, because they are converted to R's numeric type, they suffer a precision loss with values that are very high or have decimal point values.\n\nmoney: Sometimes cent values would be imprecise and a warning would be issued: Warning: unable to precisely represent cents values.\n\nnumeric/decimal: sp_execute_external_script with an R script doesn't support the full range of those data types and would alter the last few decimal digits especially those with fraction.\n\nbigint: R only support up to 53-bit integers and then it will start to have precision loss.\n\nIssues with the rxExecBy function - rxExecBy function cannot find installed package\n\nWhen the rxExecBy function is called, a new R runtime process starts. This new process does not have updated library paths, hence, packages installed in locations other than the default library path are not found during execution.\n\nWorkaround\n\nThe path to R packages needs to be explicitly updated. Suppose the packages are installed in the external libraries path, the following R script could be used to update library path: .libPaths(c(Sys.getenv(\"MRS_EXTLIB_USER_PATH\"), Sys.getenv(\"MRS_EXTLIB_SHARED_PATH\"), .libPaths()))\n\nPython script execution issues\n\nThis section contains known issues that are specific to running Python on SQL Server, as well as issues that are related to the Python packages published by Microsoft, including revoscalepy and microsoftml.\n\nCall to pretrained model fails if path to model is too long\n\nIf you installed the pretrained models in an early release of SQL Server 2017 (14.x), the complete path to the trained model file might be too long for Python to read. This limitation is fixed in a later service release.\n\nThere are several potential workarounds:\n\nWhen you install the pretrained models, choose a custom location.\n\nIf possible, install the SQL Server instance under a custom installation path with a shorter path, such as C:\\SQL\\MSSQL14.MSSQLSERVER.\n\nUse the Windows utility Fsutil to create a hard link that maps the model file to a shorter path.\n\nUpdate to the latest service release.\n\nError when saving serialized model to SQL Server\n\nWhen you pass a model to a remote SQL Server instance, and try to read the binary model using the rx_unserialize function in revoscalepy, you might get the error:\n\nNameError: name 'rx_unserialize_model' is not defined\n\nThis error is raised if you saved the model using a recent version of the serialization function, but the SQL Server instance where you deserialize the model doesn't recognize the serialization API.\n\nTo resolve the issue, upgrade the SQL Server 2017 (14.x) instance to CU 3 or later.\n\nFailure to initialize a varbinary variable causes an error in BxlServer\n\nIf you run Python code in SQL Server using sp_execute_external_script, and the code has output variables of type varbinary(max), varchar(max) or similar types, the variable must be initialized or set as part of your script. Otherwise, the data exchange component, BxlServer, raises an error and stops working.\n\nThis limitation will be fixed in an upcoming service release. As a workaround, make sure that the variable is initialized within the Python script. Any valid value can be used, as in the following examples:\n\ndeclare @b varbinary(max); exec sp_execute_external_script @language = N'Python' , @script = N'b = 0x0' , @params = N'@b varbinary(max) OUTPUT' , @b = @b OUTPUT; go\n\ndeclare @b varchar(30); exec sp_execute_external_script @language = N'Python' , @script = N' b = \"\" ' , @params = N'@b varchar(30) OUTPUT' , @b = @b OUTPUT; go\n\nTelemetry warning on successful execution of Python code\n\nBeginning with SQL Server 2017 (14.x) CU 2, the following message might appear even if Python code otherwise runs successfully:\n\nSTDERR message(s) from external script: ~PYTHON_SERVICES\\lib\\site-packages\\revoscalepy\\utils\\RxTelemetryLogger SyntaxWarning: telemetry_state is used prior to global declaration\n\nThis issue has been fixed in SQL Server 2017 (14.x) Cumulative Update 3 (CU 3).\n\nNumeric, decimal, and money data types not supported\n\nBeginning with SQL Server 2017 (14.x) Cumulative Update 12 (CU 12), numeric, decimal and money data types in WITH RESULT SETS are unsupported when using Python with sp_execute_external_script. The following messages might appear:\n\n[Code: 39004, SQL State: S1000] A 'Python' script error occurred during execution of 'sp_execute_external_script' with HRESULT 0x80004004.\n\n[Code: 39019, SQL State: S1000] An external script error occurred:\n\nSqlSatelliteCall error: Unsupported type in output schema. Supported types: bit, smallint, int, datetime, smallmoney, real and float. char, varchar are partially supported.\n\nThis has been fixed in SQL Server 2017 (14.x) Cumulative Update 14 (CU 14).\n\nBad interpreter error when installing Python packages with pip on Linux\n\nOn SQL Server 2019 (15.x), if you try to use pip. For example:\n\n/opt/mssql/mlservices/runtime/python/bin/pip -h\n\nYou will then get this error:\n\nbash: /opt/mssql/mlservices/runtime/python/bin/pip: /opt/microsoft/mlserver/9.4.7/bin/python/python: bad interpreter: No such file or directory\n\nWorkaround\n\nInstall pip from the Python Package Authority (PyPA):\n\nwget 'https://bootstrap.pypa.io/get-pip.py' /opt/mssql/mlservices/bin/python/python ./get-pip.py\n\nRecommendation\n\nSee Install Python packages with sqlmlutils.\n\nApplies to: SQL Server 2019 (15.x) on Linux\n\nUnable to install Python packages using pip after installing SQL Server 2019 on Windows\n\nAfter installing SQL Server 2019 (15.x) on Windows, attempting to install a python package via pip from a DOS command line will fail. For example:\n\npip install quantfolio\n\nThis will return the following error:\n\npip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\n\nThis is a problem specific to the Anaconda package. It will be fixed in an upcoming service release.\n\nWorkaround\n\nCopy the following files:\n\nlibssl-1_1-x64.dll\n\nlibcrypto-1_1-x64.dll\n\nfrom the folder\n\nC:\\Program Files\\Microsoft SQL Server\\MSSSQL15.MSSQLSERVER\\PYTHON_SERVICES\\Library\\bin\n\nto the folder\n\nC:\\Program Files\\Microsoft SQL Server\\MSSSQL15.MSSQLSERVER\\PYTHON_SERVICES\\DLLs\n\nThen open a new DOS command shell prompt.\n\nApplies to: SQL Server 2019 (15.x) on Windows\n\nError when using sp_execute_external_script without libc++abo.so on Linux\n\nOn a clean Linux machine that doesn't have libc++abi.so installed, running a sp_execute_external_script (SPEES) query fails with a \"No such file or directory\" error.\n\nFor example:\n\nEXEC sp_execute_external_script @language = N'Python' , @script = N' OutputDataSet = InputDataSet' , @input_data_1 = N'select 1' , @input_data_1_name = N'InputDataSet' , @output_data_1_name = N'OutputDataSet' WITH RESULT SETS (([output] int not null));\n\nMsg 39012, Level 16, State 14, Line 0 Unable to communicate with the runtime for 'Python' script for request id: 94257840-1704-45E8-83D2-2F74AEB46CF7. Please check the requirements of 'Python' runtime. STDERR message(s) from external script: Failed to load library /opt/mssql-extensibility/lib/sqlsatellite.so with error libc++abi.so.1: cannot open shared object file: No such file or directory. SqlSatelliteCall error: Failed to load library /opt/mssql-extensibility/lib/sqlsatellite.so with error libc++abi.so.1: cannot open shared object file: No such file or directory. STDOUT message(s) from external script: SqlSatelliteCall function failed. Please see the console output for more information. Traceback (most recent call last): File \"/opt/mssql/mlservices/libraries/PythonServer/revoscalepy/computecontext/RxInSqlServer.py\", line 605, in rx_sql_satellite_call rx_native_call(\"SqlSatelliteCall\", params) File \"/opt/mssql/mlservices/libraries/PythonServer/revoscalepy/RxSerializable.py\", line 375, in rx_native_call ret = px_call(functionname, params) RuntimeError: revoscalepy function failed. Total execution time: 00:01:00.387\n\nWorkaround\n\nRun the following command:\n\nsudo cp /opt/mssql/lib/libc++abi.so.1 /opt/mssql-extensibility/lib/\n\nApplies to: SQL Server 2019 (15.x) on Linux\n\nGeneric error when running sp_execute_external_script on Ubuntu 20.04 with SQL Server 2022 CU6 on Linux\n\nInstalling SQL Server 2022 CU6 for Linux on Ubuntu 20.04 can result in the following error when running sp_execute_external_script for R and Python scripts:\n\nMsg 39012, Level 16, State 14, Line 0 Unable to communicate with the runtime for 'R' script for request id: 94257840-1704-45E8-83D2-2F74AEB46CF7. Please check the requirements of 'R' runtime. STDERR message(s) from external script: /usr/lib/R/library/RevoScaleR/rxLibs/x64/libExaCore.so.2(_Z21CriticalSignalHandleri+0x29)[0x7f2568289d89] /usr/lib/x86_64-linux-gnu/libc.so.6(+0x43090)[0x7f2568d66090]\n\nWorkaround\n\nRun the following command to install the package dependency libssl-dev, which enables SQL Server to resolve the system provided shared libraries libssl and libcrypto.\n\nsudo apt-get update sudo apt-get install libssl-dev\n\nFirewall rule creation error in modprobe when running mssql-launchpadd on Linux\n\nWhen viewing the logs of mssql-launchpadd using sudo journalctl -a -u mssql-launchpadd, you might see a firewall rule creation error similar to the following output.\n\n-- Logs begin at Sun 2021-03-28 12:03:30 PDT, end at Wed 2022-10-12 13:20:17 PDT. -- Mar 22 16:57:51 sqlVm systemd[1]: Started Microsoft SQL Server Extensibility Launchpad Daemon. Mar 22 16:57:51 sqlVm launchpadd[195658]: 2022/03/22 16:57:51 [launchpadd] INFO: Extensibility Log Header: <timestamp> <process> <sandboxId> <sessionId> <message> Mar 22 16:57:51 sqlVm launchpadd[195658]: 2022/03/22 16:57:51 [launchpadd] INFO: No extensibility section in /var/opt/mssql/mssql.conf file. Using default settings. Mar 22 16:57:51 sqlVm launchpadd[195658]: 2022/03/22 16:57:51 [launchpadd] INFO: DataDirectories = /bin:/etc:/lib:/lib32:/lib64:/sbin:/usr/bin:/usr/include:/usr/lib:/usr/lib32:/usr/lib64:/usr/libexec/gcc:/usr/sbin:/usr/share:/var/lib:/opt/microsoft:/opt/mssql-extensibility:/opt/mssql/mlservices:/opt/mssql/lib/zulu-jre-11:/opt/mssql-tools Mar 22 16:57:51 sqlVm launchpadd[195658]: 2022/03/22 16:57:51 [launchpadd] INFO: [RG] SQL Extensibility Cgroup initialization is done. Mar 22 16:57:51 sqlVm launchpadd[195658]: 2022/03/22 16:57:51 [launchpadd] INFO: Found 1 IP address(es) from the bridge. Mar 22 16:57:51 sqlVm launchpadd[195676]: modprobe: ERROR: could not insert 'ip6_tables': Operation not permitted Mar 22 16:57:51 sqlVm launchpadd[195673]: ip6tables v1.8.4 (legacy): can't initialize ip6tables table `filter': Table does not exist (do you need to insmod?) Mar 22 16:57:51 sqlVm launchpadd[195673]: Perhaps ip6tables or your kernel needs to be upgraded. Mar 22 16:57:51 sqlVm launchpadd[195678]: modprobe: ERROR: could not insert 'ip6_tables': Operation not permitted Mar 22 16:57:51 sqlVm launchpadd[195677]: ip6tables v1.8.4 (legacy): can't initialize ip6tables table `filter': Table does not exist (do you need to insmod?) Mar 22 16:57:51 sqlVm launchpadd[195677]: Perhaps ip6tables or your kernel needs to be upgraded. Mar 22 16:57:51 sqlVm launchpadd[195670]: 2022/03/22 16:57:51 [setnetbr] ERROR: Failed to set firewall rules: exit status 3\n\nWorkaround\n\nRun the following commands to configure modprobe, and restart the SQL Server Launchpad service:\n\nsudo modprobe ip6_tables sudo systemctl restart mssql-launchpadd\n\nApplies to: SQL Server 2019 (15.x) and later on Linux\n\nCan't install tensorflow package using sqlmlutils\n\nThe sqlmlutils package is used to install Python packages in SQL Server 2019 (15.x). You need to download, install, and update the Microsoft Visual C++ 2015-2019 Redistributable (x64). However, the tensorflow package can't be installed using sqlmlutils. The tensorflow package depends on a newer version of numpy than the version installed in SQL Server. However, numpy is a preinstalled system package that sqlmlutils can't update when trying to install tensorflow.\n\nWorkaround\n\nUsing a command prompt in administrator mode, run the following command, replacing \"MSSQLSERVER\" with the name of your SQL instance:\n\n\"C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\PYTHON_SERVICES\\python.exe\" -m pip install --upgrade tensorflow\n\nIf you get a \"TLS/SSL\" error, see 7. Unable to install Python packages using pip earlier in this article.\n\nApplies to: SQL Server 2019 (15.x) on Windows\n\nRevolution R Enterprise and Microsoft R Open\n\nThis section lists issues specific to R connectivity, development, and performance tools that are provided by Revolution Analytics. These tools were provided in earlier pre-release versions of SQL Server.\n\nIn general, we recommend that you uninstall these previous versions and install the latest version of SQL Server or Microsoft R Server.\n\nRevolution R Enterprise isn't supported\n\nInstalling Revolution R Enterprise side by side with any version of R Services (In-Database) isn't supported.\n\nIf you have an existing license for Revolution R Enterprise, you must put it on a separate computer from both the SQL Server instance and any workstation that you want to use to connect to the SQL Server instance.\n\nSome pre-release versions of R Services (In-Database) included an R development environment for Windows that was created by Revolution Analytics. This tool is no longer provided, and isn't supported.\n\nFor compatibility with R Services (In-Database), we recommend that you install Microsoft R Client instead. R Tools for Visual Studio and Visual Studio Code also supports Microsoft R solutions.\n\nCompatibility issues with SQLite ODBC driver and RevoScaleR\n\nRevision 0.92 of the SQLite ODBC driver is incompatible with RevoScaleR. Revisions 0.88-0.91 and 0.93 and later are known to be compatible.\n\nNext steps"
    }
}