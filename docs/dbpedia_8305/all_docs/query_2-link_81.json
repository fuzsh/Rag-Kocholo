{
    "id": "dbpedia_8305_2",
    "rank": 81,
    "data": {
        "url": "https://filesystem-spec.readthedocs.io/",
        "read_more_link": "",
        "language": "en",
        "title": "fsspec: Filesystem interfaces for Python ‚Äî fsspec 2024.6.0.post1+g8be9763.d20240613 documentation",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "fsspec: Filesystem interfaces for PythonÔÉÅ\n\nFilesystem Spec (fsspec) is a project to provide a unified pythonic interface to local, remote and embedded file systems and bytes storage.\n\nBrief OverviewÔÉÅ\n\nThere are many places to store bytes, from in memory, to the local disk, cluster distributed storage, to the cloud. Many files also contain internal mappings of names to bytes, maybe in a hierarchical directory-oriented tree. Working with all these different storage media, and their associated libraries, is a pain. fsspec exists to provide a familiar API that will work the same whatever the storage backend. As much as possible, we iron out the quirks specific to each implementation, so you need do no more than provide credentials for each service you access (if needed) and thereafter not have to worry about the implementation again.\n\nWhyÔÉÅ\n\nfsspec provides two main concepts: a set of filesystem classes with uniform APIs (i.e., functions such as cp, rm, cat, mkdir, ‚Ä¶) supplying operations on a range of storage systems; and top-level convenience functions like fsspec.open(), to allow you to quickly get from a URL to a file-like object that you can use with a third-party library or your own code.\n\nThe section Background gives motivation and history of this project, but most users will want to skip straight to Usage to find out how to use the package and Features of fsspec to see the long list of added functionality included along with the basic file-system interface.\n\nWho uses fsspec?ÔÉÅ\n\nYou can use fsspec‚Äôs file objects with any python function that accepts file objects, because of duck typing.\n\nYou may well be using fsspec already without knowing it. The following libraries use fsspec internally for path and file handling:\n\nDask, the parallel, out-of-core and distributed programming platform\n\nIntake, the data source cataloguing and loading library and its plugins\n\npandas, the tabular data analysis package\n\nxarray and zarr, multidimensional array storage and labelled operations\n\nDVC, version control system for machine learning projects\n\nKedro, a Python framework for reproducible, maintainable and modular data science code\n\npyxet, a Python library for mounting and accessing very large datasets from XetHub\n\nHuggingfaceü§ó Datasets, a popular library to load&manipulate data for Deep Learning models\n\nfsspec filesystems are also supported by:\n\npyarrow, the in-memory data layout engine\n\npetl, a general purpose package for extracting, transforming and loading tables of data.\n\n‚Ä¶ plus many more that we don‚Äôt know about.\n\nInstallationÔÉÅ\n\nfsspec can be installed from PyPI or conda and has no dependencies of its own\n\npip install fsspec conda install -c conda-forge fsspec\n\nNot all filesystem implementations are available without installing extra dependencies. For example to be able to access data in GCS, you can use the optional pip install syntax below, or install the specific package required\n\npip install fsspec[gcs] conda install -c conda-forge gcsfs\n\nfsspec attempts to provide the right message when you attempt to use a filesystem for which you need additional dependencies. The current list of known implementations can be found as follows\n\nfrom fsspec.registry import known_implementations known_implementations"
    }
}