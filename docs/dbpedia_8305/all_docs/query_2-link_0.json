{
    "id": "dbpedia_8305_2",
    "rank": 0,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Hierarchical_Cluster_Engine_Project",
        "read_more_link": "",
        "language": "en",
        "title": "Hierarchical Cluster Engine Project",
        "top_image": "https://upload.wikimedia.org/wikipedia/en/f/f6/Hierarchical_Cluster_Engine_Project_%28logo%29.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/en/f/f6/Hierarchical_Cluster_Engine_Project_%28logo%29.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/f/f6/Hierarchical_Cluster_Engine_Project_%28logo%29.png/120px-Hierarchical_Cluster_Engine_Project_%28logo%29.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2015-02-21T13:27:07+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Hierarchical_Cluster_Engine_Project",
        "text": "HCEDeveloper(s)Gennady Baranov and \"HCE Team\"[1]Initial release2013 ( )Stable release\n\n1.4.4 [2] / 31 August 2015; 8 years ago ( )\n\nWritten inC++, PHP, PythonOperating systemDebian and most Debian-based (Ubuntu, Lubuntu, Sparky, Linspire, etc...)LicenseGPLv2Websitehierarchical-cluster-engine .com\n\nHierarchical Cluster Engine (HCE) is a FOSS complex solution for: construct custom network mesh or distributed network cluster structure with several relations types between nodes, formalize the data flow processing goes from upper node level central source point to down nodes and backward, formalize the management requests handling from multiple source points, support native reducing of multiple nodes results (aggregation, duplicates elimination, sorting and so on), internally support powerful full-text search engine and data storage, provide transactions-less and transactional requests processing, support flexible run-time changes of cluster infrastructure, have many languages bindings for client-side integration APIs in one product build on C++ language.\n\nThis project became the successor of Associative Search Machine (ASM)[3] full-text web search engine project that was developed from 2006 to 2012 by IOIX Ukraine [4]\n\nThe hce-node core (HCE-node application) network transport cluster infrastructure engine.\n\nThe Bundle:\n\nDistributed Crawler service (HCE-DC),\n\nDistributed Tasks Manager service (HCE-DTM),\n\nPHP language API and console management tools,\n\nPython language API and management tools.\n\nPython data processing algorithms\n\nUtilities.\n\nAll of them are the set of applications that can be used to construct different distributed solutions like: remote processes execution management, data processing (including the text mining with NLP), web sites crawling (including incremental, periodic, with flexible and adaptive scheduling, RSS feeds and custom structured), web sites data scraping (include pre-defined and custom scrapers, xpath templates, sequential and optimized scraping algorithms), web-search engine (complete cycle including the crawling, scraping and distributed search index based on the Sphinx indexing engine), corporate integrated full-text search based on distributed Sphinx engine index and many more another applied solutions with similar business logic\n\nThe heart and main component of the HCE project it is hce-node application. This application integrates complete set of base functionality to support network infrastructure, hierarchical cluster construction, full-text search system integration and so on.\n\nImplemented for Linux OS environment and distributed in form of source code tarball archive and Debian Linux binary package with dependencies packages.\n\nSupports single instance configuration-less start or requires set of options that used to build correspondent network cluster architecture.\n\nSupposes usage with client-side applications or integrated IPI.\n\nFirst implementation of client-side API and cli utilities bind on PHP.\n\nHCE application area:\n\nAs a network infrastructure and messages transport layer provider – the HCE can be used in any big-data solution that needs some custom network structure to build distributed high-performance easy scalable vertically and horizontally data processing or data-mining architecture.\n\nAs a native internally supported full text search engine interface provider – the HCE can be used in web or corporate network solutions that needs smoothly integrated with usage of natural target project specific languages, fast and powerful full text search and NOSQL distributed data storage. Now the Sphinx (c) search engine with extended data model internally supported.\n\nAS a Distributed Remote Command Execution service provider – the HCE can be used for automation of administration of many host servers in ensemble mode for OS and services deployment, maintenance and support tasks.\n\nHierarchical Cluster as engine:\n\nProvides hierarchical cluster infrastructure – nodes connection schema, relations between nodes, roles of nodes, requests typification and data processing sequences algorithms, data sharding modes, and so on.\n\nProvides network transport layer for data of client application and administration management messages.\n\nManages native supported integrated NOSQL data storage Sphinx (c) search index and Distributed Remote Command Execution.\n\nCollect, reduce and sort results of native and custom data processing.\n\nReady to support transactional messages processing.\n\nHce-node roles in the cluster structure: Internally HCE-node application contains seven basic handler threads. Each handler acts as special black-box messages processor/dispatcher and used in combination with other to work in one of five different roles of node:\n\nRouter – upper end-point of cluster hierarchy. Has three server-type connections. Handles client API, any kind of another node roles instances (typically, shard or replica managers) and admin connections.\n\nShard manager – intermediate-point of cluster hierarchy. Routes messages between upper and down layers. Uses data sharding and messages multicast dispatching algorithms. Has two server-type and one client connections.\n\nReplica manager – the same as shard manager. Routes messages between upper and down layers uses data balancing and messages round-robin algorithms.\n\nReplica – down end-point of cluster hierarchy. Data node, interacts with data storage and/or process data with target algorithm(s), provides interface with fill-text search engine, target host for Distributed Remote Commands Execution. Has one server- and one client-side connections used for cluster infrastructure Also can to have several data storage-dependent connections.\n\nBoth DTM and DC applications provided with set of functional tests and demo operations automation scripts based on Linux shell. The Bundle distribution provided as zip archive that needs some environmental support to get functionality be ready.\n\nIt is a Linux OS daemon application that implements business-logic functionality of distributed web crawler and document data processor. It is based on the DTM application main functionality and hce-node DRCE Functional Object functionality and uses web crawling, processing and another related tasks as an isolated session executable modules with common business logic encapsulation. Also, the crawler contains raw contents storage subsystem based on file system (can be customized to support key-value storage or SQL). This application uses several DRCE Clusters to construct network infrastructure, MySQL and sqlite back-end for indexed data (Sites, URLs, contents and configuration properties) as well as a key-value data storage for the processed contents of pages or documents.\n\nAdditionally an administrative user interface web-application available to manage easy and flexible way. Also, this UI implements several automation of data collect and process with algorithms using schedules, aggregation of scraped data from several projects, creation of data archives, exporting data to the external SQL database with custom schema, many statistical reports of periodic data crawling and scraping activity and many more.\n\nIt is a Linux OS multi-thread daemon application that implements business-logic functionality of tasks management that uses the DRCE Cluster Execution Environment to manage tasks as remote processes. It implements general management operations for distributed tasks scheduling, execution, state check, OS resources monitoring and so on. This application can be used for parallel tasks execution with state monitoring on hierarchical network cluster infrastructure with custom nodes connection schema. It is multipurpose application aimed to cover needs of projects with big data computations, distributed data processing, multi-host data processing with OS system resources balancing, limitations and so on. It supports several balancing modes including multicast, random, round-robin and system resource usage algorithms. Also, provides high level state check, statistics and diagnostic automation based on natural hierarchy and relations between nodes. Supports messages routing as a tasks and data balancing method or a tasks management.\n\nIt is set of different by role and functionality separated console applications that can be united in some chains to get sequential data processing on server-side functionality and can be used as self-sufficient tools.\n\nUtilities designed to get common functional units for typical web projects that need to get huge data from web or another sources, pars, convert and process it. It supports unified input-output interface and json format of messages interaction. First implementation of utilities application is a Highlighter:[8] this is utility to get fast parallel multi-algorithmic textual patterns highlighting. It provides cli UI, works as filter console tool and uses json format of protocol messages for input and output interaction. Highlight is an algorithm of text processing that gets the search query string and textual context on input and returns textual content with marks of entrances of patterns from search query and additional stat information. Patterns usually are lexical words, but depend on stemming and tokenizing processes can be more complex constructions.\n\nSeveral pre-configured VM images for VMware and VirtualBox are uploaded to get start process faster. The user name is “root” and password is the same. The target user for DTS archive is “hce”, password the same. VM files zipped at here [1]"
    }
}