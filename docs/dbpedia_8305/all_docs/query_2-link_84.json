{
    "id": "dbpedia_8305_2",
    "rank": 84,
    "data": {
        "url": "https://docs.gitlab.com/ee/ci/testing/code_quality.html",
        "read_more_link": "",
        "language": "en",
        "title": "Code Quality",
        "top_image": "https://docs.gitlab.com/favicon.ico?v=2",
        "meta_img": "https://docs.gitlab.com/favicon.ico?v=2",
        "images": [
            "https://docs.gitlab.com/assets/images/gitlab-logo-header.svg",
            "https://docs.gitlab.com/ee/ci/testing/img/code_quality_widget_13_11.png",
            "https://docs.gitlab.com/ee/ci/testing/img/code_quality_inline_indicator_v16_7.png",
            "https://docs.gitlab.com/ee/ci/testing/img/code_quality_report_13_11.png",
            "https://docs.gitlab.com/ee/ci/testing/img/code_quality_summary_15_9.png",
            "https://docs.gitlab.com/assets/images/gitlab-logo.svg",
            "https://docs.gitlab.com/assets/images/by-sa.svg",
            "https://dc.ads.linkedin.com/collect/?pid=30694&fmt=gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "GitLab product documentation.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?v=2",
        "meta_site_name": "",
        "canonical_link": "https://docs.gitlab.com/ee/ci/testing/code_quality.html",
        "text": "Features per tier\n\nView Code Quality results\n\nMerge request widget\n\nMerge request changes view\n\nPipeline details view\n\nProject quality view\n\nEnable Code Quality\n\nImprove Code Quality performance with private runners\n\nRun Code Quality rootless with private runners\n\nDisable Code Quality\n\nCustomizing scan settings\n\nAvailable CI/CD variables\n\nOutput\n\nOutput in JSON and HTML format\n\nOutput in only HTML format\n\nUse Code Quality with merge request pipelines\n\nUse a private container image registry\n\nRequired images\n\nUse DockerHub with authentication\n\nUse the Dependency Proxy\n\nImplement a custom tool\n\nUsing Analysis Plugins\n\nUsing Code Quality in Kubernetes and OpenShift\n\nKubernetes\n\nOpenShift\n\nVolumes and Docker storage\n\nCode Quality\n\nUse Code Quality to analyze your source code’s quality and complexity. This helps keep your project’s code simple, readable, and easier to maintain. Code Quality should supplement your other review processes, not replace them.\n\nCode Quality runs in CI/CD pipelines, and helps you avoid merging changes that would degrade your code’s quality.\n\nCode Quality uses the open source Code Climate tool, and selected plugins, to analyze your source code. To confirm if your code’s languages are covered, see the Code Climate list of Supported Languages for Maintainability. You can extend the code coverage either by using Code Climate Analysis Plugins or a custom tool.\n\nFeatures per tier\n\nDifferent features are available in different GitLab tiers, as shown in the following table:\n\nFeature In Free In Premium In Ultimate Configure scanners Yes Yes Yes Integrate custom scanners Yes Yes Yes Generate JSON or HTML report artifacts Yes Yes Yes Findings in merge request widget Yes Yes Yes Findings in pipelines No Yes Yes Findings in merge request changes view No No Yes Summary in project quality view No No Yes\n\nView Code Quality results\n\nCode Quality results are shown in the:\n\nMerge request widget\n\nMerge request changes view\n\nPipeline details view\n\nProject quality view\n\nMerge request widget\n\nCode Quality analysis results display in the merge request widget area if a report from the target branch is available for comparison. The merge request widget displays Code Quality findings and resolutions that were introduced by the changes made in the merge request. Multiple Code Quality findings with identical fingerprints display as a single entry in the merge request widget. Each individual finding is available in the full report available in the Pipeline details view.\n\nMerge request changes view\n\nCode Quality results display in the merge request Changes view. Lines containing Code Quality issues are marked by a symbol beside the gutter. Select the symbol to see the list of issues, then select an issue to see its details.\n\nPipeline details view\n\nThe full list of Code Quality violations generated by a pipeline is shown in the Code Quality tab of the pipeline’s details page. The pipeline details view displays all Code Quality findings that were found on the branch it was run on.\n\nProject quality view\n\nThe project quality view displays an overview of the code quality findings. The view can be found under Analyze > CI/CD analytics, and requires project_quality_summary_page feature flag to be enabled for this particular project.\n\nEnable Code Quality\n\nPrerequisites:\n\nGitLab CI/CD configuration (.gitlab-ci.yml) must include the test stage.\n\nIf you’re using instance runners, the Code Quality job must be configured for the Docker-in-Docker workflow. When using this workflow, the /builds volume must be mapped to allow reports to be saved.\n\nIf you’re using private runners, you should use an alternative configuration recommended for running Code Quality analysis more efficiently.\n\nThe runner must have enough disk space to store the generated Code Quality files. For example, on the GitLab project the files are approximately 7 GB.\n\nTo enable Code Quality, either:\n\nEnable Auto DevOps, which includes Auto Code Quality.\n\nInclude the Code Quality template in your .gitlab-ci.yml file.\n\nExample:\n\ninclude: - template: Jobs/Code-Quality.gitlab-ci.yml\n\nCode Quality now runs in pipelines.\n\nImprove Code Quality performance with private runners\n\nIf you have private runners, you should use this configuration for improved performance of Code Quality because:\n\nPrivileged mode is not used.\n\nDocker-in-Docker is not used.\n\nDocker images, including all CodeClimate images, are cached, and not re-fetched for subsequent jobs.\n\nThis alternative configuration uses socket binding to share the Runner’s Docker daemon with the job environment. Before implementing this configuration, consider its limitations.\n\nTo use private runners:\n\nRegister a new runner:\n\n$ gitlab-runner register --executor \"docker\" \\ --docker-image=\"docker:latest\" \\ --url \"https://gitlab.com/\" \\ --description \"cq-sans-dind\" \\ --docker-volumes \"/cache\"\\ --docker-volumes \"/builds:/builds\"\\ --docker-volumes \"/var/run/docker.sock:/var/run/docker.sock\" \\ --registration-token=\"<project_token>\" \\ --non-interactive\n\nOptional, but recommended: Set the builds directory to /tmp/builds, so job artifacts are periodically purged from the runner host. If you skip this step, you must clean up the default builds directory (/builds) yourself. You can do this by adding the following two flags to gitlab-runner register in the previous step.\n\n--builds-dir \"/tmp/builds\" --docker-volumes \"/tmp/builds:/tmp/builds\" # Use this instead of --docker-volumes \"/builds:/builds\"\n\nThe resulting configuration:\n\n[[runners]] name = \"cq-sans-dind\" url = \"https://gitlab.com/\" token = \"<project_token>\" executor = \"docker\" builds_dir = \"/tmp/builds\" [runners.docker] tls_verify = false image = \"docker:latest\" privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/cache\", \"/var/run/docker.sock:/var/run/docker.sock\", \"/tmp/builds:/tmp/builds\"] shm_size = 0 [runners.cache] [runners.cache.s3] [runners.cache.gcs]\n\nApply two overrides to the code_quality job created by the template:\n\ninclude: - template: Jobs/Code-Quality.gitlab-ci.yml code_quality: services: # Shut off Docker-in-Docker tags: - cq-sans-dind # Set this job to only run on our new specialized runner\n\nCode Quality now runs in standard Docker mode.\n\nRun Code Quality rootless with private runners\n\nIf you are using private runners and would like to run the Code Quality scans in rootless Docker mode code quality requires some special changes to allow it to run properly. This may require having a runner dedicated to running only code quality jobs because changes in socket binding may cause problems in other jobs.\n\nTo use a rootless private runner:\n\nRegister a new runner:\n\nReplace /run/user/<gitlab-runner-user>/docker.sock with the path to the local docker.sock for the gitlab-runner user.\n\n$ gitlab-runner register --executor \"docker\" \\ --docker-image=\"docker:latest\" \\ --url \"https://gitlab.com/\" \\ --description \"cq-rootless\" \\ --tag-list \"cq-rootless\" \\ --locked=\"false\" \\ --access-level=\"not_protected\" \\ --docker-volumes \"/cache\" \\ --docker-volumes \"/tmp/builds:/tmp/builds\" \\ --docker-volumes \"/run/user/<gitlab-runner-user>/docker.sock:/run/user/<gitlab-runner-user>/docker.sock\" \\ --token \"<project_token>\" \\ --non-interactive \\ --builds-dir \"/tmp/builds\" \\ --env \"DOCKER_HOST=unix:///run/user/<gitlab-runner-user>/docker.sock\" \\ --docker-host \"unix:///run/user/<gitlab-runner-user>/docker.sock\"\n\nThe resulting configuration:\n\n[[runners]] name = \"cq-rootless\" url = \"https://gitlab.com/\" token = \"<project_token>\" executor = \"docker\" builds_dir = \"/tmp/builds\" environment = [\"DOCKER_HOST=unix:///run/user/<gitlab-runner-user>/docker.sock\"] [runners.docker] tls_verify = false image = \"docker:latest\" privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/cache\", \"/run/user/<gitlab-runner-user>/docker.sock:/run/user/<gitlab-runner-user>/docker.sock\", \"/tmp/builds:/tmp/builds\"] shm_size = 0 host = \"unix:///run/user/<gitlab-runner-user>/docker.sock\" [runners.cache] [runners.cache.s3] [runners.cache.gcs]\n\nApply the following overrides to the code_quality job created by the template:\n\ncode_quality: services: variables: DOCKER_SOCKET_PATH: /run/user/997/docker.sock tags: - cq-rootless\n\nCode Quality now runs in standard Docker mode and rootless.\n\nThe same configuration is required if your goal is to use rootless Podman to run Docker with code quality. Make sure to replace /run/user/<gitlab-runner-user>/docker.sock with the correct podman.sock path in your system, for example: /run/user/<gitlab-runner-user>/podman/podman.sock.\n\nDisable Code Quality\n\nThe code_quality job doesn’t run if the $CODE_QUALITY_DISABLED CI/CD variable is present. For more information about how to define a variable, see GitLab CI/CD variables.\n\nTo disable Code Quality, create a custom CI/CD variable named CODE_QUALITY_DISABLED, for either:\n\nThe whole project.\n\nA single pipeline.\n\nCustomizing scan settings\n\nThe Code Quality scan settings can be changed using CI/CD variables in .gitlab-ci.yml.\n\nTo configure the Code Quality job:\n\nDeclare a job with the same name as the Code Quality job, after the template’s inclusion.\n\nSpecify additional keys in the job’s stanza.\n\nFor an example, see Download output in HTML format.\n\nAvailable CI/CD variables\n\nCode Quality can be customized by defining available CI/CD variables:\n\nCI/CD variable Description CODECLIMATE_DEBUG Set to enable Code Climate debug mode. CODECLIMATE_DEV Set to enable --dev mode which lets you run engines not known to the CLI. CODECLIMATE_PREFIX Set a prefix to use with all docker pull commands in CodeClimate engines. Useful for offline scanning. For more information, see Use a private container registry. CODECLIMATE_REGISTRY_USERNAME Set to specify the username for the registry domain parsed from CODECLIMATE_PREFIX. CODECLIMATE_REGISTRY_PASSWORD Set to specify the password for the registry domain parsed from CODECLIMATE_PREFIX. CODE_QUALITY_DISABLED Prevents the Code Quality job from running. CODE_QUALITY_IMAGE Set to a fully prefixed image name. Image must be accessible from your job environment. ENGINE_MEMORY_LIMIT_BYTES Set the memory limit for engines. Default: 1,024,000,000 bytes. REPORT_STDOUT Set to print the report to STDOUT instead of generating the usual report file. REPORT_FORMAT Set to control the format of the generated report file. Either json or html. SOURCE_CODE Path to the source code to scan. Must be the absolute path to a directory where cloned sources are stored. TIMEOUT_SECONDS Custom timeout per engine container for the codeclimate analyze command. Default: 900 seconds (15 minutes)\n\nOutput\n\nCode Quality outputs a report containing details of issues found. The content of this report is processed internally and the results shown in the UI. The report is also output as a job artifact of the code_quality job, named gl-code-quality-report.json. You can optionally output the report in HTML format. For example, you could publish the HTML format file on GitLab Pages for even easier reviewing.\n\nOutput in JSON and HTML format\n\nTo output the Code Quality report in JSON and HTML format, you create an additional job. This requires Code Quality to be run twice, once each for file format.\n\nTo output the Code Quality report in HTML format, add another job to your template by using extends: code_quality:\n\nBoth the JSON and HTML files are output as job artifacts. The HTML file is contained in the artifacts.zip job artifact.\n\nOutput in only HTML format\n\nTo download the Code Quality report in only HTML format, set REPORT_FORMAT to html, overriding the default definition of the code_quality job.\n\nThe HTML file is output as a job artifact.\n\nUse Code Quality with merge request pipelines\n\nThe default Code Quality configuration does not allow the code_quality job to run on merge request pipelines.\n\nTo enable Code Quality to run on merge request pipelines, overwrite the code quality rules, or workflow: rules, so that they match your current rules.\n\nFor example:\n\nUse a private container image registry\n\nUsing a private container image registry can reduce the time taken to download images, and also reduce external dependencies. You must configure the registry prefix to be passed down to CodeClimate’s subsequent docker pull commands for individual engines, because of the nested method of container execution.\n\nThe following variables can address all of the required image pulls:\n\nCODE_QUALITY_IMAGE: A fully prefixed image name that can be located anywhere accessible from your job environment. GitLab container registry can be used here to host your own copy.\n\nCODECLIMATE_PREFIX: The domain of your intended container image registry. This is a configuration option supported by CodeClimate CLI. You must:\n\nInclude a trailing slash (/).\n\nNot include a protocol prefix, such as https://.\n\nCODECLIMATE_REGISTRY_USERNAME: An optional variable to specify the username for the registry domain parsed from CODECLIMATE_PREFIX.\n\nCODECLIMATE_REGISTRY_PASSWORD: An optional variable to specify the password for the registry domain parsed from CODECLIMATE_PREFIX.\n\nThis example is specific to GitLab Code Quality. For more general instructions on how to configure DinD with a registry mirror, see Enable registry mirror for Docker-in-Docker service.\n\nRequired images\n\nThe following images are required for the default .codeclimate.yml:\n\ncodeclimate/codeclimate-structure:latest\n\ncodeclimate/codeclimate-csslint:latest\n\ncodeclimate/codeclimate-coffeelint:latest\n\ncodeclimate/codeclimate-duplication:latest\n\ncodeclimate/codeclimate-eslint:latest\n\ncodeclimate/codeclimate-fixme:latest\n\ncodeclimate/codeclimate-rubocop:rubocop-0-92\n\nIf you are using a custom .codeclimate.yml configuration file, you must add the specified plugins in your private container registry.\n\nUse DockerHub with authentication\n\nYou can use DockerHub as an alternate source of the Code Quality images.\n\nPrerequisites:\n\nAdd the username and password as protected CI/CD variables in the project.\n\nTo use DockerHub, configure the following variables in the .gitlab-ci.yml file:\n\nCODECLIMATE_PREFIX\n\nCODECLIMATE_REGISTRY_USERNAME\n\nCODECLIMATE_REGISTRY_PASSWORD\n\nExample:\n\nUse the Dependency Proxy\n\nYou can use a Dependency Proxy to reduce the time taken to download dependencies.\n\nPrerequisites:\n\nDependency Proxy enabled in the project’s group.\n\nTo reference the Dependency Proxy, configure the following variables in the .gitlab-ci.yml file:\n\nCODE_QUALITY_IMAGE\n\nCODECLIMATE_PREFIX\n\nCODECLIMATE_REGISTRY_USERNAME\n\nCODECLIMATE_REGISTRY_PASSWORD\n\nFor example:\n\nImplement a custom tool\n\nYou can integrate a custom tool into GitLab to provide Code Quality reports.\n\nThe Code Quality report artifact JSON file must contain an array of objects with the following properties:\n\nName Description description A description of the code quality violation. check_name A unique name representing the static analysis check that emitted this issue. fingerprint A unique fingerprint to identify the code quality violation. For example, an MD5 hash. severity A severity string (can be info, minor, major, critical, or blocker). location.path The relative path to the file containing the code quality violation. location.lines.begin or location.positions.begin.line The line on which the code quality violation occurred.\n\nTo implement a custom Code Quality tool:\n\nDefine a job in your .gitlab-ci.yml file that generates the Code Quality report artifact.\n\nConfigure the tool to generate the Code Quality report artifact as a JSON file that implements a subset of the Code Climate spec.\n\nExample:\n\nCode Quality combines the results from all jobs in a pipeline into a single gl-code-quality-report.json file. As a result, multiple individual tools can be used in a pipeline, either alongside, or in place of, the supported Code-Quality.gitlab-ci.yml template.\n\nHere is an example that returns ESLint output in the necessary format:\n\nUsing Analysis Plugins\n\nCode Quality functionality can be extended by using Code Climate Analysis Plugins.\n\nFor example, to use the SonarJava analyzer:\n\nAdd a file named .codeclimate.yml to the root of your repository\n\nAdd the enablement code for the plugin to the root of your repository to the .codeclimate.yml file:\n\nversion: \"2\" plugins: sonar-java: enabled: true\n\nThis adds SonarJava to the plugins: section of the default .codeclimate.yml included in your project.\n\nChanges to the plugins: section do not affect the exclude_patterns section of the default .codeclimate.yml. See the Code Climate documentation on excluding files and folders for more details.\n\nUsing Code Quality in Kubernetes and OpenShift\n\nYou must set up Docker in a Docker container (Docker-in-Docker) to use Code Quality. The Kubernetes executor supports Docker-in-Docker.\n\nTo ensure Code Quality jobs can run on a Kubernetes executor:\n\nIf you’re using TLS to communicate with the Docker daemon, the executor must be running in privileged mode. Additionally, the certificate directory must be specified as a volume mount.\n\nIt is possible that the DinD service doesn’t start up fully before the Code Quality job starts. This is a limitation documented in Troubleshooting the Kubernetes executor. To resolve the issue, use before_script to wait for the Docker daemon to fully boot up. For an example, see the configuration in the .gitlab-ci.yml file below.\n\nKubernetes\n\nTo run Code Quality in Kubernetes:\n\nThe Docker in Docker service must be added as a service container in the config.toml file.\n\nThe Docker daemon in the service container must listen on a TCP and UNIX socket, as both sockets are required by Code Quality.\n\nThe Docker socket must be shared with a volume.\n\nDue to a Docker requirement, the privileged flag must be enabled for the service container.\n\nTo ensure that you use the overlay2 storage driver, which offers the best overall performance:\n\nSpecify the DOCKER_HOST that the Docker CLI communicates with.\n\nSet the DOCKER_DRIVER variable to empty.\n\nUse the before_script section to wait for the Docker daemon to fully boot up. Since GitLab Runner v16.9, this can also be done by just setting the HEALTHCHECK_TCP_PORT variable.\n\nOpenShift\n\nFor OpenShift, you should use the GitLab Runner Operator. To give the Docker daemon in the service container permissions to initialize its storage, you must mount the /var/lib directory as a volume mount.\n\nTo configure permissions for the Docker daemon,\n\nCreate a file called config.toml with the configuration provided below. This configuration will be used to customized GitLab Runner generated config.toml:\n\nSet the custom configuration to your runner.\n\nOptional. Attach a privileged service account to the build Pod. This depends on your OpenShift cluster setup:\n\noc create sa dind-sa oc adm policy add-scc-to-user anyuid -z dind-sa oc adm policy add-scc-to-user -z dind-sa privileged\n\nSet the permissions in the [runners.kubernetes] section.\n\nSet the job definition stays the same as in Kubernetes case:\n\ninclude: - template: Code-Quality.gitlab-ci.yml code_quality: services: [] variables: DOCKER_HOST: tcp://dind:2375 DOCKER_DRIVER: \"\" before_script: - while ! docker info > /dev/null 2>&1; do sleep 1; done\n\nVolumes and Docker storage"
    }
}