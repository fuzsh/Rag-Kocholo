{
    "id": "dbpedia_8305_1",
    "rank": 52,
    "data": {
        "url": "https://www.simonsfoundation.org/flatiron/software/",
        "read_more_link": "",
        "language": "en",
        "title": "Software",
        "top_image": "https://www.simonsfoundation.org/app/themes/simonsfoundation/favicon.svg",
        "meta_img": "https://www.simonsfoundation.org/app/themes/simonsfoundation/favicon.svg",
        "images": [
            "https://simonsfoundation.imgix.net/wp-content/uploads/2021/06/20171021/aLENS_800x400-1.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20133111/Astrometry.net_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/08/20133013/AFQMC-library_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2024/01/22120108/BridgeStan_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/26100558/CCN-Caiman-800x400-1.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/26100558/CCN-Caiman-800x400-1.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/13161725/Flatiron-Institute-CCA%402x.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2020/09/20132814/cufiNUFFT_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/06/20132740/DAFT_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20132653/DeepSEA_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/08/20132546/emcee_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/01101902/Exp_CCA_800x400.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/09/20132503/Fast-sinc-transform-libraries_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/09/20132401/FFT-accelerated-Interpolation-based-t-SNE_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2022/07/27153117/Figurl_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20132310/fiNUFFT_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2019/11/20132223/FFM3D_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20122253/FNTM_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2022/07/27120531/Gala_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/13161725/Flatiron-Institute-CCA%402x.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20122159/GIANT_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20122044/HumanBase_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20122015/IMP-2.0_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/12/20121114/IronClust_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20121033/ISO-Split_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120947/ITENSOR_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2022/07/27154445/Kachery_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120712/KNN-Impute_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/20141610/Flatiron-Institute-CCB%402x-1.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/08/01101553/Mesa_CCA_800x400.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120634/MountainSort-MountainLab_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120534/Nano-Dissection_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2024/05/28115954/NEMOS_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120859/KNet_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2020/01/29145156/octopus-graphic.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/05/30120220/Plenoptic_CCN_800x400.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/13161725/Flatiron-Institute-CCA%402x.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/11/26100818/CCN-Pynapple_800x400.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2022/07/27154230/RealNeuralNetworks_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/05/15115006/Riccati_CCM_800x400.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/20141610/Flatiron-Institute-CCB%402x-1.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/09/20141610/Flatiron-Institute-CCB%402x-1.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120437/SEEK_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2022/07/27122010/SkellySim_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120401/Sliepnir_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2019/11/20120307/SpikeForest_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2023/04/03164849/Stan-Software.png?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/10/20120223/Starry_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2021/06/20120138/STKFMM_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20120032/TRIQs_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90",
            "https://simonsfoundation.imgix.net/wp-content/uploads/2018/07/20115926/URSA-HD_800x400.jpg?auto=format&w=589&h=330&fit=crop&q=90"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Software on Simons Foundation",
        "meta_lang": "en",
        "meta_favicon": "/app/themes/simonsfoundation/favicon.svg",
        "meta_site_name": "Simons Foundation",
        "canonical_link": "https://www.simonsfoundation.org/flatiron/software/",
        "text": "We are building an “astrometry engine” to create correct, standards-compliant astrometric meta data for every useful astronomical image ever taken, past and future, in any state of archival disarray. The astrometry engine will take any image and return the astrometry world coordinate system (WCS)—ie, a standards-based description of the (usually nonlinear) transformation between image coordinates and sky coordinates—with absolutely no “false positives” (but maybe some “no answers”). It will do its best, even when the input image has no—or totally incorrect—meta-data. We intend to install the engine for real-time operation on the web, at observatories, at plate-scanning projects, and at data archives.\n\nRecent advances in calcium imaging acquisition techniques are creating datasets of the order of Terabytes/week. Memory and computationally efficient algorithms are required to analyze in reasonable amount of time terabytes of data. This project implements a set of essential methods required in the calcium imaging movies analysis pipeline. Fast and scalable algorithms are implemented for motion correction, movie manipulation, and source and spike extraction. CaImAn also contains some routines for the analyisis of behavior from video cameras. In summary, CaImAn provides a general purpose tool to handle large movies, with special emphasis on tools for two-photon and one-photon calcium imaging and behavioral datasets.\n\nRecent advances in calcium imaging acquisition techniques are creating datasets of the order of Terabytes/week. Memory and computationally efficient algorithms are required to analyze in reasonable amount of time terabytes of data. This project implements a set of essential methods required in the calcium imaging movies analysis pipeline. Fast and scalable algorithms are implemented for motion correction, movie manipulation, and source and spike extraction. CaImAn also contains some routines for the analyisis of behavior from video cameras. In summary, CaImAn provides a general purpose tool to handle large movies, with special emphasis on tools for two-photon and one-photon calcium imaging and behavioral datasets.\n\ncelerite is a library for fast and scalable Gaussian Process (GP) Regression in one dimension with implementations in C++, Python, and Julia. The Python implementation is the most stable and it exposes the most features but it relies on the C++ implementation for computational efficiency. This documentation won’t teach you the fundamentals of GP modeling but the best resource for learning about this is available for free online: Rasmussen & Williams (2006).\n\nDaft is a Python package that uses matplotlib to render pixel-perfect probabilistic graphical models for publication in a journal or on the internet. With a short Python script and an intuitive model-building syntax you can design directed (Bayesian Networks, directed acyclic graphs) and undirected (Markov random fields) models and save them in any formats that matplotlib supports (including PDF, PNG, EPS and SVG).\n\nemcee is an MIT licensed pure-Python implementation of Goodman & Weare’s Affine Invariant Markov chain Monte Carlo (MCMC) Ensemble sampler and these pages will show you how to use it. This documentation won’t teach you too much about MCMC but there are a lot of resources available for that (try this one). We also published a paper explaining the emcee algorithm and implementation in detail.\n\nFast sinc transform libraries which compute sums of the sinc and sinc2 kernels between N arbitrary points in 1, 2, or 3 dimensions. This has applications in MRI and band-limited function approximation. The naive cost is O(N2) whereas our algorithm is quasi-linear in N. Written by our 2017 summer intern Hannah Lawrence.\n\nFFT-accelerated interpolation-based t-SNE (FIt-SNE) is an efficient implementation of t-SNE (stochastic neighborhood embedding) for dimensionality reduction and visualization of high dimensional datasets. This code is able to perform 1000 iterations of t-SNE on one million data points in under 2 minutes on a desktop, which is many times faster than any other existing code. Written by Manas Rachh with collaborators at Yale.\n\nFigurl lets you use Python to generate shareable figURLs (permalinks) to interactive visualizations. With minimal configuration, these can be generated from any computer with access to the internet. Data objects required for the visualization are stored in kachery-cloud and are referenced by content-address strings. Domain-specific visualization plugins are also stored in the cloud and are developed using ReactJS. The central website, figurl.org, pairs the visualization plugin with the data object to create the shareable interactive views.\n\nFINUFFT is a set of libraries to compute efficiently three types of nonuniform fast Fourier transform (NUFFT) to a specified precision, in one, two, or three dimensions, on a multi-core shared-memory machine. The library has a very simple interface, does not need any precomputation step, is written in C++ (using OpenMP and FFTW), and has wrappers to C, fortran, MATLAB, octave, and python. As an example, given M arbitrary real numbers xj and complex numbers cj, with j=1,…,M, and a requested integer number of modes N, the 1D type-1 (aka “adjoint”) transform evaluates the N numbers.\n\nFMM3D is a set of libraries to compute N-body interactions governed by the Laplace and Helmholtz equations, to a specified precision, in three dimensions, on a multi-core shared-memory machine. The 3D fast multipole method evaluates potentials (and gradients, etc) at a large number of targets due to a large number of sources, in linear or quasi-linear time. Our implementation exploits efficient plane wave expansions, SIMD-accelerated kernel evaluations, and multi-threading.\n\nTissue-specific Interactions: FNTM leverages a tissue-specific gold standard to automatically up-weight datasets relevant to a tissue from a large data compendium of diverse tissues and cell-types. The resulting functional networks accurately capture tissue-specific functional interactions.\n\nMulti-tissue Analysis: Beyond questions pertaining to the role of single genes in single tissues, FNTM also enables examination of changes in gene function across tissues on a broad scale. Users can compare a gene’s functional interaction in different tissues by selecting the relevant tissues in the dropdown menu.\n\nGalactic Dynamics is the study of the formation, history, and evolution of galaxies using the orbits of objects — numerically-integrated trajectories of stars, dark matter particles, star clusters, or galaxies themselves. Gala is an Astropy-affiliated Python package that aims to provide efficient tools for performing common tasks needed in Galactic Dynamics research. Much of this code uses Python for flexible, user-friendly interfaces that interact with wrappers around low-level code (primarily C) to enable fast computations. Common operations include gravitational potential and force evaluations, orbit integrations, dynamical coordinate transformations, and computing chaos indicators for nonlinear dynamics. Gala heavily uses the units and astronomical coordinate systems defined in the Astropy core package.\n\nTissue-specific Interactions: GIANT leverages a tissue-specific gold standard to automatically up-weight datasets relevant to a tissue from a large data compendium of diverse tissues and cell-types. The resulting functional networks accurately capture tissue-specific functional interactions.\n\nMulti-tissue Analysis: Beyond questions pertaining to the role of single genes in single tissues, GIANT also enables examination of changes in gene function across tissues on a broad scale. Users can compare a gene’s functional interaction in different tissues by selecting the relevant tissues in the dropdown menu.\n\nNetWAS Analysis: GIANT can effectively reprioritize functional associations from a genome-wide association study (GWAS) and potentially identify additional disease-associated genes. The approach, named NetWAS, can be applied to any GWAS study, and does not require that the phenotype or disease have any known associated genes.\n\nISO-SPLIT is an efficient clustering algorithm that handles an unknown number of unimodal clusters in low to moderate dimension, without any user-adjustable parameters. It is based on repeated tests for unimodality—using isotonic regression and a modified Hartigan dip test—applied to 1D projections of pairs of putative clusters. It handles well non-Gaussian clusters of widely varying densities and populations, and in such settings has been shown to outperform K-means variants, Gaussian mixture models, and density-based methods.\n\nThis repository contains an efficient single-threaded implementation in C++, with a MATLAB/MEX interface.\n\nIt was invented and coded by Jeremy Magland, with contributions to the algorithm and tests by Alex Barnett, at SCDA/Flatiron Institute.\n\nThe ITensor library supports the productive development of robust and efficient software based on tensor networks. The innovative design of the ITensor library lets users focus on the connectivity of tensor networks instead of lower-level considerations, and is modeled on tensor diagram notation. ITensor has a multi-layered design including basic dense tensors; sparse tensor types; sophisticated handling of quantum number symmetries; and high-level algorithms for matrix product states.\n\nIn addition to providing ongoing support for ITensor and its users, there is a major effort at CCQ to continue expanding the scope of ITensor to make handling complex quantum models easier and to continue incorporating the latest algorithmic developments and tensor network formats.\n\nKachery-cloud is a network for sharing scientific data files, live feeds, mutable data and calculation results between lab computers and browser-based user interfaces. Resources are organized into projects which are accessed via registered Python clients. Using simple Python commands you can store files, data objects, mutables or live feeds, and then retrieve or access these on a remote machine (or in a browser via JavaScript) by referencing universal URI strings. In the case of static content, URIs are essentially content hashes, thus forming a content-addressable storage database. While the primary purpose of kachery-cloud at this time is to support figurl, it can also be used independently in collaborative scientific research workflows and for improving scientific reproducibility and dissemination.\n\nDespite its power and versatility, the Rosetta software suite struggles to take full advantage of modern computing hardware. Masala is a set of C++ libraries under development in the Biomolecular Design Group that are intended to replace much of the functionality of Rosetta, and to harness modern massively parallel computing hardware (CPUs, GPUs or FPGAs), or current and near-future generation quantum computers (quantum annealers or gate-based systems) for NP-hard optimization problems. Masala’s versatile plugin system will also permit third parties to develop specialized molecular modelling protocols. Intended for use either as a support library for other software (such as Rosetta) or as a standalone set of applications, we plan to release Masala as free and open-source software in the near future.\n\nMESA is a suite of open-source, robust, efficient, thread-safe libraries extensively used in computational stellar astrophysics. Its wide-ranging capabilities allow the simulation of diverse stellar evolution scenarios, from low-mass to massive stars, including advanced evolutionary stages and binary interactions. It uses adaptive mesh refinement and sophisticated timestep controls and supports shared memory parallelism based on OpenMP. State-of-the-art modules provide equations of state, opacity, nuclear reaction rates, element diffusion data, and atmosphere boundary conditions. Each module is constructed as a separate Fortran 95 library with its own explicitly defined public interface to facilitate independent development.\n\nMountainSort is spike sorting software developed by Jeremy Magland, Alex Barnett, and Leslie Greengard at the Center for Computational Biology, Flatiron Institute in close collaboration with Jason Chung and Loren Frank at UCSF department of Physiology. MountainSort is a plugin package to MountainLab, a general framework for scientific data analysis, sharing, and visualization.\n\nMountainLab is data processing, sharing and visualization software for scientists. It is built around MountainSort, a spike sorting algorithm, but is designed to more generally applicable.\n\nNetKet is an open-source project delivering advanced methods for the study of many-body quantum systems with artificial neural networks and machine learning techniques. It is the first open-source platform supporting collaborative developments in the field and aims to be a robust yet highly responsive reference implementation for both consolidated and new, more experimental, techniques.\n\nOne of the main features of this software is the ability to find the ground state of interacting Hamiltonians using neural network–based ansatz states for the many-body wave function. Because of the modular infrastructure of the library, it is possible to highly customize most of its components. For example, changing Hamiltonians, observables and other problem-dependent quantities is meant to be easy and does not require an in-depth knowledge of programming languages.\n\nTo stimulate a large-scale conceptual and practical development of the software, NetKet has introduced a series of “Challenges” tasks, to be tackled by researchers worldwide.\n\nOctopus is quantum mechanics package aimed at the ab initio virtual experimentation on an ever-increasing range of system types that enables a reliable and accurate simulation of light-induced changes in the physical and chemical properties of complex systems. The first principles real-space-based Octopus project provides an unique framework to describe non-equilibrium phenomena in molecular complexes, low dimensional materials, and extended systems by accounting for electronic, ionic, and photon quantum mechanical effects within a generalized time-dependent density functional theory framework (TDDFT) and beyond. The Octopus package enables the simulation and characterization spatial and time resolved spectroscopies, ultrafast phenomena in molecules and materials, and new emergent states of mater (QED-materials and QED-chemistry).\n\n`plenoptic` is a python library for model-based stimulus synthesis. It provides tools to help researchers understand their model by synthesizing novel informative stimuli, which help build intuition for what features the model ignores and what it is sensitive to. These synthetic images can then be used in future perceptual or neural experiments for further investigation.\n\nPynapple is a light-weight python library for neurophysiological data analysis. The goal is to offer a versatile set of tools to study typical data in the field, i.e. time series (spike times, behavioral events, etc.) and time intervals (trials, brain states, etc.). It also provides users with generic functions for neuroscience such as tuning curves and cross-correlograms.\n\nDue to the string-like nature of neurons and blood vessels, they could be abstracted as curved tubes with center lines and radii. This representation could be used for morphological analysis, such as path length and branching angle. Given an accurate voxel segmentation, the computation of object centerlines and radii is called skeletonization. RealNeuralNetworks.jl is developed to do that. Unlike most related packages, it combines the synaptic connectivity graph with morphological features and could be used to explore the relationship between synaptic connectivity and morphology. Recently, a new arising programing language, called Julia, is getting popular in data science. RealNeuralNetworks.jl is a Julia package and the algorithms are written from scratch for less dependency and efficiency.\n\nRiccati is an efficient numerical solver developed for a class of ordinary differential equations whose solution may exhibit extremely quick oscillations. Standard routines available from scientific computing libraries typically struggle with these types of equations: their runtime grows as the oscillation frequency. Riccati can achieve a frequency-independent (constant) runtime. The package is written in Python, complete with documentation, tests, and interactive examples. It implements the robust algorithm described in Agocs & Barnett (2022), which is able to switch between two different numerical methods on-the-fly, adapting to the behavior of the solution, as well as choose its own stepsize and other parameters to achieve a user-specified accuracy.\n\nFor over twenty years, the Rosetta software suite has been one of the foremost software packages for modeling, docking, designing, and predicting structures of proteins built from the 20 canonical amino acid building-blocks. Our work has expanded the palette of building-blocks that can be accurately modelled in Rosetta and has allowed us to produce mixed-chirality peptide macrocycles targeting a number of proteins of medicinal relevance.\n\nA major limitation of conventional macromolecular modelling approaches is the use of force fields to compute energies. Although force fields are fast, they are highly approximate, and must be tuned and calibrated for a particular set of chemical building-blocks. Quantum chemistry methods offer far greater accuracy and generality. Long thought to be too slow for macromolecular modelling applications, recent work in semi-empirical methods and in fragment molecular orbital methods has brought quantum chemistry calculations performed on large macromolecules into the realm of computational tractability. RosettaQM is a project started in the Biomolecular Design Group that permits Rosetta to carry out quantum mechanical calculations in the context of any design, docking or structure prediction protocol. Development is ongoing.\n\nSEEK is a computational gene co-expression search engine. SEEK provides biologists with a way to navigate the massive human expression compendium that now contains thousands of expression datasets. SEEK returns a robust ranking of co-expressed genes in the biological area of interest defined by the user’s query genes. In the meantime, it also prioritizes thousands of expression datasets according to the user’s query of interest. The unique strengths of SEEK include its support for multi-gene query and cross-platform analysis, as well as its rich visualization features.\n\nSleipnir is a C++ library enabling efficient analysis, integration, mining, and machine learning over genomic data. This includes a particular focus on microarrays, since they make up the bulk of available data for many organisms, but Sleipnir can also integrate a wide variety of other data types, from pairwise physical interactions to sequence similarity or shared transcription factor binding sites. All analysis is done with attention to speed and memory usage, enabling the integration of hundreds of datasets covering tens of thousands of genes. In addition to the core library, Sleipnir comes with a variety of pre-made tools, providing solutions to common data processing tasks and examples to help you use Sleipnir in your own programs. Sleipnir is free, open source, fully documented, and ready to be used by itself or as a component in your computational biology analyses.\n\nSpikeForest is a reproducible, continuously updating platform which benchmarks the performance of spike sorting codes across a large curated database of electrophysiological recordings with ground truth. It consists of this website for presenting our up-to-date findings, a Python package which contains the tools for running the SpikeForest analysis, and an expanding collection of electrophysiology recordings with ground-truth spiking information.\n\nStan is an open-source platform for statistical modeling and high-performance statistical computation. Users rely on Stan for statistical modeling, data analysis and prediction in the social, biological and physical sciences, engineering, business, medicine, finance, education and sports. Users specify log density functions in Stan’s probabilistic programming language and get full Bayesian statistical inference with MCMC sampling (NUTS, HMC), approximate Bayesian inference with variational inference (ADVI), and penalized maximum likelihood estimation with optimization and Laplace approximation (L-BFGS).Stan’s math library provides differentiable real and complex special functions, probability functions and linear algebra using reverse- and forward-mode automatic differentiation. Stan has interfaces supporting statistical workflow in R, Python and Julia.\n\nThe TRIQS (Toolbox for Research in Interacting Quantum Systems) project provides a Python/C++ library of basic components to implement the cutting-edge algorithms in the Quantum Many-Body problem, with a focus on Quantum Embedding and Quantum Monte Carlo methods. The project also includes a series of applications, e.g. state-of-the-art quantum impurity solvers, and an interface to electronic structure codes for DFT+DMFT computations.\n\nThis is now the home of URSA and URSA(HD). Leveraging gene expression profiles of thousands of tissue and disease samples, URSA and URSA(HD) identify distinct molecular signatures of individual tissues and diseases. Submit your gene expression profile to use these molecular signatures and ascertain the tissue and disease signal in your data."
    }
}