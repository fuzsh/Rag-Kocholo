{
    "id": "dbpedia_4519_0",
    "rank": 30,
    "data": {
        "url": "https://stackoverflow.com/questions/28066462/how-many-bits-is-a-word",
        "read_more_link": "",
        "language": "en",
        "title": "How many bits is a \"word\"?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/cdbf214e232f5cf4293ae5b755114bc7?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/a8qUy.jpg?s=64",
            "https://www.gravatar.com/avatar/64b7edfe17165c299d4dd604c631e1cb?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/VrUwT.jpg?s=64",
            "https://www.gravatar.com/avatar/cdbf214e232f5cf4293ae5b755114bc7?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/8168b8a0110d576ea10101744f8902cc?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/32e1aeeac2e58a714d87473a4b056416?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/a-/AOh14Gj7mk2XZmxtCfxzKnUOircJ6O1GePpmxznGtowe=k-s64",
            "https://stackoverflow.com/posts/28066462/ivc/3938?prg=539542ce-98e4-4deb-a0db-37f00a3287df",
            "https://stackoverflow.com/js-false.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-01-21T11:45:27",
        "summary": "",
        "meta_description": "This is from the book Assembly Language Step By Step, Jeff Duntemann:\r\n  Hereâ€™s the quick tour: A bit is a single binary digit, 0 or 1. A byte\n  is 8 bits side by side. A word is 2 bytes side by si...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/28066462/how-many-bits-is-a-word",
        "text": "I'm not familiar with either of these books, but the second is closer to current reality. The first may be discussing a specific processor.\n\nProcessors have been made with quite a variety of word sizes, not always a multiple of 8.\n\nThe 8086 and 8087 processors used 16 bit words, and it's likely this is the machine the first author was writing about.\n\nMore recent processors commonly use 32 or 64 bit words.\n\nIn the 50's and 60's there were machines with words sizes that seem quite strange to us now, such as 4, 9 and 36. Since about the 70's word size has commonly been a power of 2 and a multiple of 8.\n\nOn x86/x64 processors, a byte is 8 bits, and there are 256 possible binary states in 8 bits, 0 thru 255. This is how the OS translates your keyboard key strokes into letters on the screen. When you press the 'A' key, the keyboard sends a binary signal equal to the number 97 to the computer, and the computer prints a lowercase 'a' on the screen. You can confirm this in any Windows text editing software by holding an ALT key, typing 97 on the NUMPAD, then releasing the ALT key. If you replace '97' with any number from 0 to 255, you will see the character associated with that number on the system's character code page printed on the screen.\n\nIf a character is 8 bits, or 1 byte, then a WORD must be at least 2 characters, so 16 bits or 2 bytes. Traditionally, you might think of a word as a varying number of characters, but in a computer, everything that is calculable is based on static rules. Besides, a computer doesn't know what letters and symbols are, it only knows how to count numbers. So, in computer language, if a WORD is equal to 2 characters, then a double-word, or DWORD, is 2 WORDs, which is the same as 4 characters or bytes, which is equal to 32 bits. Furthermore, a quad-word, or QWORD, is 2 DWORDs, same as 4 WORDs, 8 characters, or 64 bits.\n\nNote that these terms are limited in function to the Windows API for developers, but may appear in other circumstances (eg. the Linux dd command uses numerical suffixes to compound byte and block sizes, where c is 1 byte and w is bytes).\n\n\"most convenient block of data\" probably refers to the width (in bits) of the WORD, in correspondance to the system bus width, or whatever underlying \"bandwidth\" is available. On a 16 bit system, with WORD being defined as 16 bits wide, moving data around in chunks the size of a WORD will be the most efficient way. (On hardware or \"system\" level.)\n\nWith Java being more or less platform independant, it just defines a \"WORD\" as the next size from a \"BYTE\", meaning \"full bandwidth\". I guess any platform that's able to run Java will use 32 bits for a WORD."
    }
}