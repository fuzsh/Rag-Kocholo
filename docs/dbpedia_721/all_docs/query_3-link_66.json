{
    "id": "dbpedia_721_3",
    "rank": 66,
    "data": {
        "url": "https://gamedev.stackexchange.com/questions/13650/how-are-bullets-simulated-in-video-games",
        "read_more_link": "",
        "language": "en",
        "title": "How are bullets simulated in video games?",
        "top_image": "https://cdn.sstatic.net/Sites/gamedev/Img/apple-touch-icon@2.png?v=9bca23db2259",
        "meta_img": "https://cdn.sstatic.net/Sites/gamedev/Img/apple-touch-icon@2.png?v=9bca23db2259",
        "images": [
            "https://cdn.sstatic.net/Sites/gamedev/Img/logo.svg?v=c61a0bba5264",
            "https://www.gravatar.com/avatar/47e98f619e6b1fd3c1162253865b6c3b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f5260bd55ffde0c7c950882bde384e77?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0f47d8d088dfa4f8040680fd8f2112fe?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f49c4d1727ec35ea010fe255c9a45bf9?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/655310813a3b9b95f8375b2912d0afe0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9fa51d322613d477fd82330340c46ff3?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6a2aedf092fed3587aeddfd4a38ebaa5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f96817a4958b8414a464a616a178c999?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0c45a01c04479939d009fbe05e65b982?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/96be9ea59dea46616afed434fd07dcf5?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/72615249/picture?type=large",
            "https://www.gravatar.com/avatar/fce0d9caef722d6f158f9c073a62dc80?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/743377ae8fb92234bdbd96aa8243c46c?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/93f2b0dc9334c2a903a14289fae402fc?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/F2hpc.jpg?s=64",
            "https://www.gravatar.com/avatar/8523db48c9eff3f65266f7ec389b2f40?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a114e492bf4577831f97ba7440abaf6c?s=64&d=identicon&r=PG",
            "https://gamedev.stackexchange.com/posts/13650/ivc/f21e?prg=19c48f53-43b0-46ea-b5e1-126a4aad1761"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Uri Uri"
        ],
        "publish_date": "2011-06-14T17:58:14",
        "summary": "",
        "meta_description": "I have been playing games like MW2 recently and, as a programmer, I tend to ask myself how do they make the game so immersive. For example, how to they simulate bullet speed. \r\nWhen an NPC fires a ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/gamedev/Img/favicon.ico?v=7d1a3cf2e788",
        "meta_site_name": "Game Development Stack Exchange",
        "canonical_link": "https://gamedev.stackexchange.com/questions/13650/how-are-bullets-simulated-in-video-games",
        "text": "Most FPS games use raycasting for the actual gameplay; bullets instantly travel and hit the target when fired.\n\nBut most games also employ the use of \"fake\" tracers. Every 3 shots, or some other interval, a tracer will be fired along with the bullet, the tracer will be really fast, but not instantaneous. This is done as a visual effect only, and does not affect the game-play directly, but helps give cues to the shooter, the shootee, and gives bystanders a directional reference to gunshots.\n\nMost games that use these kinds of bullet physics are unrealistic, as there is no ricochets, no bullet fragments, and if there is any penetration its usually linear.\n\nSome games, such as ARMA II, STALKER(entire series) use more realistic bullet physics with travel time, ricochets, and penetration with deflection angles. I believe these systems are using raycasting, but with a limit that is determined by the speed of the bullet. With these games the muzzle velocity can be realistic as in ARMA II, or looks about right as in STALKER.\n\nI greatly prefer having realistic bullet physics, as guns fire projectiles, not lasers.\n\nFor bullets they generally don't bother simulating the bullet actually traveling through the air and simply put a bullet hole on the target the instant it's fired. Other things like rockets are slower* and the game actually shows them traveling through the air.\n\nAt the short distances the bullets will be traveling, along with the time lapse between frames, they would get from the shooter to the target between or within 1 frame anyway.\n\n*That is, slower than rockets in real life, in order for the player to see them flying through the air.\n\nI wrote the bullet code for PlanetSide. We had a few 'hitscan' projectiles, but mostly simulated the projectiles as best we could given the CPU constraints and the huge number of bullets in play at any time.\n\nIn the case of hitscan, impact is determined in the same frame as the input is received, often using a single raycast. This is appropriate for weapons such as lasers or other extremely fast projectiles. We did hitscan by just cranking the initial velocity on the projectile so high it would cross the game board in a single tick.\n\nNon hitscan bullets are ticked, either to the graphics frame time or to a fixed timestep, with computations for acceleration (think rockets), gravity, air friction, guidance (think heat seeking projectiles) etc applied. The objective being to generate the projectile's terminal position for the timestep. Once the start and end points are established, one or more rays can be cast to approximate the flight path and detect any collisions that would have occurred during flight.\n\nIn both hitscan and non hitscan projectiles, what happens at a collision depends on your projectile properties and the surface you impact. For example, you might hit a hard surface, in which case you might check your bounce count and either adjust the position and velocity per a reflection, or detonate the projectile if you've hit your max bounce count. In this system, a rocket just has a max bounce count of 0. You might hit a soft surface and then check your penetrating power to determine if the projectile should continue through the material, etc.\n\nIt was fun code to write. Also, it's super useful to write good debug visualization of what's going on so you can inspect flight paths, events, etc visually.\n\nIt depends on the game and the level of accuracy/realism.\n\nSynchronizing shooting and damage models in multiplayer settings is pretty difficult since you need to accurately determine where and when exactly a bullet was fired, whether it hit a target, and whether anything else passed through the path.\n\nTherefore, I suspect that when possible game designers simplify things by either treating some shots as instantaneous (so that you only need to consider the location of everyone at a single moment in time), or by restricting the range of the bullet. Luckily, this often corresponds to real-life physics. For instance, sniper rifles fire high velocity rounds.\n\nMany games can simulate a multistep multi-snapshot path of a slow moving object (such as artillery, bombs, marker rounds, etc.) but that is very costly and synchronization issues are more common, leading to funny youtube videos.\n\nAnother concern is with games that maintain separate smaller \"environments\" (e.g., each room is simulated separately) to create an illusion of a larger space. In these cases, things within the boundaries of a \"room\" may be simulated correctly so that everyone in the room is updated about the series of transitions in space that the bullet makes, but others outside that environment are not.\n\nIt depends on the implementation but I know that the Source Engine didn't use physical bullets (projectile objects) at all, they just did a ray cast from player to target with a random \"hit zone\" circle (larger or smaller radii depended on how fast the weapon fired and if the player was holding the fire button down) which its center was the point that the player was aiming, then after determining the actual ray cast from the player to the randomly determined point and depending on other factors (like bullet \"weight\" and muzzle velocity (all internal numbers), object hit, etc) the ray cast was cast through multiple objects or until it hit terrain.\n\nOn the flip side, the Torque 3D Engine DID use actual projectile objects and the designer could affect their individual speeds, mass, and gravity modifiers. All the engine did was update the values every 32 milliseconds.\n\nEDIT\n\nIn addition to using projectile objects, the Torque 3D Engine also allowed for the use of ray casts as an alternative. (I've made several games where the \"projectile\" is actually a particle effect that has none of the support that projectile objects did so a ray cast was required.)\n\nActually many games use a gpu rendering hit test algorithm. Here's the basic way it works:\n\n1) Off-screen create a rendering of the current view where all terrain is black, and every character is a non-black color 2) Get the color of the pixel under the cross hair 3) If it's non-black lookup the color->player mapping and apply a hit to that target.\n\nThis method has been used for years in games mostly because it's pixel perfect. If a single pixel of the player's hat is sticking out from behind a wall, you can hit him. I.E. if you can see it, you can hit it. This type of precision is next to impossible with simple ray casting techniques. And secondly, this sort of test is extremely fast and can be performed on the GPU.\n\nSome games no doubt do use realistic bullet physics, taking into account bullet travel time and drop, but I'm guessing most games don't, at least for NPCs.\n\nFor a game that does direct bullet travel (no drop) that's instant, the game traces an imaginary line (vector) from the point of the barrel forward. It then computes what that line intersects with, and registers a bullet \"hit\" at that point. It might be a solid object like a wall where an impact triggers an effect such as a bullet hit decal and a \"puff\" of smoke/debris. It might impact a breakable object causing it to break, or it might impact a physics object and give it a \"kick\". Or of course it might hit the player or another NPC and cause a health hit. Hard core simulations will model the bullet penetrating through walls and trigger a hit effect on the exit side, probably decreasing the bullet's damage upon exit.\n\nJust so NPCs don't have perfect aim, many games add some kind of randomization to the vector to model bullet spread. This is what you'd see in real life, where bullets don't all hit just where you aim but in a pattern centered around the aim spot.\n\nTo visualize the bullet spread, imagine a cone coming out from the gun instead of a straight line (vector). The actual bullet direction is randomized to be somewhere inside this cone. If the shooter is really close to the target, the spread is small and the accuracy high. If the target is far away, the cone adds more spread so it's less likely for the shooter to hit the target.\n\nThis idea of the shot cone can be used to model shooter accuracy (skill), weapon accuracy and other conditions. For example a low level NPC might be given a low accuracy shot cone, whereas a high skilled NPC would have a high level accuracy. A player running with a submachine gun shooting from the hip would have a wide shot cone, which would reduce if they stop running or aim. Sniper rifles would have tighter shot cones by nature than say a pistol.\n\nSpeaking of the Nexuiz source code from the time I took a look, they didn't actually send a 'bullet' object from point A to point B. If I recall correctly, and this is specific to only some weapons - other weapons aren't instant-hit weapons when they're fired, the code looks at where your gun is pointing. If it is aimed at a person (and is an instant-hit weapon) when you click 'fire' then you made a hit.\n\nAlso notable is how Nexuiz had the server-side option of calculating hits on the client or on the server. If you suspect clients are cheating, you can switch to server-side hit calculations in an attempt to help mitigate that.\n\nDon't forget that the framerate versus the speed of the bullet can be a problem, in some cases if you did not coded your physics engine well enough, the bullet can just go through object without hitting it. There is a solution for that matter, which I don't remember very well...\n\nAnyways, I think it can be very problematic to compensate realistic bullets in a multiplayer environment, if not impossible if the latency start being longer than 30 or 50ms.\n\nOne day though, ISP may care a little more about latency and deliver different offers... but without FTTH, it's still a dream...\n\nAcctually, if you look at video replays in Call of Duty you can faintly see an orangeish biped flying through the air to the intended target, and attackinghobo actually does have the right answer to it for the most part.\n\nIf you want a richochet effect like Hobo stated just go play any of the Halo games. If you shoot at a metal wall from a closer position you can see the bullets richocheting off the metal. The sniper in it leaves a trail to where it hits.\n\nRetarted answer finished, I may go back later to fix."
    }
}