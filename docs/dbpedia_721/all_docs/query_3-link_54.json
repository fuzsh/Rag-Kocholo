{
    "id": "dbpedia_721_3",
    "rank": 54,
    "data": {
        "url": "https://github.com/AppliedEnergistics/Applied-Energistics-2/issues/4712",
        "read_more_link": "",
        "language": "en",
        "title": "Quantum Network Bridge breaks with replaced Security Terminal on Chunk loading · Issue #4712 · AppliedEnergistics/Applied-Energistics-2",
        "top_image": "https://opengraph.githubassets.com/97abd749b4e56c3e4757705bc3da716065b51c0973f7681ef4fe841612c231b6/AppliedEnergistics/Applied-Energistics-2/issues/4712",
        "meta_img": "https://opengraph.githubassets.com/97abd749b4e56c3e4757705bc3da716065b51c0973f7681ef4fe841612c231b6/AppliedEnergistics/Applied-Energistics-2/issues/4712",
        "images": [
            "https://avatars.githubusercontent.com/u/1812304?s=80&u=d8e7c04410c5c317e07387b267dc5fabdadfe886&v=4",
            "https://user-images.githubusercontent.com/1812304/92596295-e4c71780-f2a5-11ea-8571-52b3683ce6ff.png",
            "https://avatars.githubusercontent.com/u/151949?s=80&v=4",
            "https://avatars.githubusercontent.com/u/1812304?s=80&u=d8e7c04410c5c317e07387b267dc5fabdadfe886&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=80&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/151949?s=80&v=4",
            "https://avatars.githubusercontent.com/u/1812304?s=80&u=d8e7c04410c5c317e07387b267dc5fabdadfe886&v=4",
            "https://avatars.githubusercontent.com/u/1812304?s=80&u=d8e7c04410c5c317e07387b267dc5fabdadfe886&v=4",
            "https://user-images.githubusercontent.com/1812304/92637569-494f9a00-f2d9-11ea-84a5-ea204cbecf7f.png",
            "https://avatars.githubusercontent.com/u/1261399?s=80&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://user-images.githubusercontent.com/1261399/92640896-4014fc00-f2de-11ea-98a1-b1a67bc17d65.png",
            "https://avatars.githubusercontent.com/u/1261399?s=40&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=40&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=40&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=80&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/36566773?s=40&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=40&u=80f06d1f2b6671d4c1e105a7e25730256b5a1d4a&v=4",
            "https://avatars.githubusercontent.com/u/151949?s=40&v=4",
            "https://avatars.githubusercontent.com/u/1350990?s=40&u=3b687186bec3df7c49335927a206288985ee72b6&v=4",
            "https://avatars.githubusercontent.com/u/17113053?s=40&u=5acd2cbb705d167a2c320becc2551e4ffc9135c8&v=4",
            "https://avatars.githubusercontent.com/u/11086210?s=40&u=f66b4e1711f12f9b739efbcb5a836df20485c3a1&v=4",
            "https://avatars.githubusercontent.com/u/64355028?s=40&u=1519b7f94df4d15665167089224b3de6f9301b26&v=4",
            "https://avatars.githubusercontent.com/in/15368?s=40&v=4",
            "https://avatars.githubusercontent.com/u/151949?s=52&v=4",
            "https://avatars.githubusercontent.com/u/1261399?s=52&v=4",
            "https://avatars.githubusercontent.com/u/1812304?s=52&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Describe the bug Used the latest commit on the master branch: bcee2ec After setting up a Quantum Network Bridge with an security terminal, changing the player who replaced the security terminal and then unloading and loading the chunk ag...",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/AppliedEnergistics/Applied-Energistics-2/issues/4712",
        "text": "* Minor refactoring. Replaced use of reflection with use of functional factory interface (API change). * Crash when someone tries to overwrite existing grid cache implementations. * Removed unused ItemPredicate * Formatting fix * Removed reliance on PartType from code outside of Bootstrapping, and restored ability to group different supported items on Upgrade Card tooltips. * Refactored drive state sync Removed blinking state for now * Hide debug tools from JEI when disabled via config (AppliedEnergistics#4439) * Refactored CableBus to pass the direction directly. * Update MCP mappings * Minor simplification of PartPlacement. * Be more lenient with the return value of BlockItem.tryPlace (it might be CONSUME in future versions). * Fix player id logging. * Changed AEGlassMaterial to Materials Preparation in case we need more to support custom non solid, non opaque, or similar blocks. Removed custom fullSize/opaque blocks in favour of Material * Removed unused code from DriveLedTER * Part type's gone! * Removed unused class. * Enables replicator card to place multiple instances at once. (AppliedEnergistics#4447) * Don't tick debug energy tileentity clientside * Add equals(ItemStack) to IAEItemStack contract. * Fix formatting * Try to fail with missing assets (AppliedEnergistics#4449) * Added a blocktag for movable tile entities with spatial IO. (AppliedEnergistics#4448) `#spatial/whitelist` needs to be explicitly enabled through a config value. `#spatial/blacklist` will always be consider on top of the normal blacklist. * Removed unused storage dimension cap. * Unify the client/server-side shared itemstack registry to avoid over-dependence on the current thread when this class is used. Otherwise if a thread is not correctly detected to be part of the server or client thread groups, a shared item stack from the wrong domain is returned. * Added curseforge task * Removed superfluous IAEStack methods * Updated README.md Removed crafttweaker info. Will be moved to a wiki page when necessary again. Updated API part with the info about github packages and also moved it higher. * Fixes AppliedEnergistics#4453: Avoid using clientside methods serverside. * Changed Javadoc for Upgrade tooltip group * Updated IStorageCell docs to mention int limitations. * Removed deprecated API parts (AppliedEnergistics#4457) * Restored the old PluginLoader as AddonLoader Introduce a new `IAEAddon` interface, which has to be implemented and annotated wit `@AEAddon` to obtain access to our public API. * Removed AEApi Moved all internal access to the internal `Api` class using a new static getter. * Rewrite drive model to support custom cell models (AppliedEnergistics#4459) * Rewrite driver model to support custom cell models Each cell can now register a mapping Item -> ResourceLocation for a custom cell model. Fallback will always be a 1k item cell. * Refactored crafting patterns (AppliedEnergistics#4458) * Deduplicate crafting patterns internals This should save a bit memory for duplicate patterns as well as speed up loading new patterns on reloading chunks. * Encode recipe id in pattern * Use the recipe id directly for looking it up * Slightly refactored how patterns encode whether they are crafting patterns or not. * Renamed PatternHelper. * Added APIs to encode patterns. (AppliedEnergistics#4463) * Removed ICraftingPatternItem. * Renamed isCrafting to isCraftable Co-authored-by: shartte <shartte@users.noreply.github.com> * Fix the alive check for the matter cannon. * P2P Fluid Tunnel Fix * Updated dependencies (AppliedEnergistics#4466) Changed forge to 31.2.31 and also marked it as required version. Changed JEI to 6.0.2.12 for dev usage. * Fixes AppliedEnergistics#4467: Private methods also need to be annotated with @onlyin(Dist.CLIENT) if they use client-side classes. * Fixes creation of entangled singularities. * Do not rely on exceptions for control flow, when the cell has no fuzzy mode. * Fixed formatting. * Added new Cell Rendering to ME Chest (AppliedEnergistics#4464) Moved cell models to origin 0,0,0. Implemented a TER to render cell models/LED in the ME chest as they are rendered in the drive. * Multiblocks sometimes can't be broken because during removal, (AppliedEnergistics#4469) they update their own block-state to display the disconnected state, effectively reversing their own removal. This occurs because the cached block state in the tile entity base class is outdated and doesn't reflect the removal. * Added new japanese translate (AppliedEnergistics#4475) * Added new japanese translate * Do not allow recursive creation of multiblocks. (AppliedEnergistics#4472) * Added a priority to IAEPowerStorage (AppliedEnergistics#4473) Added a priority to IAEPowerStorage * When blocks adjacent to multiblock-capable blocks are updated, (AppliedEnergistics#4474) do not always recalculate existing multiblocks. Only do so, if the adjacent block is either part of the multiblock's bounding box, or if the adjacent block would be a valid part of the multiblock. * Split TickHandler#onTick into more specific event handlers (AppliedEnergistics#4477) * Correctly convert milliseconds to microseconds (AppliedEnergistics#4478) * Disable AO for the Spatial Pylon due to artifacts. * Force cluster-rebuilds on the first detected change, if their bounds do not match. Also use a client-side method to update connected textures for crafting cubes if two previously distinct clusters are connected. Refactored MBCalculator to use generics for type checks and remove more casts. * Fix SortedSet using compare for equals (AppliedEnergistics#4479) Fix SortedSet using compare for equals * Never return null from Widget#getMessage since the narrator will always dereference it, leading to a crash. * Account for empty messages when drawing tooltips. * Fixes AppliedEnergistics#4330: Avoid mutating the input stack (AppliedEnergistics#4481) * Naming improvements * Moved part-related textures from textures/item/part to textures/parts/ and adapted the level emitter item models to use the normal part texture. * Deleted unused matrix frame related documentation images. * Removed unused crafting and fluid terminal models and associated textures. Unified naming for textures used by the fluid terminal. * Moved part textures from parts to part to be consistent with singular naming used in Minecraft (and for the model directory). * Consolidated fluid models to reuse the item counterparts with different textures. * JSON Formatting Fix * Removed several unchecked casts. * Fail faster when something modifies the list of energy providers/requesters while an extract/inject operation is ongoing, since this would lead to ConcurrentModificationExceptions later, without a way of tracking down what caused the modification in the first place. * Started refactoring number entry dialogs to use shared code. * Ported the other number entry dialogs over to the shared widget. * Added labels that specify the unit of power (AE) and the unit of fluid (mB) for the level emitters. * Formatting fixes * Formatting fixes * Create sv_se.json (AppliedEnergistics#4485) * Also test for generated asset cache * Correct link to CurseForge page * Same method name as in superclass leads to ForgeGradle reobf problems. (AppliedEnergistics#4491) Fixes AppliedEnergistics#4490 * Don't use PacketBuffer#readString since it's client-only. (AppliedEnergistics#4489) Fixes AppliedEnergistics#4488 * Use standard mechanics for damaging the quartz knife. (AppliedEnergistics#4494) * Fixes patterns always returning a recipe. (AppliedEnergistics#4495) * Fixes AppliedEnergistics#4468: Default to ae serverside (AppliedEnergistics#4496) * Removed superfluous crash enhancement (AppliedEnergistics#4498) * Remove all maven repos except modmaven (AppliedEnergistics#4501) Also upgrades gradle to 4.10.3 * Moved datagens to appeng.datagen (AppliedEnergistics#4502) * Clear searchfield on rightclick (AppliedEnergistics#4503) * Fixes mouse handling for right-clicks to clear the search box and middle-click for crafting. (AppliedEnergistics#4505) * Fix substitutions not being correctly recognized. (AppliedEnergistics#4507) * Update README.md to reflect that the data generation needs to be run. * Mention spotlessApply. * Fixes AppliedEnergistics#4508: Correctly construct the sparse lists. (AppliedEnergistics#4511) * Fixes AppliedEnergistics#4508: Correctly construct the sparse lists. Also renamed all uncondensed getters to sparse and all condensed to the simple ones. * Apply suggestions from code review Co-authored-by: shartte <shartte@users.noreply.github.com> * Streamlined collapsing the sparse lists * Extracted helper to condense stacks * Sort lists desc by stack size Co-authored-by: shartte <shartte@users.noreply.github.com> * 1.16 port * Compiles again. * Compiles, can get ingame, uses Mixins to work around missing Fork Hooks for structures and custom dimensions. * Organize and clean imports * Fix formatting * Remove xvfb steps as runData should now run headless (AppliedEnergistics#4513) Also run `prepareRunData` in a separate step to avoid a race condition with ForgeGradle writing the generated dependency after it has already written it for `runData` * Updated mappings to 20200723-1.16.1 (AppliedEnergistics#4514) * Limit to 1 gradle worker * Added missing chunk generator registration. * Fix formatting. * Use StringTextComponent.EMPTY * Use BlockPos.toMutable * Fix refmap reference for non-dev deployment. * Ported model dependency changes from Fabric 1.16. Made IChestLid sided. * Fix AppliedEnergistics#4521: Register RecipeTypes. (AppliedEnergistics#4523) * Fix cell models not being loaded. (AppliedEnergistics#4528) * Fixes 4529: Updated IPart to match new ICapabilityProvider (AppliedEnergistics#4534) * Fixes sidedness issues that cropped up with 1.16 (AppliedEnergistics#4533) * Remove client-only methods from ChargerBlock which could potentially create synthetic lambda methods that reference client-only classes (and are not stripped). * Move CraftingMonitor rendering customization out to its own class to circumvent issues with a client-side only lambda method being generated in a common-side class. * The lambda has to be replaced with an explicit method to annotate it with @onlyin. * Unified Parameter-Names for Slots * Fix SkyStone chest model issues that I had introduced back in 1.8. (AppliedEnergistics#4542) This makes the chest 1 pixel higher to restore the look it had in 1.7. Since the skystone chest's texture is a grungy mess, only the most obvious texture problems were fixed, while for the skystone block chest, the look should be close to what it was now. Also introduces caching for the skystone chest's block shape. * Clean up global state for cable render mode (AppliedEnergistics#4539) * Clean up the global state used to hack part interaction into respecting the player's facade render mode. Make the name more indicative of what is actually happening. * Fun. * Minor cleanup. * Fixes NPE on empty tooltips (AppliedEnergistics#4546) * Apply the FE tunnel behaviour to the fluid tunnel (AppliedEnergistics#4545) * Apply the FE tunnel behaviour to the fluid tunnel * Make a second pass to try and get all the requested fill amount sent out to outputs. Co-authored-by: Sebastian Hartte <sebastian@hartte.de> * Revert \"Apply the FE tunnel behaviour to the fluid tunnel (AppliedEnergistics#4545)\" (AppliedEnergistics#4549) This reverts commit 22f5522. * Apply the FE tunnel behaviour to the fluid tunnel (AppliedEnergistics#4550) * Fixes AppliedEnergistics#4551: Bounding box of annihilation planes is too small. * Fixes AppliedEnergistics#4547: Name clash between ITooltip#getWidth, ITooltip#getHeight and Vanilla Widget methods leads to missing methods at runtime, since the implementing methods will be remapped to SRG names, while referees of the interface will try to call the renamed methods by their name in the interface, leading to an AbstractMethodError. (AppliedEnergistics#4557) * Plane Connection Refactor (AppliedEnergistics#4556) * Refactors all plane parts to use a common helper for calculating connections to adjacent planes. Also fixes problems with updating these connections on neighbor updates. * Fix conflicting GuiSync ID. * Slightly refactor PlaneConnectionHelper, and fix an issue where the bounding box was calculated incorrectly by using the wrong up-direction. * Makes formation planes a bit more consistent and less violent. (AppliedEnergistics#4553) * Makes formation planes a bit more consistent and less violent. Items will now have a slower speed when spawning as well as a narrower area to avoid having them glitch into a wall and be teleported around * Removed debug output, added clarifying parenthesis and extracted method. * Fixes various other issues with the formation plane Also removed now useless code Co-authored-by: Sebastian Hartte <sebastian@hartte.de> * Fixes AppliedEnergistics#4559: Use visual bounding box for overlay (AppliedEnergistics#4561) * Added missing @OverRide annotations. * Use the declared power drain for p2p tunnels (AppliedEnergistics#4567) * Move the nether quartz dust tag to the forge namespace and use it instead of AE's internal one. (AppliedEnergistics#4568) * Fix AO lighting for faces not fully snapped to block edges. * Fixes AppliedEnergistics#4571: When not used for displaying localized text, specify Locale.ROOT for toLowerCase/toUpperCase to avoid issues with locale-specific non-ASCII lowercase conversions for ASCII uppercase characters (i.e. turkish lowercase i for uppercase I). (AppliedEnergistics#4573) * Simplify \"unlit\" quad loading and move to Mixins (AppliedEnergistics#4569) * Simplified the UV loader concept: We only need it to make quads \"unlit\" which means that the lighting system is not applied to them. They always render at their full brightness. * More documentation and slight cleanups. * Fixes AppliedEnergistics#4574 by referencing only non-pure fluix crystals in the fluix dust grinder recipe. (AppliedEnergistics#4578) * Fixes AppliedEnergistics#4576: Append the amount to each button (AppliedEnergistics#4580) * Fix Special Model Registration (AppliedEnergistics#4577) * Fixes AppliedEnergistics#4575 by updating Forge (ModelRegistryEvent is a modbus event but was misflagged as not being one). And update Forge because their breaking change breaks our mod. * Update gradle.properties Co-authored-by: yueh <yueh@users.noreply.github.com> * Update src/main/resources/META-INF/mods.toml Co-authored-by: yueh <yueh@users.noreply.github.com> Co-authored-by: yueh <yueh@users.noreply.github.com> * One Spatial Dimension (AppliedEnergistics#4570) * Ported the \"one spatial dimension\" concept from pre-1.15 * Apply lighting updates after moving chunks. Mark world data as dirty when changing it. * Consolidated naming of spatial storage world/dimension. Use server light manager to update lighting info in chunk. * Save last transition information, and add ae2 spatial command to interact with spatial storage. * Formatting fixes. * Improved docs for the origin generation. Inverted condition on when the x/z axis are flipped. Also added a helper to map a plot to a region file * Remove TransitionResult since it's only used in lieu of a boolean. Rework transition to make the checks BEFORE allocating a new cell. * Removed unused imports. Co-authored-by: yueh <yueh@users.noreply.github.com> * Fixes AppliedEnergistics#4583: Confine fluix crafting into the same block (AppliedEnergistics#4586) Fluix crystals will now spawn within an area around the center of the block as well as some tuned down motion while still maintaining some randomness. * Use minus sign for minus buttons in number widget. * Initial port to 1.16.2 * Initial port to 1.16.2 * Initial port to 1.16.2 * Bump to Forge 33.0.5 * Remove use of func_244388_a, which is client-only. * Use different naming for fullbright, and always reset it back after setting it. * Fixes AppliedEnergistics#4598: Incorrectly rotated face for determining block lightlevel in ME Chest renderer. (AppliedEnergistics#4599) * Fixes AppliedEnergistics#4602: Prevent encoding invalid patterns and handle corrupted patterns a little more gracefully. (AppliedEnergistics#4608) * Fixes AppliedEnergistics#4602: Prevent encoding invalid patterns and handle corrupted patterns a little more gracefully. (AppliedEnergistics#4608) * Fixes AppliedEnergistics#4598: Incorrectly rotated face for determining block lightlevel in ME Chest renderer. (AppliedEnergistics#4599) (AppliedEnergistics#4609) (cherry picked from commit 954ce14) * Added step to publish to modmaven (AppliedEnergistics#4607) * Fixes AppliedEnergistics#4611: Use of client-side only method for Tiny TNT explosion. (AppliedEnergistics#4612) * Fixes AppliedEnergistics#4611: Use of client-side only method for Tiny TNT explosion. (AppliedEnergistics#4612) * Fixes AppliedEnergistics#4590: Crystal seeds (other than certus) don't display their growth stages. (AppliedEnergistics#4618) * Fixes AppliedEnergistics#4590: Crystal seeds (other than certus) don't display their growth stages. (AppliedEnergistics#4619) * Added step to publish to modmaven (AppliedEnergistics#4607) (cherry picked from commit 7e1bfdb) * Re-Enabled JEI and TOP in dev. * Fixes AppliedEnergistics#4635: Actually remove requesters when removing requesters. * Actually save the rotation when a tile is rotated. * Fix search box interactions in the interface terminal. * Fix tiles that have a \"powered\" block state from not being able to be broken when they are connected to a powered grid. * Strip pom.xml dependencies. * Added Modmaven repository to README.md * Update zh_cn.json (AppliedEnergistics#4653) * Remove the use of SlotItemHandler since we are only faking an inventory-backed slot, (AppliedEnergistics#4654) we might as well use what we had used pre-2017, which is simply extending a normal Slot. This should also fix AppliedEnergistics#4652. * Bump to Forge 33.0.22 * Serialize the complete NBT data to avoid mismatches (AppliedEnergistics#4665) This might increase the network traffic a bit, but the amount of mods actually using the share tag seems to be very limited. For now it is worth the risk as it solves the problem. In case we run into actual issues, there might still be other solutions, which will be way more complex and can potentially introduce additional problems. * Remove GZipStreams from packets. (AppliedEnergistics#4664) This should now be handled by the normal network manager (hopefully). Also renamed the `CompressedNBTPacket` to `MEInterfaceUpdatePacket` as that is the only use case. * Fixes removal of facades not invalidating the cached server-side collision boxes. (AppliedEnergistics#4663) * Serialize the complete NBT data to avoid mismatches (AppliedEnergistics#4665) This might increase the network traffic a bit, but the amount of mods actually using the share tag seems to be very limited. For now it is worth the risk as it solves the problem. In case we run into actual issues, there might still be other solutions, which will be way more complex and can potentially introduce additional problems. (cherry picked from commit e90dd2f) * Fixes removal of facades not invalidating the cached server-side collision boxes. (AppliedEnergistics#4663) (cherry picked from commit 957bc4c) * Implemented a cache with maximum quad-count it will cache for the cable bus, (AppliedEnergistics#4670) which also fixes concurrent access to the hashmap. * Fixes AppliedEnergistics#4669: Take NBT into account for comparing. (AppliedEnergistics#4675) This only covers combining different items together. Fuzzy filtering is still a bit too fuzzy for corner cases. * Fixes AppliedEnergistics#4683: Hopefully LazyOptional works as advertised (AppliedEnergistics#4684) * Fixes AppliedEnergistics#4680: Facade advancement is showing an untextured facade. * Fixes a problem where tile entities would become unremovable (well, one more of these at least), because they would reset their block state upon removal and loss of power. * Remove object-scanning subscriptions and remove unused test-file. * Bumped Forge version. * Implemented a cache with maximum quad-count it will cache for the cable bus, (AppliedEnergistics#4670) which also fixes concurrent access to the hashmap. (cherry picked from commit b756d68) * Remove unneeded cable-bus inventory-model, which caused the part models to be loaded twice leading to unnecessary memory-usage. * Added a global Voxelshape cache for cable bus voxel shapes, since combining voxel shapes turns out to be an extremely expensive process (i.e. 1.7s for 10000x5 shapes). * Crystal Growth Refactor (AppliedEnergistics#4702) * Refactored crystal in-world purification: - Removed iterative formula - Set the default growth factor to 1 rather than 0.5 to simplify settings - Made the growth-tick-progress-per-tick a configuration setting for 0-6 accelerators - Unfinished seeds now slowly sink when ejected by an annihilation plane or other system (emulates a player throwing it in) - Instead of checking for \"isLiquid\", we now check for a new tag (appliedenergistics2:crystal_purification_medium) to check if the crystal is submerged in an allowed fluid for growth, defaults to #minecraft:water. * Removed configuration options for changing how accelerators work, replaced with improved fluid tag option with a clamped multiplier [1,10]. * Fixes AppliedEnergistics#4704: QNB is not finding a registered QNB because it believes the chunk to be unloaded. Also adds debug logging to the locatable registry to better debug this issues in the future. * Formatting fixes. * Fixes AppliedEnergistics#4661: Do not update a tile entity when it's in an unloaded chunk (i.e. during chunk unloading) (AppliedEnergistics#4708) * Fixes AppliedEnergistics#4693: Fix color applicator not working on cable-buses. * Fixes AppliedEnergistics#4699: AE's glass should only hide it's sides adjacent to other AE glass. Also disables spawn on AE's glass same as Vanilla glass. * Slightly increased the height of the item hitbox for crystals to make their pickup by annihilation planes less \"clippy\". * Fixes AppliedEnergistics#4253: Just transfer the recipe id instead of every ingredient. (AppliedEnergistics#4689) * Fixes AppliedEnergistics#4253: Just transfer the recipe id instead of every ingredient. * If possible handle any IRecipe for processing mode * Improvements and support for AE2 facades. * Switched to using JEI's displayed stacks (which means we can remove the shapeless variant). Co-authored-by: Sebastian Hartte <sebastian@hartte.de> * Fixes AppliedEnergistics#4719: Take the entity size into account when spawning item entities (AppliedEnergistics#4720) * Make players assume ownership of networks when they place security stations onto unsecured ones (AppliedEnergistics#4714) * Fixes AppliedEnergistics#4712: When a security station is placed onto an unsecured network, the placer assumes ownership of the entire network. Otherwise the contiguous network would not necessarily reconnect in the same way when the chunk is reloaded due to differing player-ids throughout the network. In addition, changes to the node's owner were not being persisted due to the host never being marked as dirty. * Fix formatting * Render Performance Improvements (AppliedEnergistics#4721) * Return a fixed bounding box for frustrum culling of AE tile entity renderers to prevent Forge from re-retrieving the TE from the world and calculating the collision box (very costly for cables). * Changed dynamic cable bus lighting to be based on block states to improved rendering speed and fix optifine issues. (Potential fix for AppliedEnergistics#4716). * Fixes AppliedEnergistics#4728: Mark all offloading threads as daemons (AppliedEnergistics#4729) * Fixes AppliedEnergistics#4730 and also introduces repeat-pageup/pagedown when holding the mouse on the area above or below the scrollbar handle. * Remove unnecessary debug prints, and rename methods. * Formatting fixes. * Fixes AppliedEnergistics#4731: Take the position where the user clicked the handle into account when calculating the new scrollbar position. Also fixes: The scrollbar did not subtract the handle height when determining the available space for moving the handle, thus introducing drift the further down a user scrolled. Also fixes: The scrollbar did not resize it's trackbar when the ME inventory screens were resized and the number of rows changed, same for craft confirm. * Updated Forge / MC to 1.16.3 Keep Mappings Allow higher range for MC + Forge versions * Merge all gradle files (AppliedEnergistics#4732) * Merge all gradle files The specific build files are now much smaller, so a single one is mostly acceptable now. Also updates Gradle to 5.6.3 * Disable the Mixin annotation processor when importing this project into IntelliJ since it should only be needed to generate refmaps on an actual build. * Removed Sonarqube and JaCoCo plugins. Co-authored-by: Sebastian Hartte <sebastian@hartte.de> * Adapt the same sorting logic used for items stored in the network for items obtained from patterns, which fixes items from patterns not being able to be shift-clicked into new patterns. * Updated forge and increased memory for IDE-sync daemon. * Rolled back the memory change since it'll cause a daemon to launch even during a CI build. * Prevent FG from force-exiting the daemon if runData is used. * Fixes AppliedEnergistics#4733: Fix a crash bug when an external machine tries draining fluids from a fluid interface without a filter. (AppliedEnergistics#4738) * Minor style fixes. * Fixes AppliedEnergistics#4697: Show number of required items in condenser tooltips. * Build PRs for all release branches (AppliedEnergistics#4746) * Fix yaml syntax * Simply build all branches * Add an indicator that shows the number of active crafting jobs. * Improvements to the usability of the number entry widgets (Priority, Level Emitter, Craft Amount): (AppliedEnergistics#4737) - Fixed tab order - Introduced focus state for corner buttons - Allowed the player to enter any text, but add validation that only persist it if it is a valid number - Enter will now confirm these dialogs and return to the previous dialog - The text field is automatically focused and its contents are selected * Update forge mappings to 20200916-1.16.2 (AppliedEnergistics#4749) * Remove unused field indicating availability of client classes. * Fixes AppliedEnergistics#4741: Rework Crafting CPU cycling and extract commonalities into a separate class. (AppliedEnergistics#4742) Also Fixes: - Enter key confirms the \"Confirm Crafting\" dialog again - Right Mouse Button correctly cycles backwards through CPUs, while left mouse button forward - Fixes an internal problem with syncing CPU names - Naming of unnamed CPUs begins at #1 now * Fix tooltip rendering. * Added a mechanism to add mods downloaded from curseforge to a dev-environment by simply dropping them into an extra-mods-<mc-version> folder. * Fixes AppliedEnergistics#4687: Translucent rendering inside of chunk baking is currently unsupported, hence we switch to a fixed baked model for the facade outline. (AppliedEnergistics#4750) * Fixes AppliedEnergistics#4796: Update Forge and fix registry validation problems (AppliedEnergistics#4797) * Fixes AppliedEnergistics#4796: Update Forge and fix registry validation problems. * Change modmaven URL. * Update README.md * Fix Maven publish URL. * Use Forge-Tag for ender pearls. * Set comment line length to 120 to match code line length. (AppliedEnergistics#4773) * Be less defensive about copying item stacks in simulated extractions (but still catch obviously broken implementations). (AppliedEnergistics#4771) Also fix looping over the same slot while simulating, and try to heuristically guess the maximum extraction from the slot given what getStackInSlot returned. * Bump upper bound for forge to include 35.0.0 (1.16.4) (AppliedEnergistics#4809) * Update to 1.16.4 Updated mappings. Forge 35.0.1 for 1.16.4 is now the required min version. * Migrate to Forge BiomeLoadingEvent and make Worldgen Config more consistent (AppliedEnergistics#4811) * Move to Forge's BiomeLoadingEvent and migrate WorldGenRegistry to biomes from dimensions (which didn't actually work anymore). Also remove unused config for Meteorites dimension blacklist and add quartz and meteorite biome blacklists instead. * Added back stub methods to avoid a breaking API change. * Extracted dynamic mods.toml content into gradle.properties (AppliedEnergistics#4819) Also updated dependencies and enabled JEI for 1.16.4 again * Added tiered portable cells. (AppliedEnergistics#4810) * Added tiered portable cells. They follow the normal 1k, 4k, 16k, and 64k approach, however store only half the amount of bytes. Types are starting with 27 for the smallest and increase by 9 for each higher tier. Bytes per type still works like the normal item cells. * Flipped types per cell. Small cells will now support more types making them more useful for storing tools, books and similar use cases. While large cells are more for bulk storage of a few blocks, e.g. during mining. * Added charge rates for new portable cells * Remove two unused mixins and change processResources to be nicer for IntelliJ. * Change to new way of setting environment variables. * Fix mapped-name in obfuscated reflection. * AE2 Retexturing (AppliedEnergistics#4610) * Updated models for unlit loader Updated energy cells to now 5 states Added an _ to all variants for readability Updated fluid related recipes to use green dye Updated fluid p2p to use a green texture Updated grindstone textures Updated Texture Credits Co-authored-by: Sebastian Hartte <sebastian@hartte.de> Co-authored-by: shartte <shartte@users.noreply.github.com> Co-authored-by: yueh <yueh@users.noreply.github.com> Co-authored-by: aoisensi <aoisensi.potato+github@gmail.com> Co-authored-by: A. Regnander <Regnander@users.noreply.github.com> Co-authored-by: Masakitenchi <masakitenchi@users.noreply.github.com> Co-authored-by: Kal Chikhou <64355028+Ridanisaurus@users.noreply.github.com>"
    }
}