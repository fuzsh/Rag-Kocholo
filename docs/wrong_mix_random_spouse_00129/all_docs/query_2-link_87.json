{
    "id": "wrong_mix_random_spouse_00129_2",
    "rank": 87,
    "data": {
        "url": "https://aws.amazon.com/blogs/database/visualize-and-explore-knowledge-graphs-quickly-by-connecting-metaphactory-to-amazon-neptune/",
        "read_more_link": "",
        "language": "en",
        "title": "Visualize and explore knowledge graphs quickly by connecting metaphactory to Amazon Neptune",
        "top_image": "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/17/DBBLOG-3575-featured-images-1120x630.jpg",
        "meta_img": "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/17/DBBLOG-3575-featured-images-1120x630.jpg",
        "images": [
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-1-mona-list-kg.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-2-metaphactory-architecture-graphic.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-3-aws-deployment-1.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-4-configure-security-group.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-5-repository-config.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-6-sparql-button.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-7-search-icon-1.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-8-resource-view-modes.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-9-albert-einstein-graph.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/db-3575-10-outgoing-statements.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2023/02/13/charles_ivie.jpeg",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2024/01/16/image021.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Charles Ivie",
            "Dmitry Pavlov"
        ],
        "publish_date": "2024-01-22T09:58:24-07:00",
        "summary": "",
        "meta_description": "Knowledge graphs consolidate and integrate an organization’s information assets and make them more readily available to all members of the organization. There are many applications and use cases that are enabled by knowledge graphs. Graphs are a natural way to model and represent information about the world. This idea is not new, but has now […]",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/main/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services",
        "canonical_link": "https://aws.amazon.com/blogs/database/visualize-and-explore-knowledge-graphs-quickly-by-connecting-metaphactory-to-amazon-neptune/",
        "text": "Knowledge graphs consolidate and integrate an organization’s information assets and make them more readily available to all members of the organization. There are many applications and use cases that are enabled by knowledge graphs.\n\nGraphs are a natural way to model and represent information about the world. This idea is not new, but has now become more viable via the introduction of scalable graph databases.\n\nUnlike traditional ways of managing data, such as relational databases, graph modeling is very flexible and allows for the real-world diversity and heterogeneity of data. This lets us model complex and complicated subject matter.\n\nFor example, suppose a user is interested in works of art by Leonardo da Vinci. As shown in the following figure, a graph allows easy discovery of his works of art, and where in the Louvre museum to find them.\n\nKnowledge graphs have gained prominence in enterprise data management because they offer advantages for data integration and knowledge democratization. They also help build smarter applications that use symbolic artificial intelligence (AI) methods and deliver actionable insights for end users.\n\nIn this post, we show you how to get started with knowledge graphs using the metaphactory platform backed by Amazon Neptune.\n\nOffered by AWS Partner Network (APN) Select Technology Partner metaphacts GmbH, metaphactory helps you build knowledge graphs and the smart applications that use them.\n\nNeptune and metaphactory\n\nNeptune is a serverless, fully managed, graph database service built for the cloud that can store property graphs and RDF knowledge graphs of massive scale. It’s a purpose-built graph database service that efficiently stores and navigates highly connected data, and can query billions of relationships with millisecond latency. You can use Neptune to create workloads that support social networks, recommendation engines, fraud detection, knowledge graphs, drug discovery applications, and more.\n\nmetaphactory is an end-to-end enterprise knowledge graph platform that transforms your data into consumable, contextual, and actionable knowledge. Operating on top of Neptune, metaphactory adheres to open and FAIR data principles, streamlining the process of capturing and organizing domain expertise within explicit semantic knowledge models. It extracts actionable insights from data and facilitates sharing of knowledge across the entire enterprise.\n\nmetaphactory offers a rich knowledge management functionality that knowledge engineers use for data administration, transformation, analysis, and building end-user applications. End-users benefit from a user-friendly interface made for easy search, exploration, navigation visualization, consumption, and management of knowledge.\n\nFeatures include semantic knowledge modeling, low-code application building, and end-user interaction. These capabilities enable relevant stakeholders to make informed and intelligent business decisions while also promoting the discovery of hidden insights and fostering innovation. The following diagram illustrates the metaphactory platform architecture.\n\nBoth Neptune and metaphactory support the W3C Semantic Web standards of SPARQL 1.1 and RDF 1.1.\n\nIn a separate case study, you can see how Siemens Energy uses metaphactory and Neptune for their end-user oriented custom knowledge graph application for managing its fleet of large gas turbines.\n\nSolution overview\n\nIn this post, we load a sample RDF knowledge graph into Neptune and use metaphactory to search and explore it. The high-level steps are as follows:\n\nCreate a Neptune cluster.\n\nDeploy metaphactory on Amazon Elastic Compute Cloud (Amazon EC2).\n\nConfigure metaphactory to connect to Neptune.\n\nLoad data into Neptune using metaphactory.\n\nSearch and explore the data using metaphactory.\n\nThis post is designed for anyone who wants to become familiar with knowledge graphs. You don’t need to have any prior knowledge of the RDF data model or SPARQL query language.\n\nThe overall architecture of our setup is depicted in the following diagram, where a Neptune cluster is deployed into a VPC. A Neptune cluster is a collection of instances, with the minimum number being 1. Instances can be serverless for on-demand vertical auto scaling, or distinct instance types. The primary instance acts as the single writer instance, and horizontal scalability is available for read operations, by creating additional read-replica instances. Each cluster comes with a cluster endpoint delegating requests to the writer instance, as well as a reader endpoint distributing (read-only) queries to the read replicas.\n\nTo interact with the Neptune cluster, we deploy an EC2 client instance into the same VPC, where security groups are used to configure permissions. In our setup, the metaphactory application acts as a client and is connected to Neptune through its cluster endpoint. This starts a web server that accepts incoming traffic on port 80. You can configure the IP range from which metaphactory is accessible as part of the setup. Use this IP range to restrict access to metaphactory, for example, to a company’s internal network.\n\nCustomers are responsible for the costs of running the solution. For help with estimating costs, visit the AWS Pricing Calculator.\n\nCreate a Neptune cluster\n\nFor instructions on setting up a Neptune cluster, refer to Getting Started with Amazon Neptune.\n\nDeploy metaphactory on Amazon EC2\n\nYou can register for a free metaphactory trial on AWS Marketplace by choosing AWS Marketplace at https://metaphacts.com/get-started. The trial confirmation email will provide instructions on how you can access metaphactory on AWS Marketplace.\n\nAfter you subscribe to metaphactory for Neptune, you will be prompted to use the Amazon EC2 configuration guide to spin up your EC2 instance for metaphactory. To test metaphactory, a t3.medium instance type is sufficient.\n\nIn the setup wizard, provide the following:\n\nTo ensure easy communication between metaphactory and Neptune, provide the VPC that Neptune is running in.\n\nAlthough optional, enabling AWS Identity and Access Management (IAM) database authentication is recommended for production applications. To pair Neptune and metaphactory, refer to Enabling IAM database authentication in Neptune.\n\nIt’s also important to define the security group permissions for your instance. Configure the IP ranges and ports through which you’ll be able to access metaphactory.\n\nAll other parameters of the configuration wizard can be left unchanged from the default values.\n\nWhen you complete the configuration wizard, the EC2 instance with metaphactory will usually be created in under 10 minutes.\n\nFind more information on specifics of configuring EC2 instances to work with Amazon Neptune in the metaphactory documentation.\n\nConfigure metaphactory to connect to Neptune\n\nThe final step is to configure the connection to Neptune in metaphactory.\n\nLog in to metaphactory using admin as your user name and your EC2 instance ID as password.\n\nConfigure the repository access parameters on the startup page (choose Neptune from the repository preset templates).\n\nProvide the read and write SPARQL endpoint URLs.\n\nThe Neptune endpoint URLs can be identified on the Neptune console, under cluster settings.\n\nSet the IAM DB authentication flag\n\nChoose Update Config to connect metaphactory and Neptune.\n\nLoad data into Neptune using metaphactory\n\nWe use the Nobel Prize dataset provided by the Nobel foundation for our knowledge graph. The Nobel Prize dataset is centered around the Nobel Prize laureates and the awards that they have received.\n\nThis Nobel Prize public dataset is licensed under Creative Commons Zero (CC0) and free to use as stated by the Terms & Conditions of the Nobel Prize website.\n\nmetaphacts hosts the Nobel Prize dataset in a publicly available Amazon Simple Storage Service (Amazon S3) bucket, which allows us to use the SPARQL UPDATE LOAD command to load the Nobel Prize ontology, vocabulary, and instance data. The metaphacts team has extended the ontology that was originally provided by the Nobel Prize foundation with SHACL shapes, which can be used to validate the data against the schema as defined in the ontology.\n\nChoose SPARQL in the menu bar to access the query builder.\n\nEnter the following command:\n\nLOAD <https://metaphacts-datasets.s3.amazonaws.com/nobel-prize-bundle.trig.gz>\n\nConfirm this action, and metaphactory will load all necessary assets from the S3 bucket.\n\nTo check whether the load operation was successful, navigate to each of the following pages and verify that there’s now at least one entry in each section:\n\nAssets, Vocabularies\n\nAssets, Ontologies\n\nAssets, Datasets\n\nAs well as using SPARQL UPDATE LOAD, you can also load data by one of the following metaphactory features:\n\nChoose the cloud icon in the application header, then drag and drop the desired data files onto the metaphactory data loading page.\n\nUse the user-friendly metaphactory UI/UX that uses the Neptune Bulk Loader. For details, see Loading Data into Amazon Neptune.\n\nSearch and explore data with metaphactory\n\nSearch is the most common entry point to new data. Out-of-the-box search is available in metaphactory to provide a quick path to knowledge via the search field.\n\nIn the search field, enter the name of any Nobel Prize laureate that comes to mind. For this example, we use Albert Einstein.\n\nThere are three default views in which metaphactory exposes data about a resource:\n\nGraph (default)\n\nStatements\n\nPage\n\nChoose the search result to see the graph view about the resource Albert Einstein.\n\nGraph view\n\nThe graph view provides an incremental navigation through the graph by following the edges between the nodes; it always starts from the node of the selected resource.\n\nWe can open the Connections menu for Albert Einstein and reach Kaiser-Wilhelm-Institut (now Max-Planck-Institut) für Physik through the affiliation connection. By exploring further from here, we find out that Petrus (Peter) Josephus Wilhelmus Debye, who received his Nobel Prize in 1936 in Chemistry, is also affiliated with this university.\n\nChoose the nobelPrize connection in the navigation menu and then add the node of the specific Nobel Prize. You can expand any node on the graph by choosing the plus sign located inside each node on the graph.\n\nThe power of knowledge graphs is shown prominently in this example; you can understand the meaning of the data from a quick glance at the graph view.\n\nStatements view\n\nKnowledge about a resource is presented as triples, which is how the data is stored in graph databases. A triple consists of a subject, an object, and a predicate. The selected resource is always the subject, and the object is a fact about the subject related to it via the predicate property.\n\nStatements can be incoming or outgoing. Knowledge and application engineers can use this view when constructing end-user applications, specifically in composing correct SPARQL queries.\n\nThe following screenshot illustrates the outgoing statements for Albert Einstein in the Nobel Prize dataset.\n\nPage view\n\nIn the page view, you can define a custom view per resource or per group of resources, such as an entire ontology class, by using metaphactory’s templating capabilities.\n\nTo learn more about how to create page views, refer to Page View Configuration on the metaphactory website.\n\nIn a future post, we will describe in detail how to create page views.\n\nConclusion\n\nIn this post, we showed you how to set up Neptune with the metaphactory platform and use this software stack to explore and search RDF-based knowledge graphs.\n\nWe encourage you to try to load your own RDF data into Neptune and explore it with metaphactory. The easiest way to do this is by signing up for a trial on the metaphacts Get Started page (choose the AWS Marketplace trial option). You can use all the exploration techniques discussed in this post to view and query any RDF graph stored in your Neptune database, without any additional configuration.\n\nAbout the Authors\n\nCharles Ivie is a Senior Graph Architect with the Amazon Neptune team at AWS. As a highly respected expert within the knowledge graph community, he has been designing, leading, and implementing graph solutions for over 15 years."
    }
}