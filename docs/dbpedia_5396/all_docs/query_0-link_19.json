{
    "id": "dbpedia_5396_0",
    "rank": 19,
    "data": {
        "url": "https://developers.google.com/youtube/analytics/reference/reports/query",
        "read_more_link": "",
        "language": "en",
        "title": "YouTube Analytics and Reporting APIs",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/developers/images/opengraph/youtube-theme.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/developers/images/opengraph/youtube-theme.png",
        "images": [
            "https://developers.google.com/static/site-assets/logo-youtube.svg",
            "https://developers.google.com/static/site-assets/logo-youtube.svg",
            "https://developers.google.com/static/site-assets/logo-youtube.svg",
            "https://developers.google.com/static/site-assets/logo-github.svg",
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://developers.google.com/static/site-assets/logo-stack-overflow.svg",
            "https://developers.google.com/static/site-assets/logo-youtube.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [
            "https://developers.google.com/frame/youtube/analytics/reference/reports/query_1ada9d0d4493bbc4fd30395c972780e96a5e7446a507ea9c5d5c6626f1dc7107.frame"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/youtube/analytics/reference/reports/query",
        "text": "Reports: Query\n\nStay organized with collections Save and categorize content based on your preferences.\n\nImportant: API requests to this method now require access to the https://www.googleapis.com/auth/youtube.readonly scope.\n\nThis method lets you retrieve many different Analytics reports. Each request uses query parameters to specify a channel ID or content owner, a start date, an end date, and at least one metric. You can also provide additional query parameters, such as dimensions, filters, and sorting instructions.\n\nMetrics are individual measurements of user activity, such as video views or ratings (likes and dislikes).\n\nDimensions are common criteria that are used to aggregate data, such as the date on which the user activity occurred or the country where the users were located. In a report, each row of data has a unique combination of dimension values.\n\nFilters are dimension values that specify the data that will be retrieved. For example, you could retrieve data for a specific country, a specific video, or a group of videos.\n\nNote: Content owner reports are only accessible to YouTube content partners who participate in the YouTube Partner Program.\n\nCommon use cases\n\nRequest\n\nHTTP request\n\nGET https://youtubeanalytics.googleapis.com/v2/reports\n\nAll YouTube Analytics API requests must be authorized. The Authorization guide explains how to use the OAuth 2.0 protocol to retrieve authorization tokens.\n\nYouTube Analytics API requests use the following authorization scopes:\n\nScopes https://www.googleapis.com/auth/yt-analytics.readonly View YouTube Analytics reports for your YouTube content. This scope provides access to user activity metrics, like view counts and rating counts. https://www.googleapis.com/auth/yt-analytics-monetary.readonly View YouTube Analytics monetary reports for your YouTube content. This scope provides access to user activity metrics and to estimated revenue and ad performance metrics. https://www.googleapis.com/auth/youtube Manage your YouTube account. In the YouTube Analytics API, channel owners use this scope to manage YouTube Analytics groups and group items. https://www.googleapis.com/auth/youtubepartner View and manage YouTube assets and associated content on YouTube. In the YouTube Analytics API, content owners use this scope to manage YouTube Analytics groups and group items.\n\nParameters\n\nThe following tables list required and optional query parameters for API requests to retrieve query reports. The standard query parameters listed in the table are also optional and are supported by many Google APIs.\n\nParameters Required Parameters ids string\n\nIdentifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data.\n\nTo request data for a YouTube channel, set the ids parameter value to either channel==MINE or channel==CHANNEL_ID, where CHANNEL_ID identifies the currently authenticated user's YouTube channel.\n\nTo request data for a YouTube content owner, set the ids parameter value to contentOwner==OWNER_NAME, where OWNER_NAME is the content owner ID for the user.\n\nmetrics string\n\nA comma-separated list of YouTube Analytics metrics, such as views or likes,dislikes. See the documentation for channel reports or content owner reports for a list of the reports that you can retrieve and the metrics available in each report. (The Metrics document contains definitions for all of the metrics.) Optional Parameters currency string\n\nThe currency that the API will use to specify the following estimated revenue metrics: estimatedRevenue, estimatedAdRevenue, estimatedRedPartnerRevenue, grossRevenue, cpm, playbackBasedCpm. The values that the API returns for those metrics are estimates calculated using exchange rates that change on a daily basis. If none of those metrics are requested, the parameter is ignored.\n\nThe parameter value is a three-letter ISO 4217 currency code from the list of currencies below. The API returns an error if an unsupported currency is specified. The default value is USD.\n\nSee supported currencies\n\nCurrency codes AED United Arab Emirates dirham ANG Netherlands Antillean guilder ARS Argentine peso AUD Australian dollar BDT Bangladeshi taka BGN Bulgarian lev BHD Bahraini dinar BND Brunei dollar BOB Boliviano BRL Brazilian real BWP Botswana pula CAD Canadian dollar CHF Swiss franc CLP Chilean peso CNY Chinese yuan COP Colombian peso CRC Costa Rican colon CZK Czech koruna DKK Danish krone DOP Dominican peso DZD Algerian dinar EGP Egyptian pound EUR Euro FJD Fiji dollar GBP Pound sterling GTQ Guatemalen quetzal HKD Hong Kong dollar HNL Honduran lempira HRK Croatian kuna HUF Hungarian forint IDR Indonesian rupiah ILS Israeli new shekel INR Indian rupee JMD Jamaican dollar JOD Jordanian dollar JPY Japanese yen KES Kenyan shilling KRW South Korean won KWD Kuwaiti dinar KYD Cayman Islands dollar KZT Kazakhstani tenge LBP Lebanese pound LKR Sri Lankan rupee MAD Moroccan dirham MDL Moldovan leu MKD Macedonian denar MUR Mauritian rupee MVR Maldivian rufiyaa MXN Mexican peso MYR Malaysian ringgit NAD Namibian dollar NGN Nigerian naira NIO Nicaraguan córdoba NOK Norwegian krone NPR Nepalese rupee NZD New Zealand dollar OMR Omana rial PEN Peruvian nuevo sol PGK Papua New Guinean kina PHP Philippine peso PKR Pakistani rupee PLN Polish złoty PYG Paraguayan guaraní QAR Qatari riyal RON Romanian new leu RSD Serbian dinar RUB Russian ruble SAR Saudi riyal SCR Seychelles rupee SEK Swedish krona/kronor SGD Singapore dollar SLL Sierra Leonean leone SVC Salvadoran colón THB Thai baht TND Tunisian dinar TRY Turkish lira TTD Trinidad and Tobago dollar TWD New Taiwan dollar TZS Tanzanian shilling UAH Ukrainian hryvnia UGX Ugandan shilling USD United States dollar UYU Uruguayan peso UZS Uzbekistan som VEF Venezuelan bolívar VND Vietnamese dong XAF CFA franc BEAC XOF CFA franc BCEAO YER Yemeni rial ZAR South African rand\n\ndimensions string\n\nA comma-separated list of YouTube Analytics dimensions, such as video or ageGroup,gender. See the documentation for channel reports or content owner reports for a list of the reports that you can retrieve and the dimensions used for those reports. (The Dimensions document contains definitions for all of the dimensions.) filters string\n\nA list of filters that should be applied when retrieving YouTube Analytics data. The documentation for channel reports and content owner reports identifies the dimensions that can be used to filter each report, and the Dimensions document defines those dimensions.\n\nIf a request uses multiple filters, join them together with a semicolon (;), and the returned result table will satisfy both filters. For example, a filters parameter value of video==dMH0bHeiRNg;country==IT restricts the result set to include data for the given video in Italy.\n\nSpecifying multiple values for a filter\n\nThe API supports the ability to specify multiple values for the video, playlist, and channel filters. To do so, specify a separated list of the video, playlist, or channel IDs for which the API response should be filtered. For example, a filters parameter value of video==pd1FJh59zxQ,Zhawgd0REhA;country==IT restricts the result set to include data for the given videos in Italy. The parameter value can specify up to 500 IDs.\n\nWhen specifying multiple values for the same filter, you can also add that filter to the list of dimensions that you specify for the request. This is true even if the filter is not listed as a supported dimension for a particular report. If you do add the filter to the list of dimensions, then the API also uses the filter values to group results.\n\nFor example, suppose you retrieve a channel's traffic source report, which aggregates viewing statistics based on the manner in which viewers reached the channel's video content. Also suppose that your request's filters parameter request identifies a list of 10 videos for which data should be returned.\n\nIf you add video to the dimensions parameter's value, the API response will provide separate traffic source statistics for each of the 10 videos.\n\nIf you do not add video to the dimensions parameter's value, the API response will aggregate the traffic source statistics for all of the 10 videos.\n\nincludeHistoricalChannelData boolean\n\nNote: This parameter only applies to content owner reports.\n\nIndicates whether the API response should include channels' watch time and view data from the time period prior to when the channels were linked to the content owner. The default parameter value is false which means that the API response only includes watch time and view data from the dates that channels were linked to the content owner.\n\nIt is important to remember that different channels might have been linked to a content owner on different dates. If the API request is retrieving data for multiple channels and the parameter value is false, then the API response contains data based on the linking date for each respective channel. If the parameter value is true, the API response contains data matching the dates specified in the API request.\n\nNote: In version 1 of the API, this parameter was named include-historical-channel-data.\n\nmaxResults integer\n\nThe maximum number of rows to include in the response.\n\nNote: In version 1 of the API, this parameter was named max-results.\n\nsort string\n\nA comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The - prefix causes descending sort order. startIndex integer\n\nThe 1-based index of the first entity to retrieve. (The default value is 1.) Use this parameter as a pagination mechanism along with the max-results parameter.\n\nNote: In version 1 of the API, this parameter was named start-index.\n\nStandard Parameters access_token OAuth 2.0 token for the current user.\n\nOne possible way to provide an OAuth 2.0 token.\n\nalt This parameter is not supported in version 2 of the API, which only supports JSON responses.The data format for the API response.\n\nValid values: json, csv\n\nDefault value: json\n\ncallback Callback function.\n\nName of the JavaScript callback function that handles the response.\n\nUsed in JavaScript JSON-P requests.\n\nprettyPrint\n\nReturns response with indentations and line breaks.\n\nReturns the response in a human-readable format if true.\n\nDefault value: true.\n\nWhen this is false, it can reduce the response payload size, which might lead to better performance in some environments.\n\nquotaUser This parameter was supported in version 1 of the API, which is now deprecated. This parameter is not supported in version 2 of the API. userIp This parameter was supported in version 1 of the API, which is now deprecated. This parameter is not supported in version 2 of the API.\n\nRequest body\n\nDo not send a request body when calling this method.\n\nResponse\n\nAs noted in the alt parameter definition, the API can return responses in JSON or CSV format. Information about the response body for each type is shown below:\n\nExamples\n\nNote: The following code samples may not represent all supported programming languages. See the client libraries documentation for a list of supported languages.\n\nJavaScript\n\nThis example calls the YouTube Analytics API to retrieve daily views and other metrics for the authorizing user's channel for the 2017 calendar year. The sample uses the Google APIs JavaScript client library.\n\nBefore running this sample locally for the first time, you need to set up authorization credentials for your project:\n\nCreate or select a project in the Google API Console.\n\nEnable the YouTube Analytics API for your project.\n\nAt the top of the Credentials page, select the OAuth consent screen tab. Select an Email address, enter a Product name if not already set, and click the Save button.\n\nOn the Credentials page, click the Create credentials button and select Oauth client ID.\n\nSelect the application type Web application.\n\nIn the Authorized JavaScript origins field, enter the URL from which you will be serving the code sample. For example, you could use something like http://localhost:8000 or http://yourserver.example.com. You can leave the Authorized redirect URIs field blank.\n\nClick the Create button to finish creating your credentials.\n\nBefore closing the dialog box, copy the client ID, which you will need to put into the code sample.\n\nThen, save the sample to a local file. In the sample, find the following line and replace YOUR_CLIENT_ID with the client ID you obtained when setting up your authorization credentials.\n\ngapi.auth2.init({client_id: 'YOUR_CLIENT_ID'});\n\nNow, you are ready to actually test the sample:\n\nOpen the local file from a web browser, and open the debugging console in the browser. You should see a page that displays two buttons.\n\nClick the authorize and load button to launch the user authorization flow. If you authorize the app to retrieve your channel data, you should see the following lines print to the console in the browser:\n\nSign-in successful GAPI client loaded for API\n\nIf you see an error message instead of the lines above, confirm that you are loading the script from the authorized redirect URI that you set up for your project and that you put your client ID into the code as described above.\n\nClick the execute button to call the API. You should see a response object print to the console in the browser. In that object, the result property maps to an object that contains the API data.\n\n<script src=\"https://apis.google.com/js/api.js\"></script> <script> function authenticate() { return gapi.auth2.getAuthInstance() .signIn({scope: \"https://www.googleapis.com/auth/yt-analytics.readonly\"}) .then(function() { console.log(\"Sign-in successful\"); }, function(err) { console.error(\"Error signing in\", err); }); } function loadClient() { return gapi.client.load(\"https://youtubeanalytics.googleapis.com/$discovery/rest?version=v2\") .then(function() { console.log(\"GAPI client loaded for API\"); }, function(err) { console.error(\"Error loading GAPI client for API\", err); }); } // Make sure the client is loaded and sign-in is complete before calling this method. function execute() { return gapi.client.youtubeAnalytics.reports.query({ \"ids\": \"channel==MINE\", \"startDate\": \"2017-01-01\", \"endDate\": \"2017-12-31\", \"metrics\": \"views,estimatedMinutesWatched,averageViewDuration,averageViewPercentage,subscribersGained\", \"dimensions\": \"day\", \"sort\": \"day\" }) .then(function(response) { // Handle the results here (response.result has the parsed body). console.log(\"Response\", response); }, function(err) { console.error(\"Execute error\", err); }); } gapi.load(\"client:auth2\", function() { gapi.auth2.init({client_id: 'YOUR_CLIENT_ID'}); }); </script> <button onclick=\"authenticate().then(loadClient)\">authorize and load</button> <button onclick=\"execute()\">execute</button>\n\nPython\n\nThis example calls the YouTube Analytics API to retrieve daily views and other metrics for the authorizing user's channel for the 2017 calendar year. The sample uses the Google APIs Python client library.\n\nBefore running this sample locally for the first time, you need to set up authorization credentials for your project:\n\nCreate or select a project in the Google API Console.\n\nEnable the YouTube Analytics API for your project.\n\nAt the top of the Credentials page, select the OAuth consent screen tab. Select an Email address, enter a Product name if not already set, and click the Save button.\n\nOn the Credentials page, click the Create credentials button and select Oauth client ID.\n\nSelect the application type Other, enter the name \"YouTube Analytics API Quickstart\", and click the Create button.\n\nClick OK to dismiss the resulting dialog.\n\nClick the file_download (Download JSON) button to the right of the client ID.\n\nMove the downloaded file to your working directory.\n\nYou also need to install the Google APIs Client Library for Python and some additional libraries:\n\npip install --upgrade google-api-python-client pip install --upgrade google-auth google-auth-oauthlib google-auth-httplib2\n\nNow, you are ready to actually test the sample:\n\nCopy the code sample below to your working directory.\n\nIn the sample, update the value of the CLIENT_SECRETS_FILE variable to match the location of the file that you downloaded after setting up your authorization credentials.\n\nRun the sample code in a terminal window:\n\npython yt_analytics_v2.py\n\nGo through the authorization flow. The auth flow might automatically load in your browser, or you might need to copy the auth URL into a browser window. At the end of the authorization flow, if necessary, paste the authorization code displayed in the browser into your terminal window and click [return].\n\nThe API query executes and the JSON response is output to the terminal window.\n\n# -*- coding: utf-8 -*- import os import google.oauth2.credentials import google_auth_oauthlib.flow from googleapiclient.discovery import build from googleapiclient.errors import HttpError from google_auth_oauthlib.flow import InstalledAppFlow SCOPES = ['https://www.googleapis.com/auth/yt-analytics.readonly'] API_SERVICE_NAME = 'youtubeAnalytics' API_VERSION = 'v2' CLIENT_SECRETS_FILE = 'YOUR_CLIENT_SECRET_FILE.json' def get_service(): flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES) credentials = flow.run_console() return build(API_SERVICE_NAME, API_VERSION, credentials = credentials) def execute_api_request(client_library_function, **kwargs): response = client_library_function( **kwargs ).execute() print(response) if __name__ == '__main__': # Disable OAuthlib's HTTPs verification when running locally. # *DO NOT* leave this option enabled when running in production. os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1' youtubeAnalytics = get_service() execute_api_request( youtubeAnalytics.reports().query, ids='channel==MINE', startDate='2017-01-01', endDate='2017-12-31', metrics='estimatedMinutesWatched,views,likes,subscribersGained' dimensions='day', sort='day' )\n\nTry it!\n\nUse the APIs Explorer to call this API and see the API request and response."
    }
}