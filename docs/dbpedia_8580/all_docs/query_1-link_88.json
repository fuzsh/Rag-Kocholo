{
    "id": "dbpedia_8580_1",
    "rank": 88,
    "data": {
        "url": "https://www.pygame.org/wiki/gsoc2010ideas",
        "read_more_link": "",
        "language": "en",
        "title": "gsoc2010ideas",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.pygame.org/images/logo_lofi.png",
            "https://www.pygame.org/thumb/f81c762299b2f1bf6d6af95a83b957a7.png",
            "https://www.pygame.org/thumb/2aa120f30d58403c5607fe9fc5e65a3e.png",
            "https://www.pygame.org/thumb/a00db8aa7556a8ad1e4e216825a0935e.png",
            "https://www.pygame.org/thumb/db653d4809dfe59e40c35dbe7dd1d035.png",
            "https://www.pygame.org/thumb/a2d1d29582212b5d285ec2f8112d6ce4.png",
            "https://www.pygame.org/thumb/7d83ba921016f6ddeffaacd5f2144b2a.png",
            "https://www.pygame.org/thumb/6618dffd29fd98dd507968965044989c.png",
            "https://www.pygame.org/thumb/e0fb3cd6ee2c45043e4ba145636604d9.jpg",
            "https://www.pygame.org/thumb/b7911bb40c6abf560e9c0e935ae34ab1.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "NOTE: This is a preliminary template, basically copied from the GSoC ideas list of 2009. Be aware that it is not clear, how pygame will participate in the GSoC of 2010. Do not let that stop you from getting into touch with pygame, though. You can express your interest in participating as a GSoC student at any time.\n\nPygame might mentor some students under the Python Software Foundation (PSF) umbrella or as an own organization for Google Summer of Code 2010. If you are an interested student or mentor, please contact us on the Mailing List or IRC Channel to discuss ideas. You should also take a look at PSF's GSoC pages:\n\nhttp://wiki.python.org/moin/SummerOfCode/2010\n\nhttp://wiki.python.org/moin/SummerOfCode/Expectations\n\nStudent Application Template¶\n\nStudents should adhere to this application format when submitting their final proposals, and it is also a useful set of guidelines to consider when forming and discussing a project proposal.\n\nAbout You\n\nYour Name\n\nContact Information. This should include your email address and IRC nick; Gtalk, AIM, MSN, or other modes of communication are optional.\n\nTime Zone and Preferred Language (spoken, not programming)\n\nTime Commitment. Briefly explain how much time you would have over the summer to complete your project, and any significant other time commitments.\n\nProgramming Experience. This can include personal, open source, school, or professional projects you have undertaken or helped with. URLs would be very helpful.\n\nPygame Experience. Describe any experience you have using or developing Pygame.\n\nOther skills and experience that are of interest for your aplication (e.g. in-depth math knowledge, excellent writing and documentation skills, etc.)\n\nAbout Your Project\n\nPlease explain in 2 to 3 paragraphs the project you intend to complete.\n\nWhat existing or future need does your proposed project fulfill?\n\nProvide a rough timeline for how you intend to complete your project, test it, and document it within the allotted time period.\n\nDescribe how you have brought your project proposal to the Pygame community, their reactions to your proposal, and revisions you have made based on those reactions. (Hint: This is something you really want to do before submitting your application.)\n\nProjects¶\n\nThis is a list of projects, sorted by difficulty, that students could take on for GSoC 2009. Feel free to suggest other projects, keeping in mind that they need to be doable in one summer.\n\nEasy¶\n\nThese projects can be completed mostly or entirely in Python, or involving porting existing work.\n\npygame-ctypes¶\n\nRevive pygame-ctypes for fast prototyping and a better idea flow in both directions (there's a large user base interested in pygame-ctypes)\n\nRefactor pygame-ctypes.\n\nAdd test targets and test anything available to flesh out all the tiny bugs.\n\nAs it is unmaintained for quite some time now, bring it up to date with the latest development efforts of pygame.\n\nReading and understanding C code as well as being familiar with Python and ideally ctypes should be no matter for interested developers.\n\nImproved Sprite and scene system¶\n\nThe sprite system of pygame is currently very specific and does not fit the requirements for many games.\n\nGeneralize the sprite system to make it more flexible without its current overhead\n\nAdd a basic scene and state system support for 2D stuff and keep it as generic as possible\n\nThis involves a lot of prototyping, sharing design ideas and to communicate a lot with the whole community. You should have made your first steps with Python already and be highly communicative.\n\nMedium¶\n\nThese projects are deeper and would require using the C Python API, and coding in C and Python.\n\nCamera Module for Windows¶\n\nPygame currently supports camera access for v4l2 cameras in Linux. Adding Windows support would require knowledge of Video for Windows, DirectShow, or Direct3D. The goal would be to make cameras usable in Windows under the same API as Linux. This project would require using the Python C API. Below are some references:\n\n{{todo#pygame.Camera - Video for windows version of}}\n\nThis requires some knowledge of the Windows API as well as robust C coding skills.\n\npygame for tinypy¶\n\ntinypy is a tiny version of python, with less than 64K of source code. Porting pygame so it works on tinypy would mean a very minimal python optimised for pygame games. Your journey will take you to the land where bits and bytes are counted, so be sure to fasten your C belt and have your good C coding skills around.\n\nEasy simple software 3d.¶\n\nSoftware 3D with the possible option of adding hardware 3D support would be nice to have. Possibly something like tinyGL being used by pygame , and a few extra parts, or just something like a textured polygon drawer. Basically... model = load_model();model.render(screen, (0,0))\n\nYou will require some knowledge about 3D APIs and techniques, good C skills and to be strong enough to survive the 2D vs. 3D debates.\n\nImproved graphics format support¶\n\nPygame could deal with even more graphics formats. This would widen its usage fields and allow developers to stick with their preferred graphics requirements.\n\nAdd alpha channel management for 8-bit palettes\n\nSupport for float formats and MJPEG and animated GIFs, etc.\n\nMore colour spaces, more conversion routines for graphics, more, more, more\n\nDo research on imaging libraries such as PIL and ImageMagick to evaluate how they can be used or routines be incorporated in pygame\n\nYou already should have some undertanding about colour spaces, image formats and conversion routines as well as good C coding skills.\n\nSDL_pygame¶\n\nA pure C library port based on some parts of pygame has been started recently. It aims to clearly isolate certain parts of pygame and wrap them up in a set of functions and modules for C/SDL developers.\n\nImplement a cross-platform build suite for the currently availabe SDL_pygame\n\nIsolate and migrate code portions of pygame to SDL_pygame.\n\nYou will require good C coding skills, some knowledge about cross-platform development and build systems such as make.\n\nHard¶\n\nThese are extremely difficult projects, and are recommended to be undertaken only if the student has significant prior experience in the subject matter.\n\nOSC networking¶\n\nOSC is like the new midi protocol for networks. This would let pygame talk to a lot of synths, and music programs. It's a latency aware protocol, so it has high resolution time stamps, and bundles of atomic operations, and you can schedule events in the future etc.\n\nAll things which are useful for interactive music stuff, but also for games. There's already code that does this, and pygame would then be more useful for multimedia and art type applications.\n\nLinks about it:\n\nhttp://en.wikipedia.org/wiki/OpenSound_Control\n\nhttp://opensoundcontrol.org/\n\nhttp://www.ixi-audio.net/content/body_backyard_python.html - this is using pygame actively for that purpose. Super collider is the main one to note here. It's a cool programmable synth. It is a smalltalk like language, but the synth part runs as a server controlled by OSC. So you can use it from other programs. But other apps can be controlled with OSC too.\n\nYou will require strong C skills, having done some network programming already and be really interested in music and synths.\n\nUnsorted or Incomplete¶\n\nPlease help complete these project ideas and categorize their difficulty. Include references to pages with more information if possible, and give a rough outline of what the project would involve, like where to start, and what languages the coding would be in.\n\nSVG support¶\n\nSupport for importing and rendering SVG files is missing from Pygame. This is currently possible using pycairo to render the image and then loading it into pygame, but a more direct route may be desirable.\n\npygame on flash¶\n\nDuring the europython 2007 pypy sprints some people made a proof of concept pygame running on the flash vm.\n\nAnother sprint is going to continue this work at pycon 2008:\n\nhttp://us.pycon.org/2008/sprints/projects/#pygame-on-flash\n\nContinue this work to get pygame games running unmodified(or mostly unmodified) on flash.\n\nEasy networking¶\n\nThere were something like 12 student applications for this in 2006.\n\nAI module¶\n\nai. A*, flocking etc.\n\nOptimize functions¶\n\nGet a decent vectorizing compiler like vectorC or an intel compiler to help generate mmx assembly for a lot of stable functions.\n\nArchitecture specific modules compiled. This could even take advantage of normal gcc optimization flags, which can give a nice speed boost, eg. surface.so, surface_686.so, surface_x86_64.so.\n\nSo the setup.py could be changed to compile with different CFLAGS, and then have the modules load the correct one for the particular cpu at runtime(if the module is available).\n\nVideo effect plugins.¶\n\nUsing some of the real time video effect plugins would be good. There's a video effect plugins that would also be kind of fun for games too :)\n\nProbably be a pretty simple module to write to allow using the video effect plugins.\n\nhttp://www.piksel.no/pwiki/LiViDO\n\nhttp://effectv.sourceforge.net/\n\nAlso some of the video stuff from freej (an SDL based VJ software) could be cool to place into pygame. Of course freej uses livido plugins for effects too."
    }
}