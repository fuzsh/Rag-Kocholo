{
    "id": "dbpedia_8580_2",
    "rank": 14,
    "data": {
        "url": "https://www.simplilearn.com/tutorials/c-tutorial/format-specifiers-in-c",
        "read_more_link": "",
        "language": "en",
        "title": "Format Specifiers in C: An Ultimate Explanation",
        "top_image": "https://www.simplilearn.com/ice9/free_resources_article_thumb/format_Specifiers_in_c.jpg",
        "meta_img": "https://www.simplilearn.com/ice9/free_resources_article_thumb/format_Specifiers_in_c.jpg",
        "images": [
            "https://www.simplilearn.com/ice9/new_logo.svgz",
            "https://www.simplilearn.com/ice9/free_resources_article_thumb/format_Specifiers_in_c.jpg",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png",
            "https://www.simplilearn.com/ice9/assets/form_opacity.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "format Specifiers in c"
        ],
        "tags": null,
        "authors": [
            "Hoor Sania S"
        ],
        "publish_date": "2022-07-21T15:04:37+05:30",
        "summary": "",
        "meta_description": "Format specifiers in C are used to take inputs and print the output of a type. Click here to know more.",
        "meta_lang": "en",
        "meta_favicon": "https://www.simplilearn.com/static/frontend/images/favicon.png",
        "meta_site_name": "Simplilearn.com",
        "canonical_link": "https://www.simplilearn.com/tutorials/c-tutorial/format-specifiers-in-c",
        "text": "In C programming language, values can be type integer, floating-point, single character, or sequence of characters. We use format specifiers in C to display values of a variable of a different type.Â\n\nC contains different format specifiers used in printf() and scanf() functions; in this tutorial, we will go through a few important and most commonly used format specifiers in our C programs.\n\nWhy Do We Use C Format Specifiers?\n\nFormat specifiers in C are used to take inputs and print the output of a type. The symbol we use in every format specifier is %. Format specifiers tell the compiler about the type of data that must be given or input and the type of data that must be printed on the screen.\n\nNow that you have a brief idea of format specifiers in C, we have a few lists of format specifiers moving ahead. Â\n\nThe Most Commonly Used Format Specifiers in C\n\nThe Most commonly used format specifiers are given below:\n\nWe will go through a few examples that will help you understand how to use format specifiers in printf() and scanf() functions for a better understanding.\n\n%d (Decimal Integer) Format SpecifierÂ\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â int a=50;\n\nÂ Â Â Â printf(\"The integer value of a is %d \\n\",a);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%c (Character) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â char s;\n\nÂ Â Â Â printf(\"Enter the character \\n\");\n\nÂ Â Â Â scanf(\"%c\",&s);\n\nÂ Â Â Â printf(\"The character is: %c\",s);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%f (Floating Point) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â float a=3;\n\nÂ Â Â Â printf(\"The floating point of a is %f \\n\",a);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%e (Floating Pointer Number) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â float a=12.5;\n\nÂ Â Â Â printf(\"The floating-point of a is %e \\n\",a);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%s (String) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â char s[15]=\"simplilearn\";\n\nÂ Â Â Â printf(\"The string value of s is %s \\n\",s);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%lf (Double) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â double d=12.5;\n\nÂ Â Â Â printf(\"The double value of d is %lf \\n\",d);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%o (octal integer) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â int oct=11;\n\nÂ Â Â Â printf(\"The octal integer value of oct is %o \\n\",oct);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%x (Hexadecimal Integer) Format Specifier\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â int h=14;\n\nÂ Â Â Â printf(\"The hexadecimal value of h is %x \\n\",h);\n\nÂ Â Â Â return 0;\n\n}\n\nOutput:\n\n%p (Prints Memory Address) Format Specifier\n\nTo find the memory address that holds values of a variable, we use the %p format specifier, and it prints in hexadecimal form.\n\n#include <stdio.h>\n\nint main()\n\n{\n\nÂ Â Â Â int sum=0;\n\nÂ Â Â Â printf(\"The memory address of sum is %p \\n\",&sum);\n\nÂ Â Â Â return 0;\n\n}\n\noutput:\n\nWith that, you can conclude this tutorial on Format Specifiers in C\n\nNext Steps\n\n\"Data Structures in C\" can be your next topic. So far, you have learned why we use format specifiers in C. The next fundamentals will be the data structures and the varieties in data structures used for different purposes.\n\nIf you are interested in building a career in software development, then feel free to explore Simplilearn's Courses that will give you the work-ready software development training you need to succeed today. Are you perhaps looking for a more comprehensive training program in the most in-demand software development skills, tools, and languages today? If yes, our Full Stack Developer - MERN Stack should be the right thing for your career. Explore the course and enroll soon.\n\nPlease let us know in the comment section below if you have any questions regarding the \"Format specifiers in C â tutorial. Our experts will get back to you at the earliest."
    }
}