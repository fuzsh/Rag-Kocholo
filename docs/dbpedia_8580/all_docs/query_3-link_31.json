{
    "id": "dbpedia_8580_3",
    "rank": 31,
    "data": {
        "url": "https://ellipsiseducation.com/blog/concepts-in-every-coding-language",
        "read_more_link": "",
        "language": "en",
        "title": "These 4 Concepts are in EVERY Coding Language",
        "top_image": "https://ellipsiseducation.com/wp-content/uploads/2023/02/pexels-miguel-a-padrinan-1111368.jpg",
        "meta_img": "https://ellipsiseducation.com/wp-content/uploads/2023/02/pexels-miguel-a-padrinan-1111368.jpg",
        "images": [
            "https://www.facebook.com/tr?id=1260632077429044&ev=PageView&noscript=1",
            "https://www.facebook.com/tr?id=447190822736105&ev=PageView&noscript=1",
            "https://px.ads.linkedin.com/collect/?pid=1594532&fmt=gif",
            "https://ellipsiseducation.com/wp-content/uploads/2024/03/ellipsis-logo.png",
            "https://ellipsiseducation.com/wp-content/uploads/2024/03/ellipsis-logo.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/JUSTIS-GIPSON.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/JUSTIS-GIPSON.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/AmyMarcou_social.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/AmyMarcou_social.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/pexels-miguel-a-padrinan-.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/pexels-miguel-a-padrinan-.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/04/david-holifield-kPxsqUGneXQ-unsplash-scaled.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/04/david-holifield-kPxsqUGneXQ-unsplash-scaled.jpg",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_JavaScript.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_JavaScript.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_Java.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_Java.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/mathematical.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/mathematical.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/relational.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/relational.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/logical.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/logical.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/ControlStructure_Scratch.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/ControlStructure_Scratch.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_Java-1.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/Abstraction_Java-1.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/DataStructures_Java.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/DataStructures_Java.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/DataStructures_Scratch.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/03/DataStructures_Scratch.gif",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/ellipsis.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/ellipsis.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/location.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/location.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/call.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/call.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/email.png",
            "https://ellipsiseducation.com/wp-content/uploads/2023/02/email.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Admin"
        ],
        "publish_date": "2021-04-06T09:11:13+00:00",
        "summary": "",
        "meta_description": "Explore the 4 similarities found in ALL programming languages. Learn how to use them in your classroom regardless of the grade you teach.",
        "meta_lang": "en",
        "meta_favicon": "https://ellipsiseducation.com/wp-content/themes/codelicious/assets/images/favicon.ico",
        "meta_site_name": "Ellipsis Education",
        "canonical_link": "https://ellipsiseducation.com/blog/concepts-in-every-coding-language",
        "text": "Like spoken languages, programming languages are continuously evolving. They are created to be useful to us, and when they are no longer useful, we adapt them. The sky’s the limit on how many new programming languages will be developed as new technological needs are identified.\n\nIn this blog, instead of focusing on the infinite number of programming languages and how they are different, we’re going to focus on how they’re all THE SAME! As defined above, programming languages are the principal method of communication for a computer by using words, symbols, and punctuation in a very structured way. Because computer science is much more than learning programming languages, the good news is this… you don’t have to know them all. Fortunately, by understanding (and teaching your students) the following four core programming concepts that all programming languages have in common, you will create that necessary foundation for adapting to current and future languages. These concepts will be used when teaching computer science basics for beginners as well as through high school computer programming curriculum and beyond. So, what are the fundamentals of computer science found in every programming language? Read on to learn about abstraction, sequencing, control structures, and data structures.\n\nAbstraction\n\nUnderstanding the process of abstraction as it relates to programming is perhaps one of the most important core concepts to understand. It is one of the fundamentals of computer science and software development. According to John V. Guttag, a computer scientist, professor, and former head of the department of Electrical Engineering and Computer Science at MIT, “the essence of abstraction is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context.”1 In other words, the goal of abstraction is to reduce complexity by removing all of the unnecessary information. This is what creates a comfortable, easy user experience without having to know everything that’s going on behind the scenes.\n\nHere is another example of abstraction in your everyday life. What you see on the home screen of your tablet, or on your desktop screen, is made possible because of abstraction. That interface is a simplified, user-friendly version of very complex processes and lines of code firing behind the scenes. Because of abstraction, you don’t have to worry about the quantum mechanics, the technicalities of coding, or the binary processes happening in order for an app to launch when pressed. One might say that HTML is one of the programming languages where abstraction is needed the most. Introduce HTML and JavaScript to your students with this free lesson for grades 6-8.\n\nAbstracted layers provide simpler versions of the same processes by embodying all that lies beneath it. What starts as a very granular, complex implementation of a program becomes a much more common and understandable process thanks to abstraction.\n\nSequencing\n\nAnother foundational concept in all programming languages is sequencing. Sequencing is outlining a proper order for instructions and patterns when writing code. You can better appreciate the value of sequencing when you learn more about algorithms, the use of proper syntax in code, and more specifics about functions, methods, parameters and operators. All of these elements can be found in any programming language.\n\nALGORITHMS\n\nAn algorithm is a list of steps followed in order to complete a task (run a program). Through the lens of sequencing, the steps that make up the algorithm must be followed in exactly the right order for the task to be completed. Both the order of the steps and the level of detail are significant when it comes to writing algorithms. All programming languages create programs by coding these algorithms in a way that a machine can understand. To teach algorithms in the classroom, try out this free Scratch lesson. It is a downloadable fundamentals of computer science pdf that is sure to get your students excited about programming!\n\nSYNTAX\n\nSyntax refers to the specific structure, grammar, and punctuation rules that must be followed for that programming language. Programming languages will differ in their syntax rules when writing and formatting lines of code, but proper syntax plays a role in how ALL languages are written and interpreted by the computer. For example, just as a period designates the end of sentence in written language, there is punctuation in programming languages to organize code and tell a computer a command has ended before it can move on to the next line. If there are any errors with the syntax of code, a program will not run successfully. Check out an example of syntax in this free lesson for Python fundamentals of computer science high school.\n\nFUNCTIONS/METHODS/PARAMETERS/ARGUMENTS\n\nIf we think of algorithms as the list steps in a program, functions and methods are helpful procedures to implement those algorithms. More specifically, functions are self-contained modules of code that accomplish a specific task. Methods are procedures associated with an object, and how that method is implemented then determines how data is manipulated. Finally, parameters and arguments are values passed to the functions as data for the algorithm to digest. So, as it relates to the art of sequencing in programming languages, recognizing the presence of these procedures in code and knowing their role is to influence how data is presented to the computer is important. Introduce functions, methods, parameters, and arguments with this free lesson for grades 3-5. The lesson comes from our fundamentals of computer science course. Check out all of the courses we offer in our K-12 computer science curriculum here.\n\nOPERATORS\n\nIn programming languages, an operator is a symbol that tells code to perform certain operations to produce a final result. Operators will always be a symbol (or a group of symbols) that is mathematical, logical, or relational in nature. Even in programming, the order of operations still matters because they tell a computer what next steps to take. Learn more about specific types of operators in the charts below:\n\nScratch is developed by the Lifelong Kindergarten Group at the MIT Media Lab. See http://scratch.mit.edu\n\nBRANCHING\n\nWhen a computer comes to a point in an algorithm where it has to choose to do one of two (or more) things, we call it branching. Branching allows programmers to control the flow of execution by ‘jumping’ to a different part of the program. There are many control structures used in programming languages, but the most common programming “statement” used to branch is the “IF” statement, or the “IF-THEN” statement. This is an example of a control structure in all programming languages called a conditional. Triggers and Events are other common branching elements that help control the flow of code in any program.\n\nData Structures\n\nLast but not least, let’s talk about data structures! In a nutshell, data structures help a programmer organize and process data. Numerous types of data structures exist, but as with the previous three concepts, they will appear and play an essential role in all programs regardless of the programming language. The type of data structure you use will often be determined by how quickly you need to be able to do certain things to the data and how often. Some of the more common examples of data structures you will find among line-coding (and block-coding) languages are:\n\nVARIABLES\n\nA variable serves the same purpose in programming languages as in mathematical equations. They are placeholders for data, or information, that may or may not change. Variables can hold only one piece of data at a time, but that data could be many different things, including integers, strings, booleans, and arrays (mentioned below). Variables allow data to be used and manipulated throughout a program.\n\nDATA TYPES\n\nAs mentioned above, variables represent multiple types of information throughout any program. This allows the same program to run, but perhaps produce a different result based on how those variables are populated (or are entered). Usually a combination of the following data types will appear in a program.\n\nString: text or any combination of characters (letters, numbers, symbols)\n\nCharacter: single letters\n\nIntegers: whole numbers\n\nFloat: floating point numbers/real numbers (decimal points)\n\nBoolean: true/false, yes/no, binary\n\nDATA STRUCTURE TYPES (ARRAY, OBJECTS, LINKED LISTS)\n\nKnowing what we know now about variables and data types, let’s clarify how data structure types fit into this picture. Variables hold the spot for data to be entered. Data types are the various forms of data that will be entered in the place of those variables. Data structure types include a collection of data, or variables, organized in such a way that allows for easy access and modification. Some of the more common data structure types a programmer will use in any programming language are objects, arrays, and linked lists. Although data structure types can be called different names amongst programming languages, they are necessary to organize and provide ‘structure’ to groups of variables (data)."
    }
}