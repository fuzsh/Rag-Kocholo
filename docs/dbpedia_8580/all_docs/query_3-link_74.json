{
    "id": "dbpedia_8580_3",
    "rank": 74,
    "data": {
        "url": "https://julialang.org/",
        "read_more_link": "",
        "language": "en",
        "title": "The Julia Programming Language",
        "top_image": "https://julialang.org/assets/infra/julia.ico",
        "meta_img": "https://julialang.org/assets/infra/julia.ico",
        "images": [
            "https://julialang.org/assets/infra/logo.svg",
            "https://julialang.org/assets/infra/minesweeper.png",
            "https://julialang.org/assets/infra/parallel-prefix.png",
            "https://julialang.org/assets/infra/cartpole.gif",
            "https://julialang.org/assets/infra/lorenz.gif",
            "https://julialang.org/assets/infra/onlinestats.gif",
            "https://julialang.org/assets/infra/waves.gif",
            "https://julialang.org/assets/infra/discourse.svg",
            "https://julialang.org/assets/infra/github.svg",
            "https://julialang.org/assets/infra/zulip.svg",
            "https://julialang.org/assets/infra/slack.png",
            "https://julialang.org/assets/infra/twitter.svg",
            "https://julialang.org/assets/infra/youtube.svg",
            "https://julialang.org/assets/infra/linkedin.png",
            "https://julialang.org/assets/infra/twitch.png",
            "https://julialang.org/assets/infra/vscode.png",
            "https://julialang.org/assets/infra/jupyter.svg",
            "https://julialang.org/assets/infra/pluto_jl.svg",
            "https://julialang.org/assets/infra/vim.png",
            "https://julialang.org/assets/infra/emacs.png",
            "https://julialang.org/assets/infra/Debug.png",
            "https://julialang.org/assets/infra/profile.png",
            "https://julialang.org/assets/infra/revise.png",
            "https://julialang.org/assets/infra/gpu.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jeff Bezanson",
            "Stefan Karpinski",
            "Viral Shah",
            "Alan Edelman"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "The official website for the Julia Language. Julia is a language that is fast, dynamic, easy to use, and open source. Click here to learn more.",
        "meta_lang": "en",
        "meta_favicon": "/assets/infra/julia.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Parallel and Heterogeneous Computing\n\nJulia is designed for parallelism, and provides built-in primitives for parallel computing at every level: instruction level parallelism, multi-threading, GPU computing, and distributed computing. The Celeste.jl project achieved 1.5 PetaFLOP/s on the Cori supercomputer at NERSC using 650,000 cores.\n\nThe Julia compiler can also generate native code for GPUs. Packages such as DistributedArrays.jl and Dagger.jl provide higher levels of abstraction for parallelism. Distributed Linear Algebra is provided by packages like Elemental.jl and TSVD.jl. MPI style parallelism is also available through MPI.jl.\n\nScalable Machine Learning\n\nThe MLJ.jl package provides a unified interface to common machine learning algorithms, which include generalized linear models, decision trees, and clustering. Flux.jl and Lux.jl are powerful packages for Deep Learning. Packages such as Metalhead.jl, ObjectDetector.jl, and TextAnalysis.jl provide ready to use pre-trained models for common tasks. AlphaZero.jl provides a high performance implementation of the reinforcement learning algorithms from AlphaZero. Turing.jl is a best in class package for probabilistic programming.\n\nRich Ecosystem for Scientific Computing\n\nJulia is designed from the ground up to be very good at numerical and scientific computing. This can be seen in the abundance of scientific tooling written in Julia, such as the state-of-the-art differential equations ecosystem (DifferentialEquations.jl), optimization tools (JuMP.jl and Optim.jl), iterative linear solvers (IterativeSolvers.jl), Fast Fourier transforms (AbstractFFTs.jl), and much more. General purpose simulation frameworks are available for Scientific Machine Learning, Quantum computing and much more.\n\nJulia also offers a number of domain-specific ecosystems, such as in biology (BioJulia), operations research (JuMP Dev), image processing (JuliaImages), quantum physics (QuantumBFS), nonlinear dynamics (JuliaDynamics), quantitative economics (QuantEcon), astronomy (JuliaAstro) and ecology (EcoJulia). With a set of highly enthusiastic developers and maintainers, the scientific ecosystem in Julia continues to grow rapidly.\n\nInteract with your Data\n\nThe Julia data ecosystem provides DataFrames.jl to work with datasets, and perform common data manipulations. CSV.jl is a fast multi-threaded package to read CSV files and integration with the Arrow ecosystem is in the works with Arrow.jl. Online computations on streaming data can be performed with OnlineStats.jl. The Queryverse provides query, file IO and visualization functionality. In addition to working with tabular data, the JuliaGraphs packages make it easy to work with combinatorial data.\n\nJulia can work with almost all databases using JDBC.jl and ODBC.jl drivers. In addition, it also integrates with the Spark ecosystem through Spark.jl.\n\nData Visualization and Plotting\n\nData visualization has a complicated history. Plotting software makes trade-offs between features and simplicity, speed and beauty, and a static and dynamic interface. Some packages make a display and never change it, while others make updates in real-time.\n\nPlots.jl is a visualization interface and toolset. It provides a common API across various backends, like GR.jl, PyPlot.jl, and PlotlyJS.jl. Makie.jl is a sophisticated package for complex graphics and animations. Users who are used to \"grammar of graphics\" plotting APIs should take a look at Gadfly.jl. VegaLite.jl provides the Vega-Lite grammar of interactive graphics interface as a Julia package. For those who do not wish to leave the comfort of the terminal, there is also UnicodePlots.jl."
    }
}