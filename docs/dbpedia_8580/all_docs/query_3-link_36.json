{
    "id": "dbpedia_8580_3",
    "rank": 36,
    "data": {
        "url": "https://camunda.com/blog/2022/09/seven-best-programming-languages-for-microservices/",
        "read_more_link": "",
        "language": "en",
        "title": "6 Best Programming Languages for Microservices",
        "top_image": "https://camunda.com/wp-content/uploads/2022/09/6-Best-Programming-Languages-Microservices_1200x630-1.jpg",
        "meta_img": "https://camunda.com/wp-content/uploads/2022/09/6-Best-Programming-Languages-Microservices_1200x630-1.jpg",
        "images": [
            "https://camunda.com/wp-content/uploads/2020/05/logo-camunda-black.svg",
            "https://camunda.com/wp-content/uploads/2022/09/6-Best-Programming-Languages-Microservices_1200x630-1.jpg",
            "https://camunda.com/wp-content/themes/camunda/assets/svg/x.svg",
            "https://camunda.com/wp-content/themes/camunda/assets/svg/mastodon.svg",
            "https://camunda.com/wp-content/uploads/2023/05/newsletter-general.png",
            "https://camunda.com/wp-content/uploads/2023/01/pasted-image-0-2-1-300x225.png",
            "https://camunda.com/wp-content/uploads/2023/01/pasted-image-0-3-1-300x300.png",
            "https://camunda.com/wp-content/uploads/2023/01/pasted-image-0-4-1-300x150.png",
            "https://camunda.com/wp-content/uploads/2023/01/pasted-image-0-5-1-300x300.png",
            "https://camunda.com/wp-content/uploads/2022/09/python-300x300.png",
            "https://camunda.com/wp-content/uploads/2022/09/haskell-300x208.png",
            "https://camunda.com/wp-content/themes/camunda/assets/svg/x.svg",
            "https://camunda.com/wp-content/themes/camunda/assets/svg/mastodon.svg",
            "https://camunda.com/wp-content/uploads/2023/07/trial-icon.svg",
            "https://camunda.com/wp-content/uploads/elementor/thumbs/Camunda-Logo_White-300-qos2chxe54kyb1y9fsv3dm9fm4o0i4ek7lluj9v1qo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Josh Wulf"
        ],
        "publish_date": "2024-07-17T13:30:00+00:00",
        "summary": "",
        "meta_description": "Learn about the best programming languages for microservices, plus how to compose and orchestrate microservices for your project.",
        "meta_lang": "en",
        "meta_favicon": "https://camunda.com/wp-content/uploads/2022/02/Secondary-Logo_Rounded-Black-150x150.png",
        "meta_site_name": "Camunda",
        "canonical_link": "https://camunda.com/blog/2022/09/seven-best-programming-languages-for-microservices/",
        "text": "Microservices are an architectural style that structures an application as a collection of services that are:\n\nHighly maintainable and testable\n\nLoosely coupled\n\nIndependently deployable\n\nOrganized around business capabilities\n\nOwned by a small team\n\nConway’s Law states that “any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure”.\n\nIf your organization has multiple teams working on different parts of a larger system, then microservices can serve as a separation of concerns that map an independent, encapsulated service to a specific team. These teams have clear boundaries of responsibility and can deploy on their own schedule.\n\nThese factors lend themselves to a polyglot approach. What this means is that because each service is independently developed and deployed, loosely coupled, and owned (potentially) by different teams, these services can be written in different languages.\n\nBut what’s the best programming language for writing microservices?\n\nIt depends.\n\nWhat does it depend on? A number of factors.\n\nIn this article, I’ll examine six languages I would consider for my next microservices project, and examine them in light of several factors, including technical considerations, social (ecosystem) considerations, and economic considerations.\n\nThe six that I’ll cover:\n\nJava\n\nC#\n\nGo\n\nTypeScript\n\nPython\n\nHaskell\n\nThese six languages were chosen based on the following factors:\n\nPopularity (as determined by this index).\n\nSuitability for microservices (for example: PHP is popular, but not a popular choice for microservices).\n\nBest in a particular class (for example: Haskell is not high in absolute popularity, but among functional language advocates, it is high).\n\nI mention a number of other notable languages that didn’t make the cut for the top six, but are still worthy of consideration. I leave it to you to do the comparison for those.\n\nSo, let’s dive in. Here are some of the best languages for microservices.\n\nJava\n\nCreated in 1995, Java is one of the most popular programming languages in the world. The length of time it has been maintained and its popularity mean it is a solid choice. There is a saying that “nobody ever got fired for buying IBM,” and the same could be said for Java — Nobody ever got fired for choosing Java as the implementation language.\n\nJava can’t be divorced from the Java Virtual Machine (JVM), a cross-platform execution environment that allows Java code to be “written once, run anywhere.” The JVM allows for economies of scale.\n\nYou are unlikely to deploy your service on multiple operating systems, but you do benefit from the economies of scale created by developers being able to switch between target operating systems. This means there is a larger market of developers who target the JVM to hire from.\n\nThis economy of scale also means there is a massive ecosystem. Spring Boot is a popular and powerful framework that can be used to build microservices in Java. Micronaut is another popular option.\n\nA major problem with early versions of the JVM was performance. The JVM is an abstraction layer, and any abstraction introduces overhead. Modern JVM versions have solved performance at runtime, particularly GraalVM. To deal with the startup overhead, Quarkus is an option. This is particularly an issue for reactive architectures such as Function-as-a-Service (lambda functions).\n\nYou can also target the JVM with other languages such as Kotlin, Scala, or Ballerina. Using these languages, you can leverage the existing Java ecosystem of libraries and frameworks through Java-interoperability.\n\nJava does suffer from the “billion dollar mistake” of the Null Pointer Exception. Java 8 introduced the Optional type to guard against this. Kotlin uses non-nullable types, which makes this protection a default feature of the language.\n\nHere is some example Java code using Spring Boot to implement a REST route:\n\npackage com.example.springboot; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloController { @GetMapping(\"/\") public String index() { return \"Greetings from Spring Boot!\"; } }\n\nConclusion\n\nPros\n\nMassive ecosystem of support.\n\nLong history of successful enterprise applications.\n\nLarge pool of developers.\n\nCons\n\nVerbose syntax (alt-JVM langs like Kotlin address this).\n\nWide variation in the skill levels of developers.\n\nWhen does it make sense?\n\nYou already have a Java skill set.\n\nYou want a large pool of developers to hire from, or to outsource some development.\n\nYou want to leverage JVM expertise for deployment and management and have the option of alt-JVM languages.\n\nC#\n\nC# is a programming language originally developed by Microsoft as a response to Sun blocking them from extending the JVM and the Java language on Windows – a move that, if Sun had allowed it, would have eroded the “write once, run anywhere” value proposition of Java.\n\nC# is very similar to Java in its syntax. They are both modern C-based languages with an object-oriented focus and functional influences. As noted, C# started its life as Microsoft’s Windows-only alternative to Java. The .NET VM is the underlying virtual machine targeted by C# compiled intermediate language.\n\nIn recent years, the .NET VM has gone cross-platform, with .NET Core, allowing C# code to run on Linux and Mac operating systems. This allows developers to target Linux servers with C# code.\n\nDue to its massive installed base on Windows–even though cross-platform is relatively new to .NET and C#–there is a huge ecosystem of libraries. Microsoft’s own framework ASP.NET can be used to develop microservices.\n\nC# 8.0 introduced nullable reference types as a guard against Null Pointer Exceptions at runtime.\n\nHere is some C# code implementing a REST route in ASP.NET:\n\n[ApiController] public class PeopleController : ControllerBase { [HttpGet(\"people/all\")] public ActionResult> GetAll() { return new [] { new Person { Name = \"Ana\" }, new Person { Name = \"Felipe\" }, new Person { Name = \"Emillia\" } }; } }\n\nConclusion\n\nPros\n\nSolid support from Microsoft, with a large installed base and deep pockets.\n\nSignificant pool of developers.\n\nCons\n\nVerbose syntax.\n\nWide variation in the skill levels of developers.\n\nWhen does it make sense?\n\nYou already have a C# skill set.\n\nYou’re all about Windows\n\nGo\n\nGo is a modern network and systems programming language, developed by Google and released as 1.0 in 2012. It is a statically typed, compiled language that produces statically linked native binaries, rather than intermediate code for execution in a VM, in contrast to Java and C#.\n\nGo was developed to provide a modern, low-level system and network programming language that balances power (for example, pointers) and safety (for example, memory management).\n\nIt includes features like a standardized set of formatting rules and a built-in utility to apply them to the code base. No more bike-shedding about tabs versus spaces.\n\nYou can do very low-level network programming with Go, but that’s probably not what you want for microservices. There is a plethora of frameworks for building on top of high-level abstractions, and that can be a challenge. You have the Gin Web Framework, Buffalo, Gorilla, Fiber, and Echo (among others) to choose from.\n\nMany microservice and web frameworks in Go are written by “refugees” from other programming languages. So you’ll find one that is familiar to Ruby on Rails developers, one that is familiar to Node.js developers who have used Express, and so on.\n\nProgrammers frequently report “rediscovering the joy of programming” after encountering Go. TJ Holowaychuk, one of the early adopters of Node.js and a major contributor to the Node ecosystem, switched to Go, and wrote an article in 2014 about why he left Node for Go (with an update in 2017).\n\nGo doesn’t have protection from nil pointer exceptions at runtime, although it does have an error, result pattern that enforces error handling, which provides program safety in a large number of cases.\n\nExample Go code:\n\nfunc ListAction(out http.ResponseWriter, req *router.Request) { resource, exists := resources[req.Param(\"resource\")] if exists == false { //todo: return not found return } action, exists := resource[\"list\"] if exists == false { //todo: return not found return } action(out, req) }\n\nConclusion\n\nPros\n\nA modern language.\n\nDesigned with safety and ergonomics in mind for recent graduate programmers.\n\nCons\n\nWild West ecosystem.\n\nSmaller pool of developers to hire from.\n\nWhen does it make sense?\n\nYou are passionate about Go.\n\nYou have a team that will rediscover its passion for programming if allowed to use it.\n\nYou want something safer than JavaScript.\n\nTypeScript\n\nTypeScript is a superset of JavaScript that adds optional strict typing. It transpiles to JavaScript for execution in a JavaScript interpreter.\n\nJavaScript itself is a dynamic and weakly typed language, originally written in 1995 (in ten days) to enable small amounts of interactivity in web pages. It has since scaled up to power entire applications in the browser, and now server-side code with Node.js, Deno, or Bun.\n\nJavaScript managed to get everywhere and become such a widely used language because its “virtual machine” got installed on every single internet-connected computer via inclusion in the web browser, whereas the .NET and Java Virtual Machines did not have such a vector.\n\nAs a result of its explosive organic growth, JavaScript as a language has less of an architectured nature than it has an evolved one.\n\nTypeScript was developed to deal with many of the problems that arise when using a dynamic, interpreted language to build large-scale applications. TypeScript makes JavaScript progressively strictly typed. Code bases can be reasoned over by static analysis, refactoring is enhanced, code hinting and autocompletion are enhanced, and transpilation adds a layer of safety.\n\nTypeScript was designed by Anders Hejlsberg, the language designer of C#, so it is familiar to C# and even Java developers.\n\nThere is a massive ecosystem of libraries and frameworks for Node.js especially, from the batteries-included, ASP.NET-inspired NestJS, to the minimalist Express.\n\nThe NPM (Node Package Manager) website contains thousands of packages you can use in applications.\n\nYou can opt-in to Functional Programming patterns using libraries such as fp-ts to guard against runtime Null Pointer Exceptions, but that doesn’t go all the way down the stack. Libraries that you pull in can throw a runtime NPE.\n\nExample TypeScript code using NestJS:\n\nimport { Controller, Get } from '@nestjs/common'; @Controller('cats') export class CatsController { @Get() findAll(): string { return 'This action returns all cats'; } }\n\nExample TypeScript code using Express:\n\nimport express, { Express, Request, Response } from 'express';<br><br>const app: Express = express();<br>const port = process.env.PORT;<br><br>app.get('/', (req: Request, res: Response) => {<br> res.send('Express + TypeScript Server');<br>});<br><br>app.listen(port, () => {<br> console.log(<code>[server]: Server is running at https://localhost:${port});\n\n});\n\nConclusion\n\nPros\n\nMassive amount of libraries and frameworks.\n\nLarge number of developers who know JavaScript.\n\nTypeScript introduces safety features that aid less experienced developers.\n\nOne language across the entire stack.\n\nCons\n\nSecurity is a concern with NPM package pollution.\n\nMassive node_modules directory means applications can be very large.\n\nWhen does it make sense?\n\nYou want one language across the stack.\n\nYou have front-end engineers you want to work on the backend.\n\nPython\n\nPython is a high-level general-purpose interpreted language. Arguably, Python’s most distinct feature is “meaningful white space.” In place of the curly braces used by C-derived languages, Python uses indentation to indicate nesting.\n\nOriginally developed in the early 1980’s, Python is one of the most popular programming languages and is increasing in popularity given its heavy usage in data science.\n\nThe Python standard library alone can be used to write gRPC microservices, and there are a number of popular frameworks such as Flask, Django, Nameko, FastAPI, and MinOS that can be leveraged.\n\nPython doesn’t have protection against Null Pointer Exceptions.\n\nExample Python code implementing a REST route using Flask:\n\nfrom flask import Flask #importing the module app=Flask(<strong>name</strong>) #instantiating flask object @app.route('/') #defining a route in the application def func(): #writing a function to be executed return 'PythonGeeks' if <strong>name</strong>=='<strong>main</strong>': #calling main app.debug=True #setting the debugging option for the application instance app.run() #launching the flask's integrated development webserver\n\nConclusion\n\nPros\n\nLong-standing and large community, providing a wide range of libraries.\n\nAesthetically pleasing code formatting, if you hate curly braces.\n\nCons\n\nInterpreted, so speed can be an issue.\n\nMulti-threading is tricky.\n\nWhen does it make sense?\n\nYou already use Python.\n\nYour domain involves Machine Learning, Data Science, or AI.\n\nHaskell\n\nHaskell is a purely functional language. It is lazily evaluated and statically typed. Explicitly handling effects makes it a good match for concurrent processing. However, it has a very steep learning curve–not simply syntax, but paradigms. Originally developed as an academic language in a university, Haskell has become a popular language for some of the most advanced programmers who dwell deep within the abstractions of a program.\n\nHaskell programs, when they can be compiled, are guaranteed to run without unhandled runtime exceptions every time, 95% of the time. Haskell is extremely stable at runtime when a program is correctly specified.\n\nMu-haskell is a set of microservices libraries for Haskell. The paradigm of Haskell does not lend itself to frameworks, but rather to libraries.\n\nExample Haskell code implementing a gRPC server:\n\nmain :: IO () main = runGRpcApp msgProtoBuf 8080 server server :: (MonadServer m) => SingleServerT Service m _ server = singleService ()\n\nConclusion\n\nPros\n\nYour programs will be correct, and incredibly elegant expressions of logic.\n\nYou will be equally feared and respected by other programmers.\n\nCons\n\nHiring from a smaller pool of developers (offset by less competition).\n\nRuntime safety and program correctness is emphasized over developer productivity.\n\nWhen does it make sense?\n\nYou are bored with the programming languages of mortals, and want to write your next program on “Insane mode”.\n\nYou are passionate about functional programming.\n\nOther top languages for microservices: Notable mentions\n\nThere are several other languages that didn’t make the cut for this round-up—mostly due to being less popular—but deserve a shout-out:\n\nSwift – a modern (2014) programming language from Apple. Open-source and cross-platform, it has a number of frameworks such as Vapor and Perfect for writing microservices. Swift is high in popularity, due to its use in iOS apps, but is less widely used for microservices.\n\nRust – a modern (2006) programming language originally developed by Mozilla. Rocket and Tide are two frameworks for Rust microservices.\n\nDart – a modern (2011) cross-platform programming language from Google. Aqueduct is an all-included framework for Dart microservices.\n\nElixir – a modern (2012) functional language that runs on the BEAM VM. It is popular among Ruby on Rails developers looking for a more performant language. Phoenix is a popular Elixir framework.\n\nComposing Microservices\n\nOnce your business or functional domain is decomposed into microservices, you have another issue: where does the composition of these services exist as a concern?\n\nIn a choreography approach, the composition of the services is split across all the services. In this case, they know about each other, breaking the loose coupling principle, and at the same time making information about the coupling distributed.\n\nIn an orchestration approach, the composition of the services is the concern of a single component of the system such as Camunda, a business process engine for microservices orchestration. This component encapsulates the composition concern and provides a single operational interface. By using BPMN as the expression of the composition, you automatically get up-to-date documentation of the entire process composition, as well as a run-time map for operational reporting.\n\nCamunda supports polyglot microservice composition over gRPC, with a number of official and community-supported programming language clients, and the ability to easily create new ones in the programming language of your choice.\n\nWhile you are looking at the components for your next microservices project, take a look at Camunda for the orchestration piece. It is available as a zero-install SaaS with a free tier to develop on.\n\nFurther Resources\n\nTake a deeper dive into orchestration versus choreography for microservices by watching this talk by Camunda co-founder and chief technologist, Bernd Ruecker: Balancing Choreography and Orchestration • Bernd Rücker • GOTO 2020.\n\nLearn more about orchestrating microservices with Camunda. Check out Getting started with microservice orchestration | Camunda.\n\nTry Camunda at no cost: get a free, 30 day trial account here.\n\nEditor’s Note: This post was originally published in September 2022, and has been updated for accuracy and completeness."
    }
}