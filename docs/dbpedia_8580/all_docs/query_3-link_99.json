{
    "id": "dbpedia_8580_3",
    "rank": 99,
    "data": {
        "url": "https://learn.microsoft.com/en-us/azure/azure-functions/supported-languages",
        "read_more_link": "",
        "language": "en",
        "title": "Supported languages in Azure Functions",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-02-25T12:15:00+00:00",
        "summary": "",
        "meta_description": "Learn which languages are supported for developing your Functions in Azure, the support level of the various language versions, and potential end-of-support dates.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/azure/azure-functions/supported-languages",
        "text": "This article explains the levels of support offered for your preferred language when using Azure Functions. It also describes strategies for creating functions using languages not natively supported.\n\nThere are two levels of support:\n\nGenerally available (GA) - Fully supported and approved for production use.\n\nPreview - Not yet supported, but expected to reach GA status in the future.\n\nLanguages by runtime version\n\nFor information about planned changes to language support, see Azure roadmap.\n\nLanguage support details\n\nThe following table shows which languages supported by Functions can run on Linux or Windows. It also indicates whether your language supports editing in the Azure portal. The language is based on the Runtime stack option you choose when creating your function app in the Azure portal. This is the same as the --worker-runtime option when using the func init command in Azure Functions Core Tools.\n\nLanguage Runtime stack Linux Windows In-portal editing C# (isolated worker model) .NET â â C# (in-process model) .NET â â C# script .NET â â â JavaScript Node.js â â â Python Python â X â Java Java â â PowerShell PowerShell Core â â â TypeScript Node.js â â Go/Rust/other Custom Handlers â â\n\nFor more information on operating system and language support, see Operating system/runtime support.\n\nWhen in-portal editing isn't available, you must instead develop your functions locally.\n\nLanguage major version support\n\nAzure Functions provides a guarantee of support for the major versions of supported programming languages. For most languages, there are minor or patch versions released to update a supported major version. Examples of minor or patch versions include such as Python 3.9.1 and Node 14.17. After new minor versions of supported languages become available, the minor versions used by your functions apps are automatically upgraded to these newer minor or patch versions.\n\nNote\n\nBecause Azure Functions can remove the support of older minor versions at any time after a new minor version is available, you shouldn't pin your function apps to a specific minor/patch version of a programming language.\n\nCustom handlers\n\nCustom handlers are lightweight web servers that receive events from the Azure Functions host. Any language that supports HTTP primitives can implement a custom handler. This means that custom handlers can be used to create functions in languages that aren't officially supported. To learn more, see Azure Functions custom handlers.\n\nLanguage extensibility\n\nStarting with version 2.x, the runtime is designed to offer language extensibility. The JavaScript and Java languages in the 2.x runtime are built with this extensibility.\n\nNext steps"
    }
}