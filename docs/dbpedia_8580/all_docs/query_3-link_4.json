{
    "id": "dbpedia_8580_3",
    "rank": 4,
    "data": {
        "url": "https://cs.stackexchange.com/questions/140078/are-modern-programming-languages-context-free",
        "read_more_link": "",
        "language": "en",
        "title": "Are modern programming languages context-free?",
        "top_image": "https://cdn.sstatic.net/Sites/cs/Img/apple-touch-icon@2.png?v=324a3e0c2b03",
        "meta_img": "https://cdn.sstatic.net/Sites/cs/Img/apple-touch-icon@2.png?v=324a3e0c2b03",
        "images": [
            "https://cdn.sstatic.net/Sites/cs/Img/logo.svg?v=27188323e9e9",
            "https://i.sstatic.net/oxgSz.jpg?s=64",
            "https://lh6.googleusercontent.com/-i-CWV1_pt-M/AAAAAAAAAAI/AAAAAAAAAAA/AGDgw-jqU3QXa23F6o_PsG0uZP_6LaD1Zg/mo/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/zL7No.jpg?s=64",
            "https://i.sstatic.net/hvS4q.png?s=64",
            "https://www.gravatar.com/avatar/a382084bb1495af216e9a847c727d92e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/7Wi05.png?s=64",
            "https://cs.stackexchange.com/posts/140078/ivc/3e78?prg=6e756549-04c7-41a4-9430-28d615896365"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-05-08T20:36:39",
        "summary": "",
        "meta_description": "Which language class are today's modern programming languages like Java, JavaScript, and Python in?\nIt appears (?) they are not context-free and not regular languages.\nAre these programming languages",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/cs/Img/favicon.ico?v=0c1f5fd7a5e4",
        "meta_site_name": "Computer Science Stack Exchange",
        "canonical_link": "https://cs.stackexchange.com/questions/140078/are-modern-programming-languages-context-free",
        "text": "Practically no programming language, modern or ancient, is truly context-free, regardless of what people will tell you. But it hardly matters. Every programming language can be parsed; otherwise, it wouldn't be very useful. So all the deviations from context freeness have been dealt with.\n\nWhat people usually mean when they tell you that programming languages are context-free because somewhere in the documentation there's a context-free grammar, is that the set of well-formed programs (that is, the \"language\" in the sense of formal language theory) is a subset of a context-free grammar, conditioned by a set of constraints written in the rest of the language documentation. That's mostly how programs are parsed: a context-free grammar is used, which recognises all valid and some invalid programs, and then the resulting parse tree is traversed to apply the constraints.\n\nTo justify describing the language as \"context-free\", there's a tendency to say that these constraints are \"semantic\" (and therefore not part of the language syntax). [Note 1] But that's not a very meaningful use of the word \"semantic\", since rules like \"every variable must be declared\" (which is common, if by no means universal) is certainly syntactic in the sense that you can easily apply it without knowing anything about the meaning of the various language constructs. All it requires is verifying that a symbol used in some scope also appears in a declaration in an enclosing scope. However, the \"also appears\" part makes this rule context-sensitive.\n\nThat rule is somewhat similar to the constraints mentioned in this post about Javascript (linked to from one of your comments to your question): that neither a Javascript object definition nor a function parameter list can define the same identifier twice, another rule which is both clearly context-sensitive and clearly syntactic.\n\nIn addition, many languages require non-context-free transformations prior to the parse; these transformations are as much part of the grammar of the language as anything else. For example:\n\nLayout sensitive block syntax, as in Python, Haskell and many data description languages. (Context-sensitive because parsing requires that all whitespace prefixes in a block be the same length.)\n\nMacros, as in Rust, C-family languages, Scheme and Lisp, and a vast number of others. Also, template expansion, at least in the way that it is done in C++.\n\nUser-definable operators with user-definable precedences, as in Haskell, Swift and Scala. (Scala doesn't really have user-definable precedence, but I think it is still context-sensitive. I might be wrong, though.)\n\nNone of this in any way diminishes the value of context-free parsing, neither in practical nor theoretical terms. Most parsers are and will continue to be fundamentally based on some context-free algorithm. Despite a lot of trying, no-one yet has come up with a grammar formalism which is both more powerful than context-free grammars and associated with an algorithm for transforming a grammar into a parser without adding hand-written code. (To be clear: the goal I refer to is a formalism which is more powerful than context-free grammars, so that it can handle constraints like \"variables must be declared before they are used\" and the other features mentioned above, but without being so powerful that it is Turing complete and therefore undecidable.)\n\nNotes\n\nExcluding rules which cannot be implemented in a context-free grammar in order to say that the language is context-free strikes me as a most peculiar way to define context-freeness. Of course, if you remove all context-sensitive aspects of a language, you end up with a context-free superset, but it's no longer the same language.\n\nThe boundary between context-free and context-sensitive is only determined by one thing: whether or not it can be decided with a nondeterministic pushdown automata.\n\nWith respect to grammar specifically, most practical programming languages are almost context-free if not context-free, but the context-free/context-sensitive distinction isn't nearly as important as the ease of parsing. It's possible to create a context-free language that is difficult to parse or is ambiguous, and it is also possible to create a context-sensitive language that is easy to parse. Remember, the computers we use to parse programming languages are functionally equivalent to Turing machines (if given infinite memory) and are limited by the fact that they are deterministic. The determinism is the practical limiting factor that informs our choice in grammars that programming languages will use, so the boundary between context-free and context-sensitive is less practically interesting than the boundary between deterministic and nondeterministic.\n\n$LL_k$ and $LALR_k$ grammars form specific subsets of deterministic context-free grammars that can be parsed with generated tables within programs that simulate a deterministic pushdown automaton (which is less powerful than a nondeterministic one).\n\nOn the other hand, $PEG$ grammars have a handful of features that technically fall under the context-sensitive umbrella, however they can be parsed in linear time* with generated code, which outperforms generalized nondeterministic context-free parsing (The best known algorithm for CFGs is somewhere between quadratic and cubic time. This class of grammars includes certain obscure features that are technically context-free but are hard to parse- I don't know of any examples off the top of my head). PEGs have become quite popular for modern languages, and even Python has adopted its use for upcoming versions and new languages such as Zig have been using them from the beginning.\n\nHaving a \"more powerful\" grammar doesn't matter at all for the power of a programming language because the computing model they represent can simulate a Turing machine. In fact, it's often the opposite because \"more powerful\" grammars tend to be more difficult to parse and are therefore less friendly to both machines and computers (and slower to compile). C++ is a particularly notorious offender in this realm, with templates (and how they are expanded) having the ability to affect the parse tree. In fact, C++ is not even decidable because templates are Turing complete.\n\n*: Technically, there are some pathological cases that can cause catastrophic backtracking and explode the parsing to exponential time, however for most useful grammars and programs, this is not an issue. In addition, since PEG parsers typically cache intermediate parsing results, two rules that only differ slightly will not cause a tremendous amount of backtracking in order to properly select the correct rule, and smart code generators can mitigate the worst backtracks."
    }
}