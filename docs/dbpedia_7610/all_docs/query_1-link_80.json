{
    "id": "dbpedia_7610_1",
    "rank": 80,
    "data": {
        "url": "https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance.html",
        "read_more_link": "",
        "language": "en",
        "title": "Understanding Success Criterion 2.4.13: Focus Appearance",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-basic.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-solid-outline.svg",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-solid-border.svg",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-offset-types.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-custom-shapes-inset.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-custom-shapes-side-highlights.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-whole-star.svg",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-inline-link-outline.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-inline-link.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-star-with-light-focus.svg",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-innerline.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-background.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-background-passing.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-two-color-thick.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-two-color-thin.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-box-shadow.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-box-shadow-only.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-good-change-bad-adjacent.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-good-adjacent-bad-change.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/component-complex-whole.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/component-complex-both.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/component-complex-both-unselected.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/component-complex-sub.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-select.png",
            "https://www.w3.org/WAI/WCAG22/Understanding/img/focus-indicator-browser-defaults-modified-background.png",
            "https://www.w3.org/analytics/piwik/piwik.php?idsite=328&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Minimum area\n\nThe first part of the Success Criterion specifies a minimum area for the focus indicator:\n\nis at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component\n\nThis only specifies a minimum area for the focus indicator. It does not require that the focus indicator literally be a 2 CSS pixel thick outline, only that the indicator be at least that large.\n\nHowever, the simplest way to meet the size requirement is to use a focus indicator which is a solid 2 CSS pixel thick perimeter.\n\nNote\n\nA CSS pixel is what developers use in CSS declarations like ‚Äúwidth: 200px‚Äù. It is device-independent and not to be confused with device pixels which vary depending on the physical pixel density.\n\nThe rest of this document notates CSS pixels as ‚Äúpx‚Äù.\n\nUsing a solid outline\n\nThe easiest and most common way to meet this requirement is to use a solid outline around the component. The outline must be at least 2px thick. The following illustration shows a minimally thick focus indicator, where a 2px thick band of white pixels making up the page background around an example button have been altered to black.\n\nFor non-rectangular components, the \"perimeter\" definition allows authors to use either of the following types of outline:\n\na line which solidly encloses a shape, or\n\na line which solidly encloses the minimum bounding box of a shape\n\nFor example, a star-shaped button may use either a focus indicator that follows the shape of the star or a focus indicator that follows the bounding box of the star. In the following examples, the same three stars have already been selected, and focus is on the third star. The first example uses a focus indicator which matches the star shape of the focused star. The second uses a rectangular indicator.\n\nOffsetting indicators slightly from the focused component, as in the examples above, is not required to meet the minimum area requirement of the success criterion, but it can help make indicators more visible. In CSS, the outline and outline-offset properties are commonly used to achieve this.\n\nThe smallest possible 2 CSS pixel thick indicator that is still a \"perimeter\" is a solid line that appears inside the component against the component's outer edge, for example by using a CSS border property. Indicators that are inset further within the component (not directly against the component's outer edge) need to be thicker than 2 CSS pixels to meet the minimum size requirement.\n\nNote that different Non-text Contrast requirements may apply depending on whether the focus indicator is offset from, inset into, or against the edge of the component. See the Relationship with Non-text Contrast section below.\n\nOther indicator shapes\n\nThis Success Criterion does not require that focus indicators be solid outlines. Other shapes may be used so long as they meet the minimum area requirement.\n\nThe minimum area of the focus indicator for a control is the area of a 2 CSS pixel thick perimeter of the control (or its minimum bounding box) in the control's unfocused state. For example, if a control is a rectangle 90px wide and 30px tall, the area of a 2 CSS pixel thick perimeter is difference between the areas of:\n\nA 92px by 32px rectangle (1px larger on all sides), and\n\nA 88px by 28px rectangle (1px smaller on all sides)\n\nThis results in a minimum area of (92px * 32px) - (88px * 28px) = 480px2.\n\nSome general formulas for 2 CSS pixel thick perimeters of common shapes are:\n\nRectangle with width w and height h\n\n4h + 4w\n\nCircle with radius r\n\n4ùúãr\n\nRounded rectangle with width w, height h, and border radius r\n\n4h + 4w - (16 - 4ùúã)r\n\nNote\n\nIf you need to use complex mathematics to work out if a focus indicator is large enough, it is probably a sign that you should use a larger indicator instead. The bigger the visible change when an item receives focus, the easier it is for someone to see.\n\nThe following 2 examples use a 90px wide by 30px tall button, with a minimum area requirement of 480px2:\n\nNote\n\nPrefer using focus indicator techniques that scale with both the width and height of the focused control. Otherwise, if controls change size across different variations of a page (for example, in a responsive design), the indicator might meet the area requirement in some variations but not others. For example, in the above figure, if the width of the two highlight rectangles did not scale as the button grew wider, it would stop meeting the minimum area requirement if the button needed to grow any wider to accomodate a longer button label.\n\nAnother way of achieving the area requirement is to alter the appearance of the entire component, for instance by changing its color ‚Äì provided that the new color has a contrast ratio of at least 3:1 against the original color. This can be effective in a set of closely placed buttons. The following example demonstrates this with 5 rating stars; the center star is filled in with a darker color to indicate focus. However, it is much more difficult to detect such a focus indicator when components are not near each other and so cannot be easily compared. For users using magnification, even components relatively close together may be difficult to compare, so it is not considered a best practice.\n\nComponent keyboard focus\n\nThe preamble to this Success Criterion is \"When a user interface component has keyboard focus...\" The keyboard focus is the point of interaction for someone using a keyboard. For environments with a keyboard-operable interface, the keyboard focus can be moved around the interface in order to interact with different components. Whichever component is being interacted with has focus.\n\nWCAG defines user interface component as \"a part of the content that is perceived by users as a single control for a distinct function.\" Because different users may perceive controls differently, there is a potential for some variation when interpreting what constitutes both a single control and a distinct function. This is particularly the case when something visually presents in a way that may differ from how it is programmatically created under the covers. Where there is not a native HTML component upon which to base designs, there can be great variations in how the components and their focus indicators are portrayed. Further, some components have sub-components that can take focus, such as the menu items on a menu.\n\nNonetheless, consistent results from different testers were obtained for this Success Criterion by using the focus indicator itself as the gauge of what constitutes the component being interacted with. For complex components, the three typical focus indicators are as follows:\n\nFocus indicator around only the whole component\n\nFocus indicators around both the component and subcomponent\n\nFocus indicator around only the subcomponent\n\nEach of these will be discussed, using a tablist as a familiar complex component.\n\nFocus indicator around only the whole component\n\nWhen the focus indicator is shown only around the whole tablist, the user is guided to considering the tablist as a single user component. The tab items within it are visually distinguished between selected and unselected states (and visual indicators of selection state must meet the criteria given in 1.4.11 Non-text Contrast).\n\nHaving a focus indicator only around the whole is possible where there is no need to have a selected sub-component while another sub-component has focus. For a tablist which synchronizes its tab panel content with whatever tab is active, only one tab item can be selected at a time, and since whatever tab is selected is considered active, a separate focus indicator is redundant.\n\nResult: the group focus indicator must meet the requirements of this Success Criterion.\n\nA radio button group and a star-rating widget, which each use only a whole-component focus indicator, provide working examples of different complex components that pass the primary requirements of this Success Criterion. In the star ratings example, users can increment the rating by 1/2 stars. Not only is a focus indicator for each 1/2 star unnecessary, but it would actually be difficult to achieve without making the interaction confusing.\n\nFocus indicators around both the component and subcomponent\n\nFor a tablist which does not keep its tab panel content synchronized with whatever tab is selected, there needs to be a focus indicator for the tab item subcomponent. This is because the tab item with focus may be different than the selected item.\n\nThe user can navigate to the tablist, which in this implementation has a focus rectangle around the whole tablist as well as one around a tab item (conventionally the item that is currently selected). The focus around the whole is helpful in cueing a keyboard user that this is a complex component that has its own interaction. The user can then move focus between the unselected and selected tab items -- each of which in turn has its own focus indicator -- before activating one, which then makes it selected as well as focused, and updates the tab panel to match.\n\nIn this scenario, either the group focus indicator or the sub-component indicator must meet the requirements of this Success Criterion. To avoid being overly prescriptive, the Success Criterion allows authors to choose which makes the most sense. Generally, if a sub-component focus is necessary, it should be assessed instead of the group indicator.\n\nResult: the focus indicator for the tab item meets the requirements of this Success Criterion. The tablist focus indicator does not need to meet the requirements.\n\nA slider to pick colors provides a working example of a different complex component that predominantly shows focus for the subcomponent. In this case, the thumb slider sub-component has a focus indicator of sufficient size and contrast to pass the sufficient area calculation. There is also a subtle focus around the whole slider component, but it does not need to be assessed to pass this Success Criterion.\n\nFocus indicator around only the subcomponent\n\nThe same unsynchronized tablist can also be implemented as something which only shows focus on the tab items and not on the whole. The behaviour is the same as in the prior example, but there is never a focus indicator placed around the tablist. This interaction is acceptable, but it is not best practice since it demands more understanding from the user with less information. For example, some visual cues for the tablist and tab items (and tab panel) may not be clear. As well, keyboard users may not initially understand the expected keyboard interaction.\n\nResult: the focus indicator for the tab item must meet the requirements of this Success Criterion, judging focus with both selected and unselected tab items.\n\nA functional example of sub-component-only tab focus has an indicator that is large enough (at least four times the shortest side) with sufficient contrast to pass the focus area language of this Success Criterion.\n\nWhere something with focus is not a user interface component\n\nSome pages contain very large editing regions, such as web implementations of word processors and code editors. Unlike a textarea element, which is a user interface component, these large editing regions do not typically meet the definition of user interface components; they are not \"perceived by users as a single control for a distinct function.\" Providing focus indicators around such editing regions may still be beneficial to some; however, where the region is not perceived as a single control, it is not covered by this Success Criterion. The web page will still need to provide a insertion point (caret indicator) in such editing regions in order to meet the requirements of 2.4.7 Focus Visible.\n\nSome non-operable elements can take focus (such as a heading element that is the target of a skip link). However, the preamble of this Success Criterion refers to user interface components; it is only when the element with focus is operable by keyboard that this Success Criterion applies."
    }
}