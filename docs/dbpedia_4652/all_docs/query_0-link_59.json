{
    "id": "dbpedia_4652_0",
    "rank": 59,
    "data": {
        "url": "https://trac.ffmpeg.org/wiki/AudioChannelManipulation",
        "read_more_link": "",
        "language": "en",
        "title": "AudioChannelManipulation – FFmpeg",
        "top_image": "https://trac.ffmpeg.org/chrome/common/trac.ico",
        "meta_img": "https://trac.ffmpeg.org/chrome/common/trac.ico",
        "images": [
            "https://trac.ffmpeg.org/ffmpeg-logo.png",
            "https://trac.ffmpeg.org/chrome/vote/aupgray.png",
            "https://trac.ffmpeg.org/chrome/vote/adowngray.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/stereo_mono.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/stereo_mono_exclude.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/stereo_2mono_outputs.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/stereo_2mono_streams.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/mono_stereo.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/2mono_stereo.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/6mono_5point1.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/5point1_6mono.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/5point1_stereo.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/2stereo_stereo.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/2stereo_stereob.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/stereo_stereo_mix.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/switch_stereo_channels.png",
            "https://trac.ffmpeg.org/raw-attachment/wiki/AudioChannelManipulation/mute_stereo_channel.png",
            "https://trac.ffmpeg.org/chrome/common/trac_logo_mini.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/chrome/common/trac.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Manipulating audio channels\n\nstereo → mono stream\n\nDownmix both channels\n\nMix a single stereo stream down to a mono stream. Both channels of the stereo stream will be downmixed into the stream:\n\nffmpeg -i stereo.flac -ac 1 mono.flac\n\nChoose a specific channel\n\nThis example uses the channelsplit audio filter to include only the right channel:\n\nffmpeg -i stereo.wav -filter_complex \"[0:a]channelsplit=channel_layout=stereo:channels=FR[right]\" -map \"[right]\" front_right.wav\n\nIf you only want the left channel use FL instead of FR. See ffmpeg -layouts for a list of channel names. If you are working with a video file, you can use -map 0:0 -c:v copy to preserve the video stream.\n\nExample using the pan audio filter:\n\nffmpeg -i stereo.wav -af \"pan=mono|c0=c1\" mono.m4a\n\nAlternatively, you could use c0=FR instead.\n\nIf want the left channel instead use c0=c0 or c0=FL.\n\nstereo → 2 × mono files\n\nOutput each channel in stereo input to individual mono files with the channelsplit audio filter:\n\nffmpeg -i stereo.wav -filter_complex \"[0:a]channelsplit=channel_layout=stereo[left][right]\" -map \"[left]\" left.wav -map \"[right]\" right.wav\n\nor with the -map_channel option:\n\nffmpeg -i stereo.wav -map_channel 0.0.0 left.wav -map_channel 0.0.1 right.wav\n\nor with the pan audio filter:\n\nffmpeg -i stereo.wav -filter_complex \"[0:a]pan=1c|c0=c0[left];[0:a]pan=1c|c0=c1[right]\" -map \"[left]\" left.wav -map \"[right]\" right.wav\n\nstereo → 2 × mono streams\n\nOutput each channel in stereo input to individual mono streams in one output file with the channelsplit audio filter:\n\nffmpeg -i in.mp3 -filter_complex \"[0:a]channelsplit=channel_layout=stereo\" output.mka\n\nmono → stereo\n\nCreate a stereo output from one mono input:\n\nffmpeg -i input.mp3 -ac 2 output.m4a\n\nor with the amerge audio filter:\n\nffmpeg -i input.mp3 -filter_complex \"[0:a][0:a]amerge=inputs=2[a]\" -map \"[a]\" output.m4a\n\n2 × mono → stereo\n\nCreate a stereo output from two mono inputs with the join audio filter:\n\nffmpeg -i left.mp3 -i right.mp3 -filter_complex \"[0:a][1:a]join=inputs=2:channel_layout=stereo[a]\" -map \"[a]\" output.mp3\n\nor the amerge audio filter:\n\nffmpeg -i left.mp3 -i right.mp3 -filter_complex \"[0:a][1:a]amerge=inputs=2[a]\" -map \"[a]\" output.mka\n\n6 × mono → 5.1\n\nCombine 6 mono inputs into one 5.1 (6 channel) output with the join audio filter:\n\nffmpeg -i front_left.wav -i front_right.wav -i front_center.wav -i lfe.wav -i back_left.wav -i back_right.wav \\ -filter_complex \"[0:a][1:a][2:a][3:a][4:a][5:a]join=inputs=6:channel_layout=5.1[a]\" -map \"[a]\" output.wav\n\nThe join audio filter also allows you to manually choose the layout:\n\nffmpeg -i front_left.wav -i front_right.wav -i front_center.wav -i lfe.wav -i back_left.wav -i back_right.wav \\ -filter_complex \"[0:a][1:a][2:a][3:a][4:a][5:a]join=inputs=6:channel_layout=5.1:map=0.0-FL|1.0-FR|2.0-FC|3.0-LFE|4.0-BL|5.0-BR[a]\" -map \"[a]\" output.wav\n\nAnother method using the amerge audio filter which is somewhat less flexible than the join filter shown above:\n\nffmpeg -i front_left.wav -i front_right.wav -i front_center.wav -i lfe.wav -i back_left.wav -i back_right.wav \\ -filter_complex \"[0:a][1:a][2:a][3:a][4:a][5:a]amerge=inputs=6[a]\" -map \"[a]\" output.wav\n\nWith amerge all inputs must have the same sample rate and format. If inputs do not have the same duration the output will stop with the shortest.\n\n5.1 → 6 × mono\n\nSplit a 5.1 channel input into individual per-channel files using the channelsplit audio filter:\n\nffmpeg -i in.wav \\ -filter_complex \"channelsplit=channel_layout=5.1[FL][FR][FC][LFE][BL][BR]\" \\ -map \"[FL]\" front_left.wav \\ -map \"[FR]\" front_right.wav \\ -map \"[FC]\" front_center.wav \\ -map \"[LFE]\" lfe.wav \\ -map \"[BL]\" back_left.wav \\ -map \"[BR]\" back_right.wav\n\n5.1 → stereo\n\nTo downmix you can simply use -ac 2:\n\nffmpeg -i 6channels.wav -ac 2 stereo.wav\n\nIf you want to map specific channels and drop the rest you can use the pan audio filter. This will map the FL (Front Left) of the input to the FL of the output, and the FR (Front Right) of the input to the FR of the output:\n\nffmpeg -i 6channels.wav -af \"pan=stereo|c0=FL|c1=FR\" stereo.wav\n\nYou can also map specific channels by number. This example will map the first and third channels of the input to the first and second channels of the output.\n\nffmpeg -i 6channels.wav -af \"pan=stereo|c0=c0|c1=c2\" output.wav\n\nIf the = in a channel specification is replaced by <, then the gains for that specification will be renormalized so that the total is 1, thus avoiding clipping noise. See the pan audio filter documentation for additional information and examples.\n\n2 × stereo → stereo\n\nCombine two stereo inputs into one stereo output with the amerge and pan audio filters:\n\nffmpeg -i input1.wav -i input2.wav -filter_complex \"[0:a][1:a]amerge=inputs=2,pan=stereo|c0<c0+c2|c1<c1+c3[a]\" -map \"[a]\" output.mp3\n\nOr use -ac 2 instead of the pan audio filter:\n\nffmpeg -i input1.wav -i input2.wav -filter_complex \"[0:a][1:a]amerge=inputs=2[a]\" -map \"[a]\" -ac 2 output.mp3\n\nA similar situation as above, but instead use the left and right channels from the first input to make the left channel out the output, and use the left and right channels of the second input to make the right channel of the output.\n\nJust change the channel specifications in the pan filter:\n\nffmpeg -i input1.wav -i input2.wav -filter_complex \"[0:a][1:a]amerge=inputs=2,pan=stereo|c0<c0+c1|c1<c2+c3[a]\" -map \"[a]\" output.mp3\n\nThe pan audio filter has to be used in this situation instead of -ac 2 unlike the previous example.\n\nMix both stereo channels to stereo\n\nThe left and right channels of the output will each contain both the left and right channels of the input:\n\nffmpeg -i input.mp3 -af \"pan=stereo|c0<c0+c1|c1<c0+c1\" output.ogg\n\nSwitch stereo channels\n\nSwitch left channel to right and right channel to left with the channelmap audio filter:\n\nffmpeg -i stereo.mp3 -filter_complex \"channelmap=map=FL-FR|FR-FL:channel_layout=stereo\" output.mp3\n\nOr with the pan audio filer:\n\nffmpeg -i stereo.ogg -af pan=stereo|c0=c1|c1=c0 output.wav\n\nor with -map_channel:\n\nffmpeg -i stereo.ogg -map_channel 0.0.1 -map_channel 0.0.0 output.wav\n\nMute a channel\n\nThis example uses the pan audio filter to mute the first channel (front left) but keep the second channel (front right) as is:\n\nffmpeg -i stereo.wav -af \"pan=stereo|c1=c1\" output.wav\n\nExample using the -map_channel option:\n\nffmpeg -i stereo.wav -map_channel -1 -map_channel 0.0.1 output.wav\n\nRemap channels\n\nThe channelmap audio filter can re-arrange the channel layout. For example, to switch the FL and FR channels in a 5.1 input:\n\nffmpeg -i input.wav -filter_complex \"channelmap=map=FL-FR|FR-FL|FC-FC|LFE-LFE|BL-BL|BR-BR:channel_layout=5.1\" output.wav\n\nArbitrary channel reduction & mapping\n\nThe pan audio filter can be used to reduce the number of channels in a stream with an arbitrary mapping of input to output channels. For example, given a multi-channel WAV input file captured from an audio interface, to extract channels 3 and 4 into a stereo output any of the following commands would work:\n\nffmpeg -i in.wav -af 'pan=2c|c0=c2|c1=c3' out.wav ffmpeg -i in.wav -filter 'pan=2c|c0=c2|c1=c3' out.wav ffmpeg -i in.wav -filter_complex '[0:a] pan=2c|c0=c2|c1=c3' out.wav\n\nHere, 2c specifies that the output should have two channels, and c0=c2 and c1=c3 define the mapping of input to output channels. The channel numbers start at zero, thus we define (zero-based) output channels 0 and 1 to come from input channels 2 and 3, respectively.\n\nThe -filter_complex version is only necessary when more than one filter is employed.\n\nVirtual Binaural Acoustics\n\nFFmpeg can produce virtual binaural acoustics files using the sofalizer audio filter. Most known channel layouts are supported for the input, and the output is always stereo.\n\nffmpeg -i input.wav -af sofalizer=/path/to/sofa/file output.flac\n\nSOFA files can be found at ​sofacoustics.org.\n\nMultiple channel layouts\n\nThis example combines two layouts (5.1+2.0) into a single arbitrary layout using the pan audio filter:\n\nffmpeg -i input -filter_complex \"pan=5.1+downmix|FL=c0|FR=c1|FC=c2|LFE=c3|BL=c4|BR=c5|DL=c6|DR=c7[a]\" -map \"[a]\" out.wav\n\nThe output in the example resulted in one audio stream with 8 channels.\n\nMerged and mapped audio channels\n\nThis is born from screencasting, where you might want to record an interview over teleconference and still be able to isolate the audio streams to better deal with background noise later in post-processing.\n\nThis example outputs a video with three audio options: the merged speaker+microphone streams, the speaker stream alone, and the microphone stream alone.\n\nx11grab provides stream 0, and is video only.\n\nstream 1 is the pulse \"audio monitor\", or what the speakers are playing.\n\nstream 2 is the pulseaudio default audio input device, meant to be a microphone, and in this case, stereo.\n\n\"[a]\" is the generated stream from merging stream 1 and stream 2, using amerge and then pan to retain stereo channels instead of 4.0 channels as seen above in \"2 × stereo → stereo\".\n\nThese streams are then mapped in the order desired.\n\n#for \"-f pulse -i 0\", 0 is the pulseaudio id #of the audio that is going to the speakers #as determined from \"pacmd list-sources\" ffmpeg -video_size 1920x1080 -framerate 60 \\ -f x11grab -i :0.0 \\ -f pulse -i 0 \\ -f pulse -i default \\ -filter_complex \"[1:a][2:a] amerge=inputs=2,pan=stereo|c0<c0+c2|c1<c1+c3[a]\" \\ -map 0 \\ -map \"[a]\" \\ -map 1 \\ -map 2 \\ -c:v libx264 -crf 17 -preset ultrafast \\ output_filename.mkv\n\nStatistics\n\nThe astats audio filter can display information including length, DC offset, min/max levels, peak/RMS level dB:\n\n$ ffmpeg -i input.wav -af astats -f null - … [Parsed_astats_0 @ 0x168a260] Channel: 1 [Parsed_astats_0 @ 0x168a260] DC offset: -0.001829 [Parsed_astats_0 @ 0x168a260] Min level: -0.605072 [Parsed_astats_0 @ 0x168a260] Max level: 0.607056 [Parsed_astats_0 @ 0x168a260] Peak level dB: -4.335430 [Parsed_astats_0 @ 0x168a260] RMS level dB: -20.298984 [Parsed_astats_0 @ 0x168a260] RMS peak dB: -12.303891 [Parsed_astats_0 @ 0x168a260] RMS trough dB: -35.352893 [Parsed_astats_0 @ 0x168a260] Crest factor: 6.283154 [Parsed_astats_0 @ 0x168a260] Flat factor: 0.000000 [Parsed_astats_0 @ 0x168a260] Peak count: 2 [Parsed_astats_0 @ 0x168a260] Channel: 2 [Parsed_astats_0 @ 0x168a260] DC offset: -0.001826 [Parsed_astats_0 @ 0x168a260] Min level: -0.585999 [Parsed_astats_0 @ 0x168a260] Max level: 0.608490 [Parsed_astats_0 @ 0x168a260] Peak level dB: -4.314931 [Parsed_astats_0 @ 0x168a260] RMS level dB: -20.519969 [Parsed_astats_0 @ 0x168a260] RMS peak dB: -12.056472 [Parsed_astats_0 @ 0x168a260] RMS trough dB: -36.784681 [Parsed_astats_0 @ 0x168a260] Crest factor: 6.460288 [Parsed_astats_0 @ 0x168a260] Flat factor: 0.000000 [Parsed_astats_0 @ 0x168a260] Peak count: 2 [Parsed_astats_0 @ 0x168a260] Overall [Parsed_astats_0 @ 0x168a260] DC offset: -0.001829 [Parsed_astats_0 @ 0x168a260] Min level: -0.605072 [Parsed_astats_0 @ 0x168a260] Max level: 0.608490 [Parsed_astats_0 @ 0x168a260] Peak level dB: -4.314931 [Parsed_astats_0 @ 0x168a260] RMS level dB: -20.408071 [Parsed_astats_0 @ 0x168a260] RMS peak dB: -12.056472 [Parsed_astats_0 @ 0x168a260] RMS trough dB: -36.784681 [Parsed_astats_0 @ 0x168a260] Flat factor: 0.000000 [Parsed_astats_0 @ 0x168a260] Peak count: 2.000000 [Parsed_astats_0 @ 0x168a260] Number of samples: 1440706\n\nList channel names and standard channel layouts\n\nOutput from ffmpeg -layouts:\n\nIndividual channels: NAME DESCRIPTION FL front left FR front right FC front center LFE low frequency BL back left BR back right FLC front left-of-center FRC front right-of-center BC back center SL side left SR side right TC top center TFL top front left TFC top front center TFR top front right TBL top back left TBC top back center TBR top back right DL downmix left DR downmix right WL wide left WR wide right SDL surround direct left SDR surround direct right LFE2 low frequency 2 TSL top side left TSR top side right BFC bottom front center BFL bottom front left BFR bottom front right Standard channel layouts: NAME DECOMPOSITION mono FC stereo FL+FR 2.1 FL+FR+LFE 3.0 FL+FR+FC 3.0(back) FL+FR+BC 4.0 FL+FR+FC+BC quad FL+FR+BL+BR quad(side) FL+FR+SL+SR 3.1 FL+FR+FC+LFE 5.0 FL+FR+FC+BL+BR 5.0(side) FL+FR+FC+SL+SR 4.1 FL+FR+FC+LFE+BC 5.1 FL+FR+FC+LFE+BL+BR 5.1(side) FL+FR+FC+LFE+SL+SR 6.0 FL+FR+FC+BC+SL+SR 6.0(front) FL+FR+FLC+FRC+SL+SR hexagonal FL+FR+FC+BL+BR+BC 6.1 FL+FR+FC+LFE+BC+SL+SR 6.1(back) FL+FR+FC+LFE+BL+BR+BC 6.1(front) FL+FR+LFE+FLC+FRC+SL+SR 7.0 FL+FR+FC+BL+BR+SL+SR 7.0(front) FL+FR+FC+FLC+FRC+SL+SR 7.1 FL+FR+FC+LFE+BL+BR+SL+SR 7.1(wide) FL+FR+FC+LFE+BL+BR+FLC+FRC 7.1(wide-side) FL+FR+FC+LFE+FLC+FRC+SL+SR 7.1(top) FL+FR+FC+LFE+BL+BR+TFL+TFR octagonal FL+FR+FC+BL+BR+BC+SL+SR cube FL+FR+BL+BR+TFL+TFR+TBL+TBR hexadecagonal FL+FR+FC+BL+BR+BC+SL+SR+TFL+TFC+TFR+TBL+TBC+TBR+WL+WR downmix DL+DR 22.2 FL+FR+FC+LFE+BL+BR+FLC+FRC+BC+SL+SR+TC+TFL+TFC+TFR+TBL+TBC+TBR+LFE2+TSL+TSR+BFC+BFL+BFR"
    }
}