{
    "id": "wrong_mix_property_subsidiary_00145_1",
    "rank": 92,
    "data": {
        "url": "https://docs.oracle.com/cd/E10316_01/ContentIntegration/ridc/Javadoc/oracle/stellent/ridc/protocol/intradoc/IntradocClient.html",
        "read_more_link": "",
        "language": "en",
        "title": "IntradocClient (Remote Intradoc Client (RIDC) 10g API)",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E10316_01/ContentIntegration/ridc/Javadoc/resources/inherit.gif",
            "https://docs.oracle.com/cd/E10316_01/ContentIntegration/ridc/Javadoc/resources/inherit.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-04-02T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "oracle.stellent.ridc.protocol.intradoc\n\nClass IntradocClient\n\njava.lang.Object oracle.stellent.ridc.IdcClient<IntradocClientConfig,HdaProtocol,SocketConnection> oracle.stellent.ridc.protocol.intradoc.IntradocClient\n\npublic class IntradocClient\n\nextends IdcClient<IntradocClientConfig,HdaProtocol,SocketConnection>\n\nThe Intradoc implementation of the IDC client. This will communicate via the Content Server IntradocPort (4444) in either plain sockets or SSL sockets. The protocol uses the Content Server HDA format to serialize the DataBinder.\n\nThe intradoc client requires the Content Server have the IP address of the client added to the \"Trusted Hosts\" property. This establishes a trusted connection between the Content Server and the client. The intradoc client does not require a password for any request and therefore the obligation of authentication is pushed into the client application.\n\nThe client uses a BlockingQueue object to control the flow of requests to the Content Server; this is configurable, along with other client properties, via the IntradocClientConfig object.\n\nConstructor Summary IntradocClient(IdcClientManager clientManager, IntradocClientConfig clientConfig)\n\nMethod Summary protected ConnectionManager<SocketConnection,IntradocClientConfig> createConnectionManager()\n\nCreate the connection manager protected HdaProtocol createProtocol(ServiceRequest<SocketConnection> serviceRequest)\n\nCreate the protocol to handle the request static SocketConnectionManager getSocketManager(java.lang.String name)\n\nstatic void registerSocketFactory(java.lang.String name, SocketConnectionManager socketFactory)\n\nMethods inherited from class oracle.stellent.ridc.IdcClient createBinder, createConnectionPool, createRequest, createResponse, getConfig, getConnectionManager, getConnectionPool, getDataFactory, initialize, isInitialized, sendRequest, setDataFactory, setInitialized\n\nMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait\n\nConstructor Detail\n\nIntradocClient\n\npublic IntradocClient(IdcClientManager clientManager, IntradocClientConfig clientConfig)\n\nMethod Detail\n\nregisterSocketFactory\n\npublic static void registerSocketFactory(java.lang.String name, SocketConnectionManager socketFactory)\n\ngetSocketManager\n\npublic static SocketConnectionManager getSocketManager(java.lang.String name)\n\ncreateConnectionManager\n\nprotected ConnectionManager<SocketConnection,IntradocClientConfig> createConnectionManager()\n\nCreate the connection manager\n\nSpecified by:createConnectionManager in class IdcClient<IntradocClientConfig,HdaProtocol,SocketConnection>\n\nReturns:\n\na new connection manager\n\ncreateProtocol\n\nprotected HdaProtocol createProtocol(ServiceRequest<SocketConnection> serviceRequest)\n\nCreate the protocol to handle the request\n\nSpecified by:createProtocol in class IdcClient<IntradocClientConfig,HdaProtocol,SocketConnection>\n\nParameters:serviceRequest - the connection object Returns:\n\nthe protocol handler\n\nCopyright Â© 2008-2009 Oracle Corporation. All Rights Reserved."
    }
}