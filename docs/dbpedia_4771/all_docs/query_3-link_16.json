{
    "id": "dbpedia_4771_3",
    "rank": 16,
    "data": {
        "url": "https://www.linkedin.com/pulse/history-computer-languages-wayne-o-evans",
        "read_more_link": "",
        "language": "en",
        "title": "History of Computer Languages",
        "top_image": "https://media.licdn.com/dms/image/v2/C5612AQE4S2IPFk68GQ/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1547032978153?e=2147483647&v=beta&t=GCW_kcWoTrjORu_KZ-WZ-ekvnt9_6WoMkTcBwVGx2QE",
        "meta_img": "https://media.licdn.com/dms/image/v2/C5612AQE4S2IPFk68GQ/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1547032978153?e=2147483647&v=beta&t=GCW_kcWoTrjORu_KZ-WZ-ekvnt9_6WoMkTcBwVGx2QE",
        "images": [
            "https://media.licdn.com/dms/image/v2/C5612AQE4S2IPFk68GQ/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1547032978153?e=2147483647&v=beta&t=GCW_kcWoTrjORu_KZ-WZ-ekvnt9_6WoMkTcBwVGx2QE",
            "https://media.licdn.com/dms/image/v2/C5612AQEjeiZ10EGioA/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1547033391475?e=1729728000&v=beta&t=QYIleJp7thW5psHesWjqkVEnECYnibMWIUWNzMnz_58"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Wayne O Evans"
        ],
        "publish_date": "2019-01-09T11:50:26+00:00",
        "summary": "",
        "meta_description": "You likely rember your introduction to computers. My introduction to programming in 1960, was unit record (punched card) equipmentg.",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/history-computer-languages-wayne-o-evans",
        "text": "You likely rember your introduction to computers.\n\nMy introduction to programming in 1960, was unit record (punched card) equipmentg. The hardware was controlled by wires inserted in a board. (Printing a 20 column name field required 20 wires from the read station to the print station.)\n\nMy first computer, in 1962, was the IBM 1620 where I learned assembler and FORTRAN.\n\n-----------------------------------------------------------------------------------------------------------\n\nThe first high-level programming language was Plankalkül, created by Konrad Zuse between 1942 and 1945. The first high-level language to have an associated compiler, was created by Corrado Böhm in 1951, for his PhD thesis. The first commercially available language was FORTRAN (FORmula TRANslation); developed in 1956 (first manual appeared in 1956, but first developed in 1954) by a team led by John Backus at IBM.\n\nWhen FORTRAN was first introduced it was treated with suspicion because of the belief that programs compiled from high-level language would be less efficient than those written directly in machine code. FORTRAN became popular because it provided a means of porting existing code to new computers, in a hardware market that was rapidly evolving; the language eventually became known for its efficiency.\n\nEarly history\n\nDuring 1842–1843 Ada Lovelace translated the memoir of Italian mathematician Francis Maneclang about Charles Babbage's newest proposed machine, the analytical engine; she supplemented the memoir with notes that specified in detail a method for calculating Bernoulli numbers with the engine, recognized by some historians as the world's first computer program.[2]\n\nThe first computer codes were specialized for their applications: e.g., Alonzo Church was able to express the lambda calculus in a formulaic way and the Turing machine was an abstraction of the operation of a tape-marking machine.\n\nTo some people, some degree of expressive power and human-readability is required before the status of \"programming language\" is granted. Jacquard Looms and Charles Babbage's Difference Engine both had simple, extremely limited languages for describing the actions that these machines should perform.\n\nFirst programming languages\n\nIn the 1940s, the first recognizably modern electrically powered computers were created. The limited speed and memory capacity forced programmers to write hand tuned assembly language programs. It was eventually realized that programming in assembly language required a great deal of intellectual effort.\n\nThe first programming languages designed to communicate instructions to a computer were written in the 1950s. An early high-level programming language to be designed for a computer was Plankalkül, developed by the Germans for Z1 by Konrad Zuse between 1943 and 1945. However, it was not implemented until 1998 and 2000.\n\nJohn Mauchly's Short Code, proposed in 1949, was one of the first high-level languages ever developed for an electronic computer. Unlike machine code, Short Code statements represented mathematical expressions in understandable form. However, the program had to be translated into machine code every time it ran, making the process much slower than running the equivalent machine code.\n\nAt the University of Manchester, Alick Glennie developed Autocode in the early 1950s, with the second iteration developed for the Mark 1 by R. A. Brooker in 1954, known as the \"Mark 1 Autocode\". Brooker also developed an autocode for the Ferranti Mercury in the 1950s in conjunction with the University of Manchester. The version for the EDSAC 2 was devised by D. F. Hartley of University of Cambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances, and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A contemporary but separate thread of development, Atlas Autocode was developed for the University of Manchester Atlas 1 machine.\n\nIn 1954, language FORTRAN was invented at IBM by a team led by John Backus; it was the first widely used high level general purpose programming language to have a functional implementation, as opposed to just a design on paper.[5][6] It is still a popular language for high-performance computing[7] and is used for programs that benchmark and rank the world's fastest supercomputers.\n\nAnother early programming language was devised by Grace Hopper in the US, called FLOW-MATIC. It was developed for the UNIVAC I at Remington Rand during the period from 1955 until 1959. Hopper found that business data processing customers were uncomfortable with mathematical notation, and in early 1955, she and her team wrote a specification for an English programming language and implemented a prototype.[9] The FLOW-MATIC compiler became publicly available in early 1958 and was substantially complete in 1959. Flow-Matic was a major influence in the design of COBOL, since only it and its direct descendent AIMACO were in actual use at the time.\n\nOther languages still in use today include LISP (1958), invented by John McCarthy and COBOL (1959), created by the Short Range Committee. Another milestone in the late 1950s was the publication, by a committee of American and European computer scientists, of \"a new language for algorithms\"; the ALGOL 60 Report (the \"ALGOrithmic Language\"). This report consolidated many ideas circulating at the time .\n\nAnother innovation was in how the language was described:\n\na mathematically exact notation, Backus–Naur form (BNF), was used to describe the language's syntax. Nearly all subsequent programming languages have used a variant of BNF to describe the context-free portion of their syntax.\n\nAlgol 60 was particularly influential in the design of later languages, some of which soon became more popular. The Burroughs large systems were designed to be programmed in an extended subset of Algol.\n\nAlgol's key ideas were continued, producing ALGOL 68:\n\nsyntax and semantics became even more orthogonal, with anonymous routines, a recursive typing system with higher-order functions, etc.;\n\nnot only the context-free part, but the full language syntax and semantics were defined formally, in terms of Van Wijngaarden grammar, a formalism designed specifically for this purpose.\n\nAlgol 68's many little-used language features (for example, concurrent and parallel blocks) and its complex system of syntactic shortcuts and automatic type coercions made it unpopular with implementers and gained it a reputation of being difficult. Niklaus Wirth actually walked out of the design committee to create the simpler Pascal language.\n\nSome notable languages that were developed in this period include:"
    }
}