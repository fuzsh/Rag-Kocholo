{
    "id": "dbpedia_4771_3",
    "rank": 38,
    "data": {
        "url": "https://stackoverflow.com/questions/2619226/key-programming-concepts-and-terminology-in-a-variety-of-languages",
        "read_more_link": "",
        "language": "en",
        "title": "key programming concepts and terminology in a variety of languages",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/100c347432fa5d853ba5195a9493ef36?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1a350b4a18da2ffab7bde4bc753909bd?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ed181f8c80df53d2b67a4f4fff088ed4?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/bf312679a804d2defbce9f993c9d6a23?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d06834fe3fb105f62b2186aba4a430d5?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/2619226/ivc/315d?prg=ac33504e-34e5-4548-9559-ac0845b63026"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-04-12T00:08:03",
        "summary": "",
        "meta_description": "i've been programming for a while, but have never had a formal computer science education. i would like to know if there is a resource that goes over the key programming concepts like construct,",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/2619226/key-programming-concepts-and-terminology-in-a-variety-of-languages",
        "text": "Concepts, Techniques, and Models of Computer Programming (by Peter Van Roy and Seif Haridi): the title says it all. (From the same author and based on the book comes this cool poster with ~30 of the most important programming paradigms.) [Note: this book is colloquially known as CTM, you might stumble across that acronym from time to time.]\n\nStructure and Intepretation of Computer Programs (by Harold Abelson and Gerald Jay Sussman). SICP, as it is colloquially known, is probably the book about programming. Period. Don't forget the 1986 video lectures by the authors themselves or one of the other courses based on the book.\n\nThe main difference between SICP and CTM is the approach: CTM teaches programming concepts by giving examples in a very powerful programming language (Distributed Oz) that already implements them, while SICP teaches programming concepts by implementing them in a language (Scheme, or rather a small subset of it) which doesn't already have them. IOW: CTM would teach OO be showing programs written in an OO language, SICP by implementing an OO system in Scheme.\n\nDesign Concepts in Programming Languages (by Franklyn A. Turbak and David K. Gifford with Mark A. Sheldon) is more about Programming Language Theory than Programming. It's still pretty interesting, even though it doesn't directly address your question about Programming Concepts. But after all: how would you program without a programming language?\n\nConcepts of Programming Languages (by Robert W. Sebesta) explains, well, Concepts of Programming Languages, starting with Konrad Zuse's Plankalk√ºl, continuing with the first real programming languages like Fortran, Lisp, Cobol, Algol, BASIC and on to C, C++, Java and Ada. [Again, more of a Programming Language book than Programming.]\n\nI really enjoyed reading Concepts in Programming Languages by John C. Mitchell.\n\nThe book covers a little bit of everything. It includes an introduction to mathematical foundations such as computability theory and lambda calculus, but I found it quite readable (at the time when I was reading it, which was early during my undergraduate studies). It also includes a tiny bit on the semantics of programming languages (that is, how to describe the meaning formally).\n\nThen it talks about many programming languages and concepts that come from them and are interesting including LISP (which is a basis for Clojure), ML (a basis for Microsoft's F#) but also Simula and Smalltalk (two fundamental OO languages) and C++ with Java (practical OO languages with quite different approach). There are also a few notes about different approaches to concurrency (quite important nowadays!)\n\nIt doesn't go into much details and covers wide range of topics, which I consider as a benefit if you want to read it to get a broad overview of the programming language theory. The book actually motivated my current interest in programming languages :-).\n\nI noticed that the book has some negative reviews on Amazon, but it seems like most of them are from people who had to take Mitchell's course based on the book and didn't like the course."
    }
}