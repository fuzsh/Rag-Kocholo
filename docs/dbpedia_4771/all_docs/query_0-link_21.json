{
    "id": "dbpedia_4771_0",
    "rank": 21,
    "data": {
        "url": "https://cundysunardy.wordpress.com/2013/03/09/chapter-2-answers/",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 2 Answers",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-03-09T00:00:00",
        "summary": "",
        "meta_description": "Chapter 2 Review Questions 1. In what year was Plankalkul designed? In what year was that design published? Plankalkul design began in 1943 as a proposal for Konrad Zuse’s Ph.D.’s dissertation and published in 1972. 2. Mention an interesting feature of Zuse’s programs. An interesting feature of Zuse’s program is the inclusion of mathematical expressions showing…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Cundy's Blog",
        "canonical_link": "https://cundysunardy.wordpress.com/2013/03/09/chapter-2-answers/",
        "text": "Chapter 2\n\nReview Questions\n\n1. In what year was Plankalkul designed? In what year was that design published?\n\nPlankalkul design began in 1943 as a proposal for Konrad Zuse’s Ph.D.’s dissertation and published in 1972.\n\n2. Mention an interesting feature of Zuse’s programs.\n\nAn interesting feature of Zuse’s program is the inclusion of mathematical expressions showing the current relationships between program variables.\n\n3. What does Plankalkul mean?\n\nPlankalkul means Program Calculus.\n\n8. Who developed Short Code? Why is Short Code called automatic programming?\n\nShort Code was developed by John Maunchly in 1949 for the BINAC computer, which was one of the first success ful stored-program electronic computers. It is called automatic programming because it was not translated to mavhine code; rather it was implemented with a pure interpreter.\n\n9. Under what environmental consideration was Fortran developed? Which is the first version of Fortran?\n\nBecause at that time all floating-point operations had to be simulated in software, a very time-consuming process. The first version of FORTRAN is FORTRAN 0 in 1954.\n\n10. What was the most significant feature added to Fortran I to get Fortran II ?\n\nIt was the independent-compilation capability. Without the independent compilation, any change in a program required that the entire program be recompiled.\n\n13. Which version of Fortran was the first to have character string handling?\n\nThe first to have character string handling is Fortran 77.\n\n14. Why were linguists interested in artificial intelligence in late 1950s?\n\nBecause linguists were concerned with natural language processing.\n\n15. What are the different data types and structures in common LISP ?\n\nCommon LISP has a large number of data types and structures, including records, arrays, complex numbers, and character strings. It also has a form of packages for modularizing collections of functions and data providing access control.\n\n19. What was the goal for developing C?\n\nTo overcome the problem of specifying floating-point rather than integer arithmetic in an expression.\n\n20. What were the significant modifications to ALGOL 58 to produce ALGOL 60?\n\n• The concept of block structure was introduced. This allowed the programmer to localize parts of programs by introducing new data environments, or scopes.\n\n• Two different means of passing parameters to subprograms were allowed: pass by value and pass by name.\n\n• Procedures were allowed to be recursive. The ALGOL 58 description was unclear on this issue. Note that although this recursion was new for the imperative languages, LISP had already provided recursive functions in 1959.\n\n• Stack-dynamic arrays were allowed. A stack-dynamic array is one for which the subscript range or ranges are specified by variables, so that the size of the array is set at the time storage is allocated to the array, which happens when the declaration is reached during execution.\n\n22. On what language was COBOL based?\n\nThe specifications were to a great extent inspired by the FLOW-MATIC language invented by Grace Hopper, commonly referred to as “the mother of the COBOL language.”\n\n23. In what year did the COBOL design process begin?\n\nThe first formal meeting on the subject of a common language for business applications, which was sponsored by the Department of Defense, was held at the Pentagon on May 28 and 29, 1959 (exactly one year after the Zurich ALGOL meeting).\n\n26. Which data type does the original BASIC language support?\n\nThe original BASIC had only 14 different statement types and a single data type—floating-point.\n\n27. Why was BASIC an important language in the early 1980s?\n\nIn the mid-1970’s, two college students decided that the new Altair microcomputer needed a BASIC language interpreter. They sold their product on cassette tape for a cost of $350. You may have heard of these entrepreneurs: Bill Gates and Paul Allen!\n\n28. PL/I was designed to replace what two languages?\n\nPL/I is that it included what were then considered the best parts of ALGOL 60 (recursion and block structure), Fortran IV (separate compilation with communication through global data), and COBOL 60 (data structures, input/output, and report-generating facilities), along with an extensive collection of new constructs, all somehow cobbled together.\n\n33. What language introduced the case statement?\n\nALGOL-W introduced the case statement for multiple selection.\n\n57. What data types does Java support?\n\nThere are two data types available in Java:\n\nPrimitive Data Types\n\nReference/Object Data Types\n\nProblem Set\n\n6. Make an educated guess as to the most common syntax error in C programs.\n\n(a) Semicolon (;) missing.\n\n(b) Unmatched parentheses.\n\n(c) Function prototype mismatch.\n\n(d) Undeclared variables.\n\n7. LISP began as a pure functional language but gradually acquired more and more imperative features. Why?\n\nThe main reason why imperative features were put in LISP was to increase its execution efficiency.\n\n10. Outline the major developments in ALGOL 60.\n\nThe most important new developments were the following:\n\n• The concept of block structure was introduced. This allowed the programmer to localize parts of programs by introducing new data environments, or scopes.\n\n• Two different means of passing parameters to subprograms were allowed: pass by value and pass by name.\n\n• Procedures were allowed to be recursive. The ALGOL 58 description was unclear on this issue. Note that although this recursion was new for the imperative languages, LISP had already provided recursive functions in 1959.\n\n• Stack-dynamic arrays were allowed. A stack-dynamic array is one for which the subscript range or ranges are specified by variables, so that the size of the array is set at the time storage is allocated to the array, which happens when the declaration is reached during execution.\n\n11. Was IBM’s assumption, on which it based its decision to develop PL/I, correct, given the history of computers and language developments since 1964?\n\nIBM was, for the most part, incorrect in its view of the future of the uses of computers, at least as far as languages are concerned. Commercial applications are nearly all done in languages that are specifically designed for them. Likewise for scientific applications. On the other hand, the IBM design of the 360 line of computers was a great success—it still dominates the area of computers between supercomputers and\n\nminicomputers. Furthermore, 360 series computers and their descendants have been widely used for both scientific and commercial applications. These applications have been done, in large part, in Fortran and COBOL.\n\n14. What are the arguments both for and against the idea of typeless language?\n\nThe argument for typeless languages is their great flexibility for the programmer. Literally any storage location can be used to store any type value. This is useful for very low-level languages used for systems programming. The drawback is that type checking is impossible, so that it is entirely the programmer’s responsibility to insure that expressions and assignments are correct.\n\n18. Languages continually evolve. What sort of restrictions do you think are appropriate for changes in programming language? Compare your answer with the evolution of Fortran.\n\nA good deal of restraint must be used in revising programming languages. The greatest danger is that the revision process will continually add new features, so that the language grows more and more complex. Compounding the problem is the reluctance, because of existing software, to remove obsolete features.\n\n22. Explain two reasons why pure interpretations is an acceptable implementation method for several recent scripting languages.\n\nOne situation in which pure interpretation is acceptable for scripting languages is when the amount of computation is small, for which the processing time will be negligible. Another situation is when the amount of computation is relatively small and it is done in an interactive environment, where the processor is often idle because of the slow speed of human interactions.\n\n24.Why, in your opinion, do new scripting languages appear more frequently than new compiled languages?\n\nNew scripting languages may appear more frequently than new compiled languages because they are often smaller and simpler and focused on more narrow applications, which means their libraries need not be nearly as large."
    }
}