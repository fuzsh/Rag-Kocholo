{
    "id": "dbpedia_4771_2",
    "rank": 10,
    "data": {
        "url": "https://www.steveclarkapps.com/programming-language-backstories/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming Language Origin Stories",
        "top_image": "https://www.steveclarkapps.com/wp-content/uploads/2020/06/cropped-Provisional_basic_site_logo-2-32x32.jpg",
        "meta_img": "https://www.steveclarkapps.com/wp-content/uploads/2020/06/cropped-Provisional_basic_site_logo-2-32x32.jpg",
        "images": [
            "https://www.steveclarkapps.com/wp-content/uploads/2020/06/cropped-Provisional_basic_site_logo-2-32x32.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/06/cropped-Provisional_basic_site_logo-2-32x32.jpg",
            "https://secure.gravatar.com/avatar/f36ab359a01bc4cda5bb86399f159a47?s=40&d=mm&r=g",
            "https://secure.gravatar.com/avatar/f36ab359a01bc4cda5bb86399f159a47?s=40&d=mm&r=g",
            "https://upload.wikimedia.org/wikipedia/commons/d/da/Konrad_Zuse_%281992%29.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/d/da/Konrad_Zuse_%281992%29.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Eniac.jpg",
            "https://www.computerhope.com/people/pictures/john_mauchly.jpg",
            "https://www.computerhope.com/people/pictures/john_mauchly.jpg",
            "https://gregorias.github.io/images/2014/11/Plankalkul.png",
            "https://gregorias.github.io/images/2014/11/Plankalkul.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/05/Screenshot-2019-05-23-at-01.42.10-e1558572253147-1024x576.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/05/Screenshot-2019-05-23-at-01.42.10-e1558572253147-1024x576.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Screenshot-2019-11-12-at-01.15.08-693x1024.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Screenshot-2019-11-12-at-01.15.08-693x1024.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Screenshot-2019-11-20-at-12.50.04-1024x592.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Screenshot-2019-11-20-at-12.50.04-1024x592.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/1324-1024x753.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/1324-1024x753.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/John_Backus_2.jpg/220px-John_Backus_2.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/John_Backus_2.jpg/220px-John_Backus_2.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/13lohr.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/13lohr.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/11/Screenshot-2018-11-10-at-01.31.14-1024x892.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/11/Screenshot-2018-11-10-at-01.31.14-1024x892.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/FORTRAN_BEING_TAUGHT.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/FORTRAN_BEING_TAUGHT.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.02.00.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.02.00.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.42.20.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.42.20.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.43.01.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-10.43.01.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/440px-John_McCarthy_Stanford.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/440px-John_McCarthy_Stanford.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/01/Screenshot-2020-01-18-at-17.47.55-1024x695.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/01/Screenshot-2020-01-18-at-17.47.55-1024x695.png",
            "https://i.pinimg.com/736x/7e/a1/9f/7ea19f8ccb6562850ae3f9e247fd8e58--auto-retro-view-master.jpg",
            "https://i.pinimg.com/736x/7e/a1/9f/7ea19f8ccb6562850ae3f9e247fd8e58--auto-retro-view-master.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Grace_Hopper.jpg/220px-Grace_Hopper.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Grace_Hopper.jpg/220px-Grace_Hopper.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/07/Screenshot-2018-07-02-at-00.36.36-1024x569.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/07/Screenshot-2018-07-02-at-00.36.36-1024x569.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/04/Screenshot-2019-04-22-at-10.09.35-1024x586.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/04/Screenshot-2019-04-22-at-10.09.35-1024x586.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Niklaus_Wirth%2C_UrGU.jpg/220px-Niklaus_Wirth%2C_UrGU.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Niklaus_Wirth%2C_UrGU.jpg/220px-Niklaus_Wirth%2C_UrGU.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/11/Screenshot-2018-11-21-at-01.14.00-1024x979.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/11/Screenshot-2018-11-21-at-01.14.00-1024x979.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/Th_CBook_0004c.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/Th_CBook_0004c.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/05/The_C_Guys.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/05/The_C_Guys.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/kenetc.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/kenetc.jpg",
            "https://www.princeton.edu/sites/default/files/styles/half_2x/public/images/2016/03/Kernighan-color-illustration_index_324.jpg?itok=nKprj9Vz",
            "https://www.princeton.edu/sites/default/files/styles/half_2x/public/images/2016/03/Kernighan-color-illustration_index_324.jpg?itok=nKprj9Vz",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/01/Robin_Milner.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/01/Robin_Milner.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/05/jean_ichbiah.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/05/jean_ichbiah.jpg",
            "https://activatingapps.files.wordpress.com/2018/02/7099f1.jpg?w=825",
            "https://activatingapps.files.wordpress.com/2018/02/7099f1.jpg?w=825",
            "https://activatingapps.files.wordpress.com/2018/02/screen-shot-2018-02-20-at-22-35-43.png?w=173&h=245",
            "https://activatingapps.files.wordpress.com/2018/02/screen-shot-2018-02-20-at-22-35-43.png?w=173&h=245",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/02/Old1979CambridgeEngland4.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/02/Old1979CambridgeEngland4.jpg",
            "https://activatingapps.files.wordpress.com/2018/02/cs_ex068.jpg?w=459&h=306",
            "https://activatingapps.files.wordpress.com/2018/02/cs_ex068.jpg?w=459&h=306",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/1999_alan_kay.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/1999_alan_kay.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/Screenshot-2019-07-13-at-17.03.32-1024x126.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/Screenshot-2019-07-13-at-17.03.32-1024x126.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/NeXT_logo.svg/300px-NeXT_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/NeXT_logo.svg/300px-NeXT_logo.svg.png",
            "https://www.sei.cmu.edu/sei-images/images/love-tom-96_2622.jpg",
            "https://www.sei.cmu.edu/sei-images/images/love-tom-96_2622.jpg",
            "https://1.bp.blogspot.com/-Ub_gVZou-2A/Utbc9mGsxUI/AAAAAAAAACM/tkbS_G0moak/s1600/Brad+Cox.png",
            "https://1.bp.blogspot.com/-Ub_gVZou-2A/Utbc9mGsxUI/AAAAAAAAACM/tkbS_G0moak/s1600/Brad+Cox.png",
            "https://cdn-images-1.medium.com/max/1600/1*0XZCWrRLGV-p_HcFTn8tcQ.jpeg",
            "https://cdn-images-1.medium.com/max/1600/1*0XZCWrRLGV-p_HcFTn8tcQ.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/09/2009_don_chamberlin.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/09/2009_don_chamberlin.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/09/Raymond-F.-Boyce.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/09/Raymond-F.-Boyce.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-22.54.51.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-22.54.51.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/What-is-SQL-Server-SQL-Server-Architecture.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/What-is-SQL-Server-SQL-Server-Architecture.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/Screenshot-2019-07-21-at-23.27.05-1024x638.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/07/Screenshot-2019-07-21-at-23.27.05-1024x638.png",
            "https://www.computerhope.com/people/pictures/larry_wall.jpg",
            "https://www.computerhope.com/people/pictures/larry_wall.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-17.02.00.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-17.02.00.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/220px-Guido_van_Rossum_OSCON_2006.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/220px-Guido_van_Rossum_OSCON_2006.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-15.42.47.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-15.42.47.png",
            "https://www.microsoft.com/en-us/research/wp-content/uploads/2015/12/PTSE779n0nI-480x280.jpg",
            "https://www.microsoft.com/en-us/research/wp-content/uploads/2015/12/PTSE779n0nI-480x280.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/08/440px-AlanCooper.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2020/08/440px-AlanCooper.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Rasmus_Lerdorf.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/Rasmus_Lerdorf.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/andi-gutmans.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/andi-gutmans.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/zeev-suraski.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/11/zeev-suraski.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/Screenshot-2021-03-29-at-10.30.12-1024x560.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2021/03/Screenshot-2021-03-29-at-10.30.12-1024x560.png",
            "https://upload.wikimedia.org/wikipedia/commons/d/d5/SUN_microsystems_logo_ambigram.png",
            "https://upload.wikimedia.org/wikipedia/commons/d/d5/SUN_microsystems_logo_ambigram.png",
            "https://activatingapps.files.wordpress.com/2018/02/star7-e1519155517806.png?w=175&h=182",
            "https://activatingapps.files.wordpress.com/2018/02/star7-e1519155517806.png?w=175&h=182",
            "https://web.archive.org/web/20050420081440im_/http://java.sun.com/features/1998/05/images/green.bbq.jpg",
            "https://web.archive.org/web/20050420081440im_/http://java.sun.com/features/1998/05/images/green.bbq.jpg",
            "https://i2.wp.com/freefeast.info/wp-content/uploads//2012/06/freefeast_gosling.jpg",
            "https://i2.wp.com/freefeast.info/wp-content/uploads//2012/06/freefeast_gosling.jpg",
            "https://activatingapps.files.wordpress.com/2018/02/screen-shot-2018-02-20-at-23-50-58-e1519170844252.png?w=372&h=356",
            "https://activatingapps.files.wordpress.com/2018/02/screen-shot-2018-02-20-at-23-50-58-e1519170844252.png?w=372&h=356",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Netscape_logo.svg/220px-Netscape_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Netscape_logo.svg/220px-Netscape_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/7/75/Marc_Andreessen.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/7/75/Marc_Andreessen.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-22.25.14-1022x1024.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2019/01/Screenshot-2019-01-24-at-22.25.14-1022x1024.png",
            "https://www.w3schools.com/js/pic_htmltree.gif",
            "https://www.w3schools.com/js/pic_htmltree.gif",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Mark_Odersky_photo_by_Linda_Poeng.jpg/220px-Mark_Odersky_photo_by_Linda_Poeng.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Mark_Odersky_photo_by_Linda_Poeng.jpg/220px-Mark_Odersky_photo_by_Linda_Poeng.jpg",
            "https://sdtimes.com/wp-content/uploads/2016/03/0309.sdt-jetbrains.png",
            "https://sdtimes.com/wp-content/uploads/2016/03/0309.sdt-jetbrains.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/%D0%9A%D1%80%D0%BE%D0%BD%D1%88%D1%82%D0%B0%D0%B4%D1%82._%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%BE%D0%B1%D0%BE%D1%80_%D0%BD%D0%B0_%D0%AF%D0%BA%D0%BE%D1%80%D0%BD%D0%BE%D0%B9_%D0%BF%D0%BB%D0%BE%D1%89%D0%B0%D0%B4%D0%B8.jpg/1024px-%D0%9A%D1%80%D0%BE%D0%BD%D1%88%D1%82%D0%B0%D0%B4%D1%82._%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%BE%D0%B1%D0%BE%D1%80_%D0%BD%D0%B0_%D0%AF%D0%BA%D0%BE%D1%80%D0%BD%D0%BE%D0%B9_%D0%BF%D0%BB%D0%BE%D1%89%D0%B0%D0%B4%D0%B8.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/%D0%9A%D1%80%D0%BE%D0%BD%D1%88%D1%82%D0%B0%D0%B4%D1%82._%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%BE%D0%B1%D0%BE%D1%80_%D0%BD%D0%B0_%D0%AF%D0%BA%D0%BE%D1%80%D0%BD%D0%BE%D0%B9_%D0%BF%D0%BB%D0%BE%D1%89%D0%B0%D0%B4%D0%B8.jpg/1024px-%D0%9A%D1%80%D0%BE%D0%BD%D1%88%D1%82%D0%B0%D0%B4%D1%82._%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%BE%D0%B1%D0%BE%D1%80_%D0%BD%D0%B0_%D0%AF%D0%BA%D0%BE%D1%80%D0%BD%D0%BE%D0%B9_%D0%BF%D0%BB%D0%BE%D1%89%D0%B0%D0%B4%D0%B8.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2023/02/demJem.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2023/02/demJem.jpeg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-16.24.03-1024x262.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-16.24.03-1024x262.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-16.29.53.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/10/Screenshot-2018-10-21-at-16.29.53.png",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/08/Microsoft-logo-1024x172.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2018/08/Microsoft-logo-1024x172.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/e/ef/Anders_Hejlsberg.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/e/ef/Anders_Hejlsberg.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/chrisy.jpg",
            "https://www.steveclarkapps.com/wp-content/uploads/2024/04/chrisy.jpg",
            "https://i.pinimg.com/originals/85/d9/6e/85d96e6912c2bed1611840a9075bcdba.jpg",
            "https://i.pinimg.com/originals/85/d9/6e/85d96e6912c2bed1611840a9075bcdba.jpg",
            "https://www.steveclarkapps.com/wp-content/plugins/page-views-count/ajax-loader-2x.gif",
            "https://www.steveclarkapps.com/wp-content/plugins/page-views-count/ajax-loader-2x.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-04-18T13:48:30+00:00",
        "summary": "",
        "meta_description": "The stories behind the biggest \"blockbuster\" programming languages of all time.",
        "meta_lang": "en",
        "meta_favicon": "https://www.steveclarkapps.com/wp-content/uploads/2020/06/cropped-Provisional_basic_site_logo-2-32x32.jpg",
        "meta_site_name": "",
        "canonical_link": "https://www.steveclarkapps.com/programming-language-backstories/",
        "text": "Index of Languages\n\nFORTRAN (~1953)\n\nLISP (1958-)\n\nALGOL (1958)\n\nCOBOL (1959)\n\nSIMULA (1964-1967)\n\nPASCAL (1968/70)\n\nML (1973)\n\nThe C Programming Language (1972)\n\nADA (~1978/79 ->)\n\nC++ (1979)\n\nSmallTalk (1971-80)\n\nObjective-C\n\nSQL\n\nPerl\n\nErlang\n\nPython\n\nPHP\n\nHaskell\n\nJava\n\nJavaScript (JS)\n\nTypeScript\n\nOCaml\n\nScala\n\nKotlin\n\nThe “R” Programming Language\n\nC#\n\nVisual Basic .NET (~2001/2)\n\nF#\n\nSwift\n\nThere have been many programming languages over the years, often developed by dedicated, passionate, and indeed very geeky individuals who’s passion has been for elegant abstractions of the ones and zeros upon which standard computers run.\n\nHere are there origin stories.\n\nPreamble\n\nThinking about the history of programming languages, we must travel back to the pre-cursers of modern languages in the form of things such as the Jacquard loom of the early 1800s which was able to make patterns based on cards inserted in the machine (essentially pre-programmed). Beyond that, we can look at the story of Mr. Charles Babbage’s Analytical Engine in the 1830s & 1840s as being also a key point in the history of computer science.\n\nWithin this timeline, we often come across the story of Ada Lovelace – a woman credited with writing the “first computer program” on Babbage’s Analytical Engine. Whilst this is an oversimplification of the true story, it’s a story often cited, and indeed it’s where the Ada programming language gets its name from (we’ll learn more about this important but little known language later, and it’s more modern variant Ada 95).\n\nA visit to the Computer History Museum in Mountain View, California will likely give the reader a better understanding of how the story of computer hardware developed with the computer “program” over time (Ref#: A). As they remind us: “Thousands of programming languages have been invented, and hundreds are still in use. Some are general-purpose, while others are designed for particular classes of applications. [Yet] Few new languages are truly new; most have been influenced by others that came before” (https://www.computerhistory.org/revolution/the-art-of-programming/9/357).\n\nIn the 1940s a gentleman named Von Neumann lead a team that built computers featuring the use of stored programs, as well as a central processor.\n\nOne of these machines was ENIAC which had to be programmed using patch cords. The involvement of Von Neumann lead to a new binary based machine that could store information, where the ENIAC originally could not.\n\nIn the 1940s machine-code was used directly as the sole means of programming computers, however, it wasn’t long before the idea of abstracting on top of this emerged as it was seen as tedious and potentially error-prone.\n\nIf we talk about high-level programming languages (HLLs), then an early example of one of these was Plankalkül (which means plan calculus). This was developed by a gentleman called Konrad Zuse between the years of 1942 and 1945 roughly alongside his development of what has been called the first “working digital computer”(Ref#: B). This early attempt to develop what we would now call a programming language did not end up with practical uses at the time, nevertheless, it was remarkable how many “standard features of today’s programming languages” Plankalkül had (Ref#: C).\n\nPlankalkül\n\nAnother early higher-level language was Short Code. Developed by John Mauchly in 1949 and was originally known as Brief Code, it was used with the UNIVAC I computer after William Schmitt made a version for it in 1950.\n\nFollowing on from John’s work (and also working on the UNIVAC) Richard K. Ridgway and Grace Hopper developed the A-O System, which is called “first compiler system” in 1951/52, although it was more of a loader/linker compared with a modern compiler.\n\nIn General, we have seen the following themes emerge across the decades:\n\n(source: https://slideplayer.com/slide/9262894)\n\nA Visualization Of A Graph DB of Connections Between Languages\n\nsource\n\nWe’ve summarized the historical context, so let’s move on now to the stories of our main programming languages.\n\nback to index\n\nFORTRAN (~1953)\n\nFortran (or FORTRAN, from Formula Translation) is a general-purpose, imperative programming language that is especially suited to numeric computation and scientific computing.\n\nIt was a time of great change and technological advancements, with the world still recovering from the devastating effects of the Second World War. The year was 1953, and music was still in quite a familiar war-time style with popular songs like ‘A Sunday Kind of Love’ by The Harptones and ‘Have You Heard?’ by Joni James. It was also the year when Queen Elizabeth II, who was for many years the beloved reigning monarch of Britain, was crowned Queen following the passing of her father, King George VI. The end of the Korean War was also announced, and the presidency of the United States was handed over to Dwight D. Eisenhower (a 5-star general who had been responsible for planning and executing the successful D-Day invasion of Normandy).\n\nThe idea behind this language was to make it a lot easier for people to translate things like mathematical formal into something machines understand but in a way that was intuitive and readable. FORTRAN is considered to be one of the first HLLs (High-Level Languages) to achieve widespread adoption – what this means is that it’s one of the first languages that abstract away the low-level operations of the CPU, thus allowing the programmer to deal more conceptually with the algorithms he or she is writing.\n\nFORTRAN is Procedural\n\nThe 1950s were a time of rapid technological advancements and computers were no exception. With their increasing popularity, computer experts sought ways to make these machines easier to use and more accessible to the general public. This led to the development of procedural programming.\n\nProcedural programming involved breaking down complex computations into smaller, more manageable steps called procedures or functions. These procedures could be invoked at any point during the execution of a program and even by other procedures. This approach made writing code much simpler and more efficient.\n\nAs a result, several new programming languages emerged, including Fortran, ALGOL, COBOL, and BASIC. Fortran, with its focus on numerical computations and scientific computing, quickly gained popularity and recognition. Its user-friendly and intuitive approach was ahead of its time and continues to inspire programming languages to this day.\n\nAmidst this exciting era, FORTRAN emerged as a truly remarkable development. Brought to life by the experts at IBM, FORTRAN was designed specifically for scientific and engineering applications. Its powerful capabilities and intuitive design soon established it as a dominant force in this field of programming.\n\nFor over half a century, FORTRAN has remained at the forefront of some of the most computationally intensive areas of study. From numerical weather prediction to finite element analysis, computational fluid dynamics, and beyond, FORTRAN has proven itself as a vital tool for scientific discovery.\n\nAnd as the race for greater computing power continues, FORTRAN remains a popular choice for high-performance computing. It is the language behind programs that rank and measure the world’s fastest supercomputers, cementing its place in the annals of computing history.\n\nUnlike a language like ALGOL, FORTRAN was not designed to handle complex functions, including the highly intricate Ackermann Function.\n\nThe Ackermann Function is an important example of a recursive function and is used in computer science as a means to demonstrate the capabilities and limitations of programming languages. This function is named after Wilhelm Ackermann, a German mathematician, and is an example of a well-known, but very complex, recursive function.\n\nThe Ackermann Function works by defining a sequence of rules, or “recursive calls,” that become increasingly complex and difficult for the computer to process. The function becomes so complex that it quickly exceeds the computational limits of many programming languages, including FORTRAN.\n\nAs a result, FORTRAN’s inability to effectively handle the Ackermann Function highlights its limitations in handling complex, recursive functions and serves as an important reminder to computer scientists and programmers to consider the strengths and weaknesses of a given programming language when choosing a suitable tool for the task at hand.\n\n(Ref#: B).\n\nKey People\n\nJohn Backus\n\nBorn in 1924, the same year as IBM itself was born, Backus was a man with a really interesting life story. Backus eventually moved to New York and then began working on key projects for IBM.\n\nThe Team\n\nThe FORTRAN team was put together gradually, beginning with Irving (“Irv”) Ziller and John Backus, and a short time later they were to be joined by Harlan Herrick, then they hired Robert “Bob” Nelson as a technical typist. Then Sheldon Best from MIT came along, and Roy Nutt from United Aircraft. Subsequently Peter Sheridan, Dave Dayre, Lois Haibt, Richard “Dick” Goldberg etc.\n\nIrv Ziller\n\n“In late 1953, Backus wrote a memo to his boss that outlined the design of a programming language for IBM’s new computer, the 704. This computer had a built-in scaling factor, also called a floating point, and an indexer, which significantly reduced operating time. However, the inefficient computer programs of the time would hamper the 704’s performance, and Backus wanted to design not only a better language but one that would be easier and faster for programmers to use when working with the machine. IBM approved Backus’s proposal, and he hired a team of programmers and mathematicians to work with him” (SOURCE: E).\n\nThe chronology was that it was in 1949 that he began working on IBM’S SSEC computer he then worked in the famous Watson Lab in the period of 1950-1952, and beyond that, he and his team’s work published his work on FORTRAN in 1954.\n\nLanguage Features\n\nFortran had what it called Do-loops (which were a bit like for-loops) and what it used to implement programming loops using a counter, and you could nest these. However, it did not support user-level recursion due to employing a single stack-frame, making it a bad solution for something like an Ackermann function which is innately recursive, whereas it could work for something primitively recursive like a Fibonacci calculating function (Ref#: B).\n\nThere are actually a bunch of different versions of FORTRAN which have evolved over time:\n\nFORTRAN II appeared in 1958 and looked like this:\n\nSOURCE: Wikipedia\n\nVersions of FORTRAN\n\nThere have been several versions of the programming language.\n\n“In 1958, IBM released a revised version of the language, named FORTRAN II. It provided support for procedural programming by introducing statements which allowed programmers to create subroutines and functions, thereby encouraging the re-use of code.\n\nFORTRAN’s growing popularity led many computer manufacturers to implement versions of it for their own machines. Each manufacturer added its own customisations, making it impossible to guarantee that a program written for one type of machine would compile and run on a different type.\n\nIBM responded by removing all machine-dependent features from its version of the language. The result, released in 1961, was called FORTRAN IV” (Ref#: I).\n\nFORTRAN IV\n\nFORTRAN 66\n\nThe below example shows the use of the “Hollerith constant”, a way in which early version of the language including FORTRAN 66 dealt with character strings by essentially converting them to some numerical representation; “13H” means that the 13 characters after this will be treated as a “character constant”.\n\n“The space immediately following the 13H is a carriage control character, telling the I/O system to advance to a new line on the output. A zero in this position advances two lines (double space), a 1 advances to the top of a new page and + character will not advance to a new line, allowing overprinting” (SOURCE: F).\n\nFORTRAN 77\n\nFORTRAN 90 (95)\n\nThis added many of the features of more modern programming languages, including support for recursion, pointers, CASE statement, parameter type checking, and many other changes.\n\nSOURCE: F\n\nConclusion\n\nFORTRAN was made for the use of mathematicians and scientists and indeed it still to this day enjoys a certain level of popularity in being used in these areas, indeed it still is widely used by Physicists and “in a survey of Fortran users at the 2014 Supercomputing Convention, 100% of respondents said they thought they would still be using Fortran in five years”(Ref#: J). In fact product in 2019 were still being produced with support for a version of FORTRAN such as “Intel Parallel Studio XE 2019” (Ref#: G), and also the “OpenMP” API which is used to explicitly direct multi-threaded, shared memory parallelism, these were designed for shared-memory machines, this relates also the topic of Parallel Computing (Ref#: H).\n\nReferences\n\nA: https://www.youtube.com/watch?v=KohboWwrsXg\n\nB: https://www.youtube.com/watch?v=HXNhEYqFo0o\n\nC: https://chet-aero.com/downloads/fortran-77-resources/\n\nD: https://www.youtube.com/watch?v=KNEYtu48iyU\n\nE: https://www.thocp.net/biographies/backus_john.htm\n\nF: https://en.wikibooks.org/wiki/Fortran/Fortran_examples#FORTRAN_66_(also_FORTRAN_IV)\n\nG: https://www.youtube.com/watch?v=IdwBeNeIR9o&t=\n\nH: https://computing.llnl.gov/tutorials/openMP/\n\nI: https://www.obliquity.com/computer/fortran/history.html\n\nJ: http://moreisdifferent.com/2015/07/16/why-physicsts-still-use-fortran/\n\nK: https://www.youtube.com/watch?v=uFQ3sajIdaM\n\nback to index\n\nLISP (1958 -)\n\nLISP is a symbolic language that can be challenging to learn which is used in academic circles for applications with main uses in artificial intelligence.\n\n“Lisp (historically LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation. Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Clojure, Common Lisp, and Scheme” (Wikipedia).\n\nLisp is considered Declarative. However, in-fact, Lisp is actually multi-paradigm: it’s procedural as well as functional.\n\n“””\n\nDeclarative programming is often defined as any style of programming that is not imperative. A number of other common definitions attempt to define it by simply contrasting it with imperative programming. For example:\n\nA high-level program that describes what a computation should do.\n\nAny programming language that lacks side effects (or more specifically, is referentially transparent)\n\nA language with a clear correspondence to mathematical logic.\n\nThese definitions overlap substantially.\n\nDeclarative programming contrasts with imperative and procedural programming. Declarative programming is a non-imperative style of programming in which programs describe their desired results without explicitly listing commands or steps that must be performed. Functional and logical programming languages are characterized by a declarative programming style. In logical programming languages, programs consist of logical statements, and the program executes by searching for proofs of the statements.\n\nIn a pure functional language, such as Haskell, all functions are without side effects, and state changes are only represented as functions that transform the state, which is explicitly represented as a first class object in the program. Although pure functional languages are non-imperative, they often provide a facility for describing the effect of a function as a series of steps. Other functional languages, such as Lisp, OCaml and Erlang, support a mixture of procedural and functional programming.\n\n“”” (Wikipedia).\n\nKey People\n\nJohn McCarthy\n\nMcCarthy was a key figure in early AI who coined the term “Artificial Intelligence”.\n\nHe”developed the Lisp programming language family, significantly influenced the design of the ALGOL programming language, popularized timesharing, and was very influential in the early development of AI” (Wikipedia).\n\nLinks to Smalltalk and the History of OOP\n\n“Lisp deeply influenced Alan Kay, the leader of the research team that developed Smalltalk at Xerox PARC; and in turn Lisp was influenced by Smalltalk, with later dialects adopting object-oriented programming features (inheritance classes, encapsulating instances, message passing, etc.) in the 1970s. The Flavors object system introduced the concept of multiple inheritance and the mixin. The Common Lisp Object System provides multiple inheritance, multimethods with multiple dispatch, and first-class generic functions, yielding a flexible and powerful form of dynamic dispatch.”(Wikipedia).\n\nExample Code\n\nHello World\n\nAverage of Numbers\n\nUsing Lambdas (aka Anonymous Functions)\n\nSource: Ref#B\n\nConditional Logic\n\nReferences\n\nA: https://www.tutorialspoint.com/lisp_programming_examples/\n\nB: https://learnxinyminutes.com/docs/common-lisp/\n\nC: http://groups.umd.umich.edu/cis/course.des/cis400/lisp/crapcode.txt\n\nback to index\n\nALGOL (1958)\n\nIntroduction\n\nALGOL is a high-level language with algebraic style (it’s no longer in current use but influenced languages like Ada and Pascal), its main use was in mathematical work.\n\nThe year was 1958, the year NASA was created (with the work of paperclip and other scientists), and the year of the Brussels World’s Fair (pictured below), in the popular charts that year were the Everly Brothers with All I Have To Do Is Dream. The setting was Zurich in Switzerland, specifically ETH Zurich (a well-known STEM university) in Switzerland, and the occasion was the Zurich ACM-GAMM Conference. In a joint project of the ACM (Association for Computing Machinery) and the GAMM (Association for Applied Mathematics and Mechanics) the proposed International Algebraic Language was approved.\n\nNotable features of IAL included compound statements; IAL was “intended to provide convenient and concise means for expressing virtually all procedures of numerical computation while employing relatively few syntactical rules and statement types”(Ref#: A).\n\n“The first ALGOL 58 compiler was completed by the end of 1958 by Friedrich L. Bauer, Hermann Bottenbruch, Heinz Rutishauser, and Klaus Samelson for the Z22 computer. Bauer et al. had been working on compiler technology for the Sequentielle Formelübersetzung (i.e. sequential formula translation) in the previous years”(Source: Wikipedia).\n\nKey People\n\nJohn (J. W.) Backus a programming language designer at IBM.\n\nPeter Naur danish computer scientist “dataologist” and a Turing Award winner, known for the Backus–Naur form (along with John Backus of ALGOL fame)he contributed to the creation of the ALGOL 60 programming language.\n\nThere are three flavors of ALGOL which take their names from their years of instantiation:\n\nALGOL 58 (IAL)\n\n“ALGOL 58, originally known as IAL, is one of the family of ALGOL computer programming languages. It was an early compromise design soon superseded by ALGOL 60.”\n\nALGOL 60\n\n“ALGOL 60 […] followed on from ALGOL 58 which had introduced code blocks and the begin and end pairs for delimiting them. ALGOL 60 was the first language implementing nested function definitions with lexical scope. It gave rise to many other programming languages, including CPL, Simula, BCPL, B, Pascal and C.”\n\nCode Example (ICT 1900 series variety)\n\nFor a variety of reasons, ALGOL 60 was never widely used, and other languages of the time were generally preferred.\n\nALGOL 68\n\nALGOL 68 was designed to be a successor to the ALGOL 60 programming language, with the goal of expanding its scope of application and providing a more precisely defined syntax and semantics. The language’s definition, however, was highly complex, spanning hundreds of pages with unconventional terminology, making compiler implementation a challenge. As a result, ALGOL 68 was said to have “no implementations and no users”, which was only partially accurate. Despite this, the language found limited use in certain niche markets, such as in the United Kingdom where it was widely used on ICL machines, and as a tool for teaching computer science. However, outside of these communities, its usage was relatively limited.\n\nICL (International Computers Limited) was a UK-based computer company that used ALGOL 68 as one of the primary programming languages on its mainframe computers in the 1970s and 1980s. ICL machines were widely used in government, academic, and research institutions in the UK and ALGOL 68 was well-suited to the high-level mathematical and scientific computing tasks that were common on these systems. The language’s support for complex data structures and its high-level, expressive syntax made it popular among ICL users for a variety of applications, including scientific simulations, data analysis, and numerical computations.\n\nThe use of ALGOL 68 on ICL machines was significant because it helped establish the language as a viable option for scientific computing, despite its reputation for being difficult to implement. The combination of ICL’s hardware and the capabilities of ALGOL 68 made the company a leader in the field of high-performance computing in the UK during this time period. Although the popularity of ALGOL 68 eventually declined with the rise of more widespread programming languages such as C and FORTRAN, its use on ICL machines helped to establish the language as an important part of the history of computer science.\n\n(Wikipedia/ChatGPT).\n\nJOVIAL\n\nJOVIAL, short for Jules’ Own Version of the International Algebraic Language (developed by a guy called Jules Schwartz), is a high-level programming language that was developed by a team at System Development Corporation (SDC) in the late 1950s. JOVIAL was designed specifically for applications in military aircraft control systems and was commissioned by the United States Air Force (USAF). The language was developed with the goal of being a robust and reliable tool for composing software for the electronics of military aircraft, making it well-suited for use in mission-critical scenarios.\n\nJOVIAL was developed as a “high-order” programming language, meaning that it was designed to allow for the creation of high-level abstractions and was optimized for readability and maintainability. This made JOVIAL a popular choice for aircraft control systems, where the software needed to be both safe and dependable. JOVIAL systems were used for many years in actual air traffic control systems, making them a critical component of the infrastructure that supported military aviation.\n\nIn this way, JOVIAL can be compared to the modern programming language ADA, which was also designed for use in critical systems and is widely used in safety-critical industries such as aerospace, defense, and transportation. The development of JOVIAL was a major step forward in the evolution of high-level programming languages and its continued use in aircraft control systems is a testament to its robustness and reliability.\n\nReferences\n\nA: http://www.softwarepreservation.org/projects/ALGOL/paper/Backus-Syntax_and_Semantics_of_Proposed_IAL.pdf\n\nB: https://dl.acm.org/citation.cfm?doid=367236.367262\n\nC: http://slideplayer.com/slide/6370501/\n\nD: https://en.wikipedia.org/wiki/JOVIAL\n\nback to index\n\nCOBOL (1959)\n\nIn April 1959, Mary K. Hawes, who had identified the need for a common business language in accounting, called a meeting of representatives from academia, computer users, and manufacturers at the University of Pennsylvania. The meeting focused on strategies to get agreement on a common business computer language.\n\nPhoto of Admiral Grace Hopper (she was involde in guiding the project)\n\n“Mary Hawes, a Burroughs Corporation programmer, called in March 1959 for computer users and manufacturers to create a new computer language—one that could run on different brands of computers and perform accounting tasks such as payroll calculations, inventory control, and records of credits and debits” (Ref#: A).\n\nRepresentatives present that day included Grace Hopper, Jean Sammet, and Saul Gorn.\n\nWhat they eventually would come up with was COBOL or the “COmmon, Business-Oriented Language”. Yet, in fact, the First Draft of COBOL, was produced in November 1959.\n\n“During 1959 the first plans for the computer language COBOL emerged as a result of meetings of several committees and subcommittees of programmers from American business and government. This heavily annotated typescript was prepared during a special meeting of the language subcommittee of the Short-Range Committee held in New York City in November. COBOL programs would actually run the following summer, and the same program was successfully tested on computers of two different manufacturers in December 1960.”\n\nCOBOL Example Code\n\nSOURCE: B\n\nReferences\n\nA: http://americanhistory.si.edu/cobol/introduction\n\nB: http://www.csis.ul.ie/cobol/examples/Conditn/Conditions.htm\n\nback to index\n\ntest edit is saving 060220\n\nSimula (1964-67)\n\nIn tracing the evolution of Object-Oriented Programming (OOP) languages, many believe Simula is an important milestone. Developed in the 1960s at the Norwegian Computing Center in Oslo by Ole-Johan Dahl and Kristen Nygaard, Simula encompasses two iterations: Simula I and Simula 67. Syntactically, it stands as a comprehensive superset of ALGOL 60, while also bearing influences from Simscript.\n\nOriginally conceived as a tool for discrete event simulation, Simula underwent subsequent expansion and reimplementation to evolve into a robust general-purpose programming language. Simula 67 notably introduced several groundbreaking concepts to the programming world. These include objects, classes, inheritance, subclasses, virtual procedures, coroutines, discrete event simulation mechanisms, and the incorporation of garbage collection. Additionally, it pioneered various forms of subtyping beyond merely inheriting subclasses.\n\nAs its name suggests, Simula was designed for doing simulations, and the needs of that domain provided the framework for many of the features of object-oriented languages today.\n\nSimula’s versatility is manifest in its diverse applications. It has been employed in simulating VLSI designs, process modeling, protocol development, algorithmic studies, as well as in typesetting, computer graphics, and educational contexts. Despite its foundational significance, the influence of Simula is occasionally overlooked. Nevertheless, its concepts have been reimagined and incorporated into subsequent languages like C++, Object Pascal, Java, and C#. Esteemed computer scientists, including Bjarne Stroustrup, the progenitor of C++, and James Gosling, the architect of Java, have publicly recognized Simula’s seminal influence on their work (Wikipedia).\n\nExample Code\n\nClasses\n\n“A central new concept in SIMULA 67 is the “object”. An object is a self-contained program (block instance), having its own local data and actions defined by a “class declaration”. The class declaration defines a program (data and action) pattern, and objects conforming to that pattern are said to “belong to the same class””(Ref#: B).\n\nSimula introduced the concept of Classes which was later picked up by a lot of future OO Programming Languages.\n\nReferences\n\nA: http://staff.um.edu.mt/jskl1/talk.html\n\nB: http://simula67.at.ifi.uio.no/Archive/Intro-simula/intro.pdf\n\nC: http://staff.um.edu.mt/jskl1/talk.html\n\nback to index\n\nPascal (1968/70)\n\n“Pascal is an imperative and procedural programming language, which Niklaus Wirth designed in 1968–69 and published in 1970, as a small, efficient language intended to encourage good programming practices using structured programming and data structuring. It is named in honor of the French mathematician, philosopher and physicist Blaise Pascal. “”\n\nKey People\n\nNiklaus Wirth\n\n“From 1963 to 1967 he served as assistant professor of Computer Science at Stanford University and again at the University of Zurich. Then in 1968 he became Professor of Informatics at ETH Zürich, taking two one-year sabbaticals at Xerox PARC in California (1976–1977 and 1984–1985). Wirth retired in 1999″ (Wikipedia).\n\nExample Pascal Code\n\nback to index\n\nProlog (~1972)\n\n“Prolog is a logic programming language associated with artificial intelligence and computational linguistics.\n\nProlog has its roots in first-order logic, a formal logic, and unlike many other programming languages, Prolog is intended primarily as a declarative programming language: the program logic is expressed in terms of relations, represented as facts and rules. A computation is initiated by running a query over these relations.\n\nKey People\n\nThe language was first conceived by Alain Colmerauer and his group in Marseille, France, in the early 1970s and the first Prolog system was developed in 1972 by Colmerauer with Philippe Roussel.\n\nProlog was one of the first logic programming languages, and remains the most popular among such languages today, with several free and commercial implementations available. The language has been used for theorem proving, expert systems, term rewriting, type systems, and automated planning, as well as its original intended field of use, natural language processing. Modern Prolog environments support the creation of graphical user interfaces, as well as administrative and networked applications.\n\nProlog is well-suited for specific tasks that benefit from rule-based logical queries such as searching databases, voice control systems, and filling templates” ().\n\nback to index\n\nThe C Programming Language (1972)\n\n“C is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations”(Wikipedia). “The C programming language was devised in the early 1970s as a system implementation language for the nascent Unix operating system. Derived from the typeless language BCPL, it evolved a type structure; created on a tiny machine as a tool to improve a meager programming environment, it has become one of the dominant languages of today” (Ref#: G).\n\nThe C language is considered low-level since it allows (indeed it sometimes requires) for manual memory management. As such there’s no built-in garbage-collection mechanism, however, on the plus side, it can allow for better optimizations being closer to machine code (the language that a given processor speaks). It’s used for systems and general programming due to it being typically fast and efficient.\n\nKey People\n\nDennis Ritchie\n\nRitchie worked for Bell Labs (AT&T) in the 1960s, and along with several other employees of Bell Labs (AT&T), on a project called Multics (this was conceived as a time-sharing operating system), originally meant to be a contract to fulfill a need from General Electric. The Multics C compiler was primarily developed to facilitate the porting of third-party software to Multics. In 1969 AT&T (Bell Labs) withdrew from the project because the project could not produce an economically useful system.\n\nBrian Kernighan worked with Ritchie and Thompson at Bell Labs. Following on from their work at Bell Labs a book was created called “The C Programming Language, 1st edition”. Written by Brian Kernighan and Dennie Ritchie it became the classic text of the language (Ref#: A), although Brian clarified that he was no the creator of the C language but rather a fan of it.\n\nFeatures\n\nPortable\n\nPowerful\n\nFast and Efficient\n\nModularity\n\nPlatform Dependent\n\nUse of pointers\n\nMiddle Level\n\nRich Library\n\nExtensible\n\nStructure\n\nSupports recursion\n\nIt is a robust language with a rich set of built-in functions and operators that can be used to write any complex program. The C compiler combines the capabilities of an assembly language alongside some of the features of a high-level language. Programs written in C are efficient and fast due to its variety of data types and powerful operators. A C program is basically a collection of functions that are supported by C library. We can also create our own function and add it to C library. C language is the most widely used language in operating systems and embedded system development today.\n\nLinks to The Unix Operating System\n\nUnix was written in C programming language. with both UNIX and the C programming language being developed by AT&T / Bell Labs. In fact, the UNIX project was started in 1969 by Ken Thompson and Dennis Ritchie.\n\nCode Examples\n\nHello World Example\n\nAnother Example\n\nReferences\n\nA: https://www.codingunit.com/the-history-of-the-c-language\n\nB: https://en.wikipedia.org/wiki/Multics\n\nC: https://en.wikipedia.org/wiki/C_(programming_language)\n\nD: https://en.wikipedia.org/wiki/Unix\n\nE: https://www.studytonight.com/c/features-of-c.php\n\nF: https://www.cs.cmu.edu/~guna/15-123S11/Lectures/Lecture01.pdf\n\nG: https://www.jslint.com/chistory.html\n\nH: https://www.programiz.com/c-programming/examples/\n\nI: Brian Kernighan: UNIX, C, AWK, AMPL, and Go Programming | AI Podcast #109 with Lex Fridman [Internet Video]. Sourced from https://www.youtube.com/watch?v=O9upVbGSBFo on 20th July 2020.\n\nback to index\n\nML (1973)\n\nML is a functional programming language which was developed by Robin Milner and others at the Edinburgh Laboratory for Computer Science in Scotland. The purpose of ML was to create a language that was a better “theorem prover” than Lisp, where Lisp was found by Milner to often make mistakes when used for this function.\n\n“ML (“Meta Language”) is a general-purpose functional programming language. It has roots in Lisp, and has been characterized as “Lisp with types“.[citation needed] ML is a statically-scoped functional programming language like Scheme. It is known for its use of the polymorphic Hindley–Milner type system, which automatically assigns the types of most expressions without requiring explicit type annotations, and ensures type safety – there is a formal proof that a well-typed ML program does not cause runtime type errors. ML provides pattern matching for function arguments, garbage collection, imperative programming, call-by-value and currying. It is used heavily in programming language research and is one of the few languages to be completely specified and verified using formal semantics. Its types and pattern matching make it well-suited and commonly used to operate on other formal languages, such as in compiler writing, automated theorem proving, and formal verification” (Ref#: A).\n\nAside on Hindley-Milner Type Inference\n\nThe “Hindley–Milner (HM) type system is a classical type system for the lambda calculus with parametric polymorphism. It is also known as Damas–Milner or Damas–Hindley–Milner. … Luis Damas contributed a close formal analysis and proof of the method in his PhD thesis” (Wikipedia).\n\n“HM has been rediscovered many times by many people. Curry used it informally in the 1950’s (perhaps even the 1930’s). He wrote it up formally in 1967 (published 1969). Hindley discovered it independently in 1969; Morris in 1968; and Milner in 1978. In the realm of logic, similar ideas go back perhaps as far as Tarski in the 1920’s”(Ref#: B).\n\n“Among HM’s more notable properties are its completeness and its ability to infer the most general type of a given program without programmer-supplied type annotations or other hints. Algorithm W is an efficient type inference method that performs in almost linear time with respect to the size of the source, making it practically useful to type large programs. HM is preferably used for functional languages. It was first implemented as part of the type system of the programming language ML. Since then, HM has been extended in various ways, most notably with type class constraints like those in Haskell.” (Wikipedia)\n\nThe algorithm in question looks to infer value types based on use. It formalizes the intuition that a type can be deduced by looking at the functionality it supports.\n\nAlgorithm W is an efficient type inference algorithm that is used to deduce the type of variables in the Hindley-Milner (HM) type system. The algorithm operates in almost linear time with respect to the size of the source code, making it a practical solution for typing large programs.\n\nThe algorithm is an important part of the HM type system, as it allows the type system to infer the most general type of a given program without the need for programmer-supplied type annotations or hints. This makes the HM type system a powerful tool for functional programming, where a strong emphasis is placed on type correctness and type inference.\n\nAlgorithm W is named after its inventor, Robin Milner, who first described the algorithm in the late 1970s. The algorithm is considered to be one of the seminal contributions to the field of type theory and type inference in computer science.\n\nStandard ML\n\nSML or Standard ML is a modern dialect of the ML language.\n\nHere is an extended set of Standard ML Code:\n\nMore Examples Here: https://learnxinyminutes.com/docs/standard-ml/\n\nReferences\n\nA: https://en.wikipedia.org/wiki/ML_(programming_language)\n\nB: https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/interp/inference.html\n\nADA (~1978/79 onwards)\n\nADA is a high-level language whose main use is in defense applications.\n\nAs the sun set on the late 1970s, the world was swept away by the “sweet” melodies of the Bee Gees’ hit song “How Deep is Your Love”. Meanwhile, in a small corner of the computer science world, a group of passionate engineers were deeply devoted to a different kind of love – the love of solving complex programming problems.\n\nThe United States Department of Defense had issued a challenge to the world, seeking a new language to tackle its legacy code issues and other programming difficulties. It was in this arena that the team of computer enthusiasts found their calling, and poured their hearts into creating a language that would rise to the top.\n\nOne of the competition entries caught the eye of the judges, a language that was elegant, robust, and designed specifically for mission-critical systems. And so, the love affair between ADA and the DOD began, a relationship that would endure for decades to come, as ADA became the programming language of choice for some of their key systems.\n\nIt had started with a group of dedicated computer scientists in France who had been busy at work, tasked with solving a critical challenge faced by the United States Department of Defense. The DOD, burdened with a vast array of over 450 programming languages, sought to streamline its system and find a single, stable and type-safe solution.\n\nThe call for a new programming language was answered by a team led by the brilliant French computer scientist Jean Ichbiah of CII Honeywell Bull, a company with roots dating back to 1931. Under contract with the DoD, Ichbiah and his team worked tirelessly to create a language that would meet the needs of the military, culminating in the proposed language, “Green”.\n\nTheir hard work paid off as “Green” emerged victorious in the DOD competition, and was eventually named Ada, in honor of Ada Lovelace, the pioneering “computer programmer” who lived in the 19th century.\n\nADA creates solutions to many of the same tasks as could do implemented in the likes of C or C++, however, it has one of the best type-safety systems available in a statically typed programming language – making it “safer”. In 1987, the DOD began to require the use of Ada for every software project where new code was going to make up more than 30% of the project, though exceptions to this rule were often granted. In 1997, the DoD Ada mandate was effectively removed as the DoD began to embrace more commercial off-the-shelf technology as opposed to always developing custom solutions in each use case.\n\nADA went on to be used in a number of safety-critical systems, including everything Boeing jetliners to missile systems. So that lack of “crashability” of programs written in ADA (due to it being strongly-typed) was naturally super important to clients who wanted to use it in these critical systems.\n\nKey People\n\nJean Ichbiah (1940 – 2007) was French with Jewish origins having been descended from Greek and Turkish Jews from the area of Thessaloniki who had previously emigrated to France.\n\n“Ichbiah’s team submitted a language design labeled “Green” to a competition to choose the United States Department of Defense’s embedded programming language. When Green was selected in 1978, he continued as chief designer of the language, now named “Ada”. In 1980, Ichbiah left CII-HB and founded the Alsys corporation in La Celle-Saint-Cloud, which continued language definition to standardize Ada 83, and later went into the Ada compiler business, also supplying special validated compiler systems to NASA, the US Army, and others. He later moved to the Waltham, Massachusetts subsidiary of Alsys” (Ref#: A).\n\nCode Example (ADA 95)\n\nSource: Ref C\n\nPolymorphism in Ada\n\nPrior to ADA 95, there were some aspects of object-oriented languages that Ada did not explicitly support out of the box, including inheritance and polymorphism, but it was still possible to implement these in the language by adding extra code (https://dl.acm.org/doi/abs/10.1145/142003.142005).\n\n“The full power of object orientation is realized by polymorphism, class-wide programming and dynamic dispatching…” (Ref#: D).\n\n“In 1995 facilities were added to Ada to easily support inheritance. Inheritance lets us define new types as extensions of existing types; these new types inherit all the operations of the types they extend.”\n\n[TODO: Add example code demonstrating this.]\n\nADA 95 Example\n\nSource: https://dwheeler.com/lovelace/s7s2.htm\n\nReferences\n\nA: https://www.revolvy.com/page/Jean-Ichbiah\n\nB: http://acqnotes.com/subcategory/software-management/page/4\n\nC: https://perso.telecom-paristech.fr/pautet/Ada95/chap16.htm\n\nD: https://en.wikibooks.org/wiki/Ada_Programming/Object_Orientation\n\nback to index\n\nC++ / “C Plus Plus” (1979)\n\nTo explore C++ we must travel back, back further indeed through some sort of Psychedelic wormhole, floating then all the way back to the 1970s. Amongst the youth of the day the fashion was polyester, bright colors, flares, tight-fitting pants, and platform shoes.\n\nThen to 1979, Britain’s first female prime minister Margaret Thatcher was elected, cult TV series Tales of the Unexpected began to show, and in the British pop charts was everything from the Village People (YMCA), to The Police (as the culture that became the 1980s took hold).\n\nMeanwhile, in Cambridge, a dude called Bjarne Stroustrup was up to something, something he called “C with Classes”, in fact, this danish computer scientist had come up with what was to turn into C++ as we know it today. Stroustrup recalls that “C++ was designed to provide Simula’s facilities for program organization together with C’s efficiency and flexibility for systems programming. ” (http://www.stroustrup.com/hopl2.pdf).\n\nThe below image is probably the computer Stroustrup used at the time (although not with him), an IBM 370/165 which was installed at the Cambridge University Computing Service in 1971 (so I believe this is likely what he used), although he calls this an “IBM 360/165” in a document he published (C++Ref#A).\n\nApparently the genesis of the ideas that were to lead to the creation of C++ occurred to Stroustrup during his Ph.D at Cambridge University apparently from a sort of side product to work for his thesis, a type of compiler written in the Simula programing language (Simula was a language developed in the mid-60s and based on ALGOL but with lots of extra features, designed for simulation, it is often seen as perhaps the first OO language). (C++Ref#:B)\n\nNow, this dude loved the features of Simula but he thought that it would be super cool if he could combine some of the structure of Simula into maybe a faster C based programming language, as he also loved the low-level micro-code machine code level.\n\nExample C++ Code\n\nSource: http://www.codebind.com/cpp-tutorial/cpp-hello-world-program/\n\nSource: https://github.com/diasurgical/devilutionX\n\nStroustrup realized that you needed a strong type system to make a language work well, but whilst he found the type systems of other languages frustrating, the ability to build our your own type system (or “classes”), as found in Simula, appealed to him.\n\nHe targeted the idea of bringing the language which is reasonably understandable by most people in the areas reached, but without losing the speed and efficiency of the raw mathematical fundamentals appealing.\n\nHe wanted to be able to make his own types based on the problem he was solving (as in Simula) so he brought this kind of OO concept into C++. He wanted the ability to tap into the strengths of things like run-time polymorphism in solving tasks.\n\nSOURCE: https://www.youtube.com/watch?v=uTxRF5ag27A\n\nC++, because it’s rooted on C is really considered an efficient language for real-world large-scale deployments.\n\nIt’s a language that’s great for working with low-level hardware efficiently whilst also offering great tools for abstraction. It also derived OO concepts from Simula like with the virtual functions in Simula for inheritance, which was replicated into C++ using a jump-table, although the C++ version was simpler and faster such that the overhead of the OO inheritance-based computations was less when compiling though its original intermediate stage of optimized C code.\n\nback to index\n\nSmalltalk (1971-80)\n\nThis language is one of the root languages that lead to modern OOP programing.\n\n“Smalltalk is an object-oriented, dynamically typed reflective programming language”.\n\nThe language was principally designed and created in part for educational use, “more so for constructionist learning, at the Learning Research Group (LRG) of Xerox PARC by Alan Kay, Dan Ingalls, Adele Goldberg, Ted Kaehler, Scott Wallace, and others during the 1970s”.\n\nSmalltalk is often used to refer to the Smalltalk-80 Programming Language, this is perhaps the first version to be made publicly available and it was created in 1980.\n\n“Smalltalk was the product of research led by Alan Kay at Xerox Palo Alto Research Center (PARC); Alan Kay designed most of the early Smalltalk versions, Adele Goldberg wrote most of the documentation, and Dan Ingalls implemented most of the early versions” (Wikipedia).\n\n“The first version, termed Smalltalk-71, was created by Kay in a few mornings on a bet that a programming language based on the idea of message passing inspired by Simula could be implemented in “a page of code”. A later variant used for research work is now termed Smalltalk-72 and influenced the development of the Actor model. Its syntax and execution model were very different from modern Smalltalk variants” (Wikipedia).\n\n“Smalltalk-80 was the first language variant made available outside of PARC, first as Smalltalk-80 Version 1, given to a small number of firms (Hewlett-Packard, Apple Computer, Tektronix, and Digital Equipment Corporation (DEC)) and universities (UC Berkeley) for peer review and implementing on their platforms. Later (in 1983) a general availability implementation, named Smalltalk-80 Version 2, was released as an image (platform-independent file with object definitions) and a virtual machine specification. ANSI Smalltalk has been the standard language reference since 1998″ (Wikipedia).\n\n“…The sixties, particularly in the ARPA community, gave rise to a host of notions about “human-computer symbiosis” through interactive time-shared computers, graphics screens and pointing devices. Advanced computer languages were invented to simulate complex systems such as oil refineries and semi-intelligent behavior. The soon to follow paradigm shift of modern personal computing, overlapping window interfaces, and object-oriented design came from seeing the work of the sixties as something more than a “better old thing”. That is, more than a better way: to do mainframe computing; for end-users to invoke functionality; to make data structures more abstract. Instead the promise of exponential growth in computing/$/volume demanded that the sixties be regarded as “almost a new thing” and to find out what the actual “new things” might be. For example, one would compute with a handheld “Dynabook” in a way that would not be possible on a shared mainframe; millions of potential users meant that the user interface would have to become a learning environment along the lines of Montessori and Bruner; and needs for large scope, reduction in complexity, and end-user literacy would require that data and control structures be done away with in favor of a more biological scheme of protected universal cells interacting only through messages that could mimic any desired behavior. Early Smalltalk was the first complete realization of these new points of view as parented by its many predecessors in hardware, language and user interface design. It became the exemplar of the new computing, in part, because we were actually trying for a qualitative shift in belief structures—a new Kuhnian paradigm in the same spirit as the invention of the printing press—and thus took highly extreme positions which almost forced these new styles to be invented” (summarized abstract from Kay. A.C. (1993). The Early History of Smalltalk).\n\nSmalltalk was one of many Object-Oriented programming languages based on Simula.\n\n“””\n\nA Smalltalk object can do exactly three things:\n\nHold state (references to other objects).\n\nReceive a message from itself or another object.\n\nIn the course of processing a message, send messages to itself or another object.\n\n“””\n\nSmalltalk was very influential on subsequent programming languages including Objective-C, Java, Python, and Ruby. Smalltalk was actually a kind of side product of a lot of wider ARPA funded research that was done by this team.\n\nCode Example\n\nReferences\n\nA: https://medium.com/learn-how-to-program/chapter-2-introducing-smalltalk-b00cec93b25f\n\nB: https://github.com/adambard/learnxinyminutes-docs/blob/master/smalltalk.html.markdown\n\nback to index\n\nObjective-C (1980s)\n\nThis programming language dates back to the 1980s with a company called NeXT. The language took C and added in some Smalltalk like messaging elements. It went on to be used by Apple when Apple took over some of the work, slightly before but kinda around the same time that Steve Jobs moved back over to working for Apple and to again lead it in a new direction.\n\nKey People\n\nSome people behind this language were a couple of gentlemen called Brad Cox and Tom Love, initially linked to a company called Stepstone (Productivity Products International), the rights were then acquired in ’95 by NeXT computer, and subsequently, the rights were transferred again, this time to Apple who would go on to popularize the language primarily through the release development framework for their operating systems to a global network of developers.\n\nHow it Developed\n\nDrs Cox and Love had learned Smalltalk while at ITT Corporation’s Programming Technology Center in 1981. “Tom Love was the Director of the Advanced Technology Group at the Programming Technology Center(PTC), and he hired Brad Cox into that group at ITT” (ref#: C). Dr. Cox seemingly thought of what was to become Objective-C based on ideas he discovered in an August 1981 issue of Byte Magazine devoted to the topic of Smalltalk. This included, for example, an article by Larry Tesler called “The Smalltalk Environment”.\n\nIdeas developed by Cox based on this were seen in a 1983 paper called “The Object-Oriented Precompiler: Programming Smalltalk—80 Methods in C Language”. He referred originally to the language as OOPC. Following on from his original ideas, a second generation of the language was re-build from the ground up at Schlumberger Research, subsequently, a third version of the language was totally rebooted when Love & Cox worked at Productivity Products in June of 1983 (ref#: C).\n\n“In 1988, NeXT licensed Objective-C from StepStone (the new name of PPI, the owner of the Objective-C trademark) and extended the GCC compiler to support Objective-C. NeXT developed the AppKit and Foundation Kit libraries on which the NeXTSTEP user interface and Interface Builder were based.”().\n\nKey Language Characteristics:\n\n“The Objective-C model of object-oriented programming is based on message passing to object instances. In Objective-C one does not call a method; one sends a message. This is unlike the Simula-style programming model used by C++” (Wikipedia)\n\nExample Code\n\n…\n\nback to index\n\nSQL “sequel” (70s-1986)\n\nAh, although its origins lie back into the 70s, SQL was more fully developed in 1986, the year that Kiss by Prince hit the charts. Or, not as much fun, the Soviet Nuclear reactor at Chernobyl exploded (as explored in the so-named Netflix film). SQLs has since become the de facto industry standard for relational systems.\n\nSomewhere else in the world (i.e. IBM aka the home of business computing at the time) is developed “a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data where there are relations between different entities/variables of the data. SQL offers two main advantages over older read/write APIs like ISAM or VSAM: first, it introduced the concept of accessing many records with one single command; and second, it eliminates the need to specify how to reach a record, e.g. with or without an index” (Wikipedia).\n\nIt’s considered a 4GL or 4th generation language in that it is made to be human-readable.\n\nSQL data retrieval\n\nSQL has four commands for data manipulation\n\nSELECT: for retrieving data\n\nINSERT: for creating data\n\nUPDATE: for altering data\n\nDELETE: for removing data\n\nFor example, SELECT typically has the format:\n\nSELECT columns (or ‘*’)\n\nFROM relation(s)\n\n[WHERE constraint(s)] ;\n\nWhich, in a simple example, could look like:\n\nSELECT *\n\nFROM CUSTOMER\n\nWHERE NAME = ‘P Abdul’;\n\nCreating Tables\n\nCreating tables can look like:\n\nKey People\n\nSQL was initially developed at IBM by Donald D. Chamberlin and Raymond F. Boyce after learning about the relational model from Ted Codd in the early 1970s. This version, initially called SEQUEL (Structured English Query Language), was designed to manipulate and retrieve data stored in IBM’s original quasi-relational database management system, System R, which a group at IBM San Jose Research Laboratory had developed during the 1970s\n\nDonald D. Chamberlin\n\n“Donald Chamberlin was born in 1944 in San Jose, California, and holds a B.S. in engineering from Harvey Mudd College (1966) and an M.S. (1967) and Ph.D. (1971) in electrical engineering from Stanford University. Chamberlin is best known as co-inventor of SQL (Structured Query Language), the world’s most widely used database language. Developed in the mid-1970s by Chamberlin and Raymond Boyce, SQL was the first commercially successful language for relational databases. Chamberlin was also one of the managers of IBM’s “System R” project, which produced the first SQL implementation and developed much of IBM’s relational database technology.\n\nChamberlin joined IBM Research at the T.J. Watson Research Center, Yorktown Heights, New York, in 1971. In 1973, he returned to San Jose, California, and continued his work at IBM’s Almaden Research Center, where he was named an IBM Fellow in 2003. In 2009, he was appointed a Regents’ Professor at UC Santa Cruz.\n\nChamberlin was named an ACM Fellow in 1994 and an IEEE Fellow in 2007. In 1997, he received the ACM SIGMOD Innovations Award and was elected to the National Academy of Engineering. In 2005, he was given an honorary doctorate by the University of Zurich.” (Ref#: https://www.ithistory.org/honor-roll/dr-raymond-ray-f-boyce).\n\nRaymond F. Boyce\n\n“In the early 1970’s, together with Donald D. Chamberlin he co-developed Structured Query Language (SQL) while managing the Relation Database development group for IBM in San Jose, California. Initially called SEQUEL (Structured English Query Language) and based on their original language called SQUARE (Specifying Queries As Relational Expressions). SEQUEL was designed to manipulate and retrieve data in relational databases. By 1974, he and Chamberlin published “SEQUEL: A Structured English Query Language” which detailed their refinements to SQUARE and introduced us to the data retrieval aspects of SEQUEL. It was one of the first languages to use Edgar F. Codd’s relational model. SEQUEL was later renamed to SQL by dropping the vowels, because SEQUEL was a trademark registered by the Hawker Siddeley aircraft company. Today, SQL has been generally established as the standard relational databases language. In 1974, he and Edgar F. Codd, co-developed the Boyce–Codd normal form (or BCNF). It is a type of normal form that is used in database normalization. The goal of relational database design is to generate a set of database schemas that store information without unnecessary redundancy. Boyce-Codd accomplishes this and allows users to retrieve information easily. Using BCNF, databases will have all redundancy removed based on functional dependencies. It is a slightly stronger version of the third normal form. He died in 1974 as a result of an aneurysm of the brain, leaving behind his wife of almost five years, Sandy, and his daughter Kristin, who was just ten months old.”\n\nEXAMPLE SQL STATEMENTS\n\nHistory of SQL\n\n1970 – E.F. Codd develops the relational database concept\n\n1974-1979 – System R with Sequel (later called SQL) is created at the IBM Research Lab\n\n1979 – Oracle markets the first relational DB with SQL\n\n1981 – SQL/DS first available RDBMS system on DOS/VSE\n\nOthers followed: INGRES(1981), IDM(1982), DG/SGL(1984), Sybase(1986)\n\n1986 – The ANSI SQL was released\n\n1989, 1992, 1999, 2003, 2006, 2008 – Major ANSI standard updates\n\nPresent Day – SQL is supported by most major database vendors\n\nBasic Data Types in SQL\n\nCharacter types\n\nchar, varchar\n\nInteger values\n\ninteger, smallint\n\nDecimal numbers\n\nnumeric, decimal\n\nDate data type\n\ndate\n\nJOINs\n\n“It is not usually very long before a requirement arises to combine information from more than one table, into one coherent query result”.\n\nThere are various kinds of Joins but we won’t go into them all in this article, but will provide more details elsewhere.\n\nUSES\n\nSQL is best used in running and interacting with your data layer. Whilst it is possible to put business logic into our SQL databases (and sometime Data Base Administrators or DBAs will push for this due to their bias toward it), this practice is best avoided as it is typically best to separate out the application layer from database layer. This does not mean however that we should not take advantage of careful use of things like stor procs (stored procedures) in, for example, our Microsoft SQL Server databases or similar, as this often confers good efficience benefits in terms of time-efficiency ().\n\nDifferent Flavours of SQL\n\n“Although SQL is an ANSI (American National Standards Institute) standard, there are many different versions of the SQL language.\n\nHowever, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.\n\nNote: Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!”(http://w3schools.sinsixx.com/sql/sql_intro.asp.htm).\n\nhttps://dl.acm.org/doi/abs/10.1145/142003.142005https://dl.acm.org/doi/abs/10.1145/142003.142005\n\nMicrosoft SQL Server\n\nSQL Server is a relational database management system (RDBMS) developed by Microsoft – Built on top of SQL, it is also tied to Transact-SQL (T-SQL), Microsoft’s own variant of SQL that adds a set of proprietary programming constructs. Its main purpose is as a database server, that is to say for storing and retrieving data requested by other applications, either locally or over a network including the internet.\n\nMicrosoft has (in the past) tried to tie down SQL Server to the Windows environment, in a similar way to their attempt to essentially create essentially their own proprietary version of Java in the form of C#, which was also geared towards tying developers to their operating systems. However in 2016, Microsoft made SQL server available on Linux, and it then became generally available in 2016 to run on both Windows and Linux.\n\n“””\n\nSQL Server supports different data types, including primitive types such as Integer, Float, Decimal, Char (including character strings), Varchar (variable length character strings), binary (for unstructured blobs of data), Text (for textual data) among others. The rounding of floats to integers uses either Symmetric Arithmetic Rounding or Symmetric Round Down (fix) depending on arguments: SELECT Round(2.5, 0) gives 3.\n\nMicrosoft SQL Server also allows user-defined composite types (UDTs) to be defined and used. It also makes server statistics available as virtual tables and views (called Dynamic Management Views or DMVs). In addition to tables, a database can also contain other objects including views, stored procedures, indexes and constraints, along with a transaction log. A SQL Server database can contain a maximum of 231 objects, and can span multiple OS-level files with a maximum file size of 260 bytes (1 exabyte). The data in the database are stored in primary data files with an extension .mdf. Secondary data files, identified with a .ndf extension, are used to allow the data of a single database to be spread across more than one file, and optionally across more than one file system. Log files are identified with the .ldf extension.\n\n“””\n\nSQL Server Data Types\n\nData types in SQL Server are organized into the following categories:\n\nSOURCE: https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-ver15\n\nT-SQL\n\nTransact-SQL or T-SQL is a proprietary extension to SQL developed by Sybase and Microsoft. It expands on the functionality of basic SQL in a variety of ways including bringing in local variables, procedural programming capabilities, and adding various support functions for strings, dates, and math operations. There are also some changes in the use of the DELETE and UPDATE statements in T-SQL.\n\nFeatures of T-SQL\n\nTemporary Tables\n\nThe name of the temporary table starts with a hash symbol (#). For example, the following statement creates a temporary table using the SELECT INTO statement:\n\nStored Procedures\n\nA Stored Procedure is a piece of prepared SQL code that you can save such that the code can be reused over and over again. You can also pass parameters to a stored procedure so that the stored procedure can act based on the parameter value(s) that are passed to it. We’ve also see Stor Procs in Oracle-based solutions.\n\n“Stored procedures…allow one to move code that enforces business rules from the application to the database. As a result, the code can be stored once for use by different applications. Also, the use of stored procedures can make one’s application code more consistent and easier to maintain. This principle is similar to the good practice in general programming in which common functionality should be coded separately as procedures or functions”\n\nThe basic syntax of a stored procedure is as follows:\n\nT-SQL includes support for Stored Procedures which act as executable server-side routines where there is the ability to pass in parameters to these.\n\nhttp://www.sqlservertutorial.net/sql-server-stored-procedures/basic-sql-server-stored-procedures/\n\nSome of the most important advantages of using stored procedures are summarised as follows:\n\nBecause the processing of complex business rules can be performed within the database, significant performance improvement can be obtained in a networked client-server environment (refer to client-server chapters for more information).\n\nSince the procedural code is stored within the database and is fairly static, applications may benefit from the reuse of the same queries within the database. For example, the second time a procedure is executed, the DBMS may be able to take advantage of the parsing that was previously performed, improving the performance of the procedure’s execution.\n\nConsolidating business rules within the database means they no longer need to be written into each application, saving time during application creation and simplifying the maintenance process. In other words, there is no need to reinvent the wheel in individual applications, when the rules are available in the form of procedures.\n\nDECLARE, SET and SELECT\n\nFLOW CONTROL\n\nThere are various flow control keywords in SQL Server that we can use including…\n\nBEGIN…END RETURN BREAK THROW CONTINUE TRY…CATCH GOTO label WAITFOR IF…ELSE WHILE\n\nSource: Ref# U\n\nTRY CATCH\n\nThis new exception handling behaviour was introduced by Microsoft in SQL Server 2005, with the purpose of enabling developers to simplify their code.\n\nIt “Implements error handling for Transact-SQL that is similar to the exception handling in the Microsoft Visual C# and Microsoft Visual C++ languages. A group of Transact-SQL statements can be enclosed in a TRY block. If an error occurs in the TRY block, control is passed to another group of statements that is enclosed in a CATCH block”.\n\nSQLite\n\n“SQLite is an open source embedded relational database management system or RDBMS contained in a C programming library. Relational database systems are used to store data in large tables.\n\nIn contrast to other popular RDBMS products like Oracle Database, IBM’s DB2, and Microsoft’s SQL Server, SQLite does not require any administrative overhead or any setup complexity.\n\nAs the other databases are working as a standalone process, SQLite is not working as a standalone process. You have to link it with your application statically or dynamically.\n\nSQLite uses dynamically and weakly typed SQL for column. It means you can store any value in any column, regardless of the data type. SQLite implements most of the SQL92 standard” (Ref#: F).\n\nFeatures of SQLite\n\nServerless\n\nZero Configuration\n\nCross-Platform\n\nSelf-Contained (A single library contains the entire database system, which integrates directly into a host application).\n\nTransactional (ACID-compliant – all queries are Atomic, Consistent, Isolated, and Durable).\n\nLight-weight\n\nFamiliar language\n\nHighly Reliable\n\nDefault Constraint in SQLite\n\nSyntax\n\nThen when we don’t provide all the values, the DEFAULT one will be automatically populated for us:\n\nPlaying With sqlite3\n\nTo open sqlite3 from our mac Terminal (or iTerm) we can just type sqlite3 (assuming it’s installed)\n\nReferences\n\nA: https://www.youtube.com/watch?v=iFlAhGxwoZ0\n\nback to index\n\nPerl (~1987)\n\nThe year was 1987, the year that ‘The Simpsons’ made its first appearance (as part of the Tracy Ullman Show), and Whitney Houston hit the charts with So Emotional, with MJ and U2 also popular artists who had hits that year.\n\n“””\n\nPerl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. “Perl” refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned “sister language”, Perl 6, before the latter’s name was officially changed to Raku in October 2019.\n\nThough Perl is not officially an acronym, there are various backronyms in use, including “Practical Extraction and Reporting Language”. Perl was originally developed by Larry Wall in 1987 as a general-purpose Unix scripting language to make report processing easier. Since then, it has undergone many changes and revisions. Raku, which began as a redesign of Perl 5 in 2000, eventually evolved into a separate language. Both languages continue to be developed independently by different development teams and liberally borrow ideas from one another.\n\nThe Perl languages borrow features from other programming languages including C, shell script (sh), AWK, and sed; Wall also alludes to BASIC and Lisp in the introduction to Learning Perl (Schwartz & Christiansen) and so on. They provide text processing facilities without the arbitrary data-length limits of many contemporary Unix command line tools, facilitating manipulation of text files. Perl 5 gained widespread popularity in the late 1990s as a CGI scripting language, in part due to its unsurpassed regular expression and string parsing abilities.\n\nIn addition to CGI, Perl 5 is used for system administration, network programming, finance, bioinformatics, and other applications, such as for GUIs. It has been nicknamed “the Swiss Army chainsaw of scripting languages” because of its flexibility and power, and also its ugliness. In 1998, it was also referred to as the “duct tape that holds the Internet together,” in reference to both its ubiquitous use as a glue language and its perceived inelegance.\n\n“””\n\nKey People\n\nIn was in that same year that a dude called Larry Wall who worked at a company call Unisys decided to develop Perl; Mr. Wall’s aim with Perl was to make a Unix scripting language in order to make report processing easier to do. He decided to post Perl to the `comp.sources’ Usenet newsgroup in late 1987.\n\nExample Perl Code\n\n“[Perl] has undergone many changes and revisions. Perl 6, which began as a redesign of Perl 5 in 2000, eventually evolved into a separate language. Both languages continue to be developed independently by different development teams and liberally borrow ideas from one another” (Wikipedia).\n\nback to index\n\nERLANG(1986)\n\n“””\n\nErlang is a general-purpose, concurrent, functional programming language, and a garbage-collected runtime system. The term Erlang is used interchangeably with Erlang/OTP, or Open Telecom Platform (OTP), which consists of the Erlang runtime system, several ready-to-use components (OTP) mainly written in Erlang, and a set of design principles for Erlang programs.\n\nThe Erlang runtime system is designed for systems with these traits:\n\nDistributed\n\nFault-tolerant\n\nSoft real-time\n\nHighly available, non-stop applications\n\nHot swapping, where code can be changed without stopping a system.\n\n“””\n\nErlang does not encourage defensive programming, which leads to smaller programs.\n\nProcesses are based on immutable state.\n\nSupervisors\n\nThese are used where individual modules crash for monitoring and responding to such events.\n\nReferences\n\nA: https://en.wikipedia.org/wiki/Erlang_(programming_language)\n\nB: Erlang Programming Language – Computerphile\n\nVIDEO: retrieved from https://www.youtube.com/watch?v=SOqQVoVai6s on 18th Dev 2019\n\nback to index\n\nPython (1980s)\n\nPython is a general-purpose language dating back to the 1980s, and so relatively new as programming languages go. Python aims to be as readable as possible and is thus close to English in many ways with a limited set of build-in syntax. It uses indentation instead of, for example, things like curly brackets to denote scope and delineate the contents of functions and classes.\n\nPython programmers conform to the PEP-8 style guide, so this means code should be readable no matter which programmer created it, as long as they make things meaningful.\n\nBeing a small language it is found on embedded devices and on servers. It works well with HTTP as well.\n\nPython is in heavy use for scientific computing and there are a number of libraries that are built for us to use for these purposes. For example EarthPy\n\nKey People\n\nGuido van Rossum\n\nDutch programming dude Mr van Rossum started making Python in 1989. It was the year “Two Hearts” by Phil Collins, and “The Living Years” by Mike & The Mechanics were in the pop charts. More importantly perhaps, in November of that year, the Berlin Wall started to come down representing the start of the fall of the so-called Iron Curtain.\n\nMeaning while van Rossum started on Python with the aim was to create “a descendant of ABC that would appeal to Unix/C hackers”. He felt that ABC was a prisoner to its syntax, and its design as a teaching language, and wanted to free its feature set in nicer syntactical format.\n\nExample Code\n\nPython uses indentation to denote scope:\n\nPython is an interpreted language, but current versions also use a bytecode compilation step.\n\nVersions of Python\n\n“””\n\nPython was conceived in the late 1980s as a successor to the ABC language. Python 2.0, released in 2000, introduced features like list comprehensions and a garbage collection system with reference counting.\n\nPython 3.0, released in 2008, was a major revision of the language that is not completely backward-compatible, and much Python 2 code does not run unmodified on Python 3.\n\n“”” (Ref#: B)\n\nReferences\n\nA: https://docs.python.org/\n\nB: https://en.wikipedia.org/wiki/Python_(programming_language)\n\nC: https://www.youtube.com/watch?v=1eEbaMuMFX4\n\nback to index\n\nHaskell (1990/2010)\n\nHaskell has been described as a “modern lisp”; it is a functional programming language and it’s also called a ” lazy functional language” meaning that it allows for lazy evaluation which “makes it practical to modularize a program as a generator that constructs a large number of possible answers, and a selector that chooses the appropriate one”. It’s also described as a “general-purpose compiled purely functional programming language”.\n\nNamed after Haskell Brooks Curry and incorporating the principles of the lambda calculus.\n\n“Its main implementation is the Glasgow Haskell Compiler.” GHC having originally begun in 1989 as a prototype, written in LML (Lazy ML) by Kevin Hammond at the University of Glasgow.\n\n“GHC proper was begun in the autumn of 1989, by a team consisting initially of Cordelia Hall, Will Partain, and Peyton Jones. It was designed from the ground up as a complete implementation of Haskell in Haskell, bootstrapped via the prototype compiler. The only part that was shared with the prototype was the parser, which at that stage was still written in Yacc and C. The first beta release was on 1 April 1991 (the date was no accident), but it was another 18 months before the first full release (version 0.10) was made in December 1992. This version of GHC already supported several extensions to Haskell: monadic I/O (which only made it officially into Haskell in 1996), mutable arrays, unboxed data types (Peyton Jones and Launchbury, 1991), and a novel system for space and time profiling (Sansom and Peyton Jones, 1995). A subsequent release (July 1993) added a strictness analyser” (Ref#: A).\n\nSOURCES: https://www.youtube.com/watch?v=re96UgMk6GQ\n\nMonads\n\n“…monads are one of the most distinctive language design features in Haskell. Monads were not in the original Haskell design, because when Haskell was born a “monad” was an obscure feature of category theory whose implications for programming were largely unrecognised”(Ref#: A).\n\n“A monad is a design pattern that allows structuring programs generically while automating away boilerplate code needed by the program logic. Monads achieve this by providing their own data type, which represents a specific form of computation, along with one procedure to wrap values of any basic type within the monad (yielding a monadic value) and another to compose functions that output monadic values (called monadic functions).\n\nThis allows monads to simplify a wide range of problems, like handling potential undefined values (with the Maybe monad), or keeping values within a flexible, well-formed list (using the List monad). With a monad, a programmer can turn a complicated sequence of functions into a succinct pipeline that abstracts away auxiliary data management, control flow, or side-effects.\n\nBoth the concept of a monad and the term originally come from category theory, where a monad is defined as a functor (a map between categories – where a category or abstract category can be defined to be is a collection of “objects” that are linked by “arrows”. A category has two basic properties: the ability to compose the arrows associatively and the existence of an identity arrow for each object) with additional structure. Research beginning in the late 1980s and early 1990s established that monads could bring seemingly disparate computer-science problems under a unified, functional model. Category theory also provides a few formal requirements, known as the monad laws, which should be satisfied by any monad and can be used to verify monadic code.\n\nSince monads make semantics explicit for a kind of computation, they can also be used to implement convenient language features. Some languages, such as Haskell, even offer pre-built definitions in their core libraries for the general monad structure and common instances” (Wikipedia).\n\nHaskell is noted for its ability to be “concise and articulate”,\n\nExample Haskell Code\n\nThere’s a whole bunch of stuff you can do in Haskell, see the reference code here: https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/Simple%20examples\n\nReferences\n\nA: https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/history.pdf\n\nB: A Crash Course in Category Theory – Bartosz Milewski [Video]. Retrieved from https://www.youtube.com/watch?v=JH_Ou17_zyU – on 27th Nov 19.\n\nback to index\n\nVisual Basic (1991-)\n\nVisual Basic 1.0 was introduced in 1991. The drag and drop design for creating the user interface is derived from a prototype form generator developed by Alan Cooper and his company called Tripod. Microsoft contracted with Cooper and his associates to develop Tripod into a programmable form system for Windows 3.0, under the code name Ruby (no relation to the later Ruby programming language). Tripod did not include a programming language at all. Microsoft decided to combine Ruby with the Basic language to create Visual Basic. The Ruby interface generator provided the “visual” part of Visual Basic, and this was combined with the “EB” Embedded BASIC engine designed for Microsoft’s abandoned “Omega” database system. Ruby also provided the ability to load dynamic link libraries containing additional controls (then called “gizmos”), which later became the VBX interface.\n\nKey People\n\nAlan Cooper\n\nDetails\n\nVisual Basic is a third-generation event-driven programming language from Microsoft known for its Component Object Model (COM) programming model first released in 1991 and declared legacy during 2008. Microsoft intended Visual Basic to be relatively easy to learn and use. Visual Basic was derived from BASIC and enables the rapid application development (RAD) of graphical user interface (GUI) applications, access to databases using Data Access Objects, Remote Data Objects, or ActiveX Data Objects, and creation of ActiveX controls and objects.\n\n(Source: Wikipedia)\n\nThe last version of old-school Visual Basic is VB6.\n\nExample Code\n\nSecond Example (VB6)\n\nSOURCE: https://www.vbtutor.net/timebomb.htm\n\nRuby(1994–)\n\n“Ruby is an interpreted, high-level, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro “Matz” Matsumoto in Japan.”\n\nUse Cases\n\nExample Code\n\nSource: https://www.rubyguides.com/2019/02/ruby-code-examples/\n\nClasses\n\nSource: Wikipedia\n\nConclusion\n\nRuby is an interesting language and was previously used more widely with web back end stuff such as when it was used to write the framework “Ruby on Rails”.\n\n“””\n\nRuby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License. Rails is a model–view–controller (MVC) framework, providing default structures for a database, a web service, and web pages. It encourages and facilitates the use of web standards such as JSON or XML for data transfer, HTML, CSS and JavaScript for user interfacing. In addition to MVC, Rails emphasizes the use of other well-known software engineering patterns and paradigms, including convention over configuration (CoC), don’t repeat yourself (DRY), and the active record pattern.\n\nRuby on Rails’ emergence in the 2000s greatly influenced web app development, through innovative features such as seamless database table creations, migrations, and scaffolding of views to enable rapid application development. Ruby on Rails’ influence on other web frameworks remains apparent today, with many frameworks in other languages borrowing its ideas, including Django in Python, Catalyst in Perl, Laravel and CakePHP in PHP, Phoenix in Elixir, Play in Scala, and Sails.js in Node.js.\n\n“”” (Wikipedia)\n\nPHP (1994/1995)\n\n“PHP: Hypertext Preprocessor (or simply PHP) is a general-purpose programming language originally designed for web development. It was originally created by Rasmus Lerdorf in 1994; the PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP: Hypertext Preprocessor.“\n\nKey People\n\nRasmus Lerdorf\n\nAndi Gutmans\n\nZeev Suraski\n\n“””\n\nPHP is an “HTML-embedded scripting language” primarily used for dynamic Web applications. The first part of this definition means that PHP code can be interspersed with HTML, making it simple to generate dynamic pieces of Web pages on the fly. As a scripting language, PHP code requires the presence of the PHP processor. PHP code is normally run in plain-text scripts that will only run on PHP-enabled computers (conversely programming languages can create standalone binary executable files, a.k.a. programs). PHP takes most of its syntax from C, Java, and Perl. It is an open source technology and runs on most operating systems and with most Web servers. PHP was written in the C programming language by Rasmus Lerdorf in 1994 for use in monitoring his online resume and related personal information. For this reason, PHP originally stood for “Personal Home Page”. Lerdorf combined PHP with his own Form Interpreter, releasing the combination publicly as PHP/FI (generally referred to as PHP 2.0) on June 8, 1995. Two programmers, Zeev Suraski and Andi Gutmans, rebuilt PHP’s core, releasing the updated result as PHP/FI 2 in 1997. The acronym was formally changed to PHP: HyperText Preprocessor, at this time. (This is an example of a recursive acronym: where the acronym itself is in its own definition.) In 1998, PHP 3 was released, which was the first widely used version. PHP 4 was released in May 2000, with a new core, known as the Zend Engine 1.0. PHP 4 featured improved speed and reliability over PHP 3. In terms of features, PHP 4 added references, the Boolean type, COM support on Windows, output buffering, many new array functions, expanded object-oriented programming, inclusion of the PCRE library, and more.\n\nPHP 5 was released in July 2004, with the updated Zend Engine.\n\n“”” (http://www.nusphere.com/php/php_history.htm).\n\nPHP 5 was released … after long development and several pre-releases. It is mainly driven by its core, the Zend Engine 2.0 with a new object model and dozens of other new features.\n\n“PHP’s development team includes dozens of developers, as well as dozens of others working on PHP-related and supporting projects, such as PEAR, PECL, and documentation, and an underlying network infrastructure of well over one-hundred individual web servers on six of the seven continents of the world. Though only an estimate based upon statistics from previous years, it is safe to presume PHP is now installed on tens or even perhaps hundreds of millions of domains around the world” (https://www.php.net/manual/en/history.php.php).\n\nPHP 6\n\nA short-lived version of PHP to do with technical changes the language needed.\n\nPHP 7\n\nDuring 2014 and 2015, a new major PHP version was developed, which was numbered PHP 7. The numbering of this version involved some debate among internal developers. While the PHP 6 Unicode experiment had never been released, several articles and book titles referenced the PHP 6 name, which might have caused confusion if a new release were to reuse the name. After a vote, the name PHP 7 was chosen.\n\nThe foundation of PHP 7 is a PHP branch that was originally dubbed PHP next generation (phpng). It was authored by Dmitry Stogov, Xinchen Hui and Nikita Popov, and aimed to optimize PHP performance by refactoring the Zend Engine while retaining near-complete language compatibility. By 14 July 2014, WordPress-based benchmarks, which served as the main benchmark suite for the phpng project, showed an almost 100% increase in performance. Changes from phpng are also expected to make it easier to improve performance in the future, as more compact data structures and other changes are seen as better suited for a successful migration to a just-in-time (JIT) compiler. Because of the significant changes, the reworked Zend Engine is called Zend Engine 3, succeeding Zend Engine 2 used in PHP 5.\n\nPHP 8\n\nPHP 8 was released on November 26, 2020. PHP 8 is a major version and has breaking changes from previous versions. New features and notable changes include:\n\nJust-in-time compilation\n\nAddition of the match expression\n\nType changes and additions\n\nSyntax changes and additions\n\nStandard library changes and additions (for example WeakMap)\n\nLaravel\n\n“””\n\nLaravel is a free, open-source PHP web framework (a software framework that is designed to support the development of web applications including web services, web resources, and web APIs.), created by Taylor Otwell and intended for the development of web applications following the model–view–controller (MVC) architectural pattern and based on Symfony. Some of the features of Laravel are a modular packaging system with a dedicated dependency manager, different ways for accessing relational databases, utilities that aid in application deployment and maintenance, and its orientation toward syntactic sugar.\n\nThe source code of Laravel is hosted on GitHub and licensed under the terms of MIT License.\n\n“”” (Wikipedia).\n\nJAVA (1991 / 1995)\n\nKey People\n\nTravelling back in time to the early 90s, at a time when the Hubble Telescope was Launched, the first President Bush was in office, and the Cold War was appearing to come to an end as the USSR broke up. We come to a time in June 1991, playing on the radio was Amy Grant with Baby Baby (#popclassic), and a bunch of guys working at Sun Microsystems, James Gosling, Mike Sheridan, and Patrick Naughton started to work on a new team, which was known as “the Green Team“, a type of R&D focused unit looking at emerging technologies, which eventually decided to work on developing a new type of device which was called the “*7 or Star 7”.\n\nIn the summer of ’92 they presented us with the new handheld home-entertainment controller device they had come up with, which featured a touchscreen User Interface. Along with the device had come a programming language; the language was created by Green Team member James Gosling specifically for *7, and it was called “Oak” since he had an oak tree outside his office window when he worked on the 4th floor of a building located at 2180 Sand Hill Road, Menolo Park, CA, close to Stanford University where SUN began (hence the name).\n\nEventually, the language would become known as Java after a bunch of other random names like Zygote and Silk had been discounted. There are various stories about exactly who came up with the name, although it seems like it was somehow connected to Java coffee at some point, hence the current logo. Again the idea of using the language on the device was based around having it communicate with other devices.\n\nJava developed into a general-purpose, object-oriented language, it’s known for being fast and efficient, and … It’s a write-once-run-anywhere model or platform independence. It also supports multi-threading or so-called concurrent programming. The syntax of Java is quite similar to C, C++, and C#, but very different from Objective-C or Swift. Java was designed to be stable and simple, and easy to use, and as such, it attempts to manage memory for the programming through garbage-collection (just as Objective-C and Swift now use ARC).\n\nJava has a library of stuff, it’s API, that has a lot of pre-written functionality, and thus like many other programming languages, it allows one to “stand on the shoulders of giants” as it were, or basically not to have to bother re-writing a whole bunch of stuff that good quality solutions already exist for (for comparison this is quite similar to the Cocoa framework in Objective-C or Swift).\n\nInitially released by Sun Microsystems in 1995, Java is a general-purpose programming language that was designed with the specific goal of allowing developers to “write once, run anywhere.” Java applications are compiled into bytecode that can run on implementations of the Java Virtual Machine (JVM). Like CLI, JVM helps bridge the gap between source code and the 1s and 0s that the computer understands.\n\nThe goal is Java as it is now about platform independence through the JVM and the sort of intermediate stage of byte-code which the java compiler compiles into instead of fully machine code. This confers several advantages, one of which is that because different processors (Intel, AMD etc) have different chipsets and thus different control sets, this approach allows the Java program to take advantage of these architectures by allowing the JVM to adapt the bytecode to the given system it’s running on…\n\nWebrunner => HotJava\n\nDynamic ==>> HTML + Programs = Applets (platform independent)\n\nBeing free meant Java eventually become popular for a whole range of applications like mobile apps, large web apps, and desktop application.\n\nNetscape Navigator shipped with Java Applet support\n\n“A Java applet was a small application that is written in the Java programming language, or another programming language that compiles to Java bytecode, and delivered to users in the form of Java bytecode. The user launched the Java applet from a web page, and the applet was then executed within a Java virtual machine (JVM) in a process separate from the web browser itself. A Java applet could appear in a frame of the web page, a new application window, Sun’s AppletViewer, or a stand-alone tool for testing applets” (Source: https://en.wikipedia.org/wiki/Java_applet).\n\nThere are a whole load of Open Source libraries written in Java used by large companies\n\nExample Java Code\n\nExample with Dependency Injection\n\nAs with other languages, we can follow good principles and use dependency injection over static utilities or singletons:\n\n(Ref: #A)\n\nReferences\n\nA: Bloch, J. (2018). Effective Java – Third Edition. Pearson Education Inc, New York City.\n\nback to index\n\nJavaScript / JS (~1995)\n\nJavaScript “is a high-level, interpreted programming language. It is a language which is also characterized as dynamic, weakly typed, prototype-based and multi-paradigm”. JS is a scripting language and is totally separate language to Java which is not a scripting language (although the two have shared some syntactical elements).\n\nJavaScript can be used as client-side as well as server-side scripting language, it is inserted into HTML pages and is understood can thus by web browsers.\n\nAlongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web. It is used to make dynamic webpages interactive and provide online programs, including video games. The majority of websites employ it, and all modern web browsers support it without the need for plug-ins by means of a built-in JavaScript engine. Each of the many JavaScript engines represents a different implementation of JavaScript, all based on the ECMAScript scripting language specification standard, with some engines not supporting the spec fully, and with many engines supporting additional features beyond ECMA (Wikipedia).\n\nKey People\n\nBrendan Eich && Marc Andreessen\n\n“Although it was developed under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript when it was deployed in the Netscape Navigator 2.0 beta 3 in December. The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new Web programming language” (Wikipedia)\n\nCode Example\n\nForm\n\nSOURCE: https://www.guru99.com/practical-code-examples-using-javascript.html\n\nback to index\n\nVersions of the ECMAScript standard\n\n“While both JavaScript and JScript aim to be compatible with ECMAScript, they also provide additional features not described in the ECMA specifications”\n\nECMAScript 1 (1997) – The first version\n\nECMAScript 2 (1998) – no major revisions\n\nECMAScript 3 (1999) – added support for regex (regular expressions), and try/catch\n\nECMAScript 4 – no version of this was ever released widely\n\nECMAScript 5 (2009) – Numerous changes:\n\nECMAScript 6 (ES6) / ECMAScript 2015\n\nECMAScript 2016 (ES2016) / ES7\n\nECMAScript 2017 (ES2017)\n\nECMAScript 2018 (ES2018)\n\nThe HTML DOM (Document Object Model)\n\nWhen a web page is loaded, the browser creates a Document Object Model of the page.\n\nThe HTML DOM model is constructed as a tree of Objects:\n\nWith the object model, JavaScript gets all the power it needs to create dynamic HTML:\n\nJavaScript can change all the HTML elements in the page\n\nJavaScript can change all the HTML attributes in the page\n\nJavaScript can change all the CSS styles in the page\n\nJavaScript can remove existing HTML elements and attributes\n\nJavaScript can add new HTML elements and attributes\n\nJavaScript can react to all existing HTML events in the page\n\nJavaScript can create new HTML events in the page\n\nThe HTML DOM is a standard for how to get, change, add, or delete HTML elements.\n\nhttps://www.w3schools.com/js/js_htmldom.asp\n\nJavascript Based Frameworks\n\nVUE JS\n\nVue.js (commonly referred to as Vue; pronounced like “view”) is an open-source model–view–viewmodel front end JavaScript framework for building user interfaces and single-page applications. It was created by Evan You and is maintained by him and the rest of the active core team members.\n\nSource: Wikipedia\n\nExamples\n\nhttps://vuejsexamples.com/\n\nExample: https://codesandbox.io/s/boring-leaf-v7b2s\n\nAngular\n\n“Angular is a development platform, built on TypeScript. As a platform, Angular includes:\n\nA component-based framework for building scalable web applications\n\nA collection of well-integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication, and more\n\nA suite of developer tools to help you develop, build, test, and update your code”.\n\nSOURCE: https://angular.io/start\n\nAngular Examples\n\nhttps://stackblitz.com/angular/nkqqqykmrxe?file=src%2Fapp%2Fapp.component.html\n\nReact & React Native (js related)\n\nDeveloped at Facebook as a better way of making the Facebook websites work well, this evolved into a more widely used system and a way of making native apps on both Android and iOS from a common base very much making use of a kind of Javascript with scripting tags.\n\nback to index\n\nTypescript (js related)\n\nTypescript is a modern Javascript development language, statically compiled, to facilitate safer cleaner code. It can be run on Node js or any browser which supports ECMAScript 3 or newer versions.\n\n“Typescript provides optional static typing, classes, and interface. For a large JavaScript project adopting Typescript can bring you more robust software and easily deployable with a regular JavaScript application”(https://www.guru99.com/typescript-vs-javascript.html).\n\nExample Code\n\nWhat we have created in the below example is done by taking a normal bit of javascript but add type annotations. This means we’ll get a compiler error if we try and call our greeter function by passing in a parameter that is not of type string. It’s this type safety that Typescript tries to bring to JavaScript.\n\nReferences\n\nhttps://www.w3schools.com/js\n\nhttps://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\n\nback to index\n\nOCaml (~1996)\n\nOCaml is a member of the ML language family – This means is derives from a language called classic ML which is a functional programming language which was developed by Robin Milner and others at the Edinburgh Laboratory for Computer Science in Scotland. The purpose of ML was to create a language that was a better “theorem prover” than Lisp.\n\n“In the early ’80s, there was a schism in the ML community with the French on one side and the British and US on another. The French went on to develop CAML and later Objective CAML (OCaml) while the Brits and Americans developed Standard ML. The two dialects are quite similar. Microsoft introduced its own variant of OCaml called F# in 2005″(Ref#: B).\n\n“OCaml (/oʊˈkæməl/ oh-KAM-əl) (formerly Objective Caml) is the main implementation of the Caml programming language, created in 1996 by Xavier Leroy, Jérôme Vouillon, Damien Doligez, Didier Rémy, Ascánder Suárez, and others. It extends Caml with object-oriented features, and is a member of the ML family” (Wikipedia)\n\nCode Examples\n\nHigher-Order Functions\n\nRecursive Functions\n\nIn order to use a recursive function in OCaml, you need to use the keywords let rec as functions are not recursive unless you explicitly define them as such.\n\nAbstraction\n\n“Abstraction, also known as information hiding, is fundamental to computer science. When faced with creating and maintaining a complex system, the\n\ninteractions of different components can be simplified by hiding the details of each component’s implementation from the rest of the system.\n\nDetails of a component’s implementation are hidden by protecting it with an interface. An interface describes the information which is exposed to other components in the system. Abstraction is maintained by ensuring that the rest of the system is invariant to changes of implementation that do not affect the interface.”\n\n“The most powerful form of abstraction in OCaml is achieved using the module system. The module system is basically its own language within OCaml, consisting of modules and module types. All OCaml definitions (e.g. values, types, exceptions, classes) live within modules, so the module system’s support for abstraction includes support for abstraction of any OCaml definition”(Ref#: C).\n\n“The module IntSet uses lists of integers to represent sets of integers. This is indicated by the inclusion of a type t defined as an alias to int list. The implementation provides the basic operations of sets as a collection of functions that operate on these int lists.\n\nThe components of a structure are accessed using the . operator. For example, the following creates a set containing 1, 2 and 3”.\n\nReferences\n\nA: https://ocaml.org/learn/taste.html\n\nB: https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/intro/ocaml.html\n\nC: https://www.cl.cam.ac.uk/teaching/1718/L28/abstraction-notes.pdf\n\nback to index\n\nScala (2001 /2004)\n\nHistory\n\n“The design of Scala started in 2001 at the École Polytechnique Fédérale de Lausanne (EPFL) (in Lausanne, Switzerland).” and “It followed on from work on Funnel, a programming language combining ideas from functional programming and Petri nets. Odersky formerly worked on Generic Java, and javac, Sun’s Java compiler”.\n\nAfter an internal release in late 2003, Scala was released publicly in early 2004 on the Java platform, [and a] s econd version (v2.0) followed in March 2006 (Source: Wikipedia).\n\nKey People\n\nMartin Odersky\n\nIt was Odersky who developed Scala out of an original set of work he did on the programming language Funnel. “Funnel led to Scala, whose design began in 2001, and which was first released in 2003. Scala is not an extension of Java, but "
    }
}