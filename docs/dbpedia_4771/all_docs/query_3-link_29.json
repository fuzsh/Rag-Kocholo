{
    "id": "dbpedia_4771_3",
    "rank": 29,
    "data": {
        "url": "https://jessicabanna94.wordpress.com/2013/03/11/chapter-2-concepts-of-programming-languagesrobert-w-sebesta-mr-tri-djoko-wahjono-ir-m-sc/",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 2-Concepts of Programming Languages(Robert W. Sebesta)-Mr. Tri Djoko Wahjono, Ir, M.Sc.",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://live.staticflickr.com/65535/53952183888_f302468bfb_s.jpg",
            "https://live.staticflickr.com/65535/53952091493_383c78f868_s.jpg",
            "https://live.staticflickr.com/65535/53950730567_199dd73a01_s.jpg",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-03-11T00:00:00",
        "summary": "",
        "meta_description": "REVIEW QUESTION 1. In what year was Plankalkül designed? In what year was that design published? The Plankalkül was designed in 1945 and it was published in 1972. 2. Mention an interesting feature of Zuse’s programs. An interesting feature of Zuse’s programs was the inclusion of mathematical expressions showing the current relationships between program variables.…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "jessicabanna94",
        "canonical_link": "https://jessicabanna94.wordpress.com/2013/03/11/chapter-2-concepts-of-programming-languagesrobert-w-sebesta-mr-tri-djoko-wahjono-ir-m-sc/",
        "text": "REVIEW QUESTION\n\n1. In what year was Plankalkül designed? In what year was that design published?\n\nThe Plankalkül was designed in 1945 and it was published in 1972.\n\n2. Mention an interesting feature of Zuse’s programs.\n\nAn interesting feature of Zuse’s programs was the inclusion of mathematical expressions showing the current relationships between program variables. These expressions stated what would be true during execution at the points in the code where they appeared.\n\n3. What does Plankalkül mean?\n\nPlankalkül means program calculus. It was designed for engineering purposes by Konrad Zuse between 1943 and 1945.\n\n7. Who developed the speedcoding system for IBM 701?\n\nJohn Backus developed the speedcoding system for IBM 701.\n\n9. Under what environmental consideration was FORTRAN developed? Which is the first version of FORTRAN?\n\nFORTRAN was developed under these environmental considerations,\n\n(1) Computers had small memories and were slow and relatively unreliable;\n\n(2) The primary use of computers was for scientific computations;\n\n(3) There were no existing efficient and effective ways to program computers;\n\n(4) Because of the high cost of computers compared to the cost of programmers, speed of the generated object code was the primary goal of the first Fortran compilers.\n\nThe first version of FORTRAN is FORTRAN 0, invented by John Backus and his group at IBM on November 1954.\n\n11. What control flow statements were added to FORTRAN IV to get FORTRAN 77?\n\nThe logical loop statements and the if-else statements were the control flow added to FORTRAN IV\n\n12. Which version of FORTRAN was the first to have any sort of dynamic variables?\n\nFORTRAN 90 was the first to have sort of dynamic variables.\n\n13. Which version of FORTRAN was the first to have character string handling?\n\nFortran 77 was the first to have character string handling and retained most of the features of Fortran IV it also have logical loop control statements, and an If with an optional Else clause.\n\n18. What two professional organizations together design ALGOL 60?\n\nTwo professional organizations that design ALGOL 60 are ACM and GAMM\n\n19. What was the goal for developing C?\n\nThe goal for developing C:\n\n(1) The syntax of the language should be as close as possible to standard mathematical notation, and programs written in it should be readable with little further explanation.\n\n(2) It should be possible to use the language for the description of algorithms in printed publications.\n\n(3) Programs in the new language must be mechanically translatable into machine language.\n\n20. What were the significant modifications to ALGOL 58 to produce ALGL 60?\n\nThe significant modifications were:\n\n(1) The concept of block structure was introduced. This allowed the programmer to localize parts of programs by introducing new data environments, or scopes.\n\n(2) Two different means of passing parameters to subprograms were allowed: pass by value and pass by name.\n\n(3) Procedures were allowed to be recursive. The ALGOL 58 description was unclear on this issue. Note that although this recursion was new for the imperative languages, LISP had already provided recursive functions in 1959.\n\n(4) Stack-dynamic arrays were allowed. A stack-dynamic array is one for which the subscript range or ranges are specified by variables; so that the size of the array is set at the time storage is allocated to the array, which happens when the declaration is reached during execution.\n\n22. On what language was COBOL based?\n\nCOBOL was based on flow-matic language which before was belonged to UNIVAC and has been implemented in 1957 for business application.\n\n23. In what year did the COBOL design process begin?\n\nThe design process began in 1959, because the formal meeting for the subject of a common language for business applications, was held at the Pentagon on May 28 and 29, 1959\n\n26. Which data type does the original BASIC language support?\n\nThe floating point data type is the only data type that BASIC supports; besides, BASIC only had 14 different statements.\n\n27. Why was BASIC an important language in the early 1980s?\n\nBASIC was important in the early 1980s because in the late 1970s and early 1980s it was used in microcomputers. Also it was easy for beginners to learn, especially those who were not science oriented, and its smaller dialects can be implemented on computers with very small memories.\n\n30. What features of SIMULA 67 are now important parts of some object-oriented languages?\n\nThe data abstraction is the important parts of some object oriented languages, data abstraction comes from the class construct development and class construct was developed to provide support for coroutines.\n\n33. What language introduced the case statement?\n\nCase statement was introduced in ALGOL-W the Wirth and Hoare version of ALGOL 60.\n\nPROBLEM SET\n\n4. Write a short history of the Fortran 0, Fortran I, Fortran II, Fortran III, and Fortran IV systems.\n\n(1) Fortran 0, it has a compiler that included a little syntax error checking, maximum 2 character for a variable name.\n\n(2) Fortran I, it has input/output formatting, variable names up to 6 characters, user-defined subroutines, the if selection and do loop statement that can’t be separately compiled, no data-typing statements, variables whose names began with I, J, K, L, M, and N were implicitly integer type, and all others were implicitly floating-point.\n\n(3) Fortran II, it fixed many of the bugs in Fortran I compilation system, and added some more feature, the most important one is being the independent compilation of subroutines. That independency shortened the compilation process and made it practical to develop much larger programs.\n\n(4) Fortran III, it was developed but not widely used, so there’s not much information about Fortran III\n\n(5) Fortran IV, it is developed from Fortran II, the additional features were, explicit type declaration for variables, a logical if construct, and capability of passing sub programs as a parameter to the other sub programs.\n\n6. Make an educated guess as to the most common syntax error in C programs.\n\nMost common syntax errors in C are:\n\n(1) Missing for forget to put semicolon(;) in the end of a statement\n\n(2) Using wrong data type when declaring the variable\n\n(3) Miss the curly braces {} or forget to put the } to end the code.\n\n(4) Miss types the code or keyword (switch, break, etc.)\n\n7. LISP began as a pure functional language but gradually acquired more and more imperative features. Why?\n\nBecause John McCarthy’s original interest in developing LISP was to meet the demand for artificial intelligence as a functional programming language, but there soon emerged different dialects, cleaners, more modern, and more imperative, that began to deviate from the functional form into Scheme. COMMON LISP combined the different forms into a single form that was more imperative, including assignment and iteration.\n\n9. In your opinion, did Fortran allow names that began with I, J, K, L, M, N as implicitly integer type?\n\nYes because in the first Fortran (Fortran I) it is allowed, because Fortran will recognize the I, J, K, L ,M, N as an integer data type, while other names started with other character will be recognize as real number or floating number.\n\n13. What is the primary reason why C became more widely use than Fortran?\n\n(1) C compiler will find the errors in your source code, but Fortran will not do that. This feature makes the development time shorter and help the programmer to directly know where the mistake is.\n\n(2) C is closer to assembly language, so you can have finer control over what the computer is doing, and thereby make faster programs.\n\n(3) UNIX is written in C, so it is easier to interface with UNIX operating systems if you write in C.\n\n(4) C has adequate control statements and data-structuring facilities to allow its use in many application areas.\n\n(5) C has a rich set of operators that provide a high degree of expressiveness.\n\n14. What are the arguments both for and against the idea of a type less language?\n\nFor arguments are flexibility and ease of use. The programmer will have flexibility without having to define a data type, so he is free to develop code that is generated quickly and without much thought. To learn the language is much simpler because one doesn’t have to determine size or how the compiler will interpret the code, only what information must be included.\n\nAgainst arguments are that type checking is impossible and data insecurity. Because of the data checking is impossible, so that it is entirely the programmer’s responsibility to make sure those expressions and assignments are correct. Data insecurity means that the program might miss interpret what the programmer wants, such as the assignment of a character type ‘A’ that could in fact be “defined” as a HEX value by the programmer. The compiler would also have trouble interpreting floating point values compared to integers. The resulting arithmetic would also cause serious problems; like adding 5 + “happy” and how they are interpreted different than perhaps the programmer intended.\n\n24. Why, in your opinion, do new scripting languages appear more frequently than new compiled languages?\n\nCompiled languages are “machine specific”: you have to tell the compiler which processor it is to be used, which operating system and so-on.\n\nScripting languages are “system independent”: one script runs on all systems.\n\nSince processors are now so fast, it does not matter if the script is interpreted every time it runs…\n\n25. Give a brief general description of the Java servlet"
    }
}