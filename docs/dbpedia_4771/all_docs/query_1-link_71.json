{
    "id": "dbpedia_4771_1",
    "rank": 71,
    "data": {
        "url": "https://slideplayer.com/slide/6131140/",
        "read_more_link": "",
        "language": "en",
        "title": "Evolution of the Major Programming Languages",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://slideplayer.com/static/blue_design/img/logo_slideplayer.png",
            "https://slideplayer.com/static/blue_design/img/slide-loader4.gif",
            "https://slideplayer.com/slide/6131140/18/images/1/Evolution+of+the+Major+Programming+Languages.jpg",
            "https://slideplayer.com/slide/6131140/18/images/2/Genealogy+of+Common+Languages.jpg",
            "https://slideplayer.com/slide/6131140/18/images/3/Zuse%E2%80%99s+Plankalk%C3%BCl+Designed+in+1945%2C+but+not+published+until+1972.jpg",
            "https://slideplayer.com/slide/6131140/18/images/4/Plankalk%C3%BCl+Syntax+An+assignment+statement+to+assign+the+expression+A%5B4%5D+%2B+1+to+A%5B5%5D+%7C+A+%2B+1+%3D%3E+A..jpg",
            "https://slideplayer.com/slide/6131140/18/images/5/Minimal+Hardware+Programming%3A+Pseudocodes.jpg",
            "https://slideplayer.com/slide/6131140/18/images/6/Pseudocodes%3A+Short+Code.jpg",
            "https://slideplayer.com/slide/6131140/18/images/7/Pseudocodes%3A+Speedcoding.jpg",
            "https://slideplayer.com/slide/6131140/18/images/8/Pseudocodes%3A+Related+Systems.jpg",
            "https://slideplayer.com/slide/6131140/18/images/9/IBM+704+and+Fortran+Fortran+0%3A+not+implemented+Fortran+I%3A1957.jpg",
            "https://slideplayer.com/slide/6131140/18/images/10/Design+Process+of+Fortran.jpg",
            "https://slideplayer.com/slide/6131140/18/images/11/Fortran+I+Overview+First+implemented+version+of+Fortran.jpg",
            "https://slideplayer.com/slide/6131140/18/images/12/Fortran+I+Overview+%28continued%29.jpg",
            "https://slideplayer.com/slide/6131140/18/images/13/Fortran+II+Distributed+in+1958+Independent+compilation+Fixed+the+bugs.jpg",
            "https://slideplayer.com/slide/6131140/18/images/14/Fortran+IV+Evolved+during+Explicit+type+declarations.jpg",
            "https://slideplayer.com/slide/6131140/18/images/15/Fortran+77+Became+the+new+standard+in+1978+Character+string+handling.jpg",
            "https://slideplayer.com/slide/6131140/18/images/16/Fortran+90+Most+significant+changes+from+Fortran+77+Modules.jpg",
            "https://slideplayer.com/slide/6131140/18/images/17/Fortran+90+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/18/Latest+versions+of+Fortran.jpg",
            "https://slideplayer.com/slide/6131140/18/images/19/Fortran+Evaluation+Highly+optimizing+compilers+%28all+versions+before+90%29+Types+and+storage+of+all+variables+are+fixed+before+run+time..jpg",
            "https://slideplayer.com/slide/6131140/18/images/20/Functional+Programming%3A+LISP.jpg",
            "https://slideplayer.com/slide/6131140/18/images/21/LISP+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/22/Representation+of+Two+LISP+Lists.jpg",
            "https://slideplayer.com/slide/6131140/18/images/23/LISP+Evaluation+Pioneered+functional+programming.jpg",
            "https://slideplayer.com/slide/6131140/18/images/24/Haskell+Example+double+x+%3D+x%2Bx+quadruple+x+%3D+double%28double+x%29.jpg",
            "https://slideplayer.com/slide/6131140/18/images/25/Scheme+Developed+at+MIT+in+mid+1970s+Small.jpg",
            "https://slideplayer.com/slide/6131140/18/images/26/COMMON+LISP+An+effort+to+combine+features+of+several+dialects+of+LISP+into+a+single+language..jpg",
            "https://slideplayer.com/slide/6131140/18/images/27/The+First+Step+Toward+Sophistication%3A+ALGOL+60.jpg",
            "https://slideplayer.com/slide/6131140/18/images/28/Early+Design+Process+ACM+and+GAMM+met+for+four+days+for+design+%28May+27+to+June+1%2C+1958%29+Goals+of+the+language..jpg",
            "https://slideplayer.com/slide/6131140/18/images/29/ALGOL+58+Concept+of+type+was+formalized+Names+could+be+any+length.jpg",
            "https://slideplayer.com/slide/6131140/18/images/30/ALGOL+58+Implementation+Not+meant+to+be+implemented%2C+but+variations+of+it+were+%28MAD%2C+JOVIAL%29.jpg",
            "https://slideplayer.com/slide/6131140/18/images/31/ALGOL+60+Overview+Modified+ALGOL+58+at+6-day+meeting+in+Paris.jpg",
            "https://slideplayer.com/slide/6131140/18/images/32/ALGOL+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/33/ALGOL+60+Evaluation+Successes.jpg",
            "https://slideplayer.com/slide/6131140/18/images/34/ALGOL+60+Evaluation+%28continued%29.jpg",
            "https://slideplayer.com/slide/6131140/18/images/35/Computerizing+Business+Records%3A+COBOL.jpg",
            "https://slideplayer.com/slide/6131140/18/images/36/COBOL+Historical+Background.jpg",
            "https://slideplayer.com/slide/6131140/18/images/37/COBOL+Design+Process+First+Design+Meeting+%28Pentagon%29+-+May+1959.jpg",
            "https://slideplayer.com/slide/6131140/18/images/38/COBOL+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/39/COBOL+Evaluation+Contributions.jpg",
            "https://slideplayer.com/slide/6131140/18/images/40/COBOL%3A+DoD+Influence+First+language+required+by+DoD.jpg",
            "https://slideplayer.com/slide/6131140/18/images/41/The+Beginning+of+Timesharing%3A+BASIC.jpg",
            "https://slideplayer.com/slide/6131140/18/images/42/BASIC+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/43/2.8+Everything+for+Everybody%3A+PL%2FI.jpg",
            "https://slideplayer.com/slide/6131140/18/images/44/PL%2FI%3A+Background+By+1963+The+obvious+solution.jpg",
            "https://slideplayer.com/slide/6131140/18/images/45/PL%2FI%3A+Design+Process+Designed+in+five+months+by+the+3+X+3+Committee.jpg",
            "https://slideplayer.com/slide/6131140/18/images/46/PL%2FI+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/47/PL%2FI%3A+Evaluation+PL%2FI+contributions+Concerns.jpg",
            "https://slideplayer.com/slide/6131140/18/images/48/Two+Early+Dynamic+Languages%3A+APL+and+SNOBOL.jpg",
            "https://slideplayer.com/slide/6131140/18/images/49/APL+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/50/APL%3A+A+Programming+Language.jpg",
            "https://slideplayer.com/slide/6131140/18/images/51/SNOBOL+Designed+as+a+string+manipulation+language+at+Bell+Labs+by+Farber%2C+Griswold%2C+and+Polensky+in.jpg",
            "https://slideplayer.com/slide/6131140/18/images/52/SNOBOL+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/53/The+Beginning+of+Data+Abstraction%3A+SIMULA+67.jpg",
            "https://slideplayer.com/slide/6131140/18/images/54/SIMULA+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/55/Orthogonal+Design%3A+ALGOL+68.jpg",
            "https://slideplayer.com/slide/6131140/18/images/56/ALGOL+68+Orthogonality+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/57/ALGOL+68+Evaluation+Contributions+Comments.jpg",
            "https://slideplayer.com/slide/6131140/18/images/58/Pascal+Developed+by+Wirth+%28a+former+member+of+the+ALGOL+68+committee%29+Designed+for+teaching+structured+programming..jpg",
            "https://slideplayer.com/slide/6131140/18/images/59/Pascal+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/60/C+Designed+for+systems+programming+%28at+Bell+Labs+by+Dennis+Richie%29+Evolved+primarily+from+BCLP+and+B%2C+but+also+ALGOL+68..jpg",
            "https://slideplayer.com/slide/6131140/18/images/61/C+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/62/Programming+Based+on+Logic%3A+Prolog.jpg",
            "https://slideplayer.com/slide/6131140/18/images/63/Prolog+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/64/History%E2%80%99s+Largest+Design+Effort%3A+Ada.jpg",
            "https://slideplayer.com/slide/6131140/18/images/65/Ada+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/66/Ada+Evaluation+Contributions+Comments.jpg",
            "https://slideplayer.com/slide/6131140/18/images/67/Ada+95+Ada+95+%28began+in+1988%29+Support+for+OOP+through+type+derivation.+Better+control+mechanisms+for+shared+data..jpg",
            "https://slideplayer.com/slide/6131140/18/images/68/Object-Oriented+Programming%3A+Smalltalk.jpg",
            "https://slideplayer.com/slide/6131140/18/images/69/Smalltalk+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/70/Combining+Imperative+and+Object-Oriented+Programming%3A+C%2B%2B.jpg",
            "https://slideplayer.com/slide/6131140/18/images/71/C%2B%2B+Examples.jpg",
            "https://slideplayer.com/slide/6131140/18/images/72/Related+OOP+Languages+Objective-C+%28designed+by+Brad+Cox+%E2%80%93+early+1980s%29.jpg",
            "https://slideplayer.com/slide/6131140/18/images/73/An+Imperative-Based+Object-Oriented+Language%3A+Java.jpg",
            "https://slideplayer.com/slide/6131140/18/images/74/Java+Evaluation+Eliminated+many+unsafe+features+of+C%2B%2B.jpg",
            "https://slideplayer.com/slide/6131140/18/images/75/Scripting+Languages+for+the+Web.jpg",
            "https://slideplayer.com/slide/6131140/18/images/76/Scripting+Languages+for+the+Web.jpg",
            "https://slideplayer.com/slide/6131140/18/images/77/Scripting+Languages+for+the+Web.jpg",
            "https://slideplayer.com/slide/6131140/18/images/78/Perl+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/79/Javascript+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/80/PHP+Example.jpg",
            "https://images.slideplayer.com/18/6131140/slides/slide_81.jpg",
            "https://slideplayer.com/slide/6131140/18/images/82/Python+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/83/Ruby+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/84/The+Flagship+.NET+Language%3A+C%23.jpg",
            "https://slideplayer.com/slide/6131140/18/images/85/C%23+Example.jpg",
            "https://slideplayer.com/slide/6131140/18/images/86/Summary+Development%2C+development+environment%2C+and+evaluation+of+a+number+of+important+programming+languages..jpg",
            "https://slideplayer.com/13/3996627/big_thumb.jpg",
            "https://slideplayer.com/16/5040512/big_thumb.jpg",
            "https://slideplayer.com/16/5071702/big_thumb.jpg",
            "https://slideplayer.com/16/5075838/big_thumb.jpg",
            "https://slideplayer.com/16/5085198/big_thumb.jpg",
            "https://slideplayer.com/16/5164389/big_thumb.jpg",
            "https://slideplayer.com/16/5170162/big_thumb.jpg",
            "https://slideplayer.com/16/5183179/big_thumb.jpg",
            "https://slideplayer.com/16/5195938/big_thumb.jpg",
            "https://slideplayer.com/16/5227365/big_thumb.jpg",
            "https://slideplayer.com/17/5334993/big_thumb.jpg",
            "https://slideplayer.com/20/6232373/big_thumb.jpg",
            "https://slideplayer.com/23/6591791/big_thumb.jpg",
            "https://slideplayer.com/23/6812603/big_thumb.jpg",
            "https://slideplayer.com/24/6944910/big_thumb.jpg",
            "https://slideplayer.com/24/6944915/big_thumb.jpg",
            "https://slideplayer.com/24/6944971/big_thumb.jpg",
            "https://slideplayer.com/24/7103572/big_thumb.jpg",
            "https://slideplayer.com/24/7362871/big_thumb.jpg",
            "https://slideplayer.com/24/7551760/big_thumb.jpg"
        ],
        "movies": [
            "http://slideplayer.com/slide/6131140/64/video/Evolution+of+the+Major+Programming+Languages.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            "Evolution of the Major Programming Languages"
        ],
        "tags": null,
        "authors": [
            "Myra Ross"
        ],
        "publish_date": "2017-08-28T07:34:43+00:00",
        "summary": "",
        "meta_description": "Genealogy of Common Languages",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://slideplayer.com/slide/6131140/",
        "text": "Presentation on theme: \"Evolution of the Major Programming Languages\"— Presentation transcript:\n\n1 Evolution of the Major Programming Languages\n\nChapter 2 Evolution of the Major Programming Languages\n\n2 Genealogy of Common Languages\n\n3 Zuse’s Plankalkül Designed in 1945, but not published until 1972\n\nNever implemented Advanced data structures floating point, arrays, records Invariants\n\n4 Plankalkül Syntax An assignment statement to assign the expression A[4] + 1 to A[5] | A + 1 => A V | (subscripts) S | 1.n n (data types)\n\n5 Minimal Hardware Programming: Pseudocodes\n\nWhat was wrong with using machine code? Poor readability Poor modifiability Expression coding was tedious Machine deficiencies--no indexing or floating point\n\n6 Pseudocodes: Short Code\n\nShort Code developed by Mauchly in 1949 for BINAC computers Expressions were coded, left to right Example of operations: 01 – 06 abs value 1n (n+2)nd power 02 ) n (n+2)nd root 03 = 08 pause n if <= n 04 / 09 ( print and tab\n\n7 Pseudocodes: Speedcoding\n\nSpeedcoding developed by Backus in 1954 for IBM 701 Pseudo ops for arithmetic and math functions Conditional and unconditional branching Auto-increment registers for array access Slow! Only 700 words left for user program\n\n8 Pseudocodes: Related Systems\n\nThe UNIVAC Compiling System Developed by a team led by Grace Hopper Pseudocode expanded into machine code David J. Wheeler (Cambridge University) developed a method of using blocks of re-locatable addresses to solve the problem of absolute addressing\n\n9 IBM 704 and Fortran Fortran 0: 1954 - not implemented Fortran I:1957\n\nDesigned for the new IBM 704, which had index registers and floating point hardware - This led to the idea of compiled programming languages, because there was no place to hide the cost of interpretation (no floating-point software) Environment of development Computers were small and unreliable Applications were scientific No programming methodology or tools Machine efficiency was the most important concern\n\n10 Design Process of Fortran\n\nImpact of environment on design of Fortran I No need for dynamic storage Need good array handling and counting loops No string handling, decimal arithmetic, or powerful input/output (for business software)\n\n11 Fortran I Overview First implemented version of Fortran\n\nNames could have up to six characters Post-test counting loop (DO) Formatted I/O User-defined subprograms Three-way selection statement (arithmetic IF) No data typing statements\n\n12 Fortran I Overview (continued)\n\nFirst implemented version of FORTRAN No separate compilation Compiler released in April 1957, after 18 worker-years of effort Programs larger than 400 lines rarely compiled correctly, mainly due to poor reliability of 704 Code was very fast Quickly became widely used\n\n13 Fortran II Distributed in 1958 Independent compilation Fixed the bugs\n\n14 Fortran IV Evolved during 1960-62 Explicit type declarations\n\nLogical selection statement Subprogram names could be parameters ANSI standard in 1966\n\n15 Fortran 77 Became the new standard in 1978 Character string handling\n\nLogical loop control statement IF-THEN-ELSE statement\n\n16 Fortran 90 Most significant changes from Fortran 77 Modules\n\nDynamic arrays Pointers Recursion CASE statement Parameter type checking\n\n17 Fortran 90 Example\n\n18 Latest versions of Fortran\n\nFortran 95 – relatively minor additions, plus some deletions Fortran 2003 – support for OOP, procedure pointers, interoperability with C Fortran 2008 – blocks for local scopes, co-arrays, Do Concurrent\n\n19 Fortran Evaluation Highly optimizing compilers (all versions before 90) Types and storage of all variables are fixed before run time Dramatically changed forever the way computers are used\n\n20 Functional Programming: LISP\n\nLISt Processing language Designed at MIT by McCarthy AI research needed a language to Process data in lists (rather than arrays) Symbolic computation (rather than numeric) Only two data types: atoms and lists Syntax is based on lambda calculus\n\n21 LISP Example\n\n22 Representation of Two LISP Lists\n\nRepresenting the lists (A B C D) and (A (B C) D (E (F G)))\n\n23 LISP Evaluation Pioneered functional programming\n\nNo need for variables or assignment Control via recursion and conditional expressions Still the dominant language for AI COMMON LISP and Scheme are contemporary dialects of LISP ML, Haskell, and F# are also functional programming languages, but use very different syntax\n\n24 Haskell Example double x = x+x quadruple x = double(double x)\n\nfactorial n=product[1..n] average ns=div(sum ns)(length ns) qsort[]=[] qsort(x:xs)=qsort smaller++[x]++qsort larger where smaller=[a|a <- xs, a<=x] larger=[b|b <- xs, b>x] splitAt :: Int->[a]->([a],[a]) splitAt n xs=(take n xs, drop n xs)\n\n25 Scheme Developed at MIT in mid 1970s Small\n\nExtensive use of static scoping Functions as first-class entities Simple syntax (and small size) make it ideal for educational applications\n\n26 COMMON LISP An effort to combine features of several dialects of LISP into a single language Large, complex, used in industry for some large applications\n\n27 The First Step Toward Sophistication: ALGOL 60\n\nCopyright © 2012 Addison-Wesley. All rights reserved. The First Step Toward Sophistication: ALGOL 60 Environment of development FORTRAN had (barely) arrived for IBM 70x Many other languages were being developed, all for specific machines No portable language; all were machine dependent No universal language for communicating algorithms ALGOL 60 was the result of efforts to design a universal language\n\n28 Early Design Process ACM and GAMM met for four days for design (May 27 to June 1, 1958) Goals of the language Close to mathematical notation Good for describing algorithms Must be translatable to machine code\n\n29 ALGOL 58 Concept of type was formalized Names could be any length\n\nArrays could have any number of subscripts Parameters were separated by mode (in & out) Subscripts were placed in brackets Compound statements (begin ... end) Semicolon as a statement separator Assignment operator was := if had an else-if clause No I/O - “would make it machine dependent”\n\n30 ALGOL 58 Implementation Not meant to be implemented, but variations of it were (MAD, JOVIAL) Although IBM was initially enthusiastic, all support was dropped by mid 1959\n\n31 ALGOL 60 Overview Modified ALGOL 58 at 6-day meeting in Paris\n\nNew features Block structure (local scope) Two parameter passing methods Subprogram recursion Stack-dynamic arrays Still no I/O and no string handling\n\n32 ALGOL Example\n\n33 ALGOL 60 Evaluation Successes\n\nIt was the standard way to publish algorithms for over 20 years All subsequent imperative languages are based on it First machine-independent language First language whose syntax was formally defined (BNF)\n\n34 ALGOL 60 Evaluation (continued)\n\nFailure Never widely used, especially in U.S. Reasons Lack of I/O and the character set made programs non-portable Too flexible--hard to implement Entrenchment of Fortran Formal syntax description Lack of support from IBM\n\n35 Computerizing Business Records: COBOL\n\nEnvironment of development UNIVAC was beginning to use FLOW-MATIC USAF was beginning to use AIMACO IBM was developing COMTRAN\n\n36 COBOL Historical Background\n\nBased on FLOW-MATIC FLOW-MATIC features Names up to 12 characters, with embedded hyphens English names for arithmetic operators (no arithmetic expressions) Data and code were completely separate The first word in every statement was a verb\n\n37 COBOL Design Process First Design Meeting (Pentagon) - May 1959\n\nDesign goals Must look like simple English Must be easy to use, even if that means it will be less powerful Must broaden the base of computer users Must not be biased by current compiler problems Design committee members were all from computer manufacturers and DoD branches Design Problems: arithmetic expressions? subscripts? Fights among manufacturers\n\n38 COBOL Example\n\n39 COBOL Evaluation Contributions\n\nFirst macro facility in a high-level language Hierarchical data structures (records) Nested selection statements Long names (up to 30 characters), with hyphens Separate data division\n\n40 COBOL: DoD Influence First language required by DoD\n\nwould have failed without DoD Still the most widely used business applications language\n\n41 The Beginning of Timesharing: BASIC\n\nDesigned by Kemeny & Kurtz at Dartmouth Design Goals: Easy to learn and use for non-science students Must be “pleasant and friendly” Fast turnaround for homework Free and private access User time is more important than computer time Current popular dialect: Visual BASIC First widely used language with time sharing\n\n42 BASIC Example\n\n43 2.8 Everything for Everybody: PL/I\n\nDesigned by IBM and SHARE Computing situation in 1964 (IBM's point of view) Scientific computing IBM 1620 and 7090 computers FORTRAN SHARE user group Business computing IBM 1401, 7080 computers COBOL GUIDE user group\n\n44 PL/I: Background By 1963 The obvious solution\n\nScientific users began to need more elaborate I/O, like COBOL had; business users began to need floating point and arrays for MIS It looked like many shops would begin to need two kinds of computers, languages, and support staff--too costly The obvious solution Build a new computer to do both kinds of applications Design a new language to do both kinds of applications\n\n45 PL/I: Design Process Designed in five months by the 3 X 3 Committee\n\nThree members from IBM, three members from SHARE Initial concept An extension of Fortran IV Initially called NPL (New Programming Language) Name changed to PL/I in 1965\n\n46 PL/I Example\n\n47 PL/I: Evaluation PL/I contributions Concerns\n\nFirst unit-level concurrency First exception handling Switch-selectable recursion First pointer data type First array cross sections Concerns Many new features were poorly designed Too large and too complex\n\n48 Two Early Dynamic Languages: APL and SNOBOL\n\nCharacterized by dynamic typing and dynamic storage allocation Variables are untyped A variable acquires a type when it is assigned a value Storage is allocated to a variable when it is assigned a value\n\n49 APL Example\n\n50 APL: A Programming Language\n\nDesigned as a hardware description language at IBM by Ken Iverson around 1960 Highly expressive (many operators, for both scalars and arrays of various dimensions) Programs are very difficult to read (throw away programming) Still in use; minimal changes\n\n51 SNOBOL Designed as a string manipulation language at Bell Labs by Farber, Griswold, and Polensky in 1964 Powerful operators for string pattern matching Slower than alternative languages (and thus no longer used for writing editors) Still used for certain text processing tasks\n\n52 SNOBOL Examples\n\n53 The Beginning of Data Abstraction: SIMULA 67\n\nDesigned primarily for system simulation in Norway by Nygaard and Dahl Based on ALGOL 60 and SIMULA I Primary Contributions Coroutines - a kind of subprogram Classes, objects, and inheritance\n\n54 SIMULA Example\n\n55 Orthogonal Design: ALGOL 68\n\nFrom the continued development of ALGOL 60 but not a superset of that language Source of several new ideas (even though the language itself never achieved widespread use) Design is based on the concept of orthogonality A few basic concepts, plus a few combining mechanisms\n\n56 ALGOL 68 Orthogonality Examples\n\nint i; real r; [1:1] int rowi; ref int refi; union(int, real) ir; proc int p; r:= i/r -- i gets widened ir:= i; -- uniting ir:= r; -- uniting i:= p; -- deproceduring; i:= refi; -- dereferencing (twice) p; -- deproceduring; voiding rowi:= 5; -- rowing\n\n57 ALGOL 68 Evaluation Contributions Comments\n\nUser-defined data structures Reference types Dynamic arrays (called flex arrays) Comments Less usage than ALGOL 60 Had strong influence on subsequent languages, especially Pascal, C, and Ada\n\n58 Pascal Developed by Wirth (a former member of the ALGOL 68 committee) Designed for teaching structured programming Small, simple, nothing really new Largest impact was on teaching programming From mid-1970s until the late 1990s, it was the most widely used language for teaching programming\n\n59 Pascal Examples\n\n60 C Designed for systems programming (at Bell Labs by Dennis Richie) Evolved primarily from BCLP and B, but also ALGOL 68 Powerful set of operators, but poor type checking Initially spread through UNIX Though designed as a systems language, it has been used in many application areas\n\n61 C Examples\n\n62 Programming Based on Logic: Prolog\n\nDeveloped, by Comerauer and Roussel (University of Aix-Marseille), with help from Kowalski ( University of Edinburgh) Based on formal logic Non-procedural Can be summarized as being an intelligent database system that uses an inferencing process to infer the truth of given queries Comparatively inefficient Few application areas\n\n63 Prolog Example\n\n64 History’s Largest Design Effort: Ada\n\nHuge design effort, involving hundreds of people, much money, and about eight years Sequence of requirements ( ) (Strawman, Woodman, Tinman, Ironman, Steelman) Named Ada after Augusta Ada Byron, the first programmer\n\n65 Ada Example\n\n66 Ada Evaluation Contributions Comments\n\nPackages - support for data abstraction Exception handling - elaborate Generic program units Concurrency - through the tasking model Comments Competitive design Included all that was then known about software engineering and language design First compilers were very difficult; the first really usable compiler came nearly five years after the language design was completed\n\n67 Ada 95 Ada 95 (began in 1988) Support for OOP through type derivation Better control mechanisms for shared data New concurrency features More flexible libraries Ada 2005 Interfaces and synchronizing interfaces Popularity suffered because the DoD no longer requires its use but also because of popularity of C++\n\n68 Object-Oriented Programming: Smalltalk\n\nDeveloped at Xerox PARC, initially by Alan Kay, later by Adele Goldberg First full implementation of an object-oriented language (data abstraction, inheritance, and dynamic binding) Pioneered the graphical user interface design Promoted OOP\n\n69 Smalltalk Examples\n\n70 Combining Imperative and Object-Oriented Programming: C++\n\nDeveloped at Bell Labs by Stroustrup in 1980 Evolved from C and SIMULA 67 Facilities for object-oriented programming, taken partially from SIMULA 67 A large and complex language, in part because it supports both procedural and OO programming Rapidly grew in popularity, along with OOP ANSI standard approved in November 1997 Microsoft’s version: MC++ Properties, delegates, interfaces, no multiple inheritance\n\n71 C++ Examples\n\n72 Related OOP Languages Objective-C (designed by Brad Cox – early 1980s)\n\nC plus support for OOP based on Smalltalk Uses Smalltalk’s method calling syntax Used by Apple for systems programs Delphi (Borland) Pascal plus features to support OOP More elegant and safer than C++ Go (designed at Google ) Loosely based on C, but also quite different Does not support traditional OOP\n\n73 An Imperative-Based Object-Oriented Language: Java\n\nDeveloped at Sun in the early 1990s C and C++ were not satisfactory for embedded electronic devices Based on C++ Significantly simplified (does not include struct, union, enum, pointer arithmetic, and half of the assignment coercions of C++) Supports only OOP Has references, but not pointers Includes support for applets and a form of concurrency\n\n74 Java Evaluation Eliminated many unsafe features of C++\n\nSupports concurrency Libraries for applets, GUIs, database access Portable: Java Virtual Machine concept, JIT compilers Widely used for Web programming Use increased faster than any previous language Most recent version, 7, released in 2011\n\n75 Scripting Languages for the Web\n\nPerl Designed by Larry Wall—first released in 1987 Variables are statically typed but implicitly declared Three distinctive namespaces, denoted by the first character of a variable’s name Powerful, but somewhat dangerous Gained widespread use for CGI programming on the Web Also used for a replacement for UNIX system administration language JavaScript Began at Netscape, but later became a joint venture of Netscape and Sun Microsystems A client-side HTML-embedded scripting language, often used to create dynamic HTML documents Purely interpreted Related to Java only through similar syntax PHP PHP: Hypertext Preprocessor, designed by Rasmus Lerdorf A server-side HTML-embedded scripting language, often used for form processing and database access through the Web\n\n76 Scripting Languages for the Web\n\nPython An OO interpreted scripting language Type checked but dynamically typed Used for CGI programming and form processing Dynamically typed, but type checked Supports lists, tuples, and hashes Ruby Designed in Japan by Yukihiro Matsumoto (a.k.a, “Matz”) Began as a replacement for Perl and Python A pure object-oriented scripting language - All data are objects Most operators are implemented as methods, which can be redefined by user code Purely interpreted\n\n77 Scripting Languages for the Web\n\nLua An OO interpreted scripting language Type checked but dynamically typed Used for CGI programming and form processing Dynamically typed, but type checked Supports lists, tuples, and hashes, all with its single data structure, the table Easily extendable\n\n78 Perl Example\n\n79 Javascript Example\n\n80 PHP Example\n\n81\n\n82 Python Example\n\n83 Ruby Example\n\n84 The Flagship .NET Language: C#\n\nPart of the .NET development platform (2000) Based on C++ , Java, and Delphi Includes pointers, delegates, properties, enumeration types, a limited kind of dynamic typing, and anonymous types Is evolving rapidly\n\n85 C# Example"
    }
}