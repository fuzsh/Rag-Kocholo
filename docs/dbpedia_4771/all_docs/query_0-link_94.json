{
    "id": "dbpedia_4771_0",
    "rank": 94,
    "data": {
        "url": "https://codesinners.com/evolution-of-programming-languages/",
        "read_more_link": "",
        "language": "en",
        "title": "The Evolution of the Programming Languages",
        "top_image": "https://codesinners.com/wp-content/uploads/2024/07/Rulesew.png",
        "meta_img": "https://codesinners.com/wp-content/uploads/2024/07/Rulesew.png",
        "images": [
            "https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-300x214.png 300w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-1024x729.png 1024w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-768x547.png 768w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-1536x1094.png 1536w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-50x36.png 50w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-100x71.png 100w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836-84x60.png 84w, https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836.png 1878w",
            "https://codesinners.com/wp-content/uploads/2024/06/cropped-cropped-20240618_233836.png",
            "https://codesinners.com/wp-content/uploads/ultimatemember/3/profile_photo-190x190.jpg?1723621020",
            "https://codesinners.com/wp-content/uploads/2024/07/Rulesew-768x480.png",
            "https://codesinners.com/wp-content/uploads/ultimatemember/3/profile_photo-190x190.jpg?1723621020",
            "https://secure.gravatar.com/avatar/1088788c4834cad99c226634406e8dff?s=112&d=robohash&r=g 2x",
            "https://secure.gravatar.com/avatar/1088788c4834cad99c226634406e8dff?s=56&d=robohash&r=g",
            "https://secure.gravatar.com/avatar/9a8d35e98c97cd79f679f6203c1a8035?s=112&d=robohash&r=g 2x",
            "https://secure.gravatar.com/avatar/9a8d35e98c97cd79f679f6203c1a8035?s=56&d=robohash&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jubayer Ahmed",
            "www.facebook.com"
        ],
        "publish_date": "2024-07-14T16:03:17+00:00",
        "summary": "",
        "meta_description": "The blog is all about the evolution of the computer programming languages, starting from the beginning.",
        "meta_lang": "en",
        "meta_favicon": "https://codesinners.com/wp-content/uploads/2024/06/cropped-20240614_111310-32x32.png",
        "meta_site_name": "CodeSinners",
        "canonical_link": "https://codesinners.com/evolution-of-programming-languages/",
        "text": "The journey of computer programming languages started in the late 1940s with the advent of the electric computers. Initially, the computers were programmed using machine language, the most basic form of code which directly interacts with the hardware.\n\nMachine language is basically the 1s an 0s called the binary code. Despite looking simplified binary code is difficult for humans to write, debug and understand.\n\nHere is some Pros and Cons of Machine Language:\n\nPros:\n\nDirect execution: Binary code is directly executed by the CPU without needing for translation or interpretation.\n\nFull control: Writing in binary code gives the programmers full control over the hardware.\n\nPrecision: Binary language allows for precise control over the behavior of the hardware.\n\nNo dependence on Compilers: Binary code does not require compilers or interpreters to run, eliminating potential sources of errors or inefficiencies that can arise from the compilation.\n\nCons:\n\nHuman readability: despite only two digits (0s and 1s) binary codes are difficult to read and write without mistakes.\n\nDevelopment speed: writing and debugging codes in binary are time consuming.\n\nPortability: Binary code or machine language is specific to a particular CPU architecture, which makes it unportable to run it in other electronic devices.\n\nComplexity management: Machine language is ill-suited for managing large and complex software.\n\nSafety and security: Machine language lacks safeguard features having security vulnerabilities.\n\nCreation of Assembly Language\n\nTo reduce the difficulties of machine language, assembly language has been introduced to the world in 1949 by Kathleen Booth, a pioneering computer scientist. She created the assembly language and the design of the assembler for the first ARC computer at Birkbeck college in London.\n\nTo convert assembly code into executable machine code, programmers use a utility program called an assembler, which translates human-readable assembly instructions into binary instructions so the computer can execute it.\n\nAssembly language alternatively known as “assembler language” or “symbolic machine code”. Assembly language uses mnemonic codes and symbol to represent instructions and data.\n\nHere is some Pros and Cons of Assembly Language:\n\nPros:\n\nMnemonic: Assembly language uses mnemonics to represent machine instructions, such as ‘MOV’ represents a move command, ‘ADD’ represents an addition, similarly ‘SUB’ represents a subtraction. These types of commands are easy to understand, making it suitable for anyone to code, debug etc.\n\nLabels and symbols: Labels and symbols are used to represent memory addresses and constants, which improves readability and manageability of the code.\n\nDirect hardware manipulation: Assembly language is used for direct manipulation of the hardware.\n\nCons:\n\nComplexity: It is evident that writing programs in assembly language is easier than in binary or machine code, but difficult than higher level languages such as Java, Python C++ etc.\n\nPortability: Codes written in assembly language is specific to a certain CPU architecture, making it unportable.\n\nError-prone: Due to some low-level nature, errors like incorrect memory access can lead the program to undefined behavior or crashes.\n\nThe rise of high-level languages (HLLs)\n\nProgramming languages have had a major evolution since the inception of computation and growing complexity of software development. HLLs made it much more human readable and easy to write, debug with portability.\n\nTherefore, HLLs are platform independent. The trailblazer in this evolution was Plankalkül, which was invented by Konrad Zuse between 1942 and 1945. It was the first ever high-level language which came with an associated compiler developed by Corrado Böhm in 1951. But the first commercially available language was FORTRAN (FORmula TRANslation).\n\nFORTRAN\n\nFORTRAN was developed in 1956 by John Backus at IBM. It was designed for scientific and engineering calculations. It familiarized the concept of using English-like statements to perform mathematical operations, which simplified the complexity of programming process significantly. It has significant contribution since its inception, such as, software for NASA space probes voyager-1 and voyager-2 was originally written in FORTRAN 5.\n\nCOBOL\n\nThe programming language COBOL stands for “Common Business-Oriented Language”, which is a high-level language specially designed for business, finance and administration systems. It was developed by Grace Hopper in 1959. She is often referred as “grandmother of COBOL”, as COBOL is an extension of “FLOW-MATIC”, developed by Her.\n\nALGOL\n\nALGOL short for “ALGOrithmic Language” which is also a member of HLLs developed in 1958. It heavily influenced other programming languages. ALGOL was more influential than other three high-level languages among which it was roughly contemporary: FORTRAN, LISP, COBOL.\n\nIt was designed to avoid some of the problems available in FORTRAN and ultimately gave rise to many other languages like Simula, BCPL, Pascal, Ada, B and C. ALGOL was the first language to combine seamlessly imperative effects with the (call-by-name) lambda calculus, perhaps the most elegant formulation of the language.\n\nStructured Programming Language\n\nThough the structured programming emerged with the appearance of the ALGOL 58 and ALGOL 60, it got popular with the languages like C and Pascal. This sort of programming aimed at improving the clarity, quality and development time of computer programs.\n\nPascal\n\nPascal is developed by Niklaus Wirth in 1970. It is a procedural language and includes the traditional array of ALGOL-like control structures with reserved words such as “ ‘if’, ‘then’, ‘while’, ‘for’ and ‘case’ ” ranging on a single statement or a “ ‘begin-end’ ” statements block. It supports structured programming principles\n\nC\n\nC is a general-purpose structure programming language developed in 1972 by Denis Ritchie at Bell Labs. It is the successor to the programming language B. It was applied to re-implementing the kernel of the Unix operating system. During the 1980s, C gradually gained popularity and ultimately became one of the most widely used programming languages with its compiler available for all modern computer architectures and operating languages.\n\nKey features:\n\nEfficiency and performance: It provide low-level access to memory and system resources.\n\nPortability: Programs written in C language can be compiled and run on different types of computer systems.\n\nSet of operators: C has a rich set of built-in operators for arithmetic, logical operations.\n\nPointers: It has support for pointers which allowed direct manipulation of memory addresses.\n\nObject Oriented Programming\n\nObject oriented programming is the programming paradigm based on the concept of objects. Objects are the instances of classes. An object combines attributes and methods. Main pillars of OOP are Encapsulation, Inheritance, Polymorphism, Abstraction.\n\nSmalltalk\n\nSmalltalk is purely a objected oriented programming language which was originated in 1972 at Xerox PARC. It was initially created for educational use but later found use in business, In smalltalk, executing programs are built of opaque, atomic, so-called objects. Having undergone significant industry development toward other uses, including business and database functions, Smalltalk is still in use today.\n\nC++\n\nC++ is the extension of C, first released in 1985. It supports the four fundamental concepts of OOP: encapsulation, inheritance, abstraction and polymorphism. These allows the developers to create complex software systems that are modular and maintainable.\n\nJava\n\nJava is one the most popular programming language world wide due to its platform independent facility. It is a class-based, object oriented programming language. It was originally developed in 1995 by Sun Microsystems. It is mostly used for building enterprise-scale applications, web applications, mobile applications and many more.\n\nAlso Read\n\nDSA for Beginners: Why, and How to Start Learning DSA\n\nDifference between C, C++ and Java programming language\n\nModern era of programming languages\n\nSwift\n\nSwift is a language of the modern era developed by Apple Inc in 2014. It is mainly developed for iOS, macOS, watchOS and tvOS app development of the apple products. It is strong, modern, intuitive has many key features. For instance, it is easy to read and write, as its syntaxes are concise and expressive. It is designed keeping the safety in mind. It is fast as it used high-performance LLVM compiler. It uses ARC(Automatic reference counting) to manage memory efficiently.\n\nAlso Read\n\nHow Android and iOS Killed Other Mobile OS Platforms\n\nHow can HTML be the First Step to Learn Programming\n\nConclusion\n\nSo, the languages that the humans use to give instructions to the computer and other hardware devices have evolved a lot through the time, starting from the early 1900s till today. And surely it will keep evolving."
    }
}