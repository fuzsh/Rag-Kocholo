{
    "id": "dbpedia_4771_3",
    "rank": 97,
    "data": {
        "url": "https://bernardthoven.wordpress.com/2013/03/07/concept-programming-language-chapter-2/",
        "read_more_link": "",
        "language": "en",
        "title": "Concept programming language chapter 2",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://s2.wp.com/wp-content/themes/pub/chaoticsoul/images/chaostheory.jpg",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-03-07T00:00:00",
        "summary": "",
        "meta_description": "1. In what year was Plankalkül designed? In what year was that design published? developed in 1945, and published in 1972. 2. What two common data structures were included in Plankalkül? Plankalkül included arrays and records 3. What does Plankalkul mean? Plankalkül  is a computer language for engineering purposes by Konrad Zuse between 1943 and…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "bernardthoven",
        "canonical_link": "https://bernardthoven.wordpress.com/2013/03/07/concept-programming-language-chapter-2/",
        "text": "1. In what year was Plankalkül designed? In what year was that design\n\npublished?\n\ndeveloped in 1945, and published in 1972.\n\n2. What two common data structures were included in Plankalkül?\n\nPlankalkül included arrays and records\n\n3. What does Plankalkul mean?\n\nPlankalkül is a computer language for engineering purposes by Konrad Zuse between 1943 and 1945. It was the first high-level non-von Neumann programming language to be designed for a computer to be designed for a computer.\n\n10. what was the most significant feature added to Fortran I to get to Fortran II?\n\nIndependent-compilation capability.\n\n12. Which version of Fortran was the first to have any sort of dynamic variables?\n\nFortran 90.\n\n13. Which verion of Fortran was the first to have any character string handling?\n\nFortran 77.\n\n15.Where was LISP developed? By whom?\n\nLisp was invented by John McCarthy in 1958 while he was at the Massachusetts Institute of Technology (MIT)\n\n18. What two professional organizations together designed ALGOL 60?\n\nACM and GAM\n\n22. On what language was COBOL based?\n\nFlow-matic Language.\n\n23. In what year did the COBOL design process begin?\n\n1959.\n\n33. What language introduced the case statement?\n\nALGOL-W, and Pascal’s\n\n65. What are the inputs to an XSLT processor?\n\nthe XML document to transform, and the XSLT stylesheet that is used to apply transformations on the XML\n\n66. What is the output of an XSLT processor?\n\ntransforming XML documents into other XML documents,or other objects such as HTML for web pages, plain text or into XSL Formatting Objects which can then be converted to PDF, PostScript and PNG\n\n==========================================================================\n\n7. LISP began as a pure functional language but gradually acquired more and more imperative features. Why?\n\nJohn McCarthy’s original interest in developing LISP was to meet the demand for artificial intelligence as a functional programming language, but there soon emerged different dialects, cleaners, more modern, and more imperative, that began to deviate from the functional form into Scheme. COMMON LISP combined the different forms into a single form that was more imperative, including assignment and iteration.\n\n8. Describe in detail the three most important reasons, in your opinion, why ALGOL 60 did not become a very widely used language.\n\nExcessive flexibility hurt ALGOL60 since languages that are difficult to learn were not as well received as languages with a more rigid structure. Allowing a large number of possibilities also introduces an element of inefficiency since the methods to complete a task would differ between programmers. Second, Sebesta (2002, p. 60) notes that its association with BNF alienated the language as strange and complicated. If programmers are not excited about using a language, they will always find a different one. The third and perhaps the most important reason that ALGOL60 was not very widely used was because of a lack of support from IBM, who was at the time the preeminent company for using computer languages. Without some help from a large corporation, ALGOL60 did not have much of a chance, much like COBOL without the DoD\n\n12.Describe, in your own words, the concept of orthogonality in programming language design.\n\nIt appears that orthogonality means the simplicity of programming constructs, or a minimal number of control and data structures in a language. Each additional construct increases the complexity, removing orthogonality.\n\n13. What is the primary reason why PL/I became more widely used than\n\nALGOL 68?\n\n– PL/I included the best of ALGOL 60 (recursion and block structure), FORTRAN IV (separate compilation with communication through global data), and COBOL (data structures, input/output, and report generating facilities), along with a few new constructs\n\n– PL/I was the first language to have programs allowed to create concurrently executing tasks, the possibility to detect and handle 23 different types of exceptions, procedures allowed to be use recursively, pointers included as a data type, and reference to the cross sections of arrays\n\n14.What are the arguments both for and against the idea of a typeless language?\n\nArguments for are obvious flexibility and ease of use. Without having to define a data type the programmer is free to develop code that is generated quickly and without much thought. Learning the language is much simpler because one doesn’t have to determine size or how the compiler will interpret the type later on, only what information must be included.\n\nArguments against include data insecurity, such as the assignment of a character type ‘A’ that could in fact be “defined” as a HEX value by the programmer. The compiler would also have trouble interpreting floating point values compared to integers. The resulting arithmetic would also cause serious problems; like adding 5 + “happy” and how they are interpreted different than perhaps the programmer intended.\n\n15. Are there any logic programming languages other than Prolog?\n\n-FORTRAN\n\n-LISP\n\n-ALGOL 60\n\n25.Give a brief general description of a markup/programming hybrid language.\n\nA hybrid programming language (or hybrid level programming language) is a programming language that allows different programming languages to share the same code sheet. For example, FreeBASIC has in-line assembly so that lower-level code can be allowed for high level programming."
    }
}