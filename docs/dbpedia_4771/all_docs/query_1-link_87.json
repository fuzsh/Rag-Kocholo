{
    "id": "dbpedia_4771_1",
    "rank": 87,
    "data": {
        "url": "https://www.dinocajic.com/104-progtamming-language-q-a-p1/",
        "read_more_link": "",
        "language": "en",
        "title": "104 Programming Language Q&A (P1)",
        "top_image": "https://www.dinocajic.com/wp-content/uploads/2023/11/104-Programming-Language-QA-P1.webp",
        "meta_img": "https://www.dinocajic.com/wp-content/uploads/2023/11/104-Programming-Language-QA-P1.webp",
        "images": [
            "https://www.dinocajic.com/wp-content/uploads/2023/11/104-Programming-Language-QA-P1.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dino Cajic"
        ],
        "publish_date": "2023-12-06T08:38:26-05:00",
        "summary": "",
        "meta_description": "Programming Language Concepts is sometimes difficult to understand, but if you know the main concepts and create Q&A's, it's much easier. Here's Part 1.",
        "meta_lang": "en",
        "meta_favicon": "https://www.dinocajic.com/wp-content/uploads/2022/06/cropped-favicon-32x32.jpg",
        "meta_site_name": "Dino Cajic - Chief Digital Officer & Author | Bridging IT, Marketing & Business",
        "canonical_link": "https://www.dinocajic.com/104-progtamming-language-q-a-p1/",
        "text": "Programming Language Concepts\n\nOne of the easiest methods that I use to learn new topics is by creating notes on the subject and then turning those notes into questions and answers. Remembering answers to questions just seems more natural. I was able to memorize these 104 questions and answers in less than a few hours. I wanted to start doing this for some topics that I find pretty interesting. To begin, here are some questions and answers to Programming Language Concepts (PLC). I’m reading your mind right now and the answer is yes, there will be more.\n\n1. Name 3 reasons for studying PLC.\n\n– Better understanding of current programming languages\n\n– Advancement of computing\n\n– Increased capability to express ideas\n\n– Increased capability to learn new programming language.\n\n– Better understanding of which programming language to choose.\n\n2. Name the 5 programming domains and languages best suited for each.\n\n– Scientific (Fortran, ALGOL 60)\n\n– Business (COBOL)\n\n– AI (Lisp, Scheme, Prolog)\n\n– Web (PHP, Java, JavaScript)\n\n– Gaming (C, C++)\n\n3. What are the 4 criteria for evaluating programming languages?\n\n– Readability\n\n– Writability\n\n– Reliability\n\n– Cost\n\n4. In Reliability, what is meant by overall simplicity?\n\n– A simple language has a relatively small number of basic constructs\n\n5. What is feature multiplicity?\n\n– Having more than one way to accomplish the same task. i.e. count++ or count = count + 1\n\n6. Define orthogonality.\n\n– Small set of primitive constructs can be combined to build the language’s data and control structures.\n\n7. What’s orthogonality closely related to?\n\n– Simplicity\n\n8. True or False? Too much simplicity can be a problem.\n\n– True\n\n9. True or False? Too much orthogonality can cause problems?\n\n– True\n\n10. Give an example of data type problem.\n\n– C89 didn’t have boolean type so x = 1 is ambiguous and can mean either x = integer 1 or x = true\n\n11. Fill in the word Semantics (________) should follow directly from __________ (form)\n\n– meaning\n\n– Syntax\n\n12. Why is simplicity and orthogonality a problem in writability?\n\n– A large number of features can lead to misuse of some features and disuse of superior features\n\n13. When does orthogonality help writability?\n\n– When the features are not overly orthogonal\n\n14. When is a language expressive?\n\n– A language is expressive if it has features that make it easier to perform common tasks.\n\n15. Reliability…what is type checking?\n\n– Checks type errors either during compilation or run-time\n\n16. When is type checking preferred?\n\n– During compilation since run-time checking is expensive\n\n17. What is exception handling?\n\n– Interception of errors during run-time and taking care of those errors.\n\n18. What is aliasing?\n\n– Having two or more names assigned to same memory location.\n\n19. How does readability and writability influence reliability?\n\n– If a language is hard to read, it’s hard to debug. If it’s written unnaturally, it’s more likely to contain bugs.\n\n20. Name a few costs to consider when evaluating a programming language.\n\n– Cost of training programmers\n\n– Cost of compilation\n\n– Cost of execution\n\n– Cost of implementation\n\n21. What is optimization and why is considered a factor in cost?\n\n– Optimization is an attempt to save time or space. Optimization increases compilation time.\n\n22. What are the most important contributors to language cost?\n\n– Reliability, Maintenance and Program Development\n\n23. Name some other criteria for evaluating programming languages.\n\n– Generality\n\n– Portability\n\n– Well-Definedness.\n\n24. Most popular languages have been designed around what architecture?\n\n– Von Neumann architecture\n\n25. What is the name of languages that are based on the von Neumann architecture?\n\n– Imperative languages\n\n26. What are imperative languages based on?\n\n– Von Neumann architecture.\n\n27. What do the variable names represent in an imperative language?\n\n– Memory cells\n\n28. What do assignment statements represent in an imperative language?\n\n– The movement of data from memory to CPU and back again.\n\n29. Name the programming design methodologies.\n\n– Top-down design or Stepwise refinement\n\n– Data abstraction\n\n– Object-oriented design\n\n30. Which language helped popularize object-oriented programming?\n\n– Smalltalk\n\n31. Name the four categories that programming languages are put into.\n\n– Imperative, Functional, Logic and Object-Oriented\n\n32. Describe a functional programming language.\n\n– Ability to define and call functions.\n\n33. Describe a logic language.\n\n– Contains a set of facts and rules.\n\n34. Object-oriented languages are often extensions of _______ _______.\n\n– Imperative languages\n\n35. True or False? Markup languages are programming languages?\n\n– False\n\n36. Name some language trade offs\n\n– Reliability vs. Cost of execution\n\n– Writability vs. Readability\n\n– Writability vs. Reliability\n\n37. Name one implementation method for a programming language.\n\n– Compilation\n\n38. What is compilation?\n\n– Process where source code is translated to machine language by compiler\n\n39. What is an advantage of compilation?\n\n– Fast program execution\n\n40. What are the phases of a compiler?\n\n– Lexical analyzer, Syntax Analyzer, Intermediate Code Generator, Optimizer, Code generator\n\n41. What does the lexical analyzer do?\n\n– Discards comments and gathers characters into lexemes.\n\n42. What does the syntax analyzer do?\n\n– Checks for syntax errors and creates parse trees from lexemes.\n\n43. What does the intermediate code generator do?\n\n– Checks for semantic errors and translates the program into an intermediate language similar to assembly.\n\n44. What does an optimizer do?\n\n– Attempts to make program smaller and faster.\n\n45. What does the code generator do?\n\n– Translates intermediate code into machine language.\n\n46. True or false? All phases of a compiler use a symbol table.\n\n– True\n\n47. What is a purpose of a linker?\n\n– To combine code from different modules into a single program\n\n– To include code for calls of library routines\n\n– Include code for communication with OS\n\n48. What is the output of a linker?\n\n– An executable image\n\n49. What is pure interpretation?\n\n– Execution of a program by an interpreter without having source code being translated to lower form.\n\n50. What is an advantage of interpretation?\n\n– Good for debugging\n\n51. What are some disadvantages of interpretation?\n\n– Slow execution\n\n– Requires more space during execution\n\n52. Describe the hybrid implementation system.\n\n– Source code is generated into intermediate code and is sent to an interpreter.\n\n53. What type of intermediate code is produced by the Java Compiler?\n\n– Byte code\n\n54. What is Java’s interpreter called?\n\n– Java Virtual Machine (JVM)\n\n55. What type of compilation do Java interpreters perform?\n\n– Just-In-Time compilation\n\n56. What is Just-In-Time compilation?\n\n– The translation of byte code into machine code at execution\n\n57. Which programming languages rely on a preprocessor?\n\n– C and C++\n\n58. What does a preprocessor do?\n\n– Takes embedded commands from the source code and removes them prior to compilation.\n\n– For example, #include “myLib.h” is copied to source code\n\n59. What is a programming environment?\n\n– A collection of tools to develop software.\n\n60. What is an IDE?\n\n– Environment that provides a set of integrated tools to access through a UI.\n\n61. Who developed Plankalkul?\n\n– Konrad Zuse\n\n62. What was Plankalkul good for?\n\n– Good for expressing computations.\n\n63. What does Plankalkul mean?\n\n– Program Calculus\n\n64. True or False? Plankalkul was never implemented.\n\n– True\n\n65. What is the simplest data structure in Plankalkul?\n\n– Single bit\n\n66. What types can be derived from the single bit in Plankalkul?\n\n– Floating point and Integer\n\n67. Fill in the blank. In Plankalkul, floating-point used ______ ___________ notation and hidden bit\n\n– Twos-complement\n\n68. True or False? In Plankalkul, the if statement has an optional else statement.\n\n– False\n\n69. Does Plankalkul have a goto statement?\n\n– No\n\n70. Fill in the blank. Plankalkul has a for statement similar to the one in ________.\n\n– Pascal\n\n71. Did Plankalkul include assertions?\n\n– Yes\n\n72. What are assertions?\n\n– Mathematical expressions showing the current relationships between program variables.\n\n73. What are some problems of machine code?\n\n– Hard to read\n\n– Absolute addressing makes modification tedious.\n\n74. Name two Pseudocode languages.\n\n– Short Code and Speedcode\n\n75. Who developed Short Code?\n\n– John Mauchly\n\n76. True or False? Short code consisted of coded versions of mathematical expressions.\n\n– True\n\n77. How were variable’s named in Short Code?\n\n– With byte-pair codes.\n\n78. Was Short Code compiled or interpreted?\n\n– Interpreted\n\n79. What was another name for interpretation during the time of Short Code?\n\n– Automatic Programming\n\n80. Who developed Speedcode?\n\n– John Backus for IBM 701\n\n81. The 701 was extended into a virtual _____ _____ ________.\n\n– Three point calculator\n\n82. True or false? Speedcode was much more efficient than Machine Code?\n\n– True\n\n83. Who developed the UNIVAC compiling system?\n\n– Grace Hopper\n\n84. What were the names of the compiling systems that Grace Hopper developed?\n\n– A-0, A-1 and A-2\n\n85. What did the compiling systems do that Grace Hopper developed?\n\n– Expanded pseudocodes into machine code.\n\n86. Who developed Fortran?\n\n– John Backus for the IBM 704\n\n87. What was the primary goal of the Fortran compiler?\n\n– Speed of generated code\n\n88. True or false? The Fortran compiler was almost half as efficient as what could be done by hand.\n\n– True\n\n89. Fill in the blank. ________ was the first widely accepted compiled high-level language\n\n– Fortran\n\n90. True or False. Fortran I had I/O formatting.\n\n– True\n\n91. How many characters could be in a variable name in Fortran I?\n\n– Up to 6\n\n92. True or False? Fortran I had user-defined subroutines.\n\n– True\n\n93. True or False? Fortran I had an if/else statement.\n\n– False, only an if statement\n\n94. How did programmers declare a variable as an integer in Fortrain I? How about Floating Point?\n\n– By having the name start with I, J, K, L, M or N, variables were implicitly integer. All others were floating point\n\n95. What feature was added in Fortran II?\n\n– Independent compilation of subroutines\n\n96. True or False? Fortran III was the most successful Fortran version.\n\n– False. Fortran was never widely distributed.\n\n97. What was the first standardized Fortran version? Which year?\n\n– Fortran IV in 1966.\n\n98. Which features did Fortran IV add?\n\n– Explicit type declaration of variables\n\n– Ability to pass subprograms as parameters to other subprograms\n\n– A logical IF construct\n\n99. When did Fortran receive an ELSE to its IF statement?\n\n– Fortran 77\n\n100. When did Fortran start supporting lower case letters?\n\n– Fortran 90\n\n101. Name other features implemented in Fortran 90.\n\n– Recursion\n\n– Dynamic arrays, pointers and multiple selection statement\n\n102. What did the Fortran 90 standardization include?\n\n– A list of features to be removed\n\n103. When did Fortran receive Object-Oriented capabilities?\n\n– Fortran 2003\n\n104. Name a feature added in Fortran 2008\n\n– Better support for concurrent programming\n\nWant more?\n\nP1. 104 Programming Language Q&A\n\nP2. 95 Programming Language Q&A\n\nP3. 123 Programming Language Q&A\n\nP4. 77 Programming Language Q&A\n\nP5. 146 Programming Language Q&A\n\nP6. 94 Programming Language Q&A\n\nP7. 141 Programming Language Q&A"
    }
}