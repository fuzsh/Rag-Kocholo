{
    "id": "dbpedia_4771_3",
    "rank": 26,
    "data": {
        "url": "https://forpakarana.wordpress.com/2013/03/10/concept-of-programming-language-chapter-2-2/",
        "read_more_link": "",
        "language": "en",
        "title": "Concept of Programming Language Chapter: 2",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-03-10T00:00:00",
        "summary": "",
        "meta_description": "REVIEW QUESTIONS 1. In what year was Plankalkül designed? In what year was that design published? Plankalkül was designed by Konrad Zuse between 1943 and 1945.That designed was published in 1972. 3. What does Plankalkul mean? Plankalkul means program calculus. 5. What is the number of bits in a single word of the UNIVAC I's…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Forpakarana",
        "canonical_link": "https://forpakarana.wordpress.com/2013/03/10/concept-of-programming-language-chapter-2-2/",
        "text": "REVIEW QUESTIONS\n\n1. In what year was Plankalkül designed? In what year was that design published?\n\nPlankalkül was designed by Konrad Zuse between 1943 and 1945.That designed was published in 1972.\n\n3. What does Plankalkul mean?\n\nPlankalkul means program calculus.\n\n5. What is the number of bits in a single word of the UNIVAC I’s memory? How are the bits grouped?\n\nThe words of the UNIVAC I’s memory had 72 bits, grouped as 12 six-bit bytes.\n\n7. Who developed the Speedcoding system for the IBM 701?\n\nThe Speedcoding system developed by John Backus for the IBM 701\n\n8. Who developed Short Code? Why is Short Code called automatic programming?\n\nShort Code was developed by John Mauchly in 1949 for the BINAC computer. Short code is called automatic programming because Short Code was not translated to machine code; rather, it was implemented with a pure interpreter. It clearly simplified the programming process, but at the expense of execution time. Short Code interpretation was approximately 50 times slower than machine code.\n\n10. What was the most significant feature added to Fortran I to get Fortran II?\n\nIt fixed many of the bugs in the Fortran I compilation system and added some significant features to the language, the most important being the independent compilation of subroutines.\n\n13. Which version of Fortran was the first to have character string handling?\n\nFortran 77 was the first to have character string handling.\n\n24. What data structure that appeared in COBOL originated with Plankalkul?\n\nData structure that appeared in COBOL and originated with Plankalkul is hierarchical data structures(records).\n\n28. Why was BASIC an important language in the early 1980s?\n\nBecause, it was easy for beginners to learn, especially those who were not science oriented, and its smaller dialects can be implemented on computers with very small memories.\n\n33. What language introduced the case statement?\n\nALGOL-W introduced the case statement.\n\n37. What are two kinds of statements that populate a Prolog database?\n\nTwo kinds of statements that populate a Prolog database are facts and rules.\n\n38. What is the primary application area for which Ada was designed?\n\nAda is widely used in both commercial and defense avionics, air traffic control, and rail transportation, as well as in other areas.\n\n52. What array structure is included in C# but not in C, C++, or Java?\n\nRectangular arrays are included in C#, but not in C, C++, or Java.\n\n54. For what application area is JavaScript most widely used?\n\nJavaScript is most widely used in Web browsers.\n\n60. How does Java provide storage deallocation?\n\nJava uses implicit storage deallocation for its objects, often called garbage\n\ncollection. This frees the programmer from needing to delete objects explicitly when they are no longer needed. Programs written in languages that do not have garbage collection often suffer from what is sometimes called memory leakage, which means that storage is allocated but never deallocated. This can obviously lead to eventual depletion of all available storage.\n\n65. What are the inputs to an XSLT processor?\n\nThe inputs to an XSLT processor are an XML data document and an XSLT document (which is also in the form of an XML document).\n\n66. What is the output of an XSLT processor?\n\nThe output of an XSLT processor could be in HTML or plain text.\n\nPROBLEM SET\n\n3. Write a short history of the Fortran 0, Fortran I, Fortran II, and Fortran IV systems.\n\nFortran 0 is the first version of Fortran. Fortran 0 was modified during the implementation period, which began in January 1955 and continued until the release of the compiler in April 1957. The implemented language, which we call Fortran I, is described in the first Fortran Programmer’s Reference Manual, published in October 1956 (IBM, 1956).\n\nFortran I included input/output formatting, variable names of up to six characters, user-defined subroutines, although they could not be separately compiled, the If selection statement, and the Do loop statement. There were no data-typing statements in the Fortran I language. Variables whose names began with I, J, K, L, M, and N were implicitly integer type, and all others were implicitly floating-point.\n\nFortran II compiler was distributed in the spring of 1958. It fixed many of the bugs in the Fortran I compilation system and added some significant features to the language, the most important being the independent compilation of subroutines.\n\nFortran IV became one of the most widely used programming languages of its time.It evolved over the period 1960 to 1962 and was standardized as Fortran 66 (ANSI, 1966), although that name was rarely used. Fortran IV was an improvement over Fortran II in many ways. Among its most important additions were explicit type declarations for variables, a logical If construct, and the capability of passing subprograms as parameters to other subprograms.\n\n6. Make an educated guess as to the most common syntax error in C programs.\n\nThe most common syntax error in C programs are missing the (;) semicolon at the end of statement, missing “&” when using scanf, send the wrong paramater when using function, missing specific library when using specific function, missing () or missing {}, etc.\n\n10. Outline the major developments in ALGOL 60.\n\n• The concept of block structure was introduced. This allowed the programmer to localize parts of programs by introducing new data environments, or scopes.\n\n• Two different means of passing parameters to subprograms were allowed: pass by value and pass by name.\n\n• Procedures were allowed to be recursive. The ALGOL 58 description was unclear on this issue. Note that although this recursion was new for the imperative languages, LISP had already provided recursive functions in 1959.\n\n• Stack-dynamic arrays were allowed. A stack-dynamic array is one for which the subscript range or ranges are specified by variables, so that the size of the array is set at the time storage is allocated to the array, which happens when the declaration is reached during execution.\n\n13. What is the primary reason why C became more widely used than Fortran?\n\nReasons why C became more widely use than Fortran:\n\n• Efficient compilers are universally available for all the main architechtures in use, and a good public compiler also exists (gcc). C compilers often come free with machines, while Fortran 90 compilers must be purchased, and often expensive.\n\n• C is very broad in scope, and is more powerful of Fortran 90 in some areas, such as pointers, and manipulations of strings of characters.\n\n• Acquired coding experience can be directly used outside the scientific world : C is very common in commercial world.\n\n14. What are the arguments both for and against the idea of a typeless language?\n\nArguments for the idea:\n\nFlexibility, Brevity of syntax. It places stricter controls on what objects can receive and send, so making it easier to enforce design strategies throughout the application. When there are errors in types, there can be picked up during precompilation or in the IDE.\n\nArguments against the idea:\n\nWithout type checking, there is no means to verify the integrity of the data without executing the application. The syntax of typed languages can be viewed as overly long or verbose. Typed languages aren’t as flexible as untyped languages, as data structures need to be cast to the correct type before another object can receive them. It is also said that by using typed languages, the compiler spends less time dynamically typing objects and so executes faster. However, this point is a grey area and that the main area of argument is how these language differences play out when designing applications where more then a few people are working on the code."
    }
}