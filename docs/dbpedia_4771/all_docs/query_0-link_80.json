{
    "id": "dbpedia_4771_0",
    "rank": 80,
    "data": {
        "url": "https://slideplayer.com/slide/12854509/",
        "read_more_link": "",
        "language": "en",
        "title": "Zuse’s Plankalkül – 1945 Never implemented Problems Zuse Solved",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://slideplayer.com/static/blue_design/img/logo_slideplayer.png",
            "https://slideplayer.com/static/blue_design/img/slide-loader4.gif",
            "https://slideplayer.com/slide/12854509/78/images/1/Zuse%E2%80%99s+Plankalk%C3%BCl+%E2%80%93+1945+Never+implemented+Problems+Zuse+Solved.jpg",
            "https://slideplayer.com/slide/12854509/78/images/2/Assemblers+and+Assembly+Language.jpg",
            "https://slideplayer.com/slide/12854509/78/images/3/The+First+Compiler+Laning+and+Zierler+System.jpg",
            "https://slideplayer.com/slide/12854509/78/images/4/FORTRAN+I+%E2%80%93+John+Backus+1957+First+implemented+version+of+FORTRAN.jpg",
            "https://slideplayer.com/slide/12854509/78/images/5/Fortran+IV+%281960%29+Fortran+IV+Explicit+type+declarations.jpg",
            "https://slideplayer.com/slide/12854509/78/images/6/Fortran+I+%28continued%29+Names+could+have+up+to+six+characters.jpg",
            "https://slideplayer.com/slide/12854509/78/images/7/Fortran+I+%E2%80%93+1957+Influence+of+HW+on+Language+Design.jpg",
            "https://slideplayer.com/slide/12854509/78/images/8/Fortran+77+and+90+FORTRAN+77+%E2%80%93+1977+FORTRAN+90+%E2%80%93+1990.jpg",
            "https://slideplayer.com/slide/12854509/78/images/9/Functional+Programming+LISP+%E2%80%93+McCarthy+1959.jpg",
            "https://slideplayer.com/slide/12854509/78/images/10/ALGOL.jpg",
            "https://slideplayer.com/slide/12854509/78/images/11/ALGOL+58+%E2%80%93+1958+ALGOrithmic+Language+Search+for+a+Universal+Language.jpg",
            "https://slideplayer.com/slide/12854509/78/images/12/Algol+58+%28Continued%29+Language+Features%3A+Never+implemented.jpg",
            "https://slideplayer.com/slide/12854509/78/images/13/Algol+New+Features%3A+Block+structure+%28local+scope%29.jpg",
            "https://slideplayer.com/slide/12854509/78/images/14/Algol+60+%28Continued%29+Successes%3A+Failure%3A.jpg",
            "https://slideplayer.com/slide/12854509/78/images/15/Algol+Continued+development+of+ALGOL+60+was+released+as+Algol+68+in+1968%2C+but+it+is+not+a+superset+of+that+language..jpg",
            "https://slideplayer.com/11/3257363/big_thumb.jpg",
            "https://slideplayer.com/12/3520661/big_thumb.jpg",
            "https://slideplayer.com/12/3592342/big_thumb.jpg",
            "https://slideplayer.com/13/3888720/big_thumb.jpg",
            "https://slideplayer.com/13/3996627/big_thumb.jpg",
            "https://slideplayer.com/15/4748924/big_thumb.jpg",
            "https://slideplayer.com/16/4946499/big_thumb.jpg",
            "https://slideplayer.com/16/5040512/big_thumb.jpg",
            "https://slideplayer.com/16/5041000/big_thumb.jpg",
            "https://slideplayer.com/16/5071702/big_thumb.jpg",
            "https://slideplayer.com/16/5085198/big_thumb.jpg",
            "https://slideplayer.com/16/5142281/big_thumb.jpg",
            "https://slideplayer.com/16/5170162/big_thumb.jpg",
            "https://slideplayer.com/16/5183179/big_thumb.jpg",
            "https://slideplayer.com/16/5227365/big_thumb.jpg",
            "https://slideplayer.com/17/5319655/big_thumb.jpg",
            "https://slideplayer.com/17/5334993/big_thumb.jpg",
            "https://slideplayer.com/17/5357829/big_thumb.jpg",
            "https://slideplayer.com/20/6045645/big_thumb.jpg",
            "https://slideplayer.com/22/6333488/big_thumb.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Zuse’s Plankalkül – 1945 Never implemented Problems Zuse Solved"
        ],
        "tags": null,
        "authors": [
            "John Backus",
            "McCarthy",
            "Zuse",
            "Miranda",
            "Haskell",
            "Pascal",
            "Ada"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Assemblers and Assembly Language Problem with machine code? Poor readability Poor modifiability – addition and deletion of instructions was difficult Expression coding was tedious Machine deficiencies--no indexing or fl. pt. operation available Speedcoding; 1954; IBM 701, Backus Pseudo ops for arithmetic and math functions Conditional and unconditional branching Auto-increment registers for array access Interpreted –  Slow! After loading the interpreter, only 700 words left for user program",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://slideplayer.com/slide/12854509/",
        "text": "Presentation on theme: \"Zuse’s Plankalkül – 1945 Never implemented Problems Zuse Solved\"— Presentation transcript:\n\n1 Zuse’s Plankalkül – 1945 Never implemented Problems Zuse Solved\n\nHad advanced data types and structures Floating point, arrays, records, nesting in records No explicit goto statements Iteration Selection without else part Invariants and assertions Problems Zuse Solved Sorting Graph connectivity Integer and floating point arithmetic Expressions with operator precedence Chess playing Terse Notation\n\n2 Assemblers and Assembly Language\n\nProblem with machine code? Poor readability Poor modifiability – addition and deletion of instructions was difficult Expression coding was tedious Machine deficiencies--no indexing or fl. pt. operation available Speedcoding; 1954; IBM 701, Backus Pseudo ops for arithmetic and math functions Conditional and unconditional branching Auto-increment registers for array access Interpreted – Slow! After loading the interpreter, only 700 words left for user program\n\n3 The First Compiler Laning and Zierler System - 1953\n\nImplemented on the MIT Whirlwind computer First \"algebraic\" compiler system Subscripted variables, function calls, expression translation Never ported to any other machine\n\n4 FORTRAN I – John Backus 1957 First implemented version of FORTRAN\n\n(FORTRAN not implemented) FORmula TRANslating system First compiled high-level language Designed for the new IBM 704, which had index registers Environment of development: Computers were small and unreliable Applications were scientific No programming methodology or tools Machine efficiency was most important No need for dynamic storage Need for good array handling and counting loops No string handling and decimal arithmetic\n\n5 Fortran IV (1960) Fortran IV Explicit type declarations\n\nLogical IF statement Passing subprogram as parameters ANSI standard in 1966\n\n6 Fortran I (continued) Names could have up to six characters\n\nFormatted I/O User-defined subprograms No data typing statements No separate compilation Compiler released in April 1957, after man months of effort Programs larger than 400 lines rarely compiled correctly Code was very fast Within one year, 50% of the code written for IBM 704 machine was being developed in FORTRAN.\n\n7 Fortran I – 1957 Influence of HW on Language Design\n\nAll statements of FORTRAN I were based on 704’s instruction set 3 way branch computed if  If (EXPRESSION) L1, L2, L3 Posttest counting loop DO L1 I = N, M\n\n8 Fortran 77 and 90 FORTRAN 77 – 1977 FORTRAN 90 – 1990\n\nStructured Programming Character string handling Logical loop control statement IF-THEN-ELSE statement FORTRAN 90 – 1990 Modules Dynamic arrays Pointers Recursion CASE statement Parameter type checking\n\n9 Functional Programming LISP – McCarthy 1959\n\nLISt Processing language AI research lab at MIT Linguistic, psychology, and mathematics Needed a language that: Process data in dynamically growing lists (rather than arrays) Symbolic computation (rather than numeric) Only two data types: atoms and lists Syntax is based on lambda calculus Pioneered functional programming No need for assignment Control via recursion and conditional expressions It is still the dominant language for AI COMMON LISP and Scheme are contemporary dialects of LISP ML, Miranda, and Haskell are related languages\n\n10 ALGOL\n\n11 ALGOL 58 – 1958 ALGOrithmic Language Search for a “Universal Language”\n\nEnvironment of development: FORTRAN had (barely) arrived for IBM 70x and was owned by IBM Many other languages were being developed, all for specific machines No portable language; all were machine-dependent No universal language for communicating algorithms Goals of the language: Close to mathematical notation Good for describing algorithms Machine independent, algorithmic language for use on all kinds of computers.\n\n12 Algol 58 (Continued) Language Features: Never implemented\n\nConcept of type was formalized Names could have any length Arrays could have any number of subscripts Lower bound could be defined Parameters were separated by mode (in & out) Subscripts were placed in brackets Compound statements (begin ... end) Semicolon as a statement separator Assignment operator was := ‘if’ had an ‘else-if’ clause Never implemented IBM was initially enthusiastic but vested interest in FORTRAN resulted in taking back all support by mid-1959\n\n13 Algol 60 - 1960 New Features: Block structure (local scope)\n\nTwo parameter passing methods – value and name Subprogram recursion Stack-dynamic arrays – run time size definition and space allocation No I/O Syntax was defined in BNF\n\n14 Algol 60 (Continued) Successes: Failure:\n\nIt was the standard way to publish algorithms for over 20 years All subsequent imperative languages are based on it First machine-independent language First language whose syntax was formally defined in BNF Had impact on hardware design Failure: Never widely used, especially in U.S. Reasons: No I/O and the character set made programs non-portable Too flexible, so hard to understand and implement IBM’s interest in FORTRAN Formal syntax description – at that time BNF was considered strange and complicated!"
    }
}