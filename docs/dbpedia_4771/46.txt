Who stands out as the best of the programming language designers since the inception of programming?

The first person on my list is Konrad Zuse. Although his language Plankalkül was little know during the onset of commercial programming languages, what makes it interesting is that it was a structured programming language in 1945, well before anybody even considered the implications of unstructured code. Here is a quote from Zuse in 1981, being interviewed by Marguerite Zientara.

One thing is the famous order GOTO. If you are perfectly free in this feedback and can jump from any point in a program to any other point… there are very complicated restrictions. You can jump with your brain in your head from here to there and [not lose track of your thoughts], but it is not so for the computer. I did not have this form of GOTO in Plankalkül. Structured programming was built into Plankalkül from the beginning so you couldn’t make any nonsense.

The History of Computing (1981)

Second on my list is Niklaus Wirth. Wirth may have been one of the largest single influences on programming language design. Wirth was on the development team for Algol 68, but fed up with its complexity went off to design Algol W with Tony Hoare. Wirth’s first significant language was PL360 (1968), a byproduct of the Algol W effort. In order to implement Algol W, there was only the choice of assembly language or Fortran compilers, neither of which was very attractive. PL360 was a tool with which to implement Algol W. Wirth used his early work with Hoare on Algol W, to develop Pascal, the Modula family, and Oberon.

Third on my list is Dennis Ritchie. We all use programming languages that have parts that are in some way attributable to his work on C. We would be less of a programming community without it. Ritchie once commented that “C is quirky, flawed, and an enormous success.” Not only has C had a global impact, but so too has Unix, which he co-developed with Ken Thompson.

Lastly there is Guido van Rossum, inventor of Python. Python’s initial design goal was to “serve as a second language for people who were C or C++ programmers but who had work where writing a C program was just not effective” [1]. Python was a scripting language (in the days when such languages weren’t considered “real” languages, mostly in academia), which allowed programming without C’s insistence on knowing the ins and outs of low level memory. Whereas C was more for the expert programmer, Python was for the novice, with its clear and unambiguous syntax.

The fact that some people use Python as their primary language speaks to its impact on the programming community.

You may have noticed one trend in my selections. For the most part these individuals designed the languages without the need of large committees. That is to me part of what makes them special as language designers. It is partly the fact the it was designed as a “tool” that is intriguing. Languages tend to exist for a certain purpose, and designing for a “one language to rule them all” mantra just has never made sense to me. You will notice a trend amongst there designers, they all designed their first language for the purpose of solving a problem.

Zuse designed Plankalkül as a high level programming language (likely the first).

Wirth designed Pascal to teach programming, possibly the first language of its kind.

Ritchie designed C to provide a higher-level language to rewrite Unix, original written in assembler.

van Rossum designed Python to overcome the shortcomings of other languages.