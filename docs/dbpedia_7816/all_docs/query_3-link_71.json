{
    "id": "dbpedia_7816_3",
    "rank": 71,
    "data": {
        "url": "https://www.php.net/manual/en/function.sprintf.php",
        "read_more_link": "",
        "language": "en",
        "title": "PHP: sprintf",
        "top_image": "https://www.php.net/images/meta-image.png",
        "meta_img": "https://www.php.net/images/meta-image.png",
        "images": [
            "https://www.php.net/images/logos/php-logo.svg",
            "https://www.php.net/images/php8/logo_php8_3.svg",
            "https://www.php.net/images/to-top@2x.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "PHP is a popular general-purpose scripting language that powers everything from your blog to the most popular websites in the world.",
        "meta_lang": "en",
        "meta_favicon": "https://www.php.net/favicon.svg?v=2",
        "meta_site_name": "",
        "canonical_link": "https://www.php.net/manual/en/function.sprintf.php",
        "text": "The format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result and conversion specifications, each of which results in fetching its own parameter.\n\nA conversion specification follows this prototype: %[argnum$][flags][width][.precision]specifier.\n\nArgnum\n\nAn integer followed by a dollar sign $, to specify which number argument to treat in the conversion.\n\nFlags Flag Description - Left-justify within the given field width; Right justification is the default + Prefix positive numbers with a plus sign +; Default only negative are prefixed with a negative sign. (space) Pads the result with spaces. This is the default. 0 Only left-pads numbers with zeros. With s specifiers this can also right-pad with zeros. '(char) Pads the result with the character (char).\n\nWidth\n\nEither an integer that says how many characters (minimum) this conversion should result in, or *. If * is used, then the width is supplied as an additional integer value preceding the one formatted by the specifier.\n\nPrecision\n\nA period . optionally followed by either an integer or *, whose meaning depends on the specifier:\n\nFor e, E, f and F specifiers: this is the number of digits to be printed after the decimal point (by default, this is 6).\n\nFor g, G, h and H specifiers: this is the maximum number of significant digits to be printed.\n\nFor s specifier: it acts as a cutoff point, setting a maximum character limit to the string.\n\nNote: If the period is specified without an explicit value for precision, 0 is assumed. If * is used, the precision is supplied as an additional integer value preceding the one formatted by the specifier.\n\nSpecifiers Specifier Description % A literal percent character. No argument is required. b The argument is treated as an integer and presented as a binary number. c The argument is treated as an integer and presented as the character with that ASCII. d The argument is treated as an integer and presented as a (signed) decimal number. e The argument is treated as scientific notation (e.g. 1.2e+2). E Like the e specifier but uses uppercase letter (e.g. 1.2E+2). f The argument is treated as a float and presented as a floating-point number (locale aware). F The argument is treated as a float and presented as a floating-point number (non-locale aware). g\n\nGeneral format.\n\nLet P equal the precision if nonzero, 6 if the precision is omitted, or 1 if the precision is zero. Then, if a conversion with style E would have an exponent of X:\n\nIf P > X ≥ −4, the conversion is with style f and precision P − (X + 1). Otherwise, the conversion is with style e and precision P − 1.\n\nG Like the g specifier but uses E and f. h Like the g specifier but uses F. Available as of PHP 8.0.0. H Like the g specifier but uses E and F. Available as of PHP 8.0.0. o The argument is treated as an integer and presented as an octal number. s The argument is treated and presented as a string. u The argument is treated as an integer and presented as an unsigned decimal number. x The argument is treated as an integer and presented as a hexadecimal number (with lowercase letters). X The argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).\n\nWarning\n\nAttempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.\n\nVariables will be co-erced to a suitable type for the specifier:"
    }
}