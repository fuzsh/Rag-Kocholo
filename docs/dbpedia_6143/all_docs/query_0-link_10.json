{
    "id": "dbpedia_6143_0",
    "rank": 10,
    "data": {
        "url": "https://www.infoworld.com/article/2268779/is-sql-server-s-latest-security-hole-a-real-threat.html",
        "read_more_link": "",
        "language": "en",
        "title": "Is SQL Server’s latest security hole a real threat?",
        "top_image": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon-32x32.png",
        "meta_img": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon-32x32.png",
        "images": [
            "https://www.infoworld.com/wp-content/uploads/2024/06/seanmccown_crop-100796882-orig.jpg?quality=50&strip=all&w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/06/seanmccown_crop-100796882-orig.jpg?quality=50&strip=all&w=250",
            "https://www.infoworld.com/wp-content/uploads/2024/06/sharon-machlis_150x150px-100780511-orig.gif?w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/483088-0-88557000-1723562370-serdaryegulalp2_crop-100796854-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/08/482983-0-62898900-1723762303-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=484",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487164-0-83574300-1723798858-shutterstock_1951878751.jpg?quality=50&strip=all&w=413",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487255-0-72415100-1723797960-shutterstock_245380726-100962991-orig.jpg?quality=50&strip=all&w=372",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487254-0-51309600-1723797052-shutterstock_1104295547-100963149-orig.jpg?quality=50&strip=all&w=375",
            "https://www.infoworld.com/wp-content/uploads/2024/07/3479099-0-17628500-1722369235-Linux-Tips-video-template_9673e7.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/07/Youtube-Thumbnails_Template-OLD-1.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/06/youtube-thumbnails_template-old-100963211-orig.jpg?quality=50&strip=all&w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sean McCown",
            "Sharon Machlis Executive Editor",
            "Data & Analytics",
            "Serdar Yegulalp Senior"
        ],
        "publish_date": "2009-09-09T09:00:00-04:00",
        "summary": "",
        "meta_description": "Sentrigo discovered a new security hole in SQL Server, but so far Microsoft isn't paying attention. Let me show you why they should",
        "meta_lang": "en",
        "meta_favicon": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "InfoWorld",
        "canonical_link": "https://www.infoworld.com/article/2268779/is-sql-server-s-latest-security-hole-a-real-threat.html",
        "text": "Last week Sentrigo brought a security hole in SQL Server to my attention. The issue is simply that SQL Server stores passwords in clear text in memory, so it’s quite possible to sniff the memory to retrieve passwords of other users. That in itself doesn’t sound dangerous at first glance because you have to have system admin rights in the database to do this. However, there are two basic situations where this could be horrendous.\n\nBecause most users have the same password, once you gain access to this password, you’ve gained access to all the boxes that account is on. This works on only native SQL passwords, not on Windows passwords. This is because when you use a Windows account to log into SQL, you don’t give it a password; you only pass in your security token, and there’s no password to steal. With SQL passwords, however, you pass in the SQL username and password, and this combination is stored in clear text in memory.\n\nThe point of Sentrigo’s press release isn’t as much about the security hole as it’s about Microsoft’s refusal to do anything about it. I contacted Microsoft myself and here’s what the company had to say:\n\nMicrosoft has thoroughly investigated claims of vulnerabilities in SQL Server and found that these are not product vulnerabilities requiring Microsoft to issue a security update. As mentioned by the security researchers, in the scenario in question, an attacker would need administrative rights on the target system.\n\nAn attacker who has administrative rights already has complete control of the system and can install programs; view, change, or delete data; or create new accounts with full user rights.\n\nMicrosoft recommends that enterprise customers review and implement security measures as discussed in our security guidance and that all users follow our general guidelines to protect their PC.\n\nSentrigo says this is an important issue, but Microsoft says it’s not. In my opinion, Sentrigo has the right idea, and Microsoft is putting blinders on. I’m not sure why it’s so resistant to seeing the real issue, but even when I talked to Microsoft, the spokesperson seemed quite determined that the above was the company’s final word.\n\nHere’s why I think Sentrigo is right about this; it’s an issue of perspective. Consider these two scenarios.\n\nScenario No. 1\n\nYou’re the sys admin of a company and you have rights on all your SQL boxes. You also have an auditing solution in place to ensure that nobody, including yourself, does anything they’re not supposed to. And for some reason you get a wild hair to be nefarious. However, you have a pesky auditing solution keeping you honest.\n\nThen you read Sentrigo’s story. You figure out how to read SQL’s memory, then obtain the username and password of the guy you’re mad at. You start doing your bidding in the database under his name. Now he’s under the microscope because his login is responsible for all of the malicious things transpiring. He’s likely to get fired, though he didn’t do anything. This could go on forever before anyone figures it out. Though you’re a sys admin with wide-ranging rights, this is the very reason you shouldn’t be able to access someone else’s password.\n\nGaining permission to decrypt sensitive data is another part of this scenario. You could have a third-party encryption app in place that keeps the database administrators from seeing the data. Remember, it’s not necessarily as much about gaining more access as much as it’s about impersonating someone else — which you should never be allowed to do. Also, maybe you’re sys admin on certain boxes only, but this would allow you to gain that same level of rights on other boxes.\n\nScenario No. 2\n\nThis one is even worse because it’s far more likely and more dangerous to cause an unintended privilege violation.\n\nLet’s say you’re a developer, and like many devs, you have sys admin on your dev box. You ask the database administrator to look at something on your box because you are having trouble with a query, would like him to take a backup — or some other ruse of your creation. Once the database administrator logs on, you’re able to retrieve his password. Now, you not only have sys admin privilegs on all the SQL boxes, you have his log-in, so no one can trace it back to you. If nothing else, you could steal information and nobody would know anything about it. A security audit afterward wouldn’t show anything at all because everyone has the correct rights.\n\nBut it gets worse. You don’t have to pose as the database administrator or coax him into coming onto your box to steal his credentials. There are plenty of other credentials you can steal. Let’s say you have a product like Ecora that takes full inventory of your SQL boxes. It’s likely taking inventory of your dev box too, so you can steal that account. What about monitoring packages like SCOM, Spotlight, or OpenView? Or how about any scripts that might be running across your LAN to do one thing or another? There are so many moving parts in a big organization, it’s impossible to track them all.\n\nPossible solutions There are some good ways around this problem. First, use Windows accounts instead of SQL accounts. Windows accounts don’t pass passwords between boxes; they only pass their token, so there’s nothing to steal. My devs get tired of me turning down their requests for SQL accounts. I hand out SQL accts when there’s no other option, and I severely limit the access.\n\nAlso, don’t create generic SQL accounts. Should you have a password that gets stolen in the manner I’m going to show you, you have someone to go to. You can interrogate this person and try to ascertain their activities at the time of the activity. If you’re able to clear the end-user, it’s easier to determine whether you’ve been compromised. But if you have a generic account, it’s much harder to diagnose the situation as a security compromise. You’re far less likely to come to the right conclusion — at least for a very long time.\n\nYou can use this to get SQL passwords that have been lost and can’t be retrieved or changed any other way. I currently have such a situation. I inherited a SQL account that’s used all over the LAN and by so many processes there’s just no way I could change it without breaking hundreds of settings. If you have a situation like this, you’re screwed if someone comes in and changes the password in the DB by mistake.\n\nAnother good example of this is with linked servers. You can’t get linked server passwords back out once you create the linked server, so if you lose the password you’re screwed. Again, I’m in this exact situation myself. I have several linked servers that hit boxes in other groups or divisions and nobody on the other side knows the password. We can’t change it because they have no idea how many groups are using it.\n\nWhatever your reason, you need to get a password out of SQL Server’s memory. Go to my video on MidnightDBA.com to see me walk you through the process painlessly. In fact, it’s so easy it’s actually scary."
    }
}