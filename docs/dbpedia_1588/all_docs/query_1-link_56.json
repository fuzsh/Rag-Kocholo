{
    "id": "dbpedia_1588_1",
    "rank": 56,
    "data": {
        "url": "https://kanbantool.com/kanban-guide/agile-methodology",
        "read_more_link": "",
        "language": "en",
        "title": "Agile Framework: Benefits, Core Values, and Frameworks",
        "top_image": "https://static.kanbantool.com/kanban-guide/agile-methodology-benefits-core-values-and-frameworks.png",
        "meta_img": "",
        "images": [
            "https://kanbantool.com/assets/public_pages/kanban-tool-logo-5d881ef6916e54ea554f031f90aa2e6202e6a81188fc8449b277b2097f2b6ebb.svg",
            "https://static.kanbantool.com/kanban-guide/agile-methodology-benefits-core-values-and-frameworks.png",
            "https://static.kanbantool.com/kanban-guide/what-are-the-core-agile-values.png",
            "https://static.kanbantool.com/kanban-guide/agile-manifesto-12-principles.png",
            "https://static.kanbantool.com/kanban-guide/a-daily-stand-up-meeting-for-a-scrum-based-process.png",
            "https://static.kanbantool.com/kanban-guide/kanban-board-with-swimlanes-and-columns.png",
            "https://static.kanbantool.com/kanban-guide/extreme-programming.png",
            "https://static.kanbantool.com/kanban-guide/feature-driven-development.png",
            "https://static.kanbantool.com/kanban-guide/iterative-and-time-boxed-agile-development.png",
            "https://kanbantool.com/images/icons/flags/cs.png",
            "https://kanbantool.com/images/icons/flags/de.png",
            "https://kanbantool.com/images/icons/flags/es.png",
            "https://kanbantool.com/images/icons/flags/fr.png",
            "https://kanbantool.com/images/icons/flags/it.png",
            "https://kanbantool.com/images/icons/flags/pl.png",
            "https://kanbantool.com/images/icons/flags/pt.png",
            "https://kanbantool.com/images/icons/flags/ru.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "kanban guide",
            "kanban tutorial",
            "kanban resources",
            "kanban tool",
            "lean",
            "kanban",
            "agile",
            "scrum"
        ],
        "tags": null,
        "authors": [
            "Kanban Tool https:",
            "kanbantool.com https:",
            "kanbantool.com",
            "kanban-tool-logo.png"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Discover the values and benefits of the Agile framework, a dynamic and adaptable approach to project management and software development. Explore the most popular methods and learn how Agile enhances team collaboration, accelerates product delivery, while also promoting customer collaboration and responsiveness to change.",
        "meta_lang": "en",
        "meta_favicon": "/images/iphone-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "What is Agile?\n\nAgile is a group of iterative approaches to project management and software development that focus on dividing the process into repeat-length phases and prioritizing flexibility, adaptability, and customer satisfaction. The Agile framework aims to deliver high-quality products or services in a dynamic and rapidly changing environment.\n\nWhile there are several flavors to the Agile framework, they all share common themes, such as quick and continuous product delivery, collaboration, frequent feedback, and embracing change. They also promote self-organizing teams, empower individuals, and foster transparent communication. Having started on the software development scene in the 1990-s, Agile has since evolved into a mainstream project management approach, popular in most knowledge-driven environments.\n\nHow using Agile impacts a software or product delivery process?\n\nEnhanced team collaboration: Agile fosters highly adaptable teams that can respond to customer needs effectively.\n\nFaster product delivery: Iterative production and feedback loops enable accelerated product delivery.\n\nCloser collaboration with stakeholders: Agile frameworks encourage smaller batches of required rework through active involvement and collaboration with stakeholders.\n\nWhat are the core Agile values?\n\nThe heart of all Agile frameworks was surmised in 2001 as the Agile Manifesto, a set of software development rules for efficient code writing, collaborating and delivering to clients.\n\nThe Manifesto names four rules:\n\nIndividuals and interactions over processes and tools\n\nThis value emphasizes the significance of people and their communication within a project. So, the focus should be empowering and enabling individuals to collaborate effectively. While processes and tools matter, they must be aids rather than hindrances — companies must foster open communication, encourage face-to-face interactions, and promote teamwork.\n\nWorking software over comprehensive documentation\n\nThe Manifesto stresses the importance of delivering tangible results, such as a functional software product, rather than getting lost in excessive documentation. It doesn’t mean that documentation is unimportant, but rather that it should be concise, relevant, and support the development process, not dominate it. It means putting the creation of working software first, frequent testing and focusing on delivering value to the customer.\n\nCustomer collaboration over contract negotiation\n\nThis is to underscore the need for active customer involvement and collaboration throughout the development process. Rather than relying solely on detailed contracts, Agile promotes close interaction with clients to understand their needs, gather feedback, and ensure that the product meets their expectations. Engage customers in regular discussions, conduct user testing and feedback sessions, and iterate based on customer input.\n\nResponding to change over following a plan\n\nChange is inevitable, so instead of rigidly adhering to a fixed plan, it’s paramount to be adaptable and responsive. That means being open to feedback, embracing change as a normal part of the development process, and continually adjusting plans and priorities. In practice, it is done through regular review and adaptation of the project’s direction, and the willingness to make course corrections based on new information.\n\nAs means of additional clarification, the Agile Manifesto authors have also devised the following principles:\n\n12 principles of the Agile Manifesto, source: agilemanifesto.org/principles.html\n\nWhat are some of the most popular Agile methods?\n\nScrum\n\nIn the Scrum framework, the team member fulfilling the product owner role lists all to-dos in the product backlog. Portions of the backlog tasks will then divide the project into short iterations called sprints, usually lasting two to four weeks. The team performs the assigned set of prioritized tasks during each sprint and holds daily meetings called stand-ups to assess their progress, together with the Scrum master, overseeing the work. After each sprint, the team should have a working version of their product to either demonstrate or ship to the customer. The team also holds a retrospective meeting to assess any issues they encountered and draw conclusions for the next sprint. One of the best aspects of using Scrum is the team motivation afforded by only looking as far ahead as the sprint’s end — it helps to maintain good morale and limits how far into the project any bugs can get. However, the short sprint span can also be a disadvantage, as it can restrict the team’s understanding and appreciation of the broader product goal.\n\nScrum is best suited for small teams, able to quickly change direction and approach.\n\nKanban\n\nThe Kanban method emphasizes visualizing the workflow and limiting work in progress (WIP). Tasks are represented as cards on a Kanban board, accessible to all team members, who move them through different stages, e.g., backlog, in progress, review, and done. The doing steps should have a limit of the number of open tasks, allowing the team to focus wholeheartedly on the started work, rather than try multitasking, suffering suboptimal focus and dedication.\n\nKanban centers on continuous delivery and encourages teams to optimize their workflow at every opportunity. Its key benefits are an end to multitasking, the possibility to exercise continuous delivery, shorter lead times, as well as complete process and project transparency.\n\nBecause the Kanban framework asks very little in terms of process flow requirements and team structure, it can support virtually any business process.\n\nLean development\n\nTranslated into the software world directly from manufacturing, Lean aims to minimize waste and maximize the value delivery to the client. It emphasizes reducing non-value-adding activities, streamlining processes to make delivery fast, and continuously improving efficiency. Lean software development demands to rid the process of all unnecessary elements and actions, to speed up the process and reduce cost.\n\nThe principles of Lean are often the first step teams make toward building an Agile process, and they can be easily combined with other Agile frameworks.\n\nExtreme Programming (XP)\n\nXP takes valuing customer feedback and satisfaction to the next, and centers round finding the simplest solutions to client needs, ones possible to deliver fast and successfully. To deliver such high-quality software, Extreme Programming practitioners utilize continuous integration, test-driven development, pair programming, and frequent releases. A unique characteristic of XP is testing the code right from the get-go, strongly limiting flaws in the delivered products.\n\nXP is ideal for co-located teams, and fosters highly energetic and motivating work environment. A potential drawback of Extreme Programming is its code-centricity, making it easy to put elements such as design and UX second, or disregard completely.\n\nFeature Driven Development (FDD)\n\nAs the name suggests, this method subordinates the process to the specific software features, or broader software elements — user stories — the team is working on at the time. Be it software development or another business process, FDD’s focus is on understanding the specific domain, its characteristics and needs. Similar to other Agile frameworks, FDD values customer feedback and supports iterative, frequent delivery. Work is usually done in a set of sequences starting from building an overall feature model, through making a features list, planning by feature, designing by feature to — finally — building by feature.\n\nThe main appeal of FDD is that it facilitates quick work and speedy error identification, allowing teams to deliver the product often and with few hiccups. FDD’s feature-centric nature makes the approach workable for teams with a defined hierarchy of members, with one being able to plan what elements they will work on next. It is also best suited to longer projects, helping to narrow down the fucus to individual features at a time, keeping progress continuous.\n\nCrystal\n\nCrystal is an Agile framework a touch different than the rest. How? It leaves the choice of process to the team itself, relying mainly on the belief that it’s the specificity of given individuals’ interaction that makes the team valuable and successful. Therefore, it’s more a recipe for how to set up custom-made processes for given, specific teams, rather than a one-fits-all solution. It allows the individuals to choose how they should work, which, of course, assumes high level of communication skills from all involved. As such, Crystal names a few distinct principles, such as People, Interactions, Community, Skills, Talent or Communication, and it has a few variations based on the team size.\n\nAn element of Crystal that is perhaps a little time-consuming is the delineation of the process for a specific project, which can take both time and energy that many would say might be spent on programming and testing. However, it is a highly human-centric Agile method, placing the highest value on people’s skills and ability to interact successfully at their own guidance. While it may not work for new and inexperienced software teams, it has significant potential for strong and close-knit groups.\n\nChoosing an Agile method right for you\n\nAs you can see, different Agile frameworks are suitable for different needs and team types. Factors such as team size, experience, location and level of camaraderie, your product type and its lifecycle all impact what methods will and won’t work. Other factors may also be involved, e.g., some industries require teams to follow specific workflow guidelines and operating procedures, which may limit the choice of management method.\n\nA straightforward way to start for any team looking to incorporate Agile is aligning their current process with the basic Lean principles while also performing process visualization based on Kanban or Srcumban, a hybrid of Scrum and Kanban.\n\nBecause — no matter which framework you prefer — working with Agile means following specific values rather than sticking to a rigid set of rules.\n\nThe value-driven guidelines shared by all Agile frameworks are:\n\nIterative and time-boxed development,\n\nIntense communication within the team and with the customer,\n\nAlways looking for ways to improve the process.\n\nSumming up, Agile excels in dynamic environments and aim to deliver high-quality products or services fast. The common theme among all Agile frameworks include rapid product delivery, collaboration, frequent feedback, and welcoming change. Agile empowers individuals, fosters transparent communication, and promotes self-organizing teams. As such, it’s bound to help you achieve your goals more easily and help your team better understand the process that drives their work."
    }
}