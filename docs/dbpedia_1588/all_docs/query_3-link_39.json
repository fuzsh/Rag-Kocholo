{
    "id": "dbpedia_1588_3",
    "rank": 39,
    "data": {
        "url": "https://www.easyagile.com/blog/software-development-methodologies/",
        "read_more_link": "",
        "language": "en",
        "title": "8 Software Development Methodologies Explained",
        "top_image": "https://cdn.sanity.io/images/w4zc2lav/production/4878bdcb3ac34621d773b4faf2720e7fe0bdb413-1920x1080.png?w=880&h=495&auto=format",
        "meta_img": "https://cdn.sanity.io/images/w4zc2lav/production/4878bdcb3ac34621d773b4faf2720e7fe0bdb413-1920x1080.png?w=880&h=495&auto=format",
        "images": [
            "https://cdn.sanity.io/images/w4zc2lav/production/12909be4febfef8a81ca657f9980ef2ff17faeba-352x352.png?w=352&h=352&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/12909be4febfef8a81ca657f9980ef2ff17faeba-352x352.png?w=352&h=352&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/4878bdcb3ac34621d773b4faf2720e7fe0bdb413-1920x1080.png?w=880&h=495&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/4878bdcb3ac34621d773b4faf2720e7fe0bdb413-1920x1080.png?w=880&h=495&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/3dab8d829d63d83cbe857137c5d8eff2ad751ad8-549x549.png?w=64&h=64&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/3dab8d829d63d83cbe857137c5d8eff2ad751ad8-549x549.png?w=64&h=64&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/1c832174f91be19c26d82ce7afd1e740b56f068a-2848x4272.jpg?w=64&h=96&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/1c832174f91be19c26d82ce7afd1e740b56f068a-2848x4272.jpg?w=64&h=96&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/7e3fbaffb088a8cfa4b31a84e21e1babf7ee753c-1080x1080.png?w=880&h=880&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/7e3fbaffb088a8cfa4b31a84e21e1babf7ee753c-1080x1080.png?w=880&h=880&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/b1fc05048428e686203dbf30d21701eb0d1186ef-1200x800.jpg?rect=1,0,1199,800&w=880&h=587&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/b1fc05048428e686203dbf30d21701eb0d1186ef-1200x800.jpg?rect=1,0,1199,800&w=880&h=587&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/33397ca9ffd5f2bd5f3fee025ebc76ca91182217-960x720.png?w=460&h=345&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/33397ca9ffd5f2bd5f3fee025ebc76ca91182217-960x720.png?w=460&h=345&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/20cd31ecdba07df8bc4a6fd95c6e021a28edb619-1920x1080.png?rect=1,0,1918,1080&w=460&h=259&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/20cd31ecdba07df8bc4a6fd95c6e021a28edb619-1920x1080.png?rect=1,0,1918,1080&w=460&h=259&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/f45b36199f3431ea7ed51ca9f063896a1d6d9dd9-620x413.png?rect=0,1,620,412&w=460&h=306&auto=format",
            "https://cdn.sanity.io/images/w4zc2lav/production/f45b36199f3431ea7ed51ca9f063896a1d6d9dd9-620x413.png?rect=0,1,620,412&w=460&h=306&auto=format"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-03-14T00:00:00+00:00",
        "summary": "",
        "meta_description": "Software development methodologies can be combined and adjusted to fit a specific development environment. Take a look at these eight approaches.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-32x32.png?v=fbc7fe5c172b670265aa70a1fac65a3c",
        "meta_site_name": "Easy Agile",
        "canonical_link": "https://easyagile.com/blog/software-development-methodologies/",
        "text": "Software development teams are known for using a wide variety of agile methodologies, approaches, and tools to bring value to customers. Depending on the needs of the team and the product's stakeholders, it‚Äôs common for teams to deploy and utilize a combination of software development methodologies.\n\nMost dev teams combine methodologies and frameworks to build their own unique approach to product development. You‚Äôll find there are plenty of overlapping principles from one methodology to the next. The key is choosing a system and working as a team to fine-tune and improve that approach so you can continue to reduce waste, maximize efficiency, and master collaboration.\n\nIn this post, we‚Äôll outline and compare the following eight software development processes:\n\n1. Agile software development methodology\n\n2. Waterfall methodology\n\n3. Feature driven development (FDD)\n\n4. Lean software development methodology\n\n5. Scrum software development methodology\n\n6. Extreme programming (XP)\n\n7. Rapid application development (RAD)\n\n8. DevOps deployment methodology\n\n1. Agile software development methodology\n\nAgile is the most common term used to describe development methods. It‚Äôs often used as an umbrella term to label any methodology that‚Äôs agile in nature, meaning an iterative process that reduces waste and maximizes efficiency.\n\nMost software development methodologies are agile with a strong emphasis on iteration, collaboration, and efficiency, as opposed to traditional project management. It‚Äôs like comparing jazz to classical music. üé∑\n\nTraditional, linear management methods, such as the waterfall method we‚Äôll cover below, are like classical music, led by one conductor who has a set plan for how the music should be played. The agile process, on the other hand, is more like jazz, which comes together through collaboration, experimentation, and iteration between band members. It‚Äôs adaptive and evolves with new ideas, situations, and directions.\n\n2. The waterfall methodology\n\nThe waterfall approach is a traditional methodology that‚Äôs not very common in software development anymore. For many years, the waterfall model was the leading methodology, but its rigid approach couldn‚Äôt meet the dynamic needs of software development.\n\nIt‚Äôs more common to see the waterfall method used for project management rather than product development. At the beginning of a project, project managers gather all of the necessary information and use it to make an informed plan of action up front. Usually, this plan is a linear, step-by-step process with one task feeding into the next, giving it the ‚Äúwaterfall‚Äù name.\n\nThe approach is plan-driven and rigid, leaving little room for adjustments. It‚Äôs more or less the opposite of agile, prioritizing sticking to the plan rather than adapting to new circumstances.\n\n3. Feature driven development (FDD)\n\nFeature driven development is also considered an older methodology. Although it uses some agile principles, it‚Äôs viewed as the predecessor of today‚Äôs agile and lean methodologies.\n\nAs the name says, this process focuses on frequently implementing client-valued features. It‚Äôs an iterative process with all eyes on delivering tangible results to end users. The process is adaptive, improving based on new data and results that are collected regularly to help software developers identify and react to errors.\n\nThis kind of focused agile methodology can work for some teams that want a highly structured approach and clear deliverables while still leaving some freedom for iteration.\n\n4. Lean software development methodology\n\nLean software development comes from the principles of lean manufacturing. At its core, lean development strives to improve efficiency by eliminating waste. By reducing tasks and activities that don‚Äôt add real value, team members can work at optimal efficiency.\n\nThe five lean principles provide a workflow that teams use to identify waste and refine processes. Lean is also a guiding mindset that can help people work more efficiently, productively, and effectively.\n\nThe philosophies and principles of lean can be applied to agile and other software development methodologies. Lean development provides a clear application for scaling agile practices across large or growing organizations.\n\n5. Scrum software development methodology\n\nScrum is a system regularly used by software development teams. Like many software development methodologies, Scrum is agile, focusing on a value-driven approach. The Scrum process is based on empiricism, which is the theory that knowledge comes from hands-on experience and observable facts.\n\nOne Scrum takes place over a preset amount of time called a sprint. Usually, the time frame is between two to four weeks and the Scrum is at the beginning of the sprint. The goal of each sprint is to yield an imperfect but progressing version of a product to bring to stakeholders so that feedback can be integrated right away into the next sprint.\n\nThe specific goals of each sprint are determined by a product owner who orders and prioritizes backlog items (the artifacts that need completion). The sprint process repeats over and over again with the development team adjusting and iterating based on successes, failures, and stakeholder feedback.\n\nLearn more about Scrum ‚Äî the complete program planning solution for Jira.\n\n6. Extreme programming (XP)\n\nExtreme programming, also called XP, is a methodology based on improving software quality and responsiveness. It‚Äôs an agile approach that evolves based on customer requirements; the ultimate goal is producing high-quality results. Quality isn‚Äôt just limited to the final product ‚Äî it applies to every aspect of the work, ensuring a great work experience for developers, programmers, and managers.\n\nDecision-making in extreme programming is based on five values: communication, simplicity, feedback, courage, and respect. The specifics of XP can‚Äôt apply to all situations, but the general framework can provide value no matter the context.\n\n7. Rapid application development (RAD)\n\nRapid application development (RAD), sometimes called rapid application building (RAB), is an agile methodology that aims to produce quality results at a low-cost investment. The process prioritizes rapid prototyping and frequent iteration.\n\nRapid application development begins with defining the project requirements. From there, teams design and build imperfect prototypes to bring to stakeholders as soon as possible. Prototyping and building repeat over and over through iterations until a product is complete and meets customer requirements.\n\nThis is ideal for smaller projects with a well-defined objective. The process helps developers make quick adjustments based on frequent feedback from stakeholders. It‚Äôs all about creating quick prototypes that can get in front of users for constructive feedback as soon as possible. This feedback is pulled into the user design so that development decisions are based on the direct thoughts and concerns of those who will use the product.\n\n8. DevOps deployment methodology\n\nThe DevOps deployment methodology is a combination of Dev (software development) and Ops (information technology operations). Together, they create a set of practices designed to improve communication and collaboration between the departments responsible for developing a product.\n\nIt's an ongoing loop of communication between product developers and Ops teams (IT operations.) Like so many agile processes, it relies on continuous feedback to help teams save time, increase customer satisfaction, improve launch speed, and reduce risks.\n\nThe steps of DevOps deployment repeat, aiming to increase customer satisfaction with new features, functionality, and improvements. However, this methodology has some drawbacks. Some customers don‚Äôt want continuous updates to their systems once they are satisfied with an end product.\n\nSoftware development made easy\n\nMost software development teams use a combination of methodologies and frameworks to fit their team size, team dynamics, and the type of work being completed. The key is to use an agile methodology and work together to continually improve your systems as you learn and grow.\n\nEasy Agile is dedicated to helping teams work better together with agile. We design agile apps for Jira with simple, collaborative, and flexible functionality. From team agility with Easy Agile TeamRhythm, to scaled agility with Easy Agile Programs, our apps can help your agile teams deliver better for your customers."
    }
}