{
    "id": "dbpedia_1588_3",
    "rank": 92,
    "data": {
        "url": "https://www.zartis.com/different-agile-methodologies-with-pros-cons/",
        "read_more_link": "",
        "language": "en",
        "title": "Different Agile Methodologies with Pros & Cons",
        "top_image": "https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared.png",
        "meta_img": "https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared.png",
        "images": [
            "https://www.zartis.com/wp-content/uploads/2020/03/Zartis-logo-black.png 1050w, https://www.zartis.com/wp-content/uploads/2020/03/Zartis-logo-black-300x86.png 300w, https://www.zartis.com/wp-content/uploads/2020/03/Zartis-logo-black-1024x293.png 1024w, https://www.zartis.com/wp-content/uploads/2020/03/Zartis-logo-black-768x219.png 768w",
            "https://www.zartis.com/wp-content/uploads/2020/03/Zartis-logo-black.png",
            "https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared.png 1600w, https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared-300x193.png 300w, https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared-1024x659.png 1024w, https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared-768x494.png 768w, https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared-1536x989.png 1536w",
            "https://www.zartis.com/wp-content/uploads/2022/08/different-agile-methodologies-compared.png",
            "https://www.zartis.com/wp-content/uploads/2022/08/agile-vs-waterfall-methodology.png 512w, https://www.zartis.com/wp-content/uploads/2022/08/agile-vs-waterfall-methodology-300x204.png 300w",
            "https://www.zartis.com/wp-content/uploads/2022/08/agile-vs-waterfall-methodology.png",
            "https://www.zartis.com/wp-content/uploads/2022/08/kanban-board-example-e1659973225493.jpg 763w, https://www.zartis.com/wp-content/uploads/2022/08/kanban-board-example-e1659973225493-300x165.jpg 300w",
            "https://www.zartis.com/wp-content/uploads/2022/08/kanban-board-example-e1659973225493.jpg",
            "https://www.zartis.com/wp-content/uploads/2022/08/lifecycle-of-Feature-Driven-Development.gif",
            "https://www.zartis.com/wp-content/uploads/2022/08/lifecycle-of-Feature-Driven-Development.gif",
            "https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2-1024x576.png 1024w, https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2-300x169.png 300w, https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2-768x432.png 768w, https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2-1536x864.png 1536w, https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2.png 1920w",
            "https://www.zartis.com/wp-content/uploads/2023/08/iso-27001-certified-software-company-2-1024x576.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Zartis Team"
        ],
        "publish_date": "2022-08-08T15:57:02+00:00",
        "summary": "",
        "meta_description": "Discover the most accepted agile methodologies, and the pros and cons of each approach. Find the best fit for your software project.",
        "meta_lang": "en",
        "meta_favicon": "https://www.zartis.com/wp-content/uploads/2022/03/cropped-Zartis-logo-aqua-32x32.png",
        "meta_site_name": "Zartis",
        "canonical_link": "https://www.zartis.com/different-agile-methodologies-with-pros-cons/",
        "text": "Ah, agile. The buzzword of the decade.\n\nFrom agile organizations and agile managers to agile workspaces, the term is thrown around so much that it almost seems to lose concrete meaning.\n\nIn the tech world, however, “agile” is anything but vague corporate lingo. It refers to something very specific: a particular approach to building software.\n\nAnd just like the word itself, agile software development has seen its popularity go through the roof in the past few years.\n\nWith most development teams using agile these days, it’s essential to know the different agile methodologies and how they differ from the traditional waterfall model.\n\nHere is the least you need to know.\n\nAgile vs. Waterfall Software Development\n\nWhat Is Waterfall Development?\n\nWaterfall is the old-school way to create software.\n\nThis method breaks down the software development life cycle (SDLC) into distinct linear steps — gradually progressing from requirements gathering, analysis, and design to coding, testing, and deployment. Each development phase must be completed, reviewed, and verified before starting the next. The steps flow or “waterfall” one after the other.\n\nWhat Is Agile Development?\n\nThere are many different agile methodologies, but they have one thing in common: They are circular rather than linear.\n\nAgile projects are divided into shorter development cycles known as sprints or iterations. Each sprint incorporates all or most SDLC phases to deliver a functional application at the end. The development team and the customer then review the product and create requirements for the next sprint, which produces an updated version.\n\nImage courtesy of ResearchGate\n\nWhich Is Better: Waterfall or Agile?\n\nAs you can probably tell, the waterfall model usually takes longer to build a functional product. It’s also more rigid and doesn’t allow for significant departures from the original requirements.\n\nIn contrast, with the agile approach you already have a minimum viable product (MVP) at the end of the first sprint. This rudimentary product is then fine-tuned with each iteration based on user and customer feedback.\n\nWhat Are the Different Types of Agile Methodologies?\n\n“Agile software development” is somewhat of a misnomer. The phrase can create an impression that agile development is a monolith, but, in reality, there are numerous agile methods.\n\nSo, how many different agile methodologies are there? They are too many to list in one article, but the most popular include:\n\nScrum\n\nKanban\n\nExtreme Programming (XP)\n\nLean Development\n\nCrystal\n\nDynamic Systems Development Method (DSDM)\n\nFeature-Driven Development (FDD)\n\nLet’s take a closer look at these.\n\n1. Scrum\n\nScrum has been around at least since 1986. By then, an early version of the methodology was already used by companies such as Honda and Canon. Early adopters named it Scrum after the eponymous rugby term, which refers to restarting the game after an infringement.\n\nScrum development is done in sprints usually ranging between two and four weeks. Each sprint produces an iteration of the product based on the client’s latest requirements. Every day starts with a 15-minute meeting, also known as a daily Scrum, during which team members check on product progress, coordinate their work, and plan daily tasks.\n\nA Scrum team is a small cohesive unit with a common goal and no subteams or hierarchies. The team members typically include a Scrum master, a product owner, and developers.\n\nScrum Pros and Cons\n\nPros\n\nRelatively low cost\n\nEasily adapts to evolving needs\n\nConstant monitoring for quality\n\nHorizontal hierarchy and daily follow-up facilitate transparency\n\nCons\n\nProject segmentation may cause teams to lose track of the bigger picture\n\nIndividual team member roles may not be well defined, resulting in confusion\n\n2. Kanban\n\nKanban is by far the oldest of the different agile methodologies on our list. It was first developed in the late 1940s by Japanese engineer Taiichi Ohno. “Kanban” means “just in time” in Japanese.\n\nKanban focuses on creating an easy-to-understand, real-time visualization of the entire project to keep track of progress, increase transparency, and improve collaboration.\n\nTo that end, a board or a table (called a Kanban board) is divided into columns, one for each flow within the software development project. This includes pending, completed, and upcoming tasks. As work progresses, the information in the columns changes. Whenever a new task is created, a new column is added to the table.\n\nImage courtesy of ResearchGate\n\nKanban Pros and Cons\n\nPros\n\nEasy-to-understand visuals\n\nSmooth workflows\n\nGreat inventory management\n\nEasy to incorporate into existing organizational structures\n\nCons\n\nBest for processes that undergo small changes or with fewer flows but not ideal for very complex or dynamic projects\n\n3. Crystal\n\nCrystal is one of the most flexible agile methodologies. Originally developed in 1991 by Alistair Cockburn, it focuses on team members and how they interact rather than on processes or tools. This allows you to quickly build custom workflows based on your needs and incorporate them into your existing infrastructure with minimal overhead.\n\nThe Crystal method sees the product development process as a game that should inspire team members to interact, get creative, and come up with brilliant ideas. Frequent and direct communication, high team morale, and open access to users and information are critical.\n\nCrystal team variants include:\n\nCrystal Clear: Up to eight people\n\nCrystal Yellow: 10–20 people\n\nCrystal Orange: 20–50 people\n\nCrystal Red: 50–1000 people\n\nCrystal Pros and Cons\n\nPros\n\nFacilitates creativity, knowledge-sharing, and innovation\n\nContinuous collaboration between team members\n\nCompatible with various organizational structures and team sizes\n\nCons\n\nNot ideal for geographically scattered teams due to the need for constant communication\n\nRequires an experienced team with a high level of autonomy\n\nBrainstorming can go too far, causing teams to lose track of customer requirements\n\n4. Lean Development\n\nLean Development traces its roots back to Lean Manufacturing, an industrial production model pioneered by Toyota. The main idea is to strip processes down to the bare minimum by eliminating everything that doesn’t bring value to the product.\n\nThe goal is to build a simple solution — the minimum viable product we discussed above — deliver it to the customer quickly, and use their continuous feedback to enhance the product incrementally.\n\nIn addition to removing non-essential tasks and processes, there is a heightened focus on quality, frequent delivery, communication, conflict management, and documenting workflows to reuse in the future.\n\nLean Development Pros and Cons\n\nPros\n\nRapid delivery cycles\n\nLack of superfluous activity shortens development time and saves money\n\nScalable methodology suitable for different-sized projects\n\nNo overengineered, needlessly complex solutions\n\nCons\n\nRequires a team that is well-versed in Lean agile principles\n\nTask segmentation can cause teams to lose focus\n\nRequires in-depth knowledge of the client’s industry, business, and product requirements for the essentials to be correctly identified\n\n5. Extreme Programming (XP)\n\nXP was created by Kent Beck and Ward Cunningham in 1996. It prioritizes simplicity or identifying the simplest code that works, test-driven development, and customer satisfaction.\n\nThe product is tested continuously from day one to collect feedback. Developers adapt to changes in client requirements even if they come late in the development cycle, without putting too much weight on the original long-term view.\n\nExtreme Programming Pros and Cons\n\nPros\n\nRapid results\n\nContinuous feedback and testing facilitate quality\n\nSimplicity of the code allows for improvements at any time\n\nFocus on customer satisfaction helps build strong business relationships\n\nCons\n\nHyperfocus on code can cause teams to neglect design\n\nMay not be suitable for geographically scattered teams\n\nA registry of errors isn’t always maintained, which could lead to repeated bugs in the future\n\n6. Dynamic Systems Development Method (DSDM)\n\nFirst developed by James Rumbaugh and Michael Tuckman in 1994, DSDM sought to bring more discipline and governance to the earlier Rapid Application Development (RAD) method.\n\nLike other agile frameworks, DSDM emphasizes rapid prototyping, frequent releases, continuous testing, and improvement through user feedback. What makes DSDM stand out, however, is its insistence on having well-defined strategic goals based on the client’s business requirements. All stages of product development must support these goals and create demonstrable value for the business.\n\nDSDM Pros and Cons\n\nPros\n\nRapid deliverables\n\nFlexible workflow\n\nBusiness-driven approach\n\nGreat for long-term or complex software projects\n\nCons\n\nPossible large overheads\n\nImpractical for small companies\n\nMay stifle innovation and developer creativity\n\nRigid goals may not reflect changes in the market\n\n7. Feature-Driven Development (FDD)\n\nAs its name suggests, and unlike most agile methodologies, FDD focuses on delivering features rather than complete products.\n\nThe FDD process consists of five phases. During the first phase, the development team creates a high-level product model. In the second phase, they compile a list of the different functions and related features and functionalities. Other tasks such as programming and testing take place during the more advanced phases four and five.\n\nAnother distinctive aspect of FDD is feature teams. These are small subteams that focus on developing a specific product feature.\n\nImage courtesy of ResearchGate\n\nFDD Pros and Cons\n\nPros\n\nBreaking work down into distinct phases makes it easier for team members to grasp the project scope\n\nFocus on features ensures customer requirements are met and facilitates a good user experience\n\nCompatible with both short and long-term projects\n\nCons\n\nMay not be suitable for very small projects and projects with a single developer\n\nSmall feature teams can promote individualism instead of teamwork\n\nNot Sure Which of the Different Agile Methodologies Is Best for You?\n\nIt’s okay. That’s our job.\n\nAt Zartis, all of our software development teams work in agile. Our operating model of choice is usually Scrum, but we are proficient in different agile methodologies and always tailor our approach to your company size, in-house processes, and project requirements.\n\nWhether you need our consulting services to understand how to apply agile better or you want to start building dedicated agile teams with us, we got your back."
    }
}