{
    "id": "dbpedia_1588_1",
    "rank": 13,
    "data": {
        "url": "https://asana.com/resources/extreme-programming-xp",
        "read_more_link": "",
        "language": "en",
        "title": "What is Extreme Programming (XP)? [2024]",
        "top_image": "https://assets.asana.biz/m/7d1283fb8ef1b3f5/webimage-article-project-management-operational-efficiency-2x.jpg",
        "meta_img": "https://assets.asana.biz/m/7d1283fb8ef1b3f5/webimage-article-project-management-operational-efficiency-2x.jpg",
        "images": [
            "https://assets.asana.biz/m/3c783c71ef817d3e/original/WEBINAR-PNG-24AI-ON_DEMAND-800x512-v2.png",
            "https://assets.asana.biz/m/c0f90a11ed114d5/original/RM25_resources_featuredreadthumbnail.png",
            "https://assets.asana.biz/m/4bfad42502bff345/original/05-31-2024-State-of-AI-at-Work-Hero-Image.png",
            "https://assets.asana.biz/m/3c783c71ef817d3e/original/WEBINAR-PNG-24AI-ON_DEMAND-800x512-v2.png",
            "https://assets.asana.biz/m/c0f90a11ed114d5/original/RM25_resources_featuredreadthumbnail.png",
            "https://assets.asana.biz/m/4bfad42502bff345/original/05-31-2024-State-of-AI-at-Work-Hero-Image.png",
            "https://assets.asana.biz/transform/41442f0e-b238-49cb-9cdd-a92cec05d52f/blog_profile_photos_0001_Alicia-Raeburn?io=transform:fill,width:32&format=webp 1x, https://assets.asana.biz/transform/41442f0e-b238-49cb-9cdd-a92cec05d52f/blog_profile_photos_0001_Alicia-Raeburn?io=transform:fill,width:64&format=webp 2x",
            "https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:375&format=webp 375w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:480&format=webp 480w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:768&format=webp 768w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:960&format=webp 960w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:1120&format=webp 1120w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:1440&format=webp 1440w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:1680&format=webp 1680w, https://assets.asana.biz/transform/c0d6830a-16bf-4d4a-836f-3fee10f03cbc/article-project-management-operational-efficiency-2x?io=transform:fill,width:2560&format=webp 2560w",
            "https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:375&format=webp 375w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:480&format=webp 480w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:768&format=webp 768w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:960&format=webp 960w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:1120&format=webp 1120w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:1440&format=webp 1440w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:1680&format=webp 1680w, https://assets.asana.biz/transform/3052d1de-4844-46f9-9571-386d3adbe50c/article-agile-technical-debt-2x?io=transform:fill,width:2560&format=webp 2560w",
            "https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:375&format=webp 375w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:480&format=webp 480w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:768&format=webp 768w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:960&format=webp 960w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:1120&format=webp 1120w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:1440&format=webp 1440w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:1680&format=webp 1680w, https://assets.asana.biz/transform/07f90203-5e0f-4788-b455-a968db5fb769/article-collaboration-workplace-adaptability-skills-2x?io=transform:fill,width:2560&format=webp 2560w",
            "https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:375&format=webp 375w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:480&format=webp 480w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:768&format=webp 768w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:960&format=webp 960w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:1120&format=webp 1120w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:1440&format=webp 1440w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:1680&format=webp 1680w, https://assets.asana.biz/transform/b2373105-da01-4992-a8d8-65084ebd5771/article-project-management-burndown-chart-2x?io=transform:fill,width:2560&format=webp 2560w",
            "https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:375&format=webp 375w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:480&format=webp 480w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:768&format=webp 768w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:960&format=webp 960w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:1120&format=webp 1120w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:1440&format=webp 1440w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:1680&format=webp 1680w, https://assets.asana.biz/transform/a4b917b4-b872-4507-b0bc-038140634793/article-project-planning-resource-allocation-2x?io=transform:fill,width:2560&format=webp 2560w",
            "https://luna1.co/Download_App_Store_Badge_US.svg",
            "https://luna1.co/Google_Play_EN.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alicia Raeburn"
        ],
        "publish_date": "2024-02-13T11:00:00+00:00",
        "summary": "",
        "meta_description": "Extreme programming is a structured and tightly managed Agile method. XP developers work in pairs and use continuous testing for higher-quality software.",
        "meta_lang": "en",
        "meta_favicon": "https://brand.asana.biz/image/upload/f_auto:image,fl_preserve_transparency/v1696462482/asana_favicon_57x57.png",
        "meta_site_name": "Asana",
        "canonical_link": "https://asana.com/resources/extreme-programming-xp",
        "text": "If the term extreme programming is bringing up mental images of the X games and action sports, you’re not too far off. Extreme programming (XP) is, in fact, a pretty extreme way of programming. Similar to other Agile software development methods, XP uses adaptable, test-driven development for software engineering. But unlike other methods, extreme programming has strict rules and guiding values that govern how the work gets done.\n\nWhat is extreme programming (XP)?\n\nExtreme programming is an Agile project management methodology that targets speed and simplicity with short development cycles and less documentation. The process structure is determined by five guiding values, five rules, and 12 XP practices (which we’ll break down further on in this article).\n\nLike other Agile methods, XP is a software development methodology broken down into work sprints. Agile frameworks follow an iterative process—you complete and review the framework after every sprint, refine it for maximum efficiency, and adjust to changing requirements. Similar to other Agile methods, XP’s design allows developers to respond to customer stories, adapt, and change in real-time. But XP is much more disciplined, using frequent code reviews and unit testing to make changes quickly. It’s also highly creative and collaborative, prioritizing teamwork during all development stages.\n\nTry Asana for free\n\nExtreme programming vs. Scrum\n\nScrum is another common type of Agile methodology managed by a Scrum master. Similar to XP, Scrum runs sprints off user stories to develop new product or software features. However, XP is more rigid than Scrum, with strict rules and guidelines that encourage constant contact between developers and the customer. Also, you can use Scrum for any process that requires iteration and customer input, whereas you’d only use XP programming.\n\nWho created extreme programming?\n\nThe origins of XP date back to the late 1990’s, when Kent Beck created it to manage the development of a payroll software system for Chrysler called the C3 project. The goal with XP was (and still is) to remove the resistance to changing code within development projects. In more traditional software development methods, you’ll often leave code alone once it’s written (except for debugging). With XP, you scrutinize the code so carefully that developers may decide to re-write it entirely after a single iteration.\n\nWhen should you use extreme programming?\n\nBecause extreme programming focuses on software development, it's typically only used by engineering teams. Even in software teams, it only works in certain settings. To get the most value out of extreme programming, it’s best to use it when you:\n\nManage a smaller team. Because of its highly collaborative nature, XP works best on smaller teams of under 10 people.\n\nAre in constant contact with your customers. XP incorporates customer requirements throughout the development process, and even relies on them for testing and approval.\n\nHave an adaptable team that can embrace change (without hard feelings). By its very nature, extreme programming will often require your whole team to toss out their hard work. There are also rules that allow other team members to make changes at any time, which doesn’t work if your team members might take that personally.\n\nAre well versed in the technical aspects of coding. XP isn’t for beginners. You need to be able to work and make changes quickly.\n\nLifecycle of XP\n\nThe XP lifecycle encourages continuous integration where the team member integrates almost constantly, as frequently as hourly or daily. But the full lifecycle breaks down as follows:\n\nPull unfinished work from user stories\n\nYou prioritize the most important items\n\nBegin iterative planning\n\nIncorporate honest planning\n\nStay in constant communication with all stakeholders and empower the team\n\nRelease work\n\nReceive feedback\n\nReturn to the iterative planning stage and repeat as needed.\n\n5 values of extreme programming\n\nExtreme programming is value driven. Instead of using external motivators, XP allows your team to work in a less complicated way (focusing on simplicity and collaboration over complex designs), all based on these five values.\n\n1. Simplicity\n\nBefore starting any extreme programming work, first ask yourself: What is the simplest thing that also works? The “that works” part is a key differentiator—the simplest thing is not always practical or effective. In XP, your focus is on getting the most important work done first. This means you’re looking for a simple project that you know you can accomplish.\n\n2. Communication\n\nXP relies on quick reactivity and effective communication. In order to work, the team needs to be open and ‌honest with one another. When problems arise, you’re expected to speak up. The reason for this is that other team members will often already have a solution. And if they don’t, you’ll come up with one faster as a group than you would alone.\n\nRead: How to improve team communication: 6 strategies and tips\n\n3. Feedback\n\nLike other Agile methodologies, XP incorporates user stories and feedback directly into the process. XP’s focus is producing work quickly and simply, then sharing it to get almost immediate feedback. As such, developers are in almost constant contact with customers throughout the process. In XP, you launch frequent releases to gain insights early and often. When you receive feedback, you’ll adapt the process to incorporate it (instead of the project). For example, if the feedback relieves unnecessary lag time, you’d adjust your process to have a pair of developers improve lag time instead of adjusting the project as a whole.\n\nRead: Don’t like giving feedback? These 20 tips are for you\n\n4. Courage\n\nXP requires a certain amount of courage. You’re always expected to give honest updates on your progress, which can get pretty vulnerable. If you miss a deadline in XP, your team lead likely won’t want to discuss why. Instead, you’d tell them you missed the deadline, hold yourself accountable, and get back to work.\n\nIf you're a team lead, your responsibility at the beginning of the XP process is to set the expectation for success and define \"done.\" There is often little planning for failure because the team focuses on success. However, this can be scary, because things won’t always go as planned. But if things change during the XP process, your team is expected to adapt and change with it.\n\n5. Respect\n\nConsidering how highly XP prioritizes communication and honesty, it makes sense that respect would be important. In order for teams to communicate and collaborate effectively, they need to be able to disagree. But there are ways to do that kindly. Respect is a good foundation that leads to kindness and trust—even in the presence of a whole lot of honesty. For extreme programming, the expectations are:\n\nMutual respect between customers and the development team.\n\nMutual respect between team members.\n\nA recognition that everyone on the team brings something valuable to the project.\n\nTry Asana for free\n\n5 rules of the extreme programming methodology\n\nThe values of extreme programming are the more philosophical aspects. The rules, on the other hand, are the practical uses for how the work gets done. You’ll need both to run an effective XP team.\n\n1. Planning\n\nIn the planning stages of XP, you’re determining if the project is viable and the best fit for XP. To do this, you’ll look at:\n\nUser stories to see if they match the simplicity value and check in to ensure that the customer is available for the process. If the user story is more complex, or it’s made by an anonymous customer, it likely won’t work for XP.\n\nThe business value and priority of the project to make sure that this falls in line with “getting the most important work done first.”\n\nWhat stage of development you’re in. XP is best for early stage development, and won’t work as well for later iterations.\n\nOnce you’ve confirmed the project is viable for XP, ‌create a release schedule—but keep in mind that you should be releasing early and often to gain feedback. To do this:\n\nBreak the project down into iterations and create a plan for each one.\n\nSet realistic deadlines and a sustainable pace.\n\nShare updates as they happen, which empowers your team to be honest and transparent.\n\nShare real-time updates that help the team ‌identify, adapt, and make changes more quickly.\n\nUse a project management tool to create a Kanban board or timeline to track your progress in real-time.\n\n2. Managing\n\nOne of the key elements of XP is the physical space. XP purists recommend using an open workspace where all team members work in one open room. Because XP is so collaborative, you’ll benefit from having a space where you can physically come together. But that’s not always practical in this day and age. If you work on a remote team, consider using a platform that encourages asynchronous work for remote collaboration. This way, all members can continue to work on the project together, even if they’re not physically together.\n\nAs in other Agile methods, use daily standups meetings to check-in and encourage constant, open communication. You’ll want to use both a weekly cycle and quarterly cycle. During your quarterly cycle, you and your team will review stories that will guide your work. You’ll also study your XP process, looking for gaps or opportunities to make changes. Then, you’ll work in weekly cycles, which each start with a customer meeting. The customer chooses the user story they want programmers to work on that week.\n\nAs a manager or team lead, your focus will be on maintaining work progress, measuring the pace, shifting team members around to address bugs or issues as they arise, or changing the XP process to fit your current project and iteration. Remember, the goal of XP is to be flexible and take action, so your work will be highly focused on the team’s current work and reactive to any changes.\n\n3. Designing\n\nWhen you’re just starting out with extreme programming, begin with the simplest possible design, knowing that later iterations will make them more complex. Do not add in early functionality at this stage to keep it as bare bones as possible.\n\nXP methodology teams will often use class-responsibility-collaboration (CRC) cards to show how each object in the design interacts. By filling out each field in the card, you’ll get a visual interaction of all the functions as they relate and interact. CRC cards include:\n\nClass (collection of similar objects)\n\nResponsibilities (related to the class)\n\nCollaborators (class that interacts with this one)\n\nCRCs are useful for stimulating the process and spotting potential problems. Regardless of how you design, you’ll want to use a system that reduces potential bottlenecks. To do this, be sure you’re proactively looking for risks. As soon as a potential threat emerges, assign one to two team members to find a solution in the event that the threat takes place.\n\nRead: The project risk management process in 6 clear steps\n\n4. Coding\n\nOne of the more unique aspects of XP is that you’ll stay in constant contact with the customer throughout the coding process. This partnership ‌allows you to test and incorporate feedback within each iteration, instead of waiting until the end of a sprint. But coding rules are fairly strict in XP. Some of these rules include:\n\nAll code must meet coding standards.\n\nUsing a unit test to nail down requirements and develop all aspects of the project.\n\nProgramming as a pair—two developers work together simultaneously on the same computer. This doesn’t add any time, but rather uses double the focus to produce the highest quality results.\n\nUse continuous integrations to add new code and immediately test it.\n\nOnly one pair can update code at any given time to reduce errors.\n\nCollective code ownership—any member of the team can change your code at any time.\n\n5. Testing\n\nYou should be testing throughout the extreme programming process. All code will need to pass unit tests before it’s released. If you discover bugs during these tests, you’ll create new, additional tests to fix them. Later on‌, you’ll configure the same user story you’ve been working on into an acceptance test. During this test, the customer reviews the results to see how well you translated the user story into the product.\n\nWhat are the 12 extreme programming practices?\n\nTo further hone the process, XP also uses a set of 12 practices throughout the process. They are based on the Agile manifesto, but adapted to fit XP needs:\n\nThe planning game: XP planning is used to guide the work. The results of planning should be what you’re hoping to accomplish and by when, and what you’ll do next.\n\nCustomer tests: When you finish a new feature, the customer will develop an acceptance test to determine how close it is to their original user story.\n\nSmall releases: XP uses small, routine releases to gain insights throughout the process. Often, releases go straight to the customers, though they can happen in-house.\n\nSimple design: The XP system is designed for simplicity—you’ll produce only what is necessary and nothing more.\n\nPair programming: All programming comes from a pair of developers who sit side by side. There is no solo work in extreme programming.\n\nTest-driven development (TDD): XP’s reliance on feedback requires heavy testing. Through short cycles, programmers release automated tests and then immediately react.\n\nRefactoring: This is where you’ll pay attention to the finer details of the codebase, removing duplicates and making sure that the code is cohesive. This results in good, simple designs.\n\nCollective ownership: Any coding pair can change the code at any time, whether or not they developed it. XP produces code as a team, and everyone’s work is held to the higher collective standards.\n\nContinuous integration: XP teams don’t wait for completed iterations, they integrate constantly. Often, an XP team will integrate multiple times a day.\n\nSustainable pace: The intensity of XP works requires you to set a sustainable pace. Teams should decide how much work they can produce in this way per day and per week, and use that to set work deadlines.\n\nMetaphor: The metaphor is, quite literally, a metaphor. It’s decided as a team, and uses language to describe how the team should function. For example, we’re ants working as a collective to build up the anthill.\n\nCoding standard: XP teams follow one standard. In the same way that writers need to take on a brand’s voice to sound like the same person is always writing, XP developers code in the same, unified way so that it reads like one developer.\n\nIntense, but effective\n\nAt this point, you’ve likely gathered that extreme programming is, well, extreme. The process is rigorous and highly structured, but the results might be worth it. XP’s unique development process incorporating customer feedback and intense, collaborative programming results in high-quality software.\n\nStreamline your XP planning and management with a work management tool that updates and adapts in real-time, just as your work does.\n\nTry Asana for free"
    }
}