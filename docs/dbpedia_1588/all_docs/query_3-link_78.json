{
    "id": "dbpedia_1588_3",
    "rank": 78,
    "data": {
        "url": "https://www.sumologic.com/glossary/agile-methodology/",
        "read_more_link": "",
        "language": "en",
        "title": "Understand Agile methodology",
        "top_image": "https://assets-www.sumologic.com/logos/app/_1200x630_crop_center-center_82_none/Glossary_meta_1200x628.png?mtime=1678918641",
        "meta_img": "https://assets-www.sumologic.com/logos/app/_1200x630_crop_center-center_82_none/Glossary_meta_1200x628.png?mtime=1678918641",
        "images": [
            "https://assets-www.sumologic.com/company-logos/infor-icon-white.svg",
            "https://www.sumologic.com/img/glossary-icon.svg",
            "https://www.sumologic.com/img/toc-mobile.svg",
            "https://assets-www.sumologic.com/application-content/agile.png",
            "https://assets-www.sumologic.com/application-content/thumb-Accelerate-and-secure-your-SDLC_2024-03-13-194541_moow.png",
            "https://assets-www.sumologic.com/application-content/agile.png",
            "https://assets-www.sumologic.com/application-content/thumb-Accelerate-and-secure-your-SDLC_2024-03-13-194541_moow.png",
            "https://assets-www.sumologic.com/assets/refresh-images/footer/sumo-lockup.png",
            "https://assets-www.sumologic.com/assets/refresh-images/footer/aicpa.png",
            "https://assets-www.sumologic.com/assets/refresh-images/footer/fedramp-tm-logo-min.svg",
            "https://assets-www.sumologic.com/assets/refresh-images/footer/pci.png",
            "https://assets-www.sumologic.com/assets/refresh-images/footer/coalfire.png",
            "https://www.sumologic.com/img/email.svg",
            "https://www.sumologic.com/img/logo.svg",
            "https://assets-www.sumologic.com/logos/customer/home_hero_logo_airbnb.svg",
            "https://assets-www.sumologic.com/logos/customer/home_hero_logo_abinbev.svg",
            "https://assets-www.sumologic.com/logos/customer/home_hero_logo_pitney-bowes.svg",
            "https://assets-www.sumologic.com/logos/customer/home_hero_logo_pokemon.svg",
            "https://assets-www.sumologic.com/logos/customer/home_hero_logo_samsung.svg",
            "https://assets-www.sumologic.com/logos/customer/Grammmarly_white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2019-10-14T11:37:00-07:00",
        "summary": "",
        "meta_description": "ERound 1plore what the agile methodology is, its four pillars, and how it compares to the Waterfall methodology. Learn how Sumo Logic supports development with the Agile methodology.",
        "meta_lang": "en",
        "meta_favicon": "https://www.sumologic.com/favicon.ico",
        "meta_site_name": "Sumo Logic",
        "canonical_link": "https://www.sumologic.com/glossary/agile-methodology/",
        "text": "Waterfall vs Agile methodology: what's the difference?\n\nThe traditional software delivery method is sometimes called the Waterfall method. The Waterfall method is so named because it represents a linear, step-wise approach to software delivery. Just like the water flowing through a Waterfall travels in one direction, the workflow of a Waterfall software development project flows from one step to the next, and each step must be completed before the next one can begin. The process flow for the traditional software delivery method can be described in eight steps:\n\nIdentify a business need or opportunity\n\nGather and document software requirements\n\nSoftware and architecture design\n\nCoding and unit testing\n\nSystem testing\n\nUser acceptance testing\n\nDebug\n\nFinal delivery\n\nIn the Waterfall method, customers are involved only in the initial stage of development. Project leaders work with customers to capture their needs, then go off and build the entire product before returning it to the customers for user acceptance testing.\n\nIn contrast to the traditional Waterfall method, the Agile methodology takes an iterative and customer-focused approach to software development. Its goal is to deliver completed functional code units as frequently as possible.\n\nDevelopment teams using the Agile method usually do not build apps with traditional monolithic architecture. Instead, the agile process powers feature-driven development. Projects are divided into function units of code known as features or microservices, and the project schedule is divided into sprints. The goal of a sprint is to complete the entire delivery process for a single feature. In each sprint, developers will gather needs for that specific feature, design and code the feature, test it, get feedback from customers and test for errors before finalizing the code.\n\nSteps of the Agile Development Methodology\n\n1. Define the project scope and product requirements.\n\n2. Create a product backlog with all the necessary features and user stories.\n\n3. Plan the sprint by selecting user stories to work on.\n\n4. Conduct daily stand-up meetings to track progress and address any issues.\n\n5. Develop the features and functionalities in short iterations or sprints.\n\n6. Test the developed features to ensure they meet the acceptance criteria.\n\n7. Review the progress with stakeholders and gather feedback for continuous improvement.\n\n8. Repeat the process for each sprint, incorporating feedback and making necessary adjustments.\n\n9. Conduct a sprint retrospective to reflect on the successes and areas for improvement.\n\n10. Continue iterating on the product until the desired outcome is achieved.\n\nFour values of the Agile methodology\n\nThe original authors of the Agile Manifesto identified four values central to Agile Methodology. It is worth considering how each of these values is reflected in the Agile methodology today:\n\nIndividuals and interactions over processes and tools\n\nThis first Agile principle reflects an important belief shared by the founders of Agile: software problems are solved by teams of individuals interacting with each other, not by processes and tools. The Agile methodology encourages software engineering to work in teams, program in pairs, meet daily and interact with each other regularly as needs arise to solve problems.\n\nWorking software over comprehensive documentation\n\nFounders of the Agile methodology were frustrated that the Waterfall method would require them to write hundreds of pages of technical documentation for applications that nobody would ever read. The Agile methodology does not discourage the documentation of code wholesale, but it does encourage development teams to minimize their wasted effort by only producing documentation that drives value, especially by writing tests for the system that document its behavior.\n\nCustomer collaboration over contract negotiation\n\nThe Waterfall method encourages a contract negotiation model where software development firms enter into fixed-price contracts with the entire scope of work negotiated upfront. Changing requirements to the scope of work is discouraged, as it means modifying the original contract. Agile software delivery favors a \"time and materials\" or non-fixed funding structure that helps align customer and developer incentives and promote quality.\n\nAdaptive software development\n\nIn the Waterfall delivery method, software developers deliver projects based on requirements and scope of work that are effectively set in stone at the project's outset. There is little or no opportunity to collect customer feedback throughout the design and code development process, so building applications according to the customer's exact requirements is imperative. In the Agile methodology, frequent customer feedback drives user satisfaction by ensuring that development teams deliver work that meets user needs, even as they change.\n\nFAQs\n\nWhat is the role of a product owner in agile software development?\n\nIn agile software development, the product owner plays a crucial role as the key stakeholder, representing the voice of the customer or end-user. They are responsible for defining and prioritizing the product's features, managing the product backlog and ensuring the development team delivers value with each iteration. The product owner works closely with the development team to communicate requirements, provide clarifications and make decisions to maximize the product's value and success.\n\nWhat is a user story in agile software development?\n\nA user story in agile project management concisely describes a feature or functionality from an end-user perspective. It typically follows a simple template: \"As a [type of user], I want [some goal] so that [some reason].\" User stories help with agile planning, identify users' needs, prioritize value-based work, and deliver incremental improvements. They are a lightweight way to capture requirements and guide development, focusing on the user's requirements and expectations rather than technical details. Each user story represents a work that can be completed within a single iteration or sprint.\n\nWhat are some common challenges development teams face when implementing agile practices?\n\nSome common challenges faced by development teams when implementing agile practices include:\n\n1. Resistance to change from team members accustomed to traditional project management methods.\n\n2. Difficulty adapting to agile development's iterative and flexible nature.\n\n3. Balancing short-term delivery goals with long-term project vision and goals.\n\n4. Ensuring effective communication and collaboration among team members and stakeholders.\n\n5. Managing evolving requirements and scope changes during the development process.\n\n6. Struggling to maintain a sustainable pace of work and avoid burnout.\n\n7. Integrating agile practices with existing organizational structures and processes.\n\n8. Establishing clear roles and responsibilities within the agile team.\n\n9. Addressing skill gaps or training needs for team members transitioning to agile methodologies.\n\n10. Measuring and demonstrating the value and impact of agile practices to stakeholders and leadership.\n\nWhat is sprint planning?\n\nSprint planning is a crucial aspect of agile methodology, involving the collaborative process where the development team, product owner and scrum master come together to plan the upcoming sprint. During sprint planning, the team reviews and prioritizes the items from the product backlog, breaks them down into smaller tasks, estimates the effort required and commits to completing them within the sprint duration, typically one to four weeks.\n\nSprint planning aims to create a clear plan of what work will be done during the sprint and establish a shared understanding among team members regarding the scope and objectives. This process helps agile management foster transparency, alignment and accountability within the agile team, ultimately contributing to the successful delivery of valuable working software at the end of the sprint.\n\nHow can organizations scale an agile approach?\n\nScaling agile involves extending agile practices and principles across larger teams or organizations to ensure alignment, collaboration and efficiency in delivering value. Some common approaches to scaling agile include:\n\n1. SAFe (Scaled Agile Framework): It aligns teams around a common mission, establishes clear roles and responsibilities, and promotes coordination and synchronization through various levels of planning. Within SAFe are also Agile Release Trains (ARTs), where multiple agile teams work together on a common cadence to deliver value.\n\n2. LeSS (Large-Scale Scrum): LeSS focuses on scaling Scrum principles to accommodate multiple teams working on a single product. It emphasizes simplicity, transparency and customer-centricity while promoting collaboration, cross-functional teams and shared ownership of product development.\n\n3. Nexus: Builds on Scrum principles to scale agile delivery across multiple Scrum teams working on a single product. It provides additional practices and events to ensure integration, coordination, and alignment between teams while maintaining the core values of Scrum.\n\n4. Disciplined Agile (DA): Disciplined Agile offers a pragmatic approach to scaling agile by providing a toolkit of processes, practices and guidance, similar to the Scrum guide, that teams can tailor to their specific context. It focuses on flexibility, choice and alignment with organizational structures and project types.\n\nScaling agile requires structural changes, cultural alignment and continuous improvement."
    }
}