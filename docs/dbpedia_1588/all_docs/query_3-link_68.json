{
    "id": "dbpedia_1588_3",
    "rank": 68,
    "data": {
        "url": "https://www.planview.com/resources/guide/agile-methodologies-a-beginners-guide/",
        "read_more_link": "",
        "language": "en",
        "title": "Agile Methodologies: A Beginner’s Guide",
        "top_image": "https://media.planview.com/wp-content/uploads/2020/01/social-planview-rebrand-min.jpg",
        "meta_img": "https://media.planview.com/wp-content/uploads/2020/01/social-planview-rebrand-min.jpg",
        "images": [
            "https://media.planview.com/wp-content/uploads/2019/03/lad-scaling-agile-1200x664-c-1024x567.jpg",
            "https://media.planview.com/wp-content/uploads/2019/03/lad-scaling-agile-1200x664-c-1024x567.jpg",
            "https://media.planview.com/wp-content/uploads/2019/03/lad-lean-agile-work-delivery-1000x529-c.jpg",
            "https://media.planview.com/wp-content/uploads/2019/03/lad-lean-agile-work-delivery-1000x529-c.jpg",
            "https://media.planview.com/wp-content/uploads/2019/12/Brook_Appelbaum_7921-150x150-1-150x150.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-09-29T19:38:24+00:00",
        "summary": "",
        "meta_description": "Thinking about implementing Agile methodologies in your organization? Get an overview of Agile methodologies, their benefits, and tools that support them.",
        "meta_lang": "",
        "meta_favicon": "https://media.planview.com/favicon/favicon.ico",
        "meta_site_name": "Planview",
        "canonical_link": "https://www.planview.com/resources/guide/agile-methodologies-a-beginners-guide/",
        "text": "To understand Agile methodologies, it helps to start with Agile itself. Agile Alliance defines Agile as “the ability to create and respond to change. It is a way of dealing with, and ultimately succeeding in, an uncertain and turbulent environment.”\n\nThis idea started in 2001, with the Agile Manifesto. Seventeen software practitioners got together to identify and put into practice a new way to develop software. The Agile Manifesto characterizes Agile values as:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nYou can be (lowercase) agile without being Agile, and you can technically be practicing Agile without truly experiencing agility. Dictionary.com defines agility (of any kind) as “the power of moving quickly and easily; nimbleness,” with this secondary definition: “the ability to think and draw conclusions quickly; intellectual acuity.” Meanwhile, (uppercase) Agile describes the specific set of practices, values, and beliefs that aim to enable business agility.\n\nWe like to use the definition of business agility created by researchers of McKinsey & Company to expand on this idea, who define Agile as “the ability to quickly reconfigure strategy, structure, processes, people, and technology toward value-creating and value-protecting opportunities.” These definitions reflect that Agile itself is a mindset, not a technique. That’s where Agile methodologies come in.\n\nHow do different Agile methodologies compare to each other?\n\nScrum\n\nScrum is one of the most widely used Agile methodologies. A prescriptive framework, Scrum excels at managing iterative and incremental projects. Using the Scrum Agile methodology, a Product Owner sets a list of priorities, the Product Backlog, to be completed by a cross-functional team. The team works to deliver “potentially shippable increments” of software in 2-4-week sprints, at the end of which the Product Backlog is reevaluated and prioritized.\n\nAgile teams like Scrum because it’s easy to follow and scale. It enables management teams to identify problems early on and fosters strong, active collaboration between teams and colleagues.\n\nExtreme Programming (XP)\n\nAnother popular Agile methodology, Extreme Programming (XP) also emphasizes speed and continuous delivery. Like Scrum, XP enables closely-knit teams to deliver working software increments at frequent intervals, usually every 1-3 weeks. It relies on customers to communicate the most useful features of a software product and developers to work towards implementing that feedback.\n\nXP is frequently recommended for small teams of experienced developers that are experienced in the XP Agile methodology and comfortable collaborating with stakeholders outside of IT.\n\nLean Software Development\n\nLean software development is more flexible than Scrum or XP, with fewer strict guidelines, rules, or methods. Lean is based on a set of principles developed to ensure value and efficiency in production in the mid 20th century and has evolved into the software setting. Lean relies on five principles of Lean management:\n\nIdentify value\n\nValue stream mapping\n\nCreate continuous workflow\n\nCreate a pull system\n\nContinuous improvement\n\nLean particularly emphasizes eliminating waste. In the context of software development, that includes cutting out wasted time and unproductive tasks, efficiently using team resources, giving teams and individuals decision-making authority, and prioritizing only the features of a system that deliver true value.\n\nKanban\n\nLike other Agile methodologies, Kanban focuses on helping teams work together more effectively to enable continuous delivery of quality products. Kanban is unique, however, for offering a highly visual method for actively managing the creation of products.\n\nThe Kanban Agile methodology relies on six fundamental practices:\n\nVisualize the workflow\n\nLimit work in progress\n\nManage flow\n\nMake process policies explicit\n\nImplement feedback loops\n\nImprove collaboratively\n\nKanban achieves these practices through the use of a Kanban board. The Kanban board facilitates the visual approach to Agile using columns to represent work that is To Do, Doing, and Done. This Agile methodology improves collaboration and efficiency and helps define the best possible team workflow.\n\nCrystal\n\nThe Crystal Agile methodology focuses more on the interactions of the people involved in a project versus the tools and techniques of development. A lightweight model, Crystal emphasizes interaction, people, community, skills, communications, and talents.\n\nCrystal categorizes projects based on three criteria:\n\nTeam size\n\nSystem criticality\n\nProject priorities\n\nThe approach is similar to other Agile methodologies in its attention to early and often delivery of software, high involvement of users, and removal of red tape. Crystal’s assertion that every project is unique, however, has led to its reputation as one of the most flexible Agile methodologies.\n\nFeature-Driven Development (FDD)\n\nFeature-Driven Development, or FDD, provides a framework for product development that starts with an overall model and gets progressively more granular. Like other Agile methodologies, FDD aims to deliver working software quickly in a repeatable way. It uses the concept of “just enough design initially” (JEDI) to do so, leveraging two-week increments to run “plan by feature, design by feature, build by feature” iterations.\n\nOrganizations that practice Agile like Feature-Driven Development for its feature-centric approach and its scalability.\n\nDynamic Systems Development Method (DSDM)\n\nThe Dynamic Systems Development Method (DSDM) rounds out our list of well-known Agile methodologies. DSDM originated in the 1990s as a way to provide a common industry framework for rapid software delivery. Today, it has matured into a comprehensive Agile methodology that revolves around:\n\nBusiness needs and value\n\nActive user involvement\n\nEmpowered teams\n\nFrequent delivery\n\nIntegrated testing\n\nStakeholder collaboration\n\nThe DSDM framework is particularly useful for prioritizing requirements. It also mandates that rework is to be expected, so any development changes must be reversible. DSDM relies on sprints, similar to other Agile methodologies, and is often used in conjunction with approaches like Scrum and XP.\n\nFrameworks for Scaling Agile\n\nIn addition to these Agile methodologies, organizations also rely on frameworks for scaling Agile across the enterprise. These include the Scaled Agile Framework (SAFe®), Large Scale Scrum (LeSS), Disciplined Agile (DA), Scrum@Scale, and others. These techniques and frameworks are often built upon and add value to the Agile methodologies explained above.\n\nHow do three of the most popular enterprise Agile frameworks differ?\n\nScaled Agile Framework® (SAFe®): The Scaled Agile Framework describes itself as a “knowledge base of proven, integrated principles, practices, and competencies for achieving business agility using Lean, Agile, and DevOps.”\n\nSAFe is a well-established and rigorous approach to scaling Agile that includes planning at the team, program, and portfolio level. The framework introduced the idea of the Agile Release Train (ART) to structure work across teams of 50-125 people, as well as the Release Train Engineer (RTE) as the role at its helm. SAFe requires consistent two- and ten-week iterations, which can work well for organizations with a more established Agile practice but can prove ambitious for companies new to the practice.\n\nDisciplined Agile (DA): Disciplined Agile, formerly known as Disciplined Agile Delivery (DAD), is “a people-first, learning-oriented hybrid agile approach to IT solution delivery.” DA is less prescriptive than SAFe and oriented more as a foundational approach to Agile than a strict “recipe” for scaling Agile. It emphasizes team roles and a goal-driven approach that makes it more flexible than other scaling Agile methodologies.\n\nLarge-Scale Scrum (LeSS): As its name implies, LeSS tackles the challenge of scaling Agile through the specific lens of the scrum, helping organization figure out “how to apply the principles, purpose, elements, and elegance of Scrum in a large-scale context, as simply as possible.” LeSS uses teams as its foundational building blocks, reduces the role of management, and advocates for simplicity versus strictly defined processes. LeSS is recognized as an impactful approach for organizations that already use scrum practices and want to scale Agile in a way that is both streamlined and robust.\n\nLet’s dive a bit deeper into how the four core values stated in the Agile Manifesto are applied in Agile methodologies today.\n\nIndividuals and Interactions Over Processes and Tools\n\nWhile no one will say that having helpful, efficient processes and tools isn’t valuable in increasing the agility of your team, Agile methodologies place greater emphasis on individuals and interactions than processes and tools.\n\nHere’s why: Many of the methods before Agile relied heavily on the ceremony and discipline of a highly regimented workflow management system to maintain control over people. You might recognize this in your own workplace as unnecessarily strict rules about where or how people work, dogmatic use of a “team building” software instead of honest conversations, or other ways of maintaining control over people that don’t produce positive (financial or cultural) results.\n\nInstead, Agile methodologies value effective collaboration between people, with processes and tools only serving to support that collaboration. Put another way, Agile encourages humans to leverage the skills that only we as humans have: Emotional intelligence, creative problem-solving, and critical thinking. Tools and processes are useful for keeping us organized and saving time, but they should only serve as a way to automate tedious, repeatable tasks or share information – not take the place of real human interactions.\n\nRegardless of your industry, you can think of this value when facing any decision that might require the nuance and intimacy of a face-to-face conversation: Is this something that requires my emotional intelligence, critical thinking, or creative problem-solving? If not, automate away. If a face-to-face, human interaction would provide you with more value, then make space for that.\n\nWorking (Software) Over Comprehensive Documentation\n\nAlthough the inclusion of the word “software” in this value might sound software-specific, it actually contains a valuable concept that can be applied to virtually any type of work. This value intends to increase the pace of the development of anything (whether that’s software, a service, a consumer product, or any other offering), by emphasizing having a working product as a primary goal.\n\nHere’s why: Before Agile, software development methods required teams to create extensive documentation for everything they did.\n\nWhile disciplined and responsible, the problem with this method is that it is painstakingly slow. Teams usually wouldn’t release products until they were fully built and documented, only to learn hours after releasing them into the market that there were multiple major issues that required more building and more documentation.\n\nWith Agile methodologies, a working product, whether that product is an app, a website, or a marketing campaign, is more valuable than a perfect plan for that product.\n\nWhy? Because this gives your team infinitely more opportunity to collect and incorporate user feedback (more on this in the next section). Agile teams responsibly, but ambitiously, aim to launch things as soon as they’re ready, in as small of chunks as possible, so that they can collect more user feedback and continue to make the product better.\n\nThis value guides not only how products are created, but also how Agile teams plan, validate ideas, and delegate work.\n\nCustomer Collaboration Over Contract Negotiation\n\nRegardless of your industry, working with your customer throughout the development process is a key value in Agile methodologies, which is done by planning and producing work in small batches and then testing that work in the market.\n\nAgile organizations aim to amplify the voice of the customer and use it to guide product strategy and execution throughout the development process. This is far different than the “wait and see” approach traditionally used by organizations, in which products are created first (based on assumptions about the customer) and then user feedback is collected once the product is built and released (when it’s too late to incorporate).\n\nWhether your customer is external (an actual paying customer) or internal (your boss, who’s waiting on that presentation you’re preparing), it’s always smart to gather and incorporate feedback throughout the “development” process to ensure that the thing you’re creating is the thing they want.\n\nWorking with customers throughout the development process, instead of simply at the beginning or end of an engagement, is not only a better strategy for increasing customer satisfaction, it’s also a much more efficient and cost-effective approach to development.\n\nResponding to Change Over Following a Plan\n\nOne of the primary benefits of practicing Agile methodologies is the ability to rapidly respond to changes. Before Agile and its related methods were created, software development was managed the way other types of work were managed at that time: In long development cycles, with lots of upfront planning, little room for change, and tightly prescribed timelines for each phase of work. You can probably point to areas of your business where things are handled this way.\n\nThe problem is, even with the most data-driven estimates, teams won’t always be able to deliver work according to a specific schedule. Changes in the team, data, weather, economy, or requirements can all impact the progress of a piece of work. Not to mention, creating long-term plans (and failing to re-evaluate them over time) means you’re likely not focused on listening to what your market is telling you as you’re developing it.\n\nTeams that follow Agile methodologies realize that sticking to the plan at all costs often means ignoring valuable information and insights from the market.\n\nAgile organizations use more dynamic planning and budgeting practices to better align these practices with Lean and Agile delivery."
    }
}