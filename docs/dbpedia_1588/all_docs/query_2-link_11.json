{
    "id": "dbpedia_1588_2",
    "rank": 11,
    "data": {
        "url": "https://www.aha.io/roadmapping/guide/agile/agile-software-development",
        "read_more_link": "",
        "language": "en",
        "title": "Agile Software Development - Agile Methodology Explained",
        "top_image": "https://images.ctfassets.net/4zfc07om50my/179hsASVy1ybBOSAi5D2SZ/3d016c16e7c9bff77a9a0029e1f99b8f/agile_software_development_-_meta.jpg?w=1512&h=796&fl=progressive&q=90&fm=jpg&bg=transparent",
        "meta_img": "https://images.ctfassets.net/4zfc07om50my/179hsASVy1ybBOSAi5D2SZ/3d016c16e7c9bff77a9a0029e1f99b8f/agile_software_development_-_meta.jpg?w=1512&h=796&fl=progressive&q=90&fm=jpg&bg=transparent",
        "images": [
            "https://www.aha.io/static/cf8242d02c6571e4f9a10afe23bb90c3/56879/products.png",
            "https://www.aha.io/static/cf8242d02c6571e4f9a10afe23bb90c3/56879/products.png",
            "https://www.aha.io/static/1a8ac6992026453d78742d290e3d0323/a9f0f/solutions.png",
            "https://www.aha.io/static/1a8ac6992026453d78742d290e3d0323/a9f0f/solutions.png",
            "https://www.aha.io/static/4de8111a8e544ef5ec9ea269c71a3d8f/b0875/resources.png",
            "https://www.aha.io/static/4de8111a8e544ef5ec9ea269c71a3d8f/b0875/resources.png",
            "https://www.aha.io/static/63345e66aff03fcd3cfeeacc0259688f/bdaa4/company.jpg",
            "https://www.aha.io/static/63345e66aff03fcd3cfeeacc0259688f/bdaa4/company.jpg",
            "https://images.ctfassets.net/4zfc07om50my/5Diioku2nylnb4Rp1EtprJ/58895b6fe44d0501070d99d573703ca5/Guide-Agile-Software-Development.png?w=750&h=535&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/5Diioku2nylnb4Rp1EtprJ/58895b6fe44d0501070d99d573703ca5/Guide-Agile-Software-Development.png?w=750&h=535&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/66VZPdM5yDBLmvR4QQA2R6/4f02b41b2f559c8a8fa00040ae9b5447/Workflow_board.png?w=750&h=469&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/66VZPdM5yDBLmvR4QQA2R6/4f02b41b2f559c8a8fa00040ae9b5447/Workflow_board.png?w=750&h=469&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/5pUnQCObbm2BIrNtUAzBlr/bcda25c8ae6b88e255134fe019d5ed7a/kanban-board-large?w=750&h=469&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/5pUnQCObbm2BIrNtUAzBlr/bcda25c8ae6b88e255134fe019d5ed7a/kanban-board-large?w=750&h=469&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/5NQ1iHq15H3MzXXpGeyrKT/8e85f512cfb25525dc502da635879231/safe-pi-planning-large?w=750&h=422&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/5NQ1iHq15H3MzXXpGeyrKT/8e85f512cfb25525dc502da635879231/safe-pi-planning-large?w=750&h=422&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/3R8aAQTV49W0rMXSnpEcsz/10fedc15b33078a286a969d44c104ef5/sprint-planning-large?w=750&h=432&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/3R8aAQTV49W0rMXSnpEcsz/10fedc15b33078a286a969d44c104ef5/sprint-planning-large?w=750&h=432&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/3hJtmBEBr1OhDDn1x9zS07/442ba81a782deda586c25cc0d7428b87/sprint-retrospective-large?w=750&h=431&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/3hJtmBEBr1OhDDn1x9zS07/442ba81a782deda586c25cc0d7428b87/sprint-retrospective-large?w=750&h=431&q=90&fm=png&bg=transparent"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Aha!"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Agile software development prioritizes adaptability and responsiveness to change, enabling teams to create high-quality software in short, iterative cycles.",
        "meta_lang": "",
        "meta_favicon": "/favicon-32x32.png?v=4b9222967840d785d04c63c361279f97",
        "meta_site_name": "",
        "canonical_link": "https://www.aha.io/roadmapping/guide/agile/agile-software-development",
        "text": "What is agile software development?\n\nLast updated: May 2024\n\nAgile software development refers to a collection of methodologies and frameworks that promote adaptive planning, evolutionary development, and continuous delivery. Instead of focusing on a final output — the finished product — teams practicing agile software development prioritize working in short increments with frequent release cycles to deliver value faster.\n\nSoftware development is an adventure. And like most adventures, it is unpredictable. That is why agile philosophy centers around rapid iteration — solutions evolve organically through cross-functional collaboration between self-organizing teams. Customer satisfaction is on the horizon, with their feedback incorporated throughout the development process.\n\nStreamline agile development with Aha! Develop — try it for free.\n\nEvery organization will practice agile software development methodologies in its own way. Company culture, industry, and functional discipline all play a factor. And some groups simply gravitate towards one methodology more than others. Software developers, for example, often prefer scrum. Whereas IT groups who manage long lists of customer tickets or issues may prefer kanban.\n\nBut other functional groups within an organization find value in agile practices too. Openness to change, trusting collaboration, customer-centric thinking — these concepts easily apply to other types of work. You may have seen agile principles infused into content marketing, project management, and product management.\n\nThis guide is meant to give you an overview of agile software development — its history, evolution, and some of the challenges organizations find when implementing agile. But it is not a tactical primer for companies that are looking to overhaul workflows and “go agile.” Those types of transformations are sweeping in scope and require deep thinking about what needs to change and why.\n\nEarly agile practitioners did not prescribe a specific framework or doctrine. The goal was to empower teams with a mechanism for responding to change quickly and continuously improving. There is no “right” way to weave agile thinking into your team’s processes. But in the spirit of unencumbered innovation, we suggest taking what you need and leaving what you can.\n\nLet's explore the following:\n\nWhat is the history of agile development?\n\nWhat are the values and principles of the Agile Manifesto?\n\nWhat is an agile philosophy?\n\nBenefits of adopting an agile approach\n\nPopular agile methodologies\n\nOther common agile frameworks\n\nAgile templates\n\nAgile team roles\n\nCommon agile metrics\n\nWhat are some common issues when implementing agile?\n\nWhat is the history of agile development?\n\nAgile development is older than you think. Kanban was conceived in the 1940s. Iterative and incremental development (IID) dates back as early as the 1950s, with evidence of use by teams at NASA and IBM Federal Systems Divisions. Other adaptive methods such as Evolutionary Delivery (EVO) and Rapid Application Development (RAD) were in use through the 1970s. However, it was not until the late 1990s that agile gained widespread traction. So what pushed what we now know as agile to the forefront? Two things: Backlash against bureaucracy and colossal business change.\n\nFor decades IID, EVO, RAD, and other adaptive methods were seen as fringe and not taken seriously. Most organizations relied on the single-pass software development lifecycle known as waterfall. Waterfall defines requirements upfront and delivers projects in sequential phases. It can be effective for projects with a fixed scope, but vulnerable to failure if requirements change during development. And as anyone who has worked in technology knows — it is nearly impossible to anticipate all requirements at the outset.\n\nThe rigidity of single-pass software development created breakpoints between management and engineering teams. Do you remember the beleaguered engineer from the comic strip “Dilbert”? First published in 1989, the comic’s satirical plot points encapsulate many frustrations shared by developers who felt stifled by office politics and top-down micromanagement. The main complaint was that busy work and process were prioritized over productivity.\n\nAround that same time, new technologies emerged that enabled faster product development. Widespread access to the internet disrupted entire markets. As new software-based products and services gained traction, expectations began to change. Accelerating time-to-market became a business priority as companies struggled to survive in highly competitive marketplaces. Customers wanted products to be continuously improved with new functionality. And they wanted to be involved in suggesting what that new functionality should be.\n\nWith all of this percolating, a group of 17 software practitioners gathered in Utah in 2001. That meeting is the one most widely reported in historical accounts of the agile movement. But the group had met in Oregon in 2000 to discuss what they called “light” or “lightweight” development methodologies. No one was particularly comfortable with the potentially negative implications of “light” and so the word “agile” was agreed upon when they gathered the following year to formalize what became the Agile Manifesto.\n\nIt is worth noting that many of the original authors of the Agile Manifesto had developed their own methodologies such as Extreme Programming (XP), Crystal, and scrum by the time the group gathered in 2001. These methods, coupled with other novel approaches to programming drawn from the past, were an ideal foundation for developer communities ready to adopt a new mode of working.\n\nTop\n\nThe values and principles of Agile software development according to the Agile Manifesto\n\nThe authors of the Agile Manifesto defined four core values and 12 principles. Those values and principles are meant to guide how agile software development teams should approach their work. Together, the 16 tenets serve as the foundation for many of the agile methods teams use today — with special attention paid to flexible planning, efficient communication, very short feedback loops, and adaptive cycles:\n\n“We are uncovering better ways of developing software by doing it and helping others do it.\n\nThrough this work we have come to value:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\nWe follow these principles:\n\nOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n\nWelcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.\n\nDeliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n\nBusiness people and developers must work together daily throughout the project.\n\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\nThe most efficient and effective method of conveying information to and within the development team is face-to-face conversation.\n\nWorking software is the primary measure of progress.\n\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\nContinuous attention to technical excellence and good design enhances agility.\n\nSimplicity — the art of maximizing the amount of work not done — is essential.\n\nThe best architectures, requirements, and designs emerge from self-organizing teams.\n\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.”\n\nTop\n\nWhat is an agile philosophy?\n\nThere is Agile and then there is agile — with a little “a.” Some believe that unless you are following a certain framework or set of rules, that you are not really agile.\n\nMethod tailoring, process pragmatism, and a comfort with the messy reality of how people plan and deliver should all be welcomed by agile thinkers. What matters is embracing a flexible mindset and continuously seeking ways to improve how work is done so you can maximize the value you give to your customers.\n\nMerriam Webster defines agile as “the ready ability to move with quick easy grace.” Any team would be happy to be described that way. And ultimately, each team must choose their own path towards quick and easy grace — regardless of methodology.\n\nRelated: The Reasons To Go Agile With a Little \"a\"\n\nTop\n\nBenefits of adopting an agile software development approach\n\nThere is a reason agile is so popular — it has the potential to benefit teams in myriad ways. Here are a handful of benefits your team might experience by adopting an agile approach:\n\nIncreased transparency: Agile teams document their work. Backlogs, work in progress, status updates — it is all visualized and accessible to teams across the organization. This translates into increased knowledge sharing, alignment, and accountability.\n\nGreater adaptability: Agile teams do not fear change — they embrace it. An agile approach encourages you to think iteratively, break work into small chunks, and tackle it in kind. Heightened flexibility means you can quickly adapt to a changing market and incorporate customer feedback early and often. It is a boon for businesses and customers alike.\n\nReduced risk: Agile processes reduce waste — in terms of time, effort, and money. When you set plans months in advance and then commit capital to those plans (with a waterfall approach, for example), you risk delivering increments that are no longer timely or reflective of actual customer needs. Agile, on the other hand, encourages you to deliver what is most needed — now. Less waste, increased viability and success.\n\nMotivated teams: Agile teams have increased autonomy — to collaborate, prioritize work, and assess progress. And when teams feel like they have a say in how they get work done, individual team members are more motivated and energized.\n\nTop\n\nMost popular methodologies in agile software development\n\nAgile is an umbrella term for a philosophy that you can apply to a variety of different software development methodologies. So when we refer to an agile framework, what do we mean? Does each one adhere to the Agile Manifesto? Not quite.\n\nAll agile frameworks are rooted in the values and principles behind the Agile Manifesto. But some were defined prior to the 2001 manifesto and others came after. While each approach provides a unique set of workflows and practices, together these frameworks embody elements of the philosophy behind what we know generally as agile software development. And as teams continue to discover new and better ways to work together, new frameworks will emerge.\n\nKanban\n\nKanban is not a full-fledged methodology — it is a tactical method for managing the flow of work items with an emphasis on continuous delivery. Teams visualize work on a kanban board and follow a pull-based approach — grabbing a new task as they have bandwidth. The three core principles of kanban are to visualize what you do today, limit the amount of work in process, and optimize flow.\n\nKanban boards include columns that represent workflow statuses (e.g. \"Not started,\" \"In progress,\" and \"Done\"). User stories, features, or tasks are represented by cards on the board. Teams monitor progress across the board until work is completed according to the team's definition of done.\n\nAn example of a kanban board created in Aha! Develop\n\nLean software development\n\nLean software development (LSD) applies lean manufacturing principles and practices to software development. The key principles of LSD are to eliminate waste, ensure quality, create knowledge, defer commitment, deliver fast, respect people, and optimize the whole. Lean teams collaborate to deliver a Minimum Viable Product (MVP). Once that product is released, the team gathers customer feedback and then applies those insights to new product iterations.\n\nRelated: What is a Minimum Lovable Product?\n\nScrum\n\nScrum is an iterative and incremental agile software development framework. Unlike some agile methods, scrum is a defined framework that comes with its own rules and processes. Scrum teams operate on core pillars of transparency, inspection, and adaptation. Teams work in time-boxed sprints of two to four weeks and follow scrum ceremonies — such as sprint planning, daily scrum, sprint review, and sprint retrospectives. These ceremonies facilitate the continuous improvement and tight alignment that allow scrum teams to deliver value at a sustainable pace.\n\nRelated:\n\nWhat is kanban?\n\nAgile vs. lean\n\nWhat is scrum?\n\nTop\n\nOther common frameworks in agile software development\n\nBy far, the most popular frameworks among agile software development teams are kanban, lean, and scrum. But the table below provides an overview of a few more you may or may not have heard of.\n\nTop\n\nAgile software development templates\n\nNo matter which framework you follow, the ability to move quickly is essential to agile development. This is one reason why agile templates can be beneficial — they offer an efficient way to plan and discuss work with minimal setup. Whiteboard templates can also boost productivity by helping everyone collaborate (on- or offline) and stay aligned when changes happen fast. Try the agile templates below to get started.\n\nBring your agile team together in Aha! software. Start your free trial.\n\nKanban template\n\nThis kanban template can help you stay nimble and manage agile software development work in increments. You can easily customize this board to fit your existing workflows by adding columns and cards — then keep it up-to-date as you go along to drive alignment and visibility into work in progress. Using a kanban board is also helpful for identifying bottlenecks and finding ways to improve.\n\nTop\n\nAgile team roles\n\nThe specific roles and titles on agile software development teams will depend on the chosen methodology and factors like the size of your organization. But some job functions are common to most agile teams, regardless of methodology. Here are four roles (and their accompanying titles) that you can expect to find on most agile teams:\n\nTeam lead, scrum master (scrum), team coach, project lead This role guides the team, connects them to necessary resources, and helps remove roadblocks. This role is not necessarily the same as a team's manager. Scrum masters, for example, are considered leaders but not people managers.\n\nTeam members, engineers, development team These folks deliver the work. Team members can include developers, quality assurance (QA), user experience (UX) designers, and anyone else responsible for product planning, design, development, testing, and delivery.\n\nProduct owner (scrum), product manager This person represents the voice of the customer and champions the product vision. They manage and prioritize the product backlog, write user stories, and ensure that development work aligns with the product roadmap.\n\nStakeholders These folks provide feedback and share insights throughout the development process. Stakeholders are not part of the core agile team but maintain a continued interest and investment in the product's success. Examples of stakeholders include end users, people funding the product, and other teams within your organization such as sales and business analysis.\n\nRelated: What are scrum roles?\n\nTop\n\nCommon metrics for measuring agile software development success\n\nAgile encourages flexibility, not foolhardiness. You still need to establish clear metrics for success and track and analyze output. You want to repeat your successes and spot opportunities to make adjustments.\n\nCommon agile metrics and agile reports include:\n\nControl chart: Time spent working on different issues during a sprint (measured by lead time and cycle time) to predict future performance.\n\nCycle time: Time spent actively working on an issue from start to finish, including time spent on reopened issues.\n\nDeployment frequency: How often new code is deployed.\n\nEscaped defects: Number of bugs discovered after a release enters production, which indicates weaknesses in your quality assurance (QA) processes.\n\nFailed deployments: Number of failed deployments in a given time frame, an indicator of code stability.\n\nLead time: Total time an issue exists — from the moment it is initially logged until work is completed.\n\nSprint and release burndown charts: The team's progress toward completing all items in a particular sprint or release.\n\nVelocity: Average amount of work completed in a given sprint.\n\nAn example of a sprint burndown chart created in Aha! Develop.\n\nTop\n\nWhat are some common issues when implementing agile?\n\nLet’s start with some of the common tactical issues that development teams face when implementing agile:\n\nFixed time, resources, scope, and quality\n\nLack of sponsor support\n\nLack of overall product design\n\nProduct owner role is not properly filled\n\nScrum master is also a contributor\n\nProblem-solving in daily standups\n\nAttempting to take on too much in an iteration\n\nAdding stories to an iteration in progress\n\nAdding unrelated tasks to sprints\n\nAllowing technical debt to build up\n\nDeveloper burnout\n\nIf you have experienced this hit list of pain before, then you likely know that agile itself is rarely the issue. That is because (as we have reiterated a few times so far) agile is a philosophical approach to work.\n\nSome organizations choose to slowly wade into the agile world by choosing a hybrid approach. This refers to an agile software development framework combined with a traditional waterfall (so-called “wagile”) or project-based development structure. Hybrid agile can be a helpful transitional path and some companies may find that it is a lasting solution for their teams.\n\nSome even go so far as creating their own agile frameworks. UnitedHealth Group established the Optum Scalable Agile Method (OSAM), which is a modified application of SAFe®. According to a slide presentation that shares some of their challenges with implementing agile at scale, one of Optum’s largest agile portfolios has more than six release trains, 35 scrum teams, and hundreds of teammates. OSAM offered flexibility to evolve a massive organization over time.\n\nOthers face challenges when trying to adhere strictly to one framework. So you may find that your team does better with a blended approach. Blended agile refers to two or more established agile frameworks used together. For example, “scrumban” blends the structure of scrum with the flexibility and visualization of kanban.\n\nIn order to implement agile, you have to fundamentally change the way people think, operate as individual contributors, and collaborate as teammates. The larger and more established an organization is, the more difficult it can be to change “old guard” mentalities and processes. The collective aim should be to critically assess your approach before you venture into the details.\n\nThe benefits of adopting an agile approach are often worth the effort of clearing these hurdles. Agile brings quicker release cycles and higher quality code — leading to increased customer satisfaction and happier teams. Your team can end up saving valuable time and resources while creating products that customers love."
    }
}