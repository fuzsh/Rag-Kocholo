{
    "id": "dbpedia_1588_0",
    "rank": 95,
    "data": {
        "url": "https://www.smartsheet.com/agile-vs-scrum-vs-waterfall-vs-kanban",
        "read_more_link": "",
        "language": "en",
        "title": "What's the Difference? Agile vs Scrum vs Waterfall vs Kanban",
        "top_image": "https://www.smartsheet.com/sites/default/files/content-center/all-about-agile-vs-scrum-vs-waterfall-vs-kanban.jpg",
        "meta_img": "https://www.smartsheet.com/sites/default/files/content-center/all-about-agile-vs-scrum-vs-waterfall-vs-kanban.jpg",
        "images": [
            "https://www.smartsheet.com/sites/default/files/smartsheet-logo-blue-new.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500-smartsheet-platform.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_automate-workflow.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_messaging.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_dashboard.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_proofing.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_administration.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_integrations_1.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_brandfolder.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_resource-management.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_control-center.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_conditional-formatting.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_bridge.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_workapps.svg",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-12/merchandising-quarterly-disclosures-small_0.png?itok=BDeYeVaF 384w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/solution-category-project-portfolio-management.png?itok=JAc-ozpf 500w, /sites/default/files/styles/900px/public/2023-08/solution-category-project-portfolio-management.png?itok=zIQVdmuS 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/solution-category-marketing-and-creative.png?itok=wJhsSWm8 500w, /sites/default/files/styles/900px/public/2023-08/solution-category-marketing-and-creative.png?itok=Kg-g7KBH 600w",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_project-management.svg",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_report-management.svg",
            "https://www.smartsheet.com/sites/default/files/2024-07/icon-blue-500-franchise.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_b2b.svg",
            "https://www.smartsheet.com/sites/default/files/2023-10/icon-blue-500_pm-methodologies.svg",
            "https://www.smartsheet.com/sites/default/files/2023-09/icon_blue-500-creative-operations.svg",
            "https://www.smartsheet.com/sites/default/files/2023-11/icon-blue-500_mobilizer_0.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_government.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_construction.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_finance-accounting.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_education.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_non-profit.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_enterprise.svg",
            "https://www.smartsheet.com/sites/default/files/2024-01/icon-blue-500_retail_0.svg",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-08/merchandising-ai.png?itok=OprDSOVq 384w",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/2023-08/merchandising-voice-of-the-customer.png?itok=ZFKQNw5z 384w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2024-06/ENGAGE_Seattle_2024_Header%20768x216.png?itok=4Puc5zrP 500w, /sites/default/files/styles/900px/public/2024-06/ENGAGE_Seattle_2024_Header%20768x216.png?itok=WFhlvNDQ 768w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/merchandising-pm-templates.png?itok=rK5EE_iq 500w, /sites/default/files/styles/900px/public/2023-08/merchandising-pm-templates.png?itok=Ps-D0sL2 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/dashboard-gallery.png?itok=0wt_QPh_ 500w, /sites/default/files/styles/900px/public/2023-08/dashboard-gallery.png?itok=hAkjxao8 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2023-08/smartsheet-api.png?itok=vx2kbiw6 500w, /sites/default/files/styles/900px/public/2023-08/smartsheet-api.png?itok=f31xFLUM 600w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2024-01/PM-guide-101.png?itok=rnEtcSOg 500w, /sites/default/files/styles/900px/public/2024-01/PM-guide-101.png?itok=yejuKtbe 900w, /sites/default/files/styles/1300px/public/2024-01/PM-guide-101.png?itok=WepZhZD- 1081w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/2020-04/18-Smartsheet-Agile-Project-Management-E-Book-Landing-Page-Image.png?itok=_VcdCH4l 500w, /sites/default/files/styles/900px/public/2020-04/18-Smartsheet-Agile-Project-Management-E-Book-Landing-Page-Image.png?itok=J3Gym94G 760w",
            "https://www.smartsheet.com/sites/default/files/styles/900px/public/agile-lifecycle_0.png?itok=iLb_Oq-Y 446w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/roles-in-scrum%402x.png?itok=xf3Xe6Rr 500w, /sites/default/files/styles/900px/public/roles-in-scrum%402x.png?itok=acXEP26- 900w, /sites/default/files/styles/1300px/public/roles-in-scrum%402x.png?itok=VpyA2x_8 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/scrum-flow%402x.png?itok=U0ChZTpa 500w, /sites/default/files/styles/900px/public/scrum-flow%402x.png?itok=lz4jVcdy 900w, /sites/default/files/styles/1300px/public/scrum-flow%402x.png?itok=6N0zxTfV 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/burndown-chart%402x.jpg?itok=KeNL6SNz 500w, /sites/default/files/styles/900px/public/burndown-chart%402x.jpg?itok=bh_zimYo 900w, /sites/default/files/styles/1300px/public/burndown-chart%402x.jpg?itok=Ngud7SrM 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/waterfall%402x.png?itok=6joEAelK 500w, /sites/default/files/styles/900px/public/waterfall%402x.png?itok=66BApSdm 900w, /sites/default/files/styles/1300px/public/waterfall%402x.png?itok=QEzISIit 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/kanban-board%402x.png?itok=v8VdYHT4 500w, /sites/default/files/styles/900px/public/kanban-board%402x.png?itok=gJx7AACl 900w, /sites/default/files/styles/1300px/public/kanban-board%402x.png?itok=lgaiQP5B 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/matrix-scrum-agile%402x.gif?itok=sGxSx5L- 500w, /sites/default/files/styles/900px/public/matrix-scrum-agile%402x.gif?itok=LKJlsYId 900w, /sites/default/files/styles/1300px/public/matrix-scrum-agile%402x.gif?itok=PhzRqK3F 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/matrix-scrum-kanban%402x.gif?itok=747OEZnZ 500w, /sites/default/files/styles/900px/public/matrix-scrum-kanban%402x.gif?itok=Bcqa_Kpb 900w, /sites/default/files/styles/1300px/public/matrix-scrum-kanban%402x.gif?itok=oLt1guEM 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/matrix-waterfall-agile%402x.gif?itok=uZW3Muge 500w, /sites/default/files/styles/900px/public/matrix-waterfall-agile%402x.gif?itok=D_AUpRaE 900w, /sites/default/files/styles/1300px/public/matrix-waterfall-agile%402x.gif?itok=fARF2Wlw 960w",
            "https://www.smartsheet.com/sites/default/files/styles/500px/public/matrix-kanban-agile%402x.gif?itok=rUfQz915 500w, /sites/default/files/styles/900px/public/matrix-kanban-agile%402x.gif?itok=l9bGgvNZ 900w, /sites/default/files/styles/1300px/public/matrix-kanban-agile%402x.gif?itok=x2u5_vSB 960w",
            "https://www.smartsheet.com/sites/default/files/2022-10/smartsheet-logo-horizontal.svg",
            "https://www.smartsheet.com/sites/default/files/styles/medium/public/2023-08/merchandising-ai-footer.png?itok=9E-N4jmA 220w, /sites/default/files/styles/large/public/2023-08/merchandising-ai-footer.png?itok=kxtSjMJz 480w",
            "https://www.smartsheet.com/sites/default/files/styles/medium/public/2024-06/ENGAGE_Seattle_2024_Footer%20480x135.png?itok=0_FVAvgS 220w, /sites/default/files/styles/large/public/2024-06/ENGAGE_Seattle_2024_Footer%20480x135.png?itok=576blAFp 480w",
            "https://www.smartsheet.com/sites/default/files/Download_on_the_App_Store_Badge_US-UK_135x40_0_0.svg",
            "https://www.smartsheet.com/sites/default/files/google-play-badge-English.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kate Eby"
        ],
        "publish_date": "2017-02-15T11:26:00",
        "summary": "",
        "meta_description": "What's the difference between Agile vs Scrum vs Waterfall vs Kanban? Here's everything you need to know about these project management methodologies.",
        "meta_lang": "en",
        "meta_favicon": "/sites/default/files/favicons/apple-touch-icon.png",
        "meta_site_name": "Smartsheet",
        "canonical_link": "https://www.smartsheet.com/agile-vs-scrum-vs-waterfall-vs-kanban",
        "text": "Agile Methodology\n\nWhat Is Agile?\n\nAgile software development is based on an incremental, iterative approach. Instead of in-depth planning at the beginning of the project, Agile methodologies are open to changing requirements over time and encourages constant feedback from the end users. Cross-functional teams work on iterations of a product over a period of time, and this work is organized into a backlog that is prioritized based on business or customer value. The goal of each iteration is to produce a working product.\n\nIn Agile methodologies, leadership encourages teamwork, accountability, and face-to-face communication. Business stakeholders and developers must work together to align the product with customer needs and company goals.\n\nAgile refers to any process that aligns with the concepts of the Agile Manifesto. In February 2001, 17 software developers met in Utah to discuss lightweight development methods. They published the Manifesto for Agile Software Development, which covered how they found “better ways of developing software by doing it and helping others do it” and included four values and 12 principles. The Agile Manifesto is a dramatic contrast to the traditional text A Guide to the Project Management Body of Knowledge (PMBOK® Guide) and standards.\n\nProject Management Guide\n\nYour one-stop shop for everything project management\n\nReady to get more out of your project management efforts? Visit our comprehensive project management guide for tips, best practices, and free resources to manage your work more effectively.\n\nView the guide\n\n12 Principles of Agile Methodology\n\nThe Agile Manifesto lists 12 principles to guide teams on how to execute with agility. These are the principles:\n\nOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n\nWelcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.\n\nDeliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale.\n\nBusiness people and developers must work together daily throughout the project.\n\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\nThe most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n\nWorking software is the primary measure of progress.\n\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\nContinuous attention to technical excellence and good design enhances agility.\n\nSimplicity -- the art of maximizing the amount of work not done -- is essential.\n\nThe best architectures, requirements, and designs emerge from self-organizing teams.\n\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\n\nAdvantages of Agile\n\nAgile evolved from different lightweight software approaches in the 1990s and is a response to some project managers’ dislike of the rigid, linear Waterfall methodology. It focuses on flexibility, continuous improvement, and speed.\n\nHere are some of the top advantages of Agile:\n\nChange is embraced: With shorter planning cycles, it’s easy to accommodate and accept changes at any time during the project. There is always an opportunity to refine and reprioritize the backlog, letting teams introduce changes to the project in a matter of weeks.\n\nEnd-goal can be unknown: Agile is very beneficial for projects where the end-goal is not clearly defined. As the project progresses, the goals will come to light and development can easily adapt to these evolving requirements.\n\nFaster, high-quality delivery: Breaking down the project into iterations (manageable units) allows the team to focus on high-quality development, testing, and collaboration. Conducting testing during each iteration means that bugs get identified and solved more quickly. And this high-quality software can be delivered faster with consistent, successive iterations.\n\nStrong team interaction: Agile highlights the importance of frequent communication and face-to-face interactions. Teams work together and people are able to take responsibility and own parts of the projects.\n\nCustomers are heard: Customers have many opportunities to see the work being delivered, share their input, and have a real impact on the end product. They can gain a sense of ownership by working so closely with the project team.\n\nContinuous improvement: Agile projects encourage feedback from users and team members throughout the whole project, so lessons learned are used to improve future iterations.\n\nTips and best practices for your next project using the Agile methodology.\n\nLearn all there is to know about Agile project management and tips to help you start implementing Agile PM best practices.\n\nGet the free e-book to implement my Agile best practices\n\nDisadvantages of Agile\n\nWhile the level of flexibility in Agile is usually a positive, it also comes with some trade-offs. It can be hard to establish a solid delivery date, documentation can be neglected, or the final product can be very different than originally intended.\n\nHere are some of the disadvantages of Agile:\n\nPlanning can be less concrete: It can sometimes be hard to pin down a solid delivery date. Because Agile is based on time-boxed delivery and project managers are often reprioritizing tasks, it’s possible that some items originally scheduled for delivery may not be complete in time. And, additional sprints may be added at any time in the project, adding to the overall timeline.\n\nTeam must be knowledgeable: Agile teams are usually small, so team members must be highly skilled in a variety of areas. They also must understand and feel comfortable with the chosen Agile methodology.\n\nTime commitment from developers: Agile is most successful when the development team is completely dedicated to the project. Active involvement and collaboration is required throughout the Agile process, which is more time consuming than a traditional approach. It also means that the developers need to commit to the entire duration of the project.\n\nDocumentation can be neglected: The Agile Manifesto prefers working software over comprehensive documentation, so some team members may feel like it’s less important to focus on documentation. While comprehensive documentation on its own does not lead to project success, Agile teams should find the right balance between documentation and discussion.\n\nFinal product can be very different: The initial Agile project might not have a definitive plan, so the final product can look much different than what was initially intended. Because Agile is so flexible, new iterations may be added based on evolving customer feedback, which can lead to a very different final deliverable.\n\nThe Agile Development Cycle\n\nHere are the phases in the Agile development cycle. It’s important to note that these phases shouldn’t happen in succession; they are flexible and always evolving. Many of these phases happen in parallel.\n\nPlanning: Once an idea is deemed viable and feasible, the project team comes together and works to identify features. The goal of this phase is to break down the idea into smaller pieces of work (the features) then to prioritize each feature and assign it to an iteration.\n\nRequirements analysis: This phase involves many meetings with managers, stakeholders, and users to identify business requirements. The team needs to gather information like who will use the product and how they will use it. These requirements must be quantifiable, relevant, and detailed.\n\nDesign: The system and software design is prepared from the requirements identified in the previous phase. The team needs to think about what the product or solution will look like. The test team also comes up with a test strategy or plan to proceed.\n\nImplementation, coding or development: This phase is all about creating and testing features, and scheduling iterations for deployment (following the iterative and incremental development approach [IID]). The development phase starts with iteration 0, because there are no features being delivered. This iteration lays down the foundation for development, with tasks like finalizing contracts, preparing the environments, and funding.\n\nTesting: Once the code has been developed, it is tested against the requirements to make sure the product is actually solving customer needs and matching user stories. During this phase, unit testing, integration testing, system testing, and acceptance testing are done.\n\nDeployment: After testing, the product is delivered to customers for them to use. However, deployment isn’t the end of the project. Once customers start using the product, they may run into new problems that the project team will need to address.\n\nMethodologies That Are Used to Implement Agile\n\nAgile is a framework and there are a number of specific methods within the Agile movement. You can think of these as different flavors of Agile:\n\nExtreme Programming (XP): Also known as XP, Extreme Programming is a type of software development intended to improve quality and responsiveness to evolving customer requirements. The principles of XP include feedback, assuming simplicity, and embracing change.\n\nFeature-driven development (FDD): This iterative and incremental software development process blends industry best practices into one approach. There are five basic activities in FDD: develop overall model, build feature list, plan by feature, design by feature, and build by feature.\n\nAdaptive system development (ASD): Adaptive system development represents the idea that projects should always be in a state of continuous adaptation. ASD has a cycle of three repeating series: speculate, collaborate, and learn.\n\nDynamic Systems Development Method (DSDM): This Agile project delivery framework is used for developing software and non-IT solutions. It addresses the common failures of IT projects, like going over budget, missing deadlines, and lack of user involvement. The eight principles of DSDM are: focus on the business need, deliver on time, collaborate, never compromise quality, build incrementally from firm foundations, develop iteratively, communicate continuously and clearly, and demonstrate control.\n\nLean Software Development (LSD): Lean Software Development takes Lean manufacturing and Lean IT principles and applies them to software development. It can be characterized by seven principles: eliminate waste, amplify learning, decide as late as possible, deliver as fast as possible, empower the team, build integrity in, and see the whole.\n\nKanban: Kanban, meaning “visual sign” or “card” in Japanese, is a visual framework to implement Agile. It promotes small, continuous changes to your current system. Its principles include: visualize the workflow, limit work in progress, manage and enhance the flow, make policies explicit, and continuously improve.\n\nCrystal Clear: Crystal Clear is part of the Crystal family of methodologies. It can be used with teams of six to eight developers and it focuses on the people, not processes or artifacts. Crystal Clear requires the following: frequent delivery of usable code to users, reflective improvement, and osmotic communication preferably by being co-located.\n\nScrum: Scrum is one of the most popular ways to implement Agile. It is an iterative software model that follows a set of roles, responsibilities, and meetings that never change. Sprints, usually lasting one to two weeks, allow the team to deliver software on a regular basis.\n\nOther Practices in Agile\n\nThere are many other practices and frameworks that are related to Agile. They include:\n\nAgile Modeling (AM): Agile modeling is used to model and document software systems and is a supplement to other Agile methodologies like Scrum, Extreme Programming (XP), and Rational Unified Process (RUP). AM is not a complete software process on its own. It can help improve models with code, but it doesn’t include programming activities.\n\nRational Unified Process (RUP): Created by the Rational Software Corporation, a division of IBM, RUP is an iterative, adaptive framework for software development. According to Rational, RUP is like an online mentor that provides guidelines, templates, and examples for program development. The key aspects of RUP include a risk-driven process, use case focused development, and architecture-centric design.\n\nLean vs Agile: Lean development focuses on eliminating and reducing waste (activities that don’t add any value). Lean development takes the principles from Lean manufacturing and applies them to software development. These principles are very similar to Agile, however Lean takes it one step further. In the development phase, you select, plan, develop, test, and deploy only one feature before you repeat the process for the next feature.\n\nTest-Driven Development (TDD): Test-driven development relies on repetitive, short development cycles. First, a developer writes an (initially failing) automated test case for a new feature and quickly adds a test with the minimum amount of code to pass that test. Then, he refactors the new code to acceptable standards.\n\nScaled Agile Framework (SAFe trademark logo): The Scaled Agile Framework is a very structured method to help large businesses get started with adopting Agile. SAFe is based on Lean and Agile principles and tackles tough issues in big organizations, like architecture, integration, funding, and roles at scale. SAFe has three levels: team, program, and portfolio.\n\nRapid Application Development (RAD): RAD’s approach to software development puts more emphasis on development than planning tasks. It follows an incremental model, where each component is developed in parallel. The phases in RAD are: business modeling, data modeling, process modeling, application generation, and testing and turnover.\n\nEmpirical Control Method: With Agile software development, you can use an Empirical Control Method, which means that you make decisions based on the realities you observe in the actual project. The empirical model of process control has three parts: visibility, inspection, and adaption.\n\nHow to Estimate Budgets in Agile\n\nWithout in-depth, upfront planning, many project managers are unsure of how to calculate the cost and budget of an Agile project.\n\nEstimating the cost before the project even starts can always be challenging, regardless of which project methodology you use. However, in an Agile project, you can tie the amount of time the project will take with its total cost.\n\nFirst, create a burndown chart and use the burndown rate to estimate how many sprints will be in your project and when the project will end. Then, calculate how much the team will cost based on their hourly rates. Multiply each person’s rate by the number of working hours per week, then multiply that by the number of weeks in a sprint. Once you estimate the initial budget for your team, you can add any other costs, like technology, travel, or equipment.\n\nYou could also break down each user story into tasks. Once you have an idea of how many hours it will take to complete each task, you can estimate the project budget.\n\nAnd lastly, you could use planning poker to estimate the effort required for development goals. Planning poker is a consensus-based, gamified technique for estimating the effort of development goals. Each team member makes estimates by playing numbered cards face-down on the table, instead of saying it out loud. The cards are then revealed and the estimates discussed with the whole team.\n\nAgile and Pair Programming\n\nPair programming (also known as “pairing”) is part of the Extreme Programming (XP) practices. It is when two programmers share a single workstation, which includes sharing one screen, keyboard, and mouse. The purpose of this technique is to encourage better communication, clarification of the problem, and understanding of the solution. Pairing is often used in Agile projects to quickly deliver high-quality products, but is it always required?\n\nThe answer depends on your programmers, company, and goals. For some projects and programmers, pairing might improve productivity. However, it may not always be appropriate for every project. The best thing to do is experiment and see if it works for you.\n\nHow Agile Addresses Software Requirements\n\nAgile helps development teams focus on customers’ most important requirements as quickly as possible. With continuous feedback and frequent face-to-face interactions, the project team and stakeholders understand and prioritize the right requirements.\n\nAgile teams use backlogs with user stories to manage documents and requirements. Before an iteration begins, the team agrees on which requirements they should meet with the next delivery. This collaborative approach ensures that the most important features get prioritized. And, requirements are continuously updated throughout the project as new information is surfaced.\n\nCan You Use Agile for Projects Outside of Software?\n\nWhile Agile was traditionally created for software development, it can also be used in many other projects and industries.\n\nIt’s important to remember that Agile software development was born from the principles of Lean manufacturing and organizational learning. These ideas weren’t based on software to begin with. And, many practices in Agile, like stand-up meetings and visual management, are so common and can apply to any industry.\n\nThere are not many case studies of teams using Agile for things outside of software, but there are a couple. For example, Kate Sullivan, a corporate lawyer on The Lonely Planet legal team, has transformed the legal affairs service delivery with Agile. The team uses whiteboards and cards, morning stand-up meetings, prioritization, weekly iterations, and regular retrospectives.\n\nAgile can definitely be applied to projects outside of software development, you just have to find the right method and approach for your needs. You can start with boards and cards, a work backlog, stand-up meetings, or iterations (weekly planning meetings) to see how your team responds.\n\nHow to Get Started with Agile\n\nA simple way to get started with Agile is to incorporate daily stand-up meetings into your project. Daily stand-up meetings are easy to incorporate into any other project methodology you may already be using (even Waterfall) and don’t require any training or knowledge transfer. Meet at the same spot every day for about ten minutes and have everyone talk about what they worked on the day before, what they’ll work on today, and any roadblocks.\n\nIf you want to make the complete switch to Agile all at once, you may want to start with understanding why the team and organization want to make this change. What is and isn’t working? What are they looking to improve? Then, you could conduct an Agile assessment, getting a complete view of the people, skills, and technologies used.\n\nWhichever route you choose, remember that Agile is flexible in its very nature. There is no wrong or right way to get started with Agile. Do what works for you and your team.\n\nSmartsheet's newest view, Card View, gives Agile teams a more highly-visual way to work, communicate, and collaborate in Smartsheet. Card View enables you to focus attention with rich cards, give perspective with flexible views, and prioritize and adjust work more visually. Display information on cards including custom fields, images, and color coding to better focus your team’s attention. Categorize cards into lanes to organize your work more visually.\n\nLearn More About Smartsheet for Software Development\n\nScrum Methodology\n\nWhat Is Scrum Project Management?\n\nScrum is a subset of Agile and one of the most popular process frameworks for implementing Agile. It is an iterative software development model used that leverages incremental processes included in a larger framework that use cross-functional teams to meet goals and adapt to changes. Scrum aims to establish small pieces of a release faster in fixed-length iterations, called sprints, that last one to two weeks long. This allows the team to ship software on a regular cadence. At the end of each sprint, stakeholders and team members meet to plan next steps.\n\nScrum follows a set of roles, responsibilities, and meetings that never change. For example, Scrum calls for four ceremonies that provide structure to each sprint: sprint planning, daily stand-up, sprint demo, and sprint retrospective. During each sprint, the team will use visual artifacts like task boards or burndown charts to show progress and receive incremental feedback.\n\nThis type of project management results in a greater responsiveness to customers, lower costs of development, job satisfaction, and more immediate returns. Scrum is not a linear process, but rather, a fluid practice that takes many moving parts, teams, and goals into consideration as it progresses.\n\nJeff Sutherland created the Scrum process in 1993, taking the term “Scrum” from an analogy in a 1986 study by Takeuchi and Nonaka published in the Harvard Business Review. In the study, Takeuchi and Nonaka compare high-performing, cross-functional teams to the Scrum formation used by Rugby teams. The original context for this was manufacturing, but Sutherland, along with John Scumniotales and Jeff McKenna, adapted the model for software development.\n\nAdvantages of Scrum\n\nScrum is a highly prescriptive framework with specific roles and ceremonies. While it can be a lot to learn, these rules have a lot of advantages. The benefits of Scrum include:\n\nMore transparency and project visibility: With daily stand-up meetings, the whole team knows who is doing what, eliminating many misunderstandings and confusion. Issues are identified in advance, allowing the team to resolve them before they get out of hand.\n\nIncreased team accountability: There is no project manager telling the Scrum Team what to do and when. Instead, the team collectively decides what work they can complete in each sprint. They all work together and help each other, improving collaboration and empowering each team member to be independent.\n\nEasy to accommodate changes: With short sprints and constant feedback, it’s easier to cope with and accommodate changes. For example, if the team discovers a new user story during one sprint, they can easily add that feature to the next sprint during the backlog refinement meeting.\n\nIncreased cost savings: Constant communication ensures the team is aware of all issues and changes as soon as they arise, helping to lower expenses and increase quality. By coding and testing features in smaller chunks, there is continuous feedback and mistakes can be corrected early on, before they get too expensive to fix.\n\nDisadvantages of Scrum\n\nWhile Scrum offers some concrete benefits, it also has some downsides. Scrum requires a high level of experience and commitment from the team and projects can be at risk of scope creep.\n\nHere are the disadvantages of Scrum:\n\nRisk of scope creep: Some Scrum projects can experience scope creep due to a lack of specific end date. With no completion date, stakeholders may be tempted to keep requesting additional functionality.\n\nTeam requires experience and commitment: With defined roles and responsibilities, the team needs to be familiar with Scrum principles to succeed. Because there are no defined roles in the Scrum Team (everyone does everything), it requires team members with technical experience. The team also needs to commit to the daily Scrum meetings and to stay on the team for the duration of the project.\n\nThe wrong Scrum Master can ruin everything: The Scrum Master is very different from a project manager. The Scrum Master does not have authority over the team; he or she needs to trust the team they are managing and never tell them what to do. If the Scrum Master tries to control the team, the project will fail.\n\nPoorly defined tasks can lead to inaccuracies: Project costs and timelines won’t be accurate if tasks are not well defined. If the initial goals are unclear, planning becomes difficult and sprints can take more time than originally estimated.\n\nRoles in Scrum\n\nThere are three specific roles in Scrum. They are:\n\nProduct Owner: The Scrum Product Owner has the vision of what he or she wants to build and conveys that vision to the team. The Product Owner focuses on business and market requirements, prioritizing all the work that needs to be done. He or she builds and manages the backlog, provides guidance on which features to ship next, and interacts with the team and other stakeholders to make sure everyone understands the items in the product backlog. The Product Owner is not a project manager. Instead of managing the status and progress, his or her job is to motivate the team with a goal and vision.\n\nScrum Master: Often considered the coach for the team, the Scrum Master helps the team do their best possible work. This means organizing meetings, dealing with roadblocks and challenges, and working with the Product Owner to ensure the product backlog is ready for the next sprint. The Scrum Master also makes sure the team follows the Scrum process. He or she doesn’t have authority over the team members, but he or she does have authority over the process. For example, the Scrum Master can’t tell someone what to do, but could propose a new sprint cadence.\n\nScrum Team: The Scrum Team is comprised of five to seven members. Everyone on the project works together, helps each other, and shares a deep sense of camaraderie. Unlike traditional development teams, there are not distinct roles like programmer, designer, or tester. Everyone completes the set of work together. The Scrum Team owns the plan for each sprint; they anticipate how much work they can complete in each iteration.\n\nSteps in the Scrum Process\n\nThere are a specific, unchanging set of steps in the Scrum flow. They include:\n\nProduct backlog: The Product Owner and Scrum Team meet to prioritize the items on the product backlog (the work on the product backlog comes from user stories and requirements). The product backlog is not a list of things to be completed, but rather it is a list of all the desired features for the product. The development team then pulls work from the product backlog to complete during each sprint.\n\nSprint planning: Before each sprint, the Product Owner presents the top items on the backlog to the team in a sprint planning meeting. The team then chooses which work they can complete during the sprint and moves the work from the product backlog to the sprint backlog (which is a list of tasks to complete in the sprint).\n\nBacklog refinement/grooming: At the end of one sprint, the team and Product Owner meet to make sure the backlog is ready for the next sprint. The team may remove user stories that aren’t relevant, create new stories, reassess the priority of stories, or split user stories into smaller tasks. The purpose of this “grooming” meeting is to ensure the backlog only contains items that are relevant and detailed, and that meet the project’s objectives.\n\nDaily Scrum meetings: The Daily Scrum is a 15-minute stand-up meeting where each team member talks about their goals and any issues that have come up. The Daily Scrum happens every day during the sprint and helps keep the team on track.\n\nSprint review meeting: At the end of each sprint, the team presents the work they have completed at a sprint review meeting. This meeting should feature a live demonstration, not a report or a PowerPoint presentation.\n\nSprint retrospective meeting: Also at the end of each sprint, the team reflects on how well Scrum is working for them and talks about any changes that need to be made in the next sprint. The team may talk about what went well during the sprint, what went wrong, and what they could do differently.\n\nIn addition to roles and ceremonies, Scrum projects also include certain tools and artifacts. For example, the team uses a Scrum board to visualize the backlog or a burndown chart to show outstanding work. The most common artifacts and methods are:\n\nScrum board: You can visualize your sprint backlog with a Scrum task board. The board can have different forms; it traditionally involves index cards, Post-It notes, or a whiteboard. The Scrum board is usually divided into three categories: to do, work in progress, and done. The Scrum Team needs to update the board throughout the entire sprint. For example, if someone comes up with a new task, she would write a new card and put it in the appropriate column.\n\nUser stories: A user story describes a software feature from the customer’s perspective. It includes the type of user, what they want, and why they want it. These short stories follow a similar structure: as a <type of user>, I want to <perform some task> so that I can <achieve some goal.> The development team uses these stories to create code that will meet the requirements of the stories.\n\nBurndown chart: A burndown chart represents all outstanding work. The backlog is usually on the vertical axis, with time along the horizontal axis. The work remaining can be represented by story points, ideal days, team days, or other metrics. A burndown chart can warn the team if things aren’t going according to plan and helps to show the impact of decisions.\n\nLarge-Scale Scrum (LeSS): If you want to scale elements of Scrum to hundreds of developers, the Large-Scale Scrum (LeSS) framework helps extend the rules and guidelines without losing the core of Scrum. The principles are taken directly from Scrum, however focuses on scaling up without adding additional overhead (like adding more roles, artifacts, or processes).\n\nTimeboxing: A timebox is a set period of time during which a team works towards completing a goal. Instead of letting a team work until the goal is reached, the timebox approach stops work when the time limit is reached. Time-boxed iterations are often used in Scrum and Extreme Programming.\n\nIcebox: Any user stories that are recorded but not moved to development are stored in the icebox.\n\nThe term “icebox” was created by Pivotal Tracker, an Agile project management tool.\n\nScrum vs RUP: While both Scrum and Rational Unified Process (RUP) follow the Agile framework, RUP involves more formal definition of scope, major milestones, and specific dates (Scrum uses a project backlog instead of scope). In addition, RUP involves four major phases of the project lifecycle (inception, elaboration, construction, and transition), whereas Scrum dictates that the whole “traditional lifecycle” fits into one iteration.\n\nLean vs Scrum: Scrum is a software development framework, while Lean helps optimize that process. Scrum’s primary goal is on the people, while Lean focuses on the process. They are both considered Agile techniques, however Lean introduces two major concepts: eliminating waste and improving flow.\n\nHow to Get Started with Scrum\n\nWorking with Scrum often means changing the team’s habits. They need to take more responsibility, increase the quality of the code, and boost speed of delivery. This level of commitment acts as a change agent; as the teams commit to sprint goals, they are more and more motivated to get better and faster to deliver a quality product.\n\nA good place to start with Scrum is to talk about the roles. Every project must have a Scrum Master, Product Owner, and Scrum Team. You may want to talk about who should be the Scrum Master and Product Owner, or if these roles are already assigned, you may want to clarify their roles and responsibilities.\n\nDepending on how familiar your team is with Scrum, you may also want to look into training sessions. Certified Scrum Coaches and Trainers and Scrum Alliance Registered Education Providers can help your team learn and embrace Scrum.\n\nSmartsheet's newest view, Card View, gives Agile teams a more highly-visual way to work, communicate, and collaborate in Smartsheet. Card View enables you to focus attention with rich cards, give perspective with flexible views, and prioritize and adjust work more visually. Display information on cards including custom fields, images, and color coding to better focus your team’s attention. Categorize cards into lanes to organize your work more visually.\n\nUse Smartsheet Card View during your next Scrum meeting.\n\nLearn More About Smartsheet for Software Development\n\nWaterfall Methodology\n\nWhat Is Waterfall?\n\nWaterfall methodology follows a sequential, linear process and is the most popular version of the systems development life cycle (SDLC) for software engineering and IT projects. It is sometimes planned using a Gantt chart, a type of bar chart that shows the start and end dates for each task. Once one of the eight stages are complete, the development team moves onto the next step. The team can’t go back to a previous stage without starting the whole process from the beginning. And, before the team can move to the next stage, requirements may need to be reviewed and approved by the customer.\n\nThe Waterfall model originated in the manufacturing and construction industries, both highly structured environment where changes can be too expensive or sometimes impossible. The first formal description of Waterfall is attributed to Winston W. Royce in a 1970 article where he described a flawed software model.\n\nAdvantages of Waterfall\n\nWaterfall is best used for simple, unchanging projects. Its linear, rigid nature makes it easy to use and allows for in-depth documentation.\n\nThe advantages of Waterfall include:\n\nEasy to use and manage: Because the Waterfall model follows the same sequential pattern for each project, it is easy to use and understand. The team doesn’t need any prior knowledge or training before working on a Waterfall project. Waterfall is also a rigid model; each phase has specific deliverables and review, so it’s easy to manage and control.\n\nDiscipline is enforced: Every phase in Waterfall has a start and end point, and it’s easy to share progress with stakeholders and customers. By focusing on requirements and design before writing code, the team can reduce the risk of a missed deadline.\n\nRequires a well documented approach: Waterfall requires documentation for every phase, resulting in better understanding of the logic behind the code and tests. It also leaves a paper trail for any future projects or if stakeholders need to see more detail about a certain phase.\n\nDisadvantages of Waterfall\n\nThe biggest drawback of Waterfall is how it handles change. Because Waterfall is a linear, sequential model, you can’t bounce between phases, even if unexpected changes occur. Once you’re done with a phase, that’s it.\n\nHere’s more information on the disadvantages of Waterfall:\n\nChanges can’t be easily accommodated: Once the team completes a phase, they can’t go back. If they reach the testing phase and realize that a feature was missing from the requirements phase, it is very difficult and expensive to go back and fix it.\n\nSoftware isn’t delivered until late: The project has to complete two to four phases before the coding actually begins. As a result, stakeholders won’t see working software until late in the life cycle.\n\nGathering accurate requirements can be challenging: One of the first phases in a Waterfall project is to talk to customers and stakeholders and identify their requirements. However, it can be difficult to pinpoint exactly what they want this early in the project. Often times, customers don’t know what they want early on and instead, learn and identify requirements as the project progresses.\n\nStages of Waterfall\n\nThere are eight stages in Waterfall and they must all happen in sequential order. For example, the development team can’t go back to the analysis phase if they are in the testing phase.\n\nConception: This phase starts with an idea. The concept phase involves a rough assessment of the project, why it’s beneficial, and looks at any initial cost estimates.\n\nInitiation: Once the idea is formed, you need to hire the project team, and define objectives, scope, purpose, and deliverables.\n\nRequirement Gathering and Analysis: Requirements are gathered and analyzed to see if the project is actually feasible. All this information is documented in a requirement specification document.\n\nDesign: The design specifications created in this phase are used in the coding phase to actually write the code. The requirements are studied and evaluated, and the design of the system is prepared. The team’s goal is to understand what actions need to be taken and what they should look like.\n\nImplementation/Coding: The actual coding of the software begins. Any flowcharts or algorithms created in the design phase are translated into a programming language.\n\nTesting: Once the code is complete, the software needs to be tested for any errors. When the testing is finished, the software is delivered to the customer. Some teams may choose to include user acceptance testing (UAT), where users test the software before it is deployed to the general public.\n\nMaintenance: Once customers have been using the software in the real world, they may find additional problems. The development team will need to resolve, change, or modify the software to continue to be effective.\n\nIterative Waterfall Development\n\nIn the traditional Waterfall model, the team goes through each phase for the entire project. For example, they do the analysis for the entire project, then they do the design for the entire project, etc.\n\nIn an iterative Waterfall model, there is still a lot of upfront planning required. Once the plan is in place, the team follows the same pattern as traditional Waterfall but does it for each story. They do the analysis for one story, then all the design for one story, then all the coding and testing for one story. Then they repeat the process for another story. The work is broken up into chunks that benefit the development team.\n\nHow Waterfall Deals with Software Requirements\n\nWaterfall projects define all software requirements upfront. The project cannot proceed unless these requirements have been identified and documented.\n\nSome Waterfall projects may have a dedicated team to capture, collect, and gather these requirements. They may use questionnaires, face-to-face or phone interviews, white boards, and software tools to capture stakeholder and customer requirements.\n\nOnce the initial requirements are defined, the team should produce a requirements specification document (sometimes they may create more than one). This document defines what needs to be delivered so everyone understands the scope of the project.\n\nWhen to Use Waterfall\n\nBecause of its highly structured nature, Waterfall is best used in industries where firm tasks and deadlines need to be set and maintained. For example, manufacturing and construction industries are two highly rigid businesses that rely on the timely completion of dependent stages.\n\nChanges to these plans can be expensive, and in some instances, impossible. As a result, Waterfall is leveraged to preserve a sequential process and maintain stability throughout stages of a project.\n\nKanban\n\nWhat Is Kanban?\n\nKanban is Japanese for “visual sign” or “card.” It is a visual framework used to implement Agile that shows what to produce, when to produce it, and how much to produce. It encourages small, incremental changes to your current system and does not require a certain set up or procedure (meaning, you could overlay Kanban on top of other existing workflows).\n\nKanban was inspired by the Toyota Production System and Lean Manufacturing. In the 1940s, Toyota improved its engineering process by modeling it after how supermarkets stock shelves. Engineer Taiichi Ohno noticed that supermarkets stock just enough product to meet demand, optimizing the flow between the supermarket and customer. Inventory would only be restocked when there was empty space on the shelf (a visual cue). And because inventory matched consumption, the supermarket improved efficiency in inventory management.\n\nToyota brought these same principles to its factory floors. Different teams would create a card (or Kanban) to communicate that they had extra capacity and were ready to pull more materials. Because all requests for parts were pulled from the order, Kanban is sometimes called the “pull system.”\n\nThese same ideas apply to software teams and IT projects today. In this context, development work-in-progress (WIP) takes the place of inventory, and new work can only be added when there is an “empty space” on the team’s visual Kanban board. Kanban matches the amount of WIP to the team’s capacity, improving flexibility, transparency, and output.\n\nAccording to the Kanban blog, “Kanban is a technique for managing a software development process in a highly efficient way. Kanban underpins Toyota's ‘just-in-time’ (JIT) product system. Although producing software is a creative activity and therefore different to mass-producing cars, the underlying mechanism for managing the production line can still be applied.”\n\nWhen looking at Kanban vs Agile, it’s important to remember that Kanban is one flavor of Agile. It’s one of many frameworks used to implement Agile software development.\n\nAbout the Kanban Board\n\nA Kanban board is a tool to implement the Kanban method for projects. Traditionally, this tool has been a physical board, with magnets, plastic chips, or sticky notes on a whiteboard to represent work items. However, in recent years, more and more project management software tools have created online Kanban boards.\n\nA Kanban board, whether it is physical or online, is made up of different swim lanes or columns. The simplest boards have three columns: to do, in progress, and done. The columns for a software development project may consist of backlog, ready, coding, testing, approval, and done columns.\n\nKanban cards (like sticky notes) represent the work and each card is placed on the board in the lane that represents the status of that work. These cards communicate status at a glance. You could also use different color cards to represent different details. For example, green cards could represent a feature and orange cards could represent a task.\n\nAdvantages of Kanban\n\nKanban’s visual nature offers a unique advantage when implementing Agile. The Kanban board is easy to learn and understand, it improves flow of work, and minimizes cycle time.\n\nThe advantages of Kanban include:\n\nIncreases flexibility: Kanban is an evolving, fluid model. There are no set phase durations and priorities are reevaluated as new information comes in.\n\nReduces waste: Kanban revolves around reducing waste, ensuring that teams don’t spend time doing work that isn’t needed or doing the wrong kind of work.\n\nEasy to understand: The visual nature of Kanban helps to make it incredibly intuitive and easy to learn. The team doesn’t need to learn a completely new methodology, and Kanban can be easily implemented on top of other systems in place.\n\nImproves delivery flow: Kanban teams optimize the flow of work out to customers. Like continuous delivery (CD), Kanban focuses on the just-in-time delivery of value and delivering work to customers on a regular cadence.\n\nMinimizes cycle time: Cycle time is the amount of time it takes for work to move through the team’s workflow. In Kanban projects, the entire team helps to ensure the work is moving quickly and successfully through the process.\n\nDisadvantages of Kanban\n\nMany of the disadvantages associated with Kanban come with misuse or mishandling of the Kanban board. An outdated or overcomplicated board can lead to confusion, inaccuracies, or miscommunication.\n\nHere’s more on the disadvantages of Kanban:\n\nOutdated board can lead to issues: The team must be committed to keeping the Kanban board up to date, otherwise they’ll be working off inaccurate information. And once work is completed based off an out-of-date board, it can be hard to get things back on track.\n\nTeams can overcomplicate the board: The Kanban board should remain clear and easy to read, however some team members may learn “new tricks” they can apply to their board. Adding these kinds of bells and whistles to the Kanban board just buries the important information.\n\nLack of timing: A frequent complaint about Kanban is that you don’t know when things will be done. The columns on the Kanban board are only marked by phase (to do, in progress, complete), there are no timeframes associated with each phase, so you really don’t know how long the to do phase could last.\n\nCore Practices and Principles of Kanban\n\nEvery Kanban project should follow these core principles:\n\nVisualize the workflow: A visual representation of your work allows you to understand the big picture and see how the flow of work progresses. By making all the work visible, including blockers and queues, you can identify issues early on and improve collaboration.\n\nLimit work in progress (WIP): Work in progress limits (WIP limits) determine the minimum and maximum amount of work for each column on the board or for each workflow. By putting a limit on WIP, you can increase speed and flexibility, and reduce the need for prioritizing tasks.\n\nManage and enhance the flow: The flow of work (the movement of work) throughout the Kanban board should be monitored and improved upon. Ideally, you want a fast, smooth flow, which shows that the team is creating value quickly. The team should analyze problems in the flow then implement changes.\n\nMake process policies explicit: In order for collaborative change to occur in the Kanban system, the processes need to be explicit. Everyone needs to understand how things work or what “done” really means. You can modify the board to make these processes more clear; for example, you could redesign it to specify how the work should flow.\n\nContinuously improve: The Kanban method encourages small, continuous changes that stick. Once the Kanban system is in place, the team will be able to identify and understand issues and suggest improvements. Teams measure their effectiveness by tracking flow, measuring cycle time, and increasing quality of work.\n\nCommon Questions About Kanban\n\nQ: How do you organize meetings and maintain focus without a Scrum Master?\n\nSomeone on the team needs to take initiative to put the meeting on the calendar and ensure the conversation stays on track. Even without a Scrum Master, it normally isn’t too big of an issue.\n\nThe Kanban board helps maintain focus during the meeting. During the meeting, you can go through the board from left to right and look for stories that have not moved since the last meeting. Instead of talking about accomplishments, you can just look at the cards on the board. The one question you do need to ask during a meeting is about the roadblockers or challenges to getting an item finished.\n\nYou could also try a kaizen meeting, where you only invite people who are involved in the task at hand. Each person discusses problems and challenges, and how his or her job could be done more efficiently. Then, the whole group talks about solutions to those issues.\n\nKaizen also can include a kaizen facilitator, who encourages the team to openly discuss critical issues.\n\nQ: How can Kanban satisfy management’s desire for predictable delivery?\n\nTo some extent, Kanban trades predictability for efficiency. There are no timebox constraints or planning, however once a team has optimized the flow of work and can get a sense of how long certain tasks take, there will be some level of predictability.\n\nIf management still needs more defined predictability (which is not the Kanban approach), you may need to try managing expectations. In a traditional model, you have a predictable date of delivery, but in reality, no one is going to deliver a product by that date if it’s not complete. Management is always going to wait for the product to be complete, regardless of the original date set. In the Kanban model, the expectations need to be adjusted to focus on delivering the product when it’s ready and complete.\n\nQ: How do you use Kanban when you’re on a deadline?\n\nThere are a couple different ways you can handle deadlines in a Kanban model. You can simply write the deadlines on the Kanban cards, making sure these deadlines act more as guidelines rather than hard-and-fast due dates (in Kanban, you shouldn’t sacrifice quality for timing).\n\nYou could also change how you and your team approach deadlines. In Kanban’s truest form, there is no need for them. The Kanban system will make sure that all tasks are completed as soon as possible, so a deadline is no longer necessary.\n\nQ: Can Kanban be used for other projects besides software development?\n\nYes, Kanban can improve process results, reduce production times, and help manage workflow in almost any industry. For example, in the game development industry, Kanban helps shorten the video process timeline and reduce waste. In real estate, it brings more efficiency by tracking contracts, prospects, and listings on various boards. And in finance, Kanban can quickly identify bottlenecks and increase speed-to-market.\n\nQ: Is WIP driven by resource availability?\n\nYes. When setting WIP limits, you need to look at how many people you have on your team and how many tasks you want them to work on at the same time.\n\nQ: How do you know if the WIP limit is correct?\n\nThere is no formula for setting the right WIP limits. It’s very common for limits to be wrong in the beginning, but you just need to adjust them as the project progresses. A good place to start is 1.5 for available resource, but you should constantly be reevaluating this number and making changes as necessary.\n\nAgile vs Scrum\n\nDifferences and Similarities Between Agile and Scrum\n\nWhile Agile and Scrum follow the same system, there are some differences when comparing Scrum vs Agile. Agile describes a set of principles in the Agile Manifesto for building software through iterative development. On the other hand, Scrum is a specific set of rules to follow when practicing Agile software development. Agile is the philosophy and Scrum is the methodology to implement the Agile philosophy.\n\nBecause Scrum is one way to implement Agile, they both share many similarities. They both focus on delivering software early and often, are iterative processes, and accommodate change. They also encourage transparency and continuous improvement.\n\nHow Does Scrum Fit with Agile?\n\nScrum is one of many frameworks used to implement an Agile process. Agile is an umbrella term that includes other processes, like Extreme Programming, Kanban, Crystal, and Scrum. Scrum is Agile, but Agile isn’t Scrum.\n\nWhen to Use Scrum\n\nWe recommend using Scrum if:\n\nThe project requirements will change and evolve\n\nContinuous feedback is required\n\nYou have to figure out how to do a large part of the work because you haven't done it before\n\nYou don’t need to commit to a fixed release date\n\nThe project team wants autonomy\n\nYou need to deliver software on a regular basis\n\nScrum works well for projects that have a lot of unknowns or that evolve over time. Scrum deals with these changes very effectively, so you can easily accommodate new information or features throughout the process.\n\nWhen to Use Agile\n\nThe line between when to use Agile versus when to use Scrum is blurry. Scrum is one framework in the Agile process, so they both have a lot in common. A good place to start is to first understand if you should use Agile in general. Then, if an Agile methodology seems like it would work for you, you could choose which framework of Agile to use (Scrum being one framework).\n\nWe recommend using Agile if:\n\nThe final product isn’t clearly defined\n\nThe clients/stakeholders need to be able to change the scope\n\nChanges need to be implemented during the entire process\n\nThe developers are adaptable and can think independently\n\nYou need to optimize for rapid deployment\n\nHybrid Approach\n\nIf a pure Scrum approach doesn’t work for your project, you can also try a hybrid model. There are several methodologies that combine the principles of Agile or Scrum and adapt the framework to scale more effectively.\n\nFor example, Disciplined Agile Delivery (DAD) builds on the practices of Agile, Scrum, and Lean to provide a solid foundation from which to scale. DAD was developed to provide a more cohesive approach to Agile, taking strategies from Scrum, Kanban, Extreme Programming, and others. Rather than taking the time to learn one of these existing frameworks and cobble them together as needed, DAD already combines all relevant techniques.\n\nOther hybrid methods include Large-Scale Scrum (LeSS), which extends Scrum with scaling rules and guidelines, and Scaled Agile Framework (SaFE), based on underlying Lean and Agile principles.\n\nKanban vs Scrum\n\nDifferences and Similarities: Scrum vs Kanban\n\nScrum and Kanban are both flavors of Agile, but they have some distinct differences.\n\nScrum requires specific roles whereas Kanban has no required roles.\n\nScrum is based on timeboxed iterations, combining planning, process improvement, and release. In Kanban, you can choose to do these activities on a regular cadence or whenever you need.\n\nScrum limits work in progress (WIP) in each iteration, whereas Kanban limits WIP in each workflow.\n\nScrum resists change, whereas Kanban easily accommodates and embraces change. In Scrum, once the team has committed stories to a sprint, you can’t add additional stories later on. In Kanban, you can add or change stories as you please, assuming that it’s within WIP limits.\n\nA Scrum board is reset after each sprint. A Kanban board is continuously used.\n\nA Scrum team is cross-functional and one team owns the Scrum board. In Kanban, teams don’t need to be cross-functional and anyone can own the Kanban board.\n\nScrum teams require estimation, whereas Kanban doesn’t.\n\nAnd Scrum and Kanban also have some similarities:\n\nThey are empirical. You have to experiment with the process to see what works for you.\n\nBoth allow team members to work on multiple products at once.\n\nThey are Lean and Agile.\n\nThey both limit WIP (although the way they each limit WIP is different)\n\nThey use pull scheduling\n\nThey focus on delivering software early and often\n\nBoth use transparency to improve process\n\nHow Do Kanban and Scrum Relate to Each Other?\n\nKanban and Scrum are both frameworks for Agile software development. They both take large, complex tasks and break them down into smaller chunks. Kanban and Scrum also work toward continual improvement and optimization of the process, and want to keep work highly visible.\n\nWhile both Kanban and Scrum are very adaptive, Scrum is more rigid than Kanban. Scrum has more constraints, whereas Kanban is more flexible.\n\nScrum Board vs Kanban Board\n\nWhile a Scrum board and Kanban board can look similar visually, they are based on very different principles.\n\nTo create a Scrum board, the Scrum team must first create sprints, assign points to user stories, and plan which stories go into which sprint. Then, the Scrum board visualizes the sprint, showing which stories are in plan mode or work mode. The Scrum board is reset between each sprint and is owned by one specific team. Make your Scrum board digitally or physically, whichever works best for your team.\n\nA Kanban board has the same column-based layout as a Scrum board, but it requires no upfront planning. You can start working and moving through the flow of the Kanban board without having a structured plan. The Kanban board can be shared by multiple people and is persistent; you don’t need to reset the board. And, unlike the Scrum board, the Kanban board has a maximum number of stories allowed in each column at one time. This will continue to flow as long as the project continues, with new stories added and completed stories being reevaluated if needed.\n\nWhen to Use Kanban\n\nWe recommend using Kanban if:\n\nYou need to add stories or change sprints on the fly\n\nYou don’t need iterations\n\nEstimation isn’t necessary\n\nYou want the ability to release at any time\n\nContinuous improvement is already emphasized\n\nYour team doesn’t respond well to big changes\n\nYou want to improve delivery flow\n\nThe system needs to be easy to understand\n\nScrum can be less flexible than Kanban. The timing revolves around sprints, with each sprint lasting two to four weeks. In each sprint, the team has specific roles and follows specific ceremonies.\n\nWhat Is Scrumban?\n\nScrumban combines the principles of Scrum and Kanban into a pull-based system. The team plans out the work that was established during initiation and continually grooms the backlog. The same Scrum meetings should take place, but the frequency can change depending on context and need. The most important part of Scrumban is making sure that work in progress limits (WIP limits) are followed.\n\nScrumban takes bits and pieces from both Scrum and Kanban. For example, it includes the defined roles, daily Scrum, and other meetings from Scrum. And from Kanban, it takes the Kanban board, continuous flow, and ability to add changes as needed to the board.\n\nScrumban can look more like Scrum on the technical level, but at the cultural level, it will more closely resemble Kanban. Instead of big changes all at once, Scrumban encourages incremental changes. If your team is looking to migrate from Scrum to Kanban, Scrumban can provide a gentle transition.\n\nWhich One Is Best? Kanban vs Scrum\n\nWhen comparing Kanban versus Scrum, there is no definitive winner. The best framework depends on your project, team, and your goals. Because both Kanban and Scrum are flexible Agile methodologies, you could easily take principles from each and apply them as you see necessary.\n\nIt’s important to remember that true Scrum is a much bigger shift than Kanban. The team will have to learn about the ceremonies, the specific roles, and iterations. On the other hand, Kanban encourages incremental improvements. You can apply Kanban principles to any process you already have in place, even Scrum. Nothing needs to change significantly to get started with Kanban.\n\nAs a general rule of thumb, if your team or organization is really stuck and needs a big change, Scrum may be more appropriate. If you already have a process in place that you’re happy with, but want to implement some small changes, Kanban might be a better choice.\n\nAgile vs Waterfall\n\nDifferences and Similarities: Waterfall vs Agile\n\nThe differences between the Waterfall and Agile methodologies can be summed up in two words: rigid vs flexible. Waterfall is a much stricter, rigid process whereas Agile is flexible and continuously evolving. Here’s more on their differences:\n\nWaterfall is a structured process, where you can’t start on a new phase until the previous one has been completed. On the other hand, Agile is a flexible process, allowing you to move through the project as you like.\n\nWaterfall is sequential and Agile does not enforce a linear process.\n\nWaterfall projects usually include defined requirements in advance, whereas requirements are expected to change and evolve in Agile projects.\n\nIn Waterfall projects, you can’t change things that were done in previous stages, whereas Agile is very accommodating to changes.\n\nThere are not many similarities between Agile and Waterfall; Agile was specifically created to be the opposite of Waterfall. However, you can say that both Agile and Waterfall have the same goal. They both want to deliver quality products in an efficient way. If you have any other similarities between Agile and Waterfall to share, please leave us a comment!\n\nWhen You Should Use Waterfall and When to Use Agile\n\nWe recommend using Waterfall if:\n\nYou don’t expect changes in scope and you’re working with fixed-price contracts\n\nThe project is very simple or you’ve done it many times before\n\nRequirements are very well known and fixed\n\nCustomers know exactly what they want in advance\n\nYou’re working with orderly and predictable projects\n\nAnd you should use Agile if:\n\nThe final product isn’t clearly defined\n\nThe clients/stakeholders need the ability to modify the scope\n\nYou anticipate any kind of changes during the project\n\nRapid deployment is the goal\n\nWhen deciding between Agile versus Waterfall, it can all boil down to this: if you anticipate or expect any changes throughout the project, go with Agile. If you know the project is fixed, unchanging, and predictable, Waterfall may be a better choice.\n\nWhich One Is Better? Agile vs Waterfall\n\nAgile and Waterfall are such opposites that it’s hard to say which one is better. It really depends on the project, the level of clarity around requirements, and how flexible you can be.\n\nIf you have a clear picture of what the final product should be, you have fixed requirements that won’t change, and you’re working on a relatively simple project, some argue that Waterfall is a better choice than Agile. If you don’t expect to deal with change, Waterfall is a straightforward, efficient process. The issues with Waterfall come when you have to accommodate changes.\n\nIf you don’t have a clear picture of the final product, you anticipate changes, and you’re working on a complex project, Agile is superior. Agile is designed to accommodate new, evolving requirements any time during the project, whereas Waterfall does not allow you to go back to a completed phase and make changes.\n\nHybrid: Agifall or WAgile\n\nIf you’re still wondering about Waterfall versus Agile, you could always combine principles of both and use a hybrid model.\n\nAgifall, for example, increases speed and quality by adding Agile methodologies to the Waterfall process. In an Agifall project, you would break out the research, strategy, and planning phases into tasks and proceed with sprints to complete them. The development phase would be just like any other Agile project, with more information up front. You also don’t need to wait for one phase to end to start the following phase, which is traditional in pure Waterfall. With Agifall, when the project can begin, it should begin.\n\nWagile has a more negative connotation than Agifall. The definition of Wagile on Wikipedia is, “a group of software development methodologies that result from slipping from Agile back into Waterfall, doing a lot of short Waterfalls and thinking it is Agile, Waterfall model masquerading as Agile software development.”\n\nWagile adopts Agile practices like short iterations, daily stand-ups, or continuous integration on top of the Waterfall model, without really changing the traditional Waterfall model.\n\nKanban vs Agile\n\nDifferences and Similarities: Agile vs Kanban\n\nWhile Kanban is a visual way to implement Agile, they have many differences:\n\nKanban advocates for continuous flow, while Agile works in iterations.\n\nKanban can work equally well for any type of work, whereas Agile may be better suited for some projects rather than others.\n\nAnyone can pick up Kanban, but some Agile methodologies require knowledge or training.\n\nKanban requires a visual representation of workflow, while Agile does not.\n\nSome Agile projects require cross-functional teams, whereas Kanban does not.\n\nAgile is a philosophy whereas Kanban is a method.\n\nAnd Agile and Kanban also have similarities:\n\nThey both break down projects into smaller chunks.\n\nThey emphasize continuous improvement.\n\nThey place high value on transparency.\n\nNeither of them require a lot of upfront planning.\n\nThey work toward faster delivery.\n\nWhen You Should Use Kanban and When to Use Agile\n\nWe recommend using Kanban if:\n\nYour project doesn’t require iterations\n\nYou want the ability to release at any time\n\nYour team prefers incremental change\n\nYour team works well with visuals\n\nYou want to improve delivery flow\n\nYou’re looking for an easy-to-understand system\n\nAnd we recommend using Agile if:\n\nThe final product isn’t clearly defined\n\nChanges need to be implemented during the entire process\n\nThe developers are adaptable and can think independently\n\nYou’re looking to make a substantial change\n\nWhich One Is Better? Agile vs Kanban\n\nLike with any project management methodology, there isn’t one framework that is better 100% of the time. You may choose Kanban for some projects, but want to implement Agile for others.\n\nConsider what level of change you want to introduce to your team. If you want to add something on top of an existing framework with small, incremental changes, Kanban is a better choice. If you’re looking to make a bigger process change, implementing Agile (like Scrum) would be better.\n\nAnd, if you want your project team to get started right away with a new method, Kanban is easier to understand. There is no training required and it can be used on top of any existing process. On the other hand, some Agile methods require more knowledge from the team. For example, they may need to learn specific roles, ceremonies, and terminology.\n\nResources and Related Posts\n\nDownload a free Excel waterfall chart template or learn how to create a waterfall chart from scratch. We'll also share when to use a waterfall chart and the features of a waterfall chart in Excel.\n\nFind eight Agile project management templates in Excel, ranging from Agile product backlog template to Agile project charter template. You'll also learn how to use Agile templates in Smartsheet\n\nCourses:\n\nPMI Agile Certified Practitioner (PMI ACP): Offered by the Project Management Institute (PMI), this certification covers the many different approaches to Agile, like Scrum, Kanban, Lean, Extreme Programming (XP), and Test-Driven Development (TDD). Prerequisites include 2,000 hours of general project experience working on a team, 1,500 hours working on Agile project teams, and 21 contact hours of training in Agile practices.\n\nCertified ScrumMaster (CSM): This certification from Scrum Alliance helps teams properly use Scrum, understand the values, and protect the team from distractions. As a CSM, you will be able to fill the role of Scrum Master or Scrum team member. To earn your CSM certificate, you must take a CSM course from a Scrum Alliance Authorized Trainer and demonstrate progress with an online test.\n\nCertified Scrum Product Owner (CSPO): A Certified Scrum Product Owner learns Scrum terminology, practices, and principles to fulfill the role of Product Owner on a Scrum team. He or she is closest to the business side of the project, maintains the product backlog, and ensures everyone knows the priorities. To earn this certification from the Scrum Alliance, you must attend an in-person, two-day CSPO course taught by a Certified Scrum Trainer.\n\nCertified Scrum Professional (CSP): Certified Scrum Professionals challenge their Scrum teams to improve the way Scrum is implemented for every project. To apply for a CSP, you must currently hold a CSM, CSPO, or CSD credential, have a minimum of 36 months of Agile/Scrum experience, and gather and submit 70 Scrum Education Units from the past three years.\n\nAccredited Kanban Practitioner (AKP): Accredited Kanban Practitioners are professionals who have proven knowledge and expertise in Kanban implementation for software development. The certification is offered by the Agile Certification Institute, Inc. and requires that you have prior training in Agile practices and that you pass an AKP certification exam.\n\nManage Any Project Your Way with Smartsheet\n\nEmpower your people to go above and beyond with a flexible platform designed to match the needs of your team — and adapt as those needs change.\n\nThe Smartsheet platform makes it easy to plan, capture, manage, and report on work from anywhere, helping your team be more effective and get more done. Report on key metrics and get real-time visibility into work as it happens with roll-up reports, dashboards, and automated workflows built to keep your team connected and informed.\n\nWhen teams have clarity into the work getting done, there’s no telling how much more they can accomplish in the same amount of time. Try Smartsheet for free, today.\n\nResources and Related Posts\n\nHow to Create a Waterfall Chart in Excel\n\nDownload a free Excel waterfall chart template or learn how to create a waterfall chart from scratch. We'll also share when to use a waterfall chart and the features of a waterfall chart in Excel.\n\nBest Agile Project Management Excel Templates\n\nFind eight Agile project management templates in Excel, ranging from Agile product backlog template to Agile project charter template. You'll also learn how to use Agile templates in Smartsheet\n\nAgile Planning: Best Practices for Project Managers\n\nAgile One-Stop Project Management Resource\n\nCourses:\n\nPMI Agile Certified Practitioner (PMI ACP): Offered by the Project Management Institute (PMI), this certification covers the many different approaches to Agile, like Scrum, Kanban, Lean, Extreme Programming (XP), and Test-Driven Development (TDD). Prerequisites include 2,000 hours of general project experience working on a team, 1,500 hours working on Agile project teams, and 21 contact hours of training in Agile practices.\n\nCertified ScrumMaster (CSM): This certification from Scrum Alliance helps teams properly use Scrum, understand the values, and protect the team from distractions. As a CSM, you will be able to fill the role of Scrum Master or Scrum team member. To earn your CSM certificate, you must take a CSM course from a Scrum Alliance Authorized Trainer and demonstrate progress with an online test.\n\nCertified Scrum Product Owner (CSPO): A Certified Scrum Product Owner learns Scrum terminology, practices, and principles to fulfill the role of Product Owner on a Scrum team. He or she is closest to the business side of the project, maintains the product backlog, and ensures everyone knows the priorities. To earn this certification from the Scrum Alliance, you must attend an in-person, two-day CSPO course taught by a Certified Scrum Trainer.\n\nCertified Scrum Developer (CSD): Certified Scrum Developers learn specialized Agile engineering skills and demonstrate their knowledge through formal training and a technical skills assessment. The CSD course is geared toward software developers who are working in a Scrum environment. To earn a CSD from the Scrum Alliance, you must have five days of formal training taught by a Scrum Alliance Registered Education Provider and a Scrum Alliance Authorized Instructor.\n\nCertified Scrum Professional (CSP): Certified Scrum Professionals challenge their Scrum teams to improve the way Scrum is implemented for every project. To apply for a CSP, you must currently hold a CSM, CSPO, or CSD credential, have a minimum of 36 months of Agile/Scrum experience, and gather and submit 70 Scrum Education Units from the past three years.\n\nAccredited Kanban Practitioner (AKP): Accredited Kanban Practitioners are professionals who have proven knowledge and expertise in Kanban implementation for software development. The certification is offered by the Agile Certification Institute, Inc. and requires that you have prior training in Agile practices and that you pass an AKP certification exam.\n\nManage Any Project Your Way with Smartsheet\n\nEmpower your people to go above and beyond with a flexible platform designed to match the needs of your team — and adapt as those needs change.\n\nThe Smartsheet platform makes it easy to plan, capture, manage, and report on work from anywhere, helping your team be more effective and get more done. Report on key metrics and get real-time visibility into work as it happens with roll-up reports, dashboards, and automated workflows built to keep your team connected and informed.\n\nWhen teams have clarity into the work getting done, there’s no telling how much more they can accomplish in the same amount of time. Try Smartsheet for free, today."
    }
}