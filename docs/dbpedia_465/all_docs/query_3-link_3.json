{
    "id": "dbpedia_465_3",
    "rank": 3,
    "data": {
        "url": "https://github.com/apple-oss-distributions/xnu",
        "read_more_link": "",
        "language": "en",
        "title": "distributions/xnu",
        "top_image": "https://opengraph.githubassets.com/d69418c655e14f7d5745d9252240deb32ffe8333c16b7e5e9d7e337eb15288ff/apple-oss-distributions/xnu",
        "meta_img": "https://opengraph.githubassets.com/d69418c655e14f7d5745d9252240deb32ffe8333c16b7e5e9d7e337eb15288ff/apple-oss-distributions/xnu",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "apple-oss-distributions"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Contribute to apple-oss-distributions/xnu development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/apple-oss-distributions/xnu",
        "text": "XNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix. XNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit. XNU runs on x86_64 and ARM64 for both single processor and multi-processor configurations.\n\nconfig - configurations for exported apis for supported architecture and platform\n\nSETUP - Basic set of tools used for configuring the kernel, versioning and kextsymbol management.\n\nEXTERNAL_HEADERS - Headers sourced from other projects to avoid dependency cycles when building. These headers should be regularly synced when source is updated.\n\nlibkern - C++ IOKit library code for handling of drivers and kexts.\n\nlibsa - kernel bootstrap code for startup\n\nlibsyscall - syscall library interface for userspace programs\n\nlibkdd - source for user library for parsing kernel data like kernel chunked data.\n\nmakedefs - top level rules and defines for kernel build.\n\nosfmk - Mach kernel based subsystems\n\npexpert - Platform specific code like interrupt handling, atomics etc.\n\nsecurity - Mandatory Access Check policy interfaces and related implementation.\n\nbsd - BSD subsystems code\n\ntools - A set of utilities for testing, debugging and profiling kernel.\n\nThe xnu make system can build kernel based on KERNEL_CONFIGS & ARCH_CONFIGS variables as arguments. Here is the syntax:\n\nWhere:\n\n<sdkroot>: path to macOS SDK on disk. (defaults to /)\n\n<variant>: can be debug, development, release, profile and configures compilation flags and asserts throughout kernel code.\n\n<arch>: can be valid arch to build for. (E.g. X86_64)\n\nTo build a kernel for the same architecture as running OS, just type\n\nAdditionally, there is support for configuring architectures through ARCH_CONFIGS and kernel configurations with KERNEL_CONFIGS.\n\nNote: By default, the architecture is set to the build machine's architecture, and the default kernel config is set to build for DEVELOPMENT.\n\nThis will also create a bootable image, kernel.[config], and a kernel binary with symbols, kernel.[config].unstripped.\n\nTo install the kernel into a DSTROOT, use the install_kernels target:\n\nFor a more satisfying kernel debugging experience, with access to all local variables and arguments, but without all the extra check of the DEBUG kernel, add something like the following to your make command:\n\nRemember to replace DEVELOPMENT and ARM64 with the appropriate build and platform.\n\nExtra Flags: You can pass additional flags to the C compiler at the command line with the EXTRA_CFLAGS build setting. These flags are appended to the base CFLAGS, and the default value for the setting is an empty string.\n\nThis setting allows you to e.g. selectively turn on debugging code that is guarded by a preprocessor macro. Example usage...\n\nmake SDKROOT=macosx.internal PRODUCT_CONFIGS=j314s EXTRA_CFLAGS='-DKERNEL_STACK_MULTIPLIER=2'\n\nTo build with RELEASE kernel configuration\n\nmake KERNEL_CONFIGS=RELEASE SDKROOT=/path/to/SDK\n\nDefine architectures in your environment or when running a make command.\n\n$ make MAKEJOBS=-j8 # this will use 8 processes during the build. The default is 2x the number of active CPUS.\n\n$ make -j8 # the standard command-line option is also accepted\n\n$ make -w # trace recursive make invocations. Useful in combination with VERBOSE=YES\n\n$ make BUILD_LTO=0 # build without LLVM Link Time Optimization\n\n$ make BOUND_CHECKS=0 # disable -fbound-attributes for this build\n\n$ make REMOTEBUILD=user@remotehost # perform build on remote host\n\nThe XNU build system can optionally output color-formatted build output. To enable this, you can either set the XNU_LOGCOLORS environment variable to y, or you can pass LOGCOLORS=y to the make command.\n\nThe xnu version is derived from the SDK or KDK by reading the CFBundleVersion of their System/Library/Extensions/System.kext/Info.plist file. This can be customized by setting the RC_DARWIN_KERNEL_VERSION variable in the environment or on the make command line.\n\nSee doc/xnu_version.md for more details.\n\nBy default, a DWARF debug information repository is created during the install phase; this is a \"bundle\" named kernel.development.<variant>.dSYM To select the older STABS debug information format (where debug information is embedded in the kernel.development.unstripped image), set the BUILD_STABS environment variable.\n\nTo test the xnu kernel, you need to build a kernelcache that links the kexts and kernel together into a single bootable image. To build a kernelcache you can use the following mechanisms:\n\nUsing automatic kernelcache generation with kextd. The kextd daemon keeps watching for changing in /System/Library/Extensions directory. So you can setup new kernel as\n\ncp BUILD/obj/DEVELOPMENT/X86_64/kernel.development /System/Library/Kernels/ touch /System/Library/Extensions ps -e | grep kextd\n\nManually invoking kextcache to build new kernelcache.\n\nkextcache -q -z -a x86_64 -l -n -c /var/tmp/kernelcache.test -K /var/tmp/kernel.test /System/Library/Extensions\n\nThe development kernel and iBoot supports configuring boot arguments so that we can safely boot into test kernel and, if things go wrong, safely fall back to previously used kernelcache. Following are the steps to get such a setup:\n\nCreate kernel cache using the kextcache command as /kernelcache.test\n\nCopy exiting boot configurations to alternate file\n\ncp /Library/Preferences/SystemConfiguration/com.apple.Boot.plist /next_boot.plist\n\nUpdate the kernelcache and boot-args for your setup\n\nplutil -insert \"Kernel Cache\" -string \"kernelcache.test\" /next_boot.plist plutil -replace \"Kernel Flags\" -string \"debug=0x144 -v kernelsuffix=test \" /next_boot.plist\n\nCopy the new config to /Library/Preferences/SystemConfiguration/\n\ncp /next_boot.plist /Library/Preferences/SystemConfiguration/boot.plist\n\nBless the volume with new configs.\n\nsudo -n bless --mount / --setBoot --nextonly --options \"config=boot\"\n\nThe --nextonly flag specifies that use the boot.plist configs only for one boot. So if the kernel panic's you can easily power reboot and recover back to original kernel.\n\nCreating tags and cscope\n\nSet up your build environment and from the top directory, run:\n\nXNU installs header files at the following locations -\n\nKernel.framework is used by kernel extensions.\n\nThe System.framework, /usr/include and /usr/local/include are used by user level applications.\n\nIOKit.framework is used by IOKit userspace clients.\n\n/System/DriverKit/usr/include is used by userspace drivers.\n\nThe header files in framework's PrivateHeaders are only available for Apple Internal Development.\n\nThe directory containing the header file should have a Makefile that creates the list of files that should be installed at different locations. If you are adding the first header file in a directory, you will need to create Makefile similar to xnu/bsd/sys/Makefile.\n\nAdd your header file to the correct file list depending on where you want to install it. The default locations where the header files are installed from each file list are -\n\nThe Makefile combines the file lists mentioned above into different install lists which are used by build system to install the header files. There are two types of install lists: machine-dependent and machine-independent. These lists are indicated by the presence of MD and MI in the build setting, respectively. If your header is architecture-specific, then you should use a machine-dependent install list (e.g. INSTALL_MD_LIST). If your header should be installed for all architectures, then you should use a machine-independent install list (e.g. INSTALL_MI_LIST).\n\nIf the install list that you are interested does not exist, create it by adding the appropriate file lists. The default install lists, its member file lists and their default location are described below -\n\na. INSTALL_MI_LIST, INSTALL_MODULEMAP_MI_LIST : Installs header and module map files to a location that is available to everyone in user level. Locations - $(DSTROOT)/usr/include Definition - INSTALL_MI_LIST = ${DATAFILES} INSTALL_MODULEMAP_MI_LIST = ${MODULEMAPFILES}\n\nb. INSTALL_DRIVERKIT_MI_LIST : Installs header file to a location that is available to DriverKit userspace drivers. Locations - $(DSTROOT)/System/DriverKit/usr/include Definition - INSTALL_DRIVERKIT_MI_LIST = ${DRIVERKIT_DATAFILES}\n\nc. INSTALL_MI_LCL_LIST, INSTALL_MODULEMAP_MI_LCL_LIST : Installs header and module map files to a location that is available for Apple internal in user level. Locations - $(DSTROOT)/usr/local/include Definition - INSTALL_MI_LCL_LIST = INSTALL_MODULEMAP_MI_LCL_LIST = ${PRIVATE_MODULEMAPFILES}\n\nd. INSTALL_IF_MI_LIST : Installs header file to location that is available to everyone for IOKit userspace clients. Locations - $(DSTROOT)/System/Library/Frameworks/IOKit.framework/Headers Definition - INSTALL_IF_MI_LIST = ${DATAFILES}\n\ne. INSTALL_IF_MI_LCL_LIST : Installs header file to location that is available to Apple internal for IOKit userspace clients. Locations - $(DSTROOT)/System/Library/Frameworks/IOKit.framework/PrivateHeaders Definition - INSTALL_IF_MI_LCL_LIST = ${DATAFILES} ${PRIVATE_DATAFILES}\n\nf. INSTALL_SF_MI_LCL_LIST : Installs header file to a location that is available for Apple internal in user level. Locations - $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders Definition - INSTALL_SF_MI_LCL_LIST = ${DATAFILES} ${PRIVATE_DATAFILES}\n\ng. INSTALL_KF_MI_LIST : Installs header file to location that is available to everyone for kernel extensions. Locations - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers Definition - INSTALL_KF_MI_LIST = ${KERNELFILES}\n\nh. INSTALL_KF_MI_LCL_LIST : Installs header file to location that is available for Apple internal for kernel extensions. Locations - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders Definition - INSTALL_KF_MI_LCL_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}\n\ni. EXPORT_MI_LIST : Exports header file to all of xnu (bsd/, osfmk/, etc.) for compilation only. Does not install anything into the SDK. Definition - EXPORT_MI_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}\n\nj. INSTALL_KF_LIBCXX_MI_LIST : Installs header file for in-kernel libc++ support. Locations - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders/kernel_sdkroot Definition - INSTALL_KF_LIBCXX_MI_LIST = ${LIBCXX_DATAFILES}\n\nk. INSTALL_EXCLAVEKIT_MI_LIST : Installs header file to location that is available for Apple internal for ExclaveKit. Locations - $(DSTROOT)/System/ExclaveKit/usr/include Definition - INSTALL_EXCLAVEKIT_MI_LIST = ${EXCLAVEKIT_DATAFILES}\n\nl. INSTALL_EXCLAVECORE_MI_LIST : Installs header file to location that is available for Apple internal for ExclaveCore. Locations - $(DSTROOT)/System/ExclaveCore/usr/include Definition - INSTALL_EXCLAVECORE_MI_LIST = ${EXCLAVECORE_DATAFILES}\n\nIf you want to install the header file in a sub-directory of the paths described in (1), specify the directory name using two variables INSTALL_MI_DIR and EXPORT_MI_DIR as follows -\n\nIf you want to install the module map file in a sub-directory, specify the directory name using the variable INSTALL_MODULEMAP_MI_DIR as follows -\n\nA single header file can exist at different locations using the steps mentioned above. However it might not be desirable to make all the code in the header file available at all the locations. For example, you want to export a function only to kernel level but not user level.\n\nYou can use C language's pre-processor directive (#ifdef, #endif, #ifndef) to control the text generated before a header file is installed. The kernel only includes the code if the conditional macro is TRUE and strips out code for FALSE conditions from the header file.\n\nSome pre-defined macros and their descriptions are -\n\nPRIVATE : If defined, enclosed definitions are considered System Private Interfaces. These are visible within xnu and exposed in user/kernel headers installed within the AppleInternal \"PrivateHeaders\" sections of the System and Kernel frameworks.\n\nKERNEL_PRIVATE : If defined, enclosed code is available to all of xnu kernel and Apple internal kernel extensions and omitted from user headers.\n\nBSD_KERNEL_PRIVATE : If defined, enclosed code is visible exclusively within the xnu/bsd module.\n\nMACH_KERNEL_PRIVATE: If defined, enclosed code is visible exclusively within the xnu/osfmk module.\n\nXNU_KERNEL_PRIVATE: If defined, enclosed code is visible exclusively within xnu.\n\nKERNEL : If defined, enclosed code is available within xnu and kernel extensions and is not visible in user level header files. Only the header files installed in following paths will have the code -\n\n$(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders\n\nDRIVERKIT: If defined, enclosed code is visible exclusively in the DriverKit SDK headers used by userspace drivers.\n\nEXCLAVEKIT: If defined, enclosed code is visible exclusively in the ExclaveKit SDK headers.\n\nEXCLAVECORE: If defined, enclosed code is visible exclusively in the ExclaveCore SDK headers.\n\nIn the simple case, a subdirectory of usr/include or usr/local/include can be represented by a standalone module. Where this is the case, set INSTALL_MODULEMAP_MI_DIR to INSTALL_MI_DIR and install a module.modulemap file there. module.modulemap is used even for private modules in usr/local/include; module.private.modulemap is not used. Caveat: in order to stay in the simple case, the module name needs to be exactly the same as the directory name. If that's not possible, then the following method will need to be applied.\n\nxnu contributes to the modules defined in CoreOSModuleMaps by installing module map files that are sourced from usr/include/module.modulemap and usr/local/include/module.modulemap. The naming convention for the xnu module map files are as follows.\n\na. Ideally the module map file covers an entire directory. A module map file covering usr/include/a/b/c would be named a_b_c.modulemap. usr/local/include/a/b/c would be a_b_c_private.modulemap. b. Some headers are special and require their own module. In that case, the module map file would be named after the module it defines. A module map file defining the module One.Two.Three would be named one_two_three.modulemap.\n\nxnu offers the following mechanisms for conditionally compiling code:\n\nCPU Characteristics If the code you are guarding has specific characterstics that will vary only based on the CPU architecture being targeted, use this option. Prefer checking for features of the architecture (e.g. __LP64__, __LITTLE_ENDIAN__, etc.).\n\nNew Features If the code you are guarding, when taken together, implements a feature, you should define a new feature in config/MASTER and use the resulting CONFIG preprocessor token (e.g. for a feature named config_virtual_memory, check for #if CONFIG_VIRTUAL_MEMORY). This practice ensures that existing features may be brought to other platforms by simply changing a feature switch.\n\nExisting Features You can use existing features if your code is strongly tied to them (e.g. use SECURE_KERNEL if your code implements new functionality that is exclusively relevant to the trusted kernel and updates the definition/understanding of what being a trusted kernel means).\n\nIt is recommended that you avoid compiling based on the target platform. xnu does not define the platform macros from TargetConditionals.h (TARGET_OS_OSX, TARGET_OS_IOS, etc.).\n\nBy default, the kernel reboots in the event of a panic. This behavior can be overriden by the debug boot-arg -- debug=0x14e will cause a panic to wait for a debugger to attach. To boot a kernel so it can be debugged by an attached machine, override the kdp_match_name boot-arg with the appropriate ifconfig interface. Ethernet, Thunderbolt, and serial debugging are supported, depending on the hardware.\n\nUse LLDB to debug the kernel:\n\nThe debug info for the kernel (dSYM) comes with a set of macros to support kernel debugging. To load these macros automatically when attaching to the kernel, add the following to ~/.lldbinit:"
    }
}