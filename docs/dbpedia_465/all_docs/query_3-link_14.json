{
    "id": "dbpedia_465_3",
    "rank": 14,
    "data": {
        "url": "https://medium.com/%40jonathanbluks/how-to-pick-your-first-programming-language-abd4d5e2e7eb",
        "read_more_link": "",
        "language": "en",
        "title": "How to Pick Your First Programming Language",
        "top_image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*v7Z90xAVU1c3A7Zw",
        "meta_img": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*v7Z90xAVU1c3A7Zw",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*tWz5tlpmBPNXyAxE72HRvw.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*tWz5tlpmBPNXyAxE72HRvw.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jonathan Bluks",
            "medium.com"
        ],
        "publish_date": "2019-03-22T07:42:16.701000+00:00",
        "summary": "",
        "meta_description": "Every once and a while I am asked some form of the question “What Programming Language should I learn?” It seems like a pretty popular question amongst newcomers to the Tech Industry, as evidenced by…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@jonathanbluks/how-to-pick-your-first-programming-language-abd4d5e2e7eb",
        "text": "Every once and a while I am asked some form of the question “What Programming Language should I learn?”\n\nIt seems like a pretty popular question amongst newcomers to the Tech Industry, as evidenced by countless questions on Quora such as:\n\nBetween Java and Python, which one is better to learn first and why?\n\nIs C# better than Java?\n\nAll else being equal, which is better to learn today: C, C#/.Net, C++, or Java?\n\nWhich are the 5 programming languages most likely to become extinct in the coming years?\n\nGiven all of the languages that exist, and all of the technologies related to these languages, it’s understandable that the question of what programming language to learn seems overwhelming.\n\nThese questions are driven by an anxiety about learning “the wrong” thing. The fear that efforts will be wasted and that a career in development will be short-lived because of a decision to learn a “the wrong language” or technology that “went extinct”, like the dinosaurs.\n\nIf you feel this anxiety, know that you are not alone, and…read on.\n\nSame As It Ever Was\n\nThere is a perception that technology moves so quickly that skills learned 5 years ago are now wasted. The web space in particular seems to have a high churn rate with numerous frameworks and techniques competing for building modern, client-side web applications. But, in the grand scheme of things, the web still works the same today as it has since it first began, and building client side apps isn’t that much different from building the old server-side apps. And all of these frameworks (Angular, Vue, Preact, React, Ember, etc) all accomplish the same things in similar ways.\n\nChanges in technology are a lot like the waves in the ocean — There is a lot of activity (churn) at the surface, but underneath the changes are much slower and steady, in some cases virtually unchanging. For example, our computers today work exactly as described by John Von Neumann in 1945. Here are 3 other quick examples:\n\nThe underlying OS on Mac devices is based on Operating System designs that are close to 50 years old: If you are using a Mac/iPhone, even a fancy Apple Watch, you are using the OSX/iOS operating system inspired by the Unix Operating System from the 1970s, adopted by Apple via FreeBSD through NeXT in the 1990s for XNU, the basis of all Apple devices.\n\nThe popular main stream languages currently used are between 20–30 years old: Ruby, Python, PHP, Java, C#, JavaScript emerged around the same time in the mid-1990s give or take a few years. Each have found various niches and advantages within the our current technology ecosystem of web/mobile/desktop — and the emerging IoT and AR/VR/MR spaces. All are inspired by previous languages such as C/SmallTalk/Lisp which are 40–50 years old, and are still around today.\n\n43% of banking systems are built on COBOL. 80% of in-person transactions use COBOL. 95% of ATM swipes rely on COBOL. 220 billion lines of COBOL are in use today: The classic example of how persistent old technology is COBOL. At 60 years old, it is still widely used through the world and is not going away anytime soon, because once technology becomes deeply embedded into a system, it is really hard to change. The costs of replacing systems and the risk in doing so is massive, especially in the financial industry, so it stays, and continues to do the job it was built to do decades ago.\n\nTechnology just doesn’t change as quickly as people imagine, and even when it does, it is evolutionary, which means that any skills you learned at one point can be brought forward into the next level of evolution. Just because a language/technology you recently learned falls out of favour doesn’t mean you need to die off with it. You can remember the good times and move forward into the future.\n\nIf you take a wide-angle view of technology, you will see that everything you learn fits into the bigger picture, and strengthens your technological understanding. It is all transferable and connected. Anxiety about learning the wrong technology is misplaced, and really, things are the same as it ever was.\n\nLearn One Language, and Learn it Well\n\nWhat should you do if you are starting down the path of being a developer?\n\nPick a language and spend some time learning that one language.\n\nBut here is the secret: It doesn’t matter which language you pick.\n\nJust get started.\n\nAll you really need to do is learn how to program and the underlying paradigms used in programming, the language you use is not that important. The first language you learn will teach you that skill, and from there you can build on your foundation with other languages/technologies. There might be harder or easier languages to learn, or more popular/less popular languages to learn. But, everything you learn will move you forward.\n\nAnd what is even more important than learning a single language is understanding the technology ecosystem and how all the pieces come together, for example in web or mobile. A particular language is only one aspect of the ecosystem.\n\nBut still you say, which language should I pick? Here are some suggestions:\n\nRoll the dice. There are about 6 mainstream languages give or take (Ruby, Python, C#, Java, JavaScript, PHP). Leave it to chance and whatever number you roll, that’s your language.\n\nLearn what your friends are learning. If you know some people who are learning a language or already know a language, team up and learn with/from them. Learning is always more fun with others.\n\nPick one with the name that sounds cool or with the coolest logo. This is like the wine strategy: If you know very little about wine, you can always go by the marketing. Which name/branding appeals to you? I think Python is pretty cool, kind of badass and edgy…\n\nLet the Universe decide. Does a programming language keep showing up in your day-to-day life like that cute barista you keep seeing around? Trust your inner self — that’s the Universe trying to get through to you. Just go for it.\n\nAsk yourself some Career Questions. What company do I really want to work for? And/or what industry/domain do I find exciting? If you know the answers to these questions, then you should learn the language(s) most popular in the company/industry that you are drawn to. For example, if you really want to build iOS apps, you’ll have to learn Swift; for Android, Java. Fancy the web? You’ll encounter JavaScript sooner or later. You can also use JavaScript if you want to do mobile, and even desktop. 3 birds, 1 stone. If you truly want to take a rational approach, then research the companies/industries that interest you, and you will find your answer.\n\nLearn whatever a specific job requires. Are you currently being offered a job, or applying for a job that requires a language you don’t know? You should probably learn that. Pronto.\n\nBonus Secret\n\nHere’s a bonus secret for free: If you get bored with a language, you can always learn another one. It’s not that hard once you get the hang of it.\n\nSeriously. Just because you learned a language this year, doesn’t mean you couldn’t learn another one next year if you really wanted. It really doesn’t take that long to learn a language — you can become fluent within a few weeks, competent within a few months, strong in a year or two.\n\nLearning a language today doesn’t mean you’re married to it.\n\nUnless you are in love with it, then letting go is going to be difficult."
    }
}