{
    "id": "dbpedia_465_0",
    "rank": 8,
    "data": {
        "url": "https://kernelshaman.blogspot.com/2021/02/building-xnu-for-macos-112-intel-apple.html",
        "read_more_link": "",
        "language": "en",
        "title": "Apple Kernel Development: Building XNU for macOS 11.2 (Intel + Apple Silicon)",
        "top_image": "https://kernelshaman.blogspot.com/favicon.ico",
        "meta_img": "https://kernelshaman.blogspot.com/favicon.ico",
        "images": [
            "https://resources.blogblog.com/img/icon18_edit_allbkg.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Compile open source XNU for Big Sur 11.2: arm64e + x86_64",
        "meta_lang": "en",
        "meta_favicon": "https://kernelshaman.blogspot.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://kernelshaman.blogspot.com/2021/02/building-xnu-for-macos-112-intel-apple.html",
        "text": "The macOS Big Sur 11.2 kernel (XNU) source has been released here: source , tarball.\n\nMy previous post on building XNU for macOS 11.0.1 described the method for compiling open source XNU for Intel Macs. This post details how to compile XNU for both Intel and Apple silicon Macs, and how to boot the custom kernel on both platforms. Note that it is not possible to build or boot a custom XNU on Apple silicon Macs before macOS 11.2.\n\nBuilding XNU requires some patience, and some open source dependencies which are not pre-installed. This post walks through all the steps necessary to build the open source version of XNU on supported Apple hardware. Some of the steps have changed slightly from the previous process of building for Intel only. Please read carefully!\n\nTL;DR\n\nI have updated the makefile which automates the downloading and building of all prerequisites. The file now supports Big Sur Intel and Apple silicon kernels, and the new default macOS version is 11.2. It will build the prerequisites necessary to build both the Intel and Apple silicon kernel. You can manually grab it like:\n\ncurl https://jeremya.com/sw/Makefile.xnudeps > Makefile.xnudeps\n\nand invoke it like:\n\nmake -f Makefile.xnudeps\n\nThis makefile will automatically detect the correct versions of source code to download based on the version of macOS you specify. By default, the version is 11.2, however you can select a different version like:\n\nmake -f Makefile.xnudeps macos_version=10.15.3 xnudeps\n\nYou might need a different version of Xcode installed when building for previous OS versions. You can also see other features of the Makefile using the help target.\n\nAfter building the prerequisites, you can compile XNU. On Apple silicon Macs, this now requires some bits from the Kernel Debug Kit (KDK) which is available for download from developer.appple.com. Building XNU for Apple silicon Macs requires specifying the platform name. See below for a table of supported platforms.\n\nSetup Xcode\n\nIf you have not downloaded and installed Xcode, you will first need to do a small bit of setup to be able to use the command line tools. The steps to install and setup a specific version of Xcode are as follows:\n\nDownload the xip package from developer.apple.com/downloads/more. The particular version you select may depend on what version of XNU you want to compile. You will need a developer account to download Xcode this way.\n\nUnpack the xip package by double clicking on it, or using the command line:\n\n$ xip --expand Xcode_{ver}.xip\n\nSelect the new xcode:\n\n$ sudo xcode-select -s path/to/Xcode.app/Contents/Developer\n\nAgree to the license:\n\n$ sudo xcodebuild -license\n\nMake sure it works:\n\n$ xcrun -sdk macosx -show-sdk-path\n\n$ clang -v\n\nManual XNU Building\n\nNOTE: these steps can be done from either an Apple silicon Mac or an Intel Mac. The Xcode toolchain will happily cross-compile for the architecture(s) you specify!\n\nDownload and Install Xcode\n\nMake sure you have at least Xcode 12.4 installed. You can install it via the App Store, or by manual download here: https://developer.apple.com/download/more/\n\nNOTE: for older versions of macOS, you may need older versions of Xcode which are only available via download from developer.apple.com. You need a developer account to download from that site.\n\nDownload and Install the KDK\n\nBuilding an open source kernel for an Apple silicon Mac requires content from the Kernel Debug Kit. If you are building only for Intel macs, you can skip this step\n\nDownload the KDK package here (you will need a developer account). Or you can visit https://developer.apple.com/download/more/, search for \"Kernel Debug Kit\", and download/install the package corresponding to the version of macOS Big Sur you are compiling (ensure the version is at least 11.2), e.g. \"Kernel Debug Kit 11.2 build 20D64\".\n\nOnce complete, the KDK should be installed to: /Library/Developer/KDKs/KDK_{ver}_{build}.kdk where {ver} is the OS version, e.g., 11.2, and {build} is the build number, e.g., 20D64.\n\nYou can save this path for later, e.g.,\n\nexport KDK=/Library/Developer/KDKs/KDK_11.2_20D64.kdk\n\nDownload the source\n\nexport TARBALLS=https://opensource.apple.com/tarballs\n\ncurl -O ${TARBALLS}/dtrace/dtrace-370.40.1.tar.gz\n\ncurl -O ${TARBALLS}/AvailabilityVersions/AvailabilityVersions-70.tar.gz\n\ncurl -O ${TARBALLS}/libdispatch/libdispatch-1271.40.12.tar.gz\n\ncurl -O ${TARBALLS}/xnu/xnu-7195.81.3.tar.gz\n\nBuild CTF tools from dtrace\n\ntar zxf dtrace-370.40.1.tar.gz\n\ncd dtrace-370.40.1\n\nxcodebuild install -sdk macosx -target ctfconvert \\\n\n-target ctfdump -target ctfmerge \\\n\nARCHS='x86_64 arm64' VALID_ARCHS='x86_64 arm64' DSTROOT=$PWD/dst\n\nexport TOOLCHAIN=`cd $(xcrun -sdk macosx -show-sdk-platform-path)/../../Toolchains/XcodeDefault.xctoolchain && pwd`\n\nsudo ditto \"$PWD/dst/$TOOLCHAIN\" \"$TOOLCHAIN\"\n\ncd ..\n\nInstall AvailabilityVersions\n\ntar zxf AvailabilityVersions-70.tar.gz\n\ncd AvailabilityVersions-70\n\nmake install\n\nsudo ditto \"$PWD/dst/usr/local/libexec\" \\\n\n\"$(xcrun -sdk macosx -show-sdk-path)/usr/local/libexec\"\n\ncd ..\n\nInstall XNU headers\n\ntar zxf xnu-7195.81.3.tar.gz\n\ncd xnu-7195.81.3\n\nmake SDKROOT=macosx ARCH_CONFIGS=\"X86_64 ARM64\" installhdrs\n\nsudo ditto \"$PWD/BUILD/dst\" \"$(xcrun -sdk macosx -show-sdk-path)\"\n\ncd ..\n\nBuild libfirehose from libdispatch\n\ntar zxf libdispatch-1271.40.12.tar.gz\n\ncd libdispatch-1271.40.12\n\nxcodebuild install -sdk macosx ARCHS='x86_64 arm64e' \\\n\nVALID_ARCHS='x86_64 arm64e' -target libfirehose_kernel \\\n\nPRODUCT_NAME=firehose_kernel DSTROOT=$PWD/dst\n\nsudo ditto \"$PWD/dst/usr/local\" \\\n\n\"$(xcrun -sdk macosx -show-sdk-path)/usr/local\"\n\ncd ..\n\nBuild XNU for Intel Macs\n\ncd xnu-7195.81.3\n\nmake SDKROOT=macosx ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=RELEASE\n\nNOTE that this make invocation is equivalent:\n\nmake SDKROOT=macosx TARGET_CONFIGS=\"RELEASE X86_64 NONE\"\n\nBuild XNU for Apple silicon\n\ncd xnu-7195.81.3\n\nmake SDKROOT=macosx KDKROOT=path/to/your/KDK \\\n\nTARGET_CONFIGS=\"RELEASE ARM64 {PLATFORM}\"\n\nYou can use the ${KDK} environment variable you saved from the KDK installation, or a manual path which should look like:\n\nexport KDK=/Library/Developer/KDKs/KDK_11.2_20D64.kdk\n\nThe {PLATFORM} should be set based on your machine. The supported platforms are:\n\n{PLATFORM}Mac Model T8020 Developer Transition Kit\n\n(ADP3,2) T8101 MacBookPro17,1\n\nMacBookAir10,1\n\nMacmini9,1\n\ne.g. to build for the MacBookAir10,1, you would use:\n\nmake SDKROOT=macosx TARGET_CONFIGS=\"RELEASE ARM64 T8101\"\n\nAdditional build options (for both Intel and Apple silicon)\n\nSpeed up the link by adding BUILD_LTO=0 to your xnu make invocation\n\nBuild the development kernel by replacing RELEASE with DEVELOPMENT in your xnu make invocation\n\nSee colorful build output by adding LOGCOLORS=y to your xnu make invocation\n\nMake the build output stay on a single line by adding CONCISE=1 to your xnu make invocation\n\nInstall and Run XNU\n\nSECURITY WARNING: On Big Sur, you will need to lower your system's security in order to install and boot from a custom kernel.\n\nOn Intel Macs, you will need to disable System Integrity Protection, set the machine's Secure Boot security setting to \"No Security,\" and disable the authenticated root volume.\n\nOn Apple silicon Macs you will need to boot into Recovery Mode (hold down the power button while booting and select \"Options\"). Using the Startup Security Utility, change your system's security policy to \"Reduced Security.\" The system security will be further downgraded to \"Permissive\" via a command line tool that's also run from Recovery Mode.\n\nNOTE: while the building of XNU (and supporting tools/libraries) can be done on any Mac, the final step of building a bootable Kext Collection (KC) must be done on the device on which you will boot the newly compiled kernel.\n\nThere are significant differences in the way in which a kernel is installed on an Intel Mac vs. an Apple silicon Mac. Separate instructions are given for each platform below.\n\nIntel Mac: Install and Run\n\nAfter the final build step, you should have a new kernel built in {xnu}/BUILD/obj/kernel[.development]. In order to run this kernel on Big Sur (running on an Intel Mac), you will need to rebuild the kext collection (KC) artifacts. KC artifacts can be generated using the kmutil command, specifically the create subcommand, which allows you to generate custom KCs necessary to boot the system. For more information on the KC boot artifact format, check out the kmutil man page: man kmutil\n\nInstalling a kernel could potentially render your system un-bootable, so trying this out in a VM first is recommended!\n\nInstall and Run Your kernel\n\nBuild the KCs\n\ncd xnu-7195.81.3\n\nkmutil create -a x86_64 -Z -n boot sys \\\n\n-B BUILD/BootKernelExtensions.kc \\\n\n-S BUILD/SystemKernelExtensions.kc \\\n\n-k BUILD/obj/kernel \\\n\n--elide-identifier com.apple.driver.AppleIntelTGLGraphicsFramebuffer\n\n(the AppleIntelTGLGraphicsFramebuffer will not link against the open source xnu kernel)\n\nMount a live view of the filesystem\n\nmkdir BUILD/mnt\n\nsudo mount -o nobrowse -t apfs /dev/diskMsN $PWD/BUILD/mnt\n\n(diskMsN can be found by running mount, looking for the root mount's device, and chopping off the last \"s\", e.g. if your root is /dev/disk1s2s3, you'll mount /dev/disk1s2)\n\nPlace the kernel+KCs into the live volume\n\nsudo ditto BUILD/BootKernelExtensions.kc \"$PWD/BUILD/mnt/System/Library/KernelCollections/BootKernelExtensions.kc.development\"\n\nsudo ditto BUILD/SystemKernelExtensions.kc \"$PWD/BUILD/mnt/System/Library/KernelCollections/SystemKernelExtensions.kc.development\"\n\nsudo ditto BUILD/obj/kernel \"$PWD/BUILD/mnt/System/Library/Kernels/kernel.development\"\n\n(NOTE: \"development\" can be replaced with any short string, e.g., \"usr\". I recommend using a suffix in order to easily maintain a fallback from which you can recover your system)\n\nBless the new KCs (copy them to the appropriate Preboot volume)\n\nsudo bless --folder $PWD/BUILD/mnt/System/Library/CoreServices \\\n\n--bootefi --create-snapshot\n\nSetup boot-args to select the new KC\n\nsudo nvram boot-args=\"kcsuffix=development wlan.skywalk.enable=0\"\n\n(replace development with your chosen suffix)\n\nNOTE: the wlan.skywalk.enable=0 boot-arg is necessary to disable the use of skywalk in the WLAN driver as Skywalk is not part of the open source kernel.\n\nNOTE: If you run into panics related to Skywalk, you may also need to add the dk=0 boot-arg to disable DriverKit drivers. Networking DriverKit drivers are Skywalk clients.\n\nReboot!\n\nNOTE: due to missing network (Skywalk) and power management (XCPM) functionality, your machine will be missing some features. For example, sleep/wake will not work.\n\nThere are a few things to be aware of in the new kernel / kext management world on Intel Macs.\n\nIf your machine becomes un-bootable, you can boot into Recovery Mode (by holding down the option key during boot and pressing Cmd-r at the boot picker prompt), opening up terminal, and setting your kcsuffix boot-arg to release. If you used a suffix for your KCs, this will boot from the KCs originally supplied by Apple.\n\nThe filenames are important. The booter will load the BootKernelExtensions.kc[.suffix] file into memory, and the kernelmanagerd user space daemon will attempt to mmap the SystemKernelExtensions.kc[.suffix] file corresponding to the booted KC.\n\nThe boot and system KCs must be generated together because the system KC is linked against the boot KC. The system will panic if there is a mis-match.\n\nBy disabling the authenticated root volume, and booting from a new snapshot, you open your system up to evil maid attacks. In order to re-enable all of the security on the machine, you will need to go through a software update (an update to the current system version should work).\n\nIt may also be useful to use the following boot-args to see serial output from the kernel as it boots:\n\nserial=3 -v\n\nApple silicon Mac: Install and Run\n\nInstalling a custom kernel on an Apple silicon Mac is a significantly different process than on an Intel Mac. Similarly to an Intel Mac, you will need to build a kext collection, however, the contents of the collection need to be exactly specified and the collection can only be installed in Recovery Mode via a special kmutil command.\n\nAfter the final build step, you should have a new kernel built in {xnu}/BUILD/obj/kernel[.development].{platform}. For example, {xnu}/BUILD/obj/kernel.development.T8101. In order to run this kernel on your Apple silicon Mac, you will need to build a kext collection (KC) that exactly mirrors the collection on your running machine. The set of kexts currently built into the running KC can be listed using the kmutil inspect command, and a new KC can be linked using the kmutil create command. For more information on the boot artifact format, check out the kmutil man page: man kmutil. On Apple silicon Macs, only one single KC is used there is no SystemKernelExtensions.kc file as there is on Intel Macs.\n\nInstall and Run Your kernel\n\nBuild the KC (assuming T8101 development kernel)\n\ncd xnu-7195.81.3\n\nkmutil create -a arm64e -z -V development -n boot \\\n\n-B BUILD/OpenSource.kc \\\n\n-k BUILD/obj/kernel.development.t8101 \\\n\n-r /System/Library/Extensions \\\n\n-r /System/Library/DriverExtensions \\\n\n-x \\\n\n$(kmutil inspect -V release --no-header \\\n\n| grep -v \"SEPHiber\" | awk '{print \" -b \"$1; }')\n\nNOTE: this command uses a nested kmutil invocation to gather the list of drivers built into the KC your system has booted. The kmutil inspect utility will list all the driver bundle IDs in the running / booted KC. The first piped command filters out the SEP hibernation driver because that won't link with the open source kernel. Then we pass the set of bundle IDs to awk which prepends -b to each. This constructs the explicit command-line list of all bundle IDs for the outer kmutil invocation.\n\nNOTE: the file name of the KC does not matter. Here I've chosen OpenSource.kc, but because of the way this KC is booted on Apple silicon Macs, the name does not matter in the same way it does on an Intel Mac.\n\nNOTE: you can replace the first -V development with -V release if you built the release kernel, however you shouldn't replace the -V release in the kmutil inspect invocation because it may cause unwanted output to stdout that results in a failed call to kmutil create.\n\nBoot into Recovery Mode\n\nShutdown the computer\n\nPower on the computer by clicking the power button, then hold the power button until you see \"Loading startup options...\"\n\nSelect \"Options\" and then \"Continue\"\n\nFrom the \"Utilities\" menu, select \"Terminal\"\n\nDisable SIP and Set boot-args (one time operation)\n\nFrom the Recovery mode terminal run:\n\ncsrutil disable\n\n(follow the prompts and enter your password)\n\nbputil -a\n\n(this enables custom boot-args to be sent to the kernel)\n\nReboot\n\nFrom the Terminal in the main OS run:\n\nsudo nvram boot-args=\"wlan.skywalk.enable=0 dk=0\"\n\n(Note that dk=0 disables DriverKit)\n\nBoot back into Recovery Mode (see step 2).\n\nInstall the new KC\n\nFrom the Recovery mode terminal run:\n\ncd /Volumes/Macintosh\\ HD/path/to/xnu\n\n(change directories to the place where you compiled XNU - replace \"Macintosh HD\" with the name of your hard disk, and append the path to the xnu source, e.g.\n\ncd /Volumes/Macintosh\\ HD/Users/jeremy/sw/xnu-7195.81.3)\n\nkmutil configure-boot -v /Volumes/Macintosh\\ HD -c BUILD/OpenSource.kc\n\n(replace \"Macintosh HD\" with the name of your hard disk, and use the same path to the KC you built earlier)\n\nReboot!\n\nCAVEAT: the kmutil configure-boot process will only work on the first macOS volume. If you have multiple bootable volumes, you will only be able to boot a custom kernel on the first installation.\n\nNOTE: due to some missing functionality in the open source XNU, your machine will be missing some features. For example, hibernate will not work, and apps run under Rosetta will not work.\n\nThere are a few things to be aware of in the new kernel / kext management world on Apple silicon Macs."
    }
}