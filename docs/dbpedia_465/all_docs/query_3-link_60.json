{
    "id": "dbpedia_465_3",
    "rank": 60,
    "data": {
        "url": "https://appleinsider.com/articles/07/11/01/an_introductory_mac_os_x_leopard_review_developer_tools",
        "read_more_link": "",
        "language": "en",
        "title": "An Introductory Mac OS X Leopard Review: Developer Tools",
        "top_image": "https://photos2.insidercdn.com/leopard-rev-dev-tools-1.png",
        "meta_img": "https://photos2.insidercdn.com/leopard-rev-dev-tools-1.png",
        "images": [
            "https://photos5.appleinsider.com/v10/images/footer-ai-logo-2x.png",
            "https://photos5.appleinsider.com/gallery/prince+mclean.jpg",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-1.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-2.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-3.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-4.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-5.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-6.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-7.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-8.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-9.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-10.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-11.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-12.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-13.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-14.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-15.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-16.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-17.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-18.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-19.png",
            "https://photos2.insidercdn.com/leopard-rev-dev-tools-20.png",
            "https://photos5.appleinsider.com/gallery/60775-125106-iPhone-16-and-iPohone-16-Pro-Max-m.jpg",
            "https://photos5.appleinsider.com/gallery/60792-125146-iphoneflipheader-m.jpg",
            "https://photos5.appleinsider.com/gallery/59304-121043-000-lede-M4-MacBook-Pro-m.jpg",
            "https://photos5.appleinsider.com/gallery/60767-125079-SSN-m.jpg",
            "https://photos5.appleinsider.com/gallery/60712-125032-60616-124774-headerip16-xl-m.jpg",
            "https://photos5.appleinsider.com/gallery/60757-125067-14-inch-macbook-pro-m3-pro-1499-copy-m.jpg",
            "https://photos5.appleinsider.com/gallery/60770-125083-m3-macbook-air-daily-deal-m.jpg",
            "https://photos5.appleinsider.com/gallery/60608-124721-60056-123239-59483-121415-Safari-update2-xl-xl-m.jpg",
            "https://photos5.appleinsider.com/gallery/60299-123940-Bongo-lede-m.jpg",
            "https://photos5.appleinsider.com/gallery/60179-123603-cropped-FK-EUNFXMAIEwXG-m.jpg",
            "https://photos5.appleinsider.com/gallery/60699-124959-iphone15pluspixel9-m.jpg",
            "https://photos5.appleinsider.com/gallery/60680-124891-provpixelheader-m.jpg",
            "https://photos5.appleinsider.com/gallery/60619-124749-appletv4kgoogletvstreamer-m.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76684.jpg",
            "https://photos5.appleinsider.com/gallery/malcolm+owen.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76683.jpg",
            "https://photos5.appleinsider.com/gallery/mike+wuerthele.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76682.jpg",
            "https://photos5.appleinsider.com/gallery/christine+mckee.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76681.jpg",
            "https://photos5.appleinsider.com/gallery/william+gallagher.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76680.jpg",
            "https://photos5.appleinsider.com/gallery/malcolm+owen.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76679.jpg",
            "https://photos5.appleinsider.com/gallery/amber+neely.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76678.jpg",
            "https://photos5.appleinsider.com/gallery/malcolm+owen.jpg",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/76677.jpg",
            "https://photos5.appleinsider.com/gallery/amber+neely.jpg",
            "https://photos5.appleinsider.com/gallery/60275-124949-siriinadatacenter-m.jpg",
            "https://photos5.appleinsider.com/gallery/60663-124846-636391815321768179-iowa-datacenter-us-aerial-view-m.jpg",
            "https://photos5.appleinsider.com/gallery/60634-124786-31543-52918-whitehouse-xl-m.jpg",
            "https://photos5.appleinsider.com/gallery/60775-125106-iPhone-16-and-iPohone-16-Pro-Max-m.jpg",
            "https://photos5.appleinsider.com/gallery/60682-124888-iOS-181-Beta-2-download-m.jpg",
            "https://photos5.appleinsider.com/gallery/59455-124863-emulator-iphones-m.jpg",
            "https://photos5.appleinsider.com/gallery/60227-124695-DSC01804-m.jpg",
            "https://photos5.appleinsider.com/gallery/60651-124992-Backbone1-m.jpg",
            "https://photos5.appleinsider.com/gallery/60333-124789-VP29-m.jpg",
            "https://photos5.appleinsider.com/v10/images/footer-ai-logo-2x.png",
            "https://photos5.appleinsider.com/apps/ipad/images/articles/{{ id }}.jpg",
            "https://appleinsider.com/articles/07/11/01/{{ authorImage }}"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Apple",
            "Apple Inc",
            "iPhone",
            "iPad",
            "iPod touch",
            "iPod nano",
            "Apple TV",
            "Apple",
            "iPod shuffle",
            "iphone 6",
            "iphone 6s",
            "ios 9",
            "ios9",
            "iTunes",
            "i mac",
            "mac os x",
            "mac osx",
            "Apple Computer",
            "Apple Computer Inc.",
            "Mac OS X",
            "iMac",
            "iBook",
            "Mac Pro",
            "MacBook Pro",
            "Magic Pad",
            "Magic Mouse",
            "iPod classic",
            "App Store",
            "iTunes Store",
            "iBook Store",
            "mac book",
            "Microsoft",
            "Adobe",
            "Research in Motion",
            "RIM",
            "Nokia",
            "Samsung",
            "Google",
            "Nvidia",
            "Intel"
        ],
        "tags": null,
        "authors": [
            "Prince McLean"
        ],
        "publish_date": "2007-11-01T12:00:00+00:00",
        "summary": "",
        "meta_description": "Among all of the new and improved applications Apple delivers to users in Mac OS X 10.5 Leopard, some of the most important are those that developers can use to build applications of their own. If you're not a hard core programmer, Leopard also offers a variety of more accessible tools: Automator for scripting, DashCode for building widgets, and Quartz Composer for creating audio and visual plugins, screen savers, image filters for iChat and music visualizations for iTunes. Here's the trail Apple's developer tools have followed, and how Apple nearly killed itself several times by not providing adequate tools in the past.",
        "meta_lang": "en",
        "meta_favicon": "https://photos5.appleinsider.com/v9/images/apple-touch-icon-57.png",
        "meta_site_name": "AppleInsider",
        "canonical_link": "https://appleinsider.com/articles/07/11/01/an_introductory_mac_os_x_leopard_review_developer_tools",
        "text": "Among all of the new and improved applications Apple delivers to users in Mac OS X 10.5 Leopard, some of the most important are those that developers can use to build applications of their own. If you're not a hard core programmer, Leopard also offers a variety of more accessible tools: Automator for scripting, DashCode for building widgets, and Quartz Composer for creating audio and visual plugins, screen savers, image filters for iChat and music visualizations for iTunes. Here's the trail Apple's developer tools have followed, and how Apple nearly killed itself several times by not providing adequate tools in the past.\n\nIn the late 70s, Apple founder Steve Wozniak wrote the original BASIC interpreter for the Apple II. Like most early software, it originally shipped on audio tape and required tedious loading from a data cassette player. Once loaded, users could write their own programs. The ability to write those software programs contributed a lot of value to systems, as the base system couldn't really do anything itself. In 1979 VisiCalc arrived and delivered a the first really practical application for buying a home computer.\n\nWozniak never got around to delivering support for floating point math in his \"Apple BASIC,\" so the company licensed a BASIC interpreter from a tiny operation from New Mexico called Microsoft. That product was called Applesoft BASIC, and Wozniak's earlier version became known as Integer BASIC.\n\nMicrosoft's version was very slow, creating a demand for an additional BASIC compiler, which Microsoft also supplied as a solution to the problem. Relying on Microsoft for its developer tools turned out to be a catastrophic problem for Apple, which signed itself into an eight year contract covering Applesoft Basic.\n\nAs Apple's Macintosh project was beginning to take shape in 1981, the company decided that it should deliver its own programming environment for the Mac rather than again delegating the task away to a third party. Apple feared that outsiders might not \"get\" the new Mac user interface that it had been investing so much research and development into perfecting.\n\nMicrosoft's contract for Applesoft BASIC expired in 1985, just as Apple was preparing to release its own MacBASIC. Sure enough, when Microsoft delivered its own BASIC for the Mac, it used a console interface rather than taking advantage of the Mac's new graphical environment.\n\nAfter discovering Apple was planning to release its own, superior MacBASIC, Bill Gates was livid. His Applesoft BASIC was destined to be obsolete within a few years, but he also knew Apple was still making most of its profits from Apple II systems. Gates exploited that fact to tie the renewal of the ongoing Applesoft BASIC contract into a deal where Microsoft would buy Apple's MacBASIC for $1 and sandbag it.\n\nGates also tied in two years of exclusive development of the new Excel for Macintosh but then demanded a perpetual license of Apple's Mac interface for use in Windows 1.0. Apple CEO John Sculley agreed to the deal, and the result was that Apple was again left without control over its own development tools, in addition to now being unable to stop Microsoft from eventually appropriating the entire Mac desktop over the next decade. Two years later, Microsoft ported Excel for Windows and Applesoft became largely obsolete; however, Apple end up stranded with poor development tools from Microsoft while giving away its unique technologies to the company.\n\nWhile MacBASIC was intended to be a consumer level development tool, Apple also delivered tools geared toward professional developers. These were partly inherited from the Lisa, which had shipped a year prior to the Macintosh with the Lisa Workshop, a complete development environment, albeit based in a text console environment.\n\nLisa also shipped with a full productivity suite called the Lisa Office System 7/7, which included a the LisaWrite word processor, LisaCalc spreadsheet, LisaGraphs for charting, LisaList for outlines, LisaProject for task scheduling, LisaDraw for art, and LisaTerminal for serial communications.\n\nThe original Mac only shipped with MacWrite, MacPaint, MacDraw, MacProject, MacTerminal, and a beta of MacBASIC. It lacked the full Lisa suite, in part because Apple didn't assign the same resources to the smaller Mac team, and in part because it was trying to encourage more third party support, and didn't want to step on the toes of the very developers it was courting. In large part, that again meant catering to and dependence upon Microsoft, which shipped Word and Excel shortly after the Mac's release as its first significant third party applications.\n\nIn order to make the Mac easier to program than previous generations of computers such as the Apple II or the IBM PC, Apple included libraries called the Mac Toolbox that made it easier to follow the conventions of the Apple Human Interface Guidelines, and gave applications a lot of common functionality for free.\n\nFor example, prior to the Mac every application managed its own printer support; individual word processors came with support files for a specific list of printers. On the Mac, a unified printing interface made installing a printer a system-wide feature that enabled all apps to print using the same dialog box. How everything worked was defined in great detail in \"Human Interface Guidelines: The Apple Desktop Interface,\" (excerpt below) which defined details we now take for granted as obvious.\n\nIn 1985, Rick Meyers, Jeff Parrish, and Dan Smith began work at Apple for the successor to the Lisa Workshop for the Mac, called the Macintosh Programmers' Workshop. It shipped in late 1986.\n\nMPW (below) supported object-oriented Pascal (and later C, and C++ compilers licensed from Lucid under the name MrC/MrCpp) and a 68k assembler, and shipped with a separate debugging tool. Apple's MPW was priced sky high, well out of the range of hobbyist programmers.\n\nIn order to offer a more accessible development environment, Bill Atkinson, Apple's developer behind QuickDraw, created HyperCard. It made the task of building a scripted presentation easy even for non-technical users. Atkinson insisted that Apple bundle the program for free, and this led to it being widely used and wildly popular from its release in 1987 through the mid 90s.\n\nIn 1991's Mac System 7, AppleScript appeared as a new system service to allow any application to support a scriptable dictionary of actions that could be triggered by an external scripts. AppleScript was derived from the HyperTalk scripting language of HyperCard.\n\nIn 1989, Apple began touting the release of System 7, encouraging developers to produce \"System 7 Savvy\" applications without providing them the tools to actually do this. System 7 introduced a full color interface and support for lots of end user features, including multiple concurrent applications.\n\nIn 1991, Apple announced plans for another transition to PowerPC. While it eventually provided PowerPC development tools in MPW, by then Apple's own development tools had long been considered overpriced and underwhelming. Symantec's Think C had taken the lead as the standard environment among most 68K Mac developers.\n\nHowever, Symantec didn't offer PowerPC support, leaving Mac developers trapped between dead tools and Apple's expensive MPW. Metrowerks, an independent Canadian developer, began work on its own PowerPC development tools and was ready to release them under the name CodeWarrior in 1994, just as PowerPC Macs were about to go on sale.\n\nWithout Metrowerks, Apple's transition to PowerPC may have failed completely, just as the company itself was getting hammered by the growth of Windows and its own work on a System 7 replacement was beginning to fall apart. Apple continued to support MPW through 2001, but most developers rapidly transitioned to Metrowork's CodeWarrior (below).\n\nJean-Marie Hullot had visited Apple in the late 80s to show off his ideas for Interface Builder, a new development tool for creating a palette of interface elements which could be graphically arranged, then attached to functions. Interface Builder promised to make the development of graphical applications far faster than the existing tools offered by Apple or third parties.\n\nAfter deciding he didn't want to work at the corporate environment of Apple, Hullot shopped his idea around and ended up demonstrating Interface Builder (below, running on NeXTSTEP) at NeXT, where Jobs hired him immediately. Hullot became NeXT's Chief Technology Officer and worked on both Workspace Manager and the underlying Application Kit development frameworks that shipped as part of NeXTSTEP in 1988.\n\nNeXT supplied Project Builder as its development coding tool, and centered development around Objective-C, a language developed by Dr. Brad Cox. Objective-C enhanced C in subtle ways to deliver an easy to use, component-based approach to development. Rather than writing everything from scratch, object-oriented development seeks to reuse existing components by adding or changing features and behaviors as needed. Objective-C also strongly influenced the development of Oak at Sun, which was later branded as Java.\n\nNeXT organized dynamically loadable library into frameworks called kits. The Application Kit presented everything in the graphical interface with an objective interface; the Foundation Kit provided a similar abstraction to lower level tasks such as memory allocation, file access, and thread management.\n\nNeXT's development tools and the frameworks they used were the main value NeXT added; they attracted attention from a wide variety of serious developers, including the CIA, investment firms, academic researchers (including Tim-Berners Lee in the development of the Web) and high performance developers like id, which chose NeXTSTEP as the development tool for its DOOM World Builder. When NeXT gave up on selling its own hardware in 1993, it delivered a port of NeXTSTEP running on standard PCs, and later on HP's PA-RISC and Sun's SPARC workstations.\n\nNeXT later delivered its development and deployment tools separate from its underlying operating system, allowing \"OpenStep\" to run on top of Sun Solaris and Windows NT (below, running Project Builder). This portability and sophistication caught the attention of Apple in 1996, when it was clear the company's own in house development efforts were in shambles and needed outright replacement.\n\nApple quickly ported NeXTSTEP to PowerPC, thanks to preliminary work at NeXT to deliver a new generation of PowerPC-based NeXT computers shortly before it pulled out the hardware business entirely. After outfitting it with an appearance derived for the ill-fated Mac OS 8 Copland project, Apple shipped the results as the Rhapsody developer preview.\n\nRhapsody's Project Builder (below) supported the development of Yellow Box (OpenStep) applications that could be deployed on both Rhapsody for Mac, Rhapsody running on PCs, and Windows NT PCs running the Yellow Box runtime. Apple also planned to investigate reviving the ports for Solaris, and would not have have much trouble delivering a commercial Yellow Box on Linux. GNUStep had already begun development of an OpenStep implementation for Linux.\n\nInterface Builder for Rhapsody (below) showed off the drag and drop simplicity in rapidly creating graphical interfaces for new applications using Yellow Box.\n\nMac developers didn't want to rewrite their applications to run on Rhapsody using the Yellow Box, however. Instead, they insisted Apple add support for existing Mac code written to the classic System 7 application programming interfaces.\n\nThis required a complete re-architecture of how development would work, and the result was a new strategy designed to sell Mac hardware rather than to solve the world's incompatibility problems between platforms. NeXT had already tried to push OpenStep as a open specification for delivering cross-platform compatibility on any operating system, but enthusiastic support from partners came and went as they became distracted by other subjects and strategies.\n\nAs Apple worked to release the core OS of its new system as an open source project, it found that portions of the new Core Foundation would need to be opened up as well. The IOKit needed the ability to handle plist files and CFRunLoop functionality, but the IOKit was also part of Darwin. That forced Apple choose between opening up its Foundation technologies, or implementing a separate way to perform these tasks.\n\nThe Foundation and Application Kit developers at Apple are not interested in giving away the company's core technology frameworks as open source code. Mac OS X software engineering lead Bertrand Serlet initially insisted that the IOKit developers would have to roll their own Core Foundation-like functionality. Apple's Core OS team had been pushing the concept of open source as fair play upon the rest of the company, but nothing in Apple's XNU kernel— including portions of BSD— had any obligation to be released.\n\nAfter some convincing, Bertrand agreed that the IO team's case made sense and allowed the team to split Core Foundation into two libraries, Core Foundation proper and CFLite. The split also solved another serious internal build problem for Apple: when a new image of Mac OS X was built, 1500 projects had to be built with it. They are all built in ordered layers, but IOKit is a bit odd in that it relies on BSD, Kernel, and Core Foundation. That means it must be built after Core Foundation, but Core Foundation itself also depends on the IOKit. This circular dependency was unacceptable to Apple's Build and Integration group and would make it impossible to build a complete image.\n\nCFLite was the part of Core Foundation that IOKit depended upon and did not in turn depend on IOKit. Thus the build order became: XNU kernel, LibSystem (BSD user), CFLite, IOKit User, then Core Foundation and the rest of the system. CFLite was included as open source in Darwin, and serves as a way to share some low level Mac OS X conventions on software designed to run cross-platform.\n\nAfter working out a solid underlying architecture for developing future advancements, Apple released its first three versions of Mac OS X with the development tools ported from NeXT (below), along with support for Apple technologies such as AppleScript.\n\nIn Mac OS X, Apple made it much easier for applications to make themselves scriptable, by building support for AppleScript into the Cocoa Application Kit. Apple offered AppleScript Studio as a visual development toolset for building applications in AppleScript that made use of Cocoa application frameworks.\n\nWith Mac OS X 10.3 Panther, Apple incorporated AppleScript Studio and ProjectBuilder (above) into an integrated development environment called Xcode (below), using an entirely redesigned user interface. It offered Smart Lists, symbol browsing, integrated search results, build errors and warnings notifications, and a three pane window interface for browsing project code.\n\nIt also integrated Apple's documentation, featured code completion for Objective-C, and offered predictive compilation. A year later, apple released Xcode 1.5, which extended code completion for Java and AppleScript.\n\nWith Mac OS X 10.4 Tiger, Apple launched Xcode 2.0, with support for the new GCC 4.0 compiler and the new Quartz Composer visual programming language. A follow up update added support for WebObjects development and launched a new transition to Intel processors.\n\nApple announced that work to move to Intel would be much simpler for developers using its own Xcode tools rather than Metroworks' CodeWarrior. Motorola had acquired Metroworks in 1999, and discontinued CodeWarrior for the Mac OS as Apple announced its transition to Intel. Apple has since regularly updated its Xcode and other developer tools including Interface Builder, finally proving that it has discovered that, if it wants to be in control of its own platform, it has to manage and fully support its own development tools.\n\nIn Leopard, Apple added support in Xcode 3.0 (below) for the new Objective-C 2.0, which adds support for optional garbage collection, and 64-bit application development. It also incorporates basic version control with Project Snapshots, and offers a Research Assistant for looking up context sensitive documentation. An Organizer panel lets you drop other documentation and related files in for quick access; you can also bookmark items from Apple's included documentation in the Xcode sidebar, and subscribe to Apple's online documentation to automatically maintain the most up to date information.\n\nXcode also integrates with Sun's OpenSolaris DTrace tool, which Apple includes a graphical interface for in Leopard under the name Instruments (below, formerly code named X-Ray). Using an interface similar to GarageBand, Instruments can be set to dynamically trace memory allocation, processor use, file activity, and other factors as code runs, and compare how performance changes over time. It can also track mouse moves and keyboard clicks and then replicate a given action repeatedly to help determine why an inconsistent error is occuring. Instruments also introduces some novel, if odd, new user interface concepts, including a modal information bubble panel (below). The panel sports a Done box at the bottom, but if there's a lot of options, it can easily end up out of view behind the Dock or off the screen.\n\nInstruments also features a full screen view that blows up just the instrument trace view without displaying a toolbar or any window controls, and a mini view that shrinks the application into a translucent panel (below). To recover normal view, you counterintuitively close the panel, much as closing a Screen Sharing or iChat Theater window ends the connection. In Leopard, closing a translucent panel sometimes means quit, and sometimes means \"zoom.\"\n\nQuartz Composer uses colored Patches that are linked together by binding ports between them: pink renderers, green data processors, and blue external input patches. Input patches can listen to and generate keyboard and mouse clicks, scrolls, and movements or MIDI data and audio signals. Renders and processors can use OpenGL, Core Image, and Core Video to create and modify signals in complex ways. A collection of patches can be assembled into a macro; macros can also be nested.\n\nA complex set of patches can incorporate user actions, music changes, or even pull data pulled from the web or an RSS feed to create interactive information displays and animated visualizations. Below is the Quartz Composition file used as the new Shell screen saver in Leopard, along with a live visualization.\n\nApple's developer tools are free with Mac OS X. NeXT charged $5000 per seat for its developer tools, on top of $799 licensing for the operating system. WebObjects cost even more; that too is thrown in for free. Additionally, Apple's tools also support unique development features related to Quartz and AppleScript that didn't exist for NeXT. Whether you're a serious programmer or just want to play around with the diverse collection of tools Apple throws in for free with Leopard, there's a lot to explore. Even if you're not a developer at all, you can be glad that it's now that much easier to develop new software for the Mac."
    }
}