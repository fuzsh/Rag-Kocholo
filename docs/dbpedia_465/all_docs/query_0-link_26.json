{
    "id": "dbpedia_465_0",
    "rank": 26,
    "data": {
        "url": "https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/mac-os-architecture",
        "read_more_link": "",
        "language": "en",
        "title": "macOS Kernel & System Extensions",
        "top_image": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "meta_img": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "images": [
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-18T16:15:15.054000+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2FmuMguNrsRx2mNyNqEox4%2Ficon%2F1qCJ0VIDlWcvGSecYCDq%2Ffondo.png?alt=media&token=1e721267-450f-43f3-861b-6c4f93278e93",
        "meta_site_name": "",
        "canonical_link": "https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/mac-os-architecture",
        "text": "XNU Kernel\n\nThe core of macOS is XNU, which stands for \"X is Not Unix\". This kernel is fundamentally composed of the Mach microkernel (to be discussed later), and elements from Berkeley Software Distribution (BSD). XNU also provides a platform for kernel drivers via a system called the I/O Kit. The XNU kernel is part of the Darwin open source project, which means its source code is freely accessible.\n\nFrom a perspective of a security researcher or a Unix developer, macOS can feel quite similar to a FreeBSD system with an elegant GUI and a host of custom applications. Most applications developed for BSD will compile and run on macOS without needing modifications, as the command-line tools familiar to Unix users are all present in macOS. However, because the XNU kernel incorporates Mach, there are some significant differences between a traditional Unix-like system and macOS, and these differences might cause potential issues or provide unique advantages.\n\nOpen source version of XNU: https://opensource.apple.com/source/xnu/\n\nMach\n\nMach is a microkernel designed to be UNIX-compatible. One of its key design principles was to minimize the amount of code running in the kernel space and instead allow many typical kernel functions, such as file system, networking, and I/O, to run as user-level tasks.\n\nIn XNU, Mach is responsible for many of the critical low-level operations a kernel typically handles, such as processor scheduling, multitasking, and virtual memory management.\n\nBSD\n\nThe XNU kernel also incorporates a significant amount of code derived from the FreeBSD project. This code runs as part of the kernel along with Mach, in the same address space. However, the FreeBSD code within XNU may differ substantially from the original FreeBSD code because modifications were required to ensure its compatibility with Mach. FreeBSD contributes to many kernel operations including:\n\nProcess management\n\nSignal handling\n\nBasic security mechanisms, including user and group management\n\nSystem call infrastructure\n\nTCP/IP stack and sockets\n\nFirewall and packet filtering\n\nUnderstanding the interaction between BSD and Mach can be complex, due to their different conceptual frameworks. For instance, BSD uses processes as its fundamental executing unit, while Mach operates based on threads. This discrepancy is reconciled in XNU by associating each BSD process with a Mach task that contains exactly one Mach thread. When BSD's fork() system call is used, the BSD code within the kernel uses Mach functions to create a task and a thread structure.\n\nMoreover, Mach and BSD each maintain different security models: Mach's security model is based on port rights, whereas BSD's security model operates based on process ownership. Disparities between these two models have occasionally resulted in local privilege-escalation vulnerabilities. Apart from typical system calls, there are also Mach traps that allow user-space programs to interact with the kernel. These different elements together form the multifaceted, hybrid architecture of the macOS kernel.\n\nI/O Kit - Drivers\n\nThe I/O Kit is an open-source, object-oriented device-driver framework in the XNU kernel, handles dynamically loaded device drivers. It allows modular code to be added to the kernel on-the-fly, supporting diverse hardware.\n\nmacOS IOKit\n\nIPC - Inter Process Communication\n\nmacOS IPC - Inter Process Communication\n\nKernelcache\n\nThe kernelcache is a pre-compiled and pre-linked version of the XNU kernel, along with essential device drivers and kernel extensions. It's stored in a compressed format and gets decompressed into memory during the boot-up process. The kernelcache facilitates a faster boot time by having a ready-to-run version of the kernel and crucial drivers available, reducing the time and resources that would otherwise be spent on dynamically loading and linking these components at boot time.\n\nIn iOS it's located in /System/Library/Caches/com.apple.kernelcaches/kernelcache in macOS you can find it with find / -name kernelcache 2>/dev/null or mdfind kernelcache | grep kernelcache\n\nIt's possible to run kextstat to check the loaded kernel extensions.\n\nIMG4\n\nThe IMG4 file format is a container format used by Apple in its iOS and macOS devices for securely storing and verifying firmware components (like kernelcache). The IMG4 format includes a header and several tags which encapsulate different pieces of data including the actual payload (like a kernel or bootloader), a signature, and a set of manifest properties. The format supports cryptographic verification, allowing the device to confirm the authenticity and integrity of the firmware component before executing it.\n\nIt's usually composed of the following components:\n\nPayload (IM4P):\n\nOften compressed (LZFSE4, LZSS, â€¦)\n\nOptionally encrypted\n\nManifest (IM4M):\n\nContains Signature\n\nAdditional Key/Value dictionary\n\nRestore Info (IM4R):\n\nAlso known as APNonce\n\nPrevents replaying of some updates\n\nOPTIONAL: Usually this isn't found\n\nDecompress the Kernelcache:\n\nKernelcache Symbols\n\nSometime Apple releases kernelcache with symbols. You can download some firmwares with symbols by following links on https://theapplewiki.com.\n\nIPSW\n\nThese are Apple firmwares you can download from https://ipsw.me/. Among other files it will contains the kernelcache. To extract the files you can just unzip it.\n\nAfter extracting the firmware you will get a file like: kernelcache.release.iphone14. It's in IMG4 format, you can extract the interesting info with:\n\npyimg4\n\nimg4tool\n\nYou can check the extracted kernelcache for symbols with: nm -a kernelcache.release.iphone14.e | wc -l\n\nWith this we can now extract all the extensions or the one you are insterested in:\n\nmacOS Kernel Extensions\n\nmacOS is super restrictive to load Kernel Extensions (.kext) because of the high privileges that code will run with. Actually, by default is virtually impossible (unless a bypass is found).\n\nmacOS Kernel Extensions\n\nmacOS System Extensions\n\nInstead of using Kernel Extensions macOS created the System Extensions, which offers in user level APIs to interact with the kernel. This way, developers can avoid to use kernel extensions.\n\nmacOS System Extensions\n\nReferences"
    }
}