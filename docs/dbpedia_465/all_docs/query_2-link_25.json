{
    "id": "dbpedia_465_2",
    "rank": 25,
    "data": {
        "url": "https://github.com/apple/darwin-xnu/blob/master/bsd/net/bpf.h",
        "read_more_link": "",
        "language": "en",
        "title": "darwin-xnu/bsd/net/bpf.h at main · apple/darwin-xnu",
        "top_image": "https://opengraph.githubassets.com/8a1168d971bd84f5c024e187cc8623da090aaf95c9d30322c83eea72f325b8f5/apple/darwin-xnu",
        "meta_img": "https://opengraph.githubassets.com/8a1168d971bd84f5c024e187cc8623da090aaf95c9d30322c83eea72f325b8f5/apple/darwin-xnu",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Legacy mirror of Darwin Kernel. Replaced by https://github.com/apple-oss-distributions/xnu - darwin-xnu/bsd/net/bpf.h at main · apple/darwin-xnu",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/apple/darwin-xnu/blob/main/bsd/net/bpf.h",
        "text": "/*\n\n* Copyright (c) 2000-2018 Apple Inc. All rights reserved.\n\n*\n\n* @APPLE_OSREFERENCE_LICENSE_HEADER_START@\n\n*\n\n* This file contains Original Code and/or Modifications of Original Code\n\n* as defined in and that are subject to the Apple Public Source License\n\n* Version 2.0 (the 'License'). You may not use this file except in\n\n* compliance with the License. The rights granted to you under the License\n\n* may not be used to create, or enable the creation or redistribution of,\n\n* unlawful or unlicensed copies of an Apple operating system, or to\n\n* circumvent, violate, or enable the circumvention or violation of, any\n\n* terms of an Apple operating system software license agreement.\n\n*\n\n* Please obtain a copy of the License at\n\n* http://www.opensource.apple.com/apsl/ and read it before using this file.\n\n*\n\n* The Original Code and all software distributed under the License are\n\n* distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\n\n* EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\n\n* INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\n\n* FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\n\n* Please see the License for the specific language governing rights and\n\n* limitations under the License.\n\n*\n\n* @APPLE_OSREFERENCE_LICENSE_HEADER_END@\n\n*/\n\n/*\n\n* Copyright (c) 1990, 1991, 1993\n\n* The Regents of the University of California. All rights reserved.\n\n*\n\n* This code is derived from the Stanford/CMU enet packet filter,\n\n* (net/enet.c) distributed as part of 4.3BSD, and code contributed\n\n* to Berkeley by Steven McCanne and Van Jacobson both of Lawrence\n\n* Berkeley Laboratory.\n\n*\n\n* Redistribution and use in source and binary forms, with or without\n\n* modification, are permitted provided that the following conditions\n\n* are met:\n\n* 1. Redistributions of source code must retain the above copyright\n\n* notice, this list of conditions and the following disclaimer.\n\n* 2. Redistributions in binary form must reproduce the above copyright\n\n* notice, this list of conditions and the following disclaimer in the\n\n* documentation and/or other materials provided with the distribution.\n\n* 3. All advertising materials mentioning features or use of this software\n\n* must display the following acknowledgement:\n\n* This product includes software developed by the University of\n\n* California, Berkeley and its contributors.\n\n* 4. Neither the name of the University nor the names of its contributors\n\n* may be used to endorse or promote products derived from this software\n\n* without specific prior written permission.\n\n*\n\n* THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n\n* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n* ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n\n* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n\n* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n\n* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n\n* SUCH DAMAGE.\n\n*\n\n* @(#)bpf.h 8.1 (Berkeley) 6/10/93\n\n* @(#)bpf.h 1.34 (LBL) 6/16/96\n\n*\n\n* $FreeBSD: src/sys/net/bpf.h,v 1.21.2.3 2001/08/01 00:23:13 fenner Exp $\n\n*/\n\n/*\n\n* NOTICE: This file was modified by SPARTA, Inc. in 2006 to introduce\n\n* support for mandatory and extensible security protections. This notice\n\n* is included in support of clause 2.2 (b) of the Apple Public License,\n\n* Version 2.0.\n\n*/\n\n#ifndef _NET_BPF_H_\n\n#define _NET_BPF_H_\n\n#include <sys/param.h>\n\n#include <sys/appleapiopts.h>\n\n#include <sys/types.h>\n\n#include <sys/time.h>\n\n#include <sys/cdefs.h>\n\n#include <stdint.h>\n\n#ifdef PRIVATE\n\n#include <net/if_var.h>\n\n#include <uuid/uuid.h>\n\nstruct bpf_setup_args {\n\nuuid_t bsa_uuid;\n\nchar bsa_ifname[IFNAMSIZ];\n\n};\n\n#endif /* PRIVATE */\n\n#ifdef KERNEL\n\n#include <sys/kernel_types.h>\n\n#if !defined(__i386__) && !defined(__x86_64__)\n\n#define BPF_ALIGN 1\n\n#else /* defined(__i386__) || defined(__x86_64__) */\n\n#define BPF_ALIGN 0\n\n#endif /* defined(__i386__) || defined(__x86_64__) */\n\n#if !BPF_ALIGN\n\n#define EXTRACT_SHORT(p) ((u_int16_t)ntohs(*(u_int16_t *)(void *)p))\n\n#define EXTRACT_LONG(p) (ntohl(*(u_int32_t *)(void *)p))\n\n#else\n\n#define EXTRACT_SHORT(p) \\\n\n((u_int16_t)\\\n\n((u_int16_t)*((u_char *)p+0)<<8|\\\n\n(u_int16_t)*((u_char *)p+1)<<0))\n\n#define EXTRACT_LONG(p) \\\n\n((u_int32_t)*((u_char *)p+0)<<24|\\\n\n(u_int32_t)*((u_char *)p+1)<<16|\\\n\n(u_int32_t)*((u_char *)p+2)<<8|\\\n\n(u_int32_t)*((u_char *)p+3)<<0)\n\n#endif\n\n#endif /* KERNEL */\n\n/* BSD style release date */\n\n#define BPF_RELEASE 199606\n\ntypedef int32_t bpf_int32;\n\ntypedef u_int32_t bpf_u_int32;\n\n/*\n\n* Alignment macros. BPF_WORDALIGN rounds up to the next\n\n* even multiple of BPF_ALIGNMENT.\n\n*/\n\n#define BPF_ALIGNMENT sizeof(int32_t)\n\n#define BPF_WORDALIGN(x) (((x)+(BPF_ALIGNMENT-1))&~(BPF_ALIGNMENT-1))\n\n#define BPF_MAXINSNS 512\n\n#define BPF_MAXBUFSIZE 0x80000\n\n#define BPF_MINBUFSIZE 32\n\n/*\n\n* Structure for BIOCSETF.\n\n*/\n\nstruct bpf_program {\n\nu_int bf_len;\n\nstruct bpf_insn *bf_insns;\n\n};\n\n#ifdef KERNEL_PRIVATE\n\n/*\n\n* LP64 version of bpf_program. all pointers\n\n* grow when we're dealing with a 64-bit process.\n\n* WARNING - keep in sync with bpf_program\n\n*/\n\nstruct bpf_program64 {\n\nu_int bf_len;\n\nuser64_addr_t bf_insns __attribute__((aligned(8)));\n\n};\n\nstruct bpf_program32 {\n\nu_int bf_len;\n\nuser32_addr_t bf_insns;\n\n};\n\n#endif /* KERNEL_PRIVATE */\n\n/*\n\n* Struct returned by BIOCGSTATS.\n\n*/\n\nstruct bpf_stat {\n\nu_int bs_recv; /* number of packets received */\n\nu_int bs_drop; /* number of packets dropped */\n\n};\n\n/*\n\n* Struct return by BIOCVERSION. This represents the version number of\n\n* the filter language described by the instruction encodings below.\n\n* bpf understands a program iff kernel_major == filter_major &&\n\n* kernel_minor >= filter_minor, that is, if the value returned by the\n\n* running kernel has the same major number and a minor number equal\n\n* equal to or less than the filter being downloaded. Otherwise, the\n\n* results are undefined, meaning an error may be returned or packets\n\n* may be accepted haphazardly.\n\n* It has nothing to do with the source code version.\n\n*/\n\nstruct bpf_version {\n\nu_short bv_major;\n\nu_short bv_minor;\n\n};\n\n#if defined(__LP64__)\n\n#include <sys/_types/_timeval32.h>\n\n#define BPF_TIMEVAL timeval32\n\n#else\n\n#define BPF_TIMEVAL timeval\n\n#endif /* __LP64__ */\n\n/* Current version number of filter architecture. */\n\n#define BPF_MAJOR_VERSION 1\n\n#define BPF_MINOR_VERSION 1\n\n#define BIOCGBLEN _IOR('B',102, u_int)\n\n#define BIOCSBLEN _IOWR('B',102, u_int)\n\n#define BIOCSETF _IOW('B',103, struct bpf_program)\n\n#ifdef KERNEL_PRIVATE\n\n#define BIOCSETF64 _IOW('B',103, struct bpf_program64)\n\n#define BIOCSETF32 _IOW('B',103, struct bpf_program32)\n\n#endif /* KERNEL_PRIVATE */\n\n#define BIOCFLUSH _IO('B',104)\n\n#define BIOCPROMISC _IO('B',105)\n\n#define BIOCGDLT _IOR('B',106, u_int)\n\n#define BIOCGETIF _IOR('B',107, struct ifreq)\n\n#define BIOCSETIF _IOW('B',108, struct ifreq)\n\n#define BIOCSRTIMEOUT _IOW('B',109, struct timeval)\n\n#ifdef KERNEL_PRIVATE\n\n#define BIOCSRTIMEOUT64 _IOW('B',109, struct user64_timeval)\n\n#define BIOCSRTIMEOUT32 _IOW('B',109, struct user32_timeval)\n\n#endif /* KERNEL_PRIVATE */\n\n#define BIOCGRTIMEOUT _IOR('B',110, struct timeval)\n\n#ifdef KERNEL_PRIVATE\n\n#define BIOCGRTIMEOUT64 _IOR('B',110, struct user64_timeval)\n\n#define BIOCGRTIMEOUT32 _IOR('B',110, struct user32_timeval)\n\n#endif /* KERNEL_PRIVATE */\n\n#define BIOCGSTATS _IOR('B',111, struct bpf_stat)\n\n#define BIOCIMMEDIATE _IOW('B',112, u_int)\n\n#define BIOCVERSION _IOR('B',113, struct bpf_version)\n\n#define BIOCGRSIG _IOR('B',114, u_int)\n\n#define BIOCSRSIG _IOW('B',115, u_int)\n\n#define BIOCGHDRCMPLT _IOR('B',116, u_int)\n\n#define BIOCSHDRCMPLT _IOW('B',117, u_int)\n\n#define BIOCGSEESENT _IOR('B',118, u_int)\n\n#define BIOCSSEESENT _IOW('B',119, u_int)\n\n#define BIOCSDLT _IOW('B',120, u_int)\n\n#define BIOCGDLTLIST _IOWR('B',121, struct bpf_dltlist)\n\n#ifdef PRIVATE\n\n#define BIOCGETTC _IOR('B', 122, int)\n\n#define BIOCSETTC _IOW('B', 123, int)\n\n#define BIOCSEXTHDR _IOW('B', 124, u_int)\n\n#define BIOCGIFATTACHCOUNT _IOWR('B', 125, struct ifreq)\n\n#endif /* PRIVATE */\n\n#define BIOCSETFNR _IOW('B', 126, struct bpf_program)\n\n#ifdef KERNEL_PRIVATE\n\n#define BIOCSETFNR64 _IOW('B',126, struct bpf_program64)\n\n#define BIOCSETFNR32 _IOW('B',126, struct bpf_program32)\n\n#endif /* KERNEL_PRIVATE */\n\n#ifdef PRIVATE\n\n#define BIOCGWANTPKTAP _IOR('B', 127, u_int)\n\n#define BIOCSWANTPKTAP _IOWR('B', 127, u_int)\n\n#define BIOCSHEADDROP _IOW('B', 128, int)\n\n#define BIOCGHEADDROP _IOR('B', 128, int)\n\n#define BIOCSTRUNCATE _IOW('B', 129, u_int)\n\n#define BIOCGETUUID _IOR('B', 130, uuid_t)\n\n#define BIOCSETUP _IOW('B', 131, struct bpf_setup_args)\n\n#define BIOCSPKTHDRV2 _IOW('B', 132, int)\n\n#define BIOCGPKTHDRV2 _IOW('B', 133, int)\n\n#endif /* PRIVATE */\n\n/*\n\n* Structure prepended to each packet.\n\n*/\n\nstruct bpf_hdr {\n\nstruct BPF_TIMEVAL bh_tstamp; /* time stamp */\n\nbpf_u_int32 bh_caplen; /* length of captured portion */\n\nbpf_u_int32 bh_datalen; /* original length of packet */\n\nu_short bh_hdrlen; /* length of bpf header (this struct\n\n* plus alignment padding) */\n\n};\n\n#ifdef KERNEL\n\n/*\n\n* Because the structure above is not a multiple of 4 bytes, some compilers\n\n* will insist on inserting padding; hence, sizeof(struct bpf_hdr) won't work.\n\n* Only the kernel needs to know about it; applications use bh_hdrlen.\n\n*/\n\n#define SIZEOF_BPF_HDR (sizeof(struct bpf_hdr) <= 20 ? 18 : \\\n\nsizeof(struct bpf_hdr))\n\n#endif\n\n#ifdef PRIVATE\n\n/*\n\n* This structure must be a multiple of 4 bytes.\n\n* It includes padding and spare fields that we can use later if desired.\n\n*/\n\nstruct bpf_hdr_ext {\n\nstruct BPF_TIMEVAL bh_tstamp; /* time stamp */\n\nbpf_u_int32 bh_caplen; /* length of captured portion */\n\nbpf_u_int32 bh_datalen; /* original length of packet */\n\nu_short bh_hdrlen; /* length of bpf header */\n\nu_short bh_flags;\n\n#define BPF_HDR_EXT_FLAGS_DIR_IN 0x0000\n\n#define BPF_HDR_EXT_FLAGS_DIR_OUT 0x0001\n\npid_t bh_pid; /* process PID */\n\nchar bh_comm[MAXCOMLEN + 1]; /* process command */\n\nu_char _bh_pad2[1];\n\nu_char bh_pktflags;\n\n#define BPF_PKTFLAGS_TCP_REXMT 0x0001\n\n#define BPF_PKTFLAGS_START_SEQ 0x0002\n\n#define BPF_PKTFLAGS_LAST_PKT 0x0004\n\nu_char bh_proto; /* kernel reserved; 0 in userland */\n\nbpf_u_int32 bh_svc; /* service class */\n\nbpf_u_int32 bh_flowid; /* kernel reserved; 0 in userland */\n\nbpf_u_int32 bh_unsent_bytes; /* unsent bytes at interface */\n\nbpf_u_int32 bh_unsent_snd; /* unsent bytes at socket buffer */\n\n};\n\n#define BPF_CONTROL_NAME \"com.apple.net.bpf\"\n\nstruct bpf_mtag {\n\nchar bt_comm[MAXCOMLEN];\n\npid_t bt_pid;\n\nbpf_u_int32 bt_svc;\n\nunsigned char bt_direction;\n\n#define BPF_MTAG_DIR_IN 0\n\n#define BPF_MTAG_DIR_OUT 1\n\n};\n\n#endif /* PRIVATE */\n\n/*\n\n* Data-link level type codes.\n\n*/\n\n#define DLT_NULL 0 /* no link-layer encapsulation */\n\n#define DLT_EN10MB 1 /* Ethernet (10Mb) */\n\n#define DLT_EN3MB 2 /* Experimental Ethernet (3Mb) */\n\n#define DLT_AX25 3 /* Amateur Radio AX.25 */\n\n#define DLT_PRONET 4 /* Proteon ProNET Token Ring */\n\n#define DLT_CHAOS 5 /* Chaos */\n\n#define DLT_IEEE802 6 /* IEEE 802 Networks */\n\n#define DLT_ARCNET 7 /* ARCNET */\n\n#define DLT_SLIP 8 /* Serial Line IP */\n\n#define DLT_PPP 9 /* Point-to-point Protocol */\n\n#define DLT_FDDI 10 /* FDDI */\n\n#define DLT_ATM_RFC1483 11 /* LLC/SNAP encapsulated atm */\n\n#define DLT_RAW 12 /* raw IP */\n\n/*\n\n* These are values from BSD/OS's \"bpf.h\".\n\n* These are not the same as the values from the traditional libpcap\n\n* \"bpf.h\"; however, these values shouldn't be generated by any\n\n* OS other than BSD/OS, so the correct values to use here are the\n\n* BSD/OS values.\n\n*\n\n* Platforms that have already assigned these values to other\n\n* DLT_ codes, however, should give these codes the values\n\n* from that platform, so that programs that use these codes will\n\n* continue to compile - even though they won't correctly read\n\n* files of these types.\n\n*/\n\n#define DLT_SLIP_BSDOS 15 /* BSD/OS Serial Line IP */\n\n#define DLT_PPP_BSDOS 16 /* BSD/OS Point-to-point Protocol */\n\n/*\n\n* 17 was used for DLT_PFLOG in OpenBSD; it no longer is.\n\n*\n\n* It was DLT_LANE8023 in SuSE 6.3, so we defined LINKTYPE_PFLOG\n\n* as 117 so that pflog captures would use a link-layer header type\n\n* value that didn't collide with any other values. On all\n\n* platforms other than OpenBSD, we defined DLT_PFLOG as 117,\n\n* and we mapped between LINKTYPE_PFLOG and DLT_PFLOG.\n\n*\n\n* OpenBSD eventually switched to using 117 for DLT_PFLOG as well.\n\n*\n\n* Don't use 17 for anything else.\n\n*/\n\n/*\n\n* 18 is used for DLT_PFSYNC in OpenBSD, NetBSD, DragonFly BSD and\n\n* Mac OS X; don't use it for anything else. (FreeBSD uses 121,\n\n* which collides with DLT_HHDLC, even though it doesn't use 18\n\n* for anything and doesn't appear to have ever used it for anything.)\n\n*\n\n* We define it as 18 on those platforms; it is, unfortunately, used\n\n* for DLT_CIP in Suse 6.3, so we don't define it as DLT_PFSYNC\n\n* in general. As the packet format for it, like that for\n\n* DLT_PFLOG, is not only OS-dependent but OS-version-dependent,\n\n* we don't support printing it in tcpdump except on OSes that\n\n* have the relevant header files, so it's not that useful on\n\n* other platforms.\n\n*/\n\n#define DLT_PFSYNC 18 /* Packet filter state syncing */\n\n#define DLT_ATM_CLIP 19 /* Linux Classical-IP over ATM */\n\n/*\n\n* These values are defined by NetBSD; other platforms should refrain from\n\n* using them for other purposes, so that NetBSD savefiles with link\n\n* types of 50 or 51 can be read as this type on all platforms.\n\n*/\n\n#define DLT_PPP_SERIAL 50 /* PPP over serial with HDLC encapsulation */\n\n#define DLT_PPP_ETHER 51 /* PPP over Ethernet */\n\n/*\n\n* The Axent Raptor firewall - now the Symantec Enterprise Firewall - uses\n\n* a link-layer type of 99 for the tcpdump it supplies. The link-layer\n\n* header has 6 bytes of unknown data, something that appears to be an\n\n* Ethernet type, and 36 bytes that appear to be 0 in at least one capture\n\n* I've seen.\n\n*/\n\n#define DLT_SYMANTEC_FIREWALL 99\n\n/*\n\n* Values between 100 and 103 are used in capture file headers as\n\n* link-layer header type LINKTYPE_ values corresponding to DLT_ types\n\n* that differ between platforms; don't use those values for new DLT_\n\n* new types.\n\n*/\n\n/*\n\n* Values starting with 104 are used for newly-assigned link-layer\n\n* header type values; for those link-layer header types, the DLT_\n\n* value returned by pcap_datalink() and passed to pcap_open_dead(),\n\n* and the LINKTYPE_ value that appears in capture files, are the\n\n* same.\n\n*\n\n* DLT_MATCHING_MIN is the lowest such value; DLT_MATCHING_MAX is\n\n* the highest such value.\n\n*/\n\n#define DLT_MATCHING_MIN 104\n\n/*\n\n* This value was defined by libpcap 0.5; platforms that have defined\n\n* it with a different value should define it here with that value -\n\n* a link type of 104 in a save file will be mapped to DLT_C_HDLC,\n\n* whatever value that happens to be, so programs will correctly\n\n* handle files with that link type regardless of the value of\n\n* DLT_C_HDLC.\n\n*\n\n* The name DLT_C_HDLC was used by BSD/OS; we use that name for source\n\n* compatibility with programs written for BSD/OS.\n\n*\n\n* libpcap 0.5 defined it as DLT_CHDLC; we define DLT_CHDLC as well,\n\n* for source compatibility with programs written for libpcap 0.5.\n\n*/\n\n#define DLT_C_HDLC 104 /* Cisco HDLC */\n\n#define DLT_CHDLC DLT_C_HDLC\n\n#define DLT_IEEE802_11 105 /* IEEE 802.11 wireless */\n\n/*\n\n* Values between 106 and 107 are used in capture file headers as\n\n* link-layer types corresponding to DLT_ types that might differ\n\n* between platforms; don't use those values for new DLT_ new types.\n\n*/\n\n/*\n\n* Frame Relay; BSD/OS has a DLT_FR with a value of 11, but that collides\n\n* with other values.\n\n* DLT_FR and DLT_FRELAY packets start with the Q.922 Frame Relay header\n\n* (DLCI, etc.).\n\n*/\n\n#define DLT_FRELAY 107\n\n/*\n\n* OpenBSD DLT_LOOP, for loopback devices; it's like DLT_NULL, except\n\n* that the AF_ type in the link-layer header is in network byte order.\n\n*\n\n* OpenBSD defines it as 12, but that collides with DLT_RAW, so we\n\n* define it as 108 here. If OpenBSD picks up this file, it should\n\n* define DLT_LOOP as 12 in its version, as per the comment above -\n\n* and should not use 108 for any purpose.\n\n*/\n\n#define DLT_LOOP 108\n\n/*\n\n* Values between 109 and 112 are used in capture file headers as\n\n* link-layer types corresponding to DLT_ types that might differ\n\n* between platforms; don't use those values for new DLT_ new types.\n\n*/\n\n/*\n\n* Encapsulated packets for IPsec; DLT_ENC is 13 in OpenBSD, but that's\n\n* DLT_SLIP_BSDOS in NetBSD, so we don't use 13 for it in OSes other\n\n* than OpenBSD.\n\n*/\n\n#define DLT_ENC 109\n\n/*\n\n* This is for Linux cooked sockets.\n\n*/\n\n#define DLT_LINUX_SLL 113\n\n/*\n\n* Apple LocalTalk hardware.\n\n*/\n\n#define DLT_LTALK 114\n\n/*\n\n* Acorn Econet.\n\n*/\n\n#define DLT_ECONET 115\n\n/*\n\n* Reserved for use with OpenBSD ipfilter.\n\n*/\n\n#define DLT_IPFILTER 116\n\n/*\n\n* For use in capture-file headers as a link-layer type corresponding\n\n* to OpenBSD PF (Packet Filter) log.\n\n*/\n\n#define DLT_PFLOG 117\n\n/*\n\n* Registered for Cisco-internal use.\n\n*/\n\n#define DLT_CISCO_IOS 118\n\n/*\n\n* Reserved for 802.11 cards using the Prism II chips, with a link-layer\n\n* header including Prism monitor mode information plus an 802.11\n\n* header.\n\n*/\n\n#define DLT_PRISM_HEADER 119\n\n/*\n\n* Reserved for Aironet 802.11 cards, with an Aironet link-layer header\n\n* (see Doug Ambrisko's FreeBSD patches).\n\n*/\n\n#define DLT_AIRONET_HEADER 120\n\n/*\n\n* Reserved for Siemens HiPath HDLC. XXX\n\n*/\n\n#define DLT_HHDLC 121\n\n/*\n\n* Reserved for RFC 2625 IP-over-Fibre Channel.\n\n*/\n\n#define DLT_IP_OVER_FC 122\n\n/*\n\n* Reserved for Full Frontal ATM on Solaris.\n\n*/\n\n#define DLT_SUNATM 123\n\n/*\n\n* Reserved as per request from Kent Dahlgren <kent@praesum.com>\n\n* for private use.\n\n*/\n\n#define DLT_RIO 124 /* RapidIO */\n\n#define DLT_PCI_EXP 125 /* PCI Express */\n\n#define DLT_AURORA 126 /* Xilinx Aurora link layer */\n\n/*\n\n* BSD header for 802.11 plus a number of bits of link-layer information\n\n* including radio information.\n\n*/\n\n#ifndef DLT_IEEE802_11_RADIO\n\n#define DLT_IEEE802_11_RADIO 127\n\n#endif\n\n/*\n\n* Reserved for TZSP encapsulation.\n\n*/\n\n#define DLT_TZSP 128 /* Tazmen Sniffer Protocol */\n\n/*\n\n* Reserved for Linux ARCNET.\n\n*/\n\n#define DLT_ARCNET_LINUX 129\n\n/*\n\n* Juniper-private data link types.\n\n*/\n\n#define DLT_JUNIPER_MLPPP 130\n\n#define DLT_JUNIPER_MLFR 131\n\n#define DLT_JUNIPER_ES 132\n\n#define DLT_JUNIPER_GGSN 133\n\n#define DLT_JUNIPER_MFR 134\n\n#define DLT_JUNIPER_ATM2 135\n\n#define DLT_JUNIPER_SERVICES 136\n\n#define DLT_JUNIPER_ATM1 137\n\n/*\n\n* Apple IP-over-IEEE 1394, as per a request from Dieter Siegmund\n\n* <dieter@apple.com>. The header that's presented is an Ethernet-like\n\n* header:\n\n*\n\n* #define FIREWIRE_EUI64_LEN 8\n\n* struct firewire_header {\n\n* u_char firewire_dhost[FIREWIRE_EUI64_LEN];\n\n* u_char firewire_shost[FIREWIRE_EUI64_LEN];\n\n* u_short firewire_type;\n\n* };\n\n*\n\n* with \"firewire_type\" being an Ethernet type value, rather than,\n\n* for example, raw GASP frames being handed up.\n\n*/\n\n#define DLT_APPLE_IP_OVER_IEEE1394 138\n\n/*\n\n* Various SS7 encapsulations, as per a request from Jeff Morriss\n\n* <jeff.morriss[AT]ulticom.com> and subsequent discussions.\n\n*/\n\n#define DLT_MTP2_WITH_PHDR 139 /* pseudo-header with various info, followed by MTP2 */\n\n#define DLT_MTP2 140 /* MTP2, without pseudo-header */\n\n#define DLT_MTP3 141 /* MTP3, without pseudo-header or MTP2 */\n\n#define DLT_SCCP 142 /* SCCP, without pseudo-header or MTP2 or MTP3 */\n\n/*\n\n* Reserved for DOCSIS.\n\n*/\n\n#define DLT_DOCSIS 143\n\n/*\n\n* Reserved for Linux IrDA.\n\n*/\n\n#define DLT_LINUX_IRDA 144\n\n/*\n\n* Reserved for IBM SP switch and IBM Next Federation switch.\n\n*/\n\n#define DLT_IBM_SP 145\n\n#define DLT_IBM_SN 146\n\n/*\n\n* Reserved for private use. If you have some link-layer header type\n\n* that you want to use within your organization, with the capture files\n\n* using that link-layer header type not ever be sent outside your\n\n* organization, you can use these values.\n\n*\n\n* No libpcap release will use these for any purpose, nor will any\n\n* tcpdump release use them, either.\n\n*\n\n* Do *NOT* use these in capture files that you expect anybody not using\n\n* your private versions of capture-file-reading tools to read; in\n\n* particular, do *NOT* use them in products, otherwise you may find that\n\n* people won't be able to use tcpdump, or snort, or Ethereal, or... to\n\n* read capture files from your firewall/intrusion detection/traffic\n\n* monitoring/etc. appliance, or whatever product uses that DLT_ value,\n\n* and you may also find that the developers of those applications will\n\n* not accept patches to let them read those files.\n\n*\n\n* Also, do not use them if somebody might send you a capture using them\n\n* for *their* private type and tools using them for *your* private type\n\n* would have to read them.\n\n*\n\n* Instead, ask \"tcpdump-workers@tcpdump.org\" for a new DLT_ value,\n\n* as per the comment above, and use the type you're given.\n\n*/\n\n#define DLT_USER0 147\n\n#define DLT_USER1 148\n\n#define DLT_USER2 149\n\n#define DLT_USER3 150\n\n#define DLT_USER4 151\n\n#define DLT_USER5 152\n\n#define DLT_USER6 153\n\n#define DLT_USER7 154\n\n#define DLT_USER8 155\n\n#define DLT_USER9 156\n\n#define DLT_USER10 157\n\n#define DLT_USER11 158\n\n#define DLT_USER12 159\n\n#define DLT_USER13 160\n\n#define DLT_USER14 161\n\n#define DLT_USER15 162\n\n#ifdef PRIVATE\n\n/*\n\n* For Apple private usage\n\n*/\n\n#define DLT_USER0_APPLE_INTERNAL DLT_USER0 /* rdar://12019509 */\n\n#define DLT_USER1_APPLE_INTERNAL DLT_USER1 /* rdar://12019509 */\n\n#define DLT_PKTAP DLT_USER2 /* rdar://11779467 */\n\n#define DLT_USER3_APPLE_INTERNAL DLT_USER3 /* rdar://19614531 */\n\n#define DLT_USER4_APPLE_INTERNAL DLT_USER4 /* rdar://19614531 */\n\n#endif /* PRIVATE */\n\n/*\n\n* For future use with 802.11 captures - defined by AbsoluteValue\n\n* Systems to store a number of bits of link-layer information\n\n* including radio information:\n\n*\n\n* http://www.shaftnet.org/~pizza/software/capturefrm.txt\n\n*\n\n* but it might be used by some non-AVS drivers now or in the\n\n* future.\n\n*/\n\n#define DLT_IEEE802_11_RADIO_AVS 163 /* 802.11 plus AVS radio header */\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>. The DLT_s are used\n\n* for passing on chassis-internal metainformation such as\n\n* QOS profiles, etc..\n\n*/\n\n#define DLT_JUNIPER_MONITOR 164\n\n/*\n\n* Reserved for BACnet MS/TP.\n\n*/\n\n#define DLT_BACNET_MS_TP 165\n\n/*\n\n* Another PPP variant as per request from Karsten Keil <kkeil@suse.de>.\n\n*\n\n* This is used in some OSes to allow a kernel socket filter to distinguish\n\n* between incoming and outgoing packets, on a socket intended to\n\n* supply pppd with outgoing packets so it can do dial-on-demand and\n\n* hangup-on-lack-of-demand; incoming packets are filtered out so they\n\n* don't cause pppd to hold the connection up (you don't want random\n\n* input packets such as port scans, packets from old lost connections,\n\n* etc. to force the connection to stay up).\n\n*\n\n* The first byte of the PPP header (0xff03) is modified to accomodate\n\n* the direction - 0x00 = IN, 0x01 = OUT.\n\n*/\n\n#define DLT_PPP_PPPD 166\n\n/*\n\n* Names for backwards compatibility with older versions of some PPP\n\n* software; new software should use DLT_PPP_PPPD.\n\n*/\n\n#define DLT_PPP_WITH_DIRECTION DLT_PPP_PPPD\n\n#define DLT_LINUX_PPP_WITHDIRECTION DLT_PPP_PPPD\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>. The DLT_s are used\n\n* for passing on chassis-internal metainformation such as\n\n* QOS profiles, cookies, etc..\n\n*/\n\n#define DLT_JUNIPER_PPPOE 167\n\n#define DLT_JUNIPER_PPPOE_ATM 168\n\n#define DLT_GPRS_LLC 169 /* GPRS LLC */\n\n#define DLT_GPF_T 170 /* GPF-T (ITU-T G.7041/Y.1303) */\n\n#define DLT_GPF_F 171 /* GPF-F (ITU-T G.7041/Y.1303) */\n\n/*\n\n* Requested by Oolan Zimmer <oz@gcom.com> for use in Gcom's T1/E1 line\n\n* monitoring equipment.\n\n*/\n\n#define DLT_GCOM_T1E1 172\n\n#define DLT_GCOM_SERIAL 173\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>. The DLT_ is used\n\n* for internal communication to Physical Interface Cards (PIC)\n\n*/\n\n#define DLT_JUNIPER_PIC_PEER 174\n\n/*\n\n* Link types requested by Gregor Maier <gregor@endace.com> of Endace\n\n* Measurement Systems. They add an ERF header (see\n\n* http://www.endace.com/support/EndaceRecordFormat.pdf) in front of\n\n* the link-layer header.\n\n*/\n\n#define DLT_ERF_ETH 175 /* Ethernet */\n\n#define DLT_ERF_POS 176 /* Packet-over-SONET */\n\n/*\n\n* Requested by Daniele Orlandi <daniele@orlandi.com> for raw LAPD\n\n* for vISDN (http://www.orlandi.com/visdn/). Its link-layer header\n\n* includes additional information before the LAPD header, so it's\n\n* not necessarily a generic LAPD header.\n\n*/\n\n#define DLT_LINUX_LAPD 177\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>.\n\n* The DLT_ are used for prepending meta-information\n\n* like interface index, interface name\n\n* before standard Ethernet, PPP, Frelay & C-HDLC Frames\n\n*/\n\n#define DLT_JUNIPER_ETHER 178\n\n#define DLT_JUNIPER_PPP 179\n\n#define DLT_JUNIPER_FRELAY 180\n\n#define DLT_JUNIPER_CHDLC 181\n\n/*\n\n* Multi Link Frame Relay (FRF.16)\n\n*/\n\n#define DLT_MFR 182\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>.\n\n* The DLT_ is used for internal communication with a\n\n* voice Adapter Card (PIC)\n\n*/\n\n#define DLT_JUNIPER_VP 183\n\n/*\n\n* Arinc 429 frames.\n\n* DLT_ requested by Gianluca Varenni <gianluca.varenni@cacetech.com>.\n\n* Every frame contains a 32bit A429 label.\n\n* More documentation on Arinc 429 can be found at\n\n* http://www.condoreng.com/support/downloads/tutorials/ARINCTutorial.pdf\n\n*/\n\n#define DLT_A429 184\n\n/*\n\n* Arinc 653 Interpartition Communication messages.\n\n* DLT_ requested by Gianluca Varenni <gianluca.varenni@cacetech.com>.\n\n* Please refer to the A653-1 standard for more information.\n\n*/\n\n#define DLT_A653_ICM 185\n\n/*\n\n* USB packets, beginning with a USB setup header; requested by\n\n* Paolo Abeni <paolo.abeni@email.it>.\n\n*/\n\n#define DLT_USB 186\n\n/*\n\n* Bluetooth HCI UART transport layer (part H:4); requested by\n\n* Paolo Abeni.\n\n*/\n\n#define DLT_BLUETOOTH_HCI_H4 187\n\n/*\n\n* IEEE 802.16 MAC Common Part Sublayer; requested by Maria Cruz\n\n* <cruz_petagay@bah.com>.\n\n*/\n\n#define DLT_IEEE802_16_MAC_CPS 188\n\n/*\n\n* USB packets, beginning with a Linux USB header; requested by\n\n* Paolo Abeni <paolo.abeni@email.it>.\n\n*/\n\n#define DLT_USB_LINUX 189\n\n/*\n\n* Controller Area Network (CAN) v. 2.0B packets.\n\n* DLT_ requested by Gianluca Varenni <gianluca.varenni@cacetech.com>.\n\n* Used to dump CAN packets coming from a CAN Vector board.\n\n* More documentation on the CAN v2.0B frames can be found at\n\n* http://www.can-cia.org/downloads/?269\n\n*/\n\n#define DLT_CAN20B 190\n\n/*\n\n* IEEE 802.15.4, with address fields padded, as is done by Linux\n\n* drivers; requested by Juergen Schimmer.\n\n*/\n\n#define DLT_IEEE802_15_4_LINUX 191\n\n/*\n\n* Per Packet Information encapsulated packets.\n\n* DLT_ requested by Gianluca Varenni <gianluca.varenni@cacetech.com>.\n\n*/\n\n#define DLT_PPI 192\n\n/*\n\n* Header for 802.16 MAC Common Part Sublayer plus a radiotap radio header;\n\n* requested by Charles Clancy.\n\n*/\n\n#define DLT_IEEE802_16_MAC_CPS_RADIO 193\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>.\n\n* The DLT_ is used for internal communication with a\n\n* integrated service module (ISM).\n\n*/\n\n#define DLT_JUNIPER_ISM 194\n\n/*\n\n* IEEE 802.15.4, exactly as it appears in the spec (no padding, no\n\n* nothing); requested by Mikko Saarnivala <mikko.saarnivala@sensinode.com>.\n\n*/\n\n#define DLT_IEEE802_15_4 195\n\n/*\n\n* Various link-layer types, with a pseudo-header, for SITA\n\n* (http://www.sita.aero/); requested by Fulko Hew (fulko.hew@gmail.com).\n\n*/\n\n#define DLT_SITA 196\n\n/*\n\n* Various link-layer types, with a pseudo-header, for Endace DAG cards;\n\n* encapsulates Endace ERF records. Requested by Stephen Donnelly\n\n* <stephen@endace.com>.\n\n*/\n\n#define DLT_ERF 197\n\n/*\n\n* Special header prepended to Ethernet packets when capturing from a\n\n* u10 Networks board. Requested by Phil Mulholland\n\n* <phil@u10networks.com>.\n\n*/\n\n#define DLT_RAIF1 198\n\n/*\n\n* IPMB packet for IPMI, beginning with the I2C slave address, followed\n\n* by the netFn and LUN, etc.. Requested by Chanthy Toeung\n\n* <chanthy.toeung@ca.kontron.com>.\n\n*/\n\n#define DLT_IPMB 199\n\n/*\n\n* Juniper-private data link type, as per request from\n\n* Hannes Gredler <hannes@juniper.net>.\n\n* The DLT_ is used for capturing data on a secure tunnel interface.\n\n*/\n\n#define DLT_JUNIPER_ST 200\n\n/*\n\n* Bluetooth HCI UART transport layer (part H:4), with pseudo-header\n\n* that includes direction information; requested by Paolo Abeni.\n\n*/\n\n#define DLT_BLUETOOTH_HCI_H4_WITH_PHDR 201\n\n/*\n\n* AX.25 packet with a 1-byte KISS header; see\n\n*\n\n* http://www.ax25.net/kiss.htm\n\n*\n\n* as per Richard Stearn <richard@rns-stearn.demon.co.uk>.\n\n*/\n\n#define DLT_AX25_KISS 202\n\n/*\n\n* LAPD packets from an ISDN channel, starting with the address field,\n\n* with no pseudo-header.\n\n* Requested by Varuna De Silva <varunax@gmail.com>.\n\n*/\n\n#define DLT_LAPD 203\n\n/*\n\n* Variants of various link-layer headers, with a one-byte direction\n\n* pseudo-header prepended - zero means \"received by this host\",\n\n* non-zero (any non-zero value) means \"sent by this host\" - as per\n\n* Will Barker <w.barker@zen.co.uk>.\n\n*/\n\n#define DLT_PPP_WITH_DIR 204 /* PPP - don't confuse with DLT_PPP_WITH_DIRECTION */\n\n#define DLT_C_HDLC_WITH_DIR 205 /* Cisco HDLC */\n\n#define DLT_FRELAY_WITH_DIR 206 /* Frame Relay */\n\n#define DLT_LAPB_WITH_DIR 207 /* LAPB */\n\n/*\n\n* 208 is reserved for an as-yet-unspecified proprietary link-layer\n\n* type, as requested by Will Barker.\n\n*/\n\n/*\n\n* IPMB with a Linux-specific pseudo-header; as requested by Alexey Neyman\n\n* <avn@pigeonpoint.com>.\n\n*/\n\n#define DLT_IPMB_LINUX 209\n\n/*\n\n* FlexRay automotive bus - http://www.flexray.com/ - as requested\n\n* by Hannes Kaelber <hannes.kaelber@x2e.de>.\n\n*/\n\n#define DLT_FLEXRAY 210\n\n/*\n\n* Media Oriented Systems Transport (MOST) bus for multimedia\n\n* transport - http://www.mostcooperation.com/ - as requested\n\n* by Hannes Kaelber <hannes.kaelber@x2e.de>.\n\n*/\n\n#define DLT_MOST 211\n\n/*\n\n* Local Interconnect Network (LIN) bus for vehicle networks -\n\n* http://www.lin-subbus.org/ - as requested by Hannes Kaelber\n\n* <hannes.kaelber@x2e.de>.\n\n*/\n\n#define DLT_LIN 212\n\n/*\n\n* X2E-private data link type used for serial line capture,\n\n* as requested by Hannes Kaelber <hannes.kaelber@x2e.de>.\n\n*/\n\n#define DLT_X2E_SERIAL 213\n\n/*\n\n* X2E-private data link type used for the Xoraya data logger\n\n* family, as requested by Hannes Kaelber <hannes.kaelber@x2e.de>.\n\n*/\n\n#define DLT_X2E_XORAYA 214\n\n/*\n\n* IEEE 802.15.4, exactly as it appears in the spec (no padding, no\n\n* nothing), but with the PHY-level data for non-ASK PHYs (4 octets\n\n* of 0 as preamble, one octet of SFD, one octet of frame length+\n\n* reserved bit, and then the MAC-layer data, starting with the\n\n* frame control field).\n\n*\n\n* Requested by Max Filippov <jcmvbkbc@gmail.com>.\n\n*/\n\n#define DLT_IEEE802_15_4_NONASK_PHY 215\n\n/*\n\n* David Gibson <david@gibson.dropbear.id.au> requested this for\n\n* captures from the Linux kernel /dev/input/eventN devices. This\n\n* is used to communicate keystrokes and mouse movements from the\n\n* Linux kernel to display systems, such as Xorg.\n\n*/\n\n#define DLT_LINUX_EVDEV 216\n\n/*\n\n* GSM Um and Abis interfaces, preceded by a \"gsmtap\" header.\n\n*\n\n* Requested by Harald Welte <laforge@gnumonks.org>.\n\n*/\n\n#define DLT_GSMTAP_UM 217\n\n#define DLT_GSMTAP_ABIS 218\n\n/*\n\n* MPLS, with an MPLS label as the link-layer header.\n\n* Requested by Michele Marchetto <michele@openbsd.org> on behalf"
    }
}