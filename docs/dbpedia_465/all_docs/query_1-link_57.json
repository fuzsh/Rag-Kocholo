{
    "id": "dbpedia_465_1",
    "rank": 57,
    "data": {
        "url": "https://gitea.com/matteyeux/darwin-xnu",
        "read_more_link": "",
        "language": "en",
        "title": "Gitea: Git with a cup of tea",
        "top_image": "https://seccdn.libravatar.org/avatar/48534de4521fb2913ebdf8e3038c4e30?d=identicon",
        "meta_img": "https://seccdn.libravatar.org/avatar/48534de4521fb2913ebdf8e3038c4e30?d=identicon",
        "images": [
            "https://gitea.com/assets/img/logo.svg",
            "https://seccdn.libravatar.org/avatar/a8b3e32920be504488d62ed9a07c3f69?d=identicon&s=48"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "go",
            "git",
            "self-hosted",
            "gitea"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "darwin-xnu",
        "meta_lang": "en",
        "meta_favicon": "/assets/img/favicon.svg",
        "meta_site_name": "Gitea: Git with a cup of tea",
        "canonical_link": "https://gitea.com/matteyeux/darwin-xnu",
        "text": "What is XNU?\n\nXNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix. XNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit. XNU runs on x86_64 for both single processor and multi-processor configurations.\n\nXNU Source Tree\n\nconfig - configurations for exported apis for supported architecture and platform\n\nSETUP - Basic set of tools used for configuring the kernel, versioning and kextsymbol management.\n\nEXTERNAL_HEADERS - Headers sourced from other projects to avoid dependency cycles when building. These headers should be regularly synced when source is updated.\n\nlibkern - C++ IOKit library code for handling of drivers and kexts.\n\nlibsa - kernel bootstrap code for startup\n\nlibsyscall - syscall library interface for userspace programs\n\nlibkdd - source for user library for parsing kernel data like kernel chunked data.\n\nmakedefs - top level rules and defines for kernel build.\n\nosfmk - Mach kernel based subsystems\n\npexpert - Platform specific code like interrupt handling, atomics etc.\n\nsecurity - Mandatory Access Check policy interfaces and related implementation.\n\nbsd - BSD subsystems code\n\ntools - A set of utilities for testing, debugging and profiling kernel.\n\nHow to build XNU\n\nBuilding DEVELOPMENT kernel\n\nThe xnu make system can build kernel based on KERNEL_CONFIGS & ARCH_CONFIGS variables as arguments. Here is the syntax:\n\nmake SDKROOT=<sdkroot> ARCH_CONFIGS=<arch> KERNEL_CONFIGS=<variant>\n\nWhere:\n\n<sdkroot>: path to macOS SDK on disk. (defaults to /)\n\n<variant>: can be debug, development, release, profile and configures compilation flags and asserts throughout kernel code.\n\n<arch> : can be valid arch to build for. (E.g. X86_64)\n\nTo build a kernel for the same architecture as running OS, just type\n\n$ make $ make SDKROOT=macosx.internal\n\nAdditionally, there is support for configuring architectures through ARCH_CONFIGS and kernel configurations with KERNEL_CONFIGS.\n\n$ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=DEVELOPMENT $ make SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=\"RELEASE DEVELOPMENT DEBUG\"\n\nNote:\n\nBy default, architecture is set to the build machine architecture, and the default kernel config is set to build for DEVELOPMENT.\n\nThis will also create a bootable image, kernel.[config], and a kernel binary with symbols, kernel.[config].unstripped.\n\nTo build with RELEASE kernel configuration\n\nmake KERNEL_CONFIGS=RELEASE SDKROOT=/path/to/SDK\n\nBuilding FAT kernel binary\n\nDefine architectures in your environment or when running a make command.\n\n$ make ARCH_CONFIGS=\"X86_64\" exporthdrs all\n\nOther makefile options\n\n$ make MAKEJOBS=-j8 # this will use 8 processes during the build. The default is 2x the number of active CPUS.\n\n$ make -j8 # the standard command-line option is also accepted\n\n$ make -w # trace recursive make invocations. Useful in combination with VERBOSE=YES\n\n$ make BUILD_LTO=0 # build without LLVM Link Time Optimization\n\n$ make REMOTEBUILD=user@remotehost # perform build on remote host\n\n$ make BUILD_JSON_COMPILATION_DATABASE=1 # Build Clang JSON Compilation Database\n\nThe XNU build system can optionally output color-formatted build output. To enable this, you can either set the XNU_LOGCOLORS environment variable to y, or you can pass LOGCOLORS=y to the make command.\n\nDebug information formats\n\nBy default, a DWARF debug information repository is created during the install phase; this is a \"bundle\" named kernel.development.<variant>.dSYM To select the older STABS debug information format (where debug information is embedded in the kernel.development.unstripped image), set the BUILD_STABS environment variable.\n\n$ export BUILD_STABS=1 $ make\n\nBuilding KernelCaches\n\nTo test the xnu kernel, you need to build a kernelcache that links the kexts and kernel together into a single bootable image. To build a kernelcache you can use the following mechanisms:\n\nUsing automatic kernelcache generation with kextd. The kextd daemon keeps watching for changing in /System/Library/Extensions directory. So you can setup new kernel as\n\n$ cp BUILD/obj/DEVELOPMENT/X86_64/kernel.development /System/Library/Kernels/ $ touch /System/Library/Extensions $ ps -e | grep kextd\n\nManually invoking kextcache to build new kernelcache.\n\n$ kextcache -q -z -a x86_64 -l -n -c /var/tmp/kernelcache.test -K /var/tmp/kernel.test /System/Library/Extensions\n\nRunning KernelCache on Target machine\n\nThe development kernel and iBoot supports configuring boot arguments so that we can safely boot into test kernel and, if things go wrong, safely fall back to previously used kernelcache. Following are the steps to get such a setup:\n\nCreate kernel cache using the kextcache command as /kernelcache.test\n\nCopy exiting boot configurations to alternate file\n\n$ cp /Library/Preferences/SystemConfiguration/com.apple.Boot.plist /next_boot.plist\n\nUpdate the kernelcache and boot-args for your setup\n\n$ plutil -insert \"Kernel Cache\" -string \"kernelcache.test\" /next_boot.plist $ plutil -replace \"Kernel Flags\" -string \"debug=0x144 -v kernelsuffix=test \" /next_boot.plist\n\nCopy the new config to /Library/Preferences/SystemConfiguration/\n\n$ cp /next_boot.plist /Library/Preferences/SystemConfiguration/boot.plist\n\nBless the volume with new configs.\n\n$ sudo -n bless --mount / --setBoot --nextonly --options \"config=boot\"\n\nThe --nextonly flag specifies that use the boot.plist configs only for one boot. So if the kernel panic's you can easily power reboot and recover back to original kernel.\n\nSet up your build environment and from the top directory, run:\n\n$ make tags # this will build ctags and etags on a case-sensitive volume, only ctags on case-insensitive $ make TAGS # this will build etags $ make cscope # this will build cscope database\n\nCoding styles (Reindenting files)\n\nSource files can be reindented using clang-format setup in .clang-format. XNU follows a variant of WebKit style for source code formatting. Please refer to format styles at WebKit website. Further options about style options is available at clang docs\n\nNote: clang-format binary may not be part of base installation. It can be compiled from llvm clang sources and is reachable in $PATH.\n\nFrom the top directory, run:\n\n$ make reindent # reindent all source files using clang format.\n\nHow to install a new header file from XNU\n\nTo install IOKit headers, see additional comments in iokit/IOKit/Makefile.\n\nXNU installs header files at the following locations -\n\na. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers b. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders c. $(DSTROOT)/usr/include/ d. $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders\n\nKernel.framework is used by kernel extensions.\n\nThe System.framework and /usr/include are used by user level applications.\n\nThe header files in framework's PrivateHeaders are only available for ** Apple Internal Development **.\n\nThe directory containing the header file should have a Makefile that creates the list of files that should be installed at different locations. If you are adding the first header file in a directory, you will need to create Makefile similar to xnu/bsd/sys/Makefile.\n\nAdd your header file to the correct file list depending on where you want to install it. The default locations where the header files are installed from each file list are -\n\na. `DATAFILES` : To make header file available in user level - `$(DSTROOT)/usr/include` b. `PRIVATE_DATAFILES` : To make header file available to Apple internal in user level - `$(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders` c. `KERNELFILES` : To make header file available in kernel level - `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers` `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders` d. `PRIVATE_KERNELFILES` : To make header file available to Apple internal for kernel extensions - `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`\n\nThe Makefile combines the file lists mentioned above into different install lists which are used by build system to install the header files. There are two types of install lists: machine-dependent and machine-independent. These lists are indicated by the presence of MD and MI in the build setting, respectively. If your header is architecture-specific, then you should use a machine-dependent install list (e.g. INSTALL_MD_LIST). If your header should be installed for all architectures, then you should use a machine-independent install list (e.g. INSTALL_MI_LIST).\n\nIf the install list that you are interested does not exist, create it by adding the appropriate file lists. The default install lists, its member file lists and their default location are described below -\n\na. `INSTALL_MI_LIST` : Installs header file to a location that is available to everyone in user level. Locations - $(DSTROOT)/usr/include Definition - INSTALL_MI_LIST = ${DATAFILES} b. `INSTALL_MI_LCL_LIST` : Installs header file to a location that is available for Apple internal in user level. Locations - $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders Definition - INSTALL_MI_LCL_LIST = ${PRIVATE_DATAFILES} c. `INSTALL_KF_MI_LIST` : Installs header file to location that is available to everyone for kernel extensions. Locations - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers Definition - INSTALL_KF_MI_LIST = ${KERNELFILES} d. `INSTALL_KF_MI_LCL_LIST` : Installs header file to location that is available for Apple internal for kernel extensions. Locations - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders Definition - INSTALL_KF_MI_LCL_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES} e. `EXPORT_MI_LIST` : Exports header file to all of xnu (bsd/, osfmk/, etc.) for compilation only. Does not install anything into the SDK. Definition - EXPORT_MI_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}\n\nIf you want to install the header file in a sub-directory of the paths described in (1), specify the directory name using two variables INSTALL_MI_DIR and EXPORT_MI_DIR as follows -\n\nINSTALL_MI_DIR = dirname EXPORT_MI_DIR = dirname\n\nA single header file can exist at different locations using the steps mentioned above. However it might not be desirable to make all the code in the header file available at all the locations. For example, you want to export a function only to kernel level but not user level.\n\nYou can use C language's pre-processor directive (#ifdef, #endif, #ifndef) to control the text generated before a header file is installed. The kernel only includes the code if the conditional macro is TRUE and strips out code for FALSE conditions from the header file.\n\nSome pre-defined macros and their descriptions are -\n\na. `PRIVATE` : If defined, enclosed definitions are considered System Private Interfaces. These are visible within xnu and exposed in user/kernel headers installed within the AppleInternal \"PrivateHeaders\" sections of the System and Kernel frameworks. b. `KERNEL_PRIVATE` : If defined, enclosed code is available to all of xnu kernel and Apple internal kernel extensions and omitted from user headers. c. `BSD_KERNEL_PRIVATE` : If defined, enclosed code is visible exclusively within the xnu/bsd module. d. `MACH_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively within the xnu/osfmk module. e. `XNU_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively within xnu. f. `KERNEL` : If defined, enclosed code is available within xnu and kernel extensions and is not visible in user level header files. Only the header files installed in following paths will have the code - $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders\n\nConditional compilation\n\nxnu offers the following mechanisms for conditionally compiling code:\n\na. *CPU Characteristics* If the code you are guarding has specific characterstics that will vary only based on the CPU architecture being targeted, use this option. Prefer checking for features of the architecture (e.g. `__LP64__`, `__LITTLE_ENDIAN__`, etc.). b. *New Features* If the code you are guarding, when taken together, implements a feature, you should define a new feature in `config/MASTER` and use the resulting `CONFIG` preprocessor token (e.g. for a feature named `config_virtual_memory`, check for `#if CONFIG_VIRTUAL_MEMORY`). This practice ensures that existing features may be brought to other platforms by simply changing a feature switch. c. *Existing Features* You can use existing features if your code is strongly tied to them (e.g. use `SECURE_KERNEL` if your code implements new functionality that is exclusively relevant to the trusted kernel and updates the definition/understanding of what being a trusted kernel means).\n\nIt is recommended that you avoid compiling based on the target platform. xnu does not define the platform macros from TargetConditionals.h (TARGET_OS_OSX, TARGET_OS_IOS, etc.).\n\nThere is a TARGET_OS_EMBEDDED macro, but this should be avoided as it is in general too broad a definition for most functionality.\n\nHow to add a new syscall\n\nTesting the kernel\n\nXNU kernel has multiple mechanisms for testing.\n\nAssertions - The DEVELOPMENT and DEBUG kernel configs are compiled with assertions enabled. This allows developers to easily test invariants and conditions.\n\nXNU Power On Self Tests (XNUPOST): The XNUPOST config allows for building the kernel with basic set of test functions that are run before first user space process is launched. Since XNU is hybrid between MACH and BSD, we have two locations where tests can be added.\n\nxnu/osfmk/tests/ # For testing mach based kernel structures and apis. bsd/tests/ # For testing BSD interfaces.\n\nPlease follow the documentation at osfmk/tests/README.md\n\nUser level tests: The tools/tests/ directory holds all the tests that verify syscalls and other features of the xnu kernel. The make target xnu_tests can be used to build all the tests supported.\n\n$ make RC_ProjectName=xnu_tests SDKROOT=/path/to/SDK\n\nThese tests are individual programs that can be run from Terminal and report tests status by means of std posix exit codes (0 -> success) and/or stdout. Please read detailed documentation in tools/tests/unit_tests/README.md\n\nKernel data descriptors\n\nXNU uses different data formats for passing data in its api. The most standard way is using syscall arguments. But for complex data it often relies of sending memory saved by C structs. This packaged data transport mechanism is fragile and leads to broken interfaces between user space programs and kernel apis. libkdd directory holds user space library that can parse custom data provided by the same version of kernel. The kernel chunked data format is described in detail at libkdd/README.md.\n\nDebugging the kernel\n\nThe xnu kernel supports debugging with a remote kernel debugging protocol (kdp). Please refer documentation at [technical note] TN2063 By default the kernel is setup to reboot on a panic. To debug a live kernel, the kdp server is setup to listen for UDP connections over ethernet. For machines without ethernet port, this behavior can be altered with use of kernel boot-args. Following are some common options.\n\ndebug=0x144 - setups debug variables to start kdp debugserver on panic\n\n-v - print kernel logs on screen. By default XNU only shows grey screen with boot art.\n\nkdp_match_name=en1 - Override default port selection for kdp. Supported for ethernet, thunderbolt and serial debugging.\n\nTo debug a panic'ed kernel, use llvm debugger (lldb) along with unstripped symbol rich kernel binary.\n\nsh$ lldb kernel.development.unstripped\n\nAnd then you can connect to panic'ed machine with kdp_remote [ip addr] or gdb_remote [hostip : port] commands.\n\nEach kernel is packaged with kernel specific debug scripts as part of the build process. For security reasons these special commands and scripts do not get loaded automatically when lldb is connected to machine. Please add the following setting to your ~/.lldbinit if you wish to always load these macros.\n\nsettings set target.load-script-from-symbol-file true"
    }
}