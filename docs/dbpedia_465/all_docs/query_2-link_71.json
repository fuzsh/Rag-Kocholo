{
    "id": "dbpedia_465_2",
    "rank": 71,
    "data": {
        "url": "https://www.techtarget.com/searchdatacenter/definition/kernel",
        "read_more_link": "",
        "language": "en",
        "title": "What is a Kernel?",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineimages/data_center-kernel_layout_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineImages/enterprise_desktop-user_and_kernal_mem-h_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/1.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/gillis_alex.jpg",
            "https://cdn.ttgtmedia.com/visuals/searchFinancialApplications/software_strategy/financialapplications_article_018_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/computerweekly/Cliff-Saran-Sep-2022-140x180px.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/3.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/kerner_sean.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/4.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/sheldon_robert.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/RhHMgkUdhdk?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchdatacenter/definition/kernel&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alexander S. Gillis",
            "Stephen J. Bigelow",
            "Jessica Lulka",
            "Alexander Gillis",
            "Cliff Saran",
            "Sean Kerner",
            "Robert Sheldon"
        ],
        "publish_date": "2024-08-01T09:00:00+00:00",
        "summary": "",
        "meta_description": "Learn what a kernel is and the primary jobs of an operating system kernel. Examine the different types of kernels as well as their history and development.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Data Center",
        "canonical_link": "https://www.techtarget.com/searchdatacenter/definition/kernel",
        "text": "A kernel is the essential foundation of a computer's operating system (OS). It's the core that provides basic services for all other parts of the OS. It's the main layer between the OS and underlying computer hardware, and it helps with tasks such as process and memory management, inter-process communication, file system management, device control and networking.\n\nDuring normal system startup, a computer's basic input/output system, or BIOS, completes a hardware bootstrap or initialization. It then runs a bootloader which loads the kernel from a storage device -- such as a hard drive -- into a protected memory space. Once the kernel is loaded into computer memory, the BIOS transfers control to the kernel. It then loads other OS components to complete the system startup and make control available to users through a desktop or other user interface.\n\nIf the kernel is damaged or can't load successfully, the computer won't be able to start completely -- if at all. Service will be required to correct hardware damage or to restore the OS kernel to a working version.\n\nWhat is the purpose of the kernel?\n\nIn broad terms, an OS kernel performs the following three primary jobs:\n\nProvides the interfaces needed for users and applications to interact with the computer.\n\nLaunches and manages applications.\n\nManages the underlying system hardware devices.\n\nIn more granular terms, accomplishing these three kernel functions involves a range of computer tasks, including the following:\n\nLoading and managing less-critical OS components, such as device drivers.\n\nOrganizing and managing threads and the various processes spawned by running applications.\n\nScheduling which applications can access and use the kernel and supervising that use when the scheduled time occurs.\n\nDeciding which nonprotected user memory space each application process uses.\n\nHandling conflicts and errors in memory allocation and management.\n\nManaging and optimizing hardware resources and dependencies, such as central processing unit (CPU) and cache use, file system operation and network transport mechanisms.\n\nManaging and accessing I/O devices such as keyboards, mice, disk drives, USB ports, network adapters and displays.\n\nHandling device and application system calls using various mechanisms such as hardware interrupts or device drivers.\n\nScheduling and management are central to the kernel's operation. Computer hardware can only do one thing at a time. However, a computer's OS components and applications can spawn dozens and even hundreds of processes that the computer must host. It's impossible for all those processes to use the computer's hardware -- such as a memory address or CPU instruction pipeline -- at the same time. The kernel is the central manager of these processes. It knows which hardware resources are available and which processes need them. It then allocates time for each process to use those resources.\n\nThe kernel is critical to a computer's operation and requires careful protection within the system's memory. The kernel space it loads into is a protected area of memory. That protected memory space ensures other applications and data don't overwrite or impair the kernel, causing performance problems, instability or other negative consequences. Instead, applications are loaded and executed in a generally available user memory space.\n\nA kernel is often contrasted with a shell, which is the outermost part of an OS that interacts with user commands. Kernel and shell are terms used more frequently in Unix OSes than in IBM mainframe and Microsoft Windows systems.\n\nA kernel isn't to be confused with a BIOS, which is an independent program stored on a chip within a computer's circuit board.\n\nWhat are device drivers?\n\nA key part of kernel operation is communication with hardware devices inside and outside of the physical computer. However, it isn't practical for an OS to interact with every possible device in existence. Instead, kernels rely on the ability of device drivers, which add kernel support to specialized devices -- such as printers and graphics adapters.\n\nWhen an OS is installed on a computer, the installation adds device drivers for any specific devices detected within the computer. This helps tailor the OS to the specific system with just enough components to support the devices present. When a new or better device replaces an existing device, the device driver also needs to be updated or replaced.\n\nThere are several types of device drivers. Each addresses a different data transfer type. Some of the main driver types include the following:\n\nCharacter device drivers. These implement, open, close, read and write data, as well as grant data stream access for the user space.\n\nBlock device drivers. These provide device access for hardware that transfers randomly accessible data in fixed blocks.\n\nNetwork device drivers. These transmit data packets for hardware interfaces that connect to external systems.\n\nDevice drivers are also classified as kernel or user. A kernel mode device driver is a generic driver that's loaded along with the OS. These drivers are often suited to small categories of major hardware devices, such as CPU and motherboard device drivers.\n\nUser mode device drivers encompass an array of ad hoc drivers used for aftermarket, user-added devices, such as printers, graphics adapters, mice, advanced sound systems and other plug-and-play devices.\n\nThe OS needs the code that makes up the kernel. Consequently, the kernel code is usually loaded into an area in computer storage that's protected so that it won't be overlaid with less frequently used parts of the OS.\n\nKernel mode vs. user mode\n\nComputer designers have long understood the importance of security and the need to protect critical aspects of the computer's behavior. Long before the internet, or even the emergence of networks, designers carefully managed how software components accessed system hardware and resources. Processors were developed to support two operating modes: kernel mode and user mode.\n\nKernel mode\n\nKernel mode refers to the processor mode that enables software to have full and unrestricted access to the system and its resources. Kernel mode is used by the OS kernel and its core services, including device drivers, system calls and interrupt handlers.\n\nUser mode\n\nAll user applications and processes that aren't part of the OS kernel use user mode. This enables user-based applications, such as word processors or video games, to load and execute. The kernel prepares the memory space and resources for that application's use and launches the application within that user memory space.\n\nUser mode applications are less privileged and can't access system resources directly. Instead, an application running in user mode must make system calls to the kernel to access system resources. The kernel then acts as a manager, scheduler and gatekeeper for those resources and works to prevent conflicting resource requests.\n\nThe processor switches to kernel mode as the kernel processes its system calls and then switches back to user mode to continue operating the applications.\n\nKernel and user modes are processor states and have nothing to do with actual solid-state memory. There's nothing intrinsically safe or protected about the memory used for kernel mode. Kernel driver crashes and memory failures within the kernel memory space can still impair the OS and the computer.\n\nTypes of kernels\n\nKernels fall into the following architectures. The main difference among these types is how they manage address spaces, flexibility and performance:\n\nA microkernel delegates user processes and kernel services in different address spaces.\n\nA monolithic kernel implements services in the same address space.\n\nA hybrid kernel, such as the Microsoft Windows NT and Apple XNU kernels, attempts to combine the behaviors and benefits of microkernel and monolithic kernel architectures.\n\nA nanokernel focuses on providing minimal services limited to low-level hardware management, delegating most other services to higher-level modules.\n\nAn exokernel exposes hardware resources directly to applications, giving them more control over hardware.\n\nA multikernel uses multiple kernels to manage different hardware resources, commonly used in distributed environments.\n\nOverall, these kernel implementations present a tradeoff. For example, admins get the flexibility of more source code with microkernels or increased security without customization options with the monolithic kernel.\n\nSome specific differences among kernel types include the following:\n\nMicrokernels\n\nMicrokernels have all their services in separate address spaces from the kernel. Microkernels use message passing for their communication protocol, which sends data packets, signals and functions to the correct processes. Microkernels also provide greater flexibility than monolithic kernels; to add a new service, admins modify the user address space for a microkernel.\n\nBecause of their isolated nature, microkernels are more secure than monolithic kernels. They remain unaffected if one service within the address space fails.\n\nMonolithic kernels\n\nMonolithic kernels are larger than microkernels because they house both kernel and user services in the same address space. Monolithic kernels use a faster system call communication protocol than microkernels to execute processes between the hardware and software. They're less flexible than microkernels and require more work; admins must reconstruct the entire kernel to support a new service.\n\nMonolithic kernels pose a greater security risk to systems than microkernels because, if a service fails, the entire system shuts down. Monolithic kernels also don't require as much source code as a microkernel, which means they're less susceptible to bugs and need less debugging.\n\nThe Linux kernel is a monolithic kernel that's constantly growing; it had 20 million lines of code in 2018. From a foundational level, it's layered into a variety of subsystems. These main groups include a system call interface, process management, network stack, memory management, virtual file system and device drivers.\n\nAdministrators can port the Linux kernel into their OSes and run live updates. These features, along with the fact that Linux is open source, make it more suitable for server systems and environments that require real-time maintenance.\n\nHybrid kernels\n\nApple developed the XNU OS kernel in 1996 as a hybrid of the Mach and Berkeley Software Distribution (BSD) kernels and paired it with an Objective-C application programming interface (API). Because it's a combination of the monolithic kernel and microkernel, it has increased modularity, and parts of the OS gain memory protection.\n\nHybrid kernels are used in most commercial OSes. They're similar to microkernels but include additional code in the kernel-space meant to increase performance. They also enable faster development for third-party software.\n\nNanokernels\n\nNanokernels provide a minimal set of services limited to just low-level hardware management functions. This approach delegates almost all operating system services, such as interrupt controllers or timers, to device drivers. Nanokernels are designed to be portable, enabling them to run on several different hardware architectures. They also have a smaller attack surface, which can improve security.\n\nExokernels\n\nExokernels are unique in that they expose hardware resources directly to applications. Instead of abstracting hardware functionality like other kernel types, exokernels enable applications to implement their own abstractions and management policies. This means that application developers can make the most efficient use of resources for each program. Exokernels also come with library OSes, which can export different APIs.\n\nExokernels provide applications with better control and flexibility, which can add to performance gains.\n\nMultikernels\n\nMultikernels use several different kernels to manage hardware resources. They're used either in multi-core machines or in distributed systems. In multi-core machines, multikernels manage each core as a separate entity with its own kernel instance.\n\nIn distributed systems, multikernels manage separate nodes, with each node running its own kernel instance. Kernel instances communicate over a network, providing a cohesive operating environment.\n\nA multikernel approach optimizes the use of multi-core processors and distributed systems, which improves scalability and fault tolerance.\n\nHistory and development of the kernel\n\nBefore the kernel, developers coded actions directly to the processor, instead of relying on an OS to complete interactions between hardware and software.\n\nThe first attempt to create an OS that used a kernel to pass messages was in 1969 with the RC 4000 Multiprogramming System. Programmer Per Brinch Hansen discovered it was easier to create a nucleus and then build up an OS, instead of converting existing OSes to be compatible with new hardware. This nucleus -- or kernel -- contained all source code to facilitate communications and support systems, eliminating the need to directly program on the CPU.\n\nAfter RC 4000, Bell Labs researchers started working on Unix, which radically changed OS and kernel development and integration. The goal of Unix was to create smaller utilities that perform specific tasks well instead of having system utilities try to multitask. From a user standpoint, this simplifies creating shell scripts that combine simple tools.\n\nAs Unix adoption increased, the market started to see a variety of Unix-like computer OSes, including BSD, NeXTSTEP in the 1980s and Linux in 1991. Unix's structure perpetuated the idea that it was easier to build a kernel on top of an OS that reused software and had consistent hardware, instead of relying on a time-shared system that didn't require an OS.\n\nUnix brought OSes to more individual systems, but researchers at Carnegie Mellon University expanded kernel technology. From 1985 to 1994, they expanded work on the Mach kernel. Unlike BSD, the Mach kernel is OS-agnostic and supports multiple processor architectures. Researchers made it binary-compatible with existing BSD software, enabling it to be available for immediate use and continued experimentation.\n\nThe Mach kernel's original goal was to be a cleaner version of Unix and a more portable version of Carnegie Mellon's Accent interprocessor communications (IPC) kernel. Over time, the kernel brought new features, such as ports and IPC-based programs, and ultimately evolved into a microkernel.\n\nShortly after the Mach kernel, in 1986, Vrije Universiteit Amsterdam developer Andrew Tanenbaum released MINIX (mini-Unix) for educational and research uses. This distribution contained a microkernel-based structure, multitasking, protected mode, extended memory support and an American National Standards Institute C compiler.\n\nThe next major advancement in kernel technology came in 1991 with the release of the Linux kernel. Founder Linus Torvalds developed it as a hobby, but he still licensed the kernel under general public license, making it open source.\n\nMost OSes -- and their kernels -- can be traced back to Unix, but there's one outlier: Windows. With the popularity of DOS- and IBM-compatible PCs, Microsoft developed the NT kernel and based its OS on DOS. That's why writing commands for Windows differs from Unix-based systems.\n\nLikewise, in 2001, Apple's Mac OS X was released. This was based on the Mach microkernel and BSD.\n\nThe rise of smartphones in the 2010s also saw the increase in mobile OSes and mobile-specific kernels. Android is based on the Linux kernel, and Apple iOS is based on a variant of the Mac OS X kernel.\n\nThere are several types of kernels available. Learn more about the differences between monolithic and microkernel architectures."
    }
}