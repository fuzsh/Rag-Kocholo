{
    "id": "dbpedia_465_0",
    "rank": 75,
    "data": {
        "url": "https://docs.huihoo.com/darwin/kernel-programming-guide/build/chapter_18_section_2.html",
        "read_more_link": "",
        "language": "en",
        "title": "Kernel Programming Guide: Adding New Files or Modules",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/developer_connection_title.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/member_login_arrow_button.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot_919699.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif",
            "https://docs.huihoo.com/images/1dot.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Advanced Search\n\nLog In | Not a Member? Contact ADC\n\nADC Home > Reference Library > Guides > Darwin > Kernel > Kernel Programming Guide > Building and Debugging Kernels >\n\n< Previous PageNext Page >\n\nAdding New Files or Modules\n\nIn this context, the term module is used loosely to refer to a collection of related files in the kernel that are controlled by a single config option at compile time. It does not refer to loadable modules (KEXTs). This section describes how to add additional files that will be compiled into the kernel, including how to add a new config option for an additional module.\n\nIn this section:\n\nModifying the Configuration Files\n\nModifying the Source Code Files\n\nModifying the Configuration Files\n\nThe details of adding a new file or module into the kernel differ according to what portion of the kernel contains the file. If you are adding a new file or module into the Mach portion of the kernel, you need to list it in various files in xnu/osfmk/conf. For the BSD portion of the kernel, you should list it in various files in xnu/bsd/conf. In either case, the procedure is basically the same, just in a different directory.\n\nThis section is divided into two subsections. The first describes adding the module itself and the second describes enabling the module.\n\nAdding the Files or Modules\n\nIn the appropriate conf directory, you need to add your files or modules into various files. The files MASTER, MASTER.ppc, and MASTER.i386 contain the list of configuration options that should be built into the kernel for all architectures, PowerPC, and i386, respectively.\n\nThese are supplemented by files, files.ppc, and files.i386, which contain associations between compile options and the files that are related to them for their respective architectures.\n\nThe format for these two files is relatively straightforward. If you are adding a new module, you should first choose a name for that module. For example, if your module is called mach_foo, you should then add a new option line near the top of files that is whitespace (space or tab) delimited and looks like this:\n\nOPTIONS/mach_foo optional mach_foo\n\nThe first part defines the name of the module as it will be used in #if statements in the code. (See âModifying the Source Code Filesâ for more information.) The second part is always the word optional. The third part tells the name of the option as used to turn it on or off in a MASTER file. Any line with mach_foo in the last field will be enabled only if there is an appropriate line in a MASTER file.\n\nThen, later in the file, you add\n\nosfmk/foo/foo_main.c optional mach_foo\n\nosfmk/foo/foo_bar.c optional mach_foo\n\nand so on, for each new file associated with that module. This also applies if you are adding a file to an existing module. If you are adding a file that is not associated with any module at all, you add a line that looks like the following to specify that this file should always be included:\n\nosfmk/crud/mandatory_file.c standard\n\nIf you are not adding any modules, then youâre done. Otherwise, you also need to enable your option in one of the MASTER files.\n\nEnabling Module Options\n\nTo enable a module option (as described in the files files), you must add an entry for that option into one of the MASTER files. If your code is not a BSD pseudo-device, you should add something like the following:\n\noptions MACH_FOO\n\nOtherwise, you should add something like this:\n\npseudo-device mach_foo\n\nIn the case of a pseudo-device (for example, /dev/random), you can also add a number. When your code checks to see if it should be included, it can also check that number and allocate resources for more than one pseudo-device. The meaning of multiple pseudo-devices is device-dependent. An example of this is ppp, which allocates resources for two simultaneous PPP connections. Thus, in the MASTER.ppc file, it has the line:\n\npseudo-device ppp 2\n\nModifying the Source Code Files\n\nIn the Mac OS X kernel, all source code files are automatically compiled. It is the responsibility of the C file itself to determine whether its contents need to be included in the build or not.\n\nIn the example above, you created a module called mach_foo. Assume that you want this file to compile only on PowerPC-based computers. In that case, you should have included the option only in MASTER.ppc and not in MASTER.i386. However, by default, merely specifying the file foo_main.c in files causes it to be compiled, regardless of compile options specified.\n\nTo make the code compile only when the option mach_foo is included in the configuration, you should begin each C source file with the lines\n\n#include <mach_foo.h>\n\n#if (MACH_FOO > 0)\n\nand end it with\n\n#endif /* MACH_FOO */\n\nIf mach_foo is a pseudo-device and you need to check the number of mach_foo pseudo-devices included, you can do further tests of the value of MACH_FOO.\n\nNote that the file <mach_foo.h> is not something you create. It is created by the makefiles themselves. You must run make exporthdrs before make all to generate these files .\n\n< Previous PageNext Page >\n\nLast updated: 2006-11-07\n\nDid this document help you? Yes: Tell us what works for you.\n\nIts good, but: Report typos, inaccuracies, and so forth.\n\nIt wasnt helpful: Tell us what would have helped."
    }
}