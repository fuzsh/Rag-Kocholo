{
    "id": "dbpedia_5466_3",
    "rank": 90,
    "data": {
        "url": "https://imagemagick.org/script/command-line-options.php",
        "read_more_link": "",
        "language": "en",
        "title": "ImageMagick",
        "top_image": "https://imagemagick.org/image/logo.png",
        "meta_img": "https://imagemagick.org/image/logo.png",
        "images": [
            "https://imagemagick.org/image/wand.ico",
            "https://imagemagick.org/image/affine.png",
            "https://imagemagick.org/image/annotate.png",
            "https://imagemagick.org/image/gaussian-blur.png",
            "https://imagemagick.org/image/gaussian-blur.png",
            "https://imagemagick.org/image/wand.ico"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "command-line",
            "options",
            "image processing",
            "image manipulation",
            "image conversion",
            "graphic design tool",
            "image editing"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Influence the default behavior of ImageMagick tools with command-line options.",
        "meta_lang": "en",
        "meta_favicon": "/script/../image/wand.png",
        "meta_site_name": "ImageMagick",
        "canonical_link": "https://imagemagick.org/script/command-line-options.php",
        "text": "Reduce image noise and reduce detail levels.\n\nConvolve the image with a Gaussian or normal distribution using the given Sigma value. The formula is:\n\nThe sigma value is the important argument, and determines the actual amount of blurring that will take place.\n\nThe radius is only used to determine the size of the array which holds the calculated Gaussian distribution. It should be an integer. If not given, or set to zero, IM will calculate the largest possible radius that will provide meaningful results for the Gaussian distribution.\n\nThe larger the Radius the slower the operation is. However too small a Radius, and severe aliasing effects may result. As a guideline, Radius should be at least twice the Sigma value, though three times will produce a more accurate result.\n\nThis option differs from -gaussian-blur simply by taking advantage of the separability properties of the distribution. Here we apply a single-dimensional Gaussian matrix in the horizontal direction, then repeat the process in the vertical direction.\n\nThe -virtual-pixel setting will determine how pixels which are outside the image proper are blurred into the final result.\n\nSurround the image with a border of color.\n\nSet the width and height using the size portion of the geometry argument. See Image Geometry for complete details about the geometry argument. Offsets are ignored.\n\nAs of IM 6.7.8-8, the geometry arguments behave as follows:\n\nSet the border color by preceding with the -bordercolor setting.\n\nThe -border operation is affected by the current -compose setting and assumes that this is using the default 'Over' composition method. It generates an image of the appropriate size colors by the current -bordercolor before overlaying the original image in the center of this net image. This means that with the default compose method of 'Over' any transparent parts may be replaced by the current -bordercolor setting.\n\nSee also the -frame option, which has more functionality.\n\nSet the border color.\n\nThe color is specified using the format described under the -fill option.\n\nThe default border color is #DFDFDF, this shade of gray.\n\nSet the border width.\n\nAdjust the brightness and/or contrast of the image.\n\nBrightness and Contrast values apply changes to the input image. They are not absolute settings. A brightness or contrast value of zero means no change. The range of values is -100 to +100 on each. Positive values increase the brightness or contrast and negative values decrease the brightness or contrast. To control only contrast, set the brightness=0. To control only brightness, set contrast=0 or just leave it off.\n\nYou may also use -channel to control which channels to apply the brightness and/or contrast change. The default is to apply the same transformation to all channels.\n\nBrightness and Contrast arguments are converted to offset and slope of a linear transform and applied using -function polynomial \"slope,offset\".\n\nThe slope varies from 0 at contrast=-100 to almost vertical at contrast=+100. For brightness=0 and contrast=-100, the result are totally midgray. For brightness=0 and contrast=+100, the result will approach but not quite reach a threshold at midgray; that is the linear transformation is a very steep vertical line at mid gray.\n\nNegative slopes, i.e. negating the image, are not possible with this function. All achievable slopes are zero or positive.\n\nThe offset varies from -0.5 at brightness=-100 to 0 at brightness=0 to +0.5 at brightness=+100. Thus, when contrast=0 and brightness=100, the result is totally white. Similarly, when contrast=0 and brightness=-100, the result is totally black.\n\nAs the range of values for the arguments are -100 to +100, adding the '%' symbol is no different than leaving it off.\n\n(This option has been replaced by the -limit option).\n\nCanny edge detector uses a multi-stage algorithm to detect a wide range of edges in the image.\n\nThe thresholds range from 0 to 100% (e.g. -canny 0x1+10%+30%) with {+lower-percent} < {+upper-percent}. If {+upper-percent} is increased but {+lower-percent} remains the same, lesser edge components will be detected, but their lengths will be the same. If {+lower-percent} is increased but {+upper-percent} is the same, the same number of edge components will be detected but their lengths will be shorter. The default thresholds are shown.\n\nThe radius{xsigma} controls a gaussian blur applied to the input image to reduce noise and smooth the edges.\n\nThe sigma value is the important argument, and determines the actual amount of blurring that will take place.\n\nThe radius is only used to determine the size of the array which holds the calculated Gaussian distribution. It should be an integer. If not given, or set to zero, IM will calculate the largest possible radius that will provide meaningful results for the Gaussian distribution.\n\nAssign a caption to an image.\n\nThis option sets the caption meta-data of an image read in after this option has been given. To modify a caption of images already in memory use \"-set caption\".\n\nThe caption can contain special format characters listed in the Format and Print Image Properties. These attributes are expanded when the caption is finally assigned to the individual images.\n\nIf the first character of string is @, the image caption is read from a file titled by the remaining characters in the string. Comments read in from a file are literal; no embedded formatting characters are recognized.\n\nCaption meta-data is not visible on the image itself. To do that use the -annotate or -draw options instead.\n\nFor example,\n\n-caption \"%m:%f %wx%h\" bird.miff\n\nproduces an image caption of MIFF:bird.miff 512x480 (assuming that the image bird.miff has a width of 512 and a height of 480.\n\nColor correct with a color decision list.\n\nHere is an example color correction collection:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <ColorCorrectionCollection xmlns=\"urn:ASC:CDL:v1.2\"> <ColorCorrection id=\"cc06668\"> <SOPNode> <Slope> 0.9 1.2 0.5 </Slope> <Offset> 0.4 -0.5 0.6 </Offset> <Power> 1.0 0.8 1.5 </Power> </SOPNode> <SATNode> <Saturation> 0.85 </Saturation> </SATNode> </ColorCorrection> </ColorCorrectionCollection>\n\nSpecify those image color channels to which subsequent operators are limited.\n\nChoose from: Red, Green, Blue, Alpha, Gray, Cyan, Magenta, Yellow, Black, Opacity, Index, RGB, RGBA, CMYK, or CMYKA.\n\nThe channels above can also be specified as a comma-separated list or can be abbreviated as a concatenation of the letters 'R', 'G', 'B', 'A', 'O', 'C', 'M', 'Y', 'K'.\n\nThe numerals 0 to 31 may also be used to specify channels, where 0 to 5 are:\n\n'0' equals Red or Cyan\n\n'1' equals Green or Magenta\n\n'2' equals Blue or Yellow\n\n'3' equals Black\n\n'4' equals Alpha or Opacity\n\n'5' equals Index\n\nFor example, to only select the Red and Blue channels you can use any of the following:\n\n-channel Red,Blue -channel R,B -channel RB -channel 0,2\n\nAll the channels that are present in an image can be specified using the special channel type All. Not all operators are 'channel capable', but generally any operators that are generally 'grey-scale' image operators, will understand this setting. See individual operator documentation.\n\nOn top of the normal channel selection an extra flag can be specified, 'Sync'. This is turned on by default and if set means that operators that understand this flag should perform: cross-channel synchronization of the channels. If not specified, then most grey-scale operators will apply their image processing operations to each individual channel (as specified by the rest of the -channel setting) completely independently from each other.\n\nFor example for operators such as -auto-level and -auto-gamma the color channels are modified together in exactly the same way so that colors will remain in-sync. Without it being set, then each channel is modified separately and independently, which may produce color distortion.\n\nThe -morphology 'Convolve' method and the -compose mathematical methods, also understands the 'Sync' flag to modify the behavior of pixel colors according to the alpha channel (if present). That is to say it will modify the image processing with the understanding that fully-transparent colors should not contribute to the final result.\n\nBasically, by default, operators work with color channels in synchronous, and treats transparency as special, unless the -channel setting is modified so as to remove the effect of the 'Sync' flag. How each operator does this depends on that operators current implementation. Not all operators understands this flag at this time, but that is changing.\n\nTo print a complete list of channel types, use -list channel.\n\nBy default, ImageMagick sets -channel to the value 'RGBK,sync', which specifies that operators act on all color channels except the transparency channel, and that all the color channels are to be modified in exactly the same way, with an understanding of transparency (depending on the operation being applied). The 'plus' form +channel will reset the value back to this default.\n\nOptions that are affected by the -channel setting include the following. -auto-gamma, -auto-level, -black-threshold, -blur, -clamp, -clut, -combine, -composite (Mathematical compose methods only), -convolve, -contrast-stretch, -evaluate, -function, -fx, -gaussian-blur, -hald-clut, -motion-blur, -morphology, -negate, -normalize, -ordered-dither, -rotational-blur, -random-threshold, -range-threshold, -separate, -threshold, and -white-threshold.\n\nWarning, some operators behave differently when the +channel default setting is in effect, versus ANY user defined -channel setting (including the equivalent of the default). These operators have yet to be made to understand the newer 'Sync' flag.\n\nFor example -threshold will by default grayscale the image before thresholding, if no -channel setting has been defined. This is not 'Sync' flag controlled, yet.\n\nAlso some operators such as -blur, -gaussian-blur, will modify their handling of the color channels if the 'alpha' channel is also enabled by -channel. Generally this done to ensure that fully-transparent colors are treated as being fully-transparent, and thus any underlying 'hidden' color has no effect on the final results. Typically resulting in 'halo' effects. The newer -morphology convolution equivalents however does have a understanding of the 'Sync' flag and will thus handle transparency correctly by default.\n\nAs an alpha channel is optional within images, some operators will read the color channels of an image as a greyscale alpha mask, when the image has no alpha channel present, and the -channel setting tells the operator to apply the operation using alpha channels. The -clut operator is a good example of this.\n\nExchange, extract, or copy one or more image channels.\n\nThe expression consists of one or more channels, either mnemonic or numeric (e.g. red or 0, green or 1, etc.), separated by certain operation symbols as follows:\n\n<=> exchange two channels (e.g. red<=>blue) => copy one channel to another channel (e.g. red=>green) = assign a constant value to a channel (e.g. red=50%) , write new image with channels in the specified order (e.g. red, green) ; add a new output image for the next set of channel operations (e.g. red; green; blue) | move to the next input image for the source of channel data (e.g. | gray=>alpha)\n\nFor example, to create 3 grayscale images from the red, green, and blue channels of an image, use:\n\n-channel-fx \"red; green; blue\"\n\nA channel without an operation symbol implies separate (i.e, semicolon).\n\nHere we take an sRGB image and a grayscale image and inject the grayscale image into the alpha channel:\n\nmagick wizard.png mask.pgm -channel-fx '| gray=>alpha' wizard-alpha.png\n\nUse a similar command to define a read mask:\n\nmagick wizard.png mask.pgm -channel-fx '| gray=>read-mask' wizard-mask.png\n\nIn this example, we compute the mean RGB value for all opaque pixels of an image:\n\nmagick wizard-alpha.png -channel-fx \"alpha=>read-mask\" -channel rgb -format \"%[fx:mean]\\n\" info:\n\nLet's create two meta channels and populate them with a copy of the gray pixels:\n\nmagick gray.pgm -channel-fx \"gray=>meta, gray=>meta1\" gray.tif\n\nNotice we save the results into a TIFF image file. Not all formats support multipectral images. TIFF, MIFF, MPC, and FTXT do.\n\nAdd -debug pixel prior to the -channel-fx option to track the channel morphology.\n\nSimulate a charcoal drawing.\n\nRemove pixels from the interior of an image.\n\nSee Image Geometry for complete details about the geometry argument. The width and height given in the of the size portion of the geometry argument give the number of columns and rows to remove. The offset portion of the geometry argument is influenced by a -gravity setting, if present.\n\nThe -chop option removes entire rows and columns, and moves the remaining corner blocks leftward and upward to close the gaps.\n\nWhile it can remove internal rows and columns of pixels, it is more typically used with as -gravity setting and zero offsets so as to remove a single edge from an image. Compare this to -shave which removes equal numbers of pixels from opposite sides of the image.\n\nUsing -chop effectively undoes the results of a -splice that was given the same geometry and -gravity settings.\n\nContrast limited adaptive histogram equalization.\n\nThe image is divided into tiles of width and height pixels. Append % to define the width and height as percentages of the image's dimensions. The tile size should be larger than the size of features to be preserved and respects the aspect ratio of the image. Add ! to force an exact tile width and height. number-bins is the number of histogram bins per tile (min 2, max 65536). The number of histogram bins should be smaller than the number of pixels in a single tile. clip-limit is the contrast limit for localized changes in contrast. A clip-limit of 2 to 3 is a good starting place (e.g. -clahe 50x50%+128+3). Very large values will let the histogram equalization do whatever it wants to do, that is result in maximal local contrast. The value 1 will result in the original image. Note, if the number of bins and the clip-limit are omitted, they default to 128 and no clipping respectively.\n\nSet each pixel whose value is below zero to zero and any the pixel whose value is above the quantum range to the quantum range (e.g. 65535) otherwise the pixel value remains unchanged.\n\nApply the clipping path if one is present.\n\nIf a clipping path is present, it is applied to subsequent operations.\n\nFor example, in the command\n\nmagick cockatoo.tif -clip -negate negated.tif\n\nonly the pixels within the clipping path are negated.\n\nThe -clip feature requires SVG support. If the SVG delegate library is not present, the option is ignored.\n\nUse +clip to disable clipping for subsequent operations.\n\nClip the image as defined by this mask.\n\nUse the alpha channel of the current image as a mask. Any areas that is white is not modified by any of the 'image processing operators' that follow, until the mask is removed. Pixels in the black areas of the clip mask are modified per the requirements of the operator.\n\nIn some ways this is similar to (though not the same) as defining a rectangular -region, or using the negative of the mask (third) image in a three image -composite, operation.\n\nUse +clip-mask to disable clipping for subsequent operations.\n\nClip along a named path from the 8BIM profile.\n\nThis is identical to -clip except choose a specific clip path in the event the image has more than one path available. ImageMagick supports UTF-8 encoding. If your named path is in a different encoding, use `iconv` to convert the clip path name to that encoding otherwise the path name will not match.\n\nUse +clip-path to disable clipping for subsequent operations.\n\nMake a clone of an image (or images).\n\nInside parenthesis (where the operator is normally used) it will make a clone of the images from the last 'pushed' image sequence, and adds them to the end of the current image sequence. Outside parenthesis (not recommended) it clones the images from the current image sequence.\n\nSpecify the image by its index in the sequence. The first image is index 0. Negative indexes are relative to the end of the sequence; for example, −1 represents the last image of the sequence. Specify a range of images with a dash (e.g. 0−4). Separate multiple indexes with commas but no spaces (e.g. 0,2,5). A value of '0−−1 will effectively clone all the images.\n\nThe +clone will simply make a copy of the last image in the image sequence, and is thus equivalent to using an argument of '−1'.\n\nReplace the channel values in the first image using each corresponding channel in the second image as a color lookup table.\n\nThe second (LUT) image is ordinarily a gradient image containing the histogram mapping of how each channel should be modified. Typically it is a either a single row or column image of replacement color values. If larger than a single row or column, values are taken from a diagonal line from top-left to bottom-right corners.\n\nThe lookup is further controlled by the -interpolate setting, which is especially handy for an LUT which is not the full length needed by the ImageMagick installed Quality (Q) level. Good settings for this are 'bilinear' and 'catrom'. Catom can return a useful second-order continuity.\n\nThis operator is especially suited to replacing a grayscale image with a specific color gradient from the CLUT image.\n\nOnly the channel values defined by the -channel setting will have their values replaced. In particular, since the default -channel setting is RGB, this means that transparency (alpha/matte channel) is not affected, unless the -channel setting is modified. When the alpha channel is set, it is treated by the -clut operator in the same way as the other channels, implying that alpha/matte values are replaced using the alpha/matte values of the original image.\n\nIf either the image being modified, or the lookup image, contains no transparency (i.e. -alpha is turned 'off') but the -channel setting includes alpha replacement, then it is assumed that image represents a grayscale gradient which is used for the replacement alpha values. That is you can use a grayscale CLUT image to adjust a existing images alpha channel, or you can color a grayscale image using colors form CLUT containing the desired colors, including transparency.\n\nSee also -hald-clut which replaces colors according to the lookup of the full color RGB value from a 2D representation of a 3D color cube.\n\nFully define the look of each frame of an GIF animation sequence, to form a 'film strip' animation.\n\nOverlay each image in an image sequence according to its -dispose meta-data, to reproduce the look of an animation at each point in the animation sequence. All images should be the same size, and are assigned appropriate GIF disposal settings for the animation to continue working as expected as a GIF animation. Such frames are more easily viewed and processed than the highly optimized GIF overlay images.\n\nThe animation can be re-optimized after processing using the -layers method 'optimize', although there is no guarantee that the restored GIF animation optimization is better than the original.\n\nColorize the image by an amount specified by value using the color specified by the most recent -fill setting.\n\nSpecify the amount of colorization as a percentage. Separate colorization values can be applied to the red, green, and blue channels of the image with a comma-delimited list of colorization values (e.g., -colorize 0,0,50).\n\nDefine the colormap type.\n\nThe type can be shared or private.\n\nThis option only applies when the default X server visual is PseudoColor or GrayScale. Refer to -visual for more details. By default, a shared colormap is allocated. The image shares colors with other X clients. Some image colors could be approximated, therefore your image may look very different than intended. If private is chosen, the image colors appear exactly as they are defined. However, other clients may go technicolor when the image colormap is installed.\n\nSet the preferred number of colors in the image.\n\nThe actual number of colors in the image may be less than your request, but never more. Note that this a color reduction option. Images with fewer unique colors than specified by value will have any duplicate or unused colors removed. The ordering of an existing color palette may be altered. When converting an image from color to grayscale, it is more efficient to convert the image to the gray colorspace before reducing the number of colors. Refer to the color reduction algorithm for more details.\n\nApply color correction to the image.\n\nThis option permits saturation changes, hue rotation, luminance to alpha, and various other effects. Although variable-sized transformation matrices can be used, typically one uses a 5x5 matrix for an RGBA image and a 6x6 for CMYKA (or RGBA with offsets). The matrix is similar to those used by Adobe Flash except offsets are in column 6 rather than 5 (in support of CMYKA images) and offsets are normalized (divide Flash offset by 255).\n\nAs an example, to add contrast to an image with offsets, try this command:\n\nmagick kittens.jpg -color-matrix \\ \" 1.5 0.0 0.0 0.0, 0.0, -0.157 \\ 0.0 1.5 0.0 0.0, 0.0, -0.157 \\ 0.0 0.0 1.5 0.0, 0.0, -0.157 \\ 0.0 0.0 0.0 1.0, 0.0, 0.0 \\ 0.0 0.0 0.0 0.0, 1.0, 0.0 \\ 0.0 0.0 0.0 0.0, 0.0, 1.0\" kittens.png\n\nSet the image colorspace.\n\nChoices are:\n\nCMY CMYK Gray HCL HCLp HSB HSI HSL HSV HWB Jzazbz Lab LCHab LCHuv LMS Log Luv OHTA OkLab OkLCH Rec601YCbCr Rec709YCbCr RGB scRGB sRGB Transparent xyY XYZ YCbCr YCC YDbDr YIQ YPbPr YUV Undefined\n\nTo print a complete list of colorspaces, use -list colorspace.\n\nFor a more accurate color conversion to or from the linear RGB, CMYK, or grayscale colorspaces, use the -profile option. Note, ImageMagick assumes the sRGB colorspace if the image format does not indicate otherwise. For colorspace conversion, the gamma function is first removed to produce linear RGB.\n\nNote the scRGB colorspace requires HDRI support otherwise it behaves just like linear RGB.\n\nUse the Undefined colorspace to identify multi-spectral images.\n\nReturn a binary image where all colors within the specified range are changed to white. All other colors are changed to black.\n\nCombine one or more images into a single image.\n\nThe channels (previously set by -channel) of the combined image are taken from the grayscale values of each image in the sequence, in order. For the default -channel setting of RGB, this means the first image is assigned to the Red channel, the second to the Green channel, the third to the Blue.\n\nThis option can be thought of as the inverse to -separate, so long as the channel settings are the same. Thus, in the following example, the final image should be a copy of the original.\n\nmagick original.png -channel RGB -separate sepimage.png convert sepimage-0.png sepimage-1.png sepimage-2.png -channel RGB \\ -combine imagecopy.png\n\nEmbed a comment in an image.\n\nThis option sets the comment meta-data of an image read in after this option has been given. To modify a comment of images already in memory use \"-set comment\".\n\nThe comment can contain special format characters listed in the Format and Print Image Properties. These attributes are expanded when the comment is finally assigned to the individual images.\n\nIf the first character of string is @, the image comment is read from a file titled by the remaining characters in the string. Comments read in from a file are literal; no embedded formatting characters are recognized.\n\nComment meta-data are not visible on the image itself. To do that use the -annotate or -draw options instead.\n\nFor example,\n\n-comment \"%m:%f %wx%h\" bird.miff\n\nproduces an image comment of MIFF:bird.miff 512x480 (assuming that the image bird.miff has a width of 512 and a height of 480.\n\nMathematically and visually annotate the difference between an image and its reconstruction\n\nThis is a convert version of \"compare\" for two same sized images. The syntax is as follows, but other metrics are allowed.\n\nmagick image.png reference.png -metric RMSE -compare \\\n\ndifference.png\n\nTo get the metric value use the string format \"%[distortion]\".\n\nmagick image.png reference.png -metric RMSE -compare -format \\ \"%[distortion]\" info:\n\nPerform complex mathematics on an image sequence\n\nChoose from these operators:\n\nadd conjugate divide magnitude-phase multiply real-imaginary subtract\n\nOptionally specify the divide operator SNR with -define complex:snr=float.\n\nSet the type of image composition.\n\nSee Alpha Compositing for a detailed discussion of alpha compositing.\n\nThis setting affects image processing operators that merge two (or more) images together in some way. This includes the operators, -compare, -composite, -layers composite, -flatten, -mosaic, -layers merge, -border, -frame, and -extent.\n\nIt is also one of the primary options for the \"composite\" command.\n\nPerform alpha composition on two images and an optional mask\n\nTake the first image 'destination' and overlay the second 'source' image according to the current -compose setting. The location of the 'source' or 'overlay' image is controlled according to -gravity, and -geometry settings.\n\nIf a third image is given this is treated as a grayscale blending 'mask' image relative to the first 'destination' image. This mask is blended with the source image. However for the 'displace' compose method, the mask is used to provide a separate Y-displacement image instead.\n\nIf a -compose method requires extra numerical arguments or flags these can be provided by setting the -set 'option:compose:args' appropriately for the compose method.\n\nSome -compose methods can modify the 'destination' image outside the overlay area. It is disabled by default. You can enable this by setting the define: -define 'compose:clip-to-self=true'.\n\nThe SVG compositing specification requires that color and opacity values range between zero and QuantumRange inclusive. You can permit values outside this range with this option: -set 'option:compose:clamp=false\n\nUse pixel compression specified by type when writing the image.\n\nChoices are: None, BZip, Fax, Group4, JPEG, JPEG2000, Lossless, LZW, RLE or Zip.\n\nTo print a complete list of compression types, use -list compress.\n\nSpecify +compress to store the binary image in an uncompressed format. The default is the compression type of the specified image file.\n\nIf LZW compression is specified but LZW compression has not been enabled, the image data is written in an uncompressed LZW format that can be read by LZW decoders. This may result in larger-than-expected GIF files.\n\nLossless refers to lossless JPEG, which is only available if the JPEG library has been patched to support it. Use of lossless JPEG is generally not recommended.\n\nWhen writing an ICO file, you may request that the images be encoded in PNG format, by specifying Zip compression.\n\nWhen writing a JNG file, specify Zip compression to request that the alpha channel be encoded in PNG \"IDAT\" format, or JPEG to request that it be encoded in JPG \"JDAA\" format.\n\nUse the -quality option to set the compression level to be used by JPEG, PNG, MIFF, and MPEG encoders. Use the -sampling-factor option to set the sampling factor to be used by JPEG, MPEG, and YUV encoders for down-sampling the chroma channels.\n\nconnected-components labeling detects connected regions in an image, choose from 4 or 8 way connectivity.\n\nUse -define connected-components:verbose=true to output statistics associated with each unique label.\n\nEnhance or reduce the image contrast.\n\nThis option enhances the intensity differences between the lighter and darker elements of the image. Use -contrast to enhance the image or +contrast to reduce the image contrast.\n\nFor a more pronounced effect you can repeat the option:\n\nmagick rose: -contrast -contrast rose_c2.png\n\nIncrease the contrast in an image by stretching the range of intensity values.\n\nWhile performing the stretch, black-out at most black-point pixels and white-out at most white-point pixels. Or, if percent is used, black-out at most black-point % pixels and white-out at most white-point % pixels.\n\nPrior to ImageMagick 6.4.7-0, -contrast-stretch will black-out at most black-point pixels and white-out at most total pixels minus white-point pixels. Or, if percent is used, black-out at most black-point % pixels and white-out at most 100% minus white-point % pixels.\n\nNote that -contrast-stretch 0 will modify the image such that the image's min and max values are stretched to 0 and QuantumRange, respectively, without any loss of data due to burn-out or clipping at either end. This is not the same as -normalize, which is equivalent to -contrast-stretch 0.15x0.05% (or prior to ImageMagick 6.4.7-0, -contrast-stretch 2%x99%).\n\nInternally operator works by creating a histogram bin, and then uses that bin to modify the image. As such some colors may be merged together when they originally fell into the same 'bin'.\n\nAll the channels are normalized in concert by the same amount so as to preserve color integrity, when the default +channel setting is in use. Specifying any other -channel setting will normalize the RGB channels independently.\n\nSee also -auto-level for a 'perfect' normalization of mathematical images.\n\nThis operator is under review for re-development.\n\nConvolve an image with a user-supplied convolution kernel.\n\nThe kernel is a matrix specified as a comma-separated list of integers (with no spaces), ordered left-to right, starting with the top row. Presently, only odd-dimensioned kernels are supported, and therefore the number of entries in the specified kernel must be 32=9, 52=25, 72=49, etc.\n\nNote that the -convolve operator supports the -bias setting. This option shifts the convolution so that positive and negative results are relative to a user-specified bias value. This is important for non-HDRI compilations of ImageMagick when dealing with convolutions that contain negative as well as positive values. This is especially the case with convolutions involving high pass filters or edge detection. Without an output bias, the negative values is clipped at zero.\n\nWhen using an ImageMagick with the HDRI compile-time setting, -bias is not needed, as ImageMagick is able to store/handle any negative results without clipping to the color value range (0..QuantumRange). See the discussion on HDRI implementations of ImageMagick on the page High Dynamic-Range Images. For more about HDRI go the ImageMagick Usage pages or this Wikipedia entry.\n\nCopy pixels from one area of an image to another.\n\nCut out one or more rectangular regions of the image.\n\nSee Image Geometry for complete details about the geometry argument.\n\nThe width and height of the geometry argument give the size of the image that remains after cropping, and x and y in the offset (if present) gives the location of the top left corner of the cropped image with respect to the original image. To specify the amount to be removed, use -shave instead.\n\nIf the x and y offsets are present, a single image is generated, consisting of the pixels from the cropping region. The offsets specify the location of the upper left corner of the cropping region measured downward and rightward with respect to the upper left corner of the image. If the -gravity option is present with NorthEast, East, or SouthEast gravity, it gives the distance leftward from the right edge of the image to the right edge of the cropping region. Similarly, if the -gravity option is present with SouthWest, South, or SouthEast gravity, the distance is measured upward between the bottom edges.\n\nIf the x and y offsets are omitted, a set of tiles of the specified geometry, covering the entire input image, is generated. The rightmost tiles and the bottom tiles are smaller if the specified geometry extends beyond the dimensions of the input image.\n\nYou can add the @ to the geometry argument to equally divide the image into the number of tiles generated.\n\nBy adding a exclamation character flag to the geometry argument, the cropped images virtual canvas page size and offset is set as if the geometry argument was a viewport or window. This means the canvas page size is set to exactly the same size you specified, the image offset set relative top left corner of the region cropped.\n\nIf the cropped image 'missed' the actual image on its virtual canvas, a special single pixel transparent 'missed' image is returned, and a 'crop missed' warning given.\n\nIt might be necessary to +repage the image prior to cropping the image to ensure the crop coordinate frame is relocated to the upper-left corner of the visible image. Similarly you may want to use +repage after cropping to remove the page offset that will be left behind. This is especially true when you are going to write to an image format such as PNG that supports an image offset.\n\nDisplace image colormap by amount.\n\nAmount defines the number of positions each colormap entry is shifted.\n\nEnable debug printout.\n\nThe events parameter specifies which events are to be logged. It can be either None, All, Trace, or a comma-separated list consisting of one or more of the following domains: Accelerate, Annotate, Blob, Cache, Coder, Configure, Deprecate, Exception, Locale, Render, Resource, Security, TemporaryFile, Transform, X11, or User.\n\nFor example, to log cache and blob events, use.\n\nmagick -debug \"Cache,Blob\" rose: rose.png\n\nThe User domain is normally empty, but developers can log user events in their private copy of ImageMagick.\n\nTo print the complete list of debug methods, use -list debug.\n\nUse the -log option to specify the format for debugging output.\n\nUse +debug to turn off all logging.\n\nDebugging may also be set using the MAGICK_DEBUG environment variable. The allowed values for the MAGICK_DEBUG environment variable are the same as for the -debug option.\n\nDecipher and restore pixels that were previously transformed by -encipher.\n\nGet the passphrase from the file specified by filename.\n\nFor more information, see the webpage, ImageMagick: Encipher or Decipher an Image.\n\nFind areas that has changed between images\n\nGiven a sequence of images all the same size, such as produced by -coalesce, replace the second and later images, with a smaller image of just the area that changed relative to the previous image.\n\nThe resulting sequence of images can be used to optimize an animation sequence, though will not work correctly for GIF animations when parts of the animation can go from opaque to transparent.\n\nThis option is actually equivalent to the -layers method 'compare-any'.\n\nAdd specific global settings generally used to control coders and image processing operations.\n\nThis option creates one or more definitions for coders and decoders to use while reading and writing image data. Definitions are generally used to control image file format coder modules, and image processing operations, beyond what is provided by normal means. Defined settings are listed in -verbose information (\"info:\" output format) as \"Artifacts\".\n\nIf value is missing for a definition, an empty-valued definition of a flag is created with that name. This used to control on/off options. Use +define key to remove definitions previously created. Use +define \"*\" to remove all existing definitions.\n\nThe same 'artifact' settings can also be defined using the -set \"option:key\" \"value\" option, which also allows the use of Format and Print Image Properties in the defined value.\n\nThe option and key are case-independent (they are converted to lowercase for use within the decoders) while the value is case-dependent.\n\nSuch settings are global in scope, and affect all images and operations.\n\nSee ImageMagick Defines for a list of recognized defines. For example:\n\nmagick bilevel.tif -define ps:imagemask eps3:stencil.ps\n\nSet attributes of the image registry by prefixing the value with registry:. For example, to set a temporary path to put work files, use:\n\n-define registry:temporary-path=/data/tmp\n\nDisplay the next image after pausing.\n\nThis option is useful for regulating the animation of image sequences ticks/ticks-per-second seconds must expire before the display of the next image. The default is no delay between each showing of the image sequence. The default ticks-per-second is 100.\n\nUse > to change the image delay only if its current value exceeds the given delay. < changes the image delay only if current value is less than the given delay. For example, if you specify 30> and the image delay is 20, the image delay does not change. However, if the image delay is 40 or 50, the delay it is changed to 30. Enclose the given delay in quotation marks to prevent the < or > from being interpreted by your shell as a file redirection.\n\nDelete the images specified by index, from the image sequence.\n\nSpecify the image by its index in the sequence. The first image is index 0. Negative indexes are relative to the end of the sequence, for example, -1 represents the last image of the sequence. Specify a range of images with a dash (e.g. 0-4). Separate indexes with a comma (e.g. 0,2). Use +delete to delete the last image in the current image sequence. Use -delete 0--1 to delete the entire image sequence.\n\nYou can also delete images from the persistent registry, e.g., -delete registry:checkers\n\nSet the horizontal and vertical resolution of an image for rendering to devices.\n\nThis option specifies the image resolution to store while encoding a raster image or the canvas resolution while rendering (reading) vector formats such as Postscript, PDF, WMF, and SVG into a raster image. Image resolution provides the unit of measure to apply when rendering to an output device or raster image. The default unit of measure is in dots per inch (DPI). The -units option may be used to select dots per centimeter instead.\n\nThe default resolution is 72 dots per inch, which is equivalent to one point per pixel (Macintosh and Postscript standard). Computer screens are normally 72 or 96 dots per inch, while printers typically support 150, 300, 600, or 1200 dots per inch.\n\nIf the file format supports it, this option may be used to update the stored image resolution. Note that Photoshop stores and obtains image resolution from a proprietary embedded profile. If this profile is not stripped from the image, then Photoshop will continue to treat the image using its former resolution, ignoring the image resolution specified in the standard file header.\n\nThe -density option sets an attribute and does not alter the underlying raster image. It may be used to adjust the rendered size for desktop publishing purposes by adjusting the scale applied to the pixels. To change the number of pixels in the image so that it has the same physical dimensions (in inches or centimeters), use the -resample option.\n\nDepth of the image.\n\nColor depth is the number of bits per channel for each pixel. For example, for a depth of 16 using RGB, each channel of Red, Green, and Blue can range from 0 to 2^16-1 (65535). Use this option to specify the depth of raw images formats whose depth is unknown such as GRAY, RGB, or CMYK, or to change the depth of any image after it has been read. By default, when reducing the pixel depth, higher order bits are lopped. Use -dither FloydSteinberg to instead distribute the quantization error to neighboring pixels.\n\nUse +depth to return depth to its default value.\n\nObtain image by descending window hierarchy.\n\nStraighten an image. A threshold of 40% works for most images.\n\nUse -set option:deskew:auto-crop true | false to auto crop the image.\n\nReduce the speckles within an image.\n\nRender text right-to-left or left-to-right. Requires the RAQM delegate library and complex text layout.\n\nShift image pixels as defined by a displacement map.\n\nWith this option, the 'overlay' image, and optionally the 'mask' image, is used as a displacement map, which is used to displace the lookup of what part of the 'background' image is seen at each point of the overlaid area. Much like the displacement map is a 'lens' that redirects light shining through it so as to present a distorted view the original 'background' image behind it.\n\nAny perfect grey areas of the displacement map produce a zero displacement of the image. Black areas produce the given maximum negative displacement of the lookup point, while white produce a maximum positive displacement of the lookup.\n\nNote that it is the lookup of the 'background' that is displaced, not a displacement of the image itself. As such an area of the displacement map containing 'white' will have the lookup point 'shifted' by a positive amount, and thus generating a copy of the destination image to the right/downward from the correct position. That is the image will look like it may have been 'shifted' in a negative left/upward direction. Understanding this is a very important in understanding how displacement maps work.\n\nThe given arguments define the maximum amount of displacement in pixels that a particular map can produce. If the displacement scale is large enough it is also possible to lookup parts of the 'background' image that lie well outside the bounds of the displacement map itself. That is you could very easily copy a section of the original image from outside the overlay area into the overlay area.\n\nThe '%' flag makes the displacement scale relative to the size of the overlay image (100% = half width/height of image). Using '!' switches percentage arguments to refer to the destination image size instead. these flags were added as of IM v6.5.3-5.\n\nNormally a single grayscale displacement map is provided, which with the given scaling values will determine a single direction (vector) in which displacements can occur (positively or negatively). However, if you also specify a third image which is normally used as a mask, the composite image is used for horizontal X displacement, while the mask image is used for vertical Y displacement. This allows you to define completely different displacement values for the X and Y directions, and allowing you to lookup any point within the scale bounds. In other words each pixel can lookup any other nearby pixel, producing complex 2 dimensional displacements, rather than a simple 1 dimensional vector displacements.\n\nAlternatively rather than supplying two separate images, as of IM v6.4.4-0, you can use the 'red' channel of the overlay image to specify the horizontal or X displacement, and the 'green' channel for the vertical or Y displacement.\n\nAs of IM v6.5.3-5 any alpha channel in the overlay image is used as a mask the transparency of the destination image. However areas outside the overlaid areas will not be affected.\n\nSpecifies the X server to contact.\n\nThis option is used with convert for obtaining image or font from this X server. See X(1).\n\nDefine the GIF disposal image setting for images that are being created or read in.\n\nThe layer disposal method defines the way each the displayed image is to be modified after the current 'frame' of an animation has finished being displayed (after its 'delay' period), but before the next frame on an animation is to be overlaid onto the display.\n\nHere are the valid methods:\n\nYou can also use the numbers given above, which is what the GIF format uses internally to represent the above settings.\n\nTo print a complete list of dispose methods, use -list dispose.\n\nUse +dispose, turn off the setting and prevent resetting the layer disposal methods of images being read in.\n\nUse -set 'dispose' method to set the image disposal method for images already in memory.\n\nMaximum RMSE for subimage match (default 0.2).\n\nDissolve an image into another by the given percent.\n\nThe opacity of the composite image is multiplied by the given percent, then it is composited 'over' the main image. If src_percent is greater than 100, start dissolving the main image so it becomes transparent at a value of '200'. If both percentages are given, each image are dissolved to the percentages given.\n\nNote that dissolve percentages do not add, two opaque images dissolved '50,50', produce a 75% transparency. For a 50% + 50% blending of the two images, you would need to use dissolve values of '50,100'.\n\nDistort an image, using the given method and its required arguments.\n\nThe arguments is a single string containing a list of floating point numbers separated by commas or spaces. The number of and meaning of the floating point values depends on the distortion method being used.\n\nChoose from these distortion types:\n\nTo print a complete list of distortion methods, use -list distort.\n\nMany of the above distortion methods such as 'Affine', 'Perspective', and 'Shepards' use a list control points defining how these points in the given image should be distorted in the destination image. Each set of four floating point values represent a source image coordinate, followed immediately by the destination image coordinate. This produces a list of values such as...\n\nU1,V1 X1,Y1 U2,V2 X2,Y2 U3,V3 X3,Y3 ... Un,Vn Xn,Yn\n\nwhere U,V on the source image is mapped to X,Y on the destination image.\n\nFor example, to warp an image using 'perspective' distortion, needs a list of at least 4 sets of coordinates, or 16 numbers. Here is the perspective distortion of the built-in \"rose:\" image. Note how spaces were used to group the 4 sets of coordinate pairs, to make it easier to read and understand.\n\nmagick rose: -virtual-pixel black \\ -distort Perspective '0,0,0,0 0,45,0,45 69,0,60,10 69,45,60,35' \\ rose_3d_rotated.gif\"\n\nIf more that the required number of coordinate pairs are given for a distortion, the distortion method is 'least squares' fitted to produce the best result for all the coordinate pairs given. If less than the ideal number of points are given, the distort will generally fall back to a simpler form of distortion that can handles the smaller number of coordinates (usually a linear 'Affine' distortion).\n\nBy using more coordinates you can make use of image registration tool to find matching coordinate pairs in overlapping images, so as to improve the 'fit' of the distortion. Of course a bad coordinate pair can also make the 'fit' worse. Caution is always advised.\n\nColors are acquired from the source image according to a cylindrical resampling -filter, using a special technique known as EWA resampling. This produces very high quality results, especially when images become smaller (minified) in the output, which is very common when using 'perspective' distortion. For example here we view a infinitely tiled 'plane' all the way to the horizon.\n\nmagick -size 90x90 pattern:checkerboard -normalize -virtual-pixel tile \\ -distort perspective '0,0,5,45 89,0,45,46 0,89,0,89 89,89,89,89' \\ checks_tiled.jpg\n\nNote that a infinitely tiled perspective images involving the horizon can be very slow, because of the number of pixels that are compressed to generate each individual pixel close to the 'horizon'. You can turn off EWA resampling, by specifying the special -filter setting of 'point' (recommended if you plan to use super-sampling instead).\n\nIf an image generates invalid pixels, such as the 'sky' in the last example, -distort will use the current -mattecolor setting for these pixels. If you do not what these pixels to be visible, set the color to match the rest of the ground.\n\nThe output image size will by default be the same as the input image. This means that if the part of the distorted image falls outside the viewed area of the 'distorted space', those parts is clipped and lost. However if you use the plus form of the operator (+distort) the operator will attempt (if possible) to show the whole of the distorted image, while retaining a correct 'virtual canvas' offset, for image layering. This offset may need to be removed using +repage, to remove if it is unwanted.\n\nSetting -verbose setting, will cause -distort to attempt to output the internal coefficients, and the -fx equivalent to the distortion, for expert study, and debugging purposes. This may not be available for all distorts.\n\nYou can alternatively specify a special \"-define distort:viewport={geometry_string}\" setting which will specify the size and the offset of the generated 'viewport' image of the distorted image space.\n\nSetting a \"-define distort:scale=scale_factor\" will scale the output image (viewport or otherwise) by that factor without changing the viewed contents of the distorted image. This can be used either for 'super-sampling' the image for a higher quality result, or for panning and zooming around the image (with appropriate viewport changes, or post-distort cropping and resizing).\n\nSetting \"-define resample:verbose=1\" will output the cylindrical filter lookup table created by the EWA (Elliptical Weighted Average) resampling algorithm. Note this table uses a squared radius lookup value. This is typically only used for debugging EWA resampling.\n\nLaunch a distributed pixel cache server.\n\nApply a Riemersma or Floyd-Steinberg error diffusion dither to images when general color reduction is applied via an option, or automagically when saving to specific formats. This enabled by default.\n\nDithering places two or more colors in neighboring pixels so that to the eye a closer approximation of the images original color is reproduced. This reduces the number of colors needed to reproduce the image but at the cost of a lower level pattern of colors. Error diffusion dithers can use any set of colors (generated or user defined) to an image.\n\nDithering is turned on by default, to turn it off use the plus form of the setting, +dither. This will also render PostScript without text or graphic aliasing. Disabling dithering often (but not always) leads to faster process, a smaller number of colors, but more cartoon like image coloring. Generally resulting in 'color banding' effects in areas with color gradients.\n\nThe color reduction operators -colors, -monochrome, -remap, and -posterize, apply dithering to images using the reduced color set they created. These operators are also used as part of automatic color reduction when saving images to formats with limited color support, such as GIF:, XBM:, and others, so dithering may also be used in these cases.\n\nAlternatively you can use -random-threshold to generate purely random dither. Or use -ordered-dither to apply threshold mapped dither patterns, using uniform color maps, rather than specific color maps.\n\nUse \"-define dither:diffusion-amount=35%, for example, to control the amount of Floyd-Steinberg dither.\n\nAnnotate an image with one or more graphic primitives.\n\nUse this option to annotate or decorate an image with one or more graphic primitives. The primitives include shapes, text, transformations, and pixel operations.\n\nThe shape primitives:\n\nThe text primitive:\n\ntext\n\nx0,y0 string\n\nThe text gravity primitive:\n\ngravity\n\nNorthWest, North, NorthEast, West, Center, East, SouthWest, South, or SouthEast\n\nThe text gravity primitive only affects the placement of text and does not interact with the other primitives. It is equivalent to using the -gravity command-line option, except that it is limited in scope to the -draw option in which it appears.\n\nThe transformation primitives:\n\nThe pixel operation primitives:\n\nThe shape primitives are drawn in the color specified by the preceding -fill setting. For unfilled shapes, use -fill none. You can optionally control the stroke (the \"outline\" of a shape) with the -stroke and -strokewidth settings.\n\nA point primitive is specified by a single point in the pixel plane, that is, by an ordered pair of integer coordinates, x,y. (As it involves only a single pixel, a point primitive is not affected by -stroke or -strokewidth.)\n\nA line primitive requires a start point and end point.\n\nA rectangle primitive is specified by the pair of points at the upper left and lower right corners.\n\nA roundRectangle primitive takes the same corner points as a rectangle followed by the width and height of the rounded corners to be removed.\n\nThe circle primitive makes a disk (filled) or circle (unfilled). Give the center and any point on the perimeter (boundary). Note, by using a translation, you can remove the need to calculate the circles edge coordinate, but can just give the radius directly:\n\nmagick -size 100x60 xc: -stroke SeaGreen -fill PaleGreen -strokewidth 2 -draw 'translate 50,30 circle 0,0 25,0' circle.gif\n\nThe arc primitive is used to inscribe an elliptical segment in to a given rectangle. An arc requires the two corners used for rectangle (see above) followed by the start and end angles of the arc of the segment (e.g. 130,30 200,100 45,90). The start and end points produced are then joined with a line segment and the resulting segment of an ellipse is filled.\n\nUse ellipse to draw a partial (or whole) ellipse. Give the center point, the horizontal and vertical \"radii\" (the semi-axes of the ellipse) and start and end angles in degrees (e.g. 100,100 100,150 0,360).\n\nThe polyline and polygon primitives require three or more points to define their perimeters. A polyline is simply a polygon in which the final point is not stroked to the start point. When unfilled, this is a polygonal line. If the -stroke setting is none (the default), then a polyline is identical to a polygon.\n\nA coordinate is a pair of integers separated by a space or optional comma.\n\nAs an example, to define a circle centered at 100,100 that extends to 150,150 use:\n\n-draw 'circle 100,100 150,150'\n\nThe Bezier primitive creates a spline curve and requires three or points to define its shape. The first and last points are the knots and these points are attained by the curve, while any intermediate coordinates are control points. If two control points are specified, the line between each end knot and its sequentially respective control point determines the tangent direction of the curve at that end. If one control point is specified, the lines from the end knots to the one control point determines the tangent directions of the curve at each end. If more than two control points are specified, then the additional control points act in combination to determine the intermediate shape of the curve. In order to draw complex curves, it is highly recommended either to use the path primitive or to draw multiple four-point bezier segments with the start and end knots of each successive segment repeated. For example:\n\n-draw 'bezier 20,50 45,100 45,0 70,50' -draw 'bezier 70,50 95,100 95,0 120,50'\n\nA path represents an outline of an object, defined in terms of moveto (set a new current point), lineto (draw a straight line), curveto (draw a Bezier curve), arc (elliptical or circular arc) and closepath (close the current shape by drawing a line to the last moveto) elements. Compound paths (i.e., a path with subpaths, each consisting of a single moveto followed by one or more line or curve operations) are possible to allow effects such as donut holes in objects. (See Paths.)\n\nUse image to composite an image with another image. Follow the image keyword with the composite operator, image location, image size, and filename:\n\n-draw 'image SrcOver 100,100 225,225 image.jpg'\n\nYou can use 0,0 for the image size, which means to use the actual dimensions found in the image header. Otherwise, it is scaled to the given dimensions. See Alpha Compositing for a detailed discussion of alpha composition methods that are available.\n\nThe \"special augmented compose operators\" such as \"dissolve\" that require arguments cannot be used at present with the -draw image option.\n\nUse text to annotate an image with text. Follow the text coordinates with a string. If the string has embedded spaces, enclose it in single or double quotes.\n\nFor example, the following annotates the image with Works like magick! for an image titled bird.miff.\n\n-draw \"text 100,100 'Works like magick!'\"\n\nSee the -annotate option for another convenient way to annotate an image with text.\n\nThe rotate primitive rotates subsequent shape primitives and text primitives about the origin of the main image:\n\n-draw \"rotate 45 text 10,10 'Works like magick!'\"\n\nThe translate primitive translates subsequent shape and text primitives.\n\nThe scale primitive scales them.\n\nThe skewX and skewY primitives skew them with respect to the origin of the main image or the region.\n\nThe transformations modify the current affine matrix, which is initialized from the initial affine matrix defined by the -affine option. Transformations are cumulative within the -draw option. The initial affine matrix is not affected; that matrix is only changed by the appearance of another -affine option. If another -draw option appears, the current affine matrix is reinitialized from the initial affine matrix.\n\nUse the color primitive to change the color of a pixel to the fill color (see -fill). Follow the pixel coordinate with a method:\n\npoint replace floodfill filltoborder reset\n\nConsider the target pixel as that specified by your coordinate. The point method recolors the target pixel. The replace method recolors any pixel that matches the color of the target pixel. Floodfill recolors any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder recolors any neighbor pixel that is not the border color. Finally, reset recolors all pixels.\n\nUse matte to the change the pixel matte value to transparent. Follow the pixel coordinate with a method (see the color primitive for a description of methods). The point method changes the matte value of the target pixel. The replace method changes the matte value of any pixel that matches the color of the target pixel. Floodfill changes the matte value of any pixel that matches the color of the target pixel and is a neighbor, whereas filltoborder changes the matte value of any neighbor pixel that is not the border color (-bordercolor). Finally reset changes the matte value of all pixels.\n\nYou can set the primitive color, font, and font bounding box color with -fill, -font, and -box respectively. Options are processed in command line order so be sure to use these options before the -draw option.\n\nStrings that begin with a number must be quoted (e.g. use '1.png' rather than 1.png).\n\nDrawing primitives conform to the Magick Vector Graphics format.\n\nNote, drawing requires an alpha channel. If none is available, an all opaque alpha channel is implicitly created.\n\nDuplicate an image one or more times.\n\nSpecify the count and the image to duplicate by its index in the sequence. The first image is index 0. Negative indexes are relative to the end of the sequence, for example, -1 represents the last image of the sequence. Specify a range of images with a dash (e.g. 0-4). Separate indexes with a comma (e.g. 0,2). Use +duplicate to duplicate the last image in the current image sequence.\n\nDetect edges within an image.\n\nEmboss an image.\n\nEncipher pixels for later deciphering by -decipher.\n\nGet the passphrase from the file specified by filename.\n\nFor more information, see the webpage, ImageMagick: Encipher or Decipher an Image.\n\nSpecify the text encoding.\n\nChoose from\n\nAdobeCustom AdobeExpert AdobeStandard AppleRoman BIG5 GB2312 Latin 2 None SJIScode Symbol Unicode Wansung\n\nSpecify endianness (MSB or LSB) of the image.\n\nTo print a complete list of endian types, use the -list endian option.\n\nUse +endian to revert to unspecified endianness.\n\nApply a digital filter to enhance a noisy image.\n\nPerform histogram equalization on the image channel-by-channel.\n\nTo perform histogram equalization on all channels in concert, transform the image into some other color space, such as HSL, OHTA, YIQ or YUV, then equalize the appropriate intensity-like channel, then convert back to RGB.\n\nFor example using HSL, we have: ... -colorspace HSL -channel lightness -equalize -colorspace sRGB ...\n\nFor YIQ, YUV and OHTA use the red channel. For example, OHTA is a principal components transformation that puts most of the information in the first channel. Here we have ... -colorspace OHTA -channel red -equalize -colorspace sRGB ...\n\nAlter channel pixels by evaluating an arithmetic, relational, or logical expression.\n\n(See the -function operator for some multi-parameter functions. See the -fx operator if more elaborate calculations are needed.)\n\nThe behaviors of each operator are summarized in the following list. For brevity, the numerical value of a \"pixel\" referred to below is the value of the corresponding channel of that pixel, while a \"normalized pixel\" is that number divided by the maximum (installation-dependent) value QuantumRange. (If normalized pixels are used, they are restored, following the other calculations, to the full range by multiplying by QuantumRange.)\n\nThe specified functions are applied only to each previously set -channel in the image. If necessary, the results of the calculations are truncated (clipped) to fit in the interval [0, QuantumRange]. The transparency channel of the image is represented as a 'alpha' values (0 = fully transparent), so, for example, a Divide by 2 of the alpha channel will make the image semi-transparent. Append the percent symbol '%' to specify a value as a percentage of the QuantumRange.\n\nTo print a complete list of -evaluate operators, use -list evaluate.\n\nThe results of the Add, Subtract and Multiply methods can also be achieved using either the -level or the +level operator, with appropriate argument, to linearly modify the overall range of color values. Please note, however, that -level treats transparency as 'matte' values (0 = opaque), while -evaluate works with 'alpha' values.\n\nAddModulus has been added as of ImageMagick 6.4.8-4 and provides addition modulo the QuantumRange. It is therefore equivalent to Add unless the resulting pixel value is outside the interval [0, QuantumRange].\n\nExp or Exponential has been added as of ImageMagick 6.6.5-1 and works on normalized pixel values. The value used with Exp should be negative so as to produce a decaying exponential function. Non-negative values will always produce results larger unity and thus outside the interval [0, QuantumRange]. The formula is expressed below.\n\nexp(value × u)\n\nIf the input image is squared, for example, using -function polynomial \"2 0 0\", then a decaying Gaussian function will be the result.\n\nLog has been added as of ImageMagick 6.4.2-1 and works on normalized pixel values. This a scaled log function. The value used with Log provides a scaling factor that adjusts the curvature in the graph of the log function. The formula applied to a normalized value u is below.\n\nlog(value × u + 1) / log(value + 1)\n\nPow has been added as of ImageMagick 6.4.1-9, and works on normalized pixel values. Note that Pow is related to the -gamma operator. For example, -gamma 2 is equivalent to -evaluate pow 0.5, i.e., a 'square root' function. The value used with -gamma is simply the reciprocal of the value used with Pow.\n\nCosine and Sine was added as of IM v6.4.8-8 and converts the image values into a value according to a (co)sine wave function. The synonyms Cos and Sin may also be used. The output is biased 50% and normalized by 50% so as to fit in the respective color value range. The value scaling of the period of the function (its frequency), and thus determines the number of 'waves' that will be generated over the input color range. For example, if the value is 1, the effective period is simply the QuantumRange; but if the value is 2, then the effective period is the half the QuantumRange.\n\n0.5 + 0.5 × cos(2 π u × value).\n\nUse -set 'option:evaluate:clamp=true to clamp the evaluation value.\n\nSee also the -function operator, which is a multi-value version of evaluate.\n\nAlter channel pixels by evaluating an arithmetic, relational, or logical expression over a sequence of images. Ensure all the images in the sequence are in the same colorspace, otherwise you may get unexpected results, e.g. add -colorspace sRGB to your command-line.\n\nTo print a complete list of -evaluate-sequence operators, use -list evaluate.\n\nStop processing at this point.\n\nNo further options are processed after this option. Useful in a script to force the magick command to exit without actually closing the pipeline that it is processing options from. You can also use the option as a final option on the magick command line instead of an implicit output image, to completely prevent any image write. Note, even the NULL: coder requires at least one image, for it to 'not write'! This option does not require any images at all.\n\nSet the image size and offset.\n\nIf the image is enlarged, unfilled areas are set to the background color. To position the image, use offsets in the geometry specification or precede with a -gravity setting. To specify how to compose the image with the background, use -compose.\n\nThe following command reduces or expands a JPEG image to fit on an 800x600 display. If the aspect ratio of the input image isn't exactly 4:3, then the image is centered on an 800x600 black canvas:\n\nmagick input.jpg -resize 800x600 -background black -compose Copy \\ -gravity center -extent 800x600 -quality 92 output.jpg\n\nThe command can also be used with a ratio. If the image is not already at that ratio, it will be cropped to fit it. The -gravity setting has the expected effects.\n\nThe following command crops a JPEG image so that it has a 4:3 ratio:\n\nmagick input.jpg -extent 4:3 -quality 92 output.jpg\n\nAppend < to pad only if the image is smaller than the specified size and not crop if the image is larger (i.e. no-op). Append > to crop only if the image is larger than the specified size and not extend if the image is smaller. (i.e. no-op).\n\nSee Image Geometry for complete details about the geometry argument.\n\nExtract the specified area from image.\n\nThis option is most useful for extracting a subregion of a very large raw image. Note that these two commands are equivalent:\n\nmagick -size 16000x16000 -depth 8 -extract 640x480+1280+960 \\ image.rgb image.png\", convert -size 16000x16000 -depth 8 'image.rgb[640x480+1280+960]' \\ image.rgb image.png\"\n\nIf you omit the offsets, as in\n\nmagick -size 16000x16000 -depth 8 -extract 640x480 \\ image.rgb image.png\n\nthe image is resized to the specified dimensions instead, equivalent to:\n\nmagick -size 16000x16000 -depth 8 -resize 640x480 image.rgb image.png\n\nSee Image Geometry for complete details about the geometry argument.\n\nSet a font family for text.\n\nThis setting suggests a font family that ImageMagick should try to use for rendering text. If the family can be found it is used; if not, a default font (e.g., \"Arial\") or a family known to be similar is substituted (e.g., \"Courier\" might be used if \"System\" is requested but not found). Note, the family can be a CSS-style font list.\n\nFor other settings that affect fonts, see the options -font, -pointsize, -stretch, -style, and -weight.\n\nDisplay (co-occurrence matrix) texture measure features for each channel in the image in each of four directions (horizontal, vertical, left and right diagonals) for the specified distance.\n\nAngular Second Moment Sum Entropy Contrast Entropy Correlation Difference Variance Sum of Squares Variance Difference Entropy Inverse Difference Moment Information Measure of Correlation 1 Sum Average Information Measure of Correlation 2 Sum Variance Maximum Correlation Coefficient\n\nImplements the forward discrete Fourier transform (DFT).\n\nThis option is new as of ImageMagick 6.5.4-3 (and now working for Windows users in ImageMagick 6.6.0-9). It transforms an image from the normal (spatial) domain to the frequency domain. In the frequency domain, an image is represented as a superposition of complex sinusoidal waves of varying amplitudes. The image x and y coordinates are the possible frequencies along the x and y directions, respectively, and the pixel intensity values are complex numbers that correspond to the sinusoidal wave amplitudes. See for example, Fourier Transform, Discrete Fourier Transform and Fast Fourier Transform.\n\nA single image name is provided as output for this option. However, the output result will have two components. It is either a two-frame image or two separate images, depending upon whether the image format specified supports multi-frame images. The reason that we get a dual output result is because the frequency domain represents an image using complex numbers, which cannot be visualized directly. Therefore, the complex values are automagically separated into a two-component image representation. The first component is the magnitude of the complex number and the second is the phase of the complex number. See for example, Complex Numbers.\n\nThe magnitude and phase component images must be specified using image formats that do not limit the color or compress the image. Thus, MIFF, TIF, PFM, EXR and PNG are the recommended image formats to use. All of these formats, except PNG support multi-frame images. So for example,\n\nmagick image.png -fft fft_image.miff\n\ngenerates a magnitude image as fft_image.miff[0] and a phase image as fft_image.miff[1]. Similarly,\n\nmagick image.png -fft fft_image.png\n\ngenerates a magnitude image as fft_image-0.png and a phase image as fft_image-1.png. If you prefer this representation, then you can force any of the other formats to produce two output images by including +adjoin following -fft in the command line.\n\nThe input image can be any size, but if not square and even-dimensioned, it is padded automagically to the larger of the width or height of the input image and to an even number of pixels. The padding will occur at the bottom and/or right sides of the input image. The resulting output magnitude and phase images is square at this size. The kind of padding relies on the -virtual-pixel setting.\n\nBoth output components will have dynamic ranges that fit within [0, QuantumRange], so that HDRI need not be enabled. Phase values nominally range from 0 to 2*π, but is scaled to span the full dynamic range. (The first few releases had non-HDRI scaled but HDRI not scaled). The magnitude image is not scaled and thus generally will contain very small values. As such, the image normally will appear totally black. In order to view any detail, the magnitude image typically is enhanced with a log function into what is usually called the spectrum. A log function is used to enhance the darker values more in comparison to the lighter values. This can be done, for example, as follows:\n\nmagick fft_image.miff[0] -contrast-stretch 0 \\ -evaluate log 1000 fft_image_spectrum.png\"\n\nwhere either -contrast-stretch 0 or -auto-level is used to scale the image to full dynamic range, first. The argument to the -evaluate log typically is specified between 100 and 10,000, depending upon the amount of detail that one wants to bring out in the spectrum. Larger values produce more visible detail. Too much detail, however, may hide the important features.\n\nThe FFTW delegate library is required to use -fft.\n\nUse +fft to produce two output images that are the real and imaginary components of the complex valued Fourier transform.\n\nHowever, as the real and imaginary components can contain negative values, this requires that IM be configured with HDRI enabled. In this case, you must use either MIFF, TIF, PFM or MPC formats for the real and imaginary component results, since they are formats that preserve both negative and fractional values without clipping them or truncating the fractional part. With either MIFF or TIF, one should add -define quantum:format=32, to allow those image types to work properly in HDRI mode without clipping.\n\nThe real and imaginary component images resulting from +fft are also square, even dimensioned images due to the same padding that was discussed above for the magnitude and phase component images.\n\nSee the discussion on HDRI implementations of ImageMagick on the page High Dynamic-Range Images. For more about HDRI go the ImageMagick Usage pages, Fred's Fourier Processing With ImageMagick page or this Wikipedia entry.\n\nBy default the FFT is normalized (and the IFT is not). Use \"-define fourier:normalize=forward to explicitly normalize the FFT and unnormalize the IFT.\n\nColor to use when filling a graphic primitive.\n\nThis option accepts a color name, a hex color, or a numerical RGB, RGBA, HSL, HSLA, CMYK, or CMYKA specification. See Color Names for a description of how to properly specify the color argument.\n\nEnclose the color specification in quotation marks to prevent the \"#\" or the parentheses from being interpreted by your shell.\n\nFor example,\n\n-fill blue -fill \"#ddddff\" -fill \"rgb(255,255,255)\"\n\nSee -draw for further details.\n\nTo print a complete list of color names, use the -list color option.\n\nUse this type of filter when resizing or distorting an image.\n\nUse this option to affect the resizing operation of an image during operations such as -resize and -distort. For example you can use a simple resize filter such as:\n\nPoint Hermite Cubic Box Gaussian Catrom Triangle Quadratic Mitchell CubicSpline\n\nUse -define filter:lobes={2,3,4} to specify the support size for filtering for the CubicSpline filter.\n\nThe Bessel and Sinc filter is also provided (as well as a faster SincFast equivalent form). However these filters are generally useless on their own as they are infinite filters that are being clipped to the filters support size. Their direct use is not recommended except via expert settings (see below).\n\nInstead these special filter functions are typically windowed by a windowing function that the -filter setting defines. That is using these functions will define a 'Windowed' filter, appropriate to the operator involved. Windowed filters include:\n\nLanczos Hamming Parzen Blackman Kaiser Welsh Hanning Bartlett Bohman\n\nAlso one special self-windowing filter is also provided Lagrange, which will automagically re-adjust its function depending on the current 'support' or 'lobes' expert settings (see below).\n\nIf you do not select a filter with this option, the filter defaults to Mitchell for a colormapped image, an image with a matte channel, or if the image is enlarged. Otherwise the filter default to Lanczos.\n\nTo print a complete list of resize filters, use the -list filter option.\n\nYou can modify how the filter behaves as it scales your image through the use of these expert settings (see also -define and -set):-\n\nFor example, to get a 8 lobe jinc windowed sinc filter (Genseng filter?):\n\nmagick image.png \\ -filter sinc \\ -set filter:window=jinc \\ -set filter:lobes=8 \\ -resize 150% image.jpg\"\n\nOr a raw un-windowed Sinc filter with 4 lobes:\n\nmagick image.png \\ -set filter:filter=sinc \\ -set filter:lobes=4 \\ -resize 150% image.jpg\"\n\nTo extract the data for a raw windowing function, combine it with a 'Box' filter. For example the 'Welch parabolic windowing function.\n\nmagick null: -define filter:filter=Box \\ -define filter:window=Welch \\ -define filter:support=1.0 \\ -define filter:verbose=1 \\ -resize 2 null: > window_welch.dat gnuplot set grid plot \\\"window_welch.dat\\\" with lines\n\nNote that the use of expert options is provided for image processing experts who have studied and understand how resize filters work. Without this knowledge, and an understanding of the definition of the actual filters involved, using expert settings are more likely to be detrimental to your image resizing.\n\nThis is a simple alias for the -layers method \"flatten\".\n\nCreate a mirror image\n\nreflect the scanlines in the vertical direction. The image will be mirrored upside-down.\n\nFloodfill the image with color at the specified offset.\n\nFlood fill starts from the given 'seed point' which is not gravity affected. Any color that matches within -fuzz color distance of the given color argument, connected to that 'seed point' will be replaced with the current -fill color.\n\nNote that if the pixel at the 'seed point' does not itself match the given color (according to -fuzz), then no action will be taken.\n\nThis operator works more like the -opaque option, than a more general flood fill that reads the matching color directly at the 'seed point'. For this form of flood fill, look at -draw and its 'color floodfill' drawing method.\n\nCreate a mirror image.\n\nReflect the scanlines in the horizontal direction, just like the image in a vertical mirror.\n\nSet the font to use when annotating images with text, or creating labels.\n\nTo print a complete list of fonts, use the -list font option (for versions prior to 6.3.6, use 'type' instead of 'font').\n\nIn addition to the fonts specified by the above pre-defined list, you can also specify a font from a specific source. For example Arial.ttf is a TrueType font file, ps:helvetica is PostScript font, and x:fixed is X11 font.\n\nFor other settings that affect fonts, see the options -family, -stretch, -style, and -weight.\n\nTo specify an explicit font filename or collection, specify the font path preceded with a @, e.g., @arial.ttf. You can specify the font face index for font collections, e.g., @msgothic.ttc[1].\n\nDefine the foreground color for menus.\", \"display\n\nThe color is specified using the format described under the -fill option.\n\nThe default foreground color is black.\n\nThe image format type.\n\nWhen used with the mogrify utility, this option converts any image to the image format you specify. For a list of image format types supported by ImageMagick, use -list format.\n\nBy default the file is written to its original name. However, if the filename extension matches a supported format, the extension is replaced with the image format type specified with -format. For example, if you specify tiff as the format type and the input image filename is image.gif, the output image filename becomes image.tiff.\n\nOutput formatted image characteristics.\n\nSee Format and Print Image Properties for an explanation on how to specify the argument to this option.\n\nSurround the image with a border or beveled frame.\n\nThe color of the border is specified with the -mattecolor command line option.\n\nSee Image Geometry for complete details about the geometry argument. The size portion of the geometry argument indicates the amount of extra width and height that is added to the dimensions of the image. If no offsets are given in the geometry argument, then the border added is a solid color. Offsets x and y, if present, specify that the width and height of the border is partitioned to form an outer bevel of thickness x pixels and an inner bevel of thickness y pixels. Negative offsets make no sense as frame arguments.\n\nThe -frame option is affected by the current -compose setting and assumes that this is using the default 'Over' composition method. It generates an image of the appropriate size with the current -bordercolor setting, and then draws the frame of four distinct colors close to the current -mattecolor. The original image is then overlaid onto center of this image. This means that with the default compose method of 'Over' any transparent parts may be replaced by the current -bordercolor setting.\n\nThe image composition is not affected by the -gravity option.\n\nInclude the X window frame in the imported image.\n\nApply a function to channel values.\n\nThis operator performs calculations based on the given arguments to modify each of the color values for each previously set -channel in the image. See -evaluate for details concerning how the results of the calculations are handled.\n\nThis is can be considered a multi-argument version of the -evaluate operator. (Added in ImageMagick 6.4.8−8.)\n\nHere, parameters is a comma-separated list of numerical values. The number of values varies depending on which function is selected. Choose the function from:\n\nPolynomial Sinusoid Arcsin Arctan\n\nTo print a complete list of -function operators, use -list function. Descriptions follow.\n\nColors within this distance are considered equal.\n\nA number of algorithms search for a target color. By default the color must be exact. Use this option to match colors that are close to the target color in RGB space. For example, if you want to automagically trim the edges of an image with -trim but the image was scanned and the target background color may differ by a small amount. This option can account for these differences.\n\nThe distance can be in absolute intensity units or, by appending % as a percentage of the maximum possible intensity (255, 65535, or 4294967295).\n\nUse +fuzz to reset the fuzz value to 0.\n\nApply a mathematical expression to an image or image channels.\n\nIf the first character of expression is @, the expression is read from a file titled by the remaining characters in the string.\n\nSee FX, The Special Effects Image Operator for a detailed discussion of this option.\n\nLevel of gamma correction.\n\nThe same color image displayed on two different workstations may look different due to differences in the display monitor. Use gamma correction to adjust for this color difference. Reasonable values extend from 0.8 to 2.3. Gamma less than 1.0 darkens the image and gamma greater than 1.0 lightens it. Large adjustments to image gamma may result in the loss of some image information if the pixel quantum size is only eight bits (quantum range 0 to 255).\n\nGamma adjusts the image's channel values pixel-by-pixel according to a power law, namely, pow(pixel,1/gamma) or pixel^(1/gamma), where pixel is the normalized or 0 to 1 color value. For example, using a value of gamma=2 is the same as taking the square root of the image.\n\nUse +gamma value to set the image gamma level without actually adjusting the image pixels. This option is useful if the image is of a known gamma but not set as an image attribute (e.g. PNG images). Write the \"file gamma\" which is the reciprocal of the display gamma; e.g., if your image is sRGB and you want to write a PNG gAMA chunk, use\n\nmagick input.png +gamma .45455 output.png\n\n(0.45455 is 1/2.2)\n\nNote that gamma adjustments are also available via the -level operator.\n\nBlur the image with a Gaussian operator.\n\nConvolve the image with a Gaussian or normal distribution using the given Sigma value. The formula is:\n\nThe sigma value is the important argument, and determines the actual amount of blurring that will take place.\n\nThe radius is only used to determine the size of the array which will hold the calculated Gaussian distribution. It should be an integer. If not given, or set to zero, IM will calculate the largest possible radius that will provide meaningful results for the Gaussian distribution.\n\nThe larger the Radius the radius the slower the operation is. However too small a Radius, and severe aliasing effects may result. As a guideline, Radius should be at least twice the Sigma value, though three times will produce a more accurate result.\n\nThis differs from the faster -blur operator in that a full 2-dimensional convolution is used to generate the weighted average of the neighboring pixels.\n\nThe -virtual-pixel setting will determine how pixels which are outside the image proper are blurred into the final result.\n\nSet the preferred size and location of the image.\n\nSee Image Geometry for complete details about the geometry argument.\n\nSets the current gravity suggestion for various other settings and options.\n\nChoices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast. Use -list gravity to get a complete list of -gravity settings available in your ImageMagick installation.\n\nThe direction you choose specifies where to position text or subimages. For example, a gravity of Center forces the text to be centered within the image. By default, the image gravity is undefined. See -draw for more details about graphic primitives. Only the text primitive of -draw is affected by the -gravity option.\n\nThe -gravity option is also used in concert with the -geometry setting and other settings or options that take geometry as an argument, such as the -crop option.\n\nIf a -gravity setting occurs before another option or setting having a geometry argument that specifies an offset, the offset is usually applied to the point within the image suggested by the -gravity argument. Thus, in the following command, for example, suppose the file image.png has dimensions 200x100. The offset specified by the argument to -region is (−40,+20). The argument to -gravity is Center, which suggests the midpoint of the image, at the point (100,50). The offset (−40,20) is applied to that point, giving (100−40,50+20)=(60,70), so the specified 10x10 region is located at that point. (In addition, the -gravity affects the region itself, which is centered at the pixel coordinate (60,70). (See Image Geometry for complete details about the geometry argument.)\n\nmagick image.png -gravity Center -region 10x10-40+20 \\ -negate output.png\n\nWhen used as an option to composite, -gravity gives the direction that the image gravitates within the composite.\n\nWhen used as an option to montage, -gravity gives the direction that an image gravitates within a tile. The default gravity is Center for this purpose.\n\nUse +gravity to return gravity to its default value.\n\nConvert image to grayscale.\n\nThis will use one of the -intensity methods to convert the given image into a grayscale image.\n\nFor example, to convert an image to (linear) Rec709Luminance grayscale, type:\n\nmagick in.png -grayscale Rec709Luminance out.png\n\nwhich is equivalent to:\n\nmagick in.png -colorspace LinearGray out.png\n\nSimilarly, to convert an image to (non-linear) Rec709Luma grayscale, type:\n\nmagick in.png -grayscale Rec709Luma out.png\n\nwhich is equivalent to:\n\nmagick in.png -colorspace Gray out.png\n\nNote that a 'colorspace' intensity method will produce the same result regardless of the current colorpsace of the image. But a 'mathematical' intensity method depends on the current colorspace the image is currently using.\n\nWhile this operation uses an -intensity method, it does not use or set the -intensity setting, so will not affect other operations that may use that setting.\n\nGreen chromaticity primary point.\n\nApply a Hald color lookup table to the image.\n\nA Hald color lookup table is a 3-dimensional color cube mapped to 2 dimensions. Create it with the HALD: prefix (e.g. HALD:8). You can apply any color transformation to the Hald image and then use this option to apply the transform to the image.\n\nmagick image.png hald.png -hald-clut transform.png\n\nThis option provides a convenient method for you to use Gimp or Photoshop to make color corrections to the Hald CLUT image and subsequently apply them to multiple images using an ImageMagick script.\n\nNote that the representation is only of the normal RGB color space and that the whole color value triplet is used for the interpolated lookup of the represented Hald color cube image. Because of this the operation is not -channel setting affected, nor can it adjust or modify an images transparency or alpha/matte channel.\n\nSee also -clut which provides color value replacement of the individual color channels, usually involving a simpler grayscale image. E.g: grayscale to color replacement, or modification by a histogram mapping.\n\nPrint usage instructions.\n\nWhen comparing images, emphasize pixel differences with this color.\n\nIdentify straight lines in the image (e.g. -hough-lines 9x9+195).\n\nUse the Hough line detector with any binary edge extracted image to locate and draw any straight lines that it finds.\n\nThe process accumulates counts for every white pixel in the binary edge image for every possible orientation (for angles from 0 to 179 in 1 deg increments) and distance from the center of the image to the corners (in 1 px increments). It stores the counts in an accumulator matrix of angle vs distance. The size of the accumulator will be 180x(diagonal/2). Next it searches the accumulator for peaks in counts and converts the locations of the peaks to slope and intercept in the normal x,y input image space. The algorithm uses slope/intercepts to find the endpoints clipped to the bounds of the image. The lines are drawn from the given endpoints. The counts are a measure of the length of the lines.\n\n.\n\nThe WxH arguments specify the filter size for locating the peaks in the Hough accumulator. The threshold excludes lines whose counts are less than the threshold value.\n\nUse -background to specify the color of the background onto which the lines will be drawn. The default is black.\n\nUse -fill to specify the color of the lines. The default is black.\n\nUse -stroke and -strokewidth to specify the thickness of the lines. The default is black and no strokewidth.\n\nA text file listing the endpoints and counts may be created by using the suffix, .mvg, for the output image.\n\nUse -define hough-lines:accumulator=true to return the accumulator image in addition to the lines image.\n\nSpecify the icon geometry.\n\nOffsets, if present in the geometry specification, are handled in the same manner as the -geometry option, using X11 style to handle negative offsets.\n\nSee Image Geometry for complete details about the geometry argument.\n\nStart in icon mode in X Windows\", 'animate', 'display\n\nIdentify the format and characteristics of the image.\n\nThis information is printed by default:\n\nimage scene number (if its not zero)\n\nimage name\n\nimage format\n\nimage size\n\nvirtual page offset\n\ncolor depth\n\ncolorspace\n\nfile size in bytes\n\nconsumed user time identifying the image\n\nelapsed time identifying the image\n\nTo customize the attributes you want to identify, use -format.\n\nIf -colors is also specified, the total unique colors in the image and color reduction error values are printed. Refer to color reduction algorithm for a description of these values.\n\nIf -verbose precedes this option, copious amounts of image properties are displayed including image statistics, profiles, image histogram, and others.\n\nImplements the inverse discrete Fourier transform (DFT).\n\nThis option is new as of ImageMagick 6.5.4-3 (and now working for Windows users in ImageMagick 6.6.0-9). It transforms a pair of magnitude and phase images from the frequency domain to a single image in the normal or spatial domain. See for example, Fourier Transform, Discrete Fourier Transform and Fast Fourier Transform.\n\nFor example, depending upon the image format used to store the result of the -fft, one would use either\n\nmagick fft_image.miff -ift fft_image_ift.png\n\nor\n\nmagick fft_image-0.png fft_image-1.png -ift fft_image_ift.png\n\nThe resulting image may need to be cropped due to padding introduced when the original image, prior to the -fft or +fft, was not square or even dimensioned. Any padding is at the right and/or bottom sides of the image.\n\nThe FFTW delegate library is required to use -ift.\n\nUse +ift (with HDRI enabled) to transform a pair of real and imaginary images from the frequency domain to a single image in the normal (spatial) domain.\n\nBy default the IFT is not normalized (and the FFT is). Use \"-define fourier:normalize=inverse to explicitly normalize the IFT and unnormalize the FFT.\n\nreference illuminant. Choose from A, B, C, D50, D55, D65, E, F2, F7, or F11.\n\nMake image immutable.\n\nImplode image pixels about the center.\n\nInsert the last image into the image sequence.\n\nThis option takes last image in the current image sequence and inserts it at the given index. If a negative index is used, the insert position is calculated before the last image is removed from the sequence. As such -insert -1 will result in no change to the image sequence.\n\nThe +insert option is equivalent to -insert -1. In other words, insert the last image, at the end of the current image sequence. Consequently this has no effect on the image sequence order.\n\nMethod to generate intensity value from pixel.\n\nImageMagick provides a number of methods used in situations where an operator needs to determine a single grayscale value for some purpose, from an image with red, green, and blue pixel components. Typically the Rec709Luma formula is used, which is the same formula used when converting images to -colorspace gray.\n\nThe following formulas are currently provided, and will first convert the pixel values to linear-RGB or non-linear sRGB colorspace before being applied to calculate the final greyscale value.\n\nNote that the above R,G,B values is the image's linear-RGB values, while R',G',B' are sRGB non-linear values.\n\nThese intensity methods are mathematical in nature and will use the current value in the images respective R,G,B channel regardless of what that is, or what colorspace the image is currently using.\n\nThese methods are often used for other purposes, such as generating a grayscale difference image between two color images (using -compose 'Difference' composition.\n\nFor example The 'MS' (Mean Squared) setting is good for minimizing color error comparisons. While... The method 'RMS' (Root Mean Squared) for example is appropriate for calculating color vector distance, from a color difference image. This is equivalent to the color only component of the -fuzz factor color compare setting.\n\nSee also -grayscale which applies one of the above grayscaling formula directly to an image without setting the -intensity setting.\n\nThe -colorspace gray image conversion also uses the current intensity setting, but will always convert the image to the appropriate sRGB or linear-RGB colorspace before appling the above function.\n\nTo print a complete list of possible pixel intensity setting methods, use -list intensity.\n\nOperators affected by the -intensity setting include:\n\n-adaptive-blur -adaptive-sharpen -black-threshold -clut (when mapping greyscale CLUT image to alpha channel if set by -channels) -colors for gray colorspace -compose {LightenIntensity, DarkenIntensity, CopyOpacity, CopyBlack} -contrast-stretch -distort {ErodeIntensity, DilateIntensity} -normalize -random-threshold -range-threshold -selective-blur -shade -threshold -tint -white-threshold\n\nUse this type of rendering intent when managing the image color.\n\nUse this option to affect the color management operation of an image (see -profile). Choose from these intents: Absolute, Perceptual, Relative, Saturation.\n\nThe default intent is Perceptual for the sRGB colorspace and undefined for the RGB and gray colorspaces.\n\nTo print a complete list of rendering intents, use -list intent.\n\nThe type of interlacing scheme.\n\nChoose from:\n\nnone line plane partition JPEG GIF PNG\n\nThis option is used to specify the type of interlacing scheme for raw image formats such as RGB or YUV.\n\nNone means do not interlace (RGBRGBRGBRGBRGBRGB...),\n\nLine uses scanline interlacing (RRR...GGG...BBB...RRR...GGG...BBB...), and.\n\nPlane uses plane interlacing (RRRRRR...GGGGGG...BBBBBB...).\n\nPartition is like plane except the different planes are saved to individual files (e.g. image.R, image.G, and image.B).\n\nUse Line or Plane to create an interlaced PNG or GIF or progressive JPEG image.\n\nTo print a complete list of interlacing schemes, use -list interlace.\n\nThe space between two text lines.\n\nSet the pixel color interpolation method to use when looking up a color based on a floating point or real value.\n\nWhen looking up the color of a pixel using a non-integer floating point value, you typically fall in between the pixel colors defined by the source image. This setting determines how the color is determined from the colors of the pixels surrounding that point. That is how to determine the color of a point that falls between two, or even four different colored pixels.\n\nThis most important for distortion operators such as -distort, -implode, -transform and -fx.\n\nTo print a complete list of interpolation methods, use -list interpolate.\n\nSee also -virtual-pixel, for control of the lookup for positions outside the boundaries of the image.\n\nResize with interpolation. See the -interpolate setting.\n\nThe space between two words.\n\nCalculate the sum of values (pixel values) in the image.\n\nThe space between two letters.\n\nKmeans (iterative) color reduction (e.g. -kmeans 5x300+0.0001). Colors is the desired number of colors. Initial colors are found using color quantization. Iterations is the stopping number of iterations (default=300). Convergence is the stopping threshold on the color change between iterations (default=0.0001). Processing finishes, if either iterations or tolerance are reached. Use -define kmeans:seed-colors=color-list to initialize the colors, where color-list is a semicolon delimited list of seed colors (e.g. -define kmeans:seed-colors=\"red;sRGB(19,167,254);#00ffff). A color list overrides the color quantization. A non-empty list of colors overrides the number of colors. Any unassigned initial colors are assigned random colors from the image.\n\nEdge preserving noise reduction filter.\n\nThe radius is more important than the sigma. If sigma is left off, it will be computed automatically from the radius as sigma=radius-0.5. The sigma provides a bit of additional smoothing control.\n\nAssign a label to an image.\n\nUse this option to assign a specific label to the image, as it is read in or created. You can use the -set operation to re-assign a the labels of images already read in. Image formats such as TIFF, PNG, MIFF, supports saving the label information with the image.\n\nWhen saving an image to a PostScript file, any label assigned to an image is used as a header string to print above the postscript image.\n\nYou can include the image filename, type, width, height, or other image attribute by embedding special format character. See Format and Print Image Properties for details of the percent escape codes.\n\nFor example,\n\n-label \"%m:%f %wx%h\" bird.miff\n\nassigns an image label of MIFF:bird.miff 512x480 to the \"bird.miff\" image and whose width is 512 and height is 480, as it is read in. If a +label option was used instead, any existing label present in the image would be used. You can remove all labels from an image by assigning the empty string.\n\nA label is not drawn on the image, but is embedded in the image datastream via Label tag or similar mechanism. If you want the label to be visible on the image itself, use the -draw option, or during the final processing in the creation of an image montage.\n\nIf the first character of string is @, the image label is read from a file titled by the remaining characters in the string. Labels in a file are literal, no embedded formatting characters are recognized.\n\nPerform local adaptive threshold.\n\nAdaptively threshold each pixel based on the value of pixels in a surrounding window. If the current pixel is lighter than this average plus the optional offset, then it is made white, otherwise it is made black. Small variations in pixel values such as found in scanned documents can be ignored if offset is positive. A negative offset will make it more sensitive to those small variations.\n\nThis is commonly used to threshold images with an uneven background. It is based on the assumption that average color of the small window is the the local background color, from which to separate the foreground color.\n\nHandle multiple images forming a set of image layers or animation frames.\n\nPerform various image operation methods to a ordered sequence of images which may represent either a set of overlaid 'image layers', a GIF disposal animation, or a fully-'coalesced' animation sequence.\n\nTo print a complete list of layer types, use -list layers.\n\nThe operators -coalesce, -deconstruct, -flatten, and -mosaic are only aliases for the above methods and may be deprecated in the future. Also see -page, -repage operators, the -compose setting, and the GIF -dispose and -delay settings.\n\nAdjust the level of image channels.\n\nGiven one, two or three values delimited with commas: black-point, white-point, gamma (for example: 10,250,1.0 or 2%,98%,0.5). The black and white points range from 0 to QuantumRange, or from 0 to 100%; if the white point is omitted it is set to (QuantumRange - black_point), so as to center contrast changes. If a % sign is present anywhere in the string, both black and white points are percentages of the full color range. Gamma will do a -gamma adjustment of the values. If it is omitted, the defaul"
    }
}