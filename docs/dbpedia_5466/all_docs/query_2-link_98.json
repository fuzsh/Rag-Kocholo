{
    "id": "dbpedia_5466_2",
    "rank": 98,
    "data": {
        "url": "https://code.visualstudio.com/docs/editor/debugging",
        "read_more_link": "",
        "language": "en",
        "title": "Debugging in Visual Studio Code",
        "top_image": "https://code.visualstudio.com/assets/docs/editor/debugging/debugging-social.png",
        "meta_img": "https://code.visualstudio.com/assets/docs/editor/debugging/debugging-social.png",
        "images": [
            "https://code.visualstudio.com/assets/icons/theme-light.svg",
            "https://code.visualstudio.com/assets/icons/theme-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debugging_hero.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/run.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-start.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-menu.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/launch-configuration.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-environments.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/launch-json-in-explorer.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/launch-json-intellisense.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/add-config.gif",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-session.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-status.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/toolbar.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/breakpoints.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/bpts-in-overview.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/log-points.gif",
            "https://code.visualstudio.com/assets/docs/editor/debugging/variables.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/watch.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/filtering-variables.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/launch-json-suggestions.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/hitCount.gif",
            "https://code.visualstudio.com/assets/docs/editor/debugging/breakpoints.gif",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debugconsole.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-callstack.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/debug-actions-widget.png",
            "https://code.visualstudio.com/assets/docs/editor/debugging/server-ready.gif",
            "https://code.visualstudio.com/assets/icons/x-icon.svg",
            "https://code.visualstudio.com/assets/icons/github-icon.svg",
            "https://code.visualstudio.com/assets/icons/youtube-icon.svg",
            "https://code.visualstudio.com/assets/icons/microsoft.svg"
        ],
        "movies": [
            "https://www.youtube.com/embed/3HiLLByBWkg",
            "/assets/docs/editor/debugging/debug-triggered-breakpoint.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Microsoft"
        ],
        "publish_date": "2021-11-03T00:00:00",
        "summary": "",
        "meta_description": "One of the great things in Visual Studio Code is debugging support.  Set breakpoints, step-in, inspect variables and more.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://code.visualstudio.com/docs/editor/debugging",
        "text": "Debugging\n\nOne of the key features of Visual Studio Code is its great debugging support. VS Code's built-in debugger helps accelerate your edit, compile, and debug loop.\n\nUser interface\n\nThe following diagram shows the main components of the debugging user interface:\n\nRun and Debug view: displays all information related to running, debugging, and managing debug configuration settings.\n\nDebug toolbar: has buttons for the most common debugging actions.\n\nDebug console: enables viewing and interacting with the output of your code running in the debugger.\n\nDebug sidebar: during a debug session, lets you interact with the call stack, breakpoints, variables, and watch variables.\n\nDebugger extensions\n\nVS Code has built-in debugging support for the Node.js runtime and can debug JavaScript, TypeScript, or any other language that gets transpiled to JavaScript.\n\nFor debugging other languages and runtimes (including PHP, Ruby, Go, C#, Python, C++, PowerShell and many others), look for Debuggers extensions in the VS Code Marketplace or select Install Additional Debuggers in the top-level Run menu.\n\nBelow are several popular extensions which include debugging support:\n\nTip: The extensions shown above are dynamically queried. Select an extension tile above to read the description and reviews to decide which extension is best for you.\n\nStart debugging\n\nThe following documentation is based on the built-in Node.js debugger, but most of the concepts and features are applicable to other debuggers as well.\n\nIt is helpful to first create a sample Node.js application before reading about debugging. You can follow the Node.js walkthrough to install Node.js and create a simple \"Hello World\" JavaScript application (app.js). Once you have a simple application set up, this page will take you through VS Code debugging features.\n\nRun and Debug view\n\nTo bring up the Run and Debug view, select the Run and Debug icon in the Activity Bar on the side of VS Code. You can also use the keyboard shortcut ⇧⌘D (Windows, Linux Ctrl+Shift+D).\n\nThe Run and Debug view displays all information related to running and debugging and has a top bar with debugging commands and configuration settings.\n\nIf running and debugging is not yet configured (no launch.json has been created), VS Code shows the Run start view.\n\nRun menu\n\nThe top-level Run menu has the most common run and debug commands:\n\nLaunch configurations\n\nTo run or debug a simple app in VS Code, select Run and Debug on the Debug start view or press F5 and VS Code will try to run your currently active file.\n\nHowever, for most debugging scenarios, creating a launch configuration file is beneficial because it allows you to configure and save debugging setup details. VS Code keeps debugging configuration information in a launch.json file located in a .vscode folder in your workspace (project root folder) or in your user settings or workspace settings.\n\nTo create a launch.json file, select create a launch.json file in the Run start view.\n\nVS Code will try to automatically detect your debug environment, but if this fails, you will have to choose it manually:\n\nHere is the launch configuration generated for Node.js debugging:\n\n{ \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"skipFiles\": [\"<node_internals>/**\"], \"program\": \"${workspaceFolder}\\\\app.js\" } ] }\n\nIf you go back to the File Explorer view (⇧⌘E (Windows, Linux Ctrl+Shift+E)), you'll see that VS Code has created a .vscode folder and added the launch.json file to your workspace.\n\nNote: You can debug a simple application even if you don't have a folder open in VS Code, but it is not possible to manage launch configurations and set up advanced debugging. The VS Code Status Bar is purple if you do not have a folder open.\n\nNote that the attributes available in launch configurations vary from debugger to debugger. You can use IntelliSense suggestions (⌃Space (Windows, Linux Ctrl+Space)) to find out which attributes exist for a specific debugger. Hover help is also available for all attributes.\n\nDo not assume that an attribute that is available for one debugger automatically works for other debuggers too. If you see red squiggles in your launch configuration, hover over them to learn what the problem is and try to fix them before launching a debug session.\n\nReview all automatically generated values and make sure that they make sense for your project and debugging environment.\n\nLaunch versus attach configurations\n\nIn VS Code, there are two core debugging modes, Launch and Attach, which handle two different workflows and segments of developers. Depending on your workflow, it can be confusing to know what type of configuration is appropriate for your project.\n\nIf you come from a browser Developer Tools background, you might not be used to \"launching from your tool,\" since your browser instance is already open. When you open DevTools, you are simply attaching DevTools to your open browser tab. On the other hand, if you come from a server or desktop background, it's quite normal to have your editor launch your process for you, and your editor automatically attaches its debugger to the newly launched process.\n\nThe best way to explain the difference between launch and attach is to think of a launch configuration as a recipe for how to start your app in debug mode before VS Code attaches to it, while an attach configuration is a recipe for how to connect VS Code's debugger to an app or process that's already running.\n\nVS Code debuggers typically support launching a program in debug mode or attaching to an already running program in debug mode. Depending on the request (attach or launch), different attributes are required, and VS Code's launch.json validation and suggestions should help with that.\n\nAdd a new configuration\n\nTo add a new configuration to an existing launch.json, use one of the following techniques:\n\nUse IntelliSense if your cursor is located inside the configurations array.\n\nPress the Add Configuration button to invoke snippet IntelliSense at the start of the array.\n\nChoose Add Configuration option in the Run menu.\n\nVS Code also supports compound launch configurations for starting multiple configurations at the same time; for more details, please read this section.\n\nIn order to start a debug session, first select the configuration named Launch Program using the Configuration dropdown in the Run and Debug view. Once you have your launch configuration set, start your debug session with F5.\n\nAlternatively, you can run your configuration through the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) by filtering on Debug: Select and Start Debugging or typing 'debug ' and selecting the configuration you want to debug.\n\nAs soon as a debugging session starts, the DEBUG CONSOLE panel is displayed and shows debugging output, and the Status Bar changes color (orange for default color themes):\n\nIn addition, the debug status appears in the Status Bar showing the active debug configuration. By selecting the debug status, a user can change the active launch configuration and start debugging without needing to open the Run and Debug view.\n\nDebug actions\n\nOnce a debug session starts, the Debug toolbar will appear on the top of the editor.\n\nAction Explanation Continue / Pause\n\nF5 Continue: Resume normal program/script execution (up to the next breakpoint).\n\nPause: Inspect code executing at the current line and debug line-by-line. Step Over\n\nF10 Execute the next method as a single command without inspecting or following its component steps. Step Into\n\nF11 Enter the next method to follow its execution line-by-line. Step Out\n\n⇧F11 (Windows, Linux Shift+F11) When inside a method or subroutine, return to the earlier execution context by completing remaining lines of the current method as though it were a single command. Restart\n\n⇧⌘F5 (Windows, Linux Ctrl+Shift+F5) Terminate the current program execution and start debugging again using the current run configuration. Stop\n\n⇧F5 (Windows, Linux Shift+F5) Terminate the current program execution.\n\nTip: Use the setting debug.toolBarLocation to control the location of the debug toolbar. It can be the default floating, docked to the Run and Debug view, or hidden. A floating debug toolbar can be dragged horizontally and also down to the editor area.\n\nRun mode\n\nIn addition to debugging a program, VS Code supports running the program. The Debug: Run (Start Without Debugging) action is triggered with ⌃F5 (Windows, Linux Ctrl+F5) and uses the currently selected launch configuration. Many of the launch configuration attributes are supported in 'Run' mode. VS Code maintains a debug session while the program is running, and pressing the Stop button terminates the program.\n\nTip: The Run action is always available, but not all debugger extensions support 'Run'. In this case, 'Run' will be the same as 'Debug'.\n\nBreakpoints\n\nBreakpoints can be toggled by clicking on the editor margin or using F9 on the current line. Finer breakpoint control (enable/disable/reapply) can be done in the Run and Debug view's BREAKPOINTS section.\n\nBreakpoints in the editor margin are normally shown as red filled circles.\n\nDisabled breakpoints have a filled gray circle.\n\nWhen a debugging session starts, breakpoints that cannot be registered with the debugger change to a gray hollow circle. The same might happen if the source is edited while a debug session without live-edit support is running.\n\nIf the debugger supports breaking on different kinds of errors or exceptions, those will also be available in the BREAKPOINTS view.\n\nThe Reapply All Breakpoints command sets all breakpoints again to their original location. This is helpful if your debug environment is \"lazy\" and \"misplaces\" breakpoints in source code that has not yet been executed.\n\nOptionally, breakpoints can be shown in the editor's overview ruler by enabling the setting debug.showBreakpointsInOverviewRuler:\n\nLogpoints\n\nA Logpoint is a variant of a breakpoint that does not \"break\" into the debugger but instead logs a message to the debug console. Logpoints enable you to inject logging while debugging without modifying the source code. They are especially useful when you're debugging production servers that cannot be paused or stopped. Logpoints can also help you save time by not having to add or remove logging statements in your code.\n\nA Logpoint is represented by a \"diamond\" shaped icon. Log messages are plain text but can include expressions to be evaluated within curly braces ('{}').\n\nAdd a logpoint with the Add Logpoint command in the left editor gutter context menu, or by using the Debug: Add Logpoint... command. You can also configure the setting debug.gutterMiddleClickAction to toggle a logpoint when pressing the middle mouse button in the editor gutter.\n\nJust like regular breakpoints, Logpoints can be enabled or disabled and can also be controlled by a condition and/or hit count.\n\nNote: Logpoints are supported by VS Code's built-in Node.js debugger, but can be implemented by other debug extensions. The Python and Java extensions, for example, support Logpoints.\n\nData inspection\n\nVariables can be inspected in the VARIABLES section of the Run and Debug view or by hovering over their source in the editor. Variable values and expression evaluation are relative to the selected stack frame in the CALL STACK section.\n\nVariable values can be modified with the Set Value action from the variable's context menu. Additionally, you can use the Copy Value action to copy the variable's value, or Copy as Expression action to copy an expression to access the variable.\n\nVariables and expressions can also be evaluated and watched in the Run and Debug view's WATCH section.\n\nVariable names and values can be filtered by typing while the focus is on the VARIABLES section.\n\nLaunch.json attributes\n\nThere are many launch.json attributes to help support different debuggers and debugging scenarios. As mentioned above, you can use IntelliSense (⌃Space (Windows, Linux Ctrl+Space)) to see the list of available attributes once you have specified a value for the type attribute.\n\nThe following attributes are mandatory for every launch configuration:\n\ntype - the type of debugger to use for this launch configuration. Every installed debug extension introduces a type: node for the built-in Node debugger, for example, or php and go for the PHP and Go extensions.\n\nrequest - the request type of this launch configuration. Currently, launch and attach are supported.\n\nname - the reader-friendly name to appear in the Debug launch configuration dropdown.\n\nHere are some optional attributes available to all launch configurations:\n\npresentation - using the order, group, and hidden attributes in the presentation object, you can sort, group, and hide configurations and compounds in the Debug configuration dropdown and in the Debug quick pick.\n\npreLaunchTask - to launch a task before the start of a debug session, set this attribute to the label of a task specified in tasks.json (in the workspace's .vscode folder). Or, this can be set to ${defaultBuildTask} to use your default build task.\n\npostDebugTask - to launch a task at the very end of a debug session, set this attribute to the name of a task specified in tasks.json (in the workspace's .vscode folder).\n\ninternalConsoleOptions - this attribute controls the visibility of the Debug Console panel during a debugging session.\n\ndebugServer - for debug extension authors only: this attribute allows you to connect to a specified port instead of launching the debug adapter.\n\nserverReadyAction - if you want to open a URL in a web browser whenever the program under debugging outputs a specific message to the debug console or integrated terminal. For details see section Automatically open a URI when debugging a server program below.\n\nMany debuggers support some of the following attributes:\n\nprogram - executable or file to run when launching the debugger\n\nargs - arguments passed to the program to debug\n\nenv - environment variables (the value null can be used to \"undefine\" a variable)\n\nenvFile - path to dotenv file with environment variables\n\ncwd - current working directory for finding dependencies and other files\n\nport - port when attaching to a running process\n\nstopOnEntry - break immediately when the program launches\n\nconsole - what kind of console to use, for example, internalConsole, integratedTerminal, or externalTerminal\n\nVariable substitution\n\nVS Code makes commonly used paths and other values available as variables and supports variable substitution inside strings in launch.json. This means that you do not have to use absolute paths in debug configurations. For example, ${workspaceFolder} gives the root path of a workspace folder, ${file} the file open in the active editor, and ${env:Name} the environment variable 'Name'.\n\nYou can see a full list of predefined variables in the Variables Reference or by invoking IntelliSense inside the launch.json string attributes.\n\n{ \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"${workspaceFolder}/app.js\", \"cwd\": \"${workspaceFolder}\", \"args\": [\"${env:USERNAME}\"] }\n\nPlatform-specific properties\n\nLaunch.json supports defining values (for example, arguments to be passed to the program) that depend on the operating system where the debugger is running. To do so, put a platform-specific literal into the launch.json file and specify the corresponding properties inside that literal.\n\nBelow is an example that passes \"args\" to the program differently on Windows:\n\n{ \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"${workspaceFolder}/node_modules/gulp/bin/gulpfile.js\", \"args\": [\"myFolder/path/app.js\"], \"windows\": { \"args\": [\"myFolder\\\\path\\\\app.js\"] } } ] }\n\nValid operating properties are \"windows\" for Windows, \"linux\" for Linux, and \"osx\" for macOS. Properties defined in an operating system specific scope override properties defined in the global scope.\n\nPlease note that the type property cannot be placed inside a platform-specific section, because type indirectly determines the platform in remote debugging scenarios, and that would result in a cyclic dependency.\n\nIn the example below, debugging the program always stops on entry except on macOS:\n\n{ \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"${workspaceFolder}/node_modules/gulp/bin/gulpfile.js\", \"stopOnEntry\": true, \"osx\": { \"stopOnEntry\": false } } ] }\n\nGlobal launch configuration\n\nVS Code supports adding a \"launch\" object inside your User settings. This \"launch\" configuration will then be shared across your workspaces. For example:\n\n\"launch\": { \"version\": \"0.2.0\", \"configurations\": [{ \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"${file}\" }] }\n\nAdvanced breakpoint topics\n\nConditional breakpoints\n\nA powerful VS Code debugging feature is the ability to set conditions based on expressions, hit counts, or a combination of both.\n\nExpression condition: The breakpoint will be hit whenever the expression evaluates to true.\n\nHit count: The hit count controls how many times a breakpoint needs to be hit before it interrupts execution. Whether a hit count is respected, and the exact syntax of the expression, can vary among debugger extensions.\n\nYou can add a condition and/or hit count when creating a source breakpoint (with the Add Conditional Breakpoint action) or when modifying an existing one (with the Edit Condition action). In both cases, an inline text box with a dropdown menu opens where you can enter expressions:\n\nCondition and hit count editing support is also supported for function and exception breakpoints. You can initiate condition editing from the context menu or the new inline Edit Condition action.\n\nAn example of condition editing in the BREAKPOINTS view:\n\nIf a debugger does not support conditional breakpoints, the Add Conditional Breakpoint and Edit Condition actions are not available.\n\nTriggered breakpoints\n\nA trigged breakpoint is a breakpoint that is automatically enabled once another breakpoint is hit. They can be very useful when diagnosing failure cases in code that happen only after a certain precondition.\n\nTriggered breakpoints can be set by right-clicking on the glyph margin, selecting Add Triggered Breakpoint, and then choosing which other breakpoint enables the breakpoint.\n\nTriggered breakpoints work for all languages, and conditional breakpoints may also be used as the trigger.\n\nInline breakpoints\n\nInline breakpoints are only hit when the execution reaches the column associated with the inline breakpoint. This is particularly useful when debugging minified code which contains multiple statements in a single line.\n\nAn inline breakpoint can be set using ⇧F9 (Windows, Linux Shift+F9) or through the context menu during a debug session. Inline breakpoints are shown inline in the editor.\n\nInline breakpoints can also have conditions. Editing multiple breakpoints on a line is possible through the context menu in the editor's left margin.\n\nFunction breakpoints\n\nInstead of placing breakpoints directly in source code, a debugger can support creating breakpoints by specifying a function name. This is useful in situations where source is not available but a function name is known.\n\nA function breakpoint is created by pressing the + button in the BREAKPOINTS section header and entering the function name. Function breakpoints are shown with a red triangle in the BREAKPOINTS section.\n\nData breakpoints\n\nIf a debugger supports data breakpoints, they can be set from the context menu in the VARIABLES view. The Break on Value Change/Read/Access commands add a data breakpoint that is hit when the value of the underlying variable changes/is read/is accessed. Data breakpoints are shown with a red hexagon in the BREAKPOINTS section.\n\nDebug Console REPL\n\nExpressions can be evaluated with the Debug Console REPL (Read-Eval-Print Loop) feature. To open the Debug Console, use the Debug Console action at the top of the Debug pane or use the View: Debug Console command (⇧⌘Y (Windows, Linux Ctrl+Shift+Y)).\n\nExpressions are evaluated after you press Enter and the Debug Console REPL shows suggestions as you type. If you need to enter multiple lines, use Shift+Enter between the lines and then send all lines for evaluation with Enter.\n\nDebug Console input uses the mode of the active editor, which means that the Debug Console input supports syntax coloring, indentation, auto closing of quotes, and other language features.\n\nNote: You must be in a running debug session to use the Debug Console REPL.\n\nRedirect input/output to/from the debug target\n\nRedirecting input/output is debugger/runtime specific, so VS Code does not have a built-in solution that works for all debuggers.\n\nHere are two approaches you might want to consider:\n\nLaunch the program to debug (\"debug target\") manually in a terminal or command prompt and redirect input/output as needed. Make sure to pass the appropriate command line options to the debug target so that a debugger can attach to it. Create and run an \"attach\" debug configuration that attaches to the debug target.\n\nIf the debugger extension you are using can run the debug target in VS Code's Integrated Terminal (or an external terminal), you can try to pass the shell redirect syntax (for example, \"<\" or \">\") as arguments.\n\nHere's an example launch.json configuration:\n\n{ \"name\": \"launch program that reads a file from stdin\", \"type\": \"node\", \"request\": \"launch\", \"program\": \"program.js\", \"console\": \"integratedTerminal\", \"args\": [\"<\", \"in.txt\"] }\n\nThis approach requires that the \"<\" syntax is passed through the debugger extension and ends up unmodified in the Integrated Terminal.\n\nMulti-target debugging\n\nFor complex scenarios that involve more than one process (for example, a client and a server), VS Code supports multi-target debugging. After you've started a first debug session, you can launch another debug session. As soon as a second session is up and running, the VS Code UI switches to multi-target mode:\n\nThe individual sessions now show up as top-level elements in the CALL STACK view.\n\nThe debug toolbar shows the currently active session (and all other sessions are available in a dropdown menu).\n\nDebug actions (for example, all actions in the debug toolbar) are performed on the active session. The active session can be changed either by using the dropdown menu in the debug toolbar or by selecting a different element in the CALL STACK view.\n\nCompound launch configurations\n\nAn alternative way to start multiple debug sessions is by using a compound launch configuration. You can define compound launch configurations in the compounds property in the launch.json file. Use the configurations attribute to list the names of two or more launch configurations that should be launched in parallel. Optionally a preLaunchTask can be specified that is run before the individual debug sessions are started. The boolean flag stopAll controls whether manually terminating one session will stop all of the compound sessions.\n\n{ \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Server\", \"program\": \"${workspaceFolder}/server.js\" }, { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Client\", \"program\": \"${workspaceFolder}/client.js\" } ], \"compounds\": [ { \"name\": \"Server/Client\", \"configurations\": [\"Server\", \"Client\"], \"preLaunchTask\": \"${defaultBuildTask}\", \"stopAll\": true } ] }\n\nCompound launch configurations are displayed in the launch configuration dropdown menu.\n\nRemote debugging\n\nVS Code does not support built-in remote debugging across all languages. Remote debugging is a feature of the debug extension you are using, and you should consult the extension's page in the Marketplace for support and details.\n\nThere is, however, one exception: the Node.js debugger included in VS Code supports remote debugging. See the Node.js Debugging topic to learn how to configure this.\n\nAutomatically open a URI when debugging a server program\n\nDeveloping a web program typically requires opening a specific URL in a web browser in order to hit the server code in the debugger. VS Code has a built-in feature \"serverReadyAction\" to automate this task.\n\nHere is an example of a simple Node.js Express application:\n\nvarexpress=require('express'); varapp=express(); app.get('/', function(req, res) { res.send('Hello World!'); }); app.listen(3000, function() { console.log('Example app listening on port 3000!'); });\n\nThis application first installs a \"Hello World\" handler for the \"/\" URL and then starts to listen for HTTP connections on port 3000. The port is announced in the Debug Console, and typically, the developer would now type http://localhost:3000 into their browser application.\n\nThe serverReadyAction feature makes it possible to add a structured property serverReadyAction to any launch config and select an \"action\" to be performed:\n\n{ \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"program\": \"${workspaceFolder}/app.js\", \"serverReadyAction\": { \"pattern\": \"listening on port ([0-9]+)\", \"uriFormat\": \"http://localhost:%s\", \"action\": \"openExternally\" } }\n\nHere the pattern property describes the regular expression for matching the program's output string that announces the port. The pattern for the port number is put into parenthesis so that it is available as a regular expression capture group. In this example, we are extracting only the port number, but it is also possible to extract a full URI.\n\nThe uriFormat property describes how the port number is turned into a URI. The first %s is substituted by the first capture group of the matching pattern.\n\nThe resulting URI is then opened outside of VS Code (\"externally\") with the standard application configured for the URI's scheme.\n\nTrigger Debugging via Edge or Chrome\n\nAlternatively, the action can be set to debugWithEdge or debugWithChrome. In this mode, a webRoot property can be added that is passed to the Chrome or Edge debug session.\n\nTo simplify things a bit, most properties are optional and we use the following fallback values:\n\npattern: \"listening on.* (https?://\\\\S+|[0-9]+)\" which matches the commonly used messages \"listening on port 3000\" or \"Now listening on: https://localhost:5001\".\n\nuriFormat: \"http://localhost:%s\"\n\nwebRoot: \"${workspaceFolder}\"\n\nTriggering an Arbitrary Launch Config\n\nIn some cases, you might need to configure additional options for the browser debug session, or use a different debugger entirely. You can do this by setting action to startDebugging with a name property set to the name of the launch configuration to start when the pattern is matched.\n\nThe named launch configuration must be in the same file or folder as the one with the serverReadyAction.\n\nHere the serverReadyAction feature in action:\n\nNext steps\n\nTo learn about VS Code's Node.js debugging support, take a look at:\n\nNode.js - Describes the Node.js debugger, which is included in VS Code.\n\nTypeScript - The Node.js debugger also supports TypeScript debugging.\n\nTo see a tutorial on the basics of debugging, check out this video:\n\nGetting started with debugging in VS Code - Learn about debugging in VS Code.\n\nTo learn about debugging support for other programming languages via VS Code extensions:\n\nC++\n\nPython\n\nJava\n\nTo learn about VS Code's task running support, go to:\n\nTasks - Describes how to run tasks with Gulp, Grunt, and Jake and how to show errors and warnings.\n\nTo write your own debugger extension, visit:\n\nDebugger Extension - Uses a mock sample to illustrate the steps required to create a VS Code debug extension.\n\nCommon questions\n\nWhat are the supported debugging scenarios?\n\nDebugging of Node.js-based applications is supported on Linux, macOS, and Windows out of the box with VS Code. Many other scenarios are supported by VS Code extensions available in the Marketplace.\n\nI do not see any launch configurations in the Run and Debug view dropdown. What is wrong?"
    }
}