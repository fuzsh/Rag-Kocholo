{
    "id": "dbpedia_5466_2",
    "rank": 28,
    "data": {
        "url": "https://docs.docker.com/reference/dockerfile/",
        "read_more_link": "",
        "language": "en",
        "title": "Dockerfile reference",
        "top_image": "https://docs.docker.com/assets/images/thumbnail.webp",
        "meta_img": "https://docs.docker.com/assets/images/thumbnail.webp",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "dockerfile",
            "docker file",
            "docker copy",
            "dockerfile exec",
            "docker entrypoint",
            "dockerfile entrypoint",
            "dockerfile arg",
            "docker args",
            "entrypoint",
            "shell dockerfile"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-26T13:35:52+02:00",
        "summary": "",
        "meta_description": "Find all the available commands you can use in a Dockerfile and learn how to use them, including COPY, ARG, ENTRYPOINT, and more.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.docker.com/favicons/docs@2x.ico",
        "meta_site_name": "Docker Documentation",
        "canonical_link": "https://docs.docker.com/reference/dockerfile/",
        "text": "Table of contents\n\nDocker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. This page describes the commands you can use in a Dockerfile.\n\nOverview\n\nThe Dockerfile supports the following instructions:\n\nInstructionDescriptionADDAdd local or remote files and directories.ARGUse build-time variables.CMDSpecify default commands.COPYCopy files and directories.ENTRYPOINTSpecify default executable.ENVSet environment variables.EXPOSEDescribe which ports your application is listening on.FROMCreate a new build stage from a base image.HEALTHCHECKCheck a container's health on startup.LABELAdd metadata to an image.MAINTAINERSpecify the author of an image.ONBUILDSpecify instructions for when the image is used in a build.RUNExecute build commands.SHELLSet the default shell of an image.STOPSIGNALSpecify the system call signal for exiting a container.USERSet user and group ID.VOLUMECreate volume mounts.WORKDIRChange working directory.\n\nFormat\n\nHere is the format of the Dockerfile:\n\nThe instruction is not case-sensitive. However, convention is for them to be UPPERCASE to distinguish them from arguments more easily.\n\nDocker runs instructions in a Dockerfile in order. A Dockerfile must begin with a FROM instruction. This may be after parser directives, comments, and globally scoped ARGs. The FROM instruction specifies the parent image from which you are building. FROM may only be preceded by one or more ARG instructions, which declare arguments that are used in FROM lines in the Dockerfile.\n\nBuildKit treats lines that begin with # as a comment, unless the line is a valid parser directive. A # marker anywhere else in a line is treated as an argument. This allows statements like:\n\nComment lines are removed before the Dockerfile instructions are executed. The comment in the following example is removed before the shell executes the echo command.\n\nThe following examples is equivalent.\n\nComments don't support line continuation characters.\n\nNote on whitespace\n\nFor backward compatibility, leading whitespace before comments (#) and instructions (such as RUN) are ignored, but discouraged. Leading whitespace is not preserved in these cases, and the following examples are therefore equivalent:\n\n# this is a comment-line RUN echo helloRUN echo world\n\n# this is a comment-lineRUN echo helloRUN echo world\n\nWhitespace in instruction arguments, however, isn't ignored. The following example prints hello world with leading whitespace as specified:\n\nRUN echo \"\\ hello\\ world\"\n\nParser directives\n\nParser directives are optional, and affect the way in which subsequent lines in a Dockerfile are handled. Parser directives don't add layers to the build, and don't show up as build steps. Parser directives are written as a special type of comment in the form # directive=value. A single directive may only be used once.\n\nOnce a comment, empty line or builder instruction has been processed, BuildKit no longer looks for parser directives. Instead it treats anything formatted as a parser directive as a comment and doesn't attempt to validate if it might be a parser directive. Therefore, all parser directives must be at the top of a Dockerfile.\n\nParser directives aren't case-sensitive, but they're lowercase by convention. It's also conventional to include a blank line following any parser directives. Line continuation characters aren't supported in parser directives.\n\nDue to these rules, the following examples are all invalid:\n\nInvalid due to line continuation:\n\nInvalid due to appearing twice:\n\nTreated as a comment because it appears after a builder instruction:\n\nTreated as a comment because it appears after a comment that isn't a parser directive:\n\nThe following unknowndirective is treated as a comment because it isn't recognized. The known syntax directive is treated as a comment because it appears after a comment that isn't a parser directive.\n\nNon line-breaking whitespace is permitted in a parser directive. Hence, the following lines are all treated identically:\n\nThe following parser directives are supported:\n\nsyntax\n\nescape\n\nsyntax\n\nUse the syntax parser directive to declare the Dockerfile syntax version to use for the build. If unspecified, BuildKit uses a bundled version of the Dockerfile frontend. Declaring a syntax version lets you automatically use the latest Dockerfile version without having to upgrade BuildKit or Docker Engine, or even use a custom Dockerfile implementation.\n\nMost users will want to set this parser directive to docker/dockerfile:1, which causes BuildKit to pull the latest stable version of the Dockerfile syntax before the build.\n\nFor more information about how the parser directive works, see Custom Dockerfile syntax.\n\nescape\n\nOr\n\nThe escape directive sets the character used to escape characters in a Dockerfile. If not specified, the default escape character is \\.\n\nThe escape character is used both to escape characters in a line, and to escape a newline. This allows a Dockerfile instruction to span multiple lines. Note that regardless of whether the escape parser directive is included in a Dockerfile, escaping is not performed in a RUN command, except at the end of a line.\n\nSetting the escape character to ` is especially useful on Windows, where \\ is the directory path separator. ` is consistent with Windows PowerShell.\n\nConsider the following example which would fail in a non-obvious way on Windows. The second \\ at the end of the second line would be interpreted as an escape for the newline, instead of a target of the escape from the first \\. Similarly, the \\ at the end of the third line would, assuming it was actually handled as an instruction, cause it be treated as a line continuation. The result of this Dockerfile is that second and third lines are considered a single instruction:\n\nResults in:\n\nOne solution to the above would be to use / as the target of both the COPY instruction, and dir. However, this syntax is, at best, confusing as it is not natural for paths on Windows, and at worst, error prone as not all commands on Windows support / as the path separator.\n\nBy adding the escape parser directive, the following Dockerfile succeeds as expected with the use of natural platform semantics for file paths on Windows:\n\nResults in:\n\nEnvironment replacement\n\nEnvironment variables (declared with the ENV statement) can also be used in certain instructions as variables to be interpreted by the Dockerfile. Escapes are also handled for including variable-like syntax into a statement literally.\n\nEnvironment variables are notated in the Dockerfile either with $variable_name or ${variable_name}. They are treated equivalently and the brace syntax is typically used to address issues with variable names with no whitespace, like ${foo}_bar.\n\nThe ${variable_name} syntax also supports a few of the standard bash modifiers as specified below:\n\n${variable:-word} indicates that if variable is set then the result will be that value. If variable is not set then word will be the result.\n\n${variable:+word} indicates that if variable is set then word will be the result, otherwise the result is the empty string.\n\nThe following variable replacements are supported in a pre-release version of Dockerfile syntax, when using the # syntax=docker/dockerfile-upstream:master syntax directive in your Dockerfile:\n\n${variable#pattern} removes the shortest match of pattern from variable, seeking from the start of the string.\n\nstr=foobarbaz echo ${str#f*b} # arbaz\n\n${variable##pattern} removes the longest match of pattern from variable, seeking from the start of the string.\n\nstr=foobarbaz echo ${str##f*b} # az\n\n${variable%pattern} removes the shortest match of pattern from variable, seeking backwards from the end of the string.\n\nstring=foobarbaz echo ${string%b*} # foobar\n\n${variable%%pattern} removes the longest match of pattern from variable, seeking backwards from the end of the string.\n\nstring=foobarbaz echo ${string%%b*} # foo\n\n${variable/pattern/replacement} replace the first occurrence of pattern in variable with replacement\n\nstring=foobarbaz echo ${string/ba/fo} # fooforbaz\n\n${variable//pattern/replacement} replaces all occurrences of pattern in variable with replacement\n\nstring=foobarbaz echo ${string//ba/fo} # fooforfoz\n\nIn all cases, word can be any string, including additional environment variables.\n\npattern is a glob pattern where ? matches any single character and * any number of characters (including zero). To match literal ? and *, use a backslash escape: \\? and \\*.\n\nYou can escape whole variable names by adding a \\ before the variable: \\$foo or \\${foo}, for example, will translate to $foo and ${foo} literals respectively.\n\nExample (parsed representation is displayed after the #):\n\nEnvironment variables are supported by the following list of instructions in the Dockerfile:\n\nADD\n\nCOPY\n\nENV\n\nEXPOSE\n\nFROM\n\nLABEL\n\nSTOPSIGNAL\n\nUSER\n\nVOLUME\n\nWORKDIR\n\nONBUILD (when combined with one of the supported instructions above)\n\nYou can also use environment variables with RUN, CMD, and ENTRYPOINT instructions, but in those cases the variable substitution is handled by the command shell, not the builder. Note that instructions using the exec form don't invoke a command shell automatically. See Variable substitution.\n\nEnvironment variable substitution use the same value for each variable throughout the entire instruction. Changing the value of a variable only takes effect in subsequent instructions. Consider the following example:\n\nThe value of def becomes hello\n\nThe value of ghi becomes bye\n\n.dockerignore file\n\nYou can use .dockerignore file to exclude files and directories from the build context. For more information, see .dockerignore file.\n\nShell and exec form\n\nThe RUN, CMD, and ENTRYPOINT instructions all have two possible forms:\n\nINSTRUCTION [\"executable\",\"param1\",\"param2\"] (exec form)\n\nINSTRUCTION command param1 param2 (shell form)\n\nThe exec form makes it possible to avoid shell string munging, and to invoke commands using a specific command shell, or any other executable. It uses a JSON array syntax, where each element in the array is a command, flag, or argument.\n\nThe shell form is more relaxed, and emphasizes ease of use, flexibility, and readability. The shell form automatically uses a command shell, whereas the exec form does not.\n\nExec form\n\nThe exec form is parsed as a JSON array, which means that you must use double-quotes (\") around words, not single-quotes (').\n\nThe exec form is best used to specify an ENTRYPOINT instruction, combined with CMD for setting default arguments that can be overridden at runtime. For more information, see ENTRYPOINT.\n\nVariable substitution\n\nUsing the exec form doesn't automatically invoke a command shell. This means that normal shell processing, such as variable substitution, doesn't happen. For example, RUN [ \"echo\", \"$HOME\" ] won't handle variable substitution for $HOME.\n\nIf you want shell processing then either use the shell form or execute a shell directly with the exec form, for example: RUN [ \"sh\", \"-c\", \"echo $HOME\" ]. When using the exec form and executing a shell directly, as in the case for the shell form, it's the shell that's doing the environment variable substitution, not the builder.\n\nBackslashes\n\nIn exec form, you must escape backslashes. This is particularly relevant on Windows where the backslash is the path separator. The following line would otherwise be treated as shell form due to not being valid JSON, and fail in an unexpected way:\n\nThe correct syntax for this example is:\n\nShell form\n\nUnlike the exec form, instructions using the shell form always use a command shell. The shell form doesn't use the JSON array format, instead it's a regular string. The shell form string lets you escape newlines using the escape character (backslash by default) to continue a single instruction onto the next line. This makes it easier to use with longer commands, because it lets you split them up into multiple lines. For example, consider these two lines:\n\nThey're equivalent to the following line:\n\nYou can also use heredocs with the shell form to break up a command:\n\nFor more information about heredocs, see Here-documents.\n\nUse a different shell\n\nYou can change the default shell using the SHELL command. For example:\n\nFor more information, see SHELL.\n\nFROM\n\nOr\n\nOr\n\nThe FROM instruction initializes a new build stage and sets the base image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction. The image can be any valid image.\n\nARG is the only instruction that may precede FROM in the Dockerfile. See Understand how ARG and FROM interact.\n\nFROM can appear multiple times within a single Dockerfile to create multiple images or use one build stage as a dependency for another. Simply make a note of the last image ID output by the commit before each new FROM instruction. Each FROM instruction clears any state created by previous instructions.\n\nOptionally a name can be given to a new build stage by adding AS name to the FROM instruction. The name can be used in subsequent FROM <name>, COPY --from=<name>, and RUN --mount=type=bind,from=<name> instructions to refer to the image built in this stage.\n\nThe tag or digest values are optional. If you omit either of them, the builder assumes a latest tag by default. The builder returns an error if it can't find the tag value.\n\nThe optional --platform flag can be used to specify the platform of the image in case FROM references a multi-platform image. For example, linux/amd64, linux/arm64, or windows/amd64. By default, the target platform of the build request is used. Global build arguments can be used in the value of this flag, for example automatic platform ARGs allow you to force a stage to native build platform (--platform=$BUILDPLATFORM), and use it to cross-compile to the target platform inside the stage.\n\nUnderstand how ARG and FROM interact\n\nFROM instructions support variables that are declared by any ARG instructions that occur before the first FROM.\n\nAn ARG declared before a FROM is outside of a build stage, so it can't be used in any instruction after a FROM. To use the default value of an ARG declared before the first FROM use an ARG instruction without a value inside of a build stage:\n\nRUN\n\nThe RUN instruction will execute any commands to create a new layer on top of the current image. The added layer is used in the next step in the Dockerfile. RUN has two forms:\n\nFor more information about the differences between these two forms, see shell or exec forms.\n\nThe shell form is most commonly used, and lets you break up longer instructions into multiple lines, either using newline escapes, or with heredocs:\n\nThe available [OPTIONS] for the RUN instruction are:\n\n--mount\n\n--network\n\n--security\n\nCache invalidation for RUN instructions\n\nThe cache for RUN instructions isn't invalidated automatically during the next build. The cache for an instruction like RUN apt-get dist-upgrade -y will be reused during the next build. The cache for RUN instructions can be invalidated by using the --no-cache flag, for example docker build --no-cache.\n\nSee the Dockerfile Best Practices guide for more information.\n\nThe cache for RUN instructions can be invalidated by ADD and COPY instructions.\n\nRUN --mount\n\nRUN --mount allows you to create filesystem mounts that the build can access. This can be used to:\n\nCreate bind mount to the host filesystem or other build stages\n\nAccess build secrets or ssh-agent sockets\n\nUse a persistent package management cache to speed up your build\n\nThe supported mount types are:\n\nTypeDescriptionbind (default)Bind-mount context directories (read-only).cacheMount a temporary directory to cache directories for compilers and package managers.tmpfsMount a tmpfs in the build container.secretAllow the build container to access secure files such as private keys without baking them into the image.sshAllow the build container to access SSH keys via SSH agents, with support for passphrases.\n\nRUN --mount=type=bind\n\nThis mount type allows binding files or directories to the build container. A bind mount is read-only by default.\n\nOptionDescriptiontargetMount path.sourceSource path in the from. Defaults to the root of the from.fromBuild stage or image name for the root of the source. Defaults to the build context.rw,readwriteAllow writes on the mount. Written data will be discarded.\n\nRUN --mount=type=cache\n\nThis mount type allows the build container to cache directories for compilers and package managers.\n\nOptionDescriptionidOptional ID to identify separate/different caches. Defaults to value of target.targetMount path.ro,readonlyRead-only if set.sharingOne of shared, private, or locked. Defaults to shared. A shared cache mount can be used concurrently by multiple writers. private creates a new mount if there are multiple writers. locked pauses the second writer until the first one releases the mount.fromBuild stage to use as a base of the cache mount. Defaults to empty directory.sourceSubpath in the from to mount. Defaults to the root of the from.modeFile mode for new cache directory in octal. Default 0755.uidUser ID for new cache directory. Default 0.gidGroup ID for new cache directory. Default 0.\n\nContents of the cache directories persists between builder invocations without invalidating the instruction cache. Cache mounts should only be used for better performance. Your build should work with any contents of the cache directory as another build may overwrite the files or GC may clean it if more storage space is needed.\n\nExample: cache Go packages\n\nExample: cache apt packages\n\nApt needs exclusive access to its data, so the caches use the option sharing=locked, which will make sure multiple parallel builds using the same cache mount will wait for each other and not access the same cache files at the same time. You could also use sharing=private if you prefer to have each build create another cache directory in this case.\n\nRUN --mount=type=tmpfs\n\nThis mount type allows mounting tmpfs in the build container.\n\nOptionDescriptiontargetMount path.sizeSpecify an upper limit on the size of the filesystem.\n\nRUN --mount=type=secret\n\nThis mount type allows the build container to access secure files such as private keys without baking them into the image.\n\nOptionDescriptionidID of the secret. Defaults to basename of the target path.targetMount path. Defaults to /run/secrets/ + id.requiredIf set to true, the instruction errors out when the secret is unavailable. Defaults to false.modeFile mode for secret file in octal. Default 0400.uidUser ID for secret file. Default 0.gidGroup ID for secret file. Default 0.\n\nExample: access to S3\n\nRUN --mount=type=ssh\n\nThis mount type allows the build container to access SSH keys via SSH agents, with support for passphrases.\n\nOptionDescriptionidID of SSH agent socket or key. Defaults to \"default\".targetSSH agent socket path. Defaults to /run/buildkit/ssh_agent.${N}.requiredIf set to true, the instruction errors out when the key is unavailable. Defaults to false.modeFile mode for socket in octal. Default 0600.uidUser ID for socket. Default 0.gidGroup ID for socket. Default 0.\n\nExample: access to GitLab\n\nYou can also specify a path to *.pem file on the host directly instead of $SSH_AUTH_SOCK. However, pem files with passphrases are not supported.\n\nRUN --network\n\nRUN --network allows control over which networking environment the command is run in.\n\nThe supported network types are:\n\nTypeDescriptiondefault (default)Run in the default network.noneRun with no network access.hostRun in the host's network environment.\n\nRUN --network=default\n\nEquivalent to not supplying a flag at all, the command is run in the default network for the build.\n\nRUN --network=none\n\nThe command is run with no network access (lo is still available, but is isolated to this process)\n\nExample: isolating external effects\n\npip will only be able to install the packages provided in the tarfile, which can be controlled by an earlier build stage.\n\nRUN --network=host\n\nThe command is run in the host's network environment (similar to docker build --network=host, but on a per-instruction basis)\n\nWarning\n\nThe use of --network=host is protected by the network.host entitlement, which needs to be enabled when starting the buildkitd daemon with --allow-insecure-entitlement network.host flag or in buildkitd config, and for a build request with --allow network.host flag.\n\nRUN --security\n\nNote\n\nNot yet available in stable syntax, use docker/dockerfile:1-labs version.\n\nThe default security mode is sandbox. With --security=insecure, the builder runs the command without sandbox in insecure mode, which allows to run flows requiring elevated privileges (e.g. containerd). This is equivalent to running docker run --privileged.\n\nWarning\n\nIn order to access this feature, entitlement security.insecure should be enabled when starting the buildkitd daemon with --allow-insecure-entitlement security.insecure flag or in buildkitd config, and for a build request with --allow security.insecure flag.\n\nDefault sandbox mode can be activated via --security=sandbox, but that is no-op.\n\nExample: check entitlements\n\nCMD\n\nThe CMD instruction sets the command to be executed when running a container from an image.\n\nYou can specify CMD instructions using shell or exec forms:\n\nCMD [\"executable\",\"param1\",\"param2\"] (exec form)\n\nCMD [\"param1\",\"param2\"] (exec form, as default parameters to ENTRYPOINT)\n\nCMD command param1 param2 (shell form)\n\nThere can only be one CMD instruction in a Dockerfile. If you list more than one CMD, only the last one takes effect.\n\nThe purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.\n\nIf you would like your container to run the same executable every time, then you should consider using ENTRYPOINT in combination with CMD. See ENTRYPOINT. If the user specifies arguments to docker run then they will override the default specified in CMD, but still use the default ENTRYPOINT.\n\nIf CMD is used to provide default arguments for the ENTRYPOINT instruction, both the CMD and ENTRYPOINT instructions should be specified in the exec form.\n\nNote\n\nDon't confuse RUN with CMD. RUN actually runs a command and commits the result; CMD doesn't execute anything at build time, but specifies the intended command for the image.\n\nLABEL\n\nThe LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing. A few usage examples:\n\nAn image can have more than one label. You can specify multiple labels on a single line. Prior to Docker 1.10, this decreased the size of the final image, but this is no longer the case. You may still choose to specify multiple labels in a single instruction, in one of the following two ways:\n\nNote\n\nBe sure to use double quotes and not single quotes. Particularly when you are using string interpolation (e.g. LABEL example=\"foo-$ENV_VAR\"), single quotes will take the string as is without unpacking the variable's value.\n\nLabels included in base or parent images (images in the FROM line) are inherited by your image. If a label already exists but with a different value, the most-recently-applied value overrides any previously-set value.\n\nTo view an image's labels, use the docker image inspect command. You can use the --format option to show just the labels;\n\nMAINTAINER (deprecated)\n\nThe MAINTAINER instruction sets the Author field of the generated images. The LABEL instruction is a much more flexible version of this and you should use it instead, as it enables setting any metadata you require, and can be viewed easily, for example with docker inspect. To set a label corresponding to the MAINTAINER field you could use:\n\nThis will then be visible from docker inspect with the other labels.\n\nEXPOSE\n\nThe EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if you don't specify a protocol.\n\nThe EXPOSE instruction doesn't actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published. To publish the port when running the container, use the -p flag on docker run to publish and map one or more ports, or the -P flag to publish all exposed ports and map them to high-order ports.\n\nBy default, EXPOSE assumes TCP. You can also specify UDP:\n\nTo expose on both TCP and UDP, include two lines:\n\nIn this case, if you use -P with docker run, the port will be exposed once for TCP and once for UDP. Remember that -P uses an ephemeral high-ordered host port on the host, so TCP and UDP doesn't use the same port.\n\nRegardless of the EXPOSE settings, you can override them at runtime by using the -p flag. For example\n\nTo set up port redirection on the host system, see using the -P flag. The docker network command supports creating networks for communication among containers without the need to expose or publish specific ports, because the containers connected to the network can communicate with each other over any port. For detailed information, see the overview of this feature.\n\nENV\n\nThe ENV instruction sets the environment variable <key> to the value <value>. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well. The value will be interpreted for other environment variables, so quote characters will be removed if they are not escaped. Like command line parsing, quotes and backslashes can be used to include spaces within values.\n\nExample:\n\nThe ENV instruction allows for multiple <key>=<value> ... variables to be set at one time, and the example below will yield the same net results in the final image:\n\nThe environment variables set using ENV will persist when a container is run from the resulting image. You can view the values using docker inspect, and change them using docker run --env <key>=<value>.\n\nA stage inherits any environment variables that were set using ENV by its parent stage or any ancestor. Refer to the multi-stage builds section in the manual for more information.\n\nEnvironment variable persistence can cause unexpected side effects. For example, setting ENV DEBIAN_FRONTEND=noninteractive changes the behavior of apt-get, and may confuse users of your image.\n\nIf an environment variable is only needed during build, and not in the final image, consider setting a value for a single command instead:\n\nOr using ARG, which is not persisted in the final image:\n\nAlternative syntax\n\nThe ENV instruction also allows an alternative syntax ENV <key> <value>, omitting the =. For example:\n\nENV MY_VAR my-value\n\nThis syntax does not allow for multiple environment-variables to be set in a single ENV instruction, and can be confusing. For example, the following sets a single environment variable (ONE) with value \"TWO= THREE=world\":\n\nENV ONE TWO= THREE=world\n\nThe alternative syntax is supported for backward compatibility, but discouraged for the reasons outlined above, and may be removed in a future release.\n\nADD\n\nADD has two forms. The latter form is required for paths containing whitespace.\n\nThe available [OPTIONS] are:\n\n--keep-git-dir\n\n--checksum\n\n--chown\n\n--chmod\n\n--link\n\n--exclude\n\nThe ADD instruction copies new files or directories from <src> and adds them to the filesystem of the image at the path <dest>. Files and directories can be copied from the build context, a remote URL, or a Git repository.\n\nThe ADD and COPY instructions are functionally similar, but serve slightly different purposes. Learn more about the differences between ADD and COPY.\n\nSource\n\nYou can specify multiple source files or directories with ADD. The last argument must always be the destination. For example, to add two files, file1.txt and file2.txt, from the build context to /usr/src/things/ in the build container:\n\nIf you specify multiple source files, either directly or using a wildcard, then the destination must be a directory (must end with a slash /).\n\nTo add files from a remote location, you can specify a URL or the address of a Git repository as the source. For example:\n\nBuildKit detects the type of <src> and processes it accordingly.\n\nIf <src> is a local file or directory, the contents of the directory are copied to the specified destination. See Adding files from the build context.\n\nIf <src> is a local tar archive, it is decompressed and extracted to the specified destination. See Adding local tar archives.\n\nIf <src> is a URL, the contents of the URL are downloaded and placed at the specified destination. See Adding files from a URL.\n\nIf <src> is a Git repository, the repository is cloned to the specified destination. See Adding files from a Git repository.\n\nAdding files from the build context\n\nAny relative or local path that doesn't begin with a http://, https://, or git@ protocol prefix is considered a local file path. The local file path is relative to the build context. For example, if the build context is the current directory, ADD file.txt / adds the file at ./file.txt to the root of the filesystem in the build container.\n\nWhen adding source files from the build context, their paths are interpreted as relative to the root of the context. If you specify a relative path leading outside of the build context, such as ADD ../something /something, parent directory paths are stripped out automatically. The effective source path in this example becomes ADD something /something.\n\nIf the source is a directory, the contents of the directory are copied, including filesystem metadata. The directory itself isn't copied, only its contents. If it contains subdirectories, these are also copied, and merged with any existing directories at the destination. Any conflicts are resolved in favor of the content being added, on a file-by-file basis, except if you're trying to copy a directory onto an existing file, in which case an error is raised.\n\nIf the source is a file, the file and its metadata are copied to the destination. File permissions are preserved. If the source is a file and a directory with the same name exists at the destination, an error is raised.\n\nIf you pass a Dockerfile through stdin to the build (docker build - < Dockerfile), there is no build context. In this case, you can only use the ADD instruction to copy remote files. You can also pass a tar archive through stdin: (docker build - < archive.tar), the Dockerfile at the root of the archive and the rest of the archive will be used as the context of the build.\n\nPattern matching\n\nFor local files, each <src> may contain wildcards and matching will be done using Go's filepath.Match rules.\n\nFor example, to add all files and directories in the root of the build context ending with .png:\n\nIn the following example, ? is a single-character wildcard, matching e.g. index.js and index.ts.\n\nWhen adding files or directories that contain special characters (such as [ and ]), you need to escape those paths following the Golang rules to prevent them from being treated as a matching pattern. For example, to add a file named arr[0].txt, use the following;\n\nAdding local tar archives\n\nWhen using a local tar archive as the source for ADD, and the archive is in a recognized compression format (gzip, bzip2 or xz, or uncompressed), the archive is decompressed and extracted into the specified destination. Only local tar archives are extracted. If the tar archive is a remote URL, the archive is not extracted, but downloaded and placed at the destination.\n\nWhen a directory is extracted, it has the same behavior as tar -x. The result is the union of:\n\nWhatever existed at the destination path, and\n\nThe contents of the source tree, with conflicts resolved in favor of the content being added, on a file-by-file basis.\n\nNote\n\nWhether a file is identified as a recognized compression format or not is done solely based on the contents of the file, not the name of the file. For example, if an empty file happens to end with .tar.gz this isn't recognized as a compressed file and doesn't generate any kind of decompression error message, rather the file will simply be copied to the destination.\n\nAdding files from a URL\n\nIn the case where source is a remote file URL, the destination will have permissions of 600. If the HTTP response contains a Last-Modified header, the timestamp from that header will be used to set the mtime on the destination file. However, like any other file processed during an ADD, mtime isn't included in the determination of whether or not the file has changed and the cache should be updated.\n\nIf the destination ends with a trailing slash, then the filename is inferred from the URL path. For example, ADD http://example.com/foobar / would create the file /foobar. The URL must have a nontrivial path so that an appropriate filename can be discovered (http://example.com doesn't work).\n\nIf the destination doesn't end with a trailing slash, the destination path becomes the filename of the file downloaded from the URL. For example, ADD http://example.com/foo /bar creates the file /bar.\n\nIf your URL files are protected using authentication, you need to use RUN wget, RUN curl or use another tool from within the container as the ADD instruction doesn't support authentication.\n\nAdding files from a Git repository\n\nTo use a Git repository as the source for ADD, you can reference the repository's HTTP or SSH address as the source. The repository is cloned to the specified destination in the image.\n\nYou can use URL fragments to specify a specific branch, tag, commit, or subdirectory. For example, to add the docs directory of the v0.14.1 tag of the buildkit repository:\n\nFor more information about Git URL fragments, see URL fragments.\n\nWhen adding from a Git repository, the permissions bits for files are 644. If a file in the repository has the executable bit set, it will have permissions set to 755. Directories have permissions set to 755.\n\nWhen using a Git repository as the source, the repository must be accessible from the build context. To add a repository via SSH, whether public or private, you must pass an SSH key for authentication. For example, given the following Dockerfile:\n\nTo build this Dockerfile, pass the --ssh flag to the docker build to mount the SSH agent socket to the build. For example:\n\nFor more information about building with secrets, see Build secrets.\n\nDestination\n\nIf the destination path begins with a forward slash, it's interpreted as an absolute path, and the source files are copied into the specified destination relative to the root of the current build stage.\n\nTrailing slashes are significant. For example, ADD test.txt /abs creates a file at /abs, whereas ADD test.txt /abs/ creates /abs/test.txt.\n\nIf the destination path doesn't begin with a leading slash, it's interpreted as relative to the working directory of the build container.\n\nIf destination doesn't exist, it's created, along with all missing directories in its path.\n\nIf the source is a file, and the destination doesn't end with a trailing slash, the source file will be written to the destination path as a file.\n\nADD --keep-git-dir\n\nWhen <src> is the HTTP or SSH address of a remote Git repository, BuildKit adds the contents of the Git repository to the image excluding the .git directory by default.\n\nThe --keep-git-dir=true flag lets you preserve the .git directory.\n\nADD --checksum\n\nThe --checksum flag lets you verify the checksum of a remote resource:\n\nThe --checksum flag only supports HTTP(S) sources.\n\nADD --chown --chmod\n\nSee COPY --chown --chmod.\n\nADD --link\n\nSee COPY --link.\n\nADD --exclude\n\nSee COPY --exclude.\n\nCOPY\n\nCOPY has two forms. The latter form is required for paths containing whitespace.\n\nThe available [OPTIONS] are:\n\n--from\n\n--chown\n\n--chmod\n\n--link\n\n--parents\n\n--exclude\n\nThe COPY instruction copies new files or directories from <src> and adds them to the filesystem of the image at the path <dest>. Files and directories can be copied from the build context, build stage, named context, or an image.\n\nThe ADD and COPY instructions are functionally similar, but serve slightly different purposes. Learn more about the differences between ADD and COPY.\n\nSource\n\nYou can specify multiple source files or directories with COPY. The last argument must always be the destination. For example, to copy two files, file1.txt and file2.txt, from the build context to /usr/src/things/ in the build container:\n\nIf you specify multiple source files, either directly or using a wildcard, then the destination must be a directory (must end with a slash /).\n\nCOPY accepts a flag --from=<name> that lets you specify the source location to be a build stage, context, or image. The following example copies files from a stage named build:\n\nFor more information about copying from named sources, see the --from flag.\n\nCopying from the build context\n\nWhen copying source files from the build context, their paths are interpreted as relative to the root of the context. If you specify a relative path leading outside of the build context, such as COPY ../something /something, parent directory paths are stripped out automatically. The effective source path in this example becomes COPY something /something.\n\nIf the source is a directory, the contents of the directory are copied, including filesystem metadata. The directory itself isn't copied, only its contents. If it contains subdirectories, these are also copied, and merged with any existing directories at the destination. Any conflicts are resolved in favor of the content being added, on a file-by-file basis, except if you're trying to copy a directory onto an existing file, in which case an error is raised.\n\nIf the source is a file, the file and its metadata are copied to the destination. File permissions are preserved. If the source is a file and a directory with the same name exists at the destination, an error is raised.\n\nIf you pass a Dockerfile through stdin to the build (docker build - < Dockerfile), there is no build context. In this case, you can only use the COPY instruction to copy files from other stages, named contexts, or images, using the --from flag. You can also pass a tar archive through stdin: (docker build - < archive.tar), the Dockerfile at the root of the archive and the rest of the archive will be used as the context of the build.\n\nWhen using a Git repository as the build context, the permissions bits for copied files are 644. If a file in the repository has the executable bit set, it will have permissions set to 755. Directories have permissions set to 755.\n\nPattern matching\n\nFor local files, each <src> may contain wildcards and matching will be done using Go's filepath.Match rules.\n\nFor example, to add all files and directories in the root of the build context ending with .png:\n\nIn the following example, ? is a single-character wildcard, matching e.g. index.js and index.ts.\n\nWhen adding files or directories that contain special characters (such as [ and ]), you need to escape those paths following the Golang rules to prevent them from being treated as a matching pattern. For example, to add a file named arr[0].txt, use the following;\n\nDestination\n\nIf the destination path begins with a forward slash, it's interpreted as an absolute path, and the source files are copied into the specified destination relative to the root of the current build stage.\n\nTrailing slashes are significant. For example, ADD test.txt /abs creates a file at /abs, whereas ADD test.txt /abs/ creates /abs/test.txt.\n\nIf the destination path doesn't begin with a leading slash, it's interpreted as relative to the working directory of the build container.\n\nIf destination doesn't exist, it's created, along with all missing directories in its path.\n\nIf the source is a file, and the destination doesn't end with a trailing slash, the source file will be written to the destination path as a file.\n\nCOPY --from\n\nBy default, the COPY instruction copies files from the build context. The COPY --from flag lets you copy files from an image, a build stage, or a named context instead.\n\nTo copy from a build stage in a multi-stage build, specify the name of the stage you want to copy from. You specify stage names using the AS keyword with the FROM instruction.\n\nYou can also copy files directly from named contexts (specified with --build-context <name>=<source>) or images. The following example copies an nginx.conf file from the official Nginx image.\n\nThe source path of COPY --from is always resolved from filesystem root of the image or stage that you specify.\n\nCOPY --chown --chmod\n\nNote\n\nOnly octal notation is currently supported. Non-octal support is tracked in moby/buildkit#1951.\n\nThe --chown and --chmod features are only supported on Dockerfiles used to build Linux containers, and doesn't work on Windows containers. Since user and group ownership concepts do not translate between Linux and Windows, the use of /etc/passwd and /etc/group for translating user and group names to IDs restricts this feature to only be viable for Linux OS-based containers.\n\nAll files and directories copied from the build context are created with a UID and GID of 0 unless the optional --chown flag specifies a given username, groupname, or UID/GID combination to request specific ownership of the copied content. The format of the --chown flag allows for either username and groupname strings or direct integer UID and GID in any combination. Providing a username without groupname or a UID without GID will use the same numeric UID as the GID. If a username or groupname is provided, the container's root filesystem /etc/passwd and /etc/group files will be used to perform the translation from name to integer UID or GID respectively. The following examples show valid definitions for the --chown flag:\n\nIf the container root filesystem doesn't contain either /etc/passwd or /etc/group files and either user or group names are used in the --chown flag, the build will fail on the COPY operation. Using numeric IDs requires no lookup and does not depend on container root filesystem content.\n\nCOPY --link\n\nEnabling this flag in COPY or ADD commands allows you to copy files with enhanced semantics where your files remain independent on their own layer and don't get invalidated when commands on previous layers are changed.\n\nWhen --link is used your source files are copied into an empty destination directory. That directory is turned into a layer that is linked on top of your previous state.\n\nIs equivalent of doing two builds:\n\nand\n\nand merging all the layers of both images together.\n\nBenefits of using --link\n\nUse --link to reuse already built layers in subsequent builds with --cache-from even if the previous layers have changed. This is especially important for multi-stage builds where a COPY --from statement would previously get invalidated if any previous commands in the same stage changed, causing the need to rebuild the intermediate stages again. With --link the layer the previous build generated is reused and merged on top of the new layers. This also means you can easily rebase your images when the base images receive updates, without having to execute the whole build again. In backends that support it, BuildKit can do this rebase action without the need to push or pull any layers between the client and the registry. BuildKit will detect this case and only create new image manifest that contains the new layers and old layers in correct order.\n\nThe same behavior where BuildKit can avoid pulling down the base image can also happen when using --link and no other commands that would require access to the files in the base image. In that case BuildKit will only build the layers for the COPY commands and push them to the registry directly on top of the layers of the base image.\n\nIncompatibilities with --link=false\n\nWhen using --link the COPY/ADD commands are not allowed to read any files from the previous state. This means that if in previous state the destination directory was a path that contained a symlink, COPY/ADD can not follow it. In the final image the destination path created with --link will always be a path containing only directories.\n\nIf you don't rely on the behavior of following symlinks in the destination path, using --link is always recommended. The performance of --link is equivalent or better than the default behavior and, it creates much better conditions for cache reuse.\n\nCOPY --parents\n\nNote\n\nNot yet available in stable syntax, use docker/dockerfile:1.7-labs version.\n\nThe --parents flag preserves parent directories for src entries. This flag defaults to false.\n\nThis behavior is similar to the Linux cp utility's --parents or rsync --relative flag.\n\nAs with Rsync, it is possible to limit which parent directories are preserved by inserting a dot and a slash (./) into the source path. If such point exists, only parent directories after it will be preserved. This may be especially useful copies between stages with --from where the source paths need to be absolute.\n\nNote that, without the --parents flag specified, any filename collision will fail the Linux cp operation with an explicit error message (cp: will not overwrite just-created './x/a.txt' with './y/a.txt'), where the Buildkit will silently overwrite the target file at the destination.\n\nWhile it is possible to preserve the directory structure for COPY instructions consisting of only one src entry, usually it is more beneficial to keep the layer count in the resulting image as low as possible. Therefore, with the --parents flag, the Buildkit is capable of packing multiple COPY instructions together, keeping the directory structure intact.\n\nCOPY --exclude\n\nNote\n\nNot yet available in stable syntax, use docker/dockerfile:1.7-labs version.\n\nThe --exclude flag lets you specify a path expression for files to be excluded.\n\nThe path expression follows the same format as <src>, supporting wildcards and matching using Go's filepath.Match rules. For example, to add all files starting with \"hom\", excluding files with a .txt extension:\n\nYou can specify the --exclude option multiple times for a COPY instruction. Multiple --excludes are files matching its patterns not to be copied, even if the files paths match the pattern specified in <src>. To add all files starting with \"hom\", excluding files with either .txt or .md extensions:\n\nENTRYPOINT\n\nAn ENTRYPOINT allows you to configure a container that will run as an executable.\n\nENTRYPOINT has two possible forms:\n\nThe exec form, which is the preferred form:\n\nENTRYPOINT [\"executable\", \"param1\", \"param2\"]\n\nThe shell form:\n\nENTRYPOINT command param1 param2\n\nFor more information about the different forms, see Shell and exec form.\n\nThe following command starts a container from the nginx with its default content, listening on port 80:\n\nCommand line arguments to docker run <image> will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD.\n\nThis allows arguments to be passed to the entry point, i.e., docker run <image> -d will pass the -d argument to the entry point. You can override the ENTRYPOINT instruction using the docker run --entrypoint flag.\n\nThe shell form of ENTRYPOINT prevents any CMD command line arguments from being used. It also starts your ENTRYPOINT as a subcommand of /bin/sh -c, which does not pass signals. This means that the executable will not be the container's PID 1, and will not receive Unix signals. In this case, your executable doesn't receive a SIGTERM from docker stop <container>.\n\nOnly the last ENTRYPOINT instruction in the Dockerfile will have an effect.\n\nExec form ENTRYPOINT example\n\nYou can use the exec form of ENTRYPOINT to set fairly stable default commands and arguments and then use either form of CMD to set additional defaults that are more likely to be changed.\n\nWhen you run the container, you can see that top is the only process:\n\nTo examine the result further, you can use docker exec:\n\nAnd you can gracefully request top to shut down using docker stop test.\n\nThe following Dockerfile shows using the ENTRYPOINT to run Apache in the foreground (i.e., as PID 1):\n\nIf you need to write a starter script for a single executable, you can ensure that the final executable receives the Unix signals by using exec and gosu commands:\n\nLastly, if you need to do some extra cleanup (or communicate with other containers) on shutdown, or are co-ordinating more than one executable, you may need to ensure that the ENTRYPOINT script receives the Unix signals, passes them on, and then does some more work:\n\nIf you run this image with docker run -it --rm -p 80:80 --name test apache, you can then examine the container's processes with docker exec, or docker top, and then ask the script to stop Apache:\n\nNote\n\nYou can override the ENTRYPOINT setting using --entrypoint, but this can only set the binary to exec (no sh -c will be used).\n\nShell form ENTRYPOINT example\n\nYou can specify a plain string for the ENTRYPOINT and it will execute in /bin/sh -c. This form will use shell processing to substitute shell environment variables, and will ignore any CMD or docker run command line arguments. To ensure that docker stop will signal any long running ENTRYPOINT executable correctly, you need to remember to start it with exec:\n\nWhen you run this image, you'll see the single PID 1 process:\n\nWhich exits cleanly on docker stop:\n\nIf you forget to add exec to the beginning of your ENTRYPOINT:\n\nYou can then run it (giving it a name for the next step):\n\nYou can see from the output of top that the specified ENTRYPOINT is not PID 1.\n\nIf you then run docker stop test, the container will not exit cleanly - the stop command will be forced to send a SIGKILL after the timeout:\n\nUnderstand how CMD and ENTRYPOINT interact\n\nBoth CMD and ENTRYPOINT instructions define what command gets executed when running a container. There are few rules that describe their co-operation.\n\nDockerfile should specify at least one of CMD or ENTRYPOINT commands.\n\nENTRYPOINT should be defined when using the container as an executable.\n\nCMD should be used as a way of defining default arguments for an ENTRYPOINT command or for executing an ad-hoc command in a container.\n\nCMD will be overridden when running the container with alternative arguments.\n\nThe table below shows what command is executed for different ENTRYPOINT / CMD combinations:\n\nNo ENTRYPOINTENTRYPOINT exec_entry p1_entryENTRYPOINT [\"exec_entry\", \"p1_entry\"]No CMDerror, not allowed/bin/sh -c exec_entry p1_entryexec_entry p1_entryCMD [\"exec_cmd\", \"p1_cmd\"]exec_cmd p1_cmd/bin/sh -c exec_entry p1_entryexec_entry p1_entry exec_cmd p1_cmdCMD exec_cmd p1_cmd/bin/sh -c exec_cmd p1_cmd/bin/sh -c exec_entry p1_entryexec_entry p1_entry /bin/sh -c exec_cmd p1_cmd\n\nNote\n\nIf CMD is defined from the base image, setting ENTRYPOINT will reset CMD to an empty value. In this scenario, CMD must be defined in the current image to have a value.\n\nVOLUME\n\nThe VOLUME instruction creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers. The value can be a JSON array, VOLUME [\"/var/log/\"], or a plain string with multiple arguments, such as VOLUME /var/log or VOLUME /var/log /var/db. For more information/examples and mounting instructions via the Docker client, refer to Share Directories via Volumes documentation.\n\nThe docker run command initializes the newly created volume with any data that exists at the specified location within the base image. For example, consider the following Dockerfile snippet:\n\nThis Dockerfile results in an image that causes docker run to create a new mount point at /myvol and copy the greeting file into the newly created volume.\n\nNotes about specifying volumes\n\nKeep the following things in mind about volumes in the Dockerfile.\n\nVolumes on Windows-based containers: When using Windows-based containers, the destination of a volume inside the container must be one of:\n\na non-existing or empty directory\n\na drive other than C:\n\nChanging the volume from within the Dockerfile: If any build steps change the data within the volume after it has been declared, those changes will be discarded.\n\nJSON formatting: The list is parsed as a JSON array. You must enclose words with double quotes (\") rather than single quotes (').\n\nThe host directory is declared at container run-time: The host directory (the mountpoint) is, by its nature, host-dependent. This is to preserve image portability, since a given host directory can't be guaranteed to be available on all hosts. For this reason, you can't mount a host directory from within the Dockerfile. The VOLUME instruction does not support specifying a host-dir parameter. You must specify the mountpoint when you create or run the container.\n\nUSER\n\nor\n\nThe USER instruction sets the user name (or UID) and optionally the user group (or GID) to use as the default user and group for the remainder of the current stage. The specified user is used for RUN instructions and at runtime, runs the relevant ENTRYPOINT and CMD commands.\n\nNote that when specifying a group for the user, the user will have only the specified group membership. Any other configured group memberships will be ignored.\n\nWarning\n\nWhen the user doesn't have a primary group then the image (or the next instructions) will be run with the root group.\n\nOn Windows, the user must be created first if it's not a built-in account. This can be done with the net user command called as part of a Dockerfile.\n\nWORKDIR\n\nThe WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn't exist, it will be created even if it's not used in any subsequent Dockerfile instruction.\n\nThe WORKDIR instruction can be used multiple times in a Dockerfile. If a relative path is provided, it will be relative to the path of the previous WORKDIR instruction. For example:\n\nThe output of the final pwd command in this Dockerfile would be /a/b/c.\n\nThe WORKDIR instruction can resolve environment variables previously set using ENV. You can only use environment variables explicitly set in the Dockerfile. For example:\n\nThe output of the final pwd command in this Dockerfile would be /path/$DIRNAME\n\nIf not specified, the default working directory is /. In practice, if you aren't building a Dockerfile from scratch (FROM scratch), the WORKDIR may likely be set by the base image you're using.\n\nTherefore, to avoid unintended operations in unknown directories, it's best practice to set your WORKDIR explicitly.\n\nARG\n\nThe ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.\n\nWarning\n\nIt isn't recommended to use build arguments for passing secrets such as user credentials, API tokens, etc. Build arguments are visible in the docker history command and in max mode provenance attestations, which are attached to the image by default if you use the Buildx GitHub Actions and your GitHub repository is public.\n\nRefer to the RUN --mount=type=secret section to learn about secure ways to use secrets when building images.\n\nA Dockerfile may include one or more ARG instructions. For example, the following is a valid Dockerfile:\n\nDefault values\n\nAn ARG instruction can optionally include a default value:\n\nIf an ARG instruction has a default value and if there is no value passed at build-time, the builder uses the default.\n\nScope\n\nAn ARG variable definition comes into effect from the line on which it is defined in the Dockerfile not from the argument's use on the command-line or elsewhere. For example, consider this Dockerfile:\n\nA user builds this file by calling:\n\nThe USER at line 2 evaluates to some_user as the username variable is defined on the subsequent line 3. The USER at line 4 evaluates to what_user, as the username argument is defined and the what_user value was passed on the command line. Prior to its definition by an ARG instruction, any use of a variable results in an empty string.\n\nAn ARG instruction goes out of scope at the end of the build stage where it was defined. To use an argument in multiple stages, each stage must include the ARG instruction.\n\nUsing ARG variables\n\nYou can use an ARG or an ENV instruction to specify variables that are available to the RUN instruction. Environment variables defined using the ENV instruction always override an ARG instruction of the same name. Consider this Dockerfile with an ENV and ARG instruction.\n\nThen, assume this image is built with this command:\n\nIn this case, the RUN instruction uses v1.0.0 instead of the ARG setting passed by the user:v2.0.1 This behavior is similar to a shell script where a locally scoped variable overrides the variables passed as arguments or inherited from environment, from its point of definition.\n\nUsing the example above but a different ENV specification you can create more useful interactions between ARG and ENV instructions:\n\nUnlike an ARG instruction, ENV values are always persisted in the built image. Consider a docker build without the --build-arg flag:\n\nUsing this Dockerfile example, CONT_IMG_VER is still persisted in the image but its value would be v1.0.0 as it is the default set in line 3 by the ENV instruction.\n\nThe variable expansion technique in this example allows you to pass arguments from the command line and persist them in the final image by leveraging the ENV instruction. Variable expansion is only supported for a limited set of Dockerfile instructions.\n\nPredefined ARGs\n\nDocker has a set of predefined ARG variables that you can use without a corresponding ARG instruction in the Dockerfile.\n\nHTTP_PROXY\n\nhttp_proxy\n\nHTTPS_PROXY\n\nhttps_proxy\n\nFTP_PROXY\n\nftp_proxy\n\nNO_PROXY\n\nno_proxy\n\nALL_PROXY\n\nall_proxy\n\nTo use these, pass them on the command line using the --build-arg flag, for example:\n\nBy default, these pre-defined variables are excluded from the output of docker history. Excluding them reduces the risk of accidentally leaking sensitive authentication information in an HTTP_PROXY variable.\n\nFor example, consider building the following Dockerfile using --build-arg HTTP_PROXY=http://user:pass@proxy.lon.example.com\n\nIn this case, the value of the HTTP_PROXY variable is not available in the docker history and is not cached. If you were to change location, and your proxy server changed to http://user:pass@proxy.sfo.example.com, a subsequent build does not result in a cache miss.\n\nIf you need to override this behaviour then you may do so by adding an ARG statement in the Dockerfile as follows:\n\nWhen building this Dockerfile, the HTTP_PROXY is preserved in the docker history, and changing its value invalidates the build cache.\n\nAutomatic platform ARGs in the global scope\n\nThis feature is only available when using the BuildKit backend.\n\nBuildKit supports a predefined set of ARG variables with information on the platform of the node performing the build (build platform) and on the platform of the resulting image (target platform). The target platform can be specified with the --platform flag on docker build.\n\nThe following ARG variables are set automatically:\n\nTARGETPLATFORM - platform of the build result. Eg linux/amd64, linux/arm/v7, windows/amd64.\n\nTARGETOS - OS component of TARGETPLATFORM\n\nTARGETARCH - architecture component of TARGETPLATFORM\n\nTARGETVARIANT - variant component of TARGETPLATFORM\n\nBUILDPLATFORM - platform of the node performing the build.\n\nBUILDOS - OS component of BUILDPLATFORM\n\nBUILDARCH - architecture component of BUILDPLATFORM\n\nBUILDVARIANT - variant component of BUILDPLATFORM\n\nThese arguments are defined in the global scope so are not automatically available inside build stages or for your RUN commands. To expose one of these arguments inside the build stage redefine it without value.\n\nFor example:\n\nBuildKit built-in build args\n\nArgTypeDescriptionBUILDKIT_CACHE_MOUNT_NSStringSet optional cache ID namespace.BUILDKIT_CONTEXT_KEEP_GIT_DIRBoolTrigger Git context to keep the .git directory.BUILDKIT_INLINE_CACHEBoolInline cache metadata to image config or not.BUILDKIT_MULTI_PLATFORMBoolOpt into deterministic output regardless of multi-platform output or not.BUILDKIT_SANDBOX_HOSTNAMEStringSet the hostname (default buildkitsandbox)BUILDKIT_SYNTAXStringSet frontend imageSOURCE_DATE_EPOCHIntSet the Unix timestamp for created image and layers. More info from reproducible builds. Supported since Dockerfile 1.5, BuildKit 0.11\n\nExample: keep .git dir\n\nWhen using a Git context, .git dir is not kept on checkouts. It can be useful to keep it around if you want to retrieve git information during your build:\n\nImpact on build caching\n\nARG variables are not persisted into the built image as ENV variables are. However, ARG variables do impact the build cache in similar ways. If a Dockerfile defines an ARG variable whose value is different from a previous build, then a \"cache miss\" occurs upon its first usage, not its definition. In particular, all RUN instructions following an ARG instruction use the ARG variable implicitly (as an environment variable), thus can cause a cache miss. All predefined ARG variables are exempt from caching unless there is a matching ARG statement in the Dockerfile.\n\nFor example, consider these two Dockerfile:\n\nIf you specify --build-arg CONT_IMG_VER=<value> on the command line, in both cases, the specification on line 2 doesn't cause a cache miss; line 3 does cause a cache miss. ARG CONT_IMG_VER causes the RUN line to be identified as the same as running CONT_IMG_VER=<value> echo hello, so if the <value> changes, you get a cache miss.\n\nConsider another example under the same command line:\n\nIn this example, the cache miss occurs on line 3. The miss happens because the variable's value in the ENV references the ARG variable and that variable is changed through the command line. In this example, the ENV command causes the image to include the value.\n\nIf an ENV instruction overrides an ARG instruction of the same name, like this Dockerfile:\n\nLine 3 doesn't cause a cache miss because the value of CONT_IMG_VER is a constant (hello). As a result, the environment variables and values used on the RUN (line 4) doesn't change between builds.\n\nONBUILD\n\nThe ONBUILD instruction adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build. The trigger will be executed in the context of the downstream build, as if it had been inserted immediately after the FROM instruction in the downstream Dockerfile.\n\nAny build instruction can be registered as a trigger.\n\nThis is useful if you are building an image which will be used as a base to build other images, for example an application build environment or a daemon which may be customized with user-specific configuration.\n\nFor example, if your image is a reusable Python application builder, it will require application source code to be added in a particular directory, and it might require a build script to be called after that. You can't just call ADD and RUN now, because you don't yet have access to the application source code, and it will be different for each application build. You could simply provide application developers with a boilerplate Dockerfile to copy-paste into their application, but that's inefficient, error-prone and difficult to update because it mixes with application-specific code.\n\nThe solution is to use ONBUILD to register advance instructions to run later, during the next build stage.\n\nHere's how it works:\n\nWhen it encounters an ONBUILD instruction, the builder adds a trigger to the metadata of the image being built. The instruction doesn't otherwise affect the current build.\n\nAt the end of the build, a list of all triggers is stored in the image manifest, under the key OnBuild. They can be inspected with the docker inspect command.\n\nLater the image may be used as a base for a new build, using the FROM instruction. As part of processing the FROM instruction, the downstream builder looks for ONBUILD triggers, and executes them in the same order they were registered. If any of the triggers fail, the FROM instruction is aborted which in turn causes the build to fail. If all triggers succeed, the FROM instruction completes and the build continues as usual.\n\nTriggers are cleared from the final image after being executed. In other words they aren't inherited by \"grand-children\" builds.\n\nFor example you might add something like this:\n\nONBUILD limitations\n\nChaining ONBUILD instructions using ONBUILD ONBUILD isn't allowed.\n\nThe ONBUILD instruction may not trigger FROM or MAINTAINER instructions.\n\nONBUILD COPY --from is not supported.\n\nSTOPSIGNAL\n\nThe STOPSIGNAL instruction sets the system call signal that will be sent to the container to exit. This signal can be a signal name in the format SIG<NAME>, for instance SIGKILL, or an unsigned number that matches a position in the kernel's syscall table, for instance 9. The default is SIGTERM if not defined.\n\nThe image's default stopsignal can be overridden per container, using the --stop-signal flag on docker run and docker create.\n\nHEALTHCHECK\n\nThe HEALTHCHECK instruction has two forms:\n\nHEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container)\n\nHEALTHCHECK NONE (disable any healthcheck inherited from the base image)\n\nThe HEALTHCHECK instruction tells Docker how to test a container to check that it's still working. This can detect cases such as a web server stuck in an infinite loop and unable to handle new connections, even though the server process is still running.\n\nWhen a container has a healthcheck specified, it has a health status in addition to its normal status. This status is initially starting. Whenever a health check passes, it becomes healthy (whatever state it was previously in). After a certain number of consecutive failures, it becomes unhealthy.\n\nThe options that can appear before CMD are:\n\n--interval=DURATION (default: 30s)\n\n--timeout=DURATION (default: 30s)\n\n--start-period=DURATION (default: 0s)\n\n--start-interval=DURATION (default: 5s)\n\n--retries=N (default: 3)\n\nThe health check will first run interval seconds after the container is started, and then again interval seconds after each previous check completes.\n\nIf a single run of the check takes longer than timeout seconds then the check is considered to have failed.\n\nIt takes retries consecutive failures of the health check for the container to be considered unhealthy.\n\nstart period provides initialization time for containers that need time to bootstrap. Probe failure during that period will not be counted towards the maximum number of retries. However, if a health check succeeds during the start period, the container is considered started and all consecutive failures will be counted towards the maximum number of retries.\n\nstart interval is the time between health checks during the start period. This option requires Docker Engine version 25.0 or later.\n\nThere can only be one HEALTHCHECK instruction in a Dockerfile. If you list more than one then only the last HEALTHCHECK will take effect.\n\nThe command after the CMD keyword can be either a shell command (e.g. HEALTHCHECK CMD /bin/check-running) or an exec array (as with other Dockerfile commands; see e.g. ENTRYPOINT for details).\n\nThe command's exit status indicates the health status of the container. The possible values are:\n\n0: success - the container is healthy and ready for use\n\n1: unhealthy - the container isn't working correctly\n\n2: reserved - don't use this exit code\n\nFor example, to check every five minutes or so that a web-server is able to serve the site's main page within three seconds:\n\nTo help debug failing probes, any output text (UTF-8 encoded) that the command writes on stdout or stderr will be stored in the health status and can be queried with docker inspect. Such output should be kept short (only the first 4096 bytes are stored currently).\n\nWhen the health status of a container changes, a health_status event is generated with the new status.\n\nSHELL\n\nThe SHELL instruction allows the default shell used for the shell form of commands to be overridden. The default shell on Linux is [\"/bin/sh\", \"-c\"], and on Windows is [\"cmd\", \"/S\", \"/C\"]. The SHELL instruction must be written in JSON form in a Dockerfile.\n\nThe SHELL instruction is particularly useful on Windows where there are two commonly used and quite different native shells: cmd and powershell, as well as alternate shells available including sh.\n\nThe SHELL instruction can appear multiple times. Each SHELL instruction overrides all previous SHELL instructions, and affects all subsequent instructions. For example:\n\nThe following instructions can be affected by the SHELL instruction when the shell form of them is used in a Dockerfile: RUN, CMD and ENTRYPOINT.\n\nThe following example is a common pattern found on Windows which can be streamlined by using the SHELL instruction:\n\nThe command invoked by the builder will be:\n\nThis is inefficient for two reasons. First, there is an unnecessary cmd.exe command processor (aka shell) being invoked. Second, each RUN instruction in the shell form requires an extra powershell -command prefixing the command.\n\nTo make this more efficient, one of two mechanisms can be employed. One is to use the JSON form of the RUN command such as:\n\nWhile the JSON form is unambiguous and does not use the unnecessary cmd.exe, it does require more verbosity through double-quoting and escaping. The alternate mechanism is to use the SHELL instruction and the shell form, making a more natural syntax for Windows users, especially when combined with the escape parser directive:\n\nResulting in:\n\nThe SHELL instruction could also be used to modify the way in which a shell operates. For example, using SHELL cmd /S /C /V:ON|OFF on Windows, delayed environment variable expansion semantics could be modified.\n\nThe SHELL instruction can also be used on Linux should an alternate shell be required such as zsh, csh, tcsh and others.\n\nHere-Documents\n\nHere-documents allow redirection of subsequent Dockerfile lines to the input of RUN or COPY commands. If such command contains a here-document the Dockerfile considers the next lines until the line only containing a here-doc delimiter as part of the same command.\n\nExample: Running a multi-line script\n\nIf the command only contains a here-document, its contents is evaluated with the default shell.\n\nAlternatively, shebang header can be used to define an interpreter.\n\nMore complex examples may use multiple here-documents.\n\nExample: Creating inline files\n\nWith COPY instructions, you can replace the source parameter with a here-doc indicator to write the contents of the here-document directly to a file. The following example creates a greeting.txt file containing hello world using a COPY instruction.\n\nRegular here-doc variable expansion and tab stripping rules apply. The following example shows a small Dockerfile that creates a hello.sh script file using a COPY instruction with a here-document.\n\nIn this case, file script prints \"hello bar\", because the variable is expanded when the COPY instruction gets executed.\n\nIf instead you were to quote any part of the here-document word EOT, the variable would not be expanded at build-time.\n\nNote that ARG FOO=bar is excessive here, and can be removed. The variable gets interpreted at runtime, when the script is invoked:\n\nDockerfile examples\n\nFor examples of Dockerfiles, refer to:"
    }
}