{
    "id": "dbpedia_5466_2",
    "rank": 9,
    "data": {
        "url": "https://docutils.sourceforge.io/docs/ref/rst/directives.html",
        "read_more_link": "",
        "language": "en",
        "title": "reStructuredText Directives",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "David Goodger"
        ],
        "publish_date": "2024-08-15T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Admonitions\n\nAdmonitions (\"safety messages\" or \"hazard statements\") can appear anywhere an ordinary body element can. They contain arbitrary body elements. Typically, an admonition is rendered as an offset block in a document, sometimes outlined or shaded.\n\nDocutils defines a generic admonition as well as a set of specific admonitions.\n\nSpecific Admonitions\n\nDirective Types:\n\n\"attention\", \"caution\", \"danger\", \"error\", \"hint\", \"important\", \"note\", \"tip\", \"warning\"\n\nDoctree Elements:\n\n<attention>, <caution>, <danger>, <error>, <hint>, <important>, <note>, <tip>, <warning>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nInterpreted as body elements.\n\nSpecific admonitions are rendered with a title matching the admonition type. For example:\n\n.. DANGER:: Beware killer rabbits!\n\nThis directive might be rendered something like this:\n\n+------------------------+ | !DANGER! | | | | Beware killer rabbits! | +------------------------+\n\nAny text immediately following the directive indicator (on the same line and/or indented on following lines) is interpreted as a directive block and is parsed for normal body elements. For example, the following \"note\" admonition directive contains one paragraph and a bullet list consisting of two list items:\n\n.. note:: This is a note admonition. This is the second line of the first paragraph. - The note contains all indented body elements following. - It includes this bullet list.\n\nGeneric Admonition\n\nDirective Type:\n\n\"admonition\"\n\nDoctree Elements:\n\n<admonition>, <title>\n\nDirective Arguments:\n\none, required (admonition title)\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nInterpreted as body elements.\n\nThis is a generic, titled admonition. The title may be anything the author desires.\n\nThe author-supplied title is also used as a classes attribute value after identifier normalization and adding the prefix \"admonition-\". For example, this admonition:\n\n.. admonition:: And, by the way... You can make up your own admonition too.\n\nbecomes the following document tree (pseudo-XML):\n\n<document source=\"test data\"> <admonition classes=\"admonition-and-by-the-way\"> <title> And, by the way... <paragraph> You can make up your own admonition too.\n\nThe class option overrides the generated classes attribute value.\n\nImages\n\nThere are two directives to include images: image and figure.\n\nSVG\n\nPDF\n\nPNG\n\nJPG\n\nGIF\n\nAPNG\n\nAVIF\n\nWebM\n\nMP4\n\nOGG\n\nvector\n\nraster\n\nvideo\n\nHTML4\n\nâ\n\nâ\n\nâ\n\nâ\n\n(â)\n\n(â)\n\n(â)\n\n(â)\n\n(â)\n\nHTML5\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nLaTeX\n\nâ\n\nâ\n\nâ\n\nODT\n\nâ\n\nâ\n\nâ\n\nâ\n\nâ\n\nImage\n\nDirective Type:\n\n\"image\"\n\nDoctree Elements:\n\n<image>, <reference> (only with option \"target\")\n\nDirective Arguments:\n\none, required (image URI)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nnone\n\nConfiguration Setting:\n\nimage_loading (only HTML5 writer)\n\nAn \"image\" is a simple picture:\n\n.. image:: picture.png\n\nA URI reference to the image source file is specified in the directive argument. As with hyperlink targets, the image URI may begin on the same line as the explicit markup start and target name, or it may begin in an indented text block immediately following, with no intervening blank lines. If there are multiple lines in the link block, they are stripped of leading and trailing whitespace and joined together.\n\nOptionally, the image link block may contain a flat field list, the image options. For example:\n\n.. image:: picture.jpeg :height: 100px :width: 200 px :scale: 50 % :loading: embed :alt: alternate text :align: right\n\nInline images can be defined with an \"image\" directive in a substitution definition, e.g.\n\n|Red light| means stop, |green light| means go. .. |red light| image:: red_light.png :align: top .. |green light| image:: green_light.png :align: bottom\n\nThe \"image\" directive recognizes the common options class and name as well as\n\nalign\"top\", \"middle\", \"bottom\", \"left\", \"center\", or \"right\"\n\nThe alignment of the image, equivalent to the HTML <img> tag's deprecated \"align\" attribute or the corresponding \"vertical-align\" and \"text-align\" CSS properties. The values \"top\", \"middle\", and \"bottom\" control an image's vertical alignment (relative to the text baseline); they are only useful for inline images (substitutions). The values \"left\", \"center\", and \"right\" control an image's horizontal alignment, allowing the image to float and have the text flow around it. The specific behaviour depends upon the browser or rendering software used.\n\nalttext\n\nAlternate text: a short description of the image, displayed by applications that cannot display images, or spoken by applications for visually impaired users.\n\nheightlength\n\nThe desired height of the image. Used to reserve space or scale the image vertically. When the scale option is also specified, they are combined. For example, a height of 200px and a scale of 50 is equivalent to a height of 100px with no scale.\n\nloading\"embed\", \"link\", or \"lazy\"\n\nSet the loading attribute to indicate the preferred handling by the Docutils Writer.\n\nembed:\n\nEmbed the image into the output document.\n\nlink:\n\nRefer to the image via its URI.\n\nlazy:\n\nRefer to the image. The HTML5 writer additionally specifies the \"lazy loading attribute\".\n\n(New in Docutils 0.21.)\n\nscaleinteger percentage (the \"%\" symbol is optional)\n\nThe uniform scaling factor of the image. The default is \"100Â %\", i.e. no scaling. Docutils tries to determine dimensions from the image file if no height or width options are specified (requires the Python Imaging Library).\n\ntargetURI or reference name\n\nNest the image in a hyperlink reference element (make it \"clickable\"). The option argument may be a URI reference or a reference name with underscore suffix (e.g. `a name`_).\n\nwidthlength or percentage of the current line width\n\nThe width of the image. Used to reserve space or scale the image horizontally. As with height above, when the scale option is also specified, they are combined.\n\nFigure\n\nDirective Type:\n\n\"figure\"\n\nDoctree Elements:\n\n<figure>, <image>, <caption>, <legend>\n\nDirective Arguments:\n\none, required (image URI)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nInterpreted as the figure caption and an optional legend.\n\nA \"figure\" consists of image data (including image options), an optional caption (a single paragraph), and an optional legend (arbitrary body elements). For page-based output media, figures might float to a different position if this helps the page layout.\n\n.. figure:: picture.png :scale: 50 % :alt: map to buried treasure This is the caption of the figure (a simple paragraph). The legend consists of all elements after the caption. In this case, the legend consists of this paragraph and the following table: +-----------------------+-----------------------+ | Symbol | Meaning | +=======================+=======================+ | .. image:: tent.png | Campground | +-----------------------+-----------------------+ | .. image:: waves.png | Lake | +-----------------------+-----------------------+ | .. image:: peak.png | Mountain | +-----------------------+-----------------------+\n\nThere must be blank lines before the caption paragraph and before the legend. To specify a legend without a caption, use an empty comment (\"..\") in place of the caption.\n\nThe \"figure\" directive supports all options of the \"image\" directive. These options (except align) are passed on to the contained image.\n\nalign\"left\", \"center\", or \"right\"\n\nThe horizontal alignment of the figure, allowing the image to float and have the text flow around it. The specific behaviour depends upon the browser or rendering software used.\n\nIn addition, the following options are recognized:\n\nfigwidth\"image\", length, or percentage of current line width\n\nThe width of the figure. Limits the horizontal space used by the figure. A special value of \"image\" is allowed, in which case the included image's actual width is used (requires the Python Imaging Library). If the image file is not found or the required software is unavailable, this option is ignored.\n\nSets the width attribute of the <figure> doctree element.\n\nThis option does not scale the included image; use the width image option for that.\n\n+---------------------------+ | figure | | | |<------ figwidth --------->| | | | +---------------------+ | | | image | | | | | | | |<--- width --------->| | | +---------------------+ | | | |The figure's caption should| |wrap at this width. | +---------------------------+\n\nfigclassspace separated list of class names\n\nSet a classes attribute value on the figure element. See the class directive below.\n\nBody Elements\n\nTopic\n\nDirective Type:\n\n\"topic\"\n\nDoctree Element:\n\n<topic>\n\nDirective Arguments:\n\none, required (topic title)\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nInterpreted as the topic body.\n\nA topic is like a block quote with a title, or a self-contained section with no subsections. Use the \"topic\" directive to indicate a self-contained idea that is separate from the flow of the document. Topics may occur anywhere a section or transition may occur. Body elements and topics may not contain nested topics.\n\nThe directive's sole argument is interpreted as the topic title; the next line must be blank. All subsequent lines make up the topic body, interpreted as body elements. For example:\n\n.. topic:: Topic Title Subsequent indented lines comprise the body of the topic, and are interpreted as body elements.\n\nSidebar\n\nDirective Type:\n\n\"sidebar\"\n\nDoctree Element:\n\n<sidebar>\n\nDirective Arguments:\n\none, optional (sidebar title)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nInterpreted as the sidebar body.\n\nSidebars are like miniature, parallel documents that occur inside other documents, providing related or reference material. A sidebar is typically offset by a border and \"floats\" to the side of the page; the document's main text may flow around it. Sidebars can also be likened to super-footnotes; their content is outside of the flow of the document's main text.\n\nSidebars may occur anywhere a section or transition may occur. Body elements (including sidebars) may not contain nested sidebars.\n\nThe directive's sole argument is interpreted as the sidebar title, which may be followed by a subtitle option (see below); the next line must be blank. All subsequent lines make up the sidebar body, interpreted as body elements. For example:\n\n.. sidebar:: Optional Sidebar Title :subtitle: Optional Sidebar Subtitle Subsequent indented lines comprise the body of the sidebar, and are interpreted as body elements.\n\nRecognizes the common options class and name as well as\n\nsubtitletext\n\nThe sidebar's subtitle.\n\nLine Block\n\nDirective Type:\n\n\"line-block\"\n\nDoctree Element:\n\n<line_block>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nBecomes the body of the line block.\n\nThe \"line-block\" directive constructs an element where line breaks and initial indentation is significant and inline markup is supported. It is equivalent to a parsed literal block with different rendering: typically in an ordinary serif typeface instead of a typewriter/monospaced face, and not automatically indented. (Have the line-block directive begin a block quote to get an indented line block.) Line blocks are useful for address blocks and verse (poetry, song lyrics), where the structure of lines is significant. For example, here's a classic:\n\n\"To Ma Own Beloved Lassie: A Poem on her 17th Birthday\", by Ewan McTeagle (for Lassie O'Shea): .. line-block:: Lend us a couple of bob till Thursday. I'm absolutely skint. But I'm expecting a postal order and I can pay you back as soon as it comes. Love, Ewan.\n\nParsed Literal Block\n\nDirective Type:\n\n\"parsed-literal\"\n\nDoctree Element:\n\n<literal_block>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nBecomes the body of the literal block.\n\nUnlike an ordinary literal block, the \"parsed-literal\" directive constructs a literal block where the text is parsed for inline markup. It is equivalent to a line block with different rendering: typically in a typewriter/monospaced typeface, like an ordinary literal block. Parsed literal blocks are useful for adding hyperlinks to code examples.\n\nHowever, care must be taken with the text, because inline markup is recognized and there is no protection from parsing. Backslash-escapes may be necessary to prevent unintended parsing. And because the markup characters are removed by the parser, care must also be taken with vertical alignment. Parsed \"ASCII art\" is tricky, and extra whitespace may be necessary.\n\nFor example, all the element names in this content model are links:\n\n.. parsed-literal:: ( (title_, subtitle_?)?, decoration_?, (docinfo_, transition_?)?, `%structure.model;`_ )\n\nCode\n\nDirective Type:\n\n\"code\"\n\nDoctree Elements:\n\n<literal_block>, inline elements\n\nDirective Arguments:\n\none, optional (formal language)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nBecomes the body of the literal block.\n\nConfiguration Setting:\n\nsyntax_highlight\n\nThe \"code\" directive constructs a literal block. If the code language is specified, the content is parsed by the Pygments syntax highlighter and tokens are stored in nested inline elements with class arguments according to their syntactic category. The actual highlighting requires a custom style-sheet, see the sandbox/stylesheets for examples.\n\nFor example, the content of the following directive\n\n.. code:: python :number-lines: def my_function(): \"just a test\" print(8/2)\n\nis parsed and marked up as Python source code.\n\nThe parsing can be turned off with the syntax_highlight configuration setting and command line option or by specifying the language as class option instead of directive argument. This also avoids warnings when Pygments is not installed or the language is not in the supported languages and markup formats.\n\nFor code in external files, use the \"include\" directive with the code option. For inline code, use the \"code\" role.\n\nRecognizes the common options class and name as well as\n\nnumber-linesinteger (start line number, optional)\n\nPrecede every line with a line number. The optional argument is the number of the first line (default 1).\n\nMath\n\nDirective Type:\n\n\"math\"\n\nDoctree Element:\n\n<math_block>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nBecomes the body of the math block. (Content blocks separated by a blank line are put in adjacent math blocks.)\n\nConfiguration Setting:\n\nmath_output\n\nThe \"math\" directive inserts blocks with mathematical content (display formulas, equations) into the document. The input format is LaTeX math syntax with support for Unicode symbols, for example:\n\n.. math:: Î±_t(i) = P(O_1, O_2, â¦ O_t, q_t = S_i Î»)\n\nSupport is limited to a subset of LaTeX math by the conversion required for many output formats. For HTML, the math_output configuration setting (or the corresponding --math-output command line option) select between alternative output formats with different subsets of supported elements. If a writer does not support math typesetting, the content is inserted verbatim.\n\nFor inline formulas, use the \"math\" role.\n\nRubric\n\nDirective Type:\n\n\"rubric\"\n\nDoctree Element:\n\n<rubric>\n\nDirective Arguments:\n\none, required (rubric text)\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nnone\n\nrubric n. 1. a title, heading, or the like, in a manuscript, book, statute, etc., written or printed in red or otherwise distinguished from the rest of the text. ...\n\nâRandom House Webster's College Dictionary, 1991\n\nThe \"rubric\" directive inserts a \"rubric\" element into the document tree. A rubric is like an informal heading that doesn't correspond to the document's structure.\n\nEpigraph\n\nDirective Type:\n\n\"epigraph\"\n\nDoctree Element:\n\n<block_quote>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nInterpreted as the body of the block quote.\n\nAn epigraph is an apposite (suitable, apt, or pertinent) short inscription, often a quotation or poem, at the beginning of a document or section.\n\nThe \"epigraph\" directive produces an \"epigraph\"-class block quote. For example, this input:\n\n.. epigraph:: No matter where you go, there you are. -- Buckaroo Banzai\n\nbecomes this document tree fragment:\n\n<block_quote classes=\"epigraph\"> <paragraph> No matter where you go, there you are. <attribution> Buckaroo Banzai\n\nHighlights\n\nDirective Type:\n\n\"highlights\"\n\nDoctree Element:\n\n<block_quote>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nInterpreted as the body of the block quote.\n\nHighlights summarize the main points of a document or section, often consisting of a list.\n\nThe \"highlights\" directive produces a \"highlights\"-class block quote. See Epigraph above for an analogous example.\n\nPull-Quote\n\nDirective Type:\n\n\"pull-quote\"\n\nDoctree Element:\n\n<block_quote>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nInterpreted as the body of the block quote.\n\nA pull-quote is a small selection of text \"pulled out and quoted\", typically in a larger typeface. Pull-quotes are used to attract attention, especially in long articles.\n\nThe \"pull-quote\" directive produces a \"pull-quote\"-class block quote. See Epigraph above for an analogous example.\n\nCompound Paragraph\n\nDirective Type:\n\n\"compound\"\n\nDoctree Element:\n\n<compound>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nclass, name\n\nDirective Content:\n\nInterpreted as body elements.\n\nThe \"compound\" directive is used to create a compound paragraph, which is a single logical paragraph containing multiple physical body elements such as simple paragraphs, literal blocks, tables, lists, etc., instead of directly containing text and inline elements. For example:\n\n.. compound:: The 'rm' command is very dangerous. If you are logged in as root and enter :: cd / rm -rf * you will erase the entire contents of your file system.\n\nIn the example above, a literal block is \"embedded\" within a sentence that begins in one physical paragraph and ends in another.\n\nCompound paragraphs are typically rendered as multiple distinct text blocks, with the possibility of variations to emphasize their logical unity:\n\nIf paragraphs are rendered with a first-line indent, only the first physical paragraph of a compound paragraph should have that indent -- second and further physical paragraphs should omit the indents;\n\nvertical spacing between physical elements may be reduced;\n\nand so on.\n\nContainer\n\nDirective Type:\n\n\"container\"\n\nDoctree Element:\n\n<container>\n\nDirective Arguments:\n\none or more, optional (class names)\n\nDirective Options:\n\nname\n\nDirective Content:\n\nInterpreted as body elements.\n\nThe \"container\" directive surrounds its contents (arbitrary body elements) with a generic block-level \"container\" element. Combined with the optional argument, this is an extension mechanism for users & applications. For example:\n\n.. container:: custom This paragraph might be rendered in a custom way.\n\nParsing the above results in the following pseudo-XML:\n\n<container classes=\"custom\"> <paragraph> This paragraph might be rendered in a custom way.\n\nThe \"container\" directive is the equivalent of HTML's <div> element. It may be used to group a sequence of elements for user- or application-specific purposes.\n\nDocument Parts\n\nTable of Contents\n\nDirective Type:\n\n\"contents\"\n\nDoctree Elements:\n\n<pending>, <topic>\n\nDirective Arguments:\n\none, optional: title\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nnone\n\nConfiguration Settings:\n\ntoc_backlinks, use_latex_toc, generate_oowriter_toc\n\nThe \"contents\" directive generates a table of contents (TOC) in a <topic> element. Topics, and therefore tables of contents, may occur anywhere a section or transition may occur. Body elements and topics may not contain tables of contents.\n\nHere's the directive in its simplest form:\n\n.. contents::\n\nLanguage-dependent boilerplate text will be used for the title. The English default title text is \"Contents\".\n\nAn explicit title may be specified:\n\n.. contents:: Table of Contents\n\nThe title may span lines, although it is not recommended:\n\n.. contents:: Here's a very long Table of Contents title\n\nDirective options may be specified using a field list:\n\n.. contents:: Table of Contents :depth: 2\n\nIf the default title is to be used, the options field list may begin on the same line as the directive marker:\n\n.. contents:: :depth: 2\n\nThe \"contents\" directive recognizes the common option class as well as\n\nbacklinks\"entry\" or \"top\" or \"none\"\n\nGenerate links from section headers back to the table of contents entries, the table of contents itself, or generate no back-links.\n\ndepthinteger\n\nThe number of section levels that are collected in the table of contents. The default is unlimited depth.\n\nlocalflag\n\nGenerate a local table of contents. Entries will only include subsections of the section in which the directive is given. If no explicit title is given, the table of contents will not be titled.\n\nAutomatic Section Numbering\n\nDirective Type:\n\n\"sectnum\" or \"section-numbering\" (synonyms)\n\nDoctree Elements:\n\n<pending>, <generated>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nnone\n\nConfiguration Setting:\n\nsectnum_xform\n\nThe \"sectnum\" (or \"section-numbering\") directive automatically numbers sections and subsections in a document (if not disabled by the --no-section-numbering command line option or the sectnum_xform configuration setting).\n\nSection numbers are of the \"multiple enumeration\" form, where each level has a number, separated by periods. For example, the title of section 1, subsection 2, subsubsection 3 would have \"1.2.3\" prefixed.\n\nThe directive does its work in two passes: the initial parse and a transform. During the initial parse, a <pending> element is generated which acts as a placeholder, storing any options internally. At a later stage in the processing, the <pending> element triggers a transform, which adds section numbers to titles. Section numbers are enclosed in a <generated> element, and titles have their auto attribute set to \"1\".\n\nThe \"sectnum\" directive recognizes the following options:\n\ndepthinteger\n\nThe number of section levels that are numbered by this directive. The default is unlimited depth.\n\nprefixtext\n\nAn arbitrary string that is prefixed to the automatically generated section numbers. It may be something like \"3.2.\", which will produce \"3.2.1\", \"3.2.2\", \"3.2.2.1\", and so on. Note that any separating punctuation (in the example, a period, \".\") must be explicitly provided. The default is no prefix.\n\nsuffixtext\n\nAn arbitrary string that is appended to the automatically generated section numbers. The default is no suffix.\n\nstartinteger\n\nThe value that will be used for the first section number. Combined with prefix, this may be used to force the right numbering for a document split over several source files. The default is 1.\n\nDirectives for Substitution Definitions\n\nThe directives introduced in this section may only be used in substitution definitions. They may not be used directly, in standalone context.\n\nInline Images\n\nThe image directive can be used both, stand-alone (to define block-level images) and in substitution definitions to define inline images.\n\nReplacement Text\n\nDirective Type:\n\n\"replace\"\n\nDoctree Element:\n\nText & inline elements\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nA single paragraph; may contain inline markup.\n\nThe \"replace\" directive is used to indicate replacement text for a substitution reference. It may be used within substitution definitions only. For example, this directive can be used to expand abbreviations:\n\n.. |reST| replace:: reStructuredText Yes, |reST| is a long word, so I can't blame anyone for wanting to abbreviate it.\n\nAs reStructuredText doesn't support nested inline markup, the only way to create a reference with styled text is to use substitutions with the \"replace\" directive:\n\nI recommend you try |Python|_. .. |Python| replace:: Python, *the* best language around .. _Python: https://www.python.org/\n\nUnicode Character Codes\n\nDirective Type:\n\n\"unicode\"\n\nDoctree Element:\n\nText\n\nDirective Arguments:\n\none or more, required (Unicode character codes, optional text, and comments)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nnone\n\nThe \"unicode\" directive converts Unicode character codes (numerical values) to characters, and may be used in substitution definitions only.\n\nThe arguments, separated by spaces, can be:\n\ncharacter codes as\n\ndecimal numbers or\n\nhexadecimal numbers, prefixed by 0x, x, \\x, U+, u, or \\u or as XML-style hexadecimal character entities, e.g. &#x1a2b;\n\ntext, which is used as-is.\n\nText following \" .. \" is a comment and is ignored. The spaces between the arguments are ignored and thus do not appear in the output. Hexadecimal codes are case-insensitive.\n\nFor example, the following text:\n\nCopyright |copy| 2003, |BogusMegaCorp (TM)| |---| all rights reserved. .. |copy| unicode:: 0xA9 .. copyright sign .. |BogusMegaCorp (TM)| unicode:: BogusMegaCorp U+2122 .. with trademark sign .. |---| unicode:: U+02014 .. em dash :trim:\n\nresults in:\n\nCopyright Â© 2003, BogusMegaCorpâ¢âall rights reserved.\n\nDocutils comes with a set of character substitution definitions in the reStructuredText Standard Definition Files.\n\nThe \"unicode\" directive recognizes the following options:\n\nltrimflag\n\nWhitespace to the left of the substitution reference is removed.\n\nrtrimflag\n\nWhitespace to the right of the substitution reference is removed.\n\ntrimflag\n\nEquivalent to ltrim plus rtrim; whitespace on both sides of the substitution reference is removed.\n\nMiscellaneous\n\nIncluding an External Document Fragment\n\nDirective Type:\n\n\"include\"\n\nDoctree Elements:\n\nDepend on data being included; <literal_block> with code or literal option.\n\nDirective Arguments:\n\none, required (path to the file to include)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nnone\n\nConfiguration Setting:\n\nfile_insertion_enabled\n\nThe \"include\" directive reads a text file. The directive argument is the path to the file to be included, relative to the document containing the directive. Unless the options literal, code, or parser are given, the file is parsed in the current document's context at the point of the directive. For example:\n\nThis first example will be parsed at the document level, and can thus contain any construct, including section headers. .. include:: inclusion.rst Back in the main document. This second example will be parsed in a block quote context. Therefore it may only contain body elements. It may not contain section headers. .. include:: inclusion.rst\n\nIf an included document fragment contains section structure, the title adornments must match those of the master document.\n\nStandard data files intended for inclusion in reStructuredText documents are distributed with the Docutils source code, located in the \"docutils\" package in the docutils/parsers/rst/include directory. To access these files, use the special syntax for standard \"include\" data files, angle brackets around the file name:\n\n.. include:: <isonum.txt>\n\nThe current set of standard \"include\" data files consists of sets of substitution definitions. See reStructuredText Standard Definition Files for details.\n\nThe \"include\" directive recognizes the following options:\n\ncodetext (formal language, optional)\n\nThe argument and the included content are passed to the code directive (useful for program listings).\n\nencodingencoding\n\nThe text encoding of the external file. Defaults to the document's input_encoding.\n\nend-beforetext\n\nOnly the content before the first occurrence of the specified text in the external data file (but after any start-after text) will be included.\n\nend-lineinteger\n\nOnly the content up to (but excluding) this line will be included.\n\nliteralflag\n\nThe entire included text is inserted into the document as a single literal block.\n\nnumber-linesinteger (start line number, optional)\n\nPrecede every included line with a line number. The optional argument is the number of the first line (default 1). Works only with code or literal.\n\nparsertext (parser name)\n\nParse the included content with the specified parser. See the \"parser\" configuration setting for available parsers.\n\n(New in Docutils 0.17)\n\nstart-aftertext\n\nOnly the content after the first occurrence of the specified text in the external data file will be included.\n\nstart-lineinteger\n\nOnly the content starting from this line will be included. (As usual in Python, the first line has index 0 and negative values count from the end.)\n\ntab-widthinteger\n\nNumber of spaces for hard tab expansion. Must be a positive integer, except for literal inclusions and code, where a negative value prevents expansion of hard tabs. Defaults to the tab_width configuration setting.\n\nWith code or literal the common options class and name are recognized as well.\n\nCombining start-line/end-line and start-after/end-before is possible. The text markers will be searched in the specified lines (further limiting the included content).\n\nRaw Data Pass-Through\n\nDirective Type:\n\n\"raw\"\n\nDoctree Element:\n\n<raw>\n\nDirective Arguments:\n\none or more, required (output format types)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\nStored verbatim, uninterpreted. None (empty) if a file or url option given.\n\nConfiguration Settings:\n\nraw_enabled, file_insertion_enabled\n\nThe \"raw\" directive indicates non-reStructuredText data that is to be passed untouched to the Writer. The names of the output formats are given in the directive arguments. The interpretation of the raw data is up to the Writer. A Writer may ignore any raw output not matching its format.\n\nFor example, the following input would be passed untouched by an HTML writer:\n\n.. raw:: html <hr width=50 size=10>\n\nA LaTeX Writer could insert the following raw content into its output stream:\n\n.. raw:: latex \\setlength{\\parindent}{0pt}\n\nRaw data can also be read from an external file, specified in the file or url directive option. In this case, the content block must be empty. For example:\n\n.. raw:: html :file: inclusion.html\n\nInline equivalents of the \"raw\" directive can be defined via custom interpreted text roles derived from the \"raw\" role.\n\nThe \"raw\" directive recognizes the common option class as well as\n\nencodingencoding\n\nThe text encoding of the external raw data (with file or url). Defaults to the main document's input_encoding.\n\nfilepath\n\nThe local filesystem path of a raw data file to be included.\n\nurlURI\n\nA URI reference to a raw data file to be included.\n\nClass\n\nDirective Type:\n\n\"class\"\n\nDoctree Element:\n\n<pending>\n\nDirective Arguments:\n\none or more, required (class names / attribute values)\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nOptional. If present, it is interpreted as body elements.\n\nThe \"class\" directive sets the classes attribute value on its content or on the first immediately following non-comment element . The directive argument consists of one or more space-separated class names. The names are transformed to conform to the regular expression [a-z](-?[a-z0-9]+)* (see Identifier Normalization below).\n\nExamples:\n\n.. class:: special This is a \"special\" paragraph. .. class:: exceptional remarkable An Exceptional Section ====================== This is an ordinary paragraph. .. class:: multiple First paragraph. Second paragraph.\n\nThe text above is parsed and transformed into this doctree fragment:\n\n<paragraph classes=\"special\"> This is a \"special\" paragraph. <section classes=\"exceptional remarkable\"> <title> An Exceptional Section <paragraph> This is an ordinary paragraph. <paragraph classes=\"multiple\"> First paragraph. <paragraph classes=\"multiple\"> Second paragraph.\n\nIdentifier Normalization\n\nDocutils normalizes class names and identifiers to conform to the regular expression \"[a-z](-?[a-z0-9]+)*\" by converting\n\nalphabetic characters to lowercase,\n\naccented characters to the base character,\n\nnon-alphanumeric characters to hyphens,\n\nconsecutive hyphens into one hyphen\n\nand stripping\n\nleading hyphens and number characters, and\n\ntrailing hyphens.\n\nFor example \"Rot.Gelb&GrÃ¼n:+2008\" becomes \"rot-gelb-grun-2008\" and \"1000_Steps!\" becomes \"steps\".\n\nCustom Interpreted Text Roles\n\nDirective Type:\n\n\"role\"\n\nDoctree Element:\n\nnone; affects subsequent parsing\n\nDirective Arguments:\n\ntwo; one required (new role name), one optional (base role name, in parentheses)\n\nDirective Options:\n\nsee below\n\nDirective Content:\n\ndepends on base role.\n\nThe \"role\" directive dynamically creates a custom interpreted text role and registers it with the parser. This means that after declaring a role like this:\n\n.. role:: custom\n\nthe document may use the new \"custom\" role:\n\nAn example of using :custom:`interpreted text`\n\nThis will be parsed into the following document tree fragment:\n\n<paragraph> An example of using <inline classes=\"custom\"> interpreted text\n\nRole names are case insensitive and must conform to the rules of simple reference names (but do not share a namespace with hyperlinks, footnotes, and citations).\n\nThe new role may be based on an existing role, specified as a second argument in parentheses (whitespace optional):\n\n.. role:: custom(emphasis) :custom:`text`\n\nThe parsed result is as follows:\n\n<paragraph> <emphasis classes=\"custom\"> text\n\nA special case is the \"raw\" role: derived roles enable inline raw data pass-through, e.g.:\n\n.. role:: raw-role(raw) :format: html latex :raw-role:`raw text`\n\nIf no base role is explicitly specified, a generic custom role is automatically used. Subsequent interpreted text will produce an <inline> element with a classes attribute, as in the first example above.\n\nDepending on the base role, the following options may be recognized by the \"role\" directive:\n\nclassspace separated list of class names\n\nSet the classes attribute value on the element produced when the custom interpreted text role is used. Default value is the directive argument (role name).\n\nFor example\n\n.. role:: custom :class: special :custom:`interpreted text`\n\nis parsed as\n\n<paragraph> <inline classes=\"special\"> interpreted text\n\nThe \"class\" option is recognized with all interpreted text roles.\n\nformatspace-separated list of output format names (writer names)\n\nSpecify the generated <raw> element's format attribute.\n\nOnly recognized with the \"raw\" base role.\n\nlanguagetext\n\nName of a formal language, passed to Pygments for syntax highlighting. See supported languages and markup formats for recognized values.\n\nOnly recognized with the \"code\" base role.\n\nSetting the Default Interpreted Text Role\n\nDirective Type:\n\n\"default-role\"\n\nDoctree Element:\n\nnone; affects subsequent parsing\n\nDirective Arguments:\n\none, optional (new default role name)\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nnone\n\nThe \"default-role\" directive sets the default interpreted text role, the role that is used for interpreted text without an explicit role. For example, after setting the default role like this:\n\n.. default-role:: subscript\n\nany subsequent use of implicit-role interpreted text in the document will use the \"subscript\" role:\n\nAn example of a `default` role.\n\nThis will be parsed into the following document tree fragment:\n\n<paragraph> An example of a <subscript> default role.\n\nCustom roles may be used (see the \"role\" directive above), but it must have been declared in a document before it can be set as the default role. See the reStructuredText Interpreted Text Roles document for details of built-in roles.\n\nThe directive may be used without an argument to restore the initial default interpreted text role, which is application-dependent. The initial default interpreted text role of the standard reStructuredText parser is \"title-reference\".\n\nMetadata\n\nDirective Type:\n\n\"meta\"\n\nDoctree Element:\n\n<meta>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nMust contain a flat field list.\n\nThe \"meta\" directive is used to specify metadata to be stored in, e.g., HTML meta elements or as ODT file properties. The LaTeX writer passes it to the pdfinfo option of the hyperref package. If an output format does not support \"invisible\" metadata, content is silently dropped by the writer.\n\nWithin the directive block, a flat field list provides the syntax for metadata. The field name becomes the contents of the \"name\" attribute of the META tag, and the field body (interpreted as a single string without inline markup) becomes the contents of the \"content\" attribute. For example:\n\n.. meta:: :description: The reStructuredText plaintext markup language :keywords: plaintext, markup language\n\nThis would be converted to the following HTML:\n\n<meta name=\"description\" content=\"The reStructuredText plaintext markup language\"> <meta name=\"keywords\" content=\"plaintext, markup language\">\n\nSupport for other META attributes (\"http-equiv\", \"scheme\", \"lang\", \"dir\") are provided through field arguments, which must be of the form \"attr=value\":\n\n.. meta:: :description lang=en: An amusing story :description lang=fr: Une histoire amusante\n\nAnd their HTML equivalents:\n\n<meta name=\"description\" lang=\"en\" content=\"An amusing story\"> <meta name=\"description\" lang=\"fr\" content=\"Une histoire amusante\">\n\nSome META tags use an \"http-equiv\" attribute instead of the \"name\" attribute. To specify \"http-equiv\" META tags, simply omit the name:\n\n.. meta:: :http-equiv=Content-Type: text/html; charset=ISO-8859-1\n\nHTML equivalent:\n\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\nMetadata Document Title\n\nDirective Type:\n\n\"title\"\n\nDoctree Element:\n\nsets the <document> element's title attribute)\n\nDirective Arguments:\n\none, required (the title text)\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nnone\n\nConfiguration Setting:\n\ntitle\n\nThe \"title\" directive specifies the document title as metadata, which does not become part of the document body. It overrides the document-supplied document title and the \"title\" configuration setting.\n\nRestructuredtext-Test-Directive\n\nDirective Type:\n\n\"restructuredtext-test-directive\"\n\nDoctree Element:\n\n<system_message>\n\nDirective Arguments:\n\nnone\n\nDirective Options:\n\nnone\n\nDirective Content:\n\nInterpreted as a literal block.\n\nThis directive is provided for test purposes only. (Nobody is expected to type in a name that long!) It is converted into a level-1 (info) system message showing the directive data, possibly followed by a literal block containing the rest of the directive block."
    }
}