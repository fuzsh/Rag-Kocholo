{
    "id": "dbpedia_1891_1",
    "rank": 7,
    "data": {
        "url": "https://pypi.org/project/pycountry/",
        "read_more_link": "",
        "language": "en",
        "title": "pycountry",
        "top_image": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "meta_img": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "images": [
            "https://pypi.org/static/images/logo-small.8998e9d1.svg",
            "https://pypi-camo.freetls.fastly.net/cdc9f1a1f20f0139ae1ef8834b004dbba141c5f4/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f34333562373866316131313135633865626364303032313861343030363563343f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/fdcb0f29e08ab131b18a79717119bbaca13d0eab/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33373263623635386465353236373635613265313437646661383438303162663f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/a62c6ffcbded3f86922ba82fda8dfda58e5b4640/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f31343461303335356363353461326266623863336231313261346665633162643f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/cdc9f1a1f20f0139ae1ef8834b004dbba141c5f4/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f34333562373866316131313135633865626364303032313861343030363563343f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/fdcb0f29e08ab131b18a79717119bbaca13d0eab/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33373263623635386465353236373635613265313437646661383438303162663f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/a62c6ffcbded3f86922ba82fda8dfda58e5b4640/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f31343461303335356363353461326266623863336231313261346665633162643f73697a653d3530",
            "https://pypi.org/static/images/blue-cube.572a5bfb.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67",
            "https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67",
            "https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67",
            "https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67",
            "https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67",
            "https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-01T04:11:49+00:00",
        "summary": "",
        "meta_description": "ISO country, subdivision, language, currency and script definitions and their translations",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicon.35549fe8.ico",
        "meta_site_name": "PyPI",
        "canonical_link": "https://pypi.org/project/pycountry/",
        "text": "pycountry provides the ISO databases for the standards:\n\n639-3 Languages\n\n3166 Codes for representation of names of countries and their subdivisions\n\n3166-1 Countries\n\n3166-3 Deleted countries\n\n3166-2 Subdivisions of countries\n\n4217 Currencies\n\n15924 Scripts\n\nThe package includes a copy from Debian’s pkg-isocodes and makes the data accessible through a Python API.\n\nTranslation files for the various strings are included as well.\n\nDonations / Monetary Support\n\nThis is a small project that I maintain in my personal time. I am not interested in personal financial gain. However, if you would like to support the project then I would love if you would donate to Feminist Frequency instead. Also, let the world know you did so, so that others can follow your path.\n\nContributions\n\nThe code lives in a git repository on GitHub, and issues must be reported in there as well.\n\nCountries (ISO 3166-1)\n\nCountries are accessible through a database object that is already configured upon import of pycountry and works as an iterable:\n\n>>> import pycountry>>> len(pycountry.countries)249 >>> list(pycountry.countries)[0]Country(alpha_2='AF', alpha_3='AFG', name='Afghanistan', numeric='004', official_name='Islamic Republic of Afghanistan')\n\nSpecific countries can be looked up by their various codes and provide the information included in the standard as attributes:\n\n>>> germany = pycountry.countries.get(alpha_2='DE')>>> germanyCountry(alpha_2='DE', alpha_3='DEU', name='Germany', numeric='276', official_name='Federal Republic of Germany') >>> germany.alpha_2'DE' >>> germany.alpha_3'DEU' >>> germany.numeric'276' >>> germany.name'Germany' >>> germany.official_name'Federal Republic of Germany'\n\nThere’s also a “fuzzy” search to help people discover “proper” countries for names that might only actually be subdivisions. The fuzziness also includes normalizing unicode accents. There’s also a bit of prioritization included to prefer matches on country names before subdivision names and have countries with more matches be listed before ones with fewer matches:\n\n>>> pycountry.countries.search_fuzzy('England')[Country(alpha_2='GB', alpha_3='GBR', name='United Kingdom', numeric='826', official_name='United Kingdom of Great Britain and Northern Ireland')] >>> pycountry.countries.search_fuzzy('Cote')[Country(alpha_2='CI', alpha_3='CIV', name=\"Côte d'Ivoire\", numeric='384', official_name=\"Republic of Côte d'Ivoire\"), Country(alpha_2='FR', alpha_3='FRA', name='France', numeric='250', official_name='French Republic'), Country(alpha_2='HN', alpha_3='HND', name='Honduras', numeric='340', official_name='Republic of Honduras')]\n\nAttributes for the country class can be accessed using the __getattr__ method. If the requested attribute is a key for the country class, it will return the corresponding value. In the special cases of missing ‘common_name’ or ‘official_name’ attributes, __getattr__ will return ‘name’. Here are some examples:\n\n>>> aland = pycountry.countries.get(alpha_2='AX')>>> print(aland)Country(alpha_2='AX', alpha_3='ALA', flag='🇦🇽', name='Åland Islands', numeric='248') >>> aland.common_nameUserWarning: Country's common_name not found. Country name provided instead. warnings.warn(warning_message, UserWarning) 'Åland Islands' >>> aland.official_nameCountry's official_name not found. Country name provided instead. warnings.warn(warning_message, UserWarning) 'Åland Islands' >>> aland.flag'🇦🇽' >>> aland.foo # Raises AttributeError\n\nHistoric Countries (ISO 3166-3)\n\nThe historic_countries database contains former countries that have been removed from the standard and are now included in ISO 3166-3, excluding existing ones:\n\n>>> ussr = pycountry.historic_countries.get(alpha_3='SUN')>>> ussrCountry(alpha_3='SUN', alpha_4='SUHH', withdrawal_date='1992-08-30', name='USSR, Union of Soviet Socialist Republics', numeric='810') >>> ussr.alpha_4'SUHH' >>> ussr.alpha_3'SUN' >>> ussr.name'USSR, Union of Soviet Socialist Republics' >>> ussr.withdrawal_date'1992-08-30'\n\nCountry subdivisions (ISO 3166-2)\n\nThe country subdivisions are a little more complex than the countries itself because they provide a nested and typed structure.\n\nAll subdivisons can be accessed directly:\n\n>>> len(pycountry.subdivisions)4847 >>> list(pycountry.subdivisions)[0]Subdivision(code='AD-07', country_code='AD', name='Andorra la Vella', parent_code=None, type='Parish')\n\nSubdivisions can be accessed using their unique code. The resulting object will provide at least their code, name and type:\n\n>>> de_st = pycountry.subdivisions.get(code='DE-ST')>>> de_st.code'DE-ST' >>> de_st.name'Sachsen-Anhalt' >>> de_st.type'State' >>> de_st.countryCountry(alpha_2='DE', alpha_3='DEU', name='Germany', numeric='276', official_name='Federal Republic of Germany')\n\nSome subdivisions specify another subdivision as a parent:\n\n>>> al_br = pycountry.subdivisions.get(code='AL-BU')>>> al_br.code'AL-BU' >>> al_br.name'Bulqiz\\xeb' >>> al_br.type'District' >>> al_br.parent_code'AL-09' >>> al_br.parentSubdivision(code='AL-09', country_code='AL', name='Dib\\xebr', parent_code=None, type='County') >>> al_br.parent.name'Dib\\xebr'\n\nThe divisions of a single country can be queried using the country_code index:\n\n>>> len(pycountry.subdivisions.get(country_code='DE'))16 >>> len(pycountry.subdivisions.get(country_code='US'))57\n\nSimilar to countries, the search_fuzzy method has been implemented for subdivisions to facilitate finding relevant subdivision entries. This method includes unicode normalization for accents and prioritizes matches on subdivision names. The search algorithm is designed to return more relevant matches first:\n\nThis method is especially useful for cases where the exact name or code of the subdivision is not known.\n\n>>> pycountry.subdivisions.search_fuzzy('York') [Subdivision(code='GB-YOR', country_code='GB', name='York', parent='GB-ENG', parent_code='GB-GB-ENG', type='Unitary authority') Subdivision(code='GB-ERY', country_code='GB', name='East Riding of Yorkshire', parent='GB-ENG', parent_code='GB-GB-ENG', type='Unitary authority') Subdivision(code='GB-NYK', country_code='GB', name='North Yorkshire', parent='GB-ENG', parent_code='GB-GB-ENG', type='Two-tier county') Subdivision(code='US-NY', country_code='US', name='New York', parent_code=None, type='State')]\n\nScripts (ISO 15924)\n\nScripts are available from a database similar to the countries:\n\n>>> len(pycountry.scripts)169 >>> list(pycountry.scripts)[0]Script(alpha_4='Afak', name='Afaka', numeric='439') >>> latin = pycountry.scripts.get(name='Latin')>>> latinScript(alpha_4='Latn', name='Latin', numeric='215') >>> latin.alpha4'Latn' >>> latin.name'Latin' >>> latin.numeric'215'\n\nCurrencies (ISO 4217)\n\nThe currencies database is, again, similar to the ones before:\n\n>>> len(pycountry.currencies)182 >>> list(pycountry.currencies)[0]Currency(alpha_3='AED', name='UAE Dirham', numeric='784') >>> argentine_peso = pycountry.currencies.get(alpha_3='ARS')>>> argentine_pesoCurrency(alpha_3='ARS', name='Argentine Peso', numeric='032') >>> argentine_peso.alpha_3'ARS' >>> argentine_peso.name'Argentine Peso' >>> argentine_peso.numeric'032'\n\nLanguages (ISO 639-3)\n\nThe languages database is similar too:\n\n>>> len(pycountry.languages)7874 >>> list(pycountry.languages)[0]Language(alpha_3='aaa', name='Ghotuo', scope='I', type='L') >>> aragonese = pycountry.languages.get(alpha_2='an')>>> aragonese.alpha_2'an' >>> aragonese.alpha_3'arg' >>> aragonese.name'Aragonese' >>> bengali = pycountry.languages.get(alpha_2='bn')>>> bengali.name'Bengali' >>> bengali.common_name'Bangla'\n\nLocales\n\nLocales are available in the pycountry.LOCALES_DIR subdirectory of this package. The translation domains are called isoXXX according to the standard they provide translations for. The directory is structured in a way compatible to Python’s gettext module.\n\nHere is an example translating language names:\n\n>>> import gettext>>> german = gettext.translation('iso3166-1', pycountry.LOCALES_DIR,... languages=['de'])>>> german.install()>>> _('Germany')'Deutschland'\n\nLookups\n\nFor each database (countries, languages, scripts, etc.), you can also look up entities case insensitively without knowing which key the value may match. For example:\n\n>>> pycountry.countries.lookup('de')<pycountry.db.Country object at 0x...>\n\nThe search ends with the first match, which is returned.\n\nCustom Countries\n\nWhile pycountry will not be adding non-ISO values to its standard library, you can add or remove entries at runtime to fit your needs.\n\nAdd a non-ISO country:\n\n>>> pycountry.countries.add_entry(alpha_2=\"XK\", alpha_3=\"XXK\", name=\"Kosovo\", numeric=\"926\")\n\nRemove a country from a database:\n\n>>> pycountry.countries.remove_entry(alpha_2=\"XK\")"
    }
}