{
    "id": "dbpedia_1547_2",
    "rank": 45,
    "data": {
        "url": "https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps",
        "read_more_link": "",
        "language": "en",
        "title": "Golden SAML: Newly Discovered Attack Technique Forges Authentication to Cloud Apps",
        "top_image": "https://www.cyberark.com/wp-content/uploads/2017/11/Golden-SAML-image.png",
        "meta_img": "https://www.cyberark.com/wp-content/uploads/2017/11/Golden-SAML-image.png",
        "images": [
            "https://cihost.uberflip.com/cyberArk/OB-8671/build/assets/logo.svg",
            "https://www.cyberark.com/wp-content/uploads/2024/05/cora-ai-nav.png",
            "https://www.cyberark.com/wp-content/uploads/2024/05/cora-ai-nav.png",
            "https://www.cyberark.com/wp-content/uploads/2020/12/Icons-Globe@2x.png",
            "https://content.cdntwrk.com/img/hubs/ajax-loader-white-2x.gif?v=19a554b579c4",
            "https://content.cdntwrk.com/img/hubs/chevron-down-64x64.png?v=78668873251b",
            "https://www.cyberark.com/wp-content/uploads/2017/11/Golden-SAML-image.png",
            "https://www.cyberark.com/wp-content/uploads/2017/11/Image-1.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/SAML-2.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/SAML-2-b.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/ADFS-Public-Certificate.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/IdP-Name.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/Role-name.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/PS-aws.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/PS-python.jpg",
            "https://www.cyberark.com/wp-content/uploads/2017/11/operation-of-tool.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2017%2F12%2FPredictions-e1513000344330.jpg&size=1&version=1718922359&sig=25183725287a8f589d78c190845ce651&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2017%2F10%2Fplugin-e1508789670134.jpg&size=1&version=1718922359&sig=3d7223731d2f233e7c32519e60e21179&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F08%2Fai-treason.png&size=1&version=1722611229&sig=0559243b71a9cb43b608bfcc03841d87&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F07%2Fbrief-history.jpg&size=1&version=1722610663&sig=79d532411a28a4f95af26421714a1ef9&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F07%2Fdouble-dipping-hero.jpg&size=1&version=1721914638&sig=3cdd00ffc171c6df7bbb7f6a3f9e756f&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F07%2Flocal-privilege-escalation-vulnerability.png&size=1&version=1723021942&sig=4fae45bfb4adf70489250e22793e701c&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F07%2Fbypass-golang.jpg&size=1&version=1723019318&sig=5a3e1e48bbdb35e5985dfd5119f8eb85&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F07%2Fcurrentstate-ofobrowser-cookies.jpg&size=1&version=1721051905&sig=7743d5e8711e3d4a9900b3d1b7d496cd&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F06%2Fkeycloak-blog-hero.jpg&size=1&version=1720633182&sig=446bfb24fb8e212122fde96e0d8b7af6&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F05%2Fcreepy-bed.png&size=1&version=1719845022&sig=6530dded9453b2f389f8885cf04d80a0&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F04%2Flinux-with-syzkaller.png&size=1&version=1723019440&sig=fc031b634965a4a77cea69f70ff2c5f4&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F03%2Fhero-labs-crumbled-security.jpg&size=1&version=1719543178&sig=eab423d3606b6a46f247e40b15bc3bc0&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F02%2Fcosmos-millions-from-the-blockchain.png&size=1&version=1718922360&sig=f935bb8b13cf3c88fd05cea3350b8e96&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F07%2Fdeep-dive-into-penetration-testing.jpg&size=1&version=1719516434&sig=570c075b3b5f08e0cf019cb834b95c03&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2024%2F01%2Fransomware-playing-a-broken-game.png&size=1&version=1719540223&sig=715517f3d6f6504726033aea855e10a8&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F12%2Fsafenet-banner.jpg&size=1&version=1718922360&sig=35b3e26671c9eb0ae5c3789bac60eac1&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F10%2Ffuzzer_v.png&size=1&version=1718922360&sig=1c809e82f72d641941ffd6b01d025980&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F08%2Fnvme.jpg&size=1&version=1718922360&sig=9c537939ec4791ea60bcda14e758b8b2&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F08%2Ffantastic-rootkits.jpg&size=1&version=1718922360&sig=775691fe9dbc60caf5bfad4fd64a4086&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F07%2Fdeep-dive-into-penetration-testing.jpg&size=1&version=1718922360&sig=38e5c710cb733305b6971d990596056f&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F07%2Fdeep-dive-into-penetration-testing.jpg&size=1&version=1718922360&sig=38e5c710cb733305b6971d990596056f&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/mediaproxy?url=https%3A%2F%2Fwww.cyberark.com%2Fwp-content%2Fuploads%2F2023%2F05%2Fhow-to-write-a-poc-for-an-uninitialized-heade-image.jpg&size=1&version=1718922360&sig=d8da6504185672ae44ca609f8bd4ab90&default=hubs%2Ftilebg-blogs.jpg",
            "https://content.cdntwrk.com/img/hubs/ajax-loader-white-2x.gif?v=19a554b579c4",
            "https://www.cyberark.com/wp-content/uploads/2021/01/External-darkblue.svg",
            "https://www.cyberark.com/wp-content/uploads/2021/01/External-darkblue.svg",
            "https://www.cyberark.com/wp-content/uploads/2021/01/External-darkblue.svg",
            "https://www.cyberark.com/wp-content/uploads/2021/01/cyberark-logo-dark.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Shaked Reiner"
        ],
        "publish_date": "2017-11-21T00:00:00",
        "summary": "",
        "meta_description": "In this blog post, we introduce a new attack vector discovered by CyberArk Labs and dubbed “golden SAML.” The vector enables an attacker to create a golden SAML, which is basically a forged SAML...",
        "meta_lang": "en",
        "meta_favicon": "https://content.cdntwrk.com/files/aHViPTEwODU0MCZjbWQ9ZmF2aWNvbiZ2ZXJzaW9uPTE3MTg3NzAxMDMmZXh0PXBuZyZzaXplPTU3JnNpZz1iMzNkNGZiYmUzNjhmZDM0YTk3YjIwNDIxMWRjNDNiZQ%253D%253D/favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps",
        "text": "In this blog post, we introduce a new attack vector discovered by CyberArk Labs and dubbed “golden SAML.” The vector enables an attacker to create a golden SAML, which is basically a forged SAML “authentication object,” and authenticate across every service that uses SAML 2.0 protocol as an SSO mechanism.\n\nIn a golden SAML attack, attackers can gain access to any application that supports SAML authentication (e.g. Azure, AWS, vSphere, etc.) with any privileges they desire and be any user on the targeted application (even one that is non-existent in the application in some cases).\n\nWe are releasing a new tool that implements this attack – shimit.\n\nIn a time when more and more enterprise infrastructure is ported to the cloud, the Active Directory (AD) is no longer the highest authority for authenticating and authorizing users. AD can now be part of something bigger – a federation.\n\nA federation enables trust between different environments otherwise not related, like Microsoft AD, Azure, AWS and many others. This trust allows a user in an AD, for example, to be able to enjoy SSO benefits to all the trusted environments in such federation. Talking about a federation, an attacker will no longer suffice in dominating the domain controller of his victim.\n\nThe golden SAML name may remind you of another notorious attack known as golden ticket, which was introduced by Benjamin Delpy who is known for his famous attack tool called Mimikatz. The name resemblance is intended, since the attack nature is rather similar. Golden SAML introduces to a federation the advantages that golden ticket offers in a Kerberos environment – from gaining any type of access to stealthily maintaining persistency.\n\nSAML Explained\n\nFor those of you who aren’t familiar with the SAML 2.0 protocol, we’ll take a minute to explain how it works.\n\nThe SAML protocol, or Security Assertion Markup Language, is an open standard for exchanging authentication and authorization data between parties, in particular, between an identity provider and a service provider. Beyond what its name suggests, SAML is each of the following:\n\nAn XML-based markup language (for assertions, etc.)\n\nA set of XML-based protocol messages\n\nA set of protocol message bindings\n\nA set of profiles (utilizing all of the above)\n\nThe single most important use case that SAML addresses is web browser single sign-on (SSO). [Wikipedia]\n\nLet’s take a look at figure 1 in order to understand how this protocol works.\n\nFigure 1- SAML Authentication\n\nFirst the user tries to access an application (also known as the SP i.e. Service Provider), that might be an AWS console, vSphere web client, etc. Depending on the implementation, the client may go directly to the IdP first, and skip the first step in this diagram.\n\nThe application then detects the IdP (i.e. Identity Provider, could be AD FS, Okta, etc.) to authenticate the user, generates a SAML AuthnRequest and redirects the client to the IdP.\n\nThe IdP authenticates the user, creates a SAMLResponse and posts it to the SP via the user.\n\nSP checks the SAMLResponse and logs the user in. The SP must have a trust relationship with the IdP. The user can now use the service.\n\nSAML Response Structure\n\nTalking about a golden SAML attack, the part that interests us the most is #3, since this is the part we are going to replicate as an attacker performing this kind of attack. To be able to perform this correctly, let’s have a look at the request that is sent in this part – SAMLResponse. The SAMLResponse object is what the IdP sends to the SP, and this is actually the data that makes the SP identify and authenticate the user (similar to a TGT generated by a KDC in Kerberos). The general structure of a SAMLResponse in SAML 2.0 is as follows (written in purple are all the dynamic parameters of the structure):\n\nDepending on the specific IdP implementation, the response assertion may be either signed or encrypted by the private key of the IdP. This way, the SP can verify that the SAMLResponse was indeed created by the trusted IdP.\n\nSimilar to a golden ticket attack, if we have the key that signs the object which holds the user’s identity and permissions (KRBTGT for golden ticket and token-signing private key for golden SAML), we can then forge such an “authentication object” (TGT or SAMLResponse) and impersonate any user to gain unauthorized access to the SP. Roger Grimes defined a golden ticket attack back in 2014 not as a Kerberos tickets forging attack, but as a Kerberos Key Distribution Center (KDC) forging attack. Likewise, a golden SAML attack can also be defined as an IdP forging attack.\n\nIn this attack, an attacker can control every aspect of the SAMLResponse object (e.g. username, permission set, validity period and more). In addition, golden SAMLs have the following advantages:\n\nThey can be generated from practically anywhere. You don’t need to be a part of a domain, federation of any other environment you’re dealing with\n\nThey are effective even when 2FA is enabled\n\nThe token-signing private key is not renewed automatically\n\nChanging a user’s password won’t affect the generated SAML\n\nAWS + AD FS + Golden SAML = ♥ (case study)\n\nLet’s say you are an attacker. You have compromised your target’s domain, and you are now trying to figure out how to continue your hunt for the final goal. What’s next? One option that is now available for you is using a golden SAML to further compromise assets of your target.\n\nActive Directory Federation Services (AD FS) is a Microsoft standards-based domain service that allows the secure sharing of identity information between trusted business partners (federation). It is basically a service in a domain that provides domain user identities to other service providers within a federation.\n\nAssuming AWS trusts the domain which you’ve compromised (in a federation), you can then take advantage of this attack and practically gain any permissions in the cloud environment. To perform this attack, you’ll need the private key that signs the SAML objects (similarly to the need for the KRBTGT in a golden ticket). For this private key, you don’t need a domain admin access, you’ll only need the AD FS user account.\n\nHere’s a list of the requirements for performing a golden SAML attack:\n\nToken-signing private key\n\nIdP public certificate\n\nIdP name\n\nRole name (role to assume)\n\nDomain\\username\n\nRole session name in AWS\n\nAmazon account ID\n\nThe mandatory requirements are highlighted in purple. For the other non-mandatory fields, you can enter whatever you like.\n\nHow do you get these requirements? For the private key you’ll need access to the AD FS account, and from its personal store you’ll need to export the private key (export can be done with tools like mimikatz). For the other requirements you can import the powershell snapin Microsoft.Adfs.Powershell and use it as follows (you have to be running as the ADFS user):\n\nADFS Public Certificate\n\nIdP Name\n\nRole Name\n\nOnce we have what we need, we can jump straight into the attack. First, let’s check if we have any valid AWS credentials on our machine.\n\nUnsurprisingly, we have no credentials, but that’s about to change. Now, let’s use shimit to generate and sign a SAMLResponse.\n\nThe operation of the tool is as follows:\n\nFigure 2– Golden SAML with shimit.py\n\nGenerate an assertion matching the parameters provided by the user. In this example, we provided the username, Amazon account ID and the desired roles (the first one will be assumed).\n\nSign the assertion with the private key file, also specified by the user.\n\nOpen a connection to the SP, then calling a specific AWS API AssumeRoleWithSAML.\n\nGet an access key and a session token from AWS STS (the service that supplies temporary credentials for federated users).\n\nApply this session to the command line environment (using aws-cli environment variables) for the user to use with AWS cli.\n\nPerforming a golden SAML attack in this environment has a limitation. Even though we can generate a SAMLResponse that will be valid for any time period we choose (using the –SamlValidity flag), AWS specifically checks whether the response was generated more than five minutes ago, and if so, it won’t authenticate the user. This check is performed in the server on top of a normal test that verifies that the response is not expired.\n\nSummary\n\nThis attack doesn’t rely on a vulnerability in SAML 2.0. It’s not a vulnerability in AWS/ADFS, nor in any other service or identity provider.\n\nGolden ticket is not treated as a vulnerability because an attacker has to have domain admin access in order to perform it. That’s why it’s not being addressed by the appropriate vendors. The fact of the matter is, attackers are still able to gain this type of access (domain admin), and they are still using golden tickets to maintain stealthily persistent for even years in their target’s domain.\n\nGolden SAML is rather similar. It’s not a vulnerability per se, but it gives attackers the ability to gain unauthorized access to any service in a federation (assuming it uses SAML, of course) with any privileges and to stay persistent in this environment in a stealthy manner.\n\nAs for the defenders, we know that if this attack is performed correctly, it will be extremely difficult to detect in your network. Moreover, according to the ‘assume breach’ paradigm, attackers will probably target the most valuable assets in the organization (DC, AD FS or any other IdP). That’s why we recommend better monitoring and managing access for the AD FS account (for the environment mentioned here), and if possible, auto-rollover the signing private key periodically, making it difficult for the attackers.\n\nIn addition, implementing an endpoint security solution, focused around privilege management, like CyberArk’s Endpoint Privilege Manager, will be extremely beneficial in blocking attackers from getting their hands on important assets like the token-signing certificate in the first place.\n\nReferences:"
    }
}