{
    "id": "dbpedia_1547_1",
    "rank": 81,
    "data": {
        "url": "https://docs.daml.com/canton/usermanual/monitoring.html",
        "read_more_link": "",
        "language": "en",
        "title": "Monitoring Best Practices — Daml SDK 2.9.3 documentation",
        "top_image": "https://docs.daml.com/_static/images/daml-logo-mark-light.svg",
        "meta_img": "https://docs.daml.com/_static/images/daml-logo-mark-light.svg",
        "images": [
            "https://docs.daml.com/_static/images/Daml_Logo_Blue.svg",
            "https://docs.daml.com/_static/images/Search.svg",
            "https://docs.daml.com/_images/noc_dashboard.png",
            "https://docs.daml.com/_images/ping-trace.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../../_static/images/daml-logo-mark-light.svg",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "TracesÂ¶\n\nTraces contain operations that are each represented by a span. A trace is a directed acyclic graph (DAG) of spans, where the edges between spans are defined as parent/child relationships (the definitions come from the Opentelemetry glossary).\n\nCanton reports several types of traces. One example: every Canton console command that interacts with the Admin API starts a trace whose initial span last for the entire duration of the command, including the GRPC call to the specific Admin API endpoint.\n\nTraces of Daml command submissions are important. The trace illustrated in the figure results when you perform a Canton ping using the console. The ping is a smoke test that sends a Daml transaction (create Ping, exercise choice Pong, exercise choice Archive) to test a connection. It uses a particular smart contract that is preinstalled on every Canton participant. The command uses the Admin API to access a preinstalled application, which then issues Ledger API commands operating on this smart contract. In this example, the trace contains 18 spans. The ping is started by participant1, and participant2 is the target. The trace focuses on the message exchange through the sequencer without digging deep into the message handlers or further processing of transactions.\n\nIn some cases, spans may start later than the end of their parents, due to asynchronous processing. This typically occurs when a new operation is placed on a queue to be handled later, which immediately frees the parent span and ends it.\n\nThe initial span (span 1) covers the duration of the ping operation. In span 2, the GrpcPingService in the participant node handles a GRPC request made by the console. It also lasts for the duration of the ping operation.\n\nThe Canton ping consists of three Daml commands:\n\nThe admin party for participant1 creates a Ping contract.\n\nThe admin party for participant2 exercises the Respond consuming choice on the contract, which results in the creation of a Pong contract.\n\nThe admin party for participant1 exercises the Ack consuming choice on it.\n\nThe submission of the first of the three Daml commands (the creation of the Ping contract) starts at span 3 in the example trace. Due to a limitation explained in the next section, the other two Daml command submissions are not linked to this trace. It is possible to find them separately. In any case, span 2 will only complete once the three Daml commands are completed.\n\nAt span 3, the participant node is on the client side of the ledger API. In other use cases, it could be an application integrated with the participant. This span lasts for the duration of the GRPC call, which is received on the server side in span 4 and handled by the CantonSyncService in span 5. The request is then received and acknowledged, but not fully processed. It is processed asynchronously later, which means that spans 3 through 5 will complete before the request is handled.\n\nMissing steps from the trace (which account for part of the gap between spans 5 and 6) are:\n\nThe sync domain routing where the participant decides which sync domain to use for the command submission.\n\nThe preparation of the initial set of messages to be sent.\n\nThe start of the Canton transaction protocol begins at span 6. In this span, participant1 sends a request to sequencer1 to sequence the initial set of confirmation request messages as part of phase 1 of the transaction protocol. The transaction protocol has seven phases.\n\nAt span 7, sequencer1 receives the request and registers it. Receipt of the messages is not part of this span. That happens asynchronously at a later point.\n\nAt span 18, as part of phase 2, mediator1 receives an informee message. It only needs to validate and register it. Since it doesnât need to respond, span 18 has no children.\n\nAs part of phase 3, participant2 receives a message (see span 8), and participant1 also receives a message (see span 9). Both participants asynchronously validate the messages. participant2 does not need to respond. Since it is only an observer, span 8 has no children. participant1 responds, however, which is visible at span 10. There, it again makes a call to sequencer1, which receives it at span 11.\n\nAt span 12, participant1 receives a successful send response message that signals that its message to the mediator was successfully sequenced. This occurs as part of phase 4, where confirmation responses are sent to the mediator. The mediator receives it at span 13, and it validates the message (phase 5).\n\nIn spans 14 and 15, mediator1 (now at phase 6) asks sequencer1 to send the transaction result messages to the participants.\n\nTo end this round of the transaction protocol, participant1 and participant2 receive their messages at spans 16 and 17, respectively. The messages are asynchronously validated, and their projections of the virtual shared ledger are updated (phase 7)."
    }
}