{
    "id": "correct_foundationPlace_00059_1",
    "rank": 93,
    "data": {
        "url": "https://dl.acm.org/doi/10.5555/1268098.1268108",
        "read_more_link": "",
        "language": "en",
        "title": "A framework for higher-order functions in C++",
        "top_image": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "meta_img": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.5555/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100009927&format=rel-imgonly&assetId=laufer0909-384x480.jpg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100009927&format=rel-imgonly&assetId=laufer0909-384x480.jpg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Konstantin Läufer"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "Guide Proceedings",
        "canonical_link": "https://dl.acm.org/doi/10.5555/1268098.1268108",
        "text": "Abstract\n\nC and C++ allow passing functions as arguments to other functions in the form of function pointers. However, since function pointers can refer only to existing functions declared at global or file scope, these function arguments cannot capture local environments. This leads to the common misconception that C and C++ do not support function closures.\n\nIn fact, function closures can be modeled directly in C++ by enclosing a function inside an object such that the local environment is captured by data members of the object. This idiom is described in advanced C++ texts and is used, for example, to implement callbacks.\n\nThe purpose of this paper is twofold: First, we demonstrate how this idiom can be generalized to a type-safe framework of C++ class templates for higher-order functions that support composition and partial application. Second, we explore the expressiveness of the framework and compare it with that of existing functional programming languages.\n\nWe illustrate by means of various examples that object-oriented and functional idioms can coexist productively and can be used to enhance the functionality of common classes, for example, of nonlinear collections such as trees. A C++ implementation of the framework is available on request.\n\nReferences\n\n[1]\n\n{App89} Apple Computer, Inc., Cupertino, CA. Macintosh Programmers Workshop Pascal 3.0 Reference, 1989.\n\n[2]\n\n{Bak93} H. Baker. Iterators: Signs of weakness in object-oriented languages. ACM OOPS Messenger, 4(3):18-25, July 1993.\n\n[3]\n\n{Bor94} Borland, Inc. Borland C/C++ 4.0 Reference Manual, 1994.\n\n[4]\n\n{Bre88} T. Breuel. Lexical closures for C++. In Proc. USENIX C++ Conf., pages 293-304, Denver, CO, October 1988.\n\n[5]\n\n{CL95} M. Cline and G. Lomow. C++ FAQs. Addison-Wesley, 1995.\n\n[6]\n\n{Cop92} J. Coplien. Advanced C++ Programming Styles and Idioms. Addison-Wesley, 1992.\n\n[7]\n\n{Dam94} L. Dami. Software Composition: Towards an Integration of Functional and Object-Oriented Approaches. PhD thesis, Université de Gene`ve, April 1994.\n\n[8]\n\n{Dam95} L. Dami. Adding closure support to the C++ compiler. Personal communication, March 1995.\n\n[9]\n\n{ES90} M. Ellis and B. Stroustrup. The Annotated C++ Reference Manual. Addison-Wesley, 1990.\n\n[10]\n\n{Fek91} J. Fekete. WWL, a widget wrapper library for C++, 1991. Laboratoire de Recherche en Informatique, Orsay.\n\n[11]\n\n{FW76} D. Friedman and D. Wise. CONS should not evaluate its arguments. In S. Michaelson and R. Milner, editors, Automata, Languages and Programming, pages 257-284. Edinburgh University Press, 1976.\n\n[12]\n\n{GHJV93} E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns. Addison-Wesley, 1993.\n\n[13]\n\n{HS87} S. Harbison and G. Steele. C: A Reference Manual. Prentice-Hall, 2nd edition, 1987.\n\n[14]\n\n{JF88} R. Johnson and B. Foote. Designing reusable classes. Journal of Object-Oriented Programming, 1(2):22-35, June 1988.\n\n[15]\n\n{Kla93} H. Klagges. A functional language interpreter integrated into the C++ language system. Master's thesis, Balliol College, University of Oxford, University Computing Laboratory, September 1993.\n\n[16]\n\n{Küh95} T. Kühne. Inheritance versus parameterization. In Christine Mingins and Bertrand Meyer, editors, Proc. Technology of Object-Oriented Languages and Systems (TOOLS Pacific '94), pages 235-245, Prentice Hall International, Inc., London, 1995. Prentice-Hall. For correct version ask author; proceedings contain corrupted version.\n\n[17]\n\n{LCI+92} M. Linton, P. Calder, J. Interrante, S. Tang, and J. Vlissides. InterViews 3.1 Reference Manual. CSL, Stanford University, 1992.\n\n[18]\n\n{Mey92} S. Meyers. Effective C++. Addison-Wesley, 1992.\n\n[19]\n\n{MTH90} R. Milner, M. Tofte, and R. Harper. The Definition of Standard ML. MIT Press, 1990.\n\n[20]\n\n{Red95} U. Reddy. The design of Core C++. Unpublished draft, March 1995.\n\n[21]\n\n{RK88} V. Russo and S. Kaplan. A C++ interpreter for Scheme. In Proc. USENIX C++ Conf., pages 95-108, Denver, CO, October 1988.\n\n[22]\n\n{RM92} J. Rose and H. Muller. Integrating the Scheme and C languages. In Proc. ACM Conf. Lisp and Functional Programming, pages 247-259, San Francisco, 1992.\n\n[23]\n\n{Ros95a} J. Rose. C closures. Personal communication, April 1995.\n\n[24]\n\n{Ros95b} J. Rose. Functional programming and call-by-name in C++. Personal communication, April 1995.\n\n[25]\n\n{R+91} J. Rumbaugh et al. Object-Oriented Modeling and Design. Prentice-Hall, 1991.\n\n[26]\n\n{Sta94} R. Stallman. Using and Porting GNU CC. Free Software Foundation, Cambridge, Massachusetts, September 1994. Available as part of the GCC-2.6.3 distribution.\n\n[27]\n\n{VL90} J. Vlissides and M. Linton. Unidraw: A framework for building domain-specific graphical editors. ACM Transactions on Information Systems, 8(3):237-268, July 1990.\n\n[28]\n\n{WGM88} A. Weinand, E. Gamma, and R. Marty. ET++ -- An object-oriented application framework in C++. In Proc. ACM Conf. Object-Oriented Programming: Systems, Languages, Applications (OOPSLA), pages 46-57, San Diego, CA, 1988.\n\n[29]\n\n{You92} D. Young. Object-Oriented Programming with C++ and OSF/Motif. Prentice-Hall, 1992.\n\nCited By\n\nView all\n\nLincke DSchupp SJansson PSchupp SThe function concept in C++Proceedings of the 2009 ACM SIGPLAN workshop on Generic programming10.1145/1596614.1596619(25-36)\n\nSetzer AJava as a functional programming languageProceedings of the 2002 international conference on Types for proofs and programs10.5555/1762639.1762655(279-298)\n\nHo WJézéquel JPennaneac'h FPlouzeau NOssher HKiczales GA toolkit for weaving aspect oriented UML designsProceedings of the 1st international conference on Aspect-oriented software development10.1145/508386.508398(99-105)\n\nShow More Cited By\n\nIndex Terms\n\nA framework for higher-order functions in C++\n\nSoftware and its engineering\n\nSoftware notations and tools\n\nGeneral programming languages\n\nLanguage features\n\nFrameworks\n\nProcedures, functions and subroutines\n\nLanguage types\n\nTheory of computation\n\nSemantics and reasoning\n\nProgram constructs\n\nObject oriented constructs\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n160 pages\n\nPublisher\n\nUSENIX Association\n\nUnited States\n\nPublication History\n\nPublished: 26 June 1995\n\nQualifiers\n\nArticle\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n8\n\nTotal Citations\n\nView Citations\n\n50\n\nTotal Downloads\n\nDownloads (Last 12 months)0\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nLincke DSchupp SJansson PSchupp SThe function concept in C++Proceedings of the 2009 ACM SIGPLAN workshop on Generic programming10.1145/1596614.1596619(25-36)\n\nSetzer AJava as a functional programming languageProceedings of the 2002 international conference on Types for proofs and programs10.5555/1762639.1762655(279-298)\n\nHo WJézéquel JPennaneac'h FPlouzeau NOssher HKiczales GA toolkit for weaving aspect oriented UML designsProceedings of the 1st international conference on Aspect-oriented software development10.1145/508386.508398(99-105)\n\nLarsson JCalculating in an object-oriented iterator-view-generator frameworkAddendum to the 2000 proceedings of the conference on Object-oriented programming, systems, languages, and applications (Addendum)10.1145/367845.368054(147-148)\n\nMcNamara BSmaragdakis YFunctional programming in C++ACM SIGPLAN Notices10.1145/357766.35125135:9(118-129)\n\nMcNamara BSmaragdakis YOdersky MWadler PFunctional programming in C++Proceedings of the fifth ACM SIGPLAN international conference on Functional programming10.1145/351240.351251(118-129)\n\nOdersky MWadler PLee PHenglein FJones NPizza into JavaProceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages10.1145/263699.263715(146-159)\n\nPapaspyrou NA framework for programming denotational semantics in C++ACM SIGPLAN Notices10.1145/242903.24291331:8(16-25)\n\nView Options\n\nView options\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nKonstantin Läufer\n\nLoyola University of Chicago\n\nRequest permissions Authors Info & Affiliations"
    }
}