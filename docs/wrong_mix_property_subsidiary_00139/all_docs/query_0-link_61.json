{
    "id": "wrong_mix_property_subsidiary_00139_0",
    "rank": 61,
    "data": {
        "url": "https://blog.devart.com/consume-a-restful-api-using-restsharp-and-c.html",
        "read_more_link": "",
        "language": "en",
        "title": "Consume a RESTful API Using RestSharp and C#",
        "top_image": "https://blog.devart.com/wp-content/uploads/2022/09/DotConnect_Consume.png",
        "meta_img": "https://blog.devart.com/wp-content/uploads/2022/09/DotConnect_Consume.png",
        "images": [
            "https://blog.devart.com/wp-content/uploads/2022/12/devart_logo.png",
            "https://blog.devart.com/wp-content/uploads/2022/12/devart_logo.png",
            "https://secure.gravatar.com/avatar/c15ad6edded00486a4e29bf9d0bfa9a5?s=30&d=mm&r=g",
            "https://blog.devart.com/wp-content/uploads/2022/09/DotConnect_Consume.png",
            "https://blog.devart.com/wp-content/uploads/2022/09/ADO.NET_vs_Entity_Framework-2.png",
            "https://blog.devart.com/wp-content/uploads/2022/09/ADO.NET_vs_Entity_Framework-2.png",
            "https://secure.gravatar.com/avatar/c15ad6edded00486a4e29bf9d0bfa9a5?s=100&d=mm&r=g",
            "https://blog.devart.com/wp-content/uploads/2022/12/devart-logo.png",
            "https://blog.devart.com/wp-content/uploads/2022/12/devart-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "dotConnect Team"
        ],
        "publish_date": "2022-09-29T20:55:23+00:00",
        "summary": "",
        "meta_description": "The article talks about REST concepts, the RESTSharp library, and how it can be used to work with RESTful APIs in ASP.NET 6.",
        "meta_lang": "en",
        "meta_favicon": "https://blog.devart.com/wp-content/uploads/2022/12/favicon.ico",
        "meta_site_name": "Devart Blog",
        "canonical_link": "https://blog.devart.com/consume-a-restful-api-using-restsharp-and-c.html",
        "text": "This article talks about REST concepts, the RESTSharp library, and how it can be used to work with RESTful APIs in ASP.NET 6. We’ll use a PostgreSQL database using Devart dotConnect for PostgreSQL to store and retrieve data.\n\nRESTSharp is an open-source, portable, lightweight .NET library for working with RESTful web services. You can use it to perform CRUD (create, read, update, and delete) operations on your data using any RESTful API. RestSharp is a popular library for interacting with RESTful APIs. It is a port of the Java version, and it is used to make HTTP requests and parse the responses.\n\nPre-requisites\n\nYou’ll need the following tools to deal with code examples:\n\nVisual Studio 2022 Community Edition\n\ndotConnect for PostgreSQL\n\nYou can download PostgreSQL from here: https://www.postgresql.org/download/\n\nWhat is REST? Why do we need it?\n\nThe REST architectural style is used to create distributed applications that can communicate among themselves. REST is neither a technology nor a set of standards. It is rather a set of constraints that can be used to define new architectural styles. It is essentially a client-server architecture with stateless connections. REST uses an HTTP-based interface to expose data and services and is based on the concept of resources.\n\nWhat is RESTSharp?\n\nUsing RestSharp, you can interact with RESTful services while abstracting the technical details of HTTP requests. RestSharp offers a developer-friendly interface for interacting with RESTful services while abstracting the technical workings of HTTP queries. RestSharp can handle synchronous and asynchronous requests.\n\nCreate a new ASP.NET 6 Core Web API Project\n\nIn this section, we’ll learn how to create a new ASP.NET 6 Core Web API project in Visual Studio 2022.\n\nNow, follow the steps outlined below:\n\nOpen Visual Studio 2022.\n\nClick Create a new project.\n\nSelect ASP.NET Core Web API and click Next.\n\nSpecify the project name and location to store that project in your system. Optionally, checkmark the Place solution and project in the same directory checkbox.\n\nClick Next.\n\nIn the Additional information window, select .NET 6.0 (Long-term support) as the project version.\n\nDisable the Configure for HTTPS and Enable Docker Support options (uncheck them).\n\nSince we’ll not be using authentication in this example, select the Authentication type as None.\n\nSince we won’t use Open API in this example, deselect the Enable OpenAPI support checkbox.\n\nSince we’ll not be using minimal APIs in this example, ensure that the Use controllers (uncheck to use minimal APIs) is checked.\n\nLeave the Do not use top-level statements checkbox unchecked.\n\nClick Create to finish the process.\n\nWe’ll use this project in this article.\n\nInstall NuGet Packages\n\nBefore you get started implementing rate limiting, you should install the dotConnect for PostgreSQL package in your project. You can install them either from the NuGet Package Manager tool inside Visual Studio or, from the NuGet Package Manager console using the following commands:\n\nPM> Install-Package Devart.Data.PostgreSql\n\nGetting Started\n\nCreate a PostgreSQL database table named Author having the following fields:\n\nId\n\nFirstName\n\nLastName\n\nAuthor\n\nNext, insert some dummy records into this table. We’ll use this table to store and retrieve data using RestSharp.\n\nCreate the Model Class\n\nCreate a solution folder in the Solution Explorer window and name it Models. Next, create a .cs file called Author.cs with the following code in there:\n\npublic class Author { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public string Address { get; set; } }\n\nCreate the AuthorRepository Class\n\nThe IAuthorRepository interface contains the declaration of two methods:\n\npublic interface IAuthorRepository { public void Save(Author author); public List<Author> GetAuthors(); }\n\nThe AuthorRepository class implements the methods of the IAuthorRepository interface and encapsulates all database operations.\n\npublic class AuthorRepository: IAuthorRepository { public List<Author> GetAuthors() { try { List<Author> authors = new List<Author>(); using (PgSqlConnection pgSqlConnection = new PgSqlConnection(\"User Id = postgres; Password = sa123#;\" + \"host=localhost;database=postgres;\")) { using (PgSqlCommand pgSqlCommand = new PgSqlCommand()) { pgSqlCommand.CommandText = \"Select * From public.Author\"; pgSqlCommand.Connection = pgSqlConnection; if (pgSqlConnection.State != System.Data.ConnectionState.Open) pgSqlConnection.Open(); using (PgSqlDataReader pgSqlReader = pgSqlCommand.ExecuteReader()) { while (pgSqlReader.Read()) { Author author = new Author(); author.Id = int.Parse(pgSqlReader.GetValue(0).ToString()); author.FirstName = pgSqlReader.GetValue(1).ToString(); author.LastName = pgSqlReader.GetValue(2).ToString(); author.Address = pgSqlReader.GetValue(3).ToString(); authors.Add(author); } } } } return authors; } catch { throw; } } public void Save(Author author) { try { using (PgSqlConnection pgSqlConnection = new PgSqlConnection(\"User Id = postgres; Password = sa123#;\" + \"host=localhost;database=postgres;\")) { using (PgSqlCommand cmd = new PgSqlCommand()) { cmd.CommandText = \"INSERT INTO public.Author \" + \"(id, firstname, lastname, address) VALUES \" + \"(@id, @firstname, @lastname, @address)\"; cmd.Connection = pgSqlConnection; cmd.Parameters.AddWithValue(\"id\", Guid.NewGuid().ToString()); cmd.Parameters.AddWithValue(\"firstname\", author.FirstName); cmd.Parameters.AddWithValue(\"lastname\", author.LastName); cmd.Parameters.AddWithValue(\"address\", author.Address); if (pgSqlConnection.State != System.Data.ConnectionState.Open) pgSqlConnection.Open(); cmd.ExecuteNonQuery(); } } } catch { throw; } } }\n\nCreate the AuthorController Class\n\nNext, select and right-click on the Controllers solution folder and create a new controller class called AuthorController with the following code in there:\n\n[Route(\"api/[controller]\")] [ApiController] public class AuthorController : ControllerBase { private readonly IAuthorRepository _authorRepository; public AuthorController(IAuthorRepository authorRepository) { _authorRepository = authorRepository; } [HttpGet] public List<Author> Get() { return _authorRepository.GetAuthors(); } [HttpPost] public void Post([FromBody] Author author) { _authorRepository.Save(author); } }\n\nNote how an instance of type IAuthorRepository is injected into the constructor of the AuthorController class.\n\nRemember that you must add an instance of type IAuthorRepository to the services container using the following piece of code in the Program.cs file:\n\nbuilder.Services.AddScoped<IAuthorRepository, AuthorRepository>();\n\nCreate the Client Application to Consume the RESTful API\n\nNow create a console application to consume the RESTful API using RESTSharp.\n\nInstall NuGet Packages\n\nTo take advantage of RestSharp, you should install the RestSharp package in your project. You can install them either from the NuGet Package Manager tool inside Visual Studio or, from the NuGet Package Manager console using the following commands:\n\nPM> Install-Package RestSharp\n\nOnce RestSharp has been successfully installed in your project, you can start using the library. First off, you should create an instance of RestClient and pass the base address of the Url in the constructor as shown in the following code:\n\nRestClient client = new RestClient(\"http://localhost:5073/api/\");\n\nNow, create an instance of the RestRequest class as shown in the code given below:\n\nRestRequest request = new RestRequest(\"Author\", Method.Get);\n\nLastly, you can now call the Execute method using the instance of RestClient and retrieve data using the following code:\n\nvar response = client.Execute<List<Author>>(request);\n\nHere’s the complete code listing of the client app:\n\nusing RestSharp; using System; using System.Collections.Generic; namespace RESTSharpClient { class Program { private static RestClient client = new RestClient(\"http://localhost:5073/api/\"); static void Main(string[] args) { RestRequest request = new RestRequest(\"Author\", Method.GET); var response = client.Execute<List<Author>>(request); Console.ReadKey(); } } }\n\nTo make Post requests, you can use the following code:\n\nAuthor author = new Author(); var request = new RestRequest(\"api/author\") .AddJsonBody(author); var response = await client.ExecutePostAsync<Author>(request); if (!response.IsSuccessful) { //Write code here to handle errors }\n\nSummary\n\nRestSharp can be used in any .NET application that needs to interact with web services. RESTSharp is a lightweight alternative to WebClient in cases where you need more control over how the request passes through your pipeline. It has full support for the HTTP specification and allows you to easily interact with any RESTful web service endpoint."
    }
}