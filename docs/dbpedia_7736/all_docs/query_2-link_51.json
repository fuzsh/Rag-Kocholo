{
    "id": "dbpedia_7736_2",
    "rank": 51,
    "data": {
        "url": "https://opensource.guide/how-to-contribute/",
        "read_more_link": "",
        "language": "en",
        "title": "How to Contribute to Open Source",
        "top_image": "https://opensource.guide/assets/images/cards/contribute.png",
        "meta_img": "https://opensource.guide/assets/images/cards/contribute.png",
        "images": [
            "https://opensource.guide/assets/images/illos/contribute.svg",
            "https://avatars.githubusercontent.com/errietta?s=180",
            "https://avatars.githubusercontent.com/orta?s=180",
            "https://avatars.githubusercontent.com/kittens?s=180",
            "https://avatars.githubusercontent.com/shaunagm?s=180",
            "https://opensource.guide/assets/images/how-to-contribute/johnfkennedy.jpg",
            "https://avatars.githubusercontent.com/kfogel?s=180",
            "https://avatars.githubusercontent.com/shubheksha?s=180",
            "https://avatars.githubusercontent.com/gaearon?s=180",
            "https://opensource.guide/assets/images/illos/beginners.svg",
            "https://opensource.guide/assets/images/illos/building.svg",
            "https://opensource.guide/assets/images/illos/squirrel.svg",
            "https://opensource.guide/assets/images/illos/bird.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-23T19:15:47+00:00",
        "summary": "",
        "meta_description": "Want to contribute to open source? A guide to making open source contributions, for first-timers and for veterans.",
        "meta_lang": "en",
        "meta_favicon": "https://github.githubassets.com/favicon.ico",
        "meta_site_name": "Open Source Guides",
        "canonical_link": "https://opensource.guide/how-to-contribute/",
        "text": "Why contribute to open source?\n\nContributing to open source can be a rewarding way to learn, teach, and build experience in just about any skill you can imagine.\n\nWhy do people contribute to open source? Plenty of reasons!\n\nImprove software you rely on\n\nLots of open source contributors start by being users of software they contribute to. When you find a bug in an open source software you use, you may want to look at the source to see if you can patch it yourself. If that’s the case, then contributing the patch back is the best way to ensure that your friends (and yourself when you update to the next release) will be able to benefit from it.\n\nImprove existing skills\n\nWhether it’s coding, user interface design, graphic design, writing, or organizing, if you’re looking for practice, there’s a task for you on an open source project.\n\nMeet people who are interested in similar things\n\nOpen source projects with warm, welcoming communities keep people coming back for years. Many people form lifelong friendships through their participation in open source, whether it’s running into each other at conferences or late night online chats about burritos.\n\nFind mentors and teach others\n\nWorking with others on a shared project means you’ll have to explain how you do things, as well as ask other people for help. The acts of learning and teaching can be a fulfilling activity for everyone involved.\n\nBuild public artifacts that help you grow a reputation (and a career)\n\nBy definition, all of your open source work is public, which means you get free examples to take anywhere as a demonstration of what you can do.\n\nLearn people skills\n\nOpen source offers opportunities to practice leadership and management skills, such as resolving conflicts, organizing teams of people, and prioritizing work.\n\nIt’s empowering to be able to make changes, even small ones\n\nYou don’t have to become a lifelong contributor to enjoy participating in open source. Have you ever seen a typo on a website, and wished someone would fix it? On an open source project, you can do just that. Open source helps people feel agency over their lives and how they experience the world, and that in itself is gratifying.\n\nWhat it means to contribute\n\nIf you’re a new open source contributor, the process can be intimidating. How do you find the right project? What if you don’t know how to code? What if something goes wrong?\n\nNot to worry! There are all sorts of ways to get involved with an open source project, and a few tips will help you get the most out of your experience.\n\nYou don’t have to contribute code\n\nA common misconception about contributing to open source is that you need to contribute code. In fact, it’s often the other parts of a project that are most neglected or overlooked. You’ll do the project a huge favor by offering to pitch in with these types of contributions!\n\nEven if you like to write code, other types of contributions are a great way to get involved with a project and meet other community members. Building those relationships will give you opportunities to work on other parts of the project.\n\nDo you like planning events?\n\nOrganize workshops or meetups about the project, like @fzamperin did for NodeSchool\n\nOrganize the project’s conference (if they have one)\n\nHelp community members find the right conferences and submit proposals for speaking\n\nDo you like to design?\n\nRestructure layouts to improve the project’s usability\n\nConduct user research to reorganize and refine the project’s navigation or menus, like Drupal suggests\n\nPut together a style guide to help the project have a consistent visual design\n\nCreate art for t-shirts or a new logo, like hapi.js’s contributors did\n\nDo you like to write?\n\nWrite and improve the project’s documentation, like @CBID2 did for OpenSauced’s documentation\n\nCurate a folder of examples showing how the project is used\n\nStart a newsletter for the project, or curate highlights from the mailing list, like @opensauced did for their product\n\nWrite tutorials for the project, like PyPA’s contributors did\n\nWrite a translation for the project’s documentation, like @frontendwizard did for the instructions for freeCodeCamp’s CSS Flexbox challenge\n\nDo you like organizing?\n\nLink to duplicate issues, and suggest new issue labels, to keep things organized\n\nGo through open issues and suggest closing old ones, like @nzakas did for ESLint\n\nAsk clarifying questions on recently opened issues to move the discussion forward\n\nDo you like to code?\n\nFind an open issue to tackle, like @dianjin did for Leaflet\n\nAsk if you can help write a new feature\n\nAutomate project setup\n\nImprove tooling and testing\n\nDo you like helping people?\n\nAnswer questions about the project on e.g., Stack Overflow (like this Postgres example) or Reddit\n\nAnswer questions for people on open issues\n\nHelp moderate the discussion boards or conversation channels\n\nDo you like helping others code?\n\nReview code on other people’s submissions\n\nWrite tutorials for how a project can be used\n\nOffer to mentor another contributor, like @ereichert did for @bronzdoc on Rust\n\nYou don’t just have to work on software projects!\n\nWhile “open source” often refers to software, you can collaborate on just about anything. There are books, recipes, lists, and classes that get developed as open source projects.\n\nFor example:\n\n@sindresorhus curates a list of “awesome” lists\n\n@h5bp maintains a list of potential interview questions for front-end developer candidates\n\n@stuartlynn and @nicole-a-tesla made a collection of fun facts about puffins\n\nEven if you’re a software developer, working on a documentation project can help you get started in open source. It’s often less intimidating to work on projects that don’t involve code, and the process of collaboration will build your confidence and experience.\n\nOrienting yourself to a new project\n\nFor anything more than a typo fix, contributing to open source is like walking up to a group of strangers at a party. If you start talking about llamas, while they were deep in a discussion about goldfish, they’ll probably look at you a little strangely.\n\nBefore jumping in blindly with your own suggestions, start by learning how to read the room. Doing so increases the chances that your ideas will be noticed and heard.\n\nAnatomy of an open source project\n\nEvery open source community is different.\n\nSpending years on one open source project means you’ve gotten to know one open source project. Move to a different project, and you might find the vocabulary, norms, and communication styles are completely different.\n\nThat said, many open source projects follow a similar organizational structure. Understanding the different community roles and overall process will help you get quickly oriented to any new project.\n\nA typical open source project has the following types of people:\n\nAuthor: The person/s or organization that created the project\n\nOwner: The person/s who has administrative ownership over the organization or repository (not always the same as the original author)\n\nMaintainers: Contributors who are responsible for driving the vision and managing the organizational aspects of the project (They may also be authors or owners of the project.)\n\nContributors: Everyone who has contributed something back to the project\n\nCommunity Members: People who use the project. They might be active in conversations or express their opinion on the project’s direction\n\nBigger projects may also have subcommittees or working groups focused on different tasks, such as tooling, triage, community moderation, and event organizing. Look on a project’s website for a “team” page, or in the repository for governance documentation, to find this information.\n\nA project also has documentation. These files are usually listed in the top level of a repository.\n\nLICENSE: By definition, every open source project must have an open source license. If the project does not have a license, it is not open source.\n\nREADME: The README is the instruction manual that welcomes new community members to the project. It explains why the project is useful and how to get started.\n\nCONTRIBUTING: Whereas READMEs help people use the project, contributing docs help people contribute to the project. It explains what types of contributions are needed and how the process works. While not every project has a CONTRIBUTING file, its presence signals that this is a welcoming project to contribute to. A good example of an effective Contributing Guide would be the one from Codecademy’s Docs repository.\n\nCODE_OF_CONDUCT: The code of conduct sets ground rules for participants’ behavior associated and helps to facilitate a friendly, welcoming environment. While not every project has a CODE_OF_CONDUCT file, its presence signals that this is a welcoming project to contribute to.\n\nOther documentation: There might be additional documentation, such as tutorials, walkthroughs, or governance policies, especially on bigger projects like Astro Docs.\n\nFinally, open source projects use the following tools to organize discussion. Reading through the archives will give you a good picture of how the community thinks and works.\n\nIssue tracker: Where people discuss issues related to the project.\n\nPull requests: Where people discuss and review changes that are in progress whether its to improve a contributor’s line of code, grammar usage, use of images, etc. Some projects, such as MDN Web Docs, use certain GitHub Action flows to automate and quicken their code reviews.\n\nDiscussion forums or mailing lists: Some projects may use these channels for conversational topics (for example, “How do I…“ or “What do you think about…“ instead of bug reports or feature requests). Others use the issue tracker for all conversations. A good example of this would be CHAOSS’ weekly Newsletter\n\nSynchronous chat channel: Some projects use chat channels (such as Slack or IRC) for casual conversation, collaboration, and quick exchanges. A good example of this would be EddieHub’s Discord community.\n\nFinding a project to contribute to\n\nNow that you’ve figured out how open source projects work, it’s time to find a project to contribute to!\n\nIf you’ve never contributed to open source before, take some advice from U.S. President John F. Kennedy, who once said:, “Ask not what your country can do for you - ask what you can do for your country.”\n\nContributing to open source happens at all levels, across projects. You don’t need to overthink what exactly your first contribution will be, or how it will look.\n\nInstead, start by thinking about the projects you already use, or want to use. The projects you’ll actively contribute to are the ones you find yourself coming back to.\n\nWithin those projects, whenever you catch yourself thinking that something could be better or different, act on your instinct.\n\nOpen source isn’t an exclusive club; it’s made by people just like you. “Open source” is just a fancy term for treating the world’s problems as fixable.\n\nYou might scan a README and find a broken link or a typo. Or you’re a new user and you noticed something is broken, or an issue that you think should really be in the documentation. Instead of ignoring it and moving on, or asking someone else to fix it, see whether you can help out by pitching in. That’s what open source is all about!\n\nAccording to a study conducted by Igor Steinmacher and other Computer Science researchers, 28% of casual contributions to open source are documentation, such as typo fixes, reformatting, or writing a translation.\n\nIf you’re looking for existing issues you can fix, every open source project has a /contribute page that highlights beginner-friendly issues you can start out with. Navigate to the main page of the repository on GitHub, and add /contribute at the end of the URL (for example https://github.com/facebook/react/contribute).\n\nYou can also use one of the following resources to help you discover and contribute to new projects:\n\nGitHub Explore\n\nOpen Source Friday\n\nFirst Timers Only\n\nCodeTriage\n\n24 Pull Requests\n\nUp For Grabs\n\nFirst Contributions\n\nSourceSort\n\nOpenSauced\n\nA checklist before you contribute\n\nWhen you’ve found a project you’d like to contribute to, do a quick scan to make sure that the project is suitable for accepting contributions. Otherwise, your hard work may never get a response.\n\nHere’s a handy checklist to evaluate whether a project is good for new contributors.\n\nMeets the definition of open source\n\nDoes it have a license? Usually, there is a file called LICENSE in the root of the repository.\n\nProject actively accepts contributions\n\nLook at the commit activity on the main branch. On GitHub, you can see this information in the Insights tab of a repository’s homepage, such as Virtual-Coffee\n\nWhen was the latest commit?\n\nHow many contributors does the project have?\n\nHow often do people commit? (On GitHub, you can find this by clicking \"Commits\" in the top bar.)\n\nNext, look at the project’s issues.\n\nHow many open issues are there?\n\nDo maintainers respond quickly to issues when they are opened?\n\nIs there active discussion on the issues?\n\nAre the issues recent?\n\nAre issues getting closed? (On GitHub, click the \"closed\" tab on the Issues page to see closed issues.)\n\nNow do the same for the project’s pull requests.\n\nHow many open pull requests are there?\n\nDo maintainers respond quickly to pull requests when they are opened?\n\nIs there active discussion on the pull requests?\n\nAre the pull requests recent?\n\nHow recently were any pull requests merged? (On GitHub, click the \"closed\" tab on the Pull Requests page to see closed PRs.)\n\nProject is welcoming\n\nA project that is friendly and welcoming signals that they will be receptive to new contributors.\n\nDo the maintainers respond helpfully to questions in issues?\n\nAre people friendly in the issues, discussion forum, and chat (for example, IRC or Slack)?\n\nDo pull requests get reviewed?\n\nDo maintainers thank people for their contributions?\n\nHow to submit a contribution\n\nYou’ve found a project you like, and you’re ready to make a contribution. Finally! Here’s how to get your contribution in the right way.\n\nCommunicating effectively\n\nWhether you’re a one-time contributor or trying to join a community, working with others is one of the most important skills you’ll develop in open source.\n\nBefore you open an issue or pull request, or ask a question in chat, keep these points in mind to help your ideas come across effectively.\n\nGive context. Help others get quickly up to speed. If you’re running into an error, explain what you’re trying to do and how to reproduce it. If you’re suggesting a new idea, explain why you think it’d be useful to the project (not just to you!).\n\n😇 “X doesn’t happen when I do Y”\n\n😢 “X is broken! Please fix it.”\n\nDo your homework beforehand. It’s OK not to know things, but show that you tried. Before asking for help, be sure to check a project’s README, documentation, issues (open or closed), mailing list, and search the internet for an answer. People will appreciate it when you demonstrate that you’re trying to learn.\n\n😇 “I’m not sure how to implement X. I checked the help docs and didn’t find any mentions.”\n\n😢 “How do I X?”\n\nKeep requests short and direct. Much like sending an email, every contribution, no matter how simple or helpful, requires someone else’s review. Many projects have more incoming requests than people available to help. Be concise. You will increase the chance that someone will be able to help you.\n\n😇 “I’d like to write an API tutorial.”\n\n😢 “I was driving down the highway the other day and stopped for gas, and then I had this amazing idea for something we should be doing, but before I explain that, let me show you…“\n\nKeep all communication public. Although it’s tempting, don’t reach out to maintainers privately unless you need to share sensitive information (such as a security issue or serious conduct violation). When you keep the conversation public, more people can learn and benefit from your exchange. Discussions can be, in themselves, contributions.\n\n😇 (as a comment) “@-maintainer Hi there! How should we proceed on this PR?”\n\n😢 (as an email) “Hey there, sorry to bother you over email, but I was wondering if you’ve had a chance to review my PR”\n\nIt’s okay to ask questions (but be patient!). Everybody was new to the project at some point, and even experienced contributors need to get up to speed when they look at a new project. By the same token, even longtime maintainers are not always familiar with every part of the project. Show them the same patience that you’d want them to show to you.\n\n😇 “Thanks for looking into this error. I followed your suggestions. Here’s the output.”\n\n😢 “Why can’t you fix my problem? Isn’t this your project?”\n\nRespect community decisions. Your ideas may differ from the community’s priorities or vision. They may offer feedback or decide not to pursue your idea. While you should discuss and look for compromise, maintainers have to live with your decision longer than you will. If you disagree with their direction, you can always work on your own fork or start your own project.\n\n😇 “I’m disappointed you can’t support my use case, but as you’ve explained it only affects a minor portion of users, I understand why. Thanks for listening.”\n\n😢 “Why won’t you support my use case? This is unacceptable!”\n\nAbove all, keep it classy. Open source is made up of collaborators from all over the world. Context gets lost across languages, cultures, geographies, and time zones. In addition, written communication makes it harder to convey a tone or mood. Assume good intentions in these conversations. It’s fine to politely push back on an idea, ask for more context, or further clarify your position. Just try to leave the internet a better place than when you found it.\n\nGathering context\n\nBefore doing anything, do a quick check to make sure your idea hasn’t been discussed elsewhere. Skim the project’s README, issues (open and closed), mailing list, and Stack Overflow. You don’t have to spend hours going through everything, but a quick search for a few key terms goes a long way.\n\nIf you can’t find your idea elsewhere, you’re ready to make a move. If the project is on GitHub, you’ll likely communicate by doing the following:\n\nRaising an Issue: These are like starting a conversation or discussion\n\nPull requests are for starting work on a solution.\n\nCommunication Channels: If the project has a designated Discord, IRC, or Slack channel, consider starting a conversation or asking for clarification about your contribution.\n\nBefore you open an issue or pull request, check the project’s contributing docs (usually a file called CONTRIBUTING, or in the README), to see whether you need to include anything specific. For example, they may ask that you follow a template, or require that you use tests.\n\nIf you want to make a substantial contribution, open an issue to ask before working on it. It’s helpful to watch the project for a while (on GitHub, you can click “Watch” to be notified of all conversations), and get to know community members, before doing work that might not get accepted.\n\nOpening an issue\n\nYou should usually open an issue in the following situations:\n\nReport an error you can’t solve yourself\n\nDiscuss a high-level topic or idea (for example, community, vision or policies)\n\nPropose a new feature or other project idea\n\nTips for communicating on issues:\n\nIf you see an open issue that you want to tackle, comment on the issue to let people know you’re on it. That way, people are less likely to duplicate your work.\n\nIf an issue was opened a while ago, it’s possible that it’s being addressed somewhere else, or has already been resolved, so comment to ask for confirmation before starting work.\n\nIf you opened an issue, but figured out the answer later on your own, comment on the issue to let people know, then close the issue. Even documenting that outcome is a contribution to the project.\n\nOpening a pull request\n\nYou should usually open a pull request in the following situations:\n\nSubmit small fixes such as a typo, a broken link or an obvious error.\n\nStart work on a contribution that was already asked for, or that you’ve already discussed, in an issue.\n\nA pull request doesn’t have to represent finished work. It’s usually better to open a pull request early on, so others can watch or give feedback on your progress. Just open it as a “draft” or mark as a “WIP” (Work in Progress) in the subject line or “Notes to Reviewers” sections if provided (or you can just create your own. Like this: **## Notes to Reviewer**). You can always add more commits later.\n\nIf the project is on GitHub, here’s how to submit a pull request:\n\nFork the repository and clone it locally. Connect your local to the original “upstream” repository by adding it as a remote. Pull in changes from “upstream” often so that you stay up to date so that when you submit your pull request, merge conflicts will be less likely. (See more detailed instructions here.)\n\nCreate a branch for your edits.\n\nReference any relevant issues or supporting documentation in your PR (for example, “Closes #37.”)\n\nInclude screenshots of the before and after if your changes include differences in HTML/CSS. Drag and drop the images into the body of your pull request.\n\nTest your changes! Run your changes against any existing tests if they exist and create new ones when needed. It’s important to make sure your changes don’t break the existing project.\n\nContribute in the style of the project to the best of your abilities. This may mean using indents, semi-colons or comments differently than you would in your own repository, but makes it easier for the maintainer to merge, others to understand and maintain in the future.\n\nIf this is your first pull request, check out Make a Pull Request, which @kentcdodds created as a walkthrough video tutorial. You can also practice making a pull request in the First Contributions repository, created by @Roshanjossey.\n\nWhat happens after you submit your contribution\n\nBefore we start celebrating, one of the following will happen after you submit your contribution:\n\n😭 You don’t get a response\n\nHopefully you checked the project for signs of activity before making a contribution. Even on an active project, however, it’s possible that your contribution won’t get a response.\n\nIf you haven’t gotten a response in over a week, it’s fair to politely respond in that same thread, asking someone for a review. If you know the name of the right person to review your contribution, you can @-mention them in that thread.\n\nDon’t reach out to that person privately; remember that public communication is vital to open source projects.\n\nIf you give a polite reminder and still do not receive a response, it’s possible that nobody will ever respond. It’s not a great feeling, but don’t let that discourage you! 😄 There are many possible reasons why you didn’t get a response, including personal circumstances that may be out of your control. Try to find another project or way to contribute. If anything, this is a good reason not to invest too much time in making a contribution before other community members are engaged and responsive.\n\n🚧 Someone requests changes to your contribution\n\nIt’s common that you’ll be asked to make changes to your contribution, whether that’s feedback on the scope of your idea, or changes to your code.\n\nWhen someone requests changes, be responsive. They’ve taken the time to review your contribution. Opening a PR and walking away is bad form. If you don’t know how to make changes, research the problem, then ask for help if you need it. A good example of this would be the feedback that another contributor has given to @a-m-lamb on their pull request to Codecademy’s Docs.\n\nIf you don’t have time to work on the issue anymore due to reasons such as the conversation has been going on for months, and your circumstances have changed or you’re unable to find a solution, let the maintainer know so that they can open the issue for someone else, like @RitaDee did for an issue at OpenSauced’s app repository.\n\n👎 Your contribution doesn’t get accepted\n\nYour contribution may or may not be accepted in the end. Hopefully you didn’t put too much work into it already. If you’re not sure why it wasn’t accepted, it’s perfectly reasonable to ask the maintainer for feedback and clarification. Ultimately, however, you’ll need to respect that this is their decision. Don’t argue or get hostile. You’re always welcome to fork and work on your own version if you disagree!\n\n🎉 Your contribution gets accepted\n\nHooray! You’ve successfully made an open source contribution!\n\nYou did it! 🎉\n\nWhether you just made your first open source contribution, or you’re looking for new ways to contribute, we hope you’re inspired to take action. Even if your contribution wasn’t accepted, don’t forget to say thanks when a maintainer put effort into helping you. Open source is made by people like you: one issue, pull request, comment, or high-five at a time."
    }
}