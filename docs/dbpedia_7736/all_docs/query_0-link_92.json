{
    "id": "dbpedia_7736_0",
    "rank": 92,
    "data": {
        "url": "https://www.chainguard.dev/unchained/what-an-sbom-can-do-for-you",
        "read_more_link": "",
        "language": "en",
        "title": "What an SBOM can do for you",
        "top_image": "https://images.ctfassets.net/l47ir7rfykkn/1HRZvzz21dgG7p31sWBWl6/8415ace0b67e3e44d8cabf8e409ba1cd/Blog_Main_Dark.png",
        "meta_img": "https://images.ctfassets.net/l47ir7rfykkn/1HRZvzz21dgG7p31sWBWl6/8415ace0b67e3e44d8cabf8e409ba1cd/Blog_Main_Dark.png",
        "images": [
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F5FLJ48MYn3yMR0vx9Kuze8%2F62071011778e44906439a4c88ba7d929%2FAI_Images_-_Learning_Labs.png&w=3840&q=75 1x",
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F7uyKWzoZCmYs1KPWxXQAOz%2Fb0730f29abdaf6f1ebbd073078844ff1%2Fan_sbom_1.png&w=1080&q=75 1x, /_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F7uyKWzoZCmYs1KPWxXQAOz%2Fb0730f29abdaf6f1ebbd073078844ff1%2Fan_sbom_1.png&w=2048&q=75 2x",
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F3lJZybNFwhMwleHVQ4hBCB%2F18d7a4af0426a407b1c3e13a79cef3e5%2Fan_sbom_2.png&w=828&q=75 1x, /_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F3lJZybNFwhMwleHVQ4hBCB%2F18d7a4af0426a407b1c3e13a79cef3e5%2Fan_sbom_2.png&w=1920&q=75 2x",
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F6mYDF1uUhamEMZCMtpZTBs%2Fb6092a044d83e53cd3970975897d6fe5%2FGet_Smart_in_Five_Minutes__What_is_vulnerability_remediation___3_.png&w=1920&q=75 1x, /_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F6mYDF1uUhamEMZCMtpZTBs%2Fb6092a044d83e53cd3970975897d6fe5%2FGet_Smart_in_Five_Minutes__What_is_vulnerability_remediation___3_.png&w=3840&q=75 2x",
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F3CU8q4q4mZOlYfqtd1eBjk%2F7805fbc25b342e7dbeb7edc677da0b77%2FGet_Smart_in_Five_Minutes__What_is_vulnerability_remediation___1_.png&w=1920&q=75 1x, /_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F3CU8q4q4mZOlYfqtd1eBjk%2F7805fbc25b342e7dbeb7edc677da0b77%2FGet_Smart_in_Five_Minutes__What_is_vulnerability_remediation___1_.png&w=3840&q=75 2x",
            "https://www.chainguard.dev/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fl47ir7rfykkn%2F1HRZvzz21dgG7p31sWBWl6%2F8415ace0b67e3e44d8cabf8e409ba1cd%2FBlog_Main_Dark.png&w=3840&q=75 1x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Discover how SBOMs (Software Bill of Materials) enhance software security. Learn to identify vulnerabilities, track components, and manage risks effectively.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.chainguard.dev/unchained/what-an-sbom-can-do-for-you",
        "text": "If you’ve been around the computing industry lately, you’ve probably brushed against the term SBOM at some point or another. By now, it is common knowledge that a Software Bill of Materials (or SBOM) is becoming an increasingly expected requirement from software releases. Reading through blog posts and social media, there some confusion still persists about what an SBOM can do for your project. This post lays down some basic facts about SBOMs and how they can help you and your project become a better citizen of the global software supply chain.\n\n‍\n\nWhat Exactly is an SBOM?\n\nHave you ever noticed the packing slips attached to the sides of parcels when the UPS truck drops them? These packing slips contain several pieces of information that describe what is actually inside the box you are getting. It contains data about where it came from: the sender’s address, the time it was mailed, sometimes data about international customs the shipment may have traversed. It also contains data about the contents: it will generally contain a list of what is enclosed in the box, the quantities, the cost, and some other data which may prove helpful when checking if all your stuff is in there and it matches your order. The slip may also list some metadata about the manufacturing process that brought to life your items: lot number, model or generation of your product, serial number, and so on.\n\n‍\n\nA Software Bill of Materials allows consumers and developers to do the same with software components plus a lot more. An SBOM is an electronic packing slip but with some additional superpowers!\n\nThe Two SBOM Standards\n\nMost projects that produce or process SBOMs today will do so in one of two standards: CycloneDX and SPDX. These standards compete in a friendly way but also share ideas and the same final goal: give the world better introspection into software releases. Let us talk briefly about each one.\n\nCycloneDX is sponsored by the Open Web Application Security Project (OWASP). It has a rich toolset with a lively community behind it. CycloneDX SBOMs have metadata associated with them and then describe sets of elements categorized as components, services, and dependencies. To tie all of these together, the SBOM defines compositions that define the relationships among the elements.\n\n‍\n\nSPDX (The Software Package Data Exchange) is a project of the Linux Foundation. There are a number of tools written by the SPDX Team at the LF as well as several community written tools that can create and read SPDX SBOMs. The model of an SPDX SBOM defines three elements: Document, Package, and File.\n\n‍\n\nDocument defines metadata about the SBOM\n\nPackage is a concept that groups together one or more elements\n\nFile is, well, pretty much self-explanatory: a single file.\n\n‍\n\nOne big difference between SPDX and CycloneDX is the rich set of relationship kinds that the SBOM can express about its elements. For example, a file can be CONTAINED_BY a package, while the package is a PACKAGE_OF that same file. The relationships expressed in an SPDX SBOM can be very accurate and quickly become quite complex (in a good way!).\n\n‍\n\nThe Ultimate Purpose(s) of the SBOM\n\nSBOMs serve different purposes and can be leveraged by different kinds of users. If you are thinking about SBOMs for your project, consider that generating an SBOM takes you no further than the start line; the real value of an SBOM comes from actually using the information in it. Let’s go over some of the most common uses.\n\n‍\n\nLocate and Describe a Software Component\n\nAn SBOM publishes data about a software component. The data contained within allows any link in the supply chain to locate a specific component in “space” and time: we can determine where a certain component was created and when. In addition, the SBOM informs consumers about who published the component and what they can do with it (licensing data).\n\n‍\n\nAutomation\n\nIn a complex system like a software supply chain, there would be little use for an SBOM if it did not enable the automated processing of its information. In the future, projects will be able to act on different pieces of machine-readable information contained in the documents. Do you need to be alerted of a compliance issue due to incompatible licensing? Done. A security alert in one of your dependencies? Your SBOM has you covered. Missing components in a software release? No problem. These are some of the common systems I’ve seen today but I am sure there are many others yet to come.\n\n‍\n\nLicensing\n\nAs stated in the previous two points, SBOMs allow you to check the overall licensing compliance in your project. A software project may pull dozens or even hundreds of dependencies, each of them released under a different license. If you skim the latest Kubernetes source SBOM for example, you’ll notice that the project pulls 236 dependencies released under eight different licenses:\n\nPackageLicenseInfoFromFiles: Apache-2.0 PackageLicenseInfoFromFiles: BSD-2-Clause PackageLicenseInfoFromFiles: BSD-3-Clause PackageLicenseInfoFromFiles: CC-BY-SA-4.0 PackageLicenseInfoFromFiles: GPL-2.0-only PackageLicenseInfoFromFiles: ISC PackageLicenseInfoFromFiles: LGPL-3.0-only PackageLicenseInfoFromFiles: MIT\n\nCrossing this data with the SPDX license list allows you to check if your project is using software that restricts its usage or if you can confidently release your code as Open Source.\n\n‍\n\nSecurity\n\nProbably the most common use right now of the data in SBOMs is checking if you have security vulnerabilities in your dependencies. If a flaw is discovered in one of the libraries your code depends on, you can query the data in your SBOMs to determine if you are affected and find out which projects and versions are vulnerable.\n\n‍\n\nBut the story does not end at the dependency level. Your SBOM can help you find out if there is a problem with the base images you are using to create your containers. Properly defined, an SBOM will tell you the underlying layers a container image uses. If a vulnerability surfaces in one of your images, you can use your SBOM to check if you are using an affected hash.\n\n‍\n\nSpeaking of security, it is important to note that currently, trusting an SBOM requires signing and verifying it. While the SBOM provides the required data to cryptographically verify software components, the SBOM itself needs to be signed to enable consumers to check the integrity of the document itself.\n\n‍\n\nStatus of Tools and Cooperation\n\nWorking with SBOMs, meaning their creation, and consumption is still in the early stages of adoption. Tools still do different interpretations of the specifications in the way they express components and their metadata. Writing and consuming SBOMs is still a bit chaotic. The good news is that since the issuance of Executive Order 14028, (Executive Order on Improving the Nation's Cybersecurity) things are evolving rapidly thanks to different initiatives.\n\n‍\n\nThe Cybersecurity and Infrastructure Security Agency (CISA) recently hosted the SBOM-a-rama, a two-day event that, beyond its incredible name, brought together SBOM tool makers, government, and users across many, many industries to discuss use cases, tools, and future expectations. The Linux Foundation has the Automated Compliance Tooling project where SBOM tool maintainers are in constant discussion about the bill of materials landscape. The ACT-TAC incubates and supports the development of several SBOM tools like Tern, FOSSology, the OSS Review Toolkit, Quartermaster, and, most recently, the Kubernetes SBOM Tool. The LF also hosts the SPDX DocFest, a recurring event where tool writers run their tools against a common set of sample projects, and then the output of all of them is compared to work towards interoperability.\n\n‍\n\nThe Future: Your Tool Will Be SBOMin’ Soon\n\nWhile producing and consuming SBOMs may seem daunting at times, the future is bright. As discussed in the previous paragraph, tools are working together to work towards interoperability and standards improvement. In the coming months, all of these efforts will result in better standalone tools, but the most important thing is that SBOM capabilities will start appearing in a tool near you.\n\n‍\n\nMost of the tools listed above also offer open source libraries that can be reused in other projects to add SBOM support, and we already have some examples out there: Last month, GoReleaser added to its magic powers a feature to create SBOMs. The popular ko image building tool now creates SPDX documents describing the Go dependencies of the images it creates. publish-release, a simple utility to create GitHub releases maintained by the Kubernetes Release Engineering team now writes an SBOM when cutting a new release. Like these tools, you can expect SBOM capabilities to crop up in the coming months in software you currently use.\n\nI'd like to give a special shout-out to Batuhan Apaydin aka developer-guy and Furkan Türkal for spearheading this trend by raising awareness and building SBOM support into tools across the open source landscape!\n\n‍\n\nAt Chainguard, we are working with customers and open source projects to make this sort of seamless adoption a reality. Our mission is to make the supply chain secure by default, in part by building these kinds of modern supply chain technologies into them."
    }
}