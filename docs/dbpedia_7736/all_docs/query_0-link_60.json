{
    "id": "dbpedia_7736_0",
    "rank": 60,
    "data": {
        "url": "https://thoughtbot.gumroad.com/l/maintaining-open-source-projects",
        "read_more_link": "",
        "language": "en",
        "title": "Maintaining Open Source Projects",
        "top_image": "https://public-files.gumroad.com/vql4d12vkw6hl9e61bdk67206sb2",
        "meta_img": "https://public-files.gumroad.com/vql4d12vkw6hl9e61bdk67206sb2",
        "images": [
            "https://public-files.gumroad.com/iiryyf3yfy28vgk6mp797oodchh7"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A successful open source project is not only one that is original, solves a particular problem well, or has pristine code quality. Those skim the surface of a topic which we'll thoroughly dissect with this book.Maintaining Open Source Projects is a pre-release. The cost will increase when it is completed.Is this book for me?You might be a maintainer of an open source project. Maybe you host repositories publicly in GitHub and someone has started using and contributing back to them. Or perhaps you're a member of a team that applies open source practices and workflows, giving your company an open source like organization.Your project may have a following and you don't know how to communicate with it, how to prioritize their requests, how to answer questions.You want to learn the communication patterns that make it possible for a large open source project to move forward, while your 5-people team can't come to agreement on the name of a method.You want to make sure your bar is high enough for providing a reliable project to your following.You want to follow best practices but can't know them all. When to release new versions, how to decide version numbers, when to open source, when to add contributors, what to automate.You want to get your project more attention and grow its user base.Table of ContentsPrefaceCommunityCommunication channelsAnswering questionsIssue tracker gardeningHow much communication is enough?On effective feedbackExpectations and guiltGit &amp; GitHubRequest small, cohesive commitsRequest good commit messagesRequest good git historyReject patchesMaintaining QualityAdopt a style guideUse static analysis toolsRequest regression tests for every changeRun tests on every commitChoose your own valuesDocumentationREADMEOverviewInstallingNewsCode of ConductContributingReleasingWikiLicensesPublic domain - CC0Copyleft licenses - GPL, LGPLPermissive licences - Apache, BSD License (modified), MIT License (X11), ISC LicenseDual LicensingOther permissive (and informal) licenses - WTFPLVersioning &amp; ReleasingSemantic VersioningPublishing a new releaseMaintenance releasesRelease version 1.0Releasing new versionsSecurity releasesDeprecation cyclesQuitting as a maintainerConclusionResourcesMaintaining Open Source Projects was written by Tute Costa.",
        "meta_lang": "en",
        "meta_favicon": "https://public-files.gumroad.com/iiryyf3yfy28vgk6mp797oodchh7",
        "meta_site_name": "Gumroad",
        "canonical_link": "https://thoughtbot.gumroad.com/l/maintaining-open-source-projects",
        "text": "$0 +\n\n$0 +\n\nhttps://schema.org/InStock\n\nusd\n\nthoughtbot\n\n1 rating\n\nA successful open source project is not only one that is original, solves a particular problem well, or has pristine code quality. Those skim the surface of a topic which we'll thoroughly dissect with this book.\n\nMaintaining Open Source Projects is a pre-release. The cost will increase when it is completed.\n\nIs this book for me?\n\nYou might be a maintainer of an open source project. Maybe you host repositories publicly in GitHub and someone has started using and contributing back to them. Or perhaps you're a member of a team that applies open source practices and workflows, giving your company an open source like organization.\n\nYour project may have a following and you don't know how to communicate with it, how to prioritize their requests, how to answer questions.\n\nYou want to learn the communication patterns that make it possible for a large open source project to move forward, while your 5-people team can't come to agreement on the name of a method.\n\nYou want to make sure your bar is high enough for providing a reliable project to your following.\n\nYou want to follow best practices but can't know them all. When to release new versions, how to decide version numbers, when to open source, when to add contributors, what to automate.\n\nYou want to get your project more attention and grow its user base.\n\nTable of Contents\n\nPreface\n\nCommunity\n\nCommunication channels\n\nAnswering questions\n\nIssue tracker gardening\n\nHow much communication is enough?\n\nOn effective feedback\n\nExpectations and guilt\n\nGit & GitHub\n\nRequest small, cohesive commits\n\nRequest good commit messages\n\nRequest good git history\n\nReject patches\n\nMaintaining Quality\n\nAdopt a style guide\n\nUse static analysis tools\n\nRequest regression tests for every change\n\nRun tests on every commit\n\nChoose your own values\n\nDocumentation\n\nREADME\n\nOverview\n\nInstalling\n\nNews\n\nCode of Conduct\n\nContributing\n\nReleasing\n\nWiki\n\nLicenses\n\nPublic domain - CC0\n\nCopyleft licenses - GPL, LGPL\n\nPermissive licences - Apache, BSD License (modified), MIT License (X11), ISC License\n\nDual Licensing\n\nOther permissive (and informal) licenses - WTFPL\n\nVersioning & Releasing\n\nSemantic Versioning\n\nPublishing a new release\n\nMaintenance releases\n\nRelease version 1.0\n\nReleasing new versions\n\nSecurity releases\n\nDeprecation cycles\n\nQuitting as a maintainer\n\nConclusion\n\nResources\n\nMaintaining Open Source Projects was written by Tute Costa.\n\nName a fair price:\n\n$\n\nI want this!\n\nAdd to wishlist\n\nNew wishlist\n\nCopy product URL\n\nRatings\n\n5\n\n( 1 rating )\n\n1\n\n5\n\n5 stars\n\n100%\n\n4 stars\n\n0%\n\n3 stars\n\n0%\n\n2 stars\n\n0%\n\n1 star\n\n0%"
    }
}