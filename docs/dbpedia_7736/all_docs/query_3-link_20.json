{
    "id": "dbpedia_7736_3",
    "rank": 20,
    "data": {
        "url": "https://medium.com/shecodeafrica/understanding-software-licenses-a-developers-guide-a9a97584aef0",
        "read_more_link": "",
        "language": "en",
        "title": "Understanding Software Licenses: A Developer’s Guide",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*Tvsb9yyx08ZEQwcyQvEIUQ.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*Tvsb9yyx08ZEQwcyQvEIUQ.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*SEjJsVY6OgudwsT6u9hkcg.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*geRneYKqDwC7SFRozrVTeQ.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*SEjJsVY6OgudwsT6u9hkcg.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*geRneYKqDwC7SFRozrVTeQ.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Precious Abubakar",
            "preciousdanabubakar.medium.com"
        ],
        "publish_date": "2023-06-10T08:13:37.205000+00:00",
        "summary": "",
        "meta_description": "Gain a solid understanding of software licenses with this beginner-friendly developer guide. Navigate types, benefits, and compatibility of common licenses.",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/shecodeafrica/understanding-software-licenses-a-developers-guide-a9a97584aef0",
        "text": "Software licenses are legally binding documents that provide guidelines for the use, modification, and distribution of software. Understanding software licenses is essential for a developer to make informed decisions when it comes to using and contributing to open source projects or creating proprietary software.\n\nThis article provides an overview of software licenses and the different types of licenses that a developer may encounter.\n\nTypes of Software Licenses\n\nPublic Domain License\n\nA public domain license (CC0) waives all rights to the software. If your project is in the public domain, that means it is not protected by any copyright laws and can be freely used, modified, and distributed.\n\nProprietary License\n\nProprietary licenses restrict the distribution, modification, and use of software. The software owner usually maintains control over the source code, features, and usage of the software.\n\nOpen Source/Permissive License\n\nOpen source licenses allow software to be used, modified, and shared without restrictions. They align with the specifications of the Open Source Definition. e.g. MIT license.\n\nCopyleft License\n\nCopyleft licenses are designed to promote free software. “Free” in this context refers to the freedom to share and modify works. The most common one is the GNU General Public License (GPL). The GPL is similar to open source licenses, but it requires that any modifications or derived works be released under the same GPL license. This ensures that the software and its derivatives remain open source and accessible to the community.\n\nBenefits of Software Licensing\n\nA license grants permission so that you don’t have to do it for each individual user.\n\nLicenses protect your intellectual property. They control how your software/source code can be used and prevent piracy.\n\nOpen Source Licenses\n\nOpen Source Initiative (OSI) has an exhaustive list of open source licenses. The most commonly used ones are highlighted below.\n\nThe MIT License\n\nThe MIT License grants permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software under certain conditions.\n\nThe first condition is that the license text must be included in all copies or substantial portions of the software. This ensures that anyone using the software knows that it is licensed under the MIT License and is aware of the license terms.\n\nThe second condition is a disclaimer of liability, which means that the authors or copyright holders cannot be held responsible for any problems that may arise.\n\nIn summary, the MIT License is a permissive software license that allows users to do almost anything they want with the software, as long as they include the license text and do not hold the authors or copyright holders liable for any problems that may arise.\n\nGNU General Public License (GPL)\n\nThe GNU General Public Licenses grant permission to use, modify or use pieces of the software in new programs, and distribute copies of the software. It requires that the source code is made available to users, and allows for commercial use and distribution of the software.\n\nUnlike MIT, the GNU General Public License is a copyleft license, which means that distributed works based on the software are required to use the same license as the original. As a result of this, software licensed under the GPL cannot be used in paid or proprietary software. However, the Lesser General Public License exists for this purpose.\n\nGNU Lesser General Public License (LGPL)\n\nThe GNU Lesser General Public License is similar to the GPL, but without certain restrictions. It allows users to modify and distribute the software without adopting a GNU License, allowing it to be used in proprietary software.\n\nApache License (Apache-2.0)\n\nThe Apache License is a permissive license that grants individuals and organizations permission to freely use, modify, and distribute software.\n\nAn interesting feature of the Apache License is its patent clause. This clause grants users the right to use any patents that the contributors to the software may hold. This can be helpful if you are using the software for commercial purposes, as it can help protect you from patent infringement claims.\n\nLike most open source licenses, The Apache License also contains a disclaimer of warranties and limitations of liability. This means that the software is provided “as is” and that the original creators of the software cannot be held responsible for any damages that may result from using the software\n\nIf you create a derivative work based on software licensed under the Apache License, you must include a copy of the Apache License in the new work and retain any copyright, patent, and trademark notices that were included in the original software. You must also clearly indicate any modifications that you made to the original work, and include attribution notices to give credit to the original creators of the software.\n\nOverall, the Apache License is a flexible and permissive license that allows for broad use of open-source software, while also providing some protections for both users and contributors.\n\nBSD License\n\nThe BSD license allows users to modify, distribute, and use the licensed software without any restrictions on the licenses of derivative works.\n\nThe BSD License comes in two forms: the two-clause BSD license and the three-clause BSD license. The two-clause BSD license only contains a copyright notice and a disclaimer of warranties, while the three-clause BSD license adds an additional clause that requires users to include attribution notices in derivative works.\n\nSimilar to other open-source licenses, such as the Apache License, the BSD License contains a disclaimer of warranties and limitations of liability.\n\nOverall, the BSD License is a popular choice for open-source projects that value flexibility and minimal restrictions on the use and distribution of their software. However, it may not be the best choice for projects that require stronger protections for their intellectual property.\n\nMozilla Public License (MPL)\n\nThe Mozilla Public License (MPL) is a permissive open-source license that allows users to modify, distribute and use the licensed software without any restrictions on the licenses of derivative works. It is also a copyleft license, as it requires that any derivative works include a copy of the MPL and retain any copyright, patent, and trademark notices.\n\nThe MPL also contains a patent license clause that provides users with the right to use any patents that a contributor to the software may own. The license has a disclaimer of warranties and limitations of liability, similar to other open-source licenses.\n\nOne drawback of the MPL is that it may be less compatible with other open-source licenses than some of the more permissive licenses, such as the MIT or Apache Licenses. This can limit the potential for collaboration between projects that use different licenses. However, the MPL is still a widely used open-source license and is particularly popular for software projects with a strong focus on community development and collaboration.\n\nProprietary Licenses\n\nSome common types of proprietary software licenses are highlighted below.\n\nEnd User License Agreement (EULA)\n\nAn End User License Agreement (EULA) is a legally binding contract between the user and the software owner, which defines the terms and conditions under which the software can be used. Lots of companies make use of EULAs. For example, Microsoft uses an EULA for Windows.\n\nThe EULA restricts the user from modifying the software, distributing it without permission, or using it in certain ways.\n\nAn EULA must be clear and concise. It must contain the following information:\n\nCopyright notice\n\nInfringement acknowledgement\n\nLicensor information\n\nSoftware information\n\nRelevant laws\n\nWarranty Disclaimer\n\nRestrictions for use\n\nSite licenses\n\nStart date\n\nTermination of licensing\n\nLicense granting\n\nFor a sample, try this free EULA generator.\n\nPerpetual License\n\nA perpetual license is an old model of licensing that grants users permission to use the software indefinitely, after a one-time payment. The license holder has access to that specific version of the software indefinitely. This model is being phased out in favor of subscription-based license models because it does not account for updates and patches, just a one-time revenue hit, which makes it problematic for software owners and end users. It was popular in the early days when you purchased a program by buying a disk with a built-in license.\n\nAutoCAD (a design software) used to have a perpetual license, but has moved to a subscription license.\n\nSubscription License\n\nSoftware has evolved from being perceived as products to Software as a Service (SaaS), and the subscription license model has taken over. It involves paying a regular fee (monthly, annually, or otherwise) to use software, as opposed to a one-time purchase.\n\nSubscription licenses offer benefits such as updates and flexibility. With a subscription license, you can offer different tiers of service, and users can choose what meets their needs. Your users can also upgrade or downgrade their subscription based on their changing requirements, reflecting the adaptability needed in today’s dynamic world.\n\nSubscription-based licenses eliminate the need for a significant upfront investment as opposed to perpetual licenses. Budgeting becomes easier with regular smaller payments compared to a large one-time payment. Maintenance, upgrades, and renewals are typically included in the subscription cost, unlike perpetual licenses which may require additional expenses as warranties expire. A lot of modern software uses subscription licenses, e.g. Adobe Creative Suite.\n\nFloating License\n\nA science club requests to use your library for research, and you approve their request on one condition- only one person can be granted access at any given time. Since all 5 members do not actually need to use the library at the same time, they have gladly accepted your offer. This is essentially how a floating license works.\n\nA floating license grants a group of users shared access to your software. This means that the software can be installed on a network of computers, allowing access to multiple users. The downside for users is that if the floating license is for 2 users and 2 people are currently using the software, a third user would have to wait. Adobe Creative Cloud offers floating licenses for schools.\n\nChoosing a License\n\nChoosing the right license for your project is essential. Here are some factors to consider when navigating this process.\n\nProject Goals\n\nExamine the goals of your project. Think about how you want it to be If you want to generate revenue from the project and have control over its usage, proprietary licenses might be the way to go. Open source licenses are ideal for fostering community involvement and collaboration.\n\nCommunity and Support\n\nConsider the existing community and support surrounding various licenses. Open source licenses often come with communities offering assistance, comprehensive documentation, and opportunities for collaborative contributions. This support can be invaluable, providing guidance and fostering growth.\n\nOpenness\n\nWhen considering a license, contemplate the level of freedom you want to grant your users. Open source licenses encourage collaboration and the sharing of knowledge, while proprietary licenses grant you greater control over your software. Note that Open Source software does not automatically mean free software (”free” in this context is referring to price).\n\nCompatibility\n\nThink about any obligations you have, such as licensing requirements from third-party libraries or components governed by specific licenses. Ensure compatibility between licenses to avoid conflicts or legal issues. For example, if you’re using a third-party library with a GNU GPL, your project cannot have a proprietary license.\n\nLegal Requirements\n\nWhile not the most exciting aspect, legal requirements are crucial. Take the time to acquaint yourself with the legal implications and obligations associated with different licenses. Complying with license terms helps avoid legal pitfalls and ensures a smooth development process.\n\nConclusion\n\nIn conclusion, understanding software licenses is vital for developers. It allows you to make informed decisions about how your software can be used, modified, and distributed. It is essential to consider factors like project goals, community support, openness, compatibility, and legal requirements when choosing a license for your project. By navigating the licensing landscape effectively, you can make the best choice for your project.\n\nResources\n\nLicenses — Open Source Initiative\n\nHow to Choose the Right Licensing Model for Your Software\n\nSample End User License Agreement Template\n\nWhat’s a Perpetual Software License?\n\nSoftware Subscription License\n\nWhat is a Floating Software License? Not a Standard License\n\nShe Code Africa\n\nShe Code Africa (SCA) promotes diversity in the tech ecosystem by empowering African girls and women in tech with the tools and technical skills needed to scale in their fields. SCA creates opportunities for women through programs like open source bootcamps, cloud engineering bootcamps, data scholarships, and more.\n\nStay updated on information about the next program via SCA’s social media platforms.\n\nTwitter: @shecodeafrica\n\nInstagram: @shecodeafrica\n\nLinkedIn: She Code Africa"
    }
}