{
    "id": "dbpedia_7736_0",
    "rank": 23,
    "data": {
        "url": "https://felixcrux.com/library/what-you-need-to-know-about-open-source-licensing",
        "read_more_link": "",
        "language": "en",
        "title": "What You Need To Know About Free & Open Source Software Licensing",
        "top_image": "https://felixcrux.com/media/img/favicon.png",
        "meta_img": "https://felixcrux.com/media/img/favicon.png",
        "images": [
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-1.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-2.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-3.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-4.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-5.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-6.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-7.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-8.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-9.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-10.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-11.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-12.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-13.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-14.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-15.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-16.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-17.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-18.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-19.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-20.png",
            "https://felixcrux.com/media/talks/pycon2016-licensing/slides/slide-21.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Video, text, and slides of the talk 'What You Need to Know About Free & Open\nSource Software Licensing'; presented at PyCon 2016 in Portland, Oregon.",
        "meta_lang": "en",
        "meta_favicon": "/media/img/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Hi. My name is Felix, and this talk is âWhat You Need To Know About Free & Open Source Software Licensingâ.\n\nI wanted to talk about this topic because even though Free and Open Source software are ubiquitous now, the legalese that makes it all work can be kind of confusing, boring, and even intimidating; and sometimes it might seem a bit like meaningless magic incantations that you just have to chant in the correct way and hope that everything works out.\n\nBut, really, it turns out that the core ideas that underpin the system are pretty easy to understand, and if you take the time to do so â like by coming to this talk â it can not only help you see why things are the way they are, but it can give you new ways to influence and control how your software is used, and help you make sure it achieves the goals you set for it.\n\nMoral rights are a very closely related concept to copyright. In some countries theyâre considered just a subset of copyright, and in some places theyâre a bit different, and in some places they donât exist at all. Moral rights are sort of the non-commercial part of copyright. Itâs not so much about making money off your creation, itâs about things like the right to be identified as the author, or the right to the integrity of the work. Integrity in this context means keeping people from changing or presenting your work in ways you donât like, like putting on a display defacing your art, even if they own it.\n\nMoral rights, unlike basic copyright, might not always be automatically granted in all countries. In the UK for example, you have to âassertâ them, which basically just means you have to say that you want to have them.\n\nMoral rights also behave very differently. They might not be time-limited, they might last forever. They might even pass down to your heirs. So your grandkids maybe will have a say in what people are allowed to do with your software. And, in some countries, you cannot waive, reject, give away or sell your moral rights. Itâs just not allowed, like how youâre not allowed to agree to be murdered. Weâll talk more about the implications of that later on, and why itâs important. And yes, the fact that in some countries you cannot get rid of your moral rights does turn out to be important.\n\nThe next big kind of intellectual property I want to talk about are patents. Where copyright was about creative works, patents are about protecting functional inventions. The deal is that if you share the details of how your new gizmo works, society in exchange gives you this exclusive monopoly on the invention for a little while.\n\nFor the purposes of this talk, which is about licensing, weâre mainly concerned with patents as they relate to sneaky patent trolls and some of the tricks they can try to pull. For example, the owner of a patent might try to get their patented software technique adopted as a standard, so that anyone who implements that standard has to pay them money for a license or risk getting sued. Or they might even contribute the code that implements their technique, and then later, either because they planned it, or just because they changed their minds, they might come back and try to sue you for using it. Some licenses have protections against this kind of thing, and when we talk about those I will call it out. Itâs a good thing to have.\n\nAs a side note, there is also something called a âdesign patentâ, which covers the way a product looks. That is not the same thing as a regular patent. It doesnât work the same way. Itâs not meant to cover the same kinds of things. But youâll sometimes see people getting confused and angry and saying stuff like âoh no so and so is trying to patent the rectangle or the colour blueâ. If you hear stuff like that, donât get worked up; just send them a link to the Wikipedia page on design patents. Which are not the same thing as regular patents.\n\nAnd really quickly, last up, are trademarks.\n\nThe idea behind a trademark is to protect consumers from fakes that might be trying to take advantage of the good reputation of a particular brand by imitating or copying their name or logo or identifiers like that. This doesnât usually come up in software licenses directly, but it can definitely be an issue for software projects, especially user-facing ones.\n\nYou might remember that in 2013, the PSF had to defend the name âPythonâ, and up until very recently earlier this year, the Debian GNU/Linux distribution shipped Firefox under the name Iceweasel because of disagreements about trademarks, even though the licensing of the code was fine. It was a friendly disagreement, though, and both sides had very good points, and theyâve now sorted it all out, which is great.\n\nBut again, most licenses donât have anything to say about trademarks, but you should know what they are because they might be an issue. If you expect end users to be able to recognize the name and brand of your project, think about what rights or requirements you might want to give to people who fork your code. Can they associate themselves with your brand?\n\nIn general, just try not to rip off anyoneâs name or logo.\n\nThere are other kinds of intellectual property as well, but theyâre not really relevant to software licensing, so weâre just going to ignore them.\n\nSo why do we need licenses at all? Well, intellectual property law is a reality, whether we like it or not. And since copyright is both so powerful and automatic, we have to live with it and operate within its boundaries. But itâs not just a bunch of restrictions: We can also work within the confines of these laws to achieve the outcomes we want for our software. We can use the law in ways that are beneficial and that actually help spread our work.\n\nA license is a set of permissions you give to someone. When you create something like a piece of software, you alone have rights to it and you have control over how to share those rights with others. Licenses are what we use to give people rights they wouldnât ordinarily have. Like the right to use the software, to modify it, or to copy and share it.\n\nLicenses can also be used to set conditions or create obligations. The most obvious example is proprietary software, which generally has a license that only gives you the right to use it, but prohibits you not just from copying and sharing it but often also from reverse engineering it, or in some cases, even from things like benchmarking the performance of the software and sharing that data, like some proprietary database licenses do.\n\nThose are some pretty odious parts of some proprietary licenses, but free and open source license agreements usually have obligations and requirements as well â theyâre just of a different nature. Weâll look at some of those in a moment.\n\nUsually, if you donât comply with the obligations that a license creates, you lose all the rights it would otherwise have given you, and there may be other penalties as well.\n\nThe key idea is that without a license nobody has any rights to the software, and the license is the thing whereby the creator grants those rights.\n\nAnd no, just publishing the source code, like by throwing it up on GitHub without a license does not give anyone any rights. Thatâs not code you can use. Itâs just code that you happen to be able to look at, just like you can look at my laptop sitting up here right now, but you donât have the right to take it home after this talk. Without a license, the code is not for you.\n\nAll right; enough background! Letâs look at some licenses.\n\nThe first category I want to talk about are known as âpermissiveâ licenses. These are the simplest kind. They almost just say âyou can do pretty much whateverâ with this software. You can build proprietary stuff on top of the code. You usually just have to provide attribution, meaning you have to give credit to the person who wrote it, and thereâs often also a warranty disclaimer that says the author isnât responsible for what you do or how you mess up using the code. Thatâs a good idea to have, by the way. You should not use a license without that.\n\nYouâd generally pick a permissive license like this when your goal is just for the code to be shared and used as widely as possible. Youâre trying to make life as easy as possible for developers, by making everything available to them for whatever use they want, even if they donât want to reciprocate by sharing their improvements.\n\nThis is a very pragmatic approach. Itâs very business-friendly, and having companies who care about improving your code and can pay people to work on it can be very powerful. Just be sure that you would really be OK with seeing someone make a lot of money off of your work and give you nothing in return. Because that can and does happen, and theyâre well within their rights.\n\nPeople from the communities around these licenses usually talk about âopen sourceâ, not about âfree softwareâ, and itâs very non-political, non-activist. Itâs about the practicality of the process of developing in the open. Itâs about working more efficiently, not about overthrowing copyright.\n\nThere are a number of licenses like this. Here are a bunch. They differ in minor ways, and some are more popular in certain communities. The JavaScript world seems to be fond of the X11 and Expat licenses, usually lumped together as âthe MIT licenseâ; also very popular with Python devs. The BSD folks, like OpenBSD and FreeBSD, they unsurprisingly like the BSD or ISC kinds.\n\nHonestly, all of these are pretty similar. If you want to go with this approach, read them and pick one you like the look of, or one your community uses a lot.\n\nJust one caution on that suggestion, though. Donât go too overboard with the idea of just picking what your community uses. Right now the cultural fashion is sort of to go very permissive, to maybe not even think about the question at all and just throw the MIT license on everything. But remember that licenses are tools, and they serve different purposes. These are all good licenses if they match what you want them to do, the way that any brand of screwdriver is gonna be fine to drive a screw. But if you actually need to hammer a nail, you shouldnât grab a screwdriver just because it happens to be nearby. So itâs worth sitting down and really thinking about what you want to achieve with your project, and also what you donât want people to do with it. If you decide you want a permissive license, thatâs great. But you should decide that, you should think about it and reach that conclusion on your own, rather than ignoring the question and picking whatever happens to be popular right now. End of sidenote.\n\nThere is one popular permissive license thatâs a bit different, though, and thatâs the Apache 2.0 license, named after the Apache Software Foundation. Itâs a little more verbose than the ones we just looked at, and it has some kind of slightly annoying requirements about putting notices in files youâve changed, but it also has a really important clause that the others donât: and thatâs a âGrant of Patent Licenseâ.\n\nWhat this clause does is it makes it so that anyone who contributes to the code is also granting everyone who uses the code a license to use any of their patents that would otherwise be infringed upon by the code that was contributed. This is basically a patent-troll killing anti-patent-ambush clause.\n\nIt actually goes even further and says that if you do sue anyone over patents related to the software, then you actually lose those patent licenses that everyone else granted you. Itâs almost like a mutually-assured destruction clause, where if you start a patent war, youâre opening yourself up to the same kind of retaliation.\n\nNow, do you need this for your software? It can never hurt, itâs never a bad thing. But sometimes maybe you want to use a different license because itâs popular in your community, or because you donât want to deal with the Apache requirements about notices of modification, or whatever, so youâll just have to think about whether your particular project is particularly susceptible to patent issues.\n\nThings like video codecs, for example, are a minefield, but honestly the whole software patent field is so full of noise that itâs hard to tell what might or might not be dangerous. If youâre working with anything thatâs high risk, I strongly recommend you use a license with a patent clause, and among the permissive licenses, the Apache 2.0 one is the best one in that regard.\n\nThe second major family of licenses I want to talk about are the Copyleft ones. Historically, this is the category associated with the Free Software movement, which is the activist and political part of the community. Itâs also, really, the origin of most of this movement. Some of the revolutionary zeal has fallen away, and maybe people are focusing more on the practical benefits of developing in the open, but itâs worth understanding where these licenses came from and what their creators intended.\n\nThe motivation behind a copyleft license is to promote user freedom. Itâs not to make life easy for developers, itâs not to let you bootstrap your startup faster, itâs not to invite collaboration from industry, although all of those can happenâ¦ but really the goal is to guarantee that users have the so-called âfour freedomsâ: the freedom to use the program as you wish, for any purpose; the freedom to study it and change it; the freedom to share the program; and the freedom to redistribute your changes as well.\n\nTo guarantee these freedoms, the central idea that makes a license a copyleft one is that it requires you to share the changes you make under the same terms that others shared them with you. This ensures that even if many people layer changes on top of the code youâve released under a copyleft license, the end users of that product will still have those freedoms you wanted to give them. Copyleft licenses donât prevent you from making commercial software, but they do prevent you from making proprietary software.\n\nUnlike permissively licensed code, which people can take and incorporate into closed-source software, copylefted code spreads copyleft to code that mixes with it. This also means that you can incorporate permissively licensed code into a copyleft project, but not the other way around. This property is sometimes described as âviralâ, people say copyleft infects code and spreads in that way. I think they mean for that to sound scary and dangerous, but an organically-growing viral spread of free software is exactly the point of these licenses.\n\nYou donât have to use them, you donât even have to agree with them, but you do have to respect them. And if your goals with your project are aligned with the Free Software movement, then these are probably the licenses you want.\n\nThe first, and most well-known license in this category is the GPL: the GNU General Public License. Everything I said a moment ago about about what copyleft is, is really what the GPL is, because the GPL created and defines this whole category.\n\nOne key thing about it is that the âviralâ clauses that require you to share your code only kick in when you redistribute the software in some way. If you just make a local copy and change it for your own use and donât give it to anyone, youâre not required to share those changes.\n\nThe GPL disallows you from adding other restrictions to the licensing of the software (thatâs how it guarantees the code stays free). That obviously means you canât combine GPL code with code thatâs under a license thatâs more restrictive than the GPL, because youâd either have to violate the GPL by imposing those additional restrictions, or youâd have to violate the other license by not imposing them. This is mainly an issue with the GPL version 2, which notably is not compatible with the Apache license, partly because of that excellent patent clause that it contains, which, although itâs a good extra restriction, is an extra restriction, which the GPL forbids. Version 3 of the GPL fixes this, by also including that clause. So GPL version 3 is both more compatible, and includes patent protections, like the Apache 2.0 license. If you want to use the GPL, you should use version 3, and even a lot of things that were originally licensed under version 2 are actually licensed under âversion 2, or any later versionâ, which is the standard, recommended, way to use the GPL.\n\nThereâs a closely related license called the LGPL: the Lesser GNU General Public License. It differs from the regular GPL in that the âviralityâ aspect only applies to the specific code its attached to, not to anything thatâs just linked to it to build a larger software application. So you can have a LGPL library as part of even a proprietary application, and you only have to share your changes to the LGPL part.\n\nIt also comes with some requirements that are intended to make sure that users can always take advantage of the LGPL nature of that linked library code. Essentially users have to be able to replace the version youâve shipped with whatever version they want, which might be a newer version from upstream or their own custom one or whatever. The idea is that if you ship a non-free application built on top of an LGPL library, but then you decide to not support it or to change how it works or whatever, users have the freedom to control what version of that library they use on their system, so they can keep it up to date even if youâve stopped supporting it, or they can change behaviour that they want to be different or that they disagree with you about.\n\nThe third big license in this category (and to be clear, there are others, but they tend to be more specific to particular communities; these are the big ones), the third one I want to talk about is the AGPL, the Affero General Public License. The newest version is actually related to the GNU GPL and is more properly called the GNU Affero General Public License, so all of these form one big happy family.\n\nThis particular license was created to address what some people might perceive as a loophole in the regular GPL. The GPL requires that you redistribute your source to anyone you distribute the application to. But thereâs a big category of software that never actually gets distributed to its users: thatâs network applications. Servers that users only interact with remotely, through a client application, which includes web browsers. These are obviously big complex applications that end users are using, and which they rely on just as much as any desktop application, but technically the software was never distributed to them; itâs just running on the service providerâs servers somewhere. So the GPLâs sharing requirements donât kick in, even if the code running on that server is GPLâd and meant to be shared.\n\nThe AGPL fixes that. Itâs very similar to the GPL, but its sharing requirement kicks in even for users that just access the application over the network. That definitely scares some people, but again, remember that different licenses are used to achieve different goals, according to what the creator wants for their software. These copyleft free software licenses are deliberately very aggressive vehicles for ensuring the independence of users from the developers and service providers they would otherwise rely on.\n\nThe AGPL, LGPL and GPL 3 are compatible with one another; you can safely build an application that combines code under both licenses, but thatâs not the case for older versions of those licenses.\n\nNow, maybe youâre looking at these choices, and your head is spinning, and youâre thinking âthis is a mess, I donât know what to doâ or maybe even raging âI hate copyright lawâ and you conclude that you donât care about licensing, and you want to just throw the software out there and let anybody do whatever they want, no license.\n\nIt doesnât work like that.\n\nJust like you canât opt out of other laws you donât like. Iâd love to not have to pay for cheeseburgers, but I canât just go in to McDonaldâs and declare that Iâm a sovereign entity and Iâm gonna walk out with a free burger. If you donât have a license, nobody has rights to the code, even if you wish they did, and even if you put it up on GitHub.\n\nSome people still argue, like, âoh Iâm not gonna sue anybody or anything like that, you can use my code, go aheadâ. Thatâs a great thing to say! Please, put that promise in writing! And distribute it with your code! Preferably in a file named âLICENSEâ. Except donât use your own words, just pick one of the licenses we talked about earlier. It will save us all a lot of trouble, and honestly, itâs not that much effort to do.\n\nNow, some of you are thinking at this point, âwhat about the public domain? Can I just say my stuff is public domain and forget about licenses?â. And for those of you who donât recall, the Public Domain is what we call stuff thatâs outside of copyright, either because the copyrights expired, or it wasnât eligible for copyright protection in the first place, or it was deliberately freed in that way.\n\nAnd yes, youâll encounter things out there that are attempting to sidestep the whole issue by more or less placing things in the public domain. Examples of this are the Unlicense and Creative Commons Zero. This is better than nothing, but overall, I canât really recommend it. At the very least you should protect yourself by including the warranty disclaimer language that licenses usually have. Even the Unlicense web site suggests that as an option.\n\nThe reason I canât recommend the Public Domain approach has to do with those Moral Rights we talked about earlier, in the intro to intellectual property when we talked about copyright in general. Moral Rights were the ones like the right to attribution, and in some places theyâre irrevocable and forever, and I promised weâd talk more about that later. Well, later is now, and this is why they matter.\n\nWhen you say youâre putting something into the public domain, or that people can do literally anything, youâre trying to give up those moral rights. And in some places, thatâs just not something the law lets you do. Just like you canât have a legal contract that lets someone murder you. The law actually limits what actions you can take that are detrimental to you. Usually this is put in place to protect against coercion and exploitation.\n\nSo when you attempt to give up the moral rights that you canât give up, youâre creating a legal uncertainty and a risk that the whole public domain dedication will get thrown out, and that your software will be treated as if you didnât give anyone any rights to it at all. Because legally, that public domain dedication might not be a meaningful, coherent, document. It might be null and void.\n\nThe Creative Commons Zero authors were actually aware of this problem, and if you read the full text of CC0, itâs really actually a public domain dedication, followed by a regular license that basically says âif the public domain stuff doesnât work, hereâs a licenseâ. But if youâre doing that, you might as well have gone with a regular license in the first place.\n\nNow, to be honest, this is mainly an issue outside of the United States and places with similar legal systems. But even if you are American, writing code in the USA, please donât make life harder for people just because they come from a country with a different legal tradition.\n\nAt the end of the day, choosing something like the Unlicense might feel like an anti-copyright political statement, but really youâre just creating difficulty for people in other countries, and youâre not gaining anything that you wouldnât get by just using a very permissive standard license. Think of your European colleagues and please use a proper license.\n\nAnd on that note, Iâll also ask that you please pick an existing license. Donât write your own. Sometimes people correctly understand that they need a license, but they also think that their situation is somehow really unique and that they have to make up their own new license. Or, more likely, give a pile of money to a lawyer who will happily accept it in exchange for doing absolutely minimal work by just rephrasing the same stuff thatâs already in other licenses.\n\nThe truth is that there are already licenses out there for every need you can think of. Find one that works for you.\n\nEvery new license that shows up in the wild just makes a lot of extra work for developers (and lawyers) who have to evaluate it and figure out whether itâs compatible with all the other licenses theyâre using. It imposes a very real cost, and you lose out the benefits of using common licenses like shared legal precedents and the common understanding and good-will that the community around an existing license has built up.\n\nYou can see an example of how this plays out with Doug Crockfordâs well-known JavaScript tools like jslint. The license is pretty standard except it adds the line âthe software shall be used for Good, not Evilâ. Now, admittedly, that is pretty hilarious, but the practical upshot of it is that Debian, Fedora, the GNU project, and others canât carry and redistribute it from their repositories, because obviously they have no control over how their end users use the software.\n\nHowever there is one organization that can redistribute it, and thatâs IBM, because IBMâs lawyers got a special exemption where Doug Crockford said âI give permission for IBM, its customers, partners, and minions, to use JSLint for evil.â And again, thatâs hilarious, but IBM is right here. Good for them for protecting their users and making sure they donât end up in front of a jury somewhere arguing about whether their business practices or maybe their political activism, is evil or not. But the whole thing represents a bunch of work, a bunch of pain, a bunch of wasted effort that could just have been avoided by sticking to a standard license.\n\nAnd even after all that, jslint is still being obsoleted by jshint, partly because it has a better license. And thatâs how it works for a big name famous person like Douglas Crockford: if youâre just starting out, and your project is obscure, the most likely outcome is your software will just be ignored. People will be uncomfortable with it because of the weird license. So pick an existing, well understood, common one.\n\nSo far weâve been focusing on code. But projects are usually more than that. At the very least thereâs documentation (there is documentation, right?), but also there are logos, tutorial videos, all kinds of non-code things. Often this is all just distributed under the same terms as the software, which is usually fine, nothing wrong with that.\n\nBut remember, the idea is to make use of licenses to further our goals. And the goals for non-code things might be different from the goals for code. For example, your code might be under a copyleft license that requires people who modify it to share their source too. That makes less sense for a video tutorial, or even just for documentation.\n\nSo you should be aware that you can license that stuff differently, under terms that are more suited to that kind of work. On the copyleft side, thereâs the GFDL, the GNU Free Documentation License, which works much like the GPL, except itâs not for code.\n\nAnd then thereâs also the whole Creative Commons suite, which has a really clever mechanism where you can pick and choose exactly how you want your license to work. They have these four atoms you can combine: attribution (meaning people have to give you credit), non-commercial (meaning people canât make money off your work), no-derivatives (meaning people canât change your work), and share-alike (which requires that people release their changes under the same license). And you can combine these to make your license. Except attribution is non-optional, because of the moral rights issues we talked about earlier, and of course share-alike and no-derivatives are mutually exclusive.\n\nSo for example you might use CC-BY-SA, meaning you require attribution, and changes must be shared the same way. Thatâs like a copyleft license. Or you might say commercial use is prohibited, but otherwise people can do whatever. Thatâs a very hippie license.\n\nBut itâs up to you, and these options work really well for stuff that isnât code. At the end of the day, you should know about these so you can deploy them when you need to to help your project succeed.\n\nSo far weâve talked a lot about how to share something thatâs entirely your work with the world. What about things other people are contributing? Or what about when youâre just adding a small piece to an existing codebase? There are a few options to be aware of.\n\nAt one extreme, thereâs copyright assignment. That means that the owner or manager of a software project wants contributors to actually give them ownership of the copyright, that is, not just license it to them, but make them the copyright holder.\n\nUnless you really, really, trust the manager of that codebase, this isnât something you should agree to. It just puts you in an ugly situation where the owner of that repository can do things like take the entire codebase proprietary and lock you out of your own work.\n\nThe one exception to this is if you have some really specific, targeted, reason to want that person to have ownership. For example, if youâve got an agreement with the Free Software Foundation to have them bring a GPL enforcement lawsuit. That is not a common situation.\n\nA bit less extreme is something called a Contributor License Agreement. This is a document that you have to sign before the project owner will accept your code. You still keep the copyright, but have a specific legal agreement in place that covers what rights they have, how they can redistribute your code, and so on. These are a bit of a hassle, but can be perfectly OK and serve valid and important purposes. They vary a lot, so itâs impossible to generalize about whether theyâre good or bad. Youâll just have to read the specific one youâre presented with very carefully and decide whether youâre OK with it. The Python Software Foundation one is fine, by the way.\n\nAnd finally, the most lightweight option, and in my opinion the best one, is something called the Developer Certificate of Origin. This is something the Linux kernel project came up with, and itâs basically just a statement where you say that yes, you have the right to submit this code to the project (because you wrote it or the person who did said that you could), and yes, you agree that the project can distribute it under the same license as their other code. Itâs very lightweight, low hassle. Thereâs no signing of paperwork, you just say âyes, I agree to thisâ. In fact, for projects using Git for version control, you can even have Git automatically tag your commits with your sign-off.\n\nWhat it provides is protection for the project. If it turns out you lied and you were trying to sneak code in that you shouldnât have, thatâs now on you. The project had good reason to believe this was code they could use, because you said it was. It protects maintainers from both malicious actors and from simple accidents that someone might try to capitalize on later. It also makes it guaranteed and explicit that theyâre allowed to incorporate your code, instead of just implicit because they think you sent them that patch that they think you were allowed to send. And, as Python developers know, explicit is better than implicit. You can easily adopt this for projects your maintain, just ask people to agree to those very short little assertions."
    }
}