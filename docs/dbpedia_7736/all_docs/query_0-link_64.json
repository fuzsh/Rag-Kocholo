{
    "id": "dbpedia_7736_0",
    "rank": 64,
    "data": {
        "url": "http://wingware.com/psupport/wingide-1.1/node2.html",
        "read_more_link": "",
        "language": "en",
        "title": "1. Introduction",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://wingware.com/psupport/images/archtrans.gif",
            "http://wingware.com/psupport/wingide-1.1/next_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/up_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/previous_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/contents_motif.gif",
            "http://wingware.com/psupport/images/star.gif",
            "http://wingware.com/psupport/images/star.gif",
            "http://wingware.com/psupport/images/star.gif",
            "http://wingware.com/psupport/images/star.gif",
            "http://wingware.com/psupport/images/star.gif",
            "http://wingware.com/psupport/wingide-1.1/next_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/up_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/previous_motif.gif",
            "http://wingware.com/psupport/wingide-1.1/contents_motif.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "manual-letter"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "1. Introduction",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Wing IDE Reference Manual Wing IDE Reference Manual\n\nVersion 1.1.10\n\nNext: 2. Customization Up: Reference Manual Wing IDE Previous: Contents\n\n1.1 Product Levels 1.2 Licenses 1.3 Technical Support 1.4 Installing\n\n1.4.1 Supported Platforms 1.4.2 Prerequisites 1.4.3 Python versions 1.4.4 Windows Installation 1.4.5 Linux Installation 1.4.6 Mac OS X Installation\n\n1.5 Running the IDE\n\n1.5.1 Installing your License 1.5.2 Setting Initial Preferences 1.5.3 Command Line Usage\n\n1.6 Installing a Permanent License 1.7 Installing Extra Documentation 1.8 Multi-user Installations (Linux and Mac OS X only) 1.9 Source Installation\n\n1.9.1 For Windows 1.9.2 For Linux, Mac OS X, Solaris and FreeBSD\n\n1.10 Removing an Installation\n\n1.10.1 Windows 1.10.2 Linux 1.10.3 Mac OS X 1.10.4 All Platforms\n\n1.11 Command Line Argument\n\n1. Introduction\n\nThanks for choosing Archaeopteryx Software's Wing IDE! This manual will help you get started and serves as a reference for the entire feature set of this product.\n\nThe manual is organized by major functional area of Wing IDE, including the project manager, source code editor, source browser, and debugger. Several appendices document the entire command set, provide pointers to resources and tips for Wing and Python users, and list the full software license.\n\nThe rest of this chapter describes how to install and start using Wing IDE. If you hate reading manuals, you should be able to get started by reading this chapter only.\n\nThroughout this manual, key concepts and important notes are highlighted in the same way as this paragraph. If you are skimming only, look for these marks.\n\n1.1 Product Levels\n\nThis manual is for the Wing IDE Standard product level of the Wing IDE product line, which currently includes Wing IDE Standard and Wing IDE Lite.\n\nWing IDE Standard is the original Wing IDE product, and may be licensed for commercial or non-commercial uses. Wing IDE Lite is for non-commercial use only and contains a subset of the features found in Wing IDE Standard.\n\nWing IDE Standard and Wing IDE Lite are independent products and may be installed at the same time on your system without interfering with each other.\n\nFor a list of features that have been omitted from Wing IDE Lite, please refer to http://wingide.com/wingide/features.\n\n1.2 Licenses\n\nWing IDE requires either an evaluation or a paid license to run. When it is first started, it will ask to copy your license file into place.\n\nEvaluation licenses can be obtained from http://wingide.com/wingide/demo. These unlock all features of the product for a period of 30 days, but may be used for evaluation purposes only.\n\nPermanent licenses for non-evaluation use can be purchased in the online store at http://wingide.com/order.\n\nLicensing is on a concurrent use basis, and requires a seperate license for each operating system used. Licenses purchased for multiple users allow up to the purchased number of users to run Wing at the same time on the licensed operating system.\n\n1.3 Technical Support\n\nIf you have problems installing or using Wing IDE, please contact Archaeopteryx Technical Support at support@wingide.com, or visit the Technical Support website at http://wingide.com/support.\n\nBug reports may be sent to bugs@wingide.com. Please include your OS version number and specific examples of the problem with each report.\n\nSee section 2.2.6 for more information on how to capture a log of Wing IDE and debug process internals. Whenever possible, these should sent to Technical Support along with your problem report.\n\n1.4 Installing\n\nIf you are upgrading Wing IDE and have previously applied patch files to your installation, you may need to remove Wing IDE completely before you upgrade. See section 1.10 for information on how to uninstall.\n\n1.4.1 Supported Platforms\n\nThis version of Wing is available for Microsoft Windows, Linux, and Mac OS X. Wing may also be compiled from source code on additional systems, such as Solaris and Free BSD.\n\n1.4.1.1 Windows\n\nThe Windows product has been tested on Windows 98se, NT4 SP3, Windows 2000 Professional SP1, and Windows XP Professional.\n\n1.4.1.2 Linux\n\nThe Linux product has been tested on RedHat 6.0, 6.1, 6.2, and 7.1; Suse 6.2, 6.4, and 7.0; Caldera 2.4; Mandrake 6.1, 7.1, 7.2, 8.0, 8.1 and 8.2; and Debian 2.2.\n\nOn RedHat 6.0, you must install Python 1.5.2, 2.0, 2.1, 2.2, or 2.3 and use that to run your debug program and the tar file installer (if RPM is not used), instead of the default Python 1.5.1 installation that comes with RedHat 6.0.\n\nOn Suse, you may need to install the gmp and python packages, or install Python from source, since Python is not installed by default here.\n\nRedHat 5.2 is known not to work and there are no plans for supporting it.\n\n1.4.1.3 Mac OS X\n\nThe Mac OS X product requires an X server such as Apple's X11 for OS X product or XDarwin together with a window manager of your choice. Apple's server comes with a native Aqua window manager, or can be used with other window managers. Choices for XDarwin include Window Maker and OroborOSX.\n\n1.4.1.4 Other Systems\n\nWing can be compiled from source on Solaris and FreeBSD. See section 1.9 for details.\n\n1.4.2 Prerequisites\n\nIn order to use Wing, you need to have the following third party materials installed on your system. Many of the above are available in the 3rdparty directory on the product CD and from ftp://wingide.com/pub/wingide:\n\n1.4.2.1 For Windows\n\nPython 1.5.2, 2.0, 2.1, 2.2, or 2.3\n\nA working TCP/IP network configuration\n\nInternet Explorer, Netscape or other web browser (optional)\n\nAdobe Acrobat Reader 4.0.5 or later (optional)\n\n1.4.2.2 For Linux\n\nPython 1.5.2, 2.0, 2.1, 2.2, or 2.3\n\nA working TCP/IP network configuration\n\nenscript version 1.1.6 or later (for basic printing)\n\nAdobe Acrobat Reader version 4.0.5 or later (for better printing)\n\nNetscape or other web browser (optional)\n\n1.4.2.3 Mac OS X\n\nPython 2.1, 2.2, or 2.3\n\nA working TCP/IP network configuration\n\nAn X window server, Apple X11 for OS X or XDarwin\n\nA window manager (Apple's server includes one; other options include Window Maker and OroborOSX 0.75a4r2+)\n\nInternet Explorer, Netscape or other web browser (optional)\n\nAdobe Acrobat Reader 4.0.5 or later (optional)\n\n1.4.3 Python versions\n\nWing contains its own subset of Python that is used to run the IDE itself (but not for your debug programs). The debugger, which runs in a seperate process, can run under Python 1.5.2, 2.0, 2.1, 2.2, or 2.3.\n\nIn most cases, Wing will work out of the box, will find your default python installation, and will use it for debugging. You can, however alter the version of Python that is used to debug your program by using Project Properties and per-file Debug Properties dialogs. See section 6.3 for details.\n\nThe interpreter that is used for debugging is also used to determine which version of the Python manual is displayed from the Help menu, and it affects which Python standard libraries are used for source code analysis. See section 4.16 for more information.\n\n1.4.4 Windows Installation\n\nOn Windows, Wing is installed by running the installer executable. Wing's files are installed by default in C:\\Program Files\\Wing IDE, but this location may be modified during installation. All users of Wing must have Create File and Write privileges to C:\\Program Files\\Wing IDE\\profiles. This is where per-user preferences and other information is stored on Windows. Except for a shortcut in the Start menu heirarchy, all files are installed under C:\\Program Files\\Wing IDE (or your selected installation location).\n\nIn the text the follows, the installation location of Wing is referred to as WINGHOME. If you installed to the default location, this is C:\\Program Files\\Wing IDE.\n\n1.4.5 Linux Installation\n\n1.4.5.1 From RPM\n\nWing can be installed from an RPM package on RPM-based systems, such as RedHat and Mandrake. To install, run rpm -i wingide-1.1.10-1.i386.rpm as root or use your favorite RPM administration tool to install the RPM. Most files for Wing are placed under the /usr/lib/wingide directory and a link for the wing command is placed in the /usr/bin directory.\n\nRPM installation also creates a directory called floating-locks in /usr/lib/wingide. This is set up to be world writable by default. If you are worried about the security of this location, you may change its permissions or remove it entirely, as long as you don't plan a multi-user installation (described in section 1.8).\n\nIn the text that follows, the installation location of Wing is referred to as WINGHOME. If you installed from RPM, this will always be /usr/lib/wingide.\n\n1.4.5.2 From Tar Archive\n\nWing may also be installed from a tar archive. This can be used on systems that do not use RPM, or if you wish to install Wing into a directory other than /usr/lib/wingide. Unpacking this archive with tar -zxvf wingide-1.1.10-1-i386-linux.tar.gz will create a wingide-1.1.10-1-i386-linux directory that contains the wing-install.py script and a binary-package.tar file.\n\nRunning the wing-install.py script will configure Wing for use with individual licenses (multi-user installation is described in section 1.8). The install script will prompt for the location to install support files for Wing (WINGHOME), and the location in which to create a symbolic link to wing. These locations default to /usr/local/lib/wingide and /usr/local/bin, respectively. The install program must have read/write access to both of these directories, and all users running Wing must have read access to both.\n\nIn the text the follows, the installation location of Wing is referred to as WINGHOME. If you installed from tar, this will be the location you chose when you ran the installer.\n\n1.4.5.3 Adding Wing to your Path (for Linux)\n\nIn many cases, the Wing executable will already be on the user path. If it is not, you may type in the full path to Wing, or add the location where Wing's executable was installed to your path. This location will be /usr/bin if the IDE was installed from RPM. When installed from tar file, it will be the value supplied to the wing-install.py script.\n\nSetting the path may be done system-wide or individually. How this is done will differ according to your exact OS version, the shell you are running and, in some cases, the preferences of your system administrator. Typically, per-user setup is in ~/.profile, ~/.login, ~/.bashrc, ~/.cshrc, or equivalent shell configuration file, and system-wide setup is accomplished with /etc/profile, /etc/cshrc, or /etc/csh.login.\n\nAfter installing or altering a user's path, you may need to open a new shell for that user or request that the shell rescan the disk for executables (for example, with rehash under tcsh).\n\nIf for some reason you cannot set the path, typing the full path to the wing executable, creating a small shell script containing the full path, or setting an alias will all work as alternatives.\n\n1.4.5.4 Notes for Linux Users\n\nBy default, Wing for Linux uses Adobe Acrobat Reader and Netscape Navigator for viewing the manual and other items in the Help menu. Other PDF viewers and web browsers can be used instead; see section 2.2.7 for information on configuring these.\n\nGnome users should note that Wing comes with its own copy of GTK 1.2.8 that has disabled use of themes. As a result, Wing ignores your theme settings and always runs as if the Default theme were selected. This avoids problems with with some versions of GTK and some themes. You can get Wing to run against your native installed version of GTK, and to use themes, in one of two ways: (a) specify --system-gtk as the first command line argument for the wing startup script, or (b) rename or move WINGHOME/bin/gtk-bin (be sure to retain a copy in case your system's version of GTK is one of those that causes frequent crashing in Wing).\n\n1.4.6 Mac OS X Installation\n\nOn Mac OS X, Wing is installed from a tar archive by double clicking on the archive file. This will expand the contents of the archive info a new folder on disk in the same location as the archive. Subsequently, the tar archive can be removed and the expanded form of the application can be moved on disk as desired.\n\nIn the text the follows, the installation location of Wing (the location of its application folder) is referred to as WINGHOME.\n\n1.5 Running the IDE\n\nYou are now ready to use Wing IDE!\n\nOn Windows, start Wing IDE from the Program group of the Start menu.\n\nOn Linux, just type wing.\n\nOn Mac OS X, first launch your X windows server and window manager. Once this is done, start Wing IDE. If you launch Wing from the command line using Contents/MacOS/wing inside the Wing IDE app folder, then you may need to set your DISPLAY environment variable.\n\n1.5.1 Installing your License\n\nThe first time you run, Wing will create your personal settings directory, ~/.wingide on Linux and Mac OS X (~ is your home directory) or WINGHOME\\profiles\\[username] on Windows. If no user is logged in on Windows, \"Default User\" is used as the username. The personal settings directory is used to store your license, preferences, and other files used by Wing. If the directory cannot be created, Wing will exit.\n\nOnce the personal settings directory has been created, Wing will ask you to locate your license file. This is the file that was emailed to you when you signed up to try the demo, or purchased a permanent license. Once you locate the file, Wing will copy it into place in ~/.wingide/license.dat (on Linux and Mac OS X) or WINGHOME\\profiles\\[username] on Windows. You will then be asked to accept the license terms.\n\n1.5.2 Setting Initial Preferences\n\nAt this time, Wing will also take the opportunity to ask you to specify a few major options, such as your preferred editor personality, print paper size (Linux only), and whether or not to auto-save project files. You may either select values or ask to always use the system defaults (as defined in WINGHOME/preferences). Once this is done, Wing will place a file called ~/.wingide/preferences (on Linux and Mac OS X) or WINGHOME\\profiles\\[username] (on Windows), with contents according to your choices. This will include at most only a few of all the available preferences, and you can add to or alter these values at any later time.\n\nPlease refer to WINGHOME/preferences and the rest of this manual for more information about the supported options.\n\n1.5.3 Command Line Usage\n\nWhenever you run wing from the command line, you may specify a list of files to open. These can be arbitrary text files and a project file. For example, the following will open project file myproject.wpr and also the three source files mysource.py, README, and Makefile:\n\nwing mysource.py README Makefile myproject.wpr\n\n(on Windows, the executable is called wing.exe)\n\nWing determines file type by extension, so position of the project file name (if any) on the command line is not important.\n\n1.6 Installing a Permanent License\n\nThe Wing IDE evaluation license is a temporary single-user license that will expire one month from date of issue, and may be used for evaluation purposes only. If you have decided to purchase a permanent license from www.wingide.com, you will receive your license file(s) via email.\n\nIf your evaluation license has not yet expired, you must remove or rename your old license before installing your new license. The license file can be found at WINGHOME\\profiles\\[username]\\license.dat (on Windows) or ~/.wingide/license.dat (on Linux and Mac OS X; ~ is your home directory).\n\nNext, run Wing and follow instructions when it prompts you to locate your license file. The new file will be copied into place automatically.\n\n1.7 Installing Extra Documentation\n\nThe Help menu in Wing IDE provides quick access to the online versions of the Wing IDE manual, the Python documentation collection, and some useful web resources.\n\nThe HTML and PDF A4 and US Letter versions of the Wing manual are shipped by default with Wing's binary distribution. Additional manual formats are available from http://wingide.com/support/library.\n\nIf you are using Linux, the Python manual is not included in most installations, so you may also wish to download and install local copies of these pages. Place the top-level of the HTML formatted Python manual (where index.html is found) into WINGHOME/python-manual/#.# in your Wing IDE installation. Substitute for #.# the major and minor version of the corresponding Python interpreter (for example, 1.5 or 2.0). Once this is done, Wing will use the local disk copy rather than going to the web when the Python Manual item is selected from the Help menu.\n\n1.8 Multi-user Installations (Linux and Mac OS X only)\n\nA multi-user installation requires that you have the ability to share a common disk area among all the machines that will participate in the installation. This is usually done via NFS, although other file sharing techniques (such as Samba) will also work.\n\nThe primary difference between multi-user installation and single-user installation is the location of the license file. In single-user installations, licenses are in ~/.wingide/license.dat and license lock files are placed in /var/tmp. In multi-user installations, licenses and license lock files are both in WINGHOME/floating-locks.\n\nThere are two approaches to setting up a multi-user installation:\n\nYou can share the entire Wing installation directory to multiple machines. In this case, the floating-locks directory must be writable by all users of Wing on all of the machines, and WINGHOME must either be on the users' path, symbolic links from a location on the users' path must be made to WINGHOME/wing, or users must set up aliases or type the full path to WINGHOME/wing in order to start Wing.\n\nYou can install one Wing installation on each machine and replace the floating-locks directory on each machine with a symbolic link to a directory accessible via NFS or other file sharing mechanism. This must be done on each machine where Wing IDE is installed, using commands similar to the following:\n\ncd /var/lib/wingide rmdir floating-locks ln -s <path-of-shared-directory> floating-locks\n\nIf you have installed from RPM on Linux, the floating-locks directory should already exist and be world-writable on each installation, and the IDE should be configured to use it. You only need to alter the installation if you want to change the permissions on the lock file directory or if you want to replace it with a symbolic link, as described above.\n\nIf you installed from tar file on Linux, you need to perform the installation in a way that indicates that you want it to work in multi-user mode. This is done by running wing-install.py --multi-user. At the end of the installation process, this will ask for the name of the directory that should contain license lock files and will create the directory if it does not exist. The script will also ask for the name of the group that all users of the floating license must belong to. Use <everyone> to specify that all users can use the floating license. Any group specified must exist prior to running the install script.\n\nIf you have installed on Mac OS X, you need to manually create a floating-locks folder in the Wing IDE application folder, and set its permissions to allow reading and writing by all users of Wing IDE.\n\nIn all cases, once installation is complete, you must copy the license file that you have purchased into WINGHOME/floating-locks and make sure it is readable by all users of the installation.\n\nIf copies of Wing crash or are terminated from outside, the license lock files located in /var/tmp (or in WINGHOME/floating-locks in multi-user installations) may be left in place, consuming one user license each. Wing will normally remove stale lock files, but can only do that for the host on which it is being started, thus in some cases leading to exhaustion of the available licensed user count.\n\nTo fix this, remove those files for which no Wing instance is running. The file name combines the license number, host name, and process ID of Wing so it is possible to determine whether a file is a lost file or an active file:\n\nBD12-A63A-690C-A517-pangolin-982\n\nBe careful not to remove an active license lock file, as the Wing instance that is using it will cease to function until it is restarted.\n\n1.9 Source Installation\n\nSource code is available to licensed users of Wing IDE Standard (non-evaluation licenses only). You will need to sign and submit a non-disclosure agreement in order to obtain your source code access password.\n\n1.9.1 For Windows\n\nTo install source on Windows, unpack the source archive as described for Linux below. If you do not have tar, WinZip can be used to unpack the archive.\n\nSetting up for development on Windows is complicated and requires a number of additional tools and downloads. See the file build-files/README.txt for details.\n\n1.9.2 For Linux, Mac OS X, Solaris and FreeBSD\n\nObtain the wingide-source-1.1.10-1.tar.gz tar archive from the downloads area of wingide.com (your customer number and password are required for access). Unpack this archive with tar -zxvf wingide-source-1.1.10-1.tar.gz to create a wing-source-1.1.10-1 directory that contains the IDE source code.\n\nSee the file build-files/README.txt for more information.\n\n1.10 Removing an Installation\n\n1.10.1 Windows\n\nOn Windows, use the Add/Remove Programs control panel, select Wing IDE and remove it.\n\n1.10.2 Linux\n\nTo remove an RPM installation on Linux, type rpm -e wingide.\n\nTo remove a tar archive installation on Linux, invoke the wing-uninstall script in WINGHOME. This will automatically remove all files that appear not to have been changed since installation, It will ask whether it should remove any files that appear to be changed.\n\n1.10.3 Mac OS X\n\nTo remove Wing from Mac OS X, just drag its application folder to the trash.\n\n1.10.4 All Platforms\n\nIf you previously applied patch files to your Wing installation, you may need to manually remove remaining files and directories after uninstallation. In this case, you should retain the folder profiles on Windows installations and floating-locks on Linux and Mac OS X multi-user installations if you plan to reinstall or upgrade Wing at a later date (these folders contain license and preferences information).\n\n1.11 Command Line Argument\n\nWing treats any arguments given on the command line as file names that should be opened into the IDE, except for the following valid options:\n\n-prefs-file - Add the file name following this argument to the list of preferences files that are opened by the IDE. These files are opened after the system-wide and default user preferences files, so values in them override those given in other preferences files.\n\n-new - By default Wing will reuse an existing running instance of Wing IDE to open files specified on the command line. This option turns off this behavior and forces creation of a new instance of Wing IDE. Note that a new instance is always created if no files are given on the command line.\n\n-verbose - (Posix only) This option causes Wing to print verbose error reporting output to stderr.\n\n-display - (Posix only) Sets the X Windows display for Wing to run with. The display specification should follow this argument, in standard format, e.g. myhost:0.0.\n\n-use-winghome - (For developers only) This option sets WINGHOME to be used during this run. It is used internally and by developers contributing to Wing IDE. The directory to use follows this argument.\n\n-use-src - (For developers only) This option is used to force Wing to run from Python source files even if compiled files are present in the bin directory, as is the case after a distribution has been built.\n\n-orig-python-path - (For developers only) This option is used internally to indicate the original Python path in use by the user before Wing was launched. The path follows this argument.\n\n-squelch-output - (For developers only) This option prevents any output of any kind to stdout and stderr. Used on Windows to avoid console creation.\n\nNext: 2. Customization Up: Reference Manual Wing IDE Previous: Contents &nbsp Contents"
    }
}