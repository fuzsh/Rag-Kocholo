{
    "id": "dbpedia_7736_3",
    "rank": 70,
    "data": {
        "url": "https://verso.w3.uvm.edu/open-source-licenses/",
        "read_more_link": "",
        "language": "en",
        "title": "Open Source Licenses",
        "top_image": "https://verso.w3.uvm.edu/wp-content/uploads/2023/08/cropped-Logo_verso2-1-1-32x32.png",
        "meta_img": "https://verso.w3.uvm.edu/wp-content/uploads/2023/08/cropped-Logo_verso2-1-1-32x32.png",
        "images": [
            "https://verso.w3.uvm.edu/wp-content/uploads/2023/08/cropped-Logo_verso2-1-68x68.png",
            "https://verso.w3.uvm.edu/wp-content/uploads/2023/08/cropped-Logo_verso2-1-68x68.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-08-02T16:29:34+00:00",
        "summary": "",
        "meta_description": "Open Source Licenses Open source licenses grant permission for anybody to use, modify, and share licensed software for any purpose, subject to conditions preserving the provenance and openness of the software.  Types Copyleft – Weak and strong copyleft (as opposed to copyright) licenses attempt to make all software based on any open source components also have … Open Source Licenses Read More »",
        "meta_lang": "en",
        "meta_favicon": "https://verso.w3.uvm.edu/wp-content/uploads/2023/08/cropped-Logo_verso2-1-1-32x32.png",
        "meta_site_name": "VERSO",
        "canonical_link": "https://verso.w3.uvm.edu/open-source-licenses/",
        "text": "Copyleft\n\nOrigin\n\nThe development of GNU, a Unix-like operating system, started in January 1984, is known as the GNU Project. Many of the programs in GNU are released under the auspices of the GNU Project. The name “GNU” is a recursive acronym for “GNU’s Not Unix.” GNU is typically used with a kernel called Linux but itself is NOT Linux. GNU/Linux is used by millions, though many call it “Linux” by mistake.\n\nThe GPL was written by Richard Stallman in 1989, for use with programs released as part of the GNU project. The original GPL was based on a unification of similar licenses used for early versions of GNU Emacs (1985), the GNU Debugger, and the GNU C Compiler. These licenses contained similar provisions to the modern GPL, but were specific to each program, rendering them incompatible, despite being the same license. Stallman’s goal was to produce one license that could be used for any project, thus making it possible for many projects to share code.\n\nThe second version of the license, version 2, was released in 1991. Over the following 15 years, members of the free software community became concerned over problems in the GPLv2 license that could let someone exploit GPL-licensed software in ways contrary to the license’s intent. These problems included tivoization (the inclusion of GPL-licensed software in hardware that refuses to run modified versions of its software), compatibility issues similar to those of the Affero General Public License, and patent deals between Microsoft and distributors of free and open-source software, which some viewed as an attempt to use patents as a weapon against the free software community.\n\nVersion 3 was developed to attempt to address these concerns and was officially released on 29 June 2007.\n\nTerms\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 60 per cent of open source software use this license like Linux and Busybox. It has a claus\n\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software–to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation’s software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.\n\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.\n\nAlso, for each author’s protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors’ reputations.\n\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone’s free use or not licensed at all.\n\nThe precise terms and conditions for copying, distribution and modification follow.\n\nThe GPLV2 was the former licenses released in 1991 while the most recent, the GPLV3, was released in 2007.\n\n2.GPLV3 is longer compared to the GPLV2 since it almost tried to cover the same issues with the former license.\n\n3.GPLV3 has more clarity on patent licenses, mostly on the wording of the license as it cannot be interpreted as “too broad.” It also applies to the protection of the patents unlike the GPLV2.\n\n4.The GPLV2 has loopholes that the GPLV3 is trying to fix. The loophole has acquired the term Tivoization which is derived from a digital video recorder which captures television programming and saves the data into an internal hard drive storage for future viewing.\n\n5.GPLV2 has a new section that has been added to the license called Protecting Users’ Legal Rights from Anti-Circumvention Law. The section’s intention is to prevent the GPVL3 from being included in technology or products that would be used to enforce the Digital Millennium Copyright Act (DCMA).\n\n6.GPLV3 code is more compatible with more licenses compared to the former license.\n\nRead more: Difference Between GPLV2 and GPLV3 | Difference Between http://www.differencebetween.net/technology/software-technology/difference-between-gplv2-and-gplv3/#ixzz7VYiWQPpN\n\nHow to Use\n\nHere’s a brief summary of what you need to do to release a program under one of our licenses:\n\nGet a copyright disclaimer from your employer or school.\n\nGive each file the proper copyright notices. Make sure to clearly identify which versions of the license users can use.\n\nAdd a COPYING file with a copy of the GNU GPL or GNU AGPL.\n\nAlso add a COPYING.LESSER file with a copy of the GNU LGPL, if you use that.\n\nPut a license notice in each file.\n\n(Optionally) make the program display a startup notice.\n\n(If using the AGPL) make the program offer copies of its source code.\n\nThis involves adding two elements to each source file of your program: a copyright notice (such as “Copyright 1999 Terry Jones”), and a statement of copying permission, saying that the program is distributed under the terms of the GNU General Public License (or the Lesser GPL, or the Affero GPL).\n\nCommercial Use\n\nThis license does not allow commercialization, if someone creates derivative work it is required to have the GPL license as well and is provided for free\n\nPermissive\n\nOrigin\n\nThe original BSD Unix license was first written in 1969 and was used for its namesake, the Berkeley Software Distribution (BSD), a Unix-like operating system. The original version has since been revised, and its descendants are referred to as modified BSD licenses.\n\nBSD is both a license and a class of license (generally referred to as BSD-like). The modified BSD license (in wide use today) is very similar to the license originally used for the BSD version of Unix. The BSD license is a simple license that merely requires that all code retain the BSD license notice if redistributed in source code format, or reproduce the notice if redistributed in binary format. The BSD license (unlike some other licenses e.g. GPL) does not require that source code be distributed at all..\n\nPrior to 1999, the BSD License contained the following provision:\n\nAll advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the University of California, Lawrence Berkeley Laboratory.\n\nThis provision seems relatively innocuous. It seems both reasonable and natural that the creator, having surrendered the exclusive right to commercially exploit a work, should receive credit not only in the acknowledgment of rights but in the advertising as well. It does not challenge the essential premises of open source, as it does not limit the scope of the use of the software in any direct way. Nonetheless, the pre-1999 BSD License sometimes causes problems because of this clause. The principles of open source endorse the commercial exploitation of software, including the sale of software, manuals, and support for profit. Such commercial exploitation very well may include advertising and when an open source project draws from a number of predecessors, the requirement of including such references can become a real burden. The BSD License, however, was amended in 1999 and this clause was removed.\n\nTerms\n\nThe BSD UNIX license states one may copy, modify and redistribute the code so long as one retains a copy of the original copyright statement.\n\nThe copyright statements must include a clear statement of restrictions for use of the distributed software.\n\nA disclaimer for limitations of liability that include not claiming authorship of the code where the code was not written by the user and not suing the author of the program for unexpected or undesirable functionality.\n\nThe stipulation that one doesn’t use the name of the software or its authors to advertise or promote work derived from modification of the distributed code without prior written consent.\n\nSimilarly, other BSD licenses can have these clauses but may not include them all. As a base, the first two clauses are a part of any BSD license. There are two, three and four clause BSD licenses.\n\nthe only substantial difference between this license and the MIT License is the non-attribution provision in the last clause. This provision requires prior permission for use of the name of the creator, and it protects the reputation of the creator from being explicitly associated with derivative versions of the program. Such restrictions permit creators to protect themselves from the injury to their reputations that can result from association with a defective or poorly written program, while still allowing others to use or modify a work.\n\nHow to Use\n\nTo use the BSD license, developers need to copy the text as provided and include in source files as applicable.\n\nCommercial Use\n\nThis licenses allow commercial use. Users do not have to provide any other source code when releasing new software.\n\nOrigin\n\nTerms\n\nHow to Use\n\nTo use the MIT license, developers need to copy the text as provided and include in source files as applicable. I\n\nCommercial Use\n\n+++ licenses allow commercial use. Users do not have to provide any other source code when releasing new software. Including the attributions and original license in the reused code will suffice.\n\nIn 1988, Richard Stallman wrote his General Public License (GPL) aimed at enshrining the rights of creators to keep their software open source at all times. GPL is currently in its third version (GPLv3) due to issues with the previous text that created some loopholes.\n\nAs part of GPLv3, the Free Software Foundation (FSF) provided two additional types of licenses, namely the Lesser General Public License (LGPLv3) and the Affero General Public License (AGPLv3). The AGPL version of the General Public License aims to enforce full copyleft rights on all software that use it.\n\nIn the standard GPL license, the reciprocity clause comes into effect whenever a developer releases software. The copyleft principle intends to make all of the source code available to the wider open source community. With AGPL, software teams can ensure all changes to the codebase becomes available to the public, even on server-side applications.\n\nDetermining whether the AGPL 3.0, LGPL 3.0, or standard GPL 3.0 will suit the team best depends on the final intent of the software. Copyleft licenses are ideal for developers that want to ensure all subsequent changes become available to the community, while permissible licenses like the MIT license gives them more freedom to make modifications proprietary in the future.\n\nSome of the advantages of the AGPL include:\n\nForces teams to consider their licensing philosophy early in the project and live with their decision.\n\nEnsures that any code snippet developed by the open source community stays available and prevents others from repackaging and selling open-source software.\n\nThe disadvantages of the AGPL are:\n\nPuts some teams off open-source packages as it forces all other code to become GPLed software.\n\nSome view it as excessive as any module in any dependent package that uses AGPL makes all other software subject to similar restrictions.\n\nRemoves the choice for teams to make software proprietary in the future.\n\nAlthough anyone can use the AGPL V3 license, it’s not popular with organizations. The restrictions placed on any subsequent versions of AGPL software make it difficult to adopt when there are competing commercial interests.\n\nThe AGPL V3 license is a strong copyleft license that enforces open source on all components derived from any previous work. It closes the server-side loophole, where the source code isn’t made available if the software isn’t released. AGPL defines a user as anyone who accesses the server-side application if it is public-facing. For applications that reside inside the organization’s network, AGPL does not trigger the release of the source code.\n\nIs AGPLv3 license compatible with GPLv3?\n\nUsers who combine work under the GPLv3 license with AGPL software can retain the rights of the GPLv3 license on the unmodified work. Any modified versions of the GPLv3 work will have to use the AGPLv3 license.\n\nAGPL due to its radical open source licensing is currently only used in less than 1% of open source projects.\n\nEstablish effective license compliance management with Snyk\n\nFor teams that need to maintain effective control over their license compliance, Snyk can help. Our developer-first license management tool gives users a clear view of packages and dependencies in their codebase. By helping developers understand and manage license compliance, this tool helps prevent the project from r"
    }
}