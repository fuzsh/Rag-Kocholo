{
    "id": "dbpedia_7736_0",
    "rank": 97,
    "data": {
        "url": "https://forum.qt.io/topic/35074/how-to-build-a-static-qt-on-windows-mingw-using-a-powershell-script",
        "read_more_link": "",
        "language": "en",
        "title": "How to build a static Qt on Windows / MinGW using a PowerShell script",
        "top_image": "https://ddgobkiprc33d.cloudfront.net/fdabc3bf-87df-44e6-90c8-11d09667ec3c.png",
        "meta_img": "https://ddgobkiprc33d.cloudfront.net/fdabc3bf-87df-44e6-90c8-11d09667ec3c.png",
        "images": [
            "https://ddgobkiprc33d.cloudfront.net/fdabc3bf-87df-44e6-90c8-11d09667ec3c.png?v=43nr7u6roea",
            "https://qt-files.s3.eu-west-1.amazonaws.com/banners/CfP-v3-forum.jpg",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/718de1be52f9b4bd4184caa117087893?size=192&d=mm",
            "https://www.gravatar.com/avatar/babed14d18f0888997cadb8fc1a89b18?size=192&d=mm",
            "https://www.gravatar.com/avatar/babed14d18f0888997cadb8fc1a89b18?size=192&d=mm"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Qt",
            "discussion",
            "question",
            "q&a",
            "answer",
            "forum"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-12-04T09:15:49+00:00",
        "summary": "",
        "meta_description": "Hello, There is a number of requests and answers in many forums about the way to compile a static version of Qt. When I was looking for a method to do so on ...",
        "meta_lang": "en",
        "meta_favicon": "/assets/uploads/system/favicon.ico?v=43nr7u6roea",
        "meta_site_name": "Qt Forum",
        "canonical_link": "https://forum.qt.io/topic/35074/how-to-build-a-static-qt-on-windows-mingw-using-a-powershell-script",
        "text": "Hello,\n\nThere is a number of requests and answers in many forums about the way to compile a static version of Qt. When I was looking for a method to do so on Windows, I found many clues but no complete off-the-shelf script to do this. Since I prefer automated processes for administrative tasks, I wrote a script to do so and I share it using this post.\n\nWhy a static Qt?\n\nOn Windows, the pre-built environments from qt-project.org are dynamically linked. IMHO, this remains the preferred environment for developing and debugging since everything is there and ready to use. However, when it comes to deploying an application on systems without pre-installed Qt environments, it becomes complicated. There are several DLL's to install. Even using the classical \"DLL Dependency Walker\", you cannot find all required DLL's since some of them are dynamically loaded at execution. So, when the application is ready to deploy, it is easier to build a static version of it. But building a static version of the application requires a static version of the Qt environment in addition to the pre-built dynamic Qt environment.\n\nBuilding script\n\nI had this requirement in a small personal open-source project named \"QtlMovie\":http://qtlmovie.sourceforge.net/ and, as part of this project, I wrote a script which downloads, builds and installs a static version of Qt.\n\nNote that building and installing a static version of Qt on Windows was somewhat problematic up to Qt 4. But Qt 5 has now a much better support for static builds on Windows and the script takes advantage of that.\n\nThe script is available in the git repository of QtlMovie at \"https://sourceforge.net/p/qtlmovie/code/ci/master/tree/build/windows-build-qt-static.ps1\":https://sourceforge.net/p/qtlmovie/code/ci/master/tree/build/windows-build-qt-static.ps1?format=raw\n\nNote that I use MinGW for both the pre-built and static environment. I have not used MS Visual Studio and I have not written a corresponding version of the script for this environment.\n\nIf you have similar needs as mine, you may want to try it or review it. Any feedback is welcome.\n\nRequirements\n\nFirst, a pre-built Qt environment for MinGW must be installed. Preferably use the same version for both dynamic and static versions of Qt.\n\nThis script uses Windows PowerShell. The version 3.0 or higher is required. PowerShell 3.0 comes with Windows 8 but it can be installed on Windows 7 as well from Microsoft \"download\":http://www.microsoft.com/en-us/download/details.aspx?id=34595\n\nThis script also requires \"7-Zip\":http://www.7-zip.org/ to uncompress the downloaded Qt source code.\n\nInvocation\n\nThe PowerShell script can be directly invoked from the Windows Explorer if you are ok with the default parameter values (see below).\n\nAlternatively, you can invoke it from the PowerShell prompt using the following syntax;\n\nwindows-build-qt-static.ps1 [[-QtSrcUrl] <Object>] [[-QtStaticDir] <Object>] [[-QtVersion] <Object>] [[-MingwDir] <Object>] [-NoPause]\n\nDescription\n\nThis scripts downloads Qt source code, compiles and installs a static version of Qt. It assumes that a prebuilt Qt / MinGW environment is already installed, typically in C:\\Qt. This prebuilt environment uses shared libraries. It is supposed to remain the main development environment for Qt. This script adds a static version of the Qt libraries in order to allow the construction of standalone and self-sufficient executable.\n\nThis script is typically run from the Windows Explorer.\n\nParameters\n\n-QtSrcUrl <Object>\n\nURL of the Qt source file archive. By default, use the latest identified version (Qt 5.2.0-rc1 at the time of this post). You may want to modify the script using another URL / version.\n\n-QtStaticDir <Object>\n\nRoot directory where the static versions of Qt are installed. By default, use C:\\Qt\\Static.\n\n-QtVersion <Object>\n\nThe Qt version. By default, this script tries to extract the version number from the Qt source file name.\n\n-MingwDir <Object>\n\nRoot directory of the MinGW prebuilt environment. By default, use the version which was installed by the prebuilt Qt environment.\n\n-NoPause [<SwitchParameter>]\n\nDo not wait for the user to press <enter> at end of execution. By default, execute a \"pause\" instruction at the end of execution, which is useful when the script was run from Windows Explorer.\n\nUsing the Qt static environment\n\nTo build your static applications, set up the environment variables to the static environment. For instance, using Qt 5.2.0-rc1, wherever you use C:\\Qt\\Qt5.2.0\\5.2.0-rc1\\mingw48_32 for the dynamic environment, use C:\\Qt\\Static\\5.2.0-rc1 for the static environment.\n\nAlso add CONFIG+=static to all your qmake command lines.\n\nNote that the static environment contains all libraries and command line tools (qmake, lupdate, lrelease, etc) but not the GUI tools (designer, assistant, creator, linguist, etc). The GUI tools are essentially used in the development process and the pre-built dynamic environment remains the preferred one. On the other hand, the command line tools are required in scripts to build the final static application.\n\nThanks for your support.\n\nI will consider putting this in the wiki when I have some time. I think it would need more details and background info in a good wiki entry.\n\n@SGaist: This is only a script describing \"how to build\", nothing more. And yes, there are both licensing and technical implications / restrictions in the use of a static build, like the inability to use dynamic plugins in the applications. This is why using Qt in a static environment would deserve a very long and detailed article.\n\nGenerally speaking, I prefer to avoid writing about licensing because there is no \"truth\" in this matter, only an aggregation of contradictory opinions (even though everyone is firmly convinced to hold the truth).\n\nIn \"this post\":https://blog.qt.digia.com/blog/2009/11/30/qt-making-the-right-licensing-decision/, Cristy Hamley says \"There is debate in the legal and open source communities as to whether static linking is permissible under the LGPL version 2.1. The uncertainty is caused by an inconsistency in the LGPL license itself [...]\" A good summary for \"nobody knows but everyone pretend to\".\n\nMy position is that the GPL family of licenses creates more problems than it solves. This is why I use the BSD license for the small project I mentioned. I just hope to never be sued for having used the LGPL static Qt libraries with my BSD code in an open-source project :-) But who knows, I have read so many silly ukases about GPL licensing..."
    }
}