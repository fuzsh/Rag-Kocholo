{
    "id": "correct_foundationPlace_00049_3",
    "rank": 41,
    "data": {
        "url": "https://www.uwb.edu/stem/about/divisions/css",
        "read_more_link": "",
        "language": "en",
        "title": "Division of Computing & Software Systems",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.uwb.edu/stem/wp-content/themes/uwbwcms/assets/public/images/w-white.svg",
            "https://www.uwb.edu/stem/wp-content/themes/uwbwcms/assets/public/images/bothell-only-wordmark-white.svg",
            "https://www.uwb.edu/stem/wp-content/themes/uwbwcms/assets/public/images/uwbothell-wordmark-white.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/myuw-ql.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/canvas-ql.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/directory-ql.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/library-ql.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/workday-ql.svg",
            "https://www.uwb.edu/wp-content/uploads/2023/08/give-ql.svg",
            "https://www.uwb.edu/stem/wp-content/themes/uwbwcms/assets/public/images/uwbothell-wordmark-white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-01-04T20:54:16+00:00",
        "summary": "",
        "meta_description": "The Division of Computing & Software Systems offers high academic standards and expectations with a reputation characteristic of the University of Washington. We offer software engineering oriented computer science degrees that emphasize how to think about, design, and create quality software-enabled systems that have real impact in organizations and the world. Our degrees provide the...",
        "meta_lang": "en",
        "meta_favicon": "https://www.uwb.edu/stem/wp-content/themes/uwbwcms/assets/public/images/favicon-w.ico",
        "meta_site_name": "School of Science, Technology, Engineering & Mathematics",
        "canonical_link": "https://www.uwb.edu/stem/about/divisions/css",
        "text": "The Division of Computing & Software Systems offers high academic standards and expectations with a reputation characteristic of the University of Washington.\n\nWe offer software engineering oriented computer science degrees that emphasize how to think about, design, and create quality software-enabled systems that have real impact in organizations and the world. Our degrees provide the broad educational background valued by employers and by computing professionals seeking rewarding careers. Our aim is a transformative educational experience that not only provides fundamentals and technical skills, but also the perspective to understand how to be an effective, confident, and respected member of our profession.\n\nMichael Stiber, Chair of the Division of Computing & Software Systems.\n\nAs an undergraduate you can choose between:\n\nBachelor of Arts in Applied Computing, which emphasizes connections between computing and other fields.\n\nBachelor of Science in Computer Science and Software Engineering, which focuses on software development. Within this program, you can also choose the Information Assurance and Cybersecurity option, which will appear on your transcript.\n\nBachelor of Science in Computer Engineering, which combines education in hardware and software development.\n\nAs a graduate:\n\nIf you’re switching careers you can take our Graduate Certificate in Software Design & Development to immediately move to a new job or to prepare you for success in graduate studies.\n\nYou can pursue studies at the cutting edge of computing research and implementation through our Master of Science in Computer Science and Software Engineering or our Master of Science in Cybersecurity Engineering.\n\nLearning goals\n\nThe learning objectives for the Bachelor of Arts in Applied Computing and the Bachelor of Science in Computer Science & Software Engineering are described in terms of competencies achieved by students within the CSS programs. The Foundation Level includes very broad competencies that are found in every CSS core course. The Technical Level is a set of broadly important competencies specific to the software engineering and computer science professions, to be developed in every undergraduate CSS education, across the set of required core courses. Competencies specific to the interests and needs of the individual student are achieved in the CSS advanced elective courses.\n\nBelow are listed the Foundational and Technical competencies, which are achieved by every undergraduate student in CSS:\n\nFoundation Level\n\nAnalysis & Problem Solving\n\nInformation Gathering: Effectively searches out and organizes pertinent information before making decisions or taking actions.\n\nEfficiency: Identifies ways to solve problems or complete tasks smoothly and effectively; choose the optimum solution form and set of alternative possibilities.\n\nSystemic Thinking: Follows a well-ordered and logical approach to analyzing problems, organizing work, and searching for solutions.\n\nThoroughness: Ensures that work is done correctly, completely, on time and to the highest standards.\n\nCreativity: Challenges existing assumptions, proposes novel alternative ways to framing or solving a problem, pushes the boundaries of knowledge.\n\nLearning by Doing: Demonstrates the ability to learn continuously, capitalize on mistakes, exploit new knowledge, increase productivity over time.\n\nInterpersonal Skills\n\nCollaboration & Team Building: Collaborates effectively with others to achieve a common objective, creates an environment that fosters and sustains successful teamwork.\n\nLeadership: Champions new ideas, persuades and influences, breaks logjams, and promotes momentum toward solving problems.\n\nWriting & Speaking: Expresses ideas correctly and convincingly in reports, memos and other forms of written communication\n\nManaging Change & Uncertainty: Adapts to changing circumstances, deals positively with uncertainties and contingencies, manages crises effectively.\n\nManagement Skills\n\nProject Management: Plans, monitors, and controls projects; ensures efficient utilization of resources; keeps projects on schedule and within budgeted resource allocation.\n\nProject Administration: Administers and maintains projects, using appropriate monitoring tools and complying with relevant standards and reporting requirements.\n\nRisk Management: Foresees and takes action pro-actively in anticipation of future problems and opportunities.\n\nUser Orientation: Gains understanding of users needs by immersing self in users environment; carefully studies user’s requirements; puts self in users shoes.\n\nTechnical Level\n\nGeneral Business, Social & Technical\n\nBusiness Case Justification: Justifies project expenditures, equipment and other resources in terms of business costs, benefits and risks.\n\nTechnology Evaluation and Selection: Evaluates and selects software and hardware appropriate to the application, architecture and resource constraints; maintains awareness and understanding of emerging technology.\n\nProcess Reengineering: Performs business requirement analysis, using appropriate tools and methodologies to maximize organizational performance.\n\nMathematical Principles and Techniques: Understands theory and application of numerical, statistical, set theory, and other mathematical techniques in the context of applications and systems programming.\n\nGeneral Software Systems: Has general understanding of the principles and applications of software development and design; understands the relationship between software development and other functions in the business organization.\n\nSocial Implications of Science & Technology: Understands the interaction between science and technology and the broader social, political, and organizational environment; critically assesses ethical implications of computing technology.\n\nTechnical Writing: Designs and writes effective guidelines, standards, procedures, processes, applications, using appropriate methods, tools and delivery options.\n\nApplication Programming\n\nRequirements Definition and Analysis: Elicits and clearly defines user\\’s needs, assessing potential solutions against benefits and risks; uses appropriate tools for analyzing requirements and creating appropriate data and work flow models.\n\nSoftware Development Life Cycle: Understands and effectively manages the process of developing designing, testing, and delivering a software application.\n\nFunctional Design: Identifies system platform, components, inputs, interface requirements, and dependencies which ensure that the system will achieve its objectives.\n\nTesting: Plans, executes, and validates results of unit, systems, and acceptance testing to ensure conformity to user\\’s requirements.\n\nImplementation: Plans and executes smooth integration of an application into the computing environment.\n\nProgramming: Comprehends and applies principles of programming; effectively translates design specifications into appropriate software components.\n\nCollaborative Programming Techniques: Uses methods and tools that support cooperative software development among users in different locations.\n\nQuality Assurance: Employs appropriate quality assurance standards and procedures to ensure delivery of bug-free applications that meet user\\’s needs.\n\nInfrastructure/Operations\n\nTechnology Integration: Integrates various technologies, systems, applications, database and components across multiple platforms.\n\nHardware Architecture: Understands hardware components, architecture, and interrelationship among hardware, software, and operating systems.\n\nPerformance Measurements & Tuning: Uses appropriate performance metrics to monitor, optimize and troubleshoot system performance.\n\nOperating Systems: Understands operating systems fundamentals including: file systems, process, and memory management.\n\nSystem Administration: Understands appropriate procedures and techniques for management and administrating a network, data center, or other computer system; manages changes to the computing environment.\n\nTechnical Training and Support: Provides user support through analysis and problem solving to facilitate installation, implementation, maintenance, education, and documentation of computer hardware and software systems."
    }
}