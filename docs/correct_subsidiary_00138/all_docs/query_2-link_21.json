{
    "id": "correct_subsidiary_00138_2",
    "rank": 21,
    "data": {
        "url": "https://www.linkedin.com/posts/markandeyuluenjam_oracle-tmforum-activity-7174370882318917633-qHkZ",
        "read_more_link": "",
        "language": "en",
        "title": "Markandeyulu Enjam on LinkedIn: #oracle #tmforum",
        "top_image": "https://media.licdn.com/dms/image/D4D22AQGHT2XAujz8TQ/feedshare-shrink_800/0/1710503316966?e=2147483647&v=beta&t=O8qUTxGiHHEShJP5XMz4y826KL9NeDbASeqJXStsA8g",
        "meta_img": "https://media.licdn.com/dms/image/D4D22AQGHT2XAujz8TQ/feedshare-shrink_800/0/1710503316966?e=2147483647&v=beta&t=O8qUTxGiHHEShJP5XMz4y826KL9NeDbASeqJXStsA8g",
        "images": [
            "https://media.licdn.com/dms/image/D4D16AQF5wXwlo2eN8Q/profile-displaybackgroundimage-shrink_200_800/0/1670665594350?e=2147483647&v=beta&t=QjRVaaJyruojO4YWlg0ZDTnFqnetRior5uhx6_esQ9Q"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Markandeyulu Enjam"
        ],
        "publish_date": "2024-03-15T11:48:31.673000+00:00",
        "summary": "",
        "meta_description": "Oracle Communications Rapid Offer Design and Order Delivery (RODOD) is an innovative, fully integrated, productized solution that cost-effectively reduces time‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/posts/markandeyuluenjam_oracle-tmforum-activity-7174370882318917633-qHkZ",
        "text": "Siebel OpenUI Architecture üìç Siebel Open UI is a browser client for Siebel desktop and mobile application, we try to first go through each of the components and have a brief understanding of what it does. 1. Application Object Manager (AOM) ‚Äì This is the most important server component. In Open UI, it behaves exactly the same way like our traditional Siebel client. AOM processes user requests with the help of other components like Data Manager, Siebel Web Engine. 2. Siebel Web Template(SWT) file ‚Äì Siebel Web Template file defines the layout and format of the elements to display on UI. It provides the placeholders for Siebel objects like views, applets, controls but does not contain any data. These SWT files are nothing but HTML files with Siebel tags. Siebel Open UI uses newer version of SWT files that no longer contain any explicit layout information. 3) Cascading Style Sheet (CSS) file ‚Äì CSS is a style language that defines the layout of web pages, such as font, color, height, width 4) Java Script (JS) file ‚Äì JavaScript is a client side programming language used in web applications. It enhances the users experience of the web pages. ‚Äì In Siebel Open UI, JS files are used to add client side businessand validation and render the application in the web browser 5) Siebel Open UI client: ‚Äì Open UI client is a Siebel engine that runs within the browser to enhance user experience and data validation 5.1) Client Proxy ‚Äì It works as an interface to the Siebel Server. ‚Äì It gets run-time data and metadata from Siebel server and passes it to Presentation Model. 5.2) Presentation Model ‚Äì It is a JavaScript file that determines what business logic to be applied on metadata and run-time data coming from Siebel server. ‚Äì It captures client interactions such as ‚Äì It is collection of Properties and Method 5.3) Physical Renderer ‚Äì It is a JavaScript file that Open UI uses to render application on the browser ‚Äì It can display the same set of records. 6) Manifest file ‚Äì It uses an unique key to determine which JavaScript file/s to download to the client‚Äì Earlier version of Siebel Open UI Innovation Pack 2013 (8.1.1.11) has three manifest files under \\seibsrvr\\OBJECTS directory********************************* **The architectural flow with an example ‚Äì Navigating to My Opportunities view. Now Siebel Open UI performs below steps to render ‚ÄòMy Opportunities View‚Äô on the browser. Step 1: Presentation Model passes the request to the client proxy Step 2: Proxy sends the request to Siebel Server Step 3: Siebel Server processes the request and sends the result back to proxy Step 4: Proxy reads the manifest file and downloads all required JS files Step 5: Presentation Model applies the business logic on the result set and sends it to Physical Renderer Step 6: Physical Renderer prepares the final HTML file with the reference of CSS files Step 7: Result is displayed on the browser #siebel, #siebelcrm"
    }
}