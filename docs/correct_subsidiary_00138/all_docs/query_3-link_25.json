{
    "id": "correct_subsidiary_00138_3",
    "rank": 25,
    "data": {
        "url": "https://jcp.org/en/jsr/detail%3Fid%3D254",
        "read_more_link": "",
        "language": "en",
        "title": "The Java Community Process(SM) Program",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/button_go.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/hr_dots1.gif",
            "https://jcp.org/images/hd_find-jsrs.gif",
            "https://jcp.org/images/button_go.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/hd_my-jcp.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/hr_dots1.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/hd_jcp-info.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/ad_banner2.gif",
            "https://jcp.org/images/common/trans.gif",
            "https://jcp.org/images/common/trans.gif",
            "https://jcp.org/images/global/bar_green.gif",
            "https://jcp.org/images/global/bar_green.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/common/logo_oracle_footer.gif",
            "https://jcp.org/images/spacer.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "JSRs by Platform\n\nJSRs by Technology\n\nJSRs by Stage\n\nJSRs by Committee\n\nList of All JSRs\n\nUse of JCP site is subject to the JCP Terms of Use and the Oracle Privacy Policy\n\nAbout JCP\n\nProgram Overview\n\nJCP Process Document\n\nCalendar\n\nJCP Members\n\nExecutive Committee\n\nElections\n\nGet Involved\n\nOverview\n\nBecoming a JCP Member\n\nJava in Education\n\nCommunity Resources\n\nOverview\n\nTutorials\n\nJCP Podcasts\n\nSpec Lead Guide\n\nTCK Tool & Info\n\nLicense Reference\n\nCommunity News\n\nNews\n\nPrograms & Awards\n\nPress Releases\n\nSuccess Stories\n\nFAQ\n\nContact Us\n\nJSRs: Java Specification Requests\n\nJSR 254: OSS Discovery API\n\nStage Access Start Finish Final Release Download page 08 Feb, 2008 Final Approval Ballot View results 08 Jan, 2008 22 Jan, 2008 Proposed Final Draft Download page 13 Jul, 2007 Public Review Ballot View results 08 Aug, 2006 14 Aug, 2006 Public Review Download page 14 Jul, 2006 14 Aug, 2006 Early Draft Review Download page 09 May, 2006 08 Jun, 2006 Expert Group Formation 05 Oct, 2004 21 Oct, 2005 JSR Review Ballot View results 21 Sep, 2004 04 Oct, 2004\n\nStatus: Final\n\nJCP version in use: 2.6\n\nJava Specification Participation Agreement version in use: 2.0\n\nDescription:\n\nProvide an API that allows network discovery applications to be developed and integrated with other OSS/J enabled applications.\n\nPlease direct comments on this JSR to the Spec Lead(s)\n\nTeam\n\nSpecification Leads Andrew Paterson Nakina Systems Sergio Pellizzari Nakina Systems Yves Thibeault Nakina Systems Expert Group Amdocs Management Ltd. Bernstein, Greg Cisco Systems Hewlett-Packard Jiao, Fan Khalafallah, Ahmad Nakina Systems Nortel Oracle Sun Microsystems, Inc. Tata Consultancy Services TeleManagement Forum\n\nThe following information has been updated from the original request:\n\n2005.12.16:\n\nSpecification Lead: Andrew Paterson\n\nE-Mail Address: apaterson @nakinasystems.com\n\nOriginal Java Specification Request (JSR)\n\nIdentification | Request | Contributions | Additional Information\n\nSection 1. Identification\n\nSubmitting Member: Nakina Systems\n\nName of Contact Person: Sergio Pellizzari\n\nE-Mail Address: sergiop@nakinasystems.com\n\nTelephone Number: +1 613-254-7351\n\nFax Number: +1 613-254-7352\n\nSpecification Lead: Sergio Pellizzari\n\nE-Mail Address: sergiop @nakinasystems.com\n\nTelephone Number: +1 613-254-7351\n\nFax Number: +1 613-254-7352\n\nNOTE that this information has been updated from this original request.\n\nInitial Expert Group Membership:\n\nNakina Systems\n\nMetaSolv\n\nSupporting this JSR:\n\n4DH Consulting\n\nBEA\n\nBorland\n\nBritish Telecommunications plc\n\nCovad Communications\n\nNortel Networks\n\nQineitiQ\n\nObjectStore\n\nSolarMetric\n\nSonic Software\n\nSun Microsystems, Inc\n\nVersant\n\nVodafone\n\nWatchmark-Comnitel\n\nWipro\n\nSection 2: Request\n\n2.1 Please describe the proposed Specification:\n\nThe OSS Discovery specification is a part of the OSS through Java Initiative (OSS/J) set of specifications. OSS Discovery shares the core goals of OSS/J:\n\n- To accelerate the development effort for building OSS components and applications by providing an off the shelf API specification\n\n- To provide a means for easing integration of independent OSS systems\n\nThe Discovery APIs are suitable for use by applications that perform discovery of physical network devices and their data. The APIs provide an access point for configuration and management of discovery applications providing the means for the production of discovery files and discovery events related to the discovery job lifecycle.\n\nSome examples of areas of concern for the Discovery APIs are discovery seed data, discovery agents, concurrency control, discovered data events, device connection management and policy, and device security credentials. The artefacts produced by these areas of concern are expected to manifest themselves in the form of an OSS Discovery object model that will extend the OSS/J CBE wherever possible (see JSR 144). The object model will also include OSS Discovery events. The existing CBE packages already provide many of the required methods for manipulating objects that extend the CBE.\n\nThe discovery APIs are useful for creating a single integrated discovery solution across multiple independent systems that are OSS Discovery compliant. They are also useful for building a customized end user application (such as a GUI) on top of one or more OSS Discovery compliant systems.\n\nDiscovered entities are represented using the OSS/J CBE (Core Business Entities), and so the API is suitable for network resource and service level discovery. Using the CBE classes simplifies data exchange between an OSS Discovery application and other OSS applications. For example, discovered data that is captured using the CBE is readily injected into a compliant OSS Inventory application; the CBE serves as a common ?currency? across the two applications.\n\nThe primary source for discovered data is physical network equipment. However, the data available on the physical network may not always represent the complete picture for resources and services. For example, complete topology data is not always obtainable without additional data from external data sources. External data sources can be just about anything from databases, to other EMS/NMS systems, to administrator \"fat finger\" input.\n\nOSS Discovery makes no assumption that discovered data shall be persisted directly to a data store. The API provides notifications mechanisms related to discovery job lifecycle events. The API provides mechanisms for the production of discovery files compliant with the import and export schema specification of the Inventory API.\n\nAs an example, listeners can be business logic components that can access external data sources, and provide any necessary intelligence for merging data from the network and data from external sources. An implementation of the Inventory API is a natural candidate for the application of the discovery results. The specific nature of any business logic components is outside the scope of the Discovery APIs.\n\n2.2 What is the target Java platform? (i.e., desktop, server, personal, embedded, card, etc.)\n\nServer\n\n2.3 The Executive Committees would like to ensure JSR submitters think about how their proposed technology relates to all of the Java platform editions. Please provide details here for which platform editions are being targeted by this JSR, and how this JSR has considered the relationship with the other platform editions.\n\nThe target platform is Java 2 Platform, Enterprise Edition. The OSS Discovery API is developed consistently with JSR 144 and the other APIs developed by the OSS through Java? Initiative (JSR 89,90,91, 130, 142, 210) and works smoothly with them.\n\n2.4 Should this JSR be voted on by both Executive Committees?\n\nSince the JSR targets the J2EE platform, the J2EE/SE EC vote alone is appropriate.\n\n2.5 What need of the Java community will be addressed by the proposed specification?\n\nA number of software development firms in OSS targeted industries, such as telecommunications, are already using EJB components for their next-generation OSS software. Without some standardization conventions for these components, the industry runs the risk of proliferating similar components with slightly different APIs. Hence, standardizing these component APIs through a Java community process is an attractive proposition.\n\n2.6 Why isn't this need met by existing specifications?\n\nCurrently, no existing Java platform specification provides a standard API for OSS components. Existing APIs are generally vendor-proprietary.\n\n2.7 Please give a short description of the underlying technology or technologies:\n\nThe OSS Discovery API will be defined on top of J2EE and other OSS APIs. The most important J2EE APIs for this JCP will be the following:\n\nOSS CBE (Core Business Entities) Discovered resources and services will be modelled according to the OSS CBE\n\nEJB (Enterprise JavaBeans): To facilitate the integration of OSS components, the expert group will define standard EJB interfaces.\n\nJMS (Java Message Service): Besides the ability to execute synchronous (EJB) methods calls, there is also a need to send asynchronous messages. For this, JMS will be used.\n\nJNDI (Java Naming and Directory Interface): The specification will include standards for JNDI names based on the OSS CBE definitions\n\nXML: The definitions for entities such as discovery agents will make use of XML.\n\n2.8 Is there a proposed package name for the API Specification? (i.e., javapi.something, org.something, etc.)\n\nThe API will have one or several packages and the prefix for all packages will be \"javax.oss\". The remaining part of the package name will be defined according to a logical name for different parts of the API. Package names of all OSS JSRs will be coordinated to avoid ambiguous use.\n\n2.9 Does the proposed specification have any dependencies on specific operating systems, CPUs, or I/O devices that you know of?\n\nThe specification has no dependency on operating systems, CPUs, or I/O devices.\n\n2.10 Are there any security issues that cannot be addressed by the current security model?\n\nNone anticipated.\n\n2.11 Are there any internationalization or localization issues?\n\nNone anticipated.\n\n2.12 Are there any existing specifications that might be rendered obsolete, deprecated, or in need of revision as a result of this work?\n\nThis specification might impact the OSS Common API (JSR 144) section Core Business Entities specification and the OSS Inventory API (JSR 142). The synchronization and necessary evolutions will be managed by the OSS through Java Initiative members through the JCP process.\n\n2.13 Please describe the anticipated schedule for the development of this specification.\n\nAn approximate schedule that depends on the scope of the work and availability of expert members is as follows:\n\n- Spec Early Draft: November 2004\n\n- Spec Public Draft: January 2005\n\n- Spec Proposed Final Draft: 2Q2005\n\n- Spec Final Release: 3Q2005\n\n2.14 Please describe the anticipated working model for the Expert Group working on developing this specification.\n\nDetails of the day-to-day working model are TBD soon after formation of an Expert Group. Since OSS/J participation tends to be geographically diverse, ongoing conference calls and a dedicated mailing list are the most likely communication tools for tracking progress. Various EG members will be responsible for delivering the components of the JSR, RI, and TCK. The OSS Discovery project plan is accountable to OSS/J project plan, which is currently primed by the OSS/J Product Team.\n\n2.15 It is important to the success of the community and each JSR that the work of the Expert Group be handled in a manner which provides the community and the public with insight into the work the Expert Group is doing, and the decisions that the Expert Group has made. The Executive Committees would like to ensure Spec Leads understand the value of this transparency and ask that each JSR have an operating plan in place for how their JSR will address the involvement of the community and the public. Please provide your plan here, and refer to the Spec Lead Guide for a more detailed description and a set of example questions you may wish to answer in your plan.\n\nProgress updates will be provided on the OSS/J main web site (http://ossj.org/). The OSS/J leads have initiated efforts to provide more information to the public through projects on java.net. OSS Discovery will follow the plans for OSS/J as a whole. OSS Discovery progress will also be updated on the JSR community page on a regular basis.\n\n2.16 Please describe how the RI and TCK will de delivered, i.e. as part of a profile or platform edition, or stand-alone, or both. Include version information for the profile or platform in your answer.\n\nThe RI and TCK will be delivered as stand alone packages, under the same licensing model and certification model as all other OSS/J APIs. If, by the time of release, a decision is made to include OSS APIs as part of the J2SE/J2EE platform, the RI and TCK might be delivered as part of the J2SE/J2EE platform edition.\n\n2.17 Please state the rationale if previous versions are available stand-alone and you are now proposing in 2.13 to only deliver RI and TCK as part of a profile or platform edition (See sections 1.1.5 and 1.1.6 of the JCP 2 document).\n\nN/A\n\n2.18 Please provide a description of the business terms for the Specification, RI and TCK that will apply when this JSR is final.\n\nThe Discovery API will be made available to the public under exactly the same terms and conditions as all other OSS/J APIs, which is called the OSS/J Harmonized Licensing and Certification Model. The agreements for the Specifications, the Reference Implementations and the TCKs can be viewed by downloading any OSS/J API.\n\nSection 3: Contributions\n\n3.1 Please list any existing documents, specifications, or implementations that describe the technology. Please include links to the documents if they are publicly available.\n\n? OSS/J API Roadmap - http://ossj.org\n\n- OSS/J Core Business Entities (CBE) - http://ossj.org/\n\n- OSS Common API - JSR 000144\n\n- OSS Inventory - JSR 000142\n\n- TMF NGOSS eTOM and SID - http://www.tmforum.org\n\n- TMF.608, Information Agreement (IA) - http://www.tmforum.org\n\n3.2 Explanation of how these items might be used as a starting point for the work.\n\nThe OSS/J API roadmap provides broad directional guideline that describes the intended direction for OSS service and resource discovery.\n\nThe OSS/J Core Business Entities (CBE)describe the foundation for a data model that ties together all OSS/J work, based on the NGOSS SID\n\nThe OSS Discovery API is closely related to the OSS Inventory API because discovered entities typically serve as input data to the Inventory system.\n\nSection 4: Additional Information (Optional)\n\n4.1 This section contains any additional information that the submitting Member wishes to include in the JSR.\n\nN/A"
    }
}