{
    "id": "correct_subsidiary_00138_2",
    "rank": 79,
    "data": {
        "url": "https://patents.google.com/patent/US8966498B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US8966498B2 - Integrating operational and business support systems with a service delivery platform - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/57/74/7b/9cb09a812d4b5d/US08966498-20150224-D00000.png",
            "https://patentimages.storage.googleapis.com/d6/19/44/0f3384712ff94a/US08966498-20150224-D00001.png",
            "https://patentimages.storage.googleapis.com/45/38/f4/66f2989a439b0e/US08966498-20150224-D00002.png",
            "https://patentimages.storage.googleapis.com/f6/c3/34/35ef2d59988944/US08966498-20150224-D00003.png",
            "https://patentimages.storage.googleapis.com/3b/41/89/b22267523b5fdc/US08966498-20150224-D00004.png",
            "https://patentimages.storage.googleapis.com/fb/0b/d2/b26206a583f7aa/US08966498-20150224-D00005.png",
            "https://patentimages.storage.googleapis.com/bb/38/3b/0478fe718b0771/US08966498-20150224-D00006.png",
            "https://patentimages.storage.googleapis.com/52/c2/1d/f89f48ad8433e6/US08966498-20150224-D00007.png",
            "https://patentimages.storage.googleapis.com/e5/49/4d/09a9f9855db80e/US08966498-20150224-D00008.png",
            "https://patentimages.storage.googleapis.com/f1/22/c5/0a49e30af9c1dc/US08966498-20150224-D00009.png",
            "https://patentimages.storage.googleapis.com/7f/85/e1/eb5f143dc62340/US08966498-20150224-D00010.png",
            "https://patentimages.storage.googleapis.com/cc/1a/9c/8ba73b0e94e8d3/US08966498-20150224-D00011.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2008-01-24T00:00:00",
        "summary": "",
        "meta_description": "A service-oriented approach provides for an integration of components that would otherwise be considered different and unrelated components, such as runtime, business support systems (BSS), operational support systems (OSS), and third party components. Such integration allows messages to be transformed and passed between components as necessary to perform a particular task. For example, a BPEL workflow can be initiated upon receiving a user request through a network and gateway layer which will direct provisioning, activation, and processing via these various components. Identities can be managed across these various layers to provide for seamless end-to-end integration.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US8966498B2/en",
        "text": "COPYRIGHT NOTICE\n\nA portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.\n\nBACKGROUND OF THE INVENTION\n\nThe present invention relates generally to the interaction of system components, and in particular to the integration of independent components to allow the components to work together and delegate functionality in a processing flow.\n\nAt the present time there is a rapid convergence of technologies, such as telecommunications and information technology (IT) technologies. Confronted with huge infrastructure costs, telecommunication service providers are attempting to develop high value services in order to recoup their investments. At the same time, these providers have to deal with eroding revenue streams from traditional services (e.g., voice) and fend off aggressive new competitors such as virtual service providers and other Internet-based service providers that provide competitive services at very low costs. For service providers, it is essential to be able to rationalize their environment to build, deploy, and manage services as well as facilitate the development of attractive services by third party partner service providers.\n\nIn one example, the telecommunications industry is specifying and promoting new networks (such as NGNs or Next generation networks) that aim to provide support for the latest technologies (e.g., VoIP, multimedia streaming and messaging, and web 2.0) and an Internet-like user experience with viable business models for the operators. These networks can be used to provide new, attractive, and revenue generating multimedia ad real time services, for example. IMS (IP Multimedia Subsystem) is the most widely known example of such a new network technology. With its layered architecture, IMS provides the ability to deploy new exciting services (e.g., VoIP, Multimedia streaming and messaging and web 2.0), as well as convergence (e.g., VCC), making these services available through multiple access networks, such as FMC (Fix Mobile convergence) where the services are available through mobile and wired networks. Of course, the Internet is the other mainstream of NGN that enables web 2.0 services in general.\n\nAn example of a new and exciting service is triple play (voice+data+video) and quadruple play (e.g., adding IPTV, PSTN or mobile) combined with shared business support systems from a single operator or a service provider to a consumer. Demand for such converged services, combined with the convergence between wireless and fixed networks (e.g., broadband), further emphasizes the need to move away from silo-based architectures and instead rely on a horizontal, standards-based platform that enables convergence.\n\nIn telecommunications, service providers not only deal with the networks assets, platforms, and services, but must also support business processes to provide services to their customers and interact with their partners and suppliers, as well as operational processes to monitor and administer these assets. Tools, infrastructure, data repositories, and applications for performing these tasks are referred to as service provider business support systems (BSS) and operational support systems (OSS). BSS typically includes things that support the business aspects (e.g. CRM, PRM, ERP, Analytics, financial, revenue management) while OSS supports the execution of the business with aspects like monitoring, management, and administration; resolution of trouble; billing and/or charging; provisioning; activation; fulfillment; etc.) In any service provider, services and runtime interact with OSS and BBS. Today, OSS and BSS are often complex archaic systems designed for legacy networks where services, hardware, and network resources consist mainly of static components.\n\nTo successfully compete at Internet speeds, it is essential to evolve the OSS and BSS to better model and interact with the richer and more dynamically configurable nature of NGNs, service delivery platforms (SDPs), and applications built and deployed thereon. Platforms and applications have now become re-programmable and composable or configurable/customizable. They must be able to minimize time, risk, and effort in proceeding from service conception to revenue-generating deployment.\n\nIn one example, FIG. 1( a) illustrates a lifecycle 100 for various services, here for telecommunications processes, wherein it is desirable to minimize the time, risk, and effort in proceeding from service conception to revenue-generating deployment, and it would be desirable to automate such a process. It is further desirable to provide a near zero-touch service lifecycle wherein an end-to-end solution can easily be provided to industries such as the telecommunications industry with OFM and applications. As seen, the lifecycle runs from conception 102 through creation and assembly 104 to implementation 106, which then may require further conception, creation, and assembly. The service is then provisioned and deployed 108, finally arriving at the revenue generation and management stage 110.\n\nFIG. 1( b) further illustrates the lifecycle by detailing the concept to cash value chain 150. The chain passes from creation to design and configuration for the service. After execution of an appropriate campaign, the service fulfillment stage occurs, where inventory is assigned, and the service is provisioned and activated. The service usage and charging phase is then carried out such that the service can arrive at the billing and collections stateâarriving at revenue management.\n\nIt thus is desirable to be able to integrate the various systems utilized at these and other various stages in order to streamline the service lifecycle.\n\nBRIEF SUMMARY OF THE INVENTION\n\nSystems and methods in accordance with various embodiments provide for an integration of independent components that would otherwise be considered different and unrelated components, such as runtime, business support systems (BSS), and operational support systems (OSS) components. Such integration between pieces allows the components to then rely entirely upon a service-oriented architecture (SOA)-based approach, which allows messages from one component to be transformed and passed to the appropriate component to perform a particular task. While various embodiments will be described with respect to telecommunications and similar technologies, it should be understood that there are a number of technologies, service providers, enterprise applications, infrastructure, and other such entities that can utilize and take advantage of aspects of the various embodiments. Various embodiments can be utilized to provide products or packages such as pre-packaged business processes that include not only the processes but also the integrations of the applications, infrastructures, and elements that are involved for any particular industry. For telecommunications, for example, the product can include OSS, BSS, SDP, and network integration in a box, and for an IP network can include Internet and telecommunications functions (e.g., charging, policies, security, quality of service, etc).\n\nIn one embodiment, information for an application such as a CRM application is collected and retrieved when a customer starts interacting with the system. Some operations are executed across different components, and in one example a workflow (such as a BPEL workflow that may be coupled to a ESB or with a EDA (event drive) architecture) is kicked off that initiates any composition or decomposition, and that passes the flow and any associated processing to the various components that may be required. In this example, part of the processing is performed by starting the activation and provisioning of the service delivery platform (SDP) and applications. If an account needs to be created in SDP or an application, for example, the flow can pass a request to the runtime component(s) to create the account and service. The workflow can also pass a request to an appropriate component to determine the pieces to be provisioned to activate a service or perform another such action. The flow then can pass to a billing or other such system to perform actions needed for billing, information updating, etc.\n\nEach of these components can operate independently to perform a task, and can come back to the flow when that task is completed (successfully or unsuccessfully). In one embodiment this flow is a BPEL workflow, while in other embodiments this can involve SOA and EDA (e.g., BPEL orchestrating an ESB), with messages being further transformed to each target component based on canonical data model information. Error and/or result messages are returned accordingly, as well as any other notification/event that the applications may throw. In the example, once the various components are provisioned it is possible to come back and begin activating each component, as the components are enabled to begin processing for the user. Once the components are activated, the service is ready for use.\n\nAn application or component thus is able to integrate with other such applications or components to delegate some functions and/or subsequent steps of the flow by generating a message that describes request or status, putting it on an SOA/EDA infrastructure (e.g., BPEL, ESB) where the messages may be transformed to a canonical data model. The canonical data model can model the generic status, state, or session before itself being transformed into a message that can be understood by the target. The overall state can be kept in the data model, but the task is passed to the target, etc., when all the processes are finished. Errors can be modeled and handled in a similar fashion. This way an application is able to delegate or pass the hand to other applications, or an overall process can orchestrate the application, therefore easily allowing the definition of an overall business process supported by the integration. These business processes can be pre-packaged business flows, patterns, or processes, for example.\n\nIn certain embodiments, the SDP (or the runtime for the network) and the OSS/BSS components utilize, are developed for using, or are compatible to use the same managed identity so that, independent of the particular network, it can be ensured that the user is the same, and the user identity can be managed appropriately across different networks. Systems and methods in accordance with the various embodiments can combine components such as OSS/BSS components using a service oriented architecture (SOA) and an event driven architecture (EDA), and build the components on the same stack, or at least on a same identity framework, so that they can share managed identities. By integrating components such as SDP, OSS, and BSS components, an end-to-end integration can be provided that enables consistent OSS/BSS/SDP coexistence across multiple network technologies, enabling evolutionary deployments of NGNs, as well as enabling consistent OSS/BSS/SDP and service sharing across multiple network technologies or providers, enabling true convergence. Such an approach also provides for business-driven management with almost zero touch of all the service provider systems.\n\nA further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.\n\nBRIEF DESCRIPTION OF THE DRAWINGS\n\nVarious embodiments in accordance with the present invention will be described with reference to the drawings, in which:\n\nFIGS. 1( a) and (b) illustrate examples of a service lifecycle that can be automated in accordance with various embodiments;\n\nFIGS. 2( a) and (b) illustrate a service delivery platform-based architecture that can be used with various embodiments of the present invention;\n\nFIG. 3 illustrates an exemplary flow that can be utilized in accordance with one embodiment of the present invention;\n\nFIGS. 4( a) and (b) illustrate packaged and integrated OSS/BSS/SDP solutions and operations that can be used in accordance with various embodiments;\n\nFIGS. 5( a), (b), and (c) illustrate examples of architectures that can be used in accordance with one embodiment of the present invention;\n\nFIG. 6 illustrates a typical SOA+EDA architecture and infrastructure that can be used with various embodiments;\n\nFIG. 7 illustrates an exemplary architecture including a charging enabler with one embodiment of the present invention;\n\nFIG. 8 illustrates an exemplary architecture including a resource management enabler in accordance with one embodiment of the present invention;\n\nFIG. 9 illustrates a series of life cycle management interfaces (exposed by SDP/service layer element), showing where those interfaces should be exposed and to whom, in accordance with one embodiment of the present invention;\n\nFIG. 10 illustrates an exemplary UUP-based architecture in accordance with one embodiment of the present invention;\n\nFIG. 11 illustrates an exemplary UUP-based architecture in accordance with one embodiment of the present invention;\n\nFIGS. 12( a) and 12(b) illustrate exemplary subscription management architectures in accordance with one embodiment of the present invention;\n\nFIG. 13 illustrates an exemplary flow for subscription management in accordance with one embodiment of the present invention;\n\nFIG. 14 illustrates components of a computer network that can be used in accordance with one embodiment of the present invention; and\n\nFIG. 15 illustrates components of a computerized device that can be used in accordance with one embodiment of the present invention.\n\nDETAILED DESCRIPTION OF THE INVENTION\n\nSystems and methods in accordance with various embodiments overcome the aforementioned and other deficiencies by providing for an integration of components that would otherwise be considered different and unrelated components, such as runtime, business support systems (BSS), and operational support systems (OSS) components. Such an approach allows components to then rely entirely upon a service-oriented architecture (SOA)-based approach, for example, which allows messages from one component to be transformed and passed to the appropriate component to perform a particular task. More importantly, it allows a component to delegate a task to another task, for example, or to pass the context to the next component to drive the next step of the target end-to-end business process or life cycle management of a service.\n\nFIGS. 2( a) and 2(b) illustrate an exemplary service delivery platform (SDP)-based architecture 200 that can be used in accordance with one embodiment. In the exemplary architecture 200 of FIG. 2( a), the SDP includes a horizontal, standards-based platform that abstracts the underlying network resources and follows a service-oriented architecture (SOA). Further information about such a service delivery platform is detailed in co-pending U.S. patent application Ser. No. 11/357,653, filed Feb. 16, 2006, entitled âFACTORIZATION OF CONCERNS TO BUILD A SDP (SERVICE DELIVERY PLATFORM),â which is hereby incorporated herein by reference. In one embodiment, the SDP utilizes a horizontal SOA platform based on the Java 2 Platform, Enterprise Edition (J2EE). The SDP includes a converged container based on Java Specification Requests JSR 116/289 and JSR 32, which includes SOA SIP AS, OSA AS, and telephony AS as a J2EE converged container. The SDP also exposes mobile, voice, and other communications enablers.\n\nIn FIG. 2( b), the SDP configuration 250 implements the desired functionality on top of an underlying J2EE core provided by the application server. It is valuable to have a common identity managed across all the elements and the network, as well as a common view of all the data about a principal. A basic approach to providing a service delivery platform starts with a standards-based IT platform (e.g., J2EE) and makes the platform carrier grade, and extends beyond HTTP to protocols such as SIP, Diameter, and Parlay. To support the key protocols relevant to Telecommunications, for example, the SDP can provide support for SIP/ISC, Diameter and Parlay CORBA as well as adapters to messaging gateways. A standard approach can be used to build adapters to any other resource or protocol using JCA 1.5, for example. Enablers are provided as reusable components that abstract the network resources and standard northbound interfaces. IT/SOA then can be used to provide services such as revenue generating services, utilizing SOA-based policies and business rules (e.g., from third parties). The platform then can provide for SOA-based integration of OSS, BSS, and SDP. Exposure to third party content and service provider can be achieved by SOA to expose, integrate and enforce policies. SOA also can be used to also support and rationalize policy management and evaluation throughout the service provider environment.\n\nThe SDP can be thought of as a service layer solution that can be deployed on Oracle fusion middleware/OC4J as well as JBOSS, BEA Weblogic, and IBM Websphere, for example. While SIP is described as a first class citizen protocol besides HTTP, other protocols can be supported out of the box using a recipe for JCA 1.5 adapters to Parlay CORBA, Diameter, Messaging protocols etc. The J2EE container is converged (i.e. every object from SIP, HTTP, J2EE object etc can share context and interact with each others, when it makes sense) and carrier grade (details provided after). This includes the use of TimesTen and open source technologies like JGroups, and also can be able to rely on Tangosol Coherence to provide session replication and efficient distributed cache. The enabler framework includes an OSA AS (i.e. Parlay JR 5.1 J2EE local interface and Parlay X 2.1). These are realized on SIP and Parlay JCA and can be realized on others as well. A JSR 116 SIP servlet converged container (SIP AS) can be used for IETF and IMS (ISC) deployments. The SIP servlet container also can include all the necessary components to deploy a vanilla IETF SIP network (i.e. proxy router, edge server, registrar/location, STUN server, support for ENUM server, application dispatcher).\n\nA set of enablers can be provided and implemented on SIP and Parlay. These enablers can include, for example, a presence enabler that follows OMA SIP/SIMPLE Presence, XDM and RLS enabler specifications. It is an out of the box IMS presence server and SIP/SIMPLE presence server. It can also aggregate presence from other networks (e.g. Parlay network presence) and provide northbound parlay X interface for application to use presence without participating to the presence network. Location data can be modeled as a presence attribute using an extensible presence data model. A multi-channel A2P and P2A messaging enabler can allow for sending and receiving messages in channels like SMS, MMS, email, IM (XMPP), SIP and others. Enablers can allow for multimedia and multiparty call control over SIP (internet and IMS) as well as Parlay. Enablers can provide service level charging that exposes online, offline charging balance inquiry and tracking, pre-rated charging etc integrated to Ro/Rf (AAA media gateways), Parlay and Oracle BRM. Others can be similarly integrated via JCA 1.5 adapters to be developed by third parties. A media server control enabler and voice access enablers that are the MRFC functions of MRF are able to control a wide variety of voiceXML servers, IVRs, announcement servers, and media servers (e.g. MSML, MSCML, MSCP, and MGCP). Protocols not available out of the box can be built on SIP AS or using JCA 1.5.\n\nThe whole platform can be used with identity management services. In one example, a UUP (unified user profile) built on a Virtual Directory offers an identity managed single view of the information about the subscribers (or other principles) from OSS (e.g. assets in inventory), BSS (e.g. bill and subscriptions), network (e.g. HSS via Sh), Dynamic information (e.g. presence or location) and any other service level specific information (e.g. credentials, and application or enabler data).\n\nIn one embodiment, the service delivery platform (SDP) is a standards-based horizontal platform that abstracts the underlying network resources, follows a service-oriented architecture. The platform can be a SOA platform based on J2EE, which includes a J2EE converged container and exposes various communication enablers. Enablers can include, for example, call control enablers and media server control enablers as discussed elsewhere herein. Further, interfaces can be exposed to applications and other enablers and resources for usage of various functionality. Some or all of the interfaces can be standard or standardizable, as is its behavior, such as may include OMA, Parlay, Parlay X, and WS components. For the purpose of the SDP, these enablers can provide various MVC (Mobile/Voice/Communications) functionality. The applications can be built using one or more enablers, and can add notions like a user interface (UI), user management, and charging, either in the code or via delegation and orchestration.\n\nFIG. 3 illustrates an exemplary flow 300 through the components in an integrated architecture such as that described with respect to FIGS. 2( a) and 2(b), for illustration purposes. This example illustrates integration with BPEL (business process execution language) instead of a full service-oriented architecture (SOA) and event-driven architecture (EDA) where transformations and exchanges occur on an Enterprise Service Bus (ESB) with respect to a canonical data model that also handles error message, exceptions, etc. This is a conventional SOA/EDA approach, as described hereinafter. A complete detailed architecture for one example rather follows FIGS. 5( a)-(c). In this example, a customer is interacting with an operator system through self-service (e.g., a Web site or IVR) or via a CSR (e.g. a call center or processing of point of sales/froms). The various components and operations are shown at different levels in this example flow, including a customer level 302, a BSS level (here a CRM system component self service or call center/CSR console) 304, a workflow level 306 (such as a BPEL workflow level in one exampleâwhich is used to easily illustrate the invention but alternatively could be accomplished through message transformations (e.g., EEB+BPEL), EDA, and SOA as discussed elsewhere herein, such as with respect to FIGS. 5(c) and 6, a runtime application or service level (here the SDP) 308, an OSS level (here a provisioning, activation component and inventories/RMO (resource management operations)) 310, a combined (to some extent) OSS and BSS level (here a Billing and Revenue Management (BRM) component) 312, and another BSS level (here an E-Business Suite (EBS) component) 314 responsible for ERP, Financials, etc. The workflow component 306 acts as the âglueâ for bringing the various components together and integrating the components. In theory the transformation is implemented based on the canonical data model that also manages the overall process, and stores/understand its status, such that the SOA/EDA can be used to delegate functions from one component to the other, as well as to allow marshalling a complete process flow from one element to the other and error message handling supported by an architecture such as that illustrated in FIGS. 5( a)-(c). Such a process can be accomplished in a number of ways for the customer, such as in a self-service mode, through a Web page, or interacting with a live operator.\n\nWhen the customer starts interacting with the system in this example, information for the CRM application is collected and retrieved. Some operations can be executed across different BSS components, such as where customer is going through a process to order a phone and it is necessary to check the types, availability, quantity to be shipped, etc. Such an operation can be implemented by having a BPEL workflow going from one BSS application to another. Components such as a credit check module and an inventory check module are shown at the bottom as BSS components (here done by querying BSS ERP applications and inventories in RMO). Various things can occur during processing of the order, such as having CRM suggesting an item at a reduced price upon purchasing a certain level of service, as well as other types of bundling, campaigns, and promotions. One the order is confirmed at the customer level, the order is submitted by the CRM system, a BSS component. As can be seen, submitting the order kicks off a BPEL workflow which initiates the composition/decomposition of the order and passes the order processing to the various components that may be required, for example, for order decomposition and fulfillment. In this example, BPEL (i.e., SOA/EDA in the bigger picture) performs parts of the order fulfillment by starting the activation and provisioning of the SDP/applications and passing decomposed order fragments to BRM in order to create accounts and Metasolv to start further order fulfillment, activation, and provisioning. Accordingly, if an account needs to be created in SDP or an application, for example, the flow can pass a request to the runtime component(s) to create the account and service. The workflow can also pass a request to the OSS to determine the pieces to be provisioned to activate that service for this order. The flow then can pass to a billing system to create the billing information, as well as to store address, user, and other information that will be needed for billing. The rates can be associated with different services for the order, so that information can be stored as well.\n\nAs can be seen, each of these components can be running independently to perform at least one of these tasks, and can come back to the flow when that task is completed (successfully or unsuccessfully). In one embodiment this flow is a BPEL workflow, which in other embodiments this can involve SOA and EDA, with messages being further transformed to each target component based on canonical data model information. Error and/or result messages are returned accordingly, as well as any other notification/event that the applications may throw. The overall process may be passed from an application/component to a component, or marshaled from the overall canonical data model to execute an overall SOA/EDA process. This may be triggered externally by other events, command lines, scheduled events, etc. In this example the last component to return to the workflow is the OSS Metasolv provisioning, activation, inventory management and order fulfillment application that indicates (after decomposing part of the order and ensuring activation and provisioning of all items and fulfillment (e.g., by for example ensuring monitoring of shipping the items such as phones or modems to the user), either via direct monitoring of the supply or via interaction with the ERP that it directly drives) that everything to be fulfilled in the order has been activated, provisioned, or otherwise fulfilled. In the example, once the various components are provisioned it is possible to come back and begin activating each component, as the components are enabled to begin processing for the user. Once the components are activated, the service is ready for use. In the example illustrated here, example, the service is a proximity service where monitoring is done of the presence and location information, and a proximity is detected. When a customer is close to a particular location, a notification takes place to a proximity service that initiates a call or SMS exchange (or another appropriate messaging channel) with the user, and a charge is generated for the activity.\n\nIn this example, the user is notified based on preferences that were selected when the user subscribed to the proximity service offered with a wireless plan that was bundled with the phone ordered by the user. Preferences can include, for example, to be notified when a friend or particular store is nearby. So in one example when a user is within a specified proximity of a friend, the user can select to receive an automated call informing the user of the proximity, and asking whether the user would like to call the friend (such as by selecting â1â to call or â2â to refuse). In another example, when a user walks by a location of a coffee franchise, the user can select to receive any offers or discounts for the franchise. For example, the user can hear the offer, then select â1â to accept the coupon to the device or â2â to refuse. Alternatively, a similar exchange can occur via messaging using a messaging enabler described in such as is described in U.S. patent application Ser. No. 11/939,705, entitled âIntelligent Message Processing,â filed Nov. 14, 2007, which is hereby incorporated herein by reference. The user is then charged accordingly, such as for calling to speak to the nearby friend or receiving the coupon. Where the user accepts the coupon, it is possible to charge the user, the franchise, or even the service provider for the call, as well as any discount or free drink given using the coupon. Throughout the system the bill of the subscriber and of the franchise can be seen in real time, such as by using the dashboard of Oracle BAM (Business Activity Monitoring), which monitors all usage of the system. Bills can be monitored and the data can be captured in Oracle Financials (books) and analyzed via Business Intelligence like Oracle BI That charge will then be reflected in the billing system. In one example, promotions can be suggested to a user, such as when a user is near a coffee shop location that offers a discounted drink, etc. It is then possible to also work with third party partners (such as a coffee retailer who would have the business where the promotion kicks in) in such a way that bills can be determined according to the promotion/pricing as agreed. In this case, the coffee retailer may be charged for the customer to view or select to obtain the promotion, or the service provider might instead decide to pay the retailer for the promotion. The third party then can in real time see the resulting revenue sharing balance and the current usage statistics.\n\nIn certain embodiments, the SDP (or the runtime for the network) and the OSS/BSS components utilize, are developed for using, or are compatible to use the same managed identity so that, independent of the particular network, it can be ensured that the user is the same, and the user identity can be managed appropriately across different networks. Often current systems perform identity management at the network layer, or maybe at the service level when the identity is exposed to a third party. Unfortunately, those two identities are rarely linked and managed, and further there is no existing link with the OSS/BSS components as the components exist in a separate layer or environment. Systems and methods in accordance with the various embodiments can combine these components using a service-oriented architecture (SOA), and build the components on the same stack so that they can share managed identities. As a result it is not possible to truly share services (possibly adapted to the capability of network of user terminal) on different access networks, much less to share, coordinate, or continue sessions across networks.\n\nBy integrating components such as SDP, OSS, and BSS components, an end-to-end integration can be provided that enables consistent OSS/BSS/SDP coexistence across multiple network technologies, enabling evolutionary deployments of NGNs, as well as enabling consistent OSS/BSS/SDP and service sharing across multiple network technologies or providers, enabling true convergence. Such an approach also provides for business-driven management with almost zero touch of all the service provider systems.\n\nA service (i.e., an application or set of applications that can be sold or offered to a customer) can be conceived and defined in terms of its dependencies on service provider's assets. These dependencies include the type of asset or required feature, a type of settings, a location for the assets to support the service, how the assets should be assigned, required bandwidth, etc. An OSS/BSS service creation tool allows capture of that information as metadata associated to the service. The tool can also associate metadata to all the assets in the service catalog and inventory of the service provider to help match capabilities of assets with dependencies by describing these capabilities. A BSS service assembly environment is then a tool or a process that allows assembly of a defined service based on available assets in catalog and inventory. Missing assets may kick in OSS/BSS (e.g., ERP) processes to acquire the missing items or build the item (e.g. as a software application via software design or composition) on the SDP. They also can raise alerts to contact the subscriber and see if the service provider should upgrade, sell other services, refund, etc. When software is configured, reprogrammed, or composed to produce a new application, metadata is associated therewith. When making it available in a software catalog or registry, for example, a SOA flow can be kicked in, such as is described in more detail in co-pending U.S. patent application Ser. No. 12/019,299, filed Jan. 24, 2008, entitled âService Oriented Architecture (SOA) Management of Data Repository,â which is hereby incorporated herein by reference. This flow/process places the appropriate data in catalogs such as a product catalog, service catalog, and inventories of assets to reflect the new items. The catalogs of product, services, and/or inventory are therefore appropriately updated with the available new service. Through OSS/BSS tools (e.g., CRM) it is now possible to price, create campaign promotions, bundle recommendations, etc., which can be sold along with the rest of the offerings. The service can then be deployed and provisioned, activated or run, and charged or billed for usage on the SDP along with appropriate network provisioning. Again, catalog and inventory are provisioning and deployed assets are administered and monitored by the OSS.\n\nFIGS. 4( a) and (b) symbolically illustrates exemplary OSS/BSS/ SDP integrations 400, 450 that can be used in accordance with various embodiments. It should be understood that these are merely examples and it does not matter which OSS/BSS applications are used. Further, interfaces, messages, models, and other aspects may change from one application to another, for example, as would be understood to one of ordinary skill in the art in light of the teachings and suggestions contained herein. With CRM, a subscriber or third party can create an account either in self service (e.g., web, IVR) mode or assisted by a CSR (e.g., call center, joint IM web session, Form mailed, or Point of sale). Upon creation of the customer account in the CRM (e.g., a data hub), these accounts are appropriately provisioned in the billing system and in the runtime (as user identities for the SDP 402), as well as when needed in the network or in the service delivery platform (e.g. using SOA/BPEL and/or MetaSolv that provides activation and provisioning and performs at least some of the fulfillment (possibly delegating some of it to ERP)). Subscribers can then subscribe to services and third parties can sign-up for services or other contractual terms. Promotions or campaigns, for example, can suggest additional offers to the customer or partners. Credit or balance checks, as well as other business steps, may be taken. In addition to updates of the customer or partner data hub, upon a subscription or agreement the customer management orchestrates the necessary steps such as the billing system being provisioned with rating and billing terms, and the SDP and services being provisioned (e.g., authorization table, subscription information, preference, settings, policies that reflect SLAs, etc.). Network resources may also be provisioned when required, which may involve allocating assets, sending products, updating inventories, and other steps in the ERP system. The MDM (master data management) module shown can include two datahubs, including UCM (Universal Customer Master) and PIM (Product catalog) modules, for example. As can be seen in the figure, the system also can utilize content management as is discussed in more detail below.\n\nThe subscriber or third party is able to interact with the services on the SDP. Network and service level charging may take place that results in balance updates according to the contracts. Revenue sharing credits may also be provided to other third parties. Usage itself can be monitored via BAM (Business Activity Monitoring) in real time, and BI (business intelligence) can be done in a batch/deferred mode of the SPD. In real time, the BAM information and balance updates can be reflected in the general ledger of the service provider, as well as in its analytics and BSS modules. Throughout operation, the OSS 404 monitors and/or administers the overall system. This can be done at the level of the middleware that runs the SDP and OSS/BSS, as well as at the level of the network via integration with the network OSS. Faults can result into alerts to the OSS that rely on inventory and subscription information to detect affected assets and customers, as well as to support them. Similarly, CRM support can raise alerts in the OSS. These are just a few examples of integration flows that illustrated the power of the approach.\n\nFIG. 5( a) illustrates an integration model 500 that can be used in accordance with one embodiment of the present invention. Here, the integration is based on standard SOA using BPEL, EBS, and Web services (WS) with a canonical object model and appropriate transformations. Such an architecture provides for a number of OSS/BSS/SDP integration points. For example, a provisioning integration point allows for SDP and service provisioning via BSS. This can include, for example, customer facing catalogs, inventories, application configuration, and provisioning data. Policies provisioning for policy enforcement is a particular case. Another integration point involves charging, including service or transaction charging as well as network or traffic charging. While the integration illustrated in FIG. 5( a) is the essence of one embodiment, it should be understood that any other type of integration implementation can also be supported, such as is illustrated in the arrangement 550 of FIG. 5( b). FIG. 5( c) illustrates another integration example 580, wherein an existing customer record is translated into a generic Enterprise Business Object (EBO) and then pushed out to BRM in the format required.\n\nAn aspect such as charging can be accomplished using, for example, an OMA charging enabler, Diameter Ro/Rf or Parlay. FIG. 6 illustrates an architecture 600 relating a full service-oriented architecture (SOA) and event-driven architecture (EDA) in accordance with one embodiment. In this particular example, a BPEL workflow and Web services are used to coordinate calls between the SOA and EDA components, although this is merely for purposes of illustration and is not necessary as discussed above. Using such an approach, SOA is able to achieve loose coupling among interacting software agents. In this context, a service is a unit of work done by a service provider in order to obtain a desired result for a user or customer.\n\nAnother integration point involves Identity Management, data hubs, and profiles. This can include, for example, account information, subscriber profile, principal data hubs, and HSS. The integration can provide for virtual views and common provisioning. Sharing BSS with Identity Management is mandatory for convergence (e.g., FMC). More detail can be obtained in the âService Oriented Architecture (SOA) Management of Data Repositoryâ application incorporated by reference above. Identity management can take place across the various applications such that identities can be managed across applications, providing for functionality such as single sign-on, federation, and anonymization.\n\nAnother integration point involves the OSS/BSS support of run time applications, where BSS steps can be done by an application or third party. The BSS then also can provide application logic, as applications can rely on BSS functionality, such as to develop a content delivery platform. At this level, for example, content management can also be integrated so that an application such as CDS can be implemented by calling the function provided in OSS/BSS via a composition of Web services, for example. More detail can be found in U.S. patent application Ser. No. 11/138,844, filed May 25, 2005, entitled âPlatform and Service for Management and Multi-Channel Delivery of Multi-Types of Content,â as well as U.S. patent application Ser. No. 11/357,652, filed Feb. 16, 2006, entitled âService Level Digital Rights Management Support in a Multi-Content Aggregation and Delivery System,â and U.S. patent application Ser. No. 11/671,127, filed Feb. 5, 2007, entitled âOrchestration of Components to Realize a Content or Service Delivery Suite,â each of which is hereby incorporated herein by reference. The presence of content management is illustrated in FIG. 4, for example, which allows content to be treated directly as a new product/service sold, recommended campaign, etc., to customers. This can be achieved by allowing OSS/BSS functions to be exposed as enablers or reusable pieces of code that drive the function (in this case from OSS or BSS) and expose it via a North bound interface in ways that are independent of the implementation/OSS/BSS details. Examples are discussed below with functions such as charging and rating exposed as a charging enabler and resource management enablers.\n\nAnother integration point (OSS) is at the level of the platform and service management integration with OSS network management and inventory systems. Every component in an SDP and OSS/BSS application can be managed via JMX, for example, and viewed in a JMX management environment such as Oracle EM. The component itself then is able to report alerts and management information to other management systems via WS/SOA/EDA or via SNMP. In this way network management can be shown in EM, or EM can be shown in network management. Further, SNMP can be used. In one embodiment, EM can generate SNMP towards other OSS management systems, such as HP OpenView, CiscoWorks, Tivoli, etc.\n\nOther integration points include run time analytics in BSS flows: run time information from BAM can be introduced for BI and analytics in a product such as Oracle analytics. Aspects of the service creation and assembly environment, including those described above, can combine BSS SCE/SAE with SDP tools or SCE.\n\nOther points include run time service level agreement (SLA) and quality of service (QoS) enforcement via SDP and NGN. The terms of contracts result in policies to enforce in the SDP and network. The OSS/BSS generates the policies that can be enforced. Further information on such use of policies can be obtained in U.S. patent application Ser. No. 11/024,160, filed Dec. 27, 2004, entitled âPolicies as Workflows,â as well as U.S. patent application Ser. No. 11/565,578, filed Nov. 30, 2006, entitled âOrchestration of Policy Engines and Format Technologies,â each of which is hereby incorporated herein by reference. The enforcement of such policies is further described, for example, in U.S. patent application Ser. No. 10/856,588, filed May 28, 2004, entitled âMethod and Apparatus for Supporting Service Enablers Via Service Request Composition,â as well as U.S. patent application Ser. No. 10/855,999, filed May 28, 2004, entitled âMethod and apparatus for supporting service enablers via service request handholding,â and U.S. patent application Ser. No. 11/536,731, filed Sep. 29, 2006, entitled âService Provider Functionality With Policy Enforcement Functional Layer Bound to SIPâ. Additional examples are provided below with discussion of using the resource management enabler to expose things such as network provisioning, RMO, and inventory integration.\n\nIt should become clear that in the bigger picture of integration, OSS and BSS are really just other types of applications. As with any other application, the BSS/OSS can be implemented on IT middleware like Oracle Fusion Middleware and SDP, and can rely on SOA and EDA as discussed above. In that view, OSS, BSS, and services run on SDP and interact with abstracted underlying network resources. This is also the way, with respect to FIG. 5( b), for example, that the network resources and legacy resources can be integrated and managed. The resources can be abstracted by enablers in the service layer that have life cycle management (side ways) and service (northbound) interfaces. Northbound interfaces can be used to execute the functions and/or compose. Life cycle management is one way in which they are integrated, driven, and interact with OSS/BSS as described. Underlying resources can be abstracted via southbound adapters, as is consistent with the notion of enablers and layered architecture disclosed in, for example, U.S. patent application Ser. No. 11/357,653, incorporated by reference above.\n\nThe resulting OSS/BSS/SDP integration at the service layer for legacy and NGN networks provides a unique new value proposition of business driven, low-touch life cycle management of resources in the service provider domain. This way, life cycle management moves from expert system administrators to being management driven by business process and marketing staff. OSS and BSS then also can be shared or federated across many different network technologies or providers, thereby providing consistent coexistence across networks as well as true convergence, where the customer experience is common across these networks and modules are able to adapt to the intrinsic characteristics of these networks. It is also essential in many cases in order to support continuity services, where services are started on one network and continued within same session on another network.\n\nIn one embodiment, a billing and revenue management (BRM) system can take advantage of service-level charging in a service delivery platform. By utilizing a charging enabler, the BRM system can correlate and reconcile information and avoid problems such as double charging. FIG. 7 illustrates an exemplary architecture 700 that can be used to provide such a charging enabler 702 between the network layer 706 and the application layer 704. Such a charging enabler can provide both online and offline service level charging using a charging agent, as well as account management. The charging enabler in one embodiment is an SDP level component providing standards-based interfaces (e.g., APIs) for charging (northbound) including Parlay Charging (Java), Parlay Account Management (Java), Parlay X Payment (Web services), Parlay X Account Management (Web services), and Diameter RfRo (Java Diameter API). The service level charging can include, for example, balance checking and tracking, pre-rated charges, delegated rating, and rate inquiries. Such charging can be used with Open Mobile Architecture (OMA) and Parlay-based systems, for example. Charging drivers 708 can be used to connect southbound to realizations of the functions and can include IMS CCF (Diameter Rf)/OCS (Diameter Ro), Parlay Gateways, BRM, and file-based drivers. Any northbound interface should match to any southbound protocol (where applicable).\n\nFIG. 8 illustrates an exemplary architecture 800 that can be used to provide a resource management enabler 802. A resource enabler can provide device and resource life cycle management, such as mobile/OTA management including legacy device provisioning (e.g., smart messaging). A resource enabler also can provide for activation and provisioning, such as for mobile phones, VoIP or soft phones, and client provisioning and activation (e.g., set-top boxes), as well as network provisioning and activation. A resource life cycle management enabler also can provide other life cycle management functions, such as managing inventories and providing monitoring, as well as installing, updating, monitoring, and retiring software.\n\nFIG. 9 illustrates a configuration 900 utilizing a series of life cycle management interfaces (shown as rectangles to the left of various components), whereby OSS and BSS processes are able to provision and activate the SDP components just like any other resources. Each SDP component (e.g., an enabler, containers, service/application and any composition of the above) is exposing life cycle management interfaces to that effect. In fact, these components need a way to describe their dependencies (what else is to be managed/available to support them), the interfaces for lifecycle management, etc. This is again captured in metadata that can be used to ensure that all dependencies are supported when lifecycle management steps are taking place. Life cycle management of network components is described elsewhere herein, such as with respect to FIG. 5( b).\n\nReturning to FIG. 8, it should be mentioned that this is not simply enough to utilize a standard interface (e.g. a 1a WSDL in a UDDI), but it is necessary to provide for deployment, integration etc., such that southbound adapters can be deployed, for example. An enabler that provides device and resource life cycle management can include Mobile/OTA (e.g., OMA DM and legacy device provisioning [e.g. smart messaging]), activation and provisioning (e.g., VoIP/Soft phones and client provisioning and activation [e.g. set top boxes, SIMs, . . . ], Network provisioning and activation) and other life cycle management functions (e.g., inventories, RMO, monitoring. Install, update, monitor, and retiring of software). The enabler can also include JCA 1.5 adapters to MetaSolv (e.g., catridges to resources) and JCA 1.5 adapters to other management systems or directly to managed resources. It should be noted in FIG. 8 that the enabler talks to the MetaSolv that does the management. The enabler can also directly talk to the resources to perform lifecycle management of the resources (e.g., symbolized by Others) such as via JCA 1.5 as described for example in co-pending U.S. patent application Ser. No. 11/951,500, filed Dec. 6, 2007, entitled âAchieving Low Latencies on Network Events in a Non Real Time Platform,â which is hereby incorporated herein by reference.\n\nIn another aspect, a run-time linkage can be provided between OSS and BSS components. When a software component is developed and made available, the component can be included as needed in inventory, a product catalog, a service catalog, a SW catalog/UDDI, etc. Metadata can be used (such as is described above) to describe the dependencies on other resources, as well as various provisioning and life cycle management aspects.\n\nIntegration also can allow for linking with the unified user profile to perform functions such as exposing Universal Customer Master (UCM) management and master data management (MDM) functionality. As illustrated in the exemplary architecture 1000 of FIG. 10, a unified user profile of the virtual directory layer can aggregate the view of items and delegate subscriptions via calls to BSS/OSS. Such an approach can utilize customizable schema mapping, and customizable distributed caching and pre-fetching. The northbound interfaces also can be wrapped and transformed as needed. Northbound interfaces can include Java, SOAP/HTTP, LDAP, Diameter, OMA GSSM, and XCAP interfaces, for example. Southbound protocols can include LDAP, XCAP, JDBC, Web service, and Diameter protocols, for example. FIG. 11 illustrates an exemplary UUP architecture 1100 including an access layer, virtual directory layer, and adapter layer between the interfaces and system components.\n\nFIGS. 12( a) and 12(b) illustrate exemplary architectures 1200, 1250 for providing subscription/subscriber management in accordance with one embodiment. Further detail for such architectures is provided in the âService Oriented Architecture (SOA) Management of Data Repositoryâ application incorporated above. In one instance, the UUP directly implements the integration and data manipulations are delegated to OSS/BSS that, as a result, update the data seen/aggregated by the UUP. In another instance, the UUP performs the change on the database (e.g., MDM) that implements the integrations by launching SOA flows in OSS/BSS to match the data changes. Subscription management typically is a BSS operation, not a run-time or network operation. A subscription management component can integrate SuM, GSSM, and GUP with BSS to trigger operation and associated flows in/from BSS. In an integrated architecture, a request for subscription management may be passed to BSS, whereby BSS triggers MDM/UCM data updates and related flows. If no flow is triggered, updates can be done from UUP to a target repository. The behavior can be customizable and policy driven, for example. Run-time access an be provided via a UUP for service layer or network elements, provisioned by OSS/BSS, for lower layers such that there is not performance impact. Performances can be dictated by the repositories aggregated by the UUP, and caching and pre-fetch can be customizable.\n\nFIG. 13 illustrates an exemplary flow 1300 for customer data master integration and subscription management. In this example, when an order is submitted for a new customer, the order progresses to BRM and Metasolv, whereby it is verified whether the customer exists in UCM (Universal User Managementâa component of Oracle MDM), and a new customer creation business event is triggered. UCM then subscribes to the event, does deduping, address cleansing, and master record creation, and then approves the new customer. A ânew customer createdâ event is then triggered in UCM and the hub publishes the event describing the new customer. It is verified that the customer exists in MetaSolv and the order is sent to provisioning, whereby it is verified that the customer exists in the BRM system and the order is sent to billing. All the applications that subscribe to the UCM also get and process the record.\n\nAs new applications are built using other components, they can have tangible dependencies (i.e., calling other components or composed by other components) and intangible dependencies (i.e., need to have a particular bandwidth available to have this running or expect a subscription to another service or a certain type of client or phone). The tangible dependencies can be contained in the implementation and packaging of the new service. This is squarely an issue of the SCE and execution environment packaging story. The intangible dependencies are much more complicated. Thus, metadata can be used to model and accompany the life cycle management interfaces. The business requirements can involve how to describe and convey intangible dependencies when handling, re-programming, or composing a component so that these dependencies are satisfied when a service or product is created in CRM, when a customer orders the service or product, when fulfillment needs to take place, when trouble need to be resolved, etc.\n\nFIG. 14 is a block diagram illustrating components of an exemplary operating environment in which various embodiments of the present invention may be implemented. The system 1410 can include one or more user computers, computing devices, or processing devices 1412, 1414, 1416, 1418, which can be used to operate a client, such as a dedicated application, web browser, etc. The user computers 1412, 1414, 1416, 1418 can be general purpose personal computers (including, merely by way of example, personal computers and/or laptop computers running a standard operating system), cell phones or PDAs (running mobile software and being Internet, e-mail, SMS, Blackberry, or other communication protocol enabled), and/or workstation computers running any of a variety of commercially-available UNIX or UNIX-like operating systems (including without limitation, the variety of GNU/Linux operating systems). These user computers 1412, 1414, 1416, 1418 may also have any of a variety of applications, including one or more development systems, database client and/or server applications, and Web browser applications. Alternatively, the user computers 1412, 1414, 1416, 1418 may be any other electronic device, such as a thin-client computer, Internet-enabled gaming system, and/or personal messaging device, capable of communicating via a network (e.g., the network 1410 described below) and/or displaying and navigating Web pages or other types of electronic documents. Although the exemplary system 1400 is shown with four user computers, any number of user computers may be supported.\n\nIn most embodiments, the system 1400 includes some type of network 1410. The network may can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially-available protocols, including without limitation TCP/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, the network 1410 can be a local area network (âLANâ), such as an Ethernet network, a Token-Ring network and/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (âVPNâ); the Internet; an intranet; an extranet; a public switched telephone network (âPSTNâ); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, GRPS, GSM, UMTS, EDGE, 2G, 2.5G, 3G, 4G, Wimax, WiFi, CDMA 2000, WCDMA, the Bluetooth protocol known in the art, and/or any other wireless protocol); and/or any combination of these and/or other networks.\n\nThe system may also include one or more server computers 1402, 1404, 1406 which can be general purpose computers, specialized server computers (including, merely by way of example, PC servers, UNIX servers, mid-range servers, mainframe computers rack-mounted servers, etc.), server farms, server clusters, or any other appropriate arrangement and/or combination. One or more of the servers (e.g., 1406) may be dedicated to running applications, such as a business application, a Web server, application server, etc. Such servers may be used to process requests from user computers 1412, 1414, 1416, 1418. The applications can also include any number of applications for controlling access to resources of the servers 1402, 1404, 1406.\n\nThe Web server can be running an operating system including any of those discussed above, as well as any commercially-available server operating systems. The Web server can also run any of a variety of server applications and/or mid-tier applications, including HTTP servers, FTP servers, CGI servers, database servers, Java servers, business applications, and the like. The server(s) also may be one or more computers which can be capable of executing programs or scripts in response to the user computers 1412, 1414, 1416, 1418. As one example, a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language, such as JavaÂ®, C, C# or C++, and/or any scripting language, such as Perl, Python, or TCL, as well as combinations of any programming/scripting languages. The server(s) may also include database servers, including without limitation those commercially available from OracleÂ®, MicrosoftÂ®, SybaseÂ®, IBMÂ® and the like, which can process requests from database clients running on a user computer 1412, 1414, 1416, 1418.\n\nThe system 1400 may also include one or more databases 1420. The database(s) 1420 may reside in a variety of locations. By way of example, a database 1420 may reside on a storage medium local to (and/or resident in) one or more of the computers 1402, 1404, 1406, 1412, 1414, 1416, 1418. Alternatively, it may be remote from any or all of the computers 1402, 1404, 1406, 1412, 1414, 1416, 1418, and/or in communication (e.g., via the network 1410) with one or more of these. In a particular set of embodiments, the database 1420 may reside in a storage-area network (âSANâ) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers 1402, 1404, 1406, 1412, 1414, 1416, 1418 may be stored locally on the respective computer and/or remotely, as appropriate. In one set of embodiments, the database 1420 may be a relational database, such as Oracle 10 g, that is adapted to store, update, and retrieve data in response to SQL-formatted commands.\n\nFIG. 15 illustrates an exemplary computer system 1500, in which various embodiments of the present invention may be implemented. The system 1500 may be used to implement any of the computer systems described above. The computer system 1500 is shown comprising hardware elements that may be electrically coupled via a bus 1524. The hardware elements may include one or more central processing units (CPUs) 1502, one or more input devices 1504 (e.g., a mouse, a keyboard, etc.), and one or more output devices 1506 (e.g., a display device, a printer, etc.). The computer system 1500 may also include one or more storage devices 1508. By way of example, the storage device(s) 1508 can include devices such as disk drives, optical storage devices, solid-state storage device such as a random access memory (âRAMâ) and/or a read-only memory (âROMâ), which can be programmable, flash-updateable and/or the like.\n\nThe computer system 1500 may additionally include a computer-readable storage media reader 1512, a communications system 1514 (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory 1518, which may include RAM and ROM devices as described above. In some embodiments, the computer system 1500 may also include a processing acceleration unit 1516, which can include a digital signal processor DSP, a special-purpose processor, and/or the like.\n\nThe computer-readable storage media reader 1512 can further be connected to a computer-readable storage medium 1510, together (and, optionally, in combination with storage device(s) 1508) comprehensively representing remote, local, fixed, and/or removable storage devices plus storage media for temporarily and/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The communications system 1514 may permit data to be exchanged with the network and/or any other computer described above with respect to the system 1500.\n\nThe computer system 1500 may also comprise software elements, shown as being currently located within a working memory 1518, including an operating system 1520 and/or other code 1522, such as an application program (which may be a client application, Web browser, mid-tier application, RDBMS, etc.). It should be appreciated that alternate embodiments of a computer system 1500 may have numerous variations from that described above. For example, customized hardware might also be used and/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input/output devices may be employed.\n\nStorage media and computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, data signals, data transmissions, or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the various embodiments.\n\nThe specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."
    }
}