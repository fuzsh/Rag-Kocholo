{
    "id": "dbpedia_4480_2",
    "rank": 60,
    "data": {
        "url": "https://www.pandium.com/blogs/a-guide-to-integrating-with-netsuites-api",
        "read_more_link": "",
        "language": "en",
        "title": "A Guide to Integrating with NetSuiteâs API",
        "top_image": "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/657b1efa9c1b20a9d054219c_Blog%20-%20Cover%20Images%20(2)-min%20(1).png",
        "meta_img": "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/657b1efa9c1b20a9d054219c_Blog%20-%20Cover%20Images%20(2)-min%20(1).png",
        "images": [
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/65373d108aeaa62dfec1f065_pandium.svg",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/65651dec8379a3778f63d419_team.webp",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/65506fe05d0bbc1cfc757883_NY%20Team.png",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/655070ff19795897b2fb2bf0_People%20laughing%201.jpg",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/657b1efa9c1b20a9d054219c_Blog%20-%20Cover%20Images%20(2)-min%20(1).png",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/6557a1aa99a2594234da440f_6453af8a9cbe1e1215038f42_In%2520blog%2520CTA%2520for%2520downloadable%2520content%2520(1020%2520%25C3%2597%2520340%2520px)%2520(1).jpeg",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/6557a223499a6a41be7d4796_640fca38e20dee2d065745ce_aE8phrrWk8h6FSlpw16cEvfu5TKp5sb-PcCFr6Z45cf4A9NwgI-V2WzLF6fVYawHL-61L0sHlwQbLhr_-ZJNs9GTRN5sb2gJCH4LeqmImU83oChrwiMT7Ni49eas0lBQXJBW9bGVQaadZcryQruUYuw.png",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/6557a223499a6a41be7d479a_640fd42e8416372eec9f614e_Screen%2520Shot%25202023-03-13%2520at%25209.55.44%2520PM.png",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/66b669d8615e8262534a71b7_No%20code%20vs%20low%20code%20Webinar%20LinkedIn%20Event%20Blog%20(2).png",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/66b669d8615e8262534a71b7_No%20code%20vs%20low%20code%20Webinar%20LinkedIn%20Event%20Blog%20(2).png",
            "https://cdn.prod.website-files.com/652dac8a678183c89047d7de/66b23e04be4fba91e4467bca_Blog%20-%206%20signs%20to%20build.jpg",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/652e98bf1df6961283c7e0b4_untitled-ui-logo.png",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/65373d108aeaa62dfec1f065_pandium.svg",
            "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/65373fe6c14f0fc774a7e844_github.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Get expert insights on NetSuite's APIs - understand customization and integration tips. Stay informed with our comprehensive guide.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/652ca8a04e7b1ba97dec2b42/654c166f4990f4c1e521e00f_favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.pandium.com/blogs/a-guide-to-integrating-with-netsuites-api",
        "text": "NetSuite is one of the top cloud-based ERP systems, used globally to power a wide array of businesses and programs. For those who look to integrate with NetSuite successfully, building and maintaining integrations, particularly native ones, can be complex - NetSuite is highly customizable with several distinct APIs, all of which have their own best use cases for your needs.Â\n\nAt Pandium, we have significant experience developing robust, native integrations, including between NetSuite and other major platforms.\n\nThe complexity of ERP platforms in general, combined with the plethora of customization options in NetSuite can lead to unique challenges. In this article, we aim to help inform any NetSuite integration plans you might have by explaining some general NetSuite knowledge, as well as highlight some of the insights weâve gathered through our work.\n\nTable of Contents\n\nInitial Setup and Preliminary Strategic Decisions\n\nSteps to Configuring the NetSuite Account\n\nNetSuite APIs and Integration Tools:\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ SuiteScriptÂ Â Â Â\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ RESTlet\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ REST\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ SuiteQL\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ Why HATEAOS is Inefficient\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ SOAP\n\nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â â¢ How to Make a Dynamic SuiteQL Query\n\nMore Support for your NetSuite Integrations\n\nInitial Setup\n\nNo matter what applications youâre trying to build, thereâs a standard set of steps youâll want to follow to ensure a successful foundation for any new integrations:\n\nPreliminary Strategic Decisions:\n\nAuthÂ\n\nSelecting an authentication method, e.g. choosing between methods like OAuth 2.0 and token-based authentication.\n\nâ\n\nSelect an API\n\nChoose which of the available NetSuite APIs will be useful for your needs - this would be using NetSuites SOAP, REST, or even RESTlets.\n\nâ\n\nSteps to Configuring the NetSuite Account:\n\n1. Create the integration record in NetSuite (the step when you specify authentication methods, callback URLs, and generate the consumer key and secret).\n\n2. Create a role to use with the new integration. This is when permissions are determined.Â\n\nDuring initial development, an administrator role is most helpful, since during development the specific records and fields you'll need to work with will surface, and that's what will ultimately determine the necessary permissions.Â Â\n\nOnce youâve finished writing the bulk of your integration, youâll need to hone in on the proper permissions it requires (instead of just using the administrator-level permissions as you likely did in development).Â\n\nThis can be difficult especially when managing multiple NetSuite accounts and integrations. Weâve had to use a good deal of trial and error in this, and these two tools have been helpful for us in navigating this:\n\nThe Records Catalog can provide some guidance to which list and transaction permissions may be needed. Each record table has a 'Permissions' column. When accessing a particular records field requires a specific permission, it will be listed in that column.\n\nNetSuite has a feature that lets you view the permission difference between two different roles (Setup > Users/Roles > Show Role Differences). This can be helpful when youâre trying to pinpoint why the integration works with one role and not with another.\n\n3. Use the role with the NS integration record to generate the token and token secret (in order to use OAuth1 you need the consumer id and consumer secret AND the token id and the token secret).\n\n4. Pro-Tip: - Once youâve gone through these basics, you should test your API access and credentials using something like Postman or Insomnia.\n\nIf youâre using a sandbox NetSuite account, it will have some kind of sb suffix on the company id. In the url, that needs to be referenced in the following way: 123456-sb1. In the auth, that same company id needs to be referenced in the following way: 123546_SB1.\n\nThe login audit trail is also a useful tool in resolving auth issues when youâre first connecting.\n\nNetSuite errors are often unhelpful. For example, a timeout may be surfaced as several different types of errors, including unauthorized errors like a 401.\n\nExample: If you try to access a field or record via SuiteQL when the relevant role for your token doesnât have permission for it, it will say that the field/record doesn't exist rather than surfacing a permission error.\n\n5. Set up your code repository by installing and configuring any necessary libraries in the appropriate integration repository. Certain NetSuite APIs require specific libraries in order to use the API. As an example, if youâre using SuiteTalk's SOAPÂ API, you may need to install a SOAP library.\n\nRelated Content: Download the State of APIs and Integrations at 400 SaaS Companies\n\nâ\n\nNetSuite APIs and Integration Tools\n\nLetâs look at an overview of the available NetSuite APIs and integration tools that you may use when developing your apps:\n\n1. SuiteScript\n\nââSuiteScript is based on JavaScript, and allows developers to create custom scripts and functions within NetSuite that can be triggered by specific events.\n\nâ\n\nSuiteScript allows for extensive custom logic in NetSuite, including validation, reporting and dashboards customization, and data transformation. And with the ability to trigger on specific events, SuiteScript is a viable tool to automate multiple business processes and workflows within NetSuite.\n\nRelated Content: How ShipBob Designs and Scopes Their User-Facing Integrations\n\nâ\n\nâ2. RESTletâ\n\nA RESTlet is a SuiteScript that executes when called by an external application orÂ another SuiteScript, that may also return data to the calling application.\n\nA RESTlet can perform any function that can be implemented by using SuiteScript. But with a couple advantages:\n\nThe RESTlet can return data, in plain text or JSON, to the client script.\n\nThe majority of RESTlet calls require a content-type header, which tells NetSuite how your request body will be formatted and how NetSuite should format its response.\n\nNetSuite requires authentication for RESTlets. If a RESTlet call originates from a client that does not have an existing session in the NetSuite account where the RESTlet is deployed, NetSuite requires the call to include an authorization header.\n\nNote: If searching for advice about how to interact with NetSuite RESTlets, SuiteScript generally arises as a primary solution.Â\n\nHowever, when we were developing we found that these tools didnât seem to be valid solutions for us because they are written for a single NetSuite account at a time.Â\n\nAt Pandium, one of our tenets is to enable the capability to manage many NetSuite accounts with just one native, configurable integration. So we turned our attention to some of the other tools NetSuite offers.\n\nRelated Content: How to Integrate Systems Like a CTO: 10 Best Practices\n\nâ\n\nâ3. REST\n\nâMany of NetSuite's REST API endpoints are still in Beta. Even the end points that are in GA only offer a top-level view on items since this API uses the HATEAOS constraint. HATEAOS requires multiple queries for each item, impacting performance.\n\nTo access Beta REST endpoints, you must have a NetSuite account, enable the feature in the account permissions configuration, as well as access to the NetSuite Beta Program. Once you see how the HATEAOS set up dictates how to request information from this API you'll probably decide that this isn't the best way to read information from NetSuite.\n\nWhy HATEAOS is Inefficient\n\nBelow is an example of a HATEAOS response for this GET order:\n\nHATEAOS Response:\n\nThis response gives us information about an order, but what if we want to know which items are on the order?\n\nThen we need to make the following GET request to the HATEAOS REST API:\n\nAfter, we'll receive this response, whichÂ tells us how MANY items are on the order (i.e. 2), and what end points we can use to get the detailed information about those items:\n\nSo, as you can see, we need to make 4 GET requests to NetSuite to get some pretty basic information about this order with two items.Â That's very inefficient, especially when you consider you probably want to get information about many orders.\n\nâ\n\nâ4. SuiteQL\n\nâSuiteQL is a query language that allows you to query the NetSuite data model; however, it only supports read operations. Itâs technically a component of the REST API; often the one that is most valuable for getting information out of NetSuite.Â\n\nâWhy SuiteQL is Much Better than HATEAOS\n\nLet's compare SuiteQL to the previous example of HATEAOS. I can make one GET request to the REST API with a SuiteQL query to receive all the information that four GET requests to the HATEAOS REST API gave me.\n\nGET Request:\n\nResponse:\n\nYou can be granular with the fields you get, and easily make joins to append fields from their associated records. This can be accomplished with one request, as opposed to the many requests youâd need to do with the HATEAOS constraint.\n\nYou might initially be intimidated by the prospect of writing your own SuiteQL queries, but there's are lots of resources to make this easier! The Records Catalog is a great reference to show which records exists, what fields they contain, and how records are related to one another.\n\nThe Records Catalog shows the kinds of records that exist, what fields are on each record, and how different kinds of records are related.Â\n\nBecause its content can vary based on how a NetSuite account is configured, so one needs to be logged into a particular NetSuite account to access the records catalog. For example:\n\nIt will include fields and records custom to a NetSuite account.\n\nWhen certain features are disabled, some tables and columns will cease to exist. This will naturally cause failed queries and surface various errors. Creating dynamic queries helps to counteract this possibility, and is worth looking at, especially with non-standard integration configurations.Â\n\nâ\n\nâ5. SOAP\n\nâWhile SOAP is generally considered a pretty old way to arrange an API, when it comes to NetSuite that happens to mean it is more reliable. Â We've found the SOAP API is more useful than the REST API for writing information into NetSuite.\n\nAll fields can be referenced in a SOAP request. There are some features on a record that the REST API doesnât allow access to (even if the record is in GA and not just Beta)\n\nExample: An item fulfillment will not register tracking information if the item fulfillment payload does not specify which type of package the item fulfillment is using. The REST API only allows one to specify a generic package. The SOAP API allows one to reference all the package types (generic, UPS, USPS, and FedEx)\n\nIf you are encountering rate limiting issues, try reducing the frequency of your API requests, by making requests that reference many records at once rather than many requests which each reference one record. The SOAP API allows for such bulk create or update requests.\n\nHere are some tips for getting comfortable with using their SOAP API:\n\nSOAP supports TBA authentication, which is OAuth1. Â For TBA authentication, you first need to create a NetSuite integration and Access Token, and then go through the standard OAuth1 process.\n\nIn SOAP protocol, metadata is stored in a WSDL file. One of the limitations with WSDL is that you only get standard objects and standard fields.\n\nIf you want to get custom records or fields using the SOAP API you can create a custom RESTlet using SuiteScript. You can also use custom entities/fields in your SOAP requests without a custom RESTlet if you know their names and types.\n\nNetSuite also provides their SOAP Schema Browser that allows you to view the information (from the WSDL and XSD) in a much more human-readable format that can help formulate proper SOAP payloads.\n\nâ\n\nHow to Make a Dynamic SuiteQL Query\n\nWhat if the user wants the option to get additional transaction fields?Â Then you'll need to be able to change the SuiteQL query you send to NetSuite based on how the user has configured the integration. For example, this could look like:\n\nâ\n\nNeed More Support with Your NetSuite Integration?Â We're here to help!\n\nThe NetSuite platform is powerful, and their APIs are great tools for developing and automating business processes. With the right knowledge, and guidance around the many NetSuite idiosyncrasies, you can create streamlined operations and build robust apps to service a wide array of customers."
    }
}