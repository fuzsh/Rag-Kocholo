{
    "id": "dbpedia_8583_1",
    "rank": 42,
    "data": {
        "url": "https://www.think-cell.com/en/resources/manual/deploymentguide",
        "read_more_link": "",
        "language": "en",
        "title": "How to deploy think-cell in a larger company",
        "top_image": "https://www.think-cell.com/img/containers/assets/en/images/opengraph.jpg/e8dabdd5e1857846f3c43ff1a29d913b/opengraph.jpg",
        "meta_img": "https://www.think-cell.com/img/containers/assets/en/images/opengraph.jpg/e8dabdd5e1857846f3c43ff1a29d913b/opengraph.jpg",
        "images": [
            "https://www.think-cell.com/img/containers/assets/en/resources/manual/images/dialog/errorreport.png/055f1dc76532a9a65014f9aa407282e6/errorreport.jpg",
            "https://matomo.think-cell.com/piwik.php?idsite=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn how to use our MSI setup, group policies and the automatic update to deploy think-cell in a larger company.",
        "meta_lang": "en",
        "meta_favicon": "/build/assets/favicon-BAXIZHsM.ico",
        "meta_site_name": "think-cell",
        "canonical_link": "https://www.think-cell.com/en/resources/manual/deploymentguide",
        "text": "This chapter describes how to deploy think-cell in a larger organization. If you want to install a personal copy of think-cell on your computer, please refer to 2. Installation and update.\n\nA.1 Considerations before installation\n\nMost aspects of deploying think-cell are the same on both supported platforms (Windows or macOS). If there is some variation in detail, this is mentioned directly in the text. The mechanics of the initial installation and the distribution mechanism of configuration settings differ more substantially and are described in separate sections. If you only administer think-cell on Windows, feel free to skip the installation section for macOS, and vice versa.\n\nA.1.1 Workstation prerequisites\n\nOn Windows, think-cell works with Microsoft Office 2010, 2013, 2016, 2019 or 2021 for Windows, with at least PowerPoint and Excel installed. think-cell also works with the fully installed versions and Click-to-Run versions of the desktop Office apps in Office 365.\n\nOn Mac, think-cell works with Microsoft Office 2016 (version 16.9 or later), 2019 or 2021 for Mac and macOS High Sierra (10.13) or later. think-cell also works with the fully installed versions of the desktop Office apps in Office 365.\n\nThe following components must be installed:\n\nMicrosoft Office Excel\n\nMicrosoft Office PowerPoint\n\nVisual Basic for Applications (from Office Shared Features)\n\nThe installation of think-cell requires less than 200 MB of disk space.\n\nA.1.2 Language\n\nthink-cell’s user interface is available in English, Arabic, Chinese, French, German, Italian, Japanese, Korean, Portuguese, Russian and Spanish. During the installation, think-cell uses the language corresponding to the regional settings of the operating system. After installation, think-cell uses the same language as in the menus and dialogs of the installation of Microsoft Office.\n\nAll supported languages are included in the same, unified installation package. If a language is not yet supported by think-cell, English is used. It is not possible to alter the automatic language selection behaviour.\n\nthink-cell tightly integrates with PowerPoint and Excel to offer its streamlined user interface and wealth of functionality. Due to the tight integration, it is not possible to guarantee compatibility with unknown future changes to Microsoft Office. Therefore:\n\nMajor version updates, i.e., switching from PowerPoint 2013 to 2016 or from 2016 to a future version, will always require the most recent think-cell version.\n\nFor Click-to-Run editions of Office, which includes Office 365, most updates will require a think-cell update (also see A.1.4 Differences between Office 365 channels).\n\nSecurity updates for MSI-based editions of Microsoft Office on Windows will usually not require a think-cell update. However, this cannot be guaranteed and occasionally a security update for Microsoft Office will require a think-cell update for compatibility.\n\nthink-cell has built-in automatic update support. In this way, we ensure compatibility with any Microsoft update and provide new features. When PowerPoint or Excel are started, the software checks for a new version. If there is one, the software attempts to install the update.\n\nIf available, think-cell uses the Microsoft Background Intelligent Transfer Service (BITS) to download updates on Windows. BITS automatically frees bandwidth when the user needs it, and also recovers gracefully from network interruptions common in mobile computing environments. Each update is approximately 95 MB in size.\n\nAll files that are executed and installed by the automatic update are digitally signed by think-cell. The integrity of the update is verified against a self-signed certificate that is included in the version of think-cell currently installed.\n\nAutomatic updates always keep the installation location and update think-cell in place.\n\nA.1.4 Differences between Office 365 channels\n\nFor the Microsoft 365 licensing plans including Office 365, Microsoft offers various so-called update channels which deploy updates with varying frequency and delay. think-cell supports all update channels of Office 365. We check for Microsoft updates to all channels every night, and if there is an update that conflicts with think-cell, we immediately start working on a corresponding think-cell update. In the following it is assumed that think-cell’s automatic updates are enabled.\n\nHere is an overview of the quality of service you can expect from think-cell when using each one of the channels:\n\nSemi-Annual Enterprise Channel\n\n(Default in Microsoft 365 Enterprise (Office 365 ProPlus) for tenants created before June 9, 2020) and\n\nMonthly Enterprise Channel\n\nand\n\nCurrent Channel\n\n(Default in Microsoft 365 Business, Home, Personal; default in Microsoft 365 Enterprise for new tenants created on or after June 9, 2020): We initiate an automatic think-cell update before Microsoft’s update, so no outage of think-cell should occur.\n\nSemi-Annual Enterprise Channel (Preview)\n\nand\n\nCurrent Channel (Preview):\n\nThe think-cell update is available for download, but we do not always trigger a timely automatic update. When a conflict occurs and you have error reporting enabled, the update will be installed automatically. If you have error reporting disabled and support email not redirected (see Troubleshooting and critical errors), and the user selects Request Support in the error dialog, they will get an automatic email response even outside of our business hours including a link to the update download.\n\nBeta Channel\n\nWe make the think-cell update available as soon as possible after the Microsoft update, but outages may occur. Once the think-cell update is ready, the distribution mechanism is the same as for Preview channels.\n\nA.2 Initial installation\n\nA.2.1 Configuration parameters\n\nthink-cell can be configured in a variety of ways to fit with your particular needs and environment. Below is a table of think-cell configuration parameters available for both Windows and Mac installations. On Windows, some additional configuration options for the A.2.2.4 Ribbon are available. For details on how to use a parameter with:\n\nWindows installer on the command line, see A.2.2 Installation on Windows\n\nGroup Policies, see A.2.2.3 Group policies\n\ndefaults on the command line on macOS, see A.2.3 Installation on macOS\n\nA device management solution for macOS such as Jamf or Intune see A.2.3.2 Managed deployment on macOS.\n\nDeploying or changing configuration parameters via the Windows Installer command line is only possible when (re-)installing think-cell. Parameters can be deployed and changed using one of the other three methods also for an existing installation.\n\nFor details on the usage and effects of each parameter, see the sections linked in the last column of the table.\n\nFor macOS, all keys listed below have to be prefixed with com.think-cell.settings. and target the com.microsoft.office domain. For example, the full licensekey key is com.think-cell.settings.licensekey. If the key listed in the table is of the form [parent key].[subkey], e.g. reports.enabled, then the parent key is of type dict and the subkey is of the type given. For example, reports.enabled is listed as type boolean, which is the type of the enabled key contained in the value of the key of type dict whose full name is com.think-cell.settings.reports.\n\nA.2.2 Installation on Windows\n\nThe think-cell installation files, setup_*.msi and setup_*.exe, understand the same parameters as Windows’ msiexec command, though not all combinations are recommended and supported. Note that there is only one installer and think-cell will use 32-bit or 64-bit as needed. Use the setup_*.exe if users shall install think-cell by double-clicking the setup file.\n\nA.2.2.1 Installation scope\n\nthink-cell can be installed per-machine or per-user. If the installing user has admin rights or can elevate via Windows User Account Control (UAC), the default is to use the per-machine context. However, if a user is allowed to install software but does not have admin rights and cannot elevate via UAC, the per-user context is used.\n\nBased on standard behavior of the Windows Installer mechanism it is possible for different think-cell versions to be installed in parallel if they are installed in different contexts (e.g., different versions installed per-user for different user accounts, or a different version installed per-user and per-machine, respectively). If more than one installation exists, it is always the per-user installation of a given user account that is executed. Any other installations (including a per-machine installation) are ignored. This is true even if the per-user installation is an older version than a parallel per-machine installation.\n\nUse the following approaches for scripted or command prompt installations, or if you need to force certain installation options:\n\nPer-machine\n\nsetup_*.msi /qn TARGETDIR=\"<absolute path>\"\n\nThe executing account needs full administrator permissions, e.g., by using a script started by remote maintenance software, or by starting the installer from a command prompt which was launched with \"Run as administrator\". The installation will abort if the account has insufficient privileges.\n\nOmit the ALLUSERS parameter.\n\nThe other parameters are optional:\n\nThe /qn parameter suppresses the Windows Installer user interface.\n\nThe default destination directory is\n\n%PROGRAMFILES%\\think-cell\n\non 32-bit Windows systems and\n\n%PROGRAMFILES(X86)%\\think-cell\n\non 64-bit Windows systems. If you set a different path with the TARGETDIR parameter make sure the destination is readable by all users on the machine.\n\nIf you prefer you may also use the setup_*.exe as follows:\n\nsetup_*.exe ALLUSERS=1\n\nThe other parameters work the same as for the setup_*.msi.\n\nAutomatic privilege elevation by Windows User Account Control (UAC)\n\nsetup_*.exe /qb\n\nOmit the ALLUSERS parameter. You will get a per-machine installation if the user account can elevate to administration permissions, otherwise the installer falls back to per-user.\n\nThe other parameters are optional:\n\nWith Windows 7, /qn may be used to completely suppress the installer’s user interface. /qb displays a progress bar and /qb! removes its Cancel button. With Windows 8 and later versions only /qb is recommended as /qn may silently abort the installation or unexpectedly install per-user even though the account may elevate permissions. (This is due to Microsoft’s changes to UAC in Windows 8 and depends on the account’s specific UAC settings.)\n\nFor the default destination directory of per-machine installation see above. For per-user installation the default is\n\n%LOCALAPPDATA%\\think-cell\n\nIt is recommended not to set a different path with the TARGETDIR parameter, but if you do, make sure it has the appropriate permissions and ownership for the respective context.\n\nForce per-user\n\nsetup_*.exe /qn ALLUSERS=\"\"\n\nALLUSERS=\"\" forces a per-user installation even if the user account may elevate permissions by UAC.\n\nExecute the installer for each user account.\n\nThe other parameters are optional:\n\n/qn may be used to completely suppress the installer’s user interface. /qb displays a progress bar and /qb! removes its Cancel button.\n\nThe default destination directory is\n\n%LOCALAPPDATA%\\think-cell\n\nIt is recommended not to set a different path with the TARGETDIR parameter, but if you do, make sure the directory has the appropriate permissions and ownership for the current user account.\n\nA.2.2.2 Installed files\n\nThe installation directory contains the executables, libraries and other files required for think-cell. Noteworthy are the following directories and files:\n\nadmin-policy-templates (templates necessary for managing settings via Group Policy)\n\nppttc (schema and samples for automation using JSON)\n\nstyles (style files and additional examples for customization)\n\nxml-schemas (schema for think-cell style files)\n\nNOTICE.txt (obligatory notices for included components)\n\nThe think-cell installation does not write to directories other than the chosen installation directory.\n\nWhile using think-cell additional files are written to the following directories:\n\nRegistry entries\n\nTo interact with Microsoft PowerPoint and Microsoft Excel, the installation of think-cell creates some new keys in the following sections of the Windows registry. Depending on whether you have a regular installation or a single-user-installation, the keys are created in the HKEY_LOCAL_MACHINE or in the HKEY_CURRENT_USER section:\n\nIn 64-bit versions of Windows the following additional keys are created:\n\nThe license key and the settings for online quality assurance and automatic updates are saved in the following section of the Windows registry:\n\nSoftware\\Classes\\Software\\think-cell\n\nIf group policies based on think-cell.adm/x (see A.2.2.3 Group policies) are used in your network, think-cell may also use:\n\nthink-cell changes no other sections of the Windows registry.\n\nA.2.2.3 Group policies\n\nthink-cell supports Windows’ group policies to centrally control think-cell’s behavior for a group of users or on a group of machines. To use group policies, you need to create a group policy object and link it to a site, domain or organizational unit using the Group Policy Management Console.\n\nThe following explanation requires an understanding and working knowledge of group policy concepts and administration. For general information on Windows group policy concepts and details of their usage and update mechanisms refer to the contents of the online help of the Group Policy Management Console.\n\nthink-cell’s specific configuration options are described in the think-cell.admx administrative template file, which is located in think-cell’s installation directory in the subdirectory admin-policy-templates. To make use of the new options copy think-cell.admx and en-US\\think-cell.adml from admin-policy-templates to %SYSTEMROOT%\\PolicyDefinitions and %SYSTEMROOT%\\PolicyDefinitions\\en-US respectively.\n\nA new node think-cell is added to the node Administrative Templates in the following two places: the think-cell settings configured under Computer Configuration determine registry entries at\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\ >\n\nthink-cell\n\nand the think-cell settings configured under User Configuration determine registry entries at\n\nHKEY_CURRENT_USER\\SOFTWARE\\Policies\\ >\n\nthink-cell\n\nIf settings are enabled at both places, those under Computer Configuration take precedence.\n\nThe items of the node think-cell show the available settings that can be controlled with group policies. Each item has a description with the available values for this item.\n\nUsing Group Policies to manage access on a terminal server\n\nYou can use group policies to activate or deactivate think-cell for a group of individual users. For instance, if you deploy think-cell on a terminal server you need to make sure that only the licensed users have access to think-cell. When used in the following way, group policies offer a convenient method to do so:\n\nSet up one group policy object which disables think-cell completely and link it to your domain. Use the Product Access Control setting of the administrative template think-cell with the appropriate value.\n\nAdd another group policy object which activates the software for the licensed users. This should also be linked to your domain and be applied after the disabling one. Because group policy objects are applied in reverse order the enabling object should be further up in the list in Group Policy Management Console.\n\nIn the section Security Filtering of the Group Policy Management Console restrict access to the enabling group policy object explicitly to the licensed users of think-cell.\n\nUsing Group Policies to distribute the license key\n\nAnother convenient use for group policies is the centralized management and distribution of the think-cell license key to the think-cell users in your organization. The license key is controlled via the License Key policy.\n\nA.2.2.4 Ribbon\n\nThe default position for the think-cell group in PowerPoint is in the Insert tab (TabInsert), after the Insert Illustrations group (GroupInsertIllustrations); the default position in Excel is after the Insert Excel Charts group (GroupInsertChartsExcel) in the Insert tab.\n\nDetailed information about customizing the Office ribbon is available from:\n\nhttp://www.think-cell.com/ribbon\n\nThe following properties may be specified during installation or set via the Group Policy PowerPoint Ribbon XML (see A.2.2.3 Group policies) to customize the think-cell group within PowerPoint:\n\nRIBBONPPTABINSERT\n\nSpecify XML attributes for the tab element containing the think-cell group.\n\nRIBBONPPGROUPINSERT\n\nSpecify XML attributes for the think-cell group element.\n\nRIBBONPPXMLNS\n\nSpecify additional XML namespace attributes for the customUI element.\n\nRIBBONPPDONOTTOUCHBUILTINRIBBON\n\nIf set to =1, only place a single \"think-cell\" group, and do not place additional think-cell Ribbon elements on built-in tabs (e.g. the \"think-cell Data\" group on the Insert tab).\n\nThe think-cell group in Excel can be similarly customized using the RIBBONXLTABINSERT, RIBBONXLGROUPINSERT, RIBBONXLXMLNS, and RIBBONPPDONOTTOUCHBUILTINRIBBON properties, or the Excel Ribbon XML group policy.\n\nNote: All of these parameters apply to the setup.msi as well as the setup.exe.\n\nIf no id, idMso or idQ attribute is specified using the RIBBONPPTABINSERT property then the think-cell group will be placed in the Insert tab. Similarly, if no id or idQ attribute is specified using the RIBBONPPGROUPINSERT property then a unique local id for the think-cell group will be automatically generated. Additionally, if no label is specified using the RIBBONPPGROUPINSERT property then the label think-cell will be used.\n\nAdding the following option to the setup command line, for example, will place the think-cell group in a new, user-defined tab, positioned after the built-in Home tab:\n\nRIBBONPPTABINSERT=\"id=\"\"TabNew\"\" label=\n\n\"\"My New Tab\"\" insertAfterMso=\"\"TabHome\"\"\"\n\nNote: Any quote characters in the XML snippets must be double-quoted when specifying the properties on the setup command line.\n\nAlternatively, adding the following options to the setup command line will place the think-cell group in the built-in Home tab after the Font group and label the group:\n\nRIBBONPPTABINSERT=\"idMso=\"\"TabHome\"\"\"\n\nRIBBONPPGROUPINSERT=\"insertAfterMso=\n\n\"\"GroupFont\"\" label=\"\"think-cell\"\"\"\n\nThe idQ attribute can be used to specify qualified identifiers for both the think-cell group and tab. Any namespaces required for the qualified identifiers can be specified using the RIBBONPPXMLNS property.\n\nFor example, adding the following two options to the setup command line will place the think-cell group in a user-defined tab TabUser, qualified using the namespace http://example.com/ribbon, and positioned before the Insert tab:\n\nRIBBONPPXMLNS=\"xmlns:ribbon=\n\n\"\"http://example.com/ribbon\"\"\"\n\nRIBBONPPTABINSERT=\"idQ=\"\"ribbon:TabUser\"\"\n\nlabel=\"\"My User Tab\"\"\n\ninsertBeforeMso=\"\"TabInsert\"\"\"\n\nQualified identifiers can be useful when several add-ins or templates wish to customize the PowerPoint ribbon. If several add-ins, for example, specify a tab using the same qualified identifier then a single user-defined tab will be created and each of the add-ins can position groups within this common user-defined tab. Specifying a qualified identifier for the think-cell group lets other add-ins or templates position groups relative to the group. Similarly, the think-cell group can use qualified identifiers to position itself relative to the groups of other add-ins or templates. For example, the following options specify a qualified identifier for the think-cell group and positions it relative to a user-defined group:\n\nRIBBONPPXMLNS=\"xmlns:ribbon=\n\n\"\"http://example.com/ribbon\"\"\n\nxmlns:special=\n\n\"\"http://example.com/special\"\"\"\n\nRIBBONPPGROUPINSERT=\"\n\nidQ=\"\"ribbon:GroupThinkCell\"\"\n\ninsertAfterQ=\"\"special:GroupSpecial\"\"\"\n\nIt is important to note that the order in which add-ins or templates are loaded may influence the customization of the PowerPoint ribbon. If, in the example above, the add-in that creates the special:GroupSpecial group is loaded after the think-cell add-in then positioning relative to the special:GroupSpecial will have no effect. The order of loading cannot always be controlled and it is recommended that pairs of user-defined groups requiring relative positioning should both position themselves relative to the other. This should ensure that whichever group is loaded last will position itself correctly relative to the other. In the above example, the XML code for the special:GroupSpecial group should contain an insertBeforeQ attribute that references the think-cell group’s qualified identifier.\n\nA.2.3 Installation on macOS\n\nThe think-cell installation file, setup_*.pkg can be used interactively or the installation can be scripted using the standard installer command. Only the domain LocalSystem can be used as a target, i.e., think-cell is always available to all users on the machine.\n\nAdministrative settings and configuration parameters are stored in the com.microsoft.office preference domain. See A.2.1 Configuration parameters for an overview of the available settings and their key and type.\n\nFor example, you might want to deploy your company's license key to every think-cell installation by adding a line like the following to the same script that calls installer to install the setup_*.pkg file:\n\nsudo defaults write /Library/Preferences/com.microsoft.office com.think-cell.settings.licensekey \"ABCDE-...\"\n\nNote: When using defaults to modify the value of a subkey of a dict-valued key, for example the value of the enabled subkey of the com.think-cell.settings.reports key, the subkey needs to be specified as part of a list of key -type value triples following -dict-add as in the following example:\n\nsudo defaults write /Library/Preferences/com.microsoft.office com.think-cell.settings.reports -dict-add enabled -bool true\n\nConsult the man page for defaults for further information.\n\nNote: In previous versions, think-cell's configuration settings were stored in a config.plist file in think-cell's installation directory. This way of deploying settings is deprecated and may be removed in a future version. If your are deploying configuration settings by writing to the config.plist file, we urge you to move these settings into the com.microsoft.office preference domain to ensure compatibility with future versions of think-cell. Refer to A.2.1 Configuration parameters for key paths and types.\n\nA.2.3.1 Installed files\n\nthink-cell is installed in the following directory:\n\n/Library/Application Support/Microsoft/think-cell\n\nThe following items are required for think-cell and are created in the installation directory:\n\nNOTICE.txt (obligatory notices for included components)\n\nppttc (schema and samples for automation using JSON)\n\nstyles (style files and additional examples for customization)\n\ntcaddin.plugin (the add-in running in PowerPoint and Excel)\n\nxml-schemas (schema for think-cell style files)\n\nA.2.3.2 Managed deployment on macOS\n\nYou can also use a device management solution such as Jamf Pro or Microsoft Intune to deploy and configure think-cell.\n\nTo deploy the configuration settings, the easiest way is to author a .plist file containing the relevant key-value pairs, which you upload to your management solution and target to the com.microsoft.office preference domain. See the documentation of Jamf and Intune for detailed instructions, for example.\n\nHere is an example of a .plist file configuring some of the available settings. For a full list see A.2.1 Configuration parameters.\n\nNote: When using Intune, you need to edit the .plist file before uploading so that it only contains the key-value-pairs, without any surrounding <?xml>, <!DOCTYPE>, <plist>, and (outermost) <dict> tags. The Intune version of the example above would thus look like this:\n\nA.2.4 First start\n\nAfter think-cell has been installed and the user starts PowerPoint for the first time, a dialog to enter the license key is shown.\n\nWith the licensekey configuration parameter a license key can be specified during installation or centrally deployed beforehand (see A.2.1 Configuration parameters).\n\nAlso on the first start, the ribbon is switched to the Insert tab, where the think-cell group is located. A web page with a tutorial is also opened. Both actions can be suppressed by the nofirststart configuration parameter (see A.2.1 Configuration parameters).\n\nA.2.5 Browser extension\n\nthink-cell comes with a browser extension to enable its 23. Tableau data functionality, and to import 18. Images from the web into PowerPoint. The extension is available for Google Chrome, Microsoft Edge, and Mozilla Firefox.\n\nThe extension is automatically installed into Chrome and Edge when think-cell is installed. However, extensions installed in this way need to be enabled manually by the user (see 2.2.3 Installing the browser extension).\n\nTo avoid this need for user interaction, we recommend explicitly managing the installation of the think-cell browser extension using the management policies of the supported browsers. In particular, we recommend force-installing the extension along with think-cell for think-cell users, and blocking the installation for all others, especially if think-cell is installed per-machine on a machine not all users of which have access to think-cell, like a terminal server (compare Using Group Policies to manage access on a terminal server).\n\nThe following table summarizes the relevant information:\n\nA.3 Ongoing maintenance\n\nIf you want to control think-cell updates manually, you must disable any automatic updates by Microsoft for PowerPoint and Excel. Deployment of Microsoft’s updates must be controlled by you. If automatic Office updates by Microsoft are enabled, you cannot disable think-cell updates. think-cell will download and install updates in that case.\n\nIf you disabled automatic Office updates by Microsoft or directed the Office updates to your own server, you can disable think-cell’s updates via the UPDATES/updates.enabled configuration parameter (see A.2.1 Configuration parameters).\n\nIn this case, think-cell does not check whether an update is available when starting PowerPoint and Excel. You may also contact us and request to disable automatic updates via a setting on our server. In that case, the update check still occurs, but the reply always indicates that no update is available.\n\nNote: As a result of an error, think-cell may inform the user that an update with a fix is already available and offer it on a web page (see A.3.5 Error reporting).\n\nIf think-cell’s automatic updates are disabled, you need to manually check think-cell compatibility with every update to PowerPoint and Excel. For an effective check, you need to\n\nstart PowerPoint,\n\ninsert a chart,\n\nwait for the internal datasheet to open and change a number,\n\nconfirm that the change is reflected in the chart.\n\nIf any of those steps fail, you need to take action. The current version of think-cell available from our website will usually be compatible with the Microsoft update you wish to deploy. Therefore, please repeat the test with the current think-cell version and plan for a deployment before or together with the Microsoft update.\n\nTesting think-cell with every Microsoft update is not optional. It is a necessary part of your support for the think-cell users in your organization. Testing is not necessary if think-cell’s automatic updates are enabled.\n\nIn any case, you should regularly deploy think-cell updates so that your users can benefit from the latest improvements. We recommend an update at least every few months.\n\nUpdates are usually hosted on think-cell’s web server, but you have the option to host updates within your own intranet. To do so, you need a web server such as Apache or Microsoft Internet Information Server (IIS) that all think-cell users within your organization can access. The following files must be placed on the web server hosting your updates:\n\nAn XML text file, typically called update.xml, that controls the update process. See below for a description of the update XML file format.\n\nOne or more setup_think-cell_<version>.exe update files, supplied by think-cell.\n\nAfter placing the necessary files on the web server, use the UPDATESURL/updates.url configuration parameter specifying the location of the update XML file (see A.2.1 Configuration parameters), e.g.\n\nhttps://example.com/update.xml\n\nThe update XML file must contain a list of scenarios, with each scenario consisting of a set of conditions and the corresponding URL of a setup file. The first scenario whose conditions are met determines the file that the client will download and install. By applying conditions such as a list of machine or user names, different users can receive different updates. For example, new program versions can first be distributed to a small group of pilot users before they are rolled out in the whole organization.\n\nWindows: The following example shows a complex update XML file using WQL queries:\n\nConditions within the file are written in the Windows Management Instrumentation Query Language (WQL), which gives access to all relevant system parameters. To learn more about WQL, go to:\n\nhttp://www.think-cell.com/wql\n\nIf you want to control the update by comparing the version number, follow this example:\n\nThe update conditions are met when the current build number is greater or equal (val=\"1\") to 26000 and less than (val=\"-2\") 26388.\n\nA.3.3 Notification about license key expiration\n\nthink-cell requires a license key and can be used up to and on the expiration date of the license key.\n\nThe software will notify the user about the upcoming expiration on every start of PowerPoint or Excel if the expiration date is less than 14 days away.\n\nThe license key dialog is used to notify the user. If the license key has not yet expired, the message “The license key of this think-cell product will expire soon. You should enter a new license key:” is shown together with the expiration date. The user has the following choices:\n\nEnter a new license key and click OK.\n\nClick Cancel to dismiss the dialog.\n\nClick Uninstall to uninstall think-cell.\n\nIf the expiration date has already passed, the message “The license key of this think-cell product has expired. Please enter a new license key:” is shown, but clicking OK is only possible after a valid license key has been entered. If the dialog is dismissed using Cancel think-cell remains deactivated.\n\nTo prevent the license expiration dialog from being shown please make sure to order and deploy a new license key more than 14 days before the expiration date. A new license key is always valid immediately and not only after the expiration date of the old license key. Therefore you should deploy the new license key as soon as it is available.\n\nA.3.4 Information sent over the internet\n\nthink-cell sends information over the internet sometimes, for example when using the automatic update or displaying a list of new features when a new version is started for the first time. Some information about the current installation is sent to enable an appropriate response from our servers.\n\nFor each request, the following information is sent:\n\nthe program build (a five-digit number; can also be found in the About dialog)\n\nthe license key\n\nan anonymous Globally Unique Identifier (GUID), which is used to correlate multiple requests. The GUID is created when using think-cell for the first time and stored together with the user’s settings. It is a random string with no connection to the machine, user or document current at the time of creation. Using the GUID, it is only possible to determine whether two requests came from the same or from different users.\n\ndate and time\n\nversion numbers of the Microsoft Windows and Microsoft Office installations\n\ncpuinfo (32 bit or 64 bit, MMX & AVX support)\n\nupdate level (disabled/enabled/forced)\n\nAll communication with our servers is secured with state-of-the-art techniques and encryption (HTTPS).\n\nIf error reports are enabled, additional information is sent as described in the next section A.3.5 Error reporting.\n\nA.3.5 Error reporting\n\nAt think-cell, we are committed to stability and robustness as key factors for the professional use of our software. When an error condition arises while you are using think-cell, the software automatically generates a report that helps us to understand the problem and fix it in the next release.\n\nAn updated version of think-cell that addresses the reported error may already be available at the time of the report. In this case, the update is installed automatically (see A.1.3 Automatic updates for details on the download and installation of updates). If think-cell updates are controlled manually (see A.3.1 Controlling think-cell updates manually), the update is offered for download in a browser window and can be manually installed.\n\nAn automatically created report contains the following information:\n\nthe basic information listed in A.3.4 Information sent over the internet,\n\nan error code from the operating system, from PowerPoint or Excel, or from think-cell itself,\n\nthe location in our source code (file name and line number) where the error occurred,\n\na Microsoft Minidump, which is basically a stack trace along with environment information such as operating system version and loaded modules. Microsoft uses the same Minidump when they send error reports,\n\nThe error report is sent via HTTPS to the think-cell server. Of all the information transmitted, only the Minidump, essentially memory content, could potentially contain actual slide content fragments. But in its operation, think-cell never stores actual slide content. Storing text or images is completely left to PowerPoint. Therefore it is very unlikely that the Minidump of the memory used by think-cell contains any sensitive information.\n\nAutomatic error reporting can be enabled or disabled via a configuration parameter (see A.2.1 Configuration parameters).\n\nTroubleshooting and critical errors\n\nIn case of critical errors the user is asked whether he or she would like to file a support request.\n\nThese support requests can also be sent manually (see 2.4 Troubleshooting). It is possible to change the default email address for support requests via a configuration parameter (see A.2.1 Configuration parameters).\n\nA.4 Configure stock image providers\n\nA.4.1 Restrict image providers\n\nYou can disable stock image providers that are not used in your company via the respective configuration parameters. If all providers are disabled, Stock Image is removed from the Elements menu.\n\nWhen using Group Policy on Windows (see A.2.2.3 Group policies), go to the policy Stock Images: Other Providers. You can set the settings, Disable Canto, Disable Getty Images, Disable Pexels, and Disable Unsplash to Yes to disable that image provider or to No to leave it enabled, which is the default. You can also disable Brandfolder by setting the Stock Images: Brandfolder policy to Disabled as a whole.\n\nWhen using command line parameters on Windows (see A.2.2 Installation on Windows), you can add STOCKIMAGESDISABLEBRANDFOLDER=1, STOCKIMAGESDISABLECANTO=1, STOCKIMAGESDISABLEGETTY=1, STOCKIMAGESDISABLEPEXELS=1, or STOCKIMAGESDISABLEUNSPLASH=1 to the installation command line to disable that image provider.\n\nWhen using defaults on Mac (see A.2.3 Installation on macOS), the following command will disable all image providers:\n\nsudo defaults write /Library/Preferences/com.microsoft.office com.think-cell.settings.stockimages -dict-add DisableBrandfolder -bool true DisableCanto -bool true DisableGetty -bool true DisablePexels -bool true DisableUnsplash -bool true\n\nWhen uploading a .plist file to a device management solution (see A.2.3.2 Managed deployment on macOS), including the following snippet will disable all image providers:\n\nTo leave a specific image provider enabled, change the true to false for that provider.\n\nA.4.2 Brandfolder API key\n\nWhen using the image provider Brandfolder, authentication is done via an API key that you need to distribute to think-cell users via a configuration parameter. To retrieve your API key, log in to your Brandfolder profile, navigate to Integrations and find your API key under API Keys. It is best to copy and paste this long string.\n\nWhen using Group Policy on Windows (see A.2.2.3 Group policies), go to the policy Stock Images: Brandfolder and set the value of Brandfolder API Key to the API key.\n\nWhen using command line parameters on Windows (see A.2.2 Installation on Windows), add STOCKIMAGESBRANDFOLDERAPIKEY=ABCDE... to the installation command line after replacing ABCDE... with your API key.\n\nWhen using defaults on Mac (see A.2.3 Installation on macOS), the following command will set the Brandfolder API key after replacing ABCDE... with your API key:\n\nsudo defaults write /Library/Preferences/com.microsoft.office com.think-cell.settings.stockimages -dict-add BrandfolderAPIKey -string \"ABCDE...\"\n\nWhen uploading a .plist file to a device management solution (see A.2.3.2 Managed deployment on macOS), including the following snippet will set the Brandfolder API key after replacing ABCDE... with your API key:\n\nA.4.3 Brandfolder stock image dialog\n\nWhen using the image provider Brandfolder, you can configure the stock image dialog further. You can enable an option that the folder drop-down is automatically hidden if you only have one folder. And for both the Brandfolder Collections and Brandfolder Sections drop-down lists you can choose between showing the drop-down, showing it without the \"All\" setting, and hiding it, implying \"All\".\n\nWhen using Group Policy on Windows (see A.2.2.3 Group policies), go to the policy Stock Images: Brandfolder and set the respective options.\n\nWhen using command line parameters on Windows (see A.2.2 Installation on Windows), add STOCKIMAGESHIDESINGLEBRANDFOLDER=1 to the installation command line to hide the drop-down list automatically if you only have one folder. Add STOCKIMAGESHIDEBRANDFOLDERCOLLECTIONS=0 to show the Brandfolder Collections drop-down list, =1 to show it but omit \"All\" and =2 to hide the drop-down list. The setting STOCKIMAGESHIDEBRANDFOLDERSECTIONS controls the Brandfolder Sections drop-down list in the same way.\n\nWhen using defaults on Mac (see A.2.3 Installation on macOS), the following command can be used as a starting point. The value for HideSingleBrandfolder can be true or false and for both HideBrandfolderCollections and HideBrandfolderSections the following values can be used: 0 to show the drop-down list, 1 to show it but omit \"All\" and 2 to hide the drop-down list.\n\nsudo defaults write /Library/Preferences/com.microsoft.office com.think-cell.settings.stockimages -dict-add HideSingleBrandfolder -bool false HideBrandfolderCollections -int 1 HideBrandfolderSections -int 2"
    }
}