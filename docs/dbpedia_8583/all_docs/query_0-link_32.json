{
    "id": "dbpedia_8583_0",
    "rank": 32,
    "data": {
        "url": "https://pypi.org/project/deep-translator/",
        "read_more_link": "",
        "language": "en",
        "title": "deep-translator",
        "top_image": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "meta_img": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "images": [
            "https://pypi.org/static/images/logo-small.8998e9d1.svg",
            "https://pypi-camo.freetls.fastly.net/5863dbab95866b99b0c686b01203c5d56b17b5cf/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f65363464326230393934636462316562306133613939616264333431393431623f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/99865f8888db55ce6099450bbd3fdfc263a671db/2e2e2f6173736574732f69636f6e2e6a7067",
            "https://pypi-camo.freetls.fastly.net/4918573b8610d89feb60a37d119a83748bbc9187/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646565702d7472616e736c61746f722e737667",
            "https://pypi-camo.freetls.fastly.net/8795e8dc5f6c24119e8c342ea031830f185b4c33/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6e696468616c6f66662f646565702d7472616e736c61746f722e737667",
            "https://pypi-camo.freetls.fastly.net/5a60f84a1704e5c159f81d75b2c15c3b306794de/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646565702d7472616e736c61746f722f62616467652f3f76657273696f6e3d6c6174657374",
            "https://pypi-camo.freetls.fastly.net/56f57e447f50b657bc61d3d8883215f0a9318a66/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646565702d7472616e736c61746f72",
            "https://pypi-camo.freetls.fastly.net/df21da126f33101b94dfdcea0aaf467d59995a1f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f646565702d7472616e736c61746f72",
            "https://pypi-camo.freetls.fastly.net/440b0980d9ee8f3d1b50fb9726c1c17f707b96b7/68747470733a2f2f706570792e746563682f62616467652f646565702d7472616e736c61746f72",
            "https://pypi-camo.freetls.fastly.net/9e2d24fa892615574ae03e6b0c31dae371e37776/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f646565702d7472616e736c61746f72",
            "https://pypi-camo.freetls.fastly.net/d8a24dc59e16e0091a38e85c569a04a567e4e20f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974",
            "https://pypi-camo.freetls.fastly.net/c2618b6f9a307a11aeff18f4dbeec736754a7478/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c3f75726c3d6874747073253341253246253246747769747465722e636f6d2532464e696468616c426163636f757269",
            "https://pypi-camo.freetls.fastly.net/65f5ebb8ef4dc3f3a7886b9d38f6ad7812a2813d/2e2e2f6173736574732f6170702d69636f6e2e706e67",
            "https://pypi-camo.freetls.fastly.net/40f5eeb8f7ca3e3b419fc564785f6ccbc6a8ad67/2e2e2f6173736574732f7472616e736c61746f72312e6a7067",
            "https://pypi-camo.freetls.fastly.net/335fea1a44544214aec73b02f213df2a9e86723d/2e2e2f6173736574732f7472616e736c61746f72322e6a7067",
            "https://pypi-camo.freetls.fastly.net/5cf4ac3c066a37597c95ac3c10adaa0ca2cff78b/2e2e2f6173736574732f7370696e6e65722e6a7067",
            "https://pypi-camo.freetls.fastly.net/235f6655913c56a9ebc19ff3f6e7ae22ad064e42/2e2e2f6173736574732f687a5f766965772e706e67",
            "https://pypi-camo.freetls.fastly.net/5863dbab95866b99b0c686b01203c5d56b17b5cf/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f65363464326230393934636462316562306133613939616264333431393431623f73697a653d3530",
            "https://pypi.org/static/images/blue-cube.572a5bfb.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67",
            "https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67",
            "https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67",
            "https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67",
            "https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67",
            "https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-06-28T19:55:20+00:00",
        "summary": "",
        "meta_description": "A flexible free and unlimited python tool to translate between different languages in a simple way using multiple translators",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicon.35549fe8.ico",
        "meta_site_name": "PyPI",
        "canonical_link": "https://pypi.org/project/deep-translator/",
        "text": "Translation for humans\n\nA flexible FREE and UNLIMITED tool to translate between different languages in a simple way using multiple translators.\n\nFree software: MIT license\n\nDocumentation: https://deep-translator.readthedocs.io.\n\nSwagger API: https://deep-translator-api.azurewebsites.net/docs.\n\nMotivation\n\nI needed to translate a text using python. It was hard to find a simple way to do it. There are other libraries that can be used for this task, but most of them are buggy, not free, limited, not supported anymore or complex to use.\n\nTherefore, I decided to build this simple tool. It is 100% free, unlimited, easy to use and provides support for all languages.\n\nBasically, my goal was to integrate support for multiple famous translators in this tool.\n\nWhen you should use it\n\nIf you want to translate text using python\n\nIf you want to translate from a file\n\nIf you want to get translations from many sources and not only one\n\nIf you want to automate translations\n\nIf you want to use ChatGpt for translations\n\nIf you want to compare different translations\n\nIf you want to detect language automatically\n\nWhy you should use it\n\nIt’s the only python tool that integrates many translators\n\nMulti language support\n\nSupport for ChatGpt (version >= 1.11.0)\n\nSupports batch translation\n\nHigh level of abstraction\n\nAutomatic language detection\n\nEasy to use and extend\n\nSupport for most famous universal translators\n\nStable and maintained regularly\n\nThe API is very easy to use\n\nProxy integration is supported\n\nFeatures\n\nSupport for google translate\n\nSupport for the microsoft translator (version >= 1.3.5)\n\nSupport for Pons translator\n\nSupport for the Linguee translator\n\nSupport for the Mymemory translator\n\nSupport for the Yandex translator (version >= 1.2.1)\n\nSupport for the QcriTranslator translator (version >= 1.2.4)\n\nSupport for the DeeplTranslator translator (version >= 1.2.5)\n\nSupport for the Papago translator (version >= 1.4.4)\n\nSupport for the Libre translator\n\nSupport for ChatGpt\n\nSupport for proxy usage\n\nAutomatic single language detection\n\nBatch language detection\n\nTranslate directly from a text file\n\nTranslate docx files (version >= 1.9.4)\n\nTranslate PDF files (version >= 1.9.4)\n\nGet multiple translation for a word\n\nAutomate the translation of different paragraphs in different languages\n\nTranslate directly from terminal (version >= 1.1.0)\n\nInstallation\n\nInstall the stable release:\n\n$ pip install -U deep-translator$ poetry add deep-translator# for poetry usage\n\ntake a look at the docs if you want to install from source.\n\nAlso, you can install extras if you want support for specific use case. For example, translating Docx and PDF files\n\n$ pip install deep-translator[docx]# add support for docx translation $ pip install deep-translator[pdf]# add support for pdf translation $ pip install deep-translator[ai]# add support for ChatGpt $ poetry add deep-translator --extras\"docx pdf ai\"# for poetry usage\n\nQuick Start\n\nfrom deep_translator import GoogleTranslator# Use any translator you like, in this example GoogleTranslatortranslated = GoogleTranslator(source='auto', target='de').translate(\"keep it up, you are awesome\") # output -> Weiter so, du bist großartig\n\nor using proxies:\n\nfrom deep_translator import GoogleTranslatorproxies_example = { \"https\": \"34.195.196.27:8080\", \"http\": \"34.195.196.27:8080\"}translated = GoogleTranslator(source='auto', target='de', proxies=proxies_example).translate(\"keep it up, you are awesome\") # output -> Weiter so, du bist großartig\n\nor even directly from terminal:\n\n$ deep-translator --source\"en\" --target\"de\" --text\"hello world\" or shorter $ dt -tg de -txt\"hello world\"\n\nUsage\n\nIn this section, demos on how to use all different integrated translators in this tool are provided.\n\nImports\n\nfrom deep_translator import (GoogleTranslator, ChatGptTranslator, MicrosoftTranslator, PonsTranslator, LingueeTranslator, MyMemoryTranslator, YandexTranslator, PapagoTranslator, DeeplTranslator, QcriTranslator, single_detection, batch_detection)\n\nCheck Supported Languages\n\n# default return type is a listlangs_list = GoogleTranslator().get_supported_languages() # output: [arabic, french, english etc...]# alternatively, you can the dictionary containing languages mapped to their abbreviationlangs_dict = GoogleTranslator().get_supported_languages(as_dict=True) # output: {arabic: ar, french: fr, english:en etc...}\n\nLanguage Detection\n\nSingle Text Detection\n\nlang = single_detection('bonjour la vie', api_key='your_api_key')print(lang) # output: fr\n\nBatch Detection\n\nlang = batch_detection(['bonjour la vie', 'hello world'], api_key='your_api_key')print(lang) # output: [fr, en]\n\nGoogle Translate\n\ntext = 'happy coding'\n\nYou can use automatic language detection to detect the source language:\n\ntranslated = GoogleTranslator(source='auto', target='de').translate(text=text)\n\nYou can pass languages by name or by abbreviation:\n\ntranslated = GoogleTranslator(source='auto', target='german').translate(text=text)# Alternatively, you can pass languages by their abbreviation:translated = GoogleTranslator(source='en', target='de').translate(text=text)\n\nYou can also reuse the Translator class and change/update its properties.\n\n(Notice that this is important for performance too, since instantiating new objects is expensive)\n\n# let's say first you need to translate from auto to germanmy_translator = GoogleTranslator(source='auto', target='german')result = my_translator.translate(text=text)print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")# let's say later you want to reuse the class but your target is french now# This is the best practice and how you should use deep-translator.# Please don't over-instantiate translator objects without a good reason, otherwise you will run into performance issuesmy_translator.target = 'fr' # this will override the target 'german' passed previouslyresult = my_translator.translate(text=text)print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")# you can also update the source language as wellmy_translator.source = 'en' # this will override the source 'auto' passed previouslyresult = my_translator.translate(text=text)print(f\"Translation using source = {my_translator.source} and target = {my_translator.target} -> {result}\")\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]# the translate_sentences function is deprecated, use the translate_batch function insteadtranslated = GoogleTranslator('de', 'en').translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = GoogleTranslator(source='auto', target='german').translate_file('path/to/file')\n\nMymemory Translator\n\nSimple translation\n\ntext = 'Keep it up. You are awesome'translated = MyMemoryTranslator(source='auto', target='french').translate(text)\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]# the translate_sentences function is deprecated, use the translate_batch function insteadtranslated = MyMemoryTranslator('de', 'en').translate_batch(texts)\n\nTranslate from file\n\npath = \"your_file.txt\"translated = MyMemoryTranslator(source='en', target='fr').translate_file(path)\n\nDeeplTranslator\n\nSimple translation\n\ntext = 'Keep it up. You are awesome'translated = DeeplTranslator(api_key=\"your_api_key\", source=\"en\", target=\"en\", use_free_api=True).translate(text)\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]# the translate_sentences function is deprecated, use the translate_batch function insteadtranslated = DeeplTranslator(\"your_api_key\").translate_batch(texts)\n\nQcriTranslator\n\nCheck languages\n\n# as a propertyprint(\"language pairs: \", QcriTranslator(\"your_api_key\").languages)\n\nCheck domains\n\n# as a propertyprint(\"domains: \", QcriTranslator(\"your_api_key\").domains)\n\nText translation\n\ntext = 'Education is great'translated = QcriTranslator(\"your_api_key\").translate(source='en', target='ar', domain=\"news\", text=text)# output -> التعليم هو عظيم# see docs for batch translation and more.\n\nYandex Translator\n\nLanguage detection\n\nlang = YandexTranslator('your_api_key').detect('Hallo, Welt')print(f\"language detected: {lang}\") # output -> language detected: 'de'\n\nText translation\n\n# with auto detection | meaning provide only the target language and let yandex detect the sourcetranslated = YandexTranslator('your_api_key').translate(source=\"auto\", target=\"en\", text='Hallo, Welt')print(f\"translated text: {translated}\") # output -> translated text: Hello world# provide source and target language explicitlytranslated = YandexTranslator('your_api_key').translate(source=\"de\", target=\"en\", text='Hallo, Welt')print(f\"translated text: {translated}\") # output -> translated text: Hello world\n\nFile translation\n\ntranslated = YandexTranslator('your_api_key').translate_file(source=\"auto\", target=\"en\", path=\"path_to_your_file\")\n\nBatch translation\n\ntranslated = YandexTranslator('your_api_key').translate_batch(source=\"auto\", target=\"de\", batch=[\"hello world\", \"happy coding\"])\n\nMicrosoft Translator\n\nRequired and optional attributes\n\nThere are two required attributes, namely “api_key” (string) and “target” (string or list). Attribute “source” is optional. Also, Microsoft API accepts a number of other optional attributes, you can find them here: https://docs.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate You can simply add them after the required attributes, see the example.\n\ntext = 'happy coding'translated = MicrosoftTranslator(api_key='some-key', target='de').translate(text=text)translated_two_targets = MicrosoftTranslator(api_key='some-key', target=['de', 'ru']).translate(text=text)translated_with_optional_attr = MicrosoftTranslator(api_key='some-key', target='de', textType='html']).translate(text=text)\n\nYou can pass languages by name or by abbreviation:\n\ntranslated = MicrosoftTranslator(api_key='some-key', target='german').translate(text=text)# Alternatively, you can pass languages by their abbreviation:translated = MicrosoftTranslator(api_key='some-key', target='de').translate(text=text)\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]translated = MicrosoftTranslator(api_key='some-key', target='english').translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = MicrosoftTranslator(api_key='some-key', target='german').translate_file('path/to/file')\n\nChatGpt Translator\n\nRequired and optional attributes\n\nThere are two required attributes, namely “api_key” (string) and “target” (string or list). Attribute “source” is optional.\n\nYou can provide your api key as an argument or you can export it as an env var e.g. export OPENAI_API_KEY=”your_key”\n\ntext = 'happy coding'translated = ChatGptTranslator(api_key='your_key', target='german').translate(text=text)\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]translated = ChatGptTranslator(api_key='some-key', target='english').translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = ChatGptTranslator(api_key='some-key', target='german').translate_file('path/to/file')\n\nPapago Translator\n\ntext = 'happy coding'translated = PapagoTranslator(client_id='your_client_id', secret_key='your_secret_key', source='en', target='ko').translate(text=text) # output: 행복한 부호화\n\nLibre Translator\n\ntext = 'laufen'translated = LibreTranslator(source='auto', target='en', base_url = 'https://libretranslate.com/', api_key = 'your_api_key').translate(text=text) # output: run\n\nYou can pass languages by name or by abbreviation:\n\ntranslated = LibreTranslator(source='german', target='english').translate(text=text)# Alternatively, you can pass languages by their abbreviation:translated = LibreTranslator(source='de', target='en').translate(text=text)\n\nTranslate batch of texts\n\ntexts = [\"hallo welt\", \"guten morgen\"]translated = LibreTranslator(source='auto', target='en').translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = LibreTranslator(source='auto', target='en').translate_file('path/to/file')\n\nBaiduTranslator\n\nSimple translation\n\ntext = 'Hello world'translated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate(text)\n\nTranslate batch of texts\n\ntexts = [\"Hello world\", \"How are you?\"]translated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate_file('path/to/file')\n\nBaiduTranslator\n\nSimple translation\n\ntext = 'Hello world'translated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate(text)\n\nTranslate batch of texts\n\ntexts = [\"Hello world\", \"How are you?\"]translated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate_batch(texts)\n\nTranslate from a file:\n\ntranslated = BaiduTranslator(appid=\"your-appid\", appkey=\"your-appkey\" source=\"en\", target=\"zh\").translate_file('path/to/file')\n\nProxy usage\n\ndeep-translator provides out of the box usage of proxies. Just define your proxies config as a dictionary and pass it to the corresponding translator. Below is an example using the GoogleTranslator, but this feature can be used with all supported translators.\n\nfrom deep_translator import GoogleTranslator# define your proxy configs:proxies_example = { \"https\": \"your https proxy\", # example: 34.195.196.27:8080 \"http\": \"your http proxy if available\"}translated = GoogleTranslator(source='auto', target='de', proxies=proxies_example).translate(\"this package is awesome\")\n\nFile Translation\n\nDeep-translator (version >= 1.9.4) supports not only text file translation, but docx and PDF files too. However, you need to install deep-translator using the specific extras.\n\nFor docx translation:\n\npip install deep-translator[docx]\n\nFor PDF translation:\n\npip install deep-translator[pdf]\n\nUsage from Terminal\n\nDeep-translator supports a series of command line arguments for quick and simple access to the translators directly in your console.\n\nFor a list of available translators:\n\n$ deep-translator list\n\nTo translate a string or line of text:\n\n$ deep_translator google --source\"english\" --target\"german\" --text\"happy coding\"\n\nAlternate short option names, along with using language abbreviations:\n\n$ deep_translator google -src\"en\" -tgt\"de\" -txt\"happy coding\"\n\nFinally, to retrieve a list of available languages for a given translator:\n\n$ deep-translator languages google\n\nTests\n\nDevelopers can install the development version of deep-translator and execute unit tests to verify functionality. For more information on doing this, see the contribution guidelines\n\nHelp\n\nIf you are facing any problems, please feel free to open an issue. Additionally, you can make contact with the author for further information/questions.\n\nDo you like deep-translator? You can always help the development of this project by:\n\nFollowing on github and/or twitter\n\nPromote the project (ex: by giving it a star on github)\n\nWatch the github repo for new releases\n\nTweet about the package\n\nHelp others with issues on github\n\nCreate issues and pull requests\n\nSponsor the project\n\nNext Steps\n\nTake a look in the examples folder for more :) Contributions are always welcome. Read the Contribution guidelines Here\n\nCredits\n\nMany thanks to @KirillSklyarenko for his work on integrating the microsoft translator\n\nLicense\n\nMIT license\n\nCopyright (c) 2020-present, Nidhal Baccouri\n\nSwagger UI\n\ndeep-translator offers an api server for easy integration with other applications. Non python applications can communicate with the api directly and leverage the features of deep-translator\n\nAccess the api here: https://deep-translator-api.azurewebsites.net/docs\n\nThe Translator++ mobile app\n\nYou can download and try the app on play store https://play.google.com/store/apps/details?id=org.translator.translator&hl=en_US&gl=US\n\nAfter developing the deep-translator, I realized how cool this would be if I can use it as an app on my mobile phone. Sure, there is google translate, pons and linguee apps etc.. but isn’t it cooler to make an app where all these translators are integrated?\n\nLong story short, I started working on the app. I decided to use the kivy framework since I wanted to code in python and to develop a cross platform app. I open sourced the Translator++ app on my github too. Feel free to take a look at the code or make a pull request ;)\n\nI published the first release on google play store on 02-08-2020\n\nHere are some screenshots:\n\nPhone\n\nTablet:\n\nWebsite & Desktop app\n\nCurrently, there are propositions for a website and/or desktop app based on deep-translator. You can follow the issue here: https://github.com/nidhaloff/deep-translator/issues/144"
    }
}