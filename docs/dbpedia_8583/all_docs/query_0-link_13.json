{
    "id": "dbpedia_8583_0",
    "rank": 13,
    "data": {
        "url": "https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages",
        "read_more_link": "",
        "language": "en",
        "title": "CodeQL code scanning for compiled languages",
        "top_image": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "meta_img": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Advanced Security",
            "Code scanning",
            "CodeQL",
            "Actions",
            "Repositories",
            "C/C++",
            "C#",
            "Java",
            "Kotlin"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Understand how CodeQL analyzes compiled languages, the build options available, and learn how you can customize the database generation process if you need to.",
        "meta_lang": "en",
        "meta_favicon": "/assets/cb-345/images/site/favicon.png",
        "meta_site_name": "GitHub Docs",
        "canonical_link": "https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages",
        "text": "About the CodeQL analysis workflow and compiled languages\n\nCode scanning works by running queries against one or more CodeQL databases. Each database contains a representation of the code in a single language in your repository. For the compiled languages C/C++, C#, Go, Java, and Swift, the process of populating this database often involves building the code and extracting data.\n\nWhen you enable code scanning, both default and advanced setup generate a CodeQL database for analysis using the simplest method available. For C# (beta) and Java, the CodeQL database is generated directly from the codebase without requiring a build (none build mode). For other compiled languages, CodeQL builds the codebase using the autobuild build mode. Alternatively, you can use the manual build mode to specify explicit build commands to analyze only the files that are built by these custom commands.\n\nCodeQL build modes\n\nThe CodeQL action supports three different build modes for compiled languages:\n\nnone - the CodeQL database is created directly from the codebase without building the codebase (supported for all interpreted languages, and additionally supported for C# (beta) and Java).\n\nautobuild - CodeQL detects the most likely build method and uses this to attempt to build the codebase and create a database for analysis (supported for all compiled languages).\n\nmanual - you define the build steps to use for the codebase in the workflow (supported for all compiled languages).\n\nComparison of the build modes\n\nRecommendations\n\nWhen you are setting up code scanning for the first time, or across multiple repositories, it's best to use default setup. Default setup uses the simplest method available to generate a CodeQL database and analyze your code, so that you can start fixing alerts as soon as possible. Once you have resolved the initial alerts, you may want to switch to advanced setup with a manual build process for high risk repositories.\n\nUsing multiple build modes in a multi-language repository\n\nFor repositories with multiple compiled languages, you can use different build modes for different languages. For example, if your repository contains C/C++, C# and Java, you might want to provide manual build steps for one language (here C/C++). This workflow specifies a different build mode for each language.\n\nstrategy: matrix: include: - language: c-cpp build-mode: manual - language: csharp build-mode: autobuild - language: java-kotlin build-mode: none steps: - name: Checkout repository uses: actions/checkout@v4 - name: Initialize CodeQL uses: github/codeql-action/init@v3 with: languages: ${{ matrix.language }} - if: ${{ matrix.build-mode == 'manual' }} name: Build C and C++ code run: | echo 'If you are using a \"manual\" build mode for one or more of the' \\ 'languages you are analyzing, replace this with the commands to build' \\ 'your code, for example:' echo ' make bootstrap' echo ' make release' exit 1\n\nFor information about the languages, libraries, and frameworks that are supported in the latest version of CodeQL, see \"Supported languages and frameworks\" in the CodeQL documentation. For information about the system requirements for running the latest version of CodeQL, see \"System requirements\" in the CodeQL documentation.\n\nAbout build mode None for CodeQL\n\nFor C# (beta) and Java, CodeQL creates a database without requiring a build when you enable default setup for code scanning unless the repository also includes Kotlin code. If a repository contains Kotlin code in addition to Java code, default setup is enabled with the autobuild process because Kotlin analysis requires a build.\n\nCreating a CodeQL database without a build may produce less accurate results than using autobuild or manual build steps if:\n\nThe build scripts cannot be queried for dependency information, and dependency guesses are inaccurate.\n\nThe repository normally generates code during the build process.\n\nTo use autobuild or manual build steps, you can use advanced setup.\n\nAbout Autobuild for CodeQL\n\nThe CodeQL action uses autobuild to analyze compiled languages in the following cases.\n\nDefault setup is enabled and the language does not support none build (supported for C# (beta) and Java).\n\nAdvanced setup is enabled and the workflow specifies build-mode: autobuild.\n\nAdvanced setup is enabled and the workflow has an Autobuild step for the language using the autobuild action (github/codeql-action/autobuild@v3).\n\nExample using the build-mode option\n\nname: Analyze strategy: matrix: include: - language: c-cpp build-mode: autobuild - language: go build-mode: autobuild steps: - uses: github/codeql-action/init@v3 with: languages: ${{ matrix.language }} build-mode: ${{ matrix.build-mode }}\n\nExample using the Autobuild step\n\n- name: Initialize CodeQL uses: github/codeql-action/init@v3 with: languages: ${{ matrix.language }} - name: Autobuild uses: github/codeql-action/autobuild@v3\n\nAbout specifying build steps manually\n\nYou can only specify manual build steps if you have enabled advanced setup, see \"Configuring advanced setup for code scanning.\"\n\nIf autobuild fails, or you want to analyze a different set of source files from those built by the autobuild process, you'll need to do the following:\n\nIf your workflow specifies a build mode for the language, change the build mode to manual.\n\nIf your workflow contains an autobuild step, remove or comment out the autobuild step in the workflow.\n\nThen uncomment the run step and manually specify the build process to use. For C/C++, C#, Go, Java, and Swift, CodeQL will analyze whatever source code is built by your specified build steps. For information on how to edit the workflow file, see \"Customizing your advanced setup for code scanning.\"\n\nUpdate your workflow to define the build-mode as manual.\n\n- name: Initialize CodeQL - uses: github/codeql-action/init@v3 with: languages: ${{ matrix.language }} build-mode: manual - uses: github/codeql-action/analyze@v3 with: category: \"/language:${{ matrix.language }}\"\n\nAlternatively, update your workflow to comment out the \"Autobuild\" step.\n\nSpecifying build commands\n\nWhen manual building is enabled, uncomment the run step in the workflow and add build commands that are suitable for your repository. The run step runs command-line programs using the operating system's shell. You can modify these commands and add more commands to customize the build process.\n\n- run: | make bootstrap make release\n\nFor more information about the run keyword, see \"Workflow syntax for GitHub Actions.\"\n\nIf you added manual build steps for compiled languages and code scanning is still not working on your repository, contact us through the GitHub Support portal.\n\nAutobuild steps for compiled languages\n\nGitHub-hosted runners are always run with the software required by autobuild. If you use self-hosted runners for GitHub Actions, you may need to install additional software to use the autobuild process. Additionally, if your repository requires a specific version of a build tool, you may need to install it manually.\n\nBuilding C/C++\n\nBuilding C#\n\nBuilding Go\n\nBuilding Java and Kotlin\n\nBuilding Swift\n\nBuilding C/C++\n\nCodeQL supports build modes autobuild or manual for C/C++ code.\n\nAutobuild summary for C/C++\n\nSupported system typeSystem nameOperating systemWindows, macOS, and LinuxBuild systemWindows: MSbuild and build scripts\n\nLinux and macOS: Autoconf, Make, CMake, qmake, Meson, Waf, SCons, Linux Kbuild, and build scripts\n\nThe behavior of the autobuild step varies according to the operating system that the extraction runs on.\n\nWindows autodetection\n\nOn Windows, the autobuild step attempts to autodetect a suitable build method for C/C++ using the following approach:\n\nInvoke MSBuild.exe on the solution (.sln) or project (.vcxproj) file closest to the root. If autobuild detects multiple solution or project files at the same (shortest) depth from the top level directory, it will attempt to build all of them.\n\nInvoke a script that looks like a build scriptâ€”build.bat, build.cmd, and build.exe (in that order).\n\nLinux and macOS autodetection\n\nOn Linux and macOS, the autobuild step reviews the files present in the repository to determine the build system used:\n\nLook for a build system in the root directory.\n\nIf none are found, search subdirectories for a unique directory with a build system for C/C++.\n\nRun an appropriate command to configure the system.\n\nRunner requirements for C/C++\n\nOn Ubuntu Linux runners, autobuild may try to automatically install dependencies required by the detected configuration and build steps. By default, this behavior is enabled on GitHub-hosted runners and disabled on self-hosted runners. You can enable or disable this feature explicitly by setting CODEQL_EXTRACTOR_CPP_AUTOINSTALL_DEPENDENCIES to true or false in the environment. For more information about defining environment variables, see \"Store information in variables.\"\n\nFor self-hosted runners, unless automatic installation of dependencies is enabled, you will likely need to install the gcc compiler, and specific projects may also require access to clang or msvc executables. You will also need to install the build system (for example msbuild, make, cmake, bazel) and utilities (such as python, perl, lex, and yacc) that your projects depend on. If you enable automatic installation of dependencies, you must ensure that the runner is using Ubuntu and that it can run sudo apt-get without requiring a password.\n\nWindows runners require powershell.exe to be on the PATH.\n\nBuilding C#\n\nCodeQL supports build modes none, autobuild or manual for C# code.\n\nWhen you enable default setup for a repository that contains C# code, the build mode is set to none automatically.\n\nNo build for C#\n\nCodeQL restores dependencies and generates a few additional source files, to give more accurate results, before creating a database from all the source files and dependencies.\n\nDependencies are restored using multiple heuristics and strategies. The following files are the primary source of information: *.csproj, *.sln, nuget.config, packages.config, global.json, and project.assets.json.\n\nThe following generated source files are optional, but significantly increase the correctness of the CodeQL database:\n\nglobal generated using directives to handle the implicit using feature of MSbuild.\n\nASP.NET core view files, .cshtml files are converted to .cs files.\n\nThe information from the dependency assembly names, generated source files, and the source files in the repository is compiled and used to create a CodeQL database.\n\nAccuracy of no build analysis for C#\n\nCreating a CodeQL database without building the full code relies on being able to restore dependencies and being able to compile together the source files in the repository. When there are problems restoring dependencies or compiling the source code, this can affect the accuracy of the CodeQL database and code scanning analysis results.\n\nYou can ensure a more accurate analysis by taking the following steps:\n\nProvide access to the public internet or ensure that access to a private Nuget feed is available.\n\nCheck whether the repository requires multiple versions of the same Nuget dependency. CodeQL can use only one version and usually chooses the newer version where there are multiple versions. This approach may not work for all repositories.\n\nCheck whether multiple versions of .NET are referenced, for example, net48, net5.0, and netstandard1.6. CodeQL can use only one version and this may affect accuracy.\n\nAvoid colliding class names, otherwise this may cause missing method call targets, which has an impact on dataflow analysis.\n\nAutobuild summary for C#\n\nSupported system typeSystem nameOperating systemWindows, macOS, and LinuxBuild system.NET and MSbuild, as well as build scripts\n\nWindows autodetection\n\nThe autobuild process attempts to autodetect a suitable build method for C# using the following approach:\n\nInvoke dotnet build on the solution (.sln) or project (.csproj) file closest to the root.\n\nInvoke MSBuild.exe on the solution or project file closest to the root. If autobuild detects multiple solution or project files at the same (shortest) depth from the top level directory, it will attempt to build all of them.\n\nInvoke a script that looks like a build scriptâ€”build.bat, build.cmd, and build.exe (in that order).\n\nRunner requirements for C# on Windows\n\nFor .NET Core application development on self-hosted runners, the .NET SDK is required (for dotnet).\n\nFor .NET Framework application development, you will need Microsoft Build Tools (for msbuild) and Nuget CLI (for nuget).\n\nWindows runners require powershell.exe to be on the PATH.\n\nIf you plan to create CodeQL databases using build-mode: none, you also need to provide access to the public internet, or you must ensure that access to a private Nuget feed is available.\n\nLinux and macOS autodetection\n\nInvoke dotnet build on the solution (.sln) or project (.csproj) file closest to the root.\n\nInvoke MSbuild on the solution or project file closest to the root. If autobuild detects multiple solution or project files at the same (shortest) depth from the top level directory, it will attempt to build all of them.\n\nInvoke a script that looks like a build scriptâ€”build and build.sh (in that order).\n\nRunner requirements for C# on Linux and macOS\n\nFor .NET Core application development on self-hosted runners, the .NET SDK is required (for dotnet).\n\nFor .NET Framework application development, you will require Mono Runtime (to run mono, msbuild, or nuget).\n\nIf you plan to create CodeQL databases using build-mode: none, you also need to provide access to the public internet, or you must ensure that access to a private Nuget feed is available.\n\nBuilding Go\n\nCodeQL supports build modes autobuild or manual for Go code.\n\nAutobuild summary for Go\n\nSupported system typeSystem nameOperating systemWindows, macOS, and LinuxBuild systemGo modules, dep and Glide, as well as build scripts including Makefiles and Ninja scripts\n\nAutodetection for Go\n\nThe autobuild process attempts to autodetect a suitable way to install the dependencies needed by a Go repository before extracting all .go files:\n\nInvoke make, ninja, ./build or ./build.sh (in that order) until one of these commands succeeds and a subsequent go list ./... also succeeds, indicating that the needed dependencies have been installed.\n\nIf none of those commands succeeded, look for go.mod, Gopkg.toml or glide.yaml, and run go get (unless vendoring is in use), dep ensure -v or glide install respectively to try to install dependencies.\n\nFinally, if configurations files for these dependency managers are not found, rearrange the repository directory structure suitable for addition to GOPATH, and use go get to install dependencies. The directory structure reverts to normal after extraction completes.\n\nExtract all Go code in the repository, similar to running go build ./....\n\nBuilding Java and Kotlin\n\nCodeQL supports the following build modes.\n\nJava: none, autobuild, or manual\n\nKotlin: autobuild or manual\n\nWhen you first enable default setup for a repository, if only Java code is detected then the build mode is set to none. If Kotlin or a combination of Java and Kotlin code is detected, then the build mode is set to autobuild.\n\nIf you later add Kotlin code to a repository that uses the none build mode, CodeQL analysis reports a warning message explaining that Kotlin is not supported. You will need to disable default setup and re-enable it. When you re-enable default setup, the build mode will change to autobuild so that both languages can be analyzed. Alternatively, you can change to an advanced setup. For more information, see \"Warning: Detected X Kotlin files in your project that could not be processed without a build.\"\n\nNo build for Java\n\nCodeQL will attempt to run Gradle or Maven to extract accurate dependency information (but not to invoke a build), before creating a database from all Java files present. Every root Maven or Gradle project file (a build script without any build script present in an ancestor directory) is queried for dependency information, and more recent dependency versions are preferred if there is a clash. For information about the runner requirements to run Maven or Gradle, see \"Runner requirements for Java.\"\n\nAccuracy of no build analysis for Java\n\nCreating a CodeQL Java database without a build may produce less accurate results than using autobuild or manual build steps if:\n\nGradle or Maven build scripts cannot be queried for dependency information, and dependency guesses (based on Java package names) are inaccurate.\n\nThe repository normally generates code during the build process. This would be analyzed if you created the CodeQL database using a different mode.\n\nYou can ensure a more accurate analysis by taking the following steps:\n\nProvide access to the public internet or ensure that access to a private artifact repository is available.\n\nCheck whether the repository requires multiple versions of the same dependency. CodeQL can use only one version and usually chooses the newer version where there are multiple versions. This approach may not work for all repositories.\n\nCheck whether more than one version of the JDK API is required by different source Java files. When multiple versions are seen, CodeQL will use the highest version required by any build script. This may mean that some files that require a lower version of the JDK will be partially analyzed. For example, if some files require JDK 8 but a JDK 17 requirement is found in one or more build scripts, CodeQL will use JDK 17. Any files that require JDK 8 and could not be built using JDK 17 will be partially analyzed.\n\nAvoid colliding class names (for example, multiple files defining org.myproject.Test), otherwise this may cause missing method call targets, which has an impact on dataflow analysis.\n\nAutobuild summary for Java\n\nSupported system typeSystem nameOperating systemWindows, macOS, and Linux (no restriction)Build systemGradle, Maven and Ant\n\nAutodetection for Java\n\nThe autobuild process tries to determine the build system for Java codebases by applying this strategy:\n\nSearch for a build file in the root directory. Check for Gradle then Maven then Ant build files.\n\nRun the first build file found. If both Gradle and Maven files are present, the Gradle file is used.\n\nOtherwise, search for build files in direct subdirectories of the root directory. If only one subdirectory contains build files, run the first file identified in that subdirectory (using the same preference as for 1). If more than one subdirectory contains build files, report an error.\n\nRunner requirements for Java\n\nIf you're using self-hosted runners, the required version(s) of Java should be present:\n\nIf the runner will be used for analyzing repositories that need a single version of Java, then the appropriate JDK version needs to be installed, and needs to be present in the PATH variable (so that java and javac can be found).\n\nIf the runner will be used for analyzing repositories that need multiple versions of Java, then the appropriate JDK versions need to be installed, and can be specified via the toolchains.xml file. This is a configuration file, typically used by Apache Maven, that allows you to specify the location of the tools, the version of the tools, and any additional configuration that is required to use the tools. For more information, see \"Guide to Using Toolchains\" in the Apache Maven documentation.\n\nThe following executables will likely be required for a range of Java projects, and should be present in the PATH variable, but they will not be essential in all cases:\n\nmvn (Apache Maven)\n\ngradle (Gradle)\n\nant (Apache Ant)\n\nYou will also need to install the build system (for example make, cmake, bazel) and utilities (such as python, perl, lex, and yacc) that your projects depend on.\n\nWindows runners require powershell.exe to be on the PATH.\n\nBuilding Swift\n\nCodeQL supports build modes autobuild or manual for Swift code.\n\nAutobuild summary for Swift\n\nSupported system typeSystem nameOperating systemmacOSBuild systemXcode\n\nThe autobuild process tries to build the biggest target from an Xcode project or workspace.\n\nCode scanning of Swift code uses macOS runners by default. Since GitHub-hosted macOS runners are more expensive than Linux and Windows runners, we recommend that you build only the code that you want to analyze. For more information about pricing for GitHub-hosted runners, see \"About billing for GitHub Actions.\"\n\nCode scanning of Swift code is not supported for runners that are part of an Actions Runner Controller (ARC), because ARC runners only use Linux and Swift requires macOS runners. However, you can have a mixture of both ARC runners and self-hosted macOS runners. For more information, see \"About Actions Runner Controller.\"\n\nCustomizing Swift compilation in a CodeQL analysis workflow\n\nxcodebuild and swift build are both supported for Swift builds. We recommend only targeting one architecture during the build. For example, ARCH=arm64 for xcodebuild, or --arch arm64 for swift build.\n\nYou can pass the archive and test options to xcodebuild. However, the standard xcodebuild command is recommended as it should be the fastest, and should be all that CodeQL requires for a successful scan.\n\nFor Swift analysis, you must always explicitly install dependencies managed via CocoaPods or Carthage before generating the CodeQL database."
    }
}