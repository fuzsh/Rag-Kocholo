{
    "id": "dbpedia_8583_2",
    "rank": 40,
    "data": {
        "url": "https://cloud.google.com/vertex-ai/docs/training/create-custom-job",
        "read_more_link": "",
        "language": "en",
        "title": "Create custom training jobs",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/cloud-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/vertex-ai/docs/training/create-custom-job",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\nCustom training jobs (CustomJob resources in the Vertex AI API) are the basic way to run your custom machine learning (ML) training code in Vertex AI.\n\nBefore you submit a job\n\nBefore you create a CustomJob in Vertex AI, you must create a Python training application or a custom container image to define the training code and dependencies you want to run on Vertex AI.\n\nWe recommend that you use the Google Cloud CLI's autopackaging feature, described in a later section of this guide, to create a Docker container image from code on your local machine, push this container image to Artifact Registry, and create a CustomJob, all with a single command.\n\nOtherwise, you must manually create a Python training application or a custom container image.\n\nIf you're not sure which of these options to choose, refer to the training code requirements to learn more.\n\nWhat a custom job includes\n\nWhen you create a custom job, you specify settings that Vertex AI needs to run your training code, including:\n\nOne worker pool for single-node training (WorkerPoolSpec), or multiple worker pools for distributed training\n\nOptional settings for configuring job scheduling (Scheduling), setting certain environment variables for your training code, using a custom service account, and using VPC Network Peering\n\nWithin the worker pool(s), you can specify the following settings:\n\nMachine types and accelerators\n\nConfiguration of what type of training code the worker pool runs: either a Python training application (PythonPackageSpec) or a custom container (ContainerSpec)\n\nYou can also configure custom jobs to run on a persistent resource instead of creating new compute resources during job startup. To learn more about persistent resource, see Overview of persistent resource.\n\nConfigure distributed training\n\nYou can configure a CustomJob for distributed training by specifying multiple worker pools.\n\nMost examples on this page show single-replica training jobs with one worker pool. To modify them for distributed training:\n\nUse your first worker pool to configure your primary replica, and set the replica count to 1.\n\nAdd more worker pools to configure worker replicas, parameter server replicas, or evaluator replicas, if your machine learning framework supports these additional cluster tasks for distributed training.\n\nLearn more about using distributed training.\n\nCreate a CustomJob\n\nTo create a CustomJob, follow the instructions in one of the following tabs, depending on what tool you want to use. If you use the gcloud CLI, you can use a single command to autopackage training code on your local machine into a Docker container image, push the container image to Artifact Registry, and create a CustomJob. Other options assume you have already created a Python training application or custom container image.\n\ngcloud\n\nThe following examples use the gcloud ai custom-jobs create command.\n\nIf your training code is on your local computer, we recommend that you follow the With autopackaging section. Alternatively, if you have already created a Python training application or custom container image, then skip ahead to the Without autopackaging section.\n\nWith autopackaging\n\nIf you have training code on your local computer, you can use a single command to do the following:\n\nBuild a custom Docker image based on your code.\n\nPush the image to Artifact Registry.\n\nStart a CustomJob based on the image.\n\nThe result is similar to creating a CustomJob using any other custom container; you can use this version of the command if it is convenient for your workflow.\n\nBefore you begin\n\nSince this version of the command builds and pushes a Docker image, you must perform the following configuration on your local computer:\n\nInstall Docker Engine.\n\nIf you are using Linux, configure Docker so you can run it without sudo.\n\nEnable the Container Registry API.\n\nEnable the API\n\nConfigure authentication for Docker, so that you can push Docker images to Artifact Registry:\n\ngcloud auth configure-docker\n\nBuild and push the Docker image, and create a CustomJob\n\nThe following command builds a Docker image based on a prebuilt training container image and your local Python code, pushes the image to Artifact Registry, and creates a CustomJob.\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,executor-image-uri=EXECUTOR_IMAGE_URI,local-package-path=WORKING_DIRECTORY,script=SCRIPT_PATH\n\nReplace the following:\n\nLOCATION: The region where the container or Python package will be run.\n\nJOB_NAME: Required. A display name for the CustomJob.\n\nMACHINE_TYPE: The type of the machine. Refer to available machine types for training.\n\nREPLICA_COUNT: The number of worker replicas to use. In most cases, set this to 1 for your first worker pool.\n\nEXECUTOR_IMAGE_URI: The URI of the container image that runs the provided code. Refer to the available prebuilt containers for training.\n\nThis image acts as the base image for the new Docker image that you are building with this command.\n\nWORKING_DIRECTORY: A directory in your local file system containing the entry point script that runs your training code (see the following list item).\n\nYou can use the parent directory of the script, or a higher-level directory. You might want to use a higher-level directory in order to specify a fully-qualified Python module name (see the following list item). You might also want to use a higher-level directory if it contains a requirements.txt or setup.py file. To learn more, see Install dependencies.\n\nNote that even if you specify a higher-level directory, this command only copies the parent directory of your entry point script to the Docker image.\n\nSCRIPT_PATH: The path, relative to WORKING_DIRECTORY on your local file system, to the script that is the entry point for your training code. This can be a Python script (ending in .py) or a Bash script.\n\nFor example, if you want to run /hello-world/trainer/task.py and WORKING_DIRECTORY is /hello-world, then use trainer/task.py for this value.\n\nUse python-module instead of script\n\nYou can optionally replace script=SCRIPT_PATH with python-module=PYTHON_MODULE to specify the name of a Python module in WORKING_DIRECTORY to run as the entry point for training. For example, instead of script=trainer/task.py, you might specify python-module=trainer.task.\n\nIn this case, the resulting Docker container loads your code as a module rather than as a script. You likely want to use this option if your entry point script imports other Python modules in WORKING_DIRECTORY.\n\nInstall dependencies\n\nWhen using autopackaging, you can install Python dependencies in your container in the same ways that are available when you use the gcloud CLI's local-run command. To learn about the various ways to install Python dependencies, read the Install dependencies section of the guide to the local-run command.\n\nThe syntax for specifying dependencies differs slightly when you use autopackaging compared to when you use the local-run command. Instead of using command-line flags to specify dependencies, you must use options in the value of the --worker-pool-spec flag. Additionally, values within these options must be separated by semicolons rather than commas. Specifically, the syntax:\n\nInstead of the local-run command's --local-package-path flag, use the local-package-path option in the value of the --worker-pool-spec flag. If the working directory that you specify with this option contains a requirements.txt or setup.py file, autopackaging installs dependencies based on this file.\n\nThe preceding example demonstrates this syntax.\n\n(Optional) Instead of the --requirements flag, use the requirements option in the value of the --worker-pool-spec flag. Instead of separating PyPI dependencies with commas, use semicolons.\n\n(Optional) Instead of the --extra-packages flag, use the extra-packages option in the value of the --worker-pool-spec flag. Instead of separating local dependencies with commas, use semicolons.\n\n(Optional) Instead of the --extra-dirs flag, use the extra-dirs option in the value of the --worker-pool-spec flag. Instead of separating directory paths with commas, use semicolons.\n\nThe following example shows how you might install dependencies using all the optional techniques. (You can specify any subset of them.) To demonstrate the semicolon syntax, the example specifies two values for each option. To reduce the length of the example, other --worker-pool-spec options are replaced with [...].\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --worker-pool-spec=[...],requirements=PYPI_DEP_1;PYPI_DEP_2,extra-packages=LOCAL_DEP_1;LOCAL_DEP_2,extra-dirs=EXTRA_DIR_1;EXTRA_DIR_2\n\nTo learn about appropriate values for these placeholders, see \"Install dependencies\" in the guide to the local-run command.\n\nWithout autopackaging\n\nIf you don't use autopackaging, you can create a CustomJob with a command similar to one of the following. Depending on whether you have created a Python training application or a custom container image, choose one of the following tabs:\n\nPython training app\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --python-package-uris=PYTHON_PACKAGE_URIS \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,executor-image-uri=EXECUTOR_IMAGE_URI,python-module=PYTHON_MODULE\n\nReplace the following:\n\nLOCATION: The region where the container or Python package will be run.\n\nJOB_NAME: Required. A display name for the CustomJob.\n\nPYTHON_PACKAGE_URIS: Comma-separated list of Cloud Storage URIs specifying the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.\n\nMACHINE_TYPE: The type of the machine. Refer to available machine types for training.\n\nREPLICA_COUNT: The number of worker replicas to use. In most cases, set this to 1 for your first worker pool.\n\nEXECUTOR_IMAGE_URI: The URI of the container image that runs the provided code. Refer to the available prebuilt containers for training.\n\nPYTHON_MODULE: The Python module name to run after installing the packages.\n\nCustom container image\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,container-image-uri=CUSTOM_CONTAINER_IMAGE_URI\n\nReplace the following:\n\nLOCATION: The region where the container or Python package will be run.\n\nJOB_NAME: Required. A display name for the CustomJob.\n\nMACHINE_TYPE: The type of the machine. Refer to available machine types for training.\n\nREPLICA_COUNT: The number of worker replicas to use. In most cases, set this to 1 for your first worker pool.\n\nCUSTOM_CONTAINER_IMAGE_URI: The URI of a container image in Artifact Registry, Container Registry, or Docker Hub that is to be run on each worker replica.\n\nDistributed training\n\nTo perform distributed training, specify the --worker-pool-spec flag multiple times, once for each worker pool.\n\nIf you are using autopackaging, then you must only specify local-package-path, script, and other options related to autopackaging in the first worker pool. Omit fields related to your training code in subsequent worker pools, which will all use the same training container built by autopackaging.\n\nFor example, the following command adapts an earlier autopackaging example to use a second worker pool:\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,executor-image-uri=EXECUTOR_IMAGE_URI,local-package-path=WORKING_DIRECTORY,script=SCRIPT_PATH \\ --worker-pool-spec=machine-type=SECOND_POOL_MACHINE_TYPE,replica-count=SECOND_POOL_REPLICA_COUNT\n\nIf you aren't using autopackaging, then specify each worker pool completely and independently; do not omit any fields.\n\nThe following commands adapt earlier examples to use a second worker pool:\n\nPython training app\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --python-package-uris=PYTHON_PACKAGE_URIS \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,executor-image-uri=EXECUTOR_IMAGE_URI,python-module=PYTHON_MODULE \\ --worker-pool-spec=machine-type=SECOND_POOL_MACHINE_TYPE,replica-count=SECOND_POOL_REPLICA_COUNT,executor-image-uri=SECOND_POOL_EXECUTOR_IMAGE_URI,python-module=SECOND_POOL_PYTHON_MODULE\n\nCustom container image\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --worker-pool-spec=machine-type=MACHINE_TYPE,replica-count=REPLICA_COUNT,container-image-uri=CUSTOM_CONTAINER_IMAGE_URI \\ --worker-pool-spec=machine-type=SECOND_POOL_MACHINE_TYPE,replica-count=SECOND_POOL_REPLICA_COUNT,container-image-uri=SECOND_POOL_CUSTOM_CONTAINER_IMAGE_URI\n\nAdvanced configuration\n\nIf you want to specify configuration options that are not available in the preceding examples, you can use the --config flag to specify the path to a config.yaml file in your local environment that contains the fields of CustomJobSpec. For example:\n\ngcloud ai custom-jobs create \\ --region=LOCATION \\ --display-name=JOB_NAME \\ --config=config.yaml\n\nSee an example of a config.yaml file.\n\nConsole\n\nIn the Google Cloud console, you can't create a CustomJob resource directly. However, you can create a TrainingPipeline resource that creates a CustomJob.\n\nThe following instructions describe how to create a TrainingPipeline that creates a CustomJob and doesn't do anything else. If you want to use additional TrainingPipeline features, like training with a managed dataset or creating a Model resource at the end of training, read Creating training pipelines.\n\nIn the Google Cloud console, in the Vertex AI section, go to the Training pipelines page.\n\nGo to Training pipelines\n\nClick add_box Create to open the Train new model pane.\n\nOn the Training method step, specify the following settings:\n\nIn the Dataset drop-down list, select No managed dataset.\n\nSelect Custom training (advanced).\n\nClick Continue.\n\nOn the Model details step, choose Train new model or Train new version. If you select train new model, enter a name of your choice, MODEL_NAME, for your model. Click Continue.\n\nOn the Training container step, specify the following settings:\n\nSelect whether to use a Prebuilt container or a Custom container for training.\n\nDepending on your choice, do one of the following:\n\nIf you want to use a prebuilt container for training, then provide Vertex AI with information it needs to use the training package that you have uploaded to Cloud Storage:\n\nUse the Model framework and Model framework version drop-down lists to specify the prebuilt container that you want to use.\n\nIn the Package location field, specify the Cloud Storage URI of the Python training application that you have created and uploaded. This file usually ends with .tar.gz.\n\nIn the Python module field, enter the module name of your training application's entry point.\n\nIf you want to use a custom container for training, then in the Container image field, specify the Artifact Registry or Docker Hub URI of your container image.\n\nIn the Model output directory field, you may specify the Cloud Storage URI of a directory in a bucket that you have access to. The directory does not need to exist yet.\n\nThis value gets passed to Vertex AI in the baseOutputDirectory API field, which sets several environment variables that your training application can access when it runs.\n\nOptional: In the Arguments field, you can specify arguments for Vertex AI to use when it starts running your training code. The maximum length for all arguments combined is 100,000 characters. The behavior of these arguments differs depending on what type of container you are using:\n\nIf you are using a prebuilt container, then Vertex AI passes the arguments as command-line flags to your Python module.\n\nIf you are using a custom container, then Vertex AI overrides your container's CMD instruction with the arguments.\n\nClick Continue.\n\nOn the Hyperparameter tuning step, make sure that the Enable hyperparameter tuning checkbox is not selected. Click Continue.\n\nOn the Compute and pricing step, specify the following settings:\n\nIn the Region drop-down list, select a \"region that supports custom training\"\n\nIn the Worker pool 0 section, specify compute resources to use for training.\n\nIf you specify accelerators, make sure the type of accelerator that you choose is available in your selected region.\n\nIf you want to perform distributed training, then click Add more worker pools and specify an additional set of compute resources for each additional worker pool that you want.\n\nClick Continue.\n\nOn the Prediction container step, select No prediction container.\n\nClick Start training to start the custom training pipeline.\n\nREST\n\nBefore using any of the request data, make the following replacements:\n\nLOCATION: The region where the container or Python package will be run.\n\nPROJECT_ID: Your project ID.\n\nJOB_NAME: Required. A display name for the CustomJob.\n\nDefine the custom training job:\n\nMACHINE_TYPE: The type of the machine. Refer to available machine types for training.\n\nACCELERATOR_TYPE: (Optional.) The type of accelerator to attach to the job.\n\nACCELERATOR_COUNT: (Optional.) The number of accelerators to attach to the job.\n\nDISK_TYPE: (Optional.) The type of the boot disk to use for the job, either pd-standard (default) or pd-ssd. Learn more about disk types.\n\nDISK_SIZE: (Optional.) The size in GB of the boot disk to use for the job. The default value is 100.\n\nREPLICA_COUNT: The number of worker replicas to use. In most cases, set this to 1 for your first worker pool.\n\nIf your training application runs in a custom container, specify the following:\n\nCUSTOM_CONTAINER_IMAGE_URI: The URI of a container image in Artifact Registry, Container Registry, or Docker Hub that is to be run on each worker replica.\n\nCUSTOM_CONTAINER_COMMAND: (Optional.) The command to be invoked when the container is started. This command overrides the container's default entrypoint.\n\nCUSTOM_CONTAINER_ARGS: (Optional.) The arguments to be passed when starting the container.\n\nIf your training application is a Python package that runs in a prebuilt container, specify the following:\n\nEXECUTOR_IMAGE_URI: The URI of the container image that runs the provided code. Refer to the available prebuilt containers for training.\n\nPYTHON_PACKAGE_URIS: Comma-separated list of Cloud Storage URIs specifying the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.\n\nPYTHON_MODULE: The Python module name to run after installing the packages.\n\nPYTHON_PACKAGE_ARGS: (Optional.) Command-line arguments to be passed to the Python module.\n\nLearn about job scheduling options.\n\nTIMEOUT: (Optional.) The maximum running time for the job.\n\nSpecify the LABEL_NAME and LABEL_VALUE for any labels that you want to apply to this custom job.\n\nHTTP method and URL:\n\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/customJobs\n\nRequest JSON body:\n\n{ \"displayName\": \"JOB_NAME\", \"jobSpec\": { \"workerPoolSpecs\": [ { \"machineSpec\": { \"machineType\": MACHINE_TYPE, \"acceleratorType\": ACCELERATOR_TYPE, \"acceleratorCount\": ACCELERATOR_COUNT }, \"replicaCount\": REPLICA_COUNT, \"diskSpec\": { \"bootDiskType\": DISK_TYPE, \"bootDiskSizeGb\": DISK_SIZE }, // Union field task can be only one of the following: \"containerSpec\": { \"imageUri\": CUSTOM_CONTAINER_IMAGE_URI, \"command\": [ CUSTOM_CONTAINER_COMMAND ], \"args\": [ CUSTOM_CONTAINER_ARGS ] }, \"pythonPackageSpec\": { \"executorImageUri\": EXECUTOR_IMAGE_URI, \"packageUris\": [ PYTHON_PACKAGE_URIS ], \"pythonModule\": PYTHON_MODULE, \"args\": [ PYTHON_PACKAGE_ARGS ] } // End of list of possible types for union field task. } // Specify one workerPoolSpec for single replica training, or multiple workerPoolSpecs // for distributed training. ], \"scheduling\": { \"timeout\": TIMEOUT } }, \"labels\": { LABEL_NAME_1\": LABEL_VALUE_1, LABEL_NAME_2\": LABEL_VALUE_2 } }\n\nTo send your request, choose one of these options:\n\ncurl\n\nSave the request body in a file named request.json, and execute the following command:\n\ncurl -X POST \\\n\n-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n\n-H \"Content-Type: application/json; charset=utf-8\" \\\n\n-d @request.json \\\n\n\"https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/customJobs\"\n\nPowerShell\n\nSave the request body in a file named request.json, and execute the following command:\n\n$cred = gcloud auth print-access-token\n\n$headers = @{ \"Authorization\" = \"Bearer $cred\" }\n\nInvoke-WebRequest `\n\n-Method POST `\n\n-Headers $headers `\n\n-ContentType: \"application/json; charset=utf-8\" `\n\n-InFile request.json `\n\n-Uri \"https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/customJobs\" | Select-Object -Expand Content\n\nThe response contains information about specifications as well as the TRAININGPIPELINE_ID.\n\nResponse\n\n{ \"name\": \"projects/PROJECT_ID/locations/LOCATION/customJobs/JOB_ID\", \"displayName\": \"JOB_NAME\", \"trainingTaskInputs\": { \"workerPoolSpecs\": [ { \"machineSpec\": { \"machineType\": \"n1-standard-4\" }, \"replicaCount\": \"1\", \"pythonPackageSpec\": { \"executorImageUri\": \"us-docker.pkg.dev/vertex-ai/training/training-tf-cpu.2-1:latest\", \"packageUris\": [ \"gs://BUCKET_NAME/training/hello-custom-training-1.0.tar.gz\" ], \"pythonModule\": \"trainer.task\", \"args\": [ \"--model-dir=gs://BUCKET_NAME/output/\" ] } } ] }, \"state\": \"JOB_STATE_PENDING\", \"createTime\": \"2020-09-15T19:09:54.342080Z\", \"startTime\": \"2020-09-15T19:13:42.991045Z\", }\n\nJava\n\nBefore trying this sample, follow the Java setup instructions in the Vertex AI quickstart using client libraries. For more information, see the Vertex AI Java API reference documentation.\n\nTo authenticate to Vertex AI, set up Application Default Credentials. For more information, see Set up authentication for a local development environment.\n\nimport com.google.cloud.aiplatform.v1.AcceleratorType; import com.google.cloud.aiplatform.v1.ContainerSpec; import com.google.cloud.aiplatform.v1.CustomJob; import com.google.cloud.aiplatform.v1.CustomJobSpec; import com.google.cloud.aiplatform.v1.JobServiceClient; import com.google.cloud.aiplatform.v1.JobServiceSettings; import com.google.cloud.aiplatform.v1.LocationName; import com.google.cloud.aiplatform.v1.MachineSpec; import com.google.cloud.aiplatform.v1.WorkerPoolSpec; import java.io.IOException; // Create a custom job to run machine learning training code in Vertex AI public class CreateCustomJobSample { public static void main(String[] args) throws IOException { // TODO(developer): Replace these variables before running the sample. String project = \"PROJECT\"; String displayName = \"DISPLAY_NAME\"; // Vertex AI runs your training application in a Docker container image. A Docker container // image is a self-contained software package that includes code and all dependencies. Learn // more about preparing your training application at // https://cloud.google.com/vertex-ai/docs/training/overview#prepare_your_training_application String containerImageUri = \"CONTAINER_IMAGE_URI\"; createCustomJobSample(project, displayName, containerImageUri); } static void createCustomJobSample(String project, String displayName, String containerImageUri) throws IOException { JobServiceSettings settings = JobServiceSettings.newBuilder() .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\") .build(); String location = \"us-central1\"; // Initialize client that will be used to send requests. This client only needs to be created // once, and can be reused for multiple requests. try (JobServiceClient client = JobServiceClient.create(settings)) { MachineSpec machineSpec = MachineSpec.newBuilder() .setMachineType(\"n1-standard-4\") .setAcceleratorType(AcceleratorType.NVIDIA_TESLA_T4) .setAcceleratorCount(1) .build(); ContainerSpec containerSpec = ContainerSpec.newBuilder().setImageUri(containerImageUri).build(); WorkerPoolSpec workerPoolSpec = WorkerPoolSpec.newBuilder() .setMachineSpec(machineSpec) .setReplicaCount(1) .setContainerSpec(containerSpec) .build(); CustomJobSpec customJobSpecJobSpec = CustomJobSpec.newBuilder().addWorkerPoolSpecs(workerPoolSpec).build(); CustomJob customJob = CustomJob.newBuilder() .setDisplayName(displayName) .setJobSpec(customJobSpecJobSpec) .build(); LocationName parent = LocationName.of(project, location); CustomJob response = client.createCustomJob(parent, customJob); System.out.format(\"response: %s\\n\", response); System.out.format(\"Name: %s\\n\", response.getName()); } } }\n\nWhat's next\n\nLearn how to pinpoint training performance bottlenecks to train models faster and cheaper using Cloud Profiler.\n\nSee Create training pipelines to learn how to create training pipelines to run custom training applications on Vertex AI."
    }
}