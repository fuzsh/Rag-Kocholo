{
    "id": "dbpedia_8583_2",
    "rank": 46,
    "data": {
        "url": "https://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping",
        "read_more_link": "",
        "language": "en",
        "title": "Package Source Mapping",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_pmui_status_off_annotated.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_vsoptions_nomappings.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_vsoptions_addmappingopened.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_vsoptions_addmappingfilled.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_vsoptions_addmappingcompleted.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/packagesourcemapping_pmui_status_mapped.png",
            "https://learn.microsoft.com/en-us/nuget/consume-packages/media/package-pattern-examples.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-02-01T00:33:00+00:00",
        "summary": "",
        "meta_description": "Describes package source mapping functionality and how to onboard",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping",
        "text": "Package Source Mapping is a tool that can be used to improve your supply chain security, especially if you use a mix of public and private package sources.\n\nBy default, NuGet will search all configured package sources when it needs to download a package. When a package exists on multiple sources, it may not be deterministic which source the package will be downloaded from. With Package Source Mapping, you can filter, per package, which source(s) NuGet will search.\n\nWe also have suggestions for other best practices to help you fortify your supply chain against attacks.\n\nPackage Source Mapping was added in NuGet 6.0. Starting with Visual Studio 17.5, you can add and remove Package Source Mappings with the Visual Studio Options Dialog.\n\nVisual Studio support\n\nVisual Studio Package Source Mapping Support in Tools -> Options Support in Package Manager UI 17.0 - 17.4 â Available â Not available â Not available 17.5 â Available â Available â Not available 17.7 Preview 3 â Available â Available â Status displayed\n\nThe feature is available across all NuGet integrated tooling.\n\nVisual Studio 2022 and later\n\n.NET SDK 6.0.100 and later\n\nnuget.exe 6.0.0 and later\n\nOlder tooling will ignore the Package Source Mapping configuration. To use this feature, ensure all your build environments use compatible tooling versions.\n\nPackage Source Mappings will apply to all project types â including .NET Framework â as long as compatible tooling is used.\n\nVideo walkthrough\n\nFor a video-based overview of the Package Source Mapping feature, consider watching the Secure your NuGet packages with Package Source Mapping video on YouTube.\n\nEnabling Package Source Mapping\n\nTo opt into this feature, you must have a nuget.config file. Having a single nuget.config at the root of your repository is considered a best practice. See nuget.config documentation to learn more.\n\nEnable by using Visual Studio Options Dialog\n\nOpen your solution in Visual Studio.\n\nNavigate to the Package Source Mappings Options Dialog.\n\nFrom the Package Manager UI\n\nSelect a package from the list to show it in the Details Pane.\n\nPress the Configure button to open the Package Source Mappings options page.\n\nFrom the Visual Studio Options Dialog\n\nGo to the Tools menu in the main Visual Studio toolbar, and choose NuGet Package Manager -> Package Manager Settings.\n\nNavigate to the Package Source Mappings page.\n\nPress the Add button in the Package Source Mappings page to open the Add Package Source Mappings dialog.\n\n4. Enter a Package ID or Package Pattern, and select one or more package source(s) by toggling the checkbox for your desired source(s).\n\nThe Package Source Mapping options page will show the newly created source mapping.\n\nPress OK on the Options Dialog to save changes to the applicable nuget.config.\n\nThe NuGet Package Manager window will refresh and reflect the new status of the selected package's source mappings.\n\nEnable by manually editing nuget.config\n\nDeclare your desired package sources in your nuget.config file.\n\nFollowing your source declarations, add a <packageSourceMapping> element that specifies the desired mappings for each source.\n\nDeclare exactly one packageSource element for each source in use.\n\nAdd as many patterns as you find necessary.\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <!-- Define the package sources, nuget.org and contoso.com. --> <!-- `clear` ensures no additional sources are inherited from another config file. --> <packageSources> <clear /> <!-- `key` can be any identifier for your source. --> <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" /> <add key=\"contoso.com\" value=\"https://contoso.com/packages/\" /> </packageSources> <!-- Define mappings by adding package patterns beneath the target source. --> <!-- Contoso.* packages and NuGet.Common will be restored from contoso.com, everything else from nuget.org. --> <packageSourceMapping> <!-- key value for <packageSource> should match key values from <packageSources> element --> <packageSource key=\"nuget.org\"> <package pattern=\"*\" /> </packageSource> <packageSource key=\"contoso.com\"> <package pattern=\"Contoso.*\" /> <package pattern=\"NuGet.Common\" /> </packageSource> </packageSourceMapping> </configuration>\n\nPackage Source Mapping settings are applied following nuget.config precedence rules when multiple nuget.config files at various levels (machine-level, user-level, repo-level) are present.\n\nPackage Source Mapping rules\n\nFor maximum flexibility and control, NuGet requires that all packages match a package pattern through a well defined precedence.\n\nPackage Pattern requirements\n\nAll requested packages must map to one or more sources by matching a defined package pattern. In other words, once you have defined a packageSourceMapping element you must explicitly define which sources every package - including transitive packages - will be restored from.\n\nBoth top-level and transitive packages must match defined patterns. There is no requirement that a top level package and its dependencies come from the same source.\n\nThe same ID pattern can be defined on multiple sources, allowing matching package IDs to be restored from any of the feeds that define the pattern. However, this isn't recommended due to the impact on restore predictability (a given package could come from multiple sources). This may be a valid configuration if you trust all respective sources.\n\nPackage Pattern Syntax\n\nPattern Example syntax Description Package prefix pattern *, NuGet.* Must end with a *, where * matches 0 or more characters. * is the shortest allowed prefix pattern and matches all packages ids. Package ID pattern NuGet.Common, Contoso.Contracts Exact package ID.\n\nPackage Pattern precedence\n\nWhen multiple unique patterns match a package ID, the most specific one will be preferred. Package ID patterns always have the highest precedence while the generic * always has the lowest precedence. For package prefix patterns, the longest has precedence.\n\nSetting default sources\n\nThe * pattern can be used to make a declare a de-facto default source - meaning any package that doesn't match other specified patterns will be restored from that source without throwing an error. This configuration is advantageous if you primarily use packages from say, nuget.org, and only have a few internal packages, or use standard prefixes for all internal packages like Contoso.*.\n\nIf your team doesn't use standard prefixes for internal package IDs or vets nuget.org packages prior to installation, then making a private source the default will suit your needs better.\n\nGet started\n\nThere are 2 ways you can fully onboard your repository, manually or using the NuGet.PackageSourceMapper tool.\n\nManual onboarding\n\nFor manual onboarding you may take the following steps:\n\nDeclare a new global packages folder for your repo.\n\nRun dotnet restore to restore dependencies.\n\nRun dotnet list package --include-transitive to view all top-level and transitive packages in your solution.\n\nFor .NET framework projects using packages.config, the packages.config file will have a flat list of all direct and transitive packages.\n\nDefine mappings such that every package ID in your solution - including transitive packages - matches a pattern for the target source.\n\nRun dotnet nuget locals global-packages -c to clear global-packages directory.\n\nRun restore to validate that you have configured your mappings correctly. If your mappings don't fully cover every package ID in your solution, the error messages will help you identify the issue.\n\nWhen restore succeeds, you are done! Optionally consider:\n\nSimplifying the configuration to fewer declarations by using broader package ID prefixes or setting a default source where possible.\n\nVerifying the source each package was restored from by checking the metadata files in the global packages folder or reviewing the restore logs.\n\nAutomated onboarding using tool\n\nMany repositories have a large number of packages and doing the work manually can be time consuming. The NuGet.PackageSourceMapper tool can automatically generate a NuGet.config for you, based on your project's known packages and sources.\n\nThe package source mapper tool requires you to have completed a successful package restore in which it will read each respective .nupkg.metadata file generated as part of your build to best understand how you map your respective packages and sources. Tool not only covers top dependencies it also considers all the transitive dependencies when generating mapping.\n\nTool has several option how to generate mapping pattern depending on your need, please check blog post and tool's readme instruction for more details."
    }
}