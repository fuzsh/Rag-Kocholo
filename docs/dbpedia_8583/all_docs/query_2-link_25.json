{
    "id": "dbpedia_8583_2",
    "rank": 25,
    "data": {
        "url": "https://scriptingosx.com/2020/02/wrangling-pythons/",
        "read_more_link": "",
        "language": "en",
        "title": "Wrangling Pythons",
        "top_image": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-Perseus.jpg?fit=800%2C557&ssl=1",
        "meta_img": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-Perseus.jpg?fit=800%2C557&ssl=1",
        "images": [
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-1.png?fit=248%2C248&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-Perseus.jpg?resize=800%2C510&ssl=1",
            "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2020/02/WranglingPython-InstallDevToolsDialog.png?w=660&ssl=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Author ab"
        ],
        "publish_date": "2020-02-11T13:47:34+00:00",
        "summary": "",
        "meta_description": "As I noted in my last Weekly News Summary, several open source projects for MacAdmins have completed their transition to Python 3. AutoPkg, JSSImport and outset announced Python 3 compatible versions last week and Munki already had the first Python 3 version last December. Why? Apple has included a version of Python 2 with Mac…",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/scriptingosx.com/wp-content/uploads/2019/11/cropped-NewShebang-2.png?fit=32%2C32&ssl=1",
        "meta_site_name": "Scripting OS X",
        "canonical_link": "https://scriptingosx.com/2020/02/wrangling-pythons/",
        "text": "As I noted in my last Weekly News Summary, several open source projects for MacAdmins have completed their transition to Python 3. AutoPkg, JSSImport and outset announced Python 3 compatible versions last week and Munki already had the first Python 3 version last December.\n\nWhy?\n\nApple has included a version of Python 2 with Mac OS X since 10.2 (Jaguar). Python 3.0 was released in 2008 and it was not fully backwards compatible with Python 2. For this reason, Python 2 was maintained and updated alongside Python 3 for a long time. Python 2 was finally sunset on January 1, 2020. Nevertheless, presumably because of the compatibility issues, Apple has always pre-installed Python 2 with macOS and still does so in macOS 10.15 Catalina. With the announcement of Catalina, Apple also announced that in a “future version of macOS” there will be no pre-installed Python of any version.\n\nScripting language runtimes such as Python, Ruby, and Perl are included in macOS for compatibility with legacy software. Future versions of macOS won’t include scripting language runtimes by default, and might require you to install additional packages. If your software depends on scripting languages, it’s recommended that you bundle the runtime within the app. (macOS 10.15 Catalina Release Notes)\n\nThis also applies to Perl and Ruby runtimes and other libraries. I will be focussing on Python because it is used more commonly for MacAdmin tools, but most of this post will apply equally to Perl and Ruby. Just mentally replace “Python” for your preferred language.\n\nThe final recommendation is what AutoPkg and Munki are following: they are bundling their own Python runtime.\n\nHow to get Python\n\nThere is a second bullet in the Catalina release notes, though:\n\nUse of Python 2.7 isn’t recommended as this version is included in macOS for compatibility with legacy software. Future versions of macOS won’t include Python 2.7. Instead, it’s recommended that you run python3 from within Terminal. (51097165)\n\nThis is great, right? Apple says there is a built-in Python 3! And it’s pre-installed? Just move all your scripts to Python 3 and you’ll be fine!\n\nUnfortunately, not quite. The python3 binary does exist on a ‘clean’ macOS, but it is only a stub tool, that will prompt a user to download and install the Command Line Developer Tools (aka “Developer Command Line Tools” or “Command Line Tools for Xcode”). This is common for many tools that Apple considers to be of little interest to ‘normal,’ non-developer users. Another common example is git.\n\nWhen you install Xcode, you will also get all the Command Line Developer Tools, including python3 and git. This is useful for developers, who may want to use Python scripts for build operation, or for individuals who just want to ‘play around’ or experiment with Python locally. For MacAdmins, it adds the extra burden of installing and maintaining either the Command Line Developer Tools or the full Xcode install.\n\nPython Versions, a multitude of Snakes\n\nAfter installing Xcode or the Command Line Developer Tools, you can check the version of python installed: (versions on macOS 10.15.3 with Xcode 11.3.1)\n\n> python --version Python 2.7.16 > python3 --version Python 3.7.3\n\nWhen you go on the download page for Python.org, you will get Python 3.8.1 (as of this writing). But, on that download page, you will also find download links for “specific versions” which include (as of this writing) versions 3.8.1, 3.7.6, 3.6.10, 3.5.9, and the deprecated 2.7.17.\n\nThe thing is, that Python isn’t merely split into two major release versions, which aren’t fully compatible with each other, but there are several minor versions of Python 3, which aren’t fully compatible with each other, but are still being maintained in parallel.\n\nDevelopers (individuals, teams, and organisations) that use Python will often hold on to a specific minor (and sometimes even patch) version for a project to avoid issues and bugs that might appear when changing the run-time.\n\nWhen you install the latest version of Munki, it will install a copy of the Python framework in /usr/local/munki/ and create a symbolic link to that python binary at /usr/local/munki/python. You can check its version as well:\n\n% /usr/local/munki/python --version Python 3.7.4\n\nAll the Python code files for Munki will have a shebang (the first line in the code file) of\n\n#!/usr/local/munki/python\n\nThis ensures that Munki code files use this particular instance of Python and no other copy of Python that may have been installed on the system.\n\nThe latest version of AutoPkg has a similar approach:\n\n> /usr/local/autopkg/python --version Python 3.7.5\n\nIn both cases the python binary is a symbolic link. This allows the developer to change the symbolic link to point to a different Python framework. The shebangs in the all the code files point to the symbolic link, which can be changed to point to a different Python framework.\n\nThis is useful for testing and debugging. Could MacAdmins use this to point both tools to the same Python framework? Should they?\n\nThe Bridge to macOS\n\nOn top of all these different versions of Python itself, many scripts, apps, and tools written in Python rely on ‘Python modules.’ These are libraries (or frameworks) of code for a certain task, that can be downloaded and included with a Python installation to extend the functionality of Python.\n\nThe most relevant of these modules for MacAdmins is the “Python Objective-C Bridge.” This module allows Python code to access and use the native macOS Cocoa and CoreFoundation Frameworks. This not only allows for macOS native GUI applications to be written in Python (e.g. AutoDMG and Munki’s Managed Software Center [update: MSC was re-written in Swift last year]), but also allows short scripts to access system functions. This is sometimes necessary to get a data that matches what macOS applications “see” rather than what the raw unix tools see.\n\nFor example, the defaults tool can be used to read the value of property lists on disk. But those might not necessarily reflect the actual preference value an application sees, because that value might be controlled by a different plist file or configuration profile.\n\n(Shameless self-promotion) Learn more about Property lists, Preferences and Profiles\n\nYou could build a tool with Swift or Objective-C that uses the proper frameworks to get the “real” preference value. Or you can use Python with the Objective-C bridge:\n\n#!/usr/bin/python from Foundation import CFPreferencesCopyAppValue print CFPreferencesCopyAppValue(\"idleTime\", \"com.apple.screensaver\")\n\nThree simple lines of Python code. This will work with the pre-installed Python 2.7, because Apple also pre-installs the Python Objective-C bridge with that. When you try this with the Developer Tools python3 you get an error:\n\nModuleNotFoundError: No module named 'Foundation'\n\nThis is because the Developer Tools do not include the Objective-C bridge in the installation. You could easily add it with:\n\n> sudo python3 -m pip install pyobjc\n\nBut again, while this command is “easy” enough for a single user on a single Mac, it is just the beginning of a Minoan labyrinth of management troubles.\n\nDevelopers and MacAdmins, have to care about the version of the Python they install, as well as the list of modules and their versions, for each Python version.\n\nIt is as if the Medusa head kept growing more smaller snakes for every snake you cut off.\n\n(Ok, I will ease off with Greek mythology metaphors.)\n\nYou can get a list of modules included with the AutoPkg and the Munki project with:\n\n> /usr/local/munki/python -m pip list > /usr/local/autopkg/python -m pip list\n\nYou will see that not only do Munki and AutoPkg include different versions of Python, but also a different list of modules. While Munki and AutoPkg share many modules, their versions might still differ.\n\nSnake Herding Solutions\n\nApple’s advice in the Catalina Release Notes is good advice:\n\nIt’s recommended that you bundle the runtime within the app.\n\nRather than the MacAdmin managing a single version of Python and all the modules for every possible solution, each tool or application should provide its own copy of Python and its required modules.\n\nIf you want to build your own Python bundle installer, you can use this script from Greg Neagle.\n\nThis might seem wasteful. A full Python 3 Framework uses about 80MB of disk space, plus some extra for the modules. But it is the safest way to ensure that the tool or application gets the correct version of Python and all the modules. Anything else will quickly turn into a management nightmare.\n\nThis is the approach that Munki and AutoPkg have chosen. But what about smaller, single script solutions? For example simple Python scripts like quickpkg or prefs-tool?\n\nShould I bundle my own Python framework with quickpkg or prefs-tool? I think that would be overkill and I am not planning to do that. I think the solution that Joseph Chilcote chose for the outset tool is a better approach for less complex Python scripts.\n\nIn this case, the project is written to run with Python 3 and generic enough to not require a specific version or extra modules. An admin who wants to use this script or tool, can change the shebang (the first line in the script) to point to either the Developer Tool python3, the python3 from the standard Python 3 installer or a custom Python version, such as the Munki python. A MacAdmin would have to ensure that the python binary in the shebang is present on the Mac when the tool runs.\n\nYou can also choose to provide your organization’s own copy Python with your chosen set of modules for all your management Python scripts and automations. You could build this with the relocatable Python tool and place it in a well-known location the clients. When updates for the Python run-time or modules are required, you can build and push them with your management system. (Thanks to Nathaniel Strauss for pointing out this needed clarifying.)\n\nWhen you build such scripts and tools, it is important to document which Python versions (and module versions) you have tested the tool with.\n\n(I still have to do that for my Python tools.)\n\nWhat about /usr/bin/env python?\n\nThe env command will determine the path to the python binary in the current environment. (i.e. using the current PATH) This is useful when the script has to run in various environments where the location of the python binary is unknown.\n\nThis is useful when developers want to use the same script in different environments across different computers, user accounts, and platforms. However, this renders the actual version of python that will interpret the script completely unpredictable.\n\nNot only is it impossible to predict which version of Python will interpret a script, but you cannot depend on any modules being installed (or their versions) either.\n\nFor MacAdmin management scripts and tools, a tighter control is necessary. You should use fixed, absolute paths in the shebang.\n\nConclusion\n\nManaging Python runtimes might seem like a hopeless sisyphean task. I believe Apple made the right choice to not pre-install Python any more. Whatever version and pre-selection of module versions Apple would have chosen, it would only have been the correct combination for a few Python solutions and developers.\n\nWhile it may seem wasteful to have a multitude of copies of the Python frameworks distributed through out the system, it is the easiest and most manageable solution to ensure that each tool or application works with the expected combination of run-time and modules."
    }
}