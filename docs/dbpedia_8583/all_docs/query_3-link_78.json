{
    "id": "dbpedia_8583_3",
    "rank": 78,
    "data": {
        "url": "https://docs.chocolatey.org/en-us/create/automatic-packages/",
        "read_more_link": "",
        "language": "en",
        "title": "Chocolatey Software Docs",
        "top_image": "https://docs.chocolatey.org/share-og.png",
        "meta_img": "https://docs.chocolatey.org/share-og.png",
        "images": [
            "https://docs.chocolatey.org/images/global-shared/logo.svg",
            "https://docs.chocolatey.org/images/global-shared/logo-square.svg",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinGlobalVariables.png",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinMain.png",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinSetVariables.png",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinVariables.png",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinJobSettings.png",
            "https://docs.chocolatey.org/images/chocopkgup/KetarinCustomCommand.png",
            "https://docs.chocolatey.org/images/automatic-packages/ketarin-jobs-advanced-settings.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Chocolatey Software"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Techniques for automatically updating Chocolatey packages when new version of application is released",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.chocolatey.org/en-us/create/automatic-packages/",
        "text": "Automatic Packaging\n\nAutomatic packaging is a process that package maintainers can run on their own to keep the packages they maintain up to date. It is not a required step for maintaining packages on the community feed (https://community.chocolatey.org/packages), but it is recommended you find a way to automate the delivery of packages to the community feed when there are updates if you are going to maintain more than 5 packages and you are not the software vendor for the packages you maintain.\n\nNOTE\n\nNot to be confused with the automatic package creation feature in Chocolatey for Business - that feature creates packages directly from software installer files. This feature is for package maintenance of existing packages on the community feed.\n\nThere are currently two methods that can be used to maintain automatic packages:\n\nRECOMMENDED - Using only PowerShell via Chocolatey Automatic Package Updater Module.\n\nDEPRECATED - Using Chocolatey Package Updater with 3rd party tool Ketarin.\n\nThe Chocolatey Automatic Package Updater Module is a PowerShell module which implements functions that can be used to automate Chocolatey package updates.\n\nCredits\n\nAU was created by Chocolatey community member Miodrag Milic. The original repository has been archived and is no longer receiving updates.\n\nDue to its widespread usage for many Chocolatey packages, we have forked the module into the chocolatey-au repository in the Chocolatey Community organisation where it will be maintained going forward.\n\nSetup\n\nFollow the instructions at the AU Wiki.\n\nWhen creating packages, do not use --auto as AU doesn’t use token replacement for updating packages, it replaces the xml elements and code directly.\n\nhttp://community.chocolatey.org/packages/ChocolateyPackageUpdater\n\nThe tool that accomplishes this process is known as chocopkgup (Chocolatey Package Updater). It is a free tool (unless you want to use it for uploads to somewhere other than community.chocolatey.org).\n\nLicensing\n\nCheck the license at http://realdimensions.net/licenses/chocolateypackageupdater/license.txt to be sure that it applies to you.\n\nBasically it boils down to this: if you want to use chocopkgup privately, you will need to pay for it. As long as you are publishing to community.chocolatey.org, the tool is completely free! The license does expire every once in awhile, but if you are keeping up on your chocolatey updates locally, you won’t even notice (cup all, remember?).\n\nCredits\n\nThis tool makes use of Ketarin. Ketarin is an awesome tool that helps chocopkgup accomplish its tasks.\n\nRequirements\n\nA Windows box somewhere - to run the updater on\n\nKetarin\n\nChocolatey Package Updater\n\nSetup\n\nFork chocolatey-packages-template and rename it to something like chocolatey-packages (on GitHub - go into Settings, Repository name and rename).\n\nClone the repo locally.\n\nInstall chocopkgup (which will install ketarin and nuget.commandline). choco install chocolateypackageupdater.\n\nCheck the config in $env:ChocolateyInstall\\lib\\ChocolateyPackageUpdater\\tools\\chocopkgup\\chocopkgup.exe.config. The PackagesFolder key should point to where your repository is located.\n\nCreate a scheduled task (in Windows). This is the command (edit the path to cmd.exe accordingly): C:\\Windows\\System32\\cmd.exe /c c:\\tools\\chocolateypackageupdater\\ketarinupdate.cmd\n\nAlternatively to stop the command window from opening on Windows, you can create a VBS script as well and put the path to the .vbs file instead of ketarinupdate.cmd as the command to run. The file should have the following:\n\nSet objShell = WScript.CreateObject(\"WScript.Shell\") objShell.Run(\"C:\\tools\\ChocolateyPackageUpdater\\ketarinupdate.cmd\"), 0, True\n\nChoose a schedule for the task. Some folks run the task about once an hour to catch updates as quickly as they happen.\n\nOpen Ketarin. Choose File –> Settings.\n\nNow Click Import…\n\nChoose setup/KetarinSettings.xml from the repo folder. This is going to add everything in that you will need for settings.\n\nClick on Global Variables. Ensure all of the variables are set appropriately.\n\nThis gets Ketarin all set up with a global command for all packages we create.\n\nNOTE: This has set up global commands for “Before updating an application” and “After updating an application”. Those should not need adjusting, however if you do, please be sure to export the settings again.\n\nCreate an Automatic Package\n\nPreferably you are taking an existing package that you have tested and converting it to an automatic package.\n\nCreate a package for automatic packaging\n\nWhen you are creating packages, you should ensure you are on the latest version of Chocolatey. This means you have the latest fixes to packaging templates and latest and greatest in the way of automation.\n\nEnsuring you are on the latest version of Chocolatey - choco upgrade chocolatey.\n\nOpen PowerShell (or cmd.exe) and head to the automatic package folder you are using. This should be “repolocation\\automatic”.\n\nRun choco new <name> --auto <Xref title=\"options]. You can use a different package template if you have those installed - see [new command” value=“choco-command-new” /> for all options or run choco new -?. For package templates, see how to create custom package templates.\n\nInspect the output. Merge in your existing package logic if you have an existing package you are converting.\n\nEnsure that checksumType and checksumType64 is sha256 as this is the type the updater will generate.\n\nMake any adjustments you need to the package to prepare for packaging.\n\nKetarin\n\nOpen Ketarin. Choose File –> Import…\n\nChoose ketarin/_KetarinChocolateyTemplate.xml from the repo folder.\n\nAnswer the questions. This will create a new job for Ketarin to check.\n\nOne important thing to keep in mind is that the name of the job needs to match the name of the package folder and nuspec exactly.\n\nRight click on that new job and select Edit. Take a look at the following:\n\nClick on Variables on the right of URL\n\nOn the left side you should see a variable for version and one for url64. Click on version.\n\nChoose the appropriate method for you. Here I’ve chosen Content from URL (start/end).\n\nEnter the URL for versioning information.\n\nIn the contents itself, highlight enough good information before a version to be able to select it uniquely during updates (but not so much it doesn’t work every time as the page changes). Click on Use selection as start.\n\nNow observe that it didn’t jump back too far.\n\nDo the same with the ending part, keeping in mind that this side doesn’t need to be too much because it is found AFTER the start. Once selected click on Use selection as end.\n\nIt should look somewhat similar to have is presented in the picture above.\n\nIf you have a 64bit url you want to get, do the same for the url64 variable.\n\nWhen all of this is good, click OK.\n\nClick OK again.\n\nNotes about tri-packages (meta/virtual aka *, *.install, and *.portable)\n\nUPDATE AUG 2016: This may no longer be true. Just set up three jobs.\n\nWhen you have the three packages, you should set up only two jobs, one for *.install and one for *.portable.\n\nIn whichever job the meta package points to, you should add a command to that like you did for the settings for all jobs in ketarin.\n\nClick on the Commands Tab and set Edit command for event to “Before updating an application”.\n\nAdd the following text (replace name with the actual name of the meta package folder):\n\nchocopkgup /p name /v {version} /u \"{preupdate-url}\" /u64 \"{url64}\" /pp \"{file}\" /c \"{Checksum}\" /c64 \"{Checksumx64}\" REM /disablepush\n\nCheck the bottom of this section to be sure it set to Command.\n\nTesting Ketarin/ChocoPkgUp:\n\nWe need to get a good idea of whether this will work or not.\n\nOpen a command line and type ketarin.\n\nOnce Ketarin opens, open global options (steps 8 and 11), go to Global Variables and set cscript to 1 instead of 2 so that it only goes as far as creating packages.\n\nFind your job, and right click -> Update. If everything is set good, in moments you will have a Chocolatey package in the folder you set under {PackagesFolder}\\_output, where {PackagesFolder} is the path you set in the course of the Setup section of this article.\n\nInspect the resulting Chocolatey package(s) for any issues.\n\nYou should also test the scheduled task works appropriately.\n\nTroubleshooting/Notes\n\nKetarin comes with a logging facility so you can see what it is doing. It’s under View –> Show Log.\n\nIn the top level folder for chocopkgup (in program data), we log what we receive from Ketarin as well and the process of putting together a package.\n\nThe name of the application in ketarin matches exactly that of the folder that is in the automatic packages folder.\n\nEvery once in awhile you want to look in Ketarin to see what jobs might be failing. Then figure out why.\n\nEvery once in awhile you will want to inspect the chocopkgupfolder to see if there are any packages that did not make it up for some reason or another and then upload them.\n\nIf the downloaded application/installer has not changed, the package will not be generated. Delete the files in the download location specified in Ketarin and try again.\n\nImportant notes for files hosted on SourceForge\n\nTry this first:\n\nIn advanced settings, ensure the user agent is chocolatey command line. This will allow ketarin to behave similarly to how Chocolatey does.\n\nIt isn’t uncommon that certain SorceForge mirrors go offline or are extremely slow because of overload. Thus it is not recommended to use direct mirror links (e. g. http://heanet.dl.sourceforge.net/project/…) in your chocolateyInstall.ps1 file, because this will frequently break your package and makes it unreliable. To avoid this, use the following convention for files hosted on SourceForge:\n\nDon’t use {{DownloadUrl}} and {{DownloadUrlx64}} in your chocolateyInstall.ps1 file, but use this instead (example of the app nomacs): $url = 'http://sourceforge.net/projects/nomacs/files/nomacs-{{PackageVersion}}/nomacs-setup-{{PackageVersion}}-x86.exe/download' and $url64 = 'http://sourceforge.net/projects/nomacs/files/nomacs-{{PackageVersion}}/nomacs-setup-{{PackageVersion}}-x64.exe/download' For other applications obviously you have to use the actual application/file names. Important is that you use {{PackageVersion}} and don’t use any direct links which include SourceForge mirrors."
    }
}