{
    "id": "dbpedia_8583_3",
    "rank": 42,
    "data": {
        "url": "https://almenscorner.io/simplifying-macos-app-management-with-intune-autopkg-tools/",
        "read_more_link": "",
        "language": "en",
        "title": "Simplify macOS App Management in Intune with AutoPkg Tools",
        "top_image": "https://almenscorner.io/content/images/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg",
        "meta_img": "https://almenscorner.io/content/images/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg",
        "images": [
            "https://almenscorner.io/content/images/size/w300/2023/08/almenscorner-1.png",
            "https://almenscorner.io/content/images/size/w300/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg 300w,                    /content/images/size/w600/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg 600w,                    /content/images/size/w1000/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg 1000w,                    /content/images/size/w2000/2024/03/_59028bba-9bae-49d3-ac9c-91d39df16767.jpeg 2000w",
            "https://almenscorner.io/content/images/size/w100/2023/08/IMG_0023--2-.png",
            "https://almenscorner.io/content/images/2024/03/import.png",
            "https://almenscorner.io/content/images/2024/03/promote.png",
            "https://almenscorner.io/content/images/2024/03/remove.png",
            "https://almenscorner.io/content/images/2024/03/error.png",
            "https://almenscorner.io/content/images/2024/03/actionsecrets.png",
            "https://almenscorner.io/content/images/2024/03/Screenshot-2024-03-30-at-12.08.37.png",
            "https://almenscorner.io/content/images/2024/03/Screenshot-2024-03-30-at-12.07.03.png",
            "https://almenscorner.io/content/images/2024/03/Screenshot-2024-03-30-at-11.59.58.png",
            "https://almenscorner.io/content/images/2024/03/artifact.png",
            "https://almenscorner.io/content/images/2024/03/Capture-2024-03-31-103804.png",
            "https://almenscorner.io/content/images/size/w600/2024/02/Screenshot-2024-02-20-at-11.48.27.png",
            "https://almenscorner.io/content/images/size/w600/2023/08/intuneuploader.jpg",
            "https://almenscorner.io/content/images/size/w600/2023/06/mountains-valley-scenery-digital-art-4k-wallpaper-uhdpaper.com-457@0@f.jpg",
            "https://almenscorner.io/content/images/size/w600/2022/09/mmglogo.png",
            "https://almenscorner.io/content/images/size/w600/2022/01/logicapp.png",
            "https://almenscorner.io/content/images/size/w600/2021/12/Screenshot-2021-12-14-at-16.00.40.png"
        ],
        "movies": [
            "https://almenscorner.io/content/media/2024/03/intuneautopkgtools.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tobias Almen"
        ],
        "publish_date": "2024-04-02T06:44:14+00:00",
        "summary": "",
        "meta_description": "Discover how Intune AutoPkg Tools repository streamlines macOS app management in Microsoft Intune.",
        "meta_lang": "en",
        "meta_favicon": "https://almenscorner.io/content/images/size/w256h256/2023/08/almenscorner.png",
        "meta_site_name": "almen's Intune corner",
        "canonical_link": "https://almenscorner.io/simplifying-macos-app-management-with-intune-autopkg-tools/",
        "text": "In today's fast-paced digital landscape, efficient management of applications is crucial for ensuring the smooth operation of organizations. However, alongside this efficiency, security remains paramount. As technology evolves, so do the methods employed by malicious actors to exploit vulnerabilities in applications and systems.\n\nImplementing robust security measures is essential to safeguard sensitive data, protect against cyber threats, and maintain the trust of customers and stakeholders. This includes regularly updating software.\n\nMicrosoft Intune offers a platform for managing macOS apps, but the process of creating, updating, promoting, and deleting these apps can be time-consuming and complex. However, with the Intune AutoPkg Tools repository, managing macOS apps in Intune becomes a breeze.\n\nAutomating Intune App Management\n\nThe Intune AutoPkg Tools repository houses a script that acts as a wrapper around AutoPkg, a popular tool for automating the packaging and deployment of macOS applications. This script streamlines the entire process of managing macOS apps in Intune, from creation to deletion, using the Intune Uploader set of AutoPkg custom processors.\n\nGetting Started\n\nFor those new to Intune Uploader, the repository's wiki provides comprehensive guidance on getting started with the processor.\n\nHow It Works\n\nThe heart of the Intune AutoPkg Tools repository lies in its script, autopkg_tools.py, which orchestrates the entire process. This script utilizes a list of overrides for applications to manage, this repository contains two examples, one for Firefox and one for UTM. Adding additional overrides for other apps you want to manage is as easy as creating a new override using AutoPkg.\n\nThe repository includes three key JSON files:\n\nautopkg_tools/recipe_list.json - List of recipes to run\n\nautopkg_tools/promote_list.json - List of recipes to promote to groups in stages, see here for more information on how to configure this.\n\nautopkg_tools/cleanup_list.json - List of recipes to delete old versions in Intune, when adding a new version, configure the keep value to the number of versions to keep. If not configured, the default is 3.\n\nIntegration with CI/CD Pipelines\n\nWhether you prefer GitHub Actions or Azure Pipelines, integrating Intune AutoPkg Tools into your CI/CD workflow is simple and straightforward.\n\nIn this post the focus is on GitHub Actions and Azure Pipelines, however, this script can be run on any macOS agent.\n\nTeams notifications\n\nIf you configure a webhook to a Teams channel, status messages from the CI/CD run will be sent to Teams so you can get information about when a application was updated, promoted or removed.\n\nPreparation:\n\nClone the repo\n\nOpen your terminal or command prompt.\n\nNavigate to the directory where you want to clone the repository.\n\nUse the git clone command followed by the URL of the Intune AutoPkg Tools URL:\n\ngit clone https://github.com/almenscorner/intune-autopkg-tools\n\nCreate Teams webhook (optional)\n\nNavigate to the channel where you want to add the webhook.\n\nClick on the ellipsis (...) next to the channel name and Select \"Manage Channel.\"\n\nClick \"Edit\" on Connectors.\n\nIn the connectors list, find \"Incoming Webhook\" and click \"Configure.\"\n\nGive your webhook a name and (optionally) upload an image to represent it.\n\nClick \"Create\" or \"Add.\"\n\nAfter the webhook is created, you'll be provided with a unique URL. This URL is what you'll use to send messages to the channel. Save this URL for later use.\n\nYou can configure additional options like specifying a custom name for the bot posting messages, choosing an icon, etc. This depends on your requirements.\n\nOnce you've copied the webhook URL and configured any additional options, save your settings.\n\nFor GitHub Actions:\n\nStep 1: Create a New Private Repository\n\nLog in to your GitHub account.\n\nIn the upper-right corner of any page, click the \"+\" icon, then select \"New repository\" from the dropdown menu.\n\nOn the \"Create a new repository\" page, enter a name for your repository. Optionally, add a description for your repository.\n\nSelect \"Private\" as the visibility level for your repository.\n\nChoose whether to initialize the repository with a README file, add a .gitignore, and choose a license. This is optional.\n\nClick the \"Create repository\" button.\n\nStep 2: Clone Your Private Repository\n\nOnce your private repository is created, click the \"Code\" button to get the repository's URL.\n\nIn your terminal or command prompt, navigate to the directory where you want to clone your repository.\n\nUse the following command to clone your repository, replace <repository_URL> with the URL of your private repository:\n\ngit clone <repository_URL>\n\nCopy the contents of the cloned intune-autopkg-tools repository to your repository.\n\nStep 3: Add Secret Action Variables\n\nGo to the \"Settings\" tab of your repository.\n\nIn the left sidebar, click on \"Secrets and variables\" and then \"Actions\".\n\nClick on the \"New repository secret\" button.\n\nAdd the following secrets to your repository:\n\nCLIENT_SECRET\n\nTEAMS_WEBHOOK (optional)\n\nStep 4: Update the action variables\n\nOpen up the autopkg.yml file in a text editor and update variables TENANT_ID and CLIENT_ID in the .github/workflows/autopkg.yml file to match your Entra ID settings.\n\nStep 5: Commit and Push Changes\n\nUse the following commands to commit and push your changes to your private repository:\n\ngit add . git commit -m \"initial commit\" git push\n\nThat's it! You've successfully created a private repository on GitHub and added secret action variables for use in your GitHub Actions workflows.\n\nStep 6: Update or add overrides\n\nAs mentioned there are two overrides provided as an example, Firefox and UTM. Firefox contains information to use the promotion feature, either add group IDs and modify as needed or remove the promotion information from the override as well as the promote_list.json. If you have any other applications you want to include, create and add overrides for these. Firefox is also added to cleanup_list.json to remove old versions as updates are uploaded.\n\nFor Azure Pipelines:\n\nStep 1: Create a new project\n\nIn the \"Projects\" section, locate and click on the \"New project\" button. It's usually positioned in the top-right corner of the screen.\n\nEnter Project Details:\n\nProject Name: Enter a name for your project. Choose a descriptive name that reflects the purpose or nature of your project.\n\nVisibility: Choose Private\n\nDescription (Optional): Optionally, you can add a description to provide more context about your project.\n\nClick the \"Create\" button to create the project.\n\nStep 2: Clone Your Private Repository\n\nOnce your private repository is created, click on it to open it.\n\nClick on the \"Clone\" button to copy the repository URL.\n\nIn your terminal or command prompt, navigate to the directory where you want to clone your repository.\n\nUse the following command to clone your repository, replace <repository_URL> with the URL of your private repository:\n\ngit clone <repository_URL>\n\nCopy the contents of the cloned intune-autopkg-tools repository to your repository.\n\nStep 3: Update the pipeline variables\n\nOpen up the autopkg-azure.yml file in either a text editor and update variables TENANT_ID and CLIENT_ID in the autopkg-azure.yml file to match your Entra ID settings.\n\nStep 5: Commit and Push Changes\n\nUse the following commands to commit and push your changes to your private repository:\n\ngit add . git commit -m \"initial commit\" git push\n\nStep 6: Create the Pipeline\n\nClick on the \"Pipelines\" menu item in the left sidebar.\n\nIn the Pipelines page, click on the \"New pipeline\" button. This button is usually located at the top right corner of the page.\n\nAzure DevOps will prompt you to choose the location of your source code. Select the Azure Repos Git.\n\nAzure DevOps will analyze your repository and provide you with options for pipeline configuration. Since you want to create a pipeline from an existing file, select the option that says \"Existing Azure Pipelines YAML file.\"\n\nClick on the \"Continue\" button.\n\nIn the next screen, Azure DevOps will ask you to specify the path to your existing pipeline YAML file. Click on the folder icon to browse for the file and select autopkg-azure.yml.\n\nOnce you've selected the file, click on the \"Continue\" button.\n\nClick on the Variables button in the top right and add the following Secret Variables:\n\nCLIENT_SECRET\n\nTEAMS_WEBHOOK (optional)\n\nReview and save your pipeline.\n\nThat's it! You've successfully created a private repository on Azure DevOps and added secret variables for use in your Pipeline.\n\nStep 7: Update or add overrides\n\nAs mentioned there are two overrides provided as an example, Firefox and UTM. Firefox contains information to use the promotion feature, either add group IDs and modify as needed or remove the promotion information from the override as well as the promote_list.json. If you have any other applications you want to include, create and add overrides for these. Firefox is also added to cleanup_list.json to remove old versions as updates are uploaded.\n\nLogging\n\nEach run from a GitHub action or Azure Pipeline will create an artifact with the logs as a zip. To review the logs you can just download the artifacts, unzip and review. If you require more verbose output for troubleshooting, add --debug to the parameters when executing the script in either autopkg.yml or autopkg-azure.yml.\n\nConclusion\n\nFollow the steps above, you should now have a complete setup to run AutoPkg in a CI/CD workflow and automatically update and maintain your macOS apps in Intune.\n\nThe Intune AutoPkg Tools repository simplifies macOS app management in Intune, providing efficient automation for packaging, updating, promoting, and deleting apps. This automation streamlines workflows, allowing you to prioritize delivering value to your users."
    }
}