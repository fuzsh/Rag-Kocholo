{
    "id": "dbpedia_8583_0",
    "rank": 7,
    "data": {
        "url": "https://stackoverflow.com/questions/53048549/gnu-makefile-by-autotools-rules-and-recipes-to-build-c-language-sources",
        "read_more_link": "",
        "language": "en",
        "title": "GNU, makefile by autotools - rules and recipes to build C-language sources",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/1182b1d5518a596d4e8cfe0567a65c4d?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/53048549/ivc/3e78?prg=b5b7a95c-0da4-419d-a403-f00eb6e61f10"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-10-29T15:15:37",
        "summary": "",
        "meta_description": "For building a program from C-language source how are the rules and rule's recipes in makefile specified if latter one is generated by autotools in standard way?\nIt means no modifications at autoco...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/53048549/gnu-makefile-by-autotools-rules-and-recipes-to-build-c-language-sources",
        "text": "For building a program from C-language source how are the rules and rule's recipes in makefile specified if latter one is generated by autotools in standard way?\n\nThe Autotools are designed to implement the GNU coding standards as they apply to build systems, as described, with links, in the Automake manual. There is separate documentation for the coding standards, including the standard user-facing targets that Makefiles are expected to provide. Automake provides these.\n\nAdditionally, Automake documents some targets intended for use as extension points by developers. Automake variously either provides these or uses them if the developer provides them.\n\nAlso, Automake provides a rule for each target you specify to it explicitly in your Makefile.am. You can use these freely in a non-recursive build system, but YMMV if your build system is recursive.\n\nOf course, Autotools makefiles contain many more targets than those, but their names should be considered implementation details. All of the rule recipes are implementation details, too, though you can predict a lot about some of them from the documentation of the various Automake variables and how they work. If you're curious, then how about looking at a generated Makefile.in or Makefile?\n\nAre these two separate rules one for compiling another one for linkage?\n\nFrom the fact that building a project with an Autotools-based build system generates not just the ultimate target but also an object file for each source file, we can determine that, at least in current versions of the Autotools, indeed there are both rules for compiling sources to object files and rules for linking objects together into executables and / or libraries. Again, you could also just look at a generated Makefile[.in].\n\nRecipes of what form exactly do autotools apply?\n\nThe specifics are not documented, and may, in principle, vary somewhat between versions of Automake. But again, you can infer a lot from the variables, and you can always generate an example to study.\n\nI haven't found these specifications in automake manual. However rule-target pairs for some other programing languages are pretty well specified in that manual.\n\nThe main place in which the AutoMake manual discusses specific provisions for particular languages is in chapter 8, Building Programs and Libraries. The first several sections describe how things work in general and for C, the Autotools' standard target language, and then there are several sections describing provisions for other supported languages. The manual actually does specify the form of the build rules used for Fortran 77 and Fortran 95 sources, but it's not clear why. In any case, those are exceptions. Similar is not provided for other languages.\n\nIn other words where is specified how makefiles generated by autotools build programs from C-sources, under assumptions as pointed out above?\n\nThe specific form of the build rules for C sources is not documented, but in a more general sense, this is the subject of chapters 2 - 4 and much of chapter 8 of the manual."
    }
}