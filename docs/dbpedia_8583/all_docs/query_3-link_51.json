{
    "id": "dbpedia_8583_3",
    "rank": 51,
    "data": {
        "url": "https://kb.filewave.com/books/integrations/page/autopkgr-with-filewave",
        "read_more_link": "",
        "language": "en",
        "title": "AutoPkgr with FileWave",
        "top_image": "https://kb.filewave.com/uploads/images/system/2023-05/3vXzHFO4tOFXnYtk-background-icon.png",
        "meta_img": "https://kb.filewave.com/uploads/images/system/2023-05/3vXzHFO4tOFXnYtk-background-icon.png",
        "images": [
            "https://kb.filewave.com/uploads/images/system/2023-05/e8lgDo0RggBlNe0J-background-icon.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/lG1mRWHlm9Fy4ugr-embedded-image-12xgqzjj.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/jhHpOGWDTVMnwE47-embedded-image-qxfa9ywm.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/iBhNoPaEA9UTjRTC-embedded-image-kgwixjud.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/SpmbsEtfYVAZv6zT-embedded-image-m5jcx2pi.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/8ahAlVJpNt2ceIMu-embedded-image-ibkalvix.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/S2GxWdgSc712TnmN-embedded-image-dvigwnst.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/FITABVICZE8o3Qy7-embedded-image-oadwcwql.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/NkJyyyFr2Ex6JIZF-embedded-image-gtl8h4xv.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/rrCfZfMeIAuPD6sx-embedded-image-namahxei.png",
            "https://kb.filewave.com/uploads/images/gallery/2023-07/OPDTTmHgYGSyMGly-embedded-image-hqxzerk5.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Description\r\nAutoPkg is an automation framework for macOS software packaging and distribution, orien...",
        "meta_lang": "en",
        "meta_favicon": "https://kb.filewave.com/uploads/images/system/2023-05/3vXzHFO4tOFXnYtk-background-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://kb.filewave.com/books/integrations/page/autopkgr-with-filewave",
        "text": "Description\n\nAutoPkg is an automation framework for macOS software packaging and distribution, oriented toward the tasks one would normally perform manually to prepare third-party software for mass deployment to managed clients. An important use in conjunction with FileWave is to provide a way to turn 3rd party software updates into Filesets on an automated basis.\n\nIngredients\n\nFW Admin\n\nAutoPkgr Installer\n\nAn 'always on' computer\n\nDirections\n\nComplementing the below setup, there is also a Foundry presentation about this and, additional configuration and typical stumbling blocks: FileWave and AutoPkg\n\nSetup FileWave\n\nGo to FileWave Admin -> Assistants -> Manage Administrators\n\nClick on the + button to add a new Administrator\n\nSelect Local Account, (for example autopkg and the password autopkg as well)\n\nGo to Permissions tab and click on Select None\n\nAllow the autopkg user to 'Modify Filesets' and 'Set Permissions' as per the above screenshot.\n\nClick Apply\n\nConfirm with OK\n\nSetup AutoPkgr\n\nGo to https://github.com/lindegroup/autopkgr/releases/latest\n\nDownload, install and launch AutoPkgr\n\nLaunch AutoPkgr, Click on \"Install AutoPkg\" , and \"Install Git\"\n\nGo to Folders & Integration and click on Install FileWaveImporter:\n\nClick on Configure FileWaveImporter:\n\nEnter your FileWave Server Hostname\n\nFileWave Server Port is already set to 20016\n\nUsername is e.g. autopkg\n\nPassword is e.g. autopkg\n\nClick on Verify to validate the setup\n\nClick on Save and Close\n\nGo to Repos & Recipes and verify that https://github.com/autopkg/recipes.git and https://github.com/autopkg/filewave/git are checked\n\nMake sure that 'Active recipe list' has added com.github.autopkg.filewave:\n\nNow You can run a Recipe for example Java8. To find it quickly enter filewave on search bar and check the Java8 recipe:\n\nSecurity and Trust Relationship\n\nRunning recipes directly from a cloned repo will bypass AutoPkg's security mechanism. As such an Override recipe should always be created and run. This builds a local recipe with a trust relationship between this and any linked 'parent' recipes, see below. For additional information on Override recipes and more, please view the Foundry video: FileWave and AutoPkg\n\nCongratulations ! Your AutoPkgr setup is now complete. Choose the recipes you would like to run on a regular basis , and then schedule AutoPkgr to run every 24 hours.\n\nOverride Recipes & Trust Relationship\n\nFor security, a trust relationship was added between recipes. The idea is the child recipe is made to trust it's parent recipes. If an updated version of a parent recipe is pulled from a repository, then this parent will no longer be trusted by that child, until the trust relationship is manually updated. AutoPkgr does not offer the ability to change trust and so this must be done via the command line.\n\nWith no trust, when a recipe is run that relies on parent recipes you will see an error similar when running the recipe from Terminal:\n\n$ autopkg run -v OracleJava8.filewave.local Processing OracleJava8.filewave.local... Failed local trust verification. Receipt written to /tmp/receipts/OracleJava8.filewave-receipt-20180409-141621.plist The following recipes failed: OracleJava8.filewave.local No trust information present. Nothing downloaded, packaged or imported.\n\nIn this example, Creating a Recipe Override will create a recipe that has trust added for us. Using the above Java8 example, first make an Override recipe. The Override recipe and initial trust can be created in either AutoPkgr or using the command line. The Java 8 override recipe will be called \"Java8.filewave.override\". The last entry is reference to the parent recipe to be overridden (this can be either be recipe name or it's identifier, recipe name used in this example):\n\n$ autopkg make-override -n Java8.filewave.override Java8.filewave\n\nBy making the override file in this way, the trust relationship has been added automatically to the Override recipe. Now there is a trust relationship, the override file can be used to run the recipe (either through Terminal or AutoPkgr):\n\n$ autopkg run -v OracleJava8.filewave.override Processing OracleJava8.filewave.override... [lines removed] The following fileset was imported: Fw Fileset Id Fw Fileset Group Fw Fileset Name ------------- ---------------- --------------- 194266 Root Java - 1.8.161.12 The following packages were copied: Pkg Path -------- /Users/Shared/Autopkg/Cache/local.override.filewave.OracleJava8/Java-1.8.161.12.pkg The following new items were downloaded: Download Path ------------- /Users/Shared/Autopkg/Cache/local.override.filewave.OracleJava8/downloads/Java.dmg\n\nIf after updating repos, the trust relationship error is flagged against any recipes, this indicates that a parent has been updated and trust is no longer in place. At this point, the parent should be reviewed to observe the changes made. Changes to a recipe can easily be viewed by navigating to the relevant recipe on GitHub and viewing the 'History'.\n\nOnce confirmation has been made that the changes are acceptable, a new trust relationship should be created. As an override file already exits, the trust will need to be updated for the Java 8 override recipe; as such re-trusting all parents:\n\nAlthough it is possible to disable trust relationship, this should not be recommended for security reasons. Current status can be seen by running the following and checking the value of 'FAIL_RECIPES_WITHOUT_TRUST_INFO':\n\n$ autopkg info\n\nIt is possible to temporarily override the trust relationship, such that it is ignored:\n\n$ autopkg run --ignore-parent-trust-verification-errors [name of recipe]\n\nImportant\n\nFOR SECURITY REASONS, IT IS ALWAYS RECOMMENDED THAT RECIPES ARE CHECKED BEFORE INGESTING INTO YOUR FILEWAVE SERVER AND CREATED FILESETS ARE SUBSEQUENTLY CHECKED ON TEST MACHINES BEFORE DEPLOYING TO LARGER GROUPS OF MACHINES"
    }
}