{
    "id": "dbpedia_8583_2",
    "rank": 7,
    "data": {
        "url": "https://docs.veracode.com/r/compilation_ruby",
        "read_more_link": "",
        "language": "en",
        "title": "Ruby on Rails packaging",
        "top_image": "https://docs.veracode.com/img/veracode-favicon.png",
        "meta_img": "https://docs.veracode.com/img/veracode-favicon.png",
        "images": [
            "https://docs.veracode.com/img/Veracode_Docs_Logo_Light_Mode.svg",
            "https://docs.veracode.com/img/Veracode_Docs_Logo_Dark_Mode.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-09T08:59:46+00:00",
        "summary": "",
        "meta_description": "Your Ruby on Rails applications must meet specific packaging requirements before you can submit them for scanning.",
        "meta_lang": "en",
        "meta_favicon": "/img/veracode-favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://docs.veracode.com/r/compilation_ruby",
        "text": "Your Ruby on Rails applications must meet specific packaging requirements before you can submit them for scanning.\n\nSee Supported languages and platforms for instructions for other platforms.\n\nYou can analyze applications using Veracode Static Analysis or Veracode Software Composition Analysis (SCA) upload and scan, if licensed. For SCA agent-based scan requirements, see Using Veracode SCA with Programming Languages.\n\nAuto-packaging simplifies the packaging process for Ruby on Rails projects.\n\nVeracode supports these template formats for analyzing Ruby on Rails applications:\n\nERB/Erubis\n\nHAML\n\nBuilder\n\nVeracode requires that you use a custom Veracode RubyGem to package Ruby on Rails applications.\n\nBefore uploading your Ruby on Rails code, Veracode requires you to run a special packaging gem. The gem uses features introduced in Ruby 1.9 to translate your application to an archive format that Veracode can scan. The resulting archive contains this information:\n\nModules and classes, including disassembled instruction sequences for all Ruby methods. Disassembly is not available for methods implemented in C.\n\nA log of errors generated by the Veracode gem or other code in your application environment during disassembly.\n\nConfiguration files for Rails, Bundler, or other common gems.\n\nRuby source and template files.\n\nA list of included files.\n\nA recursive list of all files in the application directory, including those not contained in the archive.\n\nTo prepare your application for analysis:\n\nEnsure that the application can run.\n\nEnsure that you have a functional Rails environment on the system preparing your application.\n\nYou can test your system for these requirements by running the rails server command.\n\nRails versionsRuby versions5.x2.3.x–2.7.x6.0.x2.5.x–2.7.x6.1.x2.5.x–3.2.x7.0.x2.7.x–3.2.x7.1.x2.7.x–3.3.x\n\nTo set up a clean Ruby environment before installing and running the Veracode gem, Veracode recommends you use RVM. After you install RVM, create the Ruby environment by running the following command sequence:\n\nTo install the gem, Veracode recommends that you use Bundler. Run the following command to update your gem to the latest version:\n\nAs an alternative to Bundler, you can install the gem with the install command. After you install RVM and ensure you meet all other application dependencies, run the following command sequence:\n\nThe packaging gem includes the veracode command-line tool that you run in the directory that contains your Rails application. For a list of subcommands and options, run veracode or veracode help.\n\nFor the veracode gem to properly analyze and package your application, you must disable the application setting config.cache_classes. You can verify that this setting is disabled in the appropriate environment configuration file. For example, if you are using the development environment, RAILS_ENV=development veracode prepare, validate that config/environments/development.rb contains the line config.cache_classes = false.\n\nYou package Ruby on Rails applications with the veracode gem.\n\nTo complete this task:\n\nInsert the following dependency in the Gemfile of your application:\n\n#Add the following to /your/ruby/on/railsapp/Gemfile\n\ngem 'veracode'\n\nnote\n\nIf you removed the default https://rubygems.org/ from your Ruby configuration file, you must restore it.\n\nFor Ruby versions earlier than 2.4, you must add the following lines to your Gemfile to specify a compatible version of rubyzip:\n\nsource 'https://rubygems.org'\n\ngem 'rubyzip', '~>1.0'\n\nRun the following command sequence to install the application dependencies, Rails, and the veracode gem:\n\n$ cd /your/ruby/on/railsapp\n\nrailsapp $ rvm use {your version}@veracode\n\nrailsapp $ bundle install --without development test # or other non-production dependency groups\n\nRun the following subcommand to create the ZIP archive:\n\nrailsapp $ veracode prepare\n\nIn the tmp folder of the application, find the new file named veracode-[application name]-[YYYYmmddHHMMSS timestamp].zip.\n\nUpload the ZIP archive to Veracode.\n\nYou can create an archive by running the veracode prepare command with the following sequence:\n\nThe prepare subcommand uses the following syntax:\n\nThe prepare subcommand creates the archive that you upload to Veracode.\n\nThe gem produces an archive in ZIP format and saves it in the tmp folder of the application, for example, /my/ruby/on/railsapp/tmp. The prepare subcommand creates a file named veracode-[application name]-[YYYYmmddHHMMSS timestamp].zip. Upload this file to Veracode."
    }
}