{
    "id": "dbpedia_6784_2",
    "rank": 88,
    "data": {
        "url": "https://www.baeldung.com/java-regex-validate-phone-numbers",
        "read_more_link": "",
        "language": "en",
        "title": "Validate Phone Numbers With Java Regex",
        "top_image": "https://www.baeldung.com/wp-content/uploads/2017/08/Java-on-Baeldung-2.jpg",
        "meta_img": "https://www.baeldung.com/wp-content/uploads/2017/08/Java-on-Baeldung-2.jpg",
        "images": [
            "https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg",
            "https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg",
            "https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&r=g",
            "https://secure.gravatar.com/avatar/66d236ad2fbffe8cfd463ebd2b4a43c0?s=50&r=g",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png",
            "https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg",
            "https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png",
            "https://www.baeldung.com/wp-content/uploads/2024/01/book-cover-mockito-guide-lg-1.png",
            "https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-widget-main-1.2.0-300x235.jpg",
            "https://www.baeldung.com/wp-content/uploads/2022/11/BookCover-Persistence_with_Spring.png",
            "https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg",
            "https://www.baeldung.com/wp-content/themes/baeldung/icon/whiteleaf.svg",
            "https://www.baeldung.com/wp-content/uploads/2017/07/follow-the-spring.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-05-10T10:04:31+02:00",
        "summary": "",
        "meta_description": "Learn how to validate different formats of phone numbers using regular expressions.",
        "meta_lang": "en",
        "meta_favicon": "https://www.baeldung.com/wp-content/themes/baeldung/favicon/apple-touch-icon-57x57.png",
        "meta_site_name": "Baeldung",
        "canonical_link": "https://www.baeldung.com/java-regex-validate-phone-numbers",
        "text": "1. Overview\n\nSometimes, we need to validate text to ensure that its content complies with some format. In this quick tutorial, we’ll see how to validate different formats of phone numbers using regular expressions.\n\n2. Regular Expressions to Validate Phone Numbers\n\n2.1. Ten-Digit Number\n\nLet’s start with a simple expression that will check if the number has ten digits and nothing else:\n\n@Test public void whenMatchesTenDigitsNumber_thenCorrect() { Pattern pattern = Pattern.compile(\"^\\\\d{10}$\"); Matcher matcher = pattern.matcher(\"2055550125\"); assertTrue(matcher.matches()); }\n\nThis expression will allow numbers like 2055550125.\n\n2.2. Number With Whitespaces, Dots or Hyphens\n\nIn the second example, let’s see how we can allow optional whitespace, dots, or hyphens (-) between the numbers:\n\n@Test public void whenMatchesTenDigitsNumberWhitespacesDotHyphen_thenCorrect() { Pattern pattern = Pattern.compile(\"^(\\\\d{3}[- .]?){2}\\\\d{4}$\"); Matcher matcher = pattern.matcher(\"202 555 0125\"); assertTrue(matcher.matches()); }\n\nTo achieve this extra goal (optional whitespace or hyphen), we’ve simply added the characters:\n\n[- .]?\n\nThis pattern will allow numbers like 2055550125, 202 555 0125, 202.555.0125, and 202-555-0125.\n\n2.3. Number With Parentheses\n\nNext, let’s add the possibility to have the first part of our phone between parentheses:\n\n@Test public void whenMatchesTenDigitsNumberParenthesis_thenCorrect() { Pattern pattern = Pattern.compile\"^((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\"); Matcher matcher = pattern.matcher(\"(202) 555-0125\"); assertTrue(matcher.matches()); }\n\nTo allow the optional parenthesis in the number, we’ve added the following characters to our regular expression:\n\n(\\\\(\\\\d{3}\\\\))|\\\\d{3})\n\nThis expression will allow numbers like (202)5550125, (202) 555-0125 or (202)-555-0125. Additionally, this expression will also allow the phone numbers covered in the previous example.\n\n2.4. Number With International Prefix\n\nFinally, let’s see how to allow an international prefix at the start of a phone number:\n\n@Test public void whenMatchesTenDigitsNumberPrefix_thenCorrect() { Pattern pattern = Pattern.compile(\"^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\"); Matcher matcher = pattern.matcher(\"+111 (202) 555-0125\"); assertTrue(matcher.matches()); }\n\nTo permit the prefix in our number, we have added to the beginning of our pattern the characters:\n\n(\\\\+\\\\d{1,3}( )?)?\n\nThis expression will enable phone numbers to include international prefixes, taking into account that international prefixes are normally numbers with a maximum of three digits.\n\n3. Applying Multiple Regular Expressions\n\nAs we’ve seen, a valid phone number can take on several different formats. Therefore, we may want to check if our String complies with any one of these formats.\n\nIn the last section, we started with a simple expression and added more complexity to achieve the goal of covering more than one format. However, sometimes it’s not possible to use just one expression. In this section, we’ll see how to join multiple regular expressions into a single one.\n\nIf we are unable to create a common regular expression that can validate all the possible cases that we want to cover, we can define different expressions for each of the cases and then use them all together by concatenating them with a pipe symbol (|).\n\nLet’s see an example where we use the following expressions:\n\nThe expression used in the last section:\n\n^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\n\nRegular expression to allow numbers like +111 123 456 789:\n\n^(\\\\+\\\\d{1,3}( )?)?(\\\\d{3}[ ]?){2}\\\\d{3}$\n\nPattern to allow numbers like +111 123 45 67 89:\n\n^(\\\\+\\\\d{1,3}( )?)?(\\\\d{3}[ ]?)(\\\\d{2}[ ]?){2}\\\\d{2}$\n\n@Test public void whenMatchesPhoneNumber_thenCorrect() { String patterns = \"^(\\\\+\\\\d{1,3}( )?)?((\\\\(\\\\d{3}\\\\))|\\\\d{3})[- .]?\\\\d{3}[- .]?\\\\d{4}$\" + \"|^(\\\\+\\\\d{1,3}( )?)?(\\\\d{3}[ ]?){2}\\\\d{3}$\" + \"|^(\\\\+\\\\d{1,3}( )?)?(\\\\d{3}[ ]?)(\\\\d{2}[ ]?){2}\\\\d{2}$\"; String[] validPhoneNumbers = {\"2055550125\",\"202 555 0125\", \"(202) 555-0125\", \"+111 (202) 555-0125\", \"636 856 789\", \"+111 636 856 789\", \"636 85 67 89\", \"+111 636 85 67 89\"}; Pattern pattern = Pattern.compile(patterns); for(String phoneNumber : validPhoneNumbers) { Matcher matcher = pattern.matcher(phoneNumber); assertTrue(matcher.matches()); } }\n\nAs we can see in the above example, by using the pipe symbol, we can use the three expressions in one go, thus allowing us to cover more cases than with just one regular expression.\n\n4. Conclusion\n\nIn this article, we’ve seen how to check whether a String contains a valid phone number using different regular expressions. We’ve also learned how to use multiple regular expressions at the same time."
    }
}