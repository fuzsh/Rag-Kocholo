{
    "id": "dbpedia_4127_1",
    "rank": 85,
    "data": {
        "url": "https://spring.io/projects/spring-cloud",
        "read_more_link": "",
        "language": "en",
        "title": "Spring Cloud",
        "top_image": "https://spring.io/img/og-spring.png",
        "meta_img": "https://spring.io/img/og-spring.png",
        "images": [
            "https://spring.io/img/logos/spring-initializr.svg",
            "https://spring.io/img/extra/footer.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Level up your Java code and explore what Spring can do for you.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-32x32.png?v=96334d577af708644f6f0495dd1c7bc8",
        "meta_site_name": "Spring Cloud",
        "canonical_link": "https://spring.io/projects/spring-cloud",
        "text": "Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, short lived microservices and contract testing). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.\n\nFeatures\n\nSpring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.\n\nDistributed/versioned configuration\n\nService registration and discovery\n\nRouting\n\nService-to-service calls\n\nLoad balancing\n\nCircuit Breakers\n\nDistributed messaging\n\nShort lived microservices (tasks)\n\nConsumer-driven and producer-driven contract testing\n\nTalks and videos\n\nDistributed Applications with Spring Cloud: Spring Office Hours\n\nBeginner’s Guide To Spring Cloud\n\nGetting Started\n\nGenerating A New Spring Cloud Project\n\nThe easiest way to get started is visit start.spring.io, select your Spring Boot version and the Spring Cloud projects you want to use. This will add the corresponding Spring Cloud BOM version to your Maven/Gradle file when you generate the project.\n\nAdding Spring Cloud To An Existing Spring Boot Application\n\nIf you an existing Spring Boot app you want to add Spring Cloud to that app, the first step is to determine the version of Spring Cloud you should use. The version you use in your app will depend on the version of Spring Boot you are using.\n\nThe table below outlines which version of Spring Cloud maps to which version of Spring Boot.\n\nTable 1. Release train Spring Boot compatibility (see here for more detailed information).\n\nRelease Train Spring Boot Generation 2023.0.x aka Leyton 3.3.x, 3.2.x 2022.0.x aka Kilburn 3.0.x, 3.1.x (Starting with 2022.0.3) 2021.0.x aka Jubilee 2.6.x, 2.7.x (Starting with 2021.0.3) 2020.0.x aka Ilford 2.4.x, 2.5.x (Starting with 2020.0.3) Hoxton 2.2.x, 2.3.x (Starting with SR5) Greenwich 2.1.x Finchley 2.0.x Edgware 1.5.x Dalston 1.5.x\n\nSpring Cloud Dalston, Edgware, Finchley, Greenwich, 2020.0 (aka Ilford), 2021.0 (aka Jubilee), and 2022.0 (aka Kilburn) have all reached end of life status and are no longer supported.\n\nBug fixes and backwards compatible features are added to each release train via a service release (SR). Once you determine which version of Spring Cloud to use, you should use the latest service release for that release train. You can find the latest service release information on our release notes page.\n\nNow that you know which release train to use and the latest service release for that release train you are ready to add the Spring Cloud BOM to your application.\n\n<properties> <spring-cloud.version>2023.0.2</spring-cloud.version> </properties> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement>\n\nplugins { id 'java' id 'org.springframework.boot' version '3.3.0' id 'io.spring.dependency-management' version '1.1.4' } repositories { mavenCentral() } ext { set('springCloudVersion', \"2023.0.2\") } dependencyManagement { imports { mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\" } }\n\nIt is recommended that you use release train BOM spring-cloud-dependencies This is a BOM-only version and it just contains dependency management and no plugin declarations or direct references to Spring or Spring Boot. You can Spring Boot parent POM, or use the BOM from Spring Boot (spring-boot-dependencies) to manage Spring Boot versions.\n\nJust like Spring Boot, many Spring Cloud projects include starters that you can add as dependencies to add various cloud native features to your project. In many cases, many features are enabled purely by adding the starter to your classpath. The starter names are documented within the individual projects. Below is an example of how you would add a Spring Cloud Config Client and a Spring Cloud Netflix Eureka client to your application.\n\n<dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-config</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId> </dependency> ... </dependencies>\n\ndependencies { implementation 'org.springframework.cloud:spring-cloud-starter-config' implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client' //... }\n\nMain Projects\n\nSpring Cloud Config\n\nCentralized external configuration management backed by a git repository. The configuration resources map directly to Spring Environment but could be used by non-Spring applications if desired.\n\nSpring Cloud Gateway\n\nSpring Cloud Gateway is an intelligent and programmable router based on Spring Framework and Spring Boot.\n\nSpring Cloud Netflix\n\nIntegration with Eureka Services Discovery from Netflix OSS.\n\nSpring Cloud Consul\n\nService discovery and configuration management with Hashicorp Consul.\n\nSpring Cloud Data Flow\n\nA cloud-native orchestration service for composable microservice applications on modern runtimes. Easy-to-use DSL, drag-and-drop GUI, and REST-APIs together simplifies the overall orchestration of microservice based data pipelines.\n\nSpring Cloud Function\n\nSpring Cloud Function promotes the implementation of business logic via functions. It supports a uniform programming model across serverless providers, as well as the ability to run standalone (locally or in a PaaS).\n\nSpring Cloud Stream\n\nA lightweight event-driven microservices framework to quickly build applications that can connect to external systems. Simple declarative model to send and receive messages using Apache Kafka or RabbitMQ between Spring Boot apps.\n\nSpring Cloud Stream Applications\n\nSpring Cloud Stream Applications are out of the box Spring Boot applications providing integration with external middleware systems such as Apache Kafka, RabbitMQ etc. using the binder abstraction in Spring Cloud Stream.\n\nSpring Cloud Task\n\nA short-lived microservices framework to quickly build applications that perform finite amounts of data processing. Simple declarative for adding both functional and non-functional features to Spring Boot apps.\n\nSpring Cloud Task App Starters\n\nSpring Cloud Task App Starters are Spring Boot applications that may be any process including Spring Batch jobs that do not run forever, and they end/stop after a finite period of data processing.\n\nSpring Cloud Zookeeper\n\nService discovery and configuration management with Apache Zookeeper.\n\nSpring Cloud Contract\n\nSpring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contracts approach.\n\nSpring Cloud OpenFeign\n\nSpring Cloud OpenFeign provides integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.\n\nSpring Cloud Bus\n\nAn event bus for linking services and service instances together with distributed messaging. Useful for propagating state changes across a cluster (e.g. config change events).\n\nSpring Cloud Open Service Broker\n\nProvides a starting point for building a service broker that implements the Open Service Broker API.\n\nRelease Trains"
    }
}