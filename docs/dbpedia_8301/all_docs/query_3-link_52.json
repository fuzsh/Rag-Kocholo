{
    "id": "dbpedia_8301_3",
    "rank": 52,
    "data": {
        "url": "https://www.opencredo.com/blogs/write-mesos-framework",
        "read_more_link": "",
        "language": "en",
        "title": "How to Write Your Own Apache Mesos Framework?",
        "top_image": "https://cdn.prod.website-files.com/66180915331413723d2ca037/664cbdbb88bb0a212f0d2d70_mesos.architecture3-1-300x202.jpeg",
        "meta_img": "",
        "images": [
            "https://cdn.prod.website-files.com/65f178221acfb3ab01f09d6a/661960e640f5a77804f312f6_Color%3DCoral%2C%20Size%3DDefault.svg",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/6655b1c0ccb69c57b5fa2c0c_banner-expertise.jpeg",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/664cbdbb88bb0a212f0d2d70_mesos.architecture3-1-300x202.jpeg",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/6655b1c1ccb69c57b5fa2c10_Bart-Spaans-_-No-Job-Title.jpeg",
            "https://cdn.prod.website-files.com/65f178221acfb3ab01f09d6a/662a7985f55d5237a3bfa26d_OpenCredo_Brand_Assets_Illustrations_Graphics%202.png",
            "https://cdn.prod.website-files.com/65f178221acfb3ab01f09d6a/662a79ed591e0633a7a17c1e_Rocket.png",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bdd298f4003dfac3bf7b22_Webflow%20-%20Blog%20%26%20Events%20Hero%20Template%20%26%20Files%20(2).png",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bcb7138cb27cee38bb923f_Nicki-Watt-Cropped.jpeg",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bdd2f225ed96b0b1b62126_Webflow%20-%20Blog%20%26%20Events%20Hero%20Template%20%26%20Files%20(3).png",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bcb7138cb27cee38bb923f_Nicki-Watt-Cropped.jpeg",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bdd31e715ff9c94a2365e4_Webflow%20-%20Blog%20%26%20Events%20Hero%20Template%20%26%20Files%20(4).png",
            "https://cdn.prod.website-files.com/66180915331413723d2ca037/66bcbe916dcd2857f0e11327_Nicki-Watt-Cropped.jpeg",
            "https://cdn.prod.website-files.com/65f178221acfb3ab01f09d6a/662a2d9b85c2c703cd754d95_Company%20Logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The Apache Mesos framework and executor components are loosely coupled, but for demo purposes we've put them in the same project. An Executor should implement the",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/65f178221acfb3ab01f09d6a/665dc9dbabcd689a0f72881c_OC_Favicon_Icon_(32pxx32px).png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "To read what Mesos can be used for, download our white-paper\n\nOpenCredo Whitepaper Apache-MesosIn this post we take a look at how you would develop your own framework. A number of frameworks are available for you to install out of the box, so when would it be appropriate to write your own?One reason to write your own framework is to give you fine grained control over what gets run where and at what time. Apache Mesos can be leveraged to take care of the nitty-gritty distributed problems so that you can focus on implementing the business case. For example:\n\nIn the financial industry we could make our framework prioritise tasks that are expected to have a high return\n\nIn the SaaS space we could prioritise services based on traffic and put our analytics jobs on the back burner; scaling based on demand\n\nWe could launch more worker applications if our queues are getting too big\n\netc.\n\nIn general: Every time we have business metrics that could be used to prioritise computations we could consider writing a framework for it.\n\nLetâs get technical\n\nBefore we look at some code we should get some of our terminology straight: In short, we have one elected master that track resources on slaves and offer these resources to frameworks. Frameworks can take the offers and use this to launch a task on the slaves. These tasks are run on an executor, usually the built-in Command Executor, that manages the task for us on the machine. So the framework itself is actually a type of scheduler.\n\nFor our purposes we shall write our own minimal framework and executor to show off some of the things we can do. Mesos communicates using protocol buffers, and many other language bindings are available, but we shall be doing this in Java -- all the principles translate to other languages as well though.\n\nThe Demo Code\n\nThe code for this blog post can be found here on githubIt's a very stripped down example framework to show off the different parts, but doesn't do anything useful. We've decided to keep this demo small on purpose, but for a more fleshed out demo framework have a look at RENDLER.\n\nRegistering The Framework\n\nOne of the first things that a Mesos framework should do is to register itself with the elected Mesos master so that it can start receiving resource offers. These offers then need to end up in our scheduler implementation. In Java we can use the MesosSchedulerDriver to take care off this wiring for us. We set our new MesosSchedulerDriver up by passing in a reference to our scheduler and by telling it everything it needs to know to communicate and register with the Mesos master:\n\nprivate staticvoidrunFramework(String mesosMaster) { Scheduler scheduler = new ExampleScheduler(getExecutorInfo()); MesosSchedulerDriver driver = new MesosSchedulerDriver(scheduler, getFrameworkInfo(), mesosMaster); int status = driver.run() == Protos.Status.DRIVER_STOPPED ? 0 : 1; driver.stop(); System.exit(status); }\n\nâ\n\nLaunching Tasks\n\nThe ExampleScheduler itself implements the org.apache.mesos.Scheduler interface. The meat of the Scheduler is the resourceOffers method, where we can process the incoming offers from Mesos and potentially use them to launch tasks. For demo purposes we just take every offer we get.\n\npublic voidresourceOffers(SchedulerDriver schedulerDriver, List offers) { for (Protos.Offer offer : offers) { Protos.TaskID taskId = buildNewTaskID(); Protos.TaskInfo task = Protos.TaskInfo.newBuilder() .setName(\"task \" + taskId).setTaskId(taskId) .setSlaveId(offer.getSlaveId()) .addResources(buildResource(\"cpus\", 1)) .addResources(buildResource(\"mem\", 128)) .setData(ByteString.copyFromUtf8(\"\" + taskIdCounter)) .setExecutor(Protos.ExecutorInfo.newBuilder(executorInfo)) .build(); launchTask(schedulerDriver, offer, task); } }\n\nTo launch a Task we have to tell Mesos what offers we take and how the Task should be configured. We can take most of the Task settings from the offer, although we cheated a bit here -- in a real framework we would have a look at the resources that we're offered and adjust the configuration of our tasks accordingly. We can also pass in some data, which will be delivered to the executor. Â This is one benefit of writing your own executor instead of relying on the default one: we can send messages between the framework and the executor. One caveat is that these messages are best effort and that we shouldn't expect a framework message to be retransmitted in any reliable fashion.\n\nThe Executor\n\nThe framework and executor components are loosely coupled, but for demo purposes we've put them in the same project. An Executor should implement the org.apache.mesos.Executor interface, with the most important method being the launchTask one:\n\npublic voidlaunchTask(ExecutorDriver executorDriver, Protos.TaskInfo taskInfo) { Integer id = Integer.parseInt(taskInfo.getData().toStringUtf8()); String reply = id.toString(); executorDriver.sendFrameworkMessage(reply.getBytes()); Protos.TaskStatus status = Protos.TaskStatus.newBuilder() .setTaskId(taskInfo.getTaskId()) .setState(Protos.TaskState.TASK_FINISHED).build(); executorDriver.sendStatusUpdate(status); }\n\nHere we have taken the data passed in from the Scheduler and are pinging it back to the framework. We also tell Mesos that the Task has finished successfully. In the real world we would be launching programs/threads, waiting for them to end and sending appropriate status messages, but we are not in the real world right now.\n\nConclusion\n\nWriting a framework allows us to leverage all that Apache Mesos has to offer and enables us to focus on the business case. In this post we've shown that it's actually quite straight forward to do such a thing, and that it's something to seriously consider when attacking scheduling problems. At OpenCredo we're big adopters of Apache Mesos and In future posts we'll be looking at more things we can do with the platform.\n\nRelated links\n\nBart Spaans talking about Docker on Mesos at the Docker Belgium meet up\n\nCase study: WooRank needed a solution to allow developers to introduce new website features quickly\n\nWhite paper: Delivering Business Value with Apache Mesos\n\nThis blog is written exclusively by the OpenCredo team. We do not accept external contributions."
    }
}