{
    "id": "dbpedia_8301_1",
    "rank": 5,
    "data": {
        "url": "https://www.oreilly.com/live-events/open-source-software-superstream-series-c/0636920053222/",
        "read_more_link": "",
        "language": "en",
        "title": "Open Source Software Superstream Series: C++",
        "top_image": "https://cdn.oreillystatic.com/images/live-online-training/og-oscon-social.png",
        "meta_img": "https://cdn.oreillystatic.com/images/live-online-training/og-oscon-social.png",
        "images": [
            "https://cdn.oreillystatic.com/oreilly/images/app-store-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/google-play-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/roku-tv-logo.png",
            "https://cdn.oreillystatic.com/oreilly/images/amazon-appstore-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "O’Reilly Media"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Known for its speed and multithreading support—and its more than four decades of powerful application development—C++ remains one of the most popular languages for a wide range of applications from banking and trading to advanced software developm...",
        "meta_lang": "en",
        "meta_favicon": "//www.oreilly.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.oreilly.com/live-events/open-source-software-superstream-series-c/0636920053222/",
        "text": "chevron leftView all events\n\nliveC++\n\nOpen Source Software Superstream Series: C++\n\nPublished by O'Reilly Media, Inc.\n\nIntermediate content levelIntermediate\n\nKnown for its speed and multithreading support—and its more than four decades of powerful application development—C++ remains one of the most popular languages for a wide range of applications from banking and trading to advanced software development. And the language continues to evolve.\n\nJoin us for four hours of expert-led sessions on the changes that C++20 will bring and explore the modern features that’ll ensure that C++ will continue to play an integral role in almost all the applications we use and and remain an ideal choice for creating complex open source projects.\n\nAbout the Open Source Software Superstream Series: Each day in the four-part OSCON Superstream Series covers a different programming language and its ecosystem, with unique sessions including keynotes from language luminaries, debates on controversial topics, and hands-on coding talks. And they’re packed with insights from innovators and the latest tools and technologies to help you stay ahead of it all.\n\nWhat you’ll learn and how you can apply it\n\nExplore the latest features of C++20\n\nDive into high-performance programming with C++\n\nDiscover how to extend C++ with WebAssembly\n\nLearn how to implement CRTP for library design and implementation\n\nThis live event is for you because...\n\nYou’re a C++ developer looking to improve your awareness of and skills with new practices and technologies.\n\nYou’re a developer in another programming language and are curious about how you can use C++ for your open source projects.\n\nYou’re an experienced developer who wants to learn new tools and techniques from expert programmers and software developers.\n\nPrerequisites\n\nCome with your questions\n\nHave a pen and paper handy to capture notes, insights, and inspiration\n\nRecommended follow-up:\n\nTake C++ Essentials: Templates (live online training course with Klaus Iglberger)\n\nTake C++ Essentials: STL Algorithms (live online training course with Klaus Iglberger)\n\nRead Effective Modern C++ (book)\n\nRead C++ Crash Course (book)\n\nExperiment with the C++ Sandbox\n\nSchedule\n\nThe time frames are only estimates and may vary according to how the class is progressing.\n\nKelsey Hightower: Introduction (5 minutes) - 7:00am PT | 10:00am ET | 2:00pm UTC/GMT\n\nKelsey Hightower welcomes you to the Open Source Software Superstream.\n\nKlaus Iglberger: Keynote—What Is Modern C++? (30 minutes) - 7:05am PT | 10:05am ET | 2:05pm UTC/GMT\n\nThe term “modern C++” is used a lot to describe the current state of C++. But what does the term actually mean? Is it merely using the features from new C++ standards? Or is there more to it? In his keynote, Klaus Iglberger explores the philosophy of modern C++, taking you on a trip through time from the beginnings of the language to the current state of modern C++.\n\nKlaus Iglberger is a freelancing C++ trainer and consultant focused on large-scale C++ software design. He shares his expertise through popular advanced C++ courses around the world (mainly in Germany, but also in the rest of the EU and the US). He’s also the initiator and lead designer of the Blaze C++ math library and one of the organizers of the Munich C++ user group. He holds a PhD in computer science.\n\nMatt Klein and Alex Gallego: Fireside Chat—Open Source Projects Powered by C++ (45 minutes) - 7:35am PT | 10:35am ET | 2:35pm UTC/GMT\n\nFor the last 15 years, most open source projects have used Python, Go, and Java. However, most complex systems worldwide use C++ in one form or another, and the language’s modern features make it the perfect choice for building complex open source systems. In a discussion with Kelsey Hightower, Matt Klein (creator of Envoy) and Alex Gallego (founder and CEO of Vectorized) explain why they chose C++ to power their projects, discuss the impact it’s had on community growth, and share the latest updates to these exciting projects.\n\nMatt Klein is a software engineer at Lyft but is most well-known as the creator of Envoy. He's been working on operating systems, virtualization, distributed systems, networking, and making systems easy to operate for over 20 years across a variety of companies. Highlights include leading the development of Twitter's L7 edge proxy and working on high-performance computing and networking for Amazon's EC2. He lives in Idaho with his wife, son, daughter, and three cats.\n\nAlex Gallego is the founder and CEO of Vectorized, where he and the team hack on Redpanda, a modern streaming platform for mission critical workloads. Previously, he was a principal engineer at Akamai and cofounder and CTO of Concord.io, a high-performance stream processing engine built in C++, which was acquired by Akamai in 2016\n\nBreak (5 minutes)\n\nRoi Barkan: Argument Passing, Core Guidelines, and Aliasing (45 minutes) - 8:25am PT | 11:25am ET | 3:25pm UTC/GMT\n\nThe C++ core guidelines recommend passing parameters to functions differently based on whether or not they’re “cheaply copyable.” Recently, Herb Sutter put a spotlight on the importance of simple and correct methodology for such argument passing. Join Roi Barkan to explore considerations for passing input parameters to functions. You’ll examine the guideline (and the reasoning behind it), along with related benchmarks. Then you’ll look at how template code might behave, with special attention given to the oft-overlooked notion of aliasing.\n\nRoi Barkan is the vice president of technologies at Istra Research, where he’s been helping the development of low-latency financial systems since 2014. A professional software developer and architect since 2000, Roi's main focus throughout his career has been on high-performance and distributed systems and on implementing complex and innovative algorithms. Previously, he spent 12 years in software development, architecture, and management in the IT security field. He holds a BA in computer science with high honors from the Technion in Israel and an executive MBA from Tel Aviv University.\n\nBreak (5 minutes)\n\nDaisy Hollman: Learning in Public—Using the Curiously Recurring Template Pattern for Better Structure, Better Reuse, and Better Code + Q&A (35 minutes) - 9:15am PT | 12:15pm ET | 4:15pm UTC/GMT\n\nThe Curiously Recurring Template Pattern (CRTP) is among the oldest and most versatile tools in the C++ programming toolbox. From static polymorphism to mixins to aspect-like programming paradigms, the many uses of CRTP are joined by a common thread: code reuse. The need to express \"sameness\" without coupling code in large-scale software engineering is a constant challenge, and CRTP is one of the best tools we have for this task. Join Daisy Hollman for an overview of CRTP. You’ll learn how to put the pattern to use, explore several common applications of CRTP, and see how they can improve your code quality by isolating boilerplate and common functionality. Along the way, you’ll discover some surprising edge-case pitfalls associated with CRTP and find out how to avoid them.\n\nThis session will be followed by a 15-minute Q&A. Please submit your questions for Daisy.\n\nDr. Daisy S. Hollman has been a member of the C++ standards committee since 2016, where she has made contributions to a wide range of library and language features, including proposals related to executors, atomics, generic programming, futures, and multidimensional arrays. Since receiving her PhD in quantum chemistry in 2013, her research has focused primarily on parallel and concurrent programming models, with a broader focus on general accessibility of complex abstractions in recent years. She works on C++ language and library design at Google, providing broad accessibility of programming models and abstractions, with a particular focus on design for diversity and inclusivity.\n\nSy Brand: Learning in Public—C++20 in Action + Q&A (35 minutes) - 9:50am PT | 12:50pm ET | 4:50pm UTC/GMT\n\nMicrosoft Visual C++ (MSVC) is now feature-complete for C++20. Join Sy Brand to walk through using all its major features (coroutines, concepts, ranges, and modules) together in a single project. You’ll learn how to develop a small random number generator program, see how C++20 makes your code better, and explore the support in Visual Studio that will help you make the most of the new standard.\n\nThis session will be followed by a 15-minute Q&A. Please submit your questions for Sy.\n\nSy Brand is Microsoft’s C++ developer advocate. Their background is in compilers and debuggers for embedded accelerators, but they’re also interested in generic library design, metaprogramming, functional-style C++, undefined behavior, and making our communities more welcoming and inclusive.\n\nBreak (5 minutes)\n\nRob Blafford and Vadim Plakhtinskiy: Extending C++ with WebAssembly + Q&A (35 minutes) - 10:30am PT | 1:30pm ET | 5:30pm UTC/GMT\n\nWebAssembly (a.k.a. Wasm) is a binary instruction format for stack-based virtual machines and is a compilation target for languages like C/C++, Rust, and more. Join Rob Blafford and Vadim Plakhtinskiy to learn about Wasm outside the browser. You’ll get an overview of Wasm and its ecosystem tools for C++, then learn how to use this powerful tool for inline data transformation in Redpanda (a drop-in replacement for Apache Kafka).\n\nThis session will be followed by a 15-minute Q&A. Please submit your questions for Rob and Vadim.\n\nRob Blafford is working on integrating WebAssembly with Redpanda at Vectorized. He’s been working with distributed systems for eight years and C++ for his entire professional career. Previously, he helped Vectorized’s CEO Alex Gallego found Concord.io, which built a stream processor from scratch written in C++ on top of Apache Mesos, and helped build an IoT pipeline at Akamai, following its acquisition of Concord.io.\n\nVadim Plakhtinskiy is a software engineer at Vectorized, where he’s working on a new inline transformation engine via WebAssembly. He has three years of experience in distributed systems: previously, he worked on the core product at ClickHouse and contributed to databases and a cluster management system for VK, the largest social network in Russia. His areas of interest include databases, distributed systems, and formal verification with TLA+.\n\nKelsey Hightower: Closing Remarks (5 minutes) - 11:05am PT | 2:05pm ET | 6:05pm UTC/GMT\n\nKelsey Hightower closes out today’s event.\n\nYour Host"
    }
}