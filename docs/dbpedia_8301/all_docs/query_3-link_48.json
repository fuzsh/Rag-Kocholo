{
    "id": "dbpedia_8301_3",
    "rank": 48,
    "data": {
        "url": "https://www.crowdstrike.com/cybersecurity-101/observability/kubernetes-vs-mesos/",
        "read_more_link": "",
        "language": "en",
        "title": "Kubernetes vs. Mesos",
        "top_image": "https://www.crowdstrike.com/wp-content/uploads/2022/08/cs-101-kubernetes-vs-mesos.png",
        "meta_img": "https://www.crowdstrike.com/wp-content/uploads/2022/08/cs-101-kubernetes-vs-mesos.png",
        "images": [
            "https://www.crowdstrike.com/wp-content/themes/main-theme/dist/images/icons/pen-fancy.svg",
            "https://www.crowdstrike.com/wp-content/uploads/2020/10/cs-101-container-security.jpg",
            "https://www.crowdstrike.com/wp-content/uploads/2022/05/cs-101-kubernetes-security.jpg",
            "https://www.crowdstrike.com/wp-content/uploads/2023/03/CS101-Kubernetes-vs-Docker.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Arfan Sharif",
            "Chilterns University",
            "Sales Engineering"
        ],
        "publish_date": "2022-09-28T20:52:23+00:00",
        "summary": "",
        "meta_description": "Container orchestration engines (COEs) make managing containerized workloads easier by automating operational tasks. Kubernetes and Apache Mesos are two of the most popular COEs.",
        "meta_lang": "en",
        "meta_favicon": "https://www.crowdstrike.com/wp-content/uploads/2024/03/cropped-favicon-32x32.png",
        "meta_site_name": "crowdstrike.com",
        "canonical_link": "https://www.crowdstrike.com/cybersecurity-101/observability/kubernetes-vs-mesos/",
        "text": "Container orchestration engines (COEs) make managing containerized workloads easier by automating operational tasks like scheduling, load balancing, scaling, networking, ensuring high availability (HA), and managing logs. Kubernetes and Apache Mesos are two of the most popular COEs.\n\nThese two technologies take different approaches to container management. Kubernetes works purely as a container orchestrator. Mesos is more like an âoperating system for your data center.â\n\nIn this article, weâll discuss Kubernetes and Mesos and compare their key features. However, weâll start by introducing COEs and why theyâre essential for managing containers.\n\nWhy Do You Need Container Orchestration Engines?\n\nMost distributed applications today are built on containers. Containers require fewer resources and help to make application development faster and more secure.\n\nManaging ten or twenty containers is quite simple, but a team can quickly become overwhelmed when the number of containers grows to hundreds or thousands across a distributed network. Although containers are lightweight and short-lived, running them in large clusters makes for many moving pieces that need simultaneous coordination.\n\nIn addition, most production container environments can be complex. They can run multiple operating systems (or the same OS with different kernel versions) and have complex network and security configurations. Multi-cloud or hybrid environments add even more complexity to the mix.\n\nThis is where COEs come in.\n\nCOEs simplify and automate tasks related to container management, and those tasks include:\n\nDeployment\n\nLoad balancing\n\nContainer scheduling\n\nResource allocation\n\nPerformance monitoring\n\nConfiguring networks\n\nThe automation makes it much easier to run large-scale containerized environments, freeing up the DevOps team to pursue more value-added tasks.\n\nCOEs also ensure application availability by automating health checks. Load balancing ensures that requests are automatically routed to healthy container instances, and autoscaling ensures a sufficient number of containers are available to handle the present load.\n\nA Brief Introduction to Kubernetes and Mesos\n\nKubernetes is the container management and orchestration system released by Google in 2014. Given their reliance on Docker, Google developed Kubernetes to deploy and schedule containers at scale, manage cluster resources, implement HA, and route application traffic.\n\nToday, most cloud service providers (including the major ones) support Kubernetes and provide infrastructure and integrations for running Kubernetes-hosted workloads.\n\nSome of the main Kubernetes features include:\n\nAuto-scaling\n\nStorage orchestration\n\nVolume management\n\nSecret and configuration management\n\nAutomatic rollbacks\n\nBatch execution\n\nService discovery\n\nAutomatic bin-packing\n\nKubernetes also has strong support from the DevOps community, and many vendors offer free or commercial applications that add extra features on top of Kubernetes.\n\nMesos is a distributed kernel that was created by Ph.D. students at UC Berkeley in 2009. It abstracts compute resources like CPU, memory, and storage from machines (both physical and virtual) running across on-premise or cloud tenancies. The Mesos kernel runs on each machine in distributed environments, and both containerized and non-containerized workloads can use the Mesos API for resource management and scheduling.\n\nWhen comparing Mesos to Kubernetes in this article, weâll refer to Mesos and Marathon. Marathon is a plugin for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos, allowing users to manage containers easily.\n\nFeatures from the Mesos and Marathon combination include:\n\nAPIs\n\nLinear scalability\n\nPluggable isolation\n\nCross-platform support\n\nTwo-level scheduling\n\nFault-tolerance\n\nReplicated master using ZooKeeper\n\nMulti-language support\n\nMesos is a popular choice among tech giants like Twitter, Netflix, and Airbnb.\n\nKubernetes and Mesos: Feature Comparison\n\nWhen evaluating a COE platform, some of the most important factors to consider are high availability, load balancing, auto-scaling, storage, and networking.\n\nHigh Availability\n\nKubernetes pods can replicate across multiple nodes (VMs and physical servers) to ensure the application remains online even if one of the cluster nodes fails.\n\nThe Kubernetes Control Plane manages the pods and worker nodes across the cluster, and it does so based on node health. Kubernetes takes care of scheduling as well as detecting and responding to failures. You can make Kubernetes highly available by implementing a stacked or external etcd topology with multiple key architecture components (for example, multiple masters or etcd replicas).\n\nFor Mesos, applications run on clusters with multiple Mesos agents to increase availability. You can make Mesos highly available by implementing three to five masters, one leader, and the rest of the nodes as backups. Apache ZooKeeper elects the leader and automatically detects masters, slaves, and scheduler drivers.\n\nLoad Balancing\n\nKubernetes exposes pods externally using âservicesâ (a group of pods under a common name). This lets services discover each other dynamically without requiring hard-coded IP addresses. Services coordinate connections to pods to provide load balancing features.\n\nYou can implement different load balancing strategies with Kubernetes, including:\n\nRound-robin\n\nKube-proxy L4 Round Robin Load Balancing\n\nL7 Round Robin Load Balancing\n\nConsistent Hashing/Ring Hash\n\nMesos-DNS provides basic load balancing services for your application. It generates SRV records for each Mesos task and translates these to the correct IP address and port on the app’s machine. You can also use Marathon-lb to facilitate load balancing.\n\nMesos supports advanced functionality, such as:\n\nSticky connections\n\nSSL offloading\n\nVHost-based load balancing, so you can specify individual VMs for your application\n\nAuto-Scaling\n\nKubernetes allows you to define a target number of pods using deployments. To trigger auto-scaling, you can also define resource metrics thresholds, such as CPU or memory utilization.\n\nMesos continuously monitors the number of containers and schedules a container on another slave node if it fails. It doesnât natively support auto-scaling using resource metrics, but there are some community-supported components.\n\nStorage\n\nKubernetes supports non-persistent, ephemeral volumes like emptyDir, configMap, downwardAPI, and CSI ephemeral for short-term storage.\n\nIt also supports persistent storage (file or block), including iSCSI, NFS, FC, and cloud storage like those available in AWS or Azure. Applications running on Kubernetes-hosted containers donât communicate directly with storage, as Kubernetes abstracts the layer.\n\nMesos supports persistent local storage on reserved resources for stateful applications. Containers must run on the same node because the volumes are created locally on the node.\n\nMesos supports persistent external storage, but bypassing resource management makes quota control, reservation, and fair sharing challenging to enforce.\n\nNetworking\n\nKubernetes allocates unique IPs to pods, removing the need to map container ports to the host port. It operates a flat network, with one network for pods and another for services. Pods can communicate freely with other pods and services. IP tables control connectivity between pods and handle most networking and port forwarding rules.\n\nMesos supports two types of networking: IP-per-container and network-port-mapping. Containers donât get their IPs by default, but using the Calico integration gives every Mesos container its own IP. This prevents port conflicts, removes the need for dynamic port assignment, and allows DNS A-record-based service discovery. Containers are unable to communicate with each other on a local host.\n\nLog Everything, Answer Anything â For Free\n\nFalcon LogScale Community Edition (previously Humio) offers a free modern log management platform for the cloud. Leverage streaming data ingestion to achieve instant visibility across distributed systems and prevent and resolve incidents.\n\nFalcon LogScale Community Edition, available instantly at no cost, includes the following:\n\nIngest up to 16GB per day\n\n7-day retention\n\nNo credit card required\n\nOngoing access with no trial period\n\nIndex-free logging, real-time alerts and live dashboards\n\nAccess our marketplace and packages, including guides to build new packages\n\nLearn and collaborate with an active community"
    }
}