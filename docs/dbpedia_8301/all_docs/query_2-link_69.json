{
    "id": "dbpedia_8301_2",
    "rank": 69,
    "data": {
        "url": "https://docs.chef.io/habitat/mesos_dcos/",
        "read_more_link": "",
        "language": "en",
        "title": "Apache Mesos and DC/OS",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.chef.io/images/progress-chef-primary-logo.svg",
            "https://docs.chef.io/images/habitat/mesos1-services-marathon.png",
            "https://docs.chef.io/images/habitat/mesos2-new-application.png",
            "https://docs.chef.io/images/habitat/mesos3-new-application-json.png",
            "https://docs.chef.io/images/habitat/mesos4-application.png",
            "https://docs.chef.io/images/habitat/mesos5-debugging.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Apache Mesos and DC/OS",
        "meta_lang": "en",
        "meta_favicon": "/images/progress-emoticon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.chef.io/habitat/mesos_dcos/",
        "text": "Apache Mesos is an open source distributed systems kernel and the distributed systems kernel for Mesosphere’s DC/OS distributed platform.\n\nMesos Containerizers\n\nMesos has support for containerizers for running commands and applications within isolated containers. Mesos supports Docker and its own Mesos containerizer format. The Mesos containerizer provides lightweight containerization with cgroups/namespaces isolation without actual isolation. The hab pkg export mesos command creates a mostly empty base filesystem with the application and the Chef Habitat Supervisor and packages it into a compressed tarball.\n\nMarathon Applications\n\nMarathon is a container orchestration platform for Mesos and DC/OS, handling the scheduling and deployment of applications. Marathon applications support Docker and the Mesos container formats, wrapping them in JSON metadata describing the resources needed to deploy the application. Once the application has been deployed to Marathon, it schedules it across the Mesos cluster and ensures the application is running optimally.\n\nExport to a Mesos Container and Marathon Application\n\nYou can create native Mesos containers from Chef Habitat packages by following these steps:\n\nCreate an interactive studio in any directory with the hab studio enter command.\n\nInstall or build the Chef Habitat package from which you want to create a Marathon application, for example:\n\n$ hab pkg install yourorigin/yourpackage\n\nRun the Mesos exporter on the package.\n\n$ hab pkg export mesos yourorigin/yourpackage\n\nThis will create a Mesos container-format tarball in the results directory, and also print the JSON needed to load the application into Marathon. Note that the tarball needs to be uploaded to a download location and the \"uris\" in the JSON need to be updated manually. This is an example of the output:\n\n{ \"id\": \"yourorigin/yourpackage\", \"cmd\": \"/bin/id -u hab &>/dev/null || /sbin/useradd hab; /bin/chown -R hab:hab *; mount -t proc proc proc/; mount -t sysfs sys sys/;mount -o bind /dev dev/; /usr/sbin/chroot . ./init.sh start yourorigin/yourpackage\", \"cpus\": 0.5, \"disk\": 0, \"mem\": 256, \"instances\": 1, \"uris\": [ \"https://storage.googleapis.com/mesos-habitat/yourorigin/yourpackage-0.0.1-20160611121519.tgz\" ] }\n\nNote that the default resource allocation for the application is very small: 0.5 units of CPU, no disk, one instance, and 256MB of memory. To change these resource allocations, pass different values to the Mesos exporter as command line options (defaults are documented with --help).\n\nFrom the DC/OS web interface, launch the Marathon Service.\n\nSelect “Create Application”.\n\nClick on the “JSON Mode” selector and enter the JSON output of the Mesos exporter and click “Create Application”.\n\nMarathon will then deploy the application and enter the “Running” status.\n\nDebugging\n\nYou can get to the output from the running application by clicking on the “Marathon” service from the DC/OS “Services” tab. Select the application and the “Log Viewer” and choose either the “Error” or “Output” to see stderr and stdout respectively. If you have SSH access into the nodes, the Mesos container directories are beneath /var/lib/mesos/slave/slaves.\n\nFuture Enhancements\n\nThis is a basic integration, there are many improvements yet to be made. Here are a few examples:"
    }
}