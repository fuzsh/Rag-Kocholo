{
    "id": "dbpedia_8301_2",
    "rank": 24,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Apache_Spark",
        "read_more_link": "",
        "language": "en",
        "title": "Apache Spark",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/1200px-Apache_Spark_logo.svg.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/1200px-Apache_Spark_logo.svg.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/250px-Apache_Spark_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2012-11-17T10:01:26+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Apache_Spark",
        "text": "Open-source data analytics cluster computing framework\n\nApache SparkOriginal author(s)Matei ZahariaDeveloper(s)Apache SparkInitial releaseMay 26, 2014; 10 years ago ( )Stable release\n\n3.5.0 (Scala 2.13) / September 9, 2023; 11 months ago ( )\n\nRepositorySpark RepositoryWritten inScala[1]Operating systemMicrosoft Windows, macOS, LinuxAvailable inScala, Java, SQL, Python, R, C#, F#TypeData analytics, machine learning algorithmsLicenseApache License 2.0Websitespark .apache .org\n\nApache Spark is an open-source unified analytics engine for large-scale data processing. Spark provides an interface for programming clusters with implicit data parallelism and fault tolerance. Originally developed at the University of California, Berkeley's AMPLab, the Spark codebase was later donated to the Apache Software Foundation, which has maintained it since.\n\nOverview\n\n[edit]\n\nApache Spark has its architectural foundation in the resilient distributed dataset (RDD), a read-only multiset of data items distributed over a cluster of machines, that is maintained in a fault-tolerant way.[2] The Dataframe API was released as an abstraction on top of the RDD, followed by the Dataset API. In Spark 1.x, the RDD was the primary application programming interface (API), but as of Spark 2.x use of the Dataset API is encouraged[3] even though the RDD API is not deprecated.[4][5] The RDD technology still underlies the Dataset API.[6][7]\n\nSpark and its RDDs were developed in 2012 in response to limitations in the MapReduce cluster computing paradigm, which forces a particular linear dataflow structure on distributed programs: MapReduce programs read input data from disk, map a function across the data, reduce the results of the map, and store reduction results on disk. Spark's RDDs function as a working set for distributed programs that offers a (deliberately) restricted form of distributed shared memory.[8]\n\nInside Apache Spark the workflow is managed as a directed acyclic graph (DAG). Nodes represent RDDs while edges represent the operations on the RDDs.\n\nSpark facilitates the implementation of both iterative algorithms, which visit their data set multiple times in a loop, and interactive/exploratory data analysis, i.e., the repeated database-style querying of data. The latency of such applications may be reduced by several orders of magnitude compared to Apache Hadoop MapReduce implementation.[2][9] Among the class of iterative algorithms are the training algorithms for machine learning systems, which formed the initial impetus for developing Apache Spark.[10]\n\nApache Spark requires a cluster manager and a distributed storage system. For cluster management, Spark supports standalone (native Spark cluster, where you can launch a cluster either manually or use the launch scripts provided by the install package. It is also possible to run these daemons on a single machine for testing), Hadoop YARN, Apache Mesos or Kubernetes.[11] For distributed storage, Spark can interface with a wide variety, including Alluxio, Hadoop Distributed File System (HDFS),[12] MapR File System (MapR-FS),[13] Cassandra,[14] OpenStack Swift, Amazon S3, Kudu, Lustre file system,[15] or a custom solution can be implemented. Spark also supports a pseudo-distributed local mode, usually used only for development or testing purposes, where distributed storage is not required and the local file system can be used instead; in such a scenario, Spark is run on a single machine with one executor per CPU core.\n\nSpark Core\n\n[edit]\n\nSpark Core is the foundation of the overall project. It provides distributed task dispatching, scheduling, and basic I/O functionalities, exposed through an application programming interface (for Java, Python, Scala, .NET[16] and R) centered on the RDD abstraction (the Java API is available for other JVM languages, but is also usable for some other non-JVM languages that can connect to the JVM, such as Julia[17]). This interface mirrors a functional/higher-order model of programming: a \"driver\" program invokes parallel operations such as map, filter or reduce on an RDD by passing a function to Spark, which then schedules the function's execution in parallel on the cluster.[2] These operations, and additional ones such as joins, take RDDs as input and produce new RDDs. RDDs are immutable and their operations are lazy; fault-tolerance is achieved by keeping track of the \"lineage\" of each RDD (the sequence of operations that produced it) so that it can be reconstructed in the case of data loss. RDDs can contain any type of Python, .NET, Java, or Scala objects.\n\nBesides the RDD-oriented functional style of programming, Spark provides two restricted forms of shared variables: broadcast variables reference read-only data that needs to be available on all nodes, while accumulators can be used to program reductions in an imperative style.[2]\n\nA typical example of RDD-centric functional programming is the following Scala program that computes the frequencies of all words occurring in a set of text files and prints the most common ones. Each map, flatMap (a variant of map) and reduceByKey takes an anonymous function that performs a simple operation on a single data item (or a pair of items), and applies its argument to transform an RDD into a new RDD.\n\nvalconf=newSparkConf().setAppName(\"wiki_test\")// create a spark config object valsc=newSparkContext(conf)// Create a spark context valdata=sc.textFile(\"/path/to/somedir\")// Read files from \"somedir\" into an RDD of (filename, content) pairs. valtokens=data.flatMap(_.split(\" \"))// Split each file into a list of tokens (words). valwordFreq=tokens.map((_,1)).reduceByKey(_+_)// Add a count of one to each token, then sum the counts per word type. wordFreq.sortBy(s=>-s._2).map(x=>(x._2,x._1)).top(10)// Get the top 10 words. Swap word and count to sort by count.\n\nSpark SQL\n\n[edit]\n\nSpark SQL is a component on top of Spark Core that introduced a data abstraction called DataFrames,[a] which provides support for structured and semi-structured data. Spark SQL provides a domain-specific language (DSL) to manipulate DataFrames in Scala, Java, Python or .NET.[16] It also provides SQL language support, with command-line interfaces and ODBC/JDBC server. Although DataFrames lack the compile-time type-checking afforded by RDDs, as of Spark 2.0, the strongly typed DataSet is fully supported by Spark SQL as well.\n\nimportorg.apache.spark.sql.SparkSession valurl=\"jdbc:mysql://yourIP:yourPort/test?user=yourUsername;password=yourPassword\"// URL for your database server. valspark=SparkSession.builder().getOrCreate()// Create a Spark session object valdf=spark .read .format(\"jdbc\") .option(\"url\",url) .option(\"dbtable\",\"people\") .load() df.printSchema()// Looks at the schema of this DataFrame. valcountsByAge=df.groupBy(\"age\").count()// Counts people by age //or alternatively via SQL: //df.createOrReplaceTempView(\"people\") //val countsByAge = spark.sql(\"SELECT age, count(*) FROM people GROUP BY age\")\n\nSpark Streaming\n\n[edit]\n\nSpark Streaming uses Spark Core's fast scheduling capability to perform streaming analytics. It ingests data in mini-batches and performs RDD transformations on those mini-batches of data. This design enables the same set of application code written for batch analytics to be used in streaming analytics, thus facilitating easy implementation of lambda architecture.[19][20] However, this convenience comes with the penalty of latency equal to the mini-batch duration. Other streaming data engines that process event by event rather than in mini-batches include Storm and the streaming component of Flink.[21] Spark Streaming has support built-in to consume from Kafka, Flume, Twitter, ZeroMQ, Kinesis, and TCP/IP sockets.[22]\n\nIn Spark 2.x, a separate technology based on Datasets, called Structured Streaming, that has a higher-level interface is also provided to support streaming.[23]\n\nSpark can be deployed in a traditional on-premises data center as well as in the cloud.[24]\n\nMLlib Machine Learning Library\n\n[edit]\n\nSpark MLlib is a distributed machine-learning framework on top of Spark Core that, due in large part to the distributed memory-based Spark architecture, is as much as nine times as fast as the disk-based implementation used by Apache Mahout (according to benchmarks done by the MLlib developers against the alternating least squares (ALS) implementations, and before Mahout itself gained a Spark interface), and scales better than Vowpal Wabbit.[25] Many common machine learning and statistical algorithms have been implemented and are shipped with MLlib which simplifies large scale machine learning pipelines, including:\n\nsummary statistics, correlations, stratified sampling, hypothesis testing, random data generation[26]\n\nclassification and regression: support vector machines, logistic regression, linear regression, naive Bayes classification, Decision Tree, Random Forest, Gradient-Boosted Tree\n\ncollaborative filtering techniques including alternating least squares (ALS)\n\ncluster analysis methods including k-means, and latent Dirichlet allocation (LDA)\n\ndimensionality reduction techniques such as singular value decomposition (SVD), and principal component analysis (PCA)\n\nfeature extraction and transformation functions\n\noptimization algorithms such as stochastic gradient descent, limited-memory BFGS (L-BFGS)\n\nGraphX\n\n[edit]\n\nGraphX is a distributed graph-processing framework on top of Apache Spark. Because it is based on RDDs, which are immutable, graphs are immutable and thus GraphX is unsuitable for graphs that need to be updated, let alone in a transactional manner like a graph database.[27] GraphX provides two separate APIs for implementation of massively parallel algorithms (such as PageRank): a Pregel abstraction, and a more general MapReduce-style API.[28] Unlike its predecessor Bagel, which was formally deprecated in Spark 1.6, GraphX has full support for property graphs (graphs where properties can be attached to edges and vertices).[29]\n\nLike Apache Spark, GraphX initially started as a research project at UC Berkeley's AMPLab and Databricks, and was later donated to the Apache Software Foundation and the Spark project.[30]\n\nLanguage support\n\n[edit]\n\nApache Spark has built-in support for Scala, Java, SQL, R, and Python with 3rd party support for the .NET CLR,[31] Julia,[32] and more.\n\nHistory\n\n[edit]\n\nSpark was initially started by Matei Zaharia at UC Berkeley's AMPLab in 2009, and open sourced in 2010 under a BSD license.[33]\n\nIn 2013, the project was donated to the Apache Software Foundation and switched its license to Apache 2.0. In February 2014, Spark became a Top-Level Apache Project.[34]\n\nIn November 2014, Spark founder M. Zaharia's company Databricks set a new world record in large scale sorting using Spark.[35][33]\n\nSpark had in excess of 1000 contributors in 2015,[36] making it one of the most active projects in the Apache Software Foundation[37] and one of the most active open source big data projects.\n\nVersion Original release date Latest version Release date Old version, no longer maintained: 0.5 2012-06-12 0.5.2 2012-11-22 Old version, no longer maintained: 0.6 2012-10-15 0.6.2 2013-02-07 Old version, no longer maintained: 0.7 2013-02-27 0.7.3 2013-07-16 Old version, no longer maintained: 0.8 2013-09-25 0.8.1 2013-12-19 Old version, no longer maintained: 0.9 2014-02-02 0.9.2 2014-07-23 Old version, no longer maintained: 1.0 2014-05-26 1.0.2 2014-08-05 Old version, no longer maintained: 1.1 2014-09-11 1.1.1 2014-11-26 Old version, no longer maintained: 1.2 2014-12-18 1.2.2 2015-04-17 Old version, no longer maintained: 1.3 2015-03-13 1.3.1 2015-04-17 Old version, no longer maintained: 1.4 2015-06-11 1.4.1 2015-07-15 Old version, no longer maintained: 1.5 2015-09-09 1.5.2 2015-11-09 Old version, no longer maintained: 1.6 2016-01-04 1.6.3 2016-11-07 Old version, no longer maintained: 2.0 2016-07-26 2.0.2 2016-11-14 Old version, no longer maintained: 2.1 2016-12-28 2.1.3 2018-06-26 Old version, no longer maintained: 2.2 2017-07-11 2.2.3 2019-01-11 Old version, no longer maintained: 2.3 2018-02-28 2.3.4 2019-09-09 Old version, no longer maintained: 2.4 LTS 2018-11-02 2.4.8 2021-05-17[38] Old version, no longer maintained: 3.0 2020-06-18 3.0.3 2021-06-01[39] Old version, no longer maintained: 3.1 2021-03-02 3.1.3 2022-02-18[40] Old version, no longer maintained: 3.2 2021-10-13 3.2.4 2023-04-13[41] Current stable version: 3.3 2022-06-16 3.3.3 2023-08-21[42] Current stable version: 3.4 2023-04-13 3.4.3 2024-04-18[43] Current stable version: 3.5 2023-09-09 3.5.1 2024-02-23[44]\n\nLegend:\n\nOld version\n\nOlder version, still maintained\n\nLatest version\n\nLatest preview version\n\nFuture release\n\nScala Version\n\n[edit]\n\nSpark 3.5.0 is based on Scala 2.13 (and thus works with Scala 2.12 and 2.13 out-of-the-box), but it can also be made to work with Scala 3.[45]\n\nDevelopers\n\n[edit]\n\nApache Spark is developed by a community. The project is managed by a group called the \"Project Management Committee\" (PMC).[46]\n\nMaintenance releases and EOL\n\n[edit]\n\nFeature release branches will, generally, be maintained with bug fix releases for a period of 18 months. For example, branch 2.3.x is no longer considered maintained as of September 2019, 18 months after the release of 2.3.0 in February 2018. No more 2.3.x releases should be expected after that point, even for bug fixes.\n\nThe last minor release within a major a release will typically be maintained for longer as an “LTS” release. For example, 2.4.0 was released on November 2, 2018, and had been maintained for 31 months until 2.4.8 was released in May 2021. 2.4.8 is the last release and no more 2.4.x releases should be expected even for bug fixes.[47]\n\nSee also\n\n[edit]\n\nList of concurrent and parallel programming APIs/Frameworks\n\nNotes\n\n[edit]\n\nReferences\n\n[edit]"
    }
}