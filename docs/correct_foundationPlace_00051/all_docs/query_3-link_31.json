{
    "id": "correct_foundationPlace_00051_3",
    "rank": 31,
    "data": {
        "url": "https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/",
        "read_more_link": "",
        "language": "en",
        "title": "Pod Quality of Service Classes",
        "top_image": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "meta_img": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-04-20T00:16:58+01:00",
        "summary": "",
        "meta_description": "This page introduces Quality of Service (QoS) classes in Kubernetes, and explains how Kubernetes assigns a QoS class to each Pod as a consequence of the resource constraints that you specify for the containers in that Pod. Kubernetes relies on this classification to make decisions about which Pods to evict when there are not enough available resources on a Node.\nQuality of Service classes Kubernetes classifies the Pods that you run and allocates each Pod into a specific quality of service (QoS) class.",
        "meta_lang": "en",
        "meta_favicon": "/images/kubernetes.png",
        "meta_site_name": "",
        "canonical_link": "https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/",
        "text": "This page introduces Quality of Service (QoS) classes in Kubernetes, and explains how Kubernetes assigns a QoS class to each Pod as a consequence of the resource constraints that you specify for the containers in that Pod. Kubernetes relies on this classification to make decisions about which Pods to evict when there are not enough available resources on a Node.\n\nQuality of Service classes\n\nKubernetes classifies the Pods that you run and allocates each Pod into a specific quality of service (QoS) class. Kubernetes uses that classification to influence how different pods are handled. Kubernetes does this classification based on the resource requests of the Containers in that Pod, along with how those requests relate to resource limits. This is known as Quality of Service (QoS) class. Kubernetes assigns every Pod a QoS class based on the resource requests and limits of its component Containers. QoS classes are used by Kubernetes to decide which Pods to evict from a Node experiencing Node Pressure. The possible QoS classes are Guaranteed, Burstable, and BestEffort. When a Node runs out of resources, Kubernetes will first evict BestEffort Pods running on that Node, followed by Burstable and finally Guaranteed Pods. When this eviction is due to resource pressure, only Pods exceeding resource requests are candidates for eviction.\n\nGuaranteed\n\nPods that are Guaranteed have the strictest resource limits and are least likely to face eviction. They are guaranteed not to be killed until they exceed their limits or there are no lower-priority Pods that can be preempted from the Node. They may not acquire resources beyond their specified limits. These Pods can also make use of exclusive CPUs using the static CPU management policy.\n\nCriteria\n\nFor a Pod to be given a QoS class of Guaranteed:\n\nEvery Container in the Pod must have a memory limit and a memory request.\n\nFor every Container in the Pod, the memory limit must equal the memory request.\n\nEvery Container in the Pod must have a CPU limit and a CPU request.\n\nFor every Container in the Pod, the CPU limit must equal the CPU request.\n\nBurstable\n\nPods that are Burstable have some lower-bound resource guarantees based on the request, but do not require a specific limit. If a limit is not specified, it defaults to a limit equivalent to the capacity of the Node, which allows the Pods to flexibly increase their resources if resources are available. In the event of Pod eviction due to Node resource pressure, these Pods are evicted only after all BestEffort Pods are evicted. Because a Burstable Pod can include a Container that has no resource limits or requests, a Pod that is Burstable can try to use any amount of node resources.\n\nCriteria\n\nA Pod is given a QoS class of Burstable if:\n\nThe Pod does not meet the criteria for QoS class Guaranteed.\n\nAt least one Container in the Pod has a memory or CPU request or limit.\n\nBestEffort\n\nPods in the BestEffort QoS class can use node resources that aren't specifically assigned to Pods in other QoS classes. For example, if you have a node with 16 CPU cores available to the kubelet, and you assign 4 CPU cores to a Guaranteed Pod, then a Pod in the BestEffort QoS class can try to use any amount of the remaining 12 CPU cores.\n\nThe kubelet prefers to evict BestEffort Pods if the node comes under resource pressure.\n\nCriteria\n\nA Pod has a QoS class of BestEffort if it doesn't meet the criteria for either Guaranteed or Burstable. In other words, a Pod is BestEffort only if none of the Containers in the Pod have a memory limit or a memory request, and none of the Containers in the Pod have a CPU limit or a CPU request. Containers in a Pod can request other resources (not CPU or memory) and still be classified as BestEffort.\n\nMemory QoS with cgroup v2\n\nFEATURE STATE: Kubernetes v1.22 [alpha]\n\nMemory QoS uses the memory controller of cgroup v2 to guarantee memory resources in Kubernetes. Memory requests and limits of containers in pod are used to set specific interfaces memory.min and memory.high provided by the memory controller. When memory.min is set to memory requests, memory resources are reserved and never reclaimed by the kernel; this is how Memory QoS ensures memory availability for Kubernetes pods. And if memory limits are set in the container, this means that the system needs to limit container memory usage; Memory QoS uses memory.high to throttle workload approaching its memory limit, ensuring that the system is not overwhelmed by instantaneous memory allocation.\n\nMemory QoS relies on QoS class to determine which settings to apply; however, these are different mechanisms that both provide controls over quality of service.\n\nSome behavior is independent of QoS class\n\nCertain behavior is independent of the QoS class assigned by Kubernetes. For example:\n\nAny Container exceeding a resource limit will be killed and restarted by the kubelet without affecting other Containers in that Pod.\n\nIf a Container exceeds its resource request and the node it runs on faces resource pressure, the Pod it is in becomes a candidate for eviction. If this occurs, all Containers in the Pod will be terminated. Kubernetes may create a replacement Pod, usually on a different node.\n\nThe resource request of a Pod is equal to the sum of the resource requests of its component Containers, and the resource limit of a Pod is equal to the sum of the resource limits of its component Containers.\n\nThe kube-scheduler does not consider QoS class when selecting which Pods to preempt. Preemption can occur when a cluster does not have enough resources to run all the Pods you defined.\n\nWhat's next"
    }
}