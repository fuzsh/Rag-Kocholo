{
    "id": "dbpedia_3522_3",
    "rank": 7,
    "data": {
        "url": "https://support.microsoft.com/en-us/office/guide-to-table-relationships-30446197-4fbe-457b-b992-2f6fb812b58f",
        "read_more_link": "",
        "language": "en",
        "title": "Guide to table relationships",
        "top_image": "https://support.microsoft.com/favicon-32x32.png",
        "meta_img": "https://support.microsoft.com/favicon-32x32.png",
        "images": [
            "https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31",
            "https://support.content.office.net/en-us/media/eb1f78c9-7c04-4f94-a6b3-0e73dcaf1c37.gif",
            "https://support.content.office.net/en-us/media/3b5d9d75-f7a3-42dd-81b2-9afa081fd5c5.gif",
            "https://support.microsoft.com/images/Facebook-GrayScale.png",
            "https://support.microsoft.com/images/Linkedin-GrayScale.png",
            "https://support.microsoft.com/images/Mail-GrayScale.png",
            "https://support.content.office.net/en-us/media/f4e85874-2a1a-438d-9c3c-17b069c454c0.png",
            "https://support.content.office.net/en-us/media/a9241eee-a729-4513-97b4-5b87c381c21b.png",
            "https://support.content.office.net/en-us/media/9e557d93-f803-44df-a274-1282d542cf63.png",
            "https://support.content.office.net/en-us/media/fbf6e41b-ddbe-43db-a616-7a8e48d43d18.png",
            "https://support.content.office.net/en-us/media/9255871d-06a6-4de5-9236-5fd7af100c5c.png",
            "https://support.content.office.net/en-us/media/ccb7c2a6-17dd-4cc3-88b7-8da966e59f59.png",
            "https://support.content.office.net/en-us/media/bcd2fdf1-530a-482f-b96d-5f2f2a49ac66.png",
            "https://support.content.office.net/en-us/media/f4e85874-2a1a-438d-9c3c-17b069c454c0.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Link tables in Access desktop databases by adding joins and creating relationships.",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://support.microsoft.com/en-us/office/guide-to-table-relationships-30446197-4fbe-457b-b992-2f6fb812b58f",
        "text": "One of the goals of good database design is to remove data redundancy (duplicate data). To achieve that goal, you divide your data into many subject-based tables so that each fact is represented only once. You then provide Access with a way to bring the divided information back together — you do this by placing common fields in tables that are related. To do this step correctly, though, you have to understand the relationships between your tables, and then specify these relationships in your database.\n\nIn this article\n\nIntroduction\n\nTypes of table relationships\n\nWhy create table relationships?\n\nUnderstanding referential integrity\n\nView table relationships\n\nIntroduction\n\nAfter you have created a table for each subject in your database, you have to give Access a way to bring that information back together again when needed. You do this by placing common fields in tables that are related, and by defining relationships between your tables. You can then create queries, forms, and reports that display information from several tables at once. For example, the form shown here includes information drawn from several tables:\n\n1. Information in this form comes from the Customers table...\n\n2. ...the Orders table...\n\n3. ...the Products table...\n\n4. ...and the Order Details table.\n\nThe customer name in the Bill To box is retrieved from the Customers table, the Order ID and the Order Date values come from the Orders table, the Product name comes from the Products table, and the Unit Price and Quantity values come from the Order Details table. These tables are linked to each other in a variety of ways to bring information from each into the form.\n\nIn the preceding example, the fields in the tables must be coordinated so that they show information about the same order. This coordination is accomplished by using table relationships. A table relationship works by matching data in key fields — often a field with the same name in both tables. In most cases, these matching fields are the primary key from one table, which provides a unique identifier for each record, and a foreign key in the other table. For example, employees can be associated with orders for which they are responsible by creating a table relationship between the EmployeeID fields in the Employees and the Orders tables.\n\n1. EmployeeID appears in both tables — as a primary key ...\n\n2. ... and as a foreign key.\n\nTop of Page\n\nTypes of table relationships\n\nThere are three types of table relationships in Access.\n\nA one-to-many relationship\n\nLet’s use an order tracking database that includes a Customers table and an Orders table as an example. A customer can place any number of orders. It follows that for any customer represented in the Customers table, there might be many orders represented in the Orders table. The relationship between the Customers table and the Orders table is a one-to-many relationship.\n\nTo represent a one-to-many relationship in your database design, take the primary key on the \"one\" side of the relationship and add it as an additional field or fields to the table on the \"many\" side of the relationship. In this case, for example, you add a new field — the ID field from the Customers table — to the Orders table and name it Customer ID. Access can then use the Customer ID number in the Orders table to locate the correct customer for each order.\n\nA many-to-many relationship\n\nNow let’s look at the relationship between a Products table and an Orders table. A single order can include more than one product. On the other hand, a single product can appear on many orders. Therefore, for each record in the Orders table, there can be many records in the Products table. In addition, for each record in the Products table, there can be many records in the Orders table. This relationship is called a many-to-many relationship. Note that to detect existing many-to-many relationships between your tables, it is important that you consider both sides of the relationship.\n\nTo represent a many-to-many relationship, you must create a third table, often called a junction table, that breaks down the many-to-many relationship into two one-to-many relationships. You insert the primary key from each of the two tables into the third table. As a result, the third table records each occurrence, or instance, of the relationship. For example, the Orders table and the Products table have a many-to-many relationship that is defined by creating two one-to-many relationships to the Order Details table. One order can have many products, and each product can appear on many orders.\n\nA one-to-one relationship\n\nIn a one-to-one relationship, each record in the first table can have only one matching record in the second table, and each record in the second table can have only one matching record in the first table. This relationship is not common because, most often, the information related in this way is stored in the same table. You might use a one-to-one relationship to divide a table with many fields, to isolate part of a table for security reasons, or to store information that applies only to a subset of the main table. When you do identify such a relationship, both tables must share a common field.\n\nTop of Page\n\nWhy create table relationships?\n\nYou can create table relationships explicitly by using the Relationships window, or by dragging a field from the Field List pane. Access uses table relationships to decide how to join tables when you need to use them in a database object. There are several reasons why you should create table relationships before you create other database objects, such as forms, queries and reports.\n\nTable relationships inform your query designs\n\nTo work with records from more than one table, you often must create a query that joins the tables. The query works by matching the values in the primary key field of the first table with a foreign key field in the second table. For example, to return rows that list all of the orders for each customer, you construct a query that joins the Customers table with the Orders table based on the Customer ID field. In the Relationships window, you can manually specify the fields to join. But, if you already have a relationship defined between the tables, Access supplies the default join, based on the existing table relationship. In addition, if you use one of the query wizards, Access uses the information it gathers from the table relationships you have already defined to present you with informed choices and to prepopulate property settings with appropriate default values.\n\nTable relationships inform your form and report designs\n\nWhen you design a form or report, Access uses the information it gathers from the table relationships you have already defined to present you with informed choices and to prepopulate property settings with appropriate default values.\n\nTable relationships are the foundation upon which you can enforce referential integrity to help prevent orphan records in your database. An orphan record is a record with a reference to another record that does not exist — for example, an order record that references a customer record that does not exist.\n\nWhen you design a database, you divide your information into tables, each of which has a primary key. You then add foreign keys to related tables that reference those primary keys. These foreign key-primary key pairings form the basis for table relationships and multi-table queries. It’s important that these foreign key-primary key references stay synchronized. Referential integrity, which is dependent on table relationships, helps ensure that references stay synchronized.\n\nTop of Page\n\nUnderstanding referential integrity\n\nWhen you design a database, you divide your database information into many subject-based tables to minimize data redundancy. You then give Access a way to bring the data back together by placing common fields into related tables. For example, to represent a one-to-many relationship you take the primary key from the \"one\" table and add it as an additional field to the \"many\" table. To bring the data back together, Access takes the value in the \"many\" table and looks up the corresponding value in the \"one\" table. In this way the values in the \"many\" table reference the corresponding values in the \"one\" table.\n\nSuppose you have a one-to-many relationship between Shippers and Orders and you want to delete a Shipper. If the shipper you want to delete has orders in the Orders table, those orders will become \"orphans\" when you delete the Shipper record. The orders will still contain a shipper ID, but the ID will no longer be valid, because the record that it references no longer exists.\n\nThe purpose of referential integrity is to prevent orphans and keep references in sync so that this hypothetical situation never occurs.\n\nYou enforce referential integrity by enabling it for a table relationship. Once enforced, Access rejects any operation that violates referential integrity for that table relationship. This means Access will reject both updates that change the target of a reference, and deletions that remove the target of a reference. It’s possible you might have a perfectly valid need to change the primary key for a shipper that has orders in the Orders table. For such cases, what you really need is for Access to automatically update all the effected rows as part of a single operation. That way, Access ensures that the update is completed in full so that your database is not left in an inconsistent state, with some rows updated and some not. For this reason Access supports the Cascade Update Related Fields option. When you enforce referential integrity and choose the Cascade Update Related Fields option, and you then update a primary key, Access automatically updates all fields that reference the primary key.\n\nIt's also possible you might have a valid need to delete a row and all related records — for example, a Shipper record and all related orders for that shipper. For this reason, Access supports the Cascade Delete Related Records option. When you enforce referential integrity and choose the Cascade Delete Related Records option, and you then delete a record on the primary key side of the relationship, Access automatically deletes all records that reference the primary key.\n\nTop of Page\n\nView table relationships\n\nTo view your table relationships, click Relationships on the Database Tools tab. The Relationships window opens and displays any existing relationships. If no table relationships have been defined and you are opening the Relationships window for the first time, Access prompts you to add a table or query to the window.\n\nOpen the Relationships window\n\nClick File, click Open, and then select and open the database.\n\nOn the Database Tools tab, in the Relationships group, click Relationships.\n\nOn the Relationships Design tab, in the Relationships group, click All Relationships.\n\nThis displays all of the defined relationships in your database. Note that hidden tables (tables for which the Hidden check box in the table's Properties dialog box is selected) and their relationships will not be shown unless the Show Hidden Objects check box is selected in the Navigation Options dialog box.\n\nA table relationship is represented by a relationship line drawn between tables in the Relationships window. A relationship that does not enforce referential integrity appears as a thin line between the common fields supporting the relationship. When you select the relationship by clicking its line, the line thickens to indicate it is selected. If you enforce referential integrity for this relationship, the line appears thicker at each end. In addition, the number 1 appears over the thick portion of the line on one side of the relationship, and the infinity symbol (∞) appears over the thick portion of the line on the other side.\n\nWhen the Relationships window is active, you can select from the following commands on the ribbon:\n\nOn the Relationships Design tab, in the Tools group:\n\nEdit Relationships Opens the Edit Relationships dialog box. When you select a relationship line, you can click Edit Relationships to change the table relationship. You can also double-click the relationship line.\n\nClear Layout Removes all tables and relationships from display in the Relationships window. Note that this command only hides the tables and relationships — it does not delete them.\n\nRelationships Report Creates a report that displays the tables and relationships in your database. The report shows only the tables and relationships that are not hidden in the Relationships window.\n\nOn the Relationships Design tab, in the Relationships group:\n\nAdd Tables Enables the selection of tables to show in the Relationships window.\n\nHide Table Hides the selected table in the Relationships window.\n\nDirect Relationships Displays all relationships and related tables for the selected table in the Relationships window, if they are not already displayed.\n\nAll Relationships Displays all of the relationships and related tables in your database in the Relationships window. Note that hidden tables (tables for which the Hidden check box in the table's Properties dialog box is selected) and their relationships will not be shown unless Show Hidden Objects is selected in the Navigation Options dialog box.\n\nClose Closes the Relationships window. If you made any changes to the layout of the Relationships window, you are asked whether to save those changes.\n\nTop of Page"
    }
}