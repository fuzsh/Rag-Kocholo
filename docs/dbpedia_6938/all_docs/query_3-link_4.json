{
    "id": "dbpedia_6938_3",
    "rank": 4,
    "data": {
        "url": "https://wiki.o-ran-sc.org/display/REL/F%2BRelease",
        "read_more_link": "",
        "language": "en",
        "title": "Confluence",
        "top_image": "https://wiki.o-ran-sc.org/wiki/s/357676523/6452/39e1ebae4f6c0358a4275652e624b54ae54d166b/1/_/favicon-update.ico",
        "meta_img": "https://wiki.o-ran-sc.org/wiki/s/357676523/6452/39e1ebae4f6c0358a4275652e624b54ae54d166b/1/_/favicon-update.ico",
        "images": [
            "https://wiki.o-ran-sc.org/wiki/images/logo/default-space-logo-256.png",
            "https://wiki.o-ran-sc.org/wiki/aa-avatar/712020:5b0e3ec9-acb0-43e9-b371-e0a582dd55cd",
            "https://wiki.o-ran-sc.org/wiki/aa-avatar/5d2ca4249d2a1b0c797ef87e",
            "https://wiki.o-ran-sc.org/wiki/aa-avatar/5e866b3f1e9adc0c1847b0d3"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-06-30T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "/wiki/s/357676523/6452/39e1ebae4f6c0358a4275652e624b54ae54d166b/1/_/favicon-update.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "F release plan (<date>):\n\nNew xApps\n\nKPIMON-GO by HCL (pushed to next release)\n\nImproved xApps:\n\nRC (RAN Control) by Mavenir - implements subset of E2 SM RC Ver2.0\n\nAD (Anomaly Detection) by HCL: Will identify a new anomaly type (area anomaly), use geo-location as a feature. Dependency on Data Stream from KPIMON to influxDB. (Currently AD is working on Static data).\n\nQP (QoE Predictor) by HCL: Include prediction for current serving cell, incorporate predicted load as a feature, provide sequence of predictions.\n\nTS (Traffic Steering) by UTFPR (University, Parana, Brazil): Call RC xApp to trigger UE handover, improvements in traffic steering logic.\n\nBouncer by HCL: Increase performance and functional testing capabilities; continue identifying RIC platform bottlenecks.\n\nHW (HelloWorld) demo xApps in C++, go and python by AT&T and Samsung: Add usage of more platform features, update usage of platform features that are evolving.\n\nVIAVI RIC test tool is used to test Traffic Steering use case.\n\nMission: E2 updates with first E2APv2.0 support and improvements in registration and subscription interface in xapp frameworks.\n\nOriginal primary goals: RIC-878 A1 mediator testing in nanobot; RIC-860 xapp testing nanobot enhancements: wider coverage of functionality, e.g., Subscription deletion // RIC-849 Second step of reimplementation of A1 mediator in golang, excl. A1AP-EI // RIC-714 support for DMS REST interface in addition to DMS CLI // RIC-698 Switch from Redis 5 to Redis 6 // partially done only and moved to post-F RIC-704 E2 check, validate and define how various overload and disconnect case are handled, incl. checking highload-results from dawn; RIC-886 Support two SCTP streams in same association for global (support functions) and functional procedures (ric services); RIC-916 new reconnect timer in E2 to reject new connect for x seconds; RIC-888 interface so that xApps can only query E2SMs with a given OID; RIC-722 + RIC-867 base support for E2APv2.0 (same level of functionality as before) in e2t, e2m, submgr, and nodeb-rnib; RIC-638 Adapt configuration transfer capabilities as defined in E2AP v2.0; RIC-383 Epic: implement E2AP RESET as per E2APv2.0; RIC-445 SSH container/pod that includes a RIC CLI ; RIC-870 helm3 in default deployment and move ric platform deployment to ric-dep; RIC-815 ric-dep documentation only in ric-dep and it-dep only has references ; RIC-827 support deployment of ric platform in different k8s namespaces to allow two parallel installations // RIC-808 List subscriptions by xApp debug interface; RIC-375 Remove support for ASN.1 (over RMR) based subscription in subscription manager (incl. xapp modifications) // RIC-705 update xappframework for c++ to change in xApp registration // RIC-906 time series (influx db) wrapper // RIC-642 Add REST subscription support in Python framework\n\nAchieved F release highlights = high-level release notes (2022-05-18) below (note that the release image list is here: link)\n\nwe updated from E2APv1.1 to E2APv2.0 for the existing supported E2 procedures.\n\nAdditionally E2 configuration transfer procedures (in E2 setup and via explicit E2 Node Configuration Update) are now supported.\n\nEnhancements in the handling of E2 disconnect+connect cycles and in SCTP stream handling\n\nxApps can now query the list of RAN functions by E2SM OID (and nodeb ID)\n\nThe reimplementation of the A1 mediator in golang has proceeded, but is not yet ready and not yet replacing the existing python implementation\n\nSwitch from Redis 5 to Redis 6 - primarily due to Redis 5 EOL\n\nThe ric deployment is now possible without the it/dep repo\n\nMore information in the debug interface of the subscription manager (which had some small adaptations for E2APv2.0, but these changes are not visible to xApps using the E2 subscription manager REST interface)\n\nIn addition to the go xapp framework also the python xapp framework support xapp registration and xApp E2 subscriptions via REST.\n\na new influxdb wrapper as component stslgo (shared time-series layer \"golang\")\n\nbug fixes as per link. Bugs relevant to production (i.e., not test) code: RIC-903 DefaultUser setup fails when authentication is enabled for InfluxDB; RIC-895 missing static route entries for service update messages (from E2T to E2M and back); RIC-889 Subscription Manager Swagger YAML file is wrong; RIC-872 RMR routing statistic data printout crash; RIC-885 sdlgo multi-namespace SDL event namespace filter issue; RIC-880 Wrong date in sdl (C++) rpm spec file; RIC-873 SDLCLI get - writes wrongly results to stderr in success case; RIC-862 xapp-frame-py caching of error code data not happening (was: Python RMR Memory Leak); RIC-869 SDLCLI healthcheck - Redis sentinel status is wrong\n\nFor the F release of the near-RT RIC we did only limited integration testing: only the use cases: deploy RIC, deploy xApp and make E2 connection were tested.\n\nFilled in end-of-release checklist : Release criteria checklist - Release F\n\nPrimary Goals:\n\nThe primary goal of Non-RT RIC is to support intelligent RAN optimization by providing policy-based guidance, ML model management and enrichment information to the near-RT RIC function so that the RAN can optimize, e.g., RRM under certain conditions.\n\nIt can also perform intelligent radio resource management function in non-real-time interval (i.e., greater than 1 second).\n\nNon-RT RIC can use data analytics and AI/ML training/inference to determine the RAN optimization actions for which it can leverage SMO services such as data collection and provisioning services of the O-RAN nodes.\n\nNon-RT-RIC will define and coordinate rApps (Non-RT-RIC applications) to perform Non-RT-RIC tasks.\n\nNon-RT-RIC will host the A1 interface (between NONRTRIC & near-RT RICs )\n\nNon-RT-RIC will also host the new R1 interface (between rApps and SMO/NONRTRIC services)\n\nF Release Feature Scope:\n\nThe O-DU Low F release adds support for Massive MIMO, URLLC and it is based on the commercial FlexRan 21.11 release. This release is an incremental improvement over the E-maintenance release code released on March of this year and that still needs to be integrated with the RSYS O-DU High code.\n\nThe O-DU Low F Release code is an Intel contribution in collaboration with Tieto Poland for the source code releases in the O-RAN gerrit and for the binary blobs contributed via GitHub.\n\nFor the documentation preparation of this release Intel worked with collaboration from Fransiscus Bimo and Professor Ray-Guang Cheng from National Taiwan University of Science and Technology (NTUST).\n\nThe F release can be used for end to end testing and it is based on the E maintenance release that was used for the 2021 November US O-RAN Plugfest and tested in conjuction with 2 stack partners and 2 different Test equipment vendors. The Front Haul Interface was also tested for compliance using Keysight's Front Haul Test equipment.\n\nContainer images and deployment instructions are to be provided during the F maintenance release cycle\n\nFeature Scope:\n\nTo set up test automation that can run at release time to verify features and integration (initial efforts to make use of the Open Test Framework were incomplete due to resource issue)\n\nTo add CI/CD Jenkins job against the it/dep repository to start regular validation of OSC components installation/deployment and corresponding health check, which also lay the foundation for future test cases implementation (across OSC components, end-to-end use cases, etc.)\n\nWork with OSC open labs (US east coast, US west coast, Asia Pacific) to facilitate community testing.\n\nExplore the POWDER testbed for OSC integration test needs.\n\nF release source code, container images and deployment instructions\n\nDocker image and instruction on how to install SMO O1 NETCONF interface can be found here.\n\nInstructions on how to install SMO O1/VES interface can be found here.\n\nFor the O1 interface the repository can be found at \"git clone --branch e-release \"https://gerrit.o-ran-sc.org/r/smo/o1mo/o1\", whereas the O1/VES repository can be had by \"git clone --branch e-release \"https://gerrit.o-ran-sc.org/r/smo/ves\"\n\nFor the O2 Interface (Tacker) project\n\nSource code: https://opendev.org/openstack/tacker\n\nCode coverage: Coverage report (rackcdn.com) (Latest OpenStack verification results)"
    }
}