{
    "id": "dbpedia_1844_1",
    "rank": 77,
    "data": {
        "url": "https://stackoverflow.com/questions/13/determine-a-users-timezone",
        "read_more_link": "",
        "language": "en",
        "title": "Determine a user's timezone",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/GPiqz.png?s=64",
            "https://www.gravatar.com/avatar/23c1e2063688620b75b248e08c0d5c24?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/10153640801268875/picture?type=large",
            "https://www.gravatar.com/avatar/b4c7b9374987c46b00b8baa33f601af3?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/1UwNK.jpg?s=64",
            "https://www.gravatar.com/avatar/10bfbb2c24e45e5bc9b7f4665703f7bd?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/889cf720c96957e615463b5c903a5e18?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/d53534df62555444fbae96b767b41b91?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/889cf720c96957e615463b5c903a5e18?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7473eb2342761bbc37f74650bfb73b6c?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/3686aff1d140fd9919c430e151ffdef5?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/6462e33c285d4c2928523458bf3bb401?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/529a6049c4ad4483dbc62add6da06e1a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6fd9c406c6def2ca25e9444766a729ea?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/7qSQw.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/7441d5f2bddcffa3553761319b876d12?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/c2f4df6645e939b9aec8ab79921c5ad5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/2fd9754b62b3a6953874f4ef42978e4d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0de36bbc291aa8962dc2db1771b9b25f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b7bb3ec858b82873113854f73be9404b?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/3a9ff49a9e689dcbfc8242f05180cc31?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/65b02c72404b4e3bad4a026e275f089e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/xrze6.jpg?s=64",
            "https://www.gravatar.com/avatar/bca30c953bb511410eab038890454e49?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/499ee2acd8e0688d0b11dde6a09d7441?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/6c5e950fdb55c2c4592e1be5e4c0d998?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/lXODr.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/4fb57116a43c4f120142a18f3e33727f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/518bacf2e4ad4e4b8f026f6497221fed?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d35e61e8cdad5964fe1f7a9719965993?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/sKmSE.jpg?s=64",
            "https://i.sstatic.net/d5JiM.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/90fb1fec317297f413e587e078566acf?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/2145918282090342/picture?type=large",
            "https://www.gravatar.com/avatar/3f029f1fe1b13872be86f5694bd05c40?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://stackoverflow.com/posts/13/ivc/374f?prg=a989b40e-2870-4583-86c1-79cfd8e02e1a"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2008-08-01T00:42:38",
        "summary": "",
        "meta_description": "Is there a standard way for a web server to be able to determine a user's timezone within a web page? \n\nPerhaps from an HTTP header or part of the user-agent string?",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/13/determine-a-users-timezone",
        "text": "First, understand that time zone detection in JavaScript is imperfect. You can get the local time zone offset for a particular date and time using getTimezoneOffset on an instance of the Date object, but that's not quite the same as a full IANA time zone like America/Los_Angeles.\n\nThere are some options that can work though:\n\nMost modern browsers support IANA time zones in their implementation of the ECMAScript Internationalization API, so you can do this:\n\nconst tzid = Intl.DateTimeFormat().resolvedOptions().timeZone; console.log(tzid);\n\nThe result is a string containing the IANA time zone setting of the computer where the code is running.\n\nSupported environments are listed in the Intl compatibility table. Expand the DateTimeFormat section, and look at the feature named resolvedOptions().timeZone defaults to the host environment. They're also listed in the MDN browser compatibility table of Intl.DateTimeFormat.prototype.resolvedOptions in the row labeled \"computed timeZone\"\n\nSome libraries, such as Luxon use this API to determine the time zone through functions like luxon.Settings.defaultZoneName.\n\nIf you need to support an wider set of environments, such as older web browsers, you can use a library to make an educated guess at the time zone. They work by first trying the Intl API if it's available, and when it's not available, they interrogate the getTimezoneOffset function of the Date object, for several different points in time, using the results to choose an appropriate time zone from an internal data set.\n\nBoth jsTimezoneDetect and moment-timezone have this functionality.\n\n// using jsTimeZoneDetect var tzid = jstz.determine().name(); // using moment-timezone var tzid = moment.tz.guess();\n\nIn both cases, the result can only be thought of as a guess. The guess may be correct in many cases, but not all of them.\n\nAdditionally, these libraries have to be periodically updated to counteract the fact that many older JavaScript implementations are only aware of the current daylight saving time rule for their local time zone. More details on that here.\n\nUltimately, a better approach is to actually ask your user for their time zone. Provide a setting that they can change. You can use one of the above options to choose a default setting, but don't make it impossible to deviate from that in your app.\n\nThere's also the entirely different approach of not relying on the time zone setting of the user's computer at all. Instead, if you can gather latitude and longitude coordinates, you can resolve those to a time zone using one of these methods. This works well on mobile devices.\n\nUsing Unkwntech's approach, I wrote a function using jQuery and PHP. This is tested and does work!\n\nOn the PHP page where you want to have the timezone as a variable, have this snippet of code somewhere near the top of the page:\n\n<?php session_start(); $timezone = $_SESSION['time']; ?>\n\nThis will read the session variable \"time\", which we are now about to create.\n\nOn the same page, in the <head>, you need to first of all include jQuery:\n\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\n\nAlso in the <head>, below the jQuery, paste this:\n\n<script type=\"text/javascript\"> $(document).ready(function() { if(\"<?php echo $timezone; ?>\".length==0){ var visitortime = new Date(); var visitortimezone = \"GMT \" + -visitortime.getTimezoneOffset()/60; $.ajax({ type: \"GET\", url: \"http://example.org/timezone.php\", data: 'time='+ visitortimezone, success: function(){ location.reload(); } }); } }); </script>\n\nYou may or may not have noticed, but you need to change the URL to your actual domain.\n\nOne last thing. You are probably wondering what the heck timezone.php is. Well, it is simply this: (create a new file called timezone.php and point to it with the above URL)\n\n<?php session_start(); $_SESSION['time'] = $_GET['time']; ?>\n\nIf this works correctly, it will first load the page, execute the JavaScript, and reload the page. You will then be able to read the $timezone variable and use it to your pleasure! It returns the current UTC/GMT time zone offset (GMT -7) or whatever timezone you are in.\n\nI still have not seen a detailed answer here that gets the time zone. You shouldn't need to geocode by IP address or use PHP (lol) or incorrectly guess from an offset.\n\nFirstly a time zone is not just an offset from GMT. It is an area of land in which the time rules are set by local standards. Some countries have daylight savings, and will switch on DST at differing times. It's usually important to get the actual zone, not just the current offset.\n\nIf you intend to store this timezone, for instance in user preferences you want the zone and not just the offset. For realtime conversions it won't matter much.\n\nNow, to get the time zone with javascript you can use this:\n\n>> new Date().toTimeString(); \"15:46:04 GMT+1200 (New Zealand Standard Time)\" //Use some regular expression to extract the time.\n\nHowever I found it easier to simply use this robust plugin which returns the Olsen formatted timezone:\n\nhttps://github.com/scottwater/jquery.detect_timezone\n\nWith the PHP date function you will get the date time of server on which the site is located. The only way to get the user time is to use JavaScript.\n\nBut I suggest you to, if your site has registration required then the best way is to ask the user while to have registration as a compulsory field. You can list various time zones in the register page and save that in the database. After this, if the user logs in to the site then you can set the default time zone for that session as per the users’ selected time zone.\n\nYou can set any specific time zone using the PHP function date_default_timezone_set. This sets the specified time zone for users.\n\nBasically the users’ time zone is goes to the client side, so we must use JavaScript for this.\n\nBelow is the script to get users’ time zone using PHP and JavaScript.\n\n<?php #http://www.php.net/manual/en/timezones.php List of Time Zones function showclienttime() { if(!isset($_COOKIE['GMT_bias'])) { ?> <script type=\"text/javascript\"> var Cookies = {}; Cookies.create = function (name, value, days) { if (days) { var date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); var expires = \"; expires=\" + date.toGMTString(); } else { var expires = \"\"; } document.cookie = name + \"=\" + value + expires + \"; path=/\"; this[name] = value; } var now = new Date(); Cookies.create(\"GMT_bias\",now.getTimezoneOffset(),1); window.location = \"<?php echo $_SERVER['PHP_SELF'];?>\"; </script> <?php } else { $fct_clientbias = $_COOKIE['GMT_bias']; } $fct_servertimedata = gettimeofday(); $fct_servertime = $fct_servertimedata['sec']; $fct_serverbias = $fct_servertimedata['minuteswest']; $fct_totalbias = $fct_serverbias – $fct_clientbias; $fct_totalbias = $fct_totalbias * 60; $fct_clienttimestamp = $fct_servertime + $fct_totalbias; $fct_time = time(); $fct_year = strftime(\"%Y\", $fct_clienttimestamp); $fct_month = strftime(\"%B\", $fct_clienttimestamp); $fct_day = strftime(\"%d\", $fct_clienttimestamp); $fct_hour = strftime(\"%I\", $fct_clienttimestamp); $fct_minute = strftime(\"%M\", $fct_clienttimestamp); $fct_second = strftime(\"%S\", $fct_clienttimestamp); $fct_am_pm = strftime(\"%p\", $fct_clienttimestamp); echo $fct_day.\", \".$fct_month.\" \".$fct_year.\" ( \".$fct_hour.\":\".$fct_minute.\":\".$fct_second.\" \".$fct_am_pm.\" )\"; } showclienttime(); ?>\n\nBut as per my point of view, it’s better to ask to the users if registration is mandatory in your project.\n\nAll the magic seems to be in\n\nvisitortime.getTimezoneOffset()\n\nThat's cool, I didn't know about that. Does it work in Internet Explorer etc? From there you should be able to use JavaScript to Ajax, set cookies whatever. I'd probably go the cookie route myself.\n\nYou'll need to allow the user to change it though. We tried to use geo-location (via maxmind) to do this a while ago, and it was wrong enough to make it not worth doing. So we just let the user set it in their profile, and show a notice to users who haven't set theirs yet.\n\nHere is an article (with source code) that explains how to determine and use localized time in an ASP.NET (VB.NET, C#) application:\n\nIt's About Time\n\nIn short, the described approach relies on the JavaScript getTimezoneOffset function, which returns the value that is saved in the session cookie and used by code-behind to adjust time values between GMT and local time. The nice thing is that the user does not need to specify the time zone (the code does it automatically). There is more involved (this is why I link to the article), but provided code makes it really easy to use. I suspect that you can convert the logic to PHP and other languages (as long as you understand ASP.NET).\n\nIt is simple with JavaScript and PHP:\n\nEven though the user can mess with his/her internal clock and/or timezone, the best way I found so far, to get the offset, remains new Date().getTimezoneOffset();. It's non-invasive, doesn't give head-aches and eliminates the need to rely on third parties.\n\nSay I have a table, users, that contains a field date_created int(13), for storing Unix timestamps;\n\nAssuming a client creates a new account, data is received by post, and I need to insert/update the date_created column with the client's Unix timestamp, not the server's.\n\nSince the timezoneOffset is needed at the time of insert/update, it is passed as an extra $_POST element when the client submits the form, thus eliminating the need to store it in sessions and/or cookies, and no additional server hits either.\n\nvar off = (-new Date().getTimezoneOffset()/60).toString();//note the '-' in front which makes it return positive for negative offsets and negative for positive offsets var tzo = off == '0' ? 'GMT' : off.indexOf('-') > -1 ? 'GMT'+off : 'GMT+'+off;\n\nSay the server receives tzo as $_POST['tzo'];\n\n$ts = new DateTime('now', new DateTimeZone($_POST['tzo']); $user_time = $ts->format(\"F j, Y, g:i a\");//will return the users current time in readable format, regardless of whether date_default_timezone() is set or not. $user_timestamp = strtotime($user_time);\n\nInsert/update date_created=$user_timestamp.\n\nWhen retrieving the date_created, you can convert the timestamp like so:\n\n$date_created = // Get from the database $created = date(\"F j, Y, g:i a\",$date_created); // Return it to the user or whatever\n\nNow, this example may fit one's needs, when it comes to inserting a first timestamp... When it comes to an additional timestamp, or table, you may want to consider inserting the tzo value into the users table for future reference, or setting it as session or as a cookie.\n\nP.S. BUT what if the user travels and switches timezones. Logs in at GMT+4, travels fast to GMT-1 and logs in again. Last login would be in the future.\n\nI think... we think too much.\n\nHere's how I do it. This will set the PHP default timezone to the user's local timezone. Just paste the following on the top of all your pages:\n\n<?php session_start(); if(!isset($_SESSION['timezone'])) { if(!isset($_REQUEST['offset'])) { ?> <script> var d = new Date() var offset= -d.getTimezoneOffset()/60; location.href = \"<?php echo $_SERVER['PHP_SELF']; ?>?offset=\"+offset; </script> <?php } else { $zonelist = array('Kwajalein' => -12.00, 'Pacific/Midway' => -11.00, 'Pacific/Honolulu' => -10.00, 'America/Anchorage' => -9.00, 'America/Los_Angeles' => -8.00, 'America/Denver' => -7.00, 'America/Tegucigalpa' => -6.00, 'America/New_York' => -5.00, 'America/Caracas' => -4.30, 'America/Halifax' => -4.00, 'America/St_Johns' => -3.30, 'America/Argentina/Buenos_Aires' => -3.00, 'America/Sao_Paulo' => -3.00, 'Atlantic/South_Georgia' => -2.00, 'Atlantic/Azores' => -1.00, 'Europe/Dublin' => 0, 'Europe/Belgrade' => 1.00, 'Europe/Minsk' => 2.00, 'Asia/Kuwait' => 3.00, 'Asia/Tehran' => 3.30, 'Asia/Muscat' => 4.00, 'Asia/Yekaterinburg' => 5.00, 'Asia/Kolkata' => 5.30, 'Asia/Katmandu' => 5.45, 'Asia/Dhaka' => 6.00, 'Asia/Rangoon' => 6.30, 'Asia/Krasnoyarsk' => 7.00, 'Asia/Brunei' => 8.00, 'Asia/Seoul' => 9.00, 'Australia/Darwin' => 9.30, 'Australia/Canberra' => 10.00, 'Asia/Magadan' => 11.00, 'Pacific/Fiji' => 12.00, 'Pacific/Tongatapu' => 13.00); $index = array_keys($zonelist, $_REQUEST['offset']); $_SESSION['timezone'] = $index[0]; } } date_default_timezone_set($_SESSION['timezone']); //rest of your code goes here ?>\n\nThere can be a few ways to determine the timezone in the browser. If there is a standard function that is available and supported by your browser, that is what you should use. Below are three ways to get the same information in different formats. Avoid using non-standard solutions that make any guesses based on certain assumptions or hard coded lists of zones though they may be helpful if nothing else can be done.\n\nOnce you have this info, you can pass this as a non-standard request header to server and use it there. If you also need the timezone offset, you can also pass it to server in headers or in request payload which can be retrieved with dateObj.getTimezoneOffset().\n\nUse Intl API to get the Olson format (Standard and recommended way): Note that this is not supported by all browsers. Refer this link for details on browser support for this. This API let's you get the timezone in Olson format i.e., something like Asia/Kolkata, America/New_York etc.\n\nIntl.DateTimeFormat().resolvedOptions().timeZone\n\nUse Date object to get the long format such as India Standard Time, Eastern Standard Time etc: This is supported by all browsers.\n\nlet dateObj = new Date(2021, 11, 25, 09, 30, 00); //then dateObj.toString() //yields Sat Dec 25 2021 09:30:00 GMT+0530 (India Standard Time) //I am located in India (IST)\n\nNotice the string contains timezone info in long and short formats. You can now use regex to get this info out:\n\nlet longZoneRegex = /\\((.+)\\)/; dateObj.toString().match(longZoneRegex); //yields ['(India Standard Time)', 'India Standard Time', index: 34, input: 'Sat Dec 25 2021 09:30:00 GMT+0530 (India Standard Time)', groups: undefined] //Note that output is an array so use output[1] to get the timezone name.\n\nUse Date object to get the short format such as GMT+0530, GMT-0500 etc: This is supported by all browsers.\n\nSimilarly, you can get the short format out too:\n\nlet shortZoneRegex = /GMT[+-]\\d{1,4}/; dateObj.toString().match(shortZoneRegex); //yields ['GMT+0530', index: 25, input: 'Sat Dec 25 2021 09:30:00 GMT+0530 (India Standard Time)', groups: undefined] //Note that output is an array so use output[0] to get the timezone name."
    }
}