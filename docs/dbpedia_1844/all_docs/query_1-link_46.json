{
    "id": "dbpedia_1844_1",
    "rank": 46,
    "data": {
        "url": "https://inbo.github.io/tutorials/tutorials/spatial_crs_coding/",
        "read_more_link": "",
        "language": "en",
        "title": "Goodbye PROJ.4! How to specify a coordinate reference system in R? • Floris Vanderhaeghe",
        "top_image": "https://inbo.github.io/tutorials/favicon.ico",
        "meta_img": "https://inbo.github.io/tutorials/favicon.ico",
        "images": [
            "https://inbo.github.io/tutorials/images/logo.png",
            "https://inbo.github.io/tutorials/images/cc-by.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Floris Vanderhaeghe"
        ],
        "publish_date": "2021-07-08T00:00:00+00:00",
        "summary": "",
        "meta_description": "Current good practice in specifying a CRS in R",
        "meta_lang": "en",
        "meta_favicon": "/tutorials/favicon.ico",
        "meta_site_name": "INBO Tutorials",
        "canonical_link": "https://inbo.github.io/tutorials/tutorials/spatial_crs_coding/",
        "text": "Coordinate reference systems: minimal background\n\nWhat?\n\nA coordinate reference system (CRS) – also called spatial reference system (SRS) – is what you need if you want to interpret numeric coordinates as actual point locations with reference to the Earth. Two types of coordinate reference system are much used in spatial science: geodetic and projected CRSs. The former serve only to locate coordinates relative to a 3D model of the Earth surface, while the latter add a projection to generate coordinates on a 2D map. Coordinate operations convert or transform coordinates from one CRS to another, and you often need them because the CRS may differ between dataset 1, dataset 2 or a specific mapping technology (such as leaflet).\n\nAs you can expect, a CRS is defined by several elements. Essentially, a CRS exists of:\n\na coordinate system,\n\na ‘datum’ (s.l.): it localizes the geodetic coordinate system relative to the Earth and needs a geometric definition of the ellipsoid,\n\nonly for projected CRSs: coordinate conversion parameters that determine the conversion from the geodetic to the projected coordinates.\n\nWe will not go deeper into these components, because we want to focus on implementation. However it is highly recommended to read further about this, in order to better understand what a CRS means. A good contemporary resource in an R context is the section ‘Coordinate reference systems: background’ in Bivand (2019) (there is also an accompanying video of that lesson).\n\nThere are a few coordinated lists of CRSs around the globe, the most famous one being the EPSG dataset, where each CRS has a unique EPSG code. You can consult these CRSs interactively at https://epsg.org (official source) and through third-party websites such as https://jjimenezshaw.github.io/crs-explorer and http://epsg.io. For example, the ‘World Geodetic System 1984’ (WGS 84) is a geodetic CRS with EPSG code 4326, and ‘BD72 / Belgian Lambert 72’ is a projected CRS with EPSG code 31370.\n\nIn R, you can also search for CRSs and EPSG codes since these are included in the PROJ database, used by R packages like sf. An example for Belgian CRSs:\n\n# A tibble: 8 × 4 auth_name code name type <chr> <chr> <chr> <chr> 1 EPSG 3447 ETRS89 / Belgian Lambert 2005 projected 2 EPSG 3812 ETRS89 / Belgian Lambert 2008 projected 3 EPSG 21500 BD50 (Brussels) / Belge Lambert 50 projected 4 EPSG 31300 BD72 / Belge Lambert 72 projected 5 EPSG 31370 BD72 / Belgian Lambert 72 projected 6 EPSG 5710 Ostend height vertical 7 EPSG 6190 BD72 / Belgian Lambert 72 + Ostend height compound 8 EPSG 8370 ETRS89 / Belgian Lambert 2008 + Ostend height compound\n\nHow did we represent a CRS in R? Evolutions in PROJ and GDAL.\n\nIt is good to know this, but you can skip this section if you like.\n\nThe reason for writing this tutorial are the recent (and ongoing) changes in several important geospatial libraries, especially GDAL and PROJ. They are used by most geospatial tools, including the key geospatial R packages rgdal, sp, sf, stars, terra and raster.\n\nSince long, coordinate reference systems in R (and many other tools) have been represented by so called ‘PROJ.4 strings’ (or ‘proj4strings’), referring to the long-standing version 4 of the PROJ library. But, we will not use them here! It is discouraged to use ‘PROJ strings’ any longer to represent a CRS; several string elements for CRSs are now deprecated or unsupported. Currently, PROJ (https://proj.org) regards PROJ strings only as a means of specifying a coordinate operation (conversions or transformations between CRSs). Performing coordinate operations is the main aim of PROJ.\n\nLet’s just have one last nostalgic peek (and then, no more!!) to the proj4string for EPSG:31370, the Belgian Lambert 72 CRS:\n\n+proj=lcc +lat_1=51.16666723333333 +lat_2=49.8333339 +lat_0=90 +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438 +ellps=intl +towgs84=-106.8686,52.2978,-103.7239,0.3366,-0.457,1.8422,-1.2747 +units=m +no_defs\n\nSeveral reasons have led to recent changes in GDAL and PROJ, such as the former use of the WGS 84 CRS as an intermediate ‘hub’ in coordinate transformation or in defining a CRS’s datum (introducing unneeded errors), higher accuracy requirements in transformations and the availability of better CRS specification standards than PROJ strings. The changes are included in GDAL 3 and PROJ ≥ 6, which many R packages now support and promote.\n\nIn consequence, support for PROJ strings to represent a CRS is reduced and discouraged. It can still be done, preferrably adding the +type=crs element to distinguish such a string from modern PROJ strings. The latter represent a coordinate operation, not a CRS. Currently, support for most geodetic datums is already lacking in PROJ strings (unless one defines it indirectly, but likely less accurately, with the now deprecated +towgs84 key). The WGS 84 ensemble datum (datum:EPSG::6326) is now by default assumed for a CRS declared with a PROJ string.\n\nIf you want to read more about the changes, here are some recommended resources:\n\nhttps://www.r-spatial.org (at the time of writing, especially Pebesma & Bivand (2020))\n\nBivand (2020a) (rgdal vignette)\n\nBivand (2020b) (video recording; see slides 45-66 in Bivand (2020c))\n\nhttps://gdalbarn.com\n\nNowosad & Lovelace (2020) (webinar and slides, also including other developments in spatial R)\n\nWhat is the new way to represent a CRS in R?\n\nAnswer: The current approach is the WKT2 string, a recent and much better standard, maintained by the Open Geospatial Consortium. WKT stands for ‘Well-known text.’ ‘WKT2’ is simply the recent version of WKT, approved in 2019, so you can also refer to it as WKT.\n\nFor example, this is the WKT2 string for WGS 84:\n\nGEOGCRS[\"WGS 84 (with axis order normalized for visualization)\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\", ID[\"EPSG\",1166]], MEMBER[\"World Geodetic System 1984 (G730)\", ID[\"EPSG\",1152]], MEMBER[\"World Geodetic System 1984 (G873)\", ID[\"EPSG\",1153]], MEMBER[\"World Geodetic System 1984 (G1150)\", ID[\"EPSG\",1154]], MEMBER[\"World Geodetic System 1984 (G1674)\", ID[\"EPSG\",1155]], MEMBER[\"World Geodetic System 1984 (G1762)\", ID[\"EPSG\",1156]], MEMBER[\"World Geodetic System 1984 (G2139)\", ID[\"EPSG\",1309]], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1], ID[\"EPSG\",7030]], ENSEMBLEACCURACY[2.0], ID[\"EPSG\",6326]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8901]], CS[ellipsoidal,2], AXIS[\"geodetic longitude (Lon)\",east, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], AXIS[\"geodetic latitude (Lat)\",north, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], REMARK[\"Axis order reversed compared to EPSG:4326\"]]\n\nAn alternative representation of the WKT2 string - not yet official at the time of writing - is PROJJSON. It is a more convenient format to use in coding.\n\nHow to specify a CRS in R?\n\nGreat news!\n\nThe R packages further down, and many that depend on them, now provide a means of CRS specification irrespective of the GDAL/PROJ version, hence compliant with newer GDAL/PROJ.\n\nDO:\n\nThe general principle that we recommend is: specify the CRS by using the EPSG code, but do so without using a PROJ string.\n\nNote: in case you wish to define a custom CRS yourself, ideally use WKT2 or its more convenient PROJJSON counterpart.\n\nDON’T:\n\nIt’s no longer advised to use PROJ strings to specify a CRS, such as +init=epsg:????, +proj=longlat, … (even though that might still work, their usage is discouraged).\n\nBelow it is demonstrated how to specify a CRS that is defined in the EPSG database (hence, having an EPSG code), for several important geospatial R packages: sf, sp and raster. Other geospatial R packages should normally inherit their approach.\n\nFirst, a practical note:\n\nSome packages internally still derive a PROJ string as well. This happens even while you did not enter a PROJ string. Note that the derived PROJ string will not be used further if you’re on GDAL 3 / PROJ ≥ 6, and a WKT2 string will be generated as well for actual use. In the presence of GDAL 3 / PROJ ≥ 6 and when using sp or raster, you will (at the time of writing) get a warning from rgdal about dropped keys in the generated PROJ strings. You can safely ignore this warning on condition that you didn’t define the CRS with a PROJ string. Also, you can suppress the warning with options(rgdal_show_exportToProj4_warnings = \"none\") in the beginning of your script (before loading rgdal or dependent packages).\n\nAs a demo data set for vector data, we use a dataset of city centers (points) included in the rgdal package.\n\nThis is how it looks like:\n\ncities\n\nSimple feature collection with 606 features and 4 fields Geometry type: POINT Dimension: XY Bounding box: xmin: -165.27 ymin: -53.15 xmax: 177.1302 ymax: 78.2 Geodetic CRS: WGS 84 First 10 features: NAME COUNTRY POPULATION CAPITAL geometry 1 Murmansk Russia 468000 N POINT (33.08604 68.96355) 2 Arkhangelsk Russia 416000 N POINT (40.64616 64.52067) 3 Saint Petersburg Russia 5825000 N POINT (30.45333 59.95189) 4 Magadan Russia 152000 N POINT (150.78 59.571) 5 Perm' Russia 1160000 N POINT (56.23246 58.00024) 6 Yekaterinburg Russia 1620000 N POINT (60.61013 56.84654) 7 Nizhniy Novgorod Russia 2025000 N POINT (43.94067 56.28968) 8 Glasgow UK 1800000 N POINT (-4.269948 55.86281) 9 Kazan' Russia 1140000 N POINT (49.14547 55.73301) 10 Chelyabinsk Russia 1325000 N POINT (61.39261 55.145)\n\nWe now convert it to a plain dataframe (non-spatial) with the XY coordinates as columns, for the sake of the exercise. We want to add the CRS ourselves!\n\nNAME COUNTRY POPULATION CAPITAL X Y 1 Murmansk Russia 468000 N 33.086040 68.96355 2 Arkhangelsk Russia 416000 N 40.646160 64.52067 3 Saint Petersburg Russia 5825000 N 30.453327 59.95189 4 Magadan Russia 152000 N 150.780014 59.57100 5 Perm' Russia 1160000 N 56.232464 58.00024 6 Yekaterinburg Russia 1620000 N 60.610130 56.84654 7 Nizhniy Novgorod Russia 2025000 N 43.940670 56.28968 8 Glasgow UK 1800000 N -4.269948 55.86281 9 Kazan' Russia 1140000 N 49.145466 55.73301 10 Chelyabinsk Russia 1325000 N 61.392612 55.14500\n\nsf package\n\nNote that also the stars package, useful to represent vector and raster data cubes, uses the below approach.\n\nLet’s check whether sf uses (for Windows: comes with) the minimal PROJ/GDAL versions that we want!\n\nGEOS GDAL proj.4 GDAL_with_GEOS USE_PROJ_H \"3.10.1\" \"3.4.0\" \"8.2.0\" \"true\" \"true\" PROJ \"8.2.0\"\n\nGood to go!\n\nDefining a CRS with sf\n\nYou can simply provide the EPSG code using st_crs():\n\nIt is a so-called crs object:\n\n[1] \"crs\"\n\nPrinting the WKT2 string with sf\n\nYou can directly acces the wkt element of the crs object:\n\nGEOGCRS[\"WGS 84\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\"], MEMBER[\"World Geodetic System 1984 (G730)\"], MEMBER[\"World Geodetic System 1984 (G873)\"], MEMBER[\"World Geodetic System 1984 (G1150)\"], MEMBER[\"World Geodetic System 1984 (G1674)\"], MEMBER[\"World Geodetic System 1984 (G1762)\"], MEMBER[\"World Geodetic System 1984 (G2139)\"], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1]], ENSEMBLEACCURACY[2.0]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433]], CS[ellipsoidal,2], AXIS[\"geodetic latitude (Lat)\",north, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433]], AXIS[\"geodetic longitude (Lon)\",east, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], ID[\"EPSG\",4326]]\n\nThere are a few extras to note:\n\nprinting the crs object shows us both the EPSG code (more generally: the user’s CRS specification) and the WKT2 string:\n\ncrs_wgs84\n\nCoordinate Reference System: User input: EPSG:4326 wkt: GEOGCRS[\"WGS 84\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\"], MEMBER[\"World Geodetic System 1984 (G730)\"], MEMBER[\"World Geodetic System 1984 (G873)\"], MEMBER[\"World Geodetic System 1984 (G1150)\"], MEMBER[\"World Geodetic System 1984 (G1674)\"], MEMBER[\"World Geodetic System 1984 (G1762)\"], MEMBER[\"World Geodetic System 1984 (G2139)\"], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1]], ENSEMBLEACCURACY[2.0]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433]], CS[ellipsoidal,2], AXIS[\"geodetic latitude (Lat)\",north, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433]], AXIS[\"geodetic longitude (Lon)\",east, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], ID[\"EPSG\",4326]]\n\nif the user inputted the CRS with an EPSG code (which we did!), the latter can be returned as a number:\n\ncrs_wgs84$epsg\n\n[1] 4326\n\nYou can (but should you?) export a PROJ string as well, with crs_wgs84$proj4string.\n\nSet the CRS of an sf object\n\nFirst we prepare an sf object from cities but still without a CRS:\n\nSimple feature collection with 606 features and 4 fields Geometry type: POINT Dimension: XY Bounding box: xmin: -165.27 ymin: -53.15 xmax: 177.1302 ymax: 78.2 CRS: NA First 10 features: NAME COUNTRY POPULATION CAPITAL geometry 1 Murmansk Russia 468000 N POINT (33.08604 68.96355) 2 Arkhangelsk Russia 416000 N POINT (40.64616 64.52067) 3 Saint Petersburg Russia 5825000 N POINT (30.45333 59.95189) 4 Magadan Russia 152000 N POINT (150.78 59.571) 5 Perm' Russia 1160000 N POINT (56.23246 58.00024) 6 Yekaterinburg Russia 1620000 N POINT (60.61013 56.84654) 7 Nizhniy Novgorod Russia 2025000 N POINT (43.94067 56.28968) 8 Glasgow UK 1800000 N POINT (-4.269948 55.86281) 9 Kazan' Russia 1140000 N POINT (49.14547 55.73301) 10 Chelyabinsk Russia 1325000 N POINT (61.39261 55.145)\n\nNote the missing CRS!\n\nLet’s add the CRS by using the EPSG code (we could also assign crs_wgs84 instead):\n\nDone!\n\nGet the CRS of an sf object\n\nReally, all you need is st_crs(), once more!\n\nCoordinate Reference System: User input: EPSG:4326 wkt: GEOGCRS[\"WGS 84\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\"], MEMBER[\"World Geodetic System 1984 (G730)\"], MEMBER[\"World Geodetic System 1984 (G873)\"], MEMBER[\"World Geodetic System 1984 (G1150)\"], MEMBER[\"World Geodetic System 1984 (G1674)\"], MEMBER[\"World Geodetic System 1984 (G1762)\"], MEMBER[\"World Geodetic System 1984 (G2139)\"], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1]], ENSEMBLEACCURACY[2.0]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433]], CS[ellipsoidal,2], AXIS[\"geodetic latitude (Lat)\",north, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433]], AXIS[\"geodetic longitude (Lon)\",east, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], ID[\"EPSG\",4326]]\n\nGreat!\n\nAs this returns the crs object, you can also use st_crs(cities2)$wkt to specifically return the WKT2 string!\n\nsp package\n\nNote that the actively developed (and matured) sf package is now recommended over the sp package (a view also shared by sf and sp developers). The sp package, which has very long been the go-to package before sf matured, is maintained in order to support existing code, but it is not further developed as much.\n\nThe sp package relies on the rgdal R package to communicate with GDAL and PROJ, so let’s check whether rgdal uses (for Windows: comes with) the minimal PROJ/GDAL versions that we want.\n\nGDAL GDAL_with_GEOS PROJ sp EPSG \"3.4.0\" \"TRUE\" \"8.2.0\" \"1.4-6\" \"v10.038\"\n\nOkido.\n\nDefining a CRS with sp\n\nIt is a so-called CRS object:\n\n[1] \"CRS\" attr(,\"package\") [1] \"sp\"\n\nPrinting the WKT2 string with sp\n\nGEOGCRS[\"WGS 84 (with axis order normalized for visualization)\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\", ID[\"EPSG\",1166]], MEMBER[\"World Geodetic System 1984 (G730)\", ID[\"EPSG\",1152]], MEMBER[\"World Geodetic System 1984 (G873)\", ID[\"EPSG\",1153]], MEMBER[\"World Geodetic System 1984 (G1150)\", ID[\"EPSG\",1154]], MEMBER[\"World Geodetic System 1984 (G1674)\", ID[\"EPSG\",1155]], MEMBER[\"World Geodetic System 1984 (G1762)\", ID[\"EPSG\",1156]], MEMBER[\"World Geodetic System 1984 (G2139)\", ID[\"EPSG\",1309]], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1], ID[\"EPSG\",7030]], ENSEMBLEACCURACY[2.0], ID[\"EPSG\",6326]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8901]], CS[ellipsoidal,2], AXIS[\"geodetic longitude (Lon)\",east, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], AXIS[\"geodetic latitude (Lat)\",north, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], REMARK[\"Axis order reversed compared to EPSG:4326\"]]\n\nAlso note that, when printing a CRS object of sp (e.g. by running crs_wgs84), you still just get a PROJ string! We won’t print it here! However do know that the WKT2 string is currently also contained in the CRS object, just call wkt() to see it.\n\nSet the CRS of a Spatial* object in sp\n\nFirst we prepare a SpatialPointsDataFrame from cities but still without a CRS:\n\nNow, we can add a CRS:\n\nNote the name of the proj4string slot in cities2: it still reminds of old days, but the result is GDAL3/PROJ≥6 compliant!\n\nGet the CRS of a Spatial* object in sp\n\nAgain, use wkt(): it works on both CRS and Spatial* objects!\n\nGEOGCRS[\"WGS 84 (with axis order normalized for visualization)\", ENSEMBLE[\"World Geodetic System 1984 ensemble\", MEMBER[\"World Geodetic System 1984 (Transit)\", ID[\"EPSG\",1166]], MEMBER[\"World Geodetic System 1984 (G730)\", ID[\"EPSG\",1152]], MEMBER[\"World Geodetic System 1984 (G873)\", ID[\"EPSG\",1153]], MEMBER[\"World Geodetic System 1984 (G1150)\", ID[\"EPSG\",1154]], MEMBER[\"World Geodetic System 1984 (G1674)\", ID[\"EPSG\",1155]], MEMBER[\"World Geodetic System 1984 (G1762)\", ID[\"EPSG\",1156]], MEMBER[\"World Geodetic System 1984 (G2139)\", ID[\"EPSG\",1309]], ELLIPSOID[\"WGS 84\",6378137,298.257223563, LENGTHUNIT[\"metre\",1], ID[\"EPSG\",7030]], ENSEMBLEACCURACY[2.0], ID[\"EPSG\",6326]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8901]], CS[ellipsoidal,2], AXIS[\"geodetic longitude (Lon)\",east, ORDER[1], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], AXIS[\"geodetic latitude (Lat)\",north, ORDER[2], ANGLEUNIT[\"degree\",0.0174532925199433, ID[\"EPSG\",9122]]], USAGE[ SCOPE[\"Horizontal component of 3D system.\"], AREA[\"World.\"], BBOX[-90,-180,90,180]], REMARK[\"Axis order reversed compared to EPSG:4326\"]]\n\nEt voilà!\n\nraster package\n\nBe aware that a terra package has been recently created as a successor to raster. It is aimed at faster processing and it is only compatible with GDAL3/PROJ≥6.\n\nAs you will see, raster more or less aligns with sp, although it has a few extras. For example: raster provides a crs<- replacement function to set the CRS.\n\nLet’s make a dummy raster first, without CRS:\n\nclass : RasterLayer dimensions : 40, 37, 1480 (nrow, ncol, ncell) resolution : 50, 50 (x, y) extent : 188500, 190350, 227550, 229550 (xmin, xmax, ymin, ymax) crs : NA source : memory names : layer values : 1, 1480 (min, max)\n\nThis raster is intended for use in the Belgian Lambert 72 CRS (EPSG 31370).\n\nDefining and printing a CRS with raster\n\nThis is not applicable. Just use the facilities of the sp package if you want to make a separate CRS object for usage in a Raster* object (see below).\n\nSet the CRS of a Raster* object in raster\n\nWe prepare a few copies of the data:\n\nwithin_belgium1 <- within_belgium within_belgium2 <- within_belgium within_belgium3 <- within_belgium within_belgium4 <- within_belgium\n\nSetting the CRS is done with the crs<- replacement function. It can take a multitude of formats; these are all equivalent:\n\nNote that we could also have provided the crs argument in raster(), when creating the RasterLayer object. It can take any of the above formats.\n\nGet the CRS of a Raster* object in raster\n\nIt goes the same as in sp:\n\nPROJCRS[\"BD72 / Belgian Lambert 72\", BASEGEOGCRS[\"BD72\", DATUM[\"Reseau National Belge 1972\", ELLIPSOID[\"International 1924\",6378388,297, LENGTHUNIT[\"metre\",1]]], PRIMEM[\"Greenwich\",0, ANGLEUNIT[\"degree\",0.0174532925199433]], ID[\"EPSG\",4313]], CONVERSION[\"Belgian Lambert 72\", METHOD[\"Lambert Conic Conformal (2SP)\", ID[\"EPSG\",9802]], PARAMETER[\"Latitude of false origin\",90, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8821]], PARAMETER[\"Longitude of false origin\",4.36748666666667, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8822]], PARAMETER[\"Latitude of 1st standard parallel\",51.1666672333333, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8823]], PARAMETER[\"Latitude of 2nd standard parallel\",49.8333339, ANGLEUNIT[\"degree\",0.0174532925199433], ID[\"EPSG\",8824]], PARAMETER[\"Easting at false origin\",150000.013, LENGTHUNIT[\"metre\",1], ID[\"EPSG\",8826]], PARAMETER[\"Northing at false origin\",5400088.438, LENGTHUNIT[\"metre\",1], ID[\"EPSG\",8827]]], CS[Cartesian,2], AXIS[\"easting (X)\",east, ORDER[1], LENGTHUNIT[\"metre\",1]], AXIS[\"northing (Y)\",north, ORDER[2], LENGTHUNIT[\"metre\",1]], USAGE[ SCOPE[\"Engineering survey, topographic mapping.\"], AREA[\"Belgium - onshore.\"], BBOX[49.5,2.5,51.51,6.4]], ID[\"EPSG\",31370]]\n\nLet’s verify whether all objects do indeed have the same CRS:\n\n[1] TRUE\n\n[1] TRUE\n\n[1] TRUE\n\nYES!\n\nLiterature"
    }
}