{
    "id": "dbpedia_7853_2",
    "rank": 41,
    "data": {
        "url": "https://www.techtarget.com/searchenterprisedesktop/definition/patch-management",
        "read_more_link": "",
        "language": "en",
        "title": "What is patch management? Lifecycle, benefits and best practices",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineimages/patch_management_process-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/ns-patching_management-kpis-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/vulnerability_management_vs_patch_management-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/vulnerability_management-h_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineImages/security-patch_management_software_mobile.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/toolGearArrow_g1159416182_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/posey_brien.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/security_a299192530_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/shein_esther.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/3.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/pratt_mary.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/container_g1128254725_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/froehlich_andrew.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/vIDG-O_17qA?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchenterprisedesktop/definition/patch-management&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "David Essex",
            "Brien Posey",
            "Esther Shein",
            "Mary Pratt",
            "Andrew Froehlich"
        ],
        "publish_date": "2024-05-15T00:00:00+00:00",
        "summary": "",
        "meta_description": "Learn what patch management is, why it is important, the essential steps, and how it can fix bugs, plug security gaps and update software with new features.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Enterprise Desktop",
        "canonical_link": "https://www.techtarget.com/searchenterprisedesktop/definition/patch-management",
        "text": "Share this item with your network:\n\nX\n\nFree Download What is patch management? Lifecycle, benefits and best practices\n\nThis comprehensive guide explains the entire patch management process and its role in IT administration and security. The hyperlinks direct you to detailed articles on patch management best practices, tools and services.\n\nDefinition\n\nWhat is patch management? Lifecycle, benefits and best practices\n\nBy\n\nDavid Essex, Industry Editor\n\nBrien Posey\n\nPatch management is the subset of systems management that involves identifying, acquiring, testing and installing patches, or code changes, that are intended to fix bugs, close security holes or add features.\n\nPatch management requires staying current on available patches, deciding which patches are needed for specific software and devices, testing them, making sure they have been properly installed and documenting the process.\n\nThis comprehensive guide explains the entire patch management process and its role in IT administration and security. Click on the hyperlinks for detailed articles on patch management processes, tools and best practices.\n\nWhy is patch management important?\n\nThe number and variety of endpoint devices in need of patching is exploding as 5G networks come online, mobile apps proliferate and more companies deploy IoT technology. Furthermore, the rise of AI is providing hackers with new tools for penetrating networks. All of this is making patch management simultaneously more complex and essential.\n\nPatch management helps keep computers and networks secure, reliable and up to date with features and functionality the organization considers important. It is an essential process for ensuring and documenting compliance with security and privacy regulations. It can also improve performance and is sometimes used to update software to work with the latest hardware.\n\nHow does patch management work?\n\nPatch management works differently depending on whether a patch is being applied to a standalone system or systems on a corporate network. On a standalone system, the operating system and applications will periodically perform automatic checks to see if patches are available. New patches will often be downloaded and installed automatically.\n\nIn networked environments, organizations generally try to maintain software version consistency across computers and usually perform centralized patch management rather than allowing each computer to download its own patches. Centralized patch management uses a server software application that checks network hardware for missing patches, downloads the missing patches and distributes them to computers and other devices on the network.\n\nA centralized patch management server does more than just automate patch management; it also gives the organization more control over the patch management process. For example, if a particular patch is found to be problematic, the organization can configure its patch management software to prevent the patch from being deployed.\n\nAnother advantage of centralized patch management is that it helps conserve internet bandwidth. It makes little sense from a bandwidth perspective to allow every computer in an organization to download the exact same patch. Instead, the patch management server can download the patch once and distribute it to all the computers designated to receive it.\n\nAlthough many organizations handle patch management on their own, some managed service providers (MSPs) perform patch management in conjunction with the other network management services they provide to clients, which can minimize the administrative hassles of doing the work in-house.\n\nWhat are the benefits of patch management?\n\nMost major software companies periodically release patches, which can serve any of three primary purposes:\n\nPatches are often used to address security vulnerabilities. If a software vendor discovers a new security risk in one of its products -- such as a zero-day vulnerability -- typically it will quickly issue a patch to address the risk. It is important for organizations to apply security patches as soon as possible because hackers and malware authors know about the security vulnerabilities a patch is designed to correct and will actively look for unpatched systems.\n\nPatches can fix bugs, improving the software's stability and eliminating annoying problems.\n\nVendors also release patches to introduce new software features. Feature updates are becoming more common because of the growth of subscription-based cloud software.\n\nWhat are the challenges of patch management?\n\nBuggy patches are the most common problem in patch management. Sometimes a patch will introduce problems that didn't exist before. They might show up in the product that is being patched or in other software that has a dependency relationship with the patched software. A patch might also have to be removed if the vendor releases a patch that can't be put in place while the previous patch remains on the system. Because patches can sometimes cause issues in a system that was previously working correctly, it is important for administrators to test certain patches before deploying them.\n\nAnother common problem is that disconnected systems might not receive patches in a timely manner. For example, if a mobile user rarely connects to the corporate network, their device might go for long periods without being patched. In such cases, it could be better to configure the device for standalone patch management rather than relying on centralized patch management.\n\nThe sharp increase in remote work brought about by the COVID-19 pandemic added a new problem: managing patches on a wider range of endpoints that connect to the network through various security mechanisms. While some users might connect to applications on a highly secure VPN, others might use single sign-on from the public internet, log into some applications individually or use unsecure Wi-Fi networks. In doing so, they're exposing more places for hackers to enter the corporate network, which can mean more patches to deploy.\n\nRemote patch management best practices, including remote access controls and rollback provisions to keep systems running when connections are lost, can keep systems up to date regardless of their location.\n\nPatch management lifecycle\n\nThe main stages of the patch management process -- identifying, acquiring, testing, deploying and documenting patches -- are supported by the following important steps:\n\nInventorying devices, operating systems and applications.\n\nDeciding which software versions to standardize on.\n\nCategorizing IT assets and patches by risk and priority.\n\nTesting patches in a representative lab or sandbox environment.\n\nRunning a pilot on a sample of devices (an optional step).\n\nPlanning the rollout, including identifying who is responsible for it and which patches should be installed on which devices.\n\nVerifying that patches have been installed.\n\nContinuously monitoring systems for missing patches.\n\nDocumenting patches, vulnerabilities, test results and deployments, which helps in analyzing and improving the process.\n\nPatch management best practices\n\nSystem management software vendors, MSPs and consultants have expertise in making patch deployment smooth and effective. Among their oft-mentioned patch management best practices are the following 10 recommendations:\n\nKnow what you're responsible for patching. This entails clearly identifying patch targets and their locations. In addition, building or acquiring a patch catalog helps keep patches organized.\n\nCreate standard and emergency patching procedures. Emergency patches have to be installed outside the windows established for regularly scheduled patching. There should be clear procedures for both.\n\nUnderstand vendor patch release schedules. The number and types of operating systems, applications and endpoint firmware installations vary significantly, as does the timing of the patches available for them.\n\nDesign and maintain a realistic test environment. It should closely match the production environment, including workload fluctuations, and will need to be updated when the production environment is changed. A test environment can be expensive and hard to scale, so a representative sample of assets is often used instead. Another option is a virtual test environment designed to replicate the production environment on a single computer or cloud service such as AWS or Microsoft Azure. There are also online services that handle the replication process.\n\nReview the patch process and results. Analyzing patch management KPIs can also help identify potential improvements.\n\nPrioritize patches by risk level. Assign assets a criticality level according to their importance to business processes, optimal downtime and vulnerability risk. Test, schedule and apply patches for the most critical assets before less essential ones.\n\nStay abreast of security vulnerabilities. For commercial software, subscribe to reputable sources, such as the Common Vulnerabilities and Exposures catalog of the U.S. government. For internally developed applications, use a software composition analysis tool to track their open source and third-party components.\n\nDeploy patches as quickly as possible. Users might complain about being inconvenienced, but the longer you wait, the greater the chance that hackers will find a way in.\n\nExecute production rollouts in stages. Dedicate the initial rollout to less critical systems. If the patches perform as expected, continue the rollout until every system is updated.\n\nCreate a contingency and rollback plan. In the event something goes wrong, have a backup or image snapshot of systems before starting patch deployment so they can be restored to their previous state.\n\nExamples of patch management\n\nMicrosoft often provides patches to its Windows operating systems and applications such as Office. The patches are normally released on a scheduled monthly basis, often on a day that has come to be known as Patch Tuesday.\n\nStandalone systems rely on Windows Update to automatically download and deploy available patches. In business environments, it is much more common to use Windows Server Update Services (WSUS), which is included with Windows Server and specifically designed to centralize patch management. There are also numerous third-party WSUS alternatives for managing, downloading and deploying Microsoft patches.\n\nMany IT departments also maintain systems that run the open source Linux operating system. Linux patch management is similar to Windows patching, but there are more Linux distributions, which means becoming familiar with the different patching procedures of several vendors instead of just one. Apple macOS also has built-in software update tools.\n\nAn organization can have several versions of an operating system, which makes it challenging to keep every system up to date without using centralized patch management. Many third-party patch management tools support macOS, along with Windows and Linux.\n\nPatch management in cybersecurity and vulnerability management\n\nThe increase in cyberattacks in recent years makes cybersecurity the most compelling reason for deploying patches. Patch management is an important part of vulnerability management, a much broader strategy for discovering, prioritizing and remediating the security vulnerabilities of network assets. Patch management remediates the risks identified in a vulnerability assessment by upgrading software to the most recent version or by temporarily patching it to remove a vulnerability until the software vendor releases an upgrade that contains the fix.\n\nGiven this emphasis on cybersecurity, software patch testing also includes documenting the test process for security compliance purposes, as well as developing alternative vulnerability management plans in case security patches can't be installed on the required devices.\n\nVulnerability management includes the following steps:\n\nNetwork scanning to identify users and devices on the network, the same technique hackers use to search for vulnerable targets.\n\nPenetration testing, which mimics the tactics of hackers to identify vulnerable parts of the network.\n\nVerification to confirm that a vulnerability identified during scanning and testing can, in fact, be exploited.\n\nMitigation, such as taking a vulnerable system offline to prevent vulnerabilities from being exploited before a patch is available.\n\nReporting that uses data management, predictive analytics and visualization tools for evaluating the organization's vulnerability management process and complying with regulations.\n\nIn recent years, IT and security teams have begun to apply more risk management methods to improve the efficiency and effectiveness of their patching and vulnerability management strategies. Risk-based vulnerability management makes a priority of addressing the issues that pose the greatest risk to the most critical systems. It involves identifying an organization's specific needs and security posture instead of wasting resources chasing after generic threats. Risks are scored using tools such as the Common Vulnerability Scoring System.\n\nThe same kind of risk analysis is increasingly applied to the process of designating patches for deployment. In risk-based patch management, organizations assess the risk presented by the issue a patch is meant to fix, then start by deploying the patches that affect critical systems or address other priorities, such as regulatory compliance.\n\nA distinct category of vulnerability management tools is used for scheduling and documenting these processes and partly automating them. Some vulnerability management tools have patch management as a component.\n\nHow to choose the right patch management software\n\nPatch management tools are available on premises or in the cloud, and many vendors offer both deployment options, though SaaS is starting to take over.\n\nBesides delivering patch management from the cloud, the newer tools expressly tackle the specific patching needs of cloud systems, which have grown in importance as organizations move more applications to the cloud. These cloud patch management tools help cut through confusion over who is responsible for the different cloud platforms and databases provided by different vendors to ensure that every important vulnerability can be discovered and patched. The patch management services provided by cloud platforms like AWS and Azure go a long way to covering most needs, but each has certain limitations. You'll usually need third-party tools to fill the gaps.\n\nWhile some vendors specialize in patch management, most include it in a broader collection of IT systems management, endpoint management or security and compliance tools. Prominent players include Atera, Automox, GFI LanGuard, Kaseya VSA, ManageEngine Patch Manager Plus and SolarWinds Patch Manager.\n\nBefore organizations investigate products, it's important they create a complete patch management policy. By ranking their reasons for deploying patches and specifying who needs to be involved, how patches will be tested, implemented and monitored, and what kind of reporting is required, organizations will be more successful at finding the software that meets their exact needs.\n\nBuying teams should look for dashboards that are easy to set up, understand and use and can display the information they need. Reporting and documentation features should also be user-friendly and able to handle the required information on vulnerabilities, test results and patching history. The software should support patching for every operating system and major application used in the organization. Most vendors name the OSes and commercial applications their products can patch.\n\nOther important patch management features include the following:\n\nReal-time visibility into network devices and software.\n\nThe ability to prioritize patches by criticality.\n\nAdministrative controls for approving patches.\n\nAutomated patch management -- often through the use of generative AI chatbots -- with fine-tuning that makes it easy to exclude certain patches and endpoints.\n\nTimely receipt of software updates and patches from the vendor.\n\nThe ability to program patch management policies into the system.\n\nPatch validation to identify and test applicable patches and verification to confirm that deployed patches have taken effect.\n\nOrganizations that take the time to develop a patch management policy, establish a comprehensive patch management process and use the software tools that best support those efforts will likely be successful at making their IT systems reliable, secure and current with the latest technology.\n\nDavid Essex is an industry editor who covers enterprise applications, emerging technology and market trends, and creates in-depth content for several TechTarget websites.\n\nBrien Posey is a 22-time Microsoft MVP and a commercial astronaut candidate. In his over 30 years in IT, he has served as a lead network engineer for the U.S. Department of Defense and as a network administrator for some of the largest insurance companies in America.\n\nContinue Reading About What is patch management? Lifecycle, benefits and best practices\n\nPatch management vs. vulnerability management: Key differences\n\nThe risks of failed patch management\n\nHow to build a better vulnerability management program\n\nWhat is unified endpoint management (UEM)? A complete guide\n\nHow AI is changing patch management\n\nDig Deeper on Windows OS and management\n\nAn 11-step patch management process to ensure success\n\nBy: Brien Posey\n\nThe risks of failed patch management\n\nBy: Esther Shein\n\nrisk-based patch management (RBPM)\n\nBy: Mary Pratt\n\nCreating a patch management policy: Step-by-step guide\n\nBy: Andrew Froehlich"
    }
}