{
    "id": "dbpedia_7853_1",
    "rank": 51,
    "data": {
        "url": "https://aws.amazon.com/blogs/mt/how-moodys-uses-aws-systems-manager-to-patch-servers-across-multiple-cloud-providers/",
        "read_more_link": "",
        "language": "en",
        "title": "How Moody’s uses AWS Systems Manager to patch servers across multiple cloud providers",
        "top_image": "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/Screen-Shot-2019-04-08-at-8.31.00-PM-1092x630.png",
        "meta_img": "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/Screen-Shot-2019-04-08-at-8.31.00-PM-1092x630.png",
        "images": [
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/24/AWS-final.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/26/Azure-final-auto-update.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/SSM-Managed-Instances.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/StateDiagram.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/Athena.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/Athena2.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/12/quicksight.png",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/18/fullsizeoutput_a-150x150.jpeg",
            "https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2019/04/16/Divya-150x150.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sarat Guttikonda"
        ],
        "publish_date": "2019-04-25T13:55:13-07:00",
        "summary": "",
        "meta_description": "Introduction Enterprises today continue to face challenges maintaining an inventory of all of their infrastructure. They need to ensure timely patching of their servers spread across their on-premises and cloud environments using the same set of tools. In this guest blog post, Divya Elaty, VP, Cloud Engineering at Moody’s, and Sarat Guttikonda, Global Solutions Architect […]",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/main/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services",
        "canonical_link": "https://aws.amazon.com/blogs/mt/how-moodys-uses-aws-systems-manager-to-patch-servers-across-multiple-cloud-providers/",
        "text": "Introduction\n\nEnterprises today continue to face challenges maintaining an inventory of all of their infrastructure. They need to ensure timely patching of their servers spread across their on-premises and cloud environments using the same set of tools.\n\nIn this guest blog post, Divya Elaty, VP, Cloud Engineering at Moody’s, and Sarat Guttikonda, Global Solutions Architect at AWS, explain how they use AWS Systems Manager as the preferred tool for patching their hybrid environments, which use AWS and Azure.\n\nProblem statement\n\nWith our experience at Moody’s patching hundreds and thousands of servers in our data centers, spread across multiple geographical locations, we understand the challenges of maintaining an inventory of all servers, operating systems, and their patch levels. Servers owned and managed by different teams have different patching strategies, schedules, and severities defined. The biggest challenge is to find a single tool or a mechanism to check if all the servers are compliant with a particular defined patch level for a specific operating system, and patch them in time. This challenge becomes even more complicated when we need to expand to multiple cloud platforms.\n\nAfter looking at and exploring a few available products, we have decided to try AWS Systems Manager to gather inventory, define patch baselines, and patch servers across multiple cloud providers from a centralized AWS Systems Manager console. We’re also using Systems Manager to review if all the servers are compliant with the baselines we have defined, and act on those that are non-compliant.\n\nAWS Systems Manager is a service that makes it easier to configure and manage your Amazon EC2 instances, on-premises servers and virtual machines, and other AWS resources at scale. Systems Manager gives you a complete view of your infrastructure performance and configuration, simplifies resource and application management, and makes it easy to operate and manage your infrastructure at scale.\n\nIn this blog post we’ll walk you through the architecture, workflow, and step-by-step approach of how we at Moody’s configured AWS Systems Manager as the desired tool for patching servers across a hybrid environment.\n\nArchitecture\n\nAWS implementation:\n\nWorkflows:\n\nScan – This workflow triggered by a scheduled Amazon CloudWatch event, which invokes a Systems Manager Automation Document that runs a patch baseline (AWS-RunPatchBaseline) with a “Scan” operation to find EC2 instances that are NON_COMPLIANT.\n\nRun frequency – Once a week.\n\nCheck Systems Manager role – This workflow triggered by a Scheduled Amazon CloudWatch Event invokes an AWS Lambda function to check if all the EC2 instances have the required Automation role assigned to them.\n\nIf an instance does not have the Systems Manager role attached, the Lambda function will attach the required role.\n\nIf an instance has a role attached, but, doesn’t have Systems Manager permissions, a policy with Systems Manager permissions is attached to the role.\n\nRun frequency – EC2 Event based actions.\n\nPatch – This workflow triggered by a Scheduled CloudWatch Event, which invokes an Automation Document that runs a patch baseline (AWS-RunPatchBaseline), which will do the following:\n\nCheck if there are any stopped instances with a specific tag.\n\nIf there are stopped instances, start them, and update the AWS Systems Manager Agent on them.\n\nPatch all instances.\n\nStop only the instances that were down before the workflow started.\n\nRun frequency – Once every two weeks or at a time that depends on your patch cycle.\n\nIn Systems Manager, Amazon EC2 instances with a specific tag are grouped using Resource Groups. These groups can be Linux Groups (Patch Group A), Windows Groups (Patch Group B), or AppA Groups (Patch Group C).\n\nLinux Patch Group – EC2 Linux instances grouped to be patched by a defined Linux patch baseline.\n\nWindows Patch Group – EC2 Windows instances grouped to be patched by a defined Windows patch baseline.\n\nAppA Patch Group – EC2 instances related to an application AppA grouped to be patched by a defined patch baseline.\n\nAWS Systems Manager Inventory is used to collect operating system (OS), application, and instance metadata from the Amazon EC2 instances.\n\nAWS Config rules check whether the compliance status of the AWS Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance.\n\nNotifications are sent via Amazon Simple Notification Service (Amazon SNS) if there are any NON_COMPLIANT instances.\n\nRemediations can be applied based on the NON_COMPLIANT findings.\n\nLogs from Systems Manager Inventory and Patch processes are stored in Amazon S3.\n\nAmazon QuickSight is used to create and publish interactive dashboards that can be accessed from browsers or mobile devices.\n\nAzure implementation:\n\nWith Azure virtual machines (VMs), everything is same as with AWS, except that for the second workflow there will be “Check Azure VM Tags” instead of “Check Systems Manager Role.”\n\nWorkflow:\n\nCheck Azure VM Tags – This workflow, which is triggered by a Scheduled CloudWatch event, invokes an Azure Automation to check if all the VMs have the required tags.\n\nIf a VM doesn’t have the tag, the Automation will add the tag.\n\nThis workflow also exports Azure VMs tags.\n\nRun frequency – Once a day.\n\nHow to use Systems Manager for patching servers using an on-premises, multi-cloud, multi-account, and multi-Region infrastructure setup\n\nWhat’s used\n\n3 AWS Accounts\n\nA Security Account providing centralized access to all servers\n\nA Shared Services Account hosting few EC2 instances\n\nAn Application Account hosting few EC2 instances\n\n2 AWS Regions in the AWS accounts\n\n1 Microsoft Azure Account hosting few VMs\n\nIn this section, we’ll walk you through the following:\n\nSetting up the AWS Systems Manager Agent on the servers\n\nGathering inventory of all servers in AWS Systems Manager\n\nPatching servers from a centralized AWS Management Console, using AWS default Patch Baselines\n\nChecking compliance of all servers against pre-defined patch base lines\n\n1. Setting up AWS Systems Manager\n\nPrerequisites\n\nBefore you start to use Systems Manager, we recommend reviewing the prerequisites.\n\nEnsure that the servers you are going to use run the supported operating systems.\n\nAmazon S3 setup\n\nCreate two S3 buckets in every Region and in every managed account to store logs from patch-baseline and inventory actions.\n\nAccount1-Region1:\n\narn:aws:s3:::ss-oregon-patch-baseline-snapshot\n\narn:aws:s3:::ss-oregon-ec2-inventory\n\nAccount1-Region2:\n\narn:aws:s3:::ss-london-patch-baseline-snapshot\n\narn:aws:s3:::ss-london-ec2-inventory\n\nAccount2-Region1:\n\narn:aws:s3:::tc-oregon-patch-baseline-snapshot\n\narn:aws:s3:::tc-oregon-ec2-inventory\n\nAccount2-Region2:\n\narn:aws:s3:::tc-london-patch-baseline-snapshot\n\narn:aws:s3:::tc-london-ec2-inventory\n\nCreate an S3 bucket in the master account in a single Region of your choice to store resource data sync information.\n\nAccount3-Region1:\n\narn:aws:s3:::sec-virginia-ssm-data-sync\n\nNetwork setup\n\nAssumptions:\n\nVirtual Private Clouds (VPCs) in two Regions (for example, Oregon (us-west-2) and London (eu-west-2)) are created in two accounts.\n\nEach VPC has two public and two private subnets.\n\nSecurity group for VPC endpoints:\n\nIn the AWS Management Console, navigate to the VPC Dashboard, and create a security group for VPC endpoints.\n\nAdd an inbound rule in the security group created for the VPC endpoints to allow HTTPS (port 443) from the security group of private instances.\n\nSecurity group for EC2 instances in the private subnets:\n\nNavigate to the VPC Dashboard, and create a security group. Or you can use an existing security group available for your EC2 instances in the private subnets.\n\nNo additional inbound rules are required in the security group created for the EC2 instances in the private subnets.\n\nConfiguring access to Systems Manager\n\nStep 1: Configure one or more users who would be using Systems Manager.\n\nStep 2: Create an Instance Profile that would allow Systems Manager to perform actions on your instances.\n\nRole name: AWS-SSM-Role (this can be any name you like)\n\nStep 3: Launch EC2 instances that use the instance profile you created in the previous step.\n\nCreate the EC2 instances with the following parameters:\n\nIAM Role – Choose the IAM role (AWS-SSM-Role), with the AmazonEC2RoleforSSM Managed Policy attached.\n\nSubnets – Choose the private subnets.\n\nSecurity Group – Choose the security group created for EC2 instances in the private subnets.\n\nAWS Systems Manager Agent – AWS Systems Manager Agent is preinstalled on Amazon EC2 Amazon Machine Images (AMIs)\n\nTags – Create tags to group instances in Systems Manager.\n\nExample tag names are “Patch Group” and Value: “SSM-Private”\n\nStep 4: You can improve the security posture of your managed instances (including managed instances in your hybrid environment) by configuring Systems Manager to use an interface VPC endpoint. Interface endpoints are powered by AWS PrivateLink, a technology that enables you to privately access Amazon EC2 and Systems Manager APIs by using private IP addresses. PrivateLink restricts all network traffic between your managed instances, Systems Manager, and Amazon EC2 to the Amazon network. (Managed instances don’t have access to the internet.) Also, you don’t need an internet gateway, a NAT device, or a virtual private gateway.\n\nFor more information, see the documentation.\n\nPlease read the restrictions and limitations of using VPC Endpoints.\n\nSetting Up Systems Manager in hybrid environments\n\nSystems Manager lets you remotely and securely manage on-premises servers and virtual machines (VMs) in your hybrid environment. To configure your hybrid environment for Systems Manager, see the documentation.\n\nAfter you finish, your hybrid machines that are configured for Systems Manager are listed in the AWS Systems Manager console and described as managed instances. Amazon EC2 instances configured for Systems Manager are also managed instances.\n\nIn the AWS Systems Manager console, hybrid instances will have a prefix “mi-“, while the Amazon EC2 instances will have a prefix “i-”.\n\n2. Gathering inventory\n\nAWS Systems Manager Inventory\n\nAWS Systems Manager Inventory provides visibility into your Amazon EC2 and on-premises computing environment. You can use Inventory to collect metadata from your managed instances. You can store this metadata in a central Amazon Simple Storage Service (Amazon S3) bucket, and then use built-in tools to query the data and quickly determine which instances are running the software and configurations required by your software policy, and which instances need to be updated. You can configure Inventory on all of your managed instances by using a one-click procedure. You can also configure and view inventory data from multiple AWS Regions and accounts.\n\nConfiguring Resource Data Sync for Inventory\n\nYou can use Systems Manager Resource Data Sync to send Inventory data collected from all of your managed instances to a single Amazon S3 bucket.\n\nIf you have not configured Resource Data Sync for Inventory, you either need to manually gather the collected inventory data for each instance, or you have to create scripts to gather this information. You would then need to port the data into an application so that you can run queries and analyze it.\n\nWith Resource Data Sync, you perform a one-time operation that synchronizes all Inventory data from all of your managed instances. After the sync is successfully created, Systems Manager creates a baseline of all Inventory data and saves it in the target Amazon S3 bucket. When new inventory data is collected, Systems Manager automatically updates the data in the Amazon S3 bucket. You can then quickly and cost-effectively port the data to Amazon Athena and Amazon QuickSight.\n\nSet up Inventory and Resource Data Sync for all the managed accounts within the desired Regions.\n\nVerifying the setup\n\nPerform the following verification in your master account (and Region) as the inventory data should be collected in the centralized S3 bucket in the master account.\n\nLog in to the master account, and go to the Amazon S3 console. Navigate through the centralized bucket that you created (sec-virginia-ssm-data-sync).\n\nInstance metadata will be captured and sorted in folder structures by Parameter, AccountID, and the Region. You can drill down to see the information about each instance.\n\n3. Patching with an Automation document Invoked by Amazon CloudWatch\n\nStep 1: The Automation Document runs a describe instances API call to get the list of stopped instances based on the tags passed as inputs, and saves the instance IDs that are to be stopped at the end of workflow.\n\nChecks if there are any stopped instances.\n\nStep2: If there are stopped instance, the startInstances API action starts them.\n\nStep 3: Updates the AWS Systems Manager Agent on the instances from Step 2.\n\nStep 4: Patches the instances from Step 2, and the Running instances using the RunPatchBaseLine Document.\n\nStep 5: Stops the instances that were started in Step 2.\n\n4. Checking Compliance\n\nYou can use AWS Systems Manager Configuration Compliance to scan your fleet of managed instances for patch compliance and configuration inconsistencies. You can collect and aggregate data from multiple AWS accounts and Regions, and then drill down into specific resources that aren’t compliant. Systems Manager Compliance offers the following additional benefits and features:\n\nView compliance history and change tracking for Patch Manager patching data and State Manager associations by using AWS Config.\n\nCustomize Systems Manager Compliance to create your own compliance types based on your IT or business requirements.\n\nRemediate issues by using Systems Manager Run Command, State Manager, or Amazon CloudWatch Events.\n\nPort data to Amazon Athena and Amazon QuickSight to generate fleet-wide reports.\n\nWorking with Systems Manager Inventory Data\n\nAWS Systems Manager Inventory helps you query inventory data from multiple AWS Regions and accounts.\n\nQuerying Inventory Data from Multiple Regions and accounts:\n\nThe following steps need to be performed in the master account (and Region). Read this documentation.\n\nQuerying Inventory Data from multiple Regions and accounts using Amazon Athena\n\nLog in to the Amazon Athena console.\n\nChose the database.\n\nRun a query in the Query Editor as shown in the following screenshot.\n\nQuerying Inventory Data from Multiple Regions and accounts Using Amazon QuickSight\n\nLog in to the Amazon QuickSight console.\n\nChoose Manage data.\n\nChoose New data set.\n\nUnder Create a Data Set, chose Athena.\n\nEnter the Amazon Athena Data source name.\n\nChoose Validate connection.\n\nChoose Create data source.\n\nChoose table from which you want to develop dashboards.\n\nChoose the appropriate fields for different types of visualizations.\n\nRemediating compliance issues\n\nIf you identify any instances that are in NON_COMPLIANT status, you can quickly remediate patch and association compliance issues by using Systems Manager Run Command. You can target either instance IDs or Amazon EC2 tags and run the AWS-RunPatchBaseline document or the AWS-RefreshAssociation document.\n\nConclusion\n\nIn this blog post, we have seen how AWS Systems Manager can be used as a tool to manage your inventory of servers, patch them, and check them for compliance from a centralized web console. The same process discussed for Azure can be extended to your on-premises servers.\n\nAWS Systems Manager integrates well with other services, and provides the following features to help you manage virtual machines from a single location:\n\nCentralized access control for your servers and VMs by using AWS Identity and Access Management (IAM).\n\nCentralized auditing on actions performed on your servers and VMs using AWS CloudTrail.\n\nCentralized and secure remote management of your on-premises workloads using your existing scripts.\n\nCentralized monitoring using CloudWatch Events and Amazon SNS to send notifications on service executions.\n\nAbout the Authors\n\nSarat Guttikonda is a Global Solutions Architect at Amazon Web Services. He is a serverless enthusiast, and helps Financial Services customers deploy secure, resilient, and scalable applications on AWS.\n\nDivya Elaty is a VP of Cloud Engineering at Moody’s Corporation. She is a cloud enthusiast and works in the areas of cloud architecture, cloud security, cloud automation and orchestration."
    }
}