{
    "id": "dbpedia_7853_2",
    "rank": 81,
    "data": {
        "url": "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-patch",
        "read_more_link": "",
        "language": "en",
        "title": "Patch function - Power Platform",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/yes-icon.svg",
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/yes-icon.svg",
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/yes-icon.svg",
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/yes-icon.svg",
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/function-patch/icecream.png",
            "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/media/function-patch/icecream-after.png"
        ],
        "movies": [
            "https://www.microsoft.com/videoplayer/embed/RWLgbF"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "gregli-msft"
        ],
        "publish_date": "2024-04-11T08:00:00+00:00",
        "summary": "",
        "meta_description": "Reference information including syntax and examples for the Patch function.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/power-platform/power-fx/reference/function-patch",
        "text": "Patch function\n\nApplies to: Canvas apps Model-driven apps Power Platform CLI Desktop flows\n\nModifies or creates one or more records in a data source, or merges records outside of a data source.\n\nUse the Patch function to modify records in complex situations, such as when you do updates that require no user interaction or use forms that span multiple screens.\n\nTo update records in a data source more easily for simple changes, use the Edit form control instead. When you add an Edit form control, you provide users with a form to fill in and then save the changes to a data source. For more information, see Understand data forms.\n\nWatch this video to learn how to use the Patch function:\n\nOverview\n\nUse the Patch function to modify one or more records of a data source. The values of specific fields are modified without affecting other properties. For example, this formula changes the phone number for a customer named Contoso:\n\nPatch( Customers, First( Filter( Customers, Name = \"Contoso\" ) ), { Phone: \"1-212-555-1234\" } )\n\nUse Patch with the Defaults function to create records. Use this behavior to build a single screen for both creating and editing records. For example, this formula creates a record for a customer named Contoso:\n\nPatch( Customers, Defaults( Customers ), { Name: \"Contoso\" } )\n\nEven if you're not working with a data source, you can use Patch to merge two or more records. For example, this formula merges two records into one that identifies both the phone number and the location for Contoso:\n\nPatch( { Name: \"Contoso\", Phone: \"1-212-555-1234\" }, { Name: \"Contoso\", Location: \"Midtown\" } )\n\nDescription\n\nModify or create a record in a data source\n\nTo use this function with a data source, specify the data source, and then specify a base record:\n\nTo modify a record, the base record needs to have come from a data source. The base record may have come through a gallery's Items property, been placed in a context variable, or come through some other path. But, you can trace the base record back to the data source. This is important as the record will include additional information to help find the record again for modification.\n\nTo create a record, use the Defaults function to create a base record with default values.\n\nThen specify one or more change records, each of which contains new property values that override property values in the base record. Change records are processed in order from the beginning of the argument list to the end, with later property values overriding earlier ones.\n\nThe return value of Patch is the record that you modified or created. If you created a record, the return value may include properties that the data source generated automatically. However, the return value doesn't provide a value for fields of a related table.\n\nFor example, you use Set(MyAccount, Patch(Accounts, First(Account), 'Account Name': \"Example name\")); and then MyAccount.'Primary Contact'.'Full Name'. You can't yield a full name in this case. Instead, to access the fields of a related table, use a separate lookup such as:\n\nLookUp(Accounts, Account = MyAccount.Account).'Primary Contact'.'Full Name'\n\nWhen you update a data source, one or more issues may arise. Use IfError and IsError with the return value from Patch to detect and respond to errors, as Error Handling describes. You can also use the Errors function to identify and examine issues, as Working with Data Sources describes.\n\nRelated functions include the Update function to replace an entire record, and the Collect function to create a record. Use the UpdateIf function to modify specific properties of multiple records based on a condition.\n\nModify or create a set of records in a data source\n\nPatch can also be used to create or modify multiple records with a single call.\n\nInstead of passing a single base record, a table of base records can be provided in the second argument. Change records are provided in a table as well, corresponding one-for-one with the base records. The number of records in each change table must be the same as the number of records in the base table.\n\nWhen using Patch in this manner, the return value is also a table with each record corresponding one-for-one with the base and change records.\n\nMerge records outside of a data source\n\nSpecify two or more records that you want to merge. Records are processed in the order from the beginning of the argument list to the end, with later property values overriding earlier ones.\n\nPatch returns the merged record and doesn't modify its arguments or records in any data sources.\n\nSyntax\n\nModify or create a record in a data source\n\nPatch( DataSource, BaseRecord, ChangeRecord1 [, ChangeRecord2, â¦ ])\n\nDataSource â Required. The data source that contains the record that you want to modify or will contain the record that you want to create.\n\nBaseRecord â Required. The record to modify or create. If the record came from a data source, the record is found and modified. If the result of Defaults is used, a record is created.\n\nChangeRecord(s) â Required. One or more records that contain properties to modify in the BaseRecord. Change records are processed in order from the beginning of the argument list to the end, with later property values overriding earlier ones.\n\nModify or create a set of records in a data source\n\nPatch( DataSource, BaseRecordsTable, ChangeRecordTable1 [, ChangeRecordTable2, â¦ ] )\n\nDataSource â Required. The data source that contains the records that you want to modify or will contain the records that you want to create.\n\nBaseRecordTable â Required. A table of records to modify or create. If the record came from a data source, the record is found and modified. If the result of Defaults is used, a record is created.\n\nChangeRecordTable(s) â Required. One or more tables of records that contain properties to modify for each record of the BaseRecordTable. Change records are processed in order from the beginning of the argument list to the end, with later property values overriding earlier ones.\n\nMerge records\n\nPatch( Record1, Record2 [, â¦] )\n\nRecord(s) - Required. At least two records that you want to merge. Records are processed in order from the beginning of the argument list to the end, with later property values overriding earlier ones.\n\nExamples\n\nModify or create a record (in a data source)\n\nIn these examples, you'll modify or create a record in a data source, named IceCream, that contains the data in this table and automatically generates the values in the ID column:\n\nFormula Description Result Patch(Â IceCream,\n\nLookUp( IceCream, Flavor = \"Chocolate\" ), {Â Quantity:Â 400Â } ) Modifies a record in the IceCream data source:\n\nThe ID column of the record to modify contains the value of 1. (The Chocolate record has that ID.)\n\nThe value in the Quantity column changes to 400.\n\n{Â ID:Â 1, Flavor:Â \"Chocolate\", Quantity:Â 400 }\n\nThe Chocolate entry in the IceCream data source has been modified. Patch( IceCream, Defaults(Â IceCream ), {Â Flavor:Â \"Strawberry\"Â }Â ) Creates a record in the IceCream data source:\n\nThe ID column contains the value 3, which the data source generates automatically.\n\nThe Quantity column contains 0, which is the default value for that column in the IceCream data source, as the Defaults function specifies.\n\nThe Flavor column contains the value of Strawberry.\n\n{ ID:Â 3, Flavor:Â \"Strawberry\", Quantity:Â 0Â }\n\nThe Strawberry entry in the IceCream data source has been created.\n\nAfter the previous formulas have been evaluated, the data source ends with these values:\n\nMerge records (outside of a data source)\n\nFormula Description Result Patch(Â {Â Name:Â \"James\",Â Score:Â 90Â }, {Â Name:Â \"Jim\",Â Passed:Â trueÂ } ) Merges two records outside of a data source:\n\nThe values in the Name column of each record don't match. The result contains the value (Jim) in the record that's closer to the end of the argument list instead of the value (James) in the record that's closer to the start.\n\nThe first record contains a column (Score) that doesn't exist in the second record. The result contains that column with its value (90).\n\nThe second record contains a column (Passed) that doesn't exist in the first record. The result contains that column with its value (true).\n\n{Â Name:Â \"Jim\", Score:Â 90, Passed:Â trueÂ }\n\nUse of As or ThisRecord\n\nUsing the As or ThisRecord keyword in the formula avoids ambiguous evaluation context.\n\nIn the example below, consider the first lookup in the If statement. (OrderID = A[@OrderID]) is expected to compare the OrderId in the lookup scope with the OrderId of collection A in the ForAll scope. In this case, you likely want A[@OrderId] to be resolved as a local parameter. But it is ambiguous.\n\nPower Apps currently interprets both the left-hand side OrderId and right-hand side A[@OrderId] as a field in the lookup scope. Therefore, lookup will always find the first row in [dbo].[Orders1] because the condition is always true (that is, any row's OrderId is equal to itself.)\n\nClearCollect( A, Filter( '[dbo].[Orders1]', OrderId = 8888888 ) ); ForAll( A, If( LookUp( '[dbo].[Orders1]', OrderId = A[@OrderId], \"OK\" ) = \"OK\", Patch( '[dbo].[Orders1]', LookUp( '[dbo].[Orders1]', OrderId = A[@OrderId] ), { OrderName: \"val1\" } ), Patch( '[dbo].[Orders1]', Defaults('[dbo].[Orders1]'), { OrderName: \"val2\" } ) ) )\n\nUsing As or ThisRecord\n\nWhenever possible use the As operator or the ThisRecord to disambiguate the left-hand side. As is recommended for the above scenario.\n\nWhen your formula uses multiple scopes with ForAll, Filter, and Lookup on the same data source or table, it is possible that the scope parameters may collide with a same field elsewhere. Therefore, it is recommended to use the As operator or ThisRecord to resolve the field name and avoid ambiguity.\n\nFor example, you can use the As operator to disambiguate in the example below.\n\nClearCollect( A, Filter( '[dbo].[Orders1]', OrderId = 8888888 ) ); ForAll( A, If( LookUp( '[dbo].[Orders1]' As B, B.OrderId = A[@OrderId], \"OK\" ) = \"OK\", Patch( '[dbo].[Orders1]', LookUp( '[dbo].[Orders1]' As C, C.OrderId = A[@OrderId] ), { OrderName: \"val1\" } ), Patch( '[dbo].[Orders1]', Defaults('[dbo].[Orders1]'), { OrderName: \"val2\" } ) ) )\n\nAlternatively, you can use ThisRecord for the same purpose.\n\nClearCollect( A, Filter( '[dbo].[Orders1]', OrderId = 8888888 ) ); ForAll( A, If( LookUp( '[dbo].[Orders1]', ThisRecord.OrderId = A[@OrderId], \"OK\" ) = \"OK\", Patch( '[dbo].[Orders1]', LookUp( '[dbo].[Orders1]', ThisRecord.OrderId = A[@OrderId] ), { OrderName: \"val1\" } ), Patch( '[dbo].[Orders1]', Defaults('[dbo].[Orders1]'), { OrderName: \"val2\" } ) ) )"
    }
}