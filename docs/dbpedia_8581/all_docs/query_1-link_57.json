{
    "id": "dbpedia_8581_1",
    "rank": 57,
    "data": {
        "url": "https://www.educative.io/blog/c-vs-cpp",
        "read_more_link": "",
        "language": "en",
        "title": "C vs C++: Core language differences explained",
        "top_image": "https://www.educative.io/v2api/editorpage/5295407815458816/image/4810048073629696",
        "meta_img": "https://www.educative.io/v2api/editorpage/5295407815458816/image/4810048073629696",
        "images": [
            "https://www.educative.io/cdn-cgi/image/format=auto,width=256,quality=75/v2api/collection/10370001/4767671563321344/image/4549933980188672 1x, /cdn-cgi/image/format=auto,width=600,quality=75/v2api/collection/10370001/4767671563321344/image/4549933980188672 2x",
            "https://www.educative.io/api/page/5295407815458816/image/download/4610246547341312 128w, /api/page/5295407815458816/image/download/4610246547341312 256w, /api/page/5295407815458816/image/download/4610246547341312 350w, /api/page/5295407815458816/image/download/4610246547341312 384w, /api/page/5295407815458816/image/download/4610246547341312 600w, /api/page/5295407815458816/image/download/4610246547341312 750w, /api/page/5295407815458816/image/download/4610246547341312 950w, /api/page/5295407815458816/image/download/4610246547341312 1200w, /api/page/5295407815458816/image/download/4610246547341312 1800w, /api/page/5295407815458816/image/download/4610246547341312 2400w, /api/page/5295407815458816/image/download/4610246547341312 3000w",
            "https://www.educative.io/static/imgs/soc2.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "cpp",
            "c languages",
            "programming langauges"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "C++ and C are two of the oldest programming languages out there. C is a subset of C++, so how different are they? Read on as we discuss their similarities and differences in detail.",
        "meta_lang": "en",
        "meta_favicon": "/static/favicons/faviconV2.png",
        "meta_site_name": "Educative",
        "canonical_link": "https://www.educative.io/blog/c-vs-cpp",
        "text": "Both C and C++ are two of the oldest surviving programming languages. Though C++ is derived from C, it is known to be more efficient and offer modern tools. Of course, both languages have their own advantages and disadvantages over one another.\n\nIn this article, we will go over a brief history of both languages, followed by their similarities and differences, and what language you should start learning first.\n\nThis article covers the following:\n\nWhat is C?\n\nWhat is C++?\n\nSimilarities between C and C++\n\nDifferences between C and C++\n\nWhich to learn first?\n\nWhat to learn next\n\nLearn C++ the easy way.\n\nThis path will get you up to speed with C++. By the end, you’ll be able to confidently solve real-world problems in C++.\n\nWhat is C?\n\nC was developed by Dennis Ritchie in 1972 for making utilities capable of running on Unix. C is a systems programming language, meaning it works in the lowest level of abstraction. It is a low-level procedural language. C programs are high speed, so they let developers handle the computer hardware manually.\n\nThe strength of C programming language lies in performance and has the ability to be used for coding for a wide variety of platforms. It’s used commonly for operating systems, interpreters, compilers, and microcontrollers.\n\nNowadays, we have many specialized programming languages to pick from, but C was once unmatched in its early years.\n\nEnjoying the article? Scroll down to sign up for our free, bi-monthly newsletter.\n\nWhat is C++?\n\nC++ was developed by Bjarne Stroustrup in 1979 while working at Bell Labs. He wanted an extension of C that was both flexible and efficient. C++ is object-oriented, but like C can be used for development on a diverse range of platforms. It also supports manual memory management. C++ is great for networks, server-side, and gaming applications.\n\nThe programming language is lightweight, compiled, and can be used for a wide range of platforms. In fact, the C++ programming language has almost everything as C, but it extends its functionality.\n\nC++ influenced the creation of C# and Java. If you know Java, you can easily read and learn C++.\n\nSimilarities between C and C++\n\nNow that we know a little bit about both languages, we will now look at the similarities between the two. C++ is a superset of C, so both languages have similar syntax, code structure, and compilation. Almost all of C’s keywords and operators are used in C++ and do the same thing.\n\nC and C++ both use the top-down execution flow and allow procedural and functional programming. Both languages also use ; as the statement terminator. They also have the same notions of stack, heap, file-scope, and static variables.\n\nThe following keywords are common to both languages:\n\nDifferences between C and C++\n\nIn this section, we will look at the most important differences between the two languages.\n\nDefinition\n\nC is a structural programming language, so everything is broken into functions that get the work done. C does not support objects and classes.\n\nC++, however, supports procedural and object-oriented programming paradigms. It focuses on using objects and classes.\n\nIn C++, it is impossible to have a field named class, as it is a reserved keyword.\n\nException Handling\n\nC uses functions for error handling. C++ has well-designed try-catch blocks that make debugging a lot easier.\n\nFile Extensions\n\nAll C programs are saved with a .c extension. C++ uses the .cpp extension.\n\nVariables\n\nIn C, need to declare all variables at the beginning of the function block. In C++, the variables can be declared anywhere as long as they are declared before used in the code.\n\nData Types\n\nWith C, you can define your own type using struct, union, or enum.\n\n// Structures struct stud_id { char name[20]; int class; int roll_number; char address[30]; };\n\nC++ supports user-defined data types as well. C++ user-defined data types include:\n\n// Classes class <classname> { private: Data_members; Member_functions; public: Data_members; Member_functions; };\n\n// Structures struct stud_id { char name[20]; int class; int roll_number; char address[30]; };\n\n// Unions union employee { int id; double salary; char name[20]; }\n\n// Enumerations enum week_days{sun, mon, tues, wed, thur, fri, sat}; int main() { enum week_days d; d = mon; cout << d; return 0; }\n\n//Typedef typedef <type> <newname>; typedef float balance;\n\nStrings\n\nC represents string literals using char[]. In C++, strings are objects of the class string, defined in the header file <string>. This is how strings are represented in C:\n\nMultithreading\n\nIn C, multithreading is not supported natively. To achieve multithreading, it uses the operating system such as POSIX Threads with Linux.\n\nFor C++, multithreading was introduced in C+11, which uses the std::thread. C++ multithreading involves creating and using thread objects to carry out sub-tasks.\n\nFunction Overloading\n\nFunction overloading is a form of polymorphism that allows a function with the same name to be defined for varying purposes. Overloaded functions have the same name but different parameters. C does not support function overloading, but C++ does.\n\nIn the example below, we have the same function names but different data types.\n\nOperator Overloading\n\nOperator overloading allows you to change the way an operator works for user-defined functions. Though C does not support this, C++ does.\n\nThe main() function\n\nC only allows the main() function to be called through other functions used in the code. C++ does not allow the main() function to be called through other functions.\n\nData Security and Encapsulation\n\nEncapsulation aids in hiding information from users and is s key feature of OOP. C does not support encapsulation. C++ uses classes that bundle data and the functions operating on this data into a single unit.\n\nInput and Output Operations\n\nC uses printf and scanf for input and output respectively. C++ uses cin and cout.\n\nMemory Management\n\nAs mentioned above, both C and C++ require manual memory management, the difference is how they do it. C uses calloc() and malloc() functions for dynamic memory allocation.\n\nC++ uses the new operator and free() for memory allocation and the delete operator for memory de-allocation.\n\nSince C++11, it is recommenced to use smart pointers as much as possible to avoid avoiding directly calls to new and delete.\n\nEducative has both beginner and advanced courses for C++ and C. The best place to start is Educative’s Learning Path C++ for Programmers. We’ll take you from basic to advanced concepts, all with hands-on practice. By the end, you’ll have enough C++ experience to confidently solve real-world problems.\n\nIf you want to start with C, check out Educative’s free introductory course Learn C from Scratch. This comprehensive and detailed course will introduce you to all the basic and advanced programming concepts of C language.\n\nHappy learning!\n\nContinue reading about C and C++\n\nC++ is a good first language to learn\n\nLearn C++ from Scratch: The Complete Guide for Beginners\n\nHow to concatenate strings in C: a five minute guide"
    }
}