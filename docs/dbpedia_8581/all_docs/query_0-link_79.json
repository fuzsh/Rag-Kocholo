{
    "id": "dbpedia_8581_0",
    "rank": 79,
    "data": {
        "url": "https://runestone.academy/ns/books/published/cpp4python/IntroCpp/whylearncpp.html",
        "read_more_link": "",
        "language": "en",
        "title": "1.3. Why Learn Another Programming Language? — C++ for Python Programmers",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://runestone.academy/ns/books/published/cpp4python/_static/img/RAIcon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/runestone/static/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://runestone.academy/ns/books/published/cpp4python/IntroCpp/whylearncpp.html",
        "text": "1.3. Why Learn Another Programming Language?¶\n\nPython is a great language for beginning programming for several reasons. First, the syntax is both sparse and clear. Second, the underlying model of how objects and variables work is very consistent. Third, you can write powerful and interesting programs without a lot of work. However, Python is representative of one kind of language, called a dynamic language. One might think of Python as being fairly informal. Other languages, like C, C++, and Java are more formal.\n\nThese other more formal languages have some advantages of their own. First, is speed: For very large programs C and C++ are likely to give you the best performance. Second, is their maintainability. Python requires you to remember certain things. For example if you set variable t to reference a turtle, and forget later that t is a turtle but try to invoke a string method on it, you will get an error. C++ protects you from this kind of error by forcing you to be upfront and formal about the type of object each variable is going to refer to.\n\nIn one sense Python is representative of a whole class of interpreted languages, sometimes referred to as “scripting languages.” Other scripting languages include Ruby and Perl. C++ is representative of what one might call industrial strength languages. Industrial strength languages are good for projects with several or many people working on the project where being formal and careful about what you do may impact lots of other people. Languages in this category include C, C#, C++, Ada, and Java.\n\nThe good news is that learning a second programming language is much easier than learning your first programming language because you will be able to draw upon your existing knowledge. Programming languages are likely to regularly change as time passes. As the field of computer science advances there are likely to be new programming languages that you will want or need to learn. There are certain features that most programming languages have in common such as variables, loops, conditionals, and functions. And there are other language features that are unique. If you know what is common in most languages, then in learning a new language, you need only to focus on what is different from the languages you already know."
    }
}