{
    "id": "dbpedia_8581_0",
    "rank": 86,
    "data": {
        "url": "https://blog.developer.adobe.com/c-and-the-next-30-years-47c3b3b8fe98",
        "read_more_link": "",
        "language": "en",
        "title": "C++ and The Next 30 Years",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*h2T1TFPlu7TkjPnd84fU0w.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*h2T1TFPlu7TkjPnd84fU0w.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*HjYcgF7qKR4MLOKj7LUdyA.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*riyFijvwTfGcWNf1guRNtg.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*HjYcgF7qKR4MLOKj7LUdyA.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*riyFijvwTfGcWNf1guRNtg.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "David Sankel",
            "medium.com"
        ],
        "publish_date": "2024-02-22T17:50:49.279000+00:00",
        "summary": "",
        "meta_description": "I delivered a keynote, C++ and the Next 30 Years, at the 2023 CPP-Summit conference in Beijing, China. Experiencing the culture, the people, and the landscape was tremendous. In this post I’ll cover…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*y6TtdKlSFBCCH2t385XObA.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://blog.developer.adobe.com/c-and-the-next-30-years-47c3b3b8fe98",
        "text": "I delivered a keynote, C++ and the Next 30 Years, at the 2023 CPP-Summit conference in Beijing, China. Experiencing the culture, the people, and the landscape was tremendous. In this post I’ll cover some of the points in my future-looking C++ talk and share my experience giving a talk for the first time in China.\n\nMy talk: C++ and the Next 30 Years\n\nThe title of my keynote was C++ and the Next 30 Years which covered C++’s evolution, the changing landscape of programming languages, and the influence of AI. Here I break down some of my talk’s key points.\n\nThe next 10 years\n\nIn the next 10 years I expect C++ modules to become more accessible. Most C++ vendors have at least some support and CMake recently announced its feature set. However, transitioning existing code bases and, in many instances, bespoke build systems will be a great obstacle.\n\nPackage manager usage is on the rise, but the growth curve is slow. I don’t expect any tool to capture more than 40% market share by the decade’s end.\n\nIn the C++ feature department, we can expect static reflection, pattern matching, contracts, and sender/receiver to become available over the next decade.\n\nAI-assisted coding is following the well-trodden Gartner hype cycle where inflated expectations precede an ultimate plateau of productivity. While we’re thankfully past the idea that AI-backed productivity gains will result in massive Software Engineering workforce reductions, I don’t think it is yet clear to what extent AI will improve software development productivity.\n\nAnother major factor over the next 10 years will be the growing usage of Rust by C++ developers. The following graph illustrates the increasing percentage of C++ users that also use Rust based on data from StackOverflow annual surveys. A conservative linear projection results in 50% of C++ developers also using Rust in 10 years.\n\nC++ in 10 to 20 years\n\nC++’s complexity is increasing, and the impact on training costs and attractiveness to new developers will be especially apparent in 10–20 years. Compare a snippet of C++11 code to a potential equivalent in C++32:\n\n#include <iostream>\n\nclass C {\n\nstd::string j;\n\n};\n\nstd::ostream& operator<<(std::ostream&os,\n\nconst C &c) {\n\nreturn os << j;\n\n}\n\nimport std; // Modules, something to know in addition to #include\n\n// Metaclasses feature?\n\nclass(propagate_allocator) C {\n\nstd::pmr2::string j; // Another std::string vocabulary type?\n\n};\n\n// Formatters are preferred to stream operators since C++20\n\ntemplate <>\n\nstruct std::formatter<C> {\n\nconstexpr auto parse(\n\nstd::format_parse_context& ctx) {\n\nreturn ctx.begin();\n\n}\n\nauto format(const C& x,\n\nstd::format_context& ctx) const {\n\nreturn std::format_to(ctx.out(), \"{}\", x.j);\n\n}\n\n};\n\nAnd this doesn’t even touch on the complexity of concepts, constexpr, contracts, and other features.\n\nOne might wonder if today’s C++ successor hopefuls — Hylo, Swift, Cpp2, Carbon, Zig, Mojo, and Rust — will gain more traction at this time. Swift and Rust are likely to remain due to the world’s existing dependence on them. For the others, to achieve significant adoption they’ll need something like 10 years of continuous investment. Unfortunately, difficulties maintaining momentum makes success unlikely (See The Economics of Programming Languages by Evan Czaplicki).\n\nC++ will remain important in niches, companies with large existing C++ code bases, and surrounding software assets no one wants to rewrite. For the latter, consider the continued popularity of LAPACK, a useful and sophisticated linear algebra package, long after its Fortran programming language lost favor.\n\nIn the 10–20 year timeframe a few industry shifts will start to take hold. First, memory safety legislation will make usage of C and C++ for new projects require special justification and oversight. Safety-critical applications will see C++ entirely phased out. Second, software engineering as an engineering discipline will mature with regulatory oversight, inspections, and enforcement of best practices becoming commonplace. Finally, on the application side, AI will become the dominant form of human-computer interaction.\n\nC++ in 20 to 30 years\n\nThis period is difficult to predict, but the world will likely remain highly dependent on complicated and memory-unsafe C++. However, rather than people, AI will be doing most of the coding; it will find and fix defects and we’ll trust it to do so. While rewriting C++ code into a more suitable programming language may be proposed, such efforts will be deemed risky and expensive. C++ will live on like the imperial measurement system in the USA.\n\nNotables from the Conference\n\nAt first glance, CPP-Summit looked like any other C++ conference: you’ve got vendor booths, conference rooms, swag, etc. A notable difference was a curious tray of electronic devices lingering on a table. As I came to find out, those were earpieces that transmit live translations of English-speaking presenters. As a speaker, I also made use of one to hear audience questions on a panel.\n\nAs a speaker from another country, I couldn’t have been better taken care of. I was offered accompaniment at meals, a guide to show me the sites in Beijing, and even some small souvenirs to give my kids when I returned. I’m incredibly grateful to Jason Li, Raymond, Yongwei Wu, and Li Monan for being such gracious hosts.\n\nI learned that it’s still relatively rare for folks from other countries to give talks in China and many even wanted photographs of me to mark the occasion. Below is a photograph of myself with Yanfei Zhang, a Chinese book author.\n\nThe one challenge I encountered was the Great Firewall, which blocks access to staples such as Google, GMail, and Slack. While this meant no Wikipedia (right when I needed it the most — to learn more about China!) I came to see lack of email access as a positive; more time to focus on the conference itself.\n\nIt was interesting to learn about the Chinese Software Developer Network (CSDN), China’s most popular developer portal. It provides a Github alternative (gitcode.com), a cloud-development platform (InsCode), a code-generating AI bot (so.csdn.net), and much more. I also had the pleasure of meeting CSDN’s founder, Jiang Tao.\n\nConclusion\n\nIn this post I’ve talked about speaking in China and outlined the content of my C++ and the Next 30 Years talk. Speaking at the conference was of great cultural interest, and ruminating on the future of C++ is fun in any context :)"
    }
}