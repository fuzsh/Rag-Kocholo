{
    "id": "dbpedia_991_0",
    "rank": 61,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Subsequent-sibling_combinator",
        "read_more_link": "",
        "language": "en",
        "title": "Subsequent-sibling combinator - CSS: Cascading Style Sheets",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [
            "https://live.mdnplay.dev/en-US/docs/Web/CSS/Subsequent-sibling_combinator/runner.html?id=using_the_combinator_with_complex_selectors"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-01-22T12:25:49+00:00",
        "summary": "",
        "meta_description": "The subsequent-sibling combinator (~, a tilde) separates two selectors and matches all instances of the second element that follow the first element (not necessarily immediately) and share the same parent element.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/CSS/Subsequent-sibling_combinator",
        "text": "This example shows the use of the ~ combinator when both the selectors are simple selectors (p and span).\n\nhtml\n\n<article> <span>This is not red because it appears before any paragraph.</span> <p>Here is a paragraph.</p> <code>Here is some code.</code> <span> This span is red because it appears after the paragraph, even though there are other nodes in between. </span> <p>Whatever it may be, keep smiling.</p> <h1>Dream big</h1> <span> Doesn't matter how many or what kind of nodes are in between, all spans from the same parent after a paragraph are red. </span> </article> <span> This span is not red because it doesn't share a parent with a paragraph. </span>\n\ncss\n\np ~ span { color: red; }\n\nThis example contains two complex selectors, both using the subsequent-sibling combinator: .foo p ~ span and .foo p ~ .foo span.\n\nThe first complex selector, .foo p ~ span, matches all spans that come after a paragraph if the span and paragraph share the same parent and that parent or an ancestor of that parent has the class .foo.\n\nThe second complex selector, .foo p ~ .foo span, matches all spans that are a descendant of the element with class .foo if that element is a sibling of the previously mentioned paragraph.\n\nThe example below shows that the target element in the complex selector must share the same parent as the initial element in the complex selector.\n\nhtml\n\n<h1>Dream big</h1> <span>And yet again this is a red span!</span> <div class=\"foo\"> <p>Here is another paragraph.</p> <span>A blue span</span> <div class=\"foo\"> <span>A green span</span> </div> </div>\n\ncss\n\n.foo p ~ span { color: blue; } .foo p ~ .foo span { color: green; }\n\nIn the above HTML, the two siblings of .foo p are span and .foo. The green span is a descendant of the .foo class, which is a sibling of p.\n\nWhen the target selector is span, the span element that is a sibling of p is selected. The p element is a descendant of .foo, so are its span siblings.\n\nIn .foo p ~ .foo span, the target selector is span that is a descendant of .foo. In this case, the span element that's a descendent of .foo is selected if that .foo is a sibling of p; essentially, both are nested in an ancestor of .foo."
    }
}