{
    "id": "dbpedia_7411_1",
    "rank": 75,
    "data": {
        "url": "http://debaday.krev.no/",
        "read_more_link": "",
        "language": "en",
        "title": "",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/09/leafpad_screenshot-300x210.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/09/yeahconsole-150x93.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/06/2034_large.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/06/1745_large.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/06/287_large.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://screenshots.debian.net/screenshots/i/iotop/2005_small.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/05/dmidecode.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/05/biosdecode.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/05/vpddecode.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/1390_large.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/ferm.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/cdargs-screenshot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/regexxer.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/gedit-val.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/rule1_thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/services.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/main_window.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/03/screenshot-pida-default-home-javier-python-pidadev-pida-main-pida-plugins-bazaar-release_notes_020txt.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/02/fp_notext_logo.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/02/out0.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/02/fp.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/02/out6.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/01/rtpg_small.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/01/console_rtpg.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/01/iftop_normal.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/01/iftop_screenshot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2009/01/atop_screenshot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/dstat_screenshot_window.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/movie_listing.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/viewing_a_movie.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/search_imdb.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/saved_filters.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/arrangements.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/editing_arrangements.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/collection_fields.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/html_textbox.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/12/editing_tables.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot6.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot8.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot4.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot9.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot11.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot5.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot12.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/gcompris_screenshot13.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/picture-039.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/picture-036.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/picture-065.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/11/tkremind.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/11/wyrd.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/synfig0.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/10/synfig1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/logstalgia.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/flamerobin.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/flamerobin_2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/mythtv_main_menu.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/myth_recorded_videos.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/09/mythtv_web_interface.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/08/shoot_default.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/08/shoot_custom.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/08/todo_screenshot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/08/easytag-main.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/08/easytag_mask_editor.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/07/anniversary.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/07/birthday.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/06/ghextris.jpg",
            "http://debaday.krev.no/img/?img=http://joe-editor.sourceforge.net/elaborate.gif",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/05/head-orig3.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/05/head-smooth3.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/configuration.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/ready.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sonata-mini.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sonata-play-list.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sonata-library.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sonata-info.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sonata-options.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/firefox_sitebar.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/sitebar_menu.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/import.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/add_link.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/new_folder.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/wesnoth-game.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/wesnoth-help.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/wesnoth-lobby.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/04/wesnoth-addons.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/03/stellariuminterface.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/03/stellariumskycultures.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/03/stellariumnebulae.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/02/bootchart-intro.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/02/rkscreen.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/dillo.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/vym1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/vym2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/vym3.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/vym4.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/lyx_logo_hi.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/lyx-startup.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/lyx-menu.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2008/01/formula.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/firstrun.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/importfolder.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/importfromcd.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/rhythmbox.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/mytop.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/screenshot-liferea.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/img1.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/img3.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/img2.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/12/virtualbox-ose.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex11.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex2.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex-new-entry.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex-spires.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex-and-kile.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/kbibtex-source.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/bildschirmfoto-1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/bildschirmfoto-2.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/bildschirmfoto-3.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/timer-applet-setup1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/timer-applet-waiting1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/timer-applet-finished1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/torus-trooper.jpeg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/pantallazo-torus-trooper-1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/pantallazo-torus-trooper-5.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/pantallazo-torus-trooper-3.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/11/pantallazo-torus-trooper-2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/thoggen_title-selection.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/thoggen_encoding_options.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/thoggen_encoding_window.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/diag-1-kivio-startup.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/diag-2-kivio-desktop.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/decibel-audio-player-main-scaled.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/10/decibel-audio-player-modules.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/gpr-ops.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/gpr-cas.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/gpr-ins.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/gpr-rep.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/gpr-num.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/newsbeuter-feedlist.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/newsbeuter-article.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/newsbeuter-colors.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/newsbeuter-i18n.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult2.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult3.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult4.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult5.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult8.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/katapult7.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/normal_conky.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/burgershot-thumb.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/iptraf_conn.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/iptraf_settings.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/iptraf_filter.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/iptraf_statistics.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/jed.png",
            "http://debaday.krev.no/img/?img=http://www.levien.com/type/myfonts/incoshow.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/main.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/root.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/08/files.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/pantallazo-krename-1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/pantallazo-krename-2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/pantallazo-krename-3.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/pantallazo-krename-4.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/pantallazo-krename-5.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/apt-listbugs.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/apt-listbugs2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1198/542124396_ff38b2db74.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1038/542124400_4360440992.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1428/542124406_aeeb7f5d76.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1079/542124410_6075a2e264.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1383/542124416_b5af1baabe.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1406/542328609_d2d3131059.jpg",
            "http://debaday.krev.no/img/?img=http://farm2.static.flickr.com/1362/844435126_2ce58a1d0c_o.png",
            "http://debaday.krev.no/img/?img=http://www.ingimp.org/images/group.png",
            "http://debaday.krev.no/img/?img=http://www.ingimp.org/images/disable_logging.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/sm.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/wewantyou.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/hugin-file_list.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/hugin-control_points.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/hugin-stitcher_preview.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/00387_pano_small.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/07/mocp.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/06/fretsonfire1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/06/fretsonfire4.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://media.debconf.org/dc7/logo-banner-split1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/06/treeline.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/konversation10_3.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/konversation1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/configure-konversation.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/onscreendisplay.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/cmdexecution.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/ultrastarng.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/key3.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/key2.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/key1.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/oview.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/trans.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/klipper1.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/klipper2.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/klipper3.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/screenshot-screen-actions.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/meld_httpd_conf.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/meld_subversion_dir.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://www.fail2ban.org/wiki/images/a/af/Fail2ban-screenshot.jpg",
            "http://debaday.krev.no/img/?img=http://www.fail2ban.org/wiki/images/thumb/1/10/Fail2ban_map.png/640px-Fail2ban_map.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/amarok-sublime.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/fill-in-tags-1-large.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/fill-in-tags-2-large.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/amarok-america-1.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/america-2.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/amarok-america-3.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/taskbar.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/write-tags-selected.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/organize-1.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/05/organize-2.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/most-man.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/most-windowed.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/most-binary.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/04/enigma-01.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/04/enigma-02.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/enigma-03.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/04/glabels_shot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://reportbug-ng.alioth.debian.org/reportbug-ng.gif",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/tinyca_main-window.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/tinyca_certificates.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/tinyca_new-ca.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/tinyca_import-ca.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/tinyca_help.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gobby1.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gobby2.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/multitail-lotsofwindows.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/multitail-mergemultipleoutputs.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/multitail-colorscheme.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/multitail-gnome-terminal.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/clientes_mpd.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/rsibreak_stat.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm_add.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm_menu.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm_otherapps.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm_ortherapps_search.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/gmm_controlpanel.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/03/yakuake.thumbnail.jpg",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/02/digikam-screenshot.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/02/stats.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/02/partyline.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/02/action.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://pardus-larus.student.utwente.nl/~pardus/projects/zim/images/screenshots/zim_1.png",
            "http://debaday.krev.no/img/?img=http://pardus-larus.student.utwente.nl/~pardus/projects/zim/images/screenshots/zim_2.png",
            "http://debaday.krev.no/img/?img=http://pardus-larus.student.utwente.nl/~pardus/projects/zim/images/screenshots/zim_7.png",
            "http://debaday.krev.no/img/?img=http://krusader.sourceforge.net/screenshots/kr_unpack.png",
            "http://debaday.krev.no/img/?img=http://krusader.sourceforge.net/screenshots/kr_kioaudiocd.png",
            "http://debaday.krev.no/img/?img=http://krusader.sourceforge.net/screenshots/kr_3rdhanddiskusage.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/01/einstein-full.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/01/einstein-hints.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/01/einstein-elim.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/01/screenshot-agave2.png",
            "http://debaday.krev.no/img/?img=http://pypar2.silent-blade.org/uploads/Main/checkingSimple.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2007/01/pantallazo.thumbnail.png",
            "http://debaday.krev.no/img/?img=http://philbull.googlepages.com/rlplot_graph_selection.png",
            "http://debaday.krev.no/img/?img=http://philbull.googlepages.com/rlplot_example.png",
            "http://debaday.krev.no/img/?img=http://debaday.debian.net/wp-content/uploads/2006/12/unison-gtk.png",
            "http://debaday.krev.no/img/?img=http://floatingsun.net/gallery/d/1143-1/qalculate-1.png",
            "http://debaday.krev.no/img/?img=http://floatingsun.net/gallery/d/1145-1/qalculate-2.png",
            "http://debaday.krev.no/img/?img=http://floatingsun.net/gallery/d/1149-1/qalculate-4.png",
            "http://debaday.krev.no/img/?img=http://floatingsun.net/gallery/d/1153-1/qalculate-6.png",
            "http://debaday.krev.no/img/?img=http://www.scipy.org/SciPy?action=AttachFile&do=get&target=mplscreenshotsm.png",
            "http://debaday.krev.no/img/?img=http://www.scipy.org/SciPy?action=AttachFile&do=get&target=chacoscreenshotsm.png"
        ],
        "movies": [
            "http://reader.googleusercontent.com/reader/embediframe?src=http://www.youtube.com/v/BYYX-h4-dpM%26hl%3Des%26fs%3D1&width=425&height=344"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "debaday.debian.net aka debaday.krev.no\n\nThis is not debaday.debian.net, but a dump of the atom feed of content that was available on debaday.debian.net\n\nI do not intend to update this content but I think that good knowledge should be keept free and shared since their site shutdown.\n\nBefore debaday.debian.net, there was http://debaday.livejournal.com/\n\ntmpreaper: keep your temp files under control\n\n2009-11-22T05:00:39Z\n\nThe tmpreaper utility will clean out your temporary file directories by recursively removing files that haven’t been accessed in some amount of time. You can configure exclusions and it will not dive into symlinks, or remove symlinks, sockets, FIFOs, or special files unless specifically told to.\n\nHowever, the package description contains this:\n\nWARNING: Please do not run `tmpreaper’ on `/’. There are no protections against this written into the program, as that would prevent it from functioning the way you’d expect it to in a `chroot(8)’ environment.\n\nAfter you install the package, you need to manually edit /etc/tmpreaper.conf and remove or comment the SHOWWARNING=true line to actually active it. Also review the settings in that file.\n\nAt least some versions of Ubuntu, and possibly Debian, do not install tmpreaper by default. I assume that is in accordance with the “principle of least surprise” but this policy may bother system administrators familiar with Red Hat or other systems where /tmp is automatically cleaned out by default. Note that /tmp and other directories are still cleaned at boot-time by the default /etc/init.d/bootclean (Debian) or /etc/init.d/*-bootclean.sh (Ubuntu) scripts.\n\nThe Red Hat and derivatives equivalent is ‘tmpwatch’ and is installed by default on those systems.\n\nlbzip2: parallel bzip2 utility\n\n2009-11-12T13:31:44Z\n\nlbzip2 is a multi-threaded bzip2 compressor/decompressor utility that can be used on its own, in pipelines, or passed to GNU tar with the –use-compress-program option (or with the –use shorthand).\n\nThe main motivation for writing lbzip2 was that I didn’t know about any parallel bzip2 decompressor that would exercise multiple cores on a single-stream bz2 file (i.e. the output of a single bzip2 run) and/or on a file read from a non-seekable source (e.g. a pipe or socket). Thus lbzip2 started out as lbunzip2, but with time it gained multiple-workers compression and single-worker decompression features. Due to the input-bound splitter of its multiple-workers decompressor, it should scale well to many cores even when decompressing.\n\nTarget audience\n\nOriginally, the target audience for lbzip2 was experienced users and system administrators: up to version 0.15, lbzip2 deliberately worked only as a filter. Now at 0.17, lbzip2 is mostly command line compatible with bzip2, except it doesn’t remove or overwrite files it didn’t create. If lbzip2 will have a chance to enter the Debian alternatives system, as an alternative for bzip2, I’ll add this feature. In any case, you are encouraged always to verify lbzip2’s output manually before (or instead of automatically) removing its input, both when compressing and when decompressing. I also recommend perusing the README, installed as /usr/share/doc/lbzip2/README.gz on Debian, before switching over to lbzip2 eventually.\n\nUsage examples\n\nAs lbzip2 was chiefly created for speeding up decompression of single-stream bz2 files and/or for speeding up decompression from a pipe, I’ll provide examples of decompression first. Basically all free software tarballs should be available on the net as tar.bz2 files, I’ll choose (not surprisingly) a kernel tarball.\n\nThe “traditional” method:\n\nwget \\ http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.31.1.tar.bz2 tar --use=lbzip2 -x -f linux-2.6.31.1.tar.bz2\n\nThe overlapped method:\n\nwget -O - \\ http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.31.1.tar.bz2 \\ | tee -i linux-2.6.31.1.tar.bz2 \\ | tar --use=lbzip2 -x\n\nIf wget fails to download the tarball for some reason (at which point at least tar will complain), you should remove the partially decompressed tree and fall back to the traditional method. To avoid losing the already downloaded part, pass -c to wget.\n\nAnother example might be the import of a Wikimedia Dump file, perhaps with a pipeline like this:\n\nlbzip2 -d < enwiki-latest-pages-articles.xml.bz2 \\ | php importDump.php\n\nFinally, a compression/backup example with verification at the end:\n\ntar --format=pax --use=lbzip2 -c -f tree.tar.bz2 tree tar --use=lbzip2 --compare -f tree.tar.bz2 -v -v\n\nHypothetically, with lbzip2 as the configured bzip2 alternative, we should be able to replace –use=lbzip2 with the well-known -j GNU tar option.\n\nComparison with other bzip2 utilities\n\nI posted a longish mail with feature analyses and performance measurements to the debian-mentors maling list. To reiterate what I said there: fundamentally, lbzip2 was created to fill a performance gap left by pbzip2.\n\nAfter working on lbzip2 for a while, I found out that p7zip does in parallel the decompression of single-stream bz2 files, but (the last time I checked) it couldn’t scale above four threads, and it refused to read bz2 files from a pipe.\n\nBzip2 compression and decompression performance is very sensitive to the cache size that is dedicated to a single worker thread (i.e. a single CPU core). To my limited knowledge, this implies that among commodity desktops, lbzip2 performs best on multi-core AMD processors.\n\nlbzip2 does have shortcomings. They are either inherent in the design or I deem then unimportant. I tried to document them all. Please read the debian-mentors post linked above, the README file, and the manual page.\n\nAs said above, I didn’t originally intend lbzip2 as a drop-in replacement for bzip2. Even though it is almost there now, you should nonetheless get to know it thoroughly before deciding to switch over to it.\n\nAvailability\n\nVarious versions of lbzip2 are available for Debian (squeeze and sid) and Ubuntu (karmic and lucid).\n\nYou should be able to install lbzip2 on lenny too; it shouldn’t break anything. I used the following commands:\n\ncat >>/etc/apt/sources.list <<EOT deb http://security.debian.org/ testing/updates main deb http://ftp.hu.debian.org/debian/ testing main EOT apt-get update apt-get install lbzip2\n\nUpstream releases are announced on the project’s Freshmeat page. I distribute the upstream version to end-users from my recently moved home page, which also links to other distributions’ lbzip2 packages.\n\nA development library version is very unlikely. You can work around this by communicating with an lbzip2 child process over pipes via select(), and by checking its exit status via waitpid() after receiving EOF. This is not an unusual method; see, for example, gpg’s many –[^-]*-fd options.\n\nEnd-user stress-testing\n\nI encourage you to test lbzip2. The upstream README describes the test method in general; let me instantiate that description here specifically for Debian.\n\nNecessary packages, in alphabetical order:\n\nbzip2\n\ndash\n\ngcc\n\nlbzip2\n\nperl\n\nRecommended packages, in alphabetical order:\n\np7zip-full\n\npbzip2\n\nCreate a test directory (you will need lots of free space under that directory), and under it a well-compressible big file. For example:\n\nmkdir -m 700 -v -- \"$TMPDIR\"/testdir tar -c -v -f \"$TMPDIR\"/testdir/testfile.tar /usr/bin/ /usr/lib/\n\nThen issue the following commands, utilizing the test file created above. As this could take several hours, I suggest entering a screen session first. Your machine should be otherwise unloaded during the test, both IO- and CPU-wise.\n\ncd /usr/share/lbzip2 dash test.sh \"$TMPDIR\"/testdir/testfile.tar\n\nAny errors encountered during the test should be either handled or fatally rejected. In particular, utilities refusing to decompress from a pipe are handled.\n\nEstimated disk space usage: when writing this article, I executed the above commands with a 100 MB test file. (You should aim at least at 1 GB.) The test directory ended up being 250 MB in size. M stands for 220, G stands for 230.\n\nEstimated time span: supposing\n\nyour machine has N cores (each with a dedicated L2\n\ncache),\n\nthe file you use for testing lbzip2 is S GB big,\n\nand bzip2 takes T seconds to compress a 1 GB test file with similar contents,\n\nthen the full test should take around\n\nS * (1879 + 2098 * 2 / N) * T / 240\n\nseconds.\n\nEstimated peak memory usage: N * 50 MB should be a very safe bet.\n\nTo view the test report:\n\nless -- \"$TMPDIR\"/testdir/results/report\n\nThe only obscure entries in the table should be the “ws” ones. They mean “workers stalled” and give a percentage of how many times the (de)compressor worker threads tried to start munching a block but had to go to sleep because there was no block to munch. Anything above 1-2% usually implies some bottleneck and shows that lbzip2 couldn’t fully exhaust your cores. This shouldn’t occur, but if it does and lbzip2 and pbzip2 have performed similarly in the compression tests, then the bottleneck is in your system, not lbzip2.\n\nBackupninja: the ultimate data defender\n\n2009-11-01T14:00:41Z\n\nEveryone knows they should do regular backups. Sooner or later, your hardware will fail, or you will accidentally delete a directory, or something else will happen.\n\nMany people, however, ignore periodic backups because they find it too much of a hassle. That’s why, the backup procedure must be fully automated and require no user intervention, at all.\n\nBackupninja is a backup system that provides excellent automation and configuration facilities. You only need to instruct Backupninja once, and he will take silent duty of defending your valuable data. This can be done via direct edit of configuration files, or via a nice console wizard called ninjahelper, which also helps to test the backup actions interactively.\n\nBackupninja doesn’t do the hard work himself, but rather relies on specialized tools like rdiff and duplicity, thus following the Unix-way. There is built-in support for specialised backup actions, including things like the backup of Subversion repositories, or LDAP, MySQL, and PostgreSQL databases. It can do remote, incremental backups, as well as burning them to CDs or ISO images.\n\nBut the best part is that Backupninja is capable of learning new powerful skills, just by reading user-provided shell scripts. For example, I use the following script to dump important package information of my Debian system:\n\n#!/bin/sh dpkg --get-selections > /var/backups/dpkg-selections if [ $? -ne 0 ] then error “dpkg selections dump failed” else info “dpkg selections dump done” fi aptitude search -F %p ‘~i’ > /var/backups/apt-installed && \\ aptitude search -F %p ‘~i!~M’ > /var/backups/apt-installed-manual && \\ aptitude search -F %p ‘~i ~M’ > /var/backups/apt-installed-auto if [ $? -ne 0 ] then error “installed package list dump failed” else info “installed package list dump done” fi\n\nNote the use of some special functions: debug, info, and error. They put descriptive messages into the log file. It allows me to quickly ensure that fresh backups have actually been created. I’ve been using Backupninja to backup my personal data for a long time.\n\nPros:\n\nFully automates the backup procedure\n\nIs very easy to setup\n\nIs very flexible\n\nCons:\n\nBuild-in functionality could support more features\n\nSupport for non-shell backup scripts is limited\n\nleafpad: a graphical text editor that starts really fast\n\n2009-09-27T05:00:34Z\n\nArticle submitted by Emmanuel Kasper. Guess what? We still need you to submit good articles about software you like!\n\nSometimes you know you just need to change a single line or a only a few things in a file, but for sure you don’t need syntax highlighting, Gnome VFS integration, or a plugin manager. Then you can spare a few seconds and start leafpad, instead of the usual Gedit/Kedit. Leafpad is is a very simple GTK editor, who can just do search/replace, line numbering and, yes, you can change the default font. Actually, as the result of creeping featurism, printing was added to Leafpad in version 0.8\n\nLeafpad starts always in less that a second, in contrast to 3-4 seconds for gedit on my computer. And for just removing a single line, it makes a difference.\n\nSince leafpad has an installed size of 672k, giving it a try will surely not clutter your hard drive.\n\nLeafpad has been in Debian since at least Etch, and in Ubuntu since Dapper Drake.\n\ntimeout: send a signal to a process after some time\n\n2009-09-20T05:00:49Z\n\nArticle submitted by Carsten Aulbert. Guess what? We still need you to submit good articles about software you like!\n\ntimeout (part of the SATAN package) is a nice little tool to terminate/send a signal to a process after a given time.\n\nIt usually takes two arguments, the first one is the time limit in seconds and the second the program to start. All trailing options are then passed to the started program.\n\nIt accepts a single numerical option which specifies what signal to send — be careful as its default is SIGKILL.\n\nQuite useful on many occasions, e.g.: strace stats of a process PID for the next 300 seconds\n\ntimeout -2 300 strace -tt -c -p PID\n\nEnsure that your kids don’t play childsplay all day long (of course you need to make sure that they won’t be able to restart it ;))\n\ntimeout 3600 childsplay\n\nSimilar programs could be timelimit.\n\nPackage is available in Debian for ages (at least since etch) and Ubuntu since at least dapper.\n\nyeahconsole: a dropdown terminal emulator wrapper for X\n\n2009-09-13T05:00:21Z\n\nArticle submitted by Pete Daniels. Guess what? We still need you to submit good articles about software you like!\n\nyeahconsole is a “quake-like” dropdown terminal emulator wrapper for X. Originally written to complement the author’s window manager (yeahWM), it can be used anywhere, and is lightweight and dependency-free.\n\nyeahconsole can be invoked by itself (in which case it simply starts your preferred terminal emulator) or with the -e (execute) argument. Once started, the default hotkey to drop down the terminal is Ctrl-Alt-y.\n\nyeahconsole can be configured via your ~/.Xresources file, in the format:\n\nyeahconsole*foo: value\n\nType yeahconsole -h to view possible resources and their default values. Some highlights:\n\nterm: Your preferred terminal emulator. xterm and urxvt are supported. xOffset, screenWidth, consoleHeight: Set the placement and size of the terminal. Offset and width are measured in pixels, height in lines. aniDelay, stepSize: Delay and step size settings for the slide animation. Setting stepSize to 0 disables the animation. toggleKey, keyFull: Hotkeys to drop down the terminal. Set to Control-Alt-y and Alt-F11 by default, respectively.\n\nSee the man page for more; see also the man pages for xterm and urxvt and their respective resources. Particularly note that if urxvt is used as the terminal emulator, pseudo-transparency is supported.\n\nOther alternatives\n\nYakuake (featured in another debaday article) and Tilda: For KDE and Gnome, respectively. Yakuake is a wrapper for Konsole and Tilda for Gnome-terminal libvte (on which Gnome-terminal is based on). Both highly useful and, in some respects, more full-featured, but both carrying obvious overhead (and dependencies), especially if you’re not using KDE or Gnome. For instance, both Yakuake and Tilda have tabs, a feature which yeahconsole lacks. However, this writer has found yeahconsole + screen to be a much more lightweight, configurable, and ultimately satisfying solution.\n\nAvailability & Status\n\nyeahconsole has been available in Debian since at least Etch, and in Ubuntu since Gutsy. It is unknown to this writer whether yeahconsole is in active development, but it seems to be bug-free.\n\nfcheck: easy-to-use file integrity checker\n\n2009-08-23T19:49:30Z\n\nfcheck is a program that emails an alert when important files or directories change. This is useful for change control or detecting unauthorized modifications that may indicate an intrusion.\n\nMost sysadmins will agree that having a file integrity checker is a good idea, the problem with them is that they are usually a giant pain to get working and keep up-to-date. Thus they are perpetually on the “to do” list and then you don’t have it when you need it. (Hint, after the intrusion is too late.)\n\nEnter fcheck, which Just Works out-of-the-box with the exception of the “major gotcha” detailed below, and with only a little care and feeding.\n\nWhen installed it creates the file database (DB) then runs from cron every two hours. When it sees a change it sends email (via cron) then rebuilds the DB by itself, so you won’t get the same error next time. That’s a potential security issue, since if you lose that email you’ve missed your one and only alert. Also, if some files change all the time (like /etc/mtab, /etc/printcap, and /etc/samba/smbpasswd) you will get alerted on them every run, until you go exclude them. The configuration file supports file includes, so keeping a custom fcheck.local file is a breeze.\n\nYou will get a large alert message after an aptitude *-upgrade command, which is a great way to validate your change control policy (yup, stuff was changed when it was supposed to; or Who the heck is messing with my server?!?).\n\nThe existing package does not include logcheck ignore files, so if you’re using the logcheck package (and you should be on a server) you’ll get a alerts about DB rebuilds unless you add an ignore line (see samples).\n\nThe default config file is not bad, and adding new files and directories for fcheck to monitor is really easy, though including directories is a bit subtle in that they are only checked recursively if listed with a trailing ‘/’. See the examples below for things I usually add.\n\nThere is also a major gotcha reported in this bug report. It turns out there is a missing exclude needed for /lib/udev/devices/ so the install will hang at “Building fcheck database (may be some time)…” or during a check at “PROGRESS: validating integrity of /lib/” and leave a ton of fcheck processes clogging up your system. See the bug and the samples below for the fix.\n\nBecause of the easy failure mode of a single email before the DB update, and the lack of cryptographic protection of its component files, it’s not the most secure program in the book. But it is drop-dead easier than anything else I looked at. In my book, “easy and used” beats “such a pain I never got around to it” any day :-). And it’s not that hard to make it more secure by keeping off-line copies of the DB, configuration and Perl script and adjusting the cronjob to NOT rebuild after changes, if you want to.\n\nIf you run a server you should be using fcheck and logcheck. And probably tmpreaper, etckeeper and maybe monit too. To summarise:\n\nPros:\n\nJust Works out-of-the box, unlike its competitors\n\nSimple to set up and use\n\nVery stable code (hasn’t changed since 2001 or so)\n\nWritten in Perl, for easy hacking\n\nRuns on Windows too\n\nCons:\n\nArguably not as secure as some competitors\n\nBUG: https://bugs.launchpad.net/ubuntu/+source/fcheck/+bug/47408\n\nPackage should include an fcheck.cfg that is a bit more comprehensive\n\nPackage should include logcheck ignore files\n\nOther alternatives:\n\ndebsums\n\nVerify installed package files against MD5 checksums.\n\nintegrit\n\nA file integrity verification program.\n\nosiris\n\nnetwork-wide system integrity monitor control interface.\n\nsamhain\n\nData integrity and host intrusion alert system.\n\nstealth\n\nA stealthy File Integrity Checker.\n\ntripwire\n\nfile and directory integrity checker.\n\nAvailability:\n\nDebian: Since at least Etch: 2.7.59-8\n\nUbuntu: Since at least Dapper: 2.7.59-8\n\nSamples:\n\nEdit /etc/fcheck/fcheck.cfg and add at the bottom:\n\n# Tweak the main file if needed, then add this near the bottom. # In addition to the defaults in this main file, also: CFInclude = /etc/fcheck/fcheck.cfg.local\n\nCreate /etc/fcheck/fcheck.cfg.local\n\n# In addition to the defaults in '/etc/fcheck/fcheck.cfg': # Track changes to crontabs (may want to limit to some users on busy systems) # Note trailing '/' for recursive check of this directory Directory = /var/spool/cron/ # This stuff changes too often Exclusion = /etc/package.list Exclusion = /etc/printcap Exclusion = /etc/motd Exclusion = /etc/mtab #Exclusion = /etc/samba/smbpasswd # for DHCP: Exclusion = /etc/resolv.conf # BUGFIX, per https://bugs.launchpad.net/ubuntu/+source/fcheck/+bug/47408 # Can't hurt to have this just in case Exclusion = /lib/udev/devices/\n\nOnly if you are also using the logcheck package, create /etc/logcheck/ignore.d.server/fcheck.local:\n\n# Ignore fcheck rebuild notices # Note that this should be one single line: ^\\w{3} [ :0-9]{11} \\w+ fcheck: “INFO: Rebuild of the fcheck database /var/lib/fcheck/fcheck\\.dbf begun \\ for \\w+ using config file /etc/fcheck/fcheck\\.cfg”\n\nlogcheck: brilliantly simple log monitoring\n\n2009-07-19T05:00:33Z\n\nLogcheck is a simple yet great idea, an almost set-it-and-forget-it way to monitor your server logs for problems of all kinds. You create three pattern (grep regex) lists:\n\nKnown bad stuff\n\nLooks bad but isn’t\n\nKnown good stuff\n\nLogcheck periodically checks various syslog (or other) log files and picks up where it left off the last time. During each run it takes the new messages and looks for “known bad” things but first removes stuff that “looks bad but isn’t” and saves the messages as “this is known to be bad.” Then it rewinds, removes the known bad it just collected, removes the “known good” and stuff that “looks bad but isn’t” and saves whatever is left as “unknown.” Then it emails you the results.\n\nOver time, as you tune your files, you end up only being alerted to known bad or new (not yet classified) stuff. Brilliant. I even did a (cheesy) Windows port of it.\n\nOriginally written by Marcus J. Ranum and Fred Avolio as frequentcheck.sh for the TIS Gauntlet firewall toolkit, it was adapted by Craig Rowland and applied to system logs. It spent some time as logsentry as part of Psionic’s Abacus/Sentry tools until they were bought by Cisco and the tools moved to SourceForge. The version in Debian is a re-write which was then inherited by Ubuntu.\n\nBut the best about the Debian/Ubuntu implementation is that almost all of the patterns you need are already Just There™. I usually only have to add a handful to work around odd things I’m doing or minor bugs. See the example at the bottom.\n\nIf you run a server you should be using fcheck and logcheck. And probably tmpreaper, etckeeper and maybe monit too. Articles about all these tools will be published soon, stay tuned!\n\nAs drawbacks, it should be noted that it may require some tuning, especially on a workstation or newer distro versions, and that may not be scalable for a lot of servers.\n\nIs also worth mentioning that there are a variety of commercial and Managed Security Monitoring solutions that will scale and provide more information about events, but none are this easy.\n\nAvailability\n\nThe logcheck package is available in Debian since at least etch, and in Ubuntu since at least Dapper. See also the logcheck-database package.\n\nSample configuration\n\n/etc/logcheck/ignore.d.server/LOCAL.ignore (lines wrapped for readability)\n\n# /usr/sbin/logcheck automatically removes blank lines and comments. # See 'man run-ports' for file name restrictions. # For testing, create a sample log file and: # su -s /bin/bash -c \"/usr/sbin/logcheck -tsol sample\" logcheck # e.g.: su -s /bin/bash -c \"/usr/sbin/logcheck -tsol /tmp/mylog\" logcheck # # DHCP Client lease renewals # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ dhclient: New # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ dhclient: DHCP(REQUEST|ACK) # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ NetworkManager: DHCP daemon state is now 3 \\(renew\\) for interface # # NTP, usually: 4001/0001 # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ ntpd\\[[0-9]+\\]: kernel time sync status change [0-9]+ # # Syslog restarts (morning or all) # ^\\w{3} [ 0-9]{2} 07:[45][:0-9]{4} [._[:alnum:]-]+ syslogd 1\\.5\\.0#[0-9]ubuntu[0-9]: restart\\. # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ syslogd 1.5.0#[0-9]ubuntu[0-9]: restart\\. # # fcheck # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ fcheck: “INFO: Rebuild of the fcheck database /var/lib/fcheck/fcheck\\.dbf begun for [._[:alnum:]-]+ using config file /etc/fcheck/fcheck\\.cfg” # # lm-sensors (normal) # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ kernel: \\[[0-9. ]+\\] CPU[01]: Temperature/speed normal # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ kernel: \\[[0-9. ]+\\] Machine check events logged # # Wireless # ^\\w{3} [ :0-9]{11} [._[:alnum:]-]+ NetworkManager: \\(eth1\\): supplicant connection state:\n\nnullmailer: simple send-only mail transport agent\n\n2009-06-28T05:00:39Z\n\nArticle submitted by JP Vossen. DebADay needs you more than ever! Please submit good articles about software you like!\n\nNullmailer is a minimal MTA (Mail Transport Agent) that provides mail delivery services to programs (cron jobs, system integrity checkers, log inspectors, etc.) in a host that otherwise does not require a full MTA like Exim or Postfix. Do not confuse an MTA with programs like Evolution or Thunderbird which are MUAs (Mail User Agent): programs that offer an interface to a human to write email.\n\nNullmailer is one of those packages that create a “well duh” moment when you find out about it. Normally, hosts with no MTA can’t send mail, which turns out to be a Bad Thing in terms of finding out when things like cron jobs break, or for monitoring logs or files. So you go and install a minimal system, then wonder why it’s being so quiet. Well, no MTA, no email. But Exim, Postfix or another full MTA is overkill and might be tedious to maintain. What you really need is just a basic MTA to send messages to the real mail server.\n\nThat’s nullmailer.\n\nThe package will prompt for your remote mail server and create /etc/nullmailer/remotes, where you can also specify authentication details. You probably also want to create /etc/nullmailer/adminaddr to receive in one mail account all mail destined to your local host. Each file is a oneliner that contains pretty much what you’d expect:\n\n$ cat /etc/nullmailer/adminaddr I_get_roots_mail@example.com $ cat /etc/nullmailer/remotes mail.example.com\n\nThere are also several other files that may be used by nullmailer: /etc/nullmailer/defaultdomain and /etc/nullmailer/defaulthost in case you don’t already have /etc/mailname. For a complete list of control files, see the nullmailer(7) man page. Detailed information can be found in the man pages for each part of nullmailer: nullmailer-queue(8), nullmailer-inject(1), and nullmailer-send(8).\n\nPros:\n\nSimple.\n\nJust Works.\n\nAvoids the configuration, maintenance, memory footprint, and larger attack surface of a full MTA.\n\nCons:\n\nConfiguration is scattered about in multiple one-line files instead of just a trivial config file.\n\nDocumentation is a also bit scattered.\n\nThe package might be a little more helpful by asking more questions when it’s installed (e.g. prompting for root’s mail recipient).\n\nDoesn’t provide the -bs switch, so it’s not LSB compatible.\n\nGets very chatty in your log files when it can’t connect to the remote mail server.\n\nOther alternatives:\n\nssmtp - extremely simple MTA to get mail off the system to a mail hub\n\nhttp://linuxmafia.com/faq/Mail/nullmailers.html\n\nhttp://www.davidgrant.ca/ssmtp_vs_postfix_no_contest\n\nNullmailer has been available in Debian at least since Etch, and in Ubuntu Universe since Dapper.\n\nchromium-bsu: fast paced, arcade-style, scrolling space shooter\n\n2009-06-24T08:00:23Z\n\nOops, this article was supposed to go live on Sunday, my bad.\n\nArticle submitted by Paul Wise. DebADay needs you more than ever! Please submit good articles about software you like!\n\nChromium B.S.U. is a top down fast paced high action scrolling space shooter. In this game you are the captain of the cargo ship Chromium B.S.U., and responsible for delivering supplies to the troops on the front line. Your ship has a small fleet of robotic fighters which you control from the relative safety of the Chromium vessel.\n\nYou control the robotic fighters with your mouse and repel wave after wave of different kinds of enemy ships. Launch Chromium B.S.U. from the Applications / Games / Arcade menu and start a new game. You will soon be sending volleys of weapon fire toward the enemy ships while protecting yourself with super shields, waiting for powerups to get closer or dodging fire from the larger enemy ships at the end of each level:\n\nIf you keep getting killed, quitcher whinin’, you ninny! It’s supposed to be hard! Seriously, Chromium B.S.U. is intended to be a 15 minute adrenaline rush/mental cleanser. Frequent doses of explosions can be very therapeutic. There is always kamikaze attacks or the BIG RED BUTTON if you get into particularly nasty trouble.\n\nThe chromium package is in Debian since lenny and Ubuntu since dapper, but it has been recently renamed to chromium-bsu. Chromium B.S.U. is an old favourite of the Linux gaming community that has been neglected until recently. The project is still looking for developers, especially to help move it off obsolete libs like libglpng and fix the rest of the bugs.\n\niotop: simple top-like I/O monitor\n\n2009-06-14T23:02:09Z\n\nArticle submitted by Paul Wise. DebADay needs you more than ever! Please submit good articles about software you like!\n\niotop is a console application for monitoring the I/O usage of processes on your system. It is especially handy for answering the question “Grrr, sloooowness, why is my disk churning so much?”\n\nJust type iotop in your terminal and you will get a regularly updated list of processes and the amount of I/O they are currently using: reads and writesin bytes per second, and percentage of time spent swapping and waiting for I/O.\n\niotop is related to top and vmstat. In top you see a display of CPU and memory usage but not I/O. The vmstat utility shows it, but its just a stream of one-line reports instead of a dynamic display and doesn’t show the information in a per-process way.\n\nNote that iotop needs the CONFIG_TASK_DELAY_ACCT and CONFIG_TASK_IO_ACCOUNTING options enabled in the kernel; in Debian stock kernels, that’s already the case.\n\niotop is available in Debian since Lenny and in Ubuntu (universe) since Intrepid.\n\ndmidecode: get hardware information from the bios\n\n2009-05-03T05:00:36Z\n\nArticle submitted by Ryan Forsith. Guess what? We still need you to submit good articles about software you like!\n\ndmidecode is a useful tool designed to extract system hardware information directly from the BIOS. This information typically includes system manufacturer, model name, serial number, BIOS version, asset tag as well as a lot of other details of varying level of interest and reliability depending on the manufacturer. The information provided could potentially help in problem solving, like in the case of the screenshot provided; there’s no documentation to be found in regards to the setting of the CPU toggles, but the dmidecode output displays exactly which sequence can be used for each clock speed.\n\nThis information can be invaluable to administrators looking for tweaks, especially in legacy hardware. DMI data may not always be reliable, as the software is intended to report only what the BIOS tells it to.\n\nThree additional tools are packaged with dmidecode which further enhances it’s usefulness:\n\nbiosdecode prints all BIOS related information it can find.\n\nownership retrieves the “ownership tag” that can be set on Compaq computers.\n\nvpddecode prints the “vital product data” information that can be found in almost all IBM computers.\n\ndmidecode is available in Debian since Etch and in Ubuntu (universe) since Hardy.\n\ngoplay: discover interesting packages\n\n2009-04-12T05:00:40Z\n\ngoplay is a package browser that lets you find interesting packages that you didn’t knew before. It uses DebTags (categories to describe Debian packages) to classify the packages. The package comes with some generic browsers:\n\ngoplay Browse games.\n\ngoadmin Browse admin packages.\n\ngolearn Browse educational packages.\n\ngonet Browse networking related packages.\n\ngooffice Browse office packages, e.g. word processors, spreadsheets, project manager, finance managers, etc.\n\ngosafe Browse security packages.\n\ngoweb Browse packages related with the web.\n\nYou can refine your search by specifying the type of package you are looking for, that is, the specific role it has. For example, gonet (the browser of networking related packages) has the following types: “Client”, “Configuration”, “Firewall”, “High Availability”, “Load Balancing”, “Routing”, “Scaning”, “Server”, “Service” and “VPN or Tunneling”. The screenshot in the right shows gonet browsing firewall packages. When you click on a package on the left pane, the right pane shows a description of the package and the DebTags (in the example, ferm, a recently featured package in this site). If a screenshot for the package is available, it is also shown.\n\nThe first and second field for classification are automatically set to “type” and “interface”, but you can change that using the options --primary and --secondary. For example, you can prune the list of packages based on the purpose of the package using the option --secondary=use. You can find more information about the predefined tags (also known as “facets”) in the Debian Wiki.\n\ngoplay is available in Debian Lenny and Ubuntu (since Hardy).\n\nYour turn\n\nHave you found an interesting package with goplay? Share it with the community and send us a good article! We’re running out of them!\n\ncdargs: a browser for cd\n\n2009-04-05T05:00:03Z\n\nWe have run out of articles! Please submit good articles about software you like!\n\ncdargs is a command that enhances the good old cd by adding bookmarks and a browser. Sometimes you need to work on directories that are difficult to reach, even with the help of tab-completion (e.g. /var/www/mysite.com/subsection/includes). When you are in one of such directories, just type ca wwwinc and you’ll add a bookmark of the directory with the name wwwinc. Whenever you want to go back to that directory, no matter which is your current working directory, just type cv wwwinc and you’ll be back there. cdargs has tab-completion too and understands subdirectories of bookmarks. In the previous example, typing cv wwwinc/foo will be equivalent to cd /var/www/mysite.com/subsection/includes/foo\n\ncdargs has a browser. Just type cv and cdargs will bring you a list of your bookmarks. You can use the arrow keys (or h, j, k and l if you are used to vim) to navigate the list. When you have selected your final directory hit enter, and you’ll return to the command line, in that directory. You can add new bookmarks by hitting ‘a’ and you can edit your list of bookmarks with your favorite editor hitting ‘e’. With ‘?’ you get a list of all of the available commands in cdargs.\n\nThe bookmarks of cdargs can be extended to other commands. The distribution of cdargs provides examples for the commands cp and mv, under the aliases cpb and mvb. For example, if you want to copy the file bar to the bookmark in the previous example, a quick cpb bar wwwinc will do the trick.\n\ncdargs needs some aliases in the shell to work correctly. If you use the bash shell, you need to add this to your ~/.bashrc:\n\nif [ -e /usr/share/doc/cdargs/examples/cdargs-bash.sh ]; then . /usr/share/doc/cdargs/examples/cdargs-bash.sh fi\n\nThe aliases are also available for tcsh, but not for zsh. The author is looking for someone who knows zsh shell scripting to write them.\n\nOther alternatives\n\npushd, popd they are useful, but they are stack based and don’t provide any bookmark functionality.\n\nCDPATH You can achieve a similar behavior using the shell variable CDPATH, symbolic links and aliasing cv to cd -P. However, the bookmarks are easier to maintain with cdargs and the browser is a nice way to navigate through the filesystem. Moreover, with CDPATH you can’t extend other commands as cdargs does with cp and mv.\n\nAvailability\n\ncdargs has been in Debian since at least Sarge and in Ubuntu since at least Dapper.\n\nregexxer: search/replace for the masses\n\n2009-03-29T05:00:14Z\n\nArticle submitted by David A. Thompson. Guess what? We still need you to submit good articles about software you like!\n\nThis thing is great! If you manage a set of files (e.g., a code base) and end up needing to perform a search/replace across the files, or some subset thereof, maybe regexxer will end up being counted among your friends.\n\nThe regexxer web site summarizes regexxer as “a nifty GUI search/replace tool featuring Perl-style regular expressions”. After using regexxer, I have to agree…\n\nIf you have a code base that needs some search/replace time spent on it, regexxer really does seem to be the way to go. Again, the web site sums things up well: “If you need project-wide substitution and you’re tired of hacking sed command lines together, then you should definitely give it a try.”\n\nThe GUI\n\nThe regexxer GUI is a straightforward, logically organized window with file management on the left and search/replace management on the right. The beauty of the thing is that the author(s?) seem to have added a lot of flexibility to the search/replace process while keeping the user interface relatively simple and clean.\n\nFile Management\n\nOne can select one or many files from a given folder. Recursion is optional and a pattern (e.g., *.lisp) can be defined to further limit files being acted on. A ‘find’ button then triggers execution of the search and the corresponding files are shown in the window below. Not much more to say…\n\nThe Search Replace process\n\nThe user interface makes it easy on the noggin with top-to-bottom arrangement of controls which follow the logic of the search replace. The perl-style search regex and the corresponding replacement are entered at the top of the window. Another ‘find’ button triggers the search and the corresponding matches are shown in context in the window below. At this point, I found the regexxer user interface close to ideal. The flexibility available to the user includes:\n\n‘On the fly’ editing of the file.\n\nPerforming the replace action one-at-a-time or per file or upon all files as a unit.\n\nThe ability to navigate through the matches (little green arrows at the bottom let the user ‘back up’ or ’skip’ matches as desired).\n\nAlternatives\n\nIt’s likely I’m simply unaware of many of the alternatives ‘out there’. Typically, for this type of thing, many turn to sed, a powerful command-line tool. However, sed has a substantial learning curve. In contrast, if one has already mastered perl regex, regexxer requires very little in the way of additional investment of energy. Other command-line tools which provide some of sed’s functionality, such as modifile, rpl, and replace, perhaps have their place but they certainly don’t offer the warm fuzzies of the GUI interface of regexxer.\n\nEmacs, which typically seems to already have an extension for just about any task except cooking breakfast, didn’t seem to shine here. I can’t help but suspect that there’s an emacs tool available for this sort of thing but I haven’t happened across it yet.\n\nAmong other GUI tools, several offer similar functionality. For example, the text editor jedit can act in much the same way as regexxer. Unfortunately, jedit relies on java and, thus, things get dicey on planet Debian. Another, more focused tool, kfilereplace, is very straightforward but does not seem to be under active development and has much more limited functionality (e.g., the option to perform replacements ‘one-at-a-time’ is greyed out in the configuration window). Other utilities which seem to be designed to perform this type of task (e.g., modifile or regexsearch) don’t seem to be available for Debian.\n\nDistros\n\nApparently those on planet Debian and planet Ubuntu have Ross Burton and Daniel Holbach to thank for the packaging of this excelent tool.\n\nxmlstarlet: Command Line XML Toolkit\n\n2009-03-22T05:00:05Z\n\nArticle submitted by Vasily Faronov. Guess what? We still need you to submit good articles about software you like!\n\nWith the proliferation of XML-based formats, it is nice to have tools that manipulate XML documents in the traditional Unix-like fashion, as the good old grep(1), sed(1) and other tools do for plain text. xmlstarlet is one of such tools. In fact, it is an entire toolkit packed into one program: xmlstarlet can extract data from XML documents, alter them, validate them, and perform many other useful operations. xmlstarlet has been available in Debian since at least release 4.0 “etch”, and in Ubuntu since at least release 6.06 “Dapper Drake”.\n\nLet’s look at a few features of xmlstarlet more closely.\n\nExtracting Data from XML Documents\n\nThere is a flexible way of processing XML documents and extracting data from them — a language known as XSLT. Both Debian and Ubuntu provide utilities, such as xsltproc, to deal with XSLT. However, this language is not exactly terse, and it requires you to first compose a separate document defining the desired transformation, and then apply it to the original document. When all you want to do is extract a few values from a document, you’d like something more approachable.\n\nxmlstarlet is your friend. It features a relatively simple command syntax for selecting data, based on an auxiliary language called XPath, which allows for addressing elements in XML documents in a style reminiscent of filesystem paths. Behind the scenes, xmlstarlet still generates XSLT code, and it helps to know the actual XSLT language, but simple queries can be done almost intuitively.\n\nSuppose we’d like to get a list of the recent headlines from the Debian Package of the Day website. We can use xmlstarlet to extract titles from the site’s RSS feed, because RSS is an application of XML. In RSS, entry titles are contained in title elements, in turn contained in item elements, which are in channel elements under the root rss element. The feed itself can be easily fetched with wget(1). Our pipeline would then look like this:\n\n$ wget -O - http://debaday.debian.net/feed/ 2>/dev/null | \\ > xmlstarlet sel -t -m /rss/channel/item -v title -n Fonty Python: manage your fonts localepurge: Automagically remove unnecessary locale data vnstat: a console-based network traffic monitor rtpg-www: Please your dearest with rtorrent’s power iftop - display bandwidth usage on an interface by host atop: an ASCII full-screen performance monitor dstat: versatile tool for generating system resource statistics tellico: collection manager for books, videos, music, and a whole lot more atool: handling archives without headaches watch (from procps): execute a program at regular intervals, and show the output\n\nThe wget invocation is hopefully obvious (if it isn’t, just believe me that it downloads the feed and prints it to the standard output), so let’s dissect the xmlstarlet part.\n\nsel, which stands for “select”, is the subcommand to invoke within xmlstalrlet — since it’s a toolkit, it contains a number of such subcommands.\n\nThe -t option designates the beginning of a template — roughly, a group of processing instructions.\n\nThe -m option specifies a match, and /rss/channel/item is an XPath expression; together they translate to “for each item element found under a channel element under the rss element”.\n\nThen we specify what to do for that match: in our case, -v title prints out the value of the title element under the current item, and -n prints a newline separator.\n\nThe various options to xmlstarlet’s sel subcommand can be combined to produce fairly complex XSLT transformations. You can view the XSLT code generated by your command by adding the -C option.\n\nValidating XML Documents\n\nThere are several ways of defining an XML document format, and the simplest of them is called document type definition, or DTD. A DTD defines which elements are allowed to appear in a document and what they can contain. DTDs for some popular formats, such as XHTML, are included in the Debian and Ubuntu archives. The val subcommand of xmlstarlet can validate documents against a DTD — that is, check if the documents comply with the formal requirements laid out in a DTD. In addition to DTD, xmlstarlet can also handle the more advanced XML Schema and RELAX NG languages.\n\nAs an example, let’s integrate xmlstarlet with gedit, the GNOME text editor, to enable easy validation of XHTML 1.0 Strict documents. We will need the w3c-dtd-xhtml package that contains the DTD files.\n\nTo validate against a DTD, xmlstarlet should be invoked with the val subcommand, the -d option (for “DTD”), and a path to the DTD file. As in the previous example, the document can be piped into xmlstarlet. We will integrate it into gedit by means of the latter’s “External Tools” plugin. Enable it by choosing “Edit” → “Preferences” → “Plugins” and marking “External Tools”. Then, in the “Tools” menu, select “External Tools” and click “New”. Name the tool as you wish, and optionally give it a description and a shortcut key. For “Command(s)”, enter this simple script:\n\n#! /bin/sh xmlstarlet val -d /usr/share/xml/xhtml/schema/dtd/1.0/xhtml1-strict.dtd -\n\nChoose “Current document” for input, “Display in the bottom pane” for “Output”, and set “Applicability” to “All documents”. And that’s it. You can now validate any document you open in gedit from the “Tools” menu — even if the document comes from a remote location by way of the GNOME virtual filesystem.\n\nWith some more effort, you can write a script to validate any document for which you have the DTD installed. (Hint: you may use xmlcatalog(1) from the libxml2-utils package to locate DTD files by their public identifiers.)\n\nOther Uses\n\nThis article cannot cover many other features of this toolkit, such as editing XML documents (ed), listing their element structure (el), or pretty-printing (fo). You may want to check out the examples that come with the xmlstarlet package (/usr/share/doc/xmlstarlet/examples), and to the reference help available by invoking xmlstarlet ‹COMMAND› --help.\n\nRelated Tools\n\nThe Debian archive also contains the python-4suite-xml package, which among other things provides some command tools for XML processing similar to xmlstarlet. However, 4suite seems to be intended more as a Python package, and consequently its command tools appear to be less feature-complete than xmlstarlet.\n\nFor solving specific XML-related problems, such as converting XML to and from other formats, you may want to have a look at the more specialized packages available in Debian and Ubuntu. The Debian Reference has an overview of some of those.\n\nfwbuilder: Manage Firewalls Professionally\n\n2009-03-15T05:00:33Z\n\nArticle submitted by Vadim Kurland. Guess what? We still need you to submit good articles about software you like!\n\nFirewall Builder is available from the libfwbuilder and fwbuilder packages in both Debian and Ubuntu in Universe. Packages for the current development builds are available from the project download area on SourceForge.\n\nEveyone knows about netfilter/iptables, a powerful firewall framework and command line tool that is part of every Linux distribution. Unfortunately, managing a security policy with it remains a non-trivial task for several reasons. Partially this is because of the complex syntax of the command line interface and the vast amount of available options and parameters. Another reason is that the administrator has to understand the internal path of the packet inside the Linux kernel and its interaction with different parts of netfilter in order to build rules correctly. This is not a specific problem of iptables though, other popular Open Source firewall platforms, such as OpenBSD PF, ipfilter and ipfw present similar challenges.\n\nWhat is needed is a tool that lets an administrator define the security policy on a higher level of abstraction and hide the internal structure of the target firewall platform. For example, such a tool should decide which iptables chain is right for each generated iptables rule automatically, without the administrator’s input. It should also pick the right iptables targets for both policy and NAT rules as well as properly use most popular iptables modules, all automatically. Such tool should also implement best practices in policy design and help administrator deploy and activate generated policy on the firewall.\n\nFirewall Builder does just that.\n\nIntroduction\n\nFirewall Builder is a GUI firewall configuration and management tool that supports iptables (netfilter), ipfilter, pf, ipfw, Cisco PIX (FWSM, ASA) and Cisco routers extended access lists. It presents all supported firewalls to the administrator in terms of unified abstract firewall that takes the best features from all of them and hides their specifics and inconveniences. Firewall Builder is more complex than many basic firewall configuration GUIs such as Firestarter, but on the other hand one can build very complex policies with Firewall Builder and fully utilize flexibility and power of iptables and other supported firewalls.\n\nThe general idea should be familiar to anyone who has ever worked with commercial firewall management systems. All configuration management operations can be performed from one central place: the Firewall Builder GUI. You create and manage collection of objects that describe network addresses, hosts and firewalls, as well as services, and then build firewall policy and NAT rules using these objects. Policy rules are defined in terms of “Source” and “Destination” addresses and “Service” and can have additional parameters such as interface association, direction, time interval and optional platform-dependent attributes. NAT rules are defined by addresses and services before and after translation.\n\nRules are built with simple drag and drop operations and then firewall configuration can be generated with one click of a mouse. In the end, Firewall Builder produces a script or configuration file in the language of the target firewall. For iptables, it creates shell script that loads iptables rules, while for other platforms it creates a configuration file suitable for them. This makes it simple to deploy and activate the generated policy and also helps integrate Firewall Builder with existing automation scripts.\n\nThe program comes with a collection of over 100 standard objects that can be used to describe popular TCP, UDP and ICMP services.\n\nFirewall Builder implements many best practices in firewall policy design and firewall management procedures. Here are just a few examples:\n\nIt enforces a policy structure that denies all traffic by default and only permits what is necessary.\n\nThe administrator can easily define IP address of the management workstation and Firewall Builder will automatically add a rule to ensure that ssh access from it to the firewall is always permitted. This rule is designed to assure that ssh session over which the installer activates a new policy does not break or hang. This helps to avoid accidents when errors in the policy rules cut off remote access to the firewall in the middle of an activation, making it impossible to fix the error and causing prolonged network outage.\n\nFor Cisco PIX (ASA) and IOS access lists, where each access-list commands are immediately activated as they are entered, Firewall Builder can optionally create temporary access lists to ensure uninterrupted ssh access from the management workstation to the firewall for the duration of the policy reload session. This method provides the best protection against outages caused by loss of contact with the firewall because of errors in policy.\n\nFor iptables, Firewall Builder can generate a script using iptables-restore for atomic activation. If iptables-resore detects an error in the script and refuses to load the policy, script leaves the firewall in the state it was in before. For other firewall platforms it uses appropriate activation methods to achieve the same goal.\n\nThe built-in policy installer supports “test” install mode with automatic roll-back. This is another safety mechanism that helps minimize outages in case of errors in the policy. These measures are available for all supported systems, such as Linux/iptables, *BSD/pf, Cisco PIX and Cisco IOS.\n\nQuick Tour\n\nThe main window of the program includes objects tree on the left (1), brief information about object selected in the tree (2), current firewall policy view (3) and a dialog panel where you can edit objects parameters (4).\n\nAs all Open Source projects, Firewall Builder depends on the user community who provide testing, bug reports and other forms of feedback. You can file bug reports and feature requests using the bug tracking system. The mailing list is a great place to ask for help and discuss the program with other users.\n\nThis was just a brief introduction to the Firewall Builder package. If you are interested in the program, you can find more information on the project web site at http://www.fwbuilder.org. The slideshows Introduction to Firewall Builder 3.0 for the impatient and Getting starter with Firewall Builder can help you get more familiar with the program.\n\nPIDA: the Python Integrated Development Application\n\n2009-03-08T05:00:03Z\n\nArticle submitted by Javier Derderian. Guess what? We still need you to submit good articles about software you like!\n\nPIDA is an IDE (integrated development environment) written in Python and the pygtk graphical toolkit. It is slightly different from other IDEs: rather than attempting to write a set of development tools of its own, PIDA reuses available tools. In this regards PIDA can be used as a framework for putting together your own customized IDE.\n\nAlthough still a young application, PIDA already boasts a huge number of features because of the power of some of the tools it integrates. For example features such as code completion and syntax highlighting are well implemented in PIDA’s integrated editors far better than any editor built for a commercial IDE. PIDA currently features many code editing helpers: syntax highlighting, code completion, automatic indenting, block commenting, etc; project management, version control management, Python debugger and profiler, GTK+ GUI building and rapid application design.\n\nAmong the already integrated components you can find:\n\nVIM and Emacs as embedded editors with full support of each one’s features:\n\nSyntax Higlighting\n\nCode completion\n\nPlugins\n\nBazaar, Git, Subversion (and more) as version control systems.\n\nIt’s actually designed to program in any language, but it has some Python specific features like a Python shell. You can program you own plugins, and there’s a very nice API documentation to help you go trought the plugin development path.\n\nSome already available plugins are:\n\nPastebin\n\nSend code to a pastebin service\n\nPdfTex preview\n\nPdfTex preview compiles and displays pdf documents every time the buffer is saved.\n\nPython\n\nShow class/function from python file, and show compilation errors\n\nPython Debugger\n\nPython Debugger based on RPDB2 the WinPDB Back End\n\nUnit Tester\n\nPerform unit tests\n\nDocbook browser\n\nBrowse local docbook\n\nTodo manager\n\nManage a personnal todo list per project\n\nRFC Viewer\n\nDownload RFC index, search and view RFC pages inside PIDA\n\nBazaar\n\nThis plugin, developed outside of the project, integrates lots of Bazaar function that are not included in the base version control integration\n\nPIDA is a great way of keep using Vim and have a nice GUI around to help you work faster with the file browser, the project manager and the internal shells. You can get more info on using and developing PIDA in the handbook\n\nThere are official packages available in both Debian and Ubuntu for a long time now.\n\nAnd remember: PIDA LOVES YOU!\n\nbash-completion: the greatest things since bash completion\n\n2009-03-01T05:00:22Z\n\nArticle submitted by Andre Masella. Guess what? We still need you to submit good articles about software you like!\n\nPressing the tab key in bash to auto-complete a file name is one of the most time saving tricks especially when dealing with very long file names. Unfortunately, file name completion is not always the right behavior. Take Subversion for example. The first argument to svn is the sub-command to use. The file name is also restricted: svn add only takes files not under revision control and svn rm only takes files that are under revision control.\n\nThis is where the bash-completion package steps in. After installing it with a quick apt-get install bash-completion, a few lines need to be uncommented in sudo vim /etc/bash.bashrc and the shell restarted. After that, try this:\n\n$ svn <TAB><TAB> add cl diff list move propdel rename unlock annotate cleanup export lock mv propedit resolve update blame co -h log pdel propget resolved --version cat commit help ls pedit proplist revert changelist copy --help merge pget propset rm checkout cp import mergeinfo plist pset status ci delete info mkdir praise remove switch\n\nTa-da! Smarter completion for subversion.\n\nbash-completion will alter the behavior of most commands to limit the display to relevant files. For example, mpg321 will only display MP3 files in the list. Programs like rmmod, iwconfig, ifup, and lvm will display relevant choices that are not files at all. Even bash’s fg and bg will now tab-complete with job identifiers.Completion for man is useful as it will auto-complete only man pages that exist and allows you to incrementally narrow your search by providing the beginning of the man page name, just like with regular files.\n\nOccasionally, it doesn’t behave as expected. Particularly, sometimes a file with the wrong extension will be filtered out by bash-completion. For example, if you save an image for certain Internet forums, the file will sometime lack an extension. bash-completion will then filter out that file because it does not have the right extension. This can also happen if the capitalization is unusual. For example, bash-completion will suggest files that end in .mp3 or .MP3 for mpg321, but not .Mp3. In that case, either rename the file or insert # at the beginning of the line. The # makes bash think this line is a comment and bash-completion returns to regular file name completion. Once finished, remove the # and run the command.\n\nbash-completion is available in Debian and Ubuntu. If it isn’t available, it is very easy to install from source.\n\nFonty Python: manage your fonts\n\n2009-02-22T05:00:28Z\n\nArticle submitted by Donn Ingle. We’ve run out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nFonty Python is available from the fontypython package in both Debian and Ubuntu in Universe. Fonty is a wxPython app so will work in any desktop environment. It also has a command-line interface which avoids the gui.\n\nWhat the font?\n\nAs a graphic designer, one is called-upon to create artwork for many things. Fonts change from one client to another, from one job to another. If busy enough, then one can soon amass a vast pile of font files. Some are downloaded from the net as freeware, others are purchased, others are supplied by the clients for their work.\n\nThese font-files are stored somewhere, independently of the system fonts managed by the Debian package manager, possibly sorted in whatever fashion you prefer. It’s crazy to have these fonts all installed at the same time. Besides whatever that may do to your computer’s speed, it has one gigantic drawback: it clutters up font-selection boxes. Have you ever tried to find a font in a list of 500 fonts? Bleh.\n\nWhat you need is a way to herd fonts and that’s what Fonty does.\n\nBring out yer fonts!\n\nFonty will let you gather your fonts and structure them into “collections” —or what I call “Pogs”— a place to keep tyPOGraphy (well, why not?)\n\nThink of Pogs as “groups”, “bags”, “cases”, “boxes” —that kind of thing. It’s an oddball word invented to describe a bunch of font files.\n\nYe olde basic idea\n\nYou visually gather fonts into Pogs. You then install a Pog and all the fonts within it are active on the system. You finish your work and then uninstall the Pog.\n\nYour fonts never move from where they live (so don’t worry). Neither are copies of your fonts made; only links to the original files are used to install the fonts into your home .fonts subdirectory.\n\nFor example, you might have a Pog called logoZoo into which you place all the TTFs you need to design a logo for a Zoo. After that, when you need to work with them, you simply install the logoZoo Pog and start your design app. All those fonts will now appear in Inkscape or The Gimp, and other apps. Do your work as normal, and forget about fonts.\n\nWhen you are done designing, you uninstall logoZoo and all those fonts go away. The links to the original files are removed from your home .fonts\n\ndirectory, effectively uninstalling each font.\n\nFonty is also great for just looking at fonts wherever they are on your computer, without having to install them first. Fonty also has a command-line, allowing very quick use. You can install or remove pogs without having to start the entire gui, which is neat.\n\nQuick tour\n\nThe layout of Fonty is supposed to be as simple as possible. I stayed away from context-menus and drag and drop because I find them hard to use. The flow is left-to-right with the sources of fonts on the left and their targets on the right.\n\nPoint 1: You choose a Source Folder (or Source Pog) on the left.\n\nPoint 2 & 3: You then see the fonts in the middle. You can page or Point or search around (Points 5,7). You click the fonts you want to use.\n\nPoint 4: On the right, you choose a Pog, or make a new one.\n\nPoint 6: Once you have a Target Pog selected, you can place fonts that you ticked into it.\n\nPoint 8: On the bottom-right you then Install or Uninstall Pogs as you need them.\n\nThere is a settings box (ctrl+s) where you can change the sample text and sizes.\n\nCheck the help too — it’s full of tips and quite short.\n\nBad fonts\n\nSome fonts are simply bad to the bone. Fonty relies on freetype and PIL to open and draw the glyphs, and when this fails so does Fonty. I have put a lot of effort into catching this, but it does not always work. When a font crashes Fonty, you should get a popup box telling you which one did the deed. You really ought to remove that font! Some fonts cannot be displayed, and Fonty will show that by using coloured bars in the display area.\n\nThere is also a menu item (File > Check Fonts) that you can point at a given directory and scan it for fonts that will crash Fonty. Use this when you want to cull all the fonts that are bad.\n\nFont Flavours\n\nOriginally, Fonty could only show TTF files. Since then I have expanded it to include OTF, Type1 and TTC files. As far as I can tell, being only seminiscient, this all works.\n\ni18n\n\nFonty speaks your language; or it will if you translate it. There are a few translations available and you can join the project to contribute others.\n\nFonty needs help\n\nWith Python heading for version 3 and all kinds of other changes, Fonty is falling behind. She still works quite well, but I cannot spend the time I want to on her. If there’s anyone out there who wants to stick a fork in her and run —please do.\n\nI hope to find some time this year to have another go; fix some bugs and include a few translations I have been sent, but I can’t be relied upon.\n\nYou can check out the author’s home page for Fonty and the project home page.\n\nlocalepurge: Automagically remove unnecessary locale data\n\n2009-02-15T05:00:48Z\n\nArticle submitted by Geoffroy Youri Berret. We’ve run out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nlocalepurge allows you to remove unnecessary locale data you have on your system and prevents installing unneeded locales when installing new packages.\n\nDuring the initial installation of localepurge you’ll be asked which languages you want in your system. The installation process will ask you if you want to purge also manpages for unwanted locales. Once installed, localepurge will be launched each time you install a new package on your system and will inform you of the amount of space you saved.\n\nOn a regular desktop installation you may save up to one hundred or more MiB. Even though space is no longer that expensive, this kind of tool might still be useful on netbooks, laptops and, in general, mobile technology with limited disk space.\n\nnota bene: You have to be aware that localepurge is considered a hack of the package system, this is not a feature (localepurge(8)). localepurge is independent and not a part of dpkg/apt. Consider using it at your own risk. This warning sounds worrying but my personal experience of localepurge for the past 5 years tells me there is no reason to be afraid of —I never identified a problem on my system I could blame on localepurge. It’s nonetheless important to keep that in mind.\n\nLet’s see of efficient it is with a mplayer installation on Debian Lenny for instance:\n\n$ aptitude install mplayer\n\n[…]\n\nPreconfiguring packages …\n\nSelecting previously deselected package libopenal1.\n\n(Reading database … 95241 files and directories currently installed.)\n\nUnpacking libopenal1 (from …/libopenal1_1%3a1.4.272-2_i386.deb) …\n\nSelecting previously deselected package mplayer-skin-blue.\n\nUnpacking mplayer-skin-blue (from …/mplayer-skin-blue_1.6-2_all.deb) …\n\nSelecting previously deselected package mplayer.\n\nUnpacking mplayer (from …/mplayer_1.0~rc2-17+lenny3_i386.deb) …\n\nProcessing triggers for man-db …\n\nProcessing triggers for menu …\n\nSetting up libopenal1 (1:1.4.272-2) …\n\nSetting up mplayer-skin-blue (1.6-2) …\n\nSetting up mplayer (1.0~rc2-17+lenny3) …\n\nConfiguring mplayer …done\n\nProcessing triggers for menu …\n\nlocalepurge: Disk space freed in /usr/share/man: 780K\n\n[…]\n\n$\n\nlocalepurge is available in Debian since quite a long time, you’ll find it in old stable Sarge, Etch and Lenny. It’s also been available in Ubuntu (universe) for ages.\n\nvnstat: a console-based network traffic monitor\n\n2009-02-08T05:00:06Z\n\nArticle submitted by András Horváth. Guess what? We still need you to submit good articles about software you like!\n\nThere are many command-line utilities in the Unix / Linux world that collect network traffic statistics for a chosen interface.\n\nvnstat is different because statistics are collected permanently. It keeps the data in files so traffic monitoring is resumed at reboot. vnstat can be useful in situations when you need to know the exact amount of traffic that goes through the interface for a period longer than the computer is on. For example when you have a mobile 3G internet connection or an xDSL connection that has traffic limit per month, then you can easily check how much traffic you generated.\n\nvnstat can be run without root privileges because it collects data from the kernel’s proc filesystem. It doesn’t have a daemon service, it is simply run by cron periodically. In Debian, the installation creates a cron job where a vnstat -u command is run every 5 minutes:\n\n# /etc/cron.d/vnstat: crontab entries for the vnstat package 0-55/5 * * * * root if [ -x /usr/bin/vnstat ] && [ `ls /var/lib/vnstat/ | wc -l` -ge 1 ]; then /usr/bin/vnstat -u; fi\n\nInitially, you have to create the database with this command:\n\nvnstat -u -i wlan1\n\nAfter creating the database, the statistics can be viewed by running vnstat without any further parameters. Thanks to the cron job, the statistic is updated every 5 minutes. It even remembers the interface name to list:\n\n$ vnstat Database updated: Tue Jan 27 15:40:01 2009 wlan1 received: 2.18 GB (81.3%) transmitted: 512.85 MB (18.7%) total: 2.68 GB rx | tx | total -----------------------+------------+----------- yesterday 95.14 MB | 12.19 MB | 107.32 MB today 11.33 MB | 4.47 MB | 15.80 MB -----------------------+------------+----------- estimated 16 MB | 6 MB | 22 MB\n\nSome command line options allow you to view statistics for specific periods of time. For example:\n\n--days\n\n$ vnstat --days wlan1 / daily day rx | tx | total ------------------------+-------------+---------------------------------------- 18.01. 231 kB | 115 kB | 346 kB 19.01. 611.72 MB | 58.16 MB | 669.88 MB %%%%%%%%%%%%%%%%%:: 20.01. 400.53 MB | 200.70 MB | 601.23 MB %%%%%%%%%%%%%%::::: 21.01. 5.87 MB | 1.56 MB | 7.43 MB 22.01. 417.97 MB | 108.94 MB | 526.91 MB %%%%%%%%%%%%%%:::: 23.01. 365.24 MB | 41.78 MB | 407.02 MB %%%%%%%%%%%%:: 24.01. 150.00 MB | 13.42 MB | 163.43 MB %%%%%% 25.01. 170.17 MB | 71.52 MB | 241.70 MB %%%%%%::: 26.01. 95.14 MB | 12.19 MB | 107.32 MB %%%% 27.01. 11.36 MB | 4.51 MB | 15.87 MB ------------------------+-------------+---------------------------------------- estimated 16 MB | 6 MB | 22 MB\n\n--weeks\n\n$ vnstat --weeks wlan1 / weekly rx | tx | total ----------------------------+---------------+-------------- last 7 days 1.19 GB | 253.93 MB | 1.44 GB last week 2.07 GB | 496.08 MB | 2.56 GB current week 106.52 MB | 16.71 MB | 123.23 MB ----------------------------+---------------+-------------- estimated 456 MB | 68 MB | 524 MB\n\n--months\n\n$ vnstat --months wlan1 / monthly month rx | tx | total -------------------------+--------------+-------------------------------------- Jan '09 2.18 GB | 512.90 MB | 2.68 GB %%%%%%%%%%%%%::: -------------------------+--------------+-------------------------------------- estimated 2.53 GB | 596 MB | 3.12 GB\n\n--top10\n\n$ vnstat --top10 wlan1 / top 10 # day rx | tx | total -------------------------------+-------------+--------------------------------- 1 19.01.09 611.72 MB | 58.16 MB | 669.88 MB %%%%%%%%%%%%%%%%:: 2 20.01.09 400.53 MB | 200.70 MB | 601.23 MB %%%%%%%%%%%::::: 3 22.01.09 417.97 MB | 108.94 MB | 526.91 MB %%%%%%%%%%%::: 4 23.01.09 365.24 MB | 41.78 MB | 407.02 MB %%%%%%%%%: 5 25.01.09 170.17 MB | 71.52 MB | 241.70 MB %%%%:: 6 24.01.09 150.00 MB | 13.42 MB | 163.43 MB %%%% 7 26.01.09 95.14 MB | 12.19 MB | 107.32 MB %% 8 21.01.09 5.87 MB | 1.56 MB | 7.43 MB 9 18.01.09 231 kB | 115 kB | 346 kB -------------------------------+-------------+---------------------------------\n\n--live gives real-time statistics about the packets currently going through the interface:\n\n$ vnstat --live -i wlan1 Monitoring wlan1... (press CTRL-C to stop) rx: 113.40 kB/s 99 p/s tx: 28.42 kB/s 96 p/s\n\nPros and cons\n\nPros:\n\nPermanent network traffic statistic that is not forgotten.\n\nVery lightweight solution, no daemon service is running in the background (automatically run from cron periodically).\n\nEasy to install and use. In vnstat, everything can be done from the command line and it clearly shows how many megabytes have you send/receive in a given day or month.\n\nCons:\n\nInternet or remote traffic cannot be separated from local network traffic if it all goes through the interface being monitored.\n\nIt works for a single host, but it doesn’t scale very well. If you need to monitor a lot of hosts and need detailed graphs, there are better alternatives, such as munin or ganglia.\n\nAvailability\n\nThere are official packages available in both Debian and Ubuntu (Universe) for a long time now.\n\nrtpg-www: Please your dearest with rtorrent’s power\n\n2009-02-01T05:00:47Z\n\nArticle submitted by Dmitry E. Oboukhov. Guess what? We still need you to submit good articles about software you like!\n\nMany people use a wonderful bittorrent client: rtorrent. It is an extremely easy and convenient program for servers. However, its Command-Line Interface may scare some.\n\nIf you’re already using apache then you may use an external GUI for rtorrent. rtpg-www (RTorrent Perl GUI) is a package package that quite recently appeared in Debian (Sid) and Ubuntu (Jaunty). It will please your nearest and dearest with a nice web interface, as they will be able to run rtorrent without having to touch the dreaded terminal :)\n\nThe package comes with an already configured virtual server. In its simplest variant all you need to do is:\n\nAnswer “yes” on debconf’s question about adding a line to /etc/hosts (only if dpkg asks you medium priority questions)\n\nSwitch on the scgi module with a2enmod scgi\n\nEnable the virtual server in apache: a2ensite rtpg.apache.conf\n\nReload apache to activate the new configuration: invoke-rc.d apache2 reload\n\nAdd “scgi_port = localhost:5000″ to your ~/.rtorrent.rc\n\nNow, you can go to http://rtpg/ and start using it! With it you can:\n\nadd/delete/view the list of torrents.\n\nControl torrents’ download priorities, start, and stop them.\n\nControl torrents’ file-by-file download priorities.\n\nView the statistics: rating, number of peers, download/upload rate, etc.\n\nControl the overall download/upload rates (for all torrents).\n\nrtpg supports skins which are easy to add by yourself. For those of you who doesn’t want to get out of the habit of using console there is a cool “Console” skin ;)\n\nSo install and enjoy! Good luck!\n\niftop - display bandwidth usage on an interface by host\n\n2009-01-25T05:00:24Z\n\nArticle submitted by András Horváth. We’re running out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nSometimes it’s hard to guess what is eating up our bandwidth the most - on a home computer with an xDSL connection, for example. We can run a lot of programs simultaneously while they can eat as much bandwidth as they want independently of their CPU usage.\n\nWithout by-host statistics, it would be hard to guess what is slowing down our internet connection the most. iftop helps us to find out with a simple curses based interface and real-time statistics output calculated on a by-host basis. When starting it from a terminal, it starts collecting data and printing them on the screen in lines separated by host name pairs or IP addresses, showing the highest network usage. It refreshes the screen every 2 seconds.\n\niftop works by reading the host names out of the network packets traversing the interface and then associating them together.\n\nAfter identifying the host name, we can easily guess which program is generating this particular traffic — that’s why iftop must be run with root privileges.\n\nThough ifstat can be used with complex filtering rules, running it without parameters gives enough statistics in most cases. iftop tries to listen on eth0 by default which might not exist at all. To specify an interface on which to listen, use the -i parameter: iftop -i wlan1, iftop -i eth1.\n\nPressing the h key while running will display a nice on-screen help, showing the commands that can be triggered interactively in running mode. Some other examples of key commands changing the default state:\n\nn turns off name resolving.\n\np turns on port number display.\n\nPros and Cons\n\nPros\n\nPer-host statistics of network usage.\n\nGraphical representation of statistics with character bars.\n\nCons\n\nHost names are not bound to process names in the statistic, so you have to figure out by yourself which processes they belong to.\n\nOfficial packages have been available in both Debian (since Etch) and Ubuntu (universe) for a long time now.\n\natop: an ASCII full-screen performance monitor\n\n2009-01-18T05:00:44Z\n\nArticle submitted by András Horváth. We’re running out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nEvery system administrator must be familiar with the top(1) command that shows the most active running processes in a Linux environment.\n\natop is different than that: it shows the most active processes not only related to CPU or memory, but disk and network usage are also calculated into the resource usage statistics. It also calculates incremental statistics, like VGROW (virtual size grow) and RGROW (resident set size grow). For example, if a process is leaking memory, its RGROW will always show positive values.\n\nIt can happen that a process starts using the hard disk of the computer making a heavy I/O traffic that takes less CPU resource though, still making the computer response slowly. With the atop utility we can discover this process easily.\n\nFor example, if we start the ls -R / command and then run atop, plus we type Shift+A after to get statistics about the processes that use the most system resources, we will see the ls command in the first place with a ‘D’ flag next to it —showing that its mostly used resource is related to Disk and not CPU. You can see this in the screenshot. atop highlights in red the resources if their usage is in critical limits. In the same example, both CPU and disk are being heavily used.\n\nIt is recommended to run atop with root privileges in order to see information from all processes. Moreover, when running with root privileges, atop can report about recently finished processes and their exit status.\n\natop refreshes the information every 10 seconds giving precise statistics. If you want it sooner, just press t to trigger a manual refresh. Pressing h key will give a detail-full on-screen help.\n\natop installs a daemon service by default and starts himself at boot time. The daemon stores system activity data in /var/log/atop.log. Using the -r command-line option, you can analyze the system activity recorded. Using keys t and T you move forward and backwards in time respectively. You can generate more system activity reports with the atopsar utility, included in the atop package. You don’t need this daemon if all you want is a real-time monitor.\n\natop can also report about network and disk utilization per process, but you need a patched kernel. Debian packages kernel-patch-atopacct and kernel-patch-atopcnt provide them. Sadly, they are not very well maintained. They were removed from Debian Etch and, in Lenny, the patches included only cover until version 2.6.24 of the Linux kernel (the same happens in Ubuntu). More up to date patches can be found in atop’s webpage. A guide on how to patch and rebuild the kernel is beyond the scope of this article.\n\nPros\n\nper-process statistics related to CPU, memory, disk and network.\n\nAbility to analyze past system behaviour.\n\nCons\n\nPer process disk and network statistics requires patching the kernel.\n\natop installs a daemon service by default. Some people think that the atop daemon should be optional.\n\nYou can find atop both in Debian (since Etch) and Ubuntu (since Dapper).\n\ndstat: versatile tool for generating system resource statistics\n\n2009-01-11T05:00:54Z\n\nArticle submitted by András Horváth. We’re running out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nDuring my work with computers, I like to check the usage of system resources in my network. Sometimes a running process takes up too much CPU load, or the disk I/O goes too high. To get a clean picture of how much resources are being used by a client, I used ifstat, top(1) and iostat(1).\n\nSince I have found out about dstat, I can cleanly check out all the system resources used by my computers. dstat prints all the different type of resources in separate columns on a single line, so it is very easy to see the system load globally.\n\nQuoting from the website:\n\nDstat is a versatile replacement for vmstat, iostat, netstat, nfsstat and ifstat. Dstat overcomes some of their limitations and adds some extra features, more counters and flexibility. Dstat is handy for monitoring systems during performance tuning tests, benchmarks or troubleshooting.\n\nDstat allows you to view all of your system resources instantly, you can eg. compare disk usage in combination with interrupts from your IDE controller, or compare the network bandwidth numbers directly with the disk throughput (in the same interval).\n\nHere is a sample output that I made on my computer:\n\nThough dstat gives global statistics about the currently used system resources, it might replace several tools in one. Mostly you would run it without any parameters, that makes it very easy to remember too :)\n\nPros (compared to other programs):\n\nAll kinds of resource statistics in one single line.\n\nNo parameters needed in most cases.\n\nCSV files can be generated easily to create charts in OpenOffice or Gnumeric.\n\nCons:\n\nNo per-process statistics\n\nThere are official packages available in both Debian and Ubuntu since very long time.\n\ntellico: collection manager for books, videos, music, and a whole lot more\n\n2009-01-04T05:00:12Z\n\nArticle submitted by Dean Serenevy. We are running out of articles! Please submit good articles about software you like!\n\nYou’ve heard of book and movie collection organizers, but Robby Stephenson’s tellico is a general purpose collection manager. This application can be used to store information about arbitrary collections of whatever tickles your fancy. Tellico is available from the tellico package in Debian since Sarge and in Ubuntu since Dapper. Tellico is a KDE application, but works fine in other desktop environments.\n\nThe Basics\n\nLike any good book or movie collection application, tellico presents the user with a multi-pane window that groups entries by some customizable criterion (I’ve grouped by director below), lists entries by some fields (customizable), and shows thumbnails.\n\nSelecting a list entry shows a more detailed view and a larger thumbnail. Clicking the image in this view launches your image editor.\n\nMost of the built-in collection types include search sources to make adding new entries easy. Tellico has default search sources for Amazon.com (US, Japan, Germany, United Kingdom, France, and Canada), IMDb (movie database), z39.50 servers (bibliographic database), SRU servers (bibliographic database), PubMed (Medicine bibliography), CrossRef.org (bibliographic database developed by a consortium of publishers), and some others. You can also write your own script that performs the search and returns entries in a supported format.\n\nThe search box will filter results based on regular expression queries. Complex filters can be named and will be saved with the collection file.\n\nBeyond Books and Movies\n\nTellico’s built-in list of collection templates is already quite impressive. It provides default templates for books, bibliographies, videos, music, video games, coins, stamps, trading cards, comic books, and wines. However, users are free to modify, add, or remove fields in these collections or even create custom collections with arbitrary fields.\n\nFor example, I keep a collection of hyperplane arrangement examples in a custom tellico file. Tellico happily keeps a fully group-able and search-able record of my coefficient fields, polynomials, and other fields.\n\nEditing a custom entry looks just like editing a standard record type. Fields are grouped by customizable categories.\n\nModifying the collection fields is wonderfully simple. Your fields may be any of several field types including: text, paragraph, choice, checkbox, table, URL, date, and image. Field upgrading is supported between compatible field types.\n\nFields may be auto-formatted as names or titles if you wish. You can also control whether the field should support auto-completion (using existing entries in your collection), multiple values, or whether the field should appear in the grouping combo box.\n\nThe paragraph field type supports basic HTML markup (used here in my bibliography collection). The red letters are KDE’s spell-check attempting to be useful.\n\nI use the table field type in my recipe collection.\n\nBeyond the Application\n\nTellico can import and export data to and from many sources (Bibtex, CSV, PDF metadata, Alexandria, …). It can export your collections (even custom collections) to HTML and generate HTML reports in several styles. Tellico even has limited support for sending citations to OpenOffice.org Writer (though I have never used this feature).\n\nMoreover, since Tellico stores its data in a fully documented XML file you can write XSLT or use any XML parser to transform the data file however you like.\n\nTellico supports loan tracking for any collection type. It also translated into more than ten languages.\n\nThe not so good\n\nTellico is somewhat laggy when loading hundreds or thousands of images from disk and occasionally when switching from thumbnail view to entry view. However, switching between entries is always fine and collections with fewer images are quick and responsive.\n\nAlternatives\n\nThere are many special-purpose collection managers (most of which are listed on the tellico homepage), but tellico is one of the earlier general purpose managers. Some applications (such as GCstar) are becoming more general-purpose as they mature. Others (such as Stuffkeeper) are simply younger applications and are not yet stable. Tellico is a well-designed application and therefore can give even the special-purpose collection managers a run for their money.\n\natool: handling archives without headaches\n\n2008-12-28T05:00:48Z\n\nArticle submitted by Paulus Esterhazy. Last article of 2008! We hope 2009 will be full of good articles about Debian and Ubuntu packages. But we can’t do it without your help, please submit good articles about software you like!\n\nHave you ever wrestled with tar(1) and other Unix archive tools? Wondered why every tool has its own arcane syntax and nonstandard behavior? And why on earth is it impossible to use unzip(1) to unpack multiple archive files?\n\nThe good news is that, in the Unix universe, you can be sure that someone else has asked himself the same question before and, perhaps, solved it. And so it is. The atool package supplies a set of commands that hide the complexities and lets you work with compressed file archives in a sensible manner.\n\nArguably the most useful commands included are apack, aunpack and als which as their names suggest create an archive, and extract or list its contents. In addition, acat uncompresses an archive file and outputs the file contents to standard output, whereas adiff compares two archives and shows the differences between their contents. These commands work as you would expect them to, and the author has stuck to the Unix conventions where possible.\n\nThe details, however, are worth a look. Some examples:\n\naunpack archive.tgz Unpacks all the files in the archive. If the author of the archive was so inconsiderate as to put multiple files in the archive’s root, the command automatically creates a directory and moves the files inside.\n\naunpack -e archive1.tgz archive2.zip Unpacks each archive.\n\napack archive.tar.bz2 *.txt Creates a new compressed archive containing all text files in the current working directory.\n\nals archive.rar Shows the names of the files contained in the archive.\n\nNote that for each atool command the archive file name precedes the names of the files to add or extract on the command line. Compare aunpack -e archive1.tgz archive2.tgz and aunpack archive1.tgz file.txt.\n\nAs you can see, atool commands automatically determine the file type by looking at the extension, but they resort to using file(1) if the simpler heuristic fails (you can override the guess using the -F switch). Most commonly used archive types are supported, including tar+gzip, tar+bzip2, zip and rar; a notable omission in the version available in Debian Sarge and Ubuntu 8.04 is the relatively new LZMA compression format (lzma(1)), but the active upstream author has already added support for it. You can also extract a .deb package by forcing the ar archiving method using the switch -F a.\n\nAtool is blessed with the virtue of simplicity and its options are explained in the helpful manpage, which thankfully doesn’t follow the Unix convention of leaving out examples. Here’s one last gem from the documentation. If you frequently work with archives you get from the internet, you probably follow this procedure: Check archive type, check that the archive contains a top-level directory, unpack the archive, change to the directory extracted. These steps can be combined by adding the following function definition to your $HOME/.bashrc or $HOME/.zshrc:\n\naunpack () { TMP=$(mktemp /tmp/aunpack.XXXXXXXXXX) atool -x --save-outdir=$TMP \"$@\" DIR=\"$(cat $TMP)\" [ \"$DIR\" != \"\" -a -d \"$DIR\" ] && cd \"$DIR\" rm $TMP }\n\nAfter adding these lines, you can “reload” the configuration file in your shell using source ~/.bashrc or source ~/.zshrc. Now running aunpack automatically changes the current directory to the one just extracted. Note that adding this snippet is necessary to achieve the desired behavior becausing a directory change is effectively useless unless it is performed in the context of the running shell.\n\nAtool was written in perl by Oskar Liljeblad. It is available in all current Debian and Ubuntu releases. Besides atool, there are a few other tools that aspire to be the Swiss army knife of archivers, for example deco. These programs, however, are not as full-featured and mature as atool.\n\nwatch (from procps): execute a program at regular intervals, and show the output\n\n2008-12-21T05:00:32Z\n\nArticle submitted by Kris Marsh. If you celebrate Christmas, you can give to Debian Package of the Day a nice present: a good article! :-)\n\nEver wanted to monitor a directory every second and see differences in filesizes per second? Or for that matter, run any program once a second and highlight differences in time? Well you can, and you have been able to since forever as it’s installed by default on the majority of Linux distributions. watch is part of the procps package, available in Debian and Ubuntu.\n\nHere is an example for checking a directory:\n\nwatch ls -l\n\nTo highlight changes in each program run, you can use the -d flag:\n\nwatch -d ls -l\n\nAnd to run the command every N seconds, use -nN (by default, watch runs every 2 seconds):\n\nwatch -n1 -d ls -l\n\nFinally, to make the diff highlighting “sticky” (i.e. stay on permanently after a change is detected), use: -d=cumulative\n\nOther examples:\n\nWatch your log directory for changes\n\nwatch -d=cumulative -n1 ls -lt /var/log\n\nWatch for new email\n\nwatch -n60 from\n\nMonitor free memory\n\nwatch -n10 free -m\n\nMonitor established connections\n\nwatch -n1 -d 'netstat -an | grep ESTABLISHED'\n\n… you get the point. If you’re a system administrator, or just maintain Linux machines in general you’ll probably spot a bunch of places where you can use this straight away.\n\nferm: a straightforward firewall configuration tool\n\n2008-12-14T13:00:57Z\n\nArticle submitted by David A. Thompson. We’re running out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nGrumble… a postgresql server on an old Sun workstation isn’t visible to another old Sun workstation which (in theory…) is storing data on the postgresql server. The culprit was a misconfigured firewall. Rather than wading through a bunch of iptables commands, it seemed time to revisit the world of iptables front-ends on the off-chance there was an undiscovered treasure I’d missed on earlier visits. It turns out that there was one: ferm.\n\nA revisit to firestarter, a straightforward GUI interface, ended when firestarter segfaulted and then, when started again, automatically started its firewall. Fortunately, I had altered the firestarter rule set and opened port 22 before firestarter segfaulted. Otherwise I would have been hundreds of miles away from an inaccessible server. After firestarter crashed again with a memory error, I decided to move on…\n\nLike several other firewall front-ends, ferm is aware of the issues associated with working on servers hundreds of miles away from one’s physical location. Ferm starts with a default configuration which leaves the default SSH port open. Even better, ferm has a ‘try-before-you-buy’ feature (shared with a few other packages such as firehol): ferm --interactive activates a specific ruleset and, if a user response isn’t given within 30 sec, the system reverts to the previous ruleset.\n\nRather than using a GUI interface (e.g., firestarter, gnome lokkit, guarddog, kmyfirewall, knetfilter, …), ferm is configured via a text configuration file and can be controlled in a straightforward manner from the console. This may be a desirable feature for running on a box with limited disk space as GUI interfaces generally require the presence of X windows-related packages, often along with several KDE- or Gnome-related packages.\n\nMy main concern wasn’t with whether the application had a GUI or console interface but was with whether the application facilitated straightforward configuration of an iptables ruleset (translation: it shouldn’t take 20 min of reading documentation to get a simple firewall up). Other front-ends (e.g., shorewall and firewall builder) appear to be designed for complex rule-sets and require a substantial investment of effort to learn the syntax of configuration files or a ‘rule-making language’.\n\nAlong with ferm, another front-end, firehol seemed to also hit the mark with respect to having a straightforward syntax. Unfortunately, I found that firehol ended up being a time-consumer. In my experience, preparing a firehol configuration file which didn’t trigger multiple errors from firehol/iptables did not prove to be straightforward. In contrast, ferm gave me no such problems. A few tweaks of the default system configuration file —primarily opening a few ports—:\n\nproto tcp dport ssh ACCEPT; proto tcp dport http ACCEPT; proto tcp dport https ACCEPT; proto tcp dport postgres ACCEPT;\n\nA simple /etc/init.d/ferm restart and things were running smoothly. Minimal effort, satisfying results…\n\nThe bottom line is that, for simple rulesets, using ferm is definitely easier than preparing iptables rules by hand. However, ferm can also be used to put together more complex firewall rulesets. It uses a reasonably powerful configuration language (including support for variables, function definitions, and arrays) which facilitates addressing more complex situations than the one I faced. To top it off, ferm seems to be under active development with bugs being squashed and features being added relatively regularly.\n\nferm has been available in Debian since Etch and in Ubuntu since Dapper.\n\nUpdate, editor’s note: I’d like to add to this article my personal experience with ferm. Being a SysAdmin, I’ve been using netfilter/iptables for many years, after migrating away from ipchains; and the day I’ve found ferm my work changed completely. To me, being able to write your rules in clean structures, with blocks, variables and ‘functions’ is, by far, the most important feature of ferm. Thanks to this, I was able to write very complicated rule-sets, which were still readable to the point that the more junior SysAdmins, with little exprience on netfilter, have no difficult modifying it to open up ports or creating a new NAT rule.\n\nHaving said that, a warning to the newcomers to netfilter: there’s no tool that will magically allow you to write non-trivial rule-sets if you don’t understand the underlying stuff. You will be able to manage your home server, but if you want to do more serious work, you’ll need to really understand how TCP/IP works, and after that, read a lot about the details of routing and packet filtering in Linux. Having seen many people get frustrated by this, is better for you to know that this beast is quite tricky.\n\ngcompris: educational suite for children\n\n2008-12-07T05:00:46Z\n\nArticle submitted by Raman Pandarinathan. We’re running out of articles! If you like Debian Package of the Day please submit good articles about software you like!\n\nAs a parent, have you ever wondered if kids can use FOSS to have fun and learn at the same time? As a teacher, have you ever wondered how to teach using a computer and FOSS tools? The answer is gcompris.\n\nGcompris combines fun and learning. Each activity is designed and developed with creativity in mind, and it has a nice interface for children.\n\nMy children have learned some computer basics like mouse usage, it has also helped them to understand basic arithmetic, colour identification and many other things. Tuxpaint is also included, so children can draw to their imagination.\n\nGcompris is a collection of over 90 educational activities for children. The activities are classified into mathematics, computer discovery, puzzles, strategy games, amusement activities, experimental activities and reading activities.\n\nMathematics\n\nThis has more than 20 activities classified into calculations, geometry and numeration. The activities are planned to teach basic arithmetic, geometry, money usage, etc.\n\nFor example, below you can see a screen shot of an activity that consist in finding series of numerical operations. Here the final answer is 15 and should be derived in two steps. The child has to select the numbers and operators from the top and form equations to get the final answer.\n\nPuzzles\n\nThe puzzle activities include: drag and drop pieces to rebuild paintings, build a given shape with seven pieces, drive the crane and copy the model, tower of Hanoi, sudoku and the fifteen game.\n\nBelow is a screen shot of the Crane activity. The objects in the left grid should be placed in the same position as in the right side grid. The crane can be operated by clicking on the four arrows at the bottom.\n\nComputer discovery\n\nThese activities help children learn basic skills of computers. Bellow is a screen shot of the keyboard activity in which the child has to push the ball to Tux. In order to do it, both shift keys should be pressed simultaneously, as if pushing the ball with the hands. If they are pressed simultaneously the ball will travel in a straight line and reach Tux, if not the ball will drift and fall into the sea.\n\nStrategy Games\n\nSome of them are chess, arranging four coins in a row, bar game (don’t use the last ball), and oware (shown below).\n\nAmusement Activities\n\nThe amusement activities include Tuxpaint, a simple football game, and an animation creator.\n\nBelow is a screen shot of the animation creator. If you want to create an animation, you first select an image and put it somewhere. Then take a snapshot using the camera icon. Now move it to the next position and take another snapshot. Repeat until you reach the desired position. Finally click on the film icon and you’ll see the animation.\n\nExperimental activities\n\nThis section lets the children learn various things which require thinking in a series of steps. Things like the water cycle and operating canal lock lets the child learn systemic thinking.\n\nBelow is a screen shot of the activity about the water cycle. First the sun raises, water evaporates and clouds are formed. When you click on the cloud it starts raining and the rain fills the water tank. Operating the water inlet gives Tux a shower.\n\nDiscovery\n\nThis section is about learning several common things like colour names, clock reading, symmetry, etc. The activity shown in the screen shot is about identifying colours: you must identify the colour from the name displayed.\n\nReading Activities\n\nThese are activities about learning the letters, words and matching them with images. Reading can be practised both horizontal and vertical.\n\nBelow is a screen shot where the child has to drag and drop the image onto the correct name.\n\nAs part of my Linux Users Group activity, I give talks and demos about FOSS frequently. Whenever I see kids and parents among the audience, the first thing I do is to demonstrate gcompris, and it’s a sure hit. The kids love it and parents realize its educational value.\n\nHere are some photos of one such event held in a public park at Chennai, India.\n\nPros and cons\n\nPros\n\nVery well designed activities.\n\nParental touch.\n\nLot of activities.\n\nTranslated to more than 40 languages.\n\nCons\n\nIt requires more local language and sound support, especially for several Indian languages. At present for Indian Languages the sounds and reading practices are not well developed. Though gcompris is well structured to support translations, it lacks volunteers.\n\nThere is another similar package named childsplay - also available in Debian.\n\nAvailability\n\ngcompris was a part of Debian even in the Sarge days and it’s been in Ubuntu since Dapper (if not before!).\n\napticron: cron-script to mail impending apt updates\n\n2008-11-30T05:00:46Z\n\nArticle submitted by Justin Hamade. Guess what? We still need"
    }
}