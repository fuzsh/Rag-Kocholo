{
    "id": "wrong_mix_domainrange_foundationPlace_00054_3",
    "rank": 32,
    "data": {
        "url": "http://docs.oasis-open.org/ws-brsp/BasicSecurityProfile/v1.1/BasicSecurityProfile-v1.1.html",
        "read_more_link": "",
        "language": "en",
        "title": "Basic Security Profile Version 1.1",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://docs.oasis-open.org/ws-brsp/BasicSecurityProfile/v1.1/BasicSecurityProfile-v1.1-cs01_files/image001.jpg",
            "http://docs.oasis-open.org/ws-brsp/BasicSecurityProfile/v1.1/BasicSecurityProfile-v1.1-cs01_files/image002.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This document defines the WS-I Basic Security Profile 1.1 (hereafter, \"Profile\"), consisting of a set of non-proprietary Web services specifications, along with clarifications to and amplifications of those specifications which promote interoperability.\n\nSection 1, \"Introduction,\" introduces the Basic Security Profile 1.1 and relates the philosophy that it takes with regard to interoperability.\n\nSection 2, \" Conformance,\" explains what it means to be conformant to the Basic Security Profile 1.1.\n\nSection 3, \"Document Conventions,\" describes notational conventions utilized by the Basic Security Profile 1.1.\n\nEach subsequent section addresses a component of the Basic Security Profile 1.1, and consists of two parts: an overview detailing the component specifications and their extensibility points, followed by subsections that address individual parts of the component specifications. Note that there is no relationship between the section numbers in this document and those in the referenced specifications.\n\n1.1 Guiding Principles\n\nThe Profile was developed according to a set of principles that, together, form the philosophy of the Basic Security Profile 1.1, as it relates to bringing about interoperability. This section documents these guidelines.\n\nNo guarantee of interoperability\n\nAlthough it is impossible to completely guarantee the interoperability of a particular service, the Basic Security Profile 1.1 attempts to increase interoperability by addressing the most common problems that implementation experience has revealed to date.\n\nFocus profiling effort\n\nThe focus of the Basic Security Profile 1.1 is the specifications that are explicitly defined as in-scope for the Basic Security Profile 1.1. Other specifications are profiled to the minimal extent necessary to allow meaningful profiling of the scoped specifications. This allows an in-depth profile of the scoped specifications with reduced constraining of other specifications.\n\nApplication semantics\n\nAlthough communication of application semantics can be facilitated by the technologies that comprise the Basic Security Profile 1.1, assuring the common understanding of those semantics is not addressed by it.\n\nTestability\n\nWhen possible, the Basic Security Profile 1.1 makes statements that are testable. However, such testability is not required. Preferably, testing is achieved in a non-intrusive manner (e.g., examining artifacts \"on the wire\"). Note: Due to the nature of cryptographic security, non-intrusive testing may not be possible.\n\nStrength of requirements\n\nThe Profile makes strong requirements (e.g., MUST, MUST NOT) wherever feasible; if there are legitimate cases where such a requirement cannot be met, conditional requirements (e.g., MAY, SHOULD, SHOULD NOT) are used. Optional and conditional requirements introduce ambiguity and mismatches between implementations.\n\nRestriction vs. relaxation\n\nWhen amplifying the requirements of referenced specifications (including the Basic Profile 1.0), the Basic Security Profile 1.1 may restrict them, but does not relax them (e.g., cannot change a MUST to a MAY).\n\nMultiple mechanisms\n\nIf a referenced specification allows multiple mechanisms to be used interchangeably to achieve the same goal, the Basic Security Profile 1.1 selects those that are well-understood, widely implemented and useful. Extraneous or underspecified mechanisms and extensions introduce complexity and therefore reduce interoperability.\n\nFuture compatibility\n\nWhen possible, the Basic Security Profile 1.1 aligns its requirements with in-progress revisions to the specifications it references. This aids implementers by enabling a graceful transition, and assures that WS-I does not 'fork' from these efforts. When the Basic Security Profile 1.1 cannot address an issue in a specification it references, this information is communicated to the appropriate body to assure its consideration.\n\nCompatibility with deployed services\n\nBackwards compatibility with deployed Web services is not a goal for the Basic Security Profile 1.1, but due consideration is given to it; the Profile does not introduce a change to the requirements of a referenced specification unless doing so addresses specific interoperability issues.\n\nFocus on interoperability\n\nAlthough there are potentially a number of inconsistencies and design flaws in the referenced specifications, the Basic Security Profile 1.1 only addresses those that affect interoperability.\n\nConformance targets\n\nWhere possible, the Basic Security Profile 1.1 places requirements on artifacts (e.g., WSDL descriptions, SOAP messages) rather than the producing or consuming software's behaviors or roles. Artifacts are concrete, making them easier to verify and therefore making conformance easier to understand and less error-prone.\n\nLower-layer interoperability\n\nThe Profile speaks to interoperability at the web-services layer only; it assumes that interoperability of lower-layer protocols (e.g. TCP, HTTP) and technologies (e.g. encryption and signature algorithms) is adequate and well-understood. WS-I does not attempt to assure the interoperability of these protocols and technologies as a whole. This assures that WS-I's expertise in and focus on Web Services standards is used effectively.\n\nDo no harm\n\nInteroperability of security technologies does not in and of itself ensure security, and the act of combining new technologies and protocols is especially susceptible to security threats. The profile takes steps to avoid introducing new security threats.\n\nBest Practices\n\nIt is not the intent of the Basic Security Profile 1.1 to define security best practices. However, when multiple options exist, we may use known security weaknesses as a means of reducing choice and thus enhancing interoperability. The Basic Security Profile 1.1 will offer non-normative security considerations where the authors deem appropriate; however, these are by no means exhaustive and should not be perceived as a sanctioning of a security best practice.\n\nSelected Errata Inclusion\n\nThe Basic Security Profile 1.1 restates selected requirements from the WS-Security Errata rather than including the entire Errata by reference, preferring interoperability over strict conformance.\n\n1.2 Notational Conventions\n\nThe keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].\n\nNormative statements in the Basic Security Profile 1.1 (i.e., those impacting conformance, as outlined in Section 2) are called Requirements and presented in the following manner:\n\nRnnnnStatement text here.\n\nwhere \"nnnn\" is replaced by a number that is unique among the Requirements in the Basic Security Profile 1.1, thereby forming a unique Requirement identifier. Each Requirement uses one RFC2119 keyword.\n\nRequirement identifiers can be considered to be namespace qualified, in such a way as to be compatible with QNames from Namespaces in XML [xml-names]. If there is no explicit namespace prefix on a requirement's identifier (e.g., \"R9999\" as opposed to \"bp10:R9999\"), it should be interpreted as being in the namespace identified by the conformance URI of the document section it occurs in. If it is qualified, the prefix should be interpreted according to the namespace mappings in effect, as documented below.\n\nSome Requirements clarify the referenced specification(s), but do not place additional constraints upon implementations. For convenience, clarifications are annotated in the following manner: C\n\nSome Requirements are derived from ongoing standardization work on the referenced specification(s). For convenience, such forward-derived statements are annotated in the following manner: xxxx, where \"xxxx\" is an identifier for the specification (e.g., \"WSDL20\" for WSDL Version 2.0). Note that because such work was not complete when this document was published, the specification that the requirement is derived from may change; this information is included only as a convenience to implementers.\n\nAs noted above, some Requirements may present compatibility issues (whether forwards or backwards) with previously published versions of the profile. For convenience, such requirements are annotated in the following manner: Compat\n\nExtensibility points in underlying specifications (see Section 2.3 \"Conformance Scope\") are presented in a similar manner:\n\nEnnnnExtensibility Point Name - Description\n\nwhere \"nnnn\" is replaced by a number that is unique among the extensibility points in the Basic Security Profile 1.1. As with requirement statements, extensibility statements can be considered namespace-qualified.\n\nThis specification uses a number of namespace prefixes throughout; their associated URIs are listed below. Note that the choice of any namespace prefix is arbitrary and not semantically significant.\n\nsoap - \"http://schemas.xmlsoap.org/soap/envelope/\"\n\nxsd - \"http://www.w3.org/2001/XMLSchema\"\n\nwsi - \"http://www.ws-i.org/schemas/conformanceClaim\"\n\nds - \"http://www.w3.org/2000/09/xmldsig#\"\n\nxenc - \"http://www.w3.org/2001/04/xmlenc#\"\n\nc14n - \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n\nwsse - \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n\nwsse11 - \"http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd\"\n\nwsu - \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n\nb10 - \"http://www.ws-i.org/Profiles/Basic/2003-08/BasicProfile-1.0a.htm\"\n\nbp11 - \"http://www.ws-i.org/Profiles/BasicProfile-1.1.html\"\n\nsaml - \"urn:oasis:names:tc:SAML:1.0:assertion\"\n\nsaml2 - \"urn:oasis:names:tc:SAML:2.0:assertion\"\n\nrel - \"urn:mpeg:mpeg21:2003:01-REL-R-NS\"\n\n1.3 Terminology\n\nThere is no terminology specific to this specification.\n\n1.4 Profile Identification and Versioning\n\nThis document is identified by a name (in this case, Basic Security Profile) and a version number (here, 1.1). Together, they identify a profile (here Basic Security Profile 1.1)\n\nVersion numbers are composed of a major and minor portion, in the form \"major.minor\". They can be used to determine the precedence of a profile instance; a higher version number (considering both the major and minor components) indicates that an instance is more recent, and therefore supersedes earlier instances.\n\nInstances of profiles with the same name (e.g., \"Example Profile 1.1\" and \"Example Profile 5.0\") address interoperability problems in the same general scope (although some developments may require the exact scope of a profile to change between instances).\n\nOne can also use this information to determine whether two instances of a profile are backwards-compatible; that is, whether one can assume that conformance to an earlier profile instance implies conformance to a later one. Profile instances with the same name and major version number (e.g., \"Example Profile 1.0\" and \"Example Profile 1.1\") may be considered compatible. Note that this does not imply anything about compatibility in the other direction; that is, one cannot assume that conformance with a later profile instance implies conformance to an earlier one.\n\n1.5 Normative References\n\n[AP1.0] \"Attachments Profile Version 1.0 (AP1.0)\", WS-I Final Material, 20 April 2006, (ISO/IEC 29362:2008 Information technology -- Web Services Interoperability -- WS-I Attachments Profile Version 1.0), http://www.ws-i.org/Profiles/AttachmentsProfile-1.0.html\n\n[BP1.0] K. Ballinger et al, WS-I Basic Profile 1.0 , April 2004. http://www.ws-i.org/Profiles/BasicProfile-1.0-2004-04-16.html\n\n[BP1.0Errata] \"Basic Profile Version 1.0 Errata\", 25 October 2005, http://www.ws-i.org/Profiles/BasicProfile-1.0-errata.html\n\n[BP1.1] \"Basic Profile Version 1.1 (BP 1.1)\", WS-I Final Material, 10 April 2006, , (ISO/IEC 29361:2008 Information technology -- Web Services Interoperability -- WS-I Basic Profile Version 1.10), http://www.ws-i.org/Profiles/BasicProfile-1.1.html\n\n[claimAttachment] M. Nottingham et al., WS-I Conformance Claim Attachment Mechanisms Version 1.0, November 2004. http://www.ws-i.org/Profiles/ConformanceClaims-1.0-2004-11-15.html\n\n[RFC2119] Bradner, S., Key words for use in RFCs to Indicate Requirement Levels, BCP 14, RFC 2119, March 199,. http://www.ietf.org/rfc/rfc2119.txt.\n\n[RFC2459] R. Housley et al, Internet X.509 Public Key Infrastructure Certificate and CRL Profile , January 1999, http://www.ietf.org/rfc/rfc2459.txt\n\n[RFC4514] Zeilenga, K., Ed., \"Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names\", RFC 4514, June 2006. , http://www.ietf.org/rfc/rfc4514.txt\n\n[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000, http://www.ietf.org/rfc/rfc2818.txt\n\n[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999, http://www.ietf.org/rfc/rfc2246.txt\n\n[SSLV3] Freirer, A,, P. Karlton, and P. Kocher, The SSL Protocol Version 3.0 , Internet Draft , November 18, 1996, http://tools.ietf.org/search/draft-ietf-tls-ssl-version3-00\n\n[SSBP1.0] \"Simple SOAP Binding Profile Version 1.0 (SSBP1.0)\", WS-I Final Material, 24 August 2004, http://www.ws-i.org/Profiles/SimpleSoapBindingProfile-1.0.html\n\n[WSS-User1.1] \"Web Services Security: UsernameToken Profile 1.1\", OASIS Standard Specification, 1 February 2006, http://www.oasis-open.org/committees/download.php/16782/wss-v1.1-spec-os-UsernameTokenProfile.pdf\n\n[WSS-SOAP] \"Web Services Security: SOAP Message Security 1.1 (WS-Security 2004)\", OASIS Standard Specification, 1 February 2006, http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf\n\n[WSS-X.509-1.1] \"Web Services Security: X.509 Certificate Token Profile 1.1\", OASIS Standard Specification, 1 February 2006, http://www.oasis-open.org/committees/download.php/16785/wss-v1.1-spec-os-x509TokenProfile.pdf\n\n[WSS-Rel1.1] Web Services Security: Rights Expression Language (REL) Token Profile 1.1 OASIS Standard Specification: 1 February 2006, http://www.oasis-open.org/committees/download.php/16687/oasis-wss-rel-token-profile-1.1.pdf\n\n[WSS-Kerb1.1] \"Web Services Security: Kerberos Token Profile 1.1\", OASIS Standard Specification, 1 February 2006, http://www.oasis-open.org/committees/download.php/16788/wss-v1.1-spec-os-KerberosTokenProfile.pdf\n\n[WSS-SAML1.1] \"Web Services Security: SAML Token Profile 1.1\", OASIS Standard Specification, 1 February 2006, http://www.oasis-open.org/committees/download.php/16768/wss-v1.1-spec-os-SAMLTokenProfile.pdf\n\n[WSS-SWA1.1] \"Web Services Security: SOAP Messages with Attachments (SwA) Profile 1.1\", OASIS Standard, 1 February 2006, http://www.oasis-open.org/committees/download.php/16672/wss-v1.1-spec-os-SwAProfile.pdf\n\n[xml-names] \"Namespaces in XML 1.0 (Second Edition)\", T. Bray, D. Hollander, A. Layman, R. Tobin, Editors, W3C Recommendation, 16 August 2006, http://www.w3.org/TR/2006/REC-xml-names-20060816/\n\n[xmldsig] \"XML Signature Syntax and Processing (Second Edition)\" , D. E. Eastlake, J. Reagle, D. Solo, F. Hirsch, T. Roessler, Editors, W3C Recommendation, 10 June 2008, http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/ .\n\n[XPointer] \"XPointer Framework\" , P. Grosso, E. Maler, J. Marsh, N. Walsh, Editors, W3C Recommendation, 25 March 2003, http://www.w3.org/TR/2003/REC-xptr-framework-20030325/\n\n[xmlenc] \"XML Encryption Syntax and Processing\" , D. E. Eastlake, J. Reagle, Editors, W3C Recommendation, 10 December 2002, http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/\n\n[X.509-2000TC1] \"Information technology  Open Systems Interconnection  The Directory: Public-key and attribute certificate frameworks Technical Corrigendum 1\" , ITU-T Rec. X.509 (2000)/Cor.1, October 2001, http://www.itu.int/rec/T-REC-X.509-200110-S!Cor1\n\n1.6 Non-Normative References\n\nThere are no non-normative references.\n\nConformance to the Profile is defined by adherence to the set of identified Requirements defined for a specific target, within the scope of the Profile. This section explains these terms and describes how conformance is defined and used.\n\n2.1 Requirements Semantics\n\nRequirements (see section 1.4 for the general format of a Requirement, including its identification) state the criteria for conformance to the Profile. They typically refer to an existing specification and embody refinements, amplifications, interpretations and clarifications to it in order to improve interoperability. All Requirements in the Basic Security Profile 1.1 are normative.. When requirements in the Basic Security Profile 1.1 and its referenced specifications contradict each other, the Basic Security Profile 1.1's Requirements take precedence for purposes of Profile conformance.\n\nFor example;\n\nR9999 Any WIDGET SHOULD be round in shape.\n\nThis Requirement applies to the target WIDGET (see below), and places a conditional requirement upon widgets; i.e., although this Requirement must be met to maintain conformance in most cases, there are some situations where there may be valid reasons for it not being met (which are explained in the Requirement itself, or in its accompanying text).\n\nEach Requirement statement contains exactly one conformance target keyword (e.g., \"MESSAGE\"). The conformance target keyword appears in bold text (e.g. \"MESSAGE\"). Other conformance targets appearing in non-bold text are being used strictly for their definition and NOT as a conformance target. Additional text may be included to illuminate a Requirement or group of Requirements (e.g., rationale and examples); however, prose surrounding Requirement statements must not be considered in determining conformance.\n\nNone of the Requirements in the Basic Security Profile 1.1, regardless of their conformance level, should be interpreted as limiting the ability of an otherwise conforming implementation to apply security countermeasures in response to a real or perceived threat (e.g., a denial of service attack).\n\nNo other content is normative in this document outside the numbered Requirements and the conformance claim mechanisms (section 2.5). In particular:\n\no Examples material is not normative and only intended as illustrative.\n\no Appendix material is not normative.\n\no Test Assertions associated with this profile specification are not normative.\n\no Explanatory text introducing Requirements is not normative.\n\no Notes are not normative.\n\no Schemas are not normative.\n\n2.2 Conformance Targets\n\nConformance targets identify what artifacts (e.g., SOAP message, WSDL description, UDDI registry data) or parties (e.g., SOAP processor, end user) Requirements apply to.\n\nThis allows for the definition of conformance in different contexts, to assure unambiguous interpretation of the applicability of Requirements, and to allow conformance testing of artifacts (e.g., SOAP messages and WSDL descriptions) and the behavior of various parties to a Web service (e.g., clients and service instances).\n\nRequirements' conformance targets are generally processable artifacts with well-defined representation , to simplify testing and avoid ambiguity.\n\nThe following conformance targets are used in the Basic Security Profile 1.1:\n\nBINARY_SECURITY_TOKEN - a SECURITY_TOKEN named wsse:BinarySecurityToken.\n\nCANONICALIZATION_METHOD - an element named ds:CanonicalizationMethod, included as a child of a SIGNED_INFO or a wsse:TransformationParameters child of a SIG_TRANSFORM.\n\nCREATED - an element named wsu:Created, included as a child of a TIMESTAMP or USERNAME_TOKEN.\n\nDESCRIPTION - descriptions of types, messages, interfaces and their concrete protocol and data format bindings, and the network access points associated with Web services (e.g., WSDL descriptions). (from Basic Profile 1.0)\n\nDIGEST_METHOD - an element named ds:DigestMethod, included as a child of a SIG_REFERENCE.\n\nED_ENCRYPTION_METHOD - an element named xenc:EncryptionMethod, included as a child of an ENCRYPTED_DATA.\n\nEK_DATA_REFERENCE - an element named xenc:DataReference, included as a child of an EK_REFERENCE_LIST.\n\nEK_ENCRYPTION_METHOD - an element named xenc:EncryptionMethod, included as a child of an ENCRYPTED_KEY.\n\nEK_KEY_REFERENCE - an element named xenc:KeyReference, included as a child of an EK_REFERENCE_LIST.\n\nEK_REFERENCE_LIST - an element named xenc:ReferenceList, included as a child of an ENCRYPTED_KEY.\n\nENC_DATA_REFERENCE - an element named xenc:DataReference, included as a child of an ENC_REFERENCE_LIST.\n\nENC_KEY_INFO - an element named ds:KeyInfo, included as a child of an ENCRYPTED_KEY or ENCRYPTED_DATA.\n\nENC_KEY_REFERENCE - an element named xenc:KeyReference, included as a child of an ENC_REFERENCE_LIST.\n\nENC_REFERENCE_LIST - an element named xenc:ReferenceList, included as a child of a SECURITY_HEADER.\n\nENCRYPTED_DATA - an element named xenc:EncryptedData, referenced by an EK_REFERENCE_LIST or an ENC_REFERENCE_LIST.\n\nENCRYPTED_HEADER - a HEADER_ELEMENT named wsse11:EncryptedHeader.\n\nENCRYPTED_KEY - an element named xenc:EncryptedKey, included as a child of a SECURITY_HEADER.\n\nENCRYPTED_KEY_TOKEN - a SECURITY_TOKEN that is an ENCRYPTED_KEY.\n\nEXPIRES - an element named wsu:Expires, included as a child of a TIMESTAMP.\n\nEXTERNAL_SAML_TOKEN - an EXTERNAL_SECURITY_TOKEN that is a SAML_TOKEN.\n\nEXTERNAL_SECURITY_TOKEN - a security token defined in a security token profile, not included as a descendant of a SOAP_ENVELOPE.\n\nEXTERNAL_TOKEN_REFERENCE - a SECURITY_TOKEN_REFERENCE that refers to an EXTERNAL_SECURITY_TOKEN.\n\nHEADER_ELEMENT - an element included as a child of the SOAP_HEADER.\n\nINCLUSIVE_NAMESPACES - an element named xc14n:InclusiveNamespaces, include as a child of a SIG_TRANSFORM or a CANONICALIZATION_METHOD.\n\nINSTANCE - software that implements a wsdl:port or a uddi:bindingTemplate. (from Basic Profile 1.0)\n\nINTERNAL_SAML_TOKEN - an INTERNAL_SECURITY_TOKEN that is a SAML_TOKEN.\n\nINTERNAL_SAML_V2_SECURITY_TOKEN - An INTERNAL_SECURITY_TOKEN that is a SAML_V2_0_TOKEN.\n\nINTERNAL_SECURITY_TOKEN - a security token defined in a security token profile, included as a child of a SECURITY_HEADER or STR_EMBEDDED.\n\nKERBEROS_TOKEN - a BINARY_SECURITY_TOKEN containing a GSS wrapped Kerberos v5 AP-REQ.\n\nMIME_BODY - the body of a multipart entity, as defined by MIME.\n\nMIME_HEADER - a header field of a multipart entity, as defined by MIME.\n\nMIME_PART - the MIME_BODY and all MIME_HEADERs associated with a single multipart entity, as defined by MIME.\n\nNONCE - an element named wsse:Nonce, included as a child of a USERNAME_TOKEN.\n\nPASSWORD - an element named wsse:Password, included as a child of a USERNAME_TOKEN.\n\nPKCS7_TOKEN - a BINARY_SECURITY_TOKEN containing a PKCS#7 certificate chain.\n\nPKIPATH_TOKEN - a BINARY_SECURITY_TOKEN containing a PkiPath certificate chain.\n\nRECEIVER - software that consumes a message according to the protocol(s) associated with it. A receiver is considered conformant when it is capable of consuming conformant messages containing the artifacts that it supports and its behavior is conformant with all statements related to RECEIVER in the Basic Security Profile 1.1. A conformant receiver need not accept all possible conformant messages. A conformant receiver may choose not to support artifacts that provide unneeded or undesired functionality. When a receiver supports a specific artifact, and the Basic Security Profile 1.1 contains statements related to that artifact, a conformant receiver must accept all required conformant forms of that artifact. (from Basic Profile 1.0)\n\nREL_TOKEN - a SECURITY_TOKEN named rel:license.\n\nSAML_AUTHORITY_BINDING - an element named saml:AuthorityBinding, included as a child of an SECURITY_TOKEN_REFERENCE.\n\nSAML_SC_KEY_INFO - an element named ds:KeyInfo, included as a child of a SAML_SUBJECT_CONFIRMATION.\n\nSAML_SUBJECT_CONFIRMATION - an element named saml:SubjectConfirmation, included in a SAML_TOKEN.\n\nSAML_TOKEN - a SECURITY_TOKEN which is a SAML_V1_1_TOKEN or a SAML_V2_0_TOKEN.\n\nSAML_V1_1_TOKEN - a SECURITY_TOKEN named saml:Assertion which conforms to SAML 1.1 (via the OASIS Web Services Security SAML Token Profile 1.0).\n\nSAML_V2_0_TOKEN - a SECURITY_TOKEN named saml2:Assertion which conforms to SAML 2.0 (via the OASIS Web Services Security SAML Token Profile 1.1).\n\nSECURE_ENVELOPE - a SOAP envelope that contains sub-elements that have been subject to integrity and/or confidentiality protection. A message is considered conformant when all of its contained artifacts are conformant with all statements targeted to those artifacts as appropriate in the Basic Security Profile. Use of artifacts for which there are no statements in the Basic Security Profile does not affect conformance.\n\nSECURE_MESSAGE - protocol elements that have Web Services Security applied to them. Protocol elements include a primary SOAP envelope and optionally associated SwA attachments.\n\nSECURITY_HEADER - a HEADER_ELEMENT named wsse:Security.\n\nSECURITY_TOKEN - an INTERNAL_SECURITY_TOKEN or EXTERNAL_SECURITY_TOKEN (e.g. USERNAME_TOKEN, X509_TOKEN, REL_TOKEN, SAML_TOKEN, SAML_V2_0_TOKEN, KERBEROS_TOKEN, etc.).\n\nSECURITY_TOKEN_REFERENCE - an element named wsse:SecurityTokenReference, included as a descendant of a SECURITY_HEADER or ENCRYPTED_DATA.\n\nSENDER - software that generates a message according to the protocol(s) associated with it. A sender is considered conformant when all of the messages it produces are conformant and its behavior is conformant with all statements related to SENDER in the Basic Security Profile 1.1. (from Basic Profile 1.0)\n\nSIG_KEY_INFO - an element named ds:KeyInfo, included as a child of a SIGNATURE.\n\nSIG_REFERENCE - an element named ds:Reference, included as a child of a SIGNED_INFO.\n\nSIG_TRANSFORMS - an element named ds:Transforms, included as a child of a SIG_REFERENCE.\n\nSIG_TRANSFORM - an element named ds:Transform, included as a child of a SIG_TRANSFORMS.\n\nSIGNATURE - an element named ds:Signature, included as a child of a SECURITY_HEADER.\n\nSIGNATURE_METHOD - an element named ds:SignatureMethod, included as a child of a SIGNED_INFO.\n\nSIGNED_INFO - an element named ds:SignedInfo, included as a child of a SIGNATURE.\n\nSOAP_ENVELOPE - an element named soap:Envelope, which has no parent element.\n\nSOAP_HEADER - an element named soap:Header, included as a child of the SOAP_ENVELOPE.\n\nSTR_EMBEDDED - an element named wsse:Embedded, included as a child of a SECURITY_TOKEN_REFERENCE.\n\nSTR_ISSUER_SERIAL - an element named ds:X509IssuerSerial, included as a child of a child element named ds:X509Data of a SECURITY_TOKEN_REFERENCE.\n\nSTR_KEY_NAME - an element named ds:KeyName, included as a child of a SECURITY_TOKEN_REFERENCE.\n\nSTR_KEY_IDENTIFIER - an element named wsse:KeyIdentifier, included as a child of a SECURITY_TOKEN_REFERENCE.\n\nSTR_REFERENCE - an element named wsse:Reference, included as a child of a SECURITY_TOKEN_REFERENCE.\n\nTIMESTAMP - an element named wsu:Timestamp, included as a child of a SECURITY_HEADER.\n\nUSERNAME_TOKEN - a SECURITY_TOKEN named wsse:UsernameToken.\n\nX509_TOKEN - a BINARY_SECURITY_TOKEN containing an X.509 certificate.\n\n2.3 Conformance Scope\n\nThe Profile's functional scope includes the set of specifications referenced by it. However the conformance requirements that are proper to each one of these underlying specifications (e.g. defining conformance to WS-Security) are not part of the Profile. Only the requirements and restrictions put on the usage of these specifications are part of the Profile. In other words, claiming conformance to this Profile does not imply conformance to WS-Security, but it implies a particular way to use WS-Security.\n\nThe Profile's scope is further limited by extensibility points. Referenced specifications often provide extension mechanisms and unspecified or open-ended configuration parameters; when identified in the Basic Security Profile 1.1 as an extensibility point, such a mechanism or parameter is outside the scope of the Basic Security Profile 1.1, and its use or non-use is not relevant to conformance.\n\nThese extensibility points are however listed here for advisory purpose only, to point at possible risks of interoperability loss that are not addressed by the Basic Security Profile 1.1.\n\nBecause the use of extensibility points may impair interoperability, their use should be negotiated or documented in some fashion by the parties to a Web service; for example, this could take the form of an out-of-band agreement.\n\nHowever the Profile may still express constraints on the use of an extensibility point. Also, specific uses of extensibility points may be further restricted by other profiles, to improve interoperability when used in conjunction with the Profile.\n\nThe Profile's scope is defined by the referenced specifications in clause 1.5, as limited by the extensibility points in Appendix A.\n\n2.4 Conformance Clauses\n\nThis Profile concerns several conformance targets. Conformance targets of Basic Security Profile 1.1 are listed in Section 2.2. Each Requirement identifies its conformance target as described in Section 2.2. Conformance to the Basic Security Profile 1.1 is defined by adherence to the set of requirements defined for a specific target, within the scope of the Profile.\n\nThis Profile is an extension of the Basic Profile (1.1 or 1.0) It includes additional Requirements to those of BP. Conformance to this profile should always be mentioned or claimed in conjunction with a mention or claim about which one of the basic profile (V1.1 or V1.0) is used as foundation. However, only a few Requirements make a distinction between BP1.1 and BP1.0. Such Requirements are prefixed with either bp11 or bp10.\n\nThe two conformance clauses for BSP1.1 reflect the two options for the underlying Basic Profile.\n\n2.4.1 Conformance based on BP1.0\n\nA conformance target (as previously defined) is said to be conforming to this profile based on BP1.0 if this target fulfills all the mandatory Requirements that identify this target type, and that are either annotated for bp10 or not annotated for any profile foundation at all..\n\n2.4.2 Conformance based on BP1.1\n\nA conformance target (as previously defined) is said to be conforming to this profile based on BP1.1 if this target fulfills all the mandatory Requirements that identify this target type, and that are either annotated for bp11 or not annotated for any profile foundation at all..\n\n2.5 Claiming Conformance\n\nClaims of conformance to the Basic Security Profile 1.1 MAY be made using the following mechanisms, as described in Conformance Claim Attachment Mechanisms [claimAttachment], when the applicable Profile Requirements associated with the listed targets have been met:\n\nThe conformance claim URI for the Basic Security Profile 1.1 is \" http://ws-i.org/profiles/basic-security/1.1/core \" , with the following additional conformance claim URIs, which are associated with specific sections:\n\nSection 4 Transport Layer Mechanisms - \"http://ws-i.org/profiles/basic-security/1.1/transport\"\n\nSection 12 Username Token - \"http://ws-i.org/profiles/basic-security/1.1/username-token\"\n\nSection 13 X.509 Certificate Token - \"http://ws-i.org/profiles/basic-security/1.1/x.509-certificate-token\"\n\nSection 14 REL Token - \"http://ws-i.org/profiles/basic-security/1.1/rel-token\"\n\nSection 15 Kerberos Token - \"http://ws-i.org/profiles/basic-security/1.1/kerberos-token\"\n\nSection 16 SAML Token - \"http://ws-i.org/profiles/basic-security/1.1/saml-token\"\n\nSection 18 Attachment Security - \"http://ws-i.org/profiles/basic-security/1.1/swa\"\n\nIf a claim of conformance is made as described in CCAM to Basic Security Profile 1.1 (\" http://ws-i.org/profiles/basic-security/1.1/core \"), then the claim MUST also specify which security tokens, be they BSP profile tokens or other mutually agreed upon tokens, are supported.\n\nThe conformance URI for transport level security (\"http://ws-i.org/profiles/basic-security/1.1/transport \") can be used in isolation or in combination with other conformance URIs.\n\nThis document follows conventions common to all WS-I profiles. These are described in the following sections.\n\n3.1 Security Considerations\n\nIn addition to interoperability recommendations and Requirements (which are made in Rnnnn statements and intended to improve interoperability), the Basic Security Profile 1.1 makes a number of security recommendations intended to improve security. These Security Considerations are presented as follows:\n\nCnnnn Statement text here.\n\nwhere \"nnnn\" is replaced by a number that is unique among the security recommendations in the Basic Security Profile 1.1, thereby forming a unique security recommendation identifier. Each security recommendation contains a SHOULD or a MAY to highlight exactly what is being recommended. Security recommendations are expected to be tested by the test tools to highlight possible security problems, but have no impact on conformance.\n\nIt should be understood that, while a number of recommendations are made about security, adherence to these security recommendations does not guarantee security.\n\nThis section of the Basic Security Profile 1.1 incorporates the following specifications by reference, and defines extensibility points within them:\n\nRFC 2818: HTTP over TLS [RFC2818]\n\nRFC 2246: The TLS Protocol Version 1.0 [RFC2246]\n\nExtensibility points:\n\nE0009 - TLS Ciphersuites - TLS allows for the use of arbitrary encryption algorithms. Note that while section 4.2 of the Basic Security Profile 1.1 mandates, recommends, and discourages support for certain ciphersuites, the Basic Security Profile 1.1 does not prohibit use of any specific ciphersuite.\n\nE0010 - TLS Extensions - TLS allows for extensions during the handshake phase.\n\nThe SSL Protocol Version 3.0 [SSLV3]\n\nExtensibility points:\n\nE0011 - SSL Ciphersuites - SSL allows for the use of arbitrary encryption algorithms. Note that while section 4.2 of the Basic Security Profile 1.1 mandates, recommends, and discourages support for certain ciphersuites, the Basic Security Profile 1.1 does not prohibit use of any specific ciphersuite.\n\n4.1 TLS and SSL Versions\n\nSSL and TLS are both used as underlying protocols for HTTP/S. The Profile places the following constraints on those protocols:\n\n4.1.1 SSL 2.0 Prohibited\n\nSSL 2.0 has known security issues and all current implementations of HTTP/S support more recent protocols. Therefore the Basic Security Profile 1.1 prohibits use of SSL 2.0.\n\nR2001 A SENDER MUST NOT use SSL 2.0 as the underlying protocol for HTTP/S.\n\nR2002 A RECEIVER MUST NOT use SSL 2.0 as the underlying protocol for HTTP/S.\n\n4.2 TLS and SSL Ciphersuites\n\nIn SSL and TLS, choices of algorithms are expressed as ciphersuites. The subsections of this section specify ciphersuites that are required, recommended, discouraged and prohibited, respectively. The use of any other ciphersuite not discussed below is optional.\n\n4.2.1 Mandatory Ciphersuites\n\nThe specified algorithm suites are considered to be widely-implemented, secure and interoperable.\n\nR5701 Any TLS-capable INSTANCE that is not FIPS compliant MUST support TLS_RSA_WITH_3DES_EDE_CBC_SHA\n\nR5702 Any SSL-capable INSTANCE that is not FIPS compliant MUST support SSL_RSA_WITH_3DES_EDE_CBC_SHA\n\nR5703 Any TLS-capable INSTANCE that is FIPS compliant MUST support TLS_RSA_FIPS_WITH_3DES_EDE_CBC_SHA\n\nR5704 Any SSL-capable INSTANCE that is FIPS compliant MUST support SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA\n\n4.2.2 Recommended Ciphersuites\n\nAs the AES encryption algorithm is intended to supersede the 3DES algorithm, it is recommended that TLS-capable implementations implement TLS_RSA_WITH_AES_128_CBC_SHA or the FIPS equivalent, and SSL-capable implementations implement SSL_RSA_WITH_AES_128_CBC_SHA or the FIPS equivalent.\n\n4.2.3 Discouraged Ciphersuites\n\nThe ciphersuites defined in the SSL and TLS specifications that use anonymous Diffie-Hellman (i.e. those that have DH_anon in their symbolic name) are vulnerable to man-in-the-middle attacks. It is also recommended that ciphersuites that include MD5 (i.e. those that have MD5 in their symbolic name) be avoided, due to known security weaknesses of the MD5 algorithm. It is recommended that such ciphersuites be avoided.\n\nThe Profile recommends against the use of the following ciphersuites due to their lack of confidentiality services:\n\nSSL_RSA_WITH_NULL_SHA\n\nTLS_RSA_WITH_NULL_SHA\n\nSSL_RSA_WITH_NULL_MD5\n\nTLS_RSA_WITH_NULL_MD5\n\nIt is also recommended that ciphersuites that use 40 or 56 bit keys be avoided, due to their relative ease of compromise through brute-force attack.\n\n4.2.4 Prohibited Ciphersuites\n\nThe Profile does not prohibit the use of any transport layer security ciphersuites, but careful thought should be given prior to the use of any ciphersuites discussed under \"4.2.3 Discouraged ciphersuites\".\n\nThis section of the Basic Security Profile 1.1 incorporates the following specifications by reference, and defines extensibility points within them:\n\nWeb Services Security: SOAP Message Security 1.1 (WS-Security 2004) OASIS Standard Specification [WSS-SOAP]\n\nExtensibility points:\n\nE0002 - Security Tokens - Security tokens may be specified in additional security token profiles.\n\nBasic Profile Version 1.0 [BP1.0]\n\nBasic Profile Version 1.0 Errata [BP1.0Errata]\n\nBasic Profile Version 1.1 [BP1.1]\n\nSimple SOAP Binding Profile Version 1.0 [SSBP1.0]\n\n5.1 Security Policy\n\n5.1.1 Out of Band Agreement\n\nPartners in a message exchange must agree which elements must be signed and/or encrypted and which elements may be signed and/or encrypted and which security tokens must be present and may be present.\n\nR3105 A SENDER MAY agree in an out of band fashion with a RECEIVER on required and allowed signed and/or encrypted message content and security tokens.\n\nR3106 A RECEIVER MAY agree in an out of band fashion with a SENDER on required and allowed signed and/or encrypted message content and security tokens.\n\nSome vendor platforms have strict implementation of what message content must be signed and/or encrypted and which security tokens must be present and which may be present. Other vendor platforms are more tolerant to receiving additional signed content in a message. The Profile allows for an out of band agreement between partners on how to address this issue.\n\n5.2 SOAP Envelope\n\n5.2.1 Secure Envelope Validity\n\nThe Envelope, Header, or Body elements must not be encrypted. Encrypting these elements would break the SOAP processing model and is therefore prohibited.\n\nR5607 Any SECURE_ENVELOPE MUST still be a valid SOAP Envelope after SOAP Message Security, including encryption, is applied.\n\n5.2.2 wsu:Id Attribute Value Uniqueness\n\nOne of the principles of the underlying specifications is that processing of messages should not require schema validation. However, without schema processing it is not possible to determine whether individual attributes are of type ID and must therefore be unique.\n\nR3204 Any SECURE_ENVELOPE MUST NOT contain more than one element specifying the same wsu:Id attribute value.\n\nSince verification of signatures typically requires dereferencing of elements based on ID attribute values, these values are required to be unique within a message.\n\n5.3 Intermediary Processing\n\n5.3.1 Removal of Headers\n\nR3207 A SOAP intermediary INSTANCE MUST NOT remove or modify any HEADER_ELEMENT unless that SOAP intermediary is acting in the role specified by the S11:actor attribute of that HEADER_ELEMENT.\n\n5.4 Basic Profile Clarification\n\nThe Basic Security Profile is an extension profile to the Basic Profile. This means it is consistent with the Basic Profile but profiles additional functionality - how to add conformant security features to the Basic Profile when needed.\n\nAs an extension of the Basic Profile, the Basic Security Profile is designed to support the addition of security functionality to SOAP messaging, in an interoperable manner. One example of such functionality is the confidentiality of selected SOAP header blocks and SOAP body elements and content through the use of OASIS Web Services Security encryption. The intent of such techniques is to change the nature of the SOAP message so that unintended parties cannot read such content. This means that the secured SOAP message is no longer obviously related to the original WSDL description, and is not intelligible without decryption. Other security mechanisms such as signatures may also modify the content of SOAP envelopes.\n\nThe Basic Profile includes requirements on the content of SOAP envelopes (or in Basic Profile 1.0 the format of SOAP messages). Testing conformance to these statements by using a \"man-in-the-middle\" interceptor as outlined in the WS-I Monitor Tool Functional Specification will not be possible if encryption has been applied to portions of the SOAP envelope and have not yet been decrypted. Even if interception is possible, some messages may have a different structure due to security.\n\nSuch SOAP messages still conform to the Basic Profile, since conformance to the Basic Profile means conformance once a receiver has reversed security changes introduced by a message sender. This is not obvious in some Basic Profile requirements, so this document further clarifies these requirements in the normative \"Basic Profile Clarifications\" section below.\n\nIt is helpful to visualize a SOAP message in light of a protocol layering model, such as the ISO seven layer protocol model [ Tanenbaum ]. This model shows how a protocol is in fact composed of different layers, and how to a given layer underlying layers are transparent. The implementation of a given protocol layer at an endpoint may be modeled as that implementation consuming a service of the underlying protocol layer, and providing a service to the layer above it. In this model no protocol layer need be aware of layers above or below it, making the layer implementations independent. This is illustrated in Figure 1.\n\nFigure 1: Protocol Stack with SOAP Message Security\n\nTraditionally, protocol layers have been distinguished by the use of protocol enveloping, where the message at one layer is conveyed as the body in the next lower layer. The sender passes a message to the lower level protocol implementation that packages it in a protocol envelope and sends it to the corresponding layer in the receiver. The sender and receiver at this lower layer perform whatever processing is necessary for delivery according to the specification of that layer, and finally the receiver passes the message up to the peer of the sender.\n\nSOAP Security may be viewed as a lower layer with respect to the more general SOAP web services application layer. Thus a SOAP sender may pass a SOAP message to a lower layer SOAP security implementation that applies encryption (for example), and sends the message to the destination SOAP Security layer, which removes the encryption before passing the message up to the peer SOAP web services application layer.\n\nThus a Basic Profile interceptor and compliance monitoring activity should logically occur at a receiver at the interface between the SOAP security implementation and SOAP web services application layer.\n\nThis section clarifies the BP1.0 (including Errata), BP1.1, SSBP1.0, and AP1.0 statements that might be unclear when SOAP Message Security is applied in compliance with the Basic Security Profile.\n\nThis section lists each possibly confusing BP1.0, BP1.1, SSBP1.0, and AP1.0 requirement and an associated statement to clarify that requirement in the context of the basic security profile.\n\nWhen these clarifying statements include the phrase \"reverse SOAP Message Security\" it means to remove various impacts of applying SOAP Message Security that may have been applied since the MESSAGE (BP1.0) or ENVELOPE (BP 1.1) was originally created for that recipient according to the BP. This may mean decrypting relevant portions of the XML or removing XML Signature elements or making other reverse transformations as appropriate to the aspects of SOAP Message Security that were applied in the specific circumstance.\n\nNot all security must be reversed, only that for the intended recipient, as applied to the BP compliant envelope before sent to that recipient.\n\n5.4.1 BP Requirement R1029\n\nThis clarifies the Basic Profile's R1029 to reflect the fact that transmission of security related faults may increase the vulnerability to certain attacks and in some cases faults should not be transmitted.\n\nR5814 Where the normal outcome of processing a SECURE_ENVELOPE would have resulted in the transmission of a SOAP Response, but rather a fault is generated instead, a RECEIVER MAY transmit a fault or silently discard the message.\n\n5.4.2 BP Requirement R2301\n\nbp10:R2301 states \"The order of the elements in the soap:body of a MESSAGE MUST be the same as that of the wsdl:parts in the wsdl:message that describes it.\"\n\nbp11:R2301 states \"The order of the elements in the soap:body of an ENVELOPE MUST be the same as that of the wsdl:parts in the wsdl:message that describes it.\"\n\nR5800 bp10:R2301 MUST be true after any SOAP Message Security has been reversed for the MESSAGE.\n\nR5801 bp11:R2301 MUST be true after any SOAP Message Security has been reversed for the ENVELOPE.\n\n5.4.3 BP Requirement R2710\n\nbp10:R2710 states \"The operations in a wsdl:binding in a DESCRIPTION MUST result in operation signatures that are different from one another.\"\n\nbp11:R2710 states \"The operations in a wsdl:binding in a DESCRIPTION MUST result in operation signatures that are different from one another.\"\n\nR5802 bp10:R2710 MUST be true after SOAP Message Security processing has been reversed for the MESSAGE\n\nR5803 bp11:R2710 MUST be true after SOAP Message Security processing has been reversed for the ENVELOPE\n\n5.4.4 BP Requirement R2712\n\nbp10:R2712 states \"A document-literal binding MUST be serialized as a MESSAGE with a soap:Body whose child element is an instance of the global element declaration referenced by the corresponding wsdl:message part.\"\n\nbp11:R2712 states \"A document-literal binding MUST be serialized as an ENVELOPE with a soap:Body whose child element is an instance of the global element declaration referenced by the corresponding wsdl:message part.\"\n\nR5804 bp10:R2712 MUST be true after any SOAP Message Security has been reversed for the MESSAGE\n\nR5805 bp11:R2712 MUST be true after any SOAP Message Security has been reversed for the ENVELOPE\n\n5.4.5 BP Requirement R2724\n\nbp10:R2724 states \"If an INSTANCE receives a message that is inconsistent with its WSDL description, it SHOULD generate a soap:Fault with a faultcode of 'Client', unless a 'MustUnderstand' or 'VersionMismatch' fault is generated.\"\n\nbp11:R2724 states \"If an INSTANCE receives an envelope that is inconsistent with its WSDL description, it SHOULD generate a soap:Fault with a faultcode of 'Client', unless a 'MustUnderstand' or 'VersionMismatch' fault is generated.\"\n\nR5806 For bp10:R2724 \"Inconsistent\" MUST be taken to mean \"Inconsistent after SOAP Message security has been reversed\", for the MESSAGE\n\nR5807 For bp11:R2724 \"Inconsistent\" MUST be taken to mean \"Inconsistent after SOAP Message security has been reversed\", for the ENVELOPE\n\n5.4.6 BP Requirement R2725\n\nbp10:R2725 states \"If an INSTANCE receives a message that is inconsistent with its WSDL description, it MUST check for \"VersionMismatch\", \"MustUnderstand\" and \"Client\" fault conditions in that order.\"\n\nbp11:R2725 states \"If an INSTANCE receives an envelope that is inconsistent with its WSDL description, it MUST check for \"VersionMismatch\", \"MustUnderstand\" and \"Client\" fault conditions in that order.\"\n\nR5808 With respect to bp10:R2725 the INSTANCE must check for consistency of the MESSAGE per BP 1.0 after reversing SOAP Message Security.\n\nR5809 With respect to bp11:R2725 the INSTANCE must check for consistency of the ENVELOPE per BP 1.1 after reversing SOAP Message Security.\n\n5.4.7 BP Requirement R2729\n\nbp10:R2729 states \"A MESSAGE described with an rpc-literal binding that is a response message MUST have a wrapper element whose name is the corresponding wsdl:operation name suffixed with the string 'Response'.\"\n\nbp11:R2729 states \"An ENVELOPE described with an rpc-literal binding that is a response MUST have a wrapper element whose name is the corresponding wsdl:operation name suffixed with the string 'Response'.\"\n\nR5810 With respect to bp10:R2729 the verification of the wrapper element name of the MESSAGE must be performed after reversing SOAP Message Security.\n\nR5811 With respect to bp11:R2729 the verification of the wrapper element name of the ENVELOPE must be performed after reversing SOAP Message Security.\n\n5.4.8 BP Requirement R2738\n\nbp10:R2738 states \"A MESSAGE MUST include all soapbind:headers specified on a wsdl:input or wsdl:output of a wsdl:operation of a wsdl:binding that describes it.\n\nbp11:R2738 states \"An ENVELOPE MUST include all soapbind:headers specified on a wsdl:input or wsdl:output of a wsdl:operation of a wsdl:binding that describes it.\"\n\nR5812 With respect to bp10:R2738 verification of a MESSAGE must occur after SOAP Message Security has been reversed.\n\nR5813 With respect to bp11:R2738 verification of an ENVELOPE must occur after SOAP Message Security has been reversed.\n\n6.1 Processing Order\n\nWeb Services Security: SOAP Message Security defines the order for processing elements within wsse:Security headers. The Profile provides the following guidance:\n\n6.1.1 In Order of Appearance\n\nMessages may be signed and encrypted, potentially by multiple entities signing and encrypting overlapping elements. A signature applied before encryption has different security properties than encryption applied before a signature. Determining which security properties should be used requires an out-of-band agreement.\n\nWith signature before encryption, the signer is known to have created or vouched for the plaintext data. It is not known to the receiver whether the signer performed the encryption. The potential exists for the identity of the signer to remain confidential except to the receiver by encryption of the signature and signer's security token.\n\nWith encryption before signature, the signer is known to have created or vouched for the ciphertext data, but it is not known whether the signer was aware of the plaintext. It is known that the signer was aware that the data was encrypted and intended to be delivered to the receiver.\n\nR3212 Any SIGNATURE, ENCRYPTED_KEY, and ENC_REFERENCE_LIST elements MUST be ordered within a SECURITY_HEADER so a receiver will get the correct result by processing the elements in the order they appear.\n\nAs signature and encryption elements are added to a security header they must be ordered in a way that ensures that if a receiver of the message processing the elements in the order they appear they will achieve the correct result.\n\n6.2 SOAP Actor Attribute\n\nSOAP defines an actor attribute for use in SOAP headers. The Profile places the following constraints on its use with Security headers:\n\n6.2.1 Avoid Target Ambiguity\n\nThe actor attribute allows a security header to be targeted to a specific processing component or node.\n\nR3206 Any SOAP_HEADER MUST NOT contain more than one SECURITY_HEADER with the actor attribute omitted.\n\nR3210 Any SOAP_HEADER MUST NOT contain more than one SECURITY_HEADER with the same actor attribute value.\n\nCorrect security header processing is order dependent. Eliminating potential ambiguity caused by ordering dependencies between headers targeted to the same actor eliminates complexity.\n\nWeb Services Security: SOAP Message Security defines a Timestamp element for use in SOAP messages. The Profile places the following constraints on its use:\n\n7.1 Placement\n\n7.1.1 Not More Than One per Security Header\n\nR3227 A SECURITY_HEADER MUST NOT contain more than one TIMESTAMP.\n\n7.2 Content\n\n7.2.1 Exactly One Created per Timestamp\n\nThe wsu:Created element represents the creation time of the security semantics.\n\nR3203 A TIMESTAMP MUST contain exactly one CREATED.\n\nThis element can only be specified once in a Timestamp element. Within the SOAP processing model, creation is the instant that the Infoset is serialized for transmission.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsu:Timestamp element is missing a wsu:Created child element -->\n\n<wsu:Timestamp wsu:Id=\"timestamp\">\n\n<wsu:Expires>2001-10-13T09:00:00Z</wsu:Expires>\n\n</wsu:Timestamp>\n\nCORRECT:\n\n<wsu:Timestamp wsu:Id=\"timestamp\">\n\n<wsu:Created>2001-09-13T08:42:00Z</wsu:Created>\n\n<wsu:Expires>2001-10-13T09:00:00Z</wsu:Expires>\n\n</wsu:Timestamp>\n\n7.2.2 Not More Than One Expires per Timestamp\n\nR3224 Any TIMESTAMP MUST NOT contain more than one EXPIRES.\n\n7.2.3 Created Precedes Expires in Timestamp\n\nA timestamp may optionally contain an expires element.\n\nR3221 Any TIMESTAMP containing an EXPIRES MUST contain a CREATED that precedes its sibling EXPIRES.\n\nPreventing multiple expires elements and enforcing the order of elements reduces complexity.\n\n7.2.4 Timestamp Contains Nothing Other Than Create and Expires\n\nR3222 Any TIMESTAMP MUST NOT contain anything other than CREATED or EXPIRES elements.\n\n7.3 Constraints on Created and Expires\n\n7.3.1 Value Precision to Milliseconds\n\nThe underlying specifications do not limit the resolution of timestamp values.\n\nR3220 Any CREATED SHOULD NOT contain a seconds value with more than three digits to the right of the decimal (milliseconds).\n\nR3229 Any EXPIRES SHOULD NOT contain a seconds value with more than three digits to the right of the decimal (milliseconds).\n\nSince implementations have practical limits on resolution of time values the Profile requires a reasonable processing capability.\n\n7.3.2 Leap Second Values Prohibited\n\nLeap seconds are allowed by the underlying specifications.\n\nR3213 Any CREATED containing second values MUST specify seconds values less than 60.\n\nR3215 Any EXPIRES containing second values MUST specify seconds values less than 60.\n\nLeap second processing is complex and error prone. The Profile disallows specification of leap seconds.\n\n7.3.3 ValueType Attribute Prohibited\n\nThe underlying specifications allow for the specification of a timestamp ValueType.\n\nR3225 Any CREATED MUST NOT include a ValueType attribute.\n\nR3226 Any EXPIRES MUST NOT include a ValueType attribute.\n\nThere is no specified set of values for the ValueType attribute so the Basic Security Profile 1.1 disallows its use.\n\n7.3.4 UTC Format Mandatory\n\nThe underlying specifications allow for a variety of timestamp formats.\n\nR3217 Any CREATED MUST contain time values in UTC format as specified by the XML Schema type (dateTime).\n\nR3223 Any EXPIRES MUST contain time values in UTC format as specified by the XML Schema type (dateTime).\n\nLimiting timestamp values to UTC time eliminates complexity.\n\nWeb Services Security: SOAP Message Security defines a wsse:SecurityTokenReference element for use in SOAP messages. The Profile places the following constraints on its use:\n\n8.1 Content\n\n8.1.1 Exactly One SecurityTokenReference Child Element\n\nWeb Services Security: SOAP Message Security allows for a single SecurityTokenReference to include multiple reference mechanisms to the same security token. The Profile requires that only one be used.\n\nR3061 A SECURITY_TOKEN_REFERENCE MUST provide exactly one token reference.\n\nRestricting the number of reference mechanisms reduces complexity.\n\n8.2 TokenType Attribute\n\n8.2.1 Value of TokenType Attribute\n\nR3074 Any wsse:11:TokenType Attribute in a SECURITY_TOKEN_REFERENCE MUST specify a value that a TokenType specified by a security token profile for the referenced SECURITY_TOKEN.\n\nRestricting the number of reference mechanisms reduces complexity.\n\n8.3 Direct References\n\n8.3.1 Direct Reference to Security Token Reference Prohibited\n\nThe only proper way to refer to an INTERNAL_SECURITY_TOKEN by Direct Reference (even one inside a STR_EMBEDDED) is to refer directly to the INTERNAL_SECURITY_TOKEN.\n\nR3057 Any STR_REFERENCE MUST NOT reference a SECURITY_TOKEN_REFERENCE.\n\nR3064 Any STR_REFERENCE MUST NOT reference an STR_EMBEDDED.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the second wsse:SecurityTokenReference element refers to the\n\nwsse:SecurityTokenReference with an wsu:Id of TheFirstSTR -->\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<wsse:SecurityTokenReference wsu:Id=\"TheFirstSTR\">\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#TheFirstSTR'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\nCORRECT:\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCert\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n8.3.2 Reference/@ValueType Attribute Mandatory\n\nThe ValueType attribute in a security token reference is optional and has no accepted default value. This creates ambiguity between implementations when it is missing. Furthermore, security tokens similarly have ValueType attributes, which creates the possibility of contradiction between the reference and the token. There is no accepted processing model to resolve this.\n\nR3059 Any STR_REFERENCE MUST specify a ValueType attribute with the exception of STR_REFERENCE pointing to a SAML_V2_0_TOKEN or a KERBEROS_TOKEN or an ENCRYPTED_KEY_TOKEN.\n\nR3058 Any STR_REFERENCE ValueType attribute MUST contain a value for the referenced SECURITY_TOKEN specified by the corresponding security token profile.\n\nRequiring that Security Token References carry a ValueType attribute makes it clear what type of security token is being referenced enabling security token specific reference mechanisms and aiding in error detection.\n\n8.3.3 Reference/@URI Attribute Mandatory\n\nWeb Services Security: SOAP Message Security treats the URI attribute as optional allowing for extensibility in the reference mechanism. However, the only fully specified mechanism which uses the Reference element requires a URI value.\n\nR3062 Any STR_REFERENCE MUST specify a URI attribute.\n\nEliminating underspecified functionality removes complexity.\n\n8.4 Key Name References\n\n8.4.1 Key Name References Prohibited\n\nKey Name References may be ambiguous.\n\nR3027 Any SECURITY_TOKEN_REFERENCE MUST NOT contain an STR_KEY_NAME.\n\nIn any case where a security token would be referred to by Key Name, it would also be possible to refer to it by a more efficient and/or less ambiguous mechanism (e.g. Direct, Key Identifier and/or Issuer and Serial Number). Thus, the Basic Security Profile 1.1 disallows the use of Key Name References.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because it uses a ds:KeyName element to refer to an X.509 certificate -->\n\n<wsse:SecurityTokenReference>\n\n<ds:KeyName>CN=Security WG, OU=BSP, O=WS-I, C=US</ds:KeyName>\n\n</wsse:SecurityTokenReference>\n\n8.5 Key Identifier References\n\n8.5.1 KeyIdentifier/@ValueType Attribute Mandatory\n\nHaving an explicit ValueType removes ambiguity about the format of the KeyIdentifier. The Profile restricts the value to that specified in the security token profile that is associated with the security token. The ValueType attribute in a KeyIdentifier is optional. This can cause ambiguity when it is not explicitly stated. Furthermore, interoperability is discouraged if a ValueType is specified but does not correspond to the value associated with that token as stated in its security token profile.\n\nR3054 Any STR_KEY_IDENTIFIER MUST specify a ValueType attribute.\n\nR3063 Any STR_KEY_IDENTIFIER ValueType attribute MUST contain a value specified within the security token profile associated with the referenced SECURITY_TOKEN.\n\nHaving an explicit ValueType removes ambiguity about the format of the KeyIdentifier and enhances processing efficiency. The Profile restricts the value to that specified in the security token profile that is associated with the security token.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:KeyIdentifier element is missing a ValueType attribute -->\n\n<wsse:SecurityTokenReference>\n\n<wsse:KeyIdentifier EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nMIGfMa0GCSq\n\n</wsse:KeyIdentifier>\n\n</wsse:SecurityTokenReference>\n\nCORRECT:\n\n<wsse:SecurityTokenReference>\n\n<wsse:KeyIdentifier EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\"\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier\" >\n\nMIGfMa0GCSq\n\n</wsse:KeyIdentifier>\n\n</wsse:SecurityTokenReference>\n\n8.5.2 KeyIdentifier/@EncodingType Attribute Mandatory\n\nBase64Binary is the only encoding type specified by Web Services Security: SOAP Message Security. Explicit specification of attribute values simplifies XML processing requirements and as a general principle the Basic Security Profile 1.1 requires that attributes be explicitly specified rather than relying on default values.\n\nR3070 Any STR_KEY_IDENTIFIER that refers to a SECURITY_TOKEN other than a SAML_TOKEN MUST specify an EncodingType attribute.\n\nR3071 Any STR_KEY_IDENTIFIER EncodingType attribute MUST have a value of \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\".\n\nA wsse:KeyIdentifier may specify its encoding type. The Profile restricts the encoding type to Base64Binary and requires its explicit specification.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:KeyIdentifier element is missing an EncodingType attribute -->\n\n<wsse:SecurityTokenReference>\n\n<wsse:KeyIdentifier ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier\" >\n\nMIGfMa0GCSq\n\n</wsse:KeyIdentifier>\n\n</wsse:SecurityTokenReference>\n\nCORRECT:\n\n<wsse:SecurityTokenReference>\n\n<wsse:KeyIdentifier EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\"\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier\" >\n\nMIGfMa0GCSq\n\n</wsse:KeyIdentifier>\n\n</wsse:SecurityTokenReference>\n\n8.6 Embedded References\n\n8.6.1 Embedded Content\n\nEmbedded elements may potentially contain multiple elements, creating ambiguity about which token should be processed. Furthermore, elements may be of a type that is not defined within a security token profile. This can cause problems with interoperability.\n\nR3060 Any STR_EMBEDDED MUST contain only a single child element which is an INTERNAL_SECURITY_TOKEN.\n\nIn order to reduce ambiguity surrounding which token to process, the Basic Security Profile 1.1 restricts embedded security tokens to contain exactly one security token element. It also restricts tokens to those defined in a token profile; this establishes a defined scope of profiles and thus allows for interoperability between implementations.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:Embedded element has multiple element children -->\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCerts\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<wsse:BinarySecurityToken wsu:Id='SomeOtherCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\nCORRECT:\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCert\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n8.6.2 Embedded Token Format\n\nUsing a single consistent format for security tokens, regardless of reference mechanism, ensures consistent processing.\n\nR3025 Any INTERNAL_SECURITY_TOKEN contained in an STR_EMBEDDED MUST be in the same format as if it were a child of a SECURITY_HEADER.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:Embedded element carries the data for the X.509 certificate\n\ndirectly rather than as a wsse:BinarySecurityToken element -->\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"SomeCert\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\nCORRECT:\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCert\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n8.6.3 Security Token Reference in Embedded Prohibited\n\nEmbedded elements can contain multiple binary security token elements, which creates ambiguity about which token should be processed. Furthermore, the security token may be a type that is not defined within a security token profile. This can cause problems with interoperability. Using a single consistent format for security tokens, regardless of reference mechanism, ensures consistent processing. Embedded security tokens can potentially chain to other security tokens, which adds complexity to processing and discourages interoperability.\n\nR3056 Any STR_EMBEDDED MUST NOT contain a wsse:SecurityTokenReference child element.\n\nIn order to reduce ambiguity surrounding which token to process, the Basic Security Profile 1.1 restricts embedded security tokens to contain exactly one security token element. It also restricts tokens to those defined in a token profile; this establishes a defined scope of profiles and thus allows for interoperability between implementations. Eliminating redirection from within embedded elements reduces required complexity in handling embedded security tokens.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:Embedded element contains a wsse:SecurityTokenReference element -->\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeSTR\">\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n8.7 Internal References\n\n8.7.1 Direct or Embedded References Where Possible\n\nWeb Services Security: SOAP Message Security provides a list of reference mechanisms in preferred order (i.e., most specific to least specific). This adds ambiguity and complexity, which discourages interoperability.\n\nR3022 Any SECURITY_TOKEN_REFERENCE that references an INTERNAL_SECURITY_TOKEN which has a wsu:Id attribute MUST contain an STR_REFERENCE or STR_EMBEDDED.\n\nThe recommendation does not allow the use of Key Identifier and Key Name references due to possible ambiguities. Direct References and Embedded References are to be used instead of these. This reduces complexity and improves interoperability.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because it refers to a wsse:BinarySecurityToken element which specifies a wsu:id\n\nattribute using a wsse:KeyIdentifier element rather than a wsse:Reference or wsse:Embedded element -->\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<wsse:SecurityTokenReference>\n\n<wsse:KeyIdentifier EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\"\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier\">\n\nMIGfMa0GCSq\n\n</wsse:KeyIdentifier>\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCert\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\n8.7.2 Direct Preferred to Embedded References\n\nSince multiple security elements may reference a single security token and processing of those elements may result in the removal of the element, consistent use of direct rather than embedded references simplifies processing. Direct references are encouraged, embedded references are discouraged.\n\nR3023 Any SECURITY_TOKEN_REFERENCE that references an INTERNAL_SECURITY_TOKEN that is referenced several times SHOULD contain an STR_REFERENCE rather than an STR_EMBEDDED.\n\nThe Profile encourages the consistent use of Direct Reference to security tokens.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because it uses a wsse:Embedded element for the wsse:BinarySecurityToken\n\nwith the wsu:Id of SomeCert. It is assumed that this token is referred to from several places elsewhere\n\nin the SOAP envelope (not shown) -->\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:SecurityTokenReference>\n\n<wsse:Embedded wsu:Id=\"TheEmbeddedElementAroundSomeCert\">\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Embedded>\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\n8.7.3 Shorthand XPointers Mandatory for Direct References\n\nConstraining the number of referencing mechanisms reduces complexity and thus improves interoperability. The wsse:BinarySecurityToken has a wsu:Id attribute allowing references to this token to use the relatively efficient and unambiguous Shorthand XPointer.\n\nR5204 Any STR_REFERENCE to an INTERNAL_SECURITY_TOKEN having an ID attribute MUST contain a URI attribute with a Shorthand XPointer value.\n\nThe Profile requires the use of Shorthand XPointer Reference to ensure that the URI efficiently references the correct token.\n\nFor example,\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<xenc:EncryptedKey>\n\n<xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#rsa-1_5' />\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n<xenc:CipherData>\n\n<xenc:CipherValue>\n\nXZEEVABD3L9G+VNTCDiDTE7WB1a4kILtz5f9FT747eE=\n\n</xenc:CipherValue>\n\n</xenc:CipherData>\n\n</xenc:EncryptedKey>\n\n</wsse:Security>\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<rel:license xmlns:rel='urn:mpeg:mpeg21:2003:01-REL-R-NS'\n\nwsu:Id='SomeLic'\n\nlicenseId='uuid:3D680C71-177B-40cc-84C1-123B02503524' >\n\n. . .\n\n</rel:license>\n\n<ds:Signature>\n\n. . .\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeLic'\n\nValueType=\"http://docs.oasisopen.org/wss/oasis-wss-rel-token-profile-1.0.pdf#license\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n</ds:Signature>\n\n</wsse:Security>\n\n8.7.4 Security Tokens Precede Their References\n\nSecurity token references are intended to provide access to security tokens residing anywhere in a document. However, token placement can have a significant affect on processing efficiency when the document is processed in a stream-oriented fashion. For example, resolving a forward reference to a token may require significant subsequent document parsing that could otherwise be eliminated. This need to satisfy random access to security tokens adds complexity to implementations that works against interoperability.\n\nR5205 Any INTERNAL_SECURITY_TOKEN that is not contained in an STR_EMBEDDED MUST precede all SECURITY_TOKEN_REFERENCE elements that reference it in the SOAP_ENVELOPE.\n\nEnsuring that a security token element appears before it is referenced, when processing in document order, means that implementations have access to the token content referenced from a wsse:SecurityTokenReference element when it is needed to verify a signature or perform decryption.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the wsse:BinarySecurityToken with the wsu:Id of SomeCert appears after it is\n\nreferenced from within the xenc:EncryptedKey element -->\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<xenc:EncryptedKey>\n\n<xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#rsa-1_5' />\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n<xenc:CipherData>\n\n<xenc:CipherValue>\n\nXZEEVABD3L9G+VNTCDiDTE7WB1a4kILtz5f9FT747eE=\n\n</xenc:CipherValue>\n\n</xenc:CipherData>\n\n</xenc:EncryptedKey>\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n</wsse:Security>\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"\n\nEncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<xenc:EncryptedKey>\n\n<xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#rsa-1_5' />\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n<xenc:CipherData>\n\n<xenc:CipherValue>\n\nXZEEVABD3L9G+VNTCDiDTE7WB1a4kILtz5f9FT747eE=\n\n</xenc:CipherValue>\n\n</xenc:CipherData>\n\n</xenc:EncryptedKey>\n\n</wsse:Security>\n\n8.7.5 References Between Security Headers Prohibited\n\nThe potential exists for the same security token to be referenced from multiple security headers.\n\nR3066 Any STR_REFERENCE that is a descendant of a SECURITY_HEADER MUST NOT use a Shorthand XPointer to refer to an INTERNAL_SECURITY_TOKEN located in a SECURITY_HEADER other than the SECURITY_HEADER that contains the STR_REFERENCE.\n\nR3067 Any STR_REFERENCE that is a descendant of an ENCRYPTED_DATA MUST NOT use a Shorthand XPointer to refer to an INTERNAL_SECURITY_TOKEN located in a SECURITY_HEADER other than the SECURITY_HEADER containing a reference (EK_REFERENCE_LIST or an ENC_REFERENCE_LIST) to the ENCRYPTED_DATA.\n\nSince processing of security header elements can result in the removal of those elements, references to elements in another header may not correctly resolve. If an internal security token is referenced from multiple security headers it should be copied into each referencing header.\n\n8.8 External References\n\n8.8.1 Direct References Where Possible\n\nSince multiple security elements may reference a single external security token, consistent use of direct references simplifies processing. Direct references are encouraged.\n\nR3024 Any EXTERNAL_TOKEN_REFERENCE that can use an STR_REFERENCE MUST contain an STR_REFERENCE.\n\nThe Profile encourages the use of Direct Reference in order to minimize ambiguity.\n\nFor example,\n\nCORRECT:\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nxmlns:xenc='http://www.w3.org/2001/04/xmlenc#'\n\nxmlns:ds='http://www.w3.org/2000/09/xmldsig#' >\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='http://www.ws-i.org/CertStore/Examples/BSP.PEM'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</wsse:Security>\n\n8.9 SecurityTokenReference With EncryptedData\n\n8.9.1 Reference to KeyInfo Prohibited\n\nSecurity token references are intended to refer directly to security tokens. This requirement prohibits cases where a reference is made to a ds:KeyInfo which in turn contains another reference.\n\nR3211 Any SECURITY_TOKEN_REFERENCE MUST NOT reference a ds:KeyInfo element.\n\nWeb Services Security: SOAP Message Security builds on XML Signature, defining usage of various elements from XML Signature and a processing model. The Profile places the constraints defined in this section on the use of XML Signature with Web Services Security: SOAP Message Security. The Profile places no constraints on other use of XML Signature.\n\nIn some areas the Basic Security Profile allows limited flexibility and extensibility in the application of security to messages. Some agreement between the SENDER and RECEIVER over which mechanisms and choices should be used for message exchanges is necessary. Since no security policy description language or negotiation mechanism is in scope for the Basic Security Profile, some out of band agreement must be reached for which elements should be signed and which signature algorithms should be used.\n\nThis section of the Basic Security Profile 1.1 incorporates the following specifications by reference:\n\nXML Signature Syntax and Processing [xmldsig]\n\nThe following extensibility point is defined:\n\nExtensibility points:\n\nE0014  Signature Digest algorithm  version of SHA algorithm in use (SHA-1, or one of the SHA-2 algorithms).\n\n9.1 Types of Signature\n\n9.1.1 Enveloping Signatures Prohibited\n\nDue to the nature of the SOAP processing model, which is based on recognizing the elements that are children of soap:Header and/or soap:Body, use of enveloping signatures, where the signed XML is encapsulated in a ds:Signature element, is inappropriate.\n\nR3102 A SIGNATURE MUST NOT be an Enveloping Signature as defined by the XML Signature specification.\n\nEnveloping signatures are not allowed.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because it contains an enveloping signature around the SomeSecurityToken element -->\n\n<ds:Signature Id='TheSig' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:Reference URI='#SigPropBody'>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>i3qi5GjhHnfoBn/jOjQp2mq0Na4=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>oxNwoqGbzqg1YBliz+PProgcjw8=</ds:SignatureValue>\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n<ds:Object>\n\n<ds:SignatureProperties>\n\n<ds:SignatureProperty Id='SigPropBody' Target='#TheSig'>\n\n<SomeSecurityToken/>\n\n</ds:SignatureProperty>\n\n</ds:SignatureProperties>\n\n</ds:Object>\n\n</ds:Signature>\n\n9.1.2 Enveloped Signatures Discouraged\n\nEnveloped signatures, where the ds:Signature element is a descendant of the signed element, limit the ability of intermediaries to process messages and should be avoided unless said limitation is the desired effect.\n\nR3104 A SIGNATURE SHOULD NOT be an Enveloped Signature as defined by the XML Signature specification.\n\nEnveloped signatures are discouraged.\n\n9.1.3 Detached Signatures Preferred\n\nR3103 A SIGNATURE SHOULD be a Detached Signature as defined by the XML Signature specification.\n\nDetached signatures are encouraged.\n\nFor example,\n\nCORRECT:\n\n<ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1' />\n\n<ds:Reference URI='#TheBody'>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>i3qi5GjhHnfoBn/jOjQp2mq0Na4=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>PipXJ2Sfc+LTDnq4pM5JcIYt9gg=</ds:SignatureValue>\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference URI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n</ds:Signature>\n\n9.2 Signed Element References\n\nThis section of the Basic Security Profile 1.1 incorporates the following specifications by reference:\n\nXPointer Framework [XPointer]\n\nElement references are used to specify which portions of a SECURE_ENVELOPE are integrity protected. The Basic Security Profile 1.1 places the following constraints on the use of element references:\n\n9.2.1 Shorthand XPointer Where Referent has wsu:Id Attribute\n\nShorthand XPointer is relatively efficient and interoperable. However, in cases where the referent element is optional in the message and other remedies are unacceptable, it may be necessary to use an absolute path XPath Expression which allows signature verification to detect movement of the signed element within the message (see Section 18.4 for details).\n\nR3001 Any SIG_REFERENCE SHOULD contain a URI attribute containing a Shorthand XPointer.\n\n9.2.2 Shorthand XPointer Where Referent is defined by XML Signature\n\nR3003 Any SIG_REFERENCE to a SIGNATURE or descendant of a SIGNATURE MUST contain a URI attribute with a reference value that is a Shorthand XPointer to Local ID attribute defined by XML Signature.\n\n9.2.3 Shorthand XPointer Where Referent is defined by XML Encryption\n\nR3004 Any SIG_REFERENCE to an element defined in XML Encryption MUST contain a URI attribute with a reference value that is a Shorthand XPointer to Local ID attribute defined by XML Encryption.\n\n9.2.4 Shorthand XPointer to wsu:Id Attribute Where Possible\n\nProcessing of Shorthand XPointers requires knowledge of which attributes are IDs. Since the underlying specifications strive to allow message processing without schema processing, some non-schema aware method for identifying ID attributes must be used.\n\nR3005 Any SIG_REFERENCE to an element that is not defined in XML Encryption, a SIGNATURE, or a descendant of a SIGNATURE SHOULD contain a URI attribute with a reference value that is a Shorthand XPointer to a wsu:Id attribute.\n\nThe underlying specifications define well known ID attributes. Limiting references to those well known attributes reduces complexity and the reliance on schema processing.\n\n9.2.5 XPath References Where Necessary\n\nElements that do not have an attribute of type ID cannot be referred to by Shorthand XPointer so a different referencing mechanism is needed.\n\nR3002 Any SIG_REFERENCE to an element that does not have an ID attribute MUST contain a TRANSFORM with an Algorithm attribute value of \"http://www.w3.org/2002/06/xmldsig-filter2\".\n\nThe XPath Filter 2.0 transform is more efficient than the original XPath transform from XML Digital Signature Syntax and Processing.\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because it uses the http://www.w3.org/TR/1999/REC-xpath-19991116 transform instead of the http://www.w3.org/2002/06/xmldsig-filter2 transform -->\n\n<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope' >\n\n<soap:Header>\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1' />\n\n<ds:Reference URI=''>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/TR/1999/REC-xpath-19991116'>\n\n<ds:XPath>ancestor-or-self::soap:Body[parent::node()=/soap:Envelope]</ds:XPath>\n\n</ds:Transform>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>VEPKwzfPGOxh2OUpoK0bcl58jtU=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>+diIuEyDpV7qxVoUOkb5rj61+Zs=</ds:SignatureValue>\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n</ds:Signature>\n\n</wsse:Security>\n\n</soap:Header>\n\n<soap:Body xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nwsu:Id='TheBody'>\n\n<m:SomeElement xmlns:m='http://example.org/ws' />\n\n</soap:Body>\n\n</soap:Envelope>\n\nCORRECT:\n\n<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope' >\n\n<soap:Header>\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1' />\n\n<ds:Reference URI=''>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2002/06/xmldsig-filter2'\n\nxmlns:dsxp='http://www.w3.org/2002/06/xmldsig-filter2'>\n\n<dsxp:XPath Filter='intersect'>ancestor-or-self::soap:Body[parent::node()=/soap:Envelope]</dsxp:XPath>\n\n</ds:Transform>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'>\n\n<xc14n:InclusiveNamespaces xmlns:xc14n='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transform>\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>VEPKwzfPGOxh2OUpoK0bcl58jtU=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>+diIuEyDpV7qxVoUOkb5rj61+Zs=</ds:SignatureValue>\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n</ds:Signature>\n\n</wsse:Security>\n\n</soap:Header>\n\n<soap:Body xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nwsu:Id='TheBody'>\n\n<m:SomeElement xmlns:m='http://example.org/ws' />\n\n</soap:Body>\n\n</soap:Envelope>\n\n9.3 Signature Transforms\n\n9.3.1 Transforms Element Mandatory\n\nAt a minimum an XML Canonicalization Algorithm needs to be specified for each Reference, necessitating a ds:Transforms element.\n\nR5416 Any SIG_REFERENCE MUST contain a SIG_TRANSFORMS child element.\n\n9.3.2 Transform Element Mandatory\n\nR5411 Any SIG_TRANSFORMS MUST contain at least one SIG_TRANSFORM child element.\n\n9.3.3 Transform Algorithms\n\nThese algorithms are chosen for their cryptographic strength, utility or because they address some security concern.\n\nR5423 Any SIG_TRANSFORM Algorithm attribute MUST have a value of\n\n\"http://www.w3.org/2001/10/xml-exc-c14n#\" or\n\n\"http://www.w3.org/2002/06/xmldsig-filter2\" or\n\n\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform\" or\n\n\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" or\n\n\"http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Content-Signature-Transform\" or\n\n\"http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Complete-Signature-Transform\"\n\nFor example,\n\nCORRECT:\n\n<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope' >\n\n<soap:Header>\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<xenc:EncryptedKey xmlns:xenc='http://www.w3.org/2001/04/xmlenc#' >\n\n<xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#rsa-1_5' />\n\n<ds:KeyInfo xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n<xenc:CipherData>\n\n<xenc:CipherValue>\n\nXZEEVABD3L9G+VNTCDiDTE7WB1a4kILtz5f9FT747eE=\n\n</xenc:CipherValue>\n\n</xenc:CipherData>\n\n</xenc:EncryptedKey>\n\n<ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#hmac-sha1' />\n\n<ds:Reference URI='#TheBody'>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>+VTJraRYFT3pl7Z4uAWhmr5+bf4=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>+diIuEyDpV7qxVoUOkb5rj61+Zs=</ds:SignatureValue>\n\n</ds:Signature>\n\n</wsse:Security>\n\n</soap:Header>\n\n<soap:Body xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nwsu:Id='TheBody'>\n\n<m:SomeElement xmlns:m='http://example.org/ws' />\n\n</soap:Body>\n\n</soap:Envelope>\n\nCORRECT:\n\n<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope' >\n\n<soap:Header>\n\n<wsse:Security xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'\n\nxmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'>\n\n<wsse:BinarySecurityToken wsu:Id='SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\">\n\nlui+Jy4WYKGJW5xM3aHnLxOpGVIpzSg4V486hHFe7sHET/uxxVBovT7JV1A2RnWSWkXm9jAEdsm/...\n\n</wsse:BinarySecurityToken>\n\n<ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'>\n\n<ds:SignedInfo>\n\n<ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n<ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1' />\n\n<ds:Reference URI='#TheBody'>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' />\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>+VTJraRYFT3pl7Z4uAWhmr5+bf4=</ds:DigestValue>\n\n</ds:Reference>\n\n</ds:SignedInfo>\n\n<ds:SignatureValue>+diIuEyDpV7qxVoUOkb5rj61+Zs=</ds:SignatureValue>\n\n<ds:KeyInfo>\n\n<wsse:SecurityTokenReference>\n\n<wsse:Reference\n\nURI='#SomeCert'\n\nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\n\n</wsse:SecurityTokenReference>\n\n</ds:KeyInfo>\n\n</ds:Signature>\n\n</wsse:Security>\n\n</soap:Header>\n\n<soap:Body xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'\n\nwsu:Id='TheBody'>\n\n<m:SomeElement xmlns:m='http://example.org/ws' />\n\n</soap:Body>\n\n</soap:Envelope>\n\n9.3.4 Last Transform Algorithm\n\nCanonicalization is critical to ensuring signatures are processed correctly, thus each ds:Reference will need at least one ds:Transform to specify the Exclusive C14N transform or a transform which itself incorporates Exclusive C14N.\n\nR5412 Any SIG_TRANSFORMS MUST contain as its last child a SIG_TRANSFORM with an Algorithm attribute with a value of\n\n\"http://www.w3.org/2001/10/xml-exc-c14n#\" or\n\n\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform\" or\n\n\"http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Content-Signature-Transform\" or\n\n\"http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Complete-Signature-Transform\".\n\nFor example,\n\nINCORRECT:\n\n<!-- This example is incorrect because the ds:Reference element does not have a ds:Transforms child element -->\n\n<ds:Reference URI='#TheBody'>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>VEPKwzfPGOxh2OUpoK0bcl58jtU=</ds:DigestValue>\n\n</ds:Reference>\n\nCORRECT:\n\n<ds:Reference URI='#TheBody'>\n\n<ds:Transforms>\n\n<ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#'/>\n\n</ds:Transform>\n\n</ds:Transforms>\n\n<ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' />\n\n<ds:DigestValue>+VTJraRYFT3pl7Z4uAWhmr5+bf4=</ds:DigestValue>\n\n</ds:Reference>\n\n9.3.5 Inclusive Namespaces with Exclusive-C14N Transform\n\nR5407 Any SIG_TRANSFORM with an Algorithm attribute with a value of \"http://www.w3.org/2001/10/xml-exc-c14n#\""
    }
}