{
    "id": "correct_foundationPlace_00031_3",
    "rank": 29,
    "data": {
        "url": "https://github.com/kantega/quarkus-ad",
        "read_more_link": "",
        "language": "en",
        "title": "ad: Role Based Access Control with Azure AD and Quarkus OIDC",
        "top_image": "https://opengraph.githubassets.com/67965eb1a2448e7039ab091d68191f1d2e07c75e64278067c4d67c6320c9e9b9/kantega/quarkus-ad",
        "meta_img": "https://opengraph.githubassets.com/67965eb1a2448e7039ab091d68191f1d2e07c75e64278067c4d67c6320c9e9b9/kantega/quarkus-ad",
        "images": [
            "https://github.com/kantega/quarkus-ad/raw/master/doc/hello-qute.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/active-directory-front-page.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/app-registrations-empty.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/new-app-registration.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/app-registrations.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/app-registration-quarkus-ad.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/add-client-secret.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/new-client-secret.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/endpoints.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/consent.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/hello-user.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/add-optional-claim.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/add-microsoft-graph.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/claims-html.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/create-roles.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/assign-roles.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/assigned-roles.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/no-roles.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/roles.png",
            "https://github.com/kantega/quarkus-ad/raw/master/doc/forbidden.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Role Based Access Control with Azure AD and Quarkus OIDC - kantega/quarkus-ad",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/kantega/quarkus-ad",
        "text": "In this article we'll demonstrate how to connect your Quarkus application to Microsoft Azure Active Directory to authenticate and authorize users. We'll show how you can give users access to certain parts of your application by mapping Active Directory groups to application roles.\n\nIf you're already familiar with Azure AD and Quarkus OIDC and just want the gist of it, here's what you need to configure. Otherwise, read on below for a full tutorial.\n\nIn Azure AD, create an \"App registration\" for your Quarkus app, and create a client secret. Then add one or more app roles, and use Azure AD > Manage > Enterprise applications > Your app > Users and roles > Add user/group to assign users and/or groups to app roles. To return profile information such as Given Name and Family Name as claims, use Azure AD > Manage > App registrations > Your app > Token configuration and add claims to the ID token.\n\nConfigure your Quarkus application by adding this to application.properties:\n\nThis might be enough to get you started. If not, read on!\n\nCreate a new quarkus application using the code generation tool at code.quarkus.io. Be sure to select OpenID Connect and RESTEasy Qute. Click \"Generate your application\", and download the generated project as a zip file.\n\nDecompress and open the project in your favorite IDE. You can then start the application by running ./mvnw quarkus:dev\n\n$ ./mvnv quarkus:dev __ ____ __ _____ ___ __ ____ ______ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\ --\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/ 2021-10-08 14:23:46,994 INFO [io.quarkus] (Quarkus Main Thread) quarkus-ad 1.0.0-SNAPSHOT on JVM (powered by Quarkus 2.3.0.Final) started in 124.864s. Listening on: http://localhost:8080 2021-10-08 14:23:46,996 INFO [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated. 2021-10-08 14:23:47,003 INFO [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, oidc, qute, resteasy, resteasy-qute, security, smallrye-context-propagation, vertx]\n\nQuarkus will generate a class called SomePage which has a JAX-RS endpoint mapped to /some-page\n\n@Path(\"/some-page\") public class SomePage { private final Template page; public SomePage(Template page) { this.page = requireNonNull(page, \"page is required\"); } @GET @Produces(MediaType.TEXT_HTML) public TemplateInstance get(@QueryParam(\"name\") String name) { return page.data(\"name\", name); } }\n\nOpen http://localhost:8080/some-page and you should see the following page:\n\nTo enable OIDC within Active Directory, you need to register your application in the Azure portal. Log in to https://portal.azure.com. You can use your personal email address or your github account to log in. If you do, an empty Active Directory is set up for you. If you log in with your work account, you may find that there is already an Active Directory set up, which you may or may not have access to configuring.\n\nAfter logging in, navigate to the Azure Active Directory control panel using the menu in the top-left corner. It should look something like this:\n\nQuarkus needs three parameters to integrate with Active Directory. These are:\n\nquarkus.oidc.client-id quarkus.oidc.credentials.secret quarkus.oidc.auth-server-url\n\nTo create the values for these parameters, we first need to register our application with Azure AD. Navigate to Manage/App registrations in the menu on the left.\n\nSelect New registration, and fill inn the form. Use Quarkus AD as the application name. We'll also allow users from any organizational directory to log in.\n\nImportant: Register http://localhost:8080 as a redirect URI. As part of the logon process, users will be redirected from our application to Azure AD for authentication. We want to send them back to our application afterwards. Azure AD will not allow any redirect URLs that are not registered. When you deploy your application to another server (not localhost), you will need to add that URL as well. We'll come back to this later. For now, we'll stick with http://localhost:8080, since this will allow us to test the login flow.\n\nClick register. You should now be able to find the app registration by navigating to Manage/App registrations in the menu on the left.\n\nWe can now find the parameters we need to set up Quarkus OIDC. Click on Quarkus AD to display its details:\n\nThe first value we're looking for is the Application (client) ID. In our case, the value is 827523e9-c5f7-410a-a6e7-8db28d7e3647. Yours will be different.\n\nOpen application.properties and add the value for quarkus.oidc.client-id\n\nquarkus.oidc.client-id=827523e9-c5f7-410a-a6e7-8db28d7e3647 quarkus.oidc.credentials.secret=<todo> quarkus.oidc.auth-server-url=<todo>\n\nNext, click Add a certificate or secret, and then New client secret. Name it Quarkus AD client secret and click Add.\n\nYou should then see it in the list of client secrets:\n\nCopy the value (not the ID) to the clipboard using the small copy-button and set quarkus.oidc.credentials.secret to that value.\n\nquarkus.oidc.client-id=827523e9-c5f7-410a-a6e7-8db28d7e3647 quarkus.oidc.credentials.secret=<the value you just copied> quarkus.oidc.auth-server-url=<todo>\n\nThe last property we need is the Auth Server URL. You'll find that by navigating to Manage/App registrations and selecting Endpoints. The value we need is \"OpenID Connect Metadata document\", but only the part up to and including v2.0. Quarkus will add .well-known, etc, itself.\n\nCopy the value and set quarkus.oidc.auth-server-url in application.properties:\n\nquarkus.oidc.client-id=827523e9-c5f7-410a-a6e7-8db28d7e3647 quarkus.oidc.credentials.secret=<not shown> quarkus.oidc.auth-server-url=https://login.microsoftonline.com/22cff3d6-9eda-4664-8d70-c7597cc1b34a/v2.0\n\nReload http://localhost:8080/some-page. In the console, you should see the application restarting, and a line that says that Quarkus is discovering the OpenID Connect configuration\n\n2021-10-08 17:15:49,791 INFO [io.qua.oid.dep.dev.OidcDevConsoleProcessor] (build-5) OIDC Dev Console: discovering the provider metadata at https://login.microsoftonline.com/22cff3d6-9eda-4664-8d70-c7597cc1b34a/v2.0/.well-known/openid-configuration\n\nBefore we can enable authentication, we first need to set up the redirect URL. By default, Quarkus will ask Azure AD to redirect the user back to the URL they tried to access before authenticating. However, Azure AD only allows the application to redirect to a configured list of urls. While there is limited support for wildcards, the safest option is to simply redirect the user to an absolute url, and let Quarkus remember where the user wanted to go.\n\nOIDC supports three different flows. These are called Authorization Code Flow, Implicit Flow and Hybrid Flow. These are mapped to the application types WEB-APP, SERVICE and HYBRID in Quarkus OIDC. The main difference between these flows is whether tokens are exposed to the client. In our case, we're developing a server-side rendered web app.\n\nAdd the following to application.properties:\n\nquarkus.oidc.application-type=web_app quarkus.oidc.authentication.redirect-path=/ quarkus.oidc.authentication.restore-path-after-redirect=true\n\nTo force the user to log on, we need to enable authentication on the endpoint. In SomePage.java, add the @Authenticated annotation to the class. After Quarkus OIDC has authenticated the user, a SecurityIdentity is created. Since the page controller is request scoped, it is OK to inject the SecurityIdentity as an instance member. Make sure the page template also has access to the SecurityIdentity by adding it to the page data.\n\n@Path(\"/some-page\") @Authenticated public class SomePage { private final Template page; @Inject SecurityIdentity identity; public SomePage(Template page) { this.page = requireNonNull(page, \"page is required\"); } @GET @Produces(MediaType.TEXT_HTML) public TemplateInstance get(@QueryParam(\"name\") String name) { return page .data(\"name\", name) .data(\"identity\", identity); } }\n\nYou can then modify the html template to display the name of the user. In page.qute.html, add the following:\n\n<h1>Hello, {identity.principal.name}</h1>\n\nFinally, test it out by navigating to http://localhost:8080/some-page. You should be redirected to Azure AD and asked to log on. You may also be asked to consent to sharing your data with the application.\n\nIf all went well, you should see this page:\n\nIf all did not go well, you need a bit of debugging information. The first thing to do is to enable debug logging in the Quarkus OIDC plugin. Add the following to your application.properties:\n\nYou may also want to take a look at the actual JWT tokens received from Azure AD. One way to do it, is to intercept the SecurityIdentity creation process by implementing a SecurityIdentityAugmentor. I use it for logging the tokens as they are received, but you can also use it to add more information to the SecurityIdentity, for instance by querying a user database or parsing additional claims in the token.\n\nIf you add the TokenDebugger class to your project and refresh the page, you should see something like this on the console:\n\nLooking at the ID token we received above, we can see that the only information we get about the user is the email address and a few IDs. Our application can ask for more information from the ID provider (in this case, Azure AD) by modifying the scope parameter sent during login.\n\nBy default, Quarkus OIDC requests the openid scope from AD, but there are more scopes available in all OIDC implementations, and you can add custom scopes in most ID providers. For now, we'll ask for the three standard scopes, openid, profile and email. By asking for profile, we'll get basic profile information such as the user's name.\n\nOn the ID provider side of things, we'll need to configure which information to allow the application to ask for. In Azure AD, navigate to App registrations > Quarkus AD > Token configuration and click Add optional claim. We want to add email, given_name, and family name to the ID token.\n\nYou may be asked to turn on the Microsoft Graph permissions. If so, you need to accept.\n\nTo make Quarkus OIDC ask for the profile and email scopes, we need to add the following to application.properties. Note that the openid scope is always requested, so we don't need to specify it explicitly.\n\nquarkus.oidc.authentication.scopes=profile email\n\nReload http://localhost:8080/some-page, and you should see something resembling this in the logs:\n\nYou can then add some more info to the html page:\n\n<h1>Hello, {identity.principal.name}</h1> <p> Given Name: {identity.principal.getClaim(\"given_name\")} </p>\n\nNow that we know the user's identity, we can decide what they're allowed to do. To set up roles for your application, navigate to Manage > App registrations > Quarkus AD > App roles and create a new app role.\n\nTo assign roles to users, navigate to Manage > Enterprise Applications > Quarkus AD > Users and groups. Then click Add user/group. Select the users you want to assign a role, and select one role to assign.\n\nYou should see your assigned roles on the Users and roles screen afterwards.\n\nIf you log out and log back in, you should see that your token has been updated with the newly assigned roles:\n\nLet's try to display the roles on page.qute.html:\n\n<body> <h1>Hello, {identity.principal.name}</h1> <p> Given Name: {identity.principal.getClaim(\"given_name\")} </p> <h2>Roles</h2> <ul> {#if identity.roles} {#for role in identity.roles} <li>{role}</li> {/for} {#else} <li>No roles found!</li> {/if} </ul> </body> </html>\n\nUnfortunately, Quarkus cannot see any roles.\n\nBy default, Quarkus OIDC looks for roles in a claim called /groups. As we can see, Azure AD uses a claim called /roles. This can be configured by setting the following property in application.properties:\n\nquarkus.oidc.roles.role-claim-path=roles\n\nNow that we know the user's identity and their roles, we can finally use it for controlling access to our services. For a simple (but heavy handed) approach, you can annotate a resource with @RolesAllowed. Any users not in the listed roles will receive a 403 Forbidden reply.\n\nReplace the @Authenticated annotation in SomePage.java with @RolesAllowed(\"admin\") and refresh the page. Then experiment with requiring other roles that your user does not have, and you should get a blank page and the HTTP status 403 Forbidden.\n\n@Path(\"/some-page\") @RolesAllowed(\"admin\") public class SomePage { private final Template page; @Inject SecurityIdentity identity; ... }\n\nFor a more refined approach, you can use identity.hasRole(...) to display a more user-friendly page if the user does not have access.\n\nSomePage.java:\n\n@Path(\"/some-page\") @Authenticated public class SomePage { private final Template page; private final Template forbidden; @Inject SecurityIdentity identity; public SomePage(Template page, Template forbidden) { this.page = requireNonNull(page, \"page is required\"); this.forbidden = requireNonNull(forbidden, \"page is required\"); } @GET @Produces(MediaType.TEXT_HTML) public TemplateInstance get(@QueryParam(\"name\") String name) { if (identity.hasRole(\"root\")) { return page .data(\"name\", name) .data(\"identity\", identity); } else { return forbidden .data(\"identity\", identity); } } }\n\nsrc/main/resources/templates/forbidden.qute.html:\n\n<h1>Access denied</h1> <p> I'm sorry {identity.principal.getClaim(\"given_name\")}, but you do not have access to this page. </p>\n\nThen reload the page, and you should see something similar to this:\n\nWe've shown how to configure Azure AD and Quarkus OIDC to enable Role-based Access Control in your Quarkus apps. For more information about securing your Quarkus app, check out https://quarkus.io/guides/#security\n\nHappy hacking!"
    }
}