{
    "id": "correct_subsidiary_00116_0",
    "rank": 53,
    "data": {
        "url": "https://datatracker.ietf.org/doc/html/draft-ietf-spring-srv6-srh-compression-09",
        "read_more_link": "",
        "language": "en",
        "title": "Compressed SRv6 Segment List Encoding",
        "top_image": "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-card.png",
        "meta_img": "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-card.png",
        "images": [
            "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-nor-white.svg",
            "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-nor.svg",
            "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-nor-white.svg",
            "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-nor.svg",
            "https://analytics.ietf.org/piwik.php?idsite=7"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "W. Cheng",
            "Ed. China Mobile",
            "C. Filsfils Cisco Systems",
            "Z. Li Huawei Technologies",
            "B. Decraene Orange",
            "F. Clad",
            "Ed. Cisco Systems",
            "Weiqiang Cheng",
            "Clarence Filsfils",
            "Zhenbin Li"
        ],
        "publish_date": "2023-10-23T00:00:00",
        "summary": "",
        "meta_description": "Compressed SRv6 Segment List Encoding (Internet-Draft, 2023)",
        "meta_lang": "en",
        "meta_favicon": "https://static.ietf.org/dt/12.19.0/ietf/images/ietf-logo-nor-180.png",
        "meta_site_name": "IETF Datatracker",
        "canonical_link": "https://datatracker.ietf.org/doc/html/draft-ietf-spring-srv6-srh-compression-09",
        "text": "4.1. NEXT-C-SID Flavor\n\nA C-SID sequence using the NEXT-C-SID flavor comprises one or more C-SID containers. Each C-SID container is a fully formed 128-bit SID. It carries a Locator-Block followed by a series of C-SIDs. The Locator-Node and Function of the C-SID container are those of the first C-SID, and its Argument is the contiguous series of subsequent C-SIDs. The second C-SID is encoded in the most significant bits of the C-SID container Argument, the third C-SID is encoded in the bits of the Argument that immediately follow the second C-SID, and so on. When all C-SIDs have the same length, a C-SID container can carry up to K C-SIDs, where K is computed as floor((128-LBL)/LNFL). Each C-SID container for NEXT-C-SID is independent, such that contiguous C-SID containers in a C-SID sequence can be considered as separate C-SID sequences.¶\n\nThe last C-SID in the C-SID sequence is not required to have the NEXT-C-SID flavor. It can be bound to any behavior and flavor(s), including the REPLACE-C-SID flavor, as long as it meets the conditions defined in Section 6.¶\n\nThe structure of a SID with the NEXT-C-SID flavor is shown in Figure 1. The same structure is also that of a C-SID container carrying NEXT-C-SID SIDs.¶\n\nAn implementation SHOULD support a 32-bit Locator-Block length (LBL) and a 16-bit C-SID length (LNFL) for NEXT-C-SID flavor SIDs, and MAY support any other Locator-Block and C-SID length. A deployment SHOULD use a consistent Locator-Block length and C-SID length for all SIDs of the SR domain.¶\n\nThe Argument length (AL) for NEXT-C-SID flavor SIDs is equal to 128-LBL-LNFL.¶\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as a SID with the NEXT-C-SID flavor, the SR segment endpoint node applies the procedure specified in the one following subsection that corresponds to the SID behavior. If the SID also has the PSP, USP, or USD flavor, the procedure is modified as described in Section 4.1.7.¶\n\nAn SR segment endpoint node instantiating a SID with the NEXT-C-SID flavor MUST accept any Argument value for that SID.¶\n\nAt high level, for any SID with the NEXT-C-SID flavor, the SR segment endpoint node determines the next SID of the SID list as follows. If the Argument value of the active SID is non-zero, the SR segment endpoint node constructs the next SID from the active SID by copying the entire SID Argument value to the bits that immediately follow the Locator-Block, thus overwriting the active SID Locator-Node and Function with those of the next C-SID, and filling the least significant LNFL bits of the Argument with zeros. If the Argument value is 0, the SR segment endpoint node instead copies the next 128-bit Segment List entry from the SRH to the Destination Address field of the IPv6 header.¶\n\n4.1.1. End with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End SID with the NEXT-C-SID flavor, the procedure described in Section 4.1 of [RFC8986] is executed with the following modifications.¶\n\nThe below pseudocode is inserted between lines S01 and S02 of the SRH processing in Section 4.1 of [RFC8986]. In addition, this pseudocode is executed before processing any extension header that is not an SRH, a Hop-by-Hop header or a Destination Option header, or before processing the upper-layer header, whichever comes first.¶\n\nN01. If (DA.Argument != 0) { N02. If (IPv6 Hop Limit <= 1) { N03. Send an ICMP Time Exceeded message to the Source Address, Code 0 (Hop limit exceeded in transit), interrupt packet processing and discard the packet. N04. } N05. Copy the value of DA.Argument into the bits [LBL..(LBL+AL-1)] of the Destination Address. N06. Set the bits [(LBL+AL)..127] of the Destination Address to zero. N07. Decrement Hop Limit by 1. N08. Submit the packet to the egress IPv6 FIB lookup for transmission to the next destination. N09. }\n\n¶\n\nA rendering of the complete pseudocode is provided in Appendix B.1.¶\n\n4.1.2. End.X with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.X SID with the NEXT-C-SID flavor, the procedure described in Section 4.2 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.1.1 of this document is modified by replacing line N08 as shown below.¶\n\nN08. Submit the packet to the IPv6 module for transmission to the new destination via a member of J.\n\n¶\n\nThe resulting pseudocode is inserted between lines S01 and S02 of the SRH processing in Section 4.1 of [RFC8986] after applying the modification described in Section 4.2 of [RFC8986]. In addition, this pseudocode is executed before processing any extension header that is not an SRH, a Hop-by-Hop header or a Destination Option header, or before processing the upper-layer header, whichever comes first.¶\n\n4.1.3. End.T with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.T SID with the NEXT-C-SID flavor, the procedure described in Section 4.3 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.1.1 of this document is modified by replacing line N08 as shown below.¶\n\nN08.1. Set the packet's associated FIB table to T. N08.2. Submit the packet to the egress IPv6 FIB lookup for transmission to the new destination.\n\n¶\n\nThe resulting pseudocode is inserted between lines S01 and S02 of the SRH processing in Section 4.1 of [RFC8986] after applying the modification described in Section 4.3 of [RFC8986]. In addition, this pseudocode is executed before processing any extension header that is not an SRH, a Hop-by-Hop header or a Destination Option header, or before processing the upper-layer header, whichever comes first.¶\n\n4.1.4. End.B6.Encaps with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.B6.Encaps SID with the NEXT-C-SID flavor, the procedure described in Section 4.13 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.1.1 of this document is modified by replacing line N08 as shown below.¶\n\nN08.1. Push a new IPv6 header with its own SRH containing B. N08.2. Set the outer IPv6 SA to A. N08.3. Set the outer IPv6 DA to the first SID of B. N08.4. Set the outer Payload Length, Traffic Class, Flow Label, Hop Limit, and Next Header fields. N08.5. Submit the packet to the egress IPv6 FIB lookup for transmission to the next destination.\n\n¶\n\nThe resulting pseudocode is inserted between lines S01 and S02 of the SRH processing in Section 4.1 of [RFC8986] after applying the modification described in Section 4.13 of [RFC8986]. In addition, this pseudocode is executed before processing any extension header that is not an SRH, a Hop-by-Hop header or a Destination Option header, or before processing the upper-layer header, whichever comes first.¶\n\nSimilar to the base End.B6.Encaps SID defined in Section 4.13 of [RFC8986], the NEXT-C-SID flavor variant updates the Destination Address field of the inner IPv6 header to the next SID in the original segment list before encapsulating the packet with the segment list of SR Policy B. At the endpoint of SR Policy B, the encapsulation is removed and the inner packet is forwarded towards the exposed destination address, which already contains the next SID in the original segment list.¶\n\n4.1.5. End.B6.Encaps.Red with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.B6.Encaps.Red SID with the NEXT-C-SID flavor, the procedure described in Section 4.14 of [RFC8986] is executed with the same modifications as in Section 4.1.4 of this document.¶\n\n4.1.6. End.BM with NEXT-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.BM SID with the NEXT-C-SID flavor, the procedure described in Section 4.15 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.1.1 of this document is modified by replacing line N08 as shown below.¶\n\nN08.1. Push the MPLS label stack for B. N08.2. Submit the packet to the MPLS engine for transmission.\n\n¶\n\nThe resulting pseudocode is inserted between lines S01 and S02 of the SRH processing in Section 4.1 of [RFC8986] after applying the modification described in Section 4.15 of [RFC8986]. In addition, this pseudocode is executed before processing any extension header that is not an SRH, a Hop-by-Hop header or a Destination Option header, or before processing the upper-layer header, whichever comes first.¶\n\n4.1.7. Combination with PSP, USP and USD flavors\n\nPSP: The PSP flavor defined in Section 4.16.1 of [RFC8986] is unchanged when combined with the NEXT-C-SID flavor.¶\n\nUSP: The USP flavor defined in Section 4.16.2 of [RFC8986] is unchanged when combined with the NEXT-C-SID flavor.¶\n\nUSD: The USP flavor defined in Section 4.16.3 of [RFC8986] is unchanged when combined with the NEXT-C-SID flavor.¶\n\n4.2. REPLACE-C-SID Flavor\n\nA C-SID sequence using the REPLACE-C-SID flavor starts with a C-SID container in fully formed 128-bit SID format. The Locator-Block of this SID is the common Locator-Block for all the C-SIDs in the C-SID sequence, its Locator-Node and Function are those of the first C-SID, and its Argument carries the index of the current C-SID in the current C-SID container. The Argument value is initially 0. When more segments are present in the segment list, the C-SID sequence continues with one or more C-SID containers in packed format carrying the subsequent C-SIDs in the sequence. Each container in packed format is a 128-bit Segment List entry split into K \"positions\" of LNFL bits, where K is computed as floor(128/LNFL). If LNFL does not divide into 128 perfectly, a zero pad is added in the least significant bits of the C-SID container to fill the bits left over. The second C-SID in the C-SID sequence is encoded in the least significant bit position of the first C-SID container in packed format (position K-1), the third C-SID is encoded in position K-2, and so on.¶\n\nThe last C-SID in the C-SID sequence is not required to have the REPLACE-C-SID flavor. It can be bound to any behavior and flavor(s), including the NEXT-C-SID flavor, as long as it meets the conditions defined in Section 6.¶\n\nThe structure of a SID with the REPLACE-C-SID flavor is shown in Figure 2. The same structure is also that of the C-SID container for REPLACE-C-SID in fully formed 128-bit SID format.¶\n\nThe structure of a C-SID container for REPLACE-C-SID in packed format is shown in Figure 3.¶\n\nThe RECOMMENDED Locator-Block lengths (LBL) for REPLACE-C-SID flavor SIDs are 48, 56, 64, 72, or 80 bits, depending on the needs of the operator.¶\n\nThe REPLACE-C-SID flavor supports both 16- and 32-bit C-SID lengths (LNFL). A C-SID length of 32-bit is RECOMMENDED.¶\n\nAny other Locator-Block and C-SID length selection is possible, but may lead to suboptimal C-SID encoding in the C-SID containers (e.g., presence of padding bits).¶\n\nThe Argument length (AL) for REPLACE-C-SID flavor SIDs is equal to 128-LBL-LNFL. The index value is encoded in the least significant X bits of the Argument, where X is computed as ceil(log_2(128/LNFL)).¶\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as a SID with the REPLACE-C-SID flavor, the SR segment endpoint node applies the procedure specified in the one following subsection that corresponds to the SID behavior. If the SID also has the PSP, USP, or USD flavor, the procedure is modified as described in Section 4.2.8.¶\n\nAt high level, at the start of a C-SID sequence using the REPLACE-C-SID flavor, the first C-SID container in fully formed 128-bit SID format is copied to the Destination Address of the IPv6 header. Then, for any SID with the REPLACE-C-SID flavor, the SR segment endpoint node determines the next SID of the SID list as follows. When an SRH is present, the SR segment endpoint node decrements the index value in the Argument of the active SID if the index value is not 0 or, if it is 0, decrements the Segments Left value in the SRH and sets the index value in the Argument of the active SID to K-1. The updated index value indicates the position of the next C-SID within the C-SID container in packed format at the \"Segment List\" index \"Segments Left\" in the SRH. The SR segment endpoint node then constructs the next SID by copying this next C-SID to the bits that immediately follow the Locator-Block in the Destination Address field of the IPv6 header, thus overwriting the active SID Locator-Node and Function with those of the next C-SID. If no SRH is present, the SR segment endpoint node ignores the index value in the SID Argument (except End.DT2M, see Section 4.2.7) and processes the upper-layer header as per [RFC8986]. The C-SID sequence ends with a last C-SID in the last C-SID container that does not have the REPLACE-C-SID flavor, or with the special C-SID value 0, or when reaching the end of the segment list, whichever comes first.¶\n\n4.2.1. End with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End SID with the REPLACE-C-SID flavor, the SRH processing described in Section 4.1 of [RFC8986] is executed with the following modifications.¶\n\nLine S02 of SRH processing in Section 4.1 of [RFC8986] is replaced as follows.¶\n\nS02. If (Segments Left == 0 and (DA.Arg.Index == 0 or Segment List[0][DA.Arg.Index-1] == 0)) {\n\n¶\n\nLines S09 to S15 are replaced by the following pseudo code.¶\n\nR01. If (DA.Arg.Index != 0) { R02. If ((Last Entry > max_LE) or (Segments Left > Last Entry)) { R03. Send an ICMP Parameter Problem to the Source Address, Code 0 (Erroneous header field encountered), Pointer set to the Segments Left field, interrupt packet processing and discard the packet. R04. } R05. Decrement DA.Arg.Index by 1. R06. If (Segment List[Segments Left][DA.Arg.Index] == 0) { R07. Decrement Segments Left by 1. R08. Decrement IPv6 Hop Limit by 1. R09. Update IPv6 DA with Segment List[Segments Left] R10. Submit the packet to the egress IPv6 FIB lookup for transmission to the new destination. R11. } R12. } Else { R13. If((Last Entry > max_LE) or (Segments Left > Last Entry+1)){ R14. Send an ICMP Parameter Problem to the Source Address, Code 0 (Erroneous header field encountered), Pointer set to the Segments Left field, interrupt packet processing and discard the packet. R15. } R16. Decrement Segments Left by 1. R17. Set DA.Arg.Index to (floor(128/LNFL) - 1). R18. } R19. Decrement IPv6 Hop Limit by 1. R20. Write Segment List[Segments Left][DA.Arg.Index] into the bits [LBL..LBL+LNFL-1] of the Destination Address of the IPv6 header. R21. Submit the packet to the egress IPv6 FIB lookup for transmission to the new destination.\n\n¶\n\nThe upper-layer header processing described in Section 4.1.1 of [RFC8986] is unchanged.¶\n\nA rendering of the complete pseudocode is provided in Appendix B.2.¶\n\n4.2.2. End.X with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.X SID with the REPLACE-C-SID flavor, the procedure described in Section 4.2 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.2.1 of this document is modified by replacing line R10 and R21 as shown below.¶\n\nR10. Submit the packet to the IPv6 module for transmission to the new destination via a member of J.\n\n¶\n\nR21. Submit the packet to the IPv6 module for transmission to the new destination via a member of J.\n\n¶\n\nThe SRH processing in Section 4.2 of [RFC8986] is replaced with the resulting pseudocode. The upper-layer header processing is unchanged.¶\n\n4.2.3. End.T with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.T SID with the REPLACE-C-SID flavor, the procedure described in Section 4.3 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.2.1 of this document is modified by replacing line R10 and R21 as shown below.¶\n\nR10.1. Set the packet's associated FIB table to T. R10.2. Submit the packet to the egress IPv6 FIB lookup for transmission to the new destination.\n\n¶\n\nR21.1. Set the packet's associated FIB table to T. R21.2. Submit the packet to the egress IPv6 FIB lookup for transmission to the new destination.\n\n¶\n\nThe SRH processing in Section 4.3 of [RFC8986] is replaced with the resulting pseudocode. The upper-layer header processing is unchanged.¶\n\n4.2.4. End.B6.Encaps with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.B6.Encaps SID with the REPLACE-C-SID flavor, the procedure described in Section 4.13 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.2.1 of this document is modified by replacing line R10 and R21 as shown below.¶\n\nR10.1. Push a new IPv6 header with its own SRH containing B. R10.2. Set the outer IPv6 SA to A. R10.3. Set the outer IPv6 DA to the first SID of B. R10.4. Set the outer Payload Length, Traffic Class, Flow Label, Hop Limit, and Next Header fields. R10.5. Submit the packet to the egress IPv6 FIB lookup for transmission to the next destination.\n\n¶\n\nR21.1. Push a new IPv6 header with its own SRH containing B. R21.2. Set the outer IPv6 SA to A. R21.3. Set the outer IPv6 DA to the first SID of B. R21.4. Set the outer Payload Length, Traffic Class, Flow Label, Hop Limit, and Next Header fields. R21.5. Submit the packet to the egress IPv6 FIB lookup for transmission to the next destination.\n\n¶\n\nThe SRH processing in Section 4.13 of [RFC8986] is replaced with the resulting pseudocode. The upper-layer header processing is unchanged.¶\n\n4.2.5. End.B6.Encaps.Red with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.B6.Encaps.Red SID with the REPLACE-C-SID flavor, the procedure described in Section 4.14 of [RFC8986] is executed with the same modifications as in Section 4.2.4 of this document.¶\n\n4.2.6. End.BM with REPLACE-C-SID\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.BM SID with the REPLACE-C-SID flavor, the procedure described in Section 4.15 of [RFC8986] is executed with the following modifications.¶\n\nThe pseudocode in Section 4.2.1 of this document is modified by replacing line R10 and R21 as shown below.¶\n\nR10.1. Push the MPLS label stack for B. R10.2. Submit the packet to the MPLS engine for transmission.\n\n¶\n\nR21.1. Push the MPLS label stack for B. R21.2. Submit the packet to the MPLS engine for transmission.\n\n¶\n\nThe SRH processing in Section 4.15 of [RFC8986] is replaced with the resulting pseudocode. The upper-layer header processing is unchanged.¶\n\n4.2.7. End.DX and End.DT with REPLACE-C-SID\n\nNew behaviors of End.DX6, End.DX4, End.DT6, End.DT4, End.DT46, End.DX2, End.DX2V, End.DT2U, or End.DT2M [RFC8986] with REPLACE-C-SID flavor are also defined in this draft. These new behaviors can be used to indicate the capability of compression of Node and SID, which are required in path computation and compressed SID list encoding.¶\n\nWhen processing an IPv6 packet that matches a FIB entry locally instantiated as an End.DX6, End.DX4, End.DT6, End.DT4, End.DT46, End.DX2, End.DX2V, End.DT2U or End.DT2M SID with the REPLACE-C-SID flavor, the procedures described in [RFC8986] are executed. For End.DT2M with REPLACE-C-SID flavor, when it is used as an uncompressed 128-bit SID, the Arg.FE2 is a 16-bit value located in the significant bits of the Argument. When it is used as a C-SID, the Arg.FE2 of the SID is carried in the end of the C-SID sequence. For 16-bit compression, Arg.FE2 is carried in the last 16-bits of the C-SID sequence. For 32-bit compression, Arg.FE2 is carried in the least significant 16 bits of the last 32-bits of the C-SID sequence. When the END.DT2M C-SID and its Argument cannot be included in the last container, the SID MUST NOT be compressed and MUST be encoded as a 128-bit uncompressed END.DT2M SID. When processing an IPv6 packet that matches a FIB entry locally instantiated as an END.DT2M with REPLACE-C-SID flavor, the node can obtain the Arg.FE2 from the DA.Argument if DA.Arg.Index is zero, or from the container if DA.Arg.Index is non zero.¶\n\n4.2.8. Combination with PSP, USP, and USD flavors\n\nPSP: When combined with the REPLACE-C-SID flavor, the additional PSP flavor instructions defined in Section 4.16.1.2 of [RFC8986] are inserted after line R09 and R20 of the pseudocode in Section 4.2.1, and the first line of the inserted instructions after R20 is modified as follows.¶\n\nR20.1. If (Segments Left == 0 and (DA.Arg.Index == 0 or Segment List[0][DA.Arg.Index-1] == 0)) {\n\n¶\n\nUSP: When combined with the REPLACE-C-SID flavor, the line S03 of the pseudocode in Section 4.2.1 are substituted by the USP flavor instructions S03.1 to S03.4 defined in Section 4.16.2 of [RFC8986]. Note that S03 is shown in the complete pseudocode in Appendix B.2.¶\n\nUSD: The USD flavor defined in Section 4.16.3 of [RFC8986] is unchanged when combined with the REPLACE-C-SID flavor.¶\n\n5.4. Recommended Installation of C-SIDs in FIB\n\nAn SR segment endpoint node instantiating a NEXT-C-SID or REPLACE-C-SID flavor SID SHOULD install the corresponding FIB entry to match only the Locator and Function parts of the SID (i.e., with a prefix length of LBL + LNL + FL). Any other mean of identifying a locally instantiated SID is possible as long as it is compliant with Section 4.3 of [RFC8754] and accepts all valid Argument values for the SID.¶\n\nIn addition, an SR segment endpoint node instantiating NEXT-C-SID flavor SIDs from both GIB and LIB MAY install combined \"Global + Local\" FIB entries to match a sequence of global and local C-SIDs in a single LPM lookup.¶\n\nFor example, let us consider an SR segment endpoint node 10 instantiating the following two NEXT-C-SID flavor SIDs according to the C-SID length, Locator-Block length, and GIB/LIB recommendations in this section.¶\n\n2001:db8:b1:10:: bound to the End behavior with the NEXT-C-SID flavor is instantiated from GIB with¶\n\nLocator-Block length (LBL) = 48 (Locator-Block value 0x20010db800b1),¶\n\nLocator-Node length (LNL) = 16 (Locator-Node value 0x0010),¶\n\nFunction length (FL) = 0, and¶\n\nArgument length (AL) = 64.¶\n\n2001:db8:b1:f123:: bound to the End.X behavior for its local IGP adjacency 123 with the NEXT-C-SID flavor is instantiated from LIB with¶\n\nLocator-Block length (LBL) = 48 (Locator-Block value 0x20010db800b1),¶\n\nLocator-Node length (LNL) = 0,¶\n\nFunction length (FL) = 16 (Function value 0xf123), and¶\n\nArgument length (AL) = 64.¶\n\nFor SID 2001:db8:b1:10::, Node 10 would install the FIB entry 2001:db8:b1:10::/64 bound the End SID with the NEXT-C-SID flavor.¶\n\nFor SID 2001:db8:b1:f123::, Node 10 would install the FIB entry 2001:db8:b1:f123::/64 bound the End.X SID for adjacency 123 with the NEXT-C-SID flavor.¶\n\nIn addition, Node 10 may also install the combined FIB entry 2001:db8:b1:10:f123::/80 bound the End.X SID for adjacency 123 with the NEXT-C-SID flavor.¶\n\nAs another example, let us consider an SR segment endpoint node 20 instantiating the following two REPLACE-C-SID flavor SIDs according to the C-SID length, Locator-Block length, and GIB/LIB recommendations in this section.¶\n\n2001:db8:b2:20:1:: from GIB with Locator-Block length (LBL) = 48, Locator-Node length (LNL) = 16, Function length (FL) = 16, Argument length (AL) = 48, and bound to the End behavior with the REPLACE-C-SID flavor.¶\n\n2001:db8:b2:20:123:: from GIB with Locator-Block length (LBL) = 48, Locator-Node length (LNL) = 16, Function length (FL) = 16, Argument length (AL) = 48, and bound to the End.X behavior for its local IGP adjacency 123 with the REPLACE-C-SID flavor.¶\n\nFor SID 2001:db8:b2:20:1::, Node 20 would install the FIB entry 2001:db8:b2:20:1::/80 bound the End SID with the REPLACE-C-SID flavor.¶\n\nFor SID 2001:db8:b2:20:123::, Node 20 would install the FIB entry 2001:db8:b2:20:123::/80 bound the End.X SID for adjacency 123 with the REPLACE-C-SID flavor.¶\n\n6.2. Segment List Compression\n\nAn SR source node MAY compress a segment list when it includes NEXT-C-SID and/or REPLACE-C-SID flavor SIDs in order to reduce the packet header length.¶\n\nThe segment list that the SR source node pushes onto the packet MUST comply with the rules in Section 6.3 and Section 6.4 and result in a path equivalent to the original segment list.¶\n\nIf an SR source node chooses to compress the segment list, one method is described below for illustrative purposes. Any other method producing a compressed segment list of equal or shorter length than the uncompressed segment list is compliant.¶\n\nThis method walks the uncompressed segment list and compresses each series of consecutive NEXT-C-SID flavor SIDs and each series of consecutive REPLACE-C-SID flavor SIDs.¶\n\nWhen the compression method encounters a series of one or more consecutive compressible NEXT-C-SID flavor SIDs, it compresses the series as follows. A SID with the NEXT-C-SID flavor is compressible if its structure is known to the SR source node and its Argument value is 0.¶\n\nS01. Initialize a C-SID container equal to the first SID in the series, and initialize the remaining capacity of the C-SID container to the AL of that SID S02. For each subsequent SID in the series { S03. If the current SID Locator-Block matches that of the C-SID container and the current SID LNFL is lower than or equal to the remaining capacity of the C-SID container { S04. Copy the current SID Locator-Node and Function to the most significant remaining Argument bits of the C-SID container and decrement the remaining capacity by LNFL S05. } Else { S06. Push the C-SID container onto the compressed segment list S07. Initialize a new C-SID container equal to the current SID in the series, and initialize the remaining capacity of the C-SID container to the AL of that SID S08. } // End If S09. } // End For S10. If at least one SID remains in the uncompressed segment list (following the series of compressible NEXT-C-SID flavor SIDs){ S11. Set S to the next SID in the uncompressed segment list S12. If S is advertised with a SID structure, and the Locator-Block of S matches that of the C-SID container, and the sum of the Locator-Node, Function, and Argument length of S is lower than or equal to the remaining capacity of the C-SID container { S13. Copy the Locator-Node, Function, and Argument of S to the most significant remaining Argument bits of the C-SID container S14. } // End If S15. } // End If S16. Push the C-SID container onto the compressed segment list\n\n¶\n\nWhen the compression method encounters a series of REPLACE-C-SID flavor SIDs of the same C-SID length in the uncompressed segment list, it compresses the series as per the following high-level pseudo code. A compression checking function ComCheck(F, S) is defined to check if two SIDs F and S share the same SID structure and Locator-Block value, and if S has either no Argument or an Argument with value 0. If the check passes, then ComCheck(F,S) returns true.¶\n\nS01. Initialize the first C-SID container in full SID format equal to the first SID in the series S02. Initialize the second C-SID container in packed format if there are more than one SIDs, and initialize the remaining capacity of the C-SID container to 128 bits S03. For each subsequent SID in the uncompressed segment list { S04. Set S to the current SID in the uncompressed segment list S05. If ComCheck(First SID, S) { S06. If the LNFL of S is lower than or equal to the remaining capacity of the C-SID container { S07. Copy the Locator-Node and Function of S to the least significant remaining bits of the C-SID container and decrement the remaining capacity by LNFL // Note S08. } Else { S09. Push the C-SID container onto the compressed segment list S10. Initialize a new C-SID container in packed format with all bits set to 0 S11 Copy the Locator-Node and Function of S to the least significant remaining bits of the C-SID container and decrement the remaining capacity by LNFL // Note S12. } S13. If S is not a REPLACE-C-SID flavor SID, then break S14. } Else { S15. Break S16. } // End If S17. } // End For S18. Push the C-SID container (if it is not empty) onto the compressed segment list\n\n¶\n\nIn all remaining cases (i.e., when the compression method encounters a SID in the uncompressed segment list that is not handled by any of the previous subroutines), it pushes this SID as is onto the compressed segment list.¶\n\nRegardless of how a compressed segment list is produced, it is encoded in the IPv6 header and optional SRH as described in Section 4.1 and 4.1.1 of [RFC8754]. The text is reproduced below for reference.¶\n\nA source node steers a packet into an SR Policy. If the SR Policy results in a Segment List containing a single segment, and there is no need to add information to the SRH flag or add TLV; the DA is set to the single Segment List entry, and the SRH MAY be omitted.¶\n\nWhen needed, the SRH is created as follows:¶\n\nThe Next Header and Hdr Ext Len fields are set as specified in [RFC8200].¶\n\nThe Routing Type field is set to 4.¶\n\nThe DA of the packet is set with the value of the first segment.¶\n\nThe first element of the SRH Segment List is the ultimate segment. The second element is the penultimate segment, and so on.¶\n\nThe Segments Left field is set to n-1, where n is the number of elements in the SR Policy.¶\n\nThe Last Entry field is set to n-1, where n is the number of elements in the SR Policy.¶\n\nTLVs (including HMAC) may be set according to their specification.¶\n\nThe packet is forwarded toward the packet's Destination Address (the first segment).¶\n\nWhen a source does not require the entire SID list to be preserved in the SRH, a reduced SRH may be used.¶\n\nA reduced SRH does not contain the first segment of the related SR Policy (the first segment is the one already in the DA of the IPv6 header), and the Last Entry field is set to n-2, where n is the number of elements in the SR Policy.¶"
    }
}