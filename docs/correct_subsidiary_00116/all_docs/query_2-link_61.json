{
    "id": "correct_subsidiary_00116_2",
    "rank": 61,
    "data": {
        "url": "https://help.axis.com/axis-os-knowledge-base",
        "read_more_link": "",
        "language": "en",
        "title": "AXIS OS Knowledge base",
        "top_image": "https://help.axis.com/favicon.svg",
        "meta_img": "https://help.axis.com/favicon.svg",
        "images": [
            "https://help.axis.com/_nuxt/img/logo.e9fc14a.svg",
            "https://help.axis.com/image/t10200439.png",
            "https://help.axis.com/image/t10200440.png",
            "https://help.axis.com/image/t10207955.jpg",
            "https://help.axis.com/image/t10207956.jpg",
            "https://help.axis.com/image/t10207957.jpg",
            "https://help.axis.com/image/t10172720.png",
            "https://help.axis.com/image/t10192331.jpg",
            "https://help.axis.com/image/t10158274.png",
            "https://help.axis.com/image/t10158275.png",
            "https://help.axis.com/image/t10158276.png",
            "https://help.axis.com/image/t10158277.png",
            "https://help.axis.com/image/t10158275.png",
            "https://help.axis.com/image/t10158276.png",
            "https://help.axis.com/image/t10158275.png",
            "https://help.axis.com/image/t10158331.png",
            "https://help.axis.com/image/t10158278.png",
            "https://help.axis.com/image/t10158279.png",
            "https://help.axis.com/image/t10158278.png",
            "https://help.axis.com/image/t10158276.png",
            "https://help.axis.com/image/t10158280.png",
            "https://help.axis.com/image/t10158274.png",
            "https://help.axis.com/image/t10158275.png",
            "https://help.axis.com/image/t10165477.png",
            "https://help.axis.com/image/t10165488.png",
            "https://help.axis.com/image/t10165489.png",
            "https://help.axis.com/image/t10171566.png",
            "https://help.axis.com/image/t10171567.png",
            "https://help.axis.com/image/t10171568.png",
            "https://help.axis.com/image/t10171569.png",
            "https://help.axis.com/image/t10171570.png",
            "https://help.axis.com/image/t10171571.png",
            "https://help.axis.com/image/t10165506.png",
            "https://help.axis.com/image/t10165507.png",
            "https://help.axis.com/image/t10171907.png",
            "https://help.axis.com/image/t10171908.png",
            "https://help.axis.com/image/t10171909.png",
            "https://help.axis.com/image/t10175776.png",
            "https://help.axis.com/image/t10175777.png",
            "https://help.axis.com/image/t10175772.png",
            "https://help.axis.com/image/t10175773.png",
            "https://help.axis.com/image/t10175774.png",
            "https://help.axis.com/image/t10175775.png",
            "https://help.axis.com/image/t10175778.png",
            "https://help.axis.com/image/t10175779.png",
            "https://help.axis.com/image/t10175780.png",
            "https://help.axis.com/image/t10175781.png",
            "https://help.axis.com/image/t10175782.png",
            "https://help.axis.com/image/t10175783.jpg",
            "https://help.axis.com/image/t10175784.jpg",
            "https://help.axis.com/image/t10175785.jpg",
            "https://help.axis.com/image/t10177669.png",
            "https://help.axis.com/image/t10177670.png",
            "https://help.axis.com/image/t10177671.png",
            "https://help.axis.com/image/t10177685.png",
            "https://help.axis.com/image/t10177672.png",
            "https://help.axis.com/image/t10177877.jpg",
            "https://help.axis.com/image/t10177878.jpg",
            "https://help.axis.com/image/t10177879.jpg",
            "https://help.axis.com/image/t10177880.jpg",
            "https://help.axis.com/image/t10176242.jpg",
            "https://help.axis.com/image/t10176243.jpg",
            "https://help.axis.com/image/t10176244.jpg",
            "https://help.axis.com/image/t10176245.jpg",
            "https://help.axis.com/image/t10191351.jpg",
            "https://help.axis.com/image/t10191352.jpg",
            "https://help.axis.com/image/t10164505.png",
            "https://help.axis.com/image/t10164506.png",
            "https://help.axis.com/image/t10164514.png",
            "https://help.axis.com/image/t10164508.png",
            "https://help.axis.com/image/t10164509.png",
            "https://help.axis.com/image/t10164510.png",
            "https://help.axis.com/image/t10164515.png",
            "https://help.axis.com/image/t10164518.png",
            "https://help.axis.com/image/t10164513.png",
            "https://help.axis.com/image/t10164000.png",
            "https://help.axis.com/image/t10164001.png",
            "https://help.axis.com/image/t10164002.png",
            "https://help.axis.com/image/t10164014.png",
            "https://help.axis.com/image/t10164065.png",
            "https://help.axis.com/image/t10164066.png",
            "https://help.axis.com/image/t10202696.png",
            "https://help.axis.com/image/t10204004.png",
            "https://help.axis.com/image/t10203565.png",
            "https://help.axis.com/image/t10203564.png",
            "https://help.axis.com/image/t10203566.png",
            "https://help.axis.com/image/t10203567.png",
            "https://help.axis.com/image/t10203568.png",
            "https://help.axis.com/image/t10203569.png",
            "https://help.axis.com/image/t10203570.png",
            "https://help.axis.com/image/t10203571.png",
            "https://help.axis.com/image/t10203572.png",
            "https://help.axis.com/image/t10203573.png",
            "https://help.axis.com/image/t10203574.png",
            "https://help.axis.com/image/t10203575.png",
            "https://help.axis.com/image/t10203576.png",
            "https://help.axis.com/image/t10190175.png",
            "https://help.axis.com/image/t10190176.png",
            "https://help.axis.com/image/t10192388.png",
            "https://help.axis.com/image/t10192387.png",
            "https://help.axis.com/image/t10192389.png",
            "https://help.axis.com/image/t10163594.png",
            "https://help.axis.com/image/t10174655.jpg",
            "https://help.axis.com/image/t10174656.jpg",
            "https://help.axis.com/image/t10174667.jpg",
            "https://help.axis.com/image/t10174668.jpg",
            "https://help.axis.com/image/t10174669.jpg",
            "https://help.axis.com/image/t10174670.jpg",
            "https://help.axis.com/image/t10174671.jpg",
            "https://help.axis.com/image/t10174672.jpg",
            "https://help.axis.com/image/t10174673.jpg",
            "https://help.axis.com/image/t10174674.jpg",
            "https://help.axis.com/image/t10164928.png",
            "https://help.axis.com/image/t10164929.png",
            "https://help.axis.com/image/t10158621.png",
            "https://help.axis.com/image/t10158622.png",
            "https://help.axis.com/image/t10158623.png",
            "https://help.axis.com/image/t10158624.png",
            "https://help.axis.com/image/t10158625.png",
            "https://help.axis.com/image/t10158739.png",
            "https://help.axis.com/image/t10158740.png",
            "https://help.axis.com/image/t10158741.png",
            "https://help.axis.com/image/t10158762.png",
            "https://help.axis.com/image/t10158763.png",
            "https://help.axis.com/image/t10159924.png",
            "https://help.axis.com/image/t10159925.png",
            "https://help.axis.com/image/t10159926.png",
            "https://help.axis.com/image/t10159928.png",
            "https://help.axis.com/image/t10160043.png",
            "https://help.axis.com/image/t10160054.png",
            "https://help.axis.com/image/t10160186.png",
            "https://help.axis.com/image/t10160217.png",
            "https://help.axis.com/image/t10160218.png",
            "https://help.axis.com/image/t10160219.png",
            "https://help.axis.com/image/t10160428.png",
            "https://help.axis.com/image/t10160429.png",
            "https://help.axis.com/image/t10160430.png",
            "https://help.axis.com/image/t10160461.png",
            "https://help.axis.com/image/t10160462.png",
            "https://help.axis.com/image/t10160463.png",
            "https://help.axis.com/image/t10160464.png",
            "https://help.axis.com/image/t10160465.png",
            "https://help.axis.com/image/t10160487.png",
            "https://help.axis.com/image/t10161156.png",
            "https://help.axis.com/image/t10161157.png",
            "https://help.axis.com/image/t10161158.png",
            "https://help.axis.com/image/t10161159.png",
            "https://help.axis.com/image/t10161160.png",
            "https://help.axis.com/image/t10160488.png",
            "https://help.axis.com/image/t10160489.png",
            "https://help.axis.com/image/t10161181.png",
            "https://help.axis.com/image/t10161199.png",
            "https://help.axis.com/image/t10161182.png",
            "https://help.axis.com/image/t10161184.png",
            "https://help.axis.com/image/t10161195.png",
            "https://help.axis.com/image/t10161200.png",
            "https://help.axis.com/image/t10161196.png",
            "https://help.axis.com/image/t10161201.png",
            "https://help.axis.com/image/t10161203.png",
            "https://help.axis.com/image/t10161205.png",
            "https://help.axis.com/image/t10161202.png",
            "https://help.axis.com/image/t10161204.png",
            "https://help.axis.com/image/t10162586.png",
            "https://help.axis.com/image/t10162587.png",
            "https://help.axis.com/image/t10209650.png",
            "https://help.axis.com/image/t10209651.png",
            "https://help.axis.com/image/t10209652.png",
            "https://help.axis.com/image/t10209653.png",
            "https://help.axis.com/image/t10209654.png",
            "https://help.axis.com/image/t10209655.png",
            "https://help.axis.com/image/t10209656.png",
            "https://help.axis.com/image/t10209657.png",
            "https://help.axis.com/image/t10209658.png",
            "https://help.axis.com/image/t10209659.png",
            "https://help.axis.com/image/t10209660.png",
            "https://help.axis.com/image/t10209661.png",
            "https://help.axis.com/image/t10209662.png",
            "https://help.axis.com/image/t10209663.png",
            "https://help.axis.com/image/t10209664.png",
            "https://help.axis.com/image/t10209665.png",
            "https://help.axis.com/image/t10209666.png",
            "https://help.axis.com/image/t10161226.png",
            "https://help.axis.com/image/t10161230.png",
            "https://help.axis.com/image/t10161231.png",
            "https://help.axis.com/image/t10161232.png",
            "https://help.axis.com/image/t10161243.png",
            "https://help.axis.com/image/t10161244.png",
            "https://help.axis.com/image/t10161245.png",
            "https://help.axis.com/image/t10161755.png",
            "https://help.axis.com/image/t10161756.png",
            "https://help.axis.com/image/t10161248.png",
            "https://help.axis.com/image/t10161249.png",
            "https://help.axis.com/image/t10161757.png",
            "https://help.axis.com/image/t10161758.png",
            "https://help.axis.com/image/t10161759.png",
            "https://help.axis.com/image/t10161253.png",
            "https://help.axis.com/image/t10161254.png",
            "https://help.axis.com/image/t10161255.png",
            "https://help.axis.com/image/t10161256.png",
            "https://help.axis.com/image/t10161257.png",
            "https://help.axis.com/image/t10161348.png",
            "https://help.axis.com/image/t10161349.png",
            "https://help.axis.com/image/t10161760.png",
            "https://help.axis.com/image/t10161761.png",
            "https://help.axis.com/image/t10161355.png",
            "https://help.axis.com/image/t10161353.png",
            "https://help.axis.com/image/t10161354.png",
            "https://help.axis.com/image/t10161390.png",
            "https://help.axis.com/image/t10161391.png",
            "https://help.axis.com/image/t10161392.png",
            "https://help.axis.com/image/t10161393.png",
            "https://help.axis.com/image/t10161394.png",
            "https://help.axis.com/image/t10161395.png",
            "https://help.axis.com/image/t10161396.png",
            "https://help.axis.com/image/t10161397.png",
            "https://help.axis.com/image/t10161418.png",
            "https://help.axis.com/image/t10161421.png",
            "https://help.axis.com/image/t10161794.png",
            "https://help.axis.com/image/t10161795.png",
            "https://help.axis.com/image/t10161796.png",
            "https://help.axis.com/image/t10161797.png",
            "https://help.axis.com/image/t10161798.png",
            "https://help.axis.com/image/t10161799.png",
            "https://help.axis.com/image/t10161457.png",
            "https://help.axis.com/image/t10161458.png",
            "https://help.axis.com/image/t10161800.png",
            "https://help.axis.com/image/t10161801.png",
            "https://help.axis.com/image/t10161802.png",
            "https://help.axis.com/image/t10161803.png",
            "https://help.axis.com/image/t10161454.png",
            "https://help.axis.com/image/t10161455.png",
            "https://help.axis.com/image/t10161456.png",
            "https://help.axis.com/image/t10161549.png",
            "https://help.axis.com/image/t10161550.png",
            "https://help.axis.com/image/t10161551.png",
            "https://help.axis.com/image/t10161552.png",
            "https://help.axis.com/image/t10161555.png",
            "https://help.axis.com/image/t10161556.png",
            "https://help.axis.com/image/t10161587.png",
            "https://help.axis.com/image/t10161588.png",
            "https://help.axis.com/image/t10161589.png",
            "https://help.axis.com/image/t10161590.png",
            "https://help.axis.com/image/t10161591.png",
            "https://help.axis.com/image/t10161592.png",
            "https://help.axis.com/image/t10161593.png",
            "https://help.axis.com/image/t10161594.png",
            "https://help.axis.com/image/t10161595.png",
            "https://help.axis.com/image/t10161596.png",
            "https://help.axis.com/image/t10161597.png",
            "https://help.axis.com/image/t10161608.png",
            "https://help.axis.com/image/t10161611.png",
            "https://help.axis.com/image/t10161612.png",
            "https://help.axis.com/image/t10161628.png",
            "https://help.axis.com/image/t10161629.png",
            "https://help.axis.com/image/t10161613.png",
            "https://help.axis.com/image/t10161614.png",
            "https://help.axis.com/image/t10161615.png",
            "https://help.axis.com/image/t10198854.jpg",
            "https://help.axis.com/image/t10198855.jpg",
            "https://help.axis.com/image/t10198923.jpg",
            "https://help.axis.com/image/t10198922.jpg",
            "https://help.axis.com/image/t10198921.jpg",
            "https://help.axis.com/image/t10198926.jpg",
            "https://help.axis.com/image/t10198925.jpg",
            "https://help.axis.com/image/t10198924.jpg",
            "https://help.axis.com/image/t10198958.jpg",
            "https://help.axis.com/image/t10198957.jpg",
            "https://help.axis.com/image/t10199042.jpg",
            "https://help.axis.com/image/t10199043.jpg",
            "https://help.axis.com/image/t10199048.jpg",
            "https://help.axis.com/image/t10199046.jpg",
            "https://help.axis.com/image/t10199044.jpg",
            "https://help.axis.com/image/t10199045.jpg",
            "https://help.axis.com/image/t10199050.jpg",
            "https://help.axis.com/image/t10199051.jpg",
            "https://help.axis.com/image/t10199047.jpg",
            "https://help.axis.com/image/t10199266.jpg",
            "https://help.axis.com/image/t10199263.jpg",
            "https://help.axis.com/image/t10199264.jpg",
            "https://help.axis.com/image/t10199265.jpg",
            "https://help.axis.com/image/t10208497.jpg",
            "https://help.axis.com/image/t10208498.jpg",
            "https://help.axis.com/image/t10208499.jpg",
            "https://help.axis.com/image/t10208500.jpg",
            "https://help.axis.com/image/t10201512.jpg",
            "https://help.axis.com/image/t10199290.jpg",
            "https://help.axis.com/image/t10199292.jpg",
            "https://help.axis.com/image/t10176851.png",
            "https://help.axis.com/image/t10176852.png",
            "https://help.axis.com/image/t10176853.png",
            "https://help.axis.com/image/t10176854.png",
            "https://help.axis.com/image/t10176855.png",
            "https://help.axis.com/image/t10176856.png",
            "https://help.axis.com/image/t10176857.png",
            "https://help.axis.com/image/t10176858.png",
            "https://help.axis.com/image/t10176859.png",
            "https://help.axis.com/image/t10202498.png",
            "https://help.axis.com/image/t10202499.png",
            "https://help.axis.com/image/t10202500.png",
            "https://help.axis.com/image/t10202501.png",
            "https://help.axis.com/image/t10202502.png",
            "https://help.axis.com/image/t10208114.png",
            "https://help.axis.com/image/t10202504.png",
            "https://help.axis.com/image/t10209161.png",
            "https://help.axis.com/image/t10209162.png",
            "https://help.axis.com/image/t10209163.png",
            "https://help.axis.com/image/t10209164.png",
            "https://help.axis.com/image/t10209161.png",
            "https://help.axis.com/image/t10209165.png",
            "https://help.axis.com/image/t10209166.png",
            "https://help.axis.com/image/t10209161.png",
            "https://help.axis.com/image/t10209167.png",
            "https://help.axis.com/image/t10209168.png",
            "https://help.axis.com/image/t10209169.png",
            "https://help.axis.com/image/t10209166.png",
            "https://help.axis.com/image/t10202506.png",
            "https://help.axis.com/image/t10202507.png",
            "https://help.axis.com/image/t10177029.png",
            "https://help.axis.com/image/t10177030.png",
            "https://help.axis.com/image/t10177031.png",
            "https://help.axis.com/image/t10177032.png",
            "https://help.axis.com/image/t10178437.png",
            "https://help.axis.com/image/t10178438.png",
            "https://help.axis.com/image/t10178439.png",
            "https://help.axis.com/image/t10185252.png",
            "https://help.axis.com/image/t10185253.png",
            "https://help.axis.com/image/t10185254.png",
            "https://help.axis.com/image/t10185255.png",
            "https://help.axis.com/image/t10185257.png",
            "https://help.axis.com/image/t10185256.png",
            "https://help.axis.com/image/t10185258.png",
            "https://help.axis.com/image/t10185260.png",
            "https://help.axis.com/image/t10185376.png",
            "https://help.axis.com/image/t10211309.png",
            "https://help.axis.com/image/t10211310.png",
            "https://help.axis.com/image/t10211311.png",
            "https://help.axis.com/image/t10211312.png",
            "https://help.axis.com/image/t10172771.png",
            "https://help.axis.com/image/t10172772.png",
            "https://help.axis.com/image/t10179364.jpg",
            "https://help.axis.com/image/t10179365.jpg",
            "https://help.axis.com/image/t10172796.png",
            "https://help.axis.com/image/t10172797.png",
            "https://help.axis.com/image/t10173255.png",
            "https://help.axis.com/image/t10173257.png",
            "https://help.axis.com/image/t10173256.png",
            "https://help.axis.com/image/t10173258.png",
            "https://help.axis.com/image/t10173259.png",
            "https://help.axis.com/image/t10173260.png",
            "https://help.axis.com/image/t10173261.png",
            "https://help.axis.com/image/t10184042.png",
            "https://help.axis.com/image/t10165369.png",
            "https://help.axis.com/image/t10165370.png",
            "https://help.axis.com/image/t10165371.png",
            "https://help.axis.com/image/t10165384.png",
            "https://help.axis.com/image/t10165385.png",
            "https://help.axis.com/image/t10165386.png",
            "https://help.axis.com/image/t10165387.png",
            "https://help.axis.com/image/t10165388.png",
            "https://help.axis.com/image/t10165389.png",
            "https://help.axis.com/image/t10165390.png",
            "https://help.axis.com/image/t10165391.png",
            "https://help.axis.com/image/t10165392.png",
            "https://help.axis.com/image/t10165393.png",
            "https://help.axis.com/image/t10165394.png",
            "https://help.axis.com/image/t10165395.png",
            "https://help.axis.com/image/t10165396.png",
            "https://help.axis.com/image/t10165397.png",
            "https://help.axis.com/image/t10165398.png",
            "https://help.axis.com/image/t10194623.jpg",
            "https://help.axis.com/image/t10164550.jpg",
            "https://help.axis.com/image/t10164563.jpg",
            "https://help.axis.com/image/t10164579.jpg",
            "https://help.axis.com/image/t10164565.jpg",
            "https://help.axis.com/image/t10164566.jpg",
            "https://help.axis.com/image/t10164567.jpg",
            "https://help.axis.com/image/t10164568.jpg",
            "https://help.axis.com/image/t10164552.jpg",
            "https://help.axis.com/image/t10164603.jpg",
            "https://help.axis.com/image/t10164618.jpg",
            "https://help.axis.com/image/t10164604.jpg",
            "https://help.axis.com/image/t10164619.jpg",
            "https://help.axis.com/image/t10164620.jpg",
            "https://help.axis.com/image/t10164605.jpg",
            "https://help.axis.com/image/t10165880.jpg",
            "https://help.axis.com/image/t10165901.png",
            "https://help.axis.com/image/t10165902.png",
            "https://help.axis.com/image/t10165903.png",
            "https://help.axis.com/image/t10165904.png",
            "https://help.axis.com/image/t10165905.png",
            "https://help.axis.com/image/t10165906.png",
            "https://help.axis.com/image/t10175131.png",
            "https://help.axis.com/image/t10175133.png",
            "https://help.axis.com/image/t10175134.png",
            "https://help.axis.com/image/t10175135.png",
            "https://help.axis.com/image/t10175136.png",
            "https://help.axis.com/image/t10175137.png",
            "https://help.axis.com/image/t10175138.png",
            "https://help.axis.com/image/t10175139.png",
            "https://help.axis.com/image/t10175140.png",
            "https://help.axis.com/image/t10175141.png",
            "https://help.axis.com/image/t10175142.png",
            "https://help.axis.com/image/t10175143.png",
            "https://help.axis.com/image/t10175144.png",
            "https://help.axis.com/image/t10175145.png",
            "https://help.axis.com/image/t10175146.png",
            "https://help.axis.com/image/t10175147.png",
            "https://help.axis.com/image/t10175148.png",
            "https://help.axis.com/image/t10185417.png",
            "https://help.axis.com/image/t10185418.png",
            "https://help.axis.com/image/t10193379.jpg",
            "https://help.axis.com/image/t10170970.png",
            "https://help.axis.com/image/t10170971.png",
            "https://help.axis.com/image/t10170972.png",
            "https://help.axis.com/image/t10170973.png",
            "https://help.axis.com/image/t10170974.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.svg",
        "meta_site_name": "",
        "canonical_link": "http://se-helpprod01x.se.axis.com/en-us/axis-os-knowledge-base",
        "text": "Summary\n\nIdentity and Access Management comprises policies for safeguarding that individuals and applications have access to system resources in the right context. For example, individuals should only interact with applications, and only applications access devices. IAM ensures integrity over time, for example, that passwords are not leaked, and that accesses are revoked when no longer needed.\n\nAxis recommends to use Axis' device management applications, AXIS Device Manager or AXIS Device Manager Extend, to set up and manage unique service accounts for applications accessing devices. The following sections further detail Axis' recommendations for identity and access management in video surveillance systems.\n\nIntroduction\n\nIdentity and Access Management (IAM) systems are responsible for managing identities, permissions, and access control within an organization. IAM makes sure that the right individuals and applications have the right level of access to the right system resources. This is a fundamental cybersecurity measure for preventing unauthorized access. One of the main challenges is maintaining integrity over time. This includes ensuring that passwords and other secrets have not been leaked, and that individuals and applications that should no longer have access indeed have their access revoked.\n\nIdentity and access management typically involves authentication, authorization, and privileges.\n\nAuthentication. Verifying that an entity is who or what it states to be.\n\nAuthorization. Controlling which entities are allowed to perform specific functions.\n\nPrivileges. Grouping of entities based on what they are authorized to do. Axis defines privileges as roles.\n\nThroughout the document, the terms user account and service account are used. Both are registered and governed through IAM.\n\nUser account. A user account is an account used by a person to access applications.\n\nService account. A service account is a non-human account used by an application to access devices. Service accounts are used in machine-to-machine communication or when an application needs to access devices in a trusted and automated manner.\n\nBest practices when working with service accounts\n\nFor maintaining integrity over time the following best practices of service account management are recommended.\n\nUse Axis' device management applications, AXIS Device Manager or AXIS Device Manager Extend, for service account management.\n\nSet up unique service accounts for each application accessing devices, as recommended in the AXIS OS Hardening Guide.\n\nSelect appropriate privilege to each service account.\n\nRemove service accounts that are no longer in use.\n\nAvoid persons accessing devices directly (if it is absolutely necessary, use a unique and temporary service account), the web-interface can be disabled as recommended in the AXIS OS Hardening Guide.\n\nEnsure high password complexity is given to avoid account leakage, see recommendations from the AXIS OS Hardening Guide.\n\nThe below diagrams visualize the best practices of access management in the device.\n\nThe device is exposed to following risks when using user accounts in the device:\n\nunauthorized personell accessing devices\n\nwrong level of authorization in different devices\n\nreuse of user account credentials leads to no audit traceability\n\npoor scalability with increasing number of devices\n\nDifferent sites and organizations can have different policies, including password policies. The setup of the system should accommodate these policies. Typically, each application should have its own credentials to devices. If the password is reused in devices, Axis recommends to rotate the password frequently.\n\nAuthorization and account privileges\n\nAxis devices support the roles Administrator, Operator, and Viewer, with different authorization levels. Axis recommends to set up an administrator account for management application that has access to the devices. This account should be unique for each application and not shared. Ideally, the password for this account should be generated by the management application itself and remain unknown to all individuals.\n\nIf direct access to devices is needed\n\nSome configurations may not be natively supported by the application and may need to be done through the devices web interface. Axis recommends to access the Axis device web interface through the seamless access provided by Axis' device management applications.\n\nIf there are strong reasons for allowing direct access to devices, Axis recommends to use temporary service account impersonalization with limited access. A new service account should be created on the device with the appropriate role for what needs to be done. Once the direct access is no longer needed, this service account should be deleted.\n\nLegacy access procedure (default user with default password)\n\nHistorically, Axis devices in their factory defaulted state have had their VAPIX and ONVIF interfaces activated for quick and easy out-of-the-box access on the network for clients connecting to them. This means that a client, such as an application or video management system, can access the Axis network device via anonymous ONVIF calls as well as the default VAPIX user \"root\" with the default password \"pass\", prior to having configured anything on the Axis network device itself.\n\nUpdated access procedure (default user with no default password)\n\nThe VAPIX and ONVIF interfaces have been disabled and the \"root\" VAPIX user password is no longer set in factory default state. This means that it’s no longer possible for a client to access or configure the device out-of-the-box without setting a password for the VAPIX user \"root\".\n\nThe new access procedure has been implemented in the following AXIS OS releases:\n\nVersion 5.51.6\n\nVersion 6.50.4 (2016 LTS)\n\nVersion 8.40.3 (2018 LTS)\n\nVersion 9.40.1 and higher\n\nFurthermore, the new updated procedure has been rolled out on individual product releases that are located outside of the above platform releases, such as:\n\n1.65.x\n\n1.8x.x\n\n5.75.x\n\n6.53.x\n\n6.55.x\n\n7.15.x\n\nModern access procedure (no default user)\n\nWith AXIS OS 11.6 and higher, the default VAPIX user \"root\" has been removed from the Axis device in their factory default state and it is now possible to create a custom named VAPIX user instead during factory default state.\n\nAnonymous interface calls\n\nInterface calls that do not require authentication (=anonymous) are still allowed for device identification purposes. An Axis device can be identified in its factory default state by its HTTP response header which is set to \"AXIS-Setup:vapix\" when an VAPIX or ONVIF API call is made, as illustrated below:\n\nHTTP/1.1 401\n\nUnauthorized Date: Thu, 19 Sep 2019 18:15:20 GMT\n\nServer: Apache/2.4.39 (Unix) OpenSSL/1.1.1c\n\nAxis-Setup: vapix\n\nActivate VAPIX and/or ONVIF interfaces\n\nThe VAPIX and/or ONVIF interfaces in the Axis device can be activated using the following methods:\n\nThe VAPIX interface is activated when an initial VAPIX user password is set, either via VAPIX System Settings API, as described in the VAPIX library or by using the Axis device's web interface during the installation wizard process.\n\nThe ONVIF interface can only be activated after the VAPIX interface has been activated. After that, the ONVIF interface can be activated by creating an ONVIF user via the device's web interface.\n\nAXIS OS version\n\nWeb interface configuration path\n\n< 7.10\n\nSetup > System Options > Security > ONVIF\n\n≥ 7.10\n\nSettings > System > ONVIF\n\n≥ 10.9\n\nSystem > ONVIF\n\nIn addition, an ONVIF user can also be created using the ONVIF Profile S specifications. An example of the API call to create an ONVIF user is described below:\n\nPOST /vapix/services HTTP/1.1\n\n<SOAP-ENV:Envelope xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\n\nxmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n\nxmlns:tds=\"http://www.onvif.org/ver10/device/wsdl\"\n\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\nxmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n\nxmlns:onvif=\"http://www.onvif.org/ver10/schema\"\n\nxmlns:tt=\"http://www.onvif.org/ver10/schema\"\n\nxmlns:SOAP-ENV=\"http://www.w3.org/2003/05/soap-envelope\">\n\n<SOAP-ENV:Body>\n\n<tds:CreateUsers xmlns=\"http://www.onvif.org/ver10/device/wsdl\">\n\n<User>\n\n<tt:Username>admintt:Username>admin>\n\n<tt:Password>admintt:Password>admin>\n\n<tt:UserLevel>Administratortt:UserLevel>Administrator>\n\n</User>\n\n</tds:CreateUsers>\n\n</SOAP-ENV:Body></SOAP-ENV:Envelope>\n\nPassword strength indicator\n\nAxis devices with AXIS OS 7.20 or higher support a password strength indicator which is visible when creating or modifying a user account password through the web interface. It indicates if the strength of the chosen password is considered weak, medium or strong and also provides advice on how to strengthen the password. The indicator follows the ZXCVBN algorithm developed by Dropbox. More information about setting the device password is available in the AXIS OS Hardening Guide.\n\nI forgot my password, what to do?\n\nThere is no possibility to recover lost or forgotten access credentials to an Axis device. The Axis device needs to be reset to its factory default settings in order to reconfigure it with new access credentials.\n\nAxis takes proactive steps to implement ACAP application signing, aligning with industry best practices for secure software delivery. Additionally, it anticipates potential future enforcement through legislation, including the E.U. Cybersecurity Resilience Act, E.U. Radio Equipment Directive, and Executive Order 14028. Therefore, starting from AXIS OS 12.0 customers will only be able to install signed ACAP applications on Axis devices by default. Installation of unsigned ACAP applications will be possible only and only if a device is actively configured to accept unsigned ACAP applications. Configuring a device to accept unsigned ACAP applications will lower the device’s security, but it can be useful during development or if you develop and run your own ACAP application. Running unsigned ACAP applications is not recommended.\n\nWhat are the benefits for end customers?\n\nA signed ACAP indicates that Axis has a TIP-relationship with the partner who has developed the ACAP. By inspecting the ACAP, the end customer can see who the TIP-partner is. The partner name under the vendor tag is equivalent to the company name in Axis CRM records. Therefore, the signing process ensures the validation of the partner, traceability and accountability. This process enables the end customers to validate their ACAP applications.\n\nWhat are the benefits in terms of cybersecurity?\n\nThe signing process ensures that the ACAP will only require Axis-approved access-rights and privileges when running on the Axis device. An ACAP that went through the signing process, will only run with limited, approved access rights on an Axis device. Furthermore, by signing the ACAP application, it is ensured that the content of the application is not tampered with from release to installation, hence it enables the secure software delivery.\n\nIs Axis vetting the software quality, secure development practices or performing QA-testing on Signed ACAPs?\n\nNo, Axis does not take any responsibility for whether a TIP-partner ACAP that went through the signing process is QA-tested, or has been developed according to industry best-practices secure development processes. This responsibility lies entirely on the TIP-partner that is providing an ACAP application.\n\nWho do we allow to have their ACAPs signed?\n\nOnly TIP partners are allowed to do so. This indicates that Axis has conducted a vetting process for its partners.\n\nWill Axis provide ACAP signing capabilities for non-TIP partners as well?\n\nFor non-TIP partners that require signing capabilities, we will also perform a vetting process. Please use this link to request access.\n\nHow does the ACAP signing technically work?\n\nDuring the ACAP application signing process, a cryptographic signature is added at the end of the application package. The signature is verified by the Axis device when installing the ACAP application as part of the overall secure software delivery architecture.\n\nWhen will Axis enforce mandatory ACAP signing?\n\nIn alignment with secure software delivery practices, Axis will accept only and only Signed ACAP applications without the possibility to disable this security control on its devices. Axis aims to achieve this is the next generation of the AXIS OS operating system which is planned to be AXIS OS 13.0 in H2 2026 and onwards.\n\nDefault device certificate\n\nAxis devices contain a certificate to allow for encrypted HTTPS and other secure connections in order to provide the possibility to access the device securely and proceed with the initial configuration of the device. Depending on the hardware capabilities of the Axis product and which AXIS OS version it is running, different default configuration applies.\n\nSelf-Signed Certificate\n\nAxis products with support for TPM module or Software keystore only generate a self-signed certificate during first-boot up. Axis devices come with a pre-installed self-signed certificate in order to provide the possibility to access the device via encrypted HTTPS connection and proceed with the initial setup of the device. Since the first-boot certificate is self-signed by the device, it is not suitable for providing authentication or authenticity against networks and applications. Therefore, Axis recommends removing the self-signed certificate from the device and replace it with a server certificate that is trusted in your organization when HTTPS connection is the preferred type of connection to the device.\n\nAxis device ID (IEEE 802.1AR)\n\nAxis devices equipped with Axis Edge Vault are provisioned with an Axis device ID. The Axis device ID conforms with the IEEE 802.1AR standard and can be verified using the Axis device ID certificate chain. ou can download and find more information about the Axis device ID certificate chain in our Public Key Infrastructure Repository. Remember to verify the downloaded certificates against the provided sha256 hash before using the Axis device ID CA certificates as a trust anchor.\n\nAxis root certificateIntegrity checksum SHA256Axis device ID Root CA ECC32ca2dc3230764f2d638b54d2826c050613266162932a2d7e766f81a51e3aa60Axis device ID Intermediate CA ECC 1e7a2fe5d9eb7af9d2ad45a432621389fc50362b62e482c03969ca5e3e3c114a4Axis device ID Intermediate CA ECC 22df287bda13db287f6e177a0ac666e3087de9c39e93d4dafb074e0ca944b0d45Axis device ID Root CA RSAfc1a8b0d6585dc74215bcc4e87e852af9258637062d0fc4c417554a6f1b5a85eAxis device ID Intermediate CA RSA 16b5da02ed3feb18ab787c3dfe2a32a311cf93852733e6ebe463f3ec33d45a89dAxis device ID Intermediate CA RSA 2c02a61b0448ab245994d7d81b5ae50253424a4cd930426172e5f0d89598b69a6\n\nCA certificates\n\nCA certificates are certificates used by the Axis device to validate/verify the authenticity of other servers in the network. This means that CA certificates that are going to be uploaded in the CA certificate section of the Axis device need to fulfil one of the following:\n\nX509v3 CA certificate with basicConstraints extension CA:TRUE*\n\nX509 v1 self-signed certificate\n\nThe keyUsage attribute extension with bit keyCertSign set but without basicConstraints\n\nNetscape Certificate Type extension saying that it is CA certificate\n\n*The CA:TRUE or CA:FALSE attribute also decides whether the CA certificate is allowed to sign other certificates.\n\nCertificate signing request (CSR)\n\nA certificate signing request (CSR) can be created from an already existing certificate in the Axis device. The certificate request in PEM format can be sent to a certificate authority (CA) for signing/verifying. After the signed certificate is returned from the CA, it needs to be uploaded on the Axis device and be compared/verified with the original certificate request. If all information is correct, the certificate upload will end successfully. However, if system changes occur between the time the CSR was issued and the certificate was uploaded, the process can be interrupted. Possible reasons why a certificate upload would fail are:\n\nThe Axis device has been factory defaulted in the meantime\n\nThe certificate used for the signing request has been removed or changed in the Axis device\n\nIn addition to the above information, the below listed Axis devices have additional video buffer configurations that must be considered. These devices have a limited number of statically configured so called video source buffers. The number of video source buffers depends on the device.\n\nFor single-sensor products the video source buffer can deliver at least one unique video stream, and for multi-sensor products the video source buffer can deliver at least four unique video streams. So, Axis devices containing video source buffer configurations are limited by the amount of unique video streams they can provide.\n\nProducts released before 2022\n\nIn Axis devices released before 2022, there are a maximum of four video source buffers.\n\nMain source buffer: The main source buffer is statically configured to the device’s maximum default resolution and can only deliver a unique video stream in that specific resolution. This is indicated by the \"fixed\" term.\n\n2nd source buffer: The 2nd source buffer is a low resolution video buffer suitable for applications that rely on a lower sized resolution, such as (analytics) ACAP’s or motion jpeg image. This buffer provides variations of possible resolutions.\n\n3rd source buffer: The 3rd source buffer is a high resolution video buffer providing either the device’s maximum resolution, or a resolution close to it. In addition to that, HDMI capable devices allocate the 3rd source buffer HDMI video streaming when enabled. This buffer provides variations of possible resolutions.\n\n4th source buffer: The 4th source buffer is a high resolution buffer providing either the device’s maximum resolution or a resolution close to it. This buffer provides variations of possible resolutions.\n\nProducts released in 2022 and onwards\n\nIn Axis devices released in 2022 and onwards, there are at least four video source buffers available for encoded video such as H26X and MJPEG. HDMI will not affect the available number of source buffers for encoded video. ACAPs (typically analytics applications) that fetches YUV will not affect the available number of source buffers for encoded video.\n\nFixed source buffer (Main): The fixed source buffer is statically configured to the device’s maximum default resolution and can only deliver a unique video stream in that specific resolution. This is indicated by the \"fixed\" term.\n\n2nd source buffer: The 2nd source buffer is a low resolution video buffer suitable for applications that rely on a lower sized resolution motion JPEG image. This buffer provides variations of possible resolutions.\n\nNth source buffer: The Nth source buffer is a high resolution video buffer. This buffer provides variations of possible resolutions.\n\nExample illustration\n\nAxis deviceMain source buffer2nd source buffer3rd source buffer4th source bufferAXIS Q6125-LEFixed 1920x1080320x240 to 720x576320x240 to 1920x1080320x240 to 1280x960\n\nIn summary, this device can deliver 2 x unique video streams in max 1920x1080 resolution — one in max 1280x960 and one in 720x576. As described in Unique encoded streams, the information in the server report can help identifying which of the video source buffers that are already used and saturated, and which are still available.\n\nExample 1: In this example, the Axis device is delivering the following unique video streams which means the Main, 3rd and 4th video source buffers are in use. Requesting e.g. another unique video stream in 1920x1080 resolution with fps = 15 would fail because no video source buffer is available to deliver this request.\n\nExample 2: In this example, the Axis device is delivering the following unique video streams which means the Main and 3rd video source buffer are in use. Requesting e.g. another unique video stream in 1920x1080 resolution with fps = 15 would fail because no video source buffer is available to deliver this request. Requesting a unique video stream buffer in 800x600 resolution can however be delivered by the 4th source buffer.\n\nAxis device specifics\n\nBelow are all Axis devices and their video source buffer configurations listed:\n\nAxis deviceMain source buffer2nd source buffer3rd source buffer4th source bufferAXIS I8116-EFixed 2592x1944320x240 to 640x480*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M1025\n\nAXIS M3005-V\n\nAXIS M3025-VEFixed 1920x1080320x240 to 720x576320x240 to 1920x1080320x240 to 1280x720AXIS M1004-W\n\nAXIS M1014\n\nAXIS M1034-W\n\nAXIS M3004-V\n\nAXIS M3024-LVEFixed 1280x800320x240 to 720x576320x240 to 1440x900320x240 to 1280x720AXIS M1013\n\nAXIS M1033-W\n\nAXIS M1143-LFixed 800x600320x240 to 720x576320x240 to 800x600320x240 to 800x600AXIS M3046-V 2.4 mmFixed 2688x1520\n\nFixed 2560x1440320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080 320x240 to 1280x720AXIS M1045-LW\n\nAXIS M1065-L/-LW\n\nAXIS M3045-V/-WVFixed 1920x1080320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080 320x240 to 1280x720AXIS M3044-V/-WVFixed 1280x720320x240 to 720x576No HDMI\n\n320x240 to 1280x720320x240 to 1280x720AXIS M2026-LE\n\nAXIS M2026-LE Mk II\n\nAXIS M3106-L/-LVE\n\nAXIS M3106-L/-LVE Mk IIFixed 2688x1520320x240 to 720x576No HDMI\n\n320x240 to 1920x1080320x240 to 1280x960AXIS M3046-V 1.8 mmFixed 2304x1296 (16:9)\n\nFixed 2016x1512 (4:3)320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080320x240 to 1280x960AXIS M4206-V/-LVFixed 2048x1536320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080320x240 to 1280x960AXIS M4215-V/-LVFixed 1920x1080320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M4216-V/-LVFixed 2304x1728 (4:3)320x240 to 640x480*****320x240 to 1920x1080*****320x240 to 1920x1080*****Fixed 2304x1296 (16:9)320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M3016\n\nAXIS M3066-V\n\nAXIS M3206-LVEFixed 2304x1728\n\nFixed 2304x1296320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080320x240 to 1280x960AXIS M3015\n\nAXIS M3065-V\n\nAXIS M3075-V\n\nAXIS M3205-LVE\n\nAXIS Q9216-SLVEFixed 1920x1080320x240 to 720x576HDMI: 1080p\n\n320x240 to 1920x1080320x240 to 1280x960AXIS M3064-VFixed 1280x720320x240 to 720x576No HDMI\n\n320x240 to 1280x720320x240 to 1280x720AXIS M3047-P*Fixed 2048x2048480x480 to 720x720HDMI: 720p\n\n480x480 to 2048x2048480x480 to 720x720AXIS M3048-P*Fixed 2880x2880480x480 to 720x720HDMI: 720p\n\n480x480 to 2880x2880480x480 to 720x720AXIS Q6125-LEFixed 1920x1080320x240 to 720x576320x240 to 1920x1080320x240 to 1280x960AXIS P1428-E**\n\nAXIS Q6128-E**Fixed 3840x2160240x135 to 640x480480x270 to 1280x720240x135 to 1920x1080AXIS Q6010-E***\n\nAXIS Q6100-E***Fixed 2592x1944320x240 to 1280x960320x240 to 1920x1080Not availableAXIS P3719-PLE****Fixed 2560x1440Fixed 640x360640x360 to 1920x1080Fixed 2560x1440AXIS M2035-LEFixed 1920x1080320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M2036-LEFixed 2304x1728 (4:3)320x240 to 640x480*****320x240 to 1600x1200*****320x240 to 1600x1200*****Fixed 2688x1512 (16:9)320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M3085-VFixed 1920x1080320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M3086-VFixed 2688x1512 (16:9)320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****Fixed 2304x1728 (4:3)320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M3088–VFixed 3840x2160320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M1055-LFixed 1920x1080320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****AXIS M1075-LFixed 1920x1080320x240 to 640x360*****320x240 to 1920x1080*****320x240 to 1920x1080*****\n\n* The resolutions are only for fisheye overview and differ for other dewarped view modes. When pulling view area 1 & 2 with the same resolution on AXIS M3047-P and AXIS M3048-P, this will work either by using the highest resolution (1920x1440) or with lower resolutions like 640x480 and 480x360.\n\n** Each source buffer can deliver two video streams in the corresponding resolution. Example: either 4x1080p in total with 2x1080p delivered from the main source buffer and 2x1080p delivered from the 4th source buffer, or 2x4K delivered from the main source buffer and 2x1080p delivered from the 4th source buffer.\n\n*** The device is a multi-sensor device with 4 physical sensors, which translates to each buffer being able to deliver one video stream per physical sensor. Example: 1 x video stream in 2592x1944 resolution per sensor on AXIS Q6010-E makes it a total of 4 video streams on the main source buffer.\n\n**** The 4th source buffer is allocated for quad-view only, so this means that the 4th source buffer cannot be utilized further even if quad-view is not used.\n\n***** These video source buffers are capable of providing two unique video streams per buffer instead of just a single one.\n\nTroubleshooting\n\nYou may refer to each device's release notes for all the supported resolutions. You will also notice the following line in the release notes for devices with hardware limitations: \"5.40.5:L35026 Number of different configured video streams are limited by hardware\".\n\nA typical first hand indication that the Axis device cannot provide additional unique video streams as the video source buffers are already exceeded is the \"503 Service Unavailable\" error message in the web interface of the Axis device.\n\nOther applications, like AXIS Companion or AXIS Camera Station, would show the user a \"Camera error\". The Server report and included log messages of Axis devices are an excellent tool to debug this kind of scenarios.\n\nBelow you can find a list of some common log messages that would appear in case the video source buffer is saturated and the Axis device is not being able to deliver a requested unique video stream\n\nTroubleshooting example 1: In this example, requesting a unique video stream has failed due to there simply not being any video source buffer available to facilitate another unique 1024x768 video stream. The log messages indicate which source buffer is already occupied and which is still available to use at the time when the new unique video stream is requested.\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: Unable to find available stream configuration for resolution 1024x768\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: buffer[0]: fixed 1920x1080, current 1920x1080\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: buffer[1]: max 720x576, current 0x0\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: buffer[2]: max 1920x1080, current 1280x960\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: buffer[3]: max 1280x720, current 0x0\n\n<INFO> Jan 4 11:22:03 axis-00408cdc12b7 /usr/bin/ambad[960]: Failed to allocate a source buffer\n\nTroubleshooting example 2: Like in the example above, requesting a unique video stream has failed due to there not being any video source buffer available to facilitate another unique 800x600 video stream.\n\n<INFO> Jan 4 11:22:03 axis-0040 /usr/bin/ambad[960]: Unable to find available stream configuration for resolution 800x600\n\n<INFO> Dec 30 21:15:36 axis408 /usr/bin/ambad[1051]: buffer[0]: fixed 800x600, current 800x600\n\n<INFO> Dec 30 21:15:36 axis408 /usr/bin/ambad[1051]: buffer[1]: max 720x576, current 0x0\n\n<INFO> Dec 30 21:15:36 axis408 /usr/bin/ambad[1051]: buffer[2]: max 800x600, current 800x600\n\n<INFO> Dec 30 21:15:36 axis408 /usr/bin/ambad[1051]: buffer[3]: max 800x600, current 800x600\n\n<INFO> Dec 30 21:15:36 axis408 /usr/bin/ambad[1051]: Failed to allocate a source buffer\n\nTroubleshooting example 3: Axis devices with newer AXIS OS versions print their log message in a slightly different manner, as seen in this example.\n\n[ INFO ] /usr/bin/ambad[1035]: Failed to allocate a source buffer (1280x720, channel 1): No matching buffer available\n\n[ INFO ] /usr/bin/ambad[1035]: stream[1]: encoding [ 1920x1080, 25/1 fps, buffer_id 2, state active, channel 1 ]\n\n[ INFO ] /usr/bin/ambad[1035]: stream[2]: encoding [ 640x480, 25/1 fps, buffer_id 3, state active, channel 1 ]\n\n[ INFO ] /usr/bin/ambad[1035]: stream[3]: encoding [ 320x240, 25/1 fps, buffer_id 1, state active, channel 1 ]\n\n[ WARNING ] monolith: Failed to allocate 1280x720 H264 stream on channel 1: Failed to allocate stream resources: Failed to add stream\n\n[ ERR ] monolith[925]: Could not set caching pipeline to playing.\n\nRecommendations\n\nThe following general recommendations can be given to reduce complexity, configuration time and to optimize the video streaming setup of Axis devices:\n\nMake use of stream profiles to package streams and their configuration in a simple way to optimize stream and configuration handling\n\nAction rules that upload MJPEG images or video clips should utilize user-configured stream profiles\n\nUse the same stream settings (=stream profile) for live view and recording if possible\n\nHave in mind that action rules allocate a video source buffer once the action rule is activated. This means that even though the Axis device is supposed to send an image to an FTP server once a day, it will result in the video source buffer being allocated for the entire day\n\nHave in mind that (Analytics) ACAPs such as AXIS Video Motion Detection or 3rd party ACAPs may consume a low resolution buffer for detection, such as 320x240\n\nHave in mind that the “Adaptive Resolution/Streaming” feature enabled per default when accessing the Axis device’s web interface will request a unique video stream tailored to the actual resolution size of the physical display of the user. This might consume a video source buffer by itself\n\nAvoid having anonymous viewers enabled. Besides the aspect of cybersecurity, having anonymous viewers enabled allows the uncontrolled access to an Axis device and may exceed the video source buffer configurations\n\nAvoid questionable setups such as requesting two unique video streams in the same resolution, framerate but with different compression, like 30 and 35. The difference in image quality is negligible compared to the cost of consuming a video source buffer\n\nIndependently of the desired transport method – i.e. multicast or unicast – the initial RTSP protocol communication that is required to properly initialize the video client and Axis device is very similar, except that the video client in multicast-mode specifies this instead of the unicast scenario.\n\nWe will go through the details of a typical RTSP build-up step-by-step below. For more details, see the actual network traces in Multicast in detail.\n\nStep 1: video client\n\nThe video client initiates the RTSP DESCRIBE and signals to the Axis device to prepare video streaming with the specified streaming parameters given in the RTSP URL and to share its corresponding Session Description Protocol (SDP) file, which includes information about how to decode the video stream.\n\nDESCRIBE rtsp://172.25.201.100:554/axis-media/media.amp?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30 RTSP/1.0\n\nCSeq: 2\n\nUser-Agent: OmnicastRTSPClient/1.0\n\nAccept: application/sdp\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"00000450Y2804646c4d9f7d3175fa496417b9c4e7aa39a2\", uri=\"rtsp://172.25.201.100:554/axis-media/media.amp?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30\", response=\"7a2e2dcad7618b36479ec76e252bc1c3\"\n\nStep 2: Axis device\n\nThe Axis device validates the request and shares the corresponding SDP file with the video client. Note that in any-source multicast mode, no multicast-specific network parameters are shared. In source-specific multicast mode (SSM), this is different.\n\nRTSP/1.0 200 OK\n\nCSeq: 2\n\nContent-Type: application/sdp\n\nContent-Base: rtsp://172.25.201.100:554/axis-media/media.amp/\n\nServer: GStreamer RTSP server\n\nDate: Thu, 11 Feb 2021 06:51:12 GMT\n\nContent-Length: 1063\n\nv=0\n\no=- 17136744296195211872 1 IN IP4 172.25.201.100\n\ns=Session streamed with GStreamer\n\ni=rtsp-server\n\nt=0 0\n\na=tool:GStreamer\n\na=type:broadcast\n\na=range:npt=now-\n\na=control:rtsp://172.25.201.100:554/axis-media/media.amp?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30\n\nm=video 0 RTP/AVP 96\n\nc=IN IP4 0.0.0.0\n\nb=AS:50000\n\na=rtpmap:96 H265/90000\n\na=framerate:30\n\na=fmtp:96 sprop-vps=QAEMAf//AUAAAAMAgAAAAwAAAwCcEJAk;sprop-sps=QgEBAUAAAAMAgAAAAwAAAwCcoAPAgBEHy55CbkSg8quTgoKC8IAAAAMAgAAAAwKE;sprop-pps=RAHANzwEbJA=\n\na=ts-refclk:local\n\na=mediaclk:sender\n\na=recvonly\n\na=control:rtsp://172.25.201.100:554/axis-media/media.amp/stream=0?videocodec=h265&adui=0&resolution=1920x1080&camera=1&compression=30&fps=30\n\na=transform:1.000000,0.000000,0.000000;0.000000,1.000000,0.000000;0.000000,0.000000,1.000000\n\nStep 3: video client\n\nThe video client then goes ahead and defines the appropriate transport method as multicast, the multicast IP address, streaming ports and the TTL. This is the important step in the RTSP build-up where the video client actually can specify the desired transport method. Note that in order for the Axis device to accept video client-specific multicast network parameters, the VAPIX parameter RTSP Allow Client Transport Settings in Plain Config > Network has to be enabled. If this parameter is not set, the Axis device might ignore these parameters and offer their own configuration set in Plain Config > Network > R0.\n\nSETUP rtsp://172.25.201.100:554/axis-media/media.amp/stream=0?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30 RTSP/1.0\n\nCSeq: 3\n\nUser-Agent: OmnicastRTSPClient/1.0\n\nTransport: RTP/AVP;multicast;destination=224.16.17.51;port=47806-47807;ttl=64\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"00000450Y2804646c4d9f7d3175fa496417b9c4e7aa39a2\", uri=\"rtsp://172.25.201.100:554/axis-media/media.amp/stream=0?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30\", response=\"48cf0f723aca20f6530e79ecb966ec0a\"\n\nStep 4: Axis device\n\nThe Axis device in return validates the request and if successful, it answers with the exact same network parameters back to the video client to prepare the upcoming session.\n\nRTSP/1.0 200 OK\n\nCSeq: 3\n\nTransport: RTP/AVP;multicast;destination=224.16.17.51;ttl=64;port=47806-47807;mode=\"PLAY\"\n\nServer: GStreamer RTSP server\n\nSession: f2imQtCHhuoH2FbW;timeout=60\n\nDate: Thu, 11 Feb 2021 06:51:12 GMT\n\nStep 5: video client\n\nThe video client then finally signals to the Axis device via RTSP PLAY to start video streaming as agreed based on the network and video streaming parameters that have been handshaked previously.\n\nPLAY rtsp://172.25.201.100:554/axis-media/media.amp?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30 RTSP/1.0\n\nCSeq: 4\n\nSession: f2imQtCHhuoH2FbW\n\nUser-Agent: OmnicastRTSPClient/1.0\n\nRange: npt=0.000-\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"00000450Y2804646c4d9f7d3175fa496417b9c4e7aa39a2\", uri=\"rtsp://172.25.201.100:554/axis-media/media.amp?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30\", response=\"d015b378a8a1000c964d6c48d1883d1f\"\n\nStep 6: Axis device\n\nThe Axis device acknowledges the request by sending an RTSP OK and provides the video client with information about how the video stream will be momentarily available at the defined multicast network parameters. In order to signal the start of the video stream to the video client, the Axis device specifies the sequence number of the first RTP package and the initial RTP timestamp so that the client expects and processes the correct start of the video stream.\n\nRTSP/1.0 200 OK\n\nCSeq: 4\n\nRTP-Info: url=rtsp://172.25.201.100:554/axis-media/media.amp/stream=0?videocodec=h265&audio=0&resolution=1920x1080&camera=1&compression=30&fps=30;seq=24067;rtptime=417717697\n\nRange: npt=now-\n\nServer: GStreamer RTSP server\n\nSession: f2imQtCHhuoH2FbW;timeout=60\n\nDate: Thu, 11 Feb 2021 06:51:12 GMT\n\nWhile in any-source multicast (ASM) the multicast network parameters are handshaked after sharing the Session Description Protocol (SDP) file during the initial RTSP build-up, this is not the case in the source-specific multicast mode. In SSM, the multicast network parameters are pre-configured in the Axis device and shared with the requesting video client when the SDP file is shared. The benefit of this is that the requesting video client can join a multicast group and only filter for the multicast traffic the video client is interested in. This can be done by applying a source-specific filter when joining the multicast group.\n\nA typical scenario where SSM would be beneficial is when multiple Axis devices would stream video to the same multicast address but would use different ports. A video client connecting via any-source multicast would receive the multicast traffic from all streaming devices, while a video client requesting source-specific multicast would be able to filter out unwanted traffic. On top of that, SSM allows for reliable planning of multicast routing/path-forwarding since it is known how multicast is switched and routed through the network.\n\nSource-specific multicast requires pre-configuration on the Axis device to configure the desired multicast network parameters. You can find information on how to configure an Axis device for source-specific multicast in the VAPIX Library but is also illustrated below. There is no specific setting to enable or disable source-specific multicast as such, but the source-specific multicast network parameters that need to be defined in advance can be configured from Plain Config > Network for each individual video source. Below is a typical example configuration:\n\nStep 1: video client\n\nCompared to the any-source multicast mode, SSM mode requires a different streaming URL for signaling to the Axis device that source-specific multicast is wanted.\n\nDESCRIBE rtsp://172.25.201.100:554/axis-media/ssm/media.amp?camera=1 RTSP/1.0\n\nCSeq: 4\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"000006c7Y356087c783187c3a95be0ca315f5fa0cd57ddc\", uri=\"rtsp://172.25.201.100:554/axis-media/ssm/media.amp?camera=1\", response=\"3226806a8c988f0d473df291e8c7ffb8\"\n\nUser-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)\n\nAccept: application/sdp\n\nStep 2: Axis device\n\nThe SDP file that is shared between the Axis device and the requesting video client includes the source-specific multicast network parameters which the video client has to learn in order to join the multicast group accordingly and filter for the correct traffic.\n\nRTSP/1.0 200 OK\n\nCSeq: 4\n\nContent-Type: application/sdp\n\nContent-Base: rtsp://172.25.201.100:554/axis-media/ssm/media.amp/\n\nServer: GStreamer RTSP server\n\nDate: Thu, 11 Feb 2021 07:01:42 GMT\n\nContent-Length: 749\n\nv=0\n\no=- 9871677480407248934 1 IN IP4 172.25.201.100\n\ns=Session streamed with GStreamer\n\ni=rtsp-server\n\nc=IN IP4 225.226.227.228/5\n\nt=0 0\n\na=tool:GStreamer\n\na=type:broadcast\n\na=range:npt=now-\n\na=control:rtsp://172.25.201.100:554/axis-media/ssm/media.amp?camera=1\n\na=source-filter: incl IN IP4 225.226.227.228 172.25.201.100\n\nm=video 60000 RTP/AVP 96\n\nb=AS:50000\n\na=rtpmap:96 H264/90000\n\na=fmtp:96 packetization-mode=1;profile-level-id=640029;sprop-parameter-sets=Z2QAKa0AxSAeAIn5ZuAgIDSDxIio,aO48sA==\n\na=ts-refclk:local\n\na=mediaclk:sender\n\na=recvonly\n\na=control:rtsp://172.25.201.100:554/axis-media/ssm/media.amp/stream=0?camera=1\n\na=framerate:30.000000\n\na=transform:1.000000,0.000000,0.000000;0.000000,1.000000,0.000000;0.000000,0.000000,1.000000\n\nStep 3: video client\n\nSince the video client knows the multicast network parameters that will be used in advance, the client can include them in the RTSP SETUP request.\n\nSETUP rtsp://172.25.201.100:554/axis-media/ssm/media.amp/stream=0?camera=1 RTSP/1.0\n\nCSeq: 5\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"000006c7Y356087c783187c3a95be0ca315f5fa0cd57ddc\", uri=\"rtsp://172.25.201.100:554/axis-media/ssm/media.amp/\", response=\"89e1cf3338144d096723df0b10864cab\"\n\nUser-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)\n\nTransport: RTP/AVP;multicast;port=60000-60001\n\nStep 4: Axis device\n\nThe Axis device validates and responds with the correct multicast network parameter according to the pre-configuration done in R0.\n\nRTSP/1.0 200 OK\n\nCSeq: 5\n\nTransport: RTP/AVP;multicast;destination=225.226.227.228;ttl=5;port=60000-60001;mode=\"PLAY\"\n\nServer: GStreamer RTSP server\n\nSession: 06yirClN7xQCtW8q;timeout=60\n\nDate: Thu, 11 Feb 2021 07:01:42 GMT\n\nStep 5: video client\n\nThe requesting video client then signals to the Axis device to start video streaming to the agreed streaming and network parameters.\n\nPLAY rtsp://172.25.201.100:554/axis-media/ssm/media.amp?camera=1 RTSP/1.0\n\nCSeq: 6\n\nAuthorization: Digest username=\"root\", realm=\"AXIS_ACCC8ED910B9\", nonce=\"000006c7Y356087c783187c3a95be0ca315f5fa0cd57ddc\", uri=\"rtsp://172.25.201.100:554/axis-media/ssm/media.amp/\", response=\"c19526013f73f3db72cd4fca98ec1c40\"\n\nUser-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)\n\nSession: 06yirClN7xQCtW8q\n\nRange: npt=0.000-\n\nStep 6: Axis device\n\nThe Axis device acknowledges the request by sending an RTSP OK and provides the video client with info on how the video stream will be momentarily available at the defined multicast network parameters. In order to signal the start of the video stream to the video client, the Axis device specifies the sequence number of the first RTP package and the initial rtp timestamp so that the client expects and processes the correct start of the video stream.\n\nRTSP/1.0 200 OK\n\nCSeq: 6\n\nRTP-Info: url=rtsp://172.25.201.100:554/axis-media/ssm/media.amp/stream=0?camera=1;seq=21707;rtptime=3563678630\n\nRange: npt=now-\n\nServer: GStreamer RTSP server\n\nSession: 06yirClN7xQCtW8q;timeout=60\n\nDate: Thu, 11 Feb 2021 07:01:42 GMT\n\nAlways multicast is not a network multicast mode but a specific adaption to video clients that are not capable of performing a proper RTSP and/or multicast setup in either of the ways described previously (i.e. via ASM or SSM). In always multicast mode, the Axis device is statically configured to stream video to a specific multicast address and port, and also to start streaming to it directly, regardless if there are video clients in the network that are actually requesting video from that particular Axis device or not. On top of that, RTSP is not used to connect, instead the requesting video client will make a HTTP call to retrieve the Session Description Protocol (SDP) file in order to understand and make the connection to the multicast address and port where the video stream is connected. Always multicast can be configured in Axis devices in Plain Config > Network for each individual video source.\n\nExample 1: The device will only stream video to the multicast address 224.225.226.227 and video port 50000. If video port 0 would be entered here, the Axis device would select the next possible port which has been defined in the RTP > End Port and Start Port configuration.\n\nExample 2: The device will stream video to the multicast address 224.225.226.227 to port 50000, and audio to multicast address 239.216.121.37 to port 51000. Observe that it is also possible to adjust the video streaming parameters in the always multicast profile. If other streaming parameters should be used, e.g. a framerate of 15 frames per second and compression of 15, then the field can be adjusted in the following way: videocodec=h264&fps=15&compression=15. Otherwise the current configured default stream settings will be used.\n\nOnce the above settings are saved, the Axis device will start streaming to the configured multicast address and port immediately regardless if there are clients requesting the video stream or not. The client can access this multicast stream via the SDP file, which determines the video stream settings so that the video client learns how to play the video. The SDP file can be accessed using http://ip-address/axis-cgi/alwaysmulti.sdp?camera=1 where camera=1 is mapped to R0. An example of such an SDP file can be found via alwaysmulti.sdp. Below is a network trace example illustrating the procedure.\n\nStep 1: video client\n\nThe video client has requested the SDP file from the Axis device. Observe that no streaming parameters or multicast network parameters are mentioned by the client, hence this configuration must be performed on the Axis device prior to making the request as described in the previous examples.\n\nGET /axis-cgi/alwaysmulti.sdp?camera=1 HTTP/1.1\n\nHost: 172.25.201.100\n\nAccept: */*\n\nAccept-Language: en_US\n\nAuthorization: Basic cm9vdDpwYXNz\n\nUser-Agent: VLC/3.0.11 LibVLC/3.0.11\n\nRange: bytes=0-\n\nStep 2: Axis device\n\nThe Axis device looks up the current configuration in R0 and then initializes and sends the SDP file to the requesting video client. This is done in order to pass on the required information so that the video client can access the already ongoing multicast stream at the pre-configured multicast address and port. No further unicast communication is exchanged at this point, the video client will switch over to the specified multicast network parameters in order to access the stream.\n\nHTTP/1.1 200 OK\n\nDate: Thu, 11 Feb 2021 06:14:25 GMT\n\nServer: Apache/2.4.46 (Unix) OpenSSL/1.1.1g\n\nCache-Control: no-cache, no-store, max-age=0\n\nPragma: no-cache\n\nExpires: Thu, 01 Dec 1994 16:00:00 GMT\n\nX-Content-Type-Options: nosniff\n\nX-Frame-Options: SAMEORIGIN\n\nX-XSS-Protection: 1; mode=block\n\nTransfer-Encoding: chunked\n\nContent-Type: application/sdp\n\nv=0\n\no=- 1188340656180883 1 IN IP4 172.25.201.100\n\ns=Session streamed with GStreamer\n\ni=rtsp-server\n\nt=0 0\n\na=tool:GStreamer\n\na=type:broadcast\n\na=control:*\n\na=range:npt=now-\n\nm=video 50000 RTP/AVP 96\n\nc=IN IP4 224.225.226.227/5\n\nb=AS:50000\n\na=rtpmap:96 H264/90000\n\na=fmtp:96 packetization-mode=1;profile-level-id=640029;sprop-parameter-sets=Z2QAKa0AxSAeAIn5ZuAgIDSDxIio,aO48sA==\n\na=control:stream=0\n\na=ts-refclk:local\n\na=mediaclk:sender\n\na=framerate:30.000000\n\na=transform:1.000000,0.000000,0.000000;0.000000,1.000000,0.000000;0.000000,0.000000,1.000000\n\nA network where traffic is served within a certain VLAN and IP address network is called a switched network since no layer-3 IP routing is needed. Let's start with the basic setup and assume that the network switches have not been configured properly for handling multicast traffic. What you would see is similar to the illustration below, a switched network consisting of a handful of switches with client computers and Axis devices. From all of the clients, only Client 2 is interested and requests a multicast video stream from the Axis device. Since the network switches are not configured properly at this point, the multicast traffic, which is only supposed to flow from the Axis device over the traversing switches to Client 2, will be flooded to all switches and clients in the network, regardless if they are interested in receiving the traffic or not.\n\nLet's look at the same network when properly configured with IGMP (Internet Group Management Protocol) enabled. IGMP is a protocol that helps the network infrastructure learn and understand who is delivering multicast traffic to which destination in order to avoid multicast flooding to non-interested clients. To configure the network to avoid multicast flooding, it is enough to configure the main switch - i.e. Layer 2 switch - for IGMP in the following example configuration:\n\nGlobal configuration\n\nip igmp snooping querier address 172.25.201.10\n\nip igmp snooping querier query-interval 15\n\nip igmp snooping querier\n\nBy doing this, the Layer 2 switch will be sending out IGMP queries to the connected network devices in order to find out which ones are interested in receiving and sending multicast packages.\n\nThe network devices will respond with \"join\" messages in order to signal their participation in multicast-related traffic.\n\nThe network switches will listen and learn from this traffic in order to properly switch network packages to their appropriate destinations. In the illustration below, only Client 2 is requesting video from the Axis device via multicast.\n\nWith the correct configuration in place, the network switches are now capable of switching packages as well across switches. In the illustration below, we have switched the clients, so that Client 1 requests a multicast video stream from the same Axis device that previously served Client 2. The result will be proper switched network traffic across the network to the correct destination.\n\nQoS provides the means to guarantee a certain level of a specified resource to selected traffic on a network. Quality can be defined as e.g. a maintained level of bandwidth, low latency, no packet losses, etc. The main benefits of a QoS aware network can be summarized as:\n\nThe ability to prioritize traffic and thus allow critical flows to be served before flows with lesser priority\n\nGreater reliability in the network, thanks to the control of the amount of bandwidth an application may use, and thus control over bandwidth races between applications\n\nTo use QoS in a network with Axis video products the following requirements need to be met:\n\nAll network switches and routers must include support for QoS. This is important to achieve end-to-end QoS functionality\n\nThe Axis video products used must be QoS enabled\n\nImagine that the network in Figure 1 is an ordinary (non-QoS aware) network. In this example, PC1 is watching two surveillance video streams from cameras Cam1 and Cam2, with each camera streaming at 2.5 Mbps. Suddenly, PC2 starts a file transfer from PC3. In this scenario the file transfer will try to use the full 10 Mbps capacity between the routers R1 and R2, whilst the video streams will try to maintain their total of 5 Mbps. We can no longer guarantee the amount of bandwidth given to the surveillance system and the video frame rate will probably be reduced. At worst, the FTP traffic will consume all the available bandwidth.\n\nNow, suppose the network in Figure 2 is QoS-aware and uses the DiffServ model (see below). The router R1 has been configured to devote up to 5 Mbps of the available 10 Mbps for streaming video. FTP traffic is allowed to use 2 Mbps, and HTTP and all other traffic can use a maximum of 3 Mbps. Using this division, video streams will always have the necessary bandwidth available. File transfers are considered less important and get less bandwidth, but there will still be bandwidth available for web browsing and other traffic. Note that these maximums only apply when there is congestion on the network. If there is unused bandwidth available, this can be used by any type of traffic. By using QoS we allow the network applications to co-exist on the same network, without consuming each other’s bandwidth.\n\nFurther reading\n\nFor further reading and more detailed documentation about the Quality of Service standard, see the following links:\n\nRFC 2475 — An Architecture for Differentiated Services\n\nRFC 2597 — Assured Forwarding PHB Group\n\nRFC 2598 — An Expedited Forwarding PHB\n\nRFC 3168 — The Addition of Explicit Congestion Notification (ECN) to IP\n\nRFC 1633 — Integrated Services in the Internet Architecture: an Overview\n\nThere are several different ways (models) of implementing QoS. Axis products use the DiffServ model, for greater scalability and flexibility. See below for more information.\n\nThe IntServ model\n\nThe IntServ model, or Integrated Services model uses a protocol called RSVP (Reservation Setup Protocol), which is used to reserve a certain traffic quality in the network. Prior to use, each application in an IntServ QoS network reserves its own resources and the router either grants or denies the request. When a reservation request is received, the routers need to find a path that can support the IntServ request and also the route that offers the best services. The major problem with this model is scalability. As the network increases in size, the connections database will grow to enormous proportions and it will be both difficult and ineffective to keep track of all reservations. Another drawback is the model’s inflexibility – the maximum amount of the resource in question that each type of traffic will ever receive is the maximum specified in the model, even if there are other unused resources available.\n\nThe DiffServ model\n\nThe Differentiated Services (DiffServ) model was introduced in 1998. It is based on two major components:\n\nPacket marking\n\nRouter queuing disciplines\n\nThe applications in a DiffServ network mark their traffic so the router knows which service to apply to the packet. The marking is done in the IP header, by setting a field called the DSCP (Differentiated Services Codepoint). This is a 6-bit field that provides 64 different class IDs. Each DSCP value represents a QoS class, also known as a behavior aggregate. Thus, different applications can mark their own traffic with the same DSCP value. The intelligence of a DiffServ network is setup in the routers, where a particular DSCP value is mapped to a particular routing behavior. This behavior is referred to as a Per-Hop Behavior (PHB) and is implemented in the router using different queuing disciplines.\n\nThe DiffServ model abandons the concept of states as used in IntServ, and routers operate in a connectionless mode. This adds scalability to the system, since each router works independently, unaware of the network size and complexity. This model is also more flexible, as the classes of service are not strictly defined. Resources over and above the value specified as the maximum when resources are limited can be freely exploited whenever available. The main benefit of using this model in Axis products is that the products mark their own traffic, instead of letting the boundary nodes of the DiffServ domain do so. The conditioning algorithms in the boundary node cannot, for example, distinguish video over HTTP from audio over HTTP - they will only see HTTP, and probably provide a much lower level of service than actually required. To allow a node outside the DS domain to classify its own traffic:\n\nThe boundary router must be correctly configured\n\nThe camera must be set up as a trusted node\n\nPer-Hop Behaviors (PHBs) define the router’s forwarding treatment for a certain class of traffic. Classes of traffic are also known as Behavior Aggregates (BA). Members of the BA are marked with the same DSCP value. There are four recommended PHBs defined, each mapped to one or more DSCP value.\n\nThe Default PHB: The default PHB provides the traditional best-effort service. It is represented by DSCP value 000000 (NOTE: 6-bits set to 0) and it must be available at any DiffServ router. This is the forwarding treatment applied to all non-DiffServ aware applications.\n\nThe Class-Selector PHB: To preserve backward compatibility with the old TOS field definition, the class-selector PHB defines a DSCP value of the form xxx000. The three bits represent the IP Precedence defined by a Type of Service aware network. The Class-Selector PHB ensures that DiffServ compliant nodes can coexist with IP Precedence-based nodes.\n\nExpedited Forwarding: The Expedited Forwarding (EF) PHB provides a low loss, low latency, low jitter and guaranteed bandwidth service and can be considered the top priority behavior. Applications such as VoIP require this kind of robust service. The recommended DSCP value for EF is 101110.\n\nAssured Forwarding: With Assured Forwarding (AF) traffic can be divided into four different classes. Each class is usually assigned a specific amount of bandwidth.\n\nWithin each class it is possible to specify three different drop precedence values. This value denotes the order in which packets will be dropped when there is congestion. A packet with a higher drop precedence will be dropped first. This gives us an AF matrix, and hence AF is often denoted AFxy, where x is the class number and y is the drop precedence. The table below shows the DSCP values recommended for the AF PHB. This gives us an AF matrix, and hence AF is often denoted AFxy, where x is the class number and y is the drop precedence. Table1.1 shows the DSCP values recommended for the AF PHB.\n\nDiffServ domain\n\nA DiffServ domain (DS-domain) is a network that has been set up according to a particular DiffServ specification, and which has a set of DSCP values mapped to certain PHBs. As each router in a DiffServ domain forwards traffic based on DSCP value mapping, we can only guarantee that we get the correct forwarding treatment within our own DS-domain. As soon as a packet leaves the domain we can no longer guarantee how other routers will map our DSCP values. The same goes for incoming traffic - we must reclassify incoming traffic to match our rules. This means we must mark the traffic with a DSCP value valid in our domain. This is usually done by looking at the packet header and setting a new DSCP value based on the source address, port numbers, etc. The marking process is called traffic conditioning and is done at the boundary nodes of the DS domain.\n\nVLAN 802.1P model\n\nIEEE 802.1P defines a QoS model at OSI Layer 2 (L2, Data Link). This is called CoS, Class of Service, and adds an extra 3-bit field (called user-priority) to the VLAN MAC header. This splits traffic into 8 different classes. Priority is set up in the switches, which then use different queuing disciplines to forward the packets correctly. Although the 802.1P CoS works well, it lacks scalability and cannot provide end-to-end guarantees. We cannot assume the L2 protocol to be constant on a larger network or on the Internet. Therefore, most of today’s high-end switches implement mapping from L3 (IP DSCP) QoS to L2 CoS.\n\nThe DiffServ implementation in routers\n\nRouters handle the forwarding of network traffic from one network to another. All packets entering from one network (see Figure 3) are queued before being processed, to determine which network they should be forwarded to. The DiffServ implementation in routers is a way of providing forwarding treatment based on the DSCP of an incoming packet. This is done by using queuing disciplines and prioritizing of packets. Note that router configuration is brand dependent and is not covered by this document.\n\nQueue disciplines\n\nTo be able to provide the mechanism desired by DiffServ the routers implement different ways of handling its queues. These different techniques are known as queuing disciplines and are algorithms designed to provide different service guarantees.To exemplify the use of different queuing disciplines we will briefly explain FIFO queues and priority queues.\n\nFIFO is the simplest queuing discipline and is usually the default setting in network routers. FIFO describes the simple First-In-First-Out behavior of the queue. The below image shows a FIFO queue where packets enter from the left and exit to the right. The first packet entering will be the first packet sent out on the port. Other packets will be placed at the end of the queue and must wait their turn. This discipline is too basic to provide any QoS service.\n\nPriority queuing\n\nPriority queuing is a relatively simple way of implementing differentiated service classes in a router. Instead of using one FIFO queue only, several are used, and each is assigned a different priority. A classifier determines which queue to put the incoming packet in, and the scheduler puts the packets out onto the network. The classifier parses the header of incoming packets and decides which priority queue to put the packetin. In a DiffServ network this decision is based on the DSCP value of the incoming packet. The scheduler ensures that the high priority queue gets served first, the medium priority queue next, and so on. This discipline allows the traffic to be prioritized.\n\nIPv6 (Internet Protocol version 6) was initially designed by the IETF to replace the current IP version 4 (IPv4). The most likely scenario now is that IPv4 will remain even after IPv6 enters the arena. One of the main reasons for the introduction of IPv6 is the growing shortage of IPv4 addresses. Additionally, IPv6 also adds improvements in areas such as routing and network auto-configuration. Some general information about IPv6 addresses and configuration is provided in the following sections, and the complete IPv6 specifications can be found in the RFC 2460 specifications.\n\nIPv6 addresses\n\nThe IPv6 address is written in hexadecimal form, and consists of eight double-bytes separated by colons. To make the address representation as short as possible, a number of consecutive zeros may be abbreviated to a double colon, which is allowed once in any single IPv6 address. Instead of using a subnet mask as in IPv4, IPv6 simply uses a network prefix length. The prefix length is appended to the address.\n\nExample: fe80::250:daff:fe4d:7592/64\n\nThe prefix length specifies how many bits of the address will be considered part of the prefix. In the example above, the first 64 bits specify the network address, while the final 64 bits specify the host address. IPv6 addresses can be assigned in different ways:\n\nA link-local IPv6 address is automatically configured.\n\nA DHCPv6 server can be used to assign IPv6 addresses.\n\nRouter advertisements can be used to assign auto-configured addresses.\n\nAuto-configured link-local address\n\nA device that supports IPv6 will get an auto-configured link-local address that starts with fe80. The remainder of the address is usually built on a so-called EUI64 address. The EUI64 address is constructed by taking the Ethernet MAC address of the network interface, and filling it with two specific bytes (fffe) in the middle, to get a 64-bit address (see the example address in the previous section.)\n\nAuto-configuration using router advertisements\n\nIn an IPv6 network, network devices may be auto-configured by listening to advertisements sent by routers in the network. These advertisements will then define how the network devices should be configured in order to be able to be routable. A routable IPv6 address can be derived by using the information in the router advertisements. This auto-configured address is derived using the EUI64 address, together with the address of the router and the network prefix. The router advertisements may instruct the network device to use DHCPv6, and if so, at which level.\n\nDHCPv6 configuration\n\nJust as an IPv4 network may use a DHCP server to assign IP configuration, an IPv6 network may use a DHCPv6 server. DHCPv6 can be used at different levels:\n\nIn stateless mode the DHCPv6 server will designate the network servers to use, e.g., DNS servers and NTP servers, but it will not assign IPv6 addresses for network devices. This must be done using some other method.\n\nIn stateful mode, the DHCPv6 server will also assign IPv6 addresses to the network devices, as well as assigning the network servers as in stateless mode.\n\nAccessing IPv6 devices\n\nMost programs accept host names and will automatically look up the IPv6 address. This is the preferred way of passing addresses to programs. If the name maps to an IPv4 address, IPv4 will be used. If the name maps to an IPv6 address, IPv6 will be used. If there are both IPv4 and IPv6 mappings, the operating system will decide which to try first. To pass IPv6 literal addresses to a program, there are a few points to consider. When passing an URL, brackets must be used. To pass IPv6 literal addresses to a program, there are a few points to consider. When passing an URL, brackets must be used. For example:\n\nExampleCommenthttp://[2001:5c0:84d9:2:240:8cff:fe6b:3cb9]Accessing an Axis device using httphttp://[2001:5c0:84d9:2:240:8cff:fe6b:3cb9]:8080Accessing an Axis device using http and custom httpporthttps://[2001:5c0:84d9:2:240:8cff:fe6b:3cb9]Accessing an Axis device using httpshttp://root:pass@[2001:5c0:84d9:2:240:8cff:fe6b:3cb9]Accessing an Axis device using http and pre-entered access credentialshttp://[fe80::2:240:8cff:fe6b:3cb9%eth0]Accessing an Axis device using the link-local address. Note that the network interface is specified after the IPv6 address. This is because the link-local prefix fe80::/10 has multi-path routes, i.e., one route per interface. The routing system has no way of knowing which interface the device you are trying to contact is located on.\n\nMost programs (e.g., FTP, Telnet, etc) will accept the IPv6 address in its literal form such as ftp 2001:5c0:84d9:2:240:8cff:fe6b:3cb9 or ftp fe80::2:240:8cff:fe6b:3cb9%4. Some programs may take the interface identifier in a non-standard way. An example of this is the ping6 tool usually distributed with linux. It expects to be run like this ping6 -I eth1 fe80::2:240:8cff:fe6b:3cb9. On Windows you can see the identifier of each adapter by running ‘ipconfig’ and finding the IPv6 link-local address of that interface. It may look something like this:\n\nCommon IPv6 addresses and ranges\n\nIPv6 addressExplanation0:0:0:0:0:0:0:0Equals IPv4 0.0.0.0 and is the source address of a host before it receives an IP address from DHCP0:0:0:0:0:0:0:1Equals ::1 and is the equivalent of IPv4 127.0.0.10:0:0:0:0:0:192.168.100.1This is how an IPv4 address would be written in a dual-stack mixed IPv4-IPv6 environment2000:::/3The global unicast address rangeFC00::/7The unique local unicast rangeFE80::/10The link-local unicast rangeFF00::/8The multicast range3FFF:FFFF::/32Reserved for examples and documentation2001:0DB8::/32Reserved for examples and documentation2002::/16Used for IPv6 to IPv4 tunneling and used as a transition system which allows IPv6 packets to be transported over an IPv4 network without the need to configure an explicit tunnel.\n\nThere are different levels of security for a network’s infrastructure and the devices connected to it. The first level is authentication and authorization. The user or device identifies itself to the network and the remote end by a username and password, which are then verified before the device is allowed into the system. Added security can be achieved by encrypting the data to prevent others from using or reading the data. Common methods are HTTPS (also known as SSL/ TLS), VPN, and WEP or WPA in wireless networks. IEEE 802.1X is an authentication and authorization technique. Axis network video products support IEEE 802.1X as a security feature. This section presents the background of IEEE 802.1X, as well as its working principle. It also describes how IEEE 802.1X should be used in Axis devices, and how the RADIUS (remote authentication dial-in user service) servers and switches need to be configured. The intended audience of this document is technical personnel and system integrators.\n\nIEEE 802.1X is an IEEE standard for port-based network access control (“port” means the physical connection to the LAN infrastructure). It is part of the IEEE 802.1 group of networking protocols and provides an authentication mechanism for devices to connect to a LAN, either establishing a connection or preventing the connection if authentication fails. IEEE 802.1X prevents what is called “port hi-jacking”, that is, when an unauthorized computer gets access to a network through a network jack inside or outside a building. IEEE 802.1X is useful in network video applications since their devices are often located in public spaces where a network jack can pose a security risk. In modern enterprise networks, IEEE 802.1X is becoming a basic requirement for anything that is connected to a network.\n\nWorking principle\n\nThere are three basic terms in IEEE 802.1X. The user or client that wants to be authenticated is called a supplicant. The actual server doing the authentication, typically a RADIUS server, is called the authentication server. And the device in between, such as a switch, is called the authenticator. The protocol used in IEEE 802.1X is EAPOL (Extensible authentication protocol encapsulation over LANs). There are several modes of operation, but the most common case is described here:\n\nThe authenticator sends an “EAP-Request/Identity” packet to the supplicant as soon as it detects that the network link is active (this could be because the supplicant, for example a specific Axis device in a network video system, is connected to the switch).\n\nThe supplicant sends an “EAP-Response/Identity” packet to the authenticator.\n\nThe “EAP-Response/Identity” packet is then passed on to the authentication (RADIUS) server by the authenticator.\n\nThe authentication server sends back a challenge to the authenticator, such as with a token password system.\n\nThe authenticator unpacks this from IP and repackages it into EAPOL and sends it to the supplicant. Different authentication methods will vary this message and the total number of messages. EAP supports client-only authentication and strong mutual authentication.\n\nThe supplicant responds to the challenge by the authenticator.\n\nThe authenticator passes the response to the challenge onto the authentication server.\n\nIf the supplicant provides proper identity, the authentication server responds with a success message to the authenticator.\n\nThe success message is then passed onto the supplicant by the authenticator. The authenticator now allows access of the supplicant to the LAN, possibly restricted based on attributes that came back from the authentication server. For example, the authenticator might switch the supplicant to a particular virtual LAN or install a set of firewall rules.\n\nIt should be noted that setting up and configuring IEEE 802.1X is a fairly complex procedure, and it is important that RADIUS servers, switches, and clients (such as Axis devices) are set up correctly.\n\nWith AXIS OS 11.8 and later, IEEE 802.1AE MACsec capabilities were added to AXIS OS-based devices.\n\nIEEE 802.1AE MACsec (Media Access Control Security) is a well-defined network protocol that cryptographically secures point-to-point ethernet links on network layer 2 ensuring the confidentiality and integrity of data transmissions between two hosts.\n\n* List of example network protocols used by Axis devices that are protected by IEEE 802.1AE MACsec. MACsec adds protection to network protocols without native security capabilities and adds an additional layer of protection as well to network protocols with built-in security.\n\nUnlike protocols such as IPSec which operates at Layer 3 as an end-to-end technology, MACsec encrypts each frame that leaves the Ethernet LAN and decrypts the frames as it enters the Ethernet LAN. In order to achieve end-to-end network encryption using MACsec, all links/hops in between source and destination need to have MACsec enabled to ensure traffic traversing across a network is MACsec protected.\n\nA single link/hop that does not support MACsec will therefore leave network traffic unencrypted from that link/hop to the next.\n\nNot only does MACsec prevent unauthorized access to network data streams through strong encryption but also prevents man-in-the-middle attack scenarios. Because MACsec operates at the low layer 2 of the network stack, it adds an additional layer of security to network protocols that do not offer native encryption capabilities (ARP, NTP, DHCP, LLDP, CDP…) as well as ones that do offer it alike (HTTPS, TLS). The illustration below outlines the MACsec frame.\n\nA Security Tag (SecTAG) containing MACsec parameters is inserted immediately after the source mac address in the Ethernet Header. The Integrity Check Value(ICV) is calculated via an agreed algorithm by the sender and attached to the frame. When the receiver receives the frame, it will use the same algorithm to calculate the ICV again and compare it with the one attached to the packet. The integrity is confirmed if the two ICV values are identical which means the packet is not tampered.\n\nTerminologies\n\nAcronymTerminologyDescriptionCAsecure Connectivity AssociationA security relationship, established and maintained by key agreement protocols, that comprises a fully connected subset of the service access points in stations attached to a single Local Area Network (LAN) that are to be supported by MACsecCAKConnectivity Association KeyThis key is used to derive the actual keys for the data encryption. CAK can be either manually specified or derived via 802.1x authentication.CKNConnectivity Association Key NameThe name of the CAK.MKAMACsec Key AgreementThe protocol used to negotiate the keys for MACsec.SCSecure ChanelA security relationship used to provide security guarantees for frames transmittedfrom one member of a Connectivity Association (CA) to the others.SAKSecure Association KeyIt is derived from a CAK using a specific algorithm and encrypts data transmitted through an SC.\n\nThe MACsec Key Agreement (MKA)\n\nWhen implementing MACsec between two devices, the MACsec Key Agreement(MKA) protocol provides and manages the session keys. The MKA protocol relies on the EAP framework to establish the communication. The two devices establish a unique connectivity association. Within the CA, there are two secure channels, one for inbound traffic, and the other one for outbound traffic. The two devices use the same cipher suite for data encryption.\n\nMACsec Ciphers\n\nTo protect the confidentiality of the data traveling through the MACsec Secure Channel, the packets are encrypted by the industrial standard GCM-AES-128 or GCM-AES-256 cipher suites. There are another two cipher suites GCM-AES-XPN-128 and GCM-AES-XPN-256. XPN standards for Extended Packet Numbering, these two ciphers are generally used on high-speed links.\n\nIn the current implementation, AXIS OS supports GCM-AES-128 cipher suite only. Additional cipher suites can be added on demand.\n\nMACsec modes\n\nThe IEEE 802.1AE MACsec standard describes two modes of operation, a manually configurable Pre-Shared Key (PSK)/Static CAK mode and an automatic Master Session/Dynamic CAK mode using IEEE 802.1X EAP-TLS sessions. The Pre-Shared Key mode is recommended to be used when the connecting network switch is not capable of supporting auto-negotiation through IEEE 802.1X EAP TLS.\n\nSince IEEE 802.1X EAP-TLS is enabled by default and through that, MACsec Master Session/Dynamic CAK mode is also automatically enabled. When plugging in a factory defaulted Axis device, IEEE 802.1X network authentication will be tried and when successful, MACsec Dynamic CAK mode will be tried as well. If the connected switch does not support IEEE 802.1X EAP TLS and/or MACsec Dynamic CAK, then the Axis device will simply connect anyway without further enforced security mechanisms.\n\nWhen implementing MACsec in conjunction with EAP-TLS, the Authenticator or the access switch performs the 802.1x authentication against the devices first. Once authentication is successful, the Radius server sends the master session key (MSK) to the switch and the device. The CAK and CKN will be derived from the MSK by both parties.\n\nFollowing that, the MKA protocol is enabled on both parties on the link to start the MACsec session. Same as the PSK mode, one of the parties will be elected as the key server to manage the SAK keys. Once the SAK key is exchanged between the parties, the MACsec encryption and decryption starts.\n\nAxis device configuration\n\nSince AXIS OS 10.1 (September 2020), IEEE 802.1X is enabled in the factory default state using the IEEE 802.1AR-compliant Axis device ID certificate. The Axis device will automatically try to authenticate against an IEEE 802.1X-enabled network. For manual IEEE 802.1X configuration, please refer to the AXIS OS Knowledge base. To use 802.1x port-based authentication, the network must be equipped with a RADIUS server and a network switch with support for IEEE 802.1X and IEEE 802.1AE MACsec. You may also need to contact your network administrator for information on certificates and further configuration of the RADIUS server.\n\nOnce the 802.1x authentication is done, if the switch supports MACsec, the MACsec talk will happen accordingly.\n\nFreeradius Server configuration\n\nOnce the Freeradius server is up and running, there is just one additional step needed to enable the usage of MACsec through the Freeradius server side. The FreeRADIUS server in this case needs to send the EAP-KEY-NAME attribute for the switch to derive the Session-ID used in creating the CKN and CAK for MKA.\n\nTo enable FreeRADIUS to send the EAP-Session-ID in Access-Accept frames, please uncomment the following lines inside:\n\n/etc/freeradius/sites-enabled/default for FreeRADIUS 2.x\n\nor\n\n/etc/freeradius/3.0/sites-enabled/default in case of FreeRADIUS 3.x\n\nIn this document, we are using the Aruba CX switch series that requires a User-Role after the 802.1x authentication to trigger the MACsec. The “Aruba-User-Role” is a vendor-specific-value sent from the FreeRadius server to the Aruba switch based on the EAP-identity configured in the AXIS OS devices. To do that, please add below to the file /etc/freeradius/3.0/users.\n\nAruba ClearPass Policy Manager configuration\n\nPlease follow the instructions here to securely onboard the Axis devices into Aruba networks. The integration guide outlines example configurations in great detail using IEEE 802.1AR and 802.AE MACsec for secure zero trust network integration of Axis devices into Aruba networks. The “Aruba-user-Role” attribute must also be dispatched from the ClearPass Policy Manager to the switch.\n\nAruba switch configuration\n\n1. Configure the MACsec policy\n\nswitch(config)# macsec policy macsec-eap switch(config-macsec-policy)# cipher-suite gcm-aes-128 switch(config-macsec-policy)# replay-protection window-size 100 switch(config-macsec-policy)# exit switch(config)#\n\n2. Configure the port-access role\n\nswitch(config)# port-access role axiscamera switch(config-pa-role)# associate macsec-policy macsec-eap switch(config-pa-role)# auth-mode client-mode\n\n3. enable MACsec on the port\n\nswitch(config-if)# aaa authentication port-access dot1x authenticator switch(config-if-dot1x-auth)# macsec switch(config-if-dot1x-auth)# mka cak-length 16\n\nThe cak-length should be configured to 16 bytes for the dot1x authentication mode in our current implementation.\n\nVerify the MACsec status on the AXIS OS devices:\n\nBelow is what the MACsec frames look like when doing a packet trace from the camera directly. Go to System > Logs > Network trace.\n\nVerify the MACsec status on the Aruba Switch:\n\nswitch# show macsec status MACsec Protocol Status Interface Port ID Policy Protection Status State ---------- -------- ------------------------- -------------------- ------- -------------- 1/1/27 1 macsec-eap IC, Conf, Offset 0 Up Retire 1/1/28 1 axis_ms_policy IC, Conf, Offset 0 Up Retire\n\nSW23# show mka policy MKA Policy Details =================== Policy Name: MKA_Auth_1/1/27_b8a44f4645f4 --------------------------------------------------------------------------- Mode : EAP-TLS CKN : b0d80475242fbcd5c97ece50670e4dfe CAK (encrypted) : AQBapQh5tkM/wWCQLE4jp0G/Iu6IfO+QutBMu8gFBKf... Key-server Priority : 0 Transmit Interval : 2 seconds\n\nPolicy Name: axis-mka_policy --------------------------------------------------------------------------- Mode : Pre-shared key CKN : 00112233445566771111111111111111 CAK (encrypted) : AQBapcO5rGnurI1zhrDB3JVwhbLmJhcgQkiRWgiJtfK... Key-server Priority : 5 Transmit Interval : 2 seconds\n\nPrior to AXIS OS 11.4, AXIS OS products used Bonjour to announce their presence in the network. Starting from AXIS OS 11.4, we added new service names — vapix-http and vapix-https — to simplify the discovery of Axis devices and better comply with the RFC 6763 specification. In the table below, you can see some examples of service names used on AXIS OS devices.\n\nService nameDefault instance nameTransport protocolPort\n\n(default port number)TXTRemark< 11.4≥ 11.4axis-videoAXIS <model> - mac/serial number**TCPhttp port\n\nIf http (and http re-direct) is disabled, it will not be advertised.macaddressCamera and audio productsaxis-bwsc TCPmacaddressBody Worn SCUaxis-nvr TCPmacaddressRecordershttpAXIS <model> - mac/serial number**AXIS <model>*** TCP80httpsTCP443rtspTCP554path, cameravapix-http*\n\nvapix-https*N/ATCPThe HTTP or HTTPS port of the service. By default 80 or 443.\n\nsn=<serial number>\n\ntxtvers=1\n\nep=param,apidisc,decaf****\n\ntags= *****\n\nAdded from AXIS OS 11.4.\n\n*VAPIX is Axis own open API (Application Programming Interface) to our products, using standard protocols that enable integration into a wide range of solutions on different platforms.\n\n** Example: AXIS P1375 - B8A44F42B4C6\n\n*** Example: AXIS P1375. If you add a second device of the same model, the second one will be named AXIS P1375 (2) and so on.\n\n**** param stands for param.cgi, apidisc stands for apidiscovery, and decaf stands for device configuration framework. Decaf was added in AXIS OS 11.11 and is included in all subsequent versions.\n\n***** This field is used by services to indicate temporary roles.\n\nAXIS OS < 11.4\n\nIn the below example, an Axis P1375 camera is running on the AXIS OS version earlier than 11.4. We use AXIS IP Utility to discover an Axis device. AXIS IP Utility sends a query message including PTR record. Querying a service instance called “_axis-video._tcp.local”.\n\nOnce the Axis device receives the query message, it will respond with a mDNS query response containing the PTR record and additional records.\n\n“AXIS P1375 - B8A44F42B4C6” is the service instance name. “_axis-video._tcp” is the service type that identifies what the service does and its transport protocol. In this example, the Axis device announces itself by providing the “_axis-video” service through TCP. The TXT record contains the mac address information of the Axis device.\n\nAXIS OS ≥ 11.4\n\nBelow is another example that the same Axis P1375 camera running on version 11.4. The camera announces the service instance as “AXIS P1375._vapix-http(s)._tcp.local”. In the TXT records, additional information has been included there.\n\nThe devices are still announcing all the previous service names at the same time for the time being. So the VMSs and other clients should still be able to discover the Axis Devices, see below.\n\nThe default instance name (in the webpage, we call “Bonjour name” or “Friendly name”) can be changed when needed:\n\nAXIS OS versionWeb interface configuration path< 7.10Setup > System Options > Network > Bonjour ≥ 7.10Settings > System > TCP/IP > Friendly name≥ 10.9System > Network > Network discovery protocols\n\nAfter changing the friendly name, it will apply to all services.\n\nAll Axis devices with AXIS OS 7.10 and higher are utilizing LLDP (Link Layer Discovery Protocol) to neighbor-announce their identity and capabilities information using the TLV-encoding scheme (Type-Length-Value) in the network. When sending out LLDP announcements, it is possible to configure certain information such as system description and name of the device. In order to configure specific LLDP settings, you can access the device via SSH, SSH is disabled per default and can be enabled in Settings > System > Plain config > Network. Once SSH access is established, type \"lldpcli\". See the following instructions for further commands that can be used in the LLDPCLI.\n\nIn addition to neighbor announcements, LLDP can also be used for software-based PoE negotiation. IEEE 802.3at (30 W PoE+) capable devices support software-based PoE negotiations, and IEEE 802.3af (15.4 W) capable devices running AXIS OS 9.20 and higher support the LLDP allocation of max-power towards the connected PoE-switch. When enabled, the Axis device will notify the PoE-switch about its max PoE consumption so that the PoE-switch can perform a better PoE-management and allocate less PoE to the network port. LLDP allocation for max-power can be enabled in Settings > System > Plain config > Network > LLDP POE > LLDP Send Max PoE. Both methods utilize the LLDP Dot3 PoE-MDI TLV.\n\nWhen LLDP allocation for max-power is enabled in the Axis device, and the network switch is configured properly in regards to LLDP- and PoE-mode according to vendor documentation, the network switch should be able to reserve the exact amount of max PoE wattage that the Axis device would need. The example below illustrates the behavior of LLDP allocation for max-power being enabled and disabled in an Axis device.\n\nWhen LLDP allocation for max-power is disabled, the network switch will reserve the full amount of 15.4 W PoE according to IEEE 802.3af with no savings gained. Compare this with having the LLDP allocation for max-power enabled, which will result in the network switch reserving in total 11.3 W PoE instead, where 9.6 W results from the needs of the Axis device and the additional 1.7 W is a margin for power loss due to cable length. This improved PoE management results in saving 4.1 W PoE that can be used on a different network port on the same network switch.\n\nMedia Endpoint Discovery (LLDP-MED)\n\nLLDP-MED (Media Endpoint Device Extension) is an extension on top of the LLDP protocol stack that allows devices to include more information (TLVs) during LLDP exchange with network neighbors. At the time of writing (December 2020), Axis devices do not support LLDP-MED extensions and therefore do not support e.g. the LLDP-MED POE-MDI TLV for PoE power negotiation.\n\nMQTT is a machine-to-machine (M2M)/Internet of things (IoT) connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport and is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n\nMQTT is quickly becoming the standard communication protocol for implementing IoT solutions due to its lightweight and bandwidth-efficient characteristics. You can read more about benefits and usecases in the whitepaper Device integration with MQTT or keep on reading to learn more about configuring MQTT, starting with the most important components.\n\nClient\n\nAny publisher or subscriber that connects to a centralized server/broker over a network is a client. Both publishers and subscribers are called clients since they connect to a centralized service. Clients can be persistent or transient. Persistent clients maintain a session with the server/ broker while transient clients are not tracked by the server/ broker. Clients often connect to the server/ broker through libraries and SDKs.\n\nServer/broker\n\nThe server/broker is the software that receives all the messages from the publishing clients and sends them to the subscribing clients. It holds the connection to persistent clients. Since the server/broker can become a bottleneck or result in a single point of failure, it is often clustered for scalability and reliability. It is up to the implementor to decide how to create a scalable server/broker infrastructure. Some of the commercial implementations of MQTT brokers include HiveMQ, Xively, AWS IoT and Loop.\n\nTopic\n\nA topic in MQTT is an endpoint information that a client (publisher) can share, and another client (subscriber) can connect to. Topics are simple, hierarchical strings, encoded in UTF-8, delimited by a forward slash. For example, \"building1/room1/temperature\" and \"building1/room1/humidity\" are valid topic names.\n\nConnection\n\nMQTT can be utilized by clients based on TCP/IP. The standard port exposed by servers/brokers is 1883, which is not a secure port. Servers/brokers that support TLS/SSL typically use port 8883. For secure communication, the clients and the server/broker rely on digital certificates.\n\nAfter connecting to an MQTT broker, the user must specify event and event filtering related configurations, which can be found under Settings > System > Events > MQTT events.\n\nThe below MQTT configuration shows a typical setup where the Axis device will be configured to send specific events to the MQTT broker, in this example by using manual trigger and virtual input.\n\nNote\n\nIf a specific option is missing in the list of conditions, you may need to enable the functionality and then reboot the device for the condition to appear.\n\nExample: If \"Shock detected\" is missing, go to Settings > System > Detectors and enable shock detection, and then reboot the device. Performing this step will add \"Shock detected\" to the list of conditions.\n\nThe examples in this section are illustrated using an Eclipse Mosquitto broker and an MQTT client such as MQTT Explorer, which has a graphical user interface.\n\nNote that if no event is added, the Axis device will not send any events to the MQTT broker. Furthermore, it’s only possible to select virtual input as an event topic. The virtual input trigger usually consists of 32–64 virtual inputs, and if virtual input is selected as an event topic, all available virtual inputs are considered.\n\nKeep: also known as retain. Defines if the broker should retain the last state of this message in the brokers cache so that new MQTT subscribers will get the actual state of the event directly after subscription. This setting affects stateful and stateless events of an Axis device. Go to the Event and action services section in the VAPIX library for information about if particular events are stateful or stateless.\n\nNone: all events are sent as non-retained, regardless if they are stateful or stateless events.\n\nProperty: only stateful events are sent as non-retained, regardless if they are stateful or stateless events.\n\nAll: all stateful and stateless events are sent as retained messages.\n\nQoS: defines the level of service upon message delivery. For more information, see MQTT QoS settings.\n\nTo exemplify we have configured the manual trigger as an event to be published to the MQTT broker. The manual trigger is a stateful event, meaning that the manual trigger at all times is in either one of two states; 0 or 1. In the two configurations below we compare two possible scenarios.\n\nWe do not want the broker to keep the last known event state of the manual trigger to be available for newly subscribed MQTT clients.\n\nWe do want the broker to keep the last known event state of the manual trigger to be available for newly subscribed MQTT clients.\n\nScenario 1\n\nScenario 2\n\nLet’s assume that the manual trigger was triggered, and that we have been connected to a broker in order to subscribe to it. As you can see below, we would see the actual MQTT message because we were connected and subscribed to the broker at the same time the manual trigger triggered.\n\nIn case we would not have been connected to the broker with our MQTT client and would have connected at a later point in time, we would still see the last state of the manual trigger event if we had configured the event as \"Retain=Property\", as can be seen below:\n\nIf we had configured the manual trigger event as \"Retain=Off\", we would not see the last message of the manual trigger and would only receive newly triggered events after we had been connected to the broker in question. Reasonably, no events would be listed:\n\nAfter successful configuration we can see that the Axis device is publishing events for the manual trigger (=VirtualPort) and the 64 virtual inputs.\n\nBy expanding the tree structure further, we can see the status of each individual virtual input, identified by the port argument.\n\nInclude condition name\n\nEnable Include condition name to include the entire event topic name tree instead of just the raw event itself.\n\nEnabled\n\nDisabled\n\nInclude condition namespaces\n\nEnable Include condition namespaces if the ONVIF topic namespaces should be included.\n\nEnabled\n\nDisabled\n\nInclude serial number in payload\n\nEnable Include serial number in payload to include the serial number of the Axis device in the MQTT payload message. This could be used as additional information to identify the sending device.\n\nEnabled\n\nDisabled\n\nWith AXIS OS 11.4 and subsequent versions, you can overlay MQTT subscription data onto the video stream. In this section, we guide you through the process of implementing this feature.\n\nFirst, make sure the device can successfully publish MQTT messages to the broker. In the screenshot below, we have a door monitor that can publish the door status among other information to the broker.\n\nIn the Axis device web interface, go to System > MQTT > MQTT client and fill in the necessary information for the MQTT broker based on your setup. Once finished, you should be able to see the MQTT connection status has changed to Connected.\n\nAfter that, you can create MQTT overlays in the Axis device. Go to System > MQTT > MQTT overlays and click Add overlay modifier.\n\nThere are two types of modifiers:\n\n#XMP: The payload tag. The overlay modifier with #XMP form contains the entire payload of a published MQTT message.\n\n#XMD: The data tag. The overlay modifier with #XMD form contains the JSON value of a key in the payload of a published MQTT message.\n\nLet’s take a second look at the door monitor. In the published message, there’s a section called “announce”:\n\nEnter shellies/announce in the Topic filter. Click Save to subscribe to this topic and use it as an overlay.\n\nThis will generate a modifier called #XMP0.\n\nOn the same page, click Overlays. On the Overlays page, you can see the entire payload of the message as an overlay in the live view.\n\nYou can also choose to only overlay a specific part of the message, such as the IP address of the door monitor. That’s what the #XMD modifier is used for.\n\nGo to System > MQTT > MQTT overlays and click Add overlay modifier. Enter shellies/announce in the Topic filter and ip in the Data field. Finally, click Save.\n\nYou should now see a new overlay modifier in the list:\n\nOn the same page, click Overlays. On the Overlays page, create a new text overlay with #XMD1 in the string. For example, The IP address of the door monitor is: #XMD1. In the overlay, #XMD1 will be replaced by the door monitor’s IP address.\n\nIn some scenarios, subscribed messages include a lot of information in JSON format. Objects might also be nested within other objects, as in the example below.\n\nTo overlay the number of humans, for instance, you would enter message.data.human in the overlay modifier Data field.\n\nWith AXIS OS 11.8 and later, the MQTT graph overlay feature has been added to ARTPEC- 8 products as well (except the fisheye and panoramic cameras). The steps to create the MQTT overlays are the same aside from the final step to add the overlays in the video stream. Instead of overlaying the MQTT data in text format, it’s displayed in graphs.\n\nIn the following example, we’ll use the MQTT graph overlay to display the room temperature and the battery level, drawn from the door monitor data below:\n\nGo to System > MQTT > MQTT overlays and click Add overlay modifier . Create one for the door monitor’s room temperature and another for the door monitor’s battery level.\n\nOnce created, both overlay modifiers should be visible on the list.\n\nOn the same page, click Overlays. On the Overlays page, create a new Widget: Linegraph overlay.\n\nSelect ##XMP0 as the overlay modifier.\n\nCreate another graph overlay for the battery level of the door monitor. This time, use Widget: Meter instead. Select #XMP1 as the overlay modifier.\n\nIn this section you can read about the configuration steps required to connect an Axis device to an MQTT broker in order to publish topics. For further reading, go to https://docs.microsoft.com/en-us/azure/iot-hub/quickstart-send-telemetry-cli and https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-mqtt-support.\n\nImportant\n\nThe below steps illustrate basic integration and use-cases within a test lab environment. Axis strongly recommends following the provider’s guidelines for an integration that maximizes the handling of certificates, tokens, user-credentials and overall cybersecurity in a production environment.\n\nStep 1: Certificate authority configuration\n\nIn order to configure certificate-based authentication in Microsoft Azure, a trusted root certificate is required, which is used to sign and verify clients and their certificates in return. The below process describes how to add a root certificate in Azure and how to apply the proof-of-possession method in order to prove to Azure that this root certificate should be verified and trusted.\n\nLet’s create a root certificate of our choice by running the following commands:\n\nopenssl genrsa -des3 -out R2D2AzureRootCA.key 2048\n\nopenssl req -new -x509 -days 36500 -key R2D2AzureRootCA.key -out R2D2AzureRootCA.pem\n\nDownload the certificate that was created in the PowerShell and upload the certificate in the certificate store as seen below.\n\nAs you might have noticed, the status of the new root certificate is “Unverified”, meaning that we need to prove to Azure that the uploading user is in real possession of the certificate and its authority. Therefore, Azure requires us to sign a new certificate from the root certificate that was uploaded, which includes the below verification code in the CN/Subject of the new certificate.\n\nWith the help of the below commands, a new certificate is created. Observe that the verification code must be used in the CN/Subject of the new certificate. Note that a challenge password during the certificate creation is not needed.\n\nopenssl genrsa -out R2D2AzureRootCAProof.key 2048\n\nopenssl req -new -out R2D2AzureRootCAProof.csr -key R2D2AzureRootCAProof.key\n\nopenssl x509 -req -in R2D2AzureRootCAProof.csr -CA R2D2AzureRootCA.pem -CAkey R2D2AzureRootCA.key -CAcreateserial -out R2D2AzureRootCAProof.pem -days 36500\n\nAfter the certificate has been successfully created, download it in order to upload it into the certification store to confirm the proof-of-possession. Upon successful verification, the certificate status should change to “Verified”.\n\nStep 2: Create an IoT device\n\nIn order to send MQTT messages from an Axis device to Microsoft Azure using certificate-based authentication, a new IoT device needs to be created with the appropriate authentication method.\n\nThe Axis device must authenticate using a new client certificate that needs to be generated and signed from the root certificate that we uploaded in step 1. The below commands or similar are needed to do so:\n\nopenssl genrsa -out R2D2AzureACCC8E68CB0A.key 2048\n\nopenssl req -new -out R2D2AzureACCC8E68CB0A.csr -key R2D2AzureACCC8E68CB0A.key\n\nopenssl x509 -req -in R2D2AzureACCC8E68CB0A.csr -CA R2D2AzureRootCA.pem -CAkey R2D2AzureRootCA.key -CAcreateserial -out R2D2AzureACCC8E68CB0A.pem -days 36500\n\nObserve that the device ID must match the CN/Subject of the client certificate exactly, or the authentication will fail. Note that a challenge password during certificate creation is not needed.\n\nStep 3: Axis device configuration\n\nIn the last step, the previously created client certificate needs to be uploaded onto the Axis device, and be selected in the MQTT broker configuration. The rest of the configuration is well documented in the Microsoft Azure guidelines.\n\nStep 4: Listen to MQTT events\n\nNow we're ready to test our setup. Use the following command in the Cloud Shell to listen to incoming MQTT events from the Axis device. The simplest way of testing is to use the manual trigger in the Axis device.\n\nCloud Shell command: az iot hub monitor-events --hub-name R2D2-IoT-Hub\n\nGo to Microsoft Azure (SAS token) and see the example in Step 4 for more information.\n\nIn this section you can read about the configuration steps required to connect an Axis device to an Amazon Web Services (AWS) MQTT broker in order to publish topics. For further reading, go to https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html#mqtt-sdk.\n\nImportant\n\nThe below steps illustrate basic integration and use-cases within a test lab environment. Axis strongly recommends following the provider’s guidelines for an integration that maximizes the handling of certificates, tokens, user-credentials and overall cybersecurity in a production environment.\n\nStep 1: Create a thing policy\n\nBefore we start creating a thing device in AWS, we want to configure the thing policy first. The thing policy is basically access and connection rights give"
    }
}