{
    "id": "dbpedia_3062_1",
    "rank": 44,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/3140607.3050761",
        "read_more_link": "",
        "language": "en",
        "title": "Just-In-Time GPU Compilation for Interpreted Languages with Partial Evaluation",
        "top_image": "https://dl.acm.org/cms/asset/fb1a970d-41fc-442d-9f1a-1ea3dc8e4173/3140607.cover.jpg",
        "meta_img": "https://dl.acm.org/cms/asset/fb1a970d-41fc-442d-9f1a-1ea3dc8e4173/3140607.cover.jpg",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81548008457&format=rel-imgonly&assetId=juanfumero.jpg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81490694960&format=rel-imgonly&assetId=michelsquare.jpg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81548008457&format=rel-imgonly&assetId=juanfumero.jpg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81490694960&format=rel-imgonly&assetId=michelsquare.jpg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Lukas Stadler Oracle Labs",
            "AT View Profile",
            "Juan Fumero",
            "Michel Steuwer",
            "Lukas Stadler",
            "Christophe Dubach"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Computer systems are increasingly featuring powerful parallel devices with the advent\nof many-core CPUs and GPUs. This offers the opportunity to solve computationally-intensive\nproblems at a fraction of the time traditional CPUs need. However, ...",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM SIGPLAN Notices",
        "canonical_link": "https://dl.acm.org/doi/10.1145/3140607.3050761",
        "text": "Abstract\n\nComputer systems are increasingly featuring powerful parallel devices with the advent of many-core CPUs and GPUs. This offers the opportunity to solve computationally-intensive problems at a fraction of the time traditional CPUs need. However, exploiting heterogeneous hardware requires the use of low-level programming language approaches such as OpenCL, which is incredibly challenging, even for advanced programmers.\n\nOn the application side, interpreted dynamic languages are increasingly becoming popular in many domains due to their simplicity, expressiveness and flexibility. However, this creates a wide gap between the high-level abstractions offered to programmers and the low-level hardware-specific interface. Currently, programmers must rely on high performance libraries or they are forced to write parts of their application in a low-level language like OpenCL. Ideally, nonexpert programmers should be able to exploit heterogeneous hardware directly from their interpreted dynamic languages.\n\nIn this paper, we present a technique to transparently and automatically offload computations from interpreted dynamic languages to heterogeneous devices. Using just-in-time compilation, we automatically generate OpenCL code at runtime which is specialized to the actual observed data types using profiling information. We demonstrate our technique using R, which is a popular interpreted dynamic language predominately used in big data analytic. Our experimental results show the execution on a GPU yields speedups of over 150x compared to the sequential FastR implementation and the obtained performance is competitive with manually written GPU code. We also show that when taking into account start-up time, large speedups are achievable, even when the applications run for as little as a few seconds.\n\nReferences\n\n[1]\n\nS. Che, M. Boyer, J. Meng, D. Tarjan, J. W. Sheaffer, S. H. Lee, and K. Skadron. Rodinia: A Benchmark Suite for Heterogeneous Computing. IISWC 2009.\n\n[2]\n\nG. Duboscq, T. Würthinger, L. Stadler, C. Wimmer, D. Simon, and H. Mössenböck. Graal IR: An Intermediate Representation for Speculative Optimizations in a Dynamic Compiler. VMIL 2013.\n\n[3]\n\nJ. J. Fumero, T. Remmelg, M. Steuwer, and C. Dubach. Runtime Code Generation and Data Management for Heterogeneous Computing in Java. PPPJ 2015.\n\n[4]\n\nJ. J. Fumero, M. Steuwer, and C. Dubach. A Composable Array Function Interface for Heterogeneous Computing in Java. ARRAY, 2014.\n\n[5]\n\nY. Futamura. Partial Evaluation of Computation Process--An Approach to a Compiler-Compiler. Higher-Order and Symbolic Computation, 1999.\n\n[6]\n\nA. Gal, C. W. Probst, and M. Franz. HotpathVM: An Effective JIT Compiler for Resource-constrained Devices. VEE 2006.\n\n[7]\n\nU. Hölzle, C. Chambers, and D. Ungar. Debugging optimized code with dynamic deoptimization. PLDI 1992.\n\n[8]\n\nK. Ishizaki, A. Hayashi, G. Koblents, and V. Sarkar. Compiling and optimizing java 8 programs for gpu execution. In PACT, 2015.\n\n[9]\n\nT. Kalibera, P. Maj, F. Morandat, and J. Vitek. A Fast Abstract Syntax Tree Interpreter for R. VEE 2014.\n\n[10]\n\nM.-J. Kallen and H. Mühleisen. Latest developments around renjin. Talk at R Summit & Workshop, Copenhagen, 2015.\n\n[11]\n\nM. N. Kedlaya, B. Robatmili, C. Caşcaval, and B. Hardekopf. Deoptimization for Dynamic Language JITs on Typed, Stack-based Virtual Machines. VEE 2014.\n\n[12]\n\nT. Kotzmann, C. Wimmer, H. Mössenböck, T. Rodriguez, K. Russell, and D. Cox. Design of the Java HotSpot&Trade; Client Compiler for Java 6. ACM Trans. Archit. Code Optim.\n\n[13]\n\nS. K. Lam, A. Pitrou, and S. Seibert. Numba: A LLVM-based Python JIT Compiler. LLVM 2015.\n\n[14]\n\nM. Paleczny, C. Vick, and C. Click. The java hotspottm server compiler. JVM' 2001.\n\n[15]\n\nU. Pitambare, A. Chauhan, and S. Malviya. Just-in-time Acceleration of JavaScript. In Technical Report, School of Informatics and Computing, Indiana University, 2013.\n\n[16]\n\nP. C. Pratt-Szeliga, J. W. Fawcett, and R. D. Welch. Rootbeer: Seamlessly Using GPUs from Java. HPCC-ICESS, 2012.\n\n[17]\n\nK. Rupp. GPU-Accelerated Non-negative Matrix Factorization for Text Mining. page 77, 2012.\n\n[18]\n\nL. Stadler, A. Welc, C. Humer, and M. Jordan. Optimizing R Language Execution via Aggressive Speculation. DLS 2016.\n\n[19]\n\nL. Stadler, T. Würthinger, and H. Mössenböck. Partial escape analysis and scalar replacement for Java. In CGO, 2014.\n\n[20]\n\nJ. Talbot, Z. DeVito, and P. Hanrahan. Riposte: A Trace-driven Compiler and Parallel VM for Vector Code in R. PACT '12, 2012.\n\n[21]\n\nH. Wang, D. Padua, and P. Wu. Vectorization of Apply to Reduce Interpretation Overhead of R. OOPSLA 2015.\n\n[22]\n\nH. Wang, P. Wu, and D. Padua. Optimizing R VM: Allocation Removal and Path Length Reduction via Interpreter-level Specialization. CGO 2014.\n\n[23]\n\nT. Würthinger, C. Wimmer, A. Wöß, L. Stadler, G. Duboscq, C. Humer, G. Richards, D. Simon, and M. Wolczko. One VM to Rule Them All. Onward! 2013.\n\n[24]\n\nW. Zaremba, Y. Lin, and V. Grover. JaBEE: Framework for Object-oriented Java Bytecode Compilation and Execution on Graphics Processor Units. GPGPU-5, 2012.\n\nCited By\n\nView all\n\nLi GLiu LFeng XKandemir MJimborean AMoseley TAccelerating GPU computing at runtime with binary optimizationProceedings of the 2019 IEEE/ACM International Symposium on Code Generation and Optimization10.5555/3314872.3314911(276-277)\n\nJacob DTrinder PSinger JMarr SFumero JPython programmers have GPUs too: automatic Python loop parallelization with staged dependence analysisProceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages10.1145/3359619.3359743(42-54)\n\nJacob DSinger JGibbons JALPyNA: acceleration of loops in Python for novel architecturesProceedings of the 6th ACM SIGPLAN International Workshop on Libraries, Languages and Compilers for Array Programming10.1145/3315454.3329956(25-34)\n\nShow More Cited By\n\nRecommendations\n\nJust-In-Time GPU Compilation for Interpreted Languages with Partial Evaluation\n\nVEE '17: Proceedings of the 13th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments\n\nComputer systems are increasingly featuring powerful parallel devices with the advent of many-core CPUs and GPUs. This offers the opportunity to solve computationally-intensive problems at a fraction of the time traditional CPUs need. However, ...\n\nRemote Just-in-Time Compilation for Dynamic Languages\n\nSPLASH 2023: Companion Proceedings of the 2023 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity\n\nCloud platforms allow applications to meet fluctuating levels of demand through automatic horizontal scaling. These deployment models are characterized by short-lived applications running in resource-constrained environments. This amplifies the ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n256 pages\n\nISSN:0362-1340\n\nEISSN:1558-1160\n\nDOI:10.1145/3140607\n\nEditor:\n\nMatthew Fluet\n\nIssue’s Table of Contents\n\n261 pages\n\nISBN:9781450349482\n\nDOI:10.1145/3050748\n\nCopyright © 2017 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected].\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 08 April 2017\n\nPublished in SIGPLAN Volume 52, Issue 7\n\nCheck for updates\n\nQualifiers\n\nTutorial\n\nResearch\n\nRefereed limited\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n22\n\nTotal Citations\n\nView Citations\n\n628\n\nTotal Downloads\n\nDownloads (Last 12 months)58\n\nDownloads (Last 6 weeks)3\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nLi GLiu LFeng XKandemir MJimborean AMoseley TAccelerating GPU computing at runtime with binary optimizationProceedings of the 2019 IEEE/ACM International Symposium on Code Generation and Optimization10.5555/3314872.3314911(276-277)\n\nJacob DTrinder PSinger JMarr SFumero JPython programmers have GPUs too: automatic Python loop parallelization with staged dependence analysisProceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages10.1145/3359619.3359743(42-54)\n\nJacob DSinger JGibbons JALPyNA: acceleration of loops in Python for novel architecturesProceedings of the 6th ACM SIGPLAN International Workshop on Libraries, Languages and Compilers for Array Programming10.1145/3315454.3329956(25-34)\n\nSpringer MWauligmann PMasuhara HElsman MGrelck CKloeckner APadua DSolomonik EModular array-based GPU computing in a dynamically-typed languageProceedings of the 4th ACM SIGPLAN International Workshop on Libraries, Languages, and Compilers for Array Programming10.1145/3091966.3091974(48-55)\n\nFumero JBlanaru FStratikopoulos ADohrmann SViswanathan SKotselidis CBruno RMoss EUnified Shared Memory: Friend or Foe? Understanding the Implications of Unified Memory on Managed HeapsProceedings of the 20th ACM SIGPLAN International Conference on Managed Programming Languages and Runtimes10.1145/3617651.3622984(143-157)\n\nStratikopoulos ABlanaru FFumero JXekalaki MPapadakis OKotselidis CCross-Language Interoperability of Heterogeneous CodeCompanion Proceedings of the 7th International Conference on the Art, Science, and Engineering of Programming10.1145/3594671.3594675(17-21)\n\nBlanaru FStratikopoulos AFumero JKotselidis CCriswell JWilliams DXia YEnabling pipeline parallelism in heterogeneous managed runtime environments via batch processingProceedings of the 18th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments10.1145/3516807.3516821(58-71)\n\nPapadimitriou MFumero JStratikopoulos AKotselidis CTitzer BXu HZhang IAutomatically exploiting the memory hierarchy of GPUs through just-in-time compilationProceedings of the 17th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments10.1145/3453933.3454014(57-70)\n\nHenriksen TBounds Checking on GPUInternational Journal of Parallel Programming10.1007/s10766-021-00703-4\n\nMorton JKaszyk KLi LSun JDubach CSteuwer MCole MO'Boyle MDelayRepay: delayed execution for kernel fusion in PythonProceedings of the 16th ACM SIGPLAN International Symposium on Dynamic Languages10.1145/3426422.3426980(43-56)\n\nShow More Cited By\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nJuan Fumero\n\nThe University of Edinburgh\n\nMichel Steuwer\n\nThe University of Edinburgh\n\nLukas Stadler\n\nOracle Labs, AT\n\nChristophe Dubach\n\nThe University of Edinburgh\n\nRequest permissions Authors Info & Affiliations"
    }
}