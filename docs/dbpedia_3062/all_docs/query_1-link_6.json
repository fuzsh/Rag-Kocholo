{
    "id": "dbpedia_3062_1",
    "rank": 6,
    "data": {
        "url": "https://discourse.julialang.org/t/the-problem-with-julia-that-makes-me-want-to-leave-first-run-times/114316",
        "read_more_link": "",
        "language": "en",
        "title": "The Problem with Julia that makes me want to leave - First run Times",
        "top_image": "https://global.discourse-cdn.com/julialang/original/3X/4/d/4d76a1d8062ed9397f2f00f22abdd69926b51785.png",
        "meta_img": "https://global.discourse-cdn.com/julialang/original/3X/4/d/4d76a1d8062ed9397f2f00f22abdd69926b51785.png",
        "images": [
            "https://sea2.discourse-cdn.com/julialang/user_avatar/discourse.julialang.org/mrufsvold/48/31600_2.png",
            "https://sea2.discourse-cdn.com/julialang/user_avatar/discourse.julialang.org/maddy/48/210658_2.png",
            "https://sea2.discourse-cdn.com/julialang/user_avatar/discourse.julialang.org/maddy/48/210658_2.png",
            "https://sea2.discourse-cdn.com/julialang/user_avatar/discourse.julialang.org/mrufsvold/48/31600_2.png",
            "https://sea2.discourse-cdn.com/julialang/user_avatar/discourse.julialang.org/maddy/48/210658_2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "discussion",
            "speed-optimization",
            "runtime-dispatch"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-15T18:16:51+00:00",
        "summary": "",
        "meta_description": "I started my programming journey in Python. A year ago, to create a real-time simulation, I came to know about Julia with its great speed. \nI used Julia for the first time and I remember the spark of joy I had while mess&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/julialang/optimized/3X/5/2/52e282d46eadd4022c458057bb740061d8efad72_2_32x32.png",
        "meta_site_name": "Julia Programming Language",
        "canonical_link": "https://discourse.julialang.org/t/the-problem-with-julia-that-makes-me-want-to-leave-first-run-times/114316",
        "text": "I started my programming journey in Python. A year ago, to create a real-time simulation, I came to know about Julia with its great speed.\n\nI used Julia for the first time and I remember the spark of joy I had while messing around with natively available heavy math functions. Julia was fast. I converted my custom Python functions in Julia and it was orders of magnitude faster.\n\nBut for some reason I used Manim (Makie/Plots/Javis/Luxor just aren’t as flourished), switching back to Python for a while. And… honestly, I felt relieved not to wait for a minute or two each time I open the code editor. Relieved for not having to wait for my functions to be compiled. I would just open my PC, get to work, test things and I’ll be done!\n\nThis brings me thinking about a few things. Julia, although there is this discourse, has a lack of community. The Manim discord had people helping out EVERY second. No joke. There were always people just helping you.\n\nJulia has a GREAT community too. I’ve had many people help me. Greatly! But it just isn’t as good as Python. Which is obvious. But, although it’s an open secret, Julia’s first run time straight up sucks! Gosh! If only Julia didn’t have that would it be the BEST language!\n\nNo doubt, to have an efficient project, Julia is better. But if you just wanna test things out, the run time takes away the fun. Once the code compiles, the results are instantaneous. But really, this is perhaps one of the reasons Julia wouldn’t make it in the vast community. The language is the God’s gift for the long run. But for quick tasks, I would prefer to use Python or some other language (And it really hurts).\n\nAny updates on the first run times? Anything that we can do about them?\n\nYou can do:\n\njulia -O0\n\nJulia compiles, and by default uses optimization level 2; 1 would also be an option. even --compile=min (I though all of this though outdated advice). Compile times are a less of an issue now in e.g. version 1.10 (with precompiled packages), but note optimization is always a tradeoff, when you actually have to wait for compile times. It always slows down compilation, and you may pay it at runtime (when for non-package code, or in case they get recompiled).\n\nPython is often described as interpreted, but it’s actually compiled too (to bytecode), just not optimized as much. And since Python 3.13 alpha, has experimental JIT.\n\nIt doesn’t have to be either or. I hadn’t heard of Manim, but you can use any plotting solution with Julia, look up PythonCall.jl, and the examples are for other Python plotting packages, but should translate. I.e. you basically use Manim docs and discord and those people can help with anything. And Julia people with Julia specific stuff. And you get the fast startup of any Python package (basically they are written in C and fully precompiled, why fast to start, not because of Python).\n\nJulia doesn’t have to suck, even for startup, at least with Python…"
    }
}