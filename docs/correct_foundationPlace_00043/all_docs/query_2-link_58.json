{
    "id": "correct_foundationPlace_00043_2",
    "rank": 58,
    "data": {
        "url": "https://radar.inria.fr/rapportsactivite/RA2013/arles/uid20.html",
        "read_more_link": "",
        "language": "en",
        "title": "Team:ARLES",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/logo_INRIA-coul.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/xml_motif.png",
            "https://radar.inria.fr/rapportsactivite/RA2013/arles/IMG/qrcode-arles-pdf.png",
            "https://radar.inria.fr/rapportsactivite/RA2013/arles/IMG/qrcode-arles-epub.png",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/previous_motif.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/up_motif.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/next_motif.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/previous_motif.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/up_motif.jpg",
            "https://radar.inria.fr/rapportsactivite/RA2013/static/img/icons/next_motif.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Research Program - Engineering Pervasive Software Systems",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Section: Research Program\n\nEngineering Pervasive Software Systems\n\nSince its emergence, middleware has proved successful in assisting distributed software development, making development faster and easier, and significantly promoting software reuse while overcoming the heterogeneity of the distributed infrastructure. As a result, middleware-based software engineering is central to the principled development of pervasive computing systems. In this section, we (i)Â discuss challenges that middleware brings to software engineering, and (ii)Â outline a revolutionary approach to middleware-based software engineering aiming at the dynamic runtime synthesis of connectors, a.k.a emergent middleware.\n\nMiddleware-based Software Engineering\n\nMiddleware establishes a new software layer that homogenizes the infrastructure's diversities by means of a well-defined and structured distributed programming model, relieving software developers from low-level implementation details, by: (i)Â at least abstracting transport layer network programming via high-level network abstractions matching the application computational model, and (ii)Â possibly managing networked resources to offer quality of service guarantees and/or domain specific functionalities, through reusable middleware-level services. More specifically, middleware defines:\n\nA resource definition language that is used for specifying data types and interfaces of networked software resources;\n\nA high-level addressing scheme based on the underlying network addressing scheme for locating resources;\n\nInteraction paradigms and semantics for achieving coordination;\n\nA transport/session protocol for achieving communication; and\n\nA naming/discovery protocol with related registry structure and matching relation for publishing and discovering the resources available in the given network.\n\nAttractive features of middleware have made it a powerful tool in the software system development practice. Hence, middleware is a key factor that has been and needs to be further taken into account in the Software Engineering (SE) discipline (W. Emmerich. Software Engineering and Middleware: a roadmap. In Proceedings of the Conference on the Future of Software Engineering, Limerick, Ireland, Jun. 2000.). The advent of middleware standards have further contributed to the systematic adoption of this paradigm for distributed software development.\n\nIn spite of the above, mature engineering methodologies to comprehensively assist the development of middleware-based software systems, from requirements analysis to deployment and maintenance, are lagging behind. Indeed, systematic software development accounting for middleware support is rather the exception than the norm, and methods and related tools are dearly required for middleware-based software engineering. This need becomes even more demanding if we consider the diversity and scale of today's networking environments and application domains, which makes middleware and its association with applications highly complex [5] , raising new, challenging requirements for middleware. Among those, access to computational resources should be open across network boundaries and dynamic due to the potential mobility of host- and user-nodes. This urges middleware to support methods and mechanisms for description, dynamic discovery and association, late binding, and loose coordination of resources. In such variable and unpredictable environments, operating not only according to explicit system inputs but also according to the context of system operation becomes of major importance, which should be enabled by the middleware. Additionally, the networking infrastructure is continuing to evolve at a fast pace, and suggesting new development paradigms for distributed systems, calling for next-generation middleware platforms and novel software engineering processes integrating middleware features in all phases of the software development.\n\nBeyond Middleware-based Architectures for Interoperability\n\nAs discussed above, middleware stands as the conceptual paradigm to effectively network together heterogeneous systems, specifically providing upper layer interoperability. That said, middleware is yet another technological block, which creates islands of networked systems.\n\nInteroperable middleware has been introduced to overcome middleware heterogeneity. However, solutions remain rather static, requiring either use of a proprietary interface or a priori implementation of protocol translators. In general, interoperability solutions solve protocol mismatch among middleware at syntactic level, which is too restrictive. This is even truer when one considers the many dimensions of heterogeneity, including software, hardware and networks, which are currently present in ubiquitous networking environments, and that require fine tuning of the middleware according to the specific capacities embedded within the interacting parties. Thus, interoperable middleware can at best solve protocol mismatches arising among middleware aimed at a specific domain. Indeed, it is not possible to a priori design a universal middleware solution that will enable effective networking of digital systems, while spanning the many dimensions of heterogeneity currently present in networked environments and further expected to increase dramatically in the future.\n\nA revolutionary approach to the seamless networking of digital systems is to synthesize connectors on the fly, via which networked systems communicate. The resulting emergent connectors then compose and further adapt the interaction protocols run by the connected systems, from the application layer down to the middleware layer. Hence, thanks to results in this new area, networked digital systems will survive the obsolescence of interaction protocols and further emergence of new ones."
    }
}