{
    "id": "correct_foundationPlace_00043_2",
    "rank": 85,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/1085130.1085146",
        "read_more_link": "",
        "language": "en",
        "title": "On the design of a pervasive debugger",
        "top_image": "https://dl.acm.org/cms/asset/4a38fa2a-bb91-4433-a643-1b94bd3bc7b7/1085130.cover.jpg",
        "meta_img": "https://dl.acm.org/cms/asset/4a38fa2a-bb91-4433-a643-1b94bd3bc7b7/1085130.cover.jpg",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100120074&format=rel-imgonly&assetId=raimondassmall.jpg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alex Ho",
            "Steven Hand"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM Conferences",
        "canonical_link": "https://dl.acm.org/doi/10.1145/1085130.1085146",
        "text": "Abstract\n\nIncreased reuse of software components has led to a software mishmash as existing packages are used as building blocks for new systems. Current debuggers cannot cope with the intricate interactions between components written in different languages and spread over multiple hosts. This paper explores the design of a pervasive debugger for concurrent and distributed applications. By executing the target in a virtualized environment, the debugger can atomically control the entire application, stopping and examining each component in a consistent state. Developers can simultaneously control multiple heterogeneous targets located anywhere in the software hierarchy.\n\nReferences\n\n[1]\n\nP. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. In Proc. of the 19th ACM Symp. on Operating Systems Principles, pp 164--177, Oct. 2003.]]\n\n[2]\n\nP. Bates. Debugging Heterogeneous Distributed Systems Using Event-Based Models of Behavior. In Proc. of the ACM Workshop on Parallel and Distributed Debugging, pp 11--22, May 1988.]]\n\n[3]\n\nP. Bates and J. Wileden. High-Level Debugging of Distributed Systems: The Behavioral Abstraction Approach. Journal of Systems and Software, 3(4):255--264, Dec. 1983.]]\n\n[4]\n\nB. Boothe. Efficient Algorithms for Bidirectional Debugging. In Proc. of the ACM Conf. on Programming Language Design and Implementation, pp 299--310, 2000.]]\n\n[5]\n\nM. Bubak, W. Funika, B. Bali's, and R. Wismüller. On-line Tool Support for Parallel Applications. In 9th International Conference on High Performance Computing and Networking, pp 415--424, Jun. 2001.]]\n\n[6]\n\nK. Chandy and L. Lamport. Distributed Snapshots: Determining Global States of Distributed Systems. ACM Transactions on Computer Systems, 3(1):63--75, Feb. 1985.]]\n\n[7]\n\nR. Crawford, R. Olsson, W. Ho, and C. Wee. Semantic Issues in the Design of Languages for Debugging. Computer Languages, 21(1):17--37, 1995.]]\n\n[8]\n\nJ. Fowler and W. Zwaenepoel. Causal Distributed Breakpoints. In Proc. of the 10th International Conference on Distributed Computing Systems, pp 134--141, 1990.]]\n\n[9]\n\nD. Haban and W. Weigel. Global Events and Global Breakpoints in Distributed Systems. In Proc. of the 21st Annual Hawaii International Conference on System Sciences, Vol. II: Software Track, pp 166--175, Jan. 1988.]]\n\n[10]\n\nA. Ho, S. Hand, and T. Harris. PDB: Pervasive Debugging with Xen. In Proc. of the 5th IEEE/ACM International Workshop on Grid Computing, pp 260--265, Nov. 2004.]]\n\n[11]\n\nW. Hseush and G. Kaiser. Data Path Debugging: Data-Oriented Debugging for a Concurrent Programming Language. In Proc. of the ACM Workshop on Parallel and Distributed Debugging, pp 236--247, May 1988.]]\n\n[12]\n\nS. T. King, G. W. Dunlap, and P. M. Chen. Debugging Operating Systems with Time-Traveling Virtual Machines. In Proc. of the USENIX 2005 Technical Conf., Apr. 2005.]]\n\n[13]\n\nD. Kranzlmüller. DeWiz - Event-based Debugging on the Grid. In Proc. of the 10th Euromicro Workshop on Parallel, Distributed and Network-based Processing, pp 162--169, 2002.]]\n\n[14]\n\nK. Lawton, B. Denney, N. Guarneri, V. Ruppert, and C. Bothamy. Bochs User Manual. 2003.]]\n\n[15]\n\nM. Linton. The Evolution of Dbx. In Proc. of the 1990 Summer Usenix Technical Conf., pp 211--220, Jun. 1990.]]\n\n[16]\n\nB. Miller and J.-D. Choi. Breakpoints and Halting in Distributed Programs. In Proc. of the 8th International Conf. on Dist. Computing Systems, pp 316--323, Jun. 1988.]]\n\n[17]\n\nR. Olsson, R. Crawford, and W. Ho. A Dataflow Approach to Event-based Debugging. Software--Practice & Experience, 21(2):209--230, 1991.]]\n\n[18]\n\nR. Stallman, R. Pesch, S. Shebs, et al. Debugging with GDB. Free Software Foundation, Boston, Mass. 2003.]]\n\nCited By\n\nView all\n\nTse TLo DGorce APerscheid MHirschfeld RWong WEmerging Aspects of Software Fault LocalizationHandbook of Software Fault Localization10.1002/9781119880929.ch13(529-579)\n\nJohnson DHibler MEide EComposable multi-level debugging with StackdbACM SIGPLAN Notices10.1145/2674025.257621249:7(213-226)\n\nJohnson DHibler MEide EHirzel MPetrank ETsafrir DComposable multi-level debugging with StackdbProceedings of the 10th ACM SIGPLAN/SIGOPS international conference on Virtual execution environments10.1145/2576195.2576212(213-226)\n\nShow More Cited By\n\nIndex Terms\n\nOn the design of a pervasive debugger\n\nComputing methodologies\n\nDistributed computing methodologies\n\nDistributed programming languages\n\nParallel computing methodologies\n\nParallel programming languages\n\nSoftware and its engineering\n\nSoftware creation and management\n\nSoftware verification and validation\n\nSoftware defect analysis\n\nSoftware testing and debugging\n\nSoftware notations and tools\n\nGeneral programming languages\n\nLanguage types\n\nDistributed programming languages\n\nParallel programming languages\n\nRecommendations\n\nDesign methodology for on-chip-based processor debugger\n\nDue to the increased complexity of modern embedded systems and time-to-market constraints, a debugger with efficient debugging functions is becoming increasingly necessary, and it plays an important role in the development of application systems. ...\n\nDesign and Implementation of Retargetable Software Debugger Based on GDB\n\nICCIT '08: Proceedings of the 2008 Third International Conference on Convergence and Hybrid Information Technology - Volume 01\n\nMany processors for embedded system have been developed and is widely being used in many industrial area. If we develop a new embedded processor, we need a simulator, compiler, and debugger for developing an operating system and basic program running on ...\n\nArduino Debugger\n\nThis letter describes our source-level debugger for Arduino which can be used to debug the code in Arduino using GNU debugger. The presented solution uses Eclipse as the visual front-end. It does not require any modification of the Arduino board or ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n172 pages\n\nISBN:1595930507\n\nDOI:10.1145/1085130\n\nGeneral Chair:\n\nClinton Jeffery\n\nNew Mexico State University, USA\n\n,\n\nProgram Chairs:\n\nJong-Deok Choi\n\nIBM T.J. Watson Research Center, USA\n\n,\n\nRaimondas Lencevicius\n\nNokia Research Center, USA\n\nCopyright © 2005 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected]\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 19 September 2005\n\nPermissions\n\nRequest permissions for this article.\n\nCheck for updates\n\nAuthor Tags\n\nhorizontal debugging\n\npervasive debugging\n\nvertical debugging\n\nQualifiers\n\nArticle\n\nConference\n\nAADEBUG05\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n4\n\nTotal Citations\n\nView Citations\n\n505\n\nTotal Downloads\n\nDownloads (Last 12 months)4\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nTse TLo DGorce APerscheid MHirschfeld RWong WEmerging Aspects of Software Fault LocalizationHandbook of Software Fault Localization10.1002/9781119880929.ch13(529-579)\n\nJohnson DHibler MEide EComposable multi-level debugging with StackdbACM SIGPLAN Notices10.1145/2674025.257621249:7(213-226)\n\nJohnson DHibler MEide EHirzel MPetrank ETsafrir DComposable multi-level debugging with StackdbProceedings of the 10th ACM SIGPLAN/SIGOPS international conference on Virtual execution environments10.1145/2576195.2576212(213-226)\n\nGroth PMiles SMoreau LA model of process documentation to determine provenance in mash-upsACM Transactions on Internet Technology10.1145/1462159.14621629:1(1-31)\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nAlex Ho\n\nUniversity of Cambridge\n\nSteven Hand\n\nUniversity of Cambridge\n\nRequest permissions Authors Info & Affiliations"
    }
}