{
    "id": "correct_subsidiary_00033_1",
    "rank": 84,
    "data": {
        "url": "https://patents.google.com/patent/US7480417B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US7480417B2 - System and method for encoding mosaiced image data employing a reversible color transform - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/6a/3c/60/14e9e72ad58fa7/US07480417-20090120-D00000.png",
            "https://patentimages.storage.googleapis.com/d2/c9/db/d068fc77cabf32/US07480417-20090120-D00001.png",
            "https://patentimages.storage.googleapis.com/35/69/82/232ee791eb3516/US07480417-20090120-D00002.png",
            "https://patentimages.storage.googleapis.com/d7/4a/f5/296202462da4bf/US07480417-20090120-D00003.png",
            "https://patentimages.storage.googleapis.com/e3/65/66/f4e07d5e98aeac/US07480417-20090120-D00004.png",
            "https://patentimages.storage.googleapis.com/43/cf/a7/f3ffb5cb87a16d/US07480417-20090120-D00005.png",
            "https://patentimages.storage.googleapis.com/d6/5f/7d/37603f4d64a28f/US07480417-20090120-D00006.png",
            "https://patentimages.storage.googleapis.com/c1/7a/43/075937894f500d/US07480417-20090120-D00007.png",
            "https://patentimages.storage.googleapis.com/d7/1c/50/415b58e82717f7/US07480417-20090120-D00008.png",
            "https://patentimages.storage.googleapis.com/b4/44/4c/b1b3e89d72aa1a/US07480417-20090120-D00009.png",
            "https://patentimages.storage.googleapis.com/81/66/20/79bb0311df2cda/US07480417-20090120-D00010.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2004-10-19T00:00:00",
        "summary": "",
        "meta_description": "A new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression. In one embodiment, the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic. That allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw Charged Couple Device (CCD)) images.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US7480417B2/en",
        "text": "System and method for encoding mosaiced image data employing a reversible color transform Download PDF\n\nInfo\n\nPublication number\n\nUS7480417B2\n\nUS7480417B2 US10/968,236 US96823604A US7480417B2 US 7480417 B2 US7480417 B2 US 7480417B2 US 96823604 A US96823604 A US 96823604A US 7480417 B2 US7480417 B2 US 7480417B2\n\nAuthority\n\nUS\n\nUnited States\n\nPrior art keywords\n\nchannels\n\ngreen\n\npixel\n\nimage\n\nblue\n\nPrior art date\n\n2004-10-19\n\nLegal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)\n\nExpired - Fee Related, expires 2027-06-07\n\nApplication number\n\nUS10/968,236\n\nOther versions\n\nUS20060083432A1 (en\n\nInventor\n\nHenrique Malvar\n\nCurrent Assignee (The listed assignees may be inaccurate. Google has not performed a legal analysis and makes no representation or warranty as to the accuracy of the list.)\n\nMicrosoft Technology Licensing LLC\n\nOriginal Assignee\n\nMicrosoft Corp\n\nPriority date (The priority date is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the date listed.)\n\n2004-10-19\n\nFiling date\n\n2004-10-19\n\nPublication date\n\n2009-01-20\n\n2004-10-19 Application filed by Microsoft Corp filed Critical Microsoft Corp\n\n2004-10-19 Priority to US10/968,236 priority Critical patent/US7480417B2/en\n\n2004-11-03 Assigned to MICROSOFT CORPORATION reassignment MICROSOFT CORPORATION ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS). Assignors: MALVAR, HENRIQUE S.\n\n2005-09-16 Priority to JP2005270446A priority patent/JP4884734B2/en\n\n2005-09-19 Priority to CN200510106390A priority patent/CN100586147C/en\n\n2005-09-22 Priority to KR1020050088247A priority patent/KR101201047B1/en\n\n2005-09-26 Priority to EP05108870.6A priority patent/EP1657909B1/en\n\n2006-04-20 Publication of US20060083432A1 publication Critical patent/US20060083432A1/en\n\n2009-01-20 Publication of US7480417B2 publication Critical patent/US7480417B2/en\n\n2009-01-20 Application granted granted Critical\n\n2014-12-09 Assigned to MICROSOFT TECHNOLOGY LICENSING, LLC reassignment MICROSOFT TECHNOLOGY LICENSING, LLC ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS). Assignors: MICROSOFT CORPORATION\n\nStatus Expired - Fee Related legal-status Critical Current\n\n2027-06-07 Adjusted expiration legal-status Critical\n\nLinks\n\nUSPTO\n\nUSPTO PatentCenter\n\nUSPTO Assignment\n\nEspacenet\n\nGlobal Dossier\n\nDiscuss\n\nImages\n\nClassifications\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof\n\nH04N1/46—Colour picture communication systems\n\nH04N1/64—Systems for the transmission or the storage of the colour picture signal; Details therefor, e.g. coding or decoding means therefor\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals\n\nH04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding\n\nH04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding\n\nH04N19/186—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a colour or a chrominance component\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N23/00—Cameras or camera modules comprising electronic image sensors; Control thereof\n\nH04N23/10—Cameras or camera modules comprising electronic image sensors; Control thereof for generating image signals from different wavelengths\n\nH04N23/12—Cameras or camera modules comprising electronic image sensors; Control thereof for generating image signals from different wavelengths with one sensor only\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N23/00—Cameras or camera modules comprising electronic image sensors; Control thereof\n\nH04N23/80—Camera processing pipelines; Components thereof\n\nH04N23/84—Camera processing pipelines; Components thereof for processing colour signals\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N25/00—Circuitry of solid-state image sensors [SSIS]; Control thereof\n\nH04N25/10—Circuitry of solid-state image sensors [SSIS]; Control thereof for transforming different wavelengths into image signals\n\nH04N25/11—Arrangement of colour filter arrays [CFA]; Filter mosaics\n\nH04N25/13—Arrangement of colour filter arrays [CFA]; Filter mosaics characterised by the spectral characteristics of the filter elements\n\nH04N25/134—Arrangement of colour filter arrays [CFA]; Filter mosaics characterised by the spectral characteristics of the filter elements based on three different wavelength filter elements\n\nH—ELECTRICITY\n\nH04—ELECTRIC COMMUNICATION TECHNIQUE\n\nH04N—PICTORIAL COMMUNICATION, e.g. TELEVISION\n\nH04N2209/00—Details of colour television systems\n\nH04N2209/04—Picture signal generators\n\nH04N2209/041—Picture signal generators using solid-state devices\n\nH04N2209/042—Picture signal generators using solid-state devices having a single pick-up sensor\n\nH04N2209/045—Picture signal generators using solid-state devices having a single pick-up sensor using mosaic colour filter\n\nDefinitions\n\nThis invention is directed toward a system and method for encoding and decoding color image data. More particularly, this invention is directed toward a system and method for compressing image data formatted in a mosaiced sampling pattern by employing a reversible color transform.\n\nTypical digital cameras use a single light sensitive sensor and a color filter array. Each pixel element in the color filter array records the intensity information of a single color component, typically red, green or blue. In most applications, the captured data is interpolated into a full color image, which is then compressed.\n\na Bayer-patterned color filter array is often used as the preferred color filter array. In this type of filter, green filters are interlaced with red and blue filters.\n\nthe shape of the data to be compressed after transformation is not rectangular and thus is not suitable for typical JPEG compression.\n\nToi and Ohita [2] apply sub-band decomposition to compress the color filter array data using a non-separable two-dimensional diamond filter to process the quincunx green array. The sub-bands are then encoded for optimum rate-distortion. Reconstruction of the image data is carried out by decoding, synthesizing and interpolating the data to obtain the resultant full color image. This method is also somewhat computationally expensive and since it does not allow for exact invertibility in integer arithmetic it is not suitable for lossless compression.\n\nKoh, Mukherjee and Mitra [4] also devised a method of compressing color filter array data before full color interpolation. In this system, image content affected the performance of the compression and interpolation algorithms and sometimes adversely affected the image quality.\n\nLossy compression allows exact original data to be recovered after compression and decompression\n\nlossy compression allows for the data to be recovered after compression and decompression to vary slightly from the original data.\n\nlossy compression typically provides for a better compression ratio than lossless compression\n\nlossless compression provides a better image quality after decompression.\n\nthe system and method of the present invention overcomes the aforementioned limitations of previous image compression schemes by mapping mosaic-patterned pixels, typical of the Bayer data format, to four color channels that correspond to a regular pattern.\n\ndirect and inverse transform matrices that have integer magnitudes are employed. This provides reduced computational complexity, and lossless compression may be readily achieved.\n\na lossless compression system for raw Charged Couple Device (CCD) data from a digital camera may then be constructed using these reversible color transforms and lossless codecs for each color channel.\n\nCCD Charged Couple Device\n\nthe invention comprises a new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array [1]) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression.\n\nAn additional aspect of the invention is that the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic. That allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw CCD) images.\n\nthis transform was used in a Progressive Transform Codec (PTC) [7], with better compression results and lower computational complexity than systems based on pixel value prediction (such as PNGââportable network graphicsâ).\n\nPTC Progressive Transform Codec\n\nthe transform may be applied with any conventional codec.\n\none embodiment of the invention also provides for a lossy result; in that case the four-channel transform of the invention can be used in either an integer-reversible or a reduced-complexity form, coupled with any lossy image codec.\n\nthe system and method of the invention allows for the efficient compression of raw CCD camera data with a relatively low computational complexity, thus making it attractive to camera manufacturers.\n\nthe system and method of the invention also provides for higher image quality and provides for lower bandwidth requirements to transfer the data to other sites and less storage requirements to save the image data to a storage medium.\n\nthe system and method of the invention also allows for codecs that support both lossless and lossy compression (such as PTC) to be used in a mosaiced-sensor digital camera to support both high compression (lossy) and maximum-fidelity raw (lossless) formats. That is an advantage over current digital cameras that support raw mode, in which different codecs are employed for lossy and lossless compression, increasing firmware size or chip gate count.\n\nlossless and lossy compression such as PTC\n\nFIG. 1 is a diagram depicting a general purpose computing device constituting an exemplary system for implementing the invention.\n\nFIG. 2 is a typical Bayer mosaic for a color image captured in single-CCD digital cameras; there twice as many green (G) pixels as there are red (R) and blue (B) pixels.\n\nFIG. 3 depicts the mapping of a typical three-channel Bayer-mosaiced color image, such as that shown in FIG. 2 , into four regular images of 1 â 4 the original size, each for one of the channels â Y, Dg, Co, Cg â .\n\nFIG. 4 is an example of the color transformation according to the system and method of the present invention.\n\nTop left full-resolution original color image, with three colors (RGB) per pixel location.\n\nTop right Bayer-mosaiced version of the original, according to the sampling pattern of FIG. 2 ; it simulates the output of a single-CCD camera.\n\nBottom left a zoom of the Bayer-mosaiced image, where one can clearly see the jump intensities from each of the R, G, and B locations.\n\nBottom right the four sub-images formed by the YDgCoCg transform of the invention (clockwise from top left: Y, Dg, Cg, Co).\n\nFIGS. 5A and 5B show an exemplary compression system for raw CCD images using the YDgCoCg reversible transform of the system and method of the invention.\n\nFIG. 5A depicts an encoder\n\nFIG. 5B depicts the corresponding decoder.\n\nOne lossless image codec that can be used is a PTC codec [7].\n\nthe reversible transform of the system and method of the invention can be used with any lossless compression system.\n\nFIG. 6A depicts a flowchart of a lossless encoding process according to one embodiment of the invention.\n\nFIG. 6B depicts a flowchart of a lossless decoding process according to one embodiment of the invention.\n\nFIG. 7 is an exemplary implementation of the integer-reversible YDgCoCg-R color space transform via ladder operators according to the system and method of the invention.\n\nTop the 2 â 2 basic direct and inverse ladder operators.\n\nMiddle direct YDgCoCg-R transform.\n\nBottom inverse transform.\n\nFIGS. 8A and 8B show an exemplary lossy compression system for raw CCD images using the YDgCoCg reversible transform of the system and method of the invention.\n\nVarious lossy compressors can be used with the system and method according to the invention, if so desired, to obtain higher compression ratios.\n\nFIG. 8A depicts an encoder\n\nFIG. 8B depicts a corresponding decoder.\n\nFIG. 9A is a flowchart of the lossy encoding process according to one embodiment of the invention.\n\nFIG. 9B is a flowchart of the lossy decoding process according to one embodiment of the invention.\n\nFIG. 1 illustrates an example of a suitable computing system environment 100 on which the invention may be implemented.\n\nthe computing system environment 100 is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment 100 be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment 100 .\n\nthe invention is operational with numerous other general purpose or special purpose computing system environments or configurations.\n\nExamples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.\n\nthe invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer.\n\nprogram modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types.\n\nthe invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.\n\nprogram modules may be located in both local and remote computer storage media including memory storage devices.\n\nan exemplary system for implementing the invention includes a general purpose computing device in the form of a computer 110 .\n\nComponents of computer 110 may include, but are not limited to, a processing unit 120 , a system memory 130 , and a system bus 121 that couples various system components including the system memory to the processing unit 120 .\n\nthe system bus 121 may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures.\n\nsuch architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.\n\nISA Industry Standard Architecture\n\nMCA Micro Channel Architecture\n\nEISA Enhanced ISA\n\nVESA Video Electronics Standards Association\n\nPCI Peripheral Component Interconnect\n\nComputer 110 typically includes a variety of computer readable media.\n\nComputer readable media can be any available media that can be accessed by computer 110 and includes both volatile and nonvolatile media, removable and non-removable media.\n\nComputer readable media may comprise computer storage media and communication media.\n\nComputer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data.\n\nComputer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer 110 .\n\nCommunication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.\n\nmodulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.\n\ncommunication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.\n\nthe system memory 130 includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) 131 and random access memory (RAM) 132 .\n\nROM read only memory\n\nRAM random access memory\n\nBIOS basic input/output system\n\nRAM 132 typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit 120 .\n\nFIG. 1 illustrates operating system 134 , application programs 135 , other program modules 136 , and program data 137 .\n\nthe computer 110 may also include other removable/non-removable, volatile/nonvolatile computer storage media.\n\nFIG. 1 illustrates a hard disk drive 141 that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive 151 that reads from or writes to a removable, nonvolatile magnetic disk 152 , and an optical disk drive 155 that reads from or writes to a removable, nonvolatile optical disk 156 such as a CD ROM or other optical media.\n\nremovable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like.\n\nthe hard disk drive 141 is typically connected to the system bus 121 through anon-removable memory interface such as interface 140\n\nmagnetic disk drive 151 and optical disk drive 155 are typically connected to the system bus 121 by a removable memory interface, such as interface 150 .\n\nhard disk drive 141 is illustrated as storing operating system 144 , application programs 145 , other program modules 146 , and program data 147 . Note that these components can either be the same as or different from operating system 134 , application programs 135 , other program modules 136 , and program data 137 . Operating system 144 , application programs 145 , other program modules 146 , and program data 147 are given different numbers here to illustrate that, at a minimum, they are different copies.\n\na user may enter commands and information into the computer 110 through input devices such as a keyboard 162 and pointing device 161 , commonly referred to as a mouse, trackball or touch pad.\n\nOther input devices may include a microphone, joystick, game pad, satellite dish, scanner, or the like.\n\nThese and other input devices are often connected to the processing unit 120 through a user input interface 160 that is coupled to the system bus 121 , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).\n\na monitor 191 or other type of display device is also connected to the system bus 121 via an interface, such as a video interface 190 .\n\ncomputers may also include other peripheral output devices such as speakers 197 and printer 196 , which may be connected through an output peripheral interface 195 .\n\na camera 163 (such as a digital/electronic still or video camera, or film/photographic scanner) capable of capturing a sequence of images 164 can also be included as an input device to the personal computer 110 . Further, while just one camera is depicted, multiple cameras could be included as an input device to the personal computer 110 . The images 164 from the one or more cameras are input into the computer 110 via an appropriate camera interface 165 .\n\nThis interface 165 is connected to the system bus 121 , thereby allowing the images to be routed to and stored in the RAM 132 , or one of the other data storage devices associated with the computer 110 .\n\nimage data can be input into the computer 110 from any of the aforementioned computer-readable media as well, without requiring the use of the camera 163 .\n\nthe computer 110 may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer 180 .\n\nthe remote computer 180 may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer 110 , although only a memory storage device 181 has been illustrated in FIG. 1 .\n\nthe logical connections depicted in FIG. 1 include a local area network (LAN) 171 and a wide area network (WAN) 173 , but may also include other networks.\n\nLAN local area network\n\nWAN wide area network\n\nSuch networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.\n\nthe computer 110 When used in a LAN networking environment, the computer 110 is connected to the LAN 171 through a network interface or adapter 170 .\n\nthe computer 110 When used in a WAN networking environment, the computer 110 typically includes a modem 172 or other means for establishing communications over the WAN 173 , such as the Internet.\n\nthe modem 172 which may be internal or external, may be connected to the system bus 121 via the user input interface 160 , or other appropriate mechanism.\n\nprogram modules depicted relative to the computer 110 may be stored in the remote memory storage device.\n\nFIG. 1 illustrates remote application programs 185 as residing on memory device 181 . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.\n\nthe invention comprises a new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array [1]) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression.\n\nAn additional aspect of the invention is that the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic.\n\nThis allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw Charged Couple Device (CCD)) images.\n\nThis transform has been used in the PTC codec [7], with better compression results and lower computational complexity than systems based on pixel value prediction (such as PNGââportable network graphicsâ).\n\nPNG Charged Couple Device\n\nFIG. 2 shows a typical pattern of pixel values 202 from a single-CCD digital camera. Different cameras may use different patterns, but almost all follow the Bayer design of twice as many green (G) pixels as red (R) and blue (B) pixels, and a diagonal adjacency (a quincunx pattern) for green pixels and for each red-blue pair.\n\nG green\n\nR red\n\nB blue\n\nthe present invention maps a patterned image such as the one in FIG. 2 into four images of a quarter of the size of the original.\n\nEach of the four images can be seen as an independent color channel, which is independently compressed.\n\nthe four images are smooth, because their pixels correspond to a regular sampling pattern in each of the four channels. Therefore, they compressed well with any lossless image compressor.\n\nthe invention is a method for mapping the mosaic-patterned pixels such as those in FIG. 2 to four color channels that correspond to a regular pattern.\n\nthe basic idea comes for the observation that a Bayer sampling grid such as that in FIG. 2 is regular for every 2 â 2 block of pixels, which we call a âmacropixelâ. So, for each 2 â 2 macropixel of the original mosaiced imaged, one maps its G 1 , G 2 , R, and B values into four new pixels, corresponding to four channels: Y, Dg, Co, Cg. Thus, each of these channels generates a regularly-sampled new image, as shown in FIG. 3 .\n\nthe original three-channel Bayer-mosaiced image 302 is mapped into four regular images of 1 â 4 the size of the original, each for one of the channels â Y, Dg, Co, and Cg â 304 , 306 , 308 and 310 . If the original mosaiced image has N â N pixels, then each of the color channel images has N/2 â N/2 pixels.\n\nmapping from a set of macropixel G 1 , G 2 , R, and B values into the four pixels values Y, Dg, Co, and Cg of the four transformed color channels is given by\n\nBayer-mosaiced (raw) images are encoded via nonlinear predictors that predict the value of a particular pixel in the raw image based on previously-encode neighboring values, taking the Bayer pattern into account.\n\nSome publications have considered the use of color space transforms to map the Bayer-mosaiced â R,G 1 ,G 2 ,B â data into luminance and chrominance channels [3], [4] but they use two luminance channels and two color channels, leading to a higher entropy representation than the four-channel space of the system and method according to the invention (because it has only one luminance channel).\n\nthe transformation matrices in [3], [4] have higher complexity than those in Equations (1) and (2), because their entries are fractional numbers.\n\nthe constructions in [3], [4] do not allow for exact invertibility in integer arithmetic, so they are not suitable for applications such as lossless compression.\n\nFIG. 4 shows an example of using the color space transformation in the system and method according to the invention.\n\nthe top left image 402 is the full-resolution original color image, with three colors (RGB) per pixel location.\n\nthe top right image 404 Bayer-mosaiced version of the original, according to the sampling pattern of FIG. 2 ; it simulates the output of a single-CCD camera.\n\nthe bottom left image 406 is a zoom of the Bayer-mosaiced image, where one can clearly see the jump intensities from each of the R, G, and B locations.\n\nthe bottom right image 408 shows the four sub-images formed by the YDgCoCg transform of the invention (clockwise from top left: Y, Dg, Cg, Co).\n\nthe discontinuities in pixel values in the Bayer-mosaiced image are clear, so that the image should not be fed directly to a single-channel compressor.\n\nthe four sub-images generated by the four-channel color space transformation of the invention are quite smooth, and thus are amenable to compression. Furthermore, one can see that most of the information is in the Y (luminance channel).\n\nthe Dg image shows just details where the gradient in green is largest, and the Co and Cg images are quite soft, because they contain only color information. Therefore, the Dg, Co, and Cg sub-images usually can each be compressed to significantly smaller sizes than that of the compressed version of the Y sub-image.\n\nOne of the main applications of the new four-channel color space transformation of the invention is lossless compression of raw (Bayer-mosaiced) images. For that, one needs to be able not only to map the original â R,G 1 ,G 2 ,B â pixels into the transformed â Y,Dg,Co,Cg â pixels for compression, but after decompression one needs to map the decoded â Y,Dg,Co,Cg â pixels exactly back to the original â R,G 1 ,G 2 ,B â values.\n\nthe original pixel G 1 , G 2 , R, and B values are integer, because the analog/digital converters used in essentially all digital cameras produce integer-valued outputs.\n\nEquation (2) represents a mathematically exact inverse for real numbers, the inverse is not exact in integer arithmetic.\n\nthis invention also comprises a method for computing the direct and inverse transforms in Equations (1) and (2) in such a way that exact inversion under integer arithmetic is achieved.\n\nThis allows for the implementation of a lossless image compression system for raw CCD (mosaiced) images, for example, by the block diagrams in FIGS. 5A and 5B .\n\nthe encoder 502 of one lossless embodiment of the invention is shown in FIG. 5A . It includes a channel splitter 504 , a 4-channel direct color transform module 506 , four lossless encoders, 508 a , 508 b , 508 c , 508 d and a multiplexer 510 .\n\nAn exemplary flowchart of the encoding process is shown in FIG. 6A . As shown in FIG. 6A , process action 602 , raw CCD data is input into the channel splitter.\n\nthe channel splitter splits the raw CCD data (in Bayer format) into four channels, R, G 1 , G 2 and B on a macro-pixel basis (e.g., for every set of R, G 1 , G 2 and B adjacent pixels in the Bayer format). Then, as shown in process action 604 , the 4 channel direct color transform converts the R, G 1 , G 2 and B channels into a Y, Dg, Co, and Cg color space or Y, Dg, Co, and Cg channels (process action 606 ). This results in four sub-images, each 1 â 4 the size of the originally input data, for the Y, Dg, Co and Cg components. The four sub-images are each input into a lossless encoder (process action 608 ). The four encoded channels, one for each sub-image, are then combined (process action 610 ) to yield an encoded file or bit stream.\n\nprocess action 604 the 4 channel direct color transform converts the R, G 1 , G 2 and B channels into a\n\nthe decoder 514 is shown in FIG. 5B . It includes a demultiplexer 516 , four lossless decoders 518 a , 518 b , 518 c , 518 d , a 4-channel inverse color transform 520 , and a channel combiner 522 .\n\nAn exemplary flowchart of the decoding process is shown in FIG. 6B . As shown in FIG. 6B , process action 612 , an encoded file or bit stream is input into the demultiplexer which separates the encoded file or bit stream into separate encoded channels (process action 614 ).\n\nthe separate encoded channels are each input into a lossless decoder which decodes each encoded channel (process action 616 ) into Y, Dg, Co, and Cg components.\n\nthe 4-channel inverse color transform then transforms the Y, Dg, Co, and Cg components into R, G 1 , G 2 and B channels (process action 618 ).\n\na channel combiner then combines the R, G 1 , G 2 and B channels into the decoded CCD data (in Bayer format), as shown in process action 620 .\n\nthe integer-reversible four-channel color transform of the invention is called the YDgCoCg-R transform, similarly to the YCoCg-R transform used in the PTC codec [7], [9].\n\nthe direct and inverse YDgCoCg-R transforms are specified by the pseudo-code below.\n\nEquations (4) is the exact inverse of the direct transform in Equations (3)\n\nthe inverse transform recovers the same intermediate values, and from them the original values. That is because it performs the reverse of each equation in exactly the reverse order. So, the truncation errors in the inverse transform equation are identical to those of the direct transform equation, but with reversed signs. Thus, the truncation errors cancel out.\n\nEquations (3) and (4) can be represented by the flow graphs in FIG. 7 .\n\nthe direct and inverse transform are computed via repeated applications of a simple 2-input, 2-ouput ladder operator, for which two inputs x and y are mapped to two outputs (x+y)/2 and x â y.\n\nThat 2 â 2 ladder transform is called the âaverage/difference ladderâ [10]; the average output (x+y)/2 has a small truncation error, which is canceled out by the inverse ladder.\n\nThat ladder construction has been the basis of many techniques for reversible transforms, including reversible block transforms [6], [7] and reversible wavelet transforms [8].\n\nthe new reversible YDgCoCg-R color space transform is thus an extension of the previous YCoCg-R reversible transform [9]. While YCoCg-R is useful for mapping full-resolution â R,G,B â data into luminance/chrominance channels in a reversible way, YDgCoCg-R is useful for mapping Bayer-mosaiced â R,G,B â data into smooth luminance/chrominance channels, in a reversible way.\n\nlossy compression that is, a system similar to that in FIGS. 5A and 5B , but with the encoders and decoders being lossy.\n\nSuch a system could be an efficient way of performing lossy compression of images produced by a Bayer-mosaiced CCD sensor in a digital camera; it could lead to better results than the traditional approach of first applying a demosaicing (interpolation) filter and then encoding the resulting three-channel RGB image with a lossy compressor, such as JPEG.\n\nthe inverse transform is very simple: it involves only additions and subtractions; no multiplications or shifts. So, the form above is attractive in applications where decoder complexity is more important than encoder complexity.\n\nFIGS. 8A and 8B A schematic of an implementation of a lossy compression system for raw CCD (mosaiced) images is shown by the block diagrams in FIGS. 8A and 8B .\n\na lossy compression system for raw CCD (mosaiced) images is shown by the block diagrams in FIGS. 8A and 8B .\n\nthe encoder 802 for a lossy compression system is shown in FIG. 8A . It includes a channel splitter 804 , a 4-channel direct color transform 806 , four lossy encoders, 808 a , 808 b , 808 c , 808 d and a multiplexer 810 .\n\nAn exemplary flowchart is shown in FIG. 9A . As shown in FIG. 9A , process action 902 , raw CCD data is input into the channel splitter. The channel splitter splits the raw CCD data (in Bayer format) into four channels, R, G 1 , G 2 and B on a macro-pixel basis.\n\nthe 4 channel direct color transform converts the R, G 1 , G 2 and B into a Y, Dg, Co, and Cg channels (process action 906 ).\n\nthe four sub-images are each input into a lossy encoder (process action 908 ).\n\nthe four encoded channels, one for each sub-image, are then combined (process action 910 ) to yield an encoded file or bit stream.\n\nthe decoder 814 shown in FIG. 8B It includes a demultiplexer 816 , four lossy decoders 818 a , 818 b , 818 c , 818 d , a 4-channel inverse color transform 820 , and a channel combiner 822 .\n\nAn exemplary flowchart is shown in FIG. 9B .\n\nprocess action 912 an encoded file or bit stream is input into the demultiplexer which separates the encoded file or bit stream into separate encoded channels (process action 914 ).\n\nthe separate encoded channels are each input into a lossy decoder which decodes each encoded channel (process action 916 ) into Y, Dg, Co, and Cg components.\n\nthe 4-channel inverse color transform then transforms the Y, Dg, Co, and Cg components into R, G 1 , G 2 and B channels (process action 918 ).\n\na channel combiner then combines the R, G 1 , G 2 and B channels into the decoded CCD data (in Bayer format) as shown in process action 920 .\n\nLandscapes\n\nEngineering & Computer Science (AREA)\n\nMultimedia (AREA)\n\nSignal Processing (AREA)\n\nPhysics & Mathematics (AREA)\n\nSpectroscopy & Molecular Physics (AREA)\n\nCompression Or Coding Systems Of Tv Signals (AREA)\n\nImage Processing (AREA)\n\nColor Television Systems (AREA)\n\nColor Image Communication Systems (AREA)\n\nCompression Of Band Width Or Redundancy In Fax (AREA)\n\nFacsimile Image Signal Circuits (AREA)\n\nAbstract\n\nA new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression. In one embodiment, the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic. That allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw Charged Couple Device (CCD)) images.\n\nDescription\n\nBACKGROUND\n\n1. Technical Field\n\nThis invention is directed toward a system and method for encoding and decoding color image data. More particularly, this invention is directed toward a system and method for compressing image data formatted in a mosaiced sampling pattern by employing a reversible color transform.\n\n2. Background Art\n\nTypical digital cameras use a single light sensitive sensor and a color filter array. Each pixel element in the color filter array records the intensity information of a single color component, typically red, green or blue. In most applications, the captured data is interpolated into a full color image, which is then compressed. A Bayer-patterned color filter array is often used as the preferred color filter array. In this type of filter, green filters are interlaced with red and blue filters.\n\nIt has been noted, however, that when color interpolation is performed before compression, instead of after compression, better image quality and higher compression ratios can be achieved. Typically the goal in image compression is to increase the compression ratio of the compressed data while maintaining high image quality.\n\nThere are various problems with known image compression systems, however, even those that interpolate before compressing the data. For instance, direct compression of color filter array data with Joint Photographic Experts Group (JPEG) compression produces poor quality images. If, however, the Bayer patterned color filter array data is separated into the three primary components (red, green, blue), the red and blue components can be down-sampled into a compact rectangular array and compressed directly. To do this it is necessary to find a transformation of the quincunx green pixels typical of the Bayer format into a form suitable for compression. Lee and Ortega [3] use a reversible transformation that maps pixel information from the Bayer pattern color filter array into another range. The mapping rotates the original interlaced array into a rhombus, packing the data together. However, the shape of the data to be compressed after transformation is not rectangular and thus is not suitable for typical JPEG compression. Toi and Ohita [2] apply sub-band decomposition to compress the color filter array data using a non-separable two-dimensional diamond filter to process the quincunx green array. The sub-bands are then encoded for optimum rate-distortion. Reconstruction of the image data is carried out by decoding, synthesizing and interpolating the data to obtain the resultant full color image. This method is also somewhat computationally expensive and since it does not allow for exact invertibility in integer arithmetic it is not suitable for lossless compression. Koh, Mukherjee and Mitra [4] also devised a method of compressing color filter array data before full color interpolation. In this system, image content affected the performance of the compression and interpolation algorithms and sometimes adversely affected the image quality.\n\nIn general, there are two types of compressionâlossy and lossless. Lossless compression allows exact original data to be recovered after compression and decompression, while lossy compression allows for the data to be recovered after compression and decompression to vary slightly from the original data. There is a tradeoff between these two types of compression in that lossy compression typically provides for a better compression ratio than lossless compression, while lossless compression provides a better image quality after decompression.\n\nIt is noted that in the remainder of this specification, the description refers to various individual publications identified by a numeric designator contained within a pair of brackets. For example, such a reference may be identified by reciting, âreference [1]â or simply â[1]â. A listing of the publications corresponding to each designator can be found at the end of the Detailed Description section.\n\nSUMMARY\n\nThe system and method of the present invention overcomes the aforementioned limitations of previous image compression schemes by mapping mosaic-patterned pixels, typical of the Bayer data format, to four color channels that correspond to a regular pattern. In some embodiments of the invention, direct and inverse transform matrices that have integer magnitudes are employed. This provides reduced computational complexity, and lossless compression may be readily achieved. A lossless compression system for raw Charged Couple Device (CCD) data from a digital camera may then be constructed using these reversible color transforms and lossless codecs for each color channel.\n\nThe invention comprises a new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array [1]) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression.\n\nAn additional aspect of the invention is that the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic. That allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw CCD) images. In one working embodiment of the system and method of the invention this transform was used in a Progressive Transform Codec (PTC) [7], with better compression results and lower computational complexity than systems based on pixel value prediction (such as PNGââportable network graphicsâ). However, the transform may be applied with any conventional codec.\n\nWhen lossless compression is not necessary, one embodiment of the invention also provides for a lossy result; in that case the four-channel transform of the invention can be used in either an integer-reversible or a reduced-complexity form, coupled with any lossy image codec.\n\nThe system and method of the invention allows for the efficient compression of raw CCD camera data with a relatively low computational complexity, thus making it attractive to camera manufacturers. The system and method of the invention also provides for higher image quality and provides for lower bandwidth requirements to transfer the data to other sites and less storage requirements to save the image data to a storage medium.\n\nThe system and method of the invention also allows for codecs that support both lossless and lossy compression (such as PTC) to be used in a mosaiced-sensor digital camera to support both high compression (lossy) and maximum-fidelity raw (lossless) formats. That is an advantage over current digital cameras that support raw mode, in which different codecs are employed for lossy and lossless compression, increasing firmware size or chip gate count.\n\nIn addition to the just described benefits, other advantages of the present invention will become apparent from the detailed description which follows hereinafter when taken in conjunction with the drawing figures which accompany it.\n\nDESCRIPTION OF THE DRAWINGS\n\nThe file of this patent contains at least one drawing executed in color. Copies of this patent with color drawing(s) will be provided by the U.S. patent and Trademark Office upon request and payment of the necessary fee.\n\nThe specific features, aspects, and advantages of the invention will become better understood with regard to the following description, appended claims, and accompanying drawings where:\n\nFIG. 1 is a diagram depicting a general purpose computing device constituting an exemplary system for implementing the invention.\n\nFIG. 2 is a typical Bayer mosaic for a color image captured in single-CCD digital cameras; there twice as many green (G) pixels as there are red (R) and blue (B) pixels.\n\nFIG. 3 depicts the mapping of a typical three-channel Bayer-mosaiced color image, such as that shown in FIG. 2, into four regular images of Â¼ the original size, each for one of the channels {Y, Dg, Co, Cg}.\n\nFIG. 4 is an example of the color transformation according to the system and method of the present invention. Top left: full-resolution original color image, with three colors (RGB) per pixel location. Top right: Bayer-mosaiced version of the original, according to the sampling pattern of FIG. 2; it simulates the output of a single-CCD camera. Bottom left: a zoom of the Bayer-mosaiced image, where one can clearly see the jump intensities from each of the R, G, and B locations. Bottom right: the four sub-images formed by the YDgCoCg transform of the invention (clockwise from top left: Y, Dg, Cg, Co).\n\nFIGS. 5A and 5B show an exemplary compression system for raw CCD images using the YDgCoCg reversible transform of the system and method of the invention. FIG. 5A depicts an encoder, while FIG. 5B depicts the corresponding decoder. One lossless image codec that can be used is a PTC codec [7]. However, the reversible transform of the system and method of the invention can be used with any lossless compression system.\n\nFIG. 6A depicts a flowchart of a lossless encoding process according to one embodiment of the invention.\n\nFIG. 6B depicts a flowchart of a lossless decoding process according to one embodiment of the invention.\n\nFIG. 7 is an exemplary implementation of the integer-reversible YDgCoCg-R color space transform via ladder operators according to the system and method of the invention. Top: the 2Ã2 basic direct and inverse ladder operators. Middle: direct YDgCoCg-R transform. Bottom: inverse transform.\n\nFIGS. 8A and 8B show an exemplary lossy compression system for raw CCD images using the YDgCoCg reversible transform of the system and method of the invention. Various lossy compressors can be used with the system and method according to the invention, if so desired, to obtain higher compression ratios. FIG. 8A depicts an encoder, while FIG. 8B depicts a corresponding decoder.\n\nFIG. 9A is a flowchart of the lossy encoding process according to one embodiment of the invention.\n\nFIG. 9B is a flowchart of the lossy decoding process according to one embodiment of the invention.\n\nDETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS\n\nIn the following description of the preferred embodiments of the present invention, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.\n\n1.0 Exemplary Operating Environment\n\nFIG. 1 illustrates an example of a suitable computing system environment 100 on which the invention may be implemented. The computing system environment 100 is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment 100 be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment 100.\n\nThe invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.\n\nThe invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.\n\nWith reference to FIG. 1, an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer 110. Components of computer 110 may include, but are not limited to, a processing unit 120, a system memory 130, and a system bus 121 that couples various system components including the system memory to the processing unit 120. The system bus 121 may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.\n\nComputer 110 typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer 110 and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer 110. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term âmodulated data signalâ means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.\n\nThe system memory 130 includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) 131 and random access memory (RAM) 132. A basic input/output system 133 (BIOS), containing the basic routines that help to transfer information between elements within computer 110, such as during start-up, is typically stored in ROM 131. RAM 132 typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit 120. By way of example, and not limitation, FIG. 1 illustrates operating system 134, application programs 135, other program modules 136, and program data 137.\n\nThe computer 110 may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, FIG. 1 illustrates a hard disk drive 141 that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive 151 that reads from or writes to a removable, nonvolatile magnetic disk 152, and an optical disk drive 155 that reads from or writes to a removable, nonvolatile optical disk 156 such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive 141 is typically connected to the system bus 121 through anon-removable memory interface such as interface 140, and magnetic disk drive 151 and optical disk drive 155 are typically connected to the system bus 121 by a removable memory interface, such as interface 150.\n\nThe drives and their associated computer storage media discussed above and illustrated in FIG. 1, provide storage of computer readable instructions, data structures, program modules and other data for the computer 110. In FIG. 1, for example, hard disk drive 141 is illustrated as storing operating system 144, application programs 145, other program modules 146, and program data 147. Note that these components can either be the same as or different from operating system 134, application programs 135, other program modules 136, and program data 137. Operating system 144, application programs 145, other program modules 146, and program data 147 are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer 110 through input devices such as a keyboard 162 and pointing device 161, commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit 120 through a user input interface 160 that is coupled to the system bus 121, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor 191 or other type of display device is also connected to the system bus 121 via an interface, such as a video interface 190. In addition to the monitor, computers may also include other peripheral output devices such as speakers 197 and printer 196, which may be connected through an output peripheral interface 195. Of particular significance to the present invention, a camera 163 (such as a digital/electronic still or video camera, or film/photographic scanner) capable of capturing a sequence of images 164 can also be included as an input device to the personal computer 110. Further, while just one camera is depicted, multiple cameras could be included as an input device to the personal computer 110. The images 164 from the one or more cameras are input into the computer 110 via an appropriate camera interface 165. This interface 165 is connected to the system bus 121, thereby allowing the images to be routed to and stored in the RAM 132, or one of the other data storage devices associated with the computer 110. However, it is noted that image data can be input into the computer 110 from any of the aforementioned computer-readable media as well, without requiring the use of the camera 163.\n\nThe computer 110 may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer 180. The remote computer 180 may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer 110, although only a memory storage device 181 has been illustrated in FIG. 1. The logical connections depicted in FIG. 1 include a local area network (LAN) 171 and a wide area network (WAN) 173, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.\n\nWhen used in a LAN networking environment, the computer 110 is connected to the LAN 171 through a network interface or adapter 170. When used in a WAN networking environment, the computer 110 typically includes a modem 172 or other means for establishing communications over the WAN 173, such as the Internet. The modem 172, which may be internal or external, may be connected to the system bus 121 via the user input interface 160, or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer 110, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, FIG. 1 illustrates remote application programs 185 as residing on memory device 181. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.\n\nThe exemplary operating environment having now been discussed, the remaining parts of this description section will be devoted to a description of the program modules embodying the invention.\n\n2.0 A System and Method for Encoding Mosaiced Image Data Employing a Reversible Color Transform\n\nThe system and method according to the invention is described in detail in the following sections.\n\n2.1 General Description of the Invention\n\nThe invention comprises a new color space that maps image pixel values in a mosaiced sampling pattern (such as that generated by a Bayer color filter array [1]) into four color channels that correspond to rectangular sampling patterns. Because these new channels correspond to a rectangular sampling grid, they are much more amenable to processing steps such as compression.\n\nAn additional aspect of the invention is that the transformation from the original mosaic-patterned pixels into the new four-channel color space can be made reversible in integer arithmetic. This allows for the implementation of efficient lossless image compression systems for mosaiced (e.g., raw, or raw Charged Couple Device (CCD)) images. This transform has been used in the PTC codec [7], with better compression results and lower computational complexity than systems based on pixel value prediction (such as PNGââportable network graphicsâ). However, the system and method of the invention can be used for both lossless and lossy compression.\n\nFIG. 2 shows a typical pattern of pixel values 202 from a single-CCD digital camera. Different cameras may use different patterns, but almost all follow the Bayer design of twice as many green (G) pixels as red (R) and blue (B) pixels, and a diagonal adjacency (a quincunx pattern) for green pixels and for each red-blue pair.\n\nIf one wants to compress an image where the pixels are patterned as in FIG. 2, one cannot just feed the pixel values to a standard compressor designed for a single-channel (e.g. grayscale) image. The jumps in values (because adjacent pixels are not of the same colors) produce high-frequency components that significantly increase the size of the compressed data.\n\nThe present invention maps a patterned image such as the one in FIG. 2 into four images of a quarter of the size of the original. Each of the four images can be seen as an independent color channel, which is independently compressed. The four images are smooth, because their pixels correspond to a regular sampling pattern in each of the four channels. Therefore, they compressed well with any lossless image compressor.\n\nThe invention is a method for mapping the mosaic-patterned pixels such as those in FIG. 2 to four color channels that correspond to a regular pattern. The basic idea comes for the observation that a Bayer sampling grid such as that in FIG. 2 is regular for every 2Ã2 block of pixels, which we call a âmacropixelâ. So, for each 2Ã2 macropixel of the original mosaiced imaged, one maps its G1, G2, R, and B values into four new pixels, corresponding to four channels: Y, Dg, Co, Cg. Thus, each of these channels generates a regularly-sampled new image, as shown in FIG. 3. More specifically, the original three-channel Bayer-mosaiced image 302 is mapped into four regular images of Â¼ the size of the original, each for one of the channels {Y, Dg, Co, and Cg} 304, 306, 308 and 310. If the original mosaiced image has NÃN pixels, then each of the color channel images has N/2ÃN/2 pixels.\n\nThe mapping from a set of macropixel G1, G2, R, and B values into the four pixels values Y, Dg, Co, and Cg of the four transformed color channels is given by\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 1 0 0 0 0 1 - 1 1 / 2 1 / 2 - 1 / 2 - 1 / 2 ] â¡ [ G 1 G 2 R B ] ( 1 )\n\nIt is easy to see that the inverse transform is given by\n\n[ G 1 G 2 R B ] = [ 1 - 1 / 2 0 1 / 2 1 1 / 2 0 1 / 2 1 0 1 / 2 - 1 / 2 1 0 - 1 / 2 - 1 / 2 ] â¡ [ Y Dg Co Cg ] ( 2 )\n\nThe YDgCoCg color space has several interesting properties:\n\nThe Y channel is just an average of all four original values in a macropixel, with a 50% green contribution and 25% contributions of R and B. Thus, Y can be seen as a luminance channel, that is, it contains the grayscale information of the image. The dynamic range of Y is the same as that of each of the original G1, G2, R, and B pixels.\n\nDg, Co and Cg are all color channels. If a macropixel has values G1=G2=R=B, then the macropixel is just a gray level, for which Dg=Co=Cg=0.\n\nDg is a âdifference greenâ channel. The smoother the pixels values of the original image, the smaller the values of the Dg pixels, as desired.\n\nLike in the previous YCoCg color space design [9], Cg is an âexcess greenâ channel; as one can see in Equation (2), the original green values can be reconstructed from just the luminance Y, difference green Dg, and excess green Cg. Co is like an orange channel (although not quite), because the value is Co is largest when the input pixels have R=maximum value and B=minimum value, corresponding to a color hue between red and yellow (depending on the green values), whose mid-point is orange.\n\nOne interesting aspect of the direct and inverse transform matrices in Equations (1) and (2) is that their entries have magnitudes equal to 0, Â¼, Â½, or 1. That leads to a reduced computational complexity, since multiplications by those factors can be implemented by right-shift operators, if the pixel values are integer.\n\nUsually Bayer-mosaiced (raw) images are encoded via nonlinear predictors that predict the value of a particular pixel in the raw image based on previously-encode neighboring values, taking the Bayer pattern into account. Some publications have considered the use of color space transforms to map the Bayer-mosaiced {R,G1,G2,B} data into luminance and chrominance channels [3], [4] but they use two luminance channels and two color channels, leading to a higher entropy representation than the four-channel space of the system and method according to the invention (because it has only one luminance channel). Furthermore, the transformation matrices in [3], [4] have higher complexity than those in Equations (1) and (2), because their entries are fractional numbers. Finally, the constructions in [3], [4] do not allow for exact invertibility in integer arithmetic, so they are not suitable for applications such as lossless compression.\n\nFIG. 4 shows an example of using the color space transformation in the system and method according to the invention. The top left image 402 is the full-resolution original color image, with three colors (RGB) per pixel location. The top right image 404 Bayer-mosaiced version of the original, according to the sampling pattern of FIG. 2; it simulates the output of a single-CCD camera. The bottom left image 406 is a zoom of the Bayer-mosaiced image, where one can clearly see the jump intensities from each of the R, G, and B locations. The bottom right image 408 shows the four sub-images formed by the YDgCoCg transform of the invention (clockwise from top left: Y, Dg, Cg, Co). The discontinuities in pixel values in the Bayer-mosaiced image are clear, so that the image should not be fed directly to a single-channel compressor. The four sub-images generated by the four-channel color space transformation of the invention are quite smooth, and thus are amenable to compression. Furthermore, one can see that most of the information is in the Y (luminance channel). The Dg image shows just details where the gradient in green is largest, and the Co and Cg images are quite soft, because they contain only color information. Therefore, the Dg, Co, and Cg sub-images usually can each be compressed to significantly smaller sizes than that of the compressed version of the Y sub-image.\n\n2.2 Exact Inversion in Integer Arithmetic.\n\nOne of the main applications of the new four-channel color space transformation of the invention is lossless compression of raw (Bayer-mosaiced) images. For that, one needs to be able not only to map the original {R,G1,G2,B} pixels into the transformed {Y,Dg,Co,Cg} pixels for compression, but after decompression one needs to map the decoded {Y,Dg,Co,Cg} pixels exactly back to the original {R,G1,G2,B} values.\n\nIn most cases, the original pixel G1, G2, R, and B values are integer, because the analog/digital converters used in essentially all digital cameras produce integer-valued outputs. One usually wants the transformed pixel values Y, Dg, Co, and Cg to be integer-valued, also, especially if one wants to feed them to a lossless compressor. If one uses integer arithmetic, the multiplications by factors equal to Â¼ or Â½ in Equations (1) and (2) lead to small truncation errors (e.g. Â½Ã333=333>>1=166, in integer arithmetic, whereas the exact value would have been 166.5). Although small, these errors would preclude exact reconstruction of the original integer G1, G2, R, and B values from the transformed integer Y, Dg, Co, and Cg values. Thus, even though Equation (2) represents a mathematically exact inverse for real numbers, the inverse is not exact in integer arithmetic.\n\nHowever, this invention also comprises a method for computing the direct and inverse transforms in Equations (1) and (2) in such a way that exact inversion under integer arithmetic is achieved. This allows for the implementation of a lossless image compression system for raw CCD (mosaiced) images, for example, by the block diagrams in FIGS. 5A and 5B.\n\nThe encoder 502 of one lossless embodiment of the invention is shown in FIG. 5A. It includes a channel splitter 504, a 4-channel direct color transform module 506, four lossless encoders, 508 a, 508 b, 508 c, 508 d and a multiplexer 510. An exemplary flowchart of the encoding process is shown in FIG. 6A. As shown in FIG. 6A, process action 602, raw CCD data is input into the channel splitter. The channel splitter splits the raw CCD data (in Bayer format) into four channels, R, G1, G2 and B on a macro-pixel basis (e.g., for every set of R, G1, G2 and B adjacent pixels in the Bayer format). Then, as shown in process action 604, the 4 channel direct color transform converts the R, G1, G2 and B channels into a Y, Dg, Co, and Cg color space or Y, Dg, Co, and Cg channels (process action 606). This results in four sub-images, each Â¼ the size of the originally input data, for the Y, Dg, Co and Cg components. The four sub-images are each input into a lossless encoder (process action 608). The four encoded channels, one for each sub-image, are then combined (process action 610) to yield an encoded file or bit stream.\n\nThe decoder 514 is shown in FIG. 5B. It includes a demultiplexer 516, four lossless decoders 518 a, 518 b, 518 c, 518 d, a 4-channel inverse color transform 520, and a channel combiner 522. An exemplary flowchart of the decoding process is shown in FIG. 6B. As shown in FIG. 6B, process action 612, an encoded file or bit stream is input into the demultiplexer which separates the encoded file or bit stream into separate encoded channels (process action 614). The separate encoded channels are each input into a lossless decoder which decodes each encoded channel (process action 616) into Y, Dg, Co, and Cg components. The 4-channel inverse color transform then transforms the Y, Dg, Co, and Cg components into R, G1, G2 and B channels (process action 618). A channel combiner then combines the R, G1, G2 and B channels into the decoded CCD data (in Bayer format), as shown in process action 620.\n\nThe key for an integer-reversible implementation of the direct transform/inverse transform pair in Equations (1) and (2) is a precise control of the sequence of truncation errors in the multiplications by Â½ and Â¼. In one implementation this construction is based on the reversible 2Ã2 ladder structures in [7], [9].\n\n2.3 YDqCoCq-R Direct and Indirect Transforms:\n\nThe integer-reversible four-channel color transform of the invention is called the YDgCoCg-R transform, similarly to the YCoCg-R transform used in the PTC codec [7], [9]. Considering that all original and transformed pixel values are integer, the direct and inverse YDgCoCg-R transforms are specified by the pseudo-code below.\n\nYDgCoCg-R Direct Transform:\n\nCo=RâB;\n\nDg=G2âG1;\n\nu=B+(Co>>1);\n\nv=G1+(Dg>>1);\n\nCg=vâu;\n\nY=u=(Cg>>1); ââ(3)\n\nYDgCoCg-R Inverse Transform:\n\nu=Yâ(Cg>>1);\n\nv=u+cg;\n\nG1=vâ(Dg>>1);\n\nB=uâ(Co>>1);\n\nG2=G1+Dg;\n\nR=B+Co; ââ(4)\n\nTo see that the inverse transform in Equations (4) is the exact inverse of the direct transform in Equations (3), note that the inverse transform recovers the same intermediate values, and from them the original values. That is because it performs the reverse of each equation in exactly the reverse order. So, the truncation errors in the inverse transform equation are identical to those of the direct transform equation, but with reversed signs. Thus, the truncation errors cancel out.\n\nThe computations in Equations (3) and (4) can be represented by the flow graphs in FIG. 7. One sees that the direct and inverse transform are computed via repeated applications of a simple 2-input, 2-ouput ladder operator, for which two inputs x and y are mapped to two outputs (x+y)/2 and xây. That 2Ã2 ladder transform is called the âaverage/difference ladderâ [10]; the average output (x+y)/2 has a small truncation error, which is canceled out by the inverse ladder. That ladder construction has been the basis of many techniques for reversible transforms, including reversible block transforms [6], [7] and reversible wavelet transforms [8].\n\nThe new reversible YDgCoCg-R color space transform is thus an extension of the previous YCoCg-R reversible transform [9]. While YCoCg-R is useful for mapping full-resolution {R,G,B} data into luminance/chrominance channels in a reversible way, YDgCoCg-R is useful for mapping Bayer-mosaiced {R,G,B} data into smooth luminance/chrominance channels, in a reversible way.\n\n2.4 Scaled Transform.\n\nIn some applications one may not need to preserve exact invertibility in integer arithmetic, but one may still want an efficient mapping between a Bayer-mosaiced image and an equivalent four-color-channel representation. One example is lossy compression, that is, a system similar to that in FIGS. 5A and 5B, but with the encoders and decoders being lossy. Such a system could be an efficient way of performing lossy compression of images produced by a Bayer-mosaiced CCD sensor in a digital camera; it could lead to better results than the traditional approach of first applying a demosaicing (interpolation) filter and then encoding the resulting three-channel RGB image with a lossy compressor, such as JPEG.\n\nIf one does not need exact invertibility in integer arithmetic, one can simplify the direct and inverse transform matrices by just scaling rows of the direct transform and columns of the inverse transform appropriately. For example, one can scale the Co, Cg, and Dg channels by a factor of two, so that the direct transform computation becomes\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 / 2 1 / 2 0 0 0 0 1 / 2 - 1 / 2 1 / 4 1 / 4 - 1 / 4 - 1 / 4 ] â¡ [ G 1 G 2 R B ] ( 5 )\n\nfor which the inverse transform is given by\n\n[ G 1 G 2 R B ] = [ 1 - 1 0 1 1 1 0 1 1 0 1 - 1 1 0 - 1 - 1 ] â¡ [ Y Dg Co Cg ] ( 6 )\n\nIn this form, the inverse transform is very simple: it involves only additions and subtractions; no multiplications or shifts. So, the form above is attractive in applications where decoder complexity is more important than encoder complexity.\n\nSimilarly, one could scale the matrices in such a way as to make the direct transform simpler to compute. The simplest form is\n\n[ Y Dg Co Cg ] = [ 1 1 1 1 - 1 1 0 0 0 0 1 - 1 1 1 - 1 - 1 ] â¡ [ G 1 G 2 R B ] ( 7 )\n\nfor which the inverse transform is given by\n\n[ G 1 G 2 R B ] = [ 1 / 4 - 1 / 2 0 1 / 4 1 / 4 1 / 2 0 1 / 4 1 / 4 0 1 / 2 - 1 / 4 1 / 4 0 - 1 / 2 - 1 / 4 ] â¡ [ Y Dg Co Cg ] ( 8 )\n\nThe original formulation in Eqns. (1) and (2) lead to balanced implementations, in the sense that the direct and inverse transforms have the same computational complexity. Plus it allows for exact reversibility in integer arithmetic (a lossless transform) as shown before. The scaled versions in Eqns. (5)-(6) and (7)-(8) allow for a simpler inverse transform or a simpler direct transform, respectively.\n\nOne should note that the scaling in Eqns. (1)-(2) is not the only one that can produce lossless transforms. Other scalings can produce lossless transforms, with appropriate modifications in the ladder networks in FIG. 7. Such variations are just trivial extension of the present invention, so that all of them do not need to be explicitly described.\n\nA schematic of an implementation of a lossy compression system for raw CCD (mosaiced) images is shown by the block diagrams in FIGS. 8A and 8B. For such implementations, one can use one of the scaled versions of the YDgCoCg direct and inverse transforms described above, depending on which of the encoder or decoder should have the lower complexity.\n\nThe encoder 802 for a lossy compression system according to the invention is shown in FIG. 8A. It includes a channel splitter 804, a 4-channel direct color transform 806, four lossy encoders, 808 a, 808 b, 808 c, 808 d and a multiplexer 810. An exemplary flowchart is shown in FIG. 9A. As shown in FIG. 9A, process action 902, raw CCD data is input into the channel splitter. The channel splitter splits the raw CCD data (in Bayer format) into four channels, R, G1, G2 and B on a macro-pixel basis. Then, as shown in process action 904, the 4 channel direct color transform converts the R, G1, G2 and B into a Y, Dg, Co, and Cg channels (process action 906). This results in four sub-images, each Â¼ the size of the originally input data, for the Y, Dg, Co and Cg components. The four sub-images are each input into a lossy encoder (process action 908). The four encoded channels, one for each sub-image, are then combined (process action 910) to yield an encoded file or bit stream.\n\nThe decoder 814 shown in FIG. 8B. It includes a demultiplexer 816, four lossy decoders 818 a, 818 b, 818 c, 818 d, a 4-channel inverse color transform 820, and a channel combiner 822. An exemplary flowchart is shown in FIG. 9B. As shown in FIG. 9B, process action 912, an encoded file or bit stream is input into the demultiplexer which separates the encoded file or bit stream into separate encoded channels (process action 914). The separate encoded channels are each input into a lossy decoder which decodes each encoded channel (process action 916) into Y, Dg, Co, and Cg components. The 4-channel inverse color transform then transforms the Y, Dg, Co, and Cg components into R, G1, G2 and B channels (process action 918). A channel combiner then combines the R, G1, G2 and B channels into the decoded CCD data (in Bayer format) as shown in process action 920.\n\nThe foregoing description of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto.\n\nREFERENCES\n\n[1] R. Kimmel, âDemosaicing: image reconstruction from color CCD samples,â IEEE Trans. on Image Processing, vol. 8, pp. 1221-1228, September 1999.\n\n[2] T. Toi and M. Ohita, âA subband coding technique for image compression in single CCD cameras with Bayer color filter arrays,â IEEE Trans. Consumer Electronics, vol. 45, pp. 176-180, February 1999.\n\n[3] S. Y. Lee and A. Ortega, âA novel approach of image compression in digital cameras with a Bayer color filter array,â IEEE Int. Conf. Image Processing, Thessaloniki, Greece, vol. 3, pp. 482-485, October 2001.\n\n[4] C. C. Koh, J. Mukherjee, and S. K. Mitra, âNew efficient methods of image compression in digital cameras with color filter array,â IEEE Trans. Consumer Electronics, vol. 49, pp. 1448-1456, November 2003.\n\n[5] P. Lux, âA novel set of closed orthogonal functions for picture coding,â Arch. Elek. Ãbertragung, vol. 31, pp. 267-274, 1977.\n\n[6] F. A. M. K. Bruekers and A. W. M. van den Enden, âNew networks for perfect inversion and perfect reconstruction,â IEEE J. Selected Areas Commun., vol. 10, pp. 130-136, January 1992.\n\n[7] H. S. Malvar, âA system and method for progressively transform coding digital data,â U.S. Pat. No. 6,771,828 issued Aug. 3, 2004.\n\n[8] R. C. Calderbank, I. Daubechies, W. Sweldens, and B.-L. Yeo, âWavelet transforms that map integers to integers,â Appl. Comput. Harmon. Anal., vol. 5, no. 3, pp. 332-369, 1998.\n\n[9] H. S. Malvar and G. Sullivan, âYCoCg-R: a color space with RGB reversibility and low dynamic range,â Joint Video Team (JVT) of ISO/IEC MPEG & ITU-T VCEG, Doc. No. JVT-1014, Trondheim, Norway, July 2003.\n\n[10] P. Lux, âA novel set of closed orthogonal functions for picture coding,â Arch. Elek. Ãbertragung, vol. 31, pp. 267-274, 1977.\n\nClaims (36)\n\n1. A method for encoding mosaiced image data comprising the process actions of:\n\ninputting raw charged couple device (CCD) image data;\n\nsplitting the raw CCD data into red (R), a first green (G1), a second green (G2) and a blue (B) channel on a macro-pixel basis, wherein each macro-pixel comprises a set of a first green and a second green diagonally adjacent pixels and a red-blue pair of pixels R, B that is diagonally adjacent;\n\ntransforming the red, first green, second green and blue channels into Y, Dg, Co and Cg color space channels, each representing an image one quarter the size of the original image wherein for each macro-pixel the Y channel represents luminance, Dg represents the difference between the first green pixel and the second green pixel, and the Co and Cg channels are color channels; and\n\nseparately encoding each of the Y, Dg, Co and Cg channels with an encoder.\n\n2. The method of claim 1 further comprising the process action of combining the Y, Dg, Co and Cg channels after encoding.\n\n3. The method of claim 2 further comprising the process action of outputting the combined Y, Dg, Co and Cg channels to a stored file.\n\n4. The method of claim 2 further comprising the process action of outputting the combined Y, Dg, Co and Cg channels as a bit stream.\n\n5. The method of claim 1 wherein the red, first green, second green and blue channels are transformed into Y, Dg, Co and Cg color space channels using the transform:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 1 0 0 0 0 1 - 1 1 / 2 1 / 2 - 1 / 2 - 1 / 2 ] â¡ [ G 1 G 2 R B ] .\n\n6. The method of claim 1 wherein the transform is computed in such a way that exact inversion under integer arithmetic is achieved.\n\n7. The method of claim 6 wherein the transform is computed for each macro-pixel by the process actions of:\n\ncomputing Co as the red pixel minus the blue pixel;\n\ncomputing Dg as the second green pixel minus the first green pixel;\n\ncomputing a first intermediate variable u as the blue pixel plus Co;\n\ncomputing a second intermediate variable v as the first green pixel plus Dg;\n\ncomputing Cg as the second intermediate variable v minus the first intermediate variable u; and\n\ncomputing Y as the first intermediate pixel u plus Cg.\n\n8. A method for decoding mosaiced image data comprising the process actions of:\n\ninputting combined Y, Dg, Do and Cg channels;\n\nsplitting the combined channels into separate Y, Dg, Co and Cg channels;\n\ndecoding each of the Y, Dg, Co and Cg channels with a decoder;\n\ntransforming the Y, Dg, Co and Cg channels into red, first green, second green and blue channels; and\n\ncombining the red, first green, second green and blue channels to output a mosaiced color image.\n\n9. The method of claim 8 wherein the Y, Dg, Co and Cg channels are transformed by using the transform:\n\n[ G 1 G 2 R B ] = [ 1 - 1 / 2 0 1 / 2 1 1 / 2 0 1 / 2 1 0 1 / 2 - 1 / 2 1 0 - 1 / 2 - 1 / 2 ] â¡ [ Y Dg Co Cg ] .\n\n10. The method of claim 8 wherein the transform is computed for each macro-pixel by the process actions of:\n\ncomputing a first intermediate variable u as Y minus Cg;\n\ncomputing a second intermediate variable v as the first intermediate variable u plus Cg;\n\ncomputing a first green pixel as the second intermediate variable v minus Dg;\n\ncomputing a blue pixel as the first intermediate variable u minus Co;\n\ncomputing a second green pixel as the first green pixel plus Dg; and\n\ncomputing a red pixel as the blue pixel plus Co.\n\n11. A method for converting an image in three color space to four color space comprising:\n\ninputting an image in 3 color space with twice as many green (G) pixels as red (R) and blue (B) pixels, and a diagonal adjacency for green pixels and for each red-blue pair;\n\ndividing said image in 3 color space into macro-pixels wherein each macro-pixel comprises a set of green diagonally adjacent pixels G1, G2 and a red-blue pair of pixels R, B that is diagonally adjacent;\n\nfor each macro-pixel, mapping the R, G1, G2 and B pixels to a four color space Y, Dg, Co and Cg to obtain four sub-images each made entirely of Y, Dg, Co and Cg pixels respectively wherein Y represents luminance, Dg represents the difference between the G1 and G2 pixels, and Co and Cg represent color;\n\ncompressing each of the Y, Dg, Co and Cg sub-images separately; and\n\ncombining the compressed sub-images.\n\n12. The method of claim 11 wherein each of the sub-images are compressed with a lossless encoder.\n\n13. The method of claim 11 wherein the R, G1, G2 and B pixels are mapped to Y, Dg, Co and Cg color space by a multiple of:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 1 0 0 0 0 1 - 1 1 / 2 1 / 2 - 1 / 2 - 1 / 2 ] â¡ [ G 1 G 2 R B ] .\n\n14. The method of claim 11 wherein the R, G1, G2 and B pixels are mapped to Y, Dg, Co and Cg color space by:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 / 2 1 / 2 0 0 0 0 1 / 2 - 1 / 2 1 / 4 1 / 4 - 1 / 4 - 1 / 4 ] â¡ [ G 1 G 2 R B ] .\n\n15. The method of claim 11 wherein the G1, G2, R and B pixels are mapped to Y, Dg, Co and Cg color space using the transform:\n\n[ Y Dg Co Cg ] = [ 1 1 1 1 - 1 1 0 0 0 0 1 - 1 1 1 - 1 - 1 ] â¡ [ G 1 G 2 R B ] ,\n\nso as to simplify the transformation.\n\n16. The method of claim 11 further comprising the process action of saving the combined compressed sub-images to a file.\n\n17. The method of claim 11 further comprising the process action of outputting the combined compressed sub-images to a bit stream.\n\n18. A computer-readable medium having computer-executable instructions for performing the method recited in claim 11.\n\n19. A method for converting an image in four color space to three color space comprising:\n\ninputting an image in Y, Dg, Co, Cg color space;\n\nsplitting the image in Y, Dg, Co and Cg color space into Y, Dg, Co and Cg channels;\n\ndecoding each of the Y, Dg, Co and Cg channels;\n\ntransforming the decoded Y, Dg, Co and Cg channels into R, G1, G2 and B channels; and\n\ncombining the R, G1, G2 and B channels to obtain a color image.\n\n20. The method of claim 19 wherein the Y, Dg, Co and Cg pixels are decoded using the transform:\n\n[ G 1 G 2 R B ] = [ 1 - 1 / 2 0 1 / 2 1 1 / 2 0 1 / 2 1 0 1 / 2 - 1 / 2 1 0 - 1 / 2 - 1 / 2 ] â¡ [ Y Dg Co Cg ] .\n\n21. The method of claim 20 wherein the Y, Dg, Co and Cg pixels are decoded to simplify the decoding using the transform:\n\n[ G 1 G 2 R B ] = [ 1 - 1 0 1 1 1 0 1 1 0 1 - 1 1 0 - 1 - 1 ] â¡ [ Y Dg Co Cg ] .\n\n22. The method of claim 21 wherein the Y, Dg, Co and Cg pixels are decoded using the transform:\n\n[ G 1 G 2 R B ] = [ 1 / 4 - 1 / 2 0 1 / 4 1 / 4 1 / 2 0 1 / 4 1 / 4 0 1 / 2 - 1 / 4 1 / 4 0 - 1 / 2 - 1 / 4 ] â¡ [ Y Dg Co Cg ] .\n\n23. A method for decoding a color image encoded by the process actions of:\n\ninputting raw charged couple device (CCD) image data;\n\nsplitting the raw CCD data into red (R), a first green (G1), a second green (G2) and a blue (B) channel on a macro-pixel basis, wherein each macro-pixel comprises a set of a first green and a second green diagonally adjacent pixels and a red-blue pair of pixels R, B that is diagonally adjacent;\n\ntransforming the red, first green, second green and blue channels into Y, Dg, Co and Cg color space channels, each representing an image one quarter the size of the original image wherein for each macro-pixel the Y channel represents luminance, Dg represents the difference between the first green pixel and the second green pixel, and the Co and Cg channels are color channels; and\n\nseparately encoding each of the Y, Dg, Co and Cg channels with an encoder; and combining the Y, Dg, Co and Cg channels, comprising the process actions of:\n\ninputting an image in Y, Dg, Co, Cg color space;\n\nsplitting the image in Y, Dg, Co and Cg into Y, Dg, Co and Cg channels;\n\nseparately decoding each of the Y, Dg, Co and Cg channels by using the inverse of the encoding used;\n\ntransforming the decoded Y, Dg, Co and Cg channels into R, G1, G2 and B channels; and\n\ncombining the R, G1, G2 and B channels to obtain a color image.\n\n24. The method of claim 23 wherein the image was transformed from R, G1, G2 and B to Y, Dg, Co and Cg using the transform:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 1 0 0 0 0 1 - 1 1 / 2 1 / 2 - 1 / 2 - 1 / 2 ] â¡ [ G 1 G 2 R B ] ; and\n\nwherein the Y, Dg, Co and Cg channels are transformed into R, G1, G2 and B channels using:\n\n[ G 1 G 2 R B ] = [ 1 - 1 / 2 0 1 / 2 1 1 / 2 0 1 / 2 1 0 1 / 2 - 1 / 2 1 0 - 1 / 2 - 1 / 2 ] â¡ [ Y Dg Co Cg ] .\n\n25. The method of claim 23 wherein columns of a transform matrix are scaled to simplify decoding computations.\n\n26. The method of claim 23 wherein the image was transformed from R, G1, G2 and B to Y, Dg, Co and Cg using the transform:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 / 2 1 / 2 0 0 0 0 1 / 2 - 1 / 2 1 / 4 1 / 4 - 1 / 4 - 1 / 4 ] â¡ [ G 1 G 2 R B ] ;\n\nand wherein the Y, Dg, Co and Cg channels are transformed into R, G1, G2 and B channels using:\n\n[ G 1 G 2 R B ] = [ 1 - 1 0 1 1 1 0 1 1 0 1 - 1 1 0 - 1 - 1 ] â¡ [ Y Dg Co Cg ] .\n\n27. The method of claim 23 wherein rows of a transform matrix are scaled to simplify encoding computations.\n\n28. The method of claim 23 wherein the image is transformed from R, G1, G2 and B to Y, Dg, Co and Cg using the transform:\n\n[ Y Dg Co Cg ] = [ 1 1 1 1 - 1 1 0 0 0 0 1 - 1 1 1 - 1 - 1 ] â¡ [ G 1 G 2 R B ] ;\n\nand wherein the Y, Dg, Co and Cg channels are transformed into R, G1, G2 and B channels using the transform:\n\n[ G 1 G 2 R B ] = [ 1 / 4 - 1 / 2 0 1 / 4 1 / 4 1 / 2 0 1 / 4 1 / 4 0 1 / 2 - 1 / 4 1 / 4 0 - 1 / 2 - 1 / 4 ] â¡ [ Y Dg Co Cg ] .\n\n29. A system for encoding a raw Bayer image, the system comprising:\n\ninputting raw Bayer image data;\n\nsplitting the raw Bayer image data into red (R), a first green (G1), a second green (G2) and a blue (B) channel on a macro-pixel basis, wherein each macro-pixel comprises a set of a first green and a second green diagonally adjacent pixels and a red-blue pair of pixels R, B that is diagonally adjacent;\n\ntransforming the red, first green, second green and blue channels into Y, Dg, Co and Cg channels, each representing an image one quarter the size of the original image, wherein Y is luminance, Dg is the difference between the first green and the second green pixels and Co and Cg are color channels; and\n\nencoding each of Y, Dg, Co and Cg channels.\n\n30. The system of claim 29 wherein the red, first green, second green and blue channels are transformed into Y, Dg, Co and Cg color space channels using the transform:\n\n[ Y Dg Co Cg ] = [ 1 / 4 1 / 4 1 / 4 1 / 4 - 1 1 0 0 0 0 1 - 1 1 / 2 1 / 2 - 1 / 2 - 1 / 2 ] â¡ [ G 1 G 2 R B ] .\n\n31. The system of claim 29 wherein the R, G1, G2 and B channels are transformed into Y, Dg, Co and Cg channels by, for each macro-pixel:\n\ncomputing Co as the red pixel minus the blue pixel;\n\ncomputing Dg as the second green pixel minus the first green pixel;\n\ncomputing a first intermediate variable u as the blue pixel plus Co;\n\ncomputing a second intermediate variable v as the first green pixel plus Dg;\n\ncomputing Cg as the second intermediate variable v minus the first intermediate variable u; and\n\ncomputing Y as the first intermediate pixel u plus Cg.\n\n32. The system of claim 31 wherein the channels are transformed using repeated applications of a two input, two output ladder operator for which two inputs x and y are mapped to two outputs (x+y)/2 and xây.\n\n33. A system for decoding a raw Bayer image, comprising, inputting an image in Y, Dg, Co, Cg;\n\nsplitting the image into Y, Dg, Co and Cg channels;\n\ndecoding each of the Y, Dg, Co and Cg channels using the reverse of the encoding process;\n\ntransforming the decoded Y, Dg, Co and Cg channels into red, a first green, a second green and a blue channel; and\n\ncombining the red, first green, second green and blue channel to obtain a color image.\n\n34. The system of claim 33 wherein the transform applied to the decoded Y, Dg, Co and Cg channels comprises:\n\n[ G 1 G 2 R B ] = [ 1 - 1 / 2 0 1 / 2 1 1 / 2 0 1 / 2 1 0 1 / 2 - 1 / 2 1 0 - 1 / 2 - 1 / 2 ] â¡ [ Y Dg Co Cg ] .\n\n35. The system of claim 33 wherein the decoded Y, Dg, Co, and Cg channels are transformed into R, G1, G2 and B channels by, for each macro-pixel:\n\ncomputing a first intermediate variable u as Y minus Cg;\n\ncomputing a second intermediate variable v as the first intermediate variable u plus Cg;\n\ncomputing a first green pixel as the second intermediate variable v minus Dg;\n\ncomputing a blue pixel as the first intermediate variable u minus Co;\n\ncomputing a second green pixel as the first green pixel plus Dg; and\n\ncomputing a red pixel as the blue pixel plus Co.\n\n36. The system of claim 35 wherein the channels are transformed using repeated applications of a two input, two output ladder operator for which two inputs x and y are mapped to two outputs (x+y)/2 and xây.\n\nUS10/968,236 2004-10-19 2004-10-19 System and method for encoding mosaiced image data employing a reversible color transform Expired - Fee Related US7480417B2 (en)\n\nPriority Applications (5)\n\nApplication Number Priority Date Filing Date Title US10/968,236 US7480417B2 (en) 2004-10-19 2004-10-19 System and method for encoding mosaiced image data employing a reversible color transform JP2005270446A JP4884734B2 (en) 2004-10-19 2005-09-16 System and method for encoding mosaic image data using reversible color conversion CN200510106390A CN100586147C (en) 2004-10-19 2005-09-19 System and method for encoding mosaiced image data employing a reversible color transform KR1020050088247A KR101201047B1 (en) 2004-10-19 2005-09-22 A system and method for encoding mosaiced image data employing a reversible color transform EP05108870.6A EP1657909B1 (en) 2004-10-19 2005-09-26 System and method for encoding mosaiced colour image data employing a reversible color transform\n\nApplications Claiming Priority (1)\n\nApplication Number Priority Date Filing Date Title US10/968,236 US7480417B2 (en) 2004-10-19 2004-10-19 System and method for encoding mosaiced image data employing a reversible color transform\n\nPublications (2)\n\nPublication Number Publication Date US20060083432A1 US20060083432A1 (en) 2006-04-20 US7480417B2 true US7480417B2 (en) 2009-01-20\n\nFamily\n\nID=36046413\n\nFamily Applications (1)\n\nApplication Number Title Priority Date Filing Date US10/968,236 Expired - Fee Related US7480417B2 (en) 2004-10-19 2004-10-19 System and method for encoding mosaiced image data employing a reversible color transform\n\nCountry Status (5)\n\nCountry Link US (1) US7480417B2 (en) EP (1) EP1657909B1 (en) JP (1) JP4884734B2 (en) KR (1) KR101201047B1 (en) CN (1) CN100586147C (en)\n\nCited By (16)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US20070025631A1 (en) * 2005-07-21 2007-02-01 Wooshik Kim Adaptive variable block transform system, medium, and method US20070189603A1 (en) * 2006-02-06 2007-08-16 Microsoft Corporation Raw image processing US20070206852A1 (en) * 2006-03-03 2007-09-06 General Atomics Color condensation for image transformation and/or compression US20110286514A1 (en) * 2006-03-22 2011-11-24 Woodman Labs, Inc. Method For Efficient Compression and Decoding of Single Sensor Color Image Data US20140105493A1 (en) * 2012-10-12 2014-04-17 Mediatek Inc. Image compression method and apparatus for encoding pixel data of frame into interleaved bit-stream, and related image decompression method and apparatus US9230299B2 (en) 2007-04-11 2016-01-05 Red.Com, Inc. Video camera US9363421B1 (en) * 2015-01-12 2016-06-07 Google Inc. Correcting for artifacts in an encoder and decoder US9436976B2 (en) 2007-04-11 2016-09-06 Red.Com, Inc. Video camera US20160261864A1 (en) * 2014-10-06 2016-09-08 Telefonaktiebolaget L M Ericsson (Publ) Coding and deriving quantization parameters US9521384B2 (en) 2013-02-14 2016-12-13 Red.Com, Inc. Green average subtraction in image data US10097840B2 (en) 2015-10-27 2018-10-09 Canon Kabushiki Kaisha Image encoding apparatus, control method thereof, and storage medium US10163192B2 (en) 2015-10-27 2018-12-25 Canon Kabushiki Kaisha Image encoding apparatus and method of controlling the same WO2021084118A1 (en) * 2019-10-30 2021-05-06 intoPIX SA Image processor US20220272342A1 (en) * 2019-07-05 2022-08-25 V-Nova International Limited Quantization of residuals in video coding US11503294B2 (en) 2017-07-05 2022-11-15 Red.Com, Llc Video image data processing in electronic devices US11785352B2 (en) 2021-02-10 2023-10-10 Canon Kabushiki Kaisha Image encoding apparatus, method for controlling the same, and non-transitory computer-readable storage medium\n\nFamilies Citing this family (41)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US7480417B2 (en) * 2004-10-19 2009-01-20 Microsoft Corp. System and method for encoding mosaiced image data employing a reversible color transform WO2006098494A1 (en) * 2005-03-18 2006-09-21 Sharp Kabushiki Kaisha Video compression using residual color transform US7792370B2 (en) * 2005-03-18 2010-09-07 Sharp Laboratories Of America, Inc. Residual color transform for 4:2:0 RGB format CN101455075B (en) * 2005-10-13 2011-09-14 Rjsç§æå ¬å¸ System and method for a high performance color filter mosaic array US8243340B2 (en) * 2006-02-23 2012-08-14 Microsoft Corporation Pre-processing of image data for enhanced compression TWI350695B (en) * 2006-10-18 2011-10-11 Realtek Semiconductor Corp Image encoding/decoding apparatus and method thereof US8471921B1 (en) * 2008-06-23 2013-06-25 Marvell International Ltd. Reducing optical crosstalk and radial fall-off in imaging sensors KR101086501B1 (en) * 2008-11-26 2011-11-25 ì£¼ìíì¬ íì´ëì¤ë°ëì²´ Image data processing method, image sensor, and integrated circuit US8194977B2 (en) * 2008-12-09 2012-06-05 Microsoft Corporation Remote desktop protocol compression acceleration using single instruction, multiple dispatch instructions CN101902650B (en) * 2009-05-27 2012-06-27 ä¸­å½ç§å­¦é¢å¾®çµå­ç ç©¶æ Lossless compression method applicable to Bayer image format KR20110011361A (en) * 2009-07-28 2011-02-08 ì¼ì±ì ìì£¼ìíì¬ Apparatus and method for image data encoding/decoding using sampling CN101996609B (en) * 2009-08-13 2013-01-23 ä¸æµ·å¥ç æ°å­ä¿¡æ¯æéå ¬å¸ Pixel format converting method and device in graphic processing JP2011119868A (en) * 2009-12-01 2011-06-16 Sony Corp Image processing apparatus, and image processing method CN102075750B (en) * 2011-01-07 2014-06-18 æ·±å³å¸èåå¤©ä¸ç§æè¡ä»½æéå ¬å¸ Method, device and system for encoding and decoding videos of red green and blue (RGB) space WO2012101708A1 (en) * 2011-01-28 2012-08-02 æ¥æ¬é»æ°æ ªå¼ä¼ç¤¾ 2d signal encoding device JP5777398B2 (en) * 2011-05-13 2015-09-09 ã­ã¤ãã³æ ªå¼ä¼ç¤¾ Image processing apparatus, image processing method and program for image processing apparatus KR20130025276A (en) * 2011-09-01 2013-03-11 ì¼ì±ì ìì£¼ìíì¬ Image file compression system and compression method thereof JP6056124B2 (en) * 2011-09-05 2017-01-11 å¯å£«ã¼ã­ãã¯ã¹æ ªå¼ä¼ç¤¾ Image processing apparatus and image processing program CN102510324B (en) * 2012-01-02 2014-08-20 è¥¿å®çµå­ç§æå¤§å­¦ Signal transmission method based on network coding in multi-input and multi-output Y channel US20140185928A1 (en) * 2012-12-28 2014-07-03 Shai Ben NUN Hardware-supported huffman coding of images KR101523767B1 (en) * 2013-01-17 2015-06-01 ì°ì¸ëíêµ ì°ííë ¥ë¨ Apparatus and method for encoding/decoding color image CN104427349B (en) * 2013-08-20 2017-09-29 æ¸ åå¤§å­¦ A kind of Bayer method for compressing image US9613394B2 (en) * 2013-08-28 2017-04-04 Intel Corporation Lossy color compression using adaptive quantization US8879858B1 (en) 2013-10-01 2014-11-04 Gopro, Inc. Multi-channel bit packing engine US9357236B2 (en) * 2014-03-13 2016-05-31 Intel Corporation Color compression using a selective color transform WO2016002577A1 (en) * 2014-07-03 2016-01-07 ã½ãã¼æ ªå¼ä¼ç¤¾ Image processing apparatus and method FR3032297A1 (en) * 2015-02-04 2016-08-05 Stmicroelectronics (Grenoble 2) Sas METHOD AND DEVICE FOR COMPRESSION OF A COLOR DIGITAL IMAGE US9819913B2 (en) * 2015-08-26 2017-11-14 Stmicroelectronics International N.V. Image sensor device with macropixel processing and related devices and methods US10269326B2 (en) 2015-12-19 2019-04-23 Intel Corporation Method and apparatus for color buffer compression CN105657385B (en) * 2015-12-31 2018-02-23 ä¸æµ·éæçµè·¯ç åä¸­å¿æéå ¬å¸ A kind of compression method for raw image data US10863158B2 (en) 2016-05-17 2020-12-08 Canon Kabushiki Kaisha Image pr"
    }
}