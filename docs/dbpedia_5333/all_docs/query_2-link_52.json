{
    "id": "dbpedia_5333_2",
    "rank": 52,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Sinclair_BASIC",
        "read_more_link": "",
        "language": "en",
        "title": "Sinclair BASIC",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/294979be9308748dae7558e7d476d4b00116338d",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/afabe0aeeb6126c816a5dd828887cdfa1582bb39",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Sinclair_ZX_Spectrum.jpg/400px-Sinclair_ZX_Spectrum.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/ZX_Spectrum%2B.jpg/400px-ZX_Spectrum%2B.jpg",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2003-12-10T03:19:13+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Sinclair_BASIC",
        "text": "For the implementation of BASIC used on the Sinclair QL, see SuperBASIC.\n\nDialect of the programming language BASIC\n\nSinclair BASICParadigmImperativeDesigned byJohn Grant, Steve VickersDeveloperNine Tiles Networks,\n\nSinclair ResearchFirst appeared1979; 45 years ago ( )PlatformZX80, ZX81, ZX Spectrum, +, 128, +2, +3, T/S 2068, TC 3256LicenseProprietary\n\nSinclair BASIC is a dialect of the programming language BASIC used in the 8-bit home computers from Sinclair Research, Timex Sinclair and Amstrad. The Sinclair BASIC interpreter was written by Nine Tiles Networks Ltd.[1]\n\nDesigned to run in only 1 kB of RAM, the system makes a number of decisions to lower memory usage. This led to one of Sinclair BASIC's most notable features, that the keywords were entered using single keystrokes; each of the possible keywords was mapped to a key on the keyboard, when pressed, the token would be placed into memory while the entire keyword was printed out on-screen. This made code entry easier whilst simplifying the parser.\n\nThe original ZX80 version supported only integer mathematics, which partially made up for some of the memory-saving design notes which had negative impact on performance. When the system was ported to the ZX81 in 1981, a full floating point implementation was added. This version was very slow, among the slowest BASICs on the market at the time, but given the limited capabilities of the machine, this was not a serious concern.\n\nPerformance became a more serious issue with the release of the ZX Spectrum in 1983, which ran too slowly to make full use of the machine's new features. This led to an entirely new BASIC for the following Sinclair QL, as well as a number of 3rd-party BASICs for the Spectrum and its various clones. The original version continued to be modified and ported in the post-Sinclair era.\n\nHistory\n\n[edit]\n\nClive Sinclair initially met with John Grant, the owner of Nine Tiles, in April 1979 to discuss a BASIC for Sinclair's new computer concept. Sinclair was inspired to make a new machine after watching his son enjoy their TRS-80, but that machine's £500 price tag appeared to be a serious limit on its popularity. He wanted a new kit that would expand on their previous MK14 and feature a built-in BASIC at the target price of £79.95. To meet this price point, the machine would ship with only 1 kB of RAM and 4 kB of ROM. Grant suggested using the Forth language instead, but the budget precluded this. Grant wrote the BASIC interpreter between June and July 1979, but the code initially came in at 5 kB and he spent the next month trimming it down. It was initially an incomplete implementation of the 1978 American National Standards Institute (ANSI) Minimal BASIC standard with integer arithmetic only, termed 4K BASIC.\n\nEven before the ZX80 was introduced in February 1980, the constant downward price-pressure in the industry was allowing the already inexpensive design to be further reduced in complexity and cost. In particular, many of the separate circuits in the ZX80 were re-implemented in a single uncommitted logic array from Ferranti, which allowed the price to be reduced to only £49.95 while increasing the size of the ROM to 8 kB. This work was assigned to Steve Vickers, who joined Nine Tiles in January 1980. Whilst Grant worked on the code interfacing with hardware, Vickers used the larger space to introduce floating-point arithmetic and a suite of trig functions, which were expected of any BASIC from that era, producing 8K BASIC. The initial version did not support the ZX Printer and had a bug in its square root function. Nine Tiles provided a new version to address these, but Sinclair was slow to include the new version in the ROMs. The new ROMs were eventually offered to owners of the earlier ZX80 as well.[5]\n\nWhen Sinclair lost the contest to build the BBC Computer, he moved ahead with plans to produce a low-cost colour-capable machine that emerged as the ZX Spectrum of April 1982. ROM space would once again be increased, this time to 16 kB. In keeping with his philosophy of making systems for the lowest possible expenditure, Sinclair wanted the absolute minimum changes to the existing 8K BASIC. Although Nine Tiles felt that something much better would be needed for the new machine, the schedule would not allow it, and yet another expansion of the original code was produced. Due to the RAM also being increased, to 48 kB, this version was known as 48K BASIC and eventually 48 BASIC with the introduction of the ZX Spectrum 128 at which time the 16 KB Spectrum was no longer sold and most existing ones in use had been upgraded to 48 KB.[6][7] The new version was available near the end of 1981, but it was \"depressingly slow\" and \"snail like\". Additionally, as no prototypes were available until the end of the year, it lacked support for the new line of peripherals Sinclair was planning.[8]\n\nIn February 1982, Nine Tiles began to have disagreements with Sinclair over owed royalties for the various manuals that Nine Tiles had produced. Around the same time, Vickers and his Sinclair counterpart, Richard Altwasser, left their respective companies to start the Jupiter Ace project. When the Spectrum was launched the ROM was still not complete, and although Nine Tiles continued working on it until April 1982, by that point 75,000 Spectrums had already been sold and the project was cancelled. The missing functionality was later added by additional code in the ZX Interface 1. After Nine Tiles and Sinclair went their own ways, several new versions of 48 BASIC were created.\n\nIn 1983, as part of introducing the Spectrum to the US market as the TS2068, Timex modified it as T/S 2000 BASIC. The new version was incapable of running many Spectrum programs due to the memory location of machine's functions moving. A similar, but somewhat more compatible version, was introduced as part of the Spanish Spectrum 128 of 1985, 128 BASIC.[7]\n\nAmstrad purchased Sinclair Research in 1986. As Sinclair had never owned the copyright to the language, Amstrad had to arrange a new license with Nine Tiles. Several other versions also appeared in this period as various extensions and clones of the Spectrum were introduced. These included +3 BASIC, BASIC64 and Timex Extended Basic.[7][6]\n\nAs of 2015, interpreters exist for modern operating systems,[10] and older systems,[11] that allow Sinclair Basic to be used easily.\n\nDescription\n\n[edit]\n\nProgram editing\n\n[edit]\n\nLike most home-computer BASICs, Sinclair BASIC is anchored around its line editor. When the machine is booted, it runs BASIC and displays an inverse video \"K\" at the bottom of the screen to indicate the entry point. When a line is entered and the NEW LINE key is pressed, it either runs immediately if it does not have a line number prefix, or clears the screen and performs the equivalent of a LIST command, placing a \">\" cursor after the line number in the most recently entered line.\n\nIn contrast to most machines of the era, the editor does not allow freeform editing at any point on the screen. Instead, when the user presses EDIT, the current line of code is copied back to the bottom of the screen. The user can move horizontally through this line using the cursor keys and commits their changes by pressing NEW LINE again. In contrast, on machines like the Commodore 64 or Atari 8-bit computers, the up and down keys can be used to move among the lines in the program and edit them in-place.\n\nThe most notable feature of the editor is that keywords are entered using single keystrokes. For instance, on the ZX81, the P key on the keyboard would cause the entire keyword PRINT to be entered into the currently editing line. Once a keyword has been entered, the cursor changes to an \"L\" to indicate what follows will be interpreted as normal text. For instance, pressing P again at this point would enter a single letter \"P\".\n\nKeys generally had two separate keywords assigned to them – one above it and one below. Pressing the key in \"K\" mode would enter the keyword above the key, like PRINT for P. If the system was in \"L\" mode, one could return to \"K\" by pressing the shift key – the systems did not initially support lowercase text, so the shift was not otherwise needed. The keywords below the keys required a second keystroke, ⇧ Shift+NEW LINE, which put the editor into \"function mode\", changing the cursor to an \"F\". Entering common code often resulted in a significant number of keystrokes.\n\nThe system has the advantage of representing all multi-character keywords as a single character in memory, which was a significant savings in the early machines that shipped with only 1 kB of RAM. This single-character representation included multi-character items like <>. This has the added advantages of simplifying the runtime, as it can immediately determine whether a character in the source code is a keyword or text, and also means that keywords are never entered directly, meaning that one can, for instance, have a variable named \"PRINT\", as the system can determine that it is not the same as the keyword.\n\nAs the systems evolved and added new keywords, the entry system became increasingly difficult to use. 48 BASIC in the Spectrum required every key to host up to four keywords. Entering keywords was a time-consuming process of looking over the relatively small type on the keyboard for the appropriate key, and then correctly entering the multiple keystrokes needed to enter it properly. For instance, entering BEEP required one to type CAPS SHIFT+SYMBOL SHIFT to access extended mode (later models include a separate EXTENDED MODE key), keeping SYMBOL SHIFT held down, and then and pressing Z. To improve the complex entry on the Spectrum, the keywords were colour-coded to indicate the required mode:\n\nWhite: key only\n\nRed on the key itself: SYMBOL SHIFT plus the key\n\nGreen above the key: EXTENDED MODE followed by the key\n\nRed below the key: EXTENDED MODE followed by SYMBOL SHIFT plus the key\n\nThis concept had run its course, and later machines running 128 BASIC (ZX Spectrum 128, +2, +3, +2A, and +2B) featured a more traditional editor where the user typed-in the keyword as individual characters, similar to other home computers of the era. This required a new tokenizer to convert the line into a similar internal format.\n\nThe resulting in-memory storage of the program was otherwise similar to Microsoft BASIC, in that only the keywords are presented as tokens, while non-keywords – like string and numeric constants and variable names – are left in their original typed-in format. However, that typed-in format was not ASCII, but an internal character code that contains both printable characters and the keyword tokens. Although portions of the table, the capital letters A to Z, for instance, are in the same order as in ASCII, their characters correspond to different numeric values, i.e. their code points' offset from zero is different from ASCII's offset of 65. Other characters, like punctuation, may have been moved about even more. The ZX Spectrum character set is the most prominent example of such a character code. Related computers running Sinclair BASIC used similar variants, e.g. the ZX80 or ZX81 character sets. All of these different but related character sets included Sinclair BASIC tokens.\n\nData types\n\n[edit]\n\nOne uncommon feature of Sinclair BASIC is the way it stores variables in memory. Typically, interpreters use a fixed-size entry to hold data, making it easy to scan the variable table. Due to the extremely limited memory of the ZX series, any wasted space had to be avoided, and this led to the use of a variable-length format. The data types included numbers stored in a 5-byte values, strings with a length and then the characters, and arrays of both of those types. The data was stored in the table itself, which contrasts with most BASICs of the era, where strings and array entries were stored in a separate heap.\n\nThe first byte for a variable entry always held the type in the first three bits, and the first character of the name in the next five bits. As was the case in most microcomputer dialects, A, A$, A() and A$() were all different variables and could store different values. Most variables could only have a single-character name; the exception are numeric variables (not arrays), where an alternate format held the first character of the name in those same five bits, but was then followed by additional characters ending with one with its high-bit set. Long variable names were whitespace-independent, and case-insensitive in later versions, so LETNumberOfApples=5 is the same as LETnumberofapples=5 referred to the same variable.\n\nThe downside to this approach is that scanning the table to look up the value of a variable reference is more complex. In addition to testing whether the name matches using the subset of the first byte, if the entry is not the one that is being looked for, the type has to be read from the upper three bits and then the next location of a variable in storage calculated using the type. For instance, if the program encounters the variable \"A\" and the table starts with the entry for \"B$\", it fails to match A with B, then reads the type to see it is a string, and then has to read the following length byte and skip forward by that amount of bytes to find the next entry in the table. To make this somewhat easier, arrays also stored a two-byte length, so the entire structure could be skipped over more easily.\n\nA unique feature was the \"short float\", or integer type. Any numeric variable could store either type, the storage itself did not change and used 5 bytes in either case. Integers were indicated by setting the exponent byte to zero, while floating-point values were stored with an excess-128 format exponent. This meant that it could not store zero as a float and lost one possible exponent magnitude. It also did not use any less memory, as the values were still 5-byte in memory. The advantage to this format is performance; the math library included tests to look for the zero exponent, and if it was seen, it would not attempt to perform various operations on the remaining 3 bytes under certain conditions.\n\nKeyword details\n\n[edit]\n\nThe ZX81 8K BASIC used the shorter forms GOTO, GOSUB, CONT and RAND, whereas the Spectrum 48 BASIC used the longer forms GO TO, GO SUB, CONTINUE and RANDOMIZE. The ZX80 4K BASIC also used these longer forms but differed by using the spelling RANDOMISE. The ZX81 8K BASIC was the only version to use FAST, SCROLL, SLOW and UNPLOT. The ZX80 4K BASIC had the exclusive function TL$(); it was equivalent to the string operator (2 TO ) in later versions.\n\nUnique code points are assigned in the ZX80 character set, ZX81 character set and ZX Spectrum character set for each keyword or multi-character operator, i.e. <=, >=, <>, \"\" (tokenized on the ZX81 only), ** (replaced with ↑ on the Spectrum). These are expanded by referencing a token table in ROM. Thus, a keyword uses one byte of memory only, a significant saving over traditional letter-by-letter storage. This also meant that the BASIC interpreter could quickly determine any command or function by evaluating one byte, and that the keywords need not be reserved words like in other BASIC dialects or other programming languages, e.g., it is allowed to define a variable named PRINT and output its value with PRINT PRINT. This is also related to the syntax requirement that every line start with a command keyword, and pressing the one keypress for that command at the start of a line changes the editor from command mode to letter mode. Thus, variable assignment requires LET (i.e., LETa=1 not only a=1). This practice is also different from other BASIC dialects. Further, it meant that unlike other BASIC dialects, the interpreter needed no parentheses to identify functions; SIN x was sufficient, no SIN(x) needed (though the latter was allowed). The 4K BASIC ROM of the ZX80 had a short list of exceptions to this: the functions CHR$(), STR$(), TL$(), PEEK(), CODE(), RND(), USR() and ABS() did not have one-byte tokens but were typed in letter-by-letter and required the parentheses. They were listed as the INTEGRAL FUNCTIONS on a label above and to the right of the keyboard.[13]\n\n128 BASIC, present on ZX Spectrum 128, +2, +3, +2A, and +2B, stored keywords internally in one-byte code points, but used a conventional letter-by-letter BASIC input system. It also introduced two new commands:\n\nPLAY, which operated the 128k models' General Instrument AY-3-8910 music chip\n\nSPECTRUM, which switched the 128k Spectrum into a 48k Spectrum compatibility mode\n\nThe original Spanish ZX Spectrum 128 included four additional BASIC editor commands in Spanish,[14][15] one of which was undocumented:\n\nEDITAR (to edit a line number or invoke the full screen string editor)\n\nNUMERO (to renumber the program lines)\n\nBORRAR (to delete program lines)\n\nANCHO (to set the column width of the RS-232 device, but undocumented as the code was broken)\n\nUnlike the LEFT$(), MID$() and RIGHT$() functions used in the ubiquitous Microsoft BASIC dialects for home computers, parts of strings in Sinclair BASIC are accessed by numeric range. For example, a$(5 TO 10) gives a substring starting with the 5th and ending with the 10th character of the variable a$. Thus, it is possible to replace the LEFT$() and RIGHT$() commands by simply omitting the left or right array position respectively; for example a$( TO 5) is equivalent to LEFT$(a$,5). Further, a$(5) alone is enough to replace MID$(a$,5,1).\n\nSyntax\n\n[edit]\n\nKeywords\n\n[edit]\n\nOn the 16K/48K ZX Spectrum (48 BASIC), there are 88 keywords in Sinclair BASIC, denoting commands (of which there are 50), functions and logical operators (31), and other keywords (16, including 9 which are also commands or functions):\n\nKeyword Parameters[note 1] Entered using[note 2] Type Summary ABS number EXTENDED MODE then G Function Returns the absolute value of number ACS number EXTENDED MODE then SYMBOL SHIFT+W Function Returns the arccosine of number AND SYMBOL SHIFT+Y Logical operator Returns true if both conditions on either side of the AND keyword are true, else returns false[note 3] ASN number EXTENDED MODE then SYMBOL SHIFT+Q Function Returns the arcsine of number AT line, column; SYMBOL SHIFT+I Other Used in a PRINT statement to print at the line and column specified; for example, PRINT AT 5,10;\"*\" puts a star in column 10 of line 5. ATN number EXTENDED MODE then SYMBOL SHIFT+E Function Returns the arctangent of number ATTR (line, column) EXTENDED MODE then SYMBOL SHIFT+L Function Returns a byte containing information on the colours of the text cell on the screen, corresponding to the specified line and column;note that, unlike most Sinclair BASIC keywords, the parentheses are required; the first three bits indicate the ink (foreground)colour, the fourth, fifth and sixth bits the paper (background) colour, the seventh bit whether the colours are bright or not, and the eight, whether they are flashing BEEP duration, pitch EXTENDED MODE then SYMBOL SHIFT+Z Command Produces sound from the computer's speaker; duration is in seconds, pitch is in semitones above (positive value) or below (negative value) middle C BIN number EXTENDED MODE then B Other Indicates number is in binary notation BORDER number B Command Sets the border of the screen to the colour specified by the number[note 4] BRIGHT number EXTENDED MODE then SYMBOL SHIFT+B Command/other Makes all following colours brighter if number is 1, or its normal shade if 0[note 5] CAT number EXTENDED MODE then SYMBOL SHIFT+9 Command Displays contents of ZX Microdrive specified by number[note 6] CHR$ number EXTENDED MODE then U Function Returns the character corresponding to the decimal number in the computer's character set CIRCLE x, y, r EXTENDED MODE then SYMBOL SHIFT+H Command Draws a circle with its centre at coordinates (x,y) and radius r CLEAR address X Command Clears the screen, all variables and the GO SUB stack,[30] and optionally sets the maximum RAM address to be used by BASIC CLOSE # number EXTENDED MODE then SYMBOL SHIFT+5 Command Closes the specified stream number for access[note 6] CLS V Command Clears all text and graphics from the screen CODE string EXTENDED MODE then I Function/other Returns the number corresponding to the first character in string in the computer's character set; also used to save arbitrary chunks memory to tape, disk, etc. and load them back in — see LOAD, SAVE and VERIFY for details CONTINUE C Command Restarts a program after it has stopped due to an error or the user pressing the CAPS SHIFT+SPACE or BREAK keys COPY Z Command Sends the currently displayed screen to the printer COS number EXTENDED MODE then W Function Returns the cosine of number DATA comma-separated values EXTENDED MODE then D Command/other Provides numbers and/or strings to use with the READ command and allows saving the contents of an array to tape when used with the SAVE command (as SAVE filename DATA array name()) DEF FN name(variable) = operation EXTENDED MODE then 1 Command Defines a custom function that can be used with the FN command;function definitions must be of the form f(x)=operations, for example f(x)=x*2 and the function name may not consist of more than one letter, plus a $-symbol if the function returns a string DIM variable(dimensions) D Command Declares an array with the specified dimensions, which may be multi-dimensional (for example, DIM a(10,10); if used with strings, the last dimension indicates the length of each of the strings (thus, DIM a$(2,5) is an array of two strings each of five characters long, and DIM b$(5) is one string of five characters) DRAW x, y [, r] W Command Draws a line in the current INK colour to coordinates (x,y) from the coordinates used by the previous PLOT or DRAW command; if the optional r is supplied, it indicates the radius of the circle segment to be drawn, in radians ERASE drive;\"filename\" EXTENDED MODE then SYMBOL SHIFT+7 Command Deletes the specified file from a ZX Microdrive[note 6] EXP number EXTENDED MODE then X Function Returns e to the power number FLASH number EXTENDED MODE then SYMBOL SHIFT+V Command/other Makes all following text alternate its foreground (INK) and background (PAPER) colours[note 5] FN function(value) EXTENDED MODE then SYMBOL SHIFT+2 Function Calls the function defined earlier in the program using DEF FN FORMAT drive;\"name\" EXTENDED MODE then SYMBOL SHIFT+0 Command Formats the cartridge in the indicated Microdrive and assigns it the identifier name[note 6] FOR variable = start TO end F Command Starts a FOR-NEXT loop; the variable name may only be one character long GO SUB number H Command Makes the program jump to the BASIC line specified by number; when the program encounters the command RETURN, it will jump back to the statement after the GO SUB GO TO number G Command Makes the program jump to the BASIC line specified by number IF condition THEN U Command Evaluates the condition, and if true, executes the statement that follows the keyword THEN that must come after the condition, for example IFa=1THENLETb=2[note 7] IN address EXTENDED MODE then SYMBOL SHIFT+I Function Returns a byte read from the hardware input/output port corresponding to the address INK number EXTENDED MODE then SYMBOL SHIFT+X Command/other Sets the foreground colour for text and graphics[note 4][note 5] INKEY$ EXTENDED MODE then SYMBOL SHIFT+Z Function Returns a string representing the key being pressed on the keyboard at the moment the function is called, or an empty string if none is, but does not wait for a keypress INPUT [prompt,] variable I Command Halts program execution until the user types in something on the keyboard and presses the Enter key, then stores the entered value in the specified variable; if the optional prompt is supplied, this will be shown on the screen INT number EXTENDED MODE then R Function Returns the integer value of number, rounding down to the nearest whole number (thus, INT -1.1 returns −2, not −1) INVERSE number EXTENDED MODE then SYMBOL SHIFT+M Command/other Reverses the colours on all following text if number is 1, so that it uses the current ink colour for the background and the current paper colour for the text, or sets them back to normal if number is 0[note 5] LEN string EXTENDED MODE then K Function Returns the number of characters (bytes) in string LET variable=value L Command Assigns value to the named variable LINE EXTENDED MODE then SYMBOL SHIFT+3 Other\n\nWhen used in an INPUT statement before a string variable, will not put quotation marks (\"\") around its prompt, for example INPUT\"Name: \";LINEn$\n\nWhen used in a SAVE statement so that when the BASIC program being saved is loaded again, it starts automatically at the line number indicated\n\nLIST [number] K Command Outputs the current BASIC program to the screen; if the optional number is provided, it omits all lines with a lower number LLIST [number] EXTENDED MODE then SYMBOL SHIFT+V Command As LIST except the listing is output to the printer LN number EXTENDED MODE then SYMBOL SHIFT+Z Function Returns the natural logarithm of number LOAD \"[filename]\" [CODE [address[, length]]| DATA variable()] J Command Loads a program or data into RAM from tape, ZX Microdrive, disk, etc., deleting any existing BASIC program and variables; if an empty string (\"\") is provided, this loads the first program found, else it will search the tape for the program named in the string; if the optional CODE is provided, will load the program into memory at the address it had when it was saved, or at the specified address (length is intended as a safety, to try and load the right program in case there are multiple on the tape with the right name but of different lengths); if the optional DATA variable() is provided, will load the data from the tape into the array named variable() LPRINT text EXTENDED MODE then SYMBOL SHIFT+C Command As PRINT except output is sent to the printer MERGE \"[filename]\" EXTENDED MODE then SYMBOL SHIFT+T Command As LOAD, except it does not delete the current program and variables; if a line number exists in both, that of the newly loaded program overwrites the existing one. Using MERGE prevents a program saved using LINE from auto-running once loaded MOVE stream1 TO stream2 EXTENDED MODE then SYMBOL SHIFT+6 Command Moves data from one stream (keyboard, screen, file, printer, network, etc.) to another[note 6] NEW A Command Erases the current BASIC program and all variables NEXT variable N Command Closes a FOR-NEXT loop; the variable must match that of the corresponding FOR command — \"empty\" NEXTs to refer to the immediately preceding FOR in the program are not allowed NOT condition SYMBOL SHIFT+S Logical operator Returns true if the condition is false, else returns false[note 3] OPEN # stream EXTENDED MODE then SYMBOL SHIFT+4 Command Opens a stream for reading from and/or writing to[note 6] OR SYMBOL SHIFT+Y Logical operator Returns true if either of the conditions on either side of the OR keyword are true, else returns false[note 3] OUT address, value EXTENDED MODE then SYMBOL SHIFT+O Command Sends the value (a byte) to the hardware [Memory-mapped I/O|input/output port] corresponding to the address OVER number EXTENDED MODE then SYMBOL SHIFT+N Command/other Will make following text overprint with an XOR operation what is already on the screen if number is 1, instead of erasing it, or erase it if number is 0[note 5] PAPER number EXTENDED MODE then SYMBOL SHIFT+C Command/other Sets the background colour for text and graphics[note 4][note 5] PAUSE delay M Command Halts program execution for the specified delay, in 1 50 {\\displaystyle {\\tfrac {1}{50}}} of a second in Europe or 1 60 {\\displaystyle {\\tfrac {1}{60}}} in North America (thus, PAUSE 50 halts for one second in Europe) PEEK address EXTENDED MODE then O Function Returns a byte representing the contents of the memory location pointed to by address PI EXTENDED MODE then M Function Returns the value of pi PLOT x, y Q Command Draws a pixel in the current INK colour on the screen at the coordinates (x,y) POINT (x,y) EXTENDED MODE then SYMBOL SHIFT+8 Function Returns 1 if the pixel pointed at graphical coordinates (x,y) is currently in the ink (foreground) colour, else returns 0 POKE address, value O Command Sets the contents of address in RAM to value PRINT [AT x,y;] text P Command Prints text (which must be one or more strings or numbers separated with semicolons) to the screen. If used with #0 or #1, it prints in the bottom two (input) lines of the screen; if used with AT, it prints at the specified text coordinates; otherwise, it prints either immediately following the output of any previous PRINT statement (if the previous statement ended in a semicolon), or in the first column of the line below the previous PRINT output, defaulting to 0,0. RANDOMIZE [number] T Command Initializes the random number generator; if used without a number (or with 0), it does this based on the computer's internal clock, else it uses the number supplied, which must be in the range [1,65535] READ variable EXTENDED MODE then A Command Takes a value from a DATA statement and stores it in the named variable: the first time READ is used, it gets the first value after the first DATA, the second time it gets the next one, and so on REM text E Command Begins a comment in the source code, meaning that everything after the REM statement is ignored, until the end of the line — note this includes everything after a colon, which normally begins a new segment: 10REM Nothing to see here : PRINT \"Unprintable\" will not produce any output, for example RESTORE [number] EXTENDED MODE then S Command Resets where READ commands look for values in DATA statements: if used without a number, the next READ will use the first DATA in the program, with a number it will use the first DATA on or after the line whose number is indicated RETURN Y Command Returns execution to the first statement following the last GO SUB command that was executed RND EXTENDED MODE then T Function Returns a pseudo-random number with eight significant figures in the range [0,1) RUN [number] R Command Starts the current BASIC program, from its first line if no number is specified, else from the line with that number (or the first one after, if it does not exist) SAVE \"filename\" [DATA variable() | LINE number] S Command Saves the current BASIC program to tape or other storage device, with the filename specified; if the optional LINE followed by a line number is used, then the program will start automatically at the indicated line number when it is LOADed back in; with the optional DATA, the command saves the contents of the array named by the variable instead of the current BASIC program SCREEN$ [(line, column)] EXTENDED MODE then SYMBOL SHIFT+ Function/other As a function, identifies the character at the specified line and column on the screen. Used after the filename in a LOAD or SAVE command, indicates that the contents of the display memory should be loaded or saved; this essentially makes it a shortcut for CODE 16384,6912[note 8] but does not work with VERIFY because the contents of the display memory will be different by the time that command reads back the saved data; SGN number EXTENDED MODE then F Function Returns 1 if number is positive, 0 if it is 0, and −1 if it is negative SIN number EXTENDED MODE then Q Function Returns the sine of number STEP number SYMBOL SHIFT+D Other Indicates the interval used by a FOR statement, for example FORn=2TO6STEP2 will skip n=3 and n=5 in the loop STOP SYMBOL SHIFT+A Command Ends execution of the current program, exiting to the BASIC editor; can also be given when the computer is waiting for input using the INPUT command; once the program is stopped, it can be resumed with CONTINUE SQR number EXTENDED MODE then H Function Returns the square root of number STR$ number EXTENDED MODE then Y Function Converts a number to string. TAB column EXTENDED MODE then P Other In a PRINT statement, makes sure that the text to be output begins in the column specified, wrapping to the next line as necessary, but never more than one line TAN number EXTENDED MODE then E Function Returns the tangent of number THEN statement SYMBOL SHIFT+G Other Follows the condition in an IF statement to indicate what should happen when the condition evaluates to true[note 7] TO SYMBOL SHIFT+F Other Indicates a range from the number to the left of TO to the number of the right of it, inclusive; when used with FOR both numbers must be supplied, while if used to slice strings, either may be left off to indicate the start or end of the string USR string or address EXTENDED MODE then L Function When called with a single-character string, this returns the memory address at which the glyph for the user-defined graphic character corresponding to that character is defined. If called with an address, it starts machine code execution at that address (thus making it one of the few Sinclair BASIC functions to have a Side effect) and returns the contents of the Z80’s BC register pair. VAL string EXTENDED MODE then J Function Evaluates the string as a number and returns the result; this can perform calculations: VAL \"1+2\" returns 3, for example, and also evaluates variables and even other VAL statements: LETa=1:VAL\"a+VAL \"\"2\"\"\"[note 9] also returns 3 VAL$ string EXTENDED MODE then SYMBOL SHIFT+J Function Similar to VAL but evaluates the string as a string VERIFY \"[filename]\" EXTENDED MODE then SYMBOL SHIFT+R Command Reads a program or data from tape or other storage, much like LOAD, but instead of loading it into memory, compares it with the program or data that is already in memory. This is intended to be used immediately after a SAVE command, to make sure the program or data has been saved without corruption.\n\nOfficial versions\n\n[edit]\n\n4K BASIC\n\n[edit]\n\n4K BASIC for ZX80[76] (so named for residing in 4 KiB read-only memory (ROM)), was developed by John Grant of Nine Tiles for the ZX80. It has integer-only arithmetic.\n\nSystem Commands: NEW RUN LIST LOAD SAVE\n\nControl Statements: GOTO IF THEN GOSUB STOP RETURN FOR TO NEXT CONTINUE\n\nInput/Output Statements: PRINT INPUT\n\nAssignment Statement: LET\n\nOther Statements: CLEAR CLS DIM REM RANDOMIZE POKE\n\nFunctions: ABS CHR$ CODEPEEK RND STR$ TL$ USR\n\n8K BASIC\n\n[edit]\n\n8K BASIC is the ZX81 BASIC (also available as an upgrade for the ZX80[5]), updated with floating-point arithmetic by Steve Vickers, so named for residing in 8 KiB ROM.\n\nStatements: PRINT RAND LET CLEAR RUN LIST GOTO CONT INPUT NEW REM PRINT STOP BREAK IF STOP FOR NEXT TO STEP SLOW FAST GOSUB RETURN SAVE LOAD CLS SCROLL PLOT UNPLOT PAUSE LPRINT LLIST COPY DIM POKE NEW\n\nFunctions: ABS SGN SIN COS TAN ASN ACS ATN LN EXP SQR INT PI RND FUNCTION LEN VALSTR$ NOT CODE CHR$ INKEY$ AT TAB INKEY$ PEEK USR\n\n48 BASIC\n\n[edit]\n\n48 BASIC is the BASIC for the original 16/48 KB RAM ZX Spectrum (and clones), with colour and more peripherals added by Steve Vickers and John Grant. It resides in 16 KB ROM and began to be called 48 BASIC with the introduction of the ZX Spectrum 128 at which time the 16 KB Spectrum was no longer sold and most existing ones in use had been upgraded to 48 KB.[6]\n\n128 BASIC\n\n[edit]\n\n128 BASIC is the BASIC for the ZX Spectrum 128.[7] It offers extra commands and uses letter-by-letter input.\n\nNew commands: LOAD ! SAVE ! MERGE ! ERASE ! PLAY SPECTRUM\n\n+3 BASIC\n\n[edit]\n\n+3 BASIC is the BASIC with disk support for the ZX Spectrum +3 and +2A.[6]\n\nNew commands: FORMAT COPY\n\nT/S 2000 BASIC\n\n[edit]\n\nT/S 2000 BASIC is used on the Spectrum-compatible Timex Sinclair 2068 (T/S 2068) and adds the following six new keywords:\n\nDELETE deletes BASIC program line ranges.\n\nFREE is a function that gives the amount of free RAM. PRINT FREE will show how much RAM is free.\n\nON ERR is an error-handling function mostly used as ON ERR GO TO or ON ERR CONT.\n\nRESET can be used to reset the behaviour of ON ERR. It was also intended to reset peripherals.\n\nSOUND controls the AY-3-8192 sound chip.\n\nSTICK is a function that gives the position of the internal joystick (Timex Sinclair 2090).\n\nBASIC64\n\n[edit]\n\nBASIC64 by Timex of Portugal, is a software extension[77] to allow better Basic programming with the 512×192 and dual display areas graphic modes available only on Timex Sinclair computers. This extension adds commands and does a complete memory remap to avoid the system overwriting the extended screen memory area. Two versions exist due to different memory maps - a version for TC 2048 and a version for T/S 2068 and TC 2068.\n\nPRINT # prints to a specific output channel.\n\nLIST # lists the program to a specific output channel.\n\nCLS* clears both display areas.\n\nINK* sets ink colour for both display areas\n\nPAPER* sets paper colour both display areas\n\nSCREEN$ selects the high / normal resolution modes.\n\nPLOT* plots a pixel and updates the drawing position.\n\nLINE draws a line from the previous PLOT position, supporting arc drawing\n\nCIRCLE* draws a circle or oval, depending on screen mode.\n\nTimex Extended Basic\n\n[edit]\n\nTimex Extended Basic by Timex of Portugal is used on the Timex Computer 3256, adding TEC - Timex Extended Commands commands supporting the AY-3-8912 sound chip, RS-232 network and the 512x192 pixel high resolution graphic mode.[78][79]\n\nRAM drive commands: LOAD! SAVE! CAT! MERGE! ERASE! CLEAR!\n\nRS-232 commands: FORMAT! LPRINT LLIST\n\nAY-3-8912 commands: BEEP!\n\n512 x 192 resolution commands: SCREEN$ DRAW! PLOT! CIRCLE!\n\nOther versions, extensions, derivatives and successors\n\n[edit]\n\nInterpreters for the ZX Spectrum family\n\n[edit]\n\nSeveral ZX Spectrum interpreters exist.[80]\n\nBeta BASIC by Dr. Andy Wright, was originally a BASIC extension, but became a full interpreter.[81]\n\nYS MegaBasic by Mike Leaman.[80][82]\n\nZebraOS by Zebra Systems in New York, a cartridge version of T/S 2000 BASIC that used the 512×192 screen mode.[83]\n\nSea Change ROM by Steve Vickers and Ian Logan, modified by Geoff Wearmouth, a replacement ROM with an enhanced Sinclair BASIC.[84]\n\nGosh Wonderful by Geoff Wearmouth, a replacement ROM that fixes bugs and adds a tokenizer, stream lister, delete and renumber commands.[80][85]\n\nOpenSE BASIC (formerly SE BASIC) by Andrew Owen, a replacement ROM with bug fixes and many enhancements including ULAplus[86] support, published as open source in 2011[87][88][89]\n\nCompilers for the ZX Spectrum family\n\n[edit]\n\nSeveral ZX Spectrum compilers exist.[80]\n\nHiSoft COLT Compiler (a.k.a. HiSoft COLT Integer Compiler)[90][91]\n\nHiSoft BASIC (a.k.a. HiSoft BASIC Compiler), an integer and floating-point capable compiler[92][93]\n\nLaser Compiler[94][95]\n\nSoftek 'IS' Integer Compiler[96][97] (successor to Softek Integer Compiler[98])\n\nSoftek 'FP' Full Compiler[99][100]\n\nZIP Compiler[101][102]\n\nDerivatives and successors for other computers\n\n[edit]\n\nSuperBASIC, a much more advanced BASIC dialect introduced with the Sinclair QL personal computer, with some similarities to the earlier Sinclair BASICs[103]\n\nSAM Basic, the BASIC on the SAM Coupé, generally considered a ZX Spectrum clone[104]\n\nROMU6 by Cesar and Juan Hernandez - MSX[80]\n\nSpectrum 48 by Whitby Computers - Commodore 64[80]\n\nSparky eSinclair BASIC by Richard Kelsh, an operating system loosely based on ZX Spectrum BASIC - Zilog eZ80[105]\n\nSinbas by Pavel Napravnik - DOS[80]\n\nBasic[106] (and CheckBasic[107]) by Philip Kendall - Unix\n\nBINSIC[108] by Adrian McMenamin, a reimplementation in Groovy closely modelled on ZX81 BASIC - Java\n\nBASin[109] by Paul Dunn, a complete Sinclair BASIC integrated development environment (IDE) based on a ZX Spectrum emulator[80] - Windows\n\nSpecBAS[110] (a.k.a. SpecOS) by Paul Dunn, an integrated development environment (IDE) providing an enhanced superset of Sinclair BASIC - Windows, Linux, Pandora, and Raspberry Pi\n\nZX-Basic[111] Backwardly compatible, but enhanced compiler of Sinclair BASIC programs the ZX Spectrum, written in Python, freely available for Windows, Linux and Mac OS\n\nZX-Basicus[112] by Juan-Antonio Fernández-Madrigal, a synthesizer, analyzer, optimizer, interpreter and debugger of Sinclair BASIC 48K for PCs, freely downloadable for Linux and Windows.\n\nSee also\n\n[edit]\n\nList of computer system emulators § Sinclair ZX80\n\nList of computer system emulators § Sinclair ZX81\n\nList of computer system emulators § Sinclair ZX Spectrum and clones\n\nNotes\n\n[edit]\n\nReferences\n\n[edit]\n\nBibliography\n\n[edit]\n\nAdamson, Ian; Kennedy, Richard (1986). Sinclair and the 'sunrise' Technology. Penguin.\n\nArdley, Neil (1984). Sinclair ZX Spectrum+ User Guide. Dorling Kindersley in association with Sinclair Research. ISBN 0-86318-080-9.\n\nVickers, Steven (1982). Sinclair ZX Spectrum BASIC Programming. Sinclair Research.\n\nVickers, Steven (1983). Sinclair ZX Spectrum BASIC Programming (2 ed.). Sinclair Research.\n\nCambridge Communication (1983). Sinclair ZX Spectrum Microdrive and Interface 1 manual. Sinclair Research."
    }
}