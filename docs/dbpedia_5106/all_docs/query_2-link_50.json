{
    "id": "dbpedia_5106_2",
    "rank": 50,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio",
        "read_more_link": "",
        "language": "en",
        "title": "<input type=\"radio\"> - HTML: HyperText Markup Language",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [
            "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio/old-radio.jpg"
        ],
        "movies": [
            "https://live.mdnplay.dev/en-US/docs/Web/HTML/Element/input/radio/runner.html?id=defining_a_radio_group"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-25T21:13:49+00:00",
        "summary": "",
        "meta_description": "<input> elements of type radio are generally used in radio groupsâcollections of radio buttons describing a set of related options.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio",
        "text": "A radio group is defined by giving each of radio buttons in the group the same name. Once a radio group is established, selecting any radio button in that group automatically deselects any currently-selected radio button in the same group.\n\nYou can have as many radio groups on a page as you like, as long as each has its own unique name.\n\nFor example, if your form needs to ask the user for their preferred contact method, you might create three radio buttons, each with the name property set to contact but one with the value email, one with the value phone, and one with the value mail. The user never sees the value or the name (unless you expressly add code to display it).\n\nThe resulting HTML looks like this:\n\nhtml\n\n<form> <fieldset> <legend>Please select your preferred contact method:</legend> <div> <input type=\"radio\" id=\"contactChoice1\" name=\"contact\" value=\"email\" /> <label for=\"contactChoice1\">Email</label> <input type=\"radio\" id=\"contactChoice2\" name=\"contact\" value=\"phone\" /> <label for=\"contactChoice2\">Phone</label> <input type=\"radio\" id=\"contactChoice3\" name=\"contact\" value=\"mail\" /> <label for=\"contactChoice3\">Mail</label> </div> <div> <button type=\"submit\">Submit</button> </div> </fieldset> </form>\n\nHere you see the three radio buttons, each with the name set to contact and each with a unique value that uniquely identifies that individual radio button within the group. They each also have a unique id, which is used by the <label> element's for attribute to associate the labels with the radio buttons.\n\nYou can try out this example here:\n\nWhen the above form is submitted with a radio button selected, the form's data includes an entry in the form contact=value. For example, if the user clicks on the \"Phone\" radio button then submits the form, the form's data will include the line contact=phone.\n\nIf you omit the value attribute in the HTML, the submitted form data assigns the value on to the group. In this scenario, if the user clicked on the \"Phone\" option and submitted the form, the resulting form data would be contact=on, which isn't helpful. So don't forget to set your value attributes!\n\nNote: If no radio button is selected when the form is submitted, the radio group is not included in the submitted form data at all, since there is no value to report.\n\nIt's fairly uncommon to actually want to allow the form to be submitted without any of the radio buttons in a group selected, so it is usually wise to have one default to the checked state. See Selecting a radio button by default below.\n\nLet's add a bit of code to our example so we can examine the data generated by this form. The HTML is revised to add a <pre> block to output the form data into:\n\nhtml\n\n<form> <fieldset> <legend>Please select your preferred contact method:</legend> <div> <input type=\"radio\" id=\"contactChoice1\" name=\"contact\" value=\"email\" /> <label for=\"contactChoice1\">Email</label> <input type=\"radio\" id=\"contactChoice2\" name=\"contact\" value=\"phone\" /> <label for=\"contactChoice2\">Phone</label> <input type=\"radio\" id=\"contactChoice3\" name=\"contact\" value=\"mail\" /> <label for=\"contactChoice3\">Mail</label> </div> <div> <button type=\"submit\">Submit</button> </div> </fieldset> </form> <pre id=\"log\"></pre>\n\nThen we add some JavaScript to set up an event listener on the submit event, which is sent when the user clicks the \"Submit\" button:\n\njs\n\nconst form = document.querySelector(\"form\"); const log = document.querySelector(\"#log\"); form.addEventListener( \"submit\", (event) => { const data = new FormData(form); let output = \"\"; for (const entry of data) { output = `${output}${entry[0]}=${entry[1]}\\r`; } log.innerText = output; event.preventDefault(); }, false, );\n\nTry this example out and see how there's never more than one result for the contact group.\n\nThe following example shows a slightly more thorough version of the example we've seen throughout the article, with some additional styling, and with better semantics established through use of specialized elements. The HTML looks like this:\n\nhtml\n\n<form> <fieldset> <legend>Please select your preferred contact method:</legend> <div> <input type=\"radio\" id=\"contactChoice1\" name=\"contact\" value=\"email\" checked /> <label for=\"contactChoice1\">Email</label> <input type=\"radio\" id=\"contactChoice2\" name=\"contact\" value=\"phone\" /> <label for=\"contactChoice2\">Phone</label> <input type=\"radio\" id=\"contactChoice3\" name=\"contact\" value=\"mail\" /> <label for=\"contactChoice3\">Mail</label> </div> <div> <button type=\"submit\">Submit</button> </div> </fieldset> </form>\n\nThe CSS involved in this example is a bit more significant:\n\ncss\n\nhtml { font-family: sans-serif; } div:first-of-type { display: flex; align-items: flex-start; margin-bottom: 5px; } label { margin-right: 15px; line-height: 32px; } input { appearance: none; border-radius: 50%; width: 16px; height: 16px; border: 2px solid #999; transition: 0.2s all linear; margin-right: 5px; position: relative; top: 4px; } input:checked { border: 6px solid black; } button, legend { color: white; background-color: black; padding: 5px 10px; border-radius: 0; border: 0; font-size: 14px; } button:hover, button:focus { color: #999; } button:active { background-color: white; color: black; outline: 1px solid black; }\n\nMost notable here is the use of the appearance property (with prefixes needed to support some browsers). By default, radio buttons (and checkboxes) are styled with the operating system's native styles for those controls. By specifying appearance: none, you can remove the native styling altogether, and create your own styles for them. Here we've used a border along with border-radius and a transition to create a nice animating radio selection. Notice also how the :checked pseudo-class is used to specify the styles for the radio button's appearance when selected.\n\nNote: If you wish to use the appearance property, you should test it very carefully. Although it is supported in most modern browsers, its implementation varies widely. In older browsers, even the keyword none does not have the same effect across different browsers, and some do not support it at all. The differences are smaller in the newest browsers.\n\nNotice that when clicking on a radio button, there's a nice, smooth fade out/in effect as the two buttons change state. In addition, the style and coloring of the legend and submit button are customized to have strong contrast. This might not be a look you'd want in a real web application, but it definitely shows off the possibilities."
    }
}