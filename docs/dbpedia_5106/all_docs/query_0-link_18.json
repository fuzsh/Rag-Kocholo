{
    "id": "dbpedia_5106_0",
    "rank": 18,
    "data": {
        "url": "https://about.gitlab.com/customers/radiofrance/",
        "read_more_link": "",
        "language": "en",
        "title": "Radio France",
        "top_image": "https://images.ctfassets.net/xz1dnu24egyd/hTxvThaQHDI9mLbrdhBV7/43450f26e58ab734d4271b5ad5c172f9/radio-france-cover-image.jpg",
        "meta_img": "https://images.ctfassets.net/xz1dnu24egyd/hTxvThaQHDI9mLbrdhBV7/43450f26e58ab734d4271b5ad5c172f9/radio-france-cover-image.jpg",
        "images": [
            "https://about.gitlab.com/_nuxt/image/87eca8.svg",
            "https://about.gitlab.com/_nuxt/image/65fccb.svg",
            "https://images.ctfassets.net/xz1dnu24egyd/20MoPaZWvV9qHWZadal4E7/c753d267ff844b56ef96c28becf959e7/logoradiofrance.svg?fm=webp&w=1022&h=490",
            "https://about.gitlab.com/nuxt-images/logos/gitlab-logo-100.png",
            "https://images.ctfassets.net/xz1dnu24egyd/hTxvThaQHDI9mLbrdhBV7/43450f26e58ab734d4271b5ad5c172f9/radio-france-cover-image.jpg",
            "https://about.gitlab.com/nuxt-images/customers/fullsave.png",
            "https://about.gitlab.com/nuxt-images/customers/siemens.png",
            "https://about.gitlab.com/nuxt-images/customers/hilti.png",
            "https://images.ctfassets.net/xz1dnu24egyd/2ouky0TRvapIoHpqLsJD1C/4a96055848d7e679da16c7d15ea4295d/next-step.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Radio France adopted GitLab CI/CD after success with code management.",
        "meta_lang": "en",
        "meta_favicon": "/nuxt-images/ico/favicon.ico?cache=20220414",
        "meta_site_name": "",
        "canonical_link": "https://about.gitlab.com/customers/radiofrance/",
        "text": "Radio France was using GitLab for Git and Jenkins for the production builds, product images, and all the deployments. Developers were constantly switching between GitLab for source code and Jenkins for all the production builds. The teams at Radio France wanted a way to merge the two technologies in order to avoid constant context switching. Ideally, developers wanted a single solution that could be used for code management and deployment.\n\nThere were also configuration issues with Jenkins. All of the jobs were configured by the CI/CD team, so developers couldnât make any changes with production deployments. Developers wanted to be able to own their own code without having to wait for permissions from the CI/CD team.\n\nâWe wanted developers to manage their own way of deploying to production. Each team, each project, they donât have the same culture. We deploy websites. We deploy APIs. We deploy a lot of things. We donât all have the same challenges,â said Julien Vey, Operational Excellence Manager.\n\nAccording to Vey, Jenkins is a very static workflow. Developers were unable to customize their projects or add new functionalities easily. The new solution they needed would also have to provide easy integration, customizable jobs, and offer new features without an excessive amount of management.\n\nSince teams were already happily using GitLab for source code management, they didnât have to look far for a solution that also provides CI/CD. Developers quickly moved everything into a GitLab pipeline in order to start deploying code to production in one place.\n\nRadio France has a lot of teams working on a lot of different projects. Each team manages their own set of services â some teams are up to 20 services. Each service is now in its own GitLab project.\n\nâWe just used the CI/CD part of GitLab because we already had GitLab that just works. We are embedded within the tools so that we donât have to switch to other tools for [deployment]. The main thing that we like about GitLab is working in a single tool,â Vey stated.\n\nRadio Franceâs technology stack includes PHP, React, NodeJS, Svelte, Golang, RabbitMQ, and PostgresQL. All their applications are running on a microservice architecture, built on top of Kubernetes. The teams run multiple instances of GitLab runners, which allows them to perform upgrades without interruption. GitLab is running in a virtual machine on AWS, using Terraform and Ansible to manage it. They use Kops to manage Kubernetes clusters on top of AWS. They are able to manage multiple instance groups that match AWS auto scaling groups.\n\nGitLab CI has enabled Radio France to add tests to their websites, including lighthouse, UI, and web bottle tests that they previously were unable to implement with Jenkins due to both cost and time management challenges.\n\nPreviously, the teams were using two instances of 64G full time with Jenkins runners, which cost approximately $1,100 monthly. With GitLab, teams are using between one to eight spot instances, but only for about 10 hours a day at a cost of about $300 a month. âThis makes a cost savings of 70% on our CI/CD costs,â Vey added.\n\nâThe great benefit of GitLab is that before we were going from five or six minutes for just deploying production. Now, when the build is already done with GitLab, I think it only takes 20 seconds to deploy on any environment,â Vey said. This created an 82% reduction in cycle time over the teamâs previous deployments using Jenkins.\n\nOverall workflow and collaboration has improved since they made the switch from Jenkins, allowing developers to manage the platform less and customize features more than they previously could. âWith Jenkins, it was a very static workflow. We couldnât customize it the way we wanted. It was really hard to add new functionalities,â Vey said. âNow with GitLab, we have huge flexibility and we can make the platform available for people to use without thinking a lot, just deploy it and people can use new features.â\n\nEach team is responsible for its own pipeline now. Developers can decide if, how, and when they want to deploy to production. Radio France has implemented all the tooling that is required for a developer to make their own choice."
    }
}