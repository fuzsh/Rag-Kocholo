{
    "id": "correct_publicationDate_00030_3",
    "rank": 40,
    "data": {
        "url": "https://opentextbc.ca/dbdesign01/chapter/chapter-sql-dml/",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 16 SQL Data Manipulation Language – Database Design – 2nd Edition",
        "top_image": "https://opentextbc.ca/dbdesign01/wp-content/themes/pressbooks-book/dist/images/favicon-32x32.png",
        "meta_img": "https://opentextbc.ca/dbdesign01/wp-content/themes/pressbooks-book/dist/images/favicon-32x32.png",
        "images": [
            "https://opentextbc.ca/dbdesign01/wp-content/uploads/2023/09/cropped-BCcampus-logo-colour.png",
            "https://opentextbc.ca/dbdesign01/wp-content/themes/pressbooks-book/packages/buckram/assets/images/cc-by.svg",
            "https://opentextbc.ca/dbdesign01/wp-content/themes/pressbooks-book/assets/images/yt_icon_mono_dark.png",
            "https://matomo.bccampus.ca/piwik.php?idsite=39&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Adrienne Watt &amp; Nelson Eng",
            "Adrienne Watt & Nelson Eng"
        ],
        "publish_date": "2014-10-24T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://opentextbc.ca/dbdesign01/wp-content/themes/pressbooks-book/dist/images/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://opentextbc.ca/dbdesign01/chapter/chapter-sql-dml/",
        "text": "Chapter 16 SQL Data Manipulation Language\n\nAdrienne Watt & Nelson Eng\n\nThe SQL data manipulation language (DML) is used to query and modify database data. In this chapter, we will describe how to use the SELECT, INSERT, UPDATE, and DELETE SQL DML command statements, defined below.\n\nSELECT – to query data in the database\n\nINSERT – to insert data into a table\n\nUPDATE – to update data in a table\n\nDELETE – to delete data from a table\n\nIn the SQL DML statement:\n\nEach clause in a statement should begin on a new line.\n\nThe beginning of each clause should line up with the beginning of other clauses.\n\nIf a clause has several parts, they should appear on separate lines and be indented under the start of the clause to show the relationship.\n\nUpper case letters are used to represent reserved words.\n\nLower case letters are used to represent user-defined words.\n\nSELECT Statement\n\nThe SELECT statement, or command, allows the user to extract data from tables, based on specific criteria. It is processed according to the following sequence:\n\nSELECT DISTINCT item(s)\n\nFROM table(s)\n\nWHERE predicate\n\nGROUP BY field(s)\n\nORDER BY fields\n\nWe can use the SELECT statement to generate an employee phone list from the Employees table as follows:\n\nThis action will display employee’s last name, first name, and phone number from the Employees table, seen in Table 16.1.\n\nLast Name First Name Phone Number Hagans Jim 604-232-3232 Wong Bruce 604-244-2322\n\nTable 16.1. Employees table.\n\nIn this next example, we will use a Publishers table (Table 16.2). (You will notice that Canada is mispelled in the Publisher Country field for Example Publishing and ABC Publishing. To correct mispelling, use the UPDATE statement to standardize the country field to Canada – see UPDATE statement later in this chapter.)\n\nPublisher Name Publisher City Publisher Province Publisher Country Acme Publishing Vancouver BC Canada Example Publishing Edmonton AB Cnada ABC Publishing Toronto ON Canda\n\nTable 16.2. Publishers table.\n\nIf you add the publisher’s name and city, you would use the SELECT statement followed by the fields name separated by a comma:\n\nThis action will display the publisher’s name and city from the Publishers table.\n\nIf you just want the publisher’s name under the display name city, you would use the SELECT statement with no comma separating pub_name and city:\n\nPerforming this action will display only the pub_name from the Publishers table with a “city” heading. If you do not include the comma, SQL Server assumes you want a new column name for pub_name.\n\nSELECT statement with WHERE criteria\n\nSometimes you might want to focus on a portion of the Publishers table, such as only publishers that are in Vancouver. In this situation, you would use the SELECT statement with the WHERE criterion, i.e., WHERE city = ‘Vancouver’.\n\nThese first two examples illustrate how to limit record selection with the WHERE criterion using BETWEEN. Each of these examples give the same results for store items with between 20 and 50 items in stock.\n\nExample #1 uses the quantity, qty BETWEEN 20 and 50.\n\nExample #2, on the other hand, uses qty >=20 and qty <=50 .\n\nExample #3 illustrates how to limit record selection with the WHERE criterion using NOT BETWEEN.\n\nThe next two examples show two different ways to limit record selection with the WHERE criterion using IN, with each yielding the same results.\n\nExample #4 shows how to select records using province= as part of the WHERE statement.\n\nExample #5 select records using province IN as part of the WHERE statement.\n\nThe final two examples illustrate how NULL and NOT NULL can be used to select records. For these examples, a Books table (not shown) would be used that contains fields called Title, Quantity, and Price (of book). Each publisher has a Books table that lists all of its books.\n\nExample #6 uses NULL.\n\nExample #7 uses NOT NULL.\n\nUsing wildcards in the LIKE clause\n\nThe LIKE keyword selects rows containing fields that match specified portions of character strings. LIKE is used with char, varchar, text, datetime and smalldatetime data. A wildcard allows the user to match fields that contain certain letters. For example, the wildcard province = ‘N%’ would give all provinces that start with the letter ‘N’. Table 16.3 shows four ways to specify wildcards in the SELECT statement in regular express format.\n\n%\n\nAny string of zero or more characters\n\n_\n\nAny single character\n\n[ ]\n\nAny single character within the specified range (e.g., [a-f]) or set (e.g., [abcdef])\n\n[^]\n\nAny single character not within the specified range (e.g., [^a – f]) or set (e.g., [^abcdef])\n\nTable 16.3. How to specify wildcards in the SELECT statement.\n\nIn example #1, LIKE ‘Mc%’ searches for all last names that begin with the letters “Mc” (e.g., McBadden).\n\nFor example #2: LIKE ‘%inger’ searches for all last names that end with the letters “inger” (e.g., Ringer, Stringer).\n\nIn, example #3: LIKE ‘%en%’ searches for all last names that have the letters “en” (e.g., Bennett, Green, McBadden).\n\nSELECT statement with ORDER BY clause\n\nYou use the ORDER BY clause to sort the records in the resulting list. Use ASC to sort the results in ascending order and DESC to sort the results in descending order.\n\nFor example, with ASC:\n\nAnd with DESC:\n\nSELECT statement with GROUP BY clause\n\nThe GROUP BY clause is used to create one output row per each group and produces summary values for the selected columns, as shown below.\n\nHere is an example using the above statement.\n\nIf the SELECT statement includes a WHERE criterion where price is not null,\n\nthen a statement with the GROUP BY clause would look like this:\n\nUsing COUNT with GROUP BY\n\nWe can use COUNT to tally how many items are in a container. However, if we want to count different items into separate groups, such as marbles of varying colours, then we would use the COUNT function with the GROUP BY command.\n\nThe below SELECT statement illustrates how to count groups of data using the COUNT function with the GROUP BY clause.\n\nUsing AVG and SUM with GROUP BY\n\nWe can use the AVG function to give us the average of any group, and SUM to give the total.\n\nExample #1 uses the AVG FUNCTION with the GROUP BY type.\n\nExample #2 uses the SUM function with the GROUP BY type.\n\nExample #3 uses both the AVG and SUM functions with the GROUP BY type in the SELECT statement.\n\nRestricting rows with HAVING\n\nThe HAVING clause can be used to restrict rows. It is similar to the WHERE condition except HAVING can include the aggregate function; the WHERE cannot do this.\n\nThe HAVING clause behaves like the WHERE clause, but is applicable to groups. In this example, we use the HAVING clause to exclude the groups with the province ‘BC’.\n\nINSERT statement\n\nThe INSERT statement adds rows to a table. In addition,\n\nINSERT specifies the table or view that data will be inserted into.\n\nColumn_list lists columns that will be affected by the INSERT.\n\nIf a column is omitted, each value must be provided.\n\nIf you are including columns, they can be listed in any order.\n\nVALUES specifies the data that you want to insert into the table. VALUES is required.\n\nColumns with the IDENTITY property should not be explicitly listed in the column_list or values_clause.\n\nThe syntax for the INSERT statement is:\n\nWhen inserting rows with the INSERT statement, these rules apply:\n\nInserting an empty string (‘ ‘) into a varchar or text column inserts a single space.\n\nAll char columns are right-padded to the defined length.\n\nAll trailing spaces are removed from data inserted into varchar columns, except in strings that contain only spaces. These strings are truncated to a single space.\n\nIf an INSERT statement violates a constraint, default or rule, or if it is the wrong data type, the statement fails and SQL Server displays an error message.\n\nWhen you specify values for only some of the columns in the column_list, one of three things can happen to the columns that have no values:\n\nA default value is entered if the column has a DEFAULT constraint, if a default is bound to the column, or if a default is bound to the underlying user-defined data type.\n\nNULL is entered if the column allows NULLs and no default value exists for the column.\n\nAn error message is displayed and the row is rejected if the column is defined as NOT NULL and no default exists.\n\nThis example uses INSERT to add a record to the publisher’s Authors table.\n\nThis following example illustrates how to insert a partial row into the Publishers table with a column list. The country column had a default value of Canada so it does not require that you include it in your values.\n\nTo insert rows into a table with an IDENTITY column, follow the below example. Do not supply the value for the IDENTITY nor the name of the column in the column list.\n\nInserting specific values into an IDENTITY column\n\nBy default, data cannot be inserted directly into an IDENTITY column; however, if a row is accidentally deleted, or there are gaps in the IDENTITY column values, you can insert a row and specify the IDENTITY column value.\n\nIDENTITY_INSERT option\n\nTo allow an insert with a specific identity value, the IDENTITY_INSERT option can be used as follows.\n\nInserting rows with a SELECT statement\n\nWe can sometimes create a small temporary table from a large table. For this, we can insert rows with a SELECT statement. When using this command, there is no validation for uniqueness. Consequently, there may be many rows with the same pub_id in the example below.\n\nThis example creates a smaller temporary Publishers table using the CREATE TABLE statement. Then the INSERT with a SELECT statement is used to add records to this temporary Publishers table from the publis table.\n\nIn this example, we’re copying a subset of data.\n\nIn this example, the publishers’ data are copied to the tmpPublishers table and the country column is set to Canada.\n\nUPDATE statement\n\nThe UPDATE statement changes data in existing rows either by adding new data or modifying existing data.\n\nThis example uses the UPDATE statement to standardize the country field to be Canada for all records in the Publishers table.\n\nThis example increases the royalty amount by 10% for those royalty amounts between 10 and 20.\n\nIncluding subqueries in an UPDATE statement\n\nThe employees from the Employees table who were hired by the publisher in 2010 are given a promotion to the highest job level for their job type. This is what the UPDATE statement would look like.\n\nDELETE statement\n\nThe DELETE statement removes rows from a record set. DELETE names the table or view that holds the rows that will be deleted and only one table or row may be listed at a time. WHERE is a standard WHERE clause that limits the deletion to select records.\n\nThe DELETE syntax looks like this.\n\nThe rules for the DELETE statement are:\n\nIf you omit a WHERE clause, all rows in the table are removed (except for indexes, the table, constraints).\n\nDELETE cannot be used with a view that has a FROM clause naming more than one table. (Delete can affect only one base table at a time.)\n\nWhat follows are three different DELETE statements that can be used.\n\n1. Deleting all rows from a table.\n\n2. Deleting selected rows:\n\n3. Deleting rows based on a value in a subquery:\n\nBuilt-in Functions\n\nThere are many built-in functions in SQL Server such as:\n\nAggregate: returns summary values\n\nConversion: transforms one data type to another\n\nDate: displays information about dates and times\n\nMathematical: performs operations on numeric data\n\nString: performs operations on character strings, binary data or expressions\n\nSystem: returns a special piece of information from the database\n\nText and image: performs operations on text and image data\n\nBelow you will find detailed descriptions and examples for the first four functions.\n\nAggregate functions\n\nAggregate functions perform a calculation on a set of values and return a single, or summary, value. Table 16.4 lists these functions.\n\nFUNCTION DESCRIPTION AVG Returns the average of all the values, or only the DISTINCT values, in the expression. COUNT Returns the number of non-null values in the expression. When DISTINCT is specified, COUNT finds the number of unique non-null values. COUNT(*) Returns the number of rows. COUNT(*) takes no parameters and cannot be used with DISTINCT. MAX Returns the maximum value in the expression. MAX can be used with numeric, character and datetime columns, but not with bit columns. With character columns, MAX finds the highest value in the collating sequence. MAX ignores any null values. MIN Returns the minimum value in the expression. MIN can be used with numeric, character and datetime columns, but not with bit columns. With character columns, MIN finds the value that is lowest in the sort sequence. MIN ignores any null values. SUM Returns the sum of all the values, or only the DISTINCT values, in the expression. SUM can be used with numeric columns only.\n\nTable 16.4 A list of aggregate functions and descriptions.\n\nBelow are examples of each of the aggregate functions listed in Table 16.4.\n\nExample #1: AVG\n\nExample #2: COUNT\n\nExample #3: COUNT\n\nExample #3: COUNT (*)\n\nExample #4: MAX\n\nExample #5: MIN\n\nExample #6: SUM\n\nConversion function\n\nThe conversion function transforms one data type to another.\n\nIn the example below, a price that contains two 9s is converted into five characters. The syntax for this statement is SELECT ‘The date is ‘ + CONVERT(varchar(12), getdate()).\n\nIn this second example, the conversion function changes data to a data type with a different size.\n\nDate function\n\nThe date function produces a date by adding an interval to a specified date. The result is a datetime value equal to the date plus the number of date parts. If the date parameter is a smalldatetime value, the result is also a smalldatetime value.\n\nThe DATEADD function is used to add and increment date values. The syntax for this function is DATEADD(datepart, number, date).\n\nIn this example, the function DATEDIFF(datepart, date1, date2) is used.\n\nThis command returns the number of datepart “boundaries” crossed between two specified dates. The method of counting crossed boundaries makes the result given by DATEDIFF consistent across all data types such as minutes, seconds, and milliseconds.\n\nFor any particular date, we can examine any part of that date from the year to the millisecond.\n\nThe date parts (DATEPART) and abbreviations recognized by SQL Server, and the acceptable values are listed in Table 16.5.\n\nDATE PART ABBREVIATION VALUES Year yy 1753-9999 Quarter qq 1-4 Month mm 1-12 Day of year dy 1-366 Day dd 1-31 Week wk 1-53 Weekday dw 1-7 (Sun.-Sat.) Hour hh 0-23 Minute mi 0-59 Second ss 0-59 Millisecond ms 0-999\n\nTable 16.5. Date part abbreviations and values.\n\nMathematical functions\n\nMathematical functions perform operations on numeric data. The following example lists the current price for each book sold by the publisher and what they would be if all prices increased by 10%.\n\nJoining Tables\n\nJoining two or more tables is the process of comparing the data in specified columns and using the comparison results to form a new table from the rows that qualify. A join statement:\n\nSpecifies a column from each table\n\nCompares the values in those columns row by row\n\nCombines rows with qualifying values into a new row\n\nAlthough the comparison is usually for equality – values that match exactly – other types of joins can also be specified. All the different joins such as inner, left (outer), right (outer), and cross join will be described below.\n\nInner join\n\nAn inner join connects two tables on a column with the same data type. Only the rows where the column values match are returned; unmatched rows are discarded.\n\nExample #1\n\nExample #2\n\nLeft outer join\n\nA left outer join specifies that all left outer rows be returned. All rows from the left table that did not meet the condition specified are included in the results set, and output columns from the other table are set to NULL.\n\nThis first example uses the new syntax for a left outer join.\n\nThis is an example of a left outer join using the old syntax.\n\nRight outer join\n\nA right outer join includes, in its result set, all rows from the right table that did not meet the condition specified. Output columns that correspond to the other table are set to NULL.\n\nBelow is an example using the new syntax for a right outer join.\n\nThis second example show the old syntax used for a right outer join.\n\nFull outer join\n\nA full outer join specifies that if a row from either table does not match the selection criteria, the row is included in the result set, and its output columns that correspond to the other table are set to NULL.\n\nHere is an example of a full outer join.\n\nCross join\n\nA cross join is a product combining two tables. This join returns the same rows as if no WHERE clause were specified. For example:"
    }
}