{
    "id": "dbpedia_6604_2",
    "rank": 50,
    "data": {
        "url": "https://medium.com/%40unidaystudio/ill-challenge-myself-to-make-a-full-game-in-unreal-engine-5-in-a-week-626c0aae6f4a",
        "read_more_link": "",
        "language": "en",
        "title": "I’ll challenge myself to make a Full Game in Unreal Engine 5 in a week",
        "top_image": "https://miro.medium.com/v2/resize:fit:1012/1*kE2MsGzzucSDuGQQiBJq1A.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1012/1*kE2MsGzzucSDuGQQiBJq1A.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*ayPxV3Yovo9swrdvp9jH2w.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*ayPxV3Yovo9swrdvp9jH2w.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Guilherme Teres",
            "medium.com"
        ],
        "publish_date": "2024-06-13T02:28:26.808000+00:00",
        "summary": "",
        "meta_description": "This may sound like a terrible (or at least curious) idea, but hear me out first! I believe it’s a great project and I hope that I’ll be able to share a bunch for y’all, my unknown random internet…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@unidaystudio/ill-challenge-myself-to-make-a-full-game-in-unreal-engine-5-in-a-week-626c0aae6f4a",
        "text": "Guilherme Teres\n\n·\n\nFollow\n\n12 min read\n\n·\n\nJun 13, 2024\n\n--\n\nThis may sound like a terrible (or at least curious) idea, but hear me out first! I believe it’s a great project and I hope that I’ll be able to share a bunch for y’all, my unknown random internet friends. :)\n\nSome Background first:\n\nMy name is Guilherme, I’m a senior Game and Engine Developer that has been making games for around 15 years (professionally, 10 years) and I currently own a small Game Studio called “Uniday Studio”. At the moment, we are currently working on our game, with a team of 3, called Pixel Nightfall, a 3D, open world, stealth, adventure game with retro graphics and an interesting map for you to explore. We are making the game using our own technology, a game engine called “Cave Engine” that I’ve been developing for the past 9 years of my life.\n\nI’ve worked in the industry for other companies for a while, doing Console Porting of Games made with Proprietary Engines and I’ve also shipped around 45 games in my life. Most of them are small and not worth much attention. Only recently that we really started to gain some traction to approach some bigger projects of our own!\n\nThen Why am I doing this Unreal 5 Project?\n\nFor fun, probably, but most importantly, to learn and explore new technologies. It is always a good idea to find out something new and expand your horizons. When Unreal 5 was initially announced (in early access I guess, I don’t remember exactly), I was working for a company doing some Console Ports and they happened to had another team working near me in another project, using UE5. By simply spending time with my coworkers and talking about it (plus some countless nights experimenting after work) I was able to pick it up quite fast and I really appreciated all the experience I got.\n\nLater on, a lot of that experience ended up helping me in various areas of my career, including the development of the Engine (that was already quite advanced in the works when I first learned UE5).\n\nBut it’s been a while now…\n\nUnreal Engine already evolved a lot and are all the way up to version 5.4. So I decided that it’s time to relearn it!\n\nI can’t go full time during this week, unfortunately, because I still have Pixel Nightfall to finish and a bunch of other responsibilities in the Studio that I didn’t mentioned. But I’ll try to spend as much time as I can working on this.\n\nSo let’s get it started!\n\nStep 1: The Idea!\n\nI’m writing this on June 12th and this is “day zero”, since I don’t plan to do any real work right now (and it’s also late night!). Starting tomorrow, I’ll be counting seven consecutive days and the GOAL is to have a finished, polished, tested and solid product to release. Yes, I intend to make a small “commercial” (not necessarily paid, we will see) game during this period, because why not?\n\nToday is the planning day and I decided to use Medium to do all that! So everyone will be able to see how it goes (or if I fail miserably).\n\nBefore I start the actual plan, I would like to address what I believe will be easy for me (and why) and what will be challenging.\n\nStarting with the “easy” one, I believe that the Design and Production part of the game won’t be a huge problem, since I have plenty of experience in it. The same goes for logic paradigm and the core architecture of Unreal Engine, which I do remember very vividly. I also don’t have any issues with art or sounds, specially because those areas are mainly done outside the engine and I do have plenitly experience with it. Before you say, let me address that I don’t intent to do any extra complicated materials or shaders inside the engine, I’ll keep those as simple as possible.\n\nThe “hard” part will certainly be the new features that I haven’t messed around yet (like the new Input System that I’ve heard) and most importantly, putting everything together as a single, polished, finished product. People underestimate A LOT how hard it is to FINISH a game. Because one thing is study a lot of features isolated or do some cool tests. Another thing, completely different, is merge all that together. The good old “Integration Hell”. I’m already antecipating that this can be chaotic, so you will see that I’ll plan ahead and force this to happen very early on in the project, so I’ll have enough time to solve it.\n\nSince I do have a lot of experience with game dev and I do know the “basics” of unreal (I mean, how unreal was many years ago), I’ll not reserve any time for Research and Development (R&D), which typically is a good idea if you’re starting with something new. Let’s find out if this will be a good or a terrible idea together!\n\nStep 2: The Game!\n\nEnough fluffy talking, let’s jump to the exciting part!\n\nI couldn't get out of my head the Diablo 1 post mortem I’ve watched recently on GDC (this video), precisely the part at 27 minutes when David Brevik talks about how excited he was when he first made the game “real time” (it was originally turn based):\n\n“So I remember taking the mouse, and I clicked down the mouse, and the warrior walked over and smacked the skeleton down! And I was like: OH MY GOD, THAT WAS AWESOME!” — David Brevik (Diablo 1)\n\nWhen I watched this I got so excited that I knew that I wanted to do a “point and click action top down game”. And that’s exactly what I’m going to do!\n\nIt will not be a “Diablo-like game” or an Action RPG, but I really want to recreate the feeling of having a camera pointed top down like that and you having the ability do click where you want the hero to go or who you want it to attack. To build the game on top of that, I’ll take some inspiration on rogue/rogue-like games and make it an “endless” (maybe?) procedurally generated “dungeon killing” game. I’ll also take some inspirations from Vampire Survivals and you will see how in a moment.\n\nSo this is my Game:\n\nI’m really trying my best to not use any terms like “rogue”, “rogue-like”, “a-rpg”, because I’m pretty sure that we have some very fanatic fans of those genres that will get very upset if I say that the game is that and then proceed to do something different from those genre’s “formulas”.\n\nThis post is a “live one”, I’m literally planning the game as I write. This is interesting because it it an opportunity for you to see how I think as a game designer. So let’s proceed. The Game Style will follow those rules:\n\n3D Game, Top Down Camera\n\nPoint and Click to move and/or Attack\n\nNo fancy Skill Trees or Inventory\n\nPlayer will have some adjustable Variables (via Perks), such as health, speed, defense and range.\n\nAnd the Gameplay Loop will look like this:\n\nYou Spawn in a procedurally generated Dungeon\n\nKill Enemies,\n\nFind Keys,\n\nOpen Doors\n\n[Maybe Repeat 2–4?]\n\nDefeat the Dungeon Boss\n\nYou won: Pick one of three different random perks\n\nRepeat it for the next level!\n\nSince I’m a visual guy, here is the Gameplay Loop’s Diagram:\n\nThis alone raises a lot more questions than it solves. But that’s a good thing, since it helps identifying early problems… that’s why we plan, right?\n\nMy initial concern is regarding the dungeon generation. While I’m familiar with this, I’ve never done anything similar in Unreal and I can already see this becoming a problem on its own. I’m initially planning to use Unreal’s Blueprints for the game, but I’m almost 100% sure that the generation part will be quite easier to do if I go with C++ instead, which is the language I’m most familiar with and lucky Unreal supports it.\n\nWorst case scenario: The game will have a bad procedural generation algorithm and that probably means that we will have to discard the Key -> Door logic, which is something I don’t want to discard.\n\nAnother concern is that since I’m (1) planning to make this endless and (2) talking about a single week deadline, there is a high chance that the game won’t have more than 1 boss, which will get quite bad and repetitive really fast. As soon as the player realizes that each dungeon have the same boss, it’s the end of the line to our game.\n\nSo what’s the Plan B?\n\nWell, something very simple we can do to allow variation but with a very limited amount of Enemies is to rely on the proportions and quantity of each enemy. Meaning that instead of having certain enemies + a boss per dungeon, each dungeon could have the same types of enemies, except that we vary the amount of them. Similar to how Vampire Survivors do.\n\nIt’s definitely not as cool and as fun as having unique enemies and bosses per level… But due to the limited amount of time we have, here is a better diagram with that in mind:\n\nI prefer the first one and honestly I will keep it in mind during the development, maybe I can find a way to make it happen. But for now, this is the goal so far!\n\nOk, now that I have the initial concept of the Gameplay Loop, I decided to play how the Game Screens Diagram will look like. I see 90% of the devs avoiding, completely forgetting or even not being aware of the importance of knowing how your player will interact with the game as a whole.\n\nRemember that I said that completing a game is completely different than studying or doing random tests? This is one of the things that you only think about if you’re used to shipping multiple games. So I decided to anticipate and plan it first. This basically represents the flow that the player will follow across your entire game. They can be very complicated or very simple, buy the key to not “fail” in it is to plan. So here it is:\n\nWith this in mind, I have a very well defined behavior that I expect the game to follow, so it’s way easier for me to later on create them all in the engine. Notice that I’m considering a lot of interfaces here and that’s on purpose.\n\nThere is a lot more to cover here. We still need to figure out the Core Mechanics and all the implications that it will have. Most importantly, we also need to figure out how the Procedural Dungeon Generation will work and how the AIs for the Enemy types will look like. Talking about the enemy types, what are they?\n\nWell, we have a long road to go…\n\nBut unfortunately, I have limited time so I’ll have to leave the planning for this part to the days I actually implement each of them.\n\nThis is not exactly good, because planning those things ahead really helps not only to save time, but most importantly to ensure that the game idea is solid and has some strong foundations. What I already antecipate is that there is a chance for the game to end up being “not so much fun” due to the lack of development on a Core Mechanic. I’m hoping that the Gameplay Loop is interesting enough to compensate that, but I have my doubts.\n\nWe will see…\n\nStep 3: The Plan\n\nMoving on, I’ll end this post by planning what I’ll be doing during each day of the Project. I’ll be using a spreadsheet to track my progress and organize myself, simply because I absolutely dislike productivity tools. I’ve had enough of them: Trello, Todoist, some fancy agile and other methodologies… I know they’re good and to be fair, my workflow is probably very similar to one of them, one that I don’t even remember anymore. Because it was similar to how we used to work when I was doing Console Ports.\n\nI have a clear goal in mind when it comes to the planning:\n\nI want to finish the Player Gameplay + Enemy part as soon and as fast as I can. This can’t be an issue for this game. Remember the integration hell I mentioned? I don’t want it to happen. That’s why I have an ambitious goal to finish them all on day one! (Tomorrow)\n\nThat way I could take the entire day two to basically work on the Procedural Dungeon Generation. It will be a challenge, so I’m curious to see how it goes.\n\nOther than those two days, I don’t have a clear milestone for the other ones other than slowly (But surely) keep completing tasks and walking towards having the game complete. You will notice that I’m spreading audio and art all over the place as well as the game UIs. That’s intentional for some reasons:\n\nAudio: I personally really dislike working with Audio… and something I learned over the years is that you should start tacking the tasks you dislike as soon as possible (if this don’t make you lose motivation, of course) to avoid doing them poorly in the end.\n\nArt: Since I’ll be working on this solo, I prefer to do the art together with the rest of the game. It helps me keep motivated. Plus I’m planning to rely on some premade assets this time, so it won’t take long (hopefully).\n\nUI: User interfaces are extremely important, yet very commonly ignored by game devs, specially indie ones. What you don’t realize is that the Main Menu and the other UI elements are basically the first thing that every player will see. So if you do them cheaply, your entire game will also look cheap.\n\nSo let’s take a look on how I’ve planned the tasks:\n\nThe logic behind this is simple: I have the Task Status on the left (TODO, In Development, Done or Discarded), then the Task Description and in the Right side, I have all the development period and I can “color the blocks” to indicate which days I’ll be working on each task.\n\nAs you can see, the Gameplay Programming part is pretty much all centered in the first day (tomorrow) as I said. Let’s move on:\n\nNow we have the game screens tasklist. They’re well spread across the week and it’s not a fully random spread: If you pay attention to this, the previous and the next images, you will see that they correlate to other parts of the logic that needs UI. And some of them are random, placed whenever the day that had fewer tasks, yeah. :P\n\nThe one above is all about Dungeon Generation and Enemy Logic. Two interesting things here is that (1) you can see that I really tried to fit all the Enemy Logic in a single day (the first one). You can see that I’ve also described the logic a bit better and it is very simplistic. I don’t plan to implement anything more complex than that due to the time constraints. We will see!\n\nThe other thing (2) you can notice is that I’ve planned to start the Dungeon Generation on day two (Friday), but I’ve extended it all the way up to day five. That’s because I believe that there is a chance for the system to initially be very bad and require a lot of work and tweaking to get it good. So I’m planning ahead!\n\nNote to myself: “Yes, I’m being not very smart planning all the enemy logic to the day one with the player. A smarter approach would be having it on day two, the dungeon on day three and so on. But let’s see how it goes!”\n\nMoving on…\n\nLast but not least, we have Art and Sound. As I’ve already explained before, they are well spread across the development period to make sure I don’t lost track of them. I also really dislike adding Sounds to games so… that’s it!\n\nLast Words…\n\nIn my mind, writing this post would take me 20 minutes max, but ended up taking more than 3 hours! But it’s fine, I took the time to plan everything and consider a bunch of corner cases, so I’m calling this a success.\n\nThe goal is to write a post like this every day until the game is complete, so stay tuned for that. If you want to get in touch, consider joining my discord server by clicking here.\n\nSo that’s if for today, folks! I see y’all tomorrow!"
    }
}