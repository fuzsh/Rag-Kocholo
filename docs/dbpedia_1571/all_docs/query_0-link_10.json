{
    "id": "dbpedia_1571_0",
    "rank": 10,
    "data": {
        "url": "https://www.iastatedigitalpress.com/jtmae/article/id/14485/",
        "read_more_link": "",
        "language": "en",
        "title": "Modular System Approach for Modeling and Simulation of Combat Aircraft Survivability Testing",
        "top_image": "https://www.iastatedigitalpress.com/media/press_carousel/128a6ed1-b319-47d5-9d70-218ecd3ecaed.ico",
        "meta_img": "https://www.iastatedigitalpress.com/media/press_carousel/128a6ed1-b319-47d5-9d70-218ecd3ecaed.ico",
        "images": [
            "https://www.iastatedigitalpress.com/media/cover_images/a79923b9-8952-4b53-81c2-8a754e31733e.png",
            "https://www.iastatedigitalpress.com/jtmae/article/id/14485/1.png",
            "https://www.iastatedigitalpress.com/jtmae/article/id/14485/2.png",
            "https://www.iastatedigitalpress.com/jtmae/article/id/14485/3.png",
            "https://www.iastatedigitalpress.com/media/cover_images/1e256962-9325-4fd2-84d0-285a9b28373f.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Maxim Olivine",
            "Edwin K. P. Chong"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Currently, testing for combat aircraft survivability occurs either in open-air ranges or through computerized modeling and simulation. The traditional methods of survivability modeling and simulation are proprietary, narrowly specialized, and often too limited in their scope of application. To address these issues, this article presents a modular approach to aircraft survivability modeling and simulation—an affordable and reusable one-stop-shop tool for engagement- and engineering-level computerized survivability testing. In the modular approach to modeling and simulation, a black-box solver operates with predefined inputs that dictate the environment (e.g., friend or foe) to output parameters from which one can draw conclusions about the probability of survivability of a given aircraft. The benefits of a modular approach are its flexibility, cost efficiency, ease of use, and portability. This article argues that the modular approach has the potential to provide a portable suite of tools that allows for the creation of effective modeling and simulation scenarios to augment or replace open-air testing, thereby improving upon traditional methods of aircraft survivability modeling and simulation while learning from past composability mistakes.",
        "meta_lang": "en",
        "meta_favicon": "/media/press_carousel/128a6ed1-b319-47d5-9d70-218ecd3ecaed.ico",
        "meta_site_name": "The Journal  of Technology, Management, and Applied Engineering",
        "canonical_link": "https://www.iastatedigitalpress.com/jtmae/article/id/14485/",
        "text": "Shortfalls of Modeling and Simulation\n\nComputerized modeling and simulation\n\nAt the core of these computer simulations are typically just a handful of equations that model aircraft detection, tracking, and engagement. Among these is the common detection and ranging equation called the radar range equation, which defines the effectiveness of a radar by determining the maximum distance at which the radar can detect a given target as well as providing the range to target. Equation 1 is a simplified radar range equation (Ball, 2003)\n\ns=((Pr4πR2)·Gr)·(σ)·(14πR2)·(Ae)\n\n(1)in which\n\n• s is the received (echo) power at the antenna,\n\n• Pr4πR2 is the omnidirectional power density at a distance of R,\n\n• Gr is the radar antenna gain factor,\n\n• σ is the aircraft’s radar cross section,\n\n• 14πR2 is the attenuation in power caused by omnidirectional wave propagation over a distance of R, and\n\n• Ae is the antenna effective aperture.\n\nThe complexity of the radar range equation increases sharply when accounting for weather, ground clutter, low observability, aerodynamic properties, detection mitigation techniques, etc. In fact, additional complex equations may be required to calculate less trivial concepts ahead of inputting a particular value in the solver. Nevertheless, the fundamental equation and theory behind radar ranging remains generally the same.\n\nAnother common and critical set of equations specific to aircraft survivability is the missile-engagement equations, depicting the missile’s geometry and the trajectory required to hit the target. Much like the radar range equation, these kinematic equations vary with inputs such as complicated environmental factors, missile flight characteristics, on-board and ground-based electronics, etc. Similarly, for simulations of more complex weapon systems, more sophisticated plugins might be required to compute a more accurate input into the solver. Equations 2 –10 below are a relatively straightforward set of equations describing the kinematics of missile-engagement geometry (Devan, 2015):\n\nR˙=Vtcos(γt−λγ)cos(ψt−λψ)−Vmcos(γm−λγ)cos(ψm−λψ)\n\n(2)\n\n−Rωy=Vtcos(γt−λγ)sin(ψt−λψ)−Vmcos(γm−λγ)sin(ψm−λψ)\n\n(3)\n\nRωz=Vtsin(γt−λγ)−Vmsin(γm−λγ)\n\n(4)\n\nλ¨ψ=−1R[2R˙λ˙ψ+atycos(γt−λγ)−amycos(γm−λγ)]\n\n(5)\n\nλ¨γ=1R[−2R˙λ˙γ+atzsin(γt−λγ)−amzsin(γm−λγ)]\n\n(6)\n\nψ˙t=−atytanψtVtcosγt\n\n(7)\n\nγ˙t=−atztanγtVtcosψt\n\n(8)\n\nψ˙m=−amytanψmVmcosγm\n\n(9)\n\nγ˙m=−amztanγmVmcosψm\n\n(10)in which the unknown variables on the left side of each equation represent the flight angles of the triangle created between the ground, the line from the missile launcher to the aircraft, and the elevation of the aircraft form the ground, all changing over time with the variables on the right side of each equation. With normal radar signature return under typical conditions, the right-hand side variables will be known.\n\nTogether, the radar range equation and the missile-engagement equations, in various forms, make up the mathematical core of almost any engagement-level aircraft survivability simulation model like Enhanced Surface-to-Air Missile Simulation (ESAMS) or Radar-Directed Gun System Simulation (RADGUNS) (Wang et al., 2009). Around this mathematical apparatus sit multiple algorithms that compute and output mathematical parameters, such as trajectory, distance, velocity, etc., that are useful in analyzing survivability. These outputs often are converted into a convenient graphical user interface that outputs informative and readily legible images. In all, entire simulations are forged on a handful of critical modifiable equations to expose and fix aircraft survivability shortfalls.\n\nWhereas the core equations of most models are not all that complex, it is in the fine-tuning of the scenario and the players that introduces the complexity. In fact, to achieve an accurate representation of open-air testing or a real engagement, one might use a separate model for each engagement with different missiles, radars, aircraft, etc., to account for characteristics and systems of the various players in a given scenario, such as military aircraft, surface-to-air system, environmental effects, etc. Without getting outside the scope of the article, the reasoning for model complexity and variety, beyond just different environments, is the complexity and variety of different weapon systems. For example, ground-based engagement systems can have a plethora of different detection, acquisition, and engagement radars that span the whole gamut of frequencies, as well as have many different missiles (passive, active, semi-active, different paths of flight, velocity, control surfaces, etc.) with dramatically different aerodynamics and flight characteristics. Individual missile design varies with complex engineering and missile logic systems that impact the trajectory of flight, detonation distance, engine burn rate and time, control and maneuverability, etc. Similarly, different aircraft have drastically different radar cross sections, countermeasures, maneuverability, infrared signature, etc. It is because of this complexity that defense aircraft survivability has adopted niche models for various functions (Ball, 2003). To date, no good solution exists to overcome or simplify that complexity, and this article will not attempt to argue otherwise; however, the core computations that capture the relationship between objects in a simulation (like the ground radar and the aircraft) remain mostly the same, allowing for a universal solution for these core functions (Steinkellner, 2011).\n\nThe problem: Too many tools\n\nDespite the relative simplicity and repeatability of these core mathematical computations, countless aircraft survivability modeling and simulation tools exist, including the more commonly known ones such as ESAMS, RADGUNS, Advance Low-Altitude Radar Model (ALARM), BRAWLER, and Trajectory Analysis Program, just to name a few (Hall & Ketcham, 2009). The reason for the existence of so many tools is threefold: proprietary technology, customization, and specialization. Proprietary modeling and simulation tools are often created as part of a major aircraft defense project, an element of a total-package approach to the weapon system in which all sub-components, software, tools, etc., are produced within the scope of the project. Creation of proprietary modeling and simulation tools generally exists for one of two reasons: either the defense contractor creating the tool wants to retain intellectual rights to the software for profit reasons, or a government agency classifies the software at a level open only to a small subset of people. In defense projects with no transfer-of-intellectual-property clause relating to modeling and simulation (and such contracts are many relating to software in general), the defense contractor is not incentivized to create a relatively complex modeling tool with likely no return on investment because the product could be released to the public by the government: such sunk costs run counter to the for-profit business model of most defense-oriented companies (U.S. Government Accountability Office, 2019). By contrast, nonprofit government organizations generally have few reservations about the release of intellectual property, except when such a release might harm national security.\n\nMoreover, these proprietary tools are generally optimized for a specific platform and customized for a certain scenario, making them unsuitable for other applications. Software is usually customized to save costs and improve results with less effort. To limit the scope of the work and thus minimize cost, modeling and simulation tools are customized to fit specific flight characteristics of a platform or a specific environment, ignoring everything outside of the desired flight envelope. Similarly, if a modeling and simulation tool is created specifically for the survivability of a given aircraft with known parameters, the software set can be fine-tuned for specific inputs and outputs, optimizing the efficacy of the model (Hall & Ketcham, 2009).\n\nFinally, and for many of the same reasons, modeling and simulation tools are often specialized for specific combat scenarios like military aircraft engagement with a surface-to-air threat, military aircraft detection by a radar, or some combination of the two, varying in levels of accuracy and precision. Specialization of a modeling and simulation tool creates software that may be good at some computations but less adept at performing others. For example, an engagement model might need an underlying assumption that the target has not been detected upon launch in order for an active or semi-active seeker to have a chance at detecting the target in flight rather than detecting the target before engagement begins. On the other hand, a detection and tracking radar model may not have an engagement mechanism at all. Such a specialized tool may allow for more focus on a smaller, and therefore simpler, problem set. However, this situation results in the need for multiple models to produce a full picture of the combat environment like Figure 1, which is a top-level operational view of a complex combat environment including the various players and assets like aircraft, radar systems, command and control systems, engagement assets, etc. (Erlandsson & Niklasson, 2015).\n\nFor example, ESAMS is a long-serving excellent missile-engagement model that simulates “the interaction between an airborne target and a surface-to-air missile (SAM) air defense system” (ESAMS, 2019). ESAMS allows for customization of certain parameters to account for a wide and accurate threat layout and precise aircraft models. However, for example, ESAMS does not account for aerodynamics, so one must use a different model to calculate and output accurate flight data. BlueMax7 was created with that purpose in mind, outputting aerodynamic data files that are compatible as inputs for other models like ESAMS. BlueMax7 produces an accurate flight path with detailed flight dynamics and aeronautic performance. However, although BlueMax7 provides some level of manual interoperability between models, it falls short of being a truly integrated component of a large autonomous or modular system (BlueMax7, 2019). This example repeats itself endlessly in the defense modeling and simulation world, where more and more models are required to develop a full survivability analysis for a given aircraft.\n\nThe problem with having so many modeling and simulation tools is that considerable time and money are spent unnecessarily to answer the requisite survivability questions. Usually, many man-hours and multiple expensive tools are necessary to create a full picture of aircraft survivability due to the need for many simulations in many different tools. Moreover, often the tool that best answers a specific survivability question is incompatible with the system under test, or vice versa. In such cases, the solution is typically to create a new custom tool to answer the necessary survivability well-understood questions for the proper platform, exacerbating the need for more man-hours and financial burden. In contrast, a one-stop-shop modular survivability tool with the necessary niche plugins would allow for leaner separate models to answer the same questions, thereby lowering the complexity of tools and man-hours required and minimizing the financial expense of the effort. Efficiency is achieved by eliminating the need for creating the operations common in many modules—the common denominator equations—inside the plugins themselves, capitalizing on the solver. Instead, fewer man-hours and funds are spent strictly on said niche plugin rather than creating an all-inclusive new model, requiring less operations, fewer lines of code, and a more manageable software size (Albers et al., 2019).\n\nIn all, there are far too many, oftentimes overlapping, tools to model different aircraft and survivability engagement scenarios, all based on the same fundamental set of equations. Proprietary technology, customized tools, and specialized simulations get in the way of creating one modeling and simulation platform upon which all scenarios can be built. Guarding of intellectual property and declassification of sensitive models creates a great deal of overlap of effort and modeling capability. Similarly, customized model and simulation tools are too narrowly focused, making them difficult to use with an unintended platform. Finally, specialized modeling and simulation tools created for a narrow problem or scenario, without modification for a modular system, similarly prevent the development of a one-stop shop for the entire aircraft combat survivability environment.\n\nRelated Prior Work\n\nDoD modeling and simulation triad (JWARS/JSIMS/JMASS)\n\nThe most relevant, but different, past example of a failed approach was the JWARS, JSIMS, and JMASS triad of DoD modeling and simulation, three modeling and simulation environments forming a campaign, theater, and engagement/engineering triad, respectively. The initiative was an attempt to bridge the gap between campaign, theater, and engineering-level modeling while at the same time incorporating many different modeling solutions into a complete package. At the time in the late 1990s and early 2000s, the idea seemed brilliant, only to be overcome by extreme complexity and overstretching of resources—the effort bit off more than it could chew. The modular approach presented in this article focuses on an engineering-enabled engagement-level modular solver only, without overstretching the idea to multiple simulation levels and leaving the customization of models to modular plugins rather than enforcing composability (Maxwell, 2000).\n\nJWARS was meant to be a cutting-edge campaign-level environment that provided battle space situational awareness to decision makers by aiding to digest the complexities of modern joint warfare. The modeling environment included realistic complexities like weather, terrain, logistical limitations, available intelligence, perception of the enemy, and more (Maxwell, 2000). Similarly, JSIMS was a model that accounted for much of the same environmental and external factors but focused more on the operational and even tactical level (Bennington, 1995). Together, these two models were meant to create a complete picture of the entire military campaign down to the individual unit level, with JWARS providing a simpler but broader view while JSIMS dove deeper on a smaller scope or subset of the campaign.\n\nJMASS was meant to take this modeling process to an even deeper level by creating an engineering-level engagement simulation environment with mathematically rigorous probabilities of success. Rather than serving as a model itself, the JMASS environment fell into the composability trap by compiling various existing leading engineering and engagement models that were customized for specific units and tasks (Russell & McQuay, 1993). After simulating an engagement, JMASS would pass a success or failure result back up to JSIMS to display at the theater level view. Conceptually, the idea of an engineering-to-campaign level one-stop-shop modeling environment is undeniably attractive. To this day, the defense community is yearning for such a universal, standardized solution to modeling and simulation for everything from laboratory developmental research to operational testing and the validation, verification, and accreditation process.\n\nThe triad undertaking did not take hold in the defense modeling and simulation community, however, because it did not account for the overwhelming complexity of the problem and the variety of models required for different tasks and for different users. The breadth of content and detail required at the campaign and theater levels can be complex to replicate in a computer system, especially when considering the diversity of different operations, units, and dynamics between them. Arguably, though, the true difficulty arises when trying to calculate individual subunit-level engagements. Be they large-scale battles, few-vs-few, or even in the simplest one-vs-one case, once physics and relatively realistic mathematical computations take the place of pre-determined look-up tables, the complexity level skyrockets. Once such complex and processing power-intensive computations are compounded by the number of engagements required at a theater—not to mention campaign—level, the problem set becomes simply too complex. Moreover, given that it is nearly impossible to include every defense solver in one package, the triad came pre-loaded with an unwieldy set of solvers optimized for specific computations while being less than ideal for others, creating a limited composability scenario that was imperfect for most (Davis and Anderson, 2004). Consequently, the JWARS, JSIMS, and JMASS triad, while not inoperable, did not gain widespread popularity in the defense modeling and simulation community, proving to be a jack-of-all-simulation-trades without being a master at any one level. While the DoD modeling and simulation triad is the best example to date of an attempted modular one-stop-shop, a variety of other modular modeling and simulations tools have been created over the years. Each of them either fell shorter in their success compared to the triad or tackled a smaller piece of the puzzle like design modeling, aerodynamic modeling, etc. (Hall & Ketcham, 2009).\n\nThe modular system approach presented in this article serves as both a smaller scope and more flexible solution while sharing some similarities with the JMASS engagement and engineering-level component of the triad of defense modeling and simulation. Unlike JMASS, the modular approach would focus on the mathematical and physical backbone required for modeling and simulation computations without creating an all-inclusive limiting package. Various specialized models could be plugged in, in the form of software plugins or modules, into the foundational software set to customize a simulation based on a specific scenario. Similarly, unlike the triad approach, the modular system would focus on the engagement and engineering levels only (about a third of the problem set), minimizing the breadth of complexity. However, although outside the scope of this effort, after customizing the simulation, a user could plug it into some larger-scale theater model or environment, like JSIMS, for example.\n\nIn sum, while similarities exist between the unsuccessful JWARS, JSIMS, and JMASS triad of defense modeling and simulation and the modular system approach, JMASS limits the scope and allows for modularity to build on the triad effort’s shortfalls. The scope is limited by omitting the campaign- and theater-level simulation environments altogether (JWARS and JSIMS). Although modularity is introduced by replacing the mostly proprietary and not customizable JMASS simulation environment with a set of building blocks into which models could be plugged in, one can customize the simulation to a unique task. By doing so, the modular approach avoids the insurmountable complexity of multi-level simulations and embraces customization in a narrower simulation scope rather than forcing an all-inclusive solution on the defense community.\n\nJoint simulation environment\n\nThe closest existing concept to the modular approach proposed in this article is the joint simulation environment (JSE)—a “scalable, expandable, high-fidelity government-owned, non-proprietary modeling and simulation environment to conduct testing on fifth-plus generation aircraft and systems accreditable for test as a supplement to open-air testing” (Casem, 2019). The JSE effort is a difficult task, trying to incorporate verification, validation, and accreditation, as well as an extensive scope of open-air testing. A key test of most fifth-generation aircraft accreditation efforts is the survivability component. The JSE analyzes the survivability of an aircraft by incorporating an operational flight-program-piloted cockpit with dedicated solver for detection, tracking, and engagement. The environment inputs include “things like weather, terrain, multiple other platforms and air and ground threats” (Casem, 2019), among others, in a seemingly unlimited configuration. Similarly, the brain of the JSE, the solver, is able to output an almost overwhelming amount of data in real time, simulating what may resemble a modern video game, and allowing for a realistic combat simulation of aircraft survivability (Casem, 2019).\n\nUnfortunately, the JSE is not ideal because it fuses multiple different models into one integrated package rather than using a new independent portable solver, partially repeating the missteps of JMASS. Unlike the proposed solution in this article, the JSE utilizes several industry standard software packages for different parts of the total survivability question (i.e., EEAGLES, NGTS, DIADS, etc.) (Smith, 2018). The downside of that approach is the continued reliance on third-party developers for their tools, keeping the costs and proprietary dependability high while limiting customization. Moreover, the JSE is designed from the ground up as a human- and hardware-in-the-loop system, limiting the mobility of the system. In contrast, the approach presented in this article proposes the use of in-house developed solvers and takes modularity to a whole new level, allowing for hardware and human integration and standalone operation (Olivine, 2017).\n\nProposed Solution: Modular System Approach\n\nOur proposed solution is an engineering-level engagement modular approach to aircraft survivability modeling and simulation. The heart of the approach is a black-box solver that can compute solutions to the kind of generic equations discussed earlier. In addition to the black-box solver, there are also other modular components (which we call modules). The combined black-box solver and modules as a system takes inputs that are fed either into one or more modules or directly into the black-box solver. The outputs of the black-box solver are similarly fed into additional modules or directly output as aircraft survivability results based on the provided inputs. Whereas the algorithms and equations might be time-consuming for a human to solve, the computerized black-box solver would handle them with ease. The term black-box alludes to the fact that the internal mechanism remains largely the same regardless of the complexity of the inputs calculated in plugins or modules. This solver would consist of calculations being executed by equations common to most models repeatedly with some defined variations over time. Generally, using a more detailed and sophisticated model with more inputs increases the computational burden of the solver but at the same time increases accuracy and fidelity. Therefore, if additional precision is required, the plugin would provide the added layer of complexity. Nevertheless, the solver would do essentially the same thing each time the simulation is run: solve the same core algebraic and geometric equations continuously, with potential loopback, until the simulation ends. The data generated over a chosen measure of time are recorded and compiled into a logical form convenient for survivability analysis, becoming the outputs. These outputs can be graphically displayed on a screen, informing the user of the outcome of the simulation, or inputted into a follow-on model. In more elaborate applications, one can use the outputs also for automated analysis, reasoning, and decision support.\n\nThe proposed complete system, as shown in Figure 2 with modules that are not part of the proposed solution, is purely modular in that it allows for a broad range of inputs and outputs instead of being limited to predefined values and characteristics by composability. This modularity allows for streamlining by expanding the externally provided inputs and plugins into the solver without requiring any specific combination of inputs or outputs. For example, optimal external plugins could be real-world environmental weather data, an aircraft simulator or cockpit, or a datalink from an actual flying aircraft given that the plugins are trusted to provide worthwhile data in the proper format. Environmental data can be manually entered in a simulator and can often be a good-enough approximation of real flying conditions; however, if realistic environmental conditions can be inputted into the solver, not unlike those experienced by the aircraft in flight, then calculations—and ultimately outputs—can be fine-tuned. Similarly, while user interface data can be inputted directly into the solver, a mock-up operational flight program cockpit with a trained pilot flying a video-game-like scenario would simulate realistic user inputs far better. Alternatively, flight data acquired during operational testing can be used as inputs into modules. Finally, the ultimate input—and one that connects open-air with computerized testing—would be a recorder on a flying aircraft that sends as much flight and aircraft data as possible down to the solver for the most precise inputs possible. If the intent is for a cruder set of outputs, then fewer or less refined inputs can be chosen to get a rougher set of outputs for more primitive approximation tasks.\n\nIn all, modularity allows for flexibility of inputs, outputs, and modeling components, in any quantity or combination, that can vary substantially according to the scenario being analyzed. The necessary parameters, such as initial distance, aircraft velocity, radar cross section, countermeasure capabilities, weather conditions, and clutter effect, also could be inputted into the solver or the modules without the core solver needing to be changed. One category of information that a solver would be able to incorporate into its survivability calculations is the combat environment and all the objects therein. Among these is the article-under-test, namely, the aircraft whose survivability needs to be assessed. The operator of the software would choose from a plethora of characteristics about the aircraft to input into the plugins like heat emission, radar cross section, velocity, trajectory, flight path, and maneuverability, all changing over time as the simulation unfolds. Similarly, the radar or radars attempting to acquire and track the test article would benefit from input parameters such as beam path, range limitations, gain, noise and clutter filtration capabilities, jam resistance, and rotation speed (if rotational). Likewise, the engagement mechanism, in most cases a missile, being a flying object, might have changing parameters over time that resemble the aircraft itself such as velocity, maneuverability, trajectory, direction, distance of proximity fuse, counter-countermeasure capabilities, and homing system (ground command guided, active/passive, semi-active, etc.).\n\nSome of these characteristics can be viewed in Figure 1, with a notable one being noise, in the form of radar jamming and radar attenuation from overlapping tracking beams due to many targets in a complex aerial engagement. Other examples of parameters needed to model aircraft engagement would be concepts such as power, frequency, gain of an air defense system tracking radar, aerodynamics, propulsion, guidance of a surface-to-air missile system, flight path, observability, and vulnerability of an aircraft, as shown in Figure 3. These parameters constitute a small minority of all parameters required to come close to replicating a real-world missile-engagement scenario. Such complex phenomena must be included in the modular approach using plugins or modules that would fine-tune the input into the core solver, producing a more accurate output for follow-on computations or results.\n\nBased on the externally inputted parameters and plugged-in components, the solver computes probabilities of survivability, accounting for vulnerability and susceptibility. The black-box solver would consist of the essential computations explained in the previous section, most notably the radar range equation and kinetic engagement equations, among others. The solver would then assess survivability by calculating the probability that a given aircraft will be detected, shot, hit, and killed. These outputs need to be relevant to aircraft characteristics to remedy, or at least understand, the problem that might lead to the aircraft’s demise. The solver, therefore, would pool the outputs into four broad categories (Tham, 2008):\n\n• Detectability (the probability of being detected)\n\n• Susceptibility (the probability of being hit by a weapon)\n\n• Vulnerability (the probability of withstanding the hit)\n\n• Recoverability (the probability of recovering from the hit)\n\nUnder detectability, one should expect to see the environmental conditions under which the aircraft was detected, the exact position and profile of the aircraft that returned each successful ping that led to a radar track, specific flight characteristics, electromagnetic emissions, etc. For susceptibility, one should see maneuverability characteristics of both the missile and the aircraft leading up to and during the hit, which tracking mechanism maintained a lock on the aircraft (ground or missile sensor, or both), trajectories of both the missile and the aircraft, etc. For vulnerability, one needs a clear picture of missile capabilities and how they were defeated with countermeasures or maneuverability. Finally, for recoverability, damage details need to be outputted and analyzed to understand how and for how long the aircraft can keep operating (Ball & Atkinson, 1995).\n\nThere are potential limitations to the black-box modular approach that need to be mitigated. Firstly, there is a need for a capable communication interface between the solver and the modules. A robust protocol for interfacing plugins with the solvers, and vice vera, will prevent bandwidth limitations and allow for passing of necessary parameters in the correct format. Secondly, precision and accuracy of dedicated models must be maintained with the modular approach to avoid the stigma that modular software tends to sacrifice efficacy in favor of streamlining. The software must be designed from the ground up with the idea that it must not sacrifice in the quality of simulations. In doing so, one can avoid common modular software problems such as over-localization to specific modules due to an inability to prefetch follow-on instructions or, conversely, extreme interdependence between modules with circular dependencies.\n\nThus, the modular approach of the black box provides desired aircraft survivability outputs, varying in fidelity based on the quality and quantity of externally provided inputs. This design might not be customized for a specific scenario, nor would it be specialized for a specific aircraft. Moreover, it would not be a niche proprietary tool and yet offer comparable survivability efficacy. This idea is not only effective but also plausible and builds upon past mistakes like the DoD modeling and simulation triad, discussed next.\n\nDiscussion and Conclusion\n\nIn conclusion, the modular system in a complete package is the future of aircraft survivability modeling and simulation. Such a tool creates an overarching solution in today’s modeling and simulation environment, where most tools are proprietary, too functionally specialized, or limited in scope to certain platforms—or often all three. From user-selected, or module-provided, inputs, the black-box solver creates outputs applicable to analyzing the survivability of a chosen platform. Unlike current proprietary or niche simulation tools, the black-box solver does so by capitalizing on a handful of repeatable algebraic and geometric equations that are common across most engagement-level simulations like the radar range equation and the engagement equations, calculating and returning the outputs of the equations over a given number of iterations. Such a solver takes advantage of as many parameters as necessary or desired by the user or provided by an external module to give the most realistic outcome without being overly limiting. These parameters should include everything from the combat environment to weather, each participating man-made platform, and all interference.\n\nThe strength of such a modular modeling and simulation framework for aircraft survivability is that it captures the entire modeling process from basic parameters to the human-in-loop and therefore overcomes the problems associated with niche, proprietary, or otherwise insufficient modeling and simulation tools. Moreover, it allows for applicability of the outputs to a realistic scenario. In all, in the spirit of half a century of evolution of computerized aircraft survivability modeling and simulation, the modular approach could dawn a new era of supplements, or even alternatives in some cases, to open-air flight testing.\n\nWhen the modular black-box approach is adopted by the DoD modeling and simulation leadership, the next steps would be to put together a team with funding to implement part of or the entire project. This article lays the groundwork for conceptual and theoretical ideas for a modular approach to modeling and simulation, laying the foundation for more technical blueprinting by a team of modeling and simulation subject matter experts and software engineers. This technical design could focus on more explicit research on the interaction between modules and the solver, define more specifically the roles of different modules and the solver, and analyze and explicitly define many more details. This research will pave the way for additional publications that will serve as the basis of a literature review for future projects as the current literature is lacking in this area. Following a technical design, said team should put together a prototype and compare efficiency, functionality, and results to existing fielded software, not unlike JMASS, ESAMS, and JSE that were brought up in this article, as well as many more. Eventually, this approach could serve as a foundation for a standard verification, validation, and accreditation tool for the DoD."
    }
}