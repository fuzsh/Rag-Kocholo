Automatisches wiederverbinden eines client Ã¼ber zuverlÃ¤ssige und persistente kommunikationssitzungen hinweg

Info

Publication number

EP1678917A1

EP1678917A1 EP04794632A EP04794632A EP1678917A1 EP 1678917 A1 EP1678917 A1 EP 1678917A1 EP 04794632 A EP04794632 A EP 04794632A EP 04794632 A EP04794632 A EP 04794632A EP 1678917 A1 EP1678917 A1 EP 1678917A1

Authority

EP

European Patent Office

Prior art keywords

client

service

protocol

ticket

connection

Prior art date

2003-10-10

Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)

Granted

Application number

EP04794632A

Other languages

English (en)

French (fr)

Other versions

EP1678917B1 (de

Inventor

Anatoliy Panasyuk

Andre Kramer

Bradley Jay Pedersen

David Sean Stone

Terry Treder

Current Assignee (The listed assignees may be inaccurate. Google has not performed a legal analysis and makes no representation or warranty as to the accuracy of the list.)

Citrix Systems Inc

Original Assignee

Citrix Systems Inc

Priority date (The priority date is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the date listed.)

2003-10-10

Filing date

2004-10-08

Publication date

2006-07-12

2003-10-10 Priority claimed from US10/683,881 external-priority patent/US7562146B2/en

2004-10-08 Application filed by Citrix Systems Inc filed Critical Citrix Systems Inc

2006-07-12 Publication of EP1678917A1 publication Critical patent/EP1678917A1/de

2008-08-27 Application granted granted Critical

2008-08-27 Publication of EP1678917B1 publication Critical patent/EP1678917B1/de

Status Active legal-status Critical Current

2024-10-08 Anticipated expiration legal-status Critical

Links

Espacenet

EPO GPI

EP Register

Global Dossier

Discuss

238000004891 communication Methods 0.000 title claims abstract description 160

230000002085 persistent effect Effects 0.000 title abstract description 16

238000000034 method Methods 0.000 claims abstract description 72

230000002688 persistence Effects 0.000 abstract description 2

239000003795 chemical substances by application Substances 0.000 description 71

238000010586 diagram Methods 0.000 description 22

230000008569 process Effects 0.000 description 17

230000005540 biological transmission Effects 0.000 description 11

230000002159 abnormal effect Effects 0.000 description 7

241000501754 Astronotus ocellatus Species 0.000 description 6

230000008859 change Effects 0.000 description 5

230000006870 function Effects 0.000 description 5

239000000872 buffer Substances 0.000 description 4

238000010200 validation analysis Methods 0.000 description 4

238000012217 deletion Methods 0.000 description 3

230000037430 deletion Effects 0.000 description 3

238000005538 encapsulation Methods 0.000 description 3

230000007246 mechanism Effects 0.000 description 3

208000034972 Sudden Infant Death Diseases 0.000 description 2

206010042440 Sudden infant death syndrome Diseases 0.000 description 2

230000001934 delay Effects 0.000 description 2

238000012986 modification Methods 0.000 description 2

230000004048 modification Effects 0.000 description 2

230000005641 tunneling Effects 0.000 description 2

238000007792 addition Methods 0.000 description 1

230000004075 alteration Effects 0.000 description 1

230000015556 catabolic process Effects 0.000 description 1

230000006835 compression Effects 0.000 description 1

238000007906 compression Methods 0.000 description 1

238000013479 data entry Methods 0.000 description 1

230000003247 decreasing effect Effects 0.000 description 1

238000001514 detection method Methods 0.000 description 1

239000000284 extract Substances 0.000 description 1

230000003993 interaction Effects 0.000 description 1

238000012545 processing Methods 0.000 description 1

230000004044 response Effects 0.000 description 1

230000007723 transport mechanism Effects 0.000 description 1

230000000007 visual effect Effects 0.000 description 1

Classifications

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls

H04L63/0209—Architectural arrangements, e.g. perimeter networks or demilitarized zones

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication

H04L65/40—Support for services or applications

G—PHYSICS

G06—COMPUTING; CALCULATING OR COUNTING

G06F—ELECTRIC DIGITAL DATA PROCESSING

G06F15/00—Digital computers in general; Data processing equipment in general

G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs

G06F15/163—Interprocessor communication

G06F15/173—Interprocessor communication using an interconnection network, e.g. matrix, shuffle, pyramid, star, snowflake

G—PHYSICS

G06—COMPUTING; CALCULATING OR COUNTING

G06F—ELECTRIC DIGITAL DATA PROCESSING

G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity

G06F21/30—Authentication, i.e. establishing the identity or authorisation of security principals

G06F21/31—User authentication

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L12/00—Data switching networks

H04L12/28—Data switching networks characterised by path configuration, e.g. LAN [Local Area Networks] or WAN [Wide Area Networks]

H04L12/46—Interconnection of networks

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L12/00—Data switching networks

H04L12/28—Data switching networks characterised by path configuration, e.g. LAN [Local Area Networks] or WAN [Wide Area Networks]

H04L12/46—Interconnection of networks

H04L12/4633—Interconnection of networks using encapsulation techniques, e.g. tunneling

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls

H04L63/0272—Virtual private networks

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks

H04L63/0428—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/06—Network architectures or network communication protocols for network security for supporting key management in a packet data network

H04L63/062—Network architectures or network communication protocols for network security for supporting key management in a packet data network for key distribution, e.g. centrally by trusted party

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/08—Network architectures or network communication protocols for network security for authentication of entities

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/08—Network architectures or network communication protocols for network security for authentication of entities

H04L63/0807—Network architectures or network communication protocols for network security for authentication of entities using tickets, e.g. Kerberos

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/16—Implementing security features at a particular protocol layer

H04L63/166—Implementing security features at a particular protocol layer at the transport layer

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L67/00—Network arrangements or protocols for supporting network services or applications

H04L67/14—Session management

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass

H04L69/30—Definitions, standards or architectural aspects of layered protocol stacks

H04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level

H04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions

H04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]

H—ELECTRICITY

H04—ELECTRIC COMMUNICATION TECHNIQUE

H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION

H04L63/00—Network architectures or network communication protocols for network security

H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls

H04L63/0281—Proxies

Definitions

the invention generally relates to network and client-server communications. More particularly, the invention relates to systems and methods for re-establishing client communications using a communication protocol that encapsulates other protocols to provide session persistence and reliability and for facilitating the reauthentication of a user using a client computer to communicate with a server computer via the encapsulating protocol.

Background Information Communications over a network between two computers can be implemented using a variety of known communication protocols.

the network connection is susceptible to breakdown. For instance, a wireless connection between a client and a server is often unreliable. In other cases, the network connection is intermittent.

a connection can be lost when one enters an elevator or tunnel and may only be restored following one's exit from the elevator or tunnel.

the client generally has to re-establish the connection by starting a new communication session.

the user typically has to retransmit the authentication credentials, such as a login/password pair, to the server computer so that the server computer can authorize the user for the new communication session.

This retransmission ofthe authentication credentials of a user across multiple communication sessions repeatedly exposes the authentication credentials of that user to potential attackers, thereby decreasing the level of security of the authentication credentials. In addition, this often is a slow process that also results in user frustration and inefficiency.

the network may require the client obtains a new network identifier, such as an internet protocol address.

the applications or programs on the client may need to be restarted because ofthe change in the client's network identifier.

Improved systems and methods are needed for re-establishing a communication session between a client computer and a server computer without repeatedly transmitting the authentication credentials.

the present invention relates to systems and methods for providing a client with a persistent and reliable connection to a host service and for reconnecting the client to the persistent and reliable connection.

Reconnecting the client includes re-establishing the client's communication session with the host service and re-authenticating the user ofthe client to the host service.

a persistent and reliable connection to a host service is maintained by a first protocol service on behalf of a client.

the first protocol service ensures that data communicated between the client and the host service is buffered and maintained during any disruption in the network connection with the client and the first protocol service.

a temporary disruption in a network connection may occur when a client, such as a mobile client, roams between different access points in the same network, or when a client switches between networks (e.g., from a wired network to a wireless network).

the client may need to be assigned a different network identifier, such as an internet protocol address, as required by the network topology.

the first protocol service re-authenticates the client to the host service when re-establishing the client's connection to the first protocol service. After re-authenticating, the first protocol service re-links the client's connection to the host service.

the present invention provides automatic reconnection of a disrupted client connection to a host service without restarting applications or re-establishing sessions, including re- authentication without the user reentering authentication credentials.

the invention relates to a method for reconnecting a client to a host service after a disruption to a network connection.

the method uses a first protocol service to re-establish the connection between a client and a host service.

the method includes providing a first connection between a client and a first protocol service and a second connection between the first protocol service and a host service.

the second connection between the first protocol service and the host service is maintained.

the first connection between the client and the first protocol service is re-established.

the first protocol service receives a ticket associated with the client and validates the ticket. After the ticket is validated, the re-established first connection is linked to the maintained second connection.

the method includes further validating the ticket before linking the re-established first connection with the maintained second connection.

the validating method further includes obtaining a session identifier and a key from the ticket received by the first protocol service.

the session identifier from the ticket is used to retrieve the stored and encrypted authentication credentials ofthe client.

the key from the ticket is used to decrypt the retrieved authentication credentials.

the invention provides for re-authentication ofthe client to the host service when re-establishing the client's connection to the host service.

the method further includes authenticating the client to the host service when providing the first connection between the client and the first protocol service and the second connection between the first protocol service and the host service.

the method further includes re-authenticating the client to the host service.

the method further includes the first protocol service generating a ticket associated with the client. Additionally, the method further includes deleting the ticket after it is validated.

the ticket can be automatically deleted after a pre-determined period of time. Moreover, after the ticket is deleted, a replacement ticket can be generated.

a copy ofthe ticket can be saved at the first protocol service. Furthermore, the ticket can be transmitted from the first protocol service to the client.

the invention relates to a system for reconnecting a client to host service after a disruption to a network connection.

the system re-establishes the connection between a client and a host service using a first protocol service.

the client is configured to maintain a first connection with the first protocol service.

the first protocol service is configured to maintain the first connection with the client and a second connection with the host service.

a disruption is detected in the first connection and the first connection is re-established between the client and the first protocol service while the second connection between the first protocol service and the host service is maintained.

the client transmits a ticket associated with the client to the first protocol service. The ticket is validated and, after it is validated, the first protocol service links the re-established first connection with the maintained second connection.

the system includes further validating the ticket before linking the re-established first connection with the maintained second connection.

Validation ofthe ticket further includes obtaining a session identifier and a key from the ticket received by the first protocol service.

the session identifier from the ticket is used to retrieve the stored and encrypted authentication credentials ofthe client. Then the system decrypts the retrieved authentication credentials by using the key from the ticket.

the invention provides a system for re-authenticating the client to the host service when re-establishing the client connection to the host service.

the system further includes authenticating the client to the host service when providing the first connection between the client and the first protocol service and the second connection between the first protocol service and the host service.

the system uses the retrieved authenticated credentials to re-authenticate the client to the host service

the system further includes the first protocol service generating a ticket associated with the client. Additionally, the system further includes deleting the ticket, after it is validated. In one embodiment, the first protocol service will automatically delete the ticket after a pre-determined period of time. Moreover, after the ticket is deleted, the system generates a replacement ticket. In another embodiment, the first protocol service saves a copy ofthe ticket. Furthermore, the first protocol service can transmit the ticket to the client.

FIG. 1A is a block diagram of a system for providing a client with a reliable connection to a host service according to an illustrative embodiment ofthe invention

FIG. IB is a block diagram of a system for providing a client with a reliable connection to a host service according to another illustrative embodiment ofthe invention

FIG. 2A depicts communications occurring over a network according to an illustrative embodiment of the invention

FIG. 2B depicts communications occurring over a network according to another illustrative embodiment ofthe invention

FIG. 1A is a block diagram of a system for providing a client with a reliable connection to a host service according to an illustrative embodiment ofthe invention

FIG. 2A depicts communications occurring over a network according to an illustrative embodiment of the invention

FIG. 2B depicts communications occurring over a network according to another illustrative embodiment ofthe invention

FIG. 1A is a block diagram of a system for providing a client with a reliable connection to

FIG. 3 depicts a process for encapsulating a plurality of secondary protocols within a first protocol for communication over a network according to an illustrative embodiment ofthe invention

FIG. 4 is a block diagram of an embodiment of a computer system to maintain authentication credentials in accordance with the invention

FIG. 5 A is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 4 to maintain authentication credentials during a first communication session in accordance with the invention

FIG. 5B is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 4 to maintain authentication credentials during a second communication session following the termination ofthe first communication session of FIG. 5 A in accordance with the invention

FIG. 5 A is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 4 to maintain authentication credentials during a second communication session following the termination ofthe first communication session of FIG. 5 A in accordance with the invention

FIG. 5 A is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 4 to maintain authentication credentials during

FIG. 6 is a block diagram of an embodiment of a computer system to maintain authentication credentials in accordance with another embodiment ofthe invention

FIG. 7 A is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 6 to maintain authentication credentials during a first communication session in accordance with the invention

FIG. 7B is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 6 to maintain authentication credentials during a second communication session following the termination ofthe first communication session of FIG. 6 in accordance with the invention

FIG. 7C is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 6 to maintain authentication credentials during a second communication session following the termination of a second communication channel of the first communication session of FIG. 6 in accordance with the invention

FIG. 7 A is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 6 to maintain authentication credentials during a first communication session in accordance with the invention

FIG. 7B is a flow diagram ofthe steps followed in an embodiment ofthe computer system of FIG. 6 to

FIG. 8 A is a block diagram of a system to maintain authentication credentials and provide a client with a reliable connection to a host service according to an illustrative embodiment ofthe invention

FIG. 8B is a block diagram of a system to maintain authentication credentials and provide a client with a reliable connection to a host service according to another illustrative embodiment ofthe invention

FIG. 9A is a block diagram of a system to maintain authentication credentials and provide a client with a reliable connection to a host service according to another illustrative embodiment ofthe invention

FIG. 9B is a block diagram of a system to maintain authentication credentials and provide a client with a reliable connection to a host service according to another illustrative embodiment ofthe invention

FIG. 9A is a block diagram of a system to maintain authentication credentials and provide a client with a reliable connection to a host service according to another illustrative embodiment ofthe invention

FIG. 9B is a block diagram of a system to maintain authentication credentials and provide a client with

FIG. 10A is a block diagram of a system for providing a client with a reliable connection to a host service and further including components for reconnecting the client to a host service according to an illustrative embodiment ofthe invention

FIG. 1 OB is a block diagram of an embodiment of a system for providing a client with a reliable connection to a host service and further including components for reconnecting the client to a host service

FIG. 11A is a block diagram of an embodiment of FIG. 10A further including components for initially connecting the client to a host service

FIG. 1 IB is a block diagram ofthe illustrative system of FIG. 10B further including components for initially connecting the client to a host service and to maintain authentication credential according to an illustrative embodiment ofthe invention

FIG. 12A is a flow diagram of a method for network communications according to an illustrative embodiment ofthe invention

FIG. 12B is a flow diagram of a method for reconnecting the client to the host services

FIGS. 13A-13C are flow diagrams of a method for connecting a client to a plurality of host services according to an illustrative embodiment ofthe invention

FIG. 14 is a flow diagram of a method for providing a client with a reliable connection to host services and for reconnecting the client to the host services according to an illustrative embodiment ofthe invention

FIGS. 15A-15B are flow diagrams of a method for reconnecting a client to host services according to an illustrative embodiment ofthe invention.

the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope ofthe invention. Moreover, it is to be understood that the features ofthe various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not made express herein, without departing from the spirit and scope ofthe invention.

the invention pertains to network communications and can be particularly useful for providing a client with a reliable connection to a host service.

a system 100 for network communications includes a client 108 (e.g., a first computing device) in communication with a first protocol service 112 (e.g., a second computing device) over a network 104. Also included in the system 100 are a plurality of host services 116a-l 16n (e.g., third computing devices) that are in communication, over a network 104', with the first protocol service 112 and, through the first protocol service 112 and over the network 104, with the client 108.

the first protocol service 112 and the host services 116a-l 16n are not implemented as separate computing devices, as shown in FIG.

the system 100 can include one, two, or any number of host nodes 118a-118n.

the networks 104 and 104' are separate networks, as in FIG. 1A.

the networks 104 and 104' can be the same network 104, as shown in FIG. IB.

the network 104 and/or the network 104' is, for example, a local-area network (LAN), such as a company Intranet, or a wide area network (WAN), such as the Internet or the World Wide Web.

LAN local-area network

WAN wide area network

the client 108, the first protocol service 112, the host services 116a-l 16n, and/or the host nodes 118a-l 18n can be connected to the networks 104 and/or 104' through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, TI, T3, 56kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above.

the client 108 can be any workstation, desktop computer, laptop, handheld computer, mobile telephone, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

the client 108 can be a local desktop client on a local network 104 or can be a remote display client of a separate network 104.

the client 108 can include, for example, a visual display device (e.g., a computer monitor), a data entry device (e.g., a keyboard), persistent and/or volatile storage (e.g., computer memory), a processor, and a mouse.

a client agent 128 with a user interface is a Web Browser (e.g. a MicrosoftÂ® Internet Explorer browser and/or NetscapeTM browser).

Web Browser e.g. a MicrosoftÂ® Internet Explorer browser and/or NetscapeTM browser

each ofthe first protocol service 112 and the host services 116a-l 16n can be provided on any computing device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

the functionality ofthe first protocol service 112 and the host services 116a-l 16n are incorporated into the same computing device, such as, for example, one ofthe host nodes 118a-l 18n, as in FIG. IB

the first protocol service 112 and/or the host services 116a-l 16n can be implemented as a software program running on a general purpose computer and/or as a special purpose hardware device, such as, for example, an ASIC or an FPGA.

each ofthe host nodes 118a-l 18n can be any computing device described above (e.g. a personal computer) that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Each ofthe host nodes 118a-l 18n can establish communication over the communication channels 124a-124n using a variety of communication protocols (e.g., ICA, HTTP, TCP/IP, and IPX). SPX, NetBIOS, Ethernet, RS232, and direct asynchronous connections).

each of the host services 116a- 116n hosts one or more application programs that are remotely available to the client 108. The same application program can be hosted by one or any number ofthe host services 116a-l 16n.

Examples of such applications include word processing programs, such as MICROSOFT WORD, and spreadsheet programs, such as MICROSOFT EXCEL, both of which are available from Microsoft Corporation of Redmond, Washington.

Other examples of application programs that may be hosted by any or all ofthe host services 116a-l 16n include financial reporting programs, customer registration programs, programs providing technical support information, customer database applications, and application set managers.

one or more ofthe host services 116a-l 16n is an audio/video streaming server that provides streaming audio and/or streaming video to the client 108.

the host services 116a-l 16n include file servers that provide any/all file types to the client 108. Referring still to the illustrative embodiments of FIGS.

the client 108 is configured to establish a connection 120 between the client 108 and a first protocol service 112 over the network 104 using a first protocol.

the first protocol service 112 is configured to accept the connection 120.

the client 108 and the first protocol service 112 can, therefore, communicate with one another using the first protocol as described below in reference to FIGS. 2A-2B and FIG. 3.

a client agent 128 is included within the client 108.

the client agent 128 can be, for example, implemented as a software program and/or as a hardware device, such as, for example, an ASIC or an FPGA.

the client agent 128 can use any type of protocol and it can be, for example, an HTTP client agent, an FTP client agent, an Oscar client agent, a Telnet client agent, an Independent Computing Architecture (ICA) client agent from Citrix Systems, Inc. of Fort Lauderdale, Florida, or a Remote Desktop Procedure (RDP) client agent from Microsoft Corporation of Redmond, Washington.

the client agent 128 is itself configured to communicate using the first protocol.

the client 108 includes a plurality of client agents 128a-128n, each of which communicates with a host service 116a-l 16n, respectively.

a standalone client agent is configured to enable the client 108 to communicate using the first protocol.

the standalone client agent can be incorporated within the client 108 or, alternatively, the standalone client agent can be separate from the client 108.

the standalone client agent is, for example, a local host proxy.

the standalone client agent can implement any ofthe functions described herein with respect to the client agent 128.

the first protocol service 112 is, in one embodiment, itself configured to communicate using the first protocol.

the first protocol service 112 is configured to establish a connection 124a-124n between the first protocol service 112 and the host service 116a-l 16n, respectively.

the first protocol service 112 can establish a connection 124a between the first protocol service 112 and one host service 116a and a connection 124b between the first protocol service 1 12 and another host service 116b.

the first protocol service 108 separately establishes such connections 124a-124n (i.e., the first protocol service 112 establishes one connection at a time). In another embodiment, the first protocol service 112 simultaneously establishes two or more of such connections 124a-124n. In yet another embodiment, the first protocol service 112 can concurrently establish and maintain multiple connections 124a-124n.

the first protocol service 112 is configured to provide two or more connections 124a-124n without interrupting the connection 120 with the client 108.

the first protocol service 112 can be configured to establish the connection 124a between the first protocol service 112 and the host service 116a when a user ofthe client 108 requests execution of a first application program residing on the host service 116a.

the first protocol service 112 When the user ends execution of the first application program and initiates execution of a second application program residing, for example, on the host service 116b, the first protocol service 112 is, in one embodiment, configured to interrupt the connection 124a and establish the connection 124b between the first protocol service 112 and the host service 116b, without disrupting the connection 120 between the first protocol service 112 and the client 108.

the first protocol service 112 and the host services 116a-l 16n can communicate over the connections 124a-124n, respectively, using any one of a variety of secondary protocols, including, but not limited to, HTTP, FTP, Oscar, Telnet, the ICA remote display protocol from Citrix Systems, Inc. of Fort Lauderdale, Florida, and/or the RDP remote display protocol from Microsoft Corporation of Redmond, Washington.

the first protocol service 112 and the host service 116a can communicate over the connection 124a using the ICA remote display protocol, while the first protocol service 112 and the host service 116b can communicate over the connection 124b using the RDP remote display protocol.

the secondary protocol used for communicating between the first protocol service 112 and a host service 116 such as, for example, the ICA remote display protocol, includes a plurality of virtual channels.

a virtual channel is a session- oriented transmission connection that is used by application-layer code to issue commands for exchanging data.

each ofthe plurality of virtual channels can include a plurality of protocol packets that enable functionality at the remote client 108.

one ofthe plurality of virtual channels includes protocol packets for transmitting graphical screen commands from a host service 116, through the first protocol service 112, to the client 108, for causing the client 108 to display a graphical user interface.

one ofthe plurality of virtual channels includes protocol packets for transmitting printer commands from a host service 116, through the first protocol service 112, to the client 108, for causing a document to be printed at the client 108.

the first protocol is a tunneling protocol.

the first protocol service 112 encapsulates a plurality of secondary protocols, each used for communication between one ofthe host services 116a-l 16n and the first protocol service 112, within the first protocol.

the host services 116a-l 16n and the first protocol service 112 communicate with the client 108 via the plurality of secondary protocols.

the first protocol is, for example, an application-level transport protocol, capable of tunneling the multiple secondary protocols over a TCP/IP connection.

communications between the client 108 and the first protocol service 112 via the connection 120 take the form of a plurality of secondary protocols 200a-200n (e.g., HTTP, FTP, Oscar, Telnet, ICA, and/or RDP) encapsulated within a first protocol 204. This is indicated by the location of secondary protocols 200a-200n inside the first protocol 204.

the first protocol 204 can be, as illustrated in FIG.

the first protocol 204 is communicated over an encrypted connection, such as, for example, a TCP/IP connection 212 secured by using a secure protocol 216 such as the Secure Socket Layer (SSL).

SSL is a secure protocol first developed by Netscape Communication Corporation of Mountain View, California, and is now a standard promulgated by the Internet Engineering Task Force (IETF) as the Transport Layer Security (TLS) protocol and described in IETF RFC-2246.

IETF Internet Engineering Task Force

TLS Transport Layer Security

the plurality of secondary protocols 200a-200n are communicated within the first protocol 204 with (FIG. 2B) or without (FIG. 2 A) a secure protocol 216 over the connection 120.

the secondary protocols that can be used to communicate over the connections 124a-124n include, but are not limited to, HTTP, FTP, Oscar, Telnet, ICA, and RDP.

at least one ofthe secondary protocols, as described above includes a plurality of virtual channels, each of which can include a plurality of protocol packets enabling functionality at the remote client 108.

one host service 116a is a web server, communicating with the first protocol service 112 over the connection 124a using the HTTP protocol

another host service 116b is an application server, communicating with the first protocol service 112 over the connection 124b using the ICA protocol.

the host service 116b generates both protocol packets for transmitting graphical screen commands to the client 108, for causing the client 108 to display a graphical user interface, and protocol packets for transmitting printer commands to the client 108, for causing a document to be printed at the client 108.

Another aspect ofthe present invention is the method and systems described herein reduce the number of times network connections are opened and closed.

the first protocol 204 allows the secondary protocol connections 200a- 200n tunneled therein, such as, for example, an HTTP connection 200n, to be opened and/or closed, repetitively, without also requiring the transport connection over which the first protocol 204 is communicated (e.g., TCP connection 208 and/or 212), the secure protocol connection 216, or the first protocol connection 204 itself to similarly be repetitively opened and/or closed.

the secondary protocol 200a-200n may frequently open and close network connections, such as TCP connections. This would add significant delays and overhead to the system. These delays and overhead would be further increased by the use of a secure encapsulation protocol 214, such as SSL, which have significant overhead in establishing network connections.

the secondary protocols 200a-200n By encapsulating the secondary protocol 200a-200n within the first protocol 204 and maintaining the connection ofthe transport connection (208, 212), the secondary protocols 200a-200n, as part ofthe payload ofthe first protocol 204, do not need to perform frequent and costly open and closes ofthe network connection 120. Furthermore, since the secondary protocols 200a-200n can be communicated within the first protocol 204 with a secure protocol 216, the secondary protocols 200a-200n also do not need to open and close secured connections such as with SSL.

the transport connection (208, 212) establishes and maintains the network connection 120 so that the encapsulated second protocols 200a-200n can be communicated without repetitively opening and closing the secured or unsecured network connection 120.

the secondary protocols 200a-200n carry protocol packets related to applications using such protocols as HTTP, FTP, Oscar, Telnet, RDA or ICA.

the secondary protocol packets 304a-304n transport data related to the application functionality transacted between the client 108 and the host service 116a-l 16n. For example, a user on the client 108 may interact with a web page provided by a host service 116a-l 16n.

the secondary protocol 200a-200n encapsulated in the first protocol 204 may have http protocol packets related to displaying the web page and receiving any user interaction to communicate to the host service 116a-l 16n. Since the transport connection (208, 212) is not maintained by the secondary protocols 200a-200n, the secondary protocols 200a-200n do not need to handle any network-level connection interruptions. As such, the- secondary protocols 200a-200n may not provide any network-level connection interruption information in their payloads.

the http related secondary protocol packets 304a-304n ofthe secondary protocol 200a-200n transmitted to the client 108 would not provide a notification that a network interruption occurred, e.g., an error message on a web page. Therefore, the user on the client 108 will not be notified of any network-level connection interrupts through the secondary protocol 200a-200n. This effectively hides the network connection interruptions from the user during the use ofthe applications related to the secondary protocols 200a-200n. Referring to FIG.

an example process 300 used by the first protocol service 112 and the client agent 128 ofthe client 108 encapsulates the plurality of secondary protocols 200 (e.g., HTTP, FTP, Oscar, Telnet, ICA, and/or RDP) within the first protocol 204 for communication via the connection 120.

the example process 300 used by the first protocol service 112 and the client agent 128 ofthe client 108 also compresses and/or encrypts the communications at the level ofthe first protocol prior to communications via the connection 120. From the point of view ofthe first protocol service 112, secondary protocol packets 304a-304n are received via the connections 124a-124n at the first protocol service 112.

two secondary protocol packets 304a and 304b are received by the first protocol service 112.

One, two, or any number of secondary protocol packets 304a-304n can be received.

the secondary protocol packets 304a-304n are transmitted by the host services 116 to the first protocol service 112 over the connection 124.

the secondary protocol packets 304a-304n include a header 308 and a data packet 312, also referred to as a data payload.

the first protocol service 112 encapsulates one or more ofthe secondary protocol packets 304 within a first protocol packet 316.

the first protocol service 112 generates a first protocol packet header 320 and encapsulates within the data payload 324 ofthe first protocol packet 316 one or more secondary protocol packets 304a-304n, such as, for example, two secondary protocol packets 304a and 304b. In another embodiment, only one secondary protocol packet 304a is encapsulated in each first protocol packet 316. In one embodiment, the first protocol packets 316 are then transmitted over the connection 120, for example over the connection 208 described with reference to FIG. 2A, to the client agent 128 ofthe client 108. Alternatively, in another embodiment, the first protocol service 112 is further configured to encrypt, prior to the transmission of any first protocol packets 316, communications at the level ofthe first protocol 204.

the first protocol packets 316 are encrypted by using, for example, the SSL protocol described with reference to FIG. 2B.

a secure packet 328 including a header 332 and an encrypted first protocol packet 316' as a data payload 336, is generated.

the secure packet 328 can then be transmitted over the connection 120, for example over the secure TCP/IP connection 212 illustrated in FIG. 2B, to the client agent 128 ofthe client 108.

the first protocol service 112 is further configured to compress, prior to the transmission of any first protocol packets 316, communications at the level ofthe first protocol 204.

the first protocol service 112 compresses, using a standard compression technique, the first protocol packet 316. As such, the efficiency ofthe system 100 is improved.

the system 100 ofthe present invention in one embodiment, provides the remote client 108 with a persistent connection to a host service 116, such as, for example, the host service 116a.

the client 108 establishes a connection 120 between the client 108 and the first protocol service 112 and the first protocol service 112 establishes a connection 124a between the first protocol service 112 and the host service 116a

either the client agent 128, the first protocol service 112, or both are configured to maintain a queue ofthe first protocol data packets most recently transmitted via the connection 120.

the queued data packets can be maintained by the client agent 128 and/or the first protocol service 112 both before and upon a failure ofthe connection 120.

the first protocol service 112 and, likewise, the host service 116a are configured to maintain the connection 124a.

the client 108 establishes a new connection 120 with the first protocol service 112, without losing any data. More specifically, because the connection 124a is maintained upon a failure ofthe connection 120, a newly established connection 120 can be linked to the maintained connection 124a. Further, because the most recently transmitted first protocol data packets are queued, they can again be transmitted by the client 108 to the first protocol service 112 and/or by the first protocol service 112 to the client 108 over the newly established connection 120. As such, the communication session between the host service 116a and the client 108, through the first protocol service 112, is persistent and proceeds without any loss of data.

the client agent 128 ofthe client 108 and/or the first protocol service 112 number the data packets that they transmit over the connection 120.

each ofthe client agent 128 and the first protocol service 112 separately numbers its own transmitted data packets, without regard to how the other is numbering its data packets.

the numbering ofthe data packets can be absolute, without any re-numbering ofthe data packets, i.e., the first data packet transmitted by the client agent 128 and/or the first protocol service 112 can be numbered as No. 1, with each data packet transmitted over the connection 120 by the client agent 128 and/or the first protocol service 112, respectively, consecutively numbered thereafter.

the client agent 128 and/or the first protocol service 112 informs the other ofthe next data packet that it requires. For example, where the client agent 128 had received data packets Nos. 1-10 prior to the disruption of connection 120, the client agent 128, upon re-establishment ofthe connection 120, informs the first protocol service 112 that it now requires data packet No. 11. Similarly, the first protocol service 112 can also operate as such. Alternatively, in another such embodiment, the client agent 128 and/or the first protocol service 112 informs the other ofthe last data packet received. For example, where the client agent 128 had received data packets Nos.

the client agent 128 and/or the first protocol service 112 can retransmit the buffered data packets not received by the other, allowing the communication session between a host service 116 and the client 108, through the first protocol service 112, to proceed without any loss of data. Moreover, upon re-establishment ofthe connection 120, the client agent 128 and/or the first protocol service 112 can flush from each of their respective buffers the buffered data packets now known to be received by the other.

the present invention avoids the process of opening a new user session with the host service 116a-l 16n by maintaining the user session through network connection interruptions.

the client 108 and the host service 116a- 116n may maintain session specific context and caches, and other application specific mechanisms related to that instance ofthe user session.

these session specific context and caches need to be re-populated or re-established to reflect the new user session.

a user on the client 108 may have an http session with a host service 116a-l 16n.

the host service 116a- 116n may keep context specific to providing this instance ofthe http session with the client 108.

the context may be stored in the memory ofthe server, in files ofthe server, a database or other component related to providing the functionality ofthe host service 116a-l 16n.

the client 108 may have local context specific to the instance ofthe http session, such as a mechanism for keeping track of an outstanding request to the host service 116a-l 16n.

This context may be stored in memory ofthe client 108, in files on the client 108, or other software component interfaced with the client 108.

the present invention maintains the session so that a new session, and therefore new specific session context, does not need to be reestablished.

the present invention maintains the user session through network level connection interruptions and without notification to the user ofthe client that the session was interrupted.

the first protocol service 112 establishes and maintains a first connection with a client 108 and a second connection with a host service 116a-l 16n.

the first protocol service 112 can store and maintain any session related information such as authentication credentials, and client 108 and host service 116a- 116n context for the established session.

a user on the client 108 will exercise the functionality provided by the host service 116a-l 16n through the established session.

related secondary protocol packets 304a-304n will contain data related to the transaction of such functionality.

These secondary protocol packets 304a-304n as part ofthe secondary protocol 200a-200n are encapsulated and communicated in a first protocol 204.

the first protocol service 112 can re-establish the disrupted connection while maintaining the other connection that may have not been disrupted.

the network connection disruption may cause an interruption to the session between the client 108 and the host service 116a-l 16n.

the session can be reestablished after the network connection is re-established without the user on the client 108 having notification that the session was interrupted.

the secondary protocol 200a- 200n does not need to contain any interruption related information to transmit to the client 108.

the interruption ofthe session caused by the network connection disruption is effectively hidden from the user because ofthe encapsulation ofthe first protocol 204.

the first protocol service 112 maintaining session related information can re- establish the session between the client 108 and the host service 116a- 116n. For example, if the first connection between the client 108 and the first protocol service 116 is disrupted, the first protocol service 112 can keep the client's 108 session active or open between the first protocol service 112 and the host service 116a-l 16n. After the first connection is re-established, the first protocol service 112 can link the session of the client 108 to the maintained session between the first protocol service 112 and the host service 116. The first protocol service 112 can send to the client 108 any data that was queued prior to the disruption in the first connection.

the client 108 will be using the same session prior to the disruption, and the host service 116a-l 16n and client 108 can continue to use any session specific context that may have in memory or stored elsewhere. Furthermore, because ofthe intermediary ofthe first protocol service 112, the host service 116a-l 16n may not be aware ofthe network disruption between the first protocol service 112 and the client 108. In another example, if the second connection between the first protocol service 112 and the host service 116a-l 16n is disrupted, the first protocol service can maintain the first connection with the client 108 while re-establishing the second connection with the host service 116a-l 16n.

the first protocol service 112 can re-establish the client's session, on behalf of the client, with the host service 116a-l 16n. Since the first protocol service 112 was maintaining any session relation information, the first protocol service may re-establish the same session or a similar session so that the client 108 is not aware ofthe disruption in the second network connection and the resulting disruption to the session between the first protocol service 112 and the host service 116a-l 16n. During re-establishing the second network connection and the session, the first protocol service 112 can queue any session transactions sent by the client 108 during the disruption.

the first protocol service 112 can transmit the queued transactions to the host service 116a-l 16n and the session can continue normally. In this manner, the client 108 continues to operate as if there was not an interruption to the session. Additionally, by providing a reliable and persistent connection, the present invention also avoids interruptions to transactions, commands or operations as part of the functionality exercised between the client 108 and a server 415, or a host service 116a-l 16n. For example, a file copy operation using Windows Explorer has not been designed to continue working after there is a disruption in a network connection.

a user on the client 108 may use the file copy feature of Windows Explorer to copy a file from the client 108 to a server 415. Because ofthe size ofthe file or files, this operation may take a relatively extended period of time to complete. If during the middle ofthe operation ofthe copy ofthe file to the server 415, there is an interruption in the network connection between the client 108 and the server 415, the file copy will fail. Once the network connection is re-established, the user will need to start another file copy operation from Windows Explorer to copy the file from the client 108 to the server 415. Under the present invention, the user would not need to start another file copy operation. The network connection would be re-established as part ofthe first protocol 204 connection.

the file copy operations would be encapsulated in the payload ofthe secondary protocols 200a-200n. As such, the file copy of Windows Explorer would not get notified ofthe interruption in the network connection and therefore, would not fail.

the first protocol service 112 would re-establish any connections and transmits any queued data so that operation can continue without failure.

the first protocol service 112 would maintain a queue ofthe data related to the file copy operations that has not been transferred to the server 415 because ofthe interruption in the network connection. Once the network connection is re-established, the first protocol service 112 can transmit the queued data and then continue on with transferring the data related to the file copy operation in due course.

the present invention also enables a client 108 to traverse through different network topologies without re-starting a session or an application on the client 108.

the client 108 may be a computer notebook with a wireless network connection.

the client's network connection 120 may be temporarily disrupted from the first wireless network as a network connection is established with the second wireless network.

the second wireless network may assign a new network identifier, such as a host name or internet protocol address, to the client 108.

This new network identifier may be different than the network identifier assigned to the client 108 by the first wireless network.

the client 108 may be physically connected through an Ethernet cable to a port on the network. The physical connection may be unplugged and the client 108 moved to another location to plug into a different port on the network. This would cause a disruption into the network connection 102 and possible a change in the assigned network identifier.

any sessions with a host service 116a- 116n on the client 108 or application on the client 108 accessing the. network may need to be restarted due to the change in the network topology, the disruption to the network connection 120, and/or the change in the assigned network identifier.

the present invention maintains the network connection for the client and automatically re-established the client's 108 network connection including handling changes in the network topology and network identifier.

the client 108, and any applications or sessions on the client 108 can continue to operate as if there was not a network connection disruption or a change in the network identifier.

One embodiment ofthe invention relates to systems and methods for authenticating a client 108 to a host service 116 and re-authenticating the client 108 to the host service 116 without re-entering authentication credentials.

a client 108 communicates with a server computer 415, also referred to as a server, over a communication channel 418.

the communication channel 418 may include a network 104.

the communication channel 418 can be over a local-area network (LAN), such as a company Intranet, or a wide area network (WAN) such as the Internet or the World Wide Web.

the server 415 provides auto client reconnect services through an ACR Service 405.

the client 108 accesses the server 415 through the communication channel 418.

the ACR Service 405 ofthe server 415 provides authentication services to authenticate the client 108 to the server 415. When there is a disruption in a network connection, the ACR Service 405 further provides re- authentication services to re-authenticate the client 108 to the server 415.

the server 415 includes a processor 425 and memory 430 that communicates over a system bus 432.

the memory 430 may include random access memory (RAM) and/or read only memory (ROM).

the server 415 accesses memory 430 from a remote site (e.g., another computer, an external storage device).

the ACR Service 405 running on the server 415 includes a key generator 435, a session identifier (SID) generator 438, an encryptor 440, a key destroyer 445, and a decryptor 448.

the key generator 435 generates a key when the server 415 or the ACR Service 405 receives authentication credentials from the client 108.

the key generator 435 derives the key from a characteristic ofthe server 415. Particular examples include the key generator 435 deriving the key from the temperature ofthe processor 425, the time that server 415 received the authentication credentials, and the number of keys stored in memory 430.

the key and the authentication credentials are the same size (e.g. eight bits).

the key generator is a software module.

the key generator 435 is a random number generator.

the SID generator 438 generates the unique SID to enable the server 415 to identify a particular communication session.

the SID .generator 438 is a software module.

the SID generator 438 is a random number generator.

the SID generator transmits the SID to the host service 116.

the SID generator 438 obtains the SID from a host service 116 running on the server.

the SID generator generates the SID by receiving a session identifier from the host service 116 establishing a user session.

the encryptor 440 encrypts the key with the authentication credentials to create encrypted authentication credentials.

the encryptor 440 encrypts the key with the authentication credentials by performing an exclusive OR operation (i.e. XOR) on the key and the authentication credentials.

the encryptor 440 adds the authentication credentials to the key to encrypt the authentication credentials; that is, the encryptor 440 performs a "Caesar Cipher" on the authentication credentials using the key as the shift value.

the encryptor 440 performs a hash function, such as MD4, MD5, or SHA-1, on the authentication credentials. It should be clear that the encryptor 440 can perform any type of manipulation on the authentication credentials as long as the ACR Service 405 can decrypt the encrypted authentication credentials with the key.

the encryptor 440 is a software module that executes mathematical algorithms on the key and the authentication credentials to create the encrypted authentication credentials.

the encryptor 440 is a logic gate ofthe server computer 415, such as an exclusive OR (XOR) gate.

the encryptor 440 stores the encrypted authentication credentials with the SID in a table 455 in memory 430.

the encryptor 440 stores the encrypted authentication credentials in the table 455 and the SID generator 438 stores the SID in the table 455.

the table 455 is an area in memory 430 allocated by the processor 455 for us by the encryptor 440.

the encryptor 440 stores the encrypted authentication credentials with the SID in a database (not shown in Fig. 4) separate from memory 430.

the ACR Service 405 uses the SID as a vector to the location ofthe encrypted authentication credentials in the table 455.

the ACR Service 405 uses the SID as a database key to locate and retrieve the encrypted authentication credentials in a database (not shown in Fig. 4).

Each encrypted authentication credential created by the encryptor 440 is associated with only one unique SID.

the ACR Service 405 can locate and retrieve the encrypted authentication credentials by using a particular SID.

the key destroyer 445 deletes the key once the ACR Service 405 determines that the key is no longer needed.

the key destroyer 445 is a delete function of a software program such as the operating system ofthe server 415.

the decryptor 448 decrypts the encrypted authentication credentials once the ACR Service 405 receives the key and the SID from the client 108.

the decryptor 448 is a software module that performs the inverse function or algorithm that the encryptor 440 performed to create the encrypted credentials.

the decryptor 448 is a hardware component (e.g. a logic gate) to perform the inverse operation ofthe encryptor 440.

one or more ofthe key generator 435, the SID generator 438, the encryptor 440, the key destroyer 445 and the decryptor 448 are joined into one software module representing the ACR Service 405.

these components (436, 438, 440, 445 and 448) can be hardware components such as logic gates.

these components (435, 438, 440, 445 and 448) are included in a single integrated circuit.

the present invention also provides methods for reconnecting a client 108 to a host service 116 when there is a disruption in the client's connection to the network.

the methods include re-establishing the client's connection to the host service 116 and using the ACR Service 405 to re-authenticate the client to the host service. Referring to FIG. 5 A, the client 108 establishes a first communication session with the server 415 over the communication channel 418.

the client 108 obtains (step 500) authentication credentials from a user ofthe client 108.

the authentication credentials may be a login password that is needed to establish the first communication session.

the obtaining ofthe authentication credentials from the user precedes the establishment ofthe communication session.

the authentication credential is personal information ofthe user that the client 108 obtains after the first communication session has been established. Examples of authentication credentials include a login password, a social security number, a telephone number, an address, biometric information, a time-varying pass code and a digital certification.

the client 108 then transmits (step 505) the authentication credentials to the server 415 over the communication channel 418 so that the server 415 can authenticate the client 108 or the user ofthe client 108.

the ACR Service 405 provides its auto client reconnect services.

the key generator 435 creates (step 510) a first encryption key for use with the authentication credentials.

the encryption key is a random number.

the encryption key is any standard cryptographic key.

the encryptor 440 then encrypts (step 515) the authentication credentials with the first key to generate encrypted authentication credentials. This prevents an attacker who gains access to the server 415 from accessing the authentication credentials without the key.

the SID generator 438 then creates (step 520) a first SID to identify the first communication session between a client 108 and the server 415.

the first communication session is with a host service 116 hosted by the server 415.

the encryptor 440 then stores (step 525) the encrypted authentication credentials with the first SID in the table 455 described above.

the encryptor 440 stores the encrypted authentication credentials with the first SID in a certain location for more efficient retrieval at a later time. For instance, the encryptor 440 stores all encrypted authentication credentials and SIDs that have been created within a predetermined amount of time in RAM 30.

the ACR service 405 transfers all encrypted authentication credentials and SIDS created before a predetermined time to a second, external memory (not shown).

the encryptor 440 stores the encrypted authentication credentials with the SID in a database (not shown).

the SID and the encrypted authentication credentials stored in the memory 430 can be arranged in any particular order and/or format. For example, the SID and encrypted authentication credentials can be stored in chronological order with respect to the creation time o the encrypted authentication credentials.

the server 415 then transmits (step 535) the first key and associated first SID to the client 108 over the network 104.

the client 108 stores (step 540) the first key and the first SID in the client's 108 memory (not shown).

the key destroyer 445 ofthe ACR Service 405 deletes (step 545) the key stored in memory 430.

the ACR Service 405 does not delete the first key from memory 430 until the ACR Service 405 has notification that the client 108 has received the key. For example, the client 108 transmits an acknowledgment message to the server 415 after the client 108 successfully received the key.

the key destroyer 445 then deletes (step 545) the key from the memory 430. This prevents the ACR Service 405 from deleting the key before the client 108 successfully received the key.

the ACR Service 405 can retransmit the key and the SID to the client 108 upon a failure in the transmission.

the ACR Service 405 does not have the mechanism needed to decrypt the encrypted authentication credentials stored in the table 455.

the encrypted authentication credentials stored on the server 415 do not provide any information that the attacker can interpret or understand.

the server 415 does not possess any information to decrypt the encrypted authentication credentials.

the client 108 is the only device that can provide the key to the encrypted authentication credentials.

the server 415 has a timeout feature with respect to accessing the encrypted authentication credentials. For instance, the server 415 starts a timer after the first communication is abnormally terminated. If the timer reached a predetermined value before the client 108 re-establishes the second communication session and transmits the key to the server 415 for decryption, the ACR Service 405 deletes the encrypted authentication credentials from the table 455.

the key acts as a de facto password for future sessions.

the session can be re-established, as shown in FIG. 5B, without requiring the user to reenter his or her authentication credentials.

the first communication session 418 needs to be re- established and the client 108 re-authenticated to the server 415.

the ACR Service 405 provides a system and method for re-establishing and re-authenticating the client 108 to the server 415.

the client 108 transmits the first key and the first SID (step 555) to the server 415.

the ACR Service 405 uses the SID (step 558) to locate and retrieve the encrypted authentication credentials in the server's memory 430 and uses the key (step 560) to decrypt the retrieved authentication credentials.

the server 415 then re-authenticates the client 108 to the server 415 (step 565) by validating the authentication credentials from the client 108.

the authentication and re-authentication is facilitated through the security services provided by the operating system ofthe computing device ofthe server 415.

the authentication credentials are a login and password to the server 415.

the authentication and re-authentication is facilitated through application level security services of an application or software program on the server 415.

the authentication credentials are an application login and password to a specific host service 116.

the client 108 upon an abnormal termination of a first communication session (step 550) in which the user's login password was the authentication credential, the client 108 attempts to establish a second communication session with the server 415.

the client 108 transmits the key and the SID (step 555) ofthe first terminated communication session to the server 415.

the server 415 uses the SID (step 558) to locate and retrieve the encrypted authentication credentials associated with the user, uses the key (step 560) to decrypt the retrieved authentication credentials, and reauthenticates the client using the decrypted authentication information (step 565).

the ACR Service 405 creates (step 570) a second key for the authentication credentials and then encrypts (step 575) the authentication credentials using the second key.

a second SID is created (step 580) to identify the second communication session and associate the session with the client 108.

the second encrypted authentication credentials are stored (step 525) with the second SID in the table 455.

the server transmits (step 585) the second key and the second SID to the client 108.

the client 108 stores (step 590) the second key and the second SID in memory (not shown) for future retrieval.

the ACR Service 405 then deletes (Step 595) the second key from the memory 430.

the ACR Service 405 can only decrypt the second encrypted authentication upon obtaining the second key and the second SID from the client 108.

the ACR Service 405 has created a new key and a new SID for the second communication session that is used with the same authentication credentials that the user had transmitted during the first communication session. Therefore, a user's authentication credentials do not have to be retransmitted upon a second communication channel after an abnormal termination ofthe first communication session.

FIG. 6 depicts another illustrative embodiment of a system 600 that is capable of reconnecting a client 108 to a server 415 using an ACR Service 405 executing on an intermediary node 650.

the intermediary node 650 is a computing device different from the server 415 and can be any computing device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

the client 108 is in communication with an intermediary node 650 over a communication channel 418.

the communication channel 418 may include a network 104.

the intermediary node 650 provides auto client reconnect services, via an ACR Service 405, to the client 108 for the comiection ofthe client 108 to the server 415.

the intermediary node 650 is in communications with the server 415 over a communication channel 418'.

the communication channel 418' may include a network 104'.

the client 108 accesses the services ofthe server 415 through the intermediary node 650.

the ACR Service 405 on the intermediary node 650 provides auto client reconnect services for the connection ofthe client 108 to the server 415.

the system 600 includes multiple intermediary nodes 650 that are in communication with one or more clients 108 through a network 104 over additional communication channels 418, 418'.

any number of intermediary nodes and number of communication channels can part ofthe system 600.

the invention relates to methods to facilitate establishing and authenticating a client's 108 connection to a server 415 using one or more intermediary nodes 650.

an intermediary node 650 establishes (step 520 A) a session with the server 415.

the client 108 establishes a first communication session with the intermediary node 650 over the communication channel 418.

the client 108 obtains (step 500) authentication credentials from a user ofthe client 108.

the client 108 transmits (step 505) the authentication credentials to the intermediary node 650 over the communication channel 418 so that the intermediary node 650 can authenticate the user with the server 415.

the ACR Service 405 After the intermediary node 650 receives the authentication credentials, the ACR Service 405 provides its auto client reconnect services. The ACR Service 405 creates (step 510) a first encryption key for use with the authentication credentials and then encrypts (step 515) the authentication credentials with the first key to generate encrypted authentication credentials. This prevents an attacker who gains access to the server 415 from accessing the authentication credentials without the key. Then a session is established with the server 415 (step 520A) and the client 108 is authenticated to the server 415 using the authentication credentials. Thereby, the ACR Service 405 creates a first SID to identify the first communication session. The encrypted authentication credentials are stored (step 525) with the first SID in the table 455 described above.

the intermediary node 650 then transmits (step 535) the first key and the first SID to the client 108 over the network 104.

the client 108 stores (step 540) the first key and the first SID in the client's 108 memory (not shown).

the ACR Service 405 then deletes (step 545) the key stored in memory 430.

the client 108 transmits the first key and the first SID (step 555) to the intermediary node 650.

the ACR Service 405 ofthe intermediary node 650 uses the SID (step 558) to locate and retrieve the encrypted authentication credentials in the server's memory 430 and uses the key (step 560) to decrypt the retrieved authentication credentials.

the key generator creates (step 570) a second key for the authentication credentials and the key encryptor 440 then encrypts (step 575) the authentication credentials using the second key.

the SID generator 438 also creates (step 580) a second SID to identify the second communication session and associates it with the maintained session between the intermediary node 650 and the server 415.

the encryptor 440 stores the second encrypted authentication credentials with the second SID in the table 455.

the server 415 transmits (step 585) the second key and the second SID to the client 108.

the client 108 stores (step 590) the second key and the second SID for future retrieval.

the key destroyer 445 then deletes (Step 595) the second key from the memory 430.

the ACR Service 405 can only decrypt the second encrypted authentication upon obtaining the second key and the second SID from the client 108.

the ACR Service 405 has created a new key and a new SID for the second communication session that is used with the same authentication credentials that the user had transmitted during the first communication session. Therefore, a user's authentication credentials do not have to be retransmitted upon a second communication channel after an abnormal termination ofthe first communication session.

the intermediary node 650 requests (step 550) the first key and first SID from the client 108 to re-establish a session with the server 415 on the client's behalf.

the client 108 transmits the first key and the first SID (step 555) to the intermediary node 650.

the ACR Service 405 ofthe intermediary node 650 uses the SID (step 558) to locate and retrieve the encrypted authentication credentials in the server's memory 430 and uses the key (step 560) to decrypt the retrieved authentication credentials.

the ACR Service 500 then re-establishes the client's session with the server (step 565) using the decrypted authentication credentials to re-authenticate the client 108 to the server 415.

the ACR Service 405 ofthe intermediary node 650 creates a replacement second SID and second key as previously described in FIG. 7B.

the key generator creates (step 570) a second key for the authentication credentials and the key encryptor 440 then encrypts (step 575) the authentication credentials using the second key.

the SID generator 438 also creates (step 580) a second SID to identify the second communication session and associates it with the re-established session between the intermediary node 650 and the server 415.

the encryptor 440 stores the second encrypted authentication credentials with the second SID in the table 455.

the server transmits (step 585) the second key and the second SID to the client 108.

the client 108 stores (step 590) the second key and the second SID for future retrieval.

the key destroyer 445 then deletes (Step 595) the second key from the memory 430.

an ACR Service 405 can be associated with each ofthe host services 116a-l 16n in system 100 to provide auto client reconnect services dedicated to each host service 116, respectively.

a single first protocol service 112 can be deployed to handle all ofthe host services 116a-l 16n. As shown in Fig 8 A, each ofthe multiple ACR Services 405a-405n is associated with each ofthe host services 116a-l 16n, respectively.

a client 108 establishes a communication session with the host service 116a using the first protocol service 112.

the ACR Service 405a associated with host service 116a provides auto client reconnect services for the connection ofthe client 108 to the host service 116a. If there is a disruption in a network connection, the first protocol service 112 will re-establish the connection with the client 108 and the ACR Service 405a will re-authenticate the client 108 to the host service 116a.

a second client 108' may concurrently, with the first client 108, establish a communication session with the host service 116b using the first protocol service 112.

the ACR Service 405b provides auto client reconnect services for the client's connection to the host service 116b.

an ACR service can be associated with each ofthe multiple host services 116a-l 16n running on each ofthe host nodes 118a-l 18n ofthe system 100.

a first protocol service 112 can be deployed on each host node 118 to service each ofthe multiple host services 116a-l 16n running on that host node 118.

each ACR service 405a-405n is associated with each host service 116a-l 16n, respectively.

Each host node 118 has a dedicated first protocol service 112 servicing each of its host services 116 and each ACR Service 405.

a client 108 establishes a communication session with host service 116a on host node 118a by using the first protocol service 112a.

the ACR Service 405a on host node 118a provides auto client reconnect services for the connection ofthe client 108 to the host service 116a on host node 118a. If a network disruption is detected, the first protocol service 112a re-establishes the client's connection to the host service 116a on host node 118a and the ACR service 405a on host node 118a re-authenticates the client 108 to the host service 116a on host node 118a.

a second client 108' Concurrently with the first client 108, a second client 108' establishes a communication session with host service 116b on host node 118a using the first protocol service 112a and ACR Service 405 a. If there is a network disruption, the first protocol service 112a in conjunction with the ACR Service 405a reconnect the client 108' with host service 116b on host node 118a. Concurrently with the first client 108 and the second client 108', a third client 108 "establishes a communication session with host service 116n on host node 118b using the first protocol service 112b and ACR Service 405n on host node 118b.

the first protocol service 112b and ACR Service 405n can reconnect the client 108" to the host service 116n of host node 118b.

one or more ofthe ACR Services 405 can be distributed with the first protocol services 112 across any ofthe intermediary or first protocol services nodes.

the functionality of reconnecting a client 108 to a host service 116 can be flexibly distributed in different system and deployment architectures associated with the first protocol service 112.

the ACR Service 405 can be associated with each first protocol service 112 to provide auto client reconnect services dedicated to the first protocol service 112.

a single first protocol service 112 and ACR Service 405 can be deployed to handle all ofthe host services 116a-l 16n.

the ACR Service 405 resides with the first protocol service 112 on the same computing device to provide auto client reconnect services to host services 116a-l 16n.

a client 108 establishes a communication session with any ofthe host services 116a-l 16n by using the first protocol service 112 and ACR Service 405.

the first protocol service 112 and ACR Service 405 provide reconnecting functionality from a client 108 to any ofthe host services 116a-l 16n.

each ofthe ACR Services 405a-405n can be associated with each ofthe multiple of first protocol services 116a- 116n. For example as shown in Fig.

a first protocol service 112a and an ACR Service 405a can be deployed on a host node 118a to service each ofthe multiple host services 116a-l 16n running on that host node 118a.

each ACR service 405a-405n is associated with each first protocol service 112a-l 12n to provide dedicated auto client reconnect services to the multiple host services 116a-l 16n of each host node 118a-l 18n.

client 108 establishes a communication session with host service 116a on host node 118a by using the first protocol service 112a and ACR Service 405a on the same host node 118a.

the first protocol service 112a in conjunction with the ACR Service 405a reconnects the client 108 to the host service 116a on the host node 118a.

the invention is discussed above in terms of various system and deployment architectures in FIGS. 8A-8B and 9A-9B, any other system and/or deployment architecture that combines and/or distributes one or more ofthe first protocol service(s) 112, ACR Service(s) 405, and host service(s) 116 across any ofthe host nodes 118, intermediary nodes 650 or other computing devices can be used.

a ticket authority 1036 service can be used instead of using an ACR Service 405 to provide authentication and re-authentication services.

a ticket authority 1036 generates and validates tickets for connection and authentication purposes.

a ticket can comprise a session identifier and key. It can also comprise a random number, an application server certificate, a nonce, a constant or null value or any other type of identification, confidential or security based information that may be used for such purposes.

a ticket authority 1036 can run on a node separate from the intermediary node 1032, first protocol service 112 or any ofthe host services 116a-l 16n.

Fig 10A depicts an intermediary node 1032 and ticket authority 1036, which could be a single computing device, as part ofthe system 1000.

the system 1000 includes a client 108, first protocol service 112, and the host services 116a-l 16n, all of which are described above.

the intermediary node 1032 is a security gateway, such as, for example, a firewall and/or a router, through which messages between the client 108 and the first protocol service 112 must pass due to the configuration ofthe network 104.

the ticket authority 1036 can be, for example, a stand-alone network component that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

the ticket authority 1036 also can be a specific host service 116 dedicated to providing ticket related services on a server 415. As shown in the illustrative embodiment of FIG.

the intermediary node 1032 is configured to accept a connection 120a initiated by the client 108 and to establish a second connection 120b with the first protocol service 112. Together, the connection 120a and the second connection 120b constitute the connection 120, described above, over which the client 108 and the first protocol service 112 communicate using the first protocol.

the intermediary node 1032 is also configured to communicate with the ticket authority 1036.

the ticket authority 1036 is configured to receive a request for a first recormection ticket from the intermediate node 1032 and to thereafter generate the first recormection ticket.

the first recormection ticket can include, for example, a large random number.

the first recormection ticket allows the client 108 to automatically re-establish a connection with the host service after an abnormal disruption of service without requiring the client 108 to provide authentication credentials again.

the ticket authority 1036 After generation ofthe first recormection ticket, the ticket authority 1036 encrypts the authentication credentials supplied by the client 108 using the first recormection ticket so that an attacker who gains access to the intermediary node 1032 or the ticket authority 1036 cannot access the authentication credentials without the first recormection ticket.

the ticket authority 1036 may also generate a SID to identify the communication session that is established between the client 108 and the intermediary node 1032.

the ticket authority 1036 then stores the encrypted authentication credentials with the SID in memory and transmits the SID and the first recormection ticket to the client 108 over the network 104. Upon the client's receipt ofthe SID and the first recormection ticket, the ticket authority 1036 destroys (i.e., deletes) the ticket from its memory (not shown).

the ticket authority 1036 is configured to generate a handle.

the handle can be, for example, a random number that is associated with (e.g., mapped to) the first recormection ticket. In one embodiment, the handle is a smaller random number than the random number forming the first recormection ticket. For example, the handle may be a 32-bit random number.

the ticket authority 1036 transmits the first recormection ticket and the handle to the intermediary node 1032, while keeping a copy ofthe first recormection ticket and a copy ofthe handle.

the copy ofthe first recormection ticket can later be used by the ticket authority 1036 to validate the first recormection ticket originally transmitted to the client 108 when it is later presented to the ticket authority 1036 during the process of reconnecting the client 108.

the ticket authority 1036 also keeps an address for the first protocol service 112, which, as explained below, is associated with the first recormection ticket and, upon validation ofthe first recormection ticket, is transmitted to the intermediary node 1032.

the intermediary node 1032 is further configured to use the handle transmitted to it by the ticket authority 1036 to delete the copy ofthe first recormection ticket kept at the ticket authority 1036.

the ticket authority 1036 is further configured to delete, during the process of reconnecting the client 108 to a host service 116, the first recormection ticket and thereafter generate a replacement first recormection ticket.

the first recormection ticket is configured for automatic deletion after a pre-determined period of time.

the first protocol service 112 is configured to generate a second recormection ticket, which, as in the case ofthe first recormection ticket, can include, for example, a large random number.

the first protocol service 112 can also be configured to transmit the second recormection ticket to the client 108, while keeping a copy ofthe second reconnection ticket and a session number.

the copy ofthe second reconnection ticket can later be used by the first protocol service 112 to validate the second reconnection ticket originally transmitted to the client 1 8 when it is later presented to the first protocol service 112 during the process of reconnecting the client 108.

the first protocol service 112 transmits the second reconnection ticket to the client 108 via the intermediary node 1032.

the first protocol service 112 transmits the second reconnection ticket to the client 108 directly.

the first protocol service 112 can be further configured to delete, during the process of reconnecting the client 108 to a host service 116, the second reconnection ticket, and thereafter generate a replacement second reconnection ticket.

the second reconnection ticket is configured for automatic deletion after a pre-determined period of time.

the intermediary node 1032 serves as an intermediary for the first and second reconnection tickets. The intermediary node 1032 receives, for example, the first reconnection ticket generated by the ticket authority 1036 and the second reconnection ticket generated by the first protocol service 112. The intermediary node 1032 can then transmit the first reconnection ticket and the second reconnection. ticket to the client 108.

the intermediary node 1032 can accept the first reconnection ticket and the second recormection ticket from the client 108 and thereafter transmit the first reconnection ticket to the ticket authority 1036 and, if appropriate, the second reconnection ticket to the first protocol service 112. If the first communication session between the client 108 and the host service 116 terminates, for example abnormally, the new session can be re-established without requiring the user to reenter his or her authentication credentials. When the client 108 and the host service 116 re-establish a second communication session, the client 108 retransmits the first and second reconnection tickets and the SID to the intermediary node 1032.

the intermediary node 1032 transmits the first and second reconnection tickets and the SID to the ticket authority 1036, which uses the SID to locate and retrieve the encrypted authentication credentials for the first connection and uses the first reconnection ticket to decrypt the retrieved authentication credentials.

the ticket authority 1036 then authenticates the client by validating the decrypted authentication credentials.

the second reconnection ticket is forwarded to the first protocol service 112 to re-establish the second connection 124 with the host service 116.

an ACR Service 405 can be used instead ofthe ticket authority 1036 for reconnecting the client 108 to any ofthe host services 116a-l 16n.

the ACR Service 405 can provide similar services as described above with regards to the ticket authority 1036. As previously described, the ACR Service 405 generates, validates and manages a SID and a key for connecting and reconnecting a client communication session. A SID and a key can form a ticket as in the type of ticket generated, validated and managed by the ticket authority 1036 as described above. As such, in another embodiment, a ticket may be used interchangeably for the combination of a session identifier and a key.

the intermediary node 1032 as shown in FIG. 10B, is configured to communicate with the ACR Service 405.

the ACR Service 405 is configured to receive a request for a first SID and a first key from the intermediary node 1032 and to thereafter generate the first SID and first key.

the ACR Service 405 uses the first SID to identify the communication session that is established between the client 108 and a host service 116.

the first SID and the first key allow the client 108 to automatically reconnect with the host service 116 after an abnormal disruption of service without requiring the client 108 to provide authentication credentials again.

the ACR Service 405 encrypts the authentication credentials supplied by the client 108 using the first key so that an attacker who gains access to the intermediary node 1032 or the ACR Service 405 cannot access the authentication credentials without the first key.

the ACR Service 405 then stores the encrypted authentication credentials with the SID in memory 430 and transmits the first SID and the first key to the client 108 over the network 104.

the ACR Service 405 destroys (i.e., deletes) the key from its memory 430.

the first protocol service 112 is configured to generate a second SID and second key.

the first protocol service 112 can also be configured to transmit the second SID and second key to the client 108, while keeping a copy ofthe second SID and second key.

the copy ofthe second SID and second key can later be used by the first protocol service 112 to validate the second SID and second key originally transmitted to the client 108 when it is later presented to the first protocol service 112 during the process of reconnecting the client 108.

the first protocol service 112 transmits the second SID and second key to the client 108 via the intermediary node 1032.

the first protocol service 112 transmits the second SID and second key to the client 108 directly.

the first protocol service 112 can be further configured to delete, during the process of reconnecting the client 108 to a host service 116, the second SID and second key, and thereafter generate a replacement second SID and second key.

the second SID and second key is configured for automatic deletion after a pre-determined period of time.

the intermediary node 1032 serves as an intermediary for the first and second SIDs and keys.

the intermediary node 1032 receives, for example, the first SID and first key generated by the ACR Service 405 and the second SID and second key generated by the first protocol service 112.

the intermediary node 1032 can then transmit the first SID and first key and the SID and second key to the client 108.

the intermediary node 1032 can accept the first SID and first key and the second SID and second key from the client 108 and thereafter transmit the first SID and first key to the ACR Service 405 and, if appropriate, the second SID and second key t to the first protocol service 112. If the first communication session between the client 108 and the host service 116 terminates, for example abnormally, the new session can be re-established without requiring the user to reenter his or her authentication credentials. When the client 108 and the host service 116 re-establish a second communication session, the client 108 transmits the first and second SIDs and keys to the intermediary node 1032.

the intermediary node 1032 transmits the first SID and first key to the CR Service 405, which uses the SID to locate and retrieve the encrypted authentication credentials for the first connection and uses the first key to decrypt the retrieved authentication credentials.

the ACR Service 405 then authenticates the client by validating the decrypted authentication credentials.

the second SID and second key is forwarded to the first protocol service 112 to re-establish the second connection 124 with the host service 116.

FIG. 11A another embodiment of a system 1100 for network communications includes the networks 104 and 104', the client 108, the first protocol service 112, the host services 116, the intermediary node 1032, and the ticket authority 1036, as described above, and further depicts a first computing node 1140 and a second computing node 144, both of which are used, in one embodiment, for initially connecting the client 108 to a host service 116.

the client 108 further includes a web browser 148, such as, for example, the INTERNET EXPLORER program from Microsoft Corporation of Redmond, WA, to connect to the World Wide Web.

the system 1100 includes two or more intermediary nodes 1032 and/or two or more first protocol services 112.

the intermediary node 1032, through which messages between the client 108 and the first protocol service 112 must pass, and/or the first protocol service 112 can, as explained below, each be chosen based on, for example, a load balancing equation.

Each ofthe first computing node 1140 and the second computing node 1144 can be any computing device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

the first computing node 1140 is a web server, providing one or more websites or web based applications.

the second computing node 1144 provides an XML service or web service.

the client 108 and the network 104 form an external network

the intermediary node 1032 and the first computing node 1140 can be located in a "demilitarized zone" 1160 (i.e., a network region placed between a company's private network and the public network), separated from the rest of the system 1100 by the first firewall 1156 and a second firewall 1164, also depicted by a dashed line.

a "demilitarized zoneâ 1160 i.e., a network region placed between a company's private network and the public network

the network 104', the first protocol service 112, the host services 116a-l 16n, the ticket authority 1036, and the second computing node 1144 form an internal network 1168, separated from the rest ofthe system 100 by the second firewall 1164.

the system 1100 further includes a third computing node 1146 positioned, in the demilitarized zone 1160, between the network 104 and the intermediary node 1032.

the third computing node 1146 can be any computing device that is capable of networked communication and that has sufficient processor power and memory capacity to perform the operations described herein. As described below, the third computing node 1146 is used, in some embodiments, during the process of initially connecting the client 108 to a host service 116 and/or during the process of reconnecting the client 108 to a host service 116.

the third computing node 1146 can, based on a load balancing equation for example, choose the intermediary node 1032 through with communications between the client agent 128 ofthe client 108 and the first protocol service 112 must pass.

the intermediary node 1032 in an alternative embodiment, can be replaced by two or more levels "a"-"n" of intermediary nodes 1032. As illustrated, each level âa"-"nâ can include two or more intermediary nodes 1032a- 1032n.

the client agent 128 ofthe client 108 can be routed through any combination ofthe intermediary nodes 1032 based on, for example, load balancing equations. For example, as illustrated, the client agent 128 can be routed through the intermediary nodes 1032 via connection 120.

Other configurations ofthe system 1100 as would be readily apparent to one skilled in the art, are also possible.

the web browser 1148 communicates over the network 104 with the first computing node 1140, which itself interfaces with the second computing node 1144 and the ticket authority 1036. More specifically, the first computing node 1140 is configured with the address ofthe second computing node 1144 and the ticket author