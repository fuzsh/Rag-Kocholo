{
    "id": "dbpedia_365_2",
    "rank": 94,
    "data": {
        "url": "https://code.visualstudio.com/docs/editor/multi-root-workspaces",
        "read_more_link": "",
        "language": "en",
        "title": "root Workspaces in Visual Studio Code",
        "top_image": "https://code.visualstudio.com/opengraphimg/opengraph-docs.png",
        "meta_img": "https://code.visualstudio.com/opengraphimg/opengraph-docs.png",
        "images": [
            "https://code.visualstudio.com/assets/icons/theme-light.svg",
            "https://code.visualstudio.com/assets/icons/theme-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/hero.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/add-root-folder.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/explorer-context.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/save-workspace.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/open-recent.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/named-folders.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/workspace-file-schema.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/tabbed-headers.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/quick-open-list.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/workspace-icon.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/search.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/settings-dropdown.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/unsupported-setting-info.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/debugging-dropdown.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/add-launch-config.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/workspace-settings.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/add-config.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/tasks-dropdown.png",
            "https://code.visualstudio.com/assets/docs/editor/multi-root-workspaces/multiple-scm-providers.png",
            "https://code.visualstudio.com/assets/icons/x-icon.svg",
            "https://code.visualstudio.com/assets/icons/github-icon.svg",
            "https://code.visualstudio.com/assets/icons/youtube-icon.svg",
            "https://code.visualstudio.com/assets/icons/microsoft.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Microsoft"
        ],
        "publish_date": "2021-11-03T00:00:00",
        "summary": "",
        "meta_description": "You can open and work on multiple project folders in Visual Studio Code with multi-root workspaces.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://code.visualstudio.com/docs/editor/multi-root-workspaces",
        "text": "Multi-root Workspaces\n\nYou can work with multiple project folders in Visual Studio Code with multi-root workspaces. This can be helpful when you are working on several related projects at one time. For example, you might have a repository with a product's documentation that you like to keep current when you update the product source code.\n\nNote: If you'd like to learn more about the VS Code \"workspace\" concept, you can review What is a VS Code \"workspace\"? Unless you are explicitly creating a multi-root workspace, a \"workspace\" is just your project's single root folder.\n\nAdding folders\n\nIt is easy to add another folder to your existing workspace. There are several gestures for adding folders:\n\nAdd Folder to Workspace\n\nThe File > Add Folder to Workspace command brings up an Open Folder dialog to select the new folder.\n\nOnce a root folder is added, the Explorer will show the new folder as a root in the File Explorer. You can right-click on any of the root folders and use the context menu to add or remove folders.\n\nThe File Explorer should work and behave as before. You can move files between root folders and use any of the typical file operation actions provided in the context menu and the Explorer view.\n\nSettings like files.exclude are supported for each root folder if configured, and across all folders if configured as global user setting.\n\nDrag and drop\n\nYou can use drag and drop to add folders to a workspace. Drag a folder to the File Explorer to add it to the current workspace. You can even select and drag multiple folders.\n\nNote: Dropping a single folder into the editor region of VS Code will still open the folder in single folder mode. If you drag and drop multiple folders into the editor region, a new multi-root workspace will be created.\n\nYou can also use drag and drop to reorder folders in the workspace.\n\nMultiple selection native file open dialogs\n\nOpening multiple folders with your platform's native file open dialog will create a multi-root workspace.\n\ncommand line --add\n\nAdd a folder or multiple folders to the last active VS Code instance for a multi-root workspace.\n\ncode --add vscode vscode-docs\n\nRemoving folders\n\nYou can remove a folder from a Workspace with the Remove Folder from Workspace context menu command.\n\nWorkspace file\n\nWhen you add multiple folders, they are initially placed in a Workspace titled UNTITLED WORKSPACE and that name will remain until you save the workspace. You do not need to save a Workspace until you want to have it in a permanent location, for example, on your Desktop. Untitled Workspaces are present as long as the VS Code instance they are using is open. Once you completely close an instance with an untitled workspace, you will be asked to save it if you plan to open it again in the future:\n\nWhen you save your workspace, it will create a .code-workspace file and the file name will be displayed in the File Explorer.\n\nSave Workspace As...\n\nIf you want to move your Workspace file to a new location, you can use the File > Save Workspace As command, which will automatically set the correct folder paths relative to the new Workspace file location.\n\nOpening workspace files\n\nTo reopen a Workspace, you can:\n\nDouble-click the .code-workspace file in your platform's Explorer.\n\nUse the File > Open Workspace command and select the Workspace file.\n\nSelect the Workspace from the File > Open Recent (⌃R (Windows, Linux Ctrl+R)) list.\n\nWorkspaces have a (Workspace) suffix to differentiate them from folders.\n\nJust like Close Folder when a single folder is open in VS Code, there is a Close Workspace (⌘K F (Windows, Linux Ctrl+K F)) command to close the active Workspace.\n\nWorkspace file schema\n\nThe schema of .code-workspace is fairly straightforward. You have an array of folders with either absolute or relative paths. Relative paths are better when you want to share Workspace files.\n\nYou can override the display name of your folders with the name attribute, to give more meaningful names to folders in the Explorer. For example, you could name your project folders such as 'Product' and 'Documentation' to easily identify the content by folder name:\n\n{ \"folders\": [ { // Source code \"name\": \"Product\", \"path\": \"vscode\" }, { // Docs and release notes \"name\": \"Documentation\", \"path\": \"vscode-docs\" }, { // Yeoman extension generator \"name\": \"Extension generator\", \"path\": \"vscode-generator-code\" } ] }\n\nwhich will result in the following Explorer display:\n\nAs you can see from the example above, you can add comments to your Workspace files.\n\nThe Workspace file can also contain Workspace global settings under settings and extension recommendations under extensions, which we will discuss below.\n\nGeneral UI\n\nEditor\n\nThere are only a few changes to the VS Code UI when you are using multi-root workspaces, primarily to disambiguate files between folders. For example, if there is a name collision between files in multiple folders, VS Code will include the folder name in tabbed headers.\n\nIf you'd always like to see the folder displayed in the tabbed header, you can use the workbench.editor.labelFormat setting \"medium\" or \"long\" values to show the folder or full paths.\n\n\"workbench.editor.labelFormat\": \"medium\"\n\nVS Code UI such as the OPEN EDITORS and Quick Open (⌘P (Windows, Linux Ctrl+P)) lists include the folder name.\n\nIf you are using a File Icon Theme and the active theme supports it, you will see a special Workspace icon.\n\nBelow you can see the Workspace icons from the built-in Minimal (Visual Studio Code) file icon theme:\n\nSearch\n\nVS Code features like global search work across all folders and group the search results by folder.\n\nWhen you have a multi-root workspace open, you can choose to search in a single root folder by using the ./ syntax in the files to include box. For example, if you enter ./project1/**/*.txt, that will search for all .txt files under the project1/ root folder.\n\nSettings\n\nWith multiple root folders in one workspace, it is possible to have a .vscode folder in each root folder defining the settings that should apply for that folder. To avoid setting collisions, only resource (file, folder) settings are applied when using a multi-root workspace. Settings that affect the entire editor (for example, UI layout) are ignored. For example, two projects cannot both set the zoom level.\n\nUser settings are supported as with single folder projects and you can also set global Workspace settings that will apply to all folders in your multi-root Workspace. Global Workspace settings will be stored in your .code-workspace file.\n\n{ \"folders\": [ { \"path\": \"vscode\" }, { \"path\": \"vscode-docs\" }, { \"path\": \"vscode-generator-code\" } ], \"settings\": { \"window.zoomLevel\": 1, \"files.autoSave\": \"afterDelay\" } }\n\nWhen you go from a single folder instance to multiple folders, VS Code will add the appropriate editor-wide settings from the first folder to the new global Workspace settings.\n\nYou can easily review and modify the different settings files through the Settings editor. The Settings editor tabs let you select your User settings, global Workspace settings, and individual folder settings.\n\nYou can also open specific settings files with the commands:\n\nPreferences: Open User Settings - Open your global User settings\n\nPreferences: Open Workspace Settings - Open the settings section of your Workspace file.\n\nPreferences: Open Folder Settings - Open the settings for the active folder.\n\nGlobal Workspace settings override User settings and folder settings can override Workspace or User settings.\n\nUnsupported folder settings\n\nUnsupported editor-wide folder settings will be shown as grayed out in your folder settings and are filtered out of the DEFAULT FOLDER SETTINGS list. You will also see an information icon in front of the setting.\n\nDebugging\n\nWith multi-root workspaces, VS Code searches across all folders for launch.json debug configuration files and displays them with the folder name as a suffix. Additionally VS Code will also display launch configurations defined in the workspace configuration file.\n\nThe example above shows the debugging configurations for the TSLint extension. There is a launch configuration from the tslint extension folder to start the extension running in the VS Code Extension Host and also an attach configuration from the tslint-server folder to attach the debugger to a running TSLint server.\n\nYou can also see the three Add Config commands for the folders, tslint, tslint-server, and tslint-tests, in the vscode-tslint Workspace. The Add Config command will either open an existing launch.json file in the folder's .vscode subfolder or create a new one and display the debugging configuration template dropdown.\n\nVariables used in a configuration (for example ${workspaceFolder} or the now deprecated ${workspaceRoot}) are resolved relative to the folder they belong to. It is possible to scope a variable per workspace folder by appending the root folder's name to a variable (separated by a colon).\n\nWorkspace launch configurations\n\nWorkspace scoped launch configurations live in the \"launch\" section of the workspace configuration file (Workspaces: Open Workspace Configuration File in the Command Palette):\n\nAlternatively, new launch configurations can be added via the \"Add Config (workspace)\" entry of the Launch Configuration dropdown menu:\n\nA compound launch configuration can reference the individual launch configurations by name as long as the names are unique within the workspace, for example:\n\n\"compounds\": [{ \"name\": \"Launch Server & Client\", \"configurations\": [ \"Launch Server\", \"Launch Client\" ] }]\n\nIf the individual launch configuration names are not unique, the qualifying folder can be specified with a more verbose \"folder\" syntax:\n\n\"compounds\": [{ \"name\": \"Launch Server & Client\", \"configurations\": [ \"Launch Server\", { \"folder\": \"Web Client\", \"name\": \"Launch Client\" }, { \"folder\": \"Desktop Client\", \"name\": \"Launch Client\" } ] }]\n\nIn addition to compounds, the launch section of the workspace configuration file can contain regular launch configurations too. Make sure that all used variables are explicitly scoped to a specific folder because otherwise they are not valid for the workspace. You can find more details about explicitly scoped variables in the Variables Reference.\n\nHere is an example for a launch configuration where the program lives in a folder \"Program\" and where all files from a folder \"Library\" should be skipped when stepping:\n\n\"launch\": { \"configurations\": [{ \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch test\", \"program\": \"${workspaceFolder:Program}/test.js\", \"skipFiles\": [ \"${workspaceFolder:Library}/out/**/*.js\" ] }] }\n\nTasks\n\nSimilar to how VS Code searches for debugging configurations, VS Code will also try to autodetect tasks from gulp, grunt, npm, and TypeScript project files across all folders in a workspace as well as search for tasks defined in tasks.json files. The location of tasks is indicated by a folder name suffix. Note that tasks defined in tasks.json must be version 2.0.0.\n\nFrom the TSLint extension Workspace example above, you can see that there are two configured tasks from tasks.json files in the tslint and tslint-tests folders and numerous autodetected npm and TypeScript compiler detected tasks.\n\nWorkspace task configuration\n\nWorkspace scoped tasks live in the \"tasks\" section of the workspace configuration file (Workspaces: Open Workspace Configuration File in the Command Palette). Only \"shell\" and \"process\" type tasks can be defined in the workspace configuration file.\n\nSource Control\n\nWith multi-root workspaces, there is a SOURCE CONTROL PROVIDERS section that gives you an overview when you have multiple active repositories. These can be contributed by several SCM providers; for example, you can have Git repositories side-by-side with Azure DevOps Server workspaces. As you select repositories in this view, you can see the source control details below.\n\nYou can use Ctrl+Click or Shift+Click to select multiple repositories. Their details will appear as separate regions underneath.\n\nExtensions\n\nIf you are an extension author, you can review our Adopting Multi Root Workspace APIs guide to learn about VS Code multi-root workspace APIs and how to make your extension work well across multiple folders.\n\nBelow are some of the popular extensions that have adopted the multi-root workspace APIs.\n\nNote: If an extension doesn't yet support multiple folders, it will still work in the first folder of your multi-root workspace.\n\nExtension recommendations\n\nVS Code supports folder level extension recommendations through the extensions.json files under the folder's .vscode subfolder. You can also provide global Workspace extension recommendations by adding them to your .code-workspace file. You can use the Extensions: Configure Recommended Extensions (Workspace Folder) command to open your Workspace file and add extension identifiers ({publisherName}.{extensionName}) to the extensions.recommendations array.\n\n{ \"folders\": [ { \"path\": \"vscode\" }, { \"path\": \"vscode-docs\" } ], \"extensions\": { \"recommendations\": [\"eg2.tslint\", \"dbaeumer.vscode-eslint\", \"esbenp.prettier-vscode\"] } }\n\nNext steps\n\nWhat is a VS Code \"workspace\"? - More about single-folder and multi-root workspaces.\n\nDebugging - Learn how to set up debugging for your application.\n\nTasks - Tasks let you run external tools like compilers within VS Code.\n\nCommon questions\n\nHow can I go back to working with a single project folder?\n\nYou can either close the Workspace and open the folder directly or remove the folder from Workspace.\n\nAs an extension author what do I need to do?"
    }
}