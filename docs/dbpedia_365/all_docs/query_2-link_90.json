{
    "id": "dbpedia_365_2",
    "rank": 90,
    "data": {
        "url": "https://www.jetbrains.com/help/hub/markdown-syntax.html",
        "read_more_link": "",
        "language": "en",
        "title": "Markdown Syntax | Hub",
        "top_image": "https://resources.jetbrains.com/storage/products/hub/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/hub/img/meta/preview.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "Hub Help",
        "canonical_link": "https://www.jetbrains.com/help/hub/markdown-syntax.html",
        "text": "Markdown Syntax\n\nIn different locations around Hub, you have the ability to format blocks of text. This formatting is applied using the Markdown markup syntax. Markdown is supported for the following features in Hub:\n\nFeature\n\nDescription\n\nThe Markdown implementation in YouTrack follows the CommonMark specification with extensions. These extensions support formatting options that are not included in the formal specification like strikethrough text, tables, and autolinks.\n\nTo see any of these formatting options in action, paste the sample block of code into an input field that accepts Markdown.\n\nCharacter Formatting\n\nYou can format inline text with the following Markdown syntax.\n\nStyle\n\nSyntax\n\nYou should read this, it's **very important**. You _might_ want to read this. ~~Never mind~~ - it wasn't _that_ important. Let's try a few `combinations`: **This text is strong, ~~this text is strong with strikethrough~~, and _this text is formatted with strong emphasis_** ***This text is formatted with strong emphasis too.***\n\nHeadings\n\nTo apply a heading style, start the line with one to six number signs #. Follow the number signs with a space character and enter the heading text. The number of # signs determines the heading level.\n\nHub also supports an alternative syntax for heading levels 1 and 2:\n\nFor heading level 1, enter one or more = characters on the following line.\n\nFor heading level 2, enter one or more - characters on the following line.\n\n# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Heading 1 - Alternative Syntax ======== Heading 2 - Alternative Syntax --------\n\nParagraphs and Line Breaks\n\nContiguous lines of text belong to the same paragraph. Use the following guidelines to structure your content into paragraphs and enter line breaks.\n\nTo start a new paragraph, leave a blank line between lines of text.\n\nTo start a new line inside a paragraph, enter two trailing spaces at the end of the line of text.\n\nEven though this text is written on two separate lines, it is parsed as a single paragraph. This paragraph is separated from the previous paragraph by a blank line.\n\nThematic Breaks\n\nCreate sections in your content with horizontal lines. Use any of the following methods to add a horizontal line:\n\nThree underscores (___)\n\nThree minus signs (---)\n\nThree asterisks (***)\n\nThe underscores on the next line create a thematic break below this paragraph. ___ The minus signs below must be separated from this paragraph by a blank line. If not, they are parsed as a level 2 heading. ---- Three or more asterisks also create a thematic break. ****\n\nBlock Quotes\n\nUse block quotes to call special attention to a quote from another source. You can apply character formatting to inline text inside the quoted block.\n\nTo set text as a quote block, start the line with one or more > characters. Follow these characters with a space and enter the quoted text. The number of > signs determines the level of nesting inside the quote block.\n\nIf your quote spans multiple paragraphs, each blank line must start with the > character. This ensures that the entire quote block is grouped together.\n\n> Use quote blocks to emulate reply text. > This line is part of the same quote. This line is not formatted and does not belong to the quote block. > This block spans multiple paragraphs. > > The second paragraph is grouped with the previous paragraph in the same quote block. > Character formatting is _also_ supported inside the **quote block**. > Quote blocks can also be nested. >> When you start a new line with additional > characters, >>> it simulates a threaded conversation.\n\nIndented Code Blocks\n\nYou can format blocks of text in a monospaced font to make it easier to identify and read as code.\n\nTo format a code block in Markdown, indent every line of the block by at least four spaces. An indented code block cannot interrupt a paragraph, so you must insert at least one blank line between a paragraph the indented code block that follows. The input is processed is as follows:\n\nOne level of indentation (four spaces) is removed from each line of the code block.\n\nThe contents of the code block are literal text and are not parsed as Markdown.\n\nAny non-blank line with fewer than four leading spaces ends the code block and starts a new paragraph.\n\nStart an indented code block following a paragraph with a blank line and at least four spaces of indentation: This is a code block. Blank lines between indented lines do not end the code block. Here is some HTML: <div class=\"footer\"> 2009â2017 JetBrains Â· All rights reserved </div> This line of text is not indented. It ends the code block and starts a new paragraph.\n\nFenced Code Blocks\n\nUnlike indented code blocks, fenced code blocks have an info string that lets you specify which language is used for syntax highlighting. Language-specific highlights make the code easier to read.\n\nSyntax highlighting is supported for a range of languages. YouTrack detects and highlights code in C, C++, C#, Java, JavaScript, Perl, Python, Ruby, and SH automatically. To highlight code in other languages, set the language in the info string (the line with the opening code fence). The following languages are supported: apollo (AGC/AEA Assembly Language), basic, clj (Clojure) css, dart, erlang, hs (Haskell), kt (Kotlin), lisp, llvm, lua, matlab, ml, mumps, n (Nemerle), pascal, proto, scala, sql, tcl, tex, vb, vhdl, wiki, xq, and yaml.\n\nTo create a fenced code block that spans multiple lines of code, set the text inside three or more backquotes (```) or tildes (~~~).\n\nOpen and close the block with the same character.\n\nUse the same number of characters to open and close the code fence.\n\nSet multiple lines of code in fenced code blocks. ``` action: function(ctx) { workflow.check(!ctx.issue.isChanged('votes'), workflow.i18n('Voting for a resolved issue is not allowed.')); }, ``` The following code block uses syntax highlighting for Haskell: ```hs -- Point-free style fib :: Integer -> Integer fib = (fibs !!) where fibs = 0 : scanl (+) 1 fibs -- Explicit fib :: Integer -> Integer fib n = fibs !! n where fibs = 0 : scanl (+) 1 fibs ```\n\nLists\n\nUse the following syntax to create lists:\n\nTo create an unordered list, start the line with a dash (-), asterisk (*), or plus sign (+).\n\nTo create an ordered list, start the line with a number and a period (1.). Increment subsequent numbers to format each item in the ordered list.\n\nTo nest an unordered list inside an unordered or ordered list, indent the line with two spaces. Nesting ordered lists is not supported.\n\nThings I need to do today: 1. Fix usability problem 2. Clean up the page * Make the headings bigger 2. Push my changes 3. Create code review * Describe my changes * Assign reviewers * Ask for feedback\n\nTables\n\nTables are a great tool for adding structure to your content. Use the following syntax to create tables:\n\nTo create columns, use vertical bars (|). The outer bars are optional.\n\nSeparate the header row from the rest of the table with three or more dashes (---).\n\nNote that the columns don't have to line up perfectly in the raw Markdown. You can also add character formatting to text inside the table.\n\nKitchen Cleanup Rotation | Month | Assignee | Backup | | -------- | -------- | ------ | | January | Dave | Steve | | February | Gregg | Karen | | March | Diane | Jorge | Here's the same text with character formatting. + The text in the first column is flush right. + The text in the second column is centered. + The Markdown is stripped down to the minimum syntax that is required to render the table. Month | Assignee | Backup ---:|:---:| --- **January** | Dave | _Steve_ **February** | Gregg | _Karen_ **March** | Diane | _Jorge_\n\nAll of the cells are left-justified. The syntax that aligns text to the right or center is not supported.\n\nAutolinks are absolute URIs and email addresses that are set inside angle brackets (< >). They are parsed as links, with the URL or email address as the link label. Unlike links that let you specify link text and tooltips, this syntax simply converts the URL or email address into a clickable link.\n\nHub supports an extended syntax for URLs. Any string that is parsed as a URL is converted into a clickable link, even without the angle brackets. Email addresses that are not set inside angle brackets are displayed as text.\n\nBoth of these URLs are parsed as links: <https://youtrack.jetbrains.com/issues> https://youtrack.jetbrains.com/issues Email addresses are also converted into \"mailto\" links when set in angle brackets: <webmaster@jetbrains.com>\n\nImages\n\nThe syntax for images is similar to the syntax for links. To insert an inline image:\n\nStart the line with an exclamation point (!).\n\nWrap the alt text with brackets ([ ]).\n\nSet the image URL and tooltip in parentheses (( )).\n\nYou can also use the reference style for images. To insert an image reference:\n\nStart the line with an exclamation point (!).\n\nWrap the alt text with brackets ([ ]).\n\nSet the image reference in brackets ([ ]).\n\nDefine the image reference in another location with the format [tag]: image URL \"tooltip\".\n\nHere's an image link to the Markdown logo on Wikipedia: Inline: ![Markdown logo](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png \"Markdown\") Reference style: ![Markdown logo][logo] [logo]: https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png \"Markdown\" Markdown also supports images as links. Just wrap the entire image reference in brackets then add the target URL in parenthesis after the image reference. People use this syntax to insert a thumbnail image that links to a video on a video sharing platform. Here's a reference to the latest video promotion for YouTrack: [![YouTrack â Maintain Order In A World of Chaos](https://img.youtube.com/vi/rhAunB7UQFQ/sddefault.jpg)](https://www.youtube.com/watch?v=rhAunB7UQFQ)\n\nBackslash Escapes\n\nWhen you have characters that are parsed as Markdown that you want to show as written, you can escape the character with the backslash (\\).\n\nBackslashes before non-markup characters are shown as backslash characters.\n\nEscaped characters are treated as regular characters. Their usual meaning in Markdown syntax is ignored.\n\nBackslash escapes do not work in fenced code blocks, inline code spans, or autolinks.\n\nHere are a few examples of backslash escapes: \\*not emphasis* \\`not an inline code span` 1\\. not an ordered list \\* not an unordered list \\# not a heading \\This is not a backslash escape - the escaped character is not a markup character.\n\nLast modified: 09 November 2023"
    }
}