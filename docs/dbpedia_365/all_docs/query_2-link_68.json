{
    "id": "dbpedia_365_2",
    "rank": 68,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
        "read_more_link": "",
        "language": "en",
        "title": "HTTP response status codes - HTTP",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-25T21:29:40+00:00",
        "summary": "",
        "meta_description": "HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n  Responses are grouped in five classes:",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
        "text": "200 OK\n\nThe request succeeded. The result meaning of \"success\" depends on the HTTP method:\n\nGET: The resource has been fetched and transmitted in the message body.\n\nHEAD: The representation headers are included in the response without any message body.\n\nPUT or POST: The resource describing the result of the action is transmitted in the message body.\n\nTRACE: The message body contains the request message as received by the server.\n\n201 Created\n\nThe request succeeded, and a new resource was created as a result. This is typically the response sent after POST requests, or some PUT requests.\n\n202 Accepted\n\nThe request has been received but not yet acted upon. It is noncommittal, since there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing.\n\n203 Non-Authoritative Information\n\nThis response code means the returned metadata is not exactly the same as is available from the origin server, but is collected from a local or a third-party copy. This is mostly used for mirrors or backups of another resource. Except for that specific case, the 200 OK response is preferred to this status.\n\n204 No Content\n\nThere is no content to send for this request, but the headers may be useful. The user agent may update its cached headers for this resource with the new ones.\n\n205 Reset Content\n\nTells the user agent to reset the document which sent this request.\n\n206 Partial Content\n\nThis response code is used when the Range header is sent from the client to request only part of a resource.\n\n207 Multi-Status (WebDAV)\n\nConveys information about multiple resources, for situations where multiple status codes might be appropriate.\n\n208 Already Reported (WebDAV)\n\nUsed inside a <dav:propstat> response element to avoid repeatedly enumerating the internal members of multiple bindings to the same collection.\n\n226 IM Used (HTTP Delta encoding)\n\nThe server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n\n300 Multiple Choices\n\nThe request has more than one possible response. The user agent or user should choose one of them. (There is no standardized way of choosing one of the responses, but HTML links to the possibilities are recommended so the user can pick.)\n\n301 Moved Permanently\n\nThe URL of the requested resource has been changed permanently. The new URL is given in the response.\n\n302 Found\n\nThis response code means that the URI of requested resource has been changed temporarily. Further changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.\n\n303 See Other\n\nThe server sent this response to direct the client to get the requested resource at another URI with a GET request.\n\n304 Not Modified\n\nThis is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response.\n\n305 Use Proxy Deprecated\n\nDefined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy.\n\n306 unused\n\nThis response code is no longer used; it is just reserved. It was used in a previous version of the HTTP/1.1 specification.\n\n307 Temporary Redirect\n\nThe server sends this response to direct the client to get the requested resource at another URI with the same method that was used in the prior request. This has the same semantics as the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.\n\n308 Permanent Redirect\n\nThis means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.\n\n400 Bad Request\n\nThe server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n\n401 Unauthorized\n\nAlthough the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.\n\n402 Payment Required Experimental\n\nThis response code is reserved for future use. The initial aim for creating this code was using it for digital payment systems, however this status code is used very rarely and no standard convention exists.\n\n403 Forbidden\n\nThe client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.\n\n404 Not Found\n\nThe server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.\n\n405 Method Not Allowed\n\nThe request method is known by the server but is not supported by the target resource. For example, an API may not allow calling DELETE to remove a resource.\n\n406 Not Acceptable\n\nThis response is sent when the web server, after performing server-driven content negotiation, doesn't find any content that conforms to the criteria given by the user agent.\n\n407 Proxy Authentication Required\n\nThis is similar to 401 Unauthorized but authentication is needed to be done by a proxy.\n\n408 Request Timeout\n\nThis response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.\n\n409 Conflict\n\nThis response is sent when a request conflicts with the current state of the server.\n\n410 Gone\n\nThis response is sent when the requested content has been permanently deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for \"limited-time, promotional services\". APIs should not feel compelled to indicate resources that have been deleted with this status code.\n\n411 Length Required\n\nServer rejected the request because the Content-Length header field is not defined and the server requires it.\n\n412 Precondition Failed\n\nThe client has indicated preconditions in its headers which the server does not meet.\n\n413 Payload Too Large\n\nRequest entity is larger than limits defined by server. The server might close the connection or return an Retry-After header field.\n\n414 URI Too Long\n\nThe URI requested by the client is longer than the server is willing to interpret.\n\n415 Unsupported Media Type\n\nThe media format of the requested data is not supported by the server, so the server is rejecting the request.\n\n416 Range Not Satisfiable\n\nThe range specified by the Range header field in the request cannot be fulfilled. It's possible that the range is outside the size of the target URI's data.\n\n417 Expectation Failed\n\nThis response code means the expectation indicated by the Expect request header field cannot be met by the server.\n\n418 I'm a teapot\n\nThe server refuses the attempt to brew coffee with a teapot.\n\n421 Misdirected Request\n\nThe request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI.\n\n422 Unprocessable Content (WebDAV)\n\nThe request was well-formed but was unable to be followed due to semantic errors.\n\n423 Locked (WebDAV)\n\nThe resource that is being accessed is locked.\n\n424 Failed Dependency (WebDAV)\n\nThe request failed due to failure of a previous request.\n\n425 Too Early Experimental\n\nIndicates that the server is unwilling to risk processing a request that might be replayed.\n\n426 Upgrade Required\n\nThe server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an Upgrade header in a 426 response to indicate the required protocol(s).\n\n428 Precondition Required\n\nThe origin server requires the request to be conditional. This response is intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.\n\n429 Too Many Requests\n\nThe user has sent too many requests in a given amount of time (\"rate limiting\").\n\n431 Request Header Fields Too Large\n\nThe server is unwilling to process the request because its header fields are too large. The request may be resubmitted after reducing the size of the request header fields.\n\n451 Unavailable For Legal Reasons\n\nThe user agent requested a resource that cannot legally be provided, such as a web page censored by a government."
    }
}