{
    "id": "dbpedia_365_2",
    "rank": 99,
    "data": {
        "url": "https://guides.rubyonrails.org/association_basics.html",
        "read_more_link": "",
        "language": "en",
        "title": "Active Record Associations â Ruby on Rails Guides",
        "top_image": "https://avatars.githubusercontent.com/u/4223",
        "meta_img": "https://avatars.githubusercontent.com/u/4223",
        "images": [
            "https://guides.rubyonrails.org/images/icon_book-close-bookmark-1.svg",
            "https://guides.rubyonrails.org/images/association_basics/belongs_to.png",
            "https://guides.rubyonrails.org/images/association_basics/has_one.png",
            "https://guides.rubyonrails.org/images/association_basics/has_many.png",
            "https://guides.rubyonrails.org/images/association_basics/has_many_through.png",
            "https://guides.rubyonrails.org/images/association_basics/has_one_through.png",
            "https://guides.rubyonrails.org/images/association_basics/habtm.png",
            "https://guides.rubyonrails.org/images/association_basics/polymorphic.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Active Record AssociationsThis guide covers the association features of Active Record.After reading this guide, you will know how to: Declare associations between Active Record models. Understand the various types of Active Record associations. Use the methods added to your models by creating associations.",
        "meta_lang": "en",
        "meta_favicon": "images/favicon.ico",
        "meta_site_name": "Ruby on Rails Guides",
        "canonical_link": null,
        "text": "1 Why Associations?\n\nIn Rails, an association is a connection between two Active Record models. Why do we need associations between models? Because they make common operations simpler and easier in your code.\n\nFor example, consider a simple Rails application that includes a model for authors and a model for books. Each author can have many books.\n\nWithout associations, the model declarations would look like this:\n\nNow, suppose we wanted to add a new book for an existing author. We'd need to do something like this:\n\nOr consider deleting an author, and ensuring that all of its books get deleted as well:\n\nWith Active Record associations, we can streamline these - and other - operations by declaratively telling Rails that there is a connection between the two models. Here's the revised code for setting up authors and books:\n\nWith this change, creating a new book for a particular author is easier:\n\nDeleting an author and all of its books is much easier:\n\nTo learn more about the different types of associations, read the next section of this guide. That's followed by some tips and tricks for working with associations, and then by a complete reference to the methods and options for associations in Rails.\n\n2 The Types of Associations\n\nRails supports six types of associations, each with a particular use-case in mind.\n\nHere is a list of all of the supported types with a link to their API docs for more detailed information on how to use them, their method parameters, etc.\n\nbelongs_to\n\nhas_one\n\nhas_many\n\nhas_many :through\n\nhas_one :through\n\nhas_and_belongs_to_many\n\nAssociations are implemented using macro-style calls, so that you can declaratively add features to your models. For example, by declaring that one model belongs_to another, you instruct Rails to maintain Primary Key-Foreign Key information between instances of the two models, and you also get a number of utility methods added to your model.\n\nIn the remainder of this guide, you'll learn how to declare and use the various forms of associations. But first, a quick introduction to the situations where each association type is appropriate.\n\n2.1 The belongs_to Association\n\nA belongs_to association sets up a connection with another model, such that each instance of the declaring model \"belongs to\" one instance of the other model. For example, if your application includes authors and books, and each book can be assigned to exactly one author, you'd declare the book model this way:\n\nThe corresponding migration might look like this:\n\nWhen used alone, belongs_to produces a one-directional one-to-one connection. Therefore each book in the above example \"knows\" its author, but the authors don't know about their books. To setup a bi-directional association - use belongs_to in combination with a has_one or has_many on the other model, in this case the Author model.\n\nbelongs_to does not ensure reference consistency if optional is set to true, so depending on the use case, you might also need to add a database-level foreign key constraint on the reference column, like this:\n\n2.2 The has_one Association\n\nA has_one association indicates that one other model has a reference to this model. That model can be fetched through this association.\n\nFor example, if each supplier in your application has only one account, you'd declare the supplier model like this:\n\nThe main difference from belongs_to is that the link column supplier_id is located in the other table:\n\nThe corresponding migration might look like this:\n\nDepending on the use case, you might also need to create a unique index and/or a foreign key constraint on the supplier column for the accounts table. In this case, the column definition might look like this:\n\nThis relation can be bi-directional when used in combination with belongs_to on the other model.\n\n2.3 The has_many Association\n\nA has_many association is similar to has_one, but indicates a one-to-many connection with another model. You'll often find this association on the \"other side\" of a belongs_to association. This association indicates that each instance of the model has zero or more instances of another model. For example, in an application containing authors and books, the author model could be declared like this:\n\nThe corresponding migration might look like this:\n\nDepending on the use case, it's usually a good idea to create a non-unique index and optionally a foreign key constraint on the author column for the books table:\n\n2.4 The has_many :through Association\n\nA has_many :through association is often used to set up a many-to-many connection with another model. This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model. For example, consider a medical practice where patients make appointments to see physicians. The relevant association declarations could look like this:\n\nThe corresponding migration might look like this:\n\nThe collection of join models can be managed via the has_many association methods. For example, if you assign:\n\nThen new join models are automatically created for the newly associated objects. If some that existed previously are now missing, then their join rows are automatically deleted.\n\nAutomatic deletion of join models is direct, no destroy callbacks are triggered.\n\nThe has_many :through association is also useful for setting up \"shortcuts\" through nested has_many associations. For example, if a document has many sections, and a section has many paragraphs, you may sometimes want to get a simple collection of all paragraphs in the document. You could set that up this way:\n\nWith through: :sections specified, Rails will now understand:\n\n2.5 The has_one :through Association\n\nA has_one :through association sets up a one-to-one connection with another model. This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model. For example, if each supplier has one account, and each account is associated with one account history, then the supplier model could look like this:\n\nThe corresponding migration might look like this:\n\n2.6 The has_and_belongs_to_many Association\n\nA has_and_belongs_to_many association creates a direct many-to-many connection with another model, with no intervening model. This association indicates that each instance of the declaring model refers to zero or more instances of another model. For example, if your application includes assemblies and parts, with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:\n\nThe corresponding migration might look like this:\n\n2.7 Choosing Between belongs_to and has_one\n\nIf you want to set up a one-to-one relationship between two models, you'll need to add belongs_to to one, and has_one to the other. How do you know which is which?\n\nThe distinction is in where you place the foreign key (it goes on the table for the class declaring the belongs_to association), but you should give some thought to the actual meaning of the data as well. The has_one relationship says that one of something is yours - that is, that something points back to you. For example, it makes more sense to say that a supplier owns an account than that an account owns a supplier. This suggests that the correct relationships are like this:\n\nThe corresponding migration might look like this:\n\n2.8 Choosing Between has_many :through and has_and_belongs_to_many\n\nRails offers two different ways to declare a many-to-many relationship between models. The first way is to use has_and_belongs_to_many, which allows you to make the association directly:\n\nThe second way to declare a many-to-many relationship is to use has_many :through. This makes the association indirectly, through a join model:\n\nThe simplest rule of thumb is that you should set up a has_many :through relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a has_and_belongs_to_many relationship (though you'll need to remember to create the joining table in the database).\n\nYou should use has_many :through if you need validations, callbacks, or extra attributes on the join model.\n\nWhile has_and_belongs_to_many suggests creating a join table with no primary key via id: false, consider using a composite primary key for the join table in the has_many :through relationship. For example, it's recommended to use create_table :manifests, primary_key: [:assembly_id, :part_id] in the example above.\n\n2.9 Polymorphic Associations\n\nA slightly more advanced twist on associations is the polymorphic association. With polymorphic associations, a model can belong to more than one other model, on a single association. For example, you might have a picture model that belongs to either an employee model or a product model. Here's how this could be declared:\n\nYou can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use. From an instance of the Employee model, you can retrieve a collection of pictures: @employee.pictures.\n\nSimilarly, you can retrieve @product.pictures.\n\nIf you have an instance of the Picture model, you can get to its parent via @picture.imageable. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:\n\nThis migration can be simplified by using the t.references form:\n\nSince polymorphic associations rely on storing class names in the database, that data must remain synchronized with the class name used by the Ruby code. When renaming a class, make sure to update the data in the polymorphic type column.\n\n2.10 Associations between Models with Composite Primary Keys\n\nRails is often able to infer the primary key - foreign key information between associated models with composite primary keys without needing extra information. Take the following example:\n\nHere, Rails assumes that the :id column should be used as the primary key for the association between an order and its books, just as with a regular has_many / belongs_to association. It will infer that the foreign key column on the books table is :order_id. Accessing a book's order:\n\nwill generate the following SQL to access the order:\n\nThis only works if the model's composite primary key contains the :id column, and the column is unique for all records. In order to use the full composite primary key in associations, set the foreign_key: option on the association. This option specifies a composite foreign key on the association: all columns in the foreign key will be used when querying the associated record(s). For example:\n\nAccessing a book's author:\n\nwill use :first_name and :last_name in the SQL query:\n\n2.11 Self Joins\n\nIn designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:\n\nWith this setup, you can retrieve @employee.subordinates and @employee.manager.\n\nIn your migrations/schema, you will add a references column to the model itself.\n\n3 Tips, Tricks, and Warnings\n\nHere are a few things you should know to make efficient use of Active Record associations in your Rails applications:\n\nControlling caching\n\nAvoiding name collisions\n\nUpdating the schema\n\nControlling association scope\n\nBi-directional associations\n\n3.1 Controlling Caching\n\nAll of the association methods are built around caching, which keeps the result of the most recent query available for further operations. The cache is even shared across methods. For example:\n\nBut what if you want to reload the cache, because data might have been changed by some other part of the application? Just call reload on the association:\n\n3.2 Avoiding Name Collisions\n\nYou are not free to use just any name for your associations. Because creating an association adds a method with that name to the model, it is a bad idea to give an association a name that is already used for an instance method of ActiveRecord::Base. The association method would override the base method and break things. For instance, attributes or connection are bad names for associations.\n\n3.3 Updating the Schema\n\nAssociations are extremely useful, but they are not magic. You are responsible for maintaining your database schema to match your associations. In practice, this means two things, depending on what sort of associations you are creating. For belongs_to associations you need to create foreign keys, and for has_and_belongs_to_many associations you need to create the appropriate join table.\n\n3.3.1 Creating Foreign Keys for belongs_to Associations\n\nWhen you declare a belongs_to association, you need to create foreign keys as appropriate. For example, consider this model:\n\nThis declaration needs to be backed up by a corresponding foreign key column in the books table. For a brand new table, the migration might look something like this:\n\nWhereas for an existing table, it might look like this:\n\n3.3.2 Creating Join Tables for has_and_belongs_to_many Associations\n\nIf you create a has_and_belongs_to_many association, you need to explicitly create the joining table. Unless the name of the join table is explicitly specified by using the :join_table option, Active Record creates the name by using the lexical order of the class names. So a join between author and book models will give the default join table name of \"authors_books\" because \"a\" outranks \"b\" in lexical ordering.\n\nWhatever the name, you must manually generate the join table with an appropriate migration. For example, consider these associations:\n\nThese need to be backed up by a migration to create the assemblies_parts table. This table should be created without a primary key:\n\nWe pass id: false to create_table because that table does not represent a model. That's required for the association to work properly. If you observe any strange behavior in a has_and_belongs_to_many association like mangled model IDs, or exceptions about conflicting IDs, chances are you forgot that bit.\n\nFor simplicity, you can also use the method create_join_table:\n\n3.4 Controlling Association Scope\n\nBy default, associations look for objects only within the current module's scope. This can be important when you declare Active Record models within a module. For example:\n\nThis will work fine, because both the Supplier and the Account class are defined within the same scope (MyApplication::Business). This organization allows structuring models into folders based on their scope, without having to explicitly add the scope to every association:\n\nIt is crucial to note that this does not affect the naming of your tables. For instance, if there is a MyApplication::Business::Supplier model, there must also be a my_application_business_suppliers table.\n\nNote that the following will not work, because Supplier and Account are defined in different scopes (MyApplication::Business and MyApplication::Billing):\n\nTo associate a model with a model in a different namespace, you must specify the complete class name in your association declaration:\n\n3.5 Bi-directional Associations\n\nIt's normal for associations to work in two directions, requiring declaration on two different models:\n\nActive Record will attempt to automatically identify that these two models share a bi-directional association based on the association name. This information allows Active Record to:\n\nPrevent needless queries for already-loaded data:\n\nirb>author = Author.first irb>author.books.all? do |book| irb>book.author.equal?(author) # No additional queries executed here irb>end => true\n\nPrevent inconsistent data (since there is only one copy of the Author object loaded):\n\nirb>author = Author.first irb>book = author.books.first irb>author.name == book.author.name => true irb>author.name = \"Changed Name\" irb>author.name == book.author.name => true\n\nAutosave associations in more cases:\n\nirb>author = Author.new irb>book = author.books.new irb>book.save! irb>book.persisted? => true irb>author.persisted? => true\n\nValidate the presence and absence of associations in more cases:\n\nirb>book = Book.new irb>book.valid? => false irb>book.errors.full_messages => [\"Author must exist\"] irb>author = Author.new irb>book = author.books.new irb>book.valid? => true\n\nActive Record supports automatic identification for most associations with standard names. However, bi-directional associations that contain the :through or :foreign_key options will not be automatically identified.\n\nCustom scopes on the opposite association also prevent automatic identification, as do custom scopes on the association itself unless config.active_record.automatic_scope_inversing is set to true (the default for new applications).\n\nFor example, consider the following model declarations:\n\nBecause of the :foreign_key option, Active Record will no longer automatically recognize the bi-directional association. This can cause your application to:\n\nExecute needless queries for the same data (in this example causing N+1 queries):\n\nirb>author = Author.first irb>author.books.any? do |book| irb>book.writer.equal?(author) # This executes an author query for every book irb>end => false\n\nReference multiple copies of a model with inconsistent data:\n\nirb>author = Author.first irb>book = author.books.first irb>author.name == book.writer.name => true irb>author.name = \"Changed Name\" irb>author.name == book.writer.name => false\n\nFail to autosave associations:\n\nirb>author = Author.new irb>book = author.books.new irb>book.save! irb>book.persisted? => true irb>author.persisted? => false\n\nFail to validate presence or absence:\n\nirb>author = Author.new irb>book = author.books.new irb>book.valid? => false irb>book.errors.full_messages => [\"Author must exist\"]\n\nActive Record provides the :inverse_of option so you can explicitly declare bi-directional associations:\n\nBy including the :inverse_of option in the has_many association declaration, Active Record will now recognize the bi-directional association and behave as in the initial examples above.\n\n4 Detailed Association Reference\n\nThe following sections give the details of each type of association, including the methods that they add and the options that you can use when declaring an association.\n\n4.1 belongs_to Association Reference\n\nIn database terms, the belongs_to association says that this model's table contains a column which represents a reference to another table. This can be used to set up one-to-one or one-to-many relations, depending on the setup. If the table of the other class contains the reference in a one-to-one relation, then you should use has_one instead.\n\n4.1.1 Methods Added by belongs_to\n\nWhen you declare a belongs_to association, the declaring class automatically gains 8 methods related to the association:\n\nassociation\n\nassociation=(associate)\n\nbuild_association(attributes = {})\n\ncreate_association(attributes = {})\n\ncreate_association!(attributes = {})\n\nreload_association\n\nreset_association\n\nassociation_changed?\n\nassociation_previously_changed?\n\nIn all of these methods, association is replaced with the symbol passed as the first argument to belongs_to. For example, given the declaration:\n\nEach instance of the Book model will have these methods:\n\nauthor\n\nauthor=\n\nbuild_author\n\ncreate_author\n\ncreate_author!\n\nreload_author\n\nreset_author\n\nauthor_changed?\n\nauthor_previously_changed?\n\n4.1.1.1 association\n\nThe association method returns the associated object, if any. If no associated object is found, it returns nil.\n\nIf the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), call #reload_association on the parent object.\n\nTo unload the cached version of the associated objectâcausing the next access, if any, to query it from the databaseâcall #reset_association on the parent object.\n\n4.1.1.2 association=(associate)\n\nThe association= method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from the associated object and setting this object's foreign key to the same value.\n\n4.1.1.3 build_association(attributes = {})\n\nThe build_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object's foreign key will be set, but the associated object will not yet be saved.\n\n4.1.1.4 create_association(attributes = {})\n\nThe create_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through this object's foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\n4.1.1.5 create_association!(attributes = {})\n\nDoes the same as create_association above, but raises ActiveRecord::RecordInvalid if the record is invalid.\n\n4.1.1.6 association_changed?\n\nThe association_changed? method returns true if a new associated object has been assigned and the foreign key will be updated in the next save.\n\n4.1.1.7 association_previously_changed?\n\nThe association_previously_changed? method returns true if the previous save updated the association to reference a new associate object.\n\n4.1.2 Options for belongs_to\n\nWhile Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the belongs_to association reference. Such customizations can easily be accomplished by passing options and scope blocks when you create the association. For example, this association uses two such options:\n\nThe belongs_to association supports these options:\n\n:autosave\n\n:class_name\n\n:counter_cache\n\n:default\n\n:dependent\n\n:ensuring_owner_was\n\n:foreign_key\n\n:foreign_type\n\n:primary_key\n\n:inverse_of\n\n:optional\n\n:polymorphic\n\n:required\n\n:strict_loading\n\n:touch\n\n:validate\n\n4.1.2.1 :autosave\n\nIf you set the :autosave option to true, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting :autosave to false is not the same as not setting the :autosave option. If the :autosave option is not present, then new associated objects will be saved, but updated associated objects will not be saved.\n\n4.1.2.2 :class_name\n\nIf the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if a book belongs to an author, but the actual name of the model containing authors is Patron, you'd set things up this way:\n\n4.1.2.3 :counter_cache\n\nThe :counter_cache option can be used to make finding the number of belonging objects more efficient. Consider these models:\n\nWith these declarations, asking for the value of @author.books.size requires making a call to the database to perform a COUNT(*) query. To avoid this call, you can add a counter cache to the belonging model:\n\nWith this declaration, Rails will keep the cache value up to date, and then return that value in response to the size method.\n\nAlthough the :counter_cache option is specified on the model that includes the belongs_to declaration, the actual column must be added to the associated (has_many) model. In the case above, you would need to add a column named books_count to the Author model.\n\nYou can override the default column name by specifying a custom column name in the counter_cache declaration instead of true. For example, to use count_of_books instead of books_count:\n\nStarting to use counter caches on existing large tables can be troublesome, because the column values must be backfilled separately of the column addition (to not lock the table for too long) and before the use of :counter_cache (otherwise methods like size/any?/etc, which use counter caches internally, can produce incorrect results). To safely backfill the values while keeping counter cache columns updated with the child records creation/removal and to avoid the mentioned methods use the possibly incorrect counter cache column values and always get the results from the database, use counter_cache: { active: false }. If you also need to specify a custom column name, use counter_cache: { active: false, column: :my_custom_counter }.\n\nIf for some reason you change the value of an owner model's primary key, and do not also update the foreign keys of the counted models, then the counter cache may have stale data. In other words, any orphaned models will still count towards the counter. To fix a stale counter cache, use reset_counters.\n\n4.1.2.4 :default\n\nWhen set to true, the association will not have its presence validated.\n\n4.1.2.5 :dependent\n\nIf you set the :dependent option to:\n\n:destroy, when the object is destroyed, destroy will be called on its associated objects.\n\n:delete, when the object is destroyed, all its associated objects will be deleted directly from the database without calling their destroy method.\n\n:destroy_async: when the object is destroyed, an ActiveRecord::DestroyAssociationAsyncJob job is enqueued which will call destroy on its associated objects. Active Job must be set up for this to work. Do not use this option if the association is backed by foreign key constraints in your database. The foreign key constraint actions will occur inside the same transaction that deletes its owner.\n\n4.1.2.6 :ensuring_owner_was\n\nSpecifies an instance method to be called on the owner. The method must return true in order for the associated records to be deleted in a background job.\n\n4.1.2.7 :foreign_key\n\nBy convention, Rails assumes that the column used to hold the foreign key on this model is the name of the association with the suffix _id added. The :foreign_key option lets you set the name of the foreign key directly:\n\nIn any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.\n\n4.1.2.8 :foreign_type\n\nSpecify the column used to store the associated objectâs type, if this is a polymorphic association. By default this is guessed to be the name of the association with a â_typeâ suffix. So a class that defines a belongs_to :taggable, polymorphic: true association will use âtaggable_typeâ as the default :foreign_type.\n\n4.1.2.9 :primary_key\n\nBy convention, Rails assumes that the id column is used to hold the primary key of its tables. The :primary_key option allows you to specify a different column.\n\nFor example, given we have a users table with guid as the primary key. If we want a separate todos table to hold the foreign key user_id in the guid column, then we can use primary_key to achieve this like so:\n\nWhen we execute @user.todos.create then the @todo record will have its user_id value as the guid value of @user.\n\n4.1.2.10 :inverse_of\n\nThe :inverse_of option specifies the name of the has_many or has_one association that is the inverse of this association. See the bi-directional association section for more details.\n\n4.1.2.11 :optional\n\nIf you set the :optional option to true, then the presence of the associated object won't be validated. By default, this option is set to false.\n\n4.1.2.12 :polymorphic\n\nPassing true to the :polymorphic option indicates that this is a polymorphic association. Polymorphic associations were discussed in detail earlier in this guide.\n\n4.1.2.13 :required\n\nWhen set to true, the association will also have its presence validated. This will validate the association itself, not the id. You can use :inverse_of to avoid an extra query during validation.\n\n4.1.2.14 :strict_loading\n\nEnforces strict loading every time the associated record is loaded through this association.\n\n4.1.2.15 :touch\n\nIf you set the :touch option to true, then the updated_at or updated_on timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:\n\nIn this case, saving or destroying a book will update the timestamp on the associated author. You can also specify a particular timestamp attribute to update:\n\nIf you set the :validate option to true, then new associated objects will be validated whenever you save this object. By default, this is false: new associated objects will not be validated when this object is saved.\n\n4.1.3 Scopes for belongs_to\n\nThere may be times when you wish to customize the query used by belongs_to. Such customizations can be achieved via a scope block. For example:\n\nYou can use any of the standard querying methods inside the scope block. The following ones are discussed below:\n\nwhere\n\nincludes\n\nreadonly\n\nselect\n\n4.1.3.1 where\n\nThe where method lets you specify the conditions that the associated object must meet.\n\n4.1.3.2 includes\n\nYou can use the includes method to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:\n\nIf you frequently retrieve authors directly from chapters (@chapter.book.author), then you can make your code somewhat more efficient by including authors in the association from chapters to books:\n\n4.1.3.3 readonly\n\nIf you use readonly, then the associated object will be read-only when retrieved via the association.\n\n4.1.3.4 select\n\nThe select method lets you override the SQL SELECT clause that is used to retrieve data about the associated object. By default, Rails retrieves all columns.\n\n4.1.4 Do Any Associated Objects Exist?\n\nYou can see if any associated objects exist by using the association.nil? method:\n\n4.1.5 When are Objects Saved?\n\nAssigning an object to a belongs_to association does not automatically save the object. It does not save the associated object either.\n\n4.2 has_one Association Reference\n\nThe has_one association creates a one-to-one match with another model. In database terms, this association says that the other class contains the foreign key. If this class contains the foreign key, then you should use belongs_to instead.\n\n4.2.1 Methods Added by has_one\n\nWhen you declare a has_one association, the declaring class automatically gains 6 methods related to the association:\n\nassociation\n\nassociation=(associate)\n\nbuild_association(attributes = {})\n\ncreate_association(attributes = {})\n\ncreate_association!(attributes = {})\n\nreload_association\n\nreset_association\n\nIn all of these methods, association is replaced with the symbol passed as the first argument to has_one. For example, given the declaration:\n\nEach instance of the Supplier model will have these methods:\n\naccount\n\naccount=\n\nbuild_account\n\ncreate_account\n\ncreate_account!\n\nreload_account\n\nreset_account\n\n4.2.1.1 association\n\nThe association method returns the associated object, if any. If no associated object is found, it returns nil.\n\nIf the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), call #reload_association on the parent object.\n\nTo unload the cached version of the associated objectâforcing the next access, if any, to query it from the databaseâcall #reset_association on the parent object.\n\n4.2.1.2 association=(associate)\n\nThe association= method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from this object and setting the associated object's foreign key to the same value.\n\n4.2.1.3 build_association(attributes = {})\n\nThe build_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through its foreign key will be set, but the associated object will not yet be saved.\n\n4.2.1.4 create_association(attributes = {})\n\nThe create_association method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through its foreign key will be set, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\n4.2.1.5 create_association!(attributes = {})\n\nDoes the same as create_association above, but raises ActiveRecord::RecordInvalid if the record is invalid.\n\n4.2.2 Options for has_one\n\nWhile Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the has_one association reference. Such customizations can easily be accomplished by passing options when you create the association. For example, this association uses two such options:\n\nThe has_one association supports these options:\n\n:as\n\n:autosave\n\n:class_name\n\n:dependent\n\n:disable_joins\n\n:ensuring_owner_was\n\n:foreign_key\n\n:inverse_of\n\n:primary_key\n\n:query_constraints\n\n:required\n\n:source\n\n:source_type\n\n:strict_loading\n\n:through\n\n:touch\n\n:validate\n\n4.2.2.1 :as\n\nSetting the :as option indicates that this is a polymorphic association. Polymorphic associations were discussed in detail earlier in this guide.\n\n4.2.2.2 :autosave\n\nIf you set the :autosave option to true, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting :autosave to false is not the same as not setting the :autosave option. If the :autosave option is not present, then new associated objects will be saved, but updated associated objects will not be saved.\n\n4.2.2.3 :class_name\n\nIf the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if a supplier has an account, but the actual name of the model containing accounts is Billing, you'd set things up this way:\n\n4.2.2.4 :dependent\n\nControls what happens to the associated object when its owner is destroyed:\n\n:destroy causes the associated object to also be destroyed\n\n:delete causes the associated object to be deleted directly from the database (so callbacks will not execute)\n\n:destroy_async: when the object is destroyed, an ActiveRecord::DestroyAssociationAsyncJob job is enqueued which will call destroy on its associated objects. Active Job must be set up for this to work. Do not use this option if the association is backed by foreign key constraints in your database. The foreign key constraint actions will occur inside the same transaction that deletes its owner.\n\n:nullify causes the foreign key to be set to NULL. Polymorphic type column is also nullified on polymorphic associations. Callbacks are not executed.\n\n:restrict_with_exception causes an ActiveRecord::DeleteRestrictionError exception to be raised if there is an associated record\n\n:restrict_with_error causes an error to be added to the owner if there is an associated object\n\nIt's necessary not to set or leave :nullify option for those associations that have NOT NULL database constraints. If you don't set dependent to destroy such associations you won't be able to change the associated object because the initial associated object's foreign key will be set to the unallowed NULL value.\n\n4.2.2.5 :disable_joins\n\nSpecifies whether joins should be skipped for an association. If set to true, two or more queries will be generated. Note that in some cases, if order or limit is applied, it will be done in-memory due to database limitations. This option is only applicable on has_one :through associations as has_one alone does not perform a join.\n\n4.2.2.6 :foreign_key\n\nBy convention, Rails assumes that the column used to hold the foreign key on the other model is the name of this model with the suffix _id added. The :foreign_key option lets you set the name of the foreign key directly:\n\nIn any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.\n\n4.2.2.7 :inverse_of\n\nThe :inverse_of option specifies the name of the belongs_to association that is the inverse of this association. See the bi-directional association section for more details.\n\n4.2.2.8 :primary_key\n\nBy convention, Rails assumes that the column used to hold the primary key of this model is id. You can override this and explicitly specify the primary key with the :primary_key option.\n\n4.2.2.9 :query_constraints\n\nServes as a composite foreign key. Defines the list of columns to be used to query the associated object. This is an optional option. By default Rails will attempt to derive the value automatically. When the value is set the Array size must match associated modelâs primary key or query_constraints size.\n\n4.2.2.10 :required\n\nWhen set to true, the association will also have its presence validated. This will validate the association itself, not the id. You can use :inverse_of to avoid an extra query during validation.\n\n4.2.2.11 :source\n\nThe :source option specifies the source association name for a has_one :through association.\n\n4.2.2.12 :source_type\n\nThe :source_type option specifies the source association type for a has_one :through association that proceeds through a polymorphic association.\n\n4.2.2.13 :strict_loading\n\nEnforces strict loading every time the associated record is loaded through this association.\n\n4.2.2.14 :through\n\nThe :through option specifies a join model through which to perform the query. has_one :through associations were discussed in detail earlier in this guide.\n\n4.2.2.15 :touch\n\nIf you set the :touch option to true, then the updated_at or updated_on timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:\n\nIn this case, saving or destroying a supplier will update the timestamp on the associated account. You can also specify a particular timestamp attribute to update:\n\nIf you set the :validate option to true, then new associated objects will be validated whenever you save this object. By default, this is false: new associated objects will not be validated when this object is saved.\n\n4.2.3 Scopes for has_one\n\nThere may be times when you wish to customize the query used by has_one. Such customizations can be achieved via a scope block. For example:\n\nYou can use any of the standard querying methods inside the scope block. The following ones are discussed below:\n\nwhere\n\nincludes\n\nreadonly\n\nselect\n\n4.2.3.1 where\n\nThe where method lets you specify the conditions that the associated object must meet.\n\n4.2.3.2 includes\n\nYou can use the includes method to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:\n\nIf you frequently retrieve representatives directly from suppliers (@supplier.account.representative), then you can make your code somewhat more efficient by including representatives in the association from suppliers to accounts:\n\n4.2.3.3 readonly\n\nIf you use the readonly method, then the associated object will be read-only when retrieved via the association.\n\n4.2.3.4 select\n\nThe select method lets you override the SQL SELECT clause that is used to retrieve data about the associated object. By default, Rails retrieves all columns.\n\n4.2.4 Do Any Associated Objects Exist?\n\nYou can see if any associated objects exist by using the association.nil? method:\n\n4.2.5 When are Objects Saved?\n\nWhen you assign an object to a has_one association, that object is automatically saved (in order to update its foreign key). In addition, any object being replaced is also automatically saved, because its foreign key will change too.\n\nIf either of these saves fails due to validation errors, then the assignment statement returns false and the assignment itself is cancelled.\n\nIf the parent object (the one declaring the has_one association) is unsaved (that is, new_record? returns true) then the child objects are not saved. They will automatically when the parent object is saved.\n\nIf you want to assign an object to a has_one association without saving the object, use the build_association method.\n\n4.3 has_many Association Reference\n\nThe has_many association creates a one-to-many relationship with another model. In database terms, this association says that the other class will have a foreign key that refers to instances of this class.\n\n4.3.1 Methods Added by has_many\n\nWhen you declare a has_many association, the declaring class automatically gains 17 methods related to the association:\n\ncollection\n\ncollection<<(object, ...)\n\ncollection.delete(object, ...)\n\ncollection.destroy(object, ...)\n\ncollection=(objects)\n\ncollection_singular_ids\n\ncollection_singular_ids=(ids)\n\ncollection.clear\n\ncollection.empty?\n\ncollection.size\n\ncollection.find(...)\n\ncollection.where(...)\n\ncollection.exists?(...)\n\ncollection.build(attributes = {})\n\ncollection.create(attributes = {})\n\ncollection.create!(attributes = {})\n\ncollection.reload\n\nIn all of these methods, collection is replaced with the symbol passed as the first argument to has_many, and collection_singular is replaced with the singularized version of that symbol. For example, given the declaration:\n\nEach instance of the Author model will have these methods:\n\n4.3.1.1 collection\n\nThe collection method returns a Relation of all of the associated objects. If there are no associated objects, it returns an empty Relation.\n\n4.3.1.2 collection<<(object, ...)\n\nThe collection<< method adds one or more objects to the collection by setting their foreign keys to the primary key of the calling model.\n\n4.3.1.3 collection.delete(object, ...)\n\nThe collection.delete method removes one or more objects from the collection by setting their foreign keys to NULL.\n\n4.3.1.4 collection.destroy(object, ...)\n\nThe collection.destroy method removes one or more objects from the collection by running destroy on each object.\n\n4.3.1.5 collection=(objects)\n\nThe collection= method makes the collection contain only the supplied objects, by adding and deleting as appropriate. The changes are persisted to the database.\n\n4.3.1.6 collection_singular_ids\n\nThe collection_singular_ids method returns an array of the ids of the objects in the collection.\n\n4.3.1.7 collection_singular_ids=(ids)\n\nThe collection_singular_ids= method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate. The changes are persisted to the database.\n\n4.3.1.8 collection.clear\n\nThe collection.clear method removes all objects from the collection according to the strategy specified by the dependent option. If no option is given, it follows the default strategy. The default strategy for has_many :through associations is delete_all, and for has_many associations is to set the foreign keys to NULL.\n\n4.3.1.9 collection.empty?\n\nThe collection.empty? method returns true if the collection does not contain any associated objects.\n\n4.3.1.10 collection.size\n\nThe collection.size method returns the number of objects in the collection.\n\n4.3.1.11 collection.find(...)\n\nThe collection.find method finds objects within the collection's table.\n\n4.3.1.12 collection.where(...)\n\nThe collection.where method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.\n\n4.3.1.13 collection.exists?(...)\n\nThe collection.exists? method checks whether an object meeting the supplied conditions exists in the collection's table.\n\n4.3.1.14 collection.build(attributes = {})\n\nThe collection.build method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, and the link through their foreign key will be created, but the associated objects will not yet be saved.\n\n4.3.1.15 collection.create(attributes = {})\n\nThe collection.create method returns a single or array of new objects of the associated type. The object(s) will be instantiated from the passed attributes, the link through its foreign key will be created, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\n4.3.1.16 collection.create!(attributes = {})\n\nDoes the same as collection.create above, but raises ActiveRecord::RecordInvalid if the record is invalid.\n\n4.3.1.17 collection.reload\n\nThe collection.reload method returns a Relation of all of the associated objects, forcing a database read. If there are no associated objects, it returns an empty Relation.\n\n4.3.2 Options for has_many\n\nWhile Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the has_many association reference. Such customizations can easily be accomplished by passing options when you create the association. For example, this association uses two such options:\n\nThe has_many association supports these options:\n\n:as\n\n:autosave\n\n:class_name\n\n:counter_cache\n\n:dependent\n\n:disable_joins\n\n:ensuring_owner_was\n\n:extend\n\n:foreign_key\n\n:foreign_type\n\n:inverse_of\n\n:primary_key\n\n:query_constraints\n\n:source\n\n:source_type\n\n:strict_loading\n\n:through\n\n:validate\n\n4.3.2.1 :as\n\nSetting the :as option indicates that this is a polymorphic association, as discussed earlier in this guide.\n\n4.3.2.2 :autosave\n\nIf you set the :autosave option to true, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting :autosave to false is not the same as not setting the :autosave option. If the :autosave option is not present, then new associated objects will be saved, but updated associated objects will not be saved.\n\n4.3.2.3 :class_name\n\nIf the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if an author has many books, but the actual name of the model containing books is Transaction, you'd set things up this way:\n\n4.3.2.4 :counter_cache\n\nThis option can be used to configure a custom named :counter_cache. You only need this option when you customized the name of your :counter_cache on the belongs_to association.\n\n4.3.2.5 :dependent\n\nControls what happens to the associated objects when their owner is destroyed:\n\n:destroy causes all the associated objects to also be destroyed\n\n:delete_all causes all the associated objects to be deleted directly from the database (so callbacks will not execute)\n\n:destroy_async: when the object is destroyed, an ActiveRecord::DestroyAssociationAsyncJob job is enqueued which will call destroy on its associated objects. Active Job must be set up for this to work.\n\n:nullify causes the foreign key to be set to NULL. Polymorphic type column is also nullified on polymorphic associations. Callbacks are not executed.\n\n:restrict_with_exception causes an ActiveRecord::DeleteRestrictionError exception to be raised if there are any associated records\n\n:restrict_with_error causes an error to be added to the owner if there are any associated objects\n\nThe :destroy and :delete_all options also affect the semantics of the collection.delete and collection= methods by causing them to destroy associated objects when they are removed from the collection.\n\n4.3.2.6 :disable_joins\n\nSpecifies whether joins should be skipped for an association. If set to true, two or more queries will be generated. Note that in some cases, if order or limit is applied, it will be done in-memory due to database limitations. This option is only applicable on has_many :through associations as has_many alone do not perform a join.\n\n4.3.2.7 :ensuring_owner_was\n\nSpecifies an instance method to be called on the owner. The method must return true in order for the associated records to be deleted in a background job.\n\n4.3.2.8 :extend\n\nSpecifies a module or array of modules that will be extended into the association object returned. Useful for defining methods on associations, especially when they should be shared between multiple association objects.\n\n4.3.2.9 :foreign_key\n\nBy convention, Rails assumes that the column used to hold the foreign key on the other model is the name of this model with the suffix _id added. The :foreign_key option lets you set the name of the foreign key directly:\n\nIn any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.\n\n4.3.2.10 :foreign_type\n\nSpecify the column used to store the associated objectâs type, if this is a polymorphic association. By default this is guessed to be the name of the polymorphic association specified on âasâ option with a â_typeâ suffix. So a class that defines a has_many :tags, as: :taggable association will use âtaggable_typeâ as the default :foreign_type.\n\n4.3.2.11 :inverse_of\n\nThe :inverse_of option specifies the name of the belongs_to association that is the inverse of this association. See the bi-directional association section for more details.\n\n4.3.2.12 :primary_key\n\nBy convention, Rails assumes that the column used to hold the primary key of the association is id. You can override this and explicitly specify the primary key with the :primary_key option.\n\nLet's say the users table has id as the primary_key but it also has a guid column. The requirement is that the todos table should hold the guid column value as the foreign key and not id value. This can be achieved like this:\n\nNow if we execute @todo = @user.todos.create then the @todo record's user_id value will be the guid value of @user.\n\n4.3.2.13 :query_constraints\n\nServes as a composite foreign key. Defines the list of columns to be used to query the associated object. This is an optional option. By default Rails will attempt to derive the value automatically. When the value is set the Array size must match associated modelâs primary key or query_constraints size.\n\n4.3.2.14 :source\n\nThe :source option specifies the source association name for a has_many :through association. You only need to use this option if the name of the source association cannot be automatically inferred from the association name.\n\n4.3.2.15 :source_type\n\nThe :source_type option specifies the source association type for a has_many :through association that proceeds through a polymorphic association.\n\n4.3.2.16 :strict_loading\n\nWhen set to true, enforces strict loading every time the associated record is loaded through this association.\n\n4.3.2.17 :through\n\nThe :through option specifies a join model through which to perform the query. has_many :through associations provide a way to implement many-to-many relationships, as discussed earlier in this guide.\n\nIf you set the :validate option to false, then new associated objects will not be validated whenever you save this object. By default, this is true: new associated objects will be validated when this object is saved.\n\n4.3.3 Scopes for has_many\n\nThere may be times when you wish to customize the query used by has_many. Such customizations can be achieved via a scope block. For example:\n\nYou can use any of the standard querying methods inside the scope block. The following ones are discussed below:\n\nwhere\n\nextending\n\ngroup\n\nincludes\n\nlimit\n\noffset\n\norder\n\nreadonly\n\nselect\n\ndistinct\n\n4.3.3.1 where\n\nThe where method lets you specify the conditions that the associated object must meet.\n\nYou can also set conditions via a hash:\n\nIf you use a hash-style where option, then record creation via this association will be automatically scoped using the hash. In this case, using @author.confirmed_books.create or @author.confirmed_books.build will create books where the confirmed column has the value true.\n\n4.3.3.2 extending\n\nThe extending method specifies a named module to extend the association proxy. Association extensions are discussed in detail later in this guide.\n\n4.3.3.3 group\n\nThe group method supplies an attribute name to group the result set by, using a GROUP BY clause in the finder SQL.\n\n4.3.3.4 includes\n\nYou can use the includes method to specify second-order associations that should be eager-loaded when this association is used. For example, consider these models:\n\nIf you frequently retrieve chapters directly from authors (@author.books.chapters), then you can make your code somewhat more efficient by including chapters in the association from authors to books:\n\n4.3.3.5 limit\n\nThe limit method lets you restrict the total number of objects that will be fetched through an association.\n\n4.3.3.6 offset\n\nThe offset method lets you specify the starting offset for fetching objects via an association. For example, -> { offset(11) } will skip the first 11 records.\n\n4.3.3.7 order\n\nThe order method dictates the order in which associated objects will be received (in the syntax used by an SQL ORDER BY clause).\n\n4.3.3.8 readonly\n\nIf you use the readonly method, then the associated objects will be read-only when retrieved via the association.\n\n4.3.3.9 select\n\nThe select method lets you override the SQL SELECT clause that is used to retrieve data about the associated objects. By default, Rails retrieves all columns.\n\n4.3.3.10 distinct\n\nUse the distinct method to keep the collection free of duplicates. This is mostly useful together with the :through option.\n\nIn the above case there are two readings and person.articles brings out both of them even though these records are pointing to the same article.\n\nNow let's set distinct:\n\nIn the above case there are still two readings. However person.articles shows only one article because the collection loads only unique records.\n\nIf you want to make sure that, upon insertion, all of the records in the persisted association are distinct (so that you can be sure that when you inspect the association that you will never find duplicate records), you should add a unique index on the table itself. For example, if you have a table named readings and you want to make sure the articles can only be added to a person once, you could add the following in a migration:\n\nOnce you have this unique index, attempting to add the article to a person twice will raise an ActiveRecord::RecordNotUnique error:\n\nNote that checking for uniqueness using something like include? is subject to race conditions. Do not attempt to use include? to enforce distinctness in an association. For instance, using the article example from above, the following code would be racy because multiple users could be attempting this at the same time:\n\n4.3.4 When are Objects Saved?\n\nWhen you assign an object to a has_many association, that object is automatically saved (in order to update its foreign key). If you assign multiple objects in one statement, then they are all saved.\n\nIf any of these saves fails due to validation errors, then the assignment statement returns false and the assignment itself is cancelled.\n\nIf the parent object (the one declaring the has_many association) is unsaved (that is, new_record? returns true) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.\n\nIf you want to assign an object to a has_many association without saving the object, use the collection.build method.\n\n4.4 has_and_belongs_to_many Association Reference\n\nThe has_and_belongs_to_many association creates a many-to-many relationship with another model. In database terms, this associates two classes via an intermediate join table that includes foreign keys referring to each of the classes.\n\n4.4.1 Methods Added by has_and_belongs_to_many\n\nWhen you declare a has_and_belongs_to_many association, the declaring class automatically gains several methods related to the association:\n\ncollection\n\ncollection<<(object, ...)\n\ncollection.delete(object, ...)\n\ncollection.destroy(object, ...)\n\ncollection=(objects)\n\ncollection_singular_ids\n\ncollection_singular_ids=(ids)\n\ncollection.clear\n\ncollection.empty?\n\ncollection.size\n\ncollection.find(...)\n\ncollection.where(...)\n\ncollection.exists?(...)\n\ncollection.build(attributes = {})\n\ncollection.create(attributes = {})\n\ncollection.create!(attributes = {})\n\ncollection.reload\n\nIn all of these methods, collection is replaced with the symbol passed as the first argument to has_and_belongs_to_many, and collection_singular is replaced with the singularized version of that symbol. For example, given the declaration:\n\nEach instance of the Part model will have these methods:\n\n4.4.1.1 Additional Column Methods\n\nIf the join table for a has_and_belongs_to_many association has additional columns beyond the two foreign keys, these columns will be added as attributes to records retrieved via that association. Records returned with additional attributes will always be read-only, because Rails cannot save changes to those attributes.\n\n4.4.1.2 collection\n\nThe collection method returns a Relation of all of the associated objects. If there are no associated objects, it returns an empty Relation.\n\n4.4.1.3 collection<<(object, ...)\n\nThe collection<< method adds one or more objects to the collection by creating records in the join table.\n\n4.4.1.4 collection.delete(object, ...)\n\nThe collection.delete method removes one or more objects from the collection by deleting records in the join table. This does not destroy the objects.\n\n4.4.1.5 collection.destroy(object, ...)\n\nThe collection.destroy method removes one or more objects from the collection by deleting records in the join table. This does not destroy the objects.\n\n4.4.1.6 collection=(objects)\n\nThe collection= method makes the collection contain only the supplied objects, by adding and deleting as appropriate. The changes are persisted to the database.\n\n4.4.1.7 collection_singular_ids\n\nThe collection_singular_ids method returns an array of the ids of the objects in the collection.\n\n4.4.1.8 collection_singular_ids=(ids)\n\nThe collection_singular_ids= method makes the collection contain only the objects identified by the supplied primary key values, by adding and deleting as appropriate. The changes are persisted to the database.\n\n4.4.1.9 collection.clear\n\nThe collection.clear method removes every object from the collection by deleting the rows from the joining table. This does not destroy the associated objects.\n\n4.4.1.10 collection.empty?\n\nThe collection.empty? method returns true if the collection does not contain any associated objects.\n\n4.4.1.11 collection.size\n\nThe collection.size method returns the number of objects in the collection.\n\n4.4.1.12 collection.find(...)\n\nThe collection.find method finds objects within the collection's table.\n\n4.4.1.13 collection.where(...)\n\nThe collection.where method finds objects within the collection based on the conditions supplied but the objects are loaded lazily meaning that the database is queried only when the object(s) are accessed.\n\n4.4.1.14 collection.exists?(...)\n\nThe collection.exists? method checks whether an object meeting the supplied conditions exists in the collection's table.\n\n4.4.1.15 collection.build(attributes = {})\n\nThe collection.build method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through the join table will be created, but the associated object will not yet be saved.\n\n4.4.1.16 collection.create(attributes = {})\n\nThe collection.create method returns a new object of the associated type. This object will be instantiated from the passed attributes, the link through the join table will be created, and, once it passes all of the validations specified on the associated model, the associated object will be saved.\n\n4.4.1.17 collection.create!(attributes = {})\n\nDoes the same as collection.create, but raises ActiveRecord::RecordInvalid if the record is invalid.\n\n4.4.1.18 collection.reload\n\nThe collection.reload method returns a Relation of all of the associated objects, forcing a database read. If there are no associated objects, it returns an empty Relation.\n\n4.4.2 Options for has_and_belongs_to_many\n\nWhile Rails uses intelligent defaults that will work well in most situations, there may be times when you want to customize the behavior of the has_and_belongs_to_many association reference. Such customizations can easily be accomplished by passing options when you create the association. For example, this association uses two such options:\n\nThe has_and_belongs_to_many association supports these options:\n\n:association_foreign_key\n\n:autosave\n\n:class_name\n\n:foreign_key\n\n:join_table\n\n:strict_loading\n\n:validate\n\n4.4.2.1 :association_foreign_key\n\nBy convention, Rails assumes that the column in the join table used to hold the foreign key pointing to the other model is the name of that model with the suffix _id added. The :association_foreign_key option lets you set the name of the foreign key directly:\n\n4.4.2.2 :autosave\n\nIf you set the :autosave option to true, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting :autosave to false is not the same as not setting the :autosave option. If the :autosave option is not present, then new associated objects will be saved, but updated associated objects will not be saved.\n\n4.4.2.3 :class_name\n\nIf the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if a part has many assemblies, but the actual name of the model containing assemblies is Gadget, you'd set things up this way:\n\n4.4.2.4 :foreign_key\n\nBy convention, Rails assumes that the column in the join table used to hold the foreign key pointing to this model is the name of this model with the suffix _id added. The :foreign_key option lets you set the name of the foreign key directly:\n\n4.4.2.5 :join_table\n\nIf the default name of the join table, based on lexical ordering, is not what you want, you can use the :join_table option to override the default.\n\n4.4.2.6 :strict_loading\n\nEnforces strict loading every time an associated record is loaded through this association.\n\nIf you set the :validate option to false, then new associated objects will not be validated whenever you save this object. By default, this is true: new associated objects will be validated when this object is saved.\n\n4.4.3 Scopes for has_and_belongs_to_many\n\nThere may be times when you wish to customize the query used by has_and_belongs_to_many. Such customizations can be achieved via a scope block. For example:\n\nYou can use any of the standard querying methods inside the scope block. The following ones are discussed below:\n\nwhere\n\nextending\n\ngroup\n\nincludes\n\nlimit\n\noffset\n\norder\n\nreadonly\n\nselect\n\ndistinct\n\n4.4.3.1 where\n\nThe where method lets you specify the conditions that the associated object must meet.\n\nYou can also set conditions via a hash:\n\nIf you use a hash-style where, then record creation via this association will be automatically scoped using the hash. In this case, using @parts.assemblies.create or @parts.assemblies.build will create assemblies where the factory column has the value \"Seattle\".\n\n4.4.3.2 extending\n\nThe extending method specifies a named module to extend the association proxy. Association extensions are discussed in detail later in this guide.\n\n4.4.3.3 group\n\nThe group method supplies an attribute name to group the result set by, using a GROUP BY clause in the finder SQL.\n\n4.4.3.4 includes\n\nYou can use the includes method to specify second-order associations that should be eager-loaded when this association is used.\n\n4.4.3.5 limit\n\nThe limit method lets you restrict the total number of objects that will be fetched through an association.\n\n4.4.3.6 offset\n\nThe offset method lets you specify the starting offset for fetching objects via an association. For example, if you set offset(11), it will skip the first 11 records.\n\n4.4.3.7 order\n\nThe order method dictates the order in which associated objects will be received (in the syntax used by an SQL ORDER BY clause).\n\n4.4.3.8 readonly\n\nIf you use the readonly method, then the associated objects will be read-only when retrieved via the association.\n\n4.4.3.9 select\n\nThe select method lets you override the SQL SELECT clause that is used to retrieve data about the associated objects. By default, Rails retrieves all columns.\n\n4.4.3.10 distinct\n\nUse the distinct method to remove duplicates from the collection.\n\n4.4.4 When are Objects Saved?\n\nWhen you assign an object to a has_and_belongs_to_many association, that object is automatically saved (in order to update the join table). If you assign multiple objects in one statement, then they are all saved.\n\nIf any of these saves fails due to validation errors, then the assignment statement returns false and the assignment itself is cancelled.\n\nIf the parent object (the one declaring the has_and_belongs_to_many association) is unsaved (that is, new_record? returns true) then the child objects are not saved when they are added. All unsaved members of the association will automatically be saved when the parent is saved.\n\nIf you want to assign an object to a has_and_belongs_to_many association without saving the object, use the collection.build method.\n\n4.5 Association Callbacks\n\nNormal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a :before_save callback to cause something to happen just before an object is saved.\n\nAssociation callbacks are similar to normal callbacks, but they are triggered by events in the life cycle of a collection. There are four available association callbacks:\n\nbefore_add\n\nafter_add\n\nbefore_remove\n\nafter_remove\n\nYou define association callbacks by adding options to the association declaration. For example:\n\nRead more about association callbacks in the Active Record Callbacks Guide\n\n4.6 Association Extensions\n\nYou're not limited to the functionality that Rails automatically builds into association proxy objects. You can also extend these objects through anonymous modules, adding new finders, creators, or other methods. For example:\n\nIf you have an extension that should be shared by many associations, you can use a named extension module. For example:\n\nExtensions can refer to the internals of the association proxy using these three attributes of the proxy_association accessor:\n\nproxy_association.owner returns the object that the association is a part of.\n\nproxy_association.reflection returns the reflection object that describes the association.\n\nproxy_association.target returns the associated object for belongs_to or has_one, or the collection of associated objects for has_many or has_and_belongs_to_many.\n\n4.7 Association Scoping using the Association Owner\n\nThe owner of the association can be passed as a single argument to the scope block in situations where you need even more control over the association scope. However, as a caveat, preloading the association will no longer be possible.\n\n5 Single Table Inheritance (STI)\n\nSometimes, you may want to share fields and behavior between different models. Let's say we have Car, Motorcycle, and Bicycle models. We will want to share the color and price fields and some methods for all of them, but having some specific behavior for each, and separated controllers too.\n\nFirst, let's generate the base Vehicle model:\n\nDid you note we are adding a \"type\" field? Since all models will be saved in a single database table, Rails will save in this column the name of the model that is being saved. In our example, this can be \"Car\", \"Motorcycle\" or \"Bicycle.\" STI won't work without a \"type\" field in the table.\n\nNext, we will generate the Car model that inherits from Vehicle. For this, we can use the --parent=PARENT option, which will generate a model that inherits from the specified parent and without equivalent migration (since the table already exists).\n\nFor example, to generate the Car model:\n\nThe generated model will look like this:\n\nThis means that all behavior added to Vehicle is available for Car too, as associations, public methods, etc.\n\nCreating a car will save it in the vehicles table with \"Car\" as the type field:\n\nwill generate the following SQL:\n\nQuerying car records will search only for vehicles that are cars:\n\nwill run a query like:\n\n5.1 Overriding the inheritance column\n\nThere may be cases (like when working with a legacy database) where you need to override the name of the inheritance column. This can be achieved with the inheritance_column method.\n\n5.2 Disabling the inheritance column\n\nThere may be cases (like when working with a legacy database) where you need to disable Single Table Inheritance altogether. Otherwise, you'll raise ActiveRecord::SubclassNotFound.\n\nThis can be achieved by setting the inheritance_column to nil.\n\n6 Delegated Types\n\nSingle Table Inheritance (STI) works best when there is little difference between subclasses and their attributes, but includes all attributes of all subclasses you need to create a single table.\n\nThe disadvantage of this approach is that it results in bloat to that table. Since it will even include attributes specific to a subclass that aren't used by anything else.\n\nIn the following example, there are two Active Record models that inherit from the same \"Entry\" class which includes the subject attribute.\n\nDelegated types solves this problem, via delegated_type.\n\nIn order to use delegated types, we have to model our data in a particular way. The requirements are as follows:\n\nThere is a superclass that stores shared attributes among all subclasses in its table.\n\nEach subclass must inherit from the super class, and will have a separate table for any additional attributes specific to it.\n\nThis eliminates the need to define attributes in a single table that are unintentionally shared among all subclasses.\n\nIn order to apply this to our example above, we need to regenerate our models. First, let's generate the base Entry model which will act as our superclass:\n\nThen, we will generate new Message and Comment models for delegation:\n\nAfter running the generators, we should end up with models that look like this:\n\n6.1 Declare delegated_type\n\nFirst, declare a delegated_type in the superclass Entry.\n\nThe entryable parameter specifies the field to use for delegation, and include the types Message and Comment as the delegate classes.\n\nThe Entry class has entryable_type and entryable_id fields. This is the field with the _type, _id suffixes added to the name entryable in the delegated_type definition. entryable_type stores the subclass name of the delegatee, and entryable_id stores the record id of the delegatee subclass.\n\nNext, we must define a module to implement those delegated types, by declaring the as: :entryable parameter to the has_one association.\n\nAnd then include the created module in your subclass.\n\nWith this definition complete, our Entry delegator now provides the following methods:\n\nMethod Return Entry.entryable_types [\"Message\", \"Comment\"] Entry#entryable_class Message or Comment Entry#entryable_name \"message\" or \"comment\" Entry.messages Entry.where(entryable_type: \"Message\") Entry#message? Returns true when entryable_type == \"Message\" Entry#message Returns the message record, when entryable_type == \"Message\", otherwise nil Entry#message_id Returns entryable_id, when entryable_type == \"Message\", otherwise nil Entry.comments Entry.where(entryable_type: \"Comment\") Entry#comment? Returns true when entryable_type == \"Comment\" Entry#comment Returns the comment record, when entryable_type == \"Comment\", otherwise nil Entry#comment_id Returns entryable_id, when entryable_type == \"Comment\", otherwise nil\n\n6.2 Object creation\n\nWhen creating a new Entry object, we can specify the entryable subclass at the same time.\n\n6.3 Adding further delegation\n\nWe can expand our Entry delegator and enhance it further by defining delegate and using polymorphism on the subclasses. For example, to delegate the title method from Entry to it's subclasses:\n\nFeedback\n\nYou're encouraged to help improve the quality of this guide.\n\nPlease contribute if you see any typos or factual errors. To get started, you can read our documentation contributions section.\n\nYou may also find incomplete content or stuff that is not up to date. Please do add any missing documentation for main. Make sure to check Edge Guides first to verify if the issues are already fixed or not on the main branch. Check the Ruby on Rails Guides Guidelines for style and conventions.\n\nIf for whatever reason you spot something to fix but cannot patch it yourself, please open an issue."
    }
}