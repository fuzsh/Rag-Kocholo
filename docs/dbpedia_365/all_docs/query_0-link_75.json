{
    "id": "dbpedia_365_0",
    "rank": 75,
    "data": {
        "url": "https://www.techtarget.com/whatis/definition/ASCII-American-Standard-Code-for-Information-Interchange",
        "read_more_link": "",
        "language": "en",
        "title": "What is ASCII (American Standard Code for Information Interchange)?",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineImages/loshin_peter.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/ascii_figure1_format_hex_mobile.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/ascii_figure2_format_hex_more_mobile.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/non_printing_ascii_control_codes-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/printing_ascii_control_characters-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/microsoft_windows_1252_latin_alphabet_character_encoder-f_mobile.png"
        ],
        "movies": [
            "https://www.youtube.com/embed/rtyXJC6RdpA?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/whatis/definition/ASCII-American-Standard-Code-for-Information-Interchange&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Peter Loshin"
        ],
        "publish_date": "2021-09-09T15:00:00+00:00",
        "summary": "",
        "meta_description": "ASCII (American Standard Code for Information Interchange) defines data encoding on the internet. Find out what ASCII is, how it works and how to use it.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "WhatIs",
        "canonical_link": "https://www.techtarget.com/whatis/definition/ASCII-American-Standard-Code-for-Information-Interchange",
        "text": "What is ASCII?\n\nASCII (American Standard Code for Information Interchange) is the most common character encoding format for text data in computers and on the internet. In standard ASCII-encoded data, there are unique values for 128 alphabetic, numeric or special additional characters and control codes.\n\nASCII encoding is based on character encoding used for telegraph data. The American National Standards Institute first published it as a standard for computing in 1963.\n\nCharacters in ASCII encoding include upper- and lowercase letters A through Z, numerals 0 through 9 and basic punctuation symbols. It also uses some non-printing control characters that were originally intended for use with teletype printing terminals.\n\nASCII characters may be represented in the following ways:\n\nas pairs of hexadecimal digits -- base-16 numbers, represented as 0 through 9 and A through F for the decimal values of 10-15;\n\nas three-digit octal (base 8) numbers;\n\nas decimal numbers from 0 to 127; or\n\nas 7-bit or 8-bit binary\n\nFor example, the ASCII encoding for the lowercase letter \"m\" is represented in the following ways:\n\nCharacter Hexadecimal Octal Decimal Binary (7 bit) Binary (8 bit) m 0x6D /155 109 110 1101 0110 1101\n\nASCII characters were initially encoded into 7 bits and stored as 8-bit characters with the most significant bit -- usually, the left-most bit -- set to 0.\n\nWhy is ASCII important?\n\nASCII was the first major character encoding standard for data processing. Most modern computer systems use Unicode, also known as the Unicode Worldwide Character Standard. It's a character encoding standard that includes ASCII encodings.\n\nThe Internet Engineering Task Force (IETF) adopted ASCII as a standard for internet data when it published \"ASCII format for Network Interchange\" as RFC 20 in 1969. That request for comments (RFC) document standardized the use of ASCII for internet data and was accepted as a full standard in 2015.\n\nASCII encoding is technically obsolete, having been replaced by Unicode. Yet, ASCII characters use the same encoding as the first 128 characters of the Unicode Transformation Format 8, so ASCII text is compatible with UTF-8.\n\nIn 2003, the IETF standardized the use of UTF-8 encoding for all web content in RFC 3629.\n\nAlmost all computers now use ASCII or Unicode encoding. The exceptions are some IBM mainframes that use the proprietary 8-bit code called Extended Binary Coded Decimal Interchange Code (EBCDIC).\n\nHow does ASCII work?\n\nASCII offers a universally accepted and understood character set for basic data communications. It enables developers to design interfaces that both humans and computers understand. ASCII codes a string of data as ASCII characters that can be interpreted and displayed as readable plain text for people and as data for computers.\n\nProgrammers use the design of the ASCII character set to simplify certain tasks. For example, using ASCII character codes, changing a single bit easily converts text from uppercase to lowercase.\n\nThe capital letter \"A\" is represented by the binary value:\n\n0100 0001\n\nThe lowercase letter \"a\" is represented by the binary value:\n\n0110 0001\n\nThe difference is the third most significant bit. In decimal and hexadecimal, this corresponds to:\n\nCharacter Binary Decimal Hexadecimal A 0100 0001 65 0x41 a 0110 0001 97 0x61\n\nThe difference between upper- and lowercase characters is always 32 (0x20 in hexadecimal), so converting from upper- to lowercase and back is a matter of adding or subtracting 32 from the ASCII character code.\n\nSimilarly, hexadecimal characters for the digits 0 through 9 are as follows:\n\nCharacter Binary Decimal Hexadecimal 0 0011 0000 48 0x30 1 0011 0001 49 0x31 2 0011 0010 50 0x32 3 0011 0011 51 0x33 4 0011 0100 52 0x34 5 0011 0101 53 0x35 6 0011 0110 54 0x36 7 0011 0111 55 0x37 8 0011 1000 56 0x38 9 0011 1001 57 0x39\n\nUsing this encoding, developers can easily convert ASCII digits to numerical values by stripping off the four most significant bits of the binary ASCII values (0011). This calculation can also be done by dropping the first hexadecimal digit or by subtracting 48 from the decimal ASCII code.\n\nDevelopers can also check the most significant bit of characters in a sequence to verify that a data stream, string or file contains ASCII values. The most significant bit of basic ASCII characters will always be 0; if that bit is 1, then the character is not an ASCII-encoded character.\n\nASCII variants and Unicode\n\nWhen it was first introduced, ASCII supported English language text only. When 8-bit computers became common during the 1970s, vendors and standards bodies began extending the ASCII character set to include 128 additional character values. Extended ASCII incorporates non-English characters, but it is still insufficient for comprehensive encoding of text in most world languages, including English. Different extended ASCII character sets are common, depending on the vendor, language and country.\n\nInitially, other character encoding standards were adopted for other languages. In some cases, the standards were designed for other countries with different requirements. In other cases, the encodings were hardware manufacturers' proprietary designs.\n\nUnicode defines codespaces for the implementation of character encodings for different languages. Characters can be mapped to encodings using one of the following two methods:\n\nUTF\n\nUniversal Coded Character Set (UCS)\n\nDepending on the language and the mapping used, characters can be expressed in one to four 8-bit bytes (UTF-8), in two 16-bit units (UTF-16) or in a single 32-bit unit (UTF-32).\n\nThe UCS standard is maintained as an ISO (International Organization for Standardization) standard, ISO/IEC 10646. As of this writing, there are 143,859 different characters defined in version 13.0 of the Unicode standard.\n\nASCII advantages and disadvantages\n\nAfter more than half a century of use, the advantages and disadvantages of using ASCII character encoding are well understood. That is one of the encoding format's great strengths.\n\nAdvantages\n\nUniversally accepted. ASCII character encoding is universally understood. Except for the IBM mainframes that use EBCDIC encoding, it is universally implemented in computing through the Unicode standard. Unicode character encoding replaces ASCII encoding, but it is backward-compatible with ASCII.\n\nCompact character encoding. Standard codes can be expressed in 7 bits. This means data that can be expressed in the standard ASCII character set requires only as many bytes to store or send as the number of characters in the data.\n\nEfficient for programming. The character codes for letters and numbers are well adapted to programming techniques for manipulating text and using numbers for calculations or storage as raw data.\n\nDisadvantages\n\nLimited character set. Even with extended ASCII, only 255 distinct characters can be represented. The characters in a standard character set are enough for English language communications. But even with the diacritical marks and Greek letters supported in extended ASCII, it is difficult to accommodate languages that do not use the Latin alphabet.\n\nInefficient character encoding. Standard ASCII encoding is efficient for English language and numerical data. Representing characters from other alphabets requires more overhead such as escape codes.\n\nConverting text to ASCII code in Windows\n\nThere is more than one way to display text as ASCII codes in Windows. To use the Windows PowerShell command Format-Hex to display ASCII encoding for a text file, perform the following steps.\n\nOpen the Windows PowerShell application. Click on the search box in the lower left of your Windows 10 desktop. Type PowerShell and click on the PowerShell icon to start the application.\n\nFormat-Hex command. Enter the following command to display the ASCII encoding for a file called hello.txt in the c:\\Users\\userID\\Documents directory:\n\nformat-hex .\\hello.txt\n\nView output. ASCII encoding for the file hello.txt will be displayed as in Figure 1 below. The top of the output shows that data is displayed in 16 columns, with one character per column. A running count of characters, in hexadecimal, is displayed along the left side of the output. In this case, in the last line, there are 0x60 (or 96 in decimal) characters at the start of the last line. ASCII encoding for the file's characters are shown in a grid 16 characters wide, with encoding in two-digit hexadecimal values. The original contents of the file are displayed to the right in 16 character groupings.\n\nNote that the original file has two spaces (ASCII 0x20) followed by a CR (carriage return, ASCII 0x0D) and LF (line feed, ASCII 0A) characters. The CR-LF combination is used in ASCII files to show the end of a line.\n\nOther options. Format-Hex can be used with other commands for easier command-line viewing of larger files. For example, the following command is used to page through ASCII encoding of a large file:\n\nFormat-Hex .\\hello-long.txt | more\n\nThe output will look similar Figure 2, and you can view output one page at a time.\n\nASCII code tables\n\nAs originally composed, ASCII includes 32 non-printing control codes. Many of those codes were to control the teletypewriter terminal devices used in the early days of computing to input and output data. The remaining 96 printing characters include the DEL (delete) and SPACE (space) characters, as well as all 26 letters of the alphabet, upper- and lowercase, numerals and punctuation symbols.\n\nExtended ASCII uses 8 bits, creating a set of 127 additional characters. There is no single extended ASCII character set. These sets may differ depending on the operating system or vendor. Extended ASCII character sets typically include symbols, letters with diacritical marks, graphical markings, and mathematical symbols including some Greek letters.\n\nNon-printing ASCII control codes\n\nThe ASCII values for 0 through 31 (binary: 000 0000 through 001 1111) are non-printing control codes. They were originally intended for controlling the flow of data and include codes that show the end or beginning of data components, codes to control or show the state of hardware used for data transmission, and codes for positioning of the cursor pointer in a data stream.\n\nPrinting ASCII characters\n\nAlthough the ASCII codes for DEL and SPACE are non-printing, they are considered part of the printing characters, as they are used when sending character streams. The standard ASCII character set includes binary values from 0 (000 0000) through 127 (111 1111).\n\nExtended ASCII characters\n\nThe standard ASCII character set is only 7 bits, and characters are represented as 8-bit bytes with the most significant bit set to 0. Modern computers almost universally use 8-bit bytes, and the extended ASCII character set includes 127 more 8-bit characters, where the most significant bit is set to 1. The extended ASCII characters includes the binary values from 128 (1000 0000) through 255 (1111 1111).\n\nUnlike standard ASCII characters, there are multiple versions of the extended ASCII character set. Table 3 lists Microsoft's Windows-1252 character encoding of the Latin alphabet. This is the default extended ASCII character set for Windows that American and British English and other European languages use.\n\nASCII art\n\nASCII characters can be combined graphically to create an image. ASCII art is a common technique for creating graphical images on text-only media like a computer terminal or text-only printer. For example:\n\n¯\\_(ツ)_/¯\n\nThis is a simple example of ASCII art. Much more elaborate images are possible when using more lines and more characters, especially from extended ASCII character sets.\n\nThe FTP ascii command\n\nThe File Transfer Protocol (FTP) has an ascii command that is used to enable the transfer of ASCII-encoded files. When transferring files in ASCII mode in FTP, the receiving host may change the file so it will be formatted as ASCII on the destination host.\n\nWhen FTP transfers files using the binary mode, those files are not changed in any way.\n\nThe future of ASCII character encoding\n\nAfter more than half a century, and despite being subsumed into the Unicode standard, ASCII character encoding for universally accessible computer and network data is unrivaled. Given the need to preserve data stored over the past decades, ASCII will continue to be foundational for all computing.\n\nLearn more about data storage management in general and how data retention policies are used to maintain access to data over the long term."
    }
}