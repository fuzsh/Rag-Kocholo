{
    "id": "correct_foundationPlace_00064_2",
    "rank": 21,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Kotlin_(programming_language)",
        "read_more_link": "",
        "language": "en",
        "title": "Kotlin (programming language)",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Kotlin_logo_2021.svg/180px-Kotlin_logo_2021.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Kotlin_Mascot_2D_no._1.svg/110px-Kotlin_Mascot_2D_no._1.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Kotlin_Mascot_3D_no._5.png/110px-Kotlin_Mascot_3D_no._5.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Free_and_open-source_software_logo_%282009%29.svg/28px-Free_and_open-source_software_logo_%282009%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Octicons-terminal.svg/24px-Octicons-terminal.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/d/db/Symbol_list_class.svg/16px-Symbol_list_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Duke_%28Java_mascot%29_waving.svg/75px-Duke_%28Java_mascot%29_waving.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Octicons-terminal.svg/24px-Octicons-terminal.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2014-02-02T15:37:46+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Kotlin_(programming_language)",
        "text": "General-purpose programming language derived from Java\n\nKotlinParadigmMulti-paradigm: object-oriented, functional, imperative, block structured, declarative, generic, reflective, concurrentDesigned byJetBrainsDeveloperJetBrainsFirst appearedJuly 22, 2011; 12 years ago ( )Stable release\n\n2.0.0[1] / 21 May 2024; 57 days ago ( )\n\nTyping disciplineInferred, static, strongPlatform\n\nAndroid\n\nJVM\n\nJavaScript (Kotlin/JS)\n\nmacOS (incl. Apple silicon support)\n\niOS, tvOS, watchOS\n\nLinux\n\nWindows\n\nWebAssembly\n\nLLVM (Kotlin/Native)\n\nOSCross-platformLicenseApache License 2.0Filename extensions.kt, .kts, .kexe, .klibWebsitekotlinlang .org Influenced byInfluencedV (Vlang)\n\nKotlin ( )[2] is a cross-platform, statically typed, general-purpose high-level programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library, but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React)[3] or native code via LLVM (e.g., for native iOS apps sharing business logic with Android apps).[4] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[5]\n\nOn 7 May 2019, Google announced that the Kotlin programming language was now its preferred language for Android app developers.[6] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 8 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 9 up to 20, for optimization,[7] or allows for more features; has bidirectional record class interoperability support for JVM, introduced in Java 16, considered stable as of Kotlin 1.5.\n\nKotlin has support for the web with Kotlin/JS, either through a classic interpreter-based backend which has been declared stable since version 1.3, or an intermediate representation-based backend which has been declared stable since version 1.8. Kotlin/Native (for e.g. Apple silicon support) is considered beta since version 1.3.[8][9]\n\nHistory[edit]\n\nName[edit]\n\nThe name is derived from Kotlin Island, a Russian island in the Gulf of Finland, near St. Petersburg. Andrey Breslav, Kotlin's former lead designer, mentioned that the team decided to name it after an island, just like the programming language Java was named after the Indonesian island of Java[10] (though the language's name is said to have been inspired by \"java\" the American slang term for coffee,[11] which itself is derived from the island name).[12]\n\nDevelopment[edit]\n\nIn July 2011, JetBrains unveiled Project Kotlin, a new language for the JVM, which had been under development for a year.[13] JetBrains lead Dmitry Jemerov said that most languages did not have the features they were looking for, with the exception of Scala. However, he cited the slow compilation time of Scala as a deficiency.[13] One of the stated goals of Kotlin is to compile as quickly as Java. In February 2012, JetBrains open sourced the project under the Apache 2 license.[14]\n\nJetBrains hoped that the new language would drive IntelliJ IDEA sales.[15]\n\nThe first commit to the Kotlin Git repository was on November 8, 2010.[16]\n\nKotlin 1.0 was released on February 15, 2016.[17] This is considered to be the first officially stable release and JetBrains has committed to long-term backwards compatibility starting with this version.\n\nAt Google I/O 2017, Google announced first-class support for Kotlin on Android.[18]\n\nKotlin 1.2 was released on November 28, 2017.[19] Sharing code between JVM and JavaScript platforms feature was newly added to this release (multiplatform programming is by now a beta feature[20] upgraded from \"experimental\"). A full-stack demo has been made with the new Kotlin/JS Gradle Plugin.[21][22]\n\nKotlin 1.3 was released on 29 October 2018, adding support for coroutines for use with asynchronous programming.[23]\n\nOn 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[6]\n\nKotlin 1.4 was released in August 2020, with e.g. some slight changes to the support for Apple's platforms, i.e. to the Objective-C/Swift interop.[24]\n\nKotlin 1.5 was released in May 2021.\n\nKotlin 1.6 was released in November 2021.\n\nKotlin 1.7 was released in June 2022, including the alpha version of the new Kotlin K2 compiler.[25]\n\nKotlin 1.8 was released in December 2022, 1.8.0 was released on January 11, 2023.[26]\n\nKotlin 1.9 was released in July 2023, 1.9.0 was released on July 6, 2023.[27]\n\nKotlin 2.0 was released in May 2024, 2.0.0 was released on May 21, 2024.[28]\n\nDesign[edit]\n\nDevelopment lead Andrey Breslav has said that Kotlin is designed to be an industrial-strength object-oriented language, and a \"better language\" than Java, but still be fully interoperable with Java code, allowing companies to make a gradual migration from Java to Kotlin.[29]\n\nSemicolons are optional as a statement terminator; in most cases a newline is sufficient for the compiler to deduce that the statement has ended.[30]\n\nKotlin variable declarations and parameter lists have the data type come after the variable name (and with a colon separator), similar to Ada, BASIC, Pascal, TypeScript and Rust. This, according to an article from Roman Elizarov, current project lead, results in alignment of variable names and is more pleasing to eyes, especially when there are a few variable declarations in succession, and one or more of the types is too complex for type inference, or needs to be declared explicitly for human readers to understand.[31][32]\n\nVariables in Kotlin can be read-only, declared with the val keyword, or mutable, declared with the var keyword.[33]\n\nClass members are public by default, and classes themselves are final by default, meaning that creating a derived class is disabled unless the base class is declared with the open keyword.\n\nIn addition to the classes and member functions (which are equivalent to methods) of object-oriented programming, Kotlin also supports procedural programming with the use of functions.[34] Kotlin functions and constructors support default arguments, variable-length argument lists, named arguments, and overloading by unique signature. Class member functions are virtual, i.e. dispatched based on the runtime type of the object they are called on.\n\nKotlin 1.3 added support for contracts,[35] which are stable for the standard library declarations, but still experimental for user-defined declarations. Contracts are inspired by Eiffel's design by contract[36] programming paradigm.\n\nKotlin code may be compiled to JavaScript, allowing for interoperability between code written in the two languages. This can be used either to write full web applications in Kotlin, or to share code between a Kotlin backend and a JavaScript frontend.[37]\n\nSyntax[edit]\n\nProcedural programming style[edit]\n\nKotlin relaxes Java's restriction of allowing static methods and variables to exist only within a class body. Static objects and functions can be defined at the top level of the package without needing a redundant class level. For compatibility with Java, Kotlin provides a JvmName annotation which specifies a class name used when the package is viewed from a Java project. For example, @file:JvmName(\"JavaClassName\").\n\nMain entry point[edit]\n\nMain article: Entry point\n\nAs in C, C++, C#, Java, and Go, the entry point to a Kotlin program is a function named \"main\", which may be passed an array containing any command-line arguments. This is optional since Kotlin 1.3.[38] Perl, PHP, and Unix shell–style string interpolation is supported. Type inference is also supported.\n\n// Hello, World! example funmain(){ valscope=\"World\" println(\"Hello, $scope!\") } funmain(args:Array<String>){ for(arginargs) println(arg) }\n\nExtension functions[edit]\n\nSimilar to C#, Kotlin allows adding an extension function to any class without the formalities of creating a derived class with new functions. An extension function has access to all the public interface of a class, which it can use to create a new function interface to a target class. An extension function will appear exactly like a function of the class and will be shown in code completion inspection of class functions. For example:\n\npackageMyStringExtensions funString.lastChar():Char=get(length-1) >>>println(\"Kotlin\".lastChar())\n\nBy placing the preceding code in the top-level of a package, the String class is extended to include a lastChar function that was not included in the original definition of the String class.\n\n// Overloading '+' operator using an extension function operatorfunPoint.plus(other:Point):Point{ returnPoint(x+other.x,y+other.y) } >>>valp1=Point(10,20) >>>valp2=Point(30,40) >>>println(p1+p2) Point(x=40,y=60)\n\nUnpack arguments with spread operator[edit]\n\nSimilar to Python, the spread operator asterisk (*) unpacks an array's contents as individual arguments to a function, e.g:\n\nfunmain(args:Array<String>){ vallist=listOf(\"args: \",*args) println(list) }\n\nDestructuring declarations[edit]\n\nNot to be confused with the destructor method common in object-oriented languages.\n\nDestructuring declarations decompose an object into multiple variables at once, e.g. a 2D coordinate object might be destructured into two integers, x and y.\n\nFor example, the Map.Entry object supports destructuring to simplify access to its key and value fields:\n\nfor((key,value)inmap) println(\"$key: $value\")\n\nNested functions[edit]\n\nKotlin allows local functions to be declared inside of other functions or methods.\n\nclassUser(valid:Int,valname:String,valaddress:String) funsaveUserToDb(user:User){ funvalidate(user:User,value:String,fieldName:String){ require(value.isNotEmpty()){\"Can't save user ${user.id}: empty $fieldName\"} } validate(user,user.name,\"Name\") validate(user,user.address,\"Address\") // Save user to the database ... }\n\nClasses are final by default[edit]\n\nIn Kotlin, to derive a new class from a base class type, the base class needs to be explicitly marked as \"open\". This is in contrast to most object-oriented languages such as Java where classes are open by default.\n\nExample of a base class that is open to deriving a new subclass from it:\n\n// open on the class means this class will allow derived classes openclassMegaButton{ // no-open on a function means that // polymorphic behavior disabled if function overridden in derived class fundisable(){...} // open on a function means that // polymorphic behavior allowed if function is overridden in derived class openfunanimate(){...} } classGigaButton:MegaButton(){ // Explicit use of override keyword required to override a function in derived class overridefunanimate(){println(\"Giga Click!\")} }\n\nAbstract classes are open by default[edit]\n\nMain article: Abstract class\n\nAbstract classes define abstract or \"pure virtual\" placeholder functions that will be defined in a derived class. Abstract classes are open by default.\n\n// No need for the open keyword here, it’s already open by default abstractclassAnimated{ // This virtual function is already open by default as well abstractfunanimate() openfunstopAnimating(){} funanimateTwice(){} }\n\nClasses are public by default[edit]\n\nKotlin provides the following keywords to restrict visibility for top-level declaration, such as classes, and for class members: public, internal, protected, and private.\n\nWhen applied to a class member:\n\nKeyword Visibility public (default) Everywhere internal Within a module protected Within subclasses private Within a class\n\nWhen applied to a top-level declaration:\n\nKeyword Visibility public (default) Everywhere internal Within a module private Within a file\n\nExample:\n\n// Class is visible only to current module internalopenclassTalkativeButton{ // method is only visible to current class privatefunyell()=println(\"Hey!\") // method is visible to current class and derived classes protectedfunwhisper()=println(\"Let's talk!\") } internalclassMyTalkativeButton:TalkativeButton(){ funutter()=super.whisper() } MyTalkativeButton().utter()\n\nPrimary constructor vs. secondary constructors[edit]\n\nKotlin supports the specification of a \"primary constructor\" as part of the class definition itself, consisting of an argument list following the class name. This argument list supports an expanded syntax on Kotlin's standard function argument lists that enables declaration of class properties in the primary constructor, including visibility, extensibility, and mutability attributes. Additionally, when defining a subclass, properties in super-interfaces and super-classes can be overridden in the primary constructor.\n\n// Example of class using primary constructor syntax // (Only one constructor required for this class) openclassBaseUser(openvarisSubscribed:Boolean) openclassPowerUser(protectedvalnickname:String,finaloverridevarisSubscribed:Boolean=true):BaseUser(isSubscribed){}\n\nHowever, in cases where more than one constructor is needed for a class, a more general constructor can be defined using secondary constructor syntax, which closely resembles the constructor syntax used in most object-oriented languages like C++, C#, and Java.\n\n// Example of class using secondary constructor syntax // (more than one constructor required for this class) classContext classAttributeSet openclassView(ctx:Context){ constructor(ctx:Context,attr:AttributeSet):this(ctx) } classMyButton:View{ // Constructor #1 constructor(ctx:Context):super(ctx){ } // Constructor #2 constructor(ctx:Context,attr:AttributeSet):super(ctx,attr){ // ... } }\n\nSealed classes[edit]\n\nSealed classes and interfaces restrict subclass hierarchies, meaning more control over the inheritance hierarchy.\n\nDeclaration of sealed interface and class:\n\nsealedinterfaceExpr sealedclassJob\n\nAll the subclasses of the sealed class are defined at compile time. No new subclasses can be added to it after the compilation of the module having the sealed class. For example, a sealed class in a compiled jar file cannot be subclassed.\n\nsealedclassVehicle dataclassCar(valbrandName:String,valowner:String,valcolor:String):Vehicle() classBike(valbrandName:String,valowner:String,valcolor:String):Vehicle() classTractor(valbrandName:String,valowner:String,valcolor:String):Vehicle() valkiaCar=Car(\"KIA\",\"John\",\"Blue\") valhyundaiCar=Car(\"Hyundai\",\"Britto\",\"Green\")\n\nData classes[edit]\n\nKotlin's data class construct defines classes whose primary purpose is storing data, similar Java's record types. Like Java's record types, the construct is similar to normal classes except that the key methods equals, hashCode and toString are automatically generated from the class properties, unlike records, data classes are open for inheritance.\n\nBackground[edit]\n\nIn Java, classes are expected to provide implementations for certain standard methods, so that they function properly with methods and classes provided by the standard library. Java's default implementation—which every class inherits from the base of the class hierarchy, Object—implements these methods only with regard to the identity of the object instance (usually its address in virtual memory).[39][40] This is a problem, since it is extremely important to\n\n(a) have information about the object's state in its String representation (toString) and\n\n(b) detect whether two objects are similar (equals and hashCode). The latter two's implementations should also agree with each other, and therefore be implemented together—meaning when one is changed, the other should also be changed to match. Implementing this functionality also increases the efficiency of standard algorithms which rely on its correct behavior.[41] Conversely, incorrect implementations can even cause errors.[39]\n\nSince implementing these methods manually or with external tools is cumbersome and often leads to repeated or boilerplate code, automatic generation of them as a language feature speeds up development and reduces the potential for errors.\n\nKotlin interactive shell[edit]\n\n$ kotlinc-jvm type :help for help; :quit for quit >>> 2 + 2 4 >>> println(\"Hello, World!\") Hello, World!\n\nKotlin as a scripting language[edit]\n\nKotlin can also be used as a scripting language. A script is a Kotlin source file using the .kts filename extension, with executable source code at the top-level scope:\n\n// list_folders.kts importjava.io.File valfolders=File(args[0]).listFiles{file->file.isDirectory()} folders?.forEach(::println)\n\nScripts can be run by passing the -script option and the corresponding script file to the compiler.\n\n$ kotlinc -script list_folders.kts\"path_to_folder_to_inspect\"\n\nNull safety[edit]\n\nKotlin makes a distinction between nullable and non-nullable data types. All nullable objects must be declared with a \"?\" postfix after the type name. Operations on nullable objects need special care from developers: a null-check must be performed before using the value, either explicitly, or with the aid of Kotlin's null-safe operators:\n\n?. (the safe navigation operator) can be used to safely access a method or property of a possibly null object. If the object is null, the method will not be called and the expression evaluates to null. Example:\n\n// returns null if... // - foo() returns null, // - or if foo() is non-null, but bar() returns null, // - or if foo() and bar() are non-null, but baz() returns null. // vice versa, return value is non-null if and only if foo(), bar() and baz() are non-null foo()?.bar()?.baz()\n\n?: (the null coalescing operator) is a binary operator that returns the first operand, if non-null, else the second operand. It is often referred to as the Elvis operator, due to its resemblance to an emoticon representation of Elvis Presley.\n\nfunsayHello(maybe:String?,neverNull:Int){ // use of Elvis operator valname:String=maybe?:\"stranger\" println(\"Hello $name\") }\n\nLambdas[edit]\n\nKotlin provides support for higher-order functions and anonymous functions, or lambdas.[42]\n\n// the following function takes a lambda, f, and executes f passing it the string \"lambda\" // note that (String) -> Unit indicates a lambda with a String parameter and Unit return type funexecuteLambda(f:(String)->Unit){ f(\"lambda\") }\n\nLambdas are declared using braces, { }. If a lambda takes parameters, they are declared within the braces and followed by the -> operator.\n\n// the following statement defines a lambda that takes a single parameter and passes it to the println function vall={c:Any?->println(c)} // lambdas with no parameters may simply be defined using { } vall2={print(\"no parameters\")}\n\n\"Hello world\" example[edit]\n\n(Taken from and explained at https://kotlinlang.org/docs/kotlin-tour-hello-world.html.)\n\nfunmain(){ println(\"Hello, world!\") // Hello, world! }\n\n[edit]\n\nAndroid Studio (based on IntelliJ IDEA) has official support for Kotlin, starting from Android Studio 3.[43]\n\nIntegration with common Java build tools is supported, including Apache Maven,[44] Apache Ant,[45] and Gradle.[46]\n\nEmacs has a Kotlin Mode in its MELPA package repository.\n\nJetBrains also provides a plugin for Eclipse.[47][48]\n\nIntelliJ IDEA has plug-in support for Kotlin.[49] IntelliJ IDEA 15 was the first version to bundle the Kotlin plugin in the IntelliJ Installer, and to provide Kotlin support out of the box.[50]\n\nGradle: Kotlin has seamless integration with Gradle, which is a popular build automation tool. Gradle allows you to build, automate, and manage the lifecycle of your Kotlin projects efficiently[51]\n\nApplications[edit]\n\nWhen Kotlin was announced as an official Android development language at Google I/O in May 2017, it became the third language fully supported for Android, after Java and C++.[52] As of 2020 , Kotlin is the most widely used language on Android, with Google estimating that 70% of the top 1,000 apps on the Play Store are written in Kotlin. Google itself has 60 apps written in Kotlin, including Maps and Drive. Many Android apps, such as Google Home, are in the process of being migrated to Kotlin, and therefore use both Kotlin and Java. Kotlin on Android is seen as beneficial for its null-pointer safety, as well as for its features that make for shorter, more readable code.[53]\n\nIn addition to its prominent use on Android, Kotlin is gaining traction in server-side development. The Spring Framework officially added Kotlin support with version 5, on 4 January 2017.[54] To further support Kotlin, Spring has translated all its documentation to Kotlin, and added built-in support for many Kotlin-specific features such as coroutines.[55] In addition to Spring, JetBrains has produced a Kotlin-first framework called Ktor for building web applications.[56]\n\nIn 2020, JetBrains found in a survey of developers who use Kotlin that 56% were using Kotlin for mobile apps, while 47% were using it for a web back-end. Just over a third of all Kotlin developers said that they were migrating to Kotlin from another language. Most Kotlin users were targeting Android (or otherwise on the JVM), with only 6% using Kotlin Native.[57]\n\nAdoption[edit]\n\nIn 2018, Kotlin was the fastest growing language on GitHub, with 2.6 times more developers compared to 2017.[58] It is the fourth most loved programming language according to the 2020 Stack Overflow Developer Survey.[59]\n\nKotlin was also awarded the O'Reilly Open Source Software Conference Breakout Award for 2019.[60]\n\nMany companies / organizations have used Kotlin for backend development:\n\nAllegro[61]\n\nAmazon[62]\n\nAtlassian[63]\n\nCash App[64][65]\n\nFlux[66]\n\nGoogle[67]\n\nGradle[68]\n\nJetBrains[69]\n\nMeshcloud[70]\n\nNorwegian Tax Administration[71]\n\nOLX[72]\n\nPivotal[73]\n\nRocket Travel[74]\n\nShazam[75]\n\nZalando[76]\n\nSome companies / organizations have used Kotlin for web development:\n\nBarclay's Bank[77]\n\nData2viz[78]\n\nFritz2[79]\n\nJetBrains[80]\n\nA number of companies have publicly stated they were using Kotlin:\n\nBasecamp[81]\n\nCorda, a distributed ledger developed by a consortium of well-known banks (such as Goldman Sachs, Wells Fargo, J.P. Morgan, Deutsche Bank, UBS, HSBC, BNP Paribas, and Société Générale), has over 90% Kotlin code in its codebase.\n\nCoursera[82]\n\nDripStat[83]\n\nDuolingo[84]\n\nNetflix[85]\n\nPinterest[86]\n\nTrello[87]\n\nUber[88]\n\nSee also[edit]\n\nFree and open-source software portal\n\nComputer programming portal\n\nComparison of programming languages\n\nReferences[edit]\n\nThis article contains quotations from Kotlin tutorials which are released under an Apache 2.0 license.\n\n[edit]"
    }
}