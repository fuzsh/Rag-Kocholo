{
    "id": "correct_foundationPlace_00064_3",
    "rank": 9,
    "data": {
        "url": "https://www.jetbrains.com/help/idea/liquibase.html",
        "read_more_link": "",
        "language": "en",
        "title": "IntelliJ IDEA Documentation",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.1/init-schema-changelog.jpeg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/diff-custom-scope.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/changelog-preview.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase-preview-scratch.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/add-changelog-action.jpeg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/spring-boot-core.icons.expui.add-db-from-config.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase_create_changelog.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.icons.javaee.newui.persistenceEntity%4014x14.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/changelog-preview.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase-update.jpeg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/sql-preview.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase-settings.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase_changeset-templates.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/jpa_explorer_tool_window_liquibase.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.expui.general.add.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/empty-liquibase-changelog.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app-client.expui.general.add.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase_jpa_designer.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase_editor-toolbar.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/liquibase-changelog-preview.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "IntelliJ IDEA Help",
        "canonical_link": "https://www.jetbrains.com/help/idea/liquibase.html",
        "text": "Liquibase\n\nTo enable corresponding features, make sure that the project contains the Liquibase dependency. It also provides a number of actions to quickly generate changelogs, run them, preview SQL statements, and so on.\n\nInitialize schema\n\nWith IntelliJ IDEA, you can initialize your database schema based on the mappings provided in your JPA entities. It will generate a set of DDL commands for your current entities in the form of a Liquibase changelog.\n\nPress Ctrl+Shift+A and start typing Liquibase Init Schema.\n\nYou can also open a Liquibase changelog file, press Alt+Insert, and select Liquibase Init Schema. In this case, the opened file parameters will be used in the Changelog Preview window.\n\nTo generate the DDL script based on the data model, select Model and specify the corresponding persistence unit.\n\nIf you want to compare two databases, select DB and choose one of the existing connections for both of them.\n\nIntelliJ IDEA provides an option to create migration scripts specifically for changes in selected entity changes. In the Scope list, click Selected Entities and, in the Select Entities for Custom Scope window, choose entities.\n\nChangelog Preview Window\n\nIf you want to save the changelog as a regular file, then the following configuration options will be available:\n\nDirectory and File name fields are responsible for configuring the location of the generated changelog. If a changelog with the specified name already exists, you will be prompted with a warning, after which the changes will be appended to that changelog.\n\nYou can use Include to, Include folder, and Include context to specify whether a changelog should be included in another changelog. If you check the Include folder box, it generates the include statement for the entire folder, not just the current changelog.\n\nFrom the File type drop-down list, you can choose one of the four file types (YAML, JSON, SQL, XML) supported by Liquibase, in which IntelliJ IDEA will generate the changelog.\n\nIf you want to save the changelog as a scratch file, then you can configure only its name and type.\n\nThe left side of the window shows a preview of the changesets that will be generated. You can click on each change to see what it will look like. To combine several changes into one changeset or to ignore them, simply drag and drop them. The top left corner of the preview window contains various actions to modify the resulting changelog:\n\nThe following actions are provided:\n\nAdd Changelog â create a secondary changelog\n\nAdd Change Set â create a new changeset in the selected changelog\n\nRemove from Changelog with options:\n\nRemove from Changelog â simply remove the changes from the current changelog\n\nRemove and Ignore â remove the changes and add them to Ignored, so they are excluded from future changesets too\n\nRestore from Ignored â move the changes from Ignored to the changelog\n\nSet Context (for changesets)\n\nSet Labels (for changesets)\n\nShow Other Actions â select all changes based on the danger level, expand/collapse all changes\n\nPrimary and Secondary Changelogs\n\nIntelliJ IDEA lets you put the changes into two types of changelogs: Primary and Secondary. One use case for this is separating safe changes that can be run automatically and changes that require your attention and need to be run manually.\n\nThe changes can be separated automatically by their type (in Tools | Database Versioning | Diff Changes). Alternatively, you can create a secondary changelog manually in the Preview window using the Add Changelog action. Then you can simply drag the desired changesets into the new changelog.\n\nBy default, Primary and Secondary changelogs are generated in separate directories, which can be customized in the plugin settings. Read more in the IDE settings in the Tools | Database Versioning | Liquibase section.\n\nGenerate migration script\n\nIf a database connection is not established, create one.\n\nIn the Database tool window, right-click a database and select Create Liquibase Changelog.\n\nAlternatively, open a JPA entity in the editor and do one the following:\n\nClick in the gutter and select Create Liquibase Changelog.\n\nPlace the caret at an entity, press Alt+Enter to invoke intention actions, and select Create Liquibase Changelog.\n\nIn the dialog that opens, select a source (the desired state of the data model) and target (the old state of the data model).\n\nYou can choose between the following source options:\n\nDB: should be used in case you have an up-to-date database and would like to generate migration scripts for updating another DB to the same state.\n\nModel: use it to generate migration scripts representing the difference between the current state of the entity relationship model (JPA entities) and the old (target) state.\n\nThe target can be set to:\n\nDB â target DB with an older version of the schema.\n\nSnapshot â use this option in case you have the desired state stored in a data model snapshot. It can be generated by IntelliJ IDEA as well.\n\nClick OK. IntelliJ IDEA will analyze the difference between Source and Target and show the Changelog Preview dialog.\n\nIf you want to save the changelog as a regular file, then the following configuration options will be available:\n\nIn the Directory field, specify the location where you want to save the changelog file.\n\nIn the File name field, enter the name of a generated changelog file.\n\nYou can use Include to, Include folder, and Include context to specify whether a changelog should be included in another changelog. If you select the Include folder checkbox, it generates the include statement for the entire folder, not just the current changelog.\n\nIn the File type list, you can choose one of the four file types (YAML, JSON, SQL, XML) supported by Liquibase, in which IntelliJ IDEA will generate the changelog.\n\nIf you want to save the changelog as a scratch file, select Scratch File on top of the Changelog Preview dialog and specify its name and type.\n\nRun Liquibase changelogs without Gradle/Maven plugins\n\nThe JPA Structure tab also offers a way to run Liquibase updates and preview SQL. To run an update, click the Liquibase Update button\n\nIn the Database tool window, right-click a database and select Liquibase Update.\n\nAlternatively, press Ctrl+Shift+A and type Liquibase Update.\n\nIn the Liquibase Update dialog that opens, configure the following parameters:\n\nThe path to the changelog file\n\nThe DB connection to use\n\nLiquibase context and labels\n\nThe log level of the operation\n\nClick Update to run the Liquibase update command with the configured options.\n\nYou can also click Show SQL to show the SQL statement preview.\n\nLiquibase Settings\n\nBase Settings\n\nIntelliJ IDEA allows you to specify:\n\nLiquibase version that you want to use\n\nChangeset author name\n\nThe default file type. The following four file types are supported:\n\nXML\n\nSQL\n\nYAML\n\nJSON\n\nChangelog Templates\n\nWhenever an empty or differential Liquibase changelog is created, IntelliJ IDEA generates the file name based on the templates. You can configure primary/secondary directory and name of the changelogs.\n\nThe following variables and macros are available for the precise configuration:\n\n#date([format]) â the current system date in the specified SimpleDateFormat. For example, #date(\\\"yyyy-MM-dd\\\") returns the date formatted as 2020-12-31.\n\n#increment([start], [step], [decimalFormat]) â a number that is used to keep the name unique. start value is used for the first file and is incremented by step for each next file. decimalFormat parameter specifies the DecimalFormat of the number. For example, #increment(1.0, 0.1, \\\"#.0\\\") returns the value formatted as 1.1, 1.2, 1.3, etc.\n\nsemVer â semantic version of the project (aka SemVer) is a widely adopted version scheme that uses a sequence of three digits (Major.Minor.Patch), an optional pre-release tag and optional build meta tag. The object contains the following methods (the full version in the examples is 1.2.3-SNAPSHOT+meta):\n\n${semVer.getRawVersion()}: 1.2.3-SNAPSHOT\n\n${semVer.getMajor()}: 1\n\n${semVer.getMinor()}: 2\n\n${semVer.getPatch()}: 3\n\n${semVer.getPreRelease()}: SNAPSHOT\n\n${semVer.getMeta()}: meta\n\nDB Types\n\nSometimes software must provide support for a few DBMS types. In this case, Liquibase is the best choice, as it offers a cross-DB solution to declare DDL modifications. IntelliJ IDEA supports this solution as well. When generating cross-DB changelogs, it uses Liquibase properties to specify correct data types for each DBMS:\n\n<property name=\"string.type\" value=\"varchar\" dbms=\"postgresql\"/> <property name=\"string.type\" value=\"nvarchar\" dbms=\"mssql\"/> <changeSet id=\"1622118750064-2\" author=\"jpa-buddy\"> <createTable tableName=\"owners\"> <column autoIncrement=\"true\" name=\"id\" type=\"INT\"> <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"PK_OWNERS\"/> </column> <column name=\"first_name\" type=\"${string.type}(255)\"/> <column name=\"last_name\" type=\"${string.type}(255)\"/> <column name=\"address\" type=\"${string.type}(255)\"/> <column name=\"city\" type=\"${string.type}(255)\"/> </createTable> </changeSet>\n\nTherefore, there is no need to create separate changelogs for different DBMSes.\n\nChangeset Templates\n\nChangeset templates are pre-defined structures that provide a standardized format for specifying database schema changes using Liquibase. These templates serve as a foundation for creating consistent and reusable changesets, ensuring uniformity and ease of maintenance across database deployments.\n\nIntelliJ IDEA provides an ability to apply templates while generating changesets. This feature provides the ability to include various customizable elements in it:\n\nAdd empty rollback to changesets which don't support implicit one â this option automatically adds an empty rollback tag with a TODO comment to any new changeset lacking an implicit rollback.\n\nfailOnError and runOnChange: IntelliJ IDEA supports the commonly used attributes within the changeSet tag, allowing users to set default values for failOnError and runOnChange.\n\nCreate preconditions â each changeset can have specific preconditions. For example, tableExists and columnExists precondition tags will be added for the addColumn statement:\n\n<changeSet id=\"1685085536452-1\" author=\"jpa-buddy\"> <preConditions> <tableExists tableName=\"customer\"/> <not> <columnExists tableName=\"customer\" columnName=\"id\"/> </not> </preConditions> <addColumn tableName=\"customer\"> <column name=\"id\" type=\"BIGINT\"> <constraints nullable=\"false\" primaryKey=\"true\" primaryKeyName=\"pk_customer\"/> </column> </addColumn> </changeSet>\n\nIt is important to note that certain Liquibase changesets may not offer this option. For example, the tag procedureExists is not available for the createProcedure statement.\n\nHere is an example showcasing all four features enabled for a drop table changeset:\n\n<changeSet id=\"1680594632747-1\" author=\"jpa-buddy\" runOnChange=\"true\" failOnError=\"true\"> <preConditions> <tableExists tableName=\"customer\"/> </preConditions> <dropTable tableName=\"customer\"/> <rollback><!--TODO--></rollback> </changeSet>\n\nJPA Buddy features\n\nYou can install the JPA Buddy plugin to get even more support for Liquibase including the dedicated JPA Explorer tool window. It displays everything that JPA Buddy knows about the project. For Liquibase changelogs, it shows their hierarchy and contents.\n\nCreate empty changelog\n\nOpen the JPA Buddy tool window.\n\nClick and select Liquibase Empty Changelog.\n\nAlternatively, right-click a folder in the Project tool window and select New | Other | Liquibase Empty Changelog.\n\nIn the New Liquibase Database Changelog dialog that opens, specify the changelog location and filename, and select the file type (XML, YAML, JSON, or SQL).\n\nTo create a new changelog, right-click the desired folder in the project tree and select New | Liquibase | Empty Changelog. Or click in the top-left corner of the JPA Structure tab:\n\nJPA Designer\n\nThe JPA Designer tool window lets you generate and modify code.\n\nIn the upper part of the tool window (JPA Palette), select an action for example, Create, and then double-click an element, for example, Table.\n\nThe lower part of the tool window (JPA Inspector) adapts to the selected element of the changelog, for example, a changeSet, and allows you to modify its attributes.\n\nTo learn more about JPA Designer, refer to Entity Designer.\n\nLast modified: 21 March 2024"
    }
}