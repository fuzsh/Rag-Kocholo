{
    "id": "correct_foundationPlace_00064_2",
    "rank": 68,
    "data": {
        "url": "https://www.jetbrains.com/help/teamcity/upgrade-notes.html",
        "read_more_link": "",
        "language": "en",
        "title": "Upgrade Notes | TeamCity On-Premises",
        "top_image": "https://resources.jetbrains.com/storage/products/teamcity/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/teamcity/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/teamcity/2024.07/dk-deprecated-dotnetcli.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://resources.jetbrains.com/storage/products/jetbrains/img/icons/favicon.ico",
        "meta_site_name": "TeamCity On-Premises Help",
        "canonical_link": "https://www.jetbrains.com/help/teamcity/upgrade-notes.html",
        "text": "Upgrade Notes\n\nChanges from 2024.03 to 2024.07\n\nThe bundled Git was updated to version 2.45.2 in both Server and Agent Docker images.\n\nTeamCity distribution no longer bundles the HSQLDB library. Instead, it is now downloaded on demand (in case you already use the HyperSQL database or select this option for a new TeamCity server on its first launch). If your TeamCity instance is offline or fails to download the required library due to proxy server settings, download the hsqldb1-1.0.0.jar directly from download.jetbrains.com and place it to TeamCity_Data_Directory/lib/jdbc.\n\nKnown Issues\n\nBuild agents that originate from 2024.07-nanoserver-1809 and 2024.07-windowsservercore-1809 Docker images become incompatible with some of TeamCity runners after these agents restart. To work around this issue, remove the C:/BuildAgent/plugins directory from the image to enforce plugins update. TW-88962\n\nChanges from 2024.03.2 to 2024.03.3\n\nNo potential breaking changes.\n\nChanges from 2024.03.1 to 2024.03.2\n\nThe bundled Git was updated to version 2.45.1 in both Server and Agent Docker images.\n\nKnown Issues\n\nIf you utilize the Amazon Elastic Container Service Support plugin, please update it to the latest \"SNAPSHOT-20240513140730\" version. Older versions may malfunction with the 2024.03.2 version of the TeamCity server.\n\nAWS-hosted agents of the \"Instance\" type may fail to authorize to TeamCity server. As a workaround, you can resolve this issue by adding internal properties as suggested in the following ticket: TW-88068.\n\nTeamCity server fails to authorize Azure cloud agents from attached Virtual Machines. Note that this issue does not affect Azure images hosted in managed images. If migrating Azure cloud agents from VMs to images does not suit your requirements, please track the TW-88070 to get timely notifications on Azure Resource Manager Cloud Support plugin updates that we expect to implement in the nearest future.\n\nChanges from 2024.03 to 2024.03.1\n\nNo potential breaking changes.\n\nChanges from 2023.11 to 2024.03\n\nThe Commit Status Publisher build feature configured for Perforce Helix Swarm no longer posts intermediate build statuses (queued, started, canceled) to the Swarm review's Comments tab. Instead, the feature announces only the final build status (successful or failed). You can additionally uncheck the Code Review Comments option in the build feature's settings dialog to disable these remaining status notifications as well (in this case, the Commit Status Publisher will only update the review's Tests tab).\n\nStarting with version 2023.03, versions of dotCover Command Line Tools that are no longer supported by the JetBrains dotCover team are explicitly marked as \"deprecated\".\n\nAlthough these versions will remain functional, we encourage you to migrate to non-deprecated versions instead. Note that you should also install .NET Framework 4.7.2+ or .NET Core 3.1+ on agent machines for the non-deprecated versions to operate.\n\nWhen installing custom agent tools, editing the teamcity-plugin.xml file to set executable bits is no longer required. Instead, make sure that the archived files already contain all required file permissions. In this case, files remain executable when the tool archive is unpacked on the agent machine.\n\nIf your existing configurations continue using the TeamCity.Node plugin, download the latest version here. Older plugin versions fail to load with agents reporting the \"Failed to initialize spring context\" error.\n\nVersion 2024.03 introduces a number of changes related to bundled Maven tools. These changes are dictated by certain Maven versions containing known CVEs, and carry on the initiative that aims to reduce the size of TeamCity installers by unbundling certain non-crucial components and tools.\n\nThese changes and their potential effects on your existing projects include the following:\n\nAll Maven versions that are not in use by Maven steps and triggers are removed. Maven versions required by existing configurations will be downloaded and installed when your TeamCity server first starts. If the server cannot establish connection with https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven, you will need to manually install the missing tools. If no existing configurations are using Maven, only the latest version 3.9.6 will be installed.\n\nIf there are no existing configurations that utilize the \"Default\" version of Maven, version 3.9.6 becomes the new \"Default\". Otherwise, the \"Default\" option will keep pointing to the same Maven tool as before (for example, 3.6.3).\n\nIf an existing build configuration utilizes manually installed Maven 3.9.6 and stores its settings in VCS, editing this configuration generates a patch that changes the value of the mavenVersion parameter from custom to bundled_3_9_6.\n\nMaven 3.9.6 was added as one of the standard versions of the tool available in TeamCity. See also the Maven Tooling Updates section for the information about notable changes related to Maven in version 2024.03.\n\nThe bundled Kotlin compiler (used in TeamCity DSL) and Dokka (the documentation engine for Kotlin) was updated to version 1.9.22.\n\nThe internal HSQLDB database was updated to version 2.7.2. Note that this database should not be used for actual production purposes.\n\nThe bundled dotCover tool has been updated to version 2023.3.3.\n\nThe Jersey library used by TeamCity REST API was updated to version 2.41. This change does not affect regular REST API users. However, since version 2.41 exhibits significant changes compared to the previous 1.19 (for example, the modified dependency injection logic), 3rd-party TeamCity plugins that rely on REST API (for example, a highly popular tcWebHooks) may become incompatible with the updated TeamCity server.\n\nThe bundled Tomcat was updated to version 9.0.87.\n\nAgent Docker Images for Linux now ship with updated Docker-related tools.\n\nDocker Engine (Docker CE and Docker CE CLI) were updated to version 24.0.9. This change also leads to the Docker Compose update to version v2.25.0.\n\ncontainerd was updated to version 1.6.28.\n\nKnown Issues\n\nAgents running from the Windows 2024.03-nanoserver-2022 Docker image become incompatible with certain runners after they restart. This issue occurs only after a restart, after their initial launch agents operate as expected. View this YouTrack ticket to track this issue: TW-87124.\n\nBuilds that pull TFS repositories fail with the java.lang.NoClassDefFoundError message if the checkout mode is \"Always checkout files on agent\". To fix this issue, download an updated VCS support: TFVC plugin compatible with TeamCity 2024.03 from this YouTrack issue: TW-82824.\n\nIf you face the \"Invalid or corrupt jarfile /data/build/teamcity/buildAgent/plugins/environment-fetcher...\" error reported by the bundled Node.js or legacy TeamCity.Node plugins, download the updated Process Environment Fetcher plugin from this YouTrack issue: TW-87170.\n\nBuild agents can unregister due to inactivity after the server restarts. See this issue for more information: TW-87156.\n\nChanges from 2023.11.4 to 2023.11.5\n\nThe bundled Git was updated to version 2.45.1 in both Server and Agent Docker images.\n\nChanges from 2023.11.3 to 2023.11.4\n\nThe bundled Git was updated to version 2.43.2 in both Server and Agent Docker images for Linux and ARM. Windows images keep using version 2.43.0 as this is the latest currently available version of Git-For-Windows.\n\nKnown Issues\n\nInstalling this bugfix or a stand-alone security patch causes older versions of multiple unbundled plugins to fail with the \"403: Access Denied\" responses. These issues have been fixed in newer versions of corresponding plugins or TeamCity server.\n\nGitHub Commit Hook plugin â update your plugin to version 2023.11-157452 or newer. More information: TW-86680.\n\nStatic UI Extensions â update your plugin to version 0.x.37 or newer. More information: TW-86707.\n\nSAML Authentication â update your TeamCity server to version 2022.04.5 or newer.\n\nChanges from 2023.11.2 to 2023.11.3\n\nNo potential breaking changes.\n\nSee this article for the complete list of fixed issues: TeamCity 2023.11.3 Release Notes.\n\nKnown Issues\n\nTeamCity performance is decreased if the server cannot reach the jetbrains.com domain. See this YouTrack ticket for more information: https://youtrack.jetbrains.com/issue/TW-86288. This issue is addressed in the 2023.11.4 bug-fix date.\n\nGenerating coverage reports using JaCoCo may fail with the ClassNotFoundError. To resolve this issue, upgrade to TeamCity 2023.11.4. Depending on whether your current JaCoCo coverage tool was installed pre- or post- 2023.11.x server update, you may also need to reinstall this tool and restart your build agents. See this YouTrack ticket for more information: TW-86574.\n\nChanges from 2023.11.1 to 2023.11.2\n\nNo potential breaking changes.\n\nSee this article for the complete list of fixed issues: TeamCity 2023.11.2 Release Notes.\n\nKnown Issues\n\nGenerating coverage reports using JaCoCo may fail with the ClassNotFoundError. To resolve this issue, upgrade to TeamCity 2023.11.4. Depending on whether your current JaCoCo coverage tool was installed pre- or post- 2023.11.x server update, you may also need to reinstall this tool and restart your build agents. See this YouTrack ticket for more information: TW-86574.\n\nChanges from 2023.11 to 2023.11.1\n\nPreviously, reporting test metadata with the ##teamcity[testMetadata testName='...' name='...' type='number' value='...'] service messages resulted in TeamCity showing a graph with milliseconds as the Y-axis units. This behavior was unexpected for users who passed non-DateTime values. In version 2023.11.1, the type='number' parameter formats the Y-axis of the graph as plain numbers. To continue viewing values as milliseconds, change the type to the new ms value. Other available values introduced in this version are bytes and percent.\n\nThe bundled Tomcat was updated to version 9.0.83.\n\nKnown Issues\n\nGenerating coverage reports using JaCoCo may fail with the ClassNotFoundError. To resolve this issue, upgrade to TeamCity 2023.11.4. Depending on whether your current JaCoCo coverage tool was installed pre- or post- 2023.11.x server update, you may also need to reinstall this tool and restart your build agents. See this YouTrack ticket for more information: TW-86574.\n\nChanges from 2023.05 to 2023.11\n\n.NET Core 3.1 is no longer bundled with the TeamCity Agent Docker images.\n\nThe version of .NET SDK bundled with the TeamCity Agent Docker images has been updated from 5.0 to 6.0 (the current Microsoft LTS version).\n\nStarting with this release, the .NET SDK version bundled with the TeamCity Agent Docker images is aligned with the Microsoft LTS version current at the time of the TeamCity release.\n\nThe bundled Tomcat was updated to version 9.0.80.\n\nThe bundled Git was updated to version 2.43 in both Server and Agent Docker images.\n\nFollowing the initial end-of-life announcement by Microsoft, TeamCity server and agent Docker images will no longer use Windows 10 version 2004. Starting with the 2023.11 release, we will publish images based on Windows Server 2022 images instead. Older Docker images that were already published (for example, jetbrains/teamcity-minimal-agent:2023.05.4-nanoserver-2004) will be neither upgraded nor removed.\n\nThe bundled dotCover tool has been updated to version 2023.2.2.\n\nTo reduce the size of TeamCity distributions, the largest TeamCity build tool, IntelliJ IDEA, no longer ships with TeamCity installers. Instead, TeamCity will download and install this tool on the first server startup. To check the download/install progress (or to manually install the required version of IntelliJ IDEA on server instances that failed to do so automatically), navigate to the Administration | Tools page and scroll to the IntelliJ Inspections and Duplicates Engine section.\n\nThe bundled Kotlin compiler (used in TeamCity DSL) and Dokka (the documentation engine for Kotlin) was updated to version 1.8.22.\n\nThe bundled ReSharper CLT was updated to version 2023.1.1. This version does not include the dupFinder Command-Line Tool, which deprecates the TeamCity Duplicates Finder (ReSharper) runner (see the initial deprecation announcement). To continue using this runner, install JetBrains ReSharper Command Line Tools 2021.2.3 or older and specify a path to this tool in the runner's advanced settings (the R# CLT Home Directory field).\n\nDue to the S3 Plugin overhaul, the following settings are no longer available:\n\nThe Use pre-signed URLs feature is available by default and cannot be disabled.\n\nThe Access Key ID, Secret Access Key, IAM Role and Default provider chain options are no longer available for native AWS S3 storages. Instead, use settings of an AWS Connection these storages utilize to edit corresponding options. When you view or edit an existing S3 bucket that employed any of these settings, TeamCity shows the Convert to AWS Connection link that allows you to transfer them to a new AWS Connection. We recommend that you do so to keep all connection-related options outside storage settings.\n\nThe AWS Region is now automatically retrieved from the selected storage.\n\nThe Open IAM Console link is hidden.\n\nExisting storages with custom endpoints and enabled Default Credential Provider Chain option are now explicitly converted to the \"Custom S3\" type.\n\nThe Amazon EC2 plugin was significantly reworked in version 2023.11. As a part of this overhaul, it is no longer possible to push TeamCity agents to EC2 instances spawned from AWS Cloud Image. As an alternative, use EC2 images that already include TeamCity agents.\n\nIn version 2023.11.2, we expect to rollback this change for cloud profiles configured before the 2023.11 update. This will allow you to continue using the agent push functionality for the existing cloud agents. However, we encourage you to update your setup and bake TeamCity agents into your AMIs instead of installing them via the agent push. The latter option will be completely disabled in one of the future releases.\n\n2023.11.4 Update: Agent pushes are temporarily re-enabled for all cloud profiles, both those configured prior to version 2023.11 and new ones.\n\nFrom TeamCity 2023.11 onwards, when two-factor authentication (2FA) is enabled on the TeamCity server, it is no longer possible to log in to TeamCity from the IntelliJ Platform using username/password credentials. You can log in with username/access token credentials instead.\n\nThe following updates have been made to the Azure DevOps OAuth 2.0, Bitbucket Cloud, GitHub App, GitHub Enterprise, GitHub.com, GitLab CE/EE, and GitLab.com authentication modules:\n\nThe Add Module dialog has a new Allow any <IdentityProvider> user to log in checkbox. If you want to configure a module that does not restrict users to a particular domain, organization, workspace, or group, you must check this box instead of leaving the Restrict authentication field empty.\n\nIf an existing authentication module in version 2023.05.04 is configured with an empty Restrict authentication field, after migrating to version 2023.11, TeamCity displays the warning notification All users should be allowed to login, or at least one <IdentityProvider> organization must be specified. on the Administration | Authentication page.\n\nKnown Issues\n\nAt TeamCity, we are fully dedicated to bolstering the comprehensive security of our platform, and we consistently enhance our product to realize this commitment.\n\nIn version 2023.11, we have fixed certain issues related to the artifacts' domain isolation feature. As a side effect of these changes, some users can experience infinite redirect loops (ERR_TOO_MANY_REDIRECTS) when attempting to access build artifacts. To fix this issue, make sure your proxy server provides valid X-Forwarded-Host headers (see the Configuring Proxy Server article for the configuration examples).\n\nYou can also roll back these changes by adding the teamcity.internal.domainIsolation.serveArtifactsOnlyFromArtifactsUrl=false internal property. Be advised that the internal property disables the aforementioned security update, thus lowers the TeamCity server security.\n\nIf your TeamCity username includes encoded special symbols (for example, emoji), you may be unable to log in to TeamCity via the IntelliJ Platform Plugin. See the following ticket for more information: TW-85284.\n\n(fixed in the 2023.11.1 bugfix update) TeamCity may be unable to run new builds for Subversion repositories accessed over the secure SSH protocol (SVN+SSH). See this issue for more information: TW-85310.\n\n(fixed in the 2023.11.1 bugfix update) LDAP synchronization currently fetches first 1000 users. As a workaround, set the teamcity.ldap.search.pageSize internal property to a larger value. See this YouTrack ticket for the resolution progress: TW-85444.\n\n(fixed in the 2023.11.1 bugfix update) Commit Status Publisher cannot publish build statuses to Bitbucket Cloud if the parent TeamCity build configuration has an ID longer than 40 characters. See this issue for more information: TW-85393.\n\nChanges from 2023.05.4 to 2023.05.6\n\nTooling updates in Server and Agent Docker imaages:\n\nGit and Git for Windows were updated to version 2.45.1.\n\nPerforce was updated to version 2022.2-2531894.\n\nKnown Issues\n\nRequests sent by the GitHub Commit Hook plugin fail with the \"403: Access Denied\" error. Update your plugin to version 2022.04-109057 to resolve this issue. See this YouTrack ticket for more information: TW-86680.\n\nThe Administration page is not accessible from TeamCity UI if the plain-text LDAP connection URL (ldap://...) is used. To resolve this issue, switch to a secure LDAPS connection (recommended) or add an internal property as suggested in the following ticket: TW-88069.\n\nChanges from 2023.05.3 to 2023.05.4\n\nNo potential breaking changes.\n\nSee this article for the complete list of fixed issues: TeamCity 2023.05.4 Release Notes.\n\nChanges from 2023.05.2 to 2023.05.3\n\nNo potential breaking changes.\n\nSee this article for the complete list of fixed issues: TeamCity 2023.05.3 Release Notes.\n\nThe bundled Git was updated to version 2.42 in both Server and Agent Docker images.\n\nChanges from 2023.05.1 to 2023.05.2\n\nSee this article for the complete list of fixed issues: TeamCity 2023.05.2 Release Notes.\n\nUpcoming DupFinder Runner Deprecation\n\nStarting with the next TeamCity version, the Duplicates Finder (ReSharper) runner will be unable to operate since it relies on a tool that is no longer shipped with ReSharper Command Line Tools. See the corresponding server health report for more information.\n\nKnown Issues\n\nBuilds that pull TFS repositories fail with the java.lang.NoClassDefFoundError message if the checkout mode is \"Always checkout files on agent\". See this YouTrack issue for more information: TW-82824.\n\nChanges from 2023.05 to 2023.05.1\n\nPublishing Artifacts of Batch Builds in Parent Configuration Builds\n\nWith this bugfix update, automatically created batch builds aggregate their artifacts under the Artifacts tab of parent configuration builds. See this article for more information: Publish Artifacts Produced By Batch Builds.\n\nThe bundled Git was updated to version 2.41 in both Server and Agent Docker images.\n\nMiscellaneous Changes\n\nThe \"Open an interactive session to the agent\" permission was renamed to \"Invoke interactive agent terminals\". The new name highlights the recent behavior change: this permission now specifies whether users can open agent terminal tabs introduced in version 2023.05 and is no longer related to deprecated SSM terminals.\n\nYou can now decorate artifact publishing rules with the #teamcity:symbolicLinks=... attribute to choose whether symlinks present in published directories should be included as is, or TeamCity should include files and folders referenced by these symlinks in the published archive. See this article for more information: Publishing Symlinks.\n\nChanges from 2022.10 to 2023.05\n\nPlanned deprecation of Java 8 in TeamCity Server\n\nTeamCity 2023.05 supports Java versions 8, 11 and 17, but Java 8 support will be discontinued in one the next TeamCity versions. If you use a non-bundled version of Java 8, we highly recommend that you migrate your server to Java 11 or 17.\n\nThe bundled Kotlin compiler (used in TeamCity DSL) and Dokka (the documentation engine for Kotlin) were updated to version 1.7.10.\n\nThe bundled Tomcat was updated to version 9.0.75.\n\nAmazon Corretto Java bundled with TeamCity Windows installer and TeamCity Docker images was updated to version 17.0.7.7.1.\n\nThe Web Application Description Language (WADL) generator is now removed. See the initial announcement for more information.\n\nThe \"Processing user requests to modify data\" responsibility was renamed to \"Handling UI actions and load balancing user requests\".\n\nThe data_directory/config/nodes-config.xml file listed only \"MAIN_NODE\" responsibility for main nodes. In version 2023.05, this configuration file lists all responsibilities enabled on a main node.\n\nPodman Support\n\nDue to the implementation of Podman support, the following changes were made:\n\nThe \"Docker Wrapper\" extension was renamed to Container Wrapper.\n\nThe \"Docker Info\" tab on the Build Results Page was renamed to \"Container Info\".\n\nAdding the Container Wrapper build feature to a build configuration no longer applies the docker.server.version exists agent requirement. Instead, TeamCity now defines the docker.server.osType exists condition. This property is synchronized with podman.osType so that agents with Podman installed instead of Docker are compatible with this new requirement.\n\nStarting with version 2023.05, TeamCity metrics accessible via the <TeamCity_server_URL>/app/metrics endpoint comply with the OpenMetrics specification. Due to this enhancement, the following changes were implemented:\n\n\"summary\" metrics changed their suffixes from _total to _sum. For example, TeamCity now reports build_queue_optimization_time_milliseconds_sum instead of build_queue_optimization_time_milliseconds_total.\n\nmetrics that previously had the _number suffix no longer have it. For example, the agents_connected_authorized_number metric is now called agents_connected_authorized.\n\nTo preserve previously collected metrics and use them along with updated data, do one of the following in your metric monitoring solution (such as Grafana):\n\n(recommended) Use the or operator in graph settings to merge metrics with new and old names. For instance:\n\nsum(increase(vcs_changes_checking_milliseconds_sum{type=\"COLLECT_CHANGES\"}[1m])) or sum(increase(vcs_changes_checking_milliseconds_total{type=\"COLLECT_CHANGES\"}[1m]))\n\nUse the Prometheus relabeling configuration to rename metrics back to their old names before they are written to a Prometheus database.\n\nIn addition to these changes, TeamCity no longer reports the \"experimental\" tag for metrics. Note that some metrics are still considered experimental and accessible via the <TeamCity_server_URL>/app/metrics?experimental=true endpoint.\n\nUsers with the \"Project Developer\" role can now download and view the .teamcity/settings/buildSettings.xml hidden artifact. Previously, this action required the \"Edit project\" permission that is enabled for \"Project Administrator\" and higher roles.\n\nAgent pages no longer display the Open SSM Terminal action link. This functionality was deprecated in favor of more generic Open Terminal button. See Debug Agents Remotely for more details.\n\nConfigurations with agent-side checkout mode do not support postfixes in checkout directory paths (for instance, +:src/main => src/main/postfixDirectory). If you specified a postfix in checkout rules, previous TeamCity versions silently swallowed this error and ran builds that ignored your postfixes. Starting with version 2023.05, TeamCity shows the corresponding error message and does not allow new builds to start. See this section for more information: Agent-side checkout rules limitations.\n\nKnown Issues\n\nTeamCity shows the \"Docker rate limit warning\" for build agents that use rootful Podman (that is, containers run as root on agent machines) to pull containers, even if the Podman client successfully authorizes before pulling an image. For agents using Docker, this warning is showed only if agents pull images without authentication, which may cause reaching the download rate limit.\n\nIf you have multiple projects with GitHub App connections to the same GitHub App, a webhook for only the first connection detected by TeamCity is functional. Projects with other connections keep polling their corresponding repositories for changes.\n\nUploading artifacts to S3 buckets may fail for larger files. We expect to fix this issue in the next bugfix update (2023.05.1). In the meantime, download and install a custom build of the S3 Plugin from this YouTrack issue: TW-81866.\n\nSettings of EC2-based cloud profiles may not show the checkbox that allows you to utilize locally stored IAM Roles, leaving authorization by Access ID/Secret Key as the only option. We expect to fix this issue in the next 2023.05.1 bugfix update.\n\nIf a directory published as a build artifacts contains symbolic links, files and folderes referenced by these symlinks are no longer included in the produced artifact archive. This issue will be resolved in the 2023.05.1 bugfix update, see this article for more information: Publishing Symlinks.\n\nSome TeamCity pages are missing their html and body tags. See this ticket for more information: TW-82749.\n\nAgents spawned from AWS machine images that utilize the first version of Amazon Metadata (IMDSv1) fail to retrieve property values from metadata and pass automatic authorization. See this ticket for more information: TW-82176.\n\nChanges from 2022.10.4 to 2022.10.6\n\nTooling updates in Server and Agent Docker imaages:\n\nGit and Git for Windows were updated to version 2.45.1.\n\nPerforce was updated to version 2022.2-2531894.\n\nKnown Issues\n\nRequests sent by the GitHub Commit Hook plugin fail with the \"403: Access Denied\" error. Update your plugin to version 2022.04-109057 to resolve this issue. See this YouTrack ticket for more information: TW-86680.\n\nThe Administration page is not accessible from TeamCity UI if the plain-text LDAP connection URL (ldap://...) is used. To resolve this issue, switch to a secure LDAPS connection (recommended) or add an internal property as suggested in the following ticket: TW-88069.\n\nChanges from 2022.10.3 to 2022.10.4\n\nNo potential breaking changes.\n\nChanges from 2022.10.2 to 2022.10.3\n\nThe bundled Git was updated to version 2.40 in both Server and Agent Docker images.\n\nThe bundled Tomcat was updated to version 9.0.71.\n\nThe Perforce Helix Core client (p4) was updated to version 2022.2-2407422 in Agent and Server Docker images.\n\nKnown Issues\n\nUsing the \"Default Credentials Provider\" as a principal AWS connection may cause the \"Default Credentials Provider Chain: The security token included in the request is expired\" error when the session expires. This issue is already fixed in the latest AWS Core plugin that will be bundled with TeamCity in the upcoming 2022.10.4 bugfix version. To manually install this plugin version, download the corresponding attachment from the TW-80253 ticket.\n\nChanges from 2022.10.1 to 2022.10.2\n\nThe bundled Git was updated to version 2.39.1 in both Server and Agent Docker images.\n\nThe Perforce Helix Core client (p4) was updated to version 2022.2-2369846 in Agent Docker images.\n\nThe bundled Apache Tomcat was updated to version 8.5.84.\n\nThe Web Application Description Language (WADL) generator will be removed in version 2023.05 since we now utilize Swagger to generate documentation REST API and client code.\n\nIf you rely on this generator tool, contact us to share your business requirements.\n\nChanges from 2022.10 to 2022.10.1\n\nAWS Connection\n\nDefault Provider Chain credentials type is disabled by default\n\nThe Default Provider Chain credentials type in AWS connections is now disabled by default to prevent associated security risks. To enable this option, set the internal property teamcity.internal.aws.connection.defaultCredentialsProviderEnabled=true (The default value is false.) No server restart is required after the property is set.\n\nCustom STS endpoint is disabled by default\n\nOnly the global or regional AWS STS endpoints can be used as STS Endpoints in the AWS connection configuration. To use a custom endpoint for Amazon alternatives like MinIO, contact the TeamCity support team.\n\nChanges from 2022.04 to 2022.10\n\nPlanned deprecation of Java 8 in TeamCity Server 2023.04\n\nTeamCity 2022.10 Server supports Java versions 8 and 11, but Java 8 support will be discontinued in the next version, TeamCity 2023.04, to be released in April 2023. If you use a non-bundled version of Java 8, we highly recommend that you migrate your server to Java 11 before TeamCity 2023.04.\n\nNote that TeamCity is not compatible with Java 17, which makes Java 11 the only version planned for support in TeamCity Server 2023.04.\n\nThe bundled Amazon Corretto Java has been updated to version 11.0.16.9.1.\n\nThe bundled Tomcat has been updated to version 8.5.82.\n\nThe bundled Kotlin compiler in the Kotlin Script runner has been updated to version 1.7.10.\n\nMaven 3.8.6 has been added as one of the bundled versions of the tool.\n\nThe embedded Maven library has been updated to version 3.8.6.\n\nJDBC drivers for external databases suggested on the fresh TeamCity installation have been updated to the following versions:\n\nMySQL to 8.0.30\n\nPSQL to 42.5.0\n\nMSSQL to 9.4.1\n\nPermission to connect to an agent's EC2 instance via AWS SSM\n\nTeamCity system administrators are now granted the new role, Open an interactive session to the agent, which lets them use an interactive browser-based shell on an EC2 agent from the TeamCity UI without providing Amazon credentials. It is possible to connect to agents if they are configured as described here.\n\nFree disk space for artifacts is calculated automatically\n\nThe Free disk space build feature keeps track of the size of artifacts and automatically calculates the disk space required for resolving artifact dependencies. You do not have to take into account the size of the artifacts downloaded during the build when specifying the required disk space.\n\nBackward compatibility for Bitbucket Server pull request branches\n\nTeamCity provides backward compatibility with Bitbucket Server pull request branches that are not officially supported by Atlassian. The Pull Requests build feature has the Use pull request branches option that enables detection of such branches (pull-requests/*) instead of source branches. After the upgrade, this option will be enabled for existing build configurations using such branches. We do not recommend using this option.\n\nPerformance Monitor\n\nThe Performance Monitor build feature is now enabled by default for build configurations created from a URL.\n\nKnown issues\n\nSecurity risks of AWS connection\n\nIf your TeamCity server is hosted on an AWS instance that has an associated IAM role granting access to sensitive resources, using an Amazon Web Services (AWS) connection with the Default Provider Chain credentials may present a security risk. In this case TeamCity project administrators who configured this type of connection can access all AWS resources permitted by the role.\n\nTo work around this security issue, we strongly recommend that TeamCity server administrators disable the use of the Default Provider Chain credentials type in AWS connections by setting the internal propertyteamcity.internal.aws.connection.defaultCredentialsProviderEnabled=false (The default value is true.) No server restart is required after the property is set.\n\nWe will disable this type of credentials by default in the next bugfix update.\n\nKotlin DSL plugin may fail to resolve dependencies\n\nThe Kotlin DSL plugin may fail to resolve DSL dependencies after upgrading to 2022.10, if a project's Kotlin DSL settings use third-party libraries.\n\nIf you face this problem, upgrade to the bug-fix version 2022.10.1 that ships with an updated version of the DSL plugin.\n\nChanges from 2022.04.5 to 2022.04.7\n\nTooling updates in Server and Agent Docker imaages:\n\nGit and Git for Windows were updated to version 2.45.1.\n\nPerforce was updated to version 2022.2-2531894.\n\nKnown Issues\n\nRequests sent by the GitHub Commit Hook plugin fail with the \"403: Access Denied\" error. Update your plugin to version 2022.04-109057 to resolve this issue. See this YouTrack ticket for more information: TW-86680.\n\nThe Administration page is not accessible from TeamCity UI if the plain-text LDAP connection URL (ldap://...) is used. To resolve this issue, switch to a secure LDAPS connection (recommended) or add an internal property as suggested in the following ticket: TW-88069.\n\nChanges from 2022.04.4 to 2022.04.5\n\nNo potential breaking changes.\n\nChanges from 2022.04.3 to 2022.04.4\n\nThe ReservedCodeCacheSize=640m attribute is set by default for new server installations. If the attribute was specified in an earlier TeamCity version, you'll have to update it manually after upgrading. See the TW-76238 issue.\n\nSVNKit has been updated to 1.10.8.\n\nChanges from 2022.04.2 to 2022.04.3\n\nSVNKit was updated to 1.10.7, which resulted in a problem with svn+ssh roots. It did not close connections and generated many threads. The problem was resolved in version 2022.04.4. To fix the issue in TeamCity 2022.04.3, download a plugin from the TW-77134 issue.\n\nChanges from 2022.04.1 to 2022.04.2\n\nNo potential breaking changes.\n\nChanges from 2022.04 to 2022.04.1\n\nNo potential breaking changes.\n\nKnown issues\n\nThere is a new performance problem in the Git plugin which slows down checking for changes operation for some of the Git repositories. For the issue to reproduce, a VCS root should have \"Enable to use tags in the branch specification\" option enabled and +:refs/tags/* should be specified in the VCS root branch specification. The repository should also have many thousands of tags. Please see TW-76397 for a workaround.\n\nChanges from 2021.2 to 2022.04\n\nTo comply with the common identifier format of .NET tests, TeamCity now uses a different format of names for .NET assemblies (omitting a file extension). On updating to 2022.04, this format will be applied within all the tests launched via the test or vstest command of the .NET runner. As a result of this change, the investigations, mutes, and history of these tests may be reset.\n\nTeamCity stops supporting the Microsoft Edge Legacy web browsers.\n\nTriggering builds via REST API will be disabled when the queue limit is reached on the server.\n\nTeamCity reporting of Ant's tasks will be disabled if Ant is started by a Java version below 1.8.\n\nWindows docker images based on 2004 will not be published for 2022.04 version.\n\nReplaced log4j v1.2 with log4j v2.17 (see TW-47084).\n\nSome popular external plugins are not compatible with TeamCity 2022.04 and have to be updated before the upgrade.\n\nDownload newer versions of these plugins from JetBrains Marketplace:\n\nGitHub Commit Hooks\n\nHashicorp Vault Support\n\nGradle Build Scan\n\nVersions 2017.1 and 2017.2 of TeamCity REST API have been unbundled. If you have been using any of these versions in your scripts, consider switching to the latest protocol version as described here. If switching is not an option and this is a breaking change for your setup, please contact us via any convenient feedback channel.\n\nUpdates in TeamCity Agent Docker images:\n\nThe bundled .NET Core SDK has been updated to 6.0.100.\n\nThe two bundled versions of .NET Core Runtime are 3.1.21 and 5.0.12.\n\nBundled Git has been updated to version 2.36.0\n\nThe bundled Java was updated to version 11.0.15.9.1\n\nBundled IntelliJ IDEA has been updated to version 2021.2.3. Note that this version requires Java 11.x. Previously added IntelliJ Inspections/Duplicates steps with the bundled version will become incompatible with the agents running Java below version 11.\n\nThe bundled Kotlin compiler used in TeamCity DSL has been updated to version 1.6.21\n\nThe SBT launcher, used in the Simple Build Tool (Scala) plugin, has been updated to version 1.5.5.\n\nFreemarker, used by TeamCity notification templates, has been updated to version 2.3.31.\n\nThe Qodana plugin has been bundled with TeamCity. If you previously installed the Qodana plugin and used DSL, you'll need to update your DSL settings. We're providing a special version of the plugin that contains both old and new Kotlin DSL settings. All deprecated settings are marked and alternatives are provided. After the migration, you can delete this plugin and use the version bundled with TeamCity.\n\nThe CVS plugin has been unbundled from TeamCity. If you want to continue using it on your server, please download it from JetBrains Marketplace and install it as described here.\n\nThe Eclipse plugin has been unbundled from TeamCity. Contact our support if you need the plugin.\n\nChanges from 2021.2.2 to 2021.2.3\n\nTo avoid false positive reports from some security scanners, TeamCity now uses an instance of the Log4j 1.2 library without vulnerable classes. To achieve this, we've created our own fork of Log4j 1.2 on GitHub, removed vulnerable packages unused by TeamCity (net, chainsaw, jdbc, and jmx), and built the library.\n\nKnown Issues\n\nAfter upgrading to 2021.2.3, builds might fail to check out sources from git repositories on Azure DevOps (both Server and Services) via SSH. See the related issue for details.\n\nIf you face this problem, please apply a workaround from the issue.\n\nBuilds might fail to publish artifacts or a build number via commands of an MSBuild script. This problem can be worked around by changing the build log verbosity level to normal: to do this, set the msbuild.logger.params configuration parameter to verbosity=normal. Alternatively, you can download the fixed .NET plugin here and install it manually on your server.\n\nChanges from 2021.2.1 to 2021.2.2\n\nChanged format for .NET assembly names\n\nTo comply with the common identifier format of .NET tests, TeamCity now uses a different format of names for .NET assemblies (omitting a file extension). On updating to 2021.2.2, this format will be applied within all the tests launched via the test or vstest command of the .NET runner, but the investigations and history of these tests might be reset. The details on the changes to the common identifier format in .NET can be found in the Microsoft Documentation.\n\nUpdates in TeamCity Agent Docker images:\n\nThe bundled version of .NET Core SDK has been updated to 6.0.100.\n\nBundled two versions of .NET Core Runtime: 3.1.21 and 5.0.12.\n\nChanges from 2021.2 to 2021.2.1\n\nTo comply with the common identifier format of .NET tests, TeamCity now uses a different format of names for .NET assemblies (omitting a file extension). After updating to 2021.2.1, this format will be applied within all the tests launched via the test or vstest command of the .NET runner, but the investigations and history of these tests might be reset.\n\nIf parametrized .NET tests are launched with the test command of the .NET runner, TeamCity will show them as a single test with multiple runs, while previously it counted them separately and displayed the parameters' values per test in the Tests tab.\n\nTo revert to the previous behavior, please download the fixed version of our .NET plugin and install it as described here.\n\nThe Perforce Helix Core client (p4) is updated to version 2021.2/2201121.\n\nChanges from 2021.1 to 2021.2\n\nNo data converters in 2021.2\n\nTeamCity 2021.2 does not introduce any new data formats compared to version 2021.1 and does not contain data converters. This simplifies and thus speeds up the upgrade/downgrade between these versions.\n\n2021.2 Known Issues\n\nCan't use remote run from ReSharper and Eclipse with enabled 2FA\n\nUsers who have configured two-factor authentication for their TeamCity accounts, temporarily cannot run and debug TeamCity builds remotely from ReSharper and Eclipse. If using the remote run from these tools is crucial to your pipelines, make sure 2FA is set to Optional on your servers (default option), so users can disable it for their own accounts anytime.\n\n.NET builds may fail due to enabled deterministic source paths\n\nBuilds with .NET steps may fail with the \"SourceRoot items must include at least one top-level (not nested) item when DeterministicSourcePaths is true\" error. This error is caused by the conflict between the expected paths' format (deterministic) and the approach used in your project (likely, absolute paths to sources).\n\nAs a workaround, consider adding the /p:ContinuousIntegrationBuild=false command-line argument to disable deterministic source paths, or download and install the fixed .NET runner as described here.\n\n.NET builds fail if .NET version is < 6.0 and a path to a build agent contains whitespaces\n\nIf you run a build with a .NET step on a build agent that has whitespaces in its OS path and the used .NET version is earlier than 6.0, the build will fail with the \"Only one project can be specified\" error.\n\nAs a workaround, consider switching to .NET 6.0, or download and install the fixed .NET runner as described here.\n\nInvalid property errors when passing .NET parameters containing special characters\n\nIf running .NET commands via the .NET runner results in the \"Property is not valid\" error, you may need to adjust the system parameters being passed to it. Since version 2021.2, the .NET runner no longer escapes special characters in parameters. This new approach allows passing lists of parameters, but might cause errors if your existing parameters contain such special characters.\n\nTo resolve this issue, please revise and adjust the parameters being passed â make sure to escape all the occurring special characters in them.\n\nMicrosoft Azure agents fail to automatically start/stop\n\nBuild agents running in the Microsoft Azure cloud may fail to automatically start/stop and, after a timeout, freeze in the \"Scheduled to Stop\" state.\n\nTo work around this issue in the Azure plugin, please set the teamcity.kotlinCoroutinesPool.configurator.enabled=false internal property. This issue will be automatically resolved on upgrading to the next bugfix update.\n\nBuilds using Ruby Environment Configurator have no compatible agents\n\nEnabling the Ruby Environment Configurator feature in a build configuration will add the env.AAAA agent requirement to it. Thus, the build agents that don't have this environment variable will be marked as incompatible, and TeamCity won't be able to run this build on them.\n\nTo work around this issue, please update the Ruby plugin to the fixed version as described here. This issue will be automatically resolved on upgrading to the next bugfix update.\n\nDSA/DSS SSH keys can't be used in TeamCity 2021.1.4 and 2021.2\n\nAfter upgrading to any of these versions, the SSH keys of the DSA/DSS format are rejected with the \"ssh-dss cannot be used as public key type for identity\" error.\n\nTo continue using them in TeamCity, please follow this workaround.\n\nUnknownHostException when fetching files from Git LFS 3.0.0\n\nUsers might get the java.net.UnknownHostException error when fetching files to build agents from Git LFS 3.0.0. This version switched to the pure SSH protocol. According to this protocol, it adds â before the host name. The JSch library used by TeamCity for SSH connections doesn't support them and treats these symbols as a part of the host name.\n\nTo work around this issue, set the teamcity.git.use.native.ssh=true build configuration parameter. Alternatively, you can temporarily downgrade Git LFS to a version earlier than 3.0.0. This issue will be fixed in TeamCity 2021.2.1.\n\nC# Script builds may fail if .NET profiling is enabled\n\nRunning a build with C# Script steps on .NET with enabled profiling may result in the \"Failed to create CoreCLR, HRESULT: 0x80004005\" error. This issue can occur only if .NET is launched inside a Docker container or in Windows Subsystem for Linux (WSL).\n\nTo work around it, add an environment variable COMPlus_EnableDiagnostics=0 to your build configuration.\n\nTeamCity fails to initialize a cloud client when creating an Amazon EC2 spot fleet profile\n\nWhen creating a cloud profile for an Amazon EC2 spot fleet, users might get the \"Failed to initialize cloud client 'amazon'. An exception occurred while parsing config.\" error. This error only occurs if the \"Specify instance attributes that match your compute requirements\" option is enabled in the current fleet's instance type requirements.\n\nTo work around this issue, please remove the InstanceRequirements block from the fleet's JSON configuration file before uploading it to TeamCity. This issue will be fixed in TeamCity 2022.1.\n\nBuilds might fail to publish artifacts to Amazon S3 if AWS KMS is used\n\nAfter updating to 2021.2, builds might start failing on an attempt to publish artifacts to an Amazon S3 bucket encrypted with an AWS KMS key. This issue is caused by the recently added integrity check for build artifacts. To temporarily disable it in a project and workaround the issue, set the teamcity.internal.storage.s3.upload.enableConsistencyCheck=false property on a project level.\n\nThis problem will be fixed in TeamCity 2021.2.3.\n\nCanceled bidirectional agent-server communication protocol\n\nThe support for the bidirectional agent-server communication protocol has been stopped. Since version 2021.2, agents will connect to the server exclusively via the unidirectional protocol.\n\nTo upgrade TeamCity from versions earlier than 9.1, where the unidirectional support was first introduced, to 2021.2, use one of the following methods:\n\nUpgrade the server to version 2021.1, wait until all the agents upgrade as well, and then upgrade the server to 2021.2.\n\nUpgrade the server to version 2021.2, uninstall the old agents manually, and then install the new agents.\n\nPerforce automatic labels become default\n\nIf you use VCS labeling for a Perforce root, note that TeamCity now creates automatic labels by default. If you want to continue using static labels, you can revert to the previous behavior by adding the teamcity.perforce.useStaticLabels=true internal property.\n\nFixed inconsistency in build chains clean-up\n\nPreviously, builds in an artifact dependency configuration were never cleaned up if its dependent configuration had a snapshot dependency on another build configuration which was set to be preserved. For example, if C artifact-depends on B and snapshot-depends on A and A is set to be preserved, B was not cleaned up even if the \"Keep artifact dependencies\" option was enabled in C. Now, builds in the artifact dependency configuration (C) will be cleaned up properly, in full accordance with the clean-up rules.\n\nThis fix restores the intended behavior, but we recommend that you review your clean-up settings to ensure no builds will be cleaned up unexpectedly after the upgrade.\n\nPlanned deprecation of Java 8 in TeamCity Server 2022.04\n\nTeamCity 2021.2 Server supports Java versions 8 and 11, but Java 8 support will be discontinued in TeamCity 2022.04, in April 2022. If you use a non-bundled version of Java 8, we highly recommend that you migrate your server to Java 11 until the 2022.04 release.\n\nNote that TeamCity is not compatible with Java 17, which makes Java 11 the only version planned for support in TeamCity Server 2022.04.\n\nBundled Amazon Corretto Java has been updated to version 11.0.12.7.1 in the TeamCity server and agent Docker images for Windows and Linux.\n\nBundled Tomcat has been updated to version 8.5.72.\n\nBundled JaCoCo has been updated to version 0.8.7.\n\nBundled Ant has been updated to version 1.10.11.\n\nThe Bundled Kotlin compiler, used in TeamCity DSL, has been updated to version 1.5.31.\n\nThe bundled dotCover tool has been updated to version 2021.2.2.\n\nThe following notifications plugins are no longer actively used and thus unbundled from TeamCity:\n\nJabber/XMPP\n\nRSS feed support\n\nTo proceed using their functionality in TeamCity 2021.2, you need to download the required plugin via the link above and install it as described here.\n\nChanges from 2021.1.3 to 2021.1.4\n\nUpdates in TeamCity Agent Docker images for Linux:\n\nGit is updated to version 2.25.1.\n\nThe Perforce Helix Core client (p4) is updated to version 2021.1/2179737.\n\nChanges from 2021.1.2 to 2021.1.3\n\nNo potential breaking changes.\n\nChanges from 2021.1.1 to 2021.1.2\n\nIf you run a personal build that is a part of a build chain, all its dependency builds will now be run as personal builds as well.\n\nHowever, if you enable the reuse of suitable builds in the dependency settings, TeamCity will try to optimize the chain whenever possible. If running a personal dependency build does not bring any value or contradicts the checkout rules, TeamCity will use a finished non-personal build instead.\n\nChanges from 2021.1 to 2021.1.1\n\nNo potential breaking changes.\n\nKnown Issues\n\nBuilds that use Git submodules might fail with the \"Failed to perform checkout on agent\" error. To prevent it, you need to set a branch for each used submodule in .gitmodules.\n\nThis problem will be fixed in version 2021.1.2, but you can already download and install our Git plugin with the fix here.\n\nIf you have added the teamcity.nuget.feed.async.request.enabled internal property to work around this issue in 2021.1, remember to remove it on upgrading to 2021.1.1.\n\nVCS roots of archived subprojects are now hidden by default on the Project Settings | VCS Roots page. You can display them by enabling the including archived filter option.\n\nChanges from 2020.2.x to 2021.1\n\nNo potential breaking changes.\n\nKnown Issues\n\nWhen trying to load a NuGet package which name contains the . (dot) character, users get the \"Could not find acceptable representation\" exception in the build log. This is caused by the issue in the new performance optimization algorithm: it truncates the filename to the part preceding the first dot. To work around this issue, please download the fixed NuGet Support plugin here and upload it in Administration | Plugins. Alternatively, you can temporarily disable the new optimization mode by setting the teamcity.nuget.feed.async.request.enabled internal property to false â note that this property has to be removed after upgrading to TeamCity 2021.1.1.\n\nGit Use Mirrors is deprecated in favor of Checkout Policy\n\nGit VCS roots now receive the new Checkout Policy option that replaces the Use Mirrors checkbox and provides more flexibility. On upgrading, the roots' settings will keep their selected states. However, Git roots' settings in Kotlin DSL specifications need to be updated.\n\nThe useMirrors parameter in the Kotlin DSL of Git VCS roots is deprecated and replaced by the checkoutPolicy parameter that supports the following values: AUTO (default), USE_MIRRORS, NO_MIRRORS, SHALLOW_CLONE.\n\nDeprecated non-portable Kotlin DSL\n\nNon-portable Kotlin DSL format is deprecated. It is no longer possible to create new projects in this format. For compatibility, projects that are already stored in this format will continue working.\n\nChanged default port for Windows installers\n\nThe default port in the TeamCity installer for Windows has been changed to 8111. Now, both tar.gz and exe installers use the same port.\n\nOR as default operator for Lucene search\n\nTeamCity Lucene-based search now uses the OR operator by default instead of AND. This corresponds to the default Lucene syntax and helps optimize the search behavior and reduce its index size.\n\nSVG build status icon by default\n\nThe build status icon, available via the default http://<TeamCity Server host>:<port>/app/rest/builds/<buildLocator>/statusIcon REST API endpoint, is now provided in the SVG format instead of PNG. The statusIcon.svg endpoint is still supported for compatibility with existing scripts.\n\nTo get a PNG icon, use the statusIcon.png endpoint.\n\nUnbundled old versions of REST API\n\nThe following old versions of REST API have been unbundled: 6.0, 7.0, 8.1, 9.0, 9.1. If this change causes any problems for your setup, please contact us via any feedback channel.\n\nBundled Amazon Corretto Java has been updated to version 11.0.11.9.1 in the TeamCity server Docker images and Windows installers.\n\nBundled Ant has been updated to version 1.10.10. Note that this version requires Java 8 or later.\n\nBundled dotCover and ReSharper CLT have been updated to version 2021.1.2.\n\nBundled JaCoCo has been updated to version 0.8.6.\n\nThe Bundled Kotlin compiler, used in TeamCity DSL, has been updated to version 1.4.32.\n\nBundled Kotlin, used in the Kotlin Script build runner, has been updated to version 1.5.0.\n\nJGit version, used in the Git plugin, has been updated to 5.10.0.202012080955-r.\n\nSVNKit, used in Subversion VCS roots, has been updated to version 1.10.3.\n\nThe My Settings & Tools page has been renamed to Your Profile.\n\nChanges from 2020.2.3 to 2020.2.4\n\nVerifying NuGet used in NuGet dependency trigger\n\nTo ensure that the integration with NuGet is secure, TeamCity now checks if a trusted NuGet installer is used when starting builds on Windows with a NuGet dependency trigger. If your triggers use a NuGet version installed via Administration | Tools, this verification will go smoothly, with no user actions required. Otherwise, you might get the \"Problem with NuGet Dependency Trigger\" error. The recommended solution is to switch all affected triggers to any NuGet version that has been regularly installed via the TeamCity UI. Such versions automatically appear in the NuGet.exe drop-down menu in the trigger's settings. Alternatively, if you need to use a custom NuGet executable and absolutely trust it, you can add it to the whitelist by specifying the following internal property:\n\nteamcity.nuget.server.cli.path.whitelist=<disk>:\\\\<path-to-executable>\\\\NuGet.exe\n\nSSH runners: change in authentication with default key\n\nIn this version, we've changed the behavior of SSH authentication with the default private key in the SSH Exec and SSH Upload build runners. Previously, when authenticating via SSH during a build, a build agent would use the username configured in the agent's SSH config or, if it's missing, the name of the OS user who runs this agent. The value of the optional Username field in the build step's settings would always be ignored. Now, if this value is specified, the agent will use it for SSH authentication instead of the one in the SSH config.\n\nIf you have previously configured an SSH username directly inside build steps and the Default private key authentication method is selected in these steps, make sure that this username is still relevant and allows for successful authentication.\n\nChanges from 2020.2.2 to 2020.2.3\n\nIn the TeamCity agent Docker image, Docker has been updated to version 19.03.14 and Docker Compose has been updated to version 1.28.5.\n\nSBT, used in the Simple Build Tool (Scala) plugin, has been updated to version 1.4.7.\n\nChanges from 2020.2.1 to 2020.2.2\n\nIntelliJ Platform Compatibility\n\nIntelliJ IDEA version 2019.2 and earlier, as well as other IntelliJ-based products released prior to IntelliJ platform version 193, is no longer supported by the IntelliJ Platform plugin. See the version compatibility table for details.\n\nKotlin, used in TeamCity DSL, has been updated to version 1.4.21.\n\nOther Updates\n\nThe teamcity.tests.recentlyFailedTests.file system property contains the full path to a file with the recently failed tests and can be used to reorder risk tests in custom build runners. Previously, it was always generated by default. Now, it is only provided if the used build runner is set to reorder test runs or if the teamcity.internal.tests.provide.recentlyFailedTests parameter is set to true.\n\nChanges from 2020.2 to 2020.2.1\n\nNo potential breaking changes.\n\nKnown Issues\n\nWindows Docker images of the TeamCity server don't allow restarting the server from the UI. See how to stop and start the server via the command line.\n\nBreaking change for Linux Docker images of TeamCity Server: non-root user by default\n\nFollowing the security practices we've applied to our Agent Docker images, the TeamCity Server Docker images for Linux now run under a non-root user by default.\n\nWhen trying to run a Linux image under a default user, you will get the \"Permission denied\" error. To prevent it, you need to change the ownership over the host data directories: run chown -R 1000:1000 applied to the required volumes. For large directories, this operation may take a long time and slow down the disk performance.\n\nAlternatively, you can start the container under the root user by passing the -u 0 parameter to the docker run command. This is a quick workaround which allows saving time on changing the directories' ownership. However, we suggest that you stick to the chown approach in the long term.\n\nNo auto prefix for dotnet run command line parameters\n\nSince this version, the .NET build runner does not apply -- before the dotnet run parameters. Previously, the runner added this prefix automatically which made it impossible to pass the custom options to the run command. To fix this, we've disabled the previous behavior.\n\nUnfortunately, the affected .NET build steps cannot be converted automatically on upgrading. If any of your steps pass arguments to the running .NET application, please make sure to alter these steps and prepend the respective parameters with --.\n\nBundled Tomcat has been updated to version 8.5.61.\n\nChanges from 2020.1.x to 2020.2\n\nFor TeamCity servers using a PostgreSQL database, the JDBC driver must be upgraded to 42.x version. Otherwise, a critical performance degradation may occur.\n\nKnown Issues\n\nIf upgrade fails with an error in OptimizeAndCleanupIdsGroupsTableConverter, please apply the workaround described in this issue.\n\nTeamCity agent Docker images with the latest tag do not bundle Docker.\n\nTo be able to run Docker in a TeamCity 2020.2 agent, download the teamcity-agent image with the {TEAMCITY_VERSION}-linux-sudo tag instead. More information is available in our Docker Hub documentation.\n\nNew Header by Default\n\nThe new header is enabled in both the classic and Sakura UIs. Some plugins developed for the previous header might not work in the new one. With our new API, you can make your custom plugins compatible with the new header or write new ones using modern web technologies.\n\nIf you have troubles displaying valuable information or actions in this header and updating plugins is not a convenient option, you can set the teamcity.ui.useClassicHeader=true internal property â this will switch your TeamCity header to the previous view. Please note that this is not a recommended solution as we might disable the obsolete header in the future versions.\n\nReindexing build search\n\nLucene version in TeamCity search has been updated to 8.5.1. On upgrading, TeamCity will reindex all builds on the server which might take some time and load the CPU. During reindexing, some builds might not be present in the search results.\n\nBundled Python runner\n\nThe external Python build runner is no longer supported. All existing build steps will continue to work normally, but we recommend switching existing Python steps to the new bundled runner.\n\nPreviously, the Build file field of the Gradle runner was set to build.gradle by default. We have removed this default value as some users rely on custom names of build files and prefer to let Gradle decide what file to choose.\n\nIf build.gradle was selected as a build file in your Gradle steps, this setting will remain. In projects whose settings are stored in VCS, TeamCity will prompt to commit the respective change so the build.gradle property is explicitly specified in the versioned project settings.\n\nThe Gradle runner now displays test names based on the displayName properties assigned to the respective test methods. If your Gradle tests are annotated with a custom displayName property (for example, a JUnit 5 test with the @DisplayName annotation), their names will change in TeamCity on upgrading. This might break test and investigation history in respective builds. To prevent this, consider switching the behavior back with the teamcity.internal.gradle.testNameFormat=name internal property.\n\nNew responsibility for secondary nodes\n\nSince version 2019.2, a secondary node allows user actions if at least one responsibility is assigned to it. In 2020.2, we have added a new responsibility â \"Processing user requests to modify data\" (version 2023.05 update â this responsibility was renamed to \"Handling UI actions and load balancing user requests\"). Nodes with this responsibility can process all currently supported user actions and allow changing project settings. Without it, a node will provide a read-only interface.\n\nOn upgrading, this responsibility will be automatically enabled on all your secondary nodes that have at least one other responsibility. This will ensure no current functionality of these nodes is affected. To allow user actions on new secondary nodes, you have to manually enable the new responsibility in Administration | Server Configuration.\n\n.NET in TeamCity server and agent Docker images (both Windows and Linux) have been updated to version 3.1.403.\n\nJava in TeamCity Docker images has been updated:\n\nOn Windows server images: to Amazon Corretto x64 v.11.0.9.11.2\n\nOn Linux server images: to Amazon Corretto x64 v.11.0.9.11.\n\nOn Windows and Linux agent images: to Amazon Corretto x64 v.8.272.10.3\n\nJava bundled in the TeamCity server and agent Windows installers has been updated to version 11.0.9.11.2.\n\nBundled Tomcat has been updated to version 8.5.57.\n\nThe SAC Windows image in the TeamCity server Docker containers has been updated to version 2004. Windows LTS version is 1809, as in TeamCity 2020.1.\n\nThe Linux image in TeamCity server Docker containers has been updated to version 20.04 (LTS).\n\nBundled dotCover and ReSharper CLT have been upgraded to version 2020.2.4.\n\nThe deprecated Visual Studio 2003 build runner is disabled in TeamCity. We recommend using the .NET runner instead.\n\nIf you were actively using the VS 2003 runner and cannot easily migrate to the .NET runner, please let us know about it via any of our feedback channels.\n\nJDBC drivers for external databases, suggested on the fresh TeamCity installation, have been updated to the following versions:\n\nMySQL - 8.0.22\n\nMSSQL - 8.4.1\n\nPostgreSQL - 42.2.18\n\nWhen detecting GitHub issues, TeamCity now filters out pull requests that have no issues assigned to them. If you need to display such independent pull requests in the issue log, you can disable this filter by setting the teamcity.issues.github.filter.pull.requests=false internal property.\n\nEmail Notifier now uses the same versions of the TLS protocol as supported by the current TeamCity server's JVM.\n\nChanges from 2020.1.4 to 2020.1.5\n\nNo potential breaking changes.\n\nChanges from 2020.1.3 to 2020.1.4\n\nBundled Amazon Corretto Java has been updated to version 11.0.8 in the TeamCity server installers and Docker images.\n\nMercurial, dropped in version 2020.1.2, is again supported in the Windows Server Core agent Docker images.\n\nChanges from 2020.1.2 to 2020.1.3\n\nThe .NET build runner now supports earlier versions of Visual Studio and MSBuild. The currently supported versions are: Visual Studio 2010 or later, MSBuild 4 / 12 or later.\n\nKnown Issues\n\nIf you try to re-run a build that has an artifact dependency but not snapshot dependency on another build, the Re-run build dialog will not load.\n\nThis issue will be fixed in TeamCity 2020.1.4. To work around it in version 2020.1.3, follow this instruction.\n\nChanges from 2020.1.1 to 2020.1.2\n\nMercurial support has been dropped for our Windows Server Core agent Docker images. If you need to use Mercurial on Windows Server Core agents, consider pulling the previous version of the agent Docker image â 2020.1.1.\n\nChanges from 2020.1 to 2020.1.1\n\nThe .NET runner introduces the custom command option. Note that if you downgrade TeamCity to the previous version after configuring the custom .NET command, the respective build steps will be ignored during the build.\n\nThe Linux version used in the TeamCity server and agent Docker images has been updated to 4.19.76-linuxkit.\n\nKnown Issues\n\nIn the TeamCity classic UI, the Projects link in the header is missing the expand button.\n\nTo work around this issue, please follow the instruction described here.\n\nChanges from 2019.2.x to 2020.1\n\nNo potential breaking changes.\n\nKnown Issues\n\nJira Cloud Integration build feature requires specific VCS URL\n\nThe Jira Cloud API, used by the new Jira Cloud integration build feature, requires sending a server URL in a specific format. Because of that, the build feature does not support VCSs like Perforce, TFS, and SVN out of the box.\n\nTo address this issue, we have updated the responsible plugin, and you can find it attached to the related issue in our tracker. Please download the fixed plugin and install it as described here.\n\nThe bundled Jira Cloud plugin will be automatically updated with this fix in our next release.\n\nThe feature might also fail to resolve some Git paths that do not correspond to the format expected by the Jira Cloud API. In this case, you can either change the URL manually (for example, from git@<vcs_address>:<workspace_ID>/<repo_name>.git to ssh://git@<vcs_address>/<workspace_ID>/<repo_name>.git) or download the fixed plugin as described above.\n\nJira Cloud Integration feature does not support legacy Jira Cloud domain\n\nCurrently, the new Jira Cloud integration build feature supports only atlassian.net domains. We have added the support of the legacy jira.com domain in the fixed version of the responsible plugin. If your Jira Cloud server resides on the jira.com domain, you can download the plugin, attached to the related issue, and install it as described here.\n\nThe bundled Jira Cloud plugin will be automatically updated with this fix in our next release.\n\nBad Redirect URI error when authenticating in Slack\n\nTo be able to sign in to Slack from TeamCity, you need to specify all the possible URIs of the TeamCity server as Redirect URLs in the Slack app's settings.\n\nIf you use nginx to set up TeamCity behind a proxy server, you might still get the bad_redirect_uri error when trying to establish a connection with Slack. This error is caused by the mismatch between the nginx and Tomcat configuration.\n\nTo work around this issue, download the fixed plugin, attached to the related issue, and install it as described here. Alternatively, you can try updating the Tomcat settings.\n\nThe bundled Slack plugin will be automatically updated with this fix in our next release.\n\nProblems with built-in authentication in upgraded 2020.1 EAP1 installations\n\nIf you had installed the 2020.1 EAP1 build in terms of our Early Access Program, you might experience problems with signing in to TeamCity via the built-in authentication. This issue might occur after upgrading from any 2020.1 EAP version (EAP1 or any later version to which it was upgraded) to the release 2020.1 build.\n\nTo work around this problem, please send the following query to the TeamCity database:\n\nUPDATE users SET algorithm = 'BCRYPT' WHERE password like '$2a$07$%' and algorithm = 'MD5';\n\nChanges in Java support on server and agents\n\nJava 11 has been bundled with the TeamCity server Windows installer and server Docker images instead of Java 8.\n\nTeamCity agents stop supporting Java versions earlier than 8. If any of your agents run on earlier versions of Java, make sure to upgrade their JRE so you can continue running builds on these agents.\n\nNew format of env.JDK_ environment variables\n\nTo better align with the current and future Java versions we've introduced a new format of env.JDK_ environment variables.\n\nStarting with 2020.1, the format is as follows: env.JDK_<major>_<minor>[_x64]. For example: env.JDK_1_6, env.JDK_1_7, env.JDK_1_8, env.JDK_11_0_x64.\n\nThis way, if you are using rather old Java 1.4, the proper variable is env.JDK_1_4, while env.JDK_14_0 will be used for Java 14.0.\n\nFor backward compatibility, previous environment variables, such as env.JDK_16 or env.JDK_18, will be generated too, but these variables will no longer be shown in the TeamCity autocompletion pop-up menus.\n\nIf you are using these environment variables in your build scripts, we encourage you to migrate to the new format.\n\nSee the related issue.\n\nNeed for plugin recompilation\n\nPlugins which implement some build runners might need to be recompiled/upgraded.\n\nThe corresponding error might look like java.lang.NoSuchMethodError: jetbrains.buildServer.controllers.admin.projects.BuildRunnerBean.getPropertiesBean when a new build step for the corresponding custom build runner is created or updated.\n\nSee the related issues about the Checkmarx plugin and the SonarQube Runner plugin.\n\nAgent Docker images run under non-root user\n\nTo comply with recommended security practices, the TeamCity agent Docker images now run under a non-root user.\n\nThis change might affect the following use cases:\n\nTo create/update a custom image based on the standard TeamCity agent image, you might need to switch to the root user first (see the related issue for details).\n\nIf you mount a host directory to a container, you might get the \"Permission denied\" error. To prevent this issue, try any of the following workarounds:\n\nSet the UID of the directories' owner to 1000 with the chown command.\n\nSend the --user argument with the docker run command to set the same UID for the Docker user as that of the host machine. For example, use docker run -it --user $(id -u) ....\n\nNote that TeamCity automatically creates volumes for writable directories, and there is usually no need to map them explicitly. Consider omitting any explicit references to prevent the permission issues.\n\nDeprecated Windows Tray Notifier\n\nTeamCity Windows Tray Notifier has been deprecated in favor of the new Browser Notifier extension.\n\nWindows Tray Notifier will continue working with the new version of TeamCity, but we recommend you trying the new extension instead. Note that since version 2020.1, the My Settings & Tools | Notification Rules | Windows Tray Notifier tab in TeamCity has been renamed to Browser Notifier.\n\nBundled Kubernetes Support plugin does not contain Helm runner\n\nThe Kubernetes Support plugin is now bundled with TeamCity. On upgrade, it will replace the external plugin if it is installed on your TeamCity server. Note that the bundled plugin does not contain the Helm build runner. To continue using this runner in your build configuration, please install the new external plugin.\n\nLimitation of CORS support for writing operations\n\nTeamCity improves the security of REST API integration mechanisms by introducing CSRF tokens. This change will not affect the behavior of custom integration scripts unless they rely on Cross-Origin Resource Sharing (CORS) in writing operations and the rest.cors.origins internal property is enabled in TeamCity (it is disabled by default).\n\nPreviously, CSRF protection was presented in TeamCity with the verification of Origin/Referer headers of HTTP requests. To improve TeamCity CSRF protection, this method has been disabled in favor of a more secure one â CSRF tokens. Since this release, TeamCity stops supporting the CORS mechanism for POST/PUT/DELETE REST API requests. Cross-origin GET requests' headers are processed as before and still require CORS configuration.\n\nIf necessary, you can enforce verification of Origin/Referer headers for writing CORS operations by setting the teamcity.csrf.paranoid=false internal property. Note that this is a transitory and less secure solution: we strongly recommend refactoring your existing requests so they comply with the new security policy and provide a token within a CSRF header or parameter. A CSRF token can be obtained via the GET https://your-server/authenticationTest.html?csrf request and provided via the X-TC-CSRF-Token HTTP header to the write CORS requests.\n\nBundled IntelliJ IDEA has been updated to version 2020.1.1.\n\nBundled Ant has been updated to version 1.9.14.\n\nBundled Tomcat has been updated to version 8.5.54.\n\nBundled Maven has been updated to version 3.6.3.\n\nKotlin, used in TeamCity DSL, has been updated to version 1.3.70.\n\nJDBC drivers for external databases, suggested on the fresh TeamCity installation, have been updated to the following versions:\n\nMySQL - 8.0.20\n\nMSSQL - 8.2.2\n\nPostgreSQL - 42.2.12\n\nREST API changes\n\nFiltering test occurrences by a branch (.../app/rest/testOccurrences?locator=branch(XXX) request) has been changed. It used to support only branch names with case-sensitive matching. Now, the XXX value supports branch locators (the same as when filtering builds): it is case-insensitive by default and matches the <default> branch display name.\n\nOther changes\n\nNow, a user cannot assign a role to another user, if this role has more permissions than the role of the current user.\n\nIf you experience troubles with certain roles being unavailable to users after upgrading to 2020.1, make sure these roles don't comprise any permissions that exceed the rights of the respective project administrators.\n\nTeamCity has dropped support for Internet Explorer. Please use Microsoft Edge instead.\n\nSince this version, the new .NET runner, introduced in TeamCity 2019.2.3, is not compatible with the obsolete external .NET CLI Support plugin (used in versions 2017.1 and earlier). If you have previously installed this plugin, please uninstall it from your server to be able to use the new .NET runner.\n\nChanges from 2019.2.3 to 2019.2.4\n\nNo potential breaking changes.\n\nChanges from 2019.2.2 to 2019.2.3\n\nReworked .NET build runner\n\nThe .NET CLI (dotnet) build runner has been refactored and renamed to .NET thus emphasizing that now it supports all .NET-related operations previously implemented in TeamCity as multiple build steps.\n\nAll existing .NET CLI (dotnet) steps will continue working as usual under the new .NET name, with no additional tuning required.\n\nWe stop providing active support for the MSBuild, Visual Studio (sln), Visual Studio 2003, and Visual Studio Tests runners. These steps are left for compatibility of existing build configurations with new versions of TeamCity. We recommend switching all your affected build steps to the .NET runner to receive new features and support in our following versions.\n\nSee the .NET description for more information about the new .NET step and migration notes.\n\nIf you face any problems with migration to the .NET runner or encounter other related issues, do not hesitate to contact us via any convenient feedback channel.\n\nKnown Issues\n\nHandshake failure on establishing SSL connection\n\nSome users might get the \"Received fatal alert: handshake_failure\" error when the TeamCity server attempts to establish an SSL connection. The problem is caused by the broken sunec.dll in JRE bundled with TeamCity 2019.2.3.\n\nTo check if this problem has affected your installation, open the <TeamCity_installation_directory>/jre/bin/sunec.dll file. If there is a JSON code in this file, your server is affected. To work around the problem, please follow the steps described in the related issue.\n\nNuGet feed credentials for external repositories do not work with .NET runner\n\nThe .NET build runner currently does not support using NuGet feed credentials for authentication in external repositories.\n\nTo work around this issue in TeamCity 2019.2.3, download the patched .NET Packages Support plugin and install it as any other additional plugin. The bundled .NET Packages Support plugin will be automatically updated with the fix in our next release.\n\nAWS region us-east-1 cannot be set in S3 artifact storage settings\n\nIf the us-east-1 region is selected in S3 artifact storage settings, it will be automatically reset to another available region on saving the settings. This is caused by the incorrect bucket location returned for us-east-1 from AWS.\n\nTo work around this issue in TeamCity 2019.2.3, download the patched TeamCity S3 Storage plugin and install it as any other additional plugin. The bundled S3 Storage plugin will be automatically updated with the fix in our next release.\n\nThe bundled version of Java in Windows installers of TeamCity Server and Agent as well as in the Docker images is updated to Amazon Corretto 8.252.09.1.\n\nChanges from 2019.2.1 to 2019.2.2\n\nCaching Git submodules\n\nTo improve performance on agent checkout, TeamCity caches regular Git repositories on agents. Since this version, it also caches Git submodules.\n\nIf your custom scripts or settings depend on the main alternates source for submodules, and it causes Git to operate with errors, consider one of the following workarounds:\n\nDisable the new mirroring mechanism by setting the build parameter teamcity.internal.git.agent.submodules.useMirrors to false.\n\nModify your custom settings to point at the parent git directory instead of the exact source directory.\n\nTeamCity Visual Studio Add-in Web installer has been updated to ReSharper version 2019.3.2.\n\nChanges from 2019.2 to 2019.2.1\n\nNo potential breaking changes.\n\nChanges from 2019.1.x to 2019.2\n\nNo potential breaking changes.\n\nKnown Issues\n\nPotential issues with restoring NuGet packages in .NET projects\n\nTeamCity might fail to restore NuGet packages if a build comprises at least one .NET CLI (dotnet) step and an MSBuild or Visual Studio (sln) build step (or both).\n\nThis issue is caused by the difference in paths to cache directories between these build runners.\n\nThe MSBuild and Visual Studio (sln) runners use the default path to the NuGet global cache while the .NET CLI (dotnet) runner redefines this path (for example, when run inside a Docker container).\n\nThe recommended workaround is to use the NuGet Installer build runner instead of the .NET CLI (dotnet) runner for restoring packages.\n\nSwitch to 64-bit Bundled Java in Windows installer and Docker images\n\nThe bundled version of Java in Windows installers of TeamCity Server and Agent as well as in the Docker images is now 64-bit Amazon Corretto 8 (previous TeamCity versions bundled 32-bit Java, and TeamCity 2019.1 bundled AdoptOpenJDK).\n\nIf you were using the default bundled Java on Windows, make sure the following conditions are satisfied:\n\nThe TeamCity server and agents operate on the 64-bit Windows OS. If you need to use a 32-bit OS, you need to install and use 32-bit Java to run TeamCity;\n\nIf the TeamCity server has manually configured memory settings (the TEAMCITY_SERVER_MEM_OPTS environment variable is defined), the value of the -Xmx parameter should be increased (recommended to twice the previous value). Before increasing the value, make sure the machine has enough physical memory for that.\n\nIf you use Microsoft SQL Server as the TeamCity database with the integrated MS SQL authentication, the 64-bit sqljdbc_auth.dll native library has to be present in the due location.\n\nIf there was any custom logic executing native tools on the server, check that it still works with the new process bitness.\n\nDiscontinued Running Builds Node\n\nThe Running Builds Node is discontinued. In a multinode setup, you can instead configure a secondary node with the \"Processing data produced by running builds\" responsibility.\n\nAutomatic management of git fetch memory\n\nTeamCity now can automatically manage the amount of memory used by the git fetch process.\n\nIf you have previously used the teamcity.git.fetch.process.max.memory internal property to set the memory amount available for fetching in each VCS root, you can now disable it to delegate the detection of memory consumption to the TeamCity server. To control the limit of available memory, use the teamcity.git.fetch.process.max.memory.limit property.\n\nBundled IntelliJ IDEA has been updated to version 2019.3.\n\nKotlin, used in TeamCity DSL, has been upgraded to version 1.3.60.\n\nThe Docker client in the TeamCity Linux agent image has been upgraded to version 19.03.3 to prevent the problems with unexpected Docker stop (see the related Docker issue).\n\nDocker Compose has been updated to version 1.24.1.\n\nBundled dotCover and ReSharper CLT have been upgraded to version 2019.2.3.\n\nUnbundled VCS Support plugins for ClearCase and SourceGear Vault\n\nThe VCS Support plugins for ClearCase and SourceGear Vault have been unbundled. To be able to use any of these VCS types in TeamCity, download and install the required plugin as described here.\n\nChanges from 2019.1.4 to 2019.1.5\n\nIn the TeamCity agent Docker image, Docker has been updated to version 19.0.3 and Docker Compose has been updated to version 1.24.1.\n\nChanges from 2019.1.3 to 2019.1.4\n\nThe bundled Java was updated to OpenJDK 8u222 (except for the Docker Windows TeamCity images).\n\nKnown Issues\n\nUnavailable Default Credential Provider Chain option for Amazon ECR\n\nThis issue has been fixed in TeamCity 2019.1.5.\n\nDue to recent changes in our Docker Support plugin, the \"Default credential provider chain\" option becomes unavailable in the Amazon ECR connection settings.\n\nIf this option was previously enabled in some ECR connection and you make any changes to this connection, the state of this option will be automatically set to false. When any build will try to use this connection, it will fail to start with the \"Access key cannot be null\" error.\n\nTo work around this problem without upgrading to 2019.1.5, download the fixed Docker Support plugin from the related issue and upload it on the Server Administration | Plugins List page.\n\nMissing packages in NuGet feed\n\nThis issue has been fixed in TeamCity 2019.1.5.\n\nIn certain cases, when a build is supposed to create and publish several NuGet packages to a NuGet feed, and the package indexing is enabled, some packages might not be published to the feed. This problem is caused by recent changes in NuGet Packages Indexer.\n\nTo work around this problem without upgrading to 2019.1.5, download the fixed NuGet Support plugin from the related issue and upload it on the Server Administration | Plugins List page.\n\nChanges from 2019.1.2 to 2019.1.3\n\nKnown issues\n\nWhen using versioned settings, build history can be lost on importing settings from VCS. Details.\n\nThe bundled ReSharper Command Line Tools (Inspections and Duplicates Finder) have been upgraded to version 2019.2.1.\n\nChanges from 2019.1.1 to 2019.1.2\n\nThe Running Builds Node is deprecated and will be discontinued in TeamCity 2019.2. In a multinode setup, you can instead configure a secondary node with the \"Processing data produced by running builds\" responsibility.\n\nKnown issues\n\nWhen using versioned settings, build history can be lost on importing settings from VCS. Details.\n\nIf you use the .NET Core (\"dotnet\") steps on Windows agents, you can get the \".NET SDK was not found\" error if you have .NET Core runtime (not SDK) installed on the agent in the location like C:\\Program Files (x86)\\dotnet. As a workaround, set the env.DOTNET_HOME parameter to the location of .NET Core SDK.\n\nSee the related issue for details.\n\nChanges from 2019.1 to 2019.1.1\n\nThe bundled IntelliJ IDEA has been updated to 2019.1.3.\n\nThe bundled ReSharper tools (Inspections and Duplicates Finder) have been upgraded to 2019.1.0-eap08d version.\n\nChanges from 2018.2.x to 2019.1\n\nTags are now mandatory for all Amazon instances run by TeamCity, which helps identify them. If you use integration with Amazon EC2, make sure to add the ec2:CreateTags resource-level permission in Amazon.\n\nChanged behavior of reversed dependencies properties\n\nStarting with 2019.1, the behavior of reverse.dep parameters has been changed, and this change can affect your existing builds. In versions prior to 2019.1, when a build chain is triggered, TeamCity only took into account the reverse.dep parameters specified in the top-most build of the chain, i.e. in the build which depends on all other builds. If some intermediate builds of the chain had reverse.dep parameters, they were ignored.\n\nAfter this fix this is no longer the case. Now, when a build chain is triggered, all reverse.dep parameters specified in all nodes of the build chain will be processed.\n\nLazy agent tool loading\n\nAgent tools (located under the <agent_installation>/tools directory on agents) are now transferred to an agent not on the agent upgrade, but right before the first build that uses the respective tool. You might need to update the build configuration settings so TeamCity knows which tools are required by the builds.\n\nBefore starting a build on an agent, TeamCity checks for the references to teamcity.tool.<tool_ID> configuration parameters to collect the set of tools used by the build. If some tool is referenced via this parameter, TeamCity will make sure this tool is present on the agent before the build logic starts executing.\n\nIf some of your builds use tools on agent assuming their locations under the <agent installation>/tools directory, such references should be changed to a TeamCity-provided parameter reference. Paths like <agent_installation>/tools/<tool_ID> used in TeamCity settings should be changed to the %teamcity.tool.<tool_ID>% parameter reference. For example, ../tools/maven3.4.5/bin/mvn should be replaced with %teamcity.tool.maven3.4.5%/bin/mvn.\n\nThe requirements for the .NET Framework version used by ReSharper tools have changed. Now, if you use ReSharper tools (dotCover and ReSharper Inspections) of version 2018.2 or newer (including the version bundled with TeamCity 2019.1) in your build configuration, the requirements to build agents will change to .NET Framework 4.6.1 or newer. Make sure to update .NET Framework on agents.\n\nToken-based authentication enabled by default\n\nOn upgrading to 2019.1, the Token-Based Authentication module will be enabled by default, so you can generate access tokens and start using them right away.\n\nNew CSP header value\n\nNow TeamCity web UI uses more restrictive value for the Content-Security-Policy HTTP header. This provides extra security at the expense of prohibiting usage of the web resources not hosted on the TeamCity server.\n\nIf you rely on external resources (for example, in the build report tabs content or by using not yet updated plugins), you can specify new header value in the teamcity.web.header.Content-Security-Policy.protectedValue=<full_header_value> internal property (and teamcity.web.header.Content-Security-Policy.adminUI.protectedValue property for the web pages in Administration area). Plugins can use ContentSecurityPolicyConfig open API interface to add to the value configured.\n\nChange in dotCover artifacts\n\nThe dotCover.dcvr hidden artifact is no longer published by default. It is now created in the build temporary folder and removed when the build finishes.\n\nIf you use dotCover and rely on this artifact, specify the path to the %system.teamcity.build.tempDir%\\..\\agentTmp\\dotNetCoverageResults\\dotCover.dcvr file explicitly in the Artifact paths.\n\nThe latest JaCoCo version (0.8.4) has been added to TeamCity.\n\nThe bundled .NET tools (dotCover and ReSharper CLT) have been upgraded to the latest released version, 2019.1.1.\n\nJDBC drivers for external databases suggested on the fresh TeamCity installation have been updated to the following versions:\n\nMySQL - 8.0.16\n\nMSSQL - 7.2.2\n\nPostgreSQL - 42.2.5\n\nNote on beta versions of PowerShell\n\nIf you have been using beta versions of PowerShell, make sure to remove all beta versions earlier than v6.0.0-beta.9 before installing any new released PowerShell version. Due to updates in the PowerShell detector, if the old beta version is installed, TeamCity will use it instead of the new released one.\n\nNote on using Docker and Windows Server with process isolation\n\nIf you use Docker images and Windows Server 2019 with process isolation, build agents may fail to start (read more in Known Issues). To work around the issue, grant the \"Full control\" access to the \"Authenticated Users\" group.\n\nChanges from 2018.2.3 to 2018.2.4\n\nThere is a regression in TeamCity 2018.2.4 related to the data displayed on the unauthorized agents' page: the data on agent authorization, enabling/disabling comments, and the latest activity time has been removed from the page. This data is displayed on the agent details page.\n\nWhen the performance is improved, we will return the data to the unauthorized agents' page.\n\nChanges from 2018.2.2 to 2018.2.3\n\nTeamCity now ships Windows Docker images for 1803/1809 platforms.\n\nKnown issues\n\nRunning builds are not shown on the build configuration page if there are no finished builds. To work around the issue, stop the TeamCity server, replace the TEAMCITY_DIRECTORY/webapps/ROOT/js/ring/bundle.js with the bundle.js file attached to this issue and start the server.\n\nChanges from 2018.2.1 to 2018.2.2\n\nThe bundled Tomcat has been updated to version 8.5.3\n\nThe TeamCity agent Docker image supports .NET Core 2.2\n\nChanges from 2018.2 to 2018.2.1\n\nNo potential breaking changes.\n\nChanges from 2018.1.x to 2018.2\n\nKnown issues\n\nIf upgrade fails with an error in MoveCustomDataStorageToDatabaseConverter or MoveRepositoryStateToCustomDataStorageConverter, apply the workaround from the issue.\n\nIf you're using Subversion externals from the same repository, you may face an issue with incorrect revision detection. A workaround for the problem is described in this issue.\n\nIf you see OutOfMemoryError during TeamCity startup with org.jetbrains.dokka in stack trace, set the internal property teamcity.kotlinConfigsDsl.docsGenerationXmx=768m (as described in this issue)\n\nThe bundled .NET Tools (dotCover and ReSharper CLT) have been upgraded to the latest released version, 2018.1.4\n\nTeamCity 2018.2 comes bundled with IntelliJ IDEA 2018.3.1. The IntelliJ IDEA Project Runner uses JPS 2018.3.1\n\nOpenJDK is bundled in the Windows .exe TeamCity distribution instead of Oracle Java.\n\nNuGet feed\n\nThe parameters that were previously used to reference the global NuGet feed are removed. After upgrading, all of them will be converted to the parameters referencing the default NuGet feed in Root project.\n\nIf you're still using deprecated NuGet feed references in project parameters please update them as following:\n\nGlobal feed name\n\nProject feed name\n\nteamcity.nuget.feed.server\n\nteamcity.nuget.feed.guestAuth._Root.default.v2\n\nteamcity.nuget.feed.auth.server\n\nteamcity.nuget.feed.httpAuth._Root.default.v2\n\nsystem.teamcity.nuget.feed.auth.serverRootUrlBased.server\n\nteamcity.nuget.feed.httpAuth._Root.default.v2\n\nChanges from 2018.1.4 to 2018.1.5\n\nNo potential breaking changes.\n\nChanges from 2018.1.3 to 2018.1.4\n\nKnown issues\n\nBuilds which are running while the server upgrades to 2018.1.4 can get their build log and status truncated, not duly reporting build failure. The build log gets warning with \"__tc_longResponseMarker\" text (details). It is recommended to wait till there are not running builds when upgrading to this version.\n\nMisc\n\nSupport for Microsoft Internet Explorer 10 is discontinued in TeamCity 2018.1.4.\n\nChanges from 2018.1.2 to 2018.1.3\n\nThe latest JaCoCo version (0.8.2) has been added to TeamCity.\n\nKnown issues\n\nIf you use JaCoCo coverage and you decide to downgrade from TeamCity 2018.1.3+ to TeamCity versions 2018.1 - 2018.1.2, you may experience issues requiring manual fixes to make the affected configurations work again.\n\nChanges from 2018.1.1 to 2018.1.2\n\nKnown issues\n\nIf you are using tcWebHooks third-party TeamCity plugin, update it to the latest version before upgrading (details).\n\nWe increased accuracy for recognizing similar TeamCity exit code build problems. The existing investigations and mutes for these build problems will be reset.\n\nThe bundled Tomcat has been updated to version 8.5.32.\n\nChanges from 2018.1 to 2018.1.1\n\nKnown issues\n\nIf you're upgrading from 2018.1 to 2018.1.1 and you want to see the NuGet packages missing due to issues TW-55703 and TW-55833, do the following:\n\nClean-up .teamcity/nuget/packages.json files in the build artifacts. Consider using this PowerShell script:\n\n> cd \"%TeamCityDataDir%\\system\\artifacts\\\" > Get-ChildItem -Recurse | Where-Object { $_.FullName -match '\\.teamcity\\\\nuget\\\\packages\\.json' } | Remove-Item\n\nOn the Administration | Diagnostics | Caches page, reset the \"buildsMetadata\" cache and wait while re-indexing is finished. To temporary increase indexing speed, see the following tip.\n\nDocker Images\n\nSince 2018.1.1 TeamCity has multiplatform Docker images marked by the latest and version number tags published in Docker Hub, for example, jetbrains/teamcity-server or jetbrains/teamcity-server:2018.1.1. This allows using the same Docker image reference for Linux and Windows docker containers: see TW-55061 for details.\n\nChanges from 2017.2.x to 2018.1\n\nKnown issues\n\nWhile publishing NuGet packages into the TeamCity NuGet feed in multiple build steps, only the packages published by the first build step will be visible. See TW-55703 for details. If you experience problems with download of NuGet packages published within archives see TW-55833.\n\nStricter rules for parameter names used in parameter references\n\nNames of the Build Configuration parameters are now validated in more strict manner. While already existing parameters should continue to work, it is highly recommended to review the names and use Latin letters and no special symbols. Details\n\nUser self-registration\n\nIf you have Built-in authentication enabled with the \"Allow user registration from the login page\" setting on, the setting will be disabled on upgrade. If you need the registration, make sure the server is not open to unauthorized users access (e.g. not accessible from Internet) and enable the setting via the health item displayed at the top of the administration pages or in the \"Administration | Authentication\" under the \"Built-in\" module settings.\n\nThe IntelliJ IDEA Project Runner uses JPS 2017.3.4 requiring Java 1.8 as the minimal version.\n\nThe bundled ReSharper CLT and dotCover have been updated to version 2018.1.2\n\nNuGet feed\n\nConfiguration of the NuGet feed was moved from the server level to the project level: now each project can have its own feed. The \"NuGet packages indexer\" build feature can be added to build configurations whose artifacts should be indexed.\n\nThe following NuGet feed-related build parameters are deprecated:\n\nteamcity.nuget.feed.auth.server\n\nteamcity.nuget.feed.server\n\nsystem.teamcity.nuget.feed.auth.serverRootUrlBased.server\n\nYou now need to explicitly specify the URL from the NuGet Feed page in the Project Settings.\n\nThe enabled default NuGet feed with all published packages accessed by URL /app/nuget/v1/FeedService.svc/ is now moved to the Root project feed /app/nuget/feed/_Root/default/v2/. It is recommended to switch to new URL in your projects.\n\n.nupkg files are now indexed on the agent side instead of the server which could slightly increase the time of builds for projects with the NuGet Feed feature and the automatic package indexing enabled or for builds with NuGet Packages Indexer build feature.\n\nREST API\n\nREST API uses version 2018.1. The previous versions of the API are still available under /app/rest/2017.2, /app/rest/2017.1 (/app/rest/10.0), app/rest/9.1, /app/rest/9.0, /app/rest/8.1, /app/rest/7.0, /app/rest/6.0 URLs. It is recommended to stop using previous APIs URLs as we are going to remove them in the following releases.\n\nFiltering builds by agent names\n\nWhen agent name contains the parentheses symbols, instead of using agentName:<name>, use \"agentName:(value:<value>)\n\nLocators with \"value:<text>\"\n\nRequests which used \"value:<text>\" locators (e.g. for matching properties) and no \"matchType\" dimension specification will start to use \"equals\" matching by default. Add \"matchType:contains\" to preserve the old behavior. Details\n\nVSS plugin is unbundled\n\nThe Visual SourceSafe plugin is no longer bundled with TeamCity but is available as a separate download. Please contact our support, if you still use this VSS for your builds.\n\nOther\n\nCommit Status Publisher supports Gerrit 2.6+ versions. For support for older Gerrit versions, please turn to our support.\n\nWhen upgrading from TeamCity versions before 9.1, if TeamCity 2018.1 starts and agents are upgraded, but then you decide to roll back the server to the previous TeamCity version, the agents will not be able to connect back to the old server and will need to be reinstalled manually.\n\nMake sure that no HTTP requests from the agents to the server are blocked (e.g. requests to .../app/agents/... URLs)\n\nSince 2018.1, TeamCity uses the full project name with \"/\" instead of \"::\" as the separator for Project - Subproject wherever the full project name is present.\n\nChanges from 2017.2.3 to 2017.2.4\n\nThe Inspections (.NET) and Duplicates Finder (.NET) build steps were renamed to Inspections (ReSharper) and Duplicates finder (ReSharper).\n\nChanges from 2017.2.2 to 2017.2.3\n\nBuild revisions\n\nIn all the build configurations, the builds run before the upgrade will not be reused in the chains and will run anew (only the last build on the default branch is affected if branches are used). This may also result in a clean checkout in the first run build for VCSs like Perforce. The behavior is similar to that after VCS root editing.\n\nSecurity\n\nWhen upgrading to 2017.2.x versions (please ignore when upgrading to 2018.1 and further versions): It is recommended to add \"teamcity.artifacts.restrictRequestsWithArtifactReferer=true\" internal property to enhance security of the server.\n\nChanges from 2017.2.1 to 2017.2.2\n\nKnown issues\n\n(Fixed 2017.2.3) If you use the Artifactory plugin and get the \"Invalid RSA public key\" browser message on opening build step settings, please apply the workaround.\n\nUnder Windows, when TeamCity server is started as a service, \"logs\\teamcity-winservice.log\" file is not created and server startup errors are nowhere to be seen. Details\n\nIDE Plugins\n\nIt is highly recommended to update the IDE plugins for all users to the latest version and then add the teamcity.uploadPersonalPatch.requireAuthorization=true internal property to enhance security of the server.\n\nPerforce VCS Root executable paths\n\nSince TeamCity 2017.2.2, the field which specifies the path to p4 works only on the agent side, for agent-side checkout.\n\nFor the server, the p4 binary should be present in the PATH of the TeamCity server (or can be specified via the teamcity.perforce.customP4Path internal property). The teamcity.perforce.p4PathOnServerWhitelist internal property can be used to specify a semi-colon-separated list of allowed p4 paths. The paths from this list can be set in VCS Root p4 path parameter for the server side (to restore old behavior).\n\nMercurial VCS Root properties\n\nSince TeamCity 2017.2.2, a number of Mercurial VCS root properties change their behavior for security reasons.\n\nthe \"HG command path\" is used on the TeamCity server only if included into the whitelist\n\nthe \"Clone repository to\" property is hidden if the VCS root doesn't have it already and is ignored by default. To make TeamCity display the property in all VCS roots, add the teamcity.hg.showCustomClonePath=true internal property. The value of the VCS root property is respected only if it is included into the whitelist specified by the teamcity.hg.customClonePathWhitelist internal property, which is a semi-colon-separated list of directories where a clone is allowed. Use /path/to/dir/* to allow clones to the child directories of the /path/to/dir.\n\nthe \"Mercurial config\" is ignored on the server. If you need to enable some Mercurial plugins, please do that in the global .hgrc on the TeamCity server machine.\n\nChanges from 2017.2 to 2017.2.1\n\nKotlin DSL changes\n\nThe versions in pom.xml were updated: kotlin.version is updated to 1.2.0, teamcity.dsl.version is updated to 2017.2.1. The dependency on kotlin-stdlib is replaced with the dependency on kotlin-stdlib-jdk8 in order to provide access to additional functionality available in jdk8 (e.g. named groups in regexps). The dependency on the deprecated kotlin-runtime and the redundant dependency on kotlin-compiler-embeddable were dropped.\n\nNow Tea"
    }
}