{
    "id": "correct_foundationPlace_00064_2",
    "rank": 76,
    "data": {
        "url": "https://vived.substack.com/p/tldw-opinionated-wrap-up-of-kotlinconf",
        "read_more_link": "",
        "language": "en",
        "title": "TLDW: Opinionated Wrap-up of KotlinConf 2023 Keynote - JVM Weekly vol. 40",
        "top_image": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
        "meta_img": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
        "images": [
            "https://substackcdn.com/image/fetch/w_96,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3e2a7f4-a039-4a37-84d2-fbf79d82fd25_600x600.png",
            "https://substackcdn.com/image/fetch/e_trim:10:white/e_trim:10:transparent/h_72,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9ff2d53e-77e2-4562-96ca-88da25bdbe5a_1344x256.png",
            "https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
            "https://substackcdn.com/image/fetch/w_80,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02ec8807-299f-42d2-bcde-168795228629_2362x2362.png",
            "https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5939c9d9-3a52-4c1e-a364-a907a237fd56_1024x522.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5de9794e-faf3-4a31-b82d-0297656331a4_540x546.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76d65440-f61f-4eb4-baaf-d30f43e016d6_687x500.jpeg",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fac46a6e7-c1a5-4d1d-821d-5c647aaea411_640x360.gif",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F081cedfd-25c6-43dc-812e-9d7c6317339a_350x200.gif",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F899a3a4a-5d59-4288-96bc-0bcf7c7cd571_1024x437.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e611ca7-622e-464e-ba2a-9df5e3642ce9_1024x759.png",
            "https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F126a8fae-d28e-4611-8ca9-4813e14a215a_1600x752.png",
            "https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5575469d-6f1b-4e63-8c8b-b5b2a0ffe6af_1456x1048.png",
            "https://substackcdn.com/image/fetch/w_64,h_64,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack.com%2Fimg%2Favatars%2Flogged-out.png",
            "https://substackcdn.com/image/fetch/w_66,h_66,c_fill,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1fdaa6c4-11ea-442e-a179-331849a1de75_144x144.png",
            "https://www.facebook.com/tr?id=5507570535986190&ev=PageView&noscript=1"
        ],
        "movies": [
            "https://www.youtube-nocookie.com/embed/c4f4SCEYA5Q?rel=0&autoplay=0&showinfo=0&enablejsapi=0"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Artur Skowronski"
        ],
        "publish_date": "2023-04-13T18:05:40+00:00",
        "summary": "",
        "meta_description": "Today, after the first day of KotlinConf, I decided to share what was presented at the Keynote.... and that was a show!",
        "meta_lang": "en",
        "meta_favicon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea80c6e4-5a03-4c67-811f-7b75495b63d6%2Ffavicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://vived.substack.com/p/tldw-opinionated-wrap-up-of-kotlinconf",
        "text": "During the hour-long presentation, we learned about the upcoming steps of the Kotlin creators, and a few important statements were made. What's even more interesting is that some of these have repercussions on broader JVM development.\n\nSo, let's start with Keynote itself:\n\nHave you seen it? If not, I invite you to my summary of the event. Have fun!\n\nKotlin 2.0 and Kotlin K2\n\nThe whole conference started with a big announcement - Kotlin 2.0 is coming. This is not a big surprise, given the news was already shared with the community in February. The release of 1.9 will be the last in the 1. x line. Version 1.10 will not appear, instead, we will jump straight to the release of 2.0. This is due to the fact that the long-awaited K2 compiler - 'one to rule them all' - is planned to be released for this version.\n\nK2 is what is known as the frontend of the compiler. The compilation process is typically divided into two main components: the frontend and the backend. Each of these components plays a separate role in the compilation process.\n\nThe compiler's frontend is mainly responsible for processing the syntax and semantics of the source code. It performs a series of tasks, such as lexical, syntactic, and semantic analysis. During these steps, the frontend checks for syntax errors, generates an AST (Abstract Syntax Tree) representing the program's structure and ensures that the program adheres to the language's rules and constraints. The frontend also checks types to ensure that variables, expressions, and function calls are used according to their respective types. After completing these tasks, the frontend generates an intermediate representation (IR) of the source code, which serves as input data for the compiler's backend. This component focuses on optimizing and generating the final machine code or bytecode for the target platform.\n\nFrom the above description, it is easy to see that what most of us deal with on a daily basis (whether as end users or even tool creators) is the front end of the compiler. And as it turns out, this part had the greatest potential for optimization. Just look at the numbers that Roman Elizarov boasted about on stage:\n\nHowever, the solution's performance itself is not the only issue here. K2 is supposed to provide a common infrastructure for all potential targets of the language. As a result, its developers will not have to implement the same function each time for JVM, WebAssembly or Android, which is expected to speed up Kotlin's evolution significantly.\n\nThe change of a \"major\" version of a language has been able to stir up a language's ecosystem a lot, but in the case of Kotlin, JetBrains promises a very stable migration process. First of all, the changes motivating the version bump take place under the hood. The developers deliberately don't plan to introduce any new innovations in the language's syntax itself in this release - they're saving those for the 2.x releases, which will come after the successful transition to K2 (more on that in a moment). In addition, however, JetBrains benefits from controlling both Kotlin and being a major tool provider for it. This allows the whole operation to run much more smoothly when most of the most important tooling can be developed in parallel with the language.\n\nIf anyone can't wait for the new \"major\" version, last week saw the release of Kotlin 1.8.20, which introduces the -language-version 2.0 flag. This one makes it possible to test the latest changes in the compiler, and Roman Elizarov himself has asked for such testing - this helps catch all bugs and make the whole thing robust.\n\nAnd as I announced that there will touch new features of the language....\n\nNew Syntax\n\nFrom the stage, Roman Elizarov showed us what we can expect from future releases of Kotlin.\n\nStatic Extensions\n\nWell, ladies and gentlemen, Kotlin will receive support for static functions .... sort of.\n\nIt will be possible to extend objects with static functions.\n\nfun File.static.open(name: String)\n\nAdmittedly, it was already possible to add \"effectively static\" extension functions, but only if the class had a Companion Object. Now it will also be possible when we do not have control over the base class.\n\nCollections Literals\n\nIt's happening!\n\nHere, let me use a meme:\n\nI think it's the announcement that Google was waiting for before declaring to the world that Kotlin DSL would become def... No spoilers, we will return to it in a moment.\n\nObject (name-based) destructuring\n\nThere will be a puzzle. The following code\n\ndata class Home(val country: String, val city: String, ) val (city, country) = Home(\"Kraków\", \"Poland\")\n\nwill lead to an error that is difficult to catch - can you see where?\n\nThe developers also announced that they are working on introducing a form of object destructuring to prevent such mistakes. There is no syntax proposal ready yet.... that is, there are as many as several, but they are hidden in Kotlin's YouTrack. We'll see which one wins in the end.\n\nExplicit Fields\n\nA more obscure change is also the addition of so-called \"explicit fields.\" This is (at least from my perspective) a syntax sugar over the mechanism referred to as backing fields, and useful when you want to return some value as immutable, but be able to perform some operations in the enclosing class.\n\nThat feature is a bit complex (it has its own Design Doc), but in practice, all comes down to changing the following code\n\nclass C { private val _elementList = mutableListOf<Element>() val elementList: List<Element> get() = _elementList fun addElement(element: Element) { _elementList += element // works } } C().elementList += element // does not compile;\n\nto\n\nclass C { val elementList: List<Element> field = mutableListOf() fun addElement(element: Element) { elementList += element // works } } // outside code C().elementList += element // does not compile;\n\nA redesign and stabilization of ContextReceivers, which at one time already made their way into the language was also announced. With the new K2 architecture, it will also be easier to write plugins to the compiler, enabling e.g. code generation.\n\nKotlin Notebooks\n\nThe way we create code is evolving rapidly. On one hand, GPT-4 is becoming a very good partner for collaborative coding at a really fast pace, while on the other hand, techniques previously used mainly by Data Scientists are slowly permeating the rest of the industry. Personally, I really appreciate all kinds of notebooks (although I have to admit that they can be easily abused). So far, however, I have mainly been a consumer of those created by someone else, rather than a create one myself. This situation may soon change, as JetBrains has decided to create an IDE plugin. And it looks really promising.\n\nSince a picture is worth a thousand words, I made a clip from a part of conference segment where this little gem was presented:\n\nFor scripting, it seems downright ideal. I remember how much I always appreciated Scala Worksheet.\n\nNow let's move on, to perhaps the biggest surprise of all....\n\nKotlin DSL the default dialect of Gradle on Android\n\nI really tried to like Kotlin DSL. It objectively has many advantages, such as improved IDE support and better compile-time safety. Despite being a more expressive alternative to Groovy, its adoption is rather slow. One of the main challenges when working with this dialect is the fact that a significant number of samples, tutorials, and documentation are still in Groovy, not Kotlin. This is mainly because Groovy was originally chosen by Gradle, which led to the creation of a rich ecosystem of content and tools by the community. As a result, developers often have to translate Groovy examples to Kotlin DSL, which can be time-consuming and error-prone due to significant differences in syntax, API, and overall language logic. This makes it difficult for developers to fully benefit from the advantages of Kotlin DSL.\n\nAnd this is where Google comes in. The company (or rather Grace Kloba, who sits on the Kotlin Foundation board) announced that Kotlin DSL will become the default dialect for Android projects based on Gradle. This is intended to be a push for the rest of the community to abandon Groovy and modernize their builds.\n\nIt's probably the reason why this morning we had the release of Gradle 8.1, which introduced quite a few additional fixes to Kotlin (but also, for example, support for JDK 20). Indeed, the aforementioned move is described as the result of years of cooperation between Google and Gradle, where the latter responded to constant feedback and helped bring the tool to the point where the declaring Kotlin DSL default could be responsibly made.\n\nAnd in this way, we can smoothly move on to the next point, which is...\n\nExpansion of the Kotlin Foundation's membership\n\nThis will be brief, as the announcement itself is very clear - the Kotlin Foundation, initially founded by Google and JetBrains, has been expanded to include additional members. In addition to Gradle (which you probably expected), Shopify has also joined. The latter was mainly associated with Ruby, so it was a bit of a surprise, but it turns out that the company actively uses Kotlin Multiplatform.\n\nAnd at the very end, we will go right to the latter.\n\nFurther development of Kotlin Multiplatform\n\nAs regular readers of this newsletter probably know (and for new readers, I invite you to subscribe to get to know me better 😄), I mainly work on the backend side. Therefore, Multiplatform has never been more than a curiosity for me, although over time I started to treat this project with a bit more respect. And while announcements such as the change of Jetpack Compose to Compose Multiplatform attract attention, and the release of the latter on iOS certainly catches the eye, I am most excited about the development of the WASM version. For some time now, I have been increasingly interested in WebAssembly and believe that it will become a more important part of the programming ecosystem from year to year.\n\nAn interesting fact - if you read the documentation, you'll find that the entire Compose for Web is based on Kotlin/Wasm. This only shows what a powerful tool we are dealing with."
    }
}