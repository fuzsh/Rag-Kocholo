{
    "id": "correct_foundationPlace_00064_3",
    "rank": 97,
    "data": {
        "url": "https://forums.fsharp.org/t/can-f-afford-losing-fake-and-other-libraries/1642",
        "read_more_link": "",
        "language": "en",
        "title": "Can F# afford losing FAKE (and other libraries)?",
        "top_image": "https://global.discourse-cdn.com/standard14/uploads/fsharp/original/1X/310f6a4ba0885dfe4fba2a85d3b2bf934a28060b.png",
        "meta_img": "https://global.discourse-cdn.com/standard14/uploads/fsharp/original/1X/310f6a4ba0885dfe4fba2a85d3b2bf934a28060b.png",
        "images": [
            "https://emoji.discourse-cdn.com/twitter/man_shrugging.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/slightly_frowning_face.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/pensive.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/wink.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://sjc6.discourse-cdn.com/standard14/user_avatar/forums.fsharp.org/cartermp/48/73_2.png",
            "https://emoji.discourse-cdn.com/twitter/100.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/100.png?v=12",
            "https://blog.opencollective.com/favicon.png",
            "https://blog.opencollective.com/content/images/2021/03/Screen-Shot-2021-03-23-at-5.36.19-PM.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Marcos-Costa"
        ],
        "publish_date": "2021-03-04T09:05:36+00:00",
        "summary": "",
        "meta_description": "I while ago I created an issue related to another issue regarding a problem with an the use of an older version of paket. The reply from the maintainer was this: \n\n@halcwb Sorry, I kind of lost motivation for various rea&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/standard14/uploads/fsharp/optimized/1X/101c81186478f1a1dd8c56268477ccbd90274ab2_2_32x32.png",
        "meta_site_name": "F# Software Foundation Community Forums",
        "canonical_link": "https://forums.fsharp.org/t/can-f-afford-losing-fake-and-other-libraries/1642",
        "text": "I while ago I created an issue related to another issue regarding a problem with an the use of an older version of paket. The reply from the maintainer was this:\n\n@halcwb Sorry, I kind of lost motivation for various reasons. Nobody volunteered yet to take over. And to be honest some people prefer the “the build as a project && dotnet run” approach which doesn’t have issues like these and might be a way out of this as I guess you are not volunteering to take over.\n\nAnd I really understand the problem from the maintainers perspective. Also, I had to admit that I am really no real programmer at all, but a pediatric intensivist, very enthousiastic using F#.\n\nMoreover, I feel that there is a bigger underlying problem, i.e. there are more extremely usefull and beautiful libraries that have a similar problem. They are created by some very smart people, but those people move on. Another example is the FSharp.Formatting library. First created by Thomas Petricek, but then left afloat for a lot of years, while being used by many other libraries like ProjectScaffold which suffered a similar fate. Therefore, this problem can even cascade through multiple projects.\n\nSo, I have to admit, I am not part of a solution, but I do experience the problem. Also, I think this can be quite an existential threat to F# as a language. There should be an overall organisation that can supply the necessary every day task of maintaining the really core libraries for F#. Microsoft, are you listening?\n\nInterested to know other views on this.\n\nFirst and foremost, the issue described is not unique to F#. It is a common problem for all free software projects.\n\nAnd I appreciate your disappointment and your concerns. It’s really depressing to watch a good project “wither on the vine”. But I don’t see the larger systemic issues being addressed in a meaningful way by the (relatively) small and resource-constrained folks who make up the vast majority of active contributors to open-source F# projects.\n\n(Aside: Project Scaffold was only ever meant to be a learning tool. That folks would take a hard dependency on it was… flattering. But it was also a “use at your own risk” situation.\n\nThen again, maybe that should’ve been better communicated. Lesson learned. )\n\nFurther, with respect to:\n\nThere should be an overall organisation that can supply the necessary every day task of maintaining the really core libraries for F#\n\nThe key point is: who decides what is (or isn’t) “really core libraries”? Don? The FSSF? There will certainly always be many more projects than there will ever be available resources. So what criteria does one use? No easy answers.\n\nIn any event, I wouldn’t expect much more from Microsoft. In fact, one might argue that Microsoft has already decided – based on where they do and do not contribute – which projects are “core” for their interests.\n\nThat’s not to say that other companies (or non-profit organizations) couldn’t do more. However, it’s not a cut-and-dried problem. There are issues of: time, money, and – most importantly – ownership. In fact, we can see that a few of the smaller companies who leverage F# do contribute back, in terms of both money and patches. However, this is still a drop in the bucket, so to speak. And, as with Microsoft, they contribute where it’s aligned to their interests. So what happens when their needs and yours differ? No easy answers.\n\nAll this having been said, if folks have ideas for improving things, I’m very eager to hear them.\n\nFSharp.Formatting is actively maintained. Not sure about FAKE and ProjectScaffold but they are not necessary for F# users and are not beginner tools. It’s likely that ProjectScaffold gets less popular as “File → New Project” and “dotnet new” produce well scaffolded projects that are cleaner.\n\nThe problem with the F# library ecosystem is that it is VERY insular. People write libraries in F# for F#. Writing in F# is great. However most libraries should be written for .Net instead: the traction would be much larger and .Net is a perfectly good API target. While F#-F# sometimes results in better APIs (e.g. Fabulous), the restriction to .Net APIs would improve most libraries by preventing excesses (a common culprit is crazy operators).\n\nLibraries which are written for F# which should be written for .Net include: FAKE, Farmer, most type providers (the erasing ones). If these were retargeted it would 1. help them remain actively maintained projects 2. integrate F# by bringing in contributors who normally work in other languages and turning F# into a useful producer language not just a consumer one.\n\nYou made excellent points here, so I’ll add to them\n\nAll this having been said, if folks have ideas for improving things, I’m very eager to hear them.\n\nThis is something that other OSS maintainers have said, but the solution here is to have industrial users / corporate partners step up with significant sponsorships or contributions.\n\nMicrosoft (as a corporate entity) already contributes far and away the most into the F# ecosystem by:\n\nBuilding and maintaining the compiler, tools for VS and VSMac, .NET SDK distribution, build from source distribution, and documentation\n\nPaying employees to spend time helping maintain things relevant to their business interests (FSharp.Formatting, XPlot, FSharp.Data)\n\nHiring people on contract to complete work that is mutually beneficial (Ionide for several months in 2019)\n\nSolving upstream issues that mainly impact one OSS library specifically to unblock them (most recent example was unblocking someone building tools for wasm)\n\nIncorporating several projects into manual integration testing (SAFE Stack)\n\nThere are thousands of other corporate entities out there who rely on F# and a subset of them undoubtedly also rely on FAKE, paket, and other parts of the F# OSS ecosystem. It is absolutely within their power to get some skin in the game and help support an ecosystem they’ve made money with.\n\nA fine example of this is G-Research, who have paid their employees to contribute back to several projects (including dotnet/fsharp!) and also paid OSS authors to implement mutually beneficial work for them. Another example is JetBrains, who build wonderful IDE support for F# in Rider.\n\nWhich other corporate entities are willing to step up as well? It’s not terribly expensive to help maintain a project like FAKE from a corporate perspective. If one person could revamp it and maintain it for several years in his spare time, someone being paid to maintain it certainly can pull it off. This requires employees to also ask for this, though. You have to make the case that it’s good for your business, and you won’t always be successful. That’s fine though, because there are many thousands of corporate entities using F# that could afford it, so if enough people really do try and convince their management that this is a useful investment, I’m quite positive at least one will step up and help maintain FAKE.\n\nFirst of all I think you will find F# an excellent choice for the type of software you are writing. F# excels in complex modelling and data science.\n\nAs for your question on architectural decisions. I think on a high level F# can be used exactly as you would use C#. On a per project (solution) level I think that MiniScaffold gives a very complete picture how a skeleton setup looks like for an F# project.\n\nAs for the what and how to contribute back to the community, I am not in a position to give any answers. But I am sure a lot of people could help you with that in the F# community.\n\nAs a side note, looking at your company I am interested as I am creating software for decision support for medical purposes. Please contact me if you would be willing to discuss this."
    }
}