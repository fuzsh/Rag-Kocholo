{
    "id": "correct_foundationPlace_00064_2",
    "rank": 59,
    "data": {
        "url": "https://piashcse.medium.com/compose-multiplatform-movie-app-4752cd445e95",
        "read_more_link": "",
        "language": "en",
        "title": "Compose Multiplatform Movie App",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*NBZXQKxHck7EopNEnN6xVA.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*NBZXQKxHck7EopNEnN6xVA.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*FZhc0Ijr5WejGP0pwlvYQw.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*FZhc0Ijr5WejGP0pwlvYQw.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mehedi Hassan Piash",
            "piashcse.medium.com"
        ],
        "publish_date": "2023-05-27T13:45:41.840000+00:00",
        "summary": "",
        "meta_description": "What is compose multiplatform: Compose Multiplatform is a declarative framework for sharing UIs across multiple platforms with Kotlin. It is based on Jetpack Compose and developed by JetBrains and…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://piashcse.medium.com/compose-multiplatform-movie-app-4752cd445e95",
        "text": "What is compose multiplatform: Compose Multiplatform is a declarative framework for sharing UIs across multiple platforms with Kotlin. It is based on Jetpack Compose and developed by JetBrains and open-source contributors.\n\nYou can choose the platforms across which to share your UIs using Compose Multiplatform:\n\niOS (Alpha)\n\nAndroid (via Jetpack Compose)\n\nDesktop (Windows, MacOS, Linux)\n\nWeb (Experimental)\n\nLet’s start making a simple movie app step by step\n\nStep-1:\n\nDownload compose starter multiplatform template as shown in figure\n\nStep-2\n\nRename package name as kmm-movie according to the given project structure\n\nStep-3\n\nAdd given gradle dependency in Project-Kmm-movie build.gradle.kts\n\nplugins {\n\nkotlin(\"multiplatform\").apply(false)\n\nid(\"com.android.application\").apply(false)\n\nid(\"com.android.library\").apply(false)\n\nid(\"org.jetbrains.compose\").apply(false)\n\n}\n\nAdd given gradle dependency to Module:androidApp build.gradle.kts\n\nplugins {\n\nkotlin(\"multiplatform\")\n\nid(\"com.android.application\")\n\nid(\"org.jetbrains.compose\")\n\n}\n\nkotlin {\n\nandroid()\n\nsourceSets {\n\nval androidMain by getting {\n\ndependencies {\n\nimplementation(project(\":shared\"))\n\n}\n\n}\n\n}\n\n}\n\nandroid {\n\ncompileSdk = (findProperty(\"android.compileSdk\") as String).toInt()\n\nnamespace = \"com.kmm_movie\"\n\nsourceSets[\"main\"].manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n\ndefaultConfig {\n\napplicationId = \"com.kmm_movie.KmmMovie\"\n\nminSdk = (findProperty(\"android.minSdk\") as String).toInt()\n\ntargetSdk = (findProperty(\"android.targetSdk\") as String).toInt()\n\nversionCode = 1\n\nversionName = \"1.0\"\n\n}\n\ncompileOptions {\n\nsourceCompatibility = JavaVersion.VERSION_11\n\ntargetCompatibility = JavaVersion.VERSION_11\n\n}\n\nkotlin {\n\njvmToolchain(11)\n\n}\n\n}\n\nAdd given gradle dependency to Module:Shared build.gradle.kts\n\nplugins {\n\nkotlin(\"multiplatform\")\n\nkotlin(\"native.cocoapods\")\n\nkotlin(\"plugin.serialization\")\n\nid(\"com.android.library\")\n\nid(\"org.jetbrains.compose\")\n\n}\n\nkotlin {\n\nandroid()\n\niosX64()\n\niosArm64()\n\niosSimulatorArm64()\n\ncocoapods {\n\nversion = \"1.0.0\"\n\nsummary = \"Some description for the Shared Module\"\n\nhomepage = \"Link to the Shared Module homepage\"\n\nios.deploymentTarget = \"14.1\"\n\npodfile = project.file(\"../iosApp/Podfile\")\n\nframework {\n\nbaseName = \"shared\"\n\nisStatic = true\n\n}\n\nextraSpecAttributes[\"resources\"] = \"['src/commonMain/resources/**', 'src/iosMain/resources/**']\"\n\n}\n\nsourceSets {\n\nval commonMain by getting {\n\ndependencies {\n\nimplementation(compose.runtime)\n\nimplementation(compose.foundation)\n\nimplementation(compose.animation)\n\nimplementation(compose.material)\n\n@OptIn(org.jetbrains.compose.ExperimentalComposeLibrary::class)\n\nimplementation(compose.components.resources)\n\napi(compose.materialIconsExtended)\n\nimplementation(\"io.ktor:ktor-client-core:2.3.0\")\n\nimplementation(\"io.ktor:ktor-client-logging:2.3.0\")\n\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:2.3.0\")\n\nimplementation(\"io.ktor:ktor-client-content-negotiation:2.3.0\")\n\nimplementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1\")\n\napi(\"io.github.qdsfdhvh:image-loader:1.4.4\")\n\napi(\"moe.tlaster:precompose:1.4.1\")\n\napi(\"moe.tlaster:precompose-viewmodel:1.4.1\")\n\n}\n\n}\n\nval androidMain by getting {\n\ndependencies {\n\napi(\"androidx.activity:activity-compose:1.7.2\")\n\napi(\"androidx.appcompat:appcompat:1.6.1\")\n\napi(\"androidx.core:core-ktx:1.10.1\")\n\nimplementation(\"io.ktor:ktor-client-okhttp:2.3.0\")\n\n}\n\n}\n\nval iosX64Main by getting\n\nval iosArm64Main by getting\n\nval iosSimulatorArm64Main by getting\n\nval iosMain by creating {\n\ndependsOn(commonMain)\n\niosX64Main.dependsOn(this)\n\niosArm64Main.dependsOn(this)\n\niosSimulatorArm64Main.dependsOn(this)\n\ndependencies {\n\nimplementation(\"io.ktor:ktor-client-darwin:2.3.0\")\n\nimplementation(\"io.ktor:ktor-client-ios:2.3.0\")\n\n}\n\n}\n\n}\n\n}\n\nandroid {\n\ncompileSdk = (findProperty(\"android.compileSdk\") as String).toInt()\n\nnamespace = \"com.kmm_movie.common\"\n\nsourceSets[\"main\"].manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n\nsourceSets[\"main\"].res.srcDirs(\"src/androidMain/res\")\n\nsourceSets[\"main\"].resources.srcDirs(\"src/commonMain/resources\")\n\ndefaultConfig {\n\nminSdk = (findProperty(\"android.minSdk\") as String).toInt()\n\ntargetSdk = (findProperty(\"android.targetSdk\") as String).toInt()\n\n}\n\ncompileOptions {\n\nsourceCompatibility = JavaVersion.VERSION_17\n\ntargetCompatibility = JavaVersion.VERSION_17\n\n}\n\nkotlin {\n\njvmToolchain(17)\n\n}\n\n}\n\nAdd given dependency to Project Properties gradle.properties\n\n#Gradle\n\norg.gradle.jvmargs=-Xmx2048M -Dkotlin.daemon.jvm.options\\=\"-Xmx2048M\"\n\n#Kotlin\n\nkotlin.code.style=official\n\n#MPP\n\nkotlin.mpp.stability.nowarn=true\n\nkotlin.mpp.enableCInteropCommonization=true\n\nkotlin.mpp.androidSourceSetLayoutVersion=2\n\n#Compose\n\norg.jetbrains.compose.experimental.uikit.enabled=true\n\nkotlin.native.cacheKind=none\n\n#Android\n\nandroid.useAndroidX=true\n\nandroid.compileSdk=33\n\nandroid.targetSdk=33\n\nandroid.minSdk=24\n\n#Versions\n\nkotlin.version=1.8.20\n\nagp.version=7.4.2\n\ncompose.version=1.4.0\n\nAdd given dependency to settings.gradle.kts\n\nrootProject.name = \"Kmm-movie\"\n\ninclude(\":androidApp\")\n\ninclude(\":shared\")\n\npluginManagement {\n\nrepositories {\n\ngradlePluginPortal()\n\nmaven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\n\ngoogle()\n\n}\n\nplugins {\n\nval kotlinVersion = extra[\"kotlin.version\"] as String\n\nval agpVersion = extra[\"agp.version\"] as String\n\nval composeVersion = extra[\"compose.version\"] as String\n\nkotlin(\"jvm\").version(kotlinVersion)\n\nkotlin(\"multiplatform\").version(kotlinVersion)\n\nkotlin(\"android\").version(kotlinVersion)\n\nid(\"com.android.application\").version(agpVersion)\n\nid(\"com.android.library\").version(agpVersion)\n\nid(\"org.jetbrains.compose\").version(composeVersion)\n\nkotlin(\"plugin.serialization\").version(kotlinVersion)\n\n}\n\n}\n\ndependencyResolutionManagement {\n\nrepositories {\n\ngoogle()\n\nmavenCentral()\n\nmaven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\n\n}\n\n}\n\nStep-4\n\nDefine ktor API client for HTTP api request inside shared → commonMain →kotlin → data → remote apiClient.kt\n\npackage data.remote\n\nimport io.ktor.client.*\n\nimport io.ktor.client.plugins.*\n\nimport io.ktor.client.plugins.contentnegotiation.*\n\nimport io.ktor.client.plugins.logging.DEFAULT\n\nimport io.ktor.client.plugins.logging.LogLevel\n\nimport io.ktor.client.plugins.logging.Logger\n\nimport io.ktor.client.plugins.logging.Logging\n\nimport io.ktor.http.takeFrom\n\nimport io.ktor.serialization.kotlinx.json.*\n\nimport kotlinx.serialization.json.Json\n\nimport utils.AppConstant\n\nval client = HttpClient {\n\ndefaultRequest {\n\nurl {\n\ntakeFrom(AppConstant.BASE_URL)\n\nparameters.append(\"api_key\", AppConstant.API_KEY)\n\n}\n\n}\n\nexpectSuccess = true\n\ninstall(HttpTimeout) {\n\nval timeout = 30000L\n\nconnectTimeoutMillis = timeout\n\nrequestTimeoutMillis = timeout\n\nsocketTimeoutMillis = timeout\n\n}\n\ninstall(Logging) {\n\nlogger = Logger.DEFAULT\n\nlevel = LogLevel.HEADERS\n\n}\n\ninstall(ContentNegotiation) {\n\njson(Json {\n\nignoreUnknownKeys = true\n\n})\n\n}\n\n}\n\nDefine API interface for api request inside shared → commonMain →kotlin → data → remote → ApiInterface.kt\n\npackage data.remote\n\nimport data.model.BaseModel\n\nimport data.model.BaseModelV2\n\nimport data.model.moviedetail.MovieDetail\n\ninterface ApiInterface{\n\nsuspend fun nowPlayingMovieList(\n\npage: Int\n\n): BaseModel\n\nsuspend fun popularMovieList(\n\npage: Int\n\n): BaseModelV2\n\nsuspend fun topRatedMovieList(\n\npage: Int\n\n): BaseModelV2\n\nsuspend fun upcomingMovieList(\n\npage: Int\n\n): BaseModel\n\nsuspend fun movieDetail(\n\nmovieId: Int\n\n): MovieDetail\n\nsuspend fun movieSearch(\n\nsearchKey: String\n\n): BaseModelV2\n\n}\n\nAdd API Implementation inside shared → commonMain → kotlin → data → remote → apiImpl.kt\n\npackage data.remote\n\nimport data.model.BaseModel\n\nimport data.model.BaseModelV2\n\nimport data.model.moviedetail.MovieDetail\n\nimport io.ktor.client.call.body\n\nimport io.ktor.client.request.HttpRequestBuilder\n\nimport io.ktor.client.request.get\n\nimport io.ktor.http.encodedPath\n\nclass ApiImpl : ApiInterface {\n\nprivate fun HttpRequestBuilder.nowPlayingMovie(\n\npage: Int\n\n) {\n\nurl {\n\nencodedPath = \"3/movie/now_playing\"\n\nparameters.append(\"page\", page.toString())\n\n}\n\n}\n\nprivate fun HttpRequestBuilder.popularMovie(\n\npage: Int\n\n) {\n\nurl {\n\nencodedPath = \"3/movie/popular\"\n\nparameters.append(\"page\", page.toString())\n\n}\n\n}\n\nprivate fun HttpRequestBuilder.topRatedMovie(\n\npage: Int\n\n) {\n\nurl {\n\nencodedPath = \"3/movie/top_rated\"\n\nparameters.append(\"page\", page.toString())\n\n}\n\n}\n\nprivate fun HttpRequestBuilder.upcomingMovie(\n\npage: Int,\n\n) {\n\nurl {\n\nencodedPath = \"3/movie/upcoming\"\n\nparameters.append(\"page\", page.toString())\n\n}\n\n}\n\nprivate fun HttpRequestBuilder.movieDetail(\n\nmovieId: Int,\n\n) {\n\nurl {\n\nencodedPath = \"3/movie/$movieId\"\n\n}\n\n}\n\nprivate fun HttpRequestBuilder.movieSearch(\n\nsearchKey: String,\n\n) {\n\nurl {\n\nencodedPath = \"3/search/movie\"\n\nparameters.append(\"query\", searchKey)\n\n}\n\n}\n\noverride suspend fun nowPlayingMovieList(\n\npage: Int,\n\n): BaseModel {\n\nreturn client.get {\n\nnowPlayingMovie(page)\n\n}.body()\n\n}\n\noverride suspend fun popularMovieList(\n\npage: Int,\n\n): BaseModelV2 {\n\nreturn client.get {\n\npopularMovie(page)\n\n}.body()\n\n}\n\noverride suspend fun topRatedMovieList(\n\npage: Int,\n\n): BaseModelV2 {\n\nreturn client.get {\n\ntopRatedMovie(page)\n\n}.body()\n\n}\n\noverride suspend fun upcomingMovieList(\n\npage: Int,\n\n): BaseModel {\n\nreturn client.get {\n\nupcomingMovie(page)\n\n}.body()\n\n}\n\noverride suspend fun movieDetail(movieId: Int): MovieDetail {\n\nreturn client.get {\n\nmovieDetail(movieId)\n\n}.body()\n\n}\n\noverride suspend fun movieSearch(searchKey: String): BaseModelV2 {\n\nreturn client.get {\n\nmovieSearch(searchKey)\n\n}.body()\n\n}\n\n}\n\nAdd repository for api implementation inside shared → commonMain →kotlin → data → repository → movieRepository.kt\n\npackage data.repository\n\nimport data.remote.ApiImpl\n\nimport kotlinx.coroutines.flow.flow\n\nimport utils.network.DataState\n\nclass MovieRepository {\n\nprivate val api = ApiImpl()\n\nfun nowPlayingMovie(page: Int) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.nowPlayingMovieList(page)\n\nemit(DataState.Success(result.results))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\nfun popularMovie(page: Int) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.popularMovieList(page)\n\nemit(DataState.Success(result.results))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\nfun topRatedMovie(page: Int) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.topRatedMovieList(page)\n\nemit(DataState.Success(result.results))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\nfun upComingMovie(page: Int) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.upcomingMovieList(page)\n\nemit(DataState.Success(result.results))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\nfun movieDetail(movieId: Int) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.movieDetail(movieId)\n\nemit(DataState.Success(result))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\nfun searchMovie(searchKey: String) = flow {\n\nemit(DataState.Loading)\n\ntry {\n\nval result = api.movieSearch(searchKey)\n\nemit(DataState.Success(result))\n\n} catch (e: Exception) {\n\nemit(DataState.Error(e))\n\n}\n\n}\n\n}\n\nStep-5\n\nLet’s define a navigation graph for screen navigation inside shared → commonMain → kotlin → navigation → NavGraph.kt\n\npackage navigation\n\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.collectAsState\n\nimport androidx.compose.ui.Modifier\n\nimport moe.tlaster.precompose.navigation.NavHost\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport moe.tlaster.precompose.navigation.path\n\nimport ui.popular.Popular\n\nimport ui.detail.MovieDetail\n\nimport ui.home.HomeScreen\n\nimport ui.toprated.TopRated\n\nimport ui.upcoming.Upcoming\n\n@Composable\n\nfun Navigation(navigator: Navigator) {\n\nNavHost(\n\nnavigator = navigator,\n\ninitialRoute = NavigationScreen.Home.route,\n\n) {\n\nscene(route = NavigationScreen.Home.route) {\n\nHomeScreen(navigator)\n\n}\n\nscene(route = NavigationScreen.Popular.route) {\n\nPopular(navigator)\n\n}\n\nscene(route = NavigationScreen.TopRated.route) {\n\nTopRated(navigator)\n\n}\n\nscene(route = NavigationScreen.Upcoming.route) {\n\nUpcoming(navigator)\n\n}\n\nscene(route = NavigationScreen.MovieDetail.route.plus(NavigationScreen.MovieDetail.objectPath)) { backStackEntry ->\n\nval id: Int? = backStackEntry.path<Int>(NavigationScreen.MovieDetail.objectName)\n\nid?.let {\n\nMovieDetail(navigator, it)\n\n}\n\n}\n\n}\n\n}\n\n@Composable\n\nfun currentRoute(navigator: Navigator): String? {\n\nreturn navigator.currentEntry.collectAsState(null).value?.route?.route\n\n}\n\nDefine navigation and bottomNavigation for each screen inside shared → commonMain → kotlin → navigation → NavigationScreen.kt\n\npackage navigation\n\nimport androidx.compose.foundation.layout.offset\n\nimport androidx.compose.foundation.layout.padding\n\nimport androidx.compose.material.Icon\n\nimport androidx.compose.material.icons.Icons\n\nimport androidx.compose.material.icons.filled.Home\n\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\n\nimport androidx.compose.material.icons.filled.Star\n\nimport androidx.compose.material.icons.filled.Timeline\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.unit.dp\n\nimport utils.AppString\n\nsealed class NavigationScreen(\n\nval route: String,\n\nval title: String = AppString.APP_TITLE,\n\nval navIcon: (@Composable () -> Unit) = {\n\nIcon(\n\nIcons.Filled.Home, contentDescription = \"home\"\n\n)\n\n},\n\nval objectName: String = \"\",\n\nval objectPath: String = \"\"\n\n) {\n\nobject Home : NavigationScreen(\"home_screen\")\n\nobject Popular : NavigationScreen(\"popular_screen\")\n\nobject TopRated : NavigationScreen(\"top_rated_screen\")\n\nobject Upcoming : NavigationScreen(\"upcoming_screen\")\n\nobject MovieDetail :\n\nNavigationScreen(\"movie_detail_screen\", objectName = \"id\", objectPath = \"/{id}\")\n\nobject HomeNav : NavigationScreen(\"home_screen\", title = \"Home\", navIcon = {\n\nIcon(\n\nIcons.Filled.Home,\n\ncontentDescription = \"search\",\n\nmodifier = Modifier\n\n.padding(end = 16.dp)\n\n.offset(x = 10.dp)\n\n)\n\n})\n\nobject PopularNav : NavigationScreen(\"popular_screen\", title = \"Popular\", navIcon = {\n\nIcon(\n\nIcons.Filled.Timeline,\n\ncontentDescription = \"search\",\n\nmodifier = Modifier\n\n.padding(end = 16.dp)\n\n.offset(x = 10.dp)\n\n)\n\n})\n\nobject TopRatedNav : NavigationScreen(\"top_rated_screen\", title = \"Top rated\", navIcon = {\n\nIcon(\n\nIcons.Filled.Star,\n\ncontentDescription = \"search\",\n\nmodifier = Modifier\n\n.padding(end = 16.dp)\n\n.offset(x = 10.dp)\n\n)\n\n})\n\nobject UpcomingNav : NavigationScreen(\"upcoming_screen\", title = \"Upcoming\", navIcon = {\n\nIcon(\n\nIcons.Filled.KeyboardArrowDown,\n\ncontentDescription = \"search\",\n\nmodifier = Modifier\n\n.padding(end = 16.dp)\n\n.offset(x = 10.dp)\n\n)\n\n})\n\n}\n\nStep-6\n\nLets start with UI component inside shared → commonMain → kotlin → ui → component → text → BiograpyText.kt\n\npackage ui.component.text\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport theme.bioGrapyText\n\n@Composable\n\nfun BioGraphyText(text:String) {\n\nText(\n\ntext = text,\n\nstyle = MaterialTheme.typography.bioGrapyText\n\n)\n\n}\n\nshared → commonMain → kotlin → ui → component → text → SubTitlePrimary.kt\n\npackage ui.component.text\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport theme.subTitlePrimary\n\n@Composable\n\nfun SubtitlePrimary(text: String) {\n\nText(\n\ntext = text,\n\nstyle = MaterialTheme.typography.subTitlePrimary\n\n)\n\n}\n\nshared → commonMain → kotlin → ui → component → text → SubTitle.kt\n\npackage ui.component.text\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport theme.subTitleSecondary\n\n@Composable\n\nfun SubtitleSecondary(text:String) {\n\nText(\n\ntext = text,\n\nstyle = MaterialTheme.typography.subTitleSecondary\n\n)\n\n}\n\nshared → commonMain → kotlin → ui → component → AppBarWithArrow.kt\n\npackage ui.component\n\nimport androidx.compose.foundation.Image\n\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.foundation.layout.Row\n\nimport androidx.compose.foundation.layout.Spacer\n\nimport androidx.compose.foundation.layout.height\n\nimport androidx.compose.foundation.layout.padding\n\nimport androidx.compose.foundation.layout.width\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.material.TopAppBar\n\nimport androidx.compose.material.icons.Icons\n\nimport androidx.compose.material.icons.filled.ArrowBack\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.graphics.ColorFilter\n\nimport androidx.compose.ui.unit.dp\n\nimport theme.Purple500\n\n@Composable\n\nfun AppBarWithArrow(\n\ntitle: String?,\n\nisBackEnable: Boolean = false,\n\npressOnBack: () -> Unit\n\n) {\n\nTopAppBar(\n\nelevation = 6.dp,\n\nbackgroundColor = Purple500,\n\nmodifier = Modifier.height(58.dp)\n\n) {\n\nRow {\n\nSpacer(modifier = Modifier.width(10.dp))\n\nif (isBackEnable) {\n\nImage(\n\nimageVector = Icons.Filled.ArrowBack,\n\ncolorFilter = ColorFilter.tint(Color.White),\n\ncontentDescription = null,\n\nmodifier = Modifier\n\n.align(Alignment.CenterVertically)\n\n.clickable {\n\npressOnBack()\n\n}\n\n)\n\n}\n\nSpacer(modifier = Modifier.width(12.dp))\n\nText(\n\nmodifier = Modifier\n\n.padding(8.dp)\n\n.align(Alignment.CenterVertically),\n\ntext = title ?: \"\",\n\nstyle = MaterialTheme.typography.h6,\n\ncolor = Color.White\n\n)\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → component → MovieList.kt\n\npackage ui.component\n\nimport androidx.compose.foundation.Image\n\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.foundation.layout.padding\n\nimport androidx.compose.foundation.layout.size\n\nimport androidx.compose.foundation.lazy.grid.GridCells\n\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\n\nimport androidx.compose.foundation.lazy.grid.items\n\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.layout.ContentScale\n\nimport androidx.compose.ui.unit.dp\n\nimport com.seiko.imageloader.rememberAsyncImagePainter\n\nimport data.model.MovieItem\n\nimport utils.AppConstant\n\nimport utils.cornerRadius\n\n@Composable\n\ninternal fun MovieList(listItems: List<MovieItem>, onclick: (id: Int) -> Unit) {\n\nLazyVerticalGrid(columns = GridCells.Fixed(2),\n\nmodifier = Modifier.padding(start = 5.dp, end = 5.dp, top = 10.dp),\n\ncontent = {\n\nitems(listItems) {\n\nColumn(\n\nmodifier = Modifier.padding(\n\nstart = 5.dp, end = 5.dp, top = 0.dp, bottom = 10.dp\n\n)\n\n) {\n\nImage(\n\npainter = rememberAsyncImagePainter(\n\nAppConstant.IMAGE_URL.plus(\n\nit.poster_path\n\n)\n\n),\n\ncontentDescription = it.poster_path,\n\nmodifier = Modifier.size(250.dp).cornerRadius(10).shimmerBackground(\n\nRoundedCornerShape(5.dp)\n\n).clickable {\n\nonclick(it.id)\n\n},\n\ncontentScale = ContentScale.Crop,\n\n)\n\n}\n\n}\n\n})\n\n}\n\nshared → commonMain → kotlin → ui → component → ProgressIndicator.kt\n\npackage ui.component\n\nimport androidx.compose.foundation.layout.Box\n\nimport androidx.compose.foundation.layout.fillMaxSize\n\nimport androidx.compose.material.CircularProgressIndicator\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\n@Composable\n\ninternal fun ProgressIndicator(isVisible: Boolean = true) {\n\nif (isVisible) {\n\nBox(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n\nCircularProgressIndicator()\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → component → SearchBar.kt\n\npackage ui.component\n\nimport androidx.compose.foundation.Image\n\nimport androidx.compose.foundation.background\n\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.foundation.layout.Row\n\nimport androidx.compose.foundation.layout.Spacer\n\nimport androidx.compose.foundation.layout.fillMaxWidth\n\nimport androidx.compose.foundation.layout.offset\n\nimport androidx.compose.foundation.layout.padding\n\nimport androidx.compose.foundation.layout.width\n\nimport androidx.compose.material.Icon\n\nimport androidx.compose.material.TextField\n\nimport androidx.compose.material.TextFieldDefaults\n\nimport androidx.compose.material.icons.Icons\n\nimport androidx.compose.material.icons.filled.ArrowBack\n\nimport androidx.compose.material.icons.filled.Clear\n\nimport androidx.compose.material.icons.filled.Search\n\nimport androidx.compose.runtime.*\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.focus.FocusRequester\n\nimport androidx.compose.ui.focus.focusRequester\n\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.graphics.ColorFilter\n\nimport androidx.compose.ui.unit.dp\n\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\n\nimport theme.Blue\n\nimport ui.AppViewModel\n\n@ExperimentalCoroutinesApi\n\n@Composable\n\nfun SearchBar(viewModel: AppViewModel, pressOnBack: () -> Unit) {\n\nvar text by remember { mutableStateOf(\"\") }\n\nval focusRequester = FocusRequester()\n\nRow(Modifier.background(color = Blue)) {\n\nSpacer(modifier = Modifier.width(10.dp))\n\nImage(\n\nimageVector = Icons.Filled.ArrowBack,\n\ncolorFilter = ColorFilter.tint(Color.White),\n\ncontentDescription = null,\n\nmodifier = Modifier\n\n.align(Alignment.CenterVertically)\n\n.clickable {\n\npressOnBack()\n\n}\n\n)\n\nSpacer(modifier = Modifier.width(5.dp))\n\nTextField(modifier = Modifier.fillMaxWidth().focusRequester(focusRequester),\n\nvalue = text,\n\ncolors = TextFieldDefaults.textFieldColors(\n\nbackgroundColor = Blue,\n\ncursorColor = Color.Black,\n\ndisabledLabelColor = Blue,\n\nfocusedIndicatorColor = Color.Transparent,\n\nunfocusedIndicatorColor = Color.Transparent\n\n),\n\nonValueChange = {\n\ntext = it\n\nviewModel.searchApi(it)\n\n},\n\n//shape = RoundedCornerShape(8.dp),\n\nsingleLine = true,\n\ntrailingIcon = {\n\nif (text.trim().isNotEmpty()) {\n\nIcon(Icons.Filled.Clear,\n\ncontentDescription = \"clear text\",\n\nmodifier = Modifier.padding(end = 16.dp).offset(x = 10.dp).clickable {\n\ntext = \"\"\n\n})\n\n} else {\n\nIcon(Icons.Filled.Search,\n\ncontentDescription = \"search\",\n\nmodifier = Modifier.padding(end = 16.dp).offset(x = 10.dp).clickable {\n\n})\n\n}\n\n})\n\nLaunchedEffect(Unit) {\n\nfocusRequester.requestFocus()\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → component → SearchUI.kt\n\npackage ui.component\n\nimport androidx.compose.foundation.Image\n\nimport androidx.compose.foundation.background\n\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.foundation.layout.*\n\nimport androidx.compose.foundation.lazy.LazyColumn\n\nimport androidx.compose.foundation.lazy.items\n\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.MutableState\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.draw.clip\n\nimport androidx.compose.ui.layout.ContentScale\n\nimport androidx.compose.ui.text.font.FontWeight\n\nimport androidx.compose.ui.unit.dp\n\nimport androidx.compose.ui.unit.sp\n\nimport com.seiko.imageloader.rememberAsyncImagePainter\n\nimport data.model.BaseModelV2\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport theme.DefaultBackgroundColor\n\nimport theme.FontColor\n\nimport theme.SecondaryFontColor\n\nimport utils.AppConstant\n\nimport utils.AppString\n\nimport utils.cornerRadius\n\nimport utils.network.DataState\n\nimport utils.roundTo\n\n@Composable\n\nfun SearchUI(\n\nnavController: Navigator,\n\nsearchData: MutableState<DataState<BaseModelV2>?>,\n\nitemClick: () -> Unit\n\n) {\n\nLazyColumn(\n\nmodifier = Modifier\n\n.fillMaxWidth()\n\n.heightIn(0.dp, 350.dp) // define max height\n\n.clip(RoundedCornerShape(bottomStart = 15.dp, bottomEnd = 15.dp))\n\n.background(color = DefaultBackgroundColor)\n\n.padding(top = 8.dp)\n\n) {\n\nsearchData.value?.let {\n\nif (it is DataState.Success<BaseModelV2>) {\n\nitems(items = it.data.results, itemContent = { item ->\n\nRow(modifier = Modifier\n\n.padding(bottom = 8.dp, start = 8.dp, end = 8.dp)\n\n.clickable {\n\nitemClick.invoke()\n\nnavController.navigate(\n\nNavigationScreen.MovieDetail.route.plus(\n\n\"/${item.id}\"\n\n)\n\n)\n\n}) {\n\nImage(\n\npainter = rememberAsyncImagePainter(\n\nAppConstant.IMAGE_URL.plus(\n\nitem.backdrop_path\n\n)\n\n),\n\ncontentDescription = item.backdrop_path,\n\nmodifier = Modifier\n\n.height(100.dp)\n\n.width(80.dp).cornerRadius(8).shimmerBackground(RoundedCornerShape(5.dp)),\n\ncontentScale = ContentScale.Crop,\n\n)\n\nColumn {\n\nText(\n\ntext = item.title,\n\nmodifier = Modifier.padding(\n\nstart = 8.dp,\n\ntop = 4.dp\n\n),\n\nfontWeight = FontWeight.SemiBold\n\n)\n\nText(\n\ntext = item.release_date,\n\ncolor = FontColor,\n\nfontSize = 16.sp,\n\nmodifier = Modifier.padding(start = 8.dp)\n\n)\n\nText(\n\ntext = \"${AppString.RATING_SEARCH} ${\n\nitem.vote_average.roundTo(\n\n1\n\n)\n\n}\",\n\ncolor = SecondaryFontColor,\n\nfontSize = 12.sp,\n\nmodifier = Modifier.padding(start = 8.dp)\n\n)\n\n}\n\n}\n\n})\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → component → ShimmerBackground.kt\n\npackage ui.component\n\nimport androidx.compose.animation.core.LinearOutSlowInEasing\n\nimport androidx.compose.animation.core.RepeatMode\n\nimport androidx.compose.animation.core.animateFloat\n\nimport androidx.compose.animation.core.infiniteRepeatable\n\nimport androidx.compose.animation.core.rememberInfiniteTransition\n\nimport androidx.compose.animation.core.tween\n\nimport androidx.compose.foundation.background\n\nimport androidx.compose.runtime.getValue\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.composed\n\nimport androidx.compose.ui.geometry.Offset\n\nimport androidx.compose.ui.graphics.Brush\n\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.graphics.RectangleShape\n\nimport androidx.compose.ui.graphics.Shape\n\nimport androidx.compose.ui.graphics.TileMode\n\nfun Modifier.shimmerBackground(shape: Shape = RectangleShape): Modifier = composed {\n\nval transition = rememberInfiniteTransition()\n\nval translateAnimation by transition.animateFloat(\n\ninitialValue = 0f,\n\ntargetValue = 400f,\n\nanimationSpec = infiniteRepeatable(\n\ntween(durationMillis = 1500, easing = LinearOutSlowInEasing),\n\nRepeatMode.Restart\n\n),\n\n)\n\nval shimmerColors = listOf(\n\nColor.LightGray.copy(alpha = 0.9f),\n\nColor.LightGray.copy(alpha = 0.4f),\n\n)\n\nval brush = Brush.linearGradient(\n\ncolors = shimmerColors,\n\nstart = Offset(translateAnimation, translateAnimation),\n\nend = Offset(translateAnimation + 100f, translateAnimation + 100f),\n\ntileMode = TileMode.Mirror,\n\n)\n\nreturn@composed this.then(background(brush, shape))\n\n}\n\nStep-7\n\nNow define all screens for bottom navigation as well as movie detail\n\nshared → commonMain → kotlin → ui → home → HomeScreen.kt\n\npackage ui.home\n\nimport androidx.compose.foundation.layout.*\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.*\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport data.model.MovieItem\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport ui.component.MovieList\n\nimport ui.component.ProgressIndicator\n\nimport utils.AppString\n\nimport utils.network.DataState\n\n@Composable\n\nfun HomeScreen(\n\nnavigator: Navigator,\n\nviewModel: NowPlayingViewModel = NowPlayingViewModel()\n\n) {\n\nLaunchedEffect(true) {\n\nviewModel.nowPlayingView(1)\n\n}\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n\nviewModel.nowPlayingResponse.collectAsState().value?.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<List<MovieItem>> -> {\n\nMovieList(it.data) { movieId ->\n\nnavigator.navigate(NavigationScreen.MovieDetail.route.plus(\"/$movieId\"))\n\n}\n\n}\n\nis DataState.Error -> {\n\nText(\"${AppString.ERROR_TEXT} ${it.exception}\")\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → home → NowPlayingViewModel.kt\n\npackage ui.home\n\nimport data.model.MovieItem\n\nimport data.repository.MovieRepository\n\nimport kotlinx.coroutines.CoroutineScope\n\nimport kotlinx.coroutines.Dispatchers\n\nimport kotlinx.coroutines.flow.MutableStateFlow\n\nimport kotlinx.coroutines.flow.collectLatest\n\nimport kotlinx.coroutines.launch\n\nimport moe.tlaster.precompose.viewmodel.ViewModel\n\nimport utils.network.DataState\n\nclass NowPlayingViewModel : ViewModel() {\n\nprivate val viewModelScope = CoroutineScope(Dispatchers.Main)\n\nprivate val repo = MovieRepository()\n\nval nowPlayingResponse = MutableStateFlow<DataState<List<MovieItem>>?>(DataState.Loading)\n\nfun nowPlayingView(page: Int) {\n\nviewModelScope.launch(Dispatchers.Main) {\n\nrepo.nowPlayingMovie(page).collectLatest {\n\nnowPlayingResponse.value = it\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → popular → Popular.kt\n\npackage ui.popular\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.foundation.layout.fillMaxWidth\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.LaunchedEffect\n\nimport androidx.compose.runtime.collectAsState\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport data.model.MovieItem\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport ui.component.MovieList\n\nimport ui.component.ProgressIndicator\n\nimport utils.AppString\n\nimport utils.network.DataState\n\n@Composable\n\nfun Popular(navigator: Navigator, viewModel: PopularViewModel = PopularViewModel()) {\n\nLaunchedEffect(true) {\n\nviewModel.nowPlayingView(1)\n\n}\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n\nviewModel.popularMovieResponse.collectAsState().value?.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<List<MovieItem>> -> {\n\nMovieList(it.data) { movieId ->\n\nnavigator.navigate(NavigationScreen.MovieDetail.route.plus(\"/$movieId\"))\n\n}\n\n}\n\nis DataState.Error ->{\n\nText(\"${AppString.ERROR_TEXT} ${it.exception}\")\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → popular → PopularViewModel.kt\n\npackage ui.popular\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.foundation.layout.fillMaxWidth\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.LaunchedEffect\n\nimport androidx.compose.runtime.collectAsState\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport data.model.MovieItem\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport ui.component.MovieList\n\nimport ui.component.ProgressIndicator\n\nimport utils.AppString\n\nimport utils.network.DataState\n\n@Composable\n\nfun Popular(navigator: Navigator, viewModel: PopularViewModel = PopularViewModel()) {\n\nLaunchedEffect(true) {\n\nviewModel.nowPlayingView(1)\n\n}\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n\nviewModel.popularMovieResponse.collectAsState().value?.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<List<MovieItem>> -> {\n\nMovieList(it.data) { movieId ->\n\nnavigator.navigate(NavigationScreen.MovieDetail.route.plus(\"/$movieId\"))\n\n}\n\n}\n\nis DataState.Error ->{\n\nText(\"${AppString.ERROR_TEXT} ${it.exception}\")\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → toprated → TopRated.kt\n\npackage ui.toprated\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.foundation.layout.fillMaxWidth\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.LaunchedEffect\n\nimport androidx.compose.runtime.collectAsState\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport data.model.MovieItem\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport ui.component.MovieList\n\nimport ui.component.ProgressIndicator\n\nimport utils.AppString\n\nimport utils.network.DataState\n\n@Composable\n\nfun TopRated(navigator: Navigator, viewModel: TopRatedViewModel = TopRatedViewModel()) {\n\nLaunchedEffect(true) {\n\nviewModel.nowPlayingView(1)\n\n}\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n\nviewModel.topRatedMovieResponse.collectAsState().value?.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<List<MovieItem>> -> {\n\nMovieList(it.data) { movieId ->\n\nnavigator.navigate(NavigationScreen.MovieDetail.route.plus(\"/$movieId\"))\n\n}\n\n}\n\nis DataState.Error -> {\n\nText(\"${AppString.ERROR_TEXT} ${it.exception}\")\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → toprated → TopRatedViewModel.kt\n\npackage ui.toprated\n\nimport data.model.MovieItem\n\nimport data.repository.MovieRepository\n\nimport kotlinx.coroutines.CoroutineScope\n\nimport kotlinx.coroutines.Dispatchers\n\nimport kotlinx.coroutines.flow.MutableStateFlow\n\nimport kotlinx.coroutines.flow.collectLatest\n\nimport kotlinx.coroutines.launch\n\nimport moe.tlaster.precompose.viewmodel.ViewModel\n\nimport utils.network.DataState\n\nclass TopRatedViewModel : ViewModel() {\n\nprivate val viewModelScope = CoroutineScope(Dispatchers.Main)\n\nprivate val repo = MovieRepository()\n\nval topRatedMovieResponse = MutableStateFlow<DataState<List<MovieItem>>?>(DataState.Loading)\n\nfun nowPlayingView(page: Int) {\n\nviewModelScope.launch(Dispatchers.Main) {\n\nrepo.topRatedMovie(page).collectLatest {\n\ntopRatedMovieResponse.value = it\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → upcoming → Upcoming.kt\n\npackage ui.upcoming\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.foundation.layout.fillMaxWidth\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.runtime.LaunchedEffect\n\nimport androidx.compose.runtime.collectAsState\n\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\n\nimport data.model.MovieItem\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport navigation.NavigationScreen\n\nimport ui.component.MovieList\n\nimport ui.component.ProgressIndicator\n\nimport utils.AppString\n\nimport utils.network.DataState\n\n@Composable\n\nfun Upcoming(navigator: Navigator, viewModel: UpcomingViewModel = UpcomingViewModel()) {\n\nLaunchedEffect(true) {\n\nviewModel.nowPlayingView(1)\n\n}\n\nColumn(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n\nviewModel.upComingMovieResponse.collectAsState().value?.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<List<MovieItem>> -> {\n\nMovieList(it.data) { movieId ->\n\nnavigator.navigate(NavigationScreen.MovieDetail.route.plus(\"/$movieId\"))\n\n}\n\n}\n\nis DataState.Error -> {\n\nText(\"${AppString.ERROR_TEXT} ${it.exception}\")\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → upcoming → UpcomingViewModel.kt\n\npackage ui.upcoming\n\nimport data.model.MovieItem\n\nimport data.repository.MovieRepository\n\nimport kotlinx.coroutines.CoroutineScope\n\nimport kotlinx.coroutines.Dispatchers\n\nimport kotlinx.coroutines.flow.MutableStateFlow\n\nimport kotlinx.coroutines.flow.collectLatest\n\nimport kotlinx.coroutines.launch\n\nimport moe.tlaster.precompose.viewmodel.ViewModel\n\nimport utils.network.DataState\n\nclass UpcomingViewModel : ViewModel() {\n\nprivate val viewModelScope = CoroutineScope(Dispatchers.Main)\n\nprivate val repo = MovieRepository()\n\nval upComingMovieResponse = MutableStateFlow<DataState<List<MovieItem>>?>(DataState.Loading)\n\nfun nowPlayingView(page: Int) {\n\nviewModelScope.launch(Dispatchers.Main) {\n\nrepo.upComingMovie(page).collectLatest {\n\nupComingMovieResponse.value = it\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → detail → MovieDetail.kt\n\npackage ui.detail\n\nimport androidx.compose.foundation.*\n\nimport androidx.compose.foundation.layout.*\n\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.runtime.*\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.layout.ContentScale\n\nimport androidx.compose.ui.text.font.FontWeight\n\nimport androidx.compose.ui.text.style.TextOverflow\n\nimport androidx.compose.ui.unit.dp\n\nimport androidx.compose.ui.unit.sp\n\nimport ui.component.text.SubtitlePrimary\n\nimport ui.component.text.SubtitleSecondary\n\nimport com.seiko.imageloader.rememberAsyncImagePainter\n\nimport data.model.moviedetail.MovieDetail\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport theme.DefaultBackgroundColor\n\nimport theme.FontColor\n\nimport ui.component.ProgressIndicator\n\nimport ui.component.shimmerBackground\n\nimport utils.AppConstant\n\nimport utils.AppString\n\nimport utils.hourMinutes\n\nimport utils.network.DataState\n\nimport utils.roundTo\n\n@Composable\n\nfun MovieDetail(\n\nnavigator: Navigator,\n\nmovieId: Int,\n\nmovieDetailViewModel: MovieDetailViewModel = MovieDetailViewModel()\n\n) {\n\nLaunchedEffect(true) {\n\nmovieDetailViewModel.movieDetail(movieId)\n\n}\n\nColumn(\n\nmodifier = Modifier\n\n.fillMaxSize()\n\n.background(\n\nDefaultBackgroundColor\n\n)\n\n) {\n\nmovieDetailViewModel.movieDetail.collectAsState().value.let {\n\nwhen (it) {\n\nis DataState.Loading -> {\n\nProgressIndicator()\n\n}\n\nis DataState.Success<MovieDetail> -> {\n\nColumn(modifier = Modifier.verticalScroll(rememberScrollState())) {\n\nImage(\n\npainter = rememberAsyncImagePainter(\n\nAppConstant.IMAGE_URL.plus(\n\nit.data.poster_path\n\n)\n\n),\n\ncontentDescription = it.data.poster_path,\n\nmodifier = Modifier\n\n.fillMaxWidth()\n\n.height(300.dp).shimmerBackground(\n\nRoundedCornerShape(5.dp)\n\n),\n\ncontentScale = ContentScale.Crop,\n\n)\n\nColumn(\n\nmodifier = Modifier\n\n.fillMaxSize()\n\n.padding(start = 10.dp, end = 10.dp)\n\n) {\n\nText(\n\ntext = it.data.title,\n\nmodifier = Modifier.padding(top = 10.dp),\n\ncolor = FontColor,\n\nfontSize = 30.sp,\n\nfontWeight = FontWeight.W700,\n\nmaxLines = 1,\n\noverflow = TextOverflow.Ellipsis\n\n)\n\nRow(\n\nmodifier = Modifier\n\n.fillMaxWidth()\n\n.padding(bottom = 10.dp, top = 10.dp)\n\n) {\n\nColumn(Modifier.weight(1f)) {\n\nSubtitlePrimary(\n\ntext = it.data.original_language,\n\n)\n\nSubtitleSecondary(\n\ntext = AppString.LANGUAGE\n\n)\n\n}\n\nColumn(Modifier.weight(1f)) {\n\nSubtitlePrimary(\n\ntext = it.data.vote_average.roundTo(1).toString(),\n\n)\n\nSubtitleSecondary(\n\ntext = AppString.RATING\n\n)\n\n}\n\nColumn(Modifier.weight(1f)) {\n\nSubtitlePrimary(\n\ntext = it.data.runtime.hourMinutes()\n\n)\n\nSubtitleSecondary(\n\ntext = AppString.DURATION\n\n)\n\n}\n\nColumn(Modifier.weight(1f)) {\n\nSubtitlePrimary(\n\ntext = it.data.release_date\n\n)\n\nSubtitleSecondary(\n\ntext = AppString.RELEASE_DATE\n\n)\n\n}\n\n}\n\nText(\n\ntext = AppString.DESCRIPTION,\n\ncolor = FontColor,\n\nfontSize = 17.sp,\n\nfontWeight = FontWeight.SemiBold\n\n)\n\nText(text = it.data.overview)\n\n}\n\n}\n\n}\n\nis DataState.Error -> {\n\nText(\"Error :${it.exception}\")\n\n}\n\nelse -> {\n\n}\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → detail → MovieDetailViewModel.kt\n\npackage ui.detail\n\nimport data.model.moviedetail.MovieDetail\n\nimport data.repository.MovieRepository\n\nimport kotlinx.coroutines.CoroutineScope\n\nimport kotlinx.coroutines.Dispatchers\n\nimport kotlinx.coroutines.flow.MutableStateFlow\n\nimport kotlinx.coroutines.flow.collectLatest\n\nimport kotlinx.coroutines.launch\n\nimport moe.tlaster.precompose.viewmodel.ViewModel\n\nimport utils.network.DataState\n\nclass MovieDetailViewModel : ViewModel() {\n\nprivate val viewModelScope = CoroutineScope(Dispatchers.Main)\n\nprivate val repo = MovieRepository()\n\nval movieDetail = MutableStateFlow<DataState<MovieDetail>?>(DataState.Loading)\n\nfun movieDetail(movieId: Int) {\n\nviewModelScope.launch(Dispatchers.Main) {\n\nrepo.movieDetail(movieId).collectLatest {\n\nmovieDetail.value = it\n\n}\n\n}\n\n}\n\n}\n\nshared → commonMain → kotlin → ui → AppViewModel.kt\n\npackage ui\n\nimport androidx.compose.runtime.MutableState\n\nimport androidx.compose.runtime.mutableStateOf\n\nimport data.model.BaseModelV2\n\nimport data.repository.MovieRepository\n\nimport kotlinx.coroutines.CoroutineScope\n\nimport kotlinx.coroutines.Dispatchers\n\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\n\nimport kotlinx.coroutines.FlowPreview\n\nimport kotlinx.coroutines.flow.debounce\n\nimport kotlinx.coroutines.flow.distinctUntilChanged\n\nimport kotlinx.coroutines.flow.filter\n\nimport kotlinx.coroutines.flow.flatMapLatest\n\nimport kotlinx.coroutines.flow.flowOf\n\nimport kotlinx.coroutines.launch\n\nimport moe.tlaster.precompose.viewmodel.ViewModel\n\nimport utils.network.DataState\n\n@ExperimentalCoroutinesApi\n\nclass AppViewModel: ViewModel() {\n\nprivate val viewModelScope = CoroutineScope(Dispatchers.Main)\n\nprivate val repo = MovieRepository()\n\nval searchData: MutableState<DataState<BaseModelV2>?> = mutableStateOf(null)\n\n@ExperimentalCoroutinesApi\n\n@FlowPreview\n\nfun searchApi(searchKey: String) {\n\nviewModelScope.launch {\n\nflowOf(searchKey).debounce(300)\n\n.filter {\n\nit.trim().isEmpty().not()\n\n}\n\n.distinctUntilChanged()\n\n.flatMapLatest {\n\nrepo.searchMovie(it)\n\n}.collect {\n\nif (it is DataState.Success){\n\nit.data\n\n}\n\nsearchData.value = it\n\n}\n\n}\n\n}\n\n}\n\nStep-8\n\nNow define the main component of the app\n\nshared → commonMain → kotlin → App.kt\n\nimport androidx.compose.foundation.layout.Column\n\nimport androidx.compose.material.BottomNavigation\n\nimport androidx.compose.material.BottomNavigationItem\n\nimport androidx.compose.material.FloatingActionButton\n\nimport androidx.compose.material.Icon\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.Scaffold\n\nimport androidx.compose.material.Text\n\nimport androidx.compose.material.icons.Icons\n\nimport androidx.compose.material.icons.filled.Search\n\nimport androidx.compose.runtime.*\n\nimport androidx.compose.ui.graphics.Color\n\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\n\nimport moe.tlaster.precompose.navigation.BackHandler\n\nimport moe.tlaster.precompose.navigation.NavOptions\n\nimport moe.tlaster.precompose.navigation.Navigator\n\nimport moe.tlaster.precompose.navigation.rememberNavigator\n\nimport navigation.Navigation\n\nimport navigation.NavigationScreen\n\nimport navigation.currentRoute\n\nimport theme.FloatingActionBackground\n\nimport ui.AppViewModel\n\nimport ui.component.AppBarWithArrow\n\nimport ui.component.ProgressIndicator\n\nimport ui.component.SearchBar\n\nimport ui.component.SearchUI\n\nimport utils.AppString\n\nimport utils.pagingLoadingState\n\n@OptIn(ExperimentalCoroutinesApi::class)\n\n@Composable\n\ninternal fun App(viewModel: AppViewModel = AppViewModel()) {\n\nval navigator = rememberNavigator()\n\nval isAppBarVisible = remember { mutableStateOf(true) }\n\nval searchProgressBar = remember { mutableStateOf(false) }\n\nBackHandler(isAppBarVisible.value.not()) {\n\nisAppBarVisible.value = true\n\n}\n\nMaterialTheme {\n\nScaffold(topBar = {\n\nif (isAppBarVisible.value.not()) {\n\nSearchBar(viewModel) {\n\nisAppBarVisible.value = true\n\n}\n\n} else {\n\nAppBarWithArrow(\n\nAppString.APP_TITLE, isBackEnable = isBackButtonEnable(navigator)\n\n) {\n\nnavigator.goBack()\n\n}\n\n}\n\n}, floatingActionButton = {\n\nwhen (currentRoute(navigator)) {\n\nNavigationScreen.Home.route, NavigationScreen.Popular.route, NavigationScreen.TopRated.route, NavigationScreen.Upcoming.route -> {\n\nFloatingActionButton(\n\nonClick = {\n\nisAppBarVisible.value = false\n\n}, backgroundColor = FloatingActionBackground\n\n) {\n\nIcon(Icons.Filled.Search, \"\", tint = Color.White)\n\n}\n\n}\n\n}\n\n}, bottomBar = {\n\nwhen (currentRoute(navigator)) {\n\nNavigationScreen.Home.route, NavigationScreen.Popular.route, NavigationScreen.TopRated.route, NavigationScreen.Upcoming.route -> {\n\nBottomNavigationUI(navigator)\n\n}\n\n}\n\n}) {\n\nNavigation(navigator)\n\nif (currentRoute(navigator) !== NavigationScreen.MovieDetail.route) {\n\nColumn {\n\nif (isAppBarVisible.value.not()) {\n\nSearchUI(navigator, viewModel.searchData) {\n\nisAppBarVisible.value = true\n\n}\n\nProgressIndicator(searchProgressBar.value)\n\n}\n\nviewModel.searchData.pagingLoadingState {\n\nsearchProgressBar.value = it\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n@Composable\n\nfun BottomNavigationUI(navigator: Navigator) {\n\nBottomNavigation {\n\nval items = listOf(\n\nNavigationScreen.HomeNav,\n\nNavigationScreen.PopularNav,\n\nNavigationScreen.TopRatedNav,\n\nNavigationScreen.UpcomingNav,\n\n)\n\nitems.forEach {\n\nBottomNavigationItem(label = { Text(text = it.title) },\n\nselected = it.route == currentRoute(navigator),\n\nicon = it.navIcon,\n\nonClick = {\n\nnavigator.navigate(\n\nit.route,\n\nNavOptions(\n\nlaunchSingleTop = true,\n\n),\n\n)\n\n})\n\n}\n\n}\n\n}\n\n@Composable\n\nfun isBackButtonEnable(navigator: Navigator): Boolean {\n\nreturn when (currentRoute(navigator)) {\n\nNavigationScreen.Home.route, NavigationScreen.Popular.route, NavigationScreen.TopRated.route, NavigationScreen.Upcoming.route -> {\n\nfalse\n\n}\n\nelse -> {\n\ntrue\n\n}\n\n}\n\n}\n\nStep-9:\n\nLet’s define utility functions in utils\n\nshared → commonMain → kotlin → utils → network → DataState.kt\n\npackage utils.network\n\n/**\n\n* Data state for processing api response Loading, Success and Error\n\n*/\n\nsealed class DataState<out R> {\n\ndata class Success<out T>(val data: T) : DataState<T>()\n\ndata class Error(val exception: Exception) : DataState<Nothing>()\n\nobject Loading : DataState<Nothing>()\n\n}\n\nshared → commonMain → kotlin → utils → AppConstant.kt\n\npackage utils\n\nobject AppConstant {\n\nconst val API_KEY = \"59cd6896d8432f9c69aed9b86b9c2931\"\n\nconst val BASE_URL = \"https://api.themoviedb.org/\"\n\nconst val IMAGE_URL = \"https://image.tmdb.org/t/p/w342\"\n\n}\n\nshared → commonMain → kotlin → utils → AppString.kt\n\npackage utils\n\nobject AppString {\n\nconst val APP_TITLE = \"Movie World\"\n\nconst val LANGUAGE = \"Language\"\n\nconst val RATING = \"Rating\"\n\nconst val DURATION = \"Duration\"\n\nconst val RELEASE_DATE = \"Release Date\"\n\nconst val DESCRIPTION = \"Description\"\n\nconst val RATING_SEARCH = \"Rating :\"\n\nconst val ERROR_TEXT = \"Error :\"\n\n}\n\nshared → commonMain → kotlin → utils → CommonExtension.kt\n\npackage utils\n\nimport kotlin.math.pow\n\nimport kotlin.math.roundToInt\n\nimport kotlin.time.Duration.Companion.minutes\n\nfun Int.hourMinutes(): String {\n\nreturn \"${this.minutes.inWholeHours}h ${this % 60}m\"\n\n}\n\nfun Int.genderInString(): String {\n\nreturn when (this) {\n\n1 -> \"Female\"\n\n2 -> \"Male\"\n\nelse -> \"\"\n\n}\n\n}\n\nfun Double.roundTo(numFractionDigits: Int): Double {\n\nval factor = 10.0.pow(numFractionDigits.toDouble())\n\nreturn (this * factor).roundToInt() / factor\n\n}\n\nshared → commonMain → kotlin → utils → UIExtension.kt\n\npackage utils\n\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\nimport androidx.compose.runtime.MutableState\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.graphics.graphicsLayer\n\nimport androidx.compose.ui.unit.dp\n\nimport utils.network.DataState\n\nfun Modifier.cornerRadius(radius: Int) =\n\ngraphicsLayer(shape = RoundedCornerShape(radius.dp), clip = true)\n\nfun <T : Any> MutableState<DataState<T>?>.pagingLoadingState(isLoaded: (pagingState: Boolean) -> Unit) {\n\nwhen (this.value) {\n\nis DataState.Success<T> -> {\n\nisLoaded(false)\n\n}\n\nis DataState.Loading -> {\n\nisLoaded(true)\n\n}\n\nis DataState.Error -> {\n\nisLoaded(false)\n\n}\n\nelse -> {\n\nisLoaded(false)\n\n}\n\n}\n\n}\n\nStep-10\n\nLet’s add theme for the app.\n\nshared → commonMain → kotlin → theme → Color.kt\n\npackage theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\n\nval Purple500 = Color(0xFF6200EE)\n\nval Purple700 = Color(0xFF3700B3)\n\nval Teal200 = Color(0xFF03DAC5)\n\nval FontColor = Color(0xFF212121)\n\nval SecondaryFontColor = Color(0xFF757575)\n\nval DefaultBackgroundColor = Color(0xFFFAFAFA)\n\nval Blue = Color(0xff76a9ff)\n\nval FloatingActionBackground = Color(0xffFBC02D)\n\nval LinkColor = Color(0xff64B5F6)\n\nshared → commonMain → kotlin → theme → Shape.kt\n\npackage theme\n\nimport androidx.compose.foundation.shape.RoundedCornerShape\n\nimport androidx.compose.material.Shapes\n\nimport androidx.compose.ui.Modifier\n\nimport androidx.compose.ui.graphics.graphicsLayer\n\nimport androidx.compose.ui.unit.dp\n\nval Shapes = Shapes(\n\nsmall = RoundedCornerShape(4.dp),\n\nmedium = RoundedCornerShape(4.dp),\n\nlarge = RoundedCornerShape(0.dp)\n\n)\n\nfun Modifier.cornerRadius(radius: Int) =\n\ngraphicsLayer(shape = RoundedCornerShape(radius.dp), clip = true)\n\nshared → commonMain → kotlin → theme → Theme.kt\n\npackage theme\n\nimport androidx.compose.foundation.isSystemInDarkTheme\n\nimport androidx.compose.material.MaterialTheme\n\nimport androidx.compose.material.darkColors\n\nimport androidx.compose.material.lightColors\n\nimport androidx.compose.runtime.Composable\n\nprivate val DarkColorPalette = darkColors(\n\nprimary = Purple200,\n\nprimaryVariant = Purple700,\n\nsecondary = Teal200\n\n)\n\nprivate val LightColorPalette = lightColors(\n\nprimary = Purple500,\n\nprimaryVariant = Purple700,\n\nsecondary = Teal200\n\n/* Other default colors to override\n\nbackground = Color.White,\n\nsurface = Color.White,\n\nonPrimary = Color.White,\n\nonSecondary = Color.Black,\n\nonBackground = Color.Black,\n\nonSurface = Color.Black,\n\n*/\n\n)\n\n@Composable\n\nfun HiltMVVMComposeMovieTheme(\n\ndarkTheme: Boolean = isSystemInDarkTheme(),\n\ncontent: @Composable() () -> Unit\n\n) {\n\nval colors = if (darkTheme) {\n\nDarkColorPalette\n\n} else {\n\nLightColorPalette\n\n}\n\nMaterialTheme(\n\ncolors = colors,\n\ntypography = Typography,\n\nshapes = Shapes,\n\ncontent = content\n\n)\n\n}\n\nshared → commonMain → kotlin → theme → Theme.kt\n\npackage theme\n\nimport androidx.compose.material.Typography\n\nimport androidx.compose.runtime.Composable\n\nimport androidx.compose.ui.text.TextStyle\n\nimport androidx.compose.ui.text.font.FontFamily\n\nimport androidx.compose.ui.text.font.FontWeight\n\nimport androidx.compose.ui.unit.sp\n\n// Set of Material typography styles to start with\n\nval Typography = Typography(\n\nbody1 = TextStyle(\n\nfontFamily = FontFamily.Default,\n\nfontWeight = FontWeight.Normal,\n\nfontSize = 16.sp\n\n),\n\nbutton = TextStyle(\n\nfontFamily = FontFamily.Default,\n\nfontWeight = FontWeight.W500,\n\nfontSize = 14.sp\n\n),\n\ncaption = TextStyle(\n\nfontFamily = FontFamily.Default,\n\nfontWeight = FontWeight.Normal,\n\nfontSize = 12.sp\n\n)\n\n)\n\nval Typography.subTitlePrimary: TextStyle\n\n@Composable\n\nget() {\n\nreturn TextStyle(\n\nfontFamily = FontFamily.Default,\n\ncolor = FontColor,\n\nfontSize = 14.sp,\n\nfontWeight = FontWeight.Medium\n\n)\n\n}\n\nval Typography.subTitleSecondary: TextStyle\n\n@Composable\n\nget() {\n\nreturn TextStyle(\n\nfontFamily = FontFamily.Default,\n\ncolor = SecondaryFontColor,\n\nfontSize = 10.sp,\n\n)\n\n}\n\nval Typography.bioGrapyText: TextStyle\n\n@Composable\n\nget() {\n\nreturn TextStyle(\n\nfontFamily = FontFamily.Default,\n\ncolor = SecondaryFontColor,\n\nfontSize = 14.sp,\n\n)\n\n}\n\nStep-11\n\nBefore running don’t forget to add data classes inside this package shared → commonMain → kotlin → data → model, from GitHub reference.\n\nNow run the app and app home screen and movie detail should be following the screenshot"
    }
}