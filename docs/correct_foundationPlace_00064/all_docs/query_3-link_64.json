{
    "id": "correct_foundationPlace_00064_3",
    "rank": 64,
    "data": {
        "url": "https://kotlinlang.org/docs/serialization.html",
        "read_more_link": "",
        "language": "en",
        "title": "Serialization | Kotlin",
        "top_image": "https://kotlinlang.org/assets/images/open-graph/docs.png",
        "meta_img": "https://kotlinlang.org/assets/images/open-graph/docs.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://kotlinlang.org/assets/images/favicon.svg?v2",
        "meta_site_name": "Kotlin Help",
        "canonical_link": "https://kotlinlang.org/docs/serialization.html",
        "text": "Serialization\n\nSerialization is the process of converting data used by an application to a format that can be transferred over a network or stored in a database or a file. In turn, deserialization is the opposite process of reading data from an external source and converting it into a runtime object. Together, they are essential to most applications that exchange data with third parties.\n\nSome data serialization formats, such as JSON and protocol buffers are particularly common. Being language-neutral and platform-neutral, they enable data exchange between systems written in any modern language.\n\nIn Kotlin, data serialization tools are available in a separate component, kotlinx.serialization. It consists of several parts: the org.jetbrains.kotlin.plugin.serialization Gradle plugin, runtime libraries, and compiler plugins.\n\nCompiler plugins, kotlinx-serialization-compiler-plugin and kotlinx-serialization-compiler-plugin-embeddable, are published directly to Maven Central. The second plugin is designed for working with the kotlin-compiler-embeddable artifact, which is the default option for scripting artifacts. Gradle adds compiler plugins to your projects as compiler arguments.\n\nLibraries\n\nkotlinx.serialization provides sets of libraries for all supported platforms â JVM, JavaScript, Native â and for various serialization formats â JSON, CBOR, protocol buffers, and others. You can find the complete list of supported serialization formats below.\n\nAll Kotlin serialization libraries belong to the org.jetbrains.kotlinx: group. Their names start with kotlinx-serialization- and have suffixes that reflect the serialization format. Examples:\n\norg.jetbrains.kotlinx:kotlinx-serialization-json provides JSON serialization for Kotlin projects.\n\norg.jetbrains.kotlinx:kotlinx-serialization-cbor provides CBOR serialization.\n\nPlatform-specific artifacts are handled automatically; you don't need to add them manually. Use the same dependencies in JVM, JS, Native, and multiplatform projects.\n\nNote that the kotlinx.serialization libraries use their own versioning structure, which doesn't match Kotlin's versioning. Check out the releases on GitHub to find the latest versions.\n\nFormats\n\nkotlinx.serialization includes libraries for various serialization formats:\n\nJSON: kotlinx-serialization-json\n\nProtocol buffers: kotlinx-serialization-protobuf\n\nCBOR: kotlinx-serialization-cbor\n\nProperties: kotlinx-serialization-properties\n\nHOCON: kotlinx-serialization-hocon (only on JVM)\n\nNote that all libraries except JSON serialization (kotlinx-serialization-json) are Experimental, which means their API can be changed without notice.\n\nThere are also community-maintained libraries that support more serialization formats, such as YAML or Apache Avro. For detailed information about available serialization formats, see the kotlinx.serialization documentation.\n\nExample: JSON serialization\n\nLet's take a look at how to serialize Kotlin objects into JSON.\n\nAdd plugins and dependencies\n\nBefore starting, you must configure your build script so that you can use Kotlin serialization tools in your project:\n\nApply the Kotlin serialization Gradle plugin org.jetbrains.kotlin.plugin.serialization (or kotlin(\"plugin.serialization\") in the Kotlin Gradle DSL).\n\nplugins { kotlin(\"jvm\") version \"2.0.0\" kotlin(\"plugin.serialization\") version \"2.0.0\" }\n\nplugins { id 'org.jetbrains.kotlin.jvm' version '2.0.0' id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0' }\n\nAdd the JSON serialization library dependency:org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1\n\ndependencies { implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1\") }\n\ndependencies { implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1' }\n\nNow you're ready to use the serialization API in your code. The API is located in the kotlinx.serialization package and its format-specific subpackages, such as kotlinx.serialization.json.\n\nSerialize and deserialize JSON\n\nMake a class serializable by annotating it with @Serializable.\n\nimport kotlinx.serialization.Serializable @Serializable data class Data(val a: Int, val b: String)\n\nSerialize an instance of this class by calling Json.encodeToString().\n\nimport kotlinx.serialization.Serializable import kotlinx.serialization.json.Json import kotlinx.serialization.encodeToString @Serializable data class Data(val a: Int, val b: String) fun main() { val json = Json.encodeToString(Data(42, \"str\")) }\n\nAs a result, you get a string containing the state of this object in the JSON format: {\"a\": 42, \"b\": \"str\"}\n\nUse the decodeFromString() function to deserialize an object from JSON:\n\nimport kotlinx.serialization.Serializable import kotlinx.serialization.json.Json import kotlinx.serialization.decodeFromString @Serializable data class Data(val a: Int, val b: String) fun main() { val obj = Json.decodeFromString<Data>(\"\"\"{\"a\":42, \"b\": \"str\"}\"\"\") }\n\nThat's it! You have successfully serialized objects into JSON strings and deserialized them back into objects.\n\nWhat's next\n\nFor more information about serialization in Kotlin, see the Kotlin Serialization Guide.\n\nYou can explore different aspects of Kotlin serialization in the following resources:\n\nLearn more about Kotlin serialization and its core concepts\n\nExplore the built-in serializable classes of Kotlin\n\nLook at serializers in more detail and learn how to create custom serializers\n\nDiscover how polymorphic serialization is handled in Kotlin\n\nLook into the various JSON features handling Kotlin serialization\n\nLearn more about the experimental serialization formats supported by Kotlin\n\nLast modified: 28 November 2023"
    }
}