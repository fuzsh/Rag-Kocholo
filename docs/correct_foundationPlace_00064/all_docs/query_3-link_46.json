{
    "id": "correct_foundationPlace_00064_3",
    "rank": 46,
    "data": {
        "url": "https://egeria-project.org/education/tutorials/intellij-tutorial/overview/",
        "read_more_link": "",
        "language": "en",
        "title": "Open metadata and governance for enterprises",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://live-lfprojects3.linuxfoundation.org/wp-content/uploads/2022/01/lfprojects_banner.png",
            "https://egeria-project.org/assets/images/egeria-header.png",
            "https://egeria-project.org/assets/images/egeria-header.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-file-open.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-select-clone-directory.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-trust-project.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-import-maven-project.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-set-java-level.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-maven-sidebar-menu.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-run-maven-option.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-run-maven-option.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-maven-module-lifecycle-values.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-maven-sidebar-menu.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-maven-module-lifecycle-values.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-maven-sidebar-menu.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-run-maven-option.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-terminal-tab.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-1.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-2.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-3.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-4.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-5.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-new-project-6.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-package-1.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-package-2.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-package-3.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-class-1.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-class-2.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-add-java-class-3.png",
            "https://egeria-project.org/education/tutorials/intellij-tutorial/intellij-git-add-option.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Open metadata and governance for enterprises - automatically capturing, managing and exchanging metadata between tools and platforms",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "IntelliJ IDEA tutorial¶\n\nIntelliJ IDEA by JetBrains is the Interactive Development Environment (IDE) used by most of the Egeria developers. The community edition is free to use and covers all the function needed by an Egeria developer.\n\nSee the overview video of IntelliJ on its homepage.\n\nManaging your IntelliJ environment¶\n\nInstalling Intellij¶\n\nLink to the download page and follow the instructions. Then start up IntelliJ and a wizard appears.\n\nLoading Egeria into IntelliJ IDEA¶\n\nOnce you have a copy of a git repository on your local disk you can load the contents into IntelliJ.\n\nGo to the File menu and select Open\n\nThen select the top-level directory that was created when you cloned the git repository.\n\nYou may be warned about loading egeria in which case select Trust Project:\n\nIf asked which build approach to use, select Maven:\n\nIntelliJ will then start reading the git repository and creating a project. This may take a few minutes so be patient.\n\nValidate that the project is set up with the right level of Java - you need Java 17. Select File and then Project Structure.... When the wizard opens select Project and ensure the SDK is Java 17.\n\nBuilding Egeria in IntelliJ IDEA¶\n\nThe build process is different for each git repository. Click on the table for the repository that you are building:\n\nUsing maven rather than using the IntelliJ build?¶\n\nWhile you are working on code in IntelliJ, it will be continuously rebuilding your code so that it is discovering syntax other coding errors as you type. This is useful in getting a first pass of your code.\n\nHowever, IntelliJ does not understand the egeria structure - only Maven does, so the Maven build is important to to verify your changes are OK at the project level.\n\nInstalling Egeria¶\n\nIf your development work is using the main Egeria libraries rather than developing its contents, you may wish to install Egeria into a more convenient location on your local disk.\n\nClick on the Terminal tab - typically at the bottom of your IntelliJ window - to open the terminal window. The working directory is positioned at the top of your project.\n\nThe egeria build process creates the distribution files for Egeria in the open-metadata-distribution/omag-server-platform module. To see its contents, after a full gradle build completes, use the following cd command to change to its build/distributions directory:\n\nList the files:\n\nls\n\nThe distribution tar file is egeria-platform-{release}-distribution.tar.gz or egeria-platform-4.3-distribution.tar.gz in this example.\n\negeria-platform-4.3-distribution.tar.gz\n\nCreate a directory for Egeria and copy the tar file into it. The two commands shown below creates a directory in your home directory and then copies the egeria distribution file into it.\n\nThis next command changes to the new directory.\n\nIt is now possible to unpack the tar file with the following steps.\n\nA new directory is created called egeria-platform-{release}-distribution.tar.gz or egeria-platform-4.3-distribution.tar.gz in this example. Change to this new directory and list its contents as shown below.\n\nls\n\nAs before, you may notice different files as Egeria evolves.\n\nThe Dockerfile contains the directives to build a docker image. Instructions for doing this are in the README.md file. Change to the assembly directory.\n\nls\n\nUnder platform is a directory for the OMAG Server Platform that is used to run open metadata and governance services. This is the omag-server-platform-{{release}}.jar. The platform/lib directory is where the jar files for connectors, samples and new registered services are installed. It includes the connectors that are located in the egeria.git repository. The platform/extra directory is where connectors from other repositories are added (including those that you write yourself). Copy the jar files for any additional connectors you want to use into the extra directory. The connectors available for Egeria are listed in the Connector Catalog.\n\nThe opt and etc directories contain additional content that can used with the platform. For example, the etc/reports directory contains java programs that describe different aspects of the platform.\n\nThe opt/content-packs directory contains Open Metadata Archives that provide sample open metadata content. The README.md describes their content. The /opt/sample-data directory contains sample data that is used in various labs and samples.\n\nNotice that each directory contains a README.md file that explains the content of the directory.\n\nDeveloping new function with IntelliJ IDEA¶\n\nCreating a new project¶\n\nTo add a new project to intellij, select New then Project from the File top-level menu of IntelliJ.\n\nSelect Java then set up the project SDK by selecting your Java 17 installed JDK and then click the Next button. If this is the first time you are using IntelliJ you may need to click on the New... button and navigate to your install directory.\n\nLeave the Create project from template option blank and simply click the Next button.\n\nAdd the name of the project in Project name and the directory where you want the project files to be stored in Project location.\n\nClick on the Finish button. If the directory is new, you may get this pop-up to confirm that the directory should be created. Click OK.\n\nOnce the wizard completes IntelliJ will open up your new project, ready to begin coding. The src directory is where your code will go.\n\nCreating a new java package¶\n\nTo add a new Java package to your project, right-mouse click on the java directory.\n\nSelect New then Package on the sub menu.\n\nA pop-up box appears asking for the name of the package. Enter your new package name and press the OK button. Java package names are in lowercase and are dot (.) separated.\n\nThe new package appears under src in the project list.\n\nCreating a new java class¶\n\nTo add a new Java class to your project, right-mouse click on the package name and select New then Java Class on the sub menu.\n\nA pop-up box appears asking for the name of the class. Enter your new class name and press the OK button.\n\nThe new class appears in the project list and the source file is open in the editor.\n\nAdding changes to Git¶\n\nAny changes, additions and deletions that you make to the files under the git repository directory are automatically detected by git. It is possible to add these changes to your clone using the Add option on the Git right-mouse menu."
    }
}