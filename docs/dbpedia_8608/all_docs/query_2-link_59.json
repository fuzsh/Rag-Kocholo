{
    "id": "dbpedia_8608_2",
    "rank": 59,
    "data": {
        "url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7334155/",
        "read_more_link": "",
        "language": "en",
        "title": "Detecting Off-Task Behavior from Student Dialogue in Game-Based Collaborative Learning",
        "top_image": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "meta_img": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "images": [
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/favicons/favicon-57.png",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-dot-gov.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-https.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/logos/AgencyLogo.svg",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/logo-phenaturepg.png",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/corrauth.gif",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/corrauth.gif",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7334155/bin/496927_1_En_5_Fig1_HTML.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dan Carpenter",
            "Andrew Emerson",
            "Bradford W. Mott",
            "Asmalina Saleh",
            "Krista D. Glazewski",
            "Cindy E. Hmelo-Silver",
            "James C. Lester"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Collaborative game-based learning environments integrate game-based learning and collaborative learning. These environments present students with a shared objective and provide them with a means to communicate, which allows them to share information, ...",
        "meta_lang": "en",
        "meta_favicon": "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/favicons/favicon.ico",
        "meta_site_name": "PubMed Central (PMC)",
        "canonical_link": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7334155/",
        "text": "Introduction\n\nComputer-supported collaborative learning can create highly effective learning experiences [1, 2]. It has been found that students benefit from learning in groups when given automated support [3], with conversation between students acting as a stimulus for learning [4]. In digital learning environments, collaboration can be achieved by allowing students to contribute to a group chat conversation [5, 6]. However, students can engage in off-task behavior [7], which can manifest as off-task chat messaging.\n\nOff-task behavior has been identified as a significant challenge [8–10]. Because off-task behavior may be linked to boredom, which has been shown to negatively impact learning outcomes [11], it is important to enable learning environments to respond when students go off task. Although it has been found that off-task behavior can sometimes be beneficial for learning, as students may use off-task time to regulate negative affective states such as frustration [12], it is nonetheless important to identify student behaviors as off-task as such behaviors can be frequently associated with ineffective learning.\n\nDetermining when a behavior is off-task is challenging because whether a given behavior is on-task or off-task is highly dependent on the context in which the behavior occurs. To be able to provide adaptive scaffolding that responds to off-task behaviors, learning environments must be able to automatically detect off-task behavior in real-time. While there has been progress on characterizing types of off-task behavior [9, 13] and understanding their impacts on learning [12, 14], limited work has investigated automatically identifying off-task behavior. A particularly intriguing area of unexplored work is on identifying off-task behavior during collaborative learning. In this paper, we investigate off-task dialogue models to classify chat messages from interactions in collaborative game-based learning as off-task or on-task to inform the design of conversational agents that can guide groups that have gone off-task toward more productive dialogue.\n\nUsing chat log data collected from middle school students’ interactions in Crystal Island: EcoJourneys, a collaborative game-based learning environment for ecosystem science, we investigate off-task dialogue models for classifying students’ conversational utterances as off-task or on-task during collaborative game-based learning. We investigate the effects of contextual information by comparing predictive models that only incorporate features derived from the current chat message to models that also include features derived from a context window of previous messages within the chat log. These include both static and sequential modeling techniques that utilize varying amounts of context. Additionally, we compare the use of several word embedding techniques for deriving features. First, we use pre-trained word2vec embeddings [15], which were trained on very large corpora to capture semantic and syntactic features of individual words. Second, we derive embeddings from the ELMo [16] and BERT [17] models, which use sequence-based neural networks to represent lexical semantics. These embeddings also leverage large corpora and augment each word embedding with additional information based on how the word is being used in specific contexts. Results demonstrate that sequential models that incorporate contextual information using both a window of previous dialogue and contextualized word embeddings yield substantial predictive accuracy and precision for detecting off-task student dialogue.\n\nRelated Work\n\nComputer-supported collaborative learning (CSCL) has been shown to positively impact learning outcomes in a variety of contexts [1, 2]. However, providing students with a means to communicate during learning can potentially lead to off-task conversations. In a study examining discovery learning in a collaborative environment [7], dyads of high school students worked on separate screens in a shared environment and communicated via an integrated chat system. Researchers found that 15.7% of the chat messages were considered to be off-task, which by their definition meant that the messages had nothing to do with the task [7]. And while collaborative game-based learning environments offer the potential to create learning experiences that are engaging on many levels, the combination of collaboration and “seductive details” of game-based learning [8] can potentially exacerbate this issue, leading to off-task behavior.\n\nThe majority of previous work investigating off-task behavior in digital learning environments does not seek to automatically detect off-task behaviors. Rather, researchers commonly try to classify the type of off-task behavior and analyze the effects it has on learning [8, 10]. Some work has explored automatically detecting off-task behavior in digital learning environments. Baker [13] sought to detect off-task behavior in an intelligent tutoring system for math education, where off-task behavior was defined as behavior that did not involve the system or the learning task. Field observations of students’ behaviors were used as ground truth labels for the machine learning algorithms used by Baker [13] and corresponded to the four categories set forth in Baker et al. [9]. As a baseline, Baker [13] set a threshold for time spent inactive, considering anything above that threshold to be an instance of off-task behavior. Our work extends this line of investigation and focuses on students’ textual communication while engaging in collaborative learning.\n\nLittle work has analyzed natural language to detect off-task behavior. However, this approach is similar in vein to detecting the topic of students’ writing [18–20] and analyzing student dialogue during collaboration [21, 22]. Louis and Higgins [18], Persing and Ng [19] and Rei [20] all used natural language processing methods to determine whether a student’s essay is related to a given text prompt. Rei [20] made use of word embeddings for determining if an essay is related to a prompt. Similarly, we use word embeddings to determine if students’ dialogue is related to either relevant curricular content or the collaboration process. Focusing more on collaborative learning, Adamson et al. [21] presented a framework for dynamically scaffolding online collaborative learning discussions using conversational agents that analyze students’ conversations and respond to certain linguistic triggers. The work by Rodriguez et al. [22] demonstrated that specific characteristics of quality collaboration can be found by examining the contribution of multiple students, which we capture in off-task dialogue models that consider previous messages in the chat log.\n\nOff-Task Dialogue Modeling\n\nThis work used data collected from Crystal Island: EcoJourneys, a collaborative game-based learning environment on ecosystem science (Fig. ). Students work together in the game to identify the causes underlying a sudden sickness affecting a fish species on a remote island. Students work at their own computers and share a virtual game environment with the other students in their group. Within each group of students, individual members take on unique roles in the storyline, gathering information that can help them solve the problem along the way. At various points during the story, students gather at an in-game virtual whiteboard to share what they have learned and work together to narrow down the causes of the fishes’ sickness. Communication between students is achieved through an in-game chat system (Fig. ), where they can discuss what they have learned, ask their peers for help, or work together to construct explanations.\n\nIn this work, we utilized 4,074 chat messages collected from 13 groups of students. On average, each group sent 313.4 chat messages (min = 118, max = 617, SD = 155.6). Groups consist of four students and a facilitator, who observes students’ problem solving and dialogue and guides their discussions. The researcher’s role is to keep students on track and to occasionally ask leading questions to nudge them in the right direction. Within each group, students sent an average of 242.3 messages (min = 83, max = 553, SD = 141.9) and the researcher sent an average of 70.1 messages (min = 30, max = 125, SD = 30.1). Individually, students sent an average of 61.8 messages over the course of the study (min = 10, max = 203, SD = 47.7). Messages sent by the researcher were used as context for student messages but were not used as training or testing samples. As a result, the total number of messages available for training and testing was 3,150.\n\nOff-Task Message Annotation\n\nWe formulate off-task dialogue modeling as a supervised binary classification task. Thus, each message in the chat data is annotated as off-task or on-task. The annotation scheme builds on a classic dialogue act modeling framework [23] as well as dialogue act frameworks related to collaborative learning [22]. Like previous work [24], we label messages as on-task if they address relevant curricular content, foster collaboration, address affective states, or pose relevant questions. These messages are either related to the game’s learning goals, self-regulation, or collaborative processes, so we consider them to be on-task. Some examples of chat messages and the labels assigned to them can be seen in Table .\n\nTable 1.\n\nDefinitionExamplesOn-Task (0)Productive text: any message that deals with the game’s scientific content, fosters collaboration, addresses relevant affective states, or poses a relevant question\n\n“Water temp is warm needs to go in the water cold column”\n\n“What do I do I am at the house and have a map”;\n\n“Hi” (if the students are introducing themselves)\n\nOff-Task (1)Text that is not productive\n\n“I notice it seems I am the only one using capital letters around here”;\n\n“Nancy and I switched mice and switched back”\n\nTo label the chat messages, we first organized the messages by gameplay sessions, which were determined by the day that the students played Crystal Island: EcoJourneys and the group to which they were assigned. This was done so that the sequences of chat messages used to create contextual features were all from the same group and occurred on the same day. The dataset contains 4,074 messages from 13 groups of students, which are split into 69 gameplay sessions. On average, each session includes approximately 59 messages (min = 1, max = 280, SD = 55.8). Each session, students sent approximately 45.7 messages on average (min = 1, max = 214, SD = 44.9) and the researcher sent approximately 17.1 messages (min = 0, max = 66, SD = 14.4). The data was labeled by two researchers using a rubric that was developed for this task (Table ). Both researchers labeled 60% of the data, with an overlapping 20% to allow for calculation of inter-rater reliability. The raters achieved a Cohen’s kappa of 0.751, indicating substantial agreement. For the messages that the raters did not agree on, labels were reconciled through discussion, and messages that appeared to contain both on-task and off-task dialogue were considered to be on-task. The final message labels contain 1,960 on-task (0) labels and 1,190 off-task labels (37.7% off-task), representing an imbalance. This is significantly higher than the rate of off-task conversation found in some other work [7], which may be because the learning environment combines collaboration and game-related elements.\n\nFeature Extraction\n\nTo evaluate if the context in which a message occurs affects its classification as off-task or on-task, we generated context-based features as well as features that only used information from the current message. The message-specific features were the number of times the student had previously contributed to the group conversation, a score representing the polarity of the message’s sentiment, the number of characters in the message, the Jaccard similarity of the message with the game’s text content, and the average word embedding for the message [25].\n\nMessage sentiment was calculated using NLTK’s [26] Vader sentiment analyzer. Because the game is dialogue-driven, information is presented through text-based conversations with in-game characters. We extracted this text from the game and removed stop words, as defined by NLTK’s [26] list of English stop words. Then, the complete corpus of game text was compared against each message to calculate Jaccard similarity, which quantifies the similarity between the chat message and the game’s text content [27]. If a message is very similar to the game’s text content, then the student is likely talking about something that is relevant to the game and is therefore on-task. Jaccard similarity, which is the size of the intersection of two sets divided by the size of the union, was preferred over other text similarity metrics like the cosine similarity of tf-idf vectors, because Jaccard similarity only looks at the unique words that are common between two sources of text. This was preferable because many words that are highly related to the game’s educational content appear several times in the game’s text, and tf-idf would discount these words because they are so common. For the message’s average word embedding, we compared word2vec to ELMo and BERT embeddings to evaluate the effects of contextualized embeddings. We used word2vec embeddings with dimensionality 300, ELMo with dimensionality 256, and BERT with dimensionality 768. We used the ELMo embeddings generated from the second LSTM layer (i.e., layer 3 out of 3) to achieve the representation adding contextual information. For the BERT embeddings, we used the average of the token outputs across the 11th layer, which is the last hidden layer. Using these layers for both BERT and ELMo incorporates the richest representation produced by these embedding techniques, allowing for the most contextual information to be used.\n\nFor the context-based features, we defined a message’s context as a sliding window containing the k previous messages in the chat log. Please see Table for an example of chat dialogue. From these messages, we extracted the number of unique users who contributed to the conversation, the average length of messages in the context, the average time between messages, the number of times the learning facilitator sent a message, the cosine similarity between the current message’s average word embedding and the word embedding of the most recent message from the researcher, the cosine similarity between the average word embedding of the current message and the average word embedding for all messages in the context, and the average Jaccard similarity between each previous message and the game’s text content. During annotation, researchers noticed that off-task behavior often does not include every student in the team, so keeping track of the number of unique users during this chat window might be an indicator of off-task behavior. That is, if a small number of students are contributing heavily to the chat, it is likely that the messages they are sending are either consistently on-task or consistently off-task. Similarly, message length and time between messages could indicate off-task behavior, since short messages sent in rapid succession likely were not thoughtfully generated and could be off-task. Features related to the researcher’s contributions to the chat could indicate off-task behavior, since more messages from the researcher could indicate that they needed to try harder to keep students on-task. Also, given that the facilitator’s messages are examples of on-task dialogue, messages that were similar would likely be on-task. Since word embeddings allow words to be represented as real-valued vectors in a high-dimensional space, the cosine similarity between average word embeddings can be used to quantify the similarity of two messages.\n\nTable 2.\n\nNumberGroup memberMessage1Wizard (Facilitator)How are you all doing? It would be great if you could go in and vote once you are done putting your evidence in2Student AWe have voted3Student BI am doing very well. I voted for every one and I am also ready for the next chapter. Game on!4Student CAnd I believe we are done with entering our evidence5WizardI see that you are all very agreeable!6Student BGreat job!7Student C:)8WizardBut we also need to see if we can rule any of our hypotheses out to move on. Let’s try to quickly see if we can go through the board. Scientists often have disagreements as they advance their ideas. They will look for evidence both for and against ideas. Let’s start on the right with the unsorted ideas. Any suggestions where that might go?9Student BWhy thank you kind wizard :)10Student BOk11Student CNot enough space12Student BNot enough space13WizardAnd would that support or not support it? Let’s talk about that14Student AIf we put that in not enough space then it would kind of be going against it15WizardWhat do the rest of you think? How are we then on the ‘not enough space’ hypothesis?16Student BYes17Student CWell I think that it should be even though it goes against it it still fits18Student AIt has no point in being there because it doesn’t affect their health19Student AFor not enough space20Wizard[Student A] and [Student B], what do you think? Why would we keep this hypothesis or remove it?21Student BWe should actually remove it. It doesn’t fit in anything. I thought it over more\n\nModeling\n\nWe first compared the performance of static models that incorporate contextual information to those that do not. The contextual models include features extracted from the previous 5, 10, 15 or 20 messages within the gameplay session. If there were fewer previous messages than the size of the window, we utilized the most messages available for calculating the features. Additionally, we evaluated the effects of different word embedding techniques (i.e., word2vec, ELMo, and BERT) on the performance of these models. We used logistic regression to perform this binary classification. To ensure a fair feature set comparison, we performed principal component analysis (PCA) on the features for each representation to reduce the feature set to the first 50 principal components. We used standardization of the features before applying PCA, transforming both the training and testing data utilizing the training data’s means and standard deviations.\n\nWe also investigated the performance of sequential models on this task. We built models that took in different window lengths (i.e., 5, 10, 15, 20) of previous messages, where each message was represented by the set of message-specific features described earlier. Sequences that were shorter than the length of the window were front-padded with zeros. Again, models were evaluated across each word embedding technique. For the sequential modeling task, we adopted LSTM-based sequential models with a single hidden layer. Hyperparameter tuning was performed across the number of nodes in the hidden layer (50, 100, 200, or 300), the activation function (sigmoid, hyperbolic tangent, or rectified linear unit), and the amount of dropout used (0.2, 0.3, 0.4, and 0.5). The optimal configuration was one hidden layer with 50 nodes, sigmoid activation function, and 30% dropout. These models were trained for up to 100 epochs, stopping early if validation loss did not decrease for 15 epochs. Models were trained using group-level 10-fold cross-validation.\n\nResults\n\nResults for the off-task prediction task can be found in Table . Among the static off-task dialogue models, we found that the most accurate feature configuration used the word2vec embeddings with a context window of size 5 (accuracy = 0.786). We also note that the majority class baseline accuracy for this data is 62.3%, which is the percentage of on-task messages. The improvement over the baseline indicates that the language-based representation of the chat messages does help with determining off-task labels. This same configuration also achieved the highest precision and F1 scores (precision = 0.710, F1 = 0.678). In general, we notice that all three scores tend to be highly related. We also note that, for all embeddings, a context window size of 5 performed the best for these models. Incorporating some amount of contextual information into the model improves performance over relying solely on features derived from the current message, confirming our hypothesis that context can help classify off-task behavior in collaborative game-based learning chat logs.\n\nTable 3.\n\nEmbeddingContext lengthLogistic regressionLSTMAccuracyPrecisionF1AccuracyPrecisionF1Word2vec00.7690.6910.642–––50.7860.7100.6780.7740.7100.636100.7830.7100.6760.7510.6800.609150.7810.7070.6700.7440.6590.604200.7760.7020.6600.7230.6280.591ELMo00.7540.6620.615–––50.7780.6960.6610.7720.6930.660100.7750.7010.6540.7810.7070.667150.7670.6870.6450.7880.7140.676200.7660.6810.6430.7890.7200.678BERT00.7450.6640.635–––50.7630.6840.6530.7870.7590.660100.7680.6960.6590.7870.7310.674150.7670.6920.6570.7780.7440.670200.7630.6870.6510.7910.7140.686\n\nFor the sequential models, the most accurate configuration was the BERT embedding with a window size of 20 (accuracy = 0.791). Both contextual embeddings (i.e., ELMo and BERT) outperformed word2vec across most window sizes. Moreover, these contextual embeddings benefit from longer window sizes, while word2vec still performed best with a window of size 5. While accuracy and F1 score were still correlated, accuracy and precision were less correlated than in the static models, with the most precise configuration being BERT with a window of size 5 (precision = 0.759).\n\nComparing static and sequential models, we find that the sequential models achieve the best overall performance, both in terms of accuracy and precision. This confirms our hypothesis that sequential techniques for modeling off-task behavior in student conversations outperform static techniques. While the static models performed best with short context windows, the sequential models make better use of longer context.\n\nDiscussion\n\nFor the static models, a short window of context yielded the best performance. A window of size 5 performed better than no context at all, and performance tended to decrease with longer windows. This may be because using too much context relies too heavily on information from the past, whereas information that is more recent can indicate components of the conversation’s flow. Longer context windows likely include more information from irrelevant messages, and since the static models summarize previous chat messages by averaging features, relevant and irrelevant information are treated the same. However, the sequential models made better use of more context. The performance of the word2vec embeddings decreased as window size increased, but the contextual embeddings (i.e., ELMo and BERT) performed best with windows of size 20. We speculate that this may be due to the fact that ELMo and BERT create embeddings that, in addition to the syntactic and semantic information transferred from pre-training on large corpora, also encode some information that is related to the specific context in which words were used. Thus, while longer sequences accrue more noise from the solely pre-trained embeddings, the sequential models may be able to focus on context-specific information captured by the contextualized embeddings.\n\nWe found that the simpler logistic regression models performed nearly as well as the LSTM models. While we might expect the gap between the static and sequential models to widen given more training data, since the LSTM may be able to pick up on more complex relationships than logistic regression, the static models performed well in this study. This may be due to the set of features that were used to represent the chat’s context. In particular, we expect that the cosine similarity with the facilitator’s most recent message and the average Jaccard similarity between each previous message and the game’s text content could be very helpful in identifying messages as off-task. Since the facilitator’s messages are examples of on-task dialogue, messages that are similar will likely be on-task as well. For instance, if a student is responding to the facilitator’s question or talking about a similar topic, their messages would likely be similar. In much the same way, if the average Jaccard similarity between the messages in the context window and the game’s text content is high, this is an indicator that students are likely talking about things that are related to the game and are thus on-task."
    }
}