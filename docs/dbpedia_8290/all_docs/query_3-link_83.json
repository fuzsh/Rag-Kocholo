{
    "id": "dbpedia_8290_3",
    "rank": 83,
    "data": {
        "url": "http://reg.163.com/faq.html",
        "read_more_link": "",
        "language": "en",
        "title": "Professional FTP Daemon FAQ",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mark Lowes"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "http://www.proftpd.org/ is the primary source for all information about the project including documentation and security alerts. There are a number of geographic mirror sites, see the mirror pages on www.proftpd.org for more details or try www.<isocode>.proftpd.org (ie www.uk.proftpd.org).\n\nHelping with documentation\n\nWriting documentation is time consuming and requires some work but it's not actually difficult. Look through the directive list shipped with the source and package builds of ProFTPD and see what needs work. Check the source code to ensure that the context is correct by grepping through the source code looking for something like\n\nCHECK_CONF(cmd,CONF_ROOT|CONF_VIRTUAL|CONF_ANON|CONF_GLOBAL)\n\nto figure out where the directive is valid (server config, <VirtualHost>, <Anonymous>, <Global> for the above example). Once you think you understand what it does, test, play, break (if possible).\n\nThen either submit a plain text update via the bug reporting system or a patch against the docbook/sgml source (available from CVS on sourceforge (Project: pdd)\n\nThere are a number of mailing lists for ProFTPD\n\nAnnounce\n\nproftpd-announce@proftpd.org\n\nThis is a very low traffic list where only ProFTPD announcements/changes will be announced. Subscribe by sending a message to <proftpd-announce-request@proftpd.org> with \"subscribe\" in the subject.\n\nWeb interface: https://lists.sourceforge.net/lists/listinfo/proftp-announce\n\nUsers\n\nproftp-user@proftpd.org\n\nThis is intended to the the user support channel for the software, in most likelihood this is going to be a high traffic list and slightly chatty. Please read the FAQ, the documentation and the list archives before posting a question.\n\nSubscribe by sending a message to <proftpd-user-request@proftpd.org> with \"subscribe\" in the subject.\n\nWeb interface: https://lists.sourceforge.net/lists/listinfo/proftp-user\n\nDevelopment\n\nproftpd-devel@proftpd.org\n\nThis list is intended for discussion of development-related issues of ProFTPD, and feature design. It is NOT intended to be a \"user help\" group.\n\nSubscribe by sending a message to <proftpd-devel-request@proftpd.org> with \"subscribe\" in the subject.\n\nWeb interface: https://lists.sourceforge.net/lists/listinfo/proftp-devel\n\nArchives\n\nThe mailing list archives can be found at:\n\nhttp://www.proftpd.org/proftpd-announce-archive/\n\nhttp://www.proftpd.org/proftpd-l-archive/\n\nhttp://www.proftpd.org/proftpd-devel-archive/\n\nUnsubscribing\n\nBefore posting to any of the lists or mailing the list admins please try and remove yourself first. Either by emailing <listname>-request@lists.sourceforge.net with the subject \"unsubscribe\" or visiting the web interface and unsubscribing from there.\n\nI've (lost / never had) a password to the interface. Easy, enter the address you are subscribed to the list as into the form and hit the \"email me my password\" button.\n\nCVS (Concurrent Versions System), is a version control system which allows multiple developers (scattered across the same room or across the world) to maintain a single codebase and keep a record of all changes to the work.\n\nThe CVS repository for ProFTPD is available for non-developers in read-only mode, however this code is right on the bleeding edge and is not guaranteed to even compile let alone work. Access to CVS is given to allow important security patches out into the wild and to allow users and interested users to test out the latest changes on real systems.\n\nNightly tarballs of the current CVS are available on ftp.proftpd.org, these are built at approx 1am UK time.\n\nRecommended ~/.cvsrc settings\n\ncvs -z 3 update -Pd diff -u\n\nWhere can I get information on cvs?\n\nCVS is produced by Cyclic Software (http://www.cyclic.com/) and details on CVS can be found on their website. The CVS documentation is clear, detailed and above all heavy when printed. I'd recommend reading it if you're planning on using CVS a lot.\n\nsendfile() is a system call which streamlines the copying of data between the disk and the tcp socket. The call copied from the page cache directly rather than requiring a kernel -> user space -> kernel space copy for every read() and write() call. Generally the advantages are only felt on heavily loaded servers. The call is supported in ProFTPD for Linux and FreeBSD.\n\nLinux 2.0.x\n\nsendfile is not supported under 2.0.x, this is not an issue when compiling for 2.0.x on a 2.0.x system. However when compiling on a 2.2.x system for use on 2.0.x use the --disable-sendfile flag.\n\nRuntime detection of sendfile()\n\nJohnie Ingram (aka netgod)'s: http://www.proftpd.org/proftpd-devel-archive/99-10/msg00073.html\n\nJohn Pierce <hawkfan@pyrotechnics.com> http://www.proftpd.org/proftpd-devel-archive/99-10/msg00112.html\n\nProblems with sendfile\n\nThere appear to be a number of problems with sendfile() particularly with the directives and features which require accurate determination of filesize. Such as the Rate* functions and downloading large files, the best advice at the moment appears to be to disable sendfile by default ( --disable-sendfile ).\n\nSendfile() also appears to be the source of a number of file corruption problems.\n\n0.0.0.0 is INADDR_ANY, which means to bind to any interface. The \"address in use\" will normally mean that something has already bound to that address.\n\nUnder linux it is possible to run:\n\nfuser -n tcp 21\n\nto get the PID of the process currently bound to port ProFTPD is configured to run as.\n\nThe most common cause is that ProFTPD is configured standalone and inetd is still configured for port 21. Comment out the line starting \"ftp\" in /etc/inetd.conf and restart (killall -HUP inetd or something similar should do the trick) and try again.\n\nThe FTP Specification defines that two sockets should be used for all communications. The first runs over port 21 and is the control channel over which all commands and response codes are sent. Whenever data is required to be transfered, for example for a file download, a directory listing etc etc. A second channel is created on demand, this socket can take one of two forms.\n\nnon-Passive\n\nThe server end of the data socket uses port 20. This is nice and easy to work into a firewall configuration.\n\nPassive\n\nThe port at either end is dynamically allocated. This is virtually impossible to cater for in a firewall configuration given that the port mapping will be different for every data connection.\n\nThe solution is to force the users to configure their clients to use the non-passive mode (ie port 20)\n\nNo, or at least not in the HTTP/1.1 manner of virtual hosting. This is an inbuilt limitation of the current FTP RFC., unlike the HTTP/1.1 spec there is no mechanism comparable to the \"Host: foo.bar.com\" HTTP header for specifying which host the connection is for. Therefore the only method for determining which VirtualHost the connection is destined for is by the destination IP.\n\nThe one exception to this is if you host multiple servers on the same IP but using different ports, however this requires that the connecting client uses a non-standard port and therefore is probably not a good solution for mass hosting.\n\nIs there anything in the pipeline to fix this?\n\nThere is a draft standard http://search.ietf.org/internet-drafts/draft-ietf-ftpext-mlst-12.txt with the IETF which extends and improves on the FTP specification including support for a HOST command. However given that the IP crunch is coming from websites and not virtual ftp servers this is unlikely to be pushed through any time soon.\n\nYes the mod_ratio module provides for doing just this.\n\nThe ratio directives take four numbers: file ratio, initial file credit, byte ratio, and initial byte credit. Setting either ratio to 0 disables that check.\n\nThe directives are HostRatio (matches FQDN, wildcards allowed), AnonRatio (matches password entered at login), UserRatio (accepts \"*\" for \"any user\"), and GroupRatio.\n\nRatios on # enable module UserRatio ftp 0 0 0 0 HostRatio master.debian.org 0 0 0 0 # leech access (default) GroupRatio proftpd 100 10 5 100000 # 100:1 files, 10 file cred 5:1 bytes, 100k byte cred AnonRatio billg@microsoft.com 1 0 1 0 # 1:1 ratio, no credits UserRatio * 5 5 5 50000 # special default case\n\nThis example is for someone who (1) has downloaded 1 file of 82k, (2) has uploaded nothing, (3) has a ratio of 5:1 files and 5:1 bytes, (4) has 4 files and 17k credit remaining, and (5) is now changing directory to /art/nudes/young/carla. The initial credit, not shown, was 5 files and 100k (UserRatio * 5 5 5 100000).\n\nVersion 2.0 and above of this module integrate with mod_sql.\n\nLimitations of mod_ratio\n\nIt appears that the ratio limits in mod_ratio are only maintained on a per session basis and there is no ongoing tracking of usage.\n\nThe setting of the group privileges for a process uses the setgroups(2) system call. This call will fail with the above error message for one of two reasons: there is a negative GID value for one of the groups, or the maximum number of groups for a single user has been exceeded.\n\nIdeally, all IDs, both UID and GID, will be positive. Unfortunately, it is common on many systems to use -1 or -2, especially for such users as 'nobody', or group 'nogroup'. Use of these values uses C's treatment of data types to make the actual numeric value very high; some functions, like setgroups(), do not like this, though. In general, always use positive ID numbers.\n\nThe other limitation is the number of supplemental groups for a user (eg non-primary groups, the ones configured in /etc/group). The maximum number of supplemental groups to which a user may belong is defined by the operating system constant NGROUPS_MAX. On some operating systems, such as Solaris, this limitation may be tunable.\n\nSome other applications may not encounter this error if they use the initgroups(3) function, which reads the /etc/group file for a user's supplemental group memberships, and sets those groups. This function, however, silently ignores any supplemental groups for user greater than NGROUPS_MAX, unlike setgroups(2), which complains.\n\nIf this is the cause of your error message, any solution will most likely involve reducing the number of groups your users are members of, or tuning the NGROUPS_MAX value, if your operating system allows it.\n\nPAM(exit): Permission denied open_module: stat(/usr/lib/security/pam_unix.so.1) failed: No such file or directory load_modules: can not open module /usr/lib/security/pam_unix.so.1 PAM(exit): Dlopen failure.\n\nThese messages appear when the DefaultRoot configuration directive is in effect. This directive causes a user to be confined using the chroot(2) system call. This call, however, affects other system utilities, such as PAM. In this case, PAM's configuration is causing the PAM library to attempt to open PAM modules using a path that is no longer valid, thus the errors. This happens on logout because the chroot has already happened by that point; on login, the PAM modules are successfully found and loaded before the chroot, so no errors. These are merely cosmetic reporting errors, and do not really affect the functionality or security of the server.\n\nYou should look in the sample-configurations/ directory from your distribution tarball. Basically, you'll need to create another user on your system for the guest/anonymous ftp login. For security reasons, it's very important that you make sure the user account either has a password or has an \"unmatchable\" password. The root directory of the guest/anonymous account doesn't have to be the user's directory, but it makes sense to do so. After you have created the account, put something like the following in your /etc/proftpd.conf file (assuming the new user/group name is private/private):\n\n<Anonymous ~private> AnonRequirePassword off User private Group private RequireValidShell off <Directory *> <Limit WRITE> DenyAll </Limit> </Directory> </Anonymous>\n\nThis will allow ftp clients to login to your site with the username \"private\" and their e-mail address as a password. You can change the AnonRequirePassword directive to \"on\" if you want clients to be forced to transmit the correct password for the \"private\" account. This sample configuration allows clients to change into, list and read all directories, but denies write access of any kind.\n\nThe following snippet from a sample configuration file illustrates how to protect an \"upload\" directory in such a fashion (which is a very good idea if you don't want people using your site for \"warez\"):\n\n<Anonymous /home/ftp> # All files uploaded are set to username.usergroup ownership User username Group usergroup UserAlias ftp username AuthAliasOnly on RequireValidShell off <Directory pub/incoming/> <Limit STOR CWD> AllowAll </Limit> <Limit READ RMD DELE MKD> DenyAll </Limit> </Directory> </Anonymous>\n\nThis denies all write operations to the anonymous root directory and sub-directories, except \"incoming/\" where the permissions are reversed and the client can store but not read. If you used <Limit WRITE> instead of <Limit STOR> on <Directory incoming>, ftp clients would be allowed to perform all write operations to the sub-dir, including deleting, renaming and creating directories.\n\nYou'll need to configure your host to be able to handle multiple IP addresses. This is often called \"aliasing\", and can generally be configured through an IP alias or dummy interface. You need to read your operating system documentation to figure out how to do this. Once your have the host configured to accept the additional IP address that you wish to offer a virtual FTP server on, use the <VirtualHost> configuration directive to create the virtual server:\n\n<VirtualHost 10.0.0.1> ServerName \"My virtual FTP server\" </VirtualHost>\n\nYou can add additional directive blocks into the <VirtualHost> block in order to create anonymous/guest logins and the like which are only available on the virtual host.\n\nThe <LOGIN> directive is used to control connection or login access to a particular context (the directive block which contains it). When a client initially connects to ProFTPD, the daemon searches the configuration tree for <Limit LOGIN> directives, and attached parameters (such as Allow, Deny, etc). If it determines that there is no possible way for the client to ever be allowed to login, such as a \"Deny from\" matching the client's source address, without an overriding \"Allow from\" at a lower level, the client is disconnected without being offered the opportunity to transmit a user and password.\n\nHowever, if it is possible for the client to be allowed a login, ProFTPD continues as per normal, allowing the client to login only if the proper <Limit LOGIN> applies. Normally, <Limit> directive blocks are allowed in the server config, <VirtualHost>, <Anonymous> and <Directory> contexts. However, <Limit LOGIN> should not be used in a <Directory> context, as clients do not connect/login to a directory (and thus it is meaningless).\n\nBy way of example, the following configuration snippet illustrates a <Limit LOGIN> deny which will cause any incoming connections from the 10.1.1.x subnet to be immediately disconnected, without a welcome message:\n\n... <Limit LOGIN> Order deny,allow Deny from 10.1.1. Allow from all </Limit> ...\n\nNext, an example of a configuration using <Limit LOGIN> that will not immediately disconnect an incoming client, but will return \"Login invalid\" for all login attempts except anonymous.\n\n... <Limit LOGIN> DenyAll </Limit> <Anonymous ~ftp> ... <Limit LOGIN> AllowAll </Limit> ...\n\nFor general open access you can use an <Anonymous> directive context block, possibly in combination with a UserPassword/AnonRequirePassword directive.\n\nHowever if you wish to jail an entire group (or groups) of users, you can use the DefaultRoot directive. DefaultRoot lets you specify a root jailed directory (or \"~\" for the user's home directory), and an optional group-expression argument which can be used to control which groups of users the jail will be applied to. For example:\n\n... <VirtualHost myhost.mynet.foo> DefaultRoot ~ ... </VirtualHost>\n\nThis creates a configuration where all users who log into myhost.mynet.foo are jailed into their home directories (cannot chdir into a higher level directory). Alternatively, you could:\n\n... <VirtualHost myhost.mynet.foo> DefaultRoot /u2/public users,!staff ... </VirtualHost>\n\nIn this example, all users who are members of group \"users\", but not members of group \"staff\" are jailed into /u2/public. If a user does not meet the group-expression requirements, they login as per normal (not jailed, default directory is their home). You can use multiple DefaultRoot directives to create multiple jails inside the same directive context. If two DefaultRoot directives apply to the same user, ProFTPD arbitrarily chooses one (based on how the configuration file was parsed).\n\nSecurity Implications\n\nThe DefaultRoot directive is implemented using the chroot(2) system call. This moves the \"/\" (or root) directory to a specified point within the file system and jails the user into this sub-tree. However this is not the holy grail of security, a chroot jail can be broken, it is not a trivial matter but it's nowhere near impossible. DefaultRoot should be used as part of a general system of security not the only security measure.\n\nA more detailed http://www.bpfh.net/simes/computing/chroot-break.html on this subject and on the breaking of chroot jails has been written by Simon Burr\n\nNon-root server issues\n\nThe chroot() system call will not work under a non-root ftp server process, the call requires root privaliges. Without them it simply doesn't work, there doesn't appear to be any checking in the code of the uid/gid before calling chroot so using DefaultRoot in such a setup will cause the server to fail.\n\nSymlinks\n\nSymlinks will not work from within a chrooted area. The reason should be clear from a casual inspection of the nature of the chroot command. It is not possible to have a symbolic link to a directory which can\"t be reached beacuse it's outside of the current chroot. Work arounds to allow access to other parts of the file system include exporting the part of the filesystem to be accessed from inside the chroot and mounting via NFS, using hard file links or (on Solaris) using lofs to mount the directory via the loopback.\n\nmount -Flofs /home/data1 /ftp/data1 mount -Flofs /home/data2 /ftp/data2\n\nAs of the 2.4.x Linux kernel tree it is possible to mount filesystems multiple times and to mount subdirectories of filesystems elsewhere on the filesystem.\n\nThere are two methods of accomplishing this (possibly more). First, you can create a directory structure inside your anonymous FTP root directory, creating a single directory for each user and setting ownership/permissions as appropriate. Then, either create a symlink from each user's home directory into the FTP site, or instruct your users on how to access their directory.\n\nThe alternate method (and more versatile) of accomplishing per-user anonymous FTP is to use AnonymousGroup in combination with the DefaultRoot directory. You'll probably want to do this inside a <VirtualHost>, otherwise none of your users will be able to access your system without being stuck inside their per-user FTP site. Additionally, you'll want to use a deferred <Directory> block to carefully limit outside access to each user's site.\n\nCreate a new unix group on your system named `anonftp\". Please each user who will have per-user anonymous FTP in this group.\n\nCreate an `anon-ftp\" and `anon-ftp/incoming\" directory in each user's home directory.\n\nModify your /etc/proftpd.conf file to look something like this (you'll probably want to customize this to your needs):\n\n<VirtualHost my.per-user.virtual.host.address> # the next line limits all logins to this virtual host, so that only anonftp users can connect <Limit LOGIN> DenyGroup !anonftp </Limit> # limit access to each user's anon-ftp directory, we want read-only except on incoming <Directory ~/anon-ftp> <Limit WRITE> DenyAll </Limit> </Directory> # permit stor access to each user's anon-ftp/incoming directory, but deny everything else <Directory ~/anon-ftp/incoming> <Limit STOR> AllowAll </Limit> <Limit READ WRITE> DenyAll </Limit> </Directory> # provide a default root for all logins to this virtual host. DefaultRoot ~/anon-ftp # Finally, force all logins to be anonymous for the anonftp group AnonymousGroup anonftp </VirtualHost>\n\nYou can use the AuthAliasOnly directive to control how and where real usernames get authenticated (as opposed to aliased names, via the UserAlias directive). Note that it is still impossible to have two identical aliased names login to different anonymous sites; for that you would need <VirtualHost>.\n\nExample:\n\n... <Anonymous ~jrluser> User jrluser Group jrluser UserAlias ftp jrluser UserAlias anonymous jrluser AuthAliasOnly on ... </Anonymous>\n\nHere, the <Anonymous> configuration for ~jrluser is set to allow alias authentication only. Thus, if a client attempts to authenticate as \"jrluser\", the anonymous config will be ignored and the client will be authenticated as if they were a normal user (typically resulting in `jrluser\" logging in normally). However, if the client uses the aliased username `ftp\" or `anonymous\", the anonymous block is applied.\n\nAs with all software there have been a number of security issues during the life of the project. The most recent information can always be found on http://www.proftpd.org/security.html\n\nVersions 1.2.0 and above should be considered to be production code and few if any new features will be added to this code branch to maintain stability.\n\nWhat about using Stackguard?\n\nStackguard (http://immunix.org) is a gcc variant which can protect programs from stack-smashing attacks, programs compiled using Stackguard dies without executing the stack code. While this approach is a good first line of defense against future problems it\"s not a complete cure-all. Some of the buffer overflows were found on static variables, which are not protected by stack protection mechanisms.\n\nRunning ProFTPD as a non-root user gives only a marginal security improvement on the normal case and adds some functional problems. Such as not being able to bind to ports 20 or 21, unless it's spawned from inetd.\n\nProFTPD takes a middle road in terms of security. It only uses root privileges where required and drops to the UID defined in the config file at all other times. Times when root is required include, binding to ports < 1024, setting resource limits, reading configuration information and some network code.\n\nFor Linux 2.2.x kernel systems there is the POSIX style mod_linuxprivs module which allows very fine grain control over privileges. This is highly recommended for security-conscious admins.\n\nProPTPD follows the UNIX file permission rules when determining the level of access and/or control a user is granted when working with a file. UNIX systems divide the world into three classes when determining the permissions that a user is granted for a particular file:\n\nUser - the owner of the file\n\nGroup - a collection of users defined in /etc/group\n\nOthers - neither the owner, nor a member of the group\n\nEvery file in a Unix filesystem has a permission definition associated with it. At a minimum, the permission established for a file will determine whether a particular user may READ, WRITE, or EXECUTE the file in question. A directory listing will show the permissions associated with a file in the format shown below:\n\nrwx r-x r-x | | | | | |_____________ Others: READ/NO WRITE/EXECUTE | |__________________ Group: READ/NO WRITE/EXECUTE |_______________________ User: READ/WRITE/EXECUTE\n\nIn the sample directory listing shown below, READ/WRITE/EXECUTE privileges are granted to the owner of the directory, and READ/EXECUTE privileges are granted to members of the users group and everyone else. Note the letter \"d\" at the beginning of each entry, denoting that the entry is actually a directory.\n\nprince> ls -l /home/ftp total 8 drwxr-xr-x 2 andrea users 4096 May 3 00:40 andrea drwxr-xr-x 2 eve users 4096 May 3 00:40 eve prince> ls -l /home/ftp/andrea total 156 -rw-r--r-- 1 andrea users 85991 May 3 01:12 bland.txt -rwxr-xr-x 1 root root 65107 May 3 01:12 secret.txt\n\nThe answer to this question is shown in the above example. When describing the permissions associated with a directory, WRITE means that permission is granted to modify the contents of a directory by adding or deleting files. Thus, the user andrea may delete the file secret.txt, even though she cannot modify the file itself.\n\nRefer to the documentation for the IgnoreHidden and HideNoAccess directives for a method to mitigate this hazard.\n\nCurrently AuthPAMAuthoritative defaults on \"ON\" resulting in login failures if PAM cannot authenticate the user. This breaks the AuthUserFile directive as it never gets a chance to authenticate the user unless the AuthPAMAuthoritative directive is set to \"OFF\"\n\nThe reasoning behind the current default is to ensure that the system is secure by default requiring that the admin explicitly and knowingly has to disable it. There are discussions underway which may result in the directive flipping to a default of \"Off\" if AuthUserFile is specified.\n\nNote: as of the current CVS and the forthcoming pre9 release the default has changed to \"Off\"\n\nThis is possible using either PAM or the Opie modules. The module passes back a challenge which the user puts into a key generator along with their \"pass phrase\" and it gives them back 5 words which get sent as the password. As long as you do it correctly it will never repeat.\n\nIt requires http://inner.net/opie/ to be installed on the server. There are key gen clients for win95/98, *nix, mac.\n\nftp://ftp.urbanrage.com/pub/c/mod_opie.c"
    }
}