{
    "id": "dbpedia_8290_0",
    "rank": 53,
    "data": {
        "url": "http://www.cs.toronto.edu/~arnold/347/17f/assignments/01/",
        "read_more_link": "",
        "language": "en",
        "title": "Computing Science 347",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www.cs.toronto.edu/~arnold/pics/UofTMLogoCol.jpg",
            "http://www.cs.toronto.edu/~arnold/pics/gradr.line.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "[25 Marks] Your assignment VM has code installed in /vulnerable. Your can find this question in account.c. Your task for this question is to identify vulnerabilities (mark them in the code), demonstrate exploits and explain the exploits impact. See for example, cert.org vulnerability notes. You do not have to exploit buffer overrun vulnerabilities for this part of the assignment, just identify vulnerable code and explain the potential impact. Write a report (see REPORT.txt) listing each vulnerability, a collection of exploits for the vulnerability (code, inputs, scripts etc. we can run to see the exploit in action), the impact of the vulnerability, and identify a category (CIA) for the impact (see the list below). Include inputs, scripts, code etc. demonstrating each exploit.\n\nTo think about this question, think about the following: Secure properties (CIA)\n\nConfidentiality\n\nIntegrity\n\nAvailability\n\nVulnerabilities to look for include, buffer overruns, integer overflows, canonical naming, directory traversals,... Once you find a vulnerability, demonstrate associated exploits (code/inputs). Then describe the impact of the exploit. Impacts include things like denial of service, authentication issues, accountability issues, priviledge escalation (see principle of least priviledge), ... Finally identify the impact as a violation of Confidentiality, Integrity or Availability. Hint: Thinking in terms of the above list is a good way to start thinking about potential exploits.\n\nFinally fix the code, explaining how you fixed the vulnerabilities and prevented the exploit and restored CIA.\n\n[10 Marks] xinetd is the internet super server, it can turn any unix program that reads stdin and writes stdout into a 'web service'. Take a look at /etc/xinetd.d in the assignment VM to see a collection of programs that are running under xinetd on your RH7.2 VM. One of these is palindrome.c, please take a look at /etc/xinetd.d/palindrome to see how this service is run (which port etc). For convenience, I am having it run out of /root/a1 where you can find the source code as well. Simply recompiling /root/a1/palindrome.c will cause the online service to update. If you want to restart xinetd you should execute /etc/rc.d/init.d/xinetd restart.\n\nYou will investigate this service, show how a user from outside the RH7.2 VM (ie on the host machine) can gain unauthorized access to the VM. You might want to take a look at tcpclient.pl. Use ifconfig to determine the ip address of the VM.\n\nSubmit a modified tcpclient.pl (called tcpclientA.pl) which prints out the secret.\n\nSubmit a modified tcpclient.pl (called tcpclientB.pl) which obtains a root shell on the remote server running palindrome. The console user running tcpclientB.pl should be able to interactively enter commands and see the result. Note: Entering commands may not be as smooth as running a real console, this is ok. At the very least, a user should be able to execute ls a couple of times.\n\nAssume that the attacker does not have access to the source code for palindrome, and only remote access to a running instance. Are there still any exploits available? If so prove your exploit works (ie supply code/a script). If not explain why.\n\nFix the palindrome service so that it can handle larger inputs and is no longer vulnerable. Submit the modified code as well as a discussion of any other changes you feel are necessary to make the palindrome service more secure."
    }
}