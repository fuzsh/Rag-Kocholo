{
    "id": "dbpedia_8290_1",
    "rank": 50,
    "data": {
        "url": "https://docs.checkmk.com/latest/en/agent_linux.html",
        "read_more_link": "",
        "language": "en",
        "title": "The new agent for Linux in detail",
        "top_image": "https://docs.checkmk.com/assets/images/share_image.png",
        "meta_img": "https://docs.checkmk.com/assets/images/share_image.png",
        "images": [
            "https://docs.checkmk.com/assets/images/docs_logo.png",
            "https://docs.checkmk.com/assets/images/logo_icon.svg",
            "https://docs.checkmk.com/assets/images/search.svg",
            "https://docs.checkmk.com/latest/images/linux.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CRE.png",
            "https://docs.checkmk.com/latest/images/agent_linux_agent_files.png",
            "https://docs.checkmk.com/latest/images/CEE.svg",
            "https://docs.checkmk.com/latest/images/CEE.svg",
            "https://docs.checkmk.com/latest/images/agent_linux_service_legacy_pull_mode.png",
            "https://docs.checkmk.com/latest/images/icons/icon_random.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/icons/CSE.png",
            "https://docs.checkmk.com/latest/images/CEE.svg",
            "https://docs.checkmk.com/latest/images/agent_linux_disabled_sections.png",
            "https://docs.checkmk.com/latest/images/icons/CRE.png",
            "https://docs.checkmk.com/latest/images/agent_linux_files_agent_plugins.png",
            "https://docs.checkmk.com/latest/images/CEE.svg",
            "https://docs.checkmk.com/latest/images/agent_linux_rules_agent_plugins.png",
            "https://docs.checkmk.com/latest/images/agent_linux_mrpe_checks.png",
            "https://docs.checkmk.com/latest/images/CEE.svg",
            "https://docs.checkmk.com/latest/images/agent_linux_mrpe_rule.png",
            "https://docs.checkmk.com/latest/images/agent_linux_smart_stats.png",
            "https://docs.checkmk.com/latest/images/agent_linux_snmp_management_board.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The Linux agent of Checkmk version 2.1.0 adds the Agent Controller and new features to the agent script. You can learn how to use the agent here.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.png",
        "meta_site_name": "Checkmk Docs",
        "canonical_link": null,
        "text": "You can monitor Linux systems particularly well with Checkmk. This is not so much because the Checkmk development team feels 'at home' on Linux, but is rather due to Linux being a very open system which provides numerous well documented and easy to query interfaces to support a detailed monitoring system.\n\nSince most of the interfaces are not actually accessible via the network, the installation of a monitoring agent is required. That is why Checkmk has its own agent for monitoring Linux. This agent is a simple shell script that is minimalistic, transparent and secure.\n\nIn Checkmk version 2.1.0, with the Agent Controller a new component has been added to this agent script. The Agent Controller handles networking connections and runs the agent script when called. To do this, it registers with the Agent Receiver, a process that runs on the Checkmk server.\n\nSo, on the one hand, the Linux agent keeps the agent script, and thus also its advantages. On the other hand, it provides more flexibility than the previous method of running the agent script by an internet super-server, such as TLS encryption of communication or data compression.\n\nThe registered, encrypted and compressed pull mode with the Agent Controller is available from version 2.1.0 for all Checkmk editionsâââprovided both Checkmk server and agent version have at least 2.1.0. On Checkmk Cloud (introduced with 2.2.0) additionally the push mode is available. The reversal of the communication direction facilitates the monitoring of hosts that are located behind firewalls. This function is usually combined with the automatic registration of Checkmk agents.\n\nThe Agent Controller is started as a background process (daemon) by the systemd init system, so the agent will require a Linux distribution that includes systemd. This requirement will probably be met on your host, as since 2015 most Linux distributions have adopted systemd as their init system.\n\nHowever, the agent also masters a so-called legacy mode to support Linux systems with a different computer architecture than x86_64, without RPM or DEB package management and without the systemd init system. In this legacy mode, the agent works only as an agent script, i.e. without an Agent Controller and thus without registration on the Checkmk server.\n\nThe article you are reading here covers the installation, configuration and extending of the Linux agent with the Agent Controller. It also shows you how to find out whether the agent needs to be set up in the legacy mode on your Linux system without an Agent Controller. In the Monitoring Linux in legacy mode article you will will find all of the information on this subject.\n\nThe Checkmk agent consists of the agent script and the Agent Controller, which communicates with the Agent Receiver on the Checkmk server. See the general article on monitoring agents for details on the common architecture of Linux agent and Windows agent. This chapter is about the Linux specific implementation.\n\nThe agent script check_mk_agent is responsible for the collection of the monitoring data and calls existing system commands for the data collection in sequence. In order to obtain such information the agent also requires root privileges, so the check_mk_agent must be executed as the user root.\n\nThe agent script is minimalistic, secure, easily extensible, and transparent because it is a shell script where you can see what commands it calls.\n\nThe Agent Controller cmk-agent-ctl is the component within the agent that is responsible for transporting the data collected by the agent script. The controller is executed using the cmk-agent user, which has limited privileges, e.g. no login shell, and is used only for data transfer. The cmk-agent user is created during the installation of the agent package. The Agent Controller is started as a daemon of systemd and is coupled to it as a service. In pull mode, it listens on TCP port 6556 for incoming connections from the Checkmk site and queries the agent script via a Unix socket (of a systemd unit).\n\n4.1. Overview and prerequisites\n\nImmediately following the agent installation (also as an update of an agent of version 2.0.0 and older), only unencrypted communication is possible in the legacy pull mode. An exclusively encrypted data transmission can only be activated once a trust relationship has been established.\n\nAn exception to this are the packages preconfigured for the auto-registration and downloaded via the Agent Bakery (feature only available in Checkmk Cloud and Checkmk MSP). These packages perform the registration automatically after installation.\n\nIn all other cases, you perform the manual registration promptly after installing the agent. This chapter shows how to perform the registration.\n\nThe registration and thus the establishment of the mutual trust relationship is performed as a Checkmk user with access to the REST-API. For this, a good choice is the automation user agent_registration which only has the permission to register agents and is automatically created with every Checkmk installation. You can randomize the corresponding automation password (automation secret) with the icon.\n\nRequirements for the host\n\nRegistering with the Agent Controller requires a Linux system with an init system systemd version 219 or later and an x86_64 computer architecture. See the Testing Agent Controller and system environment section to learn how to verify these prerequisites.\n\nRequirements for the server\n\nTo register a host for monitoring, this host must be able to reach the REST API of the Checkmk server (port 443 or 80) and the Agent Receiver (port 8000 for the first site, 8001 for the secondâ¦â). Read the section Network environment for registration, in case your infrastructure cannot fulfill one of these requirements.\n\n4.2. Adding a host to the Setup\n\nFirst create the new host via Setup > Hosts > Add host. A host must exist in the configuration environment before it can be registered.\n\nIn Checkmk Cloud you will find the Checkmk agent connection mode option in the properties of the host in the section on monitoring agents. Here you can activate the push mode for the Checkmk agent as an alternative to the pull mode, which is available in all editions.\n\n4.3. Testing the Agent Controller and system environment\n\nThe agent with the Agent Controller requires a Linux distribution with systemd, more precisely systemd in a version 219 or newer.\n\nThere is a good chance that this requirement is met on your host, since from 2015 most Linux distributions have adopted systemd as their init system, replacing other init systems such as SysVinit, e.g. SUSE Linux Enterprise Server from version 12, openSUSE from version 12.1, Red Hat Enterprise Linux from version 7, Fedora from version 15, Debian from version 8 and Ubuntu from version 15.04. Unfortunately, comparing the version number alone does not bring certainty, since systemd may be missing even on a current Linux system if it has 'only' been updated over the years.\n\nIn addition to the version of systemd, some further prerequisites must be fulfilled, which will be explained in this chapter.\n\nAttention: The push mode and auto-registration in Checkmk Cloud are necessarily dependent on the Agent Controller and are therefore not usable in the legacy mode, a matter to which we refer several times in this chapter.\n\nTherefore, first check on the host on which the agent is to be installed whether systemd is running and in which version:\n\nroot@linux# systemctl --version systemd 245 (245.4-4ubuntu3.15)\n\nThe above command output shows that systemd is installed in the correct version. If systemd is not running, or is running in a version that is too old, the Agent Controller cannot be used. Complete the setup as described in the article Monitoring Linux in legacy mode.\n\nNow check whether the Agent Controller can be started:\n\nroot@linux# cmk-agent-ctl --version\n\nThe version number should be shown in the output, for example:\n\ncmk-agent-ctl 2.2.0b1\n\nIn rare cases, the following error message may appear:\n\nbash: /usr/bin/cmk-agent-ctl: cannot execute binary file: Exec format error\n\nThe reason for this is that your Linux uses a different computer architecture than x86_64, for example the older 32-bit x86 or ARM. In this case, the Agent Controller cannot be used. Complete the setup as described in the article Monitoring Linux in legacy mode.\n\nThe next step is to find out which program is waiting for requests on port 6556:\n\nroot@linux# ss -tulpn| grep6556 tcp LISTEN 0 1024 0.0.0.0:6556 0.0.0.0:* users:((\"cmk-agent-ctl\",pid=1861810,fd=9))\n\nHere it is cmk-agent-ctl. Thus the requirements for an encrypted communication have been fulfilled. If however systemd, xinetd or inetd are within the parentheses the prerequisites for using the Agent Controller are not met. In such a case, also complete the setup as described in the article Monitor Linux in legacy mode.\n\n4.4. Registering a host with the server\n\nThe registration is done using the Agent Controller cmk-agent-ctl, which provides a command interface for configuring the connections. You can display command help with cmk-agent-ctl help, also for specific available subcommands, with cmk-agent-ctl help register for example.\n\nWhether the host is configured for the pull mode (all editions) or the push mode (only Checkmk Cloud) makes no difference for the command examples. The Agent Receiver tells the Agent Controller in which mode it should operate during registration.\n\nNow go to the host that is to be registered. Here, with root privileges, make a request to the Checkmk site:\n\nroot@linux# cmk-agent-ctl register --hostname mynewhost\\ --server cmkserver --site mysite\\ --user agent_registration --password'PTEGDYXBFXVGNDPRL'\n\nThe host name following the --hostname option must be exactly the same as it was when it was created in the Setup. The --server and --site options specify the name of the Checkmk server and the site. The server name may also be the IP address, the site name (here mysite) corresponds to the one you see in the URL path for the web interface. The options are completed by the name and password used by the automation user. If you omit the --password option, the password will be requested interactively.\n\nIf the specified values were correct, you will be asked to confirm the identity of the Checkmk site to which you want to connect. For clarity here, we have abbreviated the server certificate to be confirmed:\n\nAttempting to register at cmkserver:8000/mysite. Server certificate details: PEM-encoded certificate: ---BEGIN CERTIFICATE--- MIIC6zCCAdOgAwIBAgIUXbSE8FXQfmFqoRNhG9NpHhlRJ40wDQYJKoZIhvcNAQEL [...] nS+9hN5ILfRI+wkdrQLC0vkHVYY8hGIEq+xTpG/Pxw== ---END CERTIFICATE--- Issued by: Site 'mysite' local CA Issued to: localhost Validity: From Thu, 10 Feb 2022 15:13:22 +0000 To Tue, 13 Jun 3020 15:13:22 +0000 Do you want to establish this connection? [Y/n] > Y\n\nConfirm with Y to complete the process.\n\nIf no error message is displayed, the encrypted connection will have been established. All data will now be transmitted in compressed form via this connection.\n\nIf you want to disable the interactive check of the certificateââfor example to fully automate the registrationââyou might use the additional parameter --trust-cert. The transferred certificate will be automatically trusted in this case. Keep in mind that you should take other measures to verify the integrity of the certificate. This can be performed (manually or scripted) by inspecting the file /var/lib/cmk-agent/registered_connections.json.\n\n4.5. Registering a host automatically with the server\n\nCheckmk Cloud provides the facility to create hosts automatically at registration. For the auto-registration, in addition to a user with permission to register hosts, you need at least one folder configured to hold the hosts to be created automatically.\n\nIf these conditions have been met, you can also carry out the registration including automatic host creation via the command line.\n\nUsually you will use the Agent Bakery settings procedure, which includes the /var/lib/cmk-agent/pre_configured_connections.json configuration file in the agent package and which performs the registration automatically during installation. The command line call presented here is therefore primarily for testing and debugging, for example trying out your own agent labels with the --agent-labels <KEY=VALUE> option.\n\nroot@linux# cmk-agent-ctl register-new\\ --server cmkserver --site mysite\\ --agent-labels testhost:true\\ --user agent_registration --password'PTEGDYXBFXVGNDPRL'\n\nThe biggest difference here is the modified register-new sub-command, which is used to request registration and creation of a new host in the Checkmk site. The name of the host is the one stored in the $HOSTNAME environment variable. The subsequent confirmation of the certificate is the same as shown in the last section.\n\nWhether the host is created in pull mode, push mode or not at all is defined by your settings in the Agent registration rule set. Following a successful registration, it may take several minutes before the host appears in the monitoring.\n\n4.6. Verifying the trust relationship\n\nThe cmk-agent-ctl status command now shows exactly one trust relationship with the Checkmk server:\n\nroot@linux# cmk-agent-ctl status Connection: 12.34.56.78:8000/mysite UUID: d38e7e53-9f0b-4f11-bbcf-d19617971595 Local: Connection type: pull-agent Certificate issuer: Site 'mysite' local CA Certificate validity: Mon, 21 Feb 2022 11:23:57 +0000 - Sat, 24 Jun 3020 11:23:57 +0000 Remote: Connection type: pull-agent Host name: mynewhost\n\nIn case the information is needed in a machine-readable format, append the additional parameter --json to retrieve the output formatted as a JSON object.\n\nNote: There can only ever be one trust relationship between host and site. For example, if you register an already registered host mynewhost under a different name (mynewhost2) but with the same IP address, then the new connection will replace the existing one. The connection from mynewhost to the site will be disconnected and no more agent data will be supplied to the host for monitoring.\n\n4.7. Registration by proxy\n\nFor easier registration of multiple hosts, any host on which the agent is installed can perform a registration on behalf of other hosts. The registration process exports a JSON file, which can then be transferred to the target host and imported there. Again, as before, the host registered in the job must already be set up on the site.\n\nFirst, on any host in the Setup, the registration is performed by proxy. Here, of course, the Checkmk server comes in handy, as it is usually the first host to be set up. As with the example above, you can pass the password by option or be asked for it interactively if you omit the --password option. We redirect the JSON output to a file in the example:\n\nroot@linux# cmk-agent-ctl proxy-register\\ --hostname mynewhost3\\ --server cmkserver --site mysite\\ --user agent_registration > /tmp/mynewhost3.json\n\nNext we transfer the /tmp/mynewhost3.json file to the host we registered for and import that file:\n\nroot@linux# cmk-agent-ctl import /tmp/mynewhost3.json\n\nThis process is also possible in a single step using a pipeline where the output of cmk-agent-ctl proxy-register is handed over as input to ssh hostname cmk-agent-ctl import:\n\nroot@linux# cmk-agent-ctl proxy-register --hostname mynewhost3\\ --server cmkserver --site mysite\\ --user agent_registration --password'PTEGDYXBFXVGNDPRL'|\\ ssh root@mynewhost3 cmk-agent-ctl import\n\n4.8. Adding the host to the monitoring\n\nOnce the registration is complete, perform a connection test and a service discovery in the Checkmk server Setup. Then, as the last step include the discovered services in the monitoring by activating the changes.\n\nIf the connection test fails, refer to the following chapter for testing and troubleshooting information.\n\n4.9. Deregistering a host\n\nYou can also deregister a host.\n\nOn a host connected to the Checkmk server, you can revoke the trust. Here, in the following command, the Universally Unique Identifier (UUID) to specify is the one output by the cmk-agent-ctl status command:\n\nroot@linux# cmk-agent-ctl delete d38e7e53-9f0b-4f11-bbcf-d19617971595\n\nTo delete all connections from the host and additionally restore legacy pull mode, enter the following command:\n\nroot@linux# cmk-agent-ctl delete-all --enable-insecure-connections\n\nAfter that, the agent behaves as it did after the initial installation and before the first registration and sends its data unencrypted.\n\nComplete the deregistration on the Checkmk server: In the Setup, on the Properties of host page, select the Host > Remove TLS registration menu item and confirm the prompt.\n\nIn case you prefer the command line: On the Checkmk server, for each connection of a host that is in monitoring, there is a soft link with the UUID that points to the folder with the agent output:\n\nOMD[mysite]:~$ cd ~/var/agent-receiver/received-outputs OMD[mysite]:~$ ls -l d38e7e53-9f0b-4f11-bbcf-d19617971595 lrwxrwxrwx 1 mysite mysite 67 Feb 23 07:18 d38e7e53-9f0b-4f11-bbcf-d19617971595 -> /omd/sites/mysite/tmp/check_mk/data_source_cache/push-agent/mynewhost\n\n4.10. Switching between the push and pull modes\n\nIn Checkmk Cloud you can switch hosts from push to pull mode and vice versa. This may be necessary in individual cases if changes to the network topology are pending, or a downgrade to Checkmk Enterpriseâââin which only the pull mode is possibleâââis to be carried out.\n\nFirst specify the access mode in the Setup, in the properties of the host, with the Checkmk agent connection mode option. Within the next minute, all services will assume the UNKNOWN status since no monitoring data is being received. Then perform a new registration. During this re-registration, the Checkmk serverâs Agent Receiver tells the Agent Controller whether it expects data in pull or push mode. A subsequent check using cmk-agent-ctl status will then show a new UUID and a mode consistent with the change made in the Setup.\n\nA modular system may not work as intended in many situations. Since the agent introduced with version 2.1.0 the two components, the Agent Controller on the host and the Agent Receiver on the Checkmk server, the number of points where something can go wrong has increased.\n\nWhen troubleshooting, a structured approach is thus recommended. You can of course also use the step-by-step analysis described here to get to know the data collection and communication provided by Checkmk in more detail.\n\nAll of the diagnostic options that are available from the Checkmk server side are described in the general article on monitoring agents. But, of course, there are other diagnostics available when logged in directly to the monitored host itself.\n\nWeâll work our way from the agent script, through the Agent Controller and TCP port 6556, to the Checkmk site in the following sections. With the Agent Controller in the Checkmk Cloud push mode, bypass any tests on port 6556âââeven if port 6556 is open before the registration, it will be closed following a registration in the push mode. In most cases, after correcting any errors, you can restart the service discovery and complete the inclusion in the monitoring.\n\n5.1. Output from the agent script\n\nThe agent script is a simple shell script that obtains data on your system and outputs it as loosely formatted text. You can call this script directly from the command line. Since the output can be a bit long, the option less to scroll the output is very handy here. You can exit it with the Q key:\n\nroot@linux# check_mk_agent| less <<<check_mk>>> Version: 2.2.0b1 AgentOS: linux Hostname: mynewhost AgentDirectory: /etc/check_mk DataDirectory: /var/lib/check_mk_agent SpoolDirectory: /var/lib/check_mk_agent/spool PluginsDirectory: /usr/lib/check_mk_agent/plugins LocalDirectory: /usr/lib/check_mk_agent/local AgentController: cmk-agent-ctl 0.1.0\n\nThis allows you to test whether the agent script and your plug-ins and local checks are installed correctly.\n\nBy the way, you do not have to be root to call the agent. However, the output will then lack some information that requires root privileges to obtain (e.g. multipath information and the outputs of ethtool).\n\n5.2. The agent script in debug mode\n\nTo prevent any error output from inactive plug-ins or commands from 'contaminating' the required data, the agent script generally suppresses the standard error channel (STDERR). If you are looking for a specific problem, you can re-enable the STDERR by calling the agent script in a special debug mode.\n\nYou do this with the -d option. This will also print all shell commands that the script executes.\n\nTo be able to work with less here, you have to combine standard output (STDOUT) and error channel with 2>&1:\n\nroot@linux# check_mk_agent -d2>&1| less\n\n5.3. Network environment for registration\n\nIf registering a host fails even before a certificate is presented, knowledge about the ways of communication can help identifying the problemâââand of course solving it.\n\nAfter entering the cmk-agent-ctl register command, the Agent Controller first asks the Checkmk server for the Agent Receiver port using the REST API. As second step a connection to the Agent Receiver is established to request the certificate. You can simulate the first request on the host with a program like curl:\n\nroot@linux# curl -v --insecure https://mycmkserver/mysite/check_mk/api/1.0/domain-types/internal/actions/discover-receiver/invoke\n\nThe parameter --insecure instructs curl to skip the certificate check. This behavior reflects the behavior of the Agent Controller in this step. The response is only a few bytes, containing the port number of the Agent Receiver. For the first site this is usually just 8000, for the second 8001 and so on. Common problems regarding this request are:\n\nThe Checkmk server is unreachable from the host.\n\nThe port used by the REST API differs from the default ports 443 (https) or 80 (http).\n\nWhen the curl command fails you might change routing or firewall settings to enable access.\n\nIn case the host you are trying to register uses an HTTP proxy, curl will use it, but cmk-agent-ctl wonât do so with default settings. Use the additional --detect-proxy option to instruct cmk-agent-ctl to use a proxy configured via system settings.\n\nHowever often it may be easier to find out the port of the Agent Receiver and note it down. To do so, on the Checkmk server run, logged in as site user:\n\nOMD[mysite]:~$ omd config show| grep AGENT_RECEIVER AGENT_RECEIVER: on AGENT_RECEIVER_PORT: 8000\n\nNow you can specify the port when entering the command for registration. This skips the first request to the REST API. Communication then takes place directly with the Agent Receiver without any detours:\n\nroot@linux# cmk-agent-ctl register --hostname mynewhost\\ --server mycmkserver:8000 --site mysite\\ --user agent_registration --password'PTEGDYXBFXVGNDPRL'\n\nPort 8000 also must be reachable from the host. In case it is not, you will get this error message:\n\nERROR [cmk_agent_ctl] Connection refused (os error 111)\n\nEquivalent to port 443 (respectively 80) mentioned above, you can now adjust routing or firewall settings so that the host to be registered can reach the Checkmk server on the Agent Receiverâs port (8000 or 8001â¦â)\n\nIn the case of a registration in the push mode of Checkmk Cloud the following applies: If the registration has worked, the minute-by-minute transfer of the agent output will also be successful.\n\nShould security policies prohibit access to the Agent Receiver, there is still the possibility to use registration by proxy on the Checkmk server.\n\n5.4. The Agent Controller in dump mode\n\nThe Agent Controller provides its own dump subcommand that displays the full agent output as it arrives in the monitoring:\n\nroot@linux# cmk-agent-ctl dump| less <<<check_mk>>> Version: 2.2.0b1 AgentOS: linux Hostname: mynewhost\n\nThis allows you to verify that the data from the agent script has arrived at the Agent Controller. This output does not yet prove that the agent is also accessible over the network.\n\nIn some cases, the output will look like this:\n\nERROR [cmk_agent_ctl] Error collecting monitoring data. Caused by: Connection refused (os error 111)\n\nThis would be the case when the agent socket is not running in the backgroundâââimmediately following an update, for example. Restart this background process:\n\nroot@linux# systemctl restart check-mk-agent.socket\n\nIf cmk-agent-ctl dump fails again, check if and which program is listening on port 6556:\n\nroot@linux# ss -tulpn| grep6556 tcp LISTEN 0 1024 0.0.0.0:6556 0.0.0.0:* users:((\"cmk-agent-ctl\",pid=1861810,fd=9))\n\nIf the output is empty or there is a command other than cmk-agent-ctl within the parentheses, the system requirements for using the Agent Controller have not been met. In this case, complete the setup as described in the article Monitor Linux in legacy mode.\n\n5.5. Remote connection test\n\nIf in pull mode it has been verified that the agent script and its installed plug-ins are executed correctly, you can next check via netcat (or nc) whether port 6556 is reachable via the external IP address of the host:\n\nroot@linux# echo| nc10.76.23.1896556 16\n\nThe output 16 indicates that the connection was successfully established and that the TLS handshake can now take place. Since everything else here is TLS encrypted, no more detailed check is possible.\n\nIf a remote connection test fails, it is usually due to the firewall setting. In this case, configure iptables or nftables to allow access to TCP port 6556 from the Checkmk server.\n\nIf the communication between agent and Checkmk server is still unencrypted (as in legacy pull mode), or is and will remain unencrypted (as in legacy mode), this command will give you the full unencrypted agent output instead of the 16.\n\nNote: For more diagnostics to run on the Checkmk server, see the general article on monitoring agents.\n\n5.6. Troubleshooting the push agent\n\nIn your Checkmk siteâs ~/var/agent-receiver/received-outputs/ folder, for each registered host you will find a soft link that uses the hostâs UUID as its name. For push hosts configured on a site running Checkmk Cloud this soft link points to the folder with the agent output, for pull hosts it points to a non-existent file with the name of the host as used in the monitoring.\n\nBased on the age of the cached agent output, you can determine whether the regular transmission was successful or is being interrupted by sporadic network problems, for example.\n\nFurthermore, you can display the status of the latest transmissions and transmission attempts on the host with the systemctl status cmk-agent-ctl-daemon command. Lines such as the following indicate connection problems:\n\nDez 15 17:59:49 myhost23 cmk-agent-ctl[652648]: WARN [cmk_agent_ctl::modes::push] https://mycmkserver:8000/mysite: Error pushing agent output.\n\n5.7. Connections are being lost\n\nIf a host in Checkmk Cloud has been configured for auto-registration with the Agent controller auto-registration rule set and the Keep existing connections option is set to no, whenever the cmk-agent-ctl-daemon service is restarted (for example, when a host is restarted), all other connections will be removedâââexcept the connection configured for auto-registration. This affects, for example, hosts where connections to multiple sites were set up before the baked agent package was installed, or connections were manually added after the agent package was installed.\n\nYou can temporarily override this behavior by setting the keep_existing_connections variable to true in the C:\\ProgramData\\checkmk\\agent\\pre_configured_connections.json file on the host. You can achieve a permanent change across an agent package update by setting Keep existing connections to yes in the above rule set.\n\n5.8. Waiting time until changes become visible\n\nWhen auto-registering a host in Checkmk Cloud, typically about two minutes pass before the host appears in the monitoring.\n\nIf a connection in pull mode to another site was subsequently added to a host that was initially configured for push mode, up to five minutes will pass before port 6556 is opened. You can open the port immediately by restarting the cmk-agent-ctl-daemon service.\n\nThe output from the Checkmk agent is divided into sections. Each of these sections contains related information and is usually simply the output of a diagnostic command. Sections always start with a section header. This is a line enclosed in <<< and >>>.\n\nExcept for Checkmkâs own sections, you can individually disable any of the 30+ sections that the agent generates by default. Specifically, this means that the corresponding commands will just not be executed by the agent, possibly saving computation time. Other reasons for disabling could be that you are simply not interested in certain information from a certain group of hosts, or that a certain host is providing erroneous values and you want to temporarily suspend retrieval of that data.\n\nAs a user of one of the commercial editions you can simply create a rule via Setup > Agents > Windows, Linux, Solaris, AIX > Agent rules > Disabled sections (Linux agent), this rule will then be taken into account by the Agent Bakery.\n\nIn the commercial editions you can disable sections by rule\n\nYou will generally find a separate checkbox for each section that can be disabled.\n\nFor each selected checkbox you will then findâââafter the newly packaged agent has been installed on the selected hostsâââa separate entry in the Agent Bakery configuration file /etc/check_mk/exclude_sections.cfg. For example, if you were to select Running processes and Systemd services, the appropriate configuration file would look like the following:\n\n/etc/check_mk/exclude_sections.cfg\n\nMK_SKIP_PS=yes MK_SKIP_SYSTEMD=yes\n\nUsers of Checkmk Raw can manually create the above /etc/check_mk/exclude_sections.cfg file and there enter the sections that should be disabled. All sections that can be disabled are listed in the ~/share/check_mk/agents/cfg_examples/exclude_sections.cfg file.\n\nAs with an installation, uninstalling the agent is also done using the operating systemâs package manager. Specify the name of the installed package here, not the filename of the original RPM/DEB file.\n\nThis is how you find out which DEB package is installed:\n\nroot@linux# dpkg -l| grep check-mk-agent ii check-mk-agent 2.1.0b1-1 all Checkmk Agent for Linux\n\nThe uninstallation of the DEB package is then done using dpkg --purge:\n\nroot@linux# dpkg --purge check-mk-agent (Reading database ... 739951 files and directories currently installed.) Removing check-mk-agent (2.1.0b5-1) ... Removing systemd units: check-mk-agent.socket, check-mk-agent-async.service, cmk-agent-ctl-daemon.service, check-mk-agent@.service Deactivating systemd unit 'check-mk-agent.socket'... Deactivating systemd unit 'check-mk-agent-async.service'... Deactivating systemd unit 'cmk-agent-ctl-daemon.service'... Reloading xinetd Purging configuration files for check-mk-agent (2.1.0b5-1) ...\n\nHow to find out which RPM package is installed:\n\nroot@linux# rpm -qa| grep check-mk\n\nUninstallation of the RPM package is done as root with the command rpm -e.\n\n11.1. Re-enabling legacy pull mode\n\nWhen the agent is uninstalled, the cmk-agent user created by the install script will be preserved. This serves as an indicator to the post-install script that the agent was already installed on this system. If this is the case, no legacy pull mode will be activated during a subsequent reinstall. As a result, after running cmk-agent-ctl delete-all and later reinstalling the agent, no connection will be possible on port 6556.\n\nIf it is desired to re-enable the unencrypted legacy pull mode, for example, to allow communication of a 2.0.0 site with a 2.2.0 agent, you will have to explicitly enable this mode."
    }
}