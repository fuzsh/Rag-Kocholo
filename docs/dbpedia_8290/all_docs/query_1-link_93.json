{
    "id": "dbpedia_8290_1",
    "rank": 93,
    "data": {
        "url": "https://superuser.com/questions/917211/command-vs-program",
        "read_more_link": "",
        "language": "en",
        "title": "Command vs program?",
        "top_image": "https://cdn.sstatic.net/Sites/superuser/Img/apple-touch-icon@2.png?v=e869e4459439",
        "meta_img": "https://cdn.sstatic.net/Sites/superuser/Img/apple-touch-icon@2.png?v=e869e4459439",
        "images": [
            "https://cdn.sstatic.net/Sites/superuser/Img/logo.svg?v=4bc8a703ebac",
            "https://www.gravatar.com/avatar/5cf1d263476e1b42cea5ceb572dddcd8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9c616f706c8cf9f55e0a2c72d7acda20?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/f55a85087991cab8aed5a8c90dc7231a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/mrnZr.jpg?s=64",
            "https://superuser.com/posts/917211/ivc/0c39?prg=1a90216c-75f6-45c6-9371-a3aba98af40c"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-05-20T13:10:17",
        "summary": "",
        "meta_description": "I was looking up the difference between adduser and useradd, and an explanation is that useradd is a command while adduser is a perl script. I understand what a perl script is, but what I do not",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/superuser/Img/favicon.ico?v=4852d6fb3f5d",
        "meta_site_name": "Super User",
        "canonical_link": "https://superuser.com/questions/917211/command-vs-program",
        "text": "In simple terms, a command is an instruction (or a set of instructions) to be carried out by a computer.\n\nStand-alone commands\n\nFundamental Unix utilities such as ls, ln, etc. are (usually) written in C and compiled to be stand-alone executable programs that don’t require an interpreter to be executed; they usually require certain library files to be installed on the system but that’s an answer for another question.\n\nScripts\n\nA script is a collection of commands and in fact, scripts themselves are considered to be a command.\n\nA Perl script is a sequence of Perl statements and requires a perl executable (stand-alone and compiled) program to interpret the Perl statements.\n\nSometimes large and complex interpretative scripts (in languages such as Perl, Python and Ruby) are also referred to as interpreted programs while the term script is reserved for shorter and simpler scripts.\n\nA shell script is a sequence of other commands (any type of command) and it requires a Unix shell such as Bash to interpret the script. From the Bash man page:\n\nBash is an sh-compatible command language interpreter that executes commands read from the standard input or from a file.\n\nShell Built-ins\n\nShells usually have built-in commands which are neither stand-alone programs nor scripts. Instead, they are part of the shell itself and run directly by the shell. cd is an example of such a built-in command.\n\nSome times there are commands which exist as shell built-ins and as stand-alone commands at the same time, e.g., the echo command.\n\n$ type -a echo echo is a shell builtin echo is /usr/bin/echo\n\necho on its own executes the shell built-in while the stand-alone command can be executed by providing its full path.\n\nRun built-in version of echo:\n\n$ echo --version --version\n\nRun stand-alone echo program:\n\n$ /usr/bin/echo --version echo (GNU coreutils) 8.23 Packaged by Cygwin (8.23-4) Copyright (C) 2014 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.\n\nNote: The above specifics refer to a Unix environment but the same principles apply to a Windows environment.\n\nCommand just means a way to tell an application or system to do something.\n\nAn application will typically accept many different commands, either from the GUI, from stdin, but other methods are possible, e.g. a UNIX socket or named pipe, some sort of web API, an RPC connection, or some other custom protocol.\n\nAn application that does only one thing, then exits, typically without a GUI, can also be called a command, because you can really only \"give\" this application one meaningful \"command.\" This is how small programs like ls and such work and why they are called commands.\n\nBut you wouldn't call Photoshop a command, but you'd certainly issue commands within it via the GUI.\n\nHowever, the term can mean different things to different people. In your example, command is being used to describe an executable that is run directly, versus a file that requires a script interpreter to work. The distinction can be important because when you are running a Perl script, /usr/bin/perl is the binary that is actually running (so if you want to kill a long running Perl script, that's what you have to look for in ps). However, most shells have \"built-in\" commands that are commands to the shell itself and don't cause an external executable to run. For example, cd is handled by bash itself and it doesn't call /sbin/cd or similar."
    }
}