{
    "id": "dbpedia_8290_3",
    "rank": 46,
    "data": {
        "url": "https://guide.macports.org/",
        "read_more_link": "",
        "language": "en",
        "title": "MacPorts Guide",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://guide.macports.org/trac-default.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mark Duling",
            "Dr . Michael A Maibaum",
            "Will Barton",
            "Clemens Lang"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "port is the main utility used to interact with MacPorts. It is used to update Portfiles and the MacPorts infrastructure, and install and manage ports. Note that not all actions are listed here; see port(1) for the full list.\n\nThe help action shows some brief information about the specified action, or if no action is specified, shows basic usage information for port in general.\n\n$ port help selfupdate\n\nUsage: selfupdate --no-sync Upgrade MacPorts itself and run the sync target --no-sync Do not run the sync target, i.e., do not update the ports tree. Only checks for (and installs, if available) new versions of MacPorts.\n\nThe selfupdate action should be used regularly to update the local ports tree with the global MacPorts ports repository so you will have the latest versions of software packages available. It also checks for new releases of MacPorts itself, and upgrades it when necessary.\n\n$ sudo port selfupdate\n\n---> Updating MacPorts base sources using rsync MacPorts base version 2.10.1 installed, MacPorts base version 2.10.1 downloaded. ---> Updating the ports tree ---> MacPorts base is already the latest version\n\nIf selfupdate detects that a newer version of MacPorts is available, it automatically updates the installed copy of MacPorts base to the latest released version. In that case, you will see this message:\n\n---> Updating MacPorts base sources using rsync MacPorts base version 2.10.0 installed, MacPorts base version 2.10.1 downloaded. ---> Updating the ports tree ---> MacPorts base is outdated, installing new version 2.10.1 Installing new MacPorts release in /opt/local as root:admin; permissions 755\n\nIf the selfupdate procedure fails you'll see a message like this:\n\nError installing new MacPorts base: command execution failed\n\nAs always, you can use the debug flag -d to enable verbose output. If your selfupdate failed, re-run it with debug output enabled to see all output generated by the build system.\n\n$ sudo port -d selfupdate\n\nThe output may give you an idea why the build failed. Look for the first occurrences of âerrorâ. If you cannot figure out what's wrong yourself, feel free to ask on the <macports-users@lists.macports.org> mailing list and attach the output generated by sudo port -d selfupdate.\n\nselfupdate accepts a single switch:\n\n--no-sync\n\nOnly update MacPorts itself, do not update the tree of Portfiles.\n\nThe sync action performs a subset of selfupdate. It synchronizes the ports tree, as does selfupdate, but it does not check for MacPorts upgrades. On macOS, unless there is a special reason not to do so, run selfupdate instead.\n\nsync does not accept any switches.\n\nThe diagnose action checks for common issues in the user's environment and reports all issues it finds to the user, along with possible fixes for said problem.\n\ndiagnose accepts a single switch:\n\n--quiet\n\nOnly displays warnings and errors, rather than the status of all tests run.\n\nThe reclaim action attempts to reclaim space by uninstalling inactive ports, and removing unnecessary files that were downloaded during the installation process.\n\nreclaim accepts switches to configure automatic reminders. If passed, the reclaim process will not be run.\n\n--enable-reminders\n\nEnable regular reminders to run port reclaim.\n\n--disable-reminders\n\nDisable regular reminders to run port reclaim.\n\nThe list action lists the currently available version of the specified ports, or if no ports are specified, displays a list of all available ports. The list of available ports is very long, so use search if you are looking for a specific port.\n\n$ port list\n\nNote\n\nport list always lists the most recent version available in MacPorts, which is not necessarily the version you have installed. For this reason, port list installed likely produces unexpected output. In most cases where you would list, using installed or echo is the better choice instead. Both port installed and port echo installed would produce the output you might expect from the command, port list installed will not (and, to make matters worse, will be slow).\n\nYou will hardly need port list at all to work with MacPorts. When searching, port search is the better choice and when trying to list ports, port installed and port echo are much more useful.\n\nThe search action allows finding ports by partial matches of the name or description. Other fields can be matched against, and matched in different ways, by using options. port search is the tool of choice if you are looking for a specific software in MacPorts. We recommend you read up on some of its flags to improve your efficiency when searching for ports. Run port help search for an exhaustive list of possible switches.\n\nSuppose you are looking for PHP in MacPorts. You might start with port search php and notice your query produces a lot of output. In fact, at the time of writing this, this search produces 661 matches. By default, port search searches both name and description of a port. While we're looking for PHP, we can reduce the number of hits by using the --name flag. Furthermore, we only want ports whose name starts with âphpâ, so we add the --glob flag (actually, we could leave it out because it is the default) and modify the search term to php*:\n\n$ port search --name --glob 'php*'\n\nFurthermore, we can enable compact output by using the --line switch. This causes only a single line to be printed for each match:\n\n$ port search --name --line --glob 'php*'\n\nAmong a large number of PHP modules you will find the main PHP ports, which are named php<version>. Choose one to install.\n\nIf you know regex and know about the format of the PHP versions, you can further reduce the output of port search:\n\n$ port search --name --line --regex '^php\\d*$'\n\nphp 5.5 lang www PHP: Hypertext Preprocessor php4 4.4.9 lang www PHP: Hypertext Preprocessor php5 5.3.28 lang www PHP: Hypertext Preprocessor php52 5.2.17 lang www PHP: Hypertext Preprocessor php53 5.3.28 lang www PHP: Hypertext Preprocessor php54 5.4.31 lang www PHP: Hypertext Preprocessor php55 5.5.15 lang www PHP: Hypertext Preprocessor php56 5.6.0RC2 lang www PHP: Hypertext Preprocessor\n\nLet us look at another example that is less complicated. Assuming you are looking for rrdtool, a popular system to store and graph time-series data, the simple search approach works well:\n\n$ port search rrd\n\ncacti @0.8.8b (net) Cacti is a complete RRDtool network graphing solution. jrrd @1.0.4 (java) Java interface to RRDTool netmrg @0.20 (net) An RRDtool frontend for network monitoring, reporting, and graphing that generates day/week/month MRTG style graphs. network-weathermap @0.97c (net) Weathermap is a network visualisation tool, to take graphs you already have and display an overview of your network as a map. It supports RRD, MRTG (RRD and old log-format), and tab-delimited text files. Other sources are via plugins or external scripts. php-rrd @1.1.3 (php, net, devel) PHP rrdtool extension php5-rrd @1.1.3 (php, net, devel) PHP rrdtool extension php5-rrdtool @1.0.5 (php, net, devel) this port is only a stub and has been made obsolete by php5-rrd php53-rrd @1.1.3 (php, net, devel) PHP rrdtool extension php54-rrd @1.1.3 (php, net, devel) PHP rrdtool extension php55-rrd @1.1.3 (php, net, devel) PHP rrdtool extension rrdtool @1.4.7_5 (net) Round Robin Database Found 11 ports.\n\nThe possible switches to search and their meaning are:\n\n--case-sensitive\n\nMatch the search string in a case-sensitive manner.\n\n--exact\n\nMatch the literal search string exactly.\n\n--glob\n\nTreat the given search string as glob search string (i.e., expand wildcards *, ?, and [chars]). This is the default behavior.\n\n--regex\n\nTreat the given search string as regular expression.\n\n--field\n\nTest the search string against <field>. Can be specified multiple times to test against multiple fields. The default is --name --description. Possible values for <field> are\n\n--category, --categories\n\nSearch for ports in a given category.\n\n--depends, --depends_build, --depends_extract, --depends_fetch, --depends_lib, --depends_run\n\nSearch for ports that depend on the port given as search string. The --depends is an alias for all other --depends_ options combined. Note that only dependencies specified in default variants will be found.\n\n--description, --long_description\n\nTest the search string against ports' descriptions.\n\n--homepage\n\nTest the search string against the homepage field of all ports.\n\n--maintainer, --maintainers\n\nSearch for ports maintained by a specific maintainer.\n\n--name\n\nSearch only ports' names.\n\n--portdir\n\nTest the search string against the path of the directory that contains the port.\n\n--variant, --variants\n\nSearch for variant names.\n\nThe info action is used to get information about a port: name, version, description, variants, homepage, dependencies, license, and maintainers.\n\n$ port info yubico-pam\n\nyubico-pam @2.16 (security) Variants: universal Description: The Yubico PAM module provides an easy way to integrate the YubiKey into your existing user authentication infrastructure. The module can be configured to validate YubiKeys against Yubico's YubiCloud infrastructure, a custom YubiKey validation server or it can be used for offline authentication with newer YubiKeys supporting a challenge-response protocol. Homepage: https://github.com/Yubico/yubico-pam Build Dependencies: pkgconfig, autoconf, automake, libtool Library Dependencies: ykpers, yubico-c-client Platforms: darwin License: BSD Maintainers: cal@macports.org\n\nThe deps action lists the dependencies of a port. Dependencies are the packages are required by a port at runtime (library and runtime dependencies) or required to install it (build, fetch, and extract dependencies).\n\n$ port deps apache2\n\nFull Name: apache2 @2.2.27_0+preforkmpm Library Dependencies: apr, apr-util, expat, openssl, pcre, perl5, zlib\n\nNote that the list of dependencies might depend on the variants you chose. For example, choosing the +openldap variant of apache2 adds a dependency on openldap:\n\n$ port deps apache2 +openldap\n\nFull Name: apache2 @2.2.27_0+openldap+preforkmpm Library Dependencies: apr, apr-util, expat, openssl, pcre, perl5, zlib, openldap\n\ndeps accepts two switches:\n\n--index\n\nDo not read the Portfile to determine dependencies. Instead, rely on the information cached in the port index. Note that (despite specifying them), this option will ignore any effects of variants. It is, however, much faster.\n\n--no-build\n\nExclude dependencies only required at build time, i.e., fetch, extract, and build dependencies.\n\nThe variants action allows you to check what variations of a port are available before you install it. Variants are a way for port authors to provide options you can use to customize your build at install time. See Invoking Port Variants below to install ports that have variants.\n\n$ port variants apache2 +universal\n\napache2 has the variants: eventmpm: Use event MPM (experimental) * conflicts with preforkmpm workermpm openldap: Enable LDAP support through OpenLDAP [+]preforkmpm: Use prefork MPM * conflicts with eventmpm workermpm +universal: Build for multiple architectures workermpm: Use worker MPM * conflicts with eventmpm preforkmpm\n\nThis output lists all variants followed by their description. If a variant depends on or conflicts with other variants, a line detailing that follows. A variant name prefixed by + indicates that it has been enabled (on the command line), while a prefix - indicates that it has been disabled. When bracketed, a prefix + means that the variant is enabled by default. Any [] are derived from the Portfile. While () are derived from the variants.conf. See SectionÂ 6.2.3, âvariants.confâ for more information on variants.conf.\n\nThe action install is used to install a port. Once you determined the name of a port you want (possibly using port search), you can install it using this command. See SectionÂ 3.2.1, âInvoking Variantsâ on how to choose variants when installing a new port. For example,\n\n$ sudo port install apache2 -preforkmpm +workermpm\n\ninstalls the apache2 port without the preforkmpm, but with the workermpm variant.\n\nIf the installation of a port fails, you can enable verbose or debug output by giving the -v or -d flag to port:\n\n$ sudo port -v install apache2\n\nAll debug information is also kept in main.log for the port you installed. Its path will be printed automatically if the installation fails. You can manually get the path using port logfile portname. Note that logfiles will automatically be deleted on successful installation.\n\nIf the installation of a port fails, you should always clean and try again, i.e., run\n\n$ sudo port clean portname\n\nand re-execute the command you ran before.\n\nYou might also want to try enabling trace mode, which can prevent conflicts caused by files installed by other ports or in common system locations, such as /usr/local. To do that, re-run the installation with the -t flag, i.e.,\n\n$ sudo port -t install portname\n\nIf the port still fails to install after you have followed these steps, please file a ticket and attach the main.log of a clean attempt.\n\nNote\n\nThe installation of a single port consists of multiple phases. These phases are fetch, extract, patch, configure, build, destroot, archive, and finally install. You may break up a port's installation into smaller steps for troubleshooting by using the name of one of these phases as action rather than install. For example\n\n$ sudo port destroot apache2\n\nwill run the installation of apache2 until the destroot phase. See SectionÂ 5.3, âPort Phasesâ for a complete list of phases and a detailed description.\n\ninstall takes the following switches:\n\n--no-rev-upgrade\n\nBy default, a binary sanity check called rev-upgrade is run automatically after each successful installation. Pass this flag, if you want to avoid running this step, for example if you want to run it explicitly later after a number of installations using sudo port rev-upgrade, or if you know it will detect problems but want to defer dealing with them.\n\n--unrequested\n\nBy default, each port you install using the install explicitly (contrary to ports installed as a dependency of a different port) is marked as ârequestedâ. If you want MacPorts to treat a port you installed manually as if it was automatically installed as a dependency (e.g., if a dependency failed to build and you re-tried installing the dependency only), pass this flag.\n\nThe notes action is used to display any notes that a port's author included. These can contain anything, but by convention are brief, and typically contain quick start steps for configuring and using the port, pitfalls to watch out for, or other information that users should be aware of. These same notes are also displayed after installing a port. Many ports have no notes. More extensive documentation can often be found at a port's homepage, or in its installed files.\n\n$ port notes xinit\n\n---> xinit has the following notes: To use MacPorts' X11 as the default server, install xorg-server, log out, and log back in.\n\nThe action clean deletes intermediate files created by MacPorts while installing a port. A port clean is often necessary when builds fail and should be the first thing to try after a failed installation attempt.\n\n$ sudo port clean portname\n\nport clean can also be used to remove corrupted downloads after a failed fetch phase, by specifying the --dist flag:\n\n$ sudo port clean --dist portname\n\ndeletes all files that have been downloaded for the given port.\n\nclean accepts the following options:\n\n--archive\n\nRemove temporary archives.\n\n--dist\n\nRemove downloaded files.\n\n--logs\n\nRemove log files.\n\n--work\n\nRemove the work directory, i.e., the directory used by MacPorts to build a software. This removes all traces of an attempted build and is the default operation.\n\n--all\n\nAll of the above combined.\n\nThe uninstall action will remove an installed port. It is one of the actions you will use fairly often in MacPorts.\n\n$ sudo port uninstall portname\n\nMacPorts will refuse to uninstall ports that are still needed by other ports. For example:\n\n$ sudo port uninstall libcomerr\n\n---> Unable to uninstall libcomerr @1.42.9_0, the following ports depend on it: ---> kerberos5 @1.11.3_0 ---> subversion @1.8.9_0 ---> subversion-perlbindings-5.16 @1.8.9_0 Error: port uninstall failed: Please uninstall the ports that depend on libcomerr first.\n\nYou can recursively uninstall all ports that depend on the given port before uninstalling the port itself to work around this. To do that, use the --follow-dependents flag.\n\n$ sudo port uninstall --follow-dependents libcomerr\n\nYou can also override this safety check using the -f (force) flag. Since this will obviously break the dependents you shouldn't do this unless you know what you are doing.\n\n$ sudo port -f uninstall libcomerr\n\nUninstalling a port will not uninstall ports that have been automatically installed as dependencies of the uninstalled port and are otherwise unused. You can trigger this behavior by passing the --follow-dependencies flag. Ports that were manually installed (i.e., are marked as ârequestedâ) or have other dependents will not be removed. You can manually uninstall the unneeded ports later using the leaves pseudo-port, e.g., using sudo port uninstall leaves.\n\nuninstall supports the following switches:\n\n--follow-dependents\n\nRecursively uninstall ports that depend on the specified port before uninstalling the port itself. See also the textual description above.\n\n--follow-dependencies\n\nAlso uninstall ports that were automatically installed as dependencies of the removed port and are no longer needed.\n\n--no-exec\n\nAvoid running any uninstall hooks, such as commands that update cache files.\n\nThe contents action displays a list of all files that have been installed by a given port. You can only use contents for ports you installed.\n\n$ port contents xorg-renderproto\n\nPort xorg-renderproto contains: /opt/local/include/X11/extensions/render.h /opt/local/include/X11/extensions/renderproto.h /opt/local/lib/pkgconfig/renderproto.pc /opt/local/share/doc/renderproto/renderproto.txt\n\nCommon uses for contents are finding the location of a port's executable after installing it. The following line is usually helpful in this case:\n\n$ port -q contents portname | grep -E '/s?bin/'\n\nThe -q (quiet) flag suppresses the header line in this case, but is not strictly necessary.\n\ncontents accepts:\n\n--size\n\nPrints a human-readable representation of the files' sizes.\n\n--units UNIT\n\nUsed in conjunction with --size to choose the unit of the file size. Valid parameters for UNIT are\n\nB\n\nList sizes in bytes.\n\nK, Ki, or KiB\n\nList sizes in KiB, i.e., 1024 bytes.\n\nMi, or MiB\n\nList sizes in MiB, i.e., 1024 * 1024 bytes.\n\nGi, or GiB\n\nList sizes in GiB, i.e., 1024 * 1024 * 1024 bytes.\n\nk, or kB\n\nList sizes in kB, i.e., 1000 bytes.\n\nM, or MB\n\nList sizes in MB, i.e., 1000 * 1000 bytes.\n\nG, or GB\n\nList sizes in GB, i.e., 1000 * 1000 * 1000 bytes.\n\nThe installed action displays the installed versions and variants of the specified ports, or if no ports are specified, all installed ports. It also displays whether a port is âactiveâ, i.e., whether the files belonging to this port are currently present on disk or inactive, i.e., stashed away in a compressed tarball.\n\n$ port installed\n\nThe following ports are currently installed: a52dec @0.7.4_0 (active) adns @1.4_0 (active) apache2 @2.2.27_0+preforkmpm (active) apr @1.5.1_0 (active) apr-util @1.5.3_0 (active) aquaterm @1.1.1_0 (active) asciidoc @8.6.9_1+python27 (active) â¦ XviD @1.3.3_0 (active) xz @5.0.5_0 (active) yasm @1.2.0_0 (active) ykpers @1.12.0_0 (active) youtube-dl @2014.07.25.1_0+python27 (active) yubico-c-client @2.12_0 (active) yubico-pam @2.16_0 (active) zlib @1.2.8_0 (active)\n\nUse -v to also display the platform and CPU architecture(s) for which the ports were built, and any variants which were explicitly negated.\n\n$ port -v installed libsdl\n\nThe following ports are currently installed: libsdl @1.2.15_3-x11 (active) platform='darwin 13' archs='x86_64'\n\nThe outdated action checks your installed ports against the current ports tree to see they have been updated since you installed them. Note that you will only get new versions by updating your ports tree using selfupdate (or sync).\n\n$ port outdated\n\nThe following installed ports are outdated: gnupg 1.4.16_0 < 1.4.18_0 gnupg2 2.0.22_2 < 2.0.25_0 gpg-agent 2.0.22_1 < 2.0.25_0 gpgme 1.5.0_0 < 1.5.1_0 HexFiend 2.1.2_1 < 2.3.0_0 libksba 1.0.8_0 < 1.3.0_0 p5.16-class-methodmaker 2.180.0_1 < 2.210.0_0 p5.16-gnupg-interface 0.330.0_3 < 0.500.0_1 p5.16-ipc-run 0.910.0_1 < 0.920.0_0\n\nport outdated lists the ports for which an upgrade is available and on the second column, why MacPorts thinks the port needs an upgrade. In most cases, this will be an increase in the version number. If it isn't, more details will be given.\n\nThe upgrade action upgrades installed ports and their dependencies to the latest version available in MacPorts. In most cases, you will run\n\n$ sudo port upgrade outdated\n\nto update all ports that have an upgrade available. You can, however, selectively upgrade ports if you want to delay other upgrades until later. This is not recommended unless you know what you are doing, since you might experience software errors for the ports that have not yet been upgraded. To upgrade individual ports, specify the name(s) of the port(s) to upgrade:\n\n$ sudo port upgrade gnupg2\n\nNote that MacPorts may decide to upgrade other dependent ports before upgrading the port you requested to be updated. Do not attempt to prevent this, since it will very likely lead to problems later.\n\nNote\n\nupgrade does not uninstall the old version of a port. Instead, it deactivates it, i.e., it stashes the files belonging to the older version away in a tarball. This allows you to go back to the older version if there happens to be a problem with the updated one. To do that, run\n\n$ port installed portname\n\nto determine the version number of the old version you want to re-activate, and run\n\n$ sudo port activate portname @old-version\n\nto go back to the old version.\n\nIf you do not want to keep the old versions around while upgrading, you can pass -u when upgrading:\n\n$ sudo port -u upgrade outdated\n\nHowever, we instead recommend keeping the older versions around for a while and running\n\n$ sudo port uninstall inactive\n\nonce in a while.\n\nupgrade accepts a number of switches:\n\n--force\n\nAlways consider the given ports outdated, regardless of whether they actually are.\n\n--enforce-variants\n\nIf the installed variants do not match those requested, upgrade (and change variants) even if the port is not outdated. You can use this to switch the variant selection on an installed port, e.g., using\n\n$ sudo port upgrade --enforce-variants apache2 -preforkmpm +workermpm\n\nNote that --enforce-variants will also enforce your variant selection in all dependencies. If you know this is not necessary, you can avoid processing dependencies using the global -n flag:\n\n$ sudo port -n upgrade --enforce-variants apache2 -preforkmpm +workermpm\n\n--no-replace\n\nDo not automatically install replacement ports for a port that you have installed, but was replaced with a different one.\n\nThe dependents action reports what ports depend upon a given (installed) port, if any.\n\n$ port dependents openssl\n\napache2 depends on openssl curl depends on openssl cyrus-sasl2 depends on openssl git depends on openssl kerberos5 depends on openssl lftp depends on openssl libssh depends on openssl mosh depends on openssl openldap depends on openssl p5.16-net-ssleay depends on openssl python27 depends on openssl python32 depends on openssl qt4-mac depends on openssl ruby19 depends on openssl serf1 depends on openssl textmate2 depends on openssl wireshark depends on openssl\n\nNote that dependents does not work for ports that are not installed on your system. If you want to find out, which ports depend on a port that you have not installed, you can use\n\n$ port echo depends:portname\n\nThis command will, however, not cover dependencies that are only present in non-default variants.\n\nThe livecheck action checks to see if the application corresponding to a given port has been updated at the developer's download site. This action is mostly useful for port maintainers to determine whether their port needs to be updated, but other may also wish to see if a port packages the latest available version. See SectionÂ 5.8, âLivecheck / Distcheckâ for more information on livecheck.\n\n$ port livecheck rb19-sass\n\nrb19-sass seems to have been updated (port version: 3.3.10, new version: 3.3.14)\n\nNote\n\nIf livecheck finds no higher version at the port's download site, it prints nothing. The option -d (debug) may be used for detailed livecheck processing information.\n\nThe lint action checks if the Portfile conforms to the MacPorts standards specified in Portfile Development. You should use this if you modified a Portfile before submitting patches back to MacPorts.\n\nIf a Portfile validates fine the following message is shown.\n\n$ port lint rb19-sass\n\n---> Verifying Portfile for rb19-sass ---> 0 errors and 0 warnings found.\n\nOtherwise the warnings and errors are listed.\n\n$ port lint abiword\n\n---> Verifying Portfile for abiword Warning: Variant use_binary does not have a description Warning: Variant use_source does not have a description Warning: no license set ---> 0 errors and 3 warnings found.\n\nlint has the following flag:\n\n--nitpick\n\nEnables additional checks that are mostly whitespace-related and best practices.\n\nSome ports install software that is meant to run as a daemon. Or in other words, a long-running background process.\n\nExamples of this are database servers like MySQL or PostgreSQL.\n\nOn macOS, launchd is primarily responsible for starting, stopping, and managing long-running services.\n\nPorts that want to run daemon processes can install their own .plist file(s) into launchd. These files will allow launchd to start and manage the port's daemon processes.\n\nSo once a port is installed, the load action can be used to do the above and activate the port's launchd service(s):\n\n$ sudo port load prometheus\n\n---> Loading startupitem 'prometheus' for prometheus\n\nNow the port's service(s) should be running in launchd. This can be verified with the launchctl command:\n\n$ sudo launchctl list | grep macports\n\n49119 0 org.macports.prometheus\n\nTo stop the daemon service and mark it as disabled for launchd, use the port unload command.\n\nAs discussed in the port load section, the port load command can be used to install and activate a port's daemon service(s) in launchd.\n\nThe unload action reverses this.\n\nport unload will stop the port's daemon processes, and mark the port's service .plist as disabled:\n\n$ sudo port unload prometheus\n\n---> Unloading startupitem 'prometheus' for prometheus\n\nThe port's service(s) should no longer be present in launchctl list.\n\nThis section lists common operations you may want to perform when managing a MacPorts installation. These are the workflows you will need most while using MacPorts. We recommend you read at least this section as a primer into how to use MacPorts. More details about the usage can be found in SectionÂ 3.1, âThe port Commandâ and the port(1) manpage available by running man 1 port in a Terminal.\n\nMind the âsudoâ for some of the subsequent examples, which is necessary if you have a default MacPorts installation.\n\nThe local ports tree is a collection of files that contain information on which packages are available through MacPorts and how they can be installed. You should regularly update your ports tree to get access to updated versions of software and bug fixes. To do that, use selfupdate:\n\n$ sudo port selfupdate\n\nPassword: ---> Updating MacPorts base sources using rsync MacPorts base version 2.10.1 installed, MacPorts base version 2.10.1 downloaded. ---> Updating the ports tree ---> MacPorts base is already the latest version The ports tree has been updated. To upgrade your installed ports, you should run port upgrade outdated\n\nTo see what's new after running selfupdate, you can use port outdated to generate a list of ports that have newer versions available. This can help in estimating the time required for sudo port upgrade outdated, even though this depends on further factors such as binary package availability and a port's build time.\n\n$ port outdated\n\nThe following installed ports are outdated: gnupg 1.4.16_0 < 1.4.18_0 gnupg2 2.0.22_2 < 2.0.25_0 gpg-agent 2.0.22_1 < 2.0.25_0 gpgme 1.5.0_0 < 1.5.1_0 HexFiend 2.1.2_1 < 2.3.0_0 libksba 1.0.8_0 < 1.3.0_0 p5.16-class-methodmaker 2.180.0_1 < 2.210.0_0 p5.16-gnupg-interface 0.330.0_3 < 0.500.0_1 p5.16-ipc-run 0.910.0_1 < 0.920.0_0\n\nTo upgrade all your installed and outdated ports, run\n\n$ sudo port upgrade outdated\n\nIn case you want to upgrade only a specific port (not recommended unless you know what you are doing), replace âoutdatedâ in the command given above with the port's name:\n\n$ sudo port upgrade makedepend\n\nPassword: ---> Computing dependencies for makedepend ---> Fetching makedepend ---> Attempting to fetch makedepend-1.0.3.tar.bz2 from http://lil.fr.distfiles.macports.org/makedepend ---> Verifying checksum(s) for makedepend ---> Extracting makedepend ---> Configuring makedepend ---> Building makedepend ---> Staging makedepend into destroot ---> Computing dependencies for makedepend ---> Installing makedepend @1.0.3_0 ---> Deactivating makedepend @1.0.2_0 ---> Activating makedepend @1.0.3_0 ---> Cleaning makedepend\n\nNote that MacPorts will upgrade any dependencies of a port first before updating the port itself. So even if you request the update of a single port only, other ports may be upgraded first because they are in the dependency tree. Do not try to avoid this, as it will very likely lead to problems later on â the new version of the port you want to upgrade might require the newer dependency, or it might only have been upgraded at all to be rebuilt against the updated dependency, in which case avoiding the update of the dependency defeats the purpose of the reinstallation.\n\nBy default, upgrading ports in MacPorts does not remove the older versions. This is a safety measure to ensure you can go back to a working and tested version in case an update goes wrong. To save disk space, you should periodically uninstall any old versions you no longer need.\n\nUse\n\n$ port installed inactive\n\nto get a list of inactive ports you likely no longer need.\n\nThe following ports are currently installed: gnupg @1.4.16_0 gnupg2 @2.0.22_2 gpg-agent @2.0.22_1 gpgme @1.5.0_0 HexFiend @2.1.2_1 libksba @1.0.8_0 p5.16-class-methodmaker @2.180.0_1 p5.16-gnupg-interface @0.330.0_3 p5.16-ipc-run @0.910.0_1\n\nCheck the list for any ports you might still want to keep. To remove all of them at once, run\n\n$ sudo port uninstall inactive\n\nPassword: ---> Uninstalling p5.16-gnupg-interface @0.330.0_3 ---> Cleaning p5.16-gnupg-interface ---> Uninstalling gnupg @1.4.16_0 ---> Cleaning gnupg ---> Uninstalling gpgme @1.5.0_0 ---> Cleaning gpgme ---> Uninstalling gnupg2 @2.0.22_2 ---> Cleaning gnupg2 ---> Uninstalling gpg-agent @2.0.22_1 ---> Cleaning gpg-agent ---> Uninstalling HexFiend @2.1.2_1 ---> Cleaning HexFiend ---> Uninstalling libksba @1.0.8_0 ---> Cleaning libksba ---> Uninstalling p5.16-class-methodmaker @2.180.0_1 ---> Cleaning p5.16-class-methodmaker ---> Uninstalling p5.16-ipc-run @0.910.0_1 ---> Cleaning p5.16-ipc-run\n\nOf course you could also select only a specific inactive port, but that requires to specify the exact version:\n\n$ sudo port uninstall HexFiend @2.1.2_1\n\nPassword: ---> Uninstalling HexFiend @2.1.2_1 ---> Cleaning HexFiend\n\nTo uninstall all inactive ports but a single one, you can use the following shortcut:\n\n$ sudo port uninstall inactive and not portname\n\nIf you want to find all ports that depend on a given other port, you can use\n\n$ port echo depends:portname\n\nIf you are only interested in the dependent ports that you actually have installed, you can use the quicker and more accurate dependents:\n\n$ port dependents portname\n\ngnupg2 depends on libksba gpg-agent depends on libksba\n\nMacPorts also has a recursive version of the dependents action called rdependents:\n\n$ port rdependents libksba\n\nThe following ports are dependent on libksba: gnupg2 gpgme gpg-agent\n\nFinally, to find out which port you manually installed caused the automatic installation of a dependency, use the following expression:\n\n$ port installed requested and rdependentof:portname\n\n$ port installed requested and rdependentof:libksba\n\nThe following ports are currently installed: gnupg2 @2.0.25_0 (active)\n\nAfter a while of using MacPorts, installing and uninstalling ports, packages that have been automatically installed as dependencies for other ports are left behind, even though they are no longer necessary. Ports that have not been manually installed (ârequestedâ) and do not have any dependents are called âleavesâ and can be identified using the leaves pseudo-port, for example in conjunction with the echo or installed action.\n\n$ port echo leaves\n\ngit-flow @0.4.1_2 gmake @4.0_0 gpgme @1.5.1_0 hs-download-curl @0.1.4_0 pkgconfig @0.28_0 py27-docutils @0.12_0 python32 @3.2.5_0 texi2html @5.0_1 yasm @1.2.0_0\n\nThese leaves may be wanted, but are in most cases unneeded. See SectionÂ 3.3.7, âKeep Your Installation Lean by Defining Leaves as Requested Portsâ to find out how to mark some of the leaves as requested. You can uninstall all leaves using\n\n$ sudo port uninstall leaves\n\nNote that the uninstallation can cause new ports to become leaves. To uninstall all leaves, you can use the rleaves pseudo-port instead.\n\nTo go through this process interactively so you can make sure you're not uninstalling anything you want to keep, you can install the port_cutleaves port. After installation, run it with\n\n$ sudo port_cutleaves\n\nWell, before we come to the procedure of defining your requested ports, let's have a look at a typical scenario where you want to understand what is actually installed and what is on the other hand truly necessary for your system. Say checking leaves of your MacPorts installation gives this output:\n\n$ port echo leaves\n\ngit-flow @0.4.1_2 gmake @4.0_0 gpgme @1.5.1_0 hs-download-curl @0.1.4_0 pkgconfig @0.28_0 py27-docutils @0.12_0 python32 @3.2.5_0 texi2html @5.0_1 yasm @1.2.0_0\n\nNow it is up to the user to decide what's needed and what is not. We've noticed pkgconfig is needed to build many ports, and while it is strictly not needed after installation, we'd like to keep it around to avoid installing it over and over again. python32, texi2html, and yasm are only needed to update mplayer2, and since that software is rarely updated, we will re-install those ports again when they are needed. Since they are all distributable, MacPorts will use pre-built binaries for their installation anyway, so re-installing them wouldn't take long anyway. We don't really know why the rest of the leaves were installed, so we're just going to remove them for now.\n\nSince we decided to keep pkgconfig, we are going to mark it as manually installed (ârequestedâ in MacPorts lingo) using:\n\n$ sudo port setrequested pkgconfig\n\nWhen you've step-by-step figured out which ports you want to keep on your system and have set them as requested, you'll have a list of unnecessary ports, which you can get rid of using\n\n$ sudo port uninstall leaves\n\nNote that uninstalling leaves may mark new ports as leaves, so you will have to repeat the process. You can install the port_cutleaves port, which is a special script for the job. It allows you to interactively decide whether to keep or uninstall a port. Run it as\n\n$ sudo port_cutleaves\n\n[Leaf 1 of 8] hs-download-curl @0.1.4_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: ** hs-download-curl @0.1.4_0 will be kept. [Leaf 2 of 8] gmake @4.0_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** gmake @4.0_0 will be uninstalled. [Leaf 3 of 8] texi2html @5.0_1 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** texi2html @5.0_1 will be uninstalled. [Leaf 4 of 8] yasm @1.2.0_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** yasm @1.2.0_0 will be uninstalled. [Leaf 5 of 8] python32 @3.2.5_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** python32 @3.2.5_0 will be uninstalled. [Leaf 6 of 8] py27-docutils @0.12_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** py27-docutils @0.12_0 will be uninstalled. [Leaf 7 of 8] git-flow @0.4.1_2 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** git-flow @0.4.1_2 will be uninstalled. [Leaf 8 of 8] gpgme @1.5.1_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** gpgme @1.5.1_0 will be uninstalled. ---> Deactivating gmake @4.0_0 ---> Cleaning gmake ---> Uninstalling gmake @4.0_0 ---> Cleaning gmake ---> Deactivating texi2html @5.0_1 ---> Cleaning texi2html ---> Uninstalling texi2html @5.0_1 ---> Cleaning texi2html ---> Deactivating yasm @1.2.0_0 ---> Cleaning yasm ---> Uninstalling yasm @1.2.0_0 ---> Cleaning yasm ---> Deactivating python32 @3.2.5_0 ---> Cleaning python32 ---> Uninstalling python32 @3.2.5_0 ---> Cleaning python32 ---> Deactivating py27-docutils @0.12_0 ---> Cleaning py27-docutils ---> Uninstalling py27-docutils @0.12_0 ---> Cleaning py27-docutils ---> Deactivating git-flow @0.4.1_2 ---> Cleaning git-flow ---> Uninstalling git-flow @0.4.1_2 ---> Cleaning git-flow ---> Deactivating gpgme @1.5.1_0 ---> Cleaning gpgme ---> Uninstalling gpgme @1.5.1_0 ---> Cleaning gpgme The following ports were uninstalled: gmake @4.0_0 texi2html @5.0_1 yasm @1.2.0_0 python32 @3.2.5_0 py27-docutils @0.12_0 git-flow @0.4.1_2 gpgme @1.5.1_0 Search for new leaves? [no] / (y)es: y [Leaf 1 of 1] py27-roman @2.0.0_0 (active): [keep] / (u)ninstall / (f)lush / (a)bort: u ** py27-roman @2.0.0_0 will be uninstalled. ---> Deactivating py27-roman @2.0.0_0 ---> Cleaning py27-roman ---> Uninstalling py27-roman @2.0.0_0 ---> Cleaning py27-roman The following ports were uninstalled: py27-roman @2.0.0_0 Search for new leaves? [no] / (y)es: y There are no new leaves to process.\n\nYou can get a list of all ports you previously set as requested (or installed manually) using:\n\n$ port installed requested\n\nWe recommend you check the list of leaves from time to time to keep your system free of too much âgarbageâ. You should also periodically check the list of your requested ports and mark any ports you no longer need as unrequested using\n\n$ sudo port unsetrequested portname\n\nThen check for new leaves to cut down the number of installed ports and the size of your MacPorts installation."
    }
}