{
    "id": "dbpedia_1889_3",
    "rank": 95,
    "data": {
        "url": "https://medium.com/100-days-in-kyoto-to-create-a-web-app-with-google/day-15-showing-users-direction-of-movement-on-embedded-google-maps-7e85ac8534ac",
        "read_more_link": "",
        "language": "en",
        "title": "Day 15: Showing user’s direction of movement on embedded Google Maps",
        "top_image": "https://miro.medium.com/v2/da:true/resize:fit:600/1*jlN9PpmZe9fRG6EjHkPEGg.gif",
        "meta_img": "https://miro.medium.com/v2/da:true/resize:fit:600/1*jlN9PpmZe9fRG6EjHkPEGg.gif",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*Ne2Rjq8vt1sz78VfbJTg-A.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*YGBTvNkAo9LSx_nPJHbiEg.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*Ne2Rjq8vt1sz78VfbJTg-A.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*YGBTvNkAo9LSx_nPJHbiEg.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "MasaKudamatsu",
            "masakudamatsu.medium.com"
        ],
        "publish_date": "2021-11-04T12:14:16.951000+00:00",
        "summary": "",
        "meta_description": "Unlike Google Maps native app, a web app cannot show the direction at which the user’s device points at on the map embedded in a page. A work around is to calculate the direction of the user’s…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/100-days-in-kyoto-to-create-a-web-app-with-google/day-15-showing-users-direction-of-movement-on-embedded-google-maps-7e85ac8534ac",
        "text": "TL;DR\n\nUnlike Google Maps native app, a web app cannot show the direction at which the user’s device points at on the map embedded in a page.\n\nA work around is to calculate the direction of the user’s movement from the current and previous location, by using trigonometry along with React’s useRef hook and Geolocation API's watchPosition() method (Sections 2 to 4).\n\nAs a marker to indicate the user’s direction of movement, an airplane icon can provide a nice user experience (Section 5).\n\nIntroduction\n\nIn Day 14 of this blog series, I described how I’ve coded to implement a web app feature that keeps updating the user’s location on embedded Google Maps.\n\nTo enhance this feature, I want to indicate the direction at which the user is moving. When the user gets out from a subway station, it’s really hard to tell which direction they are facing. On such an occasion, it’ll be very helpful if they can see a map shown with the direction of the user’s movement.\n\nIt turns out that this feature is not straightforward to implement with a web app. This article describes how I’ve tackled this challenge.\n\n1. A web app’s limitation\n\nGoogle Maps iOS/Android app shows which direction the user’s device points at:\n\nAs far as I know, however, a web app cannot implement this feature.\n\nA web app relies on Geolocation API to learn where the user is. Its specification (MDN Contributors 2021) says that the direction of movement is available as the GeolocationCoordinates object's heading property, but its value is unavailable if the user is not moving. When I tested with my iPhone to see if the heading property is of any use, I didn't see any direction data on the map even when I walked around with the phone.\n\nIndeed, the web app version of Google Maps does not show the “flashlight” emitted from the blue dot.\n\nSo I was about to give up showing the direction at which the user’s moving.\n\n2. A work around: using trigonometry\n\nHowever, I realized that I could calculate the direction of user movement from a pair of the current and previous location coordinates.\n\nChapter 3 of The Nature Of Code, a must-read book for computer-programming animation (Shiffman 2012), explains how we can get an angle of direction from two points of location:\n\nIn JavaScript, the formula goes like this:\n\nMath.atan2(diffLat, diffLng) * 180 / Math.PI\n\nwhere diffLat is the change in north-south direction (negative if moving southwards) and diffLng is the change in east-west direction (negative if moving westwards). The Math.PI is JavaScript's way of returning the irrational number of π (3.14...).\n\nThe Math.atan2() is the inverse function of the tangent (known as arctangent), with the first argument for the amount of northward movement and the second for eastward. It returns an angle in radians. To convert it into degrees, we need to multiply it with 180 / Math.PI because the relationship between radians and degrees are given by\n\nradians = 2π x (degrees / 360)\n\nSo I can use this formula to show the user’s direction of movement on the embedded Google Maps.\n\n3. Working with React and Geolocation API\n\nI need the user’s current location and previous location, to get the direction of movement. This can be done with Geolocation API and React as follows:\n\nconst userLocation = useRef(null);...\n\n// Keep track of user location\n\nnavigator.geolocation.watchPosition(position => {\n\n// Record the previous user location\n\nconst previousCoordinates = userLocation.current;\n\n// Update the user location\n\nuserLocation.current = {\n\nlat: position.coords.latitude,\n\nlng: position.coords.longitude\n\n};\n\n...\n\n})\n\nThe userLocation.current is initially null. When the watchPosition method is run for the first time, therefore, the variable previousCoordinates will be null. However, the second time the watchPosition method runs (which happens whenever the user's device updates location data), the previousCoordinates points to the initial location. Then, userLocation.current gets updated with the current location. This will be repeated so that we always have a pair of coordinates, the previous one and the current one.\n\nThen we can obtain changes in north-south and east-west direction, respectively:\n\nconst diffLat = userLocation.current.lat - previousCoordinates.lat;\n\nconst diffLng = userLocation.current.lng - previousCoordinates.lng;\n\nNow, apply the formula to get an angle of user movement in degrees:\n\nconst userDirection = Math.atan2(diffLat, diffLng) * 180 / Math.PI\n\n4. Working with Google Maps JavaScript API\n\nSo far so good. But there’s one last complication due to how Google Maps JavaScript API handles the direction in degrees.\n\nWhile the previous section’s trigonometry calculation gives us an angle measured anti-clockwise from the east (e.g., 90 degrees for the north, 180 degrees for the west, etc.). Google Maps JavaScript API needs an angle measured clockwise from the north (e.g., 90 degrees for the east, 180 degrees for the south, etc.).\n\nHow can I make a conversion? Before starting to learn UI/UX design and web development, I was trained as an economist whose analysis requires mathematics, and I got a PhD in the end. So it must be easy for me. :-)\n\nIt turns out that I need the following formula for conversion:\n\nconst clockwiseAngleFromNorth = 90 - anticlockwiseAngleFromEast;\n\nFor the east, 0 degree turns into 90 degrees; for the north, 90 degrees turn into 0 degree. Plotting these two points on a graph where the x-axis is anticlockwiseAngleFromEast and the y-axis is clockwiseAngleFromNorth, I've figured out that the relationship is given by y = 90 - x.\n\nFor the west, 180 degrees turn into 270 degrees, the latter of which can also be expressed as minus 90 degrees. For the south, 270 degrees turn into 180 degrees, or minus 180 degrees. So the “y = 90 — x” relationship still holds!\n\nSo I’ve written a little function as follows:\n\nfunction getCurrentDirection(previousCoordinates, currentCoordinates) {\n\nconst diffLat = currentCoordinates.lat - previousCoordinates.lat;\n\nconst diffLng = currentCoordinates.lng - previousCoordinates.lng;\n\nconst anticlockwiseAngleFromEast = convertToDegrees(\n\nMath.atan2(diffLat, diffLng)\n\n);\n\nconst clockwiseAngleFromNorth = 90 - anticlockwiseAngleFromEast;\n\nreturn clockwiseAngleFromNorth;\n\n// helper function\n\nfunction convertToDegrees(radian) {\n\nreturn (radian * 180) / Math.PI;\n\n}\n\n}\n\nI did my best to make the code document itself, an important practice to keep the code readable and maintainable.\n\nWith this getCurrentDirection() function, I can construct a marker for the user's location on Google Maps as follows:\n\nconst userLocation = useRef(null);\n\nconst marker = useRef(null); // ADDED\n\n...\n\n// Keep track of user location navigator.geolocation.watchPosition(position => {\n\n// Record the previous user location\n\nconst previousCoordinates = userLocation.current;\n\n// Update the user location\n\nuserLocation.current = {\n\nlat: position.coords.latitude,\n\nlng: position.coords.longitude\n\n};\n\n// Calculate the direction\n\nconst userDirection = getCurrentDirection( // ADDED\n\npreviousCoordinates, // ADDED\n\nuserLocation.current // ADDED\n\n); // ADDED\n\n// Construct marker\n\nmarker.current = new google.maps.Marker({\n\nicon: {\n\nfillColor: color['google-blue 100'],\n\nfillOpacity: 1,\n\npath: google.maps.SymbolPath.CIRCLE,\n\nrotation: userDirection, // ADDED\n\nscale: 8,\n\nstrokeColor: color['white 100'],\n\nstrokeWeight: 2,\n\n},\n\nposition: userLocation.current,\n\ntitle: 'You are here!',\n\n});\n\n// Mark the current location\n\nmarker.current.setMap(mapObject);\n\n});\n\nwhere the rotation property specifies the angle at which the marker icon is tilted clockwise. (See Google Maps Platform documentation for how to construct and show a marker on embedded Google Maps.)\n\nFor why I use the useRef hook to define the marker, see Section 3.2 of Day 12 of this blog post series.\n\n5. Airplane icon as user location marker\n\n5.1 Need for a directional shape\n\nThere’s one missing piece in the above code. As the user’s location maker, the Google blue dot is used, which is obviously incapable of showing the direction due to its rotationally symmetric shape. We need to replace it with an icon that has a directional shape.\n\nAs I repeatedly mention in this blog series, a street map is like the view of a city from the sky. Seeing your own location on the map is like flying up into the sky and looking down to see where you are.\n\nWith this fantasy in mind, the appropriate icon to mark the user location and their direction of movement is…\n\nI cannot think of anything but an airplane.\n\nWith an airplane icon on the map, it’ll be like those inflight monitor screens that show the current location of your flight over the world map.\n\n5.2 Using SVG path to mark location\n\nSo I download an SVG file of the Flight icon from Material Icons, open it with text editor, copy the value of the d attribute of the <path> element in it, and paste the code onto the path property for the marker on Google Maps:\n\nmarker.current = new google.maps.Marker({\n\nicon: {\n\nfillColor: color['google-blue 100'],\n\nfillOpacity: 1,\n\npath: 'M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z', // REVISED\n\nrotation: userDirection,\n\nscale: 2, // REVISED\n\nstrokeColor: color['white 100'],\n\nstrokeWeight: 2,\n\n},\n\nposition: userLocation.current,\n\ntitle: 'You are here!',\n\n});\n\nI also change the scale property to 2, to make it look not absurdly large.\n\nThe above code has one problem, however. When using an SVG path to specify the marker shape, Google Maps’s marker icon is by default pinned to the map at its top-left corner of the icon image’s bounding box. This means that the marker icon will appear moving around when the user changes the zoom level of the map.\n\nTo solve this issue, we need to set the anchor property to be the center of the marker icon image. The downloaded SVG file of the airplane icon sets the icon image dimension with its viewBox attribute. It's given as:\n\nviewBox=\"0 0 24 24\"\n\nThis means the width and height of the icon image is 24px and 24px. (The first two values refer to the coordinates of the top-left corner of the image’s bounding box.)\n\nSo the anchor point should be set as (12, 12). To specify this, Google Maps JavaScript API requires a new instance of the Point object:\n\nmarker.current = new google.maps.Marker({\n\nicon: {\n\nanchor: new google.maps.Point(12, 12), // ADDED\n\nfillColor: color['google-blue 100'],\n\nfillOpacity: 1,\n\npath: 'M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z',\n\nrotation: userDirection,\n\nscale: 2,\n\nstrokeColor: color['white 100'],\n\nstrokeWeight: 2,\n\n},\n\nposition: userLocation.current,\n\ntitle: 'You are here!',\n\n});\n\nThis code is kind of ugly. So instead I define a variable called flightIcon to store the SVG data:\n\nconst flightIcon = {\n\nheight: 24,\n\npath: 'M21 16v-2l-8-5V3.5c0-.83-.67-1.5-1.5-1.5S10 2.67 10 3.5V9l-8 5v2l8-2.5V19l-2 1.5V22l3.5-1 3.5 1v-1.5L13 19v-5.5l8 2.5z',\n\nwidth: 24,\n\n};\n\nThen refactor the above code as follows:\n\nmarker.current = new google.maps.Marker({\n\nicon: {\n\nanchor: new google.maps.Point(\n\nflightIcon.width/2, flightIcon.height/2 // REVISED\n\n),\n\nfillColor: color['google-blue 100'],\n\nfillOpacity: 1,\n\npath: flightIcon.path, // REVISED\n\nrotation: userDirection,\n\nscale: 2,\n\nstrokeColor: color['white 100'],\n\nstrokeWeight: 2,\n\n},\n\nposition: userLocation.current,\n\ntitle: 'You are here!',\n\n});\n\nDemo\n\nWith all the pieces of code in this article put together, My Ideal Map App (a web app I’m making) can now track the user’s location as shown in this GIF image:\n\nYou can also see a demo via Cloudflare Pages. Press the airplane take-off icon at bottom-right. You’ll be prompted to permit the website to use your location data. If you press “Allow”, you’ll see your location on the map within a few seconds. If not, submit a bug report by posting a comment to this article. Thank you! :-)\n\nNext step\n\nWhen asked to permit the app to use your location data, you can press “Don’t Allow”. In this case, you’ll see an error dialog, explaining what happens. Currently, this dialog is not formatted at all. I need to choose fonts and all the typography parameters such as line height.\n\nChangelog\n\nNov 5, 2021 (v1.0.1): Fix a typo.\n\nReferences\n\nMDN Contributors (2021) “GeolocationCoordinates.heading”, MDN Web Docs, Sep 15, 2021 (last updated)."
    }
}