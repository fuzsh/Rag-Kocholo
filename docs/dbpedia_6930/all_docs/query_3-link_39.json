{
    "id": "dbpedia_6930_3",
    "rank": 39,
    "data": {
        "url": "https://kubernetes.io/docs/setup/best-practices/certificates/",
        "read_more_link": "",
        "language": "en",
        "title": "PKI certificates and requirements",
        "top_image": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "meta_img": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "images": [
            "https://kubernetes.io/images/announcements/kubecon-china-2024-white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-11-10T14:27:38+02:00",
        "summary": "",
        "meta_description": "Kubernetes requires PKI certificates for authentication over TLS. If you install Kubernetes with kubeadm, the certificates that your cluster requires are automatically generated. You can also generate your own certificates -- for example, to keep your private keys more secure by not storing them on the API server. This page explains the certificates that your cluster requires.\nHow certificates are used by your cluster Kubernetes requires PKI for the following operations:",
        "meta_lang": "en",
        "meta_favicon": "/images/kubernetes.png",
        "meta_site_name": "",
        "canonical_link": "https://kubernetes.io/docs/setup/best-practices/certificates/",
        "text": "Kubernetes requires PKI certificates for authentication over TLS. If you install Kubernetes with kubeadm, the certificates that your cluster requires are automatically generated. You can also generate your own certificates -- for example, to keep your private keys more secure by not storing them on the API server. This page explains the certificates that your cluster requires.\n\nHow certificates are used by your cluster\n\nKubernetes requires PKI for the following operations:\n\nClient certificates for the kubelet to authenticate to the API server\n\nKubelet server certificates for the API server to talk to the kubelets\n\nServer certificate for the API server endpoint\n\nClient certificates for administrators of the cluster to authenticate to the API server\n\nClient certificates for the API server to talk to the kubelets\n\nClient certificate for the API server to talk to etcd\n\nClient certificate/kubeconfig for the controller manager to talk to the API server\n\nClient certificate/kubeconfig for the scheduler to talk to the API server.\n\nClient and server certificates for the front-proxy\n\nNote:\n\nfront-proxy certificates are required only if you run kube-proxy to support an extension API server.\n\netcd also implements mutual TLS to authenticate clients and peers.\n\nWhere certificates are stored\n\nIf you install Kubernetes with kubeadm, most certificates are stored in /etc/kubernetes/pki. All paths in this documentation are relative to that directory, with the exception of user account certificates which kubeadm places in /etc/kubernetes.\n\nConfigure certificates manually\n\nIf you don't want kubeadm to generate the required certificates, you can create them using a single root CA or by providing all certificates. See Certificates for details on creating your own certificate authority. See Certificate Management with kubeadm for more on managing certificates.\n\nSingle root CA\n\nYou can create a single root CA, controlled by an administrator. This root CA can then create multiple intermediate CAs, and delegate all further creation to Kubernetes itself.\n\nRequired CAs:\n\npathDefault CNdescriptionca.crt,keykubernetes-caKubernetes general CAetcd/ca.crt,keyetcd-caFor all etcd-related functionsfront-proxy-ca.crt,keykubernetes-front-proxy-caFor the front-end proxy\n\nOn top of the above CAs, it is also necessary to get a public/private key pair for service account management, sa.key and sa.pub. The following example illustrates the CA key and certificate files shown in the previous table:\n\n/etc/kubernetes/pki/ca.crt /etc/kubernetes/pki/ca.key /etc/kubernetes/pki/etcd/ca.crt /etc/kubernetes/pki/etcd/ca.key /etc/kubernetes/pki/front-proxy-ca.crt /etc/kubernetes/pki/front-proxy-ca.key\n\nAll certificates\n\nIf you don't wish to copy the CA private keys to your cluster, you can generate all certificates yourself.\n\nRequired certificates:\n\nDefault CNParent CAO (in Subject)kindhosts (SAN)kube-etcdetcd-caserver, client<hostname>, <Host_IP>, localhost, 127.0.0.1kube-etcd-peeretcd-caserver, client<hostname>, <Host_IP>, localhost, 127.0.0.1kube-etcd-healthcheck-clientetcd-caclientkube-apiserver-etcd-clientetcd-caclientkube-apiserverkubernetes-caserver<hostname>, <Host_IP>, <advertise_IP>, [1]kube-apiserver-kubelet-clientkubernetes-casystem:mastersclientfront-proxy-clientkubernetes-front-proxy-caclient\n\nNote:\n\nInstead of using the super-user group system:masters for kube-apiserver-kubelet-client a less privileged group can be used. kubeadm uses the kubeadm:cluster-admins group for that purpose.\n\n[1]: any other IP or DNS name you contact your cluster on (as used by kubeadm the load balancer stable IP and/or DNS name, kubernetes, kubernetes.default, kubernetes.default.svc, kubernetes.default.svc.cluster, kubernetes.default.svc.cluster.local)\n\nwhere kind maps to one or more of the x509 key usage, which is also documented in the .spec.usages of a CertificateSigningRequest type:\n\nkindKey usageserverdigital signature, key encipherment, server authclientdigital signature, key encipherment, client auth\n\nNote:\n\nHosts/SAN listed above are the recommended ones for getting a working cluster; if required by a specific setup, it is possible to add additional SANs on all the server certificates.\n\nCertificate paths\n\nCertificates should be placed in a recommended path (as used by kubeadm). Paths should be specified using the given argument regardless of location.\n\nDefault CNrecommended key pathrecommended cert pathcommandkey argumentcert argumentetcd-caetcd/ca.keyetcd/ca.crtkube-apiserver--etcd-cafilekube-apiserver-etcd-clientapiserver-etcd-client.keyapiserver-etcd-client.crtkube-apiserver--etcd-keyfile--etcd-certfilekubernetes-caca.keyca.crtkube-apiserver--client-ca-filekubernetes-caca.keyca.crtkube-controller-manager--cluster-signing-key-file--client-ca-file, --root-ca-file, --cluster-signing-cert-filekube-apiserverapiserver.keyapiserver.crtkube-apiserver--tls-private-key-file--tls-cert-filekube-apiserver-kubelet-clientapiserver-kubelet-client.keyapiserver-kubelet-client.crtkube-apiserver--kubelet-client-key--kubelet-client-certificatefront-proxy-cafront-proxy-ca.keyfront-proxy-ca.crtkube-apiserver--requestheader-client-ca-filefront-proxy-cafront-proxy-ca.keyfront-proxy-ca.crtkube-controller-manager--requestheader-client-ca-filefront-proxy-clientfront-proxy-client.keyfront-proxy-client.crtkube-apiserver--proxy-client-key-file--proxy-client-cert-fileetcd-caetcd/ca.keyetcd/ca.crtetcd--trusted-ca-file, --peer-trusted-ca-filekube-etcdetcd/server.keyetcd/server.crtetcd--key-file--cert-filekube-etcd-peeretcd/peer.keyetcd/peer.crtetcd--peer-key-file--peer-cert-fileetcd-caetcd/ca.crtetcdctl--cacertkube-etcd-healthcheck-clientetcd/healthcheck-client.keyetcd/healthcheck-client.crtetcdctl--key--cert\n\nSame considerations apply for the service account key pair:\n\nprivate key pathpublic key pathcommandargumentsa.keykube-controller-manager--service-account-private-key-filesa.pubkube-apiserver--service-account-key-file\n\nThe following example illustrates the file paths from the previous tables you need to provide if you are generating all of your own keys and certificates:\n\n/etc/kubernetes/pki/etcd/ca.key /etc/kubernetes/pki/etcd/ca.crt /etc/kubernetes/pki/apiserver-etcd-client.key /etc/kubernetes/pki/apiserver-etcd-client.crt /etc/kubernetes/pki/ca.key /etc/kubernetes/pki/ca.crt /etc/kubernetes/pki/apiserver.key /etc/kubernetes/pki/apiserver.crt /etc/kubernetes/pki/apiserver-kubelet-client.key /etc/kubernetes/pki/apiserver-kubelet-client.crt /etc/kubernetes/pki/front-proxy-ca.key /etc/kubernetes/pki/front-proxy-ca.crt /etc/kubernetes/pki/front-proxy-client.key /etc/kubernetes/pki/front-proxy-client.crt /etc/kubernetes/pki/etcd/server.key /etc/kubernetes/pki/etcd/server.crt /etc/kubernetes/pki/etcd/peer.key /etc/kubernetes/pki/etcd/peer.crt /etc/kubernetes/pki/etcd/healthcheck-client.key /etc/kubernetes/pki/etcd/healthcheck-client.crt /etc/kubernetes/pki/sa.key /etc/kubernetes/pki/sa.pub\n\nConfigure certificates for user accounts\n\nYou must manually configure these administrator account and service accounts:\n\nfilenamecredential nameDefault CNO (in Subject)admin.confdefault-adminkubernetes-admin<admin-group>super-admin.confdefault-super-adminkubernetes-super-adminsystem:masterskubelet.confdefault-authsystem:node:<nodeName> (see note)system:nodescontroller-manager.confdefault-controller-managersystem:kube-controller-managerscheduler.confdefault-schedulersystem:kube-scheduler\n\nNote:\n\nThe value of <nodeName> for kubelet.conf must match precisely the value of the node name provided by the kubelet as it registers with the apiserver. For further details, read the Node Authorization.\n\nFor each config, generate an x509 cert/key pair with the given CN and O.\n\nRun kubectl as follows for each config:\n\nKUBECONFIG=<filename> kubectl config set-cluster default-cluster --server=https://<host ip>:6443 --certificate-authority <path-to-kubernetes-ca> --embed-certs KUBECONFIG=<filename> kubectl config set-credentials <credential-name> --client-key <path-to-key>.pem --client-certificate <path-to-cert>.pem --embed-certs KUBECONFIG=<filename> kubectl config set-context default-system --cluster default-cluster --user <credential-name> KUBECONFIG=<filename> kubectl config use-context default-system\n\nThese files are used as follows:\n\nfilenamecommandcommentadmin.confkubectlConfigures administrator user for the clustersuper-admin.confkubectlConfigures super administrator user for the clusterkubelet.confkubeletOne required for each node in the cluster.controller-manager.confkube-controller-managerMust be added to manifest in manifests/kube-controller-manager.yamlscheduler.confkube-schedulerMust be added to manifest in manifests/kube-scheduler.yaml\n\nThe following files illustrate full paths to the files listed in the previous table:"
    }
}