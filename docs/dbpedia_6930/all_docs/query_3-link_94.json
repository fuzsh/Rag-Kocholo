{
    "id": "dbpedia_6930_3",
    "rank": 94,
    "data": {
        "url": "https://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html",
        "read_more_link": "",
        "language": "en",
        "title": "Apache Tomcat 7 (7.0.109)",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://tomcat.apache.org/tomcat-7.0-doc/images/tomcat.gif",
            "https://tomcat.apache.org/tomcat-7.0-doc/images/asf-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Craig R. McClanahan"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "In many production environments, it is very useful to have the capability to deploy a new web application, or undeploy an existing one, without having to shut down and restart the entire container. In addition, you can request an existing application to reload itself, even if you have not declared it to be reloadable in the Tomcat server configuration file.\n\nTo support these capabilities, Tomcat includes a web application (installed by default on context path /manager) that supports the following functions:\n\nDeploy a new web application from the uploaded contents of a WAR file.\n\nDeploy a new web application, on a specified context path, from the server file system.\n\nList the currently deployed web applications, as well as the sessions that are currently active for those web apps.\n\nReload an existing web application, to reflect changes in the contents of /WEB-INF/classes or /WEB-INF/lib.\n\nList the OS and JVM property values.\n\nList the available global JNDI resources, for use in deployment tools that are preparing <ResourceLink> elements nested in a <Context> deployment description.\n\nStart a stopped application (thus making it available again).\n\nStop an existing application (so that it becomes unavailable), but do not undeploy it.\n\nUndeploy a deployed web application and delete its document base directory (unless it was deployed from file system).\n\nA default Tomcat installation includes an instance of the Manager application configured for the default virtual host. If you create additional virtual hosts, you may wish to add an instance of the Manager application to one or more of those Hosts. To add an instance of the Manager web application Context to a new host install the manager.xml context configuration file in the $CATALINA_BASE/conf/[enginename]/[hostname] folder. Here is an example:\n\n<Context privileged=\"true\" antiResourceLocking=\"false\" docBase=\"${catalina.home}/webapps/manager\"> <CookieProcessor className=\"org.apache.tomcat.util.http.Rfc6265CookieProcessor\" sameSiteCookies=\"strict\" /> <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /> <Manager sessionAttributeValueClassNameFilter=\"java\\.lang\\.(?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter\\$LruCache(?:\\$1)?|java\\.util\\.(?:Linked)?HashMap\"/> </Context>\n\nThere are three ways to use the Manager web application.\n\nAs an application with a user interface you use in your browser. Here is an example URL where you can replace localhost with your website host name: http://localhost:8080/manager/html .\n\nA minimal version using HTTP requests only which is suitable for use by scripts setup by system administrators. Commands are given as part of the request URI, and responses are in the form of simple text that can be easily parsed and processed. See Supported Manager Commands for more information.\n\nA convenient set of task definitions for the Ant (version 1.4 or later) build tool. See Executing Manager Commands With Ant for more information.\n\nThe description below uses the variable name $CATALINA_BASE to refer the base directory against which most relative paths are resolved. If you have not configured Tomcat for multiple instances by setting a CATALINA_BASE directory, then $CATALINA_BASE will be set to the value of $CATALINA_HOME, the directory into which you have installed Tomcat.\n\nIt would be quite unsafe to ship Tomcat with default settings that allowed anyone on the Internet to execute the Manager application on your server. Therefore, the Manager application is shipped with the requirement that anyone who attempts to use it must authenticate themselves, using a username and password that have one of manager-xxx roles associated with them (the role name depends on what functionality is required). Further, there is no username in the default users file ($CATALINA_BASE/conf/tomcat-users.xml) that is assigned to those roles. Therefore, access to the Manager application is completely disabled by default.\n\nYou can find the role names in the web.xml file of the Manager web application. The available roles are:\n\nmanager-gui — Access to the HTML interface.\n\nmanager-status — Access to the \"Server Status\" page only.\n\nmanager-script — Access to the tools-friendly plain text interface that is described in this document, and to the \"Server Status\" page.\n\nmanager-jmx — Access to JMX proxy interface and to the \"Server Status\" page.\n\nThe HTML interface is protected against CSRF (Cross-Site Request Forgery) attacks, but the text and JMX interfaces cannot be protected. It means that users who are allowed access to the text and JMX interfaces have to be cautious when accessing the Manager application with a web browser. To maintain the CSRF protection:\n\nIf you use web browser to access the Manager application using a user that has either manager-script or manager-jmx roles (for example for testing the plain text or JMX interfaces), you MUST close all windows of the browser afterwards to terminate the session. If you do not close the browser and visit other sites, you may become victim of a CSRF attack.\n\nIt is recommended to never grant the manager-script or manager-jmx roles to users that have the manager-gui role.\n\nNote that JMX proxy interface is effectively low-level root-like administrative interface of Tomcat. One can do a lot, if he knows what commands to call. You should be cautious when enabling the manager-jmx role.\n\nTo enable access to the Manager web application, you must either create a new username/password combination and associate one of the manager-xxx roles with it, or add a manager-xxx role to some existing username/password combination. As the majority of this document describes the using the text interface, this example will use the role name manager-script. Exactly how the usernames/passwords are configured depends on which Realm implementation you are using:\n\nUserDatabaseRealm plus MemoryUserDatabase, or MemoryRealm — The UserDatabaseRealm and MemoryUserDatabase are configured in the default $CATALINA_BASE/conf/server.xml. Both MemoryUserDatabase and MemoryRealm read an XML-format file by default stored at $CATALINA_BASE/conf/tomcat-users.xml, which can be edited with any text editor. This file contains an XML <user> for each individual user, which might look something like this:\n\n<user username=\"craigmcc\" password=\"secret\" roles=\"standard,manager-script\" />\n\nwhich defines the username and password used by this individual to log on, and the role names he or she is associated with. You can add the manager-script role to the comma-delimited roles attribute for one or more existing users, and/or create new users with that assigned role.\n\nDataSourceRealm or JDBCRealm — Your user and role information is stored in a database accessed via JDBC. Add the manager-script role to one or more existing users, and/or create one or more new users with this role assigned, following the standard procedures for your environment.\n\nJNDIRealm — Your user and role information is stored in a directory server accessed via LDAP. Add the manager-script role to one or more existing users, and/or create one or more new users with this role assigned, following the standard procedures for your environment.\n\nThe first time you attempt to issue one of the Manager commands described in the next section, you will be challenged to log on using BASIC authentication. The username and password you enter do not matter, as long as they identify a valid user in the users database who possesses the role manager-script.\n\nIn addition to the password restrictions, access to the Manager web application can be restricted by the remote IP address or host by adding a RemoteAddrValve or RemoteHostValve. See valves documentation for details. Here is an example of restricting access to the localhost by IP address:\n\n<Context privileged=\"true\"> <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\\.0\\.0\\.1\"/> </Context>\n\nIn addition to the ability to execute Manager commands via HTTP requests, as documented above, Tomcat includes a convenient set of Task definitions for the Ant (version 1.4 or later) build tool. In order to use these commands, you must perform the following setup operations:\n\nDownload the binary distribution of Ant from https://ant.apache.org. You must use version 1.4 or later.\n\nInstall the Ant distribution in a convenient directory (called ANT_HOME in the remainder of these instructions).\n\nAdd the $ANT_HOME/bin directory to your PATH environment variable.\n\nConfigure at least one username/password combination in your Tomcat user database that includes the manager-script role.\n\nTo use custom tasks within Ant, you must declare them first with an <import> element. Therefore, your build.xml file might look something like this:\n\n<project name=\"My Application\" default=\"compile\" basedir=\".\"> <!-- Configure the directory into which the web application is built --> <property name=\"build\" value=\"${basedir}/build\"/> <!-- Configure the context path for this application --> <property name=\"path\" value=\"/myapp\"/> <!-- Configure properties to access the Manager application --> <property name=\"url\" value=\"http://localhost:8080/manager/text\"/> <property name=\"username\" value=\"myusername\"/> <property name=\"password\" value=\"mypassword\"/> <!-- Configure the path to the Tomcat installation --> <property name=\"catalina.home\" value=\"/usr/local/apache-tomcat\"/> <!-- Configure the custom Ant tasks for the Manager application --> <import file=\"${catalina.home}/bin/catalina-tasks.xml\"/> <!-- Executable Targets --> <target name=\"compile\" description=\"Compile web application\"> <!-- ... construct web application in ${build} subdirectory, and generated a ${path}.war ... --> </target> <target name=\"deploy\" description=\"Install web application\" depends=\"compile\"> <deploy url=\"${url}\" username=\"${username}\" password=\"${password}\" path=\"${path}\" war=\"file:${build}${path}.war\"/> </target> <target name=\"reload\" description=\"Reload web application\" depends=\"compile\"> <reload url=\"${url}\" username=\"${username}\" password=\"${password}\" path=\"${path}\"/> </target> <target name=\"undeploy\" description=\"Remove web application\"> <undeploy url=\"${url}\" username=\"${username}\" password=\"${password}\" path=\"${path}\"/> </target> </project>\n\nNote: The definition of the resources task via the import above will override the resources datatype added in Ant 1.7. If you wish to use the resources datatype you will need to use Ant's namespace support to modify catalina-tasks.xml to assign the Tomcat tasks to their own namespace.\n\nNow, you can execute commands like ant deploy to deploy the application to a running instance of Tomcat, or ant reload to tell Tomcat to reload it. Note also that most of the interesting values in this build.xml file are defined as replaceable properties, so you can override their values from the command line. For example, you might consider it a security risk to include the real manager password in your build.xml file's source code. To avoid this, omit the password property, and specify it from the command line:\n\nant -Dpassword=secret deploy\n\nTasks output capture\n\nUsing Ant version 1.6.2 or later, the Catalina tasks offer the option to capture their output in properties or external files. They support directly the following subset of the <redirector> type attributes:\n\nAttribute Description Required output Name of a file to which to write the output. If the error stream is not also redirected to a file or property, it will appear in this output. No error The file to which the standard error of the command should be redirected. No logError This attribute is used when you wish to see error output in Ant's log and you are redirecting output to a file/property. The error output will not be included in the output file/property. If you redirect error with the error or errorProperty attributes, this will have no effect. No append Whether output and error files should be appended to or overwritten. Defaults to false. No createemptyfiles Whether output and error files should be created even when empty. Defaults to true. No outputproperty The name of a property in which the output of the command should be stored. Unless the error stream is redirected to a separate file or stream, this property will include the error output. No errorproperty The name of a property in which the standard error of the command should be stored. No\n\nA couple of additional attributes can also be specified:\n\nAttribute Description Required alwaysLog This attribute is used when you wish to see the output you are capturing, appearing also in the Ant's log. It must not be used unless you are capturing task output. Defaults to false. This attribute will be supported directly by <redirector> in Ant 1.6.3 No failonerror This attribute is used when you wish to avoid that any manager command processing error terminates the ant execution. Defaults to true. It must be set to false, if you want to capture error output, otherwise execution will terminate before anything can be captured.\n\nThis attribute acts only on manager command execution, any wrong or missing command attribute will still cause Ant execution termination. No\n\nThey also support the embedded <redirector> element in which you can specify its full set of attributes, but input, inputstring and inputencoding that, even if accepted, are not used because they have no meaning in this context. Refer to ant manual for details on <redirector> element attributes.\n\nHere is a sample build file extract that shows how this output redirection support can be used:\n\n<target name=\"manager.deploy\" depends=\"context.status\" if=\"context.notInstalled\"> <deploy url=\"${mgr.url}\" username=\"${mgr.username}\" password=\"${mgr.password}\" path=\"${mgr.context.path}\" config=\"${mgr.context.descriptor}\"/> </target> <target name=\"manager.deploy.war\" depends=\"context.status\" if=\"context.deployable\"> <deploy url=\"${mgr.url}\" username=\"${mgr.username}\" password=\"${mgr.password}\" update=\"${mgr.update}\" path=\"${mgr.context.path}\" war=\"${mgr.war.file}\"/> </target> <target name=\"context.status\"> <property name=\"running\" value=\"${mgr.context.path}:running\"/> <property name=\"stopped\" value=\"${mgr.context.path}:stopped\"/> <list url=\"${mgr.url}\" outputproperty=\"ctx.status\" username=\"${mgr.username}\" password=\"${mgr.password}\"> </list> <condition property=\"context.running\"> <contains string=\"${ctx.status}\" substring=\"${running}\"/> </condition> <condition property=\"context.stopped\"> <contains string=\"${ctx.status}\" substring=\"${stopped}\"/> </condition> <condition property=\"context.notInstalled\"> <and> <isfalse value=\"${context.running}\"/> <isfalse value=\"${context.stopped}\"/> </and> </condition> <condition property=\"context.deployable\"> <or> <istrue value=\"${context.notInstalled}\"/> <and> <istrue value=\"${context.running}\"/> <istrue value=\"${mgr.update}\"/> </and> <and> <istrue value=\"${context.stopped}\"/> <istrue value=\"${mgr.update}\"/> </and> </or> </condition> <condition property=\"context.undeployable\"> <or> <istrue value=\"${context.running}\"/> <istrue value=\"${context.stopped}\"/> </or> </condition> </target>\n\nWARNING: even if it doesn't make many sense, and is always a bad idea, calling a Catalina task more than once, badly set Ant tasks depends chains may cause that a task be called more than once in the same Ant run, even if not intended to. A bit of caution should be exercised when you are capturing output from that task, because this could lead to something unexpected:\n\nwhen capturing in a property you will find in it only the output from the first call, because Ant properties are immutable and once set they cannot be changed,\n\nwhen capturing in a file, each run will overwrite it and you will find in it only the last call output, unless you are using the append=\"true\" attribute, in which case you will see the output of each task call appended to the file."
    }
}