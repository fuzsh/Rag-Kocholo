{
    "id": "dbpedia_4825_3",
    "rank": 67,
    "data": {
        "url": "https://neo4j.com/docs/cypher-manual/current/queries/basic/",
        "read_more_link": "",
        "language": "en",
        "title": "Basic queries",
        "top_image": "https://dist.neo4j.com/wp-content/uploads/20210423062553/neo4j-social-share-21.png",
        "meta_img": "https://dist.neo4j.com/wp-content/uploads/20210423062553/neo4j-social-share-21.png",
        "images": [
            "https://dist.neo4j.com/wp-content/uploads/20230926084108/Logo_FullColor_RGB_TransBG.svg",
            "https://neo4j.com/docs/cypher-manual/current/_images/introduction_schema.svg",
            "https://neo4j.com/docs/cypher-manual/current/_images/introduction_example1.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This section provides an overview of some basic Cypher queries using the Neo4j movie database.",
        "meta_lang": "en",
        "meta_favicon": "https://neo4j.com/wp-content/themes/neo4jweb/favicon.ico",
        "meta_site_name": "Neo4j Graph Data Platform",
        "canonical_link": "https://neo4j.com/docs/cypher-manual/5/queries/basic/",
        "text": "This page contains information about how to create, query, and delete a graph database using CypherÂ®. For more advanced queries, see the section on Subqueries.\n\nBefore creating a property graph database, it is important to develop an appropriate data model. This will provide structure to the data, and allow users of the graph to efficiently retrieve the information they are looking for.\n\nThe data model also contains five different relationship types between the Person and Movie nodes: ACTED_IN, DIRECTED, PRODUCED, WROTE, and REVIEWED. Two of the relationship types have properties:\n\nTo learn more about data modelling for graph databases, enroll in the free Graph Data Modelling Fundamentals course offered by GraphAcademy.\n\nThe complete Cypher query to create the Neo4j movie database, can be found here. To create the full graph, run the full query against an empty Neo4j database.\n\nThe MATCH clause is used to find a specific pattern in the graph, such as a specific node. The RETURN clause specifies what of the found graph pattern to return.\n\nFor example, this query will find the nodes with Person label and the name Keanu Reeves, and return the name and born properties of the found nodes:\n\nIt is also possible to query a graph for several nodes. This query matches all nodes with the Person label, and limits the results to only include five rows.\n\nSimilar to SQL, Cypher queries are constructed using various clauses which are chained together to feed intermediate results between each other. Each clause has as input the state of the graph and a table of intermediate results consisting of the referenced variables. The first clause takes as input the state of the graph before the query and an empty table of intermediate results. The output of a clause is a new state of the graph and a new table of intermediate results, serving as input to the next clause. The output of the last clause is the result of the query.\n\nNote that if one of the clauses returns an empty table of intermediate results, there is nothing to pass on to subsequent clauses, thus ending the query. (There are ways to circumvent this behaviour. For example, by replacing a MATCH clause with OPTIONAL MATCH.)\n\nIn the below example, the first MATCH clause finds all nodes with the Person label. The second clause will then filter those nodes to find all Person nodes who were born in the 1980s. The final clause returns the result in a descending chronological order.\n\nTo discover how nodes are connected to one another, relationships must be added to queries. Queries can specify relationship types, properties, and direction, as well as the start and end nodes of the pattern.\n\nFor example, the following query matches the graph for the director of the movie the Matrix, and returns the name property of its directors.\n\nIt also possible to look for the type of relationships that connect nodes to one another. The below query searches the graph for outgoing relationships from the Tom Hanks node to any Movie nodes, and returns the relationships and the titles of the movies connected to him.\n\nThe result shows that he has 13 outgoing relationships connected to 12 different Movie nodes (12 have the ACTED_IN type and one has the DIRECTED type).\n\nIt is possible to further modify Cypher queries by adding label expressions to the clauses. For example, the below query uses a NOT label expression (!) to return all relationships connected to Tom Hanks that are not of type ACTED_IN.\n\nFor more information about the different label expressions supported by Cypher, see the section on label expressions.\n\nThere are several ways in which Cypher can be used to search a graph for paths between nodes.\n\nTo search for patterns of a fixed length, specify the distance (hops) between the nodes in the pattern by using a quantifier ({n}). For example, the following query matches all Person nodes exactly 2 hops away from Tom Hanks and returns the first five rows. The DISTINCT operator ensures that the result contain no duplicate values.\n\nIt is also possible to match a graph for patterns of a variable length. The below query matches all Person nodes between 1 and 4 hops away from Tom Hanks and returns the first five rows.\n\nThe SHORTEST keyword can be used to find a variation of the shortest paths between two nodes. In this example, ALL SHORTEST paths between the two nodes Keanu Reeves and Tom Cruise are found. The count() function calculates the number of these shortest paths while the length() function calculates the length of each path in terms of traversed relationships.\n\nThe results show that 2 different paths are tied for the shortest length.\n\nCypher allows for more complex queries. The following query tries to recommend co-actors for Keanu Reeves, who he has yet to work with but who his co-actors have worked with. The query then orders the results by how frequently a matched co-co-actor has collaborated with one of Keanu Reeves' co-actors.\n\nThere are several connections between the Keanu Reeves and Tom Hanks nodes in the movie database, but the two have never worked together in a film. The following query matches coactors who could introduce the two, by looking for co-actors who have worked with both of them in separate movies:\n\nTo delete all nodes and relationships in a graph, run the following query:\n\nFor more information, see the section on the DELETE clause."
    }
}