{
    "id": "dbpedia_6509_2",
    "rank": 48,
    "data": {
        "url": "https://stackoverflow.com/questions/10997577/python-timezone-conversion",
        "read_more_link": "",
        "language": "en",
        "title": "Python Timezone conversion",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/be8Y6.jpg?s=64",
            "https://www.gravatar.com/avatar/73aad53855be39b22873f681f4b8e4f0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6c88fea0b9b4abf2640a3588037ac4a8?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://graph.facebook.com/1851049167/picture?type=large",
            "https://i.sstatic.net/vP0ug.jpg?s=64",
            "https://i.sstatic.net/4nedy.jpg?s=64",
            "https://i.sstatic.net/RoPPo.jpg?s=64",
            "https://lh3.googleusercontent.com/a-/AAuE7mCgi0eNzryIsd9cN4vtXpYo2VZWrK3bnAt-uNMe=k-s64",
            "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/XEC8x.jpg?s=64",
            "https://i.sstatic.net/27eJi.jpg?s=64",
            "https://www.gravatar.com/avatar/1fa52405ebda49d8a7ec669b56bbf77e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh3.googleusercontent.com/-Sgtw-0uAYDs/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckCaKDgbZq8dZ2IMOfw5axCcXFFQQ/photo.jpg?sz=64",
            "https://stackoverflow.com/posts/10997577/ivc/fd19?prg=40cd19f7-ec19-46a0-b074-6c93690f6562"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-06-12T13:20:38",
        "summary": "",
        "meta_description": "How do I convert a time to another timezone in Python?",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/10997577/python-timezone-conversion",
        "text": "I have found that the best approach is to convert the \"moment\" of interest to a utc-timezone-aware datetime object (in python, the timezone component is not required for datetime objects).\n\nThen you can use astimezone to convert to the timezone of interest (reference).\n\nfrom datetime import datetime import pytz utcmoment_naive = datetime.utcnow() utcmoment = utcmoment_naive.replace(tzinfo=pytz.utc) # print \"utcmoment_naive: {0}\".format(utcmoment_naive) # python 2 print(\"utcmoment_naive: {0}\".format(utcmoment_naive)) print(\"utcmoment: {0}\".format(utcmoment)) localFormat = \"%Y-%m-%d %H:%M:%S\" timezones = ['America/Los_Angeles', 'Europe/Madrid', 'America/Puerto_Rico'] for tz in timezones: localDatetime = utcmoment.astimezone(pytz.timezone(tz)) print(localDatetime.strftime(localFormat)) # utcmoment_naive: 2017-05-11 17:43:30.802644 # utcmoment: 2017-05-11 17:43:30.802644+00:00 # 2017-05-11 10:43:30 # 2017-05-11 19:43:30 # 2017-05-11 13:43:30\n\nSo, with the moment of interest in the local timezone (a time that exists), you convert it to utc like this (reference).\n\nlocalmoment_naive = datetime.strptime('2013-09-06 14:05:10', localFormat) localtimezone = pytz.timezone('Australia/Adelaide') try: localmoment = localtimezone.localize(localmoment_naive, is_dst=None) print(\"Time exists\") utcmoment = localmoment.astimezone(pytz.utc) except pytz.exceptions.NonExistentTimeError as e: print(\"NonExistentTimeError\")\n\nPython 3.9 adds the zoneinfo module so now only the the standard library is needed!\n\n>>> from zoneinfo import ZoneInfo >>> from datetime import datetime >>> d = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo('America/Los_Angeles')) >>> d.astimezone(ZoneInfo('Europe/Berlin')) # 12:00 in Cali will be 20:00 in Berlin datetime.datetime(2020, 10, 31, 20, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/Berlin'))\n\nWikipedia list of available time zones\n\nSome functions such as now() and utcnow() return timezone-unaware datetimes, meaning they contain no timezone information. I recommend only requesting timezone-aware values from them using the keyword tz=ZoneInfo('localtime').\n\nIf astimezone gets a timezone-unaware input, it will assume it is local time, which can lead to errors:\n\n>>> datetime.utcnow() # UTC -- NOT timezone-aware!! datetime.datetime(2020, 6, 1, 22, 39, 57, 376479) >>> datetime.now() # Local time -- NOT timezone-aware!! datetime.datetime(2020, 6, 2, 0, 39, 57, 376675) >>> datetime.now(tz=ZoneInfo('localtime')) # timezone-aware datetime.datetime(2020, 6, 2, 0, 39, 57, 376806, tzinfo=zoneinfo.ZoneInfo(key='localtime')) >>> datetime.now(tz=ZoneInfo('Europe/Berlin')) # timezone-aware datetime.datetime(2020, 6, 2, 0, 39, 57, 376937, tzinfo=zoneinfo.ZoneInfo(key='Europe/Berlin')) >>> datetime.utcnow().astimezone(ZoneInfo('Europe/Berlin')) # WRONG!! datetime.datetime(2020, 6, 1, 22, 39, 57, 377562, tzinfo=zoneinfo.ZoneInfo(key='Europe/Berlin'))\n\nWindows has no system time zone database, so here an extra package is needed:\n\npip install tzdata\n\nThere is a backport to allow use in Python 3.6 to 3.8:\n\nsudo pip install backports.zoneinfo\n\nThen:\n\nfrom backports.zoneinfo import ZoneInfo\n\nTo convert a time in one timezone to another timezone in Python, you could use datetime.astimezone():\n\ntime_in_new_timezone = time_in_old_timezone.astimezone(new_timezone)\n\nGiven aware_dt (a datetime object in some timezone), to convert it to other timezones and to print the times in a given time format:\n\n#!/usr/bin/env python3 import pytz # $ pip install pytz time_format = \"%Y-%m-%d %H:%M:%S%z\" tzids = ['Asia/Shanghai', 'Europe/London', 'America/New_York'] for tz in map(pytz.timezone, tzids): time_in_tz = aware_dt.astimezone(tz) print(f\"{time_in_tz:{time_format}}\")\n\nIf f\"\" syntax is unavailable, you could replace it with \"\".format(**vars())\n\nwhere you could set aware_dt from the current time in the local timezone:\n\nfrom datetime import datetime import tzlocal # $ pip install tzlocal local_timezone = tzlocal.get_localzone() aware_dt = datetime.now(local_timezone) # the current time\n\nOr from the input time string in the local timezone:\n\nnaive_dt = datetime.strptime(time_string, time_format) aware_dt = local_timezone.localize(naive_dt, is_dst=None)\n\nwhere time_string could look like: '2016-11-19 02:21:42'. It corresponds to time_format = '%Y-%m-%d %H:%M:%S'.\n\nis_dst=None forces an exception if the input time string corresponds to a non-existing or ambiguous local time such as during a DST transition. You could also pass is_dst=False, is_dst=True. See links with more details at Python: How do you convert datetime/timestamp from one timezone to another timezone?\n\nPlease note: The first part of this answer is or version 1.x of pendulum. See below for a version 2.x answer.\n\nI hope I'm not too late!\n\nThe pendulum library excels at this and other date-time calculations.\n\n>>> import pendulum >>> some_time_zones = ['Europe/Paris', 'Europe/Moscow', 'America/Toronto', 'UTC', 'Canada/Pacific', 'Asia/Macao'] >>> heres_a_time = '1996-03-25 12:03 -0400' >>> pendulum_time = pendulum.datetime.strptime(heres_a_time, '%Y-%m-%d %H:%M %z') >>> for tz in some_time_zones: ... tz, pendulum_time.astimezone(tz) ... ('Europe/Paris', <Pendulum [1996-03-25T17:03:00+01:00]>) ('Europe/Moscow', <Pendulum [1996-03-25T19:03:00+03:00]>) ('America/Toronto', <Pendulum [1996-03-25T11:03:00-05:00]>) ('UTC', <Pendulum [1996-03-25T16:03:00+00:00]>) ('Canada/Pacific', <Pendulum [1996-03-25T08:03:00-08:00]>) ('Asia/Macao', <Pendulum [1996-03-26T00:03:00+08:00]>)\n\nAnswer lists the names of the time zones that may be used with pendulum. (They're the same as for pytz.)\n\nFor version 2:\n\nsome_time_zones is a list of the names of the time zones that might be used in a program\n\nheres_a_time is a sample time, complete with a time zone in the form '-0400'\n\nI begin by converting the time to a pendulum time for subsequent processing\n\nnow I can show what this time is in each of the time zones in show_time_zones\n\n...\n\n>>> import pendulum >>> some_time_zones = ['Europe/Paris', 'Europe/Moscow', 'America/Toronto', 'UTC', 'Canada/Pacific', 'Asia/Macao'] >>> heres_a_time = '1996-03-25 12:03 -0400' >>> pendulum_time = pendulum.from_format('1996-03-25 12:03 -0400', 'YYYY-MM-DD hh:mm ZZ') >>> for tz in some_time_zones: ... tz, pendulum_time.in_tz(tz) ... ('Europe/Paris', DateTime(1996, 3, 25, 17, 3, 0, tzinfo=Timezone('Europe/Paris'))) ('Europe/Moscow', DateTime(1996, 3, 25, 19, 3, 0, tzinfo=Timezone('Europe/Moscow'))) ('America/Toronto', DateTime(1996, 3, 25, 11, 3, 0, tzinfo=Timezone('America/Toronto'))) ('UTC', DateTime(1996, 3, 25, 16, 3, 0, tzinfo=Timezone('UTC'))) ('Canada/Pacific', DateTime(1996, 3, 25, 8, 3, 0, tzinfo=Timezone('Canada/Pacific'))) ('Asia/Macao', DateTime(1996, 3, 26, 0, 3, 0, tzinfo=Timezone('Asia/Macao')))"
    }
}