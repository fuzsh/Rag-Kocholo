{
    "id": "dbpedia_987_2",
    "rank": 16,
    "data": {
        "url": "https://docs.godotengine.org/en/stable/tutorials/scripting/resources.html",
        "read_more_link": "",
        "language": "en",
        "title": "Resources",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.godotengine.org/en/stable/_static/docs_logo.svg",
            "https://docs.godotengine.org/en/stable/_images/nodes_resources.webp",
            "https://docs.godotengine.org/en/stable/_images/spriteprop.webp",
            "https://docs.godotengine.org/en/stable/_images/resourcerobi.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Nodes and resources: Up to this tutorial, we focused on the Node class in Godot as that's the one you use to code behavior and most of the engine's features rely on it. There is another datatype th...",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Godot Engine documentation",
        "canonical_link": "https://docs.godotengine.org/en/stable/tutorials/scripting/resources.html",
        "text": "Nodes and resources¶\n\nUp to this tutorial, we focused on the Node class in Godot as that's the one you use to code behavior and most of the engine's features rely on it. There is another datatype that is just as important: Resource.\n\nNodes give you functionality: they draw sprites, 3D models, simulate physics, arrange user interfaces, etc. Resources are data containers. They don't do anything on their own: instead, nodes use the data contained in resources.\n\nAnything Godot saves or loads from disk is a resource. Be it a scene (a .tscn or an .scn file), an image, a script... Here are some Resource examples:\n\nTexture\n\nScript\n\nMesh\n\nAnimation\n\nAudioStream\n\nFont\n\nTranslation\n\nWhen the engine loads a resource from disk, it only loads it once. If a copy of that resource is already in memory, trying to load the resource again will return the same copy every time. As resources only contain data, there is no need to duplicate them.\n\nEvery object, be it a Node or a Resource, can export properties. There are many types of Properties, like String, integer, Vector2, etc., and any of these types can become a resource. This means that both nodes and resources can contain resources as properties:\n\nExternal vs built-in¶\n\nThere are two ways to save resources. They can be:\n\nExternal to a scene, saved on the disk as individual files.\n\nBuilt-in, saved inside the .tscn or the .scn file they're attached to.\n\nTo be more specific, here's a Texture2D in a Sprite2D node:\n\nClicking the resource preview allows us to view the resource's properties.\n\nThe path property tells us where the resource comes from. In this case, it comes from a PNG image called robi.png. When the resource comes from a file like this, it is an external resource. If you erase the path or this path is empty, it becomes a built-in resource.\n\nThe switch between built-in and external resources happens when you save the scene. In the example above, if you erase the path \"res://robi.png\" and save, Godot will save the image inside the .tscn scene file.\n\nNote\n\nEven if you save a built-in resource, when you instance a scene multiple times, the engine will only load one copy of it.\n\nCreating your own resources¶\n\nLike any Object in Godot, users can also script Resources. Resource scripts inherit the ability to freely translate between object properties and serialized text or binary data (*.tres, *.res). They also inherit the reference-counting memory management from the RefCounted type.\n\nThis comes with many distinct advantages over alternative data structures, such as JSON, CSV, or custom TXT files. Users can only import these assets as a Dictionary (JSON) or as a FileAccess to parse. What sets Resources apart is their inheritance of Object, RefCounted, and Resource features:\n\nThey can define constants, so constants from other data fields or objects are not needed.\n\nThey can define methods, including setter/getter methods for properties. This allows for abstraction and encapsulation of the underlying data. If the Resource script's structure needs to change, the game using the Resource need not also change.\n\nThey can define signals, so Resources can trigger responses to changes in the data they manage.\n\nThey have defined properties, so users know 100% that their data will exist.\n\nResource auto-serialization and deserialization is a built-in Godot Engine feature. Users do not need to implement custom logic to import/export a resource file's data.\n\nResources can even serialize sub-Resources recursively, meaning users can design even more sophisticated data structures.\n\nUsers can save Resources as version-control-friendly text files (*.tres). Upon exporting a game, Godot serializes resource files as binary files (*.res) for increased speed and compression.\n\nGodot Engine's Inspector renders and edits Resource files out-of-the-box. As such, users often do not need to implement custom logic to visualize or edit their data. To do so, double-click the resource file in the FileSystem dock or click the folder icon in the Inspector and open the file in the dialog.\n\nThey can extend other resource types besides just the base Resource.\n\nGodot makes it easy to create custom Resources in the Inspector.\n\nCreate a plain Resource object in the Inspector. This can even be a type that derives Resource, so long as your script is extending that type.\n\nSet the script property in the Inspector to be your script.\n\nThe Inspector will now display your Resource script's custom properties. If one edits those values and saves the resource, the Inspector serializes the custom properties too! To save a resource from the Inspector, click the Inspector's tools menu (top right), and select \"Save\" or \"Save As...\".\n\nIf the script's language supports script classes, then it streamlines the process. Defining a name for your script alone will add it to the Inspector's creation dialog. This will auto-add your script to the Resource object you create.\n\nLet's see some examples. Create a Resource and name it bot_stats. It should appear in your file tab with the full name bot_stats.tres. Without a script, it's useless, so let's add some data and logic! Attach a script to it named bot_stats.gd (or just create a new script, and then drag it to it).\n\nextendsResource @exportvarhealth:int @exportvarsub_resource:Resource @exportvarstrings:PackedStringArray # Make sure that every parameter has a default value. # Otherwise, there will be problems with creating and editing # your resource via the inspector. func_init(p_health=0,p_sub_resource=null,p_strings=[]): health=p_health sub_resource=p_sub_resource strings=p_strings\n\n// BotStats.cs usingGodot; namespaceExampleProject { publicpartialclassBotStats:Resource { [Export] publicintHealth{get;set;} [Export] publicResourceSubResource{get;set;} [Export] publicstring[]Strings{get;set;} // Make sure you provide a parameterless constructor. // In C#, a parameterless constructor is different from a // constructor with all default values. // Without a parameterless constructor, Godot will have problems // creating and editing your resource via the inspector. publicBotStats():this(0,null,null){} publicBotStats(inthealth,ResourcesubResource,string[]strings) { Health=health; SubResource=subResource; Strings=strings??System.Array.Empty<string>(); } } }\n\nNow, create a CharacterBody3D, name it Bot, and add the following script to it:\n\nextendsCharacterBody3D @exportvarstats:Resource func_ready(): # Uses an implicit, duck-typed interface for any 'health'-compatible resources. ifstats: stats.health=10 print(stats.health) # Prints \"10\"\n\n// Bot.cs usingGodot; namespaceExampleProject { publicpartialclassBot:CharacterBody3D { [Export] publicResourceStats; publicoverridevoid_Ready() { if(StatsisBotStatsbotStats) { GD.Print(botStats.Health);// Prints '10'. } } } }\n\nNow, select the CharacterBody3D node which we named bot, and drag&drop the bot_stats.tres resource onto the Inspector. It should print 10! Obviously, this setup can be used for more advanced features than this, but as long you really understand how it all worked, you should figure out everything else related to Resources.\n\nNote\n\nResource scripts are similar to Unity's ScriptableObjects. The Inspector provides built-in support for custom resources. If desired though, users can even design their own Control-based tool scripts and combine them with an EditorPlugin to create custom visualizations and editors for their data.\n\nUnreal Engine's DataTables and CurveTables are also easy to recreate with Resource scripts. DataTables are a String mapped to a custom struct, similar to a Dictionary mapping a String to a secondary custom Resource script.\n\n# bot_stats_table.gd extendsResource constBotStats=preload(\"bot_stats.gd\") vardata={ \"GodotBot\":BotStats.new(10),# Creates instance with 10 health. \"DifferentBot\":BotStats.new(20)# A different one with 20 health. } func_init(): print(data)\n\nusingGodot; publicpartialclassBotStatsTable:Resource { privateGodot.Collections.Dictionary<string,BotStats>_stats=newGodot.Collections.Dictionary<string,BotStats>(); publicBotStatsTable() { _stats[\"GodotBot\"]=newBotStats(10);// Creates instance with 10 health. _stats[\"DifferentBot\"]=newBotStats(20);// A different one with 20 health. GD.Print(_stats); } }\n\nInstead of inlining the Dictionary values, one could also, alternatively:\n\nImport a table of values from a spreadsheet and generate these key-value pairs.\n\nDesign a visualization within the editor and create a plugin that adds it to the Inspector when you open these types of Resources.\n\nCurveTables are the same thing, except mapped to an Array of float values or a Curve/Curve2D resource object.\n\nWarning\n\nBeware that resource files (*.tres/*.res) will store the path of the script they use in the file. When loaded, they will fetch and load this script as an extension of their type. This means that trying to assign a subclass, i.e. an inner class of a script (such as using the class keyword in GDScript) won't work. Godot will not serialize the custom properties on the script subclass properly.\n\nIn the example below, Godot would load the Node script, see that it doesn't extend Resource, and then determine that the script failed to load for the Resource object since the types are incompatible.\n\nextendsNode classMyResource: extendsResource @exportvarvalue=5 func_ready(): varmy_res=MyResource.new() # This will NOT serialize the 'value' property. ResourceSaver.save(my_res,\"res://my_res.tres\")\n\nusingGodot; publicpartialclassMyNode:Node { publicpartialclassMyResource:Resource { [Export] publicintValue{get;set;}=5; } publicoverridevoid_Ready() { varres=newMyResource(); // This will NOT serialize the 'Value' property. ResourceSaver.Save(res,\"res://MyRes.tres\"); } }"
    }
}