{
    "id": "dbpedia_987_2",
    "rank": 9,
    "data": {
        "url": "https://docs.godotengine.org/en/stable/tutorials/2d/2d_sprite_animation.html",
        "read_more_link": "",
        "language": "en",
        "title": "2D sprite animation ¶",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.godotengine.org/en/stable/_static/docs_logo.svg",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_run_preview.gif",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_tree1.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_new_spriteframes.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_spriteframes.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_spriteframes_done.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_frog_spritesheet.png",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_add_from_spritesheet.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_spritesheet_select_rows.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_spritesheet_selectframes.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_spritesheet_animation.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_play_spritesheet_animation.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_player-run.png",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_tree2.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_setframes.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_new_animation.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_new_track.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_full_animation.webp",
            "https://docs.godotengine.org/en/stable/_images/2d_animation_running.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Introduction: In this tutorial, you'll learn how to create 2D animated characters with the AnimatedSprite2D class and the AnimationPlayer. Typically, when you create or download an animated charact...",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Godot Engine documentation",
        "canonical_link": "https://docs.godotengine.org/en/stable/tutorials/2d/2d_sprite_animation.html",
        "text": "2D sprite animation¶\n\nIntroduction¶\n\nIn this tutorial, you'll learn how to create 2D animated characters with the AnimatedSprite2D class and the AnimationPlayer. Typically, when you create or download an animated character, it will come in one of two ways: as individual images or as a single sprite sheet containing all the animation's frames. Both can be animated in Godot with the AnimatedSprite2D class.\n\nFirst, we'll use AnimatedSprite2D to animate a collection of individual images. Then we will animate a sprite sheet using this class. Finally, we will learn another way to animate a sprite sheet with AnimationPlayer and the Animation property of Sprite2D.\n\nNote\n\nArt for the following examples by https://opengameart.org/users/ansimuz and tgfcoder.\n\nIndividual images with AnimatedSprite2D¶\n\nIn this scenario, you have a collection of images, each containing one of your character's animation frames. For this example, we'll use the following animation:\n\nYou can download the images here: 2d_sprite_animation_assets.zip\n\nUnzip the images and place them in your project folder. Set up your scene tree with the following nodes:\n\nNote\n\nThe root node could also be Area2D or RigidBody2D. The animation will still be made in the same way. Once the animation is completed, you can assign a shape to the CollisionShape2D. See Physics Introduction for more information.\n\nNow select the AnimatedSprite2D and in its SpriteFrames property, select \"New SpriteFrames\".\n\nClick on the new SpriteFrames resource and you'll see a new panel appear at the bottom of the editor window:\n\nFrom the FileSystem dock on the left side, drag the 8 individual images into the center part of the SpriteFrames panel. On the left side, change the name of the animation from \"default\" to \"run\".\n\nUse the \"Play\" buttons on the top-right of the Filter Animations input to preview the animation. You should now see the animation playing in the viewport. However, it is a bit slow. To fix this, change the Speed (FPS) setting in the SpriteFrames panel to 10.\n\nYou can add additional animations by clicking the \"Add Animation\" button and adding additional images.\n\nControlling the animation¶\n\nOnce the animation is complete, you can control the animation via code using the play() and stop() methods. Here is a brief example to play the animation while the right arrow key is held, and stop it when the key is released.\n\nextendsCharacterBody2D @onreadyvar_animated_sprite=$AnimatedSprite2D func_process(_delta): ifInput.is_action_pressed(\"ui_right\"): _animated_sprite.play(\"run\") else: _animated_sprite.stop()\n\nusingGodot; publicpartialclassCharacter:CharacterBody2D { privateAnimatedSprite2D_animatedSprite; publicoverridevoid_Ready() { _animatedSprite=GetNode<AnimatedSprite2D>(\"AnimatedSprite2D\"); } publicoverride_Process(float_delta) { if(Input.IsActionPressed(\"ui_right\")) { _animatedSprite.Play(\"run\"); } else { _animatedSprite.Stop(); } } }\n\nSprite sheet with AnimatedSprite2D¶\n\nYou can also easily animate from a sprite sheet with the class AnimatedSprite2D. We will use this public domain sprite sheet:\n\nRight-click the image and choose \"Save Image As\" to download it, and then copy the image into your project folder.\n\nSet up your scene tree the same way you did previously when using individual images. Select the AnimatedSprite2D and in its SpriteFrames property, select \"New SpriteFrames\".\n\nClick on the new SpriteFrames resource. This time, when the bottom panel appears, select \"Add frames from a Sprite Sheet\".\n\nYou will be prompted to open a file. Select your sprite sheet.\n\nA new window will open, showing your sprite sheet. The first thing you will need to do is to change the number of vertical and horizontal images in your sprite sheet. In this sprite sheet, we have four images horizontally and two images vertically.\n\nNext, select the frames from the sprite sheet that you want to include in your animation. We will select the top four, then click \"Add 4 frames\" to create the animation.\n\nYou will now see your animation under the list of animations in the bottom panel. Double click on default to change the name of the animation to jump.\n\nFinally, check the play button on the SpriteFrames editor to see your frog jump!\n\nSprite sheet with AnimationPlayer¶\n\nAnother way that you can animate when using a sprite sheet is to use a standard Sprite2D node to display the texture, and then animating the change from texture to texture with AnimationPlayer.\n\nConsider this sprite sheet, which contains 6 frames of animation:\n\nRight-click the image and choose \"Save Image As\" to download, then copy the image into your project folder.\n\nOur goal is to display these images one after another in a loop. Start by setting up your scene tree:\n\nNote\n\nThe root node could also be Area2D or RigidBody2D. The animation will still be made in the same way. Once the animation is completed, you can assign a shape to the CollisionShape2D. See Physics Introduction for more information.\n\nDrag the spritesheet into the Sprite's Texture property, and you'll see the whole sheet displayed on the screen. To slice it up into individual frames, expand the Animation section in the Inspector and set the Hframes to 6. Hframes and Vframes are the number of horizontal and vertical frames in your sprite sheet.\n\nNow try changing the value of the Frame property. You'll see that it ranges from 0 to 5 and the image displayed by the Sprite2D changes accordingly. This is the property we'll be animating.\n\nSelect the AnimationPlayer and click the \"Animation\" button followed by \"New\". Name the new animation \"walk\". Set the animation length to 0.6 and click the \"Loop\" button so that our animation will repeat.\n\nNow select the Sprite2D node and click the key icon to add a new track.\n\nContinue adding frames at each point in the timeline (0.1 seconds by default), until you have all the frames from 0 to 5. You'll see the frames actually appearing in the animation track:\n\nPress \"Play\" on the animation to see how it looks.\n\nControlling an AnimationPlayer animation¶\n\nLike with AnimatedSprite2D, you can control the animation via code using the play() and stop() methods. Again, here is an example to play the animation while the right arrow key is held, and stop it when the key is released.\n\nextendsCharacterBody2D @onreadyvar_animation_player=$AnimationPlayer func_process(_delta): ifInput.is_action_pressed(\"ui_right\"): _animation_player.play(\"walk\") else: _animation_player.stop()\n\nusingGodot; publicpartialclassCharacter:CharacterBody2D { privateAnimationPlayer_animationPlayer; publicoverridevoid_Ready() { _animationPlayer=GetNode<AnimationPlayer>(\"AnimationPlayer\"); } publicoverridevoid_Process(float_delta) { if(Input.IsActionPressed(\"ui_right\")) { _animationPlayer.Play(\"walk\"); } else { _animationPlayer.Stop(); } } }\n\nNote\n\nIf updating both an animation and a separate property at once (for example, a platformer may update the sprite's h_flip/v_flip properties when a character turns while starting a 'turning' animation), it's important to keep in mind that play() isn't applied instantly. Instead, it's applied the next time the AnimationPlayer is processed. This may end up being on the next frame, causing a 'glitch' frame, where the property change was applied but the animation was not. If this turns out to be a problem, after calling play(), you can call advance(0) to update the animation immediately.\n\nSummary¶\n\nThese examples illustrate the two classes you can use in Godot for 2D animation. AnimationPlayer is a bit more complex than AnimatedSprite2D, but it provides additional functionality, since you can also animate other properties like position or scale. The class AnimationPlayer can also be used with an AnimatedSprite2D. Experiment to see what works best for your needs."
    }
}