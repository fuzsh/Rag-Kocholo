{
    "id": "dbpedia_2923_3",
    "rank": 57,
    "data": {
        "url": "https://docs.datadoghq.com/real_user_monitoring/browser/advanced_configuration/",
        "read_more_link": "",
        "language": "en",
        "title": "Advanced Configuration",
        "top_image": "https://datadog-docs.imgix.net/images/og-default/og-thumbnails-generic3.png",
        "meta_img": "https://datadog-docs.imgix.net/images/og-default/og-thumbnails-generic3.png",
        "images": [
            "https://datadog-docs.imgix.net/img/dd_logo_n_70x75.png?ch=Width,DPR&fit=max&auto=format&w=70&h=75",
            "https://datadog-docs.imgix.net/img/dd-logo-n-200.png?ch=Width,DPR&fit=max&auto=format&h=14&auto=format&w=807",
            "https://datadog-docs.imgix.net/img/datadog_rbg_n_2x.png?fm=png&auto=format&lossless=1",
            "https://datadog-docs.imgix.net/images/icons/nav_home.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/nav_docs.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/nav_mobile_api.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/real_user_monitoring/browser/advanced_configuration/user-api.73b0cac9af174bfd4322133367d6e968.png?auto=format",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/help-druids.svg",
            "https://datadog-docs.imgix.net/images/icons/icon-pencil.svg?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/dd-logo-white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Datadog, the leading service for cloud-scale monitoring.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.datadoghq.com/favicon.ico",
        "meta_site_name": "Datadog Infrastructure and Application Monitoring",
        "canonical_link": "https://docs.datadoghq.com/real_user_monitoring/browser/advanced_configuration/",
        "text": "Overview\n\nThere are various ways you can modify the data and context collected by RUM, to support your needs for:\n\nProtecting sensitive data like personally identifiable information.\n\nConnecting a user session with your internal identification of that user, to help with support.\n\nReducing how much RUM data you’re collecting, through sampling the data.\n\nProviding more context than what the default attributes provide about where the data is coming from.\n\nOverride default RUM view names\n\nThe RUM Browser SDK automatically generates a view event for each new page visited by your users, or when the page URL is changed (for single-page applications). A view name is computed from the current page URL, where variable alphanumeric IDs are removed automatically. For example, /dashboard/1234 becomes /dashboard/?.\n\nStarting with version 2.17.0, you can add view names and assign them to a dedicated service owned by a team by tracking view events manually with the trackViewsManually option:\n\nSet trackViewsManually to true when initializing the RUM Browser SDK.\n\nimport { datadogRum } from '@datadog/browser-rum'; datadogRum.init({ ..., trackViewsManually: true, ... });\n\nwindow.DD_RUM.onReady(function() { window.DD_RUM.init({ ..., trackViewsManually: true, ... }) })\n\nwindow.DD_RUM && window.DD_RUM.init({ ..., trackViewsManually: true, ... });\n\nYou must start views for each new page or route change (for single-page applications). RUM data is collected when the view starts. Starting with version 4.13.0, you can also optionally define the associated service name and version.\n\nView Name: Defaults to the page URL path.\n\nService: Defaults to the default service specified when creating your RUM application.\n\nVersion: Defaults to the default version specified when creating your RUM application.\n\nFor more information, see Setup Browser Monitoring.\n\nLatest versionThe following example manually tracks the pageviews on the checkout page in a RUM application. Use checkout for the view name and associate the purchase service with version 1.2.3.\n\ndatadogRum.startView({ name: 'checkout', service: 'purchase', version: '1.2.3' })\n\nwindow.DD_RUM.onReady(function() { window.DD_RUM.startView({ name: 'checkout', service: 'purchase', version: '1.2.3' }) })\n\nwindow.DD_RUM && window.DD_RUM.startView({ name: 'checkout', service: 'purchase', version: '1.2.3' })\n\nbefore v4.13.0The following example manually tracks the pageviews on the checkout page in a RUM application. No service or version can be specified.\n\ndatadogRum.startView('checkout')\n\nwindow.DD_RUM.onReady(function() { window.DD_RUM.startView('checkout') })\n\nwindow.DD_RUM && window.DD_RUM.startView('checkout')\n\nIf you are using React, Angular, Vue, or any other frontend framework, Datadog recommends implementing the startView logic at the framework router level.\n\nReact router instrumentation\n\nTo override default RUM view names so that they are aligned with how you’ve defined them in your React application, you need to follow the below steps.\n\nNote: These instructions are specific to the React Router v6 library.\n\nSet trackViewsManually to true when initializing the RUM browser SDK as described above.\n\nStart views for each route change.\n\nimport { matchRoutes, useLocation } from 'react-router-dom'; import { routes } from 'path/to/routes'; import { datadogRum } from \"@datadog/browser-rum\"; export default function App() { // Track every route change with useLocation API let location = useLocation(); useEffect(() => { const routeMatches = matchRoutes(routes, location.pathname); const viewName = routeMatches && computeViewName(routeMatches); if (viewName) { datadogRum.startView({name: viewName}); } }, [location.pathname]); ... } // Compute view name out of routeMatches function computeViewName(routeMatches) { let viewName = \"\"; for (let index = 0; index < routeMatches.length; index++) { const routeMatch = routeMatches[index]; const path = routeMatch.route.path; // Skip pathless routes if (!path) { continue; } if (path.startsWith(\"/\")) { // Handle absolute child route paths viewName = path; } else { // Handle route paths ending with \"/\" viewName += viewName.endsWith(\"/\") ? path : `/${path}`; } } return viewName || '/'; }\n\nimport { matchRoutes, useLocation } from 'react-router-dom'; import { routes } from 'path/to/routes'; export default function App() { // Track every route change with useLocation API let location = useLocation(); useEffect(() => { const routeMatches = matchRoutes(routes, location.pathname); const viewName = routeMatches && computeViewName(routeMatches); if (viewName) { DD_RUM.onReady(function() { DD_RUM.startView({name: viewName}); }); } }, [location.pathname]); ... } // Compute view name out of routeMatches function computeViewName(routeMatches) { let viewName = \"\"; for (let index = 0; index < routeMatches.length; index++) { const routeMatch = routeMatches[index]; const path = routeMatch.route.path; // Skip pathless routes if (!path) { continue; } if (path.startsWith(\"/\")) { // Handle absolute child route paths viewName = path; } else { // Handle route paths ending with \"/\" viewName += viewName.endsWith(\"/\") ? path : `/${path}`; } } return viewName || '/'; }\n\nimport { matchRoutes, useLocation } from 'react-router-dom'; import { routes } from 'path/to/routes'; export default function App() { // Track every route change with useLocation API let location = useLocation(); useEffect(() => { const routeMatches = matchRoutes(routes, location.pathname); const viewName = routeMatches && computeViewName(routeMatches); if (viewName) { window.DD_RUM && window.DD_RUM.startView({name: viewName}); } }, [location.pathname]); ... } // Compute view name out of routeMatches function computeViewName(routeMatches) { let viewName = \"\"; for (let index = 0; index < routeMatches.length; index++) { const routeMatch = routeMatches[index]; const path = routeMatch.route.path; // Skip pathless routes if (!path) { continue; } if (path.startsWith(\"/\")) { // Handle absolute child route paths viewName = path; } else { // Handle route paths ending with \"/\" viewName += viewName.endsWith(\"/\") ? path : `/${path}`; } } return viewName || '/'; }\n\nEnrich and control RUM data\n\nThe RUM Browser SDK captures RUM events and populates their main attributes. The beforeSend callback function gives you access to every event collected by the RUM Browser SDK before it is sent to Datadog.\n\nIntercepting the RUM events allows you to:\n\nEnrich your RUM events with additional context attributes\n\nModify your RUM events to alter their content or redact sensitive sequences (see list of editable properties)\n\nDiscard selected RUM events\n\nStarting with version 2.13.0, beforeSend takes two arguments: the event generated by the RUM Browser SDK, and the context that triggered the creation of the RUM event.\n\nThe potential context values are:\n\nFor more information, see the Enrich and control RUM data guide.\n\nEnrich RUM events\n\nAlong with attributes added with the Global Context API or the Feature Flag data collection, you can add additional context attributes to the event. For example, tag your RUM resource events with data extracted from a fetch response object:\n\nIf a user belongs to multiple teams, add additional key-value pairs in your calls to the Global Context API.\n\nThe RUM Browser SDK ignores:\n\nAttributes added outside of event.context\n\nModifications made to a RUM view event context\n\nEnrich RUM events with feature flags\n\nYou can enrich your RUM event data with feature flags to get additional context and visibility into performance monitoring. This lets you determine which users are shown a specific user experience and if it is negatively affecting the user’s performance.\n\nModify the content of a RUM event\n\nFor example, to redact email addresses from your web application URLs:\n\nYou can update the following event properties:\n\nThe RUM Browser SDK ignores modifications made to event properties not listed above. For more information about event properties, see the RUM Browser SDK GitHub repository.\n\nDiscard a RUM event\n\nWith the beforeSend API, discard a RUM event by returning false:\n\nNote: View events cannot be discarded.\n\nUser session\n\nAdding user information to your RUM sessions can help you:\n\nFollow the journey of a given user\n\nKnow which users are the most impacted by errors\n\nMonitor performance for your most important users\n\nThe following attributes are optional but Datadog recommends providing at least one of them:\n\nIncrease your filtering capabilities by adding extra attributes on top of the recommended ones. For instance, add information about the user plan, or which user group they belong to.\n\nWhen making changes to the user session object, all RUM events collected after the change contain the updated information.\n\nNote: Deleting the user session information, as in a logout, retains the user information on the last view before the logout, but not on later views or the session level as the session data uses the last view’s values.\n\nIdentify user session\n\ndatadogRum.setUser(<USER_CONFIG_OBJECT>)\n\nAccess user session\n\ndatadogRum.getUser()\n\nAdd/Override user session property\n\ndatadogRum.setUserProperty('<USER_KEY>', <USER_VALUE>)\n\nRemove user session property\n\ndatadogRum.removeUserProperty('<USER_KEY>')\n\nClear user session property\n\ndatadogRum.clearUser()\n\nSampling\n\nBy default, no sampling is applied on the number of collected sessions. To apply a relative sampling (in percent) to the number of sessions collected, use the sessionSampleRate parameter when initializing RUM.\n\nThe following example collects only 90% of all sessions on a given RUM application:\n\nFor a sampled out session, all pageviews and associated telemetry for that session are not collected.\n\nUser tracking consent\n\nTo be compliant with GDPR, CCPA, and similar regulations, the RUM Browser SDK lets you provide the tracking consent value at initialization. For more information on tracking consent, see Data Security.\n\nThe trackingConsent initialization parameter can be one of the following values:\n\n\"granted\": The RUM Browser SDK starts collecting data and sends it to Datadog.\n\n\"not-granted\": The RUM Browser SDK does not collect any data.\n\nTo change the tracking consent value after the RUM Browser SDK is initialized, use the setTrackingConsent() API call. The RUM Browser SDK changes its behavior according to the new value:\n\nwhen changed from \"granted\" to \"not-granted\", the RUM session is stopped, data is no longer sent to Datadog.\n\nwhen changed from \"not-granted\" to \"granted\", a new RUM session is created if no previous session is active, and data collection resumes.\n\nThis state is not synchronized between tabs nor persisted between navigation. It is your responsibility to provide the user decision during RUM Browser SDK initialization or by using setTrackingConsent().\n\nWhen setTrackingConsent() is used before init(), the provided value takes precedence over the initialization parameter.\n\nGlobal context\n\nAdd global context property\n\nAfter RUM is initialized, add extra context to all RUM events collected from your application with the setGlobalContextProperty(key: string, value: any) API:\n\nRemove global context property\n\nYou can remove a previously defined global context property.\n\nReplace global context\n\nReplace the default context for all your RUM events with the setGlobalContext(context: Context) API.\n\nClear global context\n\nYou can clear the global context by using clearGlobalContext.\n\nRead global context\n\nOnce RUM is initialized, read the global context with the getGlobalContext() API.\n\nContexts life cycle\n\nBy default, global context and user context are stored in the current page memory, which means they are not:\n\nkept after a full reload of the page\n\nshared across different tabs or windows of the same session\n\nTo add them to all events of the session, they must be attached to every page.\n\nWith the introduction of the storeContextsAcrossPages configuration option in the v4.49.0 of the browser SDK, those contexts can be stored in localStorage, allowing the following behaviors:\n\nContexts are preserved after a full reload\n\nContexts are synchronized between tabs opened on the same origin\n\nHowever, this feature comes with some limitations:\n\nSetting Personable Identifiable Information (PII) in those contexts is not recommended, as data stored in localStorage outlives the user session\n\nThe feature is incompatible with the trackSessionAcrossSubdomains options because localStorage data is only shared among the same origin (login.site.com ≠ app.site.com)\n\nlocalStorage is limited to 5 MiB by origin, so the application-specific data, Datadog contexts, and other third-party data stored in local storage must be within this limit to avoid any issues\n\nFurther Reading"
    }
}