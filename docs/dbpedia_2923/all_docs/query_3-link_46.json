{
    "id": "dbpedia_2923_3",
    "rank": 46,
    "data": {
        "url": "https://github.com/cypress-io/github-action",
        "read_more_link": "",
        "language": "en",
        "title": "action: GitHub Action for running Cypress end",
        "top_image": "https://opengraph.githubassets.com/281d3598bc7919a3f279f7d907c6f2a812e0d6f86cd3ba6ccb246896e15a77bb/cypress-io/github-action",
        "meta_img": "https://opengraph.githubassets.com/281d3598bc7919a3f279f7d907c6f2a812e0d6f86cd3ba6ccb246896e15a77bb/cypress-io/github-action",
        "images": [
            "https://github.com/cypress-io/github-action/actions/workflows/main.yml/badge.svg",
            "https://camo.githubusercontent.com/1d198e368d0602020e903545669fec5189ef839e18186a4498014c3bee96c3ff/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f636c6f75642e637970726573732e696f2f62616467652f73696d706c652f337462376a6e2f6d6173746572267374796c653d666c6174266c6f676f3d63797072657373",
            "https://camo.githubusercontent.com/165c2f344a3663c607d152b99129f6e82b3b2ab97a6553f41e51fc1dd7636051/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72656e6f766174652d6170702d626c75652e737667",
            "https://github.com/cypress-io/github-action/actions/workflows/example-basic.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-basic.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-component-test.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-chrome.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-firefox.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-edge.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-docker.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-env.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-recording.yml/badge.svg",
            "https://github.com/cypress-io/github-action/raw/master/images/tags.png",
            "https://github.com/cypress-io/github-action/actions/workflows/example-quiet.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-config.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-config.yml/badge.svg",
            "https://github.com/cypress-io/github-action/raw/master/images/parallel.png",
            "https://github.com/cypress-io/github-action/actions/workflows/example-start.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-start.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-wait-on.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-webpack.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-basic-pnpm.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-start-and-pnpm-workspaces.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-yarn-classic.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-yarn-modern.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-yarn-modern-pnp.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-start-and-yarn-workspaces.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-node-versions.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-install-only.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-recording.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-cron.yml/badge.svg",
            "https://github.com/cypress-io/github-action/actions/workflows/example-node-versions.yml/badge.svg",
            "https://camo.githubusercontent.com/7edda6b40df66cdf6d87ee014ce8a73af8830d12f325162978d3b72836ea332d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667",
            "https://avatars.githubusercontent.com/u/66998419?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2212006?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25180681?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6298501?s=64&v=4",
            "https://avatars.githubusercontent.com/in/2740?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5605310?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2184114?s=64&v=4",
            "https://avatars.githubusercontent.com/u/21967?s=64&v=4",
            "https://avatars.githubusercontent.com/u/91914119?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3980464?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1271364?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1087311?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1588747?s=64&v=4",
            "https://avatars.githubusercontent.com/u/14099737?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "cypress-io"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "GitHub Action for running Cypress end-to-end & component tests - cypress-io/github-action",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/cypress-io/github-action",
        "text": "GitHub Action for running Cypress end-to-end and component tests. Includes npm, pnpm and Yarn installation, custom caching and lots of configuration options.\n\nPlacing use: cypress-io/github-action@v6 into a GitHub Action workflow gives you a simple way to run Cypress. The action takes the project's npm, pnpm or Yarn package manager lock file, installs dependencies and caches these dependencies for future use. It then proceeds to run Cypress end-to-end tests with the built-in Electron browser and provides a test summary after completion.\n\nIf you are testing against a running server like the Cypress Kitchen Sink showcase example on https://example.cypress.io/ no other parameters are necessary. In other cases where you need to fire up a development server, you can add the start parameter to the workflow. Browse through the examples to find other useful parameters.\n\nEnd-to-End testing\n\nComponent testing\n\nSelect action version\n\nRun tests in a given browser\n\nusing Chrome\n\nusing Firefox\n\nusing Edge\n\nusing headed mode\n\nUsing Docker image\n\nSpecify environment variables\n\nRun only some spec files\n\nTest project in subfolder\n\nRecord results on Cypress Cloud\n\nStoring the Project ID and Record Key\n\nGetting Git information environment variables\n\nGetting PR and URL automatically\n\nOverwriting Merge SHA into SHA message\n\nTag recordings\n\nSpecify auto cancel after failures\n\nStore test artifacts on GitHub\n\nQuiet output\n\nSet Cypress config values\n\nUse specific config file\n\nRun tests in parallel\n\nCombine Component and E2E testing\n\nBuild app before running the tests\n\nStart server before running the tests\n\nStart multiple servers before running the tests\n\nWait for server to respond before running the tests\n\nwait-on with Node.js 18+ workarounds\n\nUse custom install command\n\nUse command prefix\n\nUse own custom test command\n\nPass custom build id when recording to Cypress Cloud\n\nGenerate a robust custom build id to allow re-running the workflow\n\nUse different working-directory\n\nUse subfolders\n\nUse pnpm\n\nUse pnpm workspaces\n\nUse Yarn Classic\n\nUse Yarn Modern\n\nUse Yarn Plug'n'Play\n\nUse Yarn workspaces\n\nUse custom cache key\n\nRun tests on multiple Node versions\n\nSplit install and tests into separate jobs\n\nUse custom install commands\n\nInstall only Cypress to avoid installing all dependencies\n\nUse timeouts to avoid hanging CI jobs\n\nPrint Cypress info like detected browsers\n\nRun tests nightly or on any schedule\n\nSpecify job summary title\n\nSuppress job summary\n\nMore examples\n\nExamples contained in this repository, based on current Cypress versions, can be found in the examples directory. Examples for Legacy Configuration, which use Cypress 9.7.0, are no longer maintained. They can be referred to in the examples/v9 directory of the v5 branch.\n\nLive examples, such as example-basic.yml are shown together with a status badge. Click on the status badge to read the source code of the workflow, for example\n\nOlder external examples based on a Legacy Configuration for Cypress 9 and earlier can be found in the README for version v5.\n\nNote: this package assumes that cypress is declared as a development dependency in the package.json file. The cypress npm module is required to run Cypress via its Module API.\n\nThe workflow file example-basic.yml shows how Cypress runs on GH Actions using Ubuntu (20 and 22), Windows, and macOS without additional OS dependencies necessary.\n\nThis workflow uses the default test type of End-to-End (E2E) Testing. Alternatively, Component Testing can be utilized by referencing the Component Testing section below.\n\nTo use Cypress Component Testing add component: true\n\nname: Component tests on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: component: true\n\nSee the example project component-tests and the example-component-test.yml workflow for more details.\n\nBest practice:\n\nOur examples specify using branch v6 which is the action's recommended major version:\n\n- name: Cypress run uses: cypress-io/github-action@v6\n\nWhen using cypress-io/github-action@v6 from your workflow file, you will automatically use the latest tag from branch v6.\n\nAlternatively, to mitigate unforeseen breaks, bind to a specific tag, for example:\n\n- name: Cypress run uses: cypress-io/github-action@v6.1.0\n\nThe changes associated with each tag are shown under GitHub's releases list. Refer also to the CHANGELOG for an overview of major changes.\n\nSpecify the browser name or path with the browser parameter. The default browser, if none is specified, is the built-in Electron browser.\n\nname: Chrome on: push jobs: chrome: runs-on: ubuntu-22.04 name: E2E on Chrome steps: - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6 with: browser: chrome\n\nname: Firefox on: push jobs: firefox: runs-on: ubuntu-22.04 name: E2E on Firefox steps: - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6 with: browser: firefox\n\nname: Edge on: push jobs: edge: runs-on: ubuntu-22.04 name: E2E on Edge steps: - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6 with: browser: edge\n\nRun the browser in headed mode - as of Cypress v8.0 the cypress run command executes tests in headless mode by default\n\nname: Chrome headed on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6 with: browser: chrome headed: true\n\nYou can run the action in a Docker container.\n\nReplace the latest tag with a specific version image tag from cypress/browsers on Docker Hub to avoid breaking changes when new images are released (especially when they include new major versions of Node.js).\n\nInclude options: --user 1001 to avoid permissions issues.\n\nWhen using cypress/included Docker images, set the environment variable CYPRESS_INSTALL_BINARY=0 to suppress saving the Cypress binary cache, otherwise cache restore errors may occur. The example below shows how to do this:\n\nRefer to cypress-io/cypress-docker-images for further information about using Cypress Docker images. Cypress offers the Cypress Docker Factory to generate additional Docker images with selected components and versions.\n\nSpecify the env argument with env parameter\n\nname: Cypress tests on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run with env uses: cypress-io/github-action@v6 with: env: host=api.dev.local,port=4222\n\nWhen passing the environment variables this way, unfortunately due to GitHub Actions syntax, the variables should be listed in a single line, which can be hard to read. As an alternative, you can use the step's env block where every variable can be set on its own line. In this case, you should prefix every variable with CYPRESS_ because such variables are loaded by Cypress automatically. The above code example is equivalent to:\n\nname: Cypress tests on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run with env uses: cypress-io/github-action@v6 env: CYPRESS_host: api.dev.local CYPRESS_port: 4222\n\nFor more examples, see the workflows below, using environment variables for recording.\n\nSpecify the spec files to run with spec parameter\n\nname: Cypress tests on: push jobs: cypress-run: name: Cypress run runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: spec: cypress/e2e/spec1.cy.js\n\nYou can pass multiple specs and wild card patterns using multi-line parameter, see example-config.yml:\n\nspec: | cypress/e2e/spec-a.cy.js cypress/**/*-b.cy.js\n\nFor more information, visit the Cypress command-line docs.\n\nSpecify the project to run with project parameter\n\nname: Cypress tests on: push jobs: cypress-run: name: Cypress run runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: project: ./some/nested/folder\n\nFor more information, visit the Cypress command-line docs.\n\nBy setting the parameter record to true, you can record your test results into the Cypress Cloud. Read the Cypress Cloud documentation to learn how to sign up and create a Cypress Cloud project.\n\nWe recommend passing the GITHUB_TOKEN secret (created by the GH Action automatically) as an environment variable. This will allow correctly identifying every build and avoid confusion when re-running a build.\n\nTo record the project needs projectId and recordKey.\n\nTypically, the projectId is stored in the Cypress Configuration File, while the recordKey is set as a CLI parameter. If you want to avoid this, both the projectId and recordKey can be provided as environment variables using GitHub secrets.\n\nCypress uses the @cypress/commit-info package to associate Git details (branch, commit message, author) with each run. It typically uses Git commands, expecting a .git folder. In Docker or similar environments where .git is absent, or if you need different data in the Cypress Cloud, Git information can be passed via custom environment variables.\n\nPlease refer to the Cypress Cloud Git information environment variables section in our documentation for more examples.\n\nPlease refer to the default GitHub environment variables for additional GitHub examples.\n\nWhen recording runs to Cypress Cloud, the PR number and URL can be automatically detected if you pass GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} via the workflow env. When set, this value enables the Action to perform additional logic that grabs the related PR number and URL (if they exist) and sets them in the environment variables CYPRESS_PULL_REQUEST_ID and CYPRESS_PULL_REQUEST_URL, respectively.\n\nSee Cypress' documentation on CI Build Information\n\nExample workflow using the variables:\n\nname: Example echo PR number and URL on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: record: true - run: echo \"PR number is $CYPRESS_PULL_REQUEST_ID\" - run: echo \"PR URL is $CYPRESS_PULL_REQUEST_URL\" env: CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }} GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nFor either of these events, we set CYPRESS_PULL_REQUEST_ID and CYPRESS_PULL_REQUEST_URL to that of the PR number and URL, respectively, of the PR that triggered the workflow.\n\nWhen a commit on a branch without a PR is made, the Cypress GitHub Action checks to see if the commit that triggered the workflow has a related PR. If the commit exists in any other PRs, it's considered a related PR. When there are related PRs, we grab the first related PR and use that PR's number and URL for CYPRESS_PULL_REQUEST_ID and CYPRESS_PULL_REQUEST_URL, respectively.\n\nIf no related PR is detected, CYPRESS_PULL_REQUEST_ID and CYPRESS_PULL_REQUEST_URL will be undefined.\n\nWe recommend using the action with on: push rather than on: pull_request or on: merge_group for more accurate commit information in Cypress Cloud. When running on pull_request or merge_group, the commit message defaults to \"merge SHA into SHA\". You can overwrite the commit message sent to Cypress Cloud by setting an environment variable.\n\nSee issue 124 for details.\n\nYou can pass a single or multiple tags when recording a run. For example\n\nThe recording will have tags as labels on the run.\n\nYou can pass multiple tags using commas like tag: node-18,nightly,staging.\n\nSpecify the number of failed tests that will cancel a run when using the Cypress Cloud Auto Cancellation feature.\n\nThis feature requires Cypress 12.6.0 or later and a Cypress Cloud Business or Enterprise account.\n\nSee Auto Cancellation for more information.\n\nIf you don't record the test run on Cypress Cloud, you can still store generated videos and screenshots as CI artifacts. See the workflow example below.\n\nYou can provide quiet flag for cypress run to silence any Cypress specific output from stdout\n\nSpecify configuration values with config parameter\n\nname: Cypress tests on: push jobs: cypress-run: name: Cypress run runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: config: pageLoadTimeout=100000,baseUrl=http://localhost:3000\n\nSpecify the path to your Configuration File with config-file parameter\n\nname: Cypress tests on: push jobs: cypress-run: name: Cypress run runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: config-file: cypress.config-alternate.js\n\nNote: Cypress parallelization requires a Cypress Cloud account.\n\nYou can spin multiple containers running in parallel using strategy: matrix argument. Just add more dummy items to the containers: [1, 2, ...] array to spin more free or paid containers. Then use record and parallel parameters to load balance tests.\n\nThe Cypress GH Action does not spawn or create any additional containers - it only links the multiple containers spawned using the matrix strategy into a single logical Cypress Cloud run where it splits the specs amongst the machines. See the Cypress Cloud Smart Orchestration guide for a detailed explanation.\n\nIf you use the GitHub Actions facility for Re-running workflows and jobs, note that Re-running failed jobs in a workflow is not suited for use with parallel recording into Cypress Cloud. Re-running failed jobs in this situation does not simply re-run failed Cypress tests. Instead it re-runs all Cypress tests, load-balanced over the containers with failed jobs.\n\nTo optimize runs when there are failing tests present, refer to optional Cypress Cloud Smart Orchestration Premium features:\n\nSpec Prioritization\n\nRun Cancellation. See also Specify auto cancel after failures for details of how to set this option in a Cypress GH Action workflow.\n\nDuring staged rollout of a new GitHub-hosted runner version, GitHub may provide a mixture of current and new image versions used by the container matrix. It is recommended to use a Docker image in the parallel job run which avoids any Cypress Cloud errors due to browser major version mismatch from the two different image versions. A Docker image is not necessary if testing against the default built-in Electron browser because this browser version is fixed by the Cypress version in use and it is unaffected by any GitHub runner image rollout.\n\nComponent Testing and End-to-End (E2E) Testing types can be combined in the same job using separate steps\n\nSee the example project component-test and the example-component-test.yml workflow for more details.\n\nYou can run a build step before starting tests\n\nname: Build on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: build: npm run build\n\nIf your tests run against a local server, use the start parameter to start your server. The server will run in the background.\n\nname: With server on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: start: npm start\n\nCaution: use the start parameter only to start a server, not to run Cypress, otherwise tests may be run twice. The action runs Cypress tests by default, unless the parameter runTests is set to false.\n\nNote: sometimes on Windows you need to run a different start command. You can use the start-windows parameter for this.\n\nNote: A server continues to run until the end of the GitHub workflow job that started it. At the end of the job the GitHub workflow runner executes a \"Complete job\" phase automatically where it terminates any server processes which are still running.\n\nYou can start multiple server processes. For example, if you have an API to start using npm run api and the web server to start using npm run web you can put those commands in start using comma separation.\n\nname: With servers on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: start: npm run api, npm run web\n\nYou can place the start commands in separate lines\n\nwith: start: | npm run api npm run web\n\nIf you are starting a local server and it takes a while to start, you can add a parameter wait-on and pass url to wait for the server to respond.\n\n(also uses wait-on)\n\nBy default, wait-on will retry for 60 seconds. You can pass a custom timeout in seconds using wait-on-timeout.\n\nYou can wait for multiple URLs to respond by separating urls with a comma\n\nThe action will wait for the first url to respond, then will check the second url, and so on.\n\nYou can even use your own command (usually by using npm, yarn, npx) to wait for the server to respond. For example, if you want to use the wait-on utility to ping the server and run the Cypress tests after the server responds:\n\nSee example-wait-on.yml workflow file.\n\nIf this action times out waiting for the server to respond, please see Debugging section in this README file.\n\nUnder Node.js version 18 and later, wait-on may fail to recognize that a localhost server is running. This affects development web servers which do not listen on both IPv4 and IPv6 network stacks.\n\nCheck your server documentation to see if it can be started using 0.0.0.0 (all addresses) and use this if available. If this option is not available or does not resolve the issue then carry on to the next steps:\n\nIf the action log shows that wait-on is failing to connect to 127.0.0.1, replace localhost by [::1] (the IPv6 loopback address)\n\nIf the action log shows that wait-on is failing to connect to ::1, replace localhost by 127.0.0.1 (the IPv4 loopback address)\n\nIf you want to overwrite the install command\n\n- uses: cypress-io/github-action@v6 with: install-command: yarn --frozen-lockfile --silent\n\nSee example-install-command.yml workflow file.\n\nYou can prefix the default test command using the command-prefix option. This is useful for example when running Percy, which requires the test command to be wrapped with percy exec --.\n\nYou can overwrite the Cypress run command with your own command.\n\nsteps: - name: Checkout 🛎 uses: actions/checkout@v4 - name: Custom tests 🧪 uses: cypress-io/github-action@v6 with: command: npm run e2e:ci\n\nCaution: using the action parameter command causes multiple other parameters to be ignored including: auto-cancel-after-failures, browser, ci-build-id, command-prefix, component, config, config-file, env, group, headed, parallel, project, publish-summary, quiet, record, spec and tag.\n\nSee example-custom-command.yml file.\n\nYou can overwrite ci-build-id used to link separate machines running tests into a single parallel run.\n\nTip: see Learn GitHub Actions, with sections on Expressions, Contexts and Environment variables.\n\nIf you re-run the GitHub workflow, if you use the same custom build id during recording, Cypress Cloud will cancel the run with \"Build already finished\" error. To avoid this, you need to generate a new custom build id on every workflow re-run. A good solution showing in the example-custom-ci-build-id.yml file is to run a common job first that just generates a new random ID. This ID can be used by the testing jobs to tie the build together. If the user re-runs the workflow a new unique build id is generated, allowing recording the new Cypress Cloud run.\n\nSee the example-custom-ci-build-id.yml for the full workflow.\n\nIn a monorepo, the end-to-end or component test might be placed in a different sub-folder from the application itself. This sub-folder is the Cypress \"working directory\" which you can specify using the working-directory parameter.\n\nIn the following example of a directory layout for end-to-end testing, the Cypress working directory is app-test. The working directory contains the Cypress tests and a package manager lock file:\n\nrepo/ app/ app-test/ cypress/ e2e/ fixtures/ support/ cypress.config.js package.json package-lock.json\n\nWe use working-directory: app-test to match the above example directory structure:\n\non: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6 with: start: npm start working-directory: app-test\n\nSee the Cypress documentation Folder structure section for examples of standard directory layouts, covering end-to-end testing and component testing with both JavaScript and TypeScript options.\n\nEach of the examples in this monorepo is separated from other examples by using different working directories. See example-basic.yml for one end-to-end test example using the parameter working-directory and example-component-test.yml for a component test example.\n\nSometimes the application under test and the Cypress end-to-end tests may have separately defined dependencies. In the example below, Cypress has its own package.json file in a subfolder:\n\nroot/ e2e/ (code for installing and running Cypress tests) package.json package-lock.json cypress.config.js cypress/ (code for running the \"app\" with \"npm start\") package.json package-lock.json\n\nIn this case you can first install the dependencies for the application (npm ci), then start the application server (npm start) before calling cypress-io/github-action to install the dependencies for Cypress and to run Cypress. You may also need to use the wait-on parameter to make sure that the app server is fully available.\n\nThe package manager pnpm is not pre-installed in GitHub Actions runner images (unlike npm and yarn) and so it must be installed in a separate workflow step (see below). If the action finds a pnpm-lock.yaml file, it uses the pnpm command pnpm install --frozen-lockfile by default to install dependencies.\n\nThe example below follows pnpm recommendations for installing pnpm and caching the pnpm store.\n\nIf you are using pnpm workspaces you need to install dependencies and run Cypress tests in a workspace in separate steps. The snippet below shows this principle.\n\n... - name: Install dependencies uses: cypress-io/github-action@v6 with: working-directory: examples/start-and-pnpm-workspaces runTests: false - name: Cypress test uses: cypress-io/github-action@v6 with: install: false working-directory: examples/start-and-pnpm-workspaces/packages/workspace-1 ...\n\nSee the example project start-and-pnpm-workspaces and the example-start-and-pnpm-workspaces.yml workflow for a full working example.\n\nIf a yarn.lock file is found, the action uses the Yarn 1 (Classic) command yarn --frozen-lockfile by default to install dependencies.\n\nname: example-yarn-classic on: push jobs: yarn-classic: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: working-directory: examples/yarn-classic\n\nTo install dependencies using a yarn.lock file from Yarn Modern (Yarn 2 and later) you need to override the default Yarn 1 (Classic) installation command yarn --frozen-lockfile. You can do this by using the install-command parameter and specifying yarn install for example:\n\nname: example-yarn-modern on: push jobs: yarn-modern: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: working-directory: examples/yarn-modern install-command: yarn install\n\nThis example covers the .yarnrc.yml configuration nodeLinker: node-modules which Yarn uses by default for projects updated from Yarn Classic. For nodeLinker: pnp see Yarn Plug'n'Play below. (Note that github-action is not compatible with the nodeLinker: pnpm setting.)\n\nWhen using Yarn Modern (Yarn 2 and later) with Plug'n'Play enabled, you will need to use the command parameter to run yarn instead of npx.\n\nname: example-yarn-modern-pnp on: push jobs: yarn-classic: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: working-directory: examples/yarn-modern-pnp install-command: yarn install command: yarn run --binaries-only cypress run\n\nThis example covers the .yarnrc.yml configuration when nodeLinker is undefined or set to nodeLinker: pnp corresponding to Yarn Plug'n'Play. Yarn uses this by default for projects newly created with Yarn Modern.\n\nCaution: using the action parameter command causes multiple other parameters to be ignored. See command section for more information.\n\nThis action should discover the Yarn workspaces correctly. For example, see folder examples/start-and-yarn-workspaces and workflow file example-start-and-yarn-workspaces.yml\n\nSometimes the default cache key does not work. For example, if you cannot share the Node modules across Node versions due to native extensions. In that case pass your own cache-key parameter.\n\nYou can run your tests across multiple Node versions.\n\nname: Node versions on: push jobs: cypress-run: runs-on: ubuntu-22.04 strategy: matrix: node: [18, 20, 22] name: E2E on Node v${{ matrix.node }} steps: - uses: actions/setup-node@v4 with: node-version: ${{ matrix.node }} - uses: actions/checkout@v4 - uses: cypress-io/github-action@v6\n\nSee the Node.js section for information about supported versions and usage of Node.js.\n\nSometimes you may want to run additional commands between installation and tests. To enable this use the install and runTests parameters.\n\nSee cypress-gh-action-monorepo for a working example.\n\nFinally, you might not need this GH Action at all. For example, if you want to split the npm dependencies installation from the Cypress binary installation, then it makes no sense to use this action. Instead you can install and cache Cypress yourself.\n\nIf the project has many dependencies, but you want to install just Cypress you can combine this action with actions/cache and npm i cypress commands yourself.\n\n- uses: actions/checkout@v4 - uses: actions/cache@v4 with: path: | ~/.cache/Cypress node_modules key: my-cache-${{ runner.os }}-${{ hashFiles('package-lock.json') }} - run: npm i cypress - uses: cypress-io/github-action@v6 with: install: false\n\nYou can tell the CI to stop the job or the individual step if it runs for longer then a given time limit. This is a good practice to ensure the hanging process does not accidentally use up all your CI minutes.\n\nName Description cypress-io/cypress-example-kitchensink Runs every API command in Cypress using various CI platforms including GitHub Actions cypress-io/cypress-realworld-app A real-world example payment application. Uses GitHub Actions and CircleCI. cypress-gh-action-monorepo Splits install and running tests commands, runs Cypress from sub-folder cypress-examples Shows separate install job from parallel test jobs cypress-gh-action-split-jobs Shows a separate install job with the build step, and another job that runs the tests\n\nThis action installs local dependencies using lock files. Ensure that exactly one type of lock file is used for each project or working-directory from the following supported package managers:\n\nLock file Package Manager Installation command package-lock.json npm npm ci pnpm-lock.yaml pnpm pnpm install --frozen-lockfile yarn.lock Yarn Classic yarn --frozen-lockfile\n\nSee section Yarn Modern for information about using Yarn version 2 and later.\n\nThis action uses the debug module to output additional verbose logs. You can see these debug messages by setting the following environment variable:\n\nDEBUG: @cypress/github-action\n\nYou can set the environment variable using GitHub UI interface, or in the workflow file:\n\nSee the example-debug.yml workflow file.\n\nTo collect more verbose GitHub Action logs you can set a GitHub secret or variable ACTIONS_STEP_DEBUG to true. This is useful to see detailed caching steps. See Enabling debug logging from GitHub Actions documentation for more information.\n\nTo see the Cypress debug logs add an environment variable to the action:\n\nIf you have a problem with wait-on not working, you can check the src/ping.js logic from the local machine.\n\nclone this repository to the local machine\n\ninstall dependencies with npm install\n\nstart your server\n\nfrom another terminal call the ping yourself to validate the server is responding:\n\n$ node src/ping-cli.js <url>\n\nFor example\n\n$ node src/ping-cli.js https://example.cypress.io pinging url https://example.cypress.io for 30 seconds ::debug::pinging https://example.cypress.io has finished ok\n\nRead our blog post Drastically Simplify Testing on CI with Cypress GitHub Action\n\nRead Test the Preview Vercel Deploys blog post\n\nCreating actions docs\n\nIf you add workflow_dispatch event to your workflow, you will be able to start the workflow by clicking a button on the GitHub page, see the Test External Site Using GitHub Actions video.\n\nThis action sets a GitHub step output resultsUrl if the run was recorded on Cypress Cloud using the action parameter setting record: true (see Record test results on Cypress Cloud). Note that using a Custom test command with the command parameter overrides the record parameter and in this case no resultsUrl step output is saved.\n\nThis is an example of using the step output resultsUrl:\n\nThe GitHub step output dashboardUrl is deprecated. Cypress Dashboard is now Cypress Cloud.\n\nNote: every GitHub workflow step can have outcome and conclusion properties. See the GitHub Contexts documentation section steps context. In particular, the outcome or conclusion value can be success, failure, cancelled, or skipped which you can use in any following steps.\n\nSometimes you might want to print Cypress and OS information, like the list of detected browsers. You can use the cypress info command for this.\n\nIf you are NOT using the build command in your project, you can run the cypress info command:\n\nname: info on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: build: npx cypress info\n\nIf you are already using the build parameter, you can split the installation and the test steps and insert the cypress info command in between:\n\nSometimes you want to execute the workflow on a schedule. For example, to run Cypress tests nightly, you can schedule the workflow using cron syntax:\n\nBy default, the action produces a job summary in the GitHub Actions log for each workflow step where github-action is used. Each job summary shows a Passing / Failing status, the test counts for Passed, Failed, Pending & Skipped, followed by the Duration of the run. The job summaries are grouped by job.\n\nTo specify a title for a Job Summary, use the parameter summary-title. If no title is specified, then the default \"Cypress Results\" is used:\n\nThe name of the GitHub Actions job is shown at the top of one or more job summaries from the same job. If multiple summaries belong to the same job, then giving them separate titles allows them to be uniquely identified.\n\nSee the example-chrome.yml workflow, with multiple calls to cypress-io/github-action in one job, making use of the summary-title parameter. View the example-chrome.yml - actions log for an example of the resulting job summaries.\n\nThe default job summary can be suppressed by using the parameter publish-summary and setting its value to false.\n\nname: Example no summary on: push jobs: cypress-run: runs-on: ubuntu-22.04 steps: - name: Checkout uses: actions/checkout@v4 - name: Cypress run uses: cypress-io/github-action@v6 with: publish-summary: false\n\nNode.js is required to run this action. The recommended version v6 supports:\n\nNode.js 18.x, 20.x and 22.x\n\nand is generally aligned with Node.js's release schedule.\n\ngithub-action command-type options such as install-command, build, start and command are executed with the runner's version of Node.js. You can use GitHub's actions/setup-node to install an explicit Node.js version into the runner.\n\nCypress itself runs with a fixed Node.js version specified by the runs.using parameter of action.yml. github-action@v6 uses node20.\n\nView the CHANGELOG document for an overview of version changes.\n\ngithub-action@v6 is the current recommended version and uses node20\n\ngithub-action versions v1 to v5 are unsupported: they rely on Node.js 12 and 16 in End-of-life status.\n\nPlease see our Contributing Guideline which explains how to contribute fixes or features to the repo and how to test."
    }
}