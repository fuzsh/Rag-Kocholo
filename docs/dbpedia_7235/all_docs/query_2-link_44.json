{
    "id": "dbpedia_7235_2",
    "rank": 44,
    "data": {
        "url": "https://www.form3.tech/blog/engineering/prometheus-histograms",
        "read_more_link": "",
        "language": "en",
        "title": "Prometheus Histograms. Run that past me again?",
        "top_image": "https://www.form3.tech/favicon.ico",
        "meta_img": "https://www.form3.tech/favicon.ico",
        "images": [
            "https://www.form3.tech/_nuxt/img/logo-dark.339ede7.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_prismic-media/8c282df2a277de0ecc28807cc2171aa053d4bc54d2d7a3c085e7f7eb4d5ea7e0.png;rect=0,11,600,300&w=400&h=200",
            "https://www.form3.tech/_nuxt/img/arrow-right-teal.f8b08f0.svg",
            "https://www.form3.tech/_prismic-media/35a48199df613fd5d0d5b201d268decedf93e9cd5b5433a00bce64c6ede99807.png;rect=0,11,600,300&w=400&h=200",
            "https://www.form3.tech/_nuxt/img/arrow-right-teal.f8b08f0.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_prismic-media/0aa2294aa3128e346ee4657906a81b4ea7c935cf9a1c8766b7c0d1b0e00d67e5.png=compress,format&rect=0,0,300,300&w=240&h=240",
            "https://www.form3.tech/_nuxt/img/dark-angle-angle-front-and-back.2206315.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_nuxt/img/arrow-right-dark.dba56c9.svg",
            "https://www.form3.tech/_prismic-media/b231eebed9189bd9c321fb4ba75cfcfe9b9c9e57be34f69f7606ad8513e7950e.png;rect=0,11,600,300&w=400&h=200",
            "https://www.form3.tech/_nuxt/img/arrow-right-teal.f8b08f0.svg",
            "https://www.form3.tech/_prismic-media/ad412d85e59485d343c6c3f1bd1b5fc569e7f60f1342ab8d42612f61b783f92a.png%2Ccompress&rect=0%2C10%2C600%2C300&w=400&h=200",
            "https://www.form3.tech/_nuxt/img/arrow-right-teal.f8b08f0.svg",
            "https://www.form3.tech/_nuxt/img/logo-dark.339ede7.svg",
            "https://www.form3.tech/_prismic-media/ba44b7254087e2f5641a74d1f0f8da7eeac103b7dd0cf8289ffb3e740dfe47ca.png",
            "https://www.form3.tech/_prismic-media/f72c03ffefc8809109e9e46a6b772b8e45307e2bceffc775f0089d4a72be85c2.png",
            "https://www.form3.tech/_prismic-media/ec51beea08492713eaf49e8a6e037cde96c7c3f9f1fed684d96a325c8ca2bf5f.png",
            "https://www.form3.tech/_prismic-media/9f5d368d8291fa3e4377e3a24dd0f5acbc5f532ff865e5c66148df8efa97962b.png",
            "https://www.form3.tech/_prismic-media/3fd983bae248258d45a4a886c798fc13ba9d7e81d739dc25401df95e1672e49a.png",
            "https://www.form3.tech/_prismic-media/52dbe6d530b3aaacf7c14e2c118941669cb302852832bd05d88a4b1fa25076c6.png",
            "https://www.form3.tech/_prismic-media/3e90c8377aeb4f45e4579cc5c0f95c63a2db3107579938213a084415cf28cb28.png",
            "https://www.form3.tech/_prismic-media/2a008df8e22fdf899b2541c336394a66f401b4b2aff46ddaf7ad3e44a9444315.jpeg;rect=46,0,187,279&w=317&h=474 1024w,/_prismic-media/2a008df8e22fdf899b2541c336394a66f401b4b2aff46ddaf7ad3e44a9444315.jpeg;rect=0,0,279,279&w=352&h=352 640w",
            "https://www.form3.tech/_nuxt/img/github-circle-white-48px.cf33952.svg",
            "https://www.form3.tech/_nuxt/img/linkedin-circle-white-48px.ea7908f.svg",
            "https://www.form3.tech/_nuxt/img/chevron-down-20px-dark.2c1d915.svg",
            "https://www.form3.tech/_nuxt/img/chevron-down-20px-dark.2c1d915.svg",
            "https://www.form3.tech/_nuxt/img/chevron-down-20px-dark.2c1d915.svg",
            "https://www.form3.tech/_nuxt/img/chevron-down-20px-dark.2c1d915.svg",
            "https://www.form3.tech/_nuxt/img/linkedin-line-dark.04daa3c.svg",
            "https://www.form3.tech/_nuxt/img/twitter-line-dark.3d5eff8.svg",
            "https://www.form3.tech/_nuxt/img/youtube-line-dark.c7bad6c.svg",
            "https://www.form3.tech/_nuxt/img/instagram-line-dark.f92ab92.svg",
            "https://www.form3.tech/_nuxt/img/linkedin-line-dark.04daa3c.svg",
            "https://www.form3.tech/_nuxt/img/twitter-line-dark.3d5eff8.svg",
            "https://www.form3.tech/_nuxt/img/youtube-line-dark.c7bad6c.svg",
            "https://www.form3.tech/_nuxt/img/instagram-line-dark.f92ab92.svg",
            "https://www.form3.tech/_nuxt/img/aws-partner-icon-dark.3ec7b9c.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Prometheus Histograms"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Having read about the difference between Prometheus histograms and summaries, Andy found himself thinking, \"run that past me again?\". In other words, he still had no idea what the difference was and was very much in the dark when it came to making an enlightened choice about how to instrument applications and start querying the results. This post is a summary (excuse the pun) of what he subsequently learnt about histograms and how they can be used.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I recently found myself in the position where I needed to do some detailed analysis of how long things were taking in a distributed software system. This is a solved problem from the communityâs point of view with tools likeÂ Prometheus.\n\nThis blog post assumes you are familiar with the differentÂ types of metricÂ Prometheus has to offer and are aware of the fact that real-time, dynamic values can be measured usingÂ histograms or summaries.\n\nHaving read about the difference betweenÂ histograms and summaries, I found myself thinking, ârun that past me again?â. In other words, I still had no idea what the difference was and was very much in the dark when it came to making an enlightened choice about how to instrument my application and start querying the results.\n\nThis post is a summary (excuse the pun) of what I subsequently learnt about histograms and how they can be used. If youâre already a Prometheus black-belt, read no further. If you still donât know what Iâm talking about, read on!\n\nBefore we talk about histograms in Prometheus, letâs re-cap histograms in general. I think itâs normal at times like this to quote theÂ wikipedia definition, but in this case Iâm not sure thatâs helpful.\n\nA histogram is a way of summarising (not in the Prometheus sense!) how some data is distributed - how many of the values were high, how many were low and how many were somewhere in between.\n\nTake a look at this histogram:\n\nIt shows the distribution of a dataset. Some values are low (<=10), some are medium (>10 and <=100) and some are high (>100 and <=1000). The histogram groups the data into buckets based on these ranges and counts how many values are in each bucket. This gives us some insight into how the data is distributed across its range of values. When deciding how to draw a histogram, you normally choose bucket ranges that are sensible for the data and meaningful to the analysis.\n\nNow that we know what a histogram is, letâs talk about Prometheus histograms. Prometheus histograms are a little different to the above example in three ways:\n\nThe buckets are cumulative - that is to say that each bucket contains values less than or equal to the bucketâs upper threshold.\n\nA Prometheus histogram metric is also a time series - the example we say above can be thought of a simple example of a Prometheus histogram at an instant in time. But, Prometheus records these histograms over time so things are a little more complicated when you start writing queries.\n\nThe time series itself is cumulative - the buckets in the histogram are always increasing so that the most recent instance of the histogram shows the total values for each of the buckets since the metric was first recorded.\n\nLetâs focus on each of these differences in turn.\n\n1. The buckets are cumulative\n\nIn the above example, each bucket was exclusive of the values on either side. The values that were less than or equal to 10 only appeared in the <=10 bucket and not in any of the others.\n\nPrometheus histograms are cumulative. In Prometheus, our example above would have different buckets: <=10, <=100 and <=1000. Letâs see how this would look:\n\nYou can see that now, each bucket is bigger than the one before and contains a sum of all values up until the bucketâs threshold.\n\n2. Prometheus histograms are time seriesâ\n\nPrometheus scrapes metrics from a process at intervals. Each time it scrapes a histogram metric, it will receive a histogram similar to the one above - a cumulative histogram with âless than or equal toâ buckets.\n\nWhatâs important to understand is that when youâre querying the histogram, youâre suddenly dealing with a time series of histograms. The histogram metric itself contains a range of valuesâone for each point in time that a scrape occurredâand each value represents a histogram like the one above.\n\nEach histogram valueâscraped at a scrape intervalâsummarises the distribution of values recorded by the process since the last scrape.\n\n3. The time series itself is cumulative\n\nEach time the histogram is scraped by Prometheus, the values are not reset. This means that the counts in each bucket are cumulative over the lifetime of the metric (at least in the memory of each process) and that itâs really theÂ changeÂ in each bucketâs values the tells us the distribution of observations since the last scrape.\n\nSeeÂ hereÂ for the full file, but note that all weâre doing in this application is observing a random number between 0 and 5 once every second. The random number is a float, so each value will likely be different. Weâre expecting the histogram to count the observations that fall into each of the buckets, which are separated by a value of 1.\n\nBucket thresholds are floats too, but in this example Iâve chosen integers to try to make things simpler.\n\nYou may notice when youâre typing histogram_metric that two other metrics are listed as well: histogram_metric_count and histogram_metric_sum. This is because, in addition to the data that represents a histogram as we discussed above, histogram metrics in Prometheus also expose a cumulative count of all observations and a cumulative sum of all observations. This is particularly useful if, for example, you want to know the average duration of some thing as well as how many times per second it happened - the_count series can be used with the rate()function to give you the per-second rate of change\n\nOK, so what are we looking at when we query the metric? There are a few key points to note:\n\nWe are looking at anÂ instant vector, which means weâre seeing the latest set of values scraped by Prometheus (as opposed to a range of values over time). In other words, weâre looking at a cumulative histogram just like the example we discussed above.\n\nEach time Prometheus scrapes a histogram, it collects an instant vector like this one.\n\nAfter the metric name inÂ {}Â are a set ofÂ labelsÂ which add dimensions to the histogramâs data (you can filter the values based on label criteria).\n\nThe most important of these is theÂ leÂ label which is the âless than or equal toâ bucket threshold.\n\nThe value forÂ le=1Â is the cumulative count of all observations <=1. The same is true for the otherÂ leÂ values, which is why the counts always increase as the value ofÂ leÂ increases - all the buckets are cumulative.\n\nSo, now we have a cumulative count of all observations in each of our buckets. Whilst that (hopefully) makes sense so far, itâs not particularly useful for helping us understand the underlying distribution of the observations made in our instrumented program. We need a good way to query histograms.\n\nThe frequency of observations\n\nFirst of all, before we dive into understanding the distribution of values in our histogram, letâs just back-track to the fact that the histogram also exposes aÂ _countÂ which we can use to understand the frequency of observations per second. This might be particularly useful in the example of recording HTTP request durations - the histogramÂ _bucketÂ series will tell you how long the requests tool, but theÂ _countÂ series can also be used to tell you how many requests were made per second. Understanding the rate of observations is easy with the following Prometheus query:\n\nrate(histogram_metric_count[1m])\n\nThis query takes the observations for the last minute ([1m]) and calculates the per-second rate of change of the count, thus giving us the number of observations per second.\n\nThe distribution of observations\n\nThis is where the real magic happens. We have some high-frequency event (again, think web requests) where a large number of observations (e.g. request durations) are made in-between each of Prometheusâ scrape intervals. We use a histogram metric to record the observations and now we want to query the metric to give us some insight into how the values are distributed within the scrape interval and over time.\n\nLetâs build up the query step-by-step. First, letâs just query the metric withÂ histogram_metric_bucket:\n\nHere you can see that over the last minute the approximate value of our observations at the 95th percentile is 4.72. Insight! Remember that each time Prometheus scrapes the value of the histogram, itâs pulling back a cumulative count of all the buckets in our histogram (just like the examples at the beginning of this blog). Over time (e.g. the one minute interval in this example), thatâs a lot of data and, over a time-series (e.g. a chart showing the last 6 hours), thatâs a lot of data to summarise! There are lots of ways to try to glean insight from this data, but the example given here is the simplest. You might want to try querying different quantiles to see how your system is performing - youâd find the median value at quantile 0.5 and the maximum values at quantile 1.0.\n\nAt Form3, we run a distributed system with lots of components communicating over HTTP, or via message brokers. We use Prometheus Histograms extensively to instrument things like processing times, because they allow us to aggregate telemetry from all the replicas of our services and gain insight into the distribution of a large number observations from all over our platform.\n\nWe find Prometheus itself to be an indispensable monitoring tool, and make use ofÂ Grafana CloudÂ to provide a robust monitoring stack, with long-term metrics storage."
    }
}