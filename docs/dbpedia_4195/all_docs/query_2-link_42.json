{
    "id": "dbpedia_4195_2",
    "rank": 42,
    "data": {
        "url": "https://stella-emu.github.io/docs/index.html",
        "read_more_link": "",
        "language": "en",
        "title": "platform Atari 2600 VCS emulator",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://stella-emu.github.io/docs/graphics/stella_icon.png",
            "https://stella-emu.github.io/docs/graphics/console.png",
            "https://stella-emu.github.io/docs/graphics/chucky_cheese.png",
            "https://stella-emu.github.io/docs/graphics/space_invaders.png",
            "https://stella-emu.github.io/docs/graphics/pacman.png",
            "https://stella-emu.github.io/docs/graphics/jr_pacman.png",
            "https://stella-emu.github.io/docs/graphics/secret_quest.png",
            "https://stella-emu.github.io/docs/graphics/launcher.png",
            "https://stella-emu.github.io/docs/graphics/commandmenu.png",
            "https://stella-emu.github.io/docs/graphics/qwertz.png",
            "https://stella-emu.github.io/docs/graphics/timemachine.png",
            "https://stella-emu.github.io/docs/graphics/highscores.png",
            "https://stella-emu.github.io/docs/graphics/options.png",
            "https://stella-emu.github.io/docs/graphics/options_video.png",
            "https://stella-emu.github.io/docs/graphics/options_video_palettes.png",
            "https://stella-emu.github.io/docs/graphics/options_video_tv.png",
            "https://stella-emu.github.io/docs/graphics/options_audio.png",
            "https://stella-emu.github.io/docs/graphics/options_emulation.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping.png",
            "https://stella-emu.github.io/docs/graphics/options_misc.png",
            "https://stella-emu.github.io/docs/graphics/options_misc_dark.png",
            "https://stella-emu.github.io/docs/graphics/options_misc_classic.png",
            "https://stella-emu.github.io/docs/graphics/options_misc_light.png",
            "https://stella-emu.github.io/docs/graphics/options_ui.png",
            "https://stella-emu.github.io/docs/graphics/launcher_options_snapshots.png",
            "https://stella-emu.github.io/docs/graphics/options_developer.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_emulation.png",
            "https://stella-emu.github.io/docs/graphics/romaudit.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping_remap.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping_combo.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping_devsports.png",
            "https://stella-emu.github.io/docs/graphics/eventmapping_mouse.png",
            "https://stella-emu.github.io/docs/graphics/options_ui.png",
            "https://stella-emu.github.io/docs/graphics/rominfo_1x_small.png",
            "https://stella-emu.github.io/docs/graphics/rominfo_1x_large.png",
            "https://stella-emu.github.io/docs/graphics/rominfo_2x_small.png",
            "https://stella-emu.github.io/docs/graphics/show_roms.png",
            "https://stella-emu.github.io/docs/graphics/show_all.png",
            "https://stella-emu.github.io/docs/graphics/show_current_dir.png",
            "https://stella-emu.github.io/docs/graphics/show_sub_dirs.png",
            "https://stella-emu.github.io/docs/graphics/open_help.png",
            "https://stella-emu.github.io/docs/graphics/navigation_buttons.png",
            "https://stella-emu.github.io/docs/graphics/reload_list.png",
            "https://stella-emu.github.io/docs/graphics/launcher_override.png",
            "https://stella-emu.github.io/docs/graphics/romaudit.png",
            "https://stella-emu.github.io/docs/graphics/options_developer_emulation.png",
            "https://stella-emu.github.io/docs/graphics/options_developer_tia.png",
            "https://stella-emu.github.io/docs/graphics/options_developer_video.png",
            "https://stella-emu.github.io/docs/graphics/options_developer_timemachine.png",
            "https://stella-emu.github.io/docs/graphics/options_developer_debugger.png",
            "https://stella-emu.github.io/docs/graphics/developer_stats.png",
            "https://stella-emu.github.io/docs/graphics/cheat.png",
            "https://stella-emu.github.io/docs/graphics/logs.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_emulation.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_console.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_controller.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_quadtari.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_cartridge.png",
            "https://stella-emu.github.io/docs/graphics/options_gameinfo_highscores.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Stella\n\nA multi-platform Atari 2600 VCS emulator\n\nRelease 6.7.1\n\nUser's Guide\n\nContents\n\nA Brief History of the Atari 2600\n\nIntroduction\n\nFeatures\n\nGetting Started\n\nRequirements\n\nInstallation\n\nLocating Game Images (aka ROMs)\n\nPlaying a Game\n\nKeyboard Layout\n\nHotkeys\n\nController Map\n\nStella's 'Time Machine'\n\nHigh Scores Saving\n\nAdvanced Configuration\n\nUsing the Command Line\n\nChanging Options\n\nEvent Remapping/Input Devices\n\nROM Launcher\n\nROM Launcher Viewer\n\nFavorite ROMs and Directories\n\nROM Launcher Context Menu\n\nROM Audit Mode\n\nStelladaptor/2600-daptor Support\n\nAtariVox/SaveKey Support\n\nDeveloper Options/Integrated Debugger\n\nUser Data\n\nCheatcode Manager\n\nViewing the System Log\n\nGame Properties\n\nPalette Support\n\nAcknowledgments\n\nLicense and Disclaimer\n\nFebruary 1999 - January 2024 The Stella Team Stella Homepage\n\nA Brief History of the Atari 2600\n\nIn the early 1970's, video arcade games gained commercial success for the first time. The American public was introduced to Pong, Tank, and other interactive video games which populated amusement parks, bars, and arcades. The games were successful enough to create interest for home versions, so in 1975 Atari released Home Pong and it was a smash hit. Other companies such as Magnavox and Coleco followed suit and released their own dedicated console games. Then in 1976, Fairchild Camera and Instrument introduced the Channel F system, the first cartridge based home video game system. The industry recognized that cartridge systems were the future of video gaming, and began development in that direction. In January 1977, RCA released the Studio II, another cartridge based system, although it only projected in black and white and seemed to be focused on educational titles. Then, in October 1977, Atari released the Atari VCS (Video Computer System) with an initial offering of nine games. This system, later renamed the Atari 2600, took the industry by storm and dominated the marketplace for years to come.\n\nBecause of oversupply, the Christmas season of 1977 was very rough on the video game industry, and the Atari 2600 was the only system that managed to emerge unscathed. Atari enjoyed strong sales in 1978 and a fantastic holiday season, as Atari released more games such as Outlaw, Spacewar, and Breakout. Internally however, Atari was at odds. Nolan Bushnell, the inventor of pong and founder of Atari, wound up leaving the company and purchased Pizza Time Theater, which later became the successful Chuck E. Cheese! In 1979 Atari continued their trend and released 12 more games which met with continued success. However, Atari was now facing some stiffer competition from the Mattel Intellivision and the Magnavox Odyssey2.\n\nAtari needed a mega-hit in 1980 in order to squash the competition, and they found it in the home version of a game from Japan called Space Invaders. It was so popular that people were buying the Atari 2600 just so they could play Space Invaders at home. Following that, Atari released Adventure, which was the first video game to contain an Easter Egg - placing an object in a certain area revealed the programmer's name, Warren Robinett. 1980 was important for another reason - the creation of the first ever third party software producer, Activision. The company was formed by four Atari employees who were unsatisfied with the working conditions at the company. They released four games initially: Dragster, Fishing Derby, Checkers and Boxing. The games were very well received by the public, and revealed that the Atari 2600 was capable of better games than Atari themselves had been producing. Atari tried to prevent Activision from selling games, but they failed and Activision grossed $70 million that year.\n\nBy 1981, the video game industry was basically a horse race between the 2600 and the Intellivision. While the Intellivision was technologically superior in some respects, the 2600 continued to lead in sales. Atari released the home version of Asteroids, which was a huge success. Inspired by the success of Activision, another software development group called Imagic was formed. They would not release any games until 1982 however. Another company, Games by Apollo, was formed in Texas and released several games that year.\n\nColeco entered the market in 1982 with the release of the graphically superior Colecovision. To combat this new system, Atari produced the 5200, a technologically comparable system. The 2600 dropped $100 in price in order to remain competitive. Then a company called Arcadia released a peripheral called the Supercharger which played games in an audio cassette medium. This allowed for multiple loads and expanded the 2600's capabilities.\n\nAtari released Pac-Man and E.T. that year, two incredibly hyped games which were critical flops. Although Pac-Man sold many copies, it was considered to be a poor translation of the arcade hit. However, there were many fantastic games produced for the 2600 during this period, and it was still selling strong.\n\nEver since the inception of Activision, Atari had been fighting to keep third parties from producing cartridges which they felt were stealing profits from them. Finally the issue was settled when Atari agreed to allow third party manufacturing in exchange for a royalty. Suddenly software companies began popping up all over, and 1982 saw releases from companies like Venturevision, Spectravision, Telesys, CBS, 20th Century Fox, US Games, M Network, Tigervision, Data Age, Imagic and Coleco. There was even a company that released a line of X-Rated games for the 2600 called Mystique. The year was financially successful for Atari, however there seemed to be a glut of software. Although there were many quality titles still produced, there was an increasing number of rushed games as manufacturers attempted to cash in on the craze.\n\nMore companies jumped on the band wagon in 1983. Zimag, Ultravision, Amiga, and others were also producing games and peripherals. It seemed as if there was just too much product to meet the demand, and as it turned out there was. By the end of the year, companies began folding. US Games, Data Age, Games by Apollo, Telesys and others all closed their doors from poor sales. A video game crash was occurring, and all companies were taking it on the chin.\n\n1984 was a much more subdued year for the Atari 2600, and the price of the system had now dropped to $40-$50. Many were saying that the video game industry was dead. However, Atari surprised everyone by announcing the release of the 7800, and also promising more 2600 games with improved graphics and sound. Unfortunately, neither of these things happened in 1984 because Atari sold their home video game division to Jack Tramiel who believed that home computers would replace video game systems. No further mention of the 2600 or 7800 was made that year, and it appeared that they might be dead.\n\n1985 was another very quiet year for Atari and video games in general, and only a few games were released for the 2600. Activision produced Cosmic Commuter and Ghostbusters, but with little fanfare or marketing, these games did not sell well. However, because of the huge game library and cheap price, Atari still sold over a million 2600 consoles in 1985.\n\nThere were very few plans for home video game systems by any company in 1986, since the market appeared to be dead. Then, to most people's surprise, Nintendo brought the NES to America and it was a smash hit, proving that video games still had a place in the US. Atari decided that maybe it would be a good idea to release the 7800 units it had in storage, and produce some more 2600 games. The 7800 was released with only 3 games initially available, although it was compatible with the 2600 library. They also redesigned the 2600 as the 2600 Jr., a machine with the same abilities, but a new look and marketing campaign. It was sold for less than $50.\n\nVideo games were once again selling phenomenally in 1987. Atari released several new titles, including Jr. Pac-Man, and also licensed a number of games from other companies such as Donkey Kong and Q*Bert. These new titles sold for $10-$15. Interestingly, a number of titles began appearing again from third part companies such as Epyx, Froggo, and Exus. It seemed that the 2600 was not dead yet!\n\nIn 1988, Atari rehired Nolan Bushnell and announced a number of new titles, including Secret Quest, a game written by Mr. Bushnell himself. Atari continued to manufacture these games even until 1989. However, it was apparent that the 2600, after its introduction over a decade ago, was finally at the end of its run. Although it was still produced and marketed outside of the US, the Atari 2600 finished its run in America. No other console has had such a long history or sold as many systems in the U.S.\n\nToday, the 2600 still has a large number of fans who remember the countless games played over the years, and the years to come. There are even games being produced by hobbyists, some of them quite professionally, being released on newly burnt cartridges with labels and manuals. And the recent trend in retrogaming has brought many more video game fans to rediscover the 2600, and it continues to live on 22 years after its release!\n\nAlexander Bilstein\n\nFebruary 1999\n\nIntroduction\n\nStella is a freely distributed multi-platform Atari 2600 VCS emulator; originally developed for Linux by Bradford W. Mott, it is now maintained by Stephen Anthony. Stella allows you to enjoy all of your favorite 2600 games once again by emulating the 2600's hardware with software. Stella is written in C++, which allows it to be ported to other operating systems and architectures. Since its original release Stella has been ported to AcornOS, AmigaOS, DOS, FreeBSD, Linux, MacOS, OpenStep, OS/2, Unix, and Windows, as well as consoles such as Sega Dreamcast, GP2X, Nintendo DS and Playstation Portable (among others).\n\nFeatures\n\nHigh speed emulation using optimized C++17 code\n\nSupports high quality TIA emulation using the cycle-exact TIA core from 6502.ts by Christian Speckner\n\nSupports high quality sound emulation using code derived from Chris Brenner's Atari 2600 FPGA project, including cycle-exact audio, analog interference from mixing of audio channels, as well as stereo sound support; dynamic sound resampling is also included\n\nEmulates the Atari 2600 Joystick, Paddle, Driving, CBS Booster Grip, Sega Genesis, QuadTari controllers using your computer's keyboard, joysticks or mouse\n\nEmulates CX22/CX80 style Trak-Balls, Amiga/Atari mouse, MindLink controller and the Light Gun using your computer's mouse\n\nEmulates the Atari 2600 Keyboard controllers using your computer's keyboard\n\nEmulates Spectravideo CompuMate system using your computer's keyboard, including mapping of CompuMate 'Backspace', 'Space' and 'Enter' functionality to to the actual keys on your keyboard\n\nSupports autodetection for most common controller types\n\nSupport for real Atari 2600 controllers using the Stelladaptor and 2600-daptor/2600-daptor II\n\nSupport for the speech portion of a real AtariVox device connected to your PC using a USB adaptor\n\nSupports EEPROM emulation for AtariVox and SaveKey controllers, as well as FLASH support in various cartridge schemes\n\nSupports all known bankswitching schemes (let us know if there's one we missed)\n\nSupports DPC+/CDF(J)(+) bankswitching schemes from the Harmony Cart, including partial emulation of the ARM processor\n\nSupports cartridge autodetection for almost all bankswitching schemes\n\nSupports using ROM filename extensions to force specific bankswitching schemes\n\nSupports using ROM filename to force specific display formats\n\nSupports Supercharger single-load and multi-load games\n\nSupports the usual raw A26/BIN/ROM formats, also when stored in ZIP files\n\nSupports property file for setting the properties associated with games\n\nSupports the NTSC, PAL and SECAM television standards in 50Hz and 60Hz mode\n\nSupports autodetection of display format for 50Hz vs. 60Hz modes\n\nSupports most \"undocumented features\" of the TIA graphics chip used by some games\n\nTIA emulation supports full collision checking, with ability to disable TIA sprites and collisions for each object separately\n\nFull system state save/load functionality\n\nAutomatic save state creation ('Time Machine') which allows moving back and forth in the recorded timeline\n\nTracking of user favorites and popular or recently played ROMs.\n\nHigh scores saving (internal or via PlusROM High Score Club)\n\nCross-platform UI including a built-in ROM launcher frontend\n\nBuilt-in extensive debugger, including static analysis with the Distella disassembler and dynamic analysis at runtime by tracking code/graphics/data sections, and generation of DASM-compatible disassembly files\n\nEmulation of CRT TV systems using Blargg filtering, including presets for several common TV outputs (Composite, S-Video, RGB, etc.), and ability to fully customize many attributes (contrast, brightness, saturation, gamma, etc.).\n\nBuilt-in ROM database with information partially compiled by RomHunter\n\nGetting Started\n\nRequirements\n\nThe following sections outline the basic system requirements for running Stella under various operating systems.\n\nGeneral (required for all versions of Stella)\n\nSDL version 2.0.5 or greater, latest version highly recommended\n\n15/16 bit color minimum; 24/32 bit color graphics card highly recommended\n\nEnough RAM for the OS + 256MB RAM for the emulation; 512MB+ highly recommended\n\nJoysticks or gamepads are highly recommended\n\nMouse or Stelladaptor/2600-daptor with real paddles required for paddle emulation\n\nSome ROM images (see AtariAge for more information)\n\nLinux/UNIX\n\nThe Linux version of Stella is designed to work on a Linux Workstation with the following:\n\ni386 or x86_64 class machine, with 32 or 64-bit distribution\n\nOther architectures (MIPS, PPC, PPC64, etc.) have been confirmed to work, but aren't as well tested as i386/x86_64\n\nGNU g++ v/7 or Clang v/5 (with C++17 support) and the make utility are required for compiling the Stella source code\n\nMacintosh\n\nThe Mac version of Stella is designed to work on an Apple Macintosh with the following:\n\nmacOS 10.7 or above\n\n64-bit Intel processor\n\nXcode 8.0 is required to compile the Stella source code\n\nWindows\n\nThe Windows version of Stella is designed to work on Windows 7/8/10/11 with the following:\n\nVisual C++ 2019 Community is required to compile the Stella source code\n\nOther\n\nStella is extremely portable, and in its lifetime has been ported to almost every platform where the SDL library exists. It is 32/64-bit and endian clean in Linux/Unix, macOS and Windows. The Stella Team is interested in hearing about any problems you may encounter with diverse operating systems and CPU types.\n\nInstallation\n\nStella is distributed in both source and binary form. In general, you should always download and install the appropriate binary version. Compiling from source is only recommended for developers, or if the binary version doesn't work for some reason. Once you have a Stella distribution you should follow the instructions for your operating system given below.\n\nLinux/UNIX\n\nBinary DEB (stella-release-1_arch.deb)\n\nInstall the binary DEB with the following command:\n\ndpkg -i stella-release-1_arch.deb\n\nBinary RPM (stella-release-1.arch.rpm)\n\nInstall the binary RPM with the following command:\n\nrpm -Uvh stella-release-1.arch.rpm\n\nBuilding and installing from source code\n\nSee the developers build instructions at the Stella Development Page.\n\nMacintosh\n\nBinary DMG file (Stella-release-macos.dmg)\n\nDouble-click the disk image, open the 'Stella' folder, then copy the Stella.app package to your 'Applications' folder.\n\nBuilding and installing from source code\n\nSee the developers build instructions at the Stella Development Page.\n\nWindows\n\nBinary EXE installer (stella-release-arch.exe)\n\nDouble-click on the installer and follow the onscreen instructions\n\nBinary ZIP file (stella-release-windows.zip)\n\nUnzip the binary ZIP file using Winzip or Total Commander\n\nCopy the contents of either 32-bit or 64-bit directory somewhere on your system\n\nBuilding and installing from source code\n\nSee the developers build instructions at the Stella Development Page.\n\nLocating Game Images (aka ROMs)\n\nCartridges\n\nMost games for the Atari 2600 came on cartridges. A cartridge usually consists of a single Read Only Memory (ROM) chip which contains the data and code for the game. Plugging a cartridge into the Atari 2600 allows the 2600's microprocessor to access the program stored on the cartridge.\n\nIn a similar way you must \"plug\" a copy of a cartridge into Stella when you want to play it. Having a ROM image/BIN file of the cartridge allows you to do this. A ROM image is a file, which contains the actual data and code read from the cartridge. There are several ways to obtain a ROM image of a cartridge:\n\nSearch around the internet and find ROM images to download (websites such as AtariAge and AtariMania/RomHunter may be useful). Many homebrewers make their ROMs available too.\n\nYou can purchase the Atari 2600 Action Packs by Activision and use their ROM images\n\nIf you're handy with a soldering iron then you can design and build a device that plugs into a PC and read the data from the cartridge\n\nWARNING: It may be illegal to use ROM images of games that you do not actually own since these games may still be copyrighted.\n\nSupercharger Cassettes\n\nSupercharger games were not stored on cartridges instead they were stored on cassette tapes. The Supercharger, which plugged into the Atari 2600's cartridge slot, loaded games into its 6K of Random Access Memory (RAM) using a standard audio cassette player. The Supercharger also supported multi-loading, which allowed games to be broken into several segments and loaded at different times. This was useful for large games which had distinct parts such as role playing games.\n\nMost of the available Supercharger ROM images are stored in 8448 bytes files. However, ROM images of multi-load games are sometimes stored in a set of 8448 byte files. The names of these files have a two character sequence number in them which indicates what load they are. The sequence starts with zero, skips a few numbers and then increments by one.\n\nStella supports multi-load games, however, the set of ROM images must be combined into a single ROM image file. For example to create a multi-load ROM image file for Survival Island you would do the following under Unix:\n\n% cat survivl0.bin survivl6.bin survivl7.bin > survivl.bin\n\nor to create it under DOS you would:\n\n% copy /b survivl0.bin+survivl6.bin+survivl7.bin survivl.bin\n\nOnce you have the multi-load ROM image file, survivl.bin in this case, you can play the game using it.\n\nSupported File formats\n\nStella supports ROMs ending with extensions .a26, .bin, .rom, and .zip. For the ZIP archive format, Stella will look into the archive and if it contains only one ROM image file, Stella will automatically load it. If an archive contains many such files, Stella will display a virtual filesystem with the contents of the archive. This can be then browsed like a normal directory.\n\nOther extensions are also possible, namely to force a specific bankswitch scheme. Normally, the bankswitching scheme for a ROM is determined automatically, or manually by setting a ROM property, and you never have to do anything yourself. However, it is also possible to force the bankswitch type to use by adding a special filename extension. These extensions are listed in the ROM properties section under Cart.Type -> File Extension.\n\nNote: These extensions are the same as those used by the Harmony Cart and Unocart and are not case-sensitive, so you can name your files and have them work across all applications. Again, to be clear, this is only necessary when you want to override the default bankswitching scheme for a ROM. This will not normally be necessary.\n\nPlaying a Game\n\nOnce Stella is installed and you have some ROM images you're almost ready to start playing.\n\nIntegrated GUI\n\nStella contains an integrated GUI for all ports. Commandline support is also available for those who want to use it.\n\nIf you start Stella and do not specify a ROM image, it will start in 'ROM Launcher' mode:\n\nIf this is your first time starting Stella, you may have to navigate to your ROMs. The path of the first ROM you play automatically defines the default ROM path. You can change it later in the ROM Launcher dialog.\n\nAt this point, you may want to set the locations for snapshot images. This is described in more detail in ROM Launcher. These settings are optional, and can be left at the defaults if you won't be using snapshots in the ROM launcher.\n\nYou can start emulation by selecting a ROM and pressing 'Enter' or clicking 'Select', or double-clicking a ROM. Note that some games require you to 'Reset' the console before you start playing. In this case, you need to hit the virtual reset switch, which by default is the F2 key. Also, some games may require that you press the joystick fire button to begin, which by default is the Left Control or Space key(s), or button 0 on your joystick. If a game uses a more complex controller, see Getting Started - Keyboard Layout for more information. To exit a game and re-enter the ROM launcher, press the 'Escape' key.\n\nUsing the 'Search' textbox in the upper row of the ROM launcher, the listing can be narrowed down, showing only the ROMs that match the pattern you enter.\n\nWhile the file listing is in focus, you can type some characters, and the listing will 'jump' to the file that matches what you typed. This is case-insensitive. Hold down the Shift key on the first character to select directories instead. The delay between successive keypresses being treated as part of one word is controlled by the 'listdelay' option; see User Interface Settings to change this setting.\n\nCommand Menu\n\nWhile playing a game, normally one would use the keyboard shortcuts for controlling the 'virtual' switches in Stella (ie, the commands associated with the function keys as described in Playing a Game - Hotkeys). However, another alternative is available. Pressing the '\\' key (default) toggles a command menu dialog as follows:\n\nThis dialog contains a set of buttons that represent the same functionality as the function keys and display the current state. You may find this useful if you cannot remember all the function key events, or you wish to use Stella without a keyboard (ie, in a standalone gaming system).\n\nNote: Clicking the `?` at the top right opens this document at the related paragraph. This works for almost all dialogs. There is also a hotkey defined for help (see Hotkeys).\n\nKeyboard Layout\n\nThe Atari 2600 console controls and controllers are mapped to the computer's keyboard as shown in the following tables. However, most of these events can be remapped to other keys on your keyboard or buttons on your joystick (see Advanced Configuration - Event Remapping). The tables below show the default settings.\n\nNote: All key names are based on the US QWERTY keyboard layout. If you use a different layout some keys may differ. You can use the following layout image as reference where to find the US keys on your keyboard.\n\nHotkeys\n\nConsole Controls (can be remapped)\n\nFunction Key (Standard) Key (macOS) Exit Stella Control + Q Cmd + Q Exit game, enter ROM Launcher Escape Escape Enter/exit Options Menu Tab/Escape Tab/Escape Enter/exit Command Menu Backslash (\\)/Escape Backslash (\\)/Escape Enter/exit Debugger Backquote (`)/Escape Backquote (`)/Escape Select Game F1 F1 Reset Game F2 F2 Color TV F3 F3 Black/White TV F4 F4 Left Player Difficulty A F5 F5 Left Player Difficulty B F6 F6 Right Player Difficulty A F7 F7 Right Player Difficulty B F8 F8 Save state to current slot F9 F9 Save all Time Machine states Alt + F9 Cmd + F9 Change to previous state slot Shift + F10 Shift + F10 Change to next state slot F10 F10 Automatically change state slot Alt + F10 Cmd + F10 Load state from current slot F11 F11 Load all states into Time Machine Alt + F11 Cmd + F11 Save PNG snapshot F12 F12 Pause/resume emulation Pause Shift-Cmd + P\n\nJoystick/Booster Grip Controller (can be remapped)\n\nSega Genesis Controller (cannot be remapped, always associated with joystick and Booster Grip controllers)\n\nDriving Controller (can be remapped)\n\nTrackball Controller (uses mouse, left port only)\n\nLeft Trackball Function Key Fire Button Same as Left Joystick 'Fire'\n\nLight Gun Controller (uses mouse, left port only)\n\nLeft Light Gun Function Key Fire Button Same as Left Joystick 'Fire'\n\nPaddle Controller digital emulation (can be remapped)\n\nKeyboard Controller (can be remapped)\n\nCompuMate Controller (cannot be remapped)\n\nCompuMate Key 0 - 9 0 - 9 A - Z A - Z Comma Comma Period Period Func Control (left or right) Shift Shift (left or right) Enter Return/Enter Space Space Func-Space Backspace + + or Shift + 1 - - or Shift + 2 * Shift + 3 / / or Shift + 4 = = or Shift + 5 ? ? (Shift + /) or Shift + 6 $ Shift + 7 [ [ or Shift + 8 ] ] or Shift + 9 \" \" (Shift + ') or Shift + 0\n\nAudio & Video Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Toggle sound Control + ] Control + ] Decrease volume Alt + [ Cmd + [ Increase volume Alt + ] Cmd + ] Switch to next larger zoom level in windowed mode, toggle stretching in fullscreen mode Alt + = Cmd + = Switch to next smaller zoom level in windowed mode, toggle stretching in fullscreen mode Alt + - Cmd + - Toggle windowed/fullscreen mode Alt + Return Cmd + Return Toggle adapting display refresh rate to game frame rate Note: Not available for macOS Alt + R - Decrease overscan in fullscreen mode Shift + PageDown Shift-Fn + Down arrow Increase overscan in fullscreen mode Shift + PageUp Shift-Fn + Up arrow Move display down (uses \"Display.VCenter\") Alt + PageDown Cmd-Fn + Down arrow Move display up (uses \"Display.VCenter\") Alt + PageUp Cmd-Fn + Up arrow Toggle aspect ratio correct scaling Control + C Control + C Decrease vertical display size Shift-Alt + PageUp Shift-Cmd-Fn + Up arrow Increase vertical display size Shift-Alt + PageDown Shift-Cmd-Fn + Down arrow Switch to previous display format (NTSC/PAL/SECAM etc.) Shift-Control + F Shift-Control + F Switch to next display format (NTSC/PAL/SECAM etc.) Control + F Control + F Toggle display interpolation (not available for Software renderer) Control + I Control + I These settings can also be changed using Global Keys\n\nPalettes Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Select previous palette (Standard/z26/User/Custom) Shift-Control + P Shift-Control + P Select next palette (Standard/z26/User/Custom) Control + P Control + P Select previous palette attribute Shift-Alt + 9 Shift-Cmd + 9 Select next palette attribute Alt + 9 Cmd + 9 Decrease selected palette attribute Shift-Alt + 0 Shift-Cmd + 0 Increase selected palette attribute Alt + 0 Cmd + 0 These settings can also be changed using Global Keys\n\nTV effects Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Select previous TV effects preset Shift-Alt + 1 Shift-Cmd + 1 Select next TV effects preset Alt + 1 Cmd + 1 Select previous 'Custom' mode attribute (*) Shift-Alt + 2 Shift-Cmd + 2 Select next 'Custom' mode attribute (*) Alt + 2 Cmd + 2 Decrease 'Custom' selected attribute value (*) Shift-Alt + 3 Shift-Cmd + 3 Increase 'Custom' selected attribute value (*) Alt + 3 Cmd + 3 Toggle 'phosphor' mode Alt + P Cmd + P Decrease 'phosphor' blend Shift-Alt + 4 Shift-Cmd + 4 Increase 'phosphor' blend Alt + 4 Cmd + 4 Decrease scanlines intensity Shift-Alt + 5 Shift-Cmd + 5 Increase scanlines intensity Alt + 5 Cmd + 5 Switch to previous scanlines mask Shift-Alt + 6 Shift-Cmd + 6 Switch to next scanlines mask Alt + 6 Cmd + 6 These settings can also be changed using Global Keys Items marked as (*) will also switch to 'Custom' mode\n\nInput Devices & Ports Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Decrease analog joystick dead zone for digital controllers Shift-Control + F1 Shift-Control + F1 Increase analog joystick dead zone for digital controllers Control + F1 Control + F1 Decrease analog joystick dead zone for analog controllers Shift-Control-Alt + F1 Shift-Control-Cmd + F1 Increase analog joystick dead zone for analog controllers Control-Alt + F1 Control-Cmd + F1 Decrease analog paddle sensitivity Shift-Control + F2 Shift-Control + F2 Increase analog paddle sensitivity Control + F2 Control + F2 Decrease analog paddle linearity Shift-Control-Alt + F2 Shift-Control-Cmd + F2 Increase analog paddle linearity Control-Alt + F2 Control-Cmd + F2 Decrease analog paddle dejitter averaging Shift-Control + F3 Shift-Control + F3 Increase analog paddle dejitter averaging Control + F3 Control + F3 Decrease analog paddle dejitter reaction Shift-Control + F4 Shift-Control + F4 Increase analog paddle dejitter reaction Control + F4 Control + F4 Decrease digital paddle sensitivity Shift-Control + F5 Shift-Control + F5 Increase digital paddle sensitivity Control + F5 Control + F5 Toggle autofire Alt + A Cmd + A Decrease autofire rate Shift-Control + A Shift-Control + A Increase autofire rate Control + A Control + A Toggle allowing all four directions on joystick to be pressed simultaneously Control + F6 Control + F6 Toggle use of modifier key combos Control + F7 Control + F7 Swap Stelladaptor/2600-daptor port ordering Control + 1 Control + 1 Select previous controllers emulated by the mouse (all, analog, none) Shift-Control + F8 Shift-Control + F8 Select next controllers emulated by the mouse (all, analog, none) Control + F8 Control + F8 Decrease mouse paddle sensitivity Shift-Control + F9 Shift-Control + F9 Increase mouse paddle sensitivity Control + F9 Control + F9 Decrease mouse trackball sensitivity Shift-Control + F10 Shift-Control + F10 Increase mouse trackball sensitivity Control + F10 Control + F10 Decrease digital and mouse driving controller sensitivity Shift-Control + F11 Shift-Control + F11 Increase digital and mouse driving controller sensitivity Control + F11 Control + F11 Select previous mouse cursor visiblity option (-UI, -Emulation/-UI, +Emulation/+UI, -Emulation/+UI, +Emulation) Shift-Control + F12 Shift-Control + F12 Select next mouse cursor visiblity option (-UI, -Emulation/-UI, +Emulation/+UI, -Emulation/+UI, +Emulation) Control + F12 Control + F12 Toggle grab mouse Control + G Control + G Select previous left port controller type Shift-Control + 2 Shift-Control + 2 Select next left port controller type Control + 2 Control + 2 Select previous right port controller type Shift-Control + 3 Shift-Control + 3 Select next right port controller type Control + 3 Control + 3 Toggle swap left and right controller ports Control + 4 Control + 4 Toggle swap paddles Control + 5 Control + 5 Decrease horizontal center of paddles Shift-Control + 6 Shift-Control + 6 Increase horizontal center of paddles Control + 6 Control + 6 Decrease vertical center of paddles Shift-Control + 7 Shift-Control + 7 Increase vertical center of paddles Control + 7 Control + 7 Switch mouse to previous controller emulation mode(see Controller Properties) Shift-Control + 0 Shift-Control + 0 Switch mouse to next controller emulation modes(see Controller Properties) Control + 0 Control + 0 Decrease mouse paddle axes range Shift-Control + 8 Shift-Control + 8 Increase mouse paddle axes range Control + 8 Control + 8 These settings can also be changed using Global Keys\n\nDeveloper Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Toggle Developer Settings sets (player/developer) Alt + D Cmd + D Toggle frame stats(scanline count/FPS/BS type etc.) Alt + L Cmd + L Toggle TIA Player0 object Alt + Z Cmd + Z Toggle TIA Player1 object Alt + X Cmd + X Toggle TIA Missile0 object Alt + C Cmd + C Toggle TIA Missile1 object Alt + V Cmd + V Toggle TIA Ball object Alt + B Cmd + B Toggle TIA Playfield object Alt + N Cmd + N Toggle all TIA objects Alt + Comma Cmd + Comma Toggle TIA Player0 collisions Shift-Alt + Z Shift-Cmd + Z Toggle TIA Player1 collisions Shift-Alt + X Shift-Cmd + X Toggle TIA Missile0 collisions Shift-Alt + C Shift-Cmd + C Toggle TIA Missile1 collisions Shift-Alt + V Shift-Cmd + V Toggle TIA Ball collisions Shift-Alt + B Shift-Cmd + B Toggle TIA Playfield collisions Shift-Alt + N Shift-Cmd + N Toggle all TIA collisions Shift-Alt + Comma Shift-Cmd + Comma Toggle TIA 'Fixed Debug Colors' mode Alt + . Cmd + . Toggle PAL color-loss effect Control + L Control + L Toggle TV 'Jitter' effect Alt + J Cmd + J Decrease TV jitter sensitivity Shift-Control-Alt + J Shift-Control-Cmd + J Increase TV jitter sensitivity Control-Alt + J Control-Cmd + J Decrease TV jitter roll time Shift-Control + J Shift-Control + J Increase TV jitter roll time Control + J Control + J These settings can also be changed using Global Keys\n\nGlobal Keys (can be remapped)\n\nThese keys allow selecting and changing settings without having to remember the dedicated hotkeys. The global keys are grouped by 'Audio & Video', 'Input Devices & Ports' and 'Debug' settings.\n\nFunction Key (Standard) Key (macOS) Select previous setting group Control + End Control-Fn + Left arrow Select next setting group Control + Home Control-Fn + Right arrow Select previous setting End Fn + Left arrow Select next setting Home Fn + Right arrow Decrease current setting PageDown Fn + Down arrow Increase current setting PageUp Fn + Up arrow\n\nNotes:\n\nOnly available if UI messages are enabled.\n\nCurrently not available settings are automatically skipped.\n\nIf a setting was previously selected via a dedicated hotkey, its value can also be directly changed with the global keys.\n\nOther Emulation Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Load previous game in ROM (multicart ROM) Shift-Control + R Shift-Control + R Reload current ROM (singlecart ROM)\n\nLoad next game in ROM (multicart ROM) Control + R Control + R Emulate 'frying' effect Shift + Backspace Shift + Backspace Decrease emulation speed (disables 'Turbo' mode) Shift-Control + S Shift-Control + S Increase emulation speed (disables 'Turbo' mode) Control + S Control + S Toggle 'Turbo' mode (maximum emulation speed) Control + T Control + T Save continuous PNG snapshots(per interval defined in Snapshot Settings) Control-Alt + S Control-Cmd + S Save continuous PNG snapshots (every frame) Shift-Control-Alt + S Shift-Control-Cmd + S Open the High Scores dialog. Insert Insert Toggle 'Time Machine' mode Alt + T Cmd + T Enter/Exit the Time Machine dialog Shift + T to enter, Shift + T/Escape to exit and continue with emulation Shift + T to enter, Shift + T/Escape to exit and continue with emulation Playback the Time Machine from current state (from the TM dialog only) Space Space Start/Stop playback (exist/enters the Time Machine dialog) Shift + Space Shift + Space Rewind by one state (enters the Time Machine dialog) Alt + Left arrow Cmd + Left arrow Rewind by 10 states (enters the Time Machine dialog) Shift-Alt + Left arrow Shift-Cmd + Left arrow Rewind all states (enters the Time Machine dialog) Alt + Down arrow Cmd + Down arrow Unwind by one state (enters the Time Machine dialog) Alt + Right arrow Cmd + Right arrow Unwind by 10 states (enters the Time Machine dialog) Shift-Alt + Right arrow Shift-Cmd + Right arrow Unwind all states (enters the Time Machine dialog) Alt + Up arrow Cmd + Up arrow Enter/Exit the PlusROM backends setup dialog Shift-Control-Alt + P to enter, Shift-Control-Alt + P/Escape to exit and continue with emulation Shift-Control-Cmd + P to enter, Shift-Control-Cmd + P/Escape to exit and continue with emulation\n\nUI Keys (can be remapped)\n\nFunction Key (Standard) Key (macOS) Open context-sensitive help F1 Shift-Cmd + ? Move Up Up arrow Up arrow Move Down Down arrow Down arrow Move Left Left arrow Left arrow Move Right Right arrow Right arrow Move Home Home Home Move End End End Move Page Up Page Up Page Up Move Page Down Page Down Page Down OK - - Cancel Escape Escape Select item Return/Enter/Space Return/Enter/Space Move to previous object Shift + Tab Shift + Tab Move to next object Tab Tab Move to previous tab Shift-Control + Tab Shift-Control + Tab Move to next tab Control + Tab Control + Tab Toggle windowed/fullscreen mode Alt + Return Cmd + Return Exit Stella Control + Q Cmd + Q\n\nAdditional Launcher Keys (most cannot be remapped)\n\nFunction Key (Standard) Key (macOS) Go to initial directory (also in other file dialogs) Alt + Home Alt + Home Go to previous directory in history (also in other file dialogs) Alt + Left arrow Alt + Left arrow Go to next directory in history (also in other file dialogs) Alt + Right arrow Alt + Right arrow Go to parent directory (also in other file dialogs) Backspace, Alt + Up arrow Backspace, Alt + Up arrow Remove from 'Recently Played' or 'Most Popular' folder Control + X Control + X Toggle favorite Control + F Control + F Open Game properties dialog Control + G Control + G Open Power-On options dialog Control + P Control + P Open High Scores dialog (if available for selected ROM) Control + H Control + H Toggle file extensions display Control + E Control + E Toggle search ROMs in subdirectories too Control + D Control + D Toggle show all files Control + A Control + A Toggle favorites sorting (normal or alternative) Control + S Control + S Reload ROM listing Control + R Control + R Open Options dialog Control + O Control + O\n\nUI Keys in Text Editing areas (cannot be remapped)\n\nFunction Key (Standard) Key (macOS) Move cursor to previous character Left arrow Left arrow Move cursor to next character Right arrow Right arrow Move cursor to beginning of current word Control + Left arrow Option + Left arrow Move cursor to beginning of next word Control + Right arrow Option + Right arrow Move cursor to beginning of line Home Home, Control + A, Cmd + Left arrow Move cursor to end of line End End, Control + E, Cmd + Right arrow Delete character to left of cursor Backspace Backspace Delete character to right of cursor Delete, Control + D Delete, Control + D Delete word to left of cursor Control + Backspace, Control + W Option + Backspace, Control + W Delete word to right of cursor Control + Delete, Alt + D Option + Delete Delete all text to beginning of line Control + Home, Control + U Cmd + Backspace, Control + U Delete all text to end of line Control + End, Control + K Control + K Select character to left of cursor Shift + Left arrow Shift + Left arrow Select character to right of cursor Shift + Right arrow Shift + Right arrow Select all text to beginning of current word Shift-Control + Left arrow Shift-Option + Left arrow Select all text to beginning of next word Shift-Control + Right arrow Shift-Option + Right arrow Select all text to beginning of line Shift + Home Shift + Home, Shift-Control + A, Shift-Cmd + Left arrow Select all text to end of line Shift + End Shift + End, Shift-Control + E, Shift-Cmd + Right arrow Select all text Control + A Cmd + A Cut selected text Control + X, Shift + Delete Cmd + X Copy selected text Control + C, Control + Insert Cmd + C Paste at cursor and replace selection Control + V, Shift + Insert Cmd + V Undo last operation Control + Z Cmd + Z Redo last operation Control + Y, Shift-Control + Z Cmd + Y, Shift-Cmd + Z\n\nController Map\n\nSome Atari (virtual) controllers are simulated with more than one computer controller, and there are several special cases where controllers are active in certain modes only, as the table below shows. Items marked as (+ extra) indicate that the computer controller may not have enough buttons/axes etc. to fully emulate the device, so extra functionality must be mapped to other controllers.\n\nComputer Virtual\n\nController Keyboard Joystick Mouse\n\n(auto mode) Mouse\n\n(specific axis) Stelladaptor/\n\n2600-daptor Joystick ✓ ✓ ✓ ✕ ✓ Paddles ✓ ✓ ✓ ✓ ✓ Booster Grip ✓ ✓ ✓ (+ extra) ✕ ✓ (+ extra) Sega Genesis ✓ ✓ (+ extra) ✓ ✕ ✕ Keyboard ✓ ✓ (+ extra) ✕ ✕ ✓ (2600-daptor II) Driving ✓ ✓ ✓ ✕ ✓ Trak-Ball/Mouse ✕ ✕ ✓ ✓ (axis ignored) ✓ CompuMate ✓ ✕ ✕ ✕ ✕ Light Gun ✕ ✕ ✓ ✓ (axis ignored) ✕ MindLink ✕ ✕ ✓ ✓ (axis ignored) ✕ AtariVox N/A N/A N/A N/A voice (2600-daptor II) SaveKey N/A N/A N/A N/A N/A\n\nStella's 'Time Machine'\n\nA special feature of Stella is the 'Time Machine' mode. In this mode, Stella automatically creates savestates in regular, user-defined intervals. At any time, the user can interrupt the current emulation and navigate back and forth within the saved timeline. This can be done either by using the Time Machine hotkeys described in Hotkeys - Other Keys or by using the Time Machine dialog. This dialog is automatically entered when using one of the Time Machine hotkeys. The hotkeys continue to function within the dialog.\n\nTime Machine dialog:\n\nThe dialog items are explained in the following two tables.\n\nTop row (left to right)\n\nItemDescription Current stateShows the currently loaded state's number 'Timeline' sliderShows the position of the current state in the recorded timeline. A state can be selected by dragging the slider with the mouse. To visualize state compression, small marks split the timeline into five, equally sized state number intervals. Total statesShows the total number of save states in the Time Machine\n\nBottom row (left to right)\n\nItemDescription Current timeShows the time of the currently selected state, relative to the first one 'Start/Stop' buttonStarts or stops the Time Machine 'Exit' buttonExits the dialog and continues emulation from the current state 'Rewind All' buttonNavigates back to the begin of the timeline 'Rewind One' buttonNavigates back by one state 'Playback' buttonStarts playback from the current state 'Unwind One' buttonNavigates forward by one state 'Unwind All' buttonNavigates forward to the end of the timeline 'Save All' buttonSaves all Time Machine states to disk 'Load All' buttonLoades all states from disk into Time Machine Navigation infoInforms about the interval of the user's last Time Machine navigation. The interval can vary if the timeline is compressed. Total timeShows the total time covered by the save states (aka 'Horizon')\n\nInstead of using a mouse to click the buttons, you can also use the defined Hotkeys. Plus a few extra hotkeys for handling single states and saving snapshots.\n\nThe 'Time Machine' mode can be configured by the user. For details see Developer Options - Time Machine tab.\n\nHigh Scores Saving\n\nStella allows the user to save high scores when the required definitions for a ROM exist. For a number of popular classic and homebrew games (see High Scores - supported games) this has been done already.\n\nTo save a score, the High Score dialog can be opened by pressing 'Insert' any time while a game is played. It will provide the current variation and score and allow the user to add this as a new high score. Of course this makes most sense when a game is over. Note: In multiplayer games, only the score of the first player can be saved.\n\nHigh Scores dialog:\n\nFor details how to configure high scores definitions for a game see High Scores Properties.\n\nAdvanced Configuration\n\nThe default options in Stella are meant to cater to as many situations as possible. As such, you may never need to change many of its options. However, Stella is very configurable, and if you want to change its behaviour in some way, there's likely a configuration option to do so. The remainder of this (lengthy) section details every configurable option.\n\nUsing the Command Line\n\nIn addition to the built in ROM launcher, Stella can also be used from the command line (assuming your operating system has a command line).\n\nTo run Stella from the command line, use the following format:\n\nstella [options ...] ROM_FILENAME\n\nOptions ('0' or 'false' indicates false, '1' or 'true' indicates true, others are self-explanatory):\n\nArgument Description\n\n-video <direct3d|metal|opengl|opengles2|opengles|software>\n\nUse the given rendering backend (where applicable); default is the best available mode detected.\n\n-vsync <1|0>\n\nSynchronize screen updates to the vertical blank period. This can result in smoother updates, and eliminate tearing.\n\n-fullscreen <1|0>\n\nEnable fullscreen mode.\n\n-center <1|0>\n\nCenter all windows (if possible).\n\n-windowedpos <XxY>\n\nSet the window position in windowed emulator mode.\n\n-display <number>\n\nSet the display for Stella's emulator.\n\n-palette <standard|z26|user|custom>\n\nSet the palette to either normal Stella, the one used in the z26 emulator, a user-defined palette, or a custom palette generated from user-defined parameters.\n\n-pal.phase_ntsc <number>\n\nAdjust phase shift of 'custom' NTSC palette.\n\n-pal.phase_pal <number>\n\nAdjust phase shift of 'custom' PAL palette.\n\n-pal.red_scale <number>\n\nAdjust red scale of 'custom' palette (range -1.0 to 1.0).\n\n-pal.red_shift <number>\n\nAdjust red shift of 'custom' palette (range -22.5 to 22.5).\n\n-pal.green_scale <number>\n\nAdjust green scale of 'custom' palette (range -1.0 to 1.0).\n\n-pal.green_shift <number>\n\nAdjust green shift of 'custom' palette (range -22.5 to 22.5).\n\n-pal.blue_scale <number>\n\nAdjust blue scale of 'custom' palette (range -1.0 to 1.0).\n\n-pal.blue_shift <number>\n\nAdjust blue shift of 'custom' palette (range -22.5 to 22.5).\n\n-pal.hue <number>\n\nAdjust hue of current palette (range -1.0 to 1.0).\n\n-pal.saturation <number>\n\nAdjust saturation of current palette (range -1.0 to 1.0).\n\n-pal.contrast <number>\n\nAdjust contrast of current palette (range -1.0 to 1.0).\n\n-pal.brightness <number>\n\nAdjust brightness of current palette (range -1.0 to 1.0).\n\n-pal.gamma <number>\n\nAdjust gamma of current palette (range -1.0 to 1.0).\n\n-speed <number>\n\nControl the emulation speed (as a percentage, 10 - 1000).\n\n-turbo <1|0>\n\nEnable 'Turbo' mode for maximum emulation speed.\n\n-uimessages <1|0>\n\nEnable or disable display of message in the UI. Note that messages indicating serious errors override this setting, and are always shown.\n\n-autopause <1|0>\n\nEnable or disable automatic pause/continue of emulation when Stella loses/gains focus.\n\n-pausedim <1|0>\n\nEnable or disable emulation dimming in pause mode.\n\n-audio.enabled <1|0>\n\nEnable or disable sound generation.\n\n-audio.volume <0 - 100>\n\nSet the volume.\n\n-audio.device <number>\n\nSet the audio device (0 = default).\n\n-audio.preset <1 - 5>\n\nSet an audio preset. Numbers in sequence represent presets for 'custom', 'low quality, medium lag', 'high quality, medium lag', 'high quality, low lag' and 'ultra quality, minimal lag'.\n\n-audio.fragment_size <128|256|512|1024|2048|4096>\n\nSet the number of samples in a single fragment processed by the audio driver.\n\n-audio.sample_rate <44100|48000|96000>\n\nSet sound sample output frequency.\n\n-audio.resampling_quality <1|2|3>\n\nSet resampling quality to low (1), high (2) or ultra (3).\n\n-audio.headroom <0 - 20>\n\nSet number of additional half-frames to prebuffer.\n\n-audio.buffer_size <0 - 20>\n\nSet maximum number of additional half-frames to buffer.\n\n-audio.stereo <1|0>\n\nEnable or disable stereo mode for all ROMs.\n\n-audio.dpc_pitch <10000 - 30000>\n\nSet the pitch of Pitfall II music.\n\n-tia.zoom <zoom>\n\nUse the specified zoom level (integer) while in TIA/emulation mode.\n\n-tia.vsizeadjust <-5 - 5>\n\nAdjust the display height of the TIA image\n\n-tia.inter <1|0>\n\nUse interpolation for the TIA image (results in blending/smoothing of the image, not available for Software renderer).\n\n-tia.fs_stretch <1|0>\n\nStretch TIA image completely while in fullscreen mode, vs. keeping the correct aspect ratio.\n\n-tia.fs_refresh <1|0>\n\nWhile in fullscreen mode, adapt the display's refresh rate to the game's frame rate to minimize judder. Note: Not available for macOS\n\n-tia.fs_overscan <0 - 10>\n\nAdd overscan to TIA image while in fullscreen mode\n\n-tia.dbgcolors <roygbp>\n\nAssign the colours (R)ed, (O)range, (Y)ellow, (G)reen, (P)urple and (B)lue to each graphical register P0/M0/P1/M1/PF/BL, respectively. Currently, these can be changed around to apply different colours to the respective register.\n\n-tia.correct_aspect <1|0>\n\nEnable aspect ratio correct scaling.\n\n-tv.filter <0 - 5>\n\nBlargg TV effects, 0 is disabled, next numbers in sequence represent presets for 'RGB', 'S-Video', 'Composite', 'Bad Adjust' and 'Custom' modes.\n\n-tv.sharpness <number>\n\nBlargg TV effects 'sharpness' (only available in custom mode, range -1.0 to 1.0).\n\n-tv.resolution <number>\n\nBlargg TV effects 'resolution' (only available in custom mode, range -1.0 to 1.0).\n\n-tv.artifacts <number>\n\nBlargg TV effects 'artifacts' (only available in custom mode, range -1.0 to 1.0).\n\n-tv.fringing <number>\n\nBlargg TV effects 'fringing' (only available in custom mode, range -1.0 to 1.0).\n\n-tv.bleed <number>\n\nBlargg TV effects 'bleed' (only available in custom mode, range -1.0 to 1.0).\n\n-tv.phosphor <always|byrom>\n\nDetermine how phosphor mode is enabled. If 'always', then the ROM properties entry is ignored, and phosphor mode is always turned on. Otherwise, the ROM properties determine whether phosphor mode is used for each ROM.\n\n-tv.phosblend <0 - 100>\n\nEnable phosphor blending level; 0 implies no mixing, and 100 is full mixing (not recommended). Note that this doesn't actually enable phosphor mode; that is done for each ROM in the ROM properties. Higher blend values will intensify the phosphor effect. Depending on your display and personal preferences, the optimal default for you may vary. Slow LCDs (especially for office use) may only need a low blend of around 30, while fast switching gamer LCDs may need about 70 to look similar to a CRT.\n\n-tv.scanlines <0 - 100>\n\nSet TV effects scanlines intensity, where 0 means completely off. Note: No scanlines in 1x mode snapshots\n\n-tv.scanmask <standard|thin|pixel|aperture|mame>\n\nSet the scanlines mask. Note: All masks (except 'standard') work better at higher zoom levels.\n\n-cheat <code>\n\nUse the specified cheatcode (see Cheat section for description).\n\n-loglevel <0|1|2>\n\nIndicate level of logging to perform while the application is running. Zero completely disables logging (except for serious errors), while the remaining numbers show increasingly more detail.\n\n-logtoconsole <1|0>\n\nIndicate that logged output should be printed to the console/command line as it's being collected. An internal log will still be kept, and the amount of logging is still controlled by 'loglevel'.\n\n-joydeadzone <0 - 29>\n\nSet the joystick axis dead zone area for analog joysticks/gamepads emulating digital controllers. All values within the dead zone are treated as zero-axis values, while only those values outside are registered as valid input. Dead zone is calculated as 3200 + value * 1000. So the possible dead zone values range from 3200 to 32200 (= 10% - 98%).\n\n-adeadzone <0 - 29>\n\nSet the joystick axis dead zone area for analog joysticks/gamepads emulating analog controllers. All values within the dead zone are treated as zero-axis values, while only those values outside are registered as valid input. Dead zone is calculated as value * 565. So the possible dead zone values range from 0 to 16384 (= 0% - 50%)\n\n-psense <0 - 30>\n\nSensitivity for emulation of paddles when using analog controllers. Larger numbers are causing faster movement.\n\n-plinear <25 - 100>\n\nLinearity of analog paddles. Lower numbers allow finer control around the paddle center.\n\n-dejitter.base <0 - 10>\n\nStrength of analog paddle input averaging. Higher values will make the movement smoother, but also less responsive.\n\n-dejitter.diff <0 - 10>\n\nImpact of fast analog paddle movement on input averaging. Higher values will reduce the movement smoothing while the paddle is moved fast, making fast paddle movements more responsive.\n\n-dsense <number>\n\nSensitivity for emulation of paddles when using a digital device (i.e. joystick digital axis or button, keyboard key, etc.). Valid range of values is from 1 to 20, with larger numbers causing faster movement.\n\n-autofire <1|0>\n\nSet auto fire mode on or off.\n\n-autofirerate <0 - 30>\n\nAutomatic trigger rate of the fire buttons in Hz (0 = disabled)\n\n-joyallow4 <1|0>\n\nAllow all 4 directions on a joystick to be pressed simultaneously.\n\n-modcombo <1|0>\n\nUse modifier (Shift/Alt/Control/Cmd) + x key combos. This is normally enabled, since the 'Quit' command is tied to 'Control + Q'. However, there are times when you want to disable them. E.g. a 2-player game is using either the 'F' or 'R' keys for movement, and pressing Control (for Fire) will perform an unwanted action associated with 'Control + F' or 'Control + R' default keys.\n\n-saport <lr|rl>\n\nDetermine how to enumerate the Stelladaptor/2600-daptor devices in the order they are found: 'lr' means first is left port, second is right port, 'rl' means the opposite.\n\n-avoxport <name>\n\nSet the name of the serial port where an AtariVox is connected.\n\n-usemouse <always|analog|never>\n\nUse mouse as a controller as specified by ROM properties in specific case. Always and never are self-explanatory, analog means only for analog-type devices (paddles, trackball, etc.).\n\n-msense <number>\n\nSensitivity for emulation of paddles when using a mouse. Valid range of values is from 1 to 20, with larger numbers causing faster movement.\n\n-tsense <number>\n\nSensitivity for emulation of trackball controllers when using a mouse. Valid range of values is from 1 to 20, with larger numbers causing faster movement.\n\n-dcsense <number>\n\nSensitivity for emulation of driving controllers when using a mouse or a digital device. Valid range of values is from 1 to 20, with larger numbers causing faster movement.\n\n-cursor <0|1|2|3>\n\nSet mouse cursor state in UI/emulation modes.\n\n-grabmouse <1|0>\n\nLock the mouse cursor in the game window in emulation mode.\n\n-autoslot <1|0>\n\nAutomatically change to the next available save state slot after saving a ROM state file.\n\n-saveonexit <none|current|all>\n\nAutomatically save no, current or all states when exiting emulation. The latter also loads all states when entering emulation.\n\n-fastscbios <1|0>\n\nDisable Supercharger BIOS progress loading bars.\n\n-threads <1|0>\n\nEnable multi-threaded video rendering (may not improve performance on all systems).\n\n-snapsavedir <path>\n\nThe directory to save snapshot files to.\n\n-snaploaddir <path>\n\nThe directory to load ROM info viewer snaposhot files from.\n\n-snapname <int|rom>\n\nWhen saving snapshots, use either the internal ROM database name or the actual ROM filename.\n\n-sssingle <1|0>\n\nGenerate single snapshot instead of many, overwriting any previous snapshots.\n\n-ss1x <1|0>\n\nIgnore any scaling applied to the TIA image, and save snapshot in unscaled (1x) mode.\n\n-ssinterval <number>\n\nSet the interval in seconds between taking snapshots in continuous snapshot mode (currently 1 - 10).\n\n-rominfo <rom>\n\nDisplay detailed information about the given ROM, and then exit Stella.\n\n-listrominfo\n\nPrint relevant contents of the Stella ROM database, one ROM per line, and then exit Stella. This can be used for external frontends.\n\n-exitlauncher <1|0>\n\nAlways exit to ROM launcher when exiting a ROM (normally, an exit to launcher only happens when started with the launcher).\n\n-launcherpos <XxY>\n\nSet the window position in windowed ROM launcher mode.\n\n-launcherdisplay <number>\n\nSet the display for the ROM launcher.\n\n-launcherres <WxH>\n\nSet the size of the ROM launcher.\n\n-launcherfont <small|low_medium|medium|large|large12|large14|large16>\n\nSet the size of the font in the ROM launcher.\n\n-launcherbuttons <1|0>\n\nEnable bottom buttons in the ROM launcher.\n\n-launcherroms <1|0>\n\nSpecifies whether to show ROMs only (the default) or all files in the ROM launcher.\n\n-launcherextensions <1|0>\n\nDisplay file extensions in the ROM launcher.\n\n-launchersubdirs <1|0>\n\nSpecifies whether the ROM launcher lists files from current directory only or all subdirectories too.\n\n-favorites <1|0>\n\nEnable favorites tracking and display.\n\n-altsorting <1|0>\n\nUse alternative sorting in virtual favorites folders.\n\n-maxrecentroms <number>\n\nSet number of ROMs tracked in 'Recently Played' folder (default = 20).\n\n-romviewer <float>\n\nHide ROM Info Viewer in ROM launcher mode (0) or use the given zoom level. Note: The zoom level is converted into a percentage in the UI.\n\n-uipalette <standard|classic|light|dark>\n\nUse the specified palette for UI elements.\n\n-dialogfont <small|low_medium|medium|large|large12|large14|large16>\n\nSet the size of the font in the dialogs.\n\n-dialogpos <0 - 4>\n\nSet the position of dialogs within Stella windows (0 = center).\n\n-hidpi <0|1>\n\nEnable the HiDPI mode which scales the UI by a factor of two.\n\n-confirmexit <0|1>\n\nDisplay a popup when emulation is exited.\n\n-listdelay <delay>\n\nSet the amount of time to wait between treating successive keypresses as a single word in file listings (value can range from 300-1000). Use '0' to disable list-skipping completely.\n\n-mwheel <lines>\n\nSet the number of lines the mousewheel will scroll in the UI (1 - 10).\n\n-mdouble <speed>\n\nSet the mouse double click speed in the UI (100 - 900 ms).\n\n-ctrldelay <delay>\n\nSet the delay before controller input will start repeating in the UI (200 - 1000 ms).\n\n-ctrlrate <rate>\n\nSet the controller repeat rate in the UI (2 - 30 repeats/s).\n\n-romdir <dir>\n\nSet the path where the ROM launcher will start.\n\n-followlauncher <0|1>\n\nMake the start path follow ROM launcher navigation.\n\n-userdir <dir>\n\nSet the path to save user files (property exports, debugger saves) to.\n\n-saveuserdir <0|1>\n\nUpdate the user path when navigating in browser.\n\n-maxres <WxH>\n\nUseful for developers, this sets the maximum size of window that can be created, allowing to simulate testing on 'smaller' systems.\n\n-basedir <dir>\n\nOverride the base directory for all config files.\n\nNote: Not available for macOS\n\n-baseinappdir\n\nOverride the base directory for all config files by attempting to use the application directory.\n\nNote: Only available for Windows\n\n-plusroms.nick <name>\n\nDefine a nickname for the PlusROM backends\n\n-plusroms.id <id>\n\nDefine a temporary ID for the PlusROM backends (32 chars, hex)\n\n-help\n\nPrint a help message describing these options, and then exit Stella.\n\nThe following are useful to developers. Only use them if you know what you're doing! Note that in all cases, the values supplied to the arguments are not case sensitive.\n\nArgument Description\n\n-dis.resolve <1|0>\n\nTry to differentiate between tentative code vs. data sections in the disassembler via static code analysis. See the Debugger - ROM Disassembly Settings for more information.\n\n-dis.gfxformat <2|16>\n\nSwitch between displaying/editing GFX and PGFX sections in either binary or hexidecimal in the disassembler.\n\n-dis.showaddr <1|0>\n\nShow/hide program counter addresses as labels in the disassembler.\n\n-dis.relocate <1|0>\n\nRelocate calls out of address range in the disassembler.\n\n-dbg.pos <XxY>\n\nSet the window position in windowed debugger mode.\n\n-dbg.display <number>\n\nSet the display for the debugger.\n\n-dbg.res <WxH>\n\nSet the size of the debugger window.\n\n-dbg.fontsize <small|medium|large|>\n\nSet the font size in the debugger window.\n\n-dbg.fontstyle <0|1|2|3>\n\nHow to use bold fonts in the debugger window. '0' means all normal font, '1' is bold labels only, '2' is bold non-labels only, '3' is all bold font.\n\n-dbg.ghostreadstrap <1|0>\n\nDebugger considers/ignores 'ghost' reads for trap addresses\n\n-dbg.uhex <0|1>\n\nLower-/uppercase HEX display\n\n-break <address>\n\nSet a breakpoint at specified address.\n\n-debug\n\nImmediately jump to debugger mode when starting Stella.\n\n-holdjoy0 <U,D,L,R,F>\n\nStart the emulator with the left joystick direction/button held down (ie, use 'UF' for up and fire). After entering the emulation, you will have to press and release the direction again to release the event.\n\n-holdjoy1 <U,D,L,R,F>\n\nStart the emulator with the right joystick direction/button held down (ie, use 'UF' for up and fire). After entering the emulation, you will have to press and release the direction again to release the event.\n\n-holdselect\n\nStart the emulator with the Game Select switch held down. After entering the emulation, you will have to press and release 'Select' to release the event.\n\n-holdreset\n\nStart the emulator with the Game Reset switch held down. After entering the emulation, you will have to press and release 'Reset' to release the event.\n\n-bs <type>\n\nSet \"Cart.Type\" property. See the Emulation Properties section for valid types.\n\n-type <type>\n\nSame as using -bs.\n\n-startbank <bank>\n\nSet \"Cart.StartBank\" property.\n\n-channels <Mono|Stereo>\n\nSet \"Cart.Sound\" property.\n\n-ld <A|B>\n\nSet \"Console.LeftDiff\" property.\n\n-rd <A|B>\n\nSet \"Console.RightDiff\" property.\n\n-tv <Color|BW>\n\nSet \"Console.TVType\" property.\n\n-sp <Yes|No>\n\nSet \"Console.SwapPorts\" property.\n\n-lc <type>\n\nSet \"Controller.Left\" property. See the Controller Properties section for valid types.\n\n-lq1 <type>\n\nSet \"Controller.Left1\" property for QuadTari. See the QuadTari Properties section for valid types.\n\n-lq2 <type>\n\nSet \"Controller.Left2\" property for QuadTari. See the QuadTari Properties section for valid types.\n\n-rc <type>\n\nSet \"Controller.Right\" property. See the Controller Properties section for valid types.\n\n-rq1 <type>\n\nSet \"Controller.Right1\" property for QuadTari. See the QuadTari Properties section for valid types.\n\n-rq2 <type>\n\nSet \"Controller.Right2\" property for QuadTari. See the QuadTari Properties section for valid types.\n\n-bc <type>\n\nSet both \"Controller.Left\" and \"Controller.Right\" properties. See the Controller Properties section for valid types.\n\n-aq <type>\n\nSet \"Controller.Left1\", \"Controller.Left2\", \"Controller.Right1\" and \"Controller.Right2\" properties for QuadTari. See the QuadTari Properties section for valid types.\n\n-cp <Yes|No>\n\nSet \"Controller.SwapPaddles\" property.\n\n-pxcenter <-10..30>\n\nSet \"Controller.PaddlesXCenter\" property.\n\n-pycenter <-10..30>\n\nSet \"Controller.PaddlesYCenter\" property.\n\n-ma <Auto|XY>\n\nSet \"Controller.MouseAxis\" property. See the Controller Properties section for valid types.\n\n-format <format>\n\nSet \"Display.Format\" property. See the Emulation Properties section for valid formats.\n\n-vcenter <number>\n\nSet \"Display.VCenter\" property (-5..5).\n\n-pp <Yes|No>\n\nSet \"Display.Phosphor\" property.\n\n-ppblend <number>\n\nSet \"Display.PPBlend\" property, used for phosphor effect (0-100). Default is whatever is specified for tv.phosblend.\n\nThe following are almost all available in two sets, one for players (prefixed by \"plr.\") and one for developers (prefixd by \"dev.\"). Only use them if you know what you're doing! Note that in all cases, the values supplied to the arguments are not case sensitive.\n\nArgument Description\n\n-dev.settings <1|0>\n\nSelect developer (1) or player (0) set.\n\n-<plr.|dev.>stats <1|0>\n\nOverlay console info on the TIA image during emulation.\n\n-<plr.|dev.>detectedinfo <1|0>\n\nDisplay detected settings info when a ROM is loaded.\n\n-<plr.|dev.>console <2600|7800>\n\nSelect console for B/W and Pause key handling and RAM initialization.\n\n-<plr.|dev.>bankrandom <1|0>\n\nOn reset, randomize the startup bank (only for selected bankswitch types).\n\n-<plr.|dev.>tiarandom <1|0>\n\nOn reset, randomize the TIA registers.\n\n-<plr.|dev.>ramrandom <1|0>\n\nOn reset, either randomize all RAM content, or initialize with zero (console = 2600)/startup values (console = 7800) instead.\n\n-<plr.|dev.>cpurandom <S,A,X,Y,P>\n\nOn reset, randomize the content of the specified CPU registers.\n\n-dev.tiadriven <1|0>\n\nSet unused TIA pins to be randomly driven high or low on a read/peek. If disabled, use the last databus value for those pins instead.\n\n-dev.rwportbreak <1|0>\n\nSince the 2600 has no dedicated R/W line, different addresses are used for RAM read or write access. If the code reads from such a write address, this causes an unwanted, semi-random write to that address. When this option is enabled, such reads interrupt emulation and the debugger is entered.\n\n-dev.wrportbreak <1|0>\n\nSame as above. If the code writes to such a read address, nothing happens. But a developer should be made aware of it, because this indicates a problem with the code. When this option is enabled, such writes interrupt emulation and the debugger is entered.\n\n-dev.thumb.trapfatal <1|0>\n\nWhen enabled, this allows the Thumb ARM emulation to throw an exception and enter the debugger on fatal errors. When disabled, such fatal errors are simply logged, and emulation continues. Do not use this unless you know exactly what you're doing, as it changes the behaviour as compared to real hardware.\n\n-dev.thumb.incycles <1|0>\n\nWhen enabled, ARM emulation cycles are added to 6507 system cycles. This allows detecting timer overruns, but will also distort audio. Note: The ARM emulation cycles are only a coarse approximation.\n\n-dev.thumb.cyclefactor <float>\n\nDefines the ARM cycle count correction factor (default = 0.95).\n\n-dev.thumb.chiptype <0|1>\n\nSelects the emulated chip type (0 = LPC2103, 1 = LPC2104 family). This setting affects the CPU clock, the Flash memory access clock cycles and the number of Flash banks.\n\n-dev.thumb.mammode <0..3>\n\nSelects the Memory Accelerator Module (MAM) mode. Note: Mode X (3) is for testing only. It reduces Flash memory access clock cycles to always 1.\n\n-<plr.|dev.>extaccess <1|0>\n\nWhen enabled, each external access (AtariVox/SaveKey EEPROM, PlusROM, Supercharger...) is signalled by a message.\n\n-dev.tia.type <standard|koolaidman| cosmicark|pesco|quickstep|matchie| indy500|heman|custom>\n\nSet emulated TIA type. Only with 'custom' the following TIA options become relevant.\n\n-dev.tia.plinvphase <1|0>\n\nEnable/disable inverted HMOVE clock phase for players (Kool Aid Man glitch).\n\n-dev.tia.msinvphase <1|0>\n\nEnable/disable inverted HMOVE clock phase for missiles (Cosmic Ark stars glitch).\n\n-dev.tia.blinvphase <1|0>\n\nEnable/disable inverted HMOVE clock phase for ball.\n\n-dev.tia.delaypfbits <1|0>\n\nEnable/disable playfield bits delayed by one color clock (stray playfield pixels in Pesco).\n\n-dev.tia.delaypfcolor <1|0>\n\nEnable/disable playfield color delayed by one color clock (colored step borders in Quick Step!).\n\n-dev.tia.pfscoreglitch <1|0>\n\nEnable/disable earlier playfield score mode color color switch (center vertical line in Matchie).\n\n-dev.tia.delaybkcolor <1|0>\n\nEnable/disable background color delayed by one color clock (stray pixels in Indy 500 menu hack).\n\n-dev.tia.delayplswap <1|0>\n\nEnable/disable player swap delayed by one color clock (He-Man title glitch).\n\n-dev.tia.delayblswap <1|0>\n\nEnable/disable ball swap delayed by one color clock.\n\n-<plr.|dev.>tv.jitter <1|0>\n\nEnable TV jitter/roll effect, when there are too many or too few scanlines per frame.\n\n-<plr.|dev.>tv.jitter_sense <1 - 10>\n\nWhen TV jitter/roll effect is enabled, determines the sensitivy to varying frame timings.\n\n-<plr.|dev.>tv.jitter_recovery <1 - 20>\n\nWhen TV jitter/roll effect is enabled, determines the recovery time for screen rolling (recovery spread over multiple frames).\n\n-<plr.|dev.>colorloss <1|0>\n\nEnable/disable the PAL color-loss effect.\n\n-<plr.|dev.>debugcolors <1|0>\n\nEnable/disable the fixed debug colors.\n\n-<plr.|dev.>timemachine <1|0>\n\nEnable/disable the Time Machine.\n\n-<plr.|dev.>tm.size <20 - 1000>\n\nDefine the Time Machine buffer size.\n\n-<plr.|dev.>tm.uncompressed <0 - 1000>\n\nDefine the uncompressed Time Machine buffer size. Must be <= Time Machine buffer size.\n\n-<plr.|dev.>tm.interval <1f|3f|10f|30f| 1s|3s|10s>\n\nDefine the interval between two save states.\n\n-<plr.|dev.>tm.horizon <3s|10s|30s|1m|3m| 10m|30m|60m>\n\nDefine the horizon of the Time Machine.\n\nChanging Options\n\nAll settings can be changed within the integrated Options UI while Stella is running (unless otherwise noted; some settings require an application restart). The Options menu can be accessed from the ROM launcher by clicking the Options... button, or in-game by pressing the 'Tab' key.\n\nOptions Menu dialog:\n\nVideo & Audio Settings dialog (Display):\n\nItemBrief descriptionFor more information,\n\nsee Command Line RendererUse specified rendering mode.-video InterpolationEnable interpolation of the TIA image (not available for Software renderer).-tia.inter ZoomAdjust the zoom level of the TIA image-tia.zoom FullscreenSelf-explanatory - Note that colors may slightly change. This depends on the OS and renderer used.-fullscreen StretchIn fullscreen mode, completely fill screen with the TIA image.-tia.fs_stretch Adapt display...In fullscreen mode, adapt the display's refresh rate to the game's frame rate to minimize judder. Note: Not available for macOS-tia.fs_refresh OverscanIn fullscreen mode, add overscan to the TIA image.-tia.fs_overscan Correct aspect ratioEnable aspect ratio correct scaling. Note: Creates a cleaner looking TIA image when disabled (like z26 and old versions of Stella) vs. a correctly emulated aspect ratio when enabled.-tia.correct_aspect V-Size adjustAdjust the height of the TIA image.-tia.vsizeadjust\n\nVideo & Audio Settings dialog (Palettes):\n\nItemBrief descriptionFor more information,\n\nsee Command Line PalettePalette used for emulation mode-palette NTSC/PAL phaseAdjust phase shift of 'Custom' NTSC or PAL (depends on game) palette. -pal.phase_ntsc, -pal.phase_pal RAdjust red scale and shift of 'Custom' palette-pal.red_scale, -pal.red_shift GAdjust green scale and shift of 'Custom' palette-pal.green_scale, -pal.green_shift BAdjust blue scale and shift of 'Custom' palette-pal.blue_scale, -pal.blue_shift HueAdjust hue of currently selected palette-pal.hue SaturationAdjust saturation of currently selected palette-pal.saturation ContrastAdjust contrast of currently selected palette-pal.contrast BrightnessAdjust brightness of currently selected palette-pal.brightness GammaAdjust gamma of currently selected palette-pal.gamma\n\nVideo & Audio Settings dialog (TV Effects):\n\nItemBrief descriptionFor more information,\n\nsee Command Line TV modeDisable TV effects, or select TV preset-tv.filter Adjustable slidersSet specific attribute in 'Custom' TV mode-tv.sharpness, -tv.resolution, etc. Phosphor for all ROMsEnable phosphor mode for all ROMs-tv.phosphor Blend (phosphor)Blend level to use in phosphor mode for all ROMs (needs to be manually adjusted for your particular hardware)-tv.phosblend (Scanlines) IntensitySets scanlines black-level intensity. Note: No scanlines in 1x mode snapshots-tv.scanlines (Scanlines) MaskSets the scanlines mask. Note: All masks (except 'standard') work better at higher zoom levels-tv.scanmask Clone RGBCopy 'RGB' attributes to 'Custom' TV mode sliders Clone S-VideoCopy 'S-Video' attributes to 'Custom' TV mode sliders Clone CompositeCopy 'Composite' attributes to 'Custom' TV mode sliders Clone Bad adjustCopy 'Bad Adjust' attributes to 'Custom' TV mode sliders RevertRevert attribute sliders to previously saved 'Custom' TV mode settings\n\nVideo & Audio Settings dialog (Audio):\n\nItemBrief descriptionFor more information,\n\nsee Command Line Enable audioSelf-explanatory-audio.enabled VolumeSelf-explanatory-audio.volume DeviceUse the specified audio device.-audio.device ModeSelect an audio preset or choose 'Custom' for manual configuration.-audio.preset Fragment sizeThe number of samples in a single fragment processed by the audio driver. Smaller values mean less latency, but may lead to dropouts (depending on OS and hardware).-audio.fragment_size Sample rate Output samples per second. Higher values reduce artifacts from resampling and decrease latency, but may lead to dropouts (depending on OS and hardware). -audio.sample_rate Resampling quality Chooses the algorithm used for resampling (= converting TIA output to the target sample rate). 'High' and 'ultra' use a high-quality Lanczos filter but require slightly more CPU, while 'low' may lead to audible screeching artifacts in some games (notably Quadrun). -audio.resampling_quality HeadroomNumber of frames to buffer before playback starts. Higher values increase latency, but reduce the potential for dropouts.-audio.headroom Buffer sizeMaximum size of the audio buffer. Higher values increase maximum latency, but reduce the potential for dropouts.-audio.buffer_size Stereo for all ROMsEnable stereo mode for all ROMs.-audio.stereo Pitfall II music pitchDefines the pitch of Pitfall II music (which may vary between carts).-audio.dpc_pitch\n\nIMPORTANT: In order to maintain a stable stream of audio data, emulation speed must be synchronized with the audio hardware. Buffering happens in multiple places (OS = fragment size, Stella = headroom and buffer size) and improves the tolerance to speed fluctuations, but introduces latency which manifests as a lag between audio and video.\n\nToo aggressive settings for your combination of hardware and software (high sample rate, low fragment size, low headroom, low buffer size) may lead to audio dropouts whose effect may range from isolated popping artifacts to garbled audio. You can check the system log for related messages. If you get recurring messages about audio overruns and underruns (isolates underruns / overruns are normal and a consequence of host system activity), you might have to adjust your settings.\n\nEmulation dialog:\n\nItemBrief descriptionFor more information,\n\nsee Command Line Emulation speedEmulation speed-speed VSyncEnable vertical synced updates-vsync TurboEnable 'Turbo' mode for maximum emulation speed. This overwrites 'Emulation speed' setting and disables 'VSync'.-turbo Multi-threadingEnable multi-threaded rendering-threads Fast SuperCharger loadSkip progress loading bars for SuperCharger ROMs-fastscbios Show UI messagesOverlay UI messages onscreen-uimessages Automatic pauseEnable or disable automatic pause/continue of emulation when Stella loses/gains focus.-autopause Confirm exiting...Display a popup when emulation is exited-confirmexit When entering/exiting emulation: Automatically save no, current or all Time Machine states when exiting emulation.\n\nThe latter also loads all states when entering emulation. When this is enabled, you can always continue your game session from where you exited it. Even including the Time Machine buffer! -saveonexit Automatically change... Automatically change to the next available save state slot after saving a ROM state file. -autoslot\n\nInput Settings dialog:\n\nThis dialog is described in further detail in Advanced Configuration - Event Remapping.\n\nUser Interface Settings dialog (2 tabs):\n\nItemBrief descriptionFor more information,\n\nsee Command Line ThemeTheme to use for UI elements (see examples)-uipalette Dialogs fontThe font used in the dialogs-dialogfont HiDPI modeScale the UI by a factor of two when enabled-hidpi Dialogs positionPosition of dialogs with Stella window-dialogpos Center windowsAttempt to center application windows, else position at last position-center List input delayMaximum delay between keypresses in filelist-widgets before a search string resets. -listdelay Mouse wheel scrollNumber of lines a mouse scroll will move in list-widgets-mwheel Double-click speedSpeed of mouse double-clicks-mdouble Controller repeat delayDelay before controller input repeats-ctrldelay Controller repeat rateRate of controller input repeats-ctrlrate\n\nThis tab is described in further detail in Advanced Configuration - ROM Launcher.\n\nSnapshot Settings dialog:\n\nA snapshot archive can be downloaded here.\n\nItemBrief descriptionFor more information,\n\nsee Command Line Save pathSpecifies where to save snapshots-snapsavedir Continuous snapshot intervalInterval (in seconds) between snapshots-ssinterval Use actual ROM nameUse the actual ROM filename instead of the internal ROM database name-snapname Overwrite existing filesWhether to overwrite old snapshots-sssingle Create pixel-exact image (no zoom/post-processing)Save snapshot using the exact pixels from the TIA image, without zoom or any post-processing effects-ss1x\n\nDeveloper Settings dialog:\n\nThis tab is described in further detail in Advanced Configuration - Developer Options/Integrated Debugger.\n\nGame Properties dialog:\n\nThis dialog allows you to change all ROM properties as described in Advanced Configuration - Game Properties.\n\nAudit ROMs dialog:\n\nThis dialog is described in further detail in Advanced Configuration - ROM Audit Mode.\n\nEvent Remapping/Input Devices\n\nAlmost every event in Stella can be remapped to another key on the keyboard or to buttons on up to eight joysticks/gamepads (see Getting Started - Keyboard Layout for those events which can/cannot be remapped).\n\nNote that there are currently two separate event modes in Stella; emulation mode and user-interface (UI) mode. Each mode has separate mappings, so (for example) while in emulation mode, the left arrow could mean 'joystick 0 left', while in UI mode it could mean 'move cursor left'. Emulation mode occurs whenever you're actually playing a game. UI mode occurs whenever a user interface is present (ROM launcher, debugger, settings menu, etc.).\n\nTo remap an event:\n\nEnter Options Menu and click the Input Settings button.\n\nClick the 'Event Mappings' tab. Here you can also filter the list of events by type.\n\nSelect the event you want to remap and click the 'Map' button.\n\nNow define the input:\n\nEither press a key, a modifier key (Control, Shift...) or a modifier+key combination.\n\nOr use a controller direction, a button or a button+controller direction combination.\n\nThen that key (combination) or controller action will be bound to the selected event. Notes:\n\nIf nothing seems to happen, either Stella can't see the input device, or the selected event doesn't support being remapped to the input device.\n\nThe same input can be used for multiple controller types (e.g. 'Right' for 'Left Joystick Right' and 'Left Paddle A Turn Right').\n\nIf the same input is used again for the same controller type, the old mapping will be removed.\n\nEvents which are available in both event modes can be remapped individually.\n\nLeft and right modifiers are mapped separately when used alone.\n\nYou can also:\n\nCancel a remap in progress by clicking 'Cancel'.\n\nNote: Pressing 'ESC' will map that key, not abort the mapping.\n\nErase all event's mappings by clicking 'Erase'.\n\nReset the event to its default mapping by clicking 'Reset'.\n\nReset all emulation or UI event mappings to default by clicking 'Defaults'.\n\nThe following screenshots illustrate the event remapping process:\n\nFinally there is a 'Combo' button in the 'Emulation Events' tab, accessible only when a Combo event has been selected from the list of events on the left. Clicking 'Combo' will show a dialog similar to the following:\n\nIn this dialog, you can assign various events to the selected combo event. Note that this only assigns multiple events to the combo; you still need to map the combo event itself to some action, as described in the 'remap an event' section above.\n\nDevice and port settings can be configured under the 'Devices & Ports' tab, shown below:\n\nItemBrief descriptionFor more information,\n\nsee Command Line Digital dead zone sizeDead zone area for axes on joysticks/gamepads emulating digital controllers -joydeadzone Analog dead zone sizeDead zone area for axes on joysticks/gamepads emulating analog controllers -adeadzone (Analog paddle) SensitivitySensitivity of analog paddles-psense (Analog paddle) LinearityLinearity of analog paddles-plinear (Analog paddle) Dejitter averagingStrength of paddle input averaging, suppresses paddle jitter\n\nNote: The 2600-daptor has built-in dejitter, so there should be no need to use Stella's dejitter. -dejitter.base (Analog paddle) Dejitter reactionStrength of paddle reaction to fast paddle movements, suppresses paddle jitter-dejitter.diff Digital paddle sensitivitySensitivity used when emulating a paddle using a digital device-dsense AutofireSet auto fire mode on or off-autofire (Autofire) RateAutomatic trigger rate of the fire buttons in Hz-autofirerate Allow all 4 directions ...Allow all 4 joystick directions to be pressed simultaneously-joyallow4 Use modifier key combosEnable using modifier keys in keyboard actions-modcombo Swap Stelladaptor portsSwap the order of the detected Stelladaptors/2600-daptors (see Advanced Configuration - Stelladaptor/2600-daptor Support)-saport Controller DatabaseShow all controllers that Stella knows about, with the option to remove them Erase EEPROMErase the whole AtariVox/SaveKey flash memory AtariVox serial portDescribed in further detail in Advanced Configuration - AtariVox/SaveKey Support -avoxport\n\nMouse settings can be configured under the 'Mouse' tab, shown below:\n\nItemBrief descriptionFor more information,\n\nsee Command Line Use mouse as ...Allow the mouse to emulate various controllers-usemouse (Sensitivity) PaddleSensitivity used when emulating a paddle using a mouse-msense (Sensitivity) TrackballSensitivity used when emulating a trackball device using a mouse-tsense (Sensitivity) Driving controllerSensitivity used when emulating a driving controller device using a mouse or a digital device-dcsense Mouse cursor visibilityShow/hide cursor depending on current state-cursor Grab mouse ...Keep mouse in window in emulation mode\n\n(only when used as controller)\n\nNote: The sensitivity may greatly vary when the mouse is not grabbed.-grabmouse\n\nROM Launcher\n\nSeveral options are configurable in the ROM launcher. The size of the launcher and fonts, as well as the 'ROM Info Viewer' can be changed in the UI Settings - Launcher dialog, as shown below:\n\nMost of the options are self-explanatory, except for the 'ROM info width' and 'Image path...', which are described below.\n\nROM Info Viewer\n\nStella supports viewing snapshots and ROM properties of the currently selected ROM in the ROM launcher. Support is automatic, as long as your image directory contains snapshots in the appropriate format. An archive of updated snapshots is available on the Stella webpage. This archive may be updated periodically as new ROMs are found, and also for each new release of Stella. In case no snapshot is found, you can provide a default image named 'default_snapshot.png'. Note that the snapshots can be any size (e.g. generated by Stella); they will be resized accordingly.\n\nThe ROM Info Viewer's width can be defined between 0% (off) and 100%. The value is relative to the launcher width. For too small or too large values, Stella will automatically correct the width at runtime so that the ROM names and the current ROM's information always have enough space.\n\nThe following snapshots illustrate the various font sizes and rom info widths:\n\nROM Info Viewer width at 40%, UI sized 800x480, small launcher font, bottom buttons enabled:\n\nROM Info Viewer width at 32%, UI sized 900x720, medium launcher font, bottom buttons disabled::\n\nROM Info Viewer width at 50% , UI sized 1280x900, large launcher font, bottom buttons disabled::\n\nThe dialog items at the top can be used to define the listed files and to navigate your folders:\n\nThe 'Filter' text box can be used to narrow down the results in the ROM listing. When this box is empty, all files are shown. Typing characters here will show only those files that match that pattern. For example, typing 'Activision' will show only files that contain the word 'Activision' in their name. This is very useful for quickly finding a group of related ROMs. Note that the search is not case sensitive, so you don't need to worry about capital or lower-case letters. You also can use '*' and '?' as wildcards. E.g. for '(198?)*atari' only ROMs from the 1980s made by Atari will be listed.\n\nDisplay either files which do have a valid ROM extension or all files.\n\nDisplay either files from current directory only or all subdirectories too.\n\nOpen this help for the launcher.\n\nQuick folder navigation buttons; the path display allows direct navigation by clicking an element.\n\nReload the list.\n\nFavorite ROMs and Directories\n\nStella allows to manually favor ROMs and directories and also automatially tracks all played ROMs. These ROMs are presented in three virtual directories:\n\nFavorites: Lists all ROMs and directories manually favored by the user (see ROM Launcher Context Menu).\n\nRecently Played: Contains the recently played ROMs. By default the latest 20 ROMs are tracked (the Command Line parameter '-maxrecentroms' allows changing the number of tracked ROMs).\n\nMost Popular: Stella automatically creates a list of most frequently and lately played ROMs. This list is presented here.\n\nThe directories are only displayed when they are not empty (e.g. no favored ROMs) and are only present in the current ROM path. Their default ROM sort order can be changed (see ROM Launcher Context Menu).\n\nROM Launcher Context Menu\n\nThe ROM launcher also contains a context menu, opened by clicking the right mouse button in the ROM list or by a long controller button press. This context menu can contain the following items:\n\nRemove from recently played/most popular (or 'Control + X'): Removes the selected ROM from the current virtual folder.\n\nAdd to/remove from favorites (or 'Control + F'): Toggles the favorite state of the selected ROM or directory.\n\nGame properties (or 'Control + G'): Opens the Game properties dialog.\n\nPower-on options (or 'Control + P'): Opens a dialog whereby ROM properties can be temporarily overridden, and joystick/console buttons can be temporarily held down. Selecting options from this dialog will cause all ROMs launched after that to use those properties you specify. Clicking Defaults will disable its functionality, and use ROM properties as defined by the ROM itself. The dialog is as follows (see Advanced Configuration - Game Properties for more information concerning ROM properties):\n\nItemFor more information,\n\nsee Commandline Bankswitch type-bs TV type-tv Left difficulty-ld Right difficulty-rd Startup mode-debug Left joy items-holdjoy0 Right joy items-holdjoy1 Console: Select-holdselect Console: Reset-holdreset\n\nHigh scores (or 'Control + H'): Opens the High Scores dialog for the selected ROM. Only available if high score properties have been setup for the ROM.\n\nEnable/disable file extensions (or 'Control + E'): Toggles the display of the file extensions.\n\nToggle alternative sorting (or 'Control + S'): Toggles alternative sorting in the virtual directories.\n\nShow all files/only ROMs (or 'Control + A'): Toggles display of non-ROM files.\n\nInclude/exclude subdirectories (or 'Control + D'): Toggles searching of ROMs in current directory only or all subdirectories too.\n\nReload listing (or 'Control + R'): Performs a reload of the current file listing.\n\nROM Audit Mode\n\nStella has the ability to rename all your ROMs according to the name specified in the ROM properties database. This is useful if you've downloaded ROMs in DOS 8.3 naming format, and wish the filenames to be more descriptive, or the current filenames are too large to see in the launcher.\n\nThis feature is accessible from Options => Audit ROMs, and is only available while in ROM launcher mode. The dialog box for this feature is as follows:\n\nSimply select the ROM path with the 'Audit path' button, and click the 'Audit' button. The ROMs will then be renamed according to their internal properties. When the operation is complete, the number of ROMs that were renamed (as well as ones that weren't) will be shown.\n\nThere are several items to take note of:\n\nTHIS OPERATION CANNOT BE UNDONE. I cannot stress this enough; if you aren't completely sure you want to rename your ROMs, don't use this function. There is no undo feature, and one won't be added.\n\nOnly filenames that Stella considers to be valid ROMs will be considered. Currently, this means files with extensions described in \"Supported File formats\". Files which don't have these extensions will be ignored.\n\nIf a valid ROM doesn't have a properties entry, it will be ignored.\n\nStelladaptor/2600-daptor Support\n\nStella supports real Atari 2600 joysticks, paddles, driving controllers and trackballs (CX22/CX80 'Trak-Ball', Atari and Amiga mouse) using the Stelladaptor and 2600-daptor devices.\n\nStella can use up to two adaptors; any extra ones are ignored. Stelladaptor devices will be automatically detected and configured. The actual controllers can be plugged/unplugged while the emulator is running, although you will need to restart the game currently being emulated.\n\nThe detection and configuration is as follows:\n\nThe first device found will act as the left game port on a real Atari. Depending on the device, Stella will detect it as either the left joystick, left paddles A & B, the left driving controller, left keyboard, etc.\n\nThe second device found will act as the right game port on a real Atari. Depending on the device, Stella will detect it as either the right joystick, right paddles A & B, the right driving controller, right keyboard, etc.\n\nAny other devices will be ignored.\n\nThe assignment ordering of Stelladaptor/2600-daptor to port can be redefined with 'saport' (see description in Using the Command Line) and dynamically with the 'Control + 1' key combo.\n\nAtariVox/SaveKey Support\n\nStella supports a real AtariVox device for the speech/SpeakJet portion of the controller. You will need a real AtariVox device as well as some means of connecting it to your computer (some sort of serial port/USB adaptor). There should be drivers for your serial convertor, which allow your particular operating system to 'see' the device (configuring this is outside the scope of this document). Once your operating system properly detects the AtariVox, you will need to tell Stella which serial port it is connected to. This is done by using the '-avoxport' command line argument, or by setting it in the UI under the 'Devices & Ports' tab in Advanced Configuration - Input Devices.\n\nNote that you must use the entire name of the port as specified by your operating system. For example, in Windows this would be COM1, COM2, etc.; Linux and macOS tend to use names similar to '/dev/xxxxxx'. For now, only Linux/UNIX, macOS, and Windows are supported.\n\nSupport for the EEPROM portion of the AtariVox and SaveKey is currently emulated. That is, a file will be created on your computer simulating the EEPROM; the actual EEPROM hardware itself will not be accessed or modified. This is very useful in the testing stages of creating a new game, since writing to a real EEPROM many times will eventually wear it out.\n\nThe location of EEPROM files will depend on the version of Stella, as follows:\n\nLinux/Unix $HOME/.config/stella/nvram/atarivox_eeprom.dat\n\n$HOME/.config/stella/nvram/savekey_eeprom.dat Macintosh $HOME/Library/Application Support/Stella/nvram/atarivox_eeprom.dat\n\n$HOME/Library/Application Support/Stella/nvram/savekey_eeprom.dat Windows %APPDATA%\\Stella\\nvram\\atarivox_eeprom.dat\n\n%APPDATA%\\Stella\\nvram\\savekey_eeprom.dat If using 'basedir'\n\nor 'baseinappdir' _BASEDIR_/nvram/atarivox_eeprom.dat\n\n_BASEDIR_/nvram/savekey_eeprom.dat\n\nNote that these EEPROM files will be created when necessary, and initialized as a real EEPROM would be (containing all $FF). The files can be manually deleted, which is very useful in testing cases where a ROM is accessing the EEPROM for the first time. You can also reset the EEPROM to a clean state.\n\nDeveloper Options/Integrated Debugger\n\nSeveral developer related options can be configured in the 'Developer Settings' dialog. Two sets ('Player settings', 'Developer settings') allow easy adjustment of all settings for different use cases (playing or developing games) at once.\n\nDeveloper Settings dialog (Emulator)\n\nItem Brief description For more information,\n\nsee Command Line Player/Developer settings Selects the active settings set -dev.settings Console info overlay Overlay console info on the TIA image during emulation. -plr.stats\n\n-dev.stats Detected settings info Display detected settings when a ROM is loaded -plr.detectedinfo\n\n-dev.detectedinfo Display external access message Display a message for any external access (AtariVox/SaveKey EEPROM, PlusROM, Supercharger...) -plr.extaccess\n\n-dev.extaccess Console Select the console type, this affects Color/B&W/Pause key emulation and zero-page RAM initialization -plr.console\n\n-dev.console Random startup bank Randomize the startup bank (only for selected bankswitch types) -plr.bankrandom\n\n-dev.bankrandom Randomize TIA Randomize TIA registers when loading a ROM -plr.tiarandom\n\n-dev.tiarandom Randomize zero-page ... When loading a ROM, randomize all RAM content instead of initializing with all zeroes (for 'Console' = 'Atari 2600' only) -plr.ramrandom\n\n-dev.ramrandom Randomize CPU When loading a ROM, randomize the content of the specified CPU registers -plr.cpurandom\n\n-dev.cpurandom Drive unused TIA pins ... Unused TIA pins are read random instead of the last databus values -dev.tiadriven Break on reads from ... A read from a write port interrupts emulation and the debugger is entered. -dev.rwportbreak Break on writes to ... A write to a read port interrupts emulation and the debugger is entered. -dev.wrportbreak Fatal ARM emulation ... Thumb ARM emulation throws an exception and enters the debugger on fatal errors -dev.thumb.trapfatal\n\nDeveloper Settings dialog (TIA):\n\nItemBrief descriptionFor more information,\n\nsee Command Line Chip typeType of emulated TIA chip. Allows testing for TIA versions which exhibit timing problems in certain games. The 'Custom' option allows testing for glitch combinations.-dev.tia.type Inverted HMOVE clock...Emulates the Kool-Aid Man collision and Cosmic Ark stars glitches for the given objects. -dev.tia.plinvphase-dev.tia.msinvphase-dev.tia.blinvphase Delayed PlayfieldEmulates playfield changes moved by one color clock. This e.g. causes glitches in Pesco (stray playfield pixel), Quick Step! (colored step borders) and Matchie (vertical line at pixel 79). -dev.tia.delaypfbits-dev.tia.delaypfcolor-dev.tia.pfscoreglitch Delayed BackgroundEmulates background color register changes delayed by one color clock. This causes stray pixel in the Indy 500 menu hack. -dev.tia.delaybkcolor Delayed VDEL... swap forEmulates a VDELP0/P1/BL swap delayed by one color clock. This e.g cause glitches in the He-Man title screen. -dev.tia.delayplswap-dev.tia.delayblswap\n\nDeveloper Settings dialog (Video):\n\nItemBrief descriptionFor more information,\n\nsee Command Line Jitter/roll effectEmulate screen roll with inconsistent scanline count-plr.tv.jitter\n\n-dev.tv.jitter (Jitter/roll) SensitivityDetermines sensitivity for screen rolling-plr.tv.jitter_sense\n\n-dev.tv.jitter_sense (Jitter/roll) RecoveryDetermines recovery time for screen rolling-plr.tv.jitter_recovery\n\n-dev.tv.jitter_recovery PAL color-lossUse PAL color-loss effect-plr.colorloss\n\n-dev.colorloss Debug colorsUse fixed debug colors-plr.debugcolors\n\n-dev.debugcolors Player 0\n\nMissile 0\n\nPlayer 1\n\nMissile 1\n\nPlayfield\n\nBall Set color for specific object in 'Debug Colors' mode (copies of the same object have a slightly different luminance)\n\nDisabled in ROM launcher mode-tia.dbgcolors\n\nDeveloper Settings dialog (Time Machine)\n\nItemBrief descriptionFor more information,\n\nsee Command Line Time Machine When the Time Machine is enabled, Stella will automatically buffer save states in the interval described below. The user can then navigate back and forth within the recorded timeline. Note: This buffer is identical with the one described in Debugger - Global Buttons. It is independent from the save states manually created with F9. -plr.timemachine\n\n-dev.timemachine Buffer size Defines the Time Machine buffer size. The larger the buffer, the less save states have to be compressed to reach the horizon. -plr.tm.size\n\n-dev.tm.size Uncompressed size (*) Defines the uncompressed Time Machine buffer size. States within this area will not be compressed and keep their initial interval. -plr.tm.uncompressed\n\n-dev.tm.uncompressed Interval Defines the interval between two save states when they are created. -plr.tm.interval\n\n-dev.tm.interval Horizon Defines the horizon of the Time Machine. A large horizon allows going back further in time. To reach the horizon, save states will be compressed (*). This means that more and more intermediate states will be removed and the interval between save states becomes larger the further they are back in time.\n\n(*) Compression only works if 'Uncompressed size' is smaller than 'Buffer size'. -plr.tm.horizon\n\n-dev.tm.horizon\n\nDeveloper Settings dialog (Debugger)\n\nItemBrief descriptionFor more information,\n\nsee Command Line Font sizeSelf-explanatory-dbg.fontsize Font styleSelf-explanatory-dbg.fontstyle Debugger width/heightSelf-explanatory-dbg.res Trap on 'ghost' readsDefines whether the debugger should consider CPU 'ghost' reads for trap addresses.-dbg.ghostreadstrap\n\nMany more options are available for ROM developers, which are described in different sections of this manual, as follows:\n\nDeveloper key-combo shortcuts, used to change TIA state dynamically (ie, while the emulation is still running). See Keyboard Layout - Developer Keys for more information.\n\nCommandline options influencing emulation state. See Using the Command Line - Developer Commands for more information.\n\nViewing TIA/console information overlaid on the TIA image. This option can be enabled from the command line or using the Alt-L key combo, and is extremely useful for viewing the current scanline count and associated frames per second, bankswitch and display formats, etc. The following shows an example of this information:\n\nThe three lines of output describe the following:\n\nNumber of scanlines in current frame, associated framerate, and resulting display format. Note that the framerate shown is the internal, virtual framerate (it's calculated from the number of scanlines). If the '*' character is present, it means the display format was auto-detected as shown. For the given example, the format was auto-detected as 'NTSC'.\n\nEffective emulation speed displayed as frames per second and user defined emulation speed displayed as percentage relative to normal speed.\n\nCartridge information. If the '*' character is present, it means the bankswitch format was auto-detected as shown. The item in round brackets indicates ROM size. For the given example, the bankswitch type was auto-detected as 4K, and the file size was 4K (4096 bytes).\n\nFinally, Stella contains an extensive, built-in debugger. Have a look at this page for integrated debugger documentation.\n\nUser Data\n\nStella will remember when you change a setting or game property or save a new high score. It will use saved data the next time you start the emulator. The data is stored in an SQLite database which can be edited outside of Stella (e.g. with DB Browser for SQLite).\n\nSettings can be changed either at the command line or while the emulation is running. The database can contain your default options and eliminates the need to specify them on the command line. Any options specified on the command line will override those in the user database.\n\nTo manually edit the settings, browse the data in the table of the same name. The table has two columns. The first column contains the setting command, which is the same as the one specified on the Command Line (without the '-' character). The second column holds the value, which is dependent on the command.\n\nFor example, the following table illustrates how command line and settings entries are similar:\n\nCommand Line Column setting Column value -video opengl video opengl -volume 75 volume 75 -center 1 center 1 (or true)\n\nThe database file is named 'stella.sqlite3' and has a special, non-configurable location depending on which version of Stella you use:\n\nLinux/Unix $HOME/.config/stella/ Macintosh $HOME/Library/Application Support/Stella/ Windows %APPDATA%\\Stella\\ If using 'basedir'\n\nor 'baseinappdir' _BASEDIR_/\n\nIn addition to the stella.sqlite3 file, there may also be a file stella.sqlite3-wal. This file is part of the database and must not be deleted!\n\nCheatcode Manager\n\nStella contains support for Bob Colbert's Cheetah cheat codes, as well as an extended Stella-specific type of cheat code that works on bankswitched ROMs.\n\nTo add/remove/edit a cheat code, enter the 'Cheat Code' dialog:\n\nCurrently, there are three types of cheatcodes available, all of which must be entered in hexadecimal format:\n\nPer-frame RAM cheats:\n\nEvaluated each frame, and apply to RAM only. Format as follows:\n\n4-digit code: c041 c0 = address 41 = data\n\nCheetah codes, which are explained in detail on Bob Colbert's"
    }
}