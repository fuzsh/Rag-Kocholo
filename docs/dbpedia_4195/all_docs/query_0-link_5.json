{
    "id": "dbpedia_4195_0",
    "rank": 5,
    "data": {
        "url": "https://github.com/morgan3d/quadplay/blob/main/doc/manual.md.html",
        "read_more_link": "",
        "language": "en",
        "title": "quadplay/doc/manual.md.html at main · morgan3d/quadplay",
        "top_image": "https://repository-images.githubusercontent.com/189204570/fae76900-ee9c-11ea-9134-54fe69182281",
        "meta_img": "https://repository-images.githubusercontent.com/189204570/fae76900-ee9c-11ea-9134-54fe69182281",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The quadplay✜ fantasy console. Contribute to morgan3d/quadplay development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/morgan3d/quadplay/blob/main/doc/manual.md.html",
        "text": "<meta charset=\"utf-8\"><style class=\"fallback\">@media screen{body{background:#3a3a3a;color:#ccc}}</style>\n\n<link rel=\"icon\" type=\"image/png\" sizes=\"64x64\" href=\"../console/icons/favicon-64x64.png\">\n\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"../console/icons/favicon-32x32.png\">\n\n<link rel=\"shortcut icon\" href=\"../console/icons/favicon.ico\">\n\n**quadplay✜**\n\nFantasy Console by [Casual Effects](https://casual-effects.com)\n\n<center>[*Quick Start*](#quickstart)\n\n∙ [API](#standardlibrary) ([*Input*](#standardlibrary/input) ∙ [*Physics*](#standardlibrary/physics) ∙ [*Graphics*](#standardlibrary/graphics) ∙ [*Sound*](#standardlibrary/sound) ∙ [*AI*](#standardlibrary/ai) ∙ [*Network*](#network))\n\n<br>[Assets](assets.md.html target=_blank) ([*Sprites*](assets.md.html#sprites target=_blank) ∙ [*Fonts*](assets.md.html#fonts target=_blank) ∙ [*Sounds*](assets.md.html#sounds target=_blank))\n\n<br>[Controls](#controls)\n\n∙ [Symbols](#symbols)\n\n∙ [JSON Formats](#projectfiles)\n\n∙ [Language Spec](#pyxlscriptlanguage)\n\n∙ [Change Log](changelog.md.html)\n\n<img src=\"ide.png\" style=\"image-rendering: auto; width:75%; border-radius: 0 0 4px 4px; box-shadow: 1px 5px 7px rgba(0,0,0,.20); margin-bottom: 28px; margin-top:20px\"></center>\n\n> \"Imagine the year 1989 in a fantasy timeline. Instead of chasing\n\n> realistic 3D, game consoles get modern tools and mechanics for\n\n> 2D. <quadplay/> is the fantasy predecessor of Nintendo64 and\n\n> PlayStation that puts fun first in game jams and education. Its\n\n> retro constraints scope art and code for success. <quadplay/>'s\n\n> modern scripting, physics, local and online multiplayer, and AI\n\n> empower easy implementation and great gameplay.\"\n\n[**<span style=\"font-size: 95%; font-family: quadplay\">quadplay✜</span>**](../console/quadplay.html?IDE=1)\n\nis a web-based fantasy game console for sprite-based 2.5D\n\ngames. It lets you create games with the power and consistency of a\n\ngame console and the flexibility of modern tools and web deployment.\n\nBecause it is free, is easy to use, and runs everywhere, <quadplay/> is\n\nperfect for hobby coding, a game programming course, teaching yourself\n\nprogramming and game development, and game jams.\n\nThe integrated development environment (IDE) is packaged as an\n\nemulator with the tools that you need to make games: an editor,\n\ndebugger, and profiler.\n\n**Virtual Hardware Features**\n\n- Support for 1-4 players, including automatic remote play\n\n- Standardized controller with D-pad + 8-button gamepads\n\n(SNES/PS1/Saturn-style) and automatic device-specific\n\nbutton prompts on all platforms\n\n- Touch screen/mouse input\n\n- 60 fps, with autoscaling on low-end machines\n\n- 384 x 224 pixel screen = 12:7 aspect ≈ 16:9.3\n\n- 4096 sRGB (4:4:4) colors\n\n- Native 2.5D graphics with order-independent 16-level transparency\n\n- Bloom, motion blur, and phosphor burn-in post-processing\n\n- 2D rigid body, joint, and motor physics\n\n- 2D positional audio with pitch, volume, and rate\n\n- 10.5 MB of total sprite memory\n\n- Max 128 sprite and font sheets, max size 1024x1024\n\n- 262 kB offline save data per game\n\n- Pathfinding and board game AI\n\n- Local and online multiplayer\n\n- Optional I/O extension modes for\n\n640 x 360, 320 x 180, 192 x 112, 128 x 128, and 64 x 64 screen modes;\n\nanalog sticks and triggers; dual D-pads; multitouch\n\n**Software Features**\n\n- [Export](#deployinggames) to your own website, itch.io, or github pages\n\n- Games run on web, mobile, desktop, tablet, Jetson Nano, Raspberry Pi 4/400\n\n- Free for commercial, personal, and educational use\n\n- Friendly and powerful PyxlScript Python-like scripting language\n\n- Run locally and offline using Python + web browser\n\n- Hundreds of built-in Creative Commons assets\n\n- Full command line, external editor, and external art tool support\n\nfor power users with automatic file sync\n\n- Open source: use online, fork, or run locally\n\n- Runtime PNG, MP3, TMX, JSON, YAML, TXT, and CSV data formats\n\n**API**\n\n- Sprite, pixel, circle, line, triangle, rectangle, and polygon drawing with rotation and scaling\n\n- Font, tilemap, and UI window drawing\n\n- Optional entity parenting hierarchy\n\n- Ray casting and collision detection\n\n- Postprocessing effects\n\n- Persistence (saving and loading)\n\n- Nestable state-machine \"modes\"\n\n- Per-mode callback \"hooks\"\n\n<quadplay/> is ideal for game jams, and it has been used for many\n\nincluding [Ludum Dare](https://ludumdare.com/) and the\n\n[Global Game Jam](https://globalgamejam.org/). It has special\n\nsupport of MIDI I/O for [Alt.Ctrl.GDC](https://gdconf.com/alt-ctrl-gdc)\n\nand a 64x64 screen mode for [Lowrezjam](https://itch.io/jam/lowrezjam-2022).\n\nQuick Start\n\n====================================================================================\n\nWelcome to <quadplay/>!\n\n<table style=\"width:100%\"><tr><td>\n\n<a href=\"https://morgan3d.github.io/quadplay/tools/windows-install-quadplay.cmd\" download style=\"background-image: linear-gradient(to top, #306fcf 0%, #80bfff 70%, #bbefff 100%); text-shadow: 0px -1px 1px rgb(0 0 0 / 50%); color:#fff !important; text-decoration: none; width:360px; display: block; border: 2px solid #fff; border-radius: 30px; padding: 20px; font-size: 150%; box-shadow: 1px 1px #000; font-weight: bold; text-align: center\">Download Windows Installer</a>\n\n</td><td>\n\n*macOS and Linux:*\n\n1. Install [Python 3.7](https://www.python.org/) or newer\n\n2. Unzip [<quadplay/>](https://github.com/morgan3d/quadplay/archive/main.zip) to wherever you want\n\n3. Run `quadplay` from the terminal\n\n<!-- - A modern web browser ([_Edge_](https://www.microsoft.com/en-us/edge), [_Chrome_](https://www.google.com/chrome/), [_Brave_](https://brave.com/), [_Firefox_](https://www.mozilla.org/en-US/firefox/new/), or _Safari_) -->\n\n</td></tr></table>\n\nTo make a game, select the \"Tools\" menu from inside the quadplay\n\ndevelopment environment and then the \"New Game\" option. Look at the\n\nBuilt-In Games section for more examples.\n\nIf you've worked with other scripting languages, then you may want to\n\nread the PICO-8 section, Python section, or JavaScript section of this\n\ndocument for some starting tips.\n\nIf you're new to programming, just look at the many sample games and\n\nexamples that are included and try modifying your own copies of them.\n\n!!! Info Pro Developers\n\nExperienced programmers can use external editors with <quadplay/> for both\n\nprogramming and directly modifying game and asset `.json` files by:\n\n<ul>\n\n<li>Optionally [clone the SDK with git](https://github.com/morgan3d/quadplay) to manage SDK upgrades</li>\n\n<li>Install a code editor (_[Visual Studio Code](https://code.visualstudio.com/), [Atom](https://atom.io/), [Sublime Text](https://www.sublimetext.com), Vim, Emacs, etc._)</li>\n\n<li>Install the PyxlScript extension for your editor: _[Visual Studio Code](#advancedtools/visualstudiocode)_, _[Vim](#advancedTools/vim)_, _[Emacs](#advancedtools/emacs)_</li>\n\n<li>Put your games under `~/my_quadplay/`. The IDE always creates new games in the root of that path, but\n\nyou can reorganize it to form a hierarchy to group games or manage different games\n\nusing different version control repositories. </li>\n\n</ul>\n\nOn Windows, click on the shortcut on your desktop to run <quadplay/>. Or launch from the\n\ncommand line on Windows CMD, macOS Terminal, or a Linux terminal with\n\nthe `quadplay` command in the root of the SDK.\n\nHere are some examples:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bash\n\n# Run the emulator and IDE. You can use Open Game from the Tools\n\n# menu to load games\n\nquadplay\n\n# Load the games/quadpaddle/quadpaddle.game.json sample program\n\nquadplay quad://games/quadpaddle\n\n# Load the space.game.json game that you've made (on Mac and Linux)\n\nquadplay ~/my_quadplay/space\n\n# Load the space.game.json game that you've made (on Windows)\n\nquadplay C:\\Users\\MYNAME\\my_quadplay\\space\n\n# Load your game and allow mobile clients to connect by scanning\n\n# the QR code displayed in the IDE (Mac and Linux)\n\nquadplay --serve ~/my_quadplay/space\n\n# ... Windows\n\nquadplay --serve C:\\Users\\MYNAME\\my_quadplay\\space\n\n# Launch quadplay as a standalone game kiosk\n\nquadplay --kiosk\n\n# Load a game from the web (their server must support CORS)\n\nquadplay https://morgan3d.github.io/somegame/foo.game.json\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor more advanced controls and to make the quadplay local server\n\nvisible, you can run `tools/quadplay-server` instead.\n\nThese examples assume that your directory structure is:\n\n*****************************************************************************\n\n* 📂 HOME (~/ on Mac and Linux, %HOMEDRIVE%%HOMEPATH% on Windows)\n\n* |\n\n* +-- 📂 my_quadplay\n\n* | |\n\n* | '-- 📂 space\n\n* | |\n\n* | +-- 📄 space.game.json\n\n* | |\n\n* ⋮ ⋮\n\n*\n\n* 📂 quadplay\n\n* |\n\n* +-- 📄 quadplay\n\n* +-- 📄 quadplay.vbs\n\n* |\n\n* +-- 📂 fonts\n\n* | |\n\n* | ⋮\n\n* |\n\n* +-- 📂 games\n\n* | |\n\n* | +-- 📂 quadpaddle\n\n* | | |\n\n* | | +-- 📄 quadpaddle.game.json\n\n* | | |\n\n* | ⋮ ⋮\n\n* |\n\n* +-- 📂 sprites\n\n* | |\n\n* ⋮ ⋮\n\n*****************************************************************************\n\n[Directory structure with the `quadplay` script in the root.]\n\nThe directory and `.game.json` file do not have to have the same\n\nname. You can list the full path to the actual game file instead.\n\nYour games do not have to be stored in a subdirectory of the SDK.\n\nThey can be anywhere on your system.\n\nEvery time you push the Run button (F5) or Reload button (Ctrl+R) in\n\nthe emulator within the web browser, it will reload your code and\n\nassets from disk. So, you can mix an external editor with the built-in\n\nIDE without worrying about synchronization.\n\nYou can use the built-in assets from the developer kit, existing ones\n\nfrom sites like [OpenGameArt.org](http://opengameart.org) and\n\n[FreeSound](http://freesound.org), or create your own using:\n\n- PNG pixel art editor for sprites and fonts (_[Gimp](https://www.gimp.org/), [AseSprite](https://www.aseprite.org/), [Krita](https://krita.org/en/), Photoshop, GraphicsGale, etc._)\n\n- MP3 sound tools (_[BFXR](https://www.bfxr.net/), [Audacity](https://www.audacityteam.org/), etc._)\n\n- TMX map tool ([Tiled](https://www.mapeditor.org/), [TileKit](https://rxi.itch.io/tilekit))\n\n_People playing your game don't need Python, just a web browser. See the Deploying Games section for more information._\n\nWorkflow\n\n------------------------------------------------------------------------------------\n\nYou should create your programs however works best for you. Here's how\n\nI like to work in <quadplay/>:\n\n1. I start with a project file to load standard assets from `quad://`\n\nand a single *mode* called `Play.pyxl` that has no sections. I write a\n\nlittle code to draw the game.\n\n2. Pretty soon, I need some state that persists between frames, so I separate\n\n`Play.pyxl` into top level initialization code and a `frame` *section*. I then declare variables\n\nin in the top level of the mode, and as my main loop grows too long, I start to define helper\n\nfunctions there as well.\n\n3. At some point, I'm ready for *another mode*. This is usually for\n\ngameplay reasons, and not polish, because it is still early in the project.\n\nThis might be a map or inventory screen, for example. As soon as there\n\nis a new mode, I need to have variables that can be seen by both modes.\n\nSo, I also create a `common.pyxl` file or other *script* to store the global\n\nvariables. I continue this process as more modes are required, periodically\n\nchecking the mode system diagram in the IDE to ensure that the game\n\nflow is what I expected.\n\n4. As code starts to become duplicated in the modes, I move generally\n\nuseful helper functions out to scripts. When the scripts themselves\n\nget long, I start grouping them by functionality. For example, `particle.pyxl`,\n\n`animation.pyxl`, and `hud.pyxl`.\n\nThis is a workflow that is good for prototyping, especially in game\n\njam and hobby projects. I feel like keeping everything as simple as\n\npossible and then refactoring at growth points is best for\n\nproductivity.\n\nOtherwise, it is hard to iterate in the beginning because you're stuck\n\nwith big program abstractions in what is still a small program. Many\n\nprototypes don't go the distance to become big programs,\n\nanyway. There's no reason to overdesign early on.\n\nBuilt-In Games\n\n------------------------------------------------------------------------------------\n\nFive complete games and many examples are included to show how to use the API.\n\nIf you are accessing this manual from a web site or your local machine running\n\nthe <quadplay/> emulator, use the links here to launch the game in your browser,\n\npress the Run button (F5) to start the game.\n\n### Playable\n\n<center><img src=\"../games/quadpaddle/logo.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/quadpaddle/preview.png')\"></div>\n\n[Quadpaddle](../console/quadplay.html?game=quad://games/quadpaddle&IDE=1) is a four-player cooperative game inspired by [_Breakout_](\"https://en.wikipedia.org/wiki/Breakout_(video_game)\"):\n\n- Powerups\n\n- Level-end animations\n\n- Particle system\n\n- Screen shake\n\n- Frame hooks\n\n- Coordinates with +Y pointing down\n\n----------------------------\n\n<center><img src=\"../games/doublesdepon/label128.png\" width=128px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/doublesdepon/preview.png')\"></div>\n\n[Doubles de Pon](../console/quadplay.html?game=quad://games/doublesdepon&IDE=1) is 1-4 player action puzzle matching game:\n\n- Custom music\n\n- High scores\n\n- Menus and character selection\n\n- Multiple play modes\n\n- Complex animation \"juice\"\n\n----------------------------\n\n<center><img src=\"../games/across_the_lake/title_text.png\" width=320px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/across_the_lake/preview.png')\"></div>\n\n[across the lake](../console/quadplay.html?game=quad://games/across_the_lake&IDE=1) is an endless runner created for Ludum Dare 46\n\nbased on skipping stones over a lake in the evening.\n\n- Crossfading\n\n- Simple custom physics\n\n- Custom camera\n\n- Coordinates with +Y pointing up\n\n- Procedural content\n\n- Fake reflections\n\n- Parallax and pseudo 3D\n\n----------------------------\n\n<center><img src=\"../games/minimecha/title.png\" width=320px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/minimecha/preview.png')\"></div>\n\n[Morgan's Mini Mecha](../console/quadplay.html?game=quad://games/minimecha&IDE=1) is turn-based\n\nstrategy game created in a one week game jam. It is inspired by _Into The Breach_, _Advance Wars_,\n\nand Shogi.\n\n- Turn based UI\n\n- Board game artificial intelligence player\n\n- Complex scripted transitions and animations\n\n- High scores\n\n- Procedural map terrain\n\n----------------------------\n\n<center><big>Friendly Fishing</big></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/friendly_fishing/preview.png')\"></div>\n\n[Friendly Fishing](../console/quadplay.html?game=quad://games/friendly_fishing&IDE=1)\n\nJoin your friends for a relaxing afternoon of fishing and you just might top the lake records.\n\n- Animation using `sequence()` and `delay()`\n\n- The built-in shapes spritesheet\n\n- Complex high-score system\n\n- Use of `z` as depth\n\n- Color `make_spline()`\n\n- Tap, hold, and press button processing\n\n----------------------------\n\n<center><img src=\"serpitron_title_alpha.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/serpitron/preview.png')\"></div>\n\n[Serpitron](../console/quadplay.html?game=quad://games/serpitron&IDE=1) is a four-player\n\ncompetive game derived from Snake-like games, including [TRON](\"https://en.wikipedia.org/wiki/Tron_(video_game)\"):\n\n- Level transitions using post effects\n\n- Drop shadows\n\n- Player selection\n\n- Sorting\n\n- Collisions\n\n----------------------------\n\n<center><img src=\"../games/hexflipper/title.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/hexflipper/preview.png')\"></div>\n\n[HexFlipper](../console/quadplay.html?game=quad://games/hexflipper&IDE=1) is a one to four-player\n\ncompetive game of area control:\n\n- Computer player AI\n\n- Hex grids\n\n- Boardgame style logic\n\n- Music\n\n----------------------------\n\n<center><img src=\"../games/icetime/title.png\" width=200px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/icetime/preview.png')\"></div>\n\n[Ice Time](../console/quadplay.html?game=quad://games/icetime&IDE=1) is a four-player competitive or cooperative 2 vs. 2 ice hockey game:\n\n- 192 x 112 graphics\n\n- AI players\n\n- Cut scenes\n\n- Persistent data\n\n- Reflection effects\n\n----------------------------\n\n<center><img src=\"../games/duality/label128.png\" width=200px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/duality/preview.png')\"></div>\n\n[Duality](../console/quadplay.html?game=quad://games/duality&IDE=1) is a one- or two-player\n\ngame inspired by Pong and Breakout:\n\n- Animations\n\n- Simulation\n\n- AI player\n\n- Post Effects\n\n- Slow motion\n\n----------------------------\n\n<center><img src=\"../games/gravity/label128.png\" width=200px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/gravity/preview.png')\"></div>\n\n[Gravity](../console/quadplay.html?game=quad://games/gravity&IDE=1) is a 2-4 player game\n\ninspired by SPACEWAR!\n\n- Uses only built-in assets\n\n- Charging and cooldowns\n\n- Post-Effects afterglow\n\n- Simulation\n\n- Emergent behavior\n\n----------------------------\n\n<center><img src=\"../games/firmament/title.png\" width=200px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/firmament/preview.png')\"></div>\n\n[Black Firmament](../console/quadplay.html?game=quad://games/firmament&IDE=1) is a 1-2 player game\n\nextending Gravity with full fleets.\n\n- AI players\n\n- Multiple modes\n\n- Title menu\n\n- Complex control schemes\n\n- Unit selection\n\n- Post-Effects afterglow\n\n- Significant physics simulation\n\n- Emergent behavior\n\n----------------------------\n\n<center><img src=\"../games/beat_the_gobblins/label128.png\" width=128px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/beat_the_gobblins/preview.png')\"></div>\n\n[Beat the Gobblins](../console/quadplay.html?game=quad://games/beat_the_gobblins&IDE=1) is a single-player arcade battle arena:\n\n- High scores\n\n- Custom music\n\n- Animated title\n\n- Animated explosions\n\n- Character spawning\n\n----------------------------\n\n<center><img src=\"../games/beyond_control/label128.png\" width=128px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/beyond_control/preview.png')\"></div>\n\n[Beyond Control](../console/quadplay.html?game=quad://games/beyond_control&IDE=1) is a game for 1-4 players controlling broken robots:\n\n- Hexgrid\n\n- Asynchronous animations\n\n- Turn based system\n\n- In-game user interface\n\n- Dynamic layout\n\n- Dynamic map\n\n- Animated map\n\n----------------------------\n\n<center><img src=\"../games/rps/label128.png\" width=128px style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/rps/preview.png')\"></div>\n\n[R. P. S.](../console/quadplay.html?game=quad://games/rps&IDE=1) is a rock-paper-scissors battle royale for up to four players:\n\n- Extensive animation\n\n- Use of modes for simplicity\n\n- Timed sound effects\n\n- Private choices in multiplayer\n\n- Combinatorial logic\n\n----------------------------\n\n<center><img src=\"../games/rescue_roguelike/sprites/title.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/rescue_roguelike/preview.png')\"></div>\n\n[Rescue Roguelike](../console/quadplay.html?game=quad://games/rescue_roguelike&IDE=1) is a tactical turn-based\n\nadventure game inspired by Into the Breach and Rogue:\n\n- Constants\n\n- Touch and mouse interaction\n\n- Aseprite sprites\n\n- Extensive data-driven design with external YAML files\n\n----------------------------\n\n<center><img src=\"../games/but_skunks/title.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/but_skunks/preview.png')\"></div>\n\n[But...Skunks?!](../console/quadplay.html?game=quad://games/but_skunks&IDE=1) is a one or two player\n\nrhythm game.\n\n----------------------------\n\n<center><img src=\"../games/drop_bloq/title.png\" width=\"300px\" style=\"border:0\"></center>\n\n<div class=\"preview pixel\" style=\"background-image:url('../games/drop_bloq/preview.png')\"></div>\n\n[Drop Bloq](../console/quadplay.html?game=quad://games/drop_bloq&IDE=1)\n\n5-in-a-row game at 8x8 resolution (!) that plays on any device, including an Ableton MIDI\n\ncontroller (Push, Launchpad, APC, etc.). Also demonstrates built-in AI routines.\n\n### Examples\n\n<table class=\"aligned\">\n\n<tr><td width=192>![](../examples/starter/label128.png)</td><td>\n\n[Starter](../console/quadplay.html?game=quad://examples/starter&IDE=1) is a project with a basic setup\n\nfrom which you can build your own.\n\n</td></tr><tr><td>![](../examples/helloworld/label128.png)</td><td>\n\n[Hello, World](../console/quadplay.html?game=quad://examples/helloworld&IDE=1) is a minimal example of a program with\n\none mode, one asset, and no sections or optional elements, and that simply puts text\n\non the screen.\n\n</td></tr><tr><td>![](../examples/rpg/label128.png)</td><td>\n\n[RPG Demo](../console/quadplay.html?game=quad://examples/rpg&IDE=1) is a simple example of a single-player RPG game design:\n\n- Multiple [modes](#modes): Play, Inventory, and Shop\n\n- Multi-layer map\n\n- Player movement with obstructions\n\n- NPC interaction\n\n</td></tr><tr><td>![](../examples/dual-stick/label128.png)</td><td>\n\n[Dual-Stick Example](../console/quadplay.html?game=quad://examples/dual-stick&IDE=1) shows how to use dual-stick controls.\n\nThe body of the tank is controlled by player 1 and the turret is controlled by player 2. When\n\nusing a dual-stick game controller or keyboard, a single player can also use the right stick\n\nor right side of the keyboard to control the turret.\n\n- Dual-stick controls\n\n- Working with angles\n\n- Entity parenting\n\n- 320x180 resolution\n\n</td></tr><tr><td>![](../examples/maze/label128.png)</td><td>\n\n[Maze](../console/quadplay.html?game=quad://examples/maze&IDE=1) is a demonstration\n\nof `map_generate_maze()`.\n\n</td></tr><tr><td>![](../examples/robot/label128.png)</td><td>\n\n[Robot Example](../console/quadplay.html?game=quad://examples/robot&IDE=1) shows how to create and animate a deep\n\nentity hierarchy.\n\n- Entity parenting\n\n- Pivots that are not at the center of sprites\n\n- Using scale and rotation together\n\n- Graphics tricks for reflections\n\n</td></tr><tr><td>![](../examples/animation/label128.png)</td><td>\n\n[Animation Example](../console/quadplay.html?game=quad://examples/animation&IDE=1) shows how to handle complicated\n\nsprite animations.\n\n- Sprite animations\n\n- Basic jumping physics\n\n- Changing direction\n\n- Modular items\n\n</td></tr><tr><td>![](../examples/vehicles/label128.png)</td><td>\n\n[Vehicles Example](../console/quadplay.html?game=quad://examples/vehicles&IDE=1) contains examples of several vehicle controls\n\nfrom a free-direction top-down perspective.\n\n- 2.5D camera perspective\n\n- Using the ⓔ and ⓕ buttons\n\n- Simple vehicle simulation for control feel\n\n- Entities with moving child parts\n\n- 2.5D sprite stacking\n\n- Dynamic shadows\n\n- Minimap\n\n</td></tr><tr><td>![](../examples/fluid/label128.png)</td><td>\n\n[Fluid Example](../console/quadplay.html?game=quad://examples/fluid&IDE=1) is a cellular automata fluid flow simulation\n\nwith gravity and pressure.\n\n</td></tr><tr><td>![](../examples/roguelike/label128.png)</td><td>\n\n[Roguelike Example](../console/quadplay.html?game=quad://examples/roguelike&IDE=1) uses the roguelike sprite set for tilemap\n\nrendering with a simple text-heavy UI section.\n\n</td></tr><tr><td>![](../examples/dynamic_accel/label128.png)</td><td>\n\n[Dynamic Acceleration Example](../console/quadplay.html?game=quad://examples/dynamic_accel&IDE=1) is a simple demonstration of how various acceleration curves feel, changing only three constants: top speed, acceleration time and deceleration time. Up and down change the constants to fit different games.\n\n</td></tr><tr><td>![](../examples/boids/label128.png)</td><td>\n\n[Boids Example](../console/quadplay.html?game=quad://examples/boids&IDE=1) implements the famous [\"boids\" flocking algorithm](https://en.wikipedia.org/wiki/Boids).\n\n</td></tr><tr><td>![](../examples/clouds/label128.png)</td><td>\n\n[Clouds Example](../console/quadplay.html?game=quad://examples/clouds&IDE=1) demonstrates per-pixel graphics and multi-octave `noise()` functions. The virtual\n\nGPU is fast enough to process one point per pixel, but this technique is not recommended in general because the computations to produce the points\n\ntend to be too slow, even if this simple.\n\n</td></tr><tr><td>![](../examples/dark_drive/label128.png)</td><td>\n\n[A Dark Drive](../console/quadplay.html?game=quad://examples/dark_drive&IDE=1)\n\nA simple horror game jam project using polygon drawing to create darkness\n\naround car headlights.\n\n</td></tr><tr><td>![](../examples/entity/label128.png)</td><td>\n\n[Entity Example](../console/quadplay.html?game=quad://examples/entity&IDE=1)\n\nShows different ways of constructing entities with text and sprites.\n\n</td></tr><tr><td>![](../examples/physics/label128.png)</td><td>\n\n[Physics Example](../console/quadplay.html?game=quad://examples/physics&IDE=1) shows all of the features of the\n\nphysics engine, including the debugging visualization.\n\n</td></tr><tr><td>![](../examples/physics_arrow/label128.png)</td><td>\n\n[Physics Example](../console/quadplay.html?game=quad://examples/physics_arrow&IDE=1) shows how to use dynamic\n\nattachments in the physics engine to make objects connect at runtime, and how to simulate aerodynamics so that\n\narrows will fly straight.\n\n</td></tr><tr><td>![](../examples/text/label128.png)</td><td>\n\n[Text Example](../console/quadplay.html?game=quad://examples/text&IDE=1) shows how to use `replace()`, `draw_text()`, `join()`,\n\n`format_number()`, and `draw_sprite_corner_rect()` to build text-heavy interfaces.\n\n</td></tr><tr><td>![](../examples/fontpreview/label128.png)</td><td>\n\n[Font Preview](../console/quadplay.html?game=quad://examples/fontpreview&IDE=1) shows how to render text in various styles\n\nand acts as a tool for previewing fonts when creating new ones. Use the arrow keys to scroll down and see more examples\n\nin the program, and edit the `game.json` file to see a different font.\n\n</td></tr><tr><td>![](../examples/highscore/label128.png)</td><td>\n\n[High Score Example](../console/quadplay.html?game=quad://examples/highscore&IDE=1) demonstrates `load_local()` and `save_local()` to\n\nmaintain a high score list, with `push_mode()` for creating a popup dialog.\n\n</td></tr><tr><td>![](../examples/vaporwave/label128.png)</td><td>\n\n[Vaporwave Example](../console/quadplay.html?game=quad://examples/vaporwave&IDE=1) uses pseudo-3D techniques of pre-rendered\n\nsprites and polygon meshes.\n\n</td></tr><tr><td>![](../examples/sproing/label128.png)</td><td>\n\n[Sproing Example](../console/quadplay.html?game=quad://examples/sproing&IDE=1) shows a squash and stretch effect for transforming sprites.\n\n</td></tr><tr><td>![](../examples/perceptual_color/label128.png)</td><td>\n\n[Perceptual Color](../console/quadplay.html?game=quad://examples/perceptual_color&IDE=1) shows the difference between `perceptual_lerp_color()` and `lerp()`.\n\n</td></tr><tr><td>![](../examples/zcar/label128.png)</td><td>\n\n[Z-Car Example](../console/quadplay.html?game=quad://examples/zcar&IDE=1) draws a 3D wireframe car using 2.5D graphics\n\nand CRT orange-screen retro phosophor effects.\n\n</td></tr><tr><td>![](../examples/lift_team/label128.png)</td><td>\n\n[Lift Team](../console/quadplay.html?game=quad://examples/lift_team&IDE=1) combines physics and dynamic constraints for an asymmetric platformer setup, where one\n\nplayer flies a helicopter that can lift the other player's mech.\n\n</td></tr><tr><td>![](../examples/anim_entity_example/label128.png)</td><td>\n\n[Animated Entity Example](../console/quadplay.html?game=quad://examples/anim_entity_example&IDE=1) Entity\n\nanimation example simplified from _Beat The Gobblins_.\n\n</td></tr><tr><td>![](../examples/bezier_eye_creature/label128.png)</td><td>\n\n[Bezier Eye Creature](../console/quadplay.html?game=quad://examples/bezier_eye_creature&IDE=1) uses splines\n\nto create natural curves for a soft bodied creature.\n\n</td></tr><tr><td>![](../examples/sequence_demo/label128.png)</td><td>\n\n[Sequence Demo (transition effect)](../console/quadplay.html?game=quad://examples/sequence_demo&IDE=1)\n\nShows how to use the sequence function to create a transition effect, which is\n\nfactored out into an easy to drop in library. The sequence function lets\n\nchoreograph series of frame hooks one after the other.\n\n</td></tr><tr><td>![](../examples/gridmove/label128.png)</td><td>\n\n[Grid Movement](../console/quadplay.html?game=quad://examples/gridmove&IDE=1)\n\nAtari style grid movement with smooth interpolation and wrapping,\n\nsimilar to PAC-MAN, Centipede, etc.\n\n</td></tr><tr><td>![](../examples/islands/label128.png)</td><td>\n\n[Islands](../console/quadplay.html?game=quad://examples/islands&IDE=1) contains optimized implementations\n\nof per-pixel rendering and plausible water and sailboat simulation.\n\n</td></tr><tr><td>![](../examples/cards/label128.png)</td><td>\n\n[Cards](../console/quadplay.html?game=quad://examples/cards&IDE=1) is an example of creating and manipulating a deck of cards, including `add_frame_hook()` for flipping animations.\n\n</td></tr><tr><td>![](../examples/dice/label128.png)</td><td>\n\n[Dice](../console/quadplay.html?game=quad://examples/dice&IDE=1) uses `scripts/dice.pyxl` to show how to make and roll customizable 3D dice for virtual board games.\n\n</td></tr><tr><td>![](../examples/piano/label128.png)</td><td>\n\n[Piano](../console/quadplay.html?game=quad://examples/piano&IDE=1)\n\nUsing `pitch` with `play_sound()` to adjust frequency,\n\nand data-driven input testing.\n\n</td></tr><tr><td>![](../examples/spritestack/label128.png)</td><td>\n\n[Spritestack](../console/quadplay.html?game=quad://examples/spritestack&IDE=1)\n\nis a little engine for Grand Theft Auto 2.5D rendering and physics of a 2D game using sprite stacking and camera perspective.\n\n</td></tr><tr><td>![](../examples/speedstreet/label128.png)</td><td>\n\n[Speed Street](../console/quadplay.html?game=quad://examples/speedstreet&IDE=1) is the setup for a four-player competitive racing game inspired by [_Excitebike_](https://en.wikipedia.org/wiki/Excitebike) and Tony Hawk games, using:\n\n- Entity hierarchy\n\n- Simple custom physics\n\n- Orthographic 2.5D graphics\n\n- Coordinates with +Y pointing up\n\n- `override_color`\n\n</td></tr><tr><td>![](../examples/planetgen/label128.png)</td><td>\n\n[Planet Generator](../console/quadplay.html?game=quad://examples/planetgen&IDE=1) uses built-in assets to create random 3D planets with moons, stars, atmosphere, and rings.\n\n</td></tr><tr><td>![](../examples/change_res/label128.png)</td><td>\n\n[Change Resolution](../console/quadplay.html?game=quad://examples/change_res&IDE=1) is an example of using `set_screen_size()` to change resolution at runtime.\n\n</td></tr><tr><td>![](../examples/input/label128.png)</td><td>\n\n[Input Example](../console/quadplay.html?game=quad://examples/input&IDE=1) is a demonstration and test\n\nof the full input API. It uses the cross-platform controllers and touch as well as the extended analog\n\nstick and mouse APIs. Shows how to completely hide the OS mouse cursor with `device_control(\"set_mouse_cursor\", \"none\")`.\n\n</td></tr><tr><td>![](../examples/touch/label128.png)</td><td>\n\n[Touch Example](../console/quadplay.html?game=quad://examples/touch&IDE=1) uses the mouse/touch API.\n\n</td></tr><tr><td>![](../examples/countdown/label128.png)</td><td>\n\n[Countdown Example](../console/quadplay.html?game=quad://examples/countdown&IDE=1) shows how to used `local_time()`\n\nand perform time zone math.\n\n</td></tr><tr><td>![](../examples/hex/label128.png)</td><td>\n\n[RPG Demo](../console/quadplay.html?game=quad://examples/hex&IDE=1) is an example of hex grids with coordinate\n\nsystem conversion, rendering, and click support.\n\n</td></tr><tr><td>![](../examples/tic_tac_toe/label128.png)</td><td>\n\n[Tic Tac Toe](../console/quadplay.html?game=quad://examples/tic_tac_toe&IDE=1) shows how to take turns,\n\nand mix `gamepad_array`, `touch`, and `device_control(\"get_mouse_state\")` to support\n\nmouseover/hover, touch screen, and gamepads in a single game user interface.\n\n</td></tr><tr><td>![](../examples/platformer/label128.png)</td><td>\n\n[Platformer](../console/quadplay.html?game=quad://examples/platformer&IDE=1) is an example of classic 8-bit platforming physics,\n\nwith jump, wall jump, wall slide, short jump, ledge forgiveness, hazards, and variable friction.\n\n</td></tr><tr><td>![](../examples/twin_analog/label128.png)</td><td>\n\n[Twin Analog Example](../console/quadplay.html?game=quad://examples/twin_analog&IDE=1) shows how to use `device_control()` to access\n\ntwin analog sticks and game controller triggers that are not standard on quadplay consoles.\n\n</td></tr><tr><td>![](../examples/kart/label128.png)</td><td>\n\n[Kart Example](../console/quadplay.html?game=quad://examples/kart&IDE=1) is a perspective camera\n\nview with a textured ground plane similar to Space Harrier, Mario Kart, and Pilotwings.\n\n</td></tr><tr><td>![](../examples/warlock3D/label128.png)</td><td>\n\n[Warlock Example](../console/quadplay.html?game=quad://examples/warlock3D&IDE=1) is 3D first person\n\nrendering similar to DOOM and Heretic, with shading, textured floors and walls, billboarded\n\ncharacters, pitch and yaw, and jumping. It demonstrates retro D-pad + shoulder button strafe,\n\nquadplay dual D-pad, conventional dual analog, and mouselook controls.\n\n</td></tr><tr><td>![](../examples/word_game/label128.png)</td><td>\n\n[Word Game](../console/quadplay.html?game=quad://examples/word_game&IDE=1)\n\nPlayful use of text and animated level transitions.\n\n</td></tr><tr><td>![](../examples/zoom2D/label128.png)</td><td>\n\n[Zoom 2D](../console/quadplay.html?game=quad://examples/zoom2D&IDE=1)\n\nSimplified example of 2D zoom using `set_camera()`.\n\n</td></tr><tr><td>![](../examples/zoom/label128.png)</td><td>\n\n[Zoom 3D](../console/quadplay.html?game=quad://examples/zoom&IDE=1)\n\nSimplified example of 3D perspective zoom using `set_camera()`. See also the Vehicle example.\n\n</td></tr><tr><td>![](../examples/private_view/label128.png)</td><td>\n\n[Private Views](../console/quadplay.html?game=quad://examples/private_view&IDE=1)\n\nPrivate view example for online multiplayer using `set_screen_size()` and\n\n`VIEW_ARRAY`. Also shows how to streamline online game configuration using\n\n`start_guesting()`, `start_hosting()`, and `HOST_CODE`.\n\n</td></tr><tr><td>![](../examples/textspheres/label128.png)</td><td>\n\n[Text Spheres](../console/quadplay.html?game=quad://examples/textspheres&IDE=1)\n\nSample title screen animation converting text (from a pre-drawn PNG) into\n\n3D shapes for animation.\n\n</td></tr><tr><td>![](../examples/midi_starrypad/label128.png)</td><td>\n\n[MIDI Starrypad](../console/quadplay.html?game=quad://examples/midi_starrypad&IDE=1)\n\nExample of using the Donner Starrypad physical MIDI controller with <quadplay/>,\n\nwith all buttons, knobs, pads, and faders mapped.\n\n</td></tr><tr><td>![](../examples/midi_launchpad/label128.png)</td><td>\n\n[MIDI Launchpad](../console/quadplay.html?game=quad://examples/midi_launchpad&IDE=1)\n\nExample of using the Novation Launchpad physical MIDI controller with <quadplay/>\n\nand Sysex messages so that it acts as both an input and output display device.\n\n</td></tr><tr><td>![](../examples/midi_fcb1010/label128.png)</td><td>\n\n[MIDI FCB1010](../console/quadplay.html?game=quad://examples/midi_fcb1010&IDE=1)\n\nExample of using the Behringer FCB1010 physical MIDI controller with <quadplay/>\n\nwith all default controls mapped.\n\n</td></tr><tr><td>![](../examples/midi_8x8/label128.png)</td><td>\n\n[MIDI 8x8 Touch Jam](../console/quadplay.html?game=quad://examples/midi_8x8&IDE=1)\n\nSample program for a MIDI controller jam, demonstrating the `midi_8x8.pyxl` helper\n\nscript.\n\n</td></tr><tr><td>![](../examples/multitouch/label128.png)</td><td>\n\n[Multitouch](../console/quadplay.html?game=quad://examples/multitouch&IDE=1)\n\nExample of `device_control()` for reading multitouch input on touch screens.\n\n</td></tr><tr><td>![](../examples/bezier_eye_creature/label128.png)</td><td>\n\n[Bezier Eye Creature](../console/quadplay.html?game=quad://examples/bezier_eye_creature&IDE=1)\n\nExample of a library that uses a simple quadratic bezier + spring system to\n\nsimulate bouncy cable/rope/arms.\n\n</td></tr><tr><td>![](../examples/anim_entity_example/label128.png)</td><td>\n\n[Animation Entity Example](../console/quadplay.html?game=quad://examples/anim_entity_example&IDE=1)\n\nBy way of an anim entity library, demonstrates how to read sprite frame timing\n\nfrom a sprite sheet authored in aseprite.\n\n</td></tr><tr><td>![](../examples/color_wheel/label128.png)</td><td>\n\n[Color Wheel](../console/quadplay.html?game=quad://examples/color_wheel&IDE=1)\n\nshows the difference between `hsv()` and `artist_hsv_to_rgb()` hues\n\nand brightnesses.\n\n</td></tr></table>\n\n### Inspiration\n\nSome games that were not made in <quadplay/>, but which fit within the\n\nrestrictions of quadplay and are sources of inspiration for their\n\narcade graphics and gameplay follow. We've specifically determined\n\nthat the main technical challenges of each of these can be met on\n\n<quadplay/>.\n\n<div style=\"columns:3;-webkit-columns:3;-moz-columns:3;column-gap:3em;-webkit-column-gap:3em;-moz-column-gap:3em\">\n\n- [TowerFall Ascension](http://www.towerfall-game.com/)\n\n- [Crawl](https://www.powerhoof.com/crawl/)\n\n- [Nuclear Throne](http://nuclearthrone.com/)\n\n- [Celeste](http://www.celestegame.com/)\n\n- [Undertale](https://undertale.com/)\n\n- [Monolith](https://store.steampowered.com/app/603960/Monolith/)\n\n- [Crypt of the Necrodancer](https://store.steampowered.com/app/247080/Crypt_of_the_NecroDancer/)\n\n- [Shovel Knight](https://yachtclubgames.com/shovel-knight/)\n\n- [Sonic Mania](https://www.sega.com/games/sonicmania)\n\n- [Spelunky Classic](https://spelunkyworld.com/original.html)\n\n- [Dwarf Fortress](http://www.bay12games.com/dwarves/)\n\n- [Contra](\"https://en.wikipedia.org/wiki/Contra_(video_game)\")\n\n- [Super Contra](https://en.wikipedia.org/wiki/Super_Contra)\n\n- [Kirby's Adventure](https://en.wikipedia.org/wiki/Kirby%27s_Adventure)\n\n- [Gradius](https://en.wikipedia.org/wiki/Gradius)\n\n- [Life Force](https://youtu.be/lgfTC3UVCVs)\n\n- [Gradius II](https://en.wikipedia.org/wiki/Gradius_II)\n\n- [Gradius III](https://en.wikipedia.org/wiki/Gradius_III)\n\n- [River City Ransom](https://en.wikipedia.org/wiki/River_City_Ransom)\n\n- [Double Dragon](\"https://en.wikipedia.org/wiki/Double_Dragon_(video_game)\")\n\n- [Super Double Dragon](https://en.wikipedia.org/wiki/Super_Double_Dragon)\n\n- [Castlevania II](https://en.wikipedia.org/wiki/Castlevania_II:_Simon%27s_Quest)\n\n- [Castlevania III](https://en.wikipedia.org/wiki/Castlevania_III:_Dracula%27s_Curse)\n\n- [Castlevania: Symphony of the Night](https://en.wikipedia.org/wiki/Castlevania:_Symphony_of_the_Night)\n\n- [Castlevania: Aria of Sorrow](https://en.wikipedia.org/wiki/Castlevania:_Aria_of_Sorrow)\n\n- [Castlevania: Dawn of Sorrow](https://en.wikipedia.org/wiki/Castlevania:_Dawn_of_Sorrow)\n\n- [Advance Wars](https://en.wikipedia.org/wiki/Advance_Wars)\n\n- [Advance Wars Dual Strike](https://en.wikipedia.org/wiki/Advance_Wars:_Dual_Strike)\n\n- [Out Run](https://en.wikipedia.org/wiki/Out_Run)\n\n- [Dig Dug](https://en.wikipedia.org/wiki/Dig_Dug)\n\n- [Batman](https://en.wikipedia.org/wiki/Batman:_The_Video_Game)\n\n- [Tetris](https://en.wikipedia.org/wiki/Tetris)\n\n- [Blades of Steel](https://en.wikipedia.org/wiki/Blades_of_Steel)\n\n- [Pac-Man](https://en.wikipedia.org/wiki/Pac-Man)\n\n- [PGA Tour Golf](https://en.wikipedia.org/wiki/PGA_Tour_Golf)\n\n- [Lode Runner](https://en.wikipedia.org/wiki/Lode_Runner)\n\n- [Star Fox](https://en.wikipedia.org/wiki/Star_Fox)\n\n- [Metroid](https://en.wikipedia.org/wiki/Metroid)\n\n- [The Legend of Zelda](\"https://en.wikipedia.org/wiki/The_Legend_of_Zelda_(video_game)\")\n\n- [Zelda II: The Adventure of Link](https://en.wikipedia.org/wiki/Zelda_II:_The_Adventure_of_Link)\n\n- [The Legend of Zelda: Link's Awakening](https://en.wikipedia.org/wiki/The_Legend_of_Zelda:_Link%27s_Awakening)\n\n- [The Legend of Zelda: A Link to the Past](https://en.wikipedia.org/wiki/The_Legend_of_Zelda:_A_Link_to_the_Past)\n\n- [Mega Man 2](https://en.wikipedia.org/wiki/Mega_Man_2)\n\n- [Super Mario Bros.](https://en.wikipedia.org/wiki/Super_Mario_Bros.)\n\n- [Super Mario Bros. 2](https://en.wikipedia.org/wiki/Super_Mario_Bros._2)\n\n- [Super Mario Bros. 3](https://en.wikipedia.org/wiki/Super_Mario_Bros._3)\n\n- [Rogue](\"https://en.wikipedia.org/wiki/Rogue_(video_game)\")\n\n- [NetHack](https://en.wikipedia.org/wiki/NetHack)\n\n- [Snake](\"https://en.wikipedia.org/wiki/Snake_(video_game_genre)\")\n\n- [Minit](https://store.steampowered.com/app/609490/Minit/)\n\n- [Chasm](https://bitkidinc.itch.io/chasm)\n\n- [Eliminator Boat Duel](https://www.youtube.com/watch?v=NM7ZNX0GUBI)\n\n- [The Eternal Castle](http://www.theeternalcastle.net/)\n\n- [DOOM](\"https://en.wikipedia.org/wiki/Doom_(1993_video_game)\")\n\n- [DOOM II](https://en.wikipedia.org/wiki/Doom_II)\n\n- [Heretic](\"https://en.wikipedia.org/wiki/Heretic_(video_game)\")\n\n- [Dark Forces](https://en.wikipedia.org/wiki/Star_Wars:_Dark_Forces)\n\n- [Marathon](\"https://en.wikipedia.org/wiki/Marathon_(video_game)\")\n\n- [Ultima Underworld](https://en.wikipedia.org/wiki/Ultima_Underworld:_The_Stygian_Abyss)\n\n- [Loom](\"https://en.wikipedia.org/wiki/Loom_(video_game)\")\n\n- [Day of the Tentacle](https://en.wikipedia.org/wiki/Day_of_the_Tentacle)\n\n- [Pilotwings](\"https://en.wikipedia.org/wiki/Pilotwings_(video_game)\")\n\n- [Super Mario Kart](https://en.wikipedia.org/wiki/Super_Mario_Kart)\n\n- [Sonic Drift](https://en.wikipedia.org/wiki/Sonic_Drift)\n\n- [F-Zero](\"https://en.wikipedia.org/wiki/F-Zero_(video_game)\")\n\n- [Space Harrier](https://en.wikipedia.org/wiki/Space_Harrier)\n\n</div>\n\nThese are games that would fit the restrictions of <quadplay/> except they use native vector displays in their original implementations:\n\n- [Asteroids](\"https://en.wikipedia.org/wiki/Asteroids_(video_game)\")\n\n- [Battlezone](\"https://en.wikipedia.org/wiki/Battlezone_(1980_video_game)\")\n\n- [Space War](https://en.wikipedia.org/wiki/Spacewar!)\n\n- [Tempest](\"https://en.wikipedia.org/wiki/Tempest_(video_game)\")\n\nThese are games whose style and gameplay would fit, but that would exceed the resolution limitations of <quadplay/>:\n\n- [Axiom Verge](http://www.axiomverge.com/)\n\n- [Into the Breach](https://subsetgames.com/itb.html)\n\nProgramming Model\n\n------------------------------------------------------------------------------------\n\nThe **PyxlScript** programming language is designed to make compact,\n\nreadable games. It blends Python, Lua, and JavaScript\n\nsyntax. Indentation and newlines signify blocks and ends of\n\nstatements. The syntax is based on math notation and looks like\n\npseudocode. Variables are explicitly declared and dynamically\n\ntyped. There's lexical scope, first class functions, and literal\n\nexpressions for objects and (zero-based) arrays. It is decidedly\n\nfunction-based instead of object-oriented.\n\nMost of PyxlScript programming is typical of any imperative,\n\nhigh-level language. It is similar to Python, Lua, JavaScript, C#,\n\nand Java.\n\nThere are three special parts of the PyxlScript programming model that\n\nare designed to simplify programming arcade games. These special\n\nfeatures are [*modes*](#modes), [*2.5D graphics*](#2.5dgraphics), and [*frame hooks*](#framehooks).\n\n### Modes\n\nYour program consists of one or more *modes* which are game states that the\n\nplayer will experience. Common modes are \"Play\", \"Title\", \"Inventory\", \"CutScene\", and \"GameOver\". Use `set_mode()` to change which mode the program is in.\n\nClicking on the \"Modes\" label on the left side of the IDE draws\n\na diagram showing the modes and transitions for your program.\n\n![Mode diagram for the Quadpaddle sample game, as shown in the IDE.](modes.png width=50% style=\"image-rendering:auto\")\n\nFor each mode, you specify what code runs every *frame*. This is the\n\nbody of the inner loop. Modes have capitalized names and are defined\n\nin a script file with the same name. The simplest implementation of a\n\nmode is just this per-frame code.\n\nThe `mode_frames` variable tracks the number of frames since this mode started.\n\n`set_mode()` changes the mode and leaves a note in the debugging output explaining\n\nwhy the mode changed. It is also used by the IDE to visualize the state machine\n\nof your program and label the transitions, as in the diagram above.\n\n`get_mode()` returns the current mode, which acts like a special constant.\n\nYou can also separate the mode file into different sections:\n\n- Top level: runs once when the game is first started. Usually just variable and function declarations.\n\n- `enter`: event that runs when this mode becomes active by another executing `push_mode()` or `set_mode()`. `enter` may be followed by an argument list\n\nthat will be filled with the values passed to `set_mode()` or `push_mode()`.\n\n- `frame`: event that runs every frame while this mode is active. Put your drawing and simulation code here.\n\n- `leave`: event that runs when the game changes to another mode by executing `pop_mode()` or `set_mode()` itself.\n\n- `pop_mode`: event that runs when the game returns to this mode from another by `pop_mode()`.\n\nNote that `leave` and `pop_mode` do not run on `reset_game()` or `quit_game()`.\n\nYou can think of these as callbacks, although they are not regular\n\nfunctions and can only be invoked directly by the console.\n\nYou may be familiar with the concept of a [state machine](https://en.wikipedia.org/wiki/Finite-state_machine),\n\nalso called a finite automata or flow chart. Your program is a state machine with the modes as the states.\n\n!!! Note: Transition Hints\n\nThe IDE automatically constructs the mode diagram from your program. It is\n\n[impossible](https://en.wikipedia.org/wiki/Undecidable_problem) to\n\ndo this for all programs, but it can usually do a good job. When\n\nthe automatic algorithm misses a link, you can give it a hint\n\nusing a commented out `set_mode()` call in your mode file. For\n\nexample, <span style=\"white-space: nowrap\">`// set_mode(GameOver) because \"0 lives\"`</span>\n\nwill add a link from the current mode to the `GameOver` mode.\n\nThe syntax of a mode with multiple sections is similar to [Markdown](https://en.wikipedia.org/wiki/Markdown) format:\n\n1. The name of the mode on the first line\n\n2. A line of `=`, `═`, or `⚌` characters to underline the mode name\n\n3. The top-level code\n\n4. The sections, each with a name underlined by `-`, `-`, `─`, `—`, `━`, or `⎯` characters\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ PyxlScript\n\nMenu\n\n═══════════════════════════════════════════════════════════\n\n// A good place to declare state only used by this mode\n\nlet selection\n\nconst choices = [\"Continue\", \"Show Map\", \"Abandon Mission\"]\n\nenter(value)\n\n───────────────────────────────────────────────────────────\n\n// Can also be enter without any arguments or parentheses\n\n// Reset any state\n\nselection = 0\n\nplay_sound(menuOpen)\n\nframe\n\n───────────────────────────────────────────────────────────\n\nset_background(rgb(1, 1, 0))\n\n// Up and down to change the choice\n\nselection = (selection + 3 + gamepad_array[0].y) mod 3\n\n// Draw the menu\n\nlet pos = screen_size / 2 - xy(0, 50)\n\ndraw_text(menuFont, \"→\", pos + xy(-50, 16 selection), #00F)\n\nfor c in choices:\n\ndraw_text(menu_font, c, pos, #000)\n\npos.y += 16\n\n// Button press to choose\n\nif gamepad_array[0].aa:\n\nif selection == 0: set_mode(Play) because \"Chose play\"\n\nelse if selection == 1: set_mode(Map) because \"Chose map\"\n\nelse: push_mode(ConfirmDialog) because \"Chose abandon\"\n\npop_mode(confirmed) from ConfirmDialog\n\n───────────────────────────────────────────────────────────"
    }
}