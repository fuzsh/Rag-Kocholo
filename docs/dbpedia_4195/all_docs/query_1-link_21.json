{
    "id": "dbpedia_4195_1",
    "rank": 21,
    "data": {
        "url": "https://intotheverticalblank.com/2023/05/29/atari-7800-basic-tutorial-1-hello-world/",
        "read_more_link": "",
        "language": "en",
        "title": "Atari 7800 Basic Lesson #1 : Hello World",
        "top_image": "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/lesson1_title.png?resize=1200%2C900&ssl=1",
        "meta_img": "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/lesson1_title.png?resize=1200%2C900&ssl=1",
        "images": [
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/lesson1_title.png?resize=930%2C450&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/1_vscode.png?w=723&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/2_setromsize.png?resize=723%2C585&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/3_get_set_fade.png?resize=673%2C785&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/3_5_rocket.png?resize=347%2C50&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/3_8_mustard.png?resize=723%2C561&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/4_puprlescreen.png?resize=723%2C552&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/4_5_colors.png?resize=332%2C375&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/font_big.png?resize=723%2C27&ssl=1",
            "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2023/05/5_helloworld.png?resize=723%2C568&ssl=1",
            "https://secure.gravatar.com/avatar/c86c5e4bf4ddeadb6b5d48fc1efa5b54?s=125&d=identicon&r=g"
        ],
        "movies": [
            "https://www.youtube.com/embed/i45aqBviQZI",
            "https://www.youtube.com/embed/oUuy5c5_8kA?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en-US&autohide=2&start=1&wmode=transparent"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-05-29T00:00:00",
        "summary": "",
        "meta_description": "Note: This tutorial series is designed as video series. The text below is provided as a way to make it easier to follow, but I recommend you watch the video and use the text as supplemental. This i…",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/intotheverticalblank.com/wp-content/uploads/2020/05/cropped-400_Into-The-Vertical-Blank-Logo-Icon-Dark-BG-Other-than-Black-1.png?fit=32%2C32&ssl=1",
        "meta_site_name": "",
        "canonical_link": "https://intotheverticalblank.com/2023/05/29/atari-7800-basic-tutorial-1-hello-world/",
        "text": "Note: This tutorial series is designed as video series. The text below is provided as a way to make it easier to follow, but I recommend you watch the video and use the text as supplemental.\n\nThis is the first in a series of videos showing my own techniques using Atari 7800 Basic. I do not claim these are the best or only way to do things, but they are the methods I have developed over the past few years.\n\nThe code in these tutorials is designed to be simple to read, so most of it will be unoptimized. Feel free to download the code from Github and optimize it yourself if that bothers you. You will find the GitHub link in the end notes.\n\nStep 1: Visual Studio code\n\nThe Atari 7800.\n\nFor me, it’s Atari’s most underutilized console, and the one that holds the most promise as to what can be done with a 6502 based Atari machine. The 7800 is backwards compatible with the 2600, but sports the Maria chip designed, at the time, to move graphics around the screen like no other machine, but especially better than the Colecovision, Atari’s main competition in 1983 when design started.\n\nWe will talk more about the history of Atari and the 7800 as this series continues, but for now, let’s get started by jumping in and created Atari 7800 Hello World”\n\n—\n\nThe first step is to download Visual Studio Code:\n\nYou can find it for the PC or Mac or Linux at code.visualstudio.com:\n\nVisual Studio Code: Visual Studio Code – Code Editing. Redefined\n\nOnce you have downloaded that you click the plug-in extensions button on the left side of the IDE, and you will see a searchable list of all the extensions available.\n\nThere are many.\n\nSearch for “Atari Dev Studio”\n\nAtrari Dev studio combines Atari 7800 Basic (created by Fred Quimby with help from Bruce Tomlin) and now maintained by Mike “RevEng” Saarna.\n\nWith the plug-in you can easily compile bAtari basic code, Atari 7800 Basic code, and DASM code. It also features a spirit editor and the A7800 emulator for easy testing.\n\nLook over on the preview pane and see the information for Atari Dev Studio\n\nNotice it was created by ChunkyPixel We are all indebted to ChunkyPixel for creating such a fine price of software.\n\nNow click the install button.\n\nNext create a new file and save it on your hard drive.\n\nI will call mine demo1.78b\n\nThe .78b extension will make sure Visual Studio Code associates the file with the 7800 compiler and provides code hints included in the Atari Dev Studio plug-in.\n\nNow we are ready to go!\n\nStep 2: Boilerplate\n\nFirst we will drop in some boiler-plate code of which we will need in all of Atari 7800 Basic games.\n\nI’m not going to explain every detail of every option we are using, but just enough so you can dive-in later and explore all the incredible options available in Atari 7800 Basic. You can find detailed descriptions of all Atari 7800 Basic functions in The Atari 7800 Basic Guide (https://www.randomterrain.com/7800basic.html)’\n\nset zoneheight 16 displaymode 160A set plotvalueonscreen on set romsize 32k\n\nNote: All code (except for jump labels and couple other things we’ll discuss later) must be tabbed-in at least one space)\n\nThe first line, “set zoneheight = 16” is how we set the horizontal band zones for sprites. Each horizontal band can have a set number of sprites, usually 16-20 depending on how many CPU cycles it takes to draw the entire screen. You can set this to either 8 or 16. 8 allows for more bands, but with fewer sprites in each band, while 16 has less band, but more sprites in each band. You will need to experiment with these options, and many others to optimize your Atari 7800 game.\n\nThe next line sets the graphics mode: displaymode 160A\n\n160A is the most basic mode. It is 160 x 192 pixels, which means the pixels are like tall rectangles. Each sprite in this mode can be 3 colors plus transparent.\n\nThere are other modes too: 160B allows for 12 color sprites, while multiple 320 modes allow for various hi-res screens that rely on color artifacting for multi-colored sprite display.\n\nIf you watched our previous video on 7800 Sprites, you can see some of these modes in action.\n\nThere will be a link in the notes. (https://www.youtube.com/watch?v=oUuy5c5_8kA&t=1s)\n\nMy favorite in 160A mixed with some 160B sprites, as we will see later in these lessons.\n\nThe next line, set plotvaluesonscreen on is used for debugging and we will talk about it later.\n\nset romsize 32k, this is the size of the cartridge. 32K is small, but we don’t need anything else yet. There are many cartridge sizes including ones that contain extra RAM to hold data and expand the number of sprites that can be displayed.\n\nThe Atari 7800 Basic guide created by Mike “RevEng” Saarna and adopted by Duane Alan Hahn, a.k.a. Random Terrain will give you detailed information about the valid options for this command, as well as invaluable information about Atari 7800 Basic.\n\nI usually keep it open in a window while I’m working.\n\nThis guide is updated often. There are many more commands and options listed in 2023 than there were in 2019 when I first started with it. In fact, just now I discovered something new.\n\nFor instance, while writing this I discovered these palette fading commands I’ve never seen before. These would have saved me a lot of work on my last project.\n\nThere is absolutely no way I can cover all of Atari 7800 Basic in these tutorials.\n\nMy job as I see it, is to show you these demos and get you started. Once you are comfortable you can devour the Atari 7800 Basic Guide, and then even tackle Assembly language some day (if that’s your thing).\n\nAnyway, for this game we will keep it simple for now and just use 32K.\n\nWith 32K we will not need to bank-switch, as the 7800 can address all 32K ROM space at once.\n\nDon’t know about bank-switching?\n\nIt’s a way to almost infinitely expand the ROM addressable on cartridge.\n\nI hope these lessons are successful enough that I’m inspired to tackle it later down the road.\n\nThe last line BACKGRND = $60 sets the background color.\n\nBACKGRND=$60\n\nPress the little “rocket” button on the bottom menu to compile and run the code we just wrote.\n\nYou must have your cursor in the code window for it work work properly.\n\nThe output window will show the compilation steps.\n\nWhen it is done, the A7800 emulator will automatically launch.\n\nWhen we compile and run this program, it will go off into space with this mustard-colored background. This is a warning that something has gone wrong.\n\nWhat has gone wrong is that we have not displayed anything yet.\n\nHit the Escape key [ESC] to close the A7800 emulator.\n\nIf you don’t close it, your next compile might not automatically launch the emulator.\n\nTo fix this we will add a simple game loop with the _gameLoop label with a goto plus a clearscreen and drawscreen lines, and recompile.\n\n_gameLoop clearscreen drawscreen goto _gameLoop\n\nclearscreen removes everything from the current display, then drawscreen draws the sprites in the displaylist.\n\nRight now we have no sprites, just a background color.\n\nAnd yes, that is a GOTO.\n\nGet used to it.\n\nTo recreate complex logic in Atari 7800 Basic, you almost can’t avoid using GOTO.\n\nSorry.\n\nYou can create functions, but they also take-up precious resources, so I mostly avoid them\n\nOtherwise you have goto, gosub, for:next and if:then for ALL your branching and logic.\n\nWill these limits might break your long-held religious beliefs about programming?\n\nProbably.\n\nWill you also get used-to-it and find yourself thinking about how to solve complex problems with just a few control structures:\n\nAlso: probably.\n\n_gameLoop is a label, which means it can be jumped to or be the start of a subroutine called by a gosub. Our “gameloop” is simply a never-ending loop that is called 60 times a second to refresh the screen. This is done with the last line, goto _gameLoop. All labels start in the first column, most other code must be tabbed in at least 1 space.\n\nWhen we run it, this happens:\n\nOur background color is displayed\n\nHere is the final code:\n\nset zoneheight 16 displaymode 160A set plotvalueonscreen on set romsize 32k BACKGRND=$60 _gameLoop clearscreen drawscreen goto _gameLoop\n\nStep 3: Game Loop\n\nNext we will play with this background color settings to create a good old Atari color cycle.\n\nThe Atari 7800 has a 256 color palette and we will use ½ of them.\n\nYou can see the full color palette used in Atari 7800 Basic by opening the Sprite Editor or on The Atari 7800 Basic Guide.\n\nWe are going to write a quick program to cycle through 1/2 of the colors.\n\nFirst we create a couple variables.\n\ndim bgColor - var1 dim wait = var2\n\nAtari 7800 Basic has a set of 126 built-in spaces for variables.\n\nThey are named a-z and var1 – var99\n\nYou can also set variables to memory locations in RAM, but we don’t need to do that yet.\n\nWe will create a bgColor variable to hold the color of the background as var1\n\nWe will create wait, which we will use to wait 10 frames before we change the color.\n\nSince the NTSC Atari 7800 runs at 60hz, or 60 frames a second, that means we will change the color 6 times a second.\n\nThen we will initialize those variables.\n\nbgColor = 0 wait = 0\n\nNext, inside the game loop we will increment the wait variable, and when it makes it to 10, we will set it back to 0, and increment bgColor.\n\nThen we test bgColor and reset it when it gets to 127.\n\nWhy? no reason we could never reset it and just let the byte that represents bgColor increment past 255 and it would have become 0, but most of the time we will be setting limits so this is good practice.\n\n_gameLoop clearscreen wait = wait + 1 if wait > 10 then wait = 0 : bgColor = bgColor + 1 if bgColor > 127 then bgColor = 0 BACKGRND = bgColor drawscreen goto _gameLoop\n\nNotice in the code above I used a “:” on the if statement line. The “:” lets you have multiple lines of of code statements on the same line.\n\nNow if we compile and run the program you will see the background color changes 6 times a second.\n\nHere is the full code for this step:\n\nset zoneheight 16 displaymode 160A set plotvalueonscreen on set romsize 32k BACKGRND=$00 dim bgColor = var1 dim wait = var2 bgColor = 0 wait = 0 _gameLoop clearscreen drawscreen goto _gameLoop\n\n—\n\nStep 4: Hello World\n\nOne final touch for this first demo.\n\nIt can’t be “hello world” unless it says “Hello World”.\n\nHowever, the Atari 7800 does not have any kind of native text capabilities.\n\nSo instead, we must load in a graphic that represents our text.\n\nAtari 7800 Basic provides functionality to turn that graphic into a character set that can be plotted like text on the screen\n\nThere is a font graphic provided in the sample programs that come with Atari 7800 Basic.\n\nTo get it, you need to download the Atari 7800 Basic package (see a link the notes: https://github.com/7800-devtools/7800basic/releases), or download the code for this lesson from GitHub (also in the notes) Each character in 160A mode is 4 pixels wide, and 8 pixels high (with one blank horizontal line at the bottom on most characters)\n\nYou load-in in the sprite with the incgraphic command.\n\nincgraphic font.png 160A\n\nAtari 7800 Basic 160A mode supports 4-color PNG files.\n\nNext you use the charcterset command to set the name of the font graphic minus the extension,\n\nThen use the alphachars command to tell Atari 7800 Basic which ascii characters are represented in the font graphic\n\ncharacterset font alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB '\n\nThese “font” characters we will be displaying are just sprites cut from the font graphic, and nothing else. That means we need to introduce the color palettes before we move on.\n\nThe Atari 7800 contains 8 programmable color palettes, each containing four colors (3 plus alpha channel). In 160A mode, a single palette is assigned when putting a sprite into the displaylist.\n\nIn 160B mode, 12-color sprites use either the first 4 or 2nd 4 palettes. We will get to that in a later lesson.\n\nBy the way, these palette are completely redefinable at execution time, which makes them very useful for color-based animations.\n\nYou define a palette like this:\n\nP0C1=$0F P0C2=$0C P0C3=$0A\n\nThis is the “0” palette, signified by the “0” after the P in the variable name.\n\n$0F is white, the other two colors are shades of grey.\n\nNow, inside our _gameLoop we can use the plotchars command to put text on the screen\n\nplotchars 'hello world' 0 58 5\n\nThere are four parameters for plotchars\n\nText to display in single quotes\n\nThe color palette to use\n\nThe x position of the text in pixels (0-159)\n\nThe y position in lines of text (about coarse 13 lines)\n\nOptional -number of characters\n\nOptional -doublewide\n\nBesides text, the plotchars and the associated plotmap and other commands can be used to plot map graphics for games. These are called character graphics and while they are easy to manipulate, they have restrictions too.\n\nCheck out the Atari 7800 Basic guide for more details,\n\nFinding the right X and Y position for text may take a few iterations. I think it took me 3 or 4 tries before it looked like “Hello World” was in the center of the screen.\n\nWhen we run this code you should see a color cycling background with the words “Hello World” displayed in White over it.\n\nHello World Atari 7800!\n\nHere is the full code for this step:\n\nset zoneheight 16 displaymode 160A set plotvalueonscreen on set romsize 32k incgraphic font.png 160A characterset font alphachars '0123456789abcdefghijklmnopqrstuvwxyz>`?!/.,-_()[]&AB ' rem pallette 0 text P0C1=$0F P0C2=$0C P0C3=$0A BACKGRND=$00 dim bgColor = var1 dim wait = var2 bgColor = 0 wait = 0 _gameLoop clearscreen wait = wait + 1 if wait > 10 then wait = 0 : bgColor = bgColor + 1 if bgColor > 127 then bgColor = 0 BACKGRND = bgColor plotchars 'hello world' 0 58 5 drawscreen goto _gameLoop\n\nFeel the urge to support, click here (but no obligation): https://www.buymeacoffee.com/intotheverticalblank?fbclid=IwAR0ryLpAIZPgDgjZqSmMmXLVIOFKWtSDVymoPXsJoj3KsEI0x0KCQOpJMpM\n\nYou Can get the code for this and all future lessons on our GitHub:\n\nintotheverticalblank/makeathing: Code for making things (github.com)\n\nAll Links:\n\nLinks:\n\nSource GitHub : intotheverticalblank/makeathing: Code for making things (github.com)\n\n7800 Graphics Modes And Sprites Tested:\n\nVisual Studio Code: Visual Studio Code – Code Editing. Redefined\n\nAtari 7800 Basic Github: Releases · 7800-devtools/7800basic (github.com)\n\nAtariAge 7800 Basic Forum: 7800basic beta, the release thread – Atari 7800 Programming – AtariAge Forums\n\nAtari 7800 Basic Guide: 7800basic Guide (randomterrain.com)"
    }
}