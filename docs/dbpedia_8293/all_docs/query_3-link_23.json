{
    "id": "dbpedia_8293_3",
    "rank": 23,
    "data": {
        "url": "https://www.geeksforgeeks.org/perl-tutorial-learn-perl-with-examples/",
        "read_more_link": "",
        "language": "en",
        "title": "Learn Perl With Examples",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20191128181646/perl-Tutorial.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20191113140651/Application-Areas-In-Perl.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611131219/perlversion.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611135255/perldownload.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611152616/perlsetup-1.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611152648/perl-2.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611152649/perl-3.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611152650/perl-4.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611152541/perl-4.5.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611155654/perl-ubuntu-1.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611160301/perl-ubuntu-2.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611160304/perl-ubuntu-3.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611160305/perl-ubuntu-4.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163649/Perl-MacOS-1.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163651/Perl-MacOS-2.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163652/Perl-MacOS-3.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163653/Perl-MacOS-4.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163655/Perl-MacOS-5.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190611163656/Perl-MacOS-6.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/HelloWorld.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/UNixHElloWorld.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20191113141001/Data-Types-In-Perl.png",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/05/Arrays.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20191113165935/Hash-in-Perl.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20191113141607/OOPs-Concepts-In-Perl.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190705124142/Polymorphism-2.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/Module-Test.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190923133757/read_file.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190923133759/write.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190306144652/Write3.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20190221122855/e-operator.jpg",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190314113409/excel-1.jpg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2019-11-13T08:00:57",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/perl-tutorial-learn-perl-with-examples/",
        "text": "Perl is a general-purpose, high level interpreted and dynamic programming language. At the beginning level, Perl was developed only for system management and text handling but in later versions, Perl got the ability to handle regular expressions, and network sockets, etc. At present Perl is popular for its ability to handling the Regex(Regular Expressions). The first version of Perl was 1.0 which was released on December 18, 1987. Perl 6 is different from Perl 5 because it is a fully object-oriented reimplementation of Perl 5.\n\nTopics:\n\nKey features\n\nPerl has many reasons for being popular and in demand. Few of the reasons are mentioned below:\n\nEasy to start: Perl is a high-level language so it is closer to other popular programming languages like C, C++ and thus, becomes easy to learn for anyone.\n\nText-Processing: As the acronym “Practical Extraction and Reporting Language” suggest that Perl has high text manipulation abilities by which it can generate reports from different text files easily.\n\nContained best Features: Perl contains the features of different languages like C, sed, awk, and sh, etc. which makes the Perl more useful and productive.\n\nSystem Administration: Perl makes the task of system administration very easy. Instead of becoming dependent on many languages, just use Perl to complete out the whole task of system administration.\n\nWeb and Perl: Perl can be embedded into web servers to increase its processing power and it has the DBI package, which makes web-database integration very easy.\n\nApplication Areas\n\nWhy and why not use Perl?\n\nWHY USE PERL? WHAT’S WRONG WITH PERL? Perl Provides supports for cross platform and it is compatible with mark-up languages like HTML, XML etc. Perl doesn’t supports portability due to CPAN modules. It is free and a Open Source software which is licensed under Artistic and GNU General Public License (GPL). Programs runs slowly and program needs to be interpreted each time when any changes are made. It is an embeddable language that’s why it can embed in web servers and database servers. In Perl, the same result can be achieved in several different ways which make the code untidy as well as unreadable. It is very efficient in text-manipulation i.e. Regular Expression. It also provides the socket capability. Usability factor is lower when compared to other languages.\n\nGetting Started with Perl\n\nSince Perl is a lot similar to other widely used languages syntactically, it is easier to code and learn in Perl. Perl programs can be written on any plain text editor like notepad, notepad++, or anything of that sort. One can also use an online IDE for writing Perl codes or can even install one on their system to make it more feasible to write these codes because IDEs provide a lot of features like intuitive code editor, debugger, compiler, etc.\n\nTo begin with, writing Perl Codes and performing various intriguing and useful operations, one must have Perl installed on their System. This can be done by following the step by step instructions provided below:\n\nWhat if Perl already exists?? Let’s check!!!\n\nMany software applications nowadays require Perl to perform their operations, hence a version of Perl might be included in the software’s installation package. Many Linux systems have Perl preinstalled, also Macintosh provides a preinstalled Perl with their Systems.\n\nTo check if your device is preinstalled with Perl or not, just go to the Command line(For Windows, search for cmd in the Run dialog( + R), for Linux open the terminal using Ctrl+Alt+T, for MacOS use Control+Option+Shift+T)\n\nNow run the following command:\n\nperl -v\n\nIf Perl is already installed, it will generate a message with all the details of the Perl’s version available, otherwise if Perl is not installed then an error will arise stating Bad command or file name\n\nDownloading and Installing Perl:\n\nBefore starting with the installation process, you need to download it. For that, all versions of Perl for Windows, Linux, and MacOS are available on perl.org\n\nDownload the Perl and follow the further instructions for installation of Perl.\n\nBeginning with the Installation:\n\nHow to Run a Perl Program?\n\nLet’s consider a simple Hello World Program.\n\nGenerally, there are two ways to Run a Perl program-\n\nUsing Online IDEs: You can use various online IDEs which can be used to run Perl programs without installing.\n\nUsing Command-Line: You can also use command line options to run a Perl program. Below steps demonstrate how to run a Perl program on Command line in Windows/Unix Operating System:\n\nWindows\n\nOpen Commandline and then to compile the code type perl HelloWorld.pl. If your code has no error then it will execute properly and output will be displayed.\n\nUnix/Linux\n\nOpen Terminal of your Unix/Linux OS and then to compile the code type perl hello.pl. If your code has no error then it will execute properly and output will be displayed.\n\nFundamentals of Perl\n\nVariables\n\nVariables are user-defined words that are used to hold the values passed to the program which will be used to evaluate the Code. Every Perl program contains values on which the Code performs its operations. These values can’t be manipulated or stored without the use of a Variable. A value can be processed only if it is stored in a variable, by using the variable’s name.\n\nA value is the data passed to the program to perform manipulation operations. This data can be either numbers, strings, characters, lists, etc.\n\nExample:\n\nValues: 5 geeks 15 Variables: $a = 5; $b = \"geeks\"; $c = 15;\n\nOperators\n\nOperators are the main building block of any programming language. Operators allow the programmer to perform different kinds of operations on operands. These operators can be categorized based upon their different functionality:\n\nArithmetic Operators\n\nRelational Operators\n\nLogical Operators\n\nBitwise Operators\n\nAssignment Operators\n\nTernary Operator\n\nOutput:\n\nAddition is: 14 Subtraction is: 6 Equal To Operator is False AND Operator: 4 Bitwise AND: 0 Addition Assignment Operator: 14\n\nNumber and its Types\n\nA Number in Perl is a mathematical object used to count, measure, and perform various mathematical operations. A notational symbol that represents a number is termed a numeral. These numerals, in addition to their use in mathematical operations, are also used for ordering(in the form of serial numbers).\n\nTypes of numbers:\n\nIntegers\n\nFloating Numbers\n\nHexadecimal Numbers\n\nOctal Numbers\n\nBinary Numbers\n\nOutput:\n\nInteger: 20 Float Number: 20.5647 Scientific Number: 1.235e-08 Hex Number: 12 Octal number: 60 Binary Number: 10\n\nTo learn more about Numbers, please refer to Numbers in Perl\n\nDataTypes\n\nData types specify the type of data that a valid Perl variable can hold. Perl is a loosely typed language. There is no need to specify a type for the data while using it in the Perl program. The Perl interpreter will choose the type based on the context of the data itself.\n\nScalars\n\nIt is a single unit of data which can be an integer number, floating-point, a character, a string, a paragraph, or an entire web page.\n\nExample:\n\nOutput:\n\nName = Alex Roll number = 13 Percentage = 87.65 Hexadecimal Form = 205 String with alphanumeric values = gfg21 String with special characters = ^gfg\n\nTo know more about scalars please refer to Scalars in Perl.\n\nArrays\n\nAn array is a variable that stores the value of the same data type in the form of a list. To declare an array in Perl, we use ‘@’ sign in front of the variable name.\n\n@number = (40, 55, 63, 17, 22, 68, 89, 97, 89)\n\nIt will create an array of integers that contains the values 40, 55, 63, 17, and many more. To access a single element of an array, we use the ‘$’ sign.\n\n$number[0]\n\nIt will produce the output as 40.\n\nArray creation and accessing elements:\n\nOutput:\n\nElements of arr1 are: 1 4 Elements of arr2 are: GeeksforGeeks Tutorial\n\nIterating through an Array:\n\nOutput:\n\nIterating through range: @arr[0] = 11 @arr[1] = 22 @arr[2] = 33 @arr[3] = 44 @arr[4] = 55 Iterating through loops: 11 22 33 44 55\n\nTo know more about arrays please refer to Arrays in Perl\n\nHashes(Associative Arrays)\n\nIt is a set of key-value pairs. It is also termed as the Associative Arrays. To declare a hash in Perl, we use the ‘%’ sign. To access the particular value, we use the ‘$’ symbol which is followed by the key in braces.\n\nCreating and Accessing Hash elements:\n\nOutput:\n\nPrinting values of Hash: 10 20 30 Printing values of Hash: 45 42 35\n\nTo know more about Hashes please refer to Hashes in Perl\n\nStrings\n\nA string in Perl is a scalar variable and starts with a ($) sign and it can contain alphabets, numbers, special characters. The string can consist of a single word, a group of words, or a multi-line paragraph. The String is defined by the user within a single quote (‘) or double quote (“).\n\nOutput:\n\nUsing Single quotes: @list Using Double-quotes: 1 2 3 4 5 6 7 8 9 10\n\nUsing Escape character in Strings:\n\nInterpolation creates a problem for strings that contain symbols that might become of no use after interpolation. For example, when an email address is to be stored in a double-quoted string, then the ‘at’ (@) sign is automatically interpolated and is taken to be the beginning of the name of an array and is substituted by it. To overcome this situation, the escape character i.e. the backslash(\\) is used. The backslash is inserted just before the ‘@’ as shown below:\n\nOutput:\n\nGeeksforGeeks0402.com GeeksforGeeks0402@gmail.com\n\nEscaping the escape character:\n\nThe backslash is the escape character and is used to make use of escape sequences. When there is a need to insert the escape character in an interpolated string, the same backslash is used, to escape the substitution of escape character with ” (blank). This allows the use of escape characters in the interpolated string.\n\nOutput:\n\nUsing the escape(\\) character\n\nTo know more about Strings please refer to Strings in Perl\n\nControl Flow\n\nDecision Making\n\nDecision Making in programming is similar to decision-making in real life. A programming language uses control statements to control the flow of execution of the program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.\n\nDecision Making Statements in Perl :\n\nIf\n\nIf – else\n\nNested – If\n\nif – elsif ladder\n\nUnless\n\nUnless – else\n\nUnless – elsif\n\nExample 1: To illustrate use of if and if-else\n\nOutput:\n\nEven Number Odd Number\n\nExample 2: To illustrate the use of Nested-if\n\nOutput:\n\nNumber is divisible by 2 and 5\n\nTo know more about Decision Making please refer to Decision making in Perl\n\nLoops\n\nLooping in programming languages is a feature that facilitates the execution of a set of instructions or functions repeatedly while some condition evaluates to true. Loops make the programmer’s task simpler. Perl provides the different types of loop to handle the condition based situation in the program. The loops in Perl are :\n\nfor loop\n\nprint(\"For Loop:\\n\");\n\nfor ($count = 1 ; $count <= 3 ; $count++)\n\n{\n\nprint \"GeeksForGeeks\\n\"\n\n}\n\nOutput:\n\nFor Loop: GeeksForGeeks GeeksForGeeks GeeksForGeeks\n\nforeach loop\n\n@data = ('GEEKS', 4, 'GEEKS');\n\nprint(\"For-each Loop:\\n\");\n\nforeach $word (@data)\n\n{\n\nprint (\"$word \");\n\n}\n\nOutput:\n\nFor-each Loop: GEEKS 4 GEEKS\n\nwhile and do…. while loop\n\n$count = 3;\n\nprint(\"While Loop:\\n\");\n\nwhile ($count >= 0)\n\n{\n\n$count = $count - 1;\n\nprint \"GeeksForGeeks\\n\";\n\n}\n\nprint(\"\\ndo...while Loop:\\n\");\n\n$a = 10;\n\ndo {\n\nprint \"$a \";\n\n$a = $a - 1;\n\n} while ($a > 0);\n\nOutput:\n\nWhile Loop: GeeksForGeeks GeeksForGeeks GeeksForGeeks GeeksForGeeks do...while Loop: 10 9 8 7 6 5 4 3 2 1\n\nTo know more about Loops please refer to Loops in Perl\n\nObject Oriented Programming\n\nObject-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.\n\nCreation of a Class and an Object:\n\nOutput:\n\nGeeks forGeeks\n\nMethods:-\n\nMethods are the entities that are used to access and modify the data of an object. A method is a collection of statements that perform some specific task and returns a result to the caller. A method can perform some specific task without returning anything. Methods are time savers and help us to reuse the code without retyping the code.\n\nThe above-given method can be called again and again wherever required, without doing the effort of retyping the code.\n\nTo learn more about Methods, please refer to Methods in Perl\n\nPolymorphism:-\n\nPolymorphism refers to the ability of OOPs programming languages to differentiate between entities with the same name efficiently. This is done by Perl with the help of the signature and declaration of these entities.\n\nPolymorphism can be best explained with the help of the following example:\n\nOutput:\n\nTo learn more about Polymorphism, please refer to Polymorphism in Perl\n\nInheritance:-\n\nInheritance is the ability of any class to extract and use features of other classes. It is the process by which new classes called the derived classes are created from existing classes called Base classes.\n\nInheritance in Perl can be implemented with the use of packages. Packages are used to create a parent class that can be used in the derived classes to inherit the functionalities.\n\nTo learn more about Inheritance, please refer to Inheritance in Perl\n\nEncapsulation:-\n\nEncapsulation is the process of wrapping up of data to protect it from the outside sources which need not have access to that part of the code. Technically in encapsulation, the variables or data of a class are hidden from any other class and can be accessed only through any member function of own class in which they are declared. This process is also called Data-Hiding.\n\nTo learn more about Encapsulation, please refer to Encapsulation in Perl\n\nAbstraction:-\n\nAbstraction is the process by which the user gets access to only the essential details of a program and the trivial part is hidden from the user. Ex: A car is viewed as a car rather than its individual components. The user can only know what is being done but not the part of How it’s being done. This is what abstraction is.\n\nTo learn more about Abstraction, please refer to Abstraction in Perl\n\nWhat are Subroutines?\n\nA Perl function or subroutine is a group of statements that together perform a specific task. In every programming language user want to reuse the code. So the user puts the section of code in function or subroutine so that there will be no need to write code again and again.\n\nExample:\n\nOutput:\n\nHello Geeks!\n\nMultiple Subroutines\n\nMultiple subroutines in Perl can be created by using the keyword ‘multi’. This helps in the creation of multiple subroutines with the same name.\n\nExample:\n\nmulti Func1($var){statement}; multi Func1($var1, $var2){statement1; statement2;}\n\nExample:\n\nOutput:\n\n3628800\n\nTo know more about Multiple Subroutines, please refer to Multiple Subroutines in Perl\n\nModules and Packages\n\nA module in Perl is a collection of related subroutines and variables that perform a set of programming tasks. Perl Modules are reusable. Perl module is a package defined in a file having the same name as that of the package and having extension .pm. A Perl package is a collection of code which resides in its own namespace.\n\nTo import a module, we use require or use functions. To access a function or a variable from a module, :: is used.\n\nExamples:\n\nOutput:\n\nReferences\n\nA reference in Perl is a scalar data type that holds the location of another variable. Another variable can be scalar, hashes, arrays, function names, etc. A reference can be created by prefixing it with a backslash.\n\nExample:\n\nOutput:\n\n123\n\nTo know more about references, please refer to References in Perl\n\nRegular Expression\n\nRegular Expression (Regex or Regexp or RE) in Perl is a special text string for describing a search pattern within a given text. Regex in Perl is linked to the host language and is not the same as in PHP, Python, etc.\n\nMostly the binding operators are used with the m// operator so that the required pattern could be matched out.\n\nExample:\n\nOutput:\n\nMatch Found\n\nOutput:\n\nMatch Found\n\nQuantifiers in Regex\n\nPerl provides several numbers of regular expression quantifiers which are used to specify how many times a given character can be repeated before matching is done. This is mainly used when the number of characters going to be matched is unknown.\n\nThere are six types of Perl quantifiers which are given below:\n\n* = This says the component must be present either zero or more times.\n\n+ = This says the component must be present either one or more times.\n\n? = This says the component must be present either zero or one time.\n\n{n} = This says the component must be present n times.\n\n{n, } = This says the component must be present at least n times.\n\n{n, m} = This says the component must be present at least n times and no more than m times.\n\nFile Handling\n\nIn Perl, a FileHandle associates a name to an external file, that can be used until the end of the program or until the FileHandle is closed. In short, a FileHandle is like a connection that can be used to modify the contents of an external file and a name is given to the connection (the FileHandle) for faster access and ease.\n\nThe three basic FileHandles in Perl are STDIN, STDOUT, and STDERR, which represent Standard Input, Standard Output, and Standard Error devices respectively.\n\nReading from and Writing to a File using FileHandle\n\nReading from a FileHandle can be done through the print function.\n\nOutput :\n\nWriting to a File can also be done through the print function.\n\nExecuting Code to Write:\n\nUpdated File:\n\nBasic Operations on Files\n\nMultiple Operations can be performed on files using FileHandles. These are:\n\nOpening and Reading a File\n\nWriting to a File\n\nAppending to a File\n\nReading a CSV File\n\nFile Test Operators\n\nFile Test Operators in Perl are the logical operators that return True or False values. There are many operators in Perl that you can use to test various different aspects of a file. For example, to check for the existence of a file -e operator is used.\n\nFollowing example uses the ‘-e’, existence operator to check if a file exists or not:\n\nOutput:\n\nTo know more about various different Operators in File Testing, please refer to File Test Operators in Perl\n\nWorking with Excel Files\n\nExcel files are the most commonly used office application to communicate with computers. For creating excel files with Perl you can use padre IDE, we will also use Excel::Writer::XLSX module.\n\nPerl uses write() function to add content to the excel file.\n\nCreating an Excel File:\n\nExcel Files can be created using Perl command line but first we need to load Excel::Writer::XLSX module.\n\nOutput:\n\nReading from an Excel File:\n\nReading of an Excel File in Perl is done by using Spreadsheet::Read module in a Perl script. This module exports a number of function that you either import or use in your Perl code script. ReadData() function is used to read from an excel file.\n\nExample:\n\nOutput:\n\nA2: GeeksForGeeks\n\nError Handling\n\nError Handling in Perl is the process of taking appropriate action against a program that causes difficulty in execution because of some error in the code or the compiler. For example, if opening a file that does not exist raises an error, or accessing a variable that has not been declared raises an error.\n\nThe program will halt if an error occurs, and thus using error handling we can take appropriate action instead of halting a program entirely. Error Handling is a major requirement for any language that is prone to errors.\n\nPerl provides two built-in functions to generate fatal exceptions and warnings, that are:\n\ndie()\n\nwarn()\n\ndie(): To signal occurrences of fatal errors in the sense that the program in question should not be allowed to continue.\n\nFor example, accessing a file with open() tells if the open operation is successful before proceeding to other file operations.\n\nopen FILE, \"filename.txt\" or die \"Cannot open file: $!\\n\";\n\nwarn(): Unlike die() function, warn() generates a warning instead of a fatal exception.\n\nFor example:\n\nopen FILE, \"filename.txt\" or warn \"Cannot open file: $!\\n\";\n\nTo know more about various different Error Handling techniques, please refer to Error Handling in Perl"
    }
}