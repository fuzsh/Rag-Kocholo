{
    "id": "dbpedia_8293_3",
    "rank": 67,
    "data": {
        "url": "http://www.linuxfocus.org/English/September1999/article114.html",
        "read_more_link": "",
        "language": "en",
        "title": "Software Development : Perl part I",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www.linuxfocus.org/common/images/Topbar-en.gif",
            "http://www.linuxfocus.org/common/images/Bottombar-en.gif",
            "http://www.linuxfocus.org/common/images/Guido-S.gif",
            "http://www.linuxfocus.org/common/images/illustration114.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "by Guido Socher\n\nAbout the author:\n\nGuido is a long time Linux fan and recently he became editor of LinuxFocus. These days he is also very busy renovating the house and planting salad and other stuff in the garden.\n\nContent:\n\nWhat is perl?\n\nA simple program\n\nDocumentation\n\nTalkback form for this article\n\nPerl part I\n\nAbstract:\n\nThis is the start of a series of articels on perl. You will not need any special experience to understand this article. Some knowledge of any procedural programming language (like C or Pascal) will make it easier to get started with Perl.\n\nWhat is perl?\n\nPerl is a script language which was originally developed by Larry Wall. The source code can directly be \"executed\" using perl and there is no explicit compilation step involved. This perl program is usually installed in /usr/bin/perl. Perl is in many aspects quite similar to the classic unix programs awk and sed but perl has gone a long way from there. Today you can even do object oriented programming and design graphical user interfaces with perl. Perl can easily be extended in its capabilities with libraries. The perl archive at CPAN has many of them. This first article will however not go into advanced topics. Instead I would like to show you some basics and have more advanced things in later articles.\n\nPerl is a very useful scripting language. It is a universal tool for everyone with some programming skills.\n\nA simple program\n\nSave the following program under the name my1stprg and then make it executable with the command\n\nchmod 755 my1stprg . Run the program and see what it does.\n\n#!/usr/bin/perl -w\n\nprint \"What is your name?\\n\";\n\n$name=<STDIN>;\n\n#remove the new-line character:\n\nchomp($name);\n\n$len=length($name);\n\nprint \"\\nHello $name! Your name is $len characters long\\n\";\n\nLet's look at the code. The first line is not a comment. This type of line starting with \"#!\" is typical for unix scripts and it tells the operating system what to do with this text file. Any line after the first line starting with a #-character is a comment line (see e.g line 4). We can also see that all statements are terminated by a semicolon. A variable starts with a dollar sign ($). Perl variables can take strings, integers and floats. The data gets converted automatically to the right type dependent on the context in which a variable is used. The $-variables are called scalar variables. Perl has also arrays (starting with @ instead of $) and hash tables (starting with % instead of $). Theses types of variables will be discussed in a future article.\n\nThe print function on the second line of our program writes a text string to stdout. It is similar to the echo command in shell scripts and the variables get expanded to their values if the string is enclosed in double quotes. Variables inside single quotes do not get expanded and a backslash may be used to quote special characters such as the dollar sign or a quote inside quotes. Here is an example:\n\n#!/usr/bin/perl -w\n\n$name=\"joe\";\n\nprint \"1 $name\\n\";\n\nprint '2 ', $name , \"\\n\";\n\nprint '3 ', '$name',\"\\n\";\n\nprint \"4 \\\"$name\\\"\\n\";\n\nprint \"5 \\$name\\n\";\n\nprint \"6 \\\"\\$name\\\"\\n\";\n\nThis will produce:\n\n1 joe\n\n2 joe\n\n3 $name\n\n4 \"joe\"\n\n5 $name\n\n6 \"$name\"\n\nBack to our first simple program. The line $name=<STDIN>; promts the user for input and waits until he/she typed the return key. After that line the variable $name holds what the user typed including the terminating newline character. The command chomp($name); removes this new line character from the variable $name. Finally the length function counts the number of characters in $name.\n\nUnfortunately our program has a bug. What happens if you type a tab or space after your name? It will be counted as well. How can we fix it?\n\nWhat we need is some find and replace function that removes any white space from $name. Perl is very good in manipulating text strings and offers exactly this. [ \\t] is a regular expression that matches space or tab. In perl this can also be abbreviated and written as \\s. (More about regular expressions can be read here). The perl substitute command takes a regular expression and has the syntax: $name=~ s/regexp/replacement/g; If we leave the replacement string empty then all occurrences where the regular expression fits will be replaced with nothing. Now our program looks like this:\n\n#!/usr/bin/perl -w\n\nprint \"What is your name?\\n\";\n\n$name=<STDIN>;\n\n#remove the new-line character:\n\nchomp($name);\n\nprint \"\\nHello $name!\";\n\n#remove spaces from the string:\n\n$name=~s/\\s//g;\n\n$len=length($name);\n\nprint \" Your name is $len characters long\\n\";\n\nThis is not a very useful program as it does not have any control statements (loops and if statements) but it gives you a basic idea. This series will be continued and we come to more complex programs soon.\n\nDocumentation\n\nIn the cause of this series you will learn perl step by step. But you can already now download this little reference manual (perlref-5.004.1.tar.gz) . The included README file explains how to print a little booklet from it.\n\nYou can also try \"man perl\" and \"man perlfunc\" to see what functions are available. All this is however more reference material and you should follow this tutorial or read a book such as \"Learning Perl\" from O'Reilly to learn perl.\n\nTalkback form for this article\n\nEvery article has its own talkback page. On this page you can submit a comment or look at comments from other readers:\n\ntalkback page\n\nWebpages maintained by the LinuxFocus Editor team\n\nÂ© Guido Socher, FDL\n\nLinuxFocus.org\n\nClick here to report a fault or send a comment to Linuxfocus"
    }
}