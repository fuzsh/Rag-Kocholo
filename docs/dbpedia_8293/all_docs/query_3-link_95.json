{
    "id": "dbpedia_8293_3",
    "rank": 95,
    "data": {
        "url": "https://www.mkssoftware.com/docs/man5/perlmodlib.5.asp",
        "read_more_link": "",
        "language": "en",
        "title": "constructing new Perl modules and finding existing ones",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "DESCRIPTION\n\nTHE PERL MODULE LIBRARY\n\nMany modules are included the Perl distribution. These are described below, and all end in .pm. You may discover compiled library file (usually ending in .so) or small pieces of modules to be autoloaded (ending in .al); these were automatically generated by the installation process. You may also discover files in the library directory that end in either .pl or .ph. These are old libraries supplied so that old programs that use them still run. The .pl files will all eventually be converted into standard modules, and the .ph files made by h2ph will probably end up as extension modules made by h2xs. (Some .ph values may already be available through the POSIX, Errno, or Fcntl modules.) The pl2pm file in the distribution may help in your conversion, but it's just a mechanical process and therefore far from bulletproof.\n\nPragmatic Modules\n\nThey work somewhat like compiler directives (pragmata) in that they tend to affect the compilation of your program, and thus will usually work well only when used within a use, or no. Most of these are lexically scoped, so an inner BLOCK may countermand them by saying:\n\nno integer; no strict 'refs'; no warnings;\n\nwhich lasts until the end of that BLOCK.\n\nSome pragmas are lexically scoped--typically those that affect the $^H hints variable. Others affect the current package instead, like use vars and use subs, which allow you to predeclare a variables or subroutines within a particular file rather than just a block. Such declarations are effective for the entire file for which they were declared. You cannot rescind them with no vars or no subs.\n\nThe following pragmas are defined (and have their own documentation).\n\nattributes\n\nGet/set subroutine or variable attributes\n\nattrs\n\nSet/get attributes of a subroutine (deprecated)\n\nautouse\n\nPostpone load of modules until a function is used\n\nbase\n\nEstablish IS-A relationship with base class at compile time\n\nblib\n\nUse MakeMaker's uninstalled version of a package\n\ncaller\n\nInherit pragmatic attributes from caller's context\n\ncharnames\n\nDefine character names for \\N{named} string literal escape.\n\nconstant\n\nDeclare constants\n\ndiagnostics\n\nForce verbose warning diagnostics\n\nfields\n\nDeclare a class's attribute fields at compile-time\n\nfiletest\n\nControl the filetest operators like -r, -w for AFS, etc.\n\ninteger\n\nCompute arithmetic in integer instead of double\n\nless\n\nRequest less of something from the compiler (unimplemented)\n\nlib\n\nManipulate @INC at compile time\n\nlocale\n\nUse or avoid POSIX locales for built-in operations\n\nops\n\nRestrict unsafe operations when compiling\n\noverload\n\nOverload Perl operations\n\nre\n\nAlter regular expression behavior\n\nsigtrap\n\nEnable simple signal handling\n\nstrict\n\nRestrict unsafe constructs\n\nsubs\n\nPredeclare subroutine names\n\nutf8\n\nTurn on UTF-8 and Unicode support\n\nvars\n\nPredeclare global variable names (obsoleted by our())\n\nwarnings\n\nControl optional warnings\n\nStandard Modules\n\nStandard, bundled modules are all expected to behave in a well-defined manner with respect to namespace pollution because they use the Exporter module. See their own documentation for details.\n\nAnyDBM_File\n\nProvide framework for multiple DBM libraries\n\nAutoLoader\n\nLoad subroutines only on demand\n\nAutoSplit\n\nSplit a package for autoloading\n\nB\n\nGuts of the Perl code generator (aka compiler)\n\nB::Asmdata\n\nAutogenerated data about Perl ops, used to generate bytecode\n\nB::Assembler\n\nAssemble Perl bytecode\n\nB::Bblock\n\nWalk basic blocks\n\nB::Bytecode\n\nPerl compiler's bytecode backend\n\nB::C\n\nPerl compiler's C backend\n\nB::CC\n\nPerl compiler's optimized C translation backend\n\nB::Debug\n\nWalk Perl syntax tree, printing debug info about ops\n\nB::Deparse\n\nPerl compiler backend to produce Perl code\n\nB::Disassembler\n\nDisassemble Perl bytecode\n\nB::Lint\n\nModule to catch dubious constructs\n\nB::Showlex\n\nShow lexical variables used in functions or files\n\nB::Stackobj\n\nHelper module for CC backend\n\nB::Stash -- XXX NFI XXX\n\nB::Terse\n\nWalk Perl syntax tree, printing terse info about ops\n\nB::Xref\n\nGenerates cross reference reports for Perl programs\n\nBenchmark\n\nBenchmark running times of code\n\nByteLoader\n\nLoad byte-compiled Perl code\n\nCGI\n\nSimple Common Gateway Interface class\n\nCGI::Apache\n\nMake things work with CGI.pm against Perl-Apache API\n\nCGI::Carp\n\nCGI routines for writing to the HTTPD (or other) error log\n\nCGI::Cookie\n\nInterface to Netscape Cookies\n\nCGI::Fast\n\nCGI Interface for Fast CGI\n\nCGI::Pretty\n\nModule to produce nicely formatted HTML code\n\nCGI::Push\n\nSimple Interface to Server Push\n\nCGI::Switch\n\nTry more than one constructors and return the first object available\n\nCPAN\n\nQuery, download, and build Perl modules from CPAN sites\n\nCPAN::FirstTime\n\nUtility for CPAN::Config file initialization\n\nCPAN::Nox\n\nWrapper around CPAN.pm without using any XS module\n\nCarp\n\nAct like warn/die from perspective of caller\n\nCarp::Heavy\n\nCarp guts\n\nClass::Struct\n\nDeclare struct-like datatypes as Perl classes\n\nConfig\n\nAccess Perl configuration information\n\nCwd\n\nGet pathname of current working directory\n\nDB\n\nProgrammatic interface to the Perl debugging API (experimental)\n\nDB_File\n\nPerl5 access to Berkeley DB version 1.x\n\nData::Dumper\n\nSerialize Perl data structures\n\nDevel::DProf\n\nA Perl execution profiler\n\nDevel::Peek\n\nA data debugging tool for the XS programmer\n\nDevel::SelfStubber\n\nGenerate stubs for a SelfLoading module\n\nDirHandle\n\nSupply object methods for directory handles\n\nDumpvalue\n\nProvide screen dump of Perl data\n\nDynaLoader\n\nDynamically load C libraries into Perl code\n\nEnglish\n\nUse English (or awk) names for ugly punctuation variables\n\nEnv\n\nAccess environment variables as regular ones\n\nErrno\n\nLoad the libc errno.h defines\n\nExporter\n\nImplement default import method for modules\n\nExporter::Heavy\n\nExporter guts\n\nExtUtils::Command\n\nUtilities to replace common Unix commands in Makefiles etc.\n\nExtUtils::Embed\n\nUtilities for embedding Perl in C/C++ programs\n\nExtUtils::Install\n\nInstall files from here to there\n\nExtUtils::Installed\n\nInventory management of installed modules\n\nExtUtils::Liblist\n\nDetermine libraries to use and how to use them\n\nExtUtils::MM_Cygwin\n\nMethods to override Unix behavior in ExtUtils::MakeMaker\n\nExtUtils::MM_OS2\n\nMethods to override Unix behavior in ExtUtils::MakeMaker\n\nExtUtils::MM_Unix\n\nMethods used by ExtUtils::MakeMaker\n\nExtUtils::MM_VMS\n\nMethods to override Unix behavior in ExtUtils::MakeMaker\n\nExtUtils::MM_Win32\n\nMethods to override Unix behavior in ExtUtils::MakeMaker\n\nExtUtils::MakeMaker\n\nCreate an extension Makefile\n\nExtUtils::Manifest\n\nUtilities to write and check a MANIFEST file\n\nExtUtils::Miniperl, writemain - Write the C code for perlmain.c\n\nExtUtils::Mkbootstrap\n\nMake a bootstrap file for use by DynaLoader\n\nExtUtils::Mksymlists\n\nWrite linker options files for dynamic extension\n\nExtUtils::Packlist\n\nManage .packlist files\n\nExtUtils::testlib\n\nAdd blib/* directories to @INC\n\nFatal\n\nReplace functions with equivalents which succeed or die\n\nFcntl\n\nLoad the libc fcntl.h defines\n\nFile::Basename\n\nSplit a pathname into pieces\n\nFile::CheckTree\n\nRun many filetest checks on a tree\n\nFile::Compare\n\nCompare files or filehandles\n\nFile::Copy\n\nCopy files or filehandles\n\nFile::DosGlob\n\nDOS-like globbing and then some\n\nFile::Find\n\nTraverse a file tree\n\nFile::Glob\n\nPerl extension for BSD filename globbing\n\nFile::Path\n\nCreate or remove a series of directories\n\nFile::Spec\n\nPortably perform operations on file names\n\nFile::Spec::Functions\n\nPortably perform operations on file names\n\nFile::Spec::Mac\n\nFile::Spec for MacOS\n\nFile::Spec::OS2\n\nMethods for OS/2 file specs\n\nFile::Spec::Unix\n\nMethods used by File::Spec\n\nFile::Spec::VMS\n\nMethods for VMS file specs\n\nFile::Spec::Win32\n\nMethods for Win32 file specs\n\nFile::stat\n\nBy-name interface to Perl's built-in stat() functions\n\nFileCache\n\nKeep more files open than the system permits\n\nFileHandle\n\nSupply object methods for filehandles\n\nFindBin\n\nLocate installation directory of running Perl program\n\nGDBM_File\n\nAccess to the gdbm library\n\nGetopt::Long\n\nExtended processing of command line options\n\nGetopt::Std\n\nProcess single-character switches with switch clustering\n\nI18N::Collate\n\nCompare 8-bit scalar data according to current locale\n\nIO\n\nFront-end to load various IO modules\n\nIO::Dir\n\nSupply object methods for directory handles\n\nIO::File\n\nSupply object methods for filehandles\n\nIO::Handle\n\nSupply object methods for I/O handles\n\nIO::Pipe\n\nSupply object methods for pipes\n\nIO::Poll\n\nObject interface to system poll call\n\nIO::Seekable\n\nSupply seek based methods for I/O objects\n\nIO::Select\n\nOO interface to the select system call\n\nIO::Socket\n\nObject interface to socket communications\n\nIO::Socket::INET\n\nObject interface for AF_INET domain sockets\n\nIO::Socket::UNIX\n\nObject interface for AF_UNIX domain sockets\n\nIPC::Msg\n\nSysV Msg IPC object class\n\nIPC::Open2\n\nOpen a process for both reading and writing\n\nIPC::Open3\n\nOpen a process for reading, writing, and error handling\n\nIPC::Semaphore\n\nSysV Semaphore IPC object class\n\nIPC::SysV\n\nSysV IPC constants\n\nMath::BigFloat\n\nArbitrary length float math package\n\nMath::BigInt\n\nArbitrary size integer math package\n\nMath::Complex\n\nComplex numbers and associated mathematical functions\n\nMath::Trig\n\nTrigonometric functions\n\nNet::Ping\n\nCheck a remote host for reachability\n\nNet::hostent\n\nBy-name interface to Perl's built-in gethost*() functions\n\nNet::netent\n\nBy-name interface to Perl's built-in getnet*() functions\n\nNet::protoent\n\nBy-name interface to Perl's built-in getproto*() functions\n\nNet::servent\n\nBy-name interface to Perl's built-in getserv*() functions\n\nO\n\nGeneric interface to Perl Compiler backends\n\nOpcode\n\nDisable named opcodes when compiling Perl code\n\nPOSIX\n\nPerl interface to IEEE Std 1003.1\n\nPod::Checker\n\nCheck pod documents for syntax errors\n\nPod::Html\n\nModule to convert pod files to HTML\n\nPod::InputObjects\n\nManage POD objects\n\nPod::Man\n\nConvert POD data to formatted *roff input\n\nPod::Parser\n\nBase class for creating POD filters and translators\n\nPod::Select\n\nExtract selected sections of POD from input\n\nPod::Text\n\nConvert POD data to formatted ASCII text\n\nPod::Text::Color\n\nConvert POD data to formatted color ASCII text\n\nPod::Usage\n\nPrint a usage message from embedded pod documentation\n\nSDBM_File\n\nTied access to sdbm files\n\nSafe\n\nCompile and execute code in restricted compartments\n\nSearch::Dict\n\nSearch for key in dictionary file\n\nSelectSaver\n\nSave and restore selected file handle\n\nSelfLoader\n\nLoad functions only on demand\n\nShell\n\nRun shell commands transparently within Perl\n\nSocket\n\nLoad the libc socket.h defines and structure manipulators\n\nSymbol\n\nManipulate Perl symbols and their names\n\nSys::Hostname\n\nTry every conceivable way to get hostname\n\nSys::Syslog\n\nInterface to the libc syslog(3) calls\n\nTerm::Cap\n\nTermcap interface\n\nTerm::Complete\n\nWord completion module\n\nTerm::ReadLine\n\nInterface to various `readline' packages.\n\nTest\n\nProvides a simple framework for writing test scripts\n\nTest::Harness\n\nRun Perl standard test scripts with statistics\n\nText::Abbrev\n\nCreate an abbreviation table from a list\n\nText::ParseWords\n\nParse text into a list of tokens or array of arrays\n\nText::Soundex\n\nImplementation of the Soundex Algorithm as described by Knuth\n\nText::Tabs -- expand and unexpand tabs per expand(1) and unexpand(1)\n\nText::Wrap\n\nLine wrapping to form simple paragraphs\n\nTie::Array\n\nBase class for tied arrays\n\nTie::Handle\n\nBase class definitions for tied handles\n\nTie::Hash\n\nBase class definitions for tied hashes\n\nTie::RefHash\n\nUse references as hash keys\n\nTie::Scalar\n\nBase class definitions for tied scalars\n\nTie::SubstrHash\n\nFixed-table-size, fixed-key-length hashing\n\nTime::Local\n\nEfficiently compute time from local and GMT time\n\nTime::gmtime\n\nBy-name interface to Perl's built-in gmtime() function\n\nTime::localtime\n\nBy-name interface to Perl's built-in localtime() function\n\nTime::tm\n\nInternal object used by Time::gmtime and Time::localtime\n\nUNIVERSAL\n\nBase class for ALL classes (blessed references)\n\nUser::grent\n\nBy-name interface to Perl's built-in getgr*() functions\n\nUser::pwent\n\nBy-name interface to Perl's built-in getpw*() functions\n\nTo find out all modules installed on your system, including those without documentation or outside the standard release, just do this:\n\n% find `perl -e 'print \"@INC\"'` -name '*.pm' -print\n\nTo get a log of all module distributions which have been installed since perl was installed, just do:\n\n% perldoc perllocal\n\nModules should all have their own documentation installed and accessible via your system man command, or via the perldoc program. If you do not have a find program, you can use the Perl find2perl program instead, which generates Perl code as output you can run through perl. If you have a man program but it doesn't find your modules, you'll have to fix your manpath. See perl for details.\n\nExtension Modules\n\nExtension modules are written in C (or a mix of Perl and C). They are usually dynamically loaded into Perl if and when you need them, but may also be be linked in statically. Supported extension modules include Socket, Fcntl, and POSIX.\n\nMany popular C extension modules do not come bundled (at least, not completely) due to their sizes, volatility, or simply lack of time for adequate testing and configuration across the multitude of platforms on which Perl was beta-tested. You are encouraged to look for them on CPAN (described below), or using web search engines like Alta Vista or Deja News.\n\nCPAN\n\nCPAN stands for Comprehensive Perl Archive Network; it's a globally replicated trove of Perl materials, including documentation, style guides, tricks and trap, alternate ports to non-Unix systems and occasional binary distributions for these. Search engines for CPAN can be found at http://cpan.perl.com/ and at http://theory.uwinnipeg.ca/mod_perl/cpan-search.pl .\n\nMost importantly, CPAN includes around a thousand unbundled modules, some of which require a C compiler to build. Major categories of modules are:\n\nLanguage Extensions and Documentation Tools\n\nDevelopment Support\n\nOperating System Interfaces\n\nNetworking, Device Control (modems) and InterProcess Communication\n\nData Types and Data Type Utilities\n\nDatabase Interfaces\n\nUser Interfaces\n\nInterfaces to / Emulations of Other Programming Languages\n\nFile Names, File Systems and File Locking (see also File Handles)\n\nString Processing, Language Text Processing, Parsing, and Searching\n\nOption, Argument, Parameter, and Configuration File Processing\n\nInternationalization and Locale\n\nAuthentication, Security, and Encryption\n\nWorld Wide Web, HTML, HTTP, CGI, MIME\n\nServer and Daemon Utilities\n\nArchiving and Compression\n\nImages, Pixmap and Bitmap Manipulation, Drawing, and Graphing\n\nMail and Usenet News\n\nControl Flow Utilities (callbacks and exceptions etc)\n\nFile Handle and Input/Output Stream Utilities\n\nMiscellaneous Modules\n\nRegistered CPAN sites as of this writing include the following. You should try to choose one close to you:\n\nAfrica\n\nSouth Africa ftp://ftp.is.co.za/programming/perl/CPAN/ ftp://ftp.saix.net/pub/CPAN/ ftp://ftp.sun.ac.za/CPAN/ ftp://ftpza.co.za/pub/mirrors/cpan/\n\nAsia\n\nChina ftp://freesoft.cei.gov.cn/pub/languages/perl/CPAN/ Hong Kong ftp://ftp.pacific.net.hk/pub/mirror/CPAN/ Indonesia ftp://malone.piksi.itb.ac.id/pub/CPAN/ Israel ftp://bioinfo.weizmann.ac.il/pub/software/perl/CPAN/ Japan ftp://ftp.dti.ad.jp/pub/lang/CPAN/ ftp://ftp.jaist.ac.jp/pub/lang/perl/CPAN/ ftp://ftp.lab.kdd.co.jp/lang/perl/CPAN/ ftp://ftp.meisei-u.ac.jp/pub/CPAN/ ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/ ftp://mirror.nucba.ac.jp/mirror/Perl/ Saudi-Arabia ftp://ftp.isu.net.sa/pub/CPAN/ Singapore ftp://ftp.nus.edu.sg/pub/unix/perl/CPAN/ South Korea ftp://ftp.bora.net/pub/CPAN/ ftp://ftp.kornet.net/pub/CPAN/ ftp://ftp.nuri.net/pub/CPAN/ Taiwan ftp://coda.nctu.edu.tw/computer-languages/perl/CPAN/ ftp://ftp.ee.ncku.edu.tw/pub3/perl/CPAN/ ftp://ftp1.sinica.edu.tw/pub1/perl/CPAN/ Thailand ftp://ftp.nectec.or.th/pub/mirrors/CPAN/\n\nAustralasia\n\nAustralia ftp://cpan.topend.com.au/pub/CPAN/ ftp://ftp.labyrinth.net.au/pub/perl-CPAN/ ftp://ftp.sage-au.org.au/pub/compilers/perl/CPAN/ ftp://mirror.aarnet.edu.au/pub/perl/CPAN/ New Zealand ftp://ftp.auckland.ac.nz/pub/perl/CPAN/ ftp://sunsite.net.nz/pub/languages/perl/CPAN/\n\nCentral America\n\nCosta Rica ftp://ftp.ucr.ac.cr/pub/Unix/CPAN/\n\nEurope\n\nAustria ftp://ftp.tuwien.ac.at/pub/languages/perl/CPAN/ Belgium ftp://ftp.kulnet.kuleuven.ac.be/pub/mirror/CPAN/ Bulgaria ftp://ftp.ntrl.net/pub/mirrors/CPAN/ Croatia ftp://ftp.linux.hr/pub/CPAN/ Czech Republic ftp://ftp.fi.muni.cz/pub/perl/ ftp://sunsite.mff.cuni.cz/Languages/Perl/CPAN/ Denmark ftp://sunsite.auc.dk/pub/languages/perl/CPAN/ Estonia ftp://ftp.ut.ee/pub/languages/perl/CPAN/ Finland ftp://ftp.funet.fi/pub/languages/perl/CPAN/ France ftp://ftp.grolier.fr/pub/perl/CPAN/ ftp://ftp.lip6.fr/pub/perl/CPAN/ ftp://ftp.oleane.net/pub/mirrors/CPAN/ ftp://ftp.pasteur.fr/pub/computing/CPAN/ ftp://ftp.uvsq.fr/pub/perl/CPAN/ German ftp://ftp.gigabell.net/pub/CPAN/ Germany ftp://ftp.archive.de.uu.net/pub/CPAN/ ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/ ftp://ftp.gmd.de/packages/CPAN/ ftp://ftp.gwdg.de/pub/languages/perl/CPAN/ ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/ ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/ ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/ ftp://ftp.uni-erlangen.de/pub/source/CPAN/ ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/ Germany ftp://ftp.archive.de.uu.net/pub/CPAN/ ftp://ftp.freenet.de/pub/ftp.cpan.org/pub/ ftp://ftp.gmd.de/packages/CPAN/ ftp://ftp.gwdg.de/pub/languages/perl/CPAN/ ftp://ftp.leo.org/pub/comp/general/programming/languages/script/perl/CPAN/ ftp://ftp.mpi-sb.mpg.de/pub/perl/CPAN/ ftp://ftp.rz.ruhr-uni-bochum.de/pub/CPAN/ ftp://ftp.uni-erlangen.de/pub/source/CPAN/ ftp://ftp.uni-hamburg.de/pub/soft/lang/perl/CPAN/ Greece ftp://ftp.ntua.gr/pub/lang/perl/ Hungary ftp://ftp.kfki.hu/pub/packages/perl/CPAN/ Iceland ftp://ftp.gm.is/pub/CPAN/ Ireland ftp://cpan.indigo.ie/pub/CPAN/ ftp://sunsite.compapp.dcu.ie/pub/perl/ Italy ftp://cis.uniRoma2.it/CPAN/ ftp://ftp.flashnet.it/pub/CPAN/ ftp://ftp.unina.it/pub/Other/CPAN/ ftp://ftp.unipi.it/pub/mirror/perl/CPAN/ Netherlands ftp://ftp.cs.uu.nl/mirror/CPAN/ ftp://ftp.nluug.nl/pub/languages/perl/CPAN/ Norway ftp://ftp.uit.no/pub/languages/perl/cpan/ ftp://sunsite.uio.no/pub/languages/perl/CPAN/ Poland ftp://ftp.man.torun.pl/pub/CPAN/ ftp://ftp.pk.edu.pl/pub/lang/perl/CPAN/ ftp://sunsite.icm.edu.pl/pub/CPAN/ Portugal ftp://ftp.ci.uminho.pt/pub/mirrors/cpan/ ftp://ftp.ist.utl.pt/pub/CPAN/ ftp://ftp.ua.pt/pub/CPAN/ Romania ftp://ftp.dnttm.ro/pub/CPAN/ Russia ftp://ftp.chg.ru/pub/lang/perl/CPAN/ ftp://ftp.sai.msu.su/pub/lang/perl/CPAN/ Slovakia ftp://ftp.entry.sk/pub/languages/perl/CPAN/ Slovenia ftp://ftp.arnes.si/software/perl/CPAN/ Spain ftp://ftp.etse.urv.es/pub/perl/ ftp://ftp.rediris.es/mirror/CPAN/ Sweden ftp://ftp.sunet.se/pub/lang/perl/CPAN/ Switzerland ftp://sunsite.cnlab-switch.ch/mirror/CPAN/ Turkey ftp://sunsite.bilkent.edu.tr/pub/languages/CPAN/ United Kingdom ftp://ftp.demon.co.uk/pub/mirrors/perl/CPAN/ ftp://ftp.flirble.org/pub/languages/perl/CPAN/ ftp://ftp.mirror.ac.uk/sites/ftp.funet.fi/pub/languages/perl/CPAN/ ftp://ftp.plig.org/pub/CPAN/ ftp://sunsite.doc.ic.ac.uk/packages/CPAN/\n\nNorth America\n\nAlberta ftp://sunsite.ualberta.ca/pub/Mirror/CPAN/ California ftp://cpan.nas.nasa.gov/pub/perl/CPAN/ ftp://cpan.valueclick.com/CPAN/ ftp://ftp.cdrom.com/pub/perl/CPAN/ http://download.sourceforge.net/mirrors/CPAN/ Colorado ftp://ftp.cs.colorado.edu/pub/perl/CPAN/ Florida ftp://ftp.cise.ufl.edu/pub/perl/CPAN/ Georgia ftp://ftp.twoguys.org/CPAN/ Illinois ftp://uiarchive.uiuc.edu/pub/lang/perl/CPAN/ Indiana ftp://csociety-ftp.ecn.purdue.edu/pub/CPAN/ ftp://ftp.uwsg.indiana.edu/pub/perl/CPAN/ Kentucky ftp://ftp.uky.edu/CPAN/ Manitoba ftp://theoryx5.uwinnipeg.ca/pub/CPAN/ Massachusetts ftp://ftp.ccs.neu.edu/net/mirrors/ftp.funet.fi/pub/languages/perl/CPAN/ ftp://ftp.iguide.com/pub/mirrors/packages/perl/CPAN/ Mexico ftp://ftp.msg.com.mx/pub/CPAN/ New York ftp://ftp.deao.net/pub/CPAN/ ftp://ftp.rge.com/pub/languages/perl/ North Carolina ftp://ftp.duke.edu/pub/perl/ Nova Scotia ftp://cpan.chebucto.ns.ca/pub/CPAN/ Oklahoma ftp://ftp.ou.edu/mirrors/CPAN/ Ontario ftp://ftp.crc.ca/pub/packages/lang/perl/CPAN/ Oregon ftp://ftp.orst.edu/pub/packages/CPAN/ Pennsylvania ftp://ftp.epix.net/pub/languages/perl/ Tennessee ftp://ftp.sunsite.utk.edu/pub/CPAN/ Texas ftp://ftp.sedl.org/pub/mirrors/CPAN/ ftp://jhcloos.com/pub/mirror/CPAN/ Utah ftp://mirror.xmission.com/CPAN/ Virginia ftp://ftp.perl.org/pub/perl/CPAN/ ftp://ruff.cs.jmu.edu/pub/CPAN/ Washington ftp://ftp-mirror.internap.com/pub/CPAN/ ftp://ftp.llarian.net/pub/CPAN/ ftp://ftp.spu.edu/pub/CPAN/\n\nSouth America\n\nBrazil ftp://cpan.if.usp.br/pub/mirror/CPAN/ ftp://ftp.matrix.com.br/pub/perl/ Chile ftp://sunsite.dcc.uchile.cl/pub/Lang/PERL/\n\nFor an up-to-date listing of CPAN sites, see http://www.perl.com/perl/CPAN/SITES or ftp://www.perl.com/CPAN/SITES .\n\nModules: Creation, Use, and Abuse\n\n(The following section is borrowed directly from Tim Bunce's modules file, available at your nearest CPAN site.)\n\nPerl implements a class using a package, but the presence of a package doesn't imply the presence of a class. A package is just a namespace. A class is a package that provides subroutines that can be used as methods. A method is just a subroutine that expects, as its first argument, either the name of a package (for \"static\" methods), or a reference to something (for \"virtual\" methods).\n\nA module is a file that (by convention) provides a class of the same name (sans the .pm), plus an import method in that class that can be called to fetch exported symbols. This module may implement some of its methods by loading dynamic C or C++ objects, but that should be totally transparent to the user of the module. Likewise, the module might set up an AUTOLOAD function to slurp in subroutine definitions on demand, but this is also transparent. Only the .pm file is required to exist. See perlsub, perltoot, and AutoLoader for details about the AUTOLOAD mechanism.\n\nGuidelines for Module Creation\n\nDo similar modules already exist in some form?\n\nIf so, please try to reuse the existing modules either in whole or by inheriting useful features into a new class. If this is not practical try to get together with the module authors to work on extending or enhancing the functionality of the existing modules. A perfect example is the plethora of packages in perl4 for dealing with command line options.\n\nIf you are writing a module to expand an already existing set of modules, please coordinate with the author of the package. It helps if you follow the same naming scheme and module interaction scheme as the original author.\n\nTry to design the new module to be easy to extend and reuse.\n\nTry to use warnings; (or use warnings qw(...);). Remember that you can add no warnings qw(...); to individual blocks of code that need less warnings.\n\nUse blessed references. Use the two argument form of bless to bless into the class name given as the first parameter of the constructor, e.g.,:\n\nsub new { my $class = shift; return bless {}, $class; }\n\nor even this if you'd like it to be used as either a static or a virtual method.\n\nsub new { my $self = shift; my $class = ref($self) || $self; return bless {}, $class; }\n\nPass arrays as references so more parameters can be added later (it's also faster). Convert functions into methods where appropriate. Split large methods into smaller more flexible ones. Inherit methods from other modules if appropriate.\n\nAvoid class name tests like: die \"Invalid\" unless ref $ref eq 'FOO'. Generally you can delete the eq 'FOO' part with no harm at all. Let the objects look after themselves! Generally, avoid hard-wired class names as far as possible.\n\nAvoid $r->Class::func() where using @ISA=qw(... Class ...) and $r->func() would work (see perlbot for more details).\n\nUse autosplit so little used or newly added functions won't be a burden to programs that don't use them. Add test functions to the module after __END__ either using AutoSplit or by saying:\n\neval join('',<main::DATA>) || die $@ unless caller();\n\nDoes your module pass the 'empty subclass' test? If you say @SUBCLASS::ISA = qw(YOURCLASS); your applications should be able to use SUBCLASS in exactly the same way as YOURCLASS. For example, does your application still work if you change: $obj = new YOURCLASS; into: $obj = new SUBCLASS; ?\n\nAvoid keeping any state information in your packages. It makes it difficult for multiple other packages to use yours. Keep state information in objects.\n\nAlways use -w.\n\nTry to use strict; (or use strict qw(...);). Remember that you can add no strict qw(...); to individual blocks of code that need less strictness.\n\nAlways use -w.\n\nFollow the guidelines in the perlstyle(1) manual.\n\nAlways use -w.\n\nSome simple style guidelines\n\nThe perlstyle manual supplied with Perl has many helpful points.\n\nCoding style is a matter of personal taste. Many people evolve their style over several years as they learn what helps them write and maintain good code. Here's one set of assorted suggestions that seem to be widely used by experienced developers:\n\nUse underscores to separate words. It is generally easier to read $var_names_like_this than $VarNamesLikeThis, especially for non-native speakers of English. It's also a simple rule that works consistently with VAR_NAMES_LIKE_THIS.\n\nPackage/Module names are an exception to this rule. Perl informally reserves lowercase module names for 'pragma' modules like integer and strict. Other modules normally begin with a capital letter and use mixed case with no underscores (need to be short and portable).\n\nYou may find it helpful to use letter case to indicate the scope or nature of a variable. For example:\n\n$ALL_CAPS_HERE constants only (beware clashes with Perl vars) $Some_Caps_Here package-wide global/static $no_caps_here function scope my() or local() variables\n\nFunction and method names seem to work best as all lowercase. e.g., $obj->as_string().\n\nYou can use a leading underscore to indicate that a variable or function should not be used outside the package that defined it.\n\nSelect what to export.\n\nDo NOT export method names!\n\nDo NOT export anything else by default without a good reason!\n\nExports pollute the namespace of the module user. If you must export try to use @EXPORT_OK in preference to @EXPORT and avoid short or common names to reduce the risk of name clashes.\n\nGenerally anything not exported is still accessible from outside the module using the ModuleName::item_name (or $blessed_ref->method) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.\n\n(It is actually possible to get private functions by saying: my $subref = sub { ... }; &$subref;. But there's no way to call that directly as a method, because a method must have a name in the symbol table.)\n\nAs a general rule, if the module is trying to be object oriented then export nothing. If it's just a collection of functions then @EXPORT_OK anything but use @EXPORT with caution.\n\nSelect a name for the module.\n\nThis name should be as descriptive, accurate, and complete as possible. Avoid any risk of ambiguity. Always try to use two or more whole words. Generally the name should reflect what is special about what the module does rather than how it does it. Please use nested module names to group informally or categorize a module. There should be a very good reason for a module not to have a nested name. Module names should begin with a capital letter.\n\nHaving 57 modules all called Sort will not make life easy for anyone (though having 23 called Sort::Quick is only marginally better :-). Imagine someone trying to install your module alongside many others. If in any doubt ask for suggestions in comp.lang.perl.misc.\n\nIf you are developing a suite of related modules/classes it's good practice to use nested classes with a common prefix as this will avoid namespace clashes. For example: Xyz::Control, Xyz::View, Xyz::Model etc. Use the modules in this list as a naming guide.\n\nIf adding a new module to a set, follow the original author's standards for naming modules and the interface to methods in those modules.\n\nTo be portable each component of a module name should be limited to 11 characters. If it might be used on MS-DOS then try to ensure each is unique in the first 8 characters. Nested modules make this easier.\n\nHave you got it right?\n\nHow do you know that you've made the right decisions? Have you picked an interface design that will cause problems later? Have you picked the most appropriate name? Do you have any questions?\n\nThe best way to know for sure, and pick up many helpful suggestions, is to ask someone who knows. Comp.lang.perl.misc is read by just about all the people who develop modules and it's the best place to ask.\n\nAll you need to do is post a short summary of the module, its purpose and interfaces. A few lines on each of the main methods is probably enough. (If you post the whole module it might be ignored by busy people - generally the very people you want to read it!)\n\nDon't worry about posting if you can't say when the module will be ready - just say so in the message. It might be worth inviting others to help you, they may be able to complete it for you!\n\nREADME and other Additional Files.\n\nIt's well known that software developers usually fully document the software they write. If, however, the world is in urgent need of your software and there is not enough time to write the full documentation please at least provide a README file containing:\n\nA description of the module/package/extension etc.\n\nA copyright notice - see below.\n\nPrerequisites - what else you may need to have.\n\nHow to build it - possible changes to Makefile.PL etc.\n\nHow to install it.\n\nRecent changes in this release, especially incompatibilities\n\nChanges / enhancements you plan to make in the future.\n\nIf the README file seems to be getting too large you may wish to split out some of the sections into separate files: INSTALL, Copying, ToDo etc.\n\nAdding a Copyright Notice.\n\nHow you choose to license your work is a personal decision. The general mechanism is to assert your Copyright and then make a declaration of how others may copy/use/modify your work.\n\nPerl, for example, is supplied with two types of licence: The GNU GPL and The Artistic Licence (see the files README, Copying, and Artistic). Larry has good reasons for NOT just using the GNU GPL.\n\nMy personal recommendation, out of respect for Larry, Perl, and the Perl community at large is to state something simply like:\n\nCopyright (c) 1995 Your Name. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.\n\nThis statement should at least appear in the README file. You may also wish to include it in a Copying file and your source files. Remember to include the other words in addition to the Copyright.\n\nGive the module a version/issue/release number.\n\nTo be fully compatible with the Exporter and MakeMaker modules you should store your module's version number in a non-my package variable called $VERSION. This should be a floating point number with at least two digits after the decimal (i.e., hundredths, e.g, $VERSION = \"0.01\"). Don't use a \"1.3.2\" style version. See Exporter for details.\n\nIt may be handy to add a function or method to retrieve the number. Use the number in announcements and archive file names when releasing the module (ModuleName-1.02.tar.Z). See perldoc ExtUtils::MakeMaker.pm for details.\n\nHow to release and distribute a module.\n\nIt's good idea to post an announcement of the availability of your module (or the module itself if small) to the comp.lang.perl.announce Usenet newsgroup. This will at least ensure very wide once-off distribution.\n\nIf possible, register the module with CPAN. You should include details of its location in your announcement.\n\nSome notes about ftp archives: Please use a long descriptive file name that includes the version number. Most incoming directories will not be readable/listable, i.e., you won't be able to see your file after uploading it. Remember to send your email notification message as soon as possible after uploading else your file may get deleted automatically. Allow time for the file to be processed and/or check the file has been processed before announcing its location.\n\nFTP Archives for Perl Modules:\n\nFollow the instructions and links on:\n\nhttp://www.perl.com/CPAN/modules/00modlist.long.html http://www.perl.com/CPAN/modules/04pause.html\n\nor upload to one of these sites:\n\nhttps://pause.kbx.de/pause/ http://pause.perl.org/pause/\n\nand notify <modules@perl.org>.\n\nBy using the WWW interface you can ask the Upload Server to mirror your modules from your ftp or WWW site into your own directory on CPAN!\n\nPlease remember to send me an updated entry for the Module list!\n\nTake care when changing a released module.\n\nAlways strive to remain compatible with previous released versions. Otherwise try to add a mechanism to revert to the old behavior if people rely on it. Document incompatible changes.\n\nGuidelines for Converting Perl 4 Library Scripts into Modules\n\nThere is no requirement to convert anything.\n\nConsider the implications.\n\nAll Perl applications that make use of the script will need to be changed (slightly) if the script is converted into a module. Is it worth it unless you plan to make other changes at the same time?\n\nMake the most of the opportunity.\n\nIf you are going to convert the script to a module you can use the opportunity to redesign the interface. The guidelines for module creation above include many of the issues you should consider.\n\nThe pl2pm utility will get you started.\n\nThis utility will read *.pl files (given as parameters) and write corresponding *.pm files. The pl2pm utilities does the following:\n\nAdds the standard Module prologue lines\n\nConverts package specifiers from ' to ::\n\nConverts die(...) to croak(...)\n\nSeveral other minor changes\n\nBeing a mechanical process pl2pm is not bullet proof. The converted code will need careful checking, especially any package statements. Don't delete the original .pl file till the new .pm one works!\n\nGuidelines for Reusing Application Code\n\nComplete applications rarely belong in the Perl Module Library.\n\nMany applications contain some Perl code that could be reused.\n\nHelp save the world! Share your code in a form that makes it easy to reuse.\n\nBreak-out the reusable code into one or more separate module files.\n\nTake the opportunity to reconsider and redesign the interfaces.\n\nIn some cases the 'application' can then be reduced to a small\n\nfragment of code built on top of the reusable modules. In these cases the application could invoked as:\n\n% perl -e 'use Module::Name; method(@ARGV)' ...\n\nor\n\n% perl -mModule::Name ... (in perl5.002 or higher)\n\nNOTE\n\nPerl does not enforce private and public parts of its modules as you may have been used to in other languages like C++, Ada, or Modula-17. Perl doesn't have an infatuation with enforced privacy. It would prefer that you stayed out of its living room because you weren't invited, not because it has a shotgun.\n\nThe module and its user have a contract, part of which is common law, and part of which is \"written\". Part of the common law contract is that a module doesn't pollute any namespace it wasn't asked to. The written contract for the module (A.K.A. documentation) may make other provisions. But then you know when you use RedefineTheWorld that you're redefining the world and willing to take the consequences.\n\nAVAILABILITY\n\nMKS Toolkit for Power Users\n\nMKS Toolkit for System Administrators\n\nMKS Toolkit for Developers\n\nMKS Toolkit for Interoperability\n\nMKS Toolkit for Professional Developers\n\nMKS Toolkit for Enterprise Developers\n\nMKS Toolkit for Enterprise Developers 64-Bit Edition\n\nMKS AlertCentre\n\nSEE ALSO\n\nCommands:\n\nperl\n\nMiscellaneous:\n\nperl5004delta, perl5005delta, perlapi, perlapio, perlbook, perlboot, perlbot, perlcall, perlcom, perlcompile, perldata, perldbmfilter, perldebguts, perldebug, perldelta, perldiag, perldsc, perlembed, perlfaq, perlfaq1, perlfaq2, perlfaq3, perlfaq4, perlfaq5, perlfaq6, perlfaq7, perlfaq8, perlfaq9, perlfilter, perlfork, perlform, perlfunc, perlguts, perlhack, perlhist, perlipc, perllexwarn, perllol, perlmod, perlmodinstall, perlnumber, perlobj, perlop, perlopentut, perlpod, perlport, perlre, perlref, perlreftut, perlsec, perlsock, perlstyle, perlsub, perlsyn, perlthrtut, perltie, perltodo, perltoot, perltootc, perltrap, perlunicode, perlvar, perlxs, perlxstut, win32"
    }
}