{
    "id": "dbpedia_8293_2",
    "rank": 53,
    "data": {
        "url": "https://www.bsdsrv.se/category/utilities/",
        "read_more_link": "",
        "language": "en",
        "title": "Utilities – BSDSRV.se",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2017-03-05T18:29:28+01:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Description\n\nSo what do you do when you do not have an optical drive for a computer or server and you would like to install Linux?\n\nYou have two options, use a USB device (CD-ROM, Hard Drive, or Thumb drive) or PXE booting and doing a full network install. This article will discuss the latter.\n\nRequirements\n\nThe following application(s) must be installed, configured and running before tftp-hpa is installed:\n\nrsync\n\nisc-dhcp – ISC Dynamic Host Configuration Protocol server\n\ntftp-hpa – BSD derived TFTP Server\n\nPXE Boot Menu with submenus\n\nPreparation for Installation\n\nStart PuTTY on a Windows PC, Terminal on a Mac or similar terminal application on a Linux PC.\n\nIn this example Terminal on a Mac is used.\n\nOpen a remote SSH session to the server with:\n\nMac:~ user$ ssh user@192.168.1.4 [enter]\n\nN.B.: Replace user@192.168.1.4 with User ID and IP Address on Your server!\n\n[user@server ~]$\n\nEnable superuser privileges with:\n\n[user@server ~]$ sudo -s [enter] Password: <-- passwd [enter] [root@server /usr/home/user]#\n\nN.B.: Enter user password, not the root password!\n\nInstallation\n\nThe server used in this example is configured to contain one partition called /tftpboot used for PXE related files.\n\nAdd the Disk Imaging and Partitioning Utility option to the PXE Boot Main Menu with:\n\n[root@server /usr/home/user]# ee /tftpboot/pxelinux.cfg/default [enter]\n\n…the add the following text, example:\n\n... MENU COLOR HOTKEY 0 #ff00ff00 #ee000000 std MENU COLOR HOTSEL 0 #ffffffff #85000000 std LABEL f1 MENU LABEL ^1) Disk Imaging and Partitioning Utilities KERNEL vesamenu.c32 APPEND top.cfg f01.cfg bottom.cfg LABEL blank MENU LABEL ...\n\nThe PXE Boot Sub-Menu for Disk Imaging and Partitioning Utilities is defined in file /tftpboot/f01.cfg.\n\nCreate this file with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n..and then add the following text, example:\n\nMENU TITLE Disk Imaging and Partitioning Utilities\n\nChange file modes\n\nChange file modes for file /tftpboot/f01.cfg with:\n\n[root@server ~]# chmod -R 755 /tftpboot/f01.cfg [enter] [root@server /usr/home/user]#\n\nCreate a folder for Disk Imaging and Partitioning Utilities files with:\n\n[root@server /usr/home/user]# mkdir /tftpboot/f01 [enter] [root@server /usr/home/user]#\n\nNFSv4 Server Setup\n\nService start on boot\n\nList installed NFS services with:\n\n[root@server /usr/home/user]# service -r | grep /nfs [enter] /etc/rc.d/nfsclient /etc/rc.d/nfsuserd /etc/rc.d/nfsd /etc/rc.d/nfscbd [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.d/nfsclient with:\n\n[root@server /usr/home/user]# /etc/rc.d/nfsclient rcvar [enter] # nfsclient : NFS client setup # nfs_client_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.d/nfsuserd with:\n\n[root@server /usr/home/user]# /etc/rc.d/nfsuserd rcvar [enter] # nfsuserd : Load user and group information into the kernel for NFSv4 services and support manage-gids for all NFS versions # nfsuserd_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.d/nfsd with:\n\n[root@server /usr/home/user]# /etc/rc.d/nfsd rcvar [enter] # nfsd : Remote NFS server # nfs_server_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.d/nfscbd with:\n\n[root@server /usr/home/user]# /etc/rc.d/nfscbd rcvar [enter] # nfscbd : NFSv4 client side callback daemon # nfscbd_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nN.B.: Since an NFSv4 mount uses the host uuid to identify the client uniquely to the server, you cannot safely do an NFSv4 mount when\n\nit is set to hostid_enable=”NO”!\n\nAdd the following to /etc/rc.conf, assuming they’re not already there:\n\n[root@server /usr/home/user]# echo '' >> /etc/rc.conf; echo '# NFS Server' >> /etc/rc.conf; echo 'rpcbind_enable=\"YES\"' >> /etc/rc.conf; echo 'mountd_enable=\"YES\"' >> /etc/rc.conf; echo 'nfs_server_enable=\"YES\"' >> /etc/rc.conf; echo 'nfsv4_server_enable=\"YES\"' >> /etc/rc.conf; echo 'nfsuserd_enable=\"YES\"' >> /etc/rc.conf [enter]\n\nExport Settings\n\nNow we need to create an NFS export settings file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and the add the following text:\n\nV4: / /tmp \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nThis example assumes your network is 192.168.1.0/24; if it’s something else, you’ll need to make appropriate changes.\n\nNow start all of the above services:\n\n[root@server /usr/home/user]# service rpcbind start [enter] Starting rpcbind. [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# service mountd start [enter] Starting mountd. [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# service nfsd start [enter] Starting nfsd. [root@server /usr/home/user]#\n\nVerify that the NFS mount is being exported with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: /tmp 192.168.1.0 [root@server /usr/home/user]#\n\nAfter you have performed an update of file /etc/exports, re-read the exports settings with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nIf your NFS exported directories will not be accessed locally (and Samba counts as local access), then you can enable NFSv4 delegations to improve performance. On a FreeBSD NFS server, they may be enabled globally for all exports by adding the following line to /etc/sysctl.conf with:\n\n[root@server /usr/home/user]# echo 'vfs.nfsd.issue_delegations=1' >> /etc/sysctl.conf [enter] [root@server /usr/home/user]#\n\npacket filter (pf)\n\nAccess to the tftpd service must be enabled in the packet filter (pf) configuration file.\n\nStart editing file /etc/pf.conf with:\n\n[root@server /usr/home/user]# ee /etc/pf.conf [enter]\n\n…and add port information to enable access to the NFS service from clients on the local network as in this example:\n\n... # Ports: ... # 111 TCP UDP Open Network Computing Remote Procedure Call (ONC RPC, sometimes referred to as Sun RPC) ... # 2049 TCP UDP Network File System (NFS) ... tcp_pass=\"{ ... 111, ... 2049, ... }\" udp_pass=\"{ ... 111, ... 2049, ... }\" ...\n\nCheck /etc/pf.conf for errors, but do not load ruleset with:\n\n[root@server /usr/home/user]# pfctl -vvnf /etc/pf.conf [enter]\n\n…and then reload /etc/pf.conf with:\n\n[root@server /usr/home/user]# service pf reload [enter] Reloading pf rules. [root@server /usr/home/user]#\n\nGParted Live\n\nGNOME Partition Editor for creating, reorganizing, and deleting disk partitions. It uses libparted from the parted project to detect and manipulate partition tables. Optional file system tools permit managing file systems not included in libparted.\n\nGParted Live is a small bootable GNU/Linux distribution for x86 based computers.\n\nIt enables you to use all the features of the latest versions of the GParted application.\n\nWWW: http://gparted.sourceforge.net/livecd.php/.\n\nFiles: https://sourceforge.net/projects/gparted/files/.\n\nRequirements\n\nGParted is a free partition manager that enables you to resize, copy, and move partitions without data loss.\n\namd64\n\nThe 64-bit version of GParted runs on x86-64 based computers, with the ability to access more than 4 gigabytes of memory, and supports the use of multiple processor cores.\n\nFor newer (>2010) computers with UEFI instead of legacy BIOS try this one.\n\nDownload gparted-live-0.28.1-1-amd64.zip, 271 MB, with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/gparted/files/gparted-live-stable/0.28.1-1/gparted-live-0.28.1-1-amd64.zip [enter]\n\nCreate direcory /tftpboot/f01/gparted with:\n\n[root@server /usr/home/user]# mkdir -p /tftpboot/f01/gparted [enter] [root@server /usr/home/user]#\n\nExtract zip file gparted-live-0.28.1-1-amd64.zip into directory /tftpboot/f01/gparted/i686/ with:\n\n[root@server /usr/home/user]# unzip gparted-live-0.28.1-1-amd64.zip live/* -d /tftpboot/f01/gparted/amd64 [enter] Archive: gparted-live-0.28.1-1-amd64.zip extracting: /tftpboot/f01/gparted/amd64/live/memtest extracting: /tftpboot/f01/gparted/amd64/live/GParted-Live-Version extracting: /tftpboot/f01/gparted/amd64/live/initrd.img extracting: /tftpboot/f01/gparted/amd64/live/filesystem.packages-remove extracting: /tftpboot/f01/gparted/amd64/live/filesystem.packages extracting: /tftpboot/f01/gparted/amd64/live/vmlinuz extracting: /tftpboot/f01/gparted/amd64/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded zip files with:\n\n[root@server /usr/home/user]# rm gparted-live-0.28.1-1-amd64.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/gparted [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/gparted/amd64/live [enter] [root@server /usr/home/user]#\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n…and add the following lines:\n\nLABEL f1 MENU LABEL ^1) GParted Live v. 0.28.1-1-amd64 MENU PASSWD TEXT HELP GParted is used for creating, reorganizing and deleting disk partitions. The amd64 version runs on x86-64 based computers, with ability to access more than 4 gigabytes of memory and supports use of multiple processor cores. For newer (>2010) computers with UEFI instead of legacy BIOS ENDTEXT KERNEL f01/gparted/amd64/live/vmlinuz APPEND initrd=f01/gparted/amd64/live/initrd.img boot=live union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=791 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/gparted/amd64/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / /tftpboot/f01/gparted/amd64 \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: /tftpboot/f01/gparted/amd64 192.168.1.0 [root@server /usr/home/user]#\n\ni686 PAE (Physical Address Extension)\n\nThe 32-bit version of Gparted runs on x86 (i686 and higher) and x86-64 based computers, with Physical Address Extension to access more than 4 gigabytes of memory, and supports the use of multiple processor cores.\n\nDownload 0.28.1-1-i686-pae, 273 MB, with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/gparted/files/gparted-live-stable/0.28.1-1/gparted-live-0.28.1-1-i686-pae.zip [enter]\n\nExtract zip file ~/gparted-live-0.28.1-1-i686-pae.zip into directory /tftpboot/f01/gparted/i686-pae/ with:\n\n[root@server /usr/home/user]# unzip gparted-live-0.28.1-1-i686-pae.zip live/* -d /tftpboot/f01/gparted/i686-pae [enter] Archive: gparted-live-0.28.1-1-i686-pae.zip extracting: /tftpboot/f01/gparted/i686-pae/live/memtest extracting: /tftpboot/f01/gparted/i686-pae/live/GParted-Live-Version extracting: /tftpboot/f01/gparted/i686-pae/live/initrd.img extracting: /tftpboot/f01/gparted/i686-pae/live/filesystem.packages-remove extracting: /tftpboot/f01/gparted/i686-pae/live/filesystem.packages extracting: /tftpboot/f01/gparted/i686-pae/live/vmlinuz extracting: /tftpboot/f01/gparted/i686-pae/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded zip files with:\n\n[root@server /usr/home/user]# rm gparted-live-0.28.1-1-i686-pae.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/gparted [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/gparted/i686-pae/live [enter] [root@server /usr/home/user]#\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n…and add the following lines:\n\nLABEL f2 MENU LABEL ^2) GParted Live v. 0.28.1-1-i686-pae (Physical Address Extension) MENU PASSWD TEXT HELP GParted is used for creating, reorganizing and deleting disk partitions. The i686-pae version runs on x86 (i686 and higher) and x86-64 based computers, with Physical Address Extension to access more than 4 gigabytes of memory, and supports use of multiple processor cores. ENDTEXT KERNEL f01/gparted/i686-pae/live/vmlinuz APPEND initrd=f01/gparted/i686-pae/live/initrd.img boot=live union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=788 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/gparted/i686-pae/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / /tftpboot/f01/gparted/amd64 \\ /tftpboot/f01/gparted/i686-pae \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: /tftpboot/f01/gparted/i686-pae 192.168.1.0 /tftpboot/f01/gparted/amd64 192.168.1.0 [root@server /usr/home/user]#\n\ni686\n\n32-bit version of GParted runs on x86 and x86-64 based computers, limited to physical address space of 4 gigabytes, and uses one processor only.\n\nIf in doubt, try this one first!\n\nDownload gparted-live-0.28.1-1-i686.zip, 272 MB, with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/gparted/files/gparted-live-stable/0.28.1-1/gparted-live-0.28.1-1-i686.zip [enter]\n\nExtract zip file ~/gparted-live-0.28.1-1-i686.zip into directory /tftpboot/f01/gparted/i686/ with:\n\n[root@server /usr/home/user]# unzip gparted-live-0.28.1-1-i686.zip live/* -d /tftpboot/f01/gparted/i686 [enter] Archive: gparted-live-0.28.1-1-i686.zip extracting: /tftpboot/f01/gparted/i686/live/memtest extracting: /tftpboot/f01/gparted/i686/live/GParted-Live-Version extracting: /tftpboot/f01/gparted/i686/live/initrd.img extracting: /tftpboot/f01/gparted/i686/live/filesystem.packages-remove extracting: /tftpboot/f01/gparted/i686/live/filesystem.packages extracting: /tftpboot/f01/gparted/i686/live/vmlinuz extracting: /tftpboot/f01/gparted/i686/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded zip files with:\n\n[root@server /usr/home/user]# rm gparted-live-0.28.1-1-i686.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/gparted [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/gparted/i686/live [enter] [root@server /usr/home/user]#\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n…and add the following lines:\n\nLABEL f3 MENU LABEL ^3) GParted Live v. 0.28.1-1-i686 MENU PASSWD TEXT HELP GParted is used for creating, reorganizing and deleting disk partitions. The i686 version runs on x86 and x86-64 based computers, limited to physical address space of 4 gigabytes, and uses one processor only. -- If in doubt, try this one first! -- ENDTEXT KERNEL f01/gparted/i686/live/vmlinuz APPEND initrd=f01/gparted/i686/live/initrd.img boot=live union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=788 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/gparted/i686/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / /tftpboot/f01/gparted/amd64 \\ /tftpboot/f01/gparted/i686-pae \\ /tftpboot/f01/gparted/i686 \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: /tftpboot/f01/gparted/i686-pae 192.168.1.0 /tftpboot/f01/gparted/i686 192.168.1.0 /tftpboot/f01/gparted/amd64 192.168.1.0 [root@server /usr/home/user]#\n\nClonezilla Live\n\nYou’re probably familiar with the popular proprietary commercial package Norton Ghost®. The problem with this kind of software packages is that it takes a lot of time to massively clone systems to many computers. You’ve probably also heard of Symantec’s solution to this problem, Symantec Ghost Corporate Edition® with multicasting. Well, now there is an OpenSource clone system (OCS) solution called Clonezilla with unicasting and multicasting!\n\nClonezilla, based on DRBL, Partclone and udpcast, allows you to do bare metal backup and recovery. Two types of Clonezilla are available, Clonezilla live and Clonezilla SE (server edition). Clonezilla live is suitable for single machine backup and restore. While Clonezilla SE is for massive deployment, it can clone many (40 plus!) computers simultaneously. Clonezilla saves and restores only used blocks in the harddisk. This increases the cloning efficiency. At the NCHC’s Classroom C, Clonezilla SE was used to clone 41 computers simultaneously. It took only about 10 minutes to clone a 5.6 GBytes system image to all 41 computers via multicasting!\n\nWWW: http://clonezilla.org/.\n\nFiles: https://sourceforge.net/projects/clonezilla/files/.\n\namd64\n\nDownload Clonezilla Live Stable amd64, 187 MB, optimized for use on PCs with amd64 CPU computers with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/2.5.0-25/clonezilla-live-2.5.0-25-amd64.zip [enter]\n\nCreate direcory /tftpboot/f01/clonezilla/amd64 with:\n\n[root@server /usr/home/user]# mkdir -p /tftpboot/f01/clonezilla/amd64 [enter] [root@server /usr/home/user]#\n\nExtract zip file clonezilla-live-2.5.0-25-amd64.zip to /tftpboot/f01/clonezilla/amd64 with:\n\n[root@srvgw ~]# unzip clonezilla-live-2.5.0-25-amd64.zip live/* -d /tftpboot/f01/clonezilla/amd64 [enter] Archive: /clonezilla-live-2.5.0-25-amd64.zip extracting: /tftpboot/f01/clonezilla/amd64/live/ipxe.efi extracting: /tftpboot/f01/clonezilla/amd64/live/filesystem.packages-remove extracting: /tftpboot/f01/clonezilla/amd64/live/vmlinuz extracting: /tftpboot/f01/clonezilla/amd64/live/ipxe.lkn extracting: /tftpboot/f01/clonezilla/amd64/live/initrd.img extracting: /tftpboot/f01/clonezilla/amd64/live/freedos.img extracting: /tftpboot/f01/clonezilla/amd64/live/filesystem.packages extracting: /tftpboot/f01/clonezilla/amd64/live/memtest extracting: /tftpboot/f01/clonezilla/amd64/live/Clonezilla-Live-Version extracting: /tftpboot/f01/clonezilla/amd64/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded .zip file with;\n\n[root@server /usr/home/user]# rm clonezilla-live-2.5.0-25-amd64.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/clonezilla/amd64/live [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/clonezilla/amd64/live [enter] [root@server /usr/home/user]#\n\nPXE Boot Sub-Menu\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg\n\n..and add the following text, example:\n\nLABEL f4 MENU LABEL ^4) CloneZilla v. 2.5.0-25 amd64 MENU PASSWD TEXT HELP Cloning of PC hard disks for backup or deploy a common setup on a number of PCs using a Server. The amd64 version runs on x86-64 based computers, with ability to access more than 4 gigabytes of memory and supports use of multiple processor cores. ENDTEXT KERNEL f01/clonezilla/amd64/live/vmlinuz APPEND initrd=f01/clonezilla/amd64/live/initrd.img boot=live toram union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=791 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/clonezilla/amd64/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / ... /tftpboot/f01/clonezilla/amd64 \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: ... /tftpboot/f01/clonezilla/amd64 192.168.1.0 [root@server /usr/home/user]#\n\ni686-PAE (Physical Address Extension)\n\nDownload Clonezilla Live Stable i686-pae, 188 MB, optimized for use on PCs with i686 CPU computers with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/2.5.0-25/clonezilla-live-2.5.0-25-i686-pae.zip [enter]\n\nCreate directory /tftpboot/f01/clonezilla/i686-pae with:\n\n[root@server /usr/home/user]# mkdir -p /tftpboot/f01/clonezilla/i686-pae [enter] [root@server /usr/home/user]#\n\nExtract zip file clonezilla-live-2.5.0-25-i686-pae.zip to /tftpboot/f01/clonezilla/i686-pae with:\n\n[root@srvgw ~]# unzip clonezilla-live-2.5.0-25-i686-pae.zip live/* -d /tftpboot/f01/clonezilla/i686-pae [enter] Archive: /clonezilla-live-2.5.0-25-i686-pae.zip extracting: /tftpboot/f01/clonezilla/i686-pae/live/ipxe.efi extracting: /tftpboot/f01/clonezilla/i686-pae/live/filesystem.packages-remov | extracting: /tftpboot/f01/clonezilla/i686-pae/live/vmlinuz extracting: /tftpboot/f01/clonezilla/i686-pae/live/ipxe.lkn extracting: /tftpboot/f01/clonezilla/i686-pae/live/initrd.img extracting: /tftpboot/f01/clonezilla/i686-pae/live/freedos.img extracting: /tftpboot/f01/clonezilla/i686-pae/live/filesystem.packages extracting: /tftpboot/f01/clonezilla/i686-pae/live/memtest extracting: /tftpboot/f01/clonezilla/i686-pae/live/Clonezilla-Live-Version extracting: /tftpboot/f01/clonezilla/i686-pae/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded .zip file with;\n\n[root@server /usr/home/user]# rm clonezilla-live-2.5.0-25-i686-pae.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/clonezillai686-pae/live [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/clonezilla/i686-pae/live [enter] [root@server /usr/home/user]#\n\nPXE Boot Sub-Menu\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n..and add the following text, example:\n\nLABEL f5 MENU LABEL ^5) CloneZilla v. 2.5.0-25 i686-pae (Physical Address Extension) MENU PASSWD TEXT HELP Cloning of PC hard disks for backup or deploy a common setup on a number of PCs using a Server. The i686-pae version runs on x86 (i686 and higher) and x86-64 based computers, with Physical Address Extension to access more than 4 gigabytes of memory, and supports use of multiple processor cores. ENDTEXT KERNEL f01/clonezilla/i686-pae/live/vmlinuz APPEND initrd=f01/clonezilla/i686-pae/live/initrd.img boot=live union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=791 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/clonezilla/i686-pae/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / ... /tftpboot/f01/clonezilla/amd64 \\ /tftpboot/f01/clonezilla/i686-pae \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: ... /tftpboot/f01/clonezilla/i686-pae 192.168.1.0 /tftpboot/f01/clonezilla/amd64 192.168.1.0 [root@server /usr/home/user]#\n\ni686\n\nDownload Clonezilla Live Stable i686, 188 MB, optimized for use on PCs with i686 CPU computers with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable/2.5.0-25/clonezilla-live-2.5.0-25-i686.zip [enter]\n\nCreate directory /tftpboot/f01/clonezilla/i686 with:\n\n[root@server /usr/home/user]# mkdir -p /tftpboot/f01/clonezilla/i686 [enter] [root@server /usr/home/user]#\n\nExtract zip file clonezilla-live-2.5.0-25-i686.zip to /tftpboot/f01/clonezilla/i686 with:\n\n[root@srvgw ~]# unzip clonezilla-live-2.5.0-25-i686.zip live/* -d /tftpboot/f01/clonezilla/i686 [enter] Archive: /clonezilla-live-2.5.0-25-i686.zip extracting: /tftpboot/f01/clonezilla/i686/live/ipxe.efi extracting: /tftpboot/f01/clonezilla/i686/live/filesystem.packages-remove extracting: /tftpboot/f01/clonezilla/i686/live/vmlinuz extracting: /tftpboot/f01/clonezilla/i686/live/ipxe.lkn extracting: /tftpboot/f01/clonezilla/i686/live/initrd.img extracting: /tftpboot/f01/clonezilla/i686/live/freedos.img extracting: /tftpboot/f01/clonezilla/i686/live/filesystem.packages extracting: /tftpboot/f01/clonezilla/i686/live/memtest extracting: /tftpboot/f01/clonezilla/i686/live/Clonezilla-Live-Version extracting: /tftpboot/f01/clonezilla/i686/live/filesystem.squashfs [root@server /usr/home/user]#\n\nDelete downloaded .zip file with;\n\n[root@server /usr/home/user]# rm clonezilla-live-2.5.0-25-i686.zip [enter] [root@server /usr/home/user]#\n\nThe TFTP root directory permission plays an important role. Make sure that the permission and ownership are set correctly with:\n\n[root@server /usr/home/user]# chown -R tftpd:nobody /tftpboot/f01/clonezilla/i686/live [enter] [root@server /usr/home/user]# chmod -R 755 /tftpboot/f01/clonezilla/i686/live [enter] [root@server /usr/home/user]#\n\nPXE Boot Sub-Menu\n\nEdit file /tftpboot/f01.cfg with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n..and add the following text, example:\n\nLABEL f6 MENU LABEL ^6) CloneZilla v. 2.5.0-25 i686 MENU PASSWD TEXT HELP Cloning of PC hard disks for backup or deploy a common setup on a number of PCs using a Server. The i686 version runs on x86 and x86-64 based computers, limited to physical address space of 4 gigabytes, and uses one processor only. -- If in doubt, try this one first! -- ENDTEXT KERNEL f01/clonezilla/i686/live/vmlinuz APPEND initrd=f01/clonezilla/i686/live/initrd.img boot=live union=overlay username=tftpd config components quiet noswap edd=on nomodeset nodmraid noeject locales=\"en_US.UTF-8\" keyboard-layouts=\"se\" ocs_live_run=\"ocs-live-general\" ocs_live_extra_param=\"\" ocs_live_batch=no vga=791 ip= net.ifnames=0 nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1 netboot=nfs nfsroot=$nfsserverIP:/tftpboot/f01/clonezilla/i686/\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / ... /tftpboot/f01/clonezilla/amd64 \\ /tftpboot/f01/clonezilla/i686-pae \\ /tftpboot/f01/clonezilla/i686 \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: ... /tftpboot/f01/clonezilla/i686-pae 192.168.1.0 /tftpboot/f01/clonezilla/i686 192.168.1.0 /tftpboot/f01/clonezilla/amd64 192.168.1.0 [root@server /usr/home/user]#\n\nG4L\n\nG4L is a hard disk and partition imaging and cloning tool. The created images are optionally compressed and transferred to an FTP server or cloned locally. CIFS(Windows), SSHFS and NFS support included, and udpcast and fsarchiver options.\n\nWWW: https://sourceforge.net/projects/g4l/.\n\nDownload\n\nDownload ISO CD-ROM Image g4l-v0.52.iso, 99 MB, with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/g4l/files/g4l%20ISO%20images/g4l-v0.52.iso -P /tftpboot/f01/ [enter]\n\nChange file mode with:\n\n[root@server /usr/home/user]# chmod 755 /tftpboot/f01/g4l-v0.52.iso [enter] [root@server /usr/home/user]#\n\nPXE Boot Sub-Menu\n\nThe PXE Boot Sub-Menu for PXE Boot for G4L is defined in file /tftpboot/f01.cfg.\n\nEdit this file with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n..and add the following text, example:\n\nLABEL f7 MENU LABEL ^7) G4L v. 0.52 TEXT HELP G4L is a hard disk and partition imaging and cloning tool. The created images are optionally compressed and transferred to an FTP server or cloned locally. ENDTEXT KERNEL memdisk APPEND initrd=f01/g4l-v0.52.iso iso raw\n\nG4U (“ghosting for unix”)\n\nG4U is a hard disk and partition imaging and cloning tool. The created images are optionally compressed and transferred to an FTP server or cloned locally. CIFS(Windows), SSHFS and NFS support included, and udpcast and fsarchiver options.\n\nWWW: http://fehu.org/~feyrer/g4u/.\n\nDownload\n\nDownload ISO CD-ROM Image g4u-2.5.iso, 4.9 MB, with:\n\n[root@server /usr/home/user]# wget http://fehu.org/~feyrer/g4u/g4u-2.5.iso -P /tftpboot/f01/ [enter]\n\n[root@server /usr/home/user]# chmod 755 /tftpboot/f01/g4u-2.5.iso [enter] [root@server /usr/home/user]#\n\nPXE Boot Sub-Menu\n\nThe PXE Boot Sub-Menu for PXE Boot for G4U is defined in file /tftpboot/f01.cfg.\n\nEdit this file with:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\n..and add the following text, example:\n\nLABEL f8 MENU LABEL ^8) G4U v. 2.5 TEXT HELP G4U is a NetBSD-based bootfloppy/CD-ROM that allows easy cloning of PC harddisks to deploy a common setup on a number of PCs using FTP. ENDTEXT KERNEL memdisk APPEND initrd=f01/g4u-2.5.iso iso raw\n\nSystemRescueCd 32bit and 64bit kernel\n\nSystemRescueCd is a Linux system rescue disk available as a bootable CD-ROM or USB stick for administrating or repairing your system and data after a crash. It aims to provide an easy way to carry out admin tasks on your computer, such as creating and editing the hard disk partitions. It comes with a lot of Linux software such as system tools (parted, partimage, fstools, …) and basic tools (editors, midnight commander, network tools). It requires no installation. It can be used on Linux servers, Linux desktops or windows boxes. The kernel supports the important file systems (ext2/ext3/ext4, reiserfs, reiser4, btrfs, xfs, jfs, vfat, ntfs, iso9660), as well as network filesystems (samba and nfs).\n\nWWW: http://www.sysresccd.org/.\n\nFiles: https://sourceforge.net/projects/systemrescuecd/files/.\n\nDownload and Install\n\nDownload systemrescuecd-x86-4.9.3.iso, 492 MB, with:\n\n[root@server /usr/home/user]# wget https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/4.9.3/systemrescuecd-x86-4.9.3.iso [enter]\n\nCreate a memory disk out of the cd9660 image file systemrescuecd-x86-4.9.3.iso, using the first available md(4) device, with:\n\n[root@server /usr/home/user]# mdconfig -a -t vnode -f systemrescuecd-x86-4.9.0.iso [enter] md0 [root@server /usr/home/user]#\n\n…and then mount it with:\n\n[root@server /usr/home/user]# mount -t cd9660 /dev/md0 /mnt [enter] [root@server /usr/home/user]#\n\nCreate a new directory for the content of the iso image, using this command:\n\n[root@server /usr/home/user]# mkdir -p /tftpboot/f01/rescuecd [enter] [root@server /usr/home/user]#\n\nCopy the content of the iso file to the new directories, using this commands:\n\n[root@server /usr/home/user]# rsync -e ssh -avz --delete /mnt/ /tftpboot/f01/rescuecd/ [enter] sending incremental file list ./ readme.txt ... usb_inst/xorriso sent 504,580,569 bytes received 6,810 bytes 32,554,024.45 bytes/sec total size is 514,891,736 speedup is 1.02 [root@server /usr/home/user]#\n\nUnmount the iso image, using this command:\n\n[root@server /usr/home/user]# umount /mnt [enter] [root@server /usr/home/user]#\n\nList configured and enabled memory disks on your system, using this command:\n\n[root@server /usr/home/user]# mdconfig -lv [enter] md0 vnode 492M /usr/home/user/systemrescuecd-x86-4.9.3.iso [root@server /usr/home/user]#\n\nDelete memory disk – in this example md0– with this command:\n\n[root@server /usr/home/user]# mdconfig -d -u 0 [enter] [root@server /usr/home/user]#\n\nDelete the SystemRescueCd iso image with:\n\n[root@server /usr/home/user]# rm systemrescuecd-x86-4.9.3.iso [enter] [root@server /usr/home/user]#\n\nEdit file ‘/tftpboot/f01.cfg’ and add the following lines:\n\n[root@server /usr/home/user]# ee /tftpboot/f01.cfg [enter]\n\nLABEL f9 MENU LABEL ^9) SystemRescueCd 64bit kernel v. 4.9.3 MENU PASSWD TEXT HELP SystemRescueCd is a Linux system rescue disk available for administrating or repairing your system and data after a crash. ENDTEXT KERNEL f01/rescuecd/isolinux/rescue64 APPEND setkmap=se initrd=f01/rescuecd/isolinux/initram.igz dodhcp dostartx netboot=nfs://$nfsserverIP:/tftpboot/f01/rescuecd LABEL f0 MENU LABEL ^0) SystemRescueCd 32bit kernel v. 4.9.3 MENU PASSWD TEXT HELP SystemRescueCd is a Linux system rescue disk available for administrating or repairing your system and data after a crash. ENDTEXT KERNEL f01/rescuecd/isolinux/rescue32 APPEND setkmap=se initrd=f01/rescuecd/isolinux/initram.igz dodhcp dostartx netboot=nfs://$nfsserverIP:/tftpboot/f01/rescuecd LABEL f9 MENU LABEL ^9) Hardware Detection Tool v. 0.5.0 MENU PASSWD TEXT HELP Reports S.M.A.R.T. data, firmware errorlog, runs firmware tests, scans surface reporting access times per sector and much more. ENDTEXT KERNEL memdisk APPEND initrd=f01/rescuecd/bootdisk/hdt.img\n\nN.B.: Replace $nfsserverIP with the IP address of your NFS server!\n\nNFS Export Update\n\nEdit file /etc/exports with:\n\n[root@server /usr/home/user]# ee /etc/exports [enter]\n\n…and add the following text:\n\nV4: / ... /tftpboot/f01/rescuecd \\ -maproot=root -network 192.168.1.0 -mask 255.255.255.0\n\nReload the NFS mount setup with:\n\n[root@server /usr/home/user]# service mountd reload [enter] [root@server /usr/home/user]#\n\nDisplay the NFS mount setup with:\n\n[root@server /usr/home/user]# showmount -e [enter] Exports list on localhost: ... /tftpboot/f01/rescuecd 192.168.1.0 [root@server /usr/home/user]#\n\nDescription\n\nBIND is open source software that enables you to publish your Domain Name System (DNS) information on the Internet and to resolve DNS queries for your users. The name BIND stands for “Berkeley Internet Name Domain” because the software originated in the early 1980s at the University of California at Berkeley.\n\nBIND is by far the most widely used DNS software on the Internet, providing a robust and stable platform on top of which organizations can build distributed computing systems with the knowledge that those systems are fully compliant with published DNS standards.\n\nWWW: https://www.isc.org/software/bind.\n\nInstalled and configured package(s) requirement:\n\nOpenSSL – Open Secure Sockets Layer\n\nPreparation for Installation\n\nStart PuTTY on a Windows PC, Terminal on a Mac or similar terminal application on a Linux PC.\n\nIn this example Terminal on a Mac is used.\n\nOpen a remote SSH session to the server with:\n\nMac:~ user$ ssh user@192.168.1.4 [enter]\n\nN.B.: Replace user@192.168.1.4 with User ID and IP Address on Your server!\n\n[user@server ~]$\n\nEnable superuser privileges with:\n\n[user@server ~]$ sudo -s [enter] Password: <-- passwd [enter] [root@server /usr/home/user]#\n\nN.B.: Enter user password, not the root password!\n\nInstallation\n\nSearch for bind in the remote package repositories with:\n\n[root@server /usr/home/user]# pkg search bind <enter> bind-tools-9.10.4P6 Command line tools from BIND: delv, dig, host, nslookup... bind9-devel-9.12.0.a.2017.02.09 BIND DNS suite with updated DNSSEC and DNS64 bind910-9.10.4P6 BIND DNS suite with updated DNSSEC and DNS64 bind911-9.10.4P6 BIND DNS suite with updated DNSSEC and DNS64 bind99-9.9.9P6 BIND DNS suite with updated DNSSEC and DNS64 bindgraph-0.3_1 RRDtool frontend for BIND statistics bindtest-1.56_1 Test bind() semantics of IPv6 sockets . . [root@server /usr/home/user]#\n\nIn this example, bind910 will be installed due to that bind911 has TCP_FASTOPEN error issues when running under FreeBSD 11.0-RELEASE-amd64.\n\nInstall bind910 with;\n\n[root@server /usr/home/user]# pkg install bind910 [enter] Updating FreeBSD repository catalogue... FreeBSD repository is up-to-date. All repositories are up-to-date. The following 4 package(s) will be affected (of 0 checked): New packages to be INSTALLED: bind911: 9.10.4P6 lmdb: 0.9.18_1 idnkit: 1.0_6 json-c: 0.12.1 Number of packages to be installed: 4 The process will require 61 MiB more space. 8 MiB to be downloaded. Proceed with this action? [y/N]: y [enter] Fetching bind911-9.10.4P6.txz: 100% 8 MiB 2.7MB/s 00:03 Fetching lmdb-0.9.18_1.txz: 100% 87 KiB 89.5kB/s 00:01 Fetching idnkit-1.0_6.txz: 100% 194 KiB 198.4kB/s 00:01 Fetching json-c-0.12.1.txz: 100% 38 KiB 39.2kB/s 00:01 Checking integrity... done (0 conflicting) [1/4] Installing lmdb-0.9.18_1... [1/4] Extracting lmdb-0.9.18_1: 100% [2/4] Installing idnkit-1.0_6... [2/4] Extracting idnkit-1.0_6: 100% [3/4] Installing json-c-0.12.1... [3/4] Extracting json-c-0.12.1: 100% [4/4] Installing bind911-9.10.4P6... [4/4] Extracting bind911-9.10.4P6: 100% Message from idnkit-1.0_6: ===> NOTICE: The idnkit port currently does not have a maintainer. As a result, it is more likely to have unresolved issues, not be up-to-date, or even be removed in the future. To volunteer to maintain this port, please create an issue at: https://bugs.freebsd.org/bugzilla More information about port maintainership is available at: https://www.freebsd.org/doc/en/articles/contributing/ports-contributing.html#maintain-port Message from bind911-9.10.4P6: ********************************************************************** * _ _____ _____ _____ _ _ _____ ___ ___ _ _ * * / \\|_ _|_ _| ____| \\ | |_ _|_ _/ _ \\| \\ | | * * / _ \\ | | | | | _| | \\| | | | | | | | | \\| | * * / ___ \\| | | | | |___| |\\ | | | | | |_| | |\\ | * * /_/ \\_\\_| |_| |_____|_| \\_| |_| |___\\___/|_| \\_| * * * * BIND requires configuration of rndc, including a \"secret\" key. * * The easiest, and most secure way to configure rndc is to run * * 'rndc-confgen -a' to generate the proper conf file, with a new * * random key, and appropriate file permissions. * * * * The /usr/local/etc/rc.d/named script will do that for you. * * * ********************************************************************** [root@server /usr/home/user]#\n\nConfiguration\n\nList installed services named with:\n\n[root@server /usr/home/user]# service -r | grep named /usr/local/etc/rc.d/named [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.conf:\n\n[root@server /usr/home/user]# /usr/local/etc/rc.d/named rcvar # named # named_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nTo start BIND at system boot, add information to /etc/rc.conf with this commands:\n\n[root@server /usr/home/user]# echo '' >> /etc/rc.conf; echo '# BIND' >> /etc/rc.conf; echo 'named_enable=\"YES\"' >> /etc/rc.conf; echo 'named_auto_forward=\"YES\"' >> /etc/rc.conf [enter] [root@server /usr/home/user]#\n\nN.B.: named_auto_forward=”YES” tells BIND to pick forward Name Server(s) from file /etc/resolve.conf!\n\nAutomatically rotate the /var/named/var/log/named.log log file with:\n\n[root@server /usr/home/user]# echo '/var/log/named.log 600 9 100000 * Z' >> /etc/syslog.conf [enter] [root@server /usr/home/user]#\n\nUpdate Resolve Config\n\nUpdate file /etc/resolv.conf and set the local host as the primary DNS:\n\n[root@server /usr/home/user]# ee /etc/resolv.conf [enter] search example.net nameserver 127.0.0.1 nameserver 208.67.222.222 nameserver 208.67.220.220\n\nN.B.: In this example OpenDNS Name Servers 208.67.222.222 and 208.67.220.220 is will be used by the local BIND Name Server for forward requests.\n\nGenerate Cryptograpic Key\n\nGenerate a rndc.key file with the following command:\n\n[root@server /usr/home/user]# rndc-confgen -a [enter] wrote key file \"/usr/local/etc/namedb/rndc.key\" [root@server /usr/home/user]#\n\nChange file modes on file /usr/local/etc/namedb/rndc.key with:\n\n[root@server /usr/home/user]# chmod 440 /usr/local/etc/namedb/rndc.key [enter] [root@server /usr/home/user]#\n\nDisplay content of file /usr/local/etc/namedb/rndc.key with:\n\n[root@server /usr/home/user]# cat /usr/local/etc/namedb/rndc.key [enter]\n\nkey \"rndc-key\" { algorithm hmac-md5; secret \"XcwJ.............JSCMw==\"; };\n\nN.B.: The content of file cat /usr/local/etc/namedb/rndc.key must be copied to the BIND configuration file /usr/local/etc/namedb/named.conf!\n\nConfiguration file\n\nEdit the BIND configuration file for /usr/local/etc/namedb/named.conf with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/namedb/named.conf [enter]\n\nN.B.: This is an example file. Please use it only as a template!\n\n// // named.conf // acl nets { 192.168.1/24; 127.0.0.1; }; options { // Relative to the chroot directory, if any, and should be fully qualified. directory \"/usr/local/etc/namedb/working\"; pid-file \"/var/run/named/pid\"; dump-file \"/var/dump/named_dump.db\"; statistics-file \"/var/stats/named.stats\"; listen-on { 192.168.1.4; 127.0.0.1; }; forwarders { 208.67.222.222; 208.67.220.220; }; allow-query { nets; }; allow-recursion { nets; }; }; logging { channel log_file { file \"/var/log/named/named.log\" versions 3 size 5M; severity debug 3 ; }; category queries { log_file; }; category xfer-in { log_file; }; category xfer-out { log_file; }; category default { log_file; }; }; include \"/usr/local/etc/namedb/rndc.key\"; controls { inet 127.0.0.1 port 953 allow { nets; } keys { \"rndc-key\"; }; inet 192.168.1.1 port 953 allow { nets; } keys { \"rndc-key\"; }; }; //zone \".\" { type hint; file \"named.root\"; }; zone \"localhost\" { type master; file \"/usr/local/etc/namedb/master/localhost-forward.db\"; }; zone \"127.in-addr.arpa\" { type master; file \"/usr/local/etc/namedb/master/localhost-reverse.db\"; }; zone \"255.in-addr.arpa\" { type master; file \"/usr/local/etc/namedb/master/empty.db\"; }; zone \"example.net\" { notify yes; type master; file \"/usr/local/etc/namedb/dynamic/hosts-forward.db\"; allow-update { key rndc-key; }; }; zone \"1.168.192.in-addr.arpa\" { notify yes; type master; file \"/usr/local/etc/namedb/dynamic/hosts-reverse.db\"; allow-update { key rndc-key; }; };\n\n“Seed” zone files\n\nPrepare a “seed” zone file for the domain the server should update dynamically.\n\nIn this example, the dynamic subdomain is going to be example.net. Remember to replace example.net with your domain name, it must match what you have used in file /var/named/etc/namedb/named.conf.\n\nThe “seed” zone file is very minimal and should contain information that WON’T ever change. In this case, that will be the SOA record, the NS records, and the MX record.\n\nCreate the forward “seed” zone file with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/namedb/dynamic/hosts-forward.db [enter]\n\nN.B.: This is an example file!\n\n$ORIGIN . $TTL 3600 ; 1 hour example.net IN SOA server.example.net. admin.example.net. ( 0 ; serial 10800 ; refresh (3 hours) 3600 ; retry (1 hour) 604800 ; expire (1 week) 86400 ; minimum (1 day) ) NS server.example.net. MX 10 server.example.net. $ORIGIN example.net. server A 192.168.1.1 ftp CNAME server mx CNAME server ns CNAME server www CNAME server\n\nCreate the reverse “seed” zone file with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/namedb/dynamic/hosts-reverse.db [enter]\n\nN.B.: This is an example file:\n\n$ORIGIN . $TTL 3600 ; 1 hour 1.168.192.in-addr.arpa IN SOA server.example.net. admin.example.net. ( 0 ; serial 10800 ; refresh (3 hours) 3600 ; retry (1 hour) 604800 ; expire (1 week) 86400 ; minimum (1 day) ) NS server.example.net. MX 10 server.example.net. $ORIGIN 1.168.192.in-addr.arpa. 1 PTR server.example.net.\n\nFeel free to modify based on what you want to do, you can add more aliases, A or MX records, and make sure to change your domain name above from example.net to your domain name. Make sure to add a “.” after words, also change your hostname from server to the hostname you are using.\n\nadmin.example.net is the e-mail address of the person responsible for the zone. Here we use a “.” instead of an “@” sign in the e-mail address.\n\nname service needs to update the configuration for the dynamic IPs itself. Set write permission for the user bind with:\n\n[root@server /usr/home/user]# chown bind:bind /usr/local/etc/namedb/dynamic/hosts-* [enter] [root@server /usr/home/user]#\n\nCreate a new directory called /var/log/named with:\n\n[root@server /usr/home/user]# mkdir /var/log/named [enter] [root@server /usr/home/user]#\n\nChange file owner and group with:\n\n[root@server /usr/home/user]# chown bind:bind /var/log/named [enter] [root@server /usr/home/user]#\n\nChange file modes with:\n\n[root@server /usr/home/user]# chmod 777 /var/log/named [enter] [root@server /usr/home/user]#\n\nCreate a empty log files called /var/log/named/named.log with:\n\n[root@server /usr/home/user]# touch /var/log/named/named.log [enter] [root@server /usr/home/user]#\n\n/var/log/named/named.log files must have write permission for user bind:\n\n[root@server /usr/home/user]# chown bind:bind /var/log/named/named.log [enter] [root@server /usr/home/user]#\n\nSyntax Checks\n\nnamed-checkzone checks the syntax and integrity of a zone file. It performs the same checks as named does when loading a zone. This makes named-checkzone useful for checking zone files before configuring them into a name server.\n\n[root@server /usr/home/user]# named-checkconf -zj [enter] zone localhost/IN: loaded serial 42 zone 127.in-addr.arpa/IN: loaded serial 42 zone 255.in-addr.arpa/IN: loaded serial 42 zone example.net/IN: loaded serial 0 zone 1.168.192.in-addr.arpa/IN: loaded serial 0 [root@server /usr/home/user]#\n\nOptional: rndc.conf\n\nrndc.conf is the configuration file for rndc, the BIND 9 name server control utility. This file has a similar structure and syntax to named.conf. Statements are enclosed in braces and terminated with a semi-colon. Clauses in the statements are also semi-colon terminated.\n\nAdd /usr/local/etc/namedb/rndc.key to file /usr/local/etc/namedb/rndc.conf with:\n\n[root@server /usr/home/user]# cat /usr/local/etc/namedb/rndc.key >> /usr/local/etc/namedb/rndc.conf\n\n[root@server /usr/home/user]#\n\nEdit the configuration file for rndc with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/namedb/rndc.conf [enter]\n\nN.B.: This is an example file!\n\n/* * rndc configuration file. */ options { default-server localhost; default-key \"rndc-key\"; }; server localhost { key \"rndc-key\"; }; key \"rndc-key\" { algorithm hmac-md5; secret \"XcwJ.............JSCMw==\"; };\n\nStart\n\nManually start BIND with;\n\n[root@server /usr/home/user]# service named start [enter] Starting named. [root@server /usr/home/user]#\n\nTest BIND status with:\n\n[root@server /usr/home/user]# service named status [enter] named is running as pid 64826. [root@server /usr/home/user]#\n\nCheck the error logs with:\n\n[root@server /usr/home/user]# grep named /var/log/messages [enter] Mar 1 12:33:35 srv named[92074]: starting BIND 9.10.4-P6 <id:a6837d0> -u bind -c /usr/local/etc/namedb/named.conf Mar 1 12:33:35 srv named[92074]: running on FreeBSD amd64 11.0-RELEASE-p2 FreeBSD 11.0-RELEASE-p2 #0: Mon Oct 24 06:55:27 UTC 2016 root@amd64-builder.daemonology.net:/usr/obj/usr/src/sys/GENERIC Mar 1 12:33:35 srv named[92074]: built with '--localstatedir=/var' '--disable-linux-caps' '--disable-symtable' '--with-randomdev=/dev/random' '--with-libxml2=/usr/local' '--with-readline=-L/usr/local/lib -ledit' '--with-dlopen=yes' '--sysconfdir=/usr/local/etc/namedb' '--disable-fetchlimit' '--disable-filter-aaaa' '--disable-fixed-rrset' '--without-geoip' '--with-idn=/usr/local' '--enable-ipv6' '--with-libjson' '--disable-largefile' '--without-python' '--disable-querytrace' '--enable-rpz-nsdname' '--enable-rpz-nsip' 'STD_CDEFINES=-DDIG_SIGCHASE=1' '--without-gssapi' '--with-openssl=/usr' '--disable-native-pkcs11' '--with-dlz-filesystem=yes' '--without-gost' '--enable-threads' '--prefix=/usr/local' '--mandir=/usr/local/man' '--infodir=/usr/local/info/' '--build=amd64-portbld-freebsd11.0' 'build_alias=amd64-portbld-freebsd11.0' 'CC=cc' 'CFLAGS=-O2 -pipe -DLIBICONV_PLUG -fstack-protector -isystem /usr/local/include -fno-strict-aliasing' 'LDFLAGS= -fstack-protector' 'LIBS=-L/usr/local/lib' 'CPPFLAGS=-DLIBICONV_P Mar 1 12:33:35 srv named[92074]: ---------------------------------------------------- Mar 1 12:33:35 srv named[92074]: BIND 9 is maintained by Internet Systems Consortium, Mar 1 12:33:35 srv named[92074]: Inc. (ISC), a non-profit 501(c)(3) public-benefit Mar 1 12:33:35 srv named[92074]: corporation. Support and training for BIND 9 are Mar 1 12:33:35 srv named[92074]: available at https://www.isc.org/support Mar 1 12:33:35 srv named[92074]: ---------------------------------------------------- Mar 1 12:33:35 srv named[92074]: command channel listening on 127.0.0.1#953 Mar 1 12:33:35 srv named[92074]: command channel listening on 192.168.1.4#953 [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# tail /var/log/named/named.log [enter] . zone_settimer: zone 100.51.198.IN-ADDR.ARPA/IN: enter zone_timer: zone id.server/CH: enter zone_maintenance: zone id.server/CH: enter zone_settimer: zone id.server/CH: enter [root@server /usr/home/user]#\n\nReload Config\n\nReload configuration file and zones after manual updates with:\n\n[root@server /usr/home/user]# rndc reload [enter] server reload successful [root@server /usr/home/user]#\n\n…or with:\n\n[root@server /usr/home/user]# service named reload [enter] server reload successful [root@server /usr/home/user]#\n\nHow to use\n\nChecked if the nameserver is working on the server:\n\n[root@server /usr/home/user]# dig @localhost ns.example.net [enter] ; <<>> DiG 9.9.4 <<>> @localhost ns.example.net ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 15863 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0 ;; QUESTION SECTION: ;ns1.example.net. IN A ;; AUTHORITY SECTION: example.net. 3600 IN SOA server.example.net. admin.server.example.net. 247 10800 3600 604800 86400 ;; Query time: 0 msec ;; SERVER: 192.168.1.4#53(192.168.1.4) ;; WHEN: Mon Aug 8 23:52:15 2011 ;; MSG SIZE rcvd: 91 [root@server /usr/home/user]#\n\nYou can try to dig for google.com to make sure all is good with your DNS server:\n\n[root@server /usr/home/user]# dig @localhost google.com [enter] ; <<>> DiG 9.9.4 <<>> @localhost google.com ; (2 servers found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 4584 ;; flags: qr rd ra; QUERY: 1, ANSWER: 11, AUTHORITY: 13, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;google.com. IN A ;; ANSWER SECTION: google.com. 300 IN A 173.194.32.36 google.com. 300 IN A 173.194.32.33 google.com. 300 IN A 173.194.32.32 google.com. 300 IN A 173.194.32.41 google.com. 300 IN A 173.194.32.39 google.com. 300 IN A 173.194.32.38 google.com. 300 IN A 173.194.32.35 google.com. 300 IN A 173.194.32.46 google.com. 300 IN A 173.194.32.40 google.com. 300 IN A 173.194.32.37 google.com. 300 IN A 173.194.32.34 ;; AUTHORITY SECTION: . 510352 IN NS f.root-servers.net. . 510352 IN NS e.root-servers.net. . 510352 IN NS k.root-servers.net. . 510352 IN NS b.root-servers.net. . 510352 IN NS j.root-servers.net. . 510352 IN NS l.root-servers.net. . 510352 IN NS m.root-servers.net. . 510352 IN NS a.root-servers.net. . 510352 IN NS h.root-servers.net. . 510352 IN NS i.root-servers.net. . 510352 IN NS g.root-servers.net. . 510352 IN NS d.root-servers.net. . 510352 IN NS c.root-servers.net. ;; Query time: 48 msec ;; SERVER: 127.0.0.1#53(127.0.0.1) ;; WHEN: Sun Dec 15 23:10:43 CET 2013 ;; MSG SIZE rcvd: 426 [root@server /usr/home/user]#\n\nManual dynamic DNS update\n\nA dynamic DNS update can be performed with the nsupdate tool. The nsupdate tool requires that you have a valid key-file, /usr/local/etc/namedb/rndc.key that matches the key in file /usr/local/etc/namedb/named.conf.\n\nIn this example a new A record will be added for myhost.example.net with IP address 192.168.1.248:\n\n[root@server /usr/home/user]# nsupdate -k /usr/local/etc/namedb/rndc.key [enter] > update add myhost.example.net 3600 A 192.168.1.248 [enter] > send [enter] > [ctrl][D][root@server /usr/home/user]#\n\nVerify the add of host myhost.example.net with:\n\n[root@server /usr/home/user]# host myhost.example.net [enter] myhost.example.net has address 192.168.1.248 [root@server /usr/home/user]#\n\nRemove the A record entry for myhost.example.net so it doesn’t cause problems later with:\n\n[root@server /usr/home/user]# nsupdate -k /usr/local/etc/namedb/rndc.key [enter] > update delete myhost.example.net [enter] > send [enter] > [ctrl][D][root@server /usr/home/user]#\n\nVerify the delete of host myhost.example.net with:\n\n[root@server /usr/home/user]# host myhost.example.net [enter] Host myhost.example.net not found: 3(NXDOMAIN) [root@server /usr/home/user]#\n\nDescription\n\nA secure, effective and simple way of getting mail off a system to your mail hub. It does not include a mail spool to poke around in, and no daemons running in the background. Mail is simply forwarded to the configured mailhost. Extremely easy configuration.\n\nWARNING: the above is all it does; it does not receive mail, expand aliases or manage a queue. That belongs on a mail hub with a system administrator.\n\nWWW: http://packages.debian.org/stable/mail/ssmtp.\n\nPreparation for Installation\n\nStart PuTTY on a Windows PC, Terminal on a Mac or similar terminal application on a Linux PC.\n\nIn this example Terminal on a Mac is used.\n\nOpen a remote SSH session to the server with:\n\nMac:~ user$ ssh user@192.168.1.4 [enter]\n\nN.B.: Replace user@192.168.1.4 with User ID and IP Address on Your server!\n\n[user@server ~]$\n\nEnable superuser privileges with:\n\n[user@server ~]$ sudo -s [enter] Password: <-- passwd [enter] [root@server /usr/home/user]#\n\nN.B.: Enter user password, not the root password!\n\nInstallation\n\nInstall sSMTP with;\n\n[root@server /usr/home/user]# pkg install ssmtp [enter] Updating FreeBSD repository catalogue... FreeBSD repository is up to date. All repositories are up to date. The following 1 package(s) will be affected (of 0 checked): New packages to be INSTALLED: ssmtp: 2.64_2 Number of packages to be installed: 1 19 KiB to be downloaded. Proceed with this action? [y/N]: y [enter] [1/1] Fetching ssmtp-2.64_2.txz: 100% 19 KiB 19.8kB/s 00:01 Checking integrity... done (0 conflicting) [1/1] Installing ssmtp-2.64_2... ===> Creating groups. Creating group 'ssmtp' with gid '916'. Extracting ssmtp-2.64_2: 100% Message from ssmtp-2.64_2: sSMTP has been installed successfully. To replace sendmail with ssmtp type \"make replace\" or change your /etc/mail/mailer.conf to: sendmail /usr/local/sbin/ssmtp send-mail /usr/local/sbin/ssmtp mailq /usr/local/sbin/ssmtp newaliases /usr/local/sbin/ssmtp hoststat /usr/bin/true purgestat /usr/bin/true However, before you can use the program, you should copy the files \"revaliases.sample\" and \"ssmtp.conf.sample\" in /usr/local/etc/ssmtp to \"revaliases\" and \"ssmtp.conf\" respectively and edit them to suit your needs. [root@server /usr/home/user]#\n\nConfiguration\n\nStop the Sendmail daemon if it is running:\n\n[root@server /usr/home/user]# service sendmail stop [enter] Stopping sendmail. Waiting for PIDS: 739. Stopping sendmail_msp_queue. Waiting for PIDS: 742. [root@server /usr/home/user]#\n\nTo disable sendmail on system boot, add information to /etc/rc.conf with this commands:\n\n[root@server /usr/home/user]# echo '' >> /etc/rc.conf; echo '# Disable Sendmail' >> /etc/rc.conf; echo 'sendmail_enable=\"NONE\"' >> /etc/rc.conf [root@server /usr/home/user]#\n\nEdit file /etc/mail/mailer.conf with\n\n[root@server /usr/home/user]# ee /etc/mail/mailer.conf [enter]\n\nIt should look like this:\n\n# # Use \"ssmtp\" for sending mail # sendmail /usr/local/sbin/ssmtp send-mail /usr/local/sbin/ssmtp mailq /usr/libexec/sendmail/sendmail newaliases /usr/libexec/sendmail/sendmail hoststat /usr/libexec/sendmail/sendmail purgestat /usr/libexec/sendmail/sendmail\n\nThe command sendmail will invoke the ssmtp executable. But you have not told sSMTP which SMTP server to use with which credentials. These settings are looked for in the sSMTP configuration files /usr/local/etc/ssmtp/revaliases and /usr/local/etc/ssmtp/ssmtp.conf.\n\nCopy the sample file /usr/local/etc/revaliases.sample to /usr/local/etc/revaliases with:\n\n[root@server /usr/home/user]# cp /usr/local/etc/ssmtp/revaliases.sample /usr/local/etc/ssmtp/revaliases [enter]\n\n…and edit appropriately with this command:\n\n[root@server /usr/home/user]# ee /usr/local/etc/ssmtp/revaliases [enter]\n\nExample:\n\n# sSMTP aliases # # Format: local_account:outgoing_address:mailhub # # Example: root:your_login@your.domain:mailhub.your.domain[:port] # where [:port] is an optional port number that defaults to 25. root:your.mail@example.net:mail.example.net postmaster:your.mail@example.net:mail.example.net\n\nCreate an ssmtp user with:\n\n[root@server /usr/home/user]# pw useradd ssmtp -g ssmtp -h - -s /usr/sbin/nologin -d /nonexistent -c \"sSMTP pseudo-user\" [enter] [root@server /usr/home/user]#\n\nThis will add the ssmtp user in the ssmtp group, disallowing password-based logins (-h).\n\nSet the correct owner and permissions on the sSMTP configuration directory. We set the setuid bit (see chmod(1) to make sure new files in the directory will be owned by the user ssmtp as well:\n\n[root@server /usr/home/user]# chown -R ssmtp:wheel /usr/local/etc/ssmtp/; chmod 4750 /usr/local/etc/ssmtp [enter] [root@server /usr/home/user]#\n\nNow the configuration file is set up and protected from unauthorized eyes, the ssmtp executable should be given access to the file. To accomplish this, we will let it run as the ssmtp user.\n\nMake the ssmtp executable owned by the ssmtp user:\n\n[root@server /usr/home/user]# chown ssmtp:nogroup /usr/local/sbin/ssmtp; chmod 4555 /usr/local/sbin/ssmtp [enter] [root@server /usr/home/user]#\n\nCopy the sample file /usr/local/etc/smartd.conf.sample to /usr/local/etc/smartd.conf with:\n\n[root@server /usr/home/user]# cp /usr/local/etc/ssmtp/ssmtp.conf.sample /usr/local/etc/ssmtp/ssmtp.conf [enter]\n\n…and edit appropriately with this command:\n\n[root@server /usr/home/user]# ee /usr/local/etc/ssmtp/ssmtp.conf [enter]\n\nExample:\n\n# # /etc/ssmtp.conf -- a config file for sSMTP sendmail. # # The person who gets all mail for userids < 1000 # Make this empty to disable rewriting. root=your.mail@example.net # The place where the mail goes. The actual machine name is required # no MX records are consulted. Commonly mailhosts are named mail.domain.com # The example will fit if you are in domain.com and your mailhub is so named. mailhub=mail.example.net:465 # Example for SMTP port number 2525 # mailhub=mail.your.domain:2525 # Example for SMTP port number 25 (Standard/RFC) # mailhub=mail.your.domain # Example for SSL encrypted connection # mailhub=mail.your.domain:465 # Where will the mail seem to come from? rewriteDomain=example.net # The full hostname hostname=server.example.net # Set this to never rewrite the \"From:\" line (unless not given) and to # use that address in the \"from line\" of the envelope. FromLineOverride=YES # Use SSL/TLS to send secure messages to server. UseTLS=YES # Use SSL/TLS certificate to authenticate against smtp host. #UseTLSCert=YES # Use this RSA certificate. #TLSCert=/usr/local/etc/ssmtp/ssmtp.pem # Get enhanced (*really* enhanced) debugging information in the logs # If you want to have debugging of the config file parsing, move this option # to the top of the config file and uncomment #Debug=YES # Username/Password AuthUser=username AuthPass=password\n\nEdit file /etc/crontab with:\n\n[root@server /usr/home/user]# ee /etc/crontab [enter]\n\nAdd the following two lines (example):\n\n# /etc/crontab - root's crontab for FreeBSD # # $FreeBSD: src/etc/crontab,v 1.33.2.1.4.1 2010/06/14 02:09:06 kensmith Exp $ # SHELL=/bin/sh PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin HOME=/var/log MAILTO=\"your.mail@example.net\" # .\n\nRun some tests as an unprivileged user – user should not a member of groupe ssmtp – with:\n\n[user@server ~]$ cat /usr/local/etc/ssmtp/ssmtp.conf [enter] cat: /usr/local/etc/ssmtp/ssmtp.conf: Permission denied [user@server ~]$\n\nTest your mail settings with this two examples:\n\nCreate a textfile with the message that you are going to send with:\n\n[user@server ~]$ ee ~/ssmtp-test.txt [enter]\n\nExample Test Message:\n\nTo: youre.mail@example.net From: youre.mail@example.net Subject: Test message via sSMTP This is a test message sent via sSMTP\n\nRun this two command to send the testmessage:\n\n[user@server ~]$ ssmtp -v youre.mail@example.net < ~/ssmtp-test.txt [enter] [<-] 220 smtpout.example.net cmsmtp ESMTP server ready [->] EHLO server.example.net [<-] 250 OK [->] AUTH LOGIN [<-] 334 VXNlcm5hbWU6 [->] dTMxNTE0NDE1 [<-] 334 UGFzc3dvcmQ6 [<-] 235 2.7.0 ... authentication succeeded [->] MAIL FROM:<youre.mail@example.net> [<-] 250 2.1.0 <youre.mail@example.net> sender ok [->] RCPT TO:<youre.mail@example.net> [<-] 250 2.1.5 <youre.mail@example.net> recipient ok [->] DATA [<-] 354 OK [->] Received: by server.example.net (sSMTP sendmail emulation); Wed, 06 Jan 2016 13:09:02 +0100 [->] Date: Wed, 06 Jan 2016 13:09:02 +0100 [->] To: youre.mail@example.net [->] From: youre.mail@example.net [->] Subject: Test message [->] [->] This is a test meesage sent via sSMTP [->] . [<-] 250 2.0.0 Gmt................U9X mail accepted for delivery [->] QUIT [<-] 221 2.0.0 smtpout.example.net cmsmtp closing connection [user@server ~]$\n\nN.B.: Mail transfer output to the terminal has been edited for security reasons!\n\n[user@server ~]$ sendmail your.mail@example.net < ~/ssmtp-test.txt [enter] [user@server ~]$\n\n[root@user ~]# mail -s \"Testing sSMTP\" your.address@example.net [enter] This is a test with sSMTP [enter]\n\nType <Ctr><D> on a blank line to send message.\n\n[root@user ~]$\n\nChange user to root and heck error log with:\n\n[root@server /usr/home/user]# tail /var/log/maillog [enter] Jan 6 13:00:00 server newsyslog[1427]: logfile first created Jan 6 13:09:02 server sSMTP[8552]: Creating SSL connection to host Jan 6 13:09:03 server sSMTP[8552]: SSL connection using DHE-RSA-AES256-GCM-SHA384 Jan 6 13:09:04 server sSMTP[8552]: Sent mail for your.mail@example.net (221 2.0.0 smtpout.example.net cmsmtp closing connection) uid=1000 username=user outbytes=404 Jan 6 13:24:48 server sSMTP[8735]: Creating SSL connection to host Jan 6 13:24:48 server sSMTP[8735]: SSL connection using DHE-RSA-AES256-GCM-SHA384 Jan 6 13:24:49 server sSMTP[8735]: Sent mail for your.mail@example.net (221 2.0.0 smtpout.example.net cmsmtp closing connection) uid=1000 username=user outbytes=404 Jan 6 13:25:12 server sSMTP[8740]: Creating SSL connection to host Jan 6 13:25:12 server sSMTP[8740]: SSL connection using DHE-RSA-AES256-GCM-SHA384 Jan 6 13:25:14 server sSMTP[8740]: Sent mail for your.mail@example.net (221 2.0.0 smtpout.example.net cmsmtp closing connection) uid=1000 username=user outbytes=404 [root@server /usr/home/user]#\n\nAdditional Reading\n\nSecureSSMTP\n\nFreeBSD: Use Gmail For Outgoing Mail\n\nFreeBSD: Send mails over an external SMTP server\n\nDescription\n\nrsync is an open source utility that provides fast incremental file transfer. rsync is freely available under the GNU General Public License and is currently being maintained by Wayne Davison.\n\nWWW: http://rsync.samba.org/\n\nPreparation for Installation\n\nStart PuTTY on a Windows PC, Terminal on a Mac or similar terminal application on a Linux PC.\n\nIn this example Terminal on a Mac is used.\n\nOpen a remote SSH session to the server with:\n\nMac:~ user$ ssh user@192.168.1.4 [enter]\n\nN.B.: Replace user@192.168.1.4 with User ID and IP Address on Your server!\n\n[user@server ~]$\n\nEnable superuser privileges with:\n\n[user@server ~]$ sudo -s [enter] Password: <-- passwd [enter] [root@server /usr/home/user]#\n\nN.B.: Enter user password, not the root password!\n\nInstallation\n\nInstall the rsync port with:\n\n[root@server /usr/home/user]# pkg install net/rsync [enter] Updating FreeBSD repository catalogue... FreeBSD repository is up to date. All repositories are up to date. The following 1 package(s) will be affected (of 0 checked): New packages to be INSTALLED: rsync: 3.1.2_7 Number of packages to be installed: 1 298 KiB to be downloaded. Proceed with this action? [y/N]: y [enter] [1/1] Fetching rsync-3.1.2_7.txz: 100% 298 KiB 305.3kB/s 00:01 Checking integrity... done (0 conflicting) [1/1] Installing rsync-3.1.2_7... Extracting rsync-3.1.2_7: 100% [root@server /usr/home/user]#\n\nConfiguration\n\nList installed services with:\n\n[root@server /usr/home/user]# service -r | grep rsync [enter] /usr/local/etc/rc.d/rsyncd [root@server /usr/home/user]#\n\nFind the rcvar for /etc/rc.conf:\n\n[root@server /usr/home/user]# /usr/local/etc/rc.d/rsyncd rcvar [enter] # rsyncd # rsyncd_enable=\"NO\" # (default: \"\") [root@server /usr/home/user]#\n\nTo start rsync automatically on system boot with –ipv4 as the prefered option add information to /etc/rc.conf with this commands:\n\n[root@server /usr/home/user]# echo '' >> /etc/rc.conf; echo '# rsync using IPv4' >> /etc/rc.conf; echo 'rsyncd_enable=\"YES\"' >> /etc/rc.conf; echo 'rsyncd_flags=\"--ipv4\"' >> /etc/rc.conf [enter] [root@server /usr/home/user]#\n\nIf you run rsyncd manually and your server only uses IPv4, then make sure you add the “–ipv4” argument to the manual start command_args with:\n\n[root@server /usr/home/user]# perl -pi -e 's/--daemon/--ipv4 --daemon/g' /usr/local/etc/rc.d/rsyncd [enter] [root@server /usr/home/user]#\n\nCreate a logfile with:\n\n[root@server /usr/home/user]# touch /var/log/rsyncd.log [enter] [root@server /usr/home/user]#\n\nAutomatically rotate /var/log/rsyncd.log log file with:\n\n[root@server /usr/home/user]# echo '/var/log/rsyncd.log 600 9 100000 * Z' >> /etc/newsyslog.conf [enter] [root@server /usr/home/user]#\n\nCreate the rsync Secret File with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/rsync/rsyncd.secrets [enter]\n\nAdd the following text, example:\n\ntridge:passwd1 susan:passwd2\n\nMake file /usr/local/etc/rsync/rsyncd.secrets non-world readable with:\n\n[root@server /usr/home/user]# chmod 440 /usr/local/etc/rsync/rsyncd.secrets [enter] [root@server /usr/home/user]#\n\n…and then set owner and group with:\n\n[root@server /usr/home/user]# chown root:wheel /usr/local/etc/rsync/rsyncd.secrets [enter] [root@server /usr/home/user]#\n\nCreate group rsync and user rsync with:\n\n[root@server /usr/home/user]# pw group add -n rsync -g 4002; pw user add -n rsync -u 4002 -c \"rsync daemon\" -d /nonexistent -s /usr/sbin/nologin [enter] [root@server /usr/home/user]#\n\nThe rsync group is added to /etc/group and should look similar to the following:\n\n[root@server /usr/home/user]# grep rsync /etc/group [enter] rsync:*:4002: [root@server /usr/home/user]#\n\nThe rsync user is added to /etc/passwd and should look similar to the following:\n\n[root@server /usr/home/user]# grep rsync /etc/passwd [enter] rsync:*:4002:4002:rsync daemon:/nonexistent:/usr/sbin/nologin [root@server /usr/home/user]#\n\nEdit file /usr/local/etc/rsync/rsyncd.conf with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/rsync/rsyncd.conf [enter]\n\nExample:\n\n# rsyncd.conf - Example file, see rsyncd.conf(5) # # Set this if you want to stop rsync daemon with rc.d scripts pid file = /var/run/rsyncd.pid # Edit this file before running rsync daemon!! #uid = rsync #gid = rsync #use chroot = no #max connections = 4 #syslog facility = local5 #[ftp] # path = /var/ftp/pub # comment = whole ftp area (approx 6.1 GB) #[sambaftp] # path = /var/ftp/pub/samba # comment = Samba ftp area (approx 300 MB) #[rsyncftp] # path = /var/ftp/pub/rsync # comment = rsync ftp area (approx 6 MB) #[sambawww] # path = /public_html/samba # comment = Samba WWW pages (approx 240 MB) #[cvs] # path = /data/cvs # comment = CVS repository (requires authentication) # auth users = tridge, susan # secrets file = /usr/local/etc/rsync/rsyncd.secrets\n\nManually Start\n\nManualy start the rsyncd with:\n\n[root@server /usr/home/user]# service rsyncd start [enter] Starting rsyncd. [root@server /usr/home/user]#\n\nView rsyncd status with:\n\n[root@server /usr/home/user]# service rsyncd status [enter] rsyncd is running as pid 902. [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# ps aux | grep rsync [enter] root 3527 0.0 0.0 12808 2448 - Ss 10:36PM 0:00.00 /usr/local/bin/rsync --ipv4 --ipv4 --daemon --config /usr/local/etc/ root 3535 0.0 0.0 18824 2332 0 S+ 10:37PM 0:00.00 grep rsync [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# sockstat | grep rsync [enter] root rsync 3527 3 dgram -> /var/run/logpriv root rsync 3527 4 tcp4 *:873 *:* [root@server /usr/home/user]#\n\nVerify that you can connect to the daemon with:\n\n[root@server /usr/home/user]# telnet localhost 873 [enter] Trying 127.0.0.1... Connected to localhost. Escape character is '^]'. @RSYNCD: 30.0 [root@server /usr/home/user]#\n\nrsync Client Setup\n\nN.B.: You may have to install rsync on the client as well!\n\nCreate a password file for user user with:\n\n[root@server /usr/home/user]# echo \"passwd\" > /usr/local/etc/rsyncd.passwd_user [enter] [root@server /usr/home/user]#\n\nNote: Echo password ONLY! Do NOT echo username!\n\nMake file /usr/local/etc/rsyncd.passwd_user non-world readable with:\n\n[root@server /usr/home/user]# chmod 440 /usr/local/etc/rsyncd.passwd_user [enter] [root@server /usr/home/user]#\n\nSet owner and group with:\n\n[root@server /usr/home/user]# chown root:wheel /usr/local/etc/rsyncd.passwd_user [enter] [root@server /usr/home/user]#\n\nHowto use\n\nYou use rsync in the same way you use rcp. You must specify a source and a destination, one of which may be remote.\n\nThis is a syntax example for a manual file transfer from a remote host:\n\n[root@server /usr/home/user]# rsync -avz --delete --stats --safe-links --password-file=/usr/local/etc/rsyncd.passwd_user user@192.168.1.100::ftp /var/ftp/pub/ [enter]\n\nThis is a syntax example for a manual file transfer to a remote host:\n\n[root@server /usr/home/user]# rsync -avz --delete --stats --safe-links --password-file=/usr/local/etc/rsyncd.passwd_user /var/ftp/pub/ user@192.168.1.100::ftp [enter]\n\nrsync can execute commands on the remote computer to generate a list of files to copy. The shell command is expanded by the remote shell before rsync is called.\n\nThe following command will run a find command on the remote host in directory ‘/tmp/test’ and rsync all “txt” files it finds to directory ‘/temp/test/’ on the local host:\n\n[root@server /usr/home/user]# rsync -avR ssh user@remotehost:'`find /tmp/test -name \"*.[txt]\"`' /tmp/test/ [enter]\n\nrsync to Remote Server without Password\n\nNo-password authentication works because of public key crypto. Let’s say you have a local machine server and a remote machine remote. You want to be able to ssh from server to remote without having to enter your password.\n\nThe server remote in this document is the server that has files that is to be transferred to the local server server.\n\nThe server server in this document is the local server that will receive files from the remote server remote.\n\nFirst step is to prepare the remote server remote by generate a public/private RSA key pair.\n\nNext, we generate a public/private RSA key pair on on the local server, server and then we send the public key to the remote server, remote, so that remote knows that the server key belongs to a list of authorized keys. Then when we try to ssh from server to remote, RSA authentication is performed automatically.\n\nOn the Remote Server remote:\n\nGenerate keys on the remote server, remote as the user that will be connect to from the local server server:\n\n[user@remote ~]$ ssh-keygen -t dsa -f ~/.ssh/id_dsa [enter]\n\nNOTE: When prompted for a password, do NOT enter one, just press [enter]!\n\nGenerating public/private dsa key pair. Enter file in which to save the key (/home/user/.ssh/id_dsa): Enter passphrase (empty for no passphrase): [enter] Enter same passphrase again: [enter] Your identification has been saved in /home/user/.ssh/id_dsa. Your public key has been saved in /home/user/.ssh/id_dsa.pub. The key fingerprint is: ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff user@remote.example.net The key's randomart image is: +--[ DSA 1024]----+ |.B+o . | |.+= + . | |o... . | |.... | | . .... S | | .o+o . . | | E += | | ..o | | . | +-----------------+ [user@remote ~]$\n\nThis will create folder /usr/home/.ssh if it do not exist, generate a password-less key /usr/home/.ssh/id_dsa, and a public key /usr/home/.ssh/id_dsa.pub.\n\nOn the Local Server server:\n\nGenerate keys on the local server, server as the user that will perform the ssh connection to the remote server:\n\n[user@server ~]$ ssh-keygen -t dsa -f ~/.ssh/id_dsa [enter]\n\nNOTE: When prompted for a password, do NOT enter one, just press [enter]!\n\nGenerating public/private dsa key pair. Enter file in which to save the key (/home/user/.ssh/id_dsa): Enter passphrase (empty for no passphrase): [enter] Enter same passphrase again: [enter] Your identification has been saved in /home/user/.ssh/id_dsa. Your public key has been saved in /home/user/.ssh/id_dsa.pub. The key fingerprint is: ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff user@server.example.net The key's randomart image is: +--[ DSA 1024]----+ |.B+o . | |.+= + . | |o... . | |.... | | . .... S | | .o+o . . | | E += | | ..o | | . | +-----------------+ [user@server ~]$\n\nThis will create folder /usr/home/.ssh if it do not exist, generate a password-less key /usr/home/.ssh/id_dsa, and a public key /usr/home/.ssh/id_dsa.pub.\n\nCopy the id_dsa.pub key over to the remote server, remote:\n\n[user@server ~]$ scp ~/.ssh/id_dsa.pub user@remote.example.net:~/.ssh/server.pub [enter] The authenticity of host 'remote.example.net (192.168.1.3)' can't be established. DSA key fingerprint is ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff. Are you sure you want to continue connecting (yes/no)? yes [enter] Warning: Permanently added 'remote.example.net' (DSA) to the list of known hosts. Password: ******* [enter] id_dsa.pub 100% 622 0.6KB/s 00:00 [user@server ~]$\n\nNext, log in to remote server, remote, as the user that will perform the ssh connections:\n\n[user@server ~]$ ssh user@remote.example.net Password: ******* [enter] Last login: Thu May 22 20:47:16 2009 from server.example.net Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994 The Regents of the University of California. All rights reserved. Welcome to remote.example.net/192.168.1.nn Running FreeBSD 11.0-RELEASE! [user@remote ~]$\n\nAdd the public key from server to the list of authorized keys on remote with:\n\n[user@remote ~]$ cat ~/.ssh/server.pub >> ~/.ssh/authorized_keys [enter] [user@remote ~]$\n\n..and to protect the file ‘authorized_keys file from beeng changed do:\n\n[user@remote ~]$ chmod 640 ~/.ssh/authorized_keys [enter] [user@remote ~]$\n\nDelete the transferd key file with:\n\n[user@remote ~]$ rm -f ~/.ssh/server.pub [enter] [user@remote ~]$\n\nAt this point the remote server remote should accept a password-less login from local server server by the user user.\n\nIf the ssh connection is to be performed as user root the following extra configuration must be performed to permit root to login:\n\n[root@server ~]$ su - [enter] Password: ****** [enter] [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# ee /etc/ssh/sshd_config [enter]\n\nGo to line 45:\n\n# Authentication: #LoginGraceTime 2m #PermitRootLogin no #StrictModes yes #MaxAuthTries 6\n\n…and edit line 45 to look like this:\n\n# Authentication: #LoginGraceTime 2m PermitRootLogin yes #StrictModes yes #MaxAuthTries 6\n\nSave file /etc/sshd_config and exit to local server server with:\n\n[root@server /usr/home/user]# exit [enter] logout [techpc@remote ~]$ exit [enter] Connection to remote.example.net closed. [user@server ~]$\n\nTo verify that the password-less ssh login to the remote server remote from the local server, server, works:\n\n[user@server ~]$ ssh user@remote.example.net\n\n…should – without any password request – result in somthing like this example:\n\nLast login: Sat Feb 19 16:32:09 2011 from 192.168.1.101 Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994 The Regents of the University of California. All rights reserved. FreeBSD 11.0-RELEASE (GENERIC) #0: Mon Jul 19 02:36:49 UTC 2010 Welcome to remote.example.net running FreeBSD 8.1-RELEASE! [user@remote ~]$\n\nWe have successfully logged on to remote!\n\nIssue the following command to log out from remote server remote:\n\n[user@remote ~]$ exit [enter] Connection to remote.example.net closed. [user@server ~]$\n\nTo backup directory /srv/test on remote server remote to local server server issue the following command, example:\n\n[user@server ~]$ /usr/local/bin/rsync -aquz -e \"ssh -l user\" remote.example.net:/srv/test/ /srv/test/\n\nrsync – synchronizing two file trees\n\nThis section describes how to use rsync to synchronize file trees on two servers.\n\nRemote Server Setup\n\nIn this example, we’re going to be using a remote rsync server containing the file tree that we like to syncronize with.\n\nOn the remote server edit file /usr/local/etc/rsyncd.conf with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/rsyncd.conf [enter]\n\nEdit file, example:\n\n# # rsyncd.conf # uid = nobody gid = nobody use chroot = yes max connections = 4 syslog facility = local5 pid file = /var/run/rsyncd.pid [example] path = /srv/example/ comment = all of the example auth users = tridge, susan secrets file = /usr/local/etc/rsyncd.secrets\n\nMake /usr/local/etc/rsyncd.conf non-world readable with:\n\n[root@server /usr/home/user]# chmod 640 /usr/local/etc/rsyncd.conf [enter] [root@server /usr/home/user]#\n\nOn the remote server create file /usr/local/etc/rsyncd.secrets with:\n\n[root@server /usr/home/user]# ee /usr/local/etc/rsyncd.secrets [enter]\n\nEdit file, example:\n\n# # rsyncd.secrets # tridge:mypass susan:herpass\n\nMake /usr/local/etc/rsyncd.secrets non-world readable with:\n\n[root@server /usr/home/user]# chmod 640 /usr/local/etc/rsyncd.secrets [enter] [root@server /usr/home/user]#\n\nLocal Server Setup\n\nrsync should have been installed on the local server too.\n\nManually synchronize files using ssh with:\n\n[root@server /usr/home/user]# rsync -e ssh -avz --delete susan@remote.example.net:example /srv/example [enter] Password: ****** [enter] receiving file list ... done [root@server /usr/home/user]#\n\nAdditional Reading\n\nBackup FreeNAS Files Remotely Using FreeBSD and rsync\n\nDescription\n\nphpMyAdmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. phpMyAdmin supports a wide range of operations on MySQL and MariaDB. Frequently used operations (managing databases, tables, columns, relations, indexes, users, permissions, etc) can be performed via the user interface, while you still have the ability to directly execute any SQL statement.\n\nWWW: http://www.phpmyadmin.net.\n\nRequirentments\n\nThe following applications must be installed, configured and running before installation of phpMyAdmin:\n\nApache HTTP Server\n\nPHP (v. 7.0)\n\nGNUwget\n\nGnuPG – The GNU Privacy Guard (modern version)\n\nPreparation for Installation\n\nStart PuTTY on a Windows PC, Terminal on a Mac or similar terminal application on a Linux PC.\n\nIn this example Terminal on a Mac is used.\n\nOpen a remote SSH session to the server with:\n\nMac:~ user$ ssh user@192.168.1.4 [enter]\n\nN.B.: Replace user@192.168.1.4 with User ID and IP Address on Your server!\n\n[user@server ~]$\n\nEnable superuser privileges with:\n\n[user@server ~]$ sudo -s [enter] Password: <-- passwd [enter] [root@server /usr/home/user]#\n\nN.B.: Enter user password, not the root password!\n\nWarning!\n\nN.B.: Do NOT install phpMyAdmin from port if the PHP version installed is > 5.6!\n\nVerify version of PHP installed with:\n\n[root@server /usr/home/user]# php -v [enter] PHP 7.0.15 (cli) (built: Jan 24 2017 01:18:59) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies with Zend OPcache v7.0.15, Copyright (c) 1999-2017, by Zend Technologies [root@server /usr/home/user]#\n\nIn this example PHP version 7.0 is installed. Due to this phpMyAdmin will be downloaded from the phpMyAdmin site.\n\nDownload and Verification\n\n[root@server /usr/home/user]# wget https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip [enter] Resolving files.phpmyadmin.net (files.phpmyadmin.net)... 185.59.222.19 Connecting to files.phpmyadmin.net (files.phpmyadmin.net)|185.59.222.19|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 11349727 (11M) [application/zip] Saving to: ‘phpMyAdmin-4.6.6-all-languages.zip’ phpMyAdmin-4.6.6-al 100%[===================>] 10,82M 2,62MB/s in 4,3s 2017-02-22 00:00:00 (2,55 MB/s) - ‘phpMyAdmin-4.6.6-all-languages.zip’ saved [11349727/11349727] [root@server /usr/home/user]#\n\n[root@server /usr/home/user]# wget https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip.asc [enter] --2017-02-22 12:12:36-- https://files.phpmyadmin.net/phpMyAdmin/4.6.6/phpMyAdmin-4.6.6-all-languages.zip.asc Resolving files.phpmyadmin.net (files.phpmyadmin.net)... 185.76.9.11 Connecting to files.phpmyadmin.net (files.phpmyadmin.net)|185.76.9.11|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 819 [application/octet-stream] Saving to: ‘phpMyAdmin-4.6.6-all-languages.zip.asc’ phpMyAdmin-4.6.6-al 100%[===================>] 819 --.-KB/s in 0s 2017-02-22 00:00:00 (61,9 MB/s) - ‘phpMyAdmin-4.6.6-all-languages.zip.asc’ saved [819/819] [root@server /usr/home/user]#\n\nDownload the keyring from the phpMyAdmin download server with:\n\n[root@server /usr/home/user]# wget https://files.phpmyadmin.net/phpmyadmin.keyring [enter] --2017-02-22 12:49:01-- https://files.phpmyadmin.net/phpmyadmin.keyring Resolving files.phpmyadmin.net (files.phpmyadmin.net)... 185.76.9.11 Connecting to files.phpmyadmin.net (files.phpmyadmin.net)|185.76.9.11|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 34198 (33K) [application/octet-stream] Saving to: ‘phpmyadmin.keyring’ phpmyadmin.keyring 100%[===================>] 33,40K --.-KB/s in 0,006s 2017-02-22 00:00:00 (5,27 MB/s) - ‘phpmyadmin.keyring’ saved [34198/34198] [root@server /usr/home/user]#\n\n…and then import the keyring data with:\n\n[root@server /usr/home/user]# gpg --import phpmyadmin.keyring [enter] gpg: /root/.gnupg/trustdb.gpg: trustdb created gpg: key 9C27B31342B7511D: public key \"Michal Čihař <michal@cihar.com>\" imported gpg: key FEFC65D181AF644A: public key \"Marc Delisle <marc@infomarc.info>\" imported gpg: key CE752F178259BD92: public key \"Isaac Bennetch <bennetch@gmail.com>\" imported gpg: key DA68AB39218AB947: public key \"phpMyAdmin Security Team <security@phpmyadmin.net>\" imported gpg: Total number processed: 4 gpg: imported: 4 [root@server /usr/home/user]#\n\nN.B.: Verify the public keys corresponds with the information publiced the phpMyAdmin web site: Verifying phpMyAdmin releases.\n\n[root@server /usr/home/user]# gpg --verify phpMyAdmin-4.6.6-all-languages.zip.asc [enter] gpg: assuming signed data in 'phpMyAdmin-4.6.6-all-languages.zip' gpg: Signature made Mon 23 Jan 20:22:46 2017 CET gpg: using RSA key CE752F178259BD92 gpg: Good signature from \"Isaac Bennetch <bennetch@gmail.com>\" [unknown] gpg: aka \"Isaac Bennetch <isaac@bennetch.org>\" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3D06 A59E CE73 0EB7 1B51 1C17 CE75 2F17 8259 BD92 [root@server /usr/home/user]#\n\nBeginning in January 2016, the release manager for phpMyAdmin is Isaac Bennetch. His RSA key id is:\n\nCE752F178259BD92\n\n…and his PGP primary key fingerprint is:\n\n3D06 A59E CE73 0EB7 1B51 1C17 CE75 2F17 8259 BD92\n\nYou should verify that the signature matches the archive you have downloaded. This way you can be sure that you are using the same code that was released. You should also verify the date of the signature to make sure that you downloaded the latest version.\n\nInstallation\n\nExtract file phpMyAdmin-4.6.6-all-languages.zip to /usr/local/www/ with:\n\n[root@server /usr/home/user]# unzip phpMyAdmin-4.6.6-all-languages.zip -d /usr/local/www [enter] Archive: phpMyAdmin-4.6.6-all-languages.zip creating: /usr/local/www/phpMyAdmin-4.6.6-all-languages/ extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/CONTRIBUTING.md extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/ChangeLog extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/DCO extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/LICENSE extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/README extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/RELEASE-DATE-4.6.6 . . . extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/url.php extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/user_password.php extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/version_check.php extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/view_create.php extracting: /usr/local/www/phpMyAdmin-4.6.6-all-languages/view_operations.ph | [root@server /usr/home/user]#\n\nDelete file phpMyAdmin-4.6.6-all-languages.zip with:\n\n[root@server /usr/home/user]# rm phpMyAdmin-4.6.6-all-languages.zip [enter] [root@server /usr/home/user]#\n\nRename folder /usr/local/www/phpMyAdmin-4.6.6-all-languages to /usr/local/www/phpMyAdmin with:\n\n[root@server /usr/home/user]# mv /usr/local/www/phpMyAdmin-4.6.6-all-languages /usr/local/www/phpMyAdmin [enter] [root@server /usr/home/user]#\n\nN.B.: Only not installed required PHP shared extension will be installed with the following command!\n\nInstall shared PHP extension required by phpMyAdmin with:\n\n[root@server /usr/home/user]# pkg install php70-session php70-xml php70-bz2 php70-ctype php70-filter php70-zip php70-openssl php70-gd php70-mcrypt php70-mbstring php70-mysqli php70-json php70-zlib [enter] Updating FreeBSD repository catalogue... FreeBSD repository is up-to-date. All repositories are up-to-date. The following 9 package(s) will be affected (of 0 checked): New packages to be INSTALLED: php70-session: 7.0.15 php70-bz2: 7.0.15 php70-ctype: 7.0.15 php70-openssl: 7.0.15 php70-mcrypt: 7.0.15 php70-mbstring: 7.0.15 php70-json: 7.0.15 libltdl: 2.4.6 libmcrypt: 2.5.8_3 Number of packages to be installed: 9 The process will require 5 MiB more space. 988 KiB to be downloaded. Proceed with this action? [y/N]: y [enter] Fetching php70-session-7.0.15.txz: 100% 32 KiB 32.3kB/s 00:01 Fetching php70-bz2-7.0.15.txz: 100% 11 KiB 11.0kB/s 00:01 Fetching php70-ctype-7.0.15.txz: 100% 7 KiB 6.8kB/s 00:01 Fetching php70-openssl-7.0.15.txz: 100% 44 KiB 44.7kB/s 00:01 Fetching php70-mcrypt-7.0.15.txz: 100% 15 KiB 14.9kB/s 00:01 Fetching php70-mbstring-7.0.15.txz: 100% 712 KiB 728.9kB/s 00:01 Fetching php70-json-7.0.15.txz: 100% 19 KiB 19.9kB/s 00:01 Fetching libltdl-2.4.6.txz: 100% 36 KiB 36.6kB/s 00:01 Fetching libmcrypt-2.5.8_3.txz: 100% 114 KiB 116.9kB/s 00:01 Checking integrity... done (0 conflicting) [1/9] Installing libltdl-2.4.6... [1/9] Extracting libltdl-2.4.6: 100% [2/9] Installing libmcrypt-2.5.8_3... [2/9] Extracting libmcrypt-2.5.8_3: 100% [3/9] Installing php70-session-7.0.15... [3/9] Extracting php70-session-7.0.15: 100% [4/9] Installing php70-bz2-7.0.15... [4/9] Extracting php70-bz2-7.0.15: 100% [5/9] Installing php70-ctype-7.0.15... [5/9] Extracting php70-ctype-7.0.15: 100% [6/9] Installing php70-openssl-7.0.15... [6/9] Extracting php70-openssl-7.0.15: 100% [7/9] Installing php70-mcrypt-7.0.15... [7/9] Extracting php70-mcrypt-7.0.15: 100% [8/9] Installing php70-mbstring-7.0.15... [8/9] Extracting php70-mbstring-7.0.15: 100% [9/9] Installing php70-json-7.0.15... [9/9] Extracting php70-json-7.0.15: 100% Message from libmcrypt-2.5.8_3: ===> NOTICE: The libmcrypt port currently does not have a maintainer. As a result, it is more likely to have unresolved issues, not be up-to-date, or even be removed in the future. To volunteer to maintain this port, please create an issue at: https://bugs.freebsd.org/bugzilla More information about port maintainership is available at: https://www.freebsd.org/doc/en/articles/contributing/ports-contributing.html#maintain-port Message from php70-session-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-18-session.ini configuration file to automatically load the installed extension: extension=session.so **************************************************************************** Message from php70-bz2-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-bz2.ini configuration file to automatically load the installed extension: extension=bz2.so **************************************************************************** Message from php70-ctype-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-ctype.ini configuration file to automatically load the installed extension: extension=ctype.so **************************************************************************** Message from php70-openssl-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-openssl.ini configuration file to automatically load the installed extension: extension=openssl.so **************************************************************************** Message from php70-mcrypt-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-mcrypt.ini configuration file to automatically load the installed extension: extension=mcrypt.so **************************************************************************** Message from php70-mbstring-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-mbstring.ini configuration file to automatically load the installed extension: extension=mbstring.so **************************************************************************** Message from php70-json-7.0.15: **************************************************************************** The following line has been added to your /usr/local/etc/php/ext-20-json.ini configuration file to automatically load the installed extension: extension=json.so **************************************************************************** [root@server /usr/home/user]#\n\nConfiguration\n\nChange file owner and group recursively for /usr/local/www/phpMyAdmin with:\n\n[root@server /usr/home/user]# chown -R www:www /usr/local/www/phpMyAdmin [enter] [root@server /usr/home/user]#\n\nTo make phpMyAdmin available on the web site:\n\n[root@server /usr/home/user]# ee /usr/local/etc/apache24/Includes/phpmyadmin.conf [enter]\n\nAdd the following lines;\n\nAlias /phpmyadmin/ \"/usr/local/www/phpMyAdmin/\" <Directory \"/usr/local/www/phpMyAdmin/\"> AllowOverride All Require all granted </Directory>\n\n…the restart the apache24 service with:\n\n[root@server /usr/home/user]# service apache24 restart [enter] Performing sanity check on apache24 configuration: Syntax OK Stopping apache24. Waiting for PIDS: 12555. Performing sanity check on apache24 configuration: Syntax OK Starting apache24. [root@server /usr/home/user]#\n\nN.B.: The phpMyAdmin documentation is stored on your server at: http://www.example.com/phpmyadmin/doc/html/!\n\nStart your browser and go to: http://server.example.net/phpmyadmin/setup/\n\nLogin as the MySQL root user and complete the configured by enabling the phpMyAdmin extended features.\n\nCreate file /usr/local/www/phpMyAdmin/config.inc.php with:\n\n[root@server /usr/home/user]# ee /usr/local/www/phpMyAdmin/config.inc.php [enter]\n\n…and copy the following text – example – that was created for you:\n\n<?php /* * Generated configuration file * Generated by: phpMyAdmin 4.6.6 setup script * Date: Tue, 22 Feb 2017 00:00:00 +0000 */ /* Servers configuration */ $i = 0; /* Server: localhost [1] */ $i++; $cfg['Servers'][$i]['verbose'] = ''; $cfg['Servers'][$i]['host'] = 'localhost'; $cfg['Servers'][$i]['port'] = ''; $cfg['Servers'][$i]['socket'] = ''; $cfg['Servers'][$i]['ssl'] = true; $cfg['Servers'][$i]['connect_type'] = 'tcp'; $cfg['Servers'][$i]['compress'] = true; $cfg['Servers'][$i]['auth_type'] = 'cookie'; $cfg['Servers'][$i]['user'] = 'root'; $cfg['Servers'][$i]['password'] = ''; /* End of servers configuration */ $cfg['blowfish_secret'] = '----------------------------------'; $cfg['DefaultLang'] = 'en'; $cfg['ServerDefault'] = 1; $cfg['UploadDir'] = ''; $cfg['SaveDir'] = ''; ?>"
    }
}