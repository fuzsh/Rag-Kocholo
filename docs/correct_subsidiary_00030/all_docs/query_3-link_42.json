{
    "id": "correct_subsidiary_00030_3",
    "rank": 42,
    "data": {
        "url": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-overview",
        "read_more_link": "",
        "language": "en",
        "title": "Overview - Azure Logic Apps",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-overview/example-enterprise-workflow.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-overview/example-enterprise-workflow.png"
        ],
        "movies": [
            "https://learn-video.azurefd.net/vod/player?show=azure-friday&ep=integrate-your-mainframes-and-midranges-with-azure-logic-apps"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-14T08:00:00+00:00",
        "summary": "",
        "meta_description": "Create and run automated workflows so you can integrate apps, data, services, and systems using little to no code. Run your workflows either in a multitenant or single-tenant environment.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-overview",
        "text": "What is Azure Logic Apps?\n\nAzure Logic Apps is a cloud platform where you can create and run automated workflows with little to no code. By using the visual designer and selecting from prebuilt operations, you can quickly build a workflow that integrates and manages your apps, data, services, and systems.\n\nAzure Logic Apps simplifies the way that you connect legacy, modern, and cutting-edge systems across cloud, on premises, and hybrid environments. You can use low-code-no-code tools to develop highly scalable integration solutions that support your enterprise and business-to-business (B2B) scenarios.\n\nThis list describes just a few example tasks, business processes, and workloads that you can automate using Azure Logic Apps:\n\nSchedule and send email notifications using Office 365 when a specific event happens, for example, a new file is uploaded.\n\nRoute and process customer orders across on-premises systems and cloud services.\n\nMove uploaded files from an SFTP or FTP server to Azure Storage.\n\nMonitor tweets, analyze the sentiment, and create alerts or tasks for items that need review.\n\nThe following partial example enterprise workflow uses conditions and switches to determine the next action. Suppose you have an order system, and your workflow processes incoming orders. You want to manually review orders above a certain cost. Your workflow already has previous steps that determine how much an incoming order costs. So, you create an initial condition based on that cost value, for example:\n\nIf you're ready to try creating your first logic app workflow, see Get started.\n\nTo continue learning more, try this video:\n\nFor more information, visit Azure Logic Apps on the Azure website and other Azure Integration Services.\n\nKey terms\n\nThe following table briefly defines core terminology and concepts in Azure Logic Apps.\n\nTerm Description Logic app The Azure resource that you create when you want to build a workflow. Basically, you can create the following types of logic app resources:\n\n- A Consumption logic app resource that supports a single workflow, which is hosted and run in global multitenant Azure Logic Apps\n\n- A Standard logic app resource that supports multiple workflows, which are hosted and run in single-tenant Azure Logic Apps\n\nLearn more about logic app resource types along with their respective computing resource and billing models. Workflow A series of operations that define a task, business process, or workload. Each workflow always starts with a single trigger operation, after which you must add one or more action operations. Trigger The first operation in any workflow that specifies the criteria to meet before running any subsequent operations in that workflow. For example, a trigger event might be getting an email in your inbox or detecting a new file in a storage account. Action Each subsequent operation that follows the trigger in the workflow. Built-in connector This connector or operation type is \"built in\" to the Azure Logic Apps runtime so that operations run natively and directly along with the runtime for faster performance, compared to Microsoft-managed connectors that are hosted and run in Azure.\n\nBuilt-in operations provide ways for you to control your workflow's schedule or structure, run your own code, manage and manipulate data, send or receive requests to an endpoint, and complete other tasks in your workflow.\n\nFor example, you can start almost any workflow on a schedule when you use the Recurrence trigger. Or, you can have your workflow wait until called when you use the Request trigger. These operations don't usually require that you create a connection from your workflow.\n\nWhile most built-in operations aren't associated with any service or system, some built-in operations are available for specific services, such as Azure Functions, Azure Blob Storage, Azure App Service, and more. The availability for these built-in operations depends on whether you're working on a Consumption or Standard logic app workflow. For more information and examples, see Built-in connectors for Azure Logic Apps. Managed connector This connector or operation type is Microsoft-published, managed, hosted, and run in Azure and is a prebuilt proxy or wrapper for a service or system's REST API, which you can use to access a specific app, data, service, or system. Before you can use most managed connectors, you must first create a connection from your workflow and authenticate your identity.\n\nFor example, you can start your workflow with a trigger or run an action that works with a service such as Office 365, Salesforce, or file servers. For more information, see Managed connectors for Azure Logic Apps. Integration account Create this Azure resource when you want to define and store B2B artifacts for use in your workflows. After you create and link an integration account to your logic app, your workflows can use these B2B artifacts. Your workflows can also exchange messages that follow Electronic Data Interchange (EDI) and Enterprise Application Integration (EAI) standards.\n\nFor example, you can define trading partners, agreements, schemas, maps, and other B2B artifacts. You can create workflows that use these artifacts and exchange messages over protocols such as AS2, EDIFACT, X12, and RosettaNet.\n\nWhy use Azure Logic Apps\n\nThe Azure Logic Apps integration platform provides more than 1,000 prebuilt connectors so that you can connect and integrate apps, data, services, and systems more easily and quickly. You can focus more on designing and implementing your solution's business logic and functionality, while spending less energy on figuring out how to access your resources.\n\nTo communicate with any service endpoint, run your own code, control your workflow structure, manipulate data, or connect to commonly used services with better performance, you can use built-in connector operations. These operations natively run on the Azure Logic Apps runtime for faster performance.\n\nTo access and work with resources in services such as Azure, Microsoft, other external web apps and services, or on-premises systems, you can use Microsoft-managed (Azure-hosted) connector operations. Choose from more than 1,0000 connectors in a constantly expanding Azure ecosystem, for example:\n\nAzure services such as Blob Storage and Service Bus\n\nOffice 365 services such as Outlook, Excel, and SharePoint\n\nDatabase servers such as SQL and Oracle\n\nEnterprise systems such as SAP and IBM MQ\n\nFile shares such as FTP and SFTP\n\nFor more information, see the following documentation:\n\nAbout connectors in Azure Logic Apps\n\nBuilt-in connectors\n\nManaged connectors\n\nWhen you build workflows in Azure Logic Apps, you usually don't have to write any code. However, if you do need to write some code, you can add and run JavaScript code snippets or C# scripts in your workflow by using the Inline Code action for JavaScript or C#, respectively. You can also add and run code by using Azure Functions. If your workflow needs to interact with events from other Azure services, custom apps, or other solutions, you can monitor, route, and publish events by using Azure Event Grid or Azure Event Hubs.\n\nAzure Logic Apps is fully managed by Microsoft Azure, which frees you from worrying about hosting, scaling, managing, monitoring, and maintaining solutions built with these services. When you use these capabilities to create \"serverless\" apps and solutions, you can just focus on the business logic and functionality. These services automatically scale to meet your needs, make integrations faster, and help you build robust cloud apps using little to no code.\n\nTo learn how other companies improved their agility and increased focus on their core businesses when they combined Azure Logic Apps with other Azure services and Microsoft products, check out these customer stories.\n\nHow does Azure Logic Apps differ from Functions, WebJobs, and Power Automate?\n\nAll these services help you connect and bring together disparate systems. Each service has their advantages and benefits, so combining their capabilities is the best way to quickly build a scalable, full-featured integration system. For more information, see Choose between Azure Logic Apps, Azure Functions, Azure WebJobs, and Microsoft Power Automate.\n\nHow quickly can I ramp up my solutions with Azure Logic Apps?\n\nYou can start small with your current systems and services, and then grow incrementally at your own pace. When you're ready, Azure Logic Apps helps you implement and scale up to more mature integration scenarios by providing the following capabilities and benefits.\n\nSave time and simplify complex processes by using the visual design tools in Azure Logic Apps. Create your workflows from start to finish by using the Azure Logic Apps workflow designer in the Azure portal, Visual Studio Code, or Visual Studio. Just start your workflow with a trigger, and add any number of actions from the connectors gallery.\n\nConnect different systems across various environments\n\nSome patterns and processes are easy to describe but hard to implement in code. Azure Logic Apps helps you seamlessly connect disparate systems across cloud, on-premises, and hybrid environments. For example, you can connect a cloud marketing solution to an on-premises billing system, or centralize messaging across APIs and systems using Azure Service Bus. Azure Logic Apps provides a fast, reliable, and consistent way to deliver reusable and reconfigurable solutions for these scenarios.\n\nCreate and deploy to different environments\n\nBased on your scenario, solution requirements, and desired capabilities, choose whether to create a Consumption or Standard logic app workflow. Based on this choice, the workflow runs in either multitenant Azure Logic Apps, single-tenant Azure Logic Apps, or an App Service Environment (v3). With single-tenant Azure Logic Apps, your workflows can more easily access resources protected by Azure virtual networks. If you create single tenant-based workflows using Azure Arc enabled Logic Apps, you can also run workflows in containers. For more information, see Single-tenant versus multitenant and integration service environment for Azure Logic Apps and What is Arc enabled Logic Apps?\n\nThe following table briefly summarizes differences between a Consumption and Standard logic app workflow. You'll also learn the differences between the multitenant environment, integration service environment (ISE), single-tenant environment, and App Service Environment v3 (ASEv3) for deploying, hosting, and running your logic app workflows.\n\nResource type Benefits Resource sharing and usage Pricing and billing model Limits management Logic App (Consumption)\n\nHost environment: Multi-tenant Azure Logic Apps - Easiest to get started\n\n- Pay-for-what-you-use\n\n- Fully managed A single logic app can have only one workflow.\n\nLogic apps across Microsoft Entra tenants share the same processing (compute), storage, network, and so on.\n\nFor redundancy purposes, data is replicated in the paired region. For high availability, geo-redundant storage (GRS) is enabled. Consumption (pay-per-execution) Azure Logic Apps manages the default values for these limits, but you can change some of these values, if that option exists for a specific limit. Logic App (Consumption)\n\nHost environment:\n\nIntegration service environment (ISE)\n\nNote: On August 31, 2024, the ISE option will retire. Since November 1, 2022, you can no longer create an ISE. Instead, you can create a Standard logic app, which runs in single-tenant Azure Logic Apps, can include multiple workflows, and provides the same capabilities as an ISE plus more. - Enterprise scale for large workloads\n\n- 20+ ISE-specific connectors that connect directly to virtual networks\n\n- Predictable pricing with included usage and customer-controlled scaling A single logic app can have only one workflow.\n\nLogic apps in the same environment share the same processing (compute), storage, network, and so on.\n\nData stays in the same region where you deploy the ISE. ISE (fixed) Azure Logic Apps manages the default values for these limits, but you can change some of these values, if that option exists for a specific limit. Logic App (Standard)\n\nHost environment:\n\nSingle-tenant Azure Logic Apps\n\nNote: If your scenario requires containers, create single-tenant based logic apps using Azure Arc enabled Logic Apps. For more information, review What is Azure Arc enabled Logic Apps? - Run using the single-tenant Azure Logic Apps runtime. Deployment slots are currently not supported.\n\n- More built-in connectors for higher throughput and lower costs at scale\n\n- More control and fine-tuning capability around runtime and performance settings\n\n- Integrated support for virtual networks and private endpoints.\n\n- Create your own built-in connectors. A single logic app can have multiple stateful and stateless workflows.\n\nWorkflows in a single logic app and tenant share the same processing (compute), storage, network, and so on.\n\nData stays in the same region where you deploy your logic apps. Standard, based on a hosting plan with a selected pricing tier.\n\nIf you run stateful workflows, which use external storage, the Azure Logic Apps runtime makes storage transactions that follow Azure Storage pricing. You can change the default values for many limits, based on your scenario's needs.\n\nImportant: Some limits have hard upper maximums. In Visual Studio Code, the changes you make to the default limit values in your logic app project configuration files won't appear in the designer experience. For more information, see Edit app and environment settings for logic apps in single-tenant Azure Logic Apps. Logic App (Standard)\n\nHost environment:\n\nApp Service Environment v3 (ASEv3) - Windows plans only Same capabilities as single-tenant plus the following benefits:\n\n- Fully isolate your logic apps.\n\n- Create and run more logic apps than in single-tenant Azure Logic Apps.\n\n- Pay only for the ASE App Service plan, no matter the number of logic apps that you create and run.\n\n- Can enable autoscaling or manually scale with more virtual machine instances or a different App Service plan.\n\n- Inherit the network setup from the selected ASEv3. For example, when deployed to an internal ASE, workflows can access the resources in a virtual network associated with the ASE and have internal access points.\n\nNote: If accessed from outside an internal ASE, run histories for workflows in that ASE can't access action inputs and outputs. A single logic app can have multiple stateful and stateless workflows.\n\nWorkflows in a single logic app and tenant share the same processing (compute), storage, network, and so on.\n\nData stays in the same region where you deploy your logic apps. App Service plan You can change the default values for many limits, based on your scenario's needs.\n\nImportant: Some limits have hard upper maximums. In Visual Studio Code, the changes you make to the default limit values in your logic app project configuration files won't appear in the designer experience. For more information, see Edit app and environment settings for logic apps in single-tenant Azure Logic Apps.\n\nFirst-class support for enterprise integration and B2B scenarios\n\nBusinesses and organizations electronically communicate with each other by using industry-standard but different message protocols and formats, such as EDIFACT, AS2, X12, and RosettaNet. By using the enterprise integration capabilities supported by Azure Logic Apps, you can create workflows that transform message formats used by trading partners into formats that your organization's systems can interpret and process. Azure Logic Apps handles these exchanges smoothly and securely with encryption and digital signatures. For B2B integration scenarios, Azure Logic Apps includes capabilities from BizTalk Server. To define business-to-business (B2B) artifacts, you create an integration account where you store these artifacts. After you link this account to your logic app resource, your workflow can use these B2B artifacts and exchange messages that comply with Electronic Data Interchange (EDI) and Enterprise Application Integration (EAI) standards.\n\nFor more information, see the following documentation:\n\nIntegrate and build off Microsoft BizTalk Server, Azure Service Bus, Azure Functions, Azure API Management, and more.\n\nExchange messages using EDIFACT, AS2, X12, and RosettaNet protocols.\n\nProcess XML messages and flat files.\n\nCreate an integration account to store and manage B2B artifacts, such as trading partners, agreements, maps, schemas, and more.\n\nFor example, if you use Microsoft BizTalk Server, your workflows can communicate with your BizTalk Server using the BizTalk Server connector. You can then run or extend BizTalk-like operations in your workflows by using integration account connectors. In the other direction, BizTalk Server can communicate with your workflows by using the Microsoft BizTalk Server Adapter for Azure Logic Apps. Learn how to set up and use the BizTalk Server Adapter in your BizTalk Server.\n\nWrite once, reuse often\n\nCreate your logic app workflows as Azure Resource Manager templates so that you can set up and automate deployments across multiple environments and regions.\n\nBuilt-in extensibility\n\nIf no suitable connector is available to run the code you want, you can create and run code snippets from your workflow by using the Inline Code action for JavaScript or C# scripts, you can use Azure Functions. You can also create APIs and custom connectors that you can call from your workflows.\n\nDirect access to resources in Azure virtual networks\n\nLogic app workflows can access secured resources such as virtual machines, other services, and systems that are inside an Azure virtual network when you use either Azure Logic Apps (Standard) or an integration service environment (ISE). Both Azure Logic Apps (Standard) and an ISE are instances of Azure Logic Apps that use dedicated resources and run separately from global multitenant Azure Logic Apps.\n\nHosting and running logic app workflows in your own dedicated instance helps reduce the impact that other Azure tenants might have on app performance, also known as the \"noisy neighbors\" effect.\n\nAzure Logic Apps (Standard) and an ISE also provide the following benefits:\n\nYour own static IP addresses, which are separate from the static IP addresses that logic apps share in multitenant Azure Logic Apps. You can also set up a single public, static, and predictable outbound IP address to communicate with destination systems. That way, you don't have to set up extra firewall openings at those destination systems for each ISE.\n\nIncreased limits on run duration, storage retention, throughput, HTTP request and response timeouts, message sizes, and custom connector requests. For more information, review Limits and configuration for Azure Logic Apps.\n\nWhen you create an ISE, Azure injects or deploys that ISE into your Azure virtual network. You can then use this ISE as the location for the logic apps and integration accounts that need access. For more information about creating an ISE, review Connect to Azure virtual networks from Azure Logic Apps.\n\nHow logic apps work\n\nA logic app workflow always starts with a single trigger. The trigger fires when a condition is met, for example, when a specific event happens or when data meets specific criteria. Many triggers include scheduling capabilities that control how often your workflow runs. After the trigger fires, one or more actions run operations that process, handle, or convert data that travels through the workflow, or that advance the workflow to the next step.\n\nAzure Logic Apps implements and uses the \"at-least-once\" message delivery semantic. Rarely does the service deliver a message more than one time, but no messages are lost. If your business doesn't handle or can't handle duplicate messages, you need to implement idempotence, which is the capability to accept identical or duplicate messages, while preserving data integrity and system stability. That way, repeats of the same operation don't change the result after the first execution.\n\nThe following section describes the logic for the example enterprise workflow, which is part of an order system where the workflow processes incoming orders. The workflow already has steps that determine how much an incoming order costs. Your goal is to manually review orders above a certain cost, so you create an initial condition based on that cost value, for example:\n\nIf the order is below a certain amount, the condition is false. So, the workflow processes the order.\n\nIf the condition is true, the workflow sends an email for manual review. A switch determines the next step.\n\nIf the reviewer approves, the workflow continues to process the order.\n\nIf the reviewer escalates, the workflow sends an escalation email to get more information about the order.\n\nIf the escalation requirements are met, the response condition is true. So, the order is processed.\n\nIf the response condition is false, an email is sent regarding the problem.\n\nYou can visually create workflows using the Azure Logic Apps workflow designer in the Azure portal, Visual Studio Code, or Visual Studio. Each workflow also has an underlying definition that uses JavaScript Object Notation (JSON) format. If you prefer, you can edit workflows by changing this JSON definition. For some creation and management tasks, Azure Logic Apps provides Azure PowerShell and Azure CLI command support. For automated deployment, Azure Logic Apps supports Azure Resource Manager templates.\n\nPricing options\n\nEach logic app resource type (multitenant, single-tenant, App Service Environment (ASE v3), integration service environment), has a different pricing model. For example, multitenant Consumption logic app workflows follow the Consumption pricing model, while single-tenant Standard logic app workflows follow the Standard pricing model. Learn more about pricing and metering for Azure Logic Apps.\n\nGet started\n\nBefore you can start with Azure Logic Apps, you need an Azure subscription. If you don't have a subscription, sign up for a free Azure account.\n\nWhen you're ready, try one or more of the following quickstart guides for Azure Logic Apps:\n\nCreate a multitenant Consumption logic app workflow in the Azure portal\n\nCreate a multitenant Consumption logic app workflow in Visual Studio\n\nCreate a multitenant Consumption logic app workflow in Visual Studio Code\n\nYou might also want to explore other quickstart guides for Azure Logic Apps:\n\nCreate a multitenant Consumption logic app workflow using an ARM template\n\nCreate a multitenant Consumption logic app workflow using the Azure CLI\n\nNext steps"
    }
}