{
    "id": "dbpedia_3608_2",
    "rank": 73,
    "data": {
        "url": "https://learning.postman.com/docs/tests-and-scripts/write-scripts/test-scripts/",
        "read_more_link": "",
        "language": "en",
        "title": "Write scripts to test API response data in Postman",
        "top_image": "https://res.cloudinary.com/postman/image/upload/b_rgb:FFD1BE/l_lc-next:homepage/c_scale,h_0.75,w_0.75/fl_layer_apply,x_-305,y_30/co_rgb:000000,w_525,c_fit,l_text:DegularDisplaySemibold.woff2_50_normal_left:Learning%20Center%253A%0A%0AWrite%20scripts%20to%20test%20API%20response%20data%20in%20Postman/fl_layer_apply,x_300/lc-next/dynamic-lc.jpg",
        "meta_img": "https://res.cloudinary.com/postman/image/upload/b_rgb:FFD1BE/l_lc-next:homepage/c_scale,h_0.75,w_0.75/fl_layer_apply,x_-305,y_30/co_rgb:000000,w_525,c_fit,l_text:DegularDisplaySemibold.woff2_50_normal_left:Learning%20Center%253A%0A%0AWrite%20scripts%20to%20test%20API%20response%20data%20in%20Postman/fl_layer_apply,x_300/lc-next/dynamic-lc.jpg",
        "images": [
            "https://voyager.postman.com/logo/postman-logo-icon-orange.svg",
            "https://assets.postman.com/postman-docs/v10/icon-postbot-v10-16.jpg#icon",
            "https://assets.postman.com/postman-docs/v11/request-test-tab-v11-2.jpg",
            "https://assets.postman.com/postman-docs/Collections.png#icon",
            "https://assets.postman.com/postman-docs/icon-more-actions-v9.jpg#icon",
            "https://assets.postman.com/postman-docs/v10/collection-tests-run-v10-19.jpg",
            "https://assets.postman.com/postman-docs/v10/icon-postbot-v10-16.jpg#icon",
            "https://assets.postman.com/postman-docs/v11/postbot-add-test-v11.gif",
            "https://voyager.postman.com/illustration/postmanaut-posing-dancing-postman-illustration.svg",
            "https://voyager.postman.com/illustration/postman-footer-rocket-launch.svg",
            "https://voyager.postman.com/logo/external/twtr-logo-blue.svg",
            "https://voyager.postman.com/logo/external/lnkdin-icon.svg",
            "https://voyager.postman.com/logo/external/github-icon.svg",
            "https://voyager.postman.com/logo/external/yt-icon.svg",
            "https://voyager.postman.com/logo/external/twitch-icon.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-10-26T00:00:00+00:00",
        "summary": "",
        "meta_description": "Postman is a collaboration platform for API development. Postman's features simplify each step of building an API and streamline collaboration so you can create better APIsâfaster.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Postman Learning Center",
        "canonical_link": "https://learning.postman.com/docs/tests-and-scripts/write-scripts/test-scripts/",
        "text": "You can use post-response scripts in Postman to execute JavaScript after a request runs. By including code in the Post-response tab for a request, collection, or folder, you can write and validate tests. You can also use post-response scripts for debugging tests.\n\nThe Tests tab was renamed to the Post-response tab. If you're an existing Postman user, you can select the Tests tab in an HTTP collection or request, then Postman will redirect you to the Post-response tab. Going forward, the Tests tab will no longer be available, and you can write your tests in the Post-response tab.\n\nTesting in Postman\n\nSome of the most common approaches to API testing are contract testing, unit testing, end-to-end testing, and load testing.\n\nTests confirm that your API is working as expected, that integrations between services are functioning reliably, and that any changes haven't broken existing functionality. You can write test for your Postman API requests in JavaScript in the Post-response tab. You can also use test code to aid the debugging process when something goes wrong with your API project. For example, you might write a test to validate your API's error handling by sending a request with incomplete data or wrong parameters.\n\nThe Pre-request and Post-response tabs use the Postman Sandbox, a runtime based on Node.js that enables you to add dynamic behavior to requests and collections.\n\nThe Scripts > Pre-request tab enables you to do any processing needed before sending a request, like setting variable values. Any code here runs before the request is sent. To learn more, see Write pre-request scripts to add dynamic behavior in Postman.\n\nThe Scripts > Post-response tab allows for any post-processing after a request is sent and includes the ability to write tests for assessing response data. The Post-response tab has the Chai.js library built in, so you can use Chai's behavior-driven development (BDD) syntax to create readable test assertions.\n\nOpen the side pane in either sandbox to view a list of test snippets. You can select one or more snippets to inject these pre-written blocks of code. Some will help you retrieve the data from variables, some are boilerplate tests, and some perform common utility functions.\n\nPostman's AI assistant Postbot reduces the need to write boilerplate code for tests. Access Postbot from the Postman footer or the Postbot icon in the test editor. As you start typing your tests, you get suggestions of common behaviors that you can test for. Postbot also examines the response to your request and any saved examples to generate relevant test code. Postbot has other features as well, like the visualization generator.\n\nPostman also provides templates that help you keep your APIâs performance, quality, and stability in check.\n\nAdd a test\n\nYou can add tests to individual requests, collections, and folders in a collection. Postman includes code snippets you add and then change to suit your test logic.\n\nTo add tests to a request, open the request and enter your code in the Post-response tab. Tests will execute after the request runs. The output is in the response's Test Results tab.\n\nSee how to work with the Postman basic test syntax to test a single HTTP API request in a sample collection template. To try out this template, select API testing basics.\n\nAdd a test to a gRPC request\n\nGo to the Scripts tab in your gRPC request.\n\nSelect the execution hook (Before invoke or After response) to which you want to add a test.\n\nUse snippets from the right pane to add a test or write customized assertions.\n\nBoth the execution hooks are available for all gRPC requests regardless of the method type being unary, client streaming, server streaming, or bidirectional streaming. Your scripts can include however many tests you need and will save along with the rest of your request when you select Save.\n\nTests are run when you select Invoke, either before or after the request is invoked. If you select Cancel, the request execution and any further script execution.\n\nIf there are any errors in your Before invoke script, it will stop the request execution.\n\nWrite test scripts\n\nPost-response scripts can use dynamic variables, carry out test assertions on response data, and pass data between requests. In the Scripts > Post-response tab for a request, enter your JavaScript manually or select Snippets next to the code editor.\n\nTests execute after the response is received. When you select Send, Postman runs your post-response script after the response data returns from the API.\n\nIf you need to execute code before a request runs, use pre-request scripts instead. See Use scripts to add logic and tests to Postman requests for more on how your scripts execute when your requests run.\n\nAdd documentation to post-response scripts\n\nPostman supports JSDoc for documenting JavaScript functions in your post-response scripts. Documentation added to your functions using JSDoc will display in a popup window when you call your functions. You can use the official JSDoc documentation to learn how to add documentation to your packages.\n\nThe following example has documentation for the logger function using JSDoc. The documentation explains what the function does, and defines what the data parameter is used for and that it accepts a string data type.\n\nfunction logger (data) { console.log(`Logging information to the console, ${data}`) }\n\nTo validate the data returned by a request, you can use the pm.response object in a test. Define tests using the pm.test function, providing a name and function that returns a boolean (true or false) value indicating if the test passed or failed. Use Chai.js BDD syntax and pm.expect in your assertions to test the response detail.\n\nThe first parameter for the .test function is a text string that will appear in the test result output. Use this to identify your tests, and communicate the purpose of a test to anyone viewing the results.\n\nFor example, enter the following in the Post-response tab of a request to test if the response status code is 200:\n\npm.test(\"Status test\", function () { pm.response.to.have.status(200); });\n\nSelect Send to run your request and open Test Results in the response section. The tab header displays how many tests passed and how many ran in total. You can also view the number of Passed, Skipped, and Failed test results.\n\nIf the request returned a 200 status code, the test passes. To find out what happens with a different status code, change the expected status code in your post-response script and run the request again.\n\nFormat test result messages using pm.expect\n\nUsing the pm.expect syntax gives your test result messages a different format. Experiment with the alternatives to achieve the output you find most useful.\n\nFork the Intro to writing tests collection to import templates containing some example post-response scripts into Postman and experiment with the code.\n\nYour code can test the request environment, as in the following example:\n\npm.test(\"environment to be production\", function () { pm.expect(pm.environment.get(\"env\")).to.equal(\"production\"); });\n\nYou can use different syntax variants to write your tests in a way that you find readable, and that suits your application and testing logic.\n\npm.test(\"response should be okay to process\", function () { pm.response.to.not.be.error; pm.response.to.have.jsonBody(\"\"); pm.response.to.not.have.jsonBody(\"error\"); });\n\nYour tests can establish validity of request responses using syntax that you tailor to the response data format.\n\npm.test(\"response must be valid and have a body\", function () { pm.response.to.be.ok; pm.response.to.be.withBody; pm.response.to.be.json; });\n\nYour scripts can include however many tests you need and will save along with the rest of your request detail when you select Save. If you share a collection, publish documentation, or use the Run in Postman button, your test code will be included for anyone who views or imports your templates.\n\nTest collections and folders\n\nYou can add post-response scripts to a collection, a folder, or a single request within a collection. A post-response script associated with a collection will run after every request in the collection. A post-response script associated with a folder will run after every direct child request in the folder. This enables you to reuse commonly executed tests after requests. The execution order for each request will be collection tests, folder tests and then request tests.\n\nYou can also store post-response scripts in the Package Library. This enables you to maintain commonly used scripts and tests in a single location, share them with your team, and reuse them in your workspaces.\n\nAdding scripts to collections and folders enables you to test the workflows in your API project. This helps to ensure that your requests cover typical scenarios, providing a reliable experience for application users.\n\nYou can update collection and folder scripts by selecting the view more actions icon next to the collection or folder name, and selecting Edit. Choose the Tests tab to add or update your script. You can also add collection scripts when you first create a collection.\n\nWhen you run a collection the collection runner displays the test results, including the response time in milliseconds and details about whether a specific request in the collection passed or failed its tests.\n\nYou can write scripts to control the order in which your requests run using branching and looping.\n\nDebug your tests\n\nIf you are having trouble with your tests:\n\nCheck if there are any errors in your scripts. A red badge will highlight scripts with errors. You can also check the response section for specific errors.\n\nDebug your tests using the log statements to ensure that you are asserting on correct data.\n\nWrite tests using Postbot\n\nYou can use plain language to tell Postbot what to do, and Postman uses artificial intelligence to generate post-response scripts for you. Use Postbot to add a new set of tests, visualize responses, save a field from a response, and fix your existing tests.\n\nTo write a test with Postbot, do the following:\n\nSend your request so it has a response.\n\nSelect the Scripts tab.\n\nSelect the Post-response tab.\n\nIn the upper right corner of the test editor, select the Postbot icon .\n\nEnter your query as a text sentence, or select one of the suggested queries to tell Postbot what you need.\n\nSelect the play button. Postbot writes a test for you.\n\nYou can also use Postbot to autocomplete test code. If you have a response available and type pm.test, Postbot suggests tests for your request. Select a test name, and Postbot inserts the code to validate your response.\n\nFor more information on Postbot, visit About Postbot.\n\nNext steps\n\nAfter writing tests in Postman, you could write more complex tests and use them with other Postman utilities."
    }
}