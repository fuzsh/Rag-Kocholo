{
    "id": "dbpedia_3608_0",
    "rank": 74,
    "data": {
        "url": "https://docs.djangoproject.com/en/5.0/topics/testing/overview/",
        "read_more_link": "",
        "language": "en",
        "title": "Writing and running tests | Django documentation",
        "top_image": "https://static.djangoproject.com/img/logos/django-logo-negative.1d528e2cb5fb.png",
        "meta_img": "https://static.djangoproject.com/img/logos/django-logo-negative.1d528e2cb5fb.png",
        "images": [
            "https://static.djangoproject.com/img/fundraising-heart.cd6bb84ffd33.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Python",
            "Django",
            "framework",
            "open-source"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The web framework for perfectionists with deadlines.",
        "meta_lang": "en",
        "meta_favicon": "https://static.djangoproject.com/img/icon-touch.e4872c4da341.png",
        "meta_site_name": "Django Project",
        "canonical_link": "https://docs.djangoproject.com/en/5.1/topics/testing/overview/",
        "text": "Running tests¶\n\nOnce you’ve written tests, run them using the test command of your project’s manage.py utility:\n\n$ ./manage.pytest\n\nTest discovery is based on the unittest module’s built-in test discovery. By default, this will discover tests in any file named test*.py under the current working directory.\n\nYou can specify particular tests to run by supplying any number of “test labels” to ./manage.py test. Each test label can be a full Python dotted path to a package, module, TestCase subclass, or test method. For instance:\n\n# Run all the tests in the animals.tests module $ ./manage.pytest animals.tests # Run all the tests found within the 'animals' package $ ./manage.pytest animals # Run just one test case class $ ./manage.pytest animals.tests.AnimalTestCase # Run just one test method $ ./manage.pytest animals.tests.AnimalTestCase.test_animals_can_speak\n\nYou can also provide a path to a directory to discover tests below that directory:\n\n$ ./manage.pytest animals/\n\nYou can specify a custom filename pattern match using the -p (or --pattern) option, if your test files are named differently from the test*.py pattern:\n\n$ ./manage.pytest --pattern=\"tests_*.py\"\n\nIf you press Ctrl-C while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing Ctrl-C can be very useful if you forget to pass the --failfast option, notice that some tests are unexpectedly failing and want to get details on the failures without waiting for the full test run to complete.\n\nIf you do not want to wait for the currently running test to finish, you can press Ctrl-C a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed.\n\nTest with warnings enabled\n\nIt’s a good idea to run your tests with Python warnings enabled: python -Wa manage.py test. The -Wa flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren’t strictly wrong but could benefit from a better implementation."
    }
}