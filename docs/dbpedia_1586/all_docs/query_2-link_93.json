{
    "id": "dbpedia_1586_2",
    "rank": 93,
    "data": {
        "url": "https://www.runn.io/blog/agile-principles",
        "read_more_link": "",
        "language": "en",
        "title": "12 Agile Values & Principles Advanced by the Agile Manifesto",
        "top_image": "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6578444d12d6e087c0888ec0_12%20Agile%20Values%20%26%20Principles%20.png",
        "meta_img": "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6578444d12d6e087c0888ec0_12%20Agile%20Values%20%26%20Principles%20.png",
        "images": [
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/636307f730032ca4f89864f9_runn_icons_Runn_logo_colour.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef28f9156b5344611030_Group%20297.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef29f9156bd72a611034_Group%20314.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef28e2391ec1bdec2019_Group%20299.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef29d95d25751e0b1399_Group%20300.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef28ea07c2750129e1e0_Group%20301.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef293160871c35e5f98b_Group%20304.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef29756e5f273e3a412e_Group%20303.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/63f6c752418023869c83fbb8_IT%20Industry.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef29f9156bd72a611034_Group%20314.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef28e2391ec1bdec2019_Group%20299.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6362ef29d95d25751e0b1399_Group%20300.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6579a55e62e9ef3bfbc1c3d8_Asset%201.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/66c8580578fee445782b7235_BookOpenText.svg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/6579a55e62e9ef3bfbc1c3cd_webinar%20icon.svg",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6247028ba64b1dd7ba394574_natalia.jpeg",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6578444d12d6e087c0888ec0_12%20Agile%20Values%20%26%20Principles%20.png",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6578495ea04458f2a9b3b18f_12%20principles%20behind%20the%20Agile%20manifesto.png",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/657849d0775dbbcb19718d9f_4%20core%20values%20in%20the%20Agile%20manifesto.png",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/626053da47d8b2bcc40ab261_project%20log.png",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/615f8af5026822437b3e686b_1569912324282.jpg",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/623ad188436298156dc936ad_time%20tracking%20software%20(1).jpg",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/6176ff3b67bad0291c0624b6_iryna%20avatar.jpg",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/624c2ede59f2f562f805360e_Capacity%20management.png",
            "https://cdn.prod.website-files.com/5d9ffc249511353e753840c9/62e880e3bdfe0363bdc79881_zwXEg75D_400x400.jpg",
            "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/636307f730032ca4f89864f9_runn_icons_Runn_logo_colour.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Natalia Rossingol"
        ],
        "publish_date": "2023-12-13T00:00:00",
        "summary": "",
        "meta_description": "Agile principles serve as the cornerstone of the Agile methodology. Learn all about them in our guide.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/5d7ad33f3af02151628398c6/5da6dabe74d4caf33d892578_favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.runn.io/blog/agile-principles",
        "text": "When old methods stop working, you start looking for an alternative. For instance, you can gather like-minded people, go to a nice place to ski and have fun, and meanwhile, discuss possible solutions. Once you find the common ground, you put your thoughts on paper and sign the document, giving it official value. Â\n\nThis is exactly how the Agile Manifesto was created.\n\nAnd it was revolutionary. Initially developed to be applied in software development, the Agile Manifesto shifted the focus from tools to individuals, recognizing human beings as the main drivers of progress. It emphasized the importance of welcoming the change and declared flexibility and responsiveness as priorities in project management.\n\nSo letâs explore this document more closely, describing the agile principles and values.Â\n\nWhat is the Agile Manifesto?\n\n12 principles behind the Agile Manifesto\n\n4 core values in the Agile Manifesto\n\nWhat is the Agile Manifesto?\n\nIn 2001, at Snowbird Ski Resort, Utah, a team of developers, naming themselves âThe Agile Alliance,â gathered to find new ways of software development as opposed to the traditional, bureaucratic ones that were getting outdated and counter-productive.\n\nThe team consisted of 17 members who represented different software methodologies â Mike Beedle, Arie van Bennekum, Alistair Cockburn, Martin Fowler, Kent Beck, Ward Cunningham, Martin Fowler, James Grenning, Jim Highsmith, Andrew Hunt, Ron Jeffries, Jon Kern, Brian Marick, Robert C. Martin, Steve Mellor, Ken Schwaber, Jeff Sutherland, and Dave Thomas.\n\nAfter two days of discussion, they came up with the Agile Manifesto, or the Manifesto for Agile Software Development, - a document describing the principles and values that can help build a dynamic, responsive, and customer-oriented work environment in the realm of software development.\n\nThe Manifesto did not reject the old methods altogether. It was rather a compromise between the traditional and contemporary paradigms. According to the authors, they aimed not at destroying the accepted methodology but at creating a new, more credible one:\n\nWe want to restore a balance. We embrace modeling, but not in order to file some diagram in a dusty corporate repository. We embrace documentation, but not hundreds of pages of never-maintained and rarely-used tomes. We plan, but recognize the limits of planning in a turbulent environment.\n\nThe Agile Manifesto was a breath of fresh air in software development. This new approach allowed more flexibility and freedom of self-expression and was focused on building a high-quality product over sticking to a well-known agenda.Â Â\n\nEven though it doesn't provide a real structure and, for this reason, is not a methodology in the common meaning of this word, since 2001, the agile philosophy has been adopted by numerous development teams in the technology industry and proved to be very effective. Â\n\nThe Agile Manifesto consists of two main components â 12 agile principles and 4 core values, which uncover the nature of the agile philosophy. Letâs take a look at them and see what this philosophy is about.\n\nRelated: 20+ Agile Statistics - All About Agile Adoption\n\n12 principles behind the Agile manifesto\n\n1. Our highest priority is to satisfy the customer through the early and continuous delivery of valuable software.\n\nIn contrast to a predetermined communication structure between developers and customers, which assumes that they meet to discuss details at the beginning and the end of the project, the agile approach suggests an uninterrupted flow of two-way communication.\n\nThe âearly and continuous deliveryâ of software implies that instead of sticking to a plan, youâre supposed to satisfy the customerâs requirement, which can change anytime. This means you need to report to the customer permanently, get feedback, and deliver the product that the customer desires to get.\n\n2. Welcome changing requirements, even late in development. Agile processes harness change for the customerâs competitive advantage.\n\nTo survive in a highly competitive business world, you have to âsniff the changeâ and react to it on time. This is why the agile approach requires you to be ready to reconsider processes and implement changes at any phase of software development, even at the latest one.Â Â Â\n\nWhile it may pose a challenge, by accepting the requirements, you will make sure that your customers will not stay one step behind their competitors.\n\n3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n\nThe more frequently you deliver software, the higher the possibility you will not be asked to add, change, or delete something at the end of the project. So work in short sprints. Set short-term goals, each of which would eventually lead you to your purpose. Do not create a thorough schedule with many steps â use your time for actual work, not for the paperwork, which is often simply unnecessary.Â\n\nThis stands in contrast with the traditional Waterfall project management methodology where youâre expected to outline the whole work process before you start the project. Itâs a rigid and time-consuming model that requires you to complete each project phase before moving to the next one, which can often mean you will not realize there is a problem until you move to the next stage.\n\nUnlike the waterfall approach, the agile one provides more flexibility, letting you adapt the project as it progresses.\n\nRelated: Agile vs Waterfall - Know the Difference\n\n4. Business people and developers must work together daily throughout the project.\n\nThe agile approach to developing software prioritizes collaboration, based on the principles of transparency and trust. This is made possible thanks to regular communication between customers and developers, which guarantees that everyone looks in the same direction. Two-sided feedback eliminates misunderstandings and helps create alignment.\n\n5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\nThis principle contains two ideas. Firstly, pick the right individuals for your team. Make sure youâve got people with the right skills and motivation. As Jim Collins mentioned in his book âGood to Great,â success starts with getting the people who are committed, and only after that, you can proceed with setting a direction â not the other way around.\n\nAnd secondly, create an environment where your team will be able to work to the fullest. Promote trust and respect among coworkers and provide them with all the necessary tools. Do not micromanage â give people autonomy to move to the goals by themselves. However, you must always be available in case they need guidance.\n\nBuilding an agile team also requires agile resource management and capacity planning, which means you have to prioritize collaboration and be aware of how much you can deliver within a timeframe, to maintain the team's well-being.\n\n6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. Â Â\n\nA face-to-face conversation is objectively the best way of getting things straight, letting you quickly ask questions and get the answers, double-check, dwell on details, and get confirmations. Nowadays, when a considerable amount of work environment is remote, a concept of face-to-face conversation has evolved â you do not necessarily have to be physically in the same room, because video chats provide you with the same benefits.\n\nOf course, emails, and especially instant texting, are of great use â however, it will take you more time to figure out all issues if you use that way of communication.Â\n\n7. Working software is the primary measure of progress.\n\nA typical mistake of many people, not just developers, is paying excessive attention to the work process instead of the actual result. No doubt, the process is important â and as we know, itâs the journey itself that brings you true pleasure, not the final destination.\n\nYet, from the customer's viewpoint, what matters is the final product â the software, or anything else, which they entrust you. If youâre more concerned about following the timeline and performing the tasks on it rather than about the main goal, your idea of the progress must be wrong.\n\n8. Agile processes promote sustainable development.Â The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\nAnything in this world exists in a cycle, going through periods of increase and decline. Human productivity is not an exception. Demanding high productivity from your team at all times is a no-win tactic â because sooner or later, people will burn out.\n\nThe best way to maintain a healthy work pace is to keep your team motivated, lowering the bar of expectation at the same time. Do not overburden them with work. No one shows great results under pressure. True development can sometimes be slow, but it's always steady.\n\n9. Continuous attention to technical excellence and good design enhances agility. Â Â Â\n\nMoving to your goal without making constant improvements on your way is like taking one step forward and two steps back â because you will inevitably have to revisit previous issues and correct mistakes. This will slow the work process down and make it more complicated since problems will accumulate like a snowball.\n\nThis is why itâs not enough to just create software that would work â you should create software that would be easy to change when a customer, or circumstances, require you to do so.\n\n10. Simplicity - the art of maximizing the amount of work not done - is essential.\n\nThere is no need to overcomplicate things. The 7th principle tells us that the measure of progress is working software, not meeting the deadlines on a schedule, - and similarly, the amount of effort you put into the project is not the measure of progress, either. Again, your goal is the final result.\n\nBesides, by complicating things without any need, you risk creating issues for yourself and ending up with a pile of work that wasnât even planned.\n\n11. The best architectures, requirements, and designs come from self-organizing teams. Â Â\n\nAccording to Niels Phlaeging, the author of âOrganize for Complexity,â there exist 3 types of organizational structures â formal (org charts,) informal (spheres of influence,) and value creation (how work is done.) Phlaeging underlined success comes from the combination of the informal and value creation structures â the traditional hierarchical org chart, still used in many companies, doesn't provide enough flexibility.\n\nEven more, it slows things down. The Conwayâs Law states that âorganizationsâ¦ are constrained to produce designs which are copies of the communication structures of these organizations.â In other words, communication patterns among team members directly affect the architecture they build.\n\nAnd this is why self-organizing teams are important. They ensure that people do not spend time on bureaucracy â they work, and they work smoothly and collaboratively. Besides, some autonomy has a beneficial influence on motivation.\n\n12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. Â Â Â\n\nThis principle is about performance evaluation. To maintain high quality and stay effective, the team must continuously make pauses and reflect on its progress. If something goes wrong, that should be corrected. This is how you improve your productivity and results.\n\n4 core values in the Agile manifesto\n\n1. Individuals and interactions over processes and tools.\n\nThe reason behind this value is the fact that people are more responsive than processes and tools. This has an important implication in the context of a constantly changing environment: while people will act more flexibly, finding solutions and learning fast, tools will stay quite rigid, not satisfying the new requirements. Therefore, people should be treated as more important.\n\n2. Working software over comprehensive documentation.\n\nDocumentation matters â however, it is rather an auxiliary instrument than a number one priority. Technical requirements, tests, plans, and every other paper need to be approved, and this takes time, which can otherwise be used on developing and improving software.\n\n3. Customer collaboration over contract negotiation\n\nInstead of discussing and approving every single project detail before the work starts, the agile approach suggests collaborating with the customer throughout the whole project cycle. This will ensure continuous feedback that would put everyone on the same page.\n\n4. Responding to change over following a plan.\n\nThe possibility of change is pretty high, so it makes sense to be ready for it rather than avoid it by all means. Changes enhance the project, not ruin it, and a failure to respond to change for the sake of following a plan may result in worse quality.Â\n\nThe agile principles are not just about software. The flexibility and responsiveness promoted in the Agile Manifesto can be useful in any sort of project management, as well as in everyday life. They're about creating a flow of movement that would not allow you to fall behind. And they're about valuing real people in our highly technical world.Â Â Â\n\nContinue reading:"
    }
}