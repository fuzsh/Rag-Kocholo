{
    "id": "dbpedia_1586_2",
    "rank": 87,
    "data": {
        "url": "https://openclassrooms.com/en/courses/4055461-manage-your-code-project/4123691-apply-agile-principles-to-your-software-development",
        "read_more_link": "",
        "language": "en",
        "title": "Apply agile principles to your software development",
        "top_image": "https://course.oc-static.com/courses/4055461/4055461_teaser_picture_1680854885.jpg",
        "meta_img": "https://course.oc-static.com/courses/4055461/4055461_teaser_picture_1680854885.jpg",
        "images": [
            "https://openclassrooms.com/images/icons/schedule.svg?3c0b069",
            "http://i.booksee.org/covers/737000/3c912738355ecfdcc42af5ffec92531f-d.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Extreme_Programming.svg/367px-Extreme_Programming.svg.png",
            "https://static.oc-static.com/prod/images/courses/certif.jpg",
            "https://static.oc-static.com/prod/images/courses/certif.jpg"
        ],
        "movies": [
            "https://vimeo.com/194475586",
            "https://www.youtube.com/watch?v=jH-oI-XpUaI"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Writing code is great, but you've gotta keep an eye on what you're doing! You'll need to manage your project (whether using Agile, Scrum, or a different workflow) from start to finish in order to hit your deadlines and keep everyone happy.",
        "meta_lang": "en",
        "meta_favicon": "/fav-icon.png?v=3",
        "meta_site_name": "OpenClassrooms",
        "canonical_link": "https://openclassrooms.com/en/courses/4055461-manage-your-code-project/4123691-apply-agile-principles-to-your-software-development",
        "text": "https://vimeo.com/194475586\n\nPeople talk about agile all the time at work these days! What does it mean to be agile though?\n\nThe Oxford Dictionary defines \"agile\" as:\n\n1. Able to move quickly and easily, ex.‚ÄòRuth was as agile as a deer‚Äô\n\n1.1 Able to think and understand quickly, ex. ‚Äòhis vague manner concealed an agile mind‚Äô\n\nSo, do agile teams all gallop around the office like deer? No! But the spirit is the same. An agile team is fast, responsive, collaborative, and generally awesome.\n\nOrigins\n\nThe origins of formal agile development can be traced back to 2001 to a group of developers who got together to discuss the best way to, well, develop! They wrote what is called the the Manifesto for Agile Software Development. Despite its archaic title, it's a very readable and simple document.\n\nAccording to the Manifesto, here's what agile software development is all about:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nLet's break down some of these principles.\n\nIndividuals and interactions\n\nViewing humans as the key to successful products and development is a fundamental part of the agile workflow. Getting lost in a labyrinth of services, formal processes, and arbitrary things to do results in bad experiences. Layers and layers of tools disconnect the development process from its ultimate users: human beings.\n\nThis is why it's sometimes easier for small startups to adopt an agile workflow than for enormous corporations. There is less infrastructure and more possible mobility. Implementing agility within behemoth teams that already have existing processes is very difficult. Depending on project needs though, it may be worth it!\n\nLisa wants something done -> Linda files a request -> Linda waits for approval -> Linda gets approval -> Linda must formally request time from her collaborators -> Linda needs a new service so has to file a request with the finance department -> Linda waits 6 days for her request to be approved -> Linda finishes building her project -> Linda sends it off to the QA team to have it tested, but the tool that communicates with the QA team bugs and takes 3 days to be fixed-> Linda gets the green light from QA 3 days later -> Linda releases the project.\n\nLinda wants something done -> Linda involves collaborators she knows are free and interested -> Linda uses the company expense account to immediately buy the service she needs -> Linda and her collaborators test their code themselves -> Linda releases the project.\n\nWorking software\n\nThis piggybacks off the preceding point! It's better to have code that works than code that took weeks longer to ship because of heavy process and documentation.\n\nLet's not mistake this point for saying that documentation is bad though! Writing great documentation can be an engaging and helpful way to involve others in your code projects. It can also help clarify project needs and clear up misunderstandings between collaborators. Just find the right balance!\n\nCustomer collaboration\n\nCustomer collaboration is a fascinating and unique part of agile software development. Try to think of some benefits of having customers (or \"users\" if you prefer) involved in a project-building process.\n\nFirstly, involving users as early as possible in the process means that project needs are aligned immediately with the person benefiting from the project. Projects with user input are often more intuitive than projects built just by developers.\n\nSecondly, user-input can harmonize different features because the features are destined for the same person. Even throughout multiple iterations, a feature's development remains guided by its destiny: the user!\n\nResponding to change\n\nEverything on the web is transient and changeable. Think about your favorite websites; odds are they look nothing like they did even 5 years ago! Things move fast (which explains the famous Facebook expression \"Move fast and break things!\").\n\nA key word in agile development is iterate. Iterating means constantly updating and improving a feature. It's okay to ship a first version of a feature even without every single functionality. They can always be added later, and a good, fast feature release is better than a perfect one that takes 2 years. Ship it!\n\nAnother component of agile development is the sprint. We'll see more about sprints in the next chapter on scrum methodology, but generally a sprint is a defined timeframe in which certain things must be shipped. Say there's a 30-day sprint system; this means that at the beginning of a 30-day span, projects (small and large) are defined for the sprint, and boom. It's off to the races!\n\nWhat's the magic feature shipping rhythm?\n\nThis totally depends on your team and projects. Consider your developers, company, product, and users. Having a global vision of these elements can hopefully let you define a shipping/release rhythm where, every __ days/weeks, there are new iterations and features put out.\n\nExtreme programming\n\n\"Extreme programming\" doesn't mean we're all going snowboarding and coding at the same time. üèÇüíª\n\nIt's actually perhaps the purest and simplest form of agile development! The word extreme comes from its emphasis on taking the best parts of programming, like iterations and pair programming, and taking them to an extreme level.\n\nDescribed by Kent Beck in 1999 in his book Extreme Programming Explained, the practice of extreme programming encourages openness to change, automated/widespread testing, simplicity, and collaboration, among other things! The book has been released as a second edition as well.\n\nExtreme programming mechanisms\n\nWhich mechanisms allow for this? Many programming concepts that you already know, such as pairing or standup meetings, actually foster agility and play into the extreme programming model!\n\nWatch this video by Clean Coders for a fun and interesting introduction to Extreme Programming (done by Robert Martin, who was one of the coauthors of the Agile Manifesto):\n\nhttps://www.youtube.com/watch?v=jH-oI-XpUaI\n\nCheck out how these extreme programming/agile concepts all play together:\n\nWhether you call your workflow agile, extreme, or something else, constant collaboration and acceptance of change is a revolutionary thing in a development team. Some teams rigorously subscribe to agile methodologies, taking them as gospel üôå while others integrate a little agility here and there. It depends on the team and their needs.\n\nThere are even more workflows that tap into these practices that you'll see in the following chapters!"
    }
}