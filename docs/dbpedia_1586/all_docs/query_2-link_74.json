{
    "id": "dbpedia_1586_2",
    "rank": 74,
    "data": {
        "url": "https://www.lucidchart.com/blog/extreme-programming-vs-agile",
        "read_more_link": "",
        "language": "en",
        "title": "Extreme programming vs Agile methodologies",
        "top_image": "https://cdn-cashy-static-assets.lucidchart.com/marketing/blog/2022Q3/extreme-programming-header.png",
        "meta_img": "https://cdn-cashy-static-assets.lucidchart.com/marketing/blog/2022Q3/extreme-programming-header.png",
        "images": [
            "https://cdn-cashy-static-assets.lucidchart.com/lucid/logos/lucidchart.svg",
            "https://corporate-assets.lucid.co/chart/e3316b70-1304-4f4d-9b78-f7f859de06f9.png?v=1707845445633",
            "https://corporate-assets.lucid.co/chart/7b6a3560-5571-4bef-a85b-619c77c8d150.png?v=1707845447898",
            "https://www.lucidchart.com/blog/static/c364ee5523edba5a64bdd8f7a71890a9/google-icon.svg",
            "https://www.lucidchart.com/blog/static/abd7fd5d8ae93885101b16633bdc5ee3/microsoft-icon.svg",
            "https://www.lucidchart.com/blog/static/21390582a6d9da3a416788e441efe905/slack-icon.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/linkedin-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/Footer/twitter-x-logo-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/instagram-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/facebook-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/youtube-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/glassdoor-black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/Footer/TikTok-Social-logo-Black.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/footer/app-store-white.svg",
            "https://cdn-cashy-static-assets.lucidchart.com/marketing/pages/chart/Footer/google-play.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Teams that need to quickly release software and respond to ever-changing customer needs should take a look at extreme programming to see if it is a good fit for their projects.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn-cashy-static-assets.lucidchart.com/marketing/images/Lucidchart_favicon_full_96x96.png",
        "meta_site_name": "Lucidchart",
        "canonical_link": "https://www.lucidchart.com/blog/extreme-programming-vs-agile",
        "text": "A lot of people working in the software industry today donât remember the days when a development cycle could last anywhere from 18 months to three years. Aside from the wait time, the other problem was that goals were not consistently customer-driven, and so they didnât always meet customer needs.\n\nIn the mid 90s the internet greatly changed how we do business. Companies needed to figure out how to streamline product development to shorten lead times and keep up with rapidly changing expectations, requirements, and needs.\n\nThis led software engineers like Kent Beck to find and define better ways to develop applications. Beck created extreme programming (commonly called XP) while working on a project for Chrysler in 1996. In February of 2001, Beck was an original member of âThe Agile Allianceâ of software developers who created the Manifesto for Agile Software Developmentâa document that outlines the key values and principles of incremental, feature-driven development.\n\nIn this article weâll discuss the XP methodology and its relationship to Agile software development.\n\nWhat is extreme programming?\n\nExtreme programming is a software development framework that is focused on creating high-quality software quickly, directly tailored to customer requirements. The XP methodology supports frequent releases of usable software in short development cycles.Â\n\nDeveloping, testing, and releasing software in small, frequent increments creates checkpoints in the development process. These checkpoints make it easier for developers to evaluate their work and incorporate new customer requirements for subsequent releases.\n\nYou might think that this description of XP sounds a lot like Agile, and you would be right. Thatâs because XP is one of many methods under the umbrella of Agile principles used to develop software in short, incremental cycles. All of the Agile methodologies include practices and values that aim to improve software quality, release products quickly to market, and to be flexible and responsive to customer demands. But XP takes these practices and ramps them up to âextremeâ levels.\n\nTeams that need to quickly release software and respond to ever-changing customer needs, should take a look at XP to see if it is a good fit for their software development projects.\n\nWhat is the difference between extreme programming and Agile methodologies?\n\nNow that weâve established that XP is one method in the Agile framework, it might seem silly to ask what the differences are between XP and agile. Instead, letâs ask what the difference is between XP and other agile methodologies.\n\nOne key difference might be the name itself.Â\n\nLetâs look at why itâs called âextremeâ programming, and what makes it different from some of the other Agile practices.\n\nCode reviews are performed at every step, ensuring that code is clean and effective.\n\nContinuous regression testing ensures features and processes work correctly after changes are made to the code.\n\nEverybody does code refactoring every day to improve software design.\n\nDaily reuse of code improves design even more.\n\nIntegration testing is performed several times a day to ensure that software modules work together in a group.Â\n\nMost testing is automated so XP projects can be run and completed at top speed.\n\nMultiple short iterations make delivery more effective and provide opportunities to incorporate new requirements.\n\nLike other Agile methodologies, XP keeps the customer involved in the development process. But, XP doesnât include any intermediaries between customers and the team.\n\nWhy use XP?\n\nExtreme programming focuses on using frequent customer and stakeholder feedback. Teams work in fast, small increments, showing usable pieces to the customer. This gives programmers a good view into what is working well, what needs to be improved, and helps teams incorporate feedback quickly.Â\n\nXP teams believe that change is good, responding quickly to customer needs. This programming method encourages teams to work a small piece of the problem, then check its performance. That means that there is less waste, fewer major defects, and less rework. Ultimately, XP teams meet their customer needs faster, with cleaner code.\n\nWhen should you use XP?\n\nThe extreme programming model is designed to improveÂ productivity by making teams adaptable, incorporating customer feedback, eliminating errors early, and encouraging collaborative coding.\n\nExtreme programming might work well for teams that:\n\nExpect frequent functionality changes to systems and applications.\n\nInclude only two to twelve software programmers.\n\nWant to reduce project risk.\n\nCan work directly with customers without an intermediary.\n\nHave customers who constantly change requirements or who donât really know what they want yet.\n\nCan create automated unit and functional tests.\n\nHow does extreme programming work?\n\nExtreme programming uses a set of values and rules that help development teams to work faster and more efficiently in a collaborative atmosphere. The values keep things simple and ensure consistency.\n\nXP values\n\nThe following five values represent the foundation XP is built on. These values help team members to feel confident that the project is moving in the right direction and that everybody is on the same page.\n\nSimplicity\n\nTeams agree to work on and complete what is needed and asked for and nothing more. Large processes are broken down into smaller, achievable goals that can be accomplished quickly.\n\nCommunication\n\nTeams work together in the same space and communicate face-to-face every day to ensure everybody understands the requirements and their assignments. This also ensures that problems are identified and addressed immediately.\n\nFeedback\n\nTeams adapt quickly to project changes. Software is demonstrated early and often to solicit feedback. They consider suggestions seriously and make the necessary changes.Â\n\nRespect\n\nAll members of the team are respected and contributions are valuedâno matter how large or small. The team listens to and respects their customers and vice versa.\n\nCourage\n\nThe team tells the truth about current progress and estimated completion dates. The team accepts responsibility for failure and does not offer excuses or try to place the blame somewhere else.\n\nRules of XP\n\nWe all need rules to function in society, and the same is true for extreme programming. The following rules remind the team about what and how things need to be done.\n\nPlanning\n\nUser stories are written to define the functionality the customer requires, the anticipated business value, and the feature priority. These stories provide just enough detail to help teams estimate how long it will take to implement the features. This information helps the team to create a realistic timeline with iterations for the project.Â\n\nManaging\n\nSuccessful management of XP projects requires:\n\nAn open workspace where team members sit together.\n\nDetermining the right length for each iteration so you can set a sustainable pace.\n\nDaily standup meetings.\n\nMeasuring how much work is getting done, known as project velocity.\n\nMoving people around and reassigning tasks as needed to avoid interruptions in the workflow.\n\nAdjusting if XP isnât running as smoothly as you expected.\n\nDesigning\n\nExtreme programming is based on the idea that you start with the simplest design that can possibly work. Then add complexity only when it's required. Choose a system metaphor so everybody understands the project through a common vision and a shared vocabulary. Refactor the code often to keep the design simple and to keep the code clean.\n\nCoding\n\nNow your team can start coding the project. To be successful, the team should:\n\nAlways have the customer available, preferably on-site. This will keep communication lines open through all phases of the project.\n\nWrite the code according to the standards everybody has agreed on. This keeps code consistent and makes it easier for the team to read and refactor.\n\nCreate unit tests before you begin coding. This makes it easier to and faster to write your code later.\n\nPractice pair programming. Pair programming means that all code is created by two people at a single computer. This can increase the quality of the code without impacting the time to deliver. Only one pair integrates code at a time.\n\nIntegrate and commit code several times a day to avoid fractured or diverging development efforts.\n\nTesting\n\nThe team performs unit tests on all code and creates new tests when defects are found. The team also performs frequent acceptance tests and ensures that all bugs are fixed before the software is released."
    }
}