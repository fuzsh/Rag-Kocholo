{
    "id": "dbpedia_1586_2",
    "rank": 83,
    "data": {
        "url": "https://stackoverflow.com/questions/2352616/agile-development",
        "read_more_link": "",
        "language": "en",
        "title": "Agile development",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/471794ce9e93fe23059982ea11ad30fc?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/dc1a5b5fdba36ae9cdcf6e267f1a86ca?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/77e467d771ab8736ce3f9f5956a5d922?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0071d920b9116a71c1d2d59b5db4d559?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/MIM9R.jpg?s=64",
            "https://www.gravatar.com/avatar/909cba9a54b94570ebacbc7d1c3acc77?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/4ec905870f05ccb503cf38bdb9b0e2b8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/77e70be6f4cdb92b793d4910395caf2d?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/2963925cb18ad14f4a2d9c3a53578dd7?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/bwfSY.jpg?s=64",
            "https://www.gravatar.com/avatar/b19534d8a57758546bdc252eefecc432?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/279929b6e31ee2eda28479f7829e6bb0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7c1594304f3515b88e31bc8888f0f593?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/2352616/ivc/524b?prg=c1374a8b-69d2-4786-a29f-69837d65e08e"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-02-28T20:51:12",
        "summary": "",
        "meta_description": "At university we talked about agile programming, but also how many agile methods aren't used in business, like pair programming.\n\nI would like to know which methods belong to agile programming (ext...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/2352616/agile-development",
        "text": "Agile development is not a methodology in itself, it's an umbrella term that describes several agile methodologies (that all belong to the Iterative and Incremental Development - IID - family).\n\nalt text http://img62.imageshack.us/img62/6374/dd997578teamprojagileum.png\n\nAt the signing of the Agile Manifesto in 2001, the following methodologies were represented: eXtreme Programming (XP), Scrum, DSDM, Adaptive Software Development (ASD), Crystal, Feature-Driven Development (FDD), Pragmatic Programming. Each of them share the core values of the Agile Manifesto but implement them with a slightly different approach.\n\nIn contrast, pair programming is an engineering practice (it is one of the practices of XP which captures many practices as an indivisible set but you can use it outside of XP). And, while I value practices very much, just keep in mind that practices are not an end, they are just a mean as I wrote previously. Agile is not about doing pair programming, stand up meetings, etc. Agile is about maximizing the customer value while minimizing waste to provide the most optimal ROI. Agile is business oriented, practices are just a way to achieve this goal in a given context.\n\nScrum and XP (used together) are the most commonly used nowadays.\n\nSome Recent Empirical Data About Practices in Use in Industry:\n\nI just came across the Agile Practices Survey Results: July 2009. It's a fairly small sample set (123), but it offers some interesting perspective. For instance, the top 10 most effective agile agile practices (as reported by respondents) were:\n\nContinuous Integration\n\nDaily Stand Up Meeting\n\nDeveloper TDD\n\nIteration Planning\n\nCode Refactoring\n\nRetrospectives\n\nPair Programming\n\nActive Stakeholder Participation\n\nPotentially Shippable Software\n\nBurndown Tracking\n\nThere are also charts for top 10 agile practices that:\n\nare believed to be easiest to learn.\n\nare believed to be hardest to learn.\n\nwere most likely to be tried and then abandoned.\n\npeople want to adopt but have not yet done.\n\nThe Practices are Not the Point\n\nWe don't do the practices for the practices's sake. The agile practices come out of following the agile principles as explained on the manifesto website. The highest agile principle is: \"to satisfy the customer through early and continuous delivery of valuable software\". Early, continous, and valueable are the key words there. If a team doesn't understand the how the principles drive the practices, then they run the risk of being, as @Guildencrantz said, cargo-cult, not having the magic-bullet success that they expect, declaring agile a failure, and abandoning it.\n\nIt's Easier to be Agile on a New Project Than it is to Convert a Project to Agile:\n\nI don't have a good citation at hand, but it's generally thought of as easier to be agile on greenfield projects than it is to convert a brownfield project to agile. One reason for that is that existing code is often written in a way that makes it hard to add automated tests. Michael Feathers wrote a whole book about adding tests to legacy code.\n\nMost of experienced developers have become project managers since or IT directors. Back then, about 20 years ago, those methodologies such as Agile Software Development didn't even exist, and they were able to produce and to deliver working systems.\n\nThese same guys might lack the knowledge of such proposed practice from these new methodologies resulting of some sort of resistance against bringing forward those approach.\n\nWe cannot be rough at them for so, they only resist to changes they don'T know or even understand, just like let's say a customer who is used to work one way, and then we come with our new methods and then change this customer's habits within a day! It's quite normal that these resistances occur, they're human bahviours.\n\nFurthermore, for some of these more experienced-guys, they don't just don't get the point of working in pair, for example. Just like they generally don't believe in scrum meetings, they prefer the old-school way, which has known its success in some way, of a meeting lasting from 1 to 2 hours a week.\n\nAs for administrators, those responsible for the budgets of programming resources, it is seen, as for pair programming, to pay a programmer doing nothing while this doing-nothing-programmer could work on another part of code to multiply productivity. You cannot really blame them neither, as what they think makes full of sense.\n\nSome suggestions from the Agile Software Development are easier to get the benefit from in comparison to some others. While pair programming might not know a real success in practice, or even daily scrum meetings, what is a success though, in my experience, is beginning coding as soon as we get a precise enough sketch of the software, its requirements and features, never to forget the priorities given from the customer himself. Then, updating the UML analysis while developing for an iteration.\n\nSoftware iterations, in my experience, begin a growing success.\n\nLet it time, Agile Software Development, such as Test Driven Development, well in my region, are still new stuff. Once they will get more practitioners, their practiced practices will grow with it, I believe."
    }
}