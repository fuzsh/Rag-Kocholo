{
    "id": "dbpedia_1586_2",
    "rank": 73,
    "data": {
        "url": "https://elixirforum.com/t/do-we-need-agile-software-development/2960",
        "read_more_link": "",
        "language": "en",
        "title": "Do we need agile software development?",
        "top_image": "https://elixirforum.com/uploads/default/original/2X/3/301658d2571b34804e642eb7a28976609422ac3b.png",
        "meta_img": "https://elixirforum.com/uploads/default/original/2X/3/301658d2571b34804e642eb7a28976609422ac3b.png",
        "images": [
            "https://elixirforum.com/images/emoji/apple/slight_smile.png?v=9",
            "https://elixirforum.com/images/emoji/apple/grin.png?v=9",
            "https://elixirforum.com/user_avatar/elixirforum.com/dwahyudi/48/347_2.png",
            "https://elixirforum.com/images/emoji/apple/slight_smile.png?v=12",
            "https://elixirforum.com/uploads/default/original/2X/6/63ffd3dfcbaa3553e4479d1f73539f5f0827c219.png",
            "https://elixirforum.com/letter_avatar_proxy/v4/letter/f/bcef8e/48.png",
            "https://elixirforum.com/user_avatar/elixirforum.com/marcus/48/24640_2.png",
            "https://elixirforum.com/user_avatar/elixirforum.com/pragtob/48/2401_2.png",
            "https://elixirforum.com/images/emoji/apple/slight_smile.png?v=12",
            "https://elixirforum.com/images/emoji/apple/wink.png?v=12",
            "https://elixirforum.com/uploads/default/optimized/2X/6/6f5c6293434442107dc837035899df32a7f8012f_2_690x388.png",
            "https://elixirforum.com/uploads/default/optimized/2X/4/4fe8fef4e7be176dd2970c98a2e066cdb3b61b1a_2_690x388.png",
            "https://elixirforum.com/user_avatar/elixirforum.com/peerreynders/48/5826_2.png",
            "https://elixirforum.com/user_avatar/elixirforum.com/peerreynders/48/5826_2.png",
            "https://elixirforum.com/letter_avatar_proxy/v4/letter/s/cab0a1/48.png",
            "https://elixirforum.com/letter_avatar_proxy/v4/letter/s/cab0a1/48.png",
            "https://elixirforum.com/images/emoji/apple/wink.png?v=9"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "agile",
            "discussion"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2016-12-23T10:36:57+00:00",
        "summary": "",
        "meta_description": "Do we need agile software development? \nI have found this talk by Eric Meijer: \n\nIt seems he doesn’t like Agile. \nWhat is your experience and opinion of Agile, Scrum, Kanban and so on? \nWould you sign the Agile Manifesto &hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://elixirforum.com/uploads/default/optimized/1X/4310e7de671d4920800063776e9b1f6dc268c692_2_32x32.ico",
        "meta_site_name": "Elixir Programming Language Forum",
        "canonical_link": "https://elixirforum.com/t/do-we-need-agile-software-development/2960",
        "text": "I do not like Agile much. it has some use cases granted , but agile tends to be shoehorned into everything nowadays.\n\nI still haven`t really understood why a scrum master is needed to make my work harder than it needs to.\n\nI can see the appeal of agile to enterprise management , there are courses to go to , signed papers that they can hang up on their wall.\n\nI still say common sense, somethings will need in depth planning and somethings can be iterated upon. Having a golden rule to define it all makes no sense. especially in the hardware world where I hail from.\n\nHaving a agile zealot tell me why agile development is the best thing ever for a nuclear plant …\n\nwell I prefer to know that the most obvious hiccups are planned for and not something that we will look into in the next release.\n\nCommon sense wins every time.\n\nTLDR; agile means adapting to the current situation, ever improving and searching for better ways to do things not getting stuck into a status quo and buzzwording on the train with lots of tool like lots of modern “agile implementations”\n\nThe problem is not “Agile” and its ideas but how it is applied and sold in many instances. A good friend of mine who was around for the early XP conferences blames it on Scrum being created by business people and sold to business people and engineered in a way that managers still have a comfortable spot. True agile software development doesn’t use all these fancy tools, it uses pen & paper…\n\nTrue agile is about… well being agile - not following processes but doing what works best for your team. Try new stuff out, doesn’t work? Try something else. One of my favorite posts is Uncomfortable with Agile by Andy Hunt\n\nA truly agile project team lives on the edge of chaos.\n\nNot slipping back into a comfortable, somnambulant stupor, and not pitching forward over the edge and into the dark abyss of chaos. Do too little and you stagnate, too much and you crash.\n\nDave Thomas also formulated his “Agile is dead” thoughts in a blog post (haven’t watched the video though)\n\nAnd I think one of the biggest problems is that everyone does “Agile” but most of try to do it by the book which is SUPER WRONG to my mind, some just pick and choose some parts of it and get totally diminished values. You gotta be agile to be cool, from Dave’s post:\n\nOnce the Manifesto became popular, the word agile became a magnet for anyone with points to espouse, hours to bill, or products to sell. It became a marketing term, coopted to improve sales in the same way that words such as eco and natural are. A word that is abused in this way becomes useless—it stops having meaning as it transitions into a brand.\n\nIn addition you can pay $$$ to become a certified scrum master within a weekend which is an enormous sad joke. Lots of “Scrum Masters” I met had no idea what they were doing, what they were doing was gardening JIRA and being gloomy when someone was late for standup but not really facilitating, unblocking people and improving the work flow as they ought to do.\n\nIn essence, I still believe in the ideas and values of Agile but I think most corporations don’t get them and think they do “Agile” thereby ruining it for the most part as they buy all the fancy tools to be “agile”.\n\nAbout the values, Andrea Tomasini once gave a talk called “Why practices are not as important as principles” beautifully illustrating what happens with those agile practices if the company/people don’t understand and value the principles, which is what I feel happens at a lot of companies. I’m sure some of those feel familiar to some people here, little extract:\n\nSorry for ranty tone and lengthy post, but as you can probably tell how “Agile” is often implemented and executed is somewhat aggravating to me while I really like the core principles, values and practices while I still believe we might be able to come up with something better eventually.\n\n“Common sense is not so common.”\n\n* Voltaire, Dictionnaire Philosophique (1764)\n\n.\n\nBy assuming your position is “common sense” and acting upon it, all you’re doing is insulting the people who disagree with you.\n\nYour frustration is primarily with some of the more high-profile commercial exploitation of the Agile Manifesto, which has always been more about making money from the enterprise rather than upholding the Agile Principles.\n\nIt all depends on the context and just because something claims to be “Agile” doesn’t mean it upholds the spirit of the Agile Principles. Don’t blame the Agile Manifesto just because “The Enterprise” prefers to buy pre-packaged solutions from big vendors who don’t care whether their product actually solves their client’s problems.\n\nThe Agile Manifesto in itself was in large part a reaction to commercialized implementations of the Rational Unified Process of the period (2001).\n\nSome issues were:\n\nThose process implementations assumed that the requirements were correct (they often were not)\n\nRequirement changes tended to be costly to push though because of the massive amount of ceremony that tended to be part of the process implementation\n\nFunctionality could only start to provide business value after a big bang release (or after a little bang if multiple releases were planned).\n\nSo the key idea behind Agile was to shorten feature delivery time in whatever way possible:\n\nSo that it could be determined pretty quickly when requirements did not reflect real needs (and related features could be axed before they are implemented) - i.e. improve feedback.\n\nSo that useful features can deliver business value as soon as possible.\n\nThe problem is that many corporations are infatuated with the idea that with “just the right process” they’ll be able to go Henry Ford and start cranking out loads of product with an army of minimum wage drones - and they are willing to pay good money for pre-digested packages that give them the perception of moving them into that direction.\n\nThis is what leads to “Feature Farms” - which aren’t a notion that is supported by the Agile Principles.\n\nTo quote Mary Poppendieck:\n\nwe need to move from delivery teams to problem solving teams\n\nThat is the true spirit that I see behind the Agile Principles (with the caveat that it’s sometimes better “to do stuff” to figure out if you are on the right path rather than to overthink matters).\n\nI’m all in for the pragmatic approach, you can find out what works in small iterations. I don’t like f.e. scrum at all and gathered a whole library of articles about it. Small part:\n\nAnti Agile: Day 1: Why I hate Agile methodologies (a fun read to start)\n\nhttp://okigiveup.net/not-big-fan-of-scrum (more about scrum)\n\nProcess kills developer passion - O'Reilly Radar (processes including f.e. TDD)\n\nhttps://www.youtube.com/watch?v=nvks70PD0Rs (a fun movie)\n\nWhy “Agile” and especially Scrum are terrible – Michael O. Church (classical one)\n\nhttps://www.linkedin.com/pulse/agile-dead-matthew-kern (a gathering of some interesting links, the writer I find arrogant)\n\nJust some funny remarks\n\nlet’s talk about the famous 3 questions: “What did I do yesterday ? What will I do today ? Do I have any impediments ?” Sounds like what my mum was asking me when I was 5 years old. “Well, yesterday at school, I learnt how to write my name. And today, I’m going to do some painting… but it’s hard: can you help me mommy ?“.\n\nI think model driven development is important to make a company agile. Get hard-coded rules, process flows etc. out of your code, put them in executable models and a business engineer gets ownership, transparancy and he can alter the models himself (no error-prone communication that travels over layers like productmanagers/owners and at last developers). Because the models are directly executable you don’t have to deliver new software (in a lot of cases at least, and of course the interpreter has to be delivered). There are OMG standards for these models: BPMN2.0 and DMN1.1. To give an idea I’ll show some screenprints of an application I’m building with elixir / phoenix:\n\nThese are examples of BPMN2.0 and DMN1.1 editors. Business rule task “Risicobepaling” (riscdetermination) is coupled to the DMN shown. These models are persisted in XML en directly executable (I built an interpreter).\n\nThis is the first usertask executing, below you can see the defintion of the task (slightly different BPMN than the first pic).\n\nYou can see the definitions working in the running application. The form definitions should be modeled separate from the BPMN, but that I have to implement yet.\n\nThis has been true for every interpretation Agile development I have encountered across companies from Europe and the US for the past 8-10 years.\n\nWell if my entire team spends half a day to a full day during a week in meetings to satisfy the agile protocol I really do not mind if they are. When a scrum master decides that certain required by law safety features are out of scope and we cant implement them, I`m not gonna spend an hour in a meeting smiling and nodding.\n\nNo project is made equal and in my experience Agile ironically cannot deal with that. Just leads to more inefficient use of time. almost every time. and for some reason agile begins at scratch every time, there is rarely a way of thinking that would allow for some code reuse across projects within the same company.\n\nI am not talking agile in its pure form, which might be good, but rather how most companies big and small implements it.\n\nI remain sceptical that any of these notations are universally effective when communicating with subject-matter experts (SME). UML initially made the same claim which turned out to be untrue and with Terry Halpin’s Object Role Modelling non-developers typically get off the bus right after Step 1: Transform familiar information examples into elementary facts, and apply quality checks of the Conceptual Schema Design Procedure (CSDP).\n\nI’m not saying that these notations aren’t useful for the designer to visualize, represent and document the model that they are developing. And they can be useful when communicating with a very select audience. But I often find that these notations don’t convey a lot of meaning to non-developers.\n\nSo for the time being I’m still a bit cynical about BPMN - viewing it mostly as a basis for tool-vendors to dazzle their current would-be clientele to invest lots of money into the most recent versions of their tool suites - which most likely also act as code generators. Code generators have their place but by their nature tend to be dogmatic (narrow in focus) and will rarely complain to the designer about being inappropriately applied to a problem.\n\nDon’t succumb to the false authority of a tool or model. There is no substitute for thinking.\n\nAndy Hunt, Pragmatic Thinking & Learning (p.41 P1.0, 2008)\n\nOften I find that it is necessary to “embed” oneself with the SME’s and possibly help them develop a more consistent (ubiquitous) language. Then after a clearly worded problem statement, valuable software solution features can usually be identified via narratives like for example Alistair Cockburn’s basic (text) use case template or user stories (or whatever else works - i.e. there is no “one size - fits all” solution).\n\nI remain sceptical that any of these notations are universally effective when communicating with subject-matter experts (SME).\n\nThe goal is making the modeling tools so user-friendly that a subject-matter expert (I called it a business engineer) can model…\n\nUML initially made the same claim which turned out to be untrue.\n\nMaybe BPMN was developed after realizing that f.e. UML was not fit. Maybe DMN was developed with a need / foreseen value also.\n\nI’m not saying that these notations aren’t useful for the designer to visualize, represent and document the model that they are developing.\n\nI was talking about executable models, not models to only document.\n\nBut I often find that these notations don't convey a lot of meaning to non-developers.\n\nIf you look carefully at f.e. only the DMN picture I sent, don’t you think it would be understandable for a\n\nbusiness expert? This is a “unique” rule, only one rule can evaluate to true. There are other rule types\n\neditable btw. Easy to learn. https://camunda.org/dmn/tutorial/#feel\n\nSo for the time being I’m still a bit cynical about BPMN - viewing it mostly as a basis for tool-vendors to dazzle their current would-be clientele to invest lots of money into the most recent versions of their tool suites - which most likely also act as code generators. Code generators have their place but by their nature tend to be dogmatic (narrow in focus) and will rarely complain to the designer about being inappropriately applied to a problem.\n\nThat is very cynical indeed. It is a basis for others also. And again, I am not talking about documentation tools only or code-generators, it is about executable models. The point of executable models is well explained here, by such an awfull capitalist toolvendor: https://www.mendix.com/blog/the-power-of-mendix/\n\nThere are lots of honest and intelligent people working in this modeling business btw.\n\nDon’t succumb to the false authority of a tool or model. There is no substitute for thinking. Andy Hunt, Pragmatic Thinking & Learning (p.41 P1.0, 2008)\n\nI don’t need the voice of an authority and I’m not succumbed. Stay critical, but do not cynically reject I would say. And modeling can’t be done without thinking.\n\nAt google not really, if you mean strict adhering to f.e. scrum-rules. As far as I read. From my infinite libraries this one is a good read also (Yegge is from google):\n\nhttp://steve-yegge.blogspot.nl/2006/09/good-agile-bad-agile_27.html. Small excerpts:\n\n- there are managers, sort of, but most of them code at least half-time, making them more like tech leads. - developers can switch teams and/or projects any time they want, no questions asked; just say the word and the movers will show up the next day to put you in your new office with your new team. - Google has a philosophy of not ever telling developers what to work on, and they take it pretty seriously. - developers are strongly encouraged to spend 20% of their time (and I mean their M-F, 8-5 time, not weekends or personal time) working on whatever they want, as long as it's not their main project. - there aren't very many meetings. I'd say an average developer attends perhaps 3 meetings a week, including their 1:1 with their lead. - it's quiet. Engineers are quietly focused on their work, as individuals or sometimes in little groups or 2 to 5. - there aren't Gantt charts or date-task-owner spreadsheets or any other visible project-management artifacts in evidence, not that I've ever seen. - even during the relatively rare crunch periods, people still go get lunch and dinner, which are (famously) always free and tasty, and they don't work insane hours unless they want to. [..] all you need is a work queue. That's it. You want hand-wavy math? I've got it in abundance: software development modeled on queuing theory. Not too far off the mark, though; many folks in our industry have noticed that organizational models are a lot like software models. With nothing more than a work queue (a priority queue, of course), you immediately attain most of the supposedly magical benefits of Agile Methodologies. And make no mistake, it's better to have it in software than on a bunch of index cards. If you're not convinced then I will steal your index cards. [..]"
    }
}