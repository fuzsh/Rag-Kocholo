{
    "id": "dbpedia_7103_3",
    "rank": 12,
    "data": {
        "url": "https://sureshsambandam.wordpress.com/2010/06/07/why-most-visual-development-4gl-tools-fail/",
        "read_more_link": "",
        "language": "en",
        "title": "Why most visual development / 4GL tools fail? ‚Äì Part 1",
        "top_image": "http://farm3.static.flickr.com/2601/4184481846_dbfd8fa65e.jpg",
        "meta_img": "http://farm3.static.flickr.com/2601/4184481846_dbfd8fa65e.jpg",
        "images": [
            "https://sureshsambandam.wordpress.com/wp-content/themes/pub/twentyten/images/headers/path.jpg?m=1610459589i",
            "https://i0.wp.com/farm3.static.flickr.com/2601/4184481846_dbfd8fa65e.jpg",
            "https://i0.wp.com/static.addtoany.com/buttons/share_save_256_24.png",
            "https://0.gravatar.com/avatar/9d5762f9666789b6b7571251e839088e6455da1580ef6ab106af1282f253a388?s=40&d=identicon&r=G",
            "https://1.gravatar.com/avatar/a3e95d1d969eb5f338915366c1b32d9495c0f6c82362c84991d829b0dc47a07f?s=40&d=identicon&r=G",
            "https://i0.wp.com/www.orangescape.com/wp-content/themes/orangescape/images/logo.png",
            "https://1.gravatar.com/avatar/a3e95d1d969eb5f338915366c1b32d9495c0f6c82362c84991d829b0dc47a07f?s=128&d=identicon&r=G",
            "http://t2.gstatic.com/images?q=tbn:ANd9GcTbetFHmCvzUn6FTqk8leL1WdEqzOGvno71fQSFjXUE37wHI11d",
            "https://sureshsambandam.files.wordpress.com/2010/06/followers-image.png?w=182",
            "https://secure.gravatar.com/blavatar/e5eb7a07afc5ea5217a8ad1c4adf8d0f7360c2542066c20b6846354714ce4c94?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://secure.gravatar.com/blavatar/e5eb7a07afc5ea5217a8ad1c4adf8d0f7360c2542066c20b6846354714ce4c94?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-06-07T00:00:00",
        "summary": "",
        "meta_description": "[tweetmeme source=\"sureshsambandam\" only_single=false]Part 1 : Top down vs Bottom Up There are quite a few visual development tools that have failed in the past. When I say past, I meant the pre-cloud era. The commercially successful ones are Visual Basic, PowerBuilder (just googled and found out that PowerBuilder still exists under Sybase) and Oracle Forms‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://secure.gravatar.com/blavatar/e5eb7a07afc5ea5217a8ad1c4adf8d0f7360c2542066c20b6846354714ce4c94?s=32",
        "meta_site_name": "Suresh Sambandam's Blog",
        "canonical_link": "https://sureshsambandam.wordpress.com/2010/06/07/why-most-visual-development-4gl-tools-fail/",
        "text": "[tweetmeme source=‚Äùsureshsambandam‚Äù only_single=false]Part 1 : Top down vs Bottom Up\n\nThere are quite a few visual development tools that have failed in the past. When I say past, I meant the pre-cloud era. The commercially successful ones are Visual Basic, PowerBuilder (just googled and found out that PowerBuilder still exists under Sybase) and Oracle Forms 4.5. Although, popularity and merits of the language need not co-relate. üôÇ !\n\nAnd, there are quite few that have come up in the current cloud paradigm. Few Examples : Coghead (already in dead pool), VisualForce of Force.com, WaveMaker, Zoho Creator. My POV is on the approach taken to solve the problem (of visual development) rather than any of the companies/products itself.\n\nIf you take a closer look at most of the visual products one subtle but startling similarity is: Most of them take a Top-Down approach for developing the application.\n\nIn my opinion, the problem lies here! If you want to know why see this Article on Wikipedia and Paul Graham‚Äòs blog post on ‚ÄòProgramming Bottom Up‚Äò. While Paul‚Äôs article goes into a little tangential context of enriching Lisp, leading to a richer dialect ‚Äì the essence of ‚ÄòBottom Up‚Äô comes out when you read between the lines. Also check out this thread Top Down vs Bottom Up on TheServerSide.com\n\nIt is natural for human comprehension to think of a system‚Äôs high level design and functional use cases in a ‚ÄòTop Down‚Äô style. However, when it comes to implementation, ‚Äòbottom up‚Äô approach has to be followed. The shortcoming with most of the visual development tools is that they have extended the natural human comprehension far too much into the implementation. To the extend that, most of these tools start with a visual canvas where the user starts painting the application by ‚Äòdrag and drop‚Äô-ing widgets from the palette box. While I understand that this is easy for business users and analysts to start off quickly ‚Äì there can be no compromise on the abstraction that is required to build good software.\n\nThe approach of starting from the page or a canvas can accomplish simpler ‚Äì situational applications (use and throw). However, it will be close to impossible to build industrial strength SaaS Business Application like an Insurance Underwriting System or an Automobile Dealer Management System. Also, the applications built using these tools will be little more than a ‚Äòdata entry‚Äô / ‚Äòbook keeping‚Äô system with very little capability to support sophisticated business logic (more on this in Part 2 of this series). In fact, when prospects approach us for simpler situational apps that doesn‚Äôt involve heavy duty business logic we have recommended ‚ÄòZoho Creator‚Äò ‚Äì another ‚ÄòMade In India, Made for the World‚Äò product. In fact, unlike other products Zoho Creator clearly mentions in their home page ‚ÄòBuild Your own online Database‚Äô.\n\nSo, what is the correct approach solution? Just like in OOP, implementation has to be bottom up. You define the object model for small components and start relating them with other components. An object model or data model, we use both these terms inter-changeably at OrangeScape, contains how an object is represented in an optimized / co-related fashion in conjunction with other objects in the system. Again, just like in OOP, the object is an encapsulated atomic unit that represent data + business logic (How do we deal with logic in Part 2). Many such fine grained objects together make up the data model of a logical business component. Putting all these logical business component model together in perspective gives the developer the full picture of the software ‚Äì I call this macro-model for want of better term.\n\nAll of this is not some theoretical rant! One Example. OrangeScape‚Äôs SI Partner Wipro ‚Äì using their development team ‚Äì with consulting from OrangeScape has implemented a very large ERP for a government organization where the ERP is being rolled out across 743 office locations in India. Each office location is a Tenant in this huge multi-tenant ERP. This project (I can‚Äôt name it yet, due to confidentiality clauses) is a prestigious project similar to the Citizen UID Project. We haven‚Äôt gone outside of OrangeScape‚Äôs Studio to build anything in this huge ERP implementation. The success of this project is a ‚Äòproof point‚Äô for my argument on ‚Äòbottom-up‚Äô approach supported by the OrangeScape PaaS Platform among many other capabilities.\n\nFinally, in my view, starting from ‚ÄòObject Model / Data Model‚Äô is closer to OOP and starting from UI Pages takes us back to days of ‚ÄòProcedural Coding‚Äô! After all these advancements in programming, why go back in time?\n\nI see you asking: ‚ÄòHow does one or OrangeScape for that matter bring out object modeling in a non-intrusive visual manner?‚Äù Will talk about that in an another post.\n\n[tweetmeme source=‚Äùsureshsambandam‚Äù only_single=false]"
    }
}