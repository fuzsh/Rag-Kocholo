{
    "id": "dbpedia_2862_3",
    "rank": 96,
    "data": {
        "url": "https://betterstack.com/community/guides/logging/how-to-control-journald-with-journalctl/",
        "read_more_link": "",
        "language": "en",
        "title": "How to View and Manage Systemd Logs with Journalctl",
        "top_image": "https://betterstack.com/og-image/how-to-control-journald-with-journalctl.png",
        "meta_img": "https://betterstack.com/og-image/how-to-control-journald-with-journalctl.png",
        "images": [
            "https://imagedelivery.net/xZXo0QFi-1_4Zimer-T0XQ/ac93c9ef-a7f6-4cff-0bcd-14982ccc7f00/orig",
            "https://imagedelivery.net/xZXo0QFi-1_4Zimer-T0XQ/ac93c9ef-a7f6-4cff-0bcd-14982ccc7f00/orig",
            "https://betterstack.com/assets/articles/authors/ayooluwa-isaiah-f240882dd153c62ad0f7f0a6dd33fe642a0fabca635395a7e6c1cce19f9cf42b.png",
            "https://betterstack.com/assets/articles/cc-by-nc-sa-1fa5a2f7978211f24b8230a7e79097dd1f8a36be35e813693c49348cf1689f42.png",
            "https://imagedelivery.net/xZXo0QFi-1_4Zimer-T0XQ/be0c8ec1-7925-4ba4-1840-9b74972bc200/public",
            "https://imagedelivery.net/xZXo0QFi-1_4Zimer-T0XQ/be0c8ec1-7925-4ba4-1840-9b74972bc200/public",
            "https://betterstack.com/assets/articles/authors/marin-0d19fe482115fe2b15c8429a7ee4eb88d803984eaa7c1d8c7309241049f3d402.png"
        ],
        "movies": [
            "https://betterstack.substack.com/embed"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ayooluwa Isaiah"
        ],
        "publish_date": "2022-01-11T13:04:20+00:00",
        "summary": "",
        "meta_description": "Learn how to view and manage systemd logs with journalctl.",
        "meta_lang": "en",
        "meta_favicon": "/assets/favicon-ad4a170f31b6075c4d7ea5e23ce36677b3412bdd2fabc48d1b688bc535c8821c.png",
        "meta_site_name": "",
        "canonical_link": "https://betterstack.com/community/guides/logging/how-to-control-journald-with-journalctl/",
        "text": "The systemd daemon uses a centralized logging system called a journal, which is managed by the journald daemon. This daemon collects all log entries generated by the Linux kernel or any other systemd unit service regardless of their origin and stores them in a format that is easy to access and manipulate. The journalctl utility is provided for querying and filtering the data held within the journal as written by the journald service,\n\nWhile diagnosing or troubleshooting an issue with the server or one of our services, the first place to look is the log entries in the journal. Due to its centralized nature, the journal could potentially contain thousands of log entries that may not be relevant to our current problem. Therefore, it's necessary to filter out what we don't need to quickly find the relevant information that will help us solve the problem, and that's what this tutorial is all about.\n\nðŸ”­ Want to centralize and monitor your Linux logs?\n\nHead over to Logtail and start ingesting your logs in 5 minutes.\n\nPrerequisites\n\nBefore you proceed with this tutorial, you will need the following:\n\nA Linux server that includes a non-root user with sudo access. We tested all the commands presented in this guide on an Ubuntu 20.04 server.\n\nA basic understanding of how logging works in Linux.\n\nStep 1 â€” Permitting a user to view the system logs\n\nBy default, a user can only see log entries from systemd services under the user's control. If you run the journalctl command without any arguments, you may see the following message at the top of the output:\n\nThis informs you that the output produced by the utility does not include entries created by system services and those under other users' control. The way to ensure that you can view all log messages is by adding the user to an existing group such as adm or systemd-journal.\n\nGo ahead and add the current user to the systemd-journal group using the command below:\n\nAfter logging out and logging back in again, you'll be able to to see all the available messages, and not just the ones that pertain to the current user.\n\nStep 2 â€” Querying the journal with Journalctl\n\nIn this section, we will query the systemd journal using journalctl, and view the results in various ways. Enter the command below to see all the logs collected by the journald daemon:\n\nWhen used alone without any options, the journalctl command will output all the journal entries on the system and pipe them through a pager (usually less). You can also cause journalctl to print its output directly to the standard output instead of using a pager by including the --no-pager flag. This is useful if you want to process the data further with text processing tools like grep, awk, or sed, or redirect the output to a file.\n\nThe first line of the output is a header that describes the time range of the displayed logs:\n\nBelow the header, you will see log entries generated by various programs in the following format and sorted from oldest to newest:\n\nEach entry starts with a timestamp, the hostname of the machine, the program that generated the log entry, and its process id. The log message itself comes afterward.\n\nIf you want to print only the last few log entries, you can use the -n option, which will restrict the printed entries to specified number:\n\nYou can also view incoming log messages in real-time through the -f flag, which imitates tail -f:\n\nIn later sections, we'll look at more sophisticated ways of filtering the logs produced by journalctl so that we can find the information we're looking for quickly. Let's discuss customizing the output of the journalctl command first though.\n\nStep 3 â€” Customizing the log output format\n\nWhen parsing the log entries produced by journalctl, it may be useful to change the format to an easy to parse format like JSON. This is possible by specifying the json format through the -o option:\n\nThis yields the following output:\n\nNotice how detailed this output is compared to the default and how more information is contained therein. You can also specify json-pretty instead of json:\n\nThis makes the command output more readable at the cost of screen real-estate:\n\nHere's a few of all available formats that control the output produced by journalctl. You can examine the complete list here.\n\ncat: includes the log message only.\n\nshort: the default output format.\n\njson: JSON-formatted output containing all available journal fields.\n\njson-pretty: prettified JSON output for better readability.\n\nverbose: displays the full log entry with all fields.\n\nNow that we have a handle on how to present the journalctl output in different ways, let's look at a few ways to narrow down the entries produced by the utility.\n\nStep 4 â€” Filtering the journal by boot session\n\nOne of the most common ways to filter the journalctl output is by only including messages that were logged after a specific system boot. For example, you can view all the logs collected since the most recent boot by executing journalctl with -b flag:\n\nThe program should display an output similar to the one shown below:\n\nThis output shows all records in chronological order as before. Before seeing application logs, you will observe that the oldest records show very low-level kernel information about the system boot processes.\n\nIf you want to print the logs that pertain to a boot session other than the last one, you can list all boots that journald knows about by executing journalctl with parameter --list-boots:\n\nYou'll see the program's output appear on the screen:\n\nThe output shows all the available system boots with their offset number, boot ID (an hexadecimal number), and time range. The value from the offset column can be used as shown below:\n\nYou can also use the boot ID as shown below:\n\nThis will show all the log entries that were collected within the boot session from 2021-04-14 16:01:14 to 2021-04-15 14:02:09.\n\nWhen dealing with servers that do not often reboot, filtering the logs by system boot may not be helpful as the current boot session may be the only one available. Therefore, in the next section, we'll consider a more granular way to restrict the log entries outputted by journalctl.\n\nStep 5 â€” Showing logs within a time range\n\nA typical way to filter system logs is by querying for those that fall before, after, or between a given period. You can use the --since flag to specify a lower time limit and the --until for an upper limit. Both flags accepts a timestamp value that follows the systemd.time specification. The following are examples of valid arguments to --since and -until.\n\n2021-11-23 23:02:15\n\n2021-05-04\n\n12:00\n\n5 hour ago, or 32 min ago\n\nyesterday, today, now\n\nLet's go ahead and view today's records using the command below:\n\nYou'll see the program's output appear on the screen:\n\nThe output may show a lot of records, but you'll observe that they were all recorded on the current day. You can also filter logs that fall on a specific date or between specific dates:\n\nAs you can see, journalctl provides great flexibility when it comes to filtering records by time. However, the log entries still contain records from several different services. If you're only interested in a records from a specific application, filtering by time only will still yield irrelevant messages. In the next section, we'll consider how to restrict the journalctl output to entries produced by a specific systemd service.\n\nStep 6 â€” Filtering journal entries by service\n\nIf you are interested only in log entries related to a specific systemd unit service, you can pass the service name to the -u flag. For example, let's view the last 10 log messages produced by the sshd service using the command shown below:\n\nYou'll see the program's output appear on the screen:\n\nFrom the output above, you can observe that only the records that pertain to sshd are displayed. If you need to view the logs for more than one service, you can repeat the -u flag in the command with the names of different services.\n\nThe entries produced from both services will be merged and presented in chronological order. You can also use the --since and --until flags to narrow down the results further as you see fit.\n\nStep 7 â€” Filtering journal entries by priority level\n\nEach journal record has a well-defined structure that also includes message priority. The journalctl command allows filtering records by message priority, which are the same as the standard syslog priority levels (listed in descending order):\n\nHere's an explanation of the levels above:\n\nemerg: the system is unusable.\n\nalert: action must be taken immediately.\n\ncrit: critical conditions.\n\nerr: error conditions.\n\nwarning: warning conditions.\n\nnotice: normal, but significant condition.\n\ninfo: informational message.\n\ndebug: messages that are useful for debugging.\n\nYou can specify the priority name or its corresponding number value when filtering log records with journalctl by using the -p option:\n\nThe command above will display all messages prioritized at err level or above. This means that the output will not contain messages logged at warning level or below.\n\nThis feature makes it easy to remove irrelevant information when troubleshooting a problem so that the higher priority messages can take center stage.\n\nStep 8 â€” Cleaning up old journal entries\n\nThe journalctl command also provides control over how much space is used up by the journal, and when to clean up older entries. You can use the --disk-usage flag to discover how much is currently being used up:\n\nYou should see the following output:\n\nIf you want to shrink your journal to a certain size, you can use the --vacuum-size option as shown below:\n\nYou'll see the program's output appear on the screen:\n\nAs you can see, the journal was shrunk to 500 MB after log entries totalling 1.3 GB in size were deleted from the archive. An alternative to --vacuum-size is the --vacuum-time option which allows you to delete logs older than a certain period of time.\n\nFor example, you can delete the entries that were created more than one month ago through the command below:\n\nYou can also limit the storage space that the journal takes up by editing the following options in the /etc/systemd/journald.conf file:\n\nSystemMaxUse= and RuntimeMaxUse=: the maximum amount of space that the journal should take up in a persistent storage (/var/log/journal) and in-memory storage (/run/log/journal) respectively.\n\nSystemKeepFree= and RuntimeKeepFree=: defines the percentage of disk space that should be kept free for other uses.\n\nSystemMaxFileSize= and RuntimeMaxFileSize=: controls how large journal entries should grow before being rotated.\n\nSystemMaxFiles= and RuntimeMaxFiles=: controls the maximum number of journal files to keep.\n\nConclusion\n\nIn this article, you learned about the systemd journal and how to manage it through the journalctl command. We started by discussing what the journal is for, and then described how to view and filter its entries in various ways. To learn more about the systemd journal and the journalctl command, consult the official documentation or type man journalctl in your terminal.\n\nThanks for reading, and happy logging!"
    }
}