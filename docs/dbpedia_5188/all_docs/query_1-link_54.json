{
    "id": "dbpedia_5188_1",
    "rank": 54,
    "data": {
        "url": "https://developer.okta.com/docs/reference/okta-expression-language/",
        "read_more_link": "",
        "language": "en",
        "title": "Okta Expression Language overview guide",
        "top_image": "https://developer.okta.com/favicon/favicon.png",
        "meta_img": "https://developer.okta.com/favicon/favicon.png",
        "images": [
            "https://developer.okta.com/img/logotype.svg",
            "https://developer.okta.com/img/icons/mode-light.svg",
            "https://developer.okta.com/img/icons/mode-dark-not-active.svg",
            "https://developer.okta.com/img/logotype.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn more about the features and syntax of Okta Expression Language, which you can use throughout the administrator UI and API.",
        "meta_lang": "en",
        "meta_favicon": "/favicon/favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://developer.okta.com/docs/reference/okta-expression-language/",
        "text": "Okta Expression Language overview\n\nThis document details the features and syntax of the Okta Expression Language (EL). You can use this language throughout the Admin Console and API for Okta Classic Engine and Okta Identity Engine.\n\nNote: If you're using EL for the authentication policies of the Identity Engine, Access Certification campaigns (opens new window), or Entitlement Management policies for Okta Identity Governance, use the features and syntax of the Okta Expression Language in Okta Identity Engine.\n\nOkta Expression Language is based on SpEL (opens new window) and uses a subset of the functionalities offered by SpEL.\n\nExpressions can reference, transform, and combine attributes before storing them on a user profile or passing them to an app for authentication or provisioning. For example, you might use a custom expression to create a username by stripping @company.com from an email address. Or, you might combine the firstName and lastName attributes into a single displayName attribute.\n\nNote: In this reference, $placeholder denotes a value that you need to replace with an appropriate variable. For example, in user.$attribute, $attribute can be replaced with firstName, lastName, email, and other valid values.\n\nReference user attributes\n\nWhen you create an Okta expression, you can reference any attribute that lives on an Okta user profile or app user profile.\n\nOkta user profile\n\nEvery user has an Okta user profile. The Okta user profile is the central source of truth for the core attributes of a user. To reference an Okta user profile attribute, specify user. and the attribute variable name. For a list of core user profile attributes, see Default profile properties.\n\nSyntax Definitions examples user.$attribute user reference to the Okta user\n\n$attribute the attribute variable name user.firstName\n\nuser.lastName\n\nuser.login\n\nuser.email\n\nNote: You can also access the user ID for each user with the following expression: user.getInternalProperty(\"id\").\n\nApplication user profile\n\nIn addition to an Okta user profile, all users have a separate app user profile for each of their apps. Application user profiles store app-specific information about users, such as the app userName or user role.\n\nTo reference a profile attribute of an app user, specify the app variable and the attribute variable in the user profile of the app. In specifying the app, you can either name the specific app you're referencing or use an implicit reference to an in-context app.\n\nNote: The app reference is usually the name of the app, as distinct from the label (display name). See Application properties. If your organization configures multiple instances of the same app, a randomly assigned suffix differentiates the names of the subsequent instances, for example: zendesk_9ao1g13. The name of any specific app instance in the Profile Editor appears in lighter text beneath the label of the app.\n\nSyntax Definitions examples $app.$attribute $app explicit reference to specific app instance\n\n$attribute the attribute variable name for the app instance's user profile zendesk.firstName\n\nactive_directory.managerUpn\n\ngoogle_apps.email appuser.$attribute appuser implicit reference to in-context app\n\n$attribute the attribute variable name appuser.firstName\n\nNote: Explicit references to apps aren't supported for OAuth 2.0/OIDC custom claims. See Expressions for OAuth 2.0/OIDC custom claims.\n\nIdP user profile\n\nIn addition to an Okta user profile, some users have separate IdP user profiles for their external Identity Provider. These IdP user profiles are used to store IdP-specific information about a user. You can use this data in an EL expression to transform an external user's username into the equivalent Okta username.\n\nTo reference an IdP user profile attribute, specify the IdP variable and the corresponding attribute variable for the IdP user profile of that Identity Provider. This profile is only available when specifying the username transform used to generate an Okta username for the IdP user.\n\nSyntax Definitions Examples idpuser.$attribute idpuser implicit reference to in-context IdP\n\n$attribute the attribute variable name idpuser.firstName\n\nNote: In the Universal Directory, the base Okta user profile has about 30 attributes. You can add any number of custom attributes. All app user profiles have a username attribute and possibly others depending on the app. To find a full list of Okta user and app user attributes and their variable names, in the Admin Console go to People > Profile Editor. If you're not using Universal Directory, contact your support or professional services team.\n\nReference app and organization properties\n\nIn addition to referencing user attributes, you can also reference app properties and the properties of your org. To reference a particular attribute, specify the appropriate binding and the attribute variable name. The binding for an app is its name with _app appended. The app name can be found as described in the profile attributes of an app user.\n\nApplication properties\n\nSyntax Definitions examples $app.$attribute $app explicit reference to specific app instance\n\n$attribute the attribute variable name office365_app.domain\n\nzendesk_app.companySubDomain app.$attribute app implicit reference to in-context app instance\n\n$attribute the attribute variable name app.domain\n\napp.companySubDomain\n\nNote: Explicit references to apps aren't supported for custom OAuth 2.0/OIDC claims.\n\nOrganization properties\n\nSyntax Definitions Examples org.$attribute org reference to Okta org\n\n$attribute the attribute variable name org.name\n\norg.subDomain\n\nReference session properties\n\nIn addition to referencing user, app, and organization properties, you can also reference user session properties. Session properties allow you to configure Okta to pass dynamic authentication context to SAML apps through the assertion using custom SAML attributes. The app can then use that information to limit access to certain app-specific behaviors and calculate the risk profile for the signed-in user.\n\nSession properties\n\nSyntax Definitions Evaluation example session.amr session reference to a user's session\n\namr the attribute name that is resolvable to an array of Authentication Method References (opens new window) [\"pwd\"]âpassword used by the user for authentication\n\n[\"mfa\", \"pwd\", \"kba\"]âpassword and MFA Security Question used by the user for authentication\n\n[\"mfa\", \"mca\", \"pwd\", \"sms\"]âpassword and MFA SMS used by the user for authentication\n\nFunctions\n\nOkta offers various functions to manipulate attributes or properties to generate a desired output. You can combine and nest functions inside a single expression.\n\nString functions\n\nFunction Input parameter signature Return type example Output String.append (String str, String suffix) String String.append(\"This is\", \" a test\") This is a test String.join (String separator, String... strings) String String.join(\",\", \"This\", \"is\", \"a\", \"test\") This,is,a,test String.join(\"\", \"This\", \"is\", \"a\", \"test\") Thisisatest String.len (String input) Integer String.len(\"This\") 4 String.removeSpaces (String input) String String.removeSpaces(\"This is a test\") Thisisatest String.replace (String input, String match, String replacement) String String.replace(\"This is a test\", \"is\", \"at\") That at a test String.replaceFirst (String input, String match, String replacement) String String.replaceFirst(\"This is a test\", \"is\", \"at\") That is a test String.startsWith (String input, String starts) Boolean String.startsWith(\"Kiss\", \"K\") true String.stringContains (String input, String searchString) Boolean String.stringContains(\"This is a test\", \"test\") true String.stringContains(\"This is a test\", \"doesn'tExist\") false String.stringSwitch (String input, String defaultString, String... keyValuePairs) String String.stringSwitch(\"This is a test\", \"default\", \"key1\", \"value1\") default String.stringSwitch(\"This is a test\", \"default\", \"test\", \"value1\") value1 String.stringSwitch(\"First match wins\", \"default\", \"absent\", \"value1\", \"wins\", \"value2\", \"match\", \"value3\") value2 String.stringSwitch(\"Substrings count\", \"default\", \"ring\", \"value1\") value1 String.substring (String input, int startIndex, int endIndex) String String.substring(\"This is a test\", 2, 9) is is a String.substringAfter (String input, String searchString) String String.substringAfter(\"abc@okta.com\", \"@\") okta.com String.substringBefore (String input, String searchString) String String.substringBefore(\"abc@okta.com\", \"@\") abc String.toUpperCase (String input) String String.toUpperCase(\"This\") THIS String.toLowerCase (String input) String String.toLowerCase(\"ThiS\") this\n\nThe following Deprecated functions perform some of the same tasks as the ones in the previous table.\n\nFunction Example Input Output toUpperCase(string) toUpperCase(source.firstName) Alexander ALEXANDER toLowerCase(string) toLowerCase(source.firstName) AlexANDER alexander substringBefore(string, string) substringBefore(user.email, '@') alex@okta.com alex substringAfter(string, string) substringAfter(user.email, '@') alex@okta.com okta.com substring(string, int, int) substring(source.firstName, 1, 4) Alexander lex\n\nArray functions\n\nFunction Return type Example Output Arrays.add(array, value) Array Arrays.add(user.arrayAttribute, 40) {10, 20, 30, 40} Arrays.remove(array, value) Array Arrays.remove(user.arrayAttribute, 20) {10, 30} Arrays.clear(array) Array Arrays.clear(user.arrayAttribute) { } Arrays.get(array, position) - Arrays.get({0, 1, 2}, 0) 0 Arrays.flatten(list of values) Array Arrays.flatten(10, {20, 30}, 40)\n\nArrays.flatten('10, 20, 30, 40') {10, 20, 30, 40} Arrays.contains(array, value) Boolean Arrays.contains({10, 20, 30}, 10) true Arrays.contains({10, 20, 30}, 50) false Arrays.size(array) Integer Arrays.size({10, 20, 30}) 3 Arrays.size(NULL) 0 Arrays.isEmpty(array) Boolean Arrays.isEmpty({10, 20}) false Arrays.isEmpty(NULL) true Arrays.toCsvString(array) String Arrays.toCsvString({\"This\", \"is\", \" a \", \"test\"}) This,is, a ,test\n\nNote: You can use comma-separated values (CSV) as an input parameter for all Arrays* functions. These values are converted into arrays.\n\nConversion functions\n\nData conversion functions\n\nFunction Return type Example Input Output Convert.toInt(string) Integer Convert.toInt(val) String val = '1234' 1234 Convert.toInt(double) Integer Convert.toInt(val) Double val = 123.4 123 Double val = 123.6 124 Convert.toNum(string) Double Convert.toNum(val) String val = '3.141' 3.141\n\nNote: The Convert.toInt(double) function rounds the passed numeric value either up or down to the nearest integer. Be sure to consider integer-type range limitations when converting from a number to an integer with this function.\n\nCountry code conversion functions\n\nThese functions convert between ISO 3166-1 2-character country codes (Alpha 2), 3-character country codes (Alpha 3), numeric country codes, and full ISO country names.\n\nFunction Return type Example Output Iso3166Convert.toAlpha2(string) String Iso3166Convert.toAlpha2(\"IND\") IN Iso3166Convert.toAlpha3(string) String Iso3166Convert.toAlpha3(\"840\") USA Iso3166Convert.toNumeric(string) String Iso3166Convert.toNumeric(\"USA\") 840 Iso3166Convert.toName(string) String Iso3166Convert.toName(\"IN\") India\n\nNote: All these functions take ISO 3166-1 2-character country codes (Alpha 2), 3-character country codes (Alpha 3), and numeric country codes as input. The function determines the input type and returns the output in the format specified by the function name.\n\nSee the ISO 3166-1 online lookup tool (opens new window).\n\nGroup functions\n\nGroup functions return either an array of groups or True or False.\n\nFunction Return type Example getFilteredGroups Array getFilteredGroups({\"00gml2xHE3RYRx7cM0g3\"}, \"group.name\", 40) Groups.contains Array contains(app_type/app_instance_id, pattern, limit) Groups.startsWith Array startsWith(app_type/app_instance_id, pattern, limit) Groups.endsWith Array endsWith(app_type/app_instance_id, pattern, limit) isMemberOfGroupName Boolean isMemberOfGroupName(\"group1\") isMemberOfGroup Boolean isMemberOfGroup(\"groupId\") isMemberOfAnyGroup Boolean isMemberOfAnyGroup(\"groupId1\", \"groupId2\", \"groupId3\") isMemberOfGroupNameStartsWith Boolean isMemberOfGroupNameStartsWith(\"San Fr\") isMemberOfGroupNameContains Boolean isMemberOfGroupNameContains(\"admin\") isMemberOfGroupNameRegex Boolean isMemberOfGroupNameRegex(\"/.*admin.*\")\n\nNote: The Groups.contains, Groups.startsWith, and Groups.endsWith group functions are designed to work only with group claims. You can't use these functions with property mappings.\n\nNote: The isMemberOfGroupName, isMemberOfGroup, isMemberOfAnyGroup, isMemberOfGroupNameStartsWith, isMemberOfGroupNameContains, isMemberOfGroupNameRegex group functions are designed to retrieve only an Okta user's group memberships. Don't use them to retrieve an app user's group memberships.\n\nNote: When EL group functions (such as isMemberOfGroup or isMemberOfGroupName) are used for app assignments, the profile attributes of the app user aren't updated or reapplied when the user's group membership changes. Okta only updates app user profile attributes when an app is assigned to a user or when mappings are applied.\n\nFor more information on using group functions for dynamic and static allowlists, see Customize tokens returned from Okta.\n\nImportant: When you use Groups.startsWith, Groups.endsWith, or Groups.contains, the pattern argument is matched and populated on the name attribute rather than the group's email (for example, when using a Google Workspace). If you're targeting groups that may have duplicate group names (such as Google groups), use the getFilteredGroups group function instead.\n\nExample: getFilteredGroups({\"00gml2xHE3RYRx7cM0g3\"}, \"group.name\", 40) )\n\nSee the parameter examples section of Use group functions for static group allowlists.\n\nLinked object function\n\nUse this function to retrieve the user identified with the specified primary relationship. You can then access the properties of that user.\n\nuser.getLinkedObject($primaryName):\n\nParameter: (String primaryName)\n\nReturn type: User\n\nExample: user.getLinkedObject(\"manager\").lastName\n\nExample result: Gates\n\nTime functions\n\nFunction Input parameter signature Return type Example output Time.now (String timeZoneId, String format) String Time.now() 2015-07-31T17:18:37.979Z (Current time, UTC format) Time.now(\"EST\") 2015-07-31T13:30:49.964-04:00 (Specified time zone) Time.now(\"EST\", \"YYYY-MM-dd HH:mm:ss\") 2015-07-31 13:36:48 (Specified time zone and format, military time) Time.fromWindowsToIso8601 (String time) String Windows timestamp time as a string (Windows/LDAP timestamp doc) The time expressed in ISO 8601 format (specifically the RFC 3339 subset of the ISO standard) Time.fromUnixToIso8601 (String time) String Unix timestamp time as a string (Unix timestamp reference) The time expressed in ISO 8601 format (specifically the RFC 3339 subset of the ISO standard). Time.fromStringToIso8601 (String time, String format) String Timestamp time in a human-readable yet machine-parseable arbitrary format (as defined by the Joda time pattern (opens new window)) The time expressed in ISO 8601 format (specifically the RFC 3339 subset of the ISO standard) Time.fromIso8601ToWindows (String time) String ISO 8601 timestamp time as a string The time expressed in Windows timestamp format Time.fromIso8601ToUnix (String time) String ISO 8601 timestamp time as a string The time expressed in Unix timestamp format Time.fromIso8601ToString (String time, String format) String ISO 8601 timestamp time converted to format using the same Joda time pattern (opens new window) semantics as fromStringToIso8601 The time expressed in Joda timestamp format\n\nNote: Both input parameters are optional for the Time.now function. The time zone ID supports both new and old style formats, listed previously. The third example for the Time.now function shows how to specify the military time format.\n\nOkta supports the use of the time zone IDs and aliases listed in the Time zone codes table.\n\nManager/assistant functions\n\nFunction Description Example getManagerUser(managerSource).$attribute Gets the manager's Okta user attribute values getManagerUser(\"active_directory\").firstName getManagerAppUser(managerSource, attributeSource).$attribute Gets the manager's app user attribute values for the app user of any app instance. getManagerAppUser(\"active_directory\", \"google\").firstName getAssistantUser(assistantSource).$attribute Gets the assistant's Okta user attribute values. getAssistantUser(\"active_directory\").firstName getAssistantAppUser(assistantSource, attributeSource).$attribute Gets the assistant's app user attribute values for the app user of any app instance. getAssistantAppUser(\"active_directory\", \"google\").firstName\n\nThe following should be noted about these functions:\n\nBe sure to pass the correct App name for the managerSource, assistantSource, and attributeSource parameters.\n\nCurrently, active_directory is the only supported value for managerSource and assistantSource.\n\nCalling either of the getManagerUser() or getManagerAppUser() functions doesn't trigger a user profile update after the manager is changed.\n\nThe manager and assistant functions aren't supported for user profiles sourced from multiple Active Directory instances.\n\nThe manager and assistant functions aren't supported for user profile attributes from multiple app instances. That is, the expression getManagerUser(\"active_directory\", \"google\").firstName returns null if your org has two or more instances of a google app.\n\nDirectory and Workday functions\n\nFunction Description hasDirectoryUser() Checks whether the user has an Active Directory (AD) assignment and returns true if the user has a single AD assignment or false if the user has either zero or multiple AD assignments hasWorkdayUser() Checks whether the user has a Workday assignment and returns a Boolean findDirectoryUser() Finds the Active Directory App user object and returns that object or null if the user has more than one or no Active Directory assignments findWorkdayUser() Finds the Workday App user object and returns that object or null if the user has more than one or no Workday assignments\n\nUse the previous functions together to check if a user has an Active Directory or Workday assignment, and if so, return a corresponding attribute. See the following 'Popular expressions' table for some examples.\n\nConstants and operators\n\nCommon Actions Example Refer to a String constant 'Hello world' Refer to an Integer constant 1234 Refer to a Number constant 3.141 Refer to a Boolean constant true Refer to an Array element {1, 2, 3}[0] or user.arrayProperty[0] Concatenate two strings user.firstName + user.lastName Concatenate two strings with space user.firstName + \" \" + user.lastName Ternary operator example:\n\nIf the group code is 123, assign the value of Sales, else assign Other user.groupCode == 123 ? 'Sales' : 'Other'\n\nConditional expressions\n\nYou can specify IF/THEN/ELSE statements with the Okta EL. The primary use of these expressions is profile mappings and group rules. Group rules don't usually specify an ELSE component.\n\nThe format for conditional expressions is:\n\n[Condition] ? [Value if TRUE] : [Value if FALSE]\n\nThere are several rules for specifying the condition:\n\nExpressions must have valid syntax.\n\nExpressions must evaluate to a Boolean.\n\nExpressions can't contain an assignment operator, such as =.\n\nUser attributes used in expressions can contain only available user or app user attributes.\n\nThe following functions are supported in these conditions:\n\nAny Okta Expression Language function\n\nThe AND operator\n\nThe OR operator\n\nThe ! operator to designate NOT\n\nStandard relational operators including <, >, <=, and >=.\n\nThe matches operator to evaluate a string against a regular expression (Regex) Deprecated\n\nNote: Use the double equals sign == to check for equality and != for inequality.\n\nThe following functions aren't supported in conditions:\n\nConversion\n\nArray\n\nTime\n\nConditional samples\n\nFor these samples, assume that the user has the following attributes in Okta.\n\nAttribute Type firstName String lastName String middleInitial String fullName String honorificPrefix String email1 String email2 String additionalEmail Boolean city String salary Int isContractor Boolean\n\nProfile mapping samples\n\nThe following samples are valid conditional expressions that apply to profile mapping. The attribute courtesyTitle is from another system being mapped to Okta.\n\nIf the middle initial isn't empty, include it as part of the full name, using just the first character and appending a period.\n\nfirstName + \" \" + (String.len(middleInitial) == 0 ? \"\" : (String.substring(middleInitial, 0, 1) + \". \")) + lastName\n\nInclude the honorific prefix in front of the full name, or use the courtesy title instead if it exists. If both are absent, don't use any title.\n\n(courtesyTitle != \"\" ? (courtesyTitle + \" \") : honorificPrefix != \"\" ? (honorificPrefix + \" \") : \"\") + firstName + \" \" + (String.len(middleInitial) == 0 ? \"\" : (String.substring(middleInitial, 0, 1) + \". \")) + lastName\n\nGroup rules samples\n\nThe following samples are valid conditional expressions. The actions in these cases are group assignments.\n\nIF (implicit) Condition Assign to this Group Name if Condition is TRUE IF String.stringContains(user.department, \"Sales\") Sales IF user.city == \"San Francisco\" sfo IF user.salary >= 1000000 expensiveEmployee IF !user.isContractor fullTimeEmployees IF user.salary > 1000000 AND !user.isContractor expensiveFullTimeEmployees IF user.department matches \"California-[a-zA-Z]+-Sales\" californiaSalesTeams IF user.primaryPhone matches \"(+\\d{1,2}\\s)?(?\\d{3})?[\\s.-]\\d{3}[\\s.-]\\d{4}\" allValidPhoneNumberTypes IF user.title matches '(?i)engineer' allEngineers\n\nCheck for null and blank attributes\n\nTo catch user attributes that are null or blank, use the following valid conditional expression:\n\nuser.employeeNumber != \"\" AND user.employeeNumber != null ? user.employeeNumber : user.nonEmployeeNumber\n\nIf a profile attribute has never been populated, catch it with the following expression:\n\nuser.employeeNumber == null\n\nIf a profile attribute was populated in the past but the content is removed, it's no longer null but an empty string. To catch these empty strings, use the following expression:\n\nuser.employeeNumber == \"\"\n\nPopular expressions\n\nSample user data:\n\nFirstname = Winston\n\nLastname = Churchill\n\nEmail = winston.churchill@gmail.com\n\nLogin = winston.churchill@gmail.com\n\nValue to obtain Expression Example output Explanation Firstname user.firstName Winston Obtain the value of the users' Firstname attribute. Firstname + Lastname user.firstName + user.lastName WinstonChurchill Obtain the Firstname and Lastname values and append each together. Firstname + Lastname with Separator user.firstName + \".\" + user.lastName Winston.Churchill Obtain Firstname value, append a \".\" character. Obtain and append the Lastname value. First initial + Lastname substring(user.firstName, 0, 1) + user.lastName WChurchill Obtain Firstname value. From the result, retrieve characters greater than position 0 through position 1, including position 1. Obtain and append the Lastname value. First initial + Lastname with Limit substring(user.firstName, 0, 1) + substring(user.lastName, 0, 6) WChurch Obtain Firstname value. From the result, retrieve 1 character starting at the beginning of the string. Obtain Last name value. From the result, retrieve characters greater than position 0 through position 6, including position 6. Lower Case First Initial + Lower Case Last name with Separator toLowerCase(substring( user.firstName, 0, 1)) + \".\" + toLowerCase(user.lastName) w.churchhill Obtain Firstname value. From the result, retrieve characters greater than position 0 through position 1, including position 1. Convert the result to lowercase. Append a \".\" character. Obtain the Lastname value. Convert to lowercase and append. Email Domain + Email Prefix with Separator toUpperCase(substringBefore( substringAfter(user.email, \"@\"), \".\")) + \"\\\" + substringBefore( user.email, \"@\") GMAIL\\winston.churchill Obtain Email value. From the result, parse everything after the \"@ character\". From the result, parse everything before the \".\" character. Convert to uppercase. Append a backslash \"\" character. Obtain the email value again. From the result, parse for everything before the \"@\" character. Email Domain + Lowercase First Initial and Lastname with Separator toUpperCase(substringBefore( substringAfter(user.email, \"@\"), \".\")) + \"\\\" + toLowerCase(substring( user.firstName, 0, 1)) + toLowerCase(user.lastName) GMAIL\\wchurchill Obtain Email value. From the result, parse everything after the \"@ character\". From the result, parse everything before the \".\" character. Convert to uppercase. Append a backslash \"\" character. Obtain the Firstname value. From the result, retrieve characters greater than position 0 through position 1, including position 1. Convert it to lowercase. Obtain the Lastname value and convert it to lowercase. Static Domain + Email Prefix with Separator \"XDOMAIN\\\" + toLowerCase(substring( user.firstName, 0, 1)) + toLowerCase(user.lastName) XDOMAIN\\wchurchill Add the XDOMAIN string. Append a backslash \"\" character. Obtain the Firstname value. From the result, retrieve characters greater than position 0 through position 1, including position 1. Convert it to lowercase. Obtain the Lastname value. Convert it to lowercase. Workday ID hasWorkdayUser() ? findWorkdayUser().employeeID : null 123456 Check if the user has a Workday assignment, and if so, return their Workday employee ID. Active Directory UPN hasDirectoryUser() ? findDirectoryUser().managerUpn : null bob@okta.com Check if the user has an Active Directory assignment, and if so, return their Active Directory manager UPN.\n\nExpressions for OAuth 2.0/OIDC custom claims\n\nOkta provides a few expressions that you can only use with OAuth 2.0/OIDC custom claims.\n\nNote: These expressions don't work for SAML 2.0 apps.\n\nSee Create claims.\n\nSee Include app-specific information in a custom claim.\n\nSyntax Definitions Examples app.$attribute app refers to the name of the OIDC app.\n\n$attribute refers to the attribute variable name. app.id\n\napp.clientId\n\napp.profile access.scope access refers to the access token that requests the scopes.\n\nscope refers to the array of granted scopes. access.scope\n\nSamples for OAuth 2.0/OIDC\n\nApp attributes samples\n\nTo include an app profile label, use the following expression:\n\napp.profile.label\n\nSee Include app-specific information in a custom claim.\n\naccess.scope samples\n\nIn API Access Management custom authorization servers, you can name a claim scope. Then, you can use the expression access.scope to return an array of granted scope strings.\n\nTo include a granted scope array and convert it to a space-delimited string, use the following expression:\n\nString.replace(Arrays.toCsvString(access.scope),\",\",\" \")\n\nExpressions in group rules\n\nGroup rule conditions only allow String, Arrays, and user expressions.\n\nFor example, given the user profile has a base string attribute called email, and assuming the user profile has a custom Boolean attribute called hasBadge and a custom string attribute called favoriteColor, the following expressions are allowed in group rule conditions:\n\nuser.hasBadge\n\nString.stringContains(user.email, \"@example.com\")\n\nArrays.contains(user.favoriteColors, \"blue\")\n\nThe following expression isn't allowed in group rule conditions, even if the user profile has a custom integer attribute called yearJoined:\n\nConvert.toInt(\"2018\") == user.yearJoined\n\nAppendix: Time zone codes\n\nOkta supports the use of the following time zone codes:"
    }
}