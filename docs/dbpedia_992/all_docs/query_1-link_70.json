{
    "id": "dbpedia_992_1",
    "rank": 70,
    "data": {
        "url": "https://xclim.readthedocs.io/en/stable/notebooks/usage.html",
        "read_more_link": "",
        "language": "en",
        "title": "xclim Official Documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://xclim.readthedocs.io/en/stable/_static/xclim-logo-light.png",
            "https://xclim.readthedocs.io/en/stable/_static/xclim-logo-dark.png",
            "https://xclim.readthedocs.io/en/stable/_images/notebooks_usage_24_1.png",
            "https://xclim.readthedocs.io/en/stable/_images/notebooks_usage_26_0.png",
            "https://xclim.readthedocs.io/en/stable/_images/notebooks_usage_28_0.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Back to top\n\nDownload this notebook from github.\n\nBasic Usage¶\n\nClimate indicator computations¶\n\nxclim is a library of climate indicators that operate on xarray DataArray objects. Indicators perform health checks on input data, converts units as needed, assign nans when input data is missing, and format outputs according to the Climate and Forecast (CF) convention. As the list of indicators has grown quite large, indicators are accessed through their realm (xclim.atmos, xclim.land and xclim.seaIce) to help browsing indicators by the domain they apply to.\n\nIndicators should not be confused with indices, which define the algorithmic layer of each indicator. Those indices perform no checks beyond units compliance, and should be considered as low-level functions. See the respective documentation on indicators and indices for more information.\n\nTo use xclim in a project, import both xclim and xarray.\n\n[1]:\n\nfrom __future__ import annotations import xarray as xr import xclim.indices from xclim import testing\n\nIndex calculations are performed by opening a NetCDF-like file, accessing the variable of interest, and calling the index function, which returns a new xarray.DataArray.\n\nFor this example, we’ll first open a demonstration dataset storing surface air temperature and compute the number of growing degree days (the sum of degrees above a certain threshold) at the yearly frequency. The time frequency parameter, here YS, is specified using pandas offset aliases. Note that some offsets might not be supported for non-standard calendars (e.g. 360_day), see the xarray.cftime_range documentation for details.\n\n[2]:\n\n# Normally, we would use xarray to open a dataset, e.g.: # ds = xr.open_dataset(\"your_file.nc\") # For this example, let's use a test dataset from xclim: ds = testing.open_dataset(\"ERA5/daily_surface_cancities_1990-1993.nc\") ds.tas\n\n[2]:\n\n<xarray.DataArray 'tas' (location: 5, time: 1461)> Size: 29kB [7305 values with dtype=float32] Coordinates: lon (location) float32 20B ... * location (location) <U9 180B 'Halifax' 'Montréal' ... 'Victoria' lat (location) float32 20B ... * time (time) datetime64[ns] 12kB 1990-01-01 1990-01-02 ... 1993-12-31 Attributes: cell_methods: time: mean within days long_name: Mean daily surface temperature original_variable: t2m standard_name: air_temperature units: K\n\nxarray.DataArray\n\n'tas'\n\nlocation: 5\n\ntime: 1461\n\n...\n\n[7305 values with dtype=float32]\n\nCoordinates: (4)\n\nlon\n\n(location)\n\nfloat32\n\n...\n\naxis :\n\nX\n\nlong_name :\n\nlongitude\n\nstandard_name :\n\nlongitude\n\nunits :\n\ndegree_east\n\n[5 values with dtype=float32]\n\nlocation\n\n(location)\n\n<U9\n\n'Halifax' 'Montréal' ... 'Victoria'\n\nlong_name :\n\nCity\n\narray(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='<U9')\n\nlat\n\n(location)\n\nfloat32\n\n...\n\naxis :\n\nY\n\nlong_name :\n\nlatitude\n\nstandard_name :\n\nlatitude\n\nunits :\n\ndegree_north\n\n[5 values with dtype=float32]\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n1990-01-01 ... 1993-12-31\n\narray(['1990-01-01T00:00:00.000000000', '1990-01-02T00:00:00.000000000', '1990-01-03T00:00:00.000000000', ..., '1993-12-29T00:00:00.000000000', '1993-12-30T00:00:00.000000000', '1993-12-31T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (2)\n\nlocation\n\nPandasIndex\n\nPandasIndex(Index(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='object', name='location'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['1990-01-01', '1990-01-02', '1990-01-03', '1990-01-04', '1990-01-05', '1990-01-06', '1990-01-07', '1990-01-08', '1990-01-09', '1990-01-10', ... '1993-12-22', '1993-12-23', '1993-12-24', '1993-12-25', '1993-12-26', '1993-12-27', '1993-12-28', '1993-12-29', '1993-12-30', '1993-12-31'], dtype='datetime64[ns]', name='time', length=1461, freq=None))\n\nAttributes: (5)\n\ncell_methods :\n\ntime: mean within days\n\nlong_name :\n\nMean daily surface temperature\n\noriginal_variable :\n\nt2m\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n[3]:\n\ngdd = xclim.atmos.growing_degree_days(tas=ds.tas, thresh=\"10.0 degC\", freq=\"YS\") gdd\n\n[3]:\n\n<xarray.DataArray 'growing_degree_days' (location: 5, time: 4)> Size: 80B array([[7.7692175e+02, 7.0389856e+02, 6.3124426e+02, 6.5188275e+02], [1.2268644e+03, 1.3581746e+03, 1.1266934e+03, 1.2207186e+03], [6.9931946e+00, 2.3919769e+01, 6.5368652e-01, 1.8717316e+01], [9.2984143e+02, 1.0083430e+03, 7.1768420e+02, 6.2909644e+02], [5.8704321e+02, 5.0202234e+02, 5.9931348e+02, 5.6781555e+02]], dtype=float32) Coordinates: lon (location) float32 20B -63.4 -73.4 -68.4 -106.7 -123.2 * location (location) <U9 180B 'Halifax' 'Montréal' ... 'Victoria' lat (location) float32 20B 44.5 45.5 63.75 52.0 48.5 * time (time) datetime64[ns] 32B 1990-01-01 1991-01-01 ... 1993-01-01 Attributes: units: K days cell_methods: time: mean within days time: sum over days history: [2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE... standard_name: integral_of_air_temperature_excess_wrt_time long_name: Cumulative sum of temperature degrees for mean daily temp... description: Annual growing degree days (mean temperature above 10.0 d...\n\nxarray.DataArray\n\n'growing_degree_days'\n\nlocation: 5\n\ntime: 4\n\n776.9 703.9 631.2 651.9 1.227e+03 ... 629.1 587.0 502.0 599.3 567.8\n\narray([[7.7692175e+02, 7.0389856e+02, 6.3124426e+02, 6.5188275e+02], [1.2268644e+03, 1.3581746e+03, 1.1266934e+03, 1.2207186e+03], [6.9931946e+00, 2.3919769e+01, 6.5368652e-01, 1.8717316e+01], [9.2984143e+02, 1.0083430e+03, 7.1768420e+02, 6.2909644e+02], [5.8704321e+02, 5.0202234e+02, 5.9931348e+02, 5.6781555e+02]], dtype=float32)\n\nCoordinates: (4)\n\nlon\n\n(location)\n\nfloat32\n\n-63.4 -73.4 -68.4 -106.7 -123.2\n\naxis :\n\nX\n\nlong_name :\n\nlongitude\n\nstandard_name :\n\nlongitude\n\nunits :\n\ndegree_east\n\narray([ -63.4 , -73.4 , -68.4 , -106.65, -123.15], dtype=float32)\n\nlocation\n\n(location)\n\n<U9\n\n'Halifax' 'Montréal' ... 'Victoria'\n\nlong_name :\n\nCity\n\narray(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='<U9')\n\nlat\n\n(location)\n\nfloat32\n\n44.5 45.5 63.75 52.0 48.5\n\naxis :\n\nY\n\nlong_name :\n\nlatitude\n\nstandard_name :\n\nlatitude\n\nunits :\n\ndegree_north\n\narray([44.5 , 45.5 , 63.75, 52. , 48.5 ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n1990-01-01 ... 1993-01-01\n\narray(['1990-01-01T00:00:00.000000000', '1991-01-01T00:00:00.000000000', '1992-01-01T00:00:00.000000000', '1993-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (2)\n\nlocation\n\nPandasIndex\n\nPandasIndex(Index(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='object', name='location'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['1990-01-01', '1991-01-01', '1992-01-01', '1993-01-01'], dtype='datetime64[ns]', name='time', freq='YS-JAN'))\n\nAttributes: (6)\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: mean within days time: sum over days\n\nhistory :\n\n[2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE_DAYS(tas=tas, thresh='10.0 degC', freq='YS') with options check_missing=any - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10.0 degc\n\ndescription :\n\nAnnual growing degree days (mean temperature above 10.0 degc).\n\nThis computation was made using the growing_degree_days indicator. The same computation could be made through the index. You can see how the metadata is a lot poorer here.\n\n[4]:\n\ngdd = xclim.indices.growing_degree_days(tas=ds.tas, thresh=\"10.0 degC\", freq=\"YS\") gdd\n\n[4]:\n\n<xarray.DataArray 'tas' (location: 5, time: 4)> Size: 80B array([[7.7692175e+02, 7.0389856e+02, 6.3124426e+02, 6.5188275e+02], [1.2268644e+03, 1.3581746e+03, 1.1266934e+03, 1.2207186e+03], [6.9931946e+00, 2.3919769e+01, 6.5368652e-01, 1.8717316e+01], [9.2984143e+02, 1.0083430e+03, 7.1768420e+02, 6.2909644e+02], [5.8704321e+02, 5.0202234e+02, 5.9931348e+02, 5.6781555e+02]], dtype=float32) Coordinates: lon (location) float32 20B -63.4 -73.4 -68.4 -106.7 -123.2 * location (location) <U9 180B 'Halifax' 'Montréal' ... 'Victoria' lat (location) float32 20B 44.5 45.5 63.75 52.0 48.5 * time (time) datetime64[ns] 32B 1990-01-01 1991-01-01 ... 1993-01-01 Attributes: units: K d\n\nxarray.DataArray\n\n'tas'\n\nlocation: 5\n\ntime: 4\n\n776.9 703.9 631.2 651.9 1.227e+03 ... 629.1 587.0 502.0 599.3 567.8\n\narray([[7.7692175e+02, 7.0389856e+02, 6.3124426e+02, 6.5188275e+02], [1.2268644e+03, 1.3581746e+03, 1.1266934e+03, 1.2207186e+03], [6.9931946e+00, 2.3919769e+01, 6.5368652e-01, 1.8717316e+01], [9.2984143e+02, 1.0083430e+03, 7.1768420e+02, 6.2909644e+02], [5.8704321e+02, 5.0202234e+02, 5.9931348e+02, 5.6781555e+02]], dtype=float32)\n\nCoordinates: (4)\n\nlon\n\n(location)\n\nfloat32\n\n-63.4 -73.4 -68.4 -106.7 -123.2\n\naxis :\n\nX\n\nlong_name :\n\nlongitude\n\nstandard_name :\n\nlongitude\n\nunits :\n\ndegree_east\n\narray([ -63.4 , -73.4 , -68.4 , -106.65, -123.15], dtype=float32)\n\nlocation\n\n(location)\n\n<U9\n\n'Halifax' 'Montréal' ... 'Victoria'\n\nlong_name :\n\nCity\n\narray(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='<U9')\n\nlat\n\n(location)\n\nfloat32\n\n44.5 45.5 63.75 52.0 48.5\n\naxis :\n\nY\n\nlong_name :\n\nlatitude\n\nstandard_name :\n\nlatitude\n\nunits :\n\ndegree_north\n\narray([44.5 , 45.5 , 63.75, 52. , 48.5 ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n1990-01-01 ... 1993-01-01\n\narray(['1990-01-01T00:00:00.000000000', '1991-01-01T00:00:00.000000000', '1992-01-01T00:00:00.000000000', '1993-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (2)\n\nlocation\n\nPandasIndex\n\nPandasIndex(Index(['Halifax', 'Montréal', 'Iqaluit', 'Saskatoon', 'Victoria'], dtype='object', name='location'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['1990-01-01', '1991-01-01', '1992-01-01', '1993-01-01'], dtype='datetime64[ns]', name='time', freq='YS-JAN'))\n\nAttributes: (1)\n\nunits :\n\nK d\n\nThe call to xclim.indices.growing_degree_days first checked that the input variable units were units of temperature, ran the computation, then set the output’s units to the appropriate unit (here \"K d\" or Kelvin days). As you can see, the Indicator returned the same output, but with more metadata, it also performed more checks as explained below.\n\ngrowing_degree_days makes most sense with daily input, but could theoretically accept other source frequencies. The computational layer (``Index``) assumes that users have checked that the input data has the expected temporal frequency and has no missing values. However, no checks are performed, so the output data could be wrong (which is why it’s always safer to use ``Indicator`` objects from the CF layer, as demonstrated in the following section).\n\nFinally, as almost all indices, the function takes a freq argument to specify over what time period it is computed. These are called “Offset Aliases” and are the same as the resampling string arguments. Valid arguments are detailed in pandas docs (note that aliases involving “business” notions are not supported by xarray and thus could raise issues in xclim).\n\nUnits handling paradigm¶\n\nIndices are written in order to be flexible as to the sampling frequency and units of the data. You can use growing_degree_days on, for example, the 6-hourly data, but the output will then be in degree-hour units (\"K h\"). Moreover, all units, even when untouched by the calculation, will be reformatted into a CF-compliant symbol format. This behaviour was chosen to ensure consistency between all indices.\n\nVery few indices will convert their output to specific units; Rather, it is the dimensionality that will be consistent on output. The Units Handling page goes more into detail on how unit conversion can easily be done.\n\nThis doesn’t apply to ``Indicators``. Those will always output data in a specific unit, the one listed in the Indicators.cf_attrs metadata dictionary.\n\nConventions¶\n\nAs you may have noticed, the growing_degree_days function above was not told along which dimension to operate. In xclim, the temporal dimension is always assumed to be named \"time\". All functions which reduce or compute over that dimension will expect that name. If you ever have another name in your data, you can simply rename it like:\n\nds = ds.rename(T=\"time\")\n\nFor other names and attributes, xclim tries to follow different sets of conventions. In particular, input data should follow the CF conventions whenever possible for variable attributes. Variable names are usually the ones used in CMIP6, when they exist.\n\nIndicators¶\n\nIndices with Health Checks and Metadata Attributes\n\nIndicator instances from the CF layer are found in modules bearing the name of the computational realm in which its input variables are typically found: xclim.atmos, xclim.land and xclim.seaIce. These objects run sanity checks on the input variables and set output’s metadata according to CF-conventions when applicable. Some checks involve:\n\nIdentifying periods where missing data significantly impacts the calculation and omits calculations for those periods. Those are called “missing methods” and are detailed in section Health checks.\n\nAppending process history and maintaining the historical provenance of file metadata.\n\nWriting Climate and Forecast Convention compliant metadata based on the variables and indices calculated.\n\nThose modules are best used for producing NetCDF files that will be shared with users. See Climate Indicators for a list of available indicators.\n\nIf we run the growing_degree_days indicator over a non-daily dataset, we’ll be warned that the input data is not daily. That is, running xclim.atmos.growing_degree_days(ds.air, thresh='10.0 degC', freq='MS') will fail with a ValidationError:\n\n[5]:\n\n# Show that data is not at a daily time frequency ds6h = xr.tutorial.open_dataset(\"air_temperature\") xr.infer_freq(ds6h.time)\n\n[5]:\n\n'6h'\n\n[6]:\n\ngdd = xclim.atmos.growing_degree_days(tas=ds6h.air, thresh=\"10.0 degC\", freq=\"MS\") gdd\n\n--------------------------------------------------------------------------- ValueError Traceback (most recent call last) ValueError: Frequency of time series not strictly in ['D']. To mute this, set xclim's option data_validation='log'. The above exception was the direct cause of the following exception: ValidationError Traceback (most recent call last) Cell In[6], line 1 ----> 1 gdd = xclim.atmos.growing_degree_days(tas=ds6h.air,thresh=\"10.0 degC\",freq=\"MS\") 2 gdd File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:826, in Indicator.__call__(self, *args, **kwds) 823 out_attrs = {} 824 out_attrs = [out_attrs.copy() for i in range(self.n_outs)] --> 826 das, params = self._preprocess_and_checks(das,params) 828 # Get correct variable names for the compute function. 829 inv_var_map = dict(map(reversed, self._variable_mapping.items())) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:1522, in ResamplingIndicator._preprocess_and_checks(self, das, params) 1520 def _preprocess_and_checks(self, das, params): 1521 \"\"\"Perform parent's checks and also check if freq is allowed.\"\"\" -> 1522 das, params = super()._preprocess_and_checks(das,params) 1524 # Check if the period is allowed: 1525 if self.allowed_periods is not None: File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:1557, in IndexingIndicator._preprocess_and_checks(self, das, params) 1555 def _preprocess_and_checks(self, das: dict[str, DataArray], params: dict[str, Any]): 1556 \"\"\"Perform parent's checks and also check if freq is allowed.\"\"\" -> 1557 das, params = super()._preprocess_and_checks(das,params) 1559 indxr = params.get(\"indexer\") 1560 if indxr: File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:961, in Indicator._preprocess_and_checks(self, das, params) 959 \"\"\"Actions to be done after parsing the arguments and before computing.\"\"\" 960 # Pre-computation validation checks on DataArray arguments --> 961 self._bind_call(self.datacheck,**das) 962 self._bind_call(self.cfcheck, **das) 963 return das, params File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:998, in Indicator._bind_call(self, func, **das) 995 return func(*das.values()) 996 else: 997 # Call the func using bound arguments --> 998 return func(*ba.args,**ba.kwargs) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/indicator.py:1314, in Indicator.datacheck(self, **das) 1312 for key, da in das.items(): 1313 if \"time\" in da.coords and da.time.ndim == 1 and len(da.time) > 3: -> 1314 datachecks.check_freq(da,self.src_freq,strict=True) 1316 datachecks.check_common_time( 1317 [ 1318 da (...) 1321 ] 1322 ) File <boltons.funcutils.FunctionBuilder-200>:2, in check_freq(var, freq, strict) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/options.py:126, in datacheck.<locals>.run_check(*args, **kwargs) 124 @wraps(func) 125 def run_check(*args, **kwargs): --> 126 return _run_check(func,DATA_VALIDATION,*args,**kwargs) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/options.py:118, in _run_check(func, option, *args, **kwargs) 116 func(*args, **kwargs) 117 except ValidationError as err: --> 118 raise_warn_or_log(err,OPTIONS[option],stacklevel=4) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/utils.py:520, in raise_warn_or_log(err, mode, msg, err_type, stacklevel) 518 warnings.warn(message, stacklevel=stacklevel + 1) 519 else: # mode == \"raise\" --> 520 raise err from err_type(message) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/options.py:116, in _run_check(func, option, *args, **kwargs) 114 \"\"\"Run function and customize exception handling based on option.\"\"\" 115 try: --> 116 func(*args,**kwargs) 117 except ValidationError as err: 118 raise_warn_or_log(err, OPTIONS[option], stacklevel=4) File ~/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/datachecks.py:54, in check_freq(var, freq, strict) 50 v_base = parse_offset(v_freq)[1] 51 if v_base not in exp_base or ( 52 strict and all(compare_offsets(v_freq, \"!=\", frq) for frq in freq) 53 ): ---> 54 raise ValidationError( 55 f\"Frequency of time series not {'strictly'if strictelse''} in {freq}. \" 56 \"To mute this, set xclim's option data_validation='log'.\" 57 ) ValidationError: Frequency of time series not strictly in ['D']. To mute this, set xclim's option data_validation='log'.\n\nResampling to a daily frequency and running the same indicator succeeds, but we will still get warnings from the CF metadata checks.\n\n[7]:\n\ndaily_ds = ds6h.resample(time=\"D\").mean(keep_attrs=True) gdd = xclim.atmos.growing_degree_days(daily_ds.air, thresh=\"10.0 degC\", freq=\"YS\") gdd\n\n/home/docs/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/cfchecks.py:42: UserWarning: Variable does not have a `cell_methods` attribute. _check_cell_methods( /home/docs/checkouts/readthedocs.org/user_builds/xclim/conda/stable/lib/python3.12/site-packages/xclim/core/cfchecks.py:46: UserWarning: Variable does not have a `standard_name` attribute. check_valid(vardata, \"standard_name\", data[\"standard_name\"])\n\n[7]:\n\n<xarray.DataArray 'growing_degree_days' (time: 2, lat: 25, lon: 53)> Size: 21kB array([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [3.3140000e+01, 5.0820000e+01, 6.6547500e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [5.2316325e+03, 4.9528950e+03, 4.8025250e+03, ..., 5.0538700e+03, 4.8727100e+03, 4.7088425e+03], [5.3719450e+03, 5.2851025e+03, 5.1083600e+03, ..., 5.0971750e+03, 5.0670275e+03, 4.9550875e+03], [5.4538425e+03, 5.4520700e+03, 5.3567675e+03, ..., 5.2816975e+03, 5.2564150e+03, 5.2638300e+03]], [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [1.0225000e+00, 5.5400000e+00, 1.0475000e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [5.3532675e+03, 5.1235375e+03, 5.0373750e+03, ..., 4.9186050e+03, 4.7180025e+03, 4.5376700e+03], [5.5628725e+03, 5.5094125e+03, 5.3455275e+03, ..., 4.9107950e+03, 4.8807025e+03, 4.7494125e+03], [5.6539475e+03, 5.6700200e+03, 5.5670575e+03, ..., 5.0756925e+03, 5.0595400e+03, 5.0693950e+03]]]) Coordinates: * lat (lat) float32 100B 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0 * lon (lon) float32 212B 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0 * time (time) datetime64[ns] 16B 2013-01-01 2014-01-01 Attributes: units: K days cell_methods: time: sum over days history: [2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE... standard_name: integral_of_air_temperature_excess_wrt_time long_name: Cumulative sum of temperature degrees for mean daily temp... description: Annual growing degree days (mean temperature above 10.0 d...\n\nxarray.DataArray\n\n'growing_degree_days'\n\ntime: 2\n\nlat: 25\n\nlon: 53\n\n0.0 0.0 0.0 0.0 0.0 ... 5.251e+03 5.076e+03 5.06e+03 5.069e+03\n\narray([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [3.3140000e+01, 5.0820000e+01, 6.6547500e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [5.2316325e+03, 4.9528950e+03, 4.8025250e+03, ..., 5.0538700e+03, 4.8727100e+03, 4.7088425e+03], [5.3719450e+03, 5.2851025e+03, 5.1083600e+03, ..., 5.0971750e+03, 5.0670275e+03, 4.9550875e+03], [5.4538425e+03, 5.4520700e+03, 5.3567675e+03, ..., 5.2816975e+03, 5.2564150e+03, 5.2638300e+03]], [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [1.0225000e+00, 5.5400000e+00, 1.0475000e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [5.3532675e+03, 5.1235375e+03, 5.0373750e+03, ..., 4.9186050e+03, 4.7180025e+03, 4.5376700e+03], [5.5628725e+03, 5.5094125e+03, 5.3455275e+03, ..., 4.9107950e+03, 4.8807025e+03, 4.7494125e+03], [5.6539475e+03, 5.6700200e+03, 5.5670575e+03, ..., 5.0756925e+03, 5.0595400e+03, 5.0693950e+03]]])\n\nCoordinates: (3)\n\nlat\n\n(lat)\n\nfloat32\n\n75.0 72.5 70.0 ... 20.0 17.5 15.0\n\narray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. ], dtype=float32)\n\nlon\n\n(lon)\n\nfloat32\n\n200.0 202.5 205.0 ... 327.5 330.0\n\narray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n2013-01-01 2014-01-01\n\narray(['2013-01-01T00:00:00.000000000', '2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (3)\n\nlat\n\nPandasIndex\n\nPandasIndex(Index([75.0, 72.5, 70.0, 67.5, 65.0, 62.5, 60.0, 57.5, 55.0, 52.5, 50.0, 47.5, 45.0, 42.5, 40.0, 37.5, 35.0, 32.5, 30.0, 27.5, 25.0, 22.5, 20.0, 17.5, 15.0], dtype='float32', name='lat'))\n\nlon\n\nPandasIndex\n\nPandasIndex(Index([200.0, 202.5, 205.0, 207.5, 210.0, 212.5, 215.0, 217.5, 220.0, 222.5, 225.0, 227.5, 230.0, 232.5, 235.0, 237.5, 240.0, 242.5, 245.0, 247.5, 250.0, 252.5, 255.0, 257.5, 260.0, 262.5, 265.0, 267.5, 270.0, 272.5, 275.0, 277.5, 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 322.5, 325.0, 327.5, 330.0], dtype='float32', name='lon'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['2013-01-01', '2014-01-01'], dtype='datetime64[ns]', name='time', freq='YS-JAN'))\n\nAttributes: (6)\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: sum over days\n\nhistory :\n\n[2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE_DAYS(tas=air, thresh='10.0 degC', freq='YS') with options check_missing=any - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10.0 degc\n\ndescription :\n\nAnnual growing degree days (mean temperature above 10.0 degc).\n\nTo suppress the CF validation warnings, we can set xclim to send these warnings to the log instead of raising a warning or an error. We also could set data_validation='warn' to be able to run the indicator on non-daily data. These options can be set globally or within a context manager with set_options.\n\nThe missing method which determines if a period should be considered missing or not can be controlled through the check_missing option, globally or contextually. The main missing methods also have options that can be modified.\n\n[8]:\n\nwith xclim.set_options( check_missing=\"pct\", missing_options={\"pct\": dict(tolerance=0.1)}, cf_compliance=\"log\", ): # Change the missing method to \"percent\", instead of the default \"any\" # Set the tolerance to 10%, periods with more than 10% of missing data # in the input will be masked in the output. gdd = xclim.atmos.growing_degree_days(daily_ds.air, thresh=\"10.0 degC\", freq=\"MS\") gdd\n\n[8]:\n\n<xarray.DataArray 'growing_degree_days' (time: 24, lat: 25, lon: 53)> Size: 254kB array([[[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [393.3325, 372.03 , 364.9675, ..., 378.77 , 363.77 , 344.67 ], [412.905 , 408.1775, 393.645 , ..., 385.57 , 377.9125, 363.1825], [431.0075, 430.6525, 421.145 , ..., 407.7925, 401.37 , 399.5625]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ... [446.9725, 426.0025, 422.16 , ..., 445.855 , 435.3075, 419.87 ], [474.45 , 469.8575, 453.6475, ..., 448.6225, 452.1325, 442.0675], [480.7025, 482.03 , 472.3725, ..., 466.99 , 467.755 , 468.9075]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [412.275 , 388.785 , 390.86 , ..., 414.7275, 405.0925, 392.5525], [443.1725, 442.87 , 434.985 , ..., 427.88 , 431.1575, 420.95 ], [461.8175, 467.36 , 462.2 , ..., 450.975 , 451.77 , 451.3725]]]) Coordinates: * lat (lat) float32 100B 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0 * lon (lon) float32 212B 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0 * time (time) datetime64[ns] 192B 2013-01-01 2013-02-01 ... 2014-12-01 Attributes: units: K days cell_methods: time: sum over days history: [2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE... standard_name: integral_of_air_temperature_excess_wrt_time long_name: Cumulative sum of temperature degrees for mean daily temp... description: Monthly growing degree days (mean temperature above 10.0 ...\n\nxarray.DataArray\n\n'growing_degree_days'\n\ntime: 24\n\nlat: 25\n\nlon: 53\n\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 467.0 464.3 464.0 451.0 451.8 451.4\n\narray([[[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [393.3325, 372.03 , 364.9675, ..., 378.77 , 363.77 , 344.67 ], [412.905 , 408.1775, 393.645 , ..., 385.57 , 377.9125, 363.1825], [431.0075, 430.6525, 421.145 , ..., 407.7925, 401.37 , 399.5625]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ... [446.9725, 426.0025, 422.16 , ..., 445.855 , 435.3075, 419.87 ], [474.45 , 469.8575, 453.6475, ..., 448.6225, 452.1325, 442.0675], [480.7025, 482.03 , 472.3725, ..., 466.99 , 467.755 , 468.9075]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [412.275 , 388.785 , 390.86 , ..., 414.7275, 405.0925, 392.5525], [443.1725, 442.87 , 434.985 , ..., 427.88 , 431.1575, 420.95 ], [461.8175, 467.36 , 462.2 , ..., 450.975 , 451.77 , 451.3725]]])\n\nCoordinates: (3)\n\nlat\n\n(lat)\n\nfloat32\n\n75.0 72.5 70.0 ... 20.0 17.5 15.0\n\narray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. ], dtype=float32)\n\nlon\n\n(lon)\n\nfloat32\n\n200.0 202.5 205.0 ... 327.5 330.0\n\narray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n2013-01-01 ... 2014-12-01\n\narray(['2013-01-01T00:00:00.000000000', '2013-02-01T00:00:00.000000000', '2013-03-01T00:00:00.000000000', '2013-04-01T00:00:00.000000000', '2013-05-01T00:00:00.000000000', '2013-06-01T00:00:00.000000000', '2013-07-01T00:00:00.000000000', '2013-08-01T00:00:00.000000000', '2013-09-01T00:00:00.000000000', '2013-10-01T00:00:00.000000000', '2013-11-01T00:00:00.000000000', '2013-12-01T00:00:00.000000000', '2014-01-01T00:00:00.000000000', '2014-02-01T00:00:00.000000000', '2014-03-01T00:00:00.000000000', '2014-04-01T00:00:00.000000000', '2014-05-01T00:00:00.000000000', '2014-06-01T00:00:00.000000000', '2014-07-01T00:00:00.000000000', '2014-08-01T00:00:00.000000000', '2014-09-01T00:00:00.000000000', '2014-10-01T00:00:00.000000000', '2014-11-01T00:00:00.000000000', '2014-12-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (3)\n\nlat\n\nPandasIndex\n\nPandasIndex(Index([75.0, 72.5, 70.0, 67.5, 65.0, 62.5, 60.0, 57.5, 55.0, 52.5, 50.0, 47.5, 45.0, 42.5, 40.0, 37.5, 35.0, 32.5, 30.0, 27.5, 25.0, 22.5, 20.0, 17.5, 15.0], dtype='float32', name='lat'))\n\nlon\n\nPandasIndex\n\nPandasIndex(Index([200.0, 202.5, 205.0, 207.5, 210.0, 212.5, 215.0, 217.5, 220.0, 222.5, 225.0, 227.5, 230.0, 232.5, 235.0, 237.5, 240.0, 242.5, 245.0, 247.5, 250.0, 252.5, 255.0, 257.5, 260.0, 262.5, 265.0, 267.5, 270.0, 272.5, 275.0, 277.5, 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 322.5, 325.0, 327.5, 330.0], dtype='float32', name='lon'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['2013-01-01', '2013-02-01', '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01', '2014-12-01'], dtype='datetime64[ns]', name='time', freq='MS'))\n\nAttributes: (6)\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: sum over days\n\nhistory :\n\n[2024-07-04 20:46:28] growing_degree_days: GROWING_DEGREE_DAYS(tas=air, thresh='10.0 degC', freq='MS') with options check_missing=pct, missing_options={'tolerance': 0.1} - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10.0 degc\n\ndescription :\n\nMonthly growing degree days (mean temperature above 10.0 degc).\n\nSome indicators also expose time-selection arguments as **indexer keywords. This allows to run the index on a subset of the time coordinates, for example only on a specific season, month, or between two dates in every year. It relies on the select_time function. Some indicators will simply select the time period and run the calculations, while others will smartly perform the selection at the right time, when the order of operation makes a difference. All will pass the indexer kwargs to the missing value handling, ensuring that the missing values outside the valid time period are not considered.\n\nThe next example computes the annual sum of growing degree days over 10 °C, but only considering days from the 1st of April to the 30th of September.\n\n[9]:\n\nwith xclim.set_options(cf_compliance=\"log\"): gdd = xclim.atmos.growing_degree_days( tas=daily_ds.air, thresh=\"10 degC\", freq=\"YS\", date_bounds=(\"04-01\", \"09-30\") ) gdd\n\n[9]:\n\n<xarray.DataArray 'growing_degree_days' (time: 2, lat: 25, lon: 53)> Size: 21kB array([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [3.3140000e+01, 5.0820000e+01, 6.6547500e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.7736925e+03, 2.6248125e+03, 2.5183250e+03, ..., 2.6201800e+03, 2.5202225e+03, 2.4362000e+03], [2.8073425e+03, 2.7539400e+03, 2.6544850e+03, ..., 2.6141125e+03, 2.6077125e+03, 2.5585950e+03], [2.8185550e+03, 2.8164475e+03, 2.7658500e+03, ..., 2.6862100e+03, 2.6818700e+03, 2.6931650e+03]], [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [1.0225000e+00, 5.5400000e+00, 1.0475000e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.8183225e+03, 2.6905300e+03, 2.6107825e+03, ..., 2.5506500e+03, 2.4474625e+03, 2.3652025e+03], [2.8695325e+03, 2.8242575e+03, 2.7269100e+03, ..., 2.5259925e+03, 2.5199475e+03, 2.4677575e+03], [2.8881075e+03, 2.8856875e+03, 2.8283700e+03, ..., 2.5869850e+03, 2.5948550e+03, 2.6111175e+03]]]) Coordinates: * lat (lat) float32 100B 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0 * lon (lon) float32 212B 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0 * time (time) datetime64[ns] 16B 2013-01-01 2014-01-01 Attributes: units: K days cell_methods: time: sum over days history: [2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE... standard_name: integral_of_air_temperature_excess_wrt_time long_name: Cumulative sum of temperature degrees for mean daily temp... description: Annual growing degree days (mean temperature above 10 degc).\n\nxarray.DataArray\n\n'growing_degree_days'\n\ntime: 2\n\nlat: 25\n\nlon: 53\n\n0.0 0.0 0.0 0.0 0.0 ... 2.659e+03 2.587e+03 2.595e+03 2.611e+03\n\narray([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [3.3140000e+01, 5.0820000e+01, 6.6547500e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.7736925e+03, 2.6248125e+03, 2.5183250e+03, ..., 2.6201800e+03, 2.5202225e+03, 2.4362000e+03], [2.8073425e+03, 2.7539400e+03, 2.6544850e+03, ..., 2.6141125e+03, 2.6077125e+03, 2.5585950e+03], [2.8185550e+03, 2.8164475e+03, 2.7658500e+03, ..., 2.6862100e+03, 2.6818700e+03, 2.6931650e+03]], [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [1.0225000e+00, 5.5400000e+00, 1.0475000e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.8183225e+03, 2.6905300e+03, 2.6107825e+03, ..., 2.5506500e+03, 2.4474625e+03, 2.3652025e+03], [2.8695325e+03, 2.8242575e+03, 2.7269100e+03, ..., 2.5259925e+03, 2.5199475e+03, 2.4677575e+03], [2.8881075e+03, 2.8856875e+03, 2.8283700e+03, ..., 2.5869850e+03, 2.5948550e+03, 2.6111175e+03]]])\n\nCoordinates: (3)\n\nlat\n\n(lat)\n\nfloat32\n\n75.0 72.5 70.0 ... 20.0 17.5 15.0\n\narray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. ], dtype=float32)\n\nlon\n\n(lon)\n\nfloat32\n\n200.0 202.5 205.0 ... 327.5 330.0\n\narray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n2013-01-01 2014-01-01\n\narray(['2013-01-01T00:00:00.000000000', '2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (3)\n\nlat\n\nPandasIndex\n\nPandasIndex(Index([75.0, 72.5, 70.0, 67.5, 65.0, 62.5, 60.0, 57.5, 55.0, 52.5, 50.0, 47.5, 45.0, 42.5, 40.0, 37.5, 35.0, 32.5, 30.0, 27.5, 25.0, 22.5, 20.0, 17.5, 15.0], dtype='float32', name='lat'))\n\nlon\n\nPandasIndex\n\nPandasIndex(Index([200.0, 202.5, 205.0, 207.5, 210.0, 212.5, 215.0, 217.5, 220.0, 222.5, 225.0, 227.5, 230.0, 232.5, 235.0, 237.5, 240.0, 242.5, 245.0, 247.5, 250.0, 252.5, 255.0, 257.5, 260.0, 262.5, 265.0, 267.5, 270.0, 272.5, 275.0, 277.5, 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 322.5, 325.0, 327.5, 330.0], dtype='float32', name='lon'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['2013-01-01', '2014-01-01'], dtype='datetime64[ns]', name='time', freq='YS-JAN'))\n\nAttributes: (6)\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: sum over days\n\nhistory :\n\n[2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE_DAYS(tas=air, thresh='10 degC', freq='YS', date_bounds=('04-01', '09-30')) with options check_missing=any - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10 degc\n\ndescription :\n\nAnnual growing degree days (mean temperature above 10 degc).\n\nxclim also allows us to call indicators using datasets and variable names.\n\n[10]:\n\nwith xclim.set_options(cf_compliance=\"log\"): gdd = xclim.atmos.growing_degree_days( tas=\"air\", thresh=\"10.0 degC\", freq=\"MS\", ds=daily_ds ) # variable names default to xclim names, so we can even do this: renamed_daily_ds = daily_ds.rename(air=\"tas\") gdd = xclim.atmos.growing_degree_days( thresh=\"10.0 degC\", freq=\"MS\", ds=renamed_daily_ds ) gdd\n\n[10]:\n\n<xarray.DataArray 'growing_degree_days' (time: 24, lat: 25, lon: 53)> Size: 254kB array([[[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [393.3325, 372.03 , 364.9675, ..., 378.77 , 363.77 , 344.67 ], [412.905 , 408.1775, 393.645 , ..., 385.57 , 377.9125, 363.1825], [431.0075, 430.6525, 421.145 , ..., 407.7925, 401.37 , 399.5625]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ... [446.9725, 426.0025, 422.16 , ..., 445.855 , 435.3075, 419.87 ], [474.45 , 469.8575, 453.6475, ..., 448.6225, 452.1325, 442.0675], [480.7025, 482.03 , 472.3725, ..., 466.99 , 467.755 , 468.9075]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [412.275 , 388.785 , 390.86 , ..., 414.7275, 405.0925, 392.5525], [443.1725, 442.87 , 434.985 , ..., 427.88 , 431.1575, 420.95 ], [461.8175, 467.36 , 462.2 , ..., 450.975 , 451.77 , 451.3725]]]) Coordinates: * lat (lat) float32 100B 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0 * lon (lon) float32 212B 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0 * time (time) datetime64[ns] 192B 2013-01-01 2013-02-01 ... 2014-12-01 Attributes: units: K days cell_methods: time: sum over days history: [2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE... standard_name: integral_of_air_temperature_excess_wrt_time long_name: Cumulative sum of temperature degrees for mean daily temp... description: Monthly growing degree days (mean temperature above 10.0 ...\n\nxarray.DataArray\n\n'growing_degree_days'\n\ntime: 24\n\nlat: 25\n\nlon: 53\n\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 ... 467.0 464.3 464.0 451.0 451.8 451.4\n\narray([[[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [393.3325, 372.03 , 364.9675, ..., 378.77 , 363.77 , 344.67 ], [412.905 , 408.1775, 393.645 , ..., 385.57 , 377.9125, 363.1825], [431.0075, 430.6525, 421.145 , ..., 407.7925, 401.37 , 399.5625]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ... [446.9725, 426.0025, 422.16 , ..., 445.855 , 435.3075, 419.87 ], [474.45 , 469.8575, 453.6475, ..., 448.6225, 452.1325, 442.0675], [480.7025, 482.03 , 472.3725, ..., 466.99 , 467.755 , 468.9075]], [[ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], [ 0. , 0. , 0. , ..., 0. , 0. , 0. ], ..., [412.275 , 388.785 , 390.86 , ..., 414.7275, 405.0925, 392.5525], [443.1725, 442.87 , 434.985 , ..., 427.88 , 431.1575, 420.95 ], [461.8175, 467.36 , 462.2 , ..., 450.975 , 451.77 , 451.3725]]])\n\nCoordinates: (3)\n\nlat\n\n(lat)\n\nfloat32\n\n75.0 72.5 70.0 ... 20.0 17.5 15.0\n\narray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. ], dtype=float32)\n\nlon\n\n(lon)\n\nfloat32\n\n200.0 202.5 205.0 ... 327.5 330.0\n\narray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n2013-01-01 ... 2014-12-01\n\narray(['2013-01-01T00:00:00.000000000', '2013-02-01T00:00:00.000000000', '2013-03-01T00:00:00.000000000', '2013-04-01T00:00:00.000000000', '2013-05-01T00:00:00.000000000', '2013-06-01T00:00:00.000000000', '2013-07-01T00:00:00.000000000', '2013-08-01T00:00:00.000000000', '2013-09-01T00:00:00.000000000', '2013-10-01T00:00:00.000000000', '2013-11-01T00:00:00.000000000', '2013-12-01T00:00:00.000000000', '2014-01-01T00:00:00.000000000', '2014-02-01T00:00:00.000000000', '2014-03-01T00:00:00.000000000', '2014-04-01T00:00:00.000000000', '2014-05-01T00:00:00.000000000', '2014-06-01T00:00:00.000000000', '2014-07-01T00:00:00.000000000', '2014-08-01T00:00:00.000000000', '2014-09-01T00:00:00.000000000', '2014-10-01T00:00:00.000000000', '2014-11-01T00:00:00.000000000', '2014-12-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nIndexes: (3)\n\nlat\n\nPandasIndex\n\nPandasIndex(Index([75.0, 72.5, 70.0, 67.5, 65.0, 62.5, 60.0, 57.5, 55.0, 52.5, 50.0, 47.5, 45.0, 42.5, 40.0, 37.5, 35.0, 32.5, 30.0, 27.5, 25.0, 22.5, 20.0, 17.5, 15.0], dtype='float32', name='lat'))\n\nlon\n\nPandasIndex\n\nPandasIndex(Index([200.0, 202.5, 205.0, 207.5, 210.0, 212.5, 215.0, 217.5, 220.0, 222.5, 225.0, 227.5, 230.0, 232.5, 235.0, 237.5, 240.0, 242.5, 245.0, 247.5, 250.0, 252.5, 255.0, 257.5, 260.0, 262.5, 265.0, 267.5, 270.0, 272.5, 275.0, 277.5, 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 322.5, 325.0, 327.5, 330.0], dtype='float32', name='lon'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['2013-01-01', '2013-02-01', '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01', '2014-12-01'], dtype='datetime64[ns]', name='time', freq='MS'))\n\nAttributes: (6)\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: sum over days\n\nhistory :\n\n[2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE_DAYS(tas=tas, thresh='10.0 degC', freq='MS') with options check_missing=any - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10.0 degc\n\ndescription :\n\nMonthly growing degree days (mean temperature above 10.0 degc).\n\nFinally, we can also get datasets as an output with the as_dataset option.\n\n[11]:\n\nwith xclim.set_options(as_dataset=True, cf_compliance=\"log\"): gdd_ds = xclim.atmos.growing_degree_days( tas=daily_ds.air, thresh=\"10 degC\", freq=\"YS\", date_bounds=(\"04-01\", \"09-30\") ) gdd_ds\n\n[11]:\n\n<xarray.Dataset> Size: 22kB Dimensions: (lat: 25, lon: 53, time: 2) Coordinates: * lat (lat) float32 100B 75.0 72.5 70.0 ... 20.0 17.5 15.0 * lon (lon) float32 212B 200.0 202.5 205.0 ... 327.5 330.0 * time (time) datetime64[ns] 16B 2013-01-01 2014-01-01 Data variables: growing_degree_days (time, lat, lon) float64 21kB 0.0 0.0 ... 2.611e+03 Attributes: history: [2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE_DAYS(...\n\nxarray.Dataset\n\nDimensions:\n\nlat: 25\n\nlon: 53\n\ntime: 2\n\nCoordinates: (3)\n\nlat\n\n(lat)\n\nfloat32\n\n75.0 72.5 70.0 ... 20.0 17.5 15.0\n\narray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. ], dtype=float32)\n\nlon\n\n(lon)\n\nfloat32\n\n200.0 202.5 205.0 ... 327.5 330.0\n\narray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. ], dtype=float32)\n\ntime\n\n(time)\n\ndatetime64[ns]\n\n2013-01-01 2014-01-01\n\narray(['2013-01-01T00:00:00.000000000', '2014-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\nData variables: (1)\n\ngrowing_degree_days\n\n(time, lat, lon)\n\nfloat64\n\n0.0 0.0 0.0 ... 2.595e+03 2.611e+03\n\nunits :\n\nK days\n\ncell_methods :\n\ntime: sum over days\n\nhistory :\n\n[2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE_DAYS(tas=air, thresh='10 degC', freq='YS', date_bounds=('04-01', '09-30')) with options check_missing=any - xclim version: 0.51.0\n\nstandard_name :\n\nintegral_of_air_temperature_excess_wrt_time\n\nlong_name :\n\nCumulative sum of temperature degrees for mean daily temperature above 10 degc\n\ndescription :\n\nAnnual growing degree days (mean temperature above 10 degc).\n\narray([[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [3.3140000e+01, 5.0820000e+01, 6.6547500e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.7736925e+03, 2.6248125e+03, 2.5183250e+03, ..., 2.6201800e+03, 2.5202225e+03, 2.4362000e+03], [2.8073425e+03, 2.7539400e+03, 2.6544850e+03, ..., 2.6141125e+03, 2.6077125e+03, 2.5585950e+03], [2.8185550e+03, 2.8164475e+03, 2.7658500e+03, ..., 2.6862100e+03, 2.6818700e+03, 2.6931650e+03]], [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], [1.0225000e+00, 5.5400000e+00, 1.0475000e+01, ..., 0.0000000e+00, 0.0000000e+00, 0.0000000e+00], ..., [2.8183225e+03, 2.6905300e+03, 2.6107825e+03, ..., 2.5506500e+03, 2.4474625e+03, 2.3652025e+03], [2.8695325e+03, 2.8242575e+03, 2.7269100e+03, ..., 2.5259925e+03, 2.5199475e+03, 2.4677575e+03], [2.8881075e+03, 2.8856875e+03, 2.8283700e+03, ..., 2.5869850e+03, 2.5948550e+03, 2.6111175e+03]]])\n\nIndexes: (3)\n\nlat\n\nPandasIndex\n\nPandasIndex(Index([75.0, 72.5, 70.0, 67.5, 65.0, 62.5, 60.0, 57.5, 55.0, 52.5, 50.0, 47.5, 45.0, 42.5, 40.0, 37.5, 35.0, 32.5, 30.0, 27.5, 25.0, 22.5, 20.0, 17.5, 15.0], dtype='float32', name='lat'))\n\nlon\n\nPandasIndex\n\nPandasIndex(Index([200.0, 202.5, 205.0, 207.5, 210.0, 212.5, 215.0, 217.5, 220.0, 222.5, 225.0, 227.5, 230.0, 232.5, 235.0, 237.5, 240.0, 242.5, 245.0, 247.5, 250.0, 252.5, 255.0, 257.5, 260.0, 262.5, 265.0, 267.5, 270.0, 272.5, 275.0, 277.5, 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 322.5, 325.0, 327.5, 330.0], dtype='float32', name='lon'))\n\ntime\n\nPandasIndex\n\nPandasIndex(DatetimeIndex(['2013-01-01', '2014-01-01'], dtype='datetime64[ns]', name='time', freq='YS-JAN'))\n\nAttributes: (1)\n\nhistory :\n\n[2024-07-04 20:46:29] growing_degree_days: GROWING_DEGREE_DAYS(tas=air, thresh='10 degC', freq='YS', date_bounds=('04-01', '09-30')) with options check_missing=any - xclim version: 0.51.0\n\nGraphics¶\n\nXclim does not have specific functions to create graphics. However, it is built to ensure that Indices and Indicators always have appropriate axis-related metadata that libraries like Matplotlib depend on to generate detailed and informative graphics.\n\nThis graphical functionality is entirely thanks to xarray, so the following examples are applicable to generic xarray.DataArray objects. For more examples, see the directions suggested by xarray’s plotting documentation\n\nThe xarray plot functions creates a histogram when the DataArray has 3 or more dimensions. In previous steps, xclim automatically filled the long_name and units attributes, which xarray uses to label the x-axis.\n\n[12]:\n\nimport matplotlib.pyplot as plt print(\"long_name:\", gdd.attrs[\"long_name\"]) print(\"units:\", gdd.attrs[\"units\"]) gdd.plot() plt.suptitle(\"Summary Statistics Histogram\") plt.show()\n\nlong_name: Cumulative sum of temperature degrees for mean daily temperature above 10.0 degc units: K days\n\nWhen the DataArray only has a time dimension, xarray plots a timeseries. In this case, xarray uses the long_name and units attributes provided by xclim to label the y-axis.\n\n[13]:\n\ngdd.isel(lon=20, lat=10).plot() plt.suptitle(\"Time Series at a Given Geographical Coordinate\") plt.show()\n\nWhen the DataArray only has 2 dimensions, xarray plots a heatmap. In this case, xarray uses the long_name and units attributes provided by xclim to label the colorbar.\n\n[14]:\n\ngdd.sel(time=\"2013-07-01\").plot() plt.suptitle(\"Spatial Pattern at a Specific Time Period\") plt.show()\n\nWriting DataArrays and Datasets to disk¶\n\nTo save the data as a new NetCDF, use to_netcdf:\n\n[15]:\n\ngdd.to_netcdf(\"monthly_growing_degree_days_data.nc\")\n\nIt’s possible to save Dataset objects to other file formats. For more information see: xarray’s documentation"
    }
}