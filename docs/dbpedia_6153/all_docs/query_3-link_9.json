{
    "id": "dbpedia_6153_3",
    "rank": 9,
    "data": {
        "url": "https://docs.gimp.org/en/gimp-using-script-fu-tutorial.html",
        "read_more_link": "",
        "language": "en",
        "title": "3. A Script",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.gimp.org/en/images/prev.png",
            "https://docs.gimp.org/en/images/next.png",
            "https://docs.gimp.org/en/images/note.png",
            "https://docs.gimp.org/en/images/using/script-fu-console.png",
            "https://docs.gimp.org/en/images/prev.png",
            "https://docs.gimp.org/en/images/up.png",
            "https://docs.gimp.org/en/images/next.png",
            "https://docs.gimp.org/en/images/home.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "3.1. Getting Acquainted With Scheme\n\n3.1.1. Let's Start Scheme'ing\n\nScheme is a dialect of the Lisp family of programming languages. GIMP uses TinyScheme, which is a lightweight interpreter of a subset of the so-called R5RS standard.\n\nThe first thing to learn is that:\n\nEvery statement in Scheme is surrounded by parentheses ().\n\nThe second thing you need to know is that:\n\nThe function name/operator is always the first item in the parentheses, and the rest of the items are parameters to the function.\n\nHowever, not everything enclosed in parentheses is a function — they can also be items in a list — but we'll get to that later. This notation is referred to as prefix notation, because the function prefixes everything else. If you're familiar with postfix notation, or own a calculator that uses Reverse Polish Notation (such as most HP calculators), you should have no problem adapting to formulating expressions in Scheme.\n\nThe third thing to understand is that:\n\nMathematical operators are also considered functions, and thus are listed first when writing mathematical expressions.\n\nThis follows logically from the prefix notation that we just mentioned.\n\n3.1.2. Examples Of Prefix, Infix, And Postfix Notations\n\nHere are some quick examples illustrating the differences between prefix, infix, and postfix notations. We'll add a 1 and 23 together:\n\nPrefix notation: + 1 23 (the way Scheme will want it)\n\nInfix notation: 1 + 23 (the way we “normally” write it)\n\nPostfix notation: 1 23 + (the way many HP calculators will want it)\n\n3.1.3. Practicing In Scheme\n\nNow, let's practice what we have just learned. Start up GIMP, if you have not already done so, and choose Filters → Script-Fu → Console. This will start up the Script-Fu Console window, which allows us to work interactively in Scheme. In a matter of moments, the Script-Fu Console will appear:\n\n3.1.4. The Script-Fu Console Window\n\nAt the bottom of this window is an entry-field ought to be entitled Current Command. Here, we can test out simple Scheme commands interactively. Let's start out easy, and add some numbers:\n\n(+ 3 5)\n\nTyping this in and hitting Enter yields the expected answer of 8 in the center window.\n\nFigure 13.1. Use Script-Fu Console.\n\nNow, what if we wanted to add more than one number? The “+” function can take two or more arguments, so this is not a problem:\n\n(+ 3 5 6)\n\nThis also yields the expected answer of 14.\n\nSo far, so good — we type in a Scheme statement and it's executed immediately in the Script-Fu Console window. Now for a word of caution…\n\n3.1.5. Watch Out For Extra Parentheses\n\nIf you're like me, you're used to being able to use extra parentheses whenever you want to — like when you're typing a complex mathematical equation and you want to separate the parts by parentheses to make it clearer when you read it. In Scheme, you have to be careful and not insert these extra parentheses incorrectly. For example, say we wanted to add 3 to the result of adding 5 and 6 together:\n\n3 + (5 + 6) + 7 = ?\n\nKnowing that the + operator can take a list of numbers to add, you might be tempted to convert the above to the following:\n\n(+ 3 (5 6) 7)\n\nHowever, this is incorrect — remember, every statement in Scheme starts and ends with parens, so the Scheme interpreter will think that you're trying to call a function named “5” in the second group of parens, rather than summing those numbers before adding them to 3.\n\nThe correct way to write the above statement would be:\n\n(+ 3 (+ 5 6) 7)\n\n3.1.6. Make Sure You Have The Proper Spacing, Too\n\nIf you are familiar with other programming languages, like C/C++, Perl or Java, you know that you don't need white space around mathematical operators to properly form an expression:\n\n3+5, 3 +5, 3+ 5\n\nThese are all accepted by C/C++, Perl and Java compilers. However, the same is not true for Scheme. You must have a space after a mathematical operator (or any other function name or operator) in Scheme for it to be correctly interpreted by the Scheme interpreter.\n\nPractice a bit with simple mathematical equations in the Script-Fu Console until you're totally comfortable with these initial concepts."
    }
}