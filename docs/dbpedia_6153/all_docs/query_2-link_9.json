{
    "id": "dbpedia_6153_2",
    "rank": 9,
    "data": {
        "url": "https://changelog.com/founderstalk/75",
        "read_more_link": "",
        "language": "en",
        "title": "resilience featuring Spencer Kimball, CEO & Co",
        "top_image": "https://snap.fly.dev/founderstalk/75/img",
        "meta_img": "https://snap.fly.dev/founderstalk/75/img",
        "images": [
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/logos/V1/dark_logo_small.png?v=63645457827",
            "https://cdn.changelog.com/uploads/logos/bNd/dark_logo_small.png?v=63780801675",
            "https://cdn.changelog.com/uploads/logos/qGw/dark_logo_small.png?v=63722091563",
            "https://cdn.changelog.com/uploads/logos/EZj/dark_logo_small.png?v=63802041581",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/uploads/avatars/people/Qo/avatar_small.jpg?v=63760280419",
            "https://cdn.changelog.com/uploads/avatars/people/EaaWd/avatar_small.jpg?v=63783921352",
            "https://cdn.changelog.com/static/images/icons/overlay-close-6e7187836a00d768405c62b8f5a00eee.svg",
            "https://cdn.changelog.com/static/images/icons/icon-twitter-black-7fe99bf8092ff726d7e4ea4f05d6fd0a.svg",
            "https://cdn.changelog.com/static/images/icons/icon-mastodon-black-6b482a9651ed99cc841c8cb6a1e6e150.svg",
            "https://cdn.changelog.com/static/images/icons/icon-linkedin-black-479c72365b360c08d1ffe6f74f136bb7.svg",
            "https://cdn.changelog.com/static/images/icons/icon-github-black-aba4a2842b26aebde535c083c65cadc0.svg",
            "https://cdn.changelog.com/static/images/icons/icon-youtube-black-40c69360b86a887d33344f2e01cdbd05.svg",
            "https://cdn.changelog.com/static/images/icons/icon-instagram-black-6902021ad1ffe9e54865935db2cf5de3.svg",
            "https://cdn.changelog.com/static/images/icons/icon-tiktok-black-9129db9a51252747a16f4e9665bb324e.svg",
            "https://cdn.changelog.com/static/images/content/footer/partner-fastly-3a248ce64df99943668790fa019d00b1.png",
            "https://cdn.changelog.com/static/images/content/footer/partner-fly-ac772f3e335ae5f2e1b3d1868c1999a6.png",
            "https://cdn.changelog.com/static/images/content/footer/partner-typesense-d5620c5e2008403ceffe1d78e3fccf37.png",
            "https://cdn.changelog.com/static/images/icons/podcast-arrow-efa6cdca373476a1596dd6ec3ac73847.svg",
            "https://cdn.changelog.com/static/images/icons/podcast-arrow-efa6cdca373476a1596dd6ec3ac73847.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-03-26T18:00:00+00:00",
        "summary": "",
        "meta_description": "This week Adam talks with Spencer Kimball, CEO and Co-founder of Cockroach Labs — makers of CockroachDB an open source cloud-native distributed SQL database. Cockroach Labs recently raised $160 million dollars on a $2 billion dollar valuation. In this episode, Spencer shares his journey in open source, startups and ent...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.changelog.com/static/favicon-b4b2f962a1fe2a589cbe515208193316.ico",
        "meta_site_name": "Changelog",
        "canonical_link": "https://changelog.com/founderstalk/75",
        "text": "Yeah, just think of this sort of generationally… I’m sure this has been true at least partially, for most of the listeners. The older listeners will have a more visceral reaction to the way things were, let’s say pre or late ’90s. If you wanted to use software back in the ’80s, the ’90s, and also the aughts and even today - if it were closed source, it was a pretty difficult procurement road. You had to identify the piece of software that you were interested in, and then contact sales of whatever vendor was selling it; that would go through your procurement department, you had to get all kinds of different [unintelligible ] just to use this software.\n\n[ ] Then you got printed manuals shipped to you… There wasn’t much a community to ask questions of. You could contact support and so forth, but all of these things were just much slower, more tedious; considerably slower - let’s call it an order of magnitude, potentially more - in order to actually use software, put it into production, kick the tires, whatever it is that you wanted to get done as a developer. Open source just dramatically improved that. And I’d say that more so, for example, than having the ideas free, or even the price tag being free. Those are two aspects of free that people talk about with open source. But it’s the speed with which open source technologies could be downloaded, compiled locally, and then run and explored and even put into production; that was such an improvement, and it ultimately led to open source eating the world, as has been said by Andreessen Horowitz. That is the paradigm that existed, I would say, in 2015, when Cockroach was really conceived of as a product and then as a company.\n\nWhat’s really interesting is that model is itself rapidly being overtaken by a new consumption model, that’s actually even easier than open source was compared to closed source… And that’s to use software as a service. And I did mention that in my description of open source - you could download the source, and compile it, and so forth. Obviously, there were different evolutions within even that model, where you would start to download binaries that were precompiled for a particular system, and then even packages and things that sort of bundled things together. I think that’s the more common thing, let’s say for a Docker container. All of those are innovations, but as a service, this is kind of a next generation, fundamentally, where you don’t have any operations; you don’t have to learn how to become a system administrator, or whatever DevOps requirements are necessary in order to understand and then run a system day one plus. How to monitor, how to understand and how to debug it. Those things are still required, to some degree, but you can obviate a lot of that labor; and especially when you’re a larger entity trying to use software, this means that the investment necessary to use software has decreased accordingly.\n\nUltimately, it feels like the writing is on the wall for software to be consumed as a service increasingly. The question is how does open source fit into that? Now, I believe in open source. I’ve been doing it now my entire career, since I went to UC Berkeley, and Peter, my co-founders who’s our CTO - him and I started the GIMP back in ’93. That world was magical to me when I first entered it… And I care deeply about open source, especially from the perspective of the free exchange of ideas… But you can sort of squint right now and look at open source in the aughts and the tens… What do people call that decade?\n\nIf that doesn’t progress, then the service will start to look a little long in the tooth after a couple of years, and eventually not really be viable. So the execution, unless you want something to sort of die on the vine, has to extend to the investment in the open source project, and that’s really what’s wrong with Amazon’s – people call it strip-mining, but their exploitation of open core companies that are doing all the investment back into the core, the open source core of the project, and then Amazon swoops in and is able to use their platform advantage to really exploit a lot of that value that they’re not reinvesting in…\n\nSo I do think that Amazon’s exploitive and predatory tactics around open core companies is just short-term profit for Amazon, and ultimately Amazon’s customers. I don’t really wanna make a big value judgment about what Amazon’s doing. Yeah, it’s true, if I use the word “predatory”, there’s an implied value judgment, but I don’t fault Amazon for doing what they’re doing; I think it makes perfect business sense, and it’s in line with their mission and their value, which is to obsess about their customers.\n\nBut nevertheless, it doesn’t leave a lot of space for a company like Cockroach Labs if they were to use Cockroach database and simply repackage it and win the market because so many people use AWS. That’s ultimately gonna cause CockroachDB to cease being improved, because if Cockroach Labs went out of business or we had much less capital to work with because of Amazon reselling our product successfully and sort of forcing us out of the market, obviously the improvements to CockroachDB would slow down to a trickle and maybe stop… And then what happens? I don’t think anyone really benefits from that scenario.\n\n[ ] Yeah, I think he had an evolved outlook; or he has an evolved outlook. I’m sure it continues. It’s quite impressive to see that change. Yeah, back then we were very impressed; so many aspects of the free software, open source world, and Unix in particular… And yet the desktop application seemed to be a decade – I mean, they just were not on the same playing field. That’s what you could get in Mac and Windows at the time. And Photoshop was a really good example of that. Both Peter and I were really kind of graphics aficionados back then; maybe we still are, to a certain extent… But we felt like – okay, we love so much about this new operating environment, but we can’t get simple photo manipulation tasks done.\n\nI remember one day – we were using XPaint and XView. Those were the two options really that were available to us. We sat down at one point and just kind of wrote a manifesto… “Hey, if we wrote something that could replace some of the things you use XView for and some of the things you use XPaint for, and make it look something like Photoshop in terms of its capabilities, that would really be the start of something.” I wish we still had that manifesto, because it was pretty peculiar in my recollection of it. I don’t think the GIMP turned out anything like that manifesto… And we weren’t really thinking that this would be a GNU project or anything like that when we started it, but I guess we ended up working on it for most of our undergraduate careers (for four years), and sometimes to the exclusion of our class work, and so forth… But what a learning experience, to really dive head-first into something that became so ambitious.\n\nWell, interestingly, I wasn’t super-interested in just being a software developer when I left Berkeley. I really wanted to potentially work on Wall Street, or be a consultant and travel and see all kinds of different businesses in situ. I ended up taking a job at Accenture, which was called Andersen Consulting back in 1997… But I stayed there only four months, because it wore pretty thin pretty quickly. It wasn’t the glamorous lifestyle I had imagine it would be. There was a lot of sitting around and working on silly projects that weren’t challenging in the way that, for example, writing the GIMP had been.\n\nSo I ended up going and working at a boutique investment bank for a year after that, and that also wasn’t quite to my liking. It felt more like gambling than it did deterministic software development. But that was right in the middle of the dotcom boom, so in 1999. I came back to Silicon Valley and started a company as a co-CTO. It was called WeGo Systems. No open source in there, but it was a content management system basically for hierarchical web presences. It was pretty neat… But it run into the end of the dotcom boom, which became the dotcom bust, which was a pretty interesting experience to live through… And that’s where that project/company ended. It was actually sold.\n\nAnd then Peter had actually done a similar move in terms of doing his own dotcom startup. He also ran into the dotcom bust and started at Google. And it was at Google in 2002 Peter said “Hey, you’ve gotta come work here. This place is amazing, and things are going great.” Which was a strange thing to hear in 2002, because 101, for example, if anyone on this podcast is from California - I imagine quite a few are - it’s this highway that runs North-South in California, and in the dotcom heyday it was more like it is days, pre-Covid… Just absolutely jam-packed with traffic at most of the reasonable hours of the day… And after the dotcom bust happened, it was like tumbleweed blowing across 101. It was a really sad and sort of desolate stretch of highway for some of the busiest hours. That’s what it felt like.\n\nGoogle on the other hand was just blowing up. It was a wonderful place to work, with this exuberant culture, and everything seemed to be going right. So within three months, Peter started there, I started there, and Ben, the third co-founder for Cockroach Labs started there. And we all started working together on just an incredible diversity of projects.\n\nYeah, very vital. And that kind of leads the other piece of advice I’d give to entrepreneurs - exactly as you say, sometimes people just can’t wait. And that’s fine. I wouldn’t say delay your startup idea if you’ve got one that’s inspiring and you really believe in. On the other hand, if you only feel a mediocre pull of gravity, let’s say, for your startup idea, the recommendation I’d give to people is work at a company that looks like it’s really going places. I think the sweet spot would be a startup that’s pre-IPO, that is between 100 and 500 people, it really looks like it’s starting to win its category… That is a prime and fertile experience, where you are going to meet people in the trenches that you will wanna start that next company with… And there’s a lot of ways to learn in sort of a negative sense what doesn’t work. You could spend an entire career doing that… And that experience is valuable. That’s sort of battle scars, and “Hey, I’ve seen this done before and it didn’t work out so well. Maybe we should think of an alternative.”\n\nBut I think the sort of positive learning experience where you go somewhere and you see a company that has a great culture, that seems to really be succeeding - those situations attract the very best and brightest. So you end up with a reputational – let’s call it an experience that really gives you a reputation that can help you in terms of getting investors and attracting people to work at your new venture… But you also, as I said, end up being thrown into the trenches with really good soldiers (to keep that metaphor going) and that does end up being the lifelong friends and collaborators.\n\nYeah, so databases - it turns out that they have been extraordinarily essential in my career, back as early as the dotcom startup I did, WeGo Systems. We built sharded Oracle and sharded Postgres is the two sort of flavors we supported. And I’ve gotta tell you, when I was at Berkeley I wasn’t very interested in databases. I mentioned graphics - that was really probably my key interest. Databases - I didn’t take until my first and only year of grad school, and I just kind of took it to get some credits.\n\nI ended up being pretty interested in the course, but I didn’t really think they’d be central to my career, but as soon as I hit the “real world”, databases became a central problem, a big source of frustration at WeGo, and then when I got to Google, that was one of the first projects I got thrown onto, which was the AdWords system, which was nascent then in 2002… But it was running into problems with sharded MySQL. And you hear this word “sharded”, but for listeners that aren’t aware of what that implies, it’s about taking a monolithic database like Postgres or MySQL or Oracle that really is meant for a single machine, even if that machine can be quite large… And you say “Well, maybe this isn’t gonna be large enough”, and this is the case of AdWords when I got put on that project.\n\nSo you say, “Okay, we’re gonna use two databases. We’ll put half of our customers on the first database, half on the second”, and maybe at some point you start reaching [unintelligible ] on those two, and so then you say “We’re gonna use four” or “We’re gonna use five” etc. It got up to about 32, I think, when I was at that project at Google… And all these different problems started to occur as we sharded. The application complexity became quite high. It just went ridiculous…\n\nPractical example - the MySQL databases had too many connections coming into them, and that started to cause them to [unintelligible ] And so we solved these problems – every morning we had these Ads War Room to solve the latest set of problems related to this scalability challenge with the database.\n\nI will just say that in Google AdWords, by the time they replaced that sharded MySQL architecture, they’d gotten to a thousand shards. So it became a thousand MySQL instances. And I’ve heard that Facebook has hundreds of thousands of MySQL instances. So there’s kind of no end to both how scalable that architecture is, but also how much time you have to put in to truly keep scaling it.\n\nSo that’s a scalability challenge… There’s also resilience challenges, and that’s part of what we saw when we were at Square, and it was certainly something we saw when we were at Google… And that is you really don’t wanna have a database that has a primary and a secondary… And that’s been the standard way to operate databases for most of my lifetime. The problem with that solution is that the secondary is getting an asynchronous replication stream for data. And even if you put in another datacenter so you have a really nice failure scenario, so you can lose a data center and fail over, that failover might imply data loss… Because that asynchronous replication stream might not have fully made it over to the secondary when the primary dies. So you switch over to the secondary and you realize “Wait a second… I thought I just sent that email out”, as an example. But it’s not in my outbox. What happened? Well, the replication stream just didn’t get that email into the outbox on the secondary. So it’s almost like you’ve moved backwards in time. You’ve regressed to an earlier version of the state that you had in an application, and that causes huge headaches.\n\n[ ] If a data center was lost at Google back in 2004, let’s say, it would be many teams scrambling to figure out what might have gone wrong. “Did we charge a customer twice? Are there consistency problems in the data because some of this stuff got replicated and some other stuff didn’t?” And you’d have to write cleaners and scripts that would go through things… And you’re just trying to reason through what might have gone wrong with your use case. That’s not the right way to do database replication, and certainly not in 2020.\n\nGoogle started to play around with better ways to do that as early as 2004-2006. They built Bigtable, and then they built something called Megastore, and then they built something called Spanner… And Spanner is really what inspired Cockroach. So there’s scalability, there’s resilience… Those are two of the biggest problems that I’ve faced with databases in my career.\n\nThe gold standard these days with databases is to do what’s called consistent, synchronous-based replication. The popular ways to do this is something called Paxos, or something called Raft… And what they do is consensus. So instead of just writing to a primary and asynchronously replicating to a secondary, you actually write to three data centers, or three replication sites, and you are going to be committed if the majority of the replication sites respond positively or affirmatively to any particular write. If for example you only write to one out of three data centers, that write can’t be committed. You need two out of the three. As long as you have two out of three, if you lose any one data center out of those three, you always are guaranteed that one of the remaining two has the exact data that you need. So as long as you only lose the minority, you have total operational continuity. It’s hard to overestimate just how important that advance is for running these systems operationally.\n\nYeah. The reason that – well, let me just say this… There’s nothing new under the sun in computer science. Or maybe the number of new things are vanishingly small. Everything’s been thought of before, so making sharding more automatic - this has existed far earlier than Google created Bigtable and sort of launched the idea of NoSQL. NoSQL - the word NoSQL, the term, predates Google or at least Bigtable for five or six years… At least the earliest mention of it that I’ve been able to find.\n\n[ ] So ultimately, the popularization, as opposed to the innovation of these kinds of things, whether it’s consensus-based replication, or elastic scalability in a cloud-native fashion - I think the popularization of these things and the widespread adoption has to have a lot of different confluent factors all aligning… The cloud is a big example of why these things are possible. Google had their own version of what looks like the public cloud [unintelligible ] in 2020, they had that in the aughts. They had data centers all over the world, and Borg to control access to resources in a very frictionless fashion.\n\nOnce you start to have capabilities like that, you start to think that “Hey, we could write databases differently. We could use all these commodity resources and build a bigger database than anyone’s ever had.”\n\nAnother factor that really was instrumental to driving some of this innovation was the fact that after the dotcom boom, the idea of enterprise scale gave way to a whole new level of scale, which you could call web scale. That’s what people have called it. And I think there’s additional levels of scale that are on the horizon, or are probably already here.\n\nWhen you think of why you need something like Cockroach, which is an operational – what they call Online Transaction Processing Database (OLTP), the idea of needing an OLTP database that could be petabytes or even exabytes is pretty foreign when you’re thinking about Oracle in the ‘90s, where it was used by an enterprise, and you have maybe ten million customers, the biggest-size enterprise… Google started to say, “Okay, we might have a billion customers, and we need to store all that data.” That’s just a hugely different problem, and it demanded additional architectural innovation for the database.\n\nYeah, it was when we left Google. So that was 2012. We had been there just under ten years. Great time, but ultimately, it felt like it was time to do something new. I even thought about going back to school; maybe I’d get an MBA, and kind of take a – an MBA is really a two-year vacation, where you network. That sounded pretty good to me. I thought maybe I’d go back and become a doctor.\n\nI just felt like I didn’t necessarily wanna spend my whole life being a Google engineer. It didn’t matter how much fun or how challenging the work was; for me, that was just part of my internal calculus. In the end, we decided “Hey, we could do another startup.” And what Viewfinder was - it was private photo sharing. The same time that Snapchat was getting started, we were getting started, and I think we did build the right thing… Snapchat clearly did… It was really an amazing experience overall, of course; but when we left Google, we were a bit disappointed by what open source databases and open source infrastructure looked like in 2012, compared to what Google had been aggressively building. And that’s where the idea of Cockroach was initially born. It was really “Okay, well Spanner is great. We wanna have Spanner-like capabilities. But it has to be open source, and it has to be something that you can run on a laptop, and it has to be something that any startup could use.” And the idea of calling it Cockroach is really because cockroaches are so damn resilient. They say after World War III they’d be the only things left alive… It’s probably true actually, based on my experience living in New York…\n\nYeah. So I think it was during the early days of Viewfinder that – again, it was another manifesto. I like writing those. It’s kind of like “Okay, well, what exists right now doesn’t work well enough. What would we –” It’s fun to write without thinking about the practicality of any particular prescriptive solution, but what would be the ideal solution to this problem, if there were just no barriers or limits?\n\nObviously, it’s still grounded in what’s conceptually possible, based on what I knew… And the beauty of having come from Google so recently is that the blueprint at least of the capabilities was very well understood. I mean, they’d just published that paper, too. And that manifesto was super-fun to write, but it was just this idea that, okay, there’d be these nodes, this commodity hardware, and I was thinking of AWS EC2 at the time, and every node of Cockroach would essentially colonize the disk space you gave it, and it would try to reach equilibrium, but it’d also be greedy about making sure its data was replicated to any neighboring nodes that it would coordinate with; there wouldn’t be any actual leader or central points of failure. Everything would be cooperative, with well-understood protocols. But capable of independent operation where necessary. And that was a super-fun thing to ideate.\n\n[ ] Ultimately, we were trying to build private photo sharing, not a database. So that project really was a passion project that had to be put on the backburner. We were then acquired by Square a couple years later, in 2014. And when we got to Square, they didn’t really have a fixed project for us to work on, so we went around, talked to a lot of different groups, and a theme emerged… And it was the theme, as I’ve already mentioned speaking with you, that has been prevalent in my career, which is “Databases are a significant problem.”\n\nAt Square, I think a lot of the problem was “How do you make sure that applications that are database-backed can survive a data center outage?” And not just survive it in a kind of half-working fashion, but to really have business continuity; no post-mortems for application teams.\n\nPayment processing was this seminal example at Square. If you started authorizing a credit card and then finally charged it, or canceled the transaction, that’s sort of a two-step process. And if it gets interrupted mid-stream, so you authorize the credit charge, and then you aren’t able to cancel it or confirm it, you might end up authorizing it twice when that thing restarts and you failed over to a different data center. And that was problematic from a customer perspective. You don’t wanna get that get that alert on your phone that you’ve been charged twice, and then that causes problems for Square, and so forth.\n\nAll those kinds of problems, if you don’t have a good solution to the real guts of the problem, the core… I laid out a fairly simple scenario, but the problem is these use cases - they get more and more complex, and the burden of maintaining it when there’s gaps at scale becomes very onerous. So that was a big learning at Google - anything that can go wrong, any gap you have where you’re like “Yeah, well, it’s pretty unlikely this is gonna happen”, trust me, at scale it will happen, and it will happen, and it will become a huge problem that will blow up on you.\n\nSo theoretically, when you build these kinds of systems, you do not want to have any gaps. Like, zero. Everything needs to theoretically work perfectly, even with disastrous scenarios that you don’t think are gonna happen. Like, weird network partitions that are going to be so obscure that you just can’t imagine they’ll happen. Boy, they’ll happen, and they’ll happen in like a month or two, at scale.\n\nWhen we were at Square - just to pick up that thread again - we came to the conclusion that Cockroach as we had originally conceived it, its time might have come. I lobbied pretty hard for Square to support the Cockroach project… And there were definitely some people that were on board with it, and others that weren’t, and ultimately Square said that I could work on it, but they weren’t going to really adopt the project. So we started as a GitHub side-project, and I worked on it my nights and weekends, and eventually I was able to work on it full-time, while I was at Square, which was really an amazing time in my life.\n\nFor about six months, every day I’d come into the office and I’d say “Great, what’s the next problem? How do I build the very best database I can conceive of?” And there weren’t any customers, or managers, or any process…\n\nReally well. There’s always just existential concerns starting any company, and there’s been so many stages of growth… The early days when we were pre general availability, we had alpha, and then beta - those we could move so quickly, and it was extremely enjoyable. It was jut R&D. Building a relational database from scratch, from the top to the bottom, is a huge undertaking. And those were, I think, some of the most enjoyable, just because of the extent of the challenge.\n\n[ ] But then teams started to grow, so you’ve got cultural issues, and you have to manage so that everyone is pulling in the same direction, instead of everyone doing something useful but pulling in opposite directions… And then you’d get customers, and you’ve gotta respond to all of their issues and make them successful…\n\nAnd then it’s kind of like you’ve seen the crossing the chasm idea, where there’s this bell curve of adopters, and you have those innovators, and that’s kind of where Cockroach and most of these kinds of technologies start… And then you get to the early adopters, and the early majority, and where are we in that journey… It’s just, every new tranche of customers or people that are interested is a whole new challenge.\n\nWhen I look at everything we’ve done, it feels like we’ve come a long way, but when I look at everything that we need to do, at least what I can envision, it feels like we have a heck of a long way to go… So I think it’s anything but certain that we’ve truly succeeded as a commercial entity… But we’ve come a long way. We have some of the biggest companies in the world now using Cockroach. And that includes the real blue chips, but it also includes the really fast-moving, high-tech growth companies. So both of those - extremely exciting.\n\nI think when I started with Cockroach I was maybe a little intimidated or unsure of whether building something that would be enterprise software is really what I might be good at. But I’ve found that helping these bigger companies adopt cloud-native architectures and infrastructure is extremely rewarding, and that’s something I’m happy about. But as we were talking about at the beginning of the conversation, the real challenge is how do you build and deliver Cockroach as a service? And that’s where I think the future of our success is going to be made or lost. It’s a transition.\n\nRight now, the world’s biggest companies - they wanna run a relational database themselves, they wanna self-host, they wanna buy software licenses. They might wanna put it in private data centers, or hybrid across private and public clouds. On the other hand, in five years, even those companies, much less every other startup and high-growth tech company - they’re all going to be using database as a service. In ten years, the entire world will be.\n\nSo we have to not just win where we originally set out to build CockroachDB the way that you might run Oracle or Postgres or MySQL if you were running it yourself, but we have to also now succeed with Amazon as a direct competitor, and Google, and Microsoft. These big clouds that are offering databases as a service and doing quite well with those businesses.\n\nSo how do we deliver Cockroach as a database as a service, and effectively compete? There’s a lot of really interesting answers to that question. It’s by no means a foregone conclusion that a company like AWS, which is the cloud vendor incumbent, really has as many advantages as you might think they have.\n\nWell, there’s a number of different aspects to the successful strategy, and as you say, ours will continue to evolve… One is you out-innovate. I think Google is probably the only of the cloud vendors that has a truly comparable technology. Amazon’s better at repackaging existing open source… And part of that out-innovating is – you may have read, we’ve made some license changes to the core of Cockroach. We adopted something called the BSL. That’s part of how you continue to out-innovate. It gives you a little bit of protection.\n\n[ ] Then there’s the idea of being multi-cloud, or cloud-agnostic, and that includes private clouds. So the deployment flexibility is extremely important to the world’s big companies that have been around for a couple of decades and have lots of existing investments in data centers and high-value use cases that aren’t gonna be easily moved to the public cloud. I think that is incredibly important.\n\nPart of something that’s worth touching on further is just how much innovation can be done in the database as a service model. And that’s something that we’re pushing really hard or right now. Ultimately, we’d like to deliver databases with a lot less friction than they currently are delivered as a service.\n\nRight now when you get a database as a service, there’s quite a bit of cost to it. Like, a sort of production-ready, encrypted instance of RDS, that’s sort of the minimal footprint - it still costs you about $100 a month, which is a lot. And you’re choosing the size of nodes, where those nodes are located… There’s a number of decisions that increase the friction of the process. We’d like to drive to a world where databases are truly serverless, in the sense that when you get a relational database, it’s something that you can pay for exactly what you use, not worried about what kind of machines, how many, and even where they’re located. You just get a database, and that database is truly capable of global operation. Hey, if you only use it on the East Coast of the United States, great. You wanna add the EU? That’s extremely simple. It’s as simple, essentially, as setting a different value for a column in a table specifying what region the data should be stored in, or whether it should be global, as an example.\n\nAnd further, we actually think that price is a major impediment to using something like a relational database as a service. We’d like to make these things perpetually free for developers, for a pretty generous tier. So think about what Gmail did in 2003, where they were effectively making a gigabyte of email free; at the time, you had Yahoo! –\n\n[ ] Well, a lot of what I’ve been talking about I’d say is understood by still a small audience. That’s something to always keep in mind, that crossing the chasm thing. I think that the large pool of developers out there - and there’s ten million of them in the world - the majority of those have probably never even heard of Cockroach. That’s also interesting. I imagine people that listen to your podcast are closer on to that innovator side of the bell curve.\n\nThe thing that I think might be extremely interesting, that isn’t necessarily obvious from what I’ve already talked about, is just what we think the 2020s holds in store for even a developer at a startup, or a developer at one of the Fortune 500 companies, and Fortune 10 companies even… And that’s really not just a database that’s serverless, but an entire stack above that database. If you really wanna build an application the way that Facebook or Uber or Netflix builds them, so that wherever you do get customers around the world, you can give them what feels like a local experience, it’s more than just a database. The database is clearly a foundational layer in the stack, but you need to have an execution layer as well above it. You’re certainly gonna need additional systems that are also global; you’re gonna need global DNS and global load balancing, and so forth.\n\nSo really what’s on the horizon for us is “How do we partner with the clouds, with other technology companies that are complementary to what Cockroach Labs is doing, in order to define the next generation of stack?” You remember the LAMP stack, which really drove a lot of the innovation in the aughts and beyond; the big question for us, and I think what’s extremely exciting, is the emergence of a stack that allows a startup or a Fortune 500 company to build the way that Google builds and operates services and applications.\n\nI think that’s where a lot of our thinking, and I’m sure a lot of the thinking of all of our contemporary peer companies is going to be directed in the next five years. And part of that I think is 5G, interestingly enough. It’s pretty unusual that there is a significant improvement in latency in communication networks. It’s much more common that you have significant improvements in bandwidth. Latency improvements happen somewhat infrequently, and they usually herald quite a bit of innovation. So I think the widespread adoption of 5G in the next five years is going to mean that applications, especially on a smartphone, can feel substantially different than they do today.\n\nI think everyone’s pretty used to hitting a button on a smartphone, and maybe a second and a half later something changes. That is a pretty bad user experience, but it’s just one we’re all used to. Ultimately, you want that to be the 100-milisecond rule, as popularized by Google Gmail, and now more recently Superhuman, which is another email application. And 100 milliseconds is the threshold for a human noticing something as taking time or being instantaneous. Less than 100 milliseconds is instantaneous.\n\nSo if you can actually adhere to that latency end-to-end, in other words you hit a button on your smartphone and you get a response all the way up to the backbone, into the – across the backbone, to wherever the data center is, through the application logic, into the backend database, and then all the way back out, that roundtrip time, less than a hundred milliseconds, you can give people real-time experiences. And obviously, for gaming, interactive media of all sorts, self-driving, AR, VR - these are obvious use cases, where this kind of latency guarantee is transformational, maybe even necessary…"
    }
}