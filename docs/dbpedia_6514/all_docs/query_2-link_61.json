{
    "id": "dbpedia_6514_2",
    "rank": 61,
    "data": {
        "url": "https://stackoverflow.com/questions/2220134/displaying-a-pdf-file-from-winform",
        "read_more_link": "",
        "language": "en",
        "title": "Displaying a pdf file from Winform",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/JpXbV.jpg?s=64",
            "https://www.gravatar.com/avatar/e65f64149f394ef4d97f487cea2da10b?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/zoFYE.png?s=64",
            "https://www.gravatar.com/avatar/699a9b2caefb52530d1c872bb2932d21?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/cb5NP.png?s=64",
            "https://www.gravatar.com/avatar/c5635e381506d1a5582584f53dbb3eec?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d407f75d0cb788d12705052106b04031?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/cf4ca257ce367a7c152d7bfbbe768e88?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/TRttq.jpg?s=64",
            "https://www.gravatar.com/avatar/686376f270905a050e8efc8fc55c3291?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/jkSDT.jpg?s=64",
            "https://graph.facebook.com/10207600203556687/picture?type=large",
            "https://i.sstatic.net/qZulX.png?s=64",
            "https://graph.facebook.com/432100126964238/picture?type=large",
            "https://stackoverflow.com/posts/2220134/ivc/910d?prg=bf27d801-2254-428b-89c2-4a9b09668310"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-02-08T07:34:00",
        "summary": "",
        "meta_description": "I'm just creating a simple calculator in C# (windows form)\n\nI've created a \"User Help\" which is a pdf file, what I want is to display that pdf file if the user clicks on the \"Help\" button in the Wi...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/2220134/displaying-a-pdf-file-from-winform",
        "text": "You can reference the Adobe Reader ActiveX control and bundle it with your application.\n\nSimply add AcroPDF.PDF.1 to your Toolbox from the COM Components tab (right click toolbox and click Choose Items...) then drag an instance onto your Winform to have the designer create the code for you. Alternately, after adding the necessary reference you can use the following code:\n\nAxAcroPDFLib.AxAcroPDF pdf = new AxAcroPDFLib.AxAcroPDF(); pdf.Dock = System.Windows.Forms.DockStyle.Fill; pdf.Enabled = true; pdf.Location = new System.Drawing.Point(0, 0); pdf.Name = \"pdfReader\"; pdf.OcxState = ((System.Windows.Forms.AxHost.State)(new System.ComponentModel.ComponentResourceManager(typeof(ViewerWindow)).GetObject(\"pdfReader.OcxState\"))); pdf.TabIndex = 1; // Add pdf viewer to current form this.Controls.Add(pdf); pdf.LoadFile(@\"C:\\MyPDF.pdf\"); pdf.setView(\"Fit\"); pdf.Visible = true;\n\nYou could use the WebBrowser control and let IE load a PDF reader for you if there is one installed on the machine.\n\nHowever the last time I tried this, I had to write the PDF file to disk first, so I could point the WebBrowser control at it.\n\nI would put it on within my program folder, add a link within my Start Menu folder to allow a direct access (without starting my tool) and just at on some click event System.Diagnostics.Process.Start(@\".\\Manual.pdf\");\n\nUpdate\n\nOk, now we come to a completely new question: How to embed a file in my application and start it?\n\nFor this question you'll find already several answers here, but here is the short version:\n\nRight click your project and select Add - Existing Item\n\nSelect your file (don't double click it)\n\nClick the little arrow next to the Add button and select Add As Link\n\nDouble click on Properties - Resources.resx\n\nClick the little arrow next to Add Resource and select Add Existing File\n\nSelect the same file again in the open dialog\n\nNow you can access the file within your code as byte[] from Properties.Resources.NameOfResource\n\nWith these steps you reference your file where ever it exists within your structure. If you like that a copy of your pdf file will be put into a subfolder Resources within your project, just skip the points one and two in the above list.\n\nTo get your pdf now opened, you'll have to write the byte[] down to disk (maybe with Path.GetTempFileName()) and start it with Adobe Reader. (Don't forget to delete the file after usage)\n\nIf you want to display a pdf inside your application, the WebBrowser control is probably preferable over the Adobe Reader control, as it will open the file very smoothly in PDF Reader or whatever IE is using as a default to open pdfs. You simply add the WebBrowser control to an existing or new form and navigate to the pdf file.\n\nNever assume that a user has Adobe or any other third party controls or libraries installed on their machines, always package them with your executable or you may have problems.\n\nThe Adobe Reader control obviously doesn't integrate as well with .NET as an intrinsic Windows component. As a rule, I always favor the use of built in .Net controls over third party vendors. As far as embedding the file in the actual executable; not going to happen until Microsoft decides any old PDF can be worked into the CLS and compiled into MSIL. What you have when you develop any app in .NET is code that can be compiled into intermediate MSIL to be translated at runtime by the CLR into native code and executed in the OS.\n\nWebBrowser1.Navigate(\"SomePDF.pdf\");\n\nI would suggest converting your pdf file to a Microsoft help file, so that you don't need to have Adobe Reader installed (it's buggy, and has way too much security issues). You cannot expect users to have this.\n\nIn reply to the starter's comment:\n\nYes you would need to create your help file as an HTML document instead of a pdf. There is no easy way to convert pdf to HTML.\n\nGetting the embedded file out should not be a problem at all. This is not dependent on it being .pdf format, and you can just look for a separate solution there.\n\nFor display, unless you know Acrobat or similar is installed (well, even Edge can open those files nowadays), or if you want to display the file embedded in a WinForms application, there is\n\nCodeproject Solution\n\nhttps://www.codeproject.com/Articles/37458/PDF-Viewer-Control-Without-Acrobat-Reader-Installe\n\nwritten in VB relying on lots of (partially commercial, if your solution is commercial) libraries.\n\nPdfiumViewer\n\nhttps://github.com/pvginkel/PdfiumViewer\n\nis great and also available via NuGet.\n\nThe PdfiumViewer library primarily consists out of three components: •The PdfViewer control. This control provides a host for the PdfRenderer control and has a default toolbar with limited functionality; •The PdfRenderer control. This control implements the raw PDF renderer. This control displays a PDF document, provides zooming and scrolling functionality and exposes methods to perform more advanced actions; •The PdfDocument class provides access to the PDF document and wraps the Pdfium library.\n\nIt is an all-in-one solution for display and comes with a friendlier Apache 2.0 license.\n\nedit, added sample code, for your convenience :) I included the following\n\ndata = File.ReadAllBytes(@\"C:\\temp\\abc.pdf\"); PdfiumViewer.PdfDocument doc; using (Stream stream = new MemoryStream(data)) { doc = PdfiumViewer.PdfDocument.Load(stream); var viewer = new PdfiumViewer.PdfViewer(); viewer.Document = doc; var form = new System.Windows.Forms.Form(); form.Size = new Size(600, 800); viewer.Dock = System.Windows.Forms.DockStyle.Fill; form.Controls.Add(viewer); form.ShowDialog(); }\n\nThis generates a form on the fly, of course you could also use the designer.\n\nIt might be possible to embed Adobe's Reader in your form as an ActiveX component. But that means you'll have to make sure Reader is installed on the client machine for that to work.\n\nIn case it doesn't have to be strictly embedded you can just launch the PDF file and let whatever viewer the user has open it.\n\nHow to open PDF file with relative path\n\nIn this case the created Application has to run on several PC´s. To reference on a file which is not in the network, but in the Programm Folder itself, use the following code Snippet:\n\nFirst of all include the following Library:\n\nusing System.IO;\n\nThen use a Button, picturebox, or whatever to create a ClickEvent and use the following code snippet:\n\nprivate void pictureBox2_Click(object sender, EventArgs e) { //get current folderpath of the .exe string ProgramPath = AppDomain.CurrentDomain.BaseDirectory; //jump back relative to the .exe-Path to the Resources Path string FileName = string.Format(\"{0}Resources\\\\Master_Thesis_Expose.pdf\", Path.GetFullPath(Path.Combine(ProgramPath, @\"..\\..\\\"))); //Open PDF System.Diagnostics.Process.Start(@\"\" + FileName + \"\"); }\n\n|Thumb up|"
    }
}