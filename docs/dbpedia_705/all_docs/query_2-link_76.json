{
    "id": "dbpedia_705_2",
    "rank": 76,
    "data": {
        "url": "https://stackoverflow.com/questions/55883704/entity-framework-core-sqlnullvalueexception-data-is-null-how-to-troubleshoo",
        "read_more_link": "",
        "language": "en",
        "title": "Entity Framework Core: `SqlNullValueException: Data is Null.` How to troubleshoot?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/87b6d0877636681c10f93bee897f4eb5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/67498fd0e17d27cb9be0c107f306e378?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/2mKKQ.png?s=64",
            "https://www.gravatar.com/avatar/1d0efcba4b1c627e474d70f5644a95d0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/3e30030b820e884edf2d1618b322a63d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/4cfd9bb01c5373c58abdd81ba476061b?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/uRSSC.jpg?s=64",
            "https://i.sstatic.net/4uVqs.jpg?s=64",
            "https://lh3.googleusercontent.com/a/AATXAJy2dHHBWMCybxcqhIDJ8jaci91_3zW1bgPcCc4=k-s64",
            "https://i.sstatic.net/iS6Wy.png?s=64",
            "https://lh6.googleusercontent.com/-16kzUVXN0Vw/AAAAAAAAAAI/AAAAAAAAABk/QGbq4GFD6dw/photo.jpg?sz=64",
            "https://lh3.googleusercontent.com/a-/AOh14Gg0heL2tpftyPSRm0_gVetvur373KCYywI6GkbVgg=k-s64",
            "https://lh5.googleusercontent.com/-sCM9FpGVgGA/AAAAAAAAAAI/AAAAAAAAZmE/Q-NGhOdiUB0/photo.jpg?sz=64",
            "https://lh4.googleusercontent.com/-tSc8RREYkXQ/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucnYwB6FmNZ_DfxgXZGcOBsNSdTUGA/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/1ea215872ccae10c90c25905859debe5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6c8cab90c64dbe525054963f63325023?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/XlYTO.png?s=64",
            "https://i.sstatic.net/P3KCs.jpg?s=64",
            "https://graph.facebook.com/10155354613370808/picture?type=large",
            "https://i.sstatic.net/UyOau.jpg?s=64",
            "https://graph.facebook.com/100003280251028/picture?type=large",
            "https://stackoverflow.com/posts/55883704/ivc/90be?prg=eb73bcfe-dac4-48ef-b22b-63070f1a821c"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Natalie Perret"
        ],
        "publish_date": "2019-04-27T18:36:17",
        "summary": "",
        "meta_description": "I am using Entity Framework Core in an ASP.NET Core application and Controller action and I haven't changed something to the working code nor to the database but I can't tell what is the query perf...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/55883704/entity-framework-core-sqlnullvalueexception-data-is-null-how-to-troubleshoo",
        "text": "I am using Entity Framework Core in an ASP.NET Core application and Controller action and I haven't changed something to the working code nor to the database but I can't tell what is the query performed by Entity Framework Core.\n\nThe controller action:\n\n[HttpGet] // GET: Administration/Companies public async Task<ActionResult> Index() { var users = await UserManager.Users.ToListAsync(); var companyEditVMs = await DB.Companies .OrderBy(company => company.CompanyId == 1 ? \"_\" + company.CompanyName : company.CompanyName ) Select(a => new CompanyEditVM(HttpContext, a, users.Where(b => b.CompanyId == a.CompanyId))) .ToListAsync(); return View(companyEditVMs); }\n\nThe trace\n\nSqlNullValueException: Data is Null. This method or property cannot be called on Null values. System.Data.SqlClient.SqlBuffer.get_String() System.Data.SqlClient.SqlDataReader.GetString(int i) lambda_method(Closure , DbDataReader ) Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory.Create(DbDataReader dataReader) Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable<T>+AsyncEnumerator.BufferlessMoveNext(DbContext _, bool buffer, CancellationToken cancellationToken) Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync<TState, TResult>(TState state, Func<DbContext, TState, CancellationToken, Task<TResult>> operation, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>> verifySucceeded, CancellationToken cancellationToken) Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable<T>+AsyncEnumerator.MoveNext(CancellationToken cancellationToken) Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider+ExceptionInterceptor<T>+EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken) System.Linq.AsyncEnumerable.Aggregate_<TSource, TAccumulate, TResult>(IAsyncEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator, Func<TAccumulate, TResult> resultSelector, CancellationToken cancellationToken) in Aggregate.cs KYC.Core.Areas.Commercial.Controllers.CompaniesController.Index() in CompaniesController.cs - [HttpGet] // GET: Administration/Companies public async Task<ActionResult> Index() { var users = await UserManager.Users.ToListAsync(); var companyEditVMs = await DB.Companies .OrderBy(company => company.CompanyId == 1 ? \"_\" + company.CompanyName : company.CompanyName ) .Select(a => new CompanyEditVM(HttpContext, a, users.Where(b => b.CompanyId == a.CompanyId))) .ToListAsync(); lambda_method(Closure , object ) Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable+Awaiter.GetResult() Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+TaskOfActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments) System.Threading.Tasks.ValueTask<TResult>.get_Result()\n\nI even tried to do just var companies = await DB.Companies.ToListAsync(). and I have exactly the same exception.\n\nMaybe I would like to be able to fetch the query performed by EF Core to do that manually so that I can try to figure out what's wrong with the query.\n\nI am wondering what possibly could have happened. Especially since other entities like user or countries can still be fetched from the database.\n\nAny idea how can I troubleshoot the actual underlying issue?\n\n[EDIT]\n\nThe only that actually changed in the \"code\" are the nuget references, I basically upgraded pretty much everything although it didn't break a reference in the code it seems it change how EF Core is somehow (wild guess) interpreting the database.\n\nI did reset my git repository to the point just before the nuget packages update happened and things work.,. I then decided to just update EntityFrameworkCore from 2.0.2 to 2.2.4 (also tried with 2.2.0 and ended up with the same result) and the issue happens again... Not sure what have changed between 2.0.2 and 2.2.0 to trigger this exception (but the model is the same just the EF Core version changed)...\n\nHere is the entity definition, it seems to have been auto-generated with a tool from the database table / schema:\n\n[Table(\"T_Companies\")] public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged { public override string ToString() { return CompanyId + \" \" + CompanyName; } private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty); private int _CompanyId; private string _CompanyName; private int _CompanyTypeId; private int _CountryId; private string _CompanyVatNumber; private string _CompanyStreetAddress; private string _CompanyZipCode; private string _CompanyCity; private string _ContactLastName; private string _ContactFirstName; private bool? _Active; private int? _AccountId; private string _CallbackSalt; private int? _UserSpaceId; private string _Login; private string _Pwd; private bool _IsTechnicalAccount; private DateTime? _StatusDate; private int _BankStatusCode; private string _PivotalAccount; private CompanyType _CompanyType; private Country _Country; private bool _IsKycIdSent; #region Extensibility Method Definitions partial void OnLoaded(); partial void OnCreated(); partial void OnCompanyIdChanging(int value); partial void OnCompanyIdChanged(); partial void OnCompanyNameChanging(string value); partial void OnCompanyNameChanged(); partial void OnCompanyCityChanging(string value); partial void OnCompanyCityChanged(); partial void OnCompanyZipCodeChanging(string value); partial void OnCompanyZipCodeChanged(); partial void OnContactLastNameChanging(string value); partial void OnContactLastNameChanged(); partial void OnActiveChanging(bool? value); partial void OnActiveChanged(); partial void OnCompanyTypeIdChanging(int value); partial void OnCompanyTypeIdChanged(); partial void OnCountryIdChanging(int value); partial void OnCountryIdChanged(); partial void OnContactFirstNameChanging(string value); partial void OnContactFirstNameChanged(); partial void OnCompanyVatNumberChanging(string value); partial void OnCompanyVatNumberChanged(); partial void OnCompanyStreetAddressChanged(); partial void OnCompanyStreetAddressChanging(string value); partial void OnAccountIdChanging(int? value); partial void OnAccountIdChanged(); partial void OnCallbackSaltChanging(string value); partial void OnCallbackSaltChanged(); partial void OnUserSpaceIdChanging(int? value); partial void OnUserSpaceIdChanged(); partial void OnLoginChanging(string value); partial void OnLoginChanged(); partial void OnPwdChanging(string value); partial void OnPwdChanged(); partial void OnIsTechnicalAccountChanging(bool value); partial void OnIsTechnicalAccountChanged(); partial void OnStatusDateChanging(DateTime? value); partial void OnStatusDateChanged(); partial void OnBankStatusCodeChanging(int value); partial void OnBankStatusCodeChanged(); partial void OnPivotalAccountChanging(string value); partial void OnPivotalAccountChanged(); partial void OnIsKycIdSentChanging(bool value); partial void OnIsKycIdSentChanged(); #endregion public Company() { OnCreated(); } [Key, Column(\"CompanyId\"), DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int CompanyId { get => _CompanyId; set { if (_CompanyId != value) { OnCompanyIdChanging(value); SendPropertyChanging(); _CompanyId = value; SendPropertyChanged(\"CompanyId\"); OnCompanyIdChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"CompanyName\"), Required] public string CompanyName { get => _CompanyName; set { if (_CompanyName != value) { OnCompanyNameChanging(value); SendPropertyChanging(); _CompanyName = value; SendPropertyChanged(\"CompanyName\"); OnCompanyNameChanged(); } } } [Column(\"CompanyTypeId\"), Required] public int CompanyTypeId { get => _CompanyTypeId; set { if (_CompanyTypeId != value) { OnCompanyTypeIdChanging(value); SendPropertyChanging(); _CompanyTypeId = value; SendPropertyChanged(\"CompanyTypeId\"); OnCompanyTypeIdChanged(); } } } [Column(\"CountryId\"), Required] public int CountryId { get => _CountryId; set { if (CountryId != value) { OnCountryIdChanging(value); SendPropertyChanging(); _CountryId = value; SendPropertyChanged(\"CountryId\"); OnCountryIdChanged(); } } } [DataType(DataType.Text), StringLength(100), Column(\"CompanyCity\"), Required] public string CompanyCity { get => _CompanyCity; set { if (_CompanyCity != value) { OnCompanyCityChanging(value); SendPropertyChanging(); _CompanyCity = value; SendPropertyChanged(\"CompanyCity\"); OnCompanyCityChanged(); } } } [DataType(DataType.Text), StringLength(100), Column(\"CompanyStreetAddress\"), Required] public string CompanyStreetAddress { get => _CompanyStreetAddress; set { if (_CompanyStreetAddress != value) { OnCompanyStreetAddressChanging(value); SendPropertyChanging(); _CompanyStreetAddress = value; SendPropertyChanged(\"CompanyStreetAddress\"); OnCompanyStreetAddressChanged(); } } } [DataType(DataType.Text), StringLength(30), Column(\"CompanyVatNumber\"), Required] public string CompanyVatNumber { get => _CompanyVatNumber; set { if (_CompanyVatNumber != value) { OnCompanyVatNumberChanging(value); SendPropertyChanging(); _CompanyVatNumber = value; SendPropertyChanged(\"CompanyVatNumber\"); OnCompanyVatNumberChanged(); } } } [DataType(DataType.Text), StringLength(10), Column(\"CompanyZipCode\"), Required] public string CompanyZipCode { get => _CompanyZipCode; set { if (_CompanyZipCode != value) { OnCompanyZipCodeChanging(value); SendPropertyChanging(); _CompanyZipCode = value; SendPropertyChanged(\"CompanyZipCode\"); OnCompanyZipCodeChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"ContactLastName\"), Required] public string ContactLastName { get => _ContactLastName; set { if (_ContactLastName != value) { OnContactLastNameChanging(value); SendPropertyChanging(); _ContactLastName = value; SendPropertyChanged(\"ContactLastName\"); OnContactLastNameChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"ContactFirstName\"), Required] public string ContactFirstName { get => _ContactFirstName; set { if (_ContactFirstName != value) { OnContactFirstNameChanging(value); SendPropertyChanging(); _ContactFirstName = value; SendPropertyChanged(\"ContactFirstName\"); OnContactFirstNameChanged(); } } } [Column(\"Active\"), Required] public bool? Active { get => _Active; set { if (_Active != value) { OnActiveChanging(value); SendPropertyChanging(); _Active = value; SendPropertyChanged(\"Active\"); OnActiveChanged(); } } } [Column(\"AccountId\")] public int? AccountId { get => _AccountId; set { if (_AccountId != value) { OnAccountIdChanging(value); SendPropertyChanging(); _AccountId = value; SendPropertyChanged(\"AccountId\"); OnAccountIdChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"CallbackSalt\")] public string CallbackSalt { get => _CallbackSalt; set { if (_CallbackSalt != value) { OnCallbackSaltChanging(value); SendPropertyChanging(); _CallbackSalt = value; SendPropertyChanged(\"CallbackSalt\"); OnCallbackSaltChanged(); } } } [Column(\"UserSpaceId\")] public int? UserSpaceId { get => _UserSpaceId; set { if (_UserSpaceId != value) { OnUserSpaceIdChanging(value); SendPropertyChanging(); _UserSpaceId = value; SendPropertyChanged(\"UserSpaceId\"); OnUserSpaceIdChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"Login\")] public string Login { get => _Login; set { if (_Login != value) { OnLoginChanging(value); SendPropertyChanging(); _Login = value; SendPropertyChanged(\"Login\"); OnLoginChanged(); } } } [DataType(DataType.Text), StringLength(1024), Column(\"Pwd\")] public string Pwd { get => _Pwd; set { if (_Pwd != value) { OnPwdChanging(value); SendPropertyChanging(); _Pwd = value; SendPropertyChanged(\"Pwd\"); OnPwdChanged(); } } } [Column(\"IsTechnicalAccount\"), Required] public bool IsTechnicalAccount { get => _IsTechnicalAccount; set { if (_IsTechnicalAccount != value) { OnIsTechnicalAccountChanging(value); SendPropertyChanging(); _IsTechnicalAccount = value; SendPropertyChanged(\"IsTechnicalAccount\"); OnIsTechnicalAccountChanged(); } } } [DataType(DataType.DateTime), Column(\"StatusDate\")] public DateTime? StatusDate { get => _StatusDate; set { if (_StatusDate != value) { OnStatusDateChanging(value); SendPropertyChanging(); _StatusDate = value; SendPropertyChanged(\"StatusDate\"); OnStatusDateChanged(); } } } [Column(\"BankStatusCode\")] public int BankStatusCode { get => _BankStatusCode; set { if (_BankStatusCode != value) { OnBankStatusCodeChanging(value); SendPropertyChanging(); _BankStatusCode = value; SendPropertyChanged(\"BankStatusCode\"); OnBankStatusCodeChanged(); } } } [DataType(DataType.Text), StringLength(255), Column(\"PivotalAccount\")] public string PivotalAccount { get => _PivotalAccount; set { if (_PivotalAccount != value) { OnPivotalAccountChanging(value); SendPropertyChanging(); _PivotalAccount = value; SendPropertyChanged(\"PivotalAccount\"); OnPivotalAccountChanged(); } } } public List<Resultat> Resultats { get; set; } public CompanyType CompanyType { get => _CompanyType; set { var previousValue = _CompanyType; if (previousValue != value) { SendPropertyChanging(); _CompanyType = value; if (value != null) { CompanyTypeId = value.CompanyTypeId; } else { _CompanyTypeId = default; } SendPropertyChanged(\"CompanyType\"); } } } public Country Country { get => _Country; set { var previousValue = _Country; if (previousValue != value) { SendPropertyChanging(); _Country = value; _CountryId = value?.CountryId ?? default; SendPropertyChanged(\"Country\"); } } } [Column(\"IsKycIdSent\"), Required] public bool IsKycIdSent { get => _IsKycIdSent; set { if (_IsKycIdSent != value) { OnIsKycIdSentChanging(value); SendPropertyChanging(); _IsKycIdSent = value; SendPropertyChanged(\"IsKycIdSent\"); OnIsKycIdSentChanged(); } } } public event PropertyChangingEventHandler PropertyChanging; public event PropertyChangedEventHandler PropertyChanged; protected virtual void SendPropertyChanging() { PropertyChanging?.Invoke(this, emptyChangingEventArgs); } protected virtual void SendPropertyChanged(string propertyName) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } private void Attach_Resultats(Resultat entity) { SendPropertyChanging(); entity.Company = this; } private void Detach_Resultats(Resultat entity) { SendPropertyChanging(); entity.Company = null; } }\n\nand the related table creation script:\n\ncreate table T_Companies ( CompanyId int identity (10) identity primary key nonclustered, CompanyName varchar(1024) not null, CompanyTypeId int not null constraint FK_Company_CompanyType references T_CompanyTypes, CountryId int not null constraint FK_Company_Country references T_Countries, Active bit not null, AccountId int, CallbackSalt varchar(1024), UserSpaceId int, Login varchar(1024), Pwd varchar(1024), StatusDate datetime(23, 3), BankStatusCode int not null, PivotalAccount varchar(255), IsTechnicalAccount bit not null, CompanyStreetAddress varchar(256), CompanyCity varchar(256), CompanyZipCode varchar(10), CompanyVatNumber varchar(30), ContactFirstName varchar(20), ContactLastName varchar(20), IsKycIdSent bit not null ) go\n\n[EDIT 2]\n\nFor the very same model, this (in the project file the nuget references) works\n\n<PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.8\" /> <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.1.8\" />\n\nwhile those ones, no:\n\n<PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.0\" /> <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.0\" />\n\n<PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.0\" /> <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.1.8\" />\n\nUpdate:\n\nAll I said previously still applies, with just additional ways of getting the things wrong due to the later EF Core nullability rules changes (most noticeable are the string properties inside NRT enabled projects which now are considered required by default, which is totally opposite of what they are considered in non NRT enable context).\n\nWhat I would like to add here is the mechanism of detecting which column/property is causing the issue.\n\nI kind of lose track of which exact EF Core version added such functionality, but in recent EF Core versions, you can use the EnableDetailedErrors method to turn detail error logging on, and then instead of the OP exception (it's still there, but as an inner of the new) you'll get InvalidOperationException with message similar to this\n\nAn error occurred while reading a database value for property '{EntityName}.{PropertyName}'. The expected type was 'System.String' but the actual value was null.\n\nwhere {EntityName}.{PropertyName} is the offending property.\n\nOriginal:\n\nThe error message indicates that EF Core is trying to read string value for a required property, i.e. a property which should never have null value in the database, but instead the underlying data reader reports null value for that property in some record(s).\n\nLooking at your entity model and corresponding database table, you can see the obvious discrepancy for many string properties -> varchar columns. CompanyStreetAddress, CompanyCity, CompanyZipCode, CompanyVatNumber, ContactFirstName, ContactLastName - all these are marked as [Required] in the model, but have no corresponding not null constraint in the table.\n\nSo the problem is caused by one or more of these columns.\n\nYou need to fix that discrepancy - probably by removing [Required] attribute because the constraint is already broken in the existing data.\n\nIf you are using Database First model, you should remove in generated OnModelCreating builder.Property(x => x.MyProperty).IsRequired(); or just regenerate the modal using EF Core Tools.\n\nThe fact that it \"works\" in some older EF Core version doesn't matter - that's incorrect mapping and as such should be fixed. Technically it shouldn't work from the beginning. But remember that EF Core is still in active development and has many bugs which are fixed in the next release(s). Most likely some code change was made between \"working\" and \"non working\" EF Core version which fixes the previous incorrect behavior.\n\nMichael Freidgeim\n\n27.9k1717 gold badges160160 silver badges177177 bronze badges\n\nanswered Apr 28, 2019 at 11:38\n\nIvan StoevIvan Stoev\n\n203k1616 gold badges334334 silver badges362362 bronze badges"
    }
}