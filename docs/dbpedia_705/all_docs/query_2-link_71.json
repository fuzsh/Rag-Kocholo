{
    "id": "dbpedia_705_2",
    "rank": 71,
    "data": {
        "url": "https://www.geeksforgeeks.org/c-arrays/",
        "read_more_link": "",
        "language": "en",
        "title": "GeeksforGeeks",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302091959/Arrays-in-C.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302092603/c-array-declaration.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302092653/C-array-initialization.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302092738/access-array-elements.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302092847/C-array-traversal.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302093316/1d-array.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302093139/2d-array.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20230302093224/3d-array.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/introduction-to-arrays-in-c-0dd906/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2015-05-14T03:41:09",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/c-arrays/",
        "text": "Array in C is one of the most used data structures in C programming. It is a simple and fast way of storing multiple values under a single name. In this article, we will study the different aspects of array in C language such as array declaration, definition, initialization, types of arrays, array syntax, advantages and disadvantages, and many more.\n\nWhat is Array in C?\n\nAn array in C is a fixed-size collection of similar data items stored in contiguous memory locations. It can be used to store the collection of primitive data types such as int, char, float, etc., and also derived and user-defined data types such as pointers, structures, etc.\n\nC Array Declaration\n\nIn C, we have to declare the array like any other variable before using it. We can declare an array by specifying its name, the type of its elements, and the size of its dimensions. When we declare an array in C, the compiler allocates the memory block of the specified size to the array name.\n\nSyntax of Array Declaration\n\ndata_type array_name [size];\n\nor\n\ndata_type array_name [size1] [size2]...[sizeN];\n\nwhere N is the number of dimensions.\n\nThe C arrays are static in nature, i.e., they are allocated memory at the compile time.\n\nExample of Array Declaration\n\nC\n\n// C Program to illustrate the array declaration #include<stdio.h> intmain() { // declaring array of integers intarr_int[5]; // declaring array of characters chararr_char[5]; return0; }\n\nOutput\n\nC Array Initialization\n\nInitialization in C is the process to assign some initial value to the variable. When the array is declared or allocated memory, the elements of the array contain some garbage value. So, we need to initialize the array to some meaningful value. There are multiple ways in which we can initialize an array in C.\n\n1. Array Initialization with Declaration\n\nIn this method, we initialize the array along with its declaration. We use an initializer list to initialize multiple elements of the array. An initializer list is the list of values enclosed within braces { } separated b a comma.\n\ndata_type array_name [size] = {value1, value2, ... valueN};\n\n2. Array Initialization with Declaration without Size\n\nIf we initialize an array using an initializer list, we can skip declaring the size of the array as the compiler can automatically deduce the size of the array in these cases. The size of the array in these cases is equal to the number of elements present in the initializer list as the compiler can automatically deduce the size of the array.\n\ndata_type array_name[] = {1,2,3,4,5};\n\nThe size of the above arrays is 5 which is automatically deduced by the compiler.\n\n3. Array Initialization after Declaration (Using Loops)\n\nWe initialize the array after the declaration by assigning the initial value to each element individually. We can use for loop, while loop, or do-while loop to assign the value to each element of the array.\n\nfor (int i = 0; i < N; i++) {\n\narray_name[i] = valuei;\n\n}\n\nExample of Array Initialization in C\n\nC\n\n// C Program to demonstrate array initialization #include<stdio.h> intmain() { // array initialization using initialier list intarr[5]={10,20,30,40,50}; // array initialization using initializer list without // specifying size intarr1[]={1,2,3,4,5}; // array initialization using for loop floatarr2[5]; for(inti=0;i<5;i++){ arr2[i]=(float)i*2.1; } return0; }\n\nOutput\n\nAccess Array Elements\n\nWe can access any element of an array in C using the array subscript operator [ ] and the index valuei of the element.\n\narray_name [index];\n\nOne thing to note is that the indexing in the array always starts with 0, i.e., the first element is at index 0 and the last element is at N â€“ 1 where N is the number of elements in the array.\n\nExample of Accessing Array Elements using Array Subscript Operator\n\nC\n\n// C Program to illustrate element access using array // subscript #include<stdio.h> intmain() { // array declaration and initialization intarr[5]={15,25,35,45,55}; // accessing element at index 2 i.e 3rd element printf(\"Element at arr[2]: %d\\n\",arr[2]); // accessing element at index 4 i.e last element printf(\"Element at arr[4]: %d\\n\",arr[4]); // accessing element at index 0 i.e first element printf(\"Element at arr[0]: %d\",arr[0]); return0; }\n\nOutput\n\nElement at arr[2]: 35 Element at arr[4]: 55 Element at arr[0]: 15\n\nUpdate Array Element\n\nWe can update the value of an element at the given index i in a similar way to accessing an element by using the array subscript operator [ ] and assignment operator =.\n\narray_name[i] = new_value;\n\nC Array Traversal\n\nTraversal is the process in which we visit every element of the data structure. For C array traversal, we use loops to iterate through each element of the array.\n\nArray Traversal using for Loop\n\nfor (int i = 0; i < N; i++) {\n\narray_name[i];\n\n}\n\nHow to use Array in C?\n\nThe following program demonstrates how to use an array in the C programming language:\n\nC\n\n// C Program to demonstrate the use of array #include<stdio.h> intmain() { // array declaration and initialization intarr[5]={10,20,30,40,50}; // modifying element at index 2 arr[2]=100; // traversing array using for loop printf(\"Elements in Array: \"); for(inti=0;i<5;i++){ printf(\"%d \",arr[i]); } return0; }\n\nOutput\n\nElements in Array: 10 20 100 40 50\n\nTypes of Array in C\n\nThere are two types of arrays based on the number of dimensions it has. They are as follows:\n\nOne Dimensional Arrays (1D Array)\n\nMultidimensional Arrays\n\n1. One Dimensional Array in C\n\nThe One-dimensional arrays, also known as 1-D arrays in C are those arrays that have only one dimension.\n\nSyntax of 1D Array in C\n\narray_name [size];\n\nExample of 1D Array in C\n\nC\n\n// C Program to illustrate the use of 1D array #include<stdio.h> intmain() { // 1d array declaration intarr[5]; // 1d array initialization using for loop for(inti=0;i<5;i++){ arr[i]=i*i-2*i+1; } printf(\"Elements of Array: \"); // printing 1d array by traversing using for loop for(inti=0;i<5;i++){ printf(\"%d \",arr[i]); } return0; }\n\nOutput\n\nElements of Array: 1 0 1 4 9\n\nArray of Characters (Strings)\n\nIn C, we store the words, i.e., a sequence of characters in the form of an array of characters terminated by a NULL character. These are called strings in C language.\n\nC\n\n// C Program to illustrate strings #include<stdio.h> intmain() { // creating array of character chararr[6]={'G','e','e','k','s','\\0'}; // printing string inti=0; while(arr[i]){ printf(\"%c\",arr[i++]); } return0; }\n\nOutput\n\nGeeks\n\nTo know more about strings, refer to this article â€“ Strings in C\n\n2. Multidimensional Array in C\n\nMulti-dimensional Arrays in C are those arrays that have more than one dimension. Some of the popular multidimensional arrays are 2D arrays and 3D arrays. We can declare arrays with more dimensions than 3d arrays but they are avoided as they get very complex and occupy a large amount of space.\n\nA. Two-Dimensional Array in C\n\nA Two-Dimensional array or 2D array in C is an array that has exactly two dimensions. They can be visualized in the form of rows and columns organized in a two-dimensional plane.\n\nSyntax of 2D Array in C\n\narray_name[size1] [size2];\n\nHere,\n\nsize1: Size of the first dimension.\n\nsize2: Size of the second dimension.\n\nExample of 2D Array in C\n\nC\n\n// C Program to illustrate 2d array #include<stdio.h> intmain() { // declaring and initializing 2d array intarr[2][3]={10,20,30,40,50,60}; printf(\"2D Array:\\n\"); // printing 2d array for(inti=0;i<2;i++){ for(intj=0;j<3;j++){ printf(\"%d \",arr[i][j]); } printf(\"\\n\"); } return0; }\n\nOutput\n\n2D Array: 10 20 30 40 50 60\n\nB. Three-Dimensional Array in C\n\nAnother popular form of a multi-dimensional array is Three Dimensional Array or 3D Array. A 3D array has exactly three dimensions. It can be visualized as a collection of 2D arrays stacked on top of each other to create the third dimension.\n\nSyntax of 3D Array in C\n\narray_name [size1] [size2] [size3];\n\nExample of 3D Array\n\nC\n\n// C Program to illustrate the 3d array #include<stdio.h> intmain() { // 3D array declaration intarr[2][2][2]={10,20,30,40,50,60}; // printing elements for(inti=0;i<2;i++){ for(intj=0;j<2;j++){ for(intk=0;k<2;k++){ printf(\"%d \",arr[i][j][k]); } printf(\"\\n\"); } printf(\"\\n\\n\"); } return0; }\n\nOutput\n\n10 20 30 40 50 60 0 0\n\nTo know more about Multidimensional Array in C, refer to this article â€“ Multidimensional Arrays in C\n\nRelationship between Arrays and Pointers\n\nArrays and Pointers are closely related to each other such that we can use pointers to perform all the possible operations of the array. The array name is a constant pointer to the first element of the array and the array decays to the pointers when passed to the function.\n\nC\n\n// C Program to demonstrate the relation between arrays and // pointers #include<stdio.h> intmain() { intarr[5]={10,20,30,40,50}; int*ptr=&arr[0]; // comparing address of first element and address stored // inside array name printf(\"Address Stored in Array name: %p\\nAddress of \" \"1st Array Element: %p\\n\", arr,&arr[0]); // printing array elements using pointers printf(\"Array elements using pointer: \"); for(inti=0;i<5;i++){ printf(\"%d \",*ptr++); } return0; }\n\nOutput\n\nAddress Stored in Array name: 0x7ffcab67d8e0 Address of 1st Array Element: 0x7ffcab67d8e0 Array elements using pointer: 10 20 30 40 50\n\nTo know more about the relationship between an array and a pointer, refer to this article â€“ Pointer to an Arrays | Array Pointer\n\nPassing an Array to a Function in C\n\nAn array is always passed as pointers to a function in C. Whenever we try to pass an array to a function, it decays to the pointer and then passed as a pointer to the first element of an array.\n\nWe can verify this using the following C Program:\n\nC\n\n// C Program to pass an array to a function #include<stdio.h> voidprintArray(intarr[]) { printf(\"Size of Array in Functions: %d\\n\",sizeof(arr)); printf(\"Array Elements: \"); for(inti=0;i<5;i++){ printf(\"%d \",arr[i]); } } // driver code intmain() { intarr[5]={10,20,30,40,50}; printf(\"Size of Array in main(): %d\\n\",sizeof(arr)); printArray(arr); return0; }\n\nOutput\n\nSize of Array in main(): 20 Size of Array in Functions: 8 Array Elements: 10 20 30 40 50\n\nReturn an Array from a Function in C\n\nIn C, we can only return a single value from a function. To return multiple values or elements, we have to use pointers. We can return an array from a function using a pointer to the first element of that array.\n\nC\n\n// C Program to return array from a function #include<stdio.h> // function int*func() { staticintarr[5]={1,2,3,4,5}; returnarr; } // driver code intmain() { int*ptr=func(); printf(\"Array Elements: \"); for(inti=0;i<5;i++){ printf(\"%d \",*ptr++); } return0; }\n\nOutput\n\nArray Elements: 1 2 3 4 5\n\nNote: You may have noticed that we declared static array using static keyword. This is due to the fact that when a function returns a value, all the local variables and other entities declared inside that function are deleted. So, if we create a local array instead of static, we will get segmentation fault while trying to access the array in the main function.\n\nProperties of Arrays in C\n\nIt is very important to understand the properties of the C array so that we can avoid bugs while using it. The following are the main properties of an array in C:\n\n1. Fixed Size\n\nThe array in C is a fixed-size collection of elements. The size of the array must be known at the compile time and it cannot be changed once it is declared.\n\n2. Homogeneous Collection\n\nWe can only store one type of element in an array. There is no restriction on the number of elements but the type of all of these elements must be the same.\n\n3. Indexing in Array\n\nThe array index always starts with 0 in C language. It means that the index of the first element of the array will be 0 and the last element will be N â€“ 1.\n\n4. Dimensions of an Array\n\nA dimension of an array is the number of indexes required to refer to an element in the array. It is the number of directions in which you can grow the array size.\n\n5. Contiguous Storage\n\nAll the elements in the array are stored continuously one after another in the memory. It is one of the defining properties of the array in C which is also the reason why random access is possible in the array.\n\n6. Random Access\n\nThe array in C provides random access to its element i.e we can get to a random element at any index of the array in constant time complexity just by using its index number.\n\n7. No Index Out of Bounds Checking\n\nThere is no index out-of-bounds checking in C/C++, for example, the following program compiles fine but may produce unexpected output when run.\n\nC\n\n// This C program compiles fine // as index out of bound // is not checked in C. #include<stdio.h> intmain() { intarr[2]; printf(\"%d \",arr[3]); printf(\"%d \",arr[-2]); return0; }\n\nOutput\n\n0 0\n\nIn C, it is not a compiler error to initialize an array with more elements than the specified size. For example, the below program compiles fine and shows just a Warning.\n\nC\n\n#include<stdio.h> intmain() { // Array declaration by initializing it // with more elements than specified size. intarr[2]={10,20,30,40,50}; return0; }\n\nOutput\n\nWarnings:\n\nprog.c: In function 'main':\n\nprog.c:7:25: warning: excess elements in array initializer\n\nint arr[2] = { 10, 20, 30, 40, 50 };\n\n^\n\nprog.c:7:25: note: (near initialization for 'arr')\n\nprog.c:7:29: warning: excess elements in array initializer\n\nint arr[2] = { 10, 20, 30, 40, 50 };\n\n^\n\nprog.c:7:29: note: (near initialization for 'arr')\n\nprog.c:7:33: warning: excess elements in array initializer\n\nint arr[2] = { 10, 20, 30, 40, 50 };\n\n^\n\nprog.c:7:33: note: (near initialization for 'arr')\n\nExamples of Array in C\n\nExample 1: C Program to perform array input and output.\n\nIn this program, we will use scanf() and print() function to take input and print output for the array.\n\nC\n\n// C Program to perform input and output on array #include<stdio.h> intmain() { // declaring an integer array intarr[5]; // taking input to array elements one by one for(inti=0;i<5;i++){ scanf(\"%d\",&arr[i]); } // printing array elements printf(\"Array Elements: \"); for(inti=0;i<5;i++){ printf(\"%d \",arr[i]); } return0; }\n\nOutput\n\nArray Elements: 15775231 0 0 0 4195776\n\nInput\n\n5 7 9 1 4\n\nOutput\n\nArray Elements: 5 7 9 1 4\n\nExample 2: C Program to print the average of the given list of numbers\n\nIn this program, we will store the numbers in an array and traverse it to calculate the average of the number stored.\n\nC\n\n// C Program to the average to two numbers #include<stdio.h> // function to calculate average of the function floatgetAverage(float*arr,intsize) { intsum=0; // calculating cumulative sum of all the array elements for(inti=0;i<size;i++){ sum+=arr[i]; } // returning average returnsum/size; } // driver code intmain() { // declaring and initializing array floatarr[5]={10,20,30,40,50}; // size of array using sizeof operator intn=sizeof(arr)/sizeof(float); // printing array elements printf(\"Array Elements: \"); for(inti=0;i<n;i++){ printf(\"%.0f \",arr[i]); } // calling getAverage function and printing average printf(\"\\nAverage: %.2f\",getAverage(arr,n)); return0; }\n\nOutput\n\nArray Elements: 10 20 30 40 50 Average: 30.00\n\nExample 3: C Program to find the largest number in the array.\n\nC\n\n// C Program to find the largest number in the array. #include<stdio.h> // function to return max value intgetMax(int*arr,intsize) { intmax=arr[0]; for(inti=1;i<size;i++){ if(max<arr[i]){ max=arr[i]; } } returnmax; } // Driver code intmain() { intarr[10] ={135,165,1,16,511,65,654,654,169,4}; printf(\"Largest Number in the Array: %d\", getMax(arr,10)); return0; }\n\nOutput\n\nLargest Number in the Array: 654\n\nAdvantages of Array in C\n\nThe following are the main advantages of an array:\n\nRandom and fast access of elements using the array index.\n\nUse of fewer lines of code as it creates a single array of multiple elements.\n\nTraversal through the array becomes easy using a single loop.\n\nSorting becomes easy as it can be accomplished by writing fewer lines of code.\n\nDisadvantages of Array in C\n\nAllows a fixed number of elements to be entered which is decided at the time of declaration. Unlike a linked list, an array in C is not dynamic.\n\nInsertion and deletion of elements can be costly since the elements are needed to be rearranged after insertion and deletion.\n\nConclusion\n\nThe array is one of the most used and important data structures in C. It is one of the core concepts of C language that is used in every other program. Though it is important to know about its limitation so that we can take advantage of its functionality.\n\nFAQs on C Array\n\n1. Define Array in C.\n\nAn array is a fixed-size homogeneous collection of elements that are stored in a contiguous memory location.\n\n2. How to declare an array in C?\n\nWe can declare array in C using the following syntax:\n\ndatatype array_name [size];\n\n3. How do you initialize an array in C?\n\nWe can initialize an array using two methods:\n\nUsing Initializer list\n\nUsing Loops\n\nUsing Initializer List\n\nWe can use an initializer list to initialize the array with the declaration using the following syntax:\n\ndatatype array_name [size] = {value1, value2,...valueN};\n\nUsing Loops\n\nWe can initialize an Array using Loops in C after the array declaration:\n\nfor (int i = 0; i < N; i++) {\n\narray_name[i] = valuei;\n\n}\n\n4. Why do we need Arrays?\n\nWe can use normal variables (v1, v2, v3, ..) when we have a small number of objects, but if we want to store a large number of instances, it becomes difficult to manage them with normal variables. The idea of an array is to represent many instances in one variable.\n\n5. How can we determine the size of the C array?\n\nWe can determine the size of the Array using sizeof Operator in C. We first get the size of the whole array and divide it by the size of each element type.\n\n6. What is the difference between Arrays and Pointers?\n\nThe following table list the differences between an array and a pointer:\n\nPointer\n\nArray\n\nA pointer is a derived data type that can store the address of other variables.An array is a homogeneous collection of items of any type such as int, char, etc.Pointers are allocated at run time.Arrays are allocated at compile time.The pointer is a single variable.An array is a collection of variables of the same type.Dynamic in NatureStatic in Nature."
    }
}