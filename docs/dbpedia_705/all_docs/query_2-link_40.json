{
    "id": "dbpedia_705_2",
    "rank": 40,
    "data": {
        "url": "https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes/blob/main/java/java-quiz.md",
        "read_more_link": "",
        "language": "en",
        "title": "linkedin-skill-assessments-quizzes/java/java-quiz.md at main · Ebazhanov/linkedin-skill-assessments-quizzes",
        "top_image": "https://repository-images.githubusercontent.com/196760810/15be417c-11ad-487a-82df-438f3560b77c",
        "meta_img": "https://repository-images.githubusercontent.com/196760810/15be417c-11ad-487a-82df-438f3560b77c",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Full reference of LinkedIn answers 2024 for skill assessments (aws-lambda, rest-api, javascript, react, git, html, jquery, mongodb, java, Go, python, machine-learning, power-point) linkedin excel test lösungen, linkedin machine learning test LinkedIn test questions and answers  - linkedin-skill-assessments-quizzes/java/java-quiz.md at main · Ebazhanov/linkedin-skill-assessments-quizzes",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes/blob/main/java/java-quiz.md",
        "text": "Q1. Given the string \"strawberries\" saved in a variable called fruit, what would fruit.substring(2, 5) return?\n\nrawb\n\nraw\n\nawb\n\ntraw\n\nReasoning: The substring method accepts two arguments.\n\nThe first argument is the index to start(includes that char at 2)\n\nand the second the index of the string to end the substring(excludes the char at 5).\n\nStrings in Java are like arrays of chars.\n\nTherefore, the method will return \"raw\" as those are the chars in indexes 2,3 and 4.\n\nYou can also take the ending index and subtract the beginning index from it, to determine how many chars will be included in the substring (5-2=3).\n\nQ2. How can you achieve runtime polymorphism in Java?\n\nmethod overloading\n\nmethod overrunning\n\nmethod overriding\n\nmethod calling\n\nQ3. Given the following definitions, which of these expressions will NOT evaluate to true?\n\nboolean b1 = true, b2 = false; int i1 = 1, i2 = 2;\n\n(i1 | i2) == 3\n\ni2 && b1\n\nb1 || !b2\n\n(i1 ^ i2) < 4\n\nReasoning: i2 && b1 are not allowed between int and boolean.\n\nQ4. What is the output of this code?\n\nclass Main { public static void main (String[] args) { int array[] = {1, 2, 3, 4}; for (int i = 0; i < array.size(); i++) { System.out.print(array[i]); } } }\n\nIt will not compile because of line 4.\n\nIt will not compile because of line 3.\n\n123\n\n1234\n\nReasoning: array.size() is invalid, to get the size or length of the array array.length can be used.\n\nQ5. Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?\n\ninterface Interface1 { static void print() { System.out.print(\"Hello\"); } } interface Interface2 { static void print() { System.out.print(\"World!\"); } }\n\nsuper1.print(); super2.print();\n\nthis.print();\n\nsuper.print();\n\nInterface1.print(); Interface2.print();\n\nReference\n\nQ6. What does the following code print?\n\nString str = \"abcde\"; str.trim(); str.toUpperCase(); str.substring(3, 4); System.out.println(str);\n\nCD\n\nCDE\n\nD\n\n\"abcde\"\n\nReasoning: You should assign the result of trim back to the String variable. Otherwise, it is not going to work, because strings in Java are immutable.\n\nQ7. What is the result of this code?\n\nclass Main { public static void main (String[] args){ System.out.println(print(1)); } static Exception print(int i){ if (i>0) { return new Exception(); } else { throw new RuntimeException(); } } }\n\nIt will show a stack trace with a runtime exception.\n\n\"java.lang.Exception\"\n\nIt will run and throw an exception.\n\nIt will not compile.\n\nQ8. Which class can compile given these declarations?\n\ninterface One { default void method() { System.out.println(\"One\"); } } interface Two { default void method () { System.out.println(\"One\"); } }\n\nA\n\nclass Three implements One, Two { public void method() { super.One.method(); } }\n\nB\n\nclass Three implements One, Two { public void method() { One.method(); } }\n\nC\n\nclass Three implements One, Two { }\n\nD\n\nclass Three implements One, Two { public void method() { One.super.method(); } }\n\nQ9. What is the output of this code?\n\nclass Main { public static void main (String[] args) { List list = new ArrayList(); list.add(\"hello\"); list.add(2); System.out.print(list.get(0) instanceof Object); System.out.print(list.get(1) instanceof Integer); } }\n\nThe code does not compile.\n\ntruefalse\n\ntruetrue\n\nfalsetrue\n\nQ10. Given the following two classes, what will be the output of the Main class?\n\npackage mypackage; public class Math { public static int abs(int num){ return num < 0 ? -num : num; } } package mypackage.elementary; public class Math { public static int abs (int num) { return -num; } }\n\nimport mypackage.Math; import mypackage.elementary.*; class Main { public static void main (String args[]){ System.out.println(Math.abs(123)); } }\n\nLines 1 and 2 generate compiler errors due to class name conflicts.\n\n\"-123\"\n\nIt will throw an exception on line 5.\n\n\"123\"\n\nExplanation: The answer is \"123\". The abs() method evaluates to the one inside mypackage.Math class, because the import statements of the form:\n\nimport packageName.subPackage.*\n\nis Type-Import-on-Demand Declarations, which never causes any other declaration to be shadowed.\n\nQ11. What is the result of this code?\n\nclass MainClass { final String message() { return \"Hello!\"; } } class Main extends MainClass { public static void main(String[] args) { System.out.println(message()); } String message() { return \"World!\"; } }\n\nIt will not compile because of line 10.\n\n\"Hello!\"\n\nIt will not compile because of line 2.\n\n\"World!\"\n\nExplanation: Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.\n\nQ12. Given this code, which command will output \"2\"?\n\nclass Main { public static void main(String[] args) { System.out.println(args[2]); } }\n\njava Main 1 2 \"3 4\" 5\n\njava Main 1 \"2\" \"2\" 5\n\njava Main.class 1 \"2\" 2 5\n\njava Main 1 \"2\" \"3 4\" 5\n\nQ13. What is the output of this code?\n\nclass Main { public static void main(String[] args){ int a = 123451234512345; System.out.println(a); } }\n\n\"123451234512345\"\n\nNothing - this will not compile.\n\na negative integer value\n\n\"12345100000\"\n\nReasoning: The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.\n\nQ14. What is the output of this code?\n\nclass Main { public static void main (String[] args) { String message = \"Hello world!\"; String newMessage = message.substring(6, 12) + message.substring(12, 6); System.out.println(newMessage); } }\n\nThe code does not compile.\n\nA runtime exception is thrown.\n\n\"world!!world\"\n\n\"world!world!\"\n\nQ15. How do you write a for-each loop that will iterate over ArrayList<Pencil>pencilCase?\n\nfor (Pencil pencil : pencilCase) {}\n\nfor (pencilCase.next()) {}\n\nfor (Pencil pencil : pencilCase.iterator()) {}\n\nfor (pencil in pencilCase) {}\n\nQ16. What does this code print?\n\nSystem.out.print(\"apple\".compareTo(\"banana\"));\n\n0\n\npositive number\n\nnegative number\n\ncompilation error\n\nQ17. You have an ArrayList of names that you want to sort alphabetically. Which approach would NOT work?\n\nnames.sort(Comparator.comparing(String::toString))\n\nCollections.sort(names)\n\nnames.sort(List.DESCENDING)\n\nnames.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())\n\nReference\n\nQ18. By implementing encapsulation, you cannot directly access the class's _ properties unless you are writing code inside the class itself.\n\nprivate\n\nprotected\n\nno-modifier\n\npublic\n\nQ19. Which is the most up-to-date way to instantiate the current date?\n\nnew SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())\n\nnew Date(System.currentTimeMillis())\n\nLocalDate.now()\n\nCalendar.getInstance().getTime()\n\nExplanation: LocalDate is the newest class added in Java 8\n\nQ20. Fill in the blank to create a piece of code that will tell whether int0 is divisible by 5:\n\nboolean isDivisibleBy5 = _____\n\nint0 / 5 ? true: false\n\nint0 % 5 == 0\n\nint0 % 5 != 5\n\nMath.isDivisible(int0, 5)\n\nQ21. How many times will this code print \"Hello World!\"?\n\nclass Main { public static void main(String[] args){ for (int i=0; i<10; i=i++){ i+=1; System.out.println(\"Hello World!\"); } } }\n\n10 times\n\n9 times\n\n5 times\n\ninfinite number of times\n\nExplanation: Observe the loop increment. It's not an increment, it's an assignment(post).\n\nQ22. The runtime system starts your program by calling which function first?\n\nprint\n\niterative\n\nhello\n\nmain\n\nQ23. What code would you use in Constructor A to call Constructor B?\n\npublic class Jedi { /* Constructor A */ Jedi(String name, String species){} /* Constructor B */ Jedi(String name, String species, boolean followsTheDarkSide){} }\n\nJedi(name, species, false)\n\nnew Jedi(name, species, false)\n\nthis(name, species, false)\n\nsuper(name, species, false)\n\nNote: This code won't compile, possibly a broken code sample.\n\nReference\n\nQ24. \"An anonymous class requires a zero-argument constructor.\" that's not true?\n\nAn anonymous class may specify an abstract base class as its base type.\n\nAn anonymous class does not require a zero-argument constructor.\n\nAn anonymous class may specify an interface as its base type.\n\nAn anonymous class may specify both an abstract class and interface as base types.\n\nQ25. What will this program print out to the console when executed?\n\nimport java.util.LinkedList; public class Main { public static void main(String[] args){ LinkedList<Integer> list = new LinkedList<>(); list.add(5); list.add(1); list.add(10); System.out.println(list); } }\n\n[5, 1, 10]\n\n[10, 5, 1]\n\n[1, 5, 10]\n\n[10, 1, 5]\n\nQ26. What is the output of this code?\n\nclass Main { public static void main(String[] args){ String message = \"Hello\"; for (int i = 0; i<message.length(); i++){ System.out.print(message.charAt(i+1)); } } }\n\n\"Hello\"\n\nA runtime exception is thrown.\n\nThe code does not compile.\n\n\"ello\"\n\nQ27. Object-oriented programming is a style of programming where you organize your program around _ and data, rather than _ and logic.\n\nfunctions; actions\n\nobjects; actions\n\nactions; functions\n\nactions; objects\n\nQ28. What statement returns true if \"nifty\" is of type String?\n\n\"nifty\".getType().equals(\"String\")\n\n\"nifty\".getType() == String\n\n\"nifty\".getClass().getSimpleName() == \"String\"\n\n\"nifty\" instanceof String\n\nQ29. What is the output of this code?\n\nimport java.util.*; class Main { public static void main(String[] args) { List<Boolean> list = new ArrayList<>(); list.add(true); list.add(Boolean.parseBoolean(\"FalSe\")); list.add(Boolean.TRUE); System.out.print(list.size()); System.out.print(list.get(1) instanceof Boolean); } }\n\nA runtime exception is thrown.\n\n3false\n\n2true\n\n3true\n\nQ30. What is the result of this code?\n\nclass Main { Object message() { return \"Hello!\"; } public static void main(String[] args) { System.out.print(new Main().message()); System.out.print(new Main2().message()); } } class Main2 extends Main { String message() { return \"World!\"; } }\n\nIt will not compile because of line 7.\n\nHello!Hello!\n\nHello!World!\n\nIt will not compile because of line 11.\n\nQ31. What method can be used to create a new instance of an object?\n\nanother instance\n\nfield\n\nconstructor\n\nprivate method\n\nQ32. Which is the most reliable expression for testing whether the values of two string variables are the same?\n\nstring1 == string2\n\nstring1 = string2\n\nstring1.matches(string2)\n\nstring1.equals(string2)\n\nQ33. Which letters will print when this code is run?\n\npublic static void main(String[] args) { try { System.out.println(\"A\"); badMethod(); System.out.println(\"B\"); } catch (Exception ex) { System.out.println(\"C\"); } finally { System.out.println(\"D\"); } } public static void badMethod() { throw new Error(); }\n\nA, B, and D\n\nA, C, and D\n\nC and D\n\nA and D\n\nExplanation: Error is not inherited from Exception.\n\nQ34. What is the output of this code?\n\nclass Main { static int count = 0; public static void main(String[] args) { if (count < 3) { count++; main(null); } else { return; } System.out.println(\"Hello World!\"); } }\n\nIt will throw a runtime exception.\n\nIt will not compile.\n\nIt will print \"Hello World!\" three times.\n\nIt will run forever.\n\nQ35. What is the output of this code?\n\nimport java.util.*; class Main { public static void main(String[] args) { String[] array = {\"abc\", \"2\", \"10\", \"0\"}; List<String> list = Arrays.asList(array); Collections.sort(list); System.out.println(Arrays.toString(array)); } }\n\n[abc, 0, 2, 10]\n\nThe code does not compile.\n\n[abc, 2, 10, 0]\n\n[0, 10, 2, abc]\n\nExplanation: The java.util.Arrays.asList(T... a) returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)\n\nQ36. What is the output of this code?\n\nclass Main { public static void main(String[] args) { String message = \"Hello\"; print(message); message += \"World!\"; print(message); } static void print(String message) { System.out.print(message); message += \" \"; } }\n\nHello World!\n\nHelloHelloWorld!\n\nHello Hello World!\n\nHello HelloWorld!\n\nQ37. What is displayed when this code is compiled and executed?\n\npublic class Main { public static void main(String[] args) { int x = 5; x = 10; System.out.println(x); } }\n\nx\n\nnull\n\n10\n\n5\n\nQ38. Which approach cannot be used to iterate over a List named theList?\n\nA\n\nfor (int i = 0; i < theList.size(); i++) { System.out.println(theList.get(i)); }\n\nB\n\nfor (Object object : theList) { System.out.println(object); }\n\nC\n\nIterator it = theList.iterator(); for (it.hasNext()) { System.out.println(it.next()); }\n\nD\n\ntheList.forEach(System.out::println);\n\nExplanation: for (it.hasNext()) should be while (it.hasNext()).\n\nQ39. What method signature will work with this code?\n\nboolean healthyOrNot = isHealthy(\"avocado\");\n\npublic void isHealthy(String avocado)\n\nboolean isHealthy(String string)\n\npublic isHealthy(\"avocado\")\n\nprivate String isHealthy(String food)\n\nQ40. Which are valid keywords in a Java module descriptor (module-info.java)?\n\nprovides, employs\n\nimports, exports\n\nconsumes, supplies\n\nrequires, exports\n\nQ41. Which type of variable keeps a constant value once it is assigned?\n\nnon-static\n\nstatic\n\nfinal\n\nprivate\n\nQ42. How does the keyword volatile affect how a variable is handled?\n\nIt will be read by only one thread at a time.\n\nIt will be stored on the hard drive.\n\nIt will never be cached by the CPU.\n\nIt will be preferentially garbage collected.\n\nQ43. What is the result of this code?\n\nchar smooch = 'x'; System.out.println((int) smooch);\n\nan alphanumeric character\n\na negative number\n\na positive number\n\na ClassCastException\n\nQ44. You get a NullPointerException. What is the most likely cause?\n\nA file that needs to be opened cannot be found.\n\nA network connection has been lost in the middle of communications.\n\nYour code has used up all available memory.\n\nThe object you are using has not been instantiated.\n\nQ45. How would you fix this code so that it compiles?\n\npublic class Nosey { int age; public static void main(String[] args) { System.out.println(\"Your age is: \" + age); } }\n\nMake age static.\n\nMake age global.\n\nMake age public.\n\nInitialize age to a number.\n\nQ46. Add a Duck called \"Waddles\" to the ArrayList ducks.\n\npublic class Duck { private String name; Duck(String name) {} }\n\nDuck waddles = new Duck(); ducks.add(waddles);\n\nDuck duck = new Duck(\"Waddles\"); ducks.add(waddles);\n\nducks.add(new Duck(\"Waddles\"));\n\nducks.add(new Waddles());\n\nQ47. If you encounter UnsupportedClassVersionError it means the code was ___ on a newer version of Java than the JRE ___ it.\n\nexecuted; interpreting\n\nexecuted; compiling\n\ncompiled; executing\n\ncompiled, translating\n\nQ48. Given this class, how would you make the code compile?\n\npublic class TheClass { private final int x; }\n\nA\n\npublic TheClass() { x += 77; }\n\nB\n\npublic TheClass() { x = null; }\n\nC\n\npublic TheClass() { x = 77; }\n\nD\n\nprivate void setX(int x) { this.x = x; } public TheClass() { setX(77); }\n\nExplanation: final class members are allowed to be assigned only in three places: declaration, constructor, or an instance-initializer block.\n\nQ49. How many times f will be printed?\n\npublic class Solution { public static void main(String[] args) { for (int i = 44; i > 40; i--) { System.out.println(\"f\"); } } }\n\n4\n\n3\n\n5\n\nA Runtime exception will be thrown\n\nQ50. Which statements about abstract classes are true?\n\n1. They can be instantiated. 2. They allow member variables and methods to be inherited by subclasses. 3. They can contain constructors.\n\n1, 2, and 3\n\nonly 3\n\n2 and 3\n\nonly 2\n\nQ51. Which keyword lets you call the constructor of a parent class?\n\nparent\n\nsuper\n\nthis\n\nnew\n\nQ52. What is the result of this code?\n\n1: int a = 1; 2: int b = 0; 3: int c = a/b; 4: System.out.println(c);\n\nIt will throw an ArithmeticException.\n\nIt will run and output 0.\n\nIt will not compile because of line 3.\n\nIt will run and output infinity.\n\nQ53. Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?\n\nAdd a static import.\n\nDeclare local copies of the constant in your code.\n\nThis cannot be done. You must always qualify references to static members with the class from which they came from.\n\nPut the static members in an interface and inherit from that interface.\n\nQ54. Which keyword lets you use an interface?\n\nextends\n\nimplements\n\ninherits\n\nImport\n\nQ55. Why are ArrayLists better than arrays?\n\nYou don't have to decide the size of an ArrayList when you first make it.\n\nYou can put more items into an ArrayList than into an array.\n\nArrayLists can hold more kinds of objects than arrays.\n\nYou don't have to decide the type of an ArrayList when you first make it.\n\nQ56. Declare a variable that holds the first four digits of Π\n\nint pi = 3.141;\n\ndecimal pi = 3.141;\n\ndouble pi = 3.141;\n\nfloat pi = 3.141;\n\nReasoning:\n\npublic class TestReal { public static void main (String[] argv) { double pi = 3.14159265; //accuracy up to 15 digits float pi2 = 3.141F; //accuracy up to 6-7 digits System.out.println (\"Pi=\" + pi); System.out.println (\"Pi2=\" + pi2); } }\n\nThe default Java type which Java will be used for a float variable will be double. So, even if you declare any variable as float, what the compiler has to do is assign a double value to a float variable, which is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.\n\nQ57. Use the magic power to cast a spell\n\npublic class MagicPower { void castSpell(String spell) {} }\n\nnew MagicPower().castSpell(\"expecto patronum\");\n\nMagicPower magicPower = new MagicPower(); magicPower.castSpell();\n\nMagicPower.castSpell(\"expelliarmus\");\n\nnew MagicPower.castSpell();\n\nReference\n\nQ58. What language construct serves as a blueprint containing an object's properties and functionality?\n\nconstructor\n\ninstance\n\nclass\n\nmethod\n\nQ59. What does this code print?\n\npublic static void main(String[] args) { int x=5,y=10; swapsies(x,y); System.out.println(x+\" \"+y); } static void swapsies(int a, int b) { int temp=a; a=b; b=temp; }\n\n10 10\n\n5 10\n\n10 5\n\n5 5\n\nQ60. What is the result of this code?\n\ntry { System.out.println(\"Hello World\"); } catch (Exception e) { System.out.println(\"e\"); } catch (ArithmeticException e) { System.out.println(\"e\"); } finally { System.out.println(\"!\"); }\n\nHello World\n\nIt will not compile because the second catch statement is unreachable\n\nHello World!\n\nIt will throw a runtime exception\n\nQ61. Which is not a Java keyword\n\nfinally\n\nnative\n\ninterface\n\nunsigned\n\nExplanation: native is a part of the JNI interface.\n\nQ62. Which operator would you use to find the remainder after division?\n\n%\n\n//\n\n/\n\nDIV\n\nReference\n\nQ63. Which choice is a disadvantage of inheritance?\n\nOverridden methods of the parent class cannot be reused.\n\nResponsibilities are not evenly distributed between parent and child classes.\n\nClasses related by inheritance are tightly coupled to each other.\n\nThe internal state of the parent class is accessible to its children.\n\nReference\n\nQ64. How would you declare and initialize an array of 10 ints?\n\nArray<Integer> numbers = new Array<Integer>(10);\n\nArray[int] numbers = new Array[int](10);\n\nint[] numbers = new int[10];\n\nint numbers[] = int[10];\n\nQ65. Refactor this event handler to a lambda expression:\n\ngroucyButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(\"Press me one more time..\"); } });\n\ngroucyButton.addActionListener(ActionListener listener -> System.out.println(\"Press me one more time...\"));\n\ngroucyButton.addActionListener((event) -> System.out.println(\"Press me one more time...\"));\n\ngroucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(\"Press me one more time...\");});\n\ngroucyButton.addActionListener(() -> System.out.println(\"Press me one more time...\"));\n\nReference\n\nQ66. Which functional interfaces does Java provide to serve as data types for lambda expressions?\n\nObserver, Observable\n\nCollector, Builder\n\nFilter, Map, Reduce\n\nConsumer, Predicate, Supplier\n\nReference\n\nQ67. What is a valid use of the hashCode() method?\n\nencrypting user passwords\n\ndeciding if two instances of a class are equal\n\nenabling HashMap to find matches faster\n\nmoving objects from a List to a HashMap\n\nReference\n\nQ68. What kind of relationship does \"extends\" denote?\n\nuses-a\n\nis-a\n\nhas-a\n\nwas-a\n\nReference\n\nQ69. How do you force an object to be garbage collected?\n\nSet object to null and call Runtime.gc()\n\nSet object to null and call System.gc()\n\nSet object to null and call Runtime.getRuntime().runFinalization()\n\nThere is no way to force an object to be garbage-collected\n\nReference\n\nQ70. Java programmers commonly use design patterns. Some examples are the _, which helps create instances of a class, the _, which ensures that only one instance of a class can be created; and the _, which allows for a group of algorithms to be interchangeable.\n\nstatic factory method; singleton; strategy pattern\n\nstrategy pattern; static factory method; singleton\n\ncreation pattern; singleton; prototype pattern\n\nsingleton; strategy pattern; static factory method\n\nQ71. Using Java's Reflection API, you can use _ to get the name of a class and _ to retrieve an array of its methods.\n\nthis.getClass().getSimpleName(); this.getClass().getDeclaredMethods()\n\nthis.getName(); this.getMethods()\n\nReflection.getName(this); Reflection.getMethods(this)\n\nReflection.getClass(this).getName(); Reflection.getClass(this).getMethods()\n\nQ72. Which is not a valid lambda expression?\n\na -> false;\n\n(a) -> false;\n\nString a -> false;\n\n(String a) -> false;\n\nQ73. Which access modifier makes variables and methods visible only in the class where they are declared?\n\npublic\n\nprotected\n\nnonmodifier\n\nprivate\n\nQ74. What type of variable can be assigned only once?\n\nprivate\n\nnon-static\n\nfinal\n\nstatic\n\nQ75. How would you convert a String to an Int?\n\n\"21\".intValue()\n\nString.toInt(\"21\")\n\nInteger.parseInt(\"21\")\n\nString.valueOf(\"21\")\n\nQ76. What method should be added to the Duck class to print the name Moby?\n\npublic class Duck { private String name; Duck(String name) { this.name = name; } public static void main(String[] args) { System.out.println(new Duck(\"Moby\")); } }\n\npublic String toString() { return name; }\n\npublic void println() { System.out.println(name); }\n\nString toString() { return this.name; }\n\npublic void toString() { System.out.println(this.name); }\n\nQ77. Which operator is used to concatenate Strings in Java\n\n+\n\n&\n\n.\n\n-\n\nReference\n\nQ78. How many times does this loop print \"exterminate\"?\n\nfor (int i = 44; i > 40; i--) { System.out.println(\"exterminate\"); }\n\ntwo\n\nfour\n\nthree\n\nfive\n\nQ79. What is the value of myCharacter after line 3 is run?\n\npublic class Main { public static void main (String[] args) { char myCharacter = \"piper\".charAt(3); } }\n\np\n\nr\n\ne\n\ni\n\nQ80. When should you use a static method?\n\nwhen your method is related to the object's characteristics\n\nwhen you want your method to be available independently of class instances\n\nwhen your method uses an object's instance variable\n\nwhen your method is dependent on the specific instance that calls it\n\nQ81. What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?\n\npass by reference\n\npass by occurrence\n\npass by value\n\nAPI call\n\nQ82. In Java, what is the scope of a method's argument or parameter?\n\ninside the method\n\nboth inside and outside the method\n\nneither inside nor outside the method\n\noutside the method\n\nQ83. What is the output of this code?\n\npublic class Main { public static void main (String[] args) { int[] sampleNumbers = {8, 5, 3, 1}; System.out.println(sampleNumbers[2]); } }\n\n5\n\n8\n\n1\n\n3\n\nQ84. Which change will make this code compile successfully?\n\npublic class Main { String MESSAGE =\"Hello!\"; static void print(){ System.out.println(message); } void print2(){} }\n\nChange line 2 to public static final String message\n\nChange line 6 to public void print2(){}\n\nRemove the body of the print2 method and add a semicolon.\n\nRemove the body of the print method.\n\nExplanation: Changing line 2 to public static final String message raises the error message not initialized in the default constructor.\n\nQ85. What is the output of this code?\n\nimport java.util.*; class Main { public static void main(String[] args) { String[] array = new String[]{\"A\", \"B\", \"C\"}; List<String> list1 = Arrays.asList(array); List<String> list2 = new ArrayList<>(Arrays.asList(array)); List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\")); System.out.print(list1.equals(list2)); System.out.print(list1.equals(list3)); } }\n\nfalsefalse\n\ntruetrue\n\nfalsetrue\n\ntruefalse\n\nQ86. Which code snippet is valid?\n\nArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};\n\nArrayList words = Arrays.asList(\"Hello\", \"World\");\n\nArrayList<String> words = {\"Hello\", \"World\"};\n\nArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));\n\nQ87. What is the output of this code?\n\nclass Main { public static void main(String[] args) { StringBuilder sb = new StringBuilder(\"hello\"); sb.deleteCharAt(0).insert(0, \"H\").append(\" World!\"); System.out.println(sb); } }\n\nIt will not compile.\n\n\"Hello World!\"\n\n\"hello\"\n\n???? The code effectively converts the initial \"hello\" into \"HelloWorld!\" by deleting the first character, inserting \"H\" at the beginning, and appending \" World!\" to the end.\n\nQ88. How would you use the TaxCalculator to determine the amount of tax on $50?\n\nclass TaxCalculator { static calculate(total) { return total * .05; } }\n\nTaxCalculator.calculate(50);\n\nnew TaxCalculator.calculate(50);\n\ncalculate(50);\n\nnew TaxCalculator.calculate($50);\n\nNote: This code won't compile, broken code sample.\n\nReference\n\nCode sample\n\nQ89. Which characteristic does not apply to instances of java.util.HashSet?\n\nuses hashcode of objects when inserted\n\ncontains unordred elements\n\ncontains unique elements\n\ncontains sorted elements\n\nExplanation: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.\n\nReference\n\nQ90. What is the output?\n\nimport java.util.*; public class Main { public static void main(String[] args) { PriorityQueue<Integer> queue = new PriorityQueue<>(); queue.add(4); queue.add(3); queue.add(2); queue.add(1); while (queue.isEmpty() == false) { System.out.printf(\"%d\", queue.remove()); } } }\n\n1 3 2 4\n\n4 2 3 1\n\n1 2 3 4\n\n4 3 2 1\n\nQ91. What will this code print, assuming it is inside the main method of a class?\n\nSystem.out.println(\"hello my friends\".split(\" \")[0]);\n\nmy\n\nhellomyfriends\n\nhello\n\nfriends\n\nQ92. You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?\n\n2\n\nWhen calling the put method, Java will throw an exception\n\n4\n\n3\n\nQ93. Which class acts as the root class for the Java Exception hierarchy?\n\nClonable\n\nThrowable\n\nObject\n\nSerializable\n\nQ94. Which class does not implement the java.util.Collection interface?\n\njava.util.Vector\n\njava.util.ArrayList\n\njava.util.HashSet\n\njava.util.HashMap\n\nExplanation: HashMap class implements Map interface.\n\nQ95. You have a variable of named employees of type List<Employee> containing multiple entries. The Employee type has a method getName() that returns the employee name. Which statement properly extracts a list of employee names?\n\nemployees.collect(employee -> employee.getName());\n\nemployees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());\n\nemployees.stream().map(Employee::getName).collect(Collectors.toList());\n\nemployees.stream().collect((e) -> e.getName());\n\nQ96. This code does not compile. What needs to be changed so that it does?\n\npublic enum Direction { EAST(\"E\"), WEST(\"W\"), NORTH(\"N\"), SOUTH(\"S\"); private final String shortCode; public String getShortCode() { return shortCode; } }\n\nAdd a constructor that accepts a String parameter and assigns it to the field shortCode.\n\nRemove the final keyword for the field shortCode.\n\nAll enums need to be defined on a single line of code.\n\nAdd a setter method for the field shortCode.\n\nQ97. Which language feature ensures that objects implementing the AutoCloseable interface are closed when it completes?\n\ntry-catch-finally\n\ntry-finally-close\n\ntry-with-resources\n\ntry-catch-close\n\nQ98. What code should go in line 3?\n\nclass Main { public static void main(String[] args) { array[0] = new int[]{1, 2, 3}; array[1] = new int[]{4, 5, 6}; array[2] = new int[]{7, 8, 9}; for (int i = 0; i < 3; i++) System.out.print(array[i][1]); //prints 258 } }\n\nint[][] array = new int[][];\n\nint[][] array = new int[3][3];\n\nint[][] array = new int[2][2];\n\nint[][] array = [][];\n\nQ99. Is this an example of method overloading or overriding?\n\nclass Car { public void accelerate() {} } class Lambo extends Car { public void accelerate(int speedLimit) {} public void accelerate() {} }\n\nneither\n\nboth\n\noverloading\n\noverriding\n\nQ100. Which choice is the best data type for working with money in Java?\n\nfloat\n\nString\n\ndouble\n\nBigDecimal\n\nReference\n\nQ101. Which statement about constructors is not true?\n\nA class can have multiple constructors with a different parameter list.\n\nYou can call another constructor with this or super.\n\nA constructor does not define a return value.\n\nEvery class must explicitly define a constructor without parameters.\n\nQ102. What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?\n\nRegular Expressions\n\nReflection\n\nGenerics\n\nConcurrency\n\nQ103. What will be printed?\n\npublic class Berries{ String berry = \"blue\"; public static void main(String[] args) { new Berries().juicy(\"straw\"); } void juicy(String berry){ this.berry = \"rasp\"; System.out.println(berry + \"berry\"); } }\n\nraspberry\n\nstrawberry\n\nblueberry\n\nrasp\n\nQ104. What is the value of forestCount after this code executes?\n\nMap<String, Integer> forestSpecies = new HashMap<>(); forestSpecies.put(\"Amazon\", 30000); forestSpecies.put(\"Congo\", 10000); forestSpecies.put(\"Daintree\", 15000); forestSpecies.put(\"Amazon\", 40000); int forestCount = forestSpecies.size();\n\n3\n\n4\n\n2\n\nWhen calling the put method, Java will throw an exception\n\nQ105. What is the problem with this code?\n\nimport java.util.ArrayList; import java.util.Arrays; import java.util.List; class Main { public static void main(String[] args) { List<String> list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\")); for(String value :list) { if(value.equals(\"a\")) { list.remove(value); } } System.out.println(list); // outputs [b,c] } }\n\nString should be compared using == method instead of equals.\n\nModifying a collection while iterating through it can throw a ConcurrentModificationException.\n\nThe List interface does not allow an argument of type String to be passed to the remove method.\n\nArrayList does not implement the List interface.\n\nQ106. How do you convert this method into a lambda expression?\n\npublic int square(int x) { return x * x; }\n\nFunction<Integer, Integer> squareLambda = (int x) -> { x * x };\n\nFunction<Integer, Integer> squareLambda = () -> { return x * x };\n\nFunction<Integer, Integer> squareLambda = x -> x * x;\n\nFunction<Integer, Integer> squareLambda = x -> return x * x;\n\nQ107. Which choice is a valid implementation of this interface?\n\ninterface MyInterface { int foo(int x); }\n\nA\n\npublic class MyClass implements MyInterface { // .... public void foo(int x){ System.out.println(x); } }\n\nB\n\npublic class MyClass implements MyInterface { // .... public double foo(int x){ return x * 100; } }\n\nC\n\npublic class MyClass implements MyInterface { // .... public int foo(int x){ return x * 100; } }\n\nD\n\npublic class MyClass implements MyInterface { // .... public int foo(){ return 100; } }\n\nQ108. What is the result of this program?\n\ninterface Foo { int x = 10; } public class Main{ public static void main(String[] args) { Foo.x = 20; System.out.println(Foo.x); } }\n\n10\n\n20\n\nnull\n\nAn error will occur when compiling.\n\nQ109. Which statement must be inserted on line 1 to print the value true?\n\n1: 2: Optional<String> opt = Optional.of(val); 3: System.out.println(opt.isPresent());\n\nInteger val = 15;\n\nString val = \"Sam\";\n\nString val = null;\n\nOptional<String> val = Optional.empty();\n\nQ110. What will this code print, assuming it is inside the main method of a class?\n\nSystem.out.println(true && false || true); System.out.println(false || false && true);\n\nfalse\n\ntrue\n\ntrue\n\ntrue\n\ntrue\n\nfalse\n\nfalse\n\nfalse\n\nQ111. What will this code print?\n\nList<String> list1 = new ArrayList<>(); list1.add(\"One\"); list1.add(\"Two\"); list1.add(\"Three\"); List<String> list2 = new ArrayList<>(); list2.add(\"Two\"); list1.remove(list2); System.out.println(list1);\n\n[Two]\n\n[One, Two, Three]\n\n[One, Three]\n\nTwo\n\nQ112. Which code checks whether the characters in two Strings,named time and money, are the same?\n\nif(time <> money){}\n\nif(time.equals(money)){}\n\nif(time == money){}\n\nif(time = money){}\n\nQ113. An _ is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An _ is an unexpected event that an application may be able to deal with to continue execution.\n\nexception,assertion\n\nAbnormalException, AccidentalException\n\nerror, exception\n\nexception, error\n\nQ114. Which keyword would not be allowed here?\n\nclass Unicorn { _____ Unicorn(){} }\n\nstatic\n\nprotected\n\npublic\n\nvoid\n\nQ115. Which OOP concept is this code an example of?\n\nList[] myLists = { new ArrayList<>(), new LinkedList<>(), new Stack<>(), new Vector<>(), }; for (List list : myLists){ list.clear(); }\n\ncomposition\n\ngenerics\n\npolymorphism\n\nencapsulation\n\nExplanation: Switch between different implementations of the List interface.\n\nQ116. What does this code print?\n\nString a = \"bikini\"; String b = new String(\"bikini\"); String c = new String(\"bikini\"); System.out.println(a == b); System.out.println(b == c);\n\ntrue; false\n\nfalse; false\n\nfalse; true\n\ntrue; true\n\nExplanation: == operator compares the object reference. String a = \"bikini\"; String b = \"bikini\"; would result in True. Here new creates a new object, so false. Use equals() method to compare the content.\n\nQ117. What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?\n\nnative\n\nvolatile\n\nsynchronized\n\nlock\n\nReference\n\nQ118. Which is a valid type for this lambda function?\n\n_____ oddOrEven = x -> { return x % 2 == 0 ? \"even\" : \"odd\"; };\n\nFunction<Integer, Boolean>\n\nFunction<String>\n\nFunction<Integer, String>\n\nFunction<Integer>\n\nExplaination, Reference\n\nQ119. What is displayed when this code is compiled and executed?\n\nimport java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, Integer> pantry = new HashMap<>(); pantry.put(\"Apples\", 3); pantry.put(\"Oranges\", 2); int currentApples = pantry.get(\"Apples\"); pantry.put(\"Apples\", currentApples + 4); System.out.println(pantry.get(\"Apples\")); } }\n\n6\n\n3\n\n4\n\n7\n\nExplanation\n\nQ120. What variable type should be declared for capitalization?\n\nList<String> songTitles = Arrays.asList(\"humble\", \"element\", \"dna\"); _______ capitalize = (str) -> str.toUpperCase(); songTitles.stream().map(capitalize).forEach(System.out::println);\n\nFunction<String, String>\n\nStream<String>\n\nString<String, String>\n\nMap<String, String>\n\nExplanation, Reference\n\nQ121. Which is the correct return type for the processFunction method?\n\n_____ processFunction(Integer number, Function<Integer, String> lambda) { return lambda.apply(number); }\n\nInteger\n\nString\n\nConsumer\n\nFunction<Integer, String>\n\nExplanation\n\nQ122. What function could you use to replace slashes for dashes in a list of dates?\n\nList<String> dates = new ArrayList<String>(); // missing code dates.replaceAll(replaceSlashes);\n\nUnaryOperator<String> replaceSlashes = date -> date.replace(\"/\", \"-\");\n\nFunction<String, String> replaceSlashes = dates -> dates.replace(\"-\", \"/\");\n\nMap<String, String> replaceSlashes = dates.replace(\"/\", \"-\");\n\nConsumer<Date> replaceSlashes = date -> date.replace(\"/\", \"-\");\n\nExplanation: replaceAll method for any List only accepts UnaryOperator to pass every single element into it then put the result into the List again.\n\nQ123. From which class do all other classes implicitly extend?\n\nObject\n\nMain\n\nJava\n\nClass\n\nExplanation\n\nQ124. How do you create and run a Thread for this class?\n\nimport java.util.date; public class CurrentDateRunnable implements Runnable { @Override public void run () { while (true) { System.out.println(\"Current date: \" + new Date()); try { Thread.sleep(5000); } catch (InterruptedException e) { throw new RuntimeException(e); } } } }\n\nThread thread = new Thread(new CurrentDateRunnable()); thread.start();\n\nnew Thread(new CurrentDateRunnable()).join();\n\nnew CurrentDateRunnable().run();\n\nnew CurrentDateRunnable().start();\n\nReference\n\nQ125. Which expression is a functional equivalent?\n\nList<Integer> numbers = List.of(1,2,3,4); int total = 0; for (Integer x : numbers) { if (x % 2 == 0) total += x * x; }\n\nA\n\nint total = numbers.stream() .transform(x -> x * x) .filter(x -> x % 2 == 0) .sum ();\n\nB\n\nint total = numbers.stream() .filter(x -> x % 2 == 0) .collect(Collectors.toInt());\n\nC\n\nint total = numbers.stream() .mapToInt (x -> {if (x % 2 == 0) return x * x;}) .sum();\n\nD\n\nint total = numbers.stream() .filter(x -> x % 2 == 0) .mapToInt(x -> x * x) .sum();\n\nExplanation: The given code in the question will give you the output 20 as total:\n\nnumbers // Input `List<Integer>` > [1, 2, 3, 4] .stream() // Converts input into `Stream<Integer>` .filter(x -> x % 2 == 0) // Filter even numbers and return `Stream<Integer>` > [2, 4] .mapToInt(x -> x * x) // Square the number, converts `Integer` to an `int`, and returns `IntStream` > [4, 16] .sum() // Returns the sum as `int` > 20\n\nQ126. Which is not one of the standard input/output streams provided by java.lang.System?\n\nprint\n\nout\n\nerr\n\nin\n\nReference\n\nQ127. The compiler is complaining about this assignment of the variable pickle to the variable jar. How would you fix this?\n\ndouble pickle = 2; int jar = pickle;\n\nUse the method toInt() to convert the pickle before assigning it to the jar.\n\nCast pickle to an int before assigning it to the jar.\n\nMake pickle into a double by adding + \".0\"\n\nUse the new keyword to create a new Integer from pickle before assigning it to the jar.\n\nReference\n\nQ128. What value should x have to make this loop execute 10 times?\n\nfor(int i=0; i<30; i+=x) {}\n\n10\n\n3\n\n1\n\n0\n\nQ129. The _ runs compiled Java code, while the _ compiles Java files.\n\nIDE; JRE\n\nJDK; IDE\n\nJRE; JDK\n\nJDK; JRE\n\nReference\n\nQ130. Which packages are part of Java Standard Edition\n\njava.net\n\njava.util\n\njava.lang\n\nAll above\n\nReference\n\nQ131. What values for x and y will cause this code to print \"btc\"?\n\nString buy = \"bitcoin\"; System.out.println(buy.substring(x, x+1) + buy.substring(y, y+2))\n\nint x = 0; int y = 2;\n\nint x = 1; int y = 3;\n\nint x = 0; int y = 3;\n\nint x = 1; int y = 3;\n\nQ132. Which keyword would you add to make this method the entry point of the program?\n\npublic class Main { public static void main(String[] args) { // Your program logic here } }\n\nexception\n\nargs\n\nstatic\n\nString\n\nReference To make the main method the entry point of the program in Java, we need to use the static keyword. So, the correct answer is: static The main method must be declared as public static void main(String[] args) to serve as the entry point for a Java program\n\nQ133. You have a list of Bunny objects that you want to sort by weight using Collections.sort. What modification would you make to the Bunny class?\n\n//This is how the original bunny class looks class Bunny{ String name; int weight; Bunny(String name){ this.name = name; } public static void main(String args[]){ Bunny bunny = new Bunny(\"Bunny 1\"); } }\n\nImplement the Comparable interface by overriding the compareTo method.\n\nAdd the keyword default to the weight variable.\n\nOverride the equals method inside the Bunny class.\n\nImplement Sortable and override the sortBy method.\n\nReference\n\nQ134. Identify the incorrect Java feature.\n\nObject-oriented\n\nUse of pointers\n\nDynamic\n\nArchitectural neural\n\nReference\n\nQ135. What is the output of this code?\n\nint yearsMarried = 2; switch (yearsMarried) { case 1: System.out.println(\"paper\"); case 2: System.out.println(\"cotton\"); case 3: System.out.println(\"leather\"); default: System.out.println(\"I don't gotta buy gifts for nobody!\"); }\n\ncotton\n\ncotton\n\nleather\n\ncotton\n\nleather\n\nI don't gotta buy gifts for nobody!\n\ncotton\n\nI don't gotta buy gifts for nobody!\n\nReference\n\nQ136. What language features do these expressions demonstrate?\n\nSystem.out::println Doggie::fetch\n\ncondensed invocation\n\nstatic references\n\nmethod references\n\nbad code\n\nReference\n\nQ137. What is the difference between the wait() and sleep() methods?\n\nOnly Threads can wait, but any Object can be put to sleep.\n\nA waiter can be woken up by another Thread calling notification whereas a sleeper cannot.\n\nWhen things go wrong, sleep throws an IllegalMonitorStateException whereas wait throws an InterruptedException.\n\nSleep allows for multi-threading whereas wait does not.\n\nReference\n\nQ138. Which is the right way to declare an enumeration of cats?\n\nenum Cats (SPHYNX, SIAMESE, BENGAL);\n\nenum Cats (\"sphynx\", \"siamese\", \"bengal\");\n\nenum Cats {SPHYNX, SIAMESE, BENGAL}\n\nenum Cats {\"sphynx\",\"siamese\",\"bengal}\n\nQ139. What happens when this code is run?\n\nList<String> horses = new ArrayList<String>(); horses.add (\" Sea Biscuit \"); System.out.println(horses.get(1).trim());\n\n\"Sea Biscuit\" will be printed.\n\n\" Sea Biscuit \" will be printed.\n\nAn IndexOutOfBoundsException will be thrown.\n\nA NullPointerException will be thrown.\n\nQ140. Which data structure would you choose to associate the amount of rainfall with each month?\n\nVector\n\nLinkedList\n\nMap\n\nQueue\n\nExplanation:\n\nfrom @yktsang01 in #3915 thread\n\nMap because the map is a key/value pair without creating new classes/objects. So can store the rainfall per month like Map<java.time.Month, Double>. The other options will most likely need some new class to be meaningful:\n\npublic class Rainfall { private java.time.Month month; private double rainfall; } Vector<Rainfall> LinkedList<Rainfall> Queue<Rainfall>\n\nQ141. Among the following which contains date information?\n\njava.sql timestamp\n\njava.io time\n\njava.io.timestamp\n\njava.sql.time\n\nQ142. What is the size of float and double in Java?\n\n32 and 64\n\n32 and 32\n\n64 and 64\n\n64 and 32\n\nQ143. When you pass an object reference as an argument to a method call what gets passed?\n\na reference to a copy\n\na copy of the reference\n\nthe object itself\n\nthe original reference\n\nQ144. Which choice demonstrates a valid way to create a reference to a static function of another class?\n\nFunction<Integer, Integer> funcReference = MyClass::myFunction;\n\nFunction<Integer, Integer> funcReference = MyClass()::myFunction();\n\nFunction<Integer, Integer> funcReference = MyClass().myFunction;\n\nFunction<Integer, Integer> funcReference = MyClass.myFunction();\n\nQ145. What is UNICODE?\n\nUnicode is used for the external representation of words and strings\n\nUnicode is used for internal representation of characters and strings\n\nUnicode is used for external representation of characters and strings\n\nUnicode is used for the internal representation of words and strings\n\nQ146. What kind of thread is the Garbage collector thread?\n\nUser thread\n\nDaemon thread\n\nBoth\n\nNone of these\n\nQ147. What is HashMap and Map?\n\nHashMap is Interface and map is a class that implements that\n\nHashMap is a class and map is an interface that implements that\n\nMap is a class and Hashmap is an interface that implements that\n\nMap is Interface and Hashmap is the class that implements that\n\nQ148. What invokes a thread's run() method?\n\nJVM invokes the thread's run() method when the thread is initially executed.\n\nMain application running the thread.\n\nstart() method of the thread class.\n\nNone of the above.\n\nExplanation: After a thread is started, via its start() method of the Thread class, the JVM invokes the thread's run() method when the thread is initially executed.\n\nQ149. What is true about a final class?\n\nclass declared final is a final class.\n\nFinal classes are created so the methods implemented by that class cannot be overridden.\n\nIt can't be inherited.\n\nAll of the above.\n\nExplanation: Final classes are created so the methods implemented by that class cannot be overridden. It can't be inherited. These classes are declared final.\n\nQ150. Which method can be used to find the highest value of x and y?\n\nMath.largest(x,y)\n\nMath.maxNum(x,y)\n\nMath.max(x,y)\n\nMath.maximum(x,y)\n\nQ151. void accept(T t) is method of which Java functional interface?\n\nConsumer\n\nProducer\n\nBoth\n\nNone\n\nQ152. Which of these does Stream filter() operate on?\n\nPredicate\n\nInterface\n\nClass\n\nMethods\n\nQ153. Which of these does Stream map() operates on?\n\nClass\n\nInterface\n\nPredicate\n\nFunction\n\nQ154. What code is needed at line 8?\n\n1: class Main { 2: public static void main(String[] args) { 3: Map<String, Integer> map = new HashMap<>(); 4: map.put(\"a\", 1); 5: map.put(\"b\", 2); 6: map.put(\"c\", 3); 7: int result = 0; 8: 9: result += entry.getValue(); 10: } 11: System.out.println(result); // outputs 6 12: } 13: }\n\nfor(MapEntry<String, Integer> entry: map.entrySet()) {\n\nfor(String entry: map) {\n\nfor(Integer entry: map.values()) {\n\nfor(Entry<String, Integer> entry: map.entrySet()) {\n\nQ155. What will print when Lambo is instantiated?\n\nclass Car { String color = \"blue\"; } class Lambo extends Car { String color = \"white\"; public Lambo() { System.out.println(super.color); System.out.println(this.color); System.out.println(color); } }\n\nblue white white\n\nblue white blue\n\nwhite white white\n\nwhite white blue\n\nQ156. Which command will run a FrogSounds app that someone emailed to you as a jar?\n\njar FrogSounds.java\n\njavac FrogSounds.exe\n\njar cf FrogSounds.jar\n\njava -jar FrogSounds.jar\n\nQ157. What is the default value of a short variable?\n\n0\n\n0.0\n\nnull\n\nundefined\n\nQ158. What will be the output of the following Java program?\n\nclass variable_scope { public static void main(String args[]) { int x; x = 5; { int y = 6; System.out.print(x + \" \" + y); } System.out.println(x + \" \" + y); } }\n\nCompilation Error\n\nRuntime Error\n\n5 6 5 6\n\n5 6 5\n\nExplanation: Scope of variable Y is limited.\n\nQ159. Subclasses of an abstract class are created using the keyword _.\n\nextends\n\nabstracts\n\ninterfaces\n\nimplements\n\nReference\n\nQ160. What will be the output of the following program?\n\nimport java.util.Formatter; public class Course { public static void main(String[] args) { Formatter data = new Formatter(); data.format(\"course %s\", \"java \"); System.out.println(data); data.format(\"tutorial %s\", \"Merit campus\"); System.out.println(data); } }\n\ncourse java tutorial Merit campus\n\ncourse java course java tutorial Merit campus\n\nCompilation Error\n\nRuntime Error\n\nQ161. Calculate the time complexity of the following program.\n\nvoid printUnorderedPairs(int[] arrayA, int[] arrayB){ for(int i = 0; i < arrayA.length; i++){ for(int j = 0; j < arrayB.length; j++){ if(arrayA[i] < arrayB[j]){ System.out.println(arrayA[i] + \",\" + arrayB[j]); } } } }\n\nO(N*N)\n\nO(1)\n\nO(AB)\n\nO(A*B)\n\nQ162. What do these expressions evaluate?\n\n1. true && false 2. true && false || true\n\n1. false 2. true\n\n1. false 2. false\n\n1. true 2. false\n\n1. true 2. true\n\nReference //check page number 47 and example number 4.:-}\n\nQ163. What allows the programmer to destroy an object x?\n\n1. x.delete()\n\n2. x.finalize()\n\n3. Runtime.getRuntime().gc()\n\n4. Only the garbage collection system can destroy an object.\n\nReference //No, the Garbage Collection can not be forced explicitly. We may request JVM for garbage collection by calling System.gc() method. But This does not guarantee that JVM will perform the garbage collection\n\nQ164. How many objects are eligible for garbage collection till flag\n\npublic class Test { public static void main(String [] args) { Test obj1 = new Test(); Test obj2 = m1(obj1); Test obj4 = new Test(); obj2 = obj4; //Flag doComplexStuff(); } static Test m1(Test mx) { mx = new Test(); return mx; } }\n\n1. 0\n\n2. 1\n\n3. 2\n\n4. 4\n\nReference // question no 5.\n\nQ165. Which interface definition allows this code to compile\n\nint length = 5; Square square = x -> x*x; int a = square.calculate(length);\n\nA\n\n@FunctionalInterface public interface Square { void calculate(int x); }\n\nB\n\n@FunctionalInterface public interface Square { int calculate(int x); }\n\nC\n\n@FunctionalInterface public interface Square { int calculate(int... x); }\n\nD\n\n@FunctionalInterface public interface Square { void calculate(int x, int y); }\n\nReference\n\nQ166. Which of the following represents the time complexity of an algorithm?\n\nO(N*N)\n\nO(1)\n\nO(A+B)\n\nO(A*B)\n\nReasoning: The answer option 'O(AB)' should be corrected to 'O(A*B)' to accurately represent the time complexity.\n\nO(N*N): This represents a quadratic time complexity, where the running time grows with the square of the input size.\n\nO(1): This represents constant time complexity, indicating that the algorithm's running time doesn't depend on the input size.\n\nO(A+B): This represents linear time complexity, indicating that the running time scales linearly with the sum of values A and B.\n\nO(A*B): This represents quadratic time complexity, indicating that the running time scales quadratically with the product of values A and B.\n\nThe original answer option 'O(AB)' is incorrect as it does not properly represent a known time complexity notation. The correct notation should be 'O(A*B)' to indicate quadratic time complexity.\n\nReference\n\nQ167. Calculate the space complexity of the following program.\n\nvoid createArray(int n) { int[] arr = new int[n]; for (int i = 0; i < n; i++) { arr[i] = i * 2; } }\n\nO(1)\n\nO(N)\n\nO(N^2)\n\nO(log(N))\n\n//In this program, an array of size n is created. The space complexity is determined by the size of the dynamic array, which is n. Therefore, the space complexity is O(N).\n\nQ167. What will be the output of the following Java code?\n\nimport java.util.*; public class genericstack <E> { Stack <E> stk = new Stack <E>(); public void push(E obj) { stk.push(obj); } public E pop() { E obj = stk.pop(); return obj; } } class Output { public static void main(String args[]) { genericstack <String> gs = new genericstack<String>(); gs.push(\"Hello\"); System.out.println(gs.pop()); } }\n\nH\n\nHello\n\nRuntime Error\n\nCompilation Error\n\n//In this program, The code defines a generic stack class, pushes the string \"Hello\" onto the stack, and then pops and prints \"Hello,\" resulting in the output \"Hello.\"\n\nQ168. In Java, what is the purpose of the synchronized keyword when used in the context of methods or code blocks?\n\nIt is used to specify that a method or code block is asynchronous, allowing multiple threads to execute it concurrently.\n\nIt is used to mark a method or code block as thread-safe, ensuring that only one thread can execute it at a time.\n\nIt indicates that the method or code block is highly optimized for performance and will run faster than non-synchronized methods.\n\nIt is used to prevent a method or code block from being executed by any thread, making it effectively \"locked.\"\n\nQ169. In Java, which of the following statements about the \"transient\" modifier is true?\n\nTransient variables cannot be accessed outside their declaring class.\n\nTransient variables are automatically initialized with a default value.\n\nTransient variables are not serialized when an object is serialized.\n\nTransient is a keyword used to define inner classes.\n\nQ170. The following prototype shows that a Cylinder subclass is derived from a superclass called Circle.\n\nClass Circle extends Cylinder.\n\nClass Cylinder derived Circle.\n\nClass Cylinder extends Circle.\n\nClass Circle derived Cylinder.\n\nQ171. What will be the output of the following Java code snippet?\n\nclass abc { public static void main(String args[]) { if(args.length>0) System.out.println(args.length); } }\n\nThe snippet compiles and runs but does not print anything.\n\nThe snippet compiles, runs, and prints 0.\n\nThe snippet compiles, runs, and prints 1.\n\nThe snippet does not compile.\n\nQ172. Which of these classes allows us to define our own formatting pattern for dates and times?\n\nDefinedDateFormat\n\nSimpleDateFormat\n\nComplexDateFormat\n\nUsersDateFormatRead\n\nReference\n\nQ173.What kind of relationship does extends denote?\n\nis-a\n\nhas-a\n\nwas-a\n\nuses-a"
    }
}