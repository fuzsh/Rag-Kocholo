{
    "id": "dbpedia_749_0",
    "rank": 33,
    "data": {
        "url": "https://aplwiki.com/wiki/APL_conference",
        "read_more_link": "",
        "language": "en",
        "title": "APL conference",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://aplwiki.com/resources/assets/licenses/cc-by-sa.png",
            "https://aplwiki.com/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "While many conferences and sequences of conferences have been held by the array language community, the term APL conference refers to a sequence of conferences held once per year, with some lapses, beginning in 1969, and ending in 2010 with no plans for future conferences. Initial conferences were organised by various universities or other institutions, with some connection to SHARE but no particular central authority. Beginning with the 1974 conference, APL 6, SIGAPL (or STAPL at the time) took over organization of the conferences. Conferences in 1977 and 1978 were not held primarily because of logistical failures, an occurrence which may have prompted vendors to begin holding their own IPSA and STSC conferences, but resumed afterwards and continued to be held every year until 2004. When no conference was arranged for 2005, Dyalog Ltd. began hosting its yearly Dyalog user meetings beginning in 2006, with both events happening in 2007. The last conference was held in 2010: organized in association with APL Germany and integrated with Dyalog's user meeting that year, it was seen as part of a sequence with the 2000 conference also in Berlin, but this sequence was not extended to 2020.\n\nConference details\n\nYear Location Title Date 1969 S.U.N.Y Binghamton, New York, USA The Conference on APL \"The March On Armonk\" July 11–12, 1969 1970 Goddard Space Flight Center, Greenbelt, MD, USA APL II June 19–20, 1970 1971 Berkeley, CA, USA APL III April 20–21, 1971 1972 Atlanta, Georgia APL IV June 15–16, 1972 1973 Toronto, Ontario APL V May 15–18, 1973 1974 Anaheim, CA, USA APL 6 May 14–17, 1974 1975 Pisa, Italy APL75 June 11–13, 1975 1976 Ottawa, Canada APL76 September 22–24, 1976 1978 Foothill College, Los Altos Hills, CA, USA \"APL78\" (unofficial) March 29, 1978 1979 Rochester, NY, USA APL '79 May 30–June 1, 1979 1980 Leeuwenhorst, Noordwijk, Holland APL '80 June 24–26, 1980 1981 San Francisco, CA, USA APL '81 October 21–23, 1981 1982 Heidelberg, Germany APL '82 September 1982 1983 Washington, D.C APL '83 April 10–13, 1983 1984 Helsinki, Finland APL '84 June 11–15, 1984 1985 Seattle, WA, USA APL and the future May 12–16, 1985 1986 Manchester, UK APL in Action July 7–11, 1986 1987 Dallas, TX, USA APL in Transition May 10–14, 1987 1988 Sydney, Australia APL '88 February 1–5, 1988 1989 New York City, NY, USA APL as a Tool of Thought August 7–10, 1989 1990 Copenhagen, Denmark APL 90: For the Future August 13–17, 1990 1991 Palo Alto, CA, USA APL '91 August 4–8, 1991 1992 St. Petersburg, Russia APL '92 July 6–10, 1992 1993 Toronto, Ontario, Canada APL '93 August 15–19, 1993 1994 Antwerp, Belgium The Language and Its Applications September 11–15, 1994 1995 San Antonio, Texas, USA Applied Programming Languages June 4–8, 1995 1996 Lancaster, UK Designing the Future July 29–August 1, 1996 1997 Toronto, Ontario, Canada Share knowledge / share success August 17–20, 1997 1998 Rome, Italy APL98 Conference on Array Processing Languages August 27–31, 1998 1999 Scranton, Pennsylvania, USA All Array Programming Languages August 10–14, 1999 2000 Berlin, Germany Think Arrays in a Great City July 24–27, 2000 2001 New Haven, Connecticut, USA An Arrays Odyssey June 25–28, 2001 2002 Madrid, Spain Array Processing Languages: Lore, Problems, and Applications July 22–25, 2002 2003 San Diego, California, USA Stretching the Mind June 11–14, 2003 2004 Montreal, Canada 2007 Montreal, Canada Arrays and Objects October 21–26, 2007 2010 Berlin, Germany APL 2010 LPA September 12–17, 2010\n\nPast conferences\n\n1960s\n\n1969\n\nThe first APL conference was held at SUNY Binghamton, the first university with an APL system and sponsor of the conference, July 11–12 of 1969. It was called \"The March on Armonk\" after IBM's headquarters in Armonk: although attendees did not travel to Armonk, many came to make demands of IBM as they might at a march. Its stated goals were\n\n(1) to bring together as a community of users those, primarily in university environments, who were using the APL\\360 Terminal System;\n\n(2) to indicate to IBM, both by what would transpire and by the volume of response, that the acceptance of the APL language had grown in a short period of time to an unusually high degree.[1]\n\nThe high attendance of roughly 220 was due in part to IBM sales people: as IBM had recently begun to sell APL\\360 as a stand-alone product, those in sales sought to learn about the language.[2]\n\nAttendee Garth Foster was motivated by the diverse interests represented at SUNY to rename his newsletter SHARE*APL\\360 to the APL Quote-Quad, and to establish the APL Implementer's Workshop. The latter served to bring the behavior of various APL implementations into closer alignment by offering implementors a forum to discuss design and implementation decisions.[3]\n\nA point of focus in early APL conferences was CAI, which stands for Computer Assisted Instruction. Sometimes the acronym CAL, or Computer Assisted Learning, is also used.\n\nIntroduction. James A. Higgins. [1].\n\nWelcoming address. G. Bruce Dearing. [2].\n\nAPL\\360 history. Adin Falkoff. [3] (web).\n\nSession I: University applications. [4].\n\nSession II: CAI in APL. [5].\n\nSession III: Teaching the APL language. James Higgins. [6].\n\nThe status and future of APL (Panel Discussion). Roberson Higgins. [7].\n\nSpecial interest groups. [8].\n\nQuestionnaire results. [9].\n\n1970s\n\n1970\n\nAt the suggestion of NASA employee Cyrus Creveling, a group of attendees of the 1969 conference agreed to hold a second conference at the Goddard Space Flight Center in Greenbelt, Maryland. It took place on June 19 and 20, 1970. The conference, reduced in attendance from 220 to 150, was held in the style of a workshop, with presentations and discussion but no papers or proceedings published. At this conference the first formal effort to establish SIGAPL was made by collecting the required 25 signatures for a petition to the ACM.[2]\n\nTwo reports from the conference were published in the APL Quote-Quad.[4][5] Ken Iverson and Adin Falkoff attended but spoke little about their plans, and Eric Iverson, then at I.P. Sharp, participated in discussion.\n\nTelemetry Data Processing. George H. Ludwig (NASA).\n\nDemonstration of an APL On-line Shared files system developed by Larry Breed and Eric Iverson at I.P. Sharp. Al Rose (STSC).\n\nAPL and Files on the IBM 1500. Henry T. Lippert (Florida State University) and Tom McMurchie (USAF).\n\nFile Management System. Gerry Enfield (Computer Company, Richmond).\n\nAPL\\360 file handling. Brooks White and John Rose (Agoranomic Teleprocessing Systems).\n\nAPL File-handling panel.\n\nScientific Analysis of Telemetry Data and the Need for File Linkages and Large Data Bases. James Kinsey (NASA).\n\nSome thoughts on Scalars, Commands and other aspects of APL. Jim Ryan (Burroughs).\n\nAn APL Implementation on the Univac 1108. Pat Haggerty (University of Maryland).\n\nPossible extensions to APL notation for graphics. Lynn Yarbrough (Arcon Corp).\n\n1971\n\nThe next APL conference was held at University of California on April 20 and 21, 1971. Again there were no formal proceedings, but summaries of each talk were printed in the next issue of the APL Quote-Quad.[6] Following the failure of the petition to form SIGAPL produced at the previous conference, some attendees suggested forming an organization independed of the ACM, but Alan Perlis, a former ACM president, argued instead to continue working with the ACM.[2]\n\nAPL as a Conversational Language - What is Missing? Alan Perlis.\n\nA Set of APL Programs for Use in Network Theory. Paul Penfield, Jr. (MIT).\n\nAn On-Line Proof Checker Operating under APL/360, with Applications for Computer-Aided Instruction in Logic, Mathematics, and Computer Science. Paul Page (UCLA). [10].\n\nThe CDC Star-100: An APL Oriented Machine.\n\nConditional Branch, APL Compiler. John Williams (Cornell)\n\nA Language Machine. Zaks and Steingart (UC Berkeley). [11].\n\nBulk I/O and Communications with LTSS. Jerry L. Owens (Livermore Time Sharing System).\n\nGeneralized Lists and Other Extensions. Jim Ryan (Burroughs).\n\nLRL APL Implementation on the CDC 6000-7600. Ned Dairike (Livermore Radiation Laboratory).\n\nTime Sharing APL for IBM 1130 Systems. Thomas P. Daniell (IBM)\n\nAPL on the Honeywell 635. Norman Glick and Richard Schrader (NSA). [12].\n\nA Micro-Programmed Implementation of an APL Machine. A. Hassitt, J. W. Lageshulte, and L. G. Lyon (IBM).\n\nAPL/700 - An APL Implementation for the Burroughs 6700 and 7700. Jim Ryan (Burroughs).\n\nAn 8-bit ASCII code. John Fletcher.\n\nThe MRX 1240 Communication Terminal and 1270 Transmission Control Unit. David Sant (Memorex Corporation).\n\nA Plotter of APL. Mike Dayton (Time Share Peripherals).\n\n1972\n\nThe 1972 APL User's Meeting was held in Atlanta, Georgia on June 15 and 16. It was co-hosted by the Atlanta Public Schools Computer Center and Georgia Tech,[7] and after the first day of presentations many participants toured the Computer Center, where APL was used including by students. Ken Iverson spoke at the closing luncheon the next day, discussing APL's development history and hinting at future directions. Submitted papers were refereed by Garth Foster.[8]\n\nIs APL epidemic? or a study of its growth through an extended bibliography. J. C. Rault and G. Demars. [13].\n\nAn APL approach to interactive display terminal graphics. W. H. Niehoff and A. L. Jones. [14].\n\nGraphics in APL. Alfred M. Bork. [15].\n\nAn interactive APL graphics system. Stuart G. Greenberg and Craig I. Johnson. [16].\n\nModeling a satellite experiment on APL. Charles D. Wende. [17].\n\nRepresenting negative integers in bit vectors. L. J. Woodrum. [18].\n\nAPL as a teaching tool: Two versatile tutorial approaches. Leslie N. Davis, Jak Eskinazi, and Daniel J. Macero. [19].\n\nThe evolution of an interactive chemistry laboratory program. Thomas R. Dehner and Bruce E. Norcross. [20].\n\nA collection of graph analysis APL functions. E. Girard, D. Bastin, and J. C. Rault. [21].\n\nManagement of APL time-sharing activities. J. Higgins and A. Kellerman. [22].\n\nEvery little bit hurts: Saving money by saving space in APL. Richard Alercia, Robert Swiatek, and Gerlad M. Weinberg. [23].\n\nSecurity of APL applications packages. Paul Penfield. [24].\n\nA PL/1 batch processor for APL. S. Charmonman and J. E. Bell. [25].\n\nSubtasking in APL. Alain Miville-deChêne and Louis P. A. Robichaud. [26].\n\nSuggestion for a “mapped”, extension of APL. C. Leibovitz. [27].\n\nAPL as a notation for statistical analysis. K. W. Smillie. [28].\n\nAn adaptive query system. E. Kellerman. [29].\n\nMicroprogram training - an APL application. Ray Polivka and Kent Haralson. [30].\n\nECAPL-An APL Electronic Circuit Analysis Program. Randall W. Jensen, Terry A. Higbee, and Paul M. Hansen. [31].\n\nUse of APL in teaching electrical network theory. Paul Penfield. [32].\n\n1973\n\nThe 1973 conference proceedings were published by Canadian Printco Limited, not the ACM.\n\nTeaching children thinking via APL. H. A. Peelle.\n\nTeaching APL. K. P. Carolan.\n\nAn introductory APL self-teaching package. D. Watson.\n\nMotivating arrays in teaching APL. G. H. Foster.\n\nThe variety of definitions of a simple function. E. E. McDonnell.\n\nTechniques in programming CAI with APL. J. R. Clark and R. Mercer.\n\nA table-driven program to play a game of logical deduction. S. Charmonman and D. K. Reed.\n\nCommunication, computers, and the classroom. L. N. Davis, J. Eskinazi, and D. J. Macero.\n\nA simulator for use of an APL computer in science teaching. G. Bartoli, L. Bartolo, and V. Spadavecchia.\n\nAPL as an aid to the teaching of undergraduate economics. J. R. Savary.\n\nAPL as an analytic notation. K. E. Iverson.\n\nFormal differentiation using APL. G. Wilhelmi.\n\nProposed notation and implementation for derivatives in APL. P. Penfield.\n\nPermutations. M. M. Halpern.\n\nXerox financial planning and control system in APL. J. W. Rough.\n\nThe brownbox information retrieval system. D. Flower.\n\nAn application of the binamila distribution to sales planning. H. M. Courtney and C. M. Cheney.\n\nAdministrative datafile handling via APL. W. R. Tinga.\n\nAPL for information management and CI. D. Vaskevitch.\n\nAPL/11 - A poor man's APL. D. G. Moffat and M. A. Jenkins.\n\nSimulating computers in symbolic assembler notation. H. J. Saal.\n\nApplication of a hybrid (two-mode) processing system. P. H. Russel, L. Wagshal, and J. C. Wiginton.\n\nAn APL translator for the B6700. I. M. Braude and M. A. Jenkins.\n\n1974\n\nThe extended file system at GSFC. May W. Adams. [33].\n\nA time study in numerical methods programming. Glen B. Alleman and John L. Richardson. [34].\n\nTowards an APL compiler. E. A. Ashcroft. [35].\n\nAPL optimization: A unified approach. G. Battarel and D. Tusera Laboria. [36].\n\nAlgebraic manipulation. J. W. Bergquist. [37].\n\nAPL as a language for interactive computer graphics. Alfred M. Bork. [38].\n\nAn application of a specialized data bank for analysis and information retrieval in the field. James A. Brown and Bernaro Verner. [39].\n\nManagement information/decision systems using APL. John G. H. Carlson and Richard Gilman. [40].\n\nConversational building and display of solid objects. V. Casarosa and S. Trumpy. [41].\n\nDevelopment of a Batch APL System. James F. Clementi and Peter Sandery. [42].\n\n“INSTANT CAI”. R. F. Conklin. [43].\n\nA generalized multi-stage cost minimization model in APL. Harley M. Courtney. [44].\n\nAPL unary matrix operators as represented by the eighth order Dihedral group. John H. Crayton. [45].\n\nAPL and its entry into the world (?). Cyrus J. Creveling. [46].\n\nTechniques for computer administered examinations of restricted or confidential material. Leslie N. Davis and Daniel J. Macero. [47].\n\nApplication of APL/360 in junior high school. David DeBarthe. [48].\n\nAPL\\INFO: A system for automatic documentation. P. Dell’orco and L. Bartolo. [49].\n\nThe use of APL in the management of a time sharing company. Daniel Dyer. [50].\n\nControlling numerically controlled machines using APL. E. J. Fancher. [51].\n\nLarge scale mathematical programming in an APL environment. R. S. Goncharsky, A. Rauch, and W. W. White. [52].\n\nA computer system providing microcoded APL. Charles A. Grant, Mark L. Greenberg, and David D. Redell. [53].\n\nA batch processing version of APL 1130 for student use. Joel D. Hail and Joel D. Kirscher. [54].\n\nDevelopment of a monitor-compatible version of APL 1130. Joel D. Kirscher and Joel D. Hail. [55].\n\nA first APL tournament package. M. J.D. Hopkins, H. G. Morin, and T. V. Narayana. [56].\n\nAPL and MIS: Two compatible concepts. Rolland A. Hurtubise. [57].\n\nAPL as a foundation for a Marketing Planning and Analysis System. W. F. Jarvis, H W. Wobbe, and H. Carim. [58].\n\nCross-country scoring and timing using APL. Alan L. Jones. [59].\n\nA graphical input capability for APL. A. L. Jones and R. H. Katyl. [60].\n\nA fast formatter for APL. Warren Juran. [61].\n\nAPL tools for combinatorics. Eduardo Kellerman and William C. Rodgers. [62].\n\nAn investigation of curve fitting methods using an APL graphics terminal. Anne Kellerman. [63].\n\nTeaching beyond elementary APL to applications users: Principal author. Anne Kellerman and Jeanine Meyer. [64].\n\nAPLGOL-2 a structured programming language system for APL. Robert A. Kelley and John R. Walters. [65].\n\nA spline package in APL. Robert J. Korsan. [66].\n\nPower system load flow in APL. Wilbur R. LePage and Lowell E. Lingo. [67].\n\nEvaluating the equality or inequality of symbol strings in APL. Geraldine MacDonald. [68].\n\nProgramming aids in Xerox APL. William J. Maybury. [69].\n\nThe caret functions: Efficient algorithms for scans and reductions of eight Boolean functions. E. E. McDonnell. [70].\n\nThe use of APL in management education. Ephraim R. McLean. [71].\n\nUses of general arrays and operators. J. E. Mezei. [72].\n\nCharacter string manipulation in APL. Charles R. Moore. [73].\n\nThe PCS APL shared file system. Warren Juran, Charles Moore, Carl Orndorff, and Larry Rice. [74].\n\nISP/1: A conversational statistical package. Michael D. Murray. [75].\n\nContour plotting in rectangular domains—an APL approach. W. H. Niehoff. [76].\n\nAPL and FORTRAN: A Symbiotic Mix for a Small Machine. C. P. Nielsan, T. H. Burnett, and W. Vernon. [77].\n\nAPL Data Management Systems (APLDMS). Salomon Ohayon and Pierre A. Lavallee. [78].\n\nAPL\\XAD: An extension of APL for abstract data manipulation. Michael D. D’Dell and John C. Thompson. [79].\n\nFlexible building of specialized information retrieval systems application to the management of APL functions as a programming aid. Jean-Claude Pages and Anne Mauboussin. [80].\n\n“A generalized learning” game. Howard A. Peelle. [81].\n\nA CAI system based on modifications to York/APL. Steve Peterson. [82].\n\nImproved security in APL applications packages. Thomas H. Puckett. [83].\n\nScalar Segment Processor for APL. Yves G. Raynaud and Louis P.A. Robichaud. [84].\n\nThe Newton Cotes coefficients in APL. John L. Richardson. [85].\n\nLexical and syntactic analysis of APL, generation of a prefix polish string. [86].\n\nCASPER. William A. Rux. [87].\n\nAn APL catalog system. James Schenck, John Peetz, and Chris Clausen. [88].\n\nThe use of APL in the teaching of probability. K. W. Smillie. [89].\n\nA virtual-variable name-specification operator for high level languages. A. J. Surkan. [90].\n\nThe financial planning system - the application of APL to financial modeling. Paul A. Tava. [91].\n\nBudget planning and costing in xerox APL. [92].\n\nA graphics system for APL users-APL/Graph-II. Larry Koenigsberg and Ned Thanhouser. [93].\n\nAPL/CAT: APL for computer assisted teaching. David Vaskevitch. [94].\n\nShared information management system. Kevin R. Weaver. [95].\n\nCommunications between users in a dispersed A.P.L network. Charles Weiss. [96].\n\nA modest information system implemented on APL. Charles D. Wende. [97].\n\nThe case for APL standards. Clark Leamann. [98].\n\nSpeech synthesis under APL. Donald B. Rueter. [99].\n\n1975\n\nWhat’s wrong with APL?. Philip S. Abrams. [100].\n\nSIAL/74 - an APLSV analog-logical block-diagram simulator. M. Alfonseca. [101].\n\nA formal definition of APL statement syntax. Everett F. Allen. [102].\n\nA portable APL translator. A. Andronico, G. Leoni, and E. Luciani. [103].\n\nExecutable models in APL to introduce concepts in computer science. G. Bartoli, L. Bartolo, P. C. Berry, and V. N. Spadavecchia. [104].\n\nAPLSV for a flexible man-computer dialog. J. Beetz. [105].\n\nLarge scale gymnastics championships: An on-line interactive collection and analysis of scores. Daniel L. Bernitt, James S. Walton, and Frederick S. Bader. [106].\n\nContent analysis of APL defined functions. Harvey W. Bingham. [107].\n\nAPL authorization processing. JOHN R. BLANCHARD. [108].\n\nAPLSV access to indexed sequential files. Gordon W. Chamberlain and Michael E. Massey. [109].\n\nAn approach to a multifaceted student information system in large medical school.. F. Clancy, S. Hoke, and T. Mullan. [110].\n\nAPL as a statutory language. Harley M. Courtney. [111].\n\nSystems programming tools. Harold A. Driscoll. [112].\n\nAPL functions for precision control in floating-point computations. Augustin A. Dubrulle. [113].\n\nAn extension of the domain of the APL domino function to rank deficient linear least squares systems. Augustin A. Dubrulle. [114].\n\nWhat lies beyond the branch arrow?. Garth H. Foster. [115].\n\nNode synchronization in a distributed computer network. P. Franchi, T. Pedrotti, and G. Sommi. [116].\n\nA design for APL software for man-machine dialogue with statistical applications. Michael L. Friendly and Richard M. Levine. [117].\n\nAssertions and APL programming. Susan L. Gerhart. [118].\n\nRemote job entry and output through APL. Uday G. Gujar. [119].\n\nMedical applications of data-driven APL programs. W. Hagamen, W. Bell, J. Lincoln, D. Linden, and J. Weber. [120].\n\nEfficient implementation of APL in a multilanguage environment. B. Hakami. [121].\n\nA network approach to APL implementation. M. D. Harbinson and L. J. Howard. [122].\n\nEvent variables - on conditions for APL. Thomas J. Harris. [123].\n\nEdge-labeled directed graphs in APL. Lyle G. Hartman. [124].\n\nDirect execution of APL on an IBM/370. A. Hassitt and L. E. Lyon. [125].\n\nTranslating APL, an empirical study. M. A. Jenkins. [126].\n\nThe design of an APL primitive function for the eigenproblem. M. A. Jenkins. [127].\n\nInteractive analysis of time series. Seppo Kaltio. [128].\n\nAPL symbolic manipulation and generating functions. A. Kellerman. [129].\n\nTeaching data base concepts using APL. J. Klebanoff, F. Lochovsky, and D. Tsichritzis. [130].\n\nOn-line interpreted batch APL. Naomi Geller Kleid and Gerald M. Weinberg. [131].\n\nA new array indexing system for APL. G. R. Lewis. [132].\n\nA notation for the GCD and LCM functions. E. E. McDonnell. [133] (web).\n\nTwo methods of using APL in the teaching of probability and statistics. U. M. von Maydell and K. W. Smillie. [134].\n\nAn APL environment for testing relational operators and search algorithms. F. P. Palermo. [135].\n\nApplication of APL for rapid verification of a digital system architecture. Behrooz Parhami. [136].\n\nAn APL interpreter written in APL. Paul Penfield. [137].\n\nThe york APL command processor for TSO. Enio Presutto. [138].\n\nWord processing functions. Samuel Waldo Reynolds. [139].\n\nProcess control languages and APL. J. A. Richter. [140].\n\nAPL[LAVAL] used as an interactive tool for the description, simulation and micro-programming of digital computers. Louis P.A. Robichaud, Yves Ouellet, and Gerard Simian. [141].\n\nSome properties of APL programs. Harry J. Saal and Zvi Weiss. [142].\n\nPlots related to subgradient optimization. Claudio Sandl. [143].\n\nA generalized APL shared variable system. Subramanya K. Shastry. [144].\n\nEASY and AVS: The two auxillary storage subsystems of the MCM/70. J. Morgan Smyth. [145].\n\nHospital administration of large numbers of multi-trauma patients. Mitchell Snyder, Bruno Lunenfeld, and Daniel Lieberman. [146].\n\nStructure of an Inf-Doc-System and its realization as an Experimental System in APL plus. H. Steinhauer. [147].\n\nOn-line video computer feedback of teaching performance. A. J. Surkan, T. Hoover, and L. Campbell. [148].\n\nBizarre APL solutions. Roy A. Sykes. [149].\n\nEMMA: Extended management macros in APL. Roy A. Sykes and Robert R. Decloss. [150].\n\nA segmented transformed display file for APL GRAPH-II. Ned Thanhouser. [151].\n\nSome combinatoric algorithms in APL. Norman D. Thomson. [152].\n\nExperimental comparison of two interpretation methods of APL.. Dimitri Tusera. [153].\n\nAn APL package for convex geometry. Richard A. Vitale and Alan J. Tarr. [154].\n\nAPLODS. James R. Wilson and Alan M. Marcum. [155].\n\n1976\n\n“Extension of APL to tree-structured information”. M. Alfonseca and M. L. Tavera. [156].\n\nA generalized digraph simulator. Brooke Allen. [157].\n\nAQL: An APL based system for accessing and manipulating data in a Relational Database System. F. Antonacci, P. Dell’Orco, and V. N. Spadavecchia. [158].\n\nReorganization of the APL libraries. E. Armitage, J. Chenier, C. Leibovitz, D. Precht, and Y. Zia. [159].\n\nGOFER: A system for evaluating projects in the petroleum industry. Frank B. Arthur. [160].\n\nInvestment Analysis application + style. J. Beetz. [161].\n\nA modular approach to teaching management science and statistics using APL. Dale H. Bent and Girard C. Pessis. [162].\n\nDistributive rounding in commercial applications. Paul Berry. [163].\n\nTEXTEDITing using APL/700. Harvey W. Bingham. [164].\n\nDynamic usage of APL primitive functions. Harvey W. Bingham and Kenneth T. Carvin. [165].\n\nYork APL-total database interface. Ian M. Cuthill. [166].\n\nInstructional databases in APL. Cecil E. Denney and Ronald E. Converse. [167].\n\nAPL functions which enhance APL branching. J. P. Dorocak. [168].\n\nKeyed files for databases in Sharp APL. M. Elliott. [169].\n\nHierarchical data management. Jan M. Engel. [170].\n\nA general interactive guidance for information retrieval and processing systems. R. Erbe and G. Walch. [171].\n\nSome implications of shared variables. Adin D. Falkoff. [172].\n\nThe ACTION/FILES file system. John S. Fisher. [173].\n\nGPMS, a general purpose memory management system—user’s memory—that is.. I. Ganapathy and R. F. Hobson. [174].\n\nΔEditor APL function and data maintenance system. R. G. Germain and J. W. Burgeson. [175].\n\nA simple approach to the empty generalized APL arrays. Ziad Jamil Ghandour. [176].\n\nAdding a modern control structure to APL without changing the syntax. W. K. Giloi and R. Hoffmann. [177].\n\nHigh level data management for the problem solver. Stuart G. Greenberg. [178].\n\nRecursive data structures and related control mechanisms in APL. W. E. Gull and M. A. Jenkins. [179].\n\nInteractive computing and the manager-machine interface. Art Guthrie. [180].\n\nThe design, development and operation of an APL-based MIS: The case of a small firm. Rolland A. Hurtubise and Yves Poulin. [181].\n\nTwo combinatoric operators. Kenneth E. Iverson. [182].\n\nAPL function editing in APL. Arto Juvonen. [183].\n\nAdaptive library documentation for APL. Naomi Kleid and Gerald M. Weinberg. [184].\n\nFunctions in APL to assist the programming and servicing of CAI-Lessons. Georg R. Lampl and Isolde Schell-Haungs. [185].\n\nAPL comparison tolerance. R. H. Lathwell. [186].\n\nAPL usage in Europe: Scope and value. Yves Le Borgne. [187].\n\nData Base Retrieval System (DBRS) a personalized data base system for the APL user. C. E. Mahood. [188].\n\nAPL as implementation language for financial data bases. George R. Mayforth. [189].\n\nZero divided by zero. E. E. McDonnell. [190] (web).\n\nInteractive computing in a course on numerical analysis. James E. McKenna. [191].\n\nThe use of APL for production applications: The concept of “throwaway code”. Ephraim R. McLean. [192].\n\nToward a data structure extension for APL. Wm J Mein. [193].\n\nToward a primitive recursive semantics for APL. Richard J. Orgass. [194].\n\nAPL used for management in a reprocessing plant. Bruno Petruschka. [195].\n\nAPL forecasting system. Jack Prins. [196].\n\nAn application of tree structures to an interactive double-entry bookkeeping system. Sander Rubin. [197].\n\nApplication diagnostic aids in APL/700. James L. Ryan and Harvey W. Bingham. [198].\n\nA case study of putting APL to work with a large database. James K. Schmidt. [199].\n\nAPL Econometric Planning Language (EPLAN). F. Schober and K. Spielberg. [200].\n\nA numeric-controlled formatter. G. M. Seeds and A. Arpin. [201].\n\nA planning and design technique. J. Siller. [202].\n\nRegression analysis: Theory and computation. K. W. Smillie. [203].\n\nLeast squares estimation of C.E.S. production function’s non-linear parameters. G. Soda and E. G. Vichi. [204].\n\nAutomatic workspace analysis and documentation. Joseph Specht. [205].\n\nAPL algorithm for a sequential search for a hidden target in a two-dimensional region. A. J. Surkan. [206].\n\nUsing APL to monitor APL. Anton G. Wellbrock, John W. Mizzi, and Richard D. Moore. [207].\n\nA general personnel information retrieval system in APL. K. K. Wing and Y. K. Wong. [208].\n\nAPL in Computer-Assisted Instruction: Simulation of Stochastic Processes in science teaching. S. W. Wittig and R. Eggensperger. [209].\n\nIndex. [210].\n\n1979\n\nThe 1979 APL conference was held in Rochester, New York from May 30 to June 1, and sponsored by SIGAPL (then STAPL). In part due to the lack of formal 1977 and 1978 conferences, attendance was very high, with over a thousand attendees[3] and 200 submitted papers. Abstracts could be submitted electronically by the major APL time-sharing services. Eight invited papers, presented to all participants, were given by notable computer scientists both inside and outside the APL community. In addition to talks, the conference featured a poster display and exhibits of APL implementations, terminals, and books. A banquet talk was given by Fred Brooks, with the title ⍉ 1 3 ⍴ 'APL' ⍝ A Sideways View of APL.[9]\n\nDeferred Execution: An “ACE” of an application. Donald A. Link and Martin W. Gardner. [211].\n\nMultisystem processing with APL. J. F. Sencindiver and D. H. Steinbrook. [212].\n\nAPL2M: Cross-computer software for straightforward language definition and code generation. Jean A.P.L. Rohmer. [213].\n\nDesigning efficient algorithms for APL: A case study of a hydraulic-network solver. Emanuel Gofman and Michael Rodeh. [214].\n\nDetermining probability distributions by maximum entropy and minimum cross-entropy. Rodney W. Johnson. [215].\n\nA neurologic diagnostic model of the human brain. Grace M. Hucko and W. D. Hagamen. [216].\n\nLaminar extension: An overlooked capability and the search for its proper home. George Mebus. [217].\n\nFuzzy residue. Eugene McDonnell. [218] (web).\n\nProposal for a complex APL. Paul Penfield. [219].\n\nRelational data-base management and APL. E. F. Codd. [220].\n\nThe nested rectangular array as a model of data. Trenchard More. [221].\n\nA software high performance APL interpreter. Harry J. Saal and Zvi Weiss. [222].\n\nThe Dynamic Incremental Compiler of APL\\3000. Ronald L. Johnston. [223].\n\nTentative compilation: A design for an APL compiler. Terrence C. Miller. [224].\n\nThe application of APL to control more efficient processes. A. P. Reeves. [225].\n\nGESOP: A relational data base using generalized arrays and data-base primitives. Michéle Pierre and Philippe Pierre. [226].\n\nArray theory in an APL environment. A. Hassitt and L. E. Lyon. [227].\n\nVisions: A computer-graphics notation. Judson Rosebush. [228].\n\nA note on pattern matching: Where do you find the match to an empty array?. Adin D. Falkoff. [229].\n\nSorting - a new/old problem. Howard J. Smith. [230].\n\nThe role of operators in APL. Kenneth E. Iverson. [231].\n\nStatistical software in APL: Bibliography. Richard M. Heiberger. [232].\n\nImplementations of APL on small computers. Ronald F. Bauer. [233].\n\nNested arrays as an extension for APL. Michael A. Jenkins. [234].\n\nAutomatic control of execution: An overview. Philip S. Abrams and John W. Myrna. [235].\n\nEvaluating extensions to APL. J. A. Brown. [236].\n\nNested rectangular arrays for measures, addresses, and paths. Trenchard More. [237].\n\nAn electrical-filter synthesis package based upon vector-space operations. T. G. Marshall and F. C. Liu. [238].\n\nAPL and a Black-Box theory of electric circuits. John C. Wilson. [239].\n\nImplementation of an APL-driven laboratory interface. R. V. Edwards, J. Gertler, J. A. Mann, F. Kucera, S. Herndon, and T. Gall. [240].\n\nStructured development of menu-driven application systems. John Sigle and John E. Howland. [241].\n\nMenus with APL, and other full-screen applications. Terry McKee. [242].\n\nAn airline-industry database. N. L. Ensenat, G. S. Rosen, and F. F. Speckman. [243].\n\nThe MACSYMA system for formula manipulation. J. Moses. [244].\n\nConstraints. Guy Lewis Steele and Gerald Jay Sussman. [245].\n\nEfficient storage management in APL. Roy A. Sykes. [246].\n\nProgramming with idioms in APL. Alan J. Perlis and Spencer Rugaber. [247].\n\nA toolbox for APL programmers. Robert C. Metzger. [248].\n\nA latent-expression exception-handling system. John C. Gilmore and Thomas H. Puckett. [249].\n\nAPL/Z80: An APL interpreter for Z80 microcomputers. John E. Howland and Philip Van Cleave. [250].\n\nSecure application environments in APL\\3000. Alan M. Marcum. [251].\n\nQAS*APL: A step towards program-free interactive problem solving. Jim Goff and Milos Konopasek. [252].\n\nAPL and the Grzegorczyk hierarchy. Seth Breidbart. [253].\n\nA general method for locally optimal search. Allen J. Friedman. [254].\n\nAPL and LISP—should they be combined, and if so how?. William H. Burge, Joel Moses, Vaughan R. Pratt, and Alan J. Perlis. [255].\n\nAn APL system-development facility. Douglas W. Flower and Maurice Elliott. [256].\n\nUsing an APL macroprocessor to implement generalized software systems. Mark R. Dempsey. [257].\n\nAn overlaying method for the effective organisation of APL systems. A D Crossley and G R Streeter. [258].\n\nAPL modeling of DeMorgan algebras. Terence J. Reed. [259].\n\nThe geometric primitives of APL. N. D. Thomson. [260].\n\nTeaching computer science with APL: An introduction to search procedures. Stewart A. Denenberg and Howard A. Peelle. [261].\n\nSteps toward an APL compiler. Clark Wiedmann. [262].\n\nSome implications of APL order-of-execution rules. Richard H. Lathwell. [263].\n\nOn the locus of program flow within and among secondary functions. Garth H. Foster. [264].\n\nSmalltalk and generic concepts in programming languages. Alan C. Kay. [265].\n\nDevelopment of an APL standard. A. D. Falkoff and D. L. Orth. [266].\n\nThe derivative operator. Kenneth E. Iverson. [267].\n\nOperators and uniform forms. Douglas J. Keenan. [268].\n\nA programming technique for non-rectangular data. Bob Smith. [269] (pdf).\n\nAn interactive APL simulation of hospital critical-care units. Donald Segal. [270].\n\nInteractive simulation gaming for energy-policy analysis. Peter D. Blair. [271].\n\nManagement of APL public libraries. Marguerite A. Boisvert. [272].\n\nInformation retrieval with APL by adaptive index and user guidance. Hans-Joerg Schek and Georg Walch. [273].\n\nA primitive-function APL keyed file system. Geoffrey Wiland. [274].\n\nAn APL-total interface. Rick Mayforth. [275].\n\nDevelopment of an APL standard. A. D. Falkoff and D. L. Orth. [276].\n\n1980s\n\n1980\n\nProceedings of the 1980 APL conference were published by North-Holland Publishing company (now part of Elsevier), and not by the ACM.\n\nNotation as a tool of thought. K. E. Iverson. (web).\n\nThe use of the inner-product operator of APL in graph applications. G. A. Blaauw and A. J. W. Duijvestijn.\n\nMicroprocessor software development using APL. F. Cesarini and G. Soda\n\nThe execute primitive function; how it widens the perspective of APL-programming. W. M. H. Rutten.\n\nThe use of APL in large applications. G. R. Mayforth.\n\nCivilising APL: an approach to integrated APL systems. D. Mathieson, R. Shaw, and J. White.\n\nBudgeting for large APL projects. S. Taylor and K. S. Andersen.\n\nSimulating power systems in APL. A. Wellbrock.\n\nSimulation of cash office set-ups. Th. A. M. van den Bruele.\n\nAPL*DS - an APL-based hardware specification simulation system. W. K. Giloi and P. M. Behr.\n\nAn experimental facility of inter-virtual-machine communication between APL and non-APL systems. M. Udo and S. Uno.\n\nAn APL compiler or the production environment. J. D. Sybalsky.\n\nAn alternative design for an APL engine. G. H. Foster and D. P. Fenster.\n\nAPL as a language for application prgrammers. G. R. Mayforth.\n\nConcepts of structure in APL. B. R. Martin.\n\nApplications of local functions in APL. S. B. Jaffe.\n\nGeneric programming, APL, and Smalltalk. A. C. Kay.\n\nLarge applications in APL. Ph. S. Abrams.\n\nMultiple execution environments in APL. A. M. Marcum.\n\nThe solutions of linear systems in APL: towards and extension of matrix divide. G. A. Martin.\n\nExtending APL to infinity. E. E. McDonnell and J. O. Shallit. (web).\n\nThe story of 0÷0. J. L. F. De Kerf.\n\nSome geometrical consequences of complex APL. N. D. Thomson.\n\nExtended direct definition of APL functions. R. C. Metzger.\n\nGrammatical inference with APL. C. Witteveen.\n\nMilling machine by APL. R. Pinzani, F. Pippolini, and R. Spugnoli.\n\nThe APL solution to a large planning problem. D. N. Owen and T. Talbot.\n\nAPL and functional morphology. G. C. A. Elshould.\n\nLinguisting modelling with APL. H. Koppelaar.\n\nA recovery system for APL applications. J. T. Hardin and C. M. Norcutt.\n\nBase interactive De Donnees D'Aval section (BIDAS). A. Vaissiere.\n\nBase operations within relational data models. F. Schmidt and N. B. Theilgaard.\n\nLITSYS, a small scale literature system. E. M. van Ingen and J. S. Ploem.\n\nAPL relational data base design aid. C. E. Mahood.\n\nAPL in computer assisted instruction, a selecting mechanism. J. Spoelstra.\n\nComputer-aided learning: a time-sharing system versus a stand-alone computer. J. Moonen, H. van Dissel, and B. Vink.\n\nA natural blend of APL and high school mathematics topics. L. Alvord.\n\nAlternative addition algorithms in APL: inplications for education. H. A. Peelle.\n\nMultivariate data analysis in APL. P. Lewi.\n\nT.ES.I: an APL command language for exploratory analysis of pictorial data definition commnads, exploration commnads and graphical commnads to go through a redefinition and/or refinement steps. P. Brambilla, M. dell' Oca, and P. Mussio.\n\nIntegrated data analysis and management. R. Erbe, R. Hartwig, H. Lehmann, G. Mueller, and U. Shauer.\n\nHow modern is APL? W. K. Giloi.\n\nUsing other programming languages to support APL. T. W. Cook.\n\nA group of input utility functions. M. W. Gardner and R. H. Swain.\n\nInternational standardization of APL. R. Tisserand.\n\nConstruction of APL processors. A. J. Perlis.\n\n1981\n\nThe 1981 APL conference was held in San Francisco, California from October 21 to 23. It featured eight invited talks in addition to 50 papers drawn from over 300 submissions, two panel discussions, tutorial lectures, and a poster display.[10] Also notable was a performance of APL Blossom Time given by Larry Breed, Jim Brown, and others.\n\nA vision of probability and statistics using APL. Linda Alvord. [277].\n\nText-editing and photocomposing APL publications. Arlene E. Azzarello. [278].\n\nThe dynamic storage management for increasing a programming language power: The SIMULA lesson. Karel Babcicky. [279].\n\nA distributed file system in APL. Jean-Pierre Barasz. [280].\n\nTensor and multilinear algebra. Sylvain H. Baron. [281].\n\nAdding and using structure in general arrays. J. Philip Benkard. [282].\n\nRepresentations for enclosed arrays. Robert Bernecky. [283].\n\nAPL and the search for truth: A set of functions to play New Eleusis. Michael J.A. Berry. [284].\n\nAn APL pattern-directed module for bidimensional data analysis. Silvana Bianchi, Piero Mussio, Anna Della Ventura, Anna Rampini, and Maurizio Dell’Oca. [285].\n\nThe APL identity crisis. J. A. Brown and M. A. Jenkins. [286].\n\nUsing an APL micro computer for distributive processing. Sandra L. Browne and Adrian Browne. [287].\n\nHidden plane elimination and surface shading of polygons representing buildings using APL. David L. Cornell and Warren G. Julian. [288].\n\nShould APL be a declining language?. Michael F. C. Crick. [289].\n\nAPL and Halstead’s theory of software metrics. Joseph L.F. De Kerf. [290].\n\nA regular expression pattern matching processor for APL. Mark R. Dempsey and Leslie H. Goldsmith. [291].\n\nA pictorial format function for patterning decorated numeric displays. Adin D. Falkoff. [292].\n\nComplex floor revisited. Doug Forkes. [293].\n\nAn APL poisson solver. Ronald I. Frank. [294].\n\nParsing and evaluation of APL with operators. M. P. Georgeff, I. Fris, and J. Kautsky. [295].\n\nQMOD: A system for automatically generating and solving analytical queueing network models. Leo H. Groner. [296].\n\nGraphical data structures in APL. Martin Hardwick. [297].\n\nAP19 - a shared variable terminal I/O interface for APL systems. Bruce J. Hartigan. [298].\n\nA function definition operator. Kenneth E. Iverson and Peter K. Wooster. [299].\n\nThe use of APL as an executable formal language in economics demonstrated by an example. Wolfgang H. Janko. [300].\n\nA development system for testing array theory concepts. M. A. Jenkins. [301].\n\nAPL in operating systems research. Greg Johnson. [302].\n\nProgramming development control system. Erkki Juvonen. [303].\n\nGeneric functions by nonstandard name scoping in APL. James T. Kajiya. [304].\n\nGeneric programming: APL and Smalltalk. Alan C. Kay. [305].\n\nA structured APL approach to computer aided instruction. Wilbur R. LePage. [306].\n\nTeaching macroeconomics using APL. Stephen D. Lewis. [307].\n\nBeyond laminate: Generalizing creation of new dimensions in arrays and function action along them. Jim Lucas. [308].\n\nPredicting the profitability of life insurance products. Eugene R. Mannacio. [309].\n\nCompiling into APL. George R. Mayforth. [310].\n\nAPL thinking finding array-oriented solutions. Robert C. Metzger. [311].\n\nMesa from the perspective of a designer turned user. James G. Mitchell. [312].\n\nNamespaces semipermeable membranes for APL applications. Ronald C. Murray. [313].\n\nA portable APL language test generation and verification system. Charles G. Nylander. [314].\n\nThe class concept in the Simula programming language. Jacob Palme and Mats Wallin. [315].\n\nTeaching a topic in cybernetics with APL: An introduction to neural net modelling. Howard A. Peelle. [316].\n\nAIDS, APL integrated-circuit design system. Paul Penfield. [317].\n\nPrincipal values and branch cuts in complex APL. Paul Penfield. [318].\n\nIs APL a programming language or isn’t it?. Alan J. Perlis. [319].\n\nIndexing and indexed replacement in APL. Roland H. Pesch. [320].\n\nExpert systems—a technology for intelligent assistance. Harry C. Reinstein. [321].\n\nExecute and its use. Will J. Roden and Garth H. Foster. [322].\n\nConvivial error recovery. Denis Samson and Yves Ouellet. [323].\n\nSETL-a very high level language oriented to software systems prototyping. Jack Schwartz. [324].\n\nInfinite arrays and diagonalization. J. O. Shallit. [325].\n\nNested arrays, operators, and functions. Bob Smith. [326].\n\nUse of APL in operations research an interactive dynamic programming model. Moshe Sniedovich. [327].\n\nAPL pi designing an APL type font. Joey K. Tuttle. [328].\n\nGenerating design proposals with APL graphic functions. John W. Wade. [329].\n\nCompile time syntax analysis of APL programs. Zvi Weiss and Harry J. Saal. [330].\n\nWorld view from a satellite. Philip R. Westlake. [331].\n\nImproved sharing of APL workspaces and libraries. James G. Wheeler. [332].\n\nProgress on an ANSI standard for APL. Clark Wiedmann. [333].\n\nAn APL mapping system. Anthony V. Williams and Stephen E. Winckelman. [334].\n\nTAGINE, an interactive tool for report generation. Colette Yazigi. [335].\n\n1982\n\nException handling in APL. Dennis R. Adler. [336].\n\nInteractive design of neutron beam collimators using the Monte Carlo technique in APL. C. Bastian. [337].\n\nNonpositional indexing for a relational data base. J. Philip Benkard. [338].\n\nAPL and the relational model. J. Michael Blackford and Robert M. Taylor. [339].\n\nExtending APL: What more can a programmer ask for?. Dragan Bozinovic. [340].\n\nAPL on a multiprocessor architecture. Norman Brenner. [341].\n\nAPLNET, a local computer network. Daniel Brocklebank. [342].\n\nUnderstanding arrays. James A. Brown. [343].\n\nThe hunting of the Snark. Philip R Chastney. [344].\n\nADONIS a dynamic APL interactive package for multivariate analysis. Josiane Confais, Sylviane Bonnefous, and Jean Brenot. [345].\n\nProblem solving with APL using micro-computers. A D Crossley and H J Ward. [346].\n\nDesirable extensions to APL for handling numerical multidimensional arrays. Egon Dorrer. [347].\n\nFITTEN - an APL workspace for nonlinear regression. Lutz Edler and Jutta Berger. [348].\n\nPracticing on the CORE Graphics System. G. Faconti and P. Palamidese. [349].\n\nSemicolon-bracket notation: A hidden resource in APL. A. D. Falkoff. [350].\n\nUses of APL in a manufacturing environment. Howard W. Gutzman and Edwardo Kellerman. [351].\n\nExperimental mathematics using APL and graphics. Charles Haspel and Alphonse Vasquez. [352].\n\nAdapting numerical algorithms to APL. Garry Helzer. [353].\n\nAPL full screen editing and error handling. Raymond C. Hooker. [354].\n\nAPL in education. Kenneth E. Iverson. [355].\n\nPractical uses of a model of APL. Kenneth E. Iverson and Arthur T. Whitney. [356] (web).\n\nThe use of APL primitives and function domains to produce general APL solutions to problems involving discontinuities. Warren G. Julian. [357].\n\nThe use and disuse of APL: An empirical study. Raymond Kanner. [358].\n\nManagement of a large block-diagonal macro-economic model in APL. Eeva-Liisa Kaski. [359].\n\nNUMETH a user oriented programming system for interactive application of numerical methods. Klaus Kilberth. [360].\n\nComputer arithmetic and programming languages. Ulrich W. Kulisch. [361].\n\nUsing APL in an Artificial Intelligence environment: A knowledge engineering system dealing with biographical data. Georges Lee, Ruddy Lelouche, Vincent Meissonnier, and Gian Piero Zarri. [362].\n\nAn APL simulation of feedback systems. Wilbur R. LePage and Richard McFee. [363].\n\nTransparent files in APL (A Preliminary Proposal). Jim Lucas. [364].\n\nExtending Halstead’s software science for a more precise measure of APL. Ross A. Mauri and A. Harry Williams. [365].\n\nA self-defining dynamic data management system using multiple access methods. Normand R. Montour. [366].\n\nRectangularly arranged collections of collections. Trenchard More. [367].\n\nExtending APL “optional arguments”. Richard L. Naugle and Joseph B. Schlam. [368].\n\nA technique for producing graphical presentations with instances of a unit symbol. Walter H. Niehoff. [369].\n\nA financial modeling language using Nested Arrays. Robert P. Noss. [370].\n\nTeaching a topic in psychology with APL: A cognitive information processing model. Howard A. Peelle. [371].\n\nLarge arrays and files. Roland Pesch. [372].\n\nA conceptual framework for the design of Market Simulations. Girard C. Pessis. [373].\n\nAutomated testing in APL—an application of exception handling. Jan F. Prins. [374].\n\nAPL event / response programming. David A. Rabenhorst. [375].\n\nCPS - an APL conference planning system on a microcomputer. Lutz Richter and Hellfried Ciorga. [376].\n\nA survey of extensions to APL. Karl Fritz Ruehr. [377].\n\nArray diagrams and the Nial approach. Fl. Schmidt and M. A. Jenkins. [378].\n\nEigenanalysis and polynomial root finding primitive functions. S. Schmidt, J. A. Brown, and M. A. Jenkins. [379].\n\nA programming environment for blind APL-programmers. Waltraud Schweikhardt. [380].\n\nComputational simplicial homology in APL. J. O. Shallit. [381].\n\nInteractive multilevel definition of APL functions. Moshe Sniedovich. [382].\n\nAPL - a boon to budgeting. Beverly J. Spellman and M. Scott Downing. [383].\n\nIndexing infinite arrays: Non-finite mathematics in APL. R. W.W. Taylor. [384].\n\nAn APL-guided tour through the elements of multi-dimensional geometry. Norman D. Thomson. [385].\n\nThe impact of microcomputers on APL. Philip A. Van Cleave. [386].\n\nAPL: A profitability language. William G. vonBerg. [387].\n\nThe use of APL in a concurrent data flow environment. Michael N. Wakshull. [388].\n\nThe application of an APL micro computer solving a commercial problem - a case study. H J Ward and P W Hurdley. [389].\n\nDesign considerations of a micro-based APL. J. C. Wilson and T. A. Wilkinson. [390].\n\nA short-run forecasting model. Miklós G. Zilahi-Szabó. [391].\n\nA parser as a user-interface, driven by an enclosed array.. Michael Zippel. [392].\n\n1983\n\nTeaching social studies concepts using concrete models expressed in APL. Tama Traberman. [393].\n\nAPL learning bugs. Murray Eisenberg and Howard A. Peelle. [394].\n\nIncreasing the use of APL. John W. Myrna. [395].\n\nInteractive circuit design program in APL. D. A. Zein, C. W. Ho, and A. J. Gruodis. [396].\n\nThe engineering computer library (ENGLIB) an APL system for increased engineering productivity. Harold R. Ward. [397].\n\nAn APL batch scheduler improves service and system management. Jeff Shrager and Lyle Hartman. [398].\n\nAPL as a tool for multivariate statistics. Norman Thomson. [399].\n\nInteractive data analysis and statistical graphics in APL. Neil W. Polhemus. [400].\n\nAPLDOT an APL programmer’s modeling language. Stephen R. Kruba. [401].\n\nTPLAN a table driven planning system. S. B. Jaffe. [402].\n\nTASO - an APL toolbox for financial planning. Tauno Ylinen and Pekka Lahti. [403].\n\nAn APL-based multiple-key file system. Stephen Deerhake. [404].\n\nExtending a report generator written in APL. David Hirschberg. [405].\n\nPublications inventory control and distribution. Deborah R. Richardson. [406].\n\nA file system for VM-TOTAL/APL. R. Bruce Mann. [407].\n\nAPL and I-D-S/II APL access to large databases. Bruce Frost. [408].\n\nInterfacing APL and SQL. Brian Hagenbuch and Martin Gardner. [409].\n\nCooperating input and output stack processors. Cory F. Skutt. [410].\n\nExamples of event handling in APL2. Alan Graham. [411].\n\nAttached processors in APL. Karl Soop. [412].\n\nA.P. 1 APL.68000’s local auxiliary processor mechanism. A. Van Cleave. [413].\n\nWorkspace interchange on microcomputers. L. J. Dickey. [414].\n\nGeneralizing APL I/O. Cory F. Skutt. [415].\n\nUsing graphs to analyze APL functions. Robert Metzger. [416].\n\nThe perils of plenty - managing a large APL project. Jill Wade and Mary Vislay. [417].\n\nAn inflation management system: SOLUTION-33T.M.. Mary Lou Fox. [418].\n\nAutomatic programming of APL functions for screen management. Y. S. Chua and C. N. Winton. [419].\n\nA flexible full-screen applications development workspace utilizing APL syntax. David M. Weintraub. [420].\n\nA powerful but simple editor based on APL. Norman Brenner. [421].\n\nA microcomputer APL*PLUS system implementation. Phelps Gates. [422].\n\nAn APL compiler for the UNIX timesharing system. Timothy A. Budd. [423].\n\nA performance comparison between an APL interpreter and compiler. Clark Wiedmann. [424].\n\nAPL2 syntax: Is it really right to left?. James A. Brown. [425].\n\nAPL syntax and semantics. Kenneth E. Iverson. [426] (web).\n\nValence and precedence in APL extensions. J. Philip Benkard. [427].\n\nMerrily we roll along: Some aspects of?. J. O. Shallit. [428].\n\nReflections on grades. J. Philip Benkard and John N. Seebe. [429].\n\nA comparison of reduction in APL with polyarity in LISP. David S. Touretzky. [430].\n\nToward shared variable events: implications of ⎕SVE in APL2. John A. Gerth. [431].\n\nExtending APL for pattern matching. Norman Brenner. [432].\n\nAPL function variants and system labels. David A. Rabenhorst. [433].\n\nFunction and context. Stephen Taylor. [434].\n\nDesigning and implementing an array theory incorporating abstract datatypes. James T. Kajiya. [435].\n\nAPL standardization. L. A. Morrow. [436].\n\n1984\n\nFrangere..decision support in many dimensions or..how to break the old spread sheet approach. Paul Barnetson. [437].\n\nA dyadic determinant function. Sylvain Baron. [438].\n\nAn extension of relational database model to probabilistic data. Renzo Beltrame. [439].\n\nAn APL interface to the open systems interconnection for large scale application systems. R. Beltrame, G. Faconti, and P. Palamidese. [440].\n\nRank vs depth for array partitioning. J. Philip Benkard. [441].\n\nSyntactic experiments with arrays of functions and operators. J. Philip Benkard. [442].\n\nFunction arrays. Robert Bernecky. [443].\n\nShared functions and variables as an aid to applications design. Michael J.A. Berry. [444].\n\nWord, image and metaphor to name APL concepts in many tongues. Paul Berry, Gottfried Bach, Michel Bouchard, Margarete Buch, Sachiko Ikeuchi Berry, and Roland Pesch. [445].\n\nEditing APL objects with CMS XEDIT. Norman Brenner. [446].\n\nVLSI circuit design using APL with fortran subroutines. Norman Brenner. [447].\n\nFunction assignment and arrays of functions. James A. Brown. [448].\n\nAPL two by two-syntax analysis by pairwise reduction. J. D. Bunda and J. A. Gerth. [449].\n\nAn APL system for interactive scientific-engineering graphics and data analysis. G. J. Burkland, P. Heidelberger, P. D. Welch, L. S.Y. Wu, and M. Schatzoff. [450].\n\nAn example of the APL’s incursion in the medical world: The usefulness of this language for non computer scientist physicians. Jean Canet. [451].\n\nGuidelines for the APL entrepreneur. Robert R. DeCloss. [452].\n\nAPL iconics. Maurizio S. Dell’Oca and Piero Mussio. [453].\n\nA high-performance environment for APL. John Delo and Sanford Friedman. [454].\n\nOne man’s view of the ideal APL system. Adin D. Falkoff. [455].\n\nAPL application development in a micro system environment. Jos Flury and Dirk Lankhorst. [456].\n\nAPL approaches to time-phased financial modelling logic. Ralph L. Fox. [457].\n\nAPL transmission path analysis for design of a local area network. A. A. Friedrich and R. D. Love. [458].\n\nMisnet—the APL management information system for communications network. Isaak Gilyutin. [459].\n\nRepresentation & combination of Boolean functions using APL. Eric Gullichsen. [460].\n\nUse of virus functions to provide a virtual APL interpreter under user control. J. B. Gunn. [461].\n\nComputational geometry with APL. Stig Gustafsson. [462].\n\nAn APL approach to differential equations. Garry Helzer. [463].\n\nRIPO: An automated prototyping tool based on nested arrays. Laurle J. Hendres. [464].\n\nInformation security issues in an APL application. Bill Hillman. [465].\n\nUsing fullscreen-support and graphics in an end-user-friendly management information system. Conrad H. Hoesle. [466].\n\nAPL editor features for productivity and quality. Timothy P. Holls. [467].\n\nAPL programming: A psychological model. Raymond C. Hooker. [468].\n\nAn operator calculus. Kenneth E. Iverson, Roland Pesch, and J. Henri Schueler. [469] (web).\n\nProposal for a prototyping kit. Jan Jantzen. [470].\n\nLogic programming in APL. Robert Jernigan. [471].\n\nApplication development and control system (ADACS). Rolf Körnemark. [472].\n\nAn input-checking function for APL systems. Richard Levine. [473].\n\nPolyvalent functions, operators, strand notation and their precedence. Richard L. Naugle and Joseph B. Schlam. [474].\n\nRepresenting rubik’s cube in APL. Howard A. Peelle. [475].\n\nThe impact of APL2 on teaching APL. Raymond P. Polivka. [476].\n\nAPL curvilinear regression and associated problems. M. P. Racite and S. R. Dickstein. [477].\n\nA proposal for control structures in APL. Denis P. Samson. [478].\n\nA fast APL algorithm for logic minimization. Alfred A. Schwartz. [479].\n\nThe future of programming—whither APL?. John R. Searle. [480].\n\nUsing APL as a preprocessing selector from large VSAM files. Michael Simpson. [481].\n\nCan an APL workspace be used as a data base?. Karl Soop. [482].\n\nExact nonparametrics in APL. Bernd Streitberg and Joachim Röhmel. [483].\n\nINFO-FRAGA, a user friendly query language for large files and data bases. Peter Söderström. [484].\n\nThe IBM personal computer APL system. M. Tavera, M. Alfonseca, and J. Rojas. [485].\n\nThe one tree (breaking out of the workspace). Stephen Taylor and Arthur Whitney. [486].\n\nCultivating trees - an essay in APL2. N. D. Thomson. [487].\n\nInteractive flowcharting on a presentation graphics terminal. Gustav Tollet. [488].\n\nSerialization of SVP requests-a locking proposal for APL. Michael Van Der Meulen. [489].\n\nPractical guidelines for a user-friendly interface. Jill Wade. [490].\n\nGeometric transformations in APL. John W. Wade. [491].\n\nUsing APL to understand bit-slice microprocessors. J. Welford. [492].\n\nOn representation and manipulation of mathematical formulas using general array data structure: IFORP (interactive formula processor). Kiyotaka Yasui. [493].\n\n1985\n\nArray oriented exception handling: a proposal for dealing with “invalid” data. Jim Lucas. [494].\n\nAn SQL interface for VS APL. Casey Bley. [495].\n\nThe APL 90 project: new directions in APL interpreters technology. Jean-Jacques Girardot. [496].\n\nFreestyle graphics with APL. Aale Roos and Heikki Laitonen. [497].\n\nDataflow analysis in APL. Timothy A. Budd. [498].\n\nCompiling APL for parallel execution on an FFP machine. Alexis Koster. [499].\n\nThe graphical kernal system—an opportunity for APL. Richard Nabavi. [500].\n\nAPL and GDDM (tutorial). Mary Lou Fox and Patrick Parks. [501].\n\nTeaching APL2. Raymond Polivka. [502].\n\nDesign of APL (tutorial). John Gerth. [503].\n\nSystem commands: an APL backwater revisited. Michael J. A. Berry. [504].\n\nAn integrated business application architecture. Wei-Tih Cheng. [505].\n\nSoftware publishing and the software developer. Philip Evans. [506].\n\nIntegrating ordinary type and many languages with the APL alphabet and keyboard. Paul Berry. [507].\n\nEfficiency in the APL environment—a full arsenal for attacking CPU hogs. Clark Wiedmann. [508].\n\nAPL teaching bugs. Howard A. Peelle and Murray Eisenberg. [509].\n\nAPL and robotics. A. Martin Euredjian. [510].\n\nArtificial intelligence development aids (AIDA). Gary Sullivan and Kenneth Fordyce. [511].\n\nImproving APL performance with custom written auxiliary processors. Andrew K. Dickey. [512].\n\nAMS: an APL management system. John W. Burgeson and Robert G. Germain. [513].\n\nControl of structure and evaluation. J. Philip Benkard. [514].\n\nCorporate application of APL—case studies (panel). Eric J. Baelen, Bion B. Bierer, Stephen B. Jaffe, Anthony R. Lantz, and Lynne C. Shaw. [515].\n\nAPL graphics products (panel). Carolyn B. Catlin, Linda Furrow, Clif Kranish, Neil W. Polhemus, and Jonathan R. Strong. [516].\n\nWriting interpreters (panel). Robert Bernecky, Geno Coschi, James Ryan, Bob Smith, Philip A. Van Cleave, and James Wheeler. [517].\n\nAPLIM—applied linear interactive models. J. I. Ansell and A. M. Sykes. [518].\n\nExtended shared-variable sessions. Karl Soop and Roderic A. Davis. [519].\n\nUsing dimensions to represent attributes. Dan M. King. [520].\n\nDesign: a financial modelling system. Fred Appleyard and Roger Hui. [521].\n\nStructural experiments with arrays of functions. J. Philip Benkard. [522].\n\nXPL: an expert systems framework in APL. Robert Bittlestone. [523].\n\nOperators for program control. Edward V. Eusebi. [524].\n\nOperators for recursion. Edward V. Eusebi. [525].\n\nThe use of APL versus other languages—a six year trend analysis. John W. Myrna and Peter G. DiChellis. [526].\n\nTadpoles and frogs: metamorphosis in APL code. Thomas J. Pritchard. [527].\n\nLotus 1-2-3 for mainframes (bringing a product to market). Kevin R. Weaver. [528].\n\nAn APL database system for R&D laboratories. H. A. Hartung. [529].\n\nMortgage insurance: a view from the APL terminal. Chester C. Foster and Thomas N. Herzog. [530].\n\nMathematics education through the perspective of rationalized APL. Linda Alvord. [531].\n\nAn introduction to STSC’s APL compiler. Jim Weigang. [532].\n\nA group of APL functions for computer-assisted instruction. Vin Grannell. [533].\n\nThe intelligent approach to teaching arithmetic. Irvin R. Whiteman. [534].\n\nN-dimensional geometry using APL2. Charles Haspel and Alphonse Thomas Vasquez. [535].\n\nAn APL production environment. Gösta Olavi. [536].\n\nInside the APL2 workspace. James A. Brown. [537].\n\nAPLGRAPH—how to develop graphics software without really trying. Tauno Ylinen. [538].\n\nAn APL based relational data management language using SYSTEM R as data server. F. Antonacci and P. Dell’Orco. [539].\n\n≅USER: the user-definable system function in Data General’s AOS/VS APL. Jan-Willem Neurdenburg and Phil S. Schwarz. [540].\n\nMEDCAT: an APL program for medical diagnosis, consultation, and teaching. W. D. Hagamen, Martin Gardy, Gregory Bell, Edwin Rekosh, and Steven Zatz. [541].\n\nCommercial applications (panel). Kevin R. Weaver, Thomas G. Atkins, Michael L. Haas, John A. Bunyan, Vess E. Irvine, and Douglas W. Taylor. [542].\n\nPromoting APL (panel). Patricia A. Buteux, Edward M. Cherlin, Percy Feiner, Jim Lucas, Eugene McDonnell, Michael Sunday, and Sheryl Winton. [543].\n\nDeveloping auxiliary processors (tutorial). Andrew K. Dickey. [544].\n\nAPL microcomputer products (panel). John D. Burger, John W. Myrna, Richard S. Paulson, David Saunders, Richard M. Smith, Philip A. Van Cleave, and John C. Wilson. [545].\n\nAPL programming standards (panel). Bion Bierer, Joe Heise, and Eugene Mannacio. [546].\n\n1986\n\nStyle and literacy in APL. Michael J. Berry and Roland H. Pesch. [547].\n\nManufacturing resource planning on a PC local area network. H. Clark Kee and Roy L. Post. [548].\n\nEmpty frames in sharp APL. Roland H. Pesch. [549] (web).\n\nA notation for manipulating arrays of operations. David J. Landaeta. [550].\n\nLAPLAN—A corporate planning model for Laura Ashley. Adam Dakin. [551].\n\nDevelopment of a portable software product for library automation. A. M. Barnaud, Y. Le Borgne, and B. Mailhol. [552].\n\nAPL2—A mathematician’s delight. Norman Thomson. [553].\n\nThe scope of APL in nuclear measurements. C. Bastian. [554].\n\nFrom tensor and suffix notation to APL. Egon Dorrer. [555].\n\nAPL in quality business management. Terence J. McKee. [556].\n\nQuaternions and homogeneous co-ordinates. Stig Gustafsson. [557].\n\nModelling the arithmetic of statistical distributions. Leo H. Groner and Janice H. Cook. [558].\n\nAPL graphics representation and analysis of space-based observations. Jack Rudd. [559].\n\nBringing graphic dialogues to APL. Karl Soop. [560].\n\nIOTA3: the integration of Lotus spreadsheets and APL. John R. Searle. [561].\n\nExtending worksheet modelling software with expert system technology. Gerald A. Sullivan and Kenneth J. Fordyce. [562].\n\nTopics for a second course in APL. Stephen B. Jaffe. [563].\n\nMachine-oriented languages in the APL environment. Jim Weigang. [564].\n\nMedium term forecasts of half-hourly power demand. J. E. McGowan and D. J. Parker. [565].\n\nCompiling optimized array operations at run-time. Thomas W. Christopher and Ralph W. Wallace. [566].\n\nAn APL/370 compiler and some performance comparisons with APL interpreter and FORTRAN. Wai-Mee Ching. [567].\n\nDELIS: A decision support system generator for frequency data. Richard W. Butterworth and Robert A. Stephan. [568].\n\nA generalised data base interface for APL. Robert Jernigan and Arie Eisner. [569].\n\nAPL compilation and interpretation by translating to F83VEC. Richard Naugle. [570].\n\nIdioms and problem solving techniques in APL2. Alan Graham. [571].\n\nAPL procedures (user defined operators, functions and token strings). Robert Hodgkinson. [572].\n\nField results with the APL compiler. Clark Wiedmann. [573].\n\nOpen fullscreen systems. Martin Gfeller and Monika Stengl. [574].\n\nAnalysis of function applications in deep arrays. J. Philip Benkard. [575].\n\nThe integration of relational database algebra into APL. David Livingstone. [576].\n\nAPL: A prototyping language. Robert Bernecky. [577].\n\nCheckpoint—Restart for APL applications. Otway O. Pardee. [578].\n\nAssertive comments in APL programming. David M. Weintraub. [579].\n\nAPL as a prototyping language: case study of a compiler development project. Matsuki Yoshino. [580].\n\nIncreasing productivity with ISPF/APL2. Loren B. Mayhew. [581].\n\nAutomated application programming environment. Yap S. Chua and Charles N. Winton. [582].\n\nWriting multi-user applications in APL2. James A. Brown. [583].\n\nA logic programming tool for qualitative system design. Gert L. Moller. [584].\n\nExtending APL to logic programming. M. Alfonseca and M. J. Tobar. [585].\n\nGeneralised arrays and shortest path problems. Claudio Sandi. [586].\n\nLogic programming in APL2. James A. Brown, Janice H. Cook, Leo H. Groner, and Ed Eusebi. [587].\n\nA perfect square root routine. E. E. McDonnell. [588] (web).\n\nAPL2 and AI: a study of search. Ed Eusebi and James A. Brown. [589].\n\nTypesetting APL using a Macintosh. John E. Howland. [590].\n\nTEXT: Publication-quality characters come to APL graphics. Ian Feldberg. [591].\n\nLOGOS: An APL programming environment. David B. Allen, Leslie H. Goldsmith, Mark R. Dempsey, and Kevin L. Harrell. [592].\n\nJapanese APL language system on IBM Multistation 5550. M. Udo, Y. Akimoto, S. Kaneko, T. Sanuki, and M. Alfonseca. [593].\n\n1987\n\nA three dimensional wire frame graphics system. Uday G. Gujar. [594].\n\nPractical uses of operators in Sharp APL/HP. Robert Hodgkinson. [595].\n\nControl system development tools. Scott Kimbrough. [596].\n\nWhy APL2: a discussion of design principles. James A. Brown. [597].\n\nThe role of APL in a technical language as illustrated by a modest battle management program. John C. McInturff. [598].\n\nProgramming considerations for documentation and maintenance. Stephen C. Fleming. [599].\n\nSome uses of { and }. Roger Hui. [600] (web).\n\nAPL87. Kenneth E. Iverson. [601] (web).\n\nTeaching theory of computation at the junior level. Y. S. Chua and C. N. Winton. [602].\n\nA minicomputer network management monitoring and analysis system using APL. Fred A. Gross and James C. Taylor. [603].\n\nAPL2—a very superior Fortran. Norman Thomson. [604].\n\nA model for teaching APL: moving into the fast lane. Tama Traberman. [605].\n\nApplication screen management: an APL2 approach. Stephen Deerhake. [606].\n\nOn APL software for credibility theory. M. J. Goovaerts. [607].\n\nAn object oriented extension to APL. Jean Jacques Girardot and Sega Sako. [608].\n\nSystem development methodology using LOGOS. David B. Allen, Mark R. Dempsey, and Leslie H. Goldsmith. [609].\n\nAn APL compiler: The SOFREMI-AGL compiler, a tool to produce low-cost efficient software. Alain Guillon. [610].\n\nTrees as nested arrays and the use of underdisclose. G. C. Nauta. [611].\n\nImplementation of an APL—based spreadsheet manager. Tom Puckett. [612].\n\nServer networks communicating via inter-user shared variables. Lawrence Zeidner. [613].\n\nTechniques for extracting statistical data from free-form text using APL. L. Owen Hill and David A. Zein. [614].\n\nBoolean array structures for a rule-based forward chaining inference engine. Kenneth Fordyce and Gerald Sullivan. [615].\n\nThe APL:9SPlus:2E System for the Macintosh: an overview. Edward R. Myers. [616].\n\nComponent file systems and the APL standard. Robert Bernecky and Maxine Hersch. [617].\n\nAutomatic generation of graphs from free-form text using APL. L. Owen Hill and David A. Zein. [618].\n\nManaging APL public code for an in-house APL system (before and after LOGOS). D. F. Stoneburner. [619].\n\nAPL2 implementations of unification. James A. Brown and Ramiro Guerreiro. [620].\n\nAPL extensions—a users view. Maurice H. Jordan. [621].\n\nA full-screen front end for GRAPHPAK. J. M. Cass. [622].\n\nReplicate each, anyone?. J. Philip Benkard. [623].\n\nAPL function definition notation. John Bunda. [624].\n\nFSM—a fullscreen manager. R. J. Busman. [625].\n\nA survival strategy for APL. Dick Bowman. [626].\n\nAPL to Ada translator. Jack G. Rudd and Eric M. Klementis. [627].\n\nA CAD system in APL. Uday G. Gujar and Joseph W. P. So. [628].\n\nScreen management in the “real world”. Edmund W. Stawick. [629].\n\nDevelopment of APL—based distributed processing systems. Steven I. Promisel. [630].\n\nTSIOPAK—a proposal for a new Sharp APL file system. Carlos G. Leon. [631].\n\nAn integrated microprogram development methodology based on APL. Jan W. M. Jacobs and Roger J. H. Hacking. [632].\n\nImplications of APL2 grammar. J. Philip Benkard. [633].\n\nUsing the LOGOS programming environment—a case history. Steve Chapman. [634].\n\nFunctional programming, the IEEE floating point standard and APL. Terence J. Reed. [635].\n\nA system for compiling fonts. John E. Howland. [636].\n\nSolutions to logic problems in APL2. James A. Brown and Manuel Alfonseca. [637].\n\nAn APL idiom inventory. Howard A. Peell. [638].\n\nA second generation DOMINO for statisticians. Alan Sykes. [639].\n\nInfinite loops and how to create them. John R. Searle. [640].\n\nInductive reasoning from relations. Edward V. Eusebi. [641].\n\nA proposal for blocks and exits in APL. Jim P. Fiegenschue. [642].\n\nAUTOMAT, an end-user approach in handling applications as multi-dimensional arrays. Jean Marie Monnier. [643].\n\nThe FinnAPL keyword editor. Juhani Sandberg, Olli Paavola, and Tauno Ylinen. [644].\n\nHow graphics could be simplified in APL. Gerard A. Langlet. [645].\n\nA case study in the design of an APL application: REGGPAK, an econometrics regression package. D. J. Parker and M. E. Elliott. [646].\n\nRecapturing the high ground—use of APL in decision tree modelling. Dick Bowman. [647].\n\nAPL thinking: examples. Murray Eisenberg and Howard A. Peelle. [648].\n\nThe syntax of APL, an old approach revisited. Jean Jacques Girardot and Florence Rollin. [649].\n\nInvestigation into the efficiency of using APL for the programming of an inference machine. Wolfgang H. Janko. [650].\n\nAPL—compilation-where does the time come from?. Graham C. Driscoll and Donald L. Orth. [651].\n\nHow to win the respect and admiration of the rest of the DP world. Kim S. Andreasen, Svend Elkjaer Frandsen, and Morten Kromberg. [652].\n\nDesigning APL2 programs for unification. James A. Brown and Ramiro Guerreiro. [653].\n\nDesign of a new user interface for APL. John E. Howland. [654].\n\nOPERA: options price evaluation and risk analysis system. Barry Bogart. [655].\n\nSherlock Holmes: the mystery of the vanishing variable. Roger Willink. [656].\n\nTypesetting APL using TROFF. Leroy J. Dickey. [657].\n\nUsing other languages to supplement APL. Donald W. Soule. [658].\n\n1988\n\nAPL2-a RISC business. M. Alfonseca and D. Selby. [659].\n\nParametric Fourier image characterization toolkit. J. R. F. Alonso. [660].\n\nAn interactive simulation modeling system: DYNAGRAPH for multi-period planning on an APL spreadsheet. T. Aonuma. [661].\n\nSymmetries of the firing squad sychronization problem revealed in a nested array. J. P. Benkard. [662].\n\nSome APL2 programming examples using nested arrays. J. P. Benkard. [663].\n\nAn introduction to function rank. R. Bernecky. [664].\n\nAn APL2 description of the IBM 3090 vector facility. J. A. Brown. [665].\n\nAPL object manager. B. Bykerk. [666].\n\nI-APL: A portable ISO APL in under 25K. P. Chapman. [667].\n\nAPL in a development environment. L. O. Clayton. [668].\n\nApplication-sol interaction: an APL2 approach. S. Deerhake. [669].\n\nHigh powers of matrices. L. J. Dickey. [670].\n\nStatistics loves APL. J. B. Douglas. [671].\n\nAPL: The language of science and management. A. Eisner, S. M. Yionoulis, J. A. Platt, and R. Jernigan. [672].\n\nComputer vision and its application to APL. I. Feldberg. [673].\n\nAPL2 implementation of numerical asset pricing models. W. Foote, J. Kraemer, and G. Foster. [674].\n\nEfficient evaluation of the area under the normal curve. G. Foster, J. Kraemer, and W. Foote. [675].\n\nFlexi-View: a multi-dimensional data modeling system. E. S. Friis and J. A. Goldberg. [676].\n\nIndexing and merging in APL. J. A. Gerth and D. L. Orth. [677].\n\nFrom a functional point of view: a framework for extensions to APL. M. Gfeller. [678].\n\nParts of arrays-an introduction. M. Gfeller. [679].\n\nAPL and finite elements for solving convection-diffusion problems, with examples from gas bearing design. F. Hendriks. [680].\n\nThe use of APL.68000 access to the Macintosh quickdraw system for the productio n of shadows cast by buildings. W. G. Julian. [681].\n\nComparative analysis of LISP and APL2. A. Kaneko. [682].\n\nAn experimental facility for cooperative processing in APL. S. Kaneko. [683].\n\nAPL and SAS in co-operation. E. Karjala. [684].\n\nAPL applied in music theory. M. Kassler. [685].\n\nAPL graphics for learning mathematics. M. Kikkawa. [686].\n\nThe theory of function arrays. D. Landaeta. [687].\n\nIncremental systems development-a case study. P. Landherr. [688].\n\nMaking APL cheap-Saving time and money in APL. J. Lucas. [689].\n\nLife: Nasty, brutish, and short. E. E. McDonnell. [690] (web).\n\nEXAPL (Expert System Based on APL) and its application to chemical analysis. T. Nishikawa. [691].\n\nAchievement certificates from graphics environment. T. M. Olsen. [692].\n\nIterative scaling of marks using APL-a case study. P. Petocz. [693].\n\nNetwork shared variable processor. R. L. Potyok. [694].\n\nThe compact display of arbitrary nested arrays. D. A. Rabenhorst. [695].\n\nScope and access classes in APL. M. Rys. [696].\n\nCasual management of large computer systems with APL programs. Charles A. Schulz. [697].\n\nWindows and pop-up menus in application design. A. Smith. [698].\n\nAPL graphics and the associative machine. K. Soop. [699].\n\nIssues in data base management for APL2. R. D. Stockbridge, A. Eisner, and R. Jernigan. [700].\n\nInnovation of decision support system-matplan based on structure matrix supported by APL. T. Toyama and M. Yauda. [701].\n\nAPL object transfer in a multi-APL site. H. F. van Eggelen. [702].\n\nAPL2 and the CMS system: Exploiting the APL2/REXX connection. D. M. Weintraub. [703].\n\nArrays of objects in rationalized APL. Andreas Werder. [704].\n\n1989\n\nAPL and PS/2: the language, the system, the peripherals. M. Alfonseca and D. A. Selby. [705].\n\nObject oriented programming in APL2. Manuel Alfonseca. [706].\n\nDiscrete simulation by APL-GPSS: the best of two worlds. M. v. Baaren, F. H. D. v. Batenburg, and H. P. T. v. d. Star. [707].\n\nUser defined data types in APL2. J. P. Benkard and J. A. Brown. [708].\n\nWhat is an argument?. H. C. Bertuccelli. [709].\n\nAPL and GDDM - a high performance toolkit. D. Bowman. [710].\n\nNeural network model of serial learning. H. A. Broadbent and J. Lucas. [711].\n\nUnderstanding selective assignment. J. A. Brown and B. Hawks. [712].\n\nAPL at the crossroads. R. Brown. [713].\n\nWorkspace `Maze’. A. Camacho. [714].\n\nAn empirical study of the performance of the APL370 compiler. W.-M. Ching, R. Nelson, and N. Shi. [715].\n\nA simulation tool for teaching CPU design and microprogramming concepts. Y. S. Chua and C. Winton. [716].\n\nHigh productivity techniques for large APL system. D. Cook. [717].\n\nYSM: a full-screen manager for Dyalog APL. S. D. Curtin and J. Scholes. [718].\n\nAPL as a tool of research for the mathematical scientist. E. J. Danial. [719].\n\nAPL on the factory floor. D. Eastwood. [720].\n\nImplementation of predicate logic in APL2. U. Engelmann, Th. Gerneth, and H. P. Meinzer. [721].\n\nAPL2 implementation of an interest rate volatility model. W. G. Foote and J. Kraemer. [722].\n\nA fusion of Lotus 1-2-3 and APL2. E. Friis. [723].\n\nAn APL-tutoring adventure game. A. Geyer-Schulz, A. Taudes, and J. Mitlöhner. [724].\n\nA future APL: examples and problems. M. Gfeffer. [725].\n\nObject oriented programming in AIDA APL. M. Gfeller. [726].\n\nA planning language (a PLanguage). T. Gilb. [727].\n\nAPLO: a simple modern APL. A. Graham. [728].\n\nProcessing natural language syntactic and semantic mechanisms. W. Hagamen, P. C. Berry, K. E. Iverson, and J. C. Weber. [729].\n\nOpportunities for system and user features in a new APL interpreter. R. F. Hobson, J. D. Hoskin, and R. W. Spilsbury. [730].\n\nPhrasal forms. E. E. McDonnell and K. E. Iverson. [731] (web).\n\nInference planning using digraphs and Boolean arrays. J. Jantzen. [732].\n\nAPL for music. S. Jordan. [733].\n\nThe benefits and advantages of APL. D. Julio and J. Mosland. [734].\n\nThe structure and content of APL data. D. Landaeta. [735].\n\nData typing in APL. D. Livingstone and H. Gharib. [736].\n\nTechniques for avoiding conditional execute in APL2. S. M. Mansour. [737].\n\nExpressing qualified logic in APL. J. C. McInturff. [738].\n\nActuarial and financial calculations with base value (⊥). D. Michelson. [739].\n\nAPL windowing systems - where next?. R. Nabavi. [740].\n\nAn APL approach to differential calculus yields a powerful tool. R. D. Neidinger. [741].\n\nThermochemical prediction program aided with EXAPL and APL2 data structure. Toshio Nishikawa and Ichiro Ogasawara. [742].\n\nAPL as a tool for computations in growth studies. T. Nummi. [743].\n\nAn expert system in chemical synthesis written in APL2/PC. P. Rodriguez, J. Rojas, M. Alfonseca, and J. I. Burgos. [744].\n\nAstrophysical APL - diamonds in the sky. G. Schneider, P. Paluzzi, and J. Webb. [745].\n\nAnalysis of robot manipulators. R. G. Selfridge. [746].\n\nMaking APL error messages kinder and gentler. W. J. Shaw. [747].\n\nReflections on teaching APL to eighth graders. K. Sternberg. [748].\n\nAn on-line help facility for APL2. J. Sullivan. [749].\n\nAPL descriptions of functional building blocks for connectionist computer models. A. Surkan. [750].\n\nEnhancing XEDIT as a an APL editor. R. Swain. [751].\n\nUsing APL2 in statistics. A. M. Sykes and A. G. Hawkes. [752].\n\nA paediatric management information system in APL. C. M. Sykes and A. M. Sykes. [753].\n\nGeneric binary trees in APL2. N. Thomson. [754].\n\nAPL in the workstation environment. J. R. Turner. [755].\n\nObservations on flight behavior in the butterfly. C. Waters. [756].\n\nMeasure productivity: use a generally accepted metric. K. R. Weaver. [757].\n\nAPL problem-solving (tutorial session): a tutorial. Murray Eisenberg and Howard Peelle. [758].\n\nProfiling, performance, and perfection (tutorial session). Robert Bernecky. [759] (pdf).\n\nAPL2 and SQL (tutorial session): a tutorial. Nancy Wheeler. [760].\n\nPerformance enhancers (tutorial session). Eric Baelen, Kevin Weaver, Roy Sykes, and Robert Lauer. [761].\n\nExchanging APL workspaces (tutorial session). Harry Bertuccelli. [762].\n\nDesktop publishing or when cutting and pasting become a drag (tutorial session). Pamela Baron and James Kraemer. [763].\n\nUsing APL for computer graphics notation (tutorial session). Judson Rosebush. [764].\n\n1990s\n\n1990\n\nThe A+ programming language, a different APL. Jean-Jacques Girardot. [765].\n\nAn APL-simulator of non-Von Neumann computer architectures. Andreas Geyer-Schulz, Johann Mitlöhner, and Alfred Taudes. [766].\n\nSRS service report system. Jan Ahlqvist. [767].\n\nNeural networks in APL. Manuel Alfonseca. [768].\n\nObject oriented programming, tutorial. Manuel Alfonseca. [769].\n\nIntegrating APL with symbol manipulation, numerical software and graphics. Heikki Apiola and Pirkka Peltola. [770].\n\nConscientious programming using PMA. Guy Barker, Douglas J. Keenan, and Herman van Loon. [771].\n\nNonce functions. J. Philip Benkard. [772].\n\nACORN: APL to C on real numbers. Robert Bernecky, Charles Brenner, Stephen B. Jaffe, and George P. Moeckel. [773] (download).\n\nDefinition of image interpretation strategies in APL. P. Bottoni, P. Mussio, and M. Protti. [774].\n\nPreliminary mesh checking for structural analysis. Renato Capra. [775].\n\nAPL trivia. Edward Cherlin. [776].\n\nAutomatic parallelization of APL-style programs. Wai-Mee Ching. [777].\n\nAnalytic response time model for distributed systems. Janice H. Cook and Leo H. Groner. [778].\n\nAPL as the foundation for a universal computer language. Stephen W. Dunwell. [779].\n\nTechnical support program for APL related question. Don Erickson. [780].\n\nA structured approach to analysis and design of complex systems. F. Evans and J. Jantzen. [781].\n\nAngiogram analysis in APL: a case study. Ian Feldberg. [782].\n\nAPL2 analysis and design of mortgage backed securities. William G. Foote and Pamela J. Baron. [783].\n\nEditing and debugging with Windows and a mouse. Garth H. Foster, Abdelatif Elgouri, and Franklin Liu. [784].\n\nColor APL beautiful!. Ralph L. Fox. [785].\n\nMusical syntactic and semantic structures in APL2. Erik S. Friis and Stanley Jordan. [786].\n\nArrays and references. Jean-Jacques Girardot. [787].\n\nMarkov processes in APL. Alan G. Hawkes. [788].\n\nSparse matrix technology tools in APL. Ferdinand Hendriks and Wai-Mee Ching. [789].\n\nAPL\\?. Roger K. W. Hui, Kenneth E. Iverson, E. E. McDonnell, and Arthur T. Whitney. [790] (web).\n\nAPL for economic and management control in KTAS. Torben Iversen. [791].\n\nEnd-user KESSU. Eeva-Liisa Kaski. [792].\n\nThe family of Soviet APL systems. Andrew V. Kondrashev. [793].\n\nAn application development platform. Morten Kromberg and Martin Gfeller. [794].\n\nThe travelling salesman problem, revisited with APL. Gérard A. Langlet. [795].\n\nDesktop publishing on the mainframe: integrating APL2 and Ventura Publisher. Timo Laurmaa. [796].\n\nImplementing the recursive APL code for dynamic programming. Edward Y. H. Lin and Dennis L. Bricker. [797].\n\nProgramming ecology or APL and the world at large. Jim Lucas. [798].\n\nDEMOS—a PC-system for population projections for small areas. Sven Gunnar Lönn. [799].\n\nAn insurance simulation model. Ole M. Meyer. [800].\n\nAlgorithm alterable models and APL. Alexey L. Miroshnikov. [801].\n\nAn array-theoretic look beyond APL2 and Nial. Trenchard More. [802].\n\nMulti-axis NC postprocessor for machining centers. Thomas M. Olsen. [803].\n\nObject oriented database using frames in second generation APL. Panagiotis Pantziarka. [804].\n\nReading to write. Raymond P. Polivka. [805].\n\nIBM system/370 channel programming using APL. Thomas J. Pritchard. [806].\n\nManaging a diamond jewelry manufacturing business using APL. Steven I. Promisel and James V. Merrill. [807].\n\nA preferable look—APL in window-based environments. Ursula Recker and Michael Rys. [808].\n\nToward a common prototyping language. Jack G. Rudd and James A. Brown. [809].\n\nObject-oriented programming of X Window System graphical user interfaces. William A. Rutiser. [810].\n\nA parallel APL machine. Jügen Sauermann. [811].\n\nWriting applications for uniform operation on a mainframe or PC: a metric conversion program. Charles A. Schulz. [812].\n\nStructured expert system design. D. Smellie and F. Evans. [813].\n\nSome uses of truncated Boolean vectors in analysis. Howard J. Smith. [814].\n\nWhat’s ahead for 2000 A.D.?. Howard J. Smith. [815].\n\nStability in a sea of change. Danald Soule. [816].\n\nA shading approach to non-convex clipping. Thomas L. Springall and Gustav Tollet. [817].\n\nLYYTI—integrated design and control system. Timo Teileri and Toivo Olkkola. [818].\n\nAPLELEGANCE—the art of staying within one’s depth. Norman Thomson. [819].\n\nFRESH, an expert system design tool on APL2. J. W. B. Vermeulen and E. R. K. Spoor. [820].\n\nAPL2OS: design considerations for a nested array file system. David M. Weintraub. [821].\n\nDesign and implementation of the interface to compiled languages in APL*PLUS II. James G. Wheeler. [822].\n\nVery high quality user interfaces and fast data filing using a PC. Jonny Österman. [823].\n\n1991\n\nGenetic algorithms. Manuel Alfonseca. [824].\n\nA dance of rounds. J. Phillip Benkhard. [825].\n\nExtending structure, type, and expression in APL2. J. Phillip Benkhard. [826].\n\nGerunds and representations. Robert Bernecky and Roger K. W. Hui. [827] (download).\n\nAPL technology of computer simulation. A. Yu Boozin and I. G. Pospelov. [828].\n\nAn APL rule-based system architecture for image interpretation strategies. P. Bottoni, M. Protti, and P. Mussio. [829].\n\nDesigning a Kanban manufacturing system using the server network generator (SNG) CASE tool. A. Bouchentouf-Idriss and L. Zeidner. [830].\n\nAn N-dimensional data structure in support of electronic data interchange (EDI) translation. Georges Brigham and Edward Shaw. [831].\n\nCompiling APL for parallel and vector execution. Timothy A. Budd and Rajeev K. Pandey. [832].\n\nPure functions in APL and J. Edward Cherlin. [833].\n\nDSS structure and algorithmic transparency in APL. W. E. Cundiff. [834].\n\nAn interactive data analysis system developed under APL. Peter I. Day. [835].\n\nAP 527: an ORACLE SQL—APL2/PC auxiliary processor. Stephen Deerhake. [836].\n\nNotes on C programming for APL programmers. Stephen Deerhake. [837].\n\nProgramming for events. David S. Eastwood. [838].\n\nHow to manage large APL projects: a user interface management system approach. Richard R. N. Eller. [839].\n\nCalling APL2 from COBOL. Don Erickson. [840].\n\nRelating number of processing elements in a sparse distributed memory model to learning rate and generalization. Richard M. Evans and Alvin J. Surkan. [841].\n\nUsing boolean of integer arrays to analyze networks. Kenneth Fordyce, Mario Morreale, Jan Jantzen, and Gerald Sullivan. [842].\n\nAPL as an embedded language: the ultimate application?. Jean Jacques Girardot. [843].\n\nApplication of nested arrays to databases for engineering design. Yehonathan Hazony. [844].\n\nTacit definition. Roger K. W. Hui, Kenneth E. Iverson, and Eugene E. McDonnell. [845] (web).\n\nBuilding an APL2 X-Windows interface for VM and AIX with a general APL2-to-C interface. John R. Jensen and Kirk A. Beaty. [846].\n\nCATS: computer aided testing of software. Maurice Jordan. [847].\n\nOn performance and space usage improvements for parallelized compiled APL code. Dz-ching Ju, Wai-Mee Ching, and Chuan-lin Wu. [848].\n\nPsycho-biographical analysis with APL. Andrew V. Kondrashev and Alexander A. Kronik. [849].\n\nForecasting system of an employment pension scheme. Timo Korpela and Bo Lundqvist. [850].\n\nThe dual structure of ordered trees. Gérard A. Langlet. [851].\n\nMastering J. Donald B. McIntyre. [852].\n\nA0 system: APL in construction planning. Alexei I. Miroshnikov. [853].\n\nThe Boston University Manufacturing Expert System (BUMES): an APL-based CASE application. T. Shojaie, L. Zeidner, S. Sadri, and Y. Hazony. [854].\n\nNuclear power plant diagnostics in APL. Alexander O. Skomorokhov. [855].\n\nSupply-chain management at Rowntree: critical success factors for APL. Adrian Smith. [856].\n\nAPLITDS: an APL development system. Carlo Alberto Spinicci. [857].\n\nAutomatic synthesis of the inverses of APL functions. Alvin J. Surkan. [858].\n\nAutomated SQL documentation using APL2. Rexford H. Swain. [859].\n\nL-one-two-three (L1:..L2:..L3:) considered harmful. F. H. D. van Batenburg. [860].\n\nThe user command processor. Jim Weigang. [861].\n\nComparison of the functional power of APL2 and FORTRAN 90. Robert G. Willhoft. [862].\n\nAssembler utility functions for APL2/PC. Tauno Ylinen. [863].\n\nThe server network generator (SNG): a CASE tool for distributed cooperative processing. L. E. Zeidner. [864].\n\nToward a lexicon of musical APL2 phrases (invited). Stanley Jordan and Erik S. Frils. [865].\n\n1992\n\nObject oriented graphics in APL2. Manuel Alfonseca. [866].\n\nNested arrays and operators: some issues in depth. J. Philip Benkard. [867].\n\nCompiler tools in APL. Robert Bernecky and Gert Osterburg. [868] (pdf).\n\nAPL2 implementation of cross-system shared variables. James A. Brown and Erik Kane. [869].\n\n3D layout manipulation functions with a glance to optimization problems. Renato Capra. [870].\n\nGlobally convergent polynomial iterative zero-finding using APL. Tien Chi Chen. [871].\n\nDistributed computing with APL. Andreas Geyer-Schulz and Thomas Kolarik. [872].\n\nWalks into the APL design space. Martin Gfeller. [873].\n\nThe CTalk programming language: a strategic evolution of APL. Jean-Jacques Girardot. [874].\n\nAn interactive approach for extending IEEE arithmetic: auxiliary processor AP87. Willi Hahn and Karlheinz Mohr. [875].\n\nAn object-oriented APL2 expert. Evan Jennings. [876].\n\nLeft to its own devices, APL plots on the bus. Curtis A. Jones. [877].\n\nWriting Macintosh “applications” in APL. Warren G. Julian. [878].\n\nTowards the ultimate APL-TOE. Gérard A. Langlet. [879].\n\nCannibals and missionaries. Ruby Lim. [880].\n\nMultiple choice programming: an APL approach. Edward Y. H. Lin. [881].\n\nPorting APL-programs via ASCII-transliteration. Johann Mitlöhner. [882].\n\nUsing SCCS to manage APL2 development projects. John M. Mizel. [883].\n\nDifferential equations are recurrence relations in APL. Richard D. Neidinger. [884].\n\nAPL as a tool for scientific forecasting. Andrew L. Pakhomov, Valery F. Kalinin, Boris A. Makeev, and Alexandra V. Zueva. [885].\n\nAn APL2 tool box investigating Schwarz methods. Christoph Pospiech. [886].\n\nA multi-national sales planning system in APL. Steven I. Promisel. [887].\n\nDo Russian children like APL2?. Alexander O. Skomorokhov. [888].\n\nNeural networks in J. Alexei N. Skurihin. [889].\n\nJogging with APL along the shortest path. Moshe Sneidovich and Suzanne Findlay. [890].\n\nChallenging the mathematics curriculum. Walter G. Spunde. [891].\n\nWSDM: Weighted sparse distributed memory prototype expressed in APL. Alvin J. Surkan. [892].\n\nSome proposals for APL2 specification of statistical algorithms. Norman Thompson. [893].\n\nA Be´zier curve builder implemented in APL2. Gustav Tollet and Peter M. Harrison. [894].\n\nPorting and optimising star: a case study of suffering and surfacing. F. H. D. van Batenburg, V. Bos, J. J. M. Riethoven, J. P. Abrahams, and C. Pley. [895].\n\nMatrix operations over integral domains using nested APL. Robert G. Willhoft. [896].\n\nPetri-net evaluation using APL2. Robert G. Willhoft. [897].\n\nEZHONE: a perfect application for APL2 name association. Scott Williams, Howard Smith, and Ray Parnaby. [898].\n\n1993\n\nARDA: expert system for reliability data analysis. Jake Ansell and Mulhim Al-Doori. [899].\n\nArray morphology. Robert Bernecky. [900] (pdf).\n\nThe role of APL and J in high-performance computation. Robert Bernecky. [901] (pdf).\n\nApproaching classical algorithms in APL2. Hanspeter Bieri and Felix Grimm. [902].\n\nExtending the APL character set. James A. Brown, Brent Hawks, and Ray Trimble. [903].\n\nSCARFS, an efficient polynomial zero-finder system. Tien Chi Chen. [904].\n\nThe testing of an APL compiler. Wai-Mee Ching and Alex Katz. [905].\n\nAPL helps the deaf to hear again. Pierre Deslauriers. [906].\n\nStructuring functions with operators. David S. Eastwood. [907].\n\nConfessions of two APL educators learning J. Murray Eisenberg and Howard A. Peelle. [908].\n\nA modern APL windows user interface with DOS downwards compatibility: the solution for two years onwards. Richard R. N. Eller. [909].\n\nA parallel topological feature map in APL. J. Frey, D. Scheppelmann, G.-P. Glombitza, and H. Meinzer. [910].\n\nTalking with an APL via DDE: teaching an old dog new tricks. Steven J. Halasz and Andrei V. Kondrashev. [911].\n\nAPROL: a hybrid language. Dennis Holmes and John E. Howland. [912].\n\nExtending the two-partner shared variable protocol to n partners. Thomas Kolarik. [913].\n\nBuilding the APL atlas of natural shapes. Gérard A. Langlet. [914].\n\nModern algebra self-taught through APL. Pavel Luksha. [915].\n\nUsing defined operators and function arrays to solve non-linear equations in APL2. Stephen M. Mansour. [916].\n\nAn introduction to log-linear analysis and implementing the Newton-Raphson algorithm in APL2. Duncan McArthur. [917].\n\nDistributed computing in the workstation environment. Johann Mitlöhner. [918].\n\nTransfinite nesting in array-theoretic figures, changes, rigs, and arms. Part I. Trenchard More. [919].\n\nAPL programming without tears: it is time for a change. P. Naeve, B. Strohmeier, and P. Wolf. [920].\n\nEfficient maximum likelihood estimation of linear models with APL. Frank C. Ripley. [921].\n\nRoles of APL in satellite surveillance. Jack G. Rudd. [922].\n\nExtending APL2 to include program control structures. David A. Selby. [923].\n\nSolving two or three polynomials in two or three variables. R. G. Selfridge. [924].\n\nAdaptive learning networks in APL2. Alexander O. Skomorokhov. [925].\n\nIdentification of parallelism in neural networks by simulation with language J.. Alexei N. Skurihin and Alvin J. Surkan. [926].\n\nRolling dice: some notes on J and teaching probability. Keith Smillie. [927].\n\nCo-operative programming with Windows DDE. Adrian Smith. [928].\n\nJVOX. David G. Smith and Joey K. Tuttle. [929].\n\nPoint-wise calculus. Walter G. Spunde. [930].\n\nFrom trees into boxes. David Steinbrook and Eugene McDonnell. [931].\n\nBayesian methods in APL. Thomas W. Stroud, Alan M. Sykes, and Alan D. Mayer. [932].\n\nThe workspace manager: a change control system for APL. Rexford H. Swain and Daniel F. Jonusz. [933].\n\nUnderstanding ANOVA the APL way. Norman Thomson. [934].\n\nStructured APL: a proposal for block structured control flow in APL. Robert G. Willhoft. [935].\n\nRecent work on the Toronto toolkit. Richard M. Levine. [936].\n\n1994\n\nGeometric data of cross-sections of beams. Holger Besier. [937].\n\nLiSEB: a language for modeling living systems with APL2. P. Bottoni, M. Mariotto, and P. Mussio. [938].\n\nA new graphical user interface proposal for APL. Dick Bowman. [939].\n\nThe origins of APL2. James A. Brown. [940].\n\nProgramming in J/Windows. Chris Burke. [941].\n\nAPL and economic education. Andrew Yu. Buzin. [942].\n\nAberth’s method for the parallel iterative finding of polynomial zeros. Tien Chi Chen and Wai-Shing Luk. [943].\n\nKnowledge representation in expert systems in a linguistic form. Joris E. De Meyer. [944].\n\nA risk management prototype using object-oriented APL. Martin Gfeller. [945].\n\nNew development of APL technology of modelling: APL*Plus + C++ compiler. Dmitri Gusev and Igor Pospelov. [946].\n\nTAGS: trains, agendas, and gerunds. Roger K. W. Hui and Kenneth E. Iverson. [947].\n\nAn algebraic formula manipulation system for education and its implementation on different PCs. Makoto Kikkawa, Koichi Sugawara, and Yukio Washio. [948].\n\nTime series forecasting using neural networks. Thomas Kolarik and Gottfried Rudorfer. [949].\n\nA rating system for qualification analysis with application to personal evaluation. Alexi I. Kononov and Gennady A. Reimarov. [950].\n\nThe APL theory of human vision. Gérard A. Langlet. [951].\n\nStatistical simulation and illustration using the APL2/AGSS computing environment. Peter A. W. Lewis. [952].\n\nProbabilistic studies of I Ching with use of APL. Pavel Luksha. [953].\n\nAn implementation of prediction calculation using APL and Clipper. Inna N. Luneva, Sergei M. Obraztsov, and Alexander L. Shimkevich. [954].\n\nNecessity is the mother of invention or APL-Graphics application for maps of science. Boris A. Makeev and Alexander V. Zueva. [955].\n\nVDE: a virtual data engine for APL. J. Merrill. [956].\n\nIs APL2 a competitive language for international Olympiads in informatics. I. Mironov and V. Bargachev. [957].\n\nAPL for statistical research of atmospheric flows during the dust storm. Aibarsha A. Mukanova. [958].\n\nUse of APL in Japan. Kyosuke Saigusa. [959].\n\nAn object-oriented APL2. David A. Selby. [960].\n\nSimulation of mail warehouse: an APL2 solution for a large company problem. Alexander O. Skomorokhov. [961].\n\nA parallel correlation-based algorithm in J learns neural network connections. Alexei N. Skurikhin and Alvin J. Surkan. [962].\n\nThe impact of APL on first year mathematics. Walter G. Spunde. [963].\n\nAnalysing time-series in APL. Alan M. Sykes. [964].\n\nApplying matrix divide in APL and J. Norman Thomson. [965].\n\nRestriction riddance: more power to parentheses. F. H. D. van Batenburg. [966].\n\n1995\n\nIs APL2 a good programming language?. Nicholas Beaumont. [967].\n\nThe role of dynamic programming & control structures in performance. Robert Bernecky. [968] (pdf).\n\nRecycling APL code into client/server applications. Richard J. Busman, Walter G. Fil, and Andrei V. Kondrashev. [969].\n\nInfinity arithmetic, comparisons and J. Harvey Davies. [970].\n\nDeploying complex decision technologies with APL to solve the daily output planning problem: a tale from two of the last of the Jedi Knights. Kenneth Fordyce and Gerald Gary Sullivan. [971].\n\nHolland classifier systems. Andreas Geyer-Schulz. [972].\n\nBounded rationality and adaptive agents in economic modeling. T. Grimm, J. Mitlöhner, and W. Schönfeldinger. [973].\n\nTranslation of nested APL to C++: problems and approaches. Dmitri Gusev and Igor Pospelov. [974].\n\nModeling the effects of acid leaching on concrete. Kevin Hartzfeld. [975].\n\nThe philosophy of nothing and everything. Neville Holmes and Colin Hallam. [976].\n\nRank and uniformity. Roger K. W. Hui. [977] (web).\n\nRepresentations of recursion. Roger K. W. Hui and Kenneth E. Iverson. [978].\n\nAPL, dynamic programming, and the optimal control of electromagnetic brake retarders. Scott Kimbrough. [979].\n\nRegression analysis with fuzzy knowledge representation. Inna N. Louneva, Sergei M. Obraztsov, and Alexander L. Shimkevich. [980].\n\nThe role of composition in computer programming. Donald B. McIntyre. [981].\n\nComputing multivariable Taylor series to arbitrary order. Richard D. Neidinger. [982].\n\nUntying the Gordian knot: agreement in J. Martin Neitzel. [983].\n\nAVCS: the APL version control system. Nikolai I. Puntikov, Maxim A. Volodin, and Alexei A. Kolesnikov. [984].\n\nInfix, cut and finite automata. Clifford A. Reiter. [985].\n\nEarly bankruptcy detection using neural networks. Gottfried Rudorfer. [986].\n\nFuzzy control of technological processes in APL2. Alexander O. Skomorokhov, K.-H. Reinhardt, G. Roche, and M. Tielemann. [987].\n\nConcrete multidimensional statistics in APL2. Bernhard Strohmeier. [988].\n\nNamespaces: APL/W vs. APL2. Rexford H. Swain. [989].\n\nDoing ANOVA calculations on the computer. Alan M. Sykes. [990].\n\nAn APL implementation of the Club of Rome’s world model. Clare Townsend. [991].\n\nAPL is important at USAA (abstract). Rhonda K. Aikens. [992].\n\nA new approach for developing applications using asynchronous AP144 and synchronous AP207 (abstract). Y. Akiyama and T. Itoh. [993].\n\n1996\n\nUser interfaces with object-oriented programming in APL2. Manuel Alfonseca. [994].\n\nRepresentation of fractal curves by means of L systems. Manuel Alfonseca and Alfonso Ortega. [995].\n\nCross-tabulation algorithms. Martin Barghoorn. [996].\n\nReal-time APL prototype of a GPS system. Henry M. Beisner, Jack G. Rudd, and Robert H. Benner. [997].\n\nSong of the whale: parallel processing using APL2. Per Gjerløv and Izabela Meisel. [998].\n\nANDYMMO: animation of the dynamics of mechanical and control models. Willi Hahn, Erwin Hasenjäger, and Jens Trautmann. [999].\n\nUsing J as expository language in the teaching of computer science to liberal arts students. John E. Howland. [1,000].\n\nA proposal for calling conventions for APL defined functions. Vincent Lin. [1,001].\n\nClassifier systems and economic modeling. Johann Mitlöhner. [1,002].\n\nEconomic forecasting by the deterministic-adaptive method. Sergei M. Obraztsov, Dmitri V. Chelegatski, Inna N. Louneva, and Alexander L. Shimkevich. [1,003].\n\nGenetic algorithms: APL2 implementation and a real life application. Alexander O. Skomorokhov. [1,004].\n\n1997\n\nHow to write an APL utility function. Stephen M. Mansour. [1,005].\n\nWar on the workspace! supporting continuously changing commercial software using a relational database. Edward J. Shaw. [1,006].\n\nData transfer between Java Applets and legacy APL systems. B. Amos, G. Disney, and D. Sorrey. [1,007].\n\nMathematical roots of J. Roger K. W. Hui and Kenneth E. Iverson. [1,008].\n\nAPL and nested arrays—a dream for statistical computation. Alan Sykes and Tom Stroud. [1,009].\n\nA constructive algorithm for neural networks that generalize. Alvin Surkan and Colin Campbell. [1,010].\n\nThe computer construction of weaving designs. Keith Smillie. [1,011].\n\nInteractive design of structures: a program for everyone. Johann Riebenbauer and Joachim Hoffmann. [1,012].\n\n1998\n\nWebsite\n\nUsing APL expressions in database operations. Paul S. Mansour and Stephen M. Mansour. [1,013].\n\nEGREGION: a branch coverage tool for APL. Robert Bernecky. [1,014] (pdf).\n\nWriting optimization software in APL, J, and MATLAB: a comparison. Richard L. W. Brown. [1,015].\n\nThe comparison of C++ and Mathematica in the generation of pseudo random numbers for financial and actuarial applications. Marco Micocci, Angelo Manna, and Alvaro Tomassetti. [1,016].\n\nOn defining application-specific high-level array operations by means of shape-invariant programming facilities. Sven-Bodo Scholz. [1,017].\n\nReducing computational complexity with array predicates. Robert Bernecky. [1,018] (pdf).\n\nTurtle graphics: hidden features in APL2. Hendrik Rama. [1,019].\n\nAll searches are divided into three parts: string searches using ternary trees. David E. Siegel. [1,020].\n\nAn epistemology of APL. J. Philip Benkard. [1,021].\n\nWriting a compilers compiler in APL. Enrique Alfonseca. [1,022].\n\nSimplifying array processing languages. Neville Holmes. [1,023].\n\nJapanese language handling in APL environments. Kyosuke Saigusa. [1,024].\n\nCompiling a simulation language in APL. Manuel Alfonseca, Enrique Alfonseca, and Juan de Lara. [1,025].\n\nCrosstab, OLAP, and APL: N-dimensional data analysis with sparse cubes. Martin Barghoorn. [1,026].\n\nBABAPL: a software prototype of a programmable pocket APL calculator. Roger Busi. [1,027].\n\nObject oriented spatial positioning systems. István Kádár and Erik Papp. [1,028].\n\nAxE: a transportation network analysis package. Francesco Pedullá and Giorgio Salerno. [1,029].\n\nAPL and demographic modelling. U. Piasentin, D. Lanari, and E. Migliorini. [1,030].\n\nLarge-scale space object tracking using APL2. Jack G. Rudd, Richard A. Marsh, and Marcus L. Munger. [1,031].\n\nPattern recognition in APL with application to reactor diagnostics. Alexander O. Skomorokhov and Michail T. Slepov. [1,032].\n\nUsing APL to build science tutors for the high school level. Manuel Alfonseca. [1,033].\n\nTeaching classical calculation methods: APL challenge. Andrei Buzin. [1,034].\n\nFirst flight: automated tutorials for fledgling APLers. Steven J. Halasz. [1,035].\n\nA Web-interfaced array-based mathematics course. Walter Spunde and Peter de Voil. [1,036].\n\nAPL design of graphic displays for motivation in distance education. Alvin J. Surkan. [1,037].\n\nHighly parallel computing in simulation on dynamic bond portfolio management. Vittorio Moriggia, Marida Bertocchi, and Jitka Dupaková. [1,038].\n\nThe use of Markov discontinuous processes in the pricing of derivative securities: the application of APL. Marco Micocci. [1,039].\n\nOptimization with dynamic functions. Stephen M. Mansour. [1,040].\n\nCorporate analysis by APL. Arto Juvonen and Unto Niemi. [1,041].\n\nNeural network for partitionable variational inequalities. Giulia Rotondo. [1,042].\n\n1999\n\nGeneralization of Pick"
    }
}