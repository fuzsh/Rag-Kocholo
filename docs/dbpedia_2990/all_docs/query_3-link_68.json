{
    "id": "dbpedia_2990_3",
    "rank": 68,
    "data": {
        "url": "https://github.com/yyr/ncl/blob/master/ni/src/contrib/NCL_GETools.ncl",
        "read_more_link": "",
        "language": "en",
        "title": "ncl/ni/src/contrib/NCL_GETools.ncl at master Â· yyr/ncl",
        "top_image": "https://opengraph.githubassets.com/6c4e43e58309055918eb4b8773a236f554d71228f6fe898825e89940d5b5f670/yyr/ncl",
        "meta_img": "https://opengraph.githubassets.com/6c4e43e58309055918eb4b8773a236f554d71228f6fe898825e89940d5b5f670/yyr/ncl",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "ncl releases. Contribute to yyr/ncl development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/yyr/ncl/blob/master/ni/src/contrib/NCL_GETools.ncl",
        "text": "load \"$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl\"\n\nload \"$NCARG_ROOT/lib/ncarg/nclscripts/esmf/ESMF_regridding.ncl\"\n\nload \"$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl\"\n\n;=========================================================================================\n\n; Template for function or procedure\n\n;=========================================================================================\n\n;undef(\"FuncProc_name\")\n\n;function/procedure FuncProc_name(varlist)\n\n;local localvarlist\n\n;begin\n\n;end\n\n;=========================================================================================\n\n; get_coordinate_system_string\n\n;=========================================================================================\n\nundef(\"get_coordinate_system_string\")\n\nfunction get_coordinate_system_string(Opt[1]:logical)\n\nlocal ProjStr, Proj, ProjName\n\nbegin\n\nProjStr=\"\";\n\nProj=(/ \"aea\", \"aeqd\", \"airy\", \"aitoff\", \\\n\n\"alsk\", \"apian\", \"august\", \"bacon\", \"bipc\", \"boggs\", \"bonne\", \"cass\", \"cc\", \\\n\n\"cea\", \"chamb\", \"collg\", \"crast\", \"denoy\", \"eck1\", \"eck2\", \"eck3\", \"eck4\", \\\n\n\"eck5\", \"eck6\", \"eqc\", \"eqdc\", \"euler\", \"etmerc\", \"fahey\", \"fouc\", \"fouc_s\", \\\n\n\"gall\", \"geos\", \"gins8\", \"gn_sinu\", \"gnom\", \"goode\", \"gs48\", \"gs50\", \"hammer\", \\\n\n\"hatano\", \"healpix\", \"rhealpix\", \"igh\", \"imw_p\", \"isea\", \"kav5\", \"kav7\", \\\n\n\"krovak\", \"labrd\", \"laea\", \"lagrng\", \"larr\", \"lask\", \"lonlat\", \"latlon\", \"lcc\", \\\n\n\"lcca\", \"leac\", \"lee_os\", \"loxim\", \"lsat\", \"mbt_s\", \"mbt_fps\", \"mbtfpp\", \\\n\n\"mbtfpq\", \"mbtfps\", \"merc\", \"mil_os\", \"mill\", \"moll\", \"murd1\", \"murd2\", \"murd3\", \\\n\n\"natearth\", \"nell\", \"nell_h\", \"nicol\", \"nsper\", \"nzmg\", \"ob_tran\", \"ocea\", \"oea\", \\\n\n\"omerc\", \"ortel\", \"ortho\", \"pconic\", \"poly\", \"putp1\", \"putp2\", \"putp3\", \"putp3p\",\\\n\n\"putp4p\", \"putp5\", \"putp5p\", \"putp6\", \"putp6p\", \"qua_aut\", \"robin\", \"rouss\", \\\n\n\"rpoly\", \"sinu\", \"somerc\", \"stere\", \"sterea\", \"gstmerc\", \"tcc\", \"tcea\", \"tissot\",\\\n\n\"tmerc\", \"tpeqd\", \"tpers\", \"ups\", \"urm5\", \"urmfps\", \"utm\", \"vandg\", \"vandg2\", \\\n\n\"vandg3\", \"vandg4\", \"vitk1\", \"wag1\", \"wag2\",\"wag3\", \"wag4\", \"wag5\", \"wag6\", \\\n\n\"wag7\", \"weren\", \"wink1\", \"wink2\", \"wintri\" /)\n\nProjName=(/ \"Albers Equal Area\", \"Azimuthal Equidistant\", \"Airy\", \"Aitoff\", \\\n\n\"Mod. Stererographics of Alaska\", \"Apian Globular I\", \"August Epicycloidal\",\\\n\n\"Bacon Globular\", \"Bipolar conic of western hemisphere\", \"Boggs Eumorphic\",\\\n\n\"Bonne (Werner lat_1=90)\", \"Cassini\", \"Central Cylindrical\", \\\n\n\"Equal Area Cylindrical\", \"Chamberlin Trimetric\", \"Collignon\", \\\n\n\"Craster Parabolic (Putnins P4)\", \"Denoyer Semi-Elliptical\", \"Eckert I\", \\\n\n\"Eckert II\", \"Eckert III\", \"Eckert IV\", \"Eckert V\", \"Eckert VI\", \\\n\n\"Equidistant Cylindrical (Plate Caree)\", \"Equidistant Conic\", \"Euler\", \\\n\n\"Extended Transverse Mercator\", \"Fahey\", \"Foucaut\", \"Foucaut Sinusoidal\", \\\n\n\"Gall (Gall Stereographic)\", \"Geostationary Satellite View\", \\\n\n\"Ginsburg VIII (TsNIIGAiK)\", \"General Sinusoidal Series\", \"Gnomonic\", \\\n\n\"Goode Homolosine\", \"Mod. Stererographics of 48 U.S.\", \\\n\n\"Mod. Stererographics of 50 U.S.\", \"Hammer & Eckert-Greifendorff\", \\\n\n\"Hatano Asymmetrical Equal Area\", \"HEALPix\", \"rHEALPix\", \\\n\n\"Interrupted Goode Homolosine\", \"International Map of the World Polyconic\", \\\n\n\"Icosahedral Snyder Equal Area\", \"Kavraisky V\", \"Kavraisky VII\", \"Krovak\", \\\n\n\"Laborde\", \"Lambert Azimuthal Equal Area\", \"Lagrange\", \"Larrivee\", \\\n\n\"Laskowski\", \"Lat/long (Geodetic)\", \"Lat/long (Geodetic alias)\", \\\n\n\"Lambert Conformal Conic\", \"Lambert Conformal Conic Alternative\", \\\n\n\"Lambert Equal Area Conic\", \"Lee Oblated Stereographic\", \"Loximuthal\", \\\n\n\"Space oblique for LANDSAT\", \"McBryde-Thomas Flat-Polar Sine (No. 1)\", \\\n\n\"McBryde-Thomas Flat-Pole Sine (No. 2)\", \\\n\n\"McBride-Thomas Flat-Polar Parabolic\", \"McBryde-Thomas Flat-Polar Quartic\",\\\n\n\"McBryde-Thomas Flat-Polar Sinusoidal\", \"Mercator\", \\\n\n\"Miller Oblated Stereographic\", \"Miller Cylindrical\", \"Mollweide\", \\\n\n\"Murdoch I\", \"Murdoch II\", \"Murdoch III\", \"Natural Earth\", \"Nell\", \\\n\n\"Nell-Hammer\", \"Nicolosi Globular\", \"Near-sided perspective\", \\\n\n\"New Zealand Map Grid\", \"General Oblique Transformation\", \\\n\n\"Oblique Cylindrical Equal Area\", \"Oblated Equal Area\", \\\n\n\"Oblique Mercator\", \"Ortelius Oval\", \"Orthographic\", \\\n\n\"Perspective Conic\", \"Polyconic (American)\", \"Putnins P1\", \\\n\n\"Putnins P2\", \"Putnins P3\", \"Putnins P3'\", \"Putnins P4'\", \"Putnins P5\", \\\n\n\"Putnins P5'\", \"Putnins P6\", \"Putnins P6'\", \"Quartic Authalic\", \\\n\n\"Robinson\", \"Roussilhe Stereographic\", \"Rectangular Polyconic\", \\\n\n\"Sinusoidal (Sanson-Flamsteed)\", \"Swiss. Obl. Mercator\", \"Stereographic\", \\\n\n\"Oblique Stereographic Alternative\", \\\n\n\"Gauss-Schreiber Transverse Mercator (aka Gauss-Laborde Reunion)\", \\\n\n\"Transverse Central Cylindrical\", \"Transverse Cylindrical Equal Area\", \\\n\n\"Tissot\", \"Transverse Mercator\", \"Two Point Equidistant\", \\\n\n\"Tilted perspective\", \"Universal Polar Stereographic\", \"Urmaev V\", \\\n\n\"Urmaev Flat-Polar Sinusoidal\", \"Universal Transverse Mercator (UTM)\", \\\n\n\"van der Grinten (I)\", \"van der Grinten II\", \"van der Grinten III\", \\\n\n\"van der Grinten IV\", \"Vitkovsky I\", \"Wagner I (Kavraisky VI)\", \\\n\n\"Wagner II\", \"Wagner III\", \"Wagner IV\", \"Wagner V\", \"Wagner VI\", \\\n\n\"Wagner VII\", \"Werenskiold I\", \"Winkel I\", \"Winkel II\", \"Winkel Tripel\" /)\n\nellps=(/ \"MERIT\", \"SGS85\", \"GRS80\", \"IAU76\", \"airy\", \"APL4.9\", \"NWL9D\", \"mod_airy\", \\\n\n\"andrae\", \"aust_SA\", \"GRS67\", \"bessel\", \"bess_nam\", \"clrk66\", \"clrk80\", \"CPM\",\\\n\n\"delmbr\", \"engelis\", \"evrst30\", \"evrst48\", \"evrst56\", \"evrst69\", \"evrstSS\", \\\n\n\"fschr60\", \"fschr60m\", \"fschr68\", \"helmert\", \"hough\", \"intl\", \"krass\", \\\n\n\"kaula\", \"lerch\", \"mprts\", \"new_intl\", \"plessis\", \"SEasia\", \"walbeck\", \\\n\n\"WGS60\", \"WGS66\", \"WGS72\", \"WGS84\", \"sphere\" /)\n\ndatum=(/ \"WGS84\", \"GGRS87\", \"Greek_Geodetic_Reference_System_1987\", \"NAD83\", \\\n\n\"North_American_Datum_1983\", \"NAD27\", \"North_American_Datum_1927\", \\\n\n\"potsdam\", \"Potsdam\", \"carthage\", \"Carthage\", \"bessel\", \"Hermannskogel\", \\\n\n\"ire65\", \"Ireland\", \"nzgd49\", \"New\", \"OSGB36\", \"Airy\" /)\n\n; Adding Projection Name (Required)\n\nif (isatt(Opt,\"projection\")) then\n\nif(all(Opt@projection.ne.Proj)) then\n\nprint(Opt@projection+\" is not a supported projection.\")\n\nprint(\"Supported projections are:\")\n\nprint(\"- \"+Proj)\n\nexit\n\nelse\n\nProjStr=\" +proj=\"+Opt@projection\n\nend if\n\nelse\n\nprint(\"Opt@projection is missing.\")\n\nexit\n\nend if\n\n; Adding Ellipsoid (required)\n\nif (isatt(Opt,\"ellipsoid\")) then\n\nif(all(Opt@ellipsoid.ne.ellps)) then\n\nprint(Opt@ellipsoid+\" is not a supported projection.\")\n\nprint(\"Supported ellipsoids are:\")\n\nprint(\"- \"+ellps);\n\nexit\n\nelse\n\nProjStr=ProjStr + \" +ellps=\"+Opt@ellipsoid\n\nend if\n\nelse\n\nprint(\"Opt@ellipsoid is missing.\")\n\nexit\n\nend if\n\n; Optional\n\n; Semimajor radius of the ellipsoid axis\n\nif (isatt(Opt,\"a\")) then\n\nProjStr=ProjStr + \" +a=\"+Opt@a\n\nend if\n\n;Used with Oblique Mercator and possibly a few others\n\nif (isatt(Opt,\"alpha\")) then\n\nProjStr=ProjStr + \" +alpha=\"+Opt@alpha\n\nend if\n\n;Axis orientation\n\nif (isatt(Opt,\"axis\")) then\n\nProjStr=ProjStr + \" +axis=\"+Opt@axis\n\nend if\n\n;Semiminor radius of the ellipsoid axis\n\nif (isatt(Opt,\"b\")) then\n\nProjStr=ProjStr + \" +b=\"+Opt@b\n\nend if\n\n;Eccentricity of the ellipsoid = sqrt(1 - b^2/a^2) = sqrt( f*(2-f) )\n\nif (isatt(Opt,\"e\")) then\n\nProjStr=ProjStr + \" +e=\"+Opt@e\n\nend if\n\n;Eccentricity of the ellipsoid squared\n\nif (isatt(Opt,\"es\")) then\n\nProjStr=ProjStr + \" +es=\"+Opt@es\n\nend if\n\n;Flattening of the ellipsoid = 1-sqrt(1-e^2) (often presented as an inverse, e.g. 1/298)\n\nif (isatt(Opt,\"f\")) then\n\nProjStr=ProjStr + \" +f=\"+Opt@f\n\nend if\n\n; Datum name\n\nif (isatt(Opt,\"datum\")) then\n\nif(all(Opt@datum.ne.datum)) then\n\nprint(Opt@datum+\" is not a supported projection.\")\n\nprint(\"Supported datums are:\")\n\nprint(\"- \"+datum);\n\nexit\n\nelse\n\nProjStr=ProjStr + \" +datum=\"+Opt@datum\n\nend if\n\nend if\n\n;Scaling factor (old name)\n\nif (isatt(Opt,\"k\")) then\n\nProjStr=ProjStr + \" +k=\"+Opt@k\n\nend if\n\n;Scaling factor (new name)\n\nif (isatt(Opt,\"k_0\")) then\n\nProjStr=ProjStr + \" +k_0=\"+Opt@k_0\n\nend if\n\n;Latitude of origin\n\nif (isatt(Opt,\"lat_0\")) then\n\nProjStr=ProjStr + \" +lat_0=\"+Opt@lat_0\n\nend if\n\n;Latitude of first standard parallel\n\nif (isatt(Opt,\"lat_1\")) then\n\nProjStr=ProjStr + \" +lat_1=\"+Opt@lat_1\n\nend if\n\n;Latitude of second standard parallel\n\nif (isatt(Opt,\"lat_2\")) then\n\nProjStr=ProjStr + \" +lat_2=\"+Opt@lat_2\n\nend if\n\n;Latitude of true scale\n\nif (isatt(Opt,\"lat_ts\")) then\n\nProjStr=ProjStr + \" +lat_ts=\"+Opt@lat_ts\n\nend if\n\n;Central meridian\n\nif (isatt(Opt,\"lon_0\")) then\n\nProjStr=ProjStr + \" +lon_0=\"+Opt@lon_0\n\nend if\n\n;Longitude used with Oblique Mercator and possibly a few others\n\nif (isatt(Opt,\"lonc\")) then\n\nProjStr=ProjStr + \" +lonc=\"+Opt@lonc\n\nend if\n\n;Center longitude to use for wrapping\n\nif (isatt(Opt,\"lon_wrap\")) then\n\nProjStr=ProjStr + \" +lon_wrap=\"+Opt@lon_wrap\n\nend if\n\n;Filename of NTv2 grid file to use for datum transforms\n\nif (isatt(Opt,\"nadgrids\")) then\n\nProjStr=ProjStr + \" +nadgrids=\"+Opt@nadgrids\n\nend if\n\nif (isatt(Opt,\"no_defs\")) then\n\nProjStr=ProjStr + \" +no_defs=\"+Opt@no_defs\n\nend if\n\n;Allow longitude output outside -180 to 180 range, disables wrapping\n\nif (isatt(Opt,\"over\")) then\n\nProjStr=ProjStr + \" +over=\"+Opt@over\n\nend if\n\n;Alternate prime meridian (typically a city name)\n\nif (isatt(Opt,\"pm\")) then\n\nProjStr=ProjStr + \" +pm=\"+Opt@pm\n\nend if\n\n;Denotes southern hemisphere UTM zone\n\nif (isatt(Opt,\"south\")) then\n\nProjStr=ProjStr + \" +south=\"+Opt@south\n\nend if\n\n;Multiplier to convert map units to 1.0m\n\nif (isatt(Opt,\"to_meter\")) then\n\nProjStr=ProjStr + \" +to_meter=\"+Opt@to_meter\n\nend if\n\n;3 or 7 term datum transform parameters\n\nif (isatt(Opt,\"towgs84\")) then\n\nProjStr=ProjStr + \" +towgs84=\"+Opt@towgs84\n\nend if\n\n;meters, US survey feet, etc.\n\nif (isatt(Opt,\"units\")) then\n\nProjStr=ProjStr + \" +units=\"+Opt@units\n\nend if\n\n;vertical conversion to meters.\n\nif (isatt(Opt,\"vto_meter\")) then\n\nProjStr=ProjStr + \" +vto_meter=\"+Opt@vto_meter\n\nend if\n\n;vertical units\n\nif (isatt(Opt,\"vunits\")) then\n\nProjStr=ProjStr + \" +vunits=\"+Opt@vunits\n\nend if\n\n;False easting\n\nif (isatt(Opt,\"x_0\")) then\n\nProjStr=ProjStr + \" +x_0=\"+Opt@x_0\n\nend if\n\n;False northing\n\nif (isatt(Opt,\"y_0\")) then\n\nProjStr=ProjStr + \" +y_0=\"+Opt@y_0\n\nend if\n\n;UTM zone\n\nif (isatt(Opt,\"zone\")) then\n\nProjStr=ProjStr + \" +zone=\"+Opt@zone\n\nend if\n\nreturn(ProjStr)\n\nend\n\n;=========================================================================================\n\n; GetAltModeNumber: The integer number are based on the enum type in c\n\n; implementation.\n\n;=========================================================================================\n\nundef(\"GetAltModeNumber\")\n\nfunction GetAltModeNumber(AltMode[1]:string)\n\nbegin\n\nif (AltMode.eq.\"absolute\") then\n\nreturn(touint(0));\n\nend if\n\nif (AltMode.eq.\"clampToGround\") then\n\nreturn(touint(1));\n\nend if\n\nif (AltMode.eq.\"clampToSeaFloor\") then\n\nreturn(touint(2));\n\nend if\n\nif (AltMode.eq.\"relativeToGround\") then\n\nreturn(touint(3));\n\nend if\n\nif (AltMode.eq.\"relativeToSeaFloor\") then\n\nreturn(touint(4));\n\nend if\n\nend\n\n;=========================================================================================\n\n; readICT: Reads ICARTT file format which is designed for airborne\n\n; measurements. The Variables, their units, and the entire header is\n\n; assigned to the variable as an attribute.\n\n;=========================================================================================\n\nundef(\"read_ict\")\n\nfunction read_ict(FileName[1]:string)\n\nlocal tmp, nLines, nHeader, nVar, Values, MissingValues\n\nbegin\n\n; Reading the ict file\n\ntmp=asciiread(FileName,-1,\"string\")\n\n; Getting number of lines in the file\n\nnLines=dimsizes(tmp)\n\n; Getting number of header Lines;\n\nnHeader=tointeger(str_get_field(tmp(0),1,\" \"))\n\n; Getting number of variables\n\nnVar=tointeger(tmp(9))+1;\n\n; Getting the Values\n\nasciiwrite(\"tmp.txt\",tmp(nHeader:nLines-1))\n\nValues=asciiread(\"tmp.txt\",(/nLines-nHeader,nVar/),\"double\")\n\nsystem(\"rm -rf tmp.txt\")\n\n; Assigning the Variable Names and Units\n\nValues@VariableNames=new(nVar,\"string\")\n\nValues@VariableNames(0)=str_get_field(tmp(8),1,\",\")\n\nValues@VariableUnits=new(nVar,\"string\")\n\nValues@VariableUnits(0)=str_get_field(tmp(8),2,\",\")\n\nValues@VariableNames(1:nVar-1)=str_get_field(tmp(12:12+nVar-2),1,\",\");\n\nValues@VariableUnits(1:nVar-1)=str_get_field(tmp(12:12+nVar-2),2,\",\");\n\n; Getting the NoData Values and assigning the missing values\n\nValues@_FillValue=-9999.0d\n\nasciiwrite(\"tmp.txt\",tmp(11))\n\nMissingValues=asciiread(\"tmp.txt\",nVar-1,\"double\")\n\nsystem(\"rm -rf tmp.txt\")\n\ndo i=1,nVar-1\n\nValues(:,i)=where(Values(:,i).eq.MissingValues(i-1),Values@_FillValue,Values(:,i))\n\nend do\n\n; Storing the header lines\n\nValues@Header=tmp(0:nHeader-1)\n\nValues@Description=\"Variable names and their units are stored at Var@VariableNames and Var@VariableUnits. For full headers refer to Var@Header.\"\n\nreturn(Values);\n\nend\n\n;=========================================================================================\n\n; squeeze: Removes those dimensions with one element.\n\n;=========================================================================================\n\nundef(\"squeeze\")\n\nfunction squeeze(inVar)\n\nlocal inVardimsizes, newdimsizes, outVar, counter\n\nbegin\n\ninVardimsizes=dimsizes(inVar)\n\nnewdimsizes=inVardimsizes(ind(inVardimsizes.ne.1))\n\noutVar=reshape(inVar,newdimsizes)\n\n;copying the dimension names.\n\ncounter=0;\n\ndo i=0,dimsizes(inVardimsizes)-1\n\nif (inVardimsizes(i).ne.1) then\n\nif (isdefined(inVar!i)) then\n\ntmpName=inVar!i\n\noutVar!counter=tmpName\n\noutVar&$tmpName$=inVar&$tmpName$\n\nend if\n\ncounter=counter+1\n\nend if\n\nend do\n\nreturn(outVar)\n\nend\n\n;=========================================================================================\n\n; addTime: given a dd-hh-mm-ss and a time interval as hh-mm-ss, calculates\n\n; the new dd-hh-mm-ss. Note that dd can become negative.\n\n;=========================================================================================\n\nundef(\"addTime\")\n\nprocedure addTime(dd[1]:integer,hh[1]:integer,mm[1]:integer,ss[1]:integer, \\\n\nhhI[1]:integer, mmI[1]:integer, ssI[1]:integer)\n\nlocal BeginTime, TimeInterval, EndTime, Counter, EndTime\n\nbegin\n\nBeginTime=dd*24.0d*3600.0d + hh*3600.0d + mm*60.0d + ss;\n\nTimeInterval=hhI*3600.0d + mmI*60.0d + ssI;\n\nEndTime=BeginTime+TimeInterval\n\nCounter=0\n\ndo while(EndTime.lt.0.0d)\n\nEndTime=EndTime+24.0d*3600.0d\n\nCounter=Counter-1\n\nend do\n\ndd=Counter\n\ndd=dd+tointeger(EndTime/(24.0d*3600.0d))\n\nEndTime=todouble( tointeger(EndTime)%(24*3600) )\n\nhh=tointeger(EndTime/3600.d)\n\nEndTime=todouble( tointeger(EndTime)%(3600) )\n\nmm=tointeger(EndTime/60.d)\n\nEndTime=todouble( tointeger(EndTime)%(60) )\n\nss=tointeger(EndTime)\n\nend\n\n;=========================================================================================\n\n; get_KML_IconHref: returns a URL to standard icons of Google Earth.\n\n; if the IconName is not found within the standard names, the IconName\n\n; is returned. This behavior can be used to return a weblink to non-standard\n\n; icons.\n\n;=========================================================================================\n\nundef(\"get_KML_IconHref\")\n\nfunction get_KML_IconHref(IconName[1]:string)\n\nbegin\n\nif (IconName.eq.\"ylw-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"blue-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/blue-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"grn-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/ltblu-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"pink-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/pink-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"purple-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/purple-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"red-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"wht-pushpin\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/pushpin/wht-pushpin.png\")\n\nend if\n\nif (IconName.eq.\"A\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/A.png\")\n\nend if\n\nif (IconName.eq.\"B\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/B.png\")\n\nend if\n\nif (IconName.eq.\"C\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/C.png\")\n\nend if\n\nif (IconName.eq.\"D\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/D.png\")\n\nend if\n\nif (IconName.eq.\"E\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/E.png\")\n\nend if\n\nif (IconName.eq.\"F\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/F.png\")\n\nend if\n\nif (IconName.eq.\"G\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/G.png\")\n\nend if\n\nif (IconName.eq.\"H\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/H.png\")\n\nend if\n\nif (IconName.eq.\"I\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/I.png\")\n\nend if\n\nif (IconName.eq.\"J\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/J.png\")\n\nend if\n\nif (IconName.eq.\"A\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/A.png\")\n\nend if\n\nif (IconName.eq.\"B\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/B.png\")\n\nend if\n\nif (IconName.eq.\"C\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/C.png\")\n\nend if\n\nif (IconName.eq.\"D\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/D.png\")\n\nend if\n\nif (IconName.eq.\"E\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/E.png\")\n\nend if\n\nif (IconName.eq.\"F\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/F.png\")\n\nend if\n\nif (IconName.eq.\"G\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/G.png\")\n\nend if\n\nif (IconName.eq.\"H\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/H.png\")\n\nend if\n\nif (IconName.eq.\"I\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/I.png\")\n\nend if\n\nif (IconName.eq.\"J\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/J.png\")\n\nend if\n\nif (IconName.eq.\"K\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/K.png\")\n\nend if\n\nif (IconName.eq.\"L\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/L.png\")\n\nend if\n\nif (IconName.eq.\"M\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/M.png\")\n\nend if\n\nif (IconName.eq.\"N\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/N.png\")\n\nend if\n\nif (IconName.eq.\"O\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/O.png\")\n\nend if\n\nif (IconName.eq.\"P\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/P.png\")\n\nend if\n\nif (IconName.eq.\"Q\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Q.png\")\n\nend if\n\nif (IconName.eq.\"R\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/R.png\")\n\nend if\n\nif (IconName.eq.\"S\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/S.png\")\n\nend if\n\nif (IconName.eq.\"T\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/T.png\")\n\nend if\n\nif (IconName.eq.\"K\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/K.png\")\n\nend if\n\nif (IconName.eq.\"L\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/L.png\")\n\nend if\n\nif (IconName.eq.\"M\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/M.png\")\n\nend if\n\nif (IconName.eq.\"N\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/N.png\")\n\nend if\n\nif (IconName.eq.\"O\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/O.png\")\n\nend if\n\nif (IconName.eq.\"P\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/P.png\")\n\nend if\n\nif (IconName.eq.\"Q\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Q.png\")\n\nend if\n\nif (IconName.eq.\"R\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/R.png\")\n\nend if\n\nif (IconName.eq.\"S\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/S.png\")\n\nend if\n\nif (IconName.eq.\"T\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/T.png\")\n\nend if\n\nif (IconName.eq.\"U\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/U.png\")\n\nend if\n\nif (IconName.eq.\"V\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/V.png\")\n\nend if\n\nif (IconName.eq.\"W\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/W.png\")\n\nend if\n\nif (IconName.eq.\"X\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/X.png\")\n\nend if\n\nif (IconName.eq.\"Y\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Y.png\")\n\nend if\n\nif (IconName.eq.\"Z\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Z.png\")\n\nend if\n\nif (IconName.eq.\"U\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/U.png\")\n\nend if\n\nif (IconName.eq.\"V\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/V.png\")\n\nend if\n\nif (IconName.eq.\"W\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/W.png\")\n\nend if\n\nif (IconName.eq.\"X\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/X.png\")\n\nend if\n\nif (IconName.eq.\"Y\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Y.png\")\n\nend if\n\nif (IconName.eq.\"Z\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/Z.png\")\n\nend if\n\nif (IconName.eq.\"1\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/1.png\")\n\nend if\n\nif (IconName.eq.\"2\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/2.png\")\n\nend if\n\nif (IconName.eq.\"3\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/3.png\")\n\nend if\n\nif (IconName.eq.\"4\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/4.png\")\n\nend if\n\nif (IconName.eq.\"5\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/5.png\")\n\nend if\n\nif (IconName.eq.\"6\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/6.png\")\n\nend if\n\nif (IconName.eq.\"7\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/7.png\")\n\nend if\n\nif (IconName.eq.\"8\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/8.png\")\n\nend if\n\nif (IconName.eq.\"9\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/9.png\")\n\nend if\n\nif (IconName.eq.\"10\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/10.png\")\n\nend if\n\nif (IconName.eq.\"1\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/1.png\")\n\nend if\n\nif (IconName.eq.\"2\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/2.png\")\n\nend if\n\nif (IconName.eq.\"3\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/3.png\")\n\nend if\n\nif (IconName.eq.\"4\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/4.png\")\n\nend if\n\nif (IconName.eq.\"5\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/5.png\")\n\nend if\n\nif (IconName.eq.\"6\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/6.png\")\n\nend if\n\nif (IconName.eq.\"7\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/7.png\")\n\nend if\n\nif (IconName.eq.\"8\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/8.png\")\n\nend if\n\nif (IconName.eq.\"9\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/9.png\")\n\nend if\n\nif (IconName.eq.\"10\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/10.png\")\n\nend if\n\nif (IconName.eq.\"blu-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-blank.png\")\n\nend if\n\nif (IconName.eq.\"blu-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-blank.png\")\n\nend if\n\nif (IconName.eq.\"blu-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-diamond.png\")\n\nend if\n\nif (IconName.eq.\"blu-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-diamond.png\")\n\nend if\n\nif (IconName.eq.\"blu-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-circle.png\")\n\nend if\n\nif (IconName.eq.\"blu-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-circle.png\")\n\nend if\n\nif (IconName.eq.\"blu-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-square.png\")\n\nend if\n\nif (IconName.eq.\"blu-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-square.png\")\n\nend if\n\nif (IconName.eq.\"blu-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-stars.png\")\n\nend if\n\nif (IconName.eq.\"blu-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/blu-stars.png\")\n\nend if\n\nif (IconName.eq.\"grn-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-blank.png\")\n\nend if\n\nif (IconName.eq.\"grn-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-blank.png\")\n\nend if\n\nif (IconName.eq.\"grn-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-diamond.png\")\n\nend if\n\nif (IconName.eq.\"grn-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-diamond.png\")\n\nend if\n\nif (IconName.eq.\"grn-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-circle.png\")\n\nend if\n\nif (IconName.eq.\"grn-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-circle.png\")\n\nend if\n\nif (IconName.eq.\"grn-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-square.png\")\n\nend if\n\nif (IconName.eq.\"grn-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-square.png\")\n\nend if\n\nif (IconName.eq.\"grn-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-stars.png\")\n\nend if\n\nif (IconName.eq.\"grn-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/grn-stars.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-blank.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-blank.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-diamond.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-diamond.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-circle.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-circle.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-square.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-square.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-stars.png\")\n\nend if\n\nif (IconName.eq.\"ltblu-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ltblu-stars.png\")\n\nend if\n\nif (IconName.eq.\"pink-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-blank.png\")\n\nend if\n\nif (IconName.eq.\"pink-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-blank.png\")\n\nend if\n\nif (IconName.eq.\"pink-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-diamond.png\")\n\nend if\n\nif (IconName.eq.\"pink-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-diamond.png\")\n\nend if\n\nif (IconName.eq.\"pink-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-circle.png\")\n\nend if\n\nif (IconName.eq.\"pink-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-circle.png\")\n\nend if\n\nif (IconName.eq.\"pink-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-square.png\")\n\nend if\n\nif (IconName.eq.\"pink-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-square.png\")\n\nend if\n\nif (IconName.eq.\"pink-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-stars.png\")\n\nend if\n\nif (IconName.eq.\"pink-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/pink-stars.png\")\n\nend if\n\nif (IconName.eq.\"ylw-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-diamond.png\")\n\nend if\n\nif (IconName.eq.\"ylw-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-diamond.png\")\n\nend if\n\nif (IconName.eq.\"ylw-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-circle.png\")\n\nend if\n\nif (IconName.eq.\"ylw-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-circle.png\")\n\nend if\n\nif (IconName.eq.\"ylw-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-square.png\")\n\nend if\n\nif (IconName.eq.\"ylw-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-square.png\")\n\nend if\n\nif (IconName.eq.\"ylw-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-stars.png\")\n\nend if\n\nif (IconName.eq.\"ylw-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/ylw-stars.png\")\n\nend if\n\nif (IconName.eq.\"wht-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-blank.png\")\n\nend if\n\nif (IconName.eq.\"wht-blank\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-blank.png\")\n\nend if\n\nif (IconName.eq.\"wht-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-diamond.png\")\n\nend if\n\nif (IconName.eq.\"wht-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-diamond.png\")\n\nend if\n\nif (IconName.eq.\"wht-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-circle.png\")\n\nend if\n\nif (IconName.eq.\"wht-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-circle.png\")\n\nend if\n\nif (IconName.eq.\"wht-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-square.png\")\n\nend if\n\nif (IconName.eq.\"wht-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-square.png\")\n\nend if\n\nif (IconName.eq.\"wht-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-stars.png\")\n\nend if\n\nif (IconName.eq.\"wht-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/wht-stars.png\")\n\nend if\n\nif (IconName.eq.\"red-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-diamond.png\")\n\nend if\n\nif (IconName.eq.\"red-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-diamond.png\")\n\nend if\n\nif (IconName.eq.\"red-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-circle.png\")\n\nend if\n\nif (IconName.eq.\"red-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-circle.png\")\n\nend if\n\nif (IconName.eq.\"red-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-square.png\")\n\nend if\n\nif (IconName.eq.\"red-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-square.png\")\n\nend if\n\nif (IconName.eq.\"red-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-stars.png\")\n\nend if\n\nif (IconName.eq.\"red-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/red-stars.png\")\n\nend if\n\nif (IconName.eq.\"purple-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-diamond.png\")\n\nend if\n\nif (IconName.eq.\"purple-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-diamond.png\")\n\nend if\n\nif (IconName.eq.\"purple-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-circle.png\")\n\nend if\n\nif (IconName.eq.\"purple-circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-circle.png\")\n\nend if\n\nif (IconName.eq.\"purple-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-square.png\")\n\nend if\n\nif (IconName.eq.\"purple-square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-square.png\")\n\nend if\n\nif (IconName.eq.\"purple-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-stars.png\")\n\nend if\n\nif (IconName.eq.\"purple-stars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/paddle/purple-stars.png\")\n\nend if\n\nif (IconName.eq.\"arrow-reverse\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/arrow-reverse.png\")\n\nend if\n\nif (IconName.eq.\"arrow\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/arrow.png\")\n\nend if\n\nif (IconName.eq.\"track\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/track.png\")\n\nend if\n\nif (IconName.eq.\"donut\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/donut.png\")\n\nend if\n\nif (IconName.eq.\"forbidden\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/forbidden.png\")\n\nend if\n\nif (IconName.eq.\"info-i\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/info-i.png\")\n\nend if\n\nif (IconName.eq.\"polygon\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/polygon.png\")\n\nend if\n\nif (IconName.eq.\"open-diamond\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/open-diamond.png\")\n\nend if\n\nif (IconName.eq.\"square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/square.png\")\n\nend if\n\nif (IconName.eq.\"star\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/star.png\")\n\nend if\n\nif (IconName.eq.\"target\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/target.png\")\n\nend if\n\nif (IconName.eq.\"triangle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/triangle.png\")\n\nend if\n\nif (IconName.eq.\"cross-hairs\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/cross-hairs.png\")\n\nend if\n\nif (IconName.eq.\"placemark_square\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/placemark_square.png\")\n\nend if\n\nif (IconName.eq.\"placemark_circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/placemark_circle.png\")\n\nend if\n\nif (IconName.eq.\"shaded_dot\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/shaded_dot.png\")\n\nend if\n\nif (IconName.eq.\"dining\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/dining.png\")\n\nend if\n\nif (IconName.eq.\"coffee\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/coffee.png\")\n\nend if\n\nif (IconName.eq.\"bars\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/bars.png\")\n\nend if\n\nif (IconName.eq.\"snack_bar\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/snack_bar.png\")\n\nend if\n\nif (IconName.eq.\"man\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/man.png\")\n\nend if\n\nif (IconName.eq.\"woman\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/woman.png\")\n\nend if\n\nif (IconName.eq.\"wheel_chair_accessible\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/wheel_chair_accessible.png\")\n\nend if\n\nif (IconName.eq.\"parking_lot\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/parking_lot.png\")\n\nend if\n\nif (IconName.eq.\"cabs\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/cabs.png\")\n\nend if\n\nif (IconName.eq.\"bus\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/bus.png\")\n\nend if\n\nif (IconName.eq.\"truck\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/truck.png\")\n\nend if\n\nif (IconName.eq.\"rail\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/rail.png\")\n\nend if\n\nif (IconName.eq.\"airports\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/airports.png\")\n\nend if\n\nif (IconName.eq.\"ferry\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/ferry.png\")\n\nend if\n\nif (IconName.eq.\"heliport\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/heliport.png\")\n\nend if\n\nif (IconName.eq.\"subway\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/subway.png\")\n\nend if\n\nif (IconName.eq.\"tram\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/tram.png\")\n\nend if\n\nif (IconName.eq.\"info\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/info.png\")\n\nend if\n\nif (IconName.eq.\"info_circle\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/info_circle.png\")\n\nend if\n\nif (IconName.eq.\"flag\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/flag.png\")\n\nend if\n\nif (IconName.eq.\"rainy\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/rainy.png\")\n\nend if\n\nif (IconName.eq.\"water\") then\n\nreturn(\"http://maps.google.com/mapfiles/kml/shapes/water.png\")\n\nend if"
    }
}