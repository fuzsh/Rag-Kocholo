{
    "id": "dbpedia_989_3",
    "rank": 41,
    "data": {
        "url": "https://developer.amazon.com/docs/gamemaker/drawing-sprites.html",
        "read_more_link": "",
        "language": "en",
        "title": "Drawing Sprites",
        "top_image": "https://amzndevresources.com/jekyll/css/favicon.ico",
        "meta_img": "https://amzndevresources.com/jekyll/css/favicon.ico",
        "images": [
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/logos/amazonAppstoreLogoDarkBG1x_new.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image1-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image2-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image3-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image4-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image5-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/emily-gamemaker/image6-gamemakerbasics-sprites._TTH_.gif",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/logo-youtube.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/logo_linkedin._CB1704305834_.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/logo_X.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/logo_facebook02.png",
            "https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/dex/logo-blog._V290989945_.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/platform-logos/white/Alexalogoheaderwhite._V506548913_.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/platform-logos/white/Appstorelogowhite.png",
            "https://m.media-amazon.com/images/G/01/mobile-apps/dex/platform-logos/white/AWS_logo_RGB_WHT._CB1506540482_.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "You'll learn how to draw sprites in GameMaker. A sprite is an image that is being shown on your screen and it can be a single image, or a series of images that form an animation.",
        "meta_lang": "en",
        "meta_favicon": "https://amzndevresources.com/jekyll/css/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://developer.amazon.com/docs/gamemaker/drawing-sprites.html",
        "text": "Written in October 2017 by Nathan Ranney, the founder of game development studio Gutter Arcade.\n\nA sprite is an image that is being shown on your screen and it can be a single image, or a series of images that form an animation.\n\nAnimation\n\nScale\n\nAngle and Rotation\n\nColor Blending\n\nAlpha\n\nFirst, we need to break down what draw_sprite_ext(); is, and all of the arguments it uses. Draw_sprite_ext(); is an extended version of draw_sprite(); and gives us much more control over the sprite we are drawing. This function is primarily used to draw sprites to the screen. Using this function, we can change the scale, angle, color blending, and alpha of the sprite being drawn. See the table below for all of the arguments this function requires:\n\nArgument Description sprite Index of the sprite you want to draw. frame Individual frame of the sprite you are drawing. x X position of where you are drawing the sprite. y Y position of where you are drawing the sprite. xscale Horizontal scaling of the sprite. yscale Vertical scaling of the sprite. rot Angle/rotation of the sprite. color Color blending (c_white displays as normal). alpha Alpha of the sprite. Range from transparent (0) to opaque (1).\n\nThere is a bit of setup required before we can really use this function effectively. We are going to define these arguments as variables, and throw all of it into a script so it can be used on any object.\n\nCreate a script and name it animation_init. Add the following lines:\n\nBy setting the sprite variable to sprite_index, it will use the sprite that the object has set. While we are creating scripts, we may as well create a couple of helper scripts we will need later. Create a new script called approach and add the following lines:\n\nThis script allows you to increase a value by another value, until it reaches a maximum value. I'll show you what we can do with this a little later. Next, create another script and name it player_buttons. Add the following code:\n\nAll we are doing here is storing our keyboard inputs into variables. These are all booleans, meaning they can either be true or false. This makes it much easier to address button presses later on.\n\nNow that we have our animation_init script ready to go, we are ready to start drawing, that is, once we have a sprite to draw! Create a new sprite, and name it sprPlayer_Idle. Make sure this sprite has multiple frames, and each frame is different. Otherwise you won't be able to tell it's animating. Set the sprite origin to the x center, and y bottom. If you are using the sprites that I am using, that is 16 and 32 respectively.\n\nHere is a link to all of the sprites I am using. I recommend downloading them and following along.\n\nNext we need an object. Create a new object and name it oPlayer. Set your sprPlayer_Idle sprite as the object sprite. Add the Create, Step, End Step, and Draw events. Add the Run Code action to each event. Open up the Create event code and add the following lines:\n\nNext we move on the to Draw event. In the Draw event, add the following lines:\n\nNow we are almost ready to run the game and see our sprite being drawn on screen. Create a room, name it whatever you want, and place your oPlayer object in the room. When you run the game you should see the sprPlayer_Idle sprite being drawn. However that sprite isn't animated, and it doesn't move. It's just sitting there being boring. Let's fix that.\n\nAnimation\n\nAssuming that your sprite has multiple frames, we need to animate that sprite. Since we are manually drawing the sprite, we can't use built-in variables like image_speed to animate. However we did already define our own image_speed equivalent with frameSpeed. Create a new script, name it frame_counter, and add the following lines:\n\nThen, create another script and name it frame_reset. Add the following lines:\n\nThe first script, frame_counter, will increase the frame we are drawing by the frameSpeed. The following script is there to keep frame from counting on forever and ever. This is also useful for animation purposes later. The sprite_get_number() function returns the total number of frames in any given sprite. So if our frame is greater than or equal to that number, reset frame to 0. If you need to change the animation speed of your sprite, all you need to do is change the value of frameSpeed.\n\nNow, let's put all of this stuff to use. Open the Step event of your oPlayer object, and add the following lines:\n\nOpen End Step and add the following lines:\n\nGo ahead and run the game. You should see your sprite animating. Depending on your frameSpeed, the animation may not look correct. Try adjusting the frameSpeed value and find something that looks right to you.\n\nThe guy on the left is animating at a frameSpeed of 0.10. His hyperactive friend on the right is animating at a frameSpeed of 1. This is running at 60fps in game. The number above their heads indicate the current frame of animation they are on.\n\nScale\n\nLet's move on to the x and y scaling. We will start by flipping the sprite to the left and right. This is something that I've seen a lot of folks use the image_xscale variable for, and you don't necessarily want to do that all the time. Image_xscale will flip the sprite, but it also flips the sprite mask, which can cause problems. Part of the reason we are using draw_sprite_ext(); is that we are bypassing all of these built-in variables that can cause issues. Add a couple more lines to the step event, below the code we just added:\n\nRun your game, and if everything was done correctly, you should be able to flip the direction your newly animated sprite is now facing by pushing the left and right arrow keys. This is because in the Draw event, we are multiplying xScale by facing. The best part about this is that your sprite mask is not changing when your sprite is flipped. Now, do you remember the Approach script we added? Using that to make your sprites squash and stretch is a great way to add some life to your animations. Add the following lines below what we just added:\n\nRun your game and hit the space bar. Your sprite should grow by 50% and then shrink back down to normal scale. Adjusting the x/y scale of your sprite can have a huge impact on the feeling of your game. Experiment with this a bit and find some values that feel right to you. I like to create a squash_stretch script because I use this trick all the time. Here is what that script looks like:\n\nYou can then replace the xScale and yScale lines with squash_strech(1.5, 1.5).\n\nAngle and Rotation\n\nUp next we have angle, which is basically just rotation. When using angle, be sure to use values between 0 and 360. I'm sure that by now you can figure out how this will work. Go ahead and try to adjust the angle using the up and down arrow keys. Did you have any luck? Check out the code below and see if your code is similar:\n\nColor Blending\n\nThe next argument is color, which specifically refers to color blending. Whatever color you put in here (such as c_red) will blend your current sprite into that color. We are going to use c_white for now, which means there is no color blending, and your sprite appears as normal.\n\nAlpha\n\nNow, on to the last argument in draw_sprite_ext(); Alpha is the transparency of your sprite. It ranges from 0, which is totally transparent, to 1, which is totally opaque. You could use this for all kinds of stuff like making your character blink after taking damage, or turning partially invisible when they are sneaking around. Try adjusting the alpha variable and see what happens. Here is the code I used to change the alpha. This uses the A and S keys to decrease and increase the alpha.\n\nThis is another good place to use approach, as it prevents the alpha value from going below 0 or above 1."
    }
}