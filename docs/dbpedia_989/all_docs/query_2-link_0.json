{
    "id": "dbpedia_989_2",
    "rank": 0,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Sprite_(computer_graphics)",
        "read_more_link": "",
        "language": "en",
        "title": "Sprite (computer graphics)",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/2/25/Broforce_boss_sprites_2_%28cropped%29.jpg",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/2/25/Broforce_boss_sprites_2_%28cropped%29.jpg",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Broforce_boss_sprites_2_%28cropped%29.jpg/220px-Broforce_boss_sprites_2_%28cropped%29.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Vg_graphics.svg/100px-Vg_graphics.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2004-08-20T00:38:29+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Sprite_(computer_graphics)",
        "text": "2D bitmap displayed on top of a larger scene\n\nFor the technique of combining images into a single bitmap, see texture atlas.\n\nFor the process of drawing sprites, see pixel art.\n\nPart of a series onVideo game graphics\n\nIn computer graphics, a sprite is a two-dimensional bitmap that is integrated into a larger scene, most often in a 2D video game. Originally, the term sprite referred to fixed-sized objects composited together, by hardware, with a background.[1] Use of the term has since become more general.\n\nSystems with hardware sprites include arcade video games of the 1970s and 1980s; game consoles including as the Atari VCS (1977), ColecoVision (1982), Famicom (1983), Genesis/Mega Drive (1988); and home computers such as the TI-99/4 (1979), Atari 8-bit computers (1979), Commodore 64 (1982), MSX (1983), Amiga (1985), and X68000 (1987). Hardware varies in the number of sprites supported, the size and colors of each sprite, and special effects such as scaling or reporting pixel-precise overlap.\n\nHardware composition of sprites occurs as each scan line is prepared for the video output device, such as a cathode-ray tube, without involvement of the main CPU and without the need for a full-screen frame buffer.[1] Sprites can be positioned or altered by setting attributes used during the hardware composition process. The number of sprites which can be displayed per scan line is often lower than the total number of sprites a system supports. For example, the Texas Instruments TMS9918 chip supports 32 sprites, but only four can appear on the same scan line.\n\nThe CPUs in modern computers, video game consoles, and mobile devices are fast enough that bitmaps can be drawn into a frame buffer without special hardware assistance. Beyond that, GPUs can render vast numbers of scaled, rotated, antialiased, partially translucent, very high resolution images in parallel with the CPU.\n\nEtymology\n\n[edit]\n\nAccording to Karl Guttag, one of two engineers for the 1979 Texas Instruments TMS9918 video display processor, this use of the word sprite came from David Ackley, a manager at TI.[2] It was also used by Danny Hillis at Texas Instruments in the late 1970s.[3] The term was derived from the fact that sprites \"float\" on top of the background image without overwriting it, much like a ghost or mythological sprite.\n\nSome hardware manufacturers used different terms, especially before sprite became common:\n\nPlayer/Missile Graphics was a term used by Atari, Inc. for hardware sprites in the Atari 8-bit computers (1979) and Atari 5200 console (1982).[4] The term reflects the use for both characters (\"players\") and smaller associated objects (\"missiles\") that share the same color. The earlier Atari Video Computer System and some Atari arcade games used player, missile, and ball.\n\nStamp was used in some arcade hardware in the early 1980s, including Ms. Pac-Man.[5]\n\nMovable Object Block, or MOB, was used in MOS Technology's graphics chip literature. Commodore, the main user of MOS chips and the owner of MOS for most of the chip maker's lifetime, instead used the term sprite for the Commodore 64.\n\nOBJs (short for objects) is used in the developer manuals for the NES, Super NES, and Game Boy. The region of video RAM used to store sprite attributes and coordinates is called OAM (Object Attribute Memory). This also applies to the Game Boy Advance and Nintendo DS.\n\nHistory\n\n[edit]\n\nArcade video games\n\n[edit]\n\nThe use of sprites originated with arcade video games. Nolan Bushnell came up with the original concept when he developed the first arcade video game, Computer Space (1971). Technical limitations made it difficult to adapt the early mainframe game Spacewar! (1962), which performed an entire screen refresh for every little movement, so he came up with a solution to the problem: controlling each individual game element with a dedicated transistor. The rockets were essentially hardwired bitmaps that moved around the screen independently of the background, an important innovation for producing screen images more efficiently and providing the basis for sprite graphics.[6]\n\nThe earliest video games to represent player characters as human player sprites were arcade sports video games, beginning with Taito's TV Basketball,[7][8][9] released in April 1974 and licensed to Midway Manufacturing for release in North America.[10] Designed by Tomohiro Nishikado, he wanted to move beyond simple Pong-style rectangles to character graphics, by rearranging the rectangle shapes into objects that look like basketball players and basketball hoops.[11][12] Ramtek released another sports video game in October 1974, Baseball,[10] which similarly displayed human-like characters.[13]\n\nThe Namco Galaxian arcade system board, for the 1979 arcade game Galaxian, displays animated, multi-colored sprites over a scrolling background.[14] It became the basis for Nintendo's Radar Scope and Donkey Kong arcade hardware and home consoles such as the Nintendo Entertainment System.[15] According to Steve Golson from General Computer Corporation, the term \"stamp\" was used instead of \"sprite\" at the time.[5]\n\nHome systems\n\n[edit]\n\nSignetics devised the first chips capable of generating sprite graphics (referred to as objects by Signetics) for home systems. The Signetics 2636 video processors were first used in the 1978 1292 Advanced Programmable Video System and later in the 1979 Elektor TV Games Computer.\n\nThe Atari VCS, released in 1977, has a hardware sprite implementation where five graphical objects can be moved independently of the game playfield. The term sprite was not in use at the time. The VCS's sprites are called movable objects in the programming manual, further identified as two players, two missiles, and one ball.[16] These each consist of a single row of pixels that are displayed on a scan line. To produce a two-dimensional shape, the sprite's single-row bitmap is altered by software from one scan line to the next.\n\nThe 1979 Atari 400 and 800 home computers have similar, but more elaborate, circuitry capable of moving eight single-color objects per scan line: four 8-bit wide players and four 2-bit wide missiles. Each is the full height of the display—a long, thin strip. DMA from a table in memory automatically sets the graphics pattern registers for each scan line. Hardware registers control the horizontal position of each player and missile. Vertical motion is achieved by moving the bitmap data within a player or missile's strip. The feature was called player/missile graphics by Atari.\n\nTexas Instruments developed the TMS9918 chip with sprite support for its 1979 TI-99/4 home computer. An updated version is used in the 1981 TI-99/4A.\n\nSystems with hardware sprites\n\n[edit]\n\nThese are base hardware specs and do not include additional programming techniques, such as using raster interrupts to repurpose sprites mid-frame.\n\nSystem Sprite hardware Introduced Sprites on screen Sprites per scan line Max. texels on line Texture width Texture height Colors Zoom Rotation Collision detection Transparency Source Amstrad Plus ASIC 1990 16 16 ? 16 16 15 2, 4× vertical, 2, 4× horizontal No No Color key [17] Atari 2600 TIA 1977 5 5 19 1, 8 262 1 2, 4, 8× horizontal Horizontal mirroring Yes Color key [18] Atari 8-bit computers GTIA/ANTIC 1979 8 8 40 2, 8 128, 256 1 2× vertical, 2, 4× horizontal No Yes Color key [19] Commodore 64 VIC-II 1982 8 8 96, 192 12, 24 21 1, 3 2× integer No Yes Color key [20] Amiga (OCS) Denise 1985 8, can be reused horizontally per 4 pixel increments Arbitrary, 8 unique Arbitrary 16 Arbitrary 3, 15 Vertical by display list No Yes Color key [21] Amiga (AGA) Lisa 1992 8, can be reused horizontally per 2 pixel increments Arbitrary, 8 unique Arbitrary 16, 32, 64 Arbitrary 3, 15 Vertical by display list No Yes Color key ColecoVision TMS9918A 1983 32 4 64 8, 16 8, 16 1 2× integer No Partial Color key TI-99/4 & 4A TMS9918 1979 32 4 64 8, 16 8, 16 1 2× integer No Partial Color key Gameduino 2011 256 96 1,536 16 16 255 No Yes Yes Color key [22] Intellivision STIC AY-3-8900 1979 8 8 64 8 8,16 1 2, 4, 8× vertical, 2× horizontal Horizontal and vertical mirroring Yes Color key [23] MSX TMS9918A 1983 32 4 64 8, 16 8, 16 1 2× integer No Partial Color key [24] MSX2 Yamaha V9938 1986 32 8 128 8, 16 8,16 1, 3, 7, 15 per line 2× integer No Partial Color key MSX2+ / MSX turbo R Yamaha V9958 1988 32 8 128 8,16 8,16 1, 3, 7, 15 per line 2× integer No Partial Color key Namco Pac-Man\n\n(arcade) TTL 1980 6 6 96 16 16 3 No Horizontal and vertical mirroring No Color key [25] TurboGrafx-16 HuC6270A 1987 64 16 256 16, 32 16, 32, 64 15 No Horizontal and vertical mirroring Yes Color key [26] Namco Galaxian\n\n(arcade) TTL 1979 7 7 112 16 16 3 No Horizontal and vertical mirroring No Color key [27][28][29] Nintendo Donkey Kong, Radar Scope\n\n(arcade) 1979 128 16 256 16 16 3 Integer No Yes Color key [30] Nintendo DS Integrated PPU 2004 128 128 1,210 8, 16, 32, 64 8, 16, 32, 64 65,536 Affine Affine No Color key, blending [31] NES/Famicom Ricoh RP2C0x PPU 1983 64 8 64 8 8, 16 3 No Horizontal and vertical mirroring Partial Color key [32] Game Boy Integrated PPU 1989 40 10 80 8 8, 16 3 No Horizontal and vertical mirroring No Color key [33] Game Boy Advance Integrated PPU 2001 128 128 1210 8, 16, 32, 64 8, 16, 32, 64 15, 255 Affine Affine No Color key, blending [34] Master System,\n\nGame Gear YM2602B VDP\n\n(TMS9918-derived) 1985 64 8 128 8, 16 8, 16 15 2× integer, 2× vertical Background tile mirroring Yes Color key [35][36] Genesis / Mega Drive YM7101 VDP\n\n(SMS VDP-derived) 1988 80 20 320 8, 16, 24, 32 8, 16, 24, 32 15 No Horizontal and vertical mirroring Yes Color key [37][38] Sega OutRun (arcade) 1986 128 128 1600 8 to 512 8 to 256 15 Anisotropic Horizontal and vertical mirroring Yes Alpha [39][40][41][42][43][44][45] X68000 Cynthia jr. (original), Cynthia (later models) 1987 128 32 512 16 16 15 2× integer Horizontal and vertical mirroring Partial Color key [46][47][48] Neo Geo LSPC2-A2 1990 384 96 1536 16 16 to 512 15 Sprite shrinking Horizontal and vertical mirroring Partial Color key [49][50][51] Super NES / Super Famicom S-PPU1, S-PPU2 1990 128 34 256 8, 16, 32, 64 8, 16, 32, 64 15 No Horizontal and vertical mirroring No Color key, averaging [52] System Sprite hardware Introduced Sprites on screen Sprites on line Max. texels on line Texture width Texture height Colors Hardware zoom Rotation Collision detection Transparency Source\n\nSee also\n\n[edit]\n\n2.5D"
    }
}