{
    "id": "dbpedia_989_3",
    "rank": 74,
    "data": {
        "url": "https://thecodingfun.com/2019/08/28/the-difference-between-scratch-and-sprite-lab-from-code-org/",
        "read_more_link": "",
        "language": "en",
        "title": "The Difference Between Scratch and Sprite Lab (from Code.org)",
        "top_image": "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-create-new.png",
        "meta_img": "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-create-new.png",
        "images": [
            "https://thecodingfun.com/wp-content/uploads/2020/11/smaller-version-1.png?w=300",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-create-new.png?w=834",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-create-new.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/scratch-create-new-project.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/scratch-coding-feature.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-toolbox-and-language-feature.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-spirits-choice.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/upload-spirits.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/full-couse-catalog.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/scratch-tutorial.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/scratch-coding-toolbox.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-dance-project-4.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-play-lab-interface-1.png",
            "https://thecodingfun.com/wp-content/uploads/2019/08/code-org-spirits-lab-1.png",
            "https://0.gravatar.com/avatar/6dda44ce944c6e937e516daecf9c126b6f2c1952179f10affa379144241f8174?s=60&d=retro&r=G",
            "https://i0.wp.com/thecodingfun.com/wp-content/uploads/2020/12/slide-top-view.png?resize=40%2C40&ssl=1",
            "https://i0.wp.com/thecodingfun.com/wp-content/uploads/2021/03/slide-roll-angle.jpg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/thecodingfun.com/wp-content/uploads/2021/03/front-1.jpg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/thecodingfun.com/wp-content/uploads/2019/09/lesson-stage-1.png?resize=40%2C40&ssl=1",
            "https://i0.wp.com/thecodingfun.com/wp-content/uploads/2021/01/translate-between-block-language-and-python-code.jpg?resize=40%2C40&ssl=1",
            "https://thecodingfun.com/wp-content/uploads/2020/09/book-link.png?w=1309",
            "https://thecodingfun.com/wp-content/uploads/2019/08/cropped-smaller-version-1-e1565918033845-1.png?w=50",
            "https://thecodingfun.com/wp-content/uploads/2019/08/cropped-smaller-version-1-e1565918033845-1.png?w=50",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "The Coding Fun"
        ],
        "publish_date": "2019-08-28T00:00:00",
        "summary": "",
        "meta_description": "As a trainer for the kids to learn coding in Scratch, I am always interested in finding other useful tools for kids to learn programming. In my previous post, I have compared several popular kids programming tools (check here). In this post, I will make a detailed comparison between Scratch and Sprite Lab editor provided…",
        "meta_lang": "en",
        "meta_favicon": "https://thecodingfun.com/wp-content/uploads/2019/08/cropped-smaller-version-1-e1565918033845-1.png?w=32",
        "meta_site_name": "The Coding Fun",
        "canonical_link": "https://thecodingfun.com/2019/08/28/the-difference-between-scratch-and-sprite-lab-from-code-org/",
        "text": "As a trainer for the kids to learn coding in Scratch, I am always interested in finding other useful tools for kids to learn programming. In my previous post, I have compared several popular kids programming tools (check here). In this post, I will make a detailed comparison between Scratch and Sprite Lab editor provided by Code.org.\n\nI recognize that people have different preferences in the choice of tools, so my opinion is attached at the end of the article as a reference.\n\nEasy of Access\n\nFirst, both tools are free and easy to get accessed through web browser. you only need to login in, open your project page, and begin working on your project. No need to waste anytime on setting up the coding environment from your computer. Both tools could automatically save your code at an interval, but I suggest the students to save the project whenever they make importance update for their projects.\n\nYou don’t need to worry about the loss of your code. Based on my usage experience, I rarely notice the program slow in responsiveness or hang on.\n\nSo in terms of easy of access, both tools are excellent.\n\nOpenness of the Platform\n\nBoth of the tools encourage users to read the code of projects created by others and remix them to improve the functionality of the game. Meanwhile, the tools also takes full consideration of the copyright of the original creators. The remixed project could always trace the original version back to the original author.\n\nSpirits Lab and several other labs (Play Lab, Dance Lab, Game Lab, etc.) provided by Code.org provides both block-based language work space and JavaScript workplace. Therefore, it is convenient for those students with stronger coding skills to switch from block-based language to JavaScript language.\n\nWhile in Scratch, no backside interface is exposed, and the user accesses only block-based language interface. Although it seems more conserved at Scratch side, it continues enhancing its functionality and connects to 3rd party players, such as Google Translate service, Amazon Text to Speech service, Lego Mind-Storm Robots, Lego Booster robots. The Scratch 3.0 is becoming more open-minded toward extensions.\n\nIn Scratch, the project can be downloaded and saved into local version, but Spirits Lab projects have to be saved in the online platform.\n\nInterface Friendliness\n\nBoth tools have friendly user interface. They use sprite to represent the object or character in a game. A spirit can be an animal, a figure, a plant, a picture or a shape, actually anything which the user wants to add action or sound. The sprite concept is equal to an object in many popular programming languages.\n\nfor Scratch, each sprite has its own coding tab, costume tab, and sound tab. They are arranged neatly. It is very convenient for user to switch work spaces of various sprites and check code.\n\nWhile in Sprite Lab, there is one coding workplace, and all the code are put together on one page, which will make the code look a bit messy for new users and complicated designs. In Sprite Lab, the user can create behavior for a sprite in a separate window, but when checking the behavior of sprite, the user has to double click to open a separate editor window.\n\nPersonally, I feel that Scratch editor is more user friendly and looks straight-forward. I recommend its layout format of code, clarified and consistent to the coding layout of object-oriented programming language.\n\nSyntax of Block-based Language\n\nThe syntax of both block-based language is simple and clarified, but there are some subtle difference.\n\nDesign Library\n\nSupport of Tutorial and Study Lessons\n\nBoth organizations provide tutorial and learning lessons. Sprites Lab is one editor of Code.org, a no-profit organization. It provides graded lessons covering from elementary level to high school level, so it is more systematic. If the kids always use the coding lessons provided by Code.org, they will be familiar with the environment of Sprites Lab, and other labs such as Play Lab, Dancing Lab or Drawing Lab.\n\nFor Scratch, it provides the entry-level tutorial lessons, and every tutorial realize a small function. There are no step-by-step leveled lessons on its official website, Therefore, users may get lost once they know the basic functions and want to combine various functions to design more complicated game plots and character behaviors. It is why there are organizations providing independent graded lessons for Scratch.\n\nThe functionality of Block-based Language\n\nFor Code.org, it provides many different editors such as Dance lab, Game Lab, Spirits Lab. For each lab, the functionality is different and the block-based language is also different. You could not create a game which utilized the functions from different labs.That is really confusing and limits the overall functionality of labs.Why not to create a lab which put all the functionality of Spirits Lab, Play Lab, Dance Lab and Drawing Lab together, thus making the Super Sprites Lab super powerful?\n\nSummary\n\nSprites Lab is more suitable for younger kids to learn coding step-by-step with the powerful support of the systematic courses. At the elementary level of Code.org Courses, the toolbox considerably only shows the necessary, limited amount blocks, so the little ones will not get confused by too many choices. Generally, I feel the code.org start-up courses are suitable for young kids around the age of 5 to 6.\n\nFor Scratch, it is connected to many external plug-ins, and functionalities more stronger. It’s more popular for bigger kids from Primary 4 and above. The kids of those age have stronger understanding about the game design, math and logistic concept. They will feel the flexibility of Scratch tool attracting. Meanwhile, many countries and regions conduct kids coding competition currently, and they often appoint Scratch as one of the coding languages for the Junior-level competition. It is also one reason why Scratch becomes popular.\n\nIn TheCodingFun, we provide the Scratch coding courses for the kids of 8+ years. For the kids of 5-7 years, we utilized a mixed method by utilizing lessons provided by Code.org to help them warm-up, and customizing our courses in Scratch to set up a foundation for them to upgrade to future coding learning.\n\nDisclaimer: Code.org is a non-profit organization. all the courses on the website is for free. When we provide the code.org courses, they are offered as a supplementary material for the children for free. All the copyright belongs to code.org. Children can login into code.org to self-learn those free courses any time."
    }
}