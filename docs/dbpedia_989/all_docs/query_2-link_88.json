{
    "id": "dbpedia_989_2",
    "rank": 88,
    "data": {
        "url": "https://bjc.edc.org/bjc-r/cur/programming/summaries/vocab1.html",
        "read_more_link": "",
        "language": "en",
        "title": "Unit 1 Vocabulary",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://bjc.edc.org/bjc-r/img/1-introduction/transparency2.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/list-a-b.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/list-b-a.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/list-from-who-result.png",
            "https://bjc.edc.org/bjc-r/img/blocks/join()().png",
            "https://bjc.edc.org/bjc-r/img/blocks/pick-random-empty-full-size.png",
            "https://bjc.edc.org/bjc-r/img/blocks/list-full-size.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/plus.png",
            "https://bjc.edc.org/bjc-r/img/blocks/broadcast.png",
            "https://bjc.edc.org/bjc-r/img/blocks/point-in-direction-blank.png",
            "https://bjc.edc.org/bjc-r/img/blocks/say-empty-full-size.png",
            "https://bjc.edc.org/bjc-r/img/2-complexity/number.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/5+(4x3).png",
            "https://bjc.edc.org/bjc-r/img/2-complexity/join-who-doeswhat-who.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/5+(4x3).png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/example-parameter.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/example-argument.png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/repeat-4(move-100-turn-right-90).png",
            "https://bjc.edc.org/bjc-r/img/1-introduction/move-tiny-no-hat.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Unit 1: Introduction to Programming\n\nLab 1: Click Alonzo Game\n\n1.1.4: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\nThe other two are costumes, picture that can be \"worn\" by a sprite.\n\n1.1.4\n\nThe transparency of an image is how much you can see what's behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block).\n\nLab 2: Gossip\n\n1.2.3: Lists, Strings, and Concatenation\n\nAAP-1.C.1 first sentence\n\nWhat does \"ordered\" mean?\n\nIt doesn't mean that the items have to appear in alphabetical or numeric order. It just means that is a different list from .\n\nA list is an ordered sequence of items. You've seen this example:\n\nAAP-2.D.1, AAP-2.D.2\n\nThe items of this list are strings. A string is a sequence of characters (letters, digits, punctuation, etc.). A substring is just a piece of some existing string. For example, \"Hanna,\" \"anna\", and \"nnah\" are each substrings of the string \"Hannah.\" (The empty string as well as the original string are both also substrings.)\n\nTo concatenate strings means to make a bigger string by connecting two or more smaller strings. In Snap!, the block lets you concatenate strings.\n\n1.2.3\n\nThe process of testing, finding problems, and fixing them is called debugging.\n\n1.2.4: Procedures, Reporters, and Commands\n\nAAP-3.A.1, AAP-3.A.2\n\nA procedure is a named sequence of instructions that may take inputs and may report a value. Some languages call procedures methods or functions. Here are two types of procedures you have seen in Snap!:\n\nReporters have an oval shape. They report a value.\n\nCommands have a jigsaw puzzle shape. They tell the computer to do something without reporting a value.\n\n1.2.5: Expressions and Values\n\nAAP-2.B.3, AAP-2.B.4\n\nAn expression is a either a constant value (such as \"4\" or \"winter\") or a call to a reporter block including its inputs (such as , , or ).\n\nExpressions are evaluated to produce a single value (a value can be a number, a string, a sprite, a costume, a script, a listâ€”anything). For example, will be evaluated to 17.\n\nLab 3: Modern Art with Polygons\n\n1.3.1: Algorithm and Pseudocode\n\nAAP-2.A.1, AAP-2.A.2, AAP-2.A.3\n\nAn algorithm is a sequence of steps that are usually performed by a computer. The algorithm doesn't have to be written in any particular programming language or even in a programming language at all; you can write your algorithm in English or any other human language. Some people call an algorithm written in human language pseudocode. Once you know the steps that the computer will take, you can code your algorithm in the programming language of your choice.\n\nWhat's the purpose of \"pseudocode\"? Why write an algorithm vaguely in English when you could write it precisely in Snap!? If you were programming in a punctuation-heavy language, designing your program in pseudocode would help you focus on the important ideas instead of on details like quotation marks and semicolons. But pseudocode isn't as necessary with a language like Snap!, and pseudocode can make it easy for you to fall into wishful thinking about what the computer is capable of (such as writing \"Pick tomorrow's winning lottery numbers\" or \"Here's the melody; write the harmony\").\n\n1.3.3: What's an input? Parameter vs. Argument\n\nAAP-3.A.3\n\nA parameter (or formal parameter) is the input name, such as number of branches. The input name is set in the block definition. It never changes.\n\nAn argument (or actual argument) is the input value, such as 6 for a hexagonal pinwheel. The input value is given each time the block is run; it can be a different value each time.\n\nWe use the word \"input\" both for parameters (input names) and for arguments (input values).\n\n1.3.6: Iteration\n\nAAP-2.J.1\n\nComputer scientists describe a repeating program structure as looping, repetition, or iteration.\n\nAAP-2.K.1\n\nThe code can be repeated forever, a specific number of times (such as when using repeat), or until something specific happens (such as when using repeat until as you'll see in Lab 5).\n\nLab 4: Protecting Your Privacy\n\n1.4.1\n\nIOC-2.A.1\n\nPersonally identifiable information (PII) is information that can let others figure out who you are and possibly get more information like your Social Security number, age, race, phone number(s), medical information, financial information, or biometric data (such as your thumbprint or face scan).\n\nLab 5: Follow the Leader\n\n1.5.2\n\nWhen a program keeps running forever, that's called an infinite loop.\n\n1.5.2\n\nCRD-2.B.2, AAP-2.B.2, AAP-2.B.6\n\nA code segment is a sequence of connected instructions that carry out a purposeful action, such as the one pictured on the left, which animates a conversation. The instructions in the code segment are carried out in order, from top to bottom."
    }
}