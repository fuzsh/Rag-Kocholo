{
    "id": "dbpedia_989_2",
    "rank": 37,
    "data": {
        "url": "https://www.sfml-dev.org/tutorials/2.6/graphics-sprite.php",
        "read_more_link": "",
        "language": "en",
        "title": "Sprites and textures (SFML",
        "top_image": "https://www.sfml-dev.org/images/favicon.ico",
        "meta_img": "https://www.sfml-dev.org/images/favicon.ico",
        "images": [
            "https://www.sfml-dev.org/images/logo.png",
            "https://www.sfml-dev.org/tutorials/2.6/images/graphics-sprites-definition.png",
            "https://www.sfml-dev.org/tutorials/2.6/images/graphics-sprites-smooth.png",
            "https://www.sfml-dev.org/tutorials/2.6/images/graphics-sprites-repeated.png",
            "https://www.sfml-dev.org/tutorials/2.6/images/graphics-sprites-color.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "//www.sfml-dev.org/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.sfml-dev.org/tutorials/2.6/graphics-sprite.php",
        "text": "Sprites and textures\n\nVocabulary\n\nMost (if not all) of you are already familiar with these two very common objects, so let's define them very briefly.\n\nA texture is an image. But we call it \"texture\" because it has a very specific role: being mapped to a 2D entity.\n\nA sprite is nothing more than a textured rectangle.\n\nOk, that was short but if you really don't understand what sprites and textures are, then you'll find a much better description on Wikipedia.\n\nLoading a texture\n\nBefore creating any sprite, we need a valid texture. The class that encapsulates textures in SFML is, surprisingly, sf::Texture. Since the only role of a texture is to be loaded and mapped to graphical entities, almost all its functions are about loading and updating it.\n\nThe most common way of loading a texture is from an image file on disk, which is done with the loadFromFile function.\n\nsf::Texture texture; if (!texture.loadFromFile(\"image.png\")) { // error... }\n\nThe loadFromFile function can sometimes fail with no obvious reason. First, check the error message that SFML prints to the standard output (check the console). If the message is unable to open file, make sure that the working directory (which is the directory that any file path will be interpreted relative to) is what you think it is: When you run the application from your desktop environment, the working directory is the executable folder. However, when you launch your program from your IDE (Visual Studio, Code::Blocks, ...) the working directory might sometimes be set to the project directory instead. This can usually be changed quite easily in the project settings.\n\nYou can also load an image file from memory (loadFromMemory), from a custom input stream (loadFromStream), or from an image that has already been loaded (loadFromImage). The latter loads the texture from an sf::Image, which is a utility class that helps store and manipulate image data (modify pixels, create transparency channel, etc.). The pixels of an sf::Image stay in system memory, which ensures that operations on them will be as fast as possible, in contrast to the pixels of a texture which reside in video memory and are therefore slow to retrieve or update but very fast to draw.\n\nSFML supports most common image file formats. The full list is available in the API documentation.\n\nAll these loading functions have an optional argument, which can be used if you want to load a smaller part of the image.\n\n// load a 32x32 rectangle that starts at (10, 10) if (!texture.loadFromFile(\"image.png\", sf::IntRect(10, 10, 32, 32))) { // error... }\n\nThe sf::IntRect class is a simple utility type that represents a rectangle. Its constructor takes the coordinates of the top-left corner, and the size of the rectangle.\n\nIf you don't want to load a texture from an image, but instead want to update it directly from an array of pixels, you can create it empty and update it later:\n\n// create an empty 200x200 texture if (!texture.create(200, 200)) { // error... }\n\nNote that the contents of the texture are undefined at this point.\n\nTo update the pixels of an existing texture, you have to use the update function. It has overloads for many kinds of data sources:\n\n// update a texture from an array of pixels sf::Uint8* pixels = new sf::Uint8[width * height * 4]; // * 4 because pixels have 4 components (RGBA) ... texture.update(pixels); // update a texture from a sf::Image sf::Image image; ... texture.update(image); // update the texture from the current contents of the window sf::RenderWindow window; ... texture.update(window);\n\nThese examples all assume that the source is of the same size as the texture. If this is not the case, i.e. if you want to update only a part of the texture, you can specify the coordinates of the sub-rectangle that you want to update. You can refer to the documentation for further details.\n\nAdditionally, a texture has two properties that change how it is rendered.\n\nThe first property allows one to smooth the texture. Smoothing a texture makes pixel boundaries less visible (but the image a little more blurry), which can be desirable if it is up-scaled.\n\ntexture.setSmooth(true);\n\nSince smoothing samples from adjacent pixels in the texture as well, it can lead to the unwanted side effect of factoring in pixels outside the selected texture area. This can happen when your sprite is located at non-integer coordinates.\n\nThe second property allows a texture to be repeatedly tiled within a single sprite.\n\ntexture.setRepeated(true);\n\nThis only works if your sprite is configured to show a rectangle which is larger than the texture, otherwise this property has no effect.\n\nOk, can I have my sprite now?\n\nYes, you can now create your sprite.\n\nsf::Sprite sprite; sprite.setTexture(texture);\n\n... and finally draw it.\n\n// inside the main loop, between window.clear() and window.display() window.draw(sprite);\n\nIf you don't want your sprite to use the entire texture, you can set its texture rectangle.\n\nsprite.setTextureRect(sf::IntRect(10, 10, 32, 32));\n\nYou can also change the color of a sprite. The color that you set is modulated (multiplied) with the texture of the sprite. This can also be used to change the global transparency (alpha) of the sprite.\n\nsprite.setColor(sf::Color(0, 255, 0)); // green sprite.setColor(sf::Color(255, 255, 255, 128)); // half transparent\n\nThese sprites all use the same texture, but have a different color:\n\nSprites can also be transformed: They have a position, an orientation and a scale.\n\n// position sprite.setPosition(sf::Vector2f(10.f, 50.f)); // absolute position sprite.move(sf::Vector2f(5.f, 10.f)); // offset relative to the current position // rotation sprite.setRotation(90.f); // absolute angle sprite.rotate(15.f); // offset relative to the current angle // scale sprite.setScale(sf::Vector2f(0.5f, 2.f)); // absolute scale factor sprite.scale(sf::Vector2f(1.5f, 3.f)); // factor relative to the current scale\n\nBy default, the origin for these three transformations is the top-left corner of the sprite. If you want to set the origin to a different point (for example the center of the sprite, or another corner), you can use the setOrigin function.\n\nsprite.setOrigin(sf::Vector2f(25.f, 25.f));\n\nSince transformation functions are common to all SFML entities, they are explained in a separate tutorial: Transforming entities.\n\nThe white square problem\n\nYou successfully loaded a texture, constructed a sprite correctly, and... all you see on your screen now is a white square. What happened?\n\nThis is a common mistake. When you set the texture of a sprite, all it does internally is store a pointer to the texture instance. Therefore, if the texture is destroyed or moves elsewhere in memory, the sprite ends up with an invalid texture pointer.\n\nThis problem occurs when you write this kind of function:\n\nsf::Sprite loadSprite(std::string filename) { sf::Texture texture; texture.loadFromFile(filename); return sf::Sprite(texture); } // error: the texture is destroyed here\n\nYou must correctly manage the lifetime of your textures and make sure that they live as long as they are used by any sprite.\n\nThe importance of using as few textures as possible\n\nUsing as few textures as possible is a good strategy, and the reason is simple: Changing the current texture is an expensive operation for the graphics card. Drawing many sprites that use the same texture will yield the best performance.\n\nAdditionally, using a single texture allows you to group static geometry into a single entity (you can only use one texture per draw call), which will be much faster to draw than a set of many entities. Batching static geometry involves other classes and is therefore beyond the scope of this tutorial, for further details see the vertex array tutorial.\n\nTry to keep this in mind when you create your animation sheets or your tilesets: Use as little textures as possible.\n\nUsing sf::Texture with OpenGL code\n\nIf you're using OpenGL rather than the graphics entities of SFML, you can still use sf::Texture as a wrapper around an OpenGL texture object and use it along with the rest of your OpenGL code.\n\nTo bind a sf::Texture for drawing (basically glBindTexture), you call the bind static function:"
    }
}