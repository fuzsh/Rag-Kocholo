{
    "id": "correct_subsidiary_00139_3",
    "rank": 45,
    "data": {
        "url": "https://jcp.org/en/jsr/detail%3Fid%3D240",
        "read_more_link": "",
        "language": "en",
        "title": "The Java Community Process(SM) Program",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/button_go.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/hr_dots1.gif",
            "https://jcp.org/images/hd_find-jsrs.gif",
            "https://jcp.org/images/button_go.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/hd_my-jcp.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/hr_dots1.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/hd_jcp-info.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/ad_banner2.gif",
            "https://jcp.org/images/common/trans.gif",
            "https://jcp.org/images/common/trans.gif",
            "https://jcp.org/images/global/bar_green.gif",
            "https://jcp.org/images/global/bar_green.gif",
            "https://jcp.org/images/global/spacer.gif",
            "https://jcp.org/images/spacer.gif",
            "https://jcp.org/images/common/logo_oracle_footer.gif",
            "https://jcp.org/images/spacer.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "JSRs by Platform\n\nJSRs by Technology\n\nJSRs by Stage\n\nJSRs by Committee\n\nList of All JSRs\n\nUse of JCP site is subject to the JCP Terms of Use and the Oracle Privacy Policy\n\nAbout JCP\n\nProgram Overview\n\nJCP Process Document\n\nCalendar\n\nJCP Members\n\nExecutive Committee\n\nElections\n\nGet Involved\n\nOverview\n\nBecoming a JCP Member\n\nJava in Education\n\nCommunity Resources\n\nOverview\n\nTutorials\n\nJCP Podcasts\n\nSpec Lead Guide\n\nTCK Tool & Info\n\nLicense Reference\n\nCommunity News\n\nNews\n\nPrograms & Awards\n\nPress Releases\n\nSuccess Stories\n\nFAQ\n\nContact Us\n\nJSRs: Java Specification Requests\n\nJSR 240: JAINTM SLEE (JSLEE) v1.1\n\nStage Access Start Finish Final Release Download page 14 Jul, 2008 Final Approval Ballot View results 20 May, 2008 02 Jun, 2008 Proposed Final Draft Download page 24 Aug, 2007 Public Review Ballot View results 20 Feb, 2007 26 Feb, 2007 Public Review Download page 11 Jan, 2007 26 Feb, 2007 Early Draft Review Download page 14 Jan, 2005 13 Feb, 2005 Expert Group Formation 30 Mar, 2004 03 Dec, 2004 JSR Review Ballot View results 16 Mar, 2004 29 Mar, 2004\n\nStatus: Final\n\nJCP version in use: 2.6\n\nJava Specification Participation Agreement version in use: 2.0\n\nDescription:\n\nThis JSR is a logical extension to address gaps in JSLEE v1.0 specification. The central area of focus is to specify the Resource Adaptor Architecture API and semantics.\n\nPlease direct comments on this JSR to the Spec Lead(s)\n\nTeam\n\nSpecification Leads David Ferry Open Cloud Limited Expert Group AePONA Armstrong, Charles AT&T BEA Systems Instituto de Telecomunicacoes Ivov, Emil jNetX Inc. Kapsch Carriercom Lucent Technologies Mobilkom Austria AG Net4Call A.S. NIST Nokia Corporation Nortel NTT Data Corporation O'Neill, Brian Open Cloud Limited Oracle Personeta, Inc. Red Hat Sun Microsystems, Inc. Telecom Italia TrueTel Communications Inc Vodafone Group Services Limited\n\nThe following sections have been updated since the original request.\n\n2.13 Please describe the anticipated schedule for the development of this specification.\n\nJanuary 2005 - Early Draft Review\n\nMarch 2005 - Public Review\n\nMay 2005 - Proposed Final Draft\n\nAugust 2005 - Final Release\n\n2.18 Please provide a description of the business terms for the Specification, RI and TCK that will apply when this JSR is final.\n\nThe specification will be licensed under the standard Sun Community Source License.\n\nThe TCK is licensed by Open Cloud, this license will be a standard Open Cloud Community Source License. The TCK source and binaries will be licensed at no charge, with no support.\n\nOpen Cloud will be licensing the RI, binary only, with no support.\n\nOriginal Java Specification Request (JSR)\n\nIdentification | Request | Contributions | Additional Information\n\nSection 1. Identification\n\nSubmitting Member: Open Cloud and Sun Microsystems, Inc\n\nName of Contact Person: David Ferry, Phelim ODoherty\n\nE-Mail Address: davidf@opencloud.com, phelim.odoherty@sun.com\n\nTelephone Number: +64 4 462 5090, +44 289 036 9158\n\nFax Number: +64 42 169 2866, +44 134 430 0704\n\nSpecification Lead: David Ferry, Phelim ODoherty\n\nE-Mail Address: davidf@opencloud.com, phelim.odoherty@sun.com\n\nTelephone Number: +64 4 462 5090, +44 289 036 9158\n\nFax Number: +64 42 169 2866, +44 134 430 0704\n\nInitial Expert Group Membership:\n\nCingular\n\nNet4Call\n\nNortel\n\nOpen Cloud\n\nSun\n\nVodafone\n\nSupporting this JSR:\n\nCingular\n\nNet4Call\n\nNortel\n\nOpen Cloud\n\nSun\n\nVodafone\n\nSection 2: Request\n\n2.1 Please describe the proposed Specification:\n\nBriefly JSLEE 1.0 specifies the event and programming model, application lifecycle and management for portable communications application. It additionally specifies the management and lifecycle of the JSLEE container itself. The JSLEE expert group deliberately avoided specifying the Resource Adaptor(RA) architecture as it was felt that this was a non-trivial piece of work and would delay the release of JSLEE 1.0.\n\nThe goal of the RA architecture is to allow Resource Adaptor implementations that use and fulfill contracts defined in the JSLEE 1.1 specification to be deployed and run in any compliant JSLEE.\n\nStandardizing the RA architecture for JSLEE will ease the integration of JSLEE based applications into operator networks as a party other than the JSLEE vendor may provide the resource adaptor. For example call control in current mobile networks is delivered by many proprietary signaling protocols, and network specific variations of standardized signalling protocols. Network operators therefore expect significant integration work to be completed before a call control solution is deployed. If the interface between the JSLEE and RA is standardized the responsibility for the network integration could be the Network Operator, the Systems Integrator, the Network Equipment Providor or the JSLEE vendor.\n\nThere are several other enhancements and modifications that are likely to be made to the JSLEE specification in this version, however these are not anticipated to be as large in scope as the RA architecture work. A significant effort will be made to maintain backwards compatibility with JSLEE 1.0.\n\nIt is the intention of the maintenance leads of JSLEE 1.0 and the spec leads of JSLEE 1.1 that the 1.0.x JSLEE version series will provide bugfixes and enhancements that are required prior to the release of JSLEE 1.1, and that any fixes that are made to the JSLEE 1.0.x series specifications will be applied to the JSLEE 1.1 specification.\n\nNote that the proposed timeline below means that the only area for substantial addition to the 1.0 specification is the RA architecture.\n\nIn order to prove that the resource adapter architecture is functional, the expert group will apply it to a selected resource in the RI. Further discussions will be held in the expert group on the working model on how best to handle additional resources.\n\n2.2 What is the target Java platform? (i.e., desktop, server, personal, embedded, card, etc.)\n\nJava 2 Standard Edition (J2SE)\n\n2.3 The Executive Committees would like to ensure JSR submitters think about how their proposed technology relates to all of the Java platform editions. Please provide details here for which platform editions are being targeted by this JSR, and how this JSR has considered the relationship with the other platform editions.\n\nJSLEE is solely targeting the J2SE Platform, therefore has no effect on any other Java Platform.\n\n2.4 Should this JSR be voted on by both Executive Committees?\n\nThis JSR only requires the SE/EE committee to vote on this JSR.\n\n2.5 What need of the Java community will be addressed by the proposed specification?\n\nThe need for communications applications built using JSLEE to be more easily integrated into Network Operators networks.\n\n2.6 Why isn't this need met by existing specifications?\n\nJSLEE 1.0 explicitly left this area undefined for a future release as it is non-trivial.\n\n2.7 Please give a short description of the underlying technology or technologies:\n\nThe underlying technologies include the core J2SE platform. A Resource is typically an entity in a Network Operators network, for example a switch, or message relay, or HLR.\n\n2.8 Is there a proposed package name for the API Specification? (i.e., javapi.something, org.something, etc.)\n\njavax.slee.resource\n\n2.9 Does the proposed specification have any dependencies on specific operating systems, CPUs, or I/O devices that you know of?\n\nNo\n\n2.10 Are there any security issues that cannot be addressed by the current security model?\n\nNo\n\n2.11 Are there any internationalization or localization issues?\n\nNo\n\n2.12 Are there any existing specifications that might be rendered obsolete, deprecated, or in need of revision as a result of this work?\n\nThere is the potential for JCC (JSR 21)and JSIP (JSR 32) to be modified as a result of this work. We are already in discussion with the JCC and JSIP specification leads as to the most appropriate way to ensure that JCC and JSIP will work when wrapped by a Resource Adaptor within JSLEE. Ideally JCC and JSIP would produce maintainance revisions that include any required additional semantics. Please note that in JSLEE 1.0 that RA APIs for JCC and JSIP have been suggested in an appendix, and that the JSLEE RI includes a RA for JCC. We will be reviewing JSR 212 as it is possible that it will be a use-case for Messaging.\n\n2.13 Please describe the anticipated schedule for the development of this specification.\n\nApril 2004 - Initial expert group meeting. Discussion of requirements, review of use cases (JCC, JAIN SIP, SMPP and MM7). Review of how the JSLEE RI supports these use cases with its existing RA architecture.\n\nJuly 2004 - Early Draft Review\n\nAugust 2004 - Comments received from Community Review and modifications to spec.\n\nSeptember 2004 - Public Review\n\nOctober 2004 - Comments received from public review and modifications to spec.\n\nNovember 2004 - Proposed Final Draft.\n\nJan 2005 - Final Release\n\nNOTE that this section has been updated since the original request.\n\n2.14 Please describe the anticipated working model for the Expert Group working on developing this specification.\n\nContinuous email communications, with regular telephone conferences and face-to-face meetings (as needed), which will be teleconferenced.\n\n2.15 It is important to the success of the community and each JSR that the work of the Expert Group be handled in a manner which provides the community and the public with insight into the work the Expert Group is doing, and the decisions that the Expert Group has made. The Executive Committees would like to ensure Spec Leads understand the value of this transparency and ask that each JSR have an operating plan in place for how their JSR will address the involvement of the community and the public. Please provide your plan here, and refer to the Spec Lead Guide for a more detailed description and a set of example questions you may wish to answer in your plan.\n\na) The specification leads will maintain an interest alias for JCP members outside of the Expert Group. The specification leads will publish periodic milestone drafts and status to this list. The Expert Group may also use the list to request feedback on key issues facing the group.\n\nb) The specification leads will on a quarterly basis provide a brief JSR status to the JCP PMO, for publication to the Java community. This will include the current schedule for the JSR and notes on any major events that have occurred in the previous quarter.\n\n2.16 Please describe how the RI and TCK will de delivered, i.e. as part of a profile or platform edition, or stand-alone, or both. Include version information for the profile or platform in your answer.\n\nThe specification will be delivered stand-alone, as was JSLEE 1.0. The RI and TCK will be built upon the JSLEE v1.0 RI and TCK.\n\n2.17 Please state the rationale if previous versions are available stand-alone and you are now proposing in 2.13 to only deliver RI and TCK as part of a profile or platform edition (See sections 1.1.5 and 1.1.6 of the JCP 2 document).\n\nNot Applicable\n\n2.18 Please provide a description of the business terms for the Specification, RI and TCK that will apply when this JSR is final.\n\nNOTE that this information has been updated from this original request.\n\nThe specification will be licensed under the standard Sun Community Source License.\n\nThe TCK is licensed by Open Cloud, this license will be a standard Open Cloud Community Source License. The TCK source and binaries will be licensed at no charge, with no support.\n\nThe RI is licensed by Sun, this license is the standard Sun Community Source License. The RI binaries will be licensed at no charge, with no support.\n\nSection 3: Contributions\n\n3.1 Please list any existing documents, specifications, or implementations that describe the technology. Please include links to the documents if they are publicly available.\n\nThe JSLEE Specification, RI and TCK, see http://jcp.org/en/jsr/detail?id=22.\n\n3.2 Explanation of how these items might be used as a starting point for the work.\n\nThe JSLEE RI includes a resource adaptor architecture that has been used to implement JCC, JSIP and message Resource Adaptors. This API will be used as the starting point for definition of the RA Architecture.\n\nSection 4: Additional Information (Optional)\n\n4.1 This section contains any additional information that the submitting Member wishes to include in the JSR.\n\nIt is possible that the RA architecture section in the JSLEE 1.1 spec will identify general patterns or semantics that are useful for Resource APIs to conform to, thereby aiding the Resource Developer in providing a suitable API for the JSLEE event and programming model."
    }
}