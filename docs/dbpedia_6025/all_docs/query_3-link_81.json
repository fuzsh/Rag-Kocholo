{
    "id": "dbpedia_6025_3",
    "rank": 81,
    "data": {
        "url": "https://github.com/doitsujin/dxvk/releases",
        "read_more_link": "",
        "language": "en",
        "title": "Releases · doitsujin/dxvk",
        "top_image": "https://opengraph.githubassets.com/2081cccf04ea06f4ae2266118483167bd7de21a41cece329878ebef9f5ce1eeb/doitsujin/dxvk",
        "meta_img": "https://opengraph.githubassets.com/2081cccf04ea06f4ae2266118483167bd7de21a41cece329878ebef9f5ce1eeb/doitsujin/dxvk",
        "images": [
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/47954800?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=40&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4",
            "https://avatars.githubusercontent.com/u/25567304?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Vulkan-based implementation of D3D8, 9, 10 and 11 for Linux / Wine - Releases · doitsujin/dxvk",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/doitsujin/dxvk/releases",
        "text": "D3D8 support\n\nD8VK is now part of DXVK, and implements D3D8 largely on top of the existing D3D9 implementation. Please refer to pull request #3411 for further details.\n\nNative WSI changes\n\ndxvk-native now supports multiple window system backends that the application can choose between at runtime. Refer to the corresponding pull request #3738 for details. In addition, proper ABI versioning has been added for native libraries.\n\nNon-native refresh rate emulation\n\nIn environments where the display mode cannot be changed (e.g. Proton), it is possible that DXVK reports a different refresh rate to the game than what the display is currently running at. This is problematic for games that require to be run at 60 FPS but do not limit their frame rate when using a 60 Hz display mode.\n\nTo work around this, the frame rate limiter will now be engaged automatically if a game runs in full-screen mode with vertical synchronization enabled, and if the detected frame rate over a short period of time is higher than the refresh rate of the selected display mode. This also applies to D3D12 when using vkd3d-proton as of commit 80f6c46 or later.\n\nIn case a game runs at a lower rate than expected and does not provide an in-game option to change refresh rate, this behaviour can be disabled by setting d3d9.maxFrameRate = -1 (or the corresponding dxgi option for D3D10+ games). Setting DXVK_FRAME_RATE also overrides this behaviour as usual.\n\nBug fixes and Improvements\n\nFixed various issues with D3D9 fixed-function texture coordinate processing (PR #4015, PR #4026).\n\nFixed pipeline layout compatibility issues when using graphics pipeline libraries, which would cause crashes or rendering issues on AMD's official drivers with pipeline libraries enabled.\n\nIf supported, VK_NV_descriptor_pool_overallocation will now be used to potentially save small quantities of descriptor memory.\n\nImproved descriptor pool management in general to save memory in case a game renders without ever presenting to the screen.\n\nImproved video processor blit functionality (PR #3970 PR #3984)\n\nImproved compatibility to third-party mods hooking various DXGI entry points (PR #3966, #3968).\n\nBattlefield 2, 2142: Work around hang on alt+tab (PR #4109).\n\nDead Space 2: Work around issues caused by the game's Vsync implementation (PR #4071).\n\nDragonshard: Work around performance issues (PR #4079).\n\nFallout 4: Work around an issue with the game locking itself to 45 FPS on Steam Deck OLED.\n\nFallout New Vegas: Fix rendering issues when using certain mods (PR #4079).\n\nGhostbusters Remastered: Work around flickering character faces (#4045, PR #4046).\n\nGothic 3: Fix shadow rendering issues caused by incorrectly reported format support (#3980, PR #3991).\n\nGuild Wars 2: Work around a flickering issue (PR #3992).\n\nPrototype: Work around broken shadow rendering if the game detects an AMD or Intel GPU (#4008, PR #4011).\n\nStar Citizen: Work around an issue with the game's UMD version check (PR #3985).\n\nThe Sims 2: Work around low CPU-bound performance in some situations.\n\nTomb Raider Legend: Work around flickering character issues (PR #4105).\n\nRed Faction Guerrila Remastered: Work around sky box rendering issues (#3696, PR #3972).\n\nRise of Nations: Work around crash on alt+tab (PR #4117).\n\nWatch Dogs, Watch Dogs 2: Work around flickering character issues (PR #4059, PR #4090).\n\nWRC 4: Enable 60 FPS limit to work around audio issues (PR #4099).\n\nPresentation improvements\n\nIf VK_KHR_present_wait is supported, and if vertical synchronization is enabled, frame latency events will now be signaled when an image is actually being presented, rather than when rendering work prior to the present request has completed on the GPU. This may reduce input latency in some games, also affects the dxgi.maxFrameLatency and d3d9.maxFrameLatency options.\n\nThis functionality is also used to more accurately report the number of frames actually presented via DXGI frame statistics.\n\nNote: On some platforms and compositors, Vulkan present events may not correspond to the image actually being presented on screen, in which case frame latency is going to remain higher than expected.\n\nAdditionally, if VK_EXT_swapchain_maintenance1 is supported, enabling and disabling vertical synchronization may no longe require recreating the Vulkan swap chain, which works around severe performance issues in games which change their present interval on a per-frame basis.\n\nNote: On Linux, this is currently only supported when running Gamescope with ENABLE_GAMESCOPE_WSI=1 set.\n\nConfiguration changes\n\nThe dxgi.nvapiHack config option was deprecated, and a new option dxgi.hideNvidiaGpu with a slight change in behaviour was added instead, alongside similar options for AMD and Intel GPUs. This allows implementing more targeted application workarounds for issues with e.g. XESS libraries in the future if necessary. Refer to the example configuration for more details.\n\nNote: The old dxgi.nvapiHack option still works if dxgi.hideNvidiaGpu is not set, but will be removed in a future release.\n\nAdditionally, the dxgi.tearFree and d3d9.tearFree options were consolidated into a new dxvk.tearFree option, due to changes in the presentation logic. The old options were removed.\n\nBug fixes and Improvements\n\nConfiguration options can now be specified via an environment variable, DXVK_CONFIG. See the README for details (PR #3581).\n\nIf VK_EXT_depth_bias_control is supported, depth bias scaling will now be correct in most situations. This fixes shadow rendering artifacts in various D3D9 games and is especially important on GPUs that do not support 24-bit depth formats. This affects games such as F.E.A.R. (#1461), Far Cry 2 (#2941) and Assassin's Creed Brotherhood (#2642).\n\nIf VK_EXT_line_rasterization and its relevant features are supported, smooth or rectangular lines will now be used if requested by the application. This functionality is generally not used by games, but may be useful for applications such as level editors.\n\nIf VK_KHR_maintenance5 is supported, DXGI_FORMAT_A8_UNORM images will now use the corresponding Vulkan format.\n\nD3D9 command submission now works the same way as it does for D3D11, which will lead to more submissions but generally reduces resource readback latency. This may improve performance in games that frequently synchronize with the GPU.\n\nFixed a minor issue with D3D9 feedback loop tracking.\n\nFixed a minor issue with D3D11 stream output (#3634).\n\nFixed a bug and performance issues with the implementation of D3D11 tiled resources.\n\nFixed various issues with reporting HDR metadata.\n\nFixed a crash when compiling D3D9 shaders generated by the vkd3d HLSL compiler. (PR #3616)\n\nImplemented keyed mutex synchronization on top of newly added winevulkan functionality (PR #3601, PR #3635).\n\nNote: This will only work with recent Proton builds.\n\nAdded stubs for various D3D9On12 interop interfaces. This is needed for Train Simulator Classic (#3445).\n\nAdded an interface to allow external libraries, such as NVAPI, to enable HDR in various D3D11 games as well as Elden Ring (PR #3625).\n\nNote: This will only work in combination with jp7677/dxvk-nvapi@c3a1c48 or newer. This will not work on Windows.\n\nA Total War Saga: TROY: Fixed trees not rendering when MSAA is enabled.\n\nFar Cry 2: Fixed crash when using D3D10.\n\nHalo Online: Fixed water rendering. (#3594, PR: #3627)\n\nLara Croft and the Temple of Osiris: Fixed deadlock when using Exclusive Fullscreen (#3458).\n\nRaceRoom Racing Experience: Fixed a crash when starting a race. (#3386, PR: #3389)\n\nSpider Man: Shattered Dimensions: Fixed a regression that caused blocky shadows. (#3593, PR: #3624)\n\nTest Drive Unlimited 2: Fixed shadows on grass. (#3469, PR: #3471)\n\nThe Sims 2: Fixed a regression in DXVK 2.2 that affected terrain rendering. (#3474, PR: #3476)\n\nTitanfall: Fixed a crash caused by a miscompiled shader.\n\nTomb Raider Anniversary: Improved performance. (#3438, PR: #3439)\n\nHDR support\n\nOn systems supporting HDR10 color spaces, HDR can now be enabled by setting the environment variable DXVK_HDR=1, or by setting the option dxgi.enableHDR = True in the configuration file. When using vkd3d-proton 2.8 or newer, this will allow D3D12 games to detect and use the HDR10 color space if they support it.\n\nNo major Linux desktop environment currently supports HDR. In order to use this on Linux, a Gamescope session with --hdr-enabled is required. This is currently only supported under AMDGPU and requires kernel patches from the josh-hdr-colorimetry branch.\n\nNote: D3D11 support is implemented, but not expected to work in most games as they typically require AMDAGS or NVAPI to set up HDR output, rather than using the corresponding DXGI APIs. Additionally, only Nvidia drivers are expected to work on Windows.\n\nShader compilation improvements\n\nUse of pipeline libraries was extended to pipelines with tessellation or geometry shaders in order to further reduce stutter. Additionally, more features of the VK_EXT_extended_dynamic_state3 extension are leveraged to reduce stutter in some situations when MSAA is used, provided that the Vulkan driver supports them.\n\nNote: Current development builds of RADV will expose VK_EXT_graphics_pipeline_library with the features that DXVK needs if the RADV_PERFTEST=gpl environment variable is set. Note that the implementation is not yet complete and does not support shader caching at this time, but it should generally work with DXVK.\n\nSample rate shading\n\nFor older games that support MSAA, the d3d9.forceSampleRateShading and d3d11.forceSampleRateShading options were added to let users enable sample rate shading for all shaders. This will have a very high impact on GPU-bound performance, but may increase overall image quality in certain games that suffer from specular aliasing or shimmering alpha-tested geometry.\n\nNote: Games that resolve the rendered images inadequately (e.g. performing a linear resolve on HDR render targets) will likely not benefit from this option.\n\nGLFW backend\n\nFor native Linux builds of DXVK, a GLFW backend was added as a compile-time alternative to the existing SDL2 backend. See PR #3111 for details.\n\nBug fixes and Improvements\n\nImproved D3D11 command submission logic in order to make overall performance more consistent, and to bring DXVK's behaviour more in line with native D3D11 drivers.\n\nFixed D3D11 reference counting issues around 2D textures. (#3169)\n\nFixed Vulkan validation errors when creating DXGI_FORMAT_A8_UNORM UAVs. Note that UAVs of this format may not work as expected.\n\nFixed Vulkan validation errors that would occur when allocating dedicated image memory on Nvidia GPUs in some situations.\n\nFixed Vulkan validation errors caused by broken timeline semaphores on 32-bit Proton.\n\nWorked around an issue with the Uplay overlay being stuck on screen. (#3146)\n\nNote that this fix does not apply to Windows as it was achieved by loading winevulkan.dll directly instead of the actual Vulkan loader.\n\nNote that this change will break Red Dead Redemption 2 with dxvk-nvapi prior to this commit: jp7677/dxvk-nvapi@ac00a42\n\nWorked around a bug in AMD's Windows driver as well as AMDVLK that would cause numerous games to crash since DXVK 2.0. (#3172)\n\nFewer threads will be used to perform background optimization of graphics pipeines. This may result in a smoother gameplay experience on some systems. Note that this change does not affect initial shader compiling, as finishing that quickly is crucial to avoid stutter.\n\nThe state cache file will now only be created when the first pipeline is written to it, in order to avoid empty cache files.\n\nThis change mostly affects D3D9 games on systems with EXT_graphics_pipeline_library support.\n\nAshes of the Singularity: Fixed performance regression caused by suboptimal descriptor set allocation.\n\nBattlefield: Bad Company 2: Fixed flickering (#3078, PR #3079)\n\nCardfight!! Vanguard: Fixed rendering (PR #3068).\n\nGujian 3: Fixed rendering issues on some GPUs. (#1784)\n\nResident Evil 4 HD: Fixed invalid Vulkan usage causing a GPU hang on RADV. (PR #3089)\n\nSaints Row: The Third: Fixed a severe performance issue with rain when using the D3D9 renderer. (#2473, PR #3158)\n\nSekiro: Shadows Die Twice: Fixed stuttering issues on Nvidia GPUs. (#3179)\n\nSonic Frontiers: Worked around a game bug that would cause shadows to flicker when GPU-bound.\n\nSupreme Commander: Forged Alliance: Fixed a crash after loading (#3058, PR #3060)\n\nNote: The setup script setup_dxvk.sh was no longer deemed useful and got removed. This change will only affect users who manually install DXVK into a wine prefix, rather than using it through Proton or Lutris.\n\nNote: Due to changes to our DXGI implementation, older versions of vkd3d-proton (prior to 2.8) will no longer work with this version of DXVK.\n\nDriver compatibility\n\nA Vulkan 1.3 capable driver and wine version are required to run this version of DXVK. See the driver support page for details.\n\nMany features in this release, especially the shader compilation changes detailed below, require the use of modern Vulkan features, such as Dynamic Rendering, Extended Dynamic State, and Null Descriptors. Due to the significant changes required to make use of them, it was no longer practical to maintain and test code paths for older drivers which do not support these features.\n\nIn practice, any system capable of running D3D11 and D3D12 games using Proton Experimental right now will be able to run DXVK 2.0.\n\nNote: Third-party Vulkan layers that were not updated for Vulkan 1.3 will no longer work.\n\nD3D9 changes\n\nMemory management improvements\n\nIn order to reduce the likelihood of running out of address space in 32-bit D3D9 games, DXVK will now use memory-mapped files to store shadow copies of textures. This allows us to unmap memory that is not being used by the game, thus freeing up significant amounts of address space, up to several hundred Megabytes. See PR #2663 for implementation details.\n\nNote: This change does not affect 64-bit games since address space is not a concern there. It also does not affect D3D10 or D3D11 since resource uploads work differently in those APIs and are much more memory efficient.\n\nRender target feedback loops\n\nOn drivers which support VK_EXT_attachment_feedback_loop_layout, reading from an active render target in D3D9 games is now properly supported, which previously caused rendering artifacts on newer AMD hardware and required driver-level workarounds. This affects a number of games, including GTA IV.\n\nAlpha test improvements\n\nThe D3D9 alpha test implementation was changed to more closely match the behaviour of Nvidia's implementation, which fixes inaccuracies in various games. The d3d9.alphaTestWiggleRoom option was removed, and games that previously required this option should now work correctly by default.\n\nD3D10 changes\n\nDXVK previously shipped incomplete implementations of d3d10.dll and d3d10_1.dll, but has not installed them by default since Version 1.6 since wine's implementation provides more features that are needed for D3D10 games to run, including the D3D10 Effects framework.\n\nSince our implementation is incomplete and has not been used by Proton or Lutris for a very long time, DXVK will no longer ship these DLLs starting with this release. The D3D10 API itself is still supported via d3d10core.dll.\n\nD3D11 changes\n\nFeature support\n\nDXVK now exposes D3D11 Feature Level 12_1 with the following newly added features:\n\nTiled Resources up to Tier 3, provided that the corresponding Vulkan sparse binding and sparse residency features are supported\n\nConservative Rasterization up to Tier 3, provided that the corresponding Vulkan conservative rasterization features are supported.\n\nRasterizer Ordered Views, provided that the corresponding Vulkan fragment shader interlock features are supported.\n\nWhile no games are known to use these features directly in D3D11, some games and game launchers rely on feature support being consistent between D3D11 and D3D12 in order to allow users to enable D3D12 in the game options. While our implementation of these feature is generally functional, there may be bugs or performance issues in case a game does use them.\n\nFurthermore, DXVK now supports the D3D11_FEATURE_SHADER_CACHE and D3D11_FEATURE_D3D11_OPTIONS5 feature queries.\n\nNote: AMD Vulkan drivers do currently not support fragment shader interlock and are limited to feature level 12_0.\n\nNote: Intel's ANV driver currently does not support the corresponding Vulkan features and is therefore limited to feature level 11_1. This applies to both DXVK and vkd3d-proton.\n\nDevice contexts\n\nThe implementations of ID3D11DeviceContext were refactored so that immediate contexts and deferred contexts no longer use common entry points. This is closer to Windows behaviour and may improve compatibility to third-party libraries and mods that hook into the D3D11 immediate context specifically, and reduces CPU overhead since some frequently used code paths are now more specialized for each context type.\n\nState clear and restore methods were optimized to further reduce CPU overhead in games that heavily use deferred contexts, e.g. Assassin's Creed: Origins, or explicitly call ClearState frequently, e.g. God of War.\n\nShader compilation changes\n\nOn drivers which support VK_EXT_graphics_pipeline_library, including the IndependentInterpolationDecoration feature, Vulkan shaders will now be compiled at the time the game loads its D3D shaders, rather than at draw time. This reduces or eliminates shader compile stutter in many games.\n\nIn games that load their shaders during loading screens or in the menu, this can lead to prolonged periods of very high CPU utilization, especially on weaker CPUs. For affected games it is recommended to wait for shader compilation to finish before starting the game to avoid stutter and low performance. Shader compiler activity can be monitored with DXVK_HUD=compiler.\n\nNote: The relevant Vulkan features are currently only supported by Nvidia drivers (version 520.56.06 or later). Driver support is expected to improve in the future.\n\nState cache interactions\n\nThis feature largely replaces the state cache. If the given Vulkan features are supported, only pipelines that cannot use the pipeline library feature (e.g. pipelines using tessellation shaders) will be written to and read from the state cache, so newly created state cache files will typically only contain a few dozen to a few hundred pipelines, as opposed to thousands or tens of thousands. If the graphics pipeline library feature is not supported, the state cache will be used the same way as it was in older DXVK versions.\n\nNote: State cache files created with DXVK versions prior to 1.4.3 can no longer be used.\n\nNote: Despite our efforts, due to the significant changes under the hood, there may be issues when using an older state cache file under some circumstances. If you experience crashes, please test if the game runs with a clean cache file (DXVK_STATE_CACHE=reset) before reporting a bug.\n\nCaveats\n\nGames which only load their D3D shaders at draw time (e.g. Witcher 3, most Unreal Engine games) will still exhibit some stutter, although it should still be less severe than without this feature.\n\nFor 32-bit games, the implementation tries to aggressively free Vulkan pipelines in order to save memory. This may cause stutter if the driver's on-disk shader cache is not working properly.\n\nOn Nvidia drivers, the on-disk shader cache will be significantly larger than with previous versions of DXVK. It may be necessary to bypass the size limit by setting the environment variable __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1, or setting a new limit manually via __GL_SHADER_DISK_CACHE_SIZE (in bytes).\n\nLinux build support\n\nWork from dxvk-native has been upstreamed in order to facilitate native Linux builds of DXVK, which can be used as a drop-in replacement to port D3D applications without having to change rendering code.\n\nNote: When porting a D3D11 application, please refer to the Feature support and Developer Guidelines pages on the Wiki to avoid hitting unsupported or slow code paths in DXVK.\n\nRepository changes\n\nAs part of cleaning up the repository, test applications that were of limited usefulness, as well as our custom d3dcompiler frontends, have been moved to the new dxvk-tests repository.\n\nVulkan and SPIR-V headers are now pulled in as submodules from the original repositories. This changes how the repository needs to be cloned and updated, or otherwise building DXVK will fail:\n\ngit clone --recursive https://github.com/doitsujin/dxvk.git # Run the following command to make git pull # automatically pull in submodule updates cd dxvk git config submodule.recurse true\n\nThe project wiki was also updated and expanded to be more useful.\n\nBug fixes and Improvements\n\nImproved behaviour of DXGI waitable swap chains.\n\nImproved implementation of DXGI frame statistics.\n\nNote: The implementation is still not accurate, especially in scenarios with multiple displays or if variable refresh rate is used.\n\nRemoved limitations on how many resources can be bound at the same time.\n\nRemoved several workarounds for specific Vulkan drivers or driver versions. This is primarily relevant for Steam's shader pre-caching, as the generated shader code no longer diverges as much depending on the driver version and supported feature set.\n\nD3D11 shaders now use the Vulkan memory model in order to more accurately implement UAV coherency rules in compute shaders.\n\nFixed various issuses with the D3D11.3 WriteToSubresource and ReadFromSubresource methods.\n\nFixed various float emulation issues in D3D9 applications.\n\nFixed seamless cube map filtering in D3D9 applications (PR #2889).\n\nFixed issues when rendering to DXGI_FORMAT_A8_UNORM (D3D11) or D3DFMT_A8 (D3D9) render targets with blending enabled.\n\nFixed a bug with dual-source blending when multiple render targets are bound, which could lead to unpredictable results. This affects Elex 2 and potentially other games.\n\nFixed memory allocation logic on Intel integrated graphics.\n\nChanged behaviour of the DXVK_STATE_CACHE environment vari..."
    }
}