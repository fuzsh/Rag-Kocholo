{
    "id": "dbpedia_2879_3",
    "rank": 38,
    "data": {
        "url": "https://realpython.com/top-python-game-engines/",
        "read_more_link": "",
        "language": "en",
        "title": "Top Python Game Engines â€“ Real Python",
        "top_image": "https://files.realpython.com/media/Top-Python-Game-Engines_Watermarked.4f4397cde117.jpg",
        "meta_img": "https://files.realpython.com/media/Top-Python-Game-Engines_Watermarked.4f4397cde117.jpg",
        "images": [
            "https://realpython.com/static/real-python-logo.893c30edea53.svg",
            "https://realpython.com/static/pytrick-dict-merge.4201a0125a5e.png",
            "https://files.realpython.com/media/Top-Python-Game-Engines_Watermarked.4f4397cde117.jpg",
            "https://files.realpython.com/media/pygame-basic.bbd1d3e0d9ea.png",
            "https://files.realpython.com/media/pygame-game.94ec6e22001e.png",
            "https://files.realpython.com/media/pgzero-basic.03f85e5f089c.png",
            "https://files.realpython.com/media/pgzero-game.9b11812969b5.png",
            "https://files.realpython.com/media/arcade-basic.1b3f1f033717.png",
            "https://files.realpython.com/media/arcade-game.86aef9b5a501.png",
            "https://files.realpython.com/media/adventurelib_screenshot.776d25728ac7.png",
            "https://files.realpython.com/media/adventurelib_screenshot_2.da4c6a432924.png",
            "https://files.realpython.com/media/adventurelib-map.64ff7cbdea90.png",
            "https://files.realpython.com/media/adventurelib_screenshot_3.fb864208a1f9.png",
            "https://files.realpython.com/media/renpy-launcher.fda3bd695f70.png",
            "https://files.realpython.com/media/renpy-basic.c467db0e49e5.png",
            "https://files.realpython.com/media/renpy-blacksmith.2c5137b779d4.png",
            "https://files.realpython.com/media/renpy-giant-fight.7fe536c52775.png",
            "https://realpython.com/static/pytrick-dict-merge.4201a0125a5e.png",
            "https://realpython.com/cdn-cgi/image/width=336,height=336,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg",
            "https://realpython.com/cdn-cgi/image/width=336,height=336,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg",
            "https://realpython.com/cdn-cgi/image/width=959,height=959,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg",
            "https://realpython.com/cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/me-small.f5f49f1c48e1.jpg",
            "https://realpython.com/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg",
            "https://realpython.com/cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg",
            "https://realpython.com/cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/phi5_2.0e61b4c66f6b.jpg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://files.realpython.com/media/Top-Python-Game-Engines_Watermarked.4f4397cde117.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Real Python"
        ],
        "publish_date": "2022-05-04T14:00:00+00:00",
        "summary": "",
        "meta_description": "In this tutorial, you'll explore several Python game engines available to you. For each, you'll code simple examples and a more advanced game to learn the game engine's strengths and weaknesses.",
        "meta_lang": "en",
        "meta_favicon": "/static/favicon.68cbf4197b0c.png",
        "meta_site_name": "",
        "canonical_link": "https://realpython.com/top-python-game-engines/",
        "text": "1\"\"\" 2Basic \"Hello, World!\" program in adventurelib 3 4This program is designed to demonstrate the basic capabilities 5of adventurelib. It will: 6- Create a basic three-room world 7- Add a single inventory item 8- Require that inventory item to move to the final room 9\"\"\" 10 11# Import the library contents 12import adventurelib as adv 13 14# Define your rooms 15bedroom = adv.Room( 16\"\"\" 17You are in your bedroom. The bed is unmade, but otherwise 18it's clean. Your dresser is in the corner, and a desk is 19under the window. 20\"\"\" 21) 22 23living_room = adv.Room( 24\"\"\" 25The living room stands bright and empty. The TV is off, 26and the sun shines brightly through the curtains. 27\"\"\" 28) 29 30front_porch = adv.Room( 31\"\"\" 32The creaky boards of your front porch welcome you as an 33old friend. Your front door mat reads 'Welcome'. 34\"\"\" 35) 36 37# Define the connections between the rooms 38bedroom.south = living_room 39living_room.east = front_porch 40 41# Define a constraint to move from the bedroom to the living room 42# If the door between the living room and front porch door is locked, 43# you can't exit 44living_room.locked = {\"east\": True} 45 46# None of the other rooms have any locked doors 47bedroom.locked = dict() 48front_porch.locked = dict() 49 50# Set the starting room as the current room 51current_room = bedroom 52 53# Define functions to use items 54def unlock_living_room(current_room): 55 56 if current_room == living_room: 57 print(\"You unlock the door.\") 58 current_room.locked[\"east\"] = False 59 else: 60 print(\"There is nothing to unlock here.\") 61 62# Create your items 63key = adv.Item(\"a front door key\", \"key\") 64key.use_item = unlock_living_room 65 66# Create empty Bags for room contents 67bedroom.contents = adv.Bag() 68living_room.contents = adv.Bag() 69front_porch.contents = adv.Bag() 70 71# Put the key in the bedroom 72bedroom.contents.add(key) 73 74# Set up your current empty inventory 75inventory = adv.Bag() 76 77# Define your movement commands 78@adv.when(\"go DIRECTION\") 79@adv.when(\"north\", direction=\"north\") 80@adv.when(\"south\", direction=\"south\") 81@adv.when(\"east\", direction=\"east\") 82@adv.when(\"west\", direction=\"west\") 83@adv.when(\"n\", direction=\"north\") 84@adv.when(\"s\", direction=\"south\") 85@adv.when(\"e\", direction=\"east\") 86@adv.when(\"w\", direction=\"west\") 87def go(direction: str): 88\"\"\"Processes your moving direction 89 90 Arguments: 91 direction {str} -- which direction does the player want to move 92 \"\"\" 93 94 # What is your current room? 95 global current_room 96 97 # Is there an exit in that direction? 98 next_room = current_room.exit(direction) 99 if next_room: 100 # Is the door locked? 101 if direction in current_room.locked and current_room.locked[direction]: 102 print(f\"You can't go {direction} --- the door is locked.\") 103 else: 104 current_room = next_room 105 print(f\"You go {direction}.\") 106 look() 107 108 # No exit that way 109 else: 110 print(f\"You can't go {direction}.\") 111 112# How do you look at the room? 113@adv.when(\"look\") 114def look(): 115\"\"\"Looks at the current room\"\"\" 116 117 # Describe the room 118 adv.say(current_room) 119 120 # List the contents 121 for item in current_room.contents: 122 print(f\"There is {item} here.\") 123 124 # List the exits 125 print(f\"The following exits are present: {current_room.exits()}\") 126 127# How do you look at items? 128@adv.when(\"look at ITEM\") 129@adv.when(\"inspect ITEM\") 130def look_at(item: str): 131 132 # Check if the item is in your inventory or not 133 obj = inventory.find(item) 134 if not obj: 135 print(f\"You don't have {item}.\") 136 else: 137 print(f\"It's an {obj}.\") 138 139# How do you pick up items? 140@adv.when(\"take ITEM\") 141@adv.when(\"get ITEM\") 142@adv.when(\"pickup ITEM\") 143def get(item: str): 144\"\"\"Get the item if it exists 145 146 Arguments: 147 item {str} -- The name of the item to get 148 \"\"\" 149 global current_room 150 151 obj = current_room.contents.take(item) 152 if not obj: 153 print(f\"There is no {item} here.\") 154 else: 155 print(f\"You now have {item}.\") 156 inventory.add(obj) 157 158# How do you use an item? 159@adv.when(\"unlock door\", item=\"key\") 160@adv.when(\"use ITEM\") 161def use(item: str): 162\"\"\"Use an item, consumes it if used 163 164 Arguments: 165 item {str} -- Which item to use 166 \"\"\" 167 168 # First, do you have the item? 169 obj = inventory.take(item) 170 if not obj: 171 print(f\"You don't have {item}\") 172 173 # Try to use the item 174 else: 175 obj.use_item(current_room) 176 177if __name__ == \"__main__\": 178 # Look at the starting room 179 look() 180 181 adv.start()\n\n1\"\"\" 2Complete game written in adventurelib 3 4This program is designed to demonstrate the capabilities 5of adventurelib. It will: 6- Create a large world in which to wander 7- Contain several inventory items 8- Set contexts for moving from one area to another 9- Require some puzzle-solving skills 10\"\"\" 11 12# Import the library contents 13# from adventurelib import * 14import adventurelib as adv 15 16# Import your rooms, which imports your items and characters 17import adventurelib_game_rooms 18 19import adventurelib_game_items 20 21# For your battle sequence 22from random import randint 23 24# To allow you to exit the game 25import sys 26 27# Set the first room 28current_room = adventurelib_game_rooms.home 29current_room.visited = False 30 31# How many HP do you have? 32hit_points = 20 33 34# How many HP does the giant have? 35giant_hit_points = 50 36 37# Your current inventory 38inventory = adv.Bag() 39 40# Some basic item commands 41@adv.when(\"inventory\") 42@adv.when(\"inv\") 43@adv.when(\"i\") 44def list_inventory(): 45 if inventory: 46 print(\"You have the following items:\") 47 for item in inventory: 48 print(f\" - {item.description}\") 49 else: 50 print(\"You have nothing in your inventory.\") 51 52@adv.when(\"look at ITEM\") 53def look_at(item: str): 54\"\"\"Prints a short description of an item if it is either: 55 1. in the current room, or 56 2. in our inventory 57 58 Arguments: 59 item {str} -- the item to look at 60 \"\"\" 61 62 global inventory, current_room 63 64 # Check if the item is in the room 65 obj = current_room.items.find(item) 66 if not obj: 67 # Check if the item is in your inventory 68 obj = inventory.find(item) 69 if not obj: 70 print(f\"I can't find {item} anywhere.\") 71 else: 72 print(f\"You have {item}.\") 73 else: 74 print(f\"You see {item}.\") 75 76@adv.when(\"describe ITEM\") 77def describe(item: str): 78\"\"\"Prints a description of an item if it is either: 79 1. in the current room, or 80 2. in your inventory 81 82 Arguments: 83 item {str} -- the item to look at 84 \"\"\" 85 86 global inventory, current_room 87 88 # Check if the item is in the room 89 obj = current_room.items.find(item) 90 if not obj: 91 # Check if the item is in your inventory 92 obj = inventory.find(item) 93 if not obj: 94 print(f\"I can't find {item} anywhere.\") 95 else: 96 print(f\"You have {obj.description}.\") 97 else: 98 print(f\"You see {obj.description}.\") 99 100@adv.when(\"take ITEM\") 101@adv.when(\"get ITEM\") 102@adv.when(\"pickup ITEM\") 103@adv.when(\"pick up ITEM\") 104@adv.when(\"grab ITEM\") 105def take_item(item: str): 106 global current_room 107 108 obj = current_room.items.take(item) 109 if not obj: 110 print(f\"I don't see {item} here.\") 111 else: 112 print(f\"You now have {obj.description}.\") 113 inventory.add(obj) 114 115@adv.when(\"eat ITEM\") 116def eat(item: str): 117 global inventory 118 119 # Make sure you have the thing first 120 obj = inventory.find(item) 121 122 # Do you have this thing? 123 if not obj: 124 print(f\"You don't have {item}.\") 125 126 # Is it edible? 127 elif obj.edible: 128 print(f\"You savor every bite of {obj.description}.\") 129 inventory.take(item) 130 131 else: 132 print(f\"How do you propose we eat {obj.description}?\") 133 134@adv.when(\"wear ITEM\") 135@adv.when(\"put on ITEM\") 136def wear(item: str): 137 global inventory 138 139 # Make sure you have the thing first 140 obj = inventory.find(item) 141 142 # Do you have this thing? 143 if not obj: 144 print(f\"You don't have {item}.\") 145 146 # Is it wearable? 147 elif obj.wearable: 148 print(f\"The {obj.description} makes a wonderful fashion statement!\") 149 150 else: 151 print( 152 f\"\"\"This is no time for avant garde fashion choices! 153 Wear a {obj.description}? Really?\"\"\" 154 ) 155 156# Some character-specific commands 157@adv.when(\"talk to CHARACTER\") 158def talk_to(character: str): 159 global current_room 160 161 char = current_room.characters.find(character) 162 163 # Is the character there? 164 if not char: 165 print(f\"Sorry, I can't find {character}.\") 166 167 # It's a character who is there 168 else: 169 # Set the context, and start the encounter 170 adv.set_context(char.context) 171 adv.say(char.greeting) 172 173@adv.when(\"yes\", context=\"elder\") 174def yes_elder(): 175 global current_room 176 177 adv.say( 178\"\"\" 179 It is not often one of our number leaves, and rarer still if they leave 180 to defend our Home. Go with our blessing, and our hope for a successful 181 journey and speedy return. To help, we bestow three gifts. 182 183 The first is one of knowledge. There is a blacksmith in one of the 184 neighboring villages. You may find help there. 185 186 Second, seek a wizard who lives as a hermit, who may be persuaded to 187 give aid. Be wary, though! The wizard does not give away his aid for 188 free. As he tests you, remember always where you started your journey. 189 190 Lastly, we don't know what dangers you may face. We are peaceful people, 191 but do not wish you to go into the world undefended. Take this meager 192 offering, and use it well! 193 \"\"\" 194 ) 195 inventory.add(adventurelib_game_items.wooden_sword) 196 current_room.locked_exits[\"south\"] = False 197 198@adv.when(\"thank you\", context=\"elder\") 199@adv.when(\"thanks\", context=\"elder\") 200def thank_elder(): 201 adv.say(\"It is we who should thank you. Go with our love and hopes!\") 202 203@adv.when(\"yes\", context=\"blacksmith\") 204def yes_blacksmith(): 205 global current_room 206 207 adv.say( 208\"\"\" 209 I can see you've not a lot of money. Usually, everything here 210 if pretty expensive, but I just might have something... 211 212 There's this steel sword here, if you want it. Don't worry --- it 213 doesn't cost anything! It was dropped off for repair a few weeks 214 ago, but the person never came back for it. It's clean, sharp, 215 well-oiled, and will do a lot more damage than that 216 fancy sword-shaped club you've got. I need it gone to clear some room. 217 218 If you want, we could trade even up --- the wooden sword for the 219 steel one. I can use yours for fire-starter. Deal? 220 \"\"\" 221 ) 222 adv.set_context(\"blacksmith.trade\") 223 224@adv.when(\"yes\", context=\"blacksmith.trade\") 225def trade_swords_yes(): 226 print(\"Great!\") 227 inventory.take(\"wooden sword\") 228 inventory.add(adventurelib_game_items.steel_sword) 229 230@adv.when(\"no\", context=\"blacksmith.trade\") 231def trade_swords_no(): 232 print(\"Well, that's all I have within your budget. Good luck!\") 233 adv.set_context(None) 234 235@adv.when(\"yes\", context=\"wizard\") 236def yes_wizard(): 237 global current_room 238 239 adv.say( 240\"\"\" 241 I can make your weapon more powerful than it is, but only if 242 you can answer my riddle: 243 244 What has one head... 245 One foot... 246 But four legs? 247 \"\"\" 248 ) 249 250 adv.set_context(\"wizard.riddle\") 251 252@adv.when(\"bed\", context=\"wizard.riddle\") 253@adv.when(\"a bed\", context=\"wizard.riddle\") 254def answer_riddle(): 255 adv.say(\"You are smarter than you believe yourself to be! Behold!\") 256 257 obj = inventory.find(\"sword\") 258 obj.bonus = 2 259 obj.description += \", which glows with eldritch light\" 260 261 adv.set_context(None) 262 current_room.locked_exits[\"west\"] = False 263 264@adv.when(\"fight CHARACTER\", context=\"giant\") 265def fight_giant(character: str): 266 267 global giant_hit_points, hit_points 268 269 sword = inventory.find(\"sword\") 270 271 # The player gets a swing 272 player_attack = randint(1, sword.damage + 1) + sword.bonus 273 print(f\"You swing your {sword}, doing {player_attack} damage!\") 274 giant_hit_points -= player_attack 275 276 # Is the giant dead? 277 if giant_hit_points <= 0: 278 end_game(victory=True) 279 280 print_giant_condition() 281 print() 282 283 # Then the giant tries 284 giant_attack = randint(0, 5) 285 if giant_attack == 0: 286 print(\"The giant's arm whistles harmlessly over your head!\") 287 else: 288 print( 289 f\"\"\" 290 The giant swings his mighty fist, 291 and does {giant_attack} damage! 292 \"\"\" 293 ) 294 hit_points -= giant_attack 295 296 # Is the player dead? 297 if hit_points <= 0: 298 end_game(victory=False) 299 300 print_player_condition() 301 print() 302 303def print_giant_condition(): 304 305 if giant_hit_points < 10: 306 print(\"The giant staggers, his eyes unfocused.\") 307 elif giant_hit_points < 20: 308 print(\"The giant's steps become more unsteady.\") 309 elif giant_hit_points < 30: 310 print(\"The giant sweats and wipes the blood from his brow.\") 311 elif giant_hit_points < 40: 312 print(\"The giant snorts and grits his teeth against the pain.\") 313 else: 314 print(\"The giant smiles and readies himself for the attack.\") 315 316def print_player_condition(): 317 318 if hit_points < 4: 319 print(\"Your eyes lose focus on the giant as you sway unsteadily.\") 320 elif hit_points < 8: 321 print( 322\"\"\" 323 Your footing becomes less steady 324 as you swing your sword sloppily. 325 \"\"\" 326 ) 327 elif hit_points < 12: 328 print( 329\"\"\" 330 Blood mixes with sweat on your face 331 as you wipe it from your eyes. 332 \"\"\" 333 ) 334 elif hit_points < 16: 335 print(\"You bite down as the pain begins to make itself felt.\") 336 else: 337 print(\"You charge into the fray valiantly!\") 338 339def end_game(victory: bool): 340 if victory: 341 adv.say( 342\"\"\" 343 The giant falls to his knees as the last of his strength flees 344 his body. He takes one final swing at you, which you dodge easily. 345 His momentum carries him forward, and he lands face down in the dirt. 346 His final breath escapes his lips as he succumbs to your attack. 347 348 You are victorious! Your name will be sung for generations! 349 \"\"\" 350 ) 351 352 else: 353 adv.say( 354\"\"\" 355 The giant's mighty fist connects with your head, and the last 356 sound you hear are the bones in your neck crunching. You spin 357 and tumble down, your sword clattering to the floor 358 as the giant laughs. 359 Your eyes see the giant step towards you, his mighty foot 360 raised to crash down on you. 361 Oblivion takes over before you experience anything else... 362 363 You have been defeated! The giant is free to ravage your town! 364 \"\"\" 365 ) 366 367 sys.exit() 368 369@adv.when(\"flee\", context=\"giant\") 370def flee(): 371 adv.say( 372\"\"\" 373 As you turn to run, the giant reaches out and catches your tunic. 374 He lifts you off the ground, grabbing your dangling sword-arm 375 as he does so. A quick twist, and your sword tumbles to the ground. 376 Still holding you, he reaches his hand to your throat and squeezes, 377 cutting off your air supply. 378 379 The last sight you see before blackness takes you are 380 the rotten teeth of the evil grin as the giant laughs 381 at your puny attempt to stop him... 382 383 You have been defeated! The giant is free to ravage your town! 384 \"\"\" 385 ) 386 387 sys.exit() 388 389@adv.when(\"goodbye\") 390@adv.when(\"bye\") 391@adv.when(\"adios\") 392@adv.when(\"later\") 393def goodbye(): 394 395 # Are you fighting the giant? 396 if adv.get_context() == \"giant\": 397 # Not so fast! 398 print(\"The giant steps in front of you, blocking your exit!\") 399 400 else: 401 # Close the current context 402 adv.set_context(None) 403 print(\"Fare thee well, traveler!\") 404 405# Define some basic commands 406@adv.when(\"look\") 407def look(): 408\"\"\"Print the description of the current room. 409 If you've already visited it, print a short description. 410 \"\"\" 411 global current_room 412 413 if not current_room.visited: 414 adv.say(current_room) 415 current_room.visited = True 416 else: 417 print(current_room.short_desc) 418 419 # Are there any items here? 420 for item in current_room.items: 421 print(f\"There is {item.description} here.\") 422 423@adv.when(\"describe\") 424def describe_room(): 425\"\"\"Print the full description of the room.\"\"\" 426 adv.say(current_room) 427 428 # Are there any items here? 429 for item in current_room.items: 430 print(f\"There is {item.description} here.\") 431 432# Define your movement commands 433@adv.when(\"go DIRECTION\") 434@adv.when(\"north\", direction=\"north\") 435@adv.when(\"south\", direction=\"south\") 436@adv.when(\"east\", direction=\"east\") 437@adv.when(\"west\", direction=\"west\") 438@adv.when(\"n\", direction=\"north\") 439@adv.when(\"s\", direction=\"south\") 440@adv.when(\"e\", direction=\"east\") 441@adv.when(\"w\", direction=\"west\") 442def go(direction: str): 443\"\"\"Processes your moving direction 444 445 Arguments: 446 direction {str} -- which direction does the player want to move 447 \"\"\" 448 449 # What is your current room? 450 global current_room 451 452 # Is there an exit in that direction? 453 next_room = current_room.exit(direction) 454 if next_room: 455 # Is the door locked? 456 if ( 457 direction in current_room.locked_exits 458 and current_room.locked_exits[direction] 459 ): 460 print(f\"You can't go {direction} --- the door is locked.\") 461 else: 462 # Clear the context if necessary 463 current_context = adv.get_context() 464 if current_context == \"giant\": 465 adv.say( 466\"\"\"Your way is currently blocked. 467 Or have you forgotten the giant you are fighting?\"\"\" 468 ) 469 else: 470 if current_context: 471 print(\"Fare thee well, traveler!\") 472 adv.set_context(None) 473 474 current_room = next_room 475 print(f\"You go {direction}.\") 476 look() 477 478 # No exit that way 479 else: 480 print(f\"You can't go {direction}.\") 481 482# Define a prompt 483def prompt(): 484 global current_room 485 486 # Get possible exits 487 exits_string = get_exits(current_room) 488 489 # Are you in battle? 490 if adv.get_context() == \"giant\": 491 prompt_string = f\"HP: {hit_points} > \" 492 else: 493 prompt_string = f\"({current_room.title}) > \" 494 495 return f\"\"\"({exits_string}) {prompt_string}\"\"\" 496 497def no_command_matches(command: str): 498 if adv.get_context() == \"wizard.riddle\": 499 adv.say(\"That is not the correct answer. Begone!\") 500 adv.set_context(None) 501 current_room.locked_exits[\"west\"] = False 502 else: 503 print(f\"What do you mean by '{command}'?\") 504 505def get_exits(room): 506 exits = room.exits() 507 508 exits_string = \"\" 509 for exit in exits: 510 exits_string += f\"{exit[0].upper()}|\" 511 512 return exits_string[:-1] 513 514# Start the game 515if __name__ == \"__main__\": 516 # No context is normal 517 adv.set_context(None) 518 519 # Set the prompt 520 adv.prompt = prompt 521 522 # What happens with unknown commands 523 adv.no_command_matches = no_command_matches 524 525 # Look at your starting room 526 look() 527 528 # Start the game 529 adv.start()\n\n1\"\"\" 2Rooms for the adventurelib game 3\"\"\" 4 5# Import the library contents 6import adventurelib as adv 7 8# Import your items as well 9import adventurelib_game_items 10 11# And your characters 12import adventurelib_game_characters 13 14# Create a subclass of Rooms to track some custom properties 15class GameArea(adv.Room): 16 def __init__(self, description: str): 17 18 super().__init__(description) 19 20 # All areas can have locked exits 21 self.locked_exits = { 22 \"north\": False, 23 \"south\": False, 24 \"east\": False, 25 \"west\": False, 26 } 27 # All areas can have items in them 28 self.items = adv.Bag() 29 30 # All areas can have characters in them 31 self.characters = adv.Bag() 32 33 # All areas may have been visited already 34 # If so, you can print a shorter description 35 self.visited = False 36 37 # Which means each area needs a shorter description 38 self.short_desc = \"\" 39 40 # Each area also has a very short title for the prompt 41 self.title = \"\" 42 43# Your home 44home = GameArea( 45\"\"\" 46You wake as the sun streams in through the single 47window into your small room. You lie on your feather bed which 48hugs the north wall, while the remains of last night's 49fire smolders in the center of the room. 50 51Remembering last night's discussion with the council, you 52throw back your blanket and rise from your comfortable 53bed. Cold water awaits you as you splash away the night's 54sleep, grab an apple to eat, and prepare for the day. 55\"\"\" 56) 57home.title = \"Home\" 58home.short_desc = \"This is your home.\" 59 60# Hamlet 61hamlet = GameArea( 62\"\"\" 63From the center of your small hamlet, you can see every other 64home. It doesn't really even have an official name --- folks 65around here just call it Home. 66 67The council awaits you as you approach. Elder Barron beckons you 68as you exit your home. 69\"\"\" 70) 71hamlet.title = \"Hamlet\" 72hamlet.short_desc = \"You are in the hamlet.\" 73 74# Fork in road 75fork = GameArea( 76\"\"\" 77As you leave your hamlet, you think about how unprepared you 78really are. Your lack of experience and pitiful equipment 79are certainly no match for whatever has been stealing 80the villages livestock. 81 82As you travel, you come across a fork in the path. The path of 83the livestock thief continues east. However, you know 84the village of Dunhaven lies to the west, where you may 85get some additional help. 86\"\"\" 87) 88fork.title = \"Fork in road\" 89fork.short_desc = \"You are at a fork in the road.\" 90 91# Village of Dunhaven 92village = GameArea( 93\"\"\" 94A short trek up the well-worn path brings you the village 95of Dunhaven. Larger than your humble Home, Dunhaven sits at 96the end of a supply route from the capitol. As such, it has 97amenities and capabilities not found in the smaller farming 98communities. 99 100As you approach, you hear the clang-clang of hammer on anvil, 101and inhale the unmistakable smell of the coal-fed fire of a 102blacksmith shop to your south. 103\"\"\" 104) 105village.title = \"Village of Dunhaven\" 106village.short_desc = \"You are in the village of Dunhaven.\" 107 108# Blacksmith shop 109blacksmith_shop = GameArea( 110\"\"\" 111As you approach the blacksmith, the sounds of the hammer become 112clearer and clearer. Passing the front door, you head towards 113the sound of the blacksmith, and find her busy at the furnace. 114\"\"\" 115) 116blacksmith_shop.title = \"Blacksmith Shop\" 117blacksmith_shop.short_desc = \"You are in the blacksmith shop.\" 118 119# Side path away from fork 120side_path = GameArea( 121\"\"\" 122The path leads away from the fork to Dunhaven. Fresh tracks of 123something big, dragging something behind it, lead away to the south. 124\"\"\" 125) 126side_path.title = \"Side path\" 127side_path.short_desc = \"You are standing on a side path.\" 128 129# Wizard's Hut 130wizard_hut = GameArea( 131\"\"\" 132The path opens into a shaded glen. A small stream wanders down the 133hills to the east and past an unassuming hut. In front of the hut, 134the local wizard Trent sits smoking a long clay pipe. 135\"\"\" 136) 137wizard_hut.title = \"Wizard's Hut\" 138wizard_hut.short_desc = \"You are at the wizard's hut.\" 139 140# Cave mouth 141cave_mouth = GameArea( 142\"\"\" 143The path from Trent's hut follows the stream for a while before 144turning south away from the water. The trees begin closing overhead, 145blocking the sun and lending a chill to the air as you continue. 146 147The path finally terminates at the opening of a large cave. The 148tracks you have been following mix and mingle with others, both 149coming and going, but all the same. Whatever has been stealing 150your neighbor's livestock lives here, and comes and goes frequently. 151\"\"\" 152) 153cave_mouth.title = \"Cave Mouth\" 154cave_mouth.short_desc = \"You are at the mouth of large cave.\" 155 156# Cave of the Giant 157giant_cave = GameArea( 158\"\"\" 159You take a few tentative steps into the cave. It feels much warmer 160and more humid than the cold sunless forest air outside. A steady 161drip of water from the rocks is the only sound for a while. 162 163You begin to make out a faint light ahead. You hug the wall and 164press on, as the light becomes brighter. You finally enter a 165chamber at least 20 meters across, with a fire blazing in the center. 166Cages line one wall, some empty, but others containing cows and 167sheep stolen from you neighbors. Opposite them are piles of the bones 168of the creatures unlucky enough to have already been devoured. 169 170As you look around, you become aware of another presence in the room. 171\"\"\" 172) 173giant_cave.title = \"Cave of the Giant\" 174giant_cave.short_desc = \"You are in the giant's cave.\" 175 176# Set up the paths between areas 177home.south = hamlet 178hamlet.south = fork 179fork.west = village 180fork.east = side_path 181village.south = blacksmith_shop 182side_path.south = wizard_hut 183wizard_hut.west = cave_mouth 184cave_mouth.south = giant_cave 185 186# Lock some exits, since you can't leave until something else happens 187hamlet.locked_exits[\"south\"] = True 188wizard_hut.locked_exits[\"west\"] = True 189 190# Place items in different areas 191# These are just for flavor 192home.items.add(adventurelib_game_items.apple) 193fork.items.add(adventurelib_game_items.cloak) 194cave_mouth.items.add(adventurelib_game_items.slug) 195 196# Place characters where they should be 197hamlet.characters.add(adventurelib_game_characters.elder_barron) 198blacksmith_shop.characters.add(adventurelib_game_characters.blacksmith) 199wizard_hut.characters.add(adventurelib_game_characters.wizard_trent) 200giant_cave.characters.add(adventurelib_game_characters.giant)"
    }
}