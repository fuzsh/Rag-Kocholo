{
    "id": "dbpedia_527_3",
    "rank": 96,
    "data": {
        "url": "https://docs.qgis.org/latest/en/docs/user_manual/expressions/functions_list.html",
        "read_more_link": "",
        "language": "en",
        "title": "13.2. List of functions — QGIS Documentation documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.qgis.org/latest/en/_static/logo.png",
            "https://docs.qgis.org/latest/en/_images/affinetransform.png",
            "https://docs.qgis.org/latest/en/_images/boundary_polygon.png",
            "https://docs.qgis.org/latest/en/_images/bounding_box.png",
            "https://docs.qgis.org/latest/en/_images/buffer1.png",
            "https://docs.qgis.org/latest/en/_images/variable_buffer_m.png",
            "https://docs.qgis.org/latest/en/_images/centroids1.png",
            "https://docs.qgis.org/latest/en/_images/concave_hull_threshold.png",
            "https://docs.qgis.org/latest/en/_images/convex_hull.png",
            "https://docs.qgis.org/latest/en/_images/densify_geometry.png",
            "https://docs.qgis.org/latest/en/_images/densify_geometry_interval.png",
            "https://docs.qgis.org/latest/en/_images/end_point.png",
            "https://docs.qgis.org/latest/en/_images/extend_lines.png",
            "https://docs.qgis.org/latest/en/_images/exterior_ring.png",
            "https://docs.qgis.org/latest/en/_images/extrude.png",
            "https://docs.qgis.org/latest/en/_images/interpolated_point.png",
            "https://docs.qgis.org/latest/en/_images/substring.png",
            "https://docs.qgis.org/latest/en/_images/minimum_enclosing_circles.png",
            "https://docs.qgis.org/latest/en/_images/extract_nodes.png",
            "https://docs.qgis.org/latest/en/_images/offset_lines.png",
            "https://docs.qgis.org/latest/en/_images/oriented_minimum_bounding_box.png",
            "https://docs.qgis.org/latest/en/_images/pole_inaccessibility.png",
            "https://docs.qgis.org/latest/en/_images/reverse_line.png",
            "https://docs.qgis.org/latest/en/_images/rotate.gif",
            "https://docs.qgis.org/latest/en/_images/simplify_geometries.png",
            "https://docs.qgis.org/latest/en/_images/single_side_buffer.png",
            "https://docs.qgis.org/latest/en/_images/smooth_geometry_1.png",
            "https://docs.qgis.org/latest/en/_images/square_wave.png",
            "https://docs.qgis.org/latest/en/_images/square_wave_randomized.png",
            "https://docs.qgis.org/latest/en/_images/start_point.png",
            "https://docs.qgis.org/latest/en/_images/tapered_buffer.png",
            "https://docs.qgis.org/latest/en/_images/translate_geometry.png",
            "https://docs.qgis.org/latest/en/_images/triangular_wave.png",
            "https://docs.qgis.org/latest/en/_images/triangular_wave_randomized.png",
            "https://docs.qgis.org/latest/en/_images/wave.png",
            "https://docs.qgis.org/latest/en/_images/wave_randomized.png",
            "https://docs.qgis.org/latest/en/_images/wedge_buffers.png",
            "https://docs.qgis.org/latest/en/_images/mIconExpressionSelect.png",
            "https://docs.qgis.org/latest/en/_images/mActionCalculateField.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "QGIS 3.34 documentation: 13.2. List of functions",
        "meta_lang": "en",
        "meta_favicon": "../../../_static/qgis_logo.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.qgis.org/latest/en/docs/user_manual/expressions/functions_list.html",
        "text": "13.2.13. Geometry Functionsï\n\nThis group contains functions that operate on geometry objects (e.g. buffer, transform, $area).\n\n13.2.13.1. affine_transformï\n\nReturns the geometry after an affine transformation. Calculations are in the Spatial Reference System of this geometry. The operations are performed in a scale, rotation, translation order. If there is a Z or M offset but the coordinate is not present in the geometry, it will be added.\n\n13.2.13.2. angle_at_vertexï\n\nReturns the bisector angle (average angle) to the geometry for a specified vertex on a linestring geometry. Angles are in degrees clockwise from north.\n\n13.2.13.3. apply_dash_patternï\n\nApplies a dash pattern to a geometry, returning a MultiLineString geometry which is the input geometry stroked along each line/ring with the specified pattern.\n\n13.2.13.4. $areaï\n\nReturns the area of the current feature. The area calculated by this function respects both the current projectâs ellipsoid setting and area unit settings. For example, if an ellipsoid has been set for the project then the calculated area will be ellipsoidal, and if no ellipsoid is set then the calculated area will be planimetric.\n\nSyntax\n\n$area\n\nExamples\n\n$area â 42\n\n13.2.13.5. areaï\n\nReturns the area of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned area will match the units for the SRS. This differs from the calculations performed by the $area function, which will perform ellipsoidal calculations based on the projectâs ellipsoid and area unit settings.\n\n13.2.13.6. azimuthï\n\nReturns the north-based azimuth as the angle in radians measured clockwise from the vertical on point_a to point_b.\n\n13.2.13.7. bearingï\n\nReturns the north-based bearing as the angle in radians measured clockwise on the ellipsoid from the vertical on point_a to point_b.\n\n13.2.13.8. boundaryï\n\nReturns the closure of the combinatorial boundary of the geometry (ie the topological boundary of the geometry). For instance, a polygon geometry will have a boundary consisting of the linestrings for each ring in the polygon. Some geometry types do not have a defined boundary, e.g., points or geometry collections, and will return NULL.\n\nFurther reading: Boundary algorithm\n\n13.2.13.9. boundsï\n\nReturns a geometry which represents the bounding box of an input geometry. Calculations are in the Spatial Reference System of this geometry.\n\nFurther reading: Bounding boxes algorithm\n\n13.2.13.10. bounds_heightï\n\nReturns the height of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry.\n\n13.2.13.11. bounds_widthï\n\nReturns the width of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry.\n\n13.2.13.12. bufferï\n\nReturns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this geometry.\n\nFurther reading: Buffer algorithm\n\n13.2.13.13. buffer_by_mï\n\nCreates a buffer along a line geometry where the buffer diameter varies according to the m-values at the line vertices.\n\nFurther reading: Variable width buffer (by M value) algorithm\n\n13.2.13.14. centroidï\n\nReturns the geometric center of a geometry.\n\nSyntax\n\ncentroid(geometry)\n\nArguments\n\ngeometry - a geometry\n\nExamples\n\ncentroid(@geometry) â a point geometry\n\nFurther reading: Centroids algorithm\n\n13.2.13.15. close_lineï\n\nReturns a closed line string of the input line string by appending the first point to the end of the line, if it is not already closed. If the geometry is not a line string or multi line string then the result will be NULL.\n\n13.2.13.16. closest_pointï\n\nReturns the point on geometry1 that is closest to geometry2.\n\n13.2.13.17. collect_geometriesï\n\nCollects a set of geometries into a multi-part geometry object.\n\nList of arguments variant\n\nGeometry parts are specified as separate arguments to the function.\n\nArray variant\n\nGeometry parts are specified as an array of geometry parts.\n\nFurther reading: Collect geometries algorithm\n\n13.2.13.18. combineï\n\nReturns the combination of two geometries.\n\n13.2.13.19. concave_hullï\n\nReturns a possibly concave polygon that contains all the points in the geometry\n\nFurther reading: convex_hull, Concave hull algorithm\n\n13.2.13.20. containsï\n\nTests whether a geometry contains another. Returns TRUE if and only if no points of geometry2 lie in the exterior of geometry1, and at least one point of the interior of geometry2 lies in the interior of geometry1.\n\nFurther reading: overlay_contains\n\n13.2.13.21. convex_hullï\n\nReturns the convex hull of a geometry. It represents the minimum convex geometry that encloses all geometries within the set.\n\nFurther reading: concave_hull, Convex hull algorithm\n\n13.2.13.22. crossesï\n\nTests whether a geometry crosses another. Returns TRUE if the supplied geometries have some, but not all, interior points in common.\n\nFurther reading: overlay_crosses\n\n13.2.13.23. densify_by_countï\n\nTakes a polygon or line layer geometry and generates a new one in which the geometries have a larger number of vertices than the original one.\n\nFurther reading: Densify by count algorithm\n\n13.2.13.24. densify_by_distanceï\n\nTakes a polygon or line layer geometry and generates a new one in which the geometries are densified by adding additional vertices on edges that have a maximum distance of the specified interval distance.\n\nFurther reading: Densify by interval algorithm\n\n13.2.13.25. differenceï\n\nReturns a geometry that represents that part of geometry1 that does not intersect with geometry2.\n\nFurther reading: Difference algorithm\n\n13.2.13.26. disjointï\n\nTests whether geometries do not spatially intersect. Returns TRUE if the geometries do not share any space together.\n\nFurther reading: overlay_disjoint\n\n13.2.13.27. distanceï\n\nReturns the minimum distance (based on spatial reference) between two geometries in projected units.\n\n13.2.13.28. distance_to_vertexï\n\nReturns the distance along the geometry to a specified vertex.\n\n13.2.13.29. end_pointï\n\nReturns the last node from a geometry.\n\nFurther reading: start_point, Extract specific vertices algorithm\n\n13.2.13.30. exif_geotagï\n\nCreates a point geometry from the exif geotags of an image file.\n\n13.2.13.31. extendï\n\nExtends the start and end of a linestring geometry by a specified amount. Lines are extended using the bearing of the first and last segment in the line. For a multilinestring, all the parts are extended. Distances are in the Spatial Reference System of this geometry.\n\nFurther reading: Extend lines algorithm\n\n13.2.13.32. exterior_ringï\n\nReturns a line string representing the exterior ring of a polygon geometry. If the geometry is not a polygon then the result will be NULL.\n\n13.2.13.33. extrudeï\n\nReturns an extruded version of the input (Multi-)Curve or (Multi-)Linestring geometry with an extension specified by x and y.\n\n13.2.13.34. flip_coordinatesï\n\nReturns a copy of the geometry with the x and y coordinates swapped. Useful for repairing geometries which have had their latitude and longitude values reversed.\n\nFurther reading: Swap X and Y coordinates algorithm\n\n13.2.13.35. force_polygon_ccwï\n\nForces a geometry to respect the convention where exterior rings are counter-clockwise, interior rings are clockwise.\n\nFurther reading: force_polygon_cw, force_rhr\n\n13.2.13.36. force_polygon_cwï\n\nForces a geometry to respect the convention where exterior rings are clockwise, interior rings are counter-clockwise.\n\nFurther reading: force_polygon_ccw, force_rhr\n\n13.2.13.37. force_rhrï\n\nForces a geometry to respect the Right-Hand-Rule, in which the area that is bounded by a polygon is to the right of the boundary. In particular, the exterior ring is oriented in a clockwise direction and the interior rings in a counter-clockwise direction. Due to the inconsistency in the definition of the Right-Hand-Rule in some contexts it is recommended to use the explicit force_polygon_cw function instead.\n\nFurther reading: Force right-hand-rule algorithm, force_polygon_ccw, force_polygon_cw\n\n13.2.13.38. geom_from_gmlï\n\nReturns a geometry from a GML representation of geometry.\n\n13.2.13.39. geom_from_wkbï\n\nReturns a geometry created from a Well-Known Binary (WKB) representation.\n\n13.2.13.40. geom_from_wktï\n\nReturns a geometry created from a Well-Known Text (WKT) representation.\n\n13.2.13.41. geom_to_wkbï\n\nReturns the Well-Known Binary (WKB) representation of a geometry\n\n13.2.13.42. geom_to_wktï\n\nReturns the Well-Known Text (WKT) representation of the geometry without SRID metadata.\n\n13.2.13.43. $geometryï\n\nReturns the geometry of the current feature. Can be used for processing with other functions. WARNING: This function is deprecated. It is recommended to use the replacement @geometry variable instead.\n\nSyntax\n\n$geometry\n\nExamples\n\ngeom_to_wkt( $geometry ) â âPOINT(6 50)â\n\n13.2.13.44. geometryï\n\nReturns a featureâs geometry.\n\n13.2.13.45. geometry_nï\n\nReturns a specific geometry from a geometry collection, or NULL if the input geometry is not a collection. Also returns a part from a multipart geometry.\n\n13.2.13.46. geometry_typeï\n\nReturns a string value describing the type of a geometry (Point, Line or Polygon)\n\n13.2.13.47. hausdorff_distanceï\n\nReturns the Hausdorff distance between two geometries. This is basically a measure of how similar or dissimilar 2 geometries are, with a lower distance indicating more similar geometries.\n\nThe function can be executed with an optional densify fraction argument. If not specified, an approximation to the standard Hausdorff distance is used. This approximation is exact or close enough for a large subset of useful cases. Examples of these are:\n\ncomputing distance between Linestrings that are roughly parallel to each other, and roughly equal in length. This occurs in matching linear networks.\n\nTesting similarity of geometries.\n\nIf the default approximate provided by this method is insufficient, specify the optional densify fraction argument. Specifying this argument performs a segment densification before computing the discrete Hausdorff distance. The parameter sets the fraction by which to densify each segment. Each segment will be split into a number of equal-length subsegments, whose fraction of the total length is closest to the given fraction. Decreasing the densify fraction parameter will make the distance returned approach the true Hausdorff distance for the geometries.\n\n13.2.13.48. inclinationï\n\nReturns the inclination measured from the zenith (0) to the nadir (180) on point_a to point_b.\n\n13.2.13.49. interior_ring_nï\n\nReturns a specific interior ring from a polygon geometry, or NULL if the geometry is not a polygon.\n\n13.2.13.50. intersectionï\n\nReturns a geometry that represents the shared portion of two geometries.\n\nFurther reading: Intersection algorithm\n\n13.2.13.51. intersectsï\n\nTests whether a geometry intersects another. Returns TRUE if the geometries spatially intersect (share any portion of space) and false if they do not.\n\nFurther reading: overlay_intersects\n\n13.2.13.52. intersects_bboxï\n\nTests whether a geometryâs bounding box overlaps another geometryâs bounding box. Returns TRUE if the geometries spatially intersect the bounding box defined and false if they do not.\n\n13.2.13.53. is_closedï\n\nReturns TRUE if a line string is closed (start and end points are coincident), or false if a line string is not closed. If the geometry is not a line string then the result will be NULL.\n\n13.2.13.54. is_emptyï\n\nReturns TRUE if a geometry is empty (without coordinates), false if the geometry is not empty and NULL if there is no geometry. See also is_empty_or_null.\n\nFurther reading: is_empty_or_null\n\n13.2.13.55. is_empty_or_nullï\n\nReturns TRUE if a geometry is NULL or empty (without coordinates) or false otherwise. This function is like the expression â@geometry IS NULL or is_empty(@geometry)â\n\nFurther reading: is_empty, NULL\n\n13.2.13.56. is_multipartï\n\nReturns TRUE if the geometry is of Multi type.\n\n13.2.13.57. is_validï\n\nReturns TRUE if a geometry is valid; if it is well-formed in 2D according to the OGC rules.\n\nFurther reading: make_valid, Check validity algorithm\n\n13.2.13.58. $lengthï\n\nReturns the length of a linestring. If you need the length of a border of a polygon, use $perimeter instead. The length calculated by this function respects both the current projectâs ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated length will be ellipsoidal, and if no ellipsoid is set then the calculated length will be planimetric.\n\nSyntax\n\n$length\n\nExamples\n\n$length â 42.4711\n\n13.2.13.59. lengthï\n\nReturns the number of characters in a string or the length of a geometry linestring.\n\nString variant\n\nReturns the number of characters in a string.\n\nSyntax\n\nlength(string)\n\nArguments\n\nstring - string to count length of\n\nExamples\n\nlength('hello') â 5\n\nGeometry variant\n\nCalculate the length of a geometry line object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned length will match the units for the SRS. This differs from the calculations performed by the $length function, which will perform ellipsoidal calculations based on the projectâs ellipsoid and distance unit settings.\n\nFurther reading: straight_distance_2d\n\n13.2.13.60. length3Dï\n\nCalculates the 3D length of a geometry line object. If the geometry is not a 3D line object, it returns its 2D length. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned length will match the units for the SRS. This differs from the calculations performed by the $length function, which will perform ellipsoidal calculations based on the projectâs ellipsoid and distance unit settings.\n\n13.2.13.61. line_interpolate_angleï\n\nReturns the angle parallel to the geometry at a specified distance along a linestring geometry. Angles are in degrees clockwise from north.\n\n13.2.13.62. line_interpolate_pointï\n\nReturns the point interpolated by a specified distance along a linestring geometry.\n\nFurther reading: Interpolate point on line algorithm\n\n13.2.13.63. line_locate_pointï\n\nReturns the distance along a linestring corresponding to the closest position the linestring comes to a specified point geometry.\n\n13.2.13.64. line_mergeï\n\nReturns a LineString or MultiLineString geometry, where any connected LineStrings from the input geometry have been merged into a single linestring. This function will return NULL if passed a geometry which is not a LineString/MultiLineString.\n\n13.2.13.65. line_substringï\n\nReturns the portion of a line (or curve) geometry which falls between the specified start and end distances (measured from the beginning of the line). Z and M values are linearly interpolated from existing values.\n\nFurther reading: Line substring algorithm\n\n13.2.13.66. mï\n\nReturns the m (measure) value of a point geometry.\n\n13.2.13.67. m_atï\n\nRetrieves a m coordinate of the geometry, or NULL if the geometry has no m value.\n\n13.2.13.68. m_maxï\n\nReturns the maximum m (measure) value of a geometry.\n\n13.2.13.69. m_minï\n\nReturns the minimum m (measure) value of a geometry.\n\n13.2.13.70. main_angleï\n\nReturns the angle of the long axis (clockwise, in degrees from North) of the oriented minimal bounding rectangle, which completely covers the geometry.\n\nSyntax\n\nmain_angle(geometry)\n\nArguments\n\ngeometry - a geometry\n\nExamples\n\nmain_angle(geom_from_wkt('Polygon ((321577 129614, 321581 129618, 321585 129615, 321581 129610, 321577 129614))')) â 38.66\n\n13.2.13.71. make_circleï\n\nCreates a circular polygon.\n\n13.2.13.72. make_ellipseï\n\nCreates an elliptical polygon.\n\n13.2.13.73. make_lineï\n\nCreates a line geometry from a series of point geometries.\n\nList of arguments variant\n\nLine vertices are specified as separate arguments to the function.\n\nArray variant\n\nLine vertices are specified as an array of points.\n\n13.2.13.74. make_pointï\n\nCreates a point geometry from an x and y (and optional z and m) value.\n\n13.2.13.75. make_point_mï\n\nCreates a point geometry from an x, y coordinate and m value.\n\n13.2.13.76. make_polygonï\n\nCreates a polygon geometry from an outer ring and optional series of inner ring geometries.\n\n13.2.13.77. make_rectangle_3pointsï\n\nCreates a rectangle from 3 points.\n\n13.2.13.78. make_regular_polygonï\n\nCreates a regular polygon.\n\n13.2.13.79. make_squareï\n\nCreates a square from a diagonal.\n\n13.2.13.80. make_triangleï\n\nCreates a triangle polygon.\n\n13.2.13.81. make_validï\n\nReturns a valid geometry or an empty geometry if the geometry could not be made valid.\n\nFurther reading: is_valid, Fix geometries algorithm\n\n13.2.13.82. minimal_circleï\n\nReturns the minimal enclosing circle of a geometry. It represents the minimum circle that encloses all geometries within the set.\n\nFurther reading: Minimum enclosing circles algorithm\n\n13.2.13.83. nodes_to_pointsï\n\nReturns a multipoint geometry consisting of every node in the input geometry.\n\nFurther reading: Extract vertices algorithm\n\n13.2.13.84. num_geometriesï\n\nReturns the number of geometries in a geometry collection, or the number of parts in a multi-part geometry. The function returns NULL if the input geometry is not a collection.\n\n13.2.13.85. num_interior_ringsï\n\nReturns the number of interior rings in a polygon or geometry collection, or NULL if the input geometry is not a polygon or collection.\n\n13.2.13.86. num_pointsï\n\nReturns the number of vertices in a geometry.\n\n13.2.13.87. num_ringsï\n\nReturns the number of rings (including exterior rings) in a polygon or geometry collection, or NULL if the input geometry is not a polygon or collection.\n\n13.2.13.88. offset_curveï\n\nReturns a geometry formed by offsetting a linestring geometry to the side. Distances are in the Spatial Reference System of this geometry.\n\nFurther reading: Offset lines algorithm\n\n13.2.13.89. order_partsï\n\nOrders the parts of a MultiGeometry by a given criteria\n\n13.2.13.90. oriented_bboxï\n\nReturns a geometry which represents the minimal oriented bounding box of an input geometry.\n\nFurther reading: Oriented minimum bounding box algorithm\n\n13.2.13.91. overlapsï\n\nTests whether a geometry overlaps another. Returns TRUE if the geometries share space, are of the same dimension, but are not completely contained by each other.\n\n13.2.13.92. overlay_containsï\n\nReturns whether the current feature spatially contains at least one feature from a target layer, or an array of expression-based results for the features in the target layer contained in the current feature.\n\nRead more on the underlying GEOS âContainsâ predicate, as described in PostGIS ST_Contains function.\n\nFurther reading: contains, array manipulation, Select by location algorithm\n\n13.2.13.93. overlay_crossesï\n\nReturns whether the current feature spatially crosses at least one feature from a target layer, or an array of expression-based results for the features in the target layer crossed by the current feature.\n\nRead more on the underlying GEOS âCrossesâ predicate, as described in PostGIS ST_Crosses function.\n\nFurther reading: crosses, array manipulation, Select by location algorithm\n\n13.2.13.94. overlay_disjointï\n\nReturns whether the current feature is spatially disjoint from all the features of a target layer, or an array of expression-based results for the features in the target layer that are disjoint from the current feature.\n\nRead more on the underlying GEOS âDisjointâ predicate, as described in PostGIS ST_Disjoint function.\n\nFurther reading: disjoint, array manipulation, Select by location algorithm\n\n13.2.13.95. overlay_equalsï\n\nReturns whether the current feature spatially equals to at least one feature from a target layer, or an array of expression-based results for the features in the target layer that are spatially equal to the current feature.\n\nRead more on the underlying GEOS âEqualsâ predicate, as described in PostGIS ST_Equals function.\n\nFurther reading: array manipulation, Select by location algorithm\n\n13.2.13.96. overlay_intersectsï\n\nReturns whether the current feature spatially intersects at least one feature from a target layer, or an array of expression-based results for the features in the target layer intersected by the current feature.\n\nRead more on the underlying GEOS âIntersectsâ predicate, as described in PostGIS ST_Intersects function.\n\nFurther reading: intersects, array manipulation, Select by location algorithm\n\n13.2.13.97. overlay_nearestï\n\nReturns whether the current feature has feature(s) from a target layer within a given distance, or an array of expression-based results for the features in the target layer within a distance from the current feature.\n\nNote: This function can be slow and consume a lot of memory for large layers.\n\nFurther reading: array manipulation, Join attributes by nearest algorithm\n\n13.2.13.98. overlay_touchesï\n\nReturns whether the current feature spatially touches at least one feature from a target layer, or an array of expression-based results for the features in the target layer touched by the current feature.\n\nRead more on the underlying GEOS âTouchesâ predicate, as described in PostGIS ST_Touches function.\n\nFurther reading: touches, array manipulation, Select by location algorithm\n\n13.2.13.99. overlay_withinï\n\nReturns whether the current feature is spatially within at least one feature from a target layer, or an array of expression-based results for the features in the target layer that contain the current feature.\n\nRead more on the underlying GEOS âWithinâ predicate, as described in PostGIS ST_Within function.\n\nFurther reading: within, array manipulation, Select by location algorithm\n\n13.2.13.100. $perimeterï\n\nReturns the perimeter length of the current feature. The perimeter calculated by this function respects both the current projectâs ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated perimeter will be ellipsoidal, and if no ellipsoid is set then the calculated perimeter will be planimetric.\n\nSyntax\n\n$perimeter\n\nExamples\n\n$perimeter â 42\n\n13.2.13.101. perimeterï\n\nReturns the perimeter of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned perimeter will match the units for the SRS. This differs from the calculations performed by the $perimeter function, which will perform ellipsoidal calculations based on the projectâs ellipsoid and distance unit settings.\n\n13.2.13.102. point_nï\n\nReturns a specific node from a geometry.\n\nFurther reading: Extract specific vertices algorithm\n\n13.2.13.103. point_on_surfaceï\n\nReturns a point guaranteed to lie on the surface of a geometry.\n\nSyntax\n\npoint_on_surface(geometry)\n\nArguments\n\ngeometry - a geometry\n\nExamples\n\npoint_on_surface(@geometry) â a point geometry\n\nFurther reading: Point on Surface algorithm\n\n13.2.13.104. pole_of_inaccessibilityï\n\nCalculates the approximate pole of inaccessibility for a surface, which is the most distant internal point from the boundary of the surface. This function uses the âpolylabelâ algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. More precise tolerances require more iterations and will take longer to calculate.\n\nFurther reading: Pole of inaccessibility algorithm\n\n13.2.13.105. projectï\n\nReturns a point projected from a start point using a distance, a bearing (azimuth) and an elevation in radians.\n\nFurther reading: Project points (Cartesian) algorithm\n\n13.2.13.106. relateï\n\nTests the Dimensional Extended 9 Intersection Model (DE-9IM) representation of the relationship between two geometries.\n\nRelationship variant\n\nReturns the Dimensional Extended 9 Intersection Model (DE-9IM) representation of the relationship between two geometries.\n\nSyntax\n\nrelate(geometry, geometry)\n\nArguments\n\ngeometry - a geometry\n\ngeometry - a geometry\n\nExamples\n\nrelate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ) ) â âFF1F00102â\n\nPattern match variant\n\nTests whether the DE-9IM relationship between two geometries matches a specified pattern.\n\n13.2.13.107. reverseï\n\nReverses the direction of a line string by reversing the order of its vertices.\n\nFurther reading: Reverse line direction algorithm\n\n13.2.13.108. rotateï\n\nReturns a rotated version of a geometry. Calculations are in the Spatial Reference System of this geometry.\n\n13.2.13.109. roundnessï\n\nCalculates how close a polygon shape is to a circle. The function Returns TRUE when the polygon shape is a perfect circle and 0 when it is completely flat.\n\nFurther reading: Roundness algorithm\n\n13.2.13.110. scaleï\n\nReturns a scaled version of a geometry. Calculations are in the Spatial Reference System of this geometry.\n\n13.2.13.111. segments_to_linesï\n\nReturns a multi line geometry consisting of a line for every segment in the input geometry.\n\nFurther reading: Explode lines algorithm\n\n13.2.13.112. shared_pathsï\n\nReturns a collection containing paths shared by the two input geometries. Those going in the same direction are in the first element of the collection, those going in the opposite direction are in the second element. The paths themselves are given in the direction of the first geometry.\n\n13.2.13.113. shortest_lineï\n\nReturns the shortest line joining geometry1 to geometry2. The resultant line will start at geometry1 and end at geometry2.\n\n13.2.13.114. simplifyï\n\nSimplifies a geometry by removing nodes using a distance based threshold (ie, the Douglas Peucker algorithm). The algorithm preserves large deviations in geometries and reduces the number of vertices in nearly straight segments.\n\nFurther reading: Simplify algorithm\n\n13.2.13.115. simplify_vwï\n\nSimplifies a geometry by removing nodes using an area based threshold (ie, the Visvalingam-Whyatt algorithm). The algorithm removes vertices which create small areas in geometries, e.g., narrow spikes or nearly straight segments.\n\nFurther reading: Simplify algorithm\n\n13.2.13.116. single_sided_bufferï\n\nReturns a geometry formed by buffering out just one side of a linestring geometry. Distances are in the Spatial Reference System of this geometry.\n\nFurther reading: Single sided buffer algorithm\n\n13.2.13.117. sinuosityï\n\nReturns the sinuosity of a curve, which is the ratio of the curve length to the straight (2D) distance between its endpoints.\n\n13.2.13.118. smoothï\n\nSmooths a geometry by adding extra nodes which round off corners in the geometry. If input geometries contain Z or M values, these will also be smoothed and the output geometry will retain the same dimensionality as the input geometry.\n\nFurther reading: Smooth algorithm\n\n13.2.13.119. square_waveï\n\nConstructs square/rectangular waves along the boundary of a geometry.\n\n13.2.13.120. square_wave_randomizedï\n\nConstructs randomized square/rectangular waves along the boundary of a geometry.\n\n13.2.13.121. start_pointï\n\nReturns the first node from a geometry.\n\nFurther reading: end_point, Extract specific vertices algorithm\n\n13.2.13.122. straight_distance_2dï\n\nReturns the direct/euclidean distance between the first and last vertex of a geometry. The geometry must be a curve (circularstring, linestring).\n\nFurther reading: length\n\n13.2.13.123. sym_differenceï\n\nReturns a geometry that represents the portions of two geometries that do not intersect.\n\nFurther reading: Symmetrical difference algorithm\n\n13.2.13.124. tapered_bufferï\n\nCreates a buffer along a line geometry where the buffer diameter varies evenly over the length of the line.\n\nFurther reading: Tapered buffers algorithm\n\n13.2.13.125. touchesï\n\nTests whether a geometry touches another. Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.\n\nFurther reading: overlay_touches\n\n13.2.13.126. transformï\n\nReturns the geometry transformed from a source CRS to a destination CRS.\n\nFurther reading: Reproject layer algorithm\n\n13.2.13.127. translateï\n\nReturns a translated version of a geometry. Calculations are in the Spatial Reference System of this geometry.\n\nFurther reading: Translate algorithm\n\n13.2.13.128. triangular_waveï\n\nConstructs triangular waves along the boundary of a geometry.\n\n13.2.13.129. triangular_wave_randomizedï\n\nConstructs randomized triangular waves along the boundary of a geometry.\n\n13.2.13.130. unionï\n\nReturns a geometry that represents the point set union of the geometries.\n\n13.2.13.131. waveï\n\nConstructs rounded (sine-like) waves along the boundary of a geometry.\n\n13.2.13.132. wave_randomizedï\n\nConstructs randomized curved (sine-like) waves along the boundary of a geometry.\n\n13.2.13.133. wedge_bufferï\n\nReturns a wedge shaped buffer originating from a point geometry.\n\nFurther reading: Create wedge buffers algorithm\n\n13.2.13.134. withinï\n\nTests whether a geometry is within another. Returns TRUE if the geometry1 is completely within geometry2.\n\nFurther reading: overlay_within\n\n13.2.13.135. $xï\n\nReturns the x coordinate of the current point feature. If the feature is a multipoint feature, then the x-coordinate of the first point will be returned. WARNING: This function is deprecated. It is recommended to use the replacement x() function with @geometry variable instead.\n\nSyntax\n\n$x\n\nExamples\n\n$x â 42\n\nFurther reading: x\n\n13.2.13.136. xï\n\nReturns the x coordinate of a point geometry, or the x coordinate of the centroid for a non-point geometry.\n\n13.2.13.137. $x_atï\n\nRetrieves a x coordinate of the current featureâs geometry. WARNING: This function is deprecated. It is recommended to use the replacement x_at function with @geometry variable instead.\n\nFurther reading: x_at\n\n13.2.13.138. x_atï\n\nRetrieves a x coordinate of the geometry.\n\n13.2.13.139. x_maxï\n\nReturns the maximum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry.\n\n13.2.13.140. x_minï\n\nReturns the minimum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry.\n\n13.2.13.141. $yï\n\nReturns the y coordinate of the current point feature. If the feature is a multipoint feature, then the y-coordinate of the first point will be returned. WARNING: This function is deprecated. It is recommended to use the replacement y() function with @geometry variable instead.\n\nSyntax\n\n$y\n\nExamples\n\n$y â 42\n\nFurther reading: y\n\n13.2.13.142. yï\n\nReturns the y coordinate of a point geometry, or the y coordinate of the centroid for a non-point geometry.\n\n13.2.13.143. $y_atï\n\nRetrieves a y coordinate of the current featureâs geometry. WARNING: This function is deprecated. It is recommended to use the replacement y_at function with @geometry variable instead.\n\nFurther reading: y_at\n\n13.2.13.144. y_atï\n\nRetrieves a y coordinate of the geometry.\n\n13.2.13.145. y_maxï\n\nReturns the maximum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry.\n\n13.2.13.146. y_minï\n\nReturns the minimum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry.\n\n13.2.13.147. $zï\n\nReturns the z value of the current point feature if it is 3D. If the feature is a multipoint feature, then the z value of the first point will be returned. WARNING: This function is deprecated. It is recommended to use the replacement z() function with @geometry variable instead.\n\nSyntax\n\n$z\n\nExamples\n\n$z â 123\n\n13.2.13.148. zï\n\nReturns the z coordinate of a point geometry, or NULL if the geometry has no z value.\n\n13.2.13.149. z_atï\n\nRetrieves a z coordinate of the geometry, or NULL if the geometry has no z value.\n\n13.2.13.150. z_maxï\n\nReturns the maximum z coordinate of a geometry, or NULL if the geometry has no z value."
    }
}