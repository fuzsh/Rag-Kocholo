{
    "id": "dbpedia_124_2",
    "rank": 71,
    "data": {
        "url": "https://kubernetes.io/docs/concepts/overview/components/",
        "read_more_link": "",
        "language": "en",
        "title": "Kubernetes Components",
        "top_image": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "meta_img": "https://kubernetes.io/images/kubernetes-horizontal-color.png",
        "images": [
            "https://kubernetes.io/images/announcements/kubecon-china-2024-white.svg",
            "https://kubernetes.io/images/docs/components-of-kubernetes.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-08T01:06:41+01:00",
        "summary": "",
        "meta_description": "A Kubernetes cluster consists of the components that are a part of the control plane and a set of machines called nodes.",
        "meta_lang": "en",
        "meta_favicon": "/images/kubernetes.png",
        "meta_site_name": "",
        "canonical_link": "https://kubernetes.io/docs/concepts/overview/components/",
        "text": "A Kubernetes cluster consists of the components that are a part of the control plane and a set of machines called nodes.\n\nWhen you deploy Kubernetes, you get a cluster.\n\nA Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.\n\nThe worker node(s) host the Pods that are the components of the application workload. The control plane manages the worker nodes and the Pods in the cluster. In production environments, the control plane usually runs across multiple computers and a cluster usually runs multiple nodes, providing fault-tolerance and high availability.\n\nThis document outlines the various components you need to have for a complete and working Kubernetes cluster.\n\nControl Plane Components\n\nThe control plane's components make global decisions about the cluster (for example, scheduling), as well as detecting and responding to cluster events (for example, starting up a new pod when a Deployment's replicas field is unsatisfied).\n\nControl plane components can be run on any machine in the cluster. However, for simplicity, setup scripts typically start all control plane components on the same machine, and do not run user containers on this machine. See Creating Highly Available clusters with kubeadm for an example control plane setup that runs across multiple machines.\n\nkube-apiserver\n\nThe API server is a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane.\n\nThe main implementation of a Kubernetes API server is kube-apiserver. kube-apiserver is designed to scale horizontallyâ€”that is, it scales by deploying more instances. You can run several instances of kube-apiserver and balance traffic between those instances.\n\netcd\n\nConsistent and highly-available key value store used as Kubernetes' backing store for all cluster data.\n\nIf your Kubernetes cluster uses etcd as its backing store, make sure you have a back up plan for the data.\n\nYou can find in-depth information about etcd in the official documentation.\n\nkube-scheduler\n\nControl plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.\n\nFactors taken into account for scheduling decisions include: individual and collective resource requirements, hardware/software/policy constraints, affinity and anti-affinity specifications, data locality, inter-workload interference, and deadlines.\n\nkube-controller-manager\n\nControl plane component that runs controller processes.\n\nLogically, each controller is a separate process, but to reduce complexity, they are all compiled into a single binary and run in a single process.\n\nThere are many different types of controllers. Some examples of them are:\n\nNode controller: Responsible for noticing and responding when nodes go down.\n\nJob controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.\n\nEndpointSlice controller: Populates EndpointSlice objects (to provide a link between Services and Pods).\n\nServiceAccount controller: Create default ServiceAccounts for new namespaces.\n\nThe above is not an exhaustive list.\n\ncloud-controller-manager\n\nA Kubernetes control plane component that embeds cloud-specific control logic. The cloud controller manager lets you link your cluster into your cloud provider's API, and separates out the components that interact with that cloud platform from components that only interact with your cluster.\n\nThe cloud-controller-manager only runs controllers that are specific to your cloud provider. If you are running Kubernetes on your own premises, or in a learning environment inside your own PC, the cluster does not have a cloud controller manager.\n\nAs with the kube-controller-manager, the cloud-controller-manager combines several logically independent control loops into a single binary that you run as a single process. You can scale horizontally (run more than one copy) to improve performance or to help tolerate failures.\n\nThe following controllers can have cloud provider dependencies:\n\nNode controller: For checking the cloud provider to determine if a node has been deleted in the cloud after it stops responding\n\nRoute controller: For setting up routes in the underlying cloud infrastructure\n\nService controller: For creating, updating and deleting cloud provider load balancers\n\nNode Components\n\nNode components run on every node, maintaining running pods and providing the Kubernetes runtime environment.\n\nkubelet\n\nAn agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.\n\nThe kubelet takes a set of PodSpecs that are provided through various mechanisms and ensures that the containers described in those PodSpecs are running and healthy. The kubelet doesn't manage containers which were not created by Kubernetes.\n\nkube-proxy\n\nkube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.\n\nkube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.\n\nkube-proxy uses the operating system packet filtering layer if there is one and it's available. Otherwise, kube-proxy forwards the traffic itself.\n\nContainer runtime\n\nA fundamental component that empowers Kubernetes to run containers effectively. It is responsible for managing the execution and lifecycle of containers within the Kubernetes environment.\n\nKubernetes supports container runtimes such as containerd, CRI-O, and any other implementation of the Kubernetes CRI (Container Runtime Interface).\n\nAddons\n\nAddons use Kubernetes resources (DaemonSet, Deployment, etc) to implement cluster features. Because these are providing cluster-level features, namespaced resources for addons belong within the kube-system namespace.\n\nSelected addons are described below; for an extended list of available addons, please see Addons.\n\nDNS\n\nWhile the other addons are not strictly required, all Kubernetes clusters should have cluster DNS, as many examples rely on it.\n\nCluster DNS is a DNS server, in addition to the other DNS server(s) in your environment, which serves DNS records for Kubernetes services.\n\nContainers started by Kubernetes automatically include this DNS server in their DNS searches.\n\nWeb UI (Dashboard)\n\nDashboard is a general purpose, web-based UI for Kubernetes clusters. It allows users to manage and troubleshoot applications running in the cluster, as well as the cluster itself.\n\nContainer Resource Monitoring\n\nContainer Resource Monitoring records generic time-series metrics about containers in a central database, and provides a UI for browsing that data.\n\nCluster-level Logging\n\nA cluster-level logging mechanism is responsible for saving container logs to a central log store with search/browsing interface.\n\nNetwork Plugins\n\nNetwork plugins are software components that implement the container network interface (CNI) specification. They are responsible for allocating IP addresses to pods and enabling them to communicate with each other within the cluster.\n\nWhat's next\n\nLearn more about the following:"
    }
}