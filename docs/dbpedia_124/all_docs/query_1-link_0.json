{
    "id": "dbpedia_124_1",
    "rank": 0,
    "data": {
        "url": "https://www.geeksforgeeks.org/caesar-cipher-in-cryptography/",
        "read_more_link": "",
        "language": "en",
        "title": "Caesar Cipher in Cryptography",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/ceaserCipher.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/caesar-cipher/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2016-06-02T04:43:27",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/caesar-cipher-in-cryptography/",
        "text": "Last Updated : 27 Jun, 2024\n\nImprove\n\nThe Caesar Cipher is one of the simplest and oldest methods of encrypting messages, named after Julius Caesar, who reportedly used it to protect his military communications. This technique involves shifting the letters of the alphabet by a fixed number of places. For example, with a shift of three, the letter ‘A’ becomes ‘D’, ‘B’ becomes ‘E’, and so on. Despite its simplicity, the Caesar Cipher formed the groundwork for modern cryptographic techniques. In this article, we’ll explore how the Caesar Cipher works, its significance, and its impact on the development of cryptography with its advantages and disadvantages.\n\nWhat is Caesar Cipher Technique?\n\nThe Caesar cipher is a simple encryption technique that was used by Julius Caesar to send secret messages to his allies. It works by shifting the letters in the plaintext message by a certain number of positions, known as the “shift” or “key”. The Caesar Cipher technique is one of the earliest and simplest methods of encryption techniques.\n\nIt’s simply a type of substitution cipher, i.e., each letter of a given text is replaced by a letter with a fixed number of positions down the alphabet. For example with a shift of 1, A would be replaced by B, B would become C, and so on. The method is apparently named after Julius Caesar, who apparently used it to communicate with his officials.\n\nCryptography Algorithm For the Caesar Cipher\n\nThus to cipher a given text we need an integer value, known as a shift which indicates the number of positions each letter of the text has been moved down.\n\nThe encryption can be represented using modular arithmetic by first transforming the letters into numbers, according to the scheme, A = 0, B = 1,…, Z = 25. Encryption of a letter by a shift n can be described mathematically as.\n\nFor example, if the shift is 3, then the letter A would be replaced by the letter D, B would become E, C would become F, and so on. The alphabet is wrapped around so that after Z, it starts back at A.\n\nHere is an example of how to use the Caesar cipher to encrypt the message “HELLO” with a shift of 3:\n\nWrite down the plaintext message: HELLO\n\nChoose a shift value. In this case, we will use a shift of 3.\n\nReplace each letter in the plaintext message with the letter that is three positions to the right in the alphabet.\n\nH becomes K (shift 3 from H)\n\nE becomes H (shift 3 from E)\n\nL becomes O (shift 3 from L)\n\nL becomes O (shift 3 from L)\n\nO becomes R (shift 3 from O)\n\n4.The encrypted message is now “KHOOR”.\n\nTo decrypt the message, you simply need to shift each letter back by the same number of positions. In this case, you would shift each letter in “KHOOR” back by 3 positions to get the original message, “HELLO”.\n\n[Tex]E_n(x)=(x+n)mod\\ 26 [/Tex]\n\n(Encryption Phase with shift n)\n\n[Tex]D_n(x)=(x-n)mod\\ 26 [/Tex]\n\n(Decryption Phase with shift n)\n\nExamples :\n\nText : ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nShift: 23\n\nCipher: XYZABCDEFGHIJKLMNOPQRSTUVW\n\nText : ATTACKATONCE\n\nShift: 4\n\nCipher: EXXEGOEXSRGI\n\nAdvantages\n\nEasy to implement and use thus, making suitable for beginners to learn about encryption.\n\nCan be physically implemented, such as with a set of rotating disks or a set of cards, known as a scytale, which can be useful in certain situations.\n\nRequires only a small set of pre-shared information.\n\nCan be modified easily to create a more secure variant, such as by using a multiple shift values or keywords.\n\nDisadvantages\n\nIt is not secure against modern decryption methods.\n\nVulnerable to known-plaintext attacks, where an attacker has access to both the encrypted and unencrypted versions of the same messages.\n\nThe small number of possible keys means that an attacker can easily try all possible keys until the correct one is found, making it vulnerable to a brute force attack.\n\nIt is not suitable for long text encryption as it would be easy to crack.\n\nIt is not suitable for secure communication as it is easily broken.\n\nDoes not provide confidentiality, integrity, and authenticity in a message.\n\nFeatures of Caesar Cipher\n\nSubstitution cipher: The Caesar cipher is a type of substitution cipher, where each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet.\n\nFixed key: The Caesar cipher uses a fixed key, which is the number of positions by which the letters are shifted. This key is known to both the sender and the receiver.\n\nSymmetric encryption: The Caesar cipher is a symmetric encryption technique, meaning that the same key is used for both encryption and decryption.\n\nLimited keyspace: The Caesar cipher has a very limited keyspace of only 26 possible keys, as there are only 26 letters in the English alphabet.\n\nVulnerable to brute force attacks: The Caesar cipher is vulnerable to brute force attacks, as there are only 26 possible keys to try.\n\nEasy to implement: The Caesar cipher is very easy to implement and requires only simple arithmetic operations, making it a popular choice for simple encryption tasks.\n\nRules for the Caesar Cipher\n\nChoose a number between 1 and 25. This will be your “shift” value.\n\nWrite down the letters of the alphabet in order, from A to Z.\n\nShift each letter of the alphabet by the “shift” value. For example, if the shift value is 3, A would become D, B would become E, C would become F, and so on.\n\nEncrypt your message by replacing each letter with the corresponding shifted letter. For example, if the shift value is 3, the word “hello” would become “khoor”.\n\nTo decrypt the message, simply reverse the process by shifting each letter back by the same amount. For example, if the shift value is 3, the encrypted message “khoor” would become “hello”.\n\nAlgorithm for Caesar Cipher\n\nInput:\n\nChoose a shift value between 1 and 25.\n\nWrite down the alphabet in order from A to Z.\n\nCreate a new alphabet by shifting each letter of the original alphabet by the shift value. For example, if the shift value is 3, the new alphabet would be:\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\nD E F G H I J K L M N O P Q R S T U V W X Y Z A B C\n\nReplace each letter of the message with the corresponding letter from the new alphabet. For example, if the shift value is 3, the word “hello” would become “khoor”.\n\nTo decrypt the message, shift each letter back by the same amount. For example, if the shift value is 3, the encrypted message “khoor” would become “hello”.\n\nProcedure:\n\nTraverse the given text one character at a time .\n\nFor each character, transform the given character as per the rule, depending on whether we’re encrypting or decrypting the text.\n\nReturn the new string generated.\n\nA program that receives a Text (string) and Shift value( integer) and returns the encrypted text.\n\nC++\n\n// A C++ program to illustrate Caesar Cipher Technique #include <iostream> using namespace std; // This function receives text and shift and // returns the encrypted text string encrypt(string text, int s) { string result = \"\"; // traverse text for (int i = 0; i < text.length(); i++) { // apply transformation to each character // Encrypt Uppercase letters if (isupper(text[i])) result += char(int(text[i] + s - 65) % 26 + 65); // Encrypt Lowercase letters else result += char(int(text[i] + s - 97) % 26 + 97); } // Return the resulting string return result; } // Driver program to test the above function int main() { string text = \"ATTACKATONCE\"; int s = 4; cout << \"Text : \" << text; cout << \"\\nShift: \" << s; cout << \"\\nCipher: \" << encrypt(text, s); return 0; }\n\nJava\n\n//A Java Program to illustrate Caesar Cipher Technique class CaesarCipher { // Encrypts text using a shift of s public static StringBuffer encrypt(String text, int s) { StringBuffer result= new StringBuffer(); for (int i=0; i<text.length(); i++) { if (Character.isUpperCase(text.charAt(i))) { char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); result.append(ch); } else { char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); result.append(ch); } } return result; } // Driver code public static void main(String[] args) { String text = \"ATTACKATONCE\"; int s = 4; System.out.println(\"Text : \" + text); System.out.println(\"Shift : \" + s); System.out.println(\"Cipher: \" + encrypt(text, s)); } }\n\nPython\n\n#A python program to illustrate Caesar Cipher Technique def encrypt(text,s): result = \"\" # traverse text for i in range(len(text)): char = text[i] # Encrypt uppercase characters if (char.isupper()): result += chr((ord(char) + s-65) % 26 + 65) # Encrypt lowercase characters else: result += chr((ord(char) + s - 97) % 26 + 97) return result #check the above function text = \"ATTACKATONCE\" s = 4 print (\"Text : \" + text) print (\"Shift : \" + str(s)) print (\"Cipher: \" + encrypt(text,s))\n\nC#\n\n// A C# Program to illustrate Caesar Cipher Technique using System; using System.Text; public class CaesarCipher { // Encrypts text using a shift on s public static StringBuilder encrypt(String text, int s) { StringBuilder result= new StringBuilder(); for (int i=0; i<text.Length; i++) { if (char.IsUpper(text[i])) { char ch = (char)(((int)text[i] + s - 65) % 26 + 65); result.Append(ch); } else { char ch = (char)(((int)text[i] + s - 97) % 26 + 97); result.Append(ch); } } return result; } // Driver code public static void Main(String[] args) { String text = \"ATTACKATONCE\"; int s = 4; Console.WriteLine(\"Text : \" + text); Console.WriteLine(\"Shift : \" + s); Console.WriteLine(\"Cipher: \" + encrypt(text, s)); } } /* This code contributed by PrinciRaj1992 */\n\nJavaScript\n\n<script> //A Javascript Program to illustrate Caesar Cipher Technique // Encrypts text using a shift on s function encrypt(text, s) { let result=\"\" for (let i = 0; i < text.length; i++) { let char = text[i]; if (char.toUpperCase(text[i])) { let ch = String.fromCharCode((char.charCodeAt(0) + s-65) % 26 + 65); result += ch; } else { let ch = String.fromCharCode((char.charCodeAt(0) + s-97) % 26 + 97); result += ch; } } return result; } // Driver code let text = \"ATTACKATONCE\"; let s = 4; document.write(\"Text : \" + text + \"<br>\"); document.write(\"Shift : \" + s + \"<br>\"); document.write(\"Cipher: \" + encrypt(text, s) + \"<br>\"); // This code is contributed by avanitrachhadiya2155 </script>\n\nPHP\n\n<?php // A PHP program to illustrate Caesar // Cipher Technique // This function receives text and shift // and returns the encrypted text function encrypt($text, $s) { $result = \"\"; // traverse text for ($i = 0; $i < strlen($text); $i++) { // apply transformation to each // character Encrypt Uppercase letters if (ctype_upper($text[$i])) $result = $result.chr((ord($text[$i]) + $s - 65) % 26 + 65); // Encrypt Lowercase letters else $result = $result.chr((ord($text[$i]) + $s - 97) % 26 + 97); } // Return the resulting string return $result; } // Driver Code $text = \"ATTACKATONCE\"; $s = 4; echo \"Text : \" . $text; echo \"\\nShift: \" . $s; echo \"\\nCipher: \" . encrypt($text, $s); // This code is contributed by ita_c ?>\n\nOutput\n\nText : ATTACKATONCE Shift: 4 Cipher: EXXEGOEXSRGI\n\nTime complexity: O(N) where N is length of the given text\n\nAuxiliary space: O(N)\n\nHow to decrypt?\n\nWe can either write another function decrypt similar to encrypt, that’ll apply the given shift in the opposite direction to decrypt the original text. However we can use the cyclic property of the cipher under modulo, hence we can simply observe\n\nCipher(n) = De-cipher(26-n)\n\nHence, we can use the same function to decrypt, instead, we’ll modify the shift value such that shift = 26-shift (Refer to this for a sample run in C++).\n\nConclusion\n\nThe Caesar Cipher, with its straightforward approach of shifting letters, serves as an excellent introduction to the world of cryptography. While it is easy to understand and implement, its simplicity also makes it vulnerable to basic attacks. Despite these limitations, the Caesar Cipher’s historical role is significant, it represents the early efforts to secure communication and has made the way for the more advanced encryption methods used today. Understanding the Caesar Cipher helps us appreciate the evolution of cryptographic techniques and the ongoing quest to protect information in our digital age.\n\nFrequently Asked Question on Caesar Cipher in Cryptography -FAQs\n\nWhat is the Caesar cipher in cryptography?\n\nThe Caesar Cipher, used by Julius Caesar around 58 BC, is a method that scrambles a message by shifting its letters. For example, shifting ‘A’ by three positions makes it ‘D’. To read the message, the receiver reverses this shift. Later, an Arab mathematician cracked the Caesar Cipher by analyzing how often each letter appears, which helped him figure out the pattern and decode the message.\n\nWhat is an example of decryption in Caesar cipher?\n\nAn example of decryption in the Caesar cipher is decrypting the message KHOOR. If the original shift used to encrypt the message was 3, you would reverse this by shifting each letter back by 3 places in the alphabet. Thus, K shifts to H, H to E, O to L, and R to O, revealing the decrypted message: HELLO.\n\nWhat are keys in Caesar cipher?\n\nIn the Caesar cipher, the key is a letter that shows how many places to shift each letter in the message. For example, a key D means “shift 3 places,” and a key M means “shift 12 places.” A key A means “do not shift,” and a key Z means either “shift 25 places” or “shift one place backwards.”\n\nA\n\nAshutosh Kumar\n\nPlease Login to comment..."
    }
}