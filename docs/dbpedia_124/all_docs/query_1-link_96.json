{
    "id": "dbpedia_124_1",
    "rank": 96,
    "data": {
        "url": "https://www.101computing.net/xor-encryption-algorithm/",
        "read_more_link": "",
        "language": "en",
        "title": "XOR Encryption Algorithm",
        "top_image": "https://www.101computing.net/wp/wp-content/uploads/encryption.png",
        "meta_img": "https://www.101computing.net/wp/wp-content/uploads/encryption.png",
        "images": [
            "https://www.101computing.net/wp/wp-content/uploads/101-computing-dot-net.png",
            "https://www.101computing.net/wp/wp-content/themes/responsive/core/icons/twitter-icon.png",
            "https://www.101computing.net/wp/wp-content/themes/responsive/core/icons/facebook-icon.png",
            "https://www.101computing.net/wp/wp-content/themes/responsive/core/icons/youtube-icon.png",
            "https://www.101computing.net/wp/wp-content/themes/responsive/core/icons/instagram-icon.png",
            "https://www.101computing.net/wp/wp-content/uploads/symmetric-encryption.png",
            "https://www.101computing.net/wp/wp-content/uploads/xor-encryption-keys.png",
            "https://www.101computing.net/wp/wp-content/uploads/rail-fence-cipher-encoding-key-4-150x150.png",
            "https://www.101computing.net/wp/wp-content/uploads/Access-Card-XL-1-150x150.png",
            "https://www.101computing.net/wp/wp-content/uploads/Caesar_substition_cipher-2-150x150.png",
            "https://www.101computing.net/wp/wp-content/uploads/atbash-cipher-150x150.png",
            "https://www.101computing.net/wp/wp-content/uploads/LMC-Simulator-icon.png",
            "https://www.101computing.net/wp/wp-content/uploads/flowchart-studio-icon.png",
            "https://www.101computing.net/wp/wp-content/uploads/python-code-syntax-icon.png",
            "https://www.101computing.net/wp/wp-content/uploads/reddit_101computing_hub.png",
            "https://www.101computing.net/wp/wp-content/uploads/logo-101-Extra-Python-Challenges-260.png"
        ],
        "movies": [
            "/wp/wp-content/uploads/xor-encryption.html",
            "https://trinket.io/embed/python/1b24661755"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Administrator"
        ],
        "publish_date": "2020-11-28T14:22:58+00:00",
        "summary": "",
        "meta_description": "The XOR Encryption algorithm is a very effective yet easy to implement method of symmetric encryption. Due to its effectiveness and simplicity, the XOR Encryption is an extremely common component used in more complex encryption algorithms used nowadays. The XOR encryption algorithm is an example of symmetric encryption where the same key is used to",
        "meta_lang": "en",
        "meta_favicon": "https://www.101computing.net/wp/wp-content/themes/responsive-child/favicon.ico",
        "meta_site_name": "101 Computing - Boost Your Programming Skills!",
        "canonical_link": "https://www.101computing.net/xor-encryption-algorithm/",
        "text": "The XOR Encryption algorithm is a very effective yet easy to implement method of symmetric encryption. Due to its effectiveness and simplicity, the XOR Encryption is an extremely common component used in more complex encryption algorithms used nowadays.\n\nThe XOR encryption algorithm is an example of symmetric encryption where the same key is used to both encrypt and decrypt a message.\n\nThe XOR Encryption algorithm is based on applying an XOR mask using the plaintext and a key:\n\nReapplying the same XOR mask (using the same key) to the cipher text outputs the original plain text. The following truth table (based on the XOR truth table) demonstrates how the encryption process works.\n\nP (Plain text) K (Key) C (Cipher)\n\n=\n\nP XOR K K (Key) P (Plain Text)\n\n=\n\nC XOR K 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1\n\nThe XOR encryption algorithm can be applied to any digital/binary information, included text based information encoded using the 8-bit ASCII code. In this case the encryption key can be expressed as a string of characters.\n\nBy itself, the XOR encryption can be very robust if:\n\nIt is based on a long key that will not repeat itself. (e.g. a key that contains as many bits/characters as the plaintext)\n\nA new key is randomly generated for any new communication.\n\nThe key is kept secret by both the sender and the receiver.\n\nWhen a large quantity of text is to be encrypted, a shorter repeating encryption key is used to match the length of the plain text. However re-using the same key over and over, or using a shorter repeating key results in a less secure method where the cipher text could be decrypted using a frequency analysis.\n\nPython Code\n\nIn this Python code we are using the XOR bitwise operator (in Python: ^) to apply the XOR mask using the plain text and the key.\n\nTo improve readability, we are displaying the cipher text in different format: Ascii, Denary, Hexadecimal and Binary format."
    }
}