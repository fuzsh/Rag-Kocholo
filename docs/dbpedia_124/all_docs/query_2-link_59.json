{
    "id": "dbpedia_124_2",
    "rank": 59,
    "data": {
        "url": "https://code.visualstudio.com/docs/languages/cpp",
        "read_more_link": "",
        "language": "en",
        "title": "C++ programming with Visual Studio Code",
        "top_image": "https://code.visualstudio.com/assets/docs/languages/cpp/languages-cpp-social.png",
        "meta_img": "https://code.visualstudio.com/assets/docs/languages/cpp/languages-cpp-social.png",
        "images": [
            "https://code.visualstudio.com/assets/icons/theme-light.svg",
            "https://code.visualstudio.com/assets/icons/theme-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/docs/languages/cpp/msg-intellisense.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/cpp-extension.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/cpp-install-msys2-toolchain.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/new-file.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/run-play-button.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/select-gcc-compiler.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/helloworld-terminal-output.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/cpp-toc.png",
            "https://code.visualstudio.com/assets/docs/languages/cpp/copilot-extension.png",
            "https://code.visualstudio.com/assets/icons/x-icon.svg",
            "https://code.visualstudio.com/assets/icons/github-icon.svg",
            "https://code.visualstudio.com/assets/icons/youtube-icon.svg",
            "https://code.visualstudio.com/assets/icons/microsoft.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Microsoft"
        ],
        "publish_date": "2021-11-03T00:00:00",
        "summary": "",
        "meta_description": "Find out how to get the best out of Visual Studio Code and C++.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://code.visualstudio.com/docs/languages/cpp",
        "text": "C/C++ for Visual Studio Code\n\nC/C++ support for Visual Studio Code is provided by a Microsoft C/C++ extension to enable cross-platform C and C++ development on Windows, Linux, and macOS. When you create a *.cpp file, the extension adds features such as syntax highlighting (colorization), smart completions and hovers (IntelliSense), and error checking.\n\nInstall the extension\n\nOpen VS Code.\n\nSelect the Extensions view icon on the Activity bar or use the keyboard shortcut (⇧⌘X (Windows, Linux Ctrl+Shift+X)).\n\nSearch for 'C++'.\n\nSelect Install.\n\nSet up your C++ Environment\n\nC++ is a compiled language meaning your program's source code must be translated (compiled) before it can be run on your computer. The C/C++ extension doesn't include a C++ compiler or debugger, since VS Code as an editor relies on command-line tools for the development workflow. You need to install these tools or use the tools already installed on your computer.\n\nCheck if you have a compiler installed\n\nNote: There may already be a C++ compiler and debugger provided by your academic or work development environment. Check with your instructors or colleagues for guidance on installing the recommended C++ toolset (compiler, debugger, project system, linter).\n\nCommon compilers that already come preinstalled on some platforms are the GNU Compiler Collection (GCC) on Linux and the Clang tools with Xcode on macOS.\n\nTo check if you already have them installed:\n\nOpen a new VS Code terminal window using (⌃⇧` (Windows, Linux Ctrl+Shift+`))\n\nUse the following command to check for the GCC compiler g++:\n\ng++ --version\n\nOr this command for the Clang compiler clang:\n\nclang --version\n\nThe output should show you the compiler version and details. If neither are found, make sure your compiler executable is in your platform path (%PATH on Windows, $PATH on Linux and macOS) so that the C/C++ extension can find it. Otherwise, use the instructions in the section below to install a compiler.\n\nInstall a compiler\n\nIf you don't have a compiler installed, you can follow one of our installation tutorials:\n\nWindows:\n\nGo to the MSVC tutorial\n\nGo to the MinGW tutorial\n\nLinux:\n\nGo to the GCC tutorial\n\nmacOS:\n\nGo to the Clang tutorial\n\nNote: If you would prefer a full Integrated Development Environment (IDE), with built-in compilation, debugging, and project templates (File > New Project), there are many options available, such as the Visual Studio Community edition.\n\nExample: Install MinGW-x64 on Windows\n\nTo understand the process, let's install Mingw-w64 via MSYS2. Mingw-w64 is a popular, free toolset on Windows. It provides up-to-date native builds of GCC, Mingw-w64, and other helpful C++ tools and libraries.\n\nDownload using this direct link to the MinGW installer.\n\nRun the installer and follow the steps of the installation wizard. Note, MSYS2 requires 64 bit Windows 8.1 or newer.\n\nIn the wizard, choose your desired Installation Folder. Record this directory for later. In most cases, the recommended directory is acceptable. The same applies when you get to setting the start menu shortcuts step. When complete, ensure the Run MSYS2 now box is checked and select Finish. A MSYS2 terminal window will then automatically open.\n\nIn this terminal, install the MinGW-w64 toolchain by running the following command:\n\npacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain\n\nAccept the default number of packages in the toolchain group by pressing Enter.\n\nEnter Y when prompted whether to proceed with the installation.\n\nAdd the path of your MinGW-w64 bin folder to the Windows PATH environment variable by using the following steps:\n\nIn the Windows search bar, type Settings to open your Windows Settings.\n\nSearch for Edit environment variables for your account.\n\nIn your User variables, select the Path variable and then select Edit.\n\nSelect New and add the MinGW-w64 destination folder you recorded during the installation process to the list. If you selected the default installation steps, the path is: C:\\msys64\\ucrt64\\bin.\n\nSelect OK, and then select OK again in the Environment Variables window to update the PATH environment variable. You have to reopen any console windows for the updated PATH environment variable to be available.\n\nCheck that your MinGW-w64 tools are correctly installed and available, open a new Command Prompt and type:\n\ngcc --version g++ --version gdb --version\n\nYou should see output that states which versions of GCC, g++ and GDB you have installed. If this is not the case, make sure your PATH entry matches the Mingw-w64 binary location where the compiler tools are located or reference the troubleshooting section.\n\nCreate a Hello World App\n\nTo make sure the compiler is installed and configured correctly, lets create a Hello World C++ program.\n\nCreate a C++ file\n\nOn Windows, launch a Windows command prompt (Enter Windows command prompt in the Windows search bar). On macOS and Linux, you can enter these commands in the terminal.\n\nRun the following commands. They are creating an empty folder called projects where you can place all your VS Code projects. The next commands create and navigate you to a subfolder called helloworld. From there, you are opening helloworld directly in VS Code using the code command.\n\nmkdir projects cd projects mkdir helloworld cd helloworld code .\n\nThe \"code .\" command opens VS Code in the current working folder, which becomes your \"workspace\". Accept the Workspace Trust dialog by selecting Yes, I trust the authors since this is a folder you created.\n\nNow create a new file called helloworld.cpp with the New File button in the File Explorer or File > New File command.\n\nAdd Hello World source code\n\nPaste in the following source code:\n\n#include<iostream> intmain() { std::cout <<\"Hello World\"<<std::endl; }\n\nNow press ⌘S (Windows, Linux Ctrl+S) to save the file. You can also enable AutoSave to automatically save your file changes, by checking Auto Save in the main File menu.\n\nRun helloworld.cpp\n\nMake sure you have helloworld.cpp open so it is the active file in your editor.\n\nPress the play button in the top right corner of the editor.\n\nChoose C/C++: g++.exe build and debug active file from the list of detected compilers on your system.\n\nYou are only prompted to choose a compiler the first time you run helloworld.cpp. This compiler becomes \"default\" compiler set in your tasks.json file.\n\nAfter the build succeeds, you should see \"Hello World\" appear in the integrated Terminal.\n\nCongratulations! You've just run your first C++ program in VS Code! The next step is to learn more about the Microsoft C/C++ extension's language features such as IntelliSense, code navigation, build configuration, and debugging using one of the Tutorials in the next section.\n\nTutorials\n\nGet started with C++ and VS Code with tutorials for your environment:\n\nGCC on Windows via MinGW\n\nMicrosoft C++ on Windows\n\nGCC on Linux\n\nGCC on Windows Subsystem For Linux\n\nClang/LLVM on macOS\n\nCMake Tools on Linux\n\nDocumentation\n\nYou can find more documentation on using the Microsoft C/C++ extension under the C++ section of the VS Code website, where you can find articles on:\n\nDebugging\n\nEditing\n\nSettings\n\nFAQ\n\nRemote Development\n\nVS Code and the C++ extension support Remote Development allowing you to work over SSH on a remote machine or VM, inside a Docker container, or in the Windows Subsystem for Linux (WSL).\n\nTo install support for Remote Development:\n\nInstall the VS Code Remote Development Extension Pack.\n\nIf the remote source files are hosted in WSL, use the WSL extension.\n\nIf you are connecting to a remote machine with SSH, use the Remote - SSH extension.\n\nIf the remote source files are hosted in a container (for example, Docker), use the Dev Containers extension.\n\nEnhance completions with AI\n\nGitHub Copilot is an AI-powered code completion tool that helps you write code faster and smarter. You can use the GitHub Copilot extension in VS Code to generate code, or to learn from the code it generates.\n\nGitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.\n\nYou can learn more about how to get started with Copilot in the Copilot documentation.\n\nFeedback"
    }
}