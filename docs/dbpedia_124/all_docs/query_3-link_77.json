{
    "id": "dbpedia_124_3",
    "rank": 77,
    "data": {
        "url": "https://www.esecurityplanet.com/networks/strong-encryption/",
        "read_more_link": "",
        "language": "en",
        "title": "Strong Encryption Explained: 6 Encryption Best Practices",
        "top_image": "https://assets.esecurityplanet.com/uploads/2024/01/esp_20240105-strong-encryption.png",
        "meta_img": "https://assets.esecurityplanet.com/uploads/2024/01/esp_20240105-strong-encryption.png",
        "images": [
            "https://assets.esecurityplanet.com/uploads/2020/11/eSecurity_logo_MainLogo.png",
            "https://assets.dev.esecurityplanet.com/uploads/2020/10/eSecurity_WhiteType_logo_MainLogo-copy.png",
            "https://assets.esecurityplanet.com/uploads/2024/01/ESP_6BestPracticesForDeployingStrongEncryption_2024_DA_rnd2-990x1024.png",
            "https://assets.esecurityplanet.com/uploads/2023/08/2023-Kime-HeadShot-150x150.jpg",
            "https://assets.esecurityplanet.com/uploads/2024/08/esp_20240808-crowdstrike-class-action-lawsuit-for-massive-software-outage.png",
            "https://assets.esecurityplanet.com/uploads/2024/08/esp_20240808-cloud-security-assessment.png",
            "https://assets.esecurityplanet.com/uploads/2024/08/esp_20240807-cloud-security-strategy.png",
            "https://assets.esecurityplanet.com/uploads/2024/08/esp_20240805-vulnerability-recap-august-05-2024.png",
            "https://assets.esecurityplanet.com/uploads/2024/06/esp_20240625-secure-web-gateway.png",
            "https://assets.esecurityplanet.com/uploads/2024/06/esp_20240621-network-firewalls.png",
            "https://assets.esecurityplanet.com/uploads/2024/05/esp_20240531-secure-web-gateway-vs-firewall.png",
            "https://assets.esecurityplanet.com/uploads/2020/10/eSecurity_logo_RetinaLogo_White-300x99.png",
            "https://assets.esecurityplanet.com/uploads/2021/03/TAwhitefooter.png",
            "https://assets.esecurityplanet.com/uploads/2020/08/datamationwhitefooter.png",
            "https://assets.esecurityplanet.com/uploads/2021/03/webowhitefooter.png",
            "https://assets.esecurityplanet.com/uploads/2021/03/ENP_whitefooter_stack.png",
            "https://assets.esecurityplanet.com/uploads/2020/10/eweekfooter.png",
            "https://assets.esecurityplanet.com/uploads/2020/08/PMcomwhitefooter-09.png",
            "https://assets.esecurityplanet.com/uploads/2021/03/serverwatchwhitefooter-10.png",
            "https://assets.esecurityplanet.com/uploads/2021/03/ITBEwhitefooter-copy.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Chad Kime"
        ],
        "publish_date": "2024-01-09T08:00:00+00:00",
        "summary": "",
        "meta_description": "Stronger encryption best practices increase the security of your network. Discover how to achieve stronger encryption now.",
        "meta_lang": "",
        "meta_favicon": "https://assets.esecurityplanet.com/uploads/2020/10/eSecurity_logo_Favicon.png",
        "meta_site_name": "eSecurity Planet",
        "canonical_link": "https://www.esecurityplanet.com/networks/strong-encryption/",
        "text": "eSecurity Planet content and product recommendations are editorially independent. We may make money when you click on links to our partners. Learn More.\n\nStrong encryption protects data securely from unauthorized access, but the specific algorithms that qualify as strong encryption change over time as computing power increases and researchers develop new ways to break encryption. In practice, security tools provide many encryption options that confuse uneducated users — including broken encryption options. Yet even the strongest encryption options depend upon key best practices to support effective encryption deployment.\n\nWhat Makes an Encryption Algorithm Strong?\n\nA strong encryption algorithm requires a strong encryption key, a strong mathematical algorithm, and a complex encryption process.\n\nStrong encryption keys are passwords for encryption. The longer the password or the more complex the password, the more difficult it will be to guess. However, as binary numbers, encryption keys lack complexity and therefore require length. Most encryption algorithms require a minimum of 128 bits (a combination of 128 zeroes and ones).\n\nStrong mathematical algorithms use the key to feed an algorithm made of simple mathematical processes. Current encryption algorithms use points on an ellipse, multiply large prime numbers, or implement exclusive OR (XOR) logical operations on portions of data as the basis for the algorithm.\n\nA complex encryption process uses a complex combination of the encryption key and the mathematical algorithms on blocks of data over multiple rounds of encryption. For example, the Blowfish algorithm uses simple XOR functions and performs four actions within each of the 16 rounds of encryption:\n\nXOR the left half of the data with an 18 entry P-array.\n\nUse the XOR data as input for a F-Function (to transform data).\n\nXOR the F-function’s output with the right half of the data.\n\nSwap the left and right halves of the results to use as the inputs in the next round.\n\nIndividually, each element provides partial protection. The combination of the keys, the algorithms, and the encryption process provides the full strength of the encryption process. Keep in mind that encryption transforms the data to prevent discovery and doesn’t simply mask the data like in tokenization or provide an output to check for tampering such as in hashing.\n\nWhen Strong Encryption Becomes Weak\n\nEvery type of strong encryption starts off unbreakable, but all encryption schemes become weak because of improved cryptographic analysis techniques and stronger computing power. This combination erodes the capability of older encryption algorithms but also powers the new algorithms that will be developed.\n\nFor example, the earliest government-endorsed encryption algorithm, DES, encrypted using 64-bit blocks, 16 rounds of encryption, and a key of only 56 bits. This 56 bit key originally taxed existing computing resources but became vulnerable to brute force guessing as computing power improved.\n\nIn 1997, AES encryption replaced DES with stronger encryption that increased block sizes to 128 bits, used 10 to 14 rounds of encryption, and increased key sizes to a minimum of 128 bits. The National Institute of Standards and Technology (NIST) currently promotes AES as a strong encryption standard but also acknowledges that quantum computing likely renders AES vulnerable sometime in the next 20 years.\n\nHarnessing ever-more-powerful computing will challenge the effectiveness of encryption algorithms, but failed encryption processes currently expose more data than weak encryption algorithm strength. Best practice adoption protects the encryption process to avoid stolen, revealed, or guessable encryption keys.\n\n6 Best Practices for Deploying Strong Encryption\n\nAs with any other security tool in network or cloud security, improper deployment undermines even the strongest capabilities. While equal in importance, most organizations will discover a practical hierarchy for implementing the top six encryption best practices.\n\nSecurity teams generally first use appropriate encryption, learn the encryption environment, and use the longest supportable keys. These best practices don’t require additional tools and deliver immediate benefits for security. Next, an organization will encrypt in layers, secure and centralize key management, and secure app and web encryption. This second triad of best practices delivers comparably critical importance and benefit to the first triad but often requires additional tools, resources, and buy-in to implement.\n\nUse Appropriate Encryption\n\nEliminate known-bad or weak encryption and use the appropriate encryption for the task. Weak encryption algorithms (see below) no longer protect data because attackers easily break the algorithms or guess the keys using modern computing power. Security tools still include weak options to enable backward compatibility for previously encrypted data, but you should eliminate the current use of known-bad encryption.\n\nAlso, different types of encryption will be required for different uses. For example, asymmetric encryption uses public encryption keys to provide superior encryption for data transmission and data sharing, but asymmetric encryption will be too operationally intense to provide efficient and usable encryption for database fields, full-disk drives, or local files.\n\nLearn the Encryption Environment\n\nAssess and inventory encryption use throughout to replace obsolete protections and to ensure universal application of other encryption best practices. Just as with any other security practice such as asset discovery or data analysis, unknowns can’t be monitored or controlled.\n\nSimilarly, compare current encrypted data use against data use throughout the organization. Almost all organizations apply full disk encryption to servers to protect important data at rest, but sensitive data requires continuous protection and data use may require additional file, email, or database encryption.\n\nUse the Longest Supportable Encryption Keys\n\nAdopt password managers or centralized encryption management to offset the limited capacity of humans to memorize passwords and increase computing power to offset operational limitations. The longer the key, the stronger the security.\n\nHowever, universally increased encryption keys increase costs and some organizations can’t afford using the strongest option for all data. The best approach usually restricts data to specific systems and then applies different key lengths for different purposes. For example, shorter keys protect less sensitive data on a laptop and longer keys protect sensitive data stored on a server.\n\nEncrypt in Layers\n\nUse multiple types and multiple layers of encryption to improve resilience against attacks. Just as with any other security technology, encryption requires defense in depth and multiple layers of encryption limit the damage possible from the failure of any single encryption solution – especially for the most critical data.\n\nEach later hardens the environment and further resists unauthorized decryption attempts. For example, Microsoft recommends using disk encryption to encrypt data at rest, separate database encryption, and encrypted VPN gateways for data transmission.\n\nSecure & Centralize Key Management\n\nUse encryption experts and centralize encryption key management for improved security. Attackers target the weakest point and won’t need to spend resources to crack an encryption algorithm when the keys can simply be stolen. The more important the data, the more important it is that security professionals control and manage the encryption key process.\n\nA fully trained security team can enact centralized key management to professionally generate, rotate, renew, and retire encryption keys. Centralized management enables higher security levels and improved security processes such as regular access or audit log reviews, encryption tracking within long-term backups, and secure access management of encryption resources.\n\nSecure App & Web Encryption\n\nEnable improved application and website encryption through professional tools and encryption education. The OWASP Top 10 lists the most serious and common vulnerabilities for developers (DevOps) and web application security. Cryptographic failures occupy second place on this list because of the poor management of encryption components, the use of weak encryption algorithms, or the improper deployment of encryption algorithms.\n\nWeak encryption algorithms undermine security, but DevOps programmers don’t always possess the encryption expertise to recognize weak encryption. Security teams educate Dev teams with lists of approved and disallowed encryption algorithms or libraries to reduce weak encryption risk. DevOps further reduces this risk with application vulnerability scanners that detect inappropriate use of encryption.\n\nPoor management of encryption components deviates from the principle of secured and centralized key management by leaking keys or improperly managing certificates. For example, maintain and secure web server secure sockets layer (SSL) digital certificates to facilitate encrypted connections and to prevent attackers from stealing and using corporate certificates in impersonation attacks.\n\nImproper deployment of encryption tends to originate from programming mistakes or misunderstandings about how to execute complex encryption algorithm processes. Use an established encryption solution to avoid common issues such as failure to change variables, improperly generating random numbers for key generation, or using code that becomes vulnerable to malicious or unexpected inputs to the algorithm.\n\nStrongest Encryption Options\n\nWith best practices in place, select the strongest encryption options. In many cases, encryption tools provide a selection that includes known-bad (covered below), good, and better algorithms. Yet the menu options rarely provide any clues as to which options provide in which category or which may be unsafe.\n\nEncryption seen as good provides adequate protection, but select better encryption as time, capabilities, and budgets allow. The higher the risk of data theft or the more sensitive the data, the more urgently a transition to better encryption should be considered.\n\nCurrently, there’s no consensus for the “best” encryption because cost and use case play such a strong role in determining what any organization can deploy. Even newer quantum-resistant algorithms aren’t seen as superior solutions yet because they remain limited in commercial availability and simply haven’t been around long enough to be thoroughly tested.\n\nAdditionally, research the algorithms built into systems to determine if your organization needs to invest in stronger encryption options. For example, the bcrypt encryption library built into UNIX uses the Blowfish cipher (good encryption) and the Password-Based Key Derivation Function 2 (PBKDF2) uses RSA key standards (better encryption).\n\nGood Encryption Options\n\nGood encryption algorithms such as Blowfish, Triple DES, and WPA2 provide acceptable encryption, assuming that the organization also observes encryption best practices.\n\nBlowfish provides open-source symmetric encryption built into many Unix and Linux libraries for file and full-disk encryption; however, the use of a small block size limits its effective use to files under 4 GB.\n\nTriple DES (TDES or 3DES) can still be found used in older payment systems or to protect ATM pin codes but is considered vulnerable to the Sweet32 Birthday attack and was retired from Office 365 by Microsoft in 2019.\n\nWi-Fi Protected Access Version 2 (WPA2) can be found in most wireless routers and provides reasonable protection for encrypted communications.\n\nRetain less sensitive data currently encrypted using such protocols and allow less sensitive data to be transmitted using these encryption algorithms.\n\nBetter Encryption Options\n\nBetter encryption such as AES, ECC, RSA, Twofish, and WPA3 provide the current best-practice encryption options widely available and are superior to the good encryption algorithms (above).\n\nThe Advanced Encryption Standard (AES), endorsed by NIST, supports encryption key sizes between 128 and 256 bits and uses both substitution and permutation transformations for encryption.\n\nElliptic-curve cryptography (ECC) uses points on an ellipse to provide strong encryption with key sizes starting at 192-bits (default is 256 bits).\n\nRivest-Shamir-Adleman (RSA) encryption uses large prime numbers as encryption keys that range between 512 and 4096 bits.\n\nTwofish encryption succeeds the Blowfish algorithm to provide improved encryption with key sizes between 128 and 256 bits.\n\nWi-Fi Protected Access Version 3 (WPA3) provides improved encryption capabilities over WPA2 and should be adopted on supported wi-fi hardware.\n\nApply these better encryption standards to important, sensitive, and regulated data to provide stronger resistance to brute force and algorithm attacks.\n\nWeak Encryption Examples\n\nProfessionals avoid broken or known-weak encryption standards such as DES, WEP, and WPA. Data previously encrypted using these standards should be actively re-encrypted using stronger algorithms (above).\n\nData Encryption Standard (DES) provided the first NIST encryption standard, but the 56-bit keys are too short and vulnerable to brute force guessing attacks.\n\nWired Equivalent Privacy (WEP) introduced wireless security as part of the IEEE 802.11 wireless standard, but severe algorithm design flaws render this algorithm obsolete and dangerous to use.\n\nWi-Fi Protected Access (WPA) replaced WEP with improved encryption, yet remained vulnerable to spoofing attacks and was replaced by WPA2 and WPA3.\n\nMany older computer protocols, such as secure sockets layer (SSL) and the original transport layer security (TLS) standards, also incorporate obsolete encryption algorithms. IT security teams must locate and disable the use of these older protocols throughout the organization.\n\nBottom Line: Evaluate Encryption Solutions Regularly\n\nThe strongest encryption of the 1970s didn’t survive replacement by stronger encryption in the 1990s. Yet those once-strongest encryption options of the 90s now show weaknesses to modern computing power. Fortunately, even as the increased computing power undermines older encryption standards, the computing power also enables the adoption of stronger, more complex encryption with larger key sizes."
    }
}