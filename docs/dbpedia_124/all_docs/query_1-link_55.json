{
    "id": "dbpedia_124_1",
    "rank": 55,
    "data": {
        "url": "https://crypto.stackexchange.com/questions/43272/why-is-writing-your-own-encryption-discouraged",
        "read_more_link": "",
        "language": "en",
        "title": "Why is writing your own encryption discouraged?",
        "top_image": "https://cdn.sstatic.net/Sites/crypto/Img/apple-touch-icon@2.png?v=fff48bebc5fd",
        "meta_img": "https://cdn.sstatic.net/Sites/crypto/Img/apple-touch-icon@2.png?v=fff48bebc5fd",
        "images": [
            "https://cdn.sstatic.net/Sites/crypto/Img/logo.svg?v=87c028c5e448",
            "https://i.sstatic.net/blJlL.png?s=64",
            "https://www.gravatar.com/avatar/af784daf00f3245d8d82548543101f56?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9ff064364151151cbce108b869e6e62d?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/lV31D.png?s=64",
            "https://www.gravatar.com/avatar/5bd7b2f844eaec07ba93ba7aac722133?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/NgCbm.png?s=64",
            "https://www.gravatar.com/avatar/f987e5fcc1463e4ebe90870565c5c602?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/blJlL.png?s=64",
            "https://www.gravatar.com/avatar/f24c4f83e951679ce750759777977565?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/884934208f9f239b751b71f8d6df9b0e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/vJbKg.jpg?s=64",
            "https://i.sstatic.net/IUaWZ.jpg?s=64",
            "https://www.gravatar.com/avatar/135a97c4150691234931a93f3a27a52f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8f7fcd81979b29f5fd4ddf155987e588?s=64&d=identicon&r=PG",
            "https://crypto.stackexchange.com/posts/43272/ivc/31d9?prg=54e8878d-8ab8-4f9f-9634-6611653e883a"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2017-01-25T18:19:44",
        "summary": "",
        "meta_description": "Say I want to write an encryption algorithm to communicate between me and my friend for this private use. How is that bad?\n\nE.g. I can take the word Hello and encrypt it with a simple algorithm – for",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/crypto/Img/favicon.ico?v=e5444c0e7c0b",
        "meta_site_name": "Cryptography Stack Exchange",
        "canonical_link": "https://crypto.stackexchange.com/questions/43272/why-is-writing-your-own-encryption-discouraged",
        "text": "Your question, MikeAzo's comment, and your reply practically could not be a better example of Schneier's Law in practice. Schneier stated:\n\nAnyone, from the most clueless amateur to the best cryptographer, can create an algorithm that he himself can't break.\n\nTo answer your reply\n\nHow can you break it if I send you this \"QTCPIGXKUXTGG\" ciphertext encrypted by a merely a simple algorithm which you have no idea about how it was encrypted?\n\nBecause even though we might not know exactly what your secret algorithm is, the first thing an attacker is going to reach for are common tools to attack substitution ciphers or polyalphabetic ciphers. Given even a few sentences of ciphertext is likely enough to fully recover every plaintext.\n\nThe fact that you don't know how to break it is irrelevant. It's trivial to create a cipher that you yourself can't break, but it's another thing entirely to create a cipher that others can't break. And the odds that you are capable of doing it when you're not aware of even the most basic attacks against ciphers hundreds of years old — not to mention modern concepts like indistinguishability under different attack models — puts you at an insurmountable disadvantage compared to ciphers designed by researchers with decades of experience in the field who are building off of modern notions of security and the discarded remains of thousands of failed ciphers that came before.\n\nAs an example, even if your cipher is somehow secure against a ciphertext-only attack (it's not), is it secure if I can trick you into encrypting a message of my choosing? What if I can trick you into decrypting a message of my choosing? What if I know part of or all of the plaintext for a particular encrypted message you've sent? What if you encrypt multiple messages with the same key? What if I can do any or all of these things hundreds or even millions of times in a row? These are all situations that are extremely common in the real world, and under which modern ciphers remain completely secure.\n\nI'll leave you with another Schneier classic, Memo to the Amateur Cipher Designer:\n\nA cryptographer friend tells the story of an amateur who kept bothering him with the cipher he invented. The cryptographer would break the cipher, the amateur would make a change to \"fix\" it, and the cryptographer would break it again. This exchange went on a few times until the cryptographer became fed up. When the amateur visited him to hear what the cryptographer thought, the cryptographer put three envelopes face down on the table. \"In each of these envelopes is an attack against your cipher. Take one and read it. Don't come back until you've discovered the other two attacks.\" The amateur was never heard from again.\n\nSo here's your first envelope: given a paragraph or two of ciphertext, your cipher will fail to language-based frequency analysis.\n\nLet me know when you've figured out the other two attacks.\n\nEdit: The comment about indistinguishability under different attack models is one reason why most \"decipher this message crypto challenges\" are completely bunk. They often simply give an attacker some ciphertext, ask them to decipher it, and declare victory when nobody produces the plaintext after some amount of time. Unfortunately that's not how crypto works in the real world; attackers have many more tricks up their sleeve in practice. They can trick computers into encrypting data of their choosing, they can trick computers into decrypting data of their choosing, and they can usually even do these things thousands, millions, or billions of times. Moxie's post shows how even the most terrible, horribly-designed, and obviously insecure ciphers can be effectively impervious when you restrict an attacker to a single ciphertext-only attack, which aren't representative of attackers' capabilities against ciphers as they're actually deployed in practice.\n\nI actually think this is a really good question. The answer is because cryptography is a skill, and like any skill, it takes time to develop. Additionally, you will be pitting your (in)experience in the skill against the skills of those who would seek to break your algorithm.\n\nThis is the real reason why: It's not that you just shouldn't do it, period. It's that if you do write your own algorithms, you need to realize that it will take a long time before you create anything that is actually capable of securing your information against a dedicated adversary in the real world.\n\nCryptography is like sword fighting. You would not sharpen a bamboo stick, swing it around a few times, and then go challenge a pack of thugs to a fight. The reason why should be really obvious. Especially when the pack of thugs in question could be a 3-Letter entity such as DJB or other Nation State level Adversaries.\n\nI say this as someone who is written too many crypto algorithms to count on both hands - I have written plenty of algorithms, but proposed and used none of them. Until you have something that 1. Is faster then AES or Salsa/ChaCha 2. Provably more secure then AES or Salsa/ChaCha, why should you propose or use the algorithm in question?\n\nLastly, you will likely enjoy studying information theory. You will come to understand that keeping the algorithm secret is not efficient because the algorithm itself has a minimum number of bits required to represent it. These bits (the algorithm) simply become the key. It is well established that it is simply better to concentrate your secrecy into a proper small key with a public algorithm. If your key becomes compromised, you simply change the key. If the algorithm is the key, well, you'd need a whole new algorithm.\n\ntl;dr\n\nI disagree that you should not write your own algorithms, it's that you need to have a good explicit reason for using/proposing your own algorithms. I personally would encourage you to write your own, as it will teach you to understand what does and what does not work and why. Doing so will help you to understand various sorts of mathematics and information theory (basically all of the math that I know I learned because/for cryptography).\n\nIt is discouraged, for all the good reasons the people already answered you (so I won't repeat).\n\nThere is a twist, however (which is the point of this answer) - no matter how weak your cipher is (and it IS weak), it has two advantages going for it:\n\nit is more secure than plaintext that you had before (even if only by a slight margin, as you're not experienced in crypto).\n\nand (this one is going to be controversial)\n\nit might actually give you more of a chance of not being spied upon if you're not already interesting target for NSA or some other agency. (Now before you people downvote me to hell with \"security though obscurity doesn't work\" please allow me to explain :)\n\nAs mentioned above, if you're specifically targeted, using toy-cipher won't help you at all and you're practically as unprotected as when you were using unencrypted communications (or even slightly worse, as you might take more risk talking when believing you're protected).\n\nHowever, beside (or one might argue: before) security of the cipher itself, and security of its implementation (those are two very different things, remember Debian GNU/Linux OpenSSL fiasco for example) there is one other key factor in determining if your communication is going to be de-privatized. And that is, \"will anyone try\"? And someone will try if any of the 3 things are true:\n\nyou're an interesting target yourself (for example top politician, financial access/banks, celebrity status, have access to rare information, etc)\n\nyou're perhaps not interesting yourself, but there is a lot of \"you\" using the same security method. In other words: popularity. Sure, Facebook does not contain much of top-secret data, but having a way to access anyone's Facebook account is going to be a very good incentive for hackers to try to crack its protection.\n\nbad luck (eg. some hacker is bored and just happen to take a pick on your site, transforming it to point 1. above)\n\nNow, sure TLS1.3+AES256-GCM/SHA512 is great thing today. Nobody can spy on you (except NSA and friends, but if you made an enemy of them, you're done already). But there is an enormous amount of people using it, and thus it becomes enormously profitable to crack it. So it will happen.\n\nNot today, not in 5 years perhaps, but in 50 years random script kiddie would probably be able to decrypt your communications (as you didn't use PFS, doh!) with a simple click.\n\nHowever, your toy-crypto chat, used in the whole world only by you and your friend to talk about slightly embarrassing fetishes, will likely remain hidden from everyone but legitimate parties for all eternity. Simply because nobody cared enough to give it a minimum of effort needed to crack it, and it wasn't popular enough that is was decrypted by default by some PRISM-like mass surveillance.\n\nBut the other answers had it correct; best practice for continued secret communications currently is: \"a) don't make enemies of various TLA government agencies. b) use secure popular ciphers implemented by competent programmers. c) keep upgrading both ciphers and implementations until at least the day you die\" - although it is usually (with perilous results) often shortened just to half of point (b) \"use secure popular ciphers\".\n\nBut I'm wondering if, in the long run, we wouldn't all be much better if we had billions of obscure and insecure ciphers each used only by few people; as opposed to few supposedly uncrackable ones that everybody uses (but which are secretly flawed - which is known only by 1984-ish governments and other murky elements.\n\nAs (anecdotal) \"evidence\", every month I help fix dozens of broken WordPress/Joomla/etc sites which were \"sooo secure\" just a few months/years ago. But strangely enough, every now and then I stumble upon properly written (eg. verifies input :) old Perl or even shell scripts, using insecure RC2 or even just hackish XOR, which still stands strong after decades. Just because there were different (and not popular) and nobody cared enough to spend time to crack them.\n\nAs your biggest problem nowadays is probably not that you will get targeted, but instead that some automated bot will exploit some hole in a popular piece of software which you didn't patch quick enough. As there is a limited amount of crypto-crackers, and there are most of the time chasing bigger cat than you. So you'd most likely become low-priority ticket and thus fade into oblivion.\n\nWhile I agree with the answers already provided, I'd like to add two more points.\n\nThe first one is a quote from Bruce Schneier (yeah, him again):\n\nThere are two types of encryption: one that will prevent your sister from reading your diary and one that will prevent your government.\n\nSo, if confidentiality is actually not a big deal and your only concern is that your texts will not be referenced by Google, you may use your own home-made cryptosystem. I read that some adult newsgroups used ROT13 exactly for this reason: no confidentiality was added, but no one (especially children) would stumble upon the content by chance.\n\nHowever, if you do so you must assume that someone has broken your system from day 1 and that anyone who wants to break it, actually can. It's all the more true that a cyphertext is similar to a huge billboard reading: \"Decrypt me if you can\".\n\nIf you want real confidentiality, however, then don't use a cryptosystem which has not been tested and approved by experts in the field. See other answers if you're not convinced why.\n\nThe second point is related to your comment: \"How can you break it if I send you this \"QTCPIGXKUXTGG\" ciphertext encrypted by a merely a simple algorithm which you have no idea about how it was encrypted?\"\n\nThis is not compliant with Kerckhoff's principle:\n\n[A cryptosystem's algorithm] should not require secrecy, and it should not be a problem if it falls into enemy hands\n\nOr, more clearly, if your security relies on the fact that your enemy doesn't know the algorithm you used, then your security is crap. The attacker is perfectly able to find a fatal flaw even without knowing your algorithm."
    }
}