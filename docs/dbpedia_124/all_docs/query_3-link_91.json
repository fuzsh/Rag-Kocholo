{
    "id": "dbpedia_124_3",
    "rank": 91,
    "data": {
        "url": "https://www.piiano.com/blog/key-rotation",
        "read_more_link": "",
        "language": "en",
        "title": "Key Rotation Strategies for Securing Sensitive Data",
        "top_image": "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/646cd96b834a3e8d2f901664_Key%20Rotation%20for%20Data.webp",
        "meta_img": "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/646cd96b834a3e8d2f901664_Key%20Rotation%20for%20Data.webp",
        "images": [
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659bd288e77100ec0e99cca2_piiano-logo.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659c45e86ac6a9a02b3aafda_piiano-vault-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659c45b0fd4664ed2d6e4374_piiano-flows-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/6655cf18972e3c1a27be7c3d_piiano-vault-pci.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/6655cee71da2698376e781a4_piiano-vault-secrets.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/6657012671c249d5e7a40047_eaas-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/66570130b50632080df03ed2_pii-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/666c42dd7203d0a9f879c2cc_phi%20navbar%20icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/66754551ad09f73c705a93ac_flow%20log%20leaks%20icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659c45b0fd4664ed2d6e4374_piiano-flows-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659c45e86ac6a9a02b3aafda_piiano-vault-icon.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659bd288e77100ec0e99ccba_cta%20banner%20crystal%202.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659bd288e77100ec0e99ccbb_cta%20banner%20crystal%203.svg",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/6491e8607c4915244e7a6512_ariel-shiftan.webp",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/646cd96b834a3e8d2f901664_Key%20Rotation%20for%20Data.webp",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/646cdaf210c7fb5cae176a7f_key-rotation-steps.webp",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/6491e8607c4915244e7a6512_ariel-shiftan.webp",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/6593c560d8265d147e61c433_shift-left-logo.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/6593c614c996e8209512ed55_shift-left-dots-1.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/6593c614c996e8209512ed55_shift-left-dots-1.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/659533d7a52a917c78e753d2_cta%20banner%20crystal%202.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/659533d7a52a917c78e753d2_cta%20banner%20crystal%202.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/659533d7a52a917c78e753d2_cta%20banner%20crystal%202.svg",
            "https://cdn.prod.website-files.com/6581338b23f87c327677ac34/659533d7b33397a177bde4fe_cta%20banner%20crystal%203.svg",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/66ab43ef72b8d3d78f472a8f_piiano-vault.jpg",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/66ab43ef72b8d3d78f472a8f_piiano-vault.jpg",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/66a8af27f5360f4b6db2edeb_encryption-at-rest.png",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/66a8af27f5360f4b6db2edeb_encryption-at-rest.png",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/668528a65a951e8e57094d2c_test.png",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/668528a65a951e8e57094d2c_test.png",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/6673d822d4a428ae9d607c64_your-code-review-can-be-better.jpeg",
            "https://cdn.prod.website-files.com/643ecd9741729f79fa6746ee/6673d822d4a428ae9d607c64_your-code-review-can-be-better.jpeg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659d3e5594fa9bf3d1ed3df2_c-check%201.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/659bd288e77100ec0e99cca2_piiano-logo.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/661928407b1f9ab146e16064_footer%20icons.svg",
            "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/661928407b1f9ab146e16064_footer%20icons.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ariel Shiftan"
        ],
        "publish_date": "2023-05-23T00:00:00",
        "summary": "",
        "meta_description": "Learn why cryptographic key rotation is important for data security, explore key rotation strategies, and learn how to implement them. Read more!",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/643d69e32f943167583cf9c1/64ebb8a90f9044a1a90bbdf6_Favicon%2032x32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.piiano.com/blog/key-rotation",
        "text": "Introduction\n\nIn the modern data-driven world, cryptography plays an integral role in protecting sensitive data for organizations of all sizes. Cryptographic keys help encrypt and decrypt data by enabling the transformation of data from readable plaintext to scrambled ciphertext and vice versa to ensure data has not been tampered with. While such cryptographic keys provide protection from potential attacks, they cannot offer complete assurance against key theft, compromise, or weakening over time.\n\nGiven the critical significance of these keys we have to ensure they donât get lost. Organizations should take proactive measures to secure them and guarantee they continue protecting sensitive data effectively. A recommended practice is regular key rotation - that refers to the process of replacing cryptographic keys at set intervals or following specific events.\n\nIn this article, we discuss how key rotations can help maintain a robust security posture, while exploring the implementation steps, challenges and recommended practices for rotating keys and distributing the keys securely.\n\nOur Vault supports a single API to rotate keys, and the rest is fully automatic, unlike what you will read in the rest of this blog about how to implement it on your own. Experiment with a free Vault account.\n\nWhy Key Rotation is Important for Data Security\n\nKey rotation is an indispensable practice of data security that involves regularly changing cryptographic keys used for encryption and decryption of data. By enforcing a limited amount of data to be encrypted with the same key, rotating cryptographic keys reduces consequences from the same key being compromised. This approach eventually helps maintain confidentiality, integrity, and availability while decreasing risks related to unauthorized access of encrypted information.\n\nTerminology\n\nUnfortunately many people confuse key rotation with re-key and re-encryption, letâs sort it out. Key rotation is the general term for creating a new key and starting to encrypt data with it, while retiring the old key, hence the rotation.\n\nRe-keying, on the other hand, involves changing cryptographic keys in an on-going communication channel like in TLS. However, âre-keyâ can also be used in non-streaming encryption as a way to say ârotate keyâ.\n\nRe-encryption refers to the process of encrypting previously encrypted data using a new key. However, this operation necessitates decrypting the data with the retired key initially, which results in an undesired performance impact. Moreover, the runtime complications associated with simultaneously serving the data during this process further add to the challenge.\n\nKey Rotation & Compliance\n\nRotating keys is mostly implemented voluntarily by organizations to maintain strong security measures. It is normally provided as part of cloud providersâ infrastructure. It is becoming a best practice and the recommended way to build systems. In addition, there are also guidelines promoting the use of cryptography and key rotation by different frameworks such as the General Data Protection Regulation (GDPR), Health Insurance Portability and Accountability Act (HIPAA), and Payment Card Industry Data Security Standards (PCI-DSS). These frameworks provide guidelines on key management practices to assist organizations maintain data confidentiality while reducing the risks of key compromise to comply with relevant laws or standards.\n\nCryptographic Keys and Their Roles\n\nCryptographic keys in modern computing play a pivotal role in upholding robust data security and privacy. Cryptographically secure random number generators (CSPRNGs) generate long strings of bits as secure keys which are difficult to predict or reproduce.\n\nFor a higher degree of randomness, they utilize different sources such as hardware events or OS randomness as sources of entropy. These keys serve as input parameters of various algorithms and are utilized for various cryptographic operations including encryption, decryption, digital signatures and key exchange.\n\nThe two primary categories of cryptographic keys are symmetric and asymmetric keys.\n\nSymmetric keys allow one key to both encrypt and decrypt, making these algorithms suitable for fast data encryption due to their efficiency and speed. It is normally used for fast data encryption, for example, in TLS post key-exchange or disk storage.\n\nAsymmetric keys (commonly referred to as public key cryptography) employ two individual keys - one publicly shared and the other private that remains secret until shared with its owner's chosen collaborators. As these key algorithms typically require longer key lengths and more compute time than symmetric key algorithms, these are considered unsuitable for storing structured data in runtime, where efficiency and speed are important. Normally used for PKI and keys exchange.\n\nKey Management Lifecycle\n\nKey management encompasses multiple stages, from key generation and distribution through storage, usage and rotation before being destroyed - each essential for maintaining data security and complying with industry regulations. These are the stages:\n\nGeneration: Generating strong cryptographic keys using a cryptographically secure random number generator.\n\nDistribution: Safely transmit them using encrypted channels, such as TLS/SSL or secure file transfer protocols, to authorized parties without risking unintended exposure.Â\n\nStorage: Utilize key management systems (KMS) to encrypt, store and manage cryptographic keys to protect them from theft or unauthorized access.Â\n\nUsage: Utilize keys for encryption and decryption with appropriate role-based access controls, multi-factor authentication, and monitoring in place.\n\nRotation: Replace cryptographic keys regularly or according to a policy to limit their exposure and minimize any data exposure impact from potential key compromise.â\n\nDestruction: Safely delete keys once they are no longer needed to prevent their recovery or misuse.\n\nKey Rotation Strategies\n\nThere are mostly two popular use cases for encryption in systems today, network protocols (streams) and storage devices (databases, etc). Practically, rotating keys over network protocols is much easier because you donât need to keep old keys and rotation is done in run time. In mass storage encryption, sometimes you have to keep old keys along with the old data, because re-encrypting everything is heavy on load. Therefore knowing which key to use when decrypting data requires more engineering (keeping key index, for example). Achieving robust key rotation is hard. Google Tink helps doing it right and itâs open source!\n\nTherefore, weâre about to mention a few strategies that should generically capture both cases.\n\nTime-Based Key Rotation\n\nA time-based key rotation approach helps manage cryptographic keys where new keys are generated periodically and replaced with old ones over a predefined period. Keys may be rotated daily, weekly, monthly or as otherwise specified depending on organizational security policy. Granted, in the event a single key is compromised, the attacker cannot access all of the previously encrypted data since it was encrypted using different keys.\n\nAdvantages\n\nRestricts exposure window to reduce compromise data risk\n\nUses an easily manageable schedule to simplify key rotation\n\nImplementation Considerations\n\nDiligently plan an effective key management strategy that fits your organization's risk profile\n\nAutomate key rotation using scripts or existing key management software (KMS)\n\nBefore disposing of old keys, ensure to securely back up or migrate any data encrypted with those keys to new keys\n\nOnce data is migrated to be used with new keys, ensure secure storage and disposal of old keys to prevent unapproved access\n\nUsage-Based Key Rotation\n\nThis key rotation approach helps organizations adapt according to the amount of data or transactions processed using cryptographic keys. Once a key reaches its usage threshold, it is replaced with a new one. This approach ensures that a single key does not encrypt an excessive amount of data, which could otherwise increase the potential impact of a key compromise.\n\nAdvantages\n\nPrevents key compromise by limiting the amount of data that can be encrypted with a single key at any given timeÂ\n\nMaintains optimum security levels over periods of high or low volume transactions\n\nImplementation Considerations\n\nDetermine key usage thresholds based on an organization's risk profile and encryption algorithm strength. For instance, after 1 GB of plaintext data being encrypted or after 1,000 encryption/decryption operations per key.\n\nOnce encrypted data is backed up or migrated to be used by new keys, dispose obsolete keys when their lifespan ends to prevent data compromise\n\nIncident-Triggered Key Rotation\n\nIncident-triggered key rotation is typically employed manually when there are indications of possible security breach, suspicious activities or modifications to an organization's risk profile. This strategy helps to quickly mitigate key compromise, replacing potentially compromised keys with new ones quickly and swiftly.\n\nAdvantages\n\nFaster response to potential key compromises or security incidents\n\nReduces impact by quickly replacing affected keys\n\nImplementation Considerations\n\nImplement robust monitoring and alert systems to detect security incidents early\n\nCreate incident response plans which include key rotation procedures\n\nTransmit new key securely to all relevant parties\n\nEnsure old keys are safely stored or disposed of to avoid unauthorized entry\n\nImplementing Key Rotation\n\nKey rotation involves regularly updating cryptographic keys used for encryption and decryption to maintain data confidentiality while mitigating key compromise. It is recommended that keys will be rotated automatically by the system you build, reducing human error in running such a process manually. Common approaches used for rotating keys include:\n\nKey Rotation in Symmetric Encryption\n\nSymmetric encryption utilizes one shared key for both encryption and decryption purposes, offering easier key rotation at scale. Key rotation in symmetric encryption requires generating a new secret key and securely distributing it to all relevant parties.\n\nIn the following example, we demonstrate key rotation using AES algorithms with Python using its cryptography library.\n\nStep 1: Generate a new symmetric key\n\nAs the starting point, generate a new symmetric key with a cryptographically secure random number generator using os.urandom(). The new key will then be used to encrypt and decrypt data after the key rotation process is complete.\n\nExecuting the script, returns the output:\n\nStep 2: Encrypt the new key\n\nEncrypting the new key before distribution ensures that it remains confidential during transit. The encrypted new key can only be decrypted and used by parties who possess the old key or a dedicated key-encrypting key - a cryptographic key used for encrypting other cryptographic keys to add an additional layer of protection against data loss during transmission.\n\nIn our case, we encrypt the new key using the old key with the AES algorithm in GCM mode.\n\nWhich returns the output:\n\nStep 3: Securely distribute the encrypted new key\n\nThe next step is to securely distribute the new encrypted key to prevent unauthorized access or interception. This typically involves sending the encrypted key and associated metadata (such as the tag, in the case of AES-GCM) through secure communication channels.\n\nItâs important to make sure that TLS is used on the server side and that the client will verify the domain using an official certificate authority (this is normally the default OS behavior). However, using plain TCP/IP communications without TLS might expose the keys in case of a MITM attack. In such cases, implementing certificate pinning to verify the expected domain of the receiver's certificate is vital.\n\nStep 4: Decrypt the new key\n\nOnce authorized parties receive the encrypted new key, they can decrypt it using the old key. Post decryption, they should update their encryption systems to use the new key for encrypting and decrypting data. This ensures that all parties maintain the ability to securely communicate with each other using the updated key.\n\nTo update the encryption systems of all authorized parties with the new key, use the following script:\n\nReturns the output:\n\nOnce the new key is ready to be used, the old key should now be deleted from any storage mediums, backups, or logs where it may have been recorded. Before disposing of the old key, it is important to ensure the encrypted data is migrated to be used by the new key. In Python, you can use the ctypes library to overwrite the memory contents while securely deleting sensitive information from memory.\n\nKey Rotation in Asymmetric Encryption\n\nAsymmetric encryption, commonly referred to as public key cryptography, involves using two keys - public and private keys. Public keys can be freely distributed for others to encrypt data or validate digital signatures, while private keys remain private to their owner and used only for decrypting messages or signing them.\n\nUsing Piiano Vault, you don't need to go through this hassle, create a free Vault account today and use a single API to rotate keys.\n\nKey rotation in asymmetric encryption involves the following steps:Â\n\nStep 1: Generate a new key pair\n\nAs the initial step, create a new pair of public and private keys to be used with asymmetric encryption. To do so, we are using RSA keys and the Python cryptography library in the example below.\n\nWhich generates the new public key as shown below:\n\nStep 2: Sign the new public key with the old private key\n\nAssuming you already have an existing private key (in this example, darwin_old_private_key), you can sign the new public key to establish trust.\n\nOnce the new public key is signed, the associated signature should be securely transmitted to authorized parties using secure communication channels, such as TLS or secure messaging protocols.\n\nStep 3: Update systems with the new key pair\n\nOn the recipient side, verify the new signed public key using the old public key (in our example, darwin_old_public_key):\n\nOnce the new public key is verified, all parties can update their systems with the new public and private keys as necessary.\n\nStep 5: Revoke and delete the old public key\n\nAs the last step, update key servers or certificate authorities with the revocation status of the old public key, ensuring that other parties do not mistakenly use the old public key for encryption or signature verification. Following this, delete the old private key using the ctypes library to overwrite the memory contents.\n\nâQuick note: As the cryptography library doesn't expose raw key material for RSA keys, ensure that any files or other storage mediums containing the old private key are securely deleted.\n\nKey Rotation in Cloud Services\n\nYou can also utilize your Cloud Service Providerâs (CSPâs) built-in key management systems for key rotation. In most cloud services, Customer Master Keys (CMKs) are used to protect data encryption keys (DEKs). DEKs are actual encryption keys used for data encrypting and decrypting while CMKs add an extra layer of protection by encrypting DEKs. Rotating CMKs helps limit data encryption with one key, subsequently reducing the impact upon potential compromise.\n\nUsing Piiano Vault, we have exactly 0 steps for managing keys, create a Vault account today and start protecting sensitive data.\n\nKey rotation through CSP KMS services involves the following steps:\n\nStep 1: Create a new Customer Master Key (CMK)\n\nIn this example, while we use Amazon Web Services (AWS) Key Management Service (KMS) and the AWS Command Line Interface (CLI), refer to your respective CSPâs documentation to ensure you follow the right steps for key rotation.\n\nTo generate a new CMK in AWS KMS, you can use the create-key command to create a new key that can be used later to replace the old one for encrypting and decrypting data.\n\naws kms create-key --description \"New Darwin Master Key\"\n\nWhich returns the output:\n\nStep 2: Create an alias for the new CMK\n\nTo make it easier to reference the new CMK, you can create an alias using the create-alias command.\n\naws kms create-alias --alias-name alias/DarwinNewMasterKey --target-key-id efgh5678-b234-789b-b23c-b234d5ef78ij\n\nStep 3: Re-encrypt data with the new CMK\n\nTo re-encrypt data with the new CMK, first decrypt the data using the old CMK and then encrypt it with the new CMK.\n\naws kms decrypt --ciphertext-blob fileb://darwin_ciphertext_blob --output text --query Plaintext | base64 --decode > darwin_plaintext_data\n\nOnce done, ensure all systems, applications, and services that previously used the old CMK are updated to use the new CMK for encryption and decryption. This may include updating configuration files, environment variables, or application code.\n\nStep 4: Disable and schedule deletion of the old CMK\n\nOnce you have successfully re-encrypted all data and updated systems with the new CMK, you can disable and schedule the deletion of the old CMK.\n\naws kms update-key --key-id darwin_old_key_id --enabled false\n\nSchedule deletion of the old CMK using the command:\n\nWhich returns the output:\n\nAuditing and Monitoring Key Rotation\n\nAuditing and monitoring key rotation is a crucial aspect of maintaining secure and compliant data encryption practices. The processes collectively involve tracking key-related activities, detecting potential security incidents, and ensuring adherence to organizational policies and industry regulations.Â\n\nMost key management systems (KMS) and CSPs provide built-in logging capabilities that record key rotation events. These logs help retain data for a predefined period, depending on organizational policies and regulatory requirements to help ensure traceability and facilitate incident response.\n\nKey logs typically contain details about:\n\nKey creation, modification, and deletion\n\nKey usage, including encryption and decryption operations\n\nAccess control changes, such as granting or revoking permissions\n\nKey metadata updates, including descriptions and aliases\n\nWhile logging is considered one of the foundational elements to audit key operations, monitoring is another crucial aspect that allows for timely detection of potential security incidents or policy violations. Monitoring key rotation can be achieved either by using built-in monitoring tools provided by KMS or CSPs, or by integrating with third-party security information and event management (SIEM) solutions.\n\nMonitoring key rotation should involve identifying unusual key access or usage patterns, detecting potential key compromise or unauthorized attempts to rotate keys, and ensuring that key rotation occurs at specified intervals as defined by organizational policies or regulatory requirements\n\nChallenges and Best Practices of Scaling a Key Rotation Solution\n\nAs organizations grow, scaling a key rotation solution presents its own set of challenges, from managing numerous keys and systems to ensuring secure key distribution and compliance. However, with the right practices, it is possible to overcome such challenges and maintain a robust security posture.Â\n\nThe table below lists various challenges and the recommended practices to overcome them."
    }
}