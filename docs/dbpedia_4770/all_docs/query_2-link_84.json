{
    "id": "dbpedia_4770_2",
    "rank": 84,
    "data": {
        "url": "https://retrocomputing.stackexchange.com/questions/9732/what-was-the-first-language-to-offer-full-structured-programming-support",
        "read_more_link": "",
        "language": "en",
        "title": "What was the first language to offer \"full\" structured programming support?",
        "top_image": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "meta_img": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "images": [
            "https://lh6.googleusercontent.com/-74M83RBb6ys/AAAAAAAAAAI/AAAAAAAAABM/igPkit2LlSc/photo.jpg?sz=64",
            "https://i.sstatic.net/36WSK.png?s=64",
            "https://i.sstatic.net/J38sS.jpg?s=64",
            "https://www.gravatar.com/avatar/645dbb4f7ba1ff9d7ff2de02f68fbe9c?s=64&d=identicon&r=PG",
            "https://retrocomputing.stackexchange.com/posts/9732/ivc/315d?prg=d432a755-3fbf-4064-b870-1584c36d7fe7"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "R. Schmitz"
        ],
        "publish_date": "2019-04-18T12:49:48",
        "summary": "",
        "meta_description": "In the same vein as this question about conditionals, I am interested in the first time a language provided functionality we assume as a given for modern programming languages. The question is when a",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/retrocomputing/Img/favicon.ico?v=9b6f1e4fd156",
        "meta_site_name": "Retrocomputing Stack Exchange",
        "canonical_link": "https://retrocomputing.stackexchange.com/questions/9732/what-was-the-first-language-to-offer-full-structured-programming-support",
        "text": "A couple of misconceptions in this one:\n\nRecursion is just another kind of iteration. It was in fact the only iteration mechanism provided in early versions of Lisp. Any use of recursion can be transformed into standard looping iteration (although many of them require use of a stack as well). Recursion can be viewed as kind of a hack to be able to leverage the program stack for your stack usage while iterating (in languages that use a program stack). Likewise early Lisp demonstrated that its possible (although not always convenient) to use recursion for all your iteration needs.\n\nI have never before heard that support for recursion is required for a language to be considered a \"structured language\". Really all that is required is that the language be Turing complete without relying on \"unstructured\" branch statements (aka: GOTOs)\n\nNow with all these caveats, most of the early \"Structured Programming\" developers were also at the same time involved in the development and use of ALGOL. This includes most prominently Dijkstra, who was the leading light in both the Structured Programming movement and developed the first ALGOL 60 compiler. Hoare and Dahl were also very involved in the development of both.\n\nThe other major languages that were extant at the time were COBOL and FORTRAN. Early FORTRAN in particular made extensive use of GOTOs, along with data overlays that are essentially the data equivalent of GOTOS, and thus a large amount of the development of ALGOL was in reaction to FORTRAN. So if you are looking for the early standard-bearer for the paradigm, ALGOL is probably your language.\n\nThis is a copy-paste of my answer to the other question. R. Schmitz said I could do it though.\n\nIf we are talking about a block structured conditional like\n\nif condition some arbitrary sequence of statements including perhaps nested ifs else some other arbitrary sequence of statements including perhaps nested ifs\n\nrather than just if ... goto some label which is no different to a conditional branch, then two early contenders would be:\n\nLisp (1958) which has an if and cond function. I think condpredates if. When I learned Lisp in the 1980's I'm fairly sure that if wasn't there. Lisp also had recursion, which means it had iteration by definition.\n\nAlgol 60 (1960) which has the structured if inherited by most modern imperative languages. Also while and for loops and recursion.\n\nEarly versions of FORTRAN and COBOL did not have structured if statements as far as I know or recursion."
    }
}