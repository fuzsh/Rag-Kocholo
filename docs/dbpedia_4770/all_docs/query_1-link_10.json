{
    "id": "dbpedia_4770_1",
    "rank": 10,
    "data": {
        "url": "https://retrocomputing.stackexchange.com/questions/24328/what-was-the-first-programming-language-with-generics",
        "read_more_link": "",
        "language": "en",
        "title": "What was the first programming language with generics?",
        "top_image": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "meta_img": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "images": [
            "https://i.sstatic.net/L9NB3.png?s=64",
            "https://www.gravatar.com/avatar/16bed4b4665c4e1579baccbb4db187ac?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d7a4018bf1ea96cae62e78f030c12959?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/e4656b7f2a3fcf11d248847915b0a4f3?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/58b0m.png?s=64",
            "https://retrocomputing.stackexchange.com/posts/24328/ivc/acfa?prg=e66bd3cb-6ffc-40ff-98d0-cb325f3cdb79"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-04-16T06:10:21",
        "summary": "",
        "meta_description": "To belatedly celebrate the release of Go 1.18, I ask the question: what was the first programming language with support for generics?\nFor concreteness (to prevent anyone trying to weasel out with ‘...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/retrocomputing/Img/favicon.ico?v=9b6f1e4fd156",
        "meta_site_name": "Retrocomputing Stack Exchange",
        "canonical_link": "https://retrocomputing.stackexchange.com/questions/24328/what-was-the-first-programming-language-with-generics",
        "text": "That was Algol-60.\n\nThe example given here is effectively a generic function.\n\nIt is unclear from the Algol-58 report if it intended to allow generic functions.\n\nIt states:\n\nThe values assigned to, or computable by, the actual input parameters must be compatible with type declarations concerning the corresponding formal parameters which appear in the procedure.\n\nFor actual output parameters, only type declarations duplicating given type declarations for the corresponding formal parameters may be made.\n\nArray declarations concerning actual parameters must duplicate, in corresponding subscript positions, array declarations referring to the corresponding formal parameters.\n\nThus it appears that the types of formal parameters had to be declared, and it is Algol-60 rather than Algol-58 which actually satisfies the criteria of the question.\n\nIf you consider single-expression \"functions\", taking an example from the Algol-58 report,\n\nI(Z) :=Z + 3 × y\n\nsatisfying your criteria, then the answer may be Algol-58 or even FORTRAN, depending on the year in which a similar construct appeared in FORTRAN.\n\nFor completeness: Full parametric polymorphism (\"type variables\") was invented 1934 by Haskell Curry 1934 in form of the so-called Combinatory Logic, and 1940 by Alonzo Church in form of the typed lambda calculus, and both turn out to be equivalent, and also equivalent to computability in the Turing-Machine sense.\n\nWhile these are not programming languages in the same way a Turing Machine is not a computer, they form the core of the ML family of functional programming languages. The original ML was developed by Robin Milner and others in the early 1970s.\n\nBut just like you can \"program\" a Turing machine with pencil and paper, you could also \"program\" in the original calculi (and manually construct the syntax tree, if so desired).\n\n(Now you need to decide if \"earliest\" should apply to the invention, or to the first implementation).\n\nAlso, if you interpret the \"parametric\" in parametric polymorphism as \"needs type variables that act as parameters\" (which is the way it was first defined by Strachey in 1967), then I am not sure if Algol call-by-name qualifies.\n\nYou have to be very careful about the term generics - it can mean different things depending on context.\n\nThe link given by @LeoB is an interesting one. Not sure how many Algol60 compilers implemented it. The ones on the ICL1900s definitely didn't - they would moan if you didn't declare the argument types. Would have been pretty weird with Jensen's device anyway.\n\nIn Ada (appx 1979) and python, generics are the same as templates in C++/Java/C#. I think the golang ones are this type.\n\nIn VHDL (appx 1987), generics allow the entities to be parameterized during component initialization: a bit like providing arguments to a subroutine."
    }
}