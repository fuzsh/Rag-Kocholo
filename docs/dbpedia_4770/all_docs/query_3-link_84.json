{
    "id": "dbpedia_4770_3",
    "rank": 84,
    "data": {
        "url": "http://rigaux.org/language-study/concepts-history.html",
        "read_more_link": "",
        "language": "en",
        "title": "History of programming languages concepts",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "<- back to Pixel's programming languages study page\n\nAlso have a look at the diagram of programming languages history.\n\nAbstract data typesSimula 67 Algebraic data typesHope (giving ML) Assignment operator overloadingC++ BNF (Backus-Naur Form)used to describe Algol 60's syntax Block nesting with scopeAlgol 60 Chained comparisonsBCPL ClassSimula 67 ClosureLisp CommentsCobol Compound statements (group statements into one)Algol 58 Continuations?? (1972) Encapsulation Exception handlingPL/I Explicit typingAlgol 58 Garbage collectionLisp Heap allocationLisp Higher orderAlgol 60 or maybe Lisp? Hygienic macrosScheme R4RS InheritanceSimula 67 Lazy evaluationISWIM (giving Haskell) List comprehensionKRC (giving Haskell) MacrosCobol ModulesModula-2 MonadsHaskell Multiple selection (\"case\" statement)Algol W Object-oriented ProgrammingSimula 67 Operator overloadingAlgol 68 OrthogonalityAlgol 68 Parametric PolymorphismML Pass by nameAlgol 60 Pass by valueFortran Pass by value/resultAlgol W Pattern matchingHope (giving ML) Pointer datatypePL/I ReferencesAlgol 68 Separate compilationFortran II (interest: hardware failures were very frequent => length of a program could not exceed 300/400 lines) Stack allocationAlgol 58 Stack dynamic variablesAlgol 60 Static allocationFortran Structures (records)Cobol Type classesHaskell Type inferenceML User-defined data typesAlgol 68 Using C as portable assemblerC++ (Cfront) Variable declaration anywhere in a blockAlgol 68 Vertical layout (Indentation to show block structure)CPL, ISWIM (giving Haskell)\n\nPixel\n\nThis document is licensed under GFDL (GNU Free Documentation License)."
    }
}