{
    "id": "dbpedia_4770_0",
    "rank": 26,
    "data": {
        "url": "https://code.fandom.com/wiki/Algol_60",
        "read_more_link": "",
        "language": "en",
        "title": "Algol 60",
        "top_image": "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/a/aa/FandomFireLogo.png/revision/latest?cb=20210713142711",
        "meta_img": "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/a/aa/FandomFireLogo.png/revision/latest?cb=20210713142711",
        "images": [
            "https://static.wikia.nocookie.net/ff185fe4-8356-4b6b-ad48-621b95a82a1d",
            "https://static.wikia.nocookie.net/f3fc9271-3d5e-4c73-9afc-e6a9f6154ff1",
            "https://static.wikia.nocookie.net/464fc70a-5090-490b-b47e-0759e89c263f",
            "https://static.wikia.nocookie.net/f7bb9d33-4f9a-4faa-88fe-2a0bd8138668"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Programmer's Wiki"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Algol 60 was the first structured programming language containing blocks whose range defined the scope of variables, i.e. the variables declared within the block was accessible for code statements within that block only: begin integer A, X; comment outer X; A := 3; X := 5; begin integer X, Y...",
        "meta_lang": "en",
        "meta_favicon": "/skins-ucp/mw139/common/favicon.ico",
        "meta_site_name": "Programmer's Wiki",
        "canonical_link": "https://code.fandom.com/wiki/Algol_60",
        "text": "Algol 60 was the first structured programming language containing blocks whose range defined the scope of variables, i.e. the variables declared within the block was accessible for code statements within that block only:\n\nbegin integer A, X; comment outer X; A := 3; X := 5; begin integer X, Y; comment inner X; X := 4; comment inner X assigned here; Y := 8; end print (X); comment prints \"5\", not \"4\" since this is outer scope; Y := 12; comment illegal! Y not defined in outer scope; end;\n\nThis kind of declaration scope was introduced with Algol 60, and soon became the programming language standard of the many programming languages in the Algol class. Notable exception was BASIC, introduced after Algol, yet having no declaration scope.\n\nHistory[]\n\nAn earlier Algol 58, also called IAL, was defined by IFIP (International Federation for Information Processing), but this language was so heavily reworked during 1960 that the new language Algol 60 was essentially a new language. Algol 58 didn't have blocks.\n\nAlgol 60 was popular both for algorithm publishing, and by implementations of which none was really compatible to any other implementation. Many Algol 60 derived languages occured for a long time.\n\nIn 1967 Dahl and Nygaard published the last grand Algol 60, called Simula 67. It contained classes that was later copied by Stroustrup into C++.\n\nIn 1968 IFIP published a new language called Algol 68. The new language was nothing like any earlier Algol and was heavily criticised for being an entirely new language with no abstractions inherited from Algol 60, and for being very hard to implement. Thereby the Algol 60 chain was essentially broken, but some superficial traits from Algol 60 were borrowed over to the language BCPL and it's extremely successful successor C.\n\nHello world[]\n\nEssentially a hello world couldn't be written in Algol 60 since there was no printout subroutine defined in the language. However, presuming that a local implementation had the function outstring() – after the Simula 67 pattern – a hello world could look like:\n\nbegin outstring(‘Hello world!’) end;\n\nLanguage[]\n\nBlocks and scope[]\n\nThe language contained blocks starting with begin and ending with end. Statements were separated by semicolon, statements were not ended by semicolon like in C – this might seem a ridiculous distinction but compare Algol-60\n\nbegin integer X; X := 23 end\n\nwith C:s counterpart\n\n{ int X; X = 23; }\n\nA semicolon after 23 is optional in Algol-60, making the variant\n\nbegin integer X; X := 23; end\n\noptional, while the statement\n\n{ int X; X = 23 }\n\nwhere the final 23 is not followed by a semicolon is illegal!\n\nData types[]\n\nScalars[]\n\nAlgol 60 had the scalar datatypes Boolean, integer, real and string. integer and real had operators and functions:\n\narithmetic:\n\n+ plus - minus × times / division ÷ integer division ↑ exponentiation abs(x) absolute value sign(x) signum entier(x) ceiling sqrt(x) square root exp(x) ex ln(x) natural logarithm sin(x) sine cos(x) cosine arctan(x) arcus tangent\n\ncomparisons:\n\n< less ≤ less or equal = equal ≥ greater or equal > greater ≠ not equal\n\nlogic operators:\n\n≡ equivalence ⊃ implication ∧ and ∨ or ¬ not\n\nAlgol was defined before ASCII, and so did use many exotic characters that became generally available for everyone only when Unicode was established on the computer market.\n\nThere were never any functions defined for pure Algol 60. Simula defined a vast set of character, string and set functions.\n\nArrays[]\n\nArrays of integers and reals could be defined according to the pattern:\n\ninteger array A[start:end];\n\nor\n\nreal array A[start:end];\n\nor just\n\narray A[start:end];\n\nin which case real was defaulted. Array elements were accessed in the modern way:\n\nA[4]\n\nor\n\nA[x]\n\nC++ Arrays\n\nSwitches[]\n\nswitch was a weird array data type containing jump labels. Such arrays could be used indexed as a label statement in a go to clause, such as\n\ngo to S[N]"
    }
}