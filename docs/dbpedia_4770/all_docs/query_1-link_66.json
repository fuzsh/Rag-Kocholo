{
    "id": "dbpedia_4770_1",
    "rank": 66,
    "data": {
        "url": "https://www.itfaq.global/lost-programming-languages-the-jurassic-coding-world/",
        "read_more_link": "",
        "language": "en",
        "title": "Lost Programming Languages: THE JURASSIC CODING WORLD – We are now Brixio",
        "top_image": "https://www.itfaq.global/wp-content/uploads/2023/06/cropped-Blue-light_Icon_Brixio-2-32x32.png",
        "meta_img": "https://www.itfaq.global/wp-content/uploads/2023/06/cropped-Blue-light_Icon_Brixio-2-32x32.png",
        "images": [
            "https://www.itfaq.global/wp-content/uploads/2022/03/ITFAQ-Logo-Master.png",
            "https://www.itfaq.global/wp-content/uploads/2022/03/ITFAQ-Logo-Master.png",
            "https://www.itfaq.global/wp-content/uploads/2022/03/ITFAQ-Logo-Master.png",
            "https://www.itfaq.global/wp-content/uploads/2022/04/Jurassic-code-1920x699.png",
            "https://www.itfaq.global/wp-content/uploads/2022/04/Jurassic-code-e1652871401619.png",
            "https://secure.gravatar.com/avatar/1f8c315b4fbb1559d9ee6c7d186b5654?s=80&d=mm&r=g",
            "https://www.itfaq.global/wp-content/uploads/2021/12/mark-75x75.jpg",
            "https://www.itfaq.global/wp-content/uploads/2022/05/YODA-ombre2-75x75.png",
            "https://www.itfaq.global/wp-content/uploads/2022/03/ITFAQ-Logo-White-300x95.png",
            "https://www.itfaq.global/wp-content/uploads/2021/10/top_clutch.co_software_developers_united_arab_emirates_2023.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.itfaq.global/wp-content/uploads/2023/06/cropped-Blue-light_Icon_Brixio-2-32x32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.itfaq.global/lost-programming-languages-the-jurassic-coding-world/",
        "text": "As humanity changes, languages come and go. While the likes of English, French, Spanish, Mandarin, and Hindi are the most spoken today, languages like Latin and ancient Greek are reserved for academics and archaeologists. Similarly, some deliberate attempts to evolve language fail to make it off the ground, as anyone that remembers Esperanto can tell you!\n\nSimilarly, as technology has evolved, the programming languages behind them have come and gone too. Of the nearly 9000 programming languages in existence, only about 50 are still widely used today. However, while some spoken languages are kept alive by tiny communities that still speak them, some programming languages avoid obscurity by being deeply embedded in the most critical parts of the IT infrastructure of finance, telecommunications, and the pharmaceutical industry as legacy code.\n\nSo, to celebrate programming’s past, this post looks at four of the most influential retro programming languages in history. We’ll look at some of the features each retro language introduced, if they’re a dead language, and the legacy they left behind.\n\n– – –\n\nALGOL: The influencer\n\nALGOL was a joint project developed by European and American computer scientists at the Swiss Federal Institute of Technology in Zurich in 1958. ALGOL was mostly used by research scientists and became the standard for publishing algorithms in academic textbooks for the next three decades.\n\nAs well as being highly instrumental in teaching a whole generation of programmers how to code, it was influential on future coding languages. ALGOL, for instance, was one of the first languages to introduce the concept of block structure: sections, or blocks, of code that contain both data and instructions. This contributed to developers’ ability to build large applications with fewer lines of code. ALGOL also introduced the idea of nested functions and, more impressively, was the first to use a range of mathematical symbols like ×, ÷, ≤, ≥, and ≠.\n\nIs ALGOL Dead?\n\nToday, ALGOL is considered a dead language: only used by retro programmers and academics. Its main drawback was that it was a research language, so it didn’t have many features required to develop commercial applications. Most notably, it didn’t allow for I/O operations.\n\nThere are three variations of ALGOL named after the year they were released: 58, 60. ALGOL 60 was an expansion of 58 and is what’s meant when people mention “ALGOL”. ALGOL 68, meanwhile, was supposed to significantly expand the capabilities of the language, including an extensive I/O function library, but it was not well received by the community. Plus, by then languages like COBOL were preferred by coders and companies alike.\n\nCOBOL: The Great Unifier\n\nCOBOL was developed by CODASYL, (Committee on Data Systems Languages) in the US in 1959. You see, before COBOL, each operating system had its own associated coding languages, which was problematic for organisations that utilised different brands of computers. A notable example of this was government agencies, like the US DoD, who helped back the project. Consequently, COBOL was the first widely-used programming language that was OS-agnostic.\n\nCOBOL was designed for business applications in industries such as finance and HR. COBOL Consequently stands for “common business-oriented language” and, subsequently, uses common English words and phrases that made it easier for everyday business people to pick up. It also possessed advanced (for the time) file handling functionality that allowed it to process large amounts of data.\n\nAs a result, while its contemporary languages were mainly employed for engineering computations or data management, COBOL was used within the finance and insurance industries, as well as government agencies.\n\nCOBOL, alongside ALGOL, LISP, and FORTRAN, are considered the four pillars of retro programming languages.\n\nIs COBOL Dead?\n\nIn 1997, it was reported that 80% of the world’s businesses ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually. Consequently, much of the work done in preparation for (and fear of) Y2K was carried out by COBOL engineers.\n\nSo, in short, COBOL will never truly die – it’d be way too expensive.\n\nHowever, it’s a long way from its former position as the most-used language. Reasons for this include the retirement of experienced COBOL developers and its complexity compared to modern languages.\n\nBASIC: Prometheus’ programming language\n\nBASIC (Beginners’ All-purpose Symbolic Instruction Code) was a high-level programming language that emphasised ease of use. Released in 1964, after being developed at Dartmouth College, New Hampshire, USA, BASIC was the first coding language to use a real-time interpreter – the Dartmouth Time-Sharing System.\n\nHowever, though BASIC brought a few technological innovations to the programming world, its most significant impact was cultural. Like Prometheus bringing the power of fire to mankind, BASIC put programming within the reach of everyday people – most importantly, children.\n\nSome of the most influential figures in tech started their journeys with BASIC, including Bill Gates, Paul Allen, and Mark Zuckerberg. Also, many early video games were based on different versions of BASIC – the seminal book, BASIC computer games were the first computer-related book to sell a million copies.\n\nIs BASIC Dead?\n\nKind of – but at the same time, not really. As for BASIC itself, it suffered from the perception of being seen as a “beginner” programming language: for kids or small business owners, not real programmers. Plus, as hardware progressed, languages like C became better choices.\n\nHowever, in 1991, Microsoft released an updated version of BASIC – Visual Basic (VB), which is used as a macro language in their suite of MS Office applications. On top of that, VB is a notable language in the guise of VB.net.\n\nSmalltalk: The OOP Pioneer\n\nSmalltalk was developed in 1972, at the famous Xerox PARC – in a little place called Palo Alto, California. Though Smalltalk-72 was the original variation. Smalltalk-76 introduced the world to the concept of object-oriented programming (OOP): undoubtedly one of the most crucial innovations in the history of programming. It was Smalltalk-80, however, that gained widespread adoption and is what most people mean when they say Smalltalk.\n\nAs well as OOP programming as a whole, Smalltalk introduced the language virtual machine, to which languages like Java and Ruby owe a debt, Just-In-Time (JIT) compilation and the first integrated development environment (IDE). Due to its design, Smalltalk massively contributed to development methodologies such as agile and rapid application development (RAD). It also introduced the highly influential model–view–controller (MVC) pattern used to design user interfaces .\n\nSmalltalk also had a hugely understated effect on the history of Apple. Steve Jobs was inspired by Xerox PARC’s GUI and WIMP (windows, icons, menus, pointer) and drastically changed his Apple’s direction upon their development. GUIs were a direct consequence of the development of Smalltalk.\n\nIs Smalltalk Dead?\n\nAlthough Smalltalk is still used by huge multinationals like JP Morgan, UBS, Siemens AG, and BMW, it’s been superseded by modern languages. While C++ was the beginning of the end, Java, which offered superior interoperability and faster runtimes, was the knockout blow.\n\n– – –\n\nAs well as a history lesson, the retro programming languages featured in this post can teach us a potent lesson about securing the future of your company’s digital solutions and its infrastructure.\n\nLike the once-popular languages that paved the way for modern coding tools, many of the languages will decline in use and, in time, be considered dead languages. If large parts of your company’s IT infrastructure are written in a dying language, when it comes time to finally update them, it’ll be time-consuming, complicated, and costly.\n\nTo avoid being caught by surprise by legacy code, evaluate the programming languages your infrastructure currently contains and which parts need to be updated. On the same note, hire forward-thinking software development companies for future projects, that consider the health and longevity of the programming languages they use to develop your digital solutions."
    }
}