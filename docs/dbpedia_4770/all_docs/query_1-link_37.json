{
    "id": "dbpedia_4770_1",
    "rank": 37,
    "data": {
        "url": "https://academickids.com/encyclopedia/index.php/ALGOL",
        "read_more_link": "",
        "language": "en",
        "title": "Academic Kids",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www.academickids.com/encyclopedia/encyclopedia.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "ALGOL (short for ALGOrithmic Language) is a programming language originally developed in the mid 1950s which became the de facto standard way to report algorithms in print for almost the next 30 years. It was designed to avoid some of the perceived problems with FORTRAN and eventually gave rise to many other programming languages (Pascal among them). ALGOL uses bracketed statement blocks and was the first language to use begin end pairs for delimiting them. Fragments of ALGOL-like syntax are sometimes still used as a notation for algorithms, so-called Pidgin Algol.\n\nThere were three main official versions of ALGOL: ALGOL 58, ALGOL 60, and ALGOL 68. Of these, ALGOL 60 was the most widely known in the United States. Niklaus Wirth based his own Algol-W on ALGOL 60, before moving to develop Pascal. Algol-W was intended to be the next generation ALGOL, but the ALGOL 68 committee decided to go with a language that was more complex and advanced rather than a language that is basically a cleaned up version of ALGOL 60. The official ALGOL versions are named after the year they were published. ALGOL 58 was originally known as the IAL (for International Algorithmic Language.)\n\nNote: throughout its effective life, the name of the programming language ALGOL was always presented in all-uppercase letters, and this is the practice adopted here.\n\nContents\n\nHistory\n\nALGOL was developed jointly by a committee of European and American computer scientists. It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs. periods) for different languages.\n\nJohn Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur to the Backus-Naur form for ALGOL 60. Both John Backus and Peter Naur served on the committee which created ALGOL 60, as did Wally Feurzeig who later created LOGO. ALGOL 60 inspired many languages that followed it; the canonical quote in this regard is C. A. R. Hoare's \"ALGOL was a great improvement on its successors.\" The full quote is \"Here is a language so far ahead of its time, that it was not only an improvement on its predecessors, but also on nearly all its successors\", but the aphoristic version is far better known. It is sometimes erroneously attributed to Edsger Dijkstra, also known for his pointed comments, who helped to implement an early ALGOL 60 compiler.\n\nThe Burroughs Corporation's B5000 and its successors were stack machines designed to be programmed in an extended variant of ALGOL 60, known as Elliot ALGOL; indeed their operating system, or MCP (Master Control Program) as they are called, was written in Elliot ALGOL as far back as 1961. The Unisys Corporation still markets machines descended from the B5000 today, running the MCP and supporting a diverse set of Elliot ALGOL compilers. Another early implementation was Dartmouth ALGOL 30 on the LGP-30 computer.\n\nProperties\n\nALGOL 60 as officially defined had no I/O facilities; implementations necessarily had to add some, but they varied from one implementation to another. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for Input/Output) facilities.\n\nALGOL 60 allowed for two types of parameter passing: the common call-by-value, and the unique call-by-name, which has never again been adopted by any of its successor languages. Call-by-name had certain limitations in contrast to call-by-reference, making it an undesirable feature in language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable. However, call-by-name is still beloved of ALGOL implementors for the interesting \"thunks\" that are used to implement it.\n\nALGOL 68 was defined using a two-level grammar formalism invented by Adriaan van Wijngaarden and which bears his name. Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled \"semantics\" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.\n\nCode sample (ALGOL 60)\n\n(The way the bolded text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for integer.)\n\nprocedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k); value n, m; array a; integer n, m, i, k; real y; comment The absolute greatest element of the matrix a, of size n by m is transferred to y, and the subscripts of this element to i and k; begin integer p, q; y := 0; i := k := 1; for p:=1 step 1 until n do for q:=1 step 1 until m do if abs(a[p, q]) > y then begin y := abs(a[p, q]); i := p; k := q end end Absmax\n\nHello World\n\nSince ALGOL 60 had no I/O facilities, there is no portable \"Hello World\" program in ALGOL. The following code could run on an ALGOL implementation for a Burroughs A-Series mainframe, and is taken from this site (http://www.engin.umd.umich.edu/CIS/course.des/cis400/algol/hworld.html).\n\nBEGIN FILE F (KIND=REMOTE); EBCDIC ARRAY E [0:11]; REPLACE E BY \"HELLO WORLD!\"; WHILE TRUE DO BEGIN WRITE (F, *, E); END; END.\n\nAn alternative example, using Elliott Algol I/O is as follows. In fact, Elliott Algol used different characters for 'open-string-quote' and 'close-string-quote', but ASCII does not allow these to be shown here.\n\nprogram HiFolks; begin print \"Hello world\"; end;\n\nSee also\n\nALGOL 68\n\nJOVIAL\n\nExternal links\n\nA BNF syntax summary (http://www.lrz.de/~bernhard/Algol-BNF.html) of ALGOL 60"
    }
}