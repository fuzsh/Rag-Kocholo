{
    "id": "dbpedia_2452_3",
    "rank": 36,
    "data": {
        "url": "https://medium.com/qiskit/applying-shors-algorithm-bbdfd6f05f7d",
        "read_more_link": "",
        "language": "en",
        "title": "Applying Shor’s Algorithm",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*P3PoL6CTN0sRf7KaztHbdw.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*P3PoL6CTN0sRf7KaztHbdw.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*c5Rilp1SWfL6i1BehcuNsA.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*Uu8yeBgCb0QRWw7HETGSJw.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*c5Rilp1SWfL6i1BehcuNsA.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*Uu8yeBgCb0QRWw7HETGSJw.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Spencer Churchill",
            "medium.com"
        ],
        "publish_date": "2020-07-31T18:35:10.750000+00:00",
        "summary": "",
        "meta_description": "Learn how to use Shor's algorithm to decode an RSA encrypted message! Through fun interactive fiction, see the application of quantum algorithms first hand.",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/qiskit/applying-shors-algorithm-bbdfd6f05f7d",
        "text": "Editor’s Intro: Generally, folks who have heard of quantum computers have also heard of Shor’s algorithm, the algorithm devised by Peter Shor to factor large numbers. This algorithm is the source of much interest in the quantum community — one day perhaps a few decades in the future, these devices would be able to use Shor’s algorithm to crack RSA, the encryption that safeguards much of our data. This past week on Coding With Qiskit, IBM Quantum’s Jin-Sung Kim walked us through how this algorithm works by coding it on a quantum computer using Qiskit. Check it out:\n\nTo give a better sense of how this algorithm might work in the real world, Qiskit Advocate Spencer Churchill imagined what might happen if you found RSA-encrypted code in the real world, and how Shor’s algorithm would be able to crack it. Of course in the real world, RSA-encrypted coprimes are thousands of digits long, which would require a fault-tolerant quantum computer…and again, that’s a long way’s off. If you want to learn more about the machinery that goes into Shor’s algorithm, namely Quantum Phase Estimation and the Quantum Fourier Transform, check out lectures 7 through 9 on our Introduction to Quantum Computing and Quantum Hardware course.\n\nIntroduction\n\n“I have lucrative news to share before it goes public… don’t worry, I encrypted the listing. See you soon.”\n\nYou look up to see a man hastily exit the New York City subway, leaving behind a scrap of paper on the floor. Curious, you read the contents of the slip:\n\n“Buy 213”\n\nAt the bottom, you see what you can only assume is the coprime of an RSA key, , 15).\n\nYou know three things:\n\nA company is going to report high earnings.\n\nThat company’s encrypted stock listing is “213,”\n\nand the coprime of that RSA key is 15.\n\nRSA\n\nThe RSA (Rivest–Shamir–Adleman) cryptosystem is an algorithm which enables one group to encrypt and decrypt data while restricting another to only decrypting. This works because RSA is a special type of function referred to as an asymmetric algorithm — the mathematics required to encrypt the data is straightforward for a computer, but decrypting the data takes an unreasonably large amount of computing resources. Two distinct pieces of information are required to obtain the full range of the RSA function, a public and a private key.\n\nRSA’s public key derives from the two product of two large prime numbers, which is available to anyone publicly for encrypting data. However, only people with the actual prime numbers themselves can decrypt the data; this is called the private key. This tutorial will use a basic form of RSA to highlight the capability of Shor’s algorithm. The functions below simply use the properties of asymmetric algorithms to encode and decode text using public and private keys.\n\nThe prospect of cracking an insider trade is too compelling to ignore, so you try to guess the private key.\n\nGuesses:\n\n1. BBB\n\n2. EBJ\n\n3. BBG\n\nWell, that didn’t work — RSA is too secure to simply be guessed. The asymmetric modular function is constructed in such a way as to only allow the private key to unlock the encryption. The scrap only has the coprime factor of the key, though.\n\nThe only way to read the listing would be to\n\nfactor the coprime number,\n\nuse those factors to generate the private key,\n\nthen decrypt the listing with the private key.\n\nLuckily, you attended Abe’s lecture on Shor’s algorithm and know exactly where to begin!\n\nShor’s Algorithm\n\nShor’s algorithm is quantum algorithm used to find the period of cyclic or periodic functions. By representing a product of two prime numbers, called the coprime, as a periodic function using the modulo operator, and converting this equation into a form that a quantum computer can process, Shor’s algorithm can determine the period of that function. Interestingly, using the period of this function, a quantum computer could factor the coprime number. Using a quantum computer to factor the extremely large numbers used in RSA is decades away and will require an error-corrected device with many qubits— but today, we can at least use it to factor very small coprimes…like 15.\n\nYou review and write out each step from the notes:\n\nPick an integer, a, such that 1 < a < N and gcd(a, N) = 1.\n\n1 < 7 < 15, True\n\nFind the period of f(x) = a^x (mod N), where x is the function’s period"
    }
}