{
    "id": "dbpedia_2452_3",
    "rank": 57,
    "data": {
        "url": "https://tsmatz.wordpress.com/2019/06/04/quantum-integer-factorization-by-shor-period-finding-algorithm/",
        "read_more_link": "",
        "language": "en",
        "title": "Shor’s Algorithm – Quantum Period Finding (Q#)",
        "top_image": "https://tsmatz.wordpress.com/wp-content/uploads/2019/12/20190604_result_output02_zps9f1sqwpj.jpg",
        "meta_img": "https://tsmatz.wordpress.com/wp-content/uploads/2019/12/20190604_result_output02_zps9f1sqwpj.jpg",
        "images": [
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5Er+%3D+1%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5Er+%3D+1%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5E%7Br%2Bb%7D%5C%3Amod%5C%3AN+%3D+%28a%5Er+%5Ccdot+a%5Eb%29%5C%3Amod%5C%3AN+%3D+a%5Eb%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5Ex%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=x+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r_0+%3C+r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5E%7Bx_0%7D+%3D+a%5E%7Bx_0%2Br_0%7D%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5E%7Br_0%7D+%3D+1%5C%3Amod%5C%3AN+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+%3D+11+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+%3D+5+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5Ex%5C%3Amod%5C%3AN%5C%3B%28x%3D1%2C+2%2C+%5Cldots%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E1%5C%3Amod%5C%3A11+%3D+5+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E2%5C%3Amod%5C%3A11+%3D+3+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E3%5C%3Amod%5C%3A11+%3D+4+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E4%5C%3Amod%5C%3A11+%3D+9+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E5%5C%3Amod%5C%3A11+%3D+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E6%5C%3Amod%5C%3A11+%3D+5+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E7%5C%3Amod%5C%3A11+%3D+3+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=5%5E8%5C%3Amod%5C%3A11+%3D+4+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+-+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=O%282%5En%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N%5E2+%5Cleq+2%5En+%3C+2+N%5E2+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Clog_2+N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7Ca%5Ex%5C%3Amod%5C%3AN%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En%2Fr+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=m+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En%2Fr%3Dm+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En%2Fr+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=x+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+%5Cto+H%5E%7B%5Cotimes+n%7D+%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5En%7D%7D+%5Csum_%7Bi%3D0%7D%5E%7B2%5En+-+1%7D+%5Cleft%7C+i+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+0+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+%5Cleft%7C+y+%5Cright%3E+%3D+%5Cleft%7C+x+%5Cright%3E+%5Cleft%7C+0+%5Cright%3E+%5Cto+%5Cleft%7C+x+%5Cright%3E%5Cleft%7Ca%5Ex%5C%3Amod%5C%3AN%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7Ca%5E%7Bx_0%7D%5C%3Amod%5C%3AN%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=x_0+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En%2Fr%3Dm+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D+%5Csum_%7Bj%3D0%7D%5E%7Bm-1%7D+%5Cleft%7C+x_0+%2B+jr+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5En%7D%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D+%5Csum_%7Bk%3D0%7D%5E%7B2%5En-1%7D+%5Csum_%7Bj%3D0%7D%5E%7Bm-1%7D+%5Cexp%28%5Cfrac%7B2%5Cpi+i+%28x_0%2Bjr%29k%7D%7B2%5En%7D%29+%5Cleft%7C+k+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5En%7D%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D+%5Csum_%7Bk%3D0%7D%5E%7B2%5En-1%7D+%5CBiggl%5B+%5Csum_%7Bj%3D0%7D%5E%7Bm-1%7D+%5Cexp%28%5Cfrac%7B2%5Cpi+ijrk%7D%7B2%5En%7D%29+%5CBiggr%5D+%5Cexp%28%5Cfrac%7B2%5Cpi+i+x_0+k%7D%7B2%5En%7D%29+%5Cleft%7C+k+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5En%7D%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D+%5Csum_%7Bk%3D0%7D%5E%7B2%5En-1%7D+%5CBiggl%5B+%5Csum_%7Bj%3D0%7D%5E%7Bm-1%7D+%5Cexp%28%5Cfrac%7B2%5Cpi+ijk%7D%7Bm%7D%29+%5CBiggr%5D+%5Cexp%28%5Cfrac%7B2%5Cpi+i+x_0+k%7D%7B2%5En%7D%29+%5Cleft%7C+k+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+%5Cin+%5C%7B0%2C+%5Cldots+%2C2%5En-1%5C%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k%2Fm+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=m+%3D+2%5Ep+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=p+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k%2Fm+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+%5Cin+%5C%7B0%2C+%5Cldots+%2C2%5En-1%5C%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k%2Fm+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cexp%28%5Cfrac%7B2%5Cpi+ijk%7D%7Bm%7D%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=0%2C%5C%3A%5Cfrac%7B2%5En%7D%7Br%7D%2C%5C%3A%5Cfrac%7B2%5En%7D%7Br%7D+%5Ctimes+2%2C%5C%3A%5Cldots%5C%3A%2C%5C%3A%5C%3A%5Cfrac%7B2%5En%7D%7Br%7D+%5Ctimes+%28r+-+1%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+%3D+%5Cfrac%7B2%5En%7D%7Br%7D+%5Ctimes+l+%5C%3B%5C%3B+%28l+%3D+0%2C%5C%3A%5Cldots%5C%3A%2C+r-1%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5En%7D%7D+%5Cfrac%7B1%7D%7B%5Csqrt%7Bm%7D%7D+%5Csum_%7Bl%3D0%7D%5E%7Br-1%7D+m+%5Cexp%28%5Cfrac%7B2%5Cpi+i+x_0+%5Ctimes+2%5En+l+%2F+r%7D%7B2%5En%7D%29+%5Cleft%7C+%5Cfrac%7B2%5En+l%7D%7Br%7D+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%3D+%5Cfrac%7B1%7D%7B%5Csqrt%7Br%7D%7D+%5Csum_%7Bl%3D0%7D%5E%7Br-1%7D+%5Cexp%28%5Cfrac%7B2%5Cpi+i+x_0+l%7D%7Br%7D%29+%5Cleft%7C+%5Cfrac%7B2%5En+l%7D%7Br%7D+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=C+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=C+%3D+%5Cfrac%7B2%5En+l_0%7D%7Br%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=l_0+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=l_0+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=C+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En+%3D+mr+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En+%5Cneq+mr+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=d+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%3Dr%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft%7C+%5Cfrac%7BC%7D%7B2%5En%7D+-+%5Cfrac%7Bd%7D%7Br%5E%7B%5Cprime%7D%7D+%5Cright%7C+%3C+%5Cfrac%7B1%7D%7B2+%5Ccdot+2%5En%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+%3C+N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=d+%5Cin+%5Cmathbb%7BN%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=1+%2F+%5Clog+%5Clog+r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=O%28n%5E2+%5Clog+n+%5Clog+%5Clog+n%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+0+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+%5Cto+H%5E%7B%5Cotimes+n%7D+%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+%5Cleft%7C+y+%5Cright%3E+%3D+%5Cleft%7C+x+%5Cright%3E+%5Cleft%7C+0+%5Cright%3E+%5Cto+%5Cleft%7C+x+%5Cright%3E%5Cleft%7Ca%5Ex%5C%3Amod%5C%3AN%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+y+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cleft%7C+x+%5Cright%3E+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=d+%2F+r%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+%5Cleq+N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=C+%2F+2%5En+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=C+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r%5E%7B%5Cprime%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://tsmatz.wordpress.com/wp-content/uploads/2019/12/20190604_result_output02_zps9f1sqwpj.jpg?w=829",
            "https://s0.wp.com/latex.php?latex=O%282%5En%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5E%7Br%2F2%7D%5C%3Amod%5C%3AN+%5Cneq+N+-+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28N%2C+a%5E%7Br%2F2%7D+%5Cpm+1%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+%3D+j%5Ek+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=j+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Csqrt%5Bk%5D%7BN%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=k+%5Cleq+%5Clog_2+N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=n+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=j+%3D+%5Csqrt%5Bk%5D%7BN%7D+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=1+%3C+a+%3C+N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28N%2Ca%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28N%2Ca%29+%3E+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28N%2Ca%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28N%2Ca%29+%3D+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5Er%5C%3Amod%5C%3AN+%3D+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=r+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=a%5E%7Br%2F2%7D%5C%3Amod%5C%3AN+%3D+N+-+1+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cverb%7Cgcd%7C%28a%5E%7Br%2F2%7D+%5Cpm+1%2CN%29+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=N+&bg=ffffff&fg=333333&s=0&c=20201002",
            "https://0.gravatar.com/avatar/37afbfe41cf64296f5246c548763742aec27ca6c08228405ea3ec5124565fad8?s=48&d=identicon&r=G",
            "https://2.gravatar.com/avatar/e518e98c9ff423d217a46c10cbb296e8e78180333fd5d64313a5ccbfdcdca3c0?s=48&d=identicon&r=G",
            "https://tsmatz.wordpress.com/wp-content/uploads/2017/11/cropped-sitelogo.jpg?w=50",
            "https://tsmatz.wordpress.com/wp-content/uploads/2017/11/cropped-sitelogo.jpg?w=50",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tsuyoshi Matsuzaki"
        ],
        "publish_date": "2019-06-04T00:00:00",
        "summary": "",
        "meta_description": "For the last post of my quantum programming series, I show you the most famous quantum algorithm, Shor's algorithm, with Q# programming. You can also solve integer factorization with polynomial time computation (in the input's bit size) using this quantum algorithm, though classical one needs exponential time.",
        "meta_lang": "en",
        "meta_favicon": "https://tsmatz.wordpress.com/wp-content/uploads/2017/11/cropped-sitelogo.jpg?w=32",
        "meta_site_name": "tsmatz",
        "canonical_link": "https://tsmatz.wordpress.com/2019/06/04/quantum-integer-factorization-by-shor-period-finding-algorithm/",
        "text": "(Download source code from here.)\n\nFor the last post of this series, I’ll show you the most famous quantum algorithm, Shor’s algorithm, with Q# implementation.\n\nSeries : Quantum algorithm’s implementation (Q#)\n\nProgramming Quantum Algorithm for Beginners (Bernstein-Vazirani algorithm)\n\nProgramming Quantum Search (Grover’s Algorithm)\n\nProgramming Quantum Phase Estimation\n\nProgramming Quantum Arithmetic (Adder, Multiplier, and Exponentiation)\n\nProgramming Quantum Period Finding (Shor’s Algorithm)\n\nIn classical method, you needs exponential time computation (of the input’s bit size) for solving integer factorization, but you can solve with polynomial time computation by Shor’s algorithm.\n\nThis algorithm would have significant impacts for today’s computing, because current cryptographic technology depends on the difficulty of large composite integer’s factorization in classical approaches, and a lot of computing technologies (such as, security, identity, blockchain, etc) then depend on this current cryptographic technology.\n\nNote : For this reason, quantum cryptography and key distribution (see here) is one of big concerns in today’s quantum studies and researches.\n\nAs well as other posts in this series, first I’ll describe the outline (idea) of this algorithm, and later I’ll show you Q# code along with this idea.\n\nBefore starting this post, I recommend you to read my early posts in this series (especially, “Quantum Fourier Transform (QFT) / Phase Estimation” and “Quantum Arithmetic“), if you’re not familiar with quantum methods.\n\nQuantum Period-Finding (Shor’s Algorithm)\n\nIf positive integer and is coprime, number theory tells us there exists such as . We now assume that is positive least number such that .\n\nAs you can see :\n\nTherefore is periodic (cyclic) for input by -cycle. (If there exists more least integer such that , this implies and is not then the least integer.)\n\nFor instance, if and , then equals to 5, 3, 4, 9, 1, 5, 3, 4, 9, 1, 5, 3, … In this case, the period length is 5.\n\n…\n\nThis period is called “order” of modulus .\n\nOur concern is how to find the period (order) for given coprime integers and .\n\nOf course, you can iteratively search by calculating with to , but it needs computation time (i.e, exponential time), where the integer has bit’s size.\n\nHere we want more efficient algorithms, and Peter Shor has showed us polynomial-time algorithm with quantum computer as follows.\n\nThe outline of Shor’s algorithm is : transform to all possible values using quantum superpositions, apply some modulus operations for these qubits, and then finally estimate the period using measured values.\n\nNow let’s see the details of this algorithm and see why this makes things.\n\nIn this algorithm, we need the following 2 register :\n\nThe first register has qubits, in which satisfies .\n\nThe second register has at least qubits for storing .\n\nTo simplify explanation, here we assume that is some integer , i.e, . (Later we will discuss about the case in which is not an integer…)\n\nNote that is unknown for now.\n\nFirst we generate the superposition for . (i.e, )\n\nThen the state of is now :\n\nNext we transform (which is initialized by ) as follows.\n\nFor this implementation, please see my previous post “Quantum Arithmetic (Q#)“.\n\nNow we measure the register . Once we’ve measured , the register is garbage and we don’t need any more.\n\nAfter you’ve measured the register , results into for some .\n\nHence results into the following state, because .\n\nNote : See here for quantum measurement.\n\nNow we apply Quantum Fourier Transform (QFT) for register , and then results into the following state. (See this post for QFT.) :\n\nNow let me fix some ( ) such that is not integer. In this case, the terms in the square brackets in the above equation cancels each others and then results into 0, because for some integer .\n\nAs a result, only terms with , in which is integer, resides in the above equation.\n\nNext let me fix some ( ) such that is integer. In this case, equals to 1. And the number of such will then be , such as .\n\nTherefore we can replace above equation with , and we then get :\n\nNow we measure and assume that the results is some integer .\n\nAs you can easily see, we get for some unknown integer .\n\nIf and is coprime, you can get using greatest common divisor (shortly, GCD) by Euclidean algorithm with known and .\n\nBut it’s not so simple. Please remind our assumption : . For instance, when is odd, you cannot simply get by GCD.\n\nWhen , it’s known that is approximated by the following using continued fraction expansion. If the following and is coprime, then you can get . If it’s not coprime (check if the result is an order or not), you repeat this algorithm until you find an order . (Here I don’t describe about this approximation, but please refer p.18 in the original paper “Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer” by Peter Shor.)\n\nwhere and\n\nNote : For approximation, there exists another option, which uses phase estimation.\n\nSee “Applications – Shor’s Algorithm” in Q# document for details.\n\nNumber theory tells us that this takes place with probability at least (see Hardy-Ramanujan theorem), and the entire period-fining (order-finding) has computation complexity. That is, this algorithm has polynomial computation complexity of the input size .\n\nProgramming Quantum Period-Finding\n\nNow let’s start Q# programming along with above algorithm.\n\nNote : As I have mentioned in previous post, my code is written straightforward without any optimization, in order to help you understand the algorithm’s outline. (e.g, So many QFTs are called inside my function.)\n\nOnce you have learned core concept in this post, please proceed to optimize your code.\n\nFirst we prepare the register and , which states are all initialized as .\n\n// Get least integer n1 such as : num^2 <= 2^n1 let n1 = BitSizeI(num) * 2; let n2 = BitSizeI(num); ... use (x, y) = (Qubit[n1], Qubit[n2]) { ... }\n\nWe apply and generate superposition as follows.\n\n... use (x, y) = (Qubit[n1], Qubit[n2]) { Microsoft.Quantum.Canon.ApplyToEachCA(H, x); ... }\n\nNext we apply in Q#.\n\nIn previous post, we’ve already learned and implemented this algorithms.\n\nThe following QuantumMultiplyByModulus() is the operation which I have already built in previous post.\n\nThe following QuantumExponentForPeriodFinding() is a modified version of QuantumExponentByModulus() in previous post.\n\n... use (x, y) = (Qubit[n1], Qubit[n2]) { Microsoft.Quantum.Canon.ApplyToEachCA(H, x); // |x⟩ |0 (=y)⟩ -> |x⟩ |a^x mod N⟩ QuantumExponentForPeriodFinding(a, num, x, y); ... } ...\n\n// Implement : |x⟩ |0 (=y)⟩ -> |x⟩ |a^x mod N⟩ for some integer a // (where y should be |0⟩) // This is modified version of QuantumExponentByModulus() in my post. // See https://tsmatz.wordpress.com/2019/05/22/quantum-computing-modulus-add-subtract-multiply-exponent/ operation QuantumExponentForPeriodFinding (a : Int, N : Int, x : Qubit[], y : Qubit[]) : Unit { let n1 = Length(x); let n2 = Length(y); // set |y⟩ = |0...01⟩ X(y[n2 - 1]); for idx in 0 .. n1 - 1 { // a^(2^((n1-1) - idx)) is too big, then we reduce beforehand mutable a_mod = 1; for power in 1 .. 2^((n1-1) - idx) { set a_mod = (a_mod * a) % N; } // apply decomposition elements Controlled QuantumMultiplyByModulus([x[idx]], (N, a_mod, y)); } }\n\nNext we measure the register and apply Quantum Fourier Transform (QFT) to the register .\n\nI note that the following QFTImpl() operation is the one which I have already built in this post. (You can also use Q# built-in operation for QFT.)\n\n... // measure y and reset mutable tmpResult = new Result[n2]; for idx in 0 .. n2 - 1 { set tmpResult w/= idx <-MResetZ(y[idx]); } // QFT for x QFTImpl(x); ...\n\nNow we measure the register , and set results into variable “realResult“.\n\n// Measure x and reset mutable realResult = new Result[n1]; for idx in 0 .. n1 - 1 { set realResult w/= idx <-MResetZ(x[idx]); }\n\nAs I have mentioned above, we should get approximated fraction (where ) from the fraction (where is measured value, i.e, above “realResult“) by performing continued fraction expansion.\n\nHere we use Microsoft.Quantum.Math.ContinuedFractionConvergentL() in Q# library for continued fraction, but you can also implement Euclidean by yourself. (We have also used Microsoft.Quantum.Math.GreatestCommonDivisorL() in Q# for GCD.)\n\n... // get integer's result from measured array (ex : |011⟩ -> 3) let resultBool = [false] + Microsoft.Quantum.Convert.ResultArrayAsBoolArray(realResult); // for making unsigned positive integer, add first bit let resultBool_R = Microsoft.Quantum.Arrays.Reversed(resultBool); // because BoolArrayAsBigInt() is Little Endian order let resultIntL = Microsoft.Quantum.Convert.BoolArrayAsBigInt(resultBool_R); // get period candidate by continued fraction expansion (thanks to Euclid !) let gcdL = GreatestCommonDivisorL(resultIntL, 2L^n1); let calculatedNumerator = resultIntL / gcdL; let calculatedDenominator = 2L^n1 / gcdL; let numL = Microsoft.Quantum.Convert.IntAsBigInt(num); let approximatedFraction = ContinuedFractionConvergentL(BigFraction(calculatedNumerator, calculatedDenominator), numL); let (approximatedNumerator, approximatedDenominator) = approximatedFraction!; mutable periodCandidateL = 0L; if(approximatedDenominator < 0L) { set periodCandidateL = approximatedDenominator * -1L; } else { set periodCandidateL = approximatedDenominator; } set periodCandidate = ReduceBigIntToInt(periodCandidateL); // output for debugging Message($\"Measured Fraction : {resultIntL} / {2L^n1}\"); Message($\"Approximated Fraction : {approximatedNumerator} / {approximatedDenominator}\"); Message($\"Period Candidate : {periodCandidate}\"); ...\n\n// This is helper function to convert BigInt to Int ... operation ReduceBigIntToInt(numL : BigInt) : Int { // Check if numL is not large Microsoft.Quantum.Diagnostics.Fact(BitSizeL(numL) <= 32, $\"Cannot convert to Int. Input is too large\"); mutable resultInt = 0; let numArray = Microsoft.Quantum.Convert.BigIntAsBoolArray(numL); let numArray_R = Microsoft.Quantum.Arrays.Reversed(numArray); // because BigIntAsBoolArray() is Little Endian order let nSize = Length(numArray_R); for idx in 0 .. nSize - 1 { if(numArray_R[idx] and ((nSize - 1) - idx <= 31)) { set resultInt = resultInt + (2 ^ ((nSize - 1) - idx)); } } return resultInt; }\n\nFinally you check if (above “periodCandidate”) is the period or not. If not, please repeat once again.\n\nThe completed Q# code is as follows.\n\nopen Microsoft.Quantum.Intrinsic; open Microsoft.Quantum.Math; open Microsoft.Quantum.Measurement; operation QuantumPeriodFinding (num : Int, a : Int) : Unit { // Get least integer n1 such as : num^2 <= 2^n1 let n1 = BitSizeI(num) * 2; let n2 = BitSizeI(num); mutable periodCandidate = 1; repeat { use (x, y) = (Qubit[n1], Qubit[n2]) { Microsoft.Quantum.Canon.ApplyToEachCA(H, x); // |x⟩ |0 (=y)⟩ -> |x⟩ |a^x mod N⟩ QuantumExponentForPeriodFinding(a, num, x, y); // measure y and reset mutable tmpResult = new Result[n2]; for idx in 0 .. n2 - 1 { set tmpResult w/= idx <-MResetZ(y[idx]); } // QFT for x QFTImpl(x); // Measure x and reset mutable realResult = new Result[n1]; for idx in 0 .. n1 - 1 { set realResult w/= idx <-MResetZ(x[idx]); } // get integer's result from measured array (ex : |011⟩ -> 3) let resultBool = [false] + Microsoft.Quantum.Convert.ResultArrayAsBoolArray(realResult); // for making unsigned positive integer, add first bit let resultBool_R = Microsoft.Quantum.Arrays.Reversed(resultBool); // because BoolArrayAsBigInt() is Little Endian order let resultIntL = Microsoft.Quantum.Convert.BoolArrayAsBigInt(resultBool_R); // get period candidate by continued fraction expansion (thanks to Euclid !) let gcdL = GreatestCommonDivisorL(resultIntL, 2L^n1); let calculatedNumerator = resultIntL / gcdL; let calculatedDenominator = 2L^n1 / gcdL; let numL = Microsoft.Quantum.Convert.IntAsBigInt(num); let approximatedFraction = ContinuedFractionConvergentL(BigFraction(calculatedNumerator, calculatedDenominator), numL); let (approximatedNumerator, approximatedDenominator) = approximatedFraction!; mutable periodCandidateL = 0L; if(approximatedDenominator < 0L) { set periodCandidateL = approximatedDenominator * -1L; } else { set periodCandidateL = approximatedDenominator; } set periodCandidate = ReduceBigIntToInt(periodCandidateL); // output for debugging Message($\"Measured Fraction : {resultIntL} / {2L^n1}\"); Message($\"Approximated Fraction : {approximatedNumerator} / {approximatedDenominator}\"); Message($\"Period Candidate : {periodCandidate}\"); } } until ((periodCandidate != 0) and (ExpModI(a, periodCandidate, num) == 1)) fixup { } // output for debugging Message(\"Found period \" + Microsoft.Quantum.Convert.IntAsString(periodCandidate)); Message(\"\"); } // Implement : |x⟩ |0 (=y)⟩ -> |x⟩ |a^x mod N⟩ for some integer a // (where y should be |0⟩) // This is modified version of QuantumExponentByModulus() in my post. // See https://tsmatz.wordpress.com/2019/05/22/quantum-computing-modulus-add-subtract-multiply-exponent/ operation QuantumExponentForPeriodFinding (a : Int, N : Int, x : Qubit[], y : Qubit[]) : Unit { let n1 = Length(x); let n2 = Length(y); // set |y⟩ = |0...01⟩ X(y[n2 - 1]); for idx in 0 .. n1 - 1 { // a^(2^((n1-1) - idx)) is too big, then we reduce beforehand mutable a_mod = 1; for power in 1 .. 2^((n1-1) - idx) { set a_mod = (a_mod * a) % N; } // apply decomposition elements Controlled QuantumMultiplyByModulus([x[idx]], (N, a_mod, y)); } } // This is helper function to convert BigInt to Int ... operation ReduceBigIntToInt(numL : BigInt) : Int { // Check if numL is not large Microsoft.Quantum.Diagnostics.Fact(BitSizeL(numL) <= 32, $\"Cannot convert to Int. Input is too large\"); mutable resultInt = 0; let numArray = Microsoft.Quantum.Convert.BigIntAsBoolArray(numL); let numArray_R = Microsoft.Quantum.Arrays.Reversed(numArray); // because BigIntAsBoolArray() is Little Endian order let nSize = Length(numArray_R); for idx in 0 .. nSize - 1 { if(numArray_R[idx] and ((nSize - 1) - idx <= 31)) { set resultInt = resultInt + (2 ^ ((nSize - 1) - idx)); } } return resultInt; }\n\nYou can invoke this code (Q#) from your Python code as follows. (Use Python or .NET .)\n\nN = 11 a = 5 res = QuantumPeriodFinding.simulate(num=N, a=a) N = 15 a = 7 res = QuantumPeriodFinding.simulate(num=N, a=a)\n\nYou can download and run source code from here.\n\nInteger Factorization\n\nUsing above period-finding algorithm, we can now extend to integer factorization, which is also difficult to be solved by classical efficient algorithms.\n\nNote : As you can easily see, it needs when you apply the trivial iteration search for integer factorization, where the integer has bit’s size. There exist several challenges (studies) for reducing computation complexity with classical algorithms, but it is known that there’s no existence with -polynomial complexity for a -bits number in classical algorithms. (See “Integer factorization” in Wikipedia.)\n\nWhen is even and , it’s known that at least one of is a non-trivial factor of . Then overall algorithm of integer factorization for integer is as follows. :\n\n(The following step 5 is quantum step, and others are classical.)\n\nIf is even, return 2 as a factor.\n\nIf not, proceed to the next step.\n\nCheck if for some integer and . (Check for all . This will be -polynomial computation for -bit’s integer .)\n\nIf so, return as a factor. Otherwise, proceed to the next step.\n\nPick a random integer and get the great common divisor with Euclidean algorithm.\n\nIf , return as a factor.\n\nIf not, proceed to the next step.\n\nIf , and is coprime and then run above quantum period-finding algorithm for and . (i.e, find the least integer such as .)\n\nIf the period is odd, go back to step 3.\n\nIf the period is even and , go back to step 3.\n\nOtherwise, check if is a nontrivial factor of . If not, go back to step 3.\n\nPlease try to implement quantum-inspired integer factorization with the combination of quantum part (above Q# code) and classical part (Python code).\n\n(Here I skip this implementation example.)\n\nIn today’s gate-model quantum computers, there exist difficulties for error correction (correction of quantum noise) and fault tolerance, and the scaling up qubits (i.e, adding more qubits) will then increase the errors more.\n\nConsidering these facts, Shor’s algorithm for large number is hard to be implemented in today’s devices, and unfortunately example in this post will then be only for experimental purpose. (It won’t be applicable to the real business.)\n\nWe hope that we can make use of general-purpose (gate-model) quantum computers in the near future.\n\nReference :\n\nPolynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer"
    }
}