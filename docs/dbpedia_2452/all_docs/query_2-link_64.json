{
    "id": "dbpedia_2452_2",
    "rank": 64,
    "data": {
        "url": "https://arxiv.org/html/2404.19428v2",
        "read_more_link": "",
        "language": "en",
        "title": "From Quantum Mechanics to Quantum Software Engineering: A Historical Review",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "From Quantum Mechanics to\n\nQuantum Software Engineering:\n\nA Historical Review\n\nGiuseppe Bisicchia, Jose Garcia-Alonso, Juan M. Murillo, and Antonio Brogi G. Bisicchia and A. Brogi are with the Department of Computer Science, University of Pisa (Pisa, Italy).J. Garcia-Alonso and J. M. Murillo are with Quercus Software Engineering Group, University of Extremadura (Cáceres, Spain).Corresponding author: giuseppe.bisicchia@phd.unipi.itWork partly supported by projects: hOlistic Sustainable Management of distributed softWARE systems (OSMWARE), PRA_2022_64, funded by the University of Pisa; PID2021-1240454OB-C31, funded by the Spanish Ministry of Science, Innovation and Universities; GR21133, funded by the Regional Ministry of Economy, Science and Digital Agenda of the Regional Government of Extremadura.\n\nAbstract\n\nVictor Hugo’s timeless observation, ‘Nothing is more powerful than an idea whose time has come’, resonates today as Quantum Computing, once only a dream of a physicist, stands at the threshold of reality with the potential to revolutionise the world. To comprehend the surge of attention it commands today, one must delve into the motivations that birthed and nurtured Quantum Computing. While the past of Quantum Computing provides insights into the present, the future could unfold through the lens of Quantum Software Engineering. Quantum Software Engineering, guided by its principles and methodologies investigates the most effective ways to interact with Quantum Computers to unlock their true potential and usher in a new era of possibilities. To gain insight into the present landscape and anticipate the trajectory of Quantum Computing and Quantum Software Engineering, this paper embarks on a journey through their evolution and outlines potential directions for future research. By doing so, we aim to equip readers (ideally software engineers and computer scientists not necessarily with quantum expertise) with the insights necessary to navigate the ever-evolving landscape of Quantum Computing and anticipate the trajectories that lie ahead.\n\nIndex Terms:\n\nQuantum Computing, Quantum Software Engineering.\n\nI A Brief History of Quantum Computing\n\n‘What kind of computer are we going to use to simulate physics?’ It was the Nobel laureate Richard Feynman who raised this question in his visionary talk [1], beginning the history of Quantum Computing .\n\nThis question is rooted in a series of crises and revolutions [6, 7, 8, 9, 10, 11] that shook the world of physics to its foundations between 1900 and 1925. The result of that period of turmoil was a new fundamental theory of physics which describes the behaviour of Nature at subatomic levels: Quantum Mechanics [12, 13, 14].\n\nManin and Feynman’s concerns [1, 2, 5] on the simulation of physical systems were primarily about the difficulties of modelling quantum systems. In such systems, the number of variables required to represent them increases exponentially with their complexity and with the number of particles involved .\n\nFollowing these considerations, in 1985, physicist David Deutsch suggested, in his seminal work [15], a deeper connection between computing and physics, stating a stronger ‘physical version’ of the Church-Turing thesis. Such thesis, also called the Church–Turing–Deutsch principle states that:\n\nEvery finitely realizable physical system can be perfectly simulated by a universal model computing machine operating by finite means.\n\nWith his physical interpretation of the Church-Turing thesis, Deutsch brought attention to an often neglected fact about computation. Every algorithm is actually performed by a physical system, whether it be an electronic calculator, a mechanical apparatus or a human being. Thus, computation is ultimately a physical process and, hence, a universal computer (that is a physical system too) must be able to simulate the dynamics of every possible physical system.\n\nThe consequences of the physics revolution in the early 20th century, however, led scientists to postulate that the fundamental nature of physics is ultimately quantum mechanical. Unfortunately, classical systems seem to be ineffective in efficiently simulating quantum mechanical systems [1, 2]. Deutsch was then naturally led to propose a universal computing device based on the principles of quantum mechanics [15], so as to overcome the limitations of classical computers: the quantum computer was born.\n\nPretty soon, the potential of quantum computers began to be, as Deutsch surmised, far more impactful than just simulating physical systems. In 1992, David Deutsch, in collaboration with Richard Jozsa, formulated a problem that, even if of little practical interest, can be solved more efficiently by quantum devices than by any classical or stochastic algorithm [16]. Shortly afterwards, in 1993, Ethan Bernstein and Umesh Vazirani proposed another problem, showing the advantage of quantum devices over classical ones even when small errors are allowed [17]. In the same work, Bernstein and Vazirani designed a quantum version of the Fourier transform [18]. In 1994, leveraging the quantum Fourier transform and the work of Daniel Simon [19], who showed that a quantum computer could find the period of a function with an exponential speedup, Peter Shor presented an efficient quantum algorithm for computing discrete logarithms. Only a few days later, Shor formulated an efficient quantum algorithm also for factoring large numbers [20]. Both problems are believed to be intractable on classical computers, and thereby commonly used in cryptographic protocols [21, 22]. Just two years later, Seth Lloyd proved that quantum computers could simulate quantum systems without the exponential overhead present in classical simulations, confirming Feynman’s 1982 conjecture [23]. In the same year, Lov Grover presented a quantum algorithm achieving an optimal quadratic speedup for unstructured search [24]. Shor and Grover’s breakthroughs gave a strong impetus to the research on quantum algorithms, demonstrating the existence of useful problems that benefit from a quantum speedup.\n\nMeanwhile, research into working quantum computers also began to take its first steps. In 1993, Seth Lloyd proposed a method for building a potentially realisable quantum computer through pulsed quantum arrays, i.e., arrays of weakly coupled quantum systems subjected to a sequence of electromagnetic pulses of specific lengths and frequencies [25]. Not long afterwards, in 1995, Juan Cirac and Peter Zoller suggested an implementation of a quantum computer employing cold ionised atoms confined in electric potential traps and interacting with laser beams [26]. Following the developments in the field, just one year later, David DiVincenzo formalised five minimal requirements for creating a working quantum computer. Such criteria include the availability of scalable qubits highly isolated from the external environment, the ability to initialise, manipulate and entangle their state and to ‘strongly’ measure the state of each qubit [27]. A further milestone was set by Yasunobu Nakamura et al., between 1991 and 2001, who built a working, controllable superconducting qubit through a Josephson junction [28, 29].\n\nIn those years, however, a shadow threatened and questioned the very foundations of Quantum Computing [30]. The decoherence menaced to dash any hopes of having actually usable quantum computers [31]. Decoherence is the phenomenon that, under typical conditions, prevents complex many-particle quantum systems from exhibiting quantum behaviour for a long time, stranding the dream of a quantum computer with no way out [32]. It was Shor again who gave hope and new life to the field. Shor demonstrated in 1995 how it was possible to reduce the destructive effects of decoherence through the quantum analogue of error-correcting codes [33] and fault-tolerant methods for executing reliable quantum computations on noisy quantum computers [34]. The work of Shor and others [35, 36, 37] thus confirmed that it is possible, at least in principle, to suppress the error rate of a quantum computer to arbitrarily low levels, thanks to error correction schemes and as long as the error rate is below a certain threshold , this is the so-called threshold theorem [39].\n\nSignificant developments have been made since those first steps in both quantum software and hardware [38, 40]. In 2011, the first ever commercially available quantum computer was presented, and sold, by D-Wave [41]. It was D-Wave One, a 128-qubit quantum annealer [43]. In 2016, IBM put online their 5-qubit, gate-based , superconducting quantum computer, making quantum computing publicly available for the first time, through the cloud [45, 46]. In 2018, the first commercial quantum computer employing trapped ions was launched by IonQ [47]. Just one year later, Google claimed the achievement of quantum supremacy with their 54-qubit, superconducting processor ‘Sycamore’ [49]. However, some doubts arose shortly afterwards [50, 51, 52] and eventually classical devices beat Google’s result [53]. The last current milestone in the quantum race was set in 2023 by IBM, which announced evidence for the utility of quantum computing even with noisy hardware, showing how it is possible to produce reliable results even without fault-tolerant quantum computers and at a scale beyond brute-force classical computation [54]. Also in this case, though, the scientific community does not entirely agree [55, 56, 57, 58].\n\nNevertheless, even though the supremacy and utility of quantum computers have not yet been established beyond a shadow of a doubt, there is no denying that we are now at the gates of a new era [59, 60, 61]. Indeed, even if quantum and classical computers feature the same computational power [15], i.e., they can solve the same class of problems, it is believed (and some evidence began to arise) [62, 63, 64, 65], that quantum computers can solve some problems asymptotically faster than what it is possible just with classical resources [66]. In fact, increasingly cutting-edge applications are emerging, promising to revolutionise numerous industries and sectors and with a potentially immeasurable impact on society [67]. Among the most researched areas are medicine, chemistry and pharmacy, biology and agriculture, engineering, energy and logistics, economy and finance, meteorology, manufacturing and cybersecurity [68, 69].\n\nII The Dawn of Quantum Software Engineering\n\nDespite the great and fast progress being made in Quantum Computing, current quantum computers cannot scale beyond dimensions of a few tens (or in the best cases hundreds) of qubits. At the same time, quantum devices are still very sensitive to external interference (noise), which can easily disrupt an ongoing computation. Due to such limitation, current quantum computers are usually referred to as Noisy Intermediate-Scale Quantum (NISQ) devices [70], highlighting their capacity to execute only Quantum programs featuring a small number of qubits and consecutive steps [71, 72, 73].\n\nHowever, this is not the first time in history that computer scientists have had to face such limitations on computing devices. Several authors, indeed, compare the current quantum computing landscape to that of classical computing during the 60s and that a similar development should be followed [74, 75, 76].\n\nIn such a roadmap, Quantum Software Engineering has a primary role ‘to exploit the full potential of commercial quantum computer hardware, once it arrives’ [77]. Quantum Software Engineering will be, indeed, also necessary to define the best quantum software development and application management lifecycles. They will enable to coherently employ and operate the increasing amount of quantum methodologies and tools, proposed to solve problems nowadays present in all the development and management phases [78, 79]. To this aim, there are already emerging several full ecosystems to exploit such methodologies and tools (e.g., [80, 81]), and the compelling need for a structured discipline of Quantum Software Engineering is discussed by numerous authors (e.g., [82, 83, 84])\n\nJianjun Zhao defines in [78] the term ‘Quantum Software Engineering’ as\n\n‘The use of sound engineering principles for the development, operation, and maintenance of quantum software and the associated document to obtain economically quantum software that is reliable and works efficiently on quantum computers’\n\nHighlighting the importance of applying ‘sound engineering principles’ to the quantum software lifecycle, that its management must be ‘economically’ affordable, and that the resulting software must be ‘reliable’ and must work ‘efficiently’ on quantum computers.\n\nSome authors claim that Quantum Computing will lead to a new ‘Golden Age’ of Software Engineering. They believe that ‘Software Engineering has built up a broad knowledge base, and has learnt many lessons that should be applied to the production of quantum software. The new quantum software engineering field needs to be considered as the application or adaptation of the well-known methods, techniques, and practices of software engineering. At the same time, however, new methods and techniques will be defined specifically for quantum software production’ [85].\n\nThese strong beliefs gather a large support all around the globe. As an example, ‘The Talavera Manifesto for Quantum Software Engineering and Programming’ [76], a document that summarises the principles and commitments for Quantum Software Engineering, and that is considered a milestone in the (even if brief) history of QSE [86], has already been signed by more than 200 researchers and practitioners from more than 20 countries .\n\nIII Quantum Software Engineering\n\nThe history of Quantum Software Engineering (QSE) is pretty recent. The term ‘Quantum Software Engineering’ first appeared in 2002 in the ‘Grand Challenge for Computing Research’ [77] by John Clark and Susan Stepney, in which the authors identify four different potential research lines, viz., Foundations, Languages and Compilers, Methods and Tools and, Novel Quantum Possibilities.\n\nAs for the foundational aspects, the authors highlighted the need to further develop and investigate the concepts of Universal Turing Machine and Quantum Algorithmic Complexity as well as new models of quantum computations above the level of unitary matrices and gates. Strictly linked with the new quantum computational models the authors discussed the need to determine new fundamental building blocks of quantum programming for assembly, high-level and specification languages, and the corresponding quantum compilers. Such progress should be accompanied by new architectures and debugging and testing techniques, as well as more powerful simulators and visualisation techniques. Finally, the authors recommended investigating the effects of the pure random generation and entanglement capabilities offered by quantum computers and how they can help to produce new algorithms and protocols.\n\nMoving forward, in 2020, ‘The Talavera Manifesto for Quantum Software Engineering and Programming’ [76] was presented as the resulting effort of academia and industry practitioners who joined at the first International Workshop on QuANtum SoftWare Engineering & pRogramming. The Manifesto discusses how QSE should:\n\n1.\n\nbe agnostic regarding quantum programming languages and technologies,\n\n2.\n\nembrace the coexistence of classical and quantum computing,\n\n3.\n\nsupport the management of quantum software development projects,\n\n4.\n\nconsider the evolution of quantum software,\n\n5.\n\naim at delivering quantum programs with desirable zero defects,\n\n6.\n\npromote quantum software reuse,\n\n7.\n\naddress security and privacy by design, and\n\n8.\n\ncover the governance and management of software.\n\nThe Manifesto also links Quantum Software Engineering with classical Software Engineering suggesting how a quantum approach to Software Engineering should ‘take care of producing quantum software by applying knowledge and lessons learned from the software engineering field. This implies applying or adapting the existing software engineering processes, methods, techniques, practices and principles for the development of quantum software (or it may imply creating new ones)’.\n\nThe same approach is also suggested in [75]. The authors discuss that ‘the new quantum software engineering field needs to be considered as the application or adaptation of the well-known methods, techniques, and practices of software engineering. Some techniques can be used just as they are in classical computing. At the same time, however, new methods and techniques will be defined specifically for quantum software production’.\n\nLuis Barbosa, in his position paper [87], identifies four main issues to a scientific rigorously Quantum Software Engineering discipline, viz., investigate appropriate semantic structures capable of managing classical controls and quantum data, develop an algorithmic calculus for the systematic derivation of quantum programs in a compositional way, seek a new family of dynamic logics to support the formulation of contract for quantum programs and their compositional verification and, finally, design a framework for coordination of orchestrated quantum computation systems. In the same work, Barbosa discusses also three research directions from a formal methods point of view, namely, the study of quantum models, architectures and, properties with the ultimate goal of developing a ‘a mathematically based approach, able to conceptualise, and predict behaviour, and to provide a rich, formal framework for specifying, developing and verifying quantum algorithms’.\n\nIn [83], the authors identify software design, software construction, software testing, software maintenance, and software quality as the main SWEBOK (Software Engineering Body of Knowledge) [88] areas that will be heavily influenced by quantum computing, followed by software requirements, software engineering process, software engineering models and methods, and computing foundations. Furthermore, the authors discuss some promising research lines, viz., design of quantum hybrid systems, quantum program testing, quality assurance, and re-engineering and modernisation.\n\nIn [74], the authors link the current state of Quantum Computing with that of classical computing in the late fifties and early sixties [89, 90], by considering different challenges and problems that researchers had to face in those periods and that today they reappeared in their quantum version, e.g., the hardware cost, their limited availability and limited power, the difficulty of operating quantum computers, their sensitivity and small reliability, the limited portability of the programs. On the basis of such considerations and the computer science history [91], the authors warn that ‘all of the above [considerations] can lead one to assume that we are on the verge of a potential Quantum Software Crisis. Software Engineering must pay attention to these signals in order to anticipate it’. At the same time, they believe that starting from this analogy and, ‘analyzing the advances and the lessons learned in the field of Software Engineering in the last 60 years, raises the directions that could help to develop the future Quantum Software Engineering’. The authors outline also three possible directions for QSE, viz., investigating new quantum software processes and methodologies, design of new abstractions for quantum software, and development of quantum structured programming.\n\nOne of the main comprehensive surveys on the field of QSE [78], was published by Jianjun Zhao in 2020. The ‘quantum software lifecycle’ is a pivotal point in Zhao’s work and after a careful discussion and analysis a first systemic, sequential model is proposed. Zhao’s model is a five-step lifecycle comprising, namely, requirements analysis, software design, implementation, testing, and maintenance.\n\nIn the same year, Weder et al. proposed a quantum software lifecycle model too [79]. Their proposal, differently from Zhao’s, starts by considering how to separate a problem’s classical and quantum parts and is a ten steps process designed for applications during the NISQ era and, thus, incorporates phases such as data preparation, oracle expansion, and mitigation of readout-errors. Other steps are related to hardware-independent and dependent optimisation and the selection of a suitable quantum computer.\n\nIn [84], the authors present a five-step quantum development model, based on their experiences and findings in the development of three Variational Quantum Algorithms (VQA) [92] for two industrial use cases (i.e., route planning and optimisation). The proposed phases are the following, problem definition, quantum algorithm selection, implementation, fine-tuning, and postprocessing. The authors also noticed a high quantity of (even difficult) design decisions to be taken during each phase, most of them related to the problems induced by NISQ devices. They also highlight the need for experimental approaches to support the design decision process and underline the importance of Model-driven Software Development [93] in quantum computing. In [94] too, Gemeinhardt et al. support the study of Model-Driven Engineering for quantum technologies, arguing its utility in easing the development of software systems.\n\nWith the aim of understanding what are the challenges and opportunities of quantum computing facing the software engineering community, El Aoun et al. carried out an empirical study on Stack Exchange Forums and GitHub Issues to investigate the QSE-related challenges perceived by developers [95]. They discovered that some of the challenges faced by quantum developers are the same present in classical software developments (e.g., dependency management). Anyway, quantum development also presents quantum-specific challenges (e.g., the interpretation of quantum programs’ output). The authors also identify different areas requiring attention (e.g., learning resources both on practical and theoretical aspects of quantum computing, error management, and production of tools to support the development).\n\nWith a similar approach, De Stefano et al. mined GitHub repositories employing quantum framework to understand the most commonly used technologies and interviewed the contributors of such repositories to survey their opinions on the current adoption and challenges of quantum programming [96]. They found out that quantum programming tools are mostly used for personal study purposes and most GitHub contributors on quantum computing work in research and framework repositories. They also discovered that most challenges are related to the understanding of quantum programs, the complexities associated with establishing hardware and software infrastructures, issues pertaining to implementation and code quality, the difficult task of building a quantum developer community, and the existing shortcomings in the realism of current quantum applications. They conclude how at the date quantum programming primarily serves didactic purposes or satisfies researchers’ curiosity in experimenting with quantum technologies and that challenges are not only related to quantum development but also socio-technical considerations.\n\nWith a systematic study of broader scope, De Stefano et al. surveyed existing literature on QSE [86]. They discovered that current QSE research ‘has primarily focused on software testing with little attention given to other topics, such as software engineering management’. Moreover, most papers proposed solutions and techniques or reported empirical findings and positions. They also propose to set the ‘official’ establishment of QSE in 2020 with the Talavera Manifesto, with first publications, however, dating back to 2018.\n\nIn the realm of quantum software testing, researchers have grappled with the unique challenges posed by the principles of quantum mechanics. As highlighted by Miranskyy et al. [99, 100], the very act of observing a quantum computation unavoidably alters its state, rendering traditional interactive debugging impractical. Consequently, a shift towards methodologies such as black-box testing or the judicious use of quantum simulators becomes imperative. Quantum simulators offer the advantage of observing qubit states without perturbation, allowing for more effective testing strategies.\n\nAddressing these challenges, in [101] the authors delve into potential approaches for quantum software testing. Their exploration encompasses statistical techniques tailored to the stochastic nature of quantum physics. Leveraging statistical proof rules [102] and assertions [103], they propose strategies for both the verification and testing phases. In the pursuit of verification, discussions revolve around quantum adaptations of Hoare logic [104], a formal system for reasoning about the correctness of computer programs. Additionally, the authors illustrate how the concept of quantum reversibility, as elucidated by Patel et al. [105] and Zamani et al. [106], can be harnessed for verification purposes, further enhancing the reliability of quantum programs.\n\nIV The Future of Quantum Software Engineering\n\nThe existing body of literature indicates a growing and pressing demand for the creation of a novel Software Engineering paradigm tailored for Quantum Computing. This need becomes even more pronounced as the quantity and quality of quantum computers continue to advance. This approach should be adept at addressing problems by either building upon and potentially enhancing classical techniques and tools or by pioneering entirely new solutions, facing challenges unique to the quantum domain. This new Quantum Software Engineering must possess the capability to address the challenges that the next generation of quantum developers will encounter. Notably, the upcoming cohort of quantum developers will comprise individuals who are not solely specialists in the field with extensive experience in quantum mechanics and computing. Thus, the new Quantum Software Engineering proposal must address also such a heterogeneous user base.\n\nNumerous papers have explored intriguing and potentially transformative avenues for future research in Quantum Software Engineering (QSE) [61, 74, 78, 86, 95, 96]. While these directions hold considerable merit and interest, we have chosen not to reiterate them in this manuscript. Instead, we decided to delve into uncharted territories, proposing research directions that we anticipate harbouring significant potential yet remain, to the best of our knowledge, barely addressed in the existing literature. Herein, we present promising research avenues and challenges within QSE, anticipating their escalating importance in the near future and envisaging their potential to yield groundbreaking discoveries:\n\n1.\n\nLanguage abstractions. Developing Quantum algorithms remains a nuanced art rather than a streamlined engineering process. Presently, quantum abstractions mirror the early stages of classical computing, where each individual (qu)bit and gate requires meticulous management. Crafting intricate quantum programs thus poses formidable challenges. However, with the development of higher-level language abstractions and foundational quantum primitives, developers can potentially transcend the burdensome intricacies of low-level matrix operations. This shift promises to bring quantum development closer to the intuitive and efficient coding practices prevalent in modern classical programming paradigms [107, 108, 109].\n\n2.\n\nQuantum software debugging and visualisation. Debugging and visualising quantum software pose unique challenges due to the inherent nature of quantum computation. Unlike classical computing, observing the state of a quantum computation inevitably disrupts its execution, complicating the debugging process on real quantum hardware. Fortunately, quantum simulators offer a workaround, enabling observation of qubit states without perturbation. By refining debugging techniques tailored to quantum environments, we can enhance the quality and ease of developing quantum programs. Moreover, improving visualisation techniques for quantum computation holds promise in enhancing both comprehension and debugging capabilities. Clear visual representations of quantum processes can provide invaluable insights into program behaviour and facilitate the identification of errors. By investing in the advancement of quantum software debugging and visualisation tools, we can significantly accelerate progress in quantum computing [100, 110, 111].\n\n3.\n\nDistributed quantum computations. The current quantum computing landscape is characterised by a significant diversity in qubit implementations and quantum computer architectures, resulting in a broad spectrum of performance and qualitative attributes. Presently, quantum computers are predominantly perceived and utilised as individual monolithic entities. However, an alternative approach could involve distributing quantum computations across multiple quantum computers, capitalising on and leveraging the existing heterogeneity rather than perceiving it as a limitation. This paradigm shift opens doors to novel strategies in quantum computation. By harnessing the diverse capabilities of various quantum computing platforms, we can envision a distributed computing framework where tasks are intelligently allocated across a network (either classical or quantum) of interconnected quantum devices. This distributed approach not only mitigates the limitations imposed by individual quantum computers but also unlocks synergistic potentials arising from their collective strengths. Embracing this heterogeneity fosters a more robust and scalable quantum computing ecosystem, paving the way for collaborative problem-solving on a scale previously unattainable [112, 113, 114].\n\nReferences\n\n[1] R. P. Feynman, “Simulating physics with computers,” International Journal of Theoretical Physics, vol. 21, pp. 467–488, 1982.\n\n[2] Y. Manin, “Computable and uncomputable,” Sovetskoye Radio, Moscow, vol. 128, p. 28, 1980.\n\n[3] P. Benioff, “The computer as a physical system: A microscopic quantum mechanical hamiltonian model of computers as represented by turing machines,” Journal of statistical physics, vol. 22, pp. 563–591, 1980.\n\n[4] ——, “Quantum mechanical hamiltonian models of turing machines,” Journal of Statistical Physics, vol. 29, pp. 515–546, 1982.\n\n[5] R. P. Feynman, “Quantum mechanical computers,” Optics news, vol. 11, no. 2, pp. 11–20, 1985.\n\n[6] M. Planck, “Ueber das gesetz der energieverteilung im normalspectrum,” Annalen der Physik, vol. 309, no. 3, pp. 553–563, 1901.\n\n[7] A. Einstein, “Über einen die erzeugung und verwandlung des lichtes betreffenden heuristischen gesichtspunkt,” Annalen der Physik, vol. 322, no. 6, pp. 132–148, 1905.\n\n[8] N. Bohr, “I. on the constitution of atoms and molecules,” The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science, vol. 26, no. 151, pp. 1–25, 1913.\n\n[9] W. K. Heisenberg, Über quantentheoretische Umdeutung kinematischer und mechanischer Beziehungen., 1925, vol. 33, no. 1.\n\n[10] E. Schrödinger, “Quantisierung als eigenwertproblem,” Annalen der Physik, vol. 384, no. 4, pp. 361–376, 1926.\n\n[11] M. Born, “Quantenmechanik der stoßvorgänge,” Zeitschrift für physik, vol. 38, no. 11-12, pp. 803–827, 1926.\n\n[12] P. A. M. Dirac, The principles of quantum mechanics, 1981, no. 27.\n\n[13] J. Von Neumann, Mathematical foundations of quantum mechanics: New edition, 2018, vol. 53.\n\n[14] W. Pauli, General principles of quantum mechanics, 2012.\n\n[15] D. Deutsch, “Quantum theory, the church–turing principle and the universal quantum computer,” Proceedings of the Royal Society of London. A. Mathematical and Physical Sciences, vol. 400, no. 1818, pp. 97–117, 1985.\n\n[16] D. Deutsch and R. Jozsa, “Rapid solution of problems by quantum computation,” Proceedings of the Royal Society of London. Series A: Mathematical and Physical Sciences, vol. 439, no. 1907, pp. 553–558, 1992.\n\n[17] E. Bernstein and U. Vazirani, “Quantum complexity theory,” in Proceedings of the twenty-fifth annual ACM symposium on Theory of computing, 1993, pp. 11–20.\n\n[18] H. J. Nussbaumer, The fast Fourier transform, 1982.\n\n[19] D. R. Simon, “On the power of quantum computation,” in Proceedings 35th Annual Symposium on Foundations of Computer Science, 1994, pp. 116–123.\n\n[20] P. W. Shor, “Algorithms for quantum computation: discrete logarithms and factoring,” in Proceedings 35th annual symposium on foundations of computer science, 1994, pp. 124–134.\n\n[21] K. S. McCurley, “The discrete logarithm problem,” in Proc. of Symp. in Applied Math, vol. 42, 1990, pp. 49–74.\n\n[22] J. Buchmann, Introduction to cryptography, 2004, vol. 335.\n\n[23] S. Lloyd, “Universal quantum simulators,” Science, vol. 273, no. 5278, pp. 1073–1078, 1996.\n\n[24] L. K. Grover, “A fast quantum mechanical algorithm for database search,” in Proceedings of the twenty-eighth annual ACM symposium on Theory of computing, 1996, pp. 212–219.\n\n[25] S. Lloyd, “A potentially realizable quantum computer,” Science, vol. 261, no. 5128, pp. 1569–1571, 1993.\n\n[26] J. I. Cirac and P. Zoller, “Quantum computations with cold trapped ions,” Physical review letters, vol. 74, no. 20, p. 4091, 1995.\n\n[27] D. P. DiVincenzo, “Topics in quantum computers,” in Mesoscopic electron transport, 1997, pp. 657–677.\n\n[28] Y. Nakamura, Y. A. Pashkin, and J. Tsai, “Coherent control of macroscopic quantum states in a single-cooper-pair box,” nature, vol. 398, no. 6730, pp. 786–788, 1999.\n\n[29] Y. Nakamura, Y. A. Pashkin, and J. S. Tsai, “Rabi oscillations in a josephson-junction charge two-level system,” Physical Review Letters, vol. 87, no. 24, p. 246601, 2001.\n\n[30] R. Landauer, “Is quantum mechanics useful?” Philosophical Transactions of the Royal Society of London. Series A: Physical and Engineering Sciences, vol. 353, no. 1703, pp. 367–376, 1995.\n\n[31] W. G. Unruh, “Maintaining coherence in quantum computers,” Physical Review A, vol. 51, no. 2, p. 992, 1995.\n\n[32] S. Haroche and J.-M. Raimond, “Quantum computing: dream or nightmare?” Physics Today, vol. 49, no. 8, pp. 51–52, 1996.\n\n[33] P. W. Shor, “Scheme for reducing decoherence in quantum computer memory,” Physical review A, vol. 52, no. 4, p. R2493, 1995.\n\n[34] ——, “Fault-tolerant quantum computation,” in Proceedings of 37th conference on foundations of computer science, 1996, pp. 56–65.\n\n[35] D. Aharonov and M. Ben-Or, “Fault-tolerant quantum computation with constant error,” in Proceedings of the twenty-ninth annual ACM symposium on Theory of computing, 1997, pp. 176–188.\n\n[36] E. Knill, R. Laflamme, and W. H. Zurek, “Resilient quantum computation,” Science, vol. 279, no. 5349, pp. 342–345, 1998.\n\n[37] A. Y. Kitaev, “Quantum computations: algorithms and error correction,” Russian Mathematical Surveys, vol. 52, no. 6, p. 1191, 1997.\n\n[38] M. A. Nielsen and I. L. Chuang, Quantum Computation and Quantum Information, 2012.\n\n[39] J. Preskill, “Fault-tolerant quantum computation,” in Introduction to quantum computation and information, 1998, pp. 213–269.\n\n[40] ——, “Quantum computing 40 years later,” in Feynman Lectures on Computation, 2023, pp. 193–244.\n\n[41] Z. Merali et al., “First sale for quantum computing,” Nature, vol. 474, no. 7349, p. 18, 2011.\n\n[42] P. Hauke et al., “Perspectives of quantum annealing: Methods and implementations,” Rep. Prog. Phys., vol. 83, no. 5, p. 054401, 2020.\n\n[43] M. W. Johnson, M. H. S. Amin, S. Gildert, T. Lanting, F. Hamze, N. Dickson, R. Harris, A. J. Berkley, J. Johansson, P. Bunyk, E. M. Chapple, C. Enderud, J. P. Hilton, K. Karimi, E. Ladizinsky, N. Ladizinsky, T. Oh, I. Perminov, C. Rich, M. C. Thom, E. Tolkacheva, C. J. S. Truncik, S. Uchaikin, J. Wang, B. Wilson, and G. Rose, “Quantum annealing with manufactured spins,” Nature, vol. 473, no. 7346, pp. 194–198, 2011.\n\n[44] K. Michielsen et al., “Benchmarking gate-based quantum computers,” Comput. Phys. Commun., vol. 220, pp. 44–55, 2017.\n\n[45] A. C. Santos, “The ibm quantum computer and the ibm quantum experience,” 2016.\n\n[46] D. Alsina and J. I. Latorre, “Experimental test of mermin inequalities on a five-qubit quantum computer,” Physical Review A, vol. 94, no. 1, 2016.\n\n[47] P. Ball, “First commercial ion-based quantum computer built,” Physics World, vol. 32, no. 2, pp. 5–5, 2019.\n\n[48] J. Preskill, “Quantum computing and the entanglement frontier,” 2012.\n\n[49] F. Arute, K. Arya, R. Babbush, D. Bacon, J. C. Bardin, R. Barends, R. Biswas, S. Boixo, F. G. S. L. Brandao, D. A. Buell, B. Burkett, Y. Chen, Z. Chen, B. Chiaro, R. Collins, W. Courtney, A. Dunsworth, E. Farhi, B. Foxen, A. Fowler, C. Gidney, M. Giustina, R. Graff, K. Guerin, S. Habegger, M. P. Harrigan, M. J. Hartmann, A. Ho, M. Hoffmann, T. Huang, T. S. Humble, S. V. Isakov, E. Jeffrey, Z. Jiang, D. Kafri, K. Kechedzhi, J. Kelly, P. V. Klimov, S. Knysh, A. Korotkov, F. Kostritsa, D. Landhuis, M. Lindmark, E. Lucero, D. Lyakh, S. Mandrà, J. R. McClean, M. McEwen, A. Megrant, X. Mi, K. Michielsen, M. Mohseni, J. Mutus, O. Naaman, M. Neeley, C. Neill, M. Y. Niu, E. Ostby, A. Petukhov, J. C. Platt, C. Quintana, E. G. Rieffel, P. Roushan, N. C. Rubin, D. Sank, K. J. Satzinger, V. Smelyanskiy, K. J. Sung, M. D. Trevithick, A. Vainsencher, B. Villalonga, T. White, Z. J. Yao, P. Yeh, A. Zalcman, H. Neven, and J. M. Martinis, “Quantum supremacy using a programmable superconducting processor,” Nature, vol. 574, no. 7779, pp. 505–510, 2019.\n\n[50] Y. A. Liu, X. L. Liu, F. N. Li, H. Fu, Y. Yang, J. Song, P. Zhao, Z. Wang, D. Peng, H. Chen, C. Guo, H. Huang, W. Wu, and D. Chen, “Closing the ‘quantum supremacy’ gap,” in Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis, 2021.\n\n[51] J. F. F. Bulmer, B. A. Bell, R. S. Chadwick, A. E. Jones, D. Moise, A. Rigazzi, J. Thorbecke, U.-U. Haus, T. V. Vaerenbergh, R. B. Patel, I. A. Walmsley, and A. Laing, “The boundary for quantum advantage in gaussian boson sampling,” Science Advances, vol. 8, no. 4, Jan. 2022.\n\n[52] K. McCormick, “Race not over between classical and quantum computers,” Physics, vol. 15, 2022.\n\n[53] F. Pan, K. Chen, and P. Zhang, “Solving the sampling problem of the sycamore quantum circuits,” Physical Review Letters, vol. 129, no. 9, 2022.\n\n[54] Y. Kim, A. Eddins, S. Anand, K. X. Wei, E. van den Berg, S. Rosenblatt, H. Nayfeh, Y. Wu, M. Zaletel, K. Temme, and A. Kandala, “Evidence for the utility of quantum computing before fault tolerance,” Nature, vol. 618, no. 7965, pp. 500–505, 2023.\n\n[55] J. Tindall, M. Fishman, M. Stoudenmire, and D. Sels, “Efficient tensor network simulation of ibm’s eagle kicked ising experiment,” 2023.\n\n[56] T. Begušić and G. K.-L. Chan, “Fast classical simulation of evidence for the utility of quantum computing before fault tolerance,” 2023.\n\n[57] K. Kechedzhi, S. V. Isakov, S. Mandrà, B. Villalonga, X. Mi, S. Boixo, and V. Smelyanskiy, “Effective quantum volume, fidelity and computational cost of noisy quantum processing experiments,” 2023.\n\n[58] S. Anand, K. Temme, A. Kandala, and M. Zaletel, “Classical benchmarking of zero noise extrapolation beyond the exactly-verifiable regime,” 2023.\n\n[59] W. Knight, “Serious quantum computers are finally here. what are we going to do with them,” MIT Technology Review. Retrieved on October, vol. 30, p. 2018, 2018.\n\n[60] I. I. for Business Value, The Quantum Decade: A Playbook for Achieving Awareness, Readiness, and Advantage, 2021.\n\n[61] A. Carleton, E. Harper, J. E. Robert, M. H. Klein, D. De Niz, E. Desautels, J. B. Goodenough, C. Holland, I. Ozkaya, D. Schmidt et al., “Architecting the future of software engineering: A national agenda for software engineering research and development,” Softw. Eng. Inst., Pittsburgh, PA, USA, AD1152714, 2021.\n\n[62] A. J. Daley, I. Bloch, C. Kokail, S. Flannigan, N. Pearson, M. Troyer, and P. Zoller, “Practical quantum advantage in quantum simulation,” Nature, vol. 607, no. 7920, pp. 667–676, 2022.\n\n[63] L. S. Madsen, F. Laudenbach, M. F. Askarani, F. Rortais, T. Vincent, J. F. Bulmer, F. M. Miatto, L. Neuhaus, L. G. Helt, M. J. Collins et al., “Quantum computational advantage with a programmable photonic processor,” Nature, vol. 606, no. 7912, pp. 75–81, 2022.\n\n[64] H.-S. Zhong, H. Wang, Y.-H. Deng, M.-C. Chen, L.-C. Peng, Y.-H. Luo, J. Qin, D. Wu, X. Ding, Y. Hu et al., “Quantum computational advantage using photons,” Science, vol. 370, no. 6523, pp. 1460–1463, 2020.\n\n[65] Y. Wu, W.-S. Bao, S. Cao, F. Chen, M.-C. Chen, X. Chen, T.-H. Chung, H. Deng, Y. Du, D. Fan et al., “Strong quantum computational advantage using a superconducting quantum processor,” Physical review letters, vol. 127, no. 18, p. 180501, 2021.\n\n[66] D. R. Simon, “On the power of quantum computation,” SIAM Journal on Computing, vol. 26, no. 5, pp. 1474–1483, 1997.\n\n[67] M. A. Lopez and M. Da Silva, “Quantum technologies digital transformation, social impact, and cross-sector disruption,” Interamerican Development Bank, 2019.\n\n[68] A. Bayerstadler, G. Becquin, J. Binder, T. Botter, H. Ehm, T. Ehmer, M. Erdmann, N. Gaus, P. Harbach, M. Hess et al., “Industry quantum computing applications,” EPJ Quantum Technology, vol. 8, no. 1, p. 25, 2021.\n\n[69] F. Bova, A. Goldfarb, and R. G. Melko, “Commercial applications of quantum computing,” EPJ quantum technology, vol. 8, no. 1, p. 2, 2021.\n\n[70] J. Preskill, “Quantum computing in the nisq era and beyond,” Quantum, vol. 2, p. 79, 2018.\n\n[71] K. Bharti et al., “Noisy intermediate-scale quantum algorithms,” Rev. Mod. Phys., vol. 94, no. 1, 2022.\n\n[72] F. Leymann and J. Barzen, “The bitter truth about gate-based quantum algorithms in the nisq era,” Quantum Science and Technology, vol. 5, no. 4, p. 044007, 2020.\n\n[73] F. G. Gemeinhardt, R. Wille, and M. Wimmer, “Quantum k-community detection: algorithm proposals and cross-architectural evaluation,” Quantum Information Processing, vol. 20, no. 9, p. 302, 2021.\n\n[74] E. Moguel, J. Berrocal, J. García-Alonso, and J. M. Murillo, “A roadmap for quantum software engineering: Applying the lessons learned from the classics.” in Q-SET@ QCE, 2020, pp. 5–13.\n\n[75] M. A. Serrano, R. Perez-Castillo, and M. Piattini, Quantum Software Engineering, 2022.\n\n[76] M. Piattini, G. Peterssen, R. Pérez-Castillo, J. L. Hevia, M. A. Serrano, G. Hernández, I. G. R. de Guzmán, C. A. Paradela, M. Polo, E. Murina et al., “The talavera manifesto for quantum software engineering and programming.” in QANSWER, 2020, pp. 1–5.\n\n[77] J. Clark and S. Stepney, “Quantum software engineering,” in Workshop on Grand Challenges for Computing Research, e-Science Institute, Edinburgh, 2002.\n\n[78] J. Zhao, “Quantum software engineering: Landscapes and horizons,” arXiv preprint arXiv:2007.07047, 2020.\n\n[79] B. Weder, J. Barzen, F. Leymann, M. Salm, and D. Vietz, “The quantum software lifecycle,” in Proceedings of the 1st ACM SIGSOFT International Workshop on Architectures and Paradigms for Engineering Quantum Software, 2020, pp. 2–9.\n\n[80] J. L. Hevia, G. Peterssen, and M. Piattini, “Quantumpath: A quantum software development platform,” Software: Practice and Experience, vol. 52, no. 6, pp. 1517–1530, 2022.\n\n[81] M. Beisel, J. Barzen, S. Garhofer, F. Leymann, F. Truger, B. Weder, and V. Yussupov, “Quokka: a service ecosystem for workflow-based execution of variational quantum algorithms,” in International Conference on Service-Oriented Computing, 2022, pp. 369–373.\n\n[82] J. Barzen, F. Leymann, S. Feld, and M. Wimmer, “2nd workshop on quantum software architecture (qsa),” in 2022 IEEE 19th International Conference on Software Architecture Companion, ICSA-C 2022, 2022.\n\n[83] M. Piattini, M. Serrano, R. Perez-Castillo, G. Petersen, and J. L. Hevia, “Toward a quantum software engineering,” IT Professional, vol. 23, no. 1, pp. 62–66, 2021.\n\n[84] M. Scheerer, J. Klamroth, S. Garhofer, F. Knäble, and O. Denninger, “Experiences in quantum software engineering,” in 2023 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW), 2023, pp. 552–559.\n\n[85] M. Piattini, G. Peterssen, and R. Pérez-Castillo, “Quantum computing: A new software engineering golden age,” ACM SIGSOFT Software Engineering Notes, vol. 45, no. 3, pp. 12–14, 2021.\n\n[86] M. De Stefano, F. Pecorelli, D. Di Nucci, F. Palomba, and A. De Lucia, “The quantum frontier of software engineering: A systematic mapping study,” arXiv preprint arXiv:2305.19683, 2023.\n\n[87] L. S. Barbosa, “Software engineering for’quantum advantage’,” in Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops, 2020, pp. 427–429.\n\n[88] P. Bourque and R. E. Fairley, Eds., SWEBOK: Guide to the Software Engineering Body of Knowledge, version 3.0 ed. IEEE Computer Society, 2014.\n\n[89] E. W. Dijkstra, “The humble programmer,” Commun. ACM, vol. 15, no. 10, p. 859–866, 10 1972.\n\n[90] G. L. Steele, “Macaroni is better than spaghetti,” in Proceedings of the 1977 Symposium on Artificial Intelligence and Programming Languages, 1977, p. 60–66.\n\n[91] M. S. Mahoney, “The history of computing in the history of technology,” Annals of the History of Computing, vol. 10, no. 2, pp. 113–125, 1988.\n\n[92] M. Cerezo et al., “Variational quantum algorithms,” Nat. Rev. Phys., vol. 3, no. 9, 2021.\n\n[93] M. Brambilla, J. Cabot, and M. Wimmer, Model-driven software engineering in practice, 2017.\n\n[94] F. Gemeinhardt, A. Garmendia, and M. Wimmer, “Towards model-driven quantum software engineering,” in 2nd International Workshop on Quantum Software Engineering (Q-SE), 2021, pp. 13–15.\n\n[95] M. R. E. aoun, H. Li, F. Khomh, and M. Openja, “Understanding quantum software engineering challenges an empirical study on stack exchange forums and github issues,” in IEEE International Conference on Software Maintenance and Evolution, ICSME 2021, Luxembourg, September 27 - October 1, 2021, 2021, pp. 343–354.\n\n[96] M. De Stefano, F. Pecorelli, D. Di Nucci, F. Palomba, and A. De Lucia, “Software engineering for quantum programming: How far are we?” Journal of Systems and Software, vol. 190, p. 111326, 2022.\n\n[97] M. A. Serrano, J. A. Cruz-Lemus, R. Perez-Castillo, and M. Piattini, “Quantum software components and platforms: Overview and quality assessment,” ACM Computing Surveys, vol. 55, no. 8, pp. 1–31, 2022.\n\n[98] P. B. Upama, M. J. H. Faruk, M. Nazim, M. Masum, H. Shahriar, G. Uddin, S. Barzanjeh, S. I. Ahamed, and A. Rahman, “Evolution of quantum computing: A systematic survey on the use of quantum computing tools,” in 2022 IEEE 46th Annual Computers, Software, and Applications Conference (COMPSAC), 2022, pp. 520–529.\n\n[99] A. Miranskyy and L. Zhang, “On testing quantum programs,” in 2019 IEEE/ACM 41st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER). IEEE, 2019, pp. 57–60.\n\n[100] A. Miranskyy, L. Zhang, and J. Doliskani, “On testing and debugging quantum software,” arXiv preprint arXiv:2103.09172, 2021.\n\n[101] A. García de la Barrera, I. García-Rodríguez de Guzmán, M. Polo, and M. Piattini, “Quantum software testing: State of the art,” Journal of Software: Evolution and Process, vol. 35, no. 4, p. e2419, 2023.\n\n[102] Y. Feng, R. Duan, Z. Ji, and M. Ying, “Proof rules for the correctness of quantum programs,” Theoretical Computer Science, vol. 386, no. 1-2, pp. 151–166, 2007.\n\n[103] H. Yang, Z. Luan, Q. Chen, M. Riaz, L. Tang, J. Mars, Z. Li, L. Liu, S. Yin, Y. Wang et al., “Proceedings-international symposium on computer architecture,” 2017.\n\n[104] A. Miranskyy, L. Zhang, and J. Doliskani, “Is your quantum program bug-free?” arXiv preprint arXiv:2001.10870, 2020.\n\n[105] K. N. Patel, J. P. Hayes, and I. L. Markov, “Fault testing for reversible circuits,” IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, vol. 23, no. 8, pp. 1220–1230, 2004.\n\n[106] M. Zamani, M. B. Tahoori, and K. Chakrabarty, “Ping-pong test: Compact test vector generation for reversible circuits,” in 2012 IEEE 30th VLSI Test Symposium (VTS). IEEE, 2012, pp. 164–169.\n\n[107] F. T. Chong, D. Franklin, and M. Martonosi, “Programming languages and compiler design for realistic quantum hardware,” Nature, vol. 549, no. 7671, pp. 180–187, 2017.\n\n[108] H. Fürntratt, P. Schnabl, F. Krebs, R. Unterberger, and H. Zeiner, “Towards higher abstraction levels in quantum computing,” in International Conference on Service-Oriented Computing. Springer, 2023, pp. 162–173.\n\n[109] B. Bichsel, M. Baader, T. Gehr, and M. Vechev, “Silq: A high-level quantum language with safe uncomputation and intuitive semantics,” in Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, 2020, pp. 286–300.\n\n[110] O. Di Matteo, “On the need for effective tools for debugging quantum programs,” arXiv preprint arXiv:2402.09547, 2024.\n\n[111] M. Sasakura and K. Iwata, “Potential of visualization to explain quantum algorithms,” in 2023 27th International Conference Information Visualisation (IV). IEEE, 2023, pp. 426–428.\n\n[112] D. Cuomo, M. Caleffi, and A. S. Cacciapuoti, “Towards a distributed quantum computing ecosystem,” IET Quantum Communication, vol. 1, no. 1, pp. 3–8, 2020.\n\n[113] G. Bisicchia, J. García-Alonso, J. M. Murillo, and A. Brogi, “Dispatching shots among multiple quantum computers: An architectural proposal,” in 2023 IEEE International Conference on Quantum Computing and Engineering (QCE), vol. 2. IEEE, 2023, pp. 195–198.\n\n[114] ——, “Distributing quantum computations, by shots,” in International Conference on Service-Oriented Computing. Springer, 2023, pp. 363–377."
    }
}