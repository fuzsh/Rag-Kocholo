{
    "id": "dbpedia_2452_2",
    "rank": 66,
    "data": {
        "url": "https://www.classiq.io/insights/why-is-shors-algorithm-such-a-keystone-application-of-quantum-computing",
        "read_more_link": "",
        "language": "en",
        "title": "Why is Shorâs algorithm such a keystone application of quantum computing?",
        "top_image": "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d9748bbc50f3e6492a9_Group%201000005473%20(1).jpg",
        "meta_img": "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d9748bbc50f3e6492a9_Group%201000005473%20(1).jpg",
        "images": [
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003654676fe148a0178cc2_Logo.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65c61873c003d026d1cd04b9_burger_18px.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65c61841352345eeb2f18a14_close_18px.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60b8c76a1595f95bf6005cb8_exit-search.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60b8cbd9dce4825730eb037a_Group%20586hover.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cf2f3fdb4ae41a52c463e2_Vector%201%20(Stroke).svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b33ed9bdf74cfb648d_Group%2090.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b330b8915eb18e34d2_Vector.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b3d1b31b27fc8bd912_Vector-1.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60ced3b3061e1e4bc2b0235d_fluent_mail-16-filled.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/6162acd49514763345aa3b32_Polygon%201.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3af667e241c86bf80d0_Apple%20Podcast.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3aff88753b7a9c8e371_Spotify_logo_without_text%201.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3afeb694f240b6d2e5b_Amazon.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3af9d30938aba00e275_Google%20Podcast.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/615dc3ae55b907e8e2dd1f98_Rss.svg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d44ed2139f259601c4a_AD_4nXc7ra-LxvmBRCPGyavYWilKKnNEXYonSCD26m1Q2tmbNMuHH5mWxKCassCDuQWMPUs98aRi37jPYNLLPIr6oEkJs4gCQgsoZr_I9_dPVm2PI2ksiXE7nyjCmFUmnfMHY3UJlW0dWe_AA51J-bEckI8Kpp0.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d44d1c3dea6cc4be0ac_AD_4nXfhEbnFz9PKq1xocVqvSi2ZG02FiiACWCvbcjNDYldEh9WmfP2CiOU3I8o56igoLPvgF0x3c55kAYQrZUahMrpV9cBt3uJZTVID5Ya6YqDskUvarQefJKtlpytFyB0tAi8wUO5uujzI-T_YGBVcov3GrBM.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d447d84c551de3e326d_AD_4nXd9CKWyvoHishOTR2rAv2oF6WgG7XHLgPPADJ_eVyQkKQ2X1ujDVjBpG-sQ5oD04s6p6rbIe9_KjorD7RM1TN-tF4f5HgerHjJLeGVnQqRbX2XnUZ1BWCMqFBnGZbZVlb0FQfauqPVaBVDSsaHUsJ9lWihe.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d443c86b4955dabf8bf_AD_4nXcF-ycg0FSOzmFm7aH0N3ZopxfQpQGTeOuOH51OP9sFizDck5UaK1rBIeWISpRMy6q0XhbU0LxDiujJJSSBmbfHmWEtslsSk9prnHfqjPxmW_aREvLCmqnN9AntVIJxbrL2dThuuuhRl9Pl8VwjgrXeEY8.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d439ef8ce1435f9d059_AD_4nXcsuhsUWsQb-ex1omZgrpvRUpduEAt7mOS5ZaOHqKMR9SNG3q7DRCFlQrVLPjsTXlRiYIe4UjYXBWWUghOx_LhrVOkEsbuDKkEeAG6mlTE5zzQqq2PosO2Sf4SvfzWGnqLFu-ZS3y333vnAmlU4xyrBdOW1.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d438a955afcf944917a_AD_4nXdjRGaz0YthlOE3kbBpri_scKb8FWNSC8dkkUToAidh0E1dMkG8nKkOBeAZKXQBV_irUTVsS1etDSyEQO3ObM5daIGGNMNsoGQaPeup6tyqbWVm2LksjbJkpQ7pvAqAiRC_Vvd6tNh9GsgjK1ptj62RvoBx.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d4430bf5d1e09991f40_AD_4nXdQyng8PYGginTtGMQyiwzYhPAzBJG8QjbYpA4wzKWKVJPDCeVaJ4Bt8xnH2-fVkN6apJEqQ-n2eW7Q-uzLPCcNOXOy3WhlmDRvtaGYl-EnduJSrTqgNo7o-mwMjlLKmR5U5srthFGY8biMtlbHt5_C1m4X.png",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60d994fd0097ebfed4d0b25a_Play.svg",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d44ed2139f259601c4a_AD_4nXc7ra-LxvmBRCPGyavYWilKKnNEXYonSCD26m1Q2tmbNMuHH5mWxKCassCDuQWMPUs98aRi37jPYNLLPIr6oEkJs4gCQgsoZr_I9_dPVm2PI2ksiXE7nyjCmFUmnfMHY3UJlW0dWe_AA51J-bEckI8Kpp0.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d44d1c3dea6cc4be0ac_AD_4nXfhEbnFz9PKq1xocVqvSi2ZG02FiiACWCvbcjNDYldEh9WmfP2CiOU3I8o56igoLPvgF0x3c55kAYQrZUahMrpV9cBt3uJZTVID5Ya6YqDskUvarQefJKtlpytFyB0tAi8wUO5uujzI-T_YGBVcov3GrBM.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d447d84c551de3e326d_AD_4nXd9CKWyvoHishOTR2rAv2oF6WgG7XHLgPPADJ_eVyQkKQ2X1ujDVjBpG-sQ5oD04s6p6rbIe9_KjorD7RM1TN-tF4f5HgerHjJLeGVnQqRbX2XnUZ1BWCMqFBnGZbZVlb0FQfauqPVaBVDSsaHUsJ9lWihe.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d443c86b4955dabf8bf_AD_4nXcF-ycg0FSOzmFm7aH0N3ZopxfQpQGTeOuOH51OP9sFizDck5UaK1rBIeWISpRMy6q0XhbU0LxDiujJJSSBmbfHmWEtslsSk9prnHfqjPxmW_aREvLCmqnN9AntVIJxbrL2dThuuuhRl9Pl8VwjgrXeEY8.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d439ef8ce1435f9d059_AD_4nXcsuhsUWsQb-ex1omZgrpvRUpduEAt7mOS5ZaOHqKMR9SNG3q7DRCFlQrVLPjsTXlRiYIe4UjYXBWWUghOx_LhrVOkEsbuDKkEeAG6mlTE5zzQqq2PosO2Sf4SvfzWGnqLFu-ZS3y333vnAmlU4xyrBdOW1.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d438a955afcf944917a_AD_4nXdjRGaz0YthlOE3kbBpri_scKb8FWNSC8dkkUToAidh0E1dMkG8nKkOBeAZKXQBV_irUTVsS1etDSyEQO3ObM5daIGGNMNsoGQaPeup6tyqbWVm2LksjbJkpQ7pvAqAiRC_Vvd6tNh9GsgjK1ptj62RvoBx.png",
            "https://cdn.prod.website-files.com/6051c82bb106f381a2f95f8f/66853d4430bf5d1e09991f40_AD_4nXdQyng8PYGginTtGMQyiwzYhPAzBJG8QjbYpA4wzKWKVJPDCeVaJ4Bt8xnH2-fVkN6apJEqQ-n2eW7Q-uzLPCcNOXOy3WhlmDRvtaGYl-EnduJSrTqgNo7o-mwMjlLKmR5U5srthFGY8biMtlbHt5_C1m4X.png",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cef408d1b31b90708c2530_Vector%203.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cef408d1b31b90708c2530_Vector%203.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60cefd6db0f873304d18f49c_inner-blog-bg-images.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/600040266ee51cd2a1d414c7_Rectangle%20221.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60003fce71e4e86529acda6c_Ellipse%2040.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/61a5ff84db6e3b68f2055a1a_Classiq%27s-logo.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/605c5b4054acd02ba01f7bf3_in.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/60fd57802c973ba5370795d5_Vector.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65a80381db00e4ec293d96f2_x.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65a8038b4010ca31d43a1ba1_git-hub.svg",
            "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/65aa5aec4a482703713e8df1_ep_office-building.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-03T00:00:00",
        "summary": "",
        "meta_description": "\"Blog\" post in a series of articles about quantum computing software and hardware, quantum computing industry news, qc hardware/software integration and more",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/60000db7a5f449af5e4590ac/600ff7486d5022e48c4ed193_Favicon%2036%201.png",
        "meta_site_name": "",
        "canonical_link": "https://www.classiq.io/insights/why-is-shors-algorithm-such-a-keystone-application-of-quantum-computing",
        "text": "Why is Shorâs algorithm such a keystone application of quantum computing? This is the first algorithm many hear about when diving into the world of quantum technology.\n\nThough the applications that we hope to achieve with quantum computing could allow for advances in fundamental physics, medicine, materials, and many other industries, Shor's algorithm, invented by Peter Shor in 1994, demonstrated one of the first practical use cases and the potential of quantum computers by breaking the security of many of our asymmetric encryption systems used today, like RSA and ECC cryptography.Â\n\nThe goal of Shorâs Algorithm is to find the prime factors of a large number, which are used to secure data sent across the internet. This problem is very difficult for classical computers, especially as the numbers get larger. In the classical world, the time it takes to factor these numbers increases exponentially with their size. But Shorâs algorithm accelerates the factoring process by transforming it into a problem of finding the period of a function, which means increasing the size of the number to break (the key size of the encryption algorithm) does little to prevent Shorâs algorithm from finding the factors.Â\n\nWhile large enough quantum computers to actually break encryption donât exist yet, Shorâs algorithm is a great way for newcomers to the field to begin exploring quantum computing. It demonstrates how quantum computers could change our day-to-day lives in a practical application while building up our quantum computing intuition and knowledge.Â\n\nRead more about Shorâs algorithm here: https://www.classiq.io/insights/shors-algorithm-explained\n\nHow To Teach Shorâs Algorithm Using ClassiqÂ\n\nAs quantum technology evolves, integrating quantum computing into the educational curriculum is important for finding practical applications in industry. There are not enough physicists in the world to run all the quantum computers that will exist, let alone discover and implement all the applications.Â\n\nEducational institutions face the challenge of preparing students for a future where quantum technology plays a central role. This includes teaching the principles of quantum mechanics and quantum computing and fostering an environment where students can appreciate the potential and limitations of these technologies.Â\n\nOne of the biggest hurdles to learning quantum computing is the perception that too much math and programming are required to understand all the components of running and executing a quantum program. We donât need to know how the CPU and GPU in our laptops work together to render graphics when we want to play a video gameâthe system handles it. This is how quantum computing should evolve, too.Â\n\nOnce learners become more comfortable with Shorâs algorithm, they may want to explore more of the code itself. While most of these changes can be done in the Classiq platform, a project to convert the platform input into a Jupyter Notebook is an excellent way for an educator to teach learners basic Python programming, clean code, and deployment.Â\n\nLet's examine a specific example by factoring the number 15 using Shor's algorithm. We can do this with both the SDK and the Classiq platform, which has built-in functions to ease the transition into learning quantum technology. By combining these approaches, learners can gain a deeper understanding of the underlying code while also benefiting from the visual interpretation provided by the Classiq platform.Â\n\nThe full notebook to factor 15 with Shorâs algorithm is provided here: https://github.com/Classiq/classiq-library/blob/a66c4169be7e723c9d9e676356d000ef283cb36f/algorithms/algebraic/shor/shor.ipynb\n\nUnderstanding Shor's Algorithm\n\nUnderstanding Shorâs algorithm means understanding the basic principles that underpin quantum computing, including superposition and entanglement. This algorithm also creates a segue into going deeper into topics like Quantum Fourier Transform to start building up the quantum equivalents of how bits and gates work in our classical world.Â\n\nShor's algorithm is a quantum algorithm for integer factorization, which is the process of finding the prime factors of a given number. The algorithm consists of classical parts and a quantum subroutine.Â\n\nThe steps of Shorâs Algorithm are:\n\nChoose a random number a that is co-prime to the number N we want to factor. This means that a and N have no common factors other than 1. We can check this by computing the greatest common divisor (GCD) of a and N. If the GCD is 1, we proceed; otherwise, we have already found a factor of N.\n\nUse the quantum period-finding subroutine to find the period r of the function f(x) = a^x mod N. This is where the quantum computation comes into play. The quantum subroutine uses the principle of superposition to efficiently find the period r.\n\nIf the period r is odd or if a^(r/2) â¡ -1 (mod N), go back to step 1 and choose a different random number a. This step ensures that the conditions necessary for the next step are met.\n\nCompute the greatest common divisor (GCD) of a^(r/2) Â± 1 and N. One of these GCDs will be a non-trivial factor of N, which is the desired output of the algorithm.\n\nThe quantum period-finding subroutine is the key to Shor's algorithm. It uses a quantum Fourier transform (QFT) to find the period of the function f(x) = a^x mod N. This is done by applying a series of quantum gates to a set of qubits, creating a superposition of states that encode the period. By measuring the qubits after the QFT, we can extract the period r with high probability.\n\nPeriod Finding With Shorâs Algorithm\n\nOnce we understand Shorâs algorithm, we want to prepare two layers:\n\nThe modular multiplication matrixÂ\n\nThe quantum period-finding circuitÂ\n\nThe provided code demonstrates the implementation of a modular multiplication matrix circuit using the Classiq platform. The goal is to estimate the eigenvalue corresponding to an eigenvector of a unitary operator that performs modular multiplication\n\nThe next step is the period-finding algorithm. The code in the Jupyter Notebook now implements a period-finding algorithm using the modular multiplication matrix.Â\n\nSynthesizing a Quantum Circuit with Built-In Functions in Classiq\n\nOne of the tenets of pedagogy, especially for online and volunteer learners, is to get to âmeaningful interactionâ as soon as possible within the system being learned. This means that by using a visual system, the educational focus stays on âwhatâ an algorithm should achieve instead of dealing with the details of programming before understanding the fundamentals of quantum computing.Â\n\nClassiq's synthesis engine has built-in functions to kickstart that pedagogically âmeaningful interactionâ.Â\n\nâ\n\nWhen youâve registered for the Classiq platform,Â\n\nOpen the synthesis engine here on the Classiq platform\n\nOn the left-hand side, a list of Built-in Functions is available to browse or search. For us, we will search for Shorâs algorithm, but there are built-in tutorials for Groverâs search, Variational Quantum Eigensolver, functions like Quantum Fourier Transform, and applications in chemistry, finance, optimization, and more.\n\nAfter clicking the desired function, the synthesis model is loaded.Â\n\nThe learner doesnât have to change anything here to synthesize the circuit and move to the next step. However, he or she could set constraints based on gate depths and width, pick an optimization parameter, as well as add circuit connectivity maps for modeling on real hardware.Â\n\nRead more about how to use the additional parameters of Classiqâs visualizations in this blog post here: https://www.classiq.io/insights/getting-started-in-quantum-computing-using-classiqs-visualizations\n\nAll this is done visually in the Classiq platform with no code. This also introduces a lot of new quantum terminology that can be easily broken down into lessons. As a learner clicks down into the circuit, they can explore the circuits top down:\n\nOverall Program\n\nPeriod FindingÂ\n\nHadamard Transform\n\nIndividual Hadamard Gates\n\nShorâs algorithm: period_finding circuit breakdown\n\nâ\n\nNow, we can laser-focus on learning about the Hadamard transform to build knowledge of Shorâs algorithm and quantum computing. Each larger quantum circuit is broken down visually into smaller components, allowing a learner to understand how qubits interact with each other and what gates are critical for a real-world implementation of Shorâs algorithm.\n\nShorâs algorithm: broken down into hadamard_transform, repeat, and qft_qinverseÂ\n\nShorâs algorithm: hadamard_transform broken down into individual gates\n\nQuantum Circuit Execution on Hardware\n\nThe Azure Quantum Resource Estimator is used to build more intuition for quantum computing. While the circuits look small in textbooks, the actual implementation of these algorithms can be very complex. The program information provides a list of the gates that are used in the circuit that can be further explored to break down learning from the top-up.Â Â\n\nThere is no standardized set of gates or software for quantum computing. Additionally, because of issues with calibration or construction, every chip requires fine-tuning. For an engineer, that may require days of work to analyze the specific hardware chip and re-write the circuit for the specific backend.Â\n\nClassiq optimizes the space to choose the best circuit, making code more portable across different types of quantum computing hardware. This allows for a deeper understanding and practical hands-on application of Shorâs algorithm.Â\n\nBeyond just algorithms, Classiq offers:\n\nResource Estimation\n\nHardware Comparison Tables, and\n\nCircuit Connectivity Maps.\n\nAll these parameters can be tweaked.\n\nQuantum Circuit Execution on Hardware\n\nâ\n\nShorâs Algorithm Leading Quantum Computing Education\n\nWhile the hardware to run Shorâs algorithm on numbers large enough to make a difference in cryptography hasnât happened yet, it has influenced a new group of people interested in quantum technologies.\n\nUniversities and even some high schools are beginning to offer courses in quantum computing, where Shor's Algorithm serves as a key case study. These courses often start with the basics of quantum mechanics and quantum computation, gradually building up to more complex concepts like Shor's Algorithm.Â\n\nThe algorithm itself is based on principles of quantum mechanics, which can be counterintuitive and complex for learners accustomed to classical physics and traditional computing concepts. Conveying these abstract ideas in an accessible manner and working with different visual aids, simulations, and hands-on experiments with quantum computing software, like Classiqâs platform, opens doors to inspiring a new generation of learners.Â\n\nThis build-up educates learners about quantum computing and challenges them to think fundamentally differently about problem-solving and computation in a world where quantum computers are accessible to many.Â\n\nShorâs algorithm represents an introduction to a very exciting cutting-edge technology. Its study can spark interest in STEM fields, encouraging learners to pursue careers in quantum computing without having to start from scratch and get a Ph.D. before being hands-on with a quantum computer. The excitement around quantum computing and its potential applications is a powerful motivator for learners, driving innovation and interest in a field that will impact many industries.Â\n\nWhy is Shorâs algorithm such a keystone application of quantum computing? This is the first algorithm many hear about when diving into the world of quantum technology.\n\nThough the applications that we hope to achieve with quantum computing could allow for advances in fundamental physics, medicine, materials, and many other industries, Shor's algorithm, invented by Peter Shor in 1994, demonstrated one of the first practical use cases and the potential of quantum computers by breaking the security of many of our asymmetric encryption systems used today, like RSA and ECC cryptography.Â\n\nThe goal of Shorâs Algorithm is to find the prime factors of a large number, which are used to secure data sent across the internet. This problem is very difficult for classical computers, especially as the numbers get larger. In the classical world, the time it takes to factor these numbers increases exponentially with their size. But Shorâs algorithm accelerates the factoring process by transforming it into a problem of finding the period of a function, which means increasing the size of the number to break (the key size of the encryption algorithm) does little to prevent Shorâs algorithm from finding the factors.Â\n\nWhile large enough quantum computers to actually break encryption donât exist yet, Shorâs algorithm is a great way for newcomers to the field to begin exploring quantum computing. It demonstrates how quantum computers could change our day-to-day lives in a practical application while building up our quantum computing intuition and knowledge.Â\n\nRead more about Shorâs algorithm here: https://www.classiq.io/insights/shors-algorithm-explained\n\nHow To Teach Shorâs Algorithm Using ClassiqÂ\n\nAs quantum technology evolves, integrating quantum computing into the educational curriculum is important for finding practical applications in industry. There are not enough physicists in the world to run all the quantum computers that will exist, let alone discover and implement all the applications.Â\n\nEducational institutions face the challenge of preparing students for a future where quantum technology plays a central role. This includes teaching the principles of quantum mechanics and quantum computing and fostering an environment where students can appreciate the potential and limitations of these technologies.Â\n\nOne of the biggest hurdles to learning quantum computing is the perception that too much math and programming are required to understand all the components of running and executing a quantum program. We donât need to know how the CPU and GPU in our laptops work together to render graphics when we want to play a video gameâthe system handles it. This is how quantum computing should evolve, too.Â\n\nOnce learners become more comfortable with Shorâs algorithm, they may want to explore more of the code itself. While most of these changes can be done in the Classiq platform, a project to convert the platform input into a Jupyter Notebook is an excellent way for an educator to teach learners basic Python programming, clean code, and deployment.Â\n\nLet's examine a specific example by factoring the number 15 using Shor's algorithm. We can do this with both the SDK and the Classiq platform, which has built-in functions to ease the transition into learning quantum technology. By combining these approaches, learners can gain a deeper understanding of the underlying code while also benefiting from the visual interpretation provided by the Classiq platform.Â\n\nThe full notebook to factor 15 with Shorâs algorithm is provided here: https://github.com/Classiq/classiq-library/blob/a66c4169be7e723c9d9e676356d000ef283cb36f/algorithms/algebraic/shor/shor.ipynb\n\nUnderstanding Shor's Algorithm\n\nUnderstanding Shorâs algorithm means understanding the basic principles that underpin quantum computing, including superposition and entanglement. This algorithm also creates a segue into going deeper into topics like Quantum Fourier Transform to start building up the quantum equivalents of how bits and gates work in our classical world.Â\n\nShor's algorithm is a quantum algorithm for integer factorization, which is the process of finding the prime factors of a given number. The algorithm consists of classical parts and a quantum subroutine.Â\n\nThe steps of Shorâs Algorithm are:\n\nChoose a random number a that is co-prime to the number N we want to factor. This means that a and N have no common factors other than 1. We can check this by computing the greatest common divisor (GCD) of a and N. If the GCD is 1, we proceed; otherwise, we have already found a factor of N.\n\nUse the quantum period-finding subroutine to find the period r of the function f(x) = a^x mod N. This is where the quantum computation comes into play. The quantum subroutine uses the principle of superposition to efficiently find the period r.\n\nIf the period r is odd or if a^(r/2) â¡ -1 (mod N), go back to step 1 and choose a different random number a. This step ensures that the conditions necessary for the next step are met.\n\nCompute the greatest common divisor (GCD) of a^(r/2) Â± 1 and N. One of these GCDs will be a non-trivial factor of N, which is the desired output of the algorithm.\n\nThe quantum period-finding subroutine is the key to Shor's algorithm. It uses a quantum Fourier transform (QFT) to find the period of the function f(x) = a^x mod N. This is done by applying a series of quantum gates to a set of qubits, creating a superposition of states that encode the period. By measuring the qubits after the QFT, we can extract the period r with high probability.\n\nPeriod Finding With Shorâs Algorithm\n\nOnce we understand Shorâs algorithm, we want to prepare two layers:\n\nThe modular multiplication matrixÂ\n\nThe quantum period-finding circuitÂ\n\nThe provided code demonstrates the implementation of a modular multiplication matrix circuit using the Classiq platform. The goal is to estimate the eigenvalue corresponding to an eigenvector of a unitary operator that performs modular multiplication\n\nThe next step is the period-finding algorithm. The code in the Jupyter Notebook now implements a period-finding algorithm using the modular multiplication matrix.Â\n\nSynthesizing a Quantum Circuit with Built-In Functions in Classiq\n\nOne of the tenets of pedagogy, especially for online and volunteer learners, is to get to âmeaningful interactionâ as soon as possible within the system being learned. This means that by using a visual system, the educational focus stays on âwhatâ an algorithm should achieve instead of dealing with the details of programming before understanding the fundamentals of quantum computing.Â\n\nClassiq's synthesis engine has built-in functions to kickstart that pedagogically âmeaningful interactionâ.Â\n\nâ\n\nWhen youâve registered for the Classiq platform,Â\n\nOpen the synthesis engine here on the Classiq platform\n\nOn the left-hand side, a list of Built-in Functions is available to browse or search. For us, we will search for Shorâs algorithm, but there are built-in tutorials for Groverâs search, Variational Quantum Eigensolver, functions like Quantum Fourier Transform, and applications in chemistry, finance, optimization, and more.\n\nAfter clicking the desired function, the synthesis model is loaded.Â\n\nThe learner doesnât have to change anything here to synthesize the circuit and move to the next step. However, he or she could set constraints based on gate depths and width, pick an optimization parameter, as well as add circuit connectivity maps for modeling on real hardware.Â\n\nRead more about how to use the additional parameters of Classiqâs visualizations in this blog post here: https://www.classiq.io/insights/getting-started-in-quantum-computing-using-classiqs-visualizations\n\nAll this is done visually in the Classiq platform with no code. This also introduces a lot of new quantum terminology that can be easily broken down into lessons. As a learner clicks down into the circuit, they can explore the circuits top down:\n\nOverall Program\n\nPeriod FindingÂ\n\nHadamard Transform\n\nIndividual Hadamard Gates\n\nShorâs algorithm: period_finding circuit breakdown\n\nâ\n\nNow, we can laser-focus on learning about the Hadamard transform to build knowledge of Shorâs algorithm and quantum computing. Each larger quantum circuit is broken down visually into smaller components, allowing a learner to understand how qubits interact with each other and what gates are critical for a real-world implementation of Shorâs algorithm.\n\nShorâs algorithm: broken down into hadamard_transform, repeat, and qft_qinverseÂ\n\nShorâs algorithm: hadamard_transform broken down into individual gates\n\nQuantum Circuit Execution on Hardware\n\nThe Azure Quantum Resource Estimator is used to build more intuition for quantum computing. While the circuits look small in textbooks, the actual implementation of these algorithms can be very complex. The program information provides a list of the gates that are used in the circuit that can be further explored to break down learning from the top-up.Â Â\n\nThere is no standardized set of gates or software for quantum computing. Additionally, because of issues with calibration or construction, every chip requires fine-tuning. For an engineer, that may require days of work to analyze the specific hardware chip and re-write the circuit for the specific backend.Â\n\nClassiq optimizes the space to choose the best circuit, making code more portable across different types of quantum computing hardware. This allows for a deeper understanding and practical hands-on application of Shorâs algorithm.Â\n\nBeyond just algorithms, Classiq offers:\n\nResource Estimation\n\nHardware Comparison Tables, and\n\nCircuit Connectivity Maps.\n\nAll these parameters can be tweaked.\n\nQuantum Circuit Execution on Hardware\n\nâ\n\nShorâs Algorithm Leading Quantum Computing Education\n\nWhile the hardware to run Shorâs algorithm on numbers large enough to make a difference in cryptography hasnât happened yet, it has influenced a new group of people interested in quantum technologies.\n\nUniversities and even some high schools are beginning to offer courses in quantum computing, where Shor's Algorithm serves as a key case study. These courses often start with the basics of quantum mechanics and quantum computation, gradually building up to more complex concepts like Shor's Algorithm.Â\n\nThe algorithm itself is based on principles of quantum mechanics, which can be counterintuitive and complex for learners accustomed to classical physics and traditional computing concepts. Conveying these abstract ideas in an accessible manner and working with different visual aids, simulations, and hands-on experiments with quantum computing software, like Classiqâs platform, opens doors to inspiring a new generation of learners.Â\n\nThis build-up educates learners about quantum computing and challenges them to think fundamentally differently about problem-solving and computation in a world where quantum computers are accessible to many.Â\n\nShorâs algorithm represents an introduction to a very exciting cutting-edge technology. Its study can spark interest in STEM fields, encouraging learners to pursue careers in quantum computing without having to start from scratch and get a Ph.D. before being hands-on with a quantum computer. The excitement around quantum computing and its potential applications is a powerful motivator for learners, driving innovation and interest in a field that will impact many industries.Â"
    }
}