{
    "id": "dbpedia_6980_3",
    "rank": 47,
    "data": {
        "url": "https://git-scm.com/docs/git-config",
        "read_more_link": "",
        "language": "en",
        "title": "config Documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://git-scm.com/images/logo@2x.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/green-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/red-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/grey-dot.png",
            "https://git-scm.com/images/icons/chevron-up@2x.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "bitmapPseudoMerge.<name>.pattern\n\nRegular expression used to match reference names. Commits pointed to by references matching this pattern (and meeting the below criteria, like bitmapPseudoMerge.<name>.sampleRate and bitmapPseudoMerge.<name>.threshold) will be considered for inclusion in a pseudo-merge bitmap.\n\nCommits are grouped into pseudo-merge groups based on whether or not any reference(s) that point at a given commit match the pattern, which is an extended regular expression.\n\nWithin a pseudo-merge group, commits may be further grouped into sub-groups based on the capture groups in the pattern. These sub-groupings are formed from the regular expressions by concatenating any capture groups from the regular expression, with a - dash in between.\n\nFor example, if the pattern is refs/tags/, then all tags (provided they meet the below criteria) will be considered candidates for the same pseudo-merge group. However, if the pattern is instead refs/remotes/([0-9])+/tags/, then tags from different remotes will be grouped into separate pseudo-merge groups, based on the remote number.\n\nbitmapPseudoMerge.<name>.decay\n\nDetermines the rate at which consecutive pseudo-merge bitmap groups decrease in size. Must be non-negative. This parameter can be thought of as k in the function f(n) = C * n^-k, where f(n) is the size of the `n`th group.\n\nSetting the decay rate equal to 0 will cause all groups to be the same size. Setting the decay rate equal to 1 will cause the n`th group to be `1/n the size of the initial group. Higher values of the decay rate cause consecutive groups to shrink at an increasing rate. The default is 1.\n\nIf all groups are the same size, it is possible that groups containing newer commits will be able to be used less often than earlier groups, since it is more likely that the references pointing at newer commits will be updated more often than a reference pointing at an old commit.\n\nbitmapPseudoMerge.<name>.sampleRate\n\nDetermines the proportion of non-bitmapped commits (among reference tips) which are selected for inclusion in an unstable pseudo-merge bitmap. Must be between 0 and 1 (inclusive). The default is 1.\n\nbitmapPseudoMerge.<name>.threshold\n\nDetermines the minimum age of non-bitmapped commits (among reference tips, as above) which are candidates for inclusion in an unstable pseudo-merge bitmap. The default is 1.week.ago.\n\nbitmapPseudoMerge.<name>.maxMerges\n\nDetermines the maximum number of pseudo-merge commits among which commits may be distributed.\n\nFor pseudo-merge groups whose pattern does not contain any capture groups, this setting is applied for all commits matching the regular expression. For patterns that have one or more capture groups, this setting is applied for each distinct capture group.\n\nFor example, if your capture group is refs/tags/, then this setting will distribute all tags into a maximum of maxMerges pseudo-merge commits. However, if your capture group is, say, refs/remotes/([0-9]+)/tags/, then this setting will be applied to each remote’s set of tags individually.\n\nMust be non-negative. The default value is 64.\n\nbitmapPseudoMerge.<name>.stableThreshold\n\nDetermines the minimum age of commits (among reference tips, as above, however stable commits are still considered candidates even when they have been covered by a bitmap) which are candidates for a stable a pseudo-merge bitmap. The default is 1.month.ago.\n\nSetting this threshold to a smaller value (e.g., 1.week.ago) will cause more stable groups to be generated (which impose a one-time generation cost) but those groups will likely become stale over time. Using a larger value incurs the opposite penalty (fewer stable groups which are more useful).\n\nbitmapPseudoMerge.<name>.stableSize\n\nDetermines the size (in number of commits) of a stable psuedo-merge bitmap. The default is 512.\n\nblame.blankBoundary\n\nShow blank commit object name for boundary commits in git-blame[1]. This option defaults to false.\n\nblame.coloring\n\nThis determines the coloring scheme to be applied to blame output. It can be repeatedLines, highlightRecent, or none which is the default.\n\nSpecifies the format used to output dates in git-blame[1]. If unset the iso format is used. For supported values, see the discussion of the --date option at git-log[1].\n\nblame.showEmail\n\nShow the author email instead of author name in git-blame[1]. This option defaults to false.\n\nblame.showRoot\n\nDo not treat root commits as boundaries in git-blame[1]. This option defaults to false.\n\nblame.ignoreRevsFile\n\nIgnore revisions listed in the file, one unabbreviated object name per line, in git-blame[1]. Whitespace and comments beginning with # are ignored. This option may be repeated multiple times. Empty file names will reset the list of ignored revisions. This option will be handled before the command line option --ignore-revs-file.\n\nblame.markUnblamableLines\n\nMark lines that were changed by an ignored revision that we could not attribute to another commit with a * in the output of git-blame[1].\n\nblame.markIgnoredLines\n\nMark lines that were changed by an ignored revision that we attributed to another commit with a ? in the output of git-blame[1].\n\nbranch.autoSetupMerge\n\nTells git branch, git switch and git checkout to set up new branches so that git-pull[1] will appropriately merge from the starting point branch. Note that even if this option is not set, this behavior can be chosen per-branch using the --track and --no-track options. The valid settings are: false — no automatic setup is done; true — automatic setup is done when the starting point is a remote-tracking branch; always — automatic setup is done when the starting point is either a local branch or remote-tracking branch; inherit — if the starting point has a tracking configuration, it is copied to the new branch; simple — automatic setup is done only when the starting point is a remote-tracking branch and the new branch has the same name as the remote branch. This option defaults to true.\n\nbranch.autoSetupRebase\n\nWhen a new branch is created with git branch, git switch or git checkout that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see \"branch.<name>.rebase\"). When never, rebase is never automatically set to true. When local, rebase is set to true for tracked branches of other local branches. When remote, rebase is set to true for tracked branches of remote-tracking branches. When always, rebase will be set to true for all tracking branches. See \"branch.autoSetupMerge\" for details on how to set up a branch to track another branch. This option defaults to never.\n\nbranch.sort\n\nThis variable controls the sort ordering of branches when displayed by git-branch[1]. Without the \"--sort=<value>\" option provided, the value of this variable will be used as the default. See git-for-each-ref[1] field names for valid values.\n\nbranch.<name>.remote\n\nWhen on branch <name>, it tells git fetch and git push which remote to fetch from or push to. The remote to push to may be overridden with remote.pushDefault (for all branches). The remote to push to, for the current branch, may be further overridden by branch.<name>.pushRemote. If no remote is configured, or if you are not on any branch and there is more than one remote defined in the repository, it defaults to origin for fetching and remote.pushDefault for pushing. Additionally, . (a period) is the current local repository (a dot-repository), see branch.<name>.merge's final note below.\n\nbranch.<name>.pushRemote\n\nWhen on branch <name>, it overrides branch.<name>.remote for pushing. It also overrides remote.pushDefault for pushing from branch <name>. When you pull from one place (e.g. your upstream) and push to another place (e.g. your own publishing repository), you would want to set remote.pushDefault to specify the remote to push to for all branches, and use this option to override it for a specific branch.\n\nbranch.<name>.merge\n\nDefines, together with branch.<name>.remote, the upstream branch for the given branch. It tells git fetch/git pull/git rebase which branch to merge and can also affect git push (see push.default). When in branch <name>, it tells git fetch the default refspec to be marked for merging in FETCH_HEAD. The value is handled like the remote part of a refspec, and must match a ref which is fetched from the remote given by \"branch.<name>.remote\". The merge information is used by git pull (which first calls git fetch) to lookup the default branch for merging. Without this option, git pull defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup git pull so that it merges into <name> from another branch in the local repository, you can point branch.<name>.merge to the desired branch, and use the relative path setting . (a period) for branch.<name>.remote.\n\nbranch.<name>.mergeOptions\n\nSets default options for merging into branch <name>. The syntax and supported options are the same as those of git-merge[1], but option values containing whitespace characters are currently not supported.\n\nbranch.<name>.rebase\n\nWhen true, rebase the branch <name> on top of the fetched branch, instead of merging the default branch from the default remote when \"git pull\" is run. See \"pull.rebase\" for doing this in a non branch-specific manner.\n\nWhen merges (or just m), pass the --rebase-merges option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details).\n\nWhen the value is interactive (or just i), the rebase is run in interactive mode.\n\nNOTE: this is a possibly dangerous operation; do not use it unless you understand the implications (see git-rebase[1] for details).\n\nbranch.<name>.description\n\nBranch description, can be edited with git branch --edit-description. Branch description is automatically added to the format-patch cover letter or request-pull summary.\n\nbrowser.<tool>.cmd\n\nSpecify the command to invoke the specified browser. The specified command is evaluated in shell with the URLs passed as arguments. (See git-web--browse[1].)\n\nbrowser.<tool>.path\n\nOverride the path for the given tool that may be used to browse HTML help (see -w option in git-help[1]) or a working repository in gitweb (see git-instaweb[1]).\n\nbundle.*\n\nThe bundle.* keys may appear in a bundle list file found via the git clone --bundle-uri option. These keys currently have no effect if placed in a repository config file, though this will change in the future. See the bundle URI design document for more details.\n\nbundle.version\n\nThis integer value advertises the version of the bundle list format used by the bundle list. Currently, the only accepted value is 1.\n\nbundle.mode\n\nThis string value should be either all or any. This value describes whether all of the advertised bundles are required to unbundle a complete understanding of the bundled information (all) or if any one of the listed bundle URIs is sufficient (any).\n\nbundle.heuristic\n\nIf this string-valued key exists, then the bundle list is designed to work well with incremental git fetch commands. The heuristic signals that there are additional keys available for each bundle that help determine which subset of bundles the client should download. The only value currently understood is creationToken.\n\nbundle.<id>.*\n\nThe bundle.<id>.* keys are used to describe a single item in the bundle list, grouped under <id> for identification purposes.\n\nbundle.<id>.uri\n\nThis string value defines the URI by which Git can reach the contents of this <id>. This URI may be a bundle file or another bundle list.\n\ncheckout.defaultRemote\n\nWhen you run git checkout <something> or git switch <something> and only have one remote, it may implicitly fall back on checking out and tracking e.g. origin/<something>. This stops working as soon as you have more than one remote with a <something> reference. This setting allows for setting the name of a preferred remote that should always win when it comes to disambiguation. The typical use-case is to set this to origin.\n\nCurrently this is used by git-switch[1] and git-checkout[1] when git checkout <something> or git switch <something> will checkout the <something> branch on another remote, and by git-worktree[1] when git worktree add refers to a remote branch. This setting might be used for other checkout-like commands or functionality in the future.\n\ncheckout.guess\n\nProvides the default value for the --guess or --no-guess option in git checkout and git switch. See git-switch[1] and git-checkout[1].\n\ncheckout.workers\n\nThe number of parallel workers to use when updating the working tree. The default is one, i.e. sequential execution. If set to a value less than one, Git will use as many workers as the number of logical cores available. This setting and checkout.thresholdForParallelism affect all commands that perform checkout. E.g. checkout, clone, reset, sparse-checkout, etc.\n\nNote: Parallel checkout usually delivers better performance for repositories located on SSDs or over NFS. For repositories on spinning disks and/or machines with a small number of cores, the default sequential checkout often performs better. The size and compression level of a repository might also influence how well the parallel version performs.\n\ncheckout.thresholdForParallelism\n\nWhen running parallel checkout with a small number of files, the cost of subprocess spawning and inter-process communication might outweigh the parallelization gains. This setting allows you to define the minimum number of files for which parallel checkout should be attempted. The default is 100.\n\nclean.requireForce\n\nA boolean to make git-clean refuse to delete files unless -f is given. Defaults to true.\n\nclone.defaultRemoteName\n\nThe name of the remote to create when cloning a repository. Defaults to origin. It can be overridden by passing the --origin command-line option to git-clone[1].\n\nclone.rejectShallow\n\nReject cloning a repository if it is a shallow one; this can be overridden by passing the --reject-shallow option on the command line. See git-clone[1].\n\nclone.filterSubmodules\n\nIf a partial clone filter is provided (see --filter in git-rev-list[1]) and --recurse-submodules is used, also apply the filter to submodules.\n\ncolor.advice\n\nA boolean to enable/disable color in hints (e.g. when a push failed, see advice.* for a list). May be set to always, false (or never) or auto (or true), in which case colors are used only when the error output goes to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.advice.hint\n\nUse customized color for hints.\n\ncolor.blame.highlightRecent\n\nSpecify the line annotation color for git blame --color-by-age depending upon the age of the line.\n\nThis setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored with the specified colors if the line was introduced before the given timestamp, overwriting older timestamped colors.\n\nInstead of an absolute timestamp relative timestamps work as well, e.g. 2.weeks.ago is valid to address anything older than 2 weeks.\n\nIt defaults to blue,12 month ago,white,1 month ago,red, which colors everything older than one year blue, recent changes between one month and one year old are kept white, and lines introduced within the last month are colored red.\n\ncolor.blame.repeatedLines\n\nUse the specified color to colorize line annotations for git blame --color-lines, if they come from the same commit as the preceding line. Defaults to cyan.\n\ncolor.branch\n\nA boolean to enable/disable color in the output of git-branch[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.branch.<slot>\n\nUse customized color for branch coloration. <slot> is one of current (the current branch), local (a local branch), remote (a remote-tracking branch in refs/remotes/), upstream (upstream tracking branch), plain (other refs).\n\ncolor.diff\n\nWhether to use ANSI escape sequences to add color to patches. If this is set to always, git-diff[1], git-log[1], and git-show[1] will use color for all patches. If it is set to true or auto, those commands will only use color when output is to the terminal. If unset, then the value of color.ui is used (auto by default).\n\nThis does not affect git-format-patch[1] or the git-diff-* plumbing commands. Can be overridden on the command line with the --color[=<when>] option.\n\ncolor.diff.<slot>\n\nUse customized color for diff colorization. <slot> specifies which part of the patch to use the specified color, and is one of context (context text - plain is a historical synonym), meta (metainformation), frag (hunk header), func (function in hunk header), old (removed lines), new (added lines), commit (commit headers), whitespace (highlighting whitespace errors), oldMoved (deleted lines), newMoved (added lines), oldMovedDimmed, oldMovedAlternative, oldMovedAlternativeDimmed, newMovedDimmed, newMovedAlternative newMovedAlternativeDimmed (See the <mode> setting of --color-moved in git-diff[1] for details), contextDimmed, oldDimmed, newDimmed, contextBold, oldBold, and newBold (see git-range-diff[1] for details).\n\ncolor.decorate.<slot>\n\nUse customized color for git log --decorate output. <slot> is one of branch, remoteBranch, tag, stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively and grafted for grafted commits.\n\ncolor.grep\n\nWhen set to always, always highlight matches. When false (or never), never. When set to true or auto, use color only when the output is written to the terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.grep.<slot>\n\nUse customized color for grep colorization. <slot> specifies which part of the line to use the specified color, and is one of\n\ncontext\n\nnon-matching text in context lines (when using -A, -B, or -C)\n\nfilename\n\nfilename prefix (when not using -h)\n\nfunction\n\nfunction name lines (when using -p)\n\nlineNumber\n\nline number prefix (when using -n)\n\ncolumn\n\ncolumn number prefix (when using --column)\n\nmatch\n\nmatching text (same as setting matchContext and matchSelected)\n\nmatchContext\n\nmatching text in context lines\n\nmatchSelected\n\nmatching text in selected lines. Also, used to customize the following git-log[1] subcommands: --grep, --author, and --committer.\n\nselected\n\nnon-matching text in selected lines. Also, used to customize the following git-log[1] subcommands: --grep, --author and --committer.\n\nseparator\n\nseparators between fields on a line (:, -, and =) and between hunks (--)\n\ncolor.interactive\n\nWhen set to always, always use colors for interactive prompts and displays (such as those used by \"git-add --interactive\" and \"git-clean --interactive\"). When false (or never), never. When set to true or auto, use colors only when the output is to the terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.interactive.<slot>\n\nUse customized color for git add --interactive and git clean --interactive output. <slot> may be prompt, header, help or error, for four distinct types of normal output from interactive commands.\n\ncolor.pager\n\nA boolean to specify whether auto color modes should colorize output going to the pager. Defaults to true; set this to false if your pager does not understand ANSI color codes.\n\ncolor.push\n\nA boolean to enable/disable color in push errors. May be set to always, false (or never) or auto (or true), in which case colors are used only when the error output goes to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.push.error\n\nUse customized color for push errors.\n\ncolor.remote\n\nIf set, keywords at the start of the line are highlighted. The keywords are \"error\", \"warning\", \"hint\" and \"success\", and are matched case-insensitively. May be set to always, false (or never) or auto (or true). If unset, then the value of color.ui is used (auto by default).\n\ncolor.remote.<slot>\n\nUse customized color for each remote keyword. <slot> may be hint, warning, success or error which match the corresponding keyword.\n\ncolor.showBranch\n\nA boolean to enable/disable color in the output of git-show-branch[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.status\n\nA boolean to enable/disable color in the output of git-status[1]. May be set to always, false (or never) or auto (or true), in which case colors are used only when the output is to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.status.<slot>\n\nUse customized color for status colorization. <slot> is one of header (the header text of the status message), added or updated (files which are added but not committed), changed (files which are changed but not added in the index), untracked (files which are not tracked by Git), branch (the current branch), nobranch (the color the no branch warning is shown in, defaulting to red), localBranch or remoteBranch (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or unmerged (files which have unmerged changes).\n\ncolor.transport\n\nA boolean to enable/disable color when pushes are rejected. May be set to always, false (or never) or auto (or true), in which case colors are used only when the error output goes to a terminal. If unset, then the value of color.ui is used (auto by default).\n\ncolor.transport.rejected\n\nUse customized color when a push was rejected.\n\ncolor.ui\n\nThis variable determines the default value for variables such as color.diff and color.grep that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the --color option. Set it to false or never if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the --color option. Set it to always if you want all output not intended for machine consumption to use color, to true or auto (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.\n\ncolumn.ui\n\nSpecify whether supported commands should output in columns. This variable consists of a list of tokens separated by spaces or commas:\n\nThese options control when the feature should be enabled (defaults to never):\n\nalways\n\nalways show in columns\n\nnever\n\nnever show in columns\n\nauto\n\nshow in columns if the output is to the terminal\n\nThese options control layout (defaults to column). Setting any of these implies always if none of always, never, or auto are specified.\n\ncolumn\n\nfill columns before rows\n\nrow\n\nfill rows before columns\n\nplain\n\nshow in one column\n\nFinally, these options can be combined with a layout option (defaults to nodense):\n\ndense\n\nmake unequal size columns to utilize more space\n\nnodense\n\nmake equal size columns\n\ncolumn.branch\n\nSpecify whether to output branch listing in git branch in columns. See column.ui for details.\n\ncolumn.clean\n\nSpecify the layout when listing items in git clean -i, which always shows files and directories in columns. See column.ui for details.\n\ncolumn.status\n\nSpecify whether to output untracked files in git status in columns. See column.ui for details.\n\ncolumn.tag\n\nSpecify whether to output tag listings in git tag in columns. See column.ui for details.\n\ncommit.cleanup\n\nThis setting overrides the default of the --cleanup option in git commit. See git-commit[1] for details. Changing the default can be useful when you always want to keep lines that begin with the comment character # in your log message, in which case you would do git config commit.cleanup whitespace (note that you will have to remove the help lines that begin with # in the commit log template yourself, if you do this).\n\ncommit.gpgSign\n\nA boolean to specify whether all commits should be GPG signed. Use of this option when doing operations such as rebase can result in a large number of commits being signed. It may be convenient to use an agent to avoid typing your GPG passphrase several times.\n\ncommit.status\n\nA boolean to enable/disable inclusion of status information in the commit message template when using an editor to prepare the commit message. Defaults to true.\n\ncommit.template\n\nSpecify the pathname of a file to use as the template for new commit messages.\n\ncommit.verbose\n\nA boolean or int to specify the level of verbosity with git commit. See git-commit[1].\n\ncommitGraph.generationVersion\n\nSpecifies the type of generation number version to use when writing or reading the commit-graph file. If version 1 is specified, then the corrected commit dates will not be written or read. Defaults to 2.\n\ncommitGraph.maxNewFilters\n\nSpecifies the default value for the --max-new-filters option of git commit-graph write (c.f., git-commit-graph[1]).\n\ncommitGraph.readChangedPaths\n\nDeprecated. Equivalent to commitGraph.changedPathsVersion=-1 if true, and commitGraph.changedPathsVersion=0 if false. (If commitGraph.changedPathVersion is also set, commitGraph.changedPathsVersion takes precedence.)\n\ncommitGraph.changedPathsVersion\n\nSpecifies the version of the changed-path Bloom filters that Git will read and write. May be -1, 0, 1, or 2. Note that values greater than 1 may be incompatible with older versions of Git which do not yet understand those versions. Use caution when operating in a mixed-version environment.\n\nDefaults to -1.\n\nIf -1, Git will use the version of the changed-path Bloom filters in the repository, defaulting to 1 if there are none.\n\nIf 0, Git will not read any Bloom filters, and will write version 1 Bloom filters when instructed to write.\n\nIf 1, Git will only read version 1 Bloom filters, and will write version 1 Bloom filters.\n\nIf 2, Git will only read version 2 Bloom filters, and will write version 2 Bloom filters.\n\nSee git-commit-graph[1] for more information.\n\ncompletion.commands\n\nThis is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with - will remove it from the existing list.\n\ncore.fileMode\n\nTells Git if the executable bit of files in the working tree is to be honored.\n\nSome filesystems lose the executable bit when a file that is marked as executable is checked out, or checks out a non-executable file with executable bit on. git-clone[1] or git-init[1] probe the filesystem to see if it handles the executable bit correctly and this variable is automatically set as necessary.\n\nA repository, however, may be on a filesystem that handles the filemode correctly, and this variable is set to true when created, but later may be made accessible from another environment that loses the filemode (e.g. exporting ext4 via CIFS mount, visiting a Cygwin created repository with Git for Windows or Eclipse). In such a case it may be necessary to set this variable to false. See git-update-index[1].\n\nThe default is true (when core.filemode is not specified in the config file).\n\ncore.hideDotFiles\n\n(Windows-only) If true, mark newly-created directories and files whose name starts with a dot as hidden. If dotGitOnly, only the .git/ directory is hidden, but no other files starting with a dot. The default mode is dotGitOnly.\n\ncore.ignoreCase\n\nInternal variable which enables various workarounds to enable Git to work better on filesystems that are not case sensitive, like APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing finds \"makefile\" when Git expects \"Makefile\", Git will assume it is really the same file, and continue to remember it as \"Makefile\".\n\nThe default is false, except git-clone[1] or git-init[1] will probe and set core.ignoreCase true if appropriate when the repository is created.\n\nGit relies on the proper configuration of this variable for your operating and file system. Modifying this value may result in unexpected behavior.\n\ncore.precomposeUnicode\n\nThis option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.\n\ncore.protectHFS\n\nIf set to true, do not allow checkout of paths that would be considered equivalent to .git on an HFS+ filesystem. Defaults to true on Mac OS, and false elsewhere.\n\ncore.protectNTFS\n\nIf set to true, do not allow checkout of paths that would cause problems with the NTFS filesystem, e.g. conflict with 8.3 \"short\" names. Defaults to true on Windows, and false elsewhere.\n\ncore.fsmonitor\n\nIf set to true, enable the built-in file system monitor daemon for this working directory (git-fsmonitor--daemon[1]).\n\nLike hook-based file system monitors, the built-in file system monitor can speed up Git commands that need to refresh the Git index (e.g. git status) in a working directory with many files. The built-in monitor eliminates the need to install and maintain an external third-party tool.\n\nThe built-in file system monitor is currently available only on a limited set of supported platforms. Currently, this includes Windows and MacOS.\n\nOtherwise, this variable contains the pathname of the \"fsmonitor\" hook command.\n\nThis hook command is used to identify all files that may have changed since the requested date/time. This information is used to speed up git by avoiding unnecessary scanning of files that have not changed.\n\nSee the \"fsmonitor-watchman\" section of githooks[5].\n\nNote that if you concurrently use multiple versions of Git, such as one version on the command line and another version in an IDE tool, that the definition of core.fsmonitor was extended to allow boolean values in addition to hook pathnames. Git versions 2.35.1 and prior will not understand the boolean values and will consider the \"true\" or \"false\" values as hook pathnames to be invoked. Git versions 2.26 thru 2.35.1 default to hook protocol V2 and will fall back to no fsmonitor (full scan). Git versions prior to 2.26 default to hook protocol V1 and will silently assume there were no changes to report (no scan), so status commands may report incomplete results. For this reason, it is best to upgrade all of your Git versions before using the built-in file system monitor.\n\ncore.fsmonitorHookVersion\n\nSets the protocol version to be used when invoking the \"fsmonitor\" hook.\n\nThere are currently versions 1 and 2. When this is not set, version 2 will be tried first and if it fails then version 1 will be tried. Version 1 uses a timestamp as input to determine which files have changes since that time but some monitors like Watchman have race conditions when used with a timestamp. Version 2 uses an opaque string so that the monitor can return something that can be used to determine what files have changed without race conditions.\n\ncore.trustctime\n\nIf false, the ctime differences between the index and the working tree are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems). See git-update-index[1]. True by default.\n\ncore.splitIndex\n\nIf true, the split-index feature of the index will be used. See git-update-index[1]. False by default.\n\ncore.untrackedCache\n\nDetermines what to do about the untracked cache feature of the index. It will be kept, if this variable is unset or set to keep. It will automatically be added if set to true. And it will automatically be removed, if set to false. Before setting it to true, you should check that mtime is working properly on your system. See git-update-index[1]. keep by default, unless feature.manyFiles is enabled which sets this setting to true by default.\n\ncore.checkStat\n\nWhen missing or is set to default, many fields in the stat structure are checked to detect if a file has been modified since Git looked at it. When this configuration variable is set to minimal, sub-second part of mtime and ctime, the uid and gid of the owner of the file, the inode number (and the device number, if Git was compiled to use it), are excluded from the check among these fields, leaving only the whole-second part of mtime (and ctime, if core.trustCtime is set) and the filesize to be checked.\n\nThere are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the minimal mode may help interoperability when the same repository is used by these other systems at the same time.\n\ncore.quotePath\n\nCommands that output paths (e.g. ls-files, diff), will quote \"unusual\" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \\t for TAB, \\n for LF, \\\\ for backslash) or bytes with values larger than 0x80 (e.g. octal \\302\\265 for \"micro\" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered \"unusual\" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered \"unusual\". Many commands can output pathnames completely verbatim using the -z option. The default value is true.\n\ncore.eol\n\nSets the line ending type to use in the working directory for files that are marked as text (either by having the text attribute set, or by having text=auto and Git auto-detecting the contents as text). Alternatives are lf, crlf and native, which uses the platform’s native line ending. The default value is native. See gitattributes[5] for more information on end-of-line conversion. Note that this value is ignored if core.autocrlf is set to true or input.\n\ncore.safecrlf\n\nIf true, makes Git check if converting CRLF is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly. For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of core.autocrlf, Git will reject the file. The variable can be set to \"warn\", in which case Git will only warn about an irreversible conversion but continue the operation.\n\nCRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository. But for binary files that are accidentally classified as text the conversion can corrupt data.\n\nIf you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes. Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.\n\nUnfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.\n\nNote, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of core.eol and core.autocrlf, but only for the current one. For example, a text file with LF would be accepted with core.eol=lf and could later be checked out with core.eol=crlf, in which case the resulting file would contain CRLF, although the original file contained LF. However, in both work trees the line endings would be consistent, that is either all LF or all CRLF, but never mixed. A file with mixed line endings would be reported by the core.safecrlf mechanism.\n\ncore.autocrlf\n\nSetting this variable to \"true\" is the same as setting the text attribute to \"auto\" on all files and core.eol to \"crlf\". Set to true if you want to have CRLF line endings in your working directory and the repository has LF line endings. This variable can be set to input, in which case no output conversion is performed.\n\ncore.checkRoundtripEncoding\n\nA comma and/or whitespace separated list of encodings that Git performs UTF-8 round trip checks on if they are used in an working-tree-encoding attribute (see gitattributes[5]). The default value is SHIFT-JIS.\n\nIf false, symbolic links are checked out as small plain files that contain the link text. git-update-index[1] and git-add[1] will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links.\n\nThe default is true, except git-clone[1] or git-init[1] will probe and set core.symlinks false if appropriate when the repository is created.\n\ncore.gitProxy\n\nA \"proxy command\" to execute (as command host port) instead of establishing direct connection to the remote server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format, the command is applied only on hostnames ending with the specified domain string. This variable may be set multiple times and is matched in the given order; the first match wins.\n\nCan be overridden by the GIT_PROXY_COMMAND environment variable (which always applies universally, without the special \"for\" handling).\n\nThe special string none can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.\n\ncore.sshCommand\n\nIf this variable is set, git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system. The command is in the same form as the GIT_SSH_COMMAND environment variable and is overridden when the environment variable is set.\n\ncore.ignoreStat\n\nIf true, Git will avoid using lstat() calls to detect if files have changed by setting the \"assume-unchanged\" bit for those tracked files which it has updated identically in both the index and working tree.\n\nWhen files are modified outside of Git, the user will need to stage the modified files explicitly (e.g. see Examples section in git-update-index[1]). Git will not normally detect changes to those files.\n\nThis is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows.\n\nFalse by default.\n\ncore.preferSymlinkRefs\n\nInstead of the default \"symref\" format for HEAD and other symbolic reference files, use symbolic links. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link.\n\ncore.alternateRefsCommand\n\nWhen advertising tips of available history from an alternate, use the shell to execute the specified command instead of git-for-each-ref[1]. The first argument is the absolute path of the alternate. Output must contain one hex object id per line (i.e., the same as produced by git for-each-ref --format='%(objectname)').\n\nNote that you cannot generally put git for-each-ref directly into the config value, as it does not take a repository path as an argument (but you can wrap the command above in a shell script).\n\ncore.alternateRefsPrefixes\n\nWhen listing references from an alternate, list only references that begin with the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref[1]. To list multiple prefixes, separate them with whitespace. If core.alternateRefsCommand is set, setting core.alternateRefsPrefixes has no effect.\n\ncore.bare\n\nIf true this repository is assumed to be bare and has no working directory associated with it. If this is the case a number of commands that require a working directory will be disabled, such as git-add[1] or git-merge[1].\n\nThis setting is automatically guessed by git-clone[1] or git-init[1] when the repository was created. By default a repository that ends in \"/.git\" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).\n\ncore.worktree\n\nSet the path to the root of the working tree. If GIT_COMMON_DIR environment variable is set, core.worktree is ignored and not used for determining the root of working tree. This can be overridden by the GIT_WORK_TREE environment variable and the --work-tree command-line option. The value can be an absolute path or relative to the path to the .git directory, which is either specified by --git-dir or GIT_DIR, or automatically discovered. If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE and core.worktree is specified, the current working directory is regarded as the top level of your working tree.\n\nNote that this variable is honored even when set in a configuration file in a \".git\" subdirectory of a directory and its value differs from the latter directory (e.g. \"/path/to/.git/config\" has core.worktree set to \"/different/path\"), which is most likely a misconfiguration. Running Git commands in the \"/path/to\" directory will still use \"/different/path\" as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository’s usual working tree).\n\nEnable the reflog. Updates to a ref <ref> is logged to the file \"$GIT_DIR/logs/<ref>\", by appending the new and old SHA-1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to true, missing \"$GIT_DIR/logs/<ref>\" file is automatically created for branch heads (i.e. under refs/heads/), remote refs (i.e. under refs/remotes/), note refs (i.e. under refs/notes/), and the symbolic ref HEAD. If it is set to always, then a missing reflog is automatically created for any ref under refs/.\n\nThis information can be used to determine what commit was the tip of a branch \"2 days ago\".\n\nThis value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.\n\ncore.repositoryFormatVersion\n\nInternal variable identifying the repository format and layout version.\n\ncore.sharedRepository\n\nWhen group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When all (or world or everybody), the repository will be readable by all users, additionally to being group-shareable. When umask (or false), Git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal number, files in the repository will have this mode value. 0xxx will override user’s umask value (whereas the other options will only override requested parts of the user’s umask value). Examples: 0660 will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to group unless umask is e.g. 0022). 0640 is a repository that is group-readable but not group-writable. See git-init[1]. False by default.\n\ncore.warnAmbiguousRefs\n\nIf true, Git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the repository. True by default.\n\ncore.compression\n\nAn integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as core.looseCompression and pack.compression.\n\ncore.looseCompression\n\nAn integer -1..9, indicating the compression level for objects that are not in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to 1 (best speed).\n\ncore.packedGitWindowSize\n\nNumber of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system’s memory manager, but may improve performance when accessing a large number of large pack files.\n\nDefault is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value.\n\nCommon unit suffixes of k, m, or g are supported.\n\ncore.packedGitLimit\n\nMaximum number of bytes to map simultaneously into memory from pack files. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process.\n\nDefault is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.\n\nCommon unit suffixes of k, m, or g are supported.\n\ncore.deltaBaseCacheLimit\n\nMaximum number of bytes per thread to reserve for caching base objects that may be referenced by multiple deltified objects. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times.\n\nDefault is 96 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.\n\nCommon unit suffixes of k, m, or g are supported.\n\ncore.bigFileThreshold\n\nThe size of files considered \"big\", which as discussed below changes the behavior of numerous git commands, as well as how such files are stored within the repository. The default is 512 MiB. Common unit suffixes of k, m, or g are supported.\n\nFiles above the configured limit will be:\n\nStored deflated in packfiles, without attempting delta compression.\n\nThe default limit is primarily set with this use-case in mind. With it, most projects will have their source code and other text files delta compressed, but not larger binary media files.\n\nStoring large files without delta compression avoids excessive memory usage, at the slight expense of increased disk usage.\n\nWill be treated as if they were labeled \"binary\" (see gitattributes[5]). e.g. git-log[1] and git-diff[1] will not compute diffs for files above this limit.\n\nWill generally be streamed when written, which avoids excessive memory usage, at the cost of some fixed overhead. Commands that make use of this include git-archive[1], git-fast-import[1], git-index-pack[1], git-unpack-objects[1] and git-fsck[1].\n\ncore.excludesFile\n\nSpecifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, in addition to .gitignore (per-directory) and .git/info/exclude. Defaults to $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore[5].\n\ncore.askPass\n\nSome commands (e.g. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable. Can be overridden by the GIT_ASKPASS environment variable. If not set, fall back to the value of the SSH_ASKPASS environment variable or, failing that, a simple password prompt. The external program shall be given a suitable prompt as command-line argument and write the password on its STDOUT.\n\ncore.attributesFile\n\nIn addition to .gitattributes (per-directory) and .git/info/attributes, Git looks into this file for attributes (see gitattributes[5]). Path expansions are made the same way as for core.excludesFile. Its default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/attributes is used instead.\n\ncore.hooksPath\n\nBy default Git will look for your hooks in the $GIT_DIR/hooks directory. Set this to different path, e.g. /etc/git/hooks, and Git will try to find your hooks in that directory, e.g. /etc/git/hooks/pre-receive instead of in $GIT_DIR/hooks/pre-receive.\n\nThe path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the \"DESCRIPTION\" section of githooks[5]).\n\nThis configuration variable is useful in cases where you’d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an init.templateDir where you’ve changed default hooks.\n\ncore.editor\n\nCommands such as commit and tag that let you edit messages by launching an editor use the value of this variable when it is set, and the environment variable GIT_EDITOR is not set. See git-var[1].\n\nCommands such as commit and tag that let you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default #).\n\nIf set to \"auto\", git-commit would select a character that is not the beginning character of any line in existing commit messages.\n\nNote that these two variables are aliases of each other, and in modern versions of Git you are free to use a string (e.g., // or ⁑⁕⁑) with commentChar. Versions of Git prior to v2.45.0 will ignore commentString but will reject a value of commentChar that consists of more than a single ASCII byte. If you plan to use your config with older and newer versions of Git, you may want to specify both:\n\n[core] # single character for older versions commentChar = \"#\" # string for newer versions (which will override commentChar # because it comes later in the file) commentString = \"//\"\n\ncore.filesRefLockTimeout\n\nThe length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms).\n\ncore.packedRefsTimeout\n\nThe length of time, in milliseconds, to retry when trying to lock the packed-refs file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).\n\ncore.pager\n\nText viewer for use by Git commands (e.g., less). The value is meant to be interpreted by the shell. The order of preference is the $GIT_PAGER environment variable, then core.pager configuration, then $PAGER, and then the default chosen at compile time (usually less).\n\nWhen the LESS environment variable is unset, Git sets it to FRX (if LESS environment variable is set, Git does not change it at all). If you want to selectively override Git’s default setting for LESS, you can set core.pager to e.g. less -S. This will be passed to the shell by Git, which will translate the final command to LESS=FRX less -S. The environment does not set the S option but the command line does, instructing less to truncate long lines. Similarly, setting core.pager to less -+F will deactivate the F option specified by the environment from the command-line, deactivating the \"quit if one screen\" behavior of less. One can specifically activate some flags for particular commands: for example, setting pager.blame to less -S enables line truncation only for git blame.\n\nLikewise, when the LV environment variable is unset, Git sets it to -c. You can override this setting by exporting LV with another value or setting core.pager to lv +c.\n\ncore.whitespace\n\nA comma separated list of common whitespace problems to notice. git diff will use color.diff.whitespace to highlight them, and git apply --whitespace=error will consider them as errors. You can prefix - to disable any of them (e.g. -trailing-space):\n\nblank-at-eol treats trailing whitespaces at the end of the line as an error (enabled by default).\n\nspace-before-tab treats a space character that appears immediately before a tab character in the initial indent part of the line as an error (enabled by default).\n\nindent-with-non-tab treats a line that is indented with space characters instead of the equivalent tabs as an error (not enabled by default).\n\ntab-in-indent treats a tab character in the initial indent part of the line as an error (not enabled by default).\n\nblank-at-eof treats blank lines added at the end of file as an error (enabled by default).\n\ntrailing-space is a short-hand to cover both blank-at-eol and blank-at-eof.\n\ncr-at-eol treats a carriage-return at the end of line as part of the line terminator, i.e. with it, trailing-space does not trigger if the character before such a carriage-return is not a whitespace (not enabled by default).\n\ntabwidth=<n> tells how many character positions a tab occupies; this is relevant for indent-with-non-tab and when Git fixes tab-in-indent errors. The default tab width is 8. Allowed values are 1 to 63.\n\ncore.fsync\n\nA comma-separated list of components of the repository that should be hardened via the core.fsyncMethod when created or modified. You can disable hardening of any component by prefixing it with a -. Items that are not hardened may be lost in the event of an unclean system shutdown. Unless you have special requirements, it is recommended that you leave this option empty or pick one of committed, added, or all.\n\nWhen this configuration is encountered, the set of components starts with the platform default value, disabled components are removed, and additional components are added. none resets the state so that the platform default is ignored.\n\nThe empty string resets the fsync configuration to the platform default. The default on most platforms is equivalent to core.fsync=committed,-loose-object, which has good performance, but risks losing recent work in the event of an unclean system shutdown.\n\nnone clears the set of fsynced components.\n\nloose-object hardens objects added to the repo in loose-object form.\n\npack hardens objects added to the repo in packfile form.\n\npack-metadata hardens packfile bitmaps and indexes.\n\ncommit-graph hardens the commit-graph file.\n\nindex hardens the index when it is modified.\n\nobjects is an aggregate option that is equivalent to loose-object,pack.\n\nreference hardens references modified in the repo.\n\nderived-metadata is an aggregate option that is equivalent to pack-metadata,commit-graph.\n\ncommitted is an aggregate option that is currently equivalent to objects. This mode sacrifices some performance to ensure that work that is committed to the repository with git commit or similar commands is hardened.\n\nadded is an aggregate option that is currently equivalent to committed,index. This mode sacrifices additional performance to ensure that the results of commands like git add and similar operations are hardened.\n\nall is an aggregate option that syncs all individual components above.\n\ncore.fsyncMethod\n\nA value indicating the strategy Git will use to harden repository data using fsync and related primitives.\n\nfsync uses the fsync() system call or platform equivalents.\n\nwriteout-only issues pagecache writeback requests, but depending on the filesystem and storage hardware, data added to the repository may not be durable in the event of a system crash. This is the default mode on macOS.\n\nbatch enables a mode that uses writeout-only flushes to stage multiple updates in the disk writeback cache and then does a single full fsync of a dummy file to trigger the disk cache flush at the end of the operation.\n\nCurrently batch mode only applies to loose-object files. Other repository data is made durable as if fsync was specified. This mode is expected to be as safe as fsync on macOS for repos stored on HFS+ or APFS filesystems and on Windows for repos stored on NTFS or ReFS filesystems.\n\ncore.fsyncObjectFiles\n\nThis boolean will enable fsync() when writing object files. This setting is deprecated. Use core.fsync instead.\n\nThis setting affects data added to the Git repository in loose-object form. When set to true, Git will issue an fsync or similar system call to flush caches so that loose-objects remain consistent in the face of a unclean system shutdown.\n\ncore.preloadIndex\n\nEnable parallel index preload for operations like git diff\n\nThis can speed up operations like git diff and git status especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO’s. Defaults to true.\n\ncore.unsetenvvars\n\nWindows-only: comma-separated list of environment variables' names that need to be unset before spawning any other process. Defaults to PERL5LIB to account for the fact that Git for Windows insists on using its own Perl interpreter.\n\ncore.restrictinheritedhandles\n\nWindows-only: override whether spawned processes inherit only standard file handles (stdin, stdout and stderr) or all handles. Can be auto, true or false. Defaults to auto, which means true on Windows 7 and later, and false on older Windows versions.\n\ncore.createObject\n\nYou can set this to link, in which case a hardlink followed by a delete of the source are used to make sure that object creation will not overwrite existing objects.\n\nOn some file system/operating system combinations, this is unreliable. Set this config setting to rename there; however, this will remove the check that makes sure that existing object files will not get overwritten.\n\ncore.notesRef\n\nWhen showing commit messages, also show notes which are stored in the given ref. The ref must be fully qualified. If the given ref does not exist, it is not an error but means that no notes should be printed.\n\nThis setting defaults to \"refs/notes/commits\", and it can be overridden by the GIT_NOTES_REF environment variable. See git-notes[1].\n\ncore.commitGraph\n\nIf true, then git will read the commit-graph file (if it exists) to parse the graph structure of commits. Defaults to true. See git-commit-graph[1] for more information.\n\ncore.useReplaceRefs\n\nIf set to false, behave as if the --no-replace-objects option was given on the command line. See git[1] and git-replace[1] for more information.\n\ncore.multiPackIndex\n\nUse the multi-pack-index file to track multiple packfiles using a single index. See git-multi-pack-index[1] for more information. Defaults to true.\n\ncore.sparseCheckout\n\nEnable \"sparse checkout\" feature. See git-sparse-checkout[1] for more information.\n\ncore.sparseCheckoutCone\n\nEnables the \"cone mode\" of the sparse checkout feature. When the sparse-checkout file contains a limited set of patterns, this mode provides significant performance advantages. The \"non-cone mode\" can be requested to allow specifying more flexible patterns by setting this variable to false. See git-sparse-checkout[1] for more information.\n\ncore.abbrev\n\nSet the length object names are abbreviated to. If unspecified or set to \"auto\", an appropriate value is computed based on the approximate number of packed objects in your repository, which hopefully is enough for abbreviated object names to stay unique for some time. If set to \"no\", no abbreviation is made and the object names are shown in their full length. The minimum length is 4.\n\ncore.maxTreeDepth\n\nThe maximum depth Git is willing to recurse while traversing a tree (e.g., \"a/b/cde/f\" has a depth of 4). This is a fail-safe to allow Git to abort cleanly, and should not generally need to be adjusted. When Git is compiled with MSVC, the default is 512. Otherwise, the default is 2048.\n\ncredential.helper\n\nSpecify an external helper to be called when a username or password credential is needed; the helper may consult external storage to avoid prompting the user for the credentials. This is normally the name of a credential helper with possible arguments, but may also be an absolute path with arguments or, if preceded by !, shell commands.\n\nNote that multiple helpers may be defined. See gitcredentials[7] for details and examples.\n\ncredential.useHttpPath\n\nWhen acquiring credentials, consider the \"path\" component of an http or https URL to be important. Defaults to false. See gitcredentials[7] for more information.\n\ncredential.username\n\nIf no username is set for a network authentication, use this username by default. See credential.<context>.* below, and gitcredentials[7].\n\ncredential.<url>.*\n\nAny of the credential.* options above can be applied selectively to some credentials. For example, \"credential.https://example.com.username\" would set the default username only for https connections to example.com. See gitcredentials[7] for details on how URLs are matched.\n\ncredentialCache.ignoreSIGHUP\n\nTell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting.\n\ncredentialStore.lockTimeoutMS\n\nThe length of time, in milliseconds, for git-credential-store to retry when trying to lock the credentials file. A value of 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1s).\n\ndiff.autoRefreshIndex\n\nWhen using git diff to compare with work tree files, do not consider stat-only changes as changed. Instead, silently run git update-index --refresh to update the cached stat information for paths whose contents in the work tree match the contents in the index. This option defaults to true. Note that this affects only git diff Porcelain, and not lower level diff commands such as git diff-files.\n\ndiff.dirstat\n\nA comma separated list of --dirstat parameters specifying the default behavior of the --dirstat option to git-diff[1] and friends. The defaults can be overridden on the command line (using --dirstat=<param1,param2,...>). The fallback defaults (when not changed by diff.dirstat) are changes,noncumulative,3. The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: files,10,cumulative.\n\ndiff.statNameWidth\n\nLimit the width of the filename part in --stat output. If set, applies to all commands generating --stat output except format-patch.\n\ndiff.statGraphWidth\n\nLimit the width of the graph part in --stat output. If set, applies to all commands generating --stat output except format-patch.\n\ndiff.context\n\nGenerate diffs with <n> lines of context instead of the default of 3. This value is overridden by the -U option.\n\ndiff.interHunkContext\n\nShow the context between diff hunks, up to the specified number of lines, thereby fusing the hunks that are close to each other. This value serves as the default for the --inter-hunk-context command line option.\n\ndiff.external\n\nIf this config variable is set, diff generation is not performed using the internal diff machinery, but using the given command. Can be overridden with the ‘GIT_EXTERNAL_DIFF’ environment variable. The command is called with parameters as described under \"git Diffs\" in git[1]. Note: if you want to use an external diff program only on a subset of your files, you might want to use gitattributes[5] instead.\n\ndiff.trustExitCode\n\nIf this boolean value is set to true then the diff.external command is expected to return exit code 0 if it considers the input files to be equal or 1 if it considers them to be different, like diff(1). If it is set to false, which is the default, then the command is expected to return exit code 0 regardless of equality. Any other exit code causes Git to report a fatal error.\n\ndiff.ignoreSubmodules\n\nSets the default value of --ignore-submodules. Note that this affects only git diff Porcelain, and not lower level diff commands such as git diff-files. git checkout and git switch also honor this setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is overridden by using the --ignore-submodules command-line option. The git submodule commands are not affected by this setting. By default this is set to untracked so that any untracked submodules are ignored.\n\ndiff.mnemonicPrefix\n\nIf set, git diff uses a prefix pair that is different from the standard \"a/\" and \"b/\" depending on what is being compared. When this configuration is in effect, reverse diff output also swaps the order of the prefixes:\n\ngit diff\n\ncompares the (i)ndex and the (w)ork tree;\n\ngit diff HEAD\n\ncompares a (c)ommit and the (w)ork tree;\n\ngit diff --cached\n\ncompares a (c)ommit and the (i)ndex;\n\ngit diff HEAD:file1 file2\n\ncompares an (o)bject and a (w)ork tree entity;\n\ngit diff --no-index a b\n\ncompares two non-git things (1) and (2).\n\ndiff.noPrefix\n\nIf set, git diff does not show any source or destination prefix.\n\ndiff.srcPrefix\n\nIf set, git diff uses this source prefix. Defaults to \"a/\".\n\ndiff.dstPrefix\n\nIf set, git diff uses this destination prefix. Defaults to \"b/\".\n\ndiff.relative\n\nIf set to true, git diff does not show changes outside of the directory and show pathnames relative to the current directory.\n\ndiff.orderFile\n\nFile indicating how to order files within a diff. See the -O option to git-diff[1] for details. If diff.orderFile is a relative pathname, it is treated as relative to the top of the working tree.\n\ndiff.renameLimit\n\nThe number of files to consider in the exhaustive portion of copy/rename detection; equivalent to the git diff option -l. If not set, the default value is currently 1000. This setting has no effect if rename detection is turned off.\n\ndiff.renames\n\nWhether and how Git detects renames. If set to \"false\", rename detection is disabled. If set to \"true\", basic rename detection is enabled. If set to \"copies\" or \"copy\", Git will detect copies, as well. Defaults to true. Note that this affects only git diff Porcelain like git-diff[1] and git-log[1], and not lower level commands such as git-diff-files[1].\n\ndiff.suppressBlankEmpty\n\nA boolean to inhibit the standard behavior of printing a space before each empty output line. Defaults to false.\n\ndiff.submodule\n\nSpecify the format in which differences in submodules are shown. The \"short\" format just shows the names of the commits at the beginning and end of the range. The \"log\" format lists the commits in the range like git-submodule[1] summary does. The \"diff\" format shows an inline diff of the changed contents of the submodule. Defaults to \"short\".\n\ndiff.wordRegex\n\nA POSIX Extended Regular Expression used to determine what is a \"word\" when performing word-by-word difference calculations. Character sequences that match the regular expression are \"words\", all other characters are ignorable whitespace.\n\ndiff.<driver>.command\n\nThe custom diff driver command. See gitattributes[5] for details.\n\ndiff.<driver>.trustExitCode\n\nIf this boolean value is set to true then the diff.<driver>.command command is expected to return exit code 0 if it considers the input files to be equal or 1 if it considers them to be different, like diff(1). If it is set to false, which is the default, then the command is expected to return exit code 0 regardless of equality. Any other exit code causes Git to report a fatal error.\n\ndiff.<driver>.xfuncname\n\nThe regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See gitattributes[5] for details.\n\ndiff.<driver>.binary\n\nSet this option to true to make the diff driver treat files as binary. See gitattributes[5] for details.\n\ndiff.<driver>.textconv\n\nThe command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See gitattributes[5] for details.\n\ndiff.<driver>.wordRegex\n\nThe regular expression that the diff driver should use to split words in a line. See gitattributes[5] for details.\n\ndiff.<driver>.cachetextconv\n\nSet this option to true to make the diff driver cache the text conversion outputs. See gitattributes[5] for details.\n\naraxis\n\nbc\n\ncodecompare\n\ndeltawalker\n\ndiffmerge\n\ndiffuse\n\necmerge\n\nemerge\n\nexamdiff\n\nguiffy\n\ngvimdiff\n\nkdiff3\n\nkompare\n\nmeld\n\nnvimdiff\n\nopendiff\n\np4merge\n\nsmerge\n\ntkdiff\n\nvimdiff\n\nwinmerge\n\nxxdiff\n\ndiff.indentHeuristic\n\nSet this option to false to disable the default heuristics that shift diff hunk boundaries to make patches easier to read.\n\ndiff.algorithm\n\nChoose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\ndiff.wsErrorHighlight\n\nHighlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. The whitespace errors are colored with color.diff.whitespace. The command line option --ws-error-highlight=<kind> overrides this setting.\n\ndiff.colorMoved\n\nIf set to either a valid <mode> or a true value, moved lines in a diff are colored differently, for details of valid modes see --color-moved in git-diff[1]. If simply set to true the default color mode will be used. When set to false, moved lines are not colored.\n\ndiff.colorMovedWS\n\nWhen moved lines are colored using e.g. the diff.colorMoved setting, this option controls the <mode> how spaces are treated. For details of valid modes see --color-moved-ws in git-diff[1].\n\ndiff.tool\n\nControls which diff tool is used by git-difftool[1]. This variable overrides the value configured in merge.tool. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<tool>.cmd variable is defined.\n\ndiff.guitool\n\nControls which diff tool is used by git-difftool[1] when the -g/--gui flag is specified. This variable overrides the value configured in merge.guitool. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<guitool>.cmd variable is defined.\n\ndifftool.<tool>.cmd\n\nSpecify the command to invoke the specified diff tool. The specified command is evaluated in shell with the following variables available: LOCAL is set to the name of the temporary file containing the contents of the diff pre-image and REMOTE is set to the name of the temporary file containing the contents of the diff post-image.\n\nSee the --tool=<tool> option in git-difftool[1] for more details.\n\ndifftool.<tool>.path\n\nOverride the path for the given tool. This is useful in case your tool is not in the PATH.\n\ndifftool.trustExitCode\n\nExit difftool if the invoked diff tool returns a non-zero exit status.\n\nSee the --trust-exit-code option in git-difftool[1] for more details.\n\ndifftool.prompt\n\nPrompt before each invocation of the diff tool.\n\ndifftool.guiDefault\n\nSet true to use the diff.guitool by default (equivalent to specifying the --gui argument), or auto to select diff.guitool or diff.tool depending on the presence of a DISPLAY environment variable value. The default is false, where the --gui argument must be provided explicitly for the diff.guitool to be used.\n\nextensions.objectFormat\n\nSpecify the hash algorithm to use. The acceptable values are sha1 and sha256. If not specified, sha1 is assumed. It is an error to specify this key unless core.repositoryFormatVersion is 1.\n\nNote that this setting should only be set by git-init[1] or git-clone[1]. Trying to change it after initialization will not work and will produce hard-to-diagnose issues.\n\nextensions.compatObjectFormat\n\nSpecify a compatitbility hash algorithm to use. The acceptable values are sha1 and sha256. The value specified must be different from the value of extensions.objectFormat. This allows client level interoperability between git repositories whose objectFormat matches this compatObjectFormat. In particular when fully implemented the pushes and pulls from a repository in whose objectFormat matches compatObjectFormat. As well as being able to use oids encoded in compatObjectFormat in addition to oids encoded with objectFormat to locally specify objects.\n\nextensions.refStorage\n\nSpecify the ref storage format to use. The acceptable values are:\n\nfiles for loose files with packed-refs. This is the default.\n\nreftable for the reftable format. This format is experimental and its internals are subject to change.\n\nIt is an error to specify this key unless core.repositoryFormatVersion is 1.\n\n+ Note that this setting should only be set by git-init[1] or git-clone[1]. Trying to change it after initialization will not work and will produce hard-to-diagnose issues.\n\nextensions.worktreeConfig\n\nIf enabled, then worktrees will load config settings from the $GIT_DIR/config.worktree file in addition to the $GIT_COMMON_DIR/config file. Note that $GIT_COMMON_DIR and $GIT_DIR are the same for the main working tree, while other working trees have $GIT_DIR equal to $GIT_COMMON_DIR/worktrees/<id>/. The settings in the config.worktree file will override settings from any other config files.\n\nWhen enabling extensions.worktreeConfig, you must be careful to move certain values from the common config file to the main working tree’s config.worktree file, if present:\n\ncore.worktree must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree.\n\nIf core.bare is true, then it must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree.\n\nIt may also be beneficial to adjust the locations of core.sparseCheckout and core.sparseCheckoutCone depending on your desire for customizable sparse-checkout settings for each worktree. By default, the git sparse-checkout builtin enables extensions.worktreeConfig, assigns these config values on a per-worktree basis, and uses the $GIT_DIR/info/sparse-checkout file to specify the sparsity for each worktree independently. See git-sparse-checkout[1] for more details.\n\nFor historical reasons, extensions.worktreeConfig is respected regardless of the core.repositoryFormatVersion setting.\n\nfastimport.unpackLimit\n\nIf the number of objects imported by git-fast-import[1] is below this limit, then the objects will be unpacked into loose object files. However, if the number of imported objects equals or exceeds this limit, then the pack will be stored as a pack. Storing the pack from a fast-import can make the import operation complete faster, especially on slow filesystems. If not set, the value of transfer.unpackLimit is used instead.\n\nfeature.*\n\nThe config settings that start with feature. modify the defaults of a group of other config settings. These groups are created by the Git developer community as recommended defaults and are subject to change. In particular, new config options may be added with different defaults.\n\nfeature.experimental\n\nEnable config options that are new to Git, and are being considered for future defaults. Config settings included here may be added or removed with each release, including minor version updates. These settings may have unintended interactions since they are so new. Please enable this setting if you are interested in providing feedback on experimental features. The new default values are:\n\nfetch.negotiationAlgorithm=skipping may improve fetch negotiation times by skipping more commits at a time, reducing the number of round trips.\n\npack.useBitmapBoundaryTraversal=true may improve bitmap traversal times by walking fewer objects.\n\npack.allowPackReuse=multi may improve the time it takes to create a pack by reusing objects from multiple packs instead of just one.\n\nfeature.manyFiles\n\nEnable config options that optimize for repos with many files in the working directory. With many files, commands such as git status and git checkout may be slow and these new defaults improve performance:\n\nindex.skipHash=true speeds up index writes by not computing a trailing checksum. Note that this will cause Git versions earlier than 2.13.0 to refuse to parse the index and Git versions earlier than 2.40.0 will report a corrupted index during git fsck.\n\nindex.version=4 enables path-prefix compression in the index.\n\ncore.untrackedCache=true enables the untracked cache. This setting assumes that mtime is working on your machine.\n\nfetch.recurseSubmodules\n\nThis option controls whether git fetch (and the underlying fetch in git pull) will recursively fetch into populated submodules. This option can be set either to a boolean value or to on-demand. Setting it to a boolean changes the behavior of fetch and pull to recurse unconditionally into submodules when set to true or to not recurse at all when set to false. When set to on-demand, fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule’s reference. Defaults to on-demand, or to the value of submodule.recurse if set.\n\nfetch.fsckObjects\n\nIf it is set to true, git-fetch-pack will check all fetched objects. See transfer.fsckObjects for what’s checked. Defaults to false. If not set, the value of transfer.fsckObjects is used instead.\n\nfetch.fsck.<msg-id>\n\nActs like fsck.<msg-id>, but is used by git-fetch-pack[1] instead of git-fsck[1]. See the fsck.<msg-id> documentation for details.\n\nfetch.fsck.skipList\n\nActs like fsck.skipList, but is used by git-fetch-pack[1] instead of git-fsck[1]. See the fsck.skipList documentation for details.\n\nfetch.unpackLimit\n\nIf the number of objects fetched over the Git native transfer is below this limit, then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of transfer.unpackLimit is used instead.\n\nfetch.prune\n\nIf true, fetch will automatically behave as if the --prune option was given on the command line. See also remote.<name>.prune and the PRUNING section of git-fetch[1].\n\nIf true, fetch will automatically behave as if the refs/tags/*:refs/tags/* refspec was provided when pruning, if not set already. This allows for setting both this option and fetch.prune to maintain a 1=1 mapping to upstream refs. See also remote.<name>.pruneTags and the PRUNING section of git-fetch[1].\n\nfetch.all\n\nIf true, fetch will attempt to update all available remotes. This behavior can be overridden by passing --no-all or by explicitly specifying one or more remote(s) to fetch from. Defaults to false.\n\nfetch.output\n\nControl how ref update status is printed. Valid values are full and compact. Default value is full. See the OUTPUT section in git-fetch[1] for details.\n\nfetch.negotiationAlgorithm\n\nControl how information about the commits in the local repository is sent when negotiating the contents of the packfile to be sent by the server. Set to \"consecutive\" to use an algorithm that walks over consecutive commits checking each one. Set to \"skipping\" to use an algorithm that skips commits in an effort to converge faster, but may result in a larger-than-necessary packfile; or set to \"noop\" to not send any information at all, which will almost certainly result in a larger-than-necessary packfile, but will skip the negotiation step. Set to \"default\" to override settings made previously and use the default behaviour. The default is normally \"consecutive\", but if feature.experimental is true, then the default is \"skipping\". Unknown values will cause git fetch to error out.\n\nSee also the --negotiate-only and --negotiation-tip options to git-fetch[1].\n\nSet to false to enable --no-show-forced-updates in git-fetch[1] and git-pull[1] commands. Defaults to true.\n\nfetch.parallel\n\nSpecifies the maximal number of fetch operations to be run in parallel at a time (submodules, or remotes when the --multiple option of git-fetch[1] is in effect).\n\nA value of 0 will give some reasonable default. If unset, it defaults to 1.\n\nFor submodules, this setting can be overridden using the submodule.fetchJobs config setting.\n\nfetch.writeCommitGraph\n\nSet to true to write a commit-graph after every git fetch command that downloads a pack-file from a remote. Using the --split option, most executions will create a very small commit-graph file on top of the existing commit-graph file(s). Occasionally, these files will merge and the write may take longer. Having an updated commit-graph file helps performance of many Git commands, including git merge-base, git push -f, and git log --graph. Defaults to false.\n\nfetch.bundleURI\n\nThis value stores a URI for downloading Git object data from a bundle URI before performing an incremental fetch from the origin Git server. This is similar to how the --bundle-uri option behaves in git-clone[1]. git clone --bundle-uri will set the fetch.bundleURI value if the supplied bundle URI contains a bundle list that is organized for incremental fetches.\n\nIf you modify this value and your repository has a fetch.bundleCreationToken value, then remove that fetch.bundleCreationToken value before fetching from the new bundle URI.\n\nfetch.bundleCreationToken\n\nWhen using fetch.bundleURI to fetch incrementally from a bundle list that uses the \"creationToken\" heuristic, this config value stores the maximum creationToken value of the downloaded bundles. This value is used to prevent downloading bundles in the future if the advertised creationToken is not strictly larger than this value.\n\nThe creation token values are chosen by the provider serving the specific bundle URI. If you modify the URI at fetch.bundleURI, then be sure to remove the value for the fetch.bundleCreationToken value before fetching.\n\nfilter.<driver>.clean\n\nThe command which is used to convert the content of a worktree file to a blob upon checkin. See gitattributes[5] for details.\n\nfilter.<driver>.smudge\n\nThe command which is used to convert the content of a blob object to a worktree file upon checkout. See gitattributes[5] for details.\n\nformat.attach\n\nEnable multipart/mixed attachments as the default for format-patch. The value can also be a double quoted string which will enable attachments as the default and set the value as the boundary. See the --attach option in git-format-patch[1]. To countermand an earlier value, set it to an empty string.\n\nformat.from\n\nProvides the default value for the --from option to format-patch. Accepts a boolean value, or a name and email address. If false, format-patch defaults to --no-from, using commit authors directly in the \"From:\" field of patch mails. If true, format-patch defaults to --from, using your committer identity in the \"From:\" field of patch mails and including a \"From:\" field in the body of the patch mail if different. If set to a non-boolean value, format-patch uses that value instead of your committer identity. Defaults to false.\n\nformat.forceInBodyFrom\n\nProvides the default value for the --[no-]force-in-body-from option to format-patch. Defaults to false.\n\nformat.numbered\n\nA boolean which can enable or disable sequence numbers in patch subjects. It defaults to \"auto\" which enables it only if there is more than one patch. It can be enabled or disabled for all messages by setting it to \"true\" or \"false\". See --numbered option in git-format-patch[1].\n\nformat.headers\n\nAdditional email headers to include in a patch to be submitted by mail. See git-format-patch[1].\n\nformat.to\n\nformat.cc\n\nAdditional recipients to include in a patch to be submitted by mail. See the --to and --cc options in git-format-patch[1].\n\nformat.subjectPrefix\n\nThe default for format-patch is to output files with the [PATCH] subject prefix. Use this variable to change that prefix.\n\nformat.coverFromDescription\n\nThe default mode for format-patch to determine which parts of the cover letter will be populated using the branch’s description. See the --cover-from-description option in git-format-patch[1].\n\nformat.signature\n\nThe default for format-patch is to output a signature containing the Git version number. Use this variable to change that default. Set this variable to the empty string (\"\") to suppress signature generation.\n\nformat.signatureFile\n\nWorks just like format.signature except the contents of the file specified by this variable will be used as the signature.\n\nformat.suffix\n\nThe default for format-patch is to output files with the suffix .patch. Use this variable to change that suffix (make sure to include the dot if you want it).\n\nformat.encodeEmailHeaders\n\nEncode email headers that have non-ASCII characters with \"Q-encoding\" (described in RFC 2047) for email transmission. Defaults to true.\n\nformat.pretty\n\nThe default pretty format for log/show/whatchanged command. See git-log[1], git-show[1], git-whatchanged[1].\n\nformat.thread\n\nThe default threading style for git format-patch. Can be a boolean value, or shallow or deep. shallow threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the --in-reply-to, and the first patch mail, in this order. deep threading makes every mail a reply to the previous one. A true boolean value is the same as shallow, and a false value disables threading.\n\nformat.signOff\n\nA boolean value which lets you enable the -s/--signoff option of format-patch by default. Note: Adding the Signed-off-by trailer to a patch should be a conscious act and means that you certify you have the rights to submit this work under the same open source license. Please see the SubmittingPatches document for further discussion.\n\nformat.coverLetter\n\nA boolean that controls whether to generate a cover-letter when format-patch is invoked, but in addition can be set to \"auto\", to generate a cover-letter only when there’s more than one patch. Default is false.\n\nformat.outputDirectory\n\nSet a custom directory to store the resulting files instead of the current working directory. All directory components will be created.\n\nformat.filenameMaxLength\n\nThe maximum length of the output filenames generated by the format-patch command; defaults to 64. Can be overridden by the --filename-max-length=<n> command line option.\n\nformat.useAutoBase\n\nA boolean value which lets you enable the --base=auto option of format-patch by default. Can also be set to \"whenAble\" to allow enabling --base=auto if a suitable base is available, but to skip adding base info otherwise without the format dying.\n\nformat.notes\n\nProvides the default value for the --notes option to format-patch. Accepts a boolean value, or a ref which specifies where to get notes. If false, format-patch defaults to --no-notes. If true, format-patch defaults to --notes. If set to a non-boolean value, format-patch defaults to --notes=<ref>, where ref is the non-boolean value. Defaults to false.\n\nIf one wishes to use the ref refs/notes/true, please use that literal instead.\n\nThis configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple --[no-]notes[=] options passed in. That is, a value of true will show the default notes, a value of <ref> will also show notes from that notes ref and a value of false will negate previous configurations and not show notes.\n\nFor example,\n\n[format] notes = true notes = foo notes = false notes = bar\n\nwill only show notes from refs/notes/bar.\n\nformat.mboxrd\n\nA boolean value which enables the robust \"mboxrd\" format when --stdout is in use to escape \"^>+From \" lines.\n\nformat.noprefix\n\nIf set, do not show any source or destination prefix in patches. This is equivalent to the diff.noprefix option used by git diff (but which is not respected by format-patch). Note that by setting this, the receiver of any patches you generate will have to apply them using the -p0 option.\n\nfsck.<msg-id>\n\nDuring fsck git may find issues with legacy data which wouldn’t be generated by current versions of git, and which wouldn’t be sent over the wire if transfer.fsckObjects was set. This feature is intended to support working with legacy repositories containing such data.\n\nSetting fsck.<msg-id> will be picked up by git-fsck[1], but to accept pushes of such data set receive.fsck.<msg-id> instead, or to clone or fetch it set fetch.fsck.<msg-id>.\n\nThe rest of the documentation discusses fsck.* for brevity, but the same applies for the corresponding receive.fsck.* and fetch.fsck.*. variables.\n\nUnlike variables like color.ui and core.editor, the receive.fsck.<msg-id> and fetch.fsck.<msg-id> variables will not fall back on the fsck.<msg-id> configuration if they aren’t set. To uniformly configure the same fsck settings in different circumstances, all three of them must be set to the same values.\n\nWhen fsck.<msg-id> is set, errors can be switched to warnings and vice versa by configuring the fsck.<msg-id> setting where the <msg-id> is the fsck message ID and the value is one of error, warn or ignore. For convenience, fsck prefixes the error/warning with the message ID, e.g. \"missingEmail: invalid author/committer line - missing email\" means that setting fsck.missingEmail = ignore will hide that issue.\n\nIn general, it is better to enumerate existing objects with problems with fsck.skipList, instead of listing the kind of breakages these problematic objects share to be ignored, as doing the latter will allow new instances of the same breakages go unnoticed.\n\nSetting an unknown fsck.<msg-id> value will cause fsck to die, but doing the same for receive.fsck.<msg-id> and fetch.fsck.<msg-id> will only cause git to warn.\n\nSee the Fsck Messages section of git-fsck[1] for supported values of <msg-id>.\n\nfsck.skipList\n\nThe path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later, comments (#), empty lines, and any leading and trailing whitespace are ignored. Everything but a SHA-1 per line will error out on older versions.\n\nThis feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored, such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.\n\nLike fsck.<msg-id> this variable has corresponding receive.fsck.skipList and fetch.fsck.skipList variants.\n\nUnlike variables like color.ui and core.editor the receive.fsck.skipList and fetch.fsck.skipList variables will not fall back on the fsck.skipList configuration if they aren’t set. To uniformly configure the same fsck settings in different circumstances, all three of them must be set to the same values.\n\nOlder versions of Git (before 2.20) documented that the object names list should be sorted. This was never a requirement; the object names could appear in any order, but when reading the list we tracked whether the list was sorted for the purposes of an internal binary search implementation, which could save itself some work with an already sorted list. Unless you had a humongous list there was no reason to go out of your way to pre-sort the list. After Git version 2.20 a hash implementation is used instead, so there’s now no reason to pre-sort the list.\n\nfsmonitor.allowRemote\n\nBy default, the fsmonitor daemon refuses to work with network-mounted repositories. Setting fsmonitor.allowRemote to true overrides this behavior. Only respected when core.fsmonitor is set to true.\n\nfsmonitor.socketDir\n\nThis Mac OS-specific option, if set, specifies the directory in which to create the Unix domain socket used for communication between the fsmonitor daemon and various Git commands. The directory must reside on a native Mac OS filesystem. Only respected when core.fsmonitor is set to true.\n\ngc.aggressiveDepth\n\nThe depth parameter used in the delta compression algorithm used by git gc --aggressive. This defaults to 50, which is the default for the --depth option when --aggressive isn’t in use.\n\nSee the documentation for the --depth option in git-repack[1] for more details.\n\ngc.aggressiveWindow\n\nThe window size parameter used in the delta compression algorithm used by git gc --aggressive. This defaults to 250, which is a much more aggressive window size than the default --window of 10.\n\nSee the documentation for the --window option in git-repack[1] for more details.\n\ngc.auto\n\nWhen there are approximately more than this many loose objects in the repository, git gc --auto will pack them. Some Porcelain commands use this command to perform a light-weight garbage collection from time to time. The default value is 6700.\n\nSetting this to 0 disables not only automatic packing based on the number of loose objects, but also any other heuristic git gc --auto will otherwise use to determine if there’s work to do, such as gc.autoPackLimit.\n\ngc.autoPackLimit\n\nWhen there are more than this many packs that are not marked with *.keep file in the repository, git gc --auto consolidates them into one larger pack. The default value is 50. Setting this to 0 disables it. Setting gc.auto to 0 will also disable this.\n\nSee the gc.bigPackThreshold configuration variable below. When in use, it’ll affect how the auto pack limit works.\n\ngc.autoDetach\n\nMake git gc --auto return immediately and run in the background if the system supports it. Default is true.\n\ngc.bigPackThreshold\n\nIf non-zero, all non-cruft packs larger than this limit are kept when git gc is run. This is very similar to --keep-largest-pack except that all non-cruft packs that meet the threshold are kept, not just the largest pack. Defaults to zero. Common unit suffixes of k, m, or g are supported.\n\nNote that if the number of kept packs is more than gc.autoPackLimit, this configuration variable is ignored, all packs except the base pack will be repacked. After this the number of packs should go below gc.autoPackLimit and gc.bigPackThreshold should be respected again.\n\nIf the amount of memory estimated for git repack to run smoothly is not available and gc.bigPackThreshold is not set, the largest pack will also be excluded (this is the equivalent of running git gc with --keep-largest-pack).\n\ngc.writeCommitGraph\n\nIf true, then gc will rewrite the commit-graph file when git-gc[1] is run. When using git gc --auto the commit-graph will be updated if housekeeping is required. Default is true. See git-commit-graph[1] for details.\n\ngc.logExpiry\n\nIf the file gc.log exists, then git gc --auto will print its content and exit with status zero instead of running unless that file is more than gc.logExpiry old. Default is \"1.day\". See gc.pruneExpire for more ways to specify its value.\n\ngc.packRefs\n\nRunning git pack-refs in a repository renders it unclonable by Git versions prior to 1.5.1.2 over dumb transports such as HTTP. This variable determines whether git gc runs git pack-refs. This can be set to notbare to enable it within all non-bare repos or it can be set to a boolean value. The default is true.\n\ngc.cruftPacks\n\nStore unreachable objects in a cruft pack (see git-repack[1]) instead of as loose objects. The default is true.\n\ngc.maxCruftSize\n\nLimit the size of new cruft packs when repacking. When specified in addition to --max-cruft-size, the command line option takes priority. See the --max-cruft-size option of git-repack[1].\n\ngc.pruneExpire\n\nWhen git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using cruft packs via gc.cruftPacks or --cruft). Override the grace period with this config variable. The value \"now\" may be used to disable this grace period and always prune unreachable objects immediately, or \"never\" may be used to suppress pruning. This feature helps prevent corruption when git gc runs concurrently with another process writing to the repository; see the \"NOTES\" section of git-gc[1].\n\ngc.worktreePruneExpire\n\nWhen git gc is run, it calls git worktree prune --expire 3.months.ago. This config variable can be used to set a different grace period. The value \"now\" may be used to disable the grace period and prune $GIT_DIR/worktrees immediately, or \"never\" may be used to suppress pruning.\n\ngc.reflogExpire\n\ngc.<pattern>.reflogExpire\n\ngit reflog expire removes reflog entries older than this time; defaults to 90 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"<pattern>\" (e.g. \"refs/stash\") in the middle the setting applies only to the refs that match the <pattern>.\n\ngc.reflogExpireUnreachable\n\ngc.<pattern>.reflogExpireUnreachable\n\ngit reflog expire removes reflog entries older than this time and are not reachable from the current tip; defaults to 30 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"<pattern>\" (e.g. \"refs/stash\") in the middle, the setting applies only to the refs that match the <pattern>.\n\nThese types of entries are generally created as a result of using git commit --amend or git rebase and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than gc.reflogExpire.\n\ngc.recentObjectsHook\n\nWhen considering whether or not to remove an object (either when generating a cruft pack or storing unreachable objects as loose), use the shell to execute the specified command(s). Interpret their output as object IDs which Git will consider as \"recent\", regardless of their age. By treating their mtimes as \"now\", any objects (and their descendants) mentioned in the output will be kept regardless of their true age.\n\nOutput must contain exactly one hex object ID per line, and nothing else. Objects which cannot be found in the repository are ignored. Multiple hooks are supported, but all must exit successfully, else the operation (either generating a cruft pack or unpacking unreachable objects) will be halted.\n\ngc.repackFilter\n\nWhen repacking, use the specified filter "
    }
}