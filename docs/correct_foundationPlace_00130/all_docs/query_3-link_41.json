{
    "id": "correct_foundationPlace_00130_3",
    "rank": 41,
    "data": {
        "url": "https://github.com/dpa99c/react-native-launch-navigator",
        "read_more_link": "",
        "language": "en",
        "title": "navigator: A React Native module for launching today's most popular navigation/ride apps to navigate to a destination.",
        "top_image": "https://opengraph.githubassets.com/39646ad9b26eb68875e624ff2352ec98168e7261f4e16dd692a00f912422408f/dpa99c/react-native-launch-navigator",
        "meta_img": "https://opengraph.githubassets.com/39646ad9b26eb68875e624ff2352ec98168e7261f4e16dd692a00f912422408f/dpa99c/react-native-launch-navigator",
        "images": [
            "https://camo.githubusercontent.com/f3a04619f7933eedb3dcb16190d78365c6adddb7f37c09204a42e84e5031b1fb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d6e61746976652d6c61756e63682d6e6176696761746f722e737667",
            "https://camo.githubusercontent.com/ec91f2fbb15963a318744f7d8ef035ff7c32486910ed002d998f701aa104efeb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656163742d6e61746976652d6c61756e63682d6e6176696761746f722e737667",
            "https://camo.githubusercontent.com/4d1393f8e75183caf70ac4d4bbfc62dca92e70766496eff6622f4d03adfde01a/687474703a2f2f692e696d6775722e636f6d2f51695575324e512e676966",
            "https://camo.githubusercontent.com/200eafe521059e0e58159fd70180d7cc13366213bea5bd1ed9e7adeca47f8fd8/687474703a2f2f692e696d6775722e636f6d2f4f7837746159482e676966",
            "https://camo.githubusercontent.com/d94e10dab046df92840b36519c748e806e52bff2ed7eb397c8e2dd2924daa99a/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e61746543435f4c475f676c6f62616c2e676966",
            "https://github.githubassets.com/assets/patreon-96b15b9db4b9.svg",
            "https://github.githubassets.com/assets/ko_fi-53a60c17e75c.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A React Native module for launching today's most popular navigation/ride apps to navigate to a destination. - dpa99c/react-native-launch-navigator",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/dpa99c/react-native-launch-navigator",
        "text": "A React Native module for launching today's most popular navigation/ride apps to navigate to a destination.\n\nPlatforms: Android and iOS.\n\nKey features:\n\nSingle, clean API to abstract away the gory details of each 3rd party app's custom URI scheme\n\nDetects which supported apps are installed/available on the user's device\n\nAPI to detect which features are supported by which apps on which platforms\n\nGrowing list of supported apps\n\nLaunch Navigator functionality is also available as a Cordova/Phonegap plugin.\n\nI dedicate a considerable amount of my free time to developing and maintaining my Open Source software. To help ensure this module is kept updated, new features are added and bugfixes are implemented quickly, please donate a couple of dollars (or a little more if you can stretch) as this will help me to afford to dedicate time to its maintenance. Please consider donating if you're using this software in an app that makes you money, if you're being paid to make the app, if you're asking for new features or priority bug fixes.\n\nTable of Contents\n\nGeneral concepts\n\nApp detection, selection and launching\n\nGeocoding and input format of start/destination locations\n\nSupported navigation apps\n\nAdding support for more apps\n\nInstallation\n\nAdd iOS URL schemes\n\nUsage\n\nSimple usage\n\nNavigate to a destination address from current location.\n\nNavigate to a destination with specified start location\n\nNavigate using latitude/longitude coordinates\n\nAdvanced usage\n\nNavigate using a specific app\n\nList all of the apps supported by the current platform\n\nList apps available on the current device\n\nSupported parameters\n\nTransport modes\n\nModule API\n\nConstants\n\nPLATFORM\n\nAPP\n\nAPP_NAMES\n\nTRANSPORT_MODE\n\nLAUNCH_MODE\n\nAPI methods\n\nnavigate()\n\nParameters\n\nReturns\n\nisAppAvailable()\n\nParameters\n\nReturns\n\ngetAvailableApps()\n\nReturns\n\ngetAppDisplayName()\n\nParameters\n\nReturns\n\ngetAppsForPlatform()\n\nParameters\n\nReturns\n\nsupportsTransportMode()\n\nParameters\n\nReturns\n\ngetTransportModes()\n\nParameters\n\nReturns\n\nsupportsDestName()\n\nParameters\n\nReturns\n\nsupportsStart()\n\nParameters\n\nReturns\n\nsupportsStartName()\n\nParameters\n\nReturns\n\nsupportsLaunchMode()\n\nParameters\n\nReturns\n\nenableDebug()\n\nParameters\n\nsetGoogleApiKey()\n\nParameters\n\nExample project\n\nPlatform-specifics\n\nAndroid\n\nGoogle API key for Android\n\ngeo: URI scheme\n\nGoogle Maps launch modes\n\niOS\n\n\"Removing\" Apple Maps\n\nApple Maps launch modes\n\nURI scheme launch method\n\nMapKit class launch method\n\nApp-specifics\n\nLyft\n\n99 Taxi\n\nReporting issues\n\nLicense\n\nGeneral concepts\n\nApp detection, selection and launching\n\nThe module will detect which supported navigation apps are available on the device.\n\nThe API allows you to programmatically:\n\ncheck which apps are available on the current device\n\ncheck which apps support which navigation options\n\nlaunch a specific app for navigation\n\nGeocoding and input format of start/destination locations\n\nSome navigation apps require that destination/start locations be specified as coordinates, and others require an address.\n\nSee App location support type wiki page for details of which apps support which location types.\n\nBy default, this module will appropriately geocode or reverse-geocode the locations you provide to ensure the app receives the location in the required format.\n\nHowever, geocoding requires use of a remote service, so an internet connection is required.\n\nIf navigate() is passed a location type which the selected app doesn't support, the error callback will be invoked if:\n\ngeocoding is disabled by passing enableGeocoding: false in the options object\n\nthere is no internet connection to perform the remote geocode operation\n\ngeocoding fails (e.g. an address cannot be found for the given lat/long coords)\n\nSupported navigation apps\n\nThe module currently supports launching the following navigation apps:\n\nAndroid\n\nGoogle Maps\n\nWaze\n\nCitymapper\n\nUber\n\nYandex Navigator\n\nSygic\n\nHERE Maps\n\nMoovit\n\nLyft\n\nMAPS.ME\n\nCabify\n\n99 Taxi\n\nBaidu Maps\n\nGaode\n\nAny installed app that supports the geo: URI scheme\n\niOS\n\nApple Maps\n\nGoogle Maps\n\nWaze\n\nCitymapper\n\nGarmin Navigon\n\nTransit App\n\nYandex Navigator\n\nUber\n\nTomtom\n\nSygic\n\nHERE Maps\n\nMoovit\n\nLyft\n\nMAPS.ME\n\nCabify\n\n99 Taxi\n\nBaidu Maps\n\nGaode\n\nAdding support for more apps\n\nThis module is a work in progress. I'd like it to support launching of as many popular navigation apps as possible.\n\nIf there's another navigation app which you think should be explicitly supported and it provides a mechanism to externally launch it, open an issue containing a link or details of how the app should be invoked.\n\nDon't just open an issue saying \"Add support for Blah\" without first finding out if/how it can be externally launched. I don't have time to research launch mechanisms for every suggested app, so I will close such issues immediately.\n\nnpm install --save react-native-launch-navigator\n\nFor iOS only:\n\ncd ios && pod install\n\nAdd iOS URL schemes\n\nOn iOS, for each installed navigation app you want your app to be able to launch, you must manually whitelist its custom URL scheme in your app's Info.plist. Note: this is required since React Native v0.60 added autolinking and removed support for postlink hook scripts which made it possible to automate this step.\n\nAdd the URL schemes for the navigation apps you want to support to the LSApplicationQueriesSchemes key in your Info.plist:\n\nApp Scheme City Mapper citymapper Google Maps comgooglemaps Garmin Navigon navigon Transit App transit Waze waze Yandex Navigator yandexnavi Uber uber Tomtom tomtomhome Sygic com.sygic.aura HERE Maps here-route Moovit moovit Lyft lyft MAPS.ME mapsme Cabify cabify Baidu Maps baidumap 99 Taxi taxis99 Gadode iosamap\n\nThe full list of URL schemes above can be found in the example project's Info.plist.\n\nImport the module into your app:\n\nimport LaunchNavigator from 'react-native-launch-navigator';\n\nSimple usage\n\nOn Android, don't forget to set your Google API key:\n\nif(Platform.OS === \"android\") LaunchNavigator.setGoogleApiKey(\"your_api_key\");\n\nNavigate to a destination address from current location.\n\nUses default OS navigation app (Google Maps on Android / Apple Maps on iOS).\n\nLaunchNavigator.navigate(\"London, UK\") .then(() => console.log(\"Launched navigator\")) .catch((err) => console.error(\"Error launching navigator: \"+err));\n\nNavigate to a destination with specified start location\n\nLaunchNavigator.navigate(\"London, UK\", { start: \"Manchester, UK\" }) .then(() => console.log(\"Launched navigator\")) .catch((err) => console.error(\"Error launching navigator: \"+err));\n\nNavigate using latitude/longitude coordinates\n\nCoordinates can be specified as a string or array\n\nLaunchNavigator.navigate([50.279306, -5.163158], { start: \"50.342847, -4.749904\" }) .then(() => console.log(\"Launched navigator\")) .catch((err) => console.error(\"Error launching navigator: \"+err));\n\nAdvanced usage\n\nNavigate using a specific app\n\nlet app = null; LaunchNavigator.isAppAvailable(LaunchNavigator.APP.WAZE).then((isWazeAvailable) => { if(isWazeAvailable){ app = LaunchNavigator.APP.WAZE; }else{ console.warn(\"Waze not available - falling back to default navigation app\"); } LaunchNavigator.navigate(\"London, UK\", { app: app }); .then(() => console.log(\"Launched navigator\")) .catch((err) => console.error(\"Error launching navigator: \"+err)); });\n\nList all of the apps supported by the current platform\n\nif(Platform.OS === \"android\"){ platform = LaunchNavigator.PLATFORM.ANDROID; }else if(Platform.OS == \"ios\"){ platform = LaunchNavigator.PLATFORM.IOS; } LaunchNavigator.getAppsForPlatform(platform).forEach((app) => { console.log(LaunchNavigator.getAppDisplayName(app) + \" is supported\"); });\n\nList apps available on the current device\n\nlet apps = LaunchNavigator.getAvailableApps(); for(let app in apps){ console.log(LaunchNavigator.getAppDisplayName(app) + (apps[app] ? \" is\" : \" isn't\") +\" available\"); }\n\nSupported parameters\n\nDifferent apps support different input parameters on different platforms. Any input parameters not supported by a specified app will be ignored.\n\nThe following table enumerates which apps support which parameters.\n\nPlatform App Dest Dest name Start Start name Transport mode Free Android Google Maps (Map mode) X X X Android Google Maps (Turn-by-turn mode) X X X Android Waze X X Android CityMapper X X X X X Android Uber X X X X X Android Yandex X X X Android Sygic X X X Android HERE Maps X X X X X Android Moovit X X X X X Android Lyft X X X Android MAPS.ME X X X X Android Geo: URI scheme X X N/A Android Cabify X X X X X Android Baidu Maps X X[1] X X[1] X X Android 99 Taxi X X X X X Android Gaode Maps X X X X X X iOS Apple Maps - URI scheme X X X X iOS Apple Maps - MapKit class X X X X X X iOS Google Maps X X X X iOS Waze X X iOS Citymapper X X X X X iOS Navigon X X iOS Transit App X X X iOS Yandex X X X iOS Uber X X X X iOS Tomtom X X iOS Sygic X X X iOS HERE Maps X X X X X iOS Moovit X X X X X iOS Lyft X X X iOS MAPS.ME X X X X iOS Cabify X X X X X iOS Baidu Maps X X[1] X X[1] X X iOS 99 Taxi X X X X X iOS Gaode Maps X X X X X X\n\n[1]: Only supported when Start or Dest is specified as lat/lon (e.g. \"50,-4\")\n\nTable columns:\n\nDest - destination location specified as lat/lon (e.g. \"50,-4\") or address (e.g. \"London\")\n\nDest name - nickname for destination location (e.g. \"Bob's house\")\n\nStart - start location specified as lat/lon (e.g. \"50,-4\") or address (e.g. \"London\")\n\nStart name - nickname for start location (e.g. \"Bob's house\")\n\nTransport mode - mode of transport to use for route planning (e.g. \"walking\")\n\nFree - is the app free or does it cost money?\n\nTransport modes\n\nApps that support specifying transport mode.\n\nPlatform App Driving Walking Bicycling Transit Android Google Maps (Turn-by-turn mode) X X X X Android Sygic X X Android MAPS.ME X X X X Android Baidu Maps X X X X Android Gaode Maps X X X X iOS Apple Maps X X iOS Google Maps X X X X iOS Sygic X X iOS MAPS.ME X X X X iOS Baidu Maps X X X X iOS Gaode Maps X X X X\n\nModule API\n\nAll of the module constants and functions should be referenced from the namespace used to import the module, for example:\n\nimport LaunchNavigator from 'react-native-launch-navigator'; let android = LaunchNavigator.PLATFORM.ANDROID;\n\nSupported platforms:\n\nLaunchNavigator.PLATFORM.ANDROID\n\nLaunchNavigator.PLATFORM.IOS\n\nSupported apps:\n\nLaunchNavigator.APP.GEO (Android) - invokes a native chooser, allowing users to select an app which supports the geo: URI scheme for navigation\n\nLaunchNavigator.APP.GOOGLE_MAPS (Android & iOS)\n\nLaunchNavigator.APP.WAZE (Android & iOS)\n\nLaunchNavigator.APP.CITYMAPPER (Android & iOS)\n\nLaunchNavigator.APP.UBER (Android & iOS)\n\nLaunchNavigator.APP.APPLE_MAPS (iOS)\n\nLaunchNavigator.APP.NAVIGON (iOS)\n\nLaunchNavigator.APP.TRANSIT_APP (iOS)\n\nLaunchNavigator.APP.YANDEX (Android & iOS)\n\nLaunchNavigator.APP.TOMTOM (iOS)\n\nLaunchNavigator.APP.SYGIC (Android & iOS)\n\nLaunchNavigator.APP.HERE_MAPS (Android & iOS)\n\nLaunchNavigator.APP.MOOVIT (Android & iOS)\n\nLaunchNavigator.APP.LYFT (Android & iOS)\n\nLaunchNavigator.APP.MAPS_ME (Android & iOS)\n\nLaunchNavigator.APP.CABIFY (Android & iOS)\n\nLaunchNavigator.APP.BAIDU (Android & iOS)\n\nLaunchNavigator.APP.TAXIS_99 (Android & iOS)\n\nLaunchNavigator.APP.GAODE (Android & iOS)\n\nAPP_NAMES\n\nDisplay names for supported apps, referenced by LaunchNavigator.APP.\n\ne.g. LaunchNavigator.APP_NAMES[LaunchNavigator.APP.GOOGLE_MAPS] == \"Google Maps\" x\n\nTRANSPORT_MODE\n\nTransport modes for navigation:\n\nLaunchNavigator.TRANSPORT_MODE.DRIVING\n\nLaunchNavigator.TRANSPORT_MODE.WALKING\n\nLaunchNavigator.TRANSPORT_MODE.BICYCLING\n\nLaunchNavigator.TRANSPORT_MODE.TRANSIT\n\nLAUNCH_MODE\n\nLaunch modes supported by Google Maps on Android (see Google Maps launch modes):\n\nLaunchNavigator.LAUNCH_MODE.MAPS - Maps view\n\nLaunchNavigator.LAUNCH_MODE.TURN_BY_TURN - Navigation view\n\nLaunchNavigator.LAUNCH_MODE.GEO - Navigation view via geo: URI scheme\n\nLaunch modes supported by Apple Maps on iOS (see Apple Maps launch modes:\n\nLaunchNavigator.LAUNCH_MODE.URI_SCHEME: use the URI scheme launch method. Default if not specified.\n\nLaunchNavigator.LAUNCH_MODE.MAPKIT: use the MapKit class launch method.\n\nAPI methods\n\nLaunches a navigation app with a specified destination.\n\nLaunchNavigator.navigate(destination, options);\n\ndestination (required): destination location to use for navigation. Either:\n\na {string} containing the address. e.g. \"Buckingham Palace, London\"\n\na {string} containing a latitude/longitude coordinate. e.g. \"50.1. -4.0\"\n\nan {array} where the first element is the latitude and the second element is a longitude, as decimal numbers. e.g. [50.1, -4.0]\n\noptions - optional parameters:\n\n{string} app - name of the navigation app to use for directions.\n\nSpecify using LaunchNavigator.APP constants. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\nIf not specified, defaults to the platform default maps app (Google Maps for Android/Apple Maps for iOS).\n\nNote: this module does not currently implement an out-of-the-box picker UI so it's up to the app developer to implement a UI with which the user can specify which available navigation app they want to use.\n\n{string} destinationName - nickname to display in app for destination. e.g. \"Bob's House\".\n\nstart (optional): start location to use for navigation. If not specified, the current device location will be used. Either:\n\na {string} containing the address. e.g. \"Buckingham Palace, London\"\n\na {string} containing a latitude/longitude coordinate. e.g. \"50.1. -4.0\"\n\nan {array} where the first element is the latitude and the second element is a longitude, as decimal numbers. e.g. [50.1, -4.0]\n\n{string} startName - nickname to display in app for start. e.g. \"My Place\".\n\n{string} transportMode - transportation mode for navigation.\n\nDefaults to \"driving\" if not specified.\n\nSpecify using LaunchNavigator.TRANSPORT_MODE constants.\n\n{string} launchMode - mode in which to open default navigation app for platform: - Android: mode in which to open Google Maps app - LaunchNavigator.LAUNCH_MODE.MAPS or LaunchNavigator.LAUNCH_MODE.TURN_BY_TURN - Defaults to LaunchNavigator.LAUNCH_MODE.MAPS if not specified. - iOS: method to use to open Apple Maps app - LaunchNavigator.LAUNCH_MODE.URI_SCHEME or LaunchNavigator.LAUNCH_MODE.MAPKIT - Defaults to LaunchNavigator.LAUNCH_MODE.URI_SCHEME if not specified.\n\n{object} extras - a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: {\"t\": \"k\"}\n\nThese will be appended to the URL used to invoke the app, e.g. google_maps://?t=k&...\n\nSee Supported app URL scheme documentation wiki page for links to find app-specific parameters.\n\n{boolean} enableGeocoding - if true, and input location type(s) doesn't match those required by the app, use geocoding to obtain the address/coords as required. Defaults to true.\n\n{Promise}\n\nresolved when the navigation app is successfully launched.\n\nrejected if an error is occurred. Rejected with args:\n\n{string} - error message\n\nDetermines if the given app is installed and available on the current device.\n\nlet app = LaunchNavigator.APP.WAZE; LaunchNavigator.isAppAvailable(app) .then((isAvailable) => { console.log(LaunchNavigator.getAppDisplayName(app)+\" is available: \"+isAvailable); }) .catch((error) => { console.error(error); });\n\n{string} appName - name of the app to check availability for. Define as a constant using LaunchNavigator.APP.\n\n{Promise}\n\nresolved with:\n\n{boolean} - indicates the availability of the specified app.\n\nrejected if an error is occurred. Rejected with args:\n\n{string} - error message\n\nReturns a list indicating which apps are installed and available on the current device for the current platform.\n\nLaunchNavigator.getAvailableApps() .then((apps) => { for(let app in apps){ console.log(LaunchNavigator.getAppDisplayName(app)+\" is \"+(apps[app] ? \"available\" : \"unavailable\")); } }) .catch((error) => { console.error(error); });\n\n{Promise}\n\nresolved with:\n\n{object} - a key/value object where the key is the app name as a constant in LaunchNavigator.APP and the value is a boolean indicating whether the app is available.\n\nrejected if an error is occurred. Rejected with args:\n\n{string} - error message\n\nReturns the display name of the specified app.\n\nlet name = LaunchNavigator.getAppDisplayName(LaunchNavigator.APP.WAZE);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} - app display name. e.g. \"Google Maps\".\n\nReturns list of supported apps on a given platform.\n\nlet apps = LaunchNavigator.getAppsForPlatform(platform);\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{array} - apps supported on specified platform as a list of LaunchNavigator.APP constants.\n\nIndicates if an app on a given platform supports specification of transport mode.\n\nlet isSupported = LaunchNavigator.supportsTransportMode(app, platform, launchMode);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{string} launchMode - (optional) Only applies to Google Maps on Android. Specified as a constant in LaunchNavigator.LAUNCH_MODE. e.g. LaunchNavigator.LAUNCH_MODE.MAPS.\n\n{boolean} - true if app/platform(/launch mode) combination supports specification of transport mode.\n\nReturns the list of transport modes supported by an app on a given platform.\n\nlet transportModes = LaunchNavigator.getTransportModes(app, platform, launchMode);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{string} launchMode - (optional) Only applies to Google Maps on Android. Specified as a constant in LaunchNavigator.LAUNCH_MODE. e.g. LaunchNavigator.LAUNCH_MODE.MAPS.\n\n{boolean} - {array} - list of transports modes as constants in LaunchNavigator.TRANSPORT_MODE. If app/platform(/launch mode) combination doesn't support specification of transport mode, the list will be empty;\n\nIndicates if an app on a given platform supports specification of a custom nickname for destination location.\n\nlet isSupported = LaunchNavigator.supportsDestName(app, platform, launchMode);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{string} launchMode - (optional) Applies to Google Maps on Android and Apple Maps on iOS. Specified as a constant in LaunchNavigator.LAUNCH_MODE. e.g. LaunchNavigator.LAUNCH_MODE.MAPS.\n\n{boolean} - true if app/platform(/launch mode) combination supports specification of a custom nickname for destination location.\n\nIndicates if an app on a given platform supports specification of start location.\n\nlet isSupported = LaunchNavigator.supportsStart(app, platform, launchMode);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{string} launchMode - (optional) Only applies to Google Maps on Android. Specified as a constant in LaunchNavigator.LAUNCH_MODE. e.g. LaunchNavigator.LAUNCH_MODE.MAPS.\n\n{boolean} - true if app/platform(/launch mode) combination supports specification of start location.\n\nIndicates if an app on a given platform supports specification of a custom nickname for start location.\n\nlet isSupported = LaunchNavigator.supportsStartName(app, platform, launchMode);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.IOS.\n\n{string} launchMode - (optional) Only applies to Apple Maps on iOS. Specified as a constant in LaunchNavigator.LAUNCH_MODE. e.g. LaunchNavigator.LAUNCH_MODE.MAPKIT.\n\n{boolean} - true if app/platform(/launch mode) combination supports specification of a custom nickname for start location.\n\nIndicates if an app on a given platform supports specification of launch mode.\n\nCurrently only Google Maps on Android and Apple Maps on iOS supports this.\n\nlet isSupported = LaunchNavigator.supportsLaunchMode(app, platform);\n\n{string} app - specified as a constant in LaunchNavigator.APP. e.g. LaunchNavigator.APP.GOOGLE_MAPS.\n\n{string} platform - specified as a constant in LaunchNavigator.PLATFORM. e.g. LaunchNavigator.PLATFORM.ANDROID.\n\n{boolean} - true if app/platform combination supports specification of launch mode.\n\nEnables debug log output from the module to the JS and native consoles. By default debug is disabled.\n\nLaunchNavigator.enableDebug(true);\n\n{boolean} enabled - Whether to enable debug.\n\nEnables specification of the Google API key to use for accessing Google's Geocoding API. If you fail to set this on Android before attempting to use this module to launch a navigation app which requires a lat/lon coordinates as input, the module will raise an error if the input location is an address because it requires geocoding to a lat/lon coordinate. See Google API key for Android for more information.\n\nAndroid only. Calling on iOS will have no effect.\n\nLaunchNavigator.setGoogleApiKey(\"your_api_key\");\n\n{boolean} enabled - Whether to enable debug.\n\nExample project\n\nThe example project can be used to build and run a React Native app for Android & iOS:\n\nhttps://github.com/dpa99c/react-native-launch-navigator-example\n\nIt demonstrates how this module can be used and validates its functionality.\n\nGoogle API key for Android\n\nOn Android, this module uses Google's Geocoding API to geocode input addresses to lat/lon coordinates in order to support navigation apps which only allow input locations to be specified as lat/lon coordinates.\n\nGoogle now requires that an API key be specified in order to use the Geocoding API, so you'll need to obtain an API key and specify it via setGoogleApiKey().\n\nFor more information on how to obtain an API key, see the Google documentation.\n\ngeo: URI scheme\n\nRunning on Android, in addition to discovering which explicitly supported apps are installed, the module will also detect which installed apps support using the geo: URI scheme for use in navigation. These are returned in the list of available apps.\n\nBy specifying the app option as LaunchNavigator.APP.GEO, the module will invoke a native Android chooser, to allow the user to select an app which supports the geo: URI scheme for navigation.\n\nGoogle Maps launch modes\n\nGoogle Maps on Android can be launched using 3 launch modes by specifying the launchMode option as a LaunchNavigator.LAUNCH_MODE constant to navigate():\n\nMaps mode (LaunchNavigator.LAUNCH_MODE.MAPS) - launches in Map view. Enables start location to be specified, but not transport mode or destination name. Default if not specified.\n\nTurn-by-turn mode (LaunchNavigator.LAUNCH_MODE.TURN_BY_TURN) - launches in Navigation view. Enables transport mode to be specified, but not start location or destination name.\n\nGeo mode (LaunchNavigator.LAUNCH_MODE.GEO) - invokes Navigation view via geo: URI scheme. Enables destination name to be specified, but not start location or transport mode.\n\n\"Removing\" Apple Maps\n\nSince iOS 10, it is possible to \"remove\" built-in Apple apps, including Maps, from the Home screen.\n\nNot that removing is not the same as uninstalling - the app is still actually present on the device, just the icon is removed from the Home screen.\n\nTherefore it's not possible detect if Apple Maps is unavailable - LaunchNavigator.availableApps() will always report it as present.\n\nThe best that can be done is to gracefully handle the error when attempting to open Apple Maps using LaunchNavigator.navigate()\n\nFor reference, see this SO question and the Apple documentation.\n\nApple Maps launch modes\n\nApple Maps app on iOS can be launched using 2 launch methods by specifying the launchMode option as a LaunchNavigator.LAUNCH_MODE constant to navigate():\n\nLaunchNavigator.LAUNCH_MODE.URI_SCHEME: use the URI scheme launch method. Default if not specified.\n\nLaunchNavigator.LAUNCH_MODE.MAPKIT: use the MapKit class launch method.\n\nURI scheme launch method\n\nLaunches the app using the Apple Maps URI scheme\n\nThe default method used by the module.\n\nSupports input location types of both coordinates and address string without requiring remote geocoding service (works offline)\n\nDoesn't support specifying nicknames for start/destination locations.\n\nMapKit class launch method\n\nLaunches the app using the MapKit class to launch Apple Maps\n\nOnly supports input location type of coordinates without requiring remote geocoding service (works offline)\n\nAn input location type of an address (formatted as a single string) requires use of remote geocoding service (requires internet connection)\n\nMapKit class input requires an address which is formatted as an address dictionary, in which the address is split into known fields such as street, city and state.\n\nSupport specifying nicknames for start/destination locations.\n\nProvides additional launch options which are not available via the URI scheme launch method.\n\nOn both Android and iOS, the \"ride type\" will default to \"Lyft\" unless otherwise specified in the extras list as id.\n\nSee the Lyft documentation for URL scheme details and other supported ride types.\n\n99 Taxi\n\nOn both Android and iOS, the extra parameters client_id and deep_link_product_id are required by 99 Taxi\n\nclient_id should follow the pattern MAP_*** where *** is the client name given by the 99 Team.\n\nIf not specified defaults to client_id=MAP_123\n\ndeep_link_product_id identifies the ride category\n\nCurrently supported values are:\n\n316 - POP ride\n\n326 - TOP ride\n\n327 - Taxis ride\n\nIf not specified defaults to deep_link_product_id=316\n\nOn Android, 99 Taxi is currently the only app where options.start is a required parameter when calling navigate()\n\nIf navigate() is called without a start location and the selected app is 99 Taxi, the error callback will be invoked and the 99 Taxi app will not be launched\n\nIn order for this module to automatically provide start location to 99 Taxi (if it's not already specified), the native Android implementation needs to be enhanced to:\n\ncheck/request runtime permission to use location\n\nadd the necessary permission entries to the AndroidManifest.xml\n\ncheck/request high accuracy location is enabled (no point in requesting a low-accuracy city-level position if you want a pickup at your exact current address)\n\nrequest a high accuracy position to determine the user's current location\n\nhandle errors cases such as:\n\nUser denies location permission\n\nUser denies high accuracy mode permission\n\nLocation cannot be retrieved\n\nCurrently, I don't have time to do all of the above just for the case of 99 Taxi\n\nHowever I'm willing to accept a PR request which implements the necessary native Android features.\n\nOtherwise/until then, you'll need to manually specify the start location for 99 Taxi\n\nReporting issues\n\nBefore reporting issues with this module, please first do the following:\n\nCheck the existing lists of open issues and closed issues\n\nAlso check the list of issues for this module's sister Cordova plugin as it's been around longer and native issues apply equally to this React Native module.\n\nCheck your target country is supported for turn-by-turn by the native navigation app\n\nApple Maps country list for iOS\n\nGoogle Maps country list for Android\n\nIf possible, test using the example project to eliminate the possibility of a bug in your code rather than the module.\n\nWhen reporting issues, please give the following information:\n\nA clear description of the problem\n\nOS version(s) and device (or emulator) model(s) on which the problem was observed\n\nCode example of calling the module which results in the observed issue\n\nExample parameters (locations or place names) which results in the observed issue\n\nIssues which fail to give a clear description of the problem as described above will be closed immediately\n\nThe MIT License\n\nCopyright (c) 2018 Dave Alden (Working Edge Ltd.)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    }
}