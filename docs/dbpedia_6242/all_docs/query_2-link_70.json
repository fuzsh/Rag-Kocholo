{
    "id": "dbpedia_6242_2",
    "rank": 70,
    "data": {
        "url": "https://livebook.manning.com/book/rust-in-action/chapter-8/v-16/",
        "read_more_link": "",
        "language": "en",
        "title": "8 Networking · Rust in Action: Systems programming concepts and techniques",
        "top_image": "https://drek4537l1klr.cloudfront.net/mcnamara/Figures/cover.jpg",
        "meta_img": "https://drek4537l1klr.cloudfront.net/mcnamara/Figures/cover.jpg",
        "images": [
            "https://drek4537l1klr.cloudfront.net/mcnamara/v-16/Figures/ch8-chapter-map.png",
            "https://www.facebook.com/tr?id=1940497162877014&ev=PageView&noscript=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://d19npu3b8zepp3.cloudfront.net/assets/images/favicon.png?v=1",
        "meta_site_name": "",
        "canonical_link": "https://livebook.manning.com/book/rust-in-action/chapter-8/v-16",
        "text": "8 Networking\n\nThis chapter implements making HTTP requests multiple times, stripping away a layer of abstraction each time. We start by using a user-friendly library, then boil that away until we’re left with manipulating raw TCP packets. Impress your friends with your ability to distinguish an IP address from a MAC address. And learn why we went straight from IPv4 to IPv6.\n\nYou’ll also be learning lots of Rust in this chapter, most of it related to advanced error handling techniques which become essential for incorporating upstream crates. Several pages are devoted to error handling. This includes a thorough introduction to trait objects.\n\nNetworking is a difficult subject to cover in a single chapter. Each layer is a fractal of complexity. Networking experts will hopefully be kind of my lack of depth in my treatment of their topic of interest!\n\nFigure 8.1 provides an overview of the topics that the chapter covers. Some of the projects that we cover include implementing DNS resolution, generating standards-compliant MAC addresses and multiple examples of generating HTTP requests.. A hint of a role-playing game is added for light relief.\n\nFigure 8.1. Networking chapter map. The chapter incorporates a healthy mix of theory and practical exercises.\n\n8.1 Just enough HTTP\n\n8.2 Generating an HTTP GET request with reqwest\n\n8.3 Trait Objects\n\n8.3.1 What do trait objects enable?\n\n8.3.2 What is a trait object?\n\n8.3.3 Creating a tiny role-playing game\n\n8.4 TCP\n\n8.4.1 What is a “port number”?\n\n8.4.2 Converting a hostname to an IP address\n\n8.5 Ergonomic Error Handling for Libraries\n\n8.5.1 Issue: unable to return multiple error types\n\n8.5.2 Wrapping downstream errors by defining our own error type\n\n8.5.3 Cheat with unwrap() and expect()\n\n8.6 MAC addresses\n\n8.6.1 Generating MAC addresses\n\n8.7 Implementing state machines with Rust’s enums\n\n8.8 Raw TCP\n\n8.9 Creating a virtual networking device\n\n8.10 “Raw” HTTP"
    }
}