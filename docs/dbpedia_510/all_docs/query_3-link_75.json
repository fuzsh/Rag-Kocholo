{
    "id": "dbpedia_510_3",
    "rank": 75,
    "data": {
        "url": "https://github.com/com-lihaoyi/mill",
        "read_more_link": "",
        "language": "en",
        "title": "lihaoyi/mill: Mill is a fast JVM build tool that supports Java and Scala. Mill aims to make your project’s build process performant, maintainable, and flexible",
        "top_image": "https://opengraph.githubassets.com/e48c4106af713fa3e1c99f4e1c355940077019409b364b59617d42d0d3745b61/com-lihaoyi/mill",
        "meta_img": "https://opengraph.githubassets.com/e48c4106af713fa3e1c99f4e1c355940077019409b364b59617d42d0d3745b61/com-lihaoyi/mill",
        "images": [
            "https://github.com/com-lihaoyi/mill/raw/main/docs/logo.svg",
            "https://github.com/com-lihaoyi/mill/actions/workflows/actions.yml/badge.svg",
            "https://camo.githubusercontent.com/2da7039d862cabe847953554272000b86e80b158a0723c9a832720b935df3f43/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667",
            "https://camo.githubusercontent.com/7d1e4c830d3c190ecd4bea7ec3e9f2892612ad4b1379ed2b3095fbc7820a2676/68747470733a2f2f696e6465782e7363616c612d6c616e672e6f72672f636f6d2d6c6968616f79692f6d696c6c2f6d696c6c2d6d61696e2f6c61746573742e737667",
            "https://camo.githubusercontent.com/0b0a7608ce44450ac1312d8373cdab160caf62a0bdb3185b1f62cf29690eef66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617472656f6e2d73706f6e736f722d6666363962342e737667",
            "https://avatars.githubusercontent.com/u/1321393?s=64&v=4",
            "https://avatars.githubusercontent.com/u/934140?s=64&v=4",
            "https://avatars.githubusercontent.com/u/43047562?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5793054?s=64&v=4",
            "https://avatars.githubusercontent.com/u/35768070?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1951244?s=64&v=4",
            "https://avatars.githubusercontent.com/u/22979?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1200478?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4130340?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3280689?s=64&v=4",
            "https://avatars.githubusercontent.com/u/12010694?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4439335?s=64&v=4",
            "https://avatars.githubusercontent.com/u/13974112?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1515832?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "com-lihaoyi"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Mill is a fast JVM build tool that supports Java and Scala. Mill aims to make your project’s build process performant, maintainable, and flexible - com-lihaoyi/mill",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/com-lihaoyi/mill",
        "text": "If you want to use Mill in your own projects, check out our documentation:\n\nHere is some quick example, so that you can imagine how it looks:\n\nimport mill._, scalalib._ object foo extends ScalaModule { def scalaVersion = \"3.3.4\" } object bar extends ScalaModule { def moduleDeps = Seq(foo) def scalaVersion = \"3.3.4\" }\n\nIf you use Mill and like it, you will probably enjoy the following book by the Author:\n\nThe remainder of this readme is developer-documentation targeted at people who wish to work on Mill’s own codebase. The developer docs assume you have read through the user-facing documentation linked above. It’s also worth spending a few minutes reading the following blog posts to get a sense of Mill’s design & motivation:\n\nMill is profiled using the JProfiler Java Profiler, by courtesy of EJ Technologies.\n\nMill is built using Mill. To begin, you just need a JVM installed, and the ./mill script will be sufficient to bootstrap the project.\n\nIntelliJ Setup\n\nIf you are using IntelliJ IDEA to edit Mill’s Scala code, you can create the IntelliJ project files via:\n\n./mill -j 0 mill.idea.GenIdea/idea\n\nManual & Automated Testing\n\nThe following table contains the main ways you can test the code in com-lihaoyi/mill, via manual testing or automated tests:\n\nIn-Process Tests\n\nIn-process tests live in the .test sub-modules of the various Mill modules. These range from tiny unit tests, to larger integration tests that instantiate a mill.testkit.BaseModule in-process and a UnitTester to evaluate tasks on it.\n\nMost \"core\" tests live in main.__test; these should run almost instantly, and cover most of Mill’s functionality that is not specific to Scala/Scala.js/etc.. Tests specific to Scala/Scala.js/Scala-Native live in scalalib.test/scalajslib.test/scalanativelib.test respectively, and take a lot longer to run because running them involves actually compiling Scala code.\n\nThe various contrib modules also have tests in this style, e.g. contrib.buildinfo.test\n\nNote that the in-memory tests compile the BaseModule together with the test suite, and do not exercise the Mill script-file bootstrapping, transformation, and compilation process.\n\nSub-Process Tests without Packaging/Publishing\n\nexample.__.local and integration.__.local tests run Mill end-to-end in a subprocess, but without the expensive/slow steps of packaging the core packages into an assembly jar and publishing the remaining packages to ~/.ivy2/local. You can reproduce these tests manually using ./mill dist.run <test-folder-path> <command>.\n\nexample tests are written in a single build.sc file, with the test commands written in a comment with a bash-like syntax together with the build code and comments that explain the example. These serve three purposes:\n\nBasic smoke-tests to make sure the functionality works at all, without covering every edge case\n\nUser-facing documentation, with the test cases, test commands, and explanatory comments included in the Mill documentation site\n\nExample repositories, that Mill users can download to bootstrap their own projects\n\nThe integration tests are similar to example tests and share most of their test infrastructure, but with differences:\n\nintegration tests are meant to test features more thoroughly then example tests, covering more and deeper edge cases even at the expense of readability\n\nintegration tests are written using a Scala test suite extending IntegrationTestSuite, giving more flexibility at the expense of readability\n\nYou can reproduce any of the tests manually using dist.run, e.g.\n\nAutomated Test\n\n./mill \"example.basic[1-simple].local\"\n\nManual Test\n\n./mill dist.run example/basic/1-simple run --text hello\n\nManual Test using Launcher Script\n\n./mill dist.launcher && (cd example/basic/1-simple && ../../../out/dist/launcher.dest/run run --text hello)\n\nSub-Process Tests with Packaging/Publishing\n\nexample.__.server, integration.__.server, example.__.fork and integration.__.fork cover the same test cases as the .local tests described above, but they perform packaging of the Mill core modules into an assembly jar, and publish the remaining modules to ~/.ivy2/local. This results in a more realistic test environment, but at the cost of taking tens-of-seconds more to run a test after making a code change.\n\nYou can reproduce these tests manually using dist.assembly:\n\n./mill dist.assembly && (cd example/basic/1-simple && ../../../out/dist/assembly.dest/mill run --text hello)\n\nThere are two flavors of these tests:\n\n.server test run the test cases with the default configuration, so consecutive commands run in the same long-lived background server process\n\n.fork test run the test cases with --no-server, meaning each command runs in a newly spawned Mill process\n\nIn general you should spend most of your time working with the .local version of the example and integration tests to save time, and only run .fork or .server once .local is passing.\n\nBootstrapping: Building Mill with your current checkout of Mill\n\nTo test bootstrapping of Mill’s own Mill build using a version of Mill built from your checkout, you can run\n\n./mill installLocal ci/patch-mill-bootstrap.sh\n\nThis creates a standalone assembly at target/mill-release you can use, which references jars published locally in your ~/.ivy2/local cache, and applies any necessary patches to build.sc to deal with changes in Mill between the version specified in .config/mill-version that is normally used to build Mill and the HEAD version your assembly was created from. You can then use this standalone assembly to build & re-build your current Mill checkout without worrying about stomping over compiled code that the assembly is using.\n\nThis assembly is design to work on bash, bash-like shells and Windows Cmd. If you have another default shell like zsh or fish, you probably need to invoke it with sh ~/mill-release or prepend the file with a proper shebang.\n\nIf you want to install into a different location or a different Ivy repository, you can set its optional parameters.\n\nInstall into /tmp\n\n$ ./mill installLocal --binFile /tmp/mill --ivyRepo /tmp/millRepo ... Published 44 modules and installed /tmp/mill\n\nTesting Documentation Changes\n\nFor testing documentation changes locally, you can generate documentation for the current checkout via\n\n$ ./mill docs.fastPages\n\nTo generate documentation for both the current checkout and earlier versions, you can use\n\n$ ./mill docs.localPages\n\nIn case of troubles with caching and/or incremental compilation, you can always restart from scratch removing the out directory:\n\nos.remove.all -rf out/\n\nProject Layout\n\nThe Mill project is organized roughly as follows:\n\nCore modules that are included in the main assembly\n\nrunner, main.*, scalalib, scalajslib, scalanativelib.\n\nThese are general lightweight and dependency-free: mostly configuration & wiring of a Mill build and without the heavy lifting.\n\nHeavy lifting is delegated to the worker modules (described below), which the core modules resolve from Maven Central (or from the local filesystem in dev) and load into isolated classloaders.\n\nWorker modules that are resolved from Maven Central\n\nscalalib.worker, scalajslib.worker[0.6], scalajslib.worker[1.0]\n\nThese modules are where the heavy-lifting happens, and include heavy dependencies like the Scala compiler, Scala.js optimizer, etc.. Rather than being bundled in the main assembly & classpath, these are resolved separately from Maven Central (or from the local filesystem in dev) and kept in isolated classloaders.\n\nThis allows a single Mill build to use multiple versions of e.g. the Scala.js optimizer without classpath conflicts.\n\nContrib modules\n\ncontrib/bloop/, contrib/flyway/, contrib/scoverage/, etc.\n\nThese are modules that help integrate Mill with the wide variety of different tools and utilities available in the JVM ecosystem.\n\nThese modules are not as stringently reviewed as the main Mill core/worker codebase, and are primarily maintained by their individual contributors. These are maintained as part of the primary Mill Github repo for easy testing/updating as the core Mill APIs evolve, ensuring that they are always tested and passing against the corresponding version of Mill.\n\nCompatibility & Stability\n\nMill maintains backward binary compatibility for each major version (major.minor.point), enforced with Mima, for the following packages:\n\nmill.api\n\nmill.util\n\nmill.define\n\nmill.eval\n\nmill.resolve\n\nmill.scalalib\n\nmill.scalajslib\n\nmill.scalanativelib\n\nOther packages like mill.runner, mill.bsp, etc. are on the classpath but offer no compatibility guarantees.\n\nCurrently, Mill does not offer compatibility guarantees for mill.contrib packages, although they tend to evolve slowly. This may change over time as these packages mature over time.\n\nProject Maintenance\n\nPull Requests\n\nChanges to the main branch need a pull request. Exceptions are preparation commits for releases, which are meant to be pushed with tags in one go\n\nMerged pull request (and closed issues) need to be assigned to a Milestone\n\nPull requests are typically merged via \"Squash and merge\", so we get a linear and useful history\n\nLarger pull request, where it makes sense to keep single commits, or with multiple authors may be committed via merge commits.\n\nCommit Messages\n\nThe title should be meaningful and may contain the pull request number in parentheses (typically automatically generated on GitHub)\n\nThe description should contain additional required details, which typically reflect the content of the first PR comment\n\nA full link to the pull request should be added via a line: Pull request: <link>\n\nIf the PR has multiple authors but is merged as merge commit, those authors should be included via a line for each co-author: Co-authored-by: <author>\n\nIf the message contains links to other issues or pull requests, you should use full URLs to reference them\n\n[#main] branch === main\n\nBuilds can now be modularized into per-folder definitions by defining module.sc files in subfolders #3213\n\nTurn on parallelism for task evaluation by default, except for commands which always run serially at the end #3265\n\nThis can be disabled by passing --jobs 1\n\nOverhaul the Mill client-server protocol to improve robustness #3363 #3366 #3368 #3370\n\nMill uses empty sandbox folders as the working directory for running its own code and #3367 and test suites #3347, to avoid accidental interference between tasks and tests due to parallelism\n\nThis can be disabled by adding def testSandboxWorkingDir = false in your test module\n\nMill now publishes unit, integration, and example test fixtures for writing plugins #3398 for downstream plugin authors to use in testing their own Mill extensions\n\nBump default Sonatype Maven Central publishing timeouts to 10 minutes to avoid timeouts due to slowness https://github.com/com-lihaoyi/mill/commit/b4c9386b0233fab53a312426715e226e4a7f6302\n\nImporting Mill projects into IntelliJ via BSP now properly marks the out/, .idea/, and .bsp/ folders as excluded #3329\n\nOptimizations to Mill evaluation logic to reduce fixed overhead of running Mill on large projects #3388\n\n0.11.12 - 2024-08-20\n\nChanges since 0.11.11:\n\nBump uTest to 0.8.4 #3340\n\nManage TestModule dependencies via build.sc #3320\n\nFix the warning not being printed when -i/--interactive/--no-server/--bsp are not the first argument #3346\n\nGenIdea: Make Scala SDK specific for JS / Native #3348\n\nCI: Adapt CI for 0.11.x branch #3350\n\nGenIdea: unroll module dependencies #3358\n\nPrint pretty error message when Result.Failure is thrown #3393\n\nAvoid spurious deprecation warnings in generated code #3400\n\nFor details refer to milestone 0.11.12 and the list of commits.\n\n0.11.11 - 2024-08-05\n\nWe initially tagged 0.11.11 on 2024-11-31 but never published the released due to technical issues. On 2024-08-05 we re-tagged and published 0.11.11.\n\nChanges since 0.11.10:\n\nWorkaround issue in Sonatype which started failing on double slashes in URLs (even though they previously worked) Link\n\nOverhaul of the documentation site at https://mill-build.org\n\nNew Java- and Scala-specific sections on the documentation, with more detailed comparisons to existing build tools\n\nAdded graphviz diagrams throughout to help the user in visualizing the concepts involved\n\nUpdate versions of JUnit sbt-test-interface libraries that Mill uses #3296\n\nMake it simpler to resolve dependencies in custom tasks via defaultResolver().resolveDeps #3330\n\nFor details refer to milestone 0.11.11 and the list of commits.\n\n0.11.10 - 2024-07-23\n\nChanges since 0.11.9:\n\nFixes and Improvements\n\nImprovements in Java docs and user experience #3278\n\nAutomatically pump os.proc streams when SystemStreams are redirected #3275\n\nFix resolution of children of override lazy val modules #3270\n\nFor details refer to milestone 0.11.10 and the list of commits.\n\n0.11.9 - 2024-07-18\n\nChanges since 0.11.8:\n\nNew features\n\nFirst class support for Java projects #3261\n\nFixes and Improvements\n\nAdd coarse grained lock around BSP request to avoid deadlocks #3243\n\nFor details refer to milestone 0.11.9 and the list of commits.\n\n0.11.8 - 2024-06-21\n\nChanges since 0.11.7:\n\nNew features\n\nSupport Scala Native 0.5.0 #3054 #3107 #3120\n\nAdd jvmOptions to docker contrib configuration #3079\n\nPass auxiliary class files to zinc, so they are deleted together #3072\n\nBSP: Handle new JvmCompileClasspath request #3086\n\nAdd support for Cobertura XML report task to help integration #3093\n\nSupport Scala.js minify via scalaJSMinify: Target[String] #3094\n\nRestructure TestModule, add RunModule #3064\n\nMove run-targets into RunModule #3090\n\nTestModule: Support generation of JUnit-compatible xml report #3099 #3172 #3135 #3184\n\nUse docker image hash to determine if build should rerun #3124\n\nAdd multi platform support to contrib.docker through docker buildx #3143\n\nAdd ability to re-write ESModule imports at link time #3109\n\nAdding sonatype central support #3130 #3187\n\nAdd TestModule.discoveredTestClasses target to ease test inspection #3191\n\nSupport \"pom\" packaging type in PublishModule #3222\n\nFixes and Improvements\n\nRestructure VersionFinder, increase speed, added ticker messages #3014\n\nFix bsp compile classpath inconsistencies #3017\n\nBring more bsp-specific targets in line with their non-bsp versions #3018\n\nMake BSP task processing more resilient #3022\n\nUpdate example build.sc with current library versions #3055\n\nScoverage: Do not include the scalac plugin in the reporting classpath #3060\n\nAdd Scala 2.13.13 and 2.12.19 to supported bridges list #3066\n\nFix BuildInfo static Java file generator #3074\n\nScoverage inner module defaults to skipIdea = outer.skipIdea #3098\n\nDeduplicate input tasks in inspect command #3102\n\nCI: add scalafix-check to precondition to publish #3095\n\nDocs for Continuous cache invalidation #3096\n\nIsolate scoverage modules from their parent modules #3118\n\nScoverage improve classpath override to the minimal #3122\n\nImprove internal BSP API and docs, fix a match error condition #3111\n\nRetry example integration tests that didn’t finish after 5 minutes #3125\n\nFix mill script for parameter starting with -i #3127\n\nFixed semanticdb file copying issue, added more tests #3080\n\nDetect assemblies with too many entries to fail shell script prepending #3140\n\nExclude mill provided dependencies in meta builds #3189 #3221\n\nFix Scala.js toolchain logs in server-client mode #3196\n\nFix compiler bridge build setup and build essential versions in CI #3179\n\nAdd Scala 2.13.14 to bridgeScalaVersions #3166\n\nGenIdea improvements #3153\n\nGenIdea: Use synthetic scala-SDK entry for compiler setup #3154\n\nFix classpath regression in Bloop export #1918 #3211\n\nSupport build.sc in Bloop #3208\n\nFail if testOnly does not match any test case #3224\n\nUpdates and internal changes\n\nCode cleanups\n\nDocumentation updates and fixes\n\nTest and CI improvements\n\nUpdates: acyclic 0.3.12, Ammonite 3.0.0-M2-11-713b6963, asm 9.7, commons-compress 1.26.2, commons-io 2.16.1, coursier 2.1.10, fastparse 3.1.0, fansi 0.5.0, guava 33.2.1, jarjar-abrams-core 1.14.0, jline 3.26.2, junixsocket 2.9.1, log4j-core 2.23.1, mainargs 0.7.0 mill-mima 0.1.1, mill-scalafix 0.4.0, os-lib 0.10.2, Play 2.8.22 / 2.9.4 / 3.0.4, pprint 0.9.0, protobuf-java 3.25.3, Scala 2.12.19 / 2.13.14, Scala Native 0.4.17 / 0.5.3, scala-xml 2.3.0, scalacheck 1.18.0, scalatest 3.2.18, scoverage 2.1.1, semanticdb-java 0.9.10, semanticdb-scalac 4.9.7 requests 0.8.3, upickle 3.3.1, utest 0.8.3, zinc 1.10.0\n\nFor details refer to milestone 0.11.8 and the list of commits.\n\n0.11.7 - 2024-02-05\n\nChanges since 0.11.6:\n\nNew features\n\nSupport type selectors as path selection syntax in resolve #2997, #2998\n\nRead coursier default config files to set up repositories and support mirror configuration #2886, #2917\n\nAdded support for type attribute when parsing dependencies #2994\n\nAdd new ScalaModule.scalacHelp command #2921\n\nAdd a ScalaModule.consoleScalacOptions target #2948\n\nEnable colored output for Scala 2 compiler output #2950\n\nAdd publishLocalCached and publishM2LocalCached targets to PublishModule #2976\n\nSupport Scala Native build target. This allows to build static and dynamic libraries other than binaries #2898\n\nPrepare the Scala.js integration for SIP-51 #2988\n\nFixes and Improvements\n\nBetter detect Windows Subsystem for Linux environments #2901\n\nAvoid evaluating `T.input`s twice #2952\n\nDeduplicate (anonymous) tasks in results #2959\n\nSynchronize evaluateGroupCached to avoid concurrent access to cache #2980\n\nProperly sanitize Windows reserved names and symbols in evaluator paths #2964, #2965\n\nDetect colliding cross module values #2984\n\nMask forward slashes in cross values to fix their cache locations #2986\n\nRe-enable test result summary (print done message from test framework to stdout) #2993\n\nFix overeager caching of cliImports value in generatedScriptSources #2977\n\nAllow resolving moduleDeps with older Scala 3 versions #2877\n\nGenIdea: Put module dependencies after library dependencies #2925\n\nBSP: do not filter clean-requests for meta-builds #2931\n\nBSP: Add JavaModule.bspBuildTargetData to make JavaModule reports workable BuildTarget #2930\n\nBSP: Send logMessage instead of diagnostics when textDocument is unknown #2979\n\nScoverage inner module defaults new to skipIdea = true #2989\n\nUpdates and internal changes\n\nDependency updates: asm-tree 9.6, bsp4j 2.2.0-M1, coursier 2.1.8, jline 3.25.0, jna 5.14.0, junixsocket-core 2.8.3, log4j-core 2.22.1, mainargs 0.6.1, os-lib 0.9.3, scalafmt 3.7.15, Scala.js 1.15.0, scala-native 8.4.16, semanticdb-java 0.9.8, semanticdb-scala 4.8.15, upickle 3.1.4, zinc 1.9.6\n\nContrib dependency updates: Play 2.8.21, Play 2.9.1, Play 3.0.1\n\nDocumentation updates and new sections\n\nMore code cleanups, explicit result types and enforcement of some code quality metrics via mill-scalafix\n\nFor details refer to milestone 0.11.7 and the list of commits.\n\n0.11.6 - 2023-11-21\n\nChanges since 0.11.5:\n\nMake PathRef robust against concurrent filesyste modifications #2832\n\nUse logger error stream for informational messages #2839\n\nHarden assembly logic against Zip-Slip vulnerabilities #2847\n\nAdd an option to disable incremental compilation with zinc #2851\n\nAdd check for right Tests traits in ScalaJS and Native #2874\n\nAttempt to recover from client/server connection errors to #2879\n\nFix discovery of targets whose names get mangled #2883\n\nMake mill show skip -j prefixes to ensure machine readability #2884\n\nFor details refer to milestone 0.11.6 and the list of commits.\n\n0.11.5 - 2023-10-04\n\nChanges since 0.11.4:\n\nSupport for Java 21 #2768\n\nVarious BSP improvements #2814, #2813, #2810, #2771\n\nThe T.workspace context path now always points to the top-level project directory, also for meta builds #2809\n\nMill now better detects and reports logical cycles in inter-module dependencies #2790\n\nFixed semanticDB data generation for meta builds #2809\n\nThe prepareOffline command also fetches relevant compiler-bridges for Scala modules #2791\n\nImproved ScalaJSModule and added support for IRFileCache #2783\n\nThe JavaModule.zincReportCachedProblems configuration can now also customized via a Java system property #2775\n\nFixed a file truncation issue in protobuf module and print a warning when proto file get overwritten #2800\n\nDocumentation improvements\n\nDependency updates: bsp4j 2.1.0-M7, castor 0.3.0, coursier-interface 1.0.19, jarjarabrams 1.9.0, jline 3.23.0, junitsocket 2.8.1, mainargs 0.5.4, scalafmt 3.7.14, Scala.js 1.14.0, semanticdb-java 0.9.6, semanticdb-scala 4.8.10\n\nVarious other improvements and cleanups\n\nFor details refer to milestone 0.11.5 and the list of commits.\n\n0.11.4 - 2023-09-19\n\nChanges since 0.11.3:\n\nFix binary incompatibility issue with Discover macro’s generated generic code #2749\n\nSupport the release-size mode in ScalaNativeModule #2754\n\nFor details refer to milestone 0.11.4 and the list of commits.\n\n0.11.3 - 2023-09-17\n\nChanges since 0.11.2:\n\nAllow Mill CLI to select the meta-build frame it operates on via --meta-level <n> #2719\n\nImprove the mill resolve suggestion when a user specifies a target in the wrong module #2731\n\nFix conflicting dependencies between upstream JavaModules #2735\n\nFix the scala-library dependency for (generic) platform modules #2739\n\nFix terminal forwarding in .console and .repl commands #2743\n\nFor details refer to milestone 0.11.3 and the list of commits.\n\n0.11.2 - 2023-08-28\n\nChanges since 0.11.1:\n\nTarget invalidation after making changes to build.sc is now done at a fine-grained method-level granularity, using callgraph reachability analysis to see which targets depend on the code that was changed. See #2417 for more details\n\nFix redirection of stdout stream to stderr when using show #2689\n\nFix line numbers in errors for scripts starting with leading comments or whitespace #2686\n\nFix init command and support runnig Mill without existing build.sc file #2662\n\nFixes for BSP editor integration sometimes using the wrong output folder for meta-build metadata, causing subsequent builds from the command line to fail #2692\n\nAdded a new mill.idea.GenIdea/idea command to generate IntelliJ IDE metadata, improving-upon and replacing the older mill.scalalib.GenIdea/idea command which is now deprecated #2638\n\nUpdate Coursier to 2.1.6 to mitigate CVE CVE-2022-46751 #2705\n\nFor details refer to milestone 0.11.2 and the list of commits.\n\n0.11.1 - 2023-06-23\n\nChanges since 0.11.0:\n\nmill.define.Cross: Introduced default cross segments and some CLI convenience\n\nmill.testrunner: Fixed exception when running ScalaTest or ZIOTest frameworks\n\nmill.runner: Removed some obsolete / defunct cli options\n\nmill.runner: Properly distinct-ify commands when resolving wide matching target patterns\n\nmill.scalajslib: Restored correct defaults for esFeature\n\nmill.bsp: Fixed a MatchError in the buildtarget/scalaTestClasses request\n\nmill.contrib.bloop: Corrected accidentally changed package name resulting in non-functional plugin\n\nmill.contrib.scoverage: Fixed defunct plugin due to a missing type annotation\n\nVarious internal improvements\n\nDependency updates: Ammonite 3.3.0-M0-32-96e851cb, bsp4j 2.1.0-M5, zinc 1.9.1\n\nMill is now build with Mill 0.11\n\nFor details refer to milestone 0.11.1 and the list of commits.\n\n0.11.0 - 2023-06-06\n\nThis release is binary incompatible to 0.11.0-M11.\n\nChanges since 0.11.0-M11:\n\n0.11.0 is the next breaking version after the 0.10.x series, with a large number of improvements. See the changelog below for 0.11.0-M1 to 0.11.0-M11 for a full list of user-facing changes.\n\nFor details refer to milestone 0.11.0 and the list of commits.\n\nOlder releases\n\n0.11.0-M11 - 2023-06-04\n\nThis release is binary incompatible to 0.11.0-M10.\n\nChanges since 0.11.0-M10:\n\nMake foo.test command run tests with user code in the boot classloader, rather than in a sub-classloader #2561\n\nMill backend server timeout is now configurable #2550\n\nMill assembly is now distributed via Maven Central, rather than Github release assets, to remove an unnecessary single point of failure #2560\n\nTests inner trait was removed, to avoid trait shadowing which will be removed in Scala 3. Please use ScalaTests, ScalaJSTests, or ScalaNativeTests instead #2558\n\nFor details refer to milestone 0.11.0-M11 and the list of commits.\n\n0.11.0-M10 - 2023-05-24\n\nThis release is binary incompatible to 0.11.0-M9.\n\nChanges since 0.11.0-M9:\n\nMake mill.define.Module a trait to allow abstract/virtual modules to be traits rather than classes #2536\n\nMove mill.BuildInfo to mill.main.BuildInfo to avoid name conflicts with mill.contrib.buildinfo.BuildInfo #2537\n\nPlatformScalaModule now exposes platformScalaSuffix for user code to use #2534\n\nAdd Agg.when operator to simplify common workflow of adding optional flags or command line parameters #2353\n\nGeneralize handling of test module source folder layout, such that they always match the folder layout of the enclosing module #2531\n\nFor details refer to milestone 0.11.0-M10 and the list of commits.\n\n0.11.0-M9 - 2023-05-18\n\nThis release is binary incompatible to 0.11.0-M8.\n\nChanges since 0.11.0-M8:\n\nOverhauled target resolution logic. It is now significantly lazier, resulting in less of the module tree being un-necessarily instantiated, and also more precise and predictable #2453 #2511\n\nAllow tasks to be passed as the CLI parameters of the run command, allowing run to be easily used in the implementation of other tasks #2452\n\nT.inputs are now watched properly with --watch, and trigger re-evaluations when the watched value changes #2489\n\nSupport for Java 20 #2501\n\nBroke up mill.modules package #2513, with functionality re-distributed to mill.util and mill.scalalib\n\nOverhaul BSP-related code, for improved fidelity and correctness #2415 #2414 #2518 #2521\n\nEnabled compilation warnings in build.sc #2519\n\nPrint out the CLI flags when inspecting T.commands #2522\n\nFor details refer to milestone 0.11.0-M9 and the list of commits.\n\n0.11.0-M8 - 2023-04-24\n\nThis release is binary incompatible to 0.11.0-M7.\n\nChanges since 0.11.0-M7:\n\nAdded an example/ folder in the Mill repo, containing common build setups demonstrating Mill features with explanations of how each feature works\n\nPre-compiled Scala incremental compiler interface #2424, to speed up clean builds\n\nAdd some helpers to simplify cross-version/cross-platform modules {#2406}[#2406]\n\nYou can now override T{…​} Targets with T.source or T.sources, and vice versa #2402\n\nRemoved the Ammonite script runner dependency used to evaluate build.sc files and instead compile them using Mill #2377\n\nAdd TestModule.ZioTest #2432\n\nCaching fixes for external modules #2419\n\nOverhaul of the Mill BuildInfo plugin, moving the key-value into resources to avoid needing to re-compile your module when the values change, adding JavaModule support, and allowing Javadoc/Scaladoc comments to be associated with the generated BuildInfo constants #2425\n\nGlobal Configuration via ~/.mill/ammonite/predefScript.sc is no longer supported in this version. If that breaks your workflow, please report and tell us your use case so we can provide sufficient replacement or support for your use case before Mill 0.11.\n\nOverhaul of the documentation. Created many executable example projects which are included in the documentation and run/tested on CI\n\nChange cross module definitions to be traits instead of classes, for greater regularity and less builerplate at call sites. This change requires slight modification to existing build scripts that define cross modules.\n\nFor details refer to milestone 0.11.0-M8 and the list of commits.\n\n0.11.0-M7 - 2023-03-30\n\nThis release is binary incompatible to 0.11.0-M6.\n\nChanges since 0.11.0-M6:\n\nIntroduced automatic PathRef validation for cached targets; default-enabled it for CoursierModule.resolveDeps and various resolvedIvyDeps targets\n\nbsp: Update Protocol version to 2.1.0-M4\n\nbsp: Support new mainClasses field in run and test environments\n\nbsp: Fixed handling of Mill plugins and other improvements\n\nscalanativelib: new nativeDump setting in ScalaNativeModule\n\ncontrib.twirllib: Use newer scala-parser-combinators version when used with Scala 3\n\ncontrib.scalapblib: Added new flag to search for proto files in dependencies\n\nVarious refactorings to improve binary compatibility\n\nUpdated dependencies: Ammonite 3.0.0-M0-5 coursier 2.1.0, scala native tools 0.4.12, semanticdb 4.7.6, trees 4.7.6, upickle 3.0.0\n\nDX improvements\n\nFor details refer to milestone 0.11.0-M7 and the list of commits.\n\n0.11.0-M6 - 2023-03-09\n\nThis release is binary incompatible to 0.11.0-M5.\n\nChanges since 0.11.0-M5:\n\nmain: Re-added missing --color and predef cli arguments.\n\nFor details refer to milestone 0.11.0-M6 and the list of commits.\n\n0.11.0-M5 - 2023-03-09\n\nThis release is binary incompatible to 0.11.0-M4.\n\nChanges since 0.11.0-M4:\n\nCross is no longer adding the cross parameters to the millSourcePath.\n\nYou should review your cross modules setups to avoid build issues like incorrect source paths or missing files. CrossScalaModule is not affected by this change.\n\nAPI refactorings: PathRef, moved JarManifest to mill.main\n\nNo longer inherit the Ammonite CLI config\n\nscalalib: Fixed loosing customized mapDependencies when ScalaModule get mixed in after\n\nscalalib: New TestModule.Weaver\n\nscalajslib: New JsEnvConfig.Selenium\n\ntestrunner: Fixed concurrency issue with test event reporting\n\nUpdated dependencies: ammonite 3.0.0-M0-3, coursier 2.1.0-RC6, jarajar-abrams-core 1.8.2, lambdatest 0.8.0, log4j-core 2.20.0, os-lib 0.9.1, scoverage 2.0.8, semanticdb-scalac 4.7.5, trees 4.7.5\n\nDocumentation updates\n\nFor details refer to milestone 0.11.0-M5 and the list of commits.\n\n0.11.0-M4 - 2023-02-10\n\nThis release is binary incompatible to 0.11.0-M3.\n\nChanges since 0.11.0-M3:\n\nscalalib: New configuration target zincReportCachedProblems which, when true, enables reporting of all found problems, even for files which were not re-compiled\n\nscalalib: Improved SemanticDB support for Java and Scala\n\nscalalib: Mitigate another coursier download issue\n\nscalajslib: Fetch more tooling dependencies in prepareOffline\n\nscalanativelib: Fetch more tooling dependencies in prepareOffline\n\nscalanativelib: Updated tools to version 0.4.10\n\nbsp: Improved support for the mill-build module which should improve the editing experience for build.sc and other build files\n\nCleanups and internal improvements\n\nUpdated dependencies: Ammonite 3.0.0-M0-1, junixsocket 2.6.2, semanticdb-java 0.8.13, upickle 3.0.0-M2\n\nFor details refer to milestone 0.11.0-M4 and the list of commits.\n\n0.11.0-M3 - 2023-01-23\n\nThis release is binary incompatible to 0.11.0-M2.\n\nChanges since 0.11.0-M2:\n\nSlightly changed the out/ folder layout for overridden and private tasks. Instead of foo.overridden we now use a foo.super path to hold the metadata and scratch files.\n\nFixed the caching for private targets with same name but defined in different super traits.\n\nFixed non-functional clean command when used with arguments denoting modules.\n\nscalalib: Fixed GenIdea issues on Windows, when the build uses plugins or additional libraries.\n\nscalajslib: ScalaJSModule.ScalaJSTests now extends ScalaModule.ScalaTests which improves consistency, better default values and compatibility with other modules like ScoverageModule.\n\nscalanativelib: ScalaNativeModule.ScalaNativeTests now extends ScalaModule.ScalaTests which improves consistency, better default values and compatibility with other modules.\n\ncontrib.gitlab: Improved error handling for token lookup and documentation.\n\nUpdated dependencies: coursier 2.1.0-RC5, jna 5.13.0, semanticdb-scala 4.7.3, trees 4.7.3\n\nDocumentation improvements\n\nFor details refer to milestone 0.11.0-M3 and the list of commits.\n\n0.11.0-M2 - 2023-01-13\n\nThis release is binary incompatible to 0.11.0-M1.\n\nChanges since 0.11.0-M1:\n\nSplitted BSP module into mill.bsp and mill.bsp.worker and removed various dependencies (guava, bsp4j, xtends, lsp4j, …​) from Mill API\n\nscalalib: Added support to generate semanticdb data for Java source files\n\nscalajslib: Added support for scalaJSOutputPattern\n\nscalajslib: Added suport for scalaJSSourceMap\n\nscalajslib: Dropped support for Scala.js 0.6\n\nUpdated dependencies: ammonite 2.5.6, coursier 2.1.0-RC4, semanticdb 4.7.1, requests 0.8.0, scalafmt 3.6.1, trees 4.7.1, upickle 3.0.0-M1, utest 0.8.1\n\nVarious internal cleanups and improvements\n\nDocumentation improvements\n\nFor details refer to milestone 0.11.0-M2 and the list of commits.\n\n0.11.0-M1 - 2022-12-17\n\nThis release is binary incompatible to 0.10.10.\n\nChanges since 0.10.10:\n\nGreatly improved dependency resolution between modules, making it possible to mix Java and Scala modules\n\nmain: Restrict Cross parameter to be of type Module\n\nscalalib: Performance improvements in Zinc worker module\n\nscalalib: Resources are no longer added to compileClasspath.\n\nscalalib: Added new compileResources which will end up in compileClasspath\n\nscalalib: Consolidated artifact and platform suffix handling\n\nscalajslib : Performance improvements in worker module\n\nscalanativelib : Performance improvements in worker module\n\nUpdated dependencies: coursier 2.1.0-RC3, os-lib 0.9, scala 2.12.17, trees 4.7.0\n\nRemoved lots of deprecated API\n\nVarious internal cleanups and improvements\n\nFor details refer to milestone 0.11.0-M1 and the list of commits.\n\n0.10.15 - 2024-01-07\n\nChanges since 0.10.13:\n\nMake semanticDbEnablePluginScalacOptions protected and thus accessible for downstream use and customization\n\nFor details refer to milestone 0.10.15 and the list of commits.\n\n0.10.13 - 2023-11-12\n\nChanges since 0.10.12:\n\nThis version especially aids the transition from Mill 0.10 to Mill 0.11.\n\nBackport of Java 20 compatibility\n\nDeprecated mill.define.SelectMode.Single\n\nBackport of mill.eval.Evaluator.evalOrThrow\n\nDeprecated all inner Tests traits of modules derived from JavaModule and provide type aliases to use their successors\n\nDependency updates: Ammonite 2.5.11, Coursier 2.1.7, jarjar-abrams 1.9.0, Junixxocket 2.8.2, Play 2.8.21, Scalameta Trees 4.8.12, Scala Native 0.4.16, Scoverage 2.0.11, Zinc 1.9.5\n\nFor details refer to milestone 0.10.13 and the list of commits.\n\n0.10.12 - 2023-03-20\n\nChanges since 0.10.11:\n\nscalalib: Mitigate another coursier download issue (backported from 0.11.0-M4)\n\ntestrunner: Fixed a concurrency issue with test event reporting (backported from 0.11.0-M5)\n\nscalajslib: Deprecated fastOpt and fullOpt\n\nUpdated dependencies: coursier 2.1.0, jarjar-abrams 1.8.2, jna 5.13.0, junixsocket 2.6.2, log4j-core 2.20.0, scalafmt-dynamic 3.6.1, trees 4.7.6\n\nFor details refer to milestone 0.10.12 and the list of commits.\n\n0.10.11 - 2023-01-24\n\nChanges since 0.10.10:\n\nFixed non-functional clean command when used with arguments denoting modules.\n\nscalalib: Fixed GenIdea issues on Windows, when the build uses plugins or additional libraries.\n\nscalajslib: Performance improvements in worker module\n\nscalajslib: Pass more settings from ScalaJSModule to its Tests\n\nIf you have issues after the update (like org.scalajs.jsenv.UnsupportedInputException, #2300), check your settings in the test modules for consistency.\n\nSome internal improvements backported from 0.11.0-M3\n\nFor details refer to milestone 0.10.11 and the list of commits.\n\n0.10.10 - 2022-12-06\n\nAfter this release, the main branch is open for development of the next major version of Mill, which is probably 0.11. Further maintenance work will happen in the 0.10.x branch.\n\nChanges since 0.10.9:\n\nLots of documentation improvements, additions and restructurings\n\ncore: Fixed some rare issues with reading the .mill-jvm-opts file\n\ncore: We made slight adaptions to the T.dest location of target defined in included files, to fix potential colliding cache locations\n\nscalalib: JAR archives created by Mill now by default contain directory entries\n\nscalalib: Updated zinc to 1.8.0\n\nscalajslib: Added support for more JsEnv providers\n\nIf you get some issues (like connect ECONNREFUSED, #2204) after the update, review your settings for JsEnv providers.\n\nscalanativelib: Support for incremental compilation since Scala Native 0.4.9\n\ncontrib.testng: The TestNG library is no longer provided transitively; you need to provide it explicitly\n\ncontrib.bloop: Fixed re-generation of bloop config dir; previously, it could happen, that there where no config files at all\n\nBSP: implement buildTarget/OutputPaths request\n\nVarious version bumps and internal improvements\n\nFor details refer to milestone 0.10.10 and the list of commits.\n\n0.10.9 - 2022-11-10\n\nChanges since 0.10.8:\n\nHardened Maven and Ivy artifact handling to prevent path-traversal attacks (see CVE-2022-37866), also updated coursier dependency to a non-vulnerable version\n\nDecoupled mill-moduledefs module into a separate project, to better suite compiler plugin packaging and improve support for various Scala versions\n\nApplied more workarounds to coursier concurrency issues to make parallel builds more robust\n\nAdded support for newer Scala versions in GenIdea (2.2 and 2.3)\n\nFixed an issue where PublishModule dropped module dependencies when mixed-in after other trait which overrode moduleDeps\n\nnew JMH contrib plugin\n\nLots of internal improvements and dependency updates\n\nFor details refer to milestone 0.10.9 and the list of commits.\n\n0.10.6 - 2022-08-24\n\nChanges since 0.10.5:\n\nPathRefs sigs are now more reproducible and independent of the used filesystem\n\nJavaModule can now use a non-local Java Compiler to support all options\n\nLogger: new debugEnabled to detect whether debug logging is enabled\n\nNew testkit module, to use UnitTester in external projects\n\nFixed reading of .mill-jvm-opts in server mode\n\nBSP: Automatic SemanticDB enablement to improve Metals support\n\nmill.twirllib.TwirlModule - new mandatory target twirlScalaVersion to configure the Scala version used by Twirl compiler, and support for newer versions\n\nLots of documentation updates and additions\n\nUpgraded to Zinc 1.7.1 and various other dependency updates\n\nFor details refer to milestone 0.10.6 and the list of commits.\n\n0.10.5 - 2022-07-01\n\nChanges since 0.10.4:\n\nNew init command, to create new Mill projects from Gitter8 (g8) templates\n\nPathRef now gracefully ignores socket files. This also fixes an annoying issue when Mill was previously ran in a source directory.\n\nFixed a bug with using mill --repl without any further arguments, which was introduced in Mill 0.10.2 and prevented proper no-server mode\n\nFixed the visualize command which wasn’t working on some newer JREs\n\nImproved Mill server support for Windows 11 and some Windows Server versions\n\nScalaModule / ZincWorkerModule: Fixed incremental compilation issue with JRE 17 (and probably others)\n\nTestModule now better supports JUnit5 test suites\n\nScalaJsModule: internal improvements to the stability of the Scala.js linker\n\nScalaNativeModule: Added support for nativeEmbedResources\n\nBSP: improved handling of the mill-build module when the BSP client is IntelliJ IDEA\n\nDocumentation updates and link fixes\n\nVarious dependency updates\n\nFor details refer to milestone 0.10.5 and the list of commits.\n\n0.10.4 - 2022-05-06\n\nChanges since 0.10.3:\n\nSwitched from ipcsocket to junixsocket library to enhance the robustness of Mill client server communication. This should greatly improve the user experience on Windows.\n\nInternal improvements and better support of GraalVM\n\nThe Mill Documentation site has now built-in search functionality\n\nScalaJsModule: New targets fastLinkJS and fullLinkJS and deprecated fastOpt and fullOpt\n\nScalaJsModule: Support for ModuleSplitStyle\n\nBSP: Updated to protocol version 2.1.0-M1, added support for test framework names and support for the JVM extension\n\nGenIdea: More consistent ordering of libraries and dependent modules and support for Scala 3.1 language level\n\nBloop: Added support for runtime dependencies\n\nEnhanced test suite to cover Mill client server scenarios\n\nVarious dependency updates\n\nFor details refer to milestone 0.10.4 and the list of commits.\n\n0.10.3 - 2022-04-11\n\nChanges since 0.10.2:\n\nFixed import $file for files with hyphens and other symbols in its name\n\nFixed an issues with truncated output just before Mill finishes\n\nMill commands now support arguments of type Task[T], which can improve writing re-usable commands, especially, they can be called from other tasks more easily\n\nJavaModule: Improved correctness and performance of compileClasspath and bspCompileClasspath targets. This fixes an issue with BSP for large projects. Also, compile-time dependencies no longer sneak into the classpath transitively.\n\nJavaModule: Added docJarUseArgsFile target and fix issue with Windows command length restrictions in docJar\n\nBSP and Bloop: Better detect foreign modules\n\nVarious internal API refinements and improvements\n\nReorganized integration test suite and build setup\n\nFor details refer to milestone 0.10.3 and the list of commits.\n\n0.10.2 - 2022-03-18\n\nChanges since 0.10.1:\n\nMill workers can now implement AutoCloseable to properly free resources\n\nScalaModule: Fixed repl start\n\nCoursierModule: Fixed concurrent download issues with coursier (we detect and retry)\n\nMainModule: Fixed potential match error with show and showNamed\n\nRestructured contrib module documentation\n\nInternal improvements\n\nFor details refer to milestone 0.10.2 and the list of commits.\n\n0.10.1 - 2022-03-08\n\nChanges since 0.10.0:\n\nMillClienMain can now act as universal main to start mill with or without a server process\n\nImproved show command that always returns valid JSON\n\nAdded showNamed command that includes the task names in the output\n\nImplemented more granular cache invalidation which keeps more caches intact when you split your build setup over multiple .sc files with import $file.\n\nThe local .mill-jvm-opts file is no longer restricted to -X options\n\nCoursierModule: Added coursierCacheCustomizer to support a FileCache customizers\n\nJavaModule: the docJar target no longer includes hidden files\n\nScalaModule: Updated to latest zinc version\n\nScalaModule: Reworked scalac plugins handling for the better and to support Scala 3\n\nScalaNativeModule: fixed Dep.withDottyCompat behavior\n\nScalaJSModule: support for linking multiple modules\n\nScalafmtModule: Support for newer Scalafmt versions\n\nTool chain: Update to Mill 0.10.0\n\nTool chain: we no longer create files outside the mill project directory (e.g. ~/mill-release is now under target/mill-release)\n\nVarious dependency updates\n\nLots of internal improvements\n\nFor details refer to milestone 0.10.1 and the list of commits.\n\n0.10.0 - 2022-01-14\n\nChanges since 0.10.0-M5:\n\nChanged structure of out directory, out/foo/dest is now out/foo.dest\n\nFixed issues with loading of predef scripts\n\n--watch now supports manual re-runs by pressing enter\n\nImproved subprocess handling\n\nPublished poms can now contain properties and versionScheme information\n\nImproved Scala.js support, including more target configuration options and support for Node 17\n\nImproved Scala Native for version > 0.4.2 and support Scala 3\n\nInternal improvements, fixes and dependency version updates\n\nFor details refer to milestone 0.10.0 and the list of commits.\n\n0.10.0-M5 - 2021-12-18\n\nThis release breaks binary compatibility for external plugins.\n\nChanges since 0.10.0-M4:\n\nFixed Log4Shell security vulnerability in ZincWorkerModule (CVE-2021-44228)\n\nFactored out the testrunner into a new module, which also fixes some potential classloader issues when executing tests (e.g. with JNA)\n\nRemoved the limitation of max 22 inputs for tasks\n\n--watched commands can now re-run when pressing enter-key\n\ntask and arguments of commands can now have hyphens in their name\n\nReworked and decluttered the out-folder structure\n\nprepareOffline now has a all flag to control if all or only some dependency should be prefetched\n\nMade caching more effective for targets overridden in stackable-traits\n\nFurther BSP improvements, esp. for Metals and Scala 3\n\nLots of other internal improvements and fixes\n\nVarious dependency updates\n\nFor details refer to milestone 0.10.0-M5 and the list of commits.\n\n0.10.0-M4 - 2021-11-08\n\nChanges since 0.10.0-M3:\n\nBSP support rework and overhaul of built-in BSP server\n\nGenIdea: failures when inspecting and resolving the build are not properly reported\n\nCoursier: we now implemented a workaround to tackle concurrent downloads issues\n\nNew + separator to provide multiple targets (with parameters) via cmdline\n\nNew --import cmdline option to run ad-hoc plugins without editing of build.sc\n\nNew T.ctx().workspace API to access the project root directory\n\nVarious internal improvements and bug fixes\n\nVarious refactorings and cleanups\n\nFor details refer to milestone 0.10.0-M4 and the list of commits.\n\n0.10.0-M3 - 2021-09-29\n\nThis is a milestone release. This release breaks binary compatibility for external plugins build for mill 0.9.x. The API is suspected to change before a 0.10.0 releae.\n\nChanges since 0.10.0-M2:\n\nScalaModule with PublishModule: the scala-library artifact is now always part of the dependencies in published `pom.xml`s and `ivy.xml`s\n\nNew JavaModule.mandatoryIvyDeps target to provide essential dependencies like scala-library without forcing the user to call super.ivyDeps\n\nScalaJSModule.scalaLibraryIvyDeps no longer contains the scala-js-library, but only the scala-library; if you need that, use ScalaJSModule.mandatoryIvyDeps instead.\n\nimport $ivy support $MILL_BIN_PLATFORM variable and a new sort notations for external plugins\n\nWe fixed and enabled lots of tests to run on Windows\n\nSome generic targets like plan or path now also return their output\n\nGenIdea: improved support for Scala 3 projects *\n\nFor details refer to milestone 0.10.0-M3 and the list of commits.\n\n0.10.0-M2 - 2021-09-17\n\nThis is a early milestone release. This release breaks binary compatibility for external plugins build for mill 0.9.x. The API is suspected to change before a 0.10.0 releae.\n\nChanges since 0.9.9:\n\nRemoved deprecated API\n\nScalaModule: added mandatoryScalacOptions to avoid the common issue that users forget to include mandatory options when defining their own.\n\nRenamed toolsClasspath targets found in various modules to avoid hard to resolve clashes when mixing traits\n\nFixed and improved our test suite on Windows\n\nVarious fixes and improvements\n\nVarious dependency updates\n\nFor details refer to milestone 0.10.0-M2 and the list of commits.\n\n0.9.12 - 2022-01-07\n\nfixed parsing of command parameters in show command\n\nzinc worker: Updated log4j2 to 2.17.1\n\nFor details refer to milestone 0.9.12 and the list of commits.\n\n0.9.11 - 2021-12-15\n\nzinc worker: Updated log4j2 to 2.16.0 to fix Log4Shell (CVE-2021-44228) vulnerability\n\nFor details refer to milestone 0.9.11 and the list of commits.\n\n0.9.10 - 2021-11-13\n\nSome feature backports from mill 0.10\n\nNew + separator to provide multiple targets (with parameters) via cmdline\n\nNew --import cmdline option to run ad-hoc plugins without editing of build.sc\n\nimport $ivy support $MILL_BIN_PLATFORM variable and a new sort notations for external plugins\n\nFor details refer to milestone 0.9.10 and the list of commits.\n\n0.9.9 - 2021-07-15\n\nChanges since 0.9.8:\n\nBSP: Fixed/improved source item for root project\n\nBloop: Prevent compilation during bloop config generation\n\nGenIdea: Fix content path of root project (mill-build)\n\nVarious version bumps\n\nFor details refer to milestone 0.9.9 and the list of commits.\n\n0.9.8 - 2021-05-27\n\nChanges since 0.9.7:\n\nFixed some potential binary incompatibilities with external plugins (builds against older os-lib versions)\n\nFixed location and configuration of mills home path (used for caching of build scripts)\n\nProperly close jar resources - should fix issues in assembly, esp. on Windows where open resources are locked\n\nBSP: Repaired mills BSP server\n\nplaylib: Fixed issues with the play-contrib module and added support for Play 2.8\n\nGenIdea: changed dir for generated mill modules to .idea/mill_modules\n\nVarious version bumps, including Scala 2.13.5\n\nFor details refer to milestone 0.9.8 and the list of commits.\n\n0.9.7 - 2021-05-14\n\nChanges since 0.9.6:\n\nScalaModule: Support for Scala 3\n\nCoursierModule: Support customized dependency resolution (needed to work with ScalaFX)\n\nTestModule: Added new testFramework target and only support one test framework. Deprecated testFrameworks targets.\n\nTestModule: Added new convenience traits to configure popular test frameworks, e.g. TestModule.Junit4, TestModule.ScalaTest, TestModule.Utest and many more\n\nBloop: Added support for foreign modules\n\nBetter support for Windows environments\n\nVarious internal improvements, cleanups, and deprecations\n\nVarious dependencies updates\n\nRemoved tut contrib module because of unmaintained/archived upstream dependency\n\nFor details refer to milestone 0.9.7 and the list of commits.\n\n0.9.6 - 2021-04-03\n\nThe mill project home and repository has been moved to https://github.com/com-lihaoyi/mill.\n\nrepl and console targets now support forkArgs and forkEnv\n\nSupport for Scala 3 release candidates and new Scaladoc 3 tool\n\nSupport for Scala.js on Scala 3\n\nScala Native improvements\n\nTest runner now uses an args file to support running tests on Windows\n\nGenIdea: better supports source jars, full config contributions and provided/runtime dependencies\n\nVarious dependency updates\n\nDocumentation site reworked to support multiple release versions\n\nImproved CI setup to better test mill on Windows\n\nFor details refer to milestone 0.9.6 and the list of commits.\n\n0.9.5 - 2021-01-26\n\nUpdated zinc to 1.4.4\n\nSupport for Scala Native 0.4.0\n\nSupport for Scala.js ESModule (including Bloop support)\n\nInner Tests traits in modules like JavaModule, ScalaModule and others now have unique names (JavaModuleTests, ScalaTests, etc), to allow for easier customization\n\nVarious version bumps of dependencies\n\nCI now runs all tests, it did miss some before\n\nFor details refer to milestone 0.9.5 and the list of commits.\n\n0.9.4 - 2020-12-21\n\nImplemented more BSP protocol commands and fixed some glitches with IntelliJ\n\nStabilized CI builds\n\nVarious fixes and improvements\n\nVarious version bumps\n\nFor details refer to milestone 0.9.4 and the list of commits.\n\n0.9.3 - 2020-11-26\n\n(We also tagged 0.9.0, 0.9.1, and 0.9.2, but due to release difficulties, we ask you not to use them.)\n\nReplace the built in @main method functionality with the MainArgs library\n\nNote that the MainArgs replacement has some backwards incompatibilities: Short flags like -i can no longer be passed via --i, the @doc(\"\") is now @arg(doc = \"\"), Seq[T] parameters are now passed via repeated --foo flags rather than comma-separated.\n\nAdd the ability to relocate/shade files in .assembly #947\n\nTwirl enhancements #952\n\nAdd scalacPluginClasspath to Tests #956\n\nAdd toMap methods to BuildInfo #958\n\nBump coursier to version 2.0.0 #973\n\nMake BSP support a first-class citizen #969\n\nOmit the suffix in artifactName in cross modules #953\n\nAllow test classes with constructor parameters #982\n\nProguard contrib module #972\n\nSupport Scala.js useECMAScript2015 option and ModuleKind.ESModule #1004\n\nSupport Scala.js incremental linking #1007\n\nFor details refer to milestone 0.9.3 and the list of commits.\n\n0.8.0 - 2020-07-20\n\nBump external dependencies: uPickle 1.2.0, Ammonite 2.2.0, etc.\n\nUse default coursier repos (#931)\n\nWork around relative paths issue on windows (#936)\n\nSupport Scala.js versions >1.0.0 (#934)\n\nFor details refer to milestone 0.8.0 and the list of commits.\n\n0.7.4 - 2020-07-03\n\nnew command line options --repl and --no-server, deprecated --interactive option\n\nSupport for Scala.js 1.1\n\nFixed missing source maps for Scala.js 1.0 and 1.1\n\nImproved BSP contrib module\n\nFor details refer to milestone 0.7.4 and the list of commits.\n\n0.7.3\n\nFor details refer to milestone 0.7.3 and the list of commits.\n\n0.7.2 - 2020-05-19\n\nFor details refer to milestone 0.7.2 and the list of commits.\n\n0.7.1 - 2020-05-17\n\nFor details refer to milestone 0.7.1 and the list of commits.\n\n0.7.0 - 2020-05-15\n\nGreatly improved parallel builds via -j <n>/--jobs <n>, with better scheduling and utilization of multiple cores\n\nbuild.sc files now uses Scala 2.13.2\n\nAvoid duplicate target resolution with mill resolve __\n\nAdd ability to pass GPG arguments to publish via --gpgArgs\n\n-w/--watch now works for T.source targets\n\nFor details refer to milestone 0.7.0 and the list of commits.\n\n0.6.3 - 2020-05-10\n\nFinished incomplete support to publish extra artifacts to IVY repositories (publishLocal)\n\nImproved Sonatype uploads\n\nGenIdea: improvements for shared source dirs and skipped modules\n\nScoverageModule: Some refactorings to allow better customization\n\nMore robust classpath handling under Windows\n\nFor details refer to milestone 0.6.3 and the list of commits.\n\n0.6.2 - 2020-04-22\n\nMill can now execute targets in parallel. This is experimental and need to be enabled with --jobs <n> option.\n\nPublishModule: new publishM2Local to publish into local Maven repositories\n\nPublishModule: enhanced publishLocal to specify to ivy repository location\n\nWindows: Fixed windows launcher and more robust classpath handling\n\nScalaNativeModule: improved compiling and linking support\n\nnew contrib module VersionFile\n\nDependency: improved dependency update checker and expose results for programmatic use\n\nǹew contrib module Bintray\n\nǹew contrib module Artifactory\n\nfixed testCached support in various modules\n\nGenIdea: improvements, esp. related to source jars\n\nFor details refer to milestone 0.6.2 and the list of commits.\n\n0.6.1 - 2020-02-24\n\nBugfix: Mill now no longer leaks open files (version bump to uPickle 1.0.0)\n\nNew --version option\n\nAdded Support for Scala.js 1.0.0+\n\nAdded Support for Scala Native 0.4.0-M2\n\nJavaModule: Enhanced ivyDepsTree to optionally include compile-time and runtime-time dependencies\n\nJavaModule: allSourceFiles no longer include Scala sources\n\nJavaModule: assembly supports configurable separator when merging resources\n\nScoverageModule: respect unmanagedClasspath, added console reporter\n\nScalaPBModule: added more configuration options\n\nBloop: Fixed inconsistent working directory when executing tests via bloop (forces -Duser.dir when generating bloop config)\n\nFor details refer to milestone 0.6.1 and the list of commits.\n\n0.6.0 - 2020-01-20\n\nSupport for METALS 0.8.0 in VSCode\n\nFor details refer to milestone 0.6.0 and the list of commits.\n\n0.5.9 - 2020-01-14\n\nBump library versions again\n\nAlias T.ctx. functions to T.: T.dest, T.log, etc.\n\nBump Mill’s client-connect-to-server timeout, to reduce flakiness when the server is taking a moment to start up\n\nFor details refer to the list of commits.\n\nVersion 0.5.8 has some binary compatibility issues in requests-scala/geny and should not be used.\n\n0.5.7 - 2019-12-28\n\nBump library versions: Ammonite 2.0.1, uPickle 0.9.6, Scalatags 0.8.3, OS-Lib 0.6.2, Requests 0.4.7, Geny 0.4.2\n\nFor details refer to milestone 0.5.7 and the list of commits.\n\n0.5.5 / 0.5.6 - 2019-12-20\n\n(we skipped version 0.5.4 as we had some publishing issues)\n\nBump library versions: Ammonite 1.9.2, uPickle 0.9.0, Scalatags 0.8.2, OS-Lib 0.5.0, Requests 0.3.0, Geny 0.2.0, uTest 0.7.1\n\nFixed a long standing issue that output of sub-processes are only shown when -i option was used. Now, you will always seen output of sub-process.\n\nMill now properly restarts it’s server after it’s version has changed\n\nPublishModule: added ability to publish into non-staging repositories\n\nScalaPBModule: added extra include path option\n\nFor details refer to milestone 0.5.5 and the list of commits.\n\n0.5.3 - 2019-12-07\n\nGenIdea/idea: improved support for generated sources and use/download sources in more cases\n\nScalaJS: improvements and support for ScalaJS 0.6.29+ and 1.0.1.RC1\n\nIntroduced new CoursierModule to use dependency management independent from a compiler\n\nScoverageModule: better handling of report directories\n\nScalaPBModule: more configuration options\n\nvarious other fixes and improvements\n\nFor details refer to milestone 0.5.3 and the list of commits.\n\n0.5.2 - 2019-10-17\n\nTestModule: new `testCached`target, which only re-runs tests after relevant changes\n\nTestModule.test: fixed issue when stacktraces have no filename info\n\nDependency/updates: fixed issue with reading stale dependencies\n\nGenIdea/idea: no longer shared output directories between mill and IntelliJ IDEA\n\nsupport for Dotty >= 0.18.1\n\nFixed backwards compatibility of mill wrapper script\n\nMill now support the Build Server Protocol 2.0 (BSP) and can act as a build server\n\nbloop: removed semanticDB dependency\n\nDocumentation updates\n\nFor details refer to milestone 0.5.2 and the list of commits.\n\n0.5.1 - 2019-09-05\n\nGenIdea: Bug fixes\n\nGenIdea: Support for module specific extensions (Facets) and additional config files\n\nAdd ability to define JAR manifests\n\nDotty support: Updates and support for binary compiler bridges\n\nIvy: improved API to create optional dependendies\n\nInterpolate $MILL_VERSION in ivy imports\n\nZinc: Fixed logger output\n\nScoverage: Upgrade to Scoverage 1.4.0\n\nFlyway: Upgrade to Flyway 6.0.1\n\nBloop: Updated semanticDB version to 4.2.2\n\nDocumentation updates\n\nImproved robustness in release/deployment process\n\nFor details refer to milestone 0.5.1 and the list of commits.\n\n0.5.0 - 2019-08-08\n\nMill now supports a ./mill bootstrap script, allowing a project to pin the version of Mill it requires, as well as letting contributors use ./mill …​ to begin development without needing to install Mill beforehand.\n\nSupport for a .mill-version file or MILL_VERSION environment variable for Overriding Mill Versions\n\nFix scoverage: inherit repositories from outer project #645\n\n0.4.2 - 2019-06-30\n\nImprovements to IntelliJ project generation #616\n\nAllow configuration of Scala.js' JsEnv #628\n\n0.4.1 - 2019-06-13\n\nFixes for scala native test suites without test frameworks #627\n\nFix publication of artifacts by increasing sonatype timeouts\n\nBug fixes for Scoverage integration #623\n\n0.4.0 - 2019-05-20\n\nPublish compileIvyDeps as provided scope (535)\n\nAdded contrib modules to integrate Bloop, Flyway, Play Framework, Scoverage\n\nAllow configuration of GPG key names when publishing (530)\n\nBump Ammonite version to 1.6.7, making Requests-Scala available to use in your build.sc\n\nSupport for Scala 2.13.0-RC2\n\nScalaFmt support now uses the version specified in .scalafmt.conf\n\n0.3.6 - 2019-01-17\n\nStarted to splitting out mill.api from mill.core\n\nAvoid unnecessary dependency downloading by providing fetches per cache policy\n\nAdded detailed dependency download progress to the progress ticker\n\nFixed internal code generator to support large projects\n\nZinc worker: compiler bridge can be either pre-compiled or on-demand-compiled\n\nZinc worker: configurable scala library/compiler jar discovery\n\nZinc worker: configurable compiler cache supporting parallelism\n\nVersion bumps: ammonite 1.6.0, scala 2.12.8, zinc 1.2.5\n\nMill now by default fails fast, so in case a build tasks fails, it exits immediately\n\nAdded new -k/--keep-going commandline option to disable fail fast behaviour and continue build as long as possible in case of a failure\n\n0.3.5 - 2018-11-18\n\nBump uPickle to 0.7.1\n\n0.3.4 - 2018-11-06\n\nMill is now bundled with OS-Lib, providing a simpler way of dealing with filesystem APIs and subprocesses\n\n0.3.3 - 2018-11-02\n\nAdded new debug method to context logger, to log additional debug info into the task specific output dir (out/<task>/log)\n\nAdded --debug option to enable debug output to STDERR\n\nFix ScalaModule#docJar task when Scala minor versions differ 475\n\n0.3.2 - 2018-10-19\n\nAutomatically detect main class to make ScalaModule#assembly self-executable\n\n0.3.0 - 2018-10-19\n\nBump Ammonite to 1.3.2, Fastparse to 2.0.4\n\nSped up ScalaModule#docJar task by about 10x, greatly speeding up publishing\n\nAdd a flag JavaModule#skipIdea you can override to disable Intellij project generation #458\n\nAllow sub-domains when publishing #441\n\n0.2.8 - 2018-09-21\n\nmill inspect now displays out the doc-comment documentation for a task.\n\nAvoid shutdown hook failures in tests #422\n\nIgnore unreadable output files rather than crashing #423\n\nDon’t compile hidden files #428\n\n0.2.7 - 2018-08-27\n\nAdd visualizePlan command\n\nBasic build-info plugin in mill-contrib-buildinfo\n\nScalaPB integration in mill-contrib-scalapblib\n\nFixes for Twirl support, now in mill-contrib-twirllib\n\nSupport for building Dotty projects #397\n\nAllow customization of run/runBackground working directory via forkWorkingDir\n\nReduced executable size, improved incremental compilation in #414\n\n0.2.6 - 2018-07-30\n\nImprove incremental compilation to work with transitive module dependencies\n\nSpeed up hot compilation performance by properly re-using classloaders\n\nSpeed up compilation time of build.sc files by removing duplicate macro generated routing code\n\n0.2.5 - 2018-07-22\n\nAdd .runBackground and .runMainBackground commands, to run something in the background without waiting for it to return. The process will keep running until it exits normally, or until the same .runBackground command is run a second time to spawn a new version of the process. Can be used with -w for auto-reloading of long-running servers.\n\nScala-Native support. Try it out!\n\nAdd --disable-ticker to reduce spam in CI\n\nFix propagation of --color flag\n\n0.2.4 - 2018-07-07\n\nFix resolution of scala-{library,compiler,reflect} in case of conflict\n\nAllow configuration of JavaModule and ScalafmtModule scala workers\n\nAllow hyphens in module and task names\n\nFix publishing of ScalaJS modules to properly handle upstream ScalaJS dependencies\n\n0.2.3 - 2018-06-03\n\nAdded the mill show visualize command, making it easy to visualize the relationships between various tasks and modules in your Mill build.\n\nImprove Intellij support (351): better jump-to-definition for third-party libraries, no longer stomping over manual configuration, and better handling of import $ivy in your build file.\n\nSupport for un-signed publishing and cases where your GPG key has no passphrase (346)\n\nBasic support for Twirl, Play Framework’s templating language (271)\n\nBetter performance for streaming large amounts of stdout from Mill’s daemon process.\n\nAllow configuration of append/exclude rules in ScalaModule#assembly (309)\n\n0.2.2 - 2018-05-20\n\nPreserve caches when transitioning between -i/--interactive and the fast client/server mode (329)\n\nKeep Mill daemon running if you Ctrl-C during -w/--watch mode (327)\n\nAllow mill version to run without a build file (328)\n\nMake docJar (and thus publishing) robust against scratch files in the source directories (334) and work with Scala compiler options (336)\n\nAllow passing Ammonite command-line options to the foo.repl command (333)\n\nAdd mill clean (315) to easily delete the Mill build caches for specific targets\n\nImprove IntelliJ integration of `MavenModule`s/`SbtModule`s' test folders (298)\n\nAvoid showing useless stack traces when foo.test result-reporting fails or foo.run fails\n\nScalaFmt support (308)\n\nAllow ScalaModule#generatedSources to allow single files (previous you could only pass in directories)\n\n0.2.0 - 2018-04-10\n\nUniversal (combined batch/sh) script generation for launcher, assembly, and release (#264)\n\nWindows client/server improvements (#262)\n\nWindows repl support (note: MSYS2 subsystem/shell will be supported when jline3 v3.6.3 is released)\n\nFixed Java 9 support\n\nRemove need for running publishAll using --interactive when on OSX and your GPG key has a passphrase\n\nFirst-class support for `JavaModule`s\n\nProperly pass compiler plugins to Scaladoc (#282)\n\nSupport for ivy version-pinning via ivy\"…​\".forceVersion()\n\nSupport for ivy excludes via ivy\"…​\".exclude() (#254)\n\nMake ivyDepsTree properly handle transitive dependencies (#226)\n\nFix handling of runtime-scoped ivy dependencies (#173)\n\nMake environment variables available to Mill builds (#257)\n\nSupport ScalaCheck test runner (#286)\n\nSupport for using Typelevel Scala (#275)\n\nIf a module depends on multiple submodules with different versions of an ivy dependency, only one version is resolved (#273)\n\n0.1.7 - 2018-03-26\n\nSupport for non-interactive (client/server) mode on Windows.\n\nMore fixes for Java 9\n\nBumped the Mill daemon timeout from 1 minute to 5 minutes of inactivity before it shuts down.\n\nAvoid leaking Node.js subprocesses when running ScalaJSModule tests\n\nPassing command-line arguments with spaces in them to tests no longer parses wrongly\n\nScalaModule#repositories, scalacPluginIvyDeps, scalacOptions, javacOptions are now automatically propagated to Tests modules\n\nScalaJSModule linking errors no longer show a useless stack trace\n\nScalaModule#docJar now properly uses the compileClasspath rather than runClasspath\n\nBumped underlying Ammonite version to 1.1.0, which provides the improved Windows and Java 9 support\n\n0.1.6 - 2018-03-13\n\nFixes for non-interactive (client/server) mode on Java 9\n\nWindows batch (.bat) generation for launcher, assembly, and release\n\n0.1.5 - 2018-03-13\n\nIntroduced the mill plan foo.bar command, which shows you what the execution plan of running the foo.bar task looks like without actually evaluating it.\n\nMill now generates an out/mill-profile.json file containing task-timings, to make it easier to see where your mill evaluation time is going\n\nIntroduced ScalaModule#ivyDepsTree command to show dependencies tree\n\nRename describe to inspect for consistency with SBT\n\nmill resolve now prints results sorted alphabetically\n\nNode.js configuration can be customised with ScalaJSModule#nodeJSConfig\n\nScala.js fullOpt now uses Google Closure Compiler after generating the optimized Javascript output\n\nScala.js now supports NoModule and CommonJSModule module kinds\n\nInclude compileIvyDeps when generating IntelliJ projects\n\nFixed invalid POM generation\n\nSupport for Java 9 (and 10)\n\nFixes for Windows support\n\nFixed test classes discovery by skipping interfaces\n\nInclude \"optional\" artifacts in dependency resolution if they exist\n\nout/{module_name} now added as a content root in generated IntelliJ project\n\n0.1.4 - 2018-03-04\n\nSpeed up Mill client initialization by another 50-100ms\n\nSpeed up incremental `assembly`s in the common case where upstream dependencies do not change.\n\nMake ScalaJSModule#run work with main-method discovery\n\nMake ScalaWorkerModule user-defineable, so you can use your own custom coursier resolvers when resolving Mill’s own jars\n\nSimplify definitions of SCM strings\n\nMake the build REPL explicitly require -i/--interactive to run\n\nLog a message when Mill is initializing the Zinc compiler interface\n\n0.1.3 - 2018-02-26\n\nGreatly reduced the overhead of evaluating Mill tasks, with a warm already-cached mill dev.launcher now taking ~450ms instead of ~1000ms\n\nMill now saves compiled build files in ~/.mill/ammonite, which is configurable via the --home CLI arg.\n\nFixed linking of multi-module Scala.js projects\n\n0.1.2 - 2018-02-25\n\nMill now keeps a long-lived work-daemon around in between commands; this should improve performance of things like compile which benefit from the warm JVM. You can use -i/--interactive for interactive consoles/REPLs and for running commands without the daemon\n\nImplemented the ScalaModule#launcher target for easily creating command-line launchers you can run outside of Mill\n\nScalaModule#docJar no longer fails if you don’t have scala-compiler on classpath\n\nSupport for multiple testFrameworks in a test module.\n\n0.1.1 - 2018-02-19\n\nFixes for foo.console\n\nEnable Ammonite REPL integration via foo.repl\n\n0.1.0 - 2018-02-18\n\nFirst public release"
    }
}