{
    "id": "wrong_mix_random_subsidiary_00011_2",
    "rank": 29,
    "data": {
        "url": "https://learn.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category%3Fview%3Dmsvc-170",
        "read_more_link": "",
        "language": "en",
        "title": "Compiler options listed by category",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-11-13T08:00:00+00:00",
        "summary": "",
        "meta_description": "Reference listing by category of the Microsoft C/C++ compiler command-line options.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=msvc-170",
        "text": "/arch Minimum CPU architecture requirements. /clr Produces an output file to run on the common language runtime. /clr:implicitKeepAlive- Turn off implicit emission of System::GC::KeepAlive(this). /clr:initialAppDomain Enable initial AppDomain behavior of Visual C++ 2002. /clr:netcore Produce assemblies targeting .NET Core runtime. /clr:noAssembly Don't produce an assembly. /clr:nostdimport Don't import any required assemblies implicitly. /clr:nostdlib Ignore the system .NET framework directory when searching for assemblies. /clr:pure Produce an IL-only output file (no native executable code). /clr:safe Produce an IL-only verifiable output file. /EHa Enable C++ exception handling (with SEH exceptions). /EHc extern \"C\" defaults to nothrow. /EHr Always generate noexcept runtime termination checks. /EHs Enable C++ exception handling (no SEH exceptions). /feature Enable architecture features.17.10 /fp:contract Consider floating-point contractions when generating code. /fp:except[-] Consider floating-point exceptions when generating code. /fp:fast \"fast\" floating-point model; results are less predictable. /fp:precise \"precise\" floating-point model; results are predictable. /fp:strict \"strict\" floating-point model (implies /fp:except). /fpcvt:BC Backward-compatible floating-point to unsigned integer conversions. /fpcvt:IA Intel native floating-point to unsigned integer conversion behavior. /fsanitize Enables compilation of sanitizer instrumentation such as AddressSanitizer. /fsanitize-coverage Enables compilation of code coverage instrumentation for libraries such as LibFuzzer. /GA Optimizes for Windows applications. /Gd Uses the __cdecl calling convention. (x86 only) /Ge Deprecated. Activates stack probes. /GF Enables string pooling. /Gh Calls hook function _penter. /GH Calls hook function _pexit. /GL[-] Enables whole program optimization. /Gm[-] Deprecated. Enables minimal rebuild. /Gr Uses the __fastcall calling convention. (x86 only) /GR[-] Enables run-time type information (RTTI). /GS[-] Checks buffer security. /Gs[n] Controls stack probes. /GT Supports fiber safety for data allocated by using static thread-local storage. /Gu[-] Ensure distinct functions have distinct addresses. /guard:cf[-] Adds control flow guard security checks. /guard:ehcont[-] Enables EH continuation metadata. /Gv Uses the __vectorcall calling convention. (x86 and x64 only) /Gw[-] Enables whole-program global data optimization. /GX[-] Deprecated. Enables synchronous exception handling. Use /EH instead. /Gy[-] Enables function-level linking. /Gz Uses the __stdcall calling convention. (x86 only) /GZ Deprecated. Enables fast checks. (Same as /RTC1) /homeparams Forces parameters passed in registers to be written to their locations on the stack upon function entry. This compiler option is only for the x64 compilers (native and cross compile). /hotpatch Creates a hotpatchable image. /jumptablerdata Put switch case statement jump tables in the .rdata section. /Qfast_transcendentals Generates fast transcendentals. /QIfist Deprecated. Suppresses the call of the helper function _ftol when a conversion from a floating-point type to an integral type is required. (x86 only) /Qimprecise_fwaits Removes fwait commands inside try blocks. /QIntel-jcc-erratum Mitigates the performance impact of the Intel JCC erratum microcode update. /Qpar Enables automatic parallelization of loops. /Qpar-report:n Enables reporting levels for automatic parallelization. /Qsafe_fp_loads Uses integer move instructions for floating-point values and disables certain floating point load optimizations. /Qspectre[-] Enable mitigations for CVE 2017-5753, for a class of Spectre attacks. /Qspectre-load Generate serializing instructions for every load instruction. /Qspectre-load-cf Generate serializing instructions for every control flow instruction that loads memory. /Qvec-report:n Enables reporting levels for automatic vectorization. /RTC1 Enable fast runtime checks (equivalent to /RTCsu). /RTCc Convert to smaller type checks at run-time. /RTCs Enable stack frame runtime checks. /RTCu Enables uninitialized local usage checks. /volatile:iso Acquire/release semantics not guaranteed on volatile accesses. /volatile:ms Acquire/release semantics guaranteed on volatile accesses. /await Enable coroutines (resumable functions) extensions. /await:strict Enable standard C++20 coroutine support with earlier language versions. /constexpr:backtrace<N> Show N constexpr evaluations in diagnostics (default: 10). /constexpr:depth<N> Recursion depth limit for constexpr evaluation (default: 512). /constexpr:steps<N> Terminate constexpr evaluation after N steps (default: 100000) /openmp Enables #pragma omp in source code. /openmp:experimental Enable OpenMP 2.0 language extensions plus select OpenMP 3.0+ language extensions. /openmp:llvm OpenMP language extensions using LLVM runtime. /permissive[-] Set standard-conformance mode. /std:c++14 C++14 standard ISO/IEC 14882:2014 (default). /std:c++17 C++17 standard ISO/IEC 14882:2017. /std:c++20 C++20 standard ISO/IEC 14882:2020. /std:c++latest The latest draft C++ standard preview features. /std:c11 C11 standard ISO/IEC 9899:2011. /std:c17 C17 standard ISO/IEC 9899:2018. /std:clatest The latest draft C standard preview features. /vd{0|1|2} Suppresses or enables hidden vtordisp class members. /vmb Uses best base for pointers to members. /vmg Uses full generality for pointers to members. /vmm Declares multiple inheritance. /vms Declares single inheritance. /vmv Declares virtual inheritance. /Z7 Generates C 7.0-compatible debugging information. /Za Disables some C89 language extensions in C code. /Zc:__cplusplus[-] Enable the __cplusplus macro to report the supported standard (off by default). /Zc:__STDC__ Enable the __STDC__ macro to report the C standard is supported (off by default). /Zc:alignedNew[-] Enable C++17 over-aligned dynamic allocation (on by default in C++17). /Zc:auto[-] Enforce the new Standard C++ meaning for auto (on by default). /Zc:char8_t[-] Enable or disable C++20 native u8 literal support as const char8_t (off by default, except under /std:c++20). /Zc:enumTypes[-] Enable Standard C++ rules for inferred enum base types (Off b y default, not implied by /permissive-). /Zc:externC[-] Enforce Standard C++ rules for extern \"C\" functions (implied by /permissive-). /Zc:externConstexpr[-] Enable external linkage for constexpr variables (off by default). /Zc:forScope[-] Enforce Standard C++ for scoping rules (on by default). /Zc:gotoScope Enforce Standard C++ goto rules around local variable initialization (implied by /permissive-). /Zc:hiddenFriend[-] Enforce Standard C++ hidden friend rules (implied by /permissive-) /Zc:implicitNoexcept[-] Enable implicit noexcept on required functions (on by default). /Zc:inline[-] Remove unreferenced functions or data if they're COMDAT or have internal linkage only (off by default). /Zc:lambda[-] Enable new lambda processor for conformance-mode syntactic checks in generic lambdas. /Zc:noexceptTypes[-] Enforce C++17 noexcept rules (on by default in C++17 or later). /Zc:nrvo[-] Enable optional copy and move elisions (on by default under /O2, /permissive-, or /std:c++20 or later). /Zc:preprocessor[-] Use the new conforming preprocessor (off by default, except in C11/C17). /Zc:referenceBinding[-] A UDT temporary won't bind to a non-const lvalue reference (off by default). /Zc:rvalueCast[-] Enforce Standard C++ explicit type conversion rules (off by default). /Zc:sizedDealloc[-] Enable C++14 global sized deallocation functions (on by default). /Zc:strictStrings[-] Disable string-literal to char* or wchar_t* conversion (off by default). /Zc:templateScope[-] Enforce Standard C++ template parameter shadowing rules (off by default). /Zc:ternary[-] Enforce conditional operator rules on operand types (off by default). /Zc:threadSafeInit[-] Enable thread-safe local static initialization (on by default). /Zc:throwingNew[-] Assume operator new throws on failure (off by default). /Zc:tlsGuards[-] Generate runtime checks for TLS variable initialization (on by default). /Zc:trigraphs Enable trigraphs (obsolete, off by default). /Zc:twoPhase[-] Use nonconforming template parsing behavior (conforming by default). /Zc:wchar_t[-] wchar_t is a native type, not a typedef (on by default). /Zc:zeroSizeArrayNew[-] Call member new/delete for 0-size arrays of objects (on by default). /Ze Deprecated. Enables C89 language extensions. /Zf Improves PDB generation time in parallel builds. /ZH:[MD5|SHA1|SHA_256] Specifies MD5, SHA-1, or SHA-256 for checksums in debug info. /ZI Includes debug information in a program database compatible with Edit and Continue. (x86 only) /Zi Generates complete debugging information. /Zl Removes the default library name from the .obj file. /Zo[-] Generate richer debugging information for optimized code. /Zp[n] Packs structure members. /Zs Checks syntax only. /ZW Produces an output file to run on the Windows Runtime."
    }
}