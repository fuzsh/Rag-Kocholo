{
    "id": "dbpedia_1543_1",
    "rank": 61,
    "data": {
        "url": "https://medium.com/%40melesely96/get-your-first-couple-stars-from-hacker-rank-easy-level-sql-quiries-solution-a4272f264ce0",
        "read_more_link": "",
        "language": "en",
        "title": "The Road to the Golden Badge: Easy level SQL Quiries Solution",
        "top_image": "https://miro.medium.com/v2/resize:fit:300/1*0KkA0lRrGwkk1OpSpvPDeA.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:300/1*0KkA0lRrGwkk1OpSpvPDeA.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/da:true/resize:fill:88:88/0*462ezKLddha050yl",
            "https://miro.medium.com/v2/da:true/resize:fill:144:144/0*462ezKLddha050yl"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mohamed Abdelaal elesely",
            "medium.com"
        ],
        "publish_date": "2023-02-14T16:02:31.339000+00:00",
        "summary": "",
        "meta_description": "If you’re looking to enhance your coding skills and achieve your goals, you’re likely familiar with HackerRank. However, navigating the platform and successfully solving its challenges can be a…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@melesely96/get-your-first-couple-stars-from-hacker-rank-easy-level-sql-quiries-solution-a4272f264ce0",
        "text": "If you’re looking to enhance your coding skills and achieve your goals, you’re likely familiar with HackerRank. However, navigating the platform and successfully solving its challenges can be a daunting task. That’s why, in this article, we’ll be delving into the (Easy Level) common HackerRank SQL queries to help you along your journey. By the end, you’ll have a better understanding of how to approach various problems and sharpen your coding prowess.\n\n2nd Query(Weather Observation Station 3)\n\nQuery a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nThe Solution:\n\nSELECT DISTINCT CITY FROM STATION WHERE MOD(ID, 2) = 0;\n\nThis will select the distinct CITY names from the STATION table where the ID column is even, which is determined using the MOD function that returns the remainder of the ID divided by 2. The DISTINCT keyword ensures that duplicates are excluded from the results. The output will be a list of CITY names in any order that meet the specified criteria.\n\n3rd Query(Weather Observation Station 4)\n\nFind the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nFor example, if there are three records in the table with CITY values ‘New York’, ‘New York’, ‘Bengalaru’, there are 2 different city names: ‘New York’ and ‘Bengalaru’. The query returns 1.\n\nThe Solution:\n\nSELECT DISTINCT CITY FROM STATION\n\nWHERE CITY REGEXP '^[aeiouAEIOU].*[aeiouAEIOU]$';\n\n4th Query (Weather Observation Station 5)\n\nQuery the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nTHE SOLUTION:\n\nSELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU].*$';\n\n5th Query (Weather Observation Station 6)\n\nQuery the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nThe Solution:\n\nSELECT DISTINCT CITY FROM STATION\n\nWHERE CITY\n\nNOT REGEXP '^[[:alpha:]]*[aeiouAEIOU]$';\n\n6th Query (Weather Observation Station 7)\n\nQuery the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nto Solve this Query you can follow this Sql Statement (MySql server):\n\nSELECT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]';\n\n7th Query (Weather Observation Station 8)\n\nQuery the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nSolution:\n\nSELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiou]$';\n\n9th Query (Weather Observation Station 10)\n\nQuery the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nThe Solution:\n\nSELECT DISTINCT CITY\n\nFROM STATION\n\nWHERE CITY NOT REGEXP '^[aeiouAEIOU]' AND CITY NOT REGEXP '[aeiouAEIOU]$';\n\n10 th Query (Weather Observation Station 11)\n\nQuery the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nThe Solution:\n\nSELECT DISTINCT CITY\n\nFROM STATION\n\nWHERE CITY NOT REGEXP '^[aeiou]' AND CITY NOT REGEXP '[aeiou]$';\n\n11th Query (Weather Observation Station 12)\n\nQuery the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.\n\nInput Format\n\nThe STATION table is described as follows:\n\nwhere LAT_N is the northern latitude and LONG_W is the western longitude.\n\nThe Solution:\n\nSELECT DISTINCT CITY\n\nFROM STATION\n\nWHERE CITY NOT REGEXP '^[aeiou]' AND CITY NOT REGEXP '[aeiou]$'\n\nORDER BY CITY ASC;\n\n12th Query(Higher Than 75 Marks)\n\nQuery the Name of any student in STUDENTS who scored higher than Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.\n\nInput Format\n\nThe STUDENTS table is described as follows:\n\nThe Name column only contains uppercase (A-Z) and lowercase (a-z) letters.\n\nSample Output\n\nAshley\n\nJulia\n\nBelvet\n\nExplanation\n\nOnly Ashley, Julia, and Belvet have Marks > 75. If you look at the last three characters of each of their names, there are no duplicates and ‘ley’ < ‘lia’ < ‘vet’.\n\nTHE Solution:\n\nSELECT Name\n\nFROM STUDENTS\n\nWHERE Marks > 75\n\nORDER BY RIGHT(Name, 3), ID ASC;\n\nExplanation:\n\nThe SELECT statement retrieves the Name column of students from the STUDENTS table.\n\nThe WHERE clause filters the results to only include students who scored higher than 75 marks.\n\nThe ORDER BY clause sorts the results in ascending order based on the last three characters of each student's name using the RIGHT function, and if there are students with the same last three characters, they are sorted by their ID in ascending order using the ASC keyword.\n\nNote: The STUDENTS table has three columns: ID, Name, and Marks.\n\n13th Query (Employee Names)\n\nWrite a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.\n\nInput Format\n\nThe Employee table containing employee data for a company is described as follows:\n\nwhere employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company, and salary is their monthly salary.\n\nSample Input\n\nThe Solution:\n\nSELECT Name FROM Employee ORDER BY Name ASC;\n\n14th Query (Employee Salaries)\n\nWrite a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id.\n\nInput Format\n\nThe Employee table containing employee data for a company is described as follows:\n\nwhere employee_id is an employee’s ID number, name is their name, months is the total number of months they’ve been working for the company, and salary is the their monthly salary.\n\nSample Input\n\nSample Output\n\nAngela\n\nMichael\n\nTodd\n\nJoe\n\nThe Solution:\n\nSELECT Name, Salary FROM Employee ORDER BY Salary ASC;"
    }
}