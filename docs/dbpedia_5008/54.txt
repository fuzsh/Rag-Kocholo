What is Qt?

Qt is a cross-platform application development framework for desktop, embedded and mobile. Supported Platforms include Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS and others.

Qt is not a programming language on its own. It is a framework written in C++. A preprocessor, the MOC (Meta-Object Compiler), is used to extend the C++ language with features like signals and slots. Before the compilation step, the MOC parses the source files written in Qt-extended C++ and generates standard compliant C++ sources from them. Thus the framework itself and applications/libraries using it can be compiled by any standard compliant C++ compiler like Clang, GCC, ICC, MinGW and MSVC.

The Qt Company and The Qt Project

Development of Qt was started in 1990 by the Norwegian programmers Eirik Chambe-Eng and Haavard Nord. Their company, Trolltech, that sold Qt licenses and provided support, went through several acquisitions over the years. Today former Trolltech is named The Qt Company and is a wholly owned subsidiary of Digia Plc., Finland. Although The Qt Company is the main driver behind Qt, Qt is now developed by a bigger alliance: The Qt Project. It consists of many companies and individuals around the globe and follows a meritocratic governance model.

Everyone who wants to, individuals and companies, can join the effort. There are many ways one can contribute to the Qt Project, e.g. by writing code or documentation for the framework, reporting bugs, helping other users on the forum or maintaining pages on this wiki (see also http://qt.io/contribute/).

License

Qt is available under various licenses: The Qt Company sells commercial licenses, but Qt is also available as free software under several versions of the GPL and the LGPL (Licensing FAQ).

Build System

Although any build system can be used with Qt, Qt brings its own qmake. It is a cross-platform frontend for platform-native build systems, like GNU Make, Visual Studio and Xcode.

CMake is also a popular alternative to build Qt projects. Qt 4 support has been integrated years ago, and Qt 5 provided support early.

A new player entered the game recently: The Qt Build Suite a.k.a Qbs. Qbs is a QML based build system which also provides support for Javascript. This build system not only provides building capability but also packaging like cmake.

IDE

Qt comes with its own Integrated Development Environment (IDE), named Qt Creator. It runs on Linux, OS X and Windows and offers intelligent code completion, syntax highlighting, an integrated help system, debugger and profiler integration and also integration for all major version control systems (e.g. git, Bazaar). In addition to Qt Creator, developers on Windows can also use Qt's Visual Studio Add-in. Other IDEs (e.g. KDevelop on KDE) can also be used. But of course it is in no way mandatory to use any IDE at all.

Internationalization and Localization

Qt features excellent support for internationalization (i18n) and localization (l10n). The tool Qt Linguist and its companions lupdate, lrelease and lconvert make it easy to translate applications to locale languages. Qt supports most languages and writing systems that are in use today. For a complete listing see the corresponding manual pages.

Widgets

With Qt, GUIs can be written directly in C++ using its Widgets module. Qt also comes with an interactive graphical tool called Qt Designer which functions as a code generator for Widgets based GUIs. Qt Designer can be used stand-alone but is also integrated into Qt Creator.

QtQuick

Another way to write GUIs with Qt is to use the QtQuick module. GUIs using QtQuick are written in QML. QML is a declarative object description language that integrates Javascript for procedural programming. QtQuick provides the necessary modules for GUI development with QML. It is possible to write whole applications in QML only, but usually only the GUI is written in QML and the application's backend is implemented in C++ (see Integrating QML and C++). Also Qt Creator features an integrated QtQuick GUI designer and profiler.

More Modules

Qt is far more than a GUI toolkit. It provides modules for cross-platform development in the areas of networking, databases, OpenGL, web technologies, sensors, communications protocols (Bluetooth, serial ports, NFC), XML and JSON processing, printing, PDF generation, and much more.

For a full list of official Qt modules, see the All Modules page in the Qt documentation.

Also, see Inqlude.org for a list of 3rd-party modules based on Qt, for use in Qt projects.

Language Bindings

Although applications using Qt are usually written in C++ and QML bindings to other languages exist. These are not part of Qt but are provided by various third parties. Riverbank Computing for example provides commercial and free software Python bindings (PyQt). For more language bindings see Category:LanguageBindings.

Facts and Figures

One million downloads of Qt 5.3 measured just over a month after launch.[1]

250+ commits by 60+ contributors per week[2]

Leading companies and organizations in over 70 industries use Qt to power millions of devices and applications[3], including, but not limited to:

AMD[4]

European Space Agency[5]

Autodesk[6]

Wolfram Research[7]

Dassault Systèmes[8]

Lucasfilm[9]

Walt Disney Animation Studios[10]

Volvo Mobility Systems[11]

Siemens[12]

Panasonic[13]

Valve[14]

CadSoft[15]

Finnish IT center for science[16]

Kitware[17][18]

US National Nuclear Security Administration (ASC)[17][18]

Sandia National Laboratories[17][18]

Los Alamos National Laboratory[17][18]

US Army Research Laboratory[17][18]

Main companies contributing to Qt in 2015[2]:

The Qt Company (Finland)

KDAB (Sweden)

AudioCodes (Israel)

Intel (USA)

Intopalo (Finland)

Jolla (Finland)

BlackBerry (Canada)

Woboq (Germany)

Service partners of The Qt Company[19]:

basysKom (Germany)

develer (Italy)

e-GITS (Germany)

ICS (USA)

KDAB (Sweden)

Luxoft (Switzerland)

Qtomac (Australia)

Sequality (Austria)

Zühlke Engineering (Germany)

Technology partners[19]:

Adeneo Embedded (France)

ARM (UK)

Boundary Devices (USA)

Felgo (Austria)

Freescale Semiconductor (USA)

froglogic (Germany)

SILICA (Germany)

Texas Instruments (USA)

Toradex (Switzerland)

Community partners[19]:

FRUCT (Finnish-Russian University Cooperation in Telecommunications)

KDE e.V. (non-profit organization of KDE community members)

History

Qt History

Release history

References