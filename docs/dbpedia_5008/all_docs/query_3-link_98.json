{
    "id": "dbpedia_5008_3",
    "rank": 98,
    "data": {
        "url": "https://www.geeksforgeeks.org/json-web-token-jwt/",
        "read_more_link": "",
        "language": "en",
        "title": "JSON Web Token (JWT)",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth/profile/amu034eo6fbfdt1zlk5l",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/json-web-token-jwt/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2019-03-27T12:00:39",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/json-web-token-jwt/",
        "text": "JSON Web Tokens (JWT) are compact, URL-safe tokens used for securely transmitting information between parties as a JSON object. They are commonly used for authentication and information exchange.\n\nJSON Web Token\n\nA JSON web token(JWT) is JSON Object which is used to securely transfer information over the web(between two parties). It can be used for an authentication system and can also be used for information exchange. The token is mainly composed of header, payload, signature. These three parts are separated by dots(.). JWT defines the structure of information we are sending from one party to the another, and it comes in two forms – Serialized, Deserialized. The Serialized approach is mainly used to transfer the data through the network with each request and response. While the deserialized approach is used to read and write data to the web token.\n\nSerialized JWT\n\nIn its serialized form, a JWT represents a string in the following format:\n\n[header].[payload].[signature]\n\nThis format is used for transmitting data across the network with each request and response.\n\nDeserialized JWT\n\nJWT in the deserialized form contains only the header and the payload. Both of them are plain JSON objects.\n\nJWT Structure\n\n1. Header\n\nA header in a JWT is mostly used to describe the cryptographic operations applied to the JWT like signing/decryption technique used on it. It can also contain the data about the media/content type of the information we are sending. This information is present as a JSON object then this JSON object is encoded to BASE64URL.\n\nThe cryptographic operations in the header define whether the JWT is signed/unsigned or encrypted and are so then what algorithm techniques to use. A simple header of a JWT looks like the code below:\n\n{ \"typ\":\"JWT\", \"alg\":\"HS256\" }\n\nThe ‘alg’ and ‘typ’ are object key’s having different values and different functions like the ‘typ’ gives us the type of the header this information packet is, whereas the ‘alg’ tells us about the encryption algorithm used.\n\nNote:\n\nHS256 and RS256 are the two main algorithms we make use of in the header section of a JWT. Some JWT’s can also be created without a signature or encryption. Such a token is referred to as unsecured and its header should have the value of the alg object key assigned to as ‘none’.\n\n{ \"alg\":\"none\" }\n\n2. Payload\n\nThe payload is the part of the JWT where all the user data is actually added. This data is also referred to as the ‘claims’ of the JWT.This information is readable by anyone so it is always advised to not put any confidential information in here. This part generally contains user information. This information is present as a JSON object then this JSON object is encoded to BASE64URL.\n\nWe can put as many claims as we want inside a payload, though unlike header, no claims are mandatory in a payload. The JWT with the payload will look something like this:\n\n{ \"userId\":\"b07f85be-45da\", \"iss\": \"https://provider.domain.com/\", \"sub\": \"auth/some-hash-here\", \"exp\": 153452683 }\n\nThe above JWT contains userId,iss,sub,and exp. All these play a different role as userId is the ID of the user we are storing, ‘iss’ tells us about the issuer, ‘sub’ stands for subject, and ‘exp’ stands for expiration date.\n\n3. Signature\n\nThis is the third part of JWT and used to verify the authenticity of token. BASE64URL encoded header and payload are joined together with dot(.) and it is then hashed using the hashing algorithm defined in a header with a secret key. This signature is then appended to header and payload using dot(.) which forms our actual token header.payload.signature\n\nSyntax :\n\nHASHINGALGO( base64UrlEncode(header) + “.” + base64UrlEncode(payload),secret)\n\nSo all these above components together are what makes up a JWT. Now let’s see how our actual token will look like:\n\nJWT Example:\n\nHere’s an example of a complete JWT:\n\nheader: { \"alg\" : \"HS256\", \"typ\" : \"JWT\" } Payload: { \"id\" : 123456789, \"name\" : \"Joseph\" } Secret: GeeksForGeeks\n\nJSON Web Token\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o\n\nValidating JWT\n\nSimply decoding and reading a JWT is not enough; it’s essential to validate it. Here are some standard validation checks:\n\n1. Verifying Format:\n\nEnsure the JWT has three parts separated by dots (.).\n\nCheck that the data is Base64URL encoded.\n\nVerify that the header and payload are valid JSON objects.\n\n2. Validating the Header:\n\nCheck for known values in the alg and typ fields.\n\nVerify that the token is signed using a known key (check the kid field).\n\nConfirm that the key is suitable for the specified algorithm.\n\n3. Validating the Payload:\n\nEnsure the token is not expired (exp).\n\nConfirm that your application is the intended recipient (aud).\n\nVerify that the token is issued by a trusted source (iss).\n\nJWT Features\n\nData is formatted as JSON.\n\nCompact and URL-safe.\n\nTamper-proof.\n\nSelf-contained tokens (no need to call APIs for validation).\n\nSupported by a dedicated RFC.\n\nWhen are the scenarios to use JWT?\n\nCan be used to access APIs.\n\nCan be used as a trigger to start a session after successful validation of JWT.\n\nGood to use in combination with something.\n\nWhen not to use?\n\nDo not use them as cookies.\n\nShouldn’t be used to manage the user session as it will lose browser capability to automatically manage them.\n\nJWT tokens can be reused. So, try to avoid it in one-time use scenarios.\n\nDo not put permissions or application-related data as it would make it hit the header size limit.\n\nDeciding where to keep JWT in HTTP Requests\n\nPath or Query String: Path and Query strings are the first ones to decrypt in HTTPS request and are often written in logs. So not a good option.\n\nBody: Depending on standards, we should not send any auth details or request methods in the body.\n\nAuthorization Header: Better approach."
    }
}