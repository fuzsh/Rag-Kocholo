{
    "id": "dbpedia_5008_2",
    "rank": 91,
    "data": {
        "url": "https://opensource.stackexchange.com/questions/6463/in-2018-if-i-use-c-qt-5-10-0-to-build-a-closed-source-application-requires-ope",
        "read_more_link": "",
        "language": "en",
        "title": "In 2018 if I use C++ Qt 5.10.0 to build a closed source application requires open source or commercial license?",
        "top_image": "https://cdn.sstatic.net/Sites/opensource/Img/apple-touch-icon@2.png?v=f2690cc502f8",
        "meta_img": "https://cdn.sstatic.net/Sites/opensource/Img/apple-touch-icon@2.png?v=f2690cc502f8",
        "images": [
            "https://www.gravatar.com/avatar/efca0a1d6bb9d272f23f0ad87853d103?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/CYKI4.jpg?s=64",
            "https://www.gravatar.com/avatar/a1325bf0a5baed69f6f65248c3b2254a?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/90CgE.png?s=64",
            "https://opensource.stackexchange.com/posts/6463/ivc/093f?prg=410f03cd-5263-4086-9d84-7180c2d6f8f4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-01-24T16:55:13",
        "summary": "",
        "meta_description": "I currently have a C# application that I want to convert over to Qt/C++ 5.10.0 but I am having an issue with QT licensing.  This application is given away for free, but it has a service that the us...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/opensource/Img/favicon.ico?v=a03031d3058c",
        "meta_site_name": "Open Source Stack Exchange",
        "canonical_link": "https://opensource.stackexchange.com/questions/6463/in-2018-if-i-use-c-qt-5-10-0-to-build-a-closed-source-application-requires-ope",
        "text": "If you choose to use the Qt library under the open-source LGPL license, you may either statically or dynamically link it. However, both of these approaches come with requirements:\n\nIf you statically link the library, then you are probably creating a derivative work of the library and would need to release all of your source code that is linked to the library. (Note that when and whether static linking creates a derivative work is a controversial legal topic, but the most conservative reading is certainly that safest.)\n\nIf you dynamically link the library, you do not need to share any of your source code, but you must make it easy for the user to replace the LGPL library with a modified version. If you modify the library, you have to share your changes to the library, but not all your application code.\n\nThese requirements also apply if you statically link, but would be automatically fulfilled by sharing your complete source code.\n\nIf you don't want to meet either of those requirements, then you should use a commercial license instead.\n\nYou've also stated that even if you bought the commercial license, there is a a technical reason why it cannot be statically linked. If that is the case, then the open source version likely has the same problem, and static linking simply isn't possible at all. However, with the commercial version, you could try to make re-linking difficult (via some kind of obfuscation, perhaps) which the LGPL's \"easy re-linking\" requirements would disallow. (Consult the commercial license terms to ensure that you can actually do that, though.)\n\nApp Store does not care which license you use. It is the users of your application and the Library authors who care. The main point of the LGPLv3 license is that the end users must have the possibility to replace the library with their own modified version. This is very important to understand, dynamic / static / everything else is just distracting.\n\nLet's move to Qt. It is available with LGPLv3 license on major Desktop (Windows, OSX, Linux) and mobile (iOS, Android) operating systems. Suppose you develop an application and want to keep your source code closed. On the Desktop you can link dynamically to Qt libraries. When the end users install your application, they can replace Qt libraries in the following way:\n\nCompile their own version of Qt libraries\n\nNavigate the the location where the application is installed\n\nReplace original Qt libraies that were shipped with your applicatoin with their own modified versions\n\nLooks easy, right? The main goal of LGPLv3 is achieved. The user can replace libraries.\n\nMoving to the mobile platforms, starting with Android. Even though you link dynamically to the Qt libraries, we now have a small problem. The user can not navigate to C:/Program Files/YourApp and replace Qt libraries, because it's Android. Rooting is not an option, since it doesn't work on every device (and might not be legal). Remember, the main goal of LGPLv3 is to give the users ability to replace the library and run the modified version of your application on their device.\n\nSolution? Provide .apk file to every user who installed your application with detailed instructions on how to:\n\nUnpack your .apk file\n\nReplace Qt libraries\n\nZipalign / pack / signtool to a new .apk\n\nInstall .apk with modified Qt libraries\n\nLet's talk about iOS. Many say it is not possible to use LGPLv3 with iOS because of static linking. Wrong. Again, you just need to give the end user the possibility to replace Qt libraries. How? Provide your object files for the end user to relink. Or even better, put all your application code and resources in a separate Qt Quick plugin which will compile in a static library archive (technically just all object files concatenated together) for iOS. Then for every user who installed your application you have to provide instructions on how to replace Qt libraries:\n\nDownload project files and object files from your website\n\nDownload XCode and developer tools from Apple website\n\nReplace Qt libraries\n\nDeploy application to your device\n\nBefore this was not possible because in order to deploy on the device the user had to enroll Apple Developer Program. But this is not the case any more. You can launch your app on a device using a free Apple ID account\n\nThe end user rights are protected. They can replace Qt libraries. Just make sure you do required steps:\n\nMention in your application that you use Qt libraries and also mention you use them under LGPLv3 license. Provide a link to LGPLv3 lincese.\n\nMake sure your setup of replacing Qt libraries work. Set up a clean virtual machine and do everything step by step. Document it for the end users.\n\nWhen the users who downloaded your application want to replace Qt libraries, provide them everything so they can do it.\n\nActually I don't think anyone would care. But you have to be ready just in case. Do not scream you use Qt LGPLv3 on Qt forums, but make sure you have it visible somewhere down in your application's \"About\" screen. Qt company does not have resources to scan every application from the App Store if it uses Qt or not. Neither they will touch you if you are a small-near-zero-profit. They have more important things to do.\n\nIt is very dissapointing however to see absolutely no help from people who work in Qt on the LGPL subject. Most likely all developers were instructed to answer \"IANAL, please contact our legal department\". The legal department will tell you - buy our commercial license, it's the only option. On the Qt website you can find Obligations of the LGPL. I am not surprised, there is no word about static linking and providing object files for re-link on this page. Qt company simply prefers not to tell anyone it is possible.\n\nAlso thinking about MeeGo and Blackberry, there was no problem with developing closed source mobile apps that use Qt and publishing them in respective app stores. No commercial license needed.\n\nUpdate: This has been done before. LGPL is possible with static linking and App Store. https://news.ycombinator.com/item?id=4302517"
    }
}