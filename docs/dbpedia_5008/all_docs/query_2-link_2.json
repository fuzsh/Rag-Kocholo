{
    "id": "dbpedia_5008_2",
    "rank": 2,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Qt_(software)",
        "read_more_link": "",
        "language": "en",
        "title": "Qt (software)",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Qt_logo_neon_2022.svg/1200px-Qt_logo_neon_2022.svg.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Qt_logo_neon_2022.svg/1200px-Qt_logo_neon_2022.svg.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Qt_logo_neon_2022.svg/150px-Qt_logo_neon_2022.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Qt_Creator_4_13_2_HeartRateGame.png/220px-Qt_Creator_4_13_2_HeartRateGame.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/KDE_Mascot_Konqi_for_Qt.png/220px-KDE_Mascot_Konqi_for_Qt.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Free_and_open-source-software_display_servers_and_UI_toolkits.svg/300px-Free_and_open-source-software_display_servers_and_UI_toolkits.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Qt_contributors_2013W18_without_Digia.png/300px-Qt_contributors_2013W18_without_Digia.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/KDE_logo.svg/60px-KDE_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2001-08-24T21:16:25+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Qt_(software)",
        "text": "For the company formerly known as Qt Software, see The Qt Company.\n\nNot to be confused with QuickTime.\n\nQtOriginal author(s)Haavard Nord and Eirik Chambe-Eng[1]Developer(s)\n\nTrolltech (1991–2008)\n\nNokia (2008–2011)\n\nQt Project (2011–present)\n\nDigia (2012–2014)\n\nThe Qt Company (2014–present)\n\nInitial release20 May 1995; 29 years ago ( )[1]Stable release\n\n6.7.2[2] / 19 June 2024; 53 days ago ( )\n\nRepositoryWritten inC++ (C++17)Operating systemAndroid, iOS, Linux (embedded, Wayland, X11), macOS, Microsoft Windows, WebAssembly, ...[3]PlatformCross-platformTypeCross-platform software and Software development toolsLicenseWebsitewww .qt .io\n\nObject-oriented framework for software development\n\nQt (pronounced \"cute\"[7][8] or as an initialism) is a cross-platform application development framework for creating graphical user interfaces as well as cross-platform applications that run on various software and hardware platforms such as Linux, Windows, macOS, Android or embedded systems with little or no change in the underlying codebase while still being a native application with native capabilities and speed.\n\nQt is currently being developed by The Qt Company, a publicly listed company, and the Qt Project under open-source governance, involving individual developers and organizations working to advance Qt.[9][10][11] Qt is available under both commercial licenses[4] and open-source[12] GPL 2.0, GPL 3.0, and LGPL 3.0 licenses.[5][6]\n\nPurposes and abilities\n\n[edit]\n\nQt is used for developing graphical user interfaces (GUIs) and multi-platform applications that run on all major desktop platforms and mobile or embedded platforms. Most GUI programs created with Qt have a native-looking interface, in which case Qt is classified as a widget toolkit. Non-GUI programs can also be developed, such as command-line tools and consoles for servers. An example of such a non-GUI program using Qt is the Cutelyst web framework.[13]\n\nQt supports various C++ compilers, including the GCC and Clang C++ compilers and the Visual Studio suite. It supports other languages with bindings or extensions, such as Python via Python bindings[14] and PHP via an extension for PHP5,[15] and has extensive internationalization support. Qt also provides Qt Quick, that includes a declarative scripting language called QML that allows using JavaScript to provide the logic. With Qt Quick, rapid application development for mobile devices became possible, while logic can still be written with native code as well to achieve the best possible performance.\n\nOther features include SQL database access, XML parsing, JSON parsing, thread management and network support.\n\nReleases\n\n[edit]\n\nThe latest version of the Qt Framework is Qt 6.7, which was released on April 2, 2024.\n\nAlso still supported are — for commercial users — 6.5 LTS, released on April 3, 2023, 6.2 LTS,[16] released on 30 September 2021, and 5.15 LTS, released on 26 May 2020 – long-term support (LTS) versions are generally supported for three years with a commercial license, while 5.15 support was extended to five years for subscription license holders, and so it is supported until 26 May 2025. Additionally the KDE project provides unofficial support for, at least, Qt 5.15, i.e. not just for commercial users.\n\nQt in use\n\n[edit]\n\nIn 2017, the Qt Company estimated a community of about 1 million developers worldwide[17] in over 70 industries.[18]\n\nDesktop UIs\n\n[edit]\n\nGraphical user-interfaces and desktop environments that utilize Qt/QML as widget toolkit:\n\nKDE Plasma, a libre desktop environment for various computing devices[19]\n\nDDE (Deepin Desktop Environment) of Linux Deepin[20][21]\n\nUKUI (Ubuntu Kylin User Interface)[22]\n\nCutefishDE, a desktop environment built with Qt Quick and essential KDE frameworks [23]\n\nLXQt (Lightweight X11 Desktop Environment)\n\nLumina, a desktop environment designed for BSD-based TrueOS[24]\n\nLomiri (formerly Unity8),[25] a convergent desktop environment started by Canonical, maintained by Ubports[26]\n\nMaui Shell, a DE that also features their own app suite[27]\n\nUnity 2D, a desktop shell written in Qt and Qml\n\nTrinity DE, a continuously developed fork based on KDE3[28]\n\nSDDM, a display manager written in QML that is compatible with X11 and Wayland.\n\nEmbedded and mobile UIs\n\n[edit]\n\nActively developed or maintained\n\nAsteroidOS, an open source operating system designed for smartwatches\n\nAvionics, Panasonic's in-flight entertainment system[29][30]\n\nSailfish OS, a mobile operating system developed by Jolla\n\nPlasma Mobile, a touch-based GUI developed by KDE\n\nLuneOS, community-driven successor for Palm/HP webOS\n\nNemo Mobile, based on Mer\n\nLomiri, formerly known as Unity8, a phone UI developed by Ubports, originally by Canonical\n\nTesla Model S in-car UI[31]\n\nwebOS, a multitask operating system from LG for smart devices like TVs and smartwatches\n\nSky Q, the home entertainment system of Sky plc[32]\n\nAvailable, but inactive\n\nMeeGo handset and tablet UX\n\nQtopia, a system by Nokia for embedded and mobile devices\n\nApplications using Qt\n\n[edit]\n\nMany notable open-source or proprietary cross-platform software are using Qt or QML:\n\nOrganizations using Qt\n\n[edit]\n\nQt is utilized by a wide range of companies and organizations such as\n\nQt software architecture\n\n[edit]\n\nQt concepts\n\n[edit]\n\nQt is built on these key concepts:\n\nComplete abstraction of the GUI\n\nWhen first released, Qt used its own paint engine and controls, emulating the look of the different platforms it runs on when it drew its widgets. This made the porting work easier because very few classes in Qt really depended on the target platform; however, this occasionally led to slight discrepancies where that emulation was imperfect. Recent versions of Qt use the native style APIs of the different platforms, on platforms that have a native widget set, to query metrics and draw most controls, and do not suffer from such issues as often.[87] On some platforms (such as MeeGo and KDE) Qt is the native API. Some other portable graphical toolkits have made different design decisions; for example, wxWidgets uses the toolkits of the target platform for its implementations.\n\nSignals and slots\n\nA language construct introduced in Qt for communication between objects[88] which makes it easy to implement the observer pattern while avoiding boilerplate code. The concept is that GUI widgets can send signals containing event information which can be received by other controls using special functions known as slots.\n\nMetaobject compiler\n\nThe metaobject compiler, termed moc, is a tool that is run on the sources of a Qt program. It interprets certain macros from the C++ code as annotations, and uses them to generate added C++ code with meta information about the classes used in the program. This meta information is used by Qt to provide programming features not available natively in C++: signals and slots, introspection and asynchronous function calls.\n\nLanguage bindings\n\nQt can be used in several programming languages other than C++, such as Python, Javascript, C# and Rust[89] via language bindings; many languages have bindings for Qt 5 and bindings for Qt 4.\n\nQt modules\n\n[edit]\n\nStarting with Qt 4.0 the framework was split into individual modules.[90][91] With Qt 5.0 the architecture was modularized even further.[92][93] Qt is now split into essential and add-on modules.[94]\n\nQt essentials\n\n[edit]\n\nModule Description Qt Core The only required Qt module, containing classes used by other modules, including the meta-object system, concurrency and threading, containers, event system, plugins and I/O facilities. Qt GUI The central GUI module. In Qt 5 this module now depends on OpenGL, but no longer contains any widget classes. Qt Widgets Contains classes for classic widget based GUI applications and the QSceneGraph classes. Was split off from QtGui in Qt 5. Qt QML Module for QML and JavaScript languages. Qt Quick The module for GUI applications written using QML2. Qt Quick Controls Widget like controls for Qt Quick intended mainly for desktop applications. Qt Quick Layouts Layouts for arranging items in Qt Quick. Qt Network Network abstraction layer. Complete with support for TCP, UDP, HTTP, TLS, SSL (in Qt 4) and SPDY (since Qt 5.3). Qt Multimedia Classes for audio, video, radio and camera functionality. Qt Multimedia Widgets The widgets from Qt Multimedia. Qt SQL Contains classes for database integration using SQL. Qt WebEngine A new set of Qt Widget and QML webview APIs based on Chromium. Qt Test Classes for unit testing Qt applications and libraries.\n\nQt add-ons\n\n[edit]\n\nModule Description Active Qt Classes for applications which use ActiveX. Qt Charts Provides functionality and widgets to plot charts of many kinds Qt Bluetooth Classes accessing Bluetooth hardware. Qt D-Bus Classes for IPC using the D-Bus protocol. Qt NFC Classes accessing NFC hardware. Only officially supported on BlackBerry hardware so far (or N9 in the MeeGo port). Qt OpenGL Legacy module containing the OpenGL classes from Qt 4. In Qt 5 the similar functionality in Qt GUI is recommended. Qt Location Classes for accessing GPS and other location services and for mapping and navigation. Split off from the Qt 4 Mobility module of Qt Location. Supported on Android, BlackBerry, iOS, Linux (using GeoClue), Windows and Sailfish OS. Qt Quick 3D Classes for rendering 3D models, video games, simulations and 3D user interfaces, with a Qt QML API, into a mixed 2D and 3D scene graph. Qt Script Legacy module for scripting Qt application using ECMAScript/JavaScript. In Qt 5, using similar classes in Qt QML is recommended. Qt Sensors Classes for accessing various mobile hardware sensors. Used to be part of Qt Mobile in Qt 4. Supported on Android, BlackBerry, iOS, WinRT, Mer and Linux. Qt Serial Port Classes for access to hardware and virtual serial ports. Supported on Windows, Linux and macOS. Qt WebChannel Provides access to Qt objects to HTML/Js over WebSockets. Qt WebKit Qt's WebKit implementation and API. Qt WebKit Widgets The widget API for Qt WebKit Qt WebSockets Provides a WebSocket implementation. Qt XML Legacy module containing classes for SAX and DOM style XML APIs. Replaced with QXmlStreamReader and QXmlStreamWriter classes in Qt Core. Qt XML Patterns Support for XPath, XQuery, XSLT and XML Schema validation.\n\nEditions\n\n[edit]\n\nThere are four editions of Qt available: Community, Indie Mobile, Professional and Enterprise.[95] The Community version is under the open source licenses, while the Indie Mobile, Professional and Enterprise versions, which contain additional functionality and libraries, e.g. Enterprise Controls[95] are commercially sold by The Qt Company.\n\nSupported platforms\n\n[edit]\n\nQt works on many different platforms; the following are officially supported:\n\nPlatform Description Linux/Unix X11 Qt for X Window System (Linux);[96] FreeBSD, NetBSD, OpenBSD, and DragonFly BSD have community support. Wayland Qt applications can switch between graphical backends like X and Wayland at load time with the -platform command line option.[97][98] This allows a seamless transition of Qt applications from X11 to Wayland. SailfishOS uses Wayland only as it does not have X11.[99] Android Qt for Android[100] (formerly known as Necessitas).[101] Embedded Linux Qt for embedded platforms: personal digital assistant, smartphone, etc.[102] Exists as multiple platforms depending on display technology. DirectFB, LinuxFB and EGLFS (EGL Full Screen). Microsoft platforms Windows Qt for Microsoft Windows 7,[103] 8 and 10[104] Windows RT Support for WinRT-based Windows 10 Mobile apps and Windows 10 IoT[105] Apple platforms macOS Qt for Apple macOS; supports applications on Cocoa[106] iOS Qt for iOS platforms (iPhone, iPad)[107] Other embedded platforms Integrity Qt for Integrity[108] QNX Qt for QNX[109][110] VxWorks Qt for VxWorks.[111][112] Only available under a proprietary (commercial) license. Qt 5.5.\n\nAfter Nokia opened the Qt source code to the community on Gitorious, various ports appeared. There are also some ports of Qt that may be available, but are not supported anymore. These platforms are listed in List of platforms supported by Qt. See also there for current community support for other lesser known platforms, such as SailfishOS.\n\nLicensing\n\n[edit]\n\nQt is available under the following free software licenses:[12] GPL 2.0, GPL 3.0, LGPL 3.0 and LGPL 2.1 (with Qt special exception).[5][113] Note that some modules are available only under a GPL license, which means that applications which link to these modules need to comply with that license.[114]\n\nIn addition, Qt has always been available under a commercial license, like the Qt Commercial License,[4] that allows developing proprietary applications with no restrictions on licensing.\n\nSee also: Qt Creator\n\nQt comes with its own set of tools to ease cross-platform development, which can otherwise be cumbersome due to different set of development tools.\n\nQt Creator is a cross-platform IDE for C++ and QML. Qt Designer's GUI layout/design functionality is integrated into the IDE, although Qt Designer can still be started as a standalone tool.\n\nIn addition to Qt Creator, Qt provides qmake, a cross-platform build script generation tool that automates the generation of Makefiles for development projects across different platforms. There are other tools available in Qt, including the Qt Designer interface builder and the Qt Assistant help browser (which are both embedded in Qt Creator), the Qt Linguist translation tool, uic (user interface compiler), and moc (Meta-Object Compiler).\n\nHistory of Qt\n\n[edit]\n\nEarly developments\n\n[edit]\n\nIn the summer of 1990, Haavard Nord and Eirik Chambe-Eng (the original developers of Qt and the CEO and President, respectively, of Trolltech) were working together on a database application for ultrasound images written in C++ and running on Mac OS, Unix, and Microsoft Windows.[1][115] They began development of \"Qt\" in 1991, three years before the company was incorporated as Quasar Technologies, then changed the name to Troll Tech and then to Trolltech.[1]\n\nThe toolkit was called Qt because the letter Q looked appealing in Haavard's Emacs typeface, and \"t\" was inspired by Xt, the X toolkit.[1]\n\nThe first two versions of Qt had only two flavors: Qt/X11 for Unix and Qt/Windows for Windows.\n\nOn 20 May 1995 Trolltech publicly released Qt 0.90 for X11/Linux with the source code under the Qt Free Edition License.[116][117][118] This license was viewed as not compliant with the free software definition by Free Software Foundation because, while the source was available, it did not allow the redistribution of modified versions. Trolltech used this license until version 1.45. Controversy erupted around 1998 when it became clear that the K Desktop Environment was going to become one of the leading desktop environments for Linux. As it was based on Qt, many people in the free software movement worried that an essential piece of one of their major operating systems would be proprietary.\n\nThe Windows platform was available only under a proprietary license, which meant free/open source applications written in Qt for X11 could not be ported to Windows without purchasing the proprietary edition.\n\nBecoming free software–friendly\n\n[edit]\n\nWith the release of version 2.0 of the toolkit in mid-1999, the license was changed to the Q Public License (QPL), a free software license, but one regarded by the Free Software Foundation as incompatible with the GPL. Compromises were sought between KDE and Trolltech whereby Qt would not be able to fall under a more restrictive license than the QPL, even if Trolltech was bought out or went bankrupt. This led to the creation of the KDE Free Qt foundation,[119] which guarantees that Qt would fall under a BSD-style license should no free/open source version of Qt be released during 12 months.[120][121]\n\nIn 2000, Qt/X11 2.2 was released under the GPL v2,[122] ending all controversy regarding GPL compatibility.\n\nAt the end of 2001, Trolltech released Qt 3.0, which added support for Mac OS X (now known as macOS). The Mac OS X support was available only in the proprietary license until June 2003, when Trolltech released Qt 3.2 with Mac OS X support available under the GPL.\n\nIn 2002, members of the KDE on Cygwin project began porting the GPL licensed Qt/X11 code base to Windows.[123] This was in response to Trolltech's refusal to license Qt/Windows under the GPL on the grounds that Windows was not a free/open source software platform.[124][125] The project achieved reasonable success although it never reached production quality.\n\nThis was resolved when Trolltech released Qt 4.0 also for Windows under the GPL in June 2005.[126] Qt 4 supported the same set of platforms in the free software/open source editions as in the proprietary edition, so it is possible, with Qt 4.0 and later releases, to create GPL-licensed free/open source applications using Qt on all supported platforms. The GPL v3 with special exception[127] was later added as an added licensing option. The GPL exception allows the final application to be licensed under various GPL-incompatible free software/open source licenses such as the Mozilla Public License 1.1.\n\nAcquisition by Nokia\n\n[edit]\n\nNokia acquired Trolltech ASA on 17 June 2008 and changed the name first to Qt Software, then to Qt Development Frameworks.\n\nNokia focused on turning Qt into the main development platform for its devices, including a port to the Symbian S60 platform. Version 1.0 of the Nokia Qt SDK was released on 23 June 2010.[128] The source code was made available over Gitorious, a community oriented git source code repository, with a goal of creating a broader community using and improving Qt.\n\nOn 14 January 2009, Qt version 4.5 added another option, the LGPL,[129] to make Qt more attractive for both non-GPL open source projects and closed applications.[130]\n\nIn February 2011, Nokia announced its decision to drop Symbian technologies and base their future smartphones on the Windows Phone platform instead (and since then support for that platform has also been dropped).[131] One month later, Nokia announced the sale of Qt's commercial licensing and professional services to Digia, with the immediate goal of taking Qt support to Android, iOS and Windows 8 platforms, and to continue focusing on desktop and embedded development, although Nokia was to remain the main development force behind the framework at that time.\n\nMerging and demerging with Digia\n\n[edit]\n\nIn March 2011, Nokia sold the commercial licensing part of Qt to Digia, creating Qt Commercial.[132] In August 2012, Digia announced that it would acquire Qt from Nokia.[133] The Qt team at Digia started their work in September 2012.[134] They released Qt 5.0 within a month and newer versions every six months with new features and additional supported platforms.\n\nIn September 2014, Digia transferred the Qt business and copyrights to their wholly owned subsidiary, The Qt Company, which owns 25 brands[135] related to Qt. In May 2016, Digia and Qt demerged completely into two independent companies.[136]\n\nThe Qt Project and open governance\n\n[edit]\n\nMain article: Qt Project\n\nQt 5 was officially released on 19 December 2012. This new version marked a major change in the platform, with hardware-accelerated graphics, QML and JavaScript playing a major role. The traditional C++-only QWidgets continued to be supported, but did not benefit from the performance improvements available through the new architecture.[137] Qt 5 brings significant improvements to the speed and ease of developing user interfaces.[138]\n\nFramework development of Qt 5 moved to open governance at qt-project.org, which made it possible for developers outside Digia to submit patches for review.[139]\n\nQt contributors\n\n[edit]\n\nAside from The Qt Company, many organizations and individuals using Qt as their development platform participate in the open development of Qt via the Qt Project.[140]\n\nOne such Qt contributor is Klarälvdalens Datakonsult AB, a Swedish Qt consulting company.[141] KDAB is involved in many areas, including maintenance of several components.[142][143]\n\nTogether with RIM/BlackBerry, KDAB is maintaining the QNX and BlackBerry 10 ports of Qt.[140][144]\n\nAnother participator is Intel, contributing for example Wayland support.[145] AudioCodes maintains IBM ClearCase support in Qt Creator.[146]\n\nAs a heavy user of Qt, the KDE project submits many patches and features from its developer library KDE Frameworks back to Qt.[147]\n\nSee also\n\n[edit]\n\nList of widget toolkits\n\nAndroid software development\n\niOS SDK\n\nWt (web toolkit)\n\nBibliography\n\n[edit]\n\nQt Wiki provides a comprehensive list of English books about Qt.[148] This is a list of notable books:\n\nReferences\n\n[edit]"
    }
}