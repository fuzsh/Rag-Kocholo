{
    "id": "dbpedia_5008_2",
    "rank": 49,
    "data": {
        "url": "https://opensource.com/article/21/6/qtcreator",
        "read_more_link": "",
        "language": "en",
        "title": "9 reasons I love to use the Qt Creator IDE",
        "top_image": "https://opensource.com/sites/default/files/lead-images/lenovo-thinkpad-laptop-concentration-focus-windows-office.png",
        "meta_img": "https://opensource.com/sites/default/files/lead-images/lenovo-thinkpad-laptop-concentration-focus-windows-office.png",
        "images": [
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/themes/osdc/logo.svg",
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/sites/default/files/lead-images/lenovo-thinkpad-laptop-concentration-focus-windows-office.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_dark_mode.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_custom_stylesheet2.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_cross_compiling.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_select_kits.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_analyzer.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_debugger2.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_fakevim_ex_commands.png",
            "https://opensource.com/sites/default/files/uploads/qt_creator_fakevim_build_commands.png",
            "https://opensource.com/sites/default/files/uploads/qtcreator_class_overview.png",
            "https://opensource.com/sites/default/files/uploads/qtcreater_special_config.png",
            "https://opensource.com/sites/default/files/styles/article_teaser/public/lead-images/programming_keyboard_coding.png?itok=ePvYP5D4",
            "https://opensource.com/sites/default/files/styles/article_teaser/public/lead-images/browser_web_internet_website.png?itok=QvQMcVZI",
            "https://opensource.com/sites/default/files/styles/150x150/public/pictures/avenwedde_stephan_4x6_cm_21-01-2014.jpg?itok=CyCMmw5g",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/collab-team-pair-programming-code-keyboard.png?itok=iEiqXXDv",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/programming_keyboard_coding.png?itok=OLBqPd92",
            "https://opensource.com/sites/default/files/styles/222x125/public/lead-images/code_computer_development_programming.png?itok=0kgDZpBf",
            "https://opensource.com/themes/osdc/assets/img/cc-by-sa-4.png",
            "https://opensource.com/themes/osdc/logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Stephan Avenwedde"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Qt Creator is the Qt framework's default integrated development environment (IDE) and hence the glue between Qt's rich set of libraries and the user.",
        "meta_lang": "en",
        "meta_favicon": "/themes/osdc/assets/img/favicons/favicon.ico",
        "meta_site_name": "Opensource.com",
        "canonical_link": "https://opensource.com/article/21/6/qtcreator",
        "text": "Qt Creator is the Qt framework's default integrated development environment (IDE) and hence the glue between Qt's rich set of libraries and the user. In addition to its basic features such as intelligent code completion, debugging, and project administration, Qt Creator offers a lot of nice features that make software development easier.\n\nIn this article, I will highlight some of my favorite Qt Creator features.\n\nDark mode\n\nMy first question when working with a new application is: Is there a dark mode? Qt Creator answers with: Which dark mode do you prefer?\n\nYou can activate dark mode in the Options menu. On the top menu bar, go to Tools, select Options, and go to the Environment section. Here is where you can select the general appearance:\n\nCustom appearance\n\nLike every Qt application, Qt Creator's appearance is highly customizable with style sheets. Below, you can follow along with my approach to give Qt Creator a fancy look.\n\nCreate the file mycustomstylesheet.css with the following content:\n\nQMenuBar { background-color: olive } QMenuBar::item { background-color: olive } QMenu { background-color : beige; color : black } QLabel { color: green }\n\nThen start Qt Creator from the command line and pass the style sheet as a parameter with:\n\nqtcreator -stylesheet=mycustomstylesheet.css\n\nIt should look like this:\n\nRead more about style sheets in the documentation.\n\nCommand-line parameters\n\nQt Creator accepts many command-line options. For example, if you want to automatically load your current project at startup, pass the path to the *.pro-file:\n\nqtcreator ~/MyProject/MyQtProject.pro\n\nYou can even pass the file and the line number that should be opened by default. This command opens the file main.cpp at line 20:\n\nqtcreator ~/MyProject/main.cpp:20\n\nRead more about the Qt Creator-specific command-line options in the documentation.\n\nQt Creator is an ordinary Qt application, so, in addition to its own command-line arguments, it also accepts the generic arguments for QApplication and QGuiApplication.\n\nCross-compiling\n\nQt Creator allows you to define several toolchains, called Kits. A kit defines the binaries and SDK for building and running an application:\n\nThis allows you to switch between completely different toolchains with just two clicks:\n\nRead more about kits in the manual.\n\nAnalyzer\n\nQt Creator integrates several of the most popular analyzers, such as:\n\nLinux Performance Analyzer (requires a special kernel)\n\nValgrind memory profiler\n\nClang-Tidy and Clazy, a linter for C/C++\n\nDebugger\n\nWhen it comes to debugging, Qt Creator has a nice interface for GNU Debugger (GDB). I like its easy way of inspecting container types and creating conditional breakpoints:\n\nFakeVim\n\nIf you like Vim, enable FakeVim in the settings to control Qt Creator like Vim. Go to Tools and select Options. In the FakeVim section, you can find many switches to customize FakeVim's behavior. In addition to the editor functions, you can also map your own functions to custom Vim commands.\n\nFor example, you can map the function Build Project to the build command:\n\nBack in the editor, when you press the colon button and enter build, Qt Creator starts a build process with the configured toolchain:\n\nYou can find more information about FakeVim in the docs.\n\nClass inspector\n\nWhen developing in C++, open the right window by clicking on the button in the bottom-right corner of Qt Creator. Then choose Outline from the dropdown menu on the top border. If you have a header file open on the left pane, you get a nice overview of the defined classes or types. If you switch to a source file (*.cpp), the right pane will list all defined methods, and you can jump to one by double-clicking on it:\n\nProject configuration\n\nQt Creator projects are built around the *.pro-file in the project's directory. You can add your own custom configuration to the project's *.pro-file of your project. I added my_special_config to the *.pro-file, which adds MY_SPECIAL_CONFIG to the compiler defined:\n\nQT -= gui CONFIG += c++11 console CONFIG -= app_bundle CONFIG += my_special_config my_special_config { DEFINES += MY_SPECIAL_CONFIG }\n\nQt Creator automatically highlights the code according to the active configuration:\n\nThe *.pro-file is written in the qmake language.\n\nSummary"
    }
}