{
    "id": "dbpedia_5008_3",
    "rank": 58,
    "data": {
        "url": "https://www.robopenguins.com/pixels-dice-box/",
        "read_more_link": "",
        "language": "en",
        "title": "Pixels Dice Box",
        "top_image": "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/finished_thumb_wide.webp",
        "meta_img": "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/finished_thumb_wide.webp",
        "images": [
            "https://www.robopenguins.com/assets/images/pebguin.png",
            "https://www.gravatar.com/avatar/89f0dac8b097e473f515d5217c0ac989?s=250&d=mm&r=x",
            "https://github.com/axlan/WLED/raw/v0.15.0-pixel-dice/usermods/pixels_dice_tray/images/status.webp",
            "https://github.com/axlan/WLED/raw/v0.15.0-pixel-dice/usermods/pixels_dice_tray/images/effect.webp",
            "https://github.com/axlan/WLED/raw/v0.15.0-pixel-dice/usermods/pixels_dice_tray/images/info.webp",
            "https://github.com/axlan/WLED/raw/v0.15.0-pixel-dice/usermods/pixels_dice_tray/images/roll_plot.png",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/boxes_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/jewel_box_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/schematic_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/wiring_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/cursed_adapter_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/inside_adapter_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/base_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/charging_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/inside_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/finished_thumb.webp",
            "https://www.robopenguins.com/assets/wp-content/uploads/2024/dice-box/simple_ui_thumb.webp",
            "https://github.com/axlan/WLED/raw/v0.15.0-pixel-dice/usermods/pixels_dice_tray/images/info.webp"
        ],
        "movies": [
            "https://www.youtube.com/embed/VNsHq1TbiW8",
            "https://www.youtube.com/embed/oCDr44C-qwM"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-06T00:00:00",
        "summary": "",
        "meta_description": "I made an IoT dice box to combine two of my favorite open source LED projects, Pixels Dice and WLED.",
        "meta_lang": "en",
        "meta_favicon": "https://www.robopenguins.com/assets/images/pebguin.png",
        "meta_site_name": "Robopenguins",
        "canonical_link": "https://www.robopenguins.com/pixels-dice-box/",
        "text": "I made an IoT dice box to combine two of my favorite open source LED projects, Pixels Dice and WLED.\n\nIâve wanted to sink my teeth into a more significant hardware project for awhile and actually give it a little polish. This builds on my previous Pixels Dice library work, to make something that is both functional, and nice to look at.\n\nTFT GUI\n\nMultiple Die Controlling Different Segments\n\nUsing the WLED Software\n\nThis blog post is mostly going to focus on the development and build process.\n\nSee the README at: https://github.com/axlan/WLED/tree/v0.15.0-pixel-dice/usermods/pixels_dice_tray for a full guide on how to setup and use all the functionality. That branch also has the full source for this usermod.\n\nYou can download the release for the compatible boards from: https://github.com/axlan/WLED/releases/tag/v0.15.0-pixel-dice\n\nOr use the web installer: https://axlan.github.io/WLED-WebInstaller/\n\nUnfortunately, it doesnât work on vanilla ESP32 chips, and Iâve only tested it working on the ESP32-S3. If you get an ESP32-S3 dev board or a LILYGO T-QT Pro, you should be able to use this software without installing anything or writing any code.\n\nHigh Level Features\n\nSeveral LED effects that respond to die rolls\n\nEffect color and parameters can be modified like any other effect\n\nDifferent die can be set to control different segments\n\nAn optional GUI on a TFT screen with custom button controls\n\nGives die connection and roll\n\nCan do basic LED effect controls\n\nCan display custom info for different roll types (ie. RPG stats/spell info)\n\nPublish MQTT events from die rolls for remote logging/actions\n\nAlso report the selected roll type\n\nControl settings through the WLED web\n\nBuilding the Box\n\nFinding the Box\n\nWhen I started the project, I had a general idea that I wanted to find a nice looking box I could hide a bunch of electronics in. After going to a few local thrift stores (I miss the days of yore when I could wander thrift stores looking for project inspiration), I had a couple candidates.\n\nThese both seemed viable, and I went back and forth for a few days. Eventually, I decided the wood box was a little too small, and integrating the die chargers would be too close a fit. So the red jewelry box won out!\n\nDeciding on the Electronics\n\nAnother thing I needed to decide was what to actually put in the box. The only thing I knew I wanted going in was the dice chargers, and a ESP32 to connect the dice to the Wifi.\n\nI had been considering things like capacitive touch buttons, and purely using the dice themselves as inputs. In the end, I decided to focus the interface design around a LILYGO T-QT Pro board I had available. Adding an LED strip seemed like a no brainer since what goes better with LED dice then more LEDs? I wanted it to be able to take USB-C power, since I wanted it to be able to be powered by my phone. In addition, I decided to throw a battery pack in there.\n\nAs you can see, I needed to âmodifyâ the battery to fit.\n\nActually getting the USB-C ports working with my phone was a bit difficult. I bought a pack of male and female USB-C receptacles with solder pads. The male side for connecting to the dice chargers worked fine, but the female side that connects to the power source didnât.\n\nI finally spent the time to actually read how USB-C works and how the devices determine which side is a power source/sink. https://hackaday.com/2023/01/04/all-about-usb-c-resistors-and-emarkers/ was a fairly helpful article. Eventually, I realized that the female side didnât have any resistors to indicate it was a power sink. Basically the same issue discussed here https://electronics.stackexchange.com/questions/595590/jrc-b008-for-usb-c-microcontroller-power-supply.\n\nIt is surprisingly hard to find adapters to purchase with the needed resistors. After looking through what I had lying around, I realized that certain USB-C to USB-A adapters need to have these resistors. I tried cutting one of the OTG phone adapters I had, but it was totally potted in epoxy. Eventually, I found this strange adapter: I have no idea what itâs from, but it was easy enough to extract the board I needed.\n\nPutting it Together\n\nFrom there the build was pretty straight forward. The jewelry box was cardboard with a layer of fabric, so it wasnât too hard to cut slots for the various peripherals. I got some nice right angle adapters for the USB-C connectors, and started putting things together.\n\nI wanted to put some art in the box, so I found the dice related art. I had them printed and laminated at my local office store for a couple bucks and mounted them in the box.\n\nWriting the Software\n\nFrom my previous project Writing an Arduino library for Pixel Dice I already had the core functionality for getting the data from the dice.\n\nI had also made a full dice controller application https://github.com/axlan/Pixels-Dice-ESP32-Gateway that combined my library examples with https://github.com/tzapu/WiFiManager. It provided a GUI to configure the ESP32 Wifi and the dices MQTT connection.\n\nFor this project I mostly wanted to add LED controls and polish the UI. Initially, I considered going with an exotic control scheme where the position of the two dice when a button was pressed would be the control mechanism, but in the end I decided to keep it a bit simpler. If I wanted to do elaborate controls based on setting the dice to certain positions, I could do that off device base on the MQTT events.\n\nMy first decision was whether to build on https://github.com/axlan/Pixels-Dice-ESP32-Gateway or try to add the functionality I wanted to WLED. Iâve mentioned WLED in many previous write ups. It has the best useability of pretty much any embedded project Iâve used.\n\nIt can be installed through from a website\n\nIt supports a wide variety of devices\n\nIt makes initial configuration very easy\n\nThe Wifi credentials can be set as part of the installation process\n\nIf the Wifi doesnât connect it makes an ad-hoc access point for initial configuration\n\nIt supports mDNS for LAN discovery\n\nIt has an app to simplify the mobile setup\n\nIt supports a wide variety of protocols\n\nMost of itâs functionality (like which pins it uses, or what kinds of buttons are connected) can be configured\n\nEven if Iâm only using a subset of itâs total capabilities, building off of WLED seemed like the way to go.\n\nOne of the many nice things is that WLED has a concept called âusermodsâ. These are basically extensions that can add special features (usually hardware specific), that donât make sense to include in the main build.\n\nI had used these in the past, but they had really expanded on the interface since Iâd last made one. For example you can add snippets of Javascript to your C++ code to modify the HTML for the config settings page in the web UI.\n\nAs a warmup I made a somewhat small usermod to integrate the TFT screen on the LILYGO T-QT Pro to show basic status information: https://github.com/Aircoookie/WLED/pull/4072. This refamiliarized myself with the portion of the WLED codebase Iâd be working with.\n\nWorking out of a VSCode devcontainer\n\nWLED uses the PlatformIO framework to handle library and cross-compiler management. When I tried to build the code directly I appeared to end up with incompatible library versions. To avoid needing to figure out the issues on my host PC, I decided to use a devcontainer. These are basically managed Docker images that let you start from a clean build environment managed by VSCode. While the software part of the build worked great in the container, I ran into issues accessing the serial port. I eventually figured it out:\n\nStill, itâs a bit annoying that I needed to restart the container when the COM port re-enumerates.\n\nDeveloping the usermod\n\nI tried to thoroughly document my code in https://github.com/axlan/WLED/tree/v0.15.0-pixel-dice/usermods/pixels_dice_tray, so take a look there as a starting place for using this mod or making complex WLED usermods. Here Iâll talk through some points of particular interest. These are are sort of âmetaâ features that streamline the process of adding higher level features.\n\nEffect Metadata\n\nWLED has a concept of LED effects/modes. These are animation or behaviors that run on segments of LEDs. They can be customized with parameters like speed, color, intensity, etc.\n\nTo make them discoverable, and determine how theyâre handled in the UI, they have a meta data string associated with them. The simplest example from my code was:\n\nThis means that when I bring this effect up in the UI it only shows the parameters I specified:\n\nCustomizing the Config Page\n\nTo let you customize the look of your configuration settings, you can specify Javascript code to run as the page renders\n\nwhere addInfo is defined in the javascript for rendering the page.\n\nFormatting Text for a Tiny Screen\n\nThe tiny screen makes its use a bit limited. Mostly as a proof of concept I wanted a way to show arbitrary pieces of formatted text. This would be useful if I wanted to reuse this project as a puzzle box, or something like that in the future. For now Iâm using it to provide basic stats for the pathfinder game I play in (see Pathfinder Lore Letters).\n\nFormatting text for the 128x128 screen is pretty tedious, so I wrote a quick and dirty Python script https://github.com/axlan/WLED/blob/v0.15.0-pixel-dice/usermods/pixels_dice_tray/generate_roll_info.py that turns a very simple markdown language into C++ functions that draw the text to screen. For example the string\n\ngenerates\n\nwhich draws\n\nTrying to Run on the ESP32\n\nThe LILYGO T-QT Pro board Iâm using uses a ESP32-S3, so thatâs what I was initially testing with. However, I wanted to make this as easy to set up as possible, so I tried to get it working on the original ESP32 as well.\n\nFirst, the BLE stack requires a lot of flash. I had to make a special partitioning plan to even fit the build on 4MB devices. This only has 64KB of file system space, which is limited, but still functional.\n\nThe bigger issue is that the build consistently crashes if the BLE scan task starts up. Itâs a bit unclear to me exactly what is failing since the backtrace is showing an exception in new[] memory allocation in the UDP stack. There appears to be a ton of heap available, so my guess is that this is a synchronization issue of some sort from the tasks running in parallel. I tried messing with the task core affinity a bit but didnât make much progress. Itâs not really clear what difference between the ESP32S3 and ESP32 would cause this difference.\n\nAt the end of the day, its generally not advised to run the BLE and Wifi at the same time anyway (though it appears to work without issue on the ESP32S3). I tried modifying the code to turn off the Wifi when the BLE discovery scans were running, but still hit crashes. While itâs possible the issue is relatively simple, it was also possible it might be extremely complicated. Rather then spend an unknown amount of time chasing this, I decided just to make this usermod esp32-s3 only.\n\nSetting up a Web Installer\n\nOne interesting feature of WLED that I hadnât looked into before was its web installer https://install.wled.me/. This is based on the https://esphome.github.io/esp-web-tools/, which is an implementation of the Espressif board flashing tools in Javascript. Apparently browsers have a serial port API these days.\n\nThe basics are pretty simple, you put some Json metadata about your builds (the versions, feature variants, and different targets) along with the binaries on your web server. The esp-web-tools talks to the board over serial, and tried to pick the right variant to flash.\n\nThe WLED project hosts their page from this github repo https://github.com/Aircoookie/WLED-WebInstaller, so I made a fork for my usermod https://github.com/axlan/WLED-WebInstaller.\n\nThis was fairly straightforward for esp8266 and esp32 boards, but now that thereâs a lot more variants (esp32c3, esp32s2, esp32s3), and that these variants can have different RAM and flash capabilities, the matrix of builds has gotten a lot more complex.\n\nOne thing that threw me for a loop was the binary âpiecesâ that need to be flashed. At first my binaries werenât through the web installer so I captured what Platform IO was doing:\n\nBasically, these are artifacts needed for the startup process https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/startup.html\n\nWhile it seems like some of these pieces are common across boards, it seemed most robust if I used all of these artifacts for the flashing process.\n\nConclusion\n\nThis is the biggest project Iâve done in quite awhile. I really wanted to give it as much polish as possible, but even so I had to figure out where to call it quits. I decided to try to make it as simple to use as possible, but my idea of simple is probably a bit skewed. I decided not to go with a more arcane interface, and mostly just lean into the already great WLED UI. Iâm disappointed I wasnât able to get it running on all ESP32 variants, but I needed to stop somewhere.\n\nLooking forward to using it at my next game, and hopefully it adds some sparkle to the game."
    }
}