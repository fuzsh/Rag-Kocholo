{
    "id": "dbpedia_5008_0",
    "rank": 13,
    "data": {
        "url": "https://stackoverflow.com/questions/17097901/which-qt-project-type-we-should-use",
        "read_more_link": "",
        "language": "en",
        "title": "which Qt project type we should use?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/fc53338765e135c4472e8161c3634cfb?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/uJMkF.png?s=64",
            "https://www.gravatar.com/avatar/db3f8210c2a130aa6cb51899a98bcf73?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/e3bea36da7e3c24d4baf1bfc75a4be70?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/17097901/ivc/c9fe?prg=d2b6a8df-dfaf-40a9-aff8-7c317c798ee9"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-06-13T22:00:58",
        "summary": "",
        "meta_description": "New to Qt. In the official Qt tutorial, it says:\n\nTo set up a project, you first have to decide what kind of an application you want to develop: do you want a user interface based on Qt Quick or HT...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/17097901/which-qt-project-type-we-should-use",
        "text": "Docs say:\n\nQWidgets are a better choice if your UI is comprised of a small number of complex and static elements, and QML is a better choice if your UI is comprised of a large number of simple and dynamic elements.\n\nI say:\n\nIf you're going for desktop applications I'd suggest Qt Widgets, you don't have to ship the final app with libs for QML and the whole source will be written in C++ (faster, simplier so easier to debug).\n\nQML would be a nice alternative if you want to create phone/tablet (touch experience in general).\n\nI would argue that between Qt Quick and Qt Widgets there is no objectively right answer. In theory, one should be able to replicate any UI using either method - because at the end of the day, they are both using QtGui behind the scenes. So functionality is probably not an issue.\n\nOne thing to note is that Qt Quick (i.e., QML) is designed explicitly to make UI programming require much less code, and much less C++ knowledge. I would say it achieves this goal very well.\n\nHowever, at the end of the day, I think it mostly comes down to what language your developers are already familiar with. If you have a team of C++ pro's, then I would go with Qt Widgets - if only because it's going to be very easy for them to pick up, and it's something they're already familiar with. (I'm guessing this is the case because you're already writing C++ code for your project).\n\nIf, on the other hand, your developers are already very good at QML (or, more generally, JavaScript - which QML is heavily influenced by), then I would go with Qt Quick for the same reasons.\n\nI know of two types of Qt UI: Qt Quick and widgets.\n\nWidgets behave like most other UI toolkits out there, you have a GUI editor and a tree of UI objects. They are pretty mature and look like most standard UIs.\n\nQt Quick is the newer Qt UI toolkit. It uses a domain specific declarative language (QML) to specify the user interface and JavaScript for interactions. There are also plans to offer Qt widgets inside the Qt Quick framework, but I'm not sure how far that project has gotten. Qt Quick is meant to deliver more dynamic / custom user interfaces.\n\nAs far as I know Qt will continue to support both approaches in the foreseeable future so which one you pick depends on your use-case."
    }
}