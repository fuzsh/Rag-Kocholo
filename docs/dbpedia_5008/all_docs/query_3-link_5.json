{
    "id": "dbpedia_5008_3",
    "rank": 5,
    "data": {
        "url": "https://bluefruit.co.uk/quality/the-pros-and-cons-of-qt-part-one/",
        "read_more_link": "",
        "language": "en",
        "title": "Qt: A business-side perspective",
        "top_image": "https://bluefruit.co.uk/content/uploads/2019/06/blue_favicon-150x150.png",
        "meta_img": "https://bluefruit.co.uk/content/uploads/2019/06/blue_favicon-150x150.png",
        "images": [
            "https://bluefruit.co.uk/content/uploads/2019/06/BLUE_Logo_Core-Purple.svg",
            "https://bluefruit.co.uk/content/uploads/2024/04/Copy-of-Test-boundaries.gif",
            "https://bluefruit.co.uk/content/uploads/2020/09/elga-veolia-300x57.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/watson-marlow-fluid-technology-group-logo-vector-e1600248799406-300x130.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/agc-instruments.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/Cooper_Surgical-1-e1600865316484.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/189px-Schneider_Electric_2007.svg.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/pngguru.com_-300x235.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/drayton-logo-new-300x138.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/logo-allenheath-e1600248647935-300x87.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/MODEC-Logo.wine_-e1600248576153-300x121.png",
            "https://bluefruit.co.uk/content/uploads/2020/09/Cosworth-Logo.wine-1-e1600247888436-300x118.png",
            "https://bluefruit.co.uk/content/uploads/2019/06/BLUE_Logo_Core-White.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tristan Jago",
            "Venn Creative"
        ],
        "publish_date": "2024-04-09T09:26:16+00:00",
        "summary": "",
        "meta_description": "Is Qt right for your project? Bluefruit's Founder, Paul Massey, makes a case for Qt's advantages: uniformity, portability, testing, and more.",
        "meta_lang": "en",
        "meta_favicon": "https://bluefruit.co.uk/content/uploads/2019/06/blue_favicon-150x150.png",
        "meta_site_name": "Bluefruit Software",
        "canonical_link": "https://bluefruit.co.uk/quality/the-pros-and-cons-of-qt-part-one/",
        "text": "Qt is a widget toolkit primarily used for creating graphical user interfaces (GUIs) and cross-platform applications. These applications can run seamlessly on various software and hardware platforms such as Windows, macOS, Android, and Linux, often requiring little or no change in the underlying codebase.\n\nHowever, for all its strengths, Qt is not universally beloved. In this two-part blog, we take a look at the high-level business reasons that make it valuable to our clients, as well as the reasons that software developers might not be so keen.\n\nIn this first part, Bluefruit founder Paul Massey explains the benefits of Qt from the business side.\n\nIn this blog:\n\nCross-platform uniformity\n\nPortability\n\nTooling for testing\n\nGetting everyone on the same page\n\nCross-platform uniformity\n\nIn the past, user interfaces (UIs) were coded entirely from scratch. However, as user expectations shifted towards visually appealing interfaces, frameworks like Qt gained popularity. Originally designed to simplify GUI development, Qt has grown beyond its roots but remains the framework of choice for creating rich user experiences.\n\nIt provides a vast library of pre-built widgets and elements like buttons, text boxes, menus, and so on, allowing developers to quickly assemble UIs.\n\nSome hardware manufacturers have seen an opportunity here, providing their own graphical frameworks, specifically optimised for resource-constrained environments such as microcontrollers. However, customers using such proprietary frameworks may find themselves “tied in” to that manufacturer if they wish to maintain consistency across their range of devices.\n\nIt’s not unheard of for companies to suddenly realise that most of their products are dependent on a single external supplier—a significant business risk.\n\nQt, by contrast, is open-source (or, at least, partially), cross-platform compatible, and supported by major hardware manufacturers, including STM and Texas Instruments.\n\nThis allows device manufacturers to create the GUI they want and keep it consistent across their entire product range, regardless of underlying hardware.\n\nThis brings us to…\n\nPortability\n\nQt is really useful for developing applications with a high degree of portability. This stems from several key factors:\n\nCross-platform development: Qt utilises a single codebase that can be compiled and run on various operating systems, including Windows, macOS, Linux, and embedded systems. This reduces the need to write and maintain separate codebases for different platforms, saving time and resources.\n\nAbstraction layer: This shields developers from the underlying differences between operating systems and allows them to focus on the core application logic without getting bogged down in platform-specific details.\n\nFamiliar UI elements: Qt applications can leverage a platform’s widgets—buttons, menus, text boxes, progress bars, and so on—and styles, ensuring the application integrates with the user’s environment. This enhances the user experience and fosters a sense of familiarity.\n\nAchieving perfect portability might require some platform-specific adjustments, but Qt offers tools and libraries to manage these variations.\n\nTooling for testing\n\nWhether you’re using automated or manual testing, setting appropriate test boundaries is important for ensuring complete test coverage.\n\nAt one end of the scale, we can restrict a boundary to individual software blocks (unit testing); at the other, we can set a test boundary around the entire system, which might require more complex test methods such as using robotic process automation (RPA) to physically interact with the system and cameras to monitor screens.\n\nExpanding the test boundary allows for more comprehensive testing, providing a more accurate representation of the real-world use of the system, including hardware testing. While beneficial, this approach also has its downsides: as the test boundary expands, tests can become more brittle. For instance, if you were to change a screen layout, it might cause a test involving a robot pushing a specific button to fail.\n\nQt applications, however, can be tested across a broad range of boundary sizes.\n\nTools like Squish offer automated UI testing. It allows developers to record and playback user interactions and supports writing more complex test scripts. Its property-based identification helps tests remain functional even with minor UI adjustments.\n\nFor instance, a button can be tested by sending a message to the test framework saying: Press the button with the ID, ‘Start’. Unlike the robot test, that button will be pressed wherever it has been moved.\n\nQt can also integrate with external hardware testing frameworks, allowing development teams to leverage tools like robotic arms or device emulators to test the system as a whole.\n\nGetting everyone on the same page\n\nFrom the business side, Qt has some powerful advantages. However, most engineers will not necessarily consider these when designing technical architecture. They’re more likely to care about performance: How easy is it to code? How flexible is it? Can the processor be changed? And so on.\n\nThese are all crucial considerations and a well-chosen framework should address them effectively.\n\nIn a previous blog, we discussed the Agile principle of ‘optimising the whole’. This emphasises the inclusion of stakeholders from across the business in architectural decisions—technical, collaboration, tooling, and documentation.\n\nThis holistic approach prevents knowledge silos and can ensure that the chosen framework addresses both technical needs and testability.\n\nQt’s strengths that we’ve discussed—uniformity of design, portability, and test tooling—span each architecture type and help development teams work towards this optimisation. This makes it a valuable asset for businesses seeking efficient and effective UI development, and, as such, Qt deserves strong consideration when deciding on framework options.\n\nIn Part Two…\n\nThere are clearly some substantial advantages to Qt from the business side, but what do developers think? In Part Two, we will talk to one of Bluefruit’s senior developers, who takes quite a different perspective."
    }
}