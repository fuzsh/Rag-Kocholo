{
    "id": "dbpedia_8757_2",
    "rank": 27,
    "data": {
        "url": "https://problemmachine.wordpress.com/category/sound-design/",
        "read_more_link": "",
        "language": "en",
        "title": "Problem Machine",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://problemmachine.wordpress.com/wp-content/uploads/2012/06/header2.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/12/2022-11-000-soundmakr.jpg?w=839",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/12/2022-11-001-sfxr-bfxr-ufxr.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/12/2022-11-002-soundmakr-controls.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/12/2022-11-003-soundmakr-player.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/04/silent-hill-1.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/04/silent-hill-2.jpg?w=800",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/04/silent-hill-3.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2022/04/sealofmetatron-1.jpg?w=687",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-000-scene.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-001-spider.jpg?w=884",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-002-ghoul.jpg?w=896",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-003-flies.jpg?w=854",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-004-dog.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-005-birds.jpg?w=836",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-006-corpses.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-007-rats.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-008-flinger.jpg?w=881",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-009-mannequin.jpg?w=872",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/11/october-2021-010-maggot.jpg?w=946",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/05/april-2021-001-prototype.jpg?w=1024",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/05/april-2021-002-carnifexportrait1.jpeg?w=96",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/05/april-2021-003-mapeditor.jpeg?w=400",
            "https://problemmachine.wordpress.com/wp-content/uploads/2021/05/april-2021-004-inventory.jpeg?w=763",
            "https://problemmachine.wordpress.com/wp-content/uploads/2016/02/psycho_1.jpeg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2015/03/hlm2_poster-cropped.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac1.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac00.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac02.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac01.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac04.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac05.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac06.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/12/isaac03.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/2014-10-15_00009c.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/2014-10-15_00012r.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/2014-10-14_00001c.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/2014-10-15_00010c.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/2014-10-15_00013r.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/bear.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2014/10/neverending_nightmares_img3_mini.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2012/10/eveheader.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2013/08/st11.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2013/08/shiningblood.jpg",
            "https://problemmachine.wordpress.com/wp-content/uploads/2013/08/ad.jpg",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [
            "https://www.youtube.com/embed/c3PFQJtpk6M?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Posts about Sound Design written by problemmachine",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Problem Machine",
        "canonical_link": "https://problemmachine.wordpress.com/category/sound-design/",
        "text": "(Note: This post is going up quite late into the month, but I actually wrote most of it up at the start of December. The necessity of capturing images and movies to accompany these posts has become a significant bottleneck, not because it’s so very much work but simply because I’m either working on the game and want to be focusing on making progress or not working on the game in which case I don’t want to open the project when I’m meant to be taking a break. I probably just need to get in the habit of taking more screenshots and recordings as I go.)\n\nThis month was quite a divergence. I mentioned in the last DevBlog that I’d started working on replacing the sound effect generation system used in the project; I linked to a little cohost post going into some detail on the challenges as I think perceived them, but I didn’t go into much detail in the post itself. However, as the last month has been spent almost entirely on working on this sub-project, I’m going to go into detail here. Before I do, though, here’s a little video of the whole thing in action:\n\nFirst, some background: Back in 2007 a little sound-generation tool called sfxr was released. This was shared with the indie game-dev community as a tool for quickly and easily generating sounds particularly for use in game jam projects, where impressive quality was a lower priority than speed and convenience. It quickly became a standard tool; it’s very likely that something you’ve played uses sounds generated by sfxr, particularly if it’s a retro-style indie game. In the 15 intervening years, various ports and variations have been developed, with two in particular of interest: First, bfxr, a version which adds several new parameters and which can save the sound parameters to files for later modification; and, second, the lesser-known ufxr, a Unity port of sfxr with most of bfxr’s features.\n\nThis latter was what I found when, a year and a half ago, I started this project. I was curious whether someone had made a version of sfxr that ran natively in Unity, which simulated the sounds in real-time, and wondered what-all one might accomplish with such a tool. ufxr did not turn out, in the end, to be such a tool: While it did have ways to play sounds directly, the way it achieved this was by creating an object, completely rendering the sound, loading it into the object, and then deleting the object once the sound playback was complete. This works fine if you’re just playing occasional sounds with little concern for latency, but caused significant performance issues when new sounds needed to be played every frame – and, of course, I wanted every sound played to be a bit different, because otherwise what’s the point of simulating them, rather than just rendering out a sound and playing it normally?\n\nAs a sort of stop-gap, I built a system that cached a set number of mutations for each sound and played them back randomly. This still wasn’t great! The game lagged significantly on start-up as it rushed to render and cache every sound, and the sounds only started playing once the caching operation had finished so the game was mute for a while after starting. Furthermore, because the way mutations worked was just a random percentage deviation for each parameter, it was very common for sounds to end up being a bit off – becoming way too loud or too long as some parameter drifted outside of the expected zone and completely changed the feel of the sound. This outcome was invisible beforehand and difficult to address once it came up.\n\nThis obviously wasn’t going to work. I needed to do something: I could strip out the whole apparatus, render the sounds to wave files, and play them back. This would be the easy and smart thing to do, being pretty much how most games handle sound playback. It was, of course, unacceptable to me, because I am a maniac. No, rather than this completely reasonable solution, I decided to create my own sound effect synthesizer in Unity – not just a port of sfxr, though I was certainly inspired by it and shamelessly stole all of the ideas I could get my hands on, but something built from the ground up in the way that made the most sense to me.\n\nThis sub-project, which I now call Soundmakr, is basically done now. Developing this system took the whole month, which is honestly fine – while I was hoping it would take less, I was also concerned it might take more, and I am quite pleased with the result. I’m going to go into some detail onto what went into this now, and the steps it took to bring this to fruition.\n\nFirst things first, I had to generate a sound. A sound, from a programmer’s perspective, is just a big array of numbers between -1 and 1 representing the waveform. Normally one would play such a sound by loading it into a Unity Audio Source and letting it play, but that means you have to do the whole thing at once which just leads back to the unacceptably slow methods I was trying to avoid. Fortunately, Unity provides another way: A function called “OnAudioFilterRead” which is automatically called on any script that shares an object with an audio source. Though, as the name suggests, this is meant to process audio, it also makes it possible to write your own data into the audio buffer – which is exactly what I did. I copied all of the basic waveforms used by ufxr, most of which were pretty straightforward, and was able to play them using this function. A good start!\n\nIn addition, I created equivalents to the other basic waveform parameters: The duty cycle value, previously only used by square waves, was replaced with a generalized “cycle bias” value that could be used to modify other waveforms in the same way, such as by shaping the triangle wave into a saw wave. I don’t know if this is a common synthesizer ability or if there’s a more established name for it that I’m ignorant of. I recreated the phase-shift effect, which combines the waveform with a slightly shifted copy, and the harmonic overtone effect which combines the waveform with copies at various multiples of the frequency. The “bit crush” effect was replaced with simply having a variable sample rate – though the true output sample rate was locked at whatever Unity’s audio settings had set, the actual synthesizer only simulates at the set sample rate. This makes the synthesizer significantly more efficient, but I’m still not sure how many troublesome side-effects it may be creating…\n\nRegardless, once I had a basic waveform, I had to control how loud it was. Sfxr uses a simple sound attack-hold-release envelope system, where the sound fades in over the attack period, is held for a period, then fades out over the release period. These are the standard terms used in musical synthesis, though in sfxr itself it uses the terms sustain and decay for hold and release, and adds a sustain punch value which is added to the volume during the hold phase. I replaced this envelope with the much more standard attack-decay-sustain-hold-release envelope: This fades in during attack, decays down to the sustain level (equivalent to “sustain punch” + 1), is held for the duration of the hold value, then fades out for the duration of the release. This may seem like a pretty minor change, but one of the things I would like to do someday is adapt this towards musical use – in which case little changes like this could be pretty important.\n\nOkay, I have a sound that fades in and out! It’s a synthesizer! However, to have something equivalent in functionality to what I was replacing, I needed to add filters. This was a task I severely underestimated: While I knew enough about waveforms and envelopes to bang out serviceable ones in a couple of days, I quickly found out I didn’t know shit about filters. For those who haven’t done audio work, a filter is usually a tool for boosting or attenuating certain frequencies of a sound – but what is a frequency? When you’re working at the level of individual audio samples, values between -1 and 1, nothing you can see in a sample indicates what the frequency of the sound is. Looking at the source code to the predecessor tools I was working from didn’t seem to help: The filter functions remained bafflingly opaque. What I learned, in the many days subsequently spent trying to understand filters, is that filters are very complicated.\n\nI’d need to take at least one class to really understand filters, but I managed to scrape together enough to have enough functional knowledge to move forward. To sum up: We can infer the frequency of a sound based on the rate it’s changing over time, and we can calculate that based on the differences between the current sample and N previous samples. We can also attenuate the sound by mixing in the same sound offset a given number of samples – since a sound added to an inverse version of itself is silence, and a sound phase-shifted by its cycle length is more-or-less inverted. This is, as I understand it, the principle noise-canceling-headphones work on. This was all nowhere near enough to allow me to devise a suitable filter, or even really to understand the filter code I was working at, but it was enough to allow me to look through a number of pre-built filter solutions online until I found one that mostly worked and then bang on the relevant parameters until it was what I needed. I actually thought I finished getting filters working several times before finally getting something functional – I at least hope that it’s finished now.\n\nOkay! But… the sfxr synths don’t just play a sound that fades in and fades out, do they? They have all these other parameters: Vibrato, frequency sweep, change amount, and so forth! Here’s the part of the project I’m proudest of, my unique contribution to the lineage: Rather than having all these individual sliders and oscillators, I created a system of Low Frequency Controllers. There are four of these: Sweep, Oscillators 1 and 2, and Step. Sweep changes the controlled value proportional to time, with an additional acceleration parameter; the oscillators control the value according to a waveform and frequency, with the waveform having all the same available shapes as the main tone-generating oscillator; and the step controller changes the value at set intervals, with an option to periodically repeat.\n\nWhile in the *fxr synthesizers only a few parameters have controls like these, in my synth nearly any value can be controlled. One of the reasons this is possible, from a purely performance-related perspective, is most of these only need to be simulated at most a hundred times a second to sound smooth, as opposed to the thousands of updates per-second needed to generate a tonal waveform, so adding new effects should cost almost nothing in terms of performance. The challenge, however, was how to create an interface for having and modifying all of these available controls without becoming a complete overwhelming mess: I am quite happy with the solution I developed.\n\nNew controls can be quickly added (or removed) by clicking the icons to the left of the value to be controlled. Controls are color-coded for quick visual reading, and this with the connecting lines makes it quickly obvious which control type maps to which icon. Universal control values, such as the oscillator waveforms and sweep speed multiplier, are all in their own color-coded sections at the bottom.\n\nThough I’m quite happy with where this interface ended up, working with Unity’s Editor was A Struggle as always. You may have noticed the knob controls on the right and that some sliders have a range of values instead of a single value: This controls the sound mutations, changes that happen every time the sound is played. This particular knob control interface is a largely undocumented and unused Unity feature, and it took a lot of trial and error to get it working – that I bothered at all is mostly a testament to how perfectly this control type met my needs for controlling this particular parameter. Nearly every value can be mutated, and once it is the slider is converted to a double-slider so you can easily set the acceptable bounds for the sound. Another subtle challenge was that of playing the sound when the game was not running – as it turns out, OnAudioFilterRead doesn’t work in the editor, at least as far as I was able to tell. To handle this, I simply created a hidden background object to play the sounds. This required rendering the sound completely before playback, something I largely wanted to avoid, but since it’s just for one sound at a time while running the editor it’s not a big deal (this technique was necessary anyway in order to export sounds as wave files).\n\nNow I had the sound editor and the synthesizer working almost perfectly, as far as I could tell. I began the work of porting it into the Bound City project… and quickly noticed Some Issues. Most immediately, every sound in the old system was addressed by string identifiers, names which were not present at all in the new sound type. It would be easy enough to add a name to each sound, but this felt pretty sloppy – why should a sound need a name? Instead, I gave each Sound Player a library, a little list of known sound files which could be assigned string aliases for quick and easy playback. I also did a little interface work to make building sound libraries quick and painless.\n\nThe biggest stumbling block here, near the end of the sub-project, turned out to be the difficulty of porting sounds from old system to the new one. I hadn’t set out to do it this way, but the whole structure of my synthesizer was almost completely different to that used by sfxr – rather than building out each sample one value at a time, modifying each parameter as it went, my synth merely took in whatever the currently elapsed time since the beginning of simulation was and returned whatever sample was appropriate at this point in time. Doing this made it very difficult to convert from *fxr parameters to the sorts of parameters I was using. Additionally, my filters worked in a completely different way than the *fxr filters, so I have no idea how one could meaningfully convert those values. For the most part, I just ended up experimenting via trial and error to figure it all out – and, for the most part, this was enough to import sounds vaguely similar to the ones I had before, but each and every one of them required lots of tweaks and modifications. I got all of the sounds ported from the old system to the new one, but it took several days.\n\nOkay! It’s done! Is it? Well, mostly, for now. I have a number of ideas for improvements I would like to make, and I’m still finding little bugs and issues and fixing them as I get to them. Most improvements can be deferred for a while yet, since they’re more in the realm of expanded and advanced functionality. A few tweaks, making some behaviors more consistent and intuitive and getting a couple of minor features working, might happen much sooner. I’ve also been considering how I might want to go about publishing and/or selling this work: Though this required significant labor on my part, at the start of it all it was based on a freeware tool so I feel slightly scummy just selling it outright. On the other hand, I am very proud of it and would like to both share it and to make money from it! Most likely in the near future I will build a Unity UI for it – that is, the Unity player, not the editor – and release that as a freeware version of the tool, one capable of building and playing and saving all of the same sounds. Meanwhile, the version I’m using, the one that simulates sounds in real-time during gameplay, will be available for purchase on the Unity Asset store… that is, once I build the demo version, once I write up the documentation, once I make the store page, etc. I may try to focus on that more around the dead area that always pops up near the end of the year. I will certainly post about it here once I do.\n\nSo, with that all mostly behind me, I’m working on the game again. Much as I left it, there’s not much left to do for this demo version… the demo version I originally planned on reworking the sound after releasing. Will it be done by the end of the year? Maybe! I’ve mostly been fidgeting with this and that, making slight improvements, making everything a little nicer and fixing minor bugs. As I settle into it more, I hope to finish banging out the largely-minor changes that need to be done to wrap up, testing everything, ensuring everything’s in place, adding stuff that I only belatedly notice is missing, and so forth. It feels good to get something done, at any rate.\n\nIf you’d like to help support this project or my writing, please consider supporting me on Patreon.\n\n“In my restless dreams, I see that town.”\n\nI miss Silent Hill. The games are still around, of course, and perhaps I ought to replay them – but you can’t really go back, and any replay is going to be more recollection than discovery. What I want, of course, is something which is capable of evoking the same sensations, the uncertainty and discomfort and doubt, the painful ugly beauty, but which doesn’t feel like a relic of a bygone age – and that is, for various reasons, an awful lot to ask.\n\nWhat is it, specifically, that I dream of? Each of the three games of the original Silent Hill trilogy, while being broadly similar to one another, offer something different. The first game came out for the original Playstation, and has aged quite harshly – though some argue that the abstract confusion of its ancient polygons create more effective horror by forcing the player’s imagination to do more work. Coming out in 1999, Silent Hill was strongly inspired by Twin Peaks, and shares some of the same themes, such as a small nostalgic American town concealing deep and disturbing darkness and alternate worlds with warped doppelgangers. While you do find out more about what is causing the strange twisted monsters and shattered edges of the world to manifest over the course of the game, no hard answers are offered: Nonsensical things happen, many surreal explanations emerge, but while some are more convincing than others none become completely dominant or definitive.\n\nPerhaps Silent Hill was never well-suited to having sequels: It’s difficult, after all, to follow up a plot when that plot is so abstract and left so full of questions. Somehow, despite this, Silent Hill 2 was developed and is considered by many to be the pinnacle of the series. One might ask, how did it so successfully resolve the abstract conflicting ideas of the first game’s plot? The answer, of course, is that it didn’t try to whatsoever – no, rather than continuing the plot of the first game, Silent Hill 2 assumes that Silent Hill has seemingly become a warped spot in the universe, a place anyone can stumble into, a place for penitence and reflection and suffering. Where the monsters of Silent Hill 1 were eventually revealed to be the warped and agonized imaginings of the child Harry was trying to rescue, the monsters of Silent Hill 2 are the warped and agonized imaginings of the hapless guilt-ridden people who found their way into this hellish purgatory. Though the series is broadly considered “psychological horror,” Silent Hill 2 is the entry where the horror is most closely tied to the psychology of the particular characters, the world around James taking shape to echo his guilt back towards him in extremely specific ways. Though it’s still horrifying, the tenor of the horror is notably different: An overwhelming sensation of sorrow and loss, of decay, of regret, rather than of acute pain and immediate violent threat.\n\nWhile Silent Hill 2 dodged the question of what exactly was going on with Silent Hill 1, Silent Hill 3 removed any and all ambiguity and described exactly what was happening and why. This was a regrettable choice in my opinion, but these narrative weaknesses were counterbalanced by incredibly strong visual design and set-pieces. The moment-to-moment violence and uncertainty of Silent Hill 1 came back, but augmented with the new rendering capabilities offered by the Playstation 2: Fleshy walls bulged out from their moldings, threads of fluid pulsed, creating an uncomfortably organic and hostile space through which the player had to guide Heather, the smallest and most vulnerable protagonist of the series.\n\nA few very distinctive gameplay characteristics were constants across all three of the games:\n\nFirst, the radio: Very early on, the player finds a radio playing static and picks it up. It quickly becomes evident that the static gets louder when living enemies are nearby and goes silent when they aren’t. I don’t think any explicit reason for the creatures creating radio static is ever brought up, but it has quite an interesting impact: Having this perfect information on when danger is nearby makes jump scares all but impossible, but makes the tension of imminent danger inescapable. The effect of this static is particularly interesting in a game where so much of the score is abstract industrial sounds stacking rhythmically against one another – the static and the music are similar enough in tone that each area’s music is extremely effectively tension-building. All the more because of…\n\nSecond, the darkness. Many games, particularly horror games, have some form of “darkness,” of visual obfuscation: Silent Hill has several. In the first world, the only somewhat terrifying one which still bears some resemblance to reality, the darkness is a pervasive fog that makes it impossible to see far ahead, and in the second it’s pitch blackness, a complete absence of light. Many people noticed at the time that this was effective both as a means of improving performance, by reducing the amount of geometry that had to be drawn at any moment, and as a means of building tension – and this limitation of information had a particularly interesting effect in contrast with the radio’s provision of free information. However, there’s a third form of “darkness” that is less frequently noted: That of the game’s set perspective points, locking the camera to certain locations situationally, usually resulting in downwards angles that prevent long sight-lines. Such camera angles were actually the norm in Silent Hill’s predecessors, Alone in the Dark and Resident Evil, since these games relied on pre-rendered backgrounds – it is notable that even after obviating the need for these by making a wholly rendered (albeit crudely so) 3D world, Silent Hill still kept these angles for many situations.\n\nThird, terrible controls. These were also standard for the genre at the time: Alone in the Dark established the norm which Resident Evil and Silent Hill followed, and in all cases it had much to do with the locked camera perspectives. Because the player didn’t have control of the camera, it was difficult to have controls relative to the camera’s angle, controls which would unexpectedly flop in different directions, so these games all embraced what are now called “tank controls”, where you could just turn left or right and move forward or back, driving the character like a tank. Now, I’m not going to make the contrarian argument that these controls were good, actually – only that they did serve a purpose. It was impossible to react quickly and fluently to threats, making those threats fundamentally more threatening through an enforced clumsiness.\n\nOne reason, perhaps, why there hasn’t been another Silent Hill in some time is at least two of these would be considered terrible game design in the context of most modern games. Almost no games are interested in obscuring visual information any more: “Darkness” is seldom truly dark in modern games, visual information is usually easy to parse out at any distance regardless of how dark a room is presented as being. This might be defended as an accessibility consideration, except dimly lit environments full of clutter are still quite present – thus we find the worst of both worlds, a dim and difficult to interpret space that nevertheless conceals nothing and leaves nothing to the imagination. Moreover, there’s simply no room for locked camera angles in 3d games any more – unless we want to countenance a return to tank controls it’s difficult to imagine a way around that one. Of course, finally, when nothing is truly obscured, what’s the point of a radio telling you danger is nearby? Rather than ratcheting the tension, most of the time it will simply lead you to turn around and see the danger.\n\nPerhaps a greater obstacle than the tenets of “good game design”, though, are those of “good graphics”. While the latter two Silent Hill games looked remarkably good for the time, and still hold up reasonably well, the “trick” of creating more impressive and impactful environments on a limited processing budget by restricting draw distance has been obsoleted. Now processing power is nearly unlimited and we have whatever we need to draw as much garbage as we want on-screen. With this leeway, making a big budget horror game, trying to square the circle of concealing information while making everything look impressive, has approached impossibility. It’s as though, hearing the anecdote about how the animatronic shark used in Jaws looked so terrible that they tried to put it on-screen as little as possible, someone decided “well obviously we need to remake Jaws with a perfect 3D-rendered shark and put it on-screen as much as possible!”\n\nNot only would many consider the Silent Hill games to have Bad Game Design and Bad Graphics, many might also describe them now as having Bad Writing. Most of the major plot points happen off-screen long before the games start, most of the information you find about what’s happening is fragmented and contradictory, character motivations seem muddy and confused and there are seldom any definitive answers. What’s left is something intrinsically unsatisfying to anyone who wants a defined plotline with an absence of “plot holes”; something dream-like, confusing, and open to interpretation.\n\nOne of the reasons I first fell in love with Dark Souls was because it reminded me so much of the Silent Hill games. Sure, the setting and mechanics are substantially different, but they have so much in common: Bad Game Design, Bad Graphics, and Bad Writing, some might say. Like Silent Hill Dark Souls has clumsy movement, truly stiflingly dark areas, and so much abstract and contradictory background information that it is in the end always a matter of interpretation what any of it means – so much so that people have launched careers off of these interpretations. The real similarities emerge, though, when one considers the specific style of horror that Dark Souls embraces: The quiet pathetic horror of those who have seen too much, who have given up, who slowly sink deeper into the decay of their rotting world. The poor lost souls wandering through Silent Hill are, in the end, very much like those who wander through Lordran.\n\nAs I work on building out my own game, I keep noticing bits and pieces of Silent Hill bubbling up in the world design, in the characters, in the way interactions work, in the darkness and the feedback mechanisms and style. Some games, once they get their hooks in you, don’t come out cleanly. I think Silent Hill is one place which, one way or another, I’ll just keep returning to, whether I want to or not.\n\nLast month I said I wanted to get a few enemies done to flesh out these early areas. I also said, somewhat optimistically, that I thought I might be able to do them all in a week – this turned out, unsurprisingly, not to be the case, but for largely positive reasons. While it did, in the end, take me more like two or three weeks to get my planned enemy types created (sort of – partway through I decided one didn’t really work and replaced it with another idea, then added a few more), much of that time was also spent improving and revising existing enemy types and the base enemy type they were all derived from. Instead of merely disappearing when defeated enemies now leave behind corpses, and blood effects are created on hit, which in general makes combat feel better.\n\nI created six new enemy types – in addition to the three I already had I have a total of nine enemy types for this first section of the game. I wouldn’t mind having one or two more, particularly as one of these doesn’t actually become aggressive until later on in the game, and I’ll try to keep an eye out for opportunities to develop additions – but I think these will work well for the time being. Let’s look at them each in turn, in order of development:\n\nSpider\n\nThis is the first enemy type I developed, which turned out to be kind of a mistake. A spider seemed like an obvious presentation for the classic Metroid enemy type that crawls around the edges of platforms, particularly within a horror game – and, while I dislike video game spider enemies maligning a generally benign animal, sometimes the pieces just fit. That being said, this was probably a bad choice for a first enemy to develop as this behavior, while simple enough to explain, is a tad tricky to program. They’re still, appropriately enough, a little buggy, but work well enough for the time being. Something perhaps worth noting is that they only attack the player if the player overlaps the face region – this is, in general, the approach I’m using for static enemy attacks, a compromise between the simplicity of enemies hurting on touch and the labor-intensiveness of every enemy needing individually animated attacks.\n\nGhoul\n\nAfter the headache that was the spider enemy type, I wanted something dead simple – or undead simple. I decided that an enemy type that just walked back and forth would fit the bill, and something like a zombie seemed to match that and the presentation. Still, just because it’s simple doesn’t mean it has to be boring – the ghoul has a couple of quirks which I find quite interesting. First, like the spider, its static attack only extends across the hands, so as long as you stay clear of that you can get right up behind them safely. Second, rather than slow steady movement, they move by short bursts of speed, individual steps, synced up to the animation. Third, they are what will probably be one of very few enemy types that has a negative knockback value on hit – that is, while most enemies send the player flying on hit, the ghouls will instead pull them closer. Of course, you have a moment of invulnerability afterwards to escape with, but I think this will interact very interestingly with other combat elements.\n\nFly\n\nThis was the last enemy I developed for the one-month prototype version – and was the first enemy type to actually have some awareness of the player. This turns out to be a very simple thing to implement, requiring only a collider representing the vision cone that sends a message back when it overlaps with the player’s collider along with a few ray casts to ensure that no interceding terrain is blocking its vision. The fly slowly flies in circles, looking back and forth based on its current movement direction, and if it sees the player slowly moves towards them. It immediately gives up when it loses sight, which is increasingly likely the closer it gets. This results in a kind of strange and indirect attack which isn’t extremely directly threatening but provides a tricky obstacle to movement. This enemy type may be prone to revision, both because its behavior feels a bit flat and, as well, somewhat un-fly-like – a rather fast and reactive animal, quite unlike these sluggish aggressive air-worms.\n\nDog\n\nI don’t really like how many games have you killing dogs, but… they’re an animal which is plausible to encounter in an urban environment, and are also potentially very threatening, so again sometimes the pieces just fit. The first task at hand was figuring out how to do pathfinding – this is a non-trivial task in a 2d platformer, particularly accounting for things like momentum and variable jump-heights, but after looking into it I found that in actuality I didn’t want to do it. After reflecting on it for some time I realized that, you know, dogs really aren’t that smart, and considering the structure of the levels they are unlikely to be able to see the player from far enough away to actually need to do sophisticated pathfinding. In the end, I implemented something similar to the way shopkeepers behave in Spelunky: Run towards the player, jump if they’re above you or if there’s a gap in the floor in front of you. It’s not flawless, but it feels pretty good, and they’re still an extremely persistent and aggressive enemy and, under most circumstances, will be able to navigate to you. Of course, that aggressive behavior is only part of the puzzle! When not actively attacking, dogs will wander around, sniffing at random pieces of ground – or, given the ambiguity in animation, perhaps eating something off of it. There are some other fine-tuned bits of behavior, but I’ll get into those later.\n\nBird\n\nThese are a very direct riff on the bird-type enemies in Symphony of the Night (unsurprisingly one of the biggest inspirations for this project, and my design aesthetic in general). They lurk on a perch, and when they see the player immediately try to move somewhere above them – exactly where varies a bit, but generally right out of reach of normal player attacks. At irregular intervals, once they reach this height, they’ll try to divebomb the player by moving directly into them, and after recovering from this try to move back to their old position. If they lose sight of the player they give up and find a new perch. This feels very obnoxious in exactly the right way for this enemy to be – fortunately they’re fragile, if you can catch them. Similar to the ghouls, the birds are given much more life and personality by giving them an idiosyncratic movement style – rather than smoothly gliding where they want to go, they have to gain altitude with individual wing-flaps, so they struggle for a little while to get above the player, giving an opportunity to strike them down.\n\nCorpse\n\nThese aren’t actually enemies, but it’s important to talk about them now anyway because they interact deeply with the enemy system. Each enemy leaves behind a corpse when it dies: This was originally something created primarily for aesthetic effect, but as I worked on the system more I started considering ramifications beyond the aesthetic. Are corpses flammable? Do they take damage? Do enemies notice them, and if so what do they do about that?\n\nRat\n\nWell one enemy type that would definitely take notice of corpses are rats. This is actually an enemy I had the idea of for a special encounter later on, but they also make sense as a frequent encounter – and will be particularly so once I start developing the underground sections, after this slice of the game is complete. The immediate question, though, was how is a rat going to be anything other than a smaller, slower, more annoying to hit dog? It could have been that I suppose, but instead I took a page from Dishonored’s book: One rat is harmless, and will run away. Two rats, as well, are harmless – but once there are three rats near each other, they turn aggressive and will start to pursue the player. When they’re not doing that, though, they run to any corpse that they can see and start nibbling away at it – largely an aesthetic touch at this point, except it means you’re more likely to encounter dangerous congregations of rats instead of individual wanderers.\n\nOnce I introduced this idea, though, I realized – well, dogs are also scavenging, so they should have the same behavior, right? It was easy enough to implement, so I immediately made the dogs seek out corpses when idling. But then this created a strange situation where dogs were ignoring rats to nibble on nothing on the ground – surely this wasn’t right? A few hours later, dogs were updated to hunt and kill rats while scavenging. I haven’t yet gotten to the point where rats also group together to hunt dogs, creating rat-dog wars for the player to stumble across – I mean, it’s the city, it makes sense if rats have learned to be way more scared of dogs than they are of people. Still, these sorts of interactions can be intoxicating to play with: There’s no knowing how far you could take it. Similarly, it feels a bit odd that flies and birds, two animals famously interested in carrion, currently don’t notice corpses – this is something I’ll have to consider and iterate on.\n\nFlinger\n\nNow I have the game’s first projectile-based enemy. These creatures come with pre-existing props – garbage cans, boxes, piles of corpses, which they search through looking for, I dunno, something. All of these props count as corpses, since scavenger-type enemies will be interested in them for the same reasons, but as far as the Flinger goes it is completely static once placed. If the player comes near, it looks up and grunts, and if they don’t back off starts frantically throwing garbage at them. The model of this enemy type is the classic Castlevania skeleton, but I wanted projectiles with a more concrete existence in the world (the Castlevania skeleton throws bones that ignore all terrain), and a creature hunting through the trash made sense in terms of having a bunch of things to throw. I steered away from my original intent of making this a different variety of ghoul, since having something basically human-looking digging through trash be an enemy seemed loaded and hamfisted, and instead made a sort of masked hunched creature. I’m not sure what the Lore is here, and that may be something I need to ponder more – however, in terms of gameplay, I really like the feel of it. The Flinger actually throws one of four random projectiles, and each of these has unique properties:\n\nCan: The baseline projectile\n\nBone: Bouncier and lighter\n\nRock: Heavier, less bouncy, and has more knockback\n\nBottle: Lighter, explodes instead of bouncing\n\nMannequin\n\nWhile I had a set of enemies that felt at home in the first residential apartment area (humanoids and scavengers), and I had some enemies that felt at home in the second forested park area (animals), it seemed like none of the enemies felt very suited to the third section, the dark creepy hotel. While certain enemies, like spiders and flies, would gain new prominence in this section, they didn’t really have a unique identity, being things you’d likely frequently encounter elsewhere as well. I decided that a more overtly horrific enemy would work well in this environment, and came up with the idea of some sort of puppet enemy, something truly unnatural by definition. It wouldn’t move in the normal sense – unlike other enemies so far, which walked or flew around, these would teleport a few tiles at a time suddenly towards the player – but only when the player moved themself. Additionally, they would only attack when the player attacked – making them fairly trivial to deal with individually, but extremely dangerous in combination with other enemies. The idea with this was to emulate the reactive style of the Goriya enemies in Zelda, who mirror the player’s movement, as well as the Boo enemies from the Mario series who only move in to strike when the player’s back is turned. Having an enemy who is effectively controlled by the player ratchets up tension and adds a sense of deliberate planning to the player’s approach, forcing them to slow down and consider things a bit more carefully – which works well for conveying, however slightly, a sense of dread.\n\nMaggot\n\nFinally (so far), I realized that while all of these nuanced and distinctive enemies were great, sometimes you do just want something simple – and that, for a simple enough enemy, the time to completion would be much faster. With that in mind, I made the simplest (and, perhaps, grossest) enemy possible: a maggot. Maggots don’t actually have much offensive apparatus to make them dangerous, so these are, for whatever reason, explosive – maybe they’re just overfilled, or have some sort of ongoing chemical process, but if they’re touched or attacked by the player they just pop and do damage. In practice, these aren’t much different from spikes, but they certainly provide many opportunities to be used later for scripted events and for other enemies’ attacks. If nothing else, they provide another force pushing the player to slow down – and to consider where they’re stepping.\n\nAfter constructing all these enemy sprites and behaviors, I then had to give them all sound effects. There are two challenges to this: First, generating the sound effect itself, and second finding the right way to control how and when sound effects play. Almost all enemies had sound effects for taking damage and dying: Many also had sounds for performing attacks. The trickiest, though, were the sounds like rats squeaking, which needed to happen frequently enough that you could tell there was a rat, but couldn’t happen too often or predictably without seeming obnoxious and mechanical. There’s still room for improvement in these audio triggers, but I generally think the sound design on these creatures is in a good place right now.\n\nI also put some time into generally making the combat feel better. I’m tweaking animations here and there to make the character motion more satisfying – as well as taking a closer look at the power of post-processing effects. I abstracted several effects – noise, chromatic aberration, and a pixelated vignette – behind one basic “intensity” value. Every room has a base value, and events like low health and nearby dangers can increase this. As well, there are additive intensity pulses created for special events, like receiving damage. This makes every bit of damage received more impactful – but also creates a subtle form of feedback on nearby dangers which might be hidden by lack of light. Additionally, there’s a brief temporal warp on hit, where time stops for a moment before returning to normal, giving the player slightly more opportunity to recover from mistakes. This all, naturally, will be tested and retested and polished many times over the course of developing – still, after just putting a few days into these effects, the results are very encouraging.\n\nHere’s a video of many of these enemy types and intensity effects in action:\n\nAll of that took the better part of the month, but here and there in between I pondered what exactly I was trying to do with the narrative component of this project, and what my approach to it should be. My concept of the narrative is an in-depth version of the Dark Souls NPC quests – You meet characters in the world, most of them several times, and based on what items and information you give them and how you speak to them their story progresses, for good or bad. The difference is in the degree of divergence and number of characters. Given the style of the game, I can easily implement as many characters as I need – sprites and portraits take a little while, but that’s not going to be a major burden on this project – but figuring out what each character is about, how you can engage with them, and what can happen to them is just a huge tangled ball of story to tackle. Initially I was very focused on figuring out how to do this branching narrative work from an implementation angle – and, sure, implementation is important, but now I feel that the real challenge is just keeping track of what needs to happen. I still don’t feel like I have a strong grasp of this challenge, but I’m at least starting to get a feel for its dimensions – and, fortunately, there’s a lot of good writing out there on how to do interactive fiction, even if little of it is focused on the exact model I have in mind.\n\nAlright, that was a lot to get through! Now that the enemies are in working order, I’ll be placing them throughout the world and making sure save points work, getting the heal ability working, and getting the core flow of this slice of game set up from start to finish. I’m going to start trying to get these character stories started – particularly now that I’m finally fairly caught up on the writing I need to do for the blog – and I’m going to start designing this boss. With that and some work on the UI, I’ll be extremely close to completion of this slice. Completion before the end of the year is starting to seem feasible – though, as always, it seems to retreat gradually further away the closer I get.\n\nAt the end of last month’s update, I mentioned that my entire work schedule was being taken over by starting a game jam project called “Join the Madness”, and that this project’s scope threatened to balloon way out of control. Well, balloon it did, and what was once ambitiously hoped to somehow be a three-week project has become something more like a three-month project – and that’s a pretty ambitious estimate. Making a Metroidvania within the scope of a game jam is a tricky proposal, even if the game jam is relatively lenient on time (as this one was). It’s been done well before, but I have to assume that those developers had more self-restraint than I do, because no sooner did I start on the project than my mind was flooded with ideas for it and I felt compelled to realize them to the best of my ability – an urge that consistently gets me in trouble when it comes to art.\n\nFor those who are unfamiliar with the jargon, a ‘Metroidvania’ is a genre of game where the player finds additional abilities as they progress and these abilities allow them to explore progressively more of the world – so, for instance, they might find the ability to swim and be able to explore an otherwise inaccessible water section. Going into the jam, the only seed of an idea I had was that I wanted to work on some sort of fast-paced action-packed platformer, where you had to deal with complicated rooms full of enemies. There was initially no reason to make it a Metroidvania – the reason it became one, though, is because while I love having abilities like double-jump and wall-climb, I also wanted to be able to design challenges around the player not having these abilities. Making the game a Metroidvania isn’t strictly necessary even then: You can give the player abilities without making them tools for exploring a map. However, I have enough affection for the genre that once the idea emerged it was impossible for me to put it back away again – even as I knew it effectively threw any hopes I might have had of finishing the project on schedule directly out the window.\n\nI started thinking about what Join the Madness might be: The premise emerged, that one by one people in an unnamed city keep disappearing – and gradually, so gradually that it takes a while for people to notice, a tower begins to grow from the ground with the faces of the people who disappeared embedded into the walls. It keeps growing in height and circumference, and surrounding buildings get pulled in and absorbed into its mass, and every day more people go to the tower drawn for reasons they don’t understand. The player character wakes up one day certain that they are the one chosen to bring an end to this madness, and set out to the tower to destroy it.\n\nThe concept and tone of this are definitely influenced by my recent playthroughs of Bloodborne and a couple of the Skautfold games (themselves clearly influenced by Bloodborne). I find myself strongly drawn to the ideas of surreal cosmic horror, which I have been in one way or another since playing Alone in the Dark and the Silent Hill games. I also found myself very intentionally pulling tonal and design elements from Metroid and the much-maligned second Legend of Zelda game, both game experiences I find very mysterious, abstract, and compelling. Since coming up with the concept I’ve also come up with some more ideas I’d like to tie into that, some characters I’m excited about writing, and some narrative themes that seem to clearly be emerging – but I’ll wait to talk about those until I have more to show.\n\nI don’t remember quite how I ended up with the art style I settled on – I think I was originally just planning on keeping a small color palette, influenced by other pixel art games, most notably Loop Hero – but once I started building a mockup in black-and-white I loved the feel of that so much it became the game’s aesthetic. Currently, everything in-game is one of four colors: Pure white, pure black, pure red, or dark gray. Each of these serves a specific role: White is interactible sections like terrain and enemies, black is background, gray is detail to convey the space, and red is blood – which is thematically tied to healing effects and successful attacks. I initially had a script to dynamically change these colors based on a palette, but a collaborator on the project pointed out that it would make more sense to create a post-processing effect that just swaps the colors out after rendering. Thus, each room in the game can have its own unique palette, and this can even be animated over time. I don’t know what all I’ll end up doing with this, but the possibilities are fascinating. A variant on this idea I’m tossing around in the back of my head is to replace each color with textured pixels, so I could render a background image through them or something, but this is an idle thought for the time being.\n\nOne of the most gratifying aspects of the first couple of weeks of development was having an opportunity to really make use of my sprite shaders, which I’d spent the last few months on, in an immediate and practical application. The ability to quickly and easily experiment with different modes of color and lighting was exactly as useful as I’d hoped it would be, and I quickly got some ideas for additional fixes and features – such as the dithered lighting mode, necessary for maintaining the stark art style while having lighting effects. I also found out that I’d overlooked major issues when I started trying to create the first project build, and found out that it had so many shader variants that it would have taken literally days to compile them all – a helpful object lesson in the difference between the shader_feature and multi_compile key-words! I would have been incredibly embarrassed to have released them with that mistake, so in the end I’m glad that I wasn’t able to get around to it.\n\nSpeaking of which – I need to figure out when I am going to get around to it. I’m still frantically working on this project as much as I can, and having a very hard time fitting anything else into the schedule, as evidenced by how far behind I was on last week’s essay and this DevBlog. To finish the sprite shaders up I’ll need to review my changes and make them a little bit more robust as well as complete the documentation, which is now out of date in addition to the other edits it required. This is also going to be a rather busy month in other ways as well, since my vaccination is finally completing soon and I’m going to be immediately leaving on a trip to visit friends and family. Most likely I will only get a chance to publish to the asset store around the start of next month, unfortunately.\n\nThe biggest obstacle I’ve encountered on this project so far was the map editor I mentioned in passing last month. What seemed like a straightforward problem became a tricky problem – what seemed like a tricky problem became a tangled nightmare. A day’s work became a week’s work, and when the entire project is intended to take less than a month (as it once did, though that seems so long ago now) these kinds of setbacks become incredibly stressful. The reasons it got out of control were, in order: The difficulty of working with Unity’s Tilemap system, the challenges of representing a coordinate grid where y is up with a list of objects where y is down, the additional difficulties of figuring out Unity’s custom EditorTool sytem, and finally eventually just a bunch of normal bugs which I was largely able to solve in a few hours.\n\nIt works now, mostly – though when I tried to get screenshots, it kept getting errors, so apparently it still needs some time. Let’s not speak of it again.\n\nRather, let’s talk about the project’s audio. Since I chose this very restrained pseudo-retro visual style, I looked into how I would approach emulating NES-style chiptunes and, to a lesser degree, sound effects. I ended up gravitating towards a similar set of solutions as the Shovel Knight team described: Approximately emulating the NES’s number and variety of sound channels (four channels, one noise channel, one triangle wave channel, and two square wave channels), but occasionally allowing myself to use a channel beyond the original set of four. I was not scrupulous enough to look up what waveform the expanded chipset NES carts actually had access to – I just wrote a piece that needed an extra square wave, and decided not to worry about it. Similarly, I found a somewhat expanded port of the old sound effects creation program SFXR to Unity, which I implemented into the project early on – however, much of the code ended up being unsuitable, so I ended up stripping out pretty much everything except for the core synthesizer logic and replacing it with my own. I may end up stripping that out as well and making my own sound effect synthesizer asset later, but this is a diversion that will surely have to wait until after this project is complete.\n\nSince this was a game jam, I made an open invitation to anyone who was interested in working on the project, and someone took me up on it, offering to do any extra programming work that I could use on the game. I’m not very experienced at working with other team members, particularly from a leadership position, so I definitely feel like I could have done a better job coordinating our efforts: I offered him the UI programming, since it had to be done, was relatively separable from the rest of the game so our efforts wouldn’t interfere with each other’s, and it wasn’t something I had a strong sense of needing to be done a specific way I’d have to communicate to someone else – or so I thought, anyway. I sent a mockup of what the inventory screen might look like, and he ended up implementing that directly as the inventory screen – which unfortunately meant that when I created the final inventory screen art, he ended up having to redo some work. Each asset created, I’d end up needing to rewrite pieces of – not through any fault of his as a developer, but just because the game it needed to interact with was so rapidly in flux that I was the only one who was really in a position to know how it would fit together. It worked out okay, and I’m grateful for his help, but it certainly gives me pause when considering how to work with teams of potentially several people in the future! It is, perhaps, a discrete skill-set I will have to learn.\n\nThere’s a lot more to talk about on this project, but I’ll leave it at that for now since most of the rest of it regards design work which is still largely in flux and untested. I’ll probably be talking about it more for next month’s DevBlog! In the meanwhile, I’m hard at work getting everything put together for a viable vertical slice, a full-featured subsection of game, for later this month.\n\nIf you’d like to help support this project or my writing, please consider supporting me on Patreon. Support at any level lets you read new posts one week early and adds your name to the list of supporters on the sidebar.\n\nThere are probably some spoilers here if you care about such things.\n\nIt’s incredible the symbolic weight we can lay upon the simplest of stories. Each such story extends beyond itself like tree roots and tangles into matted carpets of narrative and meta-narrative, confused ideas about what it means to exist and to be a person, Each story is not only its own story, but also part of this grand tangle that comprises our symbolic understanding of the universe, and the simplest stories we hear the earliest grow the deepest roots, come to underlie all other stories, come to bind and be bound into an intractable metaphorical labyrinth.\n\nWhen we encounter stories like this as children it’s finding what looks like a little mushroom, but is actually one nodule of a mass of fungus that comprises the ground on which we stand. It is the forest masquerading as a tree. it is the tip of the iceberg, the horn of the bull, the grit of the planet of the star of the galaxy, and we are not prepared to comprehend. Our parents’ lives seem otherworldly – it doesn’t even occur to us that they have lives beyond us – and everything past our tiny fingertips seems so vast that we touch only fragments at a time.\n\nInstead of being a story that ties into a world-view, parable and art merges into our reality. When you’re not that far past figuring out that objects don’t actually go away when you stop seeing them, metaphor is a big ask.\n\nThe Binding of Isaac is a confused overlay of heavy Abrahamic symbolism laid onto a procedural pastiche of the Legend of Zelda. I don’t mean ‘confused’ in a pejorative sense: It evokes the feeling I was just discussing, that of being a child, surrounded by parables and adult interactions that both exceed our understanding of the world and thereby begin to fuse with one another.\n\nIt’s easy to forget that feeling of not really knowing what’s real and what isn’t. That isn’t to say that we necessarily ever really learn what is real, but we at least become more certain of our divisions. We at least become more confident that there is, that there must be some objective reality underlying all of the interpretations.\n\nThe fact is, the history of objective reality is as distant from our perception as it is from explicit fiction. The truth is something that only existed in the moment, and for us can only be inferred partially from available evidence, a tiny light in the distance sinking inexorably into the black.\n\nThere are a lot of different ways to create art, by way of impulse and instinct, by way of calculated engineering and symbolic interweaving, through characters or through places, through eras or circumstances. Games generally tend to favor deeply analytical and structured processes because these kinds of structures line up most readily with the technical work required to make a game manifest. Making a fully-featured game with its own unique gameplay tropes in a stream-of-consciousness, impulsive and expressive fashion is quite difficult, and the rare realization of this approach to creation is what gives The Binding of Isaac such a distinct and unique aesthetic.\n\nBecause ideas are siphoned directly from the most surface-level impulses, they carry all of the biases and preconceptions of the artist, often unfiltered. This kind of stream-of-consciousness and improvisational creation is common methodology in standup comedy, which lends itself readily to intuitive and off-the-cuff approaches. The process of a lot of comedians seemingly involves scraping their psyche for the grossest, weirdest thoughts, throwing them out there and, with a wry grin, saying “isn’t that some fucked up shit?” And it works, because all of us have some of that shit in our brains, and acknowledging that it’s there and it’s gross but it’s still ours makes us feel human, feel worthwhile even at our most flawed.\n\nThere are drawbacks to this approach. No mind can exist in our world without picking up some really toxic concepts, and sometimes that toxicity is so potent that even within the context of saying “aren’t I hilariously fucked up?” it’s hard to allow these ideas space in discourse. Between portraying toxic ideas that have burrowed into our minds, and encouraging and normalizing those ideas, there’s a line so razor thin that it can be difficult to see, and bitter and ongoing disagreements vie over where that line lies. This is a frequent point of contention between social justice activists and stand-up comics, whether a joke is mocking oppression or normalizing it, whether a joke deconstructs racism and sexism by showing how the stereotypes they are built on are absurd or whether it merely parrots those stereotypes without meaningful commentary. In cases where a comedian has a strong social consciousness it can be a troubling and conflicting open question, leading comedians like Dave Chappelle into painful crises of conscience.\n\nI don’t think there’s really a ‘solution’ to this conflict between normalization and description. This is one of many conflicts that we must resign ourselves to in our art, and navigate in the only way true ethical conflicts can be navigated: Day by day, case by case, rough-hewn principles abandoned far back on the road as too heavy and onerous to be borne out into the real world.\n\nThe Binding of Isaac is uniquely structured in games, and even though it’s kicked off a wave of imitators it still remains distinct from them in several ways. Isaac is designed to be played through multiple times: Each time the game is completed, some new facet will be revealed. New areas will open up, new enemies will appear, new upgrades will be added to the pool of items that can be found. Though at first the game appears simple, there’s more and more to discover as you go.\n\nWhile many games have been released since Isaac using a similar multiple-playthrough incentive, in all cases the new aspects unlocked are about rewarding the player by making them stronger or giving them more options. In Isaac, each playthrough expands the scope and difficulty of the game while the player character remains more or less consistently powerful: conversely, with most other games using a similar structure, the game stays more or less the same while the player gets more powerful, something much closer to the traditional RPG leveling system.\n\nThough these games are overtly inspired by the structure of The Binding of Isaac, when it comes to the intent behind the structure Isaac is far more similar to something like Frog Fractions, an experience of discovery, than it is to Rogue Legacy, an experience of empowerment.\n\nThe Binding of Isaac: Rebirth is a remake of the original, undertaken primarily because that original game grew too large to be a manageable project in the confines of the antiquated version of Flash it was built in. it was built quickly, in a matter of months, and architected in ways which were more expedient than they were expandable: This, more than any limitation of design or vision, is the flaw that Rebirth was released to rectify.\n\nFor all that Rebirth adds, there’s something missing. For all the technical woes born from creating the original game quickly and haphazardly, it captured a spontaneity and energy that’s distinctly different from that of a long-term project. For a game like Isaac, that is so inspired by the muted and confused impressions of childhood, so shaped by intuition and free association and reckless expression, taking a large team and long time to express it in its most refined form gives the whole experience a different impression than when it was expressed as quickly and intuitively as possible. Not only does this make the vulgarity of the game appear more calculated, and therefore less justifiable than before, it makes the entire experience less coherent. It is the difference between the quick sketch and the painstaking portrait: The latter may take more time and technical execution, but the former sometimes captures a spirit, a moment of movement, that’s lost if you try to polish it, to ‘fix’ it.\n\nThis slight conflict is echoed and amplified throughout Rebirth: The game employs a ’16-bit aesthetic’, presumably intended to hearken back to the Zelda games which inspired it – but, as with most modern games employing ‘retro’ styles, it doesn’t really commit. The resolution is higher and wide-screen, the frame-rate is targeted at 60 frames per second, the color range is essentially unlimited and operates via RGB tinting rather than palette manipulation, objects are translated and rotated and scaled with sub-pixel accuracy… It’s an inversion of the kind of up-res filters that are popular in emulators for old games, which draw interpolated pixels between the jagged edges created by the limited resolution: Rebirth appears to use high-res pixel images, perform operations on them, and then filter them down to lower resolution to hide the ugly artifacts that result from these kinds of operations. This is a peculiar choice in particular because the vector art the original game uses was resolution independent, and it was designed to take advantage of that capability, freely scaling and tinting objects. Translating a design made with these decisions in mind directly into a technical situation where it’s much more expensive, challenging, and aesthetically inconsistent to perform these operations seems a bizarre choice. The end result of these decisions isn’t ugly or unappealing – the underlying art is well-executed and it runs well – but it does seem somewhat inconsistent and ill-considered.\n\nThe music carries the action well, and layers fade in and out based on gameplay situations which adds an element of excitement and discovery that wasn’t there in the original, but it feels less consistent in tone and intent. The original soundtrack had a balance between excitement and melancholy which evoked the difference between the game’s action gameplay and its dark and strange story framework, and though the new soundtrack never detracts from the experience it trades away this complexity of emotion for a colder and more technical complexity. It’s a worthy soundtrack, but along with the new graphical style seems slightly at odds with the intuitive and personal stream-of-consciousness of the game’s expression.\n\nWhere these technical improvements don’t conflict with the fundamental soul of the game, they shine. Almost every item in the game has been carefully developed such that it interacts with other items in an appropriate and interesting way, in many cases obviously requiring custom code to handle a specific interaction. It would be hard to argue that this isn’t an improvement over the original, where many items didn’t work with each other at all, in some extreme cases making it impossible to progress. The game runs stably and reliably on most systems, and enemies and items have been added which add so many projectiles the old version would have slowed to a crawl. Room layouts are more varied and interesting compared to overwhelmingly symmetrical layouts of the original, and native controller support and game-saving make enjoying the experience much easier than the occasionally convoluted issues of control and time-investment required to play the original.\n\nNevertheless, some aspect of the joy and horror of the original Binding of Isaac has been lost. As someone who tends to overthink and overwork every creative endeavor, I have to wonder: Is this my fate as well? Am I destined to have my creativity confined by a box of my own craftsmanship? Or is there a light shining through, a way to capture that spirit and spontaneity, a way to express myself through the meticulous constraints of game technology, supported without being constrained?\n\nOne of the most interesting and nuanced changes from the original game involves the health system. In the original, there were two kinds of health: Hearts and Blue Hearts. Hearts are what you would consider your standard health: You start with 3 of them and can upgrade your maximum with a number of different health upgrade items which allow you to collect more. Blue hearts completely ignore your maximum health capacity and just get added to the end of your health meter with no limit: They can keep on going beyond what the health meter can display. They are more useful in every way than standard health pickups, but generally less useful than health upgrades, and collecting a huge number of them is frequently a certain path to victory. Rebirth completely changes this dynamic by making it so that your maximum health and blue hearts together cannot exceed the maximum displayable health value, making blue hearts useless once you’ve accumulated enough maximum health.\n\nThis results in a very strange dynamic: If you have a high maximum health but are running low on current health, you can end up dying surrounded by blue hearts you can’t pick up because you have no room for them. Health upgrades are no longer objectively positive: Some of the most powerful runs have no health upgrades at all and run entirely on blue hearts. In practical terms, the optimal strategy is usually to choose either health upgrades or blue hearts and structure your approach around that choice: Items which provide blue hearts get more powerful the lower your max health is, and items which restore health get more powerful the higher it is, so depending on which you have you may want to collect or avoid health upgrades. Though it’s sometimes difficult to find health upgrades, depending on how you’re playing it can be nearly impossible to get rid of them, so the choice of whether or not to take them is far more loaded than it may, at first, appear.\n\nWhile this system is likely not intended to convey anything in particular, or even necessarily intended to be an interesting gameplay decision so much as to hem in overpowered blue heart maximization strategies, it does have a weird kind of symbolic meaning. Generally, in Isaac, hearts symbolize life and vitality, with red heart upgrades being provided by items like food and drink, where blue hearts symbolize faith, the supernatural, and the life of the mind, being provided by religious symbols like the rosary or the miter. Being asked to choose between one or the other in order to maximize a run conveys a message about temperance and faith and the difficult decisions that go into how a life should be best lead.\n\nThis is particularly interesting in light of the running theme through Edmund McMillen’s games of balancing, or failing to balance, between the creative life of the mind and the real world. This suggests that the ideal balance isn’t some simplistic 50/50 time split, but a situational equilibrium that changes with each moment – sometimes, to survive, you must dedicate yourself to your spirit, towards improving and healing your mind through focus and faith – sometimes, to survive, you must rest and replenish, eat and drink and become physically whole. Trying to do both at once just makes you less capable of pursuing either.\n\nIs this implication intentional? Probably not. We ascribe meaning to the patterns of stars in the sky, though, even though the lights above neither know nor care about our petty problems. Some messages are important not because of why they were sent, but because of why they were received.\n\nThe intro and the first ending are the only segments shown in Isaac’s hand-drawn style, and also are together the only instances of spoken dialogue within the game. This suggests some striking divide between the narratives provided in those segments versus those provided in the brief ending cutscenes, which are rendered in a more traditional animated style. In many stories, these shifts would suggest a divide between the ‘real world’ of the fiction and something just happening in the character’s mind, but given the contradictory and fragmented nature of the rest of the narrative I doubt that there’s any such underlying ‘reality’ in The Binding of Isaac. Rather, I would suggest that these strike the divide between the conscious world, the world that Isaac constructs out of drawings and stories to make sense of what he’s feeling and cannot understand, and the unconscious world, his world of dreams and symbols which feed into his thoughts but is wild and incomprehensible.\n\nThis evokes to my mind the first Silent Hill game – two worlds, one seemingly ‘real’ but cut off from the reality we know, grey and muted, the other a purely nightmarish world of decay and rust, a purgatory where sinners and lost souls wander. There’s also a parallel between Isaac’s last ending, showing Isaac hyperventilating, locked in a chest, in his presumably final moments, flickering back and forth between a scared child and a vicious demon, and the ‘bad’ ending of Silent Hill, showing Harry dead in the wreck of his car, the preceding story perhaps just a dying hallucination.\n\nThe D6 is an item you get once you defeat Isaac playing as ??? – who is essentially Isaac’s corpse. The D6 allows you to change any item you find into a random different item. There’s a couple of interesting points to note here: First, a notable effect of ‘random’ items like this that they essentially end up decreasing the overall randomness of a game’s outcome through means of increased, rather than decreased, randomization. There’s a certain naive approach to randomness in game mechanics that intuits that the more randomly selected numbers there are, the more random and unpredictable the experience is. In fact, the practical result is frequently the opposite: If just a few numbers are left to chance, the outcome of those numbers gives a huge impact to a single individual random chance – but, if the game is built on large amounts of randomly selected numbers, then over the mass of them they’re almost certain to balance out. This principle is neatly illustrated by the D6, which allows you to introduce more randomization in order to increase your average odds of success.\n\nThe D6 is also interesting because it provides your only means of escaping bad luck. This, along with the item’s description, ‘reroll your fate’, suggests gaming in general as an escape from the punishing vagaries of real life – though, in the end, it won’t help Isaac escape the doom ascribed to him by the confines of the game, it will give him a moment of ease, a moment of escape, a tiny bright spot shining through a keyhole\n\nIsaac suggests a number of interpretations through its several endings, none of them pleasant and few of them suggesting the actual gameplay moments are anything more than a hallucination or creative construct of Isaac’s mind. However, no matter what happens in this crazy scenario with hundreds of interacting elements, no matter what comes before, at the end, every single time, he has to climb into the chest. Each play of the game is just one of a million feverish escape fantasies, each suggestion of an escape from death an attractive lie. The only prize that can be won, the only ending that doesn’t require you to climb back into the chest, is when you collect the key to the lock, fight the greatest of all imaginable evils – and find yourself already in the chest anyway, in a brief moment of lucidity, a shining light through a keyhole.\n\nThen you play again, as a different Isaac with different adventures, but the chest is always waiting. The chest contains the game, contains every experience you might have within it, the fate you constructed for yourself by playing.\n\nNext time: The Swapper\n\n[moderate spoilers for Neverending Nightmares]\n\nI like dreams, and stories about them. Though they never capture quite what it feels like to exist in a dream space, though they never quite emulate that constantly shifting boundary that builds itself based on whatever seems appropriate to your internal narrative, there’s always a seed of that familiar space that is universal and lies within each of us. Our dreams may differ, but we all dream – and sometimes it’s hard to tell when the dreams end. When you spend enough time thinking of abstractions and possibilities, they start to blend together with the abstract constructed realms of the sleeping life.\n\nNeverending Nightmares is that kind of dream. When you are overwhelmed with visions of failure and guilt, and these visions manifest themselves into pathways through hallways at-once familiar and unfamiliar. Just trudging, step-by-step, through a series of nearly identical hallways, stared down at by portraits of strangers and more disturbing images, feels like a dream. Ancestral homes that were once a place of comfort twist into unfamiliar passages in the undefined half-light of dream, shift and loop like a snake, become infinite, never-ending.\n\nAntiques and old houses show up a lot in my more unnerving dreams. Is it just that they’re old, and know more of death than us, surviving owners and occupants, witnessing betrayals and murder? Or is it that I fear being forgotten and left behind, as they must have been, so long ago? Whether because of this primal association, or to fit more closely with its chosen Edward Gorey-esque art style, or to make the nightmarish hospital and asylum’s antiquated facilities not seem out of place, Neverending Nightmares seems to take place quite some time ago, in Victorian-style rooms filled with paintings and ornate antique furnishings, lit by candlelight only.\n\nSometimes the candles placed around are enough, and the rooms are well-lit, but as the nightmares progress this becomes the case more and more rarely, and as the rooms get darker and darker the art style begins to show its teeth, the darkness around you fading into a solid wall of pen-stroke hatch-marks. The jagged edge of the circle of light cast by your candle interacts strangely with the wood grain, wallpaper, and furnishings, crisscrossing to form abstract not-quite objects at the edge of your vision. Though the lighting doesn’t behave like actual flickering candlelight, it captures the sinister illusions of that inconstant light well. And, when the candle goes out and leaves you in the darkness, completely obscuring the world in black, you can still see which direction you’re moving by the motion of the textured pen-strokes that comprise the endless night, something that would be impossible to convey in a purely representational art style.\n\nAt times the music seemed inappropriate to me, often harshly synthetic and reminiscent more of horror movies than of dream sounds – but our dreams are formed of our experiences, and movie tropes have their place within them as well. Simply keeping music going at all times helped to soften the edges of the game’s reality, making it feel less artificial and constructed, even if the process to get there was more explicitly engineered. Alongside the music, a number of sounds seem to recur: A woman crying, a death rattle, a creaking of rope or wood… these sounds, played over and over in different contexts, bring to mind the terrible stickiness of post-traumatically seared memory, the flashes of moment that will never be forgotten.\n\nThough Neverending Nightmares would have likely never existed without being funded by a successful Kickstarter campaign, it’s hard not to feel like the source of its funding leaves some unsightly marks on the game itself. Since the higher donation levels allow the donor’s name to be put on a tombstone in-game, I was taken out of the moment more than once by seeing a familiar name – I suppose this might not be the case with someone less ensconced in gaming culture, but for me and, I suspect, many of the others most likely to be aware of this relatively small game, seeing these names will be distracting. There are also a series of custom portraits of backers in the game, any of which you can look more closely at: In a game with such a paucity of interaction and density of background information, having unusually detailed portraits of unknown people can also be quite distracting – though walking through a hallway of portraits of strangers doesn’t seem like it deviates too far from the dream logic of the game, and isn’t as distracting to the experience, it is an example of how extraneous detail can reduce the overall impact of a work. It’s fortunate that these are largely relegated to the early part of the game, before the nightmarish spell is wholly woven and distractions come at a critical cost to engagement, but it still demonstrates that the form of a game is ineluctably tied to how it is created and funded, and in some games this can improve it (as with Prison Architect’s custom prisoner profiles) and in others it can derail.\n\nNeverending Nightmares doesn’t rely much on explicit story, using a few short storytelling moments to anchor a web of symbolic significance hinted at by the environments you walk through. The game opens with a first-person vision of stabbing a young dark-haired girl, who we find is named Gabby. Gabby becomes one of the few constant points between the nightmares. You are always Thomas, she is always Gabby, but the relationship between you shifts depending upon the context of the dream. At first she’s your sister, then your therapist, then your wife.\n\nThis game has a branching ending system which, paired with the conceit of the game, has an interesting implication. Because the final scene of each story pathway is, at least implicitly, the reality that has lead to the nightmares, his real-world circumstances are derived from the dreams he has about them. It’s an interesting kind of reverse-causality emerging as a natural consequence of the decision to tell a branching story about a dream-world. It implies a certain universality to nightmares, that any one of three very different Thomases could suffer similar acute anxieties. It also implies that whatever decisions you, as a player, make, those decisions were foreordained by the nature of your Thomas, driven not by your choice as a player but by the shape of the reality that haunts his dreams.\n\nThere’s a number of different thematic elements that repeat themselves in background elements, found objects, and enemy design. Birds are commonly portrayed in the paintings you walk past: Frequently what appear to be albatrosses, tying into the theme of guilt and loss, but vultures and crows also seem to be portrayed. Additionally, several times you walk past a long dinner-table set for a holiday meal, and among other things the table is set with a large turkey – and, in darker iterations of the nightmare and in paintings, the turkey on the platter is rotted and hollow. This image neatly echoes the guilt of the albatross, the death-imagery of the crows and vultures, and the familial betrayal and unease that seems to underlie the anxiety between Thomas and Gabby.\n\nSuicide and murder, betrayal of the self and betrayal of those close to you, are portrayed as roughly equivalent. Gabby is so closely identified with Thomas that any harm that comes to her seems almost indistinguishable from harm done to Thomas himself, and they both harm themselves as often and as brutally as they harm each other. There’s a truth here that is rarely expressed about violence in games or, indeed, much of anywhere: Past a certain point, hurting the ones we care about most is the same as intentional self-harm, and often arises from the same impulses. Those who are close to us actually substantially define who we are, and if their perception is shaken or ceases then the person we believe ourselves to be exists a little bit less. We become orphaned from existence. We become castaways.\n\nThe floors of the hospital are littered with broken glass, and in one branch of the nightmare you find a broken bottle sitting in a sink, blood on its edges, teeth with traces of blood beside it. The teeth are there in earlier iterations without the bottle, but the bottle is unique to that branch, perhaps implying alcoholism in the reality of that nightmare – an interpretation amply supported by its conclusion. The teeth are in the sink for all paths and, perhaps along a similar theme, misshapen and grinning slit-mouths and bleeding or missing eyes are common thematically, most of the enemies having one or more of these, but it’s not clear to me whether this is intended to represent a specific anxiety (blindness, helplessness, self-harm) or are merely raw nightmare-stuff, the kind of thing that every human finds generally disturbing and which thus tends to find its way into horror games.\n\nThere’s also an ongoing gender motif. Visiting Thomas’s childhood bedroom, we see toy soldiers scattered about, and in Gabby’s there are dolls. Also, aside from the pictures of birds and of food, plus the occasional landscape or violent death, there are many paintings of women in wedding veils or shrouds or hidden mothers holding children, and even more portraits of men in military dress. Together, they hint at Thomas’s struggles with traditional masculine and feminine identity and the history of violence that comes with them, both as perpetrator and as victim. This is echoed by a recurring motif of the bloody axe and the bloody meat cleaver, the painting of the huntsman standing behind the girl with an axe and the tolling clock’s mechanical diorama of headsman and victim, and the stuffed bear – both the fluffy kind, kept in Gabby’s room and standing in for her in several places, and an actual bear, stuffed and mounted, Gabby dead again in effigy.\n\nInterestingly, one of the three endings shows the stuffed bear in Thomas’s bed, just before he goes to kiss his sister goodnight: The world still seems nightmarish, damaged dolls and missing doorways, but it seems to give Thomas some measure of peace anyway – whether by healing the conflict in his mind that leads to such terrible dreams, or merely succumbing to them and joining Gabby in endless sleep, it’s impossible to say.\n\nReligious imagery is also commonplace throughout. This is made extremely explicit by the stained glass image of Christ near the end of one of the paths, emphasizing the connection between the fifth wound of Christ, the spear stabbed in his side, and the wounds that Gabby and Thomas suffer in many branches of the nightmare. There are two bibles lying open on lecterns at different points in the game. The first, in one of the early nightmares, is open to psalms 21, likely because of this line: “Deus, Deus meus, respice in me: quare me dereliquisti”, or “O God my God, look upon me: why hast thou forsaken me?” The second is open to Matthew 27, the account of the crucifixion of Jesus of Nazareth: “Et circa horam nonam clamavit Jesus voce magna dicens: Eli Eli, lamma sabacthani? hoc est: Deus meus Deus meus ut quid dereliquisti me”, or “About the ninth hour Jesus cried out in a loud voice, ‘Eloi, Eloi, lamma sabachthani?’ which means: ‘My God, my God, why have you forsaken me?'” These messages are referenced in numerous places throughout the game, found scrawled in blood on the walls of insane asylums and bedrooms. Even aside from this obvious connection, there’s an interesting implied connection between the guilt of Judas at spilling the blood of an innocent leading him to hang himself and all of the hanging imagery in the game, as well as the name of Thomas, the Apostle “Doubting” Thomas who refused to believe in the resurrection of Christ, and the similarly recurring text scrawls, “Everything is a lie.” Continuing these biblical allusions further, Gabby likely represents Gabriel, the messenger of God, sent to guide Thomas out of the nightmare world he has created for himself. Unfortunately, I am far from a biblical scholar so I’m sure a lot of more subtle allusions and connections have evaded my notice, but together this suggests a crisis and collision of faith as well as of identity.\n\nIt’s difficult to say anything concrete about games that embrace ambiguity and mystery, but I love the feeling of having as much fun thinking about a work of art afterwards as I did while actively experiencing it, and Neverending Nightmares has delivered on that. Though it’s a lot of work sometimes to analyze a game like this, it’s also deeply rewarding in that it pushes me to take a closer look at the veins connecting a piece’s ideas and meaning, and in so doing think more deeply about what lies under the surface of my own work. It’s a powerful experience just to exist in a world like this, however distantly and abstractly, for a time.\n\nThough I may or may not play it again, I’m sure I will revisit Neverending Nightmares – perhaps just a moment of doubt or a flicker of black hair at the edge of my vision, perhaps as a dream, perhaps as an inspiration. It’s in my head now.\n\n[next: Lone Survivor]"
    }
}