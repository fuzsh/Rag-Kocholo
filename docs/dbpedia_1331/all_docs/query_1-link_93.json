{
    "id": "dbpedia_1331_1",
    "rank": 93,
    "data": {
        "url": "https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs",
        "read_more_link": "",
        "language": "en",
        "title": "OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs",
        "top_image": "https://community-cdn-digitalocean-com.global.ssl.fastly.net/PMay4gBQBUE6zWqRy7Vv6i7C",
        "meta_img": "https://community-cdn-digitalocean-com.global.ssl.fastly.net/PMay4gBQBUE6zWqRy7Vv6i7C",
        "images": [
            "https://www.gravatar.com/avatar/70979f52ba1b0c75ae06f4dbed27ed902f052fd10d9cc81271b836b585bdff4d?default=retro 1x, https://www.gravatar.com/avatar/70979f52ba1b0c75ae06f4dbed27ed902f052fd10d9cc81271b836b585bdff4d?default=retro 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=https%3A%2F%2Fcommunity-cdn-digitalocean-com.global.ssl.fastly.net%2FPMay4gBQBUE6zWqRy7Vv6i7C&width=828 1x, https://www.digitalocean.com/api/static-content/v1/images?src=https%3A%2F%2Fcommunity-cdn-digitalocean-com.global.ssl.fastly.net%2FPMay4gBQBUE6zWqRy7Vv6i7C&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=64 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fdefault-avatar.14b0d31d.jpeg&width=128 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fcreativecommons.c0a877f1.png&width=128 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fcreativecommons.c0a877f1.png&width=256 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FnewsLetter.c1eb26e3.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FnewsLetter.c1eb26e3.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FhollieHub4Good.90285377.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2FhollieHub4Good.90285377.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fwrite4DO.6a167f0c.jpeg&width=750 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fwrite4DO.6a167f0c.jpeg&width=1920 2x",
            "https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fconsole-static.1b14cc64.svg&width=640 1x, https://www.digitalocean.com/api/static-content/v1/images?src=%2F_next%2Fstatic%2Fmedia%2Fconsole-static.1b14cc64.svg&width=1080 2x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This guide provides a quick reference to OpenSSL commands that are useful in common, everyday scenarios. Similar to a cheat sheet for OpenSSL commands.",
        "meta_lang": "en",
        "meta_favicon": "/_next/static/media/apple-touch-icon.d7edaa01.png",
        "meta_site_name": "",
        "canonical_link": "https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs",
        "text": "Introduction\n\nOpenSSL is a versatile command line tool that can be used for a large variety of tasks related to Public Key Infrastructure (PKI) and HTTPS (HTTP over TLS). This cheat sheet style guide provides a quick reference to OpenSSL commands that are useful in common, everyday scenarios. This includes OpenSSL examples for generating private keys, certificate signing requests, and certificate format conversion. It does not cover all of the uses of OpenSSL.\n\nHow to Use This Guide:\n\nIf you are not familiar with certificate signing requests (CSRs), read the first section\n\nAside from the first section, this guide is in a cheat sheet format: a list of self-contained command line snippets\n\nJump to any section that is relevant to the task you are trying to complete (Hint: use the Contents menu or your browserâs Find function)\n\nMost of the commands are one-liners that have been expanded to multiple lines (using the \\ symbol) for clarity\n\nAbout Certificate Signing Requests (CSRs)\n\nIf you would like to obtain an SSL certificate from a commercial certificate authority (CA), you must generate a certificate signing request (CSR). A CSR consists mainly of the public key of a key pair, and some additional information. Both of these components are inserted into the certificate when it is signed.\n\nWhenever you generate a CSR, you will be prompted to provide information regarding the certificate. This information is known as a Distinguished Name (DN). An important field in the DN is the Common Name (CN), which should be the exact Fully Qualified Domain Name (FQDN) of the host that you intend to use the certificate with. It is also possible to skip the interactive prompts when creating a CSR by passing the information via command line or from a file.\n\nThe other items in a DN provide additional information about your business or organization. If you are purchasing an SSL certificate from a certificate authority, it is often required that these additional fields, such as âOrganizationâ, accurately reflect your organizationâs details.\n\nHere is an example of what the CSR information prompt will look like:\n\n--- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:New York Locality Name (eg, city) []:Brooklyn Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example Brooklyn Company Organizational Unit Name (eg, section) []:Technology Division Common Name (e.g. server FQDN or YOUR name) []:examplebrooklyn.com Email Address []:\n\nIf you want to non-interactively answer the CSR information prompt, you can do so by adding the -subj option to any OpenSSL commands that request CSR information. Here is an example of the option, using the same information displayed in the code block above:\n\n-subj \"/C=US/ST=New York/L=Brooklyn/O=Example Brooklyn Company/CN=examplebrooklyn.com\"\n\nNow that you understand CSRs, feel free to jump around to whichever section of this guide covers your OpenSSL needs.\n\nGenerating CSRs\n\nThis section covers OpenSSL commands that are related to generating CSRs (and private keys, if they do not already exist). CSRs can be used to request SSL certificates from a certificate authority.\n\nKeep in mind that you may add the CSR information non-interactively with the -subj option, mentioned in the previous section.\n\nGenerate a Private Key and a CSR\n\nUse this method if you want to use HTTPS (HTTP over TLS) to secure your Apache HTTP or Nginx web server, and you want to use a Certificate Authority (CA) to issue the SSL certificate. The CSR that is generated can be sent to a CA to request the issuance of a CA-signed SSL certificate. If your CA supports SHA-2, add the -sha256 option to sign the CSR with SHA-2.\n\nThis command creates a 2048-bit private key (domain.key) and a CSR (domain.csr) from scratch:\n\nopenssl req \\\n\n-newkey rsa:2048 -nodes -keyout domain.key \\\n\n-out domain.csr\n\nAnswer the CSR information prompt to complete the process.\n\nThe -newkey rsa:2048 option specifies that the key should be 2048-bit, generated using the RSA algorithm. The -nodes option specifies that the private key should not be encrypted with a pass phrase. The -new option, which is not included here but implied, indicates that a CSR is being generated.\n\nGenerate a CSR from an Existing Private Key\n\nUse this method if you already have a private key that you would like to use to request a certificate from a CA.\n\nThis command creates a new CSR (domain.csr) based on an existing private key (domain.key):\n\nopenssl req \\\n\n-key domain.key \\\n\n-new -out domain.csr\n\nAnswer the CSR information prompt to complete the process.\n\nThe -key option specifies an existing private key (domain.key) that will be used to generate a new CSR. The -new option indicates that a CSR is being generated.\n\nGenerate a CSR from an Existing Certificate and Private Key\n\nUse this method if you want to renew an existing certificate but you or your CA do not have the original CSR for some reason. It basically saves you the trouble of re-entering the CSR information, as it extracts that information from the existing certificate.\n\nThis command creates a new CSR (domain.csr) based on an existing certificate (domain.crt) and private key (domain.key):\n\nopenssl x509 \\\n\n-in domain.crt \\\n\n-signkey domain.key \\\n\n-x509toreq -out domain.csr\n\nThe -x509toreq option specifies that you are using an X509 certificate to make a CSR.\n\nGenerating SSL Certificates\n\nIf you would like to use an SSL certificate to secure a service but you do not require a CA-signed certificate, a valid (and free) solution is to sign your own certificates.\n\nA common type of certificate that you can issue yourself is a self-signed certificate. A self-signed certificate is a certificate that is signed with its own private key. Self-signed certificates can be used to encrypt data just as well as CA-signed certificates, but your users will be displayed a warning that says that the certificate is not trusted by their computer or browser. Therefore, self-signed certificates should only be used if you do not need to prove your serviceâs identity to its users (e.g. non-production or non-public servers).\n\nThis section covers OpenSSL commands that are related to generating self-signed certificates.\n\nGenerate a Self-Signed Certificate\n\nUse this method if you want to use HTTPS (HTTP over TLS) to secure your Apache HTTP or Nginx web server, and you do not require that your certificate is signed by a CA.\n\nThis command creates a 2048-bit private key (domain.key) and a self-signed certificate (domain.crt) from scratch:\n\nopenssl req \\\n\n-newkey rsa:2048 -nodes -keyout domain.key \\\n\n-x509 -days 365 -out domain.crt\n\nAnswer the CSR information prompt to complete the process.\n\nThe -x509 option tells req to create a self-signed certificate. The -days 365 option specifies that the certificate will be valid for 365 days. A temporary CSR is generated to gather information to associate with the certificate.\n\nGenerate a Self-Signed Certificate from an Existing Private Key\n\nUse this method if you already have a private key that you would like to generate a self-signed certificate with it.\n\nThis command creates a self-signed certificate (domain.crt) from an existing private key (domain.key):\n\nopenssl req \\\n\n-key domain.key \\\n\n-new \\\n\n-x509 -days 365 -out domain.crt\n\nAnswer the CSR information prompt to complete the process.\n\nThe -x509 option tells req to create a self-signed certificate. The -days 365 option specifies that the certificate will be valid for 365 days. The -new option enables the CSR information prompt.\n\nGenerate a Self-Signed Certificate from an Existing Private Key and CSR\n\nUse this method if you already have a private key and CSR, and you want to generate a self-signed certificate with them.\n\nThis command creates a self-signed certificate (domain.crt) from an existing private key (domain.key) and (domain.csr):\n\nopenssl x509 \\\n\n-signkey domain.key \\\n\n-in domain.csr \\\n\n-req -days 365 -out domain.crt\n\nThe -days 365 option specifies that the certificate will be valid for 365 days.\n\nView Certificates\n\nCertificate and CSR files are encoded in PEM format, which is not readily human-readable.\n\nThis section covers OpenSSL commands that will output the actual entries of PEM-encoded files.\n\nView CSR Entries\n\nThis command allows you to view and verify the contents of a CSR (domain.csr) in plain text:\n\nopenssl req -text -noout -verify -in domain.csr\n\nView Certificate Entries\n\nThis command allows you to view the contents of a certificate (domain.crt) in plain text:\n\nopenssl x509 -text -noout -in domain.crt\n\nVerify a Certificate was Signed by a CA\n\nUse this command to verify that a certificate (domain.crt) was signed by a specific CA certificate (ca.crt):\n\nopenssl verify -verbose -CAFile ca.crt domain.crt\n\nPrivate Keys\n\nThis section covers OpenSSL commands that are specific to creating and verifying private keys.\n\nCreate a Private Key\n\nUse this command to create a password-protected, 2048-bit private key (domain.key):\n\nopenssl genrsa -des3 -out domain.key 2048\n\nEnter a password when prompted to complete the process.\n\nVerify a Private Key\n\nUse this command to check that a private key (domain.key) is a valid key:\n\nopenssl rsa -check -in domain.key\n\nIf your private key is encrypted, you will be prompted for its pass phrase. Upon success, the unencrypted key will be output on the terminal.\n\nVerify a Private Key Matches a Certificate and CSR\n\nUse these commands to verify if a private key (domain.key) matches a certificate (domain.crt) and CSR (domain.csr):\n\nopenssl rsa -noout -modulus -in domain.key | openssl md5\n\nopenssl x509 -noout -modulus -in domain.crt | openssl md5\n\nopenssl req -noout -modulus -in domain.csr | openssl md5\n\nIf the output of each command is identical there is an extremely high probability that the private key, certificate, and CSR are related.\n\nEncrypt a Private Key\n\nThis takes an unencrypted private key (unencrypted.key) and outputs an encrypted version of it (encrypted.key):\n\nopenssl rsa -des3 \\\n\n-in unencrypted.key \\\n\n-out encrypted.key\n\nEnter your desired pass phrase, to encrypt the private key with.\n\nDecrypt a Private Key\n\nThis takes an encrypted private key (encrypted.key) and outputs a decrypted version of it (decrypted.key):\n\nopenssl rsa \\\n\n-in encrypted.key \\\n\n-out decrypted.key\n\nEnter the pass phrase for the encrypted key when prompted.\n\nConvert Certificate Formats\n\nAll of the certificates that we have been working with have been X.509 certificates that are ASCII PEM encoded. There are a variety of other certificate encoding and container types; some applications prefer certain formats over others. Also, many of these formats can contain multiple items, such as a private key, certificate, and CA certificate, in a single file.\n\nOpenSSL can be used to convert certificates to and from a large variety of these formats. This section will cover a some of the possible conversions.\n\nConvert PEM to DER\n\nUse this command if you want to convert a PEM-encoded certificate (domain.crt) to a DER-encoded certificate (domain.der), a binary format:\n\nopenssl x509 \\\n\n-in domain.crt \\\n\n-outform der -out domain.der\n\nThe DER format is typically used with Java.\n\nConvert DER to PEM\n\nUse this command if you want to convert a DER-encoded certificate (domain.der) to a PEM-encoded certificate (domain.crt):\n\nopenssl x509 \\\n\n-inform der -in domain.der \\\n\n-out domain.crt\n\nConvert PEM to PKCS7\n\nUse this command if you want to add PEM certificates (domain.crt and ca-chain.crt) to a PKCS7 file (domain.p7b):\n\nopenssl crl2pkcs7 -nocrl \\\n\n-certfile domain.crt \\\n\n-certfile ca-chain.crt \\\n\n-out domain.p7b\n\nNote that you can use one or more -certfile options to specify which certificates to add to the PKCS7 file.\n\nPKCS7 files, also known as P7B, are typically used in Java Keystores and Microsoft IIS (Windows). They are ASCII files which can contain certificates and CA certificates.\n\nConvert PKCS7 to PEM\n\nUse this command if you want to convert a PKCS7 file (domain.p7b) to a PEM file:\n\nopenssl pkcs7 \\\n\n-in domain.p7b \\\n\n-print_certs -out domain.crt\n\nNote that if your PKCS7 file has multiple items in it (e.g. a certificate and a CA intermediate certificate), the PEM file that is created will contain all of the items in it.\n\nConvert PEM to PKCS12\n\nUse this command if you want to take a private key (domain.key) and a certificate (domain.crt), and combine them into a PKCS12 file (domain.pfx):\n\nopenssl pkcs12 \\\n\n-inkey domain.key \\\n\n-in domain.crt \\\n\n-export -out domain.pfx\n\nYou will be prompted for export passwords, which you may leave blank. Note that you may add a chain of certificates to the PKCS12 file by concatenating the certificates together in a single PEM file (domain.crt) in this case.\n\nPKCS12 files, also known as PFX files, are typically used for importing and exporting certificate chains in Microsoft IIS (Windows).\n\nConvert PKCS12 to PEM\n\nUse this command if you want to convert a PKCS12 file (domain.pfx) and convert it to PEM format (domain.combined.crt):\n\nopenssl pkcs12 \\ -in domain.pfx \\ -nodes -out domain.combined.crt\n\nNote that if your PKCS12 file has multiple items in it (e.g. a certificate and private key), the PEM file that is created will contain all of the items in it.\n\nOpenSSL Version\n\nThe openssl version command can be used to check which version you are running. The version of OpenSSL that you are running, and the options it was compiled with affect the capabilities (and sometimes the command line options) that are available to you.\n\nThe following command displays the OpenSSL version that you are running, and all of the options that it was compiled with:\n\nopenssl version -a\n\nThis guide was written using an OpenSSL binary with the following details (the output of the previous command):\n\nOpenSSL 1.1.1 11 Sep 2018 built on: Mon Aug 23 17:02:39 2021 UTC platform: debian-amd64 options: bn(64,64) rc4(16x,int) des(int) blowfish(ptr) compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -Wa,--noexecstack -g -O2 -fdebug-prefix-map=/build/openssl-Flav1L/openssl-1.1.1=. -fstack-protector-strong -Wformat -Werror=format-security -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE=2 OPENSSLDIR: \"/usr/lib/ssl\" ENGINESDIR: \"/usr/lib/x86_64-linux-gnu/engines-1.1\" Seeding source: os-specific\n\nConclusion\n\nThat should cover how most people use OpenSSL to work with SSL certs. It has many other uses that were not covered here, so feel free to ask or suggest other uses in the comments.\n\nIf you are having issues with any of the commands, be sure to comment (and include your OpenSSL version output)."
    }
}