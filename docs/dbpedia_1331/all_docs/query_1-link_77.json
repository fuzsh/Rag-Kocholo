{
    "id": "dbpedia_1331_1",
    "rank": 77,
    "data": {
        "url": "https://dl.acm.org/doi/10.1145/2345156.2254118",
        "read_more_link": "",
        "language": "en",
        "title": "A dynamic program analysis to find floating-point accuracy problems",
        "top_image": "https://dl.acm.org/cms/asset/45326d33-dd75-41ec-a026-0ae8053b68cc/2345156.cover.jpg",
        "meta_img": "https://dl.acm.org/cms/asset/45326d33-dd75-41ec-a026-0ae8053b68cc/2345156.cover.jpg",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/10.1145/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81315488920&format=rel-imgonly&assetId=hack.jpg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81100018102&format=rel-imgonly&assetId=jv.jpg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/action/showDoPubAsset?doi=10.1145/contrib-81315488920&format=rel-imgonly&assetId=hack.jpg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "dynamic program analysis",
            "floating-point accuracy",
            "program instrumentation"
        ],
        "tags": null,
        "authors": [
            "Florian Benz Saarland University",
            "Germany View Profile",
            "Sebastian Hack Saarland University",
            "Florian Benz",
            "Andreas Hildebrandt",
            "Sebastian Hack"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Programs using floating-point arithmetic are prone to accuracy problems caused by\nrounding and catastrophic cancellation. These phenomena provoke bugs that are notoriously\nhard to track down: the program does not necessarily crash and the results are ...",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "ACM SIGPLAN Notices",
        "canonical_link": "https://dl.acm.org/doi/10.1145/2345156.2254118",
        "text": "Abstract\n\nPrograms using floating-point arithmetic are prone to accuracy problems caused by rounding and catastrophic cancellation. These phenomena provoke bugs that are notoriously hard to track down: the program does not necessarily crash and the results are not necessarily obviously wrong, but often subtly inaccurate. Further use of these values can lead to catastrophic errors.\n\nIn this paper, we present a dynamic program analysis that supports the programmer in finding accuracy problems. Our analysis uses binary translation to perform every floating-point computation side by side in higher precision. Furthermore, we use a lightweight slicing approach to track the evolution of errors.\n\nWe evaluate our analysis by demonstrating that it catches wellknown floating-point accuracy problems and by analyzing the Spec CFP2006 floating-point benchmark. In the latter, we show how our tool tracks down a catastrophic cancellation that causes a complete loss of accuracy leading to a meaningless program result. Finally, we apply our program to a complex, real-world bioinformatics application in which our program detected a serious cancellation. Correcting the instability led not only to improved quality of the result, but also to an improvement of the program's run time.In this paper, we present a dynamic program analysis that supports the programmer in finding accuracy problems. Our analysis uses binary translation to perform every floating-point computation side by side in higher precision. Furthermore, we use a lightweight slicing approach to track the evolution of errors. We evaluate our analysis by demonstrating that it catches wellknown floating-point accuracy problems and by analyzing the SpecfiCFP2006 floating-point benchmark. In the latter, we show how our tool tracks down a catastrophic cancellation that causes a complete loss of accuracy leading to a meaningless program result. Finally, we apply our program to a complex, real-world bioinformatics application in which our program detected a serious cancellation. Correcting the instability led not only to improved quality of the result, but also to an improvement of the program's run time.\n\nReferences\n\n[1]\n\nD. An, R. Blue, M. Lam, S. Piper, and G. Stoker. FPInst: Floating point error analysis using dyninst, 2008. http://www.freearrow.com/downloads/files/fpinst.pdf.\n\n[2]\n\nA. W. Brown, P. H. J. Kelly, and W. Luk. Profiling floating point value ranges for reconfigurable implementation. In Proceedings of the 1st HiPEAC Workshop on Reconfigurable Computing, pages 6--16, 2007.\n\n[3]\n\nS. P. E. Corporation. SPEC CPU2006 benchmarks. http://www.spec.org/cpu2006/.\n\n[4]\n\nT. J. Dekker. A floating-point technique for extending the available precision. Numerische Mathematik, 18:224--242, 1971. 10.1007/BF01397083.\n\n[5]\n\nD. Delmas, E. Goubault, S. Putot, J. Souyris, K. Tekkal, and F. Védrine. Towards an industrial use of FLUCTUAT on safety-critical avionics software. In FMICS '09, pages 53--69. Springer-Verlag, 2009.\n\n[6]\n\nS. Gal. An accurate elementary mathematical library for the IEEE floating point standard. ACM Trans. Math. Softw., 17:26--45, March 1991.\n\n[7]\n\nGNU Linear Programming Kit, ver. 4.47. http://www.gnu.org/software/glpk/.\n\n[8]\n\nD. Goldberg. What every computer scientist should know about floating-point arithmetic. ACM Comput. Surv., 23:5--48, 1991.\n\n[9]\n\nE. Goubault and S. Putot. Static analysis of finite precision computations. In VMCAI'11, pages 232--247, Berlin, Heidelberg, 2011. Springer-Verlag.\n\n[10]\n\nN. J. Higham. Accuracy and Stability of Numerical Algorithms. Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, second edition edition, 2002.\n\n[11]\n\nA. Hildebrandt, A. K. Dehof, A. Rurainski, A. Bertsch, M. Schumann, N. Toussaint, A. Moll, D. Stockel, S. Nickels, S. Mueller, H.-P. Lenhof, and O. Kohlbacher. BALL - biochemical algorithms library 1.3. BMC Bioinformatics, 11(1):531, 2010.\n\n[12]\n\nW. Kahan. How futile are mindless assessments of roundoff in floating-point computation?, 2006. http://www.cs.berkeley.edu/wkahan/Mindless.pdf.\n\n[13]\n\nM. O. Lam, J. K. Hollingsworth, and G. W. Stewart. Dynamic floating-point cancellation detection. In WHIST 11, 2011.\n\n[14]\n\nP. Langlois. Automatic linear correction of rounding errors. BIT Numerical Mathematics, 41:515--539, 2001.\n\n[15]\n\nJ.-M. Muller, N. Brisebarre, F. de Dinechin, C.-P. Jeannerod, V. Lefèvre, G. Melquiond, N. Revol, D. Stehlé, and S. Torres. Handbook of Floating-Point Arithmetic. Birkhäuser Boston, 2010.\n\n[16]\n\nN. Nethercote and J. Seward. Valgrind: a framework for heavyweight dynamic binary instrumentation. In PLDI '07, pages 89--100. ACM, 2007.\n\n[17]\n\nA. Neumaier and O. Shcherbina. Safe bounds in linear and mixed-integer linear programming. Mathematical Programming, 99:283--296, 2004. 10.1007/s10107-003-0433-3.\n\n[18]\n\nU. G. A. Office. Patriot missile defense: Software problem led to system failure at Dhahran, Saudi Arabia, GAO report IMTEC 92--26, 1992. http://www.gao.gov/products/IMTEC-92-26/.\n\n[19]\n\nJ. Walker. Floating-point benchmarks. http://www.fourmilab.ch/fbench/, retrieved on 2011-03-03.\n\n[20]\n\nThe Wall Street Journal November 8, 1983, p.37.\n\n[21]\n\nV. Weaver. SPEC CPU2006 problems of Valgrind. http://thread.gmane.org/gmane.comp.debugging.valgrind.devel/1488/, retrieved on 2011-03-03.\n\nCited By\n\nView all\n\nKampik MRoj JDróżdż ŁEstimation of the Resultant Expanded Uncertainty of the Output Quantities of the Measurement Chain Using the Discrete Wavelet Transform AlgorithmApplied Sciences10.3390/app1409369114:9(3691)\n\nBriggs ILad YPanchekha PImplementation and Synthesis of Math Library FunctionsProceedings of the ACM on Programming Languages10.1145/36328748:POPL(942-969)\n\nDemeure NChevalier CDenis CDossantos-Uzarralde PAlgorithm 1029: Encapsulated Error, a Direct Approach to Evaluate Floating-Point AccuracyACM Transactions on Mathematical Software10.1145/354920548:4(1-16)\n\nShow More Cited By\n\nIndex Terms\n\nA dynamic program analysis to find floating-point accuracy problems\n\nMathematics of computing\n\nMathematical analysis\n\nNumerical analysis\n\nArbitrary-precision arithmetic\n\nInterval arithmetic\n\nTheory of computation\n\nRandomness, geometry and discrete structures\n\nError-correcting codes\n\nSemantics and reasoning\n\nProgram reasoning\n\nProgram analysis\n\nProgram semantics\n\nOperational semantics\n\nRecommendations\n\nA dynamic program analysis to find floating-point accuracy problems\n\nPLDI '12: Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation\n\nPrograms using floating-point arithmetic are prone to accuracy problems caused by rounding and catastrophic cancellation. These phenomena provoke bugs that are notoriously hard to track down: the program does not necessarily crash and the results are ...\n\nDecimal Floating-Point Multiplication\n\nDecimal multiplication is important in many commercial applications including financial analysis, banking, tax calculation, currency conversion, insurance, and accounting. This paper presents the design of two decimal floating-point multipliers: one ...\n\nFast decimal floating-point division\n\nA new implementation for decimal floating-point (DFP) division is introduced. The algorithm is based on high-radix SRT division with the recurrence in a new decimal signed-digit format. Quotient digits are selected using comparison multiples, where the ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n534 pages\n\nISSN:0362-1340\n\nEISSN:1558-1160\n\nDOI:10.1145/2345156\n\nIssue’s Table of Contents\n\n572 pages\n\nISBN:9781450312059\n\nDOI:10.1145/2254064\n\nGeneral Chairs:\n\nJan Vitek\n\nPurdue University\n\n,\n\nHaibo Lin\n\nMicrosoft China\n\n,\n\nProgram Chair:\n\nFrank Tip\n\nIBM T.J. Watson Research Center\n\nCopyright © 2012 ACM.\n\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from [email protected]\n\nPublisher\n\nAssociation for Computing Machinery\n\nNew York, NY, United States\n\nPublication History\n\nPublished: 11 June 2012\n\nPublished in SIGPLAN Volume 47, Issue 6\n\nCheck for updates\n\nAuthor Tags\n\ndynamic program analysis\n\nfloating-point accuracy\n\nprogram instrumentation\n\nQualifiers\n\nResearch-article\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n126\n\nTotal Citations\n\nView Citations\n\n940\n\nTotal Downloads\n\nDownloads (Last 12 months)47\n\nDownloads (Last 6 weeks)4\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nKampik MRoj JDróżdż ŁEstimation of the Resultant Expanded Uncertainty of the Output Quantities of the Measurement Chain Using the Discrete Wavelet Transform AlgorithmApplied Sciences10.3390/app1409369114:9(3691)\n\nBriggs ILad YPanchekha PImplementation and Synthesis of Math Library FunctionsProceedings of the ACM on Programming Languages10.1145/36328748:POPL(942-969)\n\nDemeure NChevalier CDenis CDossantos-Uzarralde PAlgorithm 1029: Encapsulated Error, a Direct Approach to Evaluate Floating-Point AccuracyACM Transactions on Mathematical Software10.1145/354920548:4(1-16)\n\nChatelain YYoung NKiar GGlatard TPyTracer: Automatically Profiling Numerical Instabilities in PythonIEEE Transactions on Computers10.1109/TC.2022.322437772:6(1792-1803)\n\nSingh GKundu BMenon HPenev ALange DVassilev VFast And Automatic Floating Point Error Analysis With CHEF-FP2023 IEEE International Parallel and Distributed Processing Symposium (IPDPS)10.1109/IPDPS54959.2023.00105(1018-1028)\n\nYang HXu JHao JZhang ZZhou BDetecting Floating-Point Expression Errors Based Improved PSO AlgorithmIET Software10.1049/2023/66812672023(1-16)\n\nLi CGraillat SQuan ZGu TJiang HLi KXHYPRE: a reliable parallel numerical algorithm library for solving large-scale sparse linear equationsCCF Transactions on High Performance Computing10.1007/s42514-023-00141-35:2(191-209)\n\nMiao DLaguna IRubio-González CExpression Isolation of Compiler-Induced Numerical Inconsistencies in Heterogeneous CodeHigh Performance Computing10.1007/978-3-031-32041-5_20(381-401)\n\nLaguna IGopalakrishnan GWolf FShende SCulhane CAlam SJagode HFinding inputs that trigger floating-point exceptions in GPUs via bayesian optimizationProceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis10.5555/3571885.3571928(1-14)\n\nLaguna ILi XGopalakrishnan GGonnord LTitolo LBinFPE: accurate floating-point exception detection for GPU applicationsProceedings of the 11th ACM SIGPLAN International Workshop on the State Of the Art in Program Analysis10.1145/3520313.3534655(1-8)\n\nShow More Cited By\n\nView Options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nView options\n\nPDF\n\nView or Download as a PDF file.\n\nPDF\n\neReader\n\nView online with eReader.\n\neReader\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nFlorian Benz\n\nSaarland University, Saarbrücken, Germany\n\nAndreas Hildebrandt\n\nJohannes-Gutenberg Universität Mainz, Mainz, Germany\n\nSebastian Hack\n\nSaarland University, Saarbrücken, Germany\n\nRequest permissions Authors Info & Affiliations"
    }
}