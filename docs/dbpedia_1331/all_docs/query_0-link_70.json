{
    "id": "dbpedia_1331_0",
    "rank": 70,
    "data": {
        "url": "https://stackoverflow.com/questions/29685421/hide-keyboard-in-react-native",
        "read_more_link": "",
        "language": "en",
        "title": "Hide keyboard in react-native",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://lh5.googleusercontent.com/-LFZ36g4Pj1U/AAAAAAAAAAI/AAAAAAAAAKE/YzfFK9YCRJo/photo.jpg?sz=64",
            "https://i.sstatic.net/03jCD.png?s=64",
            "https://www.gravatar.com/avatar/b9aeff77c9e059d47f993ccac9755490?s=64&d=identicon&r=PG",
            "https://lh5.googleusercontent.com/-LFZ36g4Pj1U/AAAAAAAAAAI/AAAAAAAAAKE/YzfFK9YCRJo/photo.jpg?sz=64",
            "https://i.sstatic.net/fvSNO.jpg?s=64",
            "https://www.gravatar.com/avatar/6e6e22d81a1f4f394f62301be40c2e20?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Epc6c.png?s=64",
            "https://i.sstatic.net/bwsKY.jpg?s=64",
            "https://i.sstatic.net/03jCD.png?s=64",
            "https://i.sstatic.net/WtfBG.png?s=64",
            "https://i.sstatic.net/Epc6c.png?s=64",
            "https://www.gravatar.com/avatar/e32e1a3c9493cf1081e6fdb65d209ddc?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/Epc6c.png?s=64",
            "https://i.sstatic.net/jrFCx.jpg?s=64",
            "https://lh4.googleusercontent.com/-nU97qxfI-qg/AAAAAAAAAAI/AAAAAAAAAEs/xMUw-eJZbNA/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/e7ba59b87cd87f5cdd48f0472d465523?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/3juyl.png",
            "https://i.sstatic.net/ZWS5g.png",
            "https://lh3.googleusercontent.com/a-/AOh14GgoFKO1JUQhbDRT77K6YdDetZi-Ii7iIF5byUPaTg=k-s64",
            "https://www.gravatar.com/avatar/b96a2c6a534e4f6450c81b8c91fc3eda?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Epc6c.png?s=64",
            "https://www.gravatar.com/avatar/3827f0621ff4f71c3291c171aa53d82b?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh3.googleusercontent.com/a-/AOh14Gg7E3dM4rlsV0wTtxqWuBVaOOIs8YOt5l2_yeYIQw=k-s64",
            "https://www.gravatar.com/avatar/fb90ab8d2cd8de4a95da1dadeb132981?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/WpTdl.jpg?s=64",
            "https://lh3.googleusercontent.com/-A3WE8Pq1WX8/AAAAAAAAAAI/AAAAAAAAAd4/ay6ZZCaXiQc/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/a030ab6cf2870760e3d8346568667946?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Epc6c.png?s=64",
            "https://www.gravatar.com/avatar/90ba9043808b6113512057d52ae2cf19?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/53XUx.jpg?s=64",
            "https://i.sstatic.net/trr4u.jpg?s=64",
            "https://www.gravatar.com/avatar/13407e1a602c5099e36bf60711e35dc6?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh5.googleusercontent.com/-KXnJurtpNV4/AAAAAAAAAAI/AAAAAAAAABU/KWCiBrPH-78/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/5f0573821f71f95e46538d2ba8798ee9?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/tYIVC.png?s=64",
            "https://i.sstatic.net/20C7t.jpg?s=64",
            "https://lh6.googleusercontent.com/-XMXuEDwIuUA/AAAAAAAAAAI/AAAAAAAAGLc/vxbVDbzXDOY/photo.jpg?sz=64",
            "https://i.sstatic.net/sXjHS.jpg?s=64",
            "https://www.gravatar.com/avatar/13595a9fe61111b54fb8d04a3891fd34?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/fd779fa7cb5169cd14ffc7607fc1ab1a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/bqXk5.png",
            "https://i.sstatic.net/mfigo.jpg?s=64",
            "https://i.sstatic.net/JHVDS.png?s=64",
            "https://www.gravatar.com/avatar/b8981590fe69ffd665547de9a7646b23?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/qyVe8.jpg?s=64",
            "https://i.sstatic.net/uGMjO.jpg?s=64",
            "https://stackoverflow.com/posts/29685421/ivc/02f9?prg=0ac35830-98dd-45d2-a34f-36c07aa7c4d6"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-04-16T20:33:33",
        "summary": "",
        "meta_description": "If I tap onto a textinput, I want to be able to tap somewhere else in order to dismiss the keyboard again (not the return key though). I haven't found the slightest piece of information concerning ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/29685421/hide-keyboard-in-react-native",
        "text": "The problem with keyboard not dismissing gets more severe if you have keyboardType='numeric', as there is no way to dismiss it.\n\nReplacing View with ScrollView is not a correct solution, as if you have multiple textInputs or buttons, tapping on them while the keyboard is up will only dismiss the keyboard.\n\nCorrect way is to encapsulate View with TouchableWithoutFeedback and calling Keyboard.dismiss()\n\nEDIT: You can now use ScrollView with keyboardShouldPersistTaps='handled' to only dismiss the keyboard when the tap is not handled by the children (ie. tapping on other textInputs or buttons)\n\nIf you have\n\n<View style={{flex: 1}}> <TextInput keyboardType='numeric'/> </View>\n\nChange it to\n\n<ScrollView contentContainerStyle={{flexGrow: 1}} keyboardShouldPersistTaps='handled' > <TextInput keyboardType='numeric'/> </ScrollView>\n\nor\n\nimport {Keyboard} from 'react-native' <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}> <View style={{flex: 1}}> <TextInput keyboardType='numeric'/> </View> </TouchableWithoutFeedback>\n\nEDIT: You can also create a Higher Order Component to dismiss the keyboard.\n\nimport React from 'react'; import { TouchableWithoutFeedback, Keyboard, View } from 'react-native'; const DismissKeyboardHOC = (Comp) => { return ({ children, ...props }) => ( <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}> <Comp {...props}> {children} </Comp> </TouchableWithoutFeedback> ); }; const DismissKeyboardView = DismissKeyboardHOC(View)\n\nSimply use it like this\n\n... render() { <DismissKeyboardView> <TextInput keyboardType='numeric'/> </DismissKeyboardView> }\n\nNOTE: the accessible={false} is required to make the input form continue to be accessible through VoiceOver. Visually impaired people will thank you!\n\nUse React Native's Keyboard.dismiss()\n\nUpdated Answer\n\nReact Native exposed the static dismiss() method on the Keyboard, so the updated method is:\n\nimport { Keyboard } from 'react-native'; Keyboard.dismiss()\n\nOriginal Answer\n\nUse React Native's dismissKeyboard Library.\n\nI had a very similar problem and felt like I was the only one that didn't get it.\n\nScrollViews\n\nIf you have a ScrollView, or anything that inherits from it like a ListView, you can add a prop that will automatically dismiss the keyboard based on press or dragging events.\n\nThe prop is keyboardDismissMode and can have a value of none, interactive or on-drag. You can read more on that here.\n\nRegular Views\n\nIf you have something other than a ScrollView and you'd like any presses to dismiss the keyboard, you can use a simple TouchableWithoutFeedback and have the onPress use React Native's utility library dismissKeyboard to dismiss the keyboard for you.\n\nIn your example, you could do something like this:\n\nvar DismissKeyboard = require('dismissKeyboard'); // Require React Native's utility library. // Wrap your view with a TouchableWithoutFeedback component like so. <View style={styles.container}> <TouchableWithoutFeedback onPress={ () => { DismissKeyboard() } }> <View> <Text style={styles.welcome}> Welcome to React Native! </Text> <Text style={styles.instructions}> To get started, edit index.ios.js </Text> <Text style={styles.instructions}> Press Cmd+R to reload,{'\\n'} Cmd+D or shake for dev menu </Text> <TextInput style={{height: 40, borderColor: 'gray', borderWidth: 1}} /> </View> </TouchableWithoutFeedback> </View>\n\nNote: TouchableWithoutFeedback can only have a single child so you need to wrap everything below it in a single View as shown above.\n\nThe simple answer is to use a ScrollView instead of View and set the scrollable property to false (might need to adjust some styling though).\n\nThis way, the keyboard gets dismissed the moment I tap somewhere else. This might be an issue with react-native, but tap events only seem to be handled with ScrollViews which leads to the described behaviour.\n\nEdit: Thanks to jllodra. Please note that if you tap directly into another Textinput and then outside, the keyboard still won't hide.\n\nI'm brand new to React, and ran into the exact same issue while making a demo app. If you use the onStartShouldSetResponder prop (described here), you can grab touches on a plain old React.View. Curious to hear more experienced React-ers' thoughts on this strategy / if there's a better one, but this is what worked for me:\n\ncontainerTouched(event) { this.refs.textInput.blur(); return false; } render() { <View onStartShouldSetResponder={this.containerTouched.bind(this)}> <TextInput ref='textInput' /> </View> }\n\n2 things to note here. First, as discussed here, there's not yet a way to end editing of all subviews, so we have to refer to the TextInput directly to blur it. Second, the onStartShouldSetResponder is intercepted by other touchable controls on top of it. So clicking on a TouchableHighlight etc (including another TextInput) within the container view will not trigger the event. However, clicking on an Image within the container view will still dismiss the keyboard.\n\nIf any one needs a working example of how to dismiss a multiline text input here ya go! Hope this helps some folks out there, the docs do not describe a way to dismiss a multiline input at all, at least there was no specific reference on how to do it. Still a noob to actually posting here on the stack, if anyone thinks this should be a reference to the actual post this snippet was written for let me know.\n\nimport React, { Component } from 'react' import { Keyboard, TextInput, TouchableOpacity, View, KeyboardAvoidingView, } from 'react-native' class App extends Component { constructor(props) { super(props) this.state = { behavior: 'position', } this._keyboardDismiss = this._keyboardDismiss.bind(this) } componentWillMount() { this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide); } componentWillUnmount() { this.keyboardDidHideListener.remove() } _keyboardDidHide() { Keyboard.dismiss() } render() { return ( <KeyboardAvoidingView style={{ flex: 1 }} behavior={this.state.behavior} > <TouchableOpacity onPress={this._keyboardDidHide}> <View> <TextInput style={{ color: '#000000', paddingLeft: 15, paddingTop: 10, fontSize: 18, }} multiline={true} textStyle={{ fontSize: '20', fontFamily: 'Montserrat-Medium' }} placeholder=\"Share your Success...\" value={this.state.text} underlineColorAndroid=\"transparent\" returnKeyType={'default'} /> </View> </TouchableOpacity> </KeyboardAvoidingView> ) } }\n\nThere are many ways you could handle this, the answers above don't include returnType as it was not included in react-native that time.\n\n1: You can solve it by wrapping your components inside ScrollView, by default ScrollView closes the keyboard if we press somewhere. But incase you want to use ScrollView but disable this effect. you can use pointerEvent prop to scrollView pointerEvents = 'none'.\n\n2: If you want to close the keyboard on a button press, You can just use Keyboard from react-native\n\nimport { Keyboard } from 'react-native' and inside onPress of that button, you can useKeyboard.dismiss()'.\n\n3: You can also close the keyboard when you click the return key on the keyboard, NOTE: if your keyboard type is numeric, you won't have a return key. So, you can enable it by giving it a prop, returnKeyType to done. or you could use onSubmitEditing={Keyboard.dismiss},It gets called whenever we press the return key. And if you want to dismiss the keyboard when losing focus, you can use onBlur prop, onBlur = {Keyboard.dismiss}"
    }
}