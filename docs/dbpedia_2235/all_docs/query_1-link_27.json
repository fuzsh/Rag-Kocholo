{
    "id": "dbpedia_2235_1",
    "rank": 27,
    "data": {
        "url": "https://www.degruyter.com/document/doi/10.1515/jib-2024-0002/html",
        "read_more_link": "",
        "language": "en",
        "title": "MakeSBML: a tool for converting between Antimony and SBML",
        "top_image": "https://www.degruyter.com/document/cover/journal_key/JIB/product",
        "meta_img": "https://www.degruyter.com/document/cover/journal_key/JIB/product",
        "images": [
            "https://www.degruyter.com/assets/images/84ad0073fb7b59ebc46b966dbf03a4bb-dg-logo-nav-search.svg",
            "https://www.degruyter.com/assets/images/b8fcea517b20e08ecf20a1c14e8b5dfb-dg-logo-nav-small.svg",
            "https://www.degruyter.com/assets/images/dg-logo-nav-small.svg",
            "https://www.degruyter.com/assets/images/966c7a7b7d8c37697e77128b235c1699-degruyter-print-media-logo.jpg",
            "https://www.degruyter.com/assets/images/cc-licenses/by.svg",
            "https://www.degruyter.com/assets/images/661a4eb80b7527d6467b6e5742778cc1-orcid.svg",
            "https://www.degruyter.com/assets/images/db2546a9d03b905bae083962a41791e1-mail.svg",
            "https://www.degruyter.com/assets/images/db2546a9d03b905bae083962a41791e1-mail.svg",
            "https://www.degruyter.com/document/doi/10.1515/jib-2024-0002/asset/graphic/j_jib-2024-0002_fig_001.jpg",
            "https://www.degruyter.com/document/cover/journal_key/JIB/thumbnail",
            "https://degruyter.met.vgwort.de/na/vgzm.139533-10.1515-jib-2024-0002",
            "https://www.degruyter.com/assets/images/0f0f306f30d5f2d2f68caab6976dc637-dg-logo-footer.svg",
            "https://www.degruyter.com/assets/images/80cca219a7e93410593d2bf03850db70-Open-Athens-Logo_Icon-White.svg",
            "https://www.degruyter.com/assets/images/80cca219a7e93410593d2bf03850db70-Open-Athens-Logo_Icon-White.svg",
            "https://www.degruyter.com/assets/images/dcb5aecb586bd5336d1428d326e8dccf-dg-logo-footer-mobile.svg",
            "https://www.degruyter.com/assets/images/2a1093d067525528af2f87c7296d39e1-scroll-arrow.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Bartholomew E. Jardine",
            "Lucian P. Smith",
            "Herbert M. Sauro"
        ],
        "publish_date": "2024-03-01T00:00:00",
        "summary": "",
        "meta_description": "We describe a web-based tool, MakeSBML (https://sys-bio.github.io/makesbml/), that provides an installation-free application for creating, editing, and searching the Biomodels repository for SBML-based models. MakeSBML is a client-based web application that translates models expressed in human-readable Antimony to the System Biology Markup Language (SBML) and vice-versa. Since MakeSBML is a web-based application it requires no installation on the user’s part. Currently, MakeSBML is hosted on a GitHub page where the client-based design makes it trivial to move to other hosts. This model for software deployment also reduces maintenance costs since an active server is not required. The SBML modeling language is often used in systems biology research to describe complex biochemical networks and makes reproducing models much easier. However, SBML is designed to be computer-readable, not human-readable. We therefore employ the human-readable Antimony language to make it easy to create and edit SBML models.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/ec7d7606b4e2f3f921b5e1700948efb6-favicon.ico",
        "meta_site_name": "De Gruyter",
        "canonical_link": "https://www.degruyter.com/document/doi/10.1515/jib-2024-0002/html",
        "text": "1 Introduction\n\nTo facilitate model sharing and reproducibility in the systems biology community the Systems Biology Markup Language (SBML) standard [1] is often used. However, this modeling standard can be difficult to read and edit without additional tools [2], [3], [4] and, in fact, was never designed for human consumption. Instead, various SBML editors have been developed [5, 6] to help users read and write SBML. In addition, at least two human-readable formats have been devised, SBML-shorthand (https://github.com/darrenjw/sbml-sh) and Antimony [7]. Antimony is a human-readable modeling language that greatly improves the ease of model creation and editing [7] of SBML-based models. A number of tools currently support Antimony, including Tellurium [2] and BioUML [6]. A software development kit, libAntimony (https://github.com/sys-bio/antimony), is provided in the form of a C/C++ library and associated optional Python bindings. The software kit provides a very simple API that allows the inter-conversion between Antimony and SBML.\n\nIn order to make the software development kit available to web browsers we have translated the C/C++ library into Web-assembly with associated JavaScript bindings. From this, we developed a client-side web application called MakeSBML (https://sys-bio.github.io/makesbml/) that allows a user to load, edit, and translate SBML and Antimony models from within the web browser. Because the application is a purely client-side application, MakeSBML is hosted by a GitHub page which makes the installation robust and relatively maintenance-free.\n\n2 Materials and methods\n\n2.1 Overview\n\nThe MakeSBML single-page web application uses a ported version of Antimony library [7] by translating the Antimony C++ library to JavaScript and WebAssembly https://webassembly.org/. This translation is done through Emscripten [8], a compiler toolchain used to compile existing C/C++ code and make it available for use through a web browser. The WebAssembly and JavaScript code (libantimonyjs) can be found at the GitHub site: https://github.com/sys-bio/libantimonyjs. This site includes detailed information on converting the Antimony library to JavaScript and WebAssembly. The MakeSBML website contains JavaScript calls to the Antimony library which passes back and forth, as a string, the Antimony or SBML model along with any error messages.\n\n2.2 Usage\n\nUsing the MakeSBML web application is straightforward. Go to https://sys-bio.github.io/makesbml/ and place either an Antimony or SBML model into the appropriate text box and press the arrow corresponding to the translation needed (Figure 1). A close inspection of a very simple, one reaction model in Figure 1 shows the verbosity needed in SBML (right panel), whereas Antimony (left panel) describes the reaction in simple text. When translating from Antimony to SBML, the Antimony library adds default values for any missing values required by the SBML specification (https://sbml.org/documents/specifications/). For instance note that a default compartment is added to the SBML model which was not explicitly declared in the Antimony model. Please see https://tellurium.readthedocs.io/en/latest/antimony.html for more information about using Antimony. Models can be loaded from the user’s computer, downloaded from the BioModels model database (https://www.ebi.ac.uk/biomodels/), pasted or typed directly into the appropriate text box. Model editing with MakeSBML makes it much simpler to create and edit SBML models. If your modeling software supports SBML but editing the model is difficult, editing with MakeSBML is often easier and quicker. Just load the SBML XML text in MakeSBML, edit the Antimony version, and save the translated SBML version for use in your simulation software of choice.\n\nFigure 1:\n\n2.3 Implementation\n\nThe critical part of the MakeSBML implementation is the loading of the libAntimony JavaScript module as it calls a port of an existing library [7] to handle the Antimony – SBML translation. The use of an existing code library simplifies the MakeSBML implementation as the new code deals mainly with user interaction and not model translation. The loading of libAntimony is done through a call to the JavaScript wrapper libantimony.js which has mappings to the WebAssembly file libantimony.wasm. For MakeSBML, loading the libAntimony module in the browser looks like this:\n\nlibantimony().then((libantimony) => {\n\n// Format: libantimony.cwrap(function name, return type, input param array of types).\n\nloadString = libantimony.cwrap(“loadString”, “number”, [“number”]);\n\ngetSBMLString = libantimony.cwrap(“getSBMLString”, “string”, [“null”]);\n\ngetAntimonyString = libantimony.cwrap(“getAntimonyString”, “string”, [“null”]);\n\ngetLastError = libantimony.cwrap(“getLastError”, “string”, [“null”]);\n\njsAllocateUTF8 = (newStr) => libantimony.allocateUTF8(newStr);\n\n});\n\nlibantimony is the name of the Antimony library and is accessed through the loading of the JavaScript wrapper contained in the file libantimony.js. The code then assigns a JavaScript variable, or alias, loadString to the Emscripten ’wrapped’ Antimony C function call, returns an integer and takes one number (pointer to a memory address containing the model string) as input. The other JavaScript aliases are getSBMLString, which returns the SBML version of the model, getAntimonyString, which returns the Antimony version, and getLastError, which returns any error found in the model. The final JavaScript alias jsAllocateUTF8 is an Emscripten helper function allocateUTF8() that allocates memory for the string and creates a pointer to it. This function was added to the Antimony JavaScript wrapper when Empscripten compiled the original Antimony code.\n\nBelow is a JavaScript excerpt using the above JavaScript aliases for passing in an Antimony model and returning the translated model in SBML:\n\nvar ptrAntCode = jsAllocateUTF8(antCode);\n\nvar sbmlResult = “None”;\n\nvar load_int = loadString(ptrAntCode);\n\nif (load_int > 0) {\n\nsbmlResult = getSBMLString();\n\n} else {\n\nvar errStr = getLastError();\n\n}\n\nTo pass a JavaScript string into the Antimony function loadString() one must first call jsAllocateUTF8() to create a pointer to the Antimony model string. loadString() returns 0 if no errors are detected. After successfully loading the model the SBML can be retrieved by simply calling getSBMLString(). If an SBML model is loaded Antimony translation can be obtained with the getAntimonyString() function. See the GitHub repository https://github.com/sys-bio/makesbml for further details of MakeSBML implementation.\n\n3 Discussion and conclusion\n\nAs modeling in systems biology becomes more complex, it is critical that researchers build upon existing work, as much time and money is invested in creating these mathematical models. The SBML standard for describing these models allows simple reproducibity of models between researchers since many simulation environments support SBML (https://en.wikipedia.org/wiki/List_of_systems_biology_modeling_software). To encourage reuse, the Antimony language provides clear text statements to describe these models allowing researchers an easier way to understand, edit, and update them for use in their own research, saving time and expense.\n\nIn this article, we describe MakeSBML, a client-side web tool for translating between SBML and Antimony. Because it uses only client-side technology (HTML, CSS, JavaScript, WebAssembly), MakeSBML can be hosted by servers that do not support server side processing that require languages such as Php, Python or Ruby. MakeSBML is currently on GitHub pages, which only supports static files. This makes it easy to port to other sites such as free resources like Google sites. Moreover, it reduces maintenance costs since an active server is not required and web technology tends to be more stable and backward compatible than equivalent desktop software. This allows tooling to continue to run long after the funding mechanism has ceased.\n\nThe use of Emscripten to generate WebAssemblies from existing C/C++ libraries and applications makes it easier for researchers to build, modify and simulate Systems Biology models from within their computer’s web browser. For educators, embedding interactive SBML models in their online learning materials will be invaluable, allowing the students to explore the behavior of chemical networks such as metabolic and signaling networks. Besides the Antimony library discussed here, the SBML library (libSBML) [10] has been converted to a JavaScript/WebAssembly version for use in a web browser (https://github.com/sys-bio/libsbmljs) [11]. This work includes a proof of concept simulator for existing SBML models (https://libsbmljs.github.io/).\n\nMakeSBML provides a quick, and simple way to edit SBML models using the Antimony modeling language. By lowering the use barrier for researchers, MakeSBML takes the process a step further by encouraging model reuse and accelerates a user’s own model development and research as a whole."
    }
}