{
    "id": "dbpedia_2235_1",
    "rank": 18,
    "data": {
        "url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/",
        "read_more_link": "",
        "language": "en",
        "title": "SBML Level 3: an extensible format for the exchange and reuse of biological models",
        "top_image": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "meta_img": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "images": [
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/favicons/favicon-57.png",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-dot-gov.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-https.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/logos/AgencyLogo.svg",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/logo-molsystbiol.png",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/corrauth.gif",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/corrauth.gif",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/bin/MSB-16-e9110-g004.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/bin/MSB-16-e9110-g002.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/bin/MSB-16-e9110-g001.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/bin/MSB-16-e9110-g003.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/bin/MSB-16-e9110-g005.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Nicolas Rodriguez",
            "Clifford A Shaffer",
            "Bruce E Shapiro",
            "Joerg Stelling",
            "Neil Swainston",
            "Naoki Tanimura",
            "John Wagner",
            "Martin Meier‐Schellersheim",
            "Herbert M Sauro",
            "Bernhard Palsson"
        ],
        "publish_date": "2020-08-27T00:00:00",
        "summary": "",
        "meta_description": "Systems biology has experienced dramatic growth in the number, size, and complexity of computational models. To reproduce simulation results and reuse models, researchers must exchange unambiguous model descriptions. We review the latest edition of the ...",
        "meta_lang": "en",
        "meta_favicon": "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/favicons/favicon.ico",
        "meta_site_name": "PubMed Central (PMC)",
        "canonical_link": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8411907/",
        "text": "Introduction\n\nSystems modeling and numerical simulations in biology can be traced to the mid‐20th century. Though general theorizing about systems began earlier, the application of systems analysis to biology gained attention in the 1950s thanks to the work of biologists such as von Bertalanffy and Kacser (Von Bertalanffy, 1950; Kacser, 1957). The era of numerical simulation in biology truly began with the landmark works of Chance on enzyme kinetics (Chance et al, 1940), Hodgkin and Huxley on the molecular basis of neuronal transmission (Hodgkin & Huxley, 1952), and Turing on the chemical basis of morphogenesis (Turing, 1952). Since then, the number and variety of models have grown in all of the life sciences. As precise descriptions of phenomena that can be simulated, analyzed, and compared with experimental data, models provide unique insights that can confirm or refute hypotheses, suggest new experiments, and identify refinements to the models.\n\nThe availability of more data, more powerful modeling methods, and dramatically increased computing power led to the rise of systems biology as a compelling research theme around the turn of the millennium (Kitano, 2000; Ideker et al, 2001). Though computational models were at first published as printed equations in journal articles, the desire to reuse an ever‐increasing number of models called for digital formats that were interoperable between software systems and could be easily exchanged between scientists (topics of interest as early as the 1960s; c.f. Garfinkel, 1969). This drove efforts to create tool‐independent ways of representing models that could avoid the potential for human translation errors, be stored in databases, and provide a common starting point for simulations and analyses regardless of the software used (Goddard et al, 2001; Hucka et al, 2001; Lloyd et al, 2004). One such effort was SBML, the Systems Biology Markup Language. Its initial design was motivated by discussions to create a “metabolic model file format” following a 1999 workshop (recounted by Kell & Mendes, 2008). A distributed community thereafter discussed ideas that informed work at Caltech in late 1999/early 2000 and led (after a series of public drafts) to the specification of the official version of SBML Level 1 version 1 being released in March 2001 (Hucka et al, 2003).\n\nWhile SBML was initially developed to exchange compartmental models of biochemical reaction networks primarily formulated in terms of chemical kinetics (Hucka et al, 2001), it was always understood that there existed more types of models than the initial version of SBML could represent explicitly. However, seeking community consensus on a limited set of simpler features, which could be readily implemented in software at the time, was deemed a more pragmatic strategy. A deliberate decision was taken to delay the addition of more advanced capabilities to a later time. As a result, SBML has evolved in stages in a community‐driven fashion that has benefited from the efforts of many researchers worldwide over two decades. As time passed, the need to support a broader range of model types, modeling frameworks, and research areas became apparent. SBML's success in serving as an interchange format for basic types of models led communities of modelers to ask whether it could be adapted or expanded to support more types. In addition to reaction‐diffusion models, alternative modeling frameworks have risen in popularity in the past decade (Machado et al, 2011), and researchers have faced interoperability problems between software tools developed for their use. These needs drove a profound change in SBML's structure: A facility to permit layering the core of SBML with new features suited to more types of models, together with a way for individual models to identify which sets of extensions they need for proper interpretation. The release of SBML Level 3 (Hucka et al, 2010) has provided a new foundation to enable the exchange of a greater variety of models in various domains of biology (Fig ).\n\nIn the rest of this article, we begin by summarizing SBML's general structure and then describe the modularity introduced in Level 3 and the wide range of modeling formalisms supported by Level 3 packages. We follow that by describing the community aspects of SBML development. We continue with a discussion of SBML's impact on both computational modeling and the modeling community, and finally, we close with a discussion of forthcoming challenges.\n\nSBML Level 3's modularity and breadth\n\nConstant evolution in scientific methods presents challenges for the creation of software tools and standards. One challenge arises because the creation of new standards requires labor, testing, and time. This often causes standardization efforts to lag behind the latest technical developments in a constantly moving field. A second challenge is that users want support for new methods and standards in software tools, which pressures developers to implement support quickly. Combined with the first challenge, it means that sometimes problems with a standard's definition are not discovered until more developers attempt to use it in different situations, which in turn often means that revisions to a standard are needed after it is published. Finally, another challenge is that software development often takes place under resource constraints (funding and time), limiting the scope of work that software developers can undertake—including, sometimes, limiting how many features of a standard they can support in their software.\n\nThe SBML community sought to address these challenges by putting in place certain structural features in SBML's development process. The first is the notion of Levels. A Level in SBML is an attempt to provide a given set of features for describing models, with higher Levels providing more powerful features. For example, the ability to express discrete events was added to SBML Level 2 but does not exist in Level 1. SBML Levels are mostly upwardly compatible, in the sense that the vast majority of models encoded in Level n can be translated to Level n + 1. Versions are used to introduce refinements to a given Level to account for realizations that come from real‐life use of SBML. Finally, SBML Level 3 introduced an extensible modular architecture consisting of a central set of fixed features (named SBML Level 3 Core), and a scheme for adding packages that can augment the Core by extending existing elements, adding new elements, and adjusting the meaning or scope of elements. A model declares which packages it uses in order to guide its interpretation by software applications. If a software tool detects the presence of packages that it does not support, it may inform users if it cannot work with the model. Together, these three features (Levels, Versions, packages) help address the challenges discussed above: they ease coping with evolution in methods by collecting significant changes into discrete stages (SBML Levels), they help deal with the inevitable need for revisions (Versions within Levels), and they allow developers to limit the feature set they implement (SBML Levels on the one hand, and SBML Level 3 packages on the other).\n\nPackages allow SBML Level 3 (Hucka et al, 2019) to represent many model types and characteristics in a more natural way than if they had to be shoehorned into SBML Core constructs exclusively. Twelve packages have been proposed to date (Table ); eight have been fully developed into consensus specifications and are each used by at least two software implementations (Box 1), and another two have draft specifications in use by software tools. New packages can be developed independently, within dedicated communities, at a pace that suits them. This was the case for logical modeling with the CoLoMoTo community (Naldi et al, 2015), constraint‐based modeling within the COBRA community (Heirendt et al, 2019), and rule‐based modeling with a community of like‐minded software creators (Faeder et al, 2009; Zhang et al, 2013; Palmisano et al, 2014; Boutillier et al, 2018).\n\nSeveral benefits accrue from leveraging SBML as a starting point rather than creating a new, independent format. One is it makes clear where common features overlap. Most computational modeling frameworks in the domain of biology share some common concepts—variables that represent characteristics of different kinds of entities and processes that represent interactions between entities, containers/locations, etc.—and reusing SBML Level 3 Core constructs makes the conceptual similarities explicit. This in turn makes interpretation of models easier (no need to learn new terminology) and reuse simpler (no need to translate between independent formats). Another benefit is that the creators of the format can leverage existing features developed for SBML, such as mechanisms for annotations, rather than spend time developing new approaches to achieving the same goals in a new format. This in turn leads to another benefit: the ability to reuse at least some parts of existing software libraries developed for SBML. It also means that a software application may be able to interpret at least some fundamental aspects of a model even if the application is not designed to work with a particular SBML Level 3 package, by virtue of understanding SBML Core (and perhaps other packages used by the model). This improves the potential for model reuse, and benefits model creators and software developers alike. Finally, a common foundation simplifies the creation of multiframework models in which some parts of the model use one formalism and other parts use others [e.g., coupling kinetic models with flux balance analysis; Watanabe et al, 2018).\n\nThough this modular approach has benefits, it is not without potential pitfalls. The main risks are fragmentation of the community, and incompatibility of packages due to complex feature dependencies. The SBML community has addressed the former by maintaining communications between package developers; the community processes have such interactions built in. As for the latter, API libraries (see Box 2) can handle some combinations of packages and hide some of the complexity. Still, there remain some combinations of packages that are not fully understood, and it remains for future work to define how (if ever) they can be combined for use in a single model.\n\nSBML as a community standard\n\nSBML's success can be attributed largely to its community‐based development and its consensus‐oriented approach. SBML has always been developed through engagement with its user community to achieve goals expressed by that same community. To resolve occasionally conflicting technical demands, a guiding principle has been to seek consensus between different viewpoints and the needs of different groups, to find a middle ground that would be—while perhaps not a perfect solution—an acceptable and usable solution. This attracted the researchers and software developers who constitute SBML's foremost stakeholders. By using SBML in everything from software to textbooks, they helped drive further development to face the real needs expressed by the people who have those needs. This engagement allowed faster feedback from users to developers and has helped produce a rich toolkit of software and other resources that facilitate SBML's incorporation into software (Box 2).\n\nOver the years, the community has designed rules to organize its governance, develop and maintain the specifications, and facilitate collaboration among users. The development of SBML and its Level 3 packages is shepherded by the SBML Editors, a group of community‐elected volunteers serving terms of 3 years who follow a written and public process detailed on the web portal SBML.org.1 SBML Editors write or review SBML specification documents, organize discussions and vote on specific technical issues, and enact the decisions of the community. Major proposed changes to the specifications and packages are discussed by the community via the SBML mailing lists2 as well as during annual face‐to‐face meetings.\n\nThe community currently comes together twice a year within the context of meetings organized by COMBINE the Computational Modeling in Biology Network; Hucka et al, 2015). HARMONY (the Hackathon on Resources for Modeling in Biology) is a codefest that focuses on the development of software, in particular via the development of libraries, tools, and specifications; by contrast, the COMBINE Forum meetings focus on the presentation of novel tools and the discussion of proposed features. In addition to these general meetings, special SBML working groups are organized as needed to drive SBML package development. COMBINE's central activity is coordinating and harmonizing standardization in computational biology, and SBML is one of its core standards. FAIRsharing, a broader community network that covers life sciences more comprehensively (Sansone et al, 2019), maintains interconnected and organized collections of resources in many areas, including curated links between SBML and many associated funders, databases, and standards.3\n\nImpact of SBML\n\nAs contributors to developments in methods, software, and standards over the past two decades (Hucka et al, 2015), we can attest to SBML's profound impact on the field, both from our own first‐hand experiences and from surveys (Klipp et al, 2007) that indicate SBML has become a de facto standard. The impact is a result of SBML's community‐oriented development approach and its design.\n\nThe SBML development process has helped shape the field partly by directly involving software developers and modelers. Frequent workshops have provided essential feedback for developers to help them better serve modelers’ needs (e.g., Waltemath et al, 2014). Workshops as well as resources such as the SBML Software Guide (see Box 2) helped raise awareness of existing tools, which in turn increased their use and the use of SBML. This helped create a culture of sharing models and building on existing work in systems biology (Stanford et al, 2015). It also led to new activities centered on the models themselves, including automatic model generation, analysis of model structures, model retrieval, and integration of models with experimental data (Dräger & Palsson, 2014). SBML's successful approach to community organization has led other standardization efforts (BioPAX, NeuroML, SBGN, SED‐ML) to adopt some of the same approaches; SBML was also a founding member of COMBINE (Hucka et al, 2015), discussed above. Some of the primary standardization efforts in COMBINE, such as BioPAX (Demir et al, 2010) and NeuroML (Gleeson et al, 2010), are more domain‐specific than SBML; others, such as CellML (Lloyd et al, 2004), overlap SBML's primary domains but offer alternative abstractions; and finally, still others, such as SBGN (van Iersel et al, 2012), SBOL (Roehner et al, 2016), and SED‐ML (Waltemath et al, 2011), are complementary formats.\n\nBefore the advent of SBML, it was challenging to exchange models because software tools used incompatible definition schemes. As models increased in size and complexity, manually rewriting them became more difficult, error‐prone, and eventually untenable. The development of SBML has enabled the use of a single model description throughout a project's life cycle even when projects involve heterogeneous software tools (Box 3). SBML‐compatible software tools today allow researchers to use SBML in all aspects of a modeling project, including creation (manual or automated), annotation, comparison, merging, parametrization, simulation/analysis, results comparison, network motif discovery, system identification, omics data integration, visualization, and more. Such use of a standardized format, along with standard annotation schemes (Neal et al, 2019) and training in reproducible methods, improves research workflows and is generally recognized as promoting research reproducibility (Waltemath & Wolkenhauer, 2016).\n\nThe availability of a well‐defined format has also facilitated the comparison of software tools to each other. Using SBML‐encoded models has become the norm to assess the accuracy of modeling software: initially it is done manually using models from BioModels Database (Bergmann & Sauro, 2008), and now, it is more commonly done using the SBML Test Suite (Box 2). SBML's semantics are defined precisely enough that many simulation systems can produce equivalent results for over 1200 test cases, lending confidence that SBML‐based simulations can be reproducible in different software environments.\n\nWhile chemical kinetics models have been a staple of systems biology, other modeling frameworks exist. These have benefited from efforts to extend Level 3 to better suit their specific characteristics. Even when models could in principle be encoded using core SBML constructs, the use of features explicitly adapted to the needs of a domain can make model interpretation less error‐prone and more natural. The former issue was demonstrated vividly when ad hoc methods of encoding genome‐scale models led to incorrect interpretations, and a subsequent proposal to use SBML Level 3 “fbc” addressed representational inconsistencies that had hindered reproducibility (Ebrahim et al, 2015). The use of more domain‐specific forms of encoding has been preferred by several communities, such as the qualitative and rule‐based modeling communities. For example, the quickly adopted package SBML Level 3 “qual” (Chaouiya et al, 2015) supports software interoperability for qualitative modeling, illustrated by the use of CellNOpt (Terfve et al, 2012), which provides a set of optimal Boolean models that best explains the causal relationships between elements of a signal transduction network and associated data, and the subsequent use of GINsim (Chaouiya et al, 2012) or Cell Collective (Helikar et al, 2012) to assess the dynamical properties of these models. Rule‐based modeling can represent models that are impossible to express as reaction networks, such as polymerization (Faeder et al, 2009), or simply impractical to represent due to the combinatorial number of reactions implied by the rules (Hlavacek et al, 2003). Storing rule definitions in SBML is now feasible with the “multi” package, allowing rule‐based modeling tools such as Simmune (Zhang et al, 2013) and BioNetGen (Faeder et al, 2009) to read and write the same model definitions.\n\nSBML has also eased the automated processing of models to the point where they have become just another type of data in the life sciences. SBML is used today as an import/export format by many databases of mathematical models (Misirli et al, 2014; Norsigian et al, 2019; Malik‐Sheriff et al, 2020), as well as by pathway databases (Caspi et al, 2015; Mi et al, 2016; Fabregat et al, 2017) and reaction databases (Ganter et al, 2013; Wittig et al, 2017). SBML is the preferred format for model curation in BioModels Database (Malik‐Sheriff et al, 2020), not only because of its popularity but also because of its provisions to precisely encode and annotate models to support reproducible modeling. SBML is also used to share models by more generic data management platforms such as SEEK (Wolstencroft et al, 2016) and comprehensive online simulation environments (e.g., Moraru et al, 2008; Weidemann et al, 2008; Lee et al, 2009; Peters et al, 2017). Moreover, having an agreed‐upon format has facilitated the introduction of better model management strategies. This includes support for tasks such as model storage and retrieval (Henkel et al, 2015), version control (Scharm et al, 2016b), and checking quality and validity (Liebermeister, 2008; Lieven et al, 2020). The proliferation of derived models has led to the development of methods to compare model structure and semantic annotations (Lambusch et al, 2018), culminating in the development of several methods to quantify model similarities (Henkel et al, 2016), that can then be used to improve the relevance of model searches. Once model elements can be compared, one can align, combine, and merge different models (Krause et al, 2010).\n\nA broader impact of SBML as a de facto standard has been the support of publishers and funding agencies. Many journals, aware of the challenges surrounding the reproducibility of scientific results, encourage authors not only to describe their models but also to make their models available in electronic form. Molecular Systems Biology was the first supporter of submissions in SBML format (beginning in 20054 , 5). Today, most journals still avoid requiring a specific format, though some such as the BMC6 and FEBS7 journals do explicitly encourage authors to submit SBML files as supporting material for research where it is relevant. Others, such as Biophysical Journal (Nickerson & Hunter, 2017), recommend authors deposit models in repositories such as BioModels Database, which encourages the use of common standard formats such as SBML. Many funding agencies also now have policies related to data sharing, and some program announcements suggested the use of SBML where appropriate.8\n\nFinally, the continued development of SBML has stimulated collaborative work and the creation of consortia. This has led to better awareness and communication within groups interested in specific modeling frameworks. A good example is the CoLoMoTo effort mentioned above; it was launched by researchers who needed a format to exchange qualitative models between their software tools and developed the Qualitative Modeling package for SBML (Naldi et al, 2015) as the solution. Nevertheless, challenges remain, as discussed in the next section. These will need to be confronted to ensure the longevity of SBML as well as continued developments.\n\nForthcoming challenges\n\nFor nearly two decades, SBML has supported mathematical modeling in systems biology by helping to focus the efforts of the community and foster a culture of openness and sharing. The field is evolving rapidly, which presents challenges that the community and SBML must face.\n\nThe first challenge is to remain usable in the face of relentless growth in model sizes. One of the drivers of larger size is the rising popularity of genome‐scale metabolic models (Bordbar et al, 2014), which can be produced semi‐automatically (Henry et al, 2010). Modeling approaches have also been developed to combine the use of several such models (e.g., Bordbar et al, 2011). It is reasonable to expect models of ecosystems to be produced soon (microbiomes and their host). Model sizes will also increase as more models of tissues and organs are exchanged and reused, encouraged by the use of software packages that facilitate this approach, such as the open‐source tools CHASTE (Mirams et al, 2013) and CompuCell3D (Swat et al, 2012). The challenge this presents is how to define, organize, and manage large models. Meeting the challenge will require a combination of novel approaches to model storage (e.g., Henkel et al, 2015) and comparison (e.g., Scharm et al, 2016a,b), as well as more effective use of SBML Level 3 features. For example, the SBML Hierarchical Model Composition (“comp”) package (Smith et al, 2015) provides a way to encode models in SBML out of separate building blocks or from preexisting models; this can make larger models easier to structure and maintain, and it is a natural way to construct multiscale models. Similarly, the Arrays package may help to define and structure larger models by allowing models to be defined in a more compact form.\n\nA related challenge concerns human usability of SBML and similar XML‐based formats. Though SBML is intended for software, not humans, to use directly, desire for a text‐based or spreadsheet‐based equivalent is often voiced (e.g., Kirouac et al, 2019). Various answers have been developed in the form of text‐based notations (e.g., Gillespie et al, 2006; Smith et al, 2009) and spreadsheet conventions (e.g., Lubitz et al, 2016), with bidirectional translators for SBML. These formats have undeniable appeal for many users and use cases, despite that they do not capture the entirety of SBML (often having limited or missing facilities to express units, annotations, or SBML packages). Their chief drawback is that they become error‐prone to use as model size increases. Graphical user interfaces (GUIs; e.g., Funahashi et al, 2003; Hoops et al, 2006; Moraru et al, 2008) can overcome this; software with GUIs can help with the cognitive burden of tracking large numbers of model elements. On the other hand, GUIs can be tedious to use when entering large models, performance of some software does not scale well with increasing model sizes, and some cannot be controlled programmatically for automation purposes. A middle ground may be domain‐specific modeling languages layered on top of programming languages such as Python (e.g., Lopez et al, 2013; Olivier et al, 2005. However, these tend to appeal only to users who are comfortable with (or willing to take time to learn) the programming language used as a substrate. Overall, further innovation in this area would be welcome, both to help support SBML Level 3 packages and to help users cope with ever‐increasing model sizes.\n\nBecause of the diversity of biological phenomena amenable to mathematical modeling, as well as their scales and properties, it is likely that a broad variety of modeling approaches will be added to every researcher's essential toolbox (Cvijovic et al, 2014). Methods such as multiagent and lattice approaches are coming into wider use to represent evolving cell populations, cell migration, and deformation. Some researchers are experimenting with solutions using existing SBML packages (Watanabe & Myers, 2016; Varela et al, 2019). Modeling the development of tissues and organ function may also require combining these approaches with reaction‐diffusion models, or multiphysics approaches (Nickerson et al, 2016). Population modeling will need to complement traditional instance‐based systems if we want to take into account patient variability or information coming from single‐cell measurements (Levin et al, 1997). The coupling of different approaches within the same simulation experiment is also becoming more frequent. Biomolecular reactions modeled using ODEs, Poisson processes, and Flux Balance Analyses have been coupled in the first whole‐cell model (Karr et al, 2015). At the organ level, liver lobules have been modeled using a combination of metabolism and multiagent models (Schliess et al, 2014). Several approaches mixing modeling of cell mechanical properties and gene regulatory networks or signaling networks have been used to study morphogenesis (e.g., Tanaka et al, 2015). The coupling of different approaches can be done within a single hybrid model, or each model can be simulated using different software and with dynamic synchronization at run time (Mattioni & Le Novère, 2013). Once again, the SBML “comp” package can play a role in supporting these approaches, but other methods and software will be needed in the future, as well as better support for coupling models at run time using, for example, SED‐ML (Waltemath et al, 2011).\n\nThese developments are arising in a landscape where structural models are sometimes not the central object of study, and instead function as collection of integrated information. An example of this is RECON3D, a comprehensive human metabolic network with metabolite and protein structure information (Brunk et al, 2018). SBML will continue to have a pivotal role here too. When SBML was introduced, the state of modeling workflows and software tools was more primitive and it was natural that a model was self‐contained. SBML‐encoded models often had predefined parameter values (as initial values for state variables or parameters for mathematical expressions), but today, modelers increasingly want to use the same model with different parameterizations, sometimes with parameter values expressed as distributions, lists, or ranges rather than unique values. A project may also use an ensemble of related models that differ in parameters or in turning some model elements on or off (Kuepfer et al, 2007). The semantic annotation of SBML elements also has become increasingly important, forming a bedrock for many of the analyses using SBML‐encoded models. The growth in size and scope of annotations has recently led the modeling community to propose a standard way of storing annotations in separate linked files (Neal et al, 2019), relying on the COMBINE Archive format (Bergmann et al, 2014) to bundle everything together. Other formats that can complement SBML have been developed, and further coordination and evolution will undoubtedly happen in the future. As mentioned above, SED‐ML is a format that provides a way to encode what to do with a model, which complements SBML and compensates for its lack of features to define procedures. Finally, experimentation in integrating SBML more directly with other formats and data also continues. For instance, preliminary work has shown that SBML can be enriched with SBOL (Voigt et al, 2018) to provide models of DNA components’ behavior (Roehner & Myers, 2014), and conversely, ongoing work in supporting genome‐scale models of metabolism and gene expression (known as ME‐models, Thiele et al, 2012) augments SBML with SBOL to more fully capture models for use with ME‐modeling software. Future developments in modeling paradigms may require similar flexibility in how models are represented: some may be best served by implementing new SBML packages, others by extending existing packages, still others by combining SBML with other formats.\n\nBesides the technical challenges, social and cultural challenges also exist for formats such as SBML. One is to continue raising awareness among researchers, software developers, and funders of the existence of SBML and related COMBINE standards. Some may not yet be using SBML simply because they are not aware of it, or its recent addition of support for many modeling formalisms (Fig ). Raising awareness will require continual education and outreach, especially to students and early‐career scientists. Awareness would be aided by greater promotion on the part of journals and reviewers of the use of SBML and related formats in paper submission guidelines. Despite some progress in this area (discussed in the previous section), the lack of stronger demands by journals and reviewers is surely one reason authors are either not aware or not motivated to publish their models in software‐independent formats.\n\nIn addition, usability of standard formats depends crucially on their implementation in software tools, and motivating this work is another challenge for SBML. A pivotal factor for the success of SBML has been the extensive software ecosystem, which provides relatively easy import and export of SBML from popular software systems. However, implementing full SBML compatibility in software is not a simple matter, and problems with compatibility in the software ecosystem can be a significant source of frustration. Improving the software requires continuous investment in tool development.\n\nThat, in turn, is related to a final challenge: obtaining and maintaining funding. By virtue of not being a native format of any particular software tool, a format such as SBML may require extra work to define by consensus, and then again for developers to implement in software—and still, it will lag behind the leading edge of research because exchange formats only become important after more than one software system has something to exchange. Funders may wonder whether the resources, time and effort spent on standards development would not be better applied to other goals. However, these costs must be weighed against the costs to a whole research field of not having standards—and there are many such costs. To take one example, models in nonstandard formats are more difficult to review, verify, and reuse. Journal reviewers may not have access to the necessary software, or the software may not be well tested, all of which increase the chances that the published model contains errors. Researchers can spend substantial time attempting to reproduce the results, only to fail. Worse, this is a repeating cost: failures to reproduce models are rarely published or publicized, which means an untold number of researchers may spend time (and research funding) on a futile effort. Funders recognize that too many research results are irreproducible, and have urged community action (e.g., Collins & Tabak, 2014). The continued development of exchange formats, such as SBML, is a crucial and cost‐effective means to enable reproducible research.\n\nConclusion\n\nSBML and associated software libraries and tools have been instrumental in the growth of systems biology. As modeling and simulation grew in popularity, SBML allowed researchers to exchange and (re)use new models in an open, well‐supported, interoperable format. SBML has made possible much of the research pursued by the authors of this article and also helped us to structure our thoughts about our models and the biology they represent. Today, scientists can build, manipulate, annotate, store, reuse, publish, and connect models to each other and to basic data sources. In effect, SBML has turned models into a kind of data and transformed modeling in biology from an art to an exercise in engineering.\n\nAs the field of systems biology continues to grow and address emerging challenges, SBML will grow along with it. This evolution will (as it always has) depend on close cooperation between biologists and software developers. We hope that SBML will continue to be a source of inspiration for many researchers, especially those new to the field. In return, may they help develop the next generation of SBML to support more comprehensive, richer, and more diverse models, and expand the reach of systems modeling toward entire cells, organs, and organisms."
    }
}