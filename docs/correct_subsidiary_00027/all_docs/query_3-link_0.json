{
    "id": "correct_subsidiary_00027_3",
    "rank": 0,
    "data": {
        "url": "https://community.cadence.com/cadence_technology_forums/f/functional-verification/10231/directed-vs-random-testing",
        "read_more_link": "",
        "language": "en",
        "title": "Directed vs Random Testing",
        "top_image": "https://community.cadence.com/cfs-filesystemfile/__key/themefiles/f-s-3fc3f82483d14ec485ef92e206116d49-files/favicon.png?_=638564397481093403",
        "meta_img": "https://community.cadence.com/cfs-filesystemfile/__key/themefiles/f-s-3fc3f82483d14ec485ef92e206116d49-files/favicon.png?_=638564397481093403",
        "images": [
            "https://community.cadence.com/cfs-filesystemfile/__key/widgetfiles/5a76085a0add480cbbcc9ef8568e2de4-d/cadence_2D00_logo_2D00_black.png?_=638072669021690804",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/system-images/anonymous.gif_2D00_32x32x2.png?_=637590656695278526",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/system-images/anonymous.gif_2D00_44x44x2.png?_=637590656739458076",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/system-images/anonymous.gif_2D00_44x44x2.png?_=637590656739458076",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/communityserver-components-avatars-00-00-00-27-68/4TT6Q9X0KX5I.jpg_2D00_44x44x2.jpg?_=635480548020000000",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/communityserver-components-avatars-00-00-01-46-72/4TT6Q9ZRZVBO.jpg_2D00_44x44x2.jpg?_=635483568550000000",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/communityserver-components-avatars-00-00-00-29-99/4TT6Q9Y07KNT.jpg_2D00_44x44x2.jpg?_=635481745700000000",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/system-images/anonymous.gif_2D00_44x44x2.png?_=637590656739458076",
            "https://community.cadence.com/cfs-filesystemfile/__key/communityserver-components-imagefileviewer/communityserver-components-avatars-00-00-01-46-72/4TT6Q9ZRZVBO.jpg_2D00_44x44x2.jpg?_=635483568550000000"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2008-07-25T08:50:38.837000+00:00",
        "summary": "",
        "meta_description": "Hi I am writing a paper looking at \"myths\" in functional verification. By \"myth\" I mean the types of things which people take as accepted truth even though there",
        "meta_lang": "en",
        "meta_favicon": "https://community.cadence.com/cfs-filesystemfile/__key/themefiles/f-s-3fc3f82483d14ec485ef92e206116d49-files/favicon.png?_=638564397481093403",
        "meta_site_name": "",
        "canonical_link": "https://community.cadence.com/cadence_technology_forums/f/functional-verification/10231/directed-vs-random-testing",
        "text": "Mike,\n\nGreat topic. Here are a couple of comments:\n\n1) Has random replaced directed?\n\n\"All test-cases are born equal, as long as they find bugs\" :-)\n\nFinding bugs is decoupled from the way test-cases are born. The problem with directed testing is that it forces the verifier into a cause-and-effect type of thinking. In other words, the problem is not as much that the user provides inadequate stimulus to the design; it is rather that they are looking for only certain types of errors per test-case.\n\nSo I think it is a relative myth that random \"is better\" than directed. What really makes the difference is taking the time to write independent monitors, checkers and coverage collectors to be able to detect bugs and extract useful metrics. Once this milestone is reached, randomization can improve productivity but also burn a lot of simulation time.\n\n2) Chip level vs. block level\n\nWhen it comes to chip-level functionality, you offer 3 reasons why directed test is preferred:\n\na) Legacy environments and thought\n\nb) Specific integration scenarios\n\nc) HW/SW co-verification\n\nThese are all very true. I would also add:\n\nd) Organizational issues: Folks doing chip-level verification are usually different from the folks doing block-level verification. A lot of times they are software engineers or the bring-up team. They are used to their own tools and methodologies.\n\ne) \"Bang for the buck\": A GPU validation team will want to run the complete OpenGL or DirectX compliance suite before signing-off. Do they need more random testing on top? Maybe. Unless a chip-level coverage database has been implemented we simply don't know! So it is important to first invest in chip-level coverage metrics. In many cases, existing directed environments may be \"good enough\" if we can measure their impact.\n\ne) Scope: Block-level verification is almost entirely about functionality.Chip level verification can include other components like, say, performance. Performance metrics may be very well defined as stimuli (e.g. specINT performance).\n\nI am more inclined to adopt constrained-random as a \"top-off\" type of technique for chip-level verification. However, both random and directed approaches can benefit from expanded use of coverage metrics and associated planning.\n\nCheers,\n\n-Stelix.\n\nHi Mike,\n\nInteresting topic. I agree with your thought that random & contraint random is an advanced & better way to do verification closure specially with metric driven verification based on coverage, but directed is not dead.\n\nHowever, I would like to add another aspect here. Verification is mostly done with both random and directed, and what is more common depends on the 'stage' of verification i.e. how stable is your DUV is expected to be. Typically verification is mostly started with directed testing (specific basic flow is working like device boot or reaching the initialization stage). So all the basic functions are verified using manual directed testing. Then in the middle stage of verification, it is mostly random testing where you use generate random or interesting scenarios using constraint randomization. Finally in the end the users again do directed testing to test 'corner case' situations that are specific to the device.\n\nOverall, I would roughly put directed-random-directed as the order of sequence of predominate way of verification.\n\n-Amit."
    }
}