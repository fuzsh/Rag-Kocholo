{
    "id": "dbpedia_3610_3",
    "rank": 88,
    "data": {
        "url": "https://aws.amazon.com/what-is/api/",
        "read_more_link": "",
        "language": "en",
        "title": "Application Programming Interface Explained",
        "top_image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "meta_img": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "images": [
            "https://d1.awsstatic.com/Free-Tier_64.f14d1a130811a363bbea22de4bb589f9ab801dfb.png",
            "https://d1.awsstatic.com/Application-Integration_64.cb724df022d068da144610ac22083cce157ff8c6.png",
            "https://d1.awsstatic.com/Learn-More_64.dc6d454a262eb880a9dd0d8cb283dca5bc00cb18.png",
            "https://d1.awsstatic.com/All-Products_64.78a4c2cdfdd82b7abc3fda6b44371491bdf5963e.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_01_Product-Features_SqInk.a8d5666758afc5121b4eb818ae18126031c4b61e.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_02_Sign-Up_SqInk.f43d5ddc9c43883eec6187f34c68155402b13312.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_03_Start-Building_SqInk.6a1ef4429a6604cda9b0857084aa13e2ee4eebca.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Find out what is an API, how and why businesses use APIs, and how to use APIs on AWS.",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services, Inc.",
        "canonical_link": "https://aws.amazon.com/what-is/api/",
        "text": "API architecture is usually explained in terms of client and server. The application sending the request is called the client, and the application sending the response is called the server. So in the weather example, the bureau’s weather database is the server, and the mobile app is the client.\n\nThere are four different ways that APIs can work depending on when and why they were created.\n\nSOAP APIs\n\nThese APIs use Simple Object Access Protocol. Client and server exchange messages using XML. This is a less flexible API that was more popular in the past.\n\nRPC APIs\n\nThese APIs are called Remote Procedure Calls. The client completes a function (or procedure) on the server, and the server sends the output back to the client.\n\nWebsocket APIs\n\nWebsocket API is another modern web API development that uses JSON objects to pass data. A WebSocket API supports two-way communication between client apps and the server. The server can send callback messages to connected clients, making it more efficient than REST API.\n\nREST APIs\n\nThese are the most popular and flexible APIs found on the web today. The client sends requests to the server as data. The server uses this client input to start internal functions and returns output data back to the client. Let’s look at REST APIs in more detail below.\n\nREST APIs offer four main benefits:\n\n1. Integration\n\nAPIs are used to integrate new applications with existing software systems. This increases development speed because each functionality doesn’t have to be written from scratch. You can use APIs to leverage existing code.\n\n2. Innovation\n\nEntire industries can change with the arrival of a new app. Businesses need to respond quickly and support the rapid deployment of innovative services. They can do this by making changes at the API level without having to re-write the whole code.\n\n3. Expansion\n\nAPIs present a unique opportunity for businesses to meet their clients’ needs across different platforms. For example, maps API allows map information integration via websites, Android,iOS, etc. Any business can give similar access to their internal databases by using free or paid APIs.\n\n4. Ease of maintenance\n\nThe API acts as a gateway between two systems. Each system is obliged to make internal changes so that the API is not impacted. This way, any future code changes by one party do not impact the other party.\n\nAPIs are classified both according to their architecture and scope of use. We have already explored the main types of API architectures so let’s take a look at the scope of use.\n\nPrivate APIs\n\nThese are internal to an enterprise and only used for connecting systems and data within the business.\n\nPublic APIs\n\nThese are open to the public and may be used by anyone. There may or not be some authorization and cost associated with these types of APIs.\n\nPartner APIs\n\nThese are only accessible by authorized external developers to aid business-to-business partnerships.\n\nComposite APIs\n\nThese combine two or more different APIs to address complex system requirements or behaviors.\n\nAll APIs must be secured through proper authentication and monitoring. The two main ways to secure REST APIs include:\n\n1. Authentication tokens\n\nThese are used to authorize users to make the API call. Authentication tokens check that the users are who they claim to be and that they have access rights for that particular API call. For example, when you log in to your email server, your email client uses authentication tokens for secure access.\n\n2. API keys\n\nAPI keys verify the program or application making the API call. They identify the application and ensure it has the access rights required to make the particular API call. API keys are not as secure as tokens but they allow API monitoring in order to gather data on usage. You may have noticed a long string of characters and numbers in your browser URL when you visit different websites. This string is an API key the website uses to make internal API calls.\n\nDue diligence and effort are required to build an API that other developers will want to work with and trust. These are the five steps required for high-quality API design:\n\n1. Plan the API\n\nAPI specifications, like OpenAPI, provide the blueprint for your API design. It is better to think about different use cases in advance and ensure the API adheres to current API development standards.\n\n2. Build the API\n\nAPI designers prototype APIs using boilerplate code. Once the prototype is tested, developers can customize it to internal specifications.\n\n3. Test the API\n\nAPI testing is the same as software testing and must be done to prevent bugs and defects. API testing tools can be used to strength test the API against cyber attacks.\n\n4. Document the API\n\nWhile APIs are self-explanatory, API documentation acts as a guide to improve usability. Well-documented APIs that offer a range of functions and use cases tend to be more popular in a service-oriented architecture.\n\n5. Market the API\n\nJust as Amazon is an online marketplace for retail, API marketplaces exist for developers to buy and sell other APIs. Listing your API can allow you to monetize it.\n\nApplication Programming Interface management is an important part of modern software development. It is worth investing in API infrastructure, including tools, gateway, and microservices architecture for both internal and external users.\n\nAmazon API Gateway comes with a full range of features to manage multiple APIs simultaneously and efficiently. You can make up to one million API calls for free by signing up at the AWS Portal.\n\nAWS AppSync offers fully managed GraphQL API setup, administration, and maintenance, with high-availability serverless infrastructure built-in. You pay only for what you use with no minimum fees or mandatory service usage. To get started, please sign in to the AWS AppSync Console."
    }
}