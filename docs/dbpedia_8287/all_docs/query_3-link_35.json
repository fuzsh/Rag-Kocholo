{
    "id": "dbpedia_8287_3",
    "rank": 35,
    "data": {
        "url": "https://developers.google.com/admob/ios/privacy",
        "read_more_link": "",
        "language": "en",
        "title": "Google for Developers",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/opengraph/white.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/opengraph/white.png",
        "images": [
            "https://developers.google.com/static/admob/ump/images/banner-example.png",
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/admob/ios/privacy",
        "text": "The Google User Messaging Platform (UMP) SDK is a privacy and messaging tool to help you manage privacy choices. For more information, see About Privacy & messaging.\n\nCreate a message type\n\nCreate user messages with one of the Available user message types under the Privacy & messaging tab of your AdMob account. The UMP SDK attempts to display a privacy message created from the AdMob Application ID set in your project.\n\nFor more details, see About privacy and messaging.\n\nImport the SDK\n\nCocoaPods (preferred)\n\nThe easiest way to import the SDK into an iOS project is to use CocoaPods. Open your project's Podfile and add this line to your app's target:\n\npod 'GoogleUserMessagingPlatform'\n\nThen, run the following command:\n\npod install --repo-update\n\nIf you're new to CocoaPods, see Using CocoaPods for details on how to create and use Podfiles.\n\nSwift Package Manager\n\nThe UMP SDK also supports the Swift Package Manager. Follow these steps to import the Swift package.\n\nIn Xcode, install the UMP SDK Swift Package by navigating to File > Add Packages....\n\nIn the prompt that appears, search for the UMP SDK Swift Package GitHub repository:\n\nhttps://github.com/googleads/swift-package-manager-google-user-messaging-platform.git\n\nSelect the version of the UMP SDK Swift Package you want to use. For new projects, we recommend using the Up to Next Major Version.\n\nXcode then resolves your package dependencies and downloads them in the background. For more details on how to add package dependencies, see Apple's article.\n\nManual download\n\nThe other way of importing the SDK is doing it manually.\n\nDownload the SDK\n\nThen, drag the framework into your Xcode project, ensuring you select Copy items if needed.\n\nYou can then include the framework in any file you need using:\n\nAdd the application ID\n\nYou can find your application ID in the AdMob UI. Add the ID to your Info.plist with the following code snippet:\n\n<key>GADApplicationIdentifier</key> <string>ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy</string>\n\nRequest for consent information\n\nYou should request an update of the user's consent information at every app launch, using requestConsentInfoUpdateWithParameters:completionHandler:. This request checks the following:\n\nWhether consent is required. For example, consent is required for the first time, or the previous consent decision expired.\n\nWhether a privacy options entry point is required. Some privacy messages require apps to allow users to modify their privacy options at any time.\n\nHere is an example of how to check the status from a UIViewController in the viewDidLoad() method.\n\nLoad and present a privacy message form if required\n\nAfter you have received the most up-to-date consent status, call loadAndPresentIfRequiredFromViewController:completionHandler: to load any forms required to collect user consent. After loading, the forms present immediately.\n\nIf you need to perform any actions after the user has made a choice or dismissed the form, place that logic in the completion handler for your form.\n\nPrivacy options\n\nSome privacy message forms are presented from a publisher-rendered privacy options entry point, letting users manage their privacy options at any time. To learn more about which message your users see at the privacy options entry point, see Available user message types.\n\nTo implement a privacy options entry point, complete the following steps:\n\nCheck UMPConsentInformation.sharedInstance.privacyOptionsRequirementStatus.\n\nIf a privacy options entry point is required, add a visible and interactable UI element to your app.\n\nTrigger the privacy options form using presentPrivacyOptionsFormFromViewController:completionHandler:.\n\nThe following code example demonstrates these steps:\n\nRequest ads\n\nBefore requesting ads in your app, check if you have obtained consent from the user using UMPConsentInformation.sharedInstance.canRequestAds. There are two places to check while gathering consent:\n\nAfter consent has been gathered in the current session.\n\nImmediately after you have called requestConsentInfoUpdateWithParameters:completionHandler:. It is possible consent has been obtained in the previous session. As a latency best practice, we recommend not waiting for the callback to complete so you can start loading ads as soon as possible after your app launches.\n\nIf an error occurs during the consent gathering process, you should still attempt to request ads. The UMP SDK uses the consent status from the previous session.\n\nTesting\n\nIf you want to test the integration in your app as you're developing, follow these steps to programmatically register your test device. Be sure to remove the code that sets these test device IDs before you release your app.\n\nCall requestConsentInfoUpdateWithParameters:completionHandler:.\n\nCheck the log output for a message similar to the following example, which shows your device ID and how to add it as a test device:\n\n<UMP SDK>To enable debug mode for this device, set: UMPDebugSettings.testDeviceIdentifiers = @[2077ef9a63d2b398840261c8221a0c9b]\n\nCopy your test device ID to your clipboard.\n\nModify your code to call UMPDebugSettings().testDeviceIdentifiers and pass in a list of your test device IDs.\n\nSwift\n\nlet parameters = UMPRequestParameters() let debugSettings = UMPDebugSettings() debugSettings.testDeviceIdentifiers = [\"TEST-DEVICE-HASHED-ID\"] parameters.debugSettings = debugSettings // Include the UMPRequestParameters in your consent request. UMPConsentInformation.sharedInstance.requestConsentInfoUpdate( with: parameters, completionHandler: { error in ... })\n\nObjective-C\n\nUMPRequestParameters *parameters = [[UMPRequestParameters alloc] init]; UMPDebugSettings *debugSettings = [[UMPDebugSettings alloc] init]; debugSettings.testDeviceIdentifiers = @[ @\"TEST-DEVICE-HASHED-ID\" ]; parameters.debugSettings = debugSettings; // Include the UMPRequestParameters in your consent request. [UMPConsentInformation.sharedInstance requestConsentInfoUpdateWithParameters:parameters completionHandler:^(NSError *_Nullable error){ ... }];\n\nForce a geography\n\nThe UMP SDK provides a way to test your app's behavior as though the device was located in the EEA or UK using the debugGeography property of type UMPDebugGeography on UMPDebugSettings. Note that debug settings only work on test devices.\n\nReset consent state\n\nIn testing your app with the UMP SDK, you might find it helpful to reset the state of the SDK so that you can simulate a user's first install experience. The SDK provides the reset method to do this.\n\nExamples on GitHub\n\nUMP SDK integration examples: Swift | Objective-C"
    }
}