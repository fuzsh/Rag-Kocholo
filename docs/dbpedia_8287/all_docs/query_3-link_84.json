{
    "id": "dbpedia_8287_3",
    "rank": 84,
    "data": {
        "url": "https://www.revenuecat.com/docs/getting-started/quickstart",
        "read_more_link": "",
        "language": "en",
        "title": "In-App Subscriptions Made Easy â RevenueCat",
        "top_image": "https://www.revenuecat.com/docs/img/social-preview.jpg",
        "meta_img": "https://www.revenuecat.com/docs/img/social-preview.jpg",
        "images": [
            "https://www.revenuecat.com/docs/img/logo-rc.svg",
            "https://www.revenuecat.com/docs/img/logo-rc.svg",
            "https://www.revenuecat.com/docs/assets/images/db42095-Screen_Shot_2022-11-16_at_3.28.33_PM_f4098e64180b29109c0aad33ca186bd3-76045510528d645ee19381994d275757.png",
            "https://www.revenuecat.com/docs/assets/images/e99ad62-Screen_Shot_2022-11-16_at_3.30.11_PM_bcabee81a896697ce6508da325bb416b-72280cec0cbc50eaaee2c14f428410de.png",
            "https://github.com/RevenueCat/revenuecat-docs/assets/5860245/7ddfb6e9-d730-4440-baba-d94bef820288",
            "https://www.revenuecat.com/docs/assets/images/55e2667-1628274-Entitlements_2.0_3dd9cdc954236c9ecc6981598b33cafc-820c6f4842343779a3249f24ff9e4871.png",
            "https://www.revenuecat.com/docs/assets/images/white-logo-6538ca48a8aa1914f598884ff4f1db39.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This guide will walk you through how to get up and running with subscriptions and RevenueCat's SDK with only a few lines of code.",
        "meta_lang": "en",
        "meta_favicon": "/docs/img/favicon-32x32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.revenuecat.com/docs/getting-started/quickstart",
        "text": "SDK Quickstart\n\nThis guide will walk you through how to get up and running with subscriptions and RevenueCat's SDK with only a few lines of code.\n\nSign up for a new RevenueCat account here.\n\nWe recommend using a company account when registering for RevenueCat and setting up your app within a project. You'll be able to invite the rest of your team as collaborators to your project, but only the project owner can manage billing. Project collaborators can't manage billing details.\n\nNavigate to the RevenueCat dashboard and add a new project from the dropdown in the top navigation menu called Projects.\n\nFrom Project Settings > Apps in the left menu of the project dashboard, select the platform for the app you will be adding.\n\nThe field App name is required to add your app to RevenueCat. For iOS apps In-App Purchase Key(iOS) is also required. To make test and production purchases, the Bundle ID (iOS) / Package Name (Android) as well as the Shared Secret(iOS) / Service Credentials (Android) must be configured.\n\nThe rest of the configuration fields can be added later.\n\nService credentials need to be set up for RevenueCat to communicate with the app stores on your behalf. See our guides App Store Connect Shared Secret, App Store In-App Purchase Key, Play Service Credentials, and Amazon Appstore Shared Secret for more information.\n\nNote that Play service credentials can take up to 36 hours to propagate throughout Google's servers.\n\nBefore you can start using RevenueCat to fetch products, you must configure your products in the respective stores. See the following guides for App Store Connect, Google Play Console, Amazon Appstore, and Stripe for help navigating through this process.\n\nIf you are selling iOS products, be sure to sign your 'Paid Applications Agreement' and fill out your bank and tax information in App Store Connect > Agreements, Tax, and Banking. This needs to be completed before you can test any purchases.\n\nOnce your in-app products have been configured in App Store Connect, Google Play Console, Amazon Appstore, or Stripe, you'll need to copy that configuration into the RevenueCat dashboard. RevenueCat uses an Entitlements system to control access to premium features, and Offerings to manage the set of products you offer to customers.\n\nEntitlements are the level of access that a customer is \"entitled\" to after purchasing a specific product, and Offerings is a simple way for you to organize the in-app products you wish to \"offer\" on your paywall and configure them remotely. We recommend utilizing these features to simplify your code and enable you to change products without releasing an app update.\n\nSee Configuring Products to set up your products and then organize them into Offerings or Entitlements.\n\nOur SDK seamlessly implements purchases and subscriptions across platforms while syncing tokens with the RevenueCat server.\n\nInstall the SDK on your preferred platform with our installation guides below.\n\niOS/watchOS/tvOS Installation\n\nAndroid Installation\n\nReact Native Installation\n\nFlutter Installation\n\nKotlin Multiplatform installation\n\nCapacitor / Ionic Installation\n\nCordova Installation\n\nUnity Installation\n\nmacOS / Catalyst Installation\n\nIf you run into issues with the SDK, see Troubleshooting the SDKs for guidance.\n\nYou should only configure the shared instance of Purchases once, usually on app launch. After that, the same instance is shared throughout your app by accessing the .shared instance in the SDK.\n\nSee our guide on Configuring SDK for more information and best practices.\n\nMake sure you configure Purchases with your public SDK key only. This API key can be found in the API Keys Project settings page. You can read more about the different API keys available in our Authentication guide.\n\nThe app_user_id field in .configure is how RevenueCat identifies users of your app. You can provide a custom value here or omit it for us to generate an anonymous id. For more information, see our Identifying Users guide.\n\nWhen in development, we recommend enabling more verbose debug logs. For more information about these logs, see our Debugging guide.\n\nIf you're planning to use RevenueCat alongside your existing purchase code, be sure to tell the SDK that your app will complete the purchases\n\nThe SDK will automatically fetch the configured Offerings and retrieve the product information from Apple, Google, or Amazon. Thus, available products will already be loaded when customers launch your purchase screen.\n\nBelow is an example of fetching Offerings. You can utilize Offerings to organize your paywall screen. See our guide on Displaying Products for more information and best practices.\n\nSwift\n\nKotlin\n\nFlutter\n\nReact Native\n\nIf fetching your Offerings, products, or available packages are empty, it's due to some configuration issue in the respective store.\n\nThe most common reasons for this in App Store Connect are an out-of-date 'Paid Applications Agreement' or products not at least in the 'Ready To Submit' state. In Google Play this usually occurs when the app is not published on a closed track and a valid test user added.\n\nYou can find more info about troubleshooting this issue in our Help Center.\n\nThe SDK includes a simple method for facilitating purchases. The purchase:package takes a package from the fetched Offering and processes the transaction with the respective app store.\n\nThe code sample below shows the process of purchasing a package and confirming it unlocks the \"your_entitlement_id\" content. More detail about the purchase:package method can be found in our guide on Making Purchases.\n\nSwift\n\nKotlin\n\nFlutter\n\nReact Native\n\nThe SDK makes it easy to check what active subscriptions the current customer has, too. This can be done by checking a user's CustomerInfo object to see if a specific Entitlement is active, or by checking if the active Entitlements array contains a specific Entitlement ID.\n\nIf you're not using Entitlements (you probably should be!) you can check the array of active subscriptions to see what product IDs from the respective store it contains.\n\nSwift\n\nKotlin\n\nFlutter\n\nReact Native\n\nYou can use this method whenever you need to get the latest status, and it's safe to call this repeatedly throughout the lifecycle of your app. Purchases automatically caches the latest CustomerInfo whenever it updates â so in most cases, this method pulls from the cache and runs very fast.\n\nIt's typical to call this method when deciding which UI to show the user and whenever the user performs an action that requires a certain entitlement level.\n\nRevenueCat enables your users to restore their in-app purchases, reactivating any content that they previously purchased from the same store account (Apple, Google, or Amazon account). We recommend that all apps have some way for users to trigger the restore method. Note that Apple does require a restore mechanism in the event a user loses access to their purchases (e.g: uninstalling/reinstalling the app, losing their account information, etc).\n\nSwift\n\nKotlin\n\nFlutter\n\nReact Native\n\nIf two different App User IDs restore transactions from the same underlying store account (Apple, Google, or Amazon account) RevenueCat may attempt to create an alias between the two App User IDs and count them as the same user going forward. See our guide on Restoring Purchases for more information on the different configurable restore behaviors.\n\nSince the SDK works seamlessly on any platform, changes to a user's purchase info may come from a variety of sources. You can respond to any changes in a customer's CustomerInfo by conforming to an optional delegate method, purchases:receivedUpdated:.\n\nThis method will fire whenever the SDK receives an updated CustomerInfo object from calls to getCustomerInfo(), purchase(package:), purchase(product:), or restorePurchases().\n\nCustomerInfo updates are not pushed to your app from the RevenueCat backend, updates can only happen from an outbound network request to RevenueCat, as mentioned above.\n\nDepending on your app, it may be sufficient to ignore the delegate and simply handle changes to customer information the next time your app is launched or in the completion blocks of the SDK methods.\n\nSwift\n\nKotlin\n\nFlutter\n\nReact Native\n\nTo download more complete examples of integrating the SDK, head over to our sample app resources.\n\nView Samples"
    }
}