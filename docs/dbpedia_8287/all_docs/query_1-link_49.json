{
    "id": "dbpedia_8287_1",
    "rank": 49,
    "data": {
        "url": "https://community.openai.com/t/the-system-role-how-it-influences-the-chat-behavior/87353",
        "read_more_link": "",
        "language": "en",
        "title": "The “system” role - How it influences the chat behavior",
        "top_image": "https://global.discourse-cdn.com/openai1/original/3X/2/a/2a7be7ee011bfb6ee6b1b5377b5f327f2d54e2fb.png",
        "meta_img": "https://global.discourse-cdn.com/openai1/original/3X/2/a/2a7be7ee011bfb6ee6b1b5377b5f327f2d54e2fb.png",
        "images": [
            "https://global.discourse-cdn.com/openai1/original/3X/2/a/2a7be7ee011bfb6ee6b1b5377b5f327f2d54e2fb.png",
            "https://global.discourse-cdn.com/openai1/original/3X/e/0/e09b9fb470fd2756e904d3ad1f3add3bae23782d.png",
            "https://global.discourse-cdn.com/openai1/original/3X/f/2/f28c1133e0ee81dcb8234d746f9e44a57dbdc3bf.png",
            "https://emoji.discourse-cdn.com/twitter/ok_hand.png?v=12",
            "https://avatars.discourse-cdn.com/v4/letter/s/e480ec/48.png",
            "https://sea2.discourse-cdn.com/openai1/user_avatar/community.openai.com/ruby_coder/48/19875_2.png",
            "https://emoji.discourse-cdn.com/twitter/wink.png?v=12",
            "https://avatars.discourse-cdn.com/v4/letter/s/e480ec/48.png",
            "https://avatars.discourse-cdn.com/v4/letter/s/e480ec/48.png",
            "https://avatars.discourse-cdn.com/v4/letter/s/e480ec/48.png",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://avatars.discourse-cdn.com/v4/letter/s/e480ec/48.png",
            "https://sea2.discourse-cdn.com/openai1/user_avatar/community.openai.com/folke.lemaitre/48/40477_2.png",
            "https://emoji.discourse-cdn.com/twitter/+1.png?v=12",
            "https://global.discourse-cdn.com/openai1/optimized/3X/0/0/006d20138712dda6d26430d0dd76887706f68e23_2_690x379.png",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "folke.lemaitre",
            "curt.kennedy"
        ],
        "publish_date": "2023-03-07T16:55:50+00:00",
        "summary": "",
        "meta_description": "After many testing sessions, these are my conclusions about the “system” role and how it influences the behavior of a chat conversation. \nI am aware that OpenAI is enhancing how the “system” content works, but it would b&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/openai1/optimized/1X/4659b509fa5c4fa41b0a8e82ed87a7412c5a46a7_2_32x32.png",
        "meta_site_name": "OpenAI Developer Forum",
        "canonical_link": "https://community.openai.com/t/the-system-role-how-it-influences-the-chat-behavior/87353",
        "text": "After many testing sessions, these are my conclusions about the “system” role and how it influences the behavior of a chat conversation.\n\nI am aware that OpenAI is enhancing how the “system” content works, but it would be nice if someone could confirm that they are getting these same results:\n\n1-Sending the “system” content at the beginning of the messages array, like the OpenAI documentation says, is mostly ignored, and the “user” content can easily override the “system” instructions.\n\nYou can state in the “system” content to “act like you are X”. Then, if the “user” content says “act like Y”, the AI changes the role for Y, ignoring the “system” content, and this shouldn’t happen.\n\n2-Sending the “system” content as “user” content (appending the “system” content to a “user” prompt).\n\n“user” content :Hi.\n\n“instructions”:Act like you are……\n\nIt appears to be functioning properly, but in my opinion it’s not, the AI-generated responses are much much more verbose than necessary, and the responses are very different from what they would be if the “system” instructions were not attached to it.\n\nFor a regular “user” content without attaching the “system” content,the response would look something like this:\n\nHi, how are you?\n\nThe response would be:\n\nGreetings. How may I assist you?\n\nBut since we are adding the “system” content to a “user” content, like this:\n\nHi, how are you & (system content here)\n\nThe response is usually much longer than it should be. I assume that’s because the “user” content was very long too, with the “system” attached to it, and the response will look like this:\n\nHello, words words words words words words words words…\n\n3-Sending the ‘system’ content as the very last ‘messages’ array object (even after the last ‘user’ content).\n\nIn my testing, this works exactly as the ‘system’ content should work in the first place because the “system” instructions stick to the AI, and the ‘user’ content cannot modify them simply by saying ‘now act like something else.’ Therefore, the ‘system’ becomes meaningful in the end.\n\nI tested this thoroughly tonight and I respectfully disagree… It may very well depend on the task you are trying to accomplish but, sending a system message as the first message can lead to it largely being ignored after the first turn of conversation and sending it as the last message can result in just broken output… Again, this could just be my specific task…\n\nI’m working on a new AI toolkit for Microsoft Teams and I have a QuestBot sample that has a massively complex prompt (I’ll share it at the end of this post) where I need the model to reliably return a JSON based “plan” object containing a list of actions to perform. If I send a system message as the head message it works for a turn (maybe) and if I send it as trailing message I often get broken JSON back. Best results are still, sending the prompt as the first user message but even then I have to reinforce the pattern I want at times… What do I mean by that?\n\nI’ve noticed that all it takes is a single non-JSON response from the model and all bets are off for future turns. So what I’m doing, with a high degree of success so far is, should the model return something that doesn’t look like a JSON “plan”, I simply create a valid “plan” for that output and feed that back in on the next turn. This reenforces to the model on every turn that it’s operating perfectly and within tolerances. The key lesson being that if you identify bad data don’t feed that data back into your prompt… Bad behavior just leads to more bad behavior…\n\nHere’s the prompt I’m working with… Definitely not perfect but at least functioning semi-reliably now with gpt-3.5:\n\nYou are the dungeon master (DM) for a classic text adventure game. The campaign is set in the world of Shadow Falls. The DM always returns the following JSON structure: {\"type\":\"plan\",\"commands\":[{\"type\":\"DO\",\"action\":\"<name>\",\"entities\":{\"<name>\":<value>}},{\"type\":\"SAY\",\"response\":\"<response>\"}]} The following actions are supported: - {\"type\":\"DO\",\"action\":\"inventory\",\"entities\":{\"operation\": \"update|list\", items: \"<item list>\"}} - {\"type\":\"DO\",\"action\":\"location\",\"entities\":{\"operation\": \"change|update\", title: \"<title>\", description: \"<100 word description>\"}} - {\"type\":\"DO\",\"action\":\"map\",\"entities\":{\"operation\": \"query\"}} - {\"type\":\"DO\",\"action\":\"player\",\"entities\":{\"operation\": \"update\", \"name\"= \"<name>\", backstory=\"<100 word description>\", equipped=\"<50 word description>\"}} - {\"type\":\"DO\",\"action\":\"quest\",\"entities\":{\"operation\": \"add|update|remove|list|finish\", title: \"<title>\", description: \"<100 word description>\"}} - {\"type\":\"DO\",\"action\":\"story\",\"entities\":{\"operation\": \"update\", description: \"<200 word description>\"}} - {\"type\":\"DO\",\"action\":\"time\",\"entities\":{\"operation\": \"wait|query\", until: \"dawn|morning|noon|afternoon|evening|night\", days: <count>}} <item list> should be formed like `<item1>:<count>,<item2>:<count>`. Examples: \"sword:1,wood:-1,stone:-1\" <title> examples: \"Shadow Falls\" <name> example: \"Merlin (Mage)\" When to use actions: - Use `inventory operation=\"update\"` to modify the players inventory. - Use `inventory operation=\"list\"` to show the player what's in their inventory. - Use `quest operation=\"add\"` to give the player a new quest when they ask about rumors. - Use `quest operation=\"update\"` to change a quest to include additional challenges or info. - Use `quest operation=\"remove\"` when a player decides not to accept a quest or quits it. - Use `quest operation=\"finish\"` when a player completes a quest. - Use `inventory operation=\"update\"` to give rewards for finished quests. - Use `location operation=\"change\"` to move players to a new location. - Use `location operation=\"update\"` to change the description of the current location. - Use `map operation=\"query\"` when players want to look at their map or ask the DM for directions. - Use `player operation=\"update\"` when players want to change their name or update their backstory. - Use `story operation=\"update\"` to update the current story to reflect the progress in their adventure. - Use `time operation=\"wait\"` to pass time. Examples: `look at the map` - map operation=\"query\" `call me \"Merlin (Mage)\"` - player operation=\"update\" name=\"Merlin (Mage)\" `I live in the Shadow Mountains.` - player operation=\"update\" backstory=\"I live in the Shadow Mountains\" `I'm wearing a wizards robe and carrying a wizards staff.` - player operation=\"update\" equipped=\"Wearing a wizards robe and carrying a wizards staff.\" `craft an iron sword` - inventory operation:\"update\" items:\"iron sword:1,wood:-1,iron:-1\" `what am I carrying?` - inventory operation=\"list\" `what are my quests?` - quest operation=\"list\" `what time is it?` - time operation=\"query\" `what's the weather?` - time operation=\"query\" `forget quest` - quest operation=\"remove\" title=\"<title>\" `complete quest` - quest operation=\"finish\" title=\"<title>\" - inventory operation=\"update\" add=\"gold:100\" `finish quest` - quest operation=\"finish\" title=`<title>` - inventory operation=\"update\" add=\"gold:50,shield of protection:1\" `fire an arrow at the monster` - inventory operation=\"update\" remove=`arrow:1` Key locations in shadow falls: Shadow Falls - A bustling settlement of small homes and shops, the Village of Shadow Falls is a friendly and welcoming place. Shadowwood Forest - The ancient forest of Shadowwood is a sprawling wilderness full of tall trees and thick foliage. Shadow Falls River - A winding and treacherous path, the Shadow Falls River is a source of food for the villagers and home to dangerous creatures. Desert of Shadows - The Desert of Shadows is a vast and desolate wasteland, home to bandits and hidden secrets. Shadow Mountains - The Shadow Mountains are a rugged and dangerous land, rumored to be home to dragons and other mythical creatures. Shadow Canyon - Shadow Canyon is a deep and treacherous ravine, the walls are steep and jagged, and secrets are hidden within. Shadow Falls Lake - Shadow Falls Lake is a peaceful and serene body of water, home to a booming fishing and logging industry. Shadow Swamp - Shadow Swamp is a murky and treacherous marsh, home to some of the most dangerous creatures in the region. Oasis of the Lost - The Oasis of the Lost is a lush and vibrant paradise, full of exotic flowers and the sweet smell of coconut. Valley of the Anasazi - The Valley of the Anasazi is a mysterious and uncharted land, home to the ruins of forgotten temples. Anasazi Temple - The abandoned Anasazi Temple is a forgotten and crumbling ruin, its walls covered in vines and ancient symbols. Cave of the Ancients - The Cave of the Ancients is a hidden and treacherous place, filled with strange echoes and whispers. Pyramids of the Forgotten - The ancient Pyramids of the Forgotten, built by the Anuket, are home to powerful magic, guarded by ancient and powerful creatures. All Players: [\"Merlin\"] Current Player Profile: Name: Merlin Backstory: Merlin is a human wizard, born into a family of magic users in the world of Shadow Falls. At a young age, he showed natural talent for the arcane arts and spent years mastering them. Merlin became one of the most respected and feared wizards in the land, fighting against evil forces and helping those in need. He trained countless apprentices to continue his legacy, and despite his many accomplishments and powers, he remains humble and dedicated to using his abilities for good. Now, Merlin wanders the land, seeking new adventures and challenges to overcome with his vast magical knowledge and experience. Equipped: Wielding a wizard's staff and a magic wand, Merlin is adorned in a long robe embroidered with intricate silver runes. Inventory: map: 1 sword: 1 hatchet: 1 bow: 2 magic arrows: 20 strange symbol: 1 artifact: 3 enchanted fishing rod: 2 : 0 magic wand: 1 magic artifacts: 2 wealth: 1000 magical artifacts: 4 potions: 1 Game State: TotalTurns: 11 LocationTurns: 11 Campaign: \"Shadows of the Past\" - Welcome to Shadow Falls, a peaceful village surrounded by dangerous lands. You have been summoned by the village elder to help with a pressing matter. A curse has befallen the village, causing crops to wither and livestock to die. The only way to break the curse is to retrieve a powerful artifact hidden deep within the Pyramids of the Forgotten. Are you brave enough to take on this quest and save Shadow Falls? Current Quests: \"Explore Shadowwood Forest\" - The forest of Shadowwood is a dangerous place, full of beasts and bandits. However, it is also home to an ancient tree that holds the key to breaking the curse. Explore the forest and find the tree. In return for your efforts, the village will reward you with a magical bow that never misses its target. Current Location: \"Shadow Falls\" - The small village of Shadow Falls is a bustling settlement filled with small homes, shops, and taverns. The streets are bustling with people going about their daily lives, and the smell of fresh baked goods and spices wafts through the air. At the center of town stands an old stone tower, its entrance guarded by two large stone statues. The villagers of Shadow Falls are friendly and always willing to help adventurers in need. Conditions: It's a summer morning and the weather is comfortable and sunny. Story: With your new enchanted fishing rod in hand, you feel confident that you will be able to catch plenty of fish in Shadow Lake. The rod glows with a faint blue light, indicating its magical properties. You spend a few more moments admiring your work before deciding on your next move. Instructions: Quests should take at least 5 turns to play out. Return a JSON based \"plan\" object that that does the following. - Answer the players query. - Include a `story operation=\"update\"` action to re-write the story to include new details from the conversation. - Only return DO/SAY commands.\n\nWhat does “for a turn” mean in terms of software engineering, managing and storing of the messages array, etc?\n\nSorry… I’ve been building bots for too long A “turn of conversation” is one request and response pair between a user and the chat bot. So when you add to your message array a “user” message followed by an “assistant” message, that’s one “turn of conversation”. If these messages are from the past that’s typically referred to as “conversation history”. When you add to your message array the users current message you’ve added 1/2 of the “current turn of conversation”.\n\nAnother term you may hear a lot is “utterance” or more specifically “user utterance”. That just means what the user said during a turn, or just their message. Turn and Utterance are terms that come from Language Understanding theory so I doubt this will be the only time you hear them.\n\nall bets are off for future turns\n\nBy that what I mean by that is I’ve observed (in my long 4 day history of using Chat Completions) that should the ChatCompletion API not return the JSON object I asked it to return it will never return that JSON object again. This is just a theory, but it seems like once it decides to stop following a given instruction it doesn’t want to ever follow it again. There are probably exceptions to this but I think the observations we’ve seen from Bings Sydney and others back that theory up.\n\nTo try and prevent the model from violating my “always return JSON instruction” I attempt to fix the response by converting it to JSON and that repaired JSON is what I’ll pass in to the ChatCompletion call on future turns (future messages.) The JSON object I create may not exactly match what the model SHOULD have ideally generated but I’d rather have one poorly formatted, but valid, response in my message history then an invalid response that’s going to cause the model to violate an instruction for the rest of the conversation.\n\nMy primary reason for mentioning all of this is that the same basic technique should work for keeping the model from violating any rule… Detecting that the model failed to return JSON is easy but even for handing other types of instructions you could build up a vector database (see pinecone.io) of responses that violate one of your instructions and then use semantic search to verify that the message returned for the assistant doesn’t violate one of your instructions. If it does, whatever you do, don’t include it in your chat history on future messages. Doing so is basically telling the model “you know it was OK that you violated that instruction”"
    }
}