{
    "id": "dbpedia_8287_3",
    "rank": 74,
    "data": {
        "url": "https://jmeter.apache.org/usermanual/component_reference.html",
        "read_more_link": "",
        "language": "en",
        "title": "User's Manual: Component Reference",
        "top_image": "https://jmeter.apache.org/images/favicon.png",
        "meta_img": "https://jmeter.apache.org/images/favicon.png",
        "images": [
            "https://jmeter.apache.org/images/asf-logo.svg",
            "https://jmeter.apache.org/images/logo.svg",
            "https://www.apache.org/events/current-event-234x60.png",
            "https://jmeter.apache.org/images/screenshots/ftptest/ftp-request.png",
            "https://jmeter.apache.org/images/screenshots/http-request.png",
            "https://jmeter.apache.org/images/screenshots/http-request-advanced-tab.png",
            "https://jmeter.apache.org/images/screenshots/graphql-http-request.png",
            "https://jmeter.apache.org/images/screenshots/graphql-http-request-vars.png",
            "https://jmeter.apache.org/images/screenshots/http-request-raw-single-parameter.png",
            "https://jmeter.apache.org/images/screenshots/http-request-confirm-raw-body.png",
            "https://jmeter.apache.org/images/screenshots/http-request-raw-body.png",
            "https://jmeter.apache.org/images/screenshots/jdbctest/jdbc-request.png",
            "https://jmeter.apache.org/images/screenshots/java_request.png",
            "https://jmeter.apache.org/images/screenshots/ldap_request.png",
            "https://jmeter.apache.org/images/screenshots/ldapext_request.png",
            "https://jmeter.apache.org/images/screenshots/accesslogsampler.png",
            "https://jmeter.apache.org/images/screenshots/beanshellsampler.png",
            "https://jmeter.apache.org/images/screenshots/jsr223-sampler.png",
            "https://jmeter.apache.org/images/screenshots/tcpsampler.png",
            "https://jmeter.apache.org/images/screenshots/jmspublisher.png",
            "https://jmeter.apache.org/images/screenshots/jmssubscriber.png",
            "https://jmeter.apache.org/images/screenshots/jms/JMS_Point-to-Point.png",
            "https://jmeter.apache.org/images/screenshots/junit_sampler.png",
            "https://jmeter.apache.org/images/screenshots/mailreader_sampler.png",
            "https://jmeter.apache.org/images/screenshots/test_action.png",
            "https://jmeter.apache.org/images/screenshots/smtp_sampler.png",
            "https://jmeter.apache.org/images/screenshots/os_process_sampler.png",
            "https://jmeter.apache.org/images/screenshots/mongodb-script.png",
            "https://jmeter.apache.org/images/screenshots/bolt-request.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/simple-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/simple-example.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/loop-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/loop-example.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/once-only-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/once-only-example.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/interleave-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/interleave.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/interleave2.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/interleave3.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/random-controller.png",
            "https://jmeter.apache.org/images/screenshots/randomordercontroller.png",
            "https://jmeter.apache.org/images/screenshots/throughput_controller.png",
            "https://jmeter.apache.org/images/screenshots/runtimecontroller.png",
            "https://jmeter.apache.org/images/screenshots/if_controller_variable.png",
            "https://jmeter.apache.org/images/screenshots/if_controller_expression.png",
            "https://jmeter.apache.org/images/screenshots/if_controller_javascript.png",
            "https://jmeter.apache.org/images/screenshots/if_controller_expression.png",
            "https://jmeter.apache.org/images/screenshots/whilecontroller.png",
            "https://jmeter.apache.org/images/screenshots/switchcontroller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/foreach-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/foreach-example.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/foreach-example2.png",
            "https://jmeter.apache.org/images/screenshots/module_controller.png",
            "https://jmeter.apache.org/images/screenshots/includecontroller.png",
            "https://jmeter.apache.org/images/screenshots/transactioncontroller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/recording-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/critical-section-controller.png",
            "https://jmeter.apache.org/images/screenshots/logic-controller/critical-section-controller-tp.png",
            "https://jmeter.apache.org/images/screenshots/simpledatawriter.png",
            "https://jmeter.apache.org/images/screenshots/sample_result_config.png",
            "https://jmeter.apache.org/images/screenshots/graph_results.png",
            "https://jmeter.apache.org/images/screenshots/assertion_results.png",
            "https://jmeter.apache.org/images/screenshots/view_results_tree.png",
            "https://jmeter.apache.org/images/screenshots/view_results_tree_xml.png",
            "https://jmeter.apache.org/images/screenshots/view_results_tree_regex.png",
            "https://jmeter.apache.org/images/screenshots/view_results_tree_document.png",
            "https://jmeter.apache.org/images/screenshots/aggregate_report.png",
            "https://jmeter.apache.org/images/screenshots/aggregate_report_grouped.png",
            "https://jmeter.apache.org/images/screenshots/table_results.png",
            "https://jmeter.apache.org/images/screenshots/simpledatawriter.png",
            "https://jmeter.apache.org/images/screenshots/aggregate_graph.png",
            "https://jmeter.apache.org/images/screenshots/aggregate_graph_settings.png",
            "https://jmeter.apache.org/images/screenshots/response_time_graph.png",
            "https://jmeter.apache.org/images/screenshots/response_time_graph_settings.png",
            "https://jmeter.apache.org/images/screenshots/mailervisualizer.png",
            "https://jmeter.apache.org/images/screenshots/beanshell_listener.png",
            "https://jmeter.apache.org/images/screenshots/summary_report.png",
            "https://jmeter.apache.org/images/screenshots/summary_report_grouped.png",
            "https://jmeter.apache.org/images/screenshots/savetofile.png",
            "https://jmeter.apache.org/images/screenshots/summary.png",
            "https://jmeter.apache.org/images/screenshots/comparison_assertion_visualizer.png",
            "https://jmeter.apache.org/images/screenshots/backend_listener.png",
            "https://jmeter.apache.org/images/screenshots/grafana_dashboard.png",
            "https://jmeter.apache.org/images/screenshots/csvdatasetconfig.png",
            "https://jmeter.apache.org/images/screenshots/ftp-config/ftp-request-defaults.png",
            "https://jmeter.apache.org/images/screenshots/dns-cache-manager.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-auth-manager.png",
            "https://jmeter.apache.org/images/screenshots/http-config/auth-manager-example1a.png",
            "https://jmeter.apache.org/images/screenshots/http-config/auth-manager-example1b.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-cache-manager.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-cookie-manager.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-request-defaults.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-request-defaults-advanced-tab.png",
            "https://jmeter.apache.org/images/screenshots/http-config/http-header-manager.png",
            "https://jmeter.apache.org/images/screenshots/http-config/header-manager-example1a.png",
            "https://jmeter.apache.org/images/screenshots/http-config/header-manager-example1b.png",
            "https://jmeter.apache.org/images/screenshots/java_defaults.png",
            "https://jmeter.apache.org/images/screenshots/jdbc-config/jdbc-conn-config.png",
            "https://jmeter.apache.org/images/screenshots/keystore_config.png",
            "https://jmeter.apache.org/images/screenshots/login-config.png",
            "https://jmeter.apache.org/images/screenshots/ldap_defaults.png",
            "https://jmeter.apache.org/images/screenshots/ldapext_defaults.png",
            "https://jmeter.apache.org/images/screenshots/tcpsamplerconfig.png",
            "https://jmeter.apache.org/images/screenshots/user_defined_variables.png",
            "https://jmeter.apache.org/images/screenshots/random_variable.png",
            "https://jmeter.apache.org/images/screenshots/counter.png",
            "https://jmeter.apache.org/images/screenshots/simple_config_element.png",
            "https://jmeter.apache.org/images/screenshots/mongodb-source-config.png",
            "https://jmeter.apache.org/images/screenshots/bolt-connection-config.png",
            "https://jmeter.apache.org/images/screenshots/assertion/assertionscope.png",
            "https://jmeter.apache.org/images/screenshots/assertion/assertionscopevar.png",
            "https://jmeter.apache.org/images/screenshots/assertion/assertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/example1a.png",
            "https://jmeter.apache.org/images/screenshots/assertion/example1b.png",
            "https://jmeter.apache.org/images/screenshots/assertion/example1c-pass.png",
            "https://jmeter.apache.org/images/screenshots/assertion/example1c-fail.png",
            "https://jmeter.apache.org/images/screenshots/duration_assertion.png",
            "https://jmeter.apache.org/images/screenshots/size_assertion.png",
            "https://jmeter.apache.org/images/screenshots/xml_assertion.png",
            "https://jmeter.apache.org/images/screenshots/beanshell_assertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/MD5HexAssertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/HTMLAssertion.png",
            "https://jmeter.apache.org/images/screenshots/xpath_assertion.png",
            "https://jmeter.apache.org/images/screenshots/xpath_assertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/XMLSchemaAssertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/compare.png",
            "https://jmeter.apache.org/images/screenshots/assertion/smime.png",
            "https://jmeter.apache.org/images/screenshots/assertion/json_assertion.png",
            "https://jmeter.apache.org/images/screenshots/assertion/jmespath_assertion.png",
            "https://jmeter.apache.org/images/screenshots/timers/constant_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/gauss_random_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/uniform_random_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/constant_throughput_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/precise_throughput_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/sync_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/beanshell_timer.png",
            "https://jmeter.apache.org/images/screenshots/timers/poisson_random_timer.png",
            "https://jmeter.apache.org/images/screenshots/html_link_parser.png",
            "https://jmeter.apache.org/images/screenshots/modification.png",
            "https://jmeter.apache.org/images/screenshots/url_rewriter.png",
            "https://jmeter.apache.org/images/screenshots/user_params.png",
            "https://jmeter.apache.org/images/screenshots/beanshell_preprocessor.png",
            "https://jmeter.apache.org/images/screenshots/jdbc-pre-processor.png",
            "https://jmeter.apache.org/images/screenshots/regex_user_params.png",
            "https://jmeter.apache.org/images/screenshots/sample_timeout.png",
            "https://jmeter.apache.org/images/screenshots/regex_extractor.png",
            "https://jmeter.apache.org/images/screenshots/css_extractor_attr.png",
            "https://jmeter.apache.org/images/screenshots/css_extractor_attr.png",
            "https://jmeter.apache.org/images/screenshots/css_extractor_noattr.png",
            "https://jmeter.apache.org/images/screenshots/xpath2_extractor.png",
            "https://jmeter.apache.org/images/screenshots/xpath_extractor.png",
            "https://jmeter.apache.org/images/screenshots/extractor/jmespath_extractor.png",
            "https://jmeter.apache.org/images/screenshots/resultstatusactionhandler.png",
            "https://jmeter.apache.org/images/screenshots/beanshell_postprocessor.png",
            "https://jmeter.apache.org/images/screenshots/jdbc-post-processor.png",
            "https://jmeter.apache.org/images/screenshots/json-post-processor.png",
            "https://jmeter.apache.org/images/screenshots/extractor/boundary_extractor.png",
            "https://jmeter.apache.org/images/screenshots/testplan.png",
            "https://jmeter.apache.org/images/screenshots/open_model_thread_group.png",
            "https://jmeter.apache.org/images/screenshots/threadgroup.png",
            "https://jmeter.apache.org/images/screenshots/threadgroup-popup-menu.png",
            "https://jmeter.apache.org/images/screenshots/recorder_popup_info.png",
            "https://jmeter.apache.org/images/screenshots/proxy_control.png",
            "https://jmeter.apache.org/images/screenshots/mirrorserver.png",
            "https://jmeter.apache.org/images/screenshots/property_display.png",
            "https://jmeter.apache.org/images/screenshots/debug_sampler.png",
            "https://jmeter.apache.org/images/screenshots/debug_postprocessor.png",
            "https://jmeter.apache.org/images/screenshots/test_fragment.png",
            "https://jmeter.apache.org/images/screenshots/setup_thread_group.png",
            "https://jmeter.apache.org/images/screenshots/teardown_thread_group.png",
            "https://jmeter.apache.org/images/screenshots/tear_down_on_shutdown.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../images/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "HTTP Request¶\n\nThis sampler lets you send an HTTP/HTTPS request to a web server. It also lets you control whether or not JMeter parses HTML files for images and other embedded resources and sends HTTP requests to retrieve them. The following types of embedded resource are retrieved:\n\nimages\n\napplets\n\nstylesheets (CSS) and resources referenced from those files\n\nexternal scripts\n\nframes, iframes\n\nbackground images (body, table, TD, TR)\n\nbackground sound\n\nThe default parser is org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser. This can be changed by using the property \"htmlparser.className\" - see jmeter.properties for details.\n\nIf you are going to send multiple requests to the same web server, consider using an HTTP Request Defaults Configuration Element so you do not have to enter the same information for each HTTP Request.\n\nOr, instead of manually adding HTTP Requests, you may want to use JMeter's HTTP(S) Test Script Recorder to create them. This can save you time if you have a lot of HTTP requests or requests with many parameters.\n\nThere are three different test elements used to define the samplers:\n\nAJP/1.3 Sampler\n\nuses the Tomcat mod_jk protocol (allows testing of Tomcat in AJP mode without needing Apache httpd) The AJP Sampler does not support multiple file upload; only the first file will be used.\n\nHTTP Request\n\nthis has an implementation drop-down box, which selects the HTTP protocol implementation to be used:\n\nJava\n\nuses the HTTP implementation provided by the JVM. This has some limitations in comparison with the HttpClient implementations - see below.\n\nHTTPClient4\n\nuses Apache HttpComponents HttpClient 4.x.\n\nBlank Value\n\ndoes not set implementation on HTTP Samplers, so relies on HTTP Request Defaults if present or on jmeter.httpsampler property defined in jmeter.properties\n\nGraphQL HTTP Request\n\nthis is a GUI variation of the HTTP Request to provide more convenient UI elements to view or edit GraphQL Query, Variables and Operation Name, while converting them into HTTP Arguments automatically under the hood using the same sampler. This hides or customizes the following UI elements as they are less convenient for or irrelevant to GraphQL over HTTP/HTTPS requests:\n\nMethod: Only POST and GET methods are available conforming the GraphQL over HTTP specification. POST method is selected by default.\n\nParameters and Post Body tabs: you may view or edit parameter content through Query, Variables and Operation Name UI elements instead.\n\nFile Upload tab: irrelevant to GraphQL queries.\n\nEmbedded Resources from HTML Files section in the Advanced tab: irrelevant in GraphQL JSON responses.\n\nThe Java HTTP implementation has some limitations:\n\nThere is no control over how connections are re-used. When a connection is released by JMeter, it may or may not be re-used by the same thread.\n\nThe API is best suited to single-threaded usage - various settings are defined via system properties, and therefore apply to all connections.\n\nNo support of Kerberos authentication\n\nIt does not support client based certificate testing with Keystore Config.\n\nBetter control of Retry mechanism\n\nIt does not support virtual hosts.\n\nIt supports only the following methods: GET, POST, HEAD, OPTIONS, PUT, DELETE and TRACE\n\nBetter control on DNS Caching with DNS Cache Manager\n\nNote: the FILE protocol is intended for testing purposes only. It is handled by the same code regardless of which HTTP Sampler is used.\n\nIf the request requires server or proxy login authorization (i.e. where a browser would create a pop-up dialog box), you will also have to add an HTTP Authorization Manager Configuration Element. For normal logins (i.e. where the user enters login information in a form), you will need to work out what the form submit button does, and create an HTTP request with the appropriate method (usually POST) and the appropriate parameters from the form definition. If the page uses HTTP, you can use the JMeter Proxy to capture the login sequence.\n\nA separate SSL context is used for each thread. If you want to use a single SSL context (not the standard behaviour of browsers), set the JMeter property:\n\nhttps.sessioncontext.shared=true\n\nBy default, since version 5.0, the SSL context is retained during a Thread Group iteration and reset for each test iteration. If in your test plan the same user iterates multiple times, then you should set this to false.\n\nhttpclient.reset_state_on_thread_group_iteration=true\n\nNote: this does not apply to the Java HTTP implementation.\n\nJMeter defaults to the SSL protocol level TLS. If the server needs a different level, e.g. SSLv3, change the JMeter property, for example:\n\nhttps.default.protocol=SSLv3\n\nJMeter also allows one to enable additional protocols, by changing the property https.socket.protocols.\n\nIf the request uses cookies, then you will also need an HTTP Cookie Manager. You can add either of these elements to the Thread Group or the HTTP Request. If you have more than one HTTP Request that needs authorizations or cookies, then add the elements to the Thread Group. That way, all HTTP Request controllers will share the same Authorization Manager and Cookie Manager elements.\n\nIf the request uses a technique called \"URL Rewriting\" to maintain sessions, then see section 6.1 Handling User Sessions With URL Rewriting for additional configuration steps.\n\nParameters ¶\n\nAttribute\n\nDescription\n\nRequired\n\nName\n\nDescriptive name for this sampler that is shown in the tree.\n\nNo\n\nServer\n\nDomain name or IP address of the web server, e.g. www.example.com. [Do not include the http:// prefix.] Note: If the \"Host\" header is defined in a Header Manager, then this will be used as the virtual host name.\n\nServer is required, unless:\n\nit is provided by HTTP Request Defaults\n\nor a full URL including scheme, host and port (scheme://host:port) is set in Path field\n\nNo\n\nPort\n\nPort the web server is listening to. Default: 80\n\nNo\n\nConnect Timeout\n\nConnection Timeout. Number of milliseconds to wait for a connection to open.\n\nNo\n\nResponse Timeout\n\nResponse Timeout. Number of milliseconds to wait for a response. Note that this applies to each wait for a response. If the server response is sent in several chunks, the overall elapsed time may be longer than the timeout.\n\nA Duration Assertion can be used to detect responses that take too long to complete.\n\nNo\n\nServer (proxy)\n\nHostname or IP address of a proxy server to perform request. [Do not include the http:// prefix.]\n\nNo\n\nPort\n\nPort the proxy server is listening to.\n\nNo, unless proxy hostname is specified\n\nUsername\n\n(Optional) username for proxy server.\n\nNo\n\nPassword\n\n(Optional) password for proxy server. (N.B. this is stored unencrypted in the test plan)\n\nNo\n\nImplementation\n\nJava, HttpClient4. If not specified (and not defined by HTTP Request Defaults), the default depends on the value of the JMeter property jmeter.httpsampler, failing that, the HttpClient4 implementation is used.\n\nNo\n\nProtocol\n\nHTTP, HTTPS or FILE. Default: HTTP\n\nNo\n\nMethod\n\nGET, POST, HEAD, TRACE, OPTIONS, PUT, DELETE, PATCH (not supported for JAVA implementation). With HttpClient4, the following methods related to WebDav are also allowed: COPY, LOCK, MKCOL, MOVE, PROPFIND, PROPPATCH, UNLOCK, REPORT, MKCALENDAR, SEARCH.\n\nMore methods can be pre-defined for the HttpClient4 by using the JMeter property httpsampler.user_defined_methods.\n\nYes\n\nContent Encoding\n\nContent encoding to be used (for POST, PUT, PATCH and FILE). This is the character encoding to be used, and is not related to the Content-Encoding HTTP header.\n\nNo\n\nRedirect Automatically\n\nSets the underlying http protocol handler to automatically follow redirects, so they are not seen by JMeter, and thus will not appear as samples. Should only be used for GET and HEAD requests. The HttpClient sampler will reject attempts to use it for POST or PUT.\n\nWarning: see below for information on cookie and header handling.\n\nNo\n\nFollow Redirects\n\nThis only has any effect if \"Redirect Automatically\" is not enabled. If set, the JMeter sampler will check if the response is a redirect and follow it if so. The initial redirect and further responses will appear as additional samples. The URL and data fields of the parent sample will be taken from the final (non-redirected) sample, but the parent byte count and elapsed time include all samples. The latency is taken from the initial response. Note that the HttpClient sampler may log the following message:\n\n\"Redirect requested but followRedirects is disabled\"\n\nThis can be ignored.\n\nJMeter will collapse paths of the form '/../segment' in both absolute and relative redirect URLs. For example http://host/one/../two will be collapsed into http://host/two. If necessary, this behaviour can be suppressed by setting the JMeter property httpsampler.redirect.removeslashdotdot=false\n\nNo\n\nUse KeepAlive\n\nJMeter sets the Connection: keep-alive header. This does not work properly with the default HTTP implementation, as connection re-use is not under user-control. It does work with the Apache HttpComponents HttpClient implementations.\n\nNo\n\nUse multipart/form-data for HTTP POST\n\nUse a multipart/form-data or application/x-www-form-urlencoded post request\n\nNo\n\nBrowser-compatible headers\n\nWhen using multipart/form-data, this suppresses the Content-Type and Content-Transfer-Encoding headers; only the Content-Disposition header is sent.\n\nNo\n\nPath\n\nThe path to resource (for example, /servlets/myServlet). If the resource requires query string parameters, add them below in the \"Send Parameters With the Request\" section.\n\nAs a special case, if the path starts with \"http://\" or \"https://\" then this is used as the full URL.\n\nIn this case, the server, port and protocol fields are ignored; parameters are also ignored for GET and DELETE methods. Also please note that the path is not encoded - apart from replacing spaces with %20 - so unsafe characters may need to be encoded to avoid errors such as URISyntaxException.\n\nNo\n\nSend Parameters With the Request\n\nThe query string will be generated from the list of parameters you provide. Each parameter has a name and value, the options to encode the parameter, and an option to include or exclude an equals sign (some applications don't expect an equals sign when the value is the empty string). The query string will be generated in the correct fashion, depending on the choice of \"Method\" you made (i.e. if you chose GET or DELETE, the query string will be appended to the URL, if POST or PUT, then it will be sent separately). Also, if you are sending a file using a multipart form, the query string will be created using the multipart form specifications. See below for some further information on parameter handling.\n\nAdditionally, you can specify whether each parameter should be URL encoded. If you are not sure what this means, it is probably best to select it. If your values contain characters such as the following then encoding is usually required.:\n\nASCII Control Chars\n\nNon-ASCII characters\n\nReserved characters:URLs use some characters for special use in defining their syntax. When these characters are not used in their special role inside a URL, they need to be encoded, example: '$', '&', '+', ',' , '/', ':', ';', '=', '?', '@'\n\nUnsafe characters: Some characters present the possibility of being misunderstood within URLs for various reasons. These characters should also always be encoded, example: ' ', '<', '>', '#', '%', …\n\nNo\n\nFile Path:\n\nName of the file to send. If left blank, JMeter does not send a file, if filled in, JMeter automatically sends the request as a multipart form request.\n\nWhen MIME Type is empty, JMeter will try to guess the MIME type of the given file.\n\nIf it is a POST or PUT or PATCH request and there is a single file whose 'Parameter name' attribute (below) is omitted, then the file is sent as the entire body of the request, i.e. no wrappers are added. This allows arbitrary bodies to be sent. This functionality is present for POST requests, and also for PUT requests. See below for some further information on parameter handling.\n\nNo\n\nParameter name:\n\nValue of the \"name\" web request parameter.\n\nNo\n\nMIME Type\n\nMIME type (for example, text/plain). If it is a POST or PUT or PATCH request and either the 'name' attribute (below) are omitted or the request body is constructed from parameter values only, then the value of this field is used as the value of the content-type request header.\n\nNo\n\nRetrieve All Embedded Resources from HTML Files\n\nTell JMeter to parse the HTML file and send HTTP/HTTPS requests for all images, Java applets, JavaScript files, CSSs, etc. referenced in the file. See below for more details.\n\nNo\n\nSave response as MD5 hash?\n\nIf this is selected, then the response is not stored in the sample result. Instead, the 32 character MD5 hash of the data is calculated and stored instead. This is intended for testing large amounts of data.\n\nNo\n\nURLs must match:\n\nIf present, this must be a regular expression that is used to match against any embedded URLs found. So if you only want to download embedded resources from http://example.invalid/, use the expression: http://example\\.invalid/.*\n\nNo\n\nURLs must not match:\n\nIf present, this must be a regular expression that is used to filter out any embedded URLs found. So if you don't want to download PNG or SVG files from any source, use the expression: .*\\.(?i:svg|png)\n\nNo\n\nUse concurrent pool\n\nUse a pool of concurrent connections to get embedded resources.\n\nNo\n\nSize\n\nPool size for concurrent connections used to get embedded resources.\n\nNo\n\nSource address type\n\n[Only for HTTP Request with HTTPClient implementation]\n\nTo distinguish the source address value, select the type of these:\n\nSelect IP/Hostname to use a specific IP address or a (local) hostname\n\nSelect Device to pick the first available address for that interface which this may be either IPv4 or IPv6\n\nSelect Device IPv4 to select the IPv4 address of the device name (like eth0, lo, em0, etc.)\n\nSelect Device IPv6 to select the IPv6 address of the device name (like eth0, lo, em0, etc.)\n\nNo\n\nSource address field\n\n[Only for HTTP Request with HTTPClient implementation]\n\nThis property is used to enable IP Spoofing. It overrides the default local IP address for this sample. The JMeter host must have multiple IP addresses (i.e. IP aliases, network interfaces, devices). The value can be a host name, IP address, or a network interface device such as \"eth0\" or \"lo\" or \"wlan0\".\n\nIf the property httpclient.localaddress is defined, that is used for all HttpClient requests.\n\nNo\n\nThe following parameters are available only for GraphQL HTTP Request:\n\nParameters ¶\n\nAttribute\n\nDescription\n\nRequired\n\nQuery\n\nGraphQL query (or mutation) statement.\n\nYes\n\nVariables\n\nGraphQL query (or mutation) variables in a valid JSON string. Note: If the input string is not a valid JSON string, this will be ignored with an ERROR log.\n\nNo\n\nOperation Name\n\nOptional GraphQL operation name when making a request for multi-operation documents.\n\nNo\n\nWhen using Automatic Redirection, cookies are only sent for the initial URL. This can cause unexpected behaviour for web-sites that redirect to a local server. E.g. if www.example.com redirects to www.example.co.uk. In this case the server will probably return cookies for both URLs, but JMeter will only see the cookies for the last host, i.e. www.example.co.uk. If the next request in the test plan uses www.example.com, rather than www.example.co.uk, it will not get the correct cookies. Likewise, Headers are sent for the initial request, and won't be sent for the redirect. This is generally only a problem for manually created test plans, as a test plan created using a recorder would continue from the redirected URL.\n\nParameter Handling:\n\nFor the POST and PUT method, if there is no file to send, and the name(s) of the parameter(s) are omitted, then the body is created by concatenating all the value(s) of the parameters. Note that the values are concatenated without adding any end-of-line characters. These can be added by using the __char() function in the value fields. This allows arbitrary bodies to be sent. The values are encoded if the encoding flag is set. See also the MIME Type above how you can control the content-type request header that is sent.\n\nFor other methods, if the name of the parameter is missing, then the parameter is ignored. This allows the use of optional parameters defined by variables.\n\nYou have the option to switch to Body Data tab when a request has only unnamed parameters (or no parameters at all). This option is useful in the following cases (amongst others):\n\nGWT RPC HTTP Request\n\nJSON REST HTTP Request\n\nXML REST HTTP Request\n\nSOAP HTTP Request\n\nNote that once you leave the Tree node, you cannot switch back to the parameter tab unless you clear the Body Data tab from its data.\n\nIn Body Data mode, each line will be sent with CRLF appended, apart from the last line. To send a CRLF after the last line of data, just ensure that there is an empty line following it. (This cannot be seen, except by noting whether the cursor can be placed on the subsequent line.)\n\nMethod Handling:\n\nThe GET, DELETE, POST, PUT and PATCH request methods work similarly, except that as of 3.1, only POST method supports multipart requests or file upload. The PUT and PATCH method body must be provided as one of the following:\n\ndefine the body as a file with empty Parameter name field; in which case the MIME Type is used as the Content-Type\n\ndefine the body as parameter value(s) with no name\n\nuse the Body Data tab\n\nThe GET, DELETE and POST methods have an additional way of passing parameters by using the Parameters tab. GET, DELETE, PUT and PATCH require a Content-Type. If not using a file, attach a Header Manager to the sampler and define the Content-Type there.\n\nJMeter scan responses from embedded resources. It uses the property HTTPResponse.parsers, which is a list of parser ids, e.g. htmlParser, cssParser and wmlParser. For each id found, JMeter checks two further properties:\n\nid.types - a list of content types\n\nid.className - the parser to be used to extract the embedded resources\n\nSee jmeter.properties file for the details of the settings. If the HTTPResponse.parser property is not set, JMeter reverts to the previous behaviour, i.e. only text/html responses will be scanned\n\nEmulating slow connections:\n\nHttpClient4 and Java Sampler support emulation of slow connections; see the following entries in jmeter.properties:\n\n# Define characters per second > 0 to emulate slow connections #httpclient.socket.http.cps=0 #httpclient.socket.https.cps=0\n\nHowever the Java sampler only supports slow HTTPS connections.\n\nResponse size calculation\n\nThe Java implementation does not include transport overhead such as chunk headers in the response body size.\n\nThe HttpClient4 implementation does include the overhead in the response body size, so the value may be greater than the number of bytes in the response content.\n\nRetry handling\n\nBy default retry has been set to 0 for both HttpClient4 and Java implementations, meaning no retry is attempted.\n\nFor HttpClient4, the retry count can be overridden by setting the relevant JMeter property, for example:\n\nhttpclient4.retrycount=3\n\nWith HC4 Implementation, retry will be done on Idempotent Http Methods by default. If you want to retry for all methods, then set property\n\nhttpclient4.request_sent_retry_enabled=true\n\nNote that the Java implementation does not retry neither by default, you can change this by setting\n\nhttp.java.sampler.retries=3\n\nNote: Certificates does not conform to algorithm constraints\n\nYou may encounter the following error: java.security.cert.CertificateException: Certificates does not conform to algorithm constraints if you run a HTTPS request on a web site with a SSL certificate (itself or one of SSL certificates in its chain of trust) with a signature algorithm using MD2 (like md2WithRSAEncryption) or with a SSL certificate with a size lower than 1024 bits.\n\nThis error is related to increased security in Java 8.\n\nTo allow you to perform your HTTPS request, you can downgrade the security of your Java installation by editing the Java jdk.certpath.disabledAlgorithms property. Remove the MD2 value or the constraint on size, depending on your case.\n\nThis property is in this file:\n\nJAVA_HOME/jre/lib/security/java.security\n\nSee Bug 56357 for details.\n\nHTTP(S) Test Script Recorder (was: HTTP Proxy Server ) ¶\n\nThe HTTP(S) Test Script Recorder allows JMeter to intercept and record your actions while you browse your web application with your normal browser. JMeter will create test sample objects and store them directly into your test plan as you go (so you can view samples interactively while you make them).\n\nEnsure you read this wiki page to setup correctly JMeter.\n\nTo use the recorder, add the HTTP(S) Test Script Recorder element. Right-click on the Test Plan element to get the Add menu: (Add → Non-Test Elements → HTTP(S) Test Script Recorder ).\n\nThe recorder is implemented as an HTTP(S) proxy server. You need to set up your browser use the proxy for all HTTP and HTTPS requests.\n\nDo not use JMeter as the proxy for any other request types - FTP, etc. - as JMeter cannot handle them.\n\nIdeally use private browsing mode when recording the session. This should ensure that the browser starts with no stored cookies, and prevents certain changes from being saved. For example, Firefox does not allow certificate overrides to be saved permanently.\n\nHTTPS recording and certificates\n\nHTTPS connections use certificates to authenticate the connection between the browser and the web server. When connecting via HTTPS, the server presents the certificate to the browser. To authenticate the certificate, the browser checks that the server certificate is signed by a Certificate Authority (CA) that is linked to one of its in-built root CAs.\n\nBrowsers also check that the certificate is for the correct host or domain, and that it is valid and not expired.\n\nIf any of the browser checks fail, it will prompt the user who can then decide whether to allow the connection to proceed.\n\nJMeter needs to use its own certificate to enable it to intercept the HTTPS connection from the browser. Effectively JMeter has to pretend to be the target server.\n\nJMeter will generate its own certificate(s). These are generated with a validity period defined by the property proxy.cert.validity, default 7 days, and random passwords. If JMeter detects that it is running under Java 8 or later, it will generate certificates for each target server as necessary (dynamic mode) unless the following property is defined: proxy.cert.dynamic_keys=false. When using dynamic mode, the certificate will be for the correct host name, and will be signed by a JMeter-generated CA certificate. By default, this CA certificate won't be trusted by the browser, however it can be installed as a trusted certificate. Once this is done, the generated server certificates will be accepted by the browser. This has the advantage that even embedded HTTPS resources can be intercepted, and there is no need to override the browser checks for each new server.\n\nBrowsers don't prompt for embedded resources. So with earlier versions, embedded resources would only be downloaded for servers that were already 'known' to the browser\n\nUnless a keystore is provided (and you define the property proxy.cert.alias), JMeter needs to use the keytool application to create the keystore entries. JMeter includes code to check that keytool is available by looking in various standard places. If JMeter is unable to find the keytool application, it will report an error. If necessary, the system property keytool.directory can be used to tell JMeter where to find keytool. This should be defined in the file system.properties.\n\nThe JMeter certificates are generated (if necessary) when the Start button is pressed.\n\nCertificate generation can take some while, during which time the GUI will be unresponsive.\n\nThe cursor is changed to an hour-glass whilst this is happening. When certificate generation is complete, the GUI will display a pop-up dialogue containing the details of the certificate for the root CA. This certificate needs to be installed by the browser in order for it to accept the host certificates generated by JMeter; see below for details.\n\nIf necessary, you can force JMeter to regenerate the keystore (and the exported certificates - ApacheJMeterTemporaryRootCA[.usr|.crt]) by deleting the keystore file proxyserver.jks from the JMeter directory.\n\nThis certificate is not one of the certificates that browsers normally trust, and will not be for the correct host.\n\nAs a consequence:\n\nThe browser should display a dialogue asking if you want to accept the certificate or not. For example:\n\n1) The server's name \"www.example.com\" does not match the certificate's name \"_ JMeter Root CA for recording (INSTALL ONLY IF IT S YOURS)\". Somebody may be trying to eavesdrop on you. 2) The certificate for \"_ JMeter Root CA for recording (INSTALL ONLY IF IT S YOURS)\" is signed by the unknown Certificate Authority \"_ JMeter Root CA for recording (INSTALL ONLY IF IT S YOURS)\". It is not possible to verify that this is a valid certificate.\n\nYou will need to accept the certificate in order to allow the JMeter Proxy to intercept the SSL traffic in order to record it. However, do not accept this certificate permanently; it should only be accepted temporarily. Browsers only prompt this dialogue for the certificate of the main URL, not for the resources loaded in the page, such as images, CSS or JavaScript files hosted on a secured external CDN. If you have such resources (gmail has for example), you'll have to first browse manually to these other domains in order to accept JMeter's certificate for them. Check in jmeter.log for secure domains that you need to register certificate for.\n\nIf the browser has already registered a validated certificate for this domain, the browser will detect JMeter as a security breach and will refuse to load the page. If so, you have to remove the trusted certificate from your browser's keystore.\n\nVersions of JMeter from 2.10 onwards still support this method, and will continue to do so if you define the following property: proxy.cert.alias The following properties can be used to change the certificate that is used:\n\nproxy.cert.directory - the directory in which to find the certificate (default = JMeter bin/)\n\nproxy.cert.file - name of the keystore file (default \"proxyserver.jks\")\n\nproxy.cert.keystorepass - keystore password (default \"password\") [Ignored if using JMeter certificate]\n\nproxy.cert.keypassword - certificate key password (default \"password\") [Ignored if using JMeter certificate]\n\nproxy.cert.type - the certificate type (default \"JKS\") [Ignored if using JMeter certificate]\n\nproxy.cert.factory - the factory (default \"SunX509\") [Ignored if using JMeter certificate]\n\nproxy.cert.alias - the alias for the key to be used. If this is defined, JMeter does not attempt to generate its own certificate(s).\n\nproxy.ssl.protocol - the protocol to be used (default \"SSLv3\")\n\nIf your browser currently uses a proxy (e.g. a company intranet may route all external requests via a proxy), then you need to tell JMeter to use that proxy before starting JMeter, using the command-line options -H and -P. This setting will also be needed when running the generated test plan.\n\nInstalling the JMeter CA certificate for HTTPS recording\n\nAs mentioned above, when run under Java 8, JMeter can generate certificates for each server. For this to work smoothly, the root CA signing certificate used by JMeter needs to be trusted by the browser. The first time that the recorder is started, it will generate the certificates if necessary. The root CA certificate is exported into a file with the name ApacheJMeterTemporaryRootCA in the current launch directory. When the certificates have been set up, JMeter will show a dialog with the current certificate details. At this point, the certificate can be imported into the browser, as per the instructions below.\n\nNote that once the root CA certificate has been installed as a trusted CA, the browser will trust any certificates signed by it. Until such time as the certificate expires or the certificate is removed from the browser, it will not warn the user that the certificate is being relied upon. So anyone that can get hold of the keystore and password can use the certificate to generate certificates which will be accepted by any browsers that trust the JMeter root CA certificate. For this reason, the password for the keystore and private keys are randomly generated and a short validity period used. The passwords are stored in the local preferences area. Please ensure that only trusted users have access to the host with the keystore.\n\nThe popup that displays once you start the Recorder is an informational popup: Just click ok and proceed further.\n\nInstalling the certificate in Firefox\n\nChoose the following options:\n\nTools / Options\n\nAdvanced / Certificates\n\nView Certificates\n\nAuthorities\n\nImport …\n\nBrowse to the JMeter launch directory, and click on the file ApacheJMeterTemporaryRootCA.crt, press Open\n\nClick View and check that the certificate details agree with the ones displayed by the JMeter Test Script Recorder\n\nIf OK, select \"Trust this CA to identify web sites\", and press OK\n\nClose dialogs by pressing OK as necessary\n\nInstalling the certificate in Chrome or Internet Explorer\n\nBoth Chrome and Internet Explorer use the same trust store for certificates.\n\nBrowse to the JMeter launch directory, and click on the file ApacheJMeterTemporaryRootCA.crt, and open it\n\nClick on the \"Details\" tab and check that the certificate details agree with the ones displayed by the JMeter Test Script Recorder\n\nIf OK, go back to the \"General\" tab, and click on \"Install Certificate …\" and follow the Wizard prompts\n\nInstalling the certificate in Opera\n\nTools / Preferences / Advanced / Security\n\nManage Certificates …\n\nSelect \"Intermediate\" tab, click \"Import …\"\n\nBrowse to the JMeter launch directory, and click on the file ApacheJMeterTemporaryRootCA.usr, and open it\n\nParameters ¶\n\nAttribute\n\nDescription\n\nRequired\n\nName\n\nDescriptive name for this element that is shown in the tree.\n\nNo\n\nPort\n\nThe port that the HTTP(S) Test Script Recorder listens to. 8888 is the default, but you can change it.\n\nYes\n\nHTTPS Domains\n\nList of domain (or host) names for HTTPS. Use this to pre-generate certificates for all servers you wish to record.\n\nFor example, *.example.com,*.subdomain.example.com\n\nNote that wildcard domains only apply to one level, i.e. abc.subdomain.example.com matches *.subdomain.example.com but not *.example.com\n\nNo\n\nTarget Controller\n\nThe controller where the proxy will store the generated samples. By default, it will look for a Recording Controller and store them there wherever it is.\n\nYes\n\nGrouping\n\nWhether to group samplers for requests from a single \"click\" (requests received without significant time separation), and how to represent that grouping in the recording:\n\nDo not group samplers - store all recorded samplers sequentially, without any grouping.\n\nAdd separators between groups - add a controller named \"--------------\" to create a visual separation between the groups. Otherwise the samplers are all stored sequentially.\n\nPut each group in a new controller - create a new Simple Controller for each group, and store all samplers for that group in it.\n\nStore 1st sampler of each group only - only the first request in each group will be recorded. The \"Follow Redirects\" and \"Retrieve All Embedded Resources …\" flags will be turned on in those samplers.\n\nPut each group in a new transaction controller - create a new Transaction Controller for each group, and store all samplers for that group in it.\n\nThe property proxy.pause determines the minimum gap that JMeter needs between requests to treat them as separate \"clicks\". The default is 5000 (milliseconds) i.e. 5 seconds. If you are using grouping, please ensure that you leave the required gap between clicks.\n\nYes\n\nCapture HTTP Headers\n\nShould headers be added to the plan? If specified, a Header Manager will be added to each HTTP Sampler. The Proxy server always removes Cookie and Authorization headers from the generated Header Managers. By default it also removes If-Modified-Since and If-None-Match headers. These are used to determine if the browser cache items are up to date; when recording one normally wants to download all the content. To change which additional headers are removed, define the JMeter property proxy.headers.remove as a comma-separated list of headers.\n\nYes\n\nAdd Assertions\n\nAdd a blank assertion to each sampler?\n\nYes\n\nRegex Matching\n\nUse Regex Matching when replacing variables? If checked replacement will use word boundaries, i.e. it will only replace word matching values of variable, not part of a word. A word boundary follows Perl5 definition and is equivalent to \\b. More information below in the paragraph about \"User Defined Variable replacement\".\n\nYes\n\nPrefix/Transaction name\n\nAdd a prefix to sampler name during recording (Prefix mode). Or replace sampler name by user chosen name (Transaction name)\n\nNo\n\nNaming scheme\n\nSelect the naming scheme for sampler names during recording. Default is Transaction name\n\nNo\n\nNaming format\n\nIf Use format string is selected as naming scheme, a freestyle format can be given. Placeholders for the transaction name, scheme, host, port, path and counter can be given by #{name}, #{scheme}, #{host}, #{port}, #{path}, #{url} and #{counter}. A simple format could be \"#{name}-#{counter}\", which would be equivalent to the numbered default naming scheme. For more complex formatting Java formatting for MessageFormat can be used, as in \"#{counter,number,000}: #{name}-#{path}\", which would print the counter filled with up to three zeroes. Note that scheme is called protocol in the sampler GUI and host is called domain. Default is an empty string.\n\nNo\n\nCounter start value\n\nCan be used to reset the counter to a given value. Note, that the next sample will first increment and then use the value. If the first sampler should start with 1, reset the counter to 0.\n\nNo\n\nCreate new transaction after request (ms)\n\nInactivity time between two requests needed to consider them in two separate groups.\n\nNo\n\nType\n\nWhich type of sampler to generate (the HTTPClient default or Java)\n\nYes\n\nRedirect Automatically\n\nSet Redirect Automatically in the generated samplers?\n\nYes\n\nFollow Redirects\n\nSet Follow Redirects in the generated samplers?\n\nNote: see \"Recording and redirects\" section below for important information.\n\nYes\n\nUse Keep-Alive\n\nSet Use Keep-Alive in the generated samplers?\n\nYes\n\nRetrieve all Embedded Resources\n\nSet Retrieve all Embedded Resources in the generated samplers?\n\nYes\n\nContent Type filter\n\nFilter the requests based on the content-type - e.g. \"text/html [;charset=utf-8 ]\". The fields are regular expressions which are checked to see if they are contained in the content-type. [Does not have to match the entire field]. The include filter is checked first, then the exclude filter. Samples which are filtered out will not be stored.\n\nNote: this filtering is applied to the content type of the response\n\nNo\n\nPatterns to Include\n\nRegular expressions that are matched against the full URL that is sampled. Allows filtering of requests that are recorded. All requests pass through, but only those that meet the requirements of the Include/Exclude fields are recorded. If both Include and Exclude are left empty, then everything is recorded (which can result in dozens of samples recorded for each page, as images, stylesheets, etc. are recorded).\n\nIf there is at least one entry in the Include field, then only requests that match one or more Include patterns are recorded\n\n.\n\nNo\n\nPatterns to Exclude\n\nRegular expressions that are matched against the URL that is sampled.\n\nAny requests that match one or more Exclude pattern are not recorded\n\n.\n\nNo\n\nNotify Child Listeners of filtered samplers\n\nNotify Child Listeners of filtered samplers\n\nAny response that match one or more Exclude pattern is not delivered to Child Listeners (View Results Tree)\n\n.\n\nNo\n\nStart Button\n\nStart the proxy server. JMeter writes the following message to the console once the proxy server has started up and is ready to take requests: \"Proxy up and running!\".\n\nN/A\n\nStop Button\n\nStop the proxy server.\n\nN/A\n\nRestart Button\n\nStops and restarts the proxy server. This is useful when you change/add/delete an include/exclude filter expression.\n\nN/A\n\nRecording and redirects\n\nDuring recording, the browser will follow a redirect response and generate an additional request. The Proxy will record both the original request and the redirected request (subject to whatever exclusions are configured). The generated samples have \"Follow Redirects\" selected by default, because that is generally better.\n\nRedirects may depend on the original request, so repeating the originally recorded sample may not always work.\n\nNow if JMeter is set to follow the redirect during replay, it will issue the original request, and then replay the redirect request that was recorded. To avoid this duplicate replay, JMeter tries to detect when a sample is the result of a previous redirect. If the current response is a redirect, JMeter will save the redirect URL. When the next request is received, it is compared with the saved redirect URL and if there is a match, JMeter will disable the generated sample. It also adds comments to the redirect chain. This assumes that all the requests in a redirect chain will follow each other without any intervening requests. To disable the redirect detection, set the property proxy.redirect.disabling=false\n\nIncludes and Excludes\n\nThe include and exclude patterns are treated as regular expressions (using Jakarta ORO). They will be matched against the host name, port (actual or implied), path and query (if any) of each browser request. If the URL you are browsing is\n\n\"http://localhost/jmeter/index.html?username=xxxx\",\n\nthen the regular expression will be tested against the string:\n\n\"localhost:80/jmeter/index.html?username=xxxx\".\n\nThus, if you want to include all .html files, your regular expression might look like:\n\n\".*\\.html(\\?.*)?\" - or \".*\\.html if you know that there is no query string or you only want html pages without query strings.\n\nIf there are any include patterns, then the URL must match at least one of the patterns , otherwise it will not be recorded. If there are any exclude patterns, then the URL must not match any of the patterns , otherwise it will not be recorded. Using a combination of includes and excludes, you should be able to record what you are interested in and skip what you are not.\n\nN.B. the string that is matched by the regular expression must be the same as the whole host+path string.\n\nThus \"\\.html\" will not match localhost:80/index.html\n\nCapturing binary POST data\n\nJMeter is able to capture binary POST data. To configure which content-types are treated as binary, update the JMeter property proxy.binary.types. The default settings are as follows:\n\n# These content-types will be handled by saving the request in a file: proxy.binary.types=application/x-amf,application/x-java-serialized-object # The files will be saved in this directory: proxy.binary.directory=user.dir # The files will be created with this file filesuffix: proxy.binary.filesuffix=.binary\n\nAdding timers\n\nIt is also possible to have the proxy add timers to the recorded script. To do this, create a timer directly within the HTTP(S) Test Script Recorder component. The proxy will place a copy of this timer into each sample it records, or into the first sample of each group if you're using grouping. This copy will then be scanned for occurrences of variable ${T} in its properties, and any such occurrences will be replaced by the time gap from the previous sampler recorded (in milliseconds).\n\nWhen you are ready to begin, hit \"start\".\n\nYou will need to edit the proxy settings of your browser to point at the appropriate server and port, where the server is the machine JMeter is running on, and the port # is from the Proxy Control Panel shown above.\n\nWhere Do Samples Get Recorded?\n\nJMeter places the recorded samples in the Target Controller you choose. If you choose the default option \"Use Recording Controller\", they will be stored in the first Recording Controller found in the test object tree (so be sure to add a Recording Controller before you start recording).\n\nIf the Proxy does not seem to record any samples, this could be because the browser is not actually using the proxy. To check if this is the case, try stopping the proxy. If the browser still downloads pages, then it was not sending requests via the proxy. Double-check the browser options. If you are trying to record from a server running on the same host, then check that the browser is not set to \"Bypass proxy server for local addresses\" (this example is from IE7, but there will be similar options for other browsers). If JMeter does not record browser URLs such as http://localhost/ or http://127.0.0.1/, try using the non-loopback hostname or IP address, e.g. http://myhost/ or http://192.168.0.2/.\n\nHandling of HTTP Request Defaults\n\nIf the HTTP(S) Test Script Recorder finds enabled HTTP Request Defaults directly within the controller where samples are being stored, or directly within any of its parent controllers, the recorded samples will have empty fields for the default values you specified. You may further control this behaviour by placing an HTTP Request Defaults element directly within the HTTP(S) Test Script Recorder, whose non-blank values will override those in the other HTTP Request Defaults. See Best Practices with the HTTP(S) Test Script Recorder for more info.\n\nUser Defined Variable replacement\n\nSimilarly, if the HTTP(S) Test Script Recorder finds User Defined Variables (UDV) directly within the controller where samples are being stored, or directly within any of its parent controllers, the recorded samples will have any occurrences of the values of those variables replaced by the corresponding variable. Again, you can place User Defined Variables directly within the HTTP(S) Test Script Recorder to override the values to be replaced. See Best Practices with the Test Script Recorder for more info.\n\nPlease note that matching is case-sensitive.\n\nReplacement by Variables: by default, the Proxy server looks for all occurrences of UDV values. If you define the variable WEB with the value www, for example, the string www will be replaced by ${WEB} wherever it is found. To avoid this happening everywhere, set the \"Regex Matching\" check-box. This tells the proxy server to treat values as Regexes (using the perl5 compatible regex matchers provided by ORO).\n\nIf \"Regex Matching\" is selected every variable will be compiled into a perl compatible regex enclosed in \\b( and )\\b. That way each match will start and end at a word boundary.\n\nNote that the boundary characters are not part of the matching group, e.g. n.* to match name out of You can call me 'name'.\n\nIf you don't want your regex to be enclosed with those boundary matchers, you have to enclose your regex within parens, e.g ('.*?') to match 'name' out of You can call me 'name'.\n\nThe variables will be checked in random order. So ensure, that the potential matches don't overlap. Overlapping matchers would be .* (which matches anything) and www (which matches www only). Non-overlapping matchers would be a+ (matches a sequence of a's) and b+ (matches a sequence of b's).\n\nIf you want to match a whole string only, enclose it in (^ and $), e.g. (^thus$). The parens are necessary, since the normally added boundary characters will prevent ^ and $ to match.\n\nIf you want to match /images at the start of a string only, use the value (^/images). Jakarta ORO also supports zero-width look-ahead, so one can match /images/… but retain the trailing / in the output by using (^/images(?=/)).\n\nNote that the current version of Jakarta ORO does not support look-behind - i.e. (?<=…) or (?<!…).\n\nLook out for overlapping matchers. For example the value .* as a regex in a variable named regex will partly match a previous replaced variable, which will result in something like ${{regex}, which is most probably not the desired result.\n\nIf there are any problems interpreting any variables as patterns, these are reported in jmeter.log, so be sure to check this if UDVs are not working as expected.\n\nWhen you are done recording your test samples, stop the proxy server (hit the \"stop\" button). Remember to reset your browser's proxy settings. Now, you may want to sort and re-order the test script, add timers, listeners, a cookie manager, etc.\n\nHow can I record the server's responses too?\n\nJust place a View Results Tree listener as a child of the HTTP(S) Test Script Recorder and the responses will be displayed. You can also add a Save Responses to a file Post-Processor which will save the responses to files.\n\nAssociating requests with responses\n\nIf you define the property proxy.number.requests=true JMeter will add a number to each sampler and each response. Note that there may be more responses than samplers if excludes or includes have been used. Responses that have been excluded will have labels enclosed in [ and ], for example [23 /favicon.ico]\n\nCookie Manager\n\nIf the server you are testing against uses cookies, remember to add an HTTP Cookie Manager to the test plan when you have finished recording it. During recording, the browser handles any cookies, but JMeter needs a Cookie Manager to do the cookie handling during a test run. The JMeter Proxy server passes on all cookies sent by the browser during recording, but does not save them to the test plan because they are likely to change between runs.\n\nAuthorization Manager\n\nThe HTTP(S) Test Script Recorder grabs \"Authentication\" header, tries to compute the Auth Policy. If Authorization Manager was added to target controller manually, HTTP(S) Test Script Recorder will find it and add authorization (matching ones will be removed). Otherwise Authorization Manager will be added to target controller with authorization object. You may have to fix automatically computed values after recording.\n\nUploading files\n\nSome browsers (e.g. Firefox and Opera) don't include the full name of a file when uploading files. This can cause the JMeter proxy server to fail. One solution is to ensure that any files to be uploaded are in the JMeter working directory, either by copying the files there or by starting JMeter in the directory containing the files.\n\nRecording HTTP Based Non Textual Protocols not natively available in JMeter\n\nYou may have to record an HTTP protocol that is not handled by default by JMeter (Custom Binary Protocol, Adobe Flex, Microsoft Silverlight, … ). Although JMeter does not provide a native proxy implementation to record these protocols, you have the ability to record these protocols by implementing a custom SamplerCreator. This Sampler Creator will translate the binary format into a HTTPSamplerBase subclass that can be added to the JMeter Test Case. For more details see \"Extending JMeter\"."
    }
}