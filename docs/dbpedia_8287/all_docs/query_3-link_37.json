{
    "id": "dbpedia_8287_3",
    "rank": 37,
    "data": {
        "url": "https://www.netguru.com/blog/kotlin-multiplatform-pros-and-cons",
        "read_more_link": "",
        "language": "en",
        "title": "Pros and Cons of Developing an App in Kotlin Multiplatform",
        "top_image": "https://www.netguru.com/hubfs/KMM%20copy.png",
        "meta_img": "https://www.netguru.com/hubfs/KMM%20copy.png",
        "images": [
            "https://www.netguru.com/hubfs/_N23/assets/logos/netguru.svg",
            "https://www.netguru.com/hs-fs/hubfs/bartek.jpeg?width=50&height=50&name=bartek.jpeg 50w, https://www.netguru.com/hs-fs/hubfs/bartek.jpeg?width=100&height=100&name=bartek.jpeg 100w",
            "https://www.netguru.com/hs-fs/hubfs/service_design_netguru-min.jpg?width=1536&height=1024&name=service_design_netguru-min.jpg 1536w, https://www.netguru.com/hs-fs/hubfs/service_design_netguru-min.jpg?width=1000&height=666&name=service_design_netguru-min.jpg 1000w, https://www.netguru.com/hs-fs/hubfs/service_design_netguru-min.jpg?width=2000&height=1333&name=service_design_netguru-min.jpg 2000w",
            "https://no-cache.hubspot.com/cta/default/493098/interactive-173688591016.png",
            "https://www.netguru.com/hs-fs/hubfs/bartek.jpeg?width=240&height=240&name=bartek.jpeg 240w, https://www.netguru.com/hs-fs/hubfs/bartek.jpeg?width=480&height=480&name=bartek.jpeg 480w",
            "https://no-cache.hubspot.com/cta/default/493098/0270d0b0-91bf-4855-ae41-f80e8d3dfee2.png",
            "https://www.netguru.com/hs-fs/hubfs/innovation_3.jpg?width=362&height=241&name=innovation_3.jpg 362w, https://www.netguru.com/hs-fs/hubfs/innovation_3.jpg?width=724&height=482&name=innovation_3.jpg 724w",
            "https://www.netguru.com/hs-fs/hubfs/Group%20of%20business%20people%20using%20electronic%20devices%20at%20work-3.jpeg?width=362&height=241&name=Group%20of%20business%20people%20using%20electronic%20devices%20at%20work-3.jpeg 362w, https://www.netguru.com/hs-fs/hubfs/Group%20of%20business%20people%20using%20electronic%20devices%20at%20work-3.jpeg?width=724&height=482&name=Group%20of%20business%20people%20using%20electronic%20devices%20at%20work-3.jpeg 724w",
            "https://www.netguru.com/hs-fs/hubfs/Programmers%20looking%20at%20a%20code.jpg?width=362&height=241&name=Programmers%20looking%20at%20a%20code.jpg 362w, https://www.netguru.com/hs-fs/hubfs/Programmers%20looking%20at%20a%20code.jpg?width=724&height=483&name=Programmers%20looking%20at%20a%20code.jpg 724w",
            "https://www.netguru.com/hs-fs/hubfs/Concentrated%20bearded%20young%20man%20using%20laptop%20while%20his%20friends%20studying%20together-1.jpeg?width=362&height=241&name=Concentrated%20bearded%20young%20man%20using%20laptop%20while%20his%20friends%20studying%20together-1.jpeg 362w, https://www.netguru.com/hs-fs/hubfs/Concentrated%20bearded%20young%20man%20using%20laptop%20while%20his%20friends%20studying%20together-1.jpeg?width=724&height=482&name=Concentrated%20bearded%20young%20man%20using%20laptop%20while%20his%20friends%20studying%20together-1.jpeg 724w",
            "https://www.netguru.com/hs-fs/hubfs/mockup_16.jpg?width=362&height=241&name=mockup_16.jpg 362w, https://www.netguru.com/hs-fs/hubfs/mockup_16.jpg?width=724&height=482&name=mockup_16.jpg 724w",
            "https://www.netguru.com/hs-fs/hubfs/guide_native_mobile_app_development.jpg?width=362&height=192&name=guide_native_mobile_app_development.jpg 362w, https://www.netguru.com/hs-fs/hubfs/guide_native_mobile_app_development.jpg?width=724&height=384&name=guide_native_mobile_app_development.jpg 724w",
            "https://www.netguru.com/hubfs/_N23/assets/logos/keller-williams.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/babbel.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/merck.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/ikea.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/volkswagen.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/ubs.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/b-corp.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/tuv-nord.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/microsoft.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/aws-partner.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/mendix.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/google-cloud-partner.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/clutch.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/awwwards.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/inc-5000.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/ey-entrepreneur-of-the-year.svg",
            "https://www.netguru.com/hubfs/_N23/assets/logos/forbes.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Bartłomiej Pedryc",
            "Netguru"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Review of the pros and cons of developing a mobile app using Kotlin Multiplatform. How does it compare to other technologies?",
        "meta_lang": "en",
        "meta_favicon": "//www.netguru.com/hubfs/images/logos/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.netguru.com/blog/kotlin-multiplatform-pros-and-cons",
        "text": "After the recent success of mobile frameworks like Flutter and React Native, a new contender for multi-platform development is slowly getting more and more popular. Kotlin Multiplatform (KMP) promises to harness the power of shared code for multiple platforms like Flutter and React Native while still having the possibility of platform-specific code for more advanced features.\n\nEven though this sounds very promising, like all things, it has its advantages and drawbacks. Let us analyze them in this article.\n\nPros of developing an app in Kotlin Multiplatform\n\nSharing code\n\nThe greatest thing about KMP is something that it shares with the aforementioned frameworks – it allows you to write code once and have it working on multiple device types. But KMP does so in a very distinct way:\n\nIt’s easily expendable. To achieve certain behaviors on both Flutter and React Native platforms, you mostly use the API prepared by the framework creators. Adding platform-specific code can be difficult and error-prone. But in Kotlin Multiplatform, you can create your own common API for some platform-specific functionalities with ease.\n\nFor example, for drawing graphics, Android uses its native Canvas whereas desktop uses the Skia rendering engine. If there is a need, you can craft a common API that will draw the same things for the user, but underneath will use the technology appropriate for theplatform in question.\n\nYou can scale an existing application with KMP. For example, if an Android and an iOS application already exist, and a certain new functionality needs to be added for both, this can be done in Kotlin Multiplatform to reduce the development time needed for implementation.\n\nPlatform specific code\n\nIn KMP, you have a lot of freedom when it comes to using platform-specific code. You can write an Android UI in Jetpack Compose, an iOS UI in SwiftUI, and make them both use a common codebase for business logic.\n\nBut you could also use a KMP library like Compose Multiplatform to share both UI and business logic code. Even with such an approach, if you find that two platforms require very different approaches for a feature, Kotlin Multiplatform provides you with an easy way to tackle them independently and add them to your common codebase for future use.\n\nKotlin language\n\nWhen working in KMP, Android and some backend developers will feel right at home since the code is all written in the Kotlin language. According to the Stack Overflow Survey 2022, Kotlin is more popular (9.16% vs 6.54%) and more loved than Dart – the language of Flutter.\n\nKotlin also offers more compile-time safety than JavaScript – the language of React Native, which means that the developers get notified if something is wrong as soon as they compile the app rather than after it has been run. Thanks to that, developers can find bugs early and it improves their productivity. Also, since Kotlin is very well regarded in the programming community, a lot of people are willing to work with it.\n\nCons of developing an app in Kotlin Multiplatform\n\nBeta version\n\nAt the time of writing this article, Kotlin Multiplatform is in its beta phase. According to JetBrains - the company behind the Kotlin language, it should be safe to use in your projects already. Despite that, it’s important to keep in mind that this technology is still not fully matured. Some changes to the API are possible, but there is a great focus on minimizing potential migration issues.\n\nSmall community\n\nKotlin Multiplatform is still in its beginning phase, so there are noticeably less resources online to learn from. Sometimes it might take a developer a lot of time to find a solution to their problem, as they could be one of the first people to encounter it.\n\nDespite that fact, JetBrains regularly puts out detailed documentation on their official website, where it’s possible to find answers to the most important questions and better understand how KMP works.\n\nYears of trial and error on different platforms have led to an established way to write clean architecture. With Kotlin Multiplatform, code architecture is still being explored in different ways, and only with time will the best approach be discovered.\n\nYou can of course achieve clean code in KMP, but there are no mainstream well-tested architectural guidelines, so an experienced developer is often needed to establish them by oneself.\n\nSwift limitations and code magic\n\nWhen using KMP for an iOS app, at the time of writing this article, there are still some limitations and unexpected behaviors when Kotlin code is translated to Objective-C (the language of iOS). For example, default method parameters in Kotlin don’t work after being translated, as Objective-C doesn’t support default parameters at all. JetBrains are currently working to resolve this problem.\n\nThe translation process from Kotlin to Objective-C at the moment is a bit time-consuming, which might slow down the iOS part of development. Also, you can sometimes expect underscore characters to be added to your translated Objective-C code. This is one of the most odd bugs – it will not break your application, but may cost you several hours of wondering what and why is happening to your mobile application.\n\nThankfully, these issues are not something stopping you from creating a fully functional multiplatform application, but rather they are small annoyances that should be fixed or improved with time by the JetBrains team.\n\nChoosing Kotlin Multiplatform for the right project\n\nKotlin Multiplatform is a technology that already provides developers with powerful tools. Although it has some small issues, KMP can already be used to create applications for multiple platforms and reuse a lot of existing code, speeding up development times."
    }
}