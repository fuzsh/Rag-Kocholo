{
    "id": "dbpedia_8287_3",
    "rank": 94,
    "data": {
        "url": "https://www.php.net/manual/en/language.exceptions.php",
        "read_more_link": "",
        "language": "en",
        "title": "PHP: Exceptions",
        "top_image": "https://www.php.net/images/meta-image.png",
        "meta_img": "https://www.php.net/images/meta-image.png",
        "images": [
            "https://www.php.net/images/logos/php-logo.svg",
            "https://www.php.net/images/php8/logo_php8_3.svg",
            "https://www.php.net/images/to-top@2x.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "PHP is a popular general-purpose scripting language that powers everything from your blog to the most popular websites in the world.",
        "meta_lang": "en",
        "meta_favicon": "https://www.php.net/favicon.svg?v=2",
        "meta_site_name": "",
        "canonical_link": "https://www.php.net/manual/en/language.exceptions.php",
        "text": "catch\n\nA catch block defines how to respond to a thrown exception. A catch block defines one or more types of exception or error it can handle, and optionally a variable to which to assign the exception. (The variable was required prior to PHP 8.0.0.) The first catch block a thrown exception or error encounters that matches the type of the thrown object will handle the object.\n\nMultiple catch blocks can be used to catch different classes of exceptions. Normal execution (when no exception is thrown within the try block) will continue after that last catch block defined in sequence. Exceptions can be thrown (or re-thrown) within a catch block. If not, execution will continue after the catch block that was triggered.\n\nWhen an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching catch block. If an exception is not caught, a PHP Fatal Error will be issued with an \"Uncaught Exception ...\" message, unless a handler has been defined with set_exception_handler().\n\nAs of PHP 7.1.0, a catch block may specify multiple exceptions using the pipe (|) character. This is useful for when different exceptions from different class hierarchies are handled the same.\n\nAs of PHP 8.0.0, the variable name for a caught exception is optional. If not specified, the catch block will still execute but will not have access to the thrown object.\n\nfinally\n\nA finally block may also be specified after or instead of catch blocks. Code within the finally block will always be executed after the try and catch blocks, regardless of whether an exception has been thrown, and before normal execution resumes.\n\nOne notable interaction is between the finally block and a return statement. If a return statement is encountered inside either the try or the catch blocks, the finally block will still be executed. Moreover, the return statement is evaluated when encountered, but the result will be returned after the finally block is executed. Additionally, if the finally block also contains a return statement, the value from the finally block is returned."
    }
}