{
    "id": "dbpedia_8287_3",
    "rank": 98,
    "data": {
        "url": "https://www.geeksforgeeks.org/cpp-loops/",
        "read_more_link": "",
        "language": "en",
        "title": "GeeksforGeeks",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191128194516/Cpp-loops.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/loops.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20220927171802/WhileloopinC2.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20221006152307/dowhileloopinc.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/loops-in-c-part-2-exit-controlled-loop/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2017-01-13T05:03:33",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/cpp-loops/",
        "text": "In Programming, sometimes there is a need to perform some operation more than once or (say) n number of times. Loops come into use when we need to repeatedly execute a block of statements.\n\nFor example: Suppose we want to print “Hello World” 10 times. This can be done in two ways as shown below:\n\nManual Method (Iterative Method)\n\nManually we have to write cout for the C++ statement 10 times. Let’s say you have to write it 20 times (it would surely take more time to write 20 statements) now imagine you have to write it 100 times, it would be really hectic to re-write the same statement again and again. So, here loops have their role.\n\nOutput\n\nHello World Hello World Hello World Hello World Hello World\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nUsing Loops\n\nIn Loop, the statement needs to be written only once and the loop will be executed 10 times as shown below. In computer programming, a loop is a sequence of instructions that is repeated until a certain condition is reached.\n\nThere are mainly two types of loops:\n\nEntry Controlled loops: In this type of loop, the test condition is tested before entering the loop body. For Loop and While Loop is entry-controlled loops.\n\nExit Controlled Loops: In this type of loop the test condition is tested or evaluated at the end of the loop body. Therefore, the loop body will execute at least once, irrespective of whether the test condition is true or false. the do-while loop is exit controlled loop.\n\nS.No. Loop Type and Description\n\nFor Loop-\n\nA For loop is a repetition control structure that allows us to write a loop that is executed a specific number of times. The loop enables us to perform n number of steps together in one line.\n\nSyntax:\n\nfor (initialization expr; test expr; update expr)\n\n{\n\n// body of the loop\n\n// statements we want to execute\n\n}\n\nExplanation of the Syntax:\n\nInitialization statement: This statement gets executed only once, at the beginning of the for loop. You can enter a declaration of multiple variables of one type, such as int x=0, a=1, b=2. These variables are only valid in the scope of the loop. Variable defined before the loop with the same name are hidden during execution of the loop.\n\nCondition: This statement gets evaluated ahead of each execution of the loop body, and abort the execution if the given condition get false.\n\nIteration execution: This statement gets executed after the loop body, ahead of the next condition evaluated, unless the for loop is aborted in the body (by break, goto, return or an exception being thrown.)\n\nNOTES:\n\nThe initialization and increment statements can perform operations unrelated to the condition statement, or nothing at all – if you wish to do. But the good practice is to only perform operations directly relevant to the loop.\n\nA variable declared in the initialization statement is visible only inside the scope of the for loop and will be released out of the loop.\n\nDon’t forget that the variable which was declared in the initialization statement can be modified during the loop, as well as the variable checked in the condition.\n\nExample1:\n\nfor(int i = 0; i < n; i++)\n\n{\n\n// BODY\n\n}\n\nExample2:\n\nfor(auto element:arr)\n\n{\n\n//BODY\n\n}\n\nFlow Diagram of for loop:\n\nExample1:\n\nOutput\n\nHello World Hello World Hello World Hello World Hello World\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nExample2:\n\nOutput\n\n40 50 60 70 80 90 100\n\nTime complexity: O(n) n is the size of array.\n\nSpace complexity: O(n) n is the size of array.\n\nFor loop can also be valid in the given form:-\n\nOutput\n\n0 10 20 19 11 19 37 12 18 54 13 17\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nExample of hiding declared variables before a loop is:\n\nOutput\n\n0 1 2 3 4 99\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nBut if you want to use the already declared variable and not hide it, then must not redeclare that variable.\n\nFor Example:\n\nOutput\n\n0 1 2 3 4 5\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nThe For loop can be used to iterating through the elements in the STL container(e.g., Vector, etc). here we have to use iterator.\n\nFor Example:\n\nOutput\n\n1 2 3 4 5\n\nTime complexity: O(n) n is the size of vector.\n\nSpace complexity: O(n) n is the size of vector.\n\nWhile Loop-\n\nWhile studying for loop we have seen that the number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known to us. while loops are used in situations where we do not know the exact number of iterations of the loop beforehand. The loop execution is terminated on the basis of the test conditions.\n\nWe have already stated that a loop mainly consists of three statements – initialization expression, test expression, and update expression. The syntax of the three loops – For, while, and do while mainly differs in the placement of these three statements.\n\nSyntax:\n\ninitialization expression;\n\nwhile (test_expression)\n\n{\n\n// statements\n\nupdate_expression;\n\n}\n\nFlow Diagram of while loop:\n\nExample:\n\nOutput\n\nHello World Hello World Hello World Hello World Hello World\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nIt’s explanation is same as that of the for loop.\n\nDo-while loop\n\nIn Do-while loops also the loop execution is terminated on the basis of test conditions. The main difference between a do-while loop and the while loop is in the do-while loop the condition is tested at the end of the loop body, i.e do-while loop is exit controlled whereas the other two loops are entry-controlled loops.\n\nNote: In a do-while loop, the loop body will execute at least once irrespective of the test condition.\n\nSyntax:\n\ninitialization expression;\n\ndo\n\n{\n\n// statements\n\nupdate_expression;\n\n} while (test_expression);\n\nNote: Notice the semi – colon(“;”)in the end of loop.\n\nFlow Diagram of the do-while loop:\n\nExample:\n\nOutput\n\nHello World\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nIn the above program, the test condition (i<1) evaluates to false. But still, as the loop is an exit – controlled the loop body will execute once.\n\nWhat about an Infinite Loop?\n\nAn infinite loop (sometimes called an endless loop ) is a piece of coding that lacks a functional exit so that it repeats indefinitely. An infinite loop occurs when a condition is always evaluated to be true. Usually, this is an error.\n\nUsing For loop:\n\nOutput:\n\nThis loop will run forever.\n\nThis loop will run forever.\n\n...................\n\nTime complexity: O(infinity) as the loop will run forever.\n\nSpace complexity: O(1)\n\nUsing While loop:\n\nOutput:\n\nThis loop will run forever.\n\nThis loop will run forever.\n\n...................\n\nTime complexity: O(infinity) as the loop will run forever.\n\nSpace complexity: O(1)\n\nUsing the Do-While loop:\n\nOutput:\n\nThis loop will run forever.\n\nThis loop will run forever.\n\n...................\n\nTime complexity: O(infinity) as the loop will run forever.\n\nSpace complexity: O(1)\n\nNow let us take a look at decrementing loops.\n\nSometimes we need to decrement a variable with a looping condition.\n\nUsing for loop\n\nOutput\n\n5 4 3 2 1 0\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nUsing while loop.\n\nOutput\n\n4 3 2 1 0 5 4 3 2 1\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nUsing do-while loop\n\nOutput\n\n5 4 3 2 1 0\n\nTime complexity: O(1)\n\nSpace complexity: O(1)\n\nOutput\n\nFor loop: The value of i is: 1 For loop: The value of i is: 2 For loop: The value of i is: 3 For loop: The value of i is: 4 For loop: The value of i is: 5 While loop: The value of j is: 1 While loop: The value of j is: 2 While loop: The value of j is: 3 While loop: The value of j is: 4 While loop: The value of j is: 5 Do-while loop: The value of k is: 1 Do-while loop: The value of k is: 2 Do-while loop: The value of k is: 3 Do-while loop: The value of k is: 4 Do-while loop: The value of k is: 5 Range-based for loop: The value of element is: 1 Range-based for loop: The value of element is: 2 Range-based for loop: The value of element is: 3 Range-based for loop: The value of element is: 4 Range-based for loop: The value of element is: 5\n\nOutput\n\nFor loop: 0 1 2 3 4 While loop: 0 1 2 3 4 Do-while loop: 0 1 2 3 4\n\nAdvantages :\n\nHigh performance: C++ is a compiled language that can produce efficient and high-performance code. It allows low-level memory manipulation and direct access to system resources, making it ideal for applications that require high performance, such as game development, operating systems, and scientific computing.\n\nObject-oriented programming: C++ supports object-oriented programming, allowing developers to write modular, reusable, and maintainable code. It provides features such as inheritance, polymorphism, encapsulation, and abstraction that make code easier to understand and modify.\n\nWide range of applications: C++ is a versatile language that can be used for a wide range of applications, including desktop applications, games, mobile apps, embedded systems, and web development. It is also used extensively in the development of operating systems, system software, and device drivers.\n\nStandardized language: C++ is a standardized language, with a specification maintained by the ISO (International Organization for Standardization). This ensures that C++ code written on one platform can be easily ported to another platform, making it a popular choice for cross-platform development.\n\nLarge community and resources: C++ has a large and active community of developers and users, with many resources available online, including documentation, tutorials, libraries, and frameworks. This makes it easy to find help and support when needed.\n\nInteroperability with other languages: C++ can be easily integrated with other programming languages, such as C, Python, and Java, allowing developers to leverage the strengths of different languages in their applications.\n\nOverall, C++ is a powerful and flexible language that offers many advantages for developers who need to create high-performance, reliable, and scalable applications.\n\nMore Advanced Looping Techniques\n\nRange-Based for Loop in C++\n\nfor each Loop in C++\n\nImportant Points\n\nUse for a loop when a number of iterations are known beforehand, i.e. the number of times the loop body is needed to be executed is known.\n\nUse while loops, where an exact number of iterations is not known but the loop termination condition, is known.\n\nUse do while loop if the code needs to be executed at least once like in Menu-driven programs\n\nRelated Articles:\n\nWhat happens if loop till Maximum of Signed and Unsigned in C/C++?\n\nQuiz on Loops"
    }
}