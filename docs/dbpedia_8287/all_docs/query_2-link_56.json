{
    "id": "dbpedia_8287_2",
    "rank": 56,
    "data": {
        "url": "https://github.com/EvgSkv/logica",
        "read_more_link": "",
        "language": "en",
        "title": "EvgSkv/logica: Logica is a logic programming language that compiles to SQL. It runs on DuckDB, Google BigQuery, PostgreSQL and SQLite.",
        "top_image": "https://repository-images.githubusercontent.com/302758707/1bc14b8b-c6d3-4b00-847d-28ec8d105196",
        "meta_img": "https://repository-images.githubusercontent.com/302758707/1bc14b8b-c6d3-4b00-847d-28ec8d105196",
        "images": [
            "https://avatars.githubusercontent.com/u/71790359?s=64&v=4",
            "https://avatars.githubusercontent.com/u/72920390?s=64&v=4",
            "https://avatars.githubusercontent.com/u/12811221?s=64&v=4",
            "https://avatars.githubusercontent.com/u/81902534?s=64&v=4",
            "https://avatars.githubusercontent.com/u/37587928?s=64&v=4",
            "https://avatars.githubusercontent.com/u/24869900?s=64&v=4",
            "https://avatars.githubusercontent.com/u/52726205?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1291429?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10674948?s=64&v=4",
            "https://avatars.githubusercontent.com/u/19347395?s=64&v=4",
            "https://avatars.githubusercontent.com/u/214189?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3186638?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3461761?s=64&v=4",
            "https://avatars.githubusercontent.com/u/8876252?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Logica is a logic programming language that compiles to SQL. It runs on DuckDB, Google BigQuery, PostgreSQL and SQLite. - EvgSkv/logica",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/EvgSkv/logica",
        "text": "Logica is an open source declarative logic programming language for data manipulation. Logica is a successor to Yedalog, a language created at Google earlier.\n\nLogica is for engineers, data scientists and other specialists who want to use logic programming syntax when writing queries and pipelines for databases and datawarehouses. Logica programs run on BigQuery, Postgres and SQLite.\n\nLogica compiles to SQL and gives you access to the power of SQL ecosystem with the convenience of logic programming syntax.\n\nThis is useful because SQL enginers are magnitudes more powerful than state of the art native logic programming engines. For example, BigQuery is a distributed datawarehouse and thus logic programs written in Logica can be easily parallelized onto thousands of servers. Postgres and SQLite are among most popular databases, they are capable of processing substantial volumes of data right on your machine.\n\nWe encourage you to try Logica, especially if\n\nyou already use logic programming and need more computational power, or\n\nyou already have data in BigQuery, PostgreSQL or SQLite, or\n\nyou want to learn logic programming and apply it to processing of Big Data.\n\nSupport for more SQL dialects and engines is coming in the future.\n\nLogic programming is a declarative programming paradigm where the program is written as a set of logical statements.\n\nLogic programming was developed in academia from the late 60s. Prolog and Datalog are the most prominent examples of logic programming languages. Logica is a language of the Datalog family.\n\nDatalog and relational databases start from the same idea: think of data as relations and think of data manipulation as a sequence of operations over these relations. But Datalog and SQL differ in how these operations are described. Datalog is inspired by the mathematical syntax of the first order propositional logic and SQL follows the syntax of natural language.\n\nSQL was based on the natural language to give access to databases to the people without formal training in computer programming or mathematics. This convenience may become costly when the logic that you want to express is non trivial. There are many examples of hard-to-read SQL queries that correspond to simple logic programs.\n\nLogica compiles the logic program into a SQL expression, so it can be executed on BigQuery, the state of the art SQL engine.\n\nAmong database theoreticians Datalog and SQL are known to be equivalent. And indeed the conversion from Datalog to SQL and back is often straightforward. However there are a few nuances, for example how to treat disjunction and negation. In Logica we tried to make choices that make understanding of the resulting SQL structure as easy as possible, thus empowering user to write programs that are executed efficiently.\n\nLogica stands for Logic with aggregation.\n\nLearn basics of Logica with the CoLab tutorial located at tutorial folder. See examples of using Logica in examples folder.\n\nTutorial and examples show how to access Logica from CoLab. You can also install Logica command line tool.\n\nTo run Logica programs on BigQuery you will need a Google Cloud Project. Once you have a project you can run Logica programs in CoLab providing your project id.\n\nTo run Logica locally you need Python3.\n\nTo initiate Logica predicates execution from the command line you will need bq, a BigQuery command line tool. For that you need to install Google Cloud SDK.\n\nGoogle Cloud Project is the only thing you need to run Logica in Colab, see Hello World example.\n\nYou can install Logica command with pip as follows.\n\nIf your PATH includes Python's bin folder then you will also be able to run it simply as\n\nAlternatively, you can clone GitHub repository:\n\nHere a couple examples of how Logica code looks like.\n\nFind prime numbers less than 30.\n\nProgram primes.l:\n\nRunning primes.l\n\nLet's use beer variety dataset from plotly.\n\nLet us find top 5 states with largest variety of beers. In each state we will pick city with the largest variety in the state.\n\nProgram beer.l:\n\nRunning beer.l:\n\nFeel free to create github issues for bugs and feature requests.\n\nYou questions and comments are welcome at our github discussions!\n\nUnless otherwise noted, the Logica source files are distributed under the Apache 2.0 license found in the LICENSE file.\n\nThis is not an officially supported Google product."
    }
}