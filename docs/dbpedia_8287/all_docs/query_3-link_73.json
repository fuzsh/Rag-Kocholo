{
    "id": "dbpedia_8287_3",
    "rank": 73,
    "data": {
        "url": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-perform-data-operations",
        "read_more_link": "",
        "language": "en",
        "title": "Perform operations on data - Azure Logic Apps",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-compose-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-compose-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-compose-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-compose-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-compose-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-compose-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-compose-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/compose-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-create-table-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-create-csv-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-create-csv-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-create-table-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-create-csv-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-create-csv-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/csv-table-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-csv-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-create-csv-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/create-csv-table-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-create-table-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-create-html-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-create-html-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-create-table-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-create-html-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-create-html-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/html-table-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-html-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-create-html-table-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/create-html-table-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-filter-array-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-filter-array-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-filter-array-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-filter-array-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-filter-array-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-filter-array-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-filter-array-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-filter-array-action-complete.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/filter-array-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-join-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-join-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-join-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-join-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-join-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-join-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-join-action-complete.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/join-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-parse-json-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/provide-schema-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/generate-schema-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-parse-json-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/provide-schema-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/generate-schema-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-parse-json-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-parse-json-action-complete.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/parse-json-email-results.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-select-action-consumption.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-select-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-select-action-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-select-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/sample-start-select-action-standard.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-select-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/configure-select-action-expression.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/finished-select-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-select-action.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/send-email-select-action-complete.png",
            "https://learn.microsoft.com/en-us/azure/logic-apps/media/logic-apps-perform-data-operations/select-email-results.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-31T08:00:00+00:00",
        "summary": "",
        "meta_description": "How to create strings, arrays, tables, or tokens from various data types for workflows in Azure Logic Apps.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-perform-data-operations",
        "text": "Perform data operations in Azure Logic Apps\n\nApplies to: Azure Logic Apps (Consumption + Standard)\n\nThis how-to guide shows how you can work with data in your logic app workflow in the following ways:\n\nCreate a string or JavaScript Object Notation (JSON) object from multiple inputs that have different data types. You can then use this string as a single input, rather than repeatedly entering the same inputs.\n\nCreate user-friendly tokens from JavaScript Object Notation (JSON) object properties so that you can easily use those properties in your workflow.\n\nCreate an HTML or CSV table from an array.\n\nCreate an array from another array based on a specified filter or condition.\n\nCreate an array based on the specified properties for all the items in another array.\n\nCreate a string from all the items in an array and separate those items using a specified character.\n\nPrerequisites\n\nAn Azure account and subscription. If you don't have a subscription, sign up for a free Azure account.\n\nThe logic app workflow where you want to perform the data operation. Both Consumption and Standard logic app workflows support the data operations described in this guide.\n\nAll data operations are available only as actions. So, before you can use these actions, your workflow must already start with a trigger as the first step and include any other actions required to create the outputs that you want to use in the data operation.\n\nData operation actions\n\nThe following sections summarize the data operations you can use and are organized based on the source data types that the operations work on, but each description appears alphabetically.\n\nJSON actions\n\nThe following actions help you work with data in JavaScript Object Notation (JSON) format.\n\nAction Description Compose Create a message, or string, from multiple inputs that can have various data types. You can then use this string as a single input, rather than repeatedly entering the same inputs. For example, you can create a single JSON message from various inputs. Parse JSON Create user-friendly data tokens for properties in JSON content so that you can more easily use the properties in your logic apps.\n\nTo create more complex JSON transformations, see Perform advanced JSON transformations with Liquid templates.\n\nArray actions\n\nThe following actions help you work with data in arrays.\n\nAction Description Create CSV table Create a comma-separated value (CSV) table from an array. Create HTML table Create an HTML table from an array. Filter array Create an array subset from an array based on the specified filter or condition. Join Create a string from all the items in an array and separate each item with the specified character. Select Create an array from the specified properties for all the items in a different array.\n\nCompose action\n\nTo construct a single output such as a JSON object from multiple inputs, use the action named Compose. Your inputs can have various types such as integers, Booleans, arrays, JSON objects, and any other native type that Azure Logic Apps supports, for example, binary and XML. You can then use the output in actions that follow after the Compose action. The Compose action also helps you avoid repeatedly entering the same inputs while you build your logic app's workflow.\n\nFor example, you can construct a JSON message from multiple variables, such as string variables that store people's first names and last names, and an integer variable that stores people's ages. In this example, the Compose action accepts the following inputs:\n\n{ \"age\": <ageVar>, \"fullName\": \"<lastNameVar>, <firstNameVar>\" }\n\nAnd creates the following output:\n\n{\"age\":35,\"fullName\":\"Owens,Sophia\"}\n\nTo try the Compose action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Compose and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Compose. For more information about the Compose action in the underlying JSON workflow definition, see the Compose action.\n\nTest your workflow\n\nTo confirm whether the Compose action creates the expected results, send yourself a notification that includes output from the Compose action.\n\nIn your workflow, add an action that can send you the results from the Compose action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, for each box where you want the results to appear, select inside each box, and then select the dynamic content list. From that list, under the Compose action, select Outputs.\n\nFor this example, the result appears in the email's body, so add the Outputs field to the Body box.\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nCreate CSV table action\n\nTo create a comma-separated value (CSV) table that has the properties and values from JavaScript Object Notation (JSON) objects in an array, use the action named Create CSV table. You can then use the resulting table in actions that follow the Create CSV table action.\n\nTo try the Create CSV table action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Create CSV table and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Create CSV table. For more information about the Create CSV table action in the underlying JSON workflow definition, see the Table action.\n\nCustomize table format\n\nBy default, the Columns property is set to automatically create the table columns based on the array items. To specify custom headers and values, follow these steps:\n\nIf the Columns property doesn't appear in the action information box, from the Advanced parameters list, select Columns.\n\nOpen the Columns list, and select Custom.\n\nIn the Header property, specify the custom header text to use instead.\n\nIn the Value property, specify the custom value to use instead.\n\nTo return values from the array, you can use the item() function with the Create CSV table action. In a For_each loop, you can use the items() function.\n\nFor example, suppose you want table columns that have only the property values and not the property names from an array. To return only these values, follow these steps for working in designer view or in code view.\n\nThis example returns the following result:\n\nApples,1 Oranges,2\n\nWork in designer view\n\nIn the Create CSV table action, keep the Header column empty. On each row in the Value column, dereference each array property that you want. Each row under Value returns all the values for the specified array property and becomes a column in your table.\n\nFor each array property that you want, in the Value column, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that the Function list appears selected.\n\nIn the expression editor, enter the following expression, but replace <array-property-name> with the array property name for the value that you want. When you're done with each expression, select Add.\n\nSyntax: item()?['<array-property-name>']\n\nExamples:\n\nitem()?['Description']\n\nitem()?['Product_ID']\n\nFor more information, see item() function.\n\nRepeat the preceding steps for each array property. When you're done, your action looks similar to the following example:\n\nWork in code view\n\nIn the action's JSON definition, within the columns array, set the header property to an empty string. For each value property, dereference each array property that you want.\n\nFrom the designer, switch to code view.\n\nConsumption: On the designer toolbar, select Code view.\n\nStandard: On the workflow navigation menu, under Developer, select Code.\n\nIn the code editor, find the action's columns array. For each column of array values that you want, add an empty header property and the following expression for the value property:\n\nSyntax:\n\n{ \"header\": \"\", \"value\": \"@item()?['<array-property-name>']\" }\n\nExample:\n\n\"Create_CSV_table\": { \"inputs\": { \"columns\": [ { \"header\": \"\", \"value\": \"@item()?['Description']\" }, { \"header\": \"\", \"value\": \"@item()?['Product_ID']\" } ], \"format\": \"CSV\", \"from\": \"@variables('myJSONArray')\" } }\n\nSwitch back to designer view to review the results.\n\nTest your workflow\n\nTo confirm whether the Create CSV table action creates the expected results, send yourself a notification that includes output from the Create CSV table action.\n\nIn your workflow, add an action that can send you the results from the Create CSV table action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, for each box where you want the results to appear, select inside each box, which opens the dynamic content list. From that list, under the Create CSV table action, select Output.\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nCreate HTML table action\n\nTo create an HTML table that has the properties and values from JavaScript Object Notation (JSON) objects in an array, use the Create HTML table action. You can then use the resulting table in actions that follow the Create HTML table action.\n\nTo try the Create HTML table action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Create HTML table and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Create HTML table. For more information about the Create HTML table action in the underlying JSON workflow definition, see the Table action.\n\nCustomize table format\n\nBy default, the Columns property is set to automatically create the table columns based on the array items. To specify custom headers and values, follow these steps:\n\nIf the Columns property doesn't appear in the action information box, from the Advanced parameters list, select Columns.\n\nOpen the Columns list, and select Custom.\n\nIn the Header property, specify the custom header text to use instead.\n\nIn the Value property, specify the custom value to use instead.\n\nTo return values from the array, you can use the item() function with the Create HTML table action. In a For_each loop, you can use the items() function.\n\nFor example, suppose you want table columns that have only the property values and not the property names from an array. To return only these values, follow these steps for working in designer view or in code view.\n\nThis example returns the following result:\n\nApples,1 Oranges,2\n\nWork in designer view\n\nIn the Create HTML table action, keep the Header column empty. On each row in the Value column, dereference each array property that you want. Each row under Value returns all the values for the specified array property and becomes a column in your table.\n\nFor each array property that you want, in the Value column, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that the Function list appears selected.\n\nIn the expression editor, enter the following expression, but replace <array-property-name> with the array property name for the value that you want. When you're done with each expression, select Add.\n\nSyntax: item()?['<array-property-name>']\n\nExamples:\n\nitem()?['Description']\n\nitem()?['Product_ID']\n\nFor more information, see item() function.\n\nRepeat the preceding steps for each array property. When you're done, your action looks similar to the following example:\n\nWork in code view\n\nIn the action's JSON definition, within the columns array, set the header property to an empty string. For each value property, dereference each array property that you want.\n\nFrom the designer, switch to code view.\n\nConsumption: On the designer toolbar, select Code view.\n\nStandard: On the workflow navigation menu, under Developer, select Code.\n\nSwitch back to designer view to review the results.\n\nTest your workflow\n\nTo confirm whether the Create HTML table action creates the expected results, send yourself a notification that includes output from the Create HTML table action.\n\nIn your workflow, add an action that can send you the results from the Create HTML table action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under the Create HTML table action, select Output.\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nFilter array action\n\nTo create a subset array from an existing array where the subset items meet specific criteria, use the Filter array action. You can then use resulting filtered array in actions that follow the Filter array action.\n\nTo try the Filter array action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Filter array and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Filter array. For more information about the Filter array action in the underlying JSON workflow definition, see the Query action.\n\nTest your workflow\n\nTo confirm whether Filter array action creates the expected results, send yourself a notification that includes output from the Filter array action.\n\nIn your workflow, add an action that can send you the results from the Filter array action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, complete the following steps:\n\nFor each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that the Function list appears selected.\n\nTo get the array output from the Filter array action, enter the following expression, which uses the body() function with the Filter array action name, and then select Add.\n\nbody('Filter_array')\n\nThe resolved expression specifies to show the outputs from the Filter_array action in the email body when sent:\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nJoin action\n\nTo create a string that has all the items from an array and separate those items with a specific delimiter character, use the Join action. You can then use the string in actions that follow the Join action.\n\nTo try the Join action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Join and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Join. For more information about the Join action in your underlying workflow definition, see the Join action.\n\nTest your workflow\n\nTo confirm whether the Join action creates the expected results, send yourself a notification that includes output from the Join action.\n\nIn your workflow, add an action that can send you the results from the Join action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under the Join action, select Output.\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nParse JSON action\n\nTo reference or access properties in JavaScript Object Notation (JSON) content, you can create user-friendly fields or tokens for those properties by using the Parse JSON action. That way, you can select those properties from the dynamic content list when you specify inputs for subsequent actions in your workflow. For this action, you can either provide a JSON schema or generate a JSON schema from your sample JSON content or payload.\n\nTo try the Parse JSON action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Parse JSON and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Parse JSON. For more information about this action in your underlying workflow definition, see Parse JSON action.\n\nTest your workflow\n\nTo confirm whether the Parse JSON action creates the expected results, send yourself a notification that includes output from the Parse JSON action.\n\nIn your workflow, add an action that can send you the results from the Parse JSON action.\n\nThis example continues by using the Office 365 Outlook action named Send an email.\n\nIn this action, for each box where you want the results to appear, select inside each edit box, and then select the lightning icon, which opens the dynamic content list. From that list, under the Parse JSON action, select the properties from the parsed JSON object.\n\nThis example selects the following properties: Body FirstName, Body LastName, and Body Email\n\nWhen you're done, the Send an email action looks similar to the following example:\n\nSave your workflow, and then manually run your workflow.\n\nConsumption workflow: On the designer toolbar, select Run > Run.\n\nStandard workflow: On the workflow navigation menu, select Overview. On the Overview page toolbar, select Run > Run.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nSelect action\n\nBy default, the Select action creates an array that contains JSON objects built from the values in an existing array. For example, you can create a JSON object for each value in an integer array by specifying the properties that each JSON object must have and mapping the values from the source array to those properties. Although you can change the component JSON objects, the output array always has the same number of items as the source array. To use the output array from the Select action, subsequent actions must either accept arrays as input, or you might have to transform the output array into another compatible format.\n\nTo try the Select action, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the example Select and Initialize variable action definitions from this guide into your own logic app's underlying workflow definition: Data operation code examples - Select. For more information about this action in your underlying workflow definition, see Select action.\n\nTest your workflow\n\nTo confirm whether the Select action creates the expected results, send yourself a notification that includes output from the Select action.\n\nIn your workflow, add an action that can send you the results from the Select action.\n\nIf you used the Office 365 Outlook action, the following example shows the result:\n\nTroubleshooting\n\nFormat table data\n\nIf your CSV table or HTML table is returned with incorrect formatting, make sure your input data has line breaks between rows.\n\nIncorrect formatting:\n\nFruit,Number Apples,1 Oranges,2\n\nCorrect formatting:\n\nFruit,Number Apples,1 Oranges,2\n\nTo add line breaks between rows, add one of the following expressions to your table:\n\nreplace(body('Create_CSV_table'),'','<br/>')\n\nreplace(body('Create_HTML_table'),'','<br/>')\n\nFor example:\n\n{ \"Send_an_email_\": { \"inputs\": { \"body\": { \"Body\": \"<p>Results from Create CSV table action:<br/>\\n<br/>\\n<br/>\\n@{replace(body('Create_CSV_table'),'\\r\\n','<br/>')}</p>\", \"Subject\": \"Create CSV table results\", \"To\": \"sophia.owen@fabrikam.com\" } } } }"
    }
}