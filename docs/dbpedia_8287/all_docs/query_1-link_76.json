{
    "id": "dbpedia_8287_1",
    "rank": 76,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals",
        "read_more_link": "",
        "language": "en",
        "title": "Making decisions in your code â conditionals - Learn web development",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [
            "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/cookie-choice-small.png"
        ],
        "movies": [
            "https://live.mdnplay.dev/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/runner.html?id=else_if",
            "https://live.mdnplay.dev/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/runner.html?id=a_switch_example",
            "https://live.mdnplay.dev/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/runner.html?id=ternary_operator_example",
            "https://live.mdnplay.dev/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/runner.html?id=active_learning_a_simple_calendar",
            "https://live.mdnplay.dev/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/runner.html?id=active_learning_more_color_choices"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-25T21:20:22+00:00",
        "summary": "",
        "meta_description": "In any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals",
        "text": "Making decisions in your code â conditionals\n\nOverview: JavaScript building blocks\n\nNext\n\nIn any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.\n\nYou can have it on one condition!\n\nHuman beings (and other animals) make decisions all the time that affect their lives, from small (\"should I eat one cookie or two?\") to large (\"should I stay in my home country and work on my father's farm, or should I move to America and study astrophysics?\")\n\nConditional statements allow us to represent such decision making in JavaScript, from the choice that must be made (for example, \"one cookie or two\"), to the resulting outcome of those choices (perhaps the outcome of \"ate one cookie\" might be \"still felt hungry\", and the outcome of \"ate two cookies\" might be \"felt full, but mom scolded me for eating all the cookies\".)\n\nif...else statements\n\nLet's look at by far the most common type of conditional statement you'll use in JavaScript â the humble if...else statement.\n\nBasic if...else syntax\n\nBasic if...else syntax looks like this:\n\njs\n\nif (condition) { } else { }\n\nHere we've got:\n\nThe keyword if followed by some parentheses.\n\nA condition to test, placed inside the parentheses (typically \"is this value bigger than this other value?\", or \"does this value exist?\"). The condition makes use of the comparison operators we discussed in the last module and returns true or false.\n\nA set of curly braces, inside which we have some code â this can be any code we like, and it only runs if the condition returns true.\n\nThe keyword else.\n\nAnother set of curly braces, inside which we have some more code â this can be any code we like, and it only runs if the condition is not true â or in other words, the condition is false.\n\nThis code is pretty human-readable â it is saying \"if the condition returns true, run code A, else run code B\"\n\nYou should note that you don't have to include the else and the second curly brace block â the following is also perfectly legal code:\n\njs\n\nif (condition) { }\n\nHowever, you need to be careful here â in this case, the second block of code is not controlled by the conditional statement, so it always runs, regardless of whether the condition returns true or false. This is not necessarily a bad thing, but it might not be what you want â often you want to run one block of code or the other, not both.\n\nAs a final point, while not recommended, you may sometimes see if...else statements written without the curly braces:\n\njs\n\nif (condition) else\n\nThis syntax is perfectly valid, but it is much easier to understand the code if you use the curly braces to delimit the blocks of code, and use multiple lines and indentation.\n\nA real example\n\nTo understand this syntax better, let's consider a real example. Imagine a child being asked for help with a chore by their mother or father. The parent might say \"Hey sweetheart! If you help me by going and doing the shopping, I'll give you some extra allowance so you can afford that toy you wanted.\" In JavaScript, we could represent this like so:\n\njs\n\nlet shoppingDone = false; let childsAllowance; if (shoppingDone === true) { childsAllowance = 10; } else { childsAllowance = 5; }\n\nThis code as shown always results in the shoppingDone variable returning false, meaning disappointment for our poor child. It'd be up to us to provide a mechanism for the parent to set the shoppingDone variable to true if the child did the shopping.\n\nNote: You can see a more complete version of this example on GitHub (also see it running live.)\n\nelse if\n\nThe last example provided us with two choices, or outcomes â but what if we want more than two?\n\nThere is a way to chain on extra choices/outcomes to your if...else â using else if. Each extra choice requires an additional block to put in between if () { } and else { } â check out the following more involved example, which could be part of a simple weather forecast application:\n\nhtml\n\n<label for=\"weather\">Select the weather type today: </label> <select id=\"weather\"> <option value=\"\">--Make a choice--</option> <option value=\"sunny\">Sunny</option> <option value=\"rainy\">Rainy</option> <option value=\"snowing\">Snowing</option> <option value=\"overcast\">Overcast</option> </select> <p></p>\n\njs\n\nconst select = document.querySelector(\"select\"); const para = document.querySelector(\"p\"); select.addEventListener(\"change\", setWeather); function setWeather() { const choice = select.value; if (choice === \"sunny\") { para.textContent = \"It is nice and sunny outside today. Wear shorts! Go to the beach, or the park, and get an ice cream.\"; } else if (choice === \"rainy\") { para.textContent = \"Rain is falling outside; take a rain coat and an umbrella, and don't stay out for too long.\"; } else if (choice === \"snowing\") { para.textContent = \"The snow is coming down â it is freezing! Best to stay in with a cup of hot chocolate, or go build a snowman.\"; } else if (choice === \"overcast\") { para.textContent = \"It isn't raining, but the sky is grey and gloomy; it could turn any minute, so take a rain coat just in case.\"; } else { para.textContent = \"\"; } }\n\nHere we've got an HTML <select> element allowing us to make different weather choices, and a simple paragraph.\n\nIn the JavaScript, we are storing a reference to both the <select> and <p> elements, and adding an event listener to the <select> element so that when its value is changed, the setWeather() function is run.\n\nWhen this function is run, we first set a variable called choice to the current value selected in the <select> element. We then use a conditional statement to show different text inside the paragraph depending on what the value of choice is. Notice how all the conditions are tested in else if () { } blocks, except for the first one, which is tested in an if () { } block.\n\nThe very last choice, inside the else { } block, is basically a \"last resort\" option â the code inside it will be run if none of the conditions are true. In this case, it serves to empty the text out of the paragraph if nothing is selected, for example, if a user decides to re-select the \"--Make a choice--\" placeholder option shown at the beginning.\n\nNote: You can also find this example on GitHub (see it running live on there also.)\n\nA note on comparison operators\n\nComparison operators are used to test the conditions inside our conditional statements. We first looked at comparison operators back in our Basic math in JavaScript â numbers and operators article. Our choices are:\n\n=== and !== â test if one value is identical to, or not identical to, another.\n\n< and > â test if one value is less than or greater than another.\n\n<= and >= â test if one value is less than or equal to, or greater than or equal to, another.\n\nWe wanted to make a special mention of testing boolean (true/false) values, and a common pattern you'll come across again and again. Any value that is not false, undefined, null, 0, NaN, or an empty string ('') actually returns true when tested as a conditional statement, therefore you can use a variable name on its own to test whether it is true, or even that it exists (that is, it is not undefined.) So for example:\n\njs\n\nlet cheese = \"Cheddar\"; if (cheese) { console.log(\"Yay! Cheese available for making cheese on toast.\"); } else { console.log(\"No cheese on toast for you today.\"); }\n\nAnd, returning to our previous example about the child doing a chore for their parent, you could write it like this:\n\njs\n\nlet shoppingDone = false; let childsAllowance; if (shoppingDone) { childsAllowance = 10; } else { childsAllowance = 5; }\n\nNesting if...else\n\nIt is perfectly OK to put one if...else statement inside another one â to nest them. For example, we could update our weather forecast application to show a further set of choices depending on what the temperature is:\n\njs\n\nif (choice === \"sunny\") { if (temperature < 86) { para.textContent = `It is ${temperature} degrees outside â nice and sunny. Let's go out to the beach, or the park, and get an ice cream.`; } else if (temperature >= 86) { para.textContent = `It is ${temperature} degrees outside â REALLY HOT! If you want to go outside, make sure to put some sunscreen on.`; } }\n\nEven though the code all works together, each if...else statement works completely independently of the other one.\n\nLogical operators: AND, OR and NOT\n\nIf you want to test multiple conditions without writing nested if...else statements, logical operators can help you. When used in conditions, the first two do the following:\n\n&& â AND; allows you to chain together two or more expressions so that all of them have to individually evaluate to true for the whole expression to return true.\n\n|| â OR; allows you to chain together two or more expressions so that one or more of them have to individually evaluate to true for the whole expression to return true.\n\nTo give you an AND example, the previous example snippet can be rewritten to this:\n\njs\n\nif (choice === \"sunny\" && temperature < 86) { para.textContent = `It is ${temperature} degrees outside â nice and sunny. Let's go out to the beach, or the park, and get an ice cream.`; } else if (choice === \"sunny\" && temperature >= 86) { para.textContent = `It is ${temperature} degrees outside â REALLY HOT! If you want to go outside, make sure to put some sunscreen on.`; }\n\nSo for example, the first code block will only be run if choice === 'sunny' and temperature < 86 return true.\n\nLet's look at a quick OR example:\n\njs\n\nif (iceCreamVanOutside || houseStatus === \"on fire\") { console.log(\"You should leave the house quickly.\"); } else { console.log(\"Probably should just stay in then.\"); }\n\nThe last type of logical operator, NOT, expressed by the ! operator, can be used to negate an expression. Let's combine it with OR in the above example:\n\njs\n\nif (!(iceCreamVanOutside || houseStatus === \"on fire\")) { console.log(\"Probably should just stay in then.\"); } else { console.log(\"You should leave the house quickly.\"); }\n\nIn this snippet, if the OR statement returns true, the NOT operator will negate it so that the overall expression returns false.\n\nYou can combine as many logical statements together as you want, in whatever structure. The following example executes the code inside only if both OR statements return true, meaning that the overall AND statement will return true:\n\njs\n\nif ((x === 5 || y > 3 || z <= 10) && (loggedIn || userName === \"Steve\")) { }\n\nA common mistake when using the logical OR operator in conditional statements is to try to state the variable whose value you are checking once, and then give a list of values it could be to return true, separated by || (OR) operators. For example:\n\njs\n\nif (x === 5 || 7 || 10 || 20) { }\n\nIn this case, the condition inside if () will always evaluate to true since 7 (or any other non-zero value) always evaluates to true. This condition is actually saying \"if x equals 5, or 7 is true â which it always is\". This is logically not what we want! To make this work you've got to specify a complete test on either side of each OR operator:\n\njs\n\nif (x === 5 || x === 7 || x === 10 || x === 20) { }\n\nswitch statements\n\nif...else statements do the job of enabling conditional code well, but they are not without their downsides. They are mainly good for cases where you've got a couple of choices, and each one requires a reasonable amount of code to be run, and/or the conditions are complex (for example, multiple logical operators). For cases where you just want to set a variable to a certain choice of value or print out a particular statement depending on a condition, the syntax can be a bit cumbersome, especially if you've got a large number of choices.\n\nIn such a case, switch statements are your friend â they take a single expression/value as an input, and then look through several choices until they find one that matches that value, executing the corresponding code that goes along with it. Here's some more pseudocode, to give you an idea:\n\njs\n\nswitch (expression) { case choice1: break; case choice2: break; default: break; }\n\nHere we've got:\n\nThe keyword switch, followed by a set of parentheses.\n\nAn expression or value inside the parentheses.\n\nThe keyword case, followed by a choice that the expression/value could be, followed by a colon.\n\nSome code to run if the choice matches the expression.\n\nA break statement, followed by a semicolon. If the previous choice matches the expression/value, the browser stops executing the code block here, and moves on to any code that appears below the switch statement.\n\nAs many other cases (bullets 3â5) as you like.\n\nThe keyword default, followed by exactly the same code pattern as one of the cases (bullets 3â5), except that default does not have a choice after it, and you don't need the break statement as there is nothing to run after this in the block anyway. This is the default option that runs if none of the choices match.\n\nNote: You don't have to include the default section â you can safely omit it if there is no chance that the expression could end up equaling an unknown value. If there is a chance of this, however, you need to include it to handle unknown cases.\n\nTernary operator\n\nThere is one final bit of syntax we want to introduce you to before we get you to play with some examples. The ternary or conditional operator is a small bit of syntax that tests a condition and returns one value/expression if it is true, and another if it is false â this can be useful in some situations, and can take up a lot less code than an if...else block if you have two choices that are chosen between via a true/false condition. The pseudocode looks like this:\n\njs\n\ncondition ? run this code : run this code instead\n\nSo let's look at a simple example:\n\njs\n\nconst greeting = isBirthday ? \"Happy birthday Mrs. Smith â we hope you have a great day!\" : \"Good morning Mrs. Smith.\";\n\nHere we have a variable called isBirthday â if this is true, we give our guest a happy birthday message; if not, we give her the standard daily greeting.\n\nTernary operator example\n\nThe ternary operator is not just for setting variable values; you can also run functions, or lines of code â anything you like. The following live example shows a simple theme chooser where the styling for the site is applied using a ternary operator.\n\nhtml\n\n<label for=\"theme\">Select theme: </label> <select id=\"theme\"> <option value=\"white\">White</option> <option value=\"black\">Black</option> </select> <h1>This is my website</h1>\n\njs\n\nconst select = document.querySelector(\"select\"); const html = document.querySelector(\"html\"); document.body.style.padding = \"10px\"; function update(bgColor, textColor) { html.style.backgroundColor = bgColor; html.style.color = textColor; } select.addEventListener(\"change\", () => select.value === \"black\" ? update(\"black\", \"white\") : update(\"white\", \"black\"), );\n\nHere we've got a <select> element to choose a theme (black or white), plus a simple h1 to display a website title. We also have a function called update(), which takes two colors as parameters (inputs). The website's background color is set to the first provided color, and its text color is set to the second provided color.\n\nFinally, we've also got an onchange event listener that serves to run a function containing a ternary operator. It starts with a test condition â select.value === 'black'. If this returns true, we run the update() function with parameters of black and white, meaning that we end up with a background color of black and a text color of white. If it returns false, we run the update() function with parameters of white and black, meaning that the site colors are inverted.\n\nNote: You can also find this example on GitHub (see it running live on there also.)\n\nActive learning: A simple calendar\n\nIn this example, you are going to help us finish a simple calendar application. In the code you've got:\n\nA <select> element to allow the user to choose between different months.\n\nAn onchange event handler to detect when the value selected in the <select> menu is changed.\n\nA function called createCalendar() that draws the calendar and displays the correct month in the h1 element.\n\nWe need you to write a conditional statement inside the onchange handler function, just below the // ADD CONDITIONAL HERE comment. It should:\n\nLook at the selected month (stored in the choice variable. This will be the <select> element value after the value changes, so \"January\" for example.)\n\nSet a variable called days to be equal to the number of days in the selected month. To do this you'll have to look up the number of days in each month of the year. You can ignore leap years for the purposes of this example.\n\nHints:\n\nYou are advised to use logical OR to group multiple months together into a single condition; many of them share the same number of days.\n\nThink about which number of days is the most common, and use that as a default value.\n\nIf you make a mistake, you can always reset the example with the \"Reset\" button. If you get really stuck, press \"Show solution\" to see a solution.\n\n<h2>Live output</h2> <iframe id=\"output\" width=\"100%\" height=\"600px\"></iframe> <h2>Editable code</h2> <p class=\"a11y-label\"> Press Esc to move focus away from the code area (Tab inserts a tab character). </p> <textarea id=\"code\" class=\"playable-code\" style=\"height: 400px;width: 95%\"> const select = document.querySelector('select'); const list = document.querySelector('ul'); const h1 = document.querySelector('h1'); select.addEventListener('change', () => { const choice = select.value; // ADD CONDITIONAL HERE createCalendar(days, choice); }); function createCalendar(days, choice) { list.textContent = \"\"; h1.textContent = choice; for (let i = 1; i <= days; i++) { const listItem = document.createElement('li'); listItem.textContent = i; list.appendChild(listItem); } } createCalendar(31, 'January'); </textarea> <div class=\"playable-buttons\"> <input id=\"reset\" type=\"button\" value=\"Reset\" /> <input id=\"solution\" type=\"button\" value=\"Show solution\" /> </div>\n\nhtml { font-family: sans-serif; } h2 { font-size: 16px; } .a11y-label { margin: 0; text-align: right; font-size: 0.7rem; width: 98%; } body { margin: 10px; background: #f5f9fa; }\n\nconst reset = document.getElementById(\"reset\"); const solution = document.getElementById(\"solution\"); const outputIFrame = document.querySelector(\"#output\"); const textarea = document.getElementById(\"code\"); const initialCode = textarea.value; let userCode = textarea.value; const solutionCode = `const select = document.querySelector(\"select\"); const list = document.querySelector(\"ul\"); const h1 = document.querySelector(\"h1\"); select.addEventListener(\"change\", () => { const choice = select.value; let days = 31; if (choice === \"February\") { days = 28; } else if ( choice === \"April\" || choice === \"June\" || choice === \"September\" || choice === \"November\" ) { days = 30; } createCalendar(days, choice); }); function createCalendar(days, choice) { list.textContent = \"\"; h1.textContent = choice; for (let i = 1; i <= days; i++) { const listItem = document.createElement(\"li\"); listItem.textContent = i; list.appendChild(listItem); } } createCalendar(31, \"January\");`; function outputDocument(code) { const outputBody = ` <div class=\"output\" style=\"height: 500px; overflow: auto\"> <label for=\"month\">Select month: </label> <select id=\"month\"> <option value=\"January\">January</option> <option value=\"February\">February</option> <option value=\"March\">March</option> <option value=\"April\">April</option> <option value=\"May\">May</option> <option value=\"June\">June</option> <option value=\"July\">July</option> <option value=\"August\">August</option> <option value=\"September\">September</option> <option value=\"October\">October</option> <option value=\"November\">November</option> <option value=\"December\">December</option> </select> <h1></h1> <ul></ul> </div>`; const outputStyle = ` .output * { box-sizing: border-box; } .output ul { padding-left: 0; } .output li { display: block; float: left; width: 25%; border: 2px solid white; padding: 5px; height: 40px; background-color: #4a2db6; color: white; } html { font-family: sans-serif; } h2 { font-size: 16px; }`; return ` <!doctype html> <html> <head> <style>${outputStyle}</style> </head> <body> ${outputBody} <script>${code}</script> </body> </html>`; } function update() { output.setAttribute(\"srcdoc\", outputDocument(textarea.value)); } update(); textarea.addEventListener(\"input\", update); reset.addEventListener(\"click\", () => { textarea.value = initialCode; userEntry = textarea.value; solution.value = \"Show solution\"; update(); }); solution.addEventListener(\"click\", () => { if (solution.value === \"Show solution\") { userCode = textarea.value; textarea.value = solutionCode; solution.value = \"Hide solution\"; } else { textarea.value = userCode; solution.value = \"Show solution\"; } update(); }); textarea.onkeydown = (e) => { if (e.code === \"Tab\") { e.preventDefault(); insertAtCaret(\"\\t\"); } if (e.code === \"Escape\") { textarea.blur(); } }; function insertAtCaret(text) { const scrollPos = textarea.scrollTop; let caretPos = textarea.selectionStart; const front = textarea.value.substring(0, caretPos); const back = textarea.value.substring( textarea.selectionEnd, textarea.value.length, ); textarea.value = front + text + back; caretPos += text.length; textarea.selectionStart = caretPos; textarea.selectionEnd = caretPos; textarea.focus(); textarea.scrollTop = scrollPos; }\n\nActive learning: More color choices\n\nIn this example, you are going to take the ternary operator example we saw earlier and convert the ternary operator into a switch statement to allow us to apply more choices to the simple website. Look at the <select> â this time you'll see that it has not two theme options, but five. You need to add a switch statement just underneath the // ADD SWITCH STATEMENT comment:\n\nIt should accept the choice variable as its input expression.\n\nFor each case, the choice should equal one of the possible <option> values that can be selected, that is, white, black, purple, yellow, or psychedelic. Note that the option values are lowercase, while the option labels, as displayed in the live output, are capitalized. You should use the lowercase values in your code.\n\nFor each case, the update() function should be run, and be passed two color values, the first one for the background color, and the second one for the text color. Remember that color values are strings, so they need to be wrapped in quotes.\n\nIf you make a mistake, you can always reset the example with the \"Reset\" button. If you get really stuck, press \"Show solution\" to see a solution.\n\n<h2>Live output</h2> <iframe id=\"output\" width=\"100%\" height=\"350px\"></iframe> <h2>Editable code</h2> <p class=\"a11y-label\"> Press Esc to move focus away from the code area (Tab inserts a tab character). </p> <textarea id=\"code\" class=\"playable-code\" style=\"height: 400px;width: 95%\"> const select = document.querySelector('select'); const html = document.querySelector('.output'); select.addEventListener('change', () => { const choice = select.value; // ADD SWITCH STATEMENT }); function update(bgColor, textColor) { html.style.backgroundColor = bgColor; html.style.color = textColor; } </textarea> <div class=\"playable-buttons\"> <input id=\"reset\" type=\"button\" value=\"Reset\" /> <input id=\"solution\" type=\"button\" value=\"Show solution\" /> </div>\n\nhtml { font-family: sans-serif; } h2 { font-size: 16px; } .a11y-label { margin: 0; text-align: right; font-size: 0.7rem; width: 98%; } body { margin: 10px; background: #f5f9fa; }\n\nconst reset = document.getElementById(\"reset\"); const solution = document.getElementById(\"solution\"); const outputIFrame = document.querySelector(\"#output\"); const textarea = document.getElementById(\"code\"); const initialCode = textarea.value; let userCode = textarea.value; const solutionCode = `const select = document.querySelector('select'); const html = document.querySelector('.output'); select.addEventListener('change', () => { const choice = select.value; switch(choice) { case 'black': update('black','white'); break; case 'white': update('white','black'); break; case 'purple': update('purple','white'); break; case 'yellow': update('yellow','purple'); break; case 'psychedelic': update('lime','purple'); break; } }); function update(bgColor, textColor) { html.style.backgroundColor = bgColor; html.style.color = textColor; }`; function outputDocument(code) { const outputBody = ` <div class=\"output\" style=\"height: 300px;\"> <label for=\"theme\">Select theme: </label> <select id=\"theme\"> <option value=\"white\">White</option> <option value=\"black\">Black</option> <option value=\"purple\">Purple</option> <option value=\"yellow\">Yellow</option> <option value=\"psychedelic\">Psychedelic</option> </select> <h1>This is my website</h1> </div>`; return ` <!doctype html> <html> <head> </head> <body> ${outputBody} <script>${code}</script> </body> </html>`; } function update() { output.setAttribute(\"srcdoc\", outputDocument(textarea.value)); } update(); textarea.addEventListener(\"input\", update); reset.addEventListener(\"click\", () => { textarea.value = initialCode; userEntry = textarea.value; solution.value = \"Show solution\"; update(); }); solution.addEventListener(\"click\", () => { if (solution.value === \"Show solution\") { userCode = textarea.value; textarea.value = solutionCode; solution.value = \"Hide solution\"; } else { textarea.value = userCode; solution.value = \"Show solution\"; } update(); }); textarea.onkeydown = (e) => { if (e.code === \"Tab\") { e.preventDefault(); insertAtCaret(\"\\t\"); } if (e.code === \"Escape\") { textarea.blur(); } }; function insertAtCaret(text) { const scrollPos = textarea.scrollTop; let caretPos = textarea.selectionStart; const front = textarea.value.substring(0, caretPos); const back = textarea.value.substring( textarea.selectionEnd, textarea.value.length, ); textarea.value = front + text + back; caretPos += text.length; textarea.selectionStart = caretPos; textarea.selectionEnd = caretPos; textarea.focus(); textarea.scrollTop = scrollPos; }\n\nTest your skills!\n\nYou've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on â see Test your skills: Conditionals.\n\nConclusion\n\nAnd that's all you really need to know about conditional structures in JavaScript right now! If there is anything you didn't understand, feel free to read through the article again, or contact us to ask for help.\n\nSee also"
    }
}