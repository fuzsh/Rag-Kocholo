{
    "id": "dbpedia_8287_2",
    "rank": 72,
    "data": {
        "url": "https://www.zacharyfruhling.com/philosophy-blog/logic-and-programming-how-to-program-a-simple-guess-the-number-game-in-python",
        "read_more_link": "",
        "language": "en",
        "title": "Logic and Programming: How to Program a Simple Guess",
        "top_image": "http://static1.squarespace.com/static/595bdfa4414fb51e2862f53c/5e2de4313ea0ef64f091bd08/5ec59bf92fb3d635d76acc80/1590421489731/Logic-and-Programming-How+to+Program+a+Simple-Guess-the-Number-Game-in-Python.png?format=1500w",
        "meta_img": "http://static1.squarespace.com/static/595bdfa4414fb51e2862f53c/5e2de4313ea0ef64f091bd08/5ec59bf92fb3d635d76acc80/1590421489731/Logic-and-Programming-How+to+Program+a+Simple-Guess-the-Number-Game-in-Python.png?format=1500w",
        "images": [
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1588607201620-7E63NHBENT8YE0Z94IVF/Zachary-Fruhling-Headshot.png",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1590011272772-44GMEQTKYPLAZNQECDY7/Logic-and-Programming-How+to+Program+a+Simple-Guess-the-Number-Game-in-Python.png",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1590009117008-LS59D8X99147AQTBHFCL/Beginners-Basic-TI994A-TI-BASIC-Variables.png",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1590009566175-FJDDE3HEAZR6DF58L7JU/Guess-the-Number-Game-in-Python.png",
            "https://images.squarespace-cdn.com/content/v2/namespaces/memberAccountAvatars/libraries/56338a01e4b068397a9be02a/e202baf085e54751be36d0e92a9e13d8/e202baf085e54751be36d0e92a9e13d8.jpeg?format=300w",
            "https://images.squarespace-cdn.com/content/v2/namespaces/memberAccountAvatars/libraries/56338a01e4b068397a9be02a/e202baf085e54751be36d0e92a9e13d8/e202baf085e54751be36d0e92a9e13d8.jpeg?format=300w",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1590093864016-ATUZMSF92U5T5YYNR3LZ/Video-Introduction-to-Philosophy-Online-Class-Session-The-Nature-of-Truth-and-Philosophy-of-Science.jpg",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1590001522656-S5ZMNLR2S38BQOQJ0ESS/Dont-Go-Easy-on-Yourself-Be-Hard-on-Yourself.jpg",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1591059991940-H3ME6C3WOX9C9TL3IUYG/Digital-Archaeology-Recovered-TI-BASIC-Programs-for-the-Texas-Instruments-TI994A-Home-Computer.jpg",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1593885137580-70I2B6N7OPYMHHPXHO67/Gertrudes-Secrets-How-a-1984-Apple-II-Educational-Video-Game-Taught-Me-Logic-and-Shaped-My-Career-as-a-Philosopher.png",
            "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1601416816108-4TWI9190WNO671EWL93I/How-Physics-Peels-Back-the-Curtain-and-Reveals-the-Source-Code-of-the-Universe-or-at-Least-Its-Functional-Equivalent-Computer-Programming-and-Reverse-Engineering-A-21st-Century-Reply-to-David-Hume.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Zachary Fruhling"
        ],
        "publish_date": "2020-05-20T15:11:16-07:00",
        "summary": "",
        "meta_description": "In my Introduction to Logic classes, I am sometimes asked by students about the practical applications of formal logic. Although logic itself has  many  practical applications too numerous to list here, such as the way logic gates function in digital electronics ( and  gates,  or  gates, and so on),",
        "meta_lang": "en",
        "meta_favicon": "https://images.squarespace-cdn.com/content/v1/595bdfa4414fb51e2862f53c/1555530951571-1NKST5P1JK97SNE7LLMM/favicon.ico?format=100w",
        "meta_site_name": "Zachary Fruhling",
        "canonical_link": "https://www.zacharyfruhling.com/philosophy-blog/logic-and-programming-how-to-program-a-simple-guess-the-number-game-in-python",
        "text": "In my Introduction to Logic classes, I am sometimes asked by students about the practical applications of formal logic. Although logic itself has many practical applications too numerous to list here, such as the way logic gates function in digital electronics (and gates, or gates, and so on), learning to think like a logician makes it easy to segue into any career field requiring formal or symbolic thinking, especially any form of coding, computer programming, or software engineering. This is because many of the concepts in formal logic, such as the concept of a conditional (an if/then statement), translate directly into computer programming.\n\nI recently applied for an instructional design job in which I was asked to write some instructions for programming a basic video game as part of the application process. Since the simplest game I could think of was a guess-the-number game, and because the Python programming language has a very readable syntax, I decided to write up some instructions on programming a guess-the-number game in Python (version 3.x). I thought I would share the instructions for programming this simple game here on my website for those who are interested in learning logic concepts, learning to program, or in the connection between logic and programming.\n\nIn the following instructions you will learn a little programming, a little Python, and even a little formal logic in the form of conditional reasoning. Of course, this isn’t meant to be an exhaustive treatment of either programming or logic, not by a long shot, but it does show that some of the concepts in formal logic translate directly into learning computer programming and software engineering.\n\nGetting Started\n\nTo introduce you to some of the basic concepts of programming, let’s make a simple “Guess the Number” game right off the bat. Even a simple text-based game like this will introduce you to two of the fundamental concepts of game programming, variables and randomization. Although you can use any programming language of interest to you, this example uses the popular Python programming language because of its simple and easy-to-understand syntax.\n\nPart of the challenge of any engineering program, a video game or otherwise, and no matter how simple or how complex, is to break that program down into its essential components. For a simple Guess the Number game, we’ll need at least a few things:\n\nA way to generate a random correct answer, say between 1 and 100\n\nA way for the program to know what the correct answer is\n\nA way for the user to input a guess\n\nA way to check to see if the user’s input matches the correct answer\n\nFeedback on the user’s guess (e.g., “Correct!”; “Too High!” “Too Low!”; etc.)\n\nA way to try again if the user’s guess was incorrect\n\nLet’s build a Guess the Number game from scratch to see how all of these pieces work together in a simple game.\n\nFirst, let’s generate a random correct answer between 1 and 100 and store that correct answer in a variable called correctAnswer. A variable is like a container that holds some value. Each variable can hold only one value at a time:\n\nIn Python, you use the operator “=” to assign a value to a variable. For example, the statement “x = 5” assigns the value 5 to the variable x. So if you want to assign a specific number to the variable correctAnswer, you would use a statement like this:\n\ncorrectAnswer = 47\n\nWe can also randomize the value of the correct answer using Python’s built-in random integer function “randint” like this:\n\ncorrectAnswer = random.randint(1, 100)\n\nThis will automatically assign a random integer between 1 and 100 to the correctAnswer variable.\n\nNext we need a way for the player to input a guess, and we’ll need to store the user’s guess as a variable so we can compare it to the correct answer. Let’s use a variable called playerGuess to store the player’s guess. The Python input function allows the player to input a guess (the “int” function converts the answer from a string of text to an integer):\n\nplayerGuess = int(input(“Guess a number between 1 and 100: “))\n\nAfter the player has entered a guess, we’ll need to check to see whether the player’s guess is correct. To do this, we’ll create a variable called compareAnswer.\n\nIf the player’s guess matches the correct answer, we’ll assign the value of “Correct” to compareAnswer. If the player’s guess is too high, we’ll assign the value of “High” to compareAnswer. And if the player’s guess is too low, we’ll assign the value of “Low” to compareAnswer. To do this, we’ll need to use a conditional, which is a type of “If…, then…” statement.\n\nNotice how the structure of the following code matches the line of reasoning just described:\n\nif playerGuess == correctAnswer:\n\ncompareAnswer = “Right”\n\nelif playerGuess > correctAnswer:\n\ncompareAnswer = “High”\n\nelif playerGuess < correctAnswer:\n\ncompareAnswer = “Low”\n\nThe terms “if” and “else” should be fairly clear because they match how we use those terms in ordinary English. The term “elif,” however, is just Python’s way of saying “or else if.” Notice also the double equal sign ==. In Python a single equal sign = is used to assign a value to a variable, but a double equal sign == is used to compare two values and see if they are equal. Every programming language has its different quirks and slightly different syntax, and this is one of the quirks of Python!\n\nSo the first and second lines basically say “If the player’s guess equals the correct answer, then assign the value of “Right” to the compareAnswer variable.\n\nThe third and fourth lines basically say, “Or else, if the player’s guess is greater than the correct answer, then assign the value “High” to the compareAnswer variable.\n\nAnd the fifth and sixth lines say, “Or else, if the player’s guess is less than the correct answer, then assign the value of “Low” to the compareAnswer variable.\n\nOne we have compared the player’s guess to the correct answer, we can use the print function to provide feedback to the player based on his or her response. Again, we’ll use a conditional (an “if” statement) to provide different feedback based on his or her guess:\n\nif compareAnswer == “Right”:\n\nprint(“Correct! You Win!”)\n\nelif compareAnswer == “High”:\n\nprint(“Too High! Guess Again!”)\n\nelif compareAnswer == “Low”:\n\nprint(“Too Low! Guess Again!”)\n\nThe above code will allow the player to receive different feedback depending on whether the guess was correct, too high, or too low.\n\nFinally, all we need to do is to allow the program to run continuously until the player guesses the correct answer. To do this, we will use a loop, which allows a piece of code to run over and over until some condition is met. Let’s define a variable called gameOver with an initial value of False. We can ask the player to keep inputting guesses as long as the value of gameOver is false. When the player guesses the correct answer, we can switch the value of gameOver to True and break out of the loop, ending the game.\n\nTo create a loop in Python, we’ll use the while function:\n\ngameOver = False (Defines a variable gameOver with an initial value of False)\n\nwhile gameOver == False: (Defines the condition for the loop to keep running)\n\n[Here, indented, place the code that you want to loop]"
    }
}