{
    "id": "wrong_mix_domainrange_foundationPlace_00096_3",
    "rank": 19,
    "data": {
        "url": "https://github.com/marklogic-community/marklogic-healthcare-starter-kit",
        "read_more_link": "",
        "language": "en",
        "title": "kit: The MarkLogic Healthcare Starter Kit (HSK) is a working project for a healthcare payer data hub, particularly geared toward service to Medicaid customers. Also called an operational data store (O",
        "top_image": "https://opengraph.githubassets.com/681c4094dc0c28759756a296ac0dd862365e0a0bac7a544fb8f8efedbc3ab63a/marklogic-community/marklogic-healthcare-starter-kit",
        "meta_img": "https://opengraph.githubassets.com/681c4094dc0c28759756a296ac0dd862365e0a0bac7a544fb8f8efedbc3ab63a/marklogic-community/marklogic-healthcare-starter-kit",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "marklogic-community"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "The MarkLogic Healthcare Starter Kit (HSK) is a working project for a healthcare payer data hub, particularly geared toward service to Medicaid customers. Also called an operational data store (ODS), the HSK supports a mandate by the U.S. Centers for Medicare and Medicaid Services (CMS) to comply with the FHIR (Fast Healthcare Interoperability Resources) specifications for the electronic exchange of healthcare information. - marklogic-community/marklogic-healthcare-starter-kit",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/marklogic-community/marklogic-healthcare-starter-kit",
        "text": "MarkLogic Healthcare Starter Kit\n\nDescription & Purpose\n\nGet the Healthcare Starter Kit (HSK)\n\nDeploy the HSK\n\nInstallation Steps:\n\nUsing the HSK\n\nUsing Data Hub Central\n\nUsing Gradle\n\nIngesting the Data\n\nCurating the Data\n\nRunning Unit and Integration Tests\n\nMaintaining and Modifying the HSK\n\nExtending the HSK\n\nAbout the sample source data\n\nml-gradle\n\nData Hub Central and ml-gradle\n\nDeployment best practices and caveats:\n\nLoading the SNOMED-CT Ontology\n\nThis README is intended as a short description of the project and instructions for getting set up and running. For more information on the project as a whole please refer to the Cookbook\n\nThe MarkLogic Healthcare Starter Kit (HSK) is a working project for a healthcare payer data hub, particularly geared toward service to Medicaid customers. Also called an Operational Data Store (ODS), the HSK supports a mandate by the U.S. Centers for Medicare and Medicaid Services (CMMS) to comply with the Fast Healthcare Interoperability Resources (FHIR) specification for the electronic exchange of healthcare information.\n\nMarkLogic HSK is intended as a starting point for a healthcare data hub with working code, as well as sample data and configurations. It is also a good foundation for implementing FHIR-compliant data services when used in combination with the Marklogic FHIR Mapper.\n\nUsers can upload raw, heterogeneous health records and use the harmonization features inherited by the HSK from the MarkLogic Data Hub to canonicalize and master their data. MarkLogicâ€™s powerful default indexing and other Data Hub features make it easy to explore data and models to gain additional insight for future development and operations.\n\nDocumentation for external projects, tools, and specifications referenced by this README are available as follows:\n\nMarkLogic Data Hub\n\nMarkLogic Server\n\nHL7/FHIR\n\nClone the source or download a tagged release zip file from the MarkLogic HSK repository.\n\nThe HSK was built and tested with the following prerequisites:\n\nJava 8 or 11\n\nMarkLogic Data Hub Central v5.5.1\n\nMarkLogic Server >= v10.0-7\n\nNote: Installation steps assume a MarkLogic Server user/role with sufficient privileges is specified. Refer to the MarkLogic Data Hub documentation if needed.\n\nDownload MarkLogic Data Hub Central using the link above\n\nUnzip the tagged release or clone the source into a directory of your choosing.\n\nAt the top level of your project directory, change the mlUsername and mlPassword properties in gradle-local.properties to set your default user's username and password, based on the MarkLogic user you intend to use (admin, DrSmith, etc.).\n\nThe project includes several sample demo users, such as DrSmith (password demo), who is capable of running all operations.\n\nDeploy Healtcare Starter Kit data hub:\n\n./gradlew mlDeploy\n\nSee Maintaining and Modifying the HSK below.\n\n./gradlew mlLoadData\n\nLoads reference data input to user-defined steps and functions included with this project\n\n./gradlew loadOntologies\n\nLoads ontologies for ICD10CM & ICD10PCS, and SNOMED-CT if it exists.\n\nThere are two primary ways to access and use the deployed HSK.\n\nFor GUI access, use MarkLogic Data Hub Central.\n\nFor command line access, use gradle.\n\nA mix of these methods can be used as needed by your development requirements. See Maintaining and Modifying the HSK below for more information.\n\nIn the top level of your project directory, run java -jar marklogic-data-hub-central-5.5.1.war\n\nAt this point, you can use Data Hub Central to run the processing flows to ingest, curate, and explore the sample data and models provided.\n\nIf you prefer using the CLI to run and test flows, you can use the premade tasks we have provided to ingest & harmonize data instead via the provided gradlew utility.\n\nTo ingest all data you can run ./gradlew ingest, or to ingest a smaller set of claims (for faster setup) you can run ./gradlew ingestSmaller.\n\nIf you would like to load sets of data individually you can run the tasks that the above depend on instead:\n\nTo curate all previously ingested data you can run ./gradlew harmonizeAll.\n\nIf you would like to curate sets of data individually you can run the tasks that the above depends on instead:\n\n./gradlew harmonizeClaims ./gradlew harmonizeOrganizations ./gradlew harmonizePatients ./gradlew harmonizeProviders\n\nTo verify the deployment, two test suites are provided.\n\nTo run JUnit integration test of the complete flow from ingest to curation, use ./gradlew test\n\nTo run MarkLogic Unit Tests (developed in server-side Javascript), use ./gradlew mlUnitTest\n\nThe test suites can be found in the following project directories:\n\nJUnit integration: src/test/java/com/marklogic/hsk\n\nMarkLogic unit tests: src/test/ml-modules/root/test/suites\n\nThe ClaimSuite is an example of a fully self-contained, independent test suite that can be run just after setup is done, without needing to load data. The other unit test suites are not necessarily configured to run independently of data load.\n\nSee the Cookbook for more information on how to extend the HSK.\n\nAs mentioned previously, this project is intended as a starting point for a healthcare data hub and provides many reusable functions & code modules. While most of the code is reusable, the sample data and ingestion/mapping steps will have to be replaced to work with your own data.\n\nThe sample health population data provided in this project was generated using the Synthea synthetic health records project. It is included for illustration purposes only and should be replaced with your raw data files.\n\nThe HSK project provides sample records for 755 patients and associated healthcare providers, organizations, claims, claims transactions, and payors.\n\nThe Marklogic Gradle plugin (ml-gradle) provides the commands needed to deploy, maintain, test and modify the HSK. Full documentation can be found on the ml-gradle Wiki\n\nData Hub Central (DHC) can be used to modify entities, run ingest and curation steps, explore content, and monitor jobs. Please note that when making changes using DHC, they are not propagated to the local project directory. You can run ./gradlew hubPullChanges to download the changes made in DHC and write them to your local project directory.\n\n./gradlew hubPullChanges will overwrite any local changes you have made to Data Hub artifacts that were not pushed to the database using ./gradlew hubDeployUserArtifacts. Code modules and configuration will not be overwritten.\n\nIf you happen to clear or delete all of your user data from the staging database, data-hub-STAGING, you will need to re-ingest the reference data by running ./gradlew mlLoadData\n\nThis will restore the reference document contents found in the referenceData/ directory into the collection required to run user-defined steps included with the project.\n\nIf your data does not use SNOMED-CT codes this section can be skipped\n\nIf you need to load a SNOMED-CT Ontology into your HSK instance, you will need to download the ontology yourself as it requires a license for use and distribution."
    }
}