{
    "id": "dbpedia_2921_1",
    "rank": 60,
    "data": {
        "url": "https://pureportal.strath.ac.uk/en/publications/flight-software-design-and-implementation-for-a-cubesat",
        "read_more_link": "",
        "language": "en",
        "title": "Flight software design and implementation for a CubeSat",
        "top_image": "https://pureportal.strath.ac.uk/skin/headerImage/",
        "meta_img": "https://pureportal.strath.ac.uk/skin/headerImage/",
        "images": [
            "https://pureportal.strath.ac.uk/skin/headerImage/",
            "https://pureportal.strath.ac.uk/assets/sdg_icons/affordable_and_clean_energy-3ef7b8830c5ae63dc37fecf9e07b7fb8.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mohammed Eshaq",
            "Ibrahim Al-Midfa",
            "Zakareyya Al-Shamsi",
            "Shadi Atalla",
            "Saeed Al-Mansoori",
            "Hussain Al-Ahmad"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/skin/favIcon/",
        "meta_site_name": "University of Strathclyde",
        "canonical_link": "https://pureportal.strath.ac.uk/en/publications/flight-software-design-and-implementation-for-a-cubesat",
        "text": "CubeSats are on the rise and will dominate space soon due to their modularity, standardization, and lower cost. Re-using CubeSats for new missions is often possible by simply interchanging the payload 'cubes' with new ones that meet the new mission requirements, ideally with minimum changes to the hardware design. The problem that often arises with this level of modularity is that the Flight Software governing the operation of the spacecraft must also be modular and reusable for other missions. To achieve a degree of modularity and reduce the time required for software development, we propose a Flight Software designed from the ground up to achieve this goal. We do this by employing the following features. App-Based Flight Software: The Flight Software presented in this work comprises many Applications (Apps). The goal is to have a modular and service-oriented architecture where Apps can be added/removed based on mission requirements. Command Line Interface: Satellites typically comprise an onboard computer and many subsystems communicating via various protocols. Each subsystem has its own set of commands and responses. A human-readable Command Line Interface (CLI) is added as an abstraction layer that assists the team on the ground in controlling the spacecraft without needing to deal with the plethora of native binary commands and responses used in each subsystem. These commands can then be executed when the Satellite is on the ground using a Command Console, or they can be sent to the Satellite while in-mission using CubeSat Space Protocol packets (CLI/CSP). Script Engine: After defining the CLI command set, the same commands can be used in a Script Engine. Script files are simply sequences of commands. When a script file is triggered, commands are released and executed by the Script Engine while orbiting, whether the Satellite is still in contact or not.\n\nTY - GEN\n\nT1 - Flight software design and implementation for a CubeSat\n\nAU - Eshaq, Mohammed\n\nAU - Al-Midfa, Ibrahim\n\nAU - Al-Shamsi, Zakareyya\n\nAU - Atalla, Shadi\n\nAU - Al-Mansoori, Saeed\n\nAU - Al-Ahmad, Hussain\n\nPY - 2023/7/20\n\nY1 - 2023/7/20\n\nN2 - CubeSats are on the rise and will dominate space soon due to their modularity, standardization, and lower cost. Re-using CubeSats for new missions is often possible by simply interchanging the payload 'cubes' with new ones that meet the new mission requirements, ideally with minimum changes to the hardware design. The problem that often arises with this level of modularity is that the Flight Software governing the operation of the spacecraft must also be modular and reusable for other missions. To achieve a degree of modularity and reduce the time required for software development, we propose a Flight Software designed from the ground up to achieve this goal. We do this by employing the following features. App-Based Flight Software: The Flight Software presented in this work comprises many Applications (Apps). The goal is to have a modular and service-oriented architecture where Apps can be added/removed based on mission requirements. Command Line Interface: Satellites typically comprise an onboard computer and many subsystems communicating via various protocols. Each subsystem has its own set of commands and responses. A human-readable Command Line Interface (CLI) is added as an abstraction layer that assists the team on the ground in controlling the spacecraft without needing to deal with the plethora of native binary commands and responses used in each subsystem. These commands can then be executed when the Satellite is on the ground using a Command Console, or they can be sent to the Satellite while in-mission using CubeSat Space Protocol packets (CLI/CSP). Script Engine: After defining the CLI command set, the same commands can be used in a Script Engine. Script files are simply sequences of commands. When a script file is triggered, commands are released and executed by the Script Engine while orbiting, whether the Satellite is still in contact or not.\n\nAB - CubeSats are on the rise and will dominate space soon due to their modularity, standardization, and lower cost. Re-using CubeSats for new missions is often possible by simply interchanging the payload 'cubes' with new ones that meet the new mission requirements, ideally with minimum changes to the hardware design. The problem that often arises with this level of modularity is that the Flight Software governing the operation of the spacecraft must also be modular and reusable for other missions. To achieve a degree of modularity and reduce the time required for software development, we propose a Flight Software designed from the ground up to achieve this goal. We do this by employing the following features. App-Based Flight Software: The Flight Software presented in this work comprises many Applications (Apps). The goal is to have a modular and service-oriented architecture where Apps can be added/removed based on mission requirements. Command Line Interface: Satellites typically comprise an onboard computer and many subsystems communicating via various protocols. Each subsystem has its own set of commands and responses. A human-readable Command Line Interface (CLI) is added as an abstraction layer that assists the team on the ground in controlling the spacecraft without needing to deal with the plethora of native binary commands and responses used in each subsystem. These commands can then be executed when the Satellite is on the ground using a Command Console, or they can be sent to the Satellite while in-mission using CubeSat Space Protocol packets (CLI/CSP). Script Engine: After defining the CLI command set, the same commands can be used in a Script Engine. Script files are simply sequences of commands. When a script file is triggered, commands are released and executed by the Script Engine while orbiting, whether the Satellite is still in contact or not.\n\nKW - command line interface\n\nKW - CubeSat\n\nKW - flight software\n\nKW - onboard computer\n\nKW - script engine\n\nU2 - 10.1109/ASET56582.2023.10180675\n\nDO - 10.1109/ASET56582.2023.10180675\n\nM3 - Conference contribution book\n\nAN - SCOPUS:85167450956\n\nT3 - Advances in Science and Engineering Technology International Conferences, ASET\n\nBT - 2023 Advances in Science and Engineering Technology International Conferences (ASET)\n\nPB - IEEE\n\nCY - Piscataway, NJ\n\nT2 - 2023 Advances in Science and Engineering Technology International Conferences, ASET 2023\n\nY2 - 20 February 2023 through 23 February 2023\n\nER -"
    }
}