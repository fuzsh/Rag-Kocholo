{
    "id": "dbpedia_45_2",
    "rank": 44,
    "data": {
        "url": "https://wiki.archlinux.org/title/Wayland",
        "read_more_link": "",
        "language": "en",
        "title": "ArchWiki",
        "top_image": "https://wiki.archlinux.org/favicon.ico",
        "meta_img": "https://wiki.archlinux.org/favicon.ico",
        "images": [
            "https://wiki.archlinux.org/resources/assets/licenses/gnu-fdl.png",
            "https://wiki.archlinux.org/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Wayland is a display server protocol. It is aimed to become the successor of the X Window System. You can find a comparison between Wayland and Xorg on Wikipedia.\n\nDisplay servers using the Wayland protocol are called compositors because they also act as compositing window managers. Below you can find a list of Wayland compositors.\n\nFor compatibility with native X11 applications to run them seamlessly, Xwayland can be used, which provides an X Server in Wayland.\n\nRequirements\n\nMost Wayland compositors only work on systems using Kernel mode setting. Wayland by itself does not provide a graphical environment; for this you also need a compositor (see the following section), or a desktop environment that includes a compositor (e.g. GNOME or Plasma).\n\nFor the GPU driver and Wayland compositor to be compatible they must support the same buffer API. There are two main APIs: GBM and EGLStreams.\n\nBuffer API GPU driver support Wayland compositor support GBM All except NVIDIA < 495* All EGLStreams NVIDIA GNOME\n\n* NVIDIA ≥ 495 supports both EGLStreams and GBM.[1]\n\nSince NVIDIA introduced GBM support, many compositors (including Mutter and KWin) started using it by default for NVIDIA ≥ 495. GBM is generally considered better with wider support, and EGLStreams only had support because NVIDIA did not provide any alternative way to use their GPUs under Wayland with their proprietary drivers. Furthermore, KWin dropped support for EGLStreams after GBM was introduced into NVIDIA.\n\nIf you use a popular desktop environment/compositor and a GPU still supported by NVIDIA, you are most likely already using GBM backend. To check, run journalctl -b 0 --grep \"renderer for\". To force GBM as a backend, set the following environment variables:\n\nGBM_BACKEND=nvidia-drm __GLX_VENDOR_LIBRARY_NAME=nvidia\n\nCompositors\n\nSee Window manager#Types for the difference between Tiling and Stacking.\n\nTiling\n\nCagebreak — Based on cage, inspired by ratpoison.\n\nhttps://github.com/project-repo/cagebreak || AUR\n\ndwl — dwm-like Wayland compositor based on wlroots.\n\nhttps://codeberg.org/dwl/dwl || AUR\n\nHyprland — A dynamic tiling Wayland compositor that does not sacrifice on its looks.\n\nhttps://hyprland.org ||\n\njapokwm — Dynamic Wayland tiling compositor based around creating layouts, based on wlroots.\n\nhttps://github.com/werererer/japokwm || AUR\n\nmiracle-wm — Tiling Wayland compositor based on Canonical's Mir.\n\nhttps://github.com/mattkae/miracle-wm || not packaged? search in AUR\n\nnewm — Wayland compositor written with laptops and touchpads in mind (currently unmaintained).\n\nhttps://github.com/jbuchermn/newm/ || AUR[broken link: package not found]\n\nniri — A scrollable-tiling Wayland compositor.\n\nhttps://github.com/YaLTeR/niri/ ||\n\nPolonium — A spiritual successor of Bismuth for tiling windows on KDE 6.\n\nhttps://github.com/zeroxoneafour/polonium || AUR\n\nQtile — A full-featured, hackable tiling window manager and Wayland compositor written and configured in Python.\n\nhttps://github.com/qtile/qtile ||\n\nriver — Dynamic tiling Wayland compositor inspired by dwm and bspwm.\n\nhttps://codeberg.org/river/river ||\n\nSway — i3-compatible Wayland compositor based on wlroots.\n\nhttps://github.com/swaywm/sway ||\n\nSwayFx — Sway, but with eye candy!\n\nhttps://github.com/WillPower3309/swayfx || AUR\n\nVelox — Simple window manager based on swc, inspired by dwm and xmonad.\n\nhttps://github.com/michaelforney/velox || AUR\n\nVivarium — A dynamic tiling Wayland compositor using wlroots, with desktop semantics inspired by xmonad.\n\nhttps://github.com/inclement/vivarium || AUR\n\nStacking\n\nEnlightenment — See Enlightenment#Manually. More Info: [2] [3]\n\nhttps://www.enlightenment.org/ ||\n\nhikari — wlroots-based compositor inspired by cwm which is actively developed on FreeBSD but also supports Linux.\n\nhttps://hikari.acmelabs.space/ || AUR\n\nKDE KWin — See KDE#Starting Plasma.\n\nhttps://userbase.kde.org/KWin ||\n\nLiri Shell — Part of Liri, built using QtQuick and QtCompositor as a compositor for Wayland.\n\nhttps://github.com/lirios/shell || AUR\n\nlabwc — wlroots-based compositor inspired by Openbox.\n\nhttps://github.com/labwc/labwc || AUR\n\nMutter — See GNOME#Starting.\n\nhttps://gitlab.gnome.org/GNOME/mutter ||\n\nwayfire — 3D compositor inspired by Compiz and based on wlroots.\n\nhttps://wayfire.org/ || AUR\n\nWeston — Wayland compositor designed for correctness, reliability, predictability, and performance.\n\nhttps://gitlab.freedesktop.org/wayland/weston ||\n\nwio — wlroots-based compositor that aims to replicate the look and feel of Plan 9's Rio desktop.\n\nhttps://gitlab.com/Rubo/wio || AUR\n\nOther\n\nCage — Displays a single fullscreen application like a kiosk.\n\nhttps://www.hjdskes.nl/projects/cage/ ||\n\nnwg-shell — A GTK-based shell for sway and Hyprland Wayland compositors.\n\nhttps://github.com/nwg-piotr/nwg-shell || AUR\n\nkiwmi — A fully programmable Wayland Compositor.\n\nhttps://github.com/buffet/kiwmi || AUR\n\nphoc — A tiny wlroots-based compositor for mobile devices.\n\nhttps://gitlab.gnome.org/World/Phosh/phoc ||\n\nSome of the above may support display managers. Check /usr/share/wayland-sessions/compositor.desktop to see how they are started.\n\nDisplay managers\n\nDisplay managers listed below support launching Wayland compositors.\n\nName Runs itself on Wayland? Description No Simple CLI Display Manager on TTY. GDM Yes GNOME display manager. greetd When using a Wayland greeter Minimal and flexible login daemon. No TUI display manager written in Rust. LightDM No Cross-desktop display manager. Ly No TUI display manager written in C SDDM Yes QML-based display manager. tbsm No Simple CLI session launcher written in pure bash. AUR No Session and XDG autostart manager for standalone compositors leveraging Systemd mechanisms.\n\nXwayland\n\nXwayland is an X server that runs under Wayland and provides compatibility for native X11 applications that are yet to provide Wayland support. To use it, install the package.\n\nXwayland is started via a compositor, so you should check the documentation for your chosen compositor for Xwayland compatibility and instructions on how to start Xwayland.\n\nNVIDIA driver\n\nEnabling DRM KMS is required. There may be additional information in the official documentation regarding your display manager (e.g. GDM).\n\nKwin Wayland debug console\n\nIf you use , execute the following to see which windows use Xwayland or native Wayland, surfaces, input events, clipboard contents, and more.\n\n$ qdbus6 org.kde.KWin /KWin org.kde.KWin.showDebugConsole\n\nDetect Xwayland applications visually\n\nTo determine whether an application is running via Xwayland, you can run AUR. Move your mouse pointer over the window of an application. If the red mouse moves, the application is running via Xwayland.\n\nAlternatively, you can use and see if the eyes are moving, when moving the mouse pointer over an application window.\n\nAn other option is to run xwininfo (from ) in a terminal window: when hovering over an Xwayland window the mouse pointer will turn into a + sign. If you click the window it will display some information and end, but it will not do anything with native Wayland windows.You can use Ctrl+C to end it.\n\nYou can also use xlsclients (from the package). To list all applications running via Xwayland, run xlsclients -l.\n\nGUI libraries\n\nSee details on the official website.\n\nGTK\n\nThe and packages have the Wayland backend enabled. GTK will default to the Wayland backend, but it is possible to override it to Xwayland by modifying an environment variable: GDK_BACKEND=x11.\n\nFor theming issues, see GTK#Wayland backend.\n\nQt\n\nTo enable Wayland support in Qt 5 or 6, install the or package, respectively. Qt applications will then run under Wayland on a Wayland session.\n\nWhile it should not be necessary, to explicitly run a Qt application with the Wayland plugin [4], use -platform wayland or QT_QPA_PLATFORM=wayland environment variable.\n\nTo force the usage of X11 on a Wayland session, use QT_QPA_PLATFORM=xcb. This might be necessary for some proprietary applications that do not use the system's implementation of Qt, such as AUR. QT_QPA_PLATFORM=\"wayland;xcb\" allows Qt to use the xcb (X11) plugin instead if Wayland is not available.[5]\n\nOn some compositors, for example sway, Qt applications running natively might have missing functionality. For example, KeepassXC will be unable to minimize to tray. This can be solved by installing and setting QT_QPA_PLATFORMTHEME=qt5ct before running the application.\n\nClutter\n\nThe Clutter toolkit has a Wayland backend that allows it to run as a Wayland client. The backend is enabled in the package.\n\nTo run a Clutter application on Wayland, set CLUTTER_BACKEND=wayland.\n\nSDL2\n\nTo run an SDL2 application on Wayland, set SDL_VIDEODRIVER=wayland. SDL_VIDEODRIVER=\"wayland,x11\" allows SDL2 to use the x11 video driver instead if Wayland is not available.[6]. You may also want to install to enable window decorations (for example, on GNOME).\n\nGLFW\n\nThe package has support for Wayland, and uses the Wayland backend if the environment variable XDG_SESSION_TYPE is set to wayland and the application developer has not set a specific desired backend.\n\nSee the source code for more information.\n\nGLEW\n\nThe AUR package currently still does not work with a lot of GLEW-based applications, so the only option is to use with Xwayland. See FS#62713.\n\nEFL\n\nEFL has complete Wayland support. To run a EFL application on Wayland, see Wayland project page.\n\nwinit\n\nWinit is a window handling library in Rust. It will default to the Wayland backend, but it is possible to override it to Xwayland by modifying environment variables:\n\nPrior to version 0.29.2, set WINIT_UNIX_BACKEND=x11\n\nFor version 0.29.2 and higher, unset WAYLAND_DISPLAY, which forces a fallback to X using the DISPLAY variable. [7]\n\nElectron\n\nWayland support can be activated either using per-application command line flags or more globally using a configuration file.\n\nTo determine which electron version the application uses, see [8].\n\nNote: In Plasma, some Electron applications can use the wrong icon (default Wayland one) for the window, while using the correct icon for the taskbar. To fix that, you can create a special application/window rule, forcing the desktop file name on such applications.\n\nEnvironment variable\n\nApplications using Electron 28 and higher can use the environment variable ELECTRON_OZONE_PLATFORM_HINT set to auto or wayland.\n\nThis takes lower priority than the command line flags.\n\nCommand line flags\n\nUnlike on Chromium which Electron is based on, Electron applications do not enable WebRTC screen capture over PipeWire by default. Using --enable-features=WebRTCPipeWireCapturer is therefore recommended to avoid screen capture problems on Wayland. The capture is based on .\n\nTo use -based applications natively under Wayland when using the environment variable is not desirable or feasible, --ozone-platform-hint=auto can be added on Electron 20+.\n\nA case of missing top bars can be solved by using: --enable-features=WaylandWindowDecorations. This will typically be necessary under GNOME (supported since electron17).\n\nYou can set these flags more permanently by means of modifying the .desktop file of an application and adding the flags to the end of the Exec= line, or more cleanly by using the below-described configuration files.\n\nNote: Some packages do not forward flags to Electron, and thus will need the application developer to implement a solution.\n\nConfiguration file\n\nElectron packages read ~/.config/electronXX-flags.conf files, where XX is Electron version, or fallback to shared ~/.config/electron-flags.conf, if the versioned file is not present.\n\nPut the previously mentioned flags one per line:\n\n~/.config/electron-flags.conf\n\n--enable-features=WaylandWindowDecorations --ozone-platform-hint=auto\n\nOlder Electron versions\n\nelectron25-flags.conf applies only to version 25 of Electron. Older versions of Electron can be configured using their own electron<version>-flags.conf file.\n\nOlder versions may also require different flags, depending on the corresponding Chromium version. For example, the following flags work on Electron 13:\n\n~/.config/electron13-flags.conf\n\n--enable-features=UseOzonePlatform --ozone-platform=wayland\n\nJava\n\nThe open source implementation of the Java platform OpenJDK, does not yet have native support for Wayland. Until Wakefield, the project that aims to implement Wayland in OpenJDK, is available, Xwayland can be used.\n\nSee Debian:Wayland#Java Programs (supported since OpenJDK 16?):\n\nStarting with OpenJDK 16, the JRE can dynamically load GTK3 (which has Wayland support), it appears this might be supported according to this discussion.\n\nThe _JAVA_AWT_WM_NONREPARENTING environment variable can be set to \"1\" to fix misbehavior where the application starts with a blank screen.\n\nTips and tricks\n\nAutomation\n\nydotool ( ) - Generic command-line automation tool (not limited to wayland). Enable/start the ydotool.service user unit. See , .\n\nwtype ( ) - xdotool type for wayland. See .\n\nkeyboard - Python library that works on Windows and Linux with experimental OS X support. Also see the mouse library.\n\nwlrctl (AUR) - A command line utility for miscellaneous wlroots extensions (supports the foreign-toplevel-management, virtual-keyboard, virtual-pointer)\n\nRemap keyboard or mouse keys\n\nSee Input remap utilities.\n\nScreencast Wayland windows with X11 applications\n\nSee Screen capture#Screencast Wayland windows with X11 applications.\n\nTroubleshooting\n\nColor correction\n\nSee Backlight#Color correction.\n\nSlow motion, graphical glitches, and crashes\n\nGnome-shell users may experience display issues when they switch to Wayland from X. One of the root cause might be the CLUTTER_PAINT=disable-clipped-redraws:disable-culling set by yourself for Xorg-based gnome-shell. Just try to remove it from /etc/environment or other rc files to see if everything goes back to normal.\n\nRemote display\n\n(used by sway) offers a VNC backend via since version 0.10. RDP backend has been removed [9].\n\nhas now remote desktop enabled at compile time, see [10] and for details.\n\noffers a VNC server for . krfb-virtualmonitor can be used to set up another device as an extra monitor.\n\nThere was a merge of FreeRDP into Weston in 2013, enabled via a compile flag. The package has it enabled since version 6.0.0.\n\nAUR (or AUR) is a transparent proxy for Wayland applications, with a wrapper command to run over SSH\n\nHere is an example for launching a remote KDE kcalc under Plasma:\n\n$ waypipe ssh example.local env QT_QPA_PLATFORM=wayland-egl QT_QPA_PLATFORMTHEME=KDE dbus-launch kcalc\n\nInput grabbing in games, remote desktop and VM windows\n\nIn contrast to Xorg, Wayland does not allow exclusive input device grabbing, also known as active or explicit grab (e.g. keyboard, mouse), instead, it depends on the Wayland compositor to pass keyboard shortcuts and confine the pointer device to the application window.\n\nThis change in input grabbing breaks current applications' behavior, meaning:\n\nHotkey combinations and modifiers will be caught by the compositor and will not be sent to remote desktop and virtual machine windows.\n\nThe mouse pointer will not be restricted to the application's window which might cause a parallax effect where the location of the mouse pointer inside the window of the virtual machine or remote desktop is displaced from the host's mouse pointer.\n\nWayland solves this by adding protocol extensions for Wayland and Xwayland. Support for these extensions is needed to be added to the Wayland compositors. In the case of native Wayland clients, the used widget toolkits (e.g GTK, Qt) needs to support these extensions or the applications themselves if no widget toolkit is being used. In the case of Xorg applications, no changes in the applications or widget toolkits are needed as the Xwayland support is enough.\n\nThese extensions are already included in , and supported by .\n\nThe related extensions are:\n\nXwayland keyboard grabbing protocol\n\nCompositor shortcuts inhibit protocol\n\nRelative pointer protocol\n\nPointer constraints protocol\n\nSupporting Wayland compositors:\n\nMutter, GNOME's compositor since release 3.28\n\nwlroots supports relative-pointer and pointer-constraints\n\nKwin\n\nKDE#X11 shortcuts conflict on Wayland\n\nKeyboard shortcuts inhibit\n\nSupporting widget toolkits:\n\nGTK since release 3.22.18.\n\nGTK themes not working\n\nSee https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland.\n\nAvoid loading NVIDIA modules\n\nAdd __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json as environment variable before launching a Wayland compositor like sway.\n\nMagnifying/surface scaling\n\nScreen magnifying is not solved yet, a pull request was merged mid-2022 providing the protocol wp-surface-scale.\n\nSee also"
    }
}