{
    "id": "dbpedia_45_2",
    "rank": 45,
    "data": {
        "url": "https://forum.zorin.com/t/the-trouble-with-wayland/36189",
        "read_more_link": "",
        "language": "en",
        "title": "The Trouble with Wayland",
        "top_image": "https://forum.zorin.com/uploads/default/original/1X/35db5e03b6c5bb3889141abcfbc0145b622eb4c5.png",
        "meta_img": "https://forum.zorin.com/uploads/default/original/1X/35db5e03b6c5bb3889141abcfbc0145b622eb4c5.png",
        "images": [
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/letter_avatar_proxy/v4/letter/a/b782af/48.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/hackgets/48/24674_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/hackgets/48/24674_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/hackgets/48/24674_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/hackgets/48/24674_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/aravisian/48/5781_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/hackgets/48/24674_2.png",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/zenzen/48/22087_2.png",
            "https://static.lwn.net/images/favicon.png",
            "https://forum.zorin.com/images/emoji/google/wink.png?v=12",
            "https://forum.zorin.com/uploads/default/optimized/2X/0/038c34db13cf39e5b530194b1c1f7ef431ff5f7c_2_345x168.jpeg",
            "https://forum.zorin.com/user_avatar/forum.zorin.com/startreker/48/9250_2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ponce-De-Leon"
        ],
        "publish_date": "2024-03-26T23:57:43+00:00",
        "summary": "",
        "meta_description": "Now that Wayland is the default display manager on Zorin OS 17 Core and Zorin OS 17 Pro, it becomes more critical that users understand Wayland and the implications of Wayland. \nWayland is often described as &quot;new&quot; and &quot;m&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://forum.zorin.com/uploads/default/optimized/2X/e/e12109fad1fa15fb6ec4170648ec9a5faddbc027_2_32x32.png",
        "meta_site_name": "Zorin Forum",
        "canonical_link": "https://forum.zorin.com/t/the-trouble-with-wayland/36189",
        "text": "Now that Wayland is the default display manager on Zorin OS 17 Core and Zorin OS 17 Pro, it becomes more critical that users understand Wayland and the implications of Wayland.\n\nWayland is often described as \"new\" and \"modern.\" In actuality, however, Wayland was initially released in September of 2008.\n\nIt has taken a great deal of time to get to where we are today, with Wayland actually generally working on many systems. Wayland... is not new.\n\nOne of the primary rules of Linux and a tenet of FOSS is that we do not break user space.\n\nThis is a very simple rule. It is basic and easy to follow.\n\nAnd the trouble with Wayland is that it breaks this rule.\n\nLet's look first at the pros and cons. What makes Wayland appealing? What makes it unappealing?\n\nWayland merges display server and compositor as a single function. In X-windowing, this is a separate feature, along with the Window Manager as a client side process. While Wayland simplifies this, it also reduces the feature availability of both window management and compositing. So even as the process is simplified, so, too are the results.\n\nIn Wayland, the compositor receives pixel data directly from clients whereas in X-windowing, the compositor must fetch all pixel data. This produces latency in X-windowing, but not in Wayland. However, this is measured in milliseconds, far below the threshold for human sensitivity. You cannot notice, see or experience this speed difference which invalidates the argument that Wayland is faster.\n\nWayland delegates that rendering is performed client-side. X-Windowing can either permit rendering from the client or perform rendering with its compositor. With Wayland, some rendering can appear smoother but X-windowing can perform multiple instances of rendering and allow more features and functionality while Wayland remains hard-coded to be limited in features and functionality.\n\nWayland does not support sessions, selections and drag and drop. This must be handled solely by the Desktop Environment. X-windowing can handle all the familiar features. This is because the X Server communicates directly with the client-side and the kernel. Wayland allows the kernel to communicate directly to the client. This has been one of the strongest arguments in favor of Wayland. Indeed, it was the argument that initially gained my support for Wayland. It simplifies the process and cuts out the middle man. However, in practice, it is shown that this is an oversimplification. Wayland is handicapped by being unable to handle the basic features of a Display and the inability for a go-between in communication limits what a desktop environment can provide the End User.\n\nWayland isolates the I/O of window to API communications, delegating communication exist only between an active application and the display at a time. This, too, has been an argument in favor of Wayland by saying it provides better security than X-windowing. However, to make this argument is misleading. For one thing, X-windowing was patched many years ago to limit access to the display from applications, a factor proponents for Wayland seem to \"forget\" to mention and instead suggest that the X server does not do so (Yet, the X server does do so). Further, an API must communicate with display in order to produce a GUI application. Only with Wayland, it does not need to also work its way through the in-built securities of X-Windowing to get there. Since the display must be accessed, whether all at once or one at a time, the end result is exactly the same.\n\nThe above gives us some insight into the pros and cons of Wayland and X-windowing. From the above alone, we could easily conclude that this must be a user choice; based on the needs and preferences of the user.\n\nWell, it isn't. Remember, Wayland is intended to fully replace X-Windowing.\n\nAnd here is where we meet the Trouble With Wayland: It breaks API's, which breaks the very first and primary rule of Linux. It breaks user space.\n\nI will quote Linus Torvalds:\n\nThe biggest thing any program can do is not the technical details of the program itself; it’s how useful the program is to users.\n\nSo any time any program (like the kernel or any other project), breaks the user experience, to me, that’s the absolute worst failure that a software project can make.\n\nWithout the users, any and every project is nothing. It is meaningless without the user base. This is because any project is supposed to be useful and helpful for those that use it.\n\nOn Zorin OS 17 using Wayland, it breaks Gnome-Screenshot. This is why Zorin OS 17 does not include the Gnome-Screenshot package, but instead has screenshot (With less features and functionality) built into the shell.\n\nUsing Wayland, Nvidia breaks. Zorin OS must default back to X windowing in order to unbreak itself.\n\nWayland does not respect EWMH protocols and breaks CLI tools like xprop, xrandr, wmctrl, preventing user controls and access of their display management and ability to adjust necessary features like Refresh rate and Resolution.\n\nWayland breaks all X11 applications. A stop gap measure was added in the form of XWayland, which is considered a temporary means of providing basic support for these applications on Wayland.\n\nWayland breaks screen-sharing and remote desktop applications.\n\nWayland breaks Window Management - which is why Wayland is not on XFCE or many other Desktop Environments.\n\nWayland breaks accessibility tools and assistive technologies which, let's be honest with ourselves, is probably the worst thing you could ever break and maintain a conscience.\n\nWayland breaks many features of Multi-Monitor support like display hotplugging, resolution management, display arrangement and other features.\n\nHere's the problem: Whenever Wayland breaks something, they maintain shifting the blame onto - everyone else. They say that app developers need to get Wayland Compliant. They say that Distributions need to conform to them.\n\nThey say that the users must get onboard with Wayland. The onus shifts onto every non-Wayland party to do what Wayland says we are supposed to do for them.\n\nEverything it breaks, we are told to find work-arounds for or to use Wayland now, as it breaks things, and wait for someone else to provide a fix.\n\nThis is the antithesis of what Linux is: Do Not Break User Space. If your API breaks user space, it must be reverted. No Regressions.\n\nWayland does not respect the User Base that provides the purpose of its existence. This is because Wayland is not for the users. It is for the developers.\n\nIt breaks the users workflow and performance, the users expectations of application features and functionality. While it has some pros, in the end, Wayland shifts blame for their breakage onto the users whom they gave no choice to nor accepted input from.\n\nThey tell us that we were supposed to just accept what they offer. Whether you believe Wayland is better or X is better falls to the side. It no longer matters. What matters is the users and Waylands disregard for the users is the growing Direction of developers. Just like Microsoft. Just like Google. All the things we came over to Linux to get away from. We came over to Linux because Linux has a rule: Do Not Break User Space.\n\nThat is the Trouble With Wayland.\n\nBlockquote However, this is measured in milliseconds, far below the threshold for human sensitivity. You cannot notice, see or experience this speed difference which invalidates the argument that Wayland is faster.\n\nI am not a fan of making Wayland the default user experience as I have had my fair share of random things not working (IE if I don't have my games set to fullscreen (maybe i want them fullscreen borderless windows) the screen may flicker irregularly) but I can't agree with this statement.\n\nRegardless of opinions, if something is faster (and measurably so), then regardless of if someone may notice that millisecond increase or not does not mean that the argument is invalidated. In fact, I would actually argue it's the observable benefits that a user will notice more so. For example, window tearing is essentially gone now when dragging a window across the desktop, and scrolling on a webpage is a smoother experience overall. This is definitely a benefit that Wayland brings to the desktop experience.\n\nWhile I also have no proof of this (I'm going to actually do some experimenting tonight after work), while my FPS in games hasn't gone up or down, the feeling I get while playing is that of the frame times are more consistent. Again, this could be me taking the Wayland placebo, so I'm going to look into this tonight with hopefully numbers to either confirm or deny my gut instincts.\n\nI also agree with @Hackgets in regards to the breaking of the user space. I agree that it is absolutely something that should not be broken. However, to say that it can never happen is weird, considering that any app that has some sort of update can break that in an instant, without any ill-intent meant by the developer or anyone else. Sometimes things just break.\n\nDo I think Wayland should be default? No, it has a lot of issues. But I'd like to think the reason everyone is making this seemingly sudden (although not really given Wayland isn't technically new at this point) push to use Wayland is to force everyone to actually look into it and how things work. I know there's some developers out there that have refused since it was released to even look at it.\n\nI firmly believe that if we do not radically rethink the way certain things work we cannot reasonably improve the Linux Desktop. This will come with breakage in early adoption, but ultimately it has advantages (that you have outlined)\n\nI understand the sentiment behind \"Don't Break User Space\", but you're disregarding where it comes from, that being kernel development. Not only was X obviously never apart of the Linux Kernel, but also does that statement refer to developing the kernel in a way that doesn't break projects that depend on it. The statement does not mean \"we shouldn't create another project that is different and can offer an alternative API to achieve similar goals to [XYZ]\". By that logic, FreeBSD shouldn't exist because it can be used as an alternative to any GNU/Linux operating system with it's BSD kernel. Yes they're both Unix-Like, does that mean they need to share 1:1 ABI and API compatibility?\n\nWhat Wayland is doing is not breaking projects that depend on X. It is being framed as breaking another project, but no, you can still run Xorg implementing X11, and run all your X Applications.\n\nFraming Wayland as breaking X is fundamentally mis-framing the issue as Wayland being some sort of evildoer update to the X Windowing System when it is a seperate project that developers have decided to adopt over X. They could've also picked Mir while that was still around, would we then blame Mir for breaking X?\n\nHopefully not, as Mir was also a separate project from X.\n\nor, to give another example of a different component, does Musl Libc break Glibc? No.\n\nWhen an application is designed around Glibc, and it doesn't work with Musl Libc, that is not Musl Libc \"breaking\" the application, that is the application being designed around Glibc.\n\nSimilarly, Wayland doesn't break X because some application is designed around X.\n\nI also want to offer insight into my thoughts on Wayland using a thought experiment:\n\nImagine for a moment, Wayland was developed without the Xwayland project. Imagine for a moment that X compatibility was never preserved in this way at all, but developers still adopted Wayland over time. Would we still blame Wayland for breaking X?\n\nThe chance that'd happen is probably much lower due to the fact that nobody tried to keep X compatibility around. The biggest reason that Wayland is getting so much blame in my eyes, and why so many people are saying it \"breaks\" X is because some developers tried to keep compatibility intact to the best of their ability by working on XWayland, so that there wouldn't be even more issues on the path to a Wayland transition with some programs simply not starting at all.\n\nAnother reason I can think of is that Wayland is advertising itself as a replacement to the X Windowing System, and many people take that as \"oh so it has 1:1 API compatibility with X\" when that is untrue. It was never meant as a drop-in replacement. XWayland is provided on a best-effort basis.\n\nUltimately, I don't believe Wayland should be getting the blame because developers have chosen it over maintaining X.org.\n\nYes, it would've been more convenient and would've preserved more features during the transition phase if XWayland never existed and we would all use X until Wayland is 1000% ready, but that is not how development works, and blaming Wayland for not keeping 1:1 compatibility with X11 is a take that I simply do not understand, and that I will probably never understand because it fundementally collides with how I logically dissect this entire situation. Not to mention that with less eyes on actually using a Wayland desktop, it would take thousands of hours more time to develop desktops based on it as there is much less eyes on reporting bugs and issues with various desktops running in such a setup.\n\nthe project was started in 2008, a 1.0 release was on the 22nd of October 2012.\n\nX allows sandbox escapes because it doesn't have full GUI sandboxing. It is not just about inputs (which can be globally read from the X-Server) but also about protocol security. To achieve proper seperation between windows and a higher level of GUI Sandboxing you'd need to use a Multi-Server setup.\n\nIf you've ever ran a game with and without VSync for latency reasons, you know that you may not be able to pinpoint what is wrong as a human, but you can DEFINITELY feel it, that small difference in latency.\n\nNo, that is an upstream GNOME change that is also on GNOME on Xorg.\n\nxprop and xrandr were explicitly written for X, as the name implies. wmctrl continues to work on any compositor that has supported it before and done a Wayland transition, like KWin:\n\nVideo for Reference\n\nAnd also, EWMH were always meant for the window manager to implement , not X exclusively. Yes it's an X Standard, no that doesn't mean you cannot implement it on Wayland.\n\nPipewire. Yes that isn't \"wayland native\" by your definition, but it works better, across Wayland and X11, and gives users the feature. Do we need any more than that?\n\nXFCE: Wayland Roadmap\n\nThat is a compositors' job, the display protocol is for clients to display stuff. That doesn't mean Wayland Compositors don't still implement this\n\n(I won't send a recording of me hotplugging my TV.)\n\nReminder that the X Windowing System existed before Linux and was ported to Linux as a fun side project. both X and Wayland are also on FreeBSD for what it's worth.\n\nHave you not, yourself, pointed out that Wayland is intended to fully replace X and that XWayland is seen as a temporary measure?\n\nYour statement implies that we have control and an alternative, so nothing to worry about. Except that it contradicts that Wayland is to fully replace X, removing that alternative and user choice.\n\nNoting what Wayland breaks is factual, not framing. To follow the logic:\n\nThe End User is what matters since that is what the projects are intended for: The performance, workflow and use by the user.\n\nIf a project disrupts, breaks or inhibits the workflow, productivity or even the API's or applications the user relies on, this is breakage of user space.\n\nYou are injecting an argument into my point (evildoer), yet what I said above stands by its own merit. Breaking user space disrupts the workflow and reliability of what the users relay on to process projects, work, games, entertainment, data management...\n\nMy argument is not that Wayland devs have long handlebar mustaches that they twirl with an evil grin.\n\nRather, that they have fallen back to placing the blame elsewhere and making excuses to rationalize and justify that what they are doing is necessary.\n\nAnd... you are doing the exact same thing. You are saying that this is necessary and that we must do this for Progress and that we should manage our frustrations with it until Wayland Improves.\n\nWayland lacks many of the functions and features that X offers and that the user are attuned to and rely on.\n\nWayland takes those away.\n\nOk? So... what happens next? Why should we believe that Wayland will re-introduce those functions and features at some unknown future date? Why should we believe that it can, when it is incapable of doing so, now? Fifteen Years Later?\n\nAnd so far, Wayland developments makes no statements nor promises to do so. Instead, the suggestion is that \"we will get used to Wayland.\"\n\nUm... Yes. Definitely. 100% they would. Are you kidding?\n\nThe entire GnuLinux community would have been up in arms is what would have happened!\n\nAll of the sudden the entire Display protocol changed and the users workflow was radically altered?\n\nThey would have issued a very loud report. Without any doubt.\n\nThis argument relies on the notion that Wayland actually does sandbox - it doesn't. This term is used because it sounds like something familiar and is similar in some ways to Application Sandboxing which containerizes the app to isolate it from Root.\n\nHowever - In Wayland, this sandbox does not isolate the application from Root because it is necessary for the application to directly access the Display Protocol. For this reason, Wayland delegates it to one application having acess to portions it needs in that moment, whereas (initially, though this is no longer the case) the X -windowing system allowed the application full access to the entirety of the display protocol all at once.\n\nThis is why the security arguments made on the web are so misleading.\n\nThe end result is the same.\n\nYou are lifting the blame off of Wayland to place it on Gnome as I point out in my O.P.\n\nHowever, it was necessary for Gnome to to do this in order to make the screenshot tool compatible with Wayland. Exactly as I described in the O.P.\n\nNo. Wayland breaks Gnome Screenshot tool. So, Gnome had to integrate it into the Gnome Shell in order to conform it to Wayland.\n\nYour further arguments about EWMH, Xprop, etc perform the same as I describe in my O.P.\n\nShifting blame away from Wayland for the breakage. Yes, they are designed to work with a Window Management that Wayland lacks. By introducing Wayland, it is breaking what works and what the user relies on.\n\nIf you write a program that is not compatible with the existing frameworks, then you cannot say that it does not break them because you wrote it to not be compatible with them.\n\nRather, it is more accurate to say that it breaks them due to the lack of compatibility.\n\nYes, the XFCE developers have gone with CSD's and are considering transition. They openly state that they are not sure when or even IF they will implement a transition. It is based on whether they can figure out a way of doing it.\n\nThe very link you posted clarifies this and notes its dependency on window management and the necessity of maintaining it:\n\nKeep X11 compatibility for the foreseeable future\n\nNvidia support to Wayland is still problematic, one more reason to keep X11 backward compatibility (nouveau driver usually is slower)\n\nWayland compositors which were written from scratch like Weston or sway will never run as a x11 window manager. But others which started as x11 window managers such as kwin or mutter still keep their x11 window management code\n\nFreeBSD has decent support for Wayland, OpenBSD is still working on supporting Wayland\n\nWayland is the compositor.\n\nI think my post here also addresses @Hackgets concern and your concern about the kernel team. In pointing out clearly why user space is the primary consideration, it is clear that the argument is not deifying either a person or a rule. It is exemplifying the importance of why all these projects exist: To Provide the End User with a usable and reliable Desktop Experience.\n\nTo violate this is to violate the very users all projects depend on for support.\n\nWithout the users; all projects are utterly meaningless. And we are wise to remember this.\n\nBut never as a drop-in replacement.\n\nYes, Wayland is supposed to replace X as the display protocol, as that is what developers have been focusing on doing in the past couple of years as we move away from X. This does not however mean that Wayland was designed as a drop-in replacement. That would be more akin to something like Pipewire-Pulse, which is a drop-in replacement for Pulseaudio, just to give an example.\n\nI don't think there would've been a way to keep 1:1 compatibility with X whilst also following Wayland design goals.\n\nI was trying to go off of various things I've seen online, e.g the \"Wayland breaks everything\" post. The \"evildoer\" thing is not intended to come from your point. Sorry if that was not clear enough from my wording.\n\ncounter-question, did the X Windowing System have all of these extensions within the first 15 years? Barely. Infact, the RandR extension was not finished 14 years after X, as the historic paper going over RandR 0.91 mentions that, at the time of writing, the X Extension Framework had \"served them well for the past 14 years\".\n\nhttps://static.usenix.org/publications/library/proceedings/usenix01/freenix01/gettys.html\n\nGoing off of the \"last changed\" date at the bottom, this was roughly in 2002, roughly 14 years after the X Windowing System was first envisioned\n\nAfter some more digging, RandR 1.0 was apparently finished in 2002, on the 4th of October. You can see this when checking this commit and which lines it has removed.\n\nThis is an extension to X, with the equivalent on Wayland being literally the wlrandr extension. That was talked about in 2013 by Phoronix.\n\nSome of the most common things that are complained about often have been fixed by the Wayland Contributors 11 years ago from now.\n\nTwo things:\n\nGNOME Shell has had it's own Screen Casting interface, it only uses XSHM and XComposite directly as a fallback. This is evidenced by things like:\n\nGitHub - fzwoch/obs-gnome-screencast: GNOME Screen Cast OBS Studio plugin\n\nAgain, PipeWire.\n\nRecording a traditional X11 desktop is easy with existing tools. Because every application can grab the window content of any window or monitor on the X11 server, screen sharing is rather simple to do. Many applications support this method like ffmpeg with the x11grab source or apps built with the Electron framework. The typical APIs for this are XShm and XComposite, which are only available on X11.\n\nWith wayland, this becomes more difficult from a developers point of view. The security architecture of wayland forbids unauthorized access to other windows. No capture API is provided by wayland itself.\n\nInstead, applications must explicitly request the user to grant them access to a screen or window. This is done through xdg-desktop-portal, a D-Bus API that was originally invented for sandboxed Flatpak apps.\n\nThe actual window content is delivered through PipeWire in the form of a video stream. To access it, an application has to connect to this stream and negotiate a format with the stream source.\n\n- Dafabhoid on Github\n\nBefore you say it, yes I know that says \"No capture API is provided by wayland itself.\", but does that matter to the end user if they can just select \"Window Capture (Pipewire)\" in OBS and call it a day?\n\nHow can something that did not exist to begin with break?\n\nDo Windows Programs break on Linux because they aren't written to work on Linux?\n\nWhat about macOS binaries? FreeBSD?\n\nAre all of these inherent and often intended incompatibilities considered breakage?\n\nNo. The compositor is the desktop component that implements the Wayland Protocol and puts all of your Wayland clients into one usable output.\n\nThat makes sense given:\n\nThe compositor is in charge of combining the contents of multiple surfaces into one displayable output.\n\n- Wayland protocol | Wayland Explorer\n\nDoes that make a difference, somehow?\n\nYou say \"as we move away from X\" in a way that implies that this is necessary. It's golden.\n\nThere must be demonstrable Progress in order to call it that.\n\nWayland is not new, not modern and it is not progress. It is just a different display protocol. It does not progress the GnuLinux desktop. It offers something different in certain ways, but also subtracts from the existing reliable and stable framework.\n\nThat is not how we define \"progress\".\n\nI do not see how this relevant. It is there, now, in spite of those promoting Wayland as a Security Issue implying that it is not there.\n\nRehashing that it once wasn't makes no difference.\n\nThis is also applicable to the \"Xorg is old\" argument. It does not matter how old it is. It does not matter when it was very first conceptualized.\n\nAll that matters is Todays Maintenance of the project. We are using many different projects under that hood that are older than 40 years... Yet no one mentions all that because they are not pushing for an agenda to introduce something else. It's not a problem, until someone wants to claim that it is to get something else.\n\nYour response does not actually address the missing features I pointed out above. It implies that they are fixed - But they are not and most importantly - cannot be fixed. How Wayland works and how it is structured is the very reason why Wayland could not include the discussed features. Otherwise, it would have offered them from the beginning.\n\nThis is a Red Herring and in no way does it show that Gnome-Screenshot was incompatible with Wayland, requiring the Gnome Shell integrated tool as part of the Desktop.\n\nHowever, what I said above is aligned with my statements about Wayland and how Wayland passes things onto the Desktop Environment:\n\nYou lost me on this one.\n\nAre you saying that Xorg did not exist for Wayland to break?\n\nIt... What?\n\nYour examples are of Windows applications being made for Windows OS. This is irrelevant because they are not made for GnuLinux. Wayland is made for GnuLinux.\n\nhttps://wayland.freedesktop.org/#:~:text=Wayland%20is%20the%20language%20\n\nWayland is a replacement for the X11 window system protocol and architecture with the aim to be easier to develop, extend, and maintain.\n\nWayland is the language (protocol) that applications can use to talk to a display server in order to make themselves visible and get input from the user (a person). A Wayland server is called a \"compositor\".\n\nDisplay servers that implement the Wayland display server protocol are also called Wayland compositors because they additionally perform the task of a compositing window manager.\n\nMy experience with Wayland has been mostly positive, with only a few annoyances here and there. But those annoyances don’t exist with Xorg. Without this choice, I would be forced to live with those annoyances until they are fixed, and there would be, of course, no guarantees that this would happen.\n\nEven if we assume that my use case is such an impossibly remote edge case that is not worth the time to implement a fix for it, I still can do without issues using an existing technology, a couple of clicks away. This is the power of freedom of choice, and indeed the real trouble with Wayland.\n\nIn short, it’s great that we have Wayland. Competition is good for the consumer. But there needs to be a real viable choice to be made. Gnome has made this very clear: they will stop offering Xorg as an option in the near future. Distributions like Fedora are ahead of schedule on this. And distributions like Zorin OS are implementing this as the default option. Defaults are extremely powerful.\n\nFrom the user's perspective it's irrelevant why the old screenshot tool, or whatever, doesn't work. It used to work and now it doesn't. The user is being told that the improvements happen under the hood, but those improvements should not come at the cost of the ones over the hood.\n\nIf breaking changes need to happen it better be worth the trouble. With Wayland, I'm struggling to see the improvement at the moment; maybe this will change in the future.\n\nTo compare this Wayland situation with something we all here are familiar with, the numerous issues that the Zorin OS 17 release is going through, take a look at this recent thread, titled \"Why upgrade from 16.3 to 17.1?\".\n\nAs with Wayland, I've only experienced a few issues here and there with Zorin OS 17 (granted, I only use it in a virtual machine). But, as with Wayland, at the end of the day, I need things to work. I honestly don't recommend people to upgrade to Zorin OS 17 unless they have good reason for it, like the need to run newer versions of a library, kernel some other software. I give the same advice when this comes up even on the latest version if Zorin OS.\n\nIn theory, the benefits of Zorin OS 17 more than justify making the upgrade. But, to quote Linus Torvalds:\n\nTheory and practice sometimes clash. And when that happens, theory loses. Every single time.\n\nThat is the trouble with Zorin OS 17, and indeed the trouble with Wayland. For as long as there are issues to resolve that impact the user experience, it should remain an alternative to Xorg, not the default, and certainly not the only viable option.\n\nWith all that said however, there's something that I'm really curious about regarding the security aspect of Wayland and Xorg. Everywhere I looked online it's stated that Wayland is more secure than Xorg because of how it's designed, and how Xorg allows any running program to read the contents of any window in the display server (and please forgive me if I'm misusing some of these terms).\n\nOnly here have I read from Aravisian that this is not the case, at least not anymore. I would really like to know more, but I'm not proficient enough to read directly from the source code. So, is there a proof of concept that demonstrates this or some other source that compares the security mechanisms of Xorg and Wayland?\n\nFor the record, a lot of the reason why I chose not to upgrade to OS 17, was due to the talk of them switching to Wayland. All I ever hear about Wayland, is how it breaks the system. And I saw just how many reports that came in from new Zorin OS 17 users, who were reporting problems, due to the use of Wayland.\n\nAlso, desktop users have less requirements from an operating system, to utilize the hardware. But laptop users such as myself, who have dual GPU systems, and multiple monitors connected to the laptop via HDMI & Display Port, have much higher level requirements.\n\nExperiencing Linux as I have for the past decade now, I've not had a perfect experience being a laptop user, especially in regards to fractional scaling issues, as I have reported many times on here, since I have been a 4K user.\n\nHaving said that however, the reports on how much Wayland breaks the system, and takes away display options, and screws with dual GPU systems, why in the world would I want that? Keep in mind I am a gamer guys, there's a reason why I have an Nvidia GPU in my system. If Wayland breaks the gaming or production experience, why in the world would I want that?\n\nAnd even though my laptop has a built in screen, unless that laptop is directly in front of me, and within very close range, its useless to me. This is the reason why I use multiple monitor mode, I have one monitor connected via Display Port, and one TV connected via HDMI. If Wayland breaks my ability to use these displays, and or manage them, I ask again, why would I want that?\n\nI agree with Linus Torvalds, I want a system that just works. My user experience shouldn't be broken, because some developer wasn't in the mood, to make their software compatible with modern hardware functionality. I agree that it really is starting to sound like Wayland is becoming like the next Microsoft.\n\nZorin OS 16.3 is working mostly perfect for me, minus the Zorin Connect APP, which doesn't work at all. As long as I continue to receive security updates until 2025, I see no reason to upgrade at this time, as long as Wayland is breaking systems. Nope, sorry, not going to do it, I need reliability, not incompatibility.\n\nMaybe when Zorin OS 18 comes out, they will have sorted things out by then, so that the user experience doesn't get broken. But until then, I'm not touching Wayland with a 10-foot pole. My philosophy for developers is, stop using users (who never agreed) to beta test your software. Make your software work out of the box, or go home.\n\nThis may come as a shock to many experienced Linux users, but most folks don't have the time in modern day, to get their OS software working when it doesn't out of the box. We live busy lives, and have much more important things to do, then to figure out broken garbage out of the gate. Wayland developers, fix your philosophy on development, and fix your Wayland!\n\nAt the end of the day, the pro's don't outweigh the cons of usage."
    }
}