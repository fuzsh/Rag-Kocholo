{
    "id": "dbpedia_45_3",
    "rank": 43,
    "data": {
        "url": "https://wayland.app/protocols/text-input-unstable-v3",
        "read_more_link": "",
        "language": "en",
        "title": "Text input protocol",
        "top_image": "https://wayland.app/protocols/favicon.ico",
        "meta_img": "https://wayland.app/protocols/favicon.ico",
        "images": [
            "https://wayland.app/protocols/logo.svg",
            "https://wayland.app/protocols/logo.svg",
            "https://wayland.app/protocols/logos/gnome.svg",
            "https://wayland.app/protocols/logos/kde.svg",
            "https://wayland.app/protocols/logos/sway.svg",
            "https://wayland.app/protocols/logos/hyprland.svg",
            "https://wayland.app/protocols/logos/weston.svg",
            "https://wayland.app/protocols/logos/mir.svg",
            "https://wayland.app/protocols/logos/Steam_Deck.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A better way to read Wayland documentation",
        "meta_lang": "en",
        "meta_favicon": "/protocols/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Request text input to be enabled\n\nRequests text input on the surface previously obtained from the enter event.\n\nThis request must be issued every time the active text input changes to a new one, including within the current surface. Use zwp_text_input_v3.disable when there is no longer any input focus on the current surface.\n\nClients must not enable more than one text input on the single seat and should disable the current text input before enabling the new one. At most one instance of text input may be in enabled state per instance, Requests to enable the another text input when some text input is active must be ignored by compositor.\n\nThis request resets all state associated with previous enable, disable, set_surrounding_text, set_text_change_cause, set_content_type, and set_cursor_rectangle requests, as well as the state associated with preedit_string, commit_string, and delete_surrounding_text events.\n\nThe set_surrounding_text, set_content_type and set_cursor_rectangle requests must follow if the text input supports the necessary functionality.\n\nState set with this request is double-buffered. It will get applied on the next zwp_text_input_v3.commit request, and stay valid until the next committed enable or disable request.\n\nThe changes must be applied by the compositor after issuing a zwp_text_input_v3.commit request.\n\nSets the surrounding text\n\nSets the surrounding plain text around the input, excluding the preedit text.\n\nThe client should notify the compositor of any changes in any of the values carried with this request, including changes caused by handling incoming text-input events as well as changes caused by other mechanisms like keyboard typing.\n\nIf the client is unaware of the text around the cursor, it should not issue this request, to signify lack of support to the compositor.\n\nText is UTF-8 encoded, and should include the cursor position, the complete selection and additional characters before and after them. There is a maximum length of wayland messages, so text can not be longer than 4000 bytes.\n\nCursor is the byte offset of the cursor within text buffer.\n\nAnchor is the byte offset of the selection anchor within text buffer. If there is no selected text, anchor is the same as cursor.\n\nIf any preedit text is present, it is replaced with a cursor for the purpose of this event.\n\nValues set with this request are double-buffered. They will get applied on the next zwp_text_input_v3.commit request, and stay valid until the next committed enable or disable request.\n\nThe initial state for affected fields is empty, meaning that the text input does not support sending surrounding text. If the empty values get applied, subsequent attempts to change them may have no effect.\n\nIndicates the cause of surrounding text change\n\nTells the compositor why the text surrounding the cursor changed.\n\nWhenever the client detects an external change in text, cursor, or anchor posision, it must issue this request to the compositor. This request is intended to give the input method a chance to update the preedit text in an appropriate way, e.g. by removing it when the user starts typing with a keyboard.\n\ncause describes the source of the change.\n\nThe value set with this request is double-buffered. It must be applied and reset to initial at the next zwp_text_input_v3.commit request.\n\nThe initial value of cause is input_method.\n\nSet cursor position\n\nMarks an area around the cursor as a x, y, width, height rectangle in surface local coordinates.\n\nAllows the compositor to put a window with word suggestions near the cursor, without obstructing the text being input.\n\nIf the client is unaware of the position of edited text, it should not issue this request, to signify lack of support to the compositor.\n\nValues set with this request are double-buffered. They will get applied on the next zwp_text_input_v3.commit request, and stay valid until the next committed enable or disable request.\n\nThe initial values describing a cursor rectangle are empty. That means the text input does not support describing the cursor area. If the empty values get applied, subsequent attempts to change them may have no effect.\n\nCommit state\n\nAtomically applies state changes recently sent to the compositor.\n\nThe commit request establishes and updates the state of the client, and must be issued after any changes to apply them.\n\nText input state (enabled status, content purpose, content hint, surrounding text and change cause, cursor rectangle) is conceptually double-buffered within the context of a text input, i.e. between a committed enable request and the following committed enable or disable request.\n\nProtocol requests modify the pending state, as opposed to the current state in use by the input method. A commit request atomically applies all pending state, replacing the current state. After commit, the new pending state is as documented for each related request.\n\nRequests are applied in the order of arrival.\n\nNeither current nor pending state are modified unless noted otherwise.\n\nThe compositor must count the number of commit requests coming from each zwp_text_input_v3 object and use the count as the serial in done events.\n\nPre-edit\n\nNotify when a new composing text (pre-edit) should be set at the current cursor position. Any previously set composing text must be removed. Any previously existing selected text must be removed.\n\nThe argument text contains the pre-edit string buffer.\n\nThe parameters cursor_begin and cursor_end are counted in bytes relative to the beginning of the submitted text buffer. Cursor should be hidden when both are equal to -1.\n\nThey could be represented by the client as a line if both values are the same, or as a text highlight otherwise.\n\nValues set with this event are double-buffered. They must be applied and reset to initial on the next zwp_text_input_v3.done event.\n\nThe initial value of text is an empty string, and cursor_begin, cursor_end and cursor_hidden are all 0.\n\nDelete surrounding text\n\nNotify when the text around the current cursor position should be deleted.\n\nBefore_length and after_length are the number of bytes before and after the current cursor index (excluding the selection) to delete.\n\nIf a preedit text is present, in effect before_length is counted from the beginning of it, and after_length from its end (see done event sequence).\n\nValues set with this event are double-buffered. They must be applied and reset to initial on the next zwp_text_input_v3.done event.\n\nThe initial values of both before_length and after_length are 0.\n\nApply changes\n\nInstruct the application to apply changes to state requested by the preedit_string, commit_string and delete_surrounding_text events. The state relating to these events is double-buffered, and each one modifies the pending state. This event replaces the current state with the pending state.\n\nThe application must proceed by evaluating the changes in the following order:\n\n1. Replace existing preedit string with the cursor. 2. Delete requested surrounding text. 3. Insert commit string with the cursor at its end. 4. Calculate surrounding text to send. 5. Insert new preedit text in cursor position. 6. Place cursor inside preedit text.\n\nThe serial number reflects the last state of the zwp_text_input_v3 object known to the compositor. The value of the serial argument must be equal to the number of commit requests already issued on that object.\n\nWhen the client receives a done event with a serial different than the number of past commit requests, it must proceed with evaluating and applying the changes as normal, except it should not change the current state of the zwp_text_input_v3 object. All pending state requests (set_surrounding_text, set_content_type and set_cursor_rectangle) on the zwp_text_input_v3 object should be sent and committed after receiving a zwp_text_input_v3.done event with a matching serial."
    }
}