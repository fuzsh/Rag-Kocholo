{
    "id": "dbpedia_45_3",
    "rank": 73,
    "data": {
        "url": "https://gist.github.com/probonopd/9feb7c20257af5dd915e3a9f2d1f2277",
        "read_more_link": "",
        "language": "en",
        "title": "Think twice about Wayland. It breaks everything!",
        "top_image": "https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png",
        "meta_img": "https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png",
        "images": [
            "https://avatars.githubusercontent.com/u/2480569?s=64&v=4",
            "https://avatars.githubusercontent.com/u/35009135?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3750982?s=80&v=4",
            "https://avatars.githubusercontent.com/u/43074504?s=80&v=4",
            "https://avatars.githubusercontent.com/u/35009135?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3750982?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3750982?s=80&v=4",
            "https://avatars.githubusercontent.com/u/7650024?s=80&v=4",
            "https://avatars.githubusercontent.com/u/7650024?s=80&v=4",
            "https://avatars.githubusercontent.com/u/7650024?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3750982?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3750982?s=80&v=4",
            "https://private-user-images.githubusercontent.com/6693573/352681086-1ec1dff1-82a4-4d80-bedd-6c17d13ee151.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjIwMzUzNDMsIm5iZiI6MTcyMjAzNTA0MywicGF0aCI6Ii82NjkzNTczLzM1MjY4MTA4Ni0xZWMxZGZmMS04MmE0LTRkODAtYmVkZC02YzE3ZDEzZWUxNTEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDcyNiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA3MjZUMjMwNDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MTUwMjZiZTI1MWE5YjM3YzVlYjdhNjZiMjU2YWVjMWQ4Y2I4ZDU0MGUzN2MwZTVmZjQyNGMzYTk3ZDBjYzk3NSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.vwM67szxjjZ-UqHJrKaLygnNosySKfID9C2p4YcmnOo",
            "https://avatars.githubusercontent.com/u/7650024?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/7650024?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/2480569?s=80&v=4",
            "https://avatars.githubusercontent.com/u/3421249?s=80&v=4",
            "https://avatars.githubusercontent.com/u/35009135?s=80&v=4",
            "https://avatars.githubusercontent.com/u/177297027?s=80&v=4",
            "https://avatars.githubusercontent.com/u/177297027?s=80&v=4",
            "https://avatars.githubusercontent.com/u/5204095?s=80&v=4",
            "https://avatars.githubusercontent.com/u/175014872?s=80&v=4",
            "https://avatars.githubusercontent.com/u/175014872?s=80&v=4",
            "https://avatars.githubusercontent.com/u/79670265?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/49620143?s=80&v=4",
            "https://avatars.githubusercontent.com/u/24463722?s=80&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Think twice about Wayland. It breaks everything! GitHub Gist: instantly share code, notes, and snippets.",
        "meta_lang": "en",
        "meta_favicon": "https://gist.github.com/fluidicon.png",
        "meta_site_name": "Gist",
        "canonical_link": "https://gist.github.com/probonopd/9feb7c20257af5dd915e3a9f2d1f2277",
        "text": "Think twice before abandoning Xorg. Wayland breaks everything!\n\nHence, if you are interested in existing applications to \"just work\" without the need for adjustments, then you may be better off avoiding Wayland.\n\nWayland solves no issues I have but breaks almost everything I need. Even the most basic, most simple things (like xkill) - in this case with no obvious replacement. And usually it stays broken, because the Wayland folks mostly seem to care about Automotive, Gnome, maybe KDE - and alienating everyone else (e.g., people using just an X11 window manager or something like GNUstep) in the process.\n\nThe Wayland project seems to operate like they were starting a greenfield project, whereas at the same time they try to position Wayland as \"the X11 successor\", which would clearly require a lot of thought about not breaking, or at least providing a smooth upgrade path for, existing software.\n\nIn fact, it is merely an incompatible alternative, and not even one that has (nor wants to have) feature parity (missing features). And unlike X11 (the X Window System), Wayland protocol designers actively avoid the concept of \"windows\" (making up incomprehensible words like \"xdg_toplevel\" instead).\n\nDO NOT USE A WAYLAND SESSION! Let Wayland not destroy everything and then have other people fix the damage it caused. Or force more Red Hat/Gnome components (glib, Portals, Pipewire) on everyone!\n\nPlease add more examples to the list.\n\nWayland seems to be made by people who do not care for existing software. They assume everyone is happy to either rewrite everything or to just use Gnome on Linux (rather than, say, twm with ROX Filer on NetBSD).\n\nEdit: When I wrote the above, I didn't really realize what Wayland even was, I just noticed that some distributions (like Fedora) started pushing it onto me and things didn't work properly there. Today I realize that you can't \"install Wayland\", because unlike Xorg, there is not one \"Wayland display server\" but actually every desktop envrironment has its own. And maybe \"the Wayland folks\" don't \"only care about Gnome\", but then, any fix that is done in Gnome's Wayland implementation isn't automatically going to benefit all users of Wayland-based software, and possibly isn't even the implementation \"the Wayland folks\" would necessarily recommend.\n\nEdit 12/2023: If something wants to replace X11 for desktop computers (such as professional Unix workstations), then it better support all needed features (and key concepts, like windows) for that use case. That people also have displays on their fridge doesn't matter the least bit in that context of discussion. Let's propose the missing Wayland protocols for full X11 feature parity.\n\nEdit 08/2024: \"Does Wayland becoming the defacto standard display server for Linux serve to marginalize BSD?\" https://fossforce.com/2024/07/the-unintended-consequences-linuxs-wayland-adoption-will-have-on-bsd/\n\nWayland is broken by design\n\nA crash in the window manager takes down all running applications\n\nYou cannot run applications as root\n\nYou cannot do a lot of things that you can do in Xorg by design\n\nThere is not one /usr/bin/wayland display server application that is desktop environment agnostic and is used by everyone (unlike with Xorg)\n\nIt offloads a lot of work to each and every window manager. As a result, the same basic features get implemented differently in different window managers, with different behaviors and bugs - so what works on desktop environment A does not necessarily work in desktop environment B (e.g., often you hear that something \"works in Wayland\", even though it only really works on Gnome and KDE, not in all Wayland implementations). This summarizes it very well: https://gitlab.freedesktop.org/wayland/wayland/-/issues/233\n\nApparently the Wayland project doesn't even want to be \"X.org 2.0\", and doesn't want to provide a commonly used implementation of a compositor that could be used by everyone: https://gitlab.freedesktop.org/wayland/wayland/-/issues/233. Yet this would imho be required if they want to make it into a worthwile \"successor\" that would have any chance of ever fixing the many Wayland issues at the core.\n\nWayland breaks screen recording applications\n\nMaartenBaert/ssr#431 ❌ broken since 24 Jan 2016, no resolution (\"I guess they use a non-standard GNOME interface for this\")\n\nhttps://github.com/mhsabbagh/green-recorder ❌ (\"I am no longer interested in working with things like ffmpeg/wayland/GNOME's screencaster or solving the issues related to them or why they don't work\")\n\nvkohaupt/vokoscreenNG#51 ❌ broken since at least 7 Mar 2020. (\"I have now decided that there will be no Wayland support for the time being. Reason, there is no budget for it. Let's see how it looks in a year or two.\") - This is the key problem. Wayland breaks everything and then expects others to fix the wreckage it caused on their own expense.\n\nobsproject/obs-studio#2471 ❌ broken since at least 7 Mar 2020. (\"Wayland is unsupported at this time\", \"There isn't really something that can just be easily changed. Wayland provides no capture APIs\")\n\nThere is a workaround for OBS Studio that requires a obs-xdg-portal plugin (which is known to be Red Hat/Flatpak-centric, GNOME-centric, \"perhaps\" works with other desktops)\n\nphw/peek#1191 ❌ broken since 14 Jan 2023. Peek, a screen recording tool, has been abandoned by its developerdue to a number of technical challenges, mostly with Gtk and Wayland (\"Many of these have to do with how Wayland changed the way applications are being handled\")\n\nAs of February 2024, screen recording is still broken utterly on Wayland with the vast majority of tools. Proof\n\nWorkaround: Find a Wayland compositor that supports the wlr-screencopy-unstable-v1 protocol and use wf-recorder -a. The default compositor in Raspberry Pi OS (Wayfire) does, but the default compositor in Ubuntu doesn't. (That's the worst part of Wayland: Unlike with Xorg, it always depends on the particular Wayand compositor what works and what is broken. Is there even one that supports everything?)\n\nWayland breaks screen sharing applications\n\njitsi/jitsi-meet#2350 ❌ broken since 3 Jan 2018\n\njitsi/jitsi-meet#6389 ❌ broken since 24 Jan 2016 (\"Closing since there is nothing we can do from the Jitsi Meet side.\") See? Wayland breaks stuff and leaves application developers helpless and unable to fix the breakage, even if they wanted.\n\nNOTE: As of November 2023, screen sharing in Chromium using Jitsi Meet is still utterly broken, both in Raspberry Pi OS Desktop, and in a KDE Plasma installation, albeit with different behavior. Note that Pipewire, Portals and whatnot are installed, and even with them it does not work.\n\nraspberrypi/bookworm-feedback#149 (comment) ❌ broken since at least Nov 17, 2023 (\"window sharing not being available in wlroots derived compositors (such as wayfire)\")\n\nflathub/us.zoom.Zoom#22 Zoom ❌ broken since at least 4 Jan 2019. (\"Can not start share, we only support wayland on GNOME with Ubuntu (17, 18), Fedora (25 to 29), Debian 9, openSUSE Leap 15, Arch Linux\"). No word about non-GNOME!\n\nhttps://community.zoom.com/t5/Meetings/Screensharing-only-works-on-GNOME-wayland-when-it-should-work-on/m-p/64823 Zoom ❌ Still broken as of 24 Jun 2022. (\"... we only support Wayland on Gnome with Ubuntu 17 and above, Fedora 25 and above, Debian 9 and above ...\")\n\nprobonopd/Zoom.AppImage#8 ❌ broken since 1 Oct 2022 Zoom: \"You need PulseAudio 1.0 and above to support audio share\" on a system that uses pipewire-pulseaudio\n\nWayland breaks automation software\n\nsudo pkg install py37-autokey This is an X11 application, and as such will not function 100% on distributions that default to using Wayland instead of Xorg.\n\nWayland breaks Gnome-Global-AppMenu (global menus for Gnome)\n\nhttps://gitlab.com/lestcape/Gnome-Global-AppMenu/-/issues/116 ❌ broken since 24 Aug 2018 (\"because the lack of the Gtk+ Wayland support for the Global Menu\")\n\nhttps://bugs.kde.org/show_bug.cgi?id=424485 ❌ Still broken as of late 2023 (\"I am also still not seeing GTK global menus on wayland. They appear on the applications themselves, wasting a lot of space.\")\n\nWayland broke global menus with KDE platformplugin\n\nGood news: According to this report global menus now work with KDE platformplugin as of 4/2022\n\nWayland breaks global menus with non-KDE Qt platformplugins\n\nhttps://blog.broulik.de/2016/10/global-menus-returning/ ❌ broke non-KDE platformplugins. As a result, global menus now need _KDE_NET_WM_APPMENU_OBJECT_PATH which only the KDE platformplugin sets, leaving everyone else in the dark\n\nWayland breaks AppImages that don't ship a special Wayland Qt plugin\n\nhttps://blog.martin-graesslin.com/blog/2018/03/unsetting-qt_qpa_platform-environment-variable-by-default/ ❌ broke AppImages that don't ship a special Wayland Qt plugin. \"This affects proprietary applications, FLOSS applications bundled as appimages, FLOSS applications bundled as flatpaks and not distributed by KDE and even the Qt installer itself. In my opinion this is a showstopper for running a Wayland session.\" However, there is a workaround: \"AppImages which ship just the XCB plugin will automatically fallback to running in xwayland mode\" (see below).\n\nWayland breaks Redshift\n\nhttps://wiki.archlinux.org/index.php/redshift ❌ broken (\"Redshift does not support Wayland since it offers no way to adjust the color temperature\")\n\nUpdate 2023: Some Wayland compositors (such as Wayfire) now support wlr_gamma_control_unstable_v1, see https://github.com/WayfireWM/wayfire/wiki/Tutorial#configuring-wayfire and jonls/redshift#663. Does it work in all Wayland compositors though?\n\nWayland breaks global hotkeys\n\nalbertlauncher/albert#309 ❌ broken since 7 Jan 2017 (\"This is a security measure, but has the side effect of preventing applications from registering their own global hotkeys\") YouTube video by René Rebe\n\nWayland does not work for Xfce?\n\nSee below.\n\nWayland does not work properly on NVidia hardware?\n\nApparently Wayland relies on nouveau drivers for NVidia hardware. The nouveau driver has been giving unsatisfactory performance since its inception. Even clicking on the application starter icon in Gnome results in a stuttery animation. Only the proprietary NVidia driver results in full performance.\n\nSee below.\n\nUpdate 2024: The situation might slowly be improving. It remains to be seen whether this will work well also for all existing old Nvidia hardware (that works well in Xorg).\n\nWayland does not work properly on Intel hardware\n\nhttps://cfenollosa.com/blog/fed-up-with-the-mac-i-spent-six-months-with-a-linux-laptop-the-grass-is-not-greener-on-the-other-side.html ❌ broken since at least 02 Apr 2021 (\"Screen tearing with the intel driver. Come on. This was solved on xorg and now with Wayland it's back.\")\n\nWayland prevents GUI applications from running as root\n\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1274451 ❌ broken since 22 Oct 2015 (\"No this will only fix sudo for X11 applications. Running GUI code as root is still a bad idea.\" I absolutely detest it when software tries to prevent me from doing what some developer thinks is \"a bad idea\" but did not consider my use case, e.g., running truss for debugging on FreeBSD needs to run the application as root. https://bugzilla.mozilla.org/show_bug.cgi?id=1323302 suggests it is not possible: \"These sorts of security considerations are very much the way that \"the Linux desktop\" is going these days\".)\n\nSuggested solution\n\nWayland is biased toward Linux and breaks BSD\n\nhttps://blog.netbsd.org/tnf/entry/wayland_on_netbsd_trials_and ❌ broken since 28 Sep 2020 (\"Wayland is written with the assumption of Linux to the extent that every client application tends to #include <linux/input.h> because Wayland's designers didn't see the need to define a OS-neutral way to get mouse button IDs. (...) In general, Wayland is moving away from the modularity, portability, and standardization of the X server. (...) I've decided to take a break from this, since it's a fairly huge undertaking and uphill battle. Right now, X11 combined with a compositor like picom or xcompmgr is the more mature option.\"\n\nWayland complicates server-side window decorations\n\nhttps://blog.martin-graesslin.com/blog/2018/01/server-side-decorations-and-wayland/ ❌ FUD since at least 27 January 2018 (\"I heard that GNOME is currently trying to lobby for all applications implementing client-side decorations. One of the arguments seems to be that CSD is a must on Wayland. \" ... \"I’m burnt from it and are not interested in it any more.\") Server-side window decorations are what make the title bar and buttons of all windows on a system consistent. They are a must have_ for a consistent system, so that applications written e.g., Gtk will not look entirely alien on e.g., a Qt based desktop, and to enforce that developers cannot place random controls into window titles where they do not belong. Client-side decorations, on the other hand, are destroying uniformity and consistency, put additional burden on application and toolkit developers, and allow e.g., GNOME developers to put random controls (that do not belong there) into window titles (like buttons), hence making it more difficult to achieve a uniform look and feel for all applications regardless of the toolkit being used.\n\nRed Hat employee Matthias Clasen (\"I work at the Red Hat Desktop team... I am actually a manager there... the people who do the actual work work for me\") expicitly stated \"Client-side everything\" as a principle, even though the protocol doesn't enforce it: \"Fonts, Rendering, Nested Windows, Decorations. \"It also gives the design more freedom to use the titlebar space, which is something our designers appreciate\" (sic). Source\n\nWayland breaks windows rasing/activating themselves\n\nhttps://phabricator.kde.org/D16648#470609 (\"Wayland clients can't raise or activate themselves\"), ❌ broken since May 27 2019\n\nWayland breaks RescueTime\n\nhttps://help.rescuetime.com/article/117-common-linux-issues (\"One of the features of Wayland is that it prevents apps from doing precisely what RescueTime is trying to do—track activity in other windows.\") ❌ broken since June 3, 2021\n\nWayland breaks window managers\n\nApparently Wayland (at least as implemented in KWin) does not respect EWMH protocols, and breaks other command line tools like wmctrl, xrandr, xprop, etc. Please see the discussion below for details.\n\nWayland requires JWM, TWM, XDM, IceWM,... to reimplement Xorg-like functionality\n\nhttps://gitlab.freedesktop.org/wayland/wayland/-/issues/233\n\nScreen recording and casting\n\nQuerying of the mouse position, keyboard LED state, active window position or name, moving windows (xdotool, wmctrl)\n\nGlobal shortcuts\n\nSystem tray\n\nInput Method support/editor (IME)\n\nGraphical settings management (i.e. tools like xranrd)\n\nFast user switching/multiple graphical sessions\n\nSession configuration including but not limited to 1) input devices 2) monitors configuration including refresh rate / resolution / scaling / rotation and power saving 3) global shortcuts\n\nHDR/deep color support\n\nVRR (variable refresh rate)\n\nDisabling input devices (xinput alternative)\n\nAs it currently stands minor WMs and DEs do not even intend to support Wayland given the sheer complexity of writing all the code required to support the above features. You do not expect JWM, TWM, XDM or even IceWM developers to implement all the featured outlined in ^1.\n\nWayland breaks _NET_WM_STATE_SKIP_TASKBAR protocol\n\nhttps://github.comelectron/electron#33226 (\"skipTaskbar has no effect on Wayland. Currently Electron uses _NET_WM_STATE_SKIP_TASKBAR to tell the WM to hide an app from the taskbar, and this works fine on X11 but there's no equivalent mechanism in Wayland.\" Workarounds are only available for some desktops including GNOME and KDE Plasma.) ❌ broken since March 10, 2022\n\nWayland breaks NoMachine NX\n\nhttps://kb.nomachine.com/TR03S10126?s=wayland ❌ broken since 2021-03-09 (\"The session becomes unresponsive once logged-in to the Wayland desktop\")\n\nWayland breaks xclip\n\nxclip is a command line utility that is designed to run on any system with an X11 implementation. It provides an interface to X selections (\"the clipboard\"). Apparently Wayland isn't compatible to the X11 clipboard either.\n\nAppImage/AppImageKit#1221 (comment) ❌ broken since 2022-20-15 (\"Espanso built for X11 will not work on Wayland due to xclip. Wayland asks for wl-copy\")\n\nThis is another example that the Wayland requires everyone to change components and take on additional work just because Wayland is incompatible to what we had working for all those years.\n\nWayland breaks SUDO_ASKPASS\n\nhttps://github.com/linuxhw/hw-probe-pyqt5-gui/commit/eb2d6e5145fb8571414bda57676084b7f13b94e5#diff-23cb15995f1502beebb38433bfa83204a5f45b376eaf88e2e41a0d8a1cd44722R290 ❌ broken since 2022-04-09 (\"SUDO_ASKPASS doesn't work on Wayland currently, so piping the password\")\n\nWayland breaks X11 atoms\n\nX11 atoms can be used to store information on windows. For example, a file manager might store the path that the window represents in an X11 atom, so that it (and other applications) can know for which paths there are open file manager windows. Wayland is not compatible to X11 atoms, resulting in all software that relies on them to be broken until specifically ported to Wayland (which, in the case of legacy software, may well be never).\n\nPossible workaround (to be verified): Use the (Qt proprietary?) Extended Surface Wayland protocol casually mentioned in https://blog.broulik.de/2016/10/global-menus-returning/ \"which allows you to set (and read?) arbitrary properties on a window\". Is it the set_generic_property from https://github.com/qt/qtwayland/blob/dev/src/extensions/surface-extension.xml?\n\nWayland breaks games\n\nGames are developed for X11. And if you run a game on Wayland, performance is subpar due to things like forced vsync. Only recently, some Wayland implementations (like KDE KWin) let you disable that.\n\nWayland breaks xdotool\n\n(Details to be added; apparently no 1:1 drop-in replacement available?)\n\nWayland breaks xkill\n\nxkill (which I use on a regular basis) does not work with Wayland applications.\n\nWhat is the equivalent for Wayland applications?\n\nWayland breaks screensavers\n\nIs it true that Wayland also breaks screensavers? https://www.jwz.org/blog/2023/09/wayland-and-screen-savers/\n\nWayland breaks setting the window position\n\nOther platforms (Windows, Mac, other destop environments) can set the window position on the screen, so all cross-platform toolkits and applications expect to do the same on Wayland, but Wayland can't (doesn't want to) do it.\n\nPCSX2/pcsx2#10179 PCX2 (Playstation 2 Emulator) ❌ broken since 2023-10-25 (\"Disables Wayland, it's super broken/buggy in basically every scenario. KDE isn't too buggy, GNOME is a complete disaster.\")\n\nWayland breaks color mangement\n\nApparently color management as of 2023 (well over a decade of Wayland development) is still in the early \"thinking\" stage, all the while Wayland is already being pushed on people as if it was a \"X11 successor\".\n\nhttps://gitlab.freedesktop.org/pq/color-and-hdr/-/blob/main/doc/color-management-model.md\n\nWayland breaks DRM leasing\n\nAccording to Valve, \"DRM leasing is the process which allows SteamVR to take control of your VR headset's display in order to present low-latency VR content\".\n\n\"Unfortunately not all Wayland compositors support DRM leasing\" https://help.steampowered.com/en/faqs/view/18A4-1E10-8A94-3DDA - \"not all\" highlights one of the fundamental problems with Wayland - there is fragmentation\n\nWayland breaks In-home Streaming\n\nValveSoftware/steam-for-linux#6148 ❌ broken since 2019-03-17\n\nWayland breaks NetWM\n\nExtended Window Manager Hints, a.k.a. NetWM, is an X Window System standard for the communication between window managers and applications\n\nWayland breaks window icons\n\nWayland breaks window icons when no .desktop files are used: Seemingly Wayland requires developers to use the xdg-shell protocol, which in turn requires developers to use reverse-DNS application IDs and set_app_id, which causes the icon to be loaded from the .desktop file. This is serious breakage, as not all desktop environments (for good reasons) use .desktop files. A display server should have no business in this, as this belongs into the domain of the desktop environment. https://community.kde.org/Guidelines_and_HOWTOs/Wayland_Porting_Notes#Application_Icon, https://gitlab.freedesktop.org/wayland/wayland-protocols/-/issues/52 ❌ broken since 2021-06-21\n\nLibrePCB developer: \"Btw it's just one of several problems we have with Wayland, therefore we still enforce LibrePCB to run with XWayland. It's a shame, but I feel totally helpless against such decisions made by Wayland and using XWayland is the only reasonable option (which even works perfectly fine)...\" https://gitlab.freedesktop.org/wayland/wayland-protocols/-/issues/52#note_2155885\n\nUpdate 6/2024: Looks like this will get unbroken thanks to xdg_toplevel_icon_manager_v1, so that QWindow::setIcon will work again. If, and that's a big if, all compositors will support it. At least KDE is on it.\n\nWayland breaks drag and drop\n\nOn Raspberry Pi OS (which is running a Wayland session by default), dragging a file out of a zip file onto the desktop fails with \"XDirectSave failed.\"\n\nThe same seems to be true in Gnome: https://discourse.gnome.org/t/xdnddirectsave-and-wayland/2954\n\nWayland breaks ./windowmanager --replace\n\nMany window managers have a --replace argument, but Wayland compositors break this convention.\n\nWayland breaks Xpra\n\nXpra is an open-source multi-platform persistent remote display server and client for forwarding applications and desktop screens.\n\nUnder Xpra a context menu cannot be used: it opens and closes automatically before you can even move the mouse on it. \"It's not just GDK, it's the Wayland itself. They decided to break existing applications and expect them to change how they work.\" (Xpra-org/xpra#4246) ❌ broken since 2024-06-01\n\nUsers: Refuse to use Wayland sessions. Uninstall desktop environments/Linux distributions that only ship Wayland sessions. Avoid Wayland-only applications (such as PreSonus Studio One) (potential workaround: run in https://github.com/cage-kiosk/cage)\n\nApplication developers: Enforce running applications on X11/XWayland (like LibrePCB does as of 11/2023)\n\nExamples of Wayland being forced on users\n\nThis is exactly the kind of behavior this gist seeks to prevent.\n\nAsahi Linux enforces Wayland for ARM-based Macs: https://social.treehouse.systems/@marcan/110354541574112092\n\nFedora enforces Wayland for KDE Plasma: https://fedoraproject.org/wiki/Changes/KDE_Plasma_6#Why_drop_the_X11_session_with_the_Plasma_6_upgrade?\n\nRed Hat enforces Wayland for RHEL:https://www.redhat.com/de/blog/rhel-10-plans-wayland-and-xorg-server\n\n2008: Wayland was started by krh (while at Red Hat)\n\nEnd of 2012: Wayland 1.0\n\nEarly 2013: GNOME begins Wayland porting\n\nSource: \"Where's Wayland?\" by Matthias Clasen - Flock 2014\n\nA decade later... Red Hat wants to force Wayland upon everyone, removing support for Xorg\n\nDudemanguy's Musings, Wayland Isn't Going to Save The Linux Desktop\n\nChris Titus Tech: Wayland vs Xorg https://www.youtube.com/watch?v=U_MBJcD3SFI\n\ntildearrow: did somebody say \"anti-Wayland horseshit\"?\n\npcsx2: CI/Linux: Disable Wayland and spring cleaning\n\nTesting SCREEN RECORDERS on Linux Mint Wayland\n\nProtonPenguin: Wayland Breaks Everything"
    }
}