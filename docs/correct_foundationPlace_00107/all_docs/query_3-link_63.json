{
    "id": "correct_foundationPlace_00107_3",
    "rank": 63,
    "data": {
        "url": "https://github.com/Foundation-Devices/passport2/blob/main/REPRODUCIBILITY.md",
        "read_more_link": "",
        "language": "en",
        "title": "passport2/REPRODUCIBILITY.md at main · Foundation-Devices/passport2",
        "top_image": "https://opengraph.githubassets.com/ab5a5e6a968c1284bd0fa927b51a2cfbebdbb690abdb92adebf22d7b5e346e3d/Foundation-Devices/passport2",
        "meta_img": "https://opengraph.githubassets.com/ab5a5e6a968c1284bd0fa927b51a2cfbebdbb690abdb92adebf22d7b5e346e3d/Foundation-Devices/passport2",
        "images": [
            "https://camo.githubusercontent.com/7c07812eb3341b648ead6897cb2ba9ea37bb0be31c1b2fc16a773fad8d35ce2a/68747470733a2f2f61736369696e656d612e6f72672f612f3544744b5154306748354c6e59497053486f6e4f6b6b5569662e737667"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Foundation-Devices"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "v2.x.x series of firmware for Passport. Contribute to Foundation-Devices/passport2 development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/Foundation-Devices/passport2/blob/main/REPRODUCIBILITY.md",
        "text": "The instructions below describe how to easily build and verify Passport firmware in a reproducible way.\n\nPlease note that this guide has been designed for Linux, so if you’re running a different operating system the exact steps here may differ slightly. However, we’ve done our best to make them as portable as possible for other popular operating systems.\n\nIn this guide we will outline the exact steps necessary to get set up, build firmware directly from the source code, and verify that it properly matches the published build hash and release binaries (minus signatures) for any given version of Passport’s firmware. Once you’ve completed the steps outlined here, you’ll have verified fully that the source code for a given version does indeed match the binaries we release to you. This ensures that nothing outside of the open-source code has been included in any given release, and that the released binaries are indeed built directly from the publicly available source code.\n\nSecurity through transparency is the goal here, and firmware reproducibility is a key aspect of that!\n\nJust want a taste of what to expect? Watch the entire process, start to finish, in this quick video:\n\nIn order to build and verify the reproducibility of Passport firmware, you will need to:\n\nGet the source code\n\nInstall the dependencies\n\nDocker or Podman.\n\nJust\n\nBuild the reproducible binaries\n\nVerify the binaries match the:\n\nPublished build hash\n\nRelease binary (with signatures stripped out) hash\n\nWe’ll walk through every step above in this guide to ensure you can build and verify any version of Passport’s firmware easily.\n\nThe instructions below assume you are installing into your home folder at ~/passport2. You can choose to install to a different folder, and just update command paths appropriately.\n\nBe sure to specify the correct version you want to reproduce here in the git checkout command, i.e., v2.1.2:\n\nSeveral tools are required for building and verifying Passport’s firmware.\n\n⚠️ Docker requires to add your user to the docker group which is root-equivalent and may pose a security risk for you. Consider using Podman if you don't want to add your user to the docker group. Building with sudo and Docker is not supported.\n\nThe installation of Docker is most easily achieved by installing Docker Desktop on your given platform using the official docs linked below. Follow those directions, launch Docker Desktop, and accept the terms before proceeding:\n\nWindows\n\nMacOS\n\nLinux\n\nIf you don’t want to require using sudo when running the just commands below, follow the post-installation steps to grant your user Docker permissions on Linux\n\nThis step is optional if you already have Docker installed and your user is on the docker group.\n\nPodman does not require root or adding your user to another group, so this option is recommended for non-developer users that want to verify the reproducibility of the firmware only.\n\nWindows\n\nMacOS\n\nLinux\n\nAlso, the following configuration files might need to be created after installation:\n\nConfiguration files\n\nJust is a powerful tool that allows us to provide scripts to perform all the necessary steps of building and verification. In order to use Just, you will need to install it using the following instructions for your given operating system:\n\nInstalling Just\n\nYou can also use the following set of commands to install Just to ~/bin directly from Github on most operating systems:\n\nNow that we have all of the necessary dependencies, you can use just to run the correct commands to build the firmware necessary to verify Passport’s reproducibility.\n\nFirst, let's be sure we are starting with a clean slate, as if you've built Passport's firmware in the past you may have some files and folders leftover that can cause issues.\n\njust clean\n\nNext, in order to build the firmware itself, we need to first build the Docker image that will include all the necessary dependencies and files for building the firmware in a reproducible way:\n\njust build-docker\n\nThis command will take some time to run as it creates the image, including downloading and installing every tool necessary for the build process. As we use a Docker image here, not only will this ensure the binaries are always the same for a given version, but it also allows you to easily clean up after verifying the firmware and leave your system uncluttered.\n\nIf you want to opt to use Docker instead of Podman, then you can prepend set the DOCKER_CMD environment variable to podman, for example:\n\nDOCKER_CMD=podman just build-docker\n\nThis applies to other commands shown here as well that would normally require Docker in order to run.\n\nIf you’d like to validate exactly how the build-docker Justfile command functions, you can find the relevant source code here:\n\npassport2/Justfile#L8-L10\n\npassport2/Dockerfile\n\nNow that we have everything in place, we can actually build the firmware binaries for Passport with two simple commands:\n\njust build-firmware color\n\nIf you instead want to reproduce firmware for Passport “Founder’s Edition,” use the following commands and substitute “MONO” for “COLOR” in filenames throughout the rest of this guide:\n\njust build-firmware mono\n\nThese commands will take a few minutes as they build Passport’s firmware directly from the source code you downloaded earlier. Once they complete, you’ll have the completed binary available in ports/stm32/build-Passport/.\n\nIf you’d like to validate exactly how the build-* Justfile commands function, you can find the relevant source code here:\n\npassport2/Justfile#L12-16\n\npassport2/Justfile#L78-L86\n\nNow that we’ve built the binaries for Passport, we can verify the built binary and compare it to what we expect to see.\n\nIn order to verify that the binary produced matches what you should see, you can run the following command while passing the “Build hash” seen in the Github release notes published with the given version of Passport’s firmware.\n\nThe syntax is just verify-sha <build hash> color, replacing <build hash> with the appropriate build hash (i.e. 0895...4520 for v2.1.2) and color with mono if reproducing firmware for Founder’s Edition devices:\n\nThis means that the binary we’ve built matches what we at Foundation have also built and published as the expected hash. Next, we’ll be sure that this built binary also matches the release binary you’d install on Passport directly.\n\nIf your hashes do not match for any reason, stop immediately and contact us at hello@foundationdevices.com! We’ll help you investigate the cause of this discrepancy and get to the bottom of the issue.\n\nIf you’d like to validate exactly how the verify-sha command works and ensure it’s not lying to you about the hashes, you can see the source code here:\n\npassport2/Justfile\n\nIn order to compare the binary we just built with the one you install on Passport, you’ll need to strip out the signatures we use to ensure that Passport devices can only install legitimate firmware updates. As only we have the keys necessary to generate these signatures, there is no way for you to produce signed binaries with a matching hash. The way that we can still verify binaries, however, is to strip out the signatures from the header of the binary file and then compare your built binary to the release binary without signatures and ensure that they are the same, bit-for-bit.\n\nFirst, download the corresponding firmware to your computer, i.e., v2.1.2, directly from Github.\n\nNext, use the following command to strip Foundation’s signatures from the release binary:\n\ndd if=v2.1.2-passport.bin of=v2.1.2-passport-no-header.bin ibs=2048 skip=1\n\nThis will create a version of the firmware file without the added signatures, allowing you to directly compare it to the binary you just built. Now we can compare the hashes of your built binary and the release binary using the following commands:\n\nIf your hashes matched above, congratulations! You just successfully verified that the firmware you’re about to install on your Passport exactly matches the source code that is published on Github.\n\nIf your hashes do not match for any reason, stop immediately and contact us at hello@foundationdevices.com! We’ll help you investigate the cause of this discrepancy and get to the bottom of the issue.\n\nIf you’d like to do further, optional, verification on the header you can perform the following command to dump and view the header being stripped away in hex:\n\nxxd -l 2048 v2.1.2-passport.bin\n\nFor example, Passport v2.1.2 contains the following header (abbreviated due to the majority of the header being zeroed out):\n\nYou can also verify the code that defines and creates the header structure in the following files in the source code:\n\npassport2/ports/stm32/boards/Passport/include/fwheader.h\n\npassport2/ports/stm32/boards/Passport/tools/cosign/cosign.c\n\nIn order to install the firmware you just verified, you can follow our documentation below:\n\nInstalling the Firmware (Advanced Instructions)\n\nBe sure to use the unmodified release binary you downloaded from Github above (i.e., v2.1.2-passport.bin) that still has our official signatures, as Passport will only allow you to install firmware that has been signed by at least two members of the Passport team.\n\nYou can also validate the firmware hashes on Passport before installing by viewing the file under Settings>Advanced>MicroSD>List Files and viewing the info for the binary, or after installing by holding down the \"1\" key while booting and scrolling to the right.\n\nWe want to close out this guide by thanking our fantastic community, many of whom have tested out reproducibility or let us know when they run into any issues along the way. Open source and the verifiability and transparency it brings are core to our ethos at Foundation, and the ability to reproducibly build firmware for Passport is a core outpouring of that.\n\nWe can’t wait to see more of our community take this additional step and remove a little more trust from the process by verifying that each build is reproducible."
    }
}