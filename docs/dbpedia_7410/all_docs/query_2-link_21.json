{
    "id": "dbpedia_7410_2",
    "rank": 21,
    "data": {
        "url": "https://discuss.haiku-os.org/t/look-to-the-future/3541",
        "read_more_link": "",
        "language": "en",
        "title": "Look to the Future",
        "top_image": "https://discuss.haiku-os.org/uploads/default/original/2X/6/6e26ce496160254d6af509e5391c18f066c76756.png",
        "meta_img": "https://discuss.haiku-os.org/uploads/default/original/2X/6/6e26ce496160254d6af509e5391c18f066c76756.png",
        "images": [
            "https://discuss.haiku-os.org/images/emoji/twitter/slight_smile.png?v=5",
            "https://discuss.haiku-os.org/images/emoji/twitter/slight_smile.png?v=5",
            "https://discuss.haiku-os.org/user_avatar/discuss.haiku-os.org/diogen/48/1177_2.png",
            "https://discuss.haiku-os.org/letter_avatar_proxy/v4/letter/v/87869e/48.png",
            "https://discuss.haiku-os.org/user_avatar/discuss.haiku-os.org/jua/48/994_2.png",
            "https://discuss.haiku-os.org/user_avatar/discuss.haiku-os.org/diogen/48/1177_2.png",
            "https://discuss.haiku-os.org/user_avatar/discuss.haiku-os.org/pulkomandy/48/58_2.png",
            "https://discuss.haiku-os.org/images/emoji/twitter/slight_smile.png?v=5"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-11-20T22:38:39+00:00",
        "summary": "",
        "meta_description": "Haiku has an opportunity to blaze a path to the future of personal computing because they&#39;re designing a new operating system from scratch. Back in 2001, when BeOS went under, it seemed logical at that time to reimplemen&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://discuss.haiku-os.org/uploads/default/optimized/2X/6/651be6f46e3730f769e5c26fb602aadd88f71863_2_32x32.ico",
        "meta_site_name": "Haiku Community",
        "canonical_link": "https://discuss.haiku-os.org/t/look-to-the-future/3541",
        "text": "Exactly. First of all they need to let go GCC2 finally, it doesn’t make sense and it’s a joke in 2013-2014, for goodness sake. Feeling lack of the apps? Port Qt5 and apps based on this framework. All of the ported apps are better than old time ones made for BeOS 10 to 15 years ago.\n\nBut really they need to decide what are they really doing. Modern, bleeding-edge OS leading the way or Legacy-OS with layers and layers of backwards compatibility, btw that is what JLG and Be inc were all against, working on BeOS. Back then they’ve pushed it to be as legacy-free internally as possible.\n\nyes, the idea sounds good , sadly there are enough devs who consider haiku perfect\n\nHere we can quote axeld “just over my dead body”.\n\nwe can just hope that the first beta comes out soon. And the R1 release too.\n\nBut what will happen after R1? I have no idea, since some have are more conservative view, and think that “touch” is evil[exagerated].\n\nWith haiku itself I’m happy in fact, just the UI is far from great, and the api doesn’t allow you so far to make for example non-rectangular windows, and transparent/translucent windows.\n\nWhen I see the plans and progress of ubuntu touch, I start to get the impression, that haiku is not getting closer to linux. Valve is saying that linux is the gaming platform of the future, and they could be right, at least it has a chance, and money is invested in this direction.\n\nIn spite of agree with some questions, I have a different point of view about this. Since its beggining, Haiku - so called OpenBeOS - was thinked as a replacement of BeOS. The goal was (and its is yet) total compatibility with BeOS’ apps. I think there is no problem with this. The project is supported and developed by BeOS enthusiasts (BeGeistert, the main “meeting point” of the Haiku community, means “enthusiast” and refers clearly to BeOS). The Haiku devs is working since 2001 to get that first goal with the Haiku R1 final release. I understand this perfectly.\n\nTo me, Haiku R1 will be the turning point of the project. From this, a world of possibilities will be open. Remember that the OS is MIT licenced. So, somebody can create a fork or a new OS based on Haiku. From the final release the “Glass Elevator” project, that will implement important mods in Haiku UI, can be resumed. With a community support OS, some devs will feel more secure to create new apps, features and drivers, like in the BeOS’ times.\n\nI believe that this moment will come soon, perhaps next year. Haiku is moving to be a modern OS with the efforts like Pulkomandi’s port of WebKit and the new Package Manager. So, some more patience and collaboration is expected.\n\nWe aren’t going to drop gcc2. Here are some reasons for this.\n\nWe really want to keep that BeOS compatibility in R1. This allows us to test our code and make sure it behaves the same as R1 did. We’re not doing a bug-for-bug clone, but a feature-for-feature one. This is the only goal and purpose of Haiku until R1 gets released, and it allows to keep the developers somewhat focused.\n\nIt isn’t making any part of the OS stay in the past. We have implemented the layout kit, we are running the very latest version of WebKit which uses C++11, and people can develop applications using gcc4 very easily, it’s just a matter of using gcc-x86 instead of gcc in the command lines.\n\nThe ARM, PPC and x86_64 ports use only gcc4 anyway. I’d say ARM and x86_64 are clearly the future anyway, so if you want to look towards the future, just use the x86_64 version of Haiku and forget about this gcc2 mess\n\nThe “hybrid” system is reusable. Think of gcc2/4 hybrids as a testing area for this. We set up everything to get that working in all cases, and now we can reuse it without too much work to provide the forward compatiility etween releases. Whatever changes we make to Haiku, the apps released for R1 will run on R2, apps released on R2 will run on R3, and so on. This will require the same hybrid system. It also means we have done a good part of the work for 32/64 hybrids. This is not yet possible, but already having an hybrid environment makes it easier to do.\n\nIt isn’t a problem as big as most people seem to think. You can use gcc4 when you need to, we do this inside the system (WebKit is an example), and in the applications as well (many of them are gcc4-only). With the new package system we can even keep old versions of software on the gcc2 side and new versions on the gcc4 side. This has a very low maintenance cost.\n\nOn the move to touch interfaces now: as far as I can see, everyone agrees that an interface can’t target both desktop computers and touch devices at the same time. This is why we have iOS and MacOS X, Android and Chrome-OS, and this is why Windows 8 has two interfaces in the same OS for a very weird user experience.\n\nNow, Haiku has a goal which is to replace BeOS on desktop computers, and make new things in the way BeOS could have done them. In my mind, this does not include a move to touch devices (Be already tried and failed that, remember the “focus shift”). I’m not saying touch interfaces are evil, just that they aren’t what we are targetting. Now, if someone was to take some components and design from Haiku to build a touch-oriented system, I think it’s possible to get very good results. But would that be Haiku ? Certainly not. Would it run the same apps ? Maybe, but they would still be unusable on touch devices and probably need some major UI rework. So, I think something like iOS/Mac OS X (they share a lot of code, but not the user interface) makes more sense.\n\nNow, I’m not interested in this, because I don’t even have a touch-oriented device here. So, I’m focusing on getting Haiku running on my computer and doing useful things with that. If someone wants to build a touch interface for Haiku, well, maybe we’ll accept the patches. But we don’t want this to replace the current UI.\n\nAs for looking into the future: R1 is getting close now. Work has already started towards making Haiku better than BeOS in many ways. Look at the Wifi support, look at the WebKit port, at the Layout Kit and the work from the university of Auckland (they are doing great research on the future of user interfaces, and their playground is Haiku). There are also many less-visible changes like the work Pawel is currently doing on the scheduler and things he did before such as DEP and ASLR (essential to bringing some security against malware/attacks). There are also the ARM and x86_64 port, the package manager, and many, many other things.\n\nThere is a high amount of uncertainity as to what Haiku will become after R1. The “Glass Elevator” project has few activity, and I think there will be a “what now?” feeling after we launch R1. The current devs each have their own idea of what the future of Haiku should be, ranging from “more of the same” to “let’s use Qt as the main API”. I can’t say who will won, or maybe no one will and we will see multiple forks of Haiku, each doing different things.\n\nRefining multi-core and SMP performance, cpu scheduling, multi-threading, improving media kit and web integration (think about desktop replicants and webapps for example), using some modern tech like gpgpu/opencl stuff for efficient computing could be the priorities for Haiku after they’d dump the gcc2-beos-legacy or whatever nonsense. I just wish there was more new active forward-thinking developers willing to spend their time working on these features. Touch UI is cool, but it’s not the focus, after all iOS, android and other more obscure linux distros pretty much had it covered on tablets. Like with native browsers and Firefox/Chrome party, your little browser could be amazing on it’s own, but average joe wants his usual extensions (in the case of tablet oses it’s the apps). I’d rather like Haiku to make the best of standard or low-spec machines like nettops and whatnot than chasing the touch/tablet bandwagon. Quiet, small, low-power PC and super-efficient OS installed on it, what’s not to love?\n\nIn a lot of ways OS X is a good example of modern web-friendly multimedia OS done right. Power efficient, quite fast with hardware acceleration to the max (OpenGL, OpenCL), impressive multitasking and RAM management, excellent usability as expected. It’s now freeware since Mavericks, but it still proprietary software and works only on the official Mac computers or hackintoshes with a few hacks on matching hardware configurations.\n\nIt’s just funny when mentioning Haiku to the app makers outside of the community the first thing they ask - is gcc2 still the only “supported” compiler? It’s almost like gcc4 (or, god forbid, clang/llvm) and x86_64 are second-class citizens among the people swimming in nostalgia waters.\n\nSimplicity is good, but I think the most important thing is it’s fun!\n\nI like Haiku because of the app-icons, for example, it make the OS look a bit less serious and more friendly or something. This is what really defines the style of a system and make it not just another OS, but something special.\n\nAlso, the API makes it easy (for me at least) to build complex applications in not too much time. It isn’t perfect (but what is?), it’s maybe a bit outdated, but all these things can be solved and improved - with or without gcc2. The important part there is keeping the “spirit” of the API and getting the new stuff to blend in. I think the Locale Kit and Layout Kit, and now the Service Kit show this is possible. Now we’re waiting for new contributions going that way"
    }
}