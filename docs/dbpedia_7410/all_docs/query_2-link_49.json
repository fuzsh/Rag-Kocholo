{
    "id": "dbpedia_7410_2",
    "rank": 49,
    "data": {
        "url": "https://lowendmac.com/myturn/02/0403.html",
        "read_more_link": "",
        "language": "en",
        "title": "Why BeOS Lost",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://lowendmac.com/logos/sketch-logo.png",
            "http://bullseye.backbeatmedia.com/bullseye/adserver/270/986/viewCGI?pool=266&type=13&pos=26&zone=5000&redirect=aj",
            "https://lowendmac.com/myturn/myturn.gif",
            "https://lowendmac.com/logos/welcome.jpg",
            "https://lowendmac.com/logos/welcome.jpg",
            "http://lowendmac.com/art/lem-store-badge.png",
            "https://lowendmac.com/logos/welcome.jpg",
            "http://lowendmac.com/art/openlink2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "beos",
            "be inc",
            "next",
            "nextstep",
            "mac os",
            "apple",
            "mac os x",
            "steve jobs",
            "unix",
            "linux",
            "windows"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Why BeOS Lost, Chris Lozaga, My Turn, 2002.04.03. BeOS was a great operating system, but you can't blame Microsoft, Apple, or NeXT for its failure.",
        "meta_lang": "",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Many low-end Mac users lament Apple's choice of NeXTstep over the BeOS as the foundation of Mac OS X. Many arguments have been made on technical merits, and many blame the demise of Be, Inc., on Apple and Microsoft. The following is an in-depth look at the demise of Be and reflections on Apple's choice of NeXT. Hopefully this will debunk some common ideas about BeOS and lay this debate to rest.\n\nThe spectacular failure of BeOS is often blamed on external forces, for example, Microsoft muscling them out of the marketplace. Supposedly, the incredible sophistication of BeOS struck fear into the hearts and minds of its competitors.\n\nMicrosoft pressured OEMs to not bundle BeOS on their systems. Big Deal. Microsoft has done this with every competing operating system. Is it fair? No. Did Microsoft willfully and purposefully destroy Be? Probably not.\n\nBe made several missteps common to innovators; furthermore, they misread the marketplace and developed an unsustainable business model. Let us break down some of their mistakes.\n\nClassic Mistakes\n\nThese are mistakes that have been made over and over again by companies and should have been avoided.\n\n1. Not-quite-Unix\n\nBeOS had a powerful command line and Unix-like underpinnings that could compile and run POSIX compliant software. Every Unix-like operating system has failed in the marketplace except Linux (which is free, and for all intents and purposes it is Unix). The Amiga Operating System was developed with similar goals in mind, and that particular operating system withered and died as well. Being able to compile POSIX compliant software is not a marketable advantage (even Windows NT can do it).\n\nThe lesson: Unless you are actually going to include full Unix services and compatibility, like Linux or the Mac OS X, being Unix-like is no advantage.\n\n2. Please the developers\n\nBeOS was designed by geeks for geeks (we will revisit when discussing marketing mistakes). Designing an OS with fantastic underpinnings does not sell software. Look at the success of Windows 95 and, for that matter, Mac OS 9. A 64-bit database-driven file system and pervasively threaded libraries on top of an efficient kernel may please developers and geeks, but it doesn't sell software. A software company looks at how much money they can make developing for a certain platform, not how easy it is to write great software. In order for BeOS to succeed as a platform, a lot of volunteer effort and/or some sort of industry partnerships were needed. While there was an enthusiastic BeOS community, Linux surely consumed most of the enthusiast developers. Be did not get solid industry partners until it was far too late.\n\nThe lesson: You don't attract developers and partners with superior technology unless you show them how they will profit from it.\n\n3. The BeBox\n\nProprietary hardware is difficult enough to develop, especially if you do not have established customers. IBM can make huge profits from its expensive proprietary mainframes because they have established customers and an established market. Likewise, Apple can make profits from its psuedo-proprietary hardware because they have a base of users and a place in the market. Consider the fact that the BeBox's main differentiators from other computers were dual-processors (expensive, even if you use cheap processors) and a Geek-port, it is not hard to see how the hardware side of Be failed. How much capital did they lose developing it?\n\nThe lesson: You don't make money off anything unless there is a market for it or you create a market for it. This is even truer of proprietary hardware.\n\n4. The GUI will save us\n\nFaith in a slick user interface is an easy mistake to make. If it is fairly easy to navigate through files and the windows look pretty, then all is well. This is just plain wrong. No matter how good a GUI looks or how responsive it is, it will not attract and retain users unless it is an enabler. The early Mac OS was not flashy at all with stark black and white icons, but it enabled users to do things on a desktop computer they were unable to do before. By the time a polished iteration of BeOS was available, Windows 98 and Mac OS 8.x were already available - and much better at connecting to the Internet, sharing files, and printing, tasks that users routinely complete.\n\nThe lesson: A slick GUI won't save the operating system. (Even Apple had to re-learn this one after releasing Mac OS X - iTunes and the other bundled apps are all enabling tools to attract users.)\n\nBusiness and Marketing Mistakes\n\nThese are mistakes that Be made that illustrate poor planning and a poor understanding of the market.\n\n1. Market it to Geeks\n\nA machine with a configurable and user-programmable expansion port? A 64-bit database driven file system? An advanced kernel? These are not selling points unless you already have a market. Until then, they are merely a foundation for future releases.\n\nUsing these attributes of the operating system to sell it (to geeks) is perhaps one of the all-time worst business decisions in history. There may have been some logic in thinking that the geeks would then develop great software for it, but it is hardly a profit-generating business plan. It also runs counter to thirty years of making computers easier to use and understand. Be eventually expanded their marketing focus but continued to use the technical excellence of their OS as their core selling point; it was too little too late.\n\nThe lesson here is quite simple (if blunt): If your target market consists of users who wish to program their own expansion ports, you are bound to bleed money.\n\n2. What's a Server?\n\nBeOS debuted in 1995, which was also marked the beginning of the Internet's meteoric rise. BeOS was designed to be a personal computer operating system. Unfortunately, at the time of its debut and the years thereafter, the real growth was in server operating systems. Furthermore, the idea that a personal computer operating system should share a code base with the server operating system became prevalent at this time. This was largely due to Microsoft trying to move users to NT-based technologies and hardware companies who loved the idea of forcing resource-intensive server \"plumbing\" into the desktop (which would drive their hardware sales). While BeOS was efficient, it lacked the network/server-oriented features of Unix and even Windows NT. Be was basically caught with their pants down. Two years later, BeOS was retrofitted with some server tools and paraded around trade shows running the Apache Web server software. But again, it was too little too late.\n\nThe lesson: If you don't correctly forecast the market, you are forced to spend resources reacting instead of selling products. There may have been no way for Be to predict this; you win some, you loose some, as they say.\n\n3. What's that Internet thingy?\n\nBeOS also missed the boat on the Internet phenomenon. The Web browsers were usually one or more generations behind their counterparts on the Mac and PC with very few third-party plugins supported. Internet connectivity was added seemingly as an afterthought. But BeOS could play eight streaming QuickTime videos! Who cares? The Web browser, and, to some extent, America Online, became the defining personal computing applications of the 90s. Instead of building a decent browser, Be reverse engineered QuickTime.\n\nThe lesson: If you don't have a good browser, you don't have a chance on the desktop. Period.\n\nApple Drops a Bomb on Be\n\nMost BeOS aficionados are convinced that Apple chose NeXTstep as the core of Mac OS X because Steve Jobs was key in making the decision. Apple is first and foremost a business, and if Apple could have made more money buying BeOS and retrofitting it as Mac OS X, they would have.\n\nThis leads to one of the most contentious BeOS myths; that BeOS was a simple drag-and-drop replacement for the Mac OS. Many Be enthusiasts believe this because classic Mac OS applications could already be run from within BeOS. It sounds plausible.\n\nHowever, BeOS needed serious usability engineering. The operating system could, as previously mentioned, run eight QuickTime video streams at once, but it didn't enable the user to do very many useful things. All of the tuning and elegance was poured into features transparent to the user, like the file system.\n\nThis idea also rests on the assumption that developers would port their applications to BeOS. Because BeOS had no \"Carbon\" layer, developers would have had to essentially develop two versions of their software for the Mac platform, one legacy and one BeOS-based. Because the graphics subsystem and GUI were substantially different between the two, as were the Mac OS toolbox and the BeOS development APIs, it would have been like writing the application for a whole new platform. Furthermore, there weren't a lot of experienced BeOS developers in the field to work on porting applications.\n\nDevelopers simply didn't want to do this, and Apple understood. Whether it chose Be or NeXT, Apple would still have had to write a \"Carbon\" layer to encourage development of applications for the new operating system. This would allow developers to write one program that runs on both platforms. Since both operating systems would need a \"Carbon\" layer and a lot of usability engineering and retooling, the decision probably came down to three points.\n\nThere was and is a wealth of highly experienced developers who are familiar with Unix. There also was and is a smaller but active and experienced subset of NeXTstep (Cocoa) developers. While not as technically elegant as BeOS, having trained talent available to port your applications and debug your OS is great advantage in favor of NeXT.\n\nUnix already had an established and proven core of network services and server capabilities. Choosing NeXT gives Apple the option of seriously competing in the server arena, if it so chooses. BeOS would have to be tested, validated, and developed for some time to achieve the maturity of BSD in this area.\n\nThe most cynical reason of all, of course, is profit. Which operating system will drive your hardware sales - the light and efficient operating system that can play eight QuickTime video streams on a G3 or the huge, big-iron, Unix-based operating system? Apple is first and foremost a hardware company. The most useful advantages BeOS offered the end user were memory and space efficiency. By the time Apple gave up on Copland, hard drives were already in the multi-gigabyte range and standard memory was hovering around 32 MB. The advantage of a small memory footprint had diminished significantly. The small size and memory footprint were no advantage at all, as Apple wished to drive sales of new hardware.\n\nOther Thoughts\n\nIt might surprise you that BeOS is one of my all time favorite operating systems, right up there with the Amiga OS. I am, after all, a geek. While I applaud Apple for choosing NeXT as the core of Mac OS X, they certainly are not without fault.\n\nThe ten-year anniversary of the Power Mac is nearly upon us. I remember when System 7 debuted we were promised a blazingly fast, fully native operating system that would take advantage of the PowerPC processor. Well, a decade later the promise is broken. My Power Mac 7100 will never get such an operating system from Apple, despite their promises.\n\nBut the record needed to be set straight about BeOS. To sum it up, contrast the summaries below - one reflecting the opinion of a BeOS zealot, the other reflecting the opinion of this author. The truth is yours to decide.\n\nZealot: BeOS died because Microsoft and Apple worked feverishly against it. BeOS was so advanced, they were worried about their own markets. BeOS was so elegant and fast, it could run eight QuickTime video streams at once. It hardly took up any hard drive space or system memory, and it was rock-solid stable. Steve Jobs cheated Be out of becoming Mac OS X. He just had to have his other baby, NeXTstep, as the foundation of Mac OS X.\n\nAuthor: BeOS had technically brilliant underpinnings that allowed the user to do amazingly useless things like play eight QuickTime video streams at once and search their hard drive files in a very intelligent way. It was not very good at printing or Web surfing, and it did not enable the user to accomplish anything new. It was an unproven server platform, an unproven Java platform, and there was a dearth of experienced BeOS programmers. Apple made a wise choice in choosing NeXT. BeOS wasn't killed by the big boys; it was slowly choked through a series of monumentally bad decisions, most of which had been made by other companies in the past and could have been avoided. It was a great operating system in all the wrong ways, and someone at Be should have realized this.\n\nFurther Reading"
    }
}