{
    "id": "dbpedia_7410_3",
    "rank": 0,
    "data": {
        "url": "https://testdouble.com/insights/optimizing-software-adoption-lessons-from-beos",
        "read_more_link": "",
        "language": "en",
        "title": "What happened to BeOS, the 90sâ coolest failed operating system?",
        "top_image": "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66667eab1ff43d82aada2c8b_social-90s-coolest-failed-operating-system.jpeg",
        "meta_img": "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66667eab1ff43d82aada2c8b_social-90s-coolest-failed-operating-system.jpeg",
        "images": [
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/664f9c2cdd9f451a01c10fe4_Test%20Double%20_%20An%20Agency%20Improving%20the%20World%27s%20Software-8%202.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e966282ad121bdd7c_asset-icon-service-overview.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e321239ca9ad53f47_asset-icon-service-software-delivery.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57eed66795bf3d452ce_asset-icon-service-product-management.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e8c0c71aab7cb6954_asset-icon-service-legacy-modernization.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57ede8a07cbfe8fcbac_asset-icon-service-devops.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57eac185927ede9f133_asset-icon-service-upgrade-rails.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e2523ea37c3d82f4b_asset-icon-service-technical-recruitment.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57ebe8a011dc0924ca7_asset-icon-service-product-assessment.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/664f9c2cdd9f451a01c10fe4_Test%20Double%20_%20An%20Agency%20Improving%20the%20World%27s%20Software-8%202.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e966282ad121bdd7c_asset-icon-service-overview.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e321239ca9ad53f47_asset-icon-service-software-delivery.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57eed66795bf3d452ce_asset-icon-service-product-management.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e8c0c71aab7cb6954_asset-icon-service-legacy-modernization.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57ede8a07cbfe8fcbac_asset-icon-service-devops.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57eac185927ede9f133_asset-icon-service-upgrade-rails.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57e2523ea37c3d82f4b_asset-icon-service-technical-recruitment.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650d57ebe8a011dc0924ca7_asset-icon-service-product-assessment.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66667eab1ff43d82aada2c8b_social-90s-coolest-failed-operating-system.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b1759eaafe98f1dde35c_Code.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175acdc27456bebe860_FlagBannerFold.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175ad4798d8a2520b3e_Shapes.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66663406f8c51045983e8088_00155.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/6694a7761cc3d33baa547e17_8500.32c3f584223f8d83e4d73117b391b3d8fe3bedf23d1bafe89f32dce2895cbd3b.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66bbd48f9d7ac42142c28f2b_rails-upgrade-bug-fixes-and-security-support-ending-soon.png",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175acdc27456bebe860_FlagBannerFold.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b1759eaafe98f1dde35c_Code.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175ad4798d8a2520b3e_Shapes.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66663407ca8c5ca3b61f8bb5_00166.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/666634021732a7431c25c9a8_00139.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66bb7849bfc7d9230a27c519_consulting-at-test-double.png",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175acdc27456bebe860_FlagBannerFold.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b1759eaafe98f1dde35c_Code.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175ad4798d8a2520b3e_Shapes.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/666634014ac2ad97600a62a5_0044.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66663407ca8c5ca3b61f8bb5_00166.jpeg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/66b13ba2364b0a0afc8a9278_data-connect-recap.png",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175acdc27456bebe860_FlagBannerFold.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b1759eaafe98f1dde35c_Code.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6660b175ad4798d8a2520b3e_Shapes.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb903e9/6666340964f404f16a7f0f86_00179.png",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6668d4f56e646b8e97927eef_asset-image-neat-logo.jpg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6668d4f570d5444938620c9b_asset-image-team-smiling.jpg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650c03311fad4561ad16f82_asset-logo-testdouble-light.svg",
            "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/6650c80844ab6fa43a77603c_asset-logo-standard-ruby.png",
            "https://testdouble.matomo.cloud/matomo.php?idsite=1&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-12-03T00:00:00",
        "summary": "",
        "meta_description": "Learn why BeOS failed to gain traction and discover valuable lessons for optimizing software adoption in today's tech landscape.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.prod.website-files.com/6647a84a9616b0776fb9040e/668c24d6552258a1ca736481_favicon.jpg",
        "meta_site_name": "",
        "canonical_link": "https://testdouble.com/insights/optimizing-software-adoption-lessons-from-beos",
        "text": "Imagine youâve worked for years to try to create a better way to write software, and now youâve finally succeeded. But nobody wants to use it. What do you do next?\n\nThis is a question Iâve thought about a lot over the past few years. Iâve tried using a variety of programming languages and frameworks that purport to make software development betterâand I think they do! But most of them havenât caught on, usually resulting in them struggling to be maintained. Seeing this play out time and time again, I have to ask myself: Is it worth it to try to make software better? Or is my desire for software to be better a desire that will inevitably leave me disappointed?\n\nThis question came to mind again as Iâve been setting up a vintage Macintosh to run BeOS, an operating system developed in the 1990s. Iâve really been getting into vintage Macintoshes lately. I used Macs as a kid, but now I can do things I wasnât able to afford as a kid, like buy 1995âs most powerful Macintosh to run BeOS, an advanced alternative operating system.\n\nBeOS was supposed to be revolutionary, to change the way computers worked. But it never caught on, and the company making it was eventually dissolved in 2001. So why didnât BeOS work out? The answer is instructive for us â even though BeOS failed, it might still serve as an inspiring lesson for those of us who want to make computing better.\n\nWhere Be has been\n\nTo understand how I saw BeOS at the time, we have to go back further. The Macintosh was released in 1984, just two years after I was born. My dad was a Macintosh true believer, and as my interest in computers quickly developed, I picked up the same mindset from him. In our view, the Macintosh was making the world better. The graphical user interface was much better than the command-line, helping computers reach their potential to be usable by and helpful to people.\n\nInto the 90s, this utopian ideal was still the only thing on my mind about the Macintosh, but most observers realized what I didnât: Something was very wrong at Apple. Architectural decisions that had been made in creating the Macintosh system software, its operating system, were not scaling with the advances in computing. A radically new operating system would need to be developed, but Appleâs management was struggling to make the decisions necessary to tackle this problem. Two former Apple employees, executive Jean-Louis GassÃ©e and engineering leader Steve Sakoman, recognized this problem, so in 1990 they founded a company named Be Inc. to create a new kind of computer.\n\nCreating a new kind of computer was audacious even in 1990: the Microsoft/Intel combo already dominated the personal computer market, with Apple taking a sizable second place. (Versions of Unix existed, but not yet Linux.) But Be had reason to be confident: They were going to create a new OS from scratch without the encumbrances of backward compatibility and past technical decisions. They could design it right.\n\nAnd it worked. Public BeOS demos showed a commercially available machine accomplishing much more than Macintosh or Windows with the same processing power: multiple windows simultaneously rendering 3D images in real-time, playing a movie, rendering a web page, and playing audio. As a kid at the time, the only thing on my mind was how amazing it was that a personal computer could do all that; I didnât dig deeper to ask how it was possible. But the way it was possible was by writing an OS from scratch to take full advantage of the PowerPC processorâeven multiple processors per machineâand target the kind of multimedia needs of the day.\n\nNot to Be\n\nSo why didnât these advancements lead to BeOS taking over the computing industry? Others are more qualified than me to analyze, but from my reading, it seems that a key factor was difficulty with gaining traction. Users couldnât do anything with BeOS until there were applications for it. Developers would need to completely rewrite their applications to work on BeOS, and they werenât motivated to do that when there were no users. Despite the problems facing Mac OS and Windows, those operating systems were âgood enoughâ for most users. Was the potential of computing being weighed down by the limitations of these OSesâ designs? Yes. But most users wouldnât adopt BeOS just for the sake of the future of computing; they just wanted to get their work or web browsing done.\n\nThere is a classic article titled âThe Rise of Worse is Better.â In it, the author contrasted the Lisp and C programming languages. He argued that although Lisp was a much better language (an opinion many people I respect agree with), C had attributes that allowed it to meet needs quicker and get wider distribution. The worse attributes of C were better for it to catch on. One key takeaway from this article is that what is theoretically the best is not necessarily going to do the best in the dynamics of the real world.\n\nBeOS was attempting to solve particular problems of its day, but you can extrapolate these dynamics if you think in terms of potential and waste. If you get excited about the potential of computers, it feels like a waste when they arenât reaching that potential. It feels like a wrong you need to make right. Itâs painful for you to endure the waste day in and day out. These dynamics are the same regardless of which specific aspect of a computerâs potential you personally care aboutâwhether performance, usability, software reliability, ease of programming, or personal control of your data.\n\n3 ways to make a difference\n\nSo what do you do when you care deeply about optimizing one of these things, but the average user, and therefore the world, doesnât care about it? If Be Inc. wasnât able to succeed with all the engineering expertise they had, what hope do I have of being part of something that changes computing for the better?\n\nSo far, Iâve come up with a few possibilities:\n\nOne option is to do just what GassÃ©e and Sakoman did, regardless: Start a company to try to bring about the change you want to see, to âmake a dent in the universe.â If you do, the story of Be Inc. serves as a warning in the same way that many startupsâ stories do. Your chances of success are statistically low, and whether you succeed or not, youâll pay a high cost in terms of time and stress. And that success isnât entirely based on whether your technical ideas are good or not. Building the right thing is not enough.\n\nAnother way to make a difference is research. The world of research isnât one Iâm deeply immersed in, so my understanding of it is limited, but I would define âresearchâ as âexploring new ideas where the direct goal is not monetization.â Research happens at institutions like universities and research labs, but my definition of research also includes hobbyists who explore new ideas in their free time. There are online communities where you can find researchers of all kinds talking together; two examples that my interests have led me to are the Malleable Systems Collective and Future of Coding.\n\nThe third way to make a difference in computing is to build your own tools. This means starting with what you can personally influence and building something that makes things better right where you are. This might mean something as simple as writing some shared code in the programming language and framework you already work within, code that pays off right away in making your daily work easier. A more radical approach is described by Devine Lu Linvega in their Strange Loop talk that I wrote about before: radically adjusting how you engage with computing in a way that fits a more human scale. What these approaches have in common is that they are applied to real-world software (unlike research), and yet they are focused on something maintainable by a person or a small community without needing to create a product that outsells competitors.\n\nSettling in for the journey\n\nLooking at the dynamics of potential and waste through the lens of BeOS has helped me better understand the worries I feel. From my introduction to computers with the Macintosh, Iâve believed computers have a great potential to make a positive difference.\n\nSince I got into consulting in 2015, Iâve been looking for ways to make software development better (hence the appeal to me of Test Doubleâs mission: âSoftware is broken. Weâre here to fix it.â) Recognizing the dynamic of potential and waste helps me realize that itâs not just my weird interests that cause me to feel stuck: there have been many people over the decades who want to see computers reach their potential in various ways, and we all face the same challenges. And thatâs why, whatever approach I take to making computing better at a given time, itâs encouraging for me to dive into computing history, whether by reading, watching videos, or using old computers myself. Thereâs perspective to be gained: ideas that have been tried that worked or didnât, and trends that you can still see today. And there is also the encouragement of knowing that we arenât the first group of people who have seen the potential of computers and struggled to get them there.\n\nIf youâre part of that group, letâs find a way to keep going."
    }
}