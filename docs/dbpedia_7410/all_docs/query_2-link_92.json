{
    "id": "dbpedia_7410_2",
    "rank": 92,
    "data": {
        "url": "https://www.nextplatform.com/2024/03/12/the-cloud-outgrows-linux-and-sparks-a-new-operating-system/",
        "read_more_link": "",
        "language": "en",
        "title": "The Cloud Outgrows Linux, And Sparks A New Operating System",
        "top_image": "http://www.nextplatform.com/wp-content/uploads/2020/06/ab_database-vortex-scaled.jpg",
        "meta_img": "http://www.nextplatform.com/wp-content/uploads/2020/06/ab_database-vortex-scaled.jpg",
        "images": [
            "https://www.nextplatform.com/wp-content/uploads/2015/04/The-Next-Platform-Final.png",
            "https://www.nextplatform.com/wp-content/uploads/2020/06/ab_database-vortex-1030x438.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2024/03/dbos-stack.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2024/03/dbos-time-travel-screenshot.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2024/03/dbos-versus-aws-lambda.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2023/05/HPE_button_19959_V2.png",
            "https://www.nextplatform.com/wp-content/uploads/2024/03/vector-database-logo-1-326x245.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2022/02/nvidia-green-eye-logo-326x245.jpg",
            "https://www.nextplatform.com/wp-content/uploads/2020/02/ab_man-o-war-jellyfish-physalia-326x245.jpg",
            "https://secure.gravatar.com/avatar/fab7c7dc7044ee9c09da842e041cd2dc?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/7844b104bd4b819f91c15043742c4f33?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/11e8aa0cba1cdaf6d751ad8149e1bea9?s=50&r=g",
            "https://secure.gravatar.com/avatar/27a0d4b80dc354529a911b6466dcd326?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/03393f2e19a0bbc9f15a2dbd6e170b29?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/fbb754ce9ada8bf066c743d787377586?s=50&r=g",
            "https://secure.gravatar.com/avatar/3fc2a093b6d850d6b588efc680dc46a7?s=50&r=g",
            "https://secure.gravatar.com/avatar/6915d8aefa434f8136d0a16be5a7ff53?s=50&r=g",
            "https://secure.gravatar.com/avatar/ca962e264661a9467b967cf47cecbd74?s=50&r=g",
            "https://secure.gravatar.com/avatar/60f5db8ab7aa35d411e0c3e481850cc3?s=50&r=g",
            "https://secure.gravatar.com/avatar/db6fe8be904aa71b46d33214e34dd90a?s=50&r=g",
            "https://secure.gravatar.com/avatar/55089e1a4f5e3bfd99c9809154c5003e?s=50&r=g",
            "https://secure.gravatar.com/avatar/1644dbff11b0aba44564d65d22debc42?s=50&r=g",
            "https://secure.gravatar.com/avatar/cbc20504c51b4549f29caf0763543799?s=50&r=g",
            "https://secure.gravatar.com/avatar/43b7f2a7148a3d9ddbf96def95c35fb1?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/1644dbff11b0aba44564d65d22debc42?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/43b7f2a7148a3d9ddbf96def95c35fb1?s=50&r=g",
            "https://secure.gravatar.com/avatar/945e5c3ef6a52d8d7394b10a99e26277?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/85e95e168c1371e945242a33bd6a2af1?s=50&r=g",
            "https://secure.gravatar.com/avatar/9e9f02a22aacb462648d768914259c14?s=50&r=g",
            "https://secure.gravatar.com/avatar/4fe8457b37456ae0bb7ef06a2cd8a507?s=50&r=g",
            "https://secure.gravatar.com/avatar/fb535f7afade5d8ab7d77d11f4c6fa96?s=50&r=g",
            "https://secure.gravatar.com/avatar/24378f75726084e94727109b24da6f38?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/cb14cd45e191b5d2a4eb62525b50fced?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/cbc20504c51b4549f29caf0763543799?s=50&r=g",
            "https://secure.gravatar.com/avatar/5e5d5a7abcef13892ba7b6d73b5ab9c0?s=50&r=g",
            "https://secure.gravatar.com/avatar/cbc20504c51b4549f29caf0763543799?s=50&r=g",
            "https://secure.gravatar.com/avatar/f02ffa033b2ea2c6b97d3c6214046445?s=50&r=g",
            "https://secure.gravatar.com/avatar/1188aff34e54121f13304fd286195cb0?s=50&r=g",
            "https://secure.gravatar.com/avatar/0c852e6edc031cf12638486802ba8ac2?s=50&r=g",
            "https://secure.gravatar.com/avatar/cbc20504c51b4549f29caf0763543799?s=50&r=g",
            "https://secure.gravatar.com/avatar/5d1a574fd57e50928b402cbb44a9197e?s=50&r=g",
            "https://secure.gravatar.com/avatar/f253c1b1c80e5c31fad8c04b87e17c81?s=50&r=g",
            "https://secure.gravatar.com/avatar/fa0374c94601e5594d11c30bdb6cca84?s=50&r=g",
            "https://secure.gravatar.com/avatar/17e33ca3b7ddd29e00dbb244ebae2f86?s=50&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Timothy Prickett Morgan"
        ],
        "publish_date": "2024-03-12T00:00:00",
        "summary": "",
        "meta_description": "Ultimately, every problem in the constantly evolving IT software stack becomes a database problem, which is why there are 418 different databases and",
        "meta_lang": "en",
        "meta_favicon": "https://www.nextplatform.com/wp-content/uploads/2015/04/cropped-PlatformStack-150x150.jpg",
        "meta_site_name": "The Next Platform",
        "canonical_link": "https://www.nextplatform.com/2024/03/12/the-cloud-outgrows-linux-and-sparks-a-new-operating-system/",
        "text": "Ultimately, every problem in the constantly evolving IT software stack becomes a database problem, which is why there are 418 different databases and datastores in the DB Engines rankings and there are really only a handful of commercially viable operating systems. But what if the operating system is the problem?\n\nWe are so used to thinking of the operating system as the foundation of the system that this kind of talk seems more weird than it does heresy, but make no mistake. When Michael Stonebraker and Matei Zaharia and a team of techies from the Massachusetts Institute of Technology and Stanford University are involved in creating a new operating system, it is definitely going to be heresy.\n\nStonebraker says that the spark for the idea for DBOS, which is short for database operating system, came when he was listening to a talk by Zacharia, who among other things was the creator of the Spark in-memory database while at the AMPLab at the University of California Berkeley and the co-founder and chief technology officer of Databricks, which has commercialized Spark.\n\n“This talk was at Stanford three and a half years ago,” Stonebraker tells The Next Platform. “And Matei said that Databricks was routinely orchestrating a million Spark subtasks on sizeable clouds and that Databricks had to keep track of scheduling a million things. He said that this can’t be done with traditional operating system scheduling, and so this was done out of a Postgres database. And then he started to whine that Postgres was too slow, and I told him we can do better than that.”\n\nStonebraker, who is an adjunct professor at MIT and a member of the vaunted CSAIL research team that has brought so many innovations to information technology, would know.\n\nLike all of the other database pioneers from the late 1970s and early 1980s, Stonebraker read the early relational data model papers by IBMer Edgar Codd, and in 1973 started work on the Ingres database while at Berkeley, and created the Postgres follow-on to it. Stonebraker was chief technology officer at relational database maker Informix, was one of the researchers on the C-Store shared-nothing columnar database for data warehousing (which was eventually commercialized as Vertica), and was part of the team that created H-Store, a distributed, in-memory OLTP system (which was eventually commercialized as VoltDB). More recently, Stonebraker led an effort to create an array-based database called SciDB that was explicitly tuned for the needs of technical applications, which think in terms of arrays not tables as in the relational model.\n\nSo Zaharia saying that Postgres performance was poor was like calling Stonebraker’s child a bit slow. . . .\n\nAnd rather than fight about it, Stonebraker and Zaharia teamed up to create an operating system based on a database rather than a database bolt on for an operating system.\n\nIn an interview with The Next Platform back in August 2017, we talked to Stonebraker about how hardware drives the shape of databases as the storage hierarchy changes, but this might be a case where a database operating system kernel might start driving the shape of the hardware. (We will see how this DBOS idea takes off.) After that Stanford talk, Stonebraker and Zaharia played around with ideas, and built a prototype operating system on VoltDB to prove it would work; then they founded a company to commercialize the idea in April 2023 and secured $8.5 million initial seed funding to start building the real DBOS. Engine Ventures and Construct Capital led the funding, along with Sinewave and GutBrain Ventures.\n\nWhat is breaking the operating system, and making companies like Databricks do weird bolt-ons of Postgres to maintain the state of Spark clusters outside of an operating system, is that the state of an operating system has gone up by five or six orders of magnitude in the more than five decades that Stonebraker has been programming. He gives a personal example. Back when Stonebraker was tooling around with Unix in 1973 on a DEC PDP-1141, it had 48K of memory and 20 MB of disk capacity. DBOS was tested early on running on the MIT Super Cloud, a cluster with 32,000 cores, a few terabytes of main memory, and many terabytes of secondary storage. There is just so much more stuff to keep track of, and so many more services running on that stuff, too.\n\n“The state that the operating system has to keep track of – memory, files, messages, and so on – is approximately linear to the resources you have got,” says Stonebraker. “So without me saying another word, keeping track of operating system state is a database problem not addressed by current operating system schedulers. Moreover, OLTP database performance has gone up dramatically, and that is why we thought instead of running the database system in user space on top of the operating system, why don’t we invert our thinking 180 degrees and run the operating system on top of the database, with all of the operating services are coded in SQL?”\n\nAll of the investors in DBOS said that using VoltDB at the heart of this thing was not possible because it was not open source (there would seem to be an easy fix for that) and that because DBOS had to be open source, the underlying database would have to be, too.\n\nSo the decision was made to use the FoundationDB distributed key-value store as the scheduling core of the first iteration of DBOS. FoundationDB was created Nick Lavezzo, Dave Rosenthal, and Dave Scherer, which was released in 2012, acquired by Apple in 2015, and open sourced by Apple in 2018. FoundationDB is a blazingly fast NoSQL database, which means that it does support the ACID properties of a relational database but which does not offer full SQL compliance. (Stonebraker tells us that DBOS eventually will do that, which seems to imply the underlying database engine will change.) Right now, DBOS has been tested running across 1,000 cores running applications coded in TypeScript, but Stonebraker says there is no reason to believe that DBOS can’t scale across 1 million cores or more and support Java, Python, and other application languages as they are needed by customers.\n\nThe first iteration of DBOS runs on Amazon Web Services and uses the Firecracker microVM service, itself a stripped down KVM hypervisor running on a stripped down Linux microkernel, to create the user space for FoundationDB to run within. So technically, there is still Linux underneath DBOS. But nothing like the full blown Red Hat Enterprise Linux or SUSE Linux Enterprise Server that companies deploy or the homegrown, full-blown Linuxes that the hyperscalers and cloud builders have created for their own use. Stonebraker and Zaharia are working on ports to the Microsoft Azure and Google Cloud infrastructure, and it will be interesting to see how this is done. . . .\n\nThe point is, there is a minimal kernel underneath FoundationDB, which has device drivers, memory management, interrupt handlers, and some basic data movement functions, and the database services are written in TypeScript and their state tables can be queries in SQL. (Again, we would have preferred a relational database where DBOS services are written themselves in SQL, because that is a cleaner and funnier story.)\n\nStonebraker says that what he and Zaharia have really created is a transactional serverless platform that can run stateful applications. For now, DBOS can give the same kind of performance as that full blown Linux operating system, and thanks to the distributed database underpinnings of its kernel, it can do things that a Linux kernel just cannot do. And it can do all of these things without a full Linux OS and without Kubernetes containing things, and without having to bolt Postgres onto the side of the database middleware.\n\nOne is provide reliable execution, which means that is a program running atop DBOS is ever interrupted, it starts where it left off and does not have to redo its work from some arbitrary earlier point and does not crash and have to start from the beginning. And because every little bit of the state of the operating system – and therefore the applications that run atop it – is preserved, you can go backwards in time in the system and restart the operating system if it experiences some sort of anomaly, such as a bad piece of application software running or a hack attack. You can use this “time travel” feature, as Stonebraker calls it, to reproduce what are called heisenbugs – ones that are very hard to reproduce precisely because there is no shared state in the distributed Linux and Kubernetes environment and that are increasingly prevalent in a world of microservices.\n\nHere is what the time travel screen looks like:\n\nThis time travel feature also lets you run new code against historical system state.\n\nThe other benefit of the DBOS is that it presents a smaller attack surface for hackers, which boosts security, and that you analyze the metrics of the operating system in place since they are already in a NoSQL database that can be queried rather than aggregating a bunch of log files from up and down the software stack to try to figure out what is going on.\n\nBy the way, if you look on GitHub to take a gander at the DBOS code, you will find code, but we do not believe it is for this particular instance of DBOS. It is for a DBOS project that was started by Peter Kraft and Qian Li, who were PhD students at Stanford and who we are guessing now work on the formal DBOS project.\n\nDBOS Cloud, as the formal product is called, comes in two versions at the moment. There is a free version that can use the RDS Postgres service at AWS as an application datastore running on the db.ts.micro instance size only, and it is scaled to handle 1 million service calls per month. (We assume that means API service calls). This free tier holds operating system log data for three days and is allowed to have one developer on the account. Support is through Discord and the SDK only works with TypeScript and Postgres.\n\nThere is also a custom tier for DBOS, which we presume costs money, that can use other databases and datastores for user application data, stores more than three days of log data, can have multiple users per account, that adds email and Slack support with DBOS techies, and that is available on other clouds as well as AWS. Being a startup, new clouds, new languages, and human tech support will happen as enough people ask for them. No startup, not even one started by Stonebraker and Zaharia, can boil the ocean.\n\nIn a way, you really need to think of DBOS as a competitor to Linux, Windows Server, or Unix but to the AWS Lambda serverless function as a service stack. Stonebraker and Zaharia do:\n\nOne last thing. We know of operating systems that had an intimate relationship with a database, but this twist is actually a new one in that the operating system kernel/schedular is itself largely a database and services are created in database languages.\n\nFor example. IBM’s System/38 and AS/400 minicomputers had a relational database at the heart of the operating system and in fact the database was the only file system allowed on these machines from 1978 through 1996, at which time IBM pulled the database out of the operating system and added in the OS/2 Parallel File System to give a POSIX-compliant, ASCII formatted file system for the AS/400. (Which is known today as the IBM i proprietary operating system.) The Pick operating system similarly had an integrated database, too. And of course, the “Longhorn” version of Windows Server 2008 was supposed to have the WinFS file system, which was based on a relational database, embedded in it, but that effort was spiked a decade and a half ago.\n\nWhich brings us to that one last thing: There is no reason why DBOS cannot complete the circle and not only have a database as an operating system kernel, but also have a relational database as the file system for applications."
    }
}