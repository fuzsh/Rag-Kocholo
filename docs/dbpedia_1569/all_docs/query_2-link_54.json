{
    "id": "dbpedia_1569_2",
    "rank": 54,
    "data": {
        "url": "https://www.nature.com/articles/s41598-023-49396-4",
        "read_more_link": "",
        "language": "en",
        "title": "UAV path planning based on third-party risk modeling",
        "top_image": "https://media.springernature.com/m685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig1_HTML.png",
        "meta_img": "https://media.springernature.com/m685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig1_HTML.png",
        "images": [
            "https://pubads.g.doubleclick.net/gampad/ad?iu=/285/scientific_reports/article&sz=728x90&c=1514731503&t=pos%3Dtop%26type%3Darticle%26artid%3Ds41598-023-49396-4%26doi%3D10.1038/s41598-023-49396-4%26subjmeta%3D166,258,639,705,794,987%26kwrd%3DElectrical+and+electronic+engineering,Information+technology,Software",
            "https://media.springernature.com/full/nature-cms/uploads/product/srep/header-d3c533c187c710c1bedbd8e293815d5f.svg",
            "https://media.springernature.com/w215h120/springer-static/image/art%3A10.1038%2Fs41598-021-97804-4/MediaObjects/41598_2021_97804_Fig1_HTML.png",
            "https://media.springernature.com/w215h120/springer-static/image/art%3A10.1038%2Fs41598-023-43783-7/MediaObjects/41598_2023_43783_Fig1_HTML.png",
            "https://media.springernature.com/w215h120/springer-static/image/art%3A10.1038%2Fs41598-023-32086-6/MediaObjects/41598_2023_32086_Fig1_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig1_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig2_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig3_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig4_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig5_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig6_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig7_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig8_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig9_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig10_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig11_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig12_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig13_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig14_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig15_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig16_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig17_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig18_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig19_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig20_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig21_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig22_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig23_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig24_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig25_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig26_HTML.png",
            "https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-023-49396-4/MediaObjects/41598_2023_49396_Fig27_HTML.png",
            "https://pubads.g.doubleclick.net/gampad/ad?iu=/285/scientific_reports/article&sz=300x250&c=236347351&t=pos%3Dright%26type%3Darticle%26artid%3Ds41598-023-49396-4%26doi%3D10.1038/s41598-023-49396-4%26subjmeta%3D166,258,639,705,794,987%26kwrd%3DElectrical+and+electronic+engineering,Information+technology,Software",
            "https://www.nature.com/static/images/logos/sn-logo-white-ea63208b81.svg",
            "https://www.nature.com/static/images/logos/nature-briefing-ai-and-robotics-logo-51b3cf6c52.svg",
            "https://verify.nature.com/verify/nature.png",
            "https://www.nature.com/b9eaq5xu/article/s41598-023-49396-4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-12-14T00:00:00",
        "summary": "",
        "meta_description": "Drones play an important role in modern cities, they bring convenience but also bring corresponding risks. Falling drones can cause casualties or damage to urban facilities and serious property damage, which increases the third-party risk problem. An effective way to reduce these third-party risks is to avoid high-risk areas in path planning, but most current path planning methods are optimized to minimize flight distance, and third-party risk costs are rarely considered.&nbsp;In this paper, a comprehensive risk-cost UAV path planning method is proposed, which evaluates urban risk by establishing a third-party risk model that incorporates obstacle risk, death risk, and property loss risk. This paper proposes a Min-cost A* algorithm based on city risk assessment, and smooths the generated low-risk path through the improved Floyd algorithm. The results show that the path planning method can effectively reduce the risk in the flight path, improve the reliability of the UAV flight path in the urban environment, and solve the problem of planning the third-party risk path of the UAV.",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicons/nature/apple-touch-icon-f39cb19454.png",
        "meta_site_name": "Nature",
        "canonical_link": "https://www.nature.com/articles/s41598-023-49396-4",
        "text": "Obstacle risk model\n\nPhysical barriers in cities include static objects such as buildings, power grids, and trees, as shown in Fig. 3. UAVs have a higher probability of touching obstacles during climbing, turning, and other actions. Therefore, obstacle risk is considered the fundamental risk type in three-dimensional path planning.\n\nIn UAV path planning, common methods for assessing obstacles include grid maps and probabilistic maps. Grid maps partition the environment into regular grids and assign a state (occupied or unoccupied) to each grid cell, enabling fast collision detection. However, the grid resolution can affect map precision and computational complexity, leading to quantization errors. Probabilistic maps, on the other hand, use probability models to represent the likelihood of obstacle presence at each location in the environment. Common types of probabilistic maps include occupancy grid maps and Gaussian mixture models. This approach requires substantial storage and computational resources, potentially limiting real-time data updates and fusion. In consideration of obstacle assessment errors, computational and storage resources, and overall costs, this study introduces “risk radius \\(\\left(r\\right)\\)” to evaluate obstacle risks. Within the three-dimensional atmospheric blocks in urban airspace (Fig. 2), we assess the risks associated with obstacles within these atmospheric block units. The assessment is based on the ratio of the volume of obstacles within a three-dimensional block unit with a side length of \\(r\\) to the volume of the three-dimensional block unit itself. This approach enables a holistic evaluation of spatial obstacle risks. Relative to grid maps, this method circumvents quantization errors stemming from grid resolution. Simultaneously, it avoids the constraints on data updates and fusion imposed by probabilistic maps due to probabilistic inference. This results in algorithmic time savings, facilitating the rapid planning of flight paths. Obstacle risk \\(O\\) is recorded as:\n\n$$O=\\frac{{V}_{obstacle}\\left(r\\right)}{{V}_{surround}\\left(r\\right)}$$\n\n(1)\n\n\\({V}_{obstacle}\\left(r\\right)\\) represents the volume of obstacles in a three-dimensional gas block cell with side length \\(r\\) and \\({V}_{surround}\\left(r\\right)\\) represents the volume of a three-dimensional gas block element with side length \\(r\\).\n\nDeath risk model\n\nCities are densely populated, and effective assessment of death risk is a safety prerequisite for drone path planning. Hu19 and Izdebski29 defined and evaluated the risk of death in different situations, which improved the safety rate of the terrestrial population. In most studies, the assessment of mortality risk pertains primarily to the evaluation of direct death risk, which refers to the assessment of casualties resulting directly from a UAV's fall. This paper introduces an evaluation of casualties resulting from indirect death risk, encompassing the risk associated with a drone colliding with either a crowd or a structure. The death risk (\\(D\\)) is defined as the combined result of the direct death risk \\({D}_{1}\\) and the indirect death risk \\({D}_{2}\\). This comprehensive approach aims to provide a more thorough assessment of the death risk posed by drones operating in urban environments.\n\n$$D={D}_{1}+{D}_{2}$$\n\n(2)\n\nDirect death risk\n\nDuring the flight process, a drone may lose control and experience a fall due to factors such as navigation failure, low battery power, program malfunction, and other reasons. Under normal circumstances, the drone accident can be divided into three stages, as shown in Fig. 4: (1) the drone fails during flight and cannot fly normally; (2) the fault cannot be repaired in time and the drone falls; (3) the falling drone causes damage to personnel on the ground.\n\nPang4 combined the three stages of drone fall to establish a pedestrian death risk model. This model integrates the probability of drone system failure and descent, the number of individuals hit by the drone, and the probability of fatality after a drone collision to evaluate the death risk. However, this model does not take into account the probability of a drone striking a person during descent. In the context of analyzing the drone descent process, when a drone experiences an accident and enters the third stage (where the falling drone causes injuries to individuals on the ground), this event can be considered an independent occurrence. In other words, the incidence of each descent event does not have a mutual influence on one another. Therefore, the number of fatalities resulting from each descent event can be expressed as the product of the total number of individuals within the drone descent area and the probability of a drone striking a person during descent and subsequently causing a fatality. The probability of a drone striking a person during descent and causing a fatality is equal to the product of probability of a drone system failure and descent, a drone striking a person during descent, and a fatality occurring following a drone-person collision. We designate the direct fatality risk resulting from each descent event as \\({D}_{1}\\), expressed as:\n\n$${D}_{1}={{N}_{hit}^{p}P}_{crash}{P}_{impact}{P}_{D}^{p}$$\n\n(3)\n\nwhere \\({P}_{crash}\\) represents the probability that the drone fails to fall, \\({P}_{impact}\\) represents the probability that the drone falls to hit people, \\({N}_{hit}^{p}\\) represents the number of people hit by the drone and \\({P}_{D}^{p}\\) represents the probability of causing human death after a drone fall impacts a person.\n\n\\({P}_{crash}\\) is determined by the reliability of the hardware and software of the unmanned aerial system. According to the research of the Joint Regulatory Organization for Unmanned Aerial Vehicles, \\(1\\times {10}^{-4}\\) per flight hour (pfh) is used as the minimum accident rate of RPAS (remotely piloted aircraft system), from which the probability of accident can be calculated9, this article \\(1\\times {10}^{-6}\\) is used as the calculation value of the \\({P}_{crash}\\).\n\n\\({P}_{D}^{p}\\) is related to impact kinetic energy, space shielding factors, etc., and this article uses the method proposed by Dalamagkidis35 to calculate the probability of death from the accident \\({P}_{D}^{p}\\):\n\n$${P}_{D}^{p}=\\frac{1}{1+\\sqrt{\\frac{\\alpha }{\\beta }{\\left(\\frac{\\beta }{{E}_{imp}}\\right)}^{\\frac{1}{{4s}_{c}}}}}$$\n\n(4)\n\nwhere \\({E}_{imp}\\) represents the impact kinetic energy and \\({{\\varvec{s}}}_{{\\varvec{c}}}\\) represents the occlusion factor, which is an absolute real number in the range of (0,1]20. The average value of the \\({{\\varvec{s}}}_{{\\varvec{c}}}\\) is 0.5, representing 50% probability of the shock energy causing death, \\(\\beta \\) is the threshold of the shock energy required to cause death when the \\({{\\varvec{s}}}_{{\\varvec{c}}}\\) tends to zero7. Based on the above research, this article takes \\(\\alpha \\) =106 J, \\(\\beta \\) =100 J.\n\nThis paper combines the physical equations of kinetic energy to calculate the \\({E}_{imp}\\), as shown in Fig. 5, the impact kinetic energy generated by the fall of the drone is related to the mass of the drone itself and the instantaneous landing speed, which is denoted as:\n\n$${ E}_{imp}=\\frac{1}{2}m{v}^{2}$$\n\n(5)\n\nwhere \\(m\\) (kg) is the mass of the falling drone and \\(v\\) is the instantaneous speed of the drone when it lands.\n\nIn Eq. (3), the number of people hit by the drone (\\({N}_{hit}^{p}\\)) is related to the density of the ground population (\\({\\sigma }_{p}\\)) and the area (\\({S}_{hit}\\)) expected to be hit by the drone, which is denoted as:\n\n$${N}_{hit}^{p}={S}_{hit}{\\sigma }_{p}$$\n\n(6)\n\nThe expected impact area can be estimated based on the radius of the drone and the radius of the person, which can be expressed as:\n\n$${S}_{hit}=\\pi {\\left({r}_{UAV}+{r}_{Human}\\right)}^{2}$$\n\n(7)\n\nwhere \\({r}_{UAV}\\) indicates the radius of the drone, depending on the drone model, \\({r}_{Human}\\) represents the radius of the person, and the \\({r}_{Human}\\) in this study is 0.164 m.\n\n\\({P}_{impact}\\) is an important factor in the casualties caused by unmanned falls, it reflects the probability that a UAV falls to hit people, and the introduction of \\({P}_{impact}\\) can make the death risk assessment closer to the actual situation. Usually, \\({P}_{impact}\\) is related to the density of the population on the ground (\\({\\sigma }_{p}\\)) and the contact area (\\({A}_{P}\\)) of the crash between the falling drone and the person, this paper adds the skin penetration degree coefficient (\\(\\xi \\)) based on it. Skin penetration occurs at high kinetic energy density (high energy in a small impact area), and when the drone falls, the carbon fiber frame can cause varying degrees of damage to human skin, which is the direct cause of casualties. Therefore, the introduction of the skin penetration coefficient into the evaluation of the \\({P}_{impact}\\) can improve the accuracy of the assessment results, \\({P}_{impact}\\) is recorded as:\n\n$${P}_{impact}={\\xi \\sigma }_{p}{A}_{P}$$\n\n(8)\n\nDuring fall, the drone can hit the head, chest, or abdomen, slightly increasing the value of the \\({A}_{P}\\), and the \\({A}_{P}\\) is between 0.25 and 0.636. \\(\\xi \\) is an absolute real number whose range is (0,1], the greater value of \\(\\xi \\), the higher the degree of penetration of the skin.\n\nFrom this analysis, the direct death risk model is as follows:\n\n$$\\left\\{\\begin{array}{l}{D}_{1}={P}_{crash}{P}_{impact}{P}_{D}^{p}{N}_{hit}^{p}\\\\ {P}_{impact}={\\xi \\sigma }_{p}{A}_{P}\\\\ { N}_{hit}^{p}={S}_{hit}{\\sigma }_{p}\\\\ {P}_{D}^{p}=\\frac{1}{1+\\sqrt{\\frac{\\alpha }{\\beta }{\\left(\\frac{\\beta }{{E}_{imp}}\\right)}^{\\frac{1}{{4s}_{c}}}}}\\\\ {S}_{hit}=\\pi {\\left({r}_{UAV}+{r}_{Human}\\right)}^{2}\\end{array}\\right.$$\n\n(9)\n\nIndirect death risk\n\nDrone falls hitting buildings can cause casualties; this paper combines the density of buildings for indirect death risk assessment. The risk of indirect death is \\({D}_{2}\\), and the main difference between \\({D}_{1}\\) and \\({D}_{2}\\) is that the former emphasizes that the casualties caused by the direct impact of the drone fall are related to the population density, the latter is the indirect casualties caused by drones hitting buildings which related to the density of buildings on the ground, \\({D}_{2}\\) is recorded as:\n\n$${D}_{2}={P}_{crash}{N}_{b\\_impact}{N}_{D}^{p}$$\n\n(10)\n\nwhere \\({P}_{crash}\\) indicates the probability of a drone failure to fall, \\({N}_{b\\_impact}\\) indicates the number of buildings impacted by the drone’s fall, and \\({N}_{D}^{p}\\) indicates the average number of casualties caused by a drone colliding with a building, and its value is 0.7537\n\n\\({N}_{b\\_impact}\\) is determined by the density of the building (\\({\\sigma }_{b}\\)) and estimated drone impact area(\\({S}_{b\\_hit}\\)) , which is denoted as:\n\n$${N}_{b\\_impact}={\\sigma }_{b}{S}_{b\\_hit}$$\n\n(11)\n\nwhere \\({S}_{b\\_hit}\\) indicates the estimated drone impact area, and here is the formula for calculating the \\({S}_{b\\_hit}\\):\n\n$${S}_{b\\_hit}=\\pi {\\left({r}_{UAV}\\right)}^{2}$$\n\n(12)\n\nThe indirect death risk assessment model are:\n\n$$\\left\\{\\begin{array}{l}{D}_{2}={P}_{crash}{N}_{b\\_impact}{N}_{D}^{p}\\\\ { N}_{hit}^{b}={\\sigma }_{b}{S}_{b\\_hit}\\\\ {S}_{b\\_hit}=\\pi {\\left({r}_{UAV}\\right)}^{2}\\end{array}\\right.$$\n\n(13)\n\nProperty loss risk model\n\nProperty loss risk refers to the potential losses that may occur when a drone collides with buildings or public infrastructure during its flight, as shown in Fig. 6. Firstly, the magnitude of damage caused by the collision is related to the drone's flight altitude, with higher altitudes resulting in greater energy during a fall and consequently more severe property damage. Secondly, the extent of damage caused by the collision is also dependent on the kinetic energy of the drone during flight, with higher flight speeds leading to greater kinetic energy and the potential for more substantial property damage. This paper assesses property damage caused by variations in drone altitude and flight speed. Property damage risk is defined as follows:\n\n$$P=mg\\Delta h+\\frac{1}{2}m{v}^{2}$$\n\n(14)\n\nwhere \\(v\\) is the speed of the drone during flight, \\(m\\) is the mass of the drone, \\(\\Delta h\\) is the change of the drone flight altitude, and \\(g\\) takes 9.8 \\(m/{s}^{2}\\).\n\nTo solve the problem of risk-based drone path planning, this article establishes a UAV path planning model that contains obstacle risk, death risk, and property loss risk. We also propose a new A* algorithm named Min-cost A* algorithm. Finally, we improve the Floyd algorithm and use it to smooth the path.\n\nUAV path-planning model based on third-party risk\n\nThe UAV path planning problem with comprehensive risk cost can be regarded as a non-linear optimization problem, and the decision variables are the third-party risks (obstacle risk, death risk, property loss risk) established. The objective function is recorded as:\n\n$${\\text{min}}\\,Z={\\alpha }_{1}O{+\\alpha }_{2}D+{\\alpha }_{3}P$$\n\n(15)\n\nwhere \\(O\\) represents the cost of obstacles, \\(D\\) represents the death risk, \\(P\\) represents the property damage risk, \\({\\alpha }_{1}, {\\alpha }_{2}, {\\alpha }_{3}\\) represents the weight factor of each risk, and \\({\\alpha }_{1}{+\\alpha }_{2}+{\\alpha }_{3}=1\\).\n\nIn this paper, the relevant performance of the UAV, such as steering angle, climb angle, limit turning radius, flight altitude, endurance time, and minimum step size, are used as constraints to improve the reliability of UAV flight.\n\nConstraints on UAV steering angle:\n\n$$arccos\\left[\\frac{\\left({x}_{i}-{x}_{i-1}\\right)\\left({x}_{i+1}-{x}_{i}\\right)+\\left({y}_{i}-{y}_{i-1}\\right)\\left({y}_{i+1}-{y}_{i}\\right)}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}\\sqrt{{\\left({x}_{i+1}-{x}_{i}\\right)}^{2}+{\\left({y}_{i+1}-{y}_{i}\\right)}^{2}}}\\right]\\ge 0$$\n\n(16)\n\n$$arccos\\left[\\frac{\\left({x}_{i}-{x}_{i-1}\\right)\\left({x}_{i+1}-{x}_{i}\\right)+\\left({y}_{i}-{y}_{i-1}\\right)\\left({y}_{i+1}-{y}_{i}\\right)}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}\\sqrt{{\\left({x}_{i+1}-{x}_{i}\\right)}^{2}+{\\left({y}_{i+1}-{y}_{i}\\right)}^{2}}}\\right]\\le {\\varphi }_{max}$$\n\n(17)\n\nwhere \\({\\varphi }_{max}\\) represents the maximum steering angle of the drone, \\(\\left({x}_{i}, {y}_{i},{z}_{i}\\right)\\) represents the current location of the UAV node, \\(\\left({x}_{i+1}, {y}_{i+1}, {z}_{i+1}\\right)\\) represents the next location of the UAV node, and \\(\\left({x}_{i-1}, {y}_{i-1}, {z}_{i-1}\\right)\\) represents the previous location of the UAV node.\n\nConstraints on UAV climbing angle:\n\n$$0\\le {\\theta }_{i}=\\frac{\\left|{z}_{i}-{z}_{i-1}\\right|}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}}\\le {\\text{tan}}{\\theta }_{max}$$\n\n(18)\n\nwhere \\({\\theta }_{max}\\) represents the maximum climb angle of the drone, and \\({\\theta }_{i}\\) is the climbing angle of the current position.\n\nConstraints on UAV turning radius:\n\n$${r}_{i}\\ge {r}_{min}=\\frac{({{v}_{min})}^{2}}{g\\sqrt{{{(n}_{ymax})}^{2}}}$$\n\n(19)\n\nwhere \\({r}_{i}\\) indicates the turning radius of the current position of the drone, \\({r}_{min}\\) indicates the limit turning radius, \\({v}_{min}\\) indicates the minimum flight speed, and \\({n}_{ymax}\\) indicates the maximum normal overload of the drone.\n\nIn urban environments, the flight altitude of UAVs is not only related to the performance of UAVs themselves, but also limited by the urban UAV flight management system, and the UAV flight altitude constraints are as follows:\n\n$${H}_{min}\\le {h}_{i}\\le {H}_{max}$$\n\n(20)\n\nAmong them \\({h}_{i}\\) indicates the current flight altitude of the drone and \\({H}_{min}\\) and \\({H}_{max}\\) represent the minimum flight altitude and maximum flight altitude of the drone restricted by the city.\n\nThe endurance time of the drone is affected by the battery level, so the flight time should be strictly less than the endurance time, and the flight time constraints of the drone are as follows:\n\n$$\\sum_{i=1}^{n}{t}_{i}<{t}_{max}$$\n\n(21)\n\nwhere \\(\\sum_{i=1}^{n}{t}_{i}\\) indicates the total UAV flight time from the departure point to the current location, and \\({t}_{max}\\) indicates the maximum UAV endurance time.\n\nIn the actual flight of the drone, the constraint of the shortest distance that must fly directly before changing the flight attitude is called the minimum step length constraint, which can improve the reliability of the UAV attitude adjustment process, and the minimum step length constraint as follows:\n\n$${l}_{i}\\ge l$$\n\n(22)\n\nAmong them, \\({l}_{i}\\) indicates the step length of the drone to make attitude adjustment in the current position, and \\(l\\) represents the minimum step length.\n\nIn summary, the risk-based cost UAV path planning model can be expressed as follows:\n\n$${\\text{min}}\\,Z={\\alpha }_{1}O{+\\alpha }_{2}D+{\\alpha }_{3}P$$\n\n$$s.t\\left\\{\\begin{array}{l}arccos\\left[\\frac{\\left({x}_{i}-{x}_{i-1}\\right)\\left({x}_{i+1}-{x}_{i}\\right)+\\left({y}_{i}-{y}_{i-1}\\right)\\left({y}_{i+1}-{y}_{i}\\right)}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}\\sqrt{{\\left({x}_{i+1}-{x}_{i}\\right)}^{2}+{\\left({y}_{i+1}-{y}_{i}\\right)}^{2}}}\\right]\\ge 0\\\\ arccos\\left[\\frac{\\left({x}_{i}-{x}_{i-1}\\right)\\left({x}_{i+1}-{x}_{i}\\right)+\\left({y}_{i}-{y}_{i-1}\\right)\\left({y}_{i+1}-{y}_{i}\\right)}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}\\sqrt{{\\left({x}_{i+1}-{x}_{i}\\right)}^{2}+{\\left({y}_{i+1}-{y}_{i}\\right)}^{2}}}\\right]\\le {\\varphi }_{max}\\\\ 0\\le {\\theta }_{i}=\\frac{\\left|{z}_{i}-{z}_{i-1}\\right|}{\\sqrt{{\\left({x}_{i}-{x}_{i-1}\\right)}^{2}+{\\left({y}_{i}-{y}_{i-1}\\right)}^{2}}}\\le {\\text{tan}}\\,{\\theta }_{max} \\\\ {r}_{i}\\ge {r}_{min}=\\frac{({{v}_{min})}^{2}}{g\\sqrt{{{(n}_{ymax})}^{2}}}\\\\ {H}_{min}\\le {h}_{i}\\le {H}_{max}\\\\ \\sum_{i=1}^{n}{t}_{i}<{t}_{max}\\\\ {l}_{i}\\ge l\\end{array}\\right.$$\n\n(23)\n\nPath-planning solution algorithm based on risk cost\n\nThis section details path planning solutions based on risk costs, that is, the Min-cost A* algorithm. The algorithm retains the characteristics of the A* algorithm that responds quickly to the environment, and we improve the cost function and heuristic function accordingly to improve the accuracy and speed of the algorithm. We also calculate the weight factors of risks by the analytic hierarchy method and smooth the risk path by the improved Floyd algorithm.\n\nMin-cost A*algorithm\n\nThe A* algorithm is a heuristic algorithm, the basic idea is that when the drone starts to run, use the environmental prior information to calculate the cost between points, the algorithm marks the selected points as a set M, and the unselected point set is recorded as N. At the beginning of the algorithm, only the initial point exists in the set M, and N contains other nodes except the starting point, select the path point with the lowest cost to join the set M, and then update the information from the M and N set. Continue selecting the point in N that costs the least to reach the point in M until the shortest path is obtained.\n\nEquation (24) is the node priority calculation method of the A* algorithm. During execution of the algorithm, the node with the smallest value of \\(f\\left(n\\right)\\) will be the next node to search.\n\n$$f\\left(n\\right)=g\\left(n\\right)+h\\left(n\\right)$$\n\n(24)\n\nwhere \\(f\\left(n\\right)\\) is the comprehensive priority of node \\(n\\), \\(g\\left(n\\right)\\) is the cost of the node \\(n\\) from the starting point, and \\(h\\left(n\\right)\\) is the estimated cost of node n from the endpoint, that is, the heuristic function of the A* algorithm. A commonly used heuristic function is to represent the cost in terms of distance, that is, the shortest distance. In distance-based environments, commonly used distances are Manhattan distance or Euclidean distance, as shown in Fig. 7a. However, in a risk-based environment, as shown in Fig. 7b, the distribution of risk cost values in different spatial units is uneven and unpredictable, and it is difficult to obtain suitable heuristic values, but \\(h\\left(n\\right)\\) is critical to the accuracy and speed of the algorithm.\n\nThe A* algorithm must be able to find the shortest path when \\(h\\left(n\\right)\\) is always less than or equal to the cost of the node \\(n\\) to the endpoint. But in this case, the number of nodes searched by the algorithm increases, and the speed of the algorithm decreases. The A* algorithm can quickly find the optimal path when \\(h\\left(n\\right)\\) is equal to the cost from node \\(n\\) to the endpoint. However, it is difficult to achieve this effect in the actual situation because it is difficult to calculate how far the distance is before the end. If the value of \\(h\\left(n\\right)\\) is more expensive than the node \\(n\\) to the endpoint, the A* algorithm is unlikely to find the shortest path, but the algorithm is fast. In extreme cases, when the heuristic function \\(h\\left(n\\right)\\) is always 0, \\(g\\left(n\\right)\\) will determine the priority of the node, which is the Dijkstra algorithm. At the other extreme, if \\(h\\left(n\\right)\\) is much larger than \\(g\\left(n\\right)\\), this is the best priority search.\n\nCombined with the above analysis, aiming at the selection of the heuristic function in the risk-cost environment and the UAV path planning problem-based on risk cost, this paper improves the cost function and heuristic function of the traditional A* algorithm and proposes the Min-cost A* calculation, which is as follows.\n\nBased on the minimum cost function \\(g\\left(n\\right)\\) under the influence of multiple factors, the Min-cost A* algorithm avoids the problem that the traditional A* algorithm only calculates the flight range and adds third-party risk generation value. The cost function of the Min-cost A* algorithm is the objective function of the UAV path planning model based on risk cost, expressed as:\n\n$${G}_{cost}\\left(n\\right)={\\alpha }_{1}O{+\\alpha }_{2}D+{\\alpha }_{3}P$$\n\n(25)\n\nwhere \\({G}_{cost}\\left(n\\right)\\) represents the cost function of the Min-cost A* algorithm, \\(O\\) represents the risk of obstacles, \\(D\\) represents the risk of death, \\(P\\) represents the risk of property damage, \\({\\alpha }_{1}+{\\alpha }_{2}+{\\alpha }_{3}=1\\)\n\nThe heuristic function of the Min-cost A* algorithm are as follows:\n\n$${H}_{cost}\\left(n\\right)={\\varphi }_{1}d\\left(n\\right)+{\\varphi }_{2}{d\\left(n\\right){O}_{next}+\\varphi }_{3}d\\left(n\\right){D}_{next}+{\\varphi }_{4}d\\left(n\\right){P}_{next}$$\n\n(26)\n\nwhere \\({\\varphi }_{1}+{\\varphi }_{2}+{\\varphi }_{3}+{\\varphi }_{4}=1\\),\\({H}_{cost}\\left(n\\right)\\) is the heuristic function after the first optimization of the Min-Cost A* algorithm, \\({X}_{next}\\) is the estimated risk cost of the next search node, \\(d\\left(n\\right)\\) is the Euclidean distance from the current node to the endpoint, and the calculation formula is:\n\n$$d\\left(n\\right)=\\sqrt{{\\left({x}_{i}-{x}_{end}\\right)}^{2}+{\\left({y}_{i}-{y}_{end}\\right)}^{2}+{\\left({z}_{i}-{z}_{end}\\right)}^{2}}$$\n\n(27)\n\nwhere \\(\\left({x}_{i}, {y}_{i}{,z}_{i}\\right)\\) represents the current search node and \\(\\left({x}_{end}, {y}_{end}{, z}_{end}\\right)\\) represents the endpoint. In case the algorithm fails to find an optimal solution due to too large a heuristic value, we optimize the heuristic function again, and the optimization strategy is as follows:\n\n$${H}_{cost}^{*}\\left(n\\right)=(1+\\frac{A}{B}){H}_{cost}\\left(n\\right)$$\n\n(28)\n\nwhere \\({H}_{cost}^{*}\\left(n\\right)\\) represents the final heuristic function of the Min-Cost A* algorithm, \\(A\\) represents the Manhattan distance from the current node \\(\\left({x}_{i}l, {y}_{i}{, z}_{i}\\right)\\) to the endpoint \\(\\left({x}_{end}, {y}_{end}{, z}_{end}\\right)\\) and \\(B\\) is the Manhattan distance from the current node to the starting point \\(\\left({x}_{start}, {y}_{start}{, z}_{start}\\right)\\). The calculation formula is:\n\n$$\\left\\{\\begin{array}{c}{B}_{i,start}=\\left|{x}_{i}-{x}_{start}\\right|+\\left|{y}_{i}-{y}_{start}\\right|+\\left|{z}_{i}-{z}_{start}\\right|\\\\ {A}_{i,end}=\\left|{x}_{i}-{x}_{end}\\right|+\\left|{y}_{i}-{y}_{end}\\right|+\\left|{z}_{i}-{z}_{end}\\right|\\end{array}\\right.$$\n\n(29)\n\nAccording to Eq. (28), the algorithm can be improved to set the adaptive heuristic function weights. The farther the distance from the current position to the endpoint, the more risk factors and the greater weight of the heuristic. Therefore, the combined cost of the Min-cost A* algorithm is expressed as:\n\n$${f}_{cost}\\left(n\\right)={G}_{cost}\\left(n\\right)+(1+\\frac{A}{B}){H}_{cost}^{*}\\left(n\\right)$$\n\n(30)\n\nThe Min-cost A* algorithm employs a greedy approach, selecting a locally optimal solution at each step to ensure that the final result approximates the global optimal solution. The algorithm uses a cost function based on the risk-cost UAV path planning model's objective function (as shown in Formula (25)). It searches for path nodes with the minimum risk, expanding in the order of increasing \\(f\\left(n\\right)\\) values. This means that nodes with smaller \\(f\\left(n\\right)\\) values are expanded first, thereby finding the optimal solution. The improved algorithm reduces search space, improves speed, and prevents the algorithm from falling into the local optimal caused by the large estimation of the heuristic function. The pseudocode of the program for the Min-cost A* algorithm is shown in Fig. 8.\n\nCalculation of the weight of the cost function\n\nIn Section “Min-cost A*algorithm”, the cost function selects the sum of the city's third-party risk costs, and the risk factor weights represent the degree of influence of different risks in UAV path planning. This study uses the Analytic Hierarchy Process (AHP) to determine the weights of risk factors. The general steps of the AHP method are shown in Fig. 9.\n\nThe first step of the Analytic Hierarchy Process (AHP) is to identify the objectives and their hierarchical relationships. In our case, the objective is to determine the weight relationships between obstacles, risk of death, and property damage. Therefore, this article constructs a three-level hierarchy consisting of the goal level, criteria level, and alternative level, as shown in Fig. 10.\n\nThe second step involves constructing judgment matrices to determine the relative importance between criteria and sub-criteria at each level through pairwise comparisons. In this article, the authors use the consistency matrix method along with a scale of 9 importance levels (with higher numbers indicating higher relative importance, e.g., if A is 9 relative to B, then B is 1/9 relative to A) to establish the judgment matrices, as shown in Table 2.\n\nThe third step involves using the square root method (Eq. 31) to calculate the geo metric mean of the normalized elements in each row of the judgment matrix, denoted as \\({w}_{i}\\).\n\n$${\\text{w}}=\\left[{w}_{1}, {w}_{2},{w}_{3}\\right]=[0.1228, 0.9682, 0.2181]^{\\prime}$$\n\n$$ {\\text{Feature}}\\,{\\text{matrix: C}} = \\left[ {\\begin{array}{*{20}c} {a_{11} } & {a_{12} { } \\ldots } & {a_{1n} } \\\\ {a_{{\\begin{array}{*{20}c} {21} \\\\ \\vdots \\\\ \\end{array} }} } & {{ }a_{{\\begin{array}{*{20}c} {22} \\\\ \\vdots \\\\ \\end{array} }} { } \\ddots { }} & \\vdots \\\\ {a_{n1} } & {{ }a_{n2} { } \\ldots { }} & {a_{nn} } \\\\ \\end{array} } \\right],w_{i}^{0} = \\frac{{\\left( {\\mathop \\prod \\nolimits_{j = 1}^{n} a_{ij} } \\right)^{\\frac{1}{n}} }}{{\\mathop \\sum \\nolimits_{i = 1}^{n} \\left( {\\mathop \\prod \\nolimits_{j = 1}^{n} a_{ij} } \\right)^{\\frac{1}{n}} }},{\\text{ n}} = {1},{ 2} \\ldots {\\text{n}} $$\n\n(31)\n\nwhere \\({a}_{ij}\\) is the result of comparison between elements \\(i\\) and \\(j\\), and the relative weight \\({w}^{0}\\) of each risk cost can be obtained by normalizing \\({w}^{0}\\):\n\n$${w}^{0}={[w}_{1}^{0}{,w}_{2}^{0},{w}_{3}^{0}]^\\prime=[0.0938, 0.7396, 0.1666]^{\\prime}$$\n\nFinally, check the consistency of the judgment matrix. The consistency indicators are \\(C.I.\\), \\(R.I.\\) and \\(C.R.\\) (\\(C.I.\\) is the consistency index, \\(R.I.\\) is the random index, and \\(C.R.\\) is the consistency ratio), and the calculation of \\(C.I.\\) is as follows:\n\n$$C.I.=\\frac{{\\lambda }_{max}-n}{n-1}$$\n\n(32)\n\nwhere \\({\\uplambda }_{{\\text{max}}}\\) is the maximum eigenvalue of the judgment matrix, \\(n\\) is the order of the judgment matrix, and the value of \\(R.I.\\) refers to the table of average random consistency index shown in Table 3. The lookup table yields \\(n\\)=3, \\(R.I.\\)=0.52. \\(C.R.\\) is calculated as follows:\n\n$$C.R.=\\frac{C.I}{R.I.}$$\n\n(33)\n\n\\(C.R.\\) < 0.1 is considered to pass the consistency test; if the conditions are not met, the judgment matrix must be checked and its value adjusted. \\(CR.=\\frac{C.I}{R.I.}=\\frac{0.0071}{0.52}=0.0136\\) pass the consistency test. The specific results are shown in Table 4, so \\({\\alpha }_{1}\\)=0.0938, \\({\\alpha }_{2}\\)=0.7396, \\({\\alpha }_{3}\\)=0.1666.\n\nSmoothing of the risk path\n\nThe result of the A* algorithm is a string of path point coordinates. The generated path is the folding line \"Z\" route, which does not conform to the real application. The Floyd algorithm can optimize the path, remove the extra points and inflection points of the A* algorithm path, and combine collinear node38.This paper realizes the smooth risk path by improving the Floyd algorithm. The path-smoothing principle of the Floyd algorithm is shown in Fig. 11.\n\nHowever, in a risky environment, the traditional Floyd algorithm has the possibility of removing low-risk path coordinates. The path coordinates determined by the Min-cost A* algorithm in the risk environment is to avoid the risk area, the traditional Floyd algorithm may smooth out the coordinates of some risk areas that need to be avoided, increasing the risk of drone flight, as shown in Fig. 12a. To solve this problem, this paper sets a risk threshold for the three-dimensional risk environment, and when the risk value exceeds this threshold, the original path point is retained, smaller than the risk threshold for smooth treatment, as shown in Fig. 12b.\n\nIn this paper, our risk assessment model and a risk-based path planning algorithm are simulated in the urban risk map. First, the risk assessment model is applied to the actual environment to generate an airspace map. Based on the flight risk analysis, a low-risk flight path is generated and smoothed. The effectiveness of the algorithm is proved by comparing the algorithms and analyzing the experimental results.\n\nEstablishing the experimental environment\n\nThe current study utilizes a multirotor unmanned aerial vehicle (UAV), specifically the DJI Phantom 4 Pro. Its main parameters are as follows: weight of 1.38 kg, maximum flight time of 30 min, maximum flight speed of 72 km/h, maximum flight altitude of 6000 m, minimum step length of 0.1 m, turning angle and climbing angle of ± 30°, and a turning radius of 10–15 m (in P mode, which refers to the normal flight mode). The main simulation environment for this article is as follows: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30 GHz, Windows 11 operating system, is simulated in MATLAB and Pycharm Community Edition. We selected a 1 km × 1 km urban area in Xi'an, China for airspace modeling, with each three-dimensional gas block element measuring 100 m × 100 m × 30 m. The selected area includes high-rise office buildings, residential buildings, and public facilities, representing the characteristics of a modern city. The area consists of a total of 652 buildings, with an average population density of 11,378 people per square kilometer39. Equations (1), (2), and (14) are used for risk assessment to generate a comprehensive risk simulation map that includes obstacle risk, death risk, and property loss risk, as shown in Fig. 13. Different color distributions on the map represent different risk distributions in the city. The brighter the color on the map, the higher the risk of the area. These high-risk areas mean a large population and more building distribution. The city risk can be estimated through the third-party risk assessment model and the city risk map can be generated, which is the basis for UAV path planning based on risk cost. In the following, we further perform a flight risk analysis, generate UAV paths based on urban risk maps, and verify the algorithm in this paper.\n\nFlight risk analysis\n\nIn the UAV risk cost model, the weight factors of obstacle risk, death risk and property loss risk are 0.0938(\\({\\alpha }_{1}\\)), 0.7396(\\({\\alpha }_{2}\\)), and 0.1666(\\({\\alpha }_{3}\\)), and the comprehensive risk cost of different flight layers is calculated. Within the restricted flight altitude of urban drones, the total flight cost decreases as the flight altitude increases, as shown in Fig. 14. In the airspace within 60 m, as shown in (a) and (b) in Fig. 14, the density of obstacles, population, and buildings is large. For example, the area near the map (5, 2), (6, 8) has the highest risk cost, then in the actual environment, such areas often include schools, office buildings, pedestrian streets, etc. When the flight altitude reaches more than 90 m, the total risk cost is significantly lower than within 60 m, as shown in (c) and (d) in Fig. 14. The reasons are as follows: the increased altitude of drones leads to a decrease in the risk of property damage, and the risk of obstacles and population density leads to a decrease in the risk of direct death, so the total cost of risk is reduced. However, the high-risk areas at flight altitudes of 90 and 120 m can still be clearly identified because there are still high-rise buildings at this altitude and the density of these buildings is related to the risk of death and accounts for 73.69%.\n\nAnalysis of path planning methods\n\nEffectiveness analysis of min-cost A* algorithm\n\nIn 4.2.1, this paper integrates obstacle risk, death risk and property loss risk into the A* algorithm, and proposes the Min-cost A* algorithm through two improvements to obtain a low-risk flight path. In the simulation, a “no-fly zone” is added to further verify the effectiveness of the algorithm. The starting point is (20, 20, 5) and the endpoint is (90, 90, 7), and the experimental results show that the improved algorithm compares with the original A* and the risk of the path is significantly reduced, and it can effectively avoid high-risk areas in the city, as shown in Fig. 15. Yellow indicates the flight path of the traditional A* algorithm and red indicates the flight path of the first optimization algorithm. The first optimization algorithm mainly integrates the third-party risk cost into the cost function and heuristic function of the traditional A* algorithm to generate a low-risk flight path (Eqs. 25, 26). Green indicates the flight path of the Min-cost A* algorithm (Eq. 30). It can be seen in the figure that the improved algorithm can effectively avoid \"no-fly zones\" and high-risk areas near (4, 10), greatly improving flight safety.\n\nThe Min-cost A* algorithm proposed in this paper (in Eq. 28), based on the first optimization algorithm, a distance function based on the Euclidean distance and the Manhattan distance is added to improve the search speed of the algorithm) has a much lower cumulative risk than the traditional A* algorithm, as shown in Figs. 16 and 17. The experimental results show that compared to the traditional A* algorithm, the algorithm after the first optimization reduces the path risk by 40.47%, the algorithm search time is increased by 63.6%, the path risk of the Min-cost A* algorithm is reduced by 44.44%, and the time is only increased by 27.2% compared with the original A* algorithm. Therefore, the Min-cost A* algorithm proposed in this paper can ensure the effective implementation of the algorithm while reducing the risk of a UAV flight path.\n\nTo comprehensively assess the relative performance of our algorithm in this paper, we add a comparison between the Min-cost A*algorithm and the Dijkstra algorithm, particle swarm optimization algorithm (PSO), and genetic algorithm, as shown in Fig. 18. Near the map coordinates (6, 6), the Dijkstra algorithm plans paths that cross the “no-fly zone,” and as we approach the endpoint, the genetic algorithm plans paths that cross some high-risk areas. Although the paths generated by the particle swarm optimization algorithm do not exhibit instances of crossing no-fly zones or high-risk areas, they do not make reasonable avoidance maneuvers for lower-risk areas near map coordinates (8, 8). In real-world scenarios, flight safety concerns in these areas still warrant attention. The path risks for different algorithms are presented in Table 5, and when compared to the Dijkstra algorithm, the particle swarm optimization algorithm, and the genetic algorithm, the Min-cost A* algorithm reduces path risks by 42.15%, 29.30%, and 45.31%, respectively. Additionally, it also produces the shortest paths, achieving a balance between flight path risk and path length.\n\nRisk path smoothing\n\nIn this paper, the UAV path is smoothed according to the smoothing strategy proposed in 4.3, and the simulation results are shown in Fig. 19. The experimental results show that under the premise of satisfying flight safety, the inflection point of the path is less than that before smoothing and the path is smoother.\n\nAlgorithm effectiveness verification\n\nUrban drones operate flexibly, so we set any flight start and end point for multiset experimental comparison, as shown in Figs. 20, 21, 22, 23. The experimental results show that compared to the traditional A* algorithm and the first optimization algorithm, the Min-cost A* algorithm can plan the flight path with the smallest risk, and the cumulative flight risk is much lower than that of the traditional A* algorithm, as shown in Table 6.\n\nIn order to further verify the safety of the algorithm path in this paper, we compare the flight path of the traditional A* algorithm and the Min-Cost traditional A* algorithm in different risk areas, and the example map is shown in Fig. 24. In areas with low urban risk Fig. 24a (such as green areas), the total risk gap between the A* algorithm and the Min-cost A* algorithm is small, because such areas themselves have fewer buildings and population distribution, and the airspace is spacious. When the drone is operated in a high-risk area of city Fig. 24b (such as a pedestrian street), the total risk of the Min-cost A* algorithm path is significantly lower than that of the traditional A* algorithm, as shown in Fig. 25. Through multiple sets of simulations as shown in Fig. 26, the Min-cost A* algorithm can plan the lowest-risk flight path on any map, and the total risk of the Min-cost A* algorithm path is significantly lower than that of the traditional A* algorithm, as shown in Fig. 27 and Table 7.\n\nOptimal convergence analysis of the Min-cost A* algorithm\n\nIn Section “Effectiveness analysis of Min-cost A* algorithm”, we compare the Min-cost A* algorithm with the traditional A* algorithm and the first optimization algorithm. The experimental results show that the Min-cost A* algorithm reduces path risk by 44.44% compared to the traditional A* algorithm. After the second optimization, the search time of the Min-cost A* algorithm decreases by 36.4% from the original time. Additionally, we conduct comparative experiments between Min-cost A* and the Dijkstra algorithm, Particle Swarm Optimization (PSO), and Genetic Algorithm (GA). The results show that compared to the Dijkstra algorithm, PSO, and GA, the Min-cost A* algorithm reduces path risk by 42.15%, 29.30%, and 45.31%, respectively.\n\nIn Section “Algorithm effectiveness verification”, we conduct comparisons by setting arbitrary starting and ending points and varying the map's risk levels. The experimental results indicate that regardless of changing the flight's starting and ending points, the Min-cost A* algorithm consistently plans low-risk flight paths. In maps with different risk levels, the Min-cost A* algorithm generates safer flight paths compared to the traditional A* algorithm, eliminating the algorithm’s randomness.\n\nIn conclusion, the Min-cost A* algorithm converges and is optimal because it plans the lowest-risk flight path, striking a balance between path risk evaluation and search time."
    }
}