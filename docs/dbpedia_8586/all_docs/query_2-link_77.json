{
    "id": "dbpedia_8586_2",
    "rank": 77,
    "data": {
        "url": "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/project-setup",
        "read_more_link": "",
        "language": "en",
        "title": "Get started with AEM Sites - Project Setup",
        "top_image": "",
        "meta_img": "",
        "images": [
            "about:error",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_15bdb5f77db5426bce4ceb4d528e0224a35a66c29.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_10c2a0c4a500f00feb27522fbc5cf218eac5ae64a.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_1db0c52bb9ac29f2386578641738a68655dbe9542.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_1981d21735ffef0eb21f82658a96bf4190b02398d.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_1f4736f54ef9d40fbe71db8c49d4c321987978e91.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/media_18f5d6495c9412ce2a3f2ac63a5b9eda189435130.png?width=750&format=png&optimize=medium"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Create a Maven Multi Module Project to manage the code and configurations for an Experience Manager Site.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://experienceleague.adobe.com/en/docs/experience-manager-learn/getting-started-wknd-tutorial-develop/project-archetype/project-setup",
        "text": "Project Setup project-setup\n\nLast update: Tue May 14 2024 00:00:00 GMT+0000 (Coordinated Universal Time)\n\nCREATED FOR:\n\nBeginner\n\nDeveloper\n\nThis tutorial covers the creation of a Maven Multi Module Project to manage the code and configurations for an Adobe Experience Manager Site.\n\nPrerequisites prerequisites\n\nReview the required tooling and instructions for setting up a local development environment. Ensure that you have a fresh instance of Adobe Experience Manager available locally and that no additional sample/demo packages have been installed (other than required Service Packs).\n\nObjective objective\n\nLearn how to generate a new AEM project using a Maven archetype.\n\nUnderstand the different modules generated by the AEM Project Archetype and how they work together.\n\nUnderstand how AEM Core Components are included in an AEM Project.\n\nWhat you are going to build what-build\n\nhttps://video.tv.adobe.com/v/30152?quality=12&learn=on\n\nTranscript\n\nHello. In this chapter you’ll generate a new Adobe Experience Manager project. This project will contain all of the code, content, and configurations for you AEM site’s implementation, and it’s designed to be installed on top of AEM. We’ll use a tool called the AEM project archetype to generate our project. The AEM project archetype is a maven archetype, and this can be thought of as a pattern or template for creating new projects. It’s open-source and can be found on KitHub. It represents Adobe’s recommended best practices for starting an AEM project.\n\nNow, before you begin, you will need to have a locally running instance of AEM running on port 4502. You will also need the following tools installed and configured to be available from the command line. You’ll need, at a minimum, Java 8, preferably Java 11. You will also need Apache Maven at a minimum of 3.39 for the version. -\n\nIn this chapter, you generate a new Adobe Experience Manager project using the AEM Project Archetype. Your AEM project contains complete code, content, and configurations used for a Sites implementation. The project generated in this chapter serves as the basis for an implementation of the WKND Site and are built upon in future chapters.\n\nWhat is a Maven project? - Apache Maven is a software management tool to build projects. All Adobe Experience Manager implementations use Maven projects to build, manage, and deploy custom code on top of AEM.\n\nWhat is a Maven archetype? - A Maven archetype is a template or pattern for generating new projects. The AEM Project archetype helps to generate a new project with a custom namespace and include a project structure that follows best practices, greatly accelerating the project development.\n\nCreate the project create\n\nThere are a couple options for creating a Maven Multi-module project for AEM. This tutorial uses the Maven AEM Project Archetype 35. Cloud Manager also provides a UI wizard to initiate the creation of an AEM application project. The underlying project generated by the Cloud Manager UI results in the same structure as using the archetype directly.\n\nNOTE\n\nThis tutorial uses version 35 of the archetype. It is always a best practice to use the latest version of the archetype to generate a new project.\n\nThe next series of steps will take place using a UNIX® based command-line terminal, but should be similar if using a Windows terminal.\n\nOpen up a command-line terminal. Verify that Maven is installed:\n\ncode language-shell\n\nNavigate to a directory in which you want to generate the AEM project. This can be any directory in which you want to maintain your project’s source code. For example, a directory named code beneath the user’s home directory:\n\ncode language-shell\n\n$ cd ~/code\n\nPaste the following into the command line to generate the project in batch mode:\n\ncode language-shell\n\nnote note NOTE To target AEM 6.5.14+ replace aemVersion=\"cloud\" with aemVersion=\"6.5.14\". Also, always use the latest archetypeVersion by referring to the AEM Project Archetype > Usage\n\nA full list of available properties for configuring a project can be found here.\n\nThe following folder and file structure is generated by the Maven archetype on your local file system:\n\ncode language-plain\n\n~/code/ |--- aem-guides-wknd/ |--- all/ |--- core/ |--- ui.apps/ |--- ui.apps.structure/ |--- ui.config/ |--- ui.content/ |--- ui.frontend/ |--- ui.tests / |--- it.tests/ |--- dispatcher/ |--- pom.xml |--- README.md |--- .gitignore\n\nDeploy and build the project build\n\nBuild and deploy the project code to a local instance of AEM.\n\nEnsure you have an author instance of AEM running locally on port 4502.\n\nFrom the command line, navigate into the aem-guides-wknd project directory.\n\ncode language-shell\n\n$ cd aem-guides-wknd\n\nRun the following command to build and deploy the entire project to AEM:\n\ncode language-shell\n\n$ mvn clean install -PautoInstallSinglePackage\n\nThe build takes around a minute and should end with the following message:\n\ncode language-none\n\nThe Maven profile autoInstallSinglePackage compiles the individual modules of the project and deploys a single package to the AEM instance. By default this package is deployed to an AEM instance running locally on port 4502 and with the credentials of admin:admin.\n\nNavigate to Package Manager on your local AEM instance: http://localhost:4502/crx/packmgr/index.jsp. You should see packages for aem-guides-wknd.ui.apps, aem-guides-wknd.ui.config, aem-guides-wknd.ui.content, and aem-guides-wknd.all.\n\nNavigate to the Sites console: http://localhost:4502/sites.html/content. The WKND Site is one of the sites. It includes a site structure with a US and Language Masters hierarchy. This site hierarchy is based on the values for language_country and isSingleCountryWebsite when generating the project using the archetype.\n\nOpen the US > English page by selecting the page and clicking the Edit button in the menu bar:\n\nStarter content has already been created and several components are available to be added to a page. Experiment with these components to get an idea of the functionality. You will learn the basics of a component in the next chapter.\n\nSample content generated by the Archetype\n\nInspect the project project-structure\n\nThe generated AEM project is made up of individual Maven modules, each with a different role. This tutorial and most development focus on these modules:\n\ncore - Java Code, primarily back-end developers.\n\nui.frontend - Contains source code for CSS, JavaScript, Sass, TypeScript, primarily for front-end developers.\n\nui.apps - Contains component and dialog definitions, embeds compiled CSS and JavaScript as client libraries.\n\nui.content - contains structural content and configurations like editable templates, metadata schemas (https://experienceleague.adobe.com/content,%20/conf?lang=en).\n\nall - this is an empty Maven module that combines the above modules into a single package that can be deployed to an AEM environment.\n\nSee the AEM Project Archetype documentation to learn more details of all the Maven modules.\n\nInclusion of Core Components core-components\n\nAEM Core Components are a set of standardized Web Content Management (WCM) components for AEM. These components provide a baseline set of a functionality and are styled, customized, and extended for individual projects.\n\nAEM as a Cloud Service environment include the latest version of AEM Core Components. Therefore projects generated for AEM as a Cloud Service do not include an embed of AEM Core Components.\n\nFor AEM 6.5/6.4 generated projects, the archetype automatically embeds AEM Core Components in the project. It is a best practice for AEM 6.5/6.4 to embed AEM Core Components to ensure that the latest version gets deployed with your project. More information about how Core Components are included in the project can be found here.\n\nSource Control Management source-control\n\nIt is always a good idea to use some form of source control to manage the code in your application. This tutorial uses git and GitHub. There are several files that get generated by Maven and/or the IDE of choice that should be ignored by the SCM.\n\nMaven creates a target folder whenever you build and install the code package. The target folder and contents should be excluded from SCM.\n\nUnder, the ui.apps module observe that many .content.xml files are created. These XML files map the node types and properties of content installed in the JCR. These files are critical and cannot be ignored.\n\nThe AEM project archetype generates a sample .gitignore file that can be used as a starting point for which files can be safely ignored. The file is generated at <src>/aem-guides-wknd/.gitignore.\n\nCongratulations! congratulations\n\nCongratulations, you have created your first AEM Project!\n\nNext Steps next-steps\n\nUnderstand the underlying technology of an Adobe Experience Manager (AEM) Sites Component through a simple HelloWorld example with the Component Basics tutorial.\n\nAdvanced Maven commands (Bonus) advanced-maven-commands\n\nDuring development, you may be working with just one of the modules and want to avoid building the entire project in order to save time. You may also want to deploy directly to an AEM Publish instance or perhaps to an instance of AEM not running on port 4502.\n\nNext let’s review some additional Maven profiles and commands you can use for greater flexibility during development.\n\nCore module core-module\n\nThe core module contains all Java™ code associated with the project. The build of core module deploys an OSGi bundle to AEM. To build just this module:\n\nNavigate into the core folder (beneath aem-guides-wknd):\n\ncode language-shell\n\n$ cd core/\n\nRun the following command:\n\ncode language-shell\n\nNavigate to http://localhost:4502/system/console/bundles. This is the OSGi Web console and contains information about all the bundles installed on the AEM instance.\n\nToggle the Id sort column and you should see the WKND bundle installed and active.\n\nYou can see the ‘physical’ location of the jar in CRXDE-Lite:\n\nUi.apps and Ui.content modules apps-content-module\n\nThe ui.apps maven module contains all the rendering code needed for the site beneath /apps. This includes CSS/JS that is stored in an AEM format called clientlibs. This also includes HTL scripts for rendering dynamic HTML. You can think of the ui.apps module as a map to the structure in the JCR but in a format that can be stored on a file system and committed to source control. The ui.apps module only contains code.\n\nTo build just this module:\n\nFrom the command line. Navigate into the ui.apps folder (beneath aem-guides-wknd):\n\ncode language-shell\n\n$ cd ../ui.apps\n\nRun the following command:\n\ncode language-shell\n\nNavigate to http://localhost:4502/crx/packmgr/index.jsp. You should see the ui.apps package as the first installed package and it should have a more recent timestamp than any of the other packages.\n\nReturn to the command line and run the following command (within the ui.apps folder):\n\ncode language-shell\n\nThe profile autoInstallPackagePublish is intended to deploy the package to a Publish environment running on port 4503. The above error is expected if an AEM instance running on http://localhost:4503 cannot be found.\n\nFinally run the following command to deploy the ui.apps package on port 4504:\n\ncode language-shell\n\nAgain a build failure is expected to occur if no AEM instance running on port 4504 is available. The parameter aem.port is defined in the POM file at aem-guides-wknd/pom.xml.\n\nThe ui.content module is structured the same way as the ui.apps module. The only difference is that the ui.content module contains what is known as mutable content. Mutable content essentially refers to non-code configurations like Templates, Policies, or folder structures that is stored in source-control but could be modified on an AEM instance directly. This is explored in more detail in the chapter on Pages and Templates.\n\nThe same Maven commands used to build the ui.apps module can be used to build the ui.content module. Feel free to repeat the above steps from within the ui.content folder.\n\nTroubleshooting\n\nIf there is issue generating the project using the AEM Project Archetype see the list of known issues and list of open issues.\n\nCongratulations again! congratulations-bonus\n\nCongratulations, on going through the bonus material.\n\nNext Steps next-steps-bonus\n\nUnderstand the underlying technology of an Adobe Experience Manager (AEM) Sites Component through a simple HelloWorld example with the Component Basics tutorial.\n\nrecommendation-more-help"
    }
}