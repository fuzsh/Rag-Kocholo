{
    "id": "dbpedia_8586_2",
    "rank": 23,
    "data": {
        "url": "https://dart.dev/tools/pub/automated-publishing",
        "read_more_link": "",
        "language": "en",
        "title": "Automated publishing of packages to pub.dev",
        "top_image": "https://dart.dev/assets/img/logo/dart-logo-for-shares.png?2",
        "meta_img": "https://dart.dev/assets/img/logo/dart-logo-for-shares.png?2",
        "images": [
            "https://dart.dev/assets/img/logo/logo-white-text.svg",
            "https://dart.dev/assets/img/tools/pub/pub-dev-gh-setup.png",
            "https://dart.dev/assets/img/tools/pub/audit-log-pub-gh.png",
            "https://dart.dev/assets/img/tools/pub/pub-dev-gh-env-setup.png",
            "https://dart.dev/assets/img/tools/pub/gh-pending-review.png",
            "https://dart.dev/assets/img/tools/pub/pub-dev-gcb-config.png",
            "https://dart.dev/assets/img/tools/pub/gcb-trigger-configuration.png",
            "https://dart.dev/assets/img/tools/pub/gcb-approval-checkbox.png",
            "https://dart.dev/assets/img/tools/pub/gcp-waiting-for-approval.png",
            "https://dart.dev/assets/img/logo/logo-white-text.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Publish Dart packages to pub.dev directly from GitHub Actions.",
        "meta_lang": "en",
        "meta_favicon": "/assets/img/logo/dart-64.png",
        "meta_site_name": "",
        "canonical_link": "https://dart.dev/tools/pub/automated-publishing/",
        "text": "You can automate publishing from:\n\nGitHub Actions,\n\nGoogle Cloud Build or,\n\nAnywhere else using a GCP service account.\n\nThe following sections explain how automated publishing is configured, and how you can customize publishing flows in line with your preferences.\n\nWhen configuring automated publishing you don't need to create a long-lived secret that is copied into your automated deployment environment. Instead, authentication relies on temporary OpenID-Connect tokens signed by either GitHub Actions (See OIDC for GitHub Actions) or Google Cloud IAM.\n\nYou can use exported service account keys for deployment environments where an identity service isn't present. Such exported service account keys are long-lived secrets, they might be easier to use in some environments, but also pose a larger risk if accidentally leaked.\n\nPublishing packages using GitHub Actions\n\n#\n\nYou can configure automated publishing using GitHub Actions. This involves:\n\nEnabling automated publishing on pub.dev, specifying:\n\nThe GitHub repository and,\n\nA tag-pattern that must match to allow publishing.\n\nCreating a GitHub Actions workflow for publishing to pub.dev.\n\nPushing a git tag for the version to be published.\n\nThe following sections outline how to complete these steps.\n\nConfiguring automated publishing from GitHub Actions on pub.dev\n\n#\n\nTo enable automated publication from GitHub Actions to pub.dev, you must be:\n\nAn uploader on the package, or,\n\nAn admin of the publisher (if the package is owned by a publisher).\n\nIf you have sufficient permission, you can enable automated publishing by:\n\nNavigating to the Admin tab (pub.dev/packages/<package>/admin).\n\nFind the Automated publishing section.\n\nClick Enable publishing from GitHub Actions, this prompts you to specify:\n\nA repository (<organization>/<repository>, example: dart-lang/pana),\n\nA tag-pattern (a string containing {{version}}).\n\nThe repository is the <organization>/<repository> on GitHub. For example, if your repository is https://github.com/dart-lang/pana you must specify dart-lang/pana in the repository field.\n\nThe tag pattern is a string that must contain {{version}}. Only GitHub Actions triggered by a push of a tag that matches this tag pattern will be allowed to publish your package.\n\nExample: a tag pattern like v{{version}} allows GitHub Actions (triggered by git tag v1.2.3 && git push v1.2.3) to publish version 1.2.3 of your package. Thus, it's also important that the version key in pubspec.yaml matches this version number.\n\nIf your repository contains multiple packages, give each a separate tag-pattern. Consider using a tag-pattern like my_package_name-v{{version}} for a package named my_package_name.\n\nConfiguring a GitHub Action workflow for publishing to pub.dev\n\n#\n\nWhen automated publishing from GitHub Actions is enabled on pub.dev, you can create a GitHub Actions workflow for publishing. This is done by creating a .github/workflows/publish.yml file as follows:\n\nMake sure to match the pattern in on.push.tags with the tag pattern specified on pub.dev. Otherwise, the GitHub Action workflow won't work. If publishing multiple packages from the same repository, use a per-package tag pattern like my_package_name-v{{version}} and create a separate workflow file for each package.\n\nThe workflow file above uses dart-lang/setup-dart/.github/workflows/publish.yml to publish the package. This is a reusable workflow that allows the Dart team to maintain the publishing logic and enables pub.dev to know how the package was published. Using this reusable workflow is strongly encouraged.\n\nIf you need generated code in your package, then it is preferable to check this generated code into your repository. This simplifies verifying that the files published on pub.dev match the files from your repository. If checking generated or built artifact into your repository is not reasonable, you can create a custom workflow along the lines of:\n\nThe workflow authenticates to pub.dev using a temporary GitHub-signed OIDC token, the token is created and configured in the dart-lang/setup-dart step. To publish to pub.dev, subsequent steps can run dart pub publish --force.\n\nTriggering automated publishing from GitHub Actions\n\n#\n\nAfter you've configured automated publishing on pub.dev and created a GitHub Actions workflow, you can publish a new version of your package. To publish, push a git tag matching the configured tag pattern.\n\nOnce pushed, review the workflow logs at https://github.com/<organization>/<repository>/actions.\n\nIf the Action didn't trigger, check that the pattern configured in .github/workflows/publish.yml matches the pushed git tag. If the Action failed, the logs might contain clues as to why it failed.\n\nOnce published, you can see the publication event in the audit-log on pub.dev. The audit-log entry should contain a link to the GitHub Action run that published the package version.\n\nIf you don't like using the git CLI to create tags, you can create releases on GitHub from https://github.com/<organization>/<repository>/releases/new. To learn more, check out managing releases in a repository from GitHub.\n\nHardening security with tag protection rules on GitHub\n\n#\n\nConfiguring automated publishing from GitHub Actions allows anyone who can push a tag to your repository to trigger publishing to pub.dev. You can restrict who can push tags to your repository using tag protection rules on GitHub.\n\nBy limiting who can create tags matching your tag pattern, you can limit who can publish the package.\n\nAt this time, the tag protection rules lack flexibility. You might want to restrict who can trigger publishing using GitHub Deployment Environments, as outlined in the next section.\n\nHardening security with GitHub Deployment Environments\n\n#\n\nWhen configuring automated publishing from GitHub Actions on pub.dev, you can require a GitHub Actions environment. To require a GitHub Actions environment for publishing you must:\n\nNavigate to the Admin tab (pub.dev/packages/<package>/admin).\n\nFind the Automated publishing section.\n\nClick Require GitHub Actions environment.\n\nSpecify an Environment name, (pub.dev is typically a good name)\n\nWhen an environment is required on pub.dev, GitHub Actions won't be able to publish unless they have environment: pub.dev. Thus, you must:\n\nCreate an environment with the same name on GitHub (typically pub.dev)\n\nAlter your .github/workflows/publish.yml workflow file to specify environment: pub.dev, as follows:\n\nThe environment is reflected in the temporary GitHub-signed OIDC token used for authentication with pub.dev. Thus, a user with permission to push to your repository cannot circumvent environment protection rules by modifying the workflow file.\n\nIn GitHub repository settings, you can use environment protection rules to configure required reviewers. If you configure this option, GitHub prevents actions with the environment from running until one of the required reviewers have approved the run.\n\nPublishing from Google Cloud Build\n\n#\n\nYou can configure automated publishing from Google Cloud Build. This involves:\n\nRegister a Google Cloud Project (or using an existing project),\n\nCreate a service account for publishing to pub.dev,\n\nEnable automated publishing in the admin tab for the package on pub.dev, specifying the email of the service account created for publishing.\n\nGrant the default Cloud Build service account permission to impersonate the service account created for publishing.\n\nCreate a cloudbuild.yaml file that obtains a temporary OIDC id_token and uses it for publishing to pub.dev\n\nConfigure a Cloud Build trigger, for running the steps in cloudbuild.yaml in your project on Google Cloud Build.\n\nThe following sections outline how to complete these steps.\n\nCreating a service account for publishing\n\n#\n\nFor publishing to pub.dev you are going to create a service account that is granted permission to publish your package on pub.dev. You are then going to grant Cloud Build permission to impersonate this service account.\n\nCreate a cloud project, if you don't have an existing project.\n\nCreate a service account as follows:\n\n$ gcloud iam service-accounts create pub-dev \\ --description='Service account to be impersonated when publishing to pub.dev' \\ --display-name='pub-dev'\n\nThis creates a service account named pub-dev@$PROJECT_ID.iam.gserviceaccount.com.\n\nGrant the service account permission to publish your package.\n\nTo complete this step, you must have uploader permission on the package or be an admin of the publisher that owns the package.\n\na. Navigate to the Admin tab (pub.dev/packages/<package>/admin). a. Click Enable publishing with Google Cloud Service account. a. Type the email of the service account into the Service account email field. You created this account in the previous step: pub-dev@$PROJECT_ID.iam.gserviceaccount.com\n\nWith this procedure complete, anyone who can impersonate the service account can publish new versions of the package. Make sure to review who has permissions to impersonate the service account and change permissions in the cloud project as needed.\n\nGranting Cloud Build permission to publish\n\n#\n\nTo publish from Cloud Build you must give the default Cloud Build service account permission to impersonate the service account created for publishing in the previous section.\n\nEnable the IAM Service Account Credentials API in the cloud project. Attempts to impersonate a service account will fail without this API.\n\n# Enable IAM Service Account Credentials API $ gcloud services enable iamcredentials.googleapis.com\n\nFind the project number.\n\n# The PROJECT_NUMBER can be obtained as follows: $ gcloud projects describe $PROJECT_ID --format='value(projectNumber)'\n\nGrant the permission to impersonate the publishing service account.\n\n# Grant default cloud $ gcloud iam service-accounts add-iam-policy-binding \\ pub-dev@$PROJECT_ID.iam.gserviceaccount.com \\ --member=serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com \\ --role=roles/iam.serviceAccountTokenCreator\n\nWriting a Cloud Build configuration file\n\n#\n\nTo publish from Cloud Build, you must specify steps for Cloud Build to:\n\nImpersonate the service account to obtain a temporary OIDC token.\n\nProvide the temporary OIDC token to dart pub for use when publishing.\n\nCalling dart pub publish to publish the package.\n\nSteps for Google Cloud Build are provided in a cloudbuild.yaml file, see build configuration file schema for full documentation of the format.\n\nFor publishing to pub.dev from Google Cloud Build, a cloudbuild.yaml file as follows will do:\n\nThe gcloud auth print-identity-token creates an OIDC id_token impersonating the specified service account. This id_token is signed by Google, with a signature that expires within 1 hour. The audiences parameter lets pub.dev know that it is the intended recipient of the token. The --include-email option is necessary for pub.dev to recognize the service account.\n\nOnce the id_token is created, it's written to a file that resides in a volume; this mechanism is used to pass data between steps. Don't store the token in /workspace. Since /workspace is where the repository from which you wish to publish is checked out. Not using /workspace for storing the token reduces the risk that you accidentally include it in your package when publishing.\n\nCreating a Cloud Build trigger\n\n#\n\nWith service accounts configured and a cloudbuild.yaml file in the repository you can create a Cloud Build Trigger using the console.cloud.google.com dashboard. To create a build trigger, you need to connect to a source repository and specify which events should trigger a build. You can use GitHub, Cloud Source Repository, or one of the other options. To learn how to configure a Cloud Build Trigger, check out creating and managing build triggers.\n\nTo use the cloudbuild.yaml from the previous step, configure the Cloud Build Trigger type as \"Cloud Build Configuration\" located in the repository in the /cloudbuild.yaml file. Do not specify a service account for the build to be triggered with. Instead you'll want to use the default service account for Cloud Build.\n\nWhen configuring your Cloud Build trigger, consider who can trigger the build. Because triggering a build might publish a new version of your package. Consider only allowing manual builds or use Cloud Build approvals to gate builds as outlined in next section.\n\nHardening security with Cloud Build Approvals\n\n#\n\nWhen configuring a Cloud Build trigger, you can select require approval before build executes. If a Cloud Build trigger requires approval, it won't run when triggered. Instead, it'll wait for approval. This can be used to limit who can publish new versions of your package.\n\nOnly a user with the Cloud Build Approver role can give approval. When giving a approval, the approver can specify a URL and comment.\n\nYou can also configure notifications for pending approvals. To learn more, check out gate build on approval.\n\nPublish from anywhere using a Service Account\n\n#\n\nTo allow automated publishing outside of GitHub Actions, you might authenticate using service accounts in way similar to Cloud Build.\n\nThis usually involves:\n\nCreate a service account for publishing,\n\nImpersonate the publishing service account in one of two ways:\n\nWorkload Identity Federation\n\nExported Service Account Keys\n\nThe section for Cloud Build outlined how to create a service account for publishing. This should provide a service account, such as pub-dev@$PROJECT_ID.iam.gserviceaccount.com.\n\nPublish using Workload Identity Federation\n\n#\n\nWhen running on a cloud service that supports OIDC or SAML, you can impersonate a GCP service account using Workload Identity Federation. This enables you to leverage your cloud provider's identity services.\n\nFor example, if deploying on EC2, you can configure workload identity federation with AWS, allowing temporary AWS tokens from the EC2 metadata service to impersonate a service account. To learn how to configure these flows, check out workload identity federation.\n\nPublish using Exported Service Account Keys\n\n#\n\nWhen running on a custom system without identity services, you can export service account keys. Exported service account keys allows you to authenticate as said service account. To learn more, check out how to create and manage service account keys.\n\nExport service account keys\n\n#\n\nCreate exported service account keys for an existing service account.\n\n$ gcloud iam service-accounts keys create key-file.json \\ --iam-account=pub-dev@$PROJECT_ID.iam.gserviceaccount.com\n\nSave the key-file.json file for later use.\n\nPublish packages using exported service account keys\n\n#\n\nTo publish a package using exported service account keys:"
    }
}