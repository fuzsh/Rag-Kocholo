{
    "id": "dbpedia_8586_1",
    "rank": 8,
    "data": {
        "url": "https://github.com/unixorn/awesome-zsh-plugins",
        "read_more_link": "",
        "language": "en",
        "title": "plugins: A collection of ZSH frameworks, plugins, themes and tutorials.",
        "top_image": "https://opengraph.githubassets.com/4df65cb6abb59b2bef5fa30e77e600342a4fdc2ff614f96943161fe2246ba722/unixorn/awesome-zsh-plugins",
        "meta_img": "https://opengraph.githubassets.com/4df65cb6abb59b2bef5fa30e77e600342a4fdc2ff614f96943161fe2246ba722/unixorn/awesome-zsh-plugins",
        "images": [
            "https://camo.githubusercontent.com/715ee701c8a9a0dbe30aac69ed79f5712a6542f5a482a3940084ce76d494a779/68747470733a2f2f617765736f6d652e72652f62616467652e737667",
            "https://camo.githubusercontent.com/ae2a807fef9fe113dbae8e469b74a8d0187e735e38562d64d301c8f1c90cdaad/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667",
            "https://github.com/unixorn/awesome-zsh-plugins/actions/workflows/awesomebot.yml/badge.svg",
            "https://camo.githubusercontent.com/8ad1cf3d793289d082eee808945bdf053c7843156acebbd922ee58a6a86830e1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667",
            "https://camo.githubusercontent.com/0d4c991f682ca349520cd65b9a9dfd46aaccc4742b846722d0e6d8a5b073567b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732e737667",
            "https://camo.githubusercontent.com/a654ed96feb94f1675e5c1d96714b4bce053236b8426757cc2dee771192c0c0e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f756e69786f726e2f617765736f6d652d7a73682d706c7567696e732f6d61696e2e737667",
            "https://camo.githubusercontent.com/cb496e86ab9ddd80bb736744886fa7ffed5368ef28f2ea08813a9cbc4b420c31/68747470733a2f2f7777772e747261636b617765736f6d656c6973742e636f6d2f62616467652e737667",
            "https://camo.githubusercontent.com/c02a556f90d7f4acf16ec55884f3d3dd41a35180440adbc5a6a53ca7fbf0e048/68747470733a2f2f636f6e7472696275746f72732d696d672e7765622e6170702f696d6167653f7265706f3d756e69786f726e2f617765736f6d652d7a73682d706c7567696e73",
            "https://github.githubassets.com/assets/patreon-96b15b9db4b9.svg",
            "https://github.githubassets.com/assets/ko_fi-53a60c17e75c.svg",
            "https://avatars.githubusercontent.com/u/23920?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6049288?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2299535?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6439644?s=64&v=4",
            "https://avatars.githubusercontent.com/u/7599319?s=64&v=4",
            "https://avatars.githubusercontent.com/u/853977?s=64&v=4",
            "https://avatars.githubusercontent.com/u/18195247?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4205?s=64&v=4",
            "https://avatars.githubusercontent.com/u/20190?s=64&v=4",
            "https://avatars.githubusercontent.com/u/18155001?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4922506?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4980269?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5672001?s=64&v=4",
            "https://avatars.githubusercontent.com/u/24364012?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A collection of ZSH frameworks, plugins, themes and tutorials. - unixorn/awesome-zsh-plugins",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/unixorn/awesome-zsh-plugins",
        "text": "A collection of ZSH frameworks, plugins, tutorials & themes inspired by the various awesome list collections out there.\n\nTable of Contents\n\nDisclaimer\n\nFrameworks\n\nalf\n\nansible-role-zsh\n\nant-zsh\n\nantibody\n\nantidote\n\nantigen-hs\n\nantigen\n\nax-zsh\n\ndeer\n\ndotzsh\n\nfresh\n\nminiplug\n\noh-my-zsh\n\nPMS\n\nprezto\n\npumice\n\nsheldon\n\nshplug\n\nToasty\n\nuz\n\nx-cmd\n\nyazt\n\nyzsh\n\nzap\n\nzapack\n\nzcomet\n\nzeesh\n\nzgem\n\nzgen\n\nzgenom\n\nzilsh\n\nzim\n\nZinit\n\nzinit-4\n\nzit\n\nzlugin\n\nznap\n\nzoppo\n\nzpacker\n\nzpico\n\nzplug\n\nzpm\n\nzr\n\nzsh.ai\n\nzshing\n\nzsh-dot-plugin\n\nzsh-mgr\n\nzshPlug\n\nztanesh\n\nztheme\n\nztupide\n\nzulu\n\nSetups\n\nzgenom\n\nzinit\n\nPrerequisites\n\nTutorials\n\nGeneric ZSH\n\nAntigen\n\nOh-My-Zsh\n\nPrezto\n\nZgen\n\nZinit (n√© zplugin)\n\nZSH on Windows\n\nsuperconsole - Windows-only\n\nPlugins\n\nCompletions\n\nThemes\n\nFonts\n\nInstallation\n\nAntigen\n\ndotzsh\n\nOh-My-Zsh\n\nPrezto\n\nZgen\n\nZgenom\n\nzplug\n\nzpm\n\nWriting New Plugins and Themes\n\nOther Resources\n\nZSH Tools\n\nOther Useful Lists\n\nOther References\n\nThanks\n\nPlease read the Contributing Guidelines before contributing.\n\nWhile I have done my best to not add entries with embedded malicious code, I don't have the time to sift through the source of every entry in the list.\n\nTHIS LIST IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThese frameworks make customizing your ZSH setup easier.\n\nYou can find some interesting performance timing comparisons of various frameworks in the following locations.\n\nrossmacarthur/zsh-plugin-manager-benchmark - Contains performance benchmarks for the most popular ZSH frameworks, including both install time and load time.\n\npm-perf-test - Tooling for running performance tests on multiple ZSH frameworks.\n\nAlf is an out of this world super fast and configurable framework for ZSH; it's modeled after Prezto and Antigen while utilizing Oh-My-Zsh under the covers; and offers standard defaults, aliases, functions, auto completion, automated updates and installable prompt themes and plugins.\n\nansible-role-zsh is an ansible role with zero-knowledge installation. It uses antigen to manage bundles and oh-my-zsh. Can load bundles conditionally. By default it includes the powerlevel9k theme, autosuggestions, syntax-highlighting and fzf-widgets and fzf-marks. Fully customizable.\n\nAnt-zsh is a tiny and lightweight ZSH configuration environment for special customization needs. It includes plugins, themes and a basic convenient setup.\n\nAntibody is a faster and simpler antigen written in Golang. More details are available at http://getantibody.github.io/.\n\nAntidote is a ZSH plugin manager made from the ground up thinking about performance.\n\nIt is fast because it can do things concurrently, and generates an ultra-fast static plugin file that you can include in your ZSH config.\n\nIt is written natively in ZSH, is well tested, and picks up where Antibody left off.\n\nuse-omz enables easy use of Oh-My-ZSH with antidote.\n\nantigen-hs is a replacement for antigen optimized for a low overhead when starting up a zsh session. It will automatically clone plugins for you.\n\nAntigen is a small set of functions that help you easily manage your shell (ZSH) plugins, called bundles. The concept is pretty much the same as bundles in a typical vim+pathogen setup. Antigen is to ZSH, what Vundle is to vim. Antigen can load oh-my-zsh themes and plugins and will automatically clone them for you.\n\nAx-ZSH is a modular configuration system for ZSH. It provides sane defaults and is extendable by plugins.\n\nAx-ZSH integrates well with Powerlevel10k and other extensions, including plugins compatible with oh-my-zsh.\n\nA minimalist ZSH plugin manager.\n\nDotzsh strives to be platform and version independent. Some functionality may be lost when running under older versions of ZSH, but it should degrade cleanly and allow you to use the same setup on multiple machines of differing OSes without problems.\n\nfresh is a tool to source shell configuration (aliases, functions, etc) from others into your own configuration files. We also support files such as ackrc and gitconfig. Think of it as Bundler for your dot files.\n\nminiplug is a minimalistic plugin manager for ZSH.\n\nNo crashes or double plugin loading when re-sourcing .zshrc\n\nUnlike other frameworks, Miniplug does not pollute your $PATH\n\nOnly does the bare minimum for managing plugins\n\noh-my-zsh is a community-driven framework for managing your ZSH configuration. Includes 120+ optional plugins (rails, git, macOS, hub, capistrano, brew, ant, MacPorts, etc), over 120 themes to spice up your morning, and an auto-update tool that makes it easy to keep up with the latest updates from the community.\n\nPMS allows you to manage your shell in a way to that helps decrease setup time and increases your productivity. It has support for themes (change the way your shell looks), plugins (adds functionality to your shell), and dotfile management.\n\nThe PMS framework also allows you to use the same framework in different shells. Use ZSH on your personal laptop, and use bash on remote servers. Wanna try fish? Go ahead, try out different shells.\n\nPrezto enriches the ZSH command line interface environment with sane defaults, aliases, functions, auto completion, and prompt themes. There are some prezto-specific plugins at https://github.com/belak/prezto-contrib.\n\nPumice is a lightweight plugin manager for ZSH.\n\nA fast, configurable, shell plugin manager.\n\nCan manage\n\nAny git repository.\n\nBranch/tag/commit support.\n\nExtra support for GitHub repositories.\n\nExtra support for Gists.\n\nArbitrary remote files, simply specify the URL.\n\nLocal plugins, simply specify the directory path.\n\nHighly configurable install methods using handlebars templating.\n\nSuper-fast parallel installation.\n\nConfiguration file using TOML syntax.\n\nUses a lock file for much faster loading of plugins.\n\nAn easy solution for managing your shell environments. Works with both bash and zsh. Makes it easy to sync your environment across multiple machines with a git repository.\n\nToasty is a ZSH framework made to facilitate management, not dictate it.\n\nA ZSH micro plugin manager.\n\nx-cmd is a toolset implemented using posix shell and awk.It is very small in size and offers many interesting features. Here is a milestone demo: https://x-cmd.com/\n\nTools Provided by x-cmd:\n\nWrappers for Common Commands (e.g., cd, ip, ps, tar, apt, brew): These wrapped commands are more intelligent and easier to use compared to the native commands.\n\nLightweight Package Management Tool: We have implemented a lightweight package management tool using shell and awk. Through it, you can quickly obtain most common software tools, such as jq, 7za, bat, nvim, python, node, go, etc.\n\nCLI for Useful Websites (e.g., github.com, cht.sh): We have wrapped their APIs using shell and awk for daily use and to obtain corresponding services in scripts.\n\nAI Tools: We provide CLIs for ChatGPT, Gemini, Jina.ai, etc., and have wrapped corresponding shortcut commands for different application scenarios, such as @gemini for chatting with Gemini AI and @zh for using AI to translate specified content or command results.\n\nYazt is a simple ZSH theme manager in maintenance that is compatible with nearly everything. You can use prompts in plugins, mix 'n' match two themes and with a few modifications, you can even use it in bash.\n\nyzsh is a simple ZSH framework for managing plugins, themes, functions, aliases and environment variables.\n\nzap is a minimal ZSH plugin manager.\n\nzapack is a basic fast minimal ZSH plugin loader.\n\nzcomet is a minimalistic ZSH plugin manager that gets you to the prompt surprisingly quickly without caching (see the benchmarks). In addition to loading and updating plugins stored in git repositories, it supports lazy-loading plugins (further reducing startup time) as well as downloading and sourcing code snippets.\n\nZeesh is a cross-platform ZSH framework. It's similar to, but incompatible with, oh-my-zsh. It has a modular plugin architecture making it easy to extend. It has a rich set of defaults, but is designed to be as lightweight as possible.\n\nzgem is a plugin manager for ZSH that supports loading and updating plugins and themes from git, http and local files.\n\nZgen is a lightweight plugin manager for ZSH inspired by Antigen. The goal is to have minimal overhead when starting up the shell because nobody likes waiting.\n\nIt is currently not being actively maintained and I recommend you use the zgenom fork instead, which is actively maintained and continues to get new features.\n\nA lightweight plugin manager for ZSH that is a fork that extends the brilliant zgen and provides more features and bugfixes while being fully backwards compatible.\n\nTo keep loading fast during new terminal sessions, zgenom generates a static init.zsh file which does nothing but source your plugins and append them to your fpath.\n\nThis minimizes startup time by not having to execute time consuming logic (plugin checking, updates, etc) during every shell session's startup. The downside is that you have to refresh the init script manually with zgenom reset whenever you update your plugin list in your .zshrc.\n\nZgenom can load oh-my-zsh-compatible and prezto-compatible plugins and themes, and will automagically git clone plugins for you when you add them to your plugin list.\n\nzilsh is a ZSH config system that aims to appeal more to power-users and follow the simplistic approach of vim-pathogen.\n\nZim is a ZSH configuration framework with blazing speed and modular extensions.\n\nZinit is an innovative and probably (because of the Turbo) the fastest plugin manager with support for:\n\nTurbo mode ‚Äì 80% faster ZSH startup! for example: instead of 200 ms, it'll be 40 ms\n\nCompletion management (selectively disable and enable completions)\n\nSnippets (‚Üî regular files downloaded via-URL, e.g.: scripts) and through them Oh My Zsh and Prezto plugins support (‚Üí low overhead)\n\nAnnexes (‚Üî Zinit extensions)\n\nReports (from the plugin loads ‚Äì plugins are no longer black boxes)\n\nPlugin unloading (allows e.g.: dynamic theme switching)\n\nbindkey capturing and remapping\n\npackages\n\nClean fpath (the array $fpath is not being used to add completions and autoload functions, hence it stays concise, not bloated)\n\nServices ‚Üî a single-instance, background plugins\n\nAlso, in general: all the mechanisms from the ZSH Plugin Standard ‚Äì Zinit is a reference implementation of the standard.\n\nThe project is very active ‚Äì currently > 3100 commits.\n\nThis is Zinit 4 from the original author, who once removed the Zinit repository from GitHub. This spawned a community-driven zdharma-continuum organization that revived all of psprint's ZSH projects. Its main innovations from the @zdharma-continuum fork are:\n\nAppImage distribution (release link),\n\nAction complete ‚Äì press Alt-Shift-A and Alt-Shift-C to complete plugin names and ice modifiers,\n\nThemes ‚Äì set $ZITHEME to one of default, blue and gold to set a color set to use for Zinit 4 messages,\n\nNew ice build which is equivalent of three other ices: null, configure and make install and simply builds the project from sources, with support for autotools/CMake/Meson/Scons.\n\nThese are the most visible changes, but there are more (like e.g.: support for compiling with libraries from previously built projects/$ZPFX).\n\nzit is a plugin manager for ZSH. It is minimal because it implements the bare minimum to be qualified as a plugin manager: it allows the user to install plugins from git repositories (and git repositories only, that's why the name), source plugins and update them. It does not implement fancy functions like cleanup of removed plugins, automatic compilation of installed plugins, alias for oh-my-zsh/prezto/other ZSH frameworks, building binaries, $PATH manipulation and others.\n\nzlugin is a very lightweight ZSH plugin manager.\n\n‚ö°Znap is a light-weight plugin manager & git repository manager for ZSH that's easy to grok. While tailored for ZSH plugins specifically, Znap also functions as a general-purpose utility for managing git repositories.\n\nZnap can:\n\nMake any prompt appear instantly. Reduce your startup time from ~200ms to ~40ms with just one command.\n\nAsynchronously compile your plugins and functions.\n\nCache those expensive eval $(commands).\n\nClone or pull multiple repos in parallel.\n\nRe-clone all your repos without you having to re-enter them.\n\nMulti-repo management\n\nAutomatic compinit and bashinit - you no longer need them in your .zshrc, znap will do them automatically as needed.\n\nZoppo is the crippled configuration framework for ZSH. As an Italian saying goes: \"chi va con lo zoppo, impara a zoppicare\", we realized we were walking with a cripple and are now going to become crippled ourselves.\n\nZpacker is a lightweight ZSH plugin & theme management framework.\n\nThe minuscule ZSH package manager. No frills, no bloat, just 2 kB of 100% ZSH code, providing complete package management for your ZSH environment.\n\nZSH package managers are abundant, but most are bloated, slow or have excessive requirements. On top of that, more than a few have been abandoned for years. Zpico does not seek to be the best of the best, rather to balance functionality against a tiny, fast footprint.\n\nüå∫ Zplug is a next-generation ZSH plugin manager.\n\nCan manage everything\n\nZSH plugins/UNIX commands on GitHub and Bitbucket\n\nGist files (gist.github.com)\n\nExternally managed plugins e.g., oh-my-zsh and prezto plugins/themes\n\nBinary artifacts on GitHub Releases\n\nLocal plugins\n\netc. (you can add your own sources!)\n\nSuper-fast parallel installation/update\n\nSupport for lazy-loading\n\nBranch/tag/commit support\n\nPost-update, post-load hooks\n\nDependencies between packages\n\nUnlike antigen, no ZSH plugin files (*.plugin.zsh) are required\n\nInteractive interface (fzf, peco, zaw, and so on)\n\nCache mechanism for reducing the startup time\n\nzpm ( ZSH Plugin Manager ) is a plugin manager for ZSH which combines the imperative and declarative approach. At first run, zpm will do complex logic and generate a cache, after that will only use the cache, so it makes this framework very fast.\n\nFastest plugin manager (Really, after the first run, zpm will not be used at all)\n\nSupport for async loading\n\nDependencies between packages\n\nzpm runs on Linux, macOS, FreeBSD and Android.\n\nzpm plugins are compatible with oh-my-zsh.\n\nzr is a quick, simple ZSH plugin manager written in Rust and easily installable with cargo install zr.\n\nzsh.ai\n\nFocuses on security and hardening of local system. Requires fzf\n\nzshing is a ZSH plugin manager similar to Vundle/Vim and allows you to...\n\nKeep track of and configure your plugins right in the .zshrc\n\nInstall ZSH plugins\n\nUpdate ZSH plugins\n\nSearch by name all available ZSH Plugins\n\nClean unused plugins up\n\nRun the above actions in a single command\n\nManages the Source Plugins of your installed Plugins\n\nCustomize your .zshrc with only ~21 lines of code. Based on zsh-unplugged.\n\nA simple plugin manager for zsh. Features:\n\nAuto-updates all plugins.\n\nAuto-updates itself.\n\nConfigurable time interval for both auto-updaters.\n\nzshPlug is a minimalist plugin manager heavily based on zap.\n\nZtanesh aims to improve your UNIX command line experience and productivity with the the configuration provided by the ztanesh project: the tools will make your shell more powerful and easier to use.\n\nztheme is a small and fast theme engine for ZSH.\n\nA simple and fast ZSH plugin manager. It uses zcompile and async loading to speed up your shell startup time.\n\nZulu is a environment manager for ZSH 5 or later, which aims to make it easy to manage your shell without writing any code.\n\nEasily manage your shell environment without editing files.\n\nCreate aliases, functions and environment variables, and have them available to you at the next shell startup.\n\nAdd and remove directories from $path, $fpath and $cdpath with simple commands.\n\nInstall packages, plugins and themes easily, and have them available to you immediately.\n\nThis section is for full setup dropins - they aren't frameworks, but they're not simple plugins/themes either.\n\nzsh-quickstart-kit - A simple quickstart for using ZSH with zgenom. This automatically configures ZSH to use zgenom to load a curated (but easily customizable) collection of plugins and periodically automatically update itself, the plugins, and the quickstart kit itself.\n\nZPWR - An extremely powerful custom terminal environment built on top of Zinit for maximum speed. A full terminal configuration framework including zsh, tmux, fzf, vim and spacemacs configurations. It includes:\n\n12.9k+ tab completions\n\n1.9k+ aliases\n\n330+ git aliases\n\n400+ zpwr subcommands\n\n2.8k functions\n\n175+ zpwr environment variables\n\n175+ perl, python, bash, ZSH scripts\n\n2.8k line README.md\n\n50k+ LOC\n\n1 line install\n\nIf you're on a Mac, the zsh that comes with it is usually pretty stale. You can use brew install zsh to update it.\n\nMany of the themes here use special glyphs for things like displaying a branch icon. You'll need to use a Nerd Font or a Powerline-compatible font in your terminal program or you'll see ugly broken boxes where the symbols should be.\n\nHere are a few good sources for Nerd Fonts and Powerline-compatible fonts:\n\nAwesome Terminal Fonts - A family of fonts that include some nice monospaced Icons.\n\nCascadia Code - Microsoft's Cascadia Code\n\nFantasque Awesome Font - A nice monospaced font, patched with Font-Awesome, Octoicons, and Powerline-Glyphs.\n\nFira Mono - Mozilla's Fira type family.\n\nHack - Another Powerline-compatible font designed for source code and terminal usage.\n\nInput Mono - A family of fonts designed specifically for code. It offers both monospaced and proportional fonts and includes Powerline glyphs.\n\nIosevka - Iosevka is an open source slender monospace sans-serif and slab-serif typeface inspired by Pragmata Pro, M+ and PF DIN Mono, designed to be the ideal font for programming.\n\nMonoid - Monoid is customizable and optimized for coding with bitmap-like sharpness at 15px line-height even on low res displays.\n\nMononoki - Mononoki is a typeface by Matthias Tellen, created to enhance code formatting.\n\nMore Nerd Fonts - Another site to download nerd fonts.\n\nNerd fonts - A collection of over 20 patched fonts (over 1,700 variations) & the fontforge font patcher python script for Powerline, devicons, and vim-devicons: includes Droid Sans, Meslo, AnonymousPro, ProFont, Inconsolta, and many more. These can be installed with brew - do brew tap homebrew/cask-fonts && brew install --cask fontname\n\nPowerline patched font collection - A collection of a dozen or so fonts patched to include Powerline glyphs.\n\nSpacemono - Google's new original monospace display typeface family.\n\nVictor Mono - Victor Mono is a free programming font with semi-connected cursive italics, symbol ligatures (!=, ->>, =>, ===, <=, >=, ++) and Latin, Cyrillic and Greek characters.\n\nGeneric ZSH\n\nA Beautifully Productive Terminal Experience - Tutorial using a combination of iTerm 2, ZSH, Prezto, Tmux, and Tmuxinator to make for an extremely productive developer workflow.\n\nA Guide to ZSH Completion With Examples - Explains ZSH autocompletion configuration with examples.\n\nadamnorwood-zsh - A minimalist but readable ZSH setup based on oh-my-posh.\n\nArch Linux's ZSH introduction - Not actually Arch or Linux-specific.\n\nGH - Setup ZSH on debian/Ubuntu-based linuxes. Installs Powerlevel10k, zsh-completions, zsh-autosuggestions, fast-syntax-highlighting, and more.\n\nHow To Make an Awesome Custom Shell with ZSH - A beginner-friendly tutorial on how to install and configure a ZSH shell.\n\ncommandlinepoweruser.com - Wes Bos' videos introducing ZSH and oh-my-zsh.\n\nOutrageously Useful Tips To Master Your Z Shell - covers some of the features that ZSH has that Bash doesn't, and using oh-my-zsh.\n\nProfiling ZSH - Good article about profiling your ZSH setup to optimize startup time.\n\nrs-example - An example plugin showing how a Rust program can listen to and process commands from ZSH.\n\nWhy ZSH is Cooler than your Shell - slideshare presentation.\n\nzephyr - Zephyr uses built-in Zsh features to set up better default options, completions, keybindings, history, and much more.\n\nZSH for Humans - A turnkey configuration for ZSH that aims to work really well out of the box. It combines a curated set of ZSH plugins into a coherent whole that feels like a finished product rather than a DIY starter kit.\n\nZSH Pony - Covers customizing ZSH without a framework.\n\nZSH tips by Christian Schneider - An exhaustive list of ZSH tips by Christian Schneider.\n\nZSH Unplugged - Good resource if you want to eliminate using a framework but still easily use plugins.\n\nbelak/zsh-utils - A minimal set of ZSH plugins designed to be low-friction and low-complexity.\n\nmgdm.net/weblog/zsh-antigen/ - Michael Maclean's article about switching from oh-my-zsh to antigen.\n\nOh-my-zsh is the Disease and Antigen is the Vaccine - Josh Davis' introduction to Antigen.\n\nConfiguration to use Hyper.js as a ZSH terminal with a Windows Subsystem Linux on windows 10, with Oh My Zsh and the Powerlevel10k theme - How-to for getting Oh-My-ZSH running on WSL.\n\nGetting started with oh-my-zsh - A beginners guide to oh-my-zsh by Dien Bui\n\nHow to Install and Configure Z Shell in Ubuntu - Amar Pan's article will walk you through the process of installing and configuring ZSH, including how to change themes and enable the time-saving autosuggestions plug-in.\n\niTerm2 + Oh-My-ZSH: Supercharge Your Mac Terminal - Catalin Pit's tutorial on getting started with Oh-My-ZSH on macOS.\n\nLearn Zsh in 80 Minutes macOS - A beginners guide to using Oh My Zsh on macOS by Karl Hadwen\n\nOh-My-Zsh! A Work of CLI Magic - Michiel Mulders installation guide for Ubuntu\n\nOne Key Linux Setup - Simple setup (ubuntu-only) of zsh, oh-my-zsh, tmux, python support and other packages.\n\nA Beautifully Productive Terminal Experience - Mike Buss' blog post about using Prezto, Tmux & Tmuxinator.\n\nMigrate from Oh-My-Zsh to Prezto - Jerome Dalbert's blog post on migrating to Prezto.\n\nrad-shell - A fantastically feature rich, lightning-fast shell setup, powered by ZSH, Prezto, and Zgen.\n\nZinit (n√© zplugin)\n\nBlaCk-Void-Zsh - üîÆ Awesome, customizable Zsh Starter Kit üå†üå†. Includes powerline, fzf integration, Weather and image viewing in some terminals.\n\nzinit-configs - Real-world configuration files (basically a collection of .zshrc files) holding zinit invocations.\n\nZSH on Windows\n\nConEmu/zsh out-of-the-box configured to restore previously opened tabs and shell working directories after ConEmu restart\n\nChoose between clean and inherited environment when starting new SuperConsole sessions\n\nCustom colorful scheme, colorful output for various commands\n\nMSYS2 included, zsh and necessary software preinstalled, uses zsh-grml-config\n\nUses Antigen for ZSH theme and config management\n\nEnabled number of ZSH plugins to activate completion, highlighting and history for most comfortable use\n\nGit-for-Windows repo with proper git and git lfs support for MSYS2 environment is configured, git client already installed.\n\nssh-agent for git works out-of-box, add your keys to ConEmu/msys64/ConEmu/msys64/home/user/.ssh dir\n\nNon-blocking ZSH prompt status updates thanks to agkozak-zsh-prompt\n\nCommand-not-found handler customized for MSYS2 suggests what package to install\n\nSets up nano as main editor, enables nano syntax highlighting\n\nCustom helper scripts added to ConEmu/msys64/3rdparty\n\n1999 - Powerline-esque theme. Includes git status decorations, network and battery status.\n\n1password - Adds 1Password functionality including a opswd command that wraps the op command. It takes a service name as an argument and copies the password for that service to the clipboard.\n\n256color - Enhances the terminal environment with 256 colors. It looks at the chosen TERM environment variable and sees if there is respective ncurses' terminfo with 256 colors available. The result is a multicolor terminal, if available.\n\nabbr (olets) - Manages auto-expanding abbreviations that expand inline when you hit space, inspired by fish shell.\n\nabbr-path - Adds functionality of the theme_title_use_abbreviated_path parameter from some oh-my-fish themes.\n\nabbrev-alias - Provides functionality similar to vim's abbreviation expansion.\n\nactiona - Make it easier to call actiona scripts from your command line. Includes tab completions.\n\nactivate-py-environment - Automagically detects and activates your python environments (poetry, virtualenv and conda) while traversing directories.\n\nadonisjs - Plugin for skipping the node part of the ace command.\n\nai-commands - Asks GPT (gpt-4-turbo-preview) for CLI commands that achieve the described target action.\n\nairpods-battery - Looks for AirPods via Bluetooth and puts their battery charge state into $RPROMPT.\n\nalacritty - Control alacritty color schemes.\n\nalehouse - Contains short aliases for brew commands, inspired by betterbrew.\n\nalias-finder - Displays an alias when you use a command you have aliased previously. Helpful for remembering aliases you have defined in the past. Written as a pure ZSH script for speed.\n\nalias-maker - Allows you to easily create and manage aliases from the command line.\n\nalias-tips - An oh-my-zsh plugin to help remembering those aliases you defined once.\n\nallclear - Clears the terminal when you cd into $HOME.\n\nallergen - A collection of custom ZSH plugins to use with Antigen.\n\nalmostontop - Clears previous command output every time before new command executed in shell. Inspired by the alwaysontop plugin for bash.\n\nalt-and-select - Binds the alt-c (copy), alt-v (paste), alt-x (cut) keyboard shortcut to a commands: copy-region-as-kill, yank, kill-region. Remaps the execute command to Alt-Shift-X.\n\nansible - A plugin for Ansible.\n\nansimotd - Adds old-school cool ANSI art when a login shell starts.\n\nansiweather - Weather in your terminal, with ANSI colors and Unicode symbols.\n\nantidote-use-omz - Make using oh-my-zsh with antidote seamless.\n\nantigen-git-rebase - Antigen/ZSH script to aid with git rebasing.\n\nanyframe - A peco/percol/fzf wrapper plugin for ZSH.\n\napache2 - Adds aliases and functions for managing Apache2.\n\napparix - Command line directory bookmarks with jumping to bookmarks, subdirectory tab completion, distant listing etc.\n\napple-touchbar - Adds MacBook Pro touchbar support in iTerm 2.\n\nappup - Adds start, stop, up and down commands when it detects a docker-compose.yml or Vagrantfile in the current directory (e.g. your application). Just run up and get coding!\n\napt - For distros with apt package manager. Offers to install missing programs for you.\n\narc - Adds aliases for Yandex version control system.\n\narchlinux (fourdim) - Defines helper functions for pacman on Arch Linux.\n\narchlinux (junker) - Based on the oh-my-zsh archlinux plugin. Defines helper functions and aliases.\n\narduino - Adds scripts to build, upload and monitor arduino sketches from a command line. Requires jq.\n\nartisan - Laravel artisan plugin for ZSH to help you to run artisan from anywhere in the project tree, with tab completion!\n\nasciidoctor - A plugin for AsciiDoctor.\n\nasdf (kiurchv) - Integration and completions for asdf, the extendable version manager, with support for Ruby, Node.js, Elixir, Erlang and more.\n\nasdf (zimfw) - Initializes asdf, installing it using git if not installed yet. Also, bypasses the shims if you're using the direnv plugin, as suggested by the plugin pro-tips.\n\nasdf-direnv - Integration and completions for asdf and direnv.\n\nasdf-prompt - Provides a function usable in prompts that displays version information for your current tool versions.\n\nask - Serves as a ChatGPT API frontend, enabling you to interact with ChatGPT directly from the ZSH shell using only cURL and jq.\n\nassume-role - ZSH plugin to allow you to assume AWS IAM roles easily. Includes completions.\n\nasync - Library for running asynchronous tasks in ZSH without requiring any external tools. Allows you to run multiple asynchronous jobs, enforce unique jobs (multiple instances of the same job will not run), flush all currently running jobs and create multiple workers (each with their own jobs).\n\natom-plugin - Based on the Sublime plugin, lets you launch a file or folder in Atom from iTerm 2.\n\natuin - Replaces your existing shell history with a SQLite database, and records additional context for your commands. Additionally, it provides optional and fully encrypted synchronisation of your history between machines, via an Atuin server.\n\naur-install - Small plugin to install packages from the AUR.\n\nauto-cenv - Automatically activate a conda environment when entering the project folder.\n\nauto-color-ls - Automatically list directories with colorls.\n\nauto-fu.zsh - Automatic complete-word and list-choices. Originally incr-0.2.zsh by y.fujii .\n\nauto-ls (commanda-panda) - Automatically runs ls or color-ls if available on cd.\n\nauto-ls (desyncr) - Automatically ls when cding to a new directory.\n\nauto-notify - Automatically sends out a notification when a long running task has completed.\n\nauto-nvm - Automatically switches to the node version specified in a given directory.\n\nauto-venv - Automatically activates the Python virtual environment in the current directory or its parent directories.\n\nautocomplete - Automatically lists completions as you type and provides intuitive keybindings for selecting and inserting them.\n\nautodark (cravend) - Switches between user-specified light and dark themes. Only works on macOS.\n\nautodark (vbwx) - Switches to another Terminal profile if dark mode is enabled (macOS-only).\n\nautodotenv - Will prompt you to load variables when you cd into a directory containing a .env file.\n\nautoenv-extended - Extended version of the zsh-autoenv plugin.\n\nautoenv - Directory-based environments.\n\nautojump - A cd command that learns - easily navigate directories from the command line. Install autojump-zsh for best results.\n\nautopair - A ZSH plugin for auto-closing, deleting and skipping over matching delimiters. Only tested on ZSH 5.0.2 or later.\n\nautoquoter - A zle widget (\"zsh plugin\") that will automatically put quotes around arguments to certain commands.\n\nautosuggestions - Fish-like fast/unobtrusive autosuggestions for ZSH.\n\nautoswitch-virtualenv - ZSH plugin to automatically switch python virtualenvs and pipenvs when traversing directories. Automatically detects pipenv and poetry projects.\n\nautoupdate-antibody - A fork of autoupdate-antigen for the Antibody plugin manager, with the added ability to cooperate with static loading.\n\nautoupdate-antigen - Antigen doesn't do automatic updates like oh-my-zsh. This plugin adds auto updating for antigen, both of antigen and the bundles loaded in your configuration.\n\nautoupdate-oh-my-zsh-plugins - oh-my-zsh doesn't automatically update non-core plugins, this plugin autoupdates git repositories in the $ZSH_CUSTOM directory.\n\nautovenv - Automatically activates Python virtual environments when entering their parent directory.\n\naws-cli-mfa - AWS CLI MFA plugin based on sweharris' aws-cli-mfa. Supports specifying mfa_device in profile.\n\naws-mfa - Plugin for AWS MFA.\n\naws-plugin - Adds helper functions for aws command. Includes mfa and assume-role helpers.\n\naws-upload - Boost your productivity with aws-upload.\n\naws-vault-profiles - Plugin that integrates usage of aws-vault with the $AWS_PROFILE environment variable.\n\naws-vault - Plugin for aws-vault. Includes tab completions.\n\naws2 - Provides completion support for version 2 of the awscli and a few utilities to manage AWS profiles and display them in the prompt.\n\naws - Forked from the original oh-my-zsh aws. Includes completions for awscli and a few utilities for managing AWS profiles and displaying them in your prompt.\n\nawsssh - List, select and ssh into EC2 instances.\n\nawsume - Plugin that enables showing the current awsume profile.\n\nazcli - Helper for using the Azure cli tools.\n\nazure-keyvault - Makes using Azure keyvaults less verbose from the cli.\n\nazure-subscription - Displays information about the Azure current Subscription and tenant.\n\nbaseballfunfacts - Print random baseball related \"fun facts\" in your shell. Depends on fortune and cowsay being installed.\n\nbash-quote - Get random quote from Bash.im.\n\nbash - Makes ZSH more Bash compatible. It redefines the source command to act more like bash does. It also enables bash completions.\n\nbat - Adds some helper aliases for bat users.\n\nbattery_state - Show battery state in right-prompt.\n\nbd - Jump back to a specific directory, without doing cd ../../...\n\nbepoptimist - Remaps vi-mode for the French b√©po keyboard.\n\nbitbucket-git-helpers - Adds helper scripts to allow you to create bitbucket PRs or open a directory in the current branch.\n\nbitwarden (casonadams) - A Bitwarden CLI fuzzy finder using fzf. Requires jq.\n\nbitwarden (game4move78) - Adds functions to manage bitwarden sessions.\n\nbitwarden (kalsowerus) - Opens a fzf widget containing your Bitwarden vault items. Upon selecting an item either the username or password will be either written into the shell or copied into the clipboard. Requires fzf, jq and bitwarden.\n\nblackbox - Stack Exchange's toolkit for storing keys/credentials securely in a git repository.\n\nbob - Plugin for bob a cross-platform and easy-to-use Neovim version manager.\n\nbofh - Adds functions to display random bofh fortunes.\n\nbol - Prints a random quote when you open a terminal window.\n\nboss-docker - Manages docker on macOS.\n\nboss-git - Adds some convenience aliases for git.\n\nbranch-manager - A plugin for managing git branches.\n\nbrave - Manages Brave profiles. With this plugin, you can start the Brave Browser with a specific user profile by using the brave command followed by the profile's name. The plugin also implements autocompletion for the profile names so you won't have to type the entire profile name manually.\n\nbrew (rhuang2014) - Standalone plugin for the Homebrew Package Manager.\n\nbrew (wintermi) - Simple plugin for the Homebrew Package Manager.\n\nbrew (wolffaxn) - Standalone plugin for the Homebrew Package Manager.\n\nbrew-switcher - Automatically switch between Homebrew installations based on the current active arch, arm64 or x86_64, on Apple Silicon Macs.\n\nbrowse-commit - A plugin that lets you open any commit in your browser from the command line.\n\nbruse - Makes it easy to brew link different versions of packages.\n\nbumblebee - A plugin to toggle prepending optirun in the command line.\n\nbw - Provides formatting options and easy access to credentials stored in Bitwarden via the Bitwarden CLI. The plugin tries to retrieve a valid session before each action, therefore an explicit login is not nescessary beforehand.\n\nc - Adds some git shortcuts.\n\ncalc (arzzen) - A calculator for ZSH.\n\ncalc (sam-programs) - Allows you to run math calculations with no prefixes.\n\ncalibre-zaw-source - Calibre - E-book management source for zaw\n\ncaniuse - Add Can I Use support to ZSH.\n\ncareful_rm - A wrapper for rm that adds trash/recycling and useful warnings.\n\ncase - A ZSH plugin that adds two aliases tolower and toupper to switch output case.\n\ncd-gitroot - A ZSH plugin to cd to the git repository root directory.\n\ncd-ls - Automatically ls after cd.\n\ncd-reminder - Display reminders when cd-ing into specified directories.\n\ncd-reporoot - A ZSH plugin to cd to the current repository checkout's root directory.\n\ncd-ssh - ssh to a server when you accidentally cd to it.\n\ncdbk - A ZSH plugin to allow easy named directory creation - shortcuts to any directory you want.\n\ncdc - Makes it easier to change directories to directories that are subdirs of a user-defined list of directories. Includes tab-completion, session history and pushd, popd and dirs equivalents.\n\ncdh - Allows users to manage and navigate through a history of directories they have visited. It maintains a history file of directories and provides several commands to interact with this history.\n\ncdhist - cd history/subdir/locatedir navigation. simple cd history, alias builtin cd to add cd history, rapidily swich to already visited directories, can use locate, mlocate or plocate to rapidly cd to any directory\n\ncdr - Easy setup of cdr for ZSH.\n\nchange-case - Plugin for fast swap between upper and lower case in your command line. üòé\n\nchatGPT - A command-line wrapper for OpenAI API for ChatGPT, DALL-E, and Whisper.\n\ncheatsheet - Plugin to easily view, create, and edit cheatsheets.\n\ncheck-deps - Helper for ZSH plugins that allows them to show how to install any missing dependencies. Works on Debian (and derivatives like Ubuntu), Arch and its derivatives, Node.js and ZSH plugins if you are using the zpm framework.\n\nchgo - Clone of chruby modified to make it easy to switch between multiple Go versions.\n\nclean-project - Remove files from projects (automatically by default). Useful for keeping .DS_Store and Thumbs.db files from cluttering your directories.\n\nclipboard - Adds a cross-platform helper function to access the system clipboard. Works on macOS, X11 (and Wayland) and Cygwin.\n\ncmaker - Makes using cmake easier.\n\ncmd-status - Reports the status of commands including return code and duration.\n\ncmd-time - Collects the execution time of commands and exports the result to a variable that can be used elsewhere. It is similar to the built-in REPORTTIME function, but it is also slightly different. Unlike when you set REPORTTIME, it considers user and sytem time, not just CPU time.\n\ncmdtime - Displays the duration of a command to the terminal forked from the timer plugin.\n\ncode-review - Launches git difftool on git merge-base target_branch base_branch and target_branch.\n\ncode-stats - Counts keypresses and logs stats to Code::Stats.\n\ncodex - Enables you to use OpenAI's powerful Codex AI in the command line.\n\ncoffee-time - Adds the caf alias, which runs caffeinate -dims. The extra flags keep everything awake: the system, the drive, and the display.\n\ncolor-logging - provides a really easy to use logging library with notifications for pushbullet and pushover, colorizes tools like cat and ls and provides a color library.\n\ncolored-man-pages-mod - Forked from ohmyzsh/ohmyzsh/plugins/colored-man-pages. Colorizes man output.\n\ncolored-man-pages - Colorize man pages.\n\ncolorize-functions - Colorizes functions for ZSH.\n\ncolorize - Colorize the output of various programs.\n\ncolorls - Defines a few helpful shortcuts to some colorls functions.\n\ncolors (Tarrasch) - Makes it easier to colorize text from the CLI. red foo just works.\n\ncolors (zpm-zsh) - Enhanced colors for ZSH.\n\ncommand-execution-timer - Displays the time an interactive shell command takes to execute.\n\ncommand-not-found (freed-wu) - Uses the command-not-found package for ZSH to provide suggested packages to be installed if a command cannot be found.\n\ncommand-not-found (tarrasch) - A mirror of the oh-my-zsh command-not-found plugin so you don't have to include all of oh-my-zsh.\n\ncommand-note - Record complex commands and comment on them.\n\ncommand-time - Show execution time for long commands in ZSH and powerlevel9k. Similar to REPORTTIME builtin, but only outputs when user + system time >= REPORTTIME.\n\ncommunism - Displays a Marx quote of the day.\n\ncompe - Add completion for nvim-compe.\n\ncompletion-generator - This plugin tries to read the list of options from the help text of programs and generate a completion function automatically. Note that this doesn't do it automatically, you have to explicitly call the generator to create a completion script.\n\nconda (themysciradata) - Adds function to provide a prompt segment for conda and aliases for some base functions.\n\nconda (wardhanisukoco) - Automatically loads conda and provides functions for detecting conda versions for use in themes.\n\nconda-init - Cleans up environment variables so conda doesn't mess up tmux.\n\ncondaenv - Provides a condaenv_prompt_info function which returns the current conda environment name.\n\nconfer - Tries to find program configuration files automatically so you can do things like conf vim to edit your vim configuration files.\n\ncontainers - Provides aliases and better interoperability between [podman(https://podman.io)] and docker commands based on which you have installed.\n\ncopy-pasta - Copy and paste files in your terminal like you would in a GUI.\n\ncopyzshell - A ZSH plugin to copy your shell configuration to another machine over ssh.\n\ncrash - Adds proper error handling, exceptions and try/catch for ZSH.\n\ncrayon-syntax - ZSH syntax highlighting for the Crayon Plugin for Wordpress.\n\ncros-auto-notify - Automatically sends out a notification when a long running task has completed. Works with macOS and linux (if hterm-notify is installed).\n\ncrypto-prices - Add a powerlevel9k segment with the current bitcoin price.\n\ncrystal - A plugin for Crystal.\n\ncvideo - Quickly compress video with ffmpeg.\n\ncycle-fav-dirs - A plugin to cycle through your favourite directories.\n\nczhttpd - A simple http server written in 99.9% pure ZSH.\n\nddev - A ZSH plugin for the ddev tool for setting up PHP development environments.\n\ndeclare-zsh - A parser for zinit commands in .zshrc. It allows you to perform the following actions on .zshrc from the command-line - enable and disable plugins add or remove snippets.\n\ndeepx - Collection of useful and fun commands to improve workflow and quality of life.\n\ndeer - A file navigator for ZSH heavily inspired by ranger.\n\ndef - Allows you to specify and run a default command in any directory of your choice.\n\ndefer - Defers execution of a zsh command until zsh has nothing else to do and is waiting for user input. Its intended purpose is staged zsh startup. It works similarly to Turbo mode in zinit.\n\ndelete-prompt - ZSH widget to delete the prompt texts within the current line. It is useful when executing pasted commands from the web or a README. A leading non-alphanumeric character + space is detected as a prompt.\n\ndeno (cowboyd) - Useful deno aliases and settings.\n\ndeno (tricked-dev) - Automatically installs deno to $HOME/.deno on startup if deno is not already installed.\n\ndepot-tools - Simple oh-my-zsh plugin for installing the chromium depot_tools. Installing this plugin will add all of the chromium depot_tools to your $PATH automatically.\n\ndev - Provides a lightweight version of Shopify's internal dev tool\n\ndietpi - Adds utilities for dietpi to your $PATH (and includes aliases to automagically run them with sudo) when you log into a machine running dietpi.\n\ndiff-so-fancy - Automatically installs diff-so-fancy and enables its use in ZSH and git.\n\ndiractions - Allow you to map a short logical/mnemonic name to directories to quickly access them, or perform actions in them.\n\ndirbrowse - Customized version of the dirbrowse plugin in oh-my-zsh.\n\ndircolors-solarized (joel-porquet) - Solarized dircolors plugin, with options for dark or light terminal backgrounds.\n\ndircolors-solarized (pinelibg) - Enables Solarized Color Theme for GNU ls.\n\ndircycle - Cycle through the directory stack.\n\ndirectory-history - A per directory history for ZSH which implements forward/backward navigation as well as substring search in a directory sensitive manner.\n\ndirenv - A plugin for installing and loading direnv. Inspired by zsh-pyenv.\n\ndirrc - Executes .dirc when present in a directory you cd into.\n\ndirstack - Plugin for displaying the dirstack info on a single line.\n\ndoas (anatolykopyl) - Easily prefix your current or previous commands with doas by pressing ESC twice.\n\ndoas (senderman) - Easily prefix your current or previous commands with doas by pressing ESC twice.\n\ndocker-aliases - Docker aliases for everyday use.\n\ndocker-compose - Show docker container status in your prompt.\n\ndocker-helpers - A collection of docker helper scripts.\n\ndocker-machine - A docker-machine plugin for ZSH.\n\ndocker-run - Go back to running your commands \"naturally\", we'll handle the container.\n\ndogesh - Dogification plugin.\n\ndotbare - Interactive dotfile management with the help of fzf.\n\ndotfiles - Keep your dotfiles in sync across multiple machines using git.\n\ndotpyvenv - Automagically switch to a python virtual environment located (that you previously have created with virtualenv program) in a directory named .pyvenv when you cd into a directory.\n\ndownload - Helper to download files with aria2c.\n\ndropbox - A dropbox plugin for ZSH that provides dropbox-cli and dropbox-uploader commands.\n\ndrupal - Adds aliases for common tasks and also tab-completion for drush. Inspired by Artisan.\n\ndune-quotes - Random Dune quote generator plugin.\n\nduration - Displays command duration if it exceeds a user-settable run time.\n\ndwim - Attempts to predict what you will want to do next. It provides a key binding (control-u) that will replace the current (or previous) command line with the command you will want to run next.\n\neasy-motion - A port of vim-easymotion for ZSH.\n\nec2ssh - List EC2 instances and ssh login to the instances easily.\n\nediting-workbench - Adds sane, complex command line editing (e.g. incremental history word completion).\n\nedward cli - Adds smart completions and alises for edward CLI micro-service launcher.\n\nelixir - Adds shortcuts for Elixir, IEX, Mix, Kiex and Phoenix.\n\nemacs (cowboyd) - Make Emacs the default for CLI operations like editing git commit messages; set up handy aliases.\n\nemacs (flinner) - Uses the Emacs daemon capability, allowing the user to quickly open frames, whether they are opened in a terminal via a ssh connection, or X frames opened on the same host.\n\nemoji-cli - üò± Emoji completion on the command line.\n\nemoji-fzf - Configurable ZSH plugin for the excellent emoji-fzf. It is heavily inspired by emoji-cli.\n\nemojis - Adds numerous ASCII art emojis to your environment in convenient variables.\n\nenhancd - A simple tool that provides an enhanced cd command by memorizing all directories visited by a user and use it for the pathname resolution.\n\nenvrc - Automatically loads and unloads environment variables if a .envrc file is found in a directory.\n\nescape-backtick - Quickly insert escaped backticks when double-tapping \"`\".\n\nevalcache - Caches the output of a binary initialization command like eval \"$(hub alias -s)\", to help lower shell startup time by loading from cache instead of re-running every new shell session.\n\nevil-registers - Extends ZLE vi commands to remotely access named registers of the vim and nvim editors, and system selection and clipboard.\n\nexa (DarrinTisdale) - Enables a number of aliases extending exa, the modern replacement for ls.\n\nexa (mohamedelashri) - Adds aliases for exa, a modern replacement for ls.\n\nexa (ptavares) - Installs and loads exa.\n\nexa (ritchies) - Adds aliases to make using exa easier.\n\nexa (todie) - Integration and completions for exa, a modern replacement for ls.\n\nexa (zap-zsh) - Overrides common commands to use exa instead.\n\nexa (zplugin) - replace ls with ogham/exa.\n\nexa (zshell) - replace ls with ogham/exa.\n\nexa-ls (zpm-zsh) - Zsh plugin for ls.\n\nexa-ls - Adds aliases so that you can use exa as a drop-in replacement for ls and tree.\n\nexercism - A plugin for exercism.io.\n\nexpand-ealias - Expand specific aliases with space.\n\nexpand - Expands regular aliases, global aliases, incorrect spellings and phrases, globs, history expansion and $parameters with the spacebar key.\n\nexpander - A zle widget that allows you to write custom expanders and select them with fzf.\n\nexplain-shell (brokentoaster) - Uses lynx to look up the current command line on explainshell.com.\n\nexplain-shell (gmatheu) - Opens commands on explainshell.com.\n\nextend-history - Extends command history by adding the exit code for each command in the history.\n\nez-cmd - Simplifies and streamlines common command-line tasks by providing easy-to-use shortcuts and aliases.\n\nez-compinit - Wraps compinit, queueing up calls to compdef, and hooking the real compinit call to an event that runs at the end of your .zshrc. That way you get all the benefits of calling compinit early without any of the downsides.\n\neza (clavelm) - Replaces ls with eza-community/eza.\n\neza (mohamedelashri) - Adds aliases for eza, a modern replacement for ls.\n\neza (twopizza9621536) - Replaces ls with eza-community/eza.\n\neza (z-shell) - Replaces ls with eza-community/eza.\n\neza-ls - Adds aliases allowing [eza(https://github.com/eza-community/eza)], to act as a drop-in replacement for ls and tree.\n\nf-shortcuts - Makes a shortcuts toolbar using F1 to F12 keys.\n\nfancy-ctrl-z - Broken out version of the version in oh-my-zsh so users of other frameworks don't have to import all of oh-my-zsh.\n\nfast-alias-tips - Helps remember the aliases you defined and forgot about. Ported from djui/alias-tips. Active fork of sei40kr/zsh-fast-alias-tips.\n\nfast-syntax-highlighting - Optimized and improved zsh-users/zsh-syntax-highlighting ‚Äì better response times, switchable highlight themes.\n\nfastcache - Caches command output to improve shell startup time.\n\nfav - ZSH/fzf plugin that makes it really easy to add and recall named favorites of your important directories.\n\nfavorite-directories - Fast jumps to your favorite directories.\n\nfd-plugin - Adds aliases for fd, a modern replacement for find.\n\nfd - Use fzf to browse directories.\n\nfigures - Unicode symbols for ZSH.\n\nfirebase (Seqi) - Display the current working project or project alias when in a Firebase project directory or subdirectory.\n\nfirebase (rmrs) - Add an indicator in the prompt that you're in a directory with a firebase.json file (aka \"firebase project\").\n\nfirmine - Includes decorators for user@hostname, date & time, current directory and Kaomoji icons for last command exit status.\n\nfixnumpad-osx - Enables numpad keys of Apple keyboards to be recognized in ZSH.\n\nflow-plugin - This plugin makes the flow command available inside every subdirectory of the TYPO3 Flow distribution.\n\nfnm (dominik-schwabe) - Installs and loads the Fast Node Manager (fnm) if it is missing.\n\nfnm (wintermi) - Helper plugin for the fast and simple Node.js version manager fnm.\n\nforgit - Utility tool for git which takes advantage of fuzzy finder fzf.\n\nfunctional - ZSH higher order functions.\n\nfuzzy-search-and-edit - ZSH plugin for fuzzy searching files and instantly opening a matched file on matched line.\n\nfuzzy-wd - Adds fuzzy search for directories warped with the WD plugin.\n\nfz - Seamlessly adds fuzzy search to z's tab completion and lets you easily jump around among directories in your history.\n\nfzf (gimbo) - Helpers for using fzf in ZSH. Requires brew.sh.\n\nfzf (unixorn) - Enables fzf history and file searches.\n\nfzf-copyq-clipboard - Add fzf support for CopyQ.\n\nfzf-dir-navigator - This is a cool and user-friendly directory navigation plugin for zsh using fzf that allows the user to switch to any directory from anywhere and to anywhere. It also maintains a history of recently visited directories. Additionally, you can use hotkeys to move back and forth between directories in the shell session.\n\nfzf-fasd - Integrates fzf and fasd --- tab completion of z with fzf's fuzzy search!\n\nfzf-finder - Plugin to have a cool search keybinding with fzf and (optionally) bat and fd. Falls back to find and cat. Searches in the local tree of subdirectories for files.\n\nfzf-history-search - Replaces Ctrl+R with an fzf-driven history search that includes date/times.\n\nfzf-it - Make any command interactive wrapping it with fzf functionality.\n\nfzf-marks - Little script to create, navigate and delete bookmarks in bash and zsh, using the fuzzy finder fzf.\n\nfzf-packagemanager - Adds commands for installing tools via various package managers using fzf. Supports apt, brew & dnf.\n\nfzf-pass - Better handling of passwords using fzf and pass.\n\nfzf-plugin (atlas34) - oh-my-zsh's fzf plugin extracted so it can be used easily with other plugin managers.\n\nfzf-plugin (hwk929) - oh-my-zsh's fzf plugin extracted so it can be used easily with other plugin managers.\n\nfzf-prezto - Prezto plugin that finds where fzf has been installed and enables its auto-completion and key-bindings. This plugin works as a Prezto zstyle configuration option.\n\nfzf-tab-widgets - Adds widgets for fzf-tab.\n\nfzf-tab - Replace ZSH's default completion selection menu with fzf.\n\nfzf-tools - Provides functions, aliases and key-bindings for commands such as alias, find, ls, man, printenv that are designed to enhance your command-line workflow by making them to default to filtering through fzf, allowing you to quickly find files, search & run commands from history, run scripts of many supported types, browse git commits, and more.\n\nfzf-utils - Provides functions to kill proceses and find in path with fzf.\n\nfzf-widgets - Adds some ZLE widgets for fzf.\n\nfzfsh - Add fzf plugins for chezmoi, docker, git, kubectl and pass.\n\nfzy - Plugin that uses fzy for certain fuzzy matching operations.\n\ngcloud-project - Easy selection of Google Cloud Projects.\n\ngcloud - Finds the installed gcloud sdk and sources the zsh file there, along with the zsh completions file.\n\ngdbm - Adds GDBM as a plugin.\n\ngentoo - Adds some aliases and functions to work with Gentoo Linux.\n\ngeometry-datetime - Geometry datetime plugin. Shows datetime (date unix command) in your prompt.\n\ngeometry-hydrate - Geometry plugin to remind you to hydrate.\n\ngeometry-npm-package-version - Geometry plugin to display the current folder's npm package version.\n\ngeometry-rust-version - Geometry plugin to display the current folder's Rust version when either a .rs or Cargo.toml is present.\n\nget-jquery - Plugin for fast downloading the jQuery library from code.jquery.com.\n\nghost-zeus - Lets you use zeus with normal rails commands.\n\ngimbo-git - A subset of the oh-my-zsh git plugin aliases, plus some new aliases, plus a few handy functions.\n\ngimme - Manage Go installations with gimme.\n\ngit-acp - Take the current command line as the commit message and then run git pull, git add, git commit and git push with one keystroke.\n\ngit-add-remote - Easily add the upstream remote to your git fork.\n\ngit-aliases (mdumitru) - Broken out version of the version in oh-my-zsh so users of other frameworks don't have to import all of oh-my-zsh.\n\ngit-aliases (peterhurford) - Creates a lot of useful aliases for combinations of commonly used git commands.\n\ngit-aliases (remino) - Aliases all git xyz commands to gxyz. Also aliases g to git.\n\ngit-branches - Makes a menu of git branches you can switch to without having to type long branch names.\n\ngit-check - Adds a ZSH hook to check if the origin of the current branch has changes to local in the background and sends a notification.\n\ngit-clean-branch - Cleans up dead git branches.\n\ngit-complete-urls - Enhance git completion to include in the remotes completion (e.g. from git clone) any URL in the clipboard.\n\ngit-extra-commands - Extra git helper scripts packaged as a plugin.\n\ngit-flow-avh - Adds short aliases for the git-flow commands.\n\ngit-fuzzy - A CLI interface to git that relies heavily on fzf.\n\ngit-gen - Handle git bulk branch delete and create operations.\n\ngit-ignore - Generates .gitignore files from gitignore.io offline. fzf, completion, preview integrated.\n\ngit-is-clean - This function will return true or false depending on if it finds out your git repo is dirty or not.\n\ngit-it-on - Adds ability to open a folder in your current branch on GitHub.\n\ngit-lfs - Adds short aliases for the git-lfs commands.\n\ngit-patch - Adds custom functions and aliases to the oh-my-zsh git plugin.\n\ngit-plugin (dark-kitt) - git integration that displays the current directory and git branch.\n\ngit-plugin (rcruzper) - Adds some functions for git.\n\ngit-prompt-enhanced - Provides a more granular information about a git repository.\n\ngit-prompt-useremail - Adds prompt reminders for git user.email.\n\ngit-prune (diazod) - Allows you to delete all branches that are already merged in your local git repository and/or that were merged in your remote origin git repository.\n\ngit-prune (seinh) - Plugin that simplifies deleting merged branches in a git repository.\n\ngit-scripts - Adds git-squash-branch and git-remove-merged commands.\n\ngit-secret - A bash-tool to store your private data inside a git repository.\n\ngit-smart-commands - Adds extra git commands to make some common git usages more efficient.\n\ngit-smart-commends-wrapper - Wraps git-smart-commands to make it compatible with the oh-my-zsh plugins system.\n\ngit-status - Exposes functions with information about the current git repository.\n\ngit-switch-branch-skim - Allows you to switch git branches with skim\n\ngit-sync - A ZSH plugin to sync git repositories and clean them up.\n\ngit-tree - fzf powered git worktree helper.\n\ngit-worktree - Wraps some git worktree operations for simplicity and productivity. Includes fzf tooling.\n\ngit-worktrees - Makes git worktrees more functional. Includes tab completions.\n\ngit - Replacement for the stock oh-my-zsh git plugin. Provides quite a few useful aliases and functions. The motivation to replace the default plugin stems from the fact that it comes with some inconsistencies that make a few popular commands rather unintuitive, so this plugin makes the aliases consistent.\n\ngitcd (SukkaW) - Adds command to git clone a repository and cd into the resulting directory.\n\ngitcd (viko16) - Automatically cd to a git working directory after cloning it.\n\ngitfast - Updated fork of the oh-my-zsh gitfast plugin.\n\ngitgo - Open a GitHub/GitLab repository in your browser from the command line (macOS only).\n\ngithub-folders - Organizes your GitHub checkouts for you.\n\ngithub - Fork of the original GitHub plugin embedded in oh-my-zsh.\n\ngitignore - Plugin for creating .gitignore files.\n\ngitio (denysdovhan) - A ZSH plugin for generating a GitHub short URL using git.io.\n\ngitio (nicolodiamante) - Uses git.io to shorten git urls.\n\ngitstatus - Makes it easy to show your git status in your prompt.\n\ngitsync - ZSH plugin to improve workflows for one person developing on the same repository on multiple machines.\n\ngoenv (bbenne10) - Manage $GOPATH similarly to Python's virtualenvwrapper.\n\ngoenv (cda0) - Plugin for installing, updating and loading goenv.\n\ngoenv (heyvito) - Automatically reads .goenv files in the current directory and sets GOPRIVATE environment variables.\n\ngoing_places - A plugin that helps to use, create and maintain a list of shell locations.\n\ngolang - Adds tooling for the Go programming language toolchain.\n\ngolinks - Launch golinks from your terminal.\n\ngpg-agent - Plugin that tries to do the right thing when it comes to setting up the GPG agent to act as an SSH agent as well on macOS.\n\ngpg-crypt - ZSH plugin to encrypt and decrypt files or directories in place.\n\ngpg - Adds helpful aliases for using gpg.\n\ngpt - Enable querying ChatGPT from the command line.\n\ngrep2awk - ZLE widget to transform grep command into awk command.\n\ngrunt-plugin - Add autocompletion for grunt.\n\ngsh - Collection of helper functions for git\n\ngtm-terminal-plugin - terminal plugin for git time metrics.\n\ngtr - Allows fast tagging of a release in git using the tag name *release-YYYY-MM-DD-HH-MM- and headline Release YYYY-MM-DD HH:MM.\n\nguish - Collection of utility functions and aliases.\n\ngumsible - Wrapper plugin for Molecule.\n\ngunstage - There are at least eight ways to unstage files in a git repository. This is a command-line shell plugin for undoing git add.\n\ngvm (dgnest) - A gvm (Go version manager) plugin for ZSH.\n\ngvm (yerinle) - Provides autocompletion for gvm (Groovy enVironment Manager).\n\nhab - Automatically loads OS environment variables defined in the file .envrc if it's found when changing to a new directory.\n\nhacker-quotes - Outputs a random hacker quote when you open a terminal.\n\nhadoop-plugin - Adds some convenience aliases for hadoop functions.\n\nhaiku - Prints a haiku promoting work-life balance and stress management once every 24 hours when the terminal is open.\n\nhanami - ZSH plugin for hanami projects.\n\nhangul - Auto correct hangul(ÌïúÍ∏Ä, korean) to English when it was supposed to be typed in English. ÏòÅÏñ¥Î•º ÌÉÄÏù¥Ìïë Ìï¥ÏïºÎêòÎäîÎç∞ ÌïúÍ∏ÄÎ°ú ÌÉÄÏù¥ÌïëÎêúÍ≤ΩÏö∞ ÏûêÎèôÏúºÎ°ú ÏàòÏ†ïÌï©ÎãàÎã§.\n\nhbt - Heuristic ZSH suggestion system based on past command usage.\n\nhebzsh - If a command is not found as typed in Hebrew, translates the command as if it was typed on a keyboard with a US English layout and tries again.\n\nhelp - Colorizes the output of commands run with --help.\n\nhints - Display glob and parameter flags and other non completable info right under your editing buffer.\n\nhipchat - Send hipchat messages from the shell.\n\nhist-delete - Delete history items from zsh's fzf Ctrl+R history search.\n\nhist - Edit your history in ZSH, without ever leaving the command line.\n\nhistdb - Stores your history in an SQLite database. Can be integrated with zsh-autosuggestions.\n\nhistorikeeper - Captures history in a database.\n\nhistory-enquirer - Enhances history search with more interaction and a multiline selection menu. Requires Node.js.\n\nhistory-filter - Allows you to specify patterns that will automatically exclude commands from being inserted into your permanent history. Particularly useful for preventing secrets being written.\n\nhistory-here - Binds ^G to quickly toggle the current shell history file location.\n\nhistory-popup - Captures the PageUp key and uses dialog to open a popup menu with the history, so the user can interactively navigate through it and pick the history line to bring back to the prompt.\n\nhistory-search-multi-word - A syntax highlighted, multi-word history searcher for ZSH, bound to Ctrl-R, with advanced functions (e.g. bump of history entry to top of history).\n\nhistory-substring-search - Needs to be loaded after zsh-syntax-highlighting, or they'll both break. You'll also need to bind keys to its functions, details are in the README.md.\n\nhistory-sync (vitobotta) - Syncs your ZSH history across computers using a git private repository. Uses openssl to encrypt the history.\n\nhistory-sync (wulfgarpro) - An oh-my-zsh plugin for GPG encrypted, Internet synchronized ZSH history using git.\n\nhistory - Extend history so that it can be queried by SQL.\n\nhitokoto - Displays a random quote from hitokoto.cn.\n\nhomeassistant-cli - Provides completion and (configuration) helpers for the Home Assistant Command-line interface (hass-cli). and allows command line interaction with Home Assistant instances.\n\nhomebrew - Plugin for homebrew that supplements the one built into oh-my-zsh and can safely run with it enabled.\n\nhooks - Add missing hooks - for plugins and personal use.\n\nhost-switch - Make it easier to switch in different /etc/hosts files during development.\n\nhub-ci-zsh-plugin - A simple plugin for adding hub ci-status to your ZSH theme.\n\nhub - ZSH plugin for forking model.\n\nhypnosnek - Simple utilities with p10k integration for managing python environments.\n\nigit - Interactive git commands using fzf.\n\nincsearch - Friendlier vim mode for ZSH. Moves cursor with incremental search within current line.\n\ning - Streamlined ping output.\n\ninstant-repl - Activate a REPL for any command in your current ZSH session.\n\ninteractive-cd - Fish-like interactive tab completion for cd.\n\niosctl - Quickly access App, Data, and Log of the running simulator.\n\nipip - Plugin for IPIP.\n\niterm-tab-color - Adds function to set the tab color in iTerm2 and can automatically change color based on cwd or command being executed.\n\niterm-tab-colors - Automatically changes iTerm 2 tab color based on the current working directory.\n\niterm-tmux-color-tabs - Every new tmux tab opened in iTerm2 will have the next colour from the default or specified palette.\n\niterm-touchbar - Display iTerm2 feedback in the MacbookPro TouchBar (Current directory, git branch & status).\n\niterm2-colors - Manage your iTerm 2's color scheme from the command line.\n\niterm2-shell-integration - Shell integration and utilities for iTerm2.\n\niterm2-tabs - Set colors and titles of iTerm 2 tabs.\n\niterm2 - Packs iTerm 2's ZSH integration scripts into a ZSH plugin to avoid polluting your $HOME directory, with a negligible time increase of only 2ms.\n\niwd - Similar in concept to $PWD, this ZSH plugin saves your initial working directory in $IWD for easy returns to the starting point of your session.\n\njabba - Adds shell integration code and completions for the jabba Java version manager.\n\njava-zsh-plugin - Adds a setjdk command so you can switch easily between different versions of the jdk.\n\njavaVersions - Change between different java versions with a single command.\n\njdk-switch - Switches between jdk versions. Works on macOS and Linux.\n\njenkins - A jenkins plugin for ZSH, heavily inspired by the excellent jira plugin.\n\njenv-lazy - A ZSH plugin for lazy loading of jEnv.\n\njhipster - Adds commands for jHipster.\n\njira-plus - Create JIRA tickets from the command line.\n\njq - Interactively build jq expressions. Also supports gojq. Requires fzf.\n\njrgit - Provides a suite of functions to streamline the Git user experience. It includes features for installing and configuring Git, handling large files with Git LFS, improving diff outputs, and managing credentials and keys securely.\n\njvm - Allows selection of JDK on macOS.\n\nk3d - Adds aliases and tab completions for k3d.\n\nk - Directory listings for ZSH with git status decorations.\n\nkctl - Add helper aliases for kubectl.\n\nkill-node - ZSH plugin for murdering node process families.\n\nkitsunebook - KitsuneBook plugin for oh-my-zsh.\n\nkiwi - Dog-themed, includes git status and last command exit status decorators.\n\nkonsole-theme-changer - Toggle konsole theme from ZSH.\n\nkube-aliases - Adds functions and aliases to make working with kubectl more pleasant.\n\nkube-ps1 - ZSH plugin for kubectl that adds current context and namespace.\n\nkubecolor (devopstales) - Adds aliases for the kubecolor command.\n\nkubecolor (droctothorpe) - Simplify and colorize the output of kubectl get events -w\n\nkubecolor (trejo08) - Prints colorized outputs from kubectl. Includes helper functions.\n\nkubeconfig-mgr - Makes managing multiple kubeconfig files easier.\n\nkubectl-config-switcher - Switch between config files in ~/.kube via the KUBECTL environment variable.\n\nkubectl - ZSH plugin for managing kubectl.\n\nkubectlenv - Easily switch between multiple kubectl versions.\n\nkubectx (ptavares) - Installs and loads kubectx.\n\nkubectx (unixorn) - Automatically installs kubectx and kubens.\n\nkubernetes - Add kubernetes helper functions and aliases.\n\nlacrimae - Prints a line from a collection of chants.\n\nlando (joshuabedford) - A collection of alias functions to enable the use of the CLIs within Lando without having to type lando to access them.\n\nlando (mannuel) - Adds aliases for various Lando commands.\n\nlaradock-workspace - Provides an interface to Laradock's workspace.\n\nlaravel (baliestri) - Plugin for skiping the php command when running artisan commands and ./sail or ./vendor/bin/sail when running sail commands.\n\nlaravel (crazybooot) - Add shortcuts for Laravel 5, 5.1, 5.2 & 5.3.\n\nlaravel-au - Adds aliases for Laravel 6.\n\nlaravel-sail - Adds shortcuts for sail commands.\n\nlaravelx - Adds some aliases for common Laravel commands.\n\nlast-working-dir-tmux - Keeps track of the last used working directory globally and per tmux session and automatically jumps into it for new shells.\n\nlast-working-directory - Broken out copy of the version in oh-my-zsh. Keeps track of the last used working directory and automatically jumps into it for new shells.\n\nlazy-load - Lazy load tab completions only when you actually need them.\n\nlazyload - Lazy load commands and speed up start up time of ZSH.\n\nlearn - Learning collection in MySQL/MariadB to save, query and quiz everything you learn.\n\nlesaint-git - Replacement git plugin for oh-my-zsh-compatible frameworks.\n\nlesaint-mvn - Maven plugins for oh-my-zsh.\n\nliferay - Adds scripts for liferay development.\n\nlinkfile - Add shortcuts to your favorite directories.\n\nlinus-rants - Outputs a random Linus Torvalds rant when opening a terminal.\n\nlistbox - Listbox element for shell.\n\nllm-suggestions - Type something in English at the prompt, hit a definable key, and it uses LLM to generate a command line for you.\n\nlocate-sublime-projects-cli - Allows searching for Sublime Text projects and opens them in Sublime.\n\nloremipsum - Generate lorem ipsum text on the command line. Gets its data from lipsum.com.\n\nls (twopizza9621536) - Adds some more aliases for ls.\n\nls (zpm-zsh) - Colorizes the output of ls.\n\nlsd (tankeryang) - Replaces ls and tree commands with lsd.\n\nlsd (wintermi) - Override ls and tree commands with lsd.\n\nlsd (z-shell) - Replaces ls with lsd.\n\nlumberjack - Lumberjack is a logging interface for shell scripts.\n\nlux - ZSH plugin to toggle the light & dark modes of macOS, iTerm 2, Visual Studio Code and other items and applications via the lux command. Highly customizable: included items can be configured by defining variables. Highly extensible: items can be added by defining functions. Includes a macos_is_dark helper function to determine if the macOS dark mode is active for use in theming.\n\nmac-packaging - A set of common functions used for enterprise Mac packaging with Munki.\n\nmacos (joow) - A ZSH plugin for macOS.\n\nmacos (zshzoo) - ZSH goodies for macOS users.\n\nmacos-theme - Adds the theme command, which toggles between light and dark mode in macOS. Requires lux plugin.\n\nmage2docker - Makes it easy to work with Docker and Magento 2. Speeds up and simplifies common commands like clean cache, setup upgrade, compile di and much more in Magento 2 on containers.\n\nmagento-2 - Adds m2 function to run magento binary, adds tab completions.\n\nmagic-enter - Make your enter key magical by binding a ZSH command to it.\n\nmanydots-magic - A zle tweak for emulating ...'==../..' etc.\n\nmarkedit - Mark files and edit them with autocompletion for existing marks.\n\nmarkgate - Allows you to mark directories so you can jump directly to them.\n\nmaven-plugin - A fork of the oh-my-zsh maven plugin.\n\nmedia-sync - A plugin to facilitate copying media between two rclone locations.\n\nmercurial - Extracted from oh-my-zsh so you can use it without the rest of oh-my-zsh.\n\nmfunc - Allows you to define persistent functions on-the-fly, without the need to add them to your config files. These functions are permanently available until you delete them.\n\nmise - Plugin for mise (formerly called rtx) a fast polyglot version manager, replacing tools like nvm, nodenv, rbenv, rvm, chruby, pyenv, etc.\n\nmkarch - ZSH plugin that allows you to create archives using multiple different compression formats.\n\nmkcd - Allows user to create a directory and if successful, cd into it afterward.\n\nmode-switch.CLI - A ZSH plugin for switching command line between normal mode and vi mode.\n\nmonorepo-plugin - ZSH plugin for monorepo management.\n\nmonthrename - Renames month names to numbers in filenames.\n\nmore-hooks-for-git - Adds extra hooks for git add, git diff and git status.\n\nmouse-status - Changes mouse color based on status code, uses libratbag.\n\nmsf - Metasploit handler plugin for starting handlers easily.\n\nmulti-evalcache - Cache multiple eval loads to improve startup time, inspired by mroth/evalcache.\n\nmulti-sshacc - Manages multiple git with different ssh keys per repo.\n\nmvn-contexts - Allows fast switching between maven configurations.\n\nmylocation - A plugin to show your current location based on your IP address.\n\nmyservice - Designed to help you manage custom systemd services and Docker containers more conveniently. This plugin provides user-friendly commands to list and check the status of your custom services and Docker containers straight from your command line.\n\nmysql-colorize - Adds color for mysql tables.\n\nmysql-login - Adds alias for MySQL with login path.\n\nmysql - Adds some functions for dealing with mysql.\n\nn - Auto-switches node versions based on project environment using n.\n\nnamelink - Provides an automatically synchronized mapping of filesystem entries (typically symbolic links) in a set of directories to their counterparts in the named directory hash.\n\nnavi - Plugin for navi.\n\nnavigation-tools - Adds htop-like kill, directory bookmarks browser, a multi-word incremental history searcher and more.\n\nnew-file-from-template - Generates file from template.\n\nnewvwp - Spins up a new WordPress site using Valet.\n\nnhl-schedule - Retrieves and displays the NHL schedule.\n\nnice-exit-code - Maps exit status codes to human readable strings.\n\nnix-shell - Plugin that lets you use ZSH as the default shell in a nix-shell environment.\n\nnnvm - auto-switches node versions based on .nvmrc. Requires n.\n\nno-ps2 - When this plugin is used, Enter inserts a newline if the typed command is incomplete. No PS2!\n\nnobility - An organized colletion of shell modules designed to streamline your pentesting workflow by leveraging shell integrations such as autocompletion and prefilling, optimizing the productivity of your work and liberatating you from the hassle of juggling notes, endless copying and pasting, and tedious command editing.\n\nnode-env-installer - Uses nvm to install new versions and modules for the current project.\n\nnode-path - Automatically adds the npm bin of your current directory to your $PATH.\n\nnode - Srijan Shetty's Node.js plugin for ZSH with caching of nvm completions and autoloading of nvm if present.\n\nnodenv (c-uo) - Looks for nodenv in your working directory and loads it when found.\n\nnodenv (jsahlen) - Auto-load nodenv and its completions into the shell.\n\nnodenv (mattberther) - Installs, updates and loads nodenv. Inspired by zsh-rbenv.\n\nnodo - This plugin helps you prevent node_modules directories from filling your iCloud storage by un-syncing the directory or can save even more space by removing all node_modules directories within the chosen root directory. This is particularly useful for cleaning up a project that has multiple node_modules trees\n\nnohup - Add nohup to the current command pressing Ctrl-H.\n\nnoreallyjustfuckingstopalready - macOS users know the pain of trying to figure out what command actually flushes the DNS cache on their version of macOS, and this plugin makes that annoyance go away.\n\nnotenote - Makes it easy to take notes.\n\nnotes (aperezdc) - Inspired by terminal_velocity, it provides a fast interface to create and access a set of Markdown text files inside a directory.\n\nnotes (chipsenkbeil) - Provides a quick notes editing experience in ZSH.\n\nnotify (luismayta) - Notifications for ZSH with auto installation of dependencies and r2d2 sounds.\n\nnotify (marzocchi) - A plugin for ZSH (on macOS and Linux) that posts desktop notifications when a command terminates with a non-zero exit status or when it took more than 30 seconds to complete, if the terminal application is in the background (or the command's terminal tab is inactive).\n\nnpm (trystan2k) - Adds npm aliases. Based on the Oh-My-Zsh npm plugin.\n\nnpm (zfben) - Use n as npm aliases with noglob prefix and more. Based on the Oh-My-Zsh npm plugin.\n\nnpms - Utility powered by fzf for using npm scripts interactively. Requires fzf and jq.\n\nnvim-appname - Maintain multiple Neovim configurations with NVIM_APPNAME with full tab completion of available flags, available neovim applications, and neovim arguments/flags. Requires neovim v0.9+\n\nnvim-switcher- Manages switching between nvim distributinons such as Lazyvim, kickstart or a home made configuration.\n\nnvm-auto-use (jrr997) - Automatically manages your Node.js versions with nvm based on your current directory.\n\nnvm-auto-use (tomsquest) - Calls nvm use automatically whenever you enter a directory that contains an .nvmrc file with a string telling nvm which node to use.\n\nnvm-lazy - Plugin for lazy loading of oh-my-zsh's *nvm- plugin. It supports lazy-loading nvm for more than one binary/entrypoint, with the defaults being nvm, node and npm.\n\nnvm - ZSH plugin for installing, updating and loading nvm.\n\noath - Manages 2FA authentication 6 digit tokens. It was highly inspired by this article about using oathtool for 2 step verification.\n\noclif completion generator - Generates shell completions for commands lacking them.\n\noh-my-matrix - Turn your terminal into the matrix.\n\noh-my-posh-manager - Manages the oh-my-posh theme engine, along with providing a default powerline-like theme.\n\noh-my-tmux-manager - Lets you easily manage your tmux configurations.\n\nollama - Integrates the OLLAMA AI model with fzf to provide intelligent command suggestions based on user input requirements.\n\nomz-full-autoupdate - Automatically update oh-my-zsh plugins and themes.\n\nomz-git - Oh-My-ZSH's git plugin re-packaged to be standalone.\n\nomz-themes-standalone - Gives you the oh-my-zsh themes without requiring everything else that comes with oh-my-zsh\n\nopen-create-projects - Open/Create projects in Jetbrains.\n\nopen-pr - A ZSH plugin to open pull requests from command line.\n\nopenshift-origin - Add a few shortcuts to common openshift origin (oc) actions.\n\nopera-git-plugin - git aliases.\n\nopera-gx - Enables starting Opera GX with a specific user profile by using the opgx command followed by the profile's name. The plugin also implements autocompletion for profile names.\n\noperator - Clean and simple theme, works best with Menlo for Powerline.\n\nopp - Vim's text-objects-ish for ZSH.\n\nopt-path - Automatically add ~/opt subpaths to your $PATH.\n\nosx-autoproxy - Configures proxy environment variables based on macOS's system preferences.\n\nosx-dev - This plugin adds some commands for maintaining various server programs on a macOS install.\n\nosx - Add some common macOS related aliases and functions.\n\npaci - Plugin for arch linux package managers.\n\npack - Pack your source code with ZSH.\n\npackage-any-node - Easy installing of any Node modules inside the plugin directory, exposing their binaries via shims (i.e.: forwarder scripts) created automatically by Bin-Gem-Node annex.\n\npacker - Adds aliases and auto-completes for Hashicorp packer.\n\npantheon-terminal-notify - Background notifications for long running commands. Supports Elementary OS Freya.\n\npasswordless-history - Keeps passwords from entering your command line history.\n\npath-ethic - Helps manage your $PATH quickly and easily. Doesn't touch your existing .zshrc, .zprofile, but adds on top of your existing environment instead.\n\npctl - Toggle the environment variables for proxying.\n\npeco-history - Search shell history with Peco when pressing ctrl+R.\n\npenmux - A session manager plugin meant to be used for penetration testing sessions and tracking the terminal sessions to be used in reports.\n\npentest - Aliases and functions for the lazy penetration tester.\n\nper-directory-history - Per directory history for ZSH, as well as global history, and the ability to toggle between them with ^G.\n\npercol - Interactively and incrementally search history/resume background jobs using percol.\n\nperlbrew - Installs perlbrew if not already installed and initializes it for your shell.\n\npew - Sets up and manages Python virtualenvs using pew, automatically switches virtualenvs as you move directories.\n\npg - Adds utility functions to work with PostgreSQL.\n\nph-marks - Bookmark pornhub videos from your terminal.\n\nphp-version-rcfile-switcher - Automatically switch between php versions using php-version if an rc-file is present in a directory.\n\nphp-version-switcher - Changes php versions if a .php-version file is found.\n\nphpcs - Plugin for PHP code sniffer.\n\nphpunit - Plugin for PHPUnit.\n\npins - ZSH plugin for pinning directories. Like a CLI folder bookmark manager with tab completions.\n\npip-app - Makes it easy to install python applications into distinct Python virtualenvs so they don't conflict with any other python requirements on your system.\n\npip-env - Automatic pipenv activation upon entry into a pipenv project.\n\npipe - Includes docker and package-related scripts.\n\npipenv (owenstranathan) - Automatically activates a pipenv when entering a directory if there is Pipfile in that directory. Includes pipenv completions.\n\npipenv (sudosubin) - Enables pipenv's $PATH and adds completions.\n\npipx - Autocompletions for pipx.\n\npkenv - Installs and loads pkenv.\n\nplenv - Plugin for the perl plenv version manager based on jenv.\n\nplugin-ibtool - Adds ibtool shortcuts to generate localized XIB files.\n\nplugin-rails - ZSH plugin for Rails.\n\nplugin-vscode - Plugin for Visual Studio Code, a text editor for macOS, Windows, and Linux.\n\nplugin - Creates custom oh-my-zsh plugins from a boilerplate template. Very oh-my-zsh centric, the generated plugins will need editing to work with other frameworks.\n\npnpm (baliestri) - Adds useful aliases for many common pnpm commands. Includes tab-completions.\n\npnpm (leizhenpeng) - Adds useful aliases for common pnpm commands.\n\npnpm (mat2ja) - Better pnpm aliases.\n\npnpm (ntnyq) - Adds useful aliases for common pnpm commands.\n\npoetry (darvid) - Automatically activates and deactivates Poetry-created python virtualenvs.\n\npoetry (sudosabin) - Enables poetry $PATH and autocompletions.\n\npopman - Ever found yourself in the middle of composing a long command and needing to check a man page? Popman lets you instantly pop open a man page for any command you're typing and jump right back to where you left off, making your command-line experience smoother and more efficient.\n\nportal - A very basic script for jumping to/from paths without having to do write the whole path, open multiple terminal sessions or do a file system search using fzf. Heavily inspired by Z.\n\nposh-git-bash - Adds git status in your prompt.\n\nppsmon - Reads /sys/class/net/$interface/ to keep track of packet transmission rates. It stores the current rate to a file in the RAM backed filesystem where it can be easily accessed for display in a shell-prompt. Linux-only due to use of /sys.\n\npr-cwd - Creates a global variable with current working directory. Plugin has integration with jocelynmallon/zshmarks.\n\npr-eol - Displays an EOL symbol which can be embedded in the prompt.\n\npr-exec-time - Adds a variable you can use to display the execution time of the last command run.\n\npr-git - Creates a global variable with git status information that can be displayed in prompts.\n\npr-is-root - Sets an environment variable you can use in a custom prompt when running as root.\n\npr-jobs - Creates an environment variable which can be used to display background job information in a custom prompt.\n\npr-node - Sets an environment variable which can be used to display Node.js information in a custom prompt.\n\npr-return - Plugin for ZSH which displays the exit status of the last command run.\n\npr-user - Creates a global variable that can be used in prompts.\n\npresenter-mode - Expands aliases during presentations. It also increases the terminal window's contrast to enhance visibility.\n\npretty-time (sindresorhus) - Convert seconds to a human readable string: 165392 ‚Üí 1d 21h 56m 32s.\n\npretty-time (zpm-zsh) - Converts raw seconds into human-readable strings.\n\nprettyping - Adds a wrapper around the standard ping tool with the objective of making the output prettier, more colorful, more compact, and easier to read.\n\nprezto-last-working-dir - Keeps track of the last used working directory and automatically jumps into it for new shells, unless the starting directory is not $HOME. Includes a lwd alias.\n\nprint-alias - Prints commands with aliases expanded whenever you use an alias at the command line.\n\nprintc - Allows you to print in any color in the RGB space via a simple printc call.\n\nprintdocker - Pretty print docker objects.\n\nprofile-secrets - Securely keep sensitive variables (api tokens, passwords, etc) as part of your terminal init files. Uses gpg to encrypt/decrypt the file with your secrets.\n\nproject (gko) - Create node/python/ruby projects both locally and on GitHub (private or public repository).\n\nproject (voronkovich) - Plugin for managing projects.\n\nprojen - Adds aliases for projen.\n\nprompt-dir-perms - Creates a segment displaying the permissions of the current directory you can use in your ZSH prompt.\n\nprompt-generator - Generates custom themes. Some generated themes require powerline-compatible fonts.\n\nproxy-plugin - Quickly enable and disable proxy shell environment settings.\n\nproxy - Configure proxy settings for some package managers and software.\n\npsgrep - Makes ps grep hide its own process from the results of a ps aux | grep.\n\npurge-history-secrets - Uses gitleaks to periodically scan your ZSH history for secrets and purge them if found. Requires jq.\n\npwp - Provides a convenient way to display the present working path in the terminal prompt and lists the current working directory along with its parent directories. Additionally, it includes a custom command .. to navigate to parent directories easily.\n\npyenv (mattberther) - Inspired by zsh-rbenv. Installs, updates or loads pyenv, and adds extra functionality.\n\npyenv (twopizza9621536) - Based on the oh-my-zsh pyenv plugin with modifications from the rbenv and jenv plugins.\n\npyenv (xlshiz) - Loads pyenv into the current shell and provides prompt info via the pyenv_prompt_info function. Also loads pyenv-virtualenv if available.\n\npyenv-lazy-load - Plugin for lazy-loading pyenv in ZSH.\n\npyenv-lazy - Lazy load pyenv. The initial eval \"$(pyenv init -)\" is executed the first time pyenv is called.\n\npyvenv-fast - Launch a Python venv with one command. Designed for use with dotpyvenv.\n\nq (cal2195) - Add vim-like macro registers to your ZSH shell.\n\nq (tomsquest) - Tail/remove the temp file for Q, the Dirty Debugging Tool.\n\nqiime2 - Adds functions and aliases to make working with Quiime 2 easier.\n\nquoter - Display a random quote when opening a new terminal session.\n\nquotify - Displays inspiring coding quotes from our pairs when starting up.\n\nqwy - ZSH fuzzy completion plugin.\n\nrandeme - Chooses a random theme for each session. If you not like the chosen theme you can run randeme_rm to never show that theme again.\n\nrandom-quotes - Displays random quotes or facts.\n\nranger (niziL) - provide prompt element for ranger. Shows current RANGER_LEVEL, displaying nothing when the environment variable is unset, something when it is equals to 1, and something else when it is greater than 1.\n\nranger (rc2dev) - Integrates zsh-z into ranger.\n\nranger-autojump - Adds autojump support to the ranger console file manager.\n\nraspberryPi4Temperature - Puts the Raspberry Pi temperature into a spaceship prompt segment\n\nrazer-status-code - Change the colour of your Razer Mouse based on the status of the last executed command. Requires OpenRazer linux drivers.\n\nrbenv (elliottcable) - A faster fork of the rbenv plugin from oh-my-zsh.\n\nrbenv (jsahlen) - Variant based on the original oh-my-zsh rbenv plugin.\n\nrbenv (meroje) - Inspired by https://github.com/lukechilds/zsh-nvm/, makes it easier to work with ruby rbenv environments.\n\nrc-files - Adds shortcut functions for editing various rc files.\n\nrecall - Makes using command history easier.\n\nredis - Will run redis-server pointing it to the redis.conf configuration file. This can be used with the zdharma/zredis plugin to share variables between shells.\n\nredo - Adds an interactive history menu to replace Ctrl-R and ESC+/.\n\nreentry-hook - Plugin that re-enters working directory if it has been removed and re-created.\n\nreload - Adds function to quickly reload your .zshrc.\n\nreminder - A plugin which displays reminders above every prompt.\n\nreplace-multiple-dots - Converts ... to ../..\n\nrequire - Adds ability to require commandname and then (if brew is installed) automatically brew install commandname if it isn't already installed.\n\nrevolver - A progress spinner for ZSH scripts.\n\nriddle-me - Displays random riddles.\n\nripz - Reminds you of your aliases, so you use them more. Depends on ripgrep.\n\nrobo - A ZSH plugin for Robo.\n\nrockz - Lua + LuaRocks virtual environment manager based upon VirtualZ.\n\nros2-env - Manage ROS 2 environment and workspaces.\n\nrun-scripts - Runs scripts from package.json.\n\nrust (cowboyd) - Configure your rust toolchain, installing rustup if it is not currently installed already.\n\nrust (wintermi) - Plugin for the rust toolchain.\n\nrvm - Initiates rvm and adds rubygem binaries (like compass) accessible in the user's $PATH.\n\nsafe-kubectl - Add some safety when running kubectl by warning what context you're in after a definable number of seconds since the last kubectl command.\n\nsafe-paste - A safe-paste plugin. See Conrad Irwin's bracketed-paste blog post.\n\nsafe-rm - Add safe-rm functionality so that rm will put files in your OS' trash instead of permanently deleting them.\n\nsail - Adds convenience aliases for sail.\n\nsaml2aws-auto - When using multiple AWS profiles, e.g. different accounts for your stages (development, pre-prod, prod), can be used to determine which profile is currently exported and if the token is still valid.\n\nsaml2aws - Add support for saml2aws.\n\nsandboxd - Speed up your .zshrc & shell startup with lazy-loading by only running setup commands (e.g. eval \"$(rbenv init -)\", etc) when you need them.\n\nsaneopt - Sane defaults for ZSH options, in the spirit of vim-sensible.\n\nsb-upgrade - Script to automatically update apps on a seedbox.\n\nschroot - Show current chroot name in your prompt.\n\nsdkman - Installs sdkman and adds completions and aliases for it.\n\nsealion - Allows you to set reminders that will appear in your terminal when your prompt is refreshed.\n\nsearch-directory-history - Allows complex search of per-directory history created using the per-directory-history plugin.\n\nsed-sub - Adds keybindings to do global search and replace on current command line.\n\nselect-history-skim Rummage through your history with skim.\n\nselect-with-lf - Lets user select files or a directory using lf.\n\nselect - Multi-term searched selection list with approximate matching and uniq mode.\n\nselector - Make it easy to create selection menus.\n\nsend - Single command to git add, git commit, and git push for much faster git workflow.\n\nsensei-git - Adds many git aliases and helper shell functions.\n\nsenv - Report presence of sensitive environment variables in the prompt\n\nsession-sauce - An fzf interface for tmux session creation and management for all your projects.\n\nsetenv - Runs a script when you change directories.\n\nsetpath - Adds some local paths to your fpath and $PATH.\n\nshelf - Utility which can be used to bookmark and access directly any file using mnemonics.\n\nshell-fns - Includes git, neovim, npm, pip extended functionality.\n\nshellcolor - Changes the terminal background color based on the presence of a .shellcolor in the current directory.\n\nshellfirm - Shellfirm is a handy utility to help avoid running dangerous commands without an extra step of approval. When risky patterns is detected you will immediately get a small prompt challenge that will verify your action.\n\nshift-select - Emacs shift-select mode for ZSH - select text in the command line using Shift, as in many text editors, browsers and other GUI programs.\n\nshortcuts - Enhance your terminal productivity with the Shortcuts plugin for oh-my-zsh. Easily manage command shortcuts with robust features.\n\nshow-git-user - When you need to work with multiple git users on the same machine this plugin will show which git user name is active in your prompt.\n\nshow-path - Provides a function shows the $PATH line by line.\n\nsimpleserver - Plugin to easily start python SimpleHTTPServer and SimpleHTTPSServer.\n\nsingularityenv - Provides a singularityenv_prompt_info function which returns the current singularity environment name\n\nskaffold - ZSH integration and completions for skaffold local kubernetes development environment.\n\nskim (casonadams) - Tries to determine where skim is installed, then enables its fuzzy auto-completion and key bindings.\n\nskim (hackerchai) - Adds support for skim\n\nslugify - Converts filenames and directories to a web friendly format.\n\nsmart-cd - Runs ls and git status after chpwd.\n\nsmartcache - Caches command output to speed up shell startup time.\n\nsmartinput - When you type brackets or quotes, the corresponding end brackets/quotes are automatically added.\n\nsmile - Adds function to display random smileys.\n\nsnippets - Command line snippet expansion.\n\nsolarized-man - A modified version of oh-my-zsh's plugin colored-man-pages, optimized for the solarized dark theme in the terminal.\n\nspaceship-ocm - Queries your OpenShift Cluster Manager (ocm) configuration to show which environment you're connected to. Requires NerdFont in your terminal.\n\nspack - Includes some useful aliases and functions for loading/unloading Spack-generated modules. As it makes use of the module command it is much more efficient than spack load.\n\nssh-connect - A simple ssh manager.\n\nssh-plugin - Plugin for ssh.\n\nssh-quickconnect - Simple utility to quickly connect to hosts from your ssh config & known_hosts file.\n\nsshukh - Will update your known_hosts file when you ssh into a server.\n\nstartify - Shows recently used vim files, shell-util files, active tmux sessions, recently-run git commands and more.\n\nstartup-timer - Print the time it takes for the shell to start up.\n\nstashy - Plugin that simplifies using git stash.\n\nstatify - Plugin that does basic statistical analysis.\n\nsublime - Same as the official Sublime plugin for Oh My Zsh, but this opens files in the current Sublime window, if there is one already open.\n\nsudo (hcgraf) - The sudo plugin from oh-my-zsh, extracted to a standalone. Toggles sudo before the current/previous command by pressing *ESC-ESC- in emacs-mode or vi-command mode.\n\nsudo (none9632) - Adds sudo as a prefix to the current command by typing ESC-ESC.\n\nsuffix-alias - Directly open files in the shell using ZSH's suffix aliases.\n\nsussysh - Based on xiong-chiamiov.\n\nsvn-n-zsh - Rewrite of the stock oh-my-zsh svn plugin.\n\nswitch-git - Easy switching between git repositories. Just type sgr <some part of you repo's name>, press enter and you're there.\n\nsymfony (voronkovich) - ZSH plugin for Symfony.\n\nsyntax-highlighting-filetypes - ZSH syntax highlighting with dircolors in realtime.\n\nsyntax-highlighting - Add syntax highlighting to your ZSH. Make sure you load this before zsh-users/zsh-history-substring-search or they will both break.\n\nsys-diver - A ZSH plugin for directory change or editor startup with only key operations using widgets without typing commands.\n\nsysadmin-util - Steve Kemp's collection of tool scripts for sysadmins.\n\nsystem-clipboard - Adds key bindings support for ZLE (Zsh Line Editor) clipboard operations for vi emulation keymaps. It works under Linux, macOS and Android (via Termux).\n\nsystemd - Adds many aliases for systemd.\n\nt32 - Plugin for the Lauterbach Trace32 toolset. It automatically registers fonts and sets all necessary environment variables to run the t32 toolset.\n\ntab-title (p1r473) - Rename tmux and screen panes and windows.\n\ntab-title (trystan2k) - Set the terminal tab title according to current directory or running process. Forked from termsupport.zsh.\n\ntailf - Adds tailf function with prefixed newlines instead of trailing newlines.\n\ntake - Replicates take from oh-my-zsh.\n\ntasko - Allows you to annotate TaskWarrior tasks.\n\ntelepresence - Add the current Telepresence connection status and context to your ZSH prompt.\n\nterminal-aliases - Adds convenience aliases for [terraform] [git] and more.\n\nterminal-app - A plugin for integrating with the new macOS El Capitan Terminal.app features.\n\nterminal-title - Adds a set-term-title function you can use to title terminal windows.\n\nterminal-workload-report - A plugin that calculates and displays how many commands have been run via terminal.\n\ntermux - Adds compatibility for Termux.\n\nterraform (hanjunlee) - Add terraform workspace to prompt.\n\nterraform (jsporna) - Extends the original oh-my-zsh plugin with aliases and tab completions. Adds workspace (when not default) to prompt.\n\nterraform (macunha1) - Add convenience aliases for terraform, tab completions and helper function to add your terraform workspace in the prompt.\n\nterraform (pbar1) - Terraform convenience functions and aliases for ZSH.\n\nterraform (ptavares) - Adds aliases, functions and tab completions. Also installs terraform-docs, tfsec and tflint.\n\nterraform (thuandt) - Adds convenience aliases for terraform, along with completions for terraform and terragrunt.\n\nterragrunt - Plugin for Terragrunt, a thin wrapper for Terraform that provides extra tools.\n\ntfenv - Installs, updates, and loads tfenv inspired by zsh-pyenv\n\ntfswitch - Installs and loads tfswitch.\n\ntgenv - Installs and loads tgenv. Includes a function to manually update tgenv.\n\ntgswitch - Installs and loads tgswitch.\n\nthefuck - Loads thefuck (a tool which corrects your previous command) with cache support, which reduces the loading time dramatically.\n\ntheia-dev-tools - Convenience functions for working with theia-ide.\n\ntig - Adds a few advanced bindings for tig and also provides a tig-pick script.\n\ntimewarrior - Adds support for timewarrior, a time-tracking application.\n\ntinted-shell - Adds a script to allow you to change your shell's default ANSI colors but most importantly, colors 17 to 21 of your shell's 256 colorspace (if supported by your terminal). This script makes it possible to honor the original bright colors of your shell (e.g. bright green is still green and so on) while providing additional base16 colors to applications such as Vim.\n\ntipz - Displays your alias if you have an alias for the command you just ran, similarly to alias-tips.\n\ntitle - Allows you to set a terminal window title.\n\ntitles - Automatic window and tab titles for tmux and xterm-compatible terminals.\n\ntm - Simplifies creating new tmux sessions, attaching to existing sessions, switching between sessions, and listing active sessions.\n\ntmux-auto-title - Automatically sets the title of windows/panes as the current foreground command.\n\ntmux-rename - Rename tmux windows automatically.\n\ntmux-simple - Simple plugin for using tmux with ZSH.\n\ntmux-vim-integration - Open files in a running vim (or NeoVim) session, from an adjacent tmux pane.\n\ntmux-zsh-vim-titles - Create unified terminal titles for tmux, ZSH, and Vim/NVIM, modular.\n\ntmux - Plugin for tmux.\n\ntmuxrepl - Simple ZSH plugin to have a R-EP-L tmux session.\n\ntodotxt - Adds aliases for todo.sh.\n\ntoggl - Adds a toggl-week command to display the total working hours tracked on toggl.com\n\ntoggle-command-prefix - Add a widget to toggle a prefix to a command. Binds Alt+s to prefix a command with sudo by default.\n\ntoolbox - Automagically updates homebrew plugins. Allows enabling/disabling notice during startup and alias setup.\n\ntouchplus - Create files with touch including the path.\n\ntraista - Includes git status decorations and color-coded exit status of the last command run. Better with dark terminal themes.\n\ntravis - Opens the Travis CI page for the current repo if one exists.\n\ntre - Makes using tre easier.\n\ntsm - Adds a tmux Session Manager.\n\ntumult - Adds tools for macOS.\n\nubuntualiases - Ubuntu 16 aliases.\n\nugit - Lets you undo your last git operation.\n\nuncloudium - Adds helper script to download crx files from the Google Chrome web store.\n\nundollar - Strips the dollar sign from the beginning of the terminal prompt.\n\nunique-id - Provides a unique number that identifies a running Zshell session, in its shell variable $ZUID_ID. Besides this unique number, also a unique codename is provided, in shell variable $ZUID_CODENAME. An example use case is to hold logs in files .../mylog-${ZUID_CODENAME}.log, so that two different Zshells will not write to the same file at the same time.\n\nunix-simple - A command that shows a graphic about the simplicity of unix.\n\nunwrap - Allows you to remove a directory without removing the contents - it puts them in the directory's parent directory.\n\nup (cjayross) - A simple way to navigate up through directories.\n\nup (peterhurford) - Adds an up command to cd multip"
    }
}