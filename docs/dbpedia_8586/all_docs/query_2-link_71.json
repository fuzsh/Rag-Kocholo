{
    "id": "dbpedia_8586_2",
    "rank": 71,
    "data": {
        "url": "https://docs.yoctoproject.org/ref-manual/variables.html",
        "read_more_link": "",
        "language": "en",
        "title": "12 Variables Glossary — The Yocto Project Â® 5.0.999 documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.yoctoproject.org/_static/YoctoProject_Logo_RGB.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "ABIEXTENSIONï\n\nExtension to the Application Binary Interface (ABI) field of the GNU canonical architecture name (e.g. âeabiâ).\n\nABI extensions are set in the machine include files. For example, the meta/conf/machine/include/arm/arch-arm.inc file sets the following extension:\n\nABIEXTENSION = \"eabi\"\n\nALLOW_EMPTYï\n\nSpecifies whether to produce an output package even if it is empty. By default, BitBake does not produce empty packages. This default behavior can cause issues when there is an RDEPENDS or some other hard runtime requirement on the existence of the package.\n\nLike all package-controlling variables, you must always use them in conjunction with a package name override, as in:\n\nALLOW_EMPTY:${PN} = \"1\" ALLOW_EMPTY:${PN}-dev = \"1\" ALLOW_EMPTY:${PN}-staticdev = \"1\"\n\nALTERNATIVEï\n\nLists commands in a package that need an alternative binary naming scheme. Sometimes the same command is provided in multiple packages. When this occurs, the OpenEmbedded build system needs to use the alternatives system to create a different binary naming scheme so the commands can co-exist.\n\nTo use the variable, list out the packageâs commands that are also provided by another package. For example, if the busybox package has four such commands, you identify them as follows:\n\nALTERNATIVE:busybox = \"sh sed test bracket\"\n\nFor more information on the alternatives system, see the âupdate-alternativesâ section.\n\nALTERNATIVE_LINK_NAMEï\n\nUsed by the alternatives system to map duplicated commands to actual locations. For example, if the bracket command provided by the busybox package is duplicated through another package, you must use the ALTERNATIVE_LINK_NAME variable to specify the actual location:\n\nALTERNATIVE_LINK_NAME[bracket] = \"/usr/bin/[\"\n\nIn this example, the binary for the bracket command (i.e. [) from the busybox package resides in /usr/bin/.\n\nNote\n\nIf ALTERNATIVE_LINK_NAME is not defined, it defaults to ${bindir}/name.\n\nFor more information on the alternatives system, see the âupdate-alternativesâ section.\n\nALTERNATIVE_PRIORITYï\n\nUsed by the alternatives system to create default priorities for duplicated commands. You can use the variable to create a single default regardless of the command name or package, a default for specific duplicated commands regardless of the package, or a default for specific commands tied to particular packages. Here are the available syntax forms:\n\nALTERNATIVE_PRIORITY = \"priority\" ALTERNATIVE_PRIORITY[name] = \"priority\" ALTERNATIVE_PRIORITY_pkg[name] = \"priority\"\n\nFor more information on the alternatives system, see the âupdate-alternativesâ section.\n\nALTERNATIVE_TARGETï\n\nUsed by the alternatives system to create default link locations for duplicated commands. You can use the variable to create a single default location for all duplicated commands regardless of the command name or package, a default for specific duplicated commands regardless of the package, or a default for specific commands tied to particular packages. Here are the available syntax forms:\n\nALTERNATIVE_TARGET = \"target\" ALTERNATIVE_TARGET[name] = \"target\" ALTERNATIVE_TARGET_pkg[name] = \"target\"\n\nNote\n\nIf ALTERNATIVE_TARGET is not defined, it inherits the value from the ALTERNATIVE_LINK_NAME variable.\n\nIf ALTERNATIVE_LINK_NAME and ALTERNATIVE_TARGET are the same, the target for ALTERNATIVE_TARGET has â.{BPN}â appended to it.\n\nFinally, if the file referenced has not been renamed, the alternatives system will rename it to avoid the need to rename alternative files in the do_install task while retaining support for the command if necessary.\n\nFor more information on the alternatives system, see the âupdate-alternativesâ section.\n\nANY_OF_DISTRO_FEATURESï\n\nWhen inheriting the features_check class, this variable identifies a list of distribution features where at least one must be enabled in the current configuration in order for the OpenEmbedded build system to build the recipe. In other words, if none of the features listed in ANY_OF_DISTRO_FEATURES appear in DISTRO_FEATURES within the current configuration, then the recipe will be skipped, and if the build system attempts to build the recipe then an error will be triggered.\n\nAPPENDï\n\nAn override list of append strings for each target specified with LABELS.\n\nSee the grub-efi class for more information on how this variable is used.\n\nARï\n\nThe minimal command and arguments used to run ar.\n\nARCHIVER_MODEï\n\nWhen used with the archiver class, determines the type of information used to create a released archive. You can use this variable to create archives of patched source, original source, configured source, and so forth by employing the following variable flags (varflags):\n\nARCHIVER_MODE[src] = \"original\" # Uses original (unpacked) source files. ARCHIVER_MODE[src] = \"patched\" # Uses patched source files. This is the default. ARCHIVER_MODE[src] = \"configured\" # Uses configured source files. ARCHIVER_MODE[diff] = \"1\" # Uses patches between do_unpack and do_patch. ARCHIVER_MODE[diff-exclude] ?= \"file file ...\" # Lists files and directories to exclude from diff. ARCHIVER_MODE[dumpdata] = \"1\" # Uses environment data. ARCHIVER_MODE[recipe] = \"1\" # Uses recipe and include files. ARCHIVER_MODE[srpm] = \"1\" # Uses RPM package files.\n\nFor information on how the variable works, see the meta/classes/archiver.bbclass file in the Source Directory.\n\nASï\n\nMinimal command and arguments needed to run the assembler.\n\nASSUME_PROVIDEDï\n\nLists recipe names (PN values) BitBake does not attempt to build. Instead, BitBake assumes these recipes have already been built.\n\nIn OpenEmbedded-Core, ASSUME_PROVIDED mostly specifies native tools that should not be built. An example is git-native, which when specified, allows for the Git binary from the host to be used rather than building git-native.\n\nASSUME_SHLIBSï\n\nProvides additional shlibs provider mapping information, which adds to or overwrites the information provided automatically by the system. Separate multiple entries using spaces.\n\nAs an example, use the following form to add an shlib provider of shlibname in packagename with the optional version:\n\nshlibname:packagename[_version]\n\nHere is an example that adds a shared library named libEGL.so.1 as being provided by the libegl-implementation package:\n\nASSUME_SHLIBS = \"libEGL.so.1:libegl-implementation\"\n\nAUTO_LIBNAME_PKGSï\n\nWhen the debian class is inherited, which is the default behavior, AUTO_LIBNAME_PKGS specifies which packages should be checked for libraries and renamed according to Debian library package naming.\n\nThe default value is â${PACKAGES}â, which causes the debian class to act on all packages that are explicitly generated by the recipe.\n\nAUTO_SYSLINUXMENUï\n\nEnables creating an automatic menu for the syslinux bootloader. You must set this variable in your recipe. The syslinux class checks this variable.\n\nAUTOREVï\n\nWhen SRCREV is set to the value of this variable, it specifies to use the latest source revision in the repository. Here is an example:\n\nSRCREV = \"${AUTOREV}\"\n\nIf you use the previous statement to retrieve the latest version of software, you need to be sure PV contains ${SRCPV}. For example, suppose you have a kernel recipe that inherits the kernel class and you use the previous statement. In this example, ${SRCPV} does not automatically get into PV. Consequently, you need to change PV in your recipe so that it does contain ${SRCPV}.\n\nFor more information see the âAutomatically Incrementing a Package Version Numberâ section in the Yocto Project Development Tasks Manual.\n\nAVAILTUNESï\n\nThe list of defined CPU and Application Binary Interface (ABI) tunings (i.e. âtunesâ) available for use by the OpenEmbedded build system.\n\nThe list simply presents the tunes that are available. Not all tunes may be compatible with a particular machine configuration, or with each other in a Multilib configuration.\n\nTo add a tune to the list, be sure to append it with spaces using the â+=â BitBake operator. Do not simply replace the list by using the â=â operator. See the âBasic Syntaxâ section in the BitBake User Manual for more information.\n\nAZ_SASï\n\nAzure Storage Shared Access Signature, when using the Azure Storage fetcher (az://) This variable can be defined to be used by the fetcher to authenticate and gain access to non-public artifacts:\n\nAZ_SAS = \"\"se=2021-01-01&sp=r&sv=2018-11-09&sr=c&skoid=<skoid>&sig=<signature>\"\"\n\nFor more information see Microsoftâs Azure Storage documentation at https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview\n\nBï\n\nThe directory within the Build Directory in which the OpenEmbedded build system places generated objects during a recipeâs build process. By default, this directory is the same as the S directory, which is defined as:\n\nS = \"${WORKDIR}/${BP}\"\n\nYou can separate the (S) directory and the directory pointed to by the B variable. Most Autotools-based recipes support separating these directories. The build system defaults to using separate directories for gcc and some kernel recipes.\n\nBAD_RECOMMENDATIONSï\n\nLists ârecommended-onlyâ packages to not install. Recommended-only packages are packages installed only through the RRECOMMENDS variable. You can prevent any of these ârecommendedâ packages from being installed by listing them with the BAD_RECOMMENDATIONS variable:\n\nBAD_RECOMMENDATIONS = \"package_name package_name package_name ...\"\n\nYou can set this variable globally in your local.conf file or you can attach it to a specific image recipe by using the recipe name override:\n\nBAD_RECOMMENDATIONS:pn-target_image = \"package_name\"\n\nIt is important to realize that if you choose to not install packages using this variable and some other packages are dependent on them (i.e. listed in a recipeâs RDEPENDS variable), the OpenEmbedded build system ignores your request and will install the packages to avoid dependency errors.\n\nThis variable is supported only when using the IPK and RPM packaging backends. DEB is not supported.\n\nSee the NO_RECOMMENDATIONS and the PACKAGE_EXCLUDE variables for related information.\n\nBASE_LIBï\n\nThe library directory name for the CPU or Application Binary Interface (ABI) tune. The BASE_LIB applies only in the Multilib context. See the âCombining Multiple Versions of Library Files into One Imageâ section in the Yocto Project Development Tasks Manual for information on Multilib.\n\nThe BASE_LIB variable is defined in the machine include files in the Source Directory. If Multilib is not being used, the value defaults to âlibâ.\n\nBASE_WORKDIRï\n\nPoints to the base of the work directory for all recipes. The default value is â${TMPDIR}/workâ.\n\nBB_ALLOWED_NETWORKSï\n\nSpecifies a space-delimited list of hosts that the fetcher is allowed to use to obtain the required source code. Here are considerations surrounding this variable:\n\nThis host list is only used if BB_NO_NETWORK is either not set or set to â0â.\n\nThere is limited support for wildcard matching against the beginning of host names. For example, the following setting matches git.gnu.org, ftp.gnu.org, and foo.git.gnu.org:\n\nBB_ALLOWED_NETWORKS = \"*.gnu.org\"\n\nNote\n\nThe use of the â*â character only works at the beginning of a host name and it must be isolated from the remainder of the host name. You cannot use the wildcard character in any other location of the name or combined with the front part of the name.\n\nFor example, *.foo.bar is supported, while *aa.foo.bar is not.\n\nMirrors not in the host list are skipped and logged in debug.\n\nAttempts to access networks not in the host list cause a failure.\n\nUsing BB_ALLOWED_NETWORKS in conjunction with PREMIRRORS is very useful. Adding the host you want to use to PREMIRRORS results in the source code being fetched from an allowed location and avoids raising an error when a host that is not allowed is in a SRC_URI statement. This is because the fetcher does not attempt to use the host listed in SRC_URI after a successful fetch from the PREMIRRORS occurs.\n\nBB_BASEHASH_IGNORE_VARSï\n\nSee BB_BASEHASH_IGNORE_VARS in the BitBake manual.\n\nBB_CACHEDIRï\n\nSee BB_CACHEDIR in the BitBake manual.\n\nBB_CHECK_SSL_CERTSï\n\nSee BB_CHECK_SSL_CERTS in the BitBake manual.\n\nBB_CONSOLELOGï\n\nSee BB_CONSOLELOG in the BitBake manual.\n\nBB_CURRENTTASKï\n\nSee BB_CURRENTTASK in the BitBake manual.\n\nBB_DANGLINGAPPENDS_WARNONLYï\n\nDefines how BitBake handles situations where an append file (.bbappend) has no corresponding recipe file (.bb). This condition often occurs when layers get out of sync (e.g. oe-core bumps a recipe version and the old recipe no longer exists and the other layer has not been updated to the new version of the recipe yet).\n\nThe default fatal behavior is safest because it is the sane reaction given something is out of sync. It is important to realize when your changes are no longer being applied.\n\nYou can change the default behavior by setting this variable to â1â, âyesâ, or âtrueâ in your local.conf file, which is located in the Build Directory: Here is an example:\n\nBB_DANGLINGAPPENDS_WARNONLY = \"1\"\n\nBB_DEFAULT_TASKï\n\nSee BB_DEFAULT_TASK in the BitBake manual.\n\nBB_DEFAULT_UMASKï\n\nSee BB_DEFAULT_UMASK in the BitBake manual.\n\nBB_DISKMON_DIRSï\n\nMonitors disk space and available inodes during the build and allows you to control the build based on these parameters.\n\nDisk space monitoring is disabled by default. To enable monitoring, add the BB_DISKMON_DIRS variable to your conf/local.conf file found in the Build Directory. Use the following form:\n\nBB_DISKMON_DIRS = \"action,dir,threshold [...]\" where: action is: ABORT: Immediately stop the build when a threshold is broken. STOPTASKS: Stop the build after the currently executing tasks have finished when a threshold is broken. WARN: Issue a warning but continue the build when a threshold is broken. Subsequent warnings are issued as defined by the BB_DISKMON_WARNINTERVAL variable, which must be defined in the conf/local.conf file. dir is: Any directory you choose. You can specify one or more directories to monitor by separating the groupings with a space. If two directories are on the same device, only the first directory is monitored. threshold is: Either the minimum available disk space, the minimum number of free inodes, or both. You must specify at least one. To omit one or the other, simply omit the value. Specify the threshold using G, M, K for Gbytes, Mbytes, and Kbytes, respectively. If you do not specify G, M, or K, Kbytes is assumed by default. Do not use GB, MB, or KB.\n\nHere are some examples:\n\nBB_DISKMON_DIRS = \"ABORT,${TMPDIR},1G,100K WARN,${SSTATE_DIR},1G,100K\" BB_DISKMON_DIRS = \"STOPTASKS,${TMPDIR},1G\" BB_DISKMON_DIRS = \"ABORT,${TMPDIR},,100K\"\n\nThe first example works only if you also provide the BB_DISKMON_WARNINTERVAL variable in the conf/local.conf. This example causes the build system to immediately stop when either the disk space in ${TMPDIR} drops below 1 Gbyte or the available free inodes drops below 100 Kbytes. Because two directories are provided with the variable, the build system also issue a warning when the disk space in the ${SSTATE_DIR} directory drops below 1 Gbyte or the number of free inodes drops below 100 Kbytes. Subsequent warnings are issued during intervals as defined by the BB_DISKMON_WARNINTERVAL variable.\n\nThe second example stops the build after all currently executing tasks complete when the minimum disk space in the ${TMPDIR} directory drops below 1 Gbyte. No disk monitoring occurs for the free inodes in this case.\n\nThe final example immediately stops the build when the number of free inodes in the ${TMPDIR} directory drops below 100 Kbytes. No disk space monitoring for the directory itself occurs in this case.\n\nBB_DISKMON_WARNINTERVALï\n\nDefines the disk space and free inode warning intervals. To set these intervals, define the variable in your conf/local.conf file in the Build Directory.\n\nIf you are going to use the BB_DISKMON_WARNINTERVAL variable, you must also use the BB_DISKMON_DIRS variable and define its action as âWARNâ. During the build, subsequent warnings are issued each time disk space or number of free inodes further reduces by the respective interval.\n\nIf you do not provide a BB_DISKMON_WARNINTERVAL variable and you do use BB_DISKMON_DIRS with the âWARNâ action, the disk monitoring interval defaults to the following:\n\nBB_DISKMON_WARNINTERVAL = \"50M,5K\"\n\nWhen specifying the variable in your configuration file, use the following form:\n\nBB_DISKMON_WARNINTERVAL = \"disk_space_interval,disk_inode_interval\" where: disk_space_interval is: An interval of memory expressed in either G, M, or K for Gbytes, Mbytes, or Kbytes, respectively. You cannot use GB, MB, or KB. disk_inode_interval is: An interval of free inodes expressed in either G, M, or K for Gbytes, Mbytes, or Kbytes, respectively. You cannot use GB, MB, or KB.\n\nHere is an example:\n\nBB_DISKMON_DIRS = \"WARN,${SSTATE_DIR},1G,100K\" BB_DISKMON_WARNINTERVAL = \"50M,5K\"\n\nThese variables cause the OpenEmbedded build system to issue subsequent warnings each time the available disk space further reduces by 50 Mbytes or the number of free inodes further reduces by 5 Kbytes in the ${SSTATE_DIR} directory. Subsequent warnings based on the interval occur each time a respective interval is reached beyond the initial warning (i.e. 1 Gbytes and 100 Kbytes).\n\nBB_ENV_PASSTHROUGHï\n\nSee BB_ENV_PASSTHROUGH in the BitBake manual.\n\nBB_ENV_PASSTHROUGH_ADDITIONSï\n\nSee BB_ENV_PASSTHROUGH_ADDITIONS in the BitBake manual.\n\nBB_FETCH_PREMIRRORONLYï\n\nSee BB_FETCH_PREMIRRORONLY in the BitBake manual.\n\nBB_FILENAMEï\n\nSee BB_FILENAME in the BitBake manual.\n\nBB_GENERATE_MIRROR_TARBALLSï\n\nCauses tarballs of the source control repositories (e.g. Git repositories), including metadata, to be placed in the DL_DIR directory.\n\nFor performance reasons, creating and placing tarballs of these repositories is not the default action by the OpenEmbedded build system:\n\nBB_GENERATE_MIRROR_TARBALLS = \"1\"\n\nSet this variable in your local.conf file in the Build Directory.\n\nOnce you have the tarballs containing your source files, you can clean up your DL_DIR directory by deleting any Git or other source control work directories.\n\nBB_GENERATE_SHALLOW_TARBALLSï\n\nSee BB_GENERATE_SHALLOW_TARBALLS in the BitBake manual.\n\nBB_GIT_SHALLOWï\n\nSee BB_GIT_SHALLOW in the BitBake manual.\n\nBB_GIT_SHALLOW_DEPTHï\n\nSee BB_GIT_SHALLOW_DEPTH in the BitBake manual.\n\nBB_HASHCHECK_FUNCTIONï\n\nSee BB_HASHCHECK_FUNCTION in the BitBake manual.\n\nBB_HASHCONFIG_IGNORE_VARSï\n\nSee BB_HASHCONFIG_IGNORE_VARS in the BitBake manual.\n\nBB_HASHSERVEï\n\nSee BB_HASHSERVE in the BitBake manual.\n\nBB_HASHSERVE_UPSTREAMï\n\nSee BB_HASHSERVE_UPSTREAM in the BitBake manual.\n\nBB_INVALIDCONFï\n\nSee BB_INVALIDCONF in the BitBake manual.\n\nBB_LOADFACTOR_MAXï\n\nThe system load threshold above which BitBake will stop runnig extra tasks.\n\nBB_LOGCONFIGï\n\nSee BB_LOGCONFIG in the BitBake manual.\n\nBB_LOGFMTï\n\nSee BB_LOGFMT in the BitBake manual.\n\nBB_MULTI_PROVIDER_ALLOWEDï\n\nSee BB_MULTI_PROVIDER_ALLOWED in the BitBake manual.\n\nBB_NICE_LEVELï\n\nSee BB_NICE_LEVEL in the BitBake manual.\n\nBB_NO_NETWORKï\n\nSee BB_NO_NETWORK in the BitBake manual.\n\nBB_NUMBER_PARSE_THREADSï\n\nSee BB_NUMBER_PARSE_THREADS in the BitBake manual.\n\nBB_NUMBER_THREADSï\n\nThe maximum number of tasks BitBake should run in parallel at any one time. The OpenEmbedded build system automatically configures this variable to be equal to the number of cores on the build system. For example, a system with a dual core processor that also uses hyper-threading causes the BB_NUMBER_THREADS variable to default to â4â.\n\nFor single socket systems (i.e. one CPU), you should not have to override this variable to gain optimal parallelism during builds. However, if you have very large systems that employ multiple physical CPUs, you might want to make sure the BB_NUMBER_THREADS variable is not set higher than â20â.\n\nFor more information on speeding up builds, see the âSpeeding Up a Buildâ section in the Yocto Project Development Tasks Manual.\n\nOn the other hand, if your goal is to limit the amount of system resources consumed by BitBake tasks, setting BB_NUMBER_THREADS to a number lower than the number of CPU threads in your machine wonât be sufficient. Thatâs because each package will still be built and installed through a number of parallel jobs specified by the PARALLEL_MAKE variable, which is by default the number of CPU threads in your system, and is not impacted by the BB_NUMBER_THREADS value.\n\nSo, if you set BB_NUMBER_THREADS to â1â but donât set PARALLEL_MAKE, most of your system resources will be consumed anyway.\n\nTherefore, if you intend to reduce the load of your build system by setting BB_NUMBER_THREADS to a relatively low value compared to the number of CPU threads on your system, you should also set PARALLEL_MAKE to a similarly low value.\n\nAn alternative to using BB_NUMBER_THREADS to keep the usage of build system resources under control is to use the smarter BB_PRESSURE_MAX_CPU, BB_PRESSURE_MAX_IO or BB_PRESSURE_MAX_MEMORY controls. They will prevent BitBake from starting new tasks as long as thresholds are exceeded. Anyway, as with BB_NUMBER_THREADS, such controls wonât prevent the tasks already being run from using all CPU threads on the system if PARALLEL_MAKE is not set to a low value.\n\nBB_ORIGENVï\n\nSee BB_ORIGENV in the BitBake manual.\n\nBB_PRESERVE_ENVï\n\nSee BB_PRESERVE_ENV in the BitBake manual.\n\nBB_PRESSURE_MAX_CPUï\n\nSee BB_PRESSURE_MAX_CPU in the BitBake manual.\n\nBB_PRESSURE_MAX_IOï\n\nSee BB_PRESSURE_MAX_IO in the BitBake manual.\n\nBB_PRESSURE_MAX_MEMORYï\n\nSee BB_PRESSURE_MAX_MEMORY in the BitBake manual.\n\nBB_RUNFMTï\n\nSee BB_RUNFMT in the BitBake manual.\n\nBB_RUNTASKï\n\nSee BB_RUNTASK in the BitBake manual.\n\nBB_SCHEDULERï\n\nSee BB_SCHEDULER in the BitBake manual.\n\nBB_SCHEDULERSï\n\nSee BB_SCHEDULERS in the BitBake manual.\n\nBB_SERVER_TIMEOUTï\n\nSpecifies the time (in seconds) after which to unload the BitBake server due to inactivity. Set BB_SERVER_TIMEOUT to determine how long the BitBake server stays resident between invocations.\n\nFor example, the following statement in your local.conf file instructs the server to be unloaded after 20 seconds of inactivity:\n\nBB_SERVER_TIMEOUT = \"20\"\n\nIf you want the server to never be unloaded, set BB_SERVER_TIMEOUT to â-1â.\n\nBB_SETSCENE_DEPVALIDï\n\nSee BB_SETSCENE_DEPVALID in the BitBake manual.\n\nBB_SIGNATURE_EXCLUDE_FLAGSï\n\nSee BB_SIGNATURE_EXCLUDE_FLAGS in the BitBake manual.\n\nBB_SIGNATURE_HANDLERï\n\nSee BB_SIGNATURE_HANDLER in the BitBake manual.\n\nBB_SRCREV_POLICYï\n\nSee BB_SRCREV_POLICY in the BitBake manual.\n\nBB_STRICT_CHECKSUMï\n\nSee BB_STRICT_CHECKSUM in the BitBake manual.\n\nBB_TASK_IONICE_LEVELï\n\nSee BB_TASK_IONICE_LEVEL in the BitBake manual.\n\nBB_TASK_NICE_LEVELï\n\nSee BB_TASK_NICE_LEVEL in the BitBake manual.\n\nBB_TASKHASHï\n\nSee BB_TASKHASH in the BitBake manual.\n\nBB_VERBOSE_LOGSï\n\nSee BB_VERBOSE_LOGS in the BitBake manual.\n\nBB_WORKERCONTEXTï\n\nSee BB_WORKERCONTEXT in the BitBake manual.\n\nBBCLASSEXTENDï\n\nAllows you to extend a recipe so that it builds variants of the software. There are common variants for recipes as ânativesâ like quilt-native, which is a copy of Quilt built to run on the build system; âcrossesâ such as gcc-cross, which is a compiler built to run on the build machine but produces binaries that run on the target MACHINE; ânativesdkâ, which targets the SDK machine instead of MACHINE; and âmulitlibsâ in the form âmultilib:multilib_nameâ.\n\nTo build a different variant of the recipe with a minimal amount of code, it usually is as simple as adding the following to your recipe:\n\nBBCLASSEXTEND =+ \"native nativesdk\" BBCLASSEXTEND =+ \"multilib:multilib_name\"\n\nNote\n\nInternally, the BBCLASSEXTEND mechanism generates recipe variants by rewriting variable values and applying overrides such as :class-native. For example, to generate a native version of a recipe, a DEPENDS on âfooâ is rewritten to a DEPENDS on âfoo-nativeâ.\n\nEven when using BBCLASSEXTEND, the recipe is only parsed once. Parsing once adds some limitations. For example, it is not possible to include a different file depending on the variant, since include statements are processed when the recipe is parsed.\n\nBBDEBUGï\n\nSee BBDEBUG in the BitBake manual.\n\nBBFILE_COLLECTIONSï\n\nLists the names of configured layers. These names are used to find the other BBFILE_* variables. Typically, each layer will append its name to this variable in its conf/layer.conf file.\n\nBBFILE_PATTERNï\n\nVariable that expands to match files from BBFILES in a particular layer. This variable is used in the conf/layer.conf file and must be suffixed with the name of the specific layer (e.g. BBFILE_PATTERN_emenlow).\n\nBBFILE_PRIORITYï\n\nAssigns the priority for recipe files in each layer.\n\nThis variable is useful in situations where the same recipe appears in more than one layer. Setting this variable allows you to prioritize a layer against other layers that contain the same recipe â effectively letting you control the precedence for the multiple layers. The precedence established through this variable stands regardless of a recipeâs version (PV variable). For example, a layer that has a recipe with a higher PV value but for which the BBFILE_PRIORITY is set to have a lower precedence still has a lower precedence.\n\nA larger value for the BBFILE_PRIORITY variable results in a higher precedence. For example, the value 6 has a higher precedence than the value 5. If not specified, the BBFILE_PRIORITY variable is set based on layer dependencies (see the LAYERDEPENDS variable for more information. The default priority, if unspecified for a layer with no dependencies, is the lowest defined priority + 1 (or 1 if no priorities are defined).\n\nTip\n\nYou can use the command bitbake-layers show-layers to list all configured layers along with their priorities.\n\nBBFILESï\n\nA space-separated list of recipe files BitBake uses to build software.\n\nWhen specifying recipe files, you can pattern match using Pythonâs glob syntax. For details on the syntax, see the documentation by following the previous link.\n\nBBFILES_DYNAMICï\n\nActivates content when identified layers are present. You identify the layers by the collections that the layers define.\n\nUse the BBFILES_DYNAMIC variable to avoid .bbappend files whose corresponding .bb file is in a layer that attempts to modify other layers through .bbappend but does not want to introduce a hard dependency on those other layers.\n\nUse the following form for BBFILES_DYNAMIC: collection_name:filename_pattern.\n\nThe following example identifies two collection names and two filename patterns:\n\nBBFILES_DYNAMIC += \" \\ clang-layer:${LAYERDIR}/bbappends/meta-clang/*/*/*.bbappend \\ core:${LAYERDIR}/bbappends/openembedded-core/meta/*/*/*.bbappend \\ \"\n\nThis next example shows an error message that occurs because invalid entries are found, which cause parsing to fail:\n\nERROR: BBFILES_DYNAMIC entries must be of the form <collection name>:<filename pattern>, not: /work/my-layer/bbappends/meta-security-isafw/*/*/*.bbappend /work/my-layer/bbappends/openembedded-core/meta/*/*/*.bbappend\n\nBBINCLUDEDï\n\nSee BBINCLUDED in the BitBake manual.\n\nBBINCLUDELOGSï\n\nVariable that controls how BitBake displays logs on build failure.\n\nBBINCLUDELOGS_LINESï\n\nIf BBINCLUDELOGS is set, specifies the maximum number of lines from the task log file to print when reporting a failed task. If you do not set BBINCLUDELOGS_LINES, the entire log is printed.\n\nBBLAYERSï\n\nLists the layers to enable during the build. This variable is defined in the bblayers.conf configuration file in the Build Directory. Here is an example:\n\nBBLAYERS = \" \\ /home/scottrif/poky/meta \\ /home/scottrif/poky/meta-poky \\ /home/scottrif/poky/meta-yocto-bsp \\ /home/scottrif/poky/meta-mykernel \\ \"\n\nThis example enables four layers, one of which is a custom, user-defined layer named meta-mykernel.\n\nBBLAYERS_FETCH_DIRï\n\nSee BBLAYERS_FETCH_DIR in the BitBake manual.\n\nBBMASKï\n\nPrevents BitBake from processing recipes and recipe append files.\n\nYou can use the BBMASK variable to âhideâ these .bb and .bbappend files. BitBake ignores any recipe or recipe append files that match any of the expressions. It is as if BitBake does not see them at all. Consequently, matching files are not parsed or otherwise used by BitBake.\n\nThe values you provide are passed to Pythonâs regular expression compiler. Consequently, the syntax follows Pythonâs Regular Expression (re) syntax. The expressions are compared against the full paths to the files. For complete syntax information, see Pythonâs documentation at https://docs.python.org/3/library/re.html#regular-expression-syntax.\n\nThe following example uses a complete regular expression to tell BitBake to ignore all recipe and recipe append files in the meta-ti/recipes-misc/ directory:\n\nBBMASK = \"meta-ti/recipes-misc/\"\n\nIf you want to mask out multiple directories or recipes, you can specify multiple regular expression fragments. This next example masks out multiple directories and individual recipes:\n\nBBMASK += \"/meta-ti/recipes-misc/ meta-ti/recipes-ti/packagegroup/\" BBMASK += \"/meta-oe/recipes-support/\" BBMASK += \"/meta-foo/.*/openldap\" BBMASK += \"opencv.*\\.bbappend\" BBMASK += \"lzma\"\n\nNote\n\nWhen specifying a directory name, use the trailing slash character to ensure you match just that directory name.\n\nBBMULTICONFIGï\n\nSpecifies each additional separate configuration when you are building targets with multiple configurations. Use this variable in your conf/local.conf configuration file. Specify a multiconfigname for each configuration file you are using. For example, the following line specifies three configuration files:\n\nBBMULTICONFIG = \"configA configB configC\"\n\nEach configuration file you use must reside in a multiconfig subdirectory of a configuration directory within a layer, or within the Build Directory (e.g. build_directory/conf/multiconfig/configA.conf or mylayer/conf/multiconfig/configB.conf).\n\nFor information on how to use BBMULTICONFIG in an environment that supports building targets with multiple configurations, see the âBuilding Images for Multiple Targets Using Multiple Configurationsâ section in the Yocto Project Development Tasks Manual.\n\nBBPATHï\n\nSee BBPATH in the BitBake manual.\n\nBBSERVERï\n\nIf defined in the BitBake environment, BBSERVER points to the BitBake remote server.\n\nUse the following format to export the variable to the BitBake environment:\n\nexport BBSERVER=localhost:$port\n\nBy default, BBSERVER also appears in BB_BASEHASH_IGNORE_VARS. Consequently, BBSERVER is excluded from checksum and dependency data.\n\nBBTARGETSï\n\nSee BBTARGETS in the BitBake manual.\n\nBINCONFIGï\n\nWhen inheriting the binconfig-disabled class, this variable specifies binary configuration scripts to disable in favor of using pkg-config to query the information. The binconfig-disabled class will modify the specified scripts to return an error so that calls to them can be easily found and replaced.\n\nTo add multiple scripts, separate them by spaces. Here is an example from the libpng recipe:\n\nBINCONFIG = \"${bindir}/libpng-config ${bindir}/libpng16-config\"\n\nBINCONFIG_GLOBï\n\nWhen inheriting the binconfig class, this variable specifies a wildcard for configuration scripts that need editing. The scripts are edited to correct any paths that have been set up during compilation so that they are correct for use when installed into the sysroot and called by the build processes of other recipes.\n\nNote\n\nThe BINCONFIG_GLOB variable uses shell globbing, which is recognition and expansion of wildcards during pattern matching. Shell globbing is very similar to fnmatch and glob.\n\nFor more information on how this variable works, see meta/classes-recipe/binconfig.bbclass in the Source Directory. You can also find general information on the class in the âbinconfigâ section.\n\nBITBAKE_UIï\n\nSee BITBAKE_UI in the BitBake manual.\n\nBPï\n\nThe base recipe name and version but without any special recipe name suffix (i.e. -native, lib64-, and so forth). BP is comprised of the following:\n\n${BPN}-${PV}\n\nBPNï\n\nThis variable is a version of the PN variable with common prefixes and suffixes removed, such as nativesdk-, -cross, -native, and multilibâs lib64- and lib32-. The exact lists of prefixes and suffixes removed are specified by the MLPREFIX and SPECIAL_PKGSUFFIX variables, respectively.\n\nBUGTRACKERï\n\nSpecifies a URL for an upstream bug tracking website for a recipe. The OpenEmbedded build system does not use this variable. Rather, the variable is a useful pointer in case a bug in the software being built needs to be manually reported.\n\nBUILD_ARCHï\n\nSpecifies the architecture of the build host (e.g. i686). The OpenEmbedded build system sets the value of BUILD_ARCH from the machine name reported by the uname command.\n\nBUILD_AS_ARCHï\n\nSpecifies the architecture-specific assembler flags for the build host. By default, the value of BUILD_AS_ARCH is empty.\n\nBUILD_CC_ARCHï\n\nSpecifies the architecture-specific C compiler flags for the build host. By default, the value of BUILD_CC_ARCH is empty.\n\nBUILD_CCLDï\n\nSpecifies the linker command to be used for the build host when the C compiler is being used as the linker. By default, BUILD_CCLD points to GCC and passes as arguments the value of BUILD_CC_ARCH, assuming BUILD_CC_ARCH is set.\n\nBUILD_CFLAGSï\n\nSpecifies the flags to pass to the C compiler when building for the build host. When building in the -native context, CFLAGS is set to the value of this variable by default.\n\nBUILD_CPPFLAGSï\n\nSpecifies the flags to pass to the C preprocessor (i.e. to both the C and the C++ compilers) when building for the build host. When building in the -native context, CPPFLAGS is set to the value of this variable by default.\n\nBUILD_CXXFLAGSï\n\nSpecifies the flags to pass to the C++ compiler when building for the build host. When building in the -native context, CXXFLAGS is set to the value of this variable by default.\n\nBUILD_FCï\n\nSpecifies the Fortran compiler command for the build host. By default, BUILD_FC points to Gfortran and passes as arguments the value of BUILD_CC_ARCH, assuming BUILD_CC_ARCH is set.\n\nBUILD_LDï\n\nSpecifies the linker command for the build host. By default, BUILD_LD points to the GNU linker (ld) and passes as arguments the value of BUILD_LD_ARCH, assuming BUILD_LD_ARCH is set.\n\nBUILD_LD_ARCHï\n\nSpecifies architecture-specific linker flags for the build host. By default, the value of BUILD_LD_ARCH is empty.\n\nBUILD_LDFLAGSï\n\nSpecifies the flags to pass to the linker when building for the build host. When building in the -native context, LDFLAGS is set to the value of this variable by default.\n\nBUILD_OPTIMIZATIONï\n\nSpecifies the optimization flags passed to the C compiler when building for the build host or the SDK. The flags are passed through the BUILD_CFLAGS and BUILDSDK_CFLAGS default values.\n\nThe default value of the BUILD_OPTIMIZATION variable is â-O2 -pipeâ.\n\nBUILD_OSï\n\nSpecifies the operating system in use on the build host (e.g. âlinuxâ). The OpenEmbedded build system sets the value of BUILD_OS from the OS reported by the uname command â the first word, converted to lower-case characters.\n\nBUILD_PREFIXï\n\nThe toolchain binary prefix used for native recipes. The OpenEmbedded build system uses the BUILD_PREFIX value to set the TARGET_PREFIX when building for native recipes.\n\nBUILD_STRIPï\n\nSpecifies the command to be used to strip debugging symbols from binaries produced for the build host. By default, BUILD_STRIP points to ${BUILD_PREFIX}strip.\n\nBUILD_SYSï\n\nSpecifies the system, including the architecture and the operating system, to use when building for the build host (i.e. when building native recipes).\n\nThe OpenEmbedded build system automatically sets this variable based on BUILD_ARCH, BUILD_VENDOR, and BUILD_OS. You do not need to set the BUILD_SYS variable yourself.\n\nBUILD_VENDORï\n\nSpecifies the vendor name to use when building for the build host. The default value is an empty string (ââ).\n\nBUILDDIRï\n\nPoints to the location of the Build Directory. You can define this directory indirectly through the oe-init-build-env script by passing in a Build Directory path when you run the script. If you run the script and do not provide a Build Directory path, the BUILDDIR defaults to build in the current directory.\n\nBUILDHISTORY_COMMITï\n\nWhen inheriting the buildhistory class, this variable specifies whether or not to commit the build history output in a local Git repository. If set to â1â, this local repository will be maintained automatically by the buildhistory class and a commit will be created on every build for changes to each top-level subdirectory of the build history output (images, packages, and sdk). If you want to track changes to build history over time, you should set this value to â1â.\n\nBy default, the buildhistory class enables committing the buildhistory output in a local Git repository:\n\nBUILDHISTORY_COMMIT ?= \"1\"\n\nBUILDHISTORY_COMMIT_AUTHORï\n\nWhen inheriting the buildhistory class, this variable specifies the author to use for each Git commit. In order for the BUILDHISTORY_COMMIT_AUTHOR variable to work, the BUILDHISTORY_COMMIT variable must be set to â1â.\n\nGit requires that the value you provide for the BUILDHISTORY_COMMIT_AUTHOR variable takes the form of âname email@hostâ. Providing an email address or host that is not valid does not produce an error.\n\nBy default, the buildhistory class sets the variable as follows:\n\nBUILDHISTORY_COMMIT_AUTHOR ?= \"buildhistory <buildhistory@${DISTRO}>\"\n\nBUILDHISTORY_DIRï\n\nWhen inheriting the buildhistory class, this variable specifies the directory in which build history information is kept. For more information on how the variable works, see the buildhistory class.\n\nBy default, the buildhistory class sets the directory as follows:\n\nBUILDHISTORY_DIR ?= \"${TOPDIR}/buildhistory\"\n\nBUILDHISTORY_FEATURESï\n\nWhen inheriting the buildhistory class, this variable specifies the build history features to be enabled. For more information on how build history works, see the âMaintaining Build Output Qualityâ section in the Yocto Project Development Tasks Manual.\n\nYou can specify these features in the form of a space-separated list:\n\nimage: Analysis of the contents of images, which includes the list of installed packages among other things.\n\npackage: Analysis of the contents of individual packages.\n\nsdk: Analysis of the contents of the software development kit (SDK).\n\ntask: Save output file signatures for shared state (sstate) tasks. This saves one file per task and lists the SHA-256 checksums for each file staged (i.e. the output of the task).\n\nBy default, the buildhistory class enables the following features:\n\nBUILDHISTORY_FEATURES ?= \"image package sdk\"\n\nBUILDHISTORY_IMAGE_FILESï\n\nWhen inheriting the buildhistory class, this variable specifies a list of paths to files copied from the image contents into the build history directory under an âimage-filesâ directory in the directory for the image, so that you can track the contents of each file. The default is to copy /etc/passwd and /etc/group, which allows you to monitor for changes in user and group entries. You can modify the list to include any file. Specifying an invalid path does not produce an error. Consequently, you can include files that might not always be present.\n\nBy default, the buildhistory class provides paths to the following files:\n\nBUILDHISTORY_IMAGE_FILES ?= \"/etc/passwd /etc/group\"\n\nBUILDHISTORY_PATH_PREFIX_STRIPï\n\nWhen inheriting the buildhistory class, this variable specifies a common path prefix that should be stripped off the beginning of paths in the task signature list when the task feature is active in BUILDHISTORY_FEATURES. This can be useful when build history is populated from multiple sources that may not all use the same top level directory.\n\nBy default, the buildhistory class sets the variable as follows:\n\nBUILDHISTORY_PATH_PREFIX_STRIP ?= \"\"\n\nIn this case, no prefixes will be stripped.\n\nBUILDHISTORY_PUSH_REPOï\n\nWhen inheriting the buildhistory class, this variable optionally specifies a remote repository to which build history pushes Git changes. In order for BUILDHISTORY_PUSH_REPO to work, BUILDHISTORY_COMMIT must be set to â1â.\n\nThe repository should correspond to a remote address that specifies a repository as understood by Git, or alternatively to a remote name that you have set up manually using git remote within the local repository.\n\nBy default, the buildhistory class sets the variable as follows:\n\nBUILDHISTORY_PUSH_REPO ?= \"\"\n\nBUILDNAMEï\n\nSee BUILDNAME in the BitBake manual.\n\nBUILDSDK_CFLAGSï\n\nSpecifies the flags to pass to the C compiler when building for the SDK. When building in the nativesdk- context, CFLAGS is set to the value of this variable by default.\n\nBUILDSDK_CPPFLAGSï\n\nSpecifies the flags to pass to the C pre-processor (i.e. to both the C and the C++ compilers) when building for the SDK. When building in the nativesdk- context, CPPFLAGS is set to the value of this variable by default.\n\nBUILDSDK_CXXFLAGSï\n\nSpecifies the flags to pass to the C++ compiler when building for the SDK. When building in the nativesdk- context, CXXFLAGS is set to the value of this variable by default.\n\nBUILDSDK_LDFLAGSï\n\nSpecifies the flags to pass to the linker when building for the SDK. When building in the nativesdk- context, LDFLAGS is set to the value of this variable by default.\n\nBUILDSTATS_BASEï\n\nPoints to the location of the directory that holds build statistics when you use and enable the buildstats class. The BUILDSTATS_BASE directory defaults to ${TMPDIR}/buildstats/.\n\nBUSYBOX_SPLIT_SUIDï\n\nFor the BusyBox recipe, specifies whether to split the output executable file into two parts: one for features that require setuid root, and one for the remaining features (i.e. those that do not require setuid root).\n\nThe BUSYBOX_SPLIT_SUID variable defaults to â1â, which results in splitting the output executable file. Set the variable to â0â to get a single output executable file.\n\nBZRDIRï\n\nSee BZRDIR in the BitBake manual.\n\nCACHEï\n\nSpecifies the directory BitBake uses to store a cache of the Metadata so it does not need to be parsed every time BitBake is started.\n\nCCï\n\nThe minimal command and arguments used to run the C compiler.\n\nCFLAGSï\n\nSpecifies the flags to pass to the C compiler. This variable is exported to an environment variable and thus made visible to the software being built during the compilation step.\n\nDefault initialization for CFLAGS varies depending on what is being built:\n\nTARGET_CFLAGS when building for the target\n\nBUILD_CFLAGS when building for the build host (i.e. -native)\n\nBUILDSDK_CFLAGS when building for an SDK (i.e. nativesdk-)\n\nCLASSOVERRIDEï\n\nAn internal variable specifying the special class override that should currently apply (e.g. âclass-targetâ, âclass-nativeâ, and so forth). The classes that use this variable (e.g. native, nativesdk, and so forth) set the variable to appropriate values.\n\nNote\n\nCLASSOVERRIDE gets its default âclass-targetâ value from the bitbake.conf file.\n\nAs an example, the following override allows you to install extra files, but only when building for the target:\n\ndo_install:append:class-target() { install my-extra-file ${D}${sysconfdir} }\n\nHere is an example where FOO is set to ânativeâ when building for the build host, and to âotherâ when not building for the build host:\n\nFOO:class-native = \"native\" FOO = \"other\"\n\nThe underlying mechanism behind CLASSOVERRIDE is simply that it is included in the default value of OVERRIDES.\n\nCLEANBROKENï\n\nIf set to â1â within a recipe, CLEANBROKEN specifies that the make clean command does not work for the software being built. Consequently, the OpenEmbedded build system will not try to run make clean during the do_configure task, which is the default behavior.\n\nCOMBINED_FEATURESï\n\nProvides a list of hardware features that are enabled in both MACHINE_FEATURES and DISTRO_FEATURES. This select list of features contains features that make sense to be controlled both at the machine and distribution configuration level. For example, the âbluetoothâ feature requires hardware support but should also be optional at the distribution level, in case the hardware supports Bluetooth but you do not ever intend to use it.\n\nCOMMERCIAL_AUDIO_PLUGINSï\n\nThis variable is specific to the GStreamer recipes. It allows to build the GStreamer âuglyâ and âbadâ audio plugins.\n\nSee the Other Variables Related to Commercial Licenses section for usage details.\n\nCOMMERCIAL_VIDEO_PLUGINSï\n\nThis variable is specific to the GStreamer recipes. It allows to build the GStreamer âuglyâ and âbadâ video plugins.\n\nSee the Other Variables Related to Commercial Licenses section for usage details.\n\nCOMMON_LICENSE_DIRï\n\nPoints to meta/files/common-licenses in the Source Directory, which is where generic license files reside.\n\nCOMPATIBLE_HOSTï\n\nA regular expression that resolves to one or more hosts (when the recipe is native) or one or more targets (when the recipe is non-native) with which a recipe is compatible. The regular expression is matched against HOST_SYS. You can use the variable to stop recipes from being built for classes of systems with which the recipes are not compatible. Stopping these builds is particularly useful with kernels. The variable also helps to increase parsing speed since the build system skips parsing recipes not compatible with the current system.\n\nCOMPATIBLE_MACHINEï\n\nA regular expression that resolves to one or more target machines with which a recipe is compatible. The regular expression is matched against MACHINEOVERRIDES. You can use the variable to stop recipes from being built for machines with which the recipes are not compatible. Stopping these builds is particularly useful with kernels. The variable also helps to increase parsing speed since the build system skips parsing recipes not compatible with the current machine.\n\nIf one wants to have a recipe only available for some architectures (here aarch64 and mips64), the following can be used:\n\nCOMPATIBLE_MACHINE = \"^$\" COMPATIBLE_MACHINE:arch64 = \"^(aarch64)$\" COMPATIBLE_MACHINE:mips64 = \"^(mips64)$\"\n\nThe first line means âmatch all machines whose MACHINEOVERRIDES contains the empty stringâ, which will always be none.\n\nThe second is for matching all machines whose MACHINEOVERRIDES contains one override which is exactly aarch64.\n\nThe third is for matching all machines whose MACHINEOVERRIDES contains one override which is exactly mips64.\n\nThe same could be achieved with:\n\nCOMPATIBLE_MACHINE = \"^(aarch64|mips64)$\"\n\nNote\n\nWhen COMPATIBLE_MACHINE is set in a recipe inherits from native, the recipe is always skipped. All native recipes must be entirely target independent and should not rely on MACHINE.\n\nCOMPLEMENTARY_GLOBï\n\nDefines wildcards to match when installing a list of complementary packages for all the packages explicitly (or implicitly) installed in an image.\n\nThe COMPLEMENTARY_GLOB variable uses Unix filename pattern matching (fnmatch), which is similar to the Unix style pathname pattern expansion (glob).\n\nThe resulting list of complementary packages is associated with an item that can be added to IMAGE_FEATURES. An example usage of this is the âdev-pkgsâ item that when added to IMAGE_FEATURES will install -dev packages (containing headers and other development files) for every package in the image.\n\nTo add a new feature item pointing to a wildcard, use a variable flag to specify the feature item name and use the value to specify the wildcard. Here is an example:\n\nCOMPLEMENTARY_GLOB[dev-pkgs] = '*-dev'\n\nNote\n\nWhen installing complementary packages, recommends relationships (set via RRECOMMENDS) are always ignored.\n\nCOMPONENTS_DIRï\n\nStores sysroot components for each recipe. The OpenEmbedded build system uses COMPONENTS_DIR when constructing recipe-specific sysroots for other recipes.\n\nThe default is â${STAGING_DIR}-components.â (i.e. â${TMPDIR}/sysroots-componentsâ).\n\nCONF_VERSIONï\n\nTracks the version of the local configuration file (i.e. local.conf). The value for CONF_VERSION increments each time build/conf/ compatibility changes.\n\nCONFFILESï\n\nIdentifies editable or configurable files that are part of a package. If the Package Management System (PMS) is being used to update packages on the target system, it is possible that configuration files you have changed after the original installation and that you now want to remain unchanged are overwritten. In other words, editable files might exist in the package that you do not want reset as part of the package update process. You can use the CONFFILES variable to list the files in the package that you wish to prevent the PMS from overwriting during this update process.\n\nTo use the CONFFILES variable, provide a package name override that identifies the resulting package. Then, provide a space-separated list of files. Here is an example:\n\nCONFFILES:${PN} += \"${sysconfdir}/file1 \\ ${sysconfdir}/file2 ${sysconfdir}/file3\"\n\nThere is a relationship between the CONFFILES and FILES variables. The files listed within CONFFILES must be a subset of the files listed within FILES. Because the configuration files you provide with CONFFILES are simply being identified so that the PMS will not overwrite them, it makes sense that the files must already be included as part of the package through the FILES variable.\n\nNote\n\nWhen specifying paths as part of the CONFFILES variable, it is good practice to use appropriate path variables. For example, ${sysconfdir} rather than /etc or ${bindir} rather than /usr/bin. You can find a list of these variables at the top of the meta/conf/bitbake.conf file in the Source Directory.\n\nCONFIG_INITRAMFS_SOURCEï\n\nIdentifies the initial RAM filesystem (Initramfs) source files. The OpenEmbedded build system receives and uses this kernel Kconfig variable as an environment variable. By default, the variable is set to null (ââ).\n\nThe CONFIG_INITRAMFS_SOURCE can be either a single cpio archive with a .cpio suffix or a space-separated list of directories and files for building the Initramfs image. A cpio archive should contain a filesystem archive to be used as an Initramfs image. Directories should contain a filesystem layout to be included in the Initramfs image. Files should contain entries according to the format described by the usr/gen_init_cpio program in the kernel tree.\n\nIf you specify multiple directories and files, the Initramfs image will be the aggregate of all of them.\n\nFor information on creating an Initramfs, see the âBuilding an Initial RAM Filesystem (Initramfs) Imageâ section in the Yocto Project Development Tasks Manual.\n\nCONFIG_SITEï\n\nA list of files that contains autoconf test results relevant to the current build. This variable is used by the Autotools utilities when running configure.\n\nCONFIGURE_FLAGSï\n\nThe minimal arguments for GNU configure.\n\nCONFLICT_DISTRO_FEATURESï\n\nWhen inheriting the features_check class, this variable identifies distribution features that would be in conflict should the recipe be built. In other words, if the CONFLICT_DISTRO_FEATURES variable lists a feature that also appears in DISTRO_FEATURES within the current configuration, then the recipe will be skipped, and if the build system attempts to build the recipe then an error will be triggered.\n\nCONVERSION_CMDï\n\nThis variable is used for storing image conversion commands. Image conversion can convert an image into different objects like:\n\nCompressed version of the image\n\nChecksums for the image\n\nAn example of CONVERSION_CMD from image_types class is:\n\nCONVERSION_CMD:lzo = \"lzop -9 ${IMAGE_NAME}${IMAGE_NAME_SUFFIX}.${type}\"\n\nCOPY_LIC_DIRSï\n\nIf set to â1â along with the COPY_LIC_MANIFEST variable, the OpenEmbedded build system copies into the image the license files, which are located in /usr/share/common-licenses, for each package. The license files are placed in directories within the image itself during build time.\n\nNote\n\nThe COPY_LIC_DIRS does not offer a path for adding licenses for newly installed packages to an image, which might be most suitable for read-only filesystems that cannot be upgraded. See the LICENSE_CREATE_PACKAGE variable for additional information. You can also reference the âProviding License Textâ section in the Yocto Project Development Tasks Manual for information on providing license text.\n\nCOPY_LIC_MANIFESTï\n\nIf set to â1â, the OpenEmbedded build system copies the license manifest for the image to /usr/share/common-licenses/license.manifest within the image itself during build time.\n\nNote\n\nThe COPY_LIC_MANIFEST does not offer a path for adding licenses for newly installed packages to an image, which might be most suitable for read-only filesystems that cannot be upgraded. See the LICENSE_CREATE_PACKAGE variable for additional information. You can also reference the âProviding License Textâ section in the Yocto Project Development Tasks Manual for information on providing license text.\n\nCOPYLEFT_LICENSE_EXCLUDEï\n\nA space-separated list of licenses to exclude from the source archived by the archiver class. In other words, if a license in a recipeâs LICENSE value is in the value of COPYLEFT_LICENSE_EXCLUDE, then its source is not archived by the class.\n\nNote\n\nThe COPYLEFT_LICENSE_EXCLUDE variable takes precedence over the COPYLEFT_LICENSE_INCLUDE variable.\n\nThe default value, which is âCLOSED Proprietaryâ, for COPYLEFT_LICENSE_EXCLUDE is set by the copyleft_filter class, which is inherited by the archiver class.\n\nCOPYLEFT_LICENSE_INCLUDEï\n\nA space-separated list of licenses to include in the source archived by the archiver class. In other words, if a license in a recipeâs LICENSE value is in the value of COPYLEFT_LICENSE_INCLUDE, then its source is archived by the class.\n\nThe default value is set by the copyleft_filter class, which is inherited by the archiver class. The default value includes âGPL*â, âLGPL*â, and âAGPL*â.\n\nCOPYLEFT_PN_EXCLUDEï\n\nA list of recipes to exclude in the source archived by the archiver class. The COPYLEFT_PN_EXCLUDE variable overrides the license inclusion and exclusion caused through the COPYLEFT_LICENSE_INCLUDE and COPYLEFT_LICENSE_EXCLUDE variables, respectively.\n\nThe default value, which is ââ indicating to not explicitly exclude any recipes by name, for COPYLEFT_PN_EXCLUDE is set by the copyleft_filter class, which is inherited by the archiver class.\n\nCOPYLEFT_PN_INCLUDEï\n\nA list of recipes to include in the source archived by the archiver class. The COPYLEFT_PN_INCLUDE variable overrides the license inclusion and exclusion caused through the COPYLEFT_LICENSE_INCLUDE and COPYLEFT_LICENSE_EXCLUDE variables, respectively.\n\nThe default value, which is ââ indicating to not explicitly include any recipes by name, for COPYLEFT_PN_INCLUDE is set by the copyleft_filter class, which is inherited by the archiver class.\n\nCOPYLEFT_RECIPE_TYPESï\n\nA space-separated list of recipe types to include in the source archived by the archiver class. Recipe types are target, native, nativesdk, cross, crosssdk, and cross-canadian.\n\nThe default value, which is âtarget*â, for COPYLEFT_RECIPE_TYPES is set by the copyleft_filter class, which is inherited by the archiver class.\n\nCORE_IMAGE_EXTRA_INSTALLï\n\nSpecifies the list of packages to be added to the image. You should only set this variable in the local.conf configuration file found in the Build Directory.\n\nThis variable replaces POKY_EXTRA_INSTALL, which is no longer supported.\n\nCOREBASEï\n\nSpecifies the parent directory of the OpenEmbedded-Core Metadata layer (i.e. meta).\n\nIt is an important distinction that COREBASE points to the parent of this layer and not the layer itself. Consider an example where you have cloned the Poky Git repository and retained the poky name for your local copy of the repository. In this case, COREBASE points to the poky folder because it is the parent directory of the poky/meta layer.\n\nCOREBASE_FILESï\n\nLists files from the COREBASE directory that should be copied other than the layers listed in the bblayers.conf file. The COREBASE_FILES variable allows to copy metadata from the OpenEmbedded build system into the extensible SDK.\n\nExplicitly listing files in COREBASE is needed because it typically contains build directories and other files that should not normally be copied into the extensible SDK. Consequently, the value of COREBASE_FILES is used in order to only copy the files that are actually needed.\n\nCPPï\n\nThe minimal command and arguments used to run the C preprocessor.\n\nCPPFLAGSï\n\nSpecifies the flags to pass to the C pre-processor (i.e. to both the C and the C++ compilers). This variable is exported to an environment variable and thus made visible to the software being built during the compilation step.\n\nDefault initialization for CPPFLAGS varies depending on what is being built:\n\nTARGET_CPPFLAGS when building for the target\n\nBUILD_CPPFLAGS when building for the build host (i.e. -native)\n\nBUILDSDK_CPPFLAGS when building for an SDK (i.e. nativesdk-)\n\nCROSS_COMPILEï\n\nThe toolchain binary prefix for the target tools. The CROSS_COMPILE variable is the same as the TARGET_PREFIX variable.\n\nNote\n\nThe OpenEmbedded build system sets the CROSS_COMPILE variable only in certain contexts (e.g. when building for kernel and kernel module recipes).\n\nCVE_CHECK_IGNOREï\n\nThis variable is deprecated and should be replaced by CVE_STATUS.\n\nCVE_CHECK_SHOW_WARNINGSï\n\nSpecifies whether or not the cve-check class should generate warning messages on the console when unpatched CVEs are found. The default is â1â, but you may wish to set it to â0â if you are already examining/processing the logs after the build has completed and thus do not need the warning messages.\n\nCVE_CHECK_SKIP_RECIPEï\n\nThe list of package names (PN) for which CVEs (Common Vulnerabilities and Exposures) are ignored.\n\nCVE_CHECK_STATUSMAPï\n\nMapping variable for all possible reasons of CVE_STATUS: Patched, Unpatched and Ignored. See cve-check or meta/conf/cve-check-map.conf for more details:\n\nCVE_CHECK_STATUSMAP[cpe-incorrect] = \"Ignored\"\n\nSpecifies the maximum age of the CVE database in seconds for an incremental update (instead of a full-download). Use â0â to force a full-download.\n\nSpecifies the CVE database update interval in seconds, as used by cve-update-db-native. The default value is â86400â i.e. once a day (24*60*60). If the value is set to â0â then the update will be forced every time. Alternatively, a negative value e.g. â-1â will disable updates entirely.\n\nCVE_PRODUCTï\n\nIn a recipe, defines the name used to match the recipe name against the name in the upstream NIST CVE database.\n\nThe default is ${BPN} (except for recipes that inherit the pypi class where it is set based upon PYPI_PACKAGE). If it does not match the name in the NIST CVE database or matches with multiple entries in the database, the default value needs to be changed.\n\nHere is an example from the Berkeley DB recipe:\n\nCVE_PRODUCT = \"oracle_berkeley_db berkeley_db\"\n\nSometimes the product name is not specific enough, for example âtarâ has been matching CVEs for the GNU tar package and also the node-tar node.js extension. To avoid this problem, use the vendor name as a prefix. The syntax for this is:\n\nCVE_PRODUCT = \"vendor:package\"\n\nCVE_STATUSï\n\nThe CVE ID which is patched or should be ignored. Here is an example from the Python3 recipe:\n\nCVE_STATUS[CVE-2020-15523] = \"not-applicable-platform: Issue only applies on Windows\"\n\nIt has the format âreason: descriptionâ and the description is optional. The Reason is mapped to the final CVE state by mapping via CVE_CHECK_STATUSMAP. See Fixing vulnerabilities in recipes for details.\n\nCVE_STATUS_GROUPSï\n\nIf there are many CVEs with the same status and reason, they can by simplified by using this variable instead of many similar lines with CVE_STATUS:\n\nCVE_STATUS_GROUPS = \"CVE_STATUS_WIN CVE_STATUS_PATCHED\" CVE_STATUS_WIN = \"CVE-1234-0001 CVE-1234-0002\" CVE_STATUS_WIN[status] = \"not-applicable-platform: Issue only applies on Windows\" CVE_STATUS_PATCHED = \"CVE-1234-0003 CVE-1234-0004\" CVE_STATUS_PATCHED[status] = \"fixed-version: Fixed externally\"\n\nCVE_VERSIONï\n\nIn a recipe, defines the version used to match the recipe version against the version in the NIST CVE database when usign cve-check.\n\nThe default is ${PV} but if recipes use custom version numbers which do not map to upstream software component release versions and the versions used in the CVE database, then this variable can be used to set the version number for cve-check. Example:\n\nCVE_VERSION = \"2.39\"\n\nCVSDIRï\n\nThe directory in which files checked out under the CVS system are stored.\n\nCXXï\n\nThe minimal command and arguments used to run the C++ compiler.\n\nCXXFLAGSï\n\nSpecifies the flags to pass to the C++ compiler. This variable is exported to an environment variable and thus made visible to the software being built during the compilation step.\n\nDefault initialization for CXXFLAGS varies depending on what is being built:\n\nTARGET_CXXFLAGS when building for the target\n\nBUILD_CXXFLAGS when building for the build host (i.e. -native)\n\nBUILDSDK_CXXFLAGS when building for an SDK (i.e. nativesdk-)\n\nDï\n\nThe destination directory. The location in the Build Directory where components are installed by the do_install task. This location defaults to:\n\n${WORKDIR}/image\n\nNote\n\nTasks that read from or write to this directory should run under fakeroot.\n\nThe date the build was started. Dates appear using the year, month, and day (YMD) format (e.g. â20150209â for February 9th, 2015).\n\nThe date and time on which the current build started. The format is suitable for timestamps.\n\nDEBIAN_NOAUTONAMEï\n\nWhen the debian class is inherited, which is the default behavior, DEBIAN_NOAUTONAME specifies a particular package should not be renamed according to Debian library package naming. You must use the package name as an override when you set this variable. Here is an example from the fontconfig recipe:\n\nDEBIAN_NOAUTONAME:fontconfig-utils = \"1\"\n\nDEBIANNAMEï\n\nWhen the debian class is inherited, which is the default behavior, DEBIANNAME allows you to override the library name for an individual package. Overriding the library name in these cases is rare. You must use the package name as an override when you set this variable. Here is an example from the dbus recipe:\n\nDEBIANNAME:${PN} = \"dbus-1\"\n\nDEBUG_BUILDï\n\nSpecifies to build packages with debugging information. This influences the value of the SELECTED_OPTIMIZATION variable.\n\nDEBUG_OPTIMIZATIONï\n\nThe options to pass in TARGET_CFLAGS and CFLAGS when compiling a system for debugging. This variable defaults to â-O -fno-omit-frame-pointer ${DEBUG_FLAGS} -pipeâ.\n\nDEBUG_PREFIX_MAPï\n\nAllows to set C compiler options, such as -fdebug-prefix-map, -fmacro-prefix-map, and -ffile-prefix-map, which allow to replace build-time paths by install-time ones in the debugging sections of binaries. This makes compiler output files location independent, at the cost of having to pass an extra command to tell the debugger where source files are.\n\nThis is used by the Yocto Project to guarantee Reproducible Builds even when the source code of a package uses the __FILE__ or assert() macros. See the reproducible-builds.org website for details.\n\nThis variable is set in the meta/conf/bitbake.conf file. It is not intended to be user-configurable.\n\nDEFAULT_PREFERENCEï\n\nSpecifies a weak bias for recipe selection priority.\n\nThe most common usage of this is variable is to set it to â-1â within a recipe for a development version of a piece of software. Using the variable in this way causes the stable version of the recipe to build by default in the absence of PREFERRED_VERSION being used to build the development version.\n\nNote\n\nThe bias provided by DEFAULT_PREFERENCE is weak and is overridden by BBFILE_PRIORITY if that variable is different between two layers that contain different versions of the same recipe.\n\nDEFAULTTUNEï\n\nThe default CPU and Application Binary Interface (ABI) tunings (i.e. the âtuneâ) used by the OpenEmbedded build system. The DEFAULTTUNE helps define TUNE_FEATURES.\n\nThe default tune is either implicitly or explicitly set by the machine (MACHINE). However, you can override the setting using available tunes as defined with AVAILTUNES.\n\nDEPENDSï\n\nLists a recipeâs build-time dependencies. These are dependencies on other recipes whose contents (e.g. headers and shared libraries) are needed by the recipe at build time.\n\nAs an example, consider a recipe foo that contains the following assignment:\n\nDEPENDS = \"bar\"\n\nThe practical effect of the previous assignment is that all files installed by bar will be available in the appropriate staging sysroot, given by the STAGING_DIR* variables, by the time the do_configure task for foo runs. This mechanism is implemented by having do_configure depend on the do_populate_sysroot task of each recipe listed in DEPENDS, through a [deptask] declaration in the base class.\n\nNote\n\nIt seldom is necessary to reference, for example, STAGING_DIR_HOST explicitly. The standard classes and build-related variables are configured to automatically use the appropriate staging sysroots.\n\nAs another example, DEPENDS can also be used to add utilities that run on the build machine during the build. For example, a recipe that makes use of a code generator built by the recipe codegen might have the following:\n\nDEPENDS = \"codegen-native\"\n\nFor more information, see the native class and the EXTRANATIVEPATH variable.\n\nNote\n\nDEPENDS is a list of recipe names. Or, to be more precise, it is a list of PROVIDES names, which usually match recipe names. Putting a package name such as âfoo-devâ in DEPENDS does not make sense. Use âfooâ instead, as this will put files from all the packages that make up foo, which includes those from foo-dev, into the sysroot.\n\nOne recipe having another recipe in DEPENDS does not by itself add any runtime dependencies between the packages produced by the two recipes. However, as explained in the âAutomatically Added Runtime Dependenciesâ section in the Yocto Project Overview and Concepts Manual, runtime dependencies will often be added automatically, meaning DEPENDS alone is sufficient for most recipes.\n\nCounterintuitively, DEPENDS is often necessary even for recipes that install precompiled components. For example, if libfoo is a precompiled library that links against libbar, then linking against libfoo requires both libfoo and libbar to be available in the sysroot. Without a DEPENDS from the recipe that installs libfoo to the recipe that installs libbar, other recipes might fail to link against libfoo.\n\nFor information on runtime dependencies, see the RDEPENDS variable. You can also see the âTasksâ and âDependenciesâ sections in the BitBake User Manual for additional information on tasks and dependencies.\n\nDEPLOY_DIRï\n\nPoints to the general area that the OpenEmbedded build system uses to place images, packages, SDKs, and other output files that are ready to be used outside of the build system. By default, this directory resides within the Build Directory as ${TMPDIR}/deploy.\n\nFor more information on the structure of the Build Directory, see âThe Build Directory â build/â section. For more detail on the contents of the deploy directory, see the âImagesâ, âPackage Feedsâ, and âApplication Development SDKâ sections all in the Yocto Project Overview and Concepts Manual.\n\nDEPLOY_DIR_DEBï\n\nPoints to the area that the OpenEmbedded build system uses to place Debian packages that are ready to be used outside of the build system. This variable applies only when PACKAGE_CLASSES contains âpackage_debâ.\n\nThe BitBake configuration file initially defines the DEPLOY_DIR_DEB variable as a sub-folder of DEPLOY_DIR:\n\nDEPLOY_DIR_DEB = \"${DEPLOY_DIR}/deb\"\n\nThe package_deb class uses the DEPLOY_DIR_DEB variable to make sure the do_package_write_deb task writes Debian packages into the appropriate folder. For more information on how packaging works, see the âPackage Feedsâ section in the Yocto Project Overview and Concepts Manual.\n\nDEPLOY_DIR_IMAGEï\n\nPoints to the area that the OpenEmbedded build system uses to place images and other associated output files that are ready to be deployed onto the target machine. The directory is machine-specific as it contains the ${MACHINE} name. By default, this directory resides within the Build Directory as ${DEPLOY_DIR}/images/${MACHINE}/.\n\nIt must not be used directly in recipes when deploying files. Instead, itâs only useful when a recipe needs to âreadâ a file already deployed by a dependency. So, it should be filled with the contents of DEPLOYDIR by the deploy class or with the contents of IMGDEPLOYDIR by the image class.\n\nFor more information on the structure of the Build Directory, see âThe Build Directory â build/â section. For more detail on the contents of the deploy directory, see the âImagesâ and âApplication Development SDKâ sections both in the Yocto Project Overview and Concepts Manual.\n\nDEPLOY_DIR_IPKï\n\nPoints to the area that the OpenEmbedded build system uses to place IPK packages that are ready to be used outside of the build system. This variable applies only when PACKAGE_CLASSES contains âpackage_ipkâ.\n\nThe BitBake configuration file initially defines this variable as a sub-folder of DEPLOY_DIR:\n\nDEPLOY_DIR_IPK = \"${DEPLOY_DIR}/ipk\"\n\nThe package_ipk class uses the DEPLOY_DIR_IPK variable to make sure the do_package_write_ipk task writes IPK packages into the appropriate folder. For more information on how packaging works, see the âPackage Feedsâ section in the Yocto Project Overview and Concepts Manual.\n\nDEPLOY_DIR_RPMï\n\nPoints to the area that the OpenEmbedded build system uses to place RPM packages that are ready to be used outside of the build system. This variable applies only when PACKAGE_CLASSES contains âpackage_rpmâ.\n\nThe BitBake configuration file initially defines this variable as a sub-folder of DEPLOY_DIR:\n\nDEPLOY_DIR_RPM = \"${DEPLOY_DIR}/rpm\"\n\nThe package_rpm class uses the DEPLOY_DIR_RPM variable to make sure the do_package_write_rpm task writes RPM packages into the appropriate folder. For more information on how packaging works, see the âPackage Feedsâ section in the Yocto Project Overview and Concepts Manual.\n\nDEPLOYDIRï\n\nWhen inheriting the deploy class, the DEPLOYDIR points to a temporary work area for deployed files that is set in the deploy class as follows:\n\nDEPLOYDIR = \"${WORKDIR}/deploy-${PN}\"\n\nRecipes inheriting the deploy class should copy files to be deployed into DEPLOYDIR, and the class will take care of copying them into DEPLOY_DIR_IMAGE afterwards.\n\nDESCRIPTIONï\n\nThe package description used by package managers. If not set, DESCRIPTION takes the value of the SUMMARY variable.\n\nDEV_PKG_DEPENDENCYï\n\nProvides an easy way for recipes to disable or adjust the runtime recommendation (RRECOMMENDS) of the ${PN}-dev package on the main (${PN}) package.\n\nDISABLE_STATICï\n\nUsed in order to disable static linking by default (in order to save space, since static libraries are often unused in embedded systems.) The default value is â âdisable-staticâ, however it can be set to ââ in order to enable static linking if desired. Certain recipes do this individually, and also there is a meta/conf/distro/include/no-static-libs.inc include file that disables static linking for a number of recipes. Some software packages or build tools (such as CMake) have explicit support for enabling / disabling static linking, and in those cases DISABLE_STATIC is not used.\n\nDISTROï\n\nThe short name of the distribution. For information on the long name of the distribution, see the DISTRO_NAME variable.\n\nThe DISTRO variable corresponds to a distribution configuration file whose root name is the same as the variableâs argument and whose filename extension is .conf. For example, the distribution configuration file for the Poky distribution is named poky.conf and resides in the meta-poky/conf/distro directory of the Source Directory.\n\nWithin that poky.conf file, the DISTRO variable is set as follows:\n\nDISTRO = \"poky\"\n\nDistribution configuration files are located in a conf/distro directory within the Metadata that contains the distribution configuration. The value for DISTRO must not contain spaces, and is typically all lower-case.\n\nNote\n\nIf the DISTRO variable is blank, a set of default configurations are used, which are specified within meta/conf/distro/defaultsetup.conf also in the Source Directory.\n\nDISTRO_CODENAMEï\n\nSpecifies a codename for the distribution being built.\n\nDISTRO_EXTRA_RDEPENDSï\n\nSpecifies a list of distro-specific packages to add to all images. This variable takes effect through packagegroup-base so the variable only really applies to the more full-featured images that include packagegroup-base. You can use this variable to keep distro policy out of generic images. As with all other distro variables, you set this variable in the distro .conf file.\n\nDISTRO_EXTRA_RRECOMMENDSï\n\nSpecifies a list of distro-specific packages to add to all images if the packages exist. The packages might not exist or be empty (e.g. kernel modules). The list of packages are automatically installed but you can remove them.\n\nDISTRO_FEATURESï\n\nThe software support you want in your distribution for various features. You define your distribution features in the distribution configuration file.\n\nIn most cases, the presence or absence of a feature in DISTRO_FEATURES is translated to the appropriate option supplied to the configure script during the do_configure task for recipes that optionally support the feature. For example, specifying âx11â in DISTRO_FEATURES, causes every piece of software built for the target that can optionally support X11 to have its X11 support enabled.\n\nNote\n\nJust enabling DISTRO_FEATURES alone doesnât enable feature support for packages. Mechanisms such as making PACKAGECONFIG track DISTRO_FEATURES are used to enable/disable package features.\n\nTwo more examples are Bluetooth and NFS support. For a more complete list of features that ships with the Yocto Project and that you can provide with this variable, see the âDistro Featuresâ section.\n\nDISTRO_FEATURES_BACKFILLï\n\nA space-separated list of features to be added to DISTRO_FEATURES if not also present in DISTRO_FEATURES_BACKFILL_CONSIDERED.\n\nThis variable is set in the meta/conf/bitbake.conf file. It is not intended to be user-configurable. It is best to just reference the variable to see which distro features are being backfilled for all distro configurations.\n\nDISTRO_FEATURES_BACKFILL_CONSIDEREDï\n\nA space-separated list of features from DISTRO_FEATURES_BACKFILL that should not be backfilled (i.e. added to DISTRO_FEATURES) during the build.\n\nThis corresponds to an opt-out mechanism. When new default distro features are introduced, distribution maintainers can review (consider) them and decide to exclude them from the backfilled features. Therefore, the combination of DISTRO_FEATURES_BACKFILL and DISTRO_FEATURES_BACKFILL_CONSIDERED makes it possible to add new default features without breaking existing distributions.\n\nDISTRO_FEATURES_DEFAULTï\n\nA convenience variable that gives you the default list of distro features with the exception of any features specific to the C library (libc).\n\nWhen creating a custom distribution, you might find it useful to be able to reuse the default DISTRO_FEATURES options without the need to write out the full set. Here is an example that uses DISTRO_FEATURES_DEFAULT from a custom distro configuration file:\n\nDISTRO_FEATURES ?= \"${DISTRO_FEATURES_DEFAULT} myfeature\"\n\nDISTRO_FEATURES_FILTER_NATIVEï\n\nSpecifies a list of features that if present in the target DISTRO_FEATURES value should be included in DISTRO_FEATURES when building native recipes. This variable is used in addition to the features filtered using the DISTRO_FEATURES_NATIVE variable.\n\nDISTRO_FEATURES_FILTER_NATIVESDKï\n\nSpecifies a list of features that if present in the target DISTRO_FEATURES value should be included in DISTRO_FEATURES when building nativesdk recipes. This variable is used in addition to the features filtered using the DISTRO_FEATURES_NATIVESDK variable.\n\nDISTRO_FEATURES_NATIVEï\n\nSpecifies a list of features that should be included in DISTRO_FEATURES when building native recipes. This variable is used in addition to the features filtered using the DISTRO_FEATURES_FILTER_NATIVE variable.\n\nDISTRO_FEATURES_NATIVESDKï\n\nSpecifies a list of features that should be included in DISTRO_FEATURES when building nativesdk recipes. This variable is used in addition to the features filtered using the DISTRO_FEATURES_FILTER_NATIVESDK variable.\n\nDISTRO_NAMEï\n\nThe long name of the distribution. For information on the short name of the distribution, see the DISTRO variable.\n\nThe DISTRO_NAME variable corresponds to a distribution configuration file whose root name is the same as the variableâs argument and whose filename extension is .conf. For example, the distribution configuration file for the Poky distribution is named poky.conf and resides in the meta-poky/conf/distro directory of the Source Directory.\n\nWithin that poky.conf file, the DISTRO_NAME variable is set as follows:\n\nDISTRO_NAME = \"Poky (Yocto Project Reference Distro)\"\n\nDistribution configuration files are located in a conf/distro directory within the Metadata that contains the distribution configuration.\n\nNote\n\nIf the DISTRO_NAME variable is blank, a set of default configurations are used, which are specified within meta/conf/distro/defaultsetup.conf also in the Source Directory.\n\nDISTRO_VERSIONï\n\nThe version of the distribution.\n\nDISTROOVERRIDESï\n\nA colon-separated list of overrides specific to the current distribution. By default, this list includes the value of DISTRO.\n\nYou can extend DISTROOVERRIDES to add extra overrides that should apply to the distribution.\n\nThe underlying mechanism behind DISTROOVERRIDES is simply that it is included in the default value of OVERRIDES.\n\nHere is an example from meta-poky/conf/distro/poky-tiny.conf:\n\nDISTROOVERRIDES = \"poky:poky-tiny\"\n\nDL_DIRï\n\nThe central download directory used by the build process to store downloads. By default, DL_DIR gets files suitable for mirroring for everything except Git repositories. If you want tarballs of Git repositories, use the BB_GENERATE_MIRROR_TARBALLS variable.\n\nYou can set this directory by defining the DL_DIR variable in the conf/local.conf file. This directory is self-maintaining and you should not have to touch it. By default, the directory is downloads in the Build Directory:\n\n#DL_DIR ?= \"${TOPDIR}/downloads\"\n\nTo specify a different download directory, simply remove the comment from the line and provide your directory.\n\nDuring a first build, the system downloads many different source code tarballs from various upstream projects. Downloading can take a while, particularly if your network connection is slow. Tarballs are all stored in the directory defined by DL_DIR and the build system looks there first to find source tarballs.\n\nNote\n\nWhen wiping and rebuilding, you can preserve this directory to speed up this part of subsequent builds.\n\nYou can safely share this directory between multiple builds on the same development machine. For additional information on how the build process gets source files when working behind a firewall or proxy server, see this specific question in the âFAQâ chapter. You can also refer to the âWorking Behind a Network Proxyâ Wiki page.\n\nDOC_COMPRESSï\n\nWhen inheriting the compress_doc class, this variable sets the compression policy used when the OpenEmbedded build system compresses manual and info pages. By default, the compression method used is gz (gzip). Other policies available are xz and bz2.\n\nFor information on policies and on how to use this variable, see the comments in the meta/classes-recipe/compress_doc.bbclass file.\n\nDT_FILESï\n\nSpace-separated list of device tree source files to compile using a recipe that inherits the devicetree class. These are relative to the DT_FILES_PATH.\n\nFor convenience, both .dts and .dtb extensions can be used.\n\nUse an empty string (default) to build all device tree sources within the DT_FILES_PATH directory.\n\nDT_FILES_PATHï\n\nWhen compiling out-of-tree device tree sources using a recipe that inherits the devicetree class, this variable specifies the path to the directory containing dts files to build.\n\nDefaults to the S directory.\n\nDT_PADDING_SIZEï\n\nWhen inheriting the devicetree class, this variable specifies the size of padding appended to the device tree blob, used as extra space typically for additional properties during boot.\n\nEFI_PROVIDERï\n\nWhen building bootable images (i.e. where hddimg, iso, or wic.vmdk is in IMAGE_FSTYPES), the EFI_PROVIDER variable specifies the EFI bootloader to use. The default is âgrub-efiâ, but âsystemd-bootâ can be used instead.\n\nSee the systemd-boot and image-live classes for more information.\n\nEFI_UKI_DIRï\n\nThe primary place for the UKI image inside the EFI System Partition.\n\nEFI_UKI_PATHï\n\nThe path for the UKI image inside the root filesystem.\n\nENABLE_BINARY_LOCALE_GENERATIONï\n\nVariable that controls which locales for glibc are generated during the build (useful if the target device has 64Mbytes of RAM or less).\n\nERR_REPORT_DIRï\n\nWhen used with the report-error class, specifies the path used for storing the debug files created by the error reporting tool, which allows you to submit build errors you encounter to a central database. By default, the value of this variable is ${LOG_DIR}/error-report.\n\nYou can set ERR_REPORT_DIR to the path you want the error reporting tool to store the debug files as follows in your local.conf file:\n\nERR_REPORT_DIR = \"path\"\n\nERROR_QAï\n\nSpecifies the quality assurance checks whose failures are reported as errors by the OpenEmbedded build system. You set this variable in your distribution configuration file. For a list of the checks you can control with this variable, see the âinsaneâ section.\n\nESDK_CLASS_INHERIT_DISABLEï\n\nA list of classes to remove from the INHERIT value globally within the extensible SDK configuration. The populate-sdk-ext class sets the default value:\n\nESDK_CLASS_INHERIT_DISABLE ?= \"buildhistory icecc\"\n\nSome classes are not generally applicable within the extensible SDK context. You can use this variable to disable those classes.\n\nFor additional information on how to customize the extensible SDKâs configuration, see the âConfiguring the Extensible SDKâ section in the Yocto Project Application Development and the Extensible Software Development Kit (eSDK) manual.\n\nESDK_LOCALCONF_ALLOWï\n\nA list of variables allowed through from the OpenEmbedded build system configuration into the extensible SDK configuration. By default, the list of variables is empty and is set in the populate-sdk-ext class.\n\nThis list overrides the variables specified using the ESDK_LOCALCONF_REMOVE variable as well as other variables automatically added due to the â/â character being found at the start of the value, which is usually indicative of being a path and thus might not be valid on the system where the SDK is installed.\n\nFor additional information on how to customize the extensible SDKâs configuration, see the âConfiguring the Extensible SDKâ section in the Yocto Project Application Development and the Extensible Software Development Kit (eSDK) manual.\n\nESDK_LOCALCONF_REMOVEï\n\nA list of variables not allowed through from the OpenEmbedded build system configuration into the extensible SDK configuration. Usually, these are variables that are specific to the machine on which the build system is running and thus would be potentially problematic within the extensible SDK.\n\nBy default, ESDK_LOCALCONF_REMOVE is set in the populate-sdk-ext class and excludes the following variables:\n\nCONF_VERSION\n\nBB_NUMBER_THREADS\n\nBB_NUMBER_PARSE_THREADS\n\nPARALLEL_MAKE\n\nPRSERV_HOST\n\nSSTATE_MIRRORS DL_DIR\n\nSSTATE_DIR TMPDIR\n\nBB_SERVER_TIMEOUT\n\nFor additional information on how to customize the extensible SDKâs configuration, see the âConfiguring the Extensible SDKâ section in the Yocto Project Application Development and the Extensible Software Development Kit (eSDK) manual.\n\nEXCLUDE_FROM_SHLIBSï\n\nTriggers the OpenEmbedded build systemâs shared libraries resolver to exclude an entire package when scanning for shared libraries.\n\nNote\n\nThe shared libraries resolverâs functionality results in part from the internal function package_do_shlibs, which is part of the do_package task. You should be aware that the shared libraries resolver might implicitly define some dependencies between packages.\n\nThe EXCLUDE_FROM_SHLIBS variable is similar to the PRIVATE_LIBS variable, which excludes a packageâs particular libraries only and not the whole package.\n\nUse the EXCLUDE_FROM_SHLIBS variable by setting it to â1â for a particular package:\n\nEXCLUDE_FROM_SHLIBS = \"1\"\n\nEXCLUDE_FROM_WORLDï\n\nDirects BitBake to exclude a recipe from world builds (i.e. bitbake world). During world builds, BitBake locates, parses and builds all recipes found in every layer exposed in the bblayers.conf configuration file.\n\nTo exclude a recipe from a world build using this variable, set the variable to â1â in the recipe.\n\nNote\n\nRecipes added to EXCLUDE_FROM_WORLD may still be built during a world build in order to satisfy dependencies of other recipes. Adding a recipe to EXCLUDE_FROM_WORLD only ensures that the recipe is not explicitly added to the list of build targets in a world build.\n\nEXTENDPEï\n\nUsed with file and pathnames to create a prefix for a recipeâs version based on the recipeâs PE value. If PE is set and greater than zero for a recipe, EXTENDPE becomes that value (e.g if PE is equal to â1â then EXTENDPE becomes â1â). If a recipeâs PE is not set (the default) or is equal to zero, EXTENDPE becomes ââ.\n\nSee the STAMP variable for an example.\n\nEXTENDPKGVï\n\nThe full package version specification as it appears on the final packages produced by a recipe. The variableâs value is normally used to fix a runtime dependency to the exact same version of another package in the same recipe:\n\nRDEPENDS:${PN}-additional-module = \"${PN} (= ${EXTENDPKGV})\"\n\nThe dependency relationships are intended to force the package manager to upgrade these types of packages in lock-step.\n\nWhen set, the EXTERNAL_KERNEL_TOOLS variable indicates that these tools are not in the source tree.\n\nWhen kernel tools are available in the tree, they are preferred over any externally installed tools. Setting the EXTERNAL_KERNEL_TOOLS variable tells the OpenEmbedded build system to prefer the installed external tools. See the kernel-yocto class in meta/classes-recipe to see how the variable is used.\n\nEXTERNAL_TOOLCHAINï\n\nWhen you intend to use an external toolchain, this variable allows to specify the directory where this toolchain was installed.\n\nEXTERNALSRCï\n\nWhen inheriting the externalsrc class, this variable points to the source tree, which is outside of the OpenEmbedded build system. When set, this variable sets the S variable, which is what the OpenEmbedded build system uses to locate unpacked recipe source code.\n\nSee the âexternalsrcâ section for details. You can also find information on how to use this variable in the âBuilding Software from an External Sourceâ section in the Yocto Project Development Tasks Manual.\n\nEXTERNALSRC_BUILDï\n\nWhen inheriting the externalsrc class, this variable points to the directory in which the recipeâs source code is built, which is outside of the OpenEmbedded build system. When set, this variable sets the B variable, which is what the OpenEmbedded build system uses to locate the Build Directory.\n\nSee the âexternalsrcâ section for details. You can also find information on how to use this variable in the âBuilding Software from an External Sourceâ section in the Yocto Project Development Tasks Manual.\n\nEXTRA_AUTORECONFï\n\nFor recipes inheriting the autotools* class, you can use EXTRA_AUTORECONF to specify extra options to pass to the autoreconf command that is executed during the do_configure task.\n\nThe default value is ââexclude=autopointâ.\n\nEXTRA_IMAGE_FEATURESï\n\nA list of additional features to include in an image. When listing more than one feature, separate them with a space.\n\nTypically, you configure this variable in your local.conf file, which is found in the Build Directory. Although you can use this variable from within a recipe, best practices dictate that you do not.\n\nNote\n\nTo enable primary features from within the image recipe, use the IMAGE_FEATURES variable.\n\nHere are some examples of features you can add:\n\nâdbg-pkgsâ â adds -dbg packages for all installed packages including symbol information for debugging and profiling.\n\nâdebug-tweaksâ â makes an image suitable for debugging. For example, allows root logins without passwords and enables post-installation logging. See the âallow-empty-passwordâ and âpost-install-loggingâ features in the âImage Featuresâ section for more information.\n\nâdev-pkgsâ â adds -dev packages for all installed packages. This is useful if you want to develop against the libraries in the image.\n\nâread-only-rootfsâ â creates an image whose root filesystem is read-only. See the âCreating a Read-Only Root Filesystemâ section in the Yocto Project Development Tasks Manual for more information\n\nâtools-debugâ â adds debugging tools such as gdb and strace.\n\nâtools-sdkâ â adds development tools such as gcc, make, pkgconfig and so forth.\n\nâtools-testappsâ â adds useful testing tools such as ts_print, aplay, arecord and so forth.\n\nFor a complete list of image features that ships with the Yocto Project, see the âImage Featuresâ section.\n\nFor an example that shows how to customize your image by using this variable, see the âCustomizing Images Using Custom IMAGE_FEATURES and EXTRA_IMAGE_FEATURESâ section in the Yocto Project Development Tasks Manual.\n\nEXTRA_IMAGECMDï\n\nSpecifies additional options for the image creation command that has been specified in IMAGE_CMD. When setting this variable, use an override for the associated image type. Here is an example:\n\nEXTRA_IMAGECMD:ext3 ?= \"-i 4096\"\n\nEXTRA_IMAGEDEPENDSï\n\nA list of recipes to build that do not provide packages for installing into the root filesystem.\n\nSometimes a recipe is required to build the final image but is not needed in the root filesystem. You can use the EXTRA_IMAGEDEPENDS variable to list these recipes and thus specify the dependencies. A typical example is a required bootloader in a machine configuration.\n\nNote\n\nTo add packages to the root filesystem, see the various RDEPENDS and RRECOMMENDS variables.\n\nEXTRA_OECMAKEï\n\nAdditional CMake options. See the cmake class for additional information.\n\nEXTRA_OECONFï\n\nAdditional configure script options. See PACKAGECONFIG_CONFARGS for additional information on passing configure script options.\n\nEXTRA_OEMAKEï\n\nAdditional GNU make options.\n\nBecause the EXTRA_OEMAKE defaults to ââ, you need to set the variable to specify any required GNU options.\n\nPARALLEL_MAKE and PARALLEL_MAKEINST also make use of EXTRA_OEMAKE to pass the required flags.\n\nEXTRA_OEMESONï\n\nAdditional Meson options. See the meson class for additional information.\n\nIn addition to standard Meson options, such options correspond to Meson build options defined in the meson_options.txt file in the sources to build. Here is an example:\n\nEXTRA_OEMESON = \"-Dpython=disabled -Dvalgrind=disabled\"\n\nNote that any custom value for the Meson --buildtype option should be set through the MESON_BUILDTYPE variable.\n\nEXTRA_OESCONSï\n\nWhen inheriting the scons class, this variable specifies additional configuration options you want to pass to the scons command line.\n\nEXTRA_USERS_PARAMSï\n\nWhen inheriting the extrausers class, this variable provides image level user and group operations. This is a more global method of providing user and group configuration as compared to using the useradd* class, which ties user and group configurations to a specific recipe.\n\nThe set list of commands you can configure using the EXTRA_USERS_PARAMS is shown in the extrausers class. These commands map to the normal Unix commands of the same names:\n\n# EXTRA_USERS_PARAMS = \"\\ # useradd -p '' tester; \\ # groupadd developers; \\ # userdel nobody; \\ # groupdel -g video; \\ # groupmod -g 1020 developers; \\ # usermod -s /bin/sh tester; \\ # \"\n\nHardcoded passwords are supported via the -p parameters for useradd or usermod, but only hashed.\n\nHere is an example that adds two users named âtester-jimâ and âtester-sueâ and assigns passwords. First on host, create the (escaped) password hash:\n\nprintf \"%q\" $(mkpasswd -m sha256crypt tester01)\n\nThe resulting hash is set to a variable and used in useradd command parameters:\n\ninherit extrausers PASSWD = \"\\$X\\$ABC123\\$A-Long-Hash\" EXTRA_USERS_PARAMS = \"\\ useradd -p '${PASSWD}' tester-jim; \\ useradd -p '${PASSWD}' tester-sue; \\ \"\n\nFinally, here is an example that sets the root password:\n\ninherit extrausers EXTRA_USERS_PARAMS = \"\\ usermod -p '${PASSWD}' root; \\ \"\n\nNote\n\nFrom a security perspective, hardcoding a default password is not generally a good idea or even legal in some jurisdictions. It is recommended that you do not do this if you are building a production image.\n\nAdditionally there is a special passwd-expire command that will cause the password for a user to be expired and thus force changing it on first login, for example:\n\nEXTRA_USERS_PARAMS += \" useradd myuser; passwd-expire myuser;\"\n\nNote\n\nAt present, passwd-expire may only work for remote logins when using OpenSSH and not dropbear as an SSH server.\n\nEXTRANATIVEPATHï\n\nA list of subdirectories of ${STAGING_BINDIR_NATIVE} added to the beginning of the environment variable PATH. As an example, the following prepends â${STAGING_BINDIR_NATIVE}/foo:${STAGING_BINDIR_NATIVE}/bar:â to PATH:\n\nEXTRANATIVEPATH = \"foo bar\"\n\nFAKEROOTï\n\nSee FAKEROOT in the BitBake manual.\n\nFAKEROOTBASEENVï\n\nSee FAKEROOTBASEENV in the BitBake manual.\n\nFAKEROOTCMDï\n\nSee FAKEROOTCMD in the BitBake manual.\n\nFAKEROOTDIRSï\n\nSee FAKEROOTDIRS in the BitBake manual.\n\nFAKEROOTENVï\n\nSee FAKEROOTENV in the BitBake manual.\n\nFAKEROOTNOENVï\n\nSee FAKEROOTNOENV in the BitBake manual.\n\nFEATURE_PACKAGESï\n\nDefines one or more packages to include in an image when a specific item is included in IMAGE_FEATURES. When setting the value, FEATURE_PACKAGES should have the name of the feature item as an override. Here is an example:\n\nFEATURE_PACKAGES_widget = \"package1 package2\"\n\nIn this example, if âwidgetâ were added to IMAGE_FEATURES, package1 and package2 would be included in the image.\n\nNote\n\nPackages installed by features defined through FEATURE_PACKAGES are often package groups. While similarly named, you should not confuse the FEATURE_PACKAGES variable with package groups, which are discussed elsewhere in the documentation.\n\nFEED_DEPLOYDIR_BASE_URIï\n\nPoints to the base URL of the server and location within the document-root that provides the metadata and packages required by OPKG to support runtime package management of IPK packages. You set this variable in your local.conf file.\n\nConsider the following example:\n\nFEED_DEPLOYDIR_BASE_URI = \"http://192.168.7.1/BOARD-dir\"\n\nThis example assumes you are serving your packages over HTTP and your databases are located in a directory named BOARD-dir, which is underneath your HTTP serverâs document-root. In this case, the OpenEmbedded build system generates a set of configuration files for you in your target that work with the feed.\n\nFETCHCMDï\n\nSee FETCHCMD in the BitBake manual.\n\nFILEï\n\nSee FILE in the BitBake manual.\n\nFILESï\n\nThe list of files and directories that are placed in a package. The PACKAGES variable lists the packages generated by a recipe.\n\nTo use the FILES variable, provide a package name override that identifies the resulting package. Then, provide a space-separated list of files or paths that identify the files you want included as part of the resulting package. Here is an example:\n\nFILES:${PN} += \"${bindir}/mydir1 ${bindir}/mydir2/myfile\"\n\nNote\n\nWhen specifying files or paths, you can pattern match using Pythonâs glob syntax. For details on the syntax, see the documentation by following the previous link.\n\nWhen specifying paths as part of the FILES variable, it is good practice to use appropriate path variables. For example, use ${sysconfdir} rather than /etc, or ${bindir} rather than /usr/bin. You can find a list of these variables at the top of the meta/conf/bitbake.conf file in the Source Directory. You will also find the default values of the various FILES:* variables in this file.\n\nIf some of the files you provide with the FILES variable are editable and you know they should not be overwritten during the package update process by the Package Management System (PMS), you can identify these files so that the PMS will not overwrite them. See the CONFFILES variable for information on how to identify these files to the PMS.\n\nFILES_SOLIBSDEVï\n\nDefines the file specification to match SOLIBSDEV. In other words, FILES_SOLIBSDEV defines the full path name of the development symbolic link (symlink) for shared libraries on the target platform.\n\nThe following statement from the bitbake.conf shows how it is set:\n\nFILES_SOLIBSDEV ?= \"${base_libdir}/lib*${SOLIBSDEV} ${libdir}/lib*${SOLIBSDEV}\"\n\nFILESEXTRAPATHSï\n\nA colon-separated list to extend the search path the OpenEmbedded build system uses when looking for files and patches as it processes recipes and append files. The default directories BitBake uses when it processes recipes are initially defined by the FILESPATH variable. You can extend FILESPATH variable by using FILESEXTRAPATHS.\n\nBest practices dictate that you accomplish this by using FILESEXTRAPATHS from within a .bbappend file and that you prepend paths as follows:\n\nFILESEXTRAPATHS:prepend := \"${THISDIR}/${PN}:\"\n\nIn the above example, the build system first looks for files in a directory that has the same name as the corresponding append file.\n\nNote\n\nWhen extending FILESEXTRAPATHS, be sure to use the immediate expansion (:=) operator. Immediate expansion makes sure that BitBake evaluates THISDIR at the time the directive is encountered rather than at some later time when expansion might result in a directory that does not contain the files you need.\n\nAlso, include the trailing separating colon character if you are prepending. The trailing colon character is necessary because you are directing BitBake to extend the path by prepending directories to the search path.\n\nHere is another common use:\n\nFILESEXTRAPATHS:prepend := \"${THISDIR}/files:\"\n\nIn this example, the build system extends the FILESPATH variable to include a directory named files that is in the same directory as the corresponding append file.\n\nThis next example specifically adds three paths:\n\nFILESEXTRAPATHS:prepend := \"path_1:path_2:path_3:\"\n\nA final example shows how you can extend the search path and include a MACHINE-specific override, which is useful in a BSP layer:\n\nFILESEXTRAPATHS:prepend:intel-x86-common := \"${THISDIR}/${PN}:\"\n\nThe previous statement appea"
    }
}