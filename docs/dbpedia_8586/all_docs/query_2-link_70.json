{
    "id": "dbpedia_8586_2",
    "rank": 70,
    "data": {
        "url": "https://discourse.libsdl.org/t/sdl-opengl-and-portability/12029",
        "read_more_link": "",
        "language": "en",
        "title": "SDL/OpenGL and Portability",
        "top_image": "https://discourse.libsdl.org/uploads/default/original/2X/7/7502c3c39c33c4309023972bdc0c0961f7ad78c4.png",
        "meta_img": "https://discourse.libsdl.org/uploads/default/original/2X/7/7502c3c39c33c4309023972bdc0c0961f7ad78c4.png",
        "images": [
            "https://discourse.libsdl.org/images/emoji/apple/wink.png?v=12",
            "https://discourse.libsdl.org/images/emoji/apple/wink.png?v=12",
            "https://discourse.libsdl.org/images/emoji/apple/wink.png?v=12",
            "https://discourse.libsdl.org/images/emoji/apple/smiley.png?v=12",
            "https://discourse.libsdl.org/images/emoji/apple/wink.png?v=12"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2005-03-31T16:11:43+00:00",
        "summary": "",
        "meta_description": "I am currently teaching an undergraduate course on free game\ndevelopment.  I wanted all the projects to be totally portable, so I\nchose SDL/OpenGL to be the target platform.  There have been a few\n&quot;hiccups&quot;, but only one&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://discourse.libsdl.org/uploads/default/optimized/2X/f/f3de005f87c237bee0d4311684498fd0c0867796_2_32x32.png",
        "meta_site_name": "Simple Directmedia Layer",
        "canonical_link": "https://discourse.libsdl.org/t/sdl-opengl-and-portability/12029",
        "text": "I am currently teaching an undergraduate course on free game\n\ndevelopment. I wanted all the projects to be totally portable, so I\n\nchose SDL/OpenGL to be the target platform. There have been a few\n\n\"hiccups\", but only one major problem. While sdl-config can make sure a\n\nsingle makefile can compile SDL apps on any of the platforms we use, and\n\nSDL_opengl.h makes the code able to be completely portable, it does\n\nnothing to help with linking the OpenGL libraries. In most systems this\n\nwould be -lGL and -lGLU, but in Windows this is -lopengl32 and -lglu32,\n\nwhile in MacOS-X this is -framework OpenGL, etc…\n\nIs there a standard way to handle this? If not, is there any reason\n\nsdl-config can’t get something like “–libs-gl” and \"–libs-glu\"\n\noptions? That way each Makefile could just use sdl-config --libs-glu\n\nand no separate rules will be needed for different platforms.\n\nWhat do you all think about this? Is there a better way I am missing?–\n\nSteaphan Greene\n\nGPG public key: http://www.cs.binghamton.edu/~sgreene/gpg.key.txt\n\n-------------- next part --------------\n\nA non-text attachment was scrubbed…\n\nName: not available\n\nType: application/pgp-signature\n\nSize: 189 bytes\n\nDesc: not available\n\nURL: http://lists.libsdl.org/pipermail/sdl-libsdl.org/attachments/20050331/9e17a2f9/attachment.pgp\n\n[…]\n\nSDL_opengl.h makes the code able to be completely portable, it does\n\nnothing to help with linking the OpenGL libraries. In most systems\n\nthis would be -lGL and -lGLU, but in Windows this is -lopengl32 and\n\n-lglu32, while in MacOS-X this is -framework OpenGL, etc…\n\nIs there a standard way to handle this? If not, is there any reason\n\nsdl-config can’t get something like “–libs-gl” and “–libs-glu”\n\noptions? That way each Makefile could just use sdl-config\n\n–libs-glu and no separate rules will be needed for different\n\nplatforms.\n\nWhat do you all think about this? Is there a better way I am\n\nmissing?\n\nI think the primary reason is that the preferred approach is usually\n\nto load the OpenGL library “manually”, at run time. That allows your\n\napplication to load and start even if there is no OpenGL support on\n\nthe system, so you can use some other API, or give the user a\n\nsensible error message. (Note: There may not even be an OpenGL\n\nlibrary at all!) This approach also makes it possible to add an\n\noption to let the user decide what OpenGL library/driver to use.\n\nIf you’re loading OpenGL at run time, all you need at build time is\n\nthe OpenGL header. The rest is handled if/when your application\n\nactually tries to fire up OpenGL.\n\nSDL has portable support for doing this;\n\nSDL_GL_LoadLibrary();\n\nSDL_GL_GetProcAddress();\n\n//David Olofson - Programmer, Composer, Open Source Advocate\n\n.- Audiality -----------------------------------------------.\n\n| Free/Open Source audio engine for games and multimedia. |\n\n| MIDI, modular synthesis, real time effects, scripting,… |\n\n`-----------------------------------> http://audiality.org -’\n\n— http://olofson.net — http://www.reologica.se —On Thursday 31 March 2005 18.11, Steaphan Greene wrote:\n\nI see. Thanks for the quick response.\n\nIs there any interest in being able to automatically link the shared gl\n\nlibrary at runtime? It makes the projects simpler (no gl function\n\npointers and such) and all of the target platforms have opengl support\n\nlibraries.\n\nOtherwise, is there already an encapsulation of OpenGL around somewhere\n\nwhich works with SDL and implements auto-detection/loading of the\n\nlibrary and auto-linking stubs to the gl functions, or is that something\n\nelse I’m gonna have to write? As it seems to me now, I’d still have the\n\nproblem of needing to figure out the correct path of the gl library on\n\neach system, just the problem moves to runtime instead of compile-time.\n\nIs there some portable way to detect these?On Thu, Mar 31, 2005 at 07:02:55PM +0200, David Olofson wrote:\n\nOn Thursday 31 March 2005 18.11, Steaphan Greene wrote:\n\n[…]\n\nSDL_opengl.h makes the code able to be completely portable, it does\n\nnothing to help with linking the OpenGL libraries. In most systems\n\nthis would be -lGL and -lGLU, but in Windows this is -lopengl32 and\n\n-lglu32, while in MacOS-X this is -framework OpenGL, etc…\n\nIs there a standard way to handle this?\n\n[…]\n\nI think the primary reason is that the preferred approach is usually\n\nto load the OpenGL library “manually”, at run time. That allows your\n\napplication to load and start even if there is no OpenGL support on\n\nthe system, so you can use some other API, or give the user a\n\nsensible error message. (Note: There may not even be an OpenGL\n\nlibrary at all!) This approach also makes it possible to add an\n\noption to let the user decide what OpenGL library/driver to use.\n\nIf you’re loading OpenGL at run time, all you need at build time is\n\nthe OpenGL header. The rest is handled if/when your application\n\nactually tries to fire up OpenGL.\n\nSDL has portable support for doing this;\n\nSDL_GL_LoadLibrary();\n\nSDL_GL_GetProcAddress();\n\n–\n\nSteaphan Greene\n\nGPG public key: http://www.cs.binghamton.edu/~sgreene/gpg.key.txt\n\n-------------- next part --------------\n\nA non-text attachment was scrubbed…\n\nName: not available\n\nType: application/pgp-signature\n\nSize: 189 bytes\n\nDesc: not available\n\nURL: http://lists.libsdl.org/pipermail/sdl-libsdl.org/attachments/20050331/48fa741c/attachment.pgp\n\nI am currently teaching an undergraduate course on free game\n\ndevelopment. I wanted all the projects to be totally portable, so I\n\nchose SDL/OpenGL to be the target platform. There have been a few\n\n“hiccups”, but only one major problem. While sdl-config can make sure a\n\nsingle makefile can compile SDL apps on any of the platforms we use, and\n\nSDL_opengl.h makes the code able to be completely portable, it does\n\nnothing to help with linking the OpenGL libraries. In most systems this\n\nwould be -lGL and -lGLU, but in Windows this is -lopengl32 and -lglu32,\n\nwhile in MacOS-X this is -framework OpenGL, etc…\n\nIs there a standard way to handle this? If not, is there any reason\n\nsdl-config can’t get something like “–libs-gl” and “–libs-glu”\n\noptions? That way each Makefile could just use sdl-config --libs-glu\n\nand no separate rules will be needed for different platforms.\n\nWhat do you all think about this? Is there a better way I am missing?\n\nI also teach a game programming class and have never run into this\n\nproblem :-). The reason I’ve never seen it is that there is a lot of\n\ndifference between being source level portable and being portable all\n\nthe way down to the development environment.\n\nThe development environments on the Mac, Windows, and Linux/UNIX are so\n\ndifferent that nobody seems to expect the make files to work across\n\ndifferent platforms. On Windows, my students generally need to be able\n\nto configure Visual C/C++ to find the right headers and link with the\n\nright libraries. On Linux they are usually using make files and I can\n\ntell them how to set them up. On the Mac, well I have had students who\n\nused Macs and wrote great games but they don’t ask me how to set up\n\ntheir development environment.\n\nIf you insist on using make files and command line tools on all\n\nplatforms, then I guess the right way to do it is using the\n\nstandard ./autogen;./configure;make tools so that the make files are\n\nautogened and tuned for each platform. That is, use the same tool chain\n\nthat SDL and most of the rest of the open source world use to make\n\nmakefile portable.\n\nBob Pendleton\n\nP.S.\n\nDon’t worry about loading OGL at run time. Just link with the dynamic\n\nlibraries and you will get the right OGL for the platform linked in at\n\nrun time. The SDL APIs for dynamic loading are useful for testing a new\n\nor alternative OGL libs but aren’t (in my experience) needed in most\n\ncases.On Thu, 2005-03-31 at 11:11 -0500, Steaphan Greene wrote:\n\nSDL mailing list\n\nSDL at libsdl.org\n\nhttp://www.libsdl.org/mailman/listinfo/sdl\n\n[…]\n\nIs there any interest in being able to automatically link the shared\n\ngl library at runtime? It makes the projects simpler (no gl\n\nfunction pointers and such) and all of the target platforms have\n\nopengl support libraries.\n\nWell, I used to do that before, and I have GNU Autoconf scripts to\n\ntake care of the details of linking - statically or dynamically -\n\nwith OpenGL.\n\nHowever, the problem is that dynamic linking means the application\n\nwon’t even load if there’s no OpenGL lib. (That’s why there are two\n\nbinaries in current (old) Kobo Deluxe Win32 packages; the one with\n\nOpenGL support won’t even load without an opengl32.dll.)\n\nStatic linking is pretty much out, unless you count on all users\n\nbuilding from source, as some (most?) platforms have driver specific\n\nGL libs.\n\nSo, I’d recommend the third kind of “linking”; load it manually.\n\nOtherwise, is there already an encapsulation of OpenGL around\n\nsomewhere which works with SDL and implements auto-detection/loading\n\nof the library and auto-linking stubs to the gl functions, or is\n\nthat something else I’m gonna have to write?\n\nThere are various OpenGL helpers around, but I don’t have much\n\nexperience with them… Just grabbing the functions isn’t that much\n\nwork anyway. Grabbing only the ones you actually use could be nice if\n\nyou’re using functions that may not be provided by all drivers - but\n\nthen again, a helper library could just wire the stubs to some\n\nfunction that grabs the real function if/when it’s hit the first\n\ntime.\n\nAs it seems to me now, I’d still have the problem of needing to\n\nfigure out the correct path of the gl library on each system, just\n\nthe problem moves to runtime instead of compile-time.\n\nIs there some portable way to detect these?\n\nSDL does that. Unless you want to load a specific, nonstandard OpenGL\n\ndriver, just pass NULL to SDL_GL_LoadLibrary(), and it’ll load the\n\nstandard library on whatever platform you’re on.\n\nThis seems to be undocumented, though… “It Works Here™” IIRC,\n\nI actually found out about this feature while messing with the glSDL\n\nbackend, and converting glSDL/wrapper to run time OpenGL loading. I\n\nthink I found default library paths for all platforms with OpenGL\n\nsupport, but I’m not 100% sure…\n\n//David Olofson - Programmer, Composer, Open Source Advocate\n\n.- Audiality -----------------------------------------------.\n\n| Free/Open Source audio engine for games and multimedia. |\n\n| MIDI, modular synthesis, real time effects, scripting,… |\n\n`-----------------------------------> http://audiality.org -’\n\n— http://olofson.net — http://www.reologica.se —On Thursday 31 March 2005 20.35, Steaphan Greene wrote:\n\nWell, I used to do that before, and I have GNU Autoconf scripts to\n\ntake care of the details of linking - statically or dynamically -\n\nwith OpenGL.\n\nYeah, I was hoping to avoid this. The addition of --libs-gl and\n\n–libs-glu to sdl-config would solve the problem for my class needs.\n\nHowever, the problem is that dynamic linking means the application\n\nwon’t even load if there’s no OpenGL lib. (That’s why there are two\n\nbinaries in current (old) Kobo Deluxe Win32 packages; the one with\n\nOpenGL support won’t even load without an opengl32.dll.)\n\nRight, but it’s not big deal to simply state that the game requires\n\nopengl installed and setup. Most of the games would be completely\n\nunplayable with software emulation anyway.\n\nStatic linking is pretty much out, unless you count on all users\n\nbuilding from source, as some (most?) platforms have driver specific\n\nGL libs.\n\nNo, I wouldn’t do that.\n\nThere are various OpenGL helpers around, but I don’t have much\n\nexperience with them… Just grabbing the functions isn’t that much\n\nwork anyway. Grabbing only the ones you actually use could be nice if\n\nyou’re using functions that may not be provided by all drivers - but\n\nthen again, a helper library could just wire the stubs to some\n\nfunction that grabs the real function if/when it’s hit the first\n\ntime.\n\nThat’s what I’m looking for - prefereably one that remaps normal gl\n\nnamed functions to this kind of stubs, so normal opengl code from\n\nwhatever source will run it it without modification.\n\nSDL does that. Unless you want to load a specific, nonstandard OpenGL\n\ndriver, just pass NULL to SDL_GL_LoadLibrary(), and it’ll load the\n\nstandard library on whatever platform you’re on.\n\nThis seems to be undocumented, though… “It Works Here™” IIRC,\n\nI actually found out about this feature while messing with the glSDL\n\nbackend, and converting glSDL/wrapper to run time OpenGL loading. I\n\nthink I found default library paths for all platforms with OpenGL\n\nsupport, but I’m not 100% sure…\n\nAhh. This doesn’t seem to be in any of the docs I’ve see either. If\n\nthis really is a supported feature, this becomes a bit more possible.\n\nAnyone have an official word on this?On Thu, Mar 31, 2005 at 10:11:14PM +0200, David Olofson wrote:\n\n–\n\nSteaphan Greene\n\nGPG public key: http://www.cs.binghamton.edu/~sgreene/gpg.key.txt\n\n-------------- next part --------------\n\nA non-text attachment was scrubbed…\n\nName: not available\n\nType: application/pgp-signature\n\nSize: 189 bytes\n\nDesc: not available\n\nURL: http://lists.libsdl.org/pipermail/sdl-libsdl.org/attachments/20050331/b16e2fd8/attachment.pgp\n\nI also teach a game programming class and have never run into this\n\nproblem :-). The reason I’ve never seen it is that there is a lot of\n\ndifference between being source level portable and being portable all\n\nthe way down to the development environment.\n\nOf course.\n\nThe development environments on the Mac, Windows, and Linux/UNIX are\n\nso different that nobody seems to expect the make files to work across\n\ndifferent platforms.\n\nIMHO, they SHOULD expect this. Especially with something like SDL. I\n\nshould be able to just require SDL/OpenGL, gcc-3.x, and gnu make, and\n\nthe platform should then be irrelevant. Then students can develop on\n\nany platform they choose, and tas, instructors, and others can compile\n\ntheir programs anywhere right out of the box.\n\nOn Windows, my students generally need to be able to configure Visual\n\nC/C++ to find the right headers and link with the right libraries. On\n\nLinux they are usually using make files and I can tell them how to set\n\nthem up. On the Mac, well I have had students who used Macs and wrote\n\ngreat games but they don’t ask me how to set up their development\n\nenvironment.\n\nIf you insist on using make files and command line tools on all\n\nplatforms, then I guess the right way to do it is using the standard\n\n./autogen;./configure;make tools so that the make files are autogened\n\nand tuned for each platform. That is, use the same tool chain that SDL\n\nand most of the rest of the open source world use to make makefile\n\nportable.\n\n…which I was hoping to avoid. I don’t know why, but I’ve had more\n\nobscure problems with auto* than with any other aspect of the various\n\nprojects I’ve maintained.On Thu, Mar 31, 2005 at 01:49:27PM -0600, Bob Pendleton wrote:\n\n–\n\nSteaphan Greene\n\nGPG public key: http://www.cs.binghamton.edu/~sgreene/gpg.key.txt\n\n-------------- next part --------------\n\nA non-text attachment was scrubbed…\n\nName: not available\n\nType: application/pgp-signature\n\nSize: 189 bytes\n\nDesc: not available\n\nURL: http://lists.libsdl.org/pipermail/sdl-libsdl.org/attachments/20050331/e3cec256/attachment.pgp\n\nSteaphan Greene wrote:\n\nWell, I used to do that before, and I have GNU Autoconf scripts to\n\ntake care of the details of linking - statically or dynamically -\n\nwith OpenGL.\n\nYeah, I was hoping to avoid this. The addition of --libs-gl and\n\n–libs-glu to sdl-config would solve the problem for my class needs.\n\nIt’s been discussed some time ago, and I think everyone agrees that\n\n–libs-gl(u) is a good idea.\n\nIt’s just that nobody implemented it.\n\nHowever, the problem is that dynamic linking means the application\n\nwon’t even load if there’s no OpenGL lib. (That’s why there are two\n\nbinaries in current (old) Kobo Deluxe Win32 packages; the one with\n\nOpenGL support won’t even load without an opengl32.dll.)\n\nRight, but it’s not big deal to simply state that the game requires\n\nopengl installed and setup. Most of the games would be completely\n\nunplayable with software emulation anyway.\n\nSoftware emulation is a libGL.so already. What won’t work is the lack of\n\na libGL. i.e. systems that don’t have libGL or don’t have it properly\n\ninstalled.\n\nThat’s nice to have so that :\n\nyou can warn the user “OpenGL not installed”\n\nif you’re using OpenGL for 2d, you can fallback to OpenGL-less\n\noperation and not bother the user\n\nSDL does that. Unless you want to load a specific, nonstandard OpenGL\n\ndriver, just pass NULL to SDL_GL_LoadLibrary(), and it’ll load the\n\nstandard library on whatever platform you’re on.\n\nThis seems to be undocumented, though… “It Works Here™” IIRC,\n\nI actually found out about this feature while messing with the glSDL\n\nbackend, and converting glSDL/wrapper to run time OpenGL loading. I\n\nthink I found default library paths for all platforms with OpenGL\n\nsupport, but I’m not 100% sure…\n\nAhh. This doesn’t seem to be in any of the docs I’ve see either. If\n\nthis really is a supported feature, this becomes a bit more possible.\n\nAnyone have an official word on this?\n\nActually, any parameter to SDL_GL_LoadLibrary that fails to load\n\ncorrectly will be replaced by a default path.\n\nBut IIRC this won’t save you on all situations (especially with the x11\n\nSDL backend which can work on so many different platforms).\n\nTo answer your original question, I don’t think it’s worth the trouble\n\nfor a class project to have dynamic OpenGL loading. Just doing dynamic\n\nlinking will be fine, and minor modifications to the Makefile are enough\n\nto sort it out.\n\nStephane>On Thu, Mar 31, 2005 at 10:11:14PM +0200, David Olofson wrote:\n\nWell, I used to do that before, and I have GNU Autoconf scripts to\n\ntake care of the details of linking - statically or dynamically -\n\nwith OpenGL.\n\nYeah, I was hoping to avoid this. The addition of --libs-gl and\n\n–libs-glu to sdl-config would solve the problem for my class needs.\n\nYeah, might be handy. I don’t really care much for Autotools, BTW…\n\nIt’s huge, messy, slow and doesn’t really do the job too well anyway.\n\nIt seems to be the de-facto standard, and I’ve done a few projects\n\nwith it now; that’s probably the main reasons why I’m still using it.\n\nHowever, the problem is that dynamic linking means the application\n\nwon’t even load if there’s no OpenGL lib. (That’s why there are\n\ntwo\n\nbinaries in current (old) Kobo Deluxe Win32 packages; the one with\n\nOpenGL support won’t even load without an opengl32.dll.)\n\nRight, but it’s not big deal to simply state that the game requires\n\nopengl installed and setup. Most of the games would be completely\n\nunplayable with software emulation anyway.\n\nRight; Kobo Deluxe and other 2D games using OpenGL, that are still\n\nactually playable without OpenGL, are a bit of a special case.\n\nEither way, the reason I included the non-OpenGL exe was that some\n\nWindows machines I tested on plain didn’t have any traces of OpenGL\n\nwhatsoever, and thus refused to load the kobogl.exe. IIRC, those were\n\nWin95 machines. WinNT 4.0, Win95 and later should at least have the\n\ns/w implementation installed. Not much of an issue, I guess…\n\nAs to Windows-only video cards with Direct3D/DirectGraphics drivers\n\nonly (there are a few of those, apparently); I guess you could still\n\nlink with OpenGL and have the s/w fallback save your *ss even with\n\nthose cards. (Provided you support Direct3D as well, of course.)\n\n[…passing NULL to SDL_GL_LoadLibrary()…]\n\nAhh. This doesn’t seem to be in any of the docs I’ve see either.\n\nIf this really is a supported feature, this becomes a bit more\n\npossible. Anyone have an official word on this?\n\nI’d like to know too, because the last few “unofficial” versions of\n\nglSDL use that “feature”.\n\n//David Olofson - Programmer, Composer, Open Source Advocate\n\n.- Audiality -----------------------------------------------.\n\n| Free/Open Source audio engine for games and multimedia. |\n\n| MIDI, modular synthesis, real time effects, scripting,… |\n\n`-----------------------------------> http://audiality.org -’\n\n— http://olofson.net — http://www.reologica.se —On Thursday 31 March 2005 22.53, Steaphan Greene wrote:\n\nOn Thu, Mar 31, 2005 at 10:11:14PM +0200, David Olofson wrote:\n\nI am currently teaching an undergraduate course on free game\n\ndevelopment. I wanted all the projects to be totally portable, so I\n\nchose SDL/OpenGL to be the target platform. There have been a few\n\n“hiccups”, but only one major problem. While sdl-config can make sure a\n\nsingle makefile can compile SDL apps on any of the platforms we use, and\n\nSDL_opengl.h makes the code able to be completely portable, it does\n\nnothing to help with linking the OpenGL libraries. In most systems this\n\nwould be -lGL and -lGLU, but in Windows this is -lopengl32 and -lglu32,\n\nwhile in MacOS-X this is -framework OpenGL, etc…\n\nIs there a standard way to handle this? If not, is there any reason\n\nsdl-config can’t get something like “–libs-gl” and “–libs-glu”\n\noptions? That way each Makefile could just use sdl-config --libs-glu\n\nand no separate rules will be needed for different platforms.\n\nWhat do you all think about this? Is there a better way I am missing?\n\nMy take on this is that all the development environments are just too\n\ndifferent for SDL to handle all this. On the Mac alone, there are two\n\ntotally different ways to reach SDL (via Frameworks or via more\n\ntraditional Unix styles.) Throw in Visual Studio into the mix, and\n\nyou have pretty much no common ground to work with.\n\nMy solution is to use a a project/build generator. I discovered I was\n\ntoo stupid to figure out autoconf/automake, and it really doesn’t\n\naddress anything outside the Unix domain, so I don’t use those.\n\nBut there are two I know of I think that are worth advertising. The\n\nfirst is called CMake. CMake can generate native projects for many\n\ndifferent compilers (Visual Studio 6,7,7.1, Borland, Unix Makefiles,\n\nKDevelop, (Xcode in development)). You describe your build process in\n\na text file (script) and CMake will generate a project based on it.\n\nIt’s much higher level than a Makefile which makes it nice. They also\n\nprovide prewritten modules for popular libraries that handle the\n\ndetection of those libraries and set the path locations. SDL and\n\nOpenGL are among those modules. And it’s pretty easy to copy and paste\n\ntheir modules to make new ones to test for things like OpenAL or\n\nwhatever. I use CMake for many of my projects now.\n\nThe other one is called SCons. SCons is similar to CMake but the\n\nscripting language is all built on Python. I’ve never used this one,\n\nbut I hear good things about it. I don’t know Python (Perl background)\n\nso that wasn’t an advantage for me. One thing I didn’t like so much\n\nfrom the examples I saw was that you spend a little bit of time\n\nmassaging your data entry to satisfy the Python lexer and type\n\nconventions. I think CMake was a little more straightforward. I also\n\ndidn’t think I needed as much power as Python provides. But if you’re\n\na Python person, you’ll probably love SCons. Even if you’re not, it’s\n\nstill worth checking out.\n\nBoth projects are open source.\n\n-Eric> From: Steaphan Greene\n\nI also teach a game programming class and have never run into this\n\nproblem :-). The reason I’ve never seen it is that there is a lot of\n\ndifference between being source level portable and being portable all\n\nthe way down to the development environment.\n\nOf course.\n\nThe development environments on the Mac, Windows, and Linux/UNIX are\n\nso different that nobody seems to expect the make files to work across\n\ndifferent platforms.\n\nIMHO, they SHOULD expect this.\n\nWhy? They are different platforms with different tool chains from\n\ndifferent vendors.\n\nEspecially with something like SDL. I\n\nshould be able to just require SDL/OpenGL, gcc-3.x, and gnu make, and\n\nthe platform should then be irrelevant.\n\nHumm… Yeah. Well, it isn’t and there is very little that SDL can do\n\nabout it.\n\nThe thing that surprises me the most is that you can require students to\n\nuse gcc and gnu make on Windows and on the Mac. If I tried to do that I\n\nwouldn’t have any students. Seriously, if I told students who are Mac\n\nand Windows users that they couldn’t use their favorite IDEs most would\n\nwalk out. By the end of the class their exposure to SDL and OpenGL leads\n\nthem to be more accepting of non-Microsoft and non-Apple ways of doing\n\nthings. But, I have lost students because I was using SDL and OpenGL.\n\nMany many people are absolutely convinced that it isn’t game programming\n\nif it isn’t using DirectX on Windows.\n\n…which I was hoping to avoid. I don’t know why, but I’ve had more\n\nobscure problems with auto* than with any other aspect of the various\n\nprojects I’ve maintained.\n\nMe too.\n\nBob PendletonOn Thu, 2005-03-31 at 15:58 -0500, Steaphan Greene wrote:\n\nOn Thu, Mar 31, 2005 at 01:49:27PM -0600, Bob Pendleton wrote:\n\nSDL mailing list\n\nSDL at libsdl.org\n\nhttp://www.libsdl.org/mailman/listinfo/sdl\n\nThe development environments on the Mac, Windows, and Linux/UNIX are\n\nso different that nobody seems to expect the make files to work across\n\ndifferent platforms.\n\nIMHO, they SHOULD expect this.\n\nWhy? They are different platforms with different tool chains from\n\ndifferent vendors.\n\nStandards are a beautiful thing. Just because so few companies in our\n\nindustry use and follow them doesn’t mean they shouldn’t exist and\n\nshould not be followed.\n\nThe thing that surprises me the most is that you can require students to\n\nuse gcc and gnu make on Windows and on the Mac.\n\nI don’t. They can use whatever environment they want. The just have to\n\nbe sure it DOES work with gcc on all these platforms and provide a\n\nworking Makefile. I provide a compiling environment in Linux that can\n\nalso cross compile for Windows for testing, but they can feel free to\n\nuse whatever environment they want, provided they can get SDL and\n\nfriends working with it on their own.\n\nIf I tried to do that I wouldn’t have any students. Seriously, if I\n\ntold students who are Mac and Windows users that they couldn’t use\n\ntheir favorite IDEs most would walk out. By the end of the class their\n\nexposure to SDL and OpenGL leads them to be more accepting of\n\nnon-Microsoft and non-Apple ways of doing things. But, I have lost\n\nstudents because I was using SDL and OpenGL.\n\nSounds like you don’t have very interested students.\n\nMany many people are absolutely convinced that it isn’t game\n\nprogramming if it isn’t using DirectX on Windows.\n\nAnd years before that people would have said that writing games for\n\npersonal computers was a waste of time. Again, just because people\n\naren’t doing something, doesn’t mean it’s not the right thing to do.\n\nIt’s important to note that I’m not teaching a game programming class,\n\nI’m teaching an open game development class. There is a big difference.\n\nThe focus of my course is on the open development, not the games.On Fri, Apr 01, 2005 at 02:42:37PM -0600, Bob Pendleton wrote:\n\n–\n\nSteaphan Greene\n\nGPG public key: http://www.cs.binghamton.edu/~sgreene/gpg.key.txt\n\n-------------- next part --------------\n\nA non-text attachment was scrubbed…\n\nName: not available\n\nType: application/pgp-signature\n\nSize: 189 bytes\n\nDesc: not available\n\nURL: http://lists.libsdl.org/pipermail/sdl-libsdl.org/attachments/20050402/28e40417/attachment.pgp"
    }
}