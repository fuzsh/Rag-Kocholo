{
    "id": "dbpedia_8586_2",
    "rank": 93,
    "data": {
        "url": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html",
        "read_more_link": "",
        "language": "en",
        "title": "Directives — Sphinx documentation",
        "top_image": "https://www.sphinx-doc.org/en/master/_static/favicon.svg",
        "meta_img": "https://www.sphinx-doc.org/en/master/_static/favicon.svg",
        "images": [
            "https://www.sphinx-doc.org/en/master/_static/sphinx-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../../_static/favicon.svg",
        "meta_site_name": "",
        "canonical_link": "https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html",
        "text": "This directive inserts a “TOC tree” at the current location, using the individual TOCs (including “sub-TOC trees”) of the documents given in the directive body. Relative document names (not beginning with a slash) are relative to the document the directive occurs in, absolute names are relative to the source directory. A numeric maxdepth option may be given to indicate the depth of the tree; by default, all levels are included.\n\nThe representation of “TOC tree” is changed in each output format. The builders that output multiple files (e.g. HTML) treat it as a collection of hyperlinks. On the other hand, the builders that output a single file (e.g. LaTeX, man page, etc.) replace it with the content of the documents on the TOC tree.\n\nConsider this example (taken from the Python docs’ library reference index):\n\n.. toctree:: :maxdepth: 2 intro strings datatypes numeric (many more documents listed here)\n\nThis accomplishes two things:\n\nTables of contents from all those documents are inserted, with a maximum depth of two, that means one nested heading. toctree directives in those documents are also taken into account.\n\nSphinx knows the relative order of the documents intro, strings and so forth, and it knows that they are children of the shown document, the library index. From this information it generates “next chapter”, “previous chapter” and “parent chapter” links.\n\nEntries\n\nDocument titles in the toctree will be automatically read from the title of the referenced document. If that isn’t what you want, you can specify an explicit title and target using a similar syntax to reStructuredText hyperlinks (and Sphinx’s cross-referencing syntax). This looks like:\n\n.. toctree:: intro All about strings <strings> datatypes\n\nThe second line above will link to the strings document, but will use the title “All about strings” instead of the title of the strings document.\n\nYou can also add external links, by giving an HTTP URL instead of a document name.\n\nThe special entry name self stands for the document containing the toctree directive. This is useful if you want to generate a “sitemap” from the toctree.\n\nIn the end, all documents in the source directory (or subdirectories) must occur in some toctree directive; Sphinx will emit a warning if it finds a file that is not included, because that means that this file will not be reachable through standard navigation.\n\nUse exclude_patterns to explicitly exclude documents or directories from building completely. Use the “orphan” metadata to let a document be built, but notify Sphinx that it is not reachable via a toctree.\n\nThe “root document” (selected by root_doc) is the “root” of the TOC tree hierarchy. It can be used as the documentation’s main page, or as a “full table of contents” if you don’t give a :maxdepth: option.\n\nChanged in version 0.6: Added support for external links and “self” references.\n\nOptions\n\n:class: class names (a list of class names, separated by spaces)¶\n\nAssign class attributes. This is a common option. For example:\n\n.. toctree:: :class: custom-toc\n\nAdded in version 7.4.\n\n:name: label (text)¶\n\nAn implicit target name that can be referenced using ref. This is a common option. For example:\n\n.. toctree:: :name: mastertoc foo\n\nAdded in version 1.3.\n\n:caption: (text)¶\n\nAdd a caption to the toctree. For example:\n\n.. toctree:: :caption: Table of Contents foo\n\nAdded in version 1.3.\n\n:numbered:¶\n\n:numbered: depth\n\nIf you want to have section numbers even in HTML output, add the :numbered: option to the top-level toctree. For example:\n\n.. toctree:: :numbered: foo bar\n\nSection numbering then starts at the heading of foo. Sub-toctrees are automatically numbered (don’t give the numbered flag to those).\n\nNumbering up to a specific depth is also possible, by giving the depth as a numeric argument to numbered.\n\nAdded in version 0.6.\n\nChanged in version 1.1: Added the numeric depth argument.\n\n:titlesonly:¶\n\nOnly list document titles, not other headings of the same level. For example:\n\n.. toctree:: :titlesonly: foo bar\n\nAdded in version 1.0.\n\n:glob:¶\n\nParse glob wildcards in toctree entries. All entries are matched against the list of available documents, and matches are inserted into the list alphabetically. For example:\n\n.. toctree:: :glob: intro* recipe/* *\n\nThis includes first all documents whose names start with intro, then all documents in the recipe folder, then all remaining documents (except the one containing the directive, of course.)\n\nAdded in version 0.3.\n\n:reversed:¶\n\nReverse the order of the entries in the list. This is particularly useful when using the :glob: option.\n\nAdded in version 1.5.\n\n:hidden:¶\n\nA hidden toctree only defines the document hierarchy. It will not insert links into the document at the location of the directive.\n\nThis makes sense if you have other means of navigation, e.g. through manual links, HTML sidebar navigation, or if you use the :includehidden: option on the top-level toctree.\n\nAdded in version 0.6.\n\n:includehidden:¶\n\nIf you want one global table of contents showing the complete document structure, you can add the :includehidden: option to the top-level toctree directive. All other toctrees on child pages can then be made invisible with the :hidden: option. The top-level toctree with :includehidden: will then include their entries.\n\nAdded in version 1.2.\n\nLonger displays of verbatim text may be included by storing the example text in an external file containing only plain text. The file may be included using the literalinclude directive. For example, to include the Python source file example.py, use:\n\n.. literalinclude:: example.py\n\nThe file name is usually relative to the current file’s path. However, if it is absolute (starting with /), it is relative to the top source directory.\n\nAdditional options\n\nLike code-block, the directive supports the linenos flag option to switch on line numbers, the lineno-start option to select the first line number, the emphasize-lines option to emphasize particular lines, the name option to provide an implicit target name, the dedent option to strip indentation characters for the code block, and a language option to select a language different from the current file’s standard language. In addition, it supports the caption option; however, this can be provided with no argument to use the filename as the caption. Example with options:\n\n.. literalinclude:: example.rb :language: ruby :emphasize-lines: 12,15-18 :linenos:\n\nTabs in the input are expanded if you give a tab-width option with the desired tab width.\n\nInclude files are assumed to be encoded in the source_encoding. If the file has a different encoding, you can specify it with the encoding option:\n\n.. literalinclude:: example.py :encoding: latin-1\n\nThe directive also supports including only parts of the file. If it is a Python module, you can select a class, function or method to include using the pyobject option:\n\n.. literalinclude:: example.py :pyobject: Timer.start\n\nThis would only include the code lines belonging to the start() method in the Timer class within the file.\n\nAlternately, you can specify exactly which lines to include by giving a lines option:\n\n.. literalinclude:: example.py :lines: 1,3,5-10,20-\n\nThis includes the lines 1, 3, 5 to 10 and lines 20 to the last line.\n\nAnother way to control which part of the file is included is to use the start-after and end-before options (or only one of them). If start-after is given as a string option, only lines that follow the first line containing that string are included. If end-before is given as a string option, only lines that precede the first lines containing that string are included. The start-at and end-at options behave in a similar way, but the lines containing the matched string are included.\n\nstart-after/start-at and end-before/end-at can have same string. start-after/start-at filter lines before the line that contains option string (start-at will keep the line). Then end-before/end-at filter lines after the line that contains option string (end-at will keep the line and end-before skip the first line).\n\nNote\n\nIf you want to select only [second-section] of ini file like the following, you can use :start-at: [second-section] and :end-before: [third-section]:\n\n[first-section] var_in_first=true [second-section] var_in_second=true [third-section] var_in_third=true\n\nUseful cases of these option is working with tag comments. :start-after: [initialize] and :end-before: [initialized] options keep lines between comments:\n\nif __name__ == \"__main__\": # [initialize] app.start(\":8000\") # [initialized]\n\nWhen lines have been selected in any of the ways described above, the line numbers in emphasize-lines refer to those selected lines, counted consecutively starting at 1.\n\nWhen specifying particular parts of a file to display, it can be useful to display the original line numbers. This can be done using the lineno-match option, which is however allowed only when the selection consists of contiguous lines.\n\nYou can prepend and/or append a line to the included code, using the prepend and append option, respectively. This is useful e.g. for highlighting PHP code that doesn’t include the <?php/?> markers.\n\nIf you want to show the diff of the code, you can specify the old file by giving a diff option:\n\n.. literalinclude:: example.py :diff: example.py.orig\n\nThis shows the diff between example.py and example.py.orig with unified diff format.\n\nA force option can ignore minor errors on highlighting.\n\nChanged in version 0.4.3: Added the encoding option.\n\nChanged in version 0.6: Added the pyobject, lines, start-after and end-before options, as well as support for absolute filenames.\n\nChanged in version 1.0: Added the prepend, append, and tab-width options.\n\nChanged in version 1.3: Added the diff, lineno-match, caption, name, and dedent options.\n\nChanged in version 1.4: Added the class option.\n\nChanged in version 1.5: Added the start-at, and end-at options.\n\nChanged in version 1.6: With both start-after and lines in use, the first line as per start-after is considered to be with line number 1 for lines.\n\nChanged in version 2.1: Added the force option.\n\nChanged in version 3.5: Support automatic dedent.\n\nInclude the content of the directive only if the expression is true. The expression should consist of tags, like this:\n\n.. only:: html and draft\n\nUndefined tags are false, defined tags are true (tags can be defined via the --tag command-line option or within conf.py, see here). Boolean expressions (like (latex or html) and draft) are supported and may use parentheses.\n\nThe format and the name of the current builder (html, latex or text) are always set as a tag . To make the distinction between format and name explicit, they are also added with the prefix format_ and builder_, e.g. the epub builder defines the tags html, epub, format_html and builder_epub.\n\nThese standard tags are set after the configuration file is read, so they are not available there.\n\nAll tags must follow the standard Python identifier syntax as set out in the Identifiers and keywords documentation. That is, a tag expression may only consist of tags that conform to the syntax of Python variables. In ASCII, this consists of the uppercase and lowercase letters A through Z, the underscore _ and, except for the first character, the digits 0 through 9.\n\nAdded in version 0.6.\n\nChanged in version 1.2: Added the name of the builder and the prefixes.\n\nWarning\n\nThis directive is designed to control only content of document. It could not control sections, labels and so on.\n\nThis directive influences only the LaTeX output for the next table in source. The mandatory argument is a column specification (known as an “alignment preamble” in LaTeX idiom). Please refer to a LaTeX documentation, such as the wiki page, for basics of such a column specification.\n\nAdded in version 0.3.\n\nNote\n\ntabularcolumns conflicts with :widths: option of table directives. If both are specified, :widths: option will be ignored.\n\nSphinx will render tables with more than 30 rows with longtable. Besides the l, r, c and p{width} column specifiers, one can also use \\X{a}{b} (new in version 1.5) which configures the column width to be a fraction a/b of the total line width and \\Y{f} (new in version 1.6) where f is a decimal: for example \\Y{0.2} means that the column will occupy 0.2 times the line width.\n\nWhen this directive is used for a table with at most 30 rows, Sphinx will render it with tabulary. One can then use specific column types L (left), R (right), C (centered) and J (justified). They have the effect of a p{width} (i.e. each cell is a LaTeX \\parbox) with the specified internal text alignment and an automatically computed width.\n\nWarning\n\nCells that contain list-like elements such as object descriptions, blockquotes or any kind of lists are not compatible with the LRCJ column types. The column type must then be some p{width} with an explicit width (or \\X{a}{b} or \\Y{f}).\n\nLiteral blocks do not work with tabulary at all. Sphinx will fall back to tabular or longtable environments and generate a suitable column specification.\n\nThis directive is used to enclose a group of productions. Each production is given on a single line and consists of a name, separated by a colon from the following definition. If the definition spans multiple lines, each continuation line must begin with a colon placed at the same column as in the first line. Blank lines are not allowed within productionlist directive arguments.\n\nThe definition can contain token names which are marked as interpreted text (e.g., “sum ::= `integer` \"+\" `integer`”) – this generates cross-references to the productions of these tokens. Outside of the production list, you can reference to token productions using token.\n\nThe productionGroup argument to productionlist serves to distinguish different sets of production lists that belong to different grammars. Multiple production lists with the same productionGroup thus define rules in the same scope.\n\nInside of the production list, tokens implicitly refer to productions from the current group. You can refer to the production of another grammar by prefixing the token with its group name and a colon, e.g, “otherGroup:sum”. If the group of the token should not be shown in the production, it can be prefixed by a tilde, e.g., “~otherGroup:sum”. To refer to a production from an unnamed grammar, the token should be prefixed by a colon, e.g., “:sum”.\n\nOutside of the production list, if you have given a productionGroup argument you must prefix the token name in the cross-reference with the group name and a colon, e.g., “myGroup:sum” instead of just “sum”. If the group should not be shown in the title of the link either an explicit title can be given (e.g., “myTitle <myGroup:sum>”), or the target can be prefixed with a tilde (e.g., “~myGroup:sum”).\n\nNote that no further reStructuredText parsing is done in the production, so that you don’t have to escape * or | characters."
    }
}