{
    "id": "dbpedia_8586_2",
    "rank": 51,
    "data": {
        "url": "https://www.jetbrains.com/help/idea/generating-code.html",
        "read_more_link": "",
        "language": "en",
        "title": "IntelliJ IDEA Documentation",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.general.ellipsis.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.2/generate_equals_and_hashCode.png",
            "https://resources.jetbrains.com/help/img/idea/2024.2/app.general.ellipsis.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.2/generate-java-code-completion-popup.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn about generating various code constructs and elements to increase productivity.",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "IntelliJÂ IDEA Help",
        "canonical_link": "https://www.jetbrains.com/help/idea/generating-code.html",
        "text": "Generate code\n\nIntelliJ IDEA provides multiple ways to generate common code constructs and recurring elements, which helps you increase productivity. These can be either file templates used when creating a new file, custom or predefined live templates that are applied differently based on the context, various wrappers, or automatic pairing of characters.\n\nAdditionally, IntelliJ IDEA provides code completion and Emmet support.\n\nThis topic describes ways to generate standard code constructs specific to Java: constructors, method overrides and implementations, getters and setters, and so on. Go to Code | Generate Alt+Insert to open the popup menu with available constructs that you can generate.\n\nHere is a video that demonstrates how to generate various code constructs in IntelliJ IDEA:\n\nGenerate delegation methods\n\nIntelliJ IDEA can generate methods that delegate behavior to the fields or methods of your class. This approach makes it possible to give access to the data of a field or method without directly exposing this field or method.\n\nGenerate a delegation method for a class\n\nIn the main menu, go to Code and select Generate (Alt+Insert).\n\nIn the Generate popup, click Delegate Methods.\n\nSelect the target field or method, and click OK.\n\nSelect the desired methods to be delegated and click OK.\n\nThe following code fragment shows the result of delegating the get(i) method of the Calendar class inside another class:\n\nCalendar calendar; public int get(int i) { return calendar.get(i); }\n\nGenerate equals() and hashCode() methods\n\nThe Java super class java.lang.Object provides two methods for comparing objects:\n\npublic boolean equals(Object obj) returns true if the object passed to it as the argument is equal to the object on which this method is invoked. By default, this means that two objects are stored in the same memory address.\n\npublic int hashCode() returns the hash code value of the object on which this method is invoked. The hash code must not change during one execution of the application but may change between executions.\n\nGenerate equals() and hashCode() for a class\n\nIn the main menu, go to Code and select Generate (Alt+Insert).\n\nIn the Generate popup, click equals() and hashCode().\n\nSelect a velocity template from the Template list.\n\nYou can also click to open the Templates dialog, where you can select an existing template or create a custom template.\n\nSelect an expression to generate within the method. Hover over the question mark icon to open a tooltip with an explanation of advantages and disadvantages of using each of the expressions.\n\nClick Next.\n\nSelect the fields that should be used to determine equality, and click Next.\n\nSelect the fields to use for calculating the hash code value. You can choose only from fields that were selected on the previous step (for determining equality). Click Next.\n\nSelect the fields that contain non-null values. This optional step helps the generated code avoid checks for null and thus improves performance. Click Finish.\n\nThe following code fragment shows the result of overriding the equals() and hashCode() methods:\n\npublic boolean equals(Object o){ if(this==o)return true; if(o==null||getClass()!=o.getClass())return false; FixedRateCurrencyExchangeService that=(FixedRateCurrencyExchangeService)o; if(Double.compare(that.rate,rate)!=0)return false; return true; } public int hashCode(){ long temp=rate!=+0.0d?Double.doubleToLongBits(rate):0L; return int(temp^(temp>>>32)); }\n\nGenerate getters and setters\n\nIntelliJ IDEA can generate accessor and mutator methods (getters and setters) for the fields in your classes. Generated methods have only one argument, as required by the JavaBeans API.\n\nThe getter and setter method names are generated by IntelliJ IDEA according to your code generation naming preferences.\n\nIn the main menu, go to Code and select Generate (Alt+Insert).\n\nIn the Generate popup, click one of the following:\n\nGetter to generate accessor methods for getting the current values of class fields.\n\nSetter to generate mutator methods for setting the values of class fields.\n\nGetter and Setter to generate both accessor and mutator methods.\n\nSelect the fields to generate getters or setters for and click OK.\n\nYou can add a custom getter or setter method by clicking and accessing the Getter/Setter Templates dialog. If a field is not in the list, then the corresponding getter and setter methods are already defined for it.\n\nThe following code fragment shows the result of generating the getter and setter methods for a class with one field var:\n\npublic class MyClass { int field; public int getField() { return field; } public void setField(int field) { this.field = field; } }\n\nGenerate toString()\n\nThe toString() method of the Java super class java.lang.Object returns the string representation of the object. This method can be used to print any object to the standard output, for example, to quickly monitor the execution of your code. By default, toString() returns the name of the class followed by the hash code of the object. You can override it to return the values of the object's fields, for example, which can be more informative for your needs.\n\nOverride the toString() method for a class\n\nOn the Code menu, click Generate Alt+Insert.\n\nIn the Generate popup, click toString().\n\nConfigure the following:\n\nSelect the template for generating the toString() method from the Template list.\n\nSelect the fields that you want to return in the generated toString() method. By default, all the available fields are selected. Click Select None to generate a toString() method that returns only the class name.\n\nSelect the Insert @Override checkbox if necessary.\n\nClick the Settings button to open the toString() Generation Settings dialog. where you can tune the behavior and add custom templates.\n\nClick OK.\n\nIf the toString() method is already defined in the class, by default, you will be prompted whether you would like to delete this method before proceeding. You can use the When method already exists group of options in the toString() Generation Settings dialog to change this behavior: either automatically replace existing method or generate a duplicating method.\n\nThe following code fragment shows the result of generating the toString() method for a class with several fields defined:\n\npublic class MyClass { private String name; private String url; private int port; private String[] validIPs; ... public String toString() { return \"MyClass{\" + \"name='\" + name + '\\'' + \", url='\" + url + '\\'' + \", port=\" + port + \", validIps=\" + Arrays.toString(validIps) + '}'; } ... }\n\nThe following code inspections are related to the toString() method:\n\nClass does not override 'toString()' method can be used to identify classes in which the toString() method is not defined. This inspection uses the exclude settings to ignore classes with fields that are not supposed to be dumped. An additional setting is to exclude certain classes using a regular expression matching their class name. As default, this is used to exclude any exception classes.\n\nField not used in 'toString()' method can be used to identify fields that are not dumped in the toString() method. For example, if you added new fields to a class, but forgot to add them to the toString() method. Change the severity of this inspection to show errors as warnings. This will highlight any unused fields in the editor and indicate their location as yellow markers on the scroll bar.\n\nCustom code generation templates\n\nTemplates used for generating getters and setters, as well as equals(), hashCode(), and toString() methods are written in the Velocity template language. Although you can't modify predefined templates, you can add your own custom templates to implement necessary behavior.\n\nIntelliJ IDEA provides the following variables for Velocity templates:\n\nThe following variables can be used in templates for generating getters and setters:\n\nVariable\n\nDescription\n\nThe following variables can be used in templates for generating the toString() method:\n\nVariable\n\nDescription\n\nThe following variables can be used in templates for generating the equals() method:\n\nVariable\n\nDescription\n\nThe following variables can be used in templates for generating the hashCode() method:\n\nVariable\n\nDescription\n\nLast modified: 15 July 2024"
    }
}